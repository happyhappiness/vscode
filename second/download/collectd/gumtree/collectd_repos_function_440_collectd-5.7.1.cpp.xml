<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_440_collectd-5.7.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">us_open_socket<pos:position pos:line="1" pos:column="26"/></name><parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><name pos:line="1" pos:column="27">void<pos:position pos:line="1" pos:column="31"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="32"/></parameter_list> <block pos:line="1" pos:column="33">{
  <decl_stmt><decl><type><name><name pos:line="2" pos:column="3">struct<pos:position pos:line="2" pos:column="9"/></name> <name pos:line="2" pos:column="10">sockaddr_un<pos:position pos:line="2" pos:column="21"/></name></name></type> <name pos:line="2" pos:column="22">sa<pos:position pos:line="2" pos:column="24"/></name> <init pos:line="2" pos:column="25">= <expr><block pos:line="2" pos:column="27">{<expr><literal type="number" pos:line="2" pos:column="28">0<pos:position pos:line="2" pos:column="29"/></literal></expr>}<pos:position pos:line="2" pos:column="30"/></block></expr></init></decl>;<pos:position pos:line="2" pos:column="31"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">int<pos:position pos:line="3" pos:column="6"/></name></type> <name pos:line="3" pos:column="7">status<pos:position pos:line="3" pos:column="13"/></name></decl>;<pos:position pos:line="3" pos:column="14"/></decl_stmt>

  <expr_stmt><expr><name pos:line="5" pos:column="3">sock_fd<pos:position pos:line="5" pos:column="10"/></name> <operator pos:line="5" pos:column="11">=<pos:position pos:line="5" pos:column="12"/></operator> <call><name pos:line="5" pos:column="13">socket<pos:position pos:line="5" pos:column="19"/></name><argument_list pos:line="5" pos:column="19">(<argument><expr><name pos:line="5" pos:column="20">PF_UNIX<pos:position pos:line="5" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="5" pos:column="29">SOCK_STREAM<pos:position pos:line="5" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="5" pos:column="42">0<pos:position pos:line="5" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="5" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="45"/></expr_stmt>
  <if pos:line="6" pos:column="3">if <condition pos:line="6" pos:column="6">(<expr><name pos:line="6" pos:column="7">sock_fd<pos:position pos:line="6" pos:column="14"/></name> <operator pos:line="6" pos:column="15">&lt;<pos:position pos:line="6" pos:column="19"/></operator> <literal type="number" pos:line="6" pos:column="17">0<pos:position pos:line="6" pos:column="18"/></literal></expr>)<pos:position pos:line="6" pos:column="19"/></condition><then pos:line="6" pos:column="19"> <block pos:line="6" pos:column="20">{
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">char<pos:position pos:line="7" pos:column="9"/></name></type> <name><name pos:line="7" pos:column="10">errbuf<pos:position pos:line="7" pos:column="16"/></name><index pos:line="7" pos:column="16">[<expr><literal type="number" pos:line="7" pos:column="17">1024<pos:position pos:line="7" pos:column="21"/></literal></expr>]<pos:position pos:line="7" pos:column="22"/></index></name></decl>;<pos:position pos:line="7" pos:column="23"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="8" pos:column="5">ERROR<pos:position pos:line="8" pos:column="10"/></name><argument_list pos:line="8" pos:column="10">(<argument><expr><literal type="string" pos:line="8" pos:column="11">"unixsock plugin: socket failed: %s"<pos:position pos:line="8" pos:column="47"/></literal></expr></argument>,
          <argument><expr><call><name pos:line="9" pos:column="11">sstrerror<pos:position pos:line="9" pos:column="20"/></name><argument_list pos:line="9" pos:column="20">(<argument><expr><name pos:line="9" pos:column="21">errno<pos:position pos:line="9" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="28">errbuf<pos:position pos:line="9" pos:column="34"/></name></expr></argument>, <argument><expr><sizeof pos:line="9" pos:column="36">sizeof<argument_list pos:line="9" pos:column="42">(<argument><expr><name pos:line="9" pos:column="43">errbuf<pos:position pos:line="9" pos:column="49"/></name></expr></argument>)<pos:position pos:line="9" pos:column="50"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="9" pos:column="51"/></argument_list></call></expr></argument>)<pos:position pos:line="9" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="53"/></expr_stmt>
    <return pos:line="10" pos:column="5">return <expr><operator pos:line="10" pos:column="12">(<pos:position pos:line="10" pos:column="13"/></operator><operator pos:line="10" pos:column="13">-<pos:position pos:line="10" pos:column="14"/></operator><literal type="number" pos:line="10" pos:column="14">1<pos:position pos:line="10" pos:column="15"/></literal><operator pos:line="10" pos:column="15">)<pos:position pos:line="10" pos:column="16"/></operator></expr>;<pos:position pos:line="10" pos:column="17"/></return>
  }<pos:position pos:line="11" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name><name pos:line="13" pos:column="3">sa<pos:position pos:line="13" pos:column="5"/></name><operator pos:line="13" pos:column="5">.<pos:position pos:line="13" pos:column="6"/></operator><name pos:line="13" pos:column="6">sun_family<pos:position pos:line="13" pos:column="16"/></name></name> <operator pos:line="13" pos:column="17">=<pos:position pos:line="13" pos:column="18"/></operator> <name pos:line="13" pos:column="19">AF_UNIX<pos:position pos:line="13" pos:column="26"/></name></expr>;<pos:position pos:line="13" pos:column="27"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="14" pos:column="3">sstrncpy<pos:position pos:line="14" pos:column="11"/></name><argument_list pos:line="14" pos:column="11">(<argument><expr><name><name pos:line="14" pos:column="12">sa<pos:position pos:line="14" pos:column="14"/></name><operator pos:line="14" pos:column="14">.<pos:position pos:line="14" pos:column="15"/></operator><name pos:line="14" pos:column="15">sun_path<pos:position pos:line="14" pos:column="23"/></name></name></expr></argument>, <argument><expr><ternary><condition><expr><operator pos:line="14" pos:column="25">(<pos:position pos:line="14" pos:column="26"/></operator><name pos:line="14" pos:column="26">sock_file<pos:position pos:line="14" pos:column="35"/></name> <operator pos:line="14" pos:column="36">!=<pos:position pos:line="14" pos:column="38"/></operator> <name pos:line="14" pos:column="39">NULL<pos:position pos:line="14" pos:column="43"/></name><operator pos:line="14" pos:column="43">)<pos:position pos:line="14" pos:column="44"/></operator></expr> ?<pos:position pos:line="14" pos:column="46"/></condition><then pos:line="14" pos:column="46"> <expr><name pos:line="14" pos:column="47">sock_file<pos:position pos:line="14" pos:column="56"/></name></expr> <pos:position pos:line="14" pos:column="57"/></then><else pos:line="14" pos:column="57">: <expr><name pos:line="14" pos:column="59">US_DEFAULT_PATH<pos:position pos:line="14" pos:column="74"/></name></expr></else></ternary></expr></argument>,
           <argument><expr><sizeof pos:line="15" pos:column="12">sizeof<argument_list pos:line="15" pos:column="18">(<argument><expr><name><name pos:line="15" pos:column="19">sa<pos:position pos:line="15" pos:column="21"/></name><operator pos:line="15" pos:column="21">.<pos:position pos:line="15" pos:column="22"/></operator><name pos:line="15" pos:column="22">sun_path<pos:position pos:line="15" pos:column="30"/></name></name></expr></argument>)<pos:position pos:line="15" pos:column="31"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="15" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="33"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="17" pos:column="3">DEBUG<pos:position pos:line="17" pos:column="8"/></name><argument_list pos:line="17" pos:column="8">(<argument><expr><literal type="string" pos:line="17" pos:column="9">"unixsock plugin: socket path = %s"<pos:position pos:line="17" pos:column="44"/></literal></expr></argument>, <argument><expr><name><name pos:line="17" pos:column="46">sa<pos:position pos:line="17" pos:column="48"/></name><operator pos:line="17" pos:column="48">.<pos:position pos:line="17" pos:column="49"/></operator><name pos:line="17" pos:column="49">sun_path<pos:position pos:line="17" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="17" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="59"/></expr_stmt>

  <if pos:line="19" pos:column="3">if <condition pos:line="19" pos:column="6">(<expr><name pos:line="19" pos:column="7">delete_socket<pos:position pos:line="19" pos:column="20"/></name></expr>)<pos:position pos:line="19" pos:column="21"/></condition><then pos:line="19" pos:column="21"> <block pos:line="19" pos:column="22">{
    <expr_stmt><expr><name pos:line="20" pos:column="5">errno<pos:position pos:line="20" pos:column="10"/></name> <operator pos:line="20" pos:column="11">=<pos:position pos:line="20" pos:column="12"/></operator> <literal type="number" pos:line="20" pos:column="13">0<pos:position pos:line="20" pos:column="14"/></literal></expr>;<pos:position pos:line="20" pos:column="15"/></expr_stmt>
    <expr_stmt><expr><name pos:line="21" pos:column="5">status<pos:position pos:line="21" pos:column="11"/></name> <operator pos:line="21" pos:column="12">=<pos:position pos:line="21" pos:column="13"/></operator> <call><name pos:line="21" pos:column="14">unlink<pos:position pos:line="21" pos:column="20"/></name><argument_list pos:line="21" pos:column="20">(<argument><expr><name><name pos:line="21" pos:column="21">sa<pos:position pos:line="21" pos:column="23"/></name><operator pos:line="21" pos:column="23">.<pos:position pos:line="21" pos:column="24"/></operator><name pos:line="21" pos:column="24">sun_path<pos:position pos:line="21" pos:column="32"/></name></name></expr></argument>)<pos:position pos:line="21" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="34"/></expr_stmt>
    <if pos:line="22" pos:column="5">if <condition pos:line="22" pos:column="8">(<expr><operator pos:line="22" pos:column="9">(<pos:position pos:line="22" pos:column="10"/></operator><name pos:line="22" pos:column="10">status<pos:position pos:line="22" pos:column="16"/></name> <operator pos:line="22" pos:column="17">!=<pos:position pos:line="22" pos:column="19"/></operator> <literal type="number" pos:line="22" pos:column="20">0<pos:position pos:line="22" pos:column="21"/></literal><operator pos:line="22" pos:column="21">)<pos:position pos:line="22" pos:column="22"/></operator> <operator pos:line="22" pos:column="23">&amp;&amp;<pos:position pos:line="22" pos:column="33"/></operator> <operator pos:line="22" pos:column="26">(<pos:position pos:line="22" pos:column="27"/></operator><name pos:line="22" pos:column="27">errno<pos:position pos:line="22" pos:column="32"/></name> <operator pos:line="22" pos:column="33">!=<pos:position pos:line="22" pos:column="35"/></operator> <name pos:line="22" pos:column="36">ENOENT<pos:position pos:line="22" pos:column="42"/></name><operator pos:line="22" pos:column="42">)<pos:position pos:line="22" pos:column="43"/></operator></expr>)<pos:position pos:line="22" pos:column="44"/></condition><then pos:line="22" pos:column="44"> <block pos:line="22" pos:column="45">{
      <decl_stmt><decl><type><name pos:line="23" pos:column="7">char<pos:position pos:line="23" pos:column="11"/></name></type> <name><name pos:line="23" pos:column="12">errbuf<pos:position pos:line="23" pos:column="18"/></name><index pos:line="23" pos:column="18">[<expr><literal type="number" pos:line="23" pos:column="19">1024<pos:position pos:line="23" pos:column="23"/></literal></expr>]<pos:position pos:line="23" pos:column="24"/></index></name></decl>;<pos:position pos:line="23" pos:column="25"/></decl_stmt>
      <expr_stmt><expr><call><name pos:line="24" pos:column="7">WARNING<pos:position pos:line="24" pos:column="14"/></name><argument_list pos:line="24" pos:column="14">(<argument><expr><literal type="string" pos:line="24" pos:column="15">"unixsock plugin: Deleting socket file \"%s\" failed: %s"<pos:position pos:line="24" pos:column="72"/></literal></expr></argument>,
              <argument><expr><name><name pos:line="25" pos:column="15">sa<pos:position pos:line="25" pos:column="17"/></name><operator pos:line="25" pos:column="17">.<pos:position pos:line="25" pos:column="18"/></operator><name pos:line="25" pos:column="18">sun_path<pos:position pos:line="25" pos:column="26"/></name></name></expr></argument>, <argument><expr><call><name pos:line="25" pos:column="28">sstrerror<pos:position pos:line="25" pos:column="37"/></name><argument_list pos:line="25" pos:column="37">(<argument><expr><name pos:line="25" pos:column="38">errno<pos:position pos:line="25" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="45">errbuf<pos:position pos:line="25" pos:column="51"/></name></expr></argument>, <argument><expr><sizeof pos:line="25" pos:column="53">sizeof<argument_list pos:line="25" pos:column="59">(<argument><expr><name pos:line="25" pos:column="60">errbuf<pos:position pos:line="25" pos:column="66"/></name></expr></argument>)<pos:position pos:line="25" pos:column="67"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="25" pos:column="68"/></argument_list></call></expr></argument>)<pos:position pos:line="25" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="70"/></expr_stmt>
    }<pos:position pos:line="26" pos:column="6"/></block></then> <elseif pos:line="26" pos:column="7">else <if pos:line="26" pos:column="12">if <condition pos:line="26" pos:column="15">(<expr><name pos:line="26" pos:column="16">status<pos:position pos:line="26" pos:column="22"/></name> <operator pos:line="26" pos:column="23">==<pos:position pos:line="26" pos:column="25"/></operator> <literal type="number" pos:line="26" pos:column="26">0<pos:position pos:line="26" pos:column="27"/></literal></expr>)<pos:position pos:line="26" pos:column="28"/></condition><then pos:line="26" pos:column="28"> <block pos:line="26" pos:column="29">{
      <expr_stmt><expr><call><name pos:line="27" pos:column="7">INFO<pos:position pos:line="27" pos:column="11"/></name><argument_list pos:line="27" pos:column="11">(<argument><expr><literal type="string" pos:line="27" pos:column="12">"unixsock plugin: Successfully deleted socket file \"%s\"."<pos:position pos:line="27" pos:column="71"/></literal></expr></argument>,
           <argument><expr><name><name pos:line="28" pos:column="12">sa<pos:position pos:line="28" pos:column="14"/></name><operator pos:line="28" pos:column="14">.<pos:position pos:line="28" pos:column="15"/></operator><name pos:line="28" pos:column="15">sun_path<pos:position pos:line="28" pos:column="23"/></name></name></expr></argument>)<pos:position pos:line="28" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="25"/></expr_stmt>
    }<pos:position pos:line="29" pos:column="6"/></block></then></if></elseif></if>
  }<pos:position pos:line="30" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="32" pos:column="3">status<pos:position pos:line="32" pos:column="9"/></name> <operator pos:line="32" pos:column="10">=<pos:position pos:line="32" pos:column="11"/></operator> <call><name pos:line="32" pos:column="12">bind<pos:position pos:line="32" pos:column="16"/></name><argument_list pos:line="32" pos:column="16">(<argument><expr><name pos:line="32" pos:column="17">sock_fd<pos:position pos:line="32" pos:column="24"/></name></expr></argument>, <argument><expr><operator pos:line="32" pos:column="26">(<pos:position pos:line="32" pos:column="27"/></operator>struct <name pos:line="32" pos:column="34">sockaddr<pos:position pos:line="32" pos:column="42"/></name> <operator pos:line="32" pos:column="43">*<pos:position pos:line="32" pos:column="44"/></operator><operator pos:line="32" pos:column="44">)<pos:position pos:line="32" pos:column="45"/></operator><operator pos:line="32" pos:column="45">&amp;<pos:position pos:line="32" pos:column="50"/></operator><name pos:line="32" pos:column="46">sa<pos:position pos:line="32" pos:column="48"/></name></expr></argument>, <argument><expr><sizeof pos:line="32" pos:column="50">sizeof<argument_list pos:line="32" pos:column="56">(<argument><expr><name pos:line="32" pos:column="57">sa<pos:position pos:line="32" pos:column="59"/></name></expr></argument>)<pos:position pos:line="32" pos:column="60"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="32" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="62"/></expr_stmt>
  <if pos:line="33" pos:column="3">if <condition pos:line="33" pos:column="6">(<expr><name pos:line="33" pos:column="7">status<pos:position pos:line="33" pos:column="13"/></name> <operator pos:line="33" pos:column="14">!=<pos:position pos:line="33" pos:column="16"/></operator> <literal type="number" pos:line="33" pos:column="17">0<pos:position pos:line="33" pos:column="18"/></literal></expr>)<pos:position pos:line="33" pos:column="19"/></condition><then pos:line="33" pos:column="19"> <block pos:line="33" pos:column="20">{
    <decl_stmt><decl><type><name pos:line="34" pos:column="5">char<pos:position pos:line="34" pos:column="9"/></name></type> <name><name pos:line="34" pos:column="10">errbuf<pos:position pos:line="34" pos:column="16"/></name><index pos:line="34" pos:column="16">[<expr><literal type="number" pos:line="34" pos:column="17">1024<pos:position pos:line="34" pos:column="21"/></literal></expr>]<pos:position pos:line="34" pos:column="22"/></index></name></decl>;<pos:position pos:line="34" pos:column="23"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="35" pos:column="5">sstrerror<pos:position pos:line="35" pos:column="14"/></name><argument_list pos:line="35" pos:column="14">(<argument><expr><name pos:line="35" pos:column="15">errno<pos:position pos:line="35" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="22">errbuf<pos:position pos:line="35" pos:column="28"/></name></expr></argument>, <argument><expr><sizeof pos:line="35" pos:column="30">sizeof<argument_list pos:line="35" pos:column="36">(<argument><expr><name pos:line="35" pos:column="37">errbuf<pos:position pos:line="35" pos:column="43"/></name></expr></argument>)<pos:position pos:line="35" pos:column="44"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="35" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="46"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="36" pos:column="5">ERROR<pos:position pos:line="36" pos:column="10"/></name><argument_list pos:line="36" pos:column="10">(<argument><expr><literal type="string" pos:line="36" pos:column="11">"unixsock plugin: bind failed: %s"<pos:position pos:line="36" pos:column="45"/></literal></expr></argument>, <argument><expr><name pos:line="36" pos:column="47">errbuf<pos:position pos:line="36" pos:column="53"/></name></expr></argument>)<pos:position pos:line="36" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="55"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="37" pos:column="5">close<pos:position pos:line="37" pos:column="10"/></name><argument_list pos:line="37" pos:column="10">(<argument><expr><name pos:line="37" pos:column="11">sock_fd<pos:position pos:line="37" pos:column="18"/></name></expr></argument>)<pos:position pos:line="37" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="20"/></expr_stmt>
    <expr_stmt><expr><name pos:line="38" pos:column="5">sock_fd<pos:position pos:line="38" pos:column="12"/></name> <operator pos:line="38" pos:column="13">=<pos:position pos:line="38" pos:column="14"/></operator> <operator pos:line="38" pos:column="15">-<pos:position pos:line="38" pos:column="16"/></operator><literal type="number" pos:line="38" pos:column="16">1<pos:position pos:line="38" pos:column="17"/></literal></expr>;<pos:position pos:line="38" pos:column="18"/></expr_stmt>
    <return pos:line="39" pos:column="5">return <expr><operator pos:line="39" pos:column="12">(<pos:position pos:line="39" pos:column="13"/></operator><operator pos:line="39" pos:column="13">-<pos:position pos:line="39" pos:column="14"/></operator><literal type="number" pos:line="39" pos:column="14">1<pos:position pos:line="39" pos:column="15"/></literal><operator pos:line="39" pos:column="15">)<pos:position pos:line="39" pos:column="16"/></operator></expr>;<pos:position pos:line="39" pos:column="17"/></return>
  }<pos:position pos:line="40" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="42" pos:column="3">status<pos:position pos:line="42" pos:column="9"/></name> <operator pos:line="42" pos:column="10">=<pos:position pos:line="42" pos:column="11"/></operator> <call><name pos:line="42" pos:column="12">chmod<pos:position pos:line="42" pos:column="17"/></name><argument_list pos:line="42" pos:column="17">(<argument><expr><name><name pos:line="42" pos:column="18">sa<pos:position pos:line="42" pos:column="20"/></name><operator pos:line="42" pos:column="20">.<pos:position pos:line="42" pos:column="21"/></operator><name pos:line="42" pos:column="21">sun_path<pos:position pos:line="42" pos:column="29"/></name></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="31">sock_perms<pos:position pos:line="42" pos:column="41"/></name></expr></argument>)<pos:position pos:line="42" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="43"/></expr_stmt>
  <if pos:line="43" pos:column="3">if <condition pos:line="43" pos:column="6">(<expr><name pos:line="43" pos:column="7">status<pos:position pos:line="43" pos:column="13"/></name> <operator pos:line="43" pos:column="14">==<pos:position pos:line="43" pos:column="16"/></operator> <operator pos:line="43" pos:column="17">-<pos:position pos:line="43" pos:column="18"/></operator><literal type="number" pos:line="43" pos:column="18">1<pos:position pos:line="43" pos:column="19"/></literal></expr>)<pos:position pos:line="43" pos:column="20"/></condition><then pos:line="43" pos:column="20"> <block pos:line="43" pos:column="21">{
    <decl_stmt><decl><type><name pos:line="44" pos:column="5">char<pos:position pos:line="44" pos:column="9"/></name></type> <name><name pos:line="44" pos:column="10">errbuf<pos:position pos:line="44" pos:column="16"/></name><index pos:line="44" pos:column="16">[<expr><literal type="number" pos:line="44" pos:column="17">1024<pos:position pos:line="44" pos:column="21"/></literal></expr>]<pos:position pos:line="44" pos:column="22"/></index></name></decl>;<pos:position pos:line="44" pos:column="23"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="45" pos:column="5">ERROR<pos:position pos:line="45" pos:column="10"/></name><argument_list pos:line="45" pos:column="10">(<argument><expr><literal type="string" pos:line="45" pos:column="11">"unixsock plugin: chmod failed: %s"<pos:position pos:line="45" pos:column="46"/></literal></expr></argument>,
          <argument><expr><call><name pos:line="46" pos:column="11">sstrerror<pos:position pos:line="46" pos:column="20"/></name><argument_list pos:line="46" pos:column="20">(<argument><expr><name pos:line="46" pos:column="21">errno<pos:position pos:line="46" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="28">errbuf<pos:position pos:line="46" pos:column="34"/></name></expr></argument>, <argument><expr><sizeof pos:line="46" pos:column="36">sizeof<argument_list pos:line="46" pos:column="42">(<argument><expr><name pos:line="46" pos:column="43">errbuf<pos:position pos:line="46" pos:column="49"/></name></expr></argument>)<pos:position pos:line="46" pos:column="50"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="46" pos:column="51"/></argument_list></call></expr></argument>)<pos:position pos:line="46" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="53"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="47" pos:column="5">close<pos:position pos:line="47" pos:column="10"/></name><argument_list pos:line="47" pos:column="10">(<argument><expr><name pos:line="47" pos:column="11">sock_fd<pos:position pos:line="47" pos:column="18"/></name></expr></argument>)<pos:position pos:line="47" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="20"/></expr_stmt>
    <expr_stmt><expr><name pos:line="48" pos:column="5">sock_fd<pos:position pos:line="48" pos:column="12"/></name> <operator pos:line="48" pos:column="13">=<pos:position pos:line="48" pos:column="14"/></operator> <operator pos:line="48" pos:column="15">-<pos:position pos:line="48" pos:column="16"/></operator><literal type="number" pos:line="48" pos:column="16">1<pos:position pos:line="48" pos:column="17"/></literal></expr>;<pos:position pos:line="48" pos:column="18"/></expr_stmt>
    <return pos:line="49" pos:column="5">return <expr><operator pos:line="49" pos:column="12">(<pos:position pos:line="49" pos:column="13"/></operator><operator pos:line="49" pos:column="13">-<pos:position pos:line="49" pos:column="14"/></operator><literal type="number" pos:line="49" pos:column="14">1<pos:position pos:line="49" pos:column="15"/></literal><operator pos:line="49" pos:column="15">)<pos:position pos:line="49" pos:column="16"/></operator></expr>;<pos:position pos:line="49" pos:column="17"/></return>
  }<pos:position pos:line="50" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="52" pos:column="3">status<pos:position pos:line="52" pos:column="9"/></name> <operator pos:line="52" pos:column="10">=<pos:position pos:line="52" pos:column="11"/></operator> <call><name pos:line="52" pos:column="12">listen<pos:position pos:line="52" pos:column="18"/></name><argument_list pos:line="52" pos:column="18">(<argument><expr><name pos:line="52" pos:column="19">sock_fd<pos:position pos:line="52" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="52" pos:column="28">8<pos:position pos:line="52" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="52" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="31"/></expr_stmt>
  <if pos:line="53" pos:column="3">if <condition pos:line="53" pos:column="6">(<expr><name pos:line="53" pos:column="7">status<pos:position pos:line="53" pos:column="13"/></name> <operator pos:line="53" pos:column="14">!=<pos:position pos:line="53" pos:column="16"/></operator> <literal type="number" pos:line="53" pos:column="17">0<pos:position pos:line="53" pos:column="18"/></literal></expr>)<pos:position pos:line="53" pos:column="19"/></condition><then pos:line="53" pos:column="19"> <block pos:line="53" pos:column="20">{
    <decl_stmt><decl><type><name pos:line="54" pos:column="5">char<pos:position pos:line="54" pos:column="9"/></name></type> <name><name pos:line="54" pos:column="10">errbuf<pos:position pos:line="54" pos:column="16"/></name><index pos:line="54" pos:column="16">[<expr><literal type="number" pos:line="54" pos:column="17">1024<pos:position pos:line="54" pos:column="21"/></literal></expr>]<pos:position pos:line="54" pos:column="22"/></index></name></decl>;<pos:position pos:line="54" pos:column="23"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="55" pos:column="5">ERROR<pos:position pos:line="55" pos:column="10"/></name><argument_list pos:line="55" pos:column="10">(<argument><expr><literal type="string" pos:line="55" pos:column="11">"unixsock plugin: listen failed: %s"<pos:position pos:line="55" pos:column="47"/></literal></expr></argument>,
          <argument><expr><call><name pos:line="56" pos:column="11">sstrerror<pos:position pos:line="56" pos:column="20"/></name><argument_list pos:line="56" pos:column="20">(<argument><expr><name pos:line="56" pos:column="21">errno<pos:position pos:line="56" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="56" pos:column="28">errbuf<pos:position pos:line="56" pos:column="34"/></name></expr></argument>, <argument><expr><sizeof pos:line="56" pos:column="36">sizeof<argument_list pos:line="56" pos:column="42">(<argument><expr><name pos:line="56" pos:column="43">errbuf<pos:position pos:line="56" pos:column="49"/></name></expr></argument>)<pos:position pos:line="56" pos:column="50"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="56" pos:column="51"/></argument_list></call></expr></argument>)<pos:position pos:line="56" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="53"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="57" pos:column="5">close<pos:position pos:line="57" pos:column="10"/></name><argument_list pos:line="57" pos:column="10">(<argument><expr><name pos:line="57" pos:column="11">sock_fd<pos:position pos:line="57" pos:column="18"/></name></expr></argument>)<pos:position pos:line="57" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="20"/></expr_stmt>
    <expr_stmt><expr><name pos:line="58" pos:column="5">sock_fd<pos:position pos:line="58" pos:column="12"/></name> <operator pos:line="58" pos:column="13">=<pos:position pos:line="58" pos:column="14"/></operator> <operator pos:line="58" pos:column="15">-<pos:position pos:line="58" pos:column="16"/></operator><literal type="number" pos:line="58" pos:column="16">1<pos:position pos:line="58" pos:column="17"/></literal></expr>;<pos:position pos:line="58" pos:column="18"/></expr_stmt>
    <return pos:line="59" pos:column="5">return <expr><operator pos:line="59" pos:column="12">(<pos:position pos:line="59" pos:column="13"/></operator><operator pos:line="59" pos:column="13">-<pos:position pos:line="59" pos:column="14"/></operator><literal type="number" pos:line="59" pos:column="14">1<pos:position pos:line="59" pos:column="15"/></literal><operator pos:line="59" pos:column="15">)<pos:position pos:line="59" pos:column="16"/></operator></expr>;<pos:position pos:line="59" pos:column="17"/></return>
  }<pos:position pos:line="60" pos:column="4"/></block></then></if>

  <do pos:line="62" pos:column="3">do <block pos:line="62" pos:column="6">{
    <decl_stmt><decl><type><specifier pos:line="63" pos:column="5">const<pos:position pos:line="63" pos:column="10"/></specifier> <name pos:line="63" pos:column="11">char<pos:position pos:line="63" pos:column="15"/></name> <modifier pos:line="63" pos:column="16">*<pos:position pos:line="63" pos:column="17"/></modifier></type><name pos:line="63" pos:column="17">grpname<pos:position pos:line="63" pos:column="24"/></name></decl>;<pos:position pos:line="63" pos:column="25"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="64" pos:column="5">struct<pos:position pos:line="64" pos:column="11"/></name> <name pos:line="64" pos:column="12">group<pos:position pos:line="64" pos:column="17"/></name></name> <modifier pos:line="64" pos:column="18">*<pos:position pos:line="64" pos:column="19"/></modifier></type><name pos:line="64" pos:column="19">g<pos:position pos:line="64" pos:column="20"/></name></decl>;<pos:position pos:line="64" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="65" pos:column="5">struct<pos:position pos:line="65" pos:column="11"/></name> <name pos:line="65" pos:column="12">group<pos:position pos:line="65" pos:column="17"/></name></name></type> <name pos:line="65" pos:column="18">sg<pos:position pos:line="65" pos:column="20"/></name></decl>;<pos:position pos:line="65" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="66" pos:column="5">char<pos:position pos:line="66" pos:column="9"/></name></type> <name><name pos:line="66" pos:column="10">grbuf<pos:position pos:line="66" pos:column="15"/></name><index pos:line="66" pos:column="15">[<expr><literal type="number" pos:line="66" pos:column="16">2048<pos:position pos:line="66" pos:column="20"/></literal></expr>]<pos:position pos:line="66" pos:column="21"/></index></name></decl>;<pos:position pos:line="66" pos:column="22"/></decl_stmt>

    <expr_stmt><expr><name pos:line="68" pos:column="5">grpname<pos:position pos:line="68" pos:column="12"/></name> <operator pos:line="68" pos:column="13">=<pos:position pos:line="68" pos:column="14"/></operator> <ternary><condition><expr><operator pos:line="68" pos:column="15">(<pos:position pos:line="68" pos:column="16"/></operator><name pos:line="68" pos:column="16">sock_group<pos:position pos:line="68" pos:column="26"/></name> <operator pos:line="68" pos:column="27">!=<pos:position pos:line="68" pos:column="29"/></operator> <name pos:line="68" pos:column="30">NULL<pos:position pos:line="68" pos:column="34"/></name><operator pos:line="68" pos:column="34">)<pos:position pos:line="68" pos:column="35"/></operator></expr> ?<pos:position pos:line="68" pos:column="37"/></condition><then pos:line="68" pos:column="37"> <expr><name pos:line="68" pos:column="38">sock_group<pos:position pos:line="68" pos:column="48"/></name></expr> <pos:position pos:line="68" pos:column="49"/></then><else pos:line="68" pos:column="49">: <expr><name pos:line="68" pos:column="51">COLLECTD_GRP_NAME<pos:position pos:line="68" pos:column="68"/></name></expr></else></ternary></expr>;<pos:position pos:line="68" pos:column="69"/></expr_stmt>
    <expr_stmt><expr><name pos:line="69" pos:column="5">g<pos:position pos:line="69" pos:column="6"/></name> <operator pos:line="69" pos:column="7">=<pos:position pos:line="69" pos:column="8"/></operator> <name pos:line="69" pos:column="9">NULL<pos:position pos:line="69" pos:column="13"/></name></expr>;<pos:position pos:line="69" pos:column="14"/></expr_stmt>

    <expr_stmt><expr><name pos:line="71" pos:column="5">status<pos:position pos:line="71" pos:column="11"/></name> <operator pos:line="71" pos:column="12">=<pos:position pos:line="71" pos:column="13"/></operator> <call><name pos:line="71" pos:column="14">getgrnam_r<pos:position pos:line="71" pos:column="24"/></name><argument_list pos:line="71" pos:column="24">(<argument><expr><name pos:line="71" pos:column="25">grpname<pos:position pos:line="71" pos:column="32"/></name></expr></argument>, <argument><expr><operator pos:line="71" pos:column="34">&amp;<pos:position pos:line="71" pos:column="39"/></operator><name pos:line="71" pos:column="35">sg<pos:position pos:line="71" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="71" pos:column="39">grbuf<pos:position pos:line="71" pos:column="44"/></name></expr></argument>, <argument><expr><sizeof pos:line="71" pos:column="46">sizeof<argument_list pos:line="71" pos:column="52">(<argument><expr><name pos:line="71" pos:column="53">grbuf<pos:position pos:line="71" pos:column="58"/></name></expr></argument>)<pos:position pos:line="71" pos:column="59"/></argument_list></sizeof></expr></argument>, <argument><expr><operator pos:line="71" pos:column="61">&amp;<pos:position pos:line="71" pos:column="66"/></operator><name pos:line="71" pos:column="62">g<pos:position pos:line="71" pos:column="63"/></name></expr></argument>)<pos:position pos:line="71" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="65"/></expr_stmt>
    <if pos:line="72" pos:column="5">if <condition pos:line="72" pos:column="8">(<expr><name pos:line="72" pos:column="9">status<pos:position pos:line="72" pos:column="15"/></name> <operator pos:line="72" pos:column="16">!=<pos:position pos:line="72" pos:column="18"/></operator> <literal type="number" pos:line="72" pos:column="19">0<pos:position pos:line="72" pos:column="20"/></literal></expr>)<pos:position pos:line="72" pos:column="21"/></condition><then pos:line="72" pos:column="21"> <block pos:line="72" pos:column="22">{
      <decl_stmt><decl><type><name pos:line="73" pos:column="7">char<pos:position pos:line="73" pos:column="11"/></name></type> <name><name pos:line="73" pos:column="12">errbuf<pos:position pos:line="73" pos:column="18"/></name><index pos:line="73" pos:column="18">[<expr><literal type="number" pos:line="73" pos:column="19">1024<pos:position pos:line="73" pos:column="23"/></literal></expr>]<pos:position pos:line="73" pos:column="24"/></index></name></decl>;<pos:position pos:line="73" pos:column="25"/></decl_stmt>
      <expr_stmt><expr><call><name pos:line="74" pos:column="7">WARNING<pos:position pos:line="74" pos:column="14"/></name><argument_list pos:line="74" pos:column="14">(<argument><expr><literal type="string" pos:line="74" pos:column="15">"unixsock plugin: getgrnam_r (%s) failed: %s"<pos:position pos:line="74" pos:column="60"/></literal></expr></argument>, <argument><expr><name pos:line="74" pos:column="62">grpname<pos:position pos:line="74" pos:column="69"/></name></expr></argument>,
              <argument><expr><call><name pos:line="75" pos:column="15">sstrerror<pos:position pos:line="75" pos:column="24"/></name><argument_list pos:line="75" pos:column="24">(<argument><expr><name pos:line="75" pos:column="25">errno<pos:position pos:line="75" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="75" pos:column="32">errbuf<pos:position pos:line="75" pos:column="38"/></name></expr></argument>, <argument><expr><sizeof pos:line="75" pos:column="40">sizeof<argument_list pos:line="75" pos:column="46">(<argument><expr><name pos:line="75" pos:column="47">errbuf<pos:position pos:line="75" pos:column="53"/></name></expr></argument>)<pos:position pos:line="75" pos:column="54"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="75" pos:column="55"/></argument_list></call></expr></argument>)<pos:position pos:line="75" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="57"/></expr_stmt>
      <break pos:line="76" pos:column="7">break;<pos:position pos:line="76" pos:column="13"/></break>
    }<pos:position pos:line="77" pos:column="6"/></block></then></if>
    <if pos:line="78" pos:column="5">if <condition pos:line="78" pos:column="8">(<expr><name pos:line="78" pos:column="9">g<pos:position pos:line="78" pos:column="10"/></name> <operator pos:line="78" pos:column="11">==<pos:position pos:line="78" pos:column="13"/></operator> <name pos:line="78" pos:column="14">NULL<pos:position pos:line="78" pos:column="18"/></name></expr>)<pos:position pos:line="78" pos:column="19"/></condition><then pos:line="78" pos:column="19"> <block pos:line="78" pos:column="20">{
      <expr_stmt><expr><call><name pos:line="79" pos:column="7">WARNING<pos:position pos:line="79" pos:column="14"/></name><argument_list pos:line="79" pos:column="14">(<argument><expr><literal type="string" pos:line="79" pos:column="15">"unixsock plugin: No such group: `%s'"<pos:position pos:line="79" pos:column="53"/></literal></expr></argument>, <argument><expr><name pos:line="79" pos:column="55">grpname<pos:position pos:line="79" pos:column="62"/></name></expr></argument>)<pos:position pos:line="79" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="64"/></expr_stmt>
      <break pos:line="80" pos:column="7">break;<pos:position pos:line="80" pos:column="13"/></break>
    }<pos:position pos:line="81" pos:column="6"/></block></then></if>

    <if pos:line="83" pos:column="5">if <condition pos:line="83" pos:column="8">(<expr><call><name pos:line="83" pos:column="9">chown<pos:position pos:line="83" pos:column="14"/></name><argument_list pos:line="83" pos:column="14">(<argument><expr><ternary><condition><expr><operator pos:line="83" pos:column="15">(<pos:position pos:line="83" pos:column="16"/></operator><name pos:line="83" pos:column="16">sock_file<pos:position pos:line="83" pos:column="25"/></name> <operator pos:line="83" pos:column="26">!=<pos:position pos:line="83" pos:column="28"/></operator> <name pos:line="83" pos:column="29">NULL<pos:position pos:line="83" pos:column="33"/></name><operator pos:line="83" pos:column="33">)<pos:position pos:line="83" pos:column="34"/></operator></expr> ?<pos:position pos:line="83" pos:column="36"/></condition><then pos:line="83" pos:column="36"> <expr><name pos:line="83" pos:column="37">sock_file<pos:position pos:line="83" pos:column="46"/></name></expr> <pos:position pos:line="83" pos:column="47"/></then><else pos:line="83" pos:column="47">: <expr><name pos:line="83" pos:column="49">US_DEFAULT_PATH<pos:position pos:line="83" pos:column="64"/></name></expr></else></ternary></expr></argument>, <argument><expr><operator pos:line="83" pos:column="66">(<pos:position pos:line="83" pos:column="67"/></operator><name pos:line="83" pos:column="67">uid_t<pos:position pos:line="83" pos:column="72"/></name><operator pos:line="83" pos:column="72">)<pos:position pos:line="83" pos:column="73"/></operator><operator pos:line="83" pos:column="73">-<pos:position pos:line="83" pos:column="74"/></operator><literal type="number" pos:line="83" pos:column="74">1<pos:position pos:line="83" pos:column="75"/></literal></expr></argument>,
              <argument><expr><name><name pos:line="84" pos:column="15">g<pos:position pos:line="84" pos:column="16"/></name><operator pos:line="84" pos:column="16">-&gt;<pos:position pos:line="84" pos:column="21"/></operator><name pos:line="84" pos:column="18">gr_gid<pos:position pos:line="84" pos:column="24"/></name></name></expr></argument>)<pos:position pos:line="84" pos:column="25"/></argument_list></call> <operator pos:line="84" pos:column="26">!=<pos:position pos:line="84" pos:column="28"/></operator> <literal type="number" pos:line="84" pos:column="29">0<pos:position pos:line="84" pos:column="30"/></literal></expr>)<pos:position pos:line="84" pos:column="31"/></condition><then pos:line="84" pos:column="31"> <block pos:line="84" pos:column="32">{
      <decl_stmt><decl><type><name pos:line="85" pos:column="7">char<pos:position pos:line="85" pos:column="11"/></name></type> <name><name pos:line="85" pos:column="12">errbuf<pos:position pos:line="85" pos:column="18"/></name><index pos:line="85" pos:column="18">[<expr><literal type="number" pos:line="85" pos:column="19">1024<pos:position pos:line="85" pos:column="23"/></literal></expr>]<pos:position pos:line="85" pos:column="24"/></index></name></decl>;<pos:position pos:line="85" pos:column="25"/></decl_stmt>
      <expr_stmt><expr><call><name pos:line="86" pos:column="7">WARNING<pos:position pos:line="86" pos:column="14"/></name><argument_list pos:line="86" pos:column="14">(<argument><expr><literal type="string" pos:line="86" pos:column="15">"unixsock plugin: chown (%s, -1, %i) failed: %s"<pos:position pos:line="86" pos:column="63"/></literal></expr></argument>,
              <argument><expr><ternary><condition><expr><operator pos:line="87" pos:column="15">(<pos:position pos:line="87" pos:column="16"/></operator><name pos:line="87" pos:column="16">sock_file<pos:position pos:line="87" pos:column="25"/></name> <operator pos:line="87" pos:column="26">!=<pos:position pos:line="87" pos:column="28"/></operator> <name pos:line="87" pos:column="29">NULL<pos:position pos:line="87" pos:column="33"/></name><operator pos:line="87" pos:column="33">)<pos:position pos:line="87" pos:column="34"/></operator></expr> ?<pos:position pos:line="87" pos:column="36"/></condition><then pos:line="87" pos:column="36"> <expr><name pos:line="87" pos:column="37">sock_file<pos:position pos:line="87" pos:column="46"/></name></expr> <pos:position pos:line="87" pos:column="47"/></then><else pos:line="87" pos:column="47">: <expr><name pos:line="87" pos:column="49">US_DEFAULT_PATH<pos:position pos:line="87" pos:column="64"/></name></expr></else></ternary></expr></argument>, <argument><expr><operator pos:line="87" pos:column="66">(<pos:position pos:line="87" pos:column="67"/></operator><name pos:line="87" pos:column="67">int<pos:position pos:line="87" pos:column="70"/></name><operator pos:line="87" pos:column="70">)<pos:position pos:line="87" pos:column="71"/></operator><name><name pos:line="87" pos:column="71">g<pos:position pos:line="87" pos:column="72"/></name><operator pos:line="87" pos:column="72">-&gt;<pos:position pos:line="87" pos:column="77"/></operator><name pos:line="87" pos:column="74">gr_gid<pos:position pos:line="87" pos:column="80"/></name></name></expr></argument>,
              <argument><expr><call><name pos:line="88" pos:column="15">sstrerror<pos:position pos:line="88" pos:column="24"/></name><argument_list pos:line="88" pos:column="24">(<argument><expr><name pos:line="88" pos:column="25">errno<pos:position pos:line="88" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="88" pos:column="32">errbuf<pos:position pos:line="88" pos:column="38"/></name></expr></argument>, <argument><expr><sizeof pos:line="88" pos:column="40">sizeof<argument_list pos:line="88" pos:column="46">(<argument><expr><name pos:line="88" pos:column="47">errbuf<pos:position pos:line="88" pos:column="53"/></name></expr></argument>)<pos:position pos:line="88" pos:column="54"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="88" pos:column="55"/></argument_list></call></expr></argument>)<pos:position pos:line="88" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="57"/></expr_stmt>
    }<pos:position pos:line="89" pos:column="6"/></block></then></if>
  }<pos:position pos:line="90" pos:column="4"/></block> while <condition pos:line="90" pos:column="11">(<expr><literal type="number" pos:line="90" pos:column="12">0<pos:position pos:line="90" pos:column="13"/></literal></expr>)<pos:position pos:line="90" pos:column="14"/></condition>;<pos:position pos:line="90" pos:column="15"/></do>

  <return pos:line="92" pos:column="3">return <expr><operator pos:line="92" pos:column="10">(<pos:position pos:line="92" pos:column="11"/></operator><literal type="number" pos:line="92" pos:column="11">0<pos:position pos:line="92" pos:column="12"/></literal><operator pos:line="92" pos:column="12">)<pos:position pos:line="92" pos:column="13"/></operator></expr>;<pos:position pos:line="92" pos:column="14"/></return>
}<pos:position pos:line="93" pos:column="2"/></block></function></unit>
