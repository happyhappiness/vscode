<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1701_collectd-4.10.9.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">cj_cb_number<pos:position pos:line="1" pos:column="24"/></name> <parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><name pos:line="1" pos:column="26">void<pos:position pos:line="1" pos:column="30"/></name> <modifier pos:line="1" pos:column="31">*<pos:position pos:line="1" pos:column="32"/></modifier></type><name pos:line="1" pos:column="32">ctx<pos:position pos:line="1" pos:column="35"/></name></decl></parameter>,
    <parameter><decl><type><specifier pos:line="2" pos:column="5">const<pos:position pos:line="2" pos:column="10"/></specifier> <name pos:line="2" pos:column="11">char<pos:position pos:line="2" pos:column="15"/></name> <modifier pos:line="2" pos:column="16">*<pos:position pos:line="2" pos:column="17"/></modifier></type><name pos:line="2" pos:column="17">number<pos:position pos:line="2" pos:column="23"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="25">yajl_len_t<pos:position pos:line="2" pos:column="35"/></name></type> <name pos:line="2" pos:column="36">number_len<pos:position pos:line="2" pos:column="46"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="47"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">char<pos:position pos:line="4" pos:column="7"/></name></type> <name><name pos:line="4" pos:column="8">buffer<pos:position pos:line="4" pos:column="14"/></name><index pos:line="4" pos:column="14">[<expr><name pos:line="4" pos:column="15">number_len<pos:position pos:line="4" pos:column="25"/></name> <operator pos:line="4" pos:column="26">+<pos:position pos:line="4" pos:column="27"/></operator> <literal type="number" pos:line="4" pos:column="28">1<pos:position pos:line="4" pos:column="29"/></literal></expr>]<pos:position pos:line="4" pos:column="30"/></index></name></decl>;<pos:position pos:line="4" pos:column="31"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="6" pos:column="3">cj_t<pos:position pos:line="6" pos:column="7"/></name> <modifier pos:line="6" pos:column="8">*<pos:position pos:line="6" pos:column="9"/></modifier></type><name pos:line="6" pos:column="9">db<pos:position pos:line="6" pos:column="11"/></name> <init pos:line="6" pos:column="12">= <expr><operator pos:line="6" pos:column="14">(<pos:position pos:line="6" pos:column="15"/></operator><name pos:line="6" pos:column="15">cj_t<pos:position pos:line="6" pos:column="19"/></name> <operator pos:line="6" pos:column="20">*<pos:position pos:line="6" pos:column="21"/></operator><operator pos:line="6" pos:column="21">)<pos:position pos:line="6" pos:column="22"/></operator><name pos:line="6" pos:column="22">ctx<pos:position pos:line="6" pos:column="25"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="26"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">cj_key_t<pos:position pos:line="7" pos:column="11"/></name> <modifier pos:line="7" pos:column="12">*<pos:position pos:line="7" pos:column="13"/></modifier></type><name pos:line="7" pos:column="13">key<pos:position pos:line="7" pos:column="16"/></name> <init pos:line="7" pos:column="17">= <expr><name><name pos:line="7" pos:column="19">db<pos:position pos:line="7" pos:column="21"/></name><operator pos:line="7" pos:column="21">-&gt;<pos:position pos:line="7" pos:column="26"/></operator><name pos:line="7" pos:column="23">state<pos:position pos:line="7" pos:column="28"/></name><index pos:line="7" pos:column="28">[<expr><name><name pos:line="7" pos:column="29">db<pos:position pos:line="7" pos:column="31"/></name><operator pos:line="7" pos:column="31">-&gt;<pos:position pos:line="7" pos:column="36"/></operator><name pos:line="7" pos:column="33">depth<pos:position pos:line="7" pos:column="38"/></name></name></expr>]<pos:position pos:line="7" pos:column="39"/></index></name><operator pos:line="7" pos:column="39">.<pos:position pos:line="7" pos:column="40"/></operator><name pos:line="7" pos:column="40">key<pos:position pos:line="7" pos:column="43"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="44"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">char<pos:position pos:line="8" pos:column="7"/></name> <modifier pos:line="8" pos:column="8">*<pos:position pos:line="8" pos:column="9"/></modifier></type><name pos:line="8" pos:column="9">endptr<pos:position pos:line="8" pos:column="15"/></name></decl>;<pos:position pos:line="8" pos:column="16"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">value_t<pos:position pos:line="9" pos:column="10"/></name></type> <name pos:line="9" pos:column="11">vt<pos:position pos:line="9" pos:column="13"/></name></decl>;<pos:position pos:line="9" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">int<pos:position pos:line="10" pos:column="6"/></name></type> <name pos:line="10" pos:column="7">type<pos:position pos:line="10" pos:column="11"/></name></decl>;<pos:position pos:line="10" pos:column="12"/></decl_stmt>

  <if pos:line="12" pos:column="3">if <condition pos:line="12" pos:column="6">(<expr><name pos:line="12" pos:column="7">key<pos:position pos:line="12" pos:column="10"/></name> <operator pos:line="12" pos:column="11">==<pos:position pos:line="12" pos:column="13"/></operator> <name pos:line="12" pos:column="14">NULL<pos:position pos:line="12" pos:column="18"/></name></expr>)<pos:position pos:line="12" pos:column="19"/></condition><then pos:line="12" pos:column="19">
    <block type="pseudo"><return pos:line="13" pos:column="5">return <expr><operator pos:line="13" pos:column="12">(<pos:position pos:line="13" pos:column="13"/></operator><name pos:line="13" pos:column="13">CJ_CB_CONTINUE<pos:position pos:line="13" pos:column="27"/></name><operator pos:line="13" pos:column="27">)<pos:position pos:line="13" pos:column="28"/></operator></expr>;<pos:position pos:line="13" pos:column="29"/></return></block></then></if>

  <expr_stmt><expr><call><name pos:line="15" pos:column="3">memcpy<pos:position pos:line="15" pos:column="9"/></name> <argument_list pos:line="15" pos:column="10">(<argument><expr><name pos:line="15" pos:column="11">buffer<pos:position pos:line="15" pos:column="17"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="19">number<pos:position pos:line="15" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="27">number_len<pos:position pos:line="15" pos:column="37"/></name></expr></argument>)<pos:position pos:line="15" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="39"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="16" pos:column="3">buffer<pos:position pos:line="16" pos:column="9"/></name><index pos:line="16" pos:column="9">[<expr><sizeof pos:line="16" pos:column="10">sizeof <argument_list pos:line="16" pos:column="17">(<argument><expr><name pos:line="16" pos:column="18">buffer<pos:position pos:line="16" pos:column="24"/></name></expr></argument>)<pos:position pos:line="16" pos:column="25"/></argument_list></sizeof> <operator pos:line="16" pos:column="26">-<pos:position pos:line="16" pos:column="27"/></operator> <literal type="number" pos:line="16" pos:column="28">1<pos:position pos:line="16" pos:column="29"/></literal></expr>]<pos:position pos:line="16" pos:column="30"/></index></name> <operator pos:line="16" pos:column="31">=<pos:position pos:line="16" pos:column="32"/></operator> <literal type="number" pos:line="16" pos:column="33">0<pos:position pos:line="16" pos:column="34"/></literal></expr>;<pos:position pos:line="16" pos:column="35"/></expr_stmt>

  <expr_stmt><expr><name pos:line="18" pos:column="3">type<pos:position pos:line="18" pos:column="7"/></name> <operator pos:line="18" pos:column="8">=<pos:position pos:line="18" pos:column="9"/></operator> <call><name pos:line="18" pos:column="10">cj_get_type<pos:position pos:line="18" pos:column="21"/></name> <argument_list pos:line="18" pos:column="22">(<argument><expr><name pos:line="18" pos:column="23">key<pos:position pos:line="18" pos:column="26"/></name></expr></argument>)<pos:position pos:line="18" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="28"/></expr_stmt>
  <if pos:line="19" pos:column="3">if <condition pos:line="19" pos:column="6">(<expr><name pos:line="19" pos:column="7">type<pos:position pos:line="19" pos:column="11"/></name> <operator pos:line="19" pos:column="12">&lt;<pos:position pos:line="19" pos:column="16"/></operator> <literal type="number" pos:line="19" pos:column="14">0<pos:position pos:line="19" pos:column="15"/></literal></expr>)<pos:position pos:line="19" pos:column="16"/></condition><then pos:line="19" pos:column="16">
    <block type="pseudo"><return pos:line="20" pos:column="5">return <expr><operator pos:line="20" pos:column="12">(<pos:position pos:line="20" pos:column="13"/></operator><name pos:line="20" pos:column="13">CJ_CB_CONTINUE<pos:position pos:line="20" pos:column="27"/></name><operator pos:line="20" pos:column="27">)<pos:position pos:line="20" pos:column="28"/></operator></expr>;<pos:position pos:line="20" pos:column="29"/></return></block></then></if>

  <expr_stmt><expr><name pos:line="22" pos:column="3">endptr<pos:position pos:line="22" pos:column="9"/></name> <operator pos:line="22" pos:column="10">=<pos:position pos:line="22" pos:column="11"/></operator> <name pos:line="22" pos:column="12">NULL<pos:position pos:line="22" pos:column="16"/></name></expr>;<pos:position pos:line="22" pos:column="17"/></expr_stmt>
  <expr_stmt><expr><name pos:line="23" pos:column="3">errno<pos:position pos:line="23" pos:column="8"/></name> <operator pos:line="23" pos:column="9">=<pos:position pos:line="23" pos:column="10"/></operator> <literal type="number" pos:line="23" pos:column="11">0<pos:position pos:line="23" pos:column="12"/></literal></expr>;<pos:position pos:line="23" pos:column="13"/></expr_stmt>

  <if pos:line="25" pos:column="3">if <condition pos:line="25" pos:column="6">(<expr><name pos:line="25" pos:column="7">type<pos:position pos:line="25" pos:column="11"/></name> <operator pos:line="25" pos:column="12">==<pos:position pos:line="25" pos:column="14"/></operator> <name pos:line="25" pos:column="15">DS_TYPE_COUNTER<pos:position pos:line="25" pos:column="30"/></name></expr>)<pos:position pos:line="25" pos:column="31"/></condition><then pos:line="25" pos:column="31">
    <block type="pseudo"><expr_stmt><expr><name><name pos:line="26" pos:column="5">vt<pos:position pos:line="26" pos:column="7"/></name><operator pos:line="26" pos:column="7">.<pos:position pos:line="26" pos:column="8"/></operator><name pos:line="26" pos:column="8">counter<pos:position pos:line="26" pos:column="15"/></name></name> <operator pos:line="26" pos:column="16">=<pos:position pos:line="26" pos:column="17"/></operator> <operator pos:line="26" pos:column="18">(<pos:position pos:line="26" pos:column="19"/></operator><name pos:line="26" pos:column="19">counter_t<pos:position pos:line="26" pos:column="28"/></name><operator pos:line="26" pos:column="28">)<pos:position pos:line="26" pos:column="29"/></operator> <call><name pos:line="26" pos:column="30">strtoull<pos:position pos:line="26" pos:column="38"/></name> <argument_list pos:line="26" pos:column="39">(<argument><expr><name pos:line="26" pos:column="40">buffer<pos:position pos:line="26" pos:column="46"/></name></expr></argument>, <argument><expr><operator pos:line="26" pos:column="48">&amp;<pos:position pos:line="26" pos:column="53"/></operator><name pos:line="26" pos:column="49">endptr<pos:position pos:line="26" pos:column="55"/></name></expr></argument>, <comment type="block" pos:line="26" pos:column="57">/* base = */</comment> <argument><expr><literal type="number" pos:line="26" pos:column="70">0<pos:position pos:line="26" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="73"/></expr_stmt></block></then>
  <elseif pos:line="27" pos:column="3">else <if pos:line="27" pos:column="8">if <condition pos:line="27" pos:column="11">(<expr><name pos:line="27" pos:column="12">type<pos:position pos:line="27" pos:column="16"/></name> <operator pos:line="27" pos:column="17">==<pos:position pos:line="27" pos:column="19"/></operator> <name pos:line="27" pos:column="20">DS_TYPE_GAUGE<pos:position pos:line="27" pos:column="33"/></name></expr>)<pos:position pos:line="27" pos:column="34"/></condition><then pos:line="27" pos:column="34">
    <block type="pseudo"><expr_stmt><expr><name><name pos:line="28" pos:column="5">vt<pos:position pos:line="28" pos:column="7"/></name><operator pos:line="28" pos:column="7">.<pos:position pos:line="28" pos:column="8"/></operator><name pos:line="28" pos:column="8">gauge<pos:position pos:line="28" pos:column="13"/></name></name> <operator pos:line="28" pos:column="14">=<pos:position pos:line="28" pos:column="15"/></operator> <operator pos:line="28" pos:column="16">(<pos:position pos:line="28" pos:column="17"/></operator><name pos:line="28" pos:column="17">gauge_t<pos:position pos:line="28" pos:column="24"/></name><operator pos:line="28" pos:column="24">)<pos:position pos:line="28" pos:column="25"/></operator> <call><name pos:line="28" pos:column="26">strtod<pos:position pos:line="28" pos:column="32"/></name> <argument_list pos:line="28" pos:column="33">(<argument><expr><name pos:line="28" pos:column="34">buffer<pos:position pos:line="28" pos:column="40"/></name></expr></argument>, <argument><expr><operator pos:line="28" pos:column="42">&amp;<pos:position pos:line="28" pos:column="47"/></operator><name pos:line="28" pos:column="43">endptr<pos:position pos:line="28" pos:column="49"/></name></expr></argument>)<pos:position pos:line="28" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="51"/></expr_stmt></block></then></if></elseif>
  <elseif pos:line="29" pos:column="3">else <if pos:line="29" pos:column="8">if <condition pos:line="29" pos:column="11">(<expr><name pos:line="29" pos:column="12">type<pos:position pos:line="29" pos:column="16"/></name> <operator pos:line="29" pos:column="17">==<pos:position pos:line="29" pos:column="19"/></operator> <name pos:line="29" pos:column="20">DS_TYPE_DERIVE<pos:position pos:line="29" pos:column="34"/></name></expr>)<pos:position pos:line="29" pos:column="35"/></condition><then pos:line="29" pos:column="35">
    <block type="pseudo"><expr_stmt><expr><name><name pos:line="30" pos:column="5">vt<pos:position pos:line="30" pos:column="7"/></name><operator pos:line="30" pos:column="7">.<pos:position pos:line="30" pos:column="8"/></operator><name pos:line="30" pos:column="8">derive<pos:position pos:line="30" pos:column="14"/></name></name> <operator pos:line="30" pos:column="15">=<pos:position pos:line="30" pos:column="16"/></operator> <operator pos:line="30" pos:column="17">(<pos:position pos:line="30" pos:column="18"/></operator><name pos:line="30" pos:column="18">derive_t<pos:position pos:line="30" pos:column="26"/></name><operator pos:line="30" pos:column="26">)<pos:position pos:line="30" pos:column="27"/></operator> <call><name pos:line="30" pos:column="28">strtoll<pos:position pos:line="30" pos:column="35"/></name> <argument_list pos:line="30" pos:column="36">(<argument><expr><name pos:line="30" pos:column="37">buffer<pos:position pos:line="30" pos:column="43"/></name></expr></argument>, <argument><expr><operator pos:line="30" pos:column="45">&amp;<pos:position pos:line="30" pos:column="50"/></operator><name pos:line="30" pos:column="46">endptr<pos:position pos:line="30" pos:column="52"/></name></expr></argument>, <comment type="block" pos:line="30" pos:column="54">/* base = */</comment> <argument><expr><literal type="number" pos:line="30" pos:column="67">0<pos:position pos:line="30" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="70"/></expr_stmt></block></then></if></elseif>
  <elseif pos:line="31" pos:column="3">else <if pos:line="31" pos:column="8">if <condition pos:line="31" pos:column="11">(<expr><name pos:line="31" pos:column="12">type<pos:position pos:line="31" pos:column="16"/></name> <operator pos:line="31" pos:column="17">==<pos:position pos:line="31" pos:column="19"/></operator> <name pos:line="31" pos:column="20">DS_TYPE_ABSOLUTE<pos:position pos:line="31" pos:column="36"/></name></expr>)<pos:position pos:line="31" pos:column="37"/></condition><then pos:line="31" pos:column="37">
    <block type="pseudo"><expr_stmt><expr><name><name pos:line="32" pos:column="5">vt<pos:position pos:line="32" pos:column="7"/></name><operator pos:line="32" pos:column="7">.<pos:position pos:line="32" pos:column="8"/></operator><name pos:line="32" pos:column="8">absolute<pos:position pos:line="32" pos:column="16"/></name></name> <operator pos:line="32" pos:column="17">=<pos:position pos:line="32" pos:column="18"/></operator> <operator pos:line="32" pos:column="19">(<pos:position pos:line="32" pos:column="20"/></operator><name pos:line="32" pos:column="20">absolute_t<pos:position pos:line="32" pos:column="30"/></name><operator pos:line="32" pos:column="30">)<pos:position pos:line="32" pos:column="31"/></operator> <call><name pos:line="32" pos:column="32">strtoull<pos:position pos:line="32" pos:column="40"/></name> <argument_list pos:line="32" pos:column="41">(<argument><expr><name pos:line="32" pos:column="42">buffer<pos:position pos:line="32" pos:column="48"/></name></expr></argument>, <argument><expr><operator pos:line="32" pos:column="50">&amp;<pos:position pos:line="32" pos:column="55"/></operator><name pos:line="32" pos:column="51">endptr<pos:position pos:line="32" pos:column="57"/></name></expr></argument>, <comment type="block" pos:line="32" pos:column="59">/* base = */</comment> <argument><expr><literal type="number" pos:line="32" pos:column="72">0<pos:position pos:line="32" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="75"/></expr_stmt></block></then></if></elseif>
  <else pos:line="33" pos:column="3">else
  <block pos:line="34" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="35" pos:column="5">ERROR<pos:position pos:line="35" pos:column="10"/></name> <argument_list pos:line="35" pos:column="11">(<argument><expr><literal type="string" pos:line="35" pos:column="12">"curl_json plugin: Unknown data source type: \"%s\""<pos:position pos:line="35" pos:column="64"/></literal></expr></argument>, <argument><expr><name><name pos:line="35" pos:column="66">key<pos:position pos:line="35" pos:column="69"/></name><operator pos:line="35" pos:column="69">-&gt;<pos:position pos:line="35" pos:column="74"/></operator><name pos:line="35" pos:column="71">type<pos:position pos:line="35" pos:column="75"/></name></name></expr></argument>)<pos:position pos:line="35" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="77"/></expr_stmt>
    <return pos:line="36" pos:column="5">return <expr><operator pos:line="36" pos:column="12">(<pos:position pos:line="36" pos:column="13"/></operator><name pos:line="36" pos:column="13">CJ_CB_ABORT<pos:position pos:line="36" pos:column="24"/></name><operator pos:line="36" pos:column="24">)<pos:position pos:line="36" pos:column="25"/></operator></expr>;<pos:position pos:line="36" pos:column="26"/></return>
  }<pos:position pos:line="37" pos:column="4"/></block></else></if>

  <if pos:line="39" pos:column="3">if <condition pos:line="39" pos:column="6">(<expr><operator pos:line="39" pos:column="7">(<pos:position pos:line="39" pos:column="8"/></operator><name pos:line="39" pos:column="8">endptr<pos:position pos:line="39" pos:column="14"/></name> <operator pos:line="39" pos:column="15">==<pos:position pos:line="39" pos:column="17"/></operator> <operator pos:line="39" pos:column="18">&amp;<pos:position pos:line="39" pos:column="23"/></operator><name><name pos:line="39" pos:column="19">buffer<pos:position pos:line="39" pos:column="25"/></name><index pos:line="39" pos:column="25">[<expr><literal type="number" pos:line="39" pos:column="26">0<pos:position pos:line="39" pos:column="27"/></literal></expr>]<pos:position pos:line="39" pos:column="28"/></index></name><operator pos:line="39" pos:column="28">)<pos:position pos:line="39" pos:column="29"/></operator> <operator pos:line="39" pos:column="30">||<pos:position pos:line="39" pos:column="32"/></operator> <operator pos:line="39" pos:column="33">(<pos:position pos:line="39" pos:column="34"/></operator><name pos:line="39" pos:column="34">errno<pos:position pos:line="39" pos:column="39"/></name> <operator pos:line="39" pos:column="40">!=<pos:position pos:line="39" pos:column="42"/></operator> <literal type="number" pos:line="39" pos:column="43">0<pos:position pos:line="39" pos:column="44"/></literal><operator pos:line="39" pos:column="44">)<pos:position pos:line="39" pos:column="45"/></operator></expr>)<pos:position pos:line="39" pos:column="46"/></condition><then pos:line="39" pos:column="46">
  <block pos:line="40" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="41" pos:column="5">NOTICE<pos:position pos:line="41" pos:column="11"/></name> <argument_list pos:line="41" pos:column="12">(<argument><expr><literal type="string" pos:line="41" pos:column="13">"curl_json plugin: Overflow while parsing number. "<pos:position pos:line="41" pos:column="64"/></literal>
        <literal type="string" pos:line="42" pos:column="9">"Ignoring this value."<pos:position pos:line="42" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="42" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="33"/></expr_stmt>
    <return pos:line="43" pos:column="5">return <expr><operator pos:line="43" pos:column="12">(<pos:position pos:line="43" pos:column="13"/></operator><name pos:line="43" pos:column="13">CJ_CB_CONTINUE<pos:position pos:line="43" pos:column="27"/></name><operator pos:line="43" pos:column="27">)<pos:position pos:line="43" pos:column="28"/></operator></expr>;<pos:position pos:line="43" pos:column="29"/></return>
  }<pos:position pos:line="44" pos:column="4"/></block></then></if>

  <expr_stmt><expr><call><name pos:line="46" pos:column="3">cj_submit<pos:position pos:line="46" pos:column="12"/></name> <argument_list pos:line="46" pos:column="13">(<argument><expr><name pos:line="46" pos:column="14">db<pos:position pos:line="46" pos:column="16"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="18">key<pos:position pos:line="46" pos:column="21"/></name></expr></argument>, <argument><expr><operator pos:line="46" pos:column="23">&amp;<pos:position pos:line="46" pos:column="28"/></operator><name pos:line="46" pos:column="24">vt<pos:position pos:line="46" pos:column="26"/></name></expr></argument>)<pos:position pos:line="46" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="28"/></expr_stmt>
  <return pos:line="47" pos:column="3">return <expr><operator pos:line="47" pos:column="10">(<pos:position pos:line="47" pos:column="11"/></operator><name pos:line="47" pos:column="11">CJ_CB_CONTINUE<pos:position pos:line="47" pos:column="25"/></name><operator pos:line="47" pos:column="25">)<pos:position pos:line="47" pos:column="26"/></operator></expr>;<pos:position pos:line="47" pos:column="27"/></return>
}<pos:position pos:line="48" pos:column="2"/></block></function></unit>
