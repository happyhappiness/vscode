<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_2174_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">network_set_interface<pos:position pos:line="1" pos:column="33"/></name><parameter_list pos:line="1" pos:column="33">(<parameter><decl><type><specifier pos:line="1" pos:column="34">const<pos:position pos:line="1" pos:column="39"/></specifier> <name pos:line="1" pos:column="40">sockent_t<pos:position pos:line="1" pos:column="49"/></name> <modifier pos:line="1" pos:column="50">*<pos:position pos:line="1" pos:column="51"/></modifier></type><name pos:line="1" pos:column="51">se<pos:position pos:line="1" pos:column="53"/></name></decl></parameter>,
                                 <parameter><decl><type><specifier pos:line="2" pos:column="34">const<pos:position pos:line="2" pos:column="39"/></specifier> <name><name pos:line="2" pos:column="40">struct<pos:position pos:line="2" pos:column="46"/></name> <name pos:line="2" pos:column="47">addrinfo<pos:position pos:line="2" pos:column="55"/></name></name> <modifier pos:line="2" pos:column="56">*<pos:position pos:line="2" pos:column="57"/></modifier></type><name pos:line="2" pos:column="57">ai<pos:position pos:line="2" pos:column="59"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="60"/></parameter_list> <comment type="block" pos:line="2" pos:column="61">/* {{{ */</comment>
<block pos:line="3" pos:column="1">{
  <expr_stmt><expr><call><name pos:line="4" pos:column="3">DEBUG<pos:position pos:line="4" pos:column="8"/></name><argument_list pos:line="4" pos:column="8">(<argument><expr><literal type="string" pos:line="4" pos:column="9">"network plugin: network_set_interface: interface index = %i;"<pos:position pos:line="4" pos:column="71"/></literal></expr></argument>,
        <argument><expr><name><name pos:line="5" pos:column="9">se<pos:position pos:line="5" pos:column="11"/></name><operator pos:line="5" pos:column="11">-&gt;<pos:position pos:line="5" pos:column="16"/></operator><name pos:line="5" pos:column="13">interface<pos:position pos:line="5" pos:column="22"/></name></name></expr></argument>)<pos:position pos:line="5" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="24"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="7" pos:column="3">assert<pos:position pos:line="7" pos:column="9"/></name><argument_list pos:line="7" pos:column="9">(<argument><expr><name><name pos:line="7" pos:column="10">se<pos:position pos:line="7" pos:column="12"/></name><operator pos:line="7" pos:column="12">-&gt;<pos:position pos:line="7" pos:column="17"/></operator><name pos:line="7" pos:column="14">type<pos:position pos:line="7" pos:column="18"/></name></name> <operator pos:line="7" pos:column="19">==<pos:position pos:line="7" pos:column="21"/></operator> <name pos:line="7" pos:column="22">SOCKENT_TYPE_CLIENT<pos:position pos:line="7" pos:column="41"/></name></expr></argument>)<pos:position pos:line="7" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="43"/></expr_stmt>

  <if pos:line="9" pos:column="3">if <condition pos:line="9" pos:column="6">(<expr><name><name pos:line="9" pos:column="7">ai<pos:position pos:line="9" pos:column="9"/></name><operator pos:line="9" pos:column="9">-&gt;<pos:position pos:line="9" pos:column="14"/></operator><name pos:line="9" pos:column="11">ai_family<pos:position pos:line="9" pos:column="20"/></name></name> <operator pos:line="9" pos:column="21">==<pos:position pos:line="9" pos:column="23"/></operator> <name pos:line="9" pos:column="24">AF_INET<pos:position pos:line="9" pos:column="31"/></name></expr>)<pos:position pos:line="9" pos:column="32"/></condition><then pos:line="9" pos:column="32"> <block pos:line="9" pos:column="33">{
    <decl_stmt><decl><type><name><name pos:line="10" pos:column="5">struct<pos:position pos:line="10" pos:column="11"/></name> <name pos:line="10" pos:column="12">sockaddr_in<pos:position pos:line="10" pos:column="23"/></name></name> <modifier pos:line="10" pos:column="24">*<pos:position pos:line="10" pos:column="25"/></modifier></type><name pos:line="10" pos:column="25">addr<pos:position pos:line="10" pos:column="29"/></name> <init pos:line="10" pos:column="30">= <expr><operator pos:line="10" pos:column="32">(<pos:position pos:line="10" pos:column="33"/></operator>struct <name pos:line="10" pos:column="40">sockaddr_in<pos:position pos:line="10" pos:column="51"/></name> <operator pos:line="10" pos:column="52">*<pos:position pos:line="10" pos:column="53"/></operator><operator pos:line="10" pos:column="53">)<pos:position pos:line="10" pos:column="54"/></operator><name><name pos:line="10" pos:column="54">ai<pos:position pos:line="10" pos:column="56"/></name><operator pos:line="10" pos:column="56">-&gt;<pos:position pos:line="10" pos:column="61"/></operator><name pos:line="10" pos:column="58">ai_addr<pos:position pos:line="10" pos:column="65"/></name></name></expr></init></decl>;<pos:position pos:line="10" pos:column="66"/></decl_stmt>

    <if pos:line="12" pos:column="5">if <condition pos:line="12" pos:column="8">(<expr><call><name pos:line="12" pos:column="9">IN_MULTICAST<pos:position pos:line="12" pos:column="21"/></name><argument_list pos:line="12" pos:column="21">(<argument><expr><call><name pos:line="12" pos:column="22">ntohl<pos:position pos:line="12" pos:column="27"/></name><argument_list pos:line="12" pos:column="27">(<argument><expr><name><name pos:line="12" pos:column="28">addr<pos:position pos:line="12" pos:column="32"/></name><operator pos:line="12" pos:column="32">-&gt;<pos:position pos:line="12" pos:column="37"/></operator><name pos:line="12" pos:column="34">sin_addr<pos:position pos:line="12" pos:column="42"/></name><operator pos:line="12" pos:column="42">.<pos:position pos:line="12" pos:column="43"/></operator><name pos:line="12" pos:column="43">s_addr<pos:position pos:line="12" pos:column="49"/></name></name></expr></argument>)<pos:position pos:line="12" pos:column="50"/></argument_list></call></expr></argument>)<pos:position pos:line="12" pos:column="51"/></argument_list></call></expr>)<pos:position pos:line="12" pos:column="52"/></condition><then pos:line="12" pos:column="52"> <block pos:line="12" pos:column="53">{
<cpp:if pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">if<pos:position pos:line="13" pos:column="4"/></cpp:directive> <expr><name pos:line="13" pos:column="5">HAVE_STRUCT_IP_MREQN_IMR_IFINDEX<pos:position pos:line="13" pos:column="37"/></name></expr></cpp:if>
      <comment type="block" pos:line="14" pos:column="7">/* If possible, use the "ip_mreqn" structure which has
       * an "interface index" member. Using the interface
       * index is preferred here, because of its similarity
       * to the way IPv6 handles this. Unfortunately, it
       * appears not to be portable. */</comment>
      <decl_stmt><decl><type><name><name pos:line="19" pos:column="7">struct<pos:position pos:line="19" pos:column="13"/></name> <name pos:line="19" pos:column="14">ip_mreqn<pos:position pos:line="19" pos:column="22"/></name></name></type> <name pos:line="19" pos:column="23">mreq<pos:position pos:line="19" pos:column="27"/></name> <init pos:line="19" pos:column="28">= <expr><block pos:line="19" pos:column="30">{<expr><operator pos:line="19" pos:column="31">.<pos:position pos:line="19" pos:column="32"/></operator><name><name pos:line="19" pos:column="32">imr_multiaddr<pos:position pos:line="19" pos:column="45"/></name><operator pos:line="19" pos:column="45">.<pos:position pos:line="19" pos:column="46"/></operator><name pos:line="19" pos:column="46">s_addr<pos:position pos:line="19" pos:column="52"/></name></name> <operator pos:line="19" pos:column="53">=<pos:position pos:line="19" pos:column="54"/></operator> <name><name pos:line="19" pos:column="55">addr<pos:position pos:line="19" pos:column="59"/></name><operator pos:line="19" pos:column="59">-&gt;<pos:position pos:line="19" pos:column="64"/></operator><name pos:line="19" pos:column="61">sin_addr<pos:position pos:line="19" pos:column="69"/></name><operator pos:line="19" pos:column="69">.<pos:position pos:line="19" pos:column="70"/></operator><name pos:line="19" pos:column="70">s_addr<pos:position pos:line="19" pos:column="76"/></name></name></expr>,
                              <expr><operator pos:line="20" pos:column="31">.<pos:position pos:line="20" pos:column="32"/></operator><name><name pos:line="20" pos:column="32">imr_address<pos:position pos:line="20" pos:column="43"/></name><operator pos:line="20" pos:column="43">.<pos:position pos:line="20" pos:column="44"/></operator><name pos:line="20" pos:column="44">s_addr<pos:position pos:line="20" pos:column="50"/></name></name> <operator pos:line="20" pos:column="51">=<pos:position pos:line="20" pos:column="52"/></operator> <call><name pos:line="20" pos:column="53">ntohl<pos:position pos:line="20" pos:column="58"/></name><argument_list pos:line="20" pos:column="58">(<argument><expr><name pos:line="20" pos:column="59">INADDR_ANY<pos:position pos:line="20" pos:column="69"/></name></expr></argument>)<pos:position pos:line="20" pos:column="70"/></argument_list></call></expr>,
                              <expr><operator pos:line="21" pos:column="31">.<pos:position pos:line="21" pos:column="32"/></operator><name pos:line="21" pos:column="32">imr_ifindex<pos:position pos:line="21" pos:column="43"/></name> <operator pos:line="21" pos:column="44">=<pos:position pos:line="21" pos:column="45"/></operator> <name><name pos:line="21" pos:column="46">se<pos:position pos:line="21" pos:column="48"/></name><operator pos:line="21" pos:column="48">-&gt;<pos:position pos:line="21" pos:column="53"/></operator><name pos:line="21" pos:column="50">interface<pos:position pos:line="21" pos:column="59"/></name></name></expr>}<pos:position pos:line="21" pos:column="60"/></block></expr></init></decl>;<pos:position pos:line="21" pos:column="61"/></decl_stmt>
<cpp:else pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">else<pos:position pos:line="22" pos:column="6"/></cpp:directive></cpp:else>
      <decl_stmt><decl><type><name><name pos:line="23" pos:column="7">struct<pos:position pos:line="23" pos:column="13"/></name> <name pos:line="23" pos:column="14">ip_mreq<pos:position pos:line="23" pos:column="21"/></name></name></type> <name pos:line="23" pos:column="22">mreq<pos:position pos:line="23" pos:column="26"/></name> <init pos:line="23" pos:column="27">= <expr><block pos:line="23" pos:column="29">{<expr><operator pos:line="23" pos:column="30">.<pos:position pos:line="23" pos:column="31"/></operator><name><name pos:line="23" pos:column="31">imr_multiaddr<pos:position pos:line="23" pos:column="44"/></name><operator pos:line="23" pos:column="44">.<pos:position pos:line="23" pos:column="45"/></operator><name pos:line="23" pos:column="45">s_addr<pos:position pos:line="23" pos:column="51"/></name></name> <operator pos:line="23" pos:column="52">=<pos:position pos:line="23" pos:column="53"/></operator> <name><name pos:line="23" pos:column="54">addr<pos:position pos:line="23" pos:column="58"/></name><operator pos:line="23" pos:column="58">-&gt;<pos:position pos:line="23" pos:column="63"/></operator><name pos:line="23" pos:column="60">sin_addr<pos:position pos:line="23" pos:column="68"/></name><operator pos:line="23" pos:column="68">.<pos:position pos:line="23" pos:column="69"/></operator><name pos:line="23" pos:column="69">s_addr<pos:position pos:line="23" pos:column="75"/></name></name></expr>,
                             <expr><operator pos:line="24" pos:column="30">.<pos:position pos:line="24" pos:column="31"/></operator><name><name pos:line="24" pos:column="31">imr_interface<pos:position pos:line="24" pos:column="44"/></name><operator pos:line="24" pos:column="44">.<pos:position pos:line="24" pos:column="45"/></operator><name pos:line="24" pos:column="45">s_addr<pos:position pos:line="24" pos:column="51"/></name></name> <operator pos:line="24" pos:column="52">=<pos:position pos:line="24" pos:column="53"/></operator> <macro><name pos:line="24" pos:column="54">ntohl<pos:position pos:line="24" pos:column="59"/></name><argument_list pos:line="24" pos:column="59">(<argument pos:line="24" pos:column="60">INADDR_ANY<pos:position pos:line="24" pos:column="70"/></argument>)<pos:position pos:line="24" pos:column="71"/></argument_list></macro></expr>}<pos:position pos:line="24" pos:column="72"/></block></expr></init></decl>;<pos:position pos:line="24" pos:column="73"/></decl_stmt>
<cpp:endif pos:line="25" pos:column="1">#<cpp:directive pos:line="25" pos:column="2">endif<pos:position pos:line="25" pos:column="7"/></cpp:directive></cpp:endif>

      <if pos:line="27" pos:column="7">if <condition pos:line="27" pos:column="10">(<expr><call><name pos:line="27" pos:column="11">setsockopt<pos:position pos:line="27" pos:column="21"/></name><argument_list pos:line="27" pos:column="21">(<argument><expr><name><name pos:line="27" pos:column="22">se<pos:position pos:line="27" pos:column="24"/></name><operator pos:line="27" pos:column="24">-&gt;<pos:position pos:line="27" pos:column="29"/></operator><name pos:line="27" pos:column="26">data<pos:position pos:line="27" pos:column="30"/></name><operator pos:line="27" pos:column="30">.<pos:position pos:line="27" pos:column="31"/></operator><name pos:line="27" pos:column="31">client<pos:position pos:line="27" pos:column="37"/></name><operator pos:line="27" pos:column="37">.<pos:position pos:line="27" pos:column="38"/></operator><name pos:line="27" pos:column="38">fd<pos:position pos:line="27" pos:column="40"/></name></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="42">IPPROTO_IP<pos:position pos:line="27" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="54">IP_MULTICAST_IF<pos:position pos:line="27" pos:column="69"/></name></expr></argument>, <argument><expr><operator pos:line="27" pos:column="71">&amp;<pos:position pos:line="27" pos:column="76"/></operator><name pos:line="27" pos:column="72">mreq<pos:position pos:line="27" pos:column="76"/></name></expr></argument>,
                     <argument><expr><sizeof pos:line="28" pos:column="22">sizeof<argument_list pos:line="28" pos:column="28">(<argument><expr><name pos:line="28" pos:column="29">mreq<pos:position pos:line="28" pos:column="33"/></name></expr></argument>)<pos:position pos:line="28" pos:column="34"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="28" pos:column="35"/></argument_list></call> <operator pos:line="28" pos:column="36">!=<pos:position pos:line="28" pos:column="38"/></operator> <literal type="number" pos:line="28" pos:column="39">0<pos:position pos:line="28" pos:column="40"/></literal></expr>)<pos:position pos:line="28" pos:column="41"/></condition><then pos:line="28" pos:column="41"> <block pos:line="28" pos:column="42">{
        <decl_stmt><decl><type><name pos:line="29" pos:column="9">char<pos:position pos:line="29" pos:column="13"/></name></type> <name><name pos:line="29" pos:column="14">errbuf<pos:position pos:line="29" pos:column="20"/></name><index pos:line="29" pos:column="20">[<expr><literal type="number" pos:line="29" pos:column="21">1024<pos:position pos:line="29" pos:column="25"/></literal></expr>]<pos:position pos:line="29" pos:column="26"/></index></name></decl>;<pos:position pos:line="29" pos:column="27"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="30" pos:column="9">ERROR<pos:position pos:line="30" pos:column="14"/></name><argument_list pos:line="30" pos:column="14">(<argument><expr><literal type="string" pos:line="30" pos:column="15">"network plugin: setsockopt (ipv4-multicast-if): %s"<pos:position pos:line="30" pos:column="67"/></literal></expr></argument>,
              <argument><expr><call><name pos:line="31" pos:column="15">sstrerror<pos:position pos:line="31" pos:column="24"/></name><argument_list pos:line="31" pos:column="24">(<argument><expr><name pos:line="31" pos:column="25">errno<pos:position pos:line="31" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="32">errbuf<pos:position pos:line="31" pos:column="38"/></name></expr></argument>, <argument><expr><sizeof pos:line="31" pos:column="40">sizeof<argument_list pos:line="31" pos:column="46">(<argument><expr><name pos:line="31" pos:column="47">errbuf<pos:position pos:line="31" pos:column="53"/></name></expr></argument>)<pos:position pos:line="31" pos:column="54"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="31" pos:column="55"/></argument_list></call></expr></argument>)<pos:position pos:line="31" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="57"/></expr_stmt>
        <return pos:line="32" pos:column="9">return <expr><operator pos:line="32" pos:column="16">-<pos:position pos:line="32" pos:column="17"/></operator><literal type="number" pos:line="32" pos:column="17">1<pos:position pos:line="32" pos:column="18"/></literal></expr>;<pos:position pos:line="32" pos:column="19"/></return>
      }<pos:position pos:line="33" pos:column="8"/></block></then></if>

      <return pos:line="35" pos:column="7">return <expr><literal type="number" pos:line="35" pos:column="14">0<pos:position pos:line="35" pos:column="15"/></literal></expr>;<pos:position pos:line="35" pos:column="16"/></return>
    }<pos:position pos:line="36" pos:column="6"/></block></then></if>
  }<pos:position pos:line="37" pos:column="4"/></block></then> <elseif pos:line="37" pos:column="5">else <if pos:line="37" pos:column="10">if <condition pos:line="37" pos:column="13">(<expr><name><name pos:line="37" pos:column="14">ai<pos:position pos:line="37" pos:column="16"/></name><operator pos:line="37" pos:column="16">-&gt;<pos:position pos:line="37" pos:column="21"/></operator><name pos:line="37" pos:column="18">ai_family<pos:position pos:line="37" pos:column="27"/></name></name> <operator pos:line="37" pos:column="28">==<pos:position pos:line="37" pos:column="30"/></operator> <name pos:line="37" pos:column="31">AF_INET6<pos:position pos:line="37" pos:column="39"/></name></expr>)<pos:position pos:line="37" pos:column="40"/></condition><then pos:line="37" pos:column="40"> <block pos:line="37" pos:column="41">{
    <decl_stmt><decl><type><name><name pos:line="38" pos:column="5">struct<pos:position pos:line="38" pos:column="11"/></name> <name pos:line="38" pos:column="12">sockaddr_in6<pos:position pos:line="38" pos:column="24"/></name></name> <modifier pos:line="38" pos:column="25">*<pos:position pos:line="38" pos:column="26"/></modifier></type><name pos:line="38" pos:column="26">addr<pos:position pos:line="38" pos:column="30"/></name> <init pos:line="38" pos:column="31">= <expr><operator pos:line="38" pos:column="33">(<pos:position pos:line="38" pos:column="34"/></operator>struct <name pos:line="38" pos:column="41">sockaddr_in6<pos:position pos:line="38" pos:column="53"/></name> <operator pos:line="38" pos:column="54">*<pos:position pos:line="38" pos:column="55"/></operator><operator pos:line="38" pos:column="55">)<pos:position pos:line="38" pos:column="56"/></operator><name><name pos:line="38" pos:column="56">ai<pos:position pos:line="38" pos:column="58"/></name><operator pos:line="38" pos:column="58">-&gt;<pos:position pos:line="38" pos:column="63"/></operator><name pos:line="38" pos:column="60">ai_addr<pos:position pos:line="38" pos:column="67"/></name></name></expr></init></decl>;<pos:position pos:line="38" pos:column="68"/></decl_stmt>

    <if pos:line="40" pos:column="5">if <condition pos:line="40" pos:column="8">(<expr><call><name pos:line="40" pos:column="9">IN6_IS_ADDR_MULTICAST<pos:position pos:line="40" pos:column="30"/></name><argument_list pos:line="40" pos:column="30">(<argument><expr><operator pos:line="40" pos:column="31">&amp;<pos:position pos:line="40" pos:column="36"/></operator><name><name pos:line="40" pos:column="32">addr<pos:position pos:line="40" pos:column="36"/></name><operator pos:line="40" pos:column="36">-&gt;<pos:position pos:line="40" pos:column="41"/></operator><name pos:line="40" pos:column="38">sin6_addr<pos:position pos:line="40" pos:column="47"/></name></name></expr></argument>)<pos:position pos:line="40" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="40" pos:column="49"/></condition><then pos:line="40" pos:column="49"> <block pos:line="40" pos:column="50">{
      <if pos:line="41" pos:column="7">if <condition pos:line="41" pos:column="10">(<expr><call><name pos:line="41" pos:column="11">setsockopt<pos:position pos:line="41" pos:column="21"/></name><argument_list pos:line="41" pos:column="21">(<argument><expr><name><name pos:line="41" pos:column="22">se<pos:position pos:line="41" pos:column="24"/></name><operator pos:line="41" pos:column="24">-&gt;<pos:position pos:line="41" pos:column="29"/></operator><name pos:line="41" pos:column="26">data<pos:position pos:line="41" pos:column="30"/></name><operator pos:line="41" pos:column="30">.<pos:position pos:line="41" pos:column="31"/></operator><name pos:line="41" pos:column="31">client<pos:position pos:line="41" pos:column="37"/></name><operator pos:line="41" pos:column="37">.<pos:position pos:line="41" pos:column="38"/></operator><name pos:line="41" pos:column="38">fd<pos:position pos:line="41" pos:column="40"/></name></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="42">IPPROTO_IPV6<pos:position pos:line="41" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="56">IPV6_MULTICAST_IF<pos:position pos:line="41" pos:column="73"/></name></expr></argument>,
                     <argument><expr><operator pos:line="42" pos:column="22">&amp;<pos:position pos:line="42" pos:column="27"/></operator><name><name pos:line="42" pos:column="23">se<pos:position pos:line="42" pos:column="25"/></name><operator pos:line="42" pos:column="25">-&gt;<pos:position pos:line="42" pos:column="30"/></operator><name pos:line="42" pos:column="27">interface<pos:position pos:line="42" pos:column="36"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="42" pos:column="38">sizeof<argument_list pos:line="42" pos:column="44">(<argument><expr><name><name pos:line="42" pos:column="45">se<pos:position pos:line="42" pos:column="47"/></name><operator pos:line="42" pos:column="47">-&gt;<pos:position pos:line="42" pos:column="52"/></operator><name pos:line="42" pos:column="49">interface<pos:position pos:line="42" pos:column="58"/></name></name></expr></argument>)<pos:position pos:line="42" pos:column="59"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="42" pos:column="60"/></argument_list></call> <operator pos:line="42" pos:column="61">!=<pos:position pos:line="42" pos:column="63"/></operator> <literal type="number" pos:line="42" pos:column="64">0<pos:position pos:line="42" pos:column="65"/></literal></expr>)<pos:position pos:line="42" pos:column="66"/></condition><then pos:line="42" pos:column="66"> <block pos:line="42" pos:column="67">{
        <decl_stmt><decl><type><name pos:line="43" pos:column="9">char<pos:position pos:line="43" pos:column="13"/></name></type> <name><name pos:line="43" pos:column="14">errbuf<pos:position pos:line="43" pos:column="20"/></name><index pos:line="43" pos:column="20">[<expr><literal type="number" pos:line="43" pos:column="21">1024<pos:position pos:line="43" pos:column="25"/></literal></expr>]<pos:position pos:line="43" pos:column="26"/></index></name></decl>;<pos:position pos:line="43" pos:column="27"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="44" pos:column="9">ERROR<pos:position pos:line="44" pos:column="14"/></name><argument_list pos:line="44" pos:column="14">(<argument><expr><literal type="string" pos:line="44" pos:column="15">"network plugin: setsockopt (ipv6-multicast-if): %s"<pos:position pos:line="44" pos:column="67"/></literal></expr></argument>,
              <argument><expr><call><name pos:line="45" pos:column="15">sstrerror<pos:position pos:line="45" pos:column="24"/></name><argument_list pos:line="45" pos:column="24">(<argument><expr><name pos:line="45" pos:column="25">errno<pos:position pos:line="45" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="32">errbuf<pos:position pos:line="45" pos:column="38"/></name></expr></argument>, <argument><expr><sizeof pos:line="45" pos:column="40">sizeof<argument_list pos:line="45" pos:column="46">(<argument><expr><name pos:line="45" pos:column="47">errbuf<pos:position pos:line="45" pos:column="53"/></name></expr></argument>)<pos:position pos:line="45" pos:column="54"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="45" pos:column="55"/></argument_list></call></expr></argument>)<pos:position pos:line="45" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="57"/></expr_stmt>
        <return pos:line="46" pos:column="9">return <expr><operator pos:line="46" pos:column="16">-<pos:position pos:line="46" pos:column="17"/></operator><literal type="number" pos:line="46" pos:column="17">1<pos:position pos:line="46" pos:column="18"/></literal></expr>;<pos:position pos:line="46" pos:column="19"/></return>
      }<pos:position pos:line="47" pos:column="8"/></block></then></if>

      <return pos:line="49" pos:column="7">return <expr><literal type="number" pos:line="49" pos:column="14">0<pos:position pos:line="49" pos:column="15"/></literal></expr>;<pos:position pos:line="49" pos:column="16"/></return>
    }<pos:position pos:line="50" pos:column="6"/></block></then></if>
  }<pos:position pos:line="51" pos:column="4"/></block></then></if></elseif></if>

  <comment type="block" pos:line="53" pos:column="3">/* else: Not a multicast interface. */</comment>
  <if pos:line="54" pos:column="3">if <condition pos:line="54" pos:column="6">(<expr><name><name pos:line="54" pos:column="7">se<pos:position pos:line="54" pos:column="9"/></name><operator pos:line="54" pos:column="9">-&gt;<pos:position pos:line="54" pos:column="14"/></operator><name pos:line="54" pos:column="11">interface<pos:position pos:line="54" pos:column="20"/></name></name> <operator pos:line="54" pos:column="21">!=<pos:position pos:line="54" pos:column="23"/></operator> <literal type="number" pos:line="54" pos:column="24">0<pos:position pos:line="54" pos:column="25"/></literal></expr>)<pos:position pos:line="54" pos:column="26"/></condition><then pos:line="54" pos:column="26"> <block pos:line="54" pos:column="27">{
<cpp:if pos:line="55" pos:column="1">#<cpp:directive pos:line="55" pos:column="2">if<pos:position pos:line="55" pos:column="4"/></cpp:directive> <expr><call><name pos:line="55" pos:column="5">defined<pos:position pos:line="55" pos:column="12"/></name><argument_list pos:line="55" pos:column="12">(<argument><expr><name pos:line="55" pos:column="13">HAVE_IF_INDEXTONAME<pos:position pos:line="55" pos:column="32"/></name></expr></argument>)<pos:position pos:line="55" pos:column="33"/></argument_list></call> <operator pos:line="55" pos:column="34">&amp;&amp;<pos:position pos:line="55" pos:column="44"/></operator> <name pos:line="55" pos:column="37">HAVE_IF_INDEXTONAME<pos:position pos:line="55" pos:column="56"/></name> <operator pos:line="55" pos:column="57">&amp;&amp;<pos:position pos:line="55" pos:column="67"/></operator>                     \
    <call><name pos:line="56" pos:column="5">defined<pos:position pos:line="56" pos:column="12"/></name><argument_list pos:line="56" pos:column="12">(<argument><expr><name pos:line="56" pos:column="13">SO_BINDTODEVICE<pos:position pos:line="56" pos:column="28"/></name></expr></argument>)<pos:position pos:line="56" pos:column="29"/></argument_list></call></expr></cpp:if>
    <decl_stmt><decl><type><name pos:line="57" pos:column="5">char<pos:position pos:line="57" pos:column="9"/></name></type> <name><name pos:line="57" pos:column="10">interface_name<pos:position pos:line="57" pos:column="24"/></name><index pos:line="57" pos:column="24">[<expr><name pos:line="57" pos:column="25">IFNAMSIZ<pos:position pos:line="57" pos:column="33"/></name></expr>]<pos:position pos:line="57" pos:column="34"/></index></name></decl>;<pos:position pos:line="57" pos:column="35"/></decl_stmt>

    <if pos:line="59" pos:column="5">if <condition pos:line="59" pos:column="8">(<expr><call><name pos:line="59" pos:column="9">if_indextoname<pos:position pos:line="59" pos:column="23"/></name><argument_list pos:line="59" pos:column="23">(<argument><expr><name><name pos:line="59" pos:column="24">se<pos:position pos:line="59" pos:column="26"/></name><operator pos:line="59" pos:column="26">-&gt;<pos:position pos:line="59" pos:column="31"/></operator><name pos:line="59" pos:column="28">interface<pos:position pos:line="59" pos:column="37"/></name></name></expr></argument>, <argument><expr><name pos:line="59" pos:column="39">interface_name<pos:position pos:line="59" pos:column="53"/></name></expr></argument>)<pos:position pos:line="59" pos:column="54"/></argument_list></call> <operator pos:line="59" pos:column="55">==<pos:position pos:line="59" pos:column="57"/></operator> <name pos:line="59" pos:column="58">NULL<pos:position pos:line="59" pos:column="62"/></name></expr>)<pos:position pos:line="59" pos:column="63"/></condition><then pos:line="59" pos:column="63">
      <block type="pseudo"><return pos:line="60" pos:column="7">return <expr><operator pos:line="60" pos:column="14">-<pos:position pos:line="60" pos:column="15"/></operator><literal type="number" pos:line="60" pos:column="15">1<pos:position pos:line="60" pos:column="16"/></literal></expr>;<pos:position pos:line="60" pos:column="17"/></return></block></then></if>

    <expr_stmt><expr><call><name pos:line="62" pos:column="5">DEBUG<pos:position pos:line="62" pos:column="10"/></name><argument_list pos:line="62" pos:column="10">(<argument><expr><literal type="string" pos:line="62" pos:column="11">"network plugin: Binding socket to interface %s"<pos:position pos:line="62" pos:column="59"/></literal></expr></argument>, <argument><expr><name pos:line="62" pos:column="61">interface_name<pos:position pos:line="62" pos:column="75"/></name></expr></argument>)<pos:position pos:line="62" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="77"/></expr_stmt>

    <if pos:line="64" pos:column="5">if <condition pos:line="64" pos:column="8">(<expr><call><name pos:line="64" pos:column="9">setsockopt<pos:position pos:line="64" pos:column="19"/></name><argument_list pos:line="64" pos:column="19">(<argument><expr><name><name pos:line="64" pos:column="20">se<pos:position pos:line="64" pos:column="22"/></name><operator pos:line="64" pos:column="22">-&gt;<pos:position pos:line="64" pos:column="27"/></operator><name pos:line="64" pos:column="24">data<pos:position pos:line="64" pos:column="28"/></name><operator pos:line="64" pos:column="28">.<pos:position pos:line="64" pos:column="29"/></operator><name pos:line="64" pos:column="29">client<pos:position pos:line="64" pos:column="35"/></name><operator pos:line="64" pos:column="35">.<pos:position pos:line="64" pos:column="36"/></operator><name pos:line="64" pos:column="36">fd<pos:position pos:line="64" pos:column="38"/></name></name></expr></argument>, <argument><expr><name pos:line="64" pos:column="40">SOL_SOCKET<pos:position pos:line="64" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="64" pos:column="52">SO_BINDTODEVICE<pos:position pos:line="64" pos:column="67"/></name></expr></argument>,
                   <argument><expr><name pos:line="65" pos:column="20">interface_name<pos:position pos:line="65" pos:column="34"/></name></expr></argument>, <argument><expr><sizeof pos:line="65" pos:column="36">sizeof<argument_list pos:line="65" pos:column="42">(<argument><expr><name pos:line="65" pos:column="43">interface_name<pos:position pos:line="65" pos:column="57"/></name></expr></argument>)<pos:position pos:line="65" pos:column="58"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="65" pos:column="59"/></argument_list></call> <operator pos:line="65" pos:column="60">==<pos:position pos:line="65" pos:column="62"/></operator> <operator pos:line="65" pos:column="63">-<pos:position pos:line="65" pos:column="64"/></operator><literal type="number" pos:line="65" pos:column="64">1<pos:position pos:line="65" pos:column="65"/></literal></expr>)<pos:position pos:line="65" pos:column="66"/></condition><then pos:line="65" pos:column="66"> <block pos:line="65" pos:column="67">{
      <decl_stmt><decl><type><name pos:line="66" pos:column="7">char<pos:position pos:line="66" pos:column="11"/></name></type> <name><name pos:line="66" pos:column="12">errbuf<pos:position pos:line="66" pos:column="18"/></name><index pos:line="66" pos:column="18">[<expr><literal type="number" pos:line="66" pos:column="19">1024<pos:position pos:line="66" pos:column="23"/></literal></expr>]<pos:position pos:line="66" pos:column="24"/></index></name></decl>;<pos:position pos:line="66" pos:column="25"/></decl_stmt>
      <expr_stmt><expr><call><name pos:line="67" pos:column="7">ERROR<pos:position pos:line="67" pos:column="12"/></name><argument_list pos:line="67" pos:column="12">(<argument><expr><literal type="string" pos:line="67" pos:column="13">"network plugin: setsockopt (bind-if): %s"<pos:position pos:line="67" pos:column="55"/></literal></expr></argument>,
            <argument><expr><call><name pos:line="68" pos:column="13">sstrerror<pos:position pos:line="68" pos:column="22"/></name><argument_list pos:line="68" pos:column="22">(<argument><expr><name pos:line="68" pos:column="23">errno<pos:position pos:line="68" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="68" pos:column="30">errbuf<pos:position pos:line="68" pos:column="36"/></name></expr></argument>, <argument><expr><sizeof pos:line="68" pos:column="38">sizeof<argument_list pos:line="68" pos:column="44">(<argument><expr><name pos:line="68" pos:column="45">errbuf<pos:position pos:line="68" pos:column="51"/></name></expr></argument>)<pos:position pos:line="68" pos:column="52"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="68" pos:column="53"/></argument_list></call></expr></argument>)<pos:position pos:line="68" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="55"/></expr_stmt>
      <return pos:line="69" pos:column="7">return <expr><operator pos:line="69" pos:column="14">-<pos:position pos:line="69" pos:column="15"/></operator><literal type="number" pos:line="69" pos:column="15">1<pos:position pos:line="69" pos:column="16"/></literal></expr>;<pos:position pos:line="69" pos:column="17"/></return>
    }<pos:position pos:line="70" pos:column="6"/></block></then></if>
<comment type="block" pos:line="71" pos:column="1">/* #endif HAVE_IF_INDEXTONAME &amp;&amp; SO_BINDTODEVICE */</comment>

<cpp:else pos:line="73" pos:column="1">#<cpp:directive pos:line="73" pos:column="2">else<pos:position pos:line="73" pos:column="6"/></cpp:directive></cpp:else>
    <expr_stmt><expr><call><name pos:line="74" pos:column="5">WARNING<pos:position pos:line="74" pos:column="12"/></name><argument_list pos:line="74" pos:column="12">(<argument><expr><literal type="string" pos:line="74" pos:column="13">"network plugin: Cannot set the interface on a unicast "<pos:position pos:line="74" pos:column="69"/></literal>
            <literal type="string" pos:line="75" pos:column="13">"socket because "<pos:position pos:line="75" pos:column="30"/></literal>
<cpp:if pos:line="76" pos:column="1">#<cpp:directive pos:line="76" pos:column="2">if<pos:position pos:line="76" pos:column="4"/></cpp:directive> <expr><operator pos:line="76" pos:column="5">!<pos:position pos:line="76" pos:column="6"/></operator><call><name pos:line="76" pos:column="6">defined<pos:position pos:line="76" pos:column="13"/></name><argument_list pos:line="76" pos:column="13">(<argument><expr><name pos:line="76" pos:column="14">SO_BINDTODEVICE<pos:position pos:line="76" pos:column="29"/></name></expr></argument>)<pos:position pos:line="76" pos:column="30"/></argument_list></call></expr></cpp:if>
            <literal type="string" pos:line="77" pos:column="13">"the \"SO_BINDTODEVICE\" socket option "<pos:position pos:line="77" pos:column="53"/></literal>
<cpp:else pos:line="78" pos:column="1">#<cpp:directive pos:line="78" pos:column="2">else<pos:position pos:line="78" pos:column="6"/></cpp:directive></cpp:else>
            <literal type="string" pos:line="79" pos:column="13">"the \"if_indextoname\" function "<pos:position pos:line="79" pos:column="47"/></literal>
<cpp:endif pos:line="80" pos:column="1">#<cpp:directive pos:line="80" pos:column="2">endif<pos:position pos:line="80" pos:column="7"/></cpp:directive></cpp:endif>
            <literal type="string" pos:line="81" pos:column="13">"is not available on your system."<pos:position pos:line="81" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="81" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="49"/></expr_stmt>
<cpp:endif pos:line="82" pos:column="1">#<cpp:directive pos:line="82" pos:column="2">endif<pos:position pos:line="82" pos:column="7"/></cpp:directive></cpp:endif>
  }<pos:position pos:line="83" pos:column="4"/></block></then></if>

  <return pos:line="85" pos:column="3">return <expr><literal type="number" pos:line="85" pos:column="10">0<pos:position pos:line="85" pos:column="11"/></literal></expr>;<pos:position pos:line="85" pos:column="12"/></return>
}<pos:position pos:line="86" pos:column="2"/></block></function></unit>
