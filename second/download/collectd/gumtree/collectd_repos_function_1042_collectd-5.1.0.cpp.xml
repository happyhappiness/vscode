<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1042_collectd-5.1.0.cpp" pos:tabs="8"><decl_stmt><decl><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">strset<pos:position pos:line="1" pos:column="19"/></name> <argument_list pos:line="1" pos:column="20">(<argument><expr><name pos:line="1" pos:column="21">char<pos:position pos:line="1" pos:column="25"/></name> <operator pos:line="1" pos:column="26">*<pos:position pos:line="1" pos:column="27"/></operator><operator pos:line="1" pos:column="27">*<pos:position pos:line="1" pos:column="28"/></operator><name pos:line="1" pos:column="28">str<pos:position pos:line="1" pos:column="31"/></name></expr></argument>, <argument><expr><specifier pos:line="1" pos:column="33">const<pos:position pos:line="1" pos:column="38"/></specifier> <name pos:line="1" pos:column="39">char<pos:position pos:line="1" pos:column="43"/></name> <operator pos:line="1" pos:column="44">*<pos:position pos:line="1" pos:column="45"/></operator><operator pos:line="1" pos:column="45">new<pos:position pos:line="1" pos:column="48"/></operator></expr></argument>)<pos:position pos:line="1" pos:column="49"/></argument_list> <comment type="block" pos:line="1" pos:column="50">/* {{{ */</comment>
<argument_list pos:line="2" pos:column="1">{
  <argument><expr><name pos:line="3" pos:column="3">char<pos:position pos:line="3" pos:column="7"/></name> <operator pos:line="3" pos:column="8">*<pos:position pos:line="3" pos:column="9"/></operator><name pos:line="3" pos:column="9">tmp<pos:position pos:line="3" pos:column="12"/></name></expr></argument>;

  if <argument><expr><operator pos:line="5" pos:column="6">(<pos:position pos:line="5" pos:column="7"/></operator><operator pos:line="5" pos:column="7">!<pos:position pos:line="5" pos:column="8"/></operator><name pos:line="5" pos:column="8">str<pos:position pos:line="5" pos:column="11"/></name> <operator pos:line="5" pos:column="12">||<pos:position pos:line="5" pos:column="14"/></operator> <operator pos:line="5" pos:column="15">!<pos:position pos:line="5" pos:column="16"/></operator><operator pos:line="5" pos:column="16">new<pos:position pos:line="5" pos:column="19"/></operator><operator pos:line="5" pos:column="19">)<pos:position pos:line="5" pos:column="20"/></operator></expr></argument>
    <return pos:line="6" pos:column="5">return;<pos:position pos:line="6" pos:column="12"/></return></argument_list></decl></decl_stmt>

  <expr_stmt><expr><name pos:line="8" pos:column="3">tmp<pos:position pos:line="8" pos:column="6"/></name> <operator pos:line="8" pos:column="7">=<pos:position pos:line="8" pos:column="8"/></operator> <call><name pos:line="8" pos:column="9">strdup<pos:position pos:line="8" pos:column="15"/></name> <argument_list pos:line="8" pos:column="16">(<argument><expr><operator pos:line="8" pos:column="17">new<pos:position pos:line="8" pos:column="20"/></operator></expr></argument>)<pos:position pos:line="8" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="22"/></expr_stmt>
  <if pos:line="9" pos:column="3">if <condition pos:line="9" pos:column="6">(<expr><name pos:line="9" pos:column="7">tmp<pos:position pos:line="9" pos:column="10"/></name> <operator pos:line="9" pos:column="11">==<pos:position pos:line="9" pos:column="13"/></operator> <name pos:line="9" pos:column="14">NULL<pos:position pos:line="9" pos:column="18"/></name></expr>)<pos:position pos:line="9" pos:column="19"/></condition><then pos:line="9" pos:column="19">
    <block type="pseudo"><return pos:line="10" pos:column="5">return;<pos:position pos:line="10" pos:column="12"/></return></block></then></if>

  <expr_stmt><expr><call><name pos:line="12" pos:column="3">sfree<pos:position pos:line="12" pos:column="8"/></name> <argument_list pos:line="12" pos:column="9">(<argument><expr><operator pos:line="12" pos:column="10">*<pos:position pos:line="12" pos:column="11"/></operator><name pos:line="12" pos:column="11">str<pos:position pos:line="12" pos:column="14"/></name></expr></argument>)<pos:position pos:line="12" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="16"/></expr_stmt>
  <expr_stmt><expr><operator pos:line="13" pos:column="3">*<pos:position pos:line="13" pos:column="4"/></operator><name pos:line="13" pos:column="4">str<pos:position pos:line="13" pos:column="7"/></name> <operator pos:line="13" pos:column="8">=<pos:position pos:line="13" pos:column="9"/></operator> <name pos:line="13" pos:column="10">tmp<pos:position pos:line="13" pos:column="13"/></name></expr>;<pos:position pos:line="13" pos:column="14"/></expr_stmt>
}</unit>
