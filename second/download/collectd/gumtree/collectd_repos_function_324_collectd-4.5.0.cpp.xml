<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_324_collectd-4.5.0.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">parse_option<pos:position pos:line="1" pos:column="17"/></name> <parameter_list pos:line="1" pos:column="18">(<parameter><decl><type><name pos:line="1" pos:column="19">char<pos:position pos:line="1" pos:column="23"/></name> <modifier pos:line="1" pos:column="24">*<pos:position pos:line="1" pos:column="25"/></modifier><modifier pos:line="1" pos:column="25">*<pos:position pos:line="1" pos:column="26"/></modifier></type><name pos:line="1" pos:column="26">ret_buffer<pos:position pos:line="1" pos:column="36"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="38">char<pos:position pos:line="1" pos:column="42"/></name> <modifier pos:line="1" pos:column="43">*<pos:position pos:line="1" pos:column="44"/></modifier><modifier pos:line="1" pos:column="44">*<pos:position pos:line="1" pos:column="45"/></modifier></type><name pos:line="1" pos:column="45">ret_key<pos:position pos:line="1" pos:column="52"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="54">char<pos:position pos:line="1" pos:column="58"/></name> <modifier pos:line="1" pos:column="59">*<pos:position pos:line="1" pos:column="60"/></modifier><modifier pos:line="1" pos:column="60">*<pos:position pos:line="1" pos:column="61"/></modifier></type><name pos:line="1" pos:column="61">ret_value<pos:position pos:line="1" pos:column="70"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="71"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">char<pos:position pos:line="3" pos:column="7"/></name> <modifier pos:line="3" pos:column="8">*<pos:position pos:line="3" pos:column="9"/></modifier></type><name pos:line="3" pos:column="9">buffer<pos:position pos:line="3" pos:column="15"/></name></decl>;<pos:position pos:line="3" pos:column="16"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">char<pos:position pos:line="4" pos:column="7"/></name> <modifier pos:line="4" pos:column="8">*<pos:position pos:line="4" pos:column="9"/></modifier></type><name pos:line="4" pos:column="9">key<pos:position pos:line="4" pos:column="12"/></name></decl>;<pos:position pos:line="4" pos:column="13"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">char<pos:position pos:line="5" pos:column="7"/></name> <modifier pos:line="5" pos:column="8">*<pos:position pos:line="5" pos:column="9"/></modifier></type><name pos:line="5" pos:column="9">value<pos:position pos:line="5" pos:column="14"/></name></decl>;<pos:position pos:line="5" pos:column="15"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">int<pos:position pos:line="6" pos:column="6"/></name></type> <name pos:line="6" pos:column="7">status<pos:position pos:line="6" pos:column="13"/></name></decl>;<pos:position pos:line="6" pos:column="14"/></decl_stmt>

  <expr_stmt><expr><name pos:line="8" pos:column="3">buffer<pos:position pos:line="8" pos:column="9"/></name> <operator pos:line="8" pos:column="10">=<pos:position pos:line="8" pos:column="11"/></operator> <operator pos:line="8" pos:column="12">*<pos:position pos:line="8" pos:column="13"/></operator><name pos:line="8" pos:column="13">ret_buffer<pos:position pos:line="8" pos:column="23"/></name></expr>;<pos:position pos:line="8" pos:column="24"/></expr_stmt>

  <comment type="block" pos:line="10" pos:column="3">/* Eat up leading spaces */</comment>
  <expr_stmt><expr><name pos:line="11" pos:column="3">key<pos:position pos:line="11" pos:column="6"/></name> <operator pos:line="11" pos:column="7">=<pos:position pos:line="11" pos:column="8"/></operator> <name pos:line="11" pos:column="9">buffer<pos:position pos:line="11" pos:column="15"/></name></expr>;<pos:position pos:line="11" pos:column="16"/></expr_stmt>
  <while pos:line="12" pos:column="3">while <condition pos:line="12" pos:column="9">(<expr><call><name pos:line="12" pos:column="10">isspace<pos:position pos:line="12" pos:column="17"/></name> <argument_list pos:line="12" pos:column="18">(<argument><expr><operator pos:line="12" pos:column="19">(<pos:position pos:line="12" pos:column="20"/></operator><name pos:line="12" pos:column="20">int<pos:position pos:line="12" pos:column="23"/></name><operator pos:line="12" pos:column="23">)<pos:position pos:line="12" pos:column="24"/></operator> <operator pos:line="12" pos:column="25">*<pos:position pos:line="12" pos:column="26"/></operator><name pos:line="12" pos:column="26">key<pos:position pos:line="12" pos:column="29"/></name></expr></argument>)<pos:position pos:line="12" pos:column="30"/></argument_list></call></expr>)<pos:position pos:line="12" pos:column="31"/></condition>
    <block type="pseudo"><expr_stmt><expr><name pos:line="13" pos:column="5">key<pos:position pos:line="13" pos:column="8"/></name><operator pos:line="13" pos:column="8">++<pos:position pos:line="13" pos:column="10"/></operator></expr>;<pos:position pos:line="13" pos:column="11"/></expr_stmt></block></while>
  <if pos:line="14" pos:column="3">if <condition pos:line="14" pos:column="6">(<expr><operator pos:line="14" pos:column="7">*<pos:position pos:line="14" pos:column="8"/></operator><name pos:line="14" pos:column="8">key<pos:position pos:line="14" pos:column="11"/></name> <operator pos:line="14" pos:column="12">==<pos:position pos:line="14" pos:column="14"/></operator> <literal type="number" pos:line="14" pos:column="15">0<pos:position pos:line="14" pos:column="16"/></literal></expr>)<pos:position pos:line="14" pos:column="17"/></condition><then pos:line="14" pos:column="17">
    <block type="pseudo"><return pos:line="15" pos:column="5">return <expr><operator pos:line="15" pos:column="12">(<pos:position pos:line="15" pos:column="13"/></operator><literal type="number" pos:line="15" pos:column="13">1<pos:position pos:line="15" pos:column="14"/></literal><operator pos:line="15" pos:column="14">)<pos:position pos:line="15" pos:column="15"/></operator></expr>;<pos:position pos:line="15" pos:column="16"/></return></block></then></if>

  <comment type="block" pos:line="17" pos:column="3">/* Look for the equal sign */</comment>
  <expr_stmt><expr><name pos:line="18" pos:column="3">buffer<pos:position pos:line="18" pos:column="9"/></name> <operator pos:line="18" pos:column="10">=<pos:position pos:line="18" pos:column="11"/></operator> <name pos:line="18" pos:column="12">key<pos:position pos:line="18" pos:column="15"/></name></expr>;<pos:position pos:line="18" pos:column="16"/></expr_stmt>
  <while pos:line="19" pos:column="3">while <condition pos:line="19" pos:column="9">(<expr><call><name pos:line="19" pos:column="10">isalnum<pos:position pos:line="19" pos:column="17"/></name> <argument_list pos:line="19" pos:column="18">(<argument><expr><operator pos:line="19" pos:column="19">(<pos:position pos:line="19" pos:column="20"/></operator><name pos:line="19" pos:column="20">int<pos:position pos:line="19" pos:column="23"/></name><operator pos:line="19" pos:column="23">)<pos:position pos:line="19" pos:column="24"/></operator> <operator pos:line="19" pos:column="25">*<pos:position pos:line="19" pos:column="26"/></operator><name pos:line="19" pos:column="26">buffer<pos:position pos:line="19" pos:column="32"/></name></expr></argument>)<pos:position pos:line="19" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="19" pos:column="34"/></condition>
    <block type="pseudo"><expr_stmt><expr><name pos:line="20" pos:column="5">buffer<pos:position pos:line="20" pos:column="11"/></name><operator pos:line="20" pos:column="11">++<pos:position pos:line="20" pos:column="13"/></operator></expr>;<pos:position pos:line="20" pos:column="14"/></expr_stmt></block></while>
  <if pos:line="21" pos:column="3">if <condition pos:line="21" pos:column="6">(<expr><operator pos:line="21" pos:column="7">(<pos:position pos:line="21" pos:column="8"/></operator><operator pos:line="21" pos:column="8">*<pos:position pos:line="21" pos:column="9"/></operator><name pos:line="21" pos:column="9">buffer<pos:position pos:line="21" pos:column="15"/></name> <operator pos:line="21" pos:column="16">!=<pos:position pos:line="21" pos:column="18"/></operator> <literal type="char" pos:line="21" pos:column="19">'='<pos:position pos:line="21" pos:column="22"/></literal><operator pos:line="21" pos:column="22">)<pos:position pos:line="21" pos:column="23"/></operator> <operator pos:line="21" pos:column="24">||<pos:position pos:line="21" pos:column="26"/></operator> <operator pos:line="21" pos:column="27">(<pos:position pos:line="21" pos:column="28"/></operator><name pos:line="21" pos:column="28">buffer<pos:position pos:line="21" pos:column="34"/></name> <operator pos:line="21" pos:column="35">==<pos:position pos:line="21" pos:column="37"/></operator> <name pos:line="21" pos:column="38">key<pos:position pos:line="21" pos:column="41"/></name><operator pos:line="21" pos:column="41">)<pos:position pos:line="21" pos:column="42"/></operator></expr>)<pos:position pos:line="21" pos:column="43"/></condition><then pos:line="21" pos:column="43">
    <block type="pseudo"><return pos:line="22" pos:column="5">return <expr><operator pos:line="22" pos:column="12">(<pos:position pos:line="22" pos:column="13"/></operator><literal type="number" pos:line="22" pos:column="13">1<pos:position pos:line="22" pos:column="14"/></literal><operator pos:line="22" pos:column="14">)<pos:position pos:line="22" pos:column="15"/></operator></expr>;<pos:position pos:line="22" pos:column="16"/></return></block></then></if>
  <expr_stmt><expr><operator pos:line="23" pos:column="3">*<pos:position pos:line="23" pos:column="4"/></operator><name pos:line="23" pos:column="4">buffer<pos:position pos:line="23" pos:column="10"/></name> <operator pos:line="23" pos:column="11">=<pos:position pos:line="23" pos:column="12"/></operator> <literal type="number" pos:line="23" pos:column="13">0<pos:position pos:line="23" pos:column="14"/></literal></expr>;<pos:position pos:line="23" pos:column="15"/></expr_stmt>
  <expr_stmt><expr><name pos:line="24" pos:column="3">buffer<pos:position pos:line="24" pos:column="9"/></name><operator pos:line="24" pos:column="9">++<pos:position pos:line="24" pos:column="11"/></operator></expr>;<pos:position pos:line="24" pos:column="12"/></expr_stmt>
  <comment type="block" pos:line="25" pos:column="3">/* Empty values must be written as "" */</comment>
  <if pos:line="26" pos:column="3">if <condition pos:line="26" pos:column="6">(<expr><call><name pos:line="26" pos:column="7">isspace<pos:position pos:line="26" pos:column="14"/></name> <argument_list pos:line="26" pos:column="15">(<argument><expr><operator pos:line="26" pos:column="16">(<pos:position pos:line="26" pos:column="17"/></operator><name pos:line="26" pos:column="17">int<pos:position pos:line="26" pos:column="20"/></name><operator pos:line="26" pos:column="20">)<pos:position pos:line="26" pos:column="21"/></operator> <operator pos:line="26" pos:column="22">*<pos:position pos:line="26" pos:column="23"/></operator><name pos:line="26" pos:column="23">buffer<pos:position pos:line="26" pos:column="29"/></name></expr></argument>)<pos:position pos:line="26" pos:column="30"/></argument_list></call> <operator pos:line="26" pos:column="31">||<pos:position pos:line="26" pos:column="33"/></operator> <operator pos:line="26" pos:column="34">(<pos:position pos:line="26" pos:column="35"/></operator><operator pos:line="26" pos:column="35">*<pos:position pos:line="26" pos:column="36"/></operator><name pos:line="26" pos:column="36">buffer<pos:position pos:line="26" pos:column="42"/></name> <operator pos:line="26" pos:column="43">==<pos:position pos:line="26" pos:column="45"/></operator> <literal type="number" pos:line="26" pos:column="46">0<pos:position pos:line="26" pos:column="47"/></literal><operator pos:line="26" pos:column="47">)<pos:position pos:line="26" pos:column="48"/></operator></expr>)<pos:position pos:line="26" pos:column="49"/></condition><then pos:line="26" pos:column="49">
    <block type="pseudo"><return pos:line="27" pos:column="5">return <expr><operator pos:line="27" pos:column="12">(<pos:position pos:line="27" pos:column="13"/></operator><operator pos:line="27" pos:column="13">-<pos:position pos:line="27" pos:column="14"/></operator><literal type="number" pos:line="27" pos:column="14">1<pos:position pos:line="27" pos:column="15"/></literal><operator pos:line="27" pos:column="15">)<pos:position pos:line="27" pos:column="16"/></operator></expr>;<pos:position pos:line="27" pos:column="17"/></return></block></then></if>

  <expr_stmt><expr><name pos:line="29" pos:column="3">status<pos:position pos:line="29" pos:column="9"/></name> <operator pos:line="29" pos:column="10">=<pos:position pos:line="29" pos:column="11"/></operator> <call><name pos:line="29" pos:column="12">parse_string<pos:position pos:line="29" pos:column="24"/></name> <argument_list pos:line="29" pos:column="25">(<argument><expr><operator pos:line="29" pos:column="26">&amp;<pos:position pos:line="29" pos:column="31"/></operator><name pos:line="29" pos:column="27">buffer<pos:position pos:line="29" pos:column="33"/></name></expr></argument>, <argument><expr><operator pos:line="29" pos:column="35">&amp;<pos:position pos:line="29" pos:column="40"/></operator><name pos:line="29" pos:column="36">value<pos:position pos:line="29" pos:column="41"/></name></expr></argument>)<pos:position pos:line="29" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="43"/></expr_stmt>
  <if pos:line="30" pos:column="3">if <condition pos:line="30" pos:column="6">(<expr><name pos:line="30" pos:column="7">status<pos:position pos:line="30" pos:column="13"/></name> <operator pos:line="30" pos:column="14">!=<pos:position pos:line="30" pos:column="16"/></operator> <literal type="number" pos:line="30" pos:column="17">0<pos:position pos:line="30" pos:column="18"/></literal></expr>)<pos:position pos:line="30" pos:column="19"/></condition><then pos:line="30" pos:column="19">
    <block type="pseudo"><return pos:line="31" pos:column="5">return <expr><operator pos:line="31" pos:column="12">(<pos:position pos:line="31" pos:column="13"/></operator><operator pos:line="31" pos:column="13">-<pos:position pos:line="31" pos:column="14"/></operator><literal type="number" pos:line="31" pos:column="14">1<pos:position pos:line="31" pos:column="15"/></literal><operator pos:line="31" pos:column="15">)<pos:position pos:line="31" pos:column="16"/></operator></expr>;<pos:position pos:line="31" pos:column="17"/></return></block></then></if>

  <comment type="block" pos:line="33" pos:column="3">/* NB: parse_string will have eaten up all trailing spaces. */</comment>

  <expr_stmt><expr><operator pos:line="35" pos:column="3">*<pos:position pos:line="35" pos:column="4"/></operator><name pos:line="35" pos:column="4">ret_buffer<pos:position pos:line="35" pos:column="14"/></name> <operator pos:line="35" pos:column="15">=<pos:position pos:line="35" pos:column="16"/></operator> <name pos:line="35" pos:column="17">buffer<pos:position pos:line="35" pos:column="23"/></name></expr>;<pos:position pos:line="35" pos:column="24"/></expr_stmt>
  <expr_stmt><expr><operator pos:line="36" pos:column="3">*<pos:position pos:line="36" pos:column="4"/></operator><name pos:line="36" pos:column="4">ret_key<pos:position pos:line="36" pos:column="11"/></name> <operator pos:line="36" pos:column="12">=<pos:position pos:line="36" pos:column="13"/></operator> <name pos:line="36" pos:column="14">key<pos:position pos:line="36" pos:column="17"/></name></expr>;<pos:position pos:line="36" pos:column="18"/></expr_stmt>
  <expr_stmt><expr><operator pos:line="37" pos:column="3">*<pos:position pos:line="37" pos:column="4"/></operator><name pos:line="37" pos:column="4">ret_value<pos:position pos:line="37" pos:column="13"/></name> <operator pos:line="37" pos:column="14">=<pos:position pos:line="37" pos:column="15"/></operator> <name pos:line="37" pos:column="16">value<pos:position pos:line="37" pos:column="21"/></name></expr>;<pos:position pos:line="37" pos:column="22"/></expr_stmt>

  <return pos:line="39" pos:column="3">return <expr><operator pos:line="39" pos:column="10">(<pos:position pos:line="39" pos:column="11"/></operator><literal type="number" pos:line="39" pos:column="11">0<pos:position pos:line="39" pos:column="12"/></literal><operator pos:line="39" pos:column="12">)<pos:position pos:line="39" pos:column="13"/></operator></expr>;<pos:position pos:line="39" pos:column="14"/></return>
}<pos:position pos:line="40" pos:column="2"/></block></function></unit>
