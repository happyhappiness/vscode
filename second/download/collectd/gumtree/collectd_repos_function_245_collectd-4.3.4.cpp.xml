<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_245_collectd-4.3.4.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">check_ignore_if<pos:position pos:line="1" pos:column="27"/></name> <parameter_list pos:line="1" pos:column="28">(<parameter><decl><type><specifier pos:line="1" pos:column="29">const<pos:position pos:line="1" pos:column="34"/></specifier> <name pos:line="1" pos:column="35">char<pos:position pos:line="1" pos:column="39"/></name> <modifier pos:line="1" pos:column="40">*<pos:position pos:line="1" pos:column="41"/></modifier></type><name pos:line="1" pos:column="41">interface<pos:position pos:line="1" pos:column="50"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="51"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">i<pos:position pos:line="3" pos:column="14"/></name></decl>;<pos:position pos:line="3" pos:column="15"/></decl_stmt>

	<comment type="block" pos:line="5" pos:column="9">/* If no interfaces are given collect all interfaces. Mostly to be
	 * backwards compatible, but also because this is much easier. */</comment>
	<if pos:line="7" pos:column="9">if <condition pos:line="7" pos:column="12">(<expr><name pos:line="7" pos:column="13">if_list_num<pos:position pos:line="7" pos:column="24"/></name> <operator pos:line="7" pos:column="25">&lt;<pos:position pos:line="7" pos:column="29"/></operator> <literal type="number" pos:line="7" pos:column="27">1<pos:position pos:line="7" pos:column="28"/></literal></expr>)<pos:position pos:line="7" pos:column="29"/></condition><then pos:line="7" pos:column="29">
		<block type="pseudo"><return pos:line="8" pos:column="17">return <expr><operator pos:line="8" pos:column="24">(<pos:position pos:line="8" pos:column="25"/></operator><literal type="number" pos:line="8" pos:column="25">0<pos:position pos:line="8" pos:column="26"/></literal><operator pos:line="8" pos:column="26">)<pos:position pos:line="8" pos:column="27"/></operator></expr>;<pos:position pos:line="8" pos:column="28"/></return></block></then></if>

	<for pos:line="10" pos:column="9">for <control pos:line="10" pos:column="13">(<init><expr><name pos:line="10" pos:column="14">i<pos:position pos:line="10" pos:column="15"/></name> <operator pos:line="10" pos:column="16">=<pos:position pos:line="10" pos:column="17"/></operator> <literal type="number" pos:line="10" pos:column="18">0<pos:position pos:line="10" pos:column="19"/></literal></expr>;<pos:position pos:line="10" pos:column="20"/></init> <condition><expr><name pos:line="10" pos:column="21">i<pos:position pos:line="10" pos:column="22"/></name> <operator pos:line="10" pos:column="23">&lt;<pos:position pos:line="10" pos:column="27"/></operator> <name pos:line="10" pos:column="25">if_list_num<pos:position pos:line="10" pos:column="36"/></name></expr>;<pos:position pos:line="10" pos:column="37"/></condition> <incr><expr><name pos:line="10" pos:column="38">i<pos:position pos:line="10" pos:column="39"/></name><operator pos:line="10" pos:column="39">++<pos:position pos:line="10" pos:column="41"/></operator></expr></incr>)<pos:position pos:line="10" pos:column="42"/></control>
		<block type="pseudo"><if pos:line="11" pos:column="17">if <condition pos:line="11" pos:column="20">(<expr><call><name pos:line="11" pos:column="21">strcasecmp<pos:position pos:line="11" pos:column="31"/></name> <argument_list pos:line="11" pos:column="32">(<argument><expr><name pos:line="11" pos:column="33">interface<pos:position pos:line="11" pos:column="42"/></name></expr></argument>, <argument><expr><name><name pos:line="11" pos:column="44">if_list<pos:position pos:line="11" pos:column="51"/></name><index pos:line="11" pos:column="51">[<expr><name pos:line="11" pos:column="52">i<pos:position pos:line="11" pos:column="53"/></name></expr>]<pos:position pos:line="11" pos:column="54"/></index></name></expr></argument>)<pos:position pos:line="11" pos:column="55"/></argument_list></call> <operator pos:line="11" pos:column="56">==<pos:position pos:line="11" pos:column="58"/></operator> <literal type="number" pos:line="11" pos:column="59">0<pos:position pos:line="11" pos:column="60"/></literal></expr>)<pos:position pos:line="11" pos:column="61"/></condition><then pos:line="11" pos:column="61">
			<block type="pseudo"><return pos:line="12" pos:column="25">return <expr><operator pos:line="12" pos:column="32">(<pos:position pos:line="12" pos:column="33"/></operator><name pos:line="12" pos:column="33">if_list_action<pos:position pos:line="12" pos:column="47"/></name><operator pos:line="12" pos:column="47">)<pos:position pos:line="12" pos:column="48"/></operator></expr>;<pos:position pos:line="12" pos:column="49"/></return></block></then></if></block></for>
	<return pos:line="13" pos:column="9">return <expr><operator pos:line="13" pos:column="16">(<pos:position pos:line="13" pos:column="17"/></operator><literal type="number" pos:line="13" pos:column="17">1<pos:position pos:line="13" pos:column="18"/></literal> <operator pos:line="13" pos:column="19">-<pos:position pos:line="13" pos:column="20"/></operator> <name pos:line="13" pos:column="21">if_list_action<pos:position pos:line="13" pos:column="35"/></name><operator pos:line="13" pos:column="35">)<pos:position pos:line="13" pos:column="36"/></operator></expr>;<pos:position pos:line="13" pos:column="37"/></return>
}<pos:position pos:line="14" pos:column="2"/></block></function></unit>
