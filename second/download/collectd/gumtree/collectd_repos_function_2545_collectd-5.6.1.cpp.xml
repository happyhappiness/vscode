<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_2545_collectd-5.6.1.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">meta_data_t<pos:position pos:line="1" pos:column="12"/></name> <modifier pos:line="1" pos:column="13">*<pos:position pos:line="1" pos:column="14"/></modifier></type><name pos:line="1" pos:column="14">meta_data_create<pos:position pos:line="1" pos:column="30"/></name> <parameter_list pos:line="1" pos:column="31">(<parameter><decl><type><name pos:line="1" pos:column="32">void<pos:position pos:line="1" pos:column="36"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="37"/></parameter_list> <comment type="block" pos:line="1" pos:column="38">/* {{{ */</comment>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">meta_data_t<pos:position pos:line="3" pos:column="14"/></name> <modifier pos:line="3" pos:column="15">*<pos:position pos:line="3" pos:column="16"/></modifier></type><name pos:line="3" pos:column="16">md<pos:position pos:line="3" pos:column="18"/></name></decl>;<pos:position pos:line="3" pos:column="19"/></decl_stmt>

  <expr_stmt><expr><name pos:line="5" pos:column="3">md<pos:position pos:line="5" pos:column="5"/></name> <operator pos:line="5" pos:column="6">=<pos:position pos:line="5" pos:column="7"/></operator> <call><name pos:line="5" pos:column="8">calloc<pos:position pos:line="5" pos:column="14"/></name> <argument_list pos:line="5" pos:column="15">(<argument><expr><literal type="number" pos:line="5" pos:column="16">1<pos:position pos:line="5" pos:column="17"/></literal></expr></argument>, <argument><expr><sizeof pos:line="5" pos:column="19">sizeof <argument_list pos:line="5" pos:column="26">(<argument><expr><operator pos:line="5" pos:column="27">*<pos:position pos:line="5" pos:column="28"/></operator><name pos:line="5" pos:column="28">md<pos:position pos:line="5" pos:column="30"/></name></expr></argument>)<pos:position pos:line="5" pos:column="31"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="5" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="33"/></expr_stmt>
  <if pos:line="6" pos:column="3">if <condition pos:line="6" pos:column="6">(<expr><name pos:line="6" pos:column="7">md<pos:position pos:line="6" pos:column="9"/></name> <operator pos:line="6" pos:column="10">==<pos:position pos:line="6" pos:column="12"/></operator> <name pos:line="6" pos:column="13">NULL<pos:position pos:line="6" pos:column="17"/></name></expr>)<pos:position pos:line="6" pos:column="18"/></condition><then pos:line="6" pos:column="18">
  <block pos:line="7" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="8" pos:column="5">ERROR<pos:position pos:line="8" pos:column="10"/></name> <argument_list pos:line="8" pos:column="11">(<argument><expr><literal type="string" pos:line="8" pos:column="12">"meta_data_create: calloc failed."<pos:position pos:line="8" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="48"/></expr_stmt>
    <return pos:line="9" pos:column="5">return <expr><operator pos:line="9" pos:column="12">(<pos:position pos:line="9" pos:column="13"/></operator><name pos:line="9" pos:column="13">NULL<pos:position pos:line="9" pos:column="17"/></name><operator pos:line="9" pos:column="17">)<pos:position pos:line="9" pos:column="18"/></operator></expr>;<pos:position pos:line="9" pos:column="19"/></return>
  }<pos:position pos:line="10" pos:column="4"/></block></then></if>

  <expr_stmt><expr><call><name pos:line="12" pos:column="3">pthread_mutex_init<pos:position pos:line="12" pos:column="21"/></name> <argument_list pos:line="12" pos:column="22">(<argument><expr><operator pos:line="12" pos:column="23">&amp;<pos:position pos:line="12" pos:column="28"/></operator><name><name pos:line="12" pos:column="24">md<pos:position pos:line="12" pos:column="26"/></name><operator pos:line="12" pos:column="26">-&gt;<pos:position pos:line="12" pos:column="31"/></operator><name pos:line="12" pos:column="28">lock<pos:position pos:line="12" pos:column="32"/></name></name></expr></argument>, <comment type="block" pos:line="12" pos:column="34">/* attr = */</comment> <argument><expr><name pos:line="12" pos:column="47">NULL<pos:position pos:line="12" pos:column="51"/></name></expr></argument>)<pos:position pos:line="12" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="53"/></expr_stmt>

  <return pos:line="14" pos:column="3">return <expr><operator pos:line="14" pos:column="10">(<pos:position pos:line="14" pos:column="11"/></operator><name pos:line="14" pos:column="11">md<pos:position pos:line="14" pos:column="13"/></name><operator pos:line="14" pos:column="13">)<pos:position pos:line="14" pos:column="14"/></operator></expr>;<pos:position pos:line="14" pos:column="15"/></return>
}<pos:position pos:line="15" pos:column="2"/></block></function></unit>
