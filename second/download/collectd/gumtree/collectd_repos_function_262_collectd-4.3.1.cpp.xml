<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_262_collectd-4.3.1.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">uc_check_timeout<pos:position pos:line="1" pos:column="21"/></name> <parameter_list pos:line="1" pos:column="22">(<parameter><decl><type><name pos:line="1" pos:column="23">void<pos:position pos:line="1" pos:column="27"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="28"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">time_t<pos:position pos:line="3" pos:column="9"/></name></type> <name pos:line="3" pos:column="10">now<pos:position pos:line="3" pos:column="13"/></name></decl>;<pos:position pos:line="3" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">cache_entry_t<pos:position pos:line="4" pos:column="16"/></name> <modifier pos:line="4" pos:column="17">*<pos:position pos:line="4" pos:column="18"/></modifier></type><name pos:line="4" pos:column="18">ce<pos:position pos:line="4" pos:column="20"/></name></decl>;<pos:position pos:line="4" pos:column="21"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="6" pos:column="3">char<pos:position pos:line="6" pos:column="7"/></name> <modifier pos:line="6" pos:column="8">*<pos:position pos:line="6" pos:column="9"/></modifier><modifier pos:line="6" pos:column="9">*<pos:position pos:line="6" pos:column="10"/></modifier></type><name pos:line="6" pos:column="10">keys<pos:position pos:line="6" pos:column="14"/></name> <init pos:line="6" pos:column="15">= <expr><name pos:line="6" pos:column="17">NULL<pos:position pos:line="6" pos:column="21"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="22"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">int<pos:position pos:line="7" pos:column="6"/></name></type> <name pos:line="7" pos:column="7">keys_len<pos:position pos:line="7" pos:column="15"/></name> <init pos:line="7" pos:column="16">= <expr><literal type="number" pos:line="7" pos:column="18">0<pos:position pos:line="7" pos:column="19"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="20"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="9" pos:column="3">char<pos:position pos:line="9" pos:column="7"/></name> <modifier pos:line="9" pos:column="8">*<pos:position pos:line="9" pos:column="9"/></modifier></type><name pos:line="9" pos:column="9">key<pos:position pos:line="9" pos:column="12"/></name></decl>;<pos:position pos:line="9" pos:column="13"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">c_avl_iterator_t<pos:position pos:line="10" pos:column="19"/></name> <modifier pos:line="10" pos:column="20">*<pos:position pos:line="10" pos:column="21"/></modifier></type><name pos:line="10" pos:column="21">iter<pos:position pos:line="10" pos:column="25"/></name></decl>;<pos:position pos:line="10" pos:column="26"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="11" pos:column="3">int<pos:position pos:line="11" pos:column="6"/></name></type> <name pos:line="11" pos:column="7">i<pos:position pos:line="11" pos:column="8"/></name></decl>;<pos:position pos:line="11" pos:column="9"/></decl_stmt>
  
  <expr_stmt><expr><call><name pos:line="13" pos:column="3">pthread_mutex_lock<pos:position pos:line="13" pos:column="21"/></name> <argument_list pos:line="13" pos:column="22">(<argument><expr><operator pos:line="13" pos:column="23">&amp;<pos:position pos:line="13" pos:column="28"/></operator><name pos:line="13" pos:column="24">cache_lock<pos:position pos:line="13" pos:column="34"/></name></expr></argument>)<pos:position pos:line="13" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="36"/></expr_stmt>

  <expr_stmt><expr><name pos:line="15" pos:column="3">now<pos:position pos:line="15" pos:column="6"/></name> <operator pos:line="15" pos:column="7">=<pos:position pos:line="15" pos:column="8"/></operator> <call><name pos:line="15" pos:column="9">time<pos:position pos:line="15" pos:column="13"/></name> <argument_list pos:line="15" pos:column="14">(<argument><expr><name pos:line="15" pos:column="15">NULL<pos:position pos:line="15" pos:column="19"/></name></expr></argument>)<pos:position pos:line="15" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="21"/></expr_stmt>

  <comment type="block" pos:line="17" pos:column="3">/* Build a list of entries to be flushed */</comment>
  <expr_stmt><expr><name pos:line="18" pos:column="3">iter<pos:position pos:line="18" pos:column="7"/></name> <operator pos:line="18" pos:column="8">=<pos:position pos:line="18" pos:column="9"/></operator> <call><name pos:line="18" pos:column="10">c_avl_get_iterator<pos:position pos:line="18" pos:column="28"/></name> <argument_list pos:line="18" pos:column="29">(<argument><expr><name pos:line="18" pos:column="30">cache_tree<pos:position pos:line="18" pos:column="40"/></name></expr></argument>)<pos:position pos:line="18" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="42"/></expr_stmt>
  <while pos:line="19" pos:column="3">while <condition pos:line="19" pos:column="9">(<expr><call><name pos:line="19" pos:column="10">c_avl_iterator_next<pos:position pos:line="19" pos:column="29"/></name> <argument_list pos:line="19" pos:column="30">(<argument><expr><name pos:line="19" pos:column="31">iter<pos:position pos:line="19" pos:column="35"/></name></expr></argument>, <argument><expr><operator pos:line="19" pos:column="37">(<pos:position pos:line="19" pos:column="38"/></operator><name pos:line="19" pos:column="38">void<pos:position pos:line="19" pos:column="42"/></name> <operator pos:line="19" pos:column="43">*<pos:position pos:line="19" pos:column="44"/></operator><operator pos:line="19" pos:column="44">)<pos:position pos:line="19" pos:column="45"/></operator> <operator pos:line="19" pos:column="46">&amp;<pos:position pos:line="19" pos:column="51"/></operator><name pos:line="19" pos:column="47">key<pos:position pos:line="19" pos:column="50"/></name></expr></argument>, <argument><expr><operator pos:line="19" pos:column="52">(<pos:position pos:line="19" pos:column="53"/></operator><name pos:line="19" pos:column="53">void<pos:position pos:line="19" pos:column="57"/></name> <operator pos:line="19" pos:column="58">*<pos:position pos:line="19" pos:column="59"/></operator><operator pos:line="19" pos:column="59">)<pos:position pos:line="19" pos:column="60"/></operator> <operator pos:line="19" pos:column="61">&amp;<pos:position pos:line="19" pos:column="66"/></operator><name pos:line="19" pos:column="62">ce<pos:position pos:line="19" pos:column="64"/></name></expr></argument>)<pos:position pos:line="19" pos:column="65"/></argument_list></call> <operator pos:line="19" pos:column="66">==<pos:position pos:line="19" pos:column="68"/></operator> <literal type="number" pos:line="19" pos:column="69">0<pos:position pos:line="19" pos:column="70"/></literal></expr>)<pos:position pos:line="19" pos:column="71"/></condition>
  <block pos:line="20" pos:column="3">{
    <comment type="block" pos:line="21" pos:column="5">/* If entry has not been updated, add to `keys' array */</comment>
    <if pos:line="22" pos:column="5">if <condition pos:line="22" pos:column="8">(<expr><operator pos:line="22" pos:column="9">(<pos:position pos:line="22" pos:column="10"/></operator><name pos:line="22" pos:column="10">now<pos:position pos:line="22" pos:column="13"/></name> <operator pos:line="22" pos:column="14">-<pos:position pos:line="22" pos:column="15"/></operator> <name><name pos:line="22" pos:column="16">ce<pos:position pos:line="22" pos:column="18"/></name><operator pos:line="22" pos:column="18">-&gt;<pos:position pos:line="22" pos:column="23"/></operator><name pos:line="22" pos:column="20">last_update<pos:position pos:line="22" pos:column="31"/></name></name><operator pos:line="22" pos:column="31">)<pos:position pos:line="22" pos:column="32"/></operator> <operator pos:line="22" pos:column="33">&gt;=<pos:position pos:line="22" pos:column="38"/></operator> <operator pos:line="22" pos:column="36">(<pos:position pos:line="22" pos:column="37"/></operator><literal type="number" pos:line="22" pos:column="37">2<pos:position pos:line="22" pos:column="38"/></literal> <operator pos:line="22" pos:column="39">*<pos:position pos:line="22" pos:column="40"/></operator> <name><name pos:line="22" pos:column="41">ce<pos:position pos:line="22" pos:column="43"/></name><operator pos:line="22" pos:column="43">-&gt;<pos:position pos:line="22" pos:column="48"/></operator><name pos:line="22" pos:column="45">interval<pos:position pos:line="22" pos:column="53"/></name></name><operator pos:line="22" pos:column="53">)<pos:position pos:line="22" pos:column="54"/></operator></expr>)<pos:position pos:line="22" pos:column="55"/></condition><then pos:line="22" pos:column="55">
    <block pos:line="23" pos:column="5">{
      <decl_stmt><decl><type><name pos:line="24" pos:column="7">char<pos:position pos:line="24" pos:column="11"/></name> <modifier pos:line="24" pos:column="12">*<pos:position pos:line="24" pos:column="13"/></modifier><modifier pos:line="24" pos:column="13">*<pos:position pos:line="24" pos:column="14"/></modifier></type><name pos:line="24" pos:column="14">tmp<pos:position pos:line="24" pos:column="17"/></name></decl>;<pos:position pos:line="24" pos:column="18"/></decl_stmt>

      <expr_stmt><expr><name pos:line="26" pos:column="7">tmp<pos:position pos:line="26" pos:column="10"/></name> <operator pos:line="26" pos:column="11">=<pos:position pos:line="26" pos:column="12"/></operator> <operator pos:line="26" pos:column="13">(<pos:position pos:line="26" pos:column="14"/></operator><name pos:line="26" pos:column="14">char<pos:position pos:line="26" pos:column="18"/></name> <operator pos:line="26" pos:column="19">*<pos:position pos:line="26" pos:column="20"/></operator><operator pos:line="26" pos:column="20">*<pos:position pos:line="26" pos:column="21"/></operator><operator pos:line="26" pos:column="21">)<pos:position pos:line="26" pos:column="22"/></operator> <call><name pos:line="26" pos:column="23">realloc<pos:position pos:line="26" pos:column="30"/></name> <argument_list pos:line="26" pos:column="31">(<argument><expr><operator pos:line="26" pos:column="32">(<pos:position pos:line="26" pos:column="33"/></operator><name pos:line="26" pos:column="33">void<pos:position pos:line="26" pos:column="37"/></name> <operator pos:line="26" pos:column="38">*<pos:position pos:line="26" pos:column="39"/></operator><operator pos:line="26" pos:column="39">)<pos:position pos:line="26" pos:column="40"/></operator> <name pos:line="26" pos:column="41">keys<pos:position pos:line="26" pos:column="45"/></name></expr></argument>,
	  <argument><expr><operator pos:line="27" pos:column="11">(<pos:position pos:line="27" pos:column="12"/></operator><name pos:line="27" pos:column="12">keys_len<pos:position pos:line="27" pos:column="20"/></name> <operator pos:line="27" pos:column="21">+<pos:position pos:line="27" pos:column="22"/></operator> <literal type="number" pos:line="27" pos:column="23">1<pos:position pos:line="27" pos:column="24"/></literal><operator pos:line="27" pos:column="24">)<pos:position pos:line="27" pos:column="25"/></operator> <operator pos:line="27" pos:column="26">*<pos:position pos:line="27" pos:column="27"/></operator> <sizeof pos:line="27" pos:column="28">sizeof <argument_list pos:line="27" pos:column="35">(<argument><expr><name pos:line="27" pos:column="36">char<pos:position pos:line="27" pos:column="40"/></name> <operator pos:line="27" pos:column="41">*<pos:position pos:line="27" pos:column="42"/></operator></expr></argument>)<pos:position pos:line="27" pos:column="43"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="27" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="45"/></expr_stmt>
      <if pos:line="28" pos:column="7">if <condition pos:line="28" pos:column="10">(<expr><name pos:line="28" pos:column="11">tmp<pos:position pos:line="28" pos:column="14"/></name> <operator pos:line="28" pos:column="15">==<pos:position pos:line="28" pos:column="17"/></operator> <name pos:line="28" pos:column="18">NULL<pos:position pos:line="28" pos:column="22"/></name></expr>)<pos:position pos:line="28" pos:column="23"/></condition><then pos:line="28" pos:column="23">
      <block pos:line="29" pos:column="7">{
	<expr_stmt><expr><call><name pos:line="30" pos:column="9">ERROR<pos:position pos:line="30" pos:column="14"/></name> <argument_list pos:line="30" pos:column="15">(<argument><expr><literal type="string" pos:line="30" pos:column="16">"uc_purge: realloc failed."<pos:position pos:line="30" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="45"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="31" pos:column="9">c_avl_iterator_destroy<pos:position pos:line="31" pos:column="31"/></name> <argument_list pos:line="31" pos:column="32">(<argument><expr><name pos:line="31" pos:column="33">iter<pos:position pos:line="31" pos:column="37"/></name></expr></argument>)<pos:position pos:line="31" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="39"/></expr_stmt>
	<return pos:line="32" pos:column="9">return <expr><operator pos:line="32" pos:column="16">(<pos:position pos:line="32" pos:column="17"/></operator><operator pos:line="32" pos:column="17">-<pos:position pos:line="32" pos:column="18"/></operator><literal type="number" pos:line="32" pos:column="18">1<pos:position pos:line="32" pos:column="19"/></literal><operator pos:line="32" pos:column="19">)<pos:position pos:line="32" pos:column="20"/></operator></expr>;<pos:position pos:line="32" pos:column="21"/></return>
      }<pos:position pos:line="33" pos:column="8"/></block></then></if>

      <expr_stmt><expr><name pos:line="35" pos:column="7">keys<pos:position pos:line="35" pos:column="11"/></name> <operator pos:line="35" pos:column="12">=<pos:position pos:line="35" pos:column="13"/></operator> <name pos:line="35" pos:column="14">tmp<pos:position pos:line="35" pos:column="17"/></name></expr>;<pos:position pos:line="35" pos:column="18"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="36" pos:column="7">keys<pos:position pos:line="36" pos:column="11"/></name><index pos:line="36" pos:column="11">[<expr><name pos:line="36" pos:column="12">keys_len<pos:position pos:line="36" pos:column="20"/></name></expr>]<pos:position pos:line="36" pos:column="21"/></index></name> <operator pos:line="36" pos:column="22">=<pos:position pos:line="36" pos:column="23"/></operator> <call><name pos:line="36" pos:column="24">strdup<pos:position pos:line="36" pos:column="30"/></name> <argument_list pos:line="36" pos:column="31">(<argument><expr><name pos:line="36" pos:column="32">key<pos:position pos:line="36" pos:column="35"/></name></expr></argument>)<pos:position pos:line="36" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="37"/></expr_stmt>
      <if pos:line="37" pos:column="7">if <condition pos:line="37" pos:column="10">(<expr><name><name pos:line="37" pos:column="11">keys<pos:position pos:line="37" pos:column="15"/></name><index pos:line="37" pos:column="15">[<expr><name pos:line="37" pos:column="16">keys_len<pos:position pos:line="37" pos:column="24"/></name></expr>]<pos:position pos:line="37" pos:column="25"/></index></name> <operator pos:line="37" pos:column="26">==<pos:position pos:line="37" pos:column="28"/></operator> <name pos:line="37" pos:column="29">NULL<pos:position pos:line="37" pos:column="33"/></name></expr>)<pos:position pos:line="37" pos:column="34"/></condition><then pos:line="37" pos:column="34">
      <block pos:line="38" pos:column="7">{
	<expr_stmt><expr><call><name pos:line="39" pos:column="9">ERROR<pos:position pos:line="39" pos:column="14"/></name> <argument_list pos:line="39" pos:column="15">(<argument><expr><literal type="string" pos:line="39" pos:column="16">"uc_check_timeout: strdup failed."<pos:position pos:line="39" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="39" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="52"/></expr_stmt>
	<continue pos:line="40" pos:column="9">continue;<pos:position pos:line="40" pos:column="18"/></continue>
      }<pos:position pos:line="41" pos:column="8"/></block></then></if>
      <expr_stmt><expr><name pos:line="42" pos:column="7">keys_len<pos:position pos:line="42" pos:column="15"/></name><operator pos:line="42" pos:column="15">++<pos:position pos:line="42" pos:column="17"/></operator></expr>;<pos:position pos:line="42" pos:column="18"/></expr_stmt>
    }<pos:position pos:line="43" pos:column="6"/></block></then></if>
  }<pos:position pos:line="44" pos:column="4"/></block></while> <comment type="block" pos:line="44" pos:column="5">/* while (c_avl_iterator_next) */</comment>

  <for pos:line="46" pos:column="3">for <control pos:line="46" pos:column="7">(<init><expr><name pos:line="46" pos:column="8">i<pos:position pos:line="46" pos:column="9"/></name> <operator pos:line="46" pos:column="10">=<pos:position pos:line="46" pos:column="11"/></operator> <literal type="number" pos:line="46" pos:column="12">0<pos:position pos:line="46" pos:column="13"/></literal></expr>;<pos:position pos:line="46" pos:column="14"/></init> <condition><expr><name pos:line="46" pos:column="15">i<pos:position pos:line="46" pos:column="16"/></name> <operator pos:line="46" pos:column="17">&lt;<pos:position pos:line="46" pos:column="21"/></operator> <name pos:line="46" pos:column="19">keys_len<pos:position pos:line="46" pos:column="27"/></name></expr>;<pos:position pos:line="46" pos:column="28"/></condition> <incr><expr><name pos:line="46" pos:column="29">i<pos:position pos:line="46" pos:column="30"/></name><operator pos:line="46" pos:column="30">++<pos:position pos:line="46" pos:column="32"/></operator></expr></incr>)<pos:position pos:line="46" pos:column="33"/></control>
  <block pos:line="47" pos:column="3">{
    <decl_stmt><decl><type><name pos:line="48" pos:column="5">int<pos:position pos:line="48" pos:column="8"/></name></type> <name pos:line="48" pos:column="9">status<pos:position pos:line="48" pos:column="15"/></name></decl>;<pos:position pos:line="48" pos:column="16"/></decl_stmt>

    <expr_stmt><expr><name pos:line="50" pos:column="5">status<pos:position pos:line="50" pos:column="11"/></name> <operator pos:line="50" pos:column="12">=<pos:position pos:line="50" pos:column="13"/></operator> <call><name pos:line="50" pos:column="14">ut_check_interesting<pos:position pos:line="50" pos:column="34"/></name> <argument_list pos:line="50" pos:column="35">(<argument><expr><name><name pos:line="50" pos:column="36">keys<pos:position pos:line="50" pos:column="40"/></name><index pos:line="50" pos:column="40">[<expr><name pos:line="50" pos:column="41">i<pos:position pos:line="50" pos:column="42"/></name></expr>]<pos:position pos:line="50" pos:column="43"/></index></name></expr></argument>)<pos:position pos:line="50" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="45"/></expr_stmt>

    <if pos:line="52" pos:column="5">if <condition pos:line="52" pos:column="8">(<expr><name pos:line="52" pos:column="9">status<pos:position pos:line="52" pos:column="15"/></name> <operator pos:line="52" pos:column="16">&lt;<pos:position pos:line="52" pos:column="20"/></operator> <literal type="number" pos:line="52" pos:column="18">0<pos:position pos:line="52" pos:column="19"/></literal></expr>)<pos:position pos:line="52" pos:column="20"/></condition><then pos:line="52" pos:column="20">
    <block pos:line="53" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="54" pos:column="7">ERROR<pos:position pos:line="54" pos:column="12"/></name> <argument_list pos:line="54" pos:column="13">(<argument><expr><literal type="string" pos:line="54" pos:column="14">"uc_check_timeout: ut_check_interesting failed."<pos:position pos:line="54" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="54" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="64"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="55" pos:column="7">sfree<pos:position pos:line="55" pos:column="12"/></name> <argument_list pos:line="55" pos:column="13">(<argument><expr><name><name pos:line="55" pos:column="14">keys<pos:position pos:line="55" pos:column="18"/></name><index pos:line="55" pos:column="18">[<expr><name pos:line="55" pos:column="19">i<pos:position pos:line="55" pos:column="20"/></name></expr>]<pos:position pos:line="55" pos:column="21"/></index></name></expr></argument>)<pos:position pos:line="55" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="23"/></expr_stmt>
    }<pos:position pos:line="56" pos:column="6"/></block></then>
    <elseif pos:line="57" pos:column="5">else <if pos:line="57" pos:column="10">if <condition pos:line="57" pos:column="13">(<expr><name pos:line="57" pos:column="14">status<pos:position pos:line="57" pos:column="20"/></name> <operator pos:line="57" pos:column="21">==<pos:position pos:line="57" pos:column="23"/></operator> <literal type="number" pos:line="57" pos:column="24">0<pos:position pos:line="57" pos:column="25"/></literal></expr>)<pos:position pos:line="57" pos:column="26"/></condition><then pos:line="57" pos:column="26"> <comment type="block" pos:line="57" pos:column="27">/* ``service'' is uninteresting */</comment>
    <block pos:line="58" pos:column="5">{
      <expr_stmt><expr><name pos:line="59" pos:column="7">ce<pos:position pos:line="59" pos:column="9"/></name> <operator pos:line="59" pos:column="10">=<pos:position pos:line="59" pos:column="11"/></operator> <name pos:line="59" pos:column="12">NULL<pos:position pos:line="59" pos:column="16"/></name></expr>;<pos:position pos:line="59" pos:column="17"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="60" pos:column="7">DEBUG<pos:position pos:line="60" pos:column="12"/></name> <argument_list pos:line="60" pos:column="13">(<argument><expr><literal type="string" pos:line="60" pos:column="14">"uc_check_timeout: %s is missing but ``uninteresting''"<pos:position pos:line="60" pos:column="69"/></literal></expr></argument>, <argument><expr><name><name pos:line="60" pos:column="71">keys<pos:position pos:line="60" pos:column="75"/></name><index pos:line="60" pos:column="75">[<expr><name pos:line="60" pos:column="76">i<pos:position pos:line="60" pos:column="77"/></name></expr>]<pos:position pos:line="60" pos:column="78"/></index></name></expr></argument>)<pos:position pos:line="60" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="80"/></expr_stmt>
      <expr_stmt><expr><name pos:line="61" pos:column="7">status<pos:position pos:line="61" pos:column="13"/></name> <operator pos:line="61" pos:column="14">=<pos:position pos:line="61" pos:column="15"/></operator> <call><name pos:line="61" pos:column="16">c_avl_remove<pos:position pos:line="61" pos:column="28"/></name> <argument_list pos:line="61" pos:column="29">(<argument><expr><name pos:line="61" pos:column="30">cache_tree<pos:position pos:line="61" pos:column="40"/></name></expr></argument>, <argument><expr><name><name pos:line="61" pos:column="42">keys<pos:position pos:line="61" pos:column="46"/></name><index pos:line="61" pos:column="46">[<expr><name pos:line="61" pos:column="47">i<pos:position pos:line="61" pos:column="48"/></name></expr>]<pos:position pos:line="61" pos:column="49"/></index></name></expr></argument>, <argument><expr><operator pos:line="61" pos:column="51">(<pos:position pos:line="61" pos:column="52"/></operator><name pos:line="61" pos:column="52">void<pos:position pos:line="61" pos:column="56"/></name> <operator pos:line="61" pos:column="57">*<pos:position pos:line="61" pos:column="58"/></operator><operator pos:line="61" pos:column="58">)<pos:position pos:line="61" pos:column="59"/></operator> <operator pos:line="61" pos:column="60">&amp;<pos:position pos:line="61" pos:column="65"/></operator><name pos:line="61" pos:column="61">key<pos:position pos:line="61" pos:column="64"/></name></expr></argument>, <argument><expr><operator pos:line="61" pos:column="66">(<pos:position pos:line="61" pos:column="67"/></operator><name pos:line="61" pos:column="67">void<pos:position pos:line="61" pos:column="71"/></name> <operator pos:line="61" pos:column="72">*<pos:position pos:line="61" pos:column="73"/></operator><operator pos:line="61" pos:column="73">)<pos:position pos:line="61" pos:column="74"/></operator> <operator pos:line="61" pos:column="75">&amp;<pos:position pos:line="61" pos:column="80"/></operator><name pos:line="61" pos:column="76">ce<pos:position pos:line="61" pos:column="78"/></name></expr></argument>)<pos:position pos:line="61" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="80"/></expr_stmt>
      <if pos:line="62" pos:column="7">if <condition pos:line="62" pos:column="10">(<expr><name pos:line="62" pos:column="11">status<pos:position pos:line="62" pos:column="17"/></name> <operator pos:line="62" pos:column="18">!=<pos:position pos:line="62" pos:column="20"/></operator> <literal type="number" pos:line="62" pos:column="21">0<pos:position pos:line="62" pos:column="22"/></literal></expr>)<pos:position pos:line="62" pos:column="23"/></condition><then pos:line="62" pos:column="23">
      <block pos:line="63" pos:column="7">{
	<expr_stmt><expr><call><name pos:line="64" pos:column="9">ERROR<pos:position pos:line="64" pos:column="14"/></name> <argument_list pos:line="64" pos:column="15">(<argument><expr><literal type="string" pos:line="64" pos:column="16">"uc_check_timeout: c_avl_remove (%s) failed."<pos:position pos:line="64" pos:column="61"/></literal></expr></argument>, <argument><expr><name><name pos:line="64" pos:column="63">keys<pos:position pos:line="64" pos:column="67"/></name><index pos:line="64" pos:column="67">[<expr><name pos:line="64" pos:column="68">i<pos:position pos:line="64" pos:column="69"/></name></expr>]<pos:position pos:line="64" pos:column="70"/></index></name></expr></argument>)<pos:position pos:line="64" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="72"/></expr_stmt>
      }<pos:position pos:line="65" pos:column="8"/></block></then></if>
      <expr_stmt><expr><call><name pos:line="66" pos:column="7">sfree<pos:position pos:line="66" pos:column="12"/></name> <argument_list pos:line="66" pos:column="13">(<argument><expr><name><name pos:line="66" pos:column="14">keys<pos:position pos:line="66" pos:column="18"/></name><index pos:line="66" pos:column="18">[<expr><name pos:line="66" pos:column="19">i<pos:position pos:line="66" pos:column="20"/></name></expr>]<pos:position pos:line="66" pos:column="21"/></index></name></expr></argument>)<pos:position pos:line="66" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="23"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="67" pos:column="7">cache_free<pos:position pos:line="67" pos:column="17"/></name> <argument_list pos:line="67" pos:column="18">(<argument><expr><name pos:line="67" pos:column="19">ce<pos:position pos:line="67" pos:column="21"/></name></expr></argument>)<pos:position pos:line="67" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="23"/></expr_stmt>
    }<pos:position pos:line="68" pos:column="6"/></block></then></if></elseif>
    <else pos:line="69" pos:column="5">else <comment type="block" pos:line="69" pos:column="10">/* (status &gt; 0); ``service'' is interesting */</comment>
    <block pos:line="70" pos:column="5">{
      <comment type="block" pos:line="71" pos:column="7">/*
       * `keys[i]' is not freed and set to NULL, so that the for-loop below
       * will send out notifications. There's nothing else to do here.
       */</comment>
      <expr_stmt><expr><call><name pos:line="75" pos:column="7">DEBUG<pos:position pos:line="75" pos:column="12"/></name> <argument_list pos:line="75" pos:column="13">(<argument><expr><literal type="string" pos:line="75" pos:column="14">"uc_check_timeout: %s is missing and ``interesting''"<pos:position pos:line="75" pos:column="67"/></literal></expr></argument>, <argument><expr><name><name pos:line="75" pos:column="69">keys<pos:position pos:line="75" pos:column="73"/></name><index pos:line="75" pos:column="73">[<expr><name pos:line="75" pos:column="74">i<pos:position pos:line="75" pos:column="75"/></name></expr>]<pos:position pos:line="75" pos:column="76"/></index></name></expr></argument>)<pos:position pos:line="75" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="78"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="76" pos:column="7">ce<pos:position pos:line="76" pos:column="9"/></name><operator pos:line="76" pos:column="9">-&gt;<pos:position pos:line="76" pos:column="14"/></operator><name pos:line="76" pos:column="11">state<pos:position pos:line="76" pos:column="16"/></name></name> <operator pos:line="76" pos:column="17">=<pos:position pos:line="76" pos:column="18"/></operator> <name pos:line="76" pos:column="19">STATE_ERROR<pos:position pos:line="76" pos:column="30"/></name></expr>;<pos:position pos:line="76" pos:column="31"/></expr_stmt>
    }<pos:position pos:line="77" pos:column="6"/></block></else></if>
  }<pos:position pos:line="78" pos:column="4"/></block></for> <comment type="block" pos:line="78" pos:column="5">/* for (keys[i]) */</comment>

  <expr_stmt><expr><call><name pos:line="80" pos:column="3">c_avl_iterator_destroy<pos:position pos:line="80" pos:column="25"/></name> <argument_list pos:line="80" pos:column="26">(<argument><expr><name pos:line="80" pos:column="27">iter<pos:position pos:line="80" pos:column="31"/></name></expr></argument>)<pos:position pos:line="80" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="33"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="82" pos:column="3">pthread_mutex_unlock<pos:position pos:line="82" pos:column="23"/></name> <argument_list pos:line="82" pos:column="24">(<argument><expr><operator pos:line="82" pos:column="25">&amp;<pos:position pos:line="82" pos:column="30"/></operator><name pos:line="82" pos:column="26">cache_lock<pos:position pos:line="82" pos:column="36"/></name></expr></argument>)<pos:position pos:line="82" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="38"/></expr_stmt>

  <for pos:line="84" pos:column="3">for <control pos:line="84" pos:column="7">(<init><expr><name pos:line="84" pos:column="8">i<pos:position pos:line="84" pos:column="9"/></name> <operator pos:line="84" pos:column="10">=<pos:position pos:line="84" pos:column="11"/></operator> <literal type="number" pos:line="84" pos:column="12">0<pos:position pos:line="84" pos:column="13"/></literal></expr>;<pos:position pos:line="84" pos:column="14"/></init> <condition><expr><name pos:line="84" pos:column="15">i<pos:position pos:line="84" pos:column="16"/></name> <operator pos:line="84" pos:column="17">&lt;<pos:position pos:line="84" pos:column="21"/></operator> <name pos:line="84" pos:column="19">keys_len<pos:position pos:line="84" pos:column="27"/></name></expr>;<pos:position pos:line="84" pos:column="28"/></condition> <incr><expr><name pos:line="84" pos:column="29">i<pos:position pos:line="84" pos:column="30"/></name><operator pos:line="84" pos:column="30">++<pos:position pos:line="84" pos:column="32"/></operator></expr></incr>)<pos:position pos:line="84" pos:column="33"/></control>
  <block pos:line="85" pos:column="3">{
    <if pos:line="86" pos:column="5">if <condition pos:line="86" pos:column="8">(<expr><name><name pos:line="86" pos:column="9">keys<pos:position pos:line="86" pos:column="13"/></name><index pos:line="86" pos:column="13">[<expr><name pos:line="86" pos:column="14">i<pos:position pos:line="86" pos:column="15"/></name></expr>]<pos:position pos:line="86" pos:column="16"/></index></name> <operator pos:line="86" pos:column="17">==<pos:position pos:line="86" pos:column="19"/></operator> <name pos:line="86" pos:column="20">NULL<pos:position pos:line="86" pos:column="24"/></name></expr>)<pos:position pos:line="86" pos:column="25"/></condition><then pos:line="86" pos:column="25">
      <block type="pseudo"><continue pos:line="87" pos:column="7">continue;<pos:position pos:line="87" pos:column="16"/></continue></block></then></if>

    <expr_stmt><expr><call><name pos:line="89" pos:column="5">uc_send_notification<pos:position pos:line="89" pos:column="25"/></name> <argument_list pos:line="89" pos:column="26">(<argument><expr><name><name pos:line="89" pos:column="27">keys<pos:position pos:line="89" pos:column="31"/></name><index pos:line="89" pos:column="31">[<expr><name pos:line="89" pos:column="32">i<pos:position pos:line="89" pos:column="33"/></name></expr>]<pos:position pos:line="89" pos:column="34"/></index></name></expr></argument>)<pos:position pos:line="89" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="36"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="90" pos:column="5">sfree<pos:position pos:line="90" pos:column="10"/></name> <argument_list pos:line="90" pos:column="11">(<argument><expr><name><name pos:line="90" pos:column="12">keys<pos:position pos:line="90" pos:column="16"/></name><index pos:line="90" pos:column="16">[<expr><name pos:line="90" pos:column="17">i<pos:position pos:line="90" pos:column="18"/></name></expr>]<pos:position pos:line="90" pos:column="19"/></index></name></expr></argument>)<pos:position pos:line="90" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="90" pos:column="21"/></expr_stmt>
  }<pos:position pos:line="91" pos:column="4"/></block></for>

  <expr_stmt><expr><call><name pos:line="93" pos:column="3">sfree<pos:position pos:line="93" pos:column="8"/></name> <argument_list pos:line="93" pos:column="9">(<argument><expr><name pos:line="93" pos:column="10">keys<pos:position pos:line="93" pos:column="14"/></name></expr></argument>)<pos:position pos:line="93" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="16"/></expr_stmt>

  <return pos:line="95" pos:column="3">return <expr><operator pos:line="95" pos:column="10">(<pos:position pos:line="95" pos:column="11"/></operator><literal type="number" pos:line="95" pos:column="11">0<pos:position pos:line="95" pos:column="12"/></literal><operator pos:line="95" pos:column="12">)<pos:position pos:line="95" pos:column="13"/></operator></expr>;<pos:position pos:line="95" pos:column="14"/></return>
}<pos:position pos:line="96" pos:column="2"/></block></function></unit>
