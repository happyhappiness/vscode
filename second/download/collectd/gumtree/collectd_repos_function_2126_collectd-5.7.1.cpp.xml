<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_2126_collectd-5.7.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name> <modifier pos:line="1" pos:column="13">*<pos:position pos:line="1" pos:column="14"/></modifier></type><name pos:line="1" pos:column="14">cpy_interactive<pos:position pos:line="1" pos:column="29"/></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name pos:line="1" pos:column="30">void<pos:position pos:line="1" pos:column="34"/></name> <modifier pos:line="1" pos:column="35">*<pos:position pos:line="1" pos:column="36"/></modifier></type><name pos:line="1" pos:column="36">pipefd<pos:position pos:line="1" pos:column="42"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="43"/></parameter_list> <block pos:line="1" pos:column="44">{
  <decl_stmt><decl><type><name pos:line="2" pos:column="3">PyOS_sighandler_t<pos:position pos:line="2" pos:column="20"/></name></type> <name pos:line="2" pos:column="21">cur_sig<pos:position pos:line="2" pos:column="28"/></name></decl>;<pos:position pos:line="2" pos:column="29"/></decl_stmt>

  <comment type="block" pos:line="4" pos:column="3">/* Signal handler in a plugin? Bad stuff, but the best way to
   * handle it I guess. In an interactive session people will
   * press Ctrl+C at some time, which will generate a SIGINT.
   * This will cause collectd to shutdown, thus killing the
   * interactive interpreter, and leaving the terminal in a
   * mess. Chances are, this isn't what the user wanted to do.
   *
   * So this is the plan:
   * 1. Restore Python's own signal handler
   * 2. Tell Python we just forked so it will accept this thread
   *    as the main one. No version of Python will ever handle
   *    interrupts anywhere but in the main thread.
   * 3. After the interactive loop is done, restore collectd's
   *    SIGINT handler.
   * 4. Raise SIGINT for a clean shutdown. The signal is sent to
   *    the main thread to ensure it wakes up the main interval
   *    sleep so that collectd shuts down immediately not in 10
   *    seconds.
   *
   * This will make sure that SIGINT won't kill collectd but
   * still interrupt syscalls like sleep and pause. */</comment>

  <if pos:line="26" pos:column="3">if <condition pos:line="26" pos:column="6">(<expr><call><name pos:line="26" pos:column="7">PyImport_ImportModule<pos:position pos:line="26" pos:column="28"/></name><argument_list pos:line="26" pos:column="28">(<argument><expr><literal type="string" pos:line="26" pos:column="29">"readline"<pos:position pos:line="26" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="40"/></argument_list></call> <operator pos:line="26" pos:column="41">==<pos:position pos:line="26" pos:column="43"/></operator> <name pos:line="26" pos:column="44">NULL<pos:position pos:line="26" pos:column="48"/></name></expr>)<pos:position pos:line="26" pos:column="49"/></condition><then pos:line="26" pos:column="49"> <block pos:line="26" pos:column="50">{
    <comment type="block" pos:line="27" pos:column="5">/* This interactive session will suck. */</comment>
    <expr_stmt><expr><call><name pos:line="28" pos:column="5">cpy_log_exception<pos:position pos:line="28" pos:column="22"/></name><argument_list pos:line="28" pos:column="22">(<argument><expr><literal type="string" pos:line="28" pos:column="23">"interactive session init"<pos:position pos:line="28" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="51"/></expr_stmt>
  }<pos:position pos:line="29" pos:column="4"/></block></then></if>
  <expr_stmt><expr><name pos:line="30" pos:column="3">cur_sig<pos:position pos:line="30" pos:column="10"/></name> <operator pos:line="30" pos:column="11">=<pos:position pos:line="30" pos:column="12"/></operator> <call><name pos:line="30" pos:column="13">PyOS_setsig<pos:position pos:line="30" pos:column="24"/></name><argument_list pos:line="30" pos:column="24">(<argument><expr><name pos:line="30" pos:column="25">SIGINT<pos:position pos:line="30" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="33">python_sigint_handler<pos:position pos:line="30" pos:column="54"/></name></expr></argument>)<pos:position pos:line="30" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="56"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="31" pos:column="3">PyOS_AfterFork<pos:position pos:line="31" pos:column="17"/></name><argument_list pos:line="31" pos:column="17">()<pos:position pos:line="31" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="20"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="32" pos:column="3">PyEval_InitThreads<pos:position pos:line="32" pos:column="21"/></name><argument_list pos:line="32" pos:column="21">()<pos:position pos:line="32" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="24"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="33" pos:column="3">close<pos:position pos:line="33" pos:column="8"/></name><argument_list pos:line="33" pos:column="8">(<argument><expr><operator pos:line="33" pos:column="9">*<pos:position pos:line="33" pos:column="10"/></operator><operator pos:line="33" pos:column="10">(<pos:position pos:line="33" pos:column="11"/></operator><name pos:line="33" pos:column="11">int<pos:position pos:line="33" pos:column="14"/></name> <operator pos:line="33" pos:column="15">*<pos:position pos:line="33" pos:column="16"/></operator><operator pos:line="33" pos:column="16">)<pos:position pos:line="33" pos:column="17"/></operator><name pos:line="33" pos:column="17">pipefd<pos:position pos:line="33" pos:column="23"/></name></expr></argument>)<pos:position pos:line="33" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="25"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="34" pos:column="3">PyRun_InteractiveLoop<pos:position pos:line="34" pos:column="24"/></name><argument_list pos:line="34" pos:column="24">(<argument><expr><name pos:line="34" pos:column="25">stdin<pos:position pos:line="34" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="34" pos:column="32">"&lt;stdin&gt;"<pos:position pos:line="34" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="43"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="35" pos:column="3">PyOS_setsig<pos:position pos:line="35" pos:column="14"/></name><argument_list pos:line="35" pos:column="14">(<argument><expr><name pos:line="35" pos:column="15">SIGINT<pos:position pos:line="35" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="23">cur_sig<pos:position pos:line="35" pos:column="30"/></name></expr></argument>)<pos:position pos:line="35" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="32"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="36" pos:column="3">PyErr_Print<pos:position pos:line="36" pos:column="14"/></name><argument_list pos:line="36" pos:column="14">()<pos:position pos:line="36" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="17"/></expr_stmt>
  <expr_stmt><expr><name pos:line="37" pos:column="3">state<pos:position pos:line="37" pos:column="8"/></name> <operator pos:line="37" pos:column="9">=<pos:position pos:line="37" pos:column="10"/></operator> <call><name pos:line="37" pos:column="11">PyEval_SaveThread<pos:position pos:line="37" pos:column="28"/></name><argument_list pos:line="37" pos:column="28">()<pos:position pos:line="37" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="31"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="38" pos:column="3">NOTICE<pos:position pos:line="38" pos:column="9"/></name><argument_list pos:line="38" pos:column="9">(<argument><expr><literal type="string" pos:line="38" pos:column="10">"python: Interactive interpreter exited, stopping collectd ..."<pos:position pos:line="38" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="38" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="75"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="39" pos:column="3">pthread_kill<pos:position pos:line="39" pos:column="15"/></name><argument_list pos:line="39" pos:column="15">(<argument><expr><name pos:line="39" pos:column="16">main_thread<pos:position pos:line="39" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="29">SIGINT<pos:position pos:line="39" pos:column="35"/></name></expr></argument>)<pos:position pos:line="39" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="37"/></expr_stmt>
  <return pos:line="40" pos:column="3">return <expr><name pos:line="40" pos:column="10">NULL<pos:position pos:line="40" pos:column="14"/></name></expr>;<pos:position pos:line="40" pos:column="15"/></return>
}<pos:position pos:line="41" pos:column="2"/></block></function></unit>
