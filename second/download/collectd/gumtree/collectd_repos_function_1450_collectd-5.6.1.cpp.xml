<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1450_collectd-5.6.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">tbl_config_append_array_i<pos:position pos:line="1" pos:column="37"/></name> <parameter_list pos:line="1" pos:column="38">(<parameter><decl><type><name pos:line="1" pos:column="39">char<pos:position pos:line="1" pos:column="43"/></name> <modifier pos:line="1" pos:column="44">*<pos:position pos:line="1" pos:column="45"/></modifier></type><name pos:line="1" pos:column="45">name<pos:position pos:line="1" pos:column="49"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="51">size_t<pos:position pos:line="1" pos:column="57"/></name> <modifier pos:line="1" pos:column="58">*<pos:position pos:line="1" pos:column="59"/></modifier><modifier pos:line="1" pos:column="59">*<pos:position pos:line="1" pos:column="60"/></modifier></type><name pos:line="1" pos:column="60">var<pos:position pos:line="1" pos:column="63"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="65">size_t<pos:position pos:line="1" pos:column="71"/></name> <modifier pos:line="1" pos:column="72">*<pos:position pos:line="1" pos:column="73"/></modifier></type><name pos:line="1" pos:column="73">len<pos:position pos:line="1" pos:column="76"/></name></decl></parameter>,
		<parameter><decl><type><name pos:line="2" pos:column="17">oconfig_item_t<pos:position pos:line="2" pos:column="31"/></name> <modifier pos:line="2" pos:column="32">*<pos:position pos:line="2" pos:column="33"/></modifier></type><name pos:line="2" pos:column="33">ci<pos:position pos:line="2" pos:column="35"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="36"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">size_t<pos:position pos:line="4" pos:column="15"/></name> <modifier pos:line="4" pos:column="16">*<pos:position pos:line="4" pos:column="17"/></modifier></type><name pos:line="4" pos:column="17">tmp<pos:position pos:line="4" pos:column="20"/></name></decl>;<pos:position pos:line="4" pos:column="21"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">size_t<pos:position pos:line="5" pos:column="15"/></name></type> <name pos:line="5" pos:column="16">num<pos:position pos:line="5" pos:column="19"/></name></decl>;<pos:position pos:line="5" pos:column="20"/></decl_stmt>

	<if pos:line="7" pos:column="9">if <condition pos:line="7" pos:column="12">(<expr><literal type="number" pos:line="7" pos:column="13">1<pos:position pos:line="7" pos:column="14"/></literal> <operator pos:line="7" pos:column="15">&gt;<pos:position pos:line="7" pos:column="19"/></operator> <name><name pos:line="7" pos:column="17">ci<pos:position pos:line="7" pos:column="19"/></name><operator pos:line="7" pos:column="19">-&gt;<pos:position pos:line="7" pos:column="24"/></operator><name pos:line="7" pos:column="21">values_num<pos:position pos:line="7" pos:column="31"/></name></name></expr>)<pos:position pos:line="7" pos:column="32"/></condition><then pos:line="7" pos:column="32"> <block pos:line="7" pos:column="33">{
		<expr_stmt><expr><call><name pos:line="8" pos:column="17">log_err<pos:position pos:line="8" pos:column="24"/></name> <argument_list pos:line="8" pos:column="25">(<argument><expr><literal type="string" pos:line="8" pos:column="26">"\"%s\" expects at least one argument."<pos:position pos:line="8" pos:column="65"/></literal></expr></argument>, <argument><expr><name pos:line="8" pos:column="67">name<pos:position pos:line="8" pos:column="71"/></name></expr></argument>)<pos:position pos:line="8" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="73"/></expr_stmt>
		<return pos:line="9" pos:column="17">return <expr><literal type="number" pos:line="9" pos:column="24">1<pos:position pos:line="9" pos:column="25"/></literal></expr>;<pos:position pos:line="9" pos:column="26"/></return>
	}<pos:position pos:line="10" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="12" pos:column="9">num<pos:position pos:line="12" pos:column="12"/></name> <operator pos:line="12" pos:column="13">=<pos:position pos:line="12" pos:column="14"/></operator> <operator pos:line="12" pos:column="15">(<pos:position pos:line="12" pos:column="16"/></operator><name pos:line="12" pos:column="16">size_t<pos:position pos:line="12" pos:column="22"/></name><operator pos:line="12" pos:column="22">)<pos:position pos:line="12" pos:column="23"/></operator> <name><name pos:line="12" pos:column="24">ci<pos:position pos:line="12" pos:column="26"/></name><operator pos:line="12" pos:column="26">-&gt;<pos:position pos:line="12" pos:column="31"/></operator><name pos:line="12" pos:column="28">values_num<pos:position pos:line="12" pos:column="38"/></name></name></expr>;<pos:position pos:line="12" pos:column="39"/></expr_stmt>
	<for pos:line="13" pos:column="9">for <control pos:line="13" pos:column="13">(<init><decl><type><name pos:line="13" pos:column="14">size_t<pos:position pos:line="13" pos:column="20"/></name></type> <name pos:line="13" pos:column="21">i<pos:position pos:line="13" pos:column="22"/></name> <init pos:line="13" pos:column="23">= <expr><literal type="number" pos:line="13" pos:column="25">0<pos:position pos:line="13" pos:column="26"/></literal></expr></init></decl>;<pos:position pos:line="13" pos:column="27"/></init> <condition><expr><name pos:line="13" pos:column="28">i<pos:position pos:line="13" pos:column="29"/></name> <operator pos:line="13" pos:column="30">&lt;<pos:position pos:line="13" pos:column="34"/></operator> <name pos:line="13" pos:column="32">num<pos:position pos:line="13" pos:column="35"/></name></expr>;<pos:position pos:line="13" pos:column="36"/></condition> <incr><expr><operator pos:line="13" pos:column="37">++<pos:position pos:line="13" pos:column="39"/></operator><name pos:line="13" pos:column="39">i<pos:position pos:line="13" pos:column="40"/></name></expr></incr>)<pos:position pos:line="13" pos:column="41"/></control> <block pos:line="13" pos:column="42">{
		<if pos:line="14" pos:column="17">if <condition pos:line="14" pos:column="20">(<expr><name pos:line="14" pos:column="21">OCONFIG_TYPE_NUMBER<pos:position pos:line="14" pos:column="40"/></name> <operator pos:line="14" pos:column="41">!=<pos:position pos:line="14" pos:column="43"/></operator> <name><name pos:line="14" pos:column="44">ci<pos:position pos:line="14" pos:column="46"/></name><operator pos:line="14" pos:column="46">-&gt;<pos:position pos:line="14" pos:column="51"/></operator><name pos:line="14" pos:column="48">values<pos:position pos:line="14" pos:column="54"/></name><index pos:line="14" pos:column="54">[<expr><name pos:line="14" pos:column="55">i<pos:position pos:line="14" pos:column="56"/></name></expr>]<pos:position pos:line="14" pos:column="57"/></index></name><operator pos:line="14" pos:column="57">.<pos:position pos:line="14" pos:column="58"/></operator><name pos:line="14" pos:column="58">type<pos:position pos:line="14" pos:column="62"/></name></expr>)<pos:position pos:line="14" pos:column="63"/></condition><then pos:line="14" pos:column="63"> <block pos:line="14" pos:column="64">{
			<expr_stmt><expr><call><name pos:line="15" pos:column="25">log_err<pos:position pos:line="15" pos:column="32"/></name> <argument_list pos:line="15" pos:column="33">(<argument><expr><literal type="string" pos:line="15" pos:column="34">"\"%s\" expects numerical arguments only."<pos:position pos:line="15" pos:column="76"/></literal></expr></argument>, <argument><expr><name pos:line="15" pos:column="78">name<pos:position pos:line="15" pos:column="82"/></name></expr></argument>)<pos:position pos:line="15" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="84"/></expr_stmt>
			<return pos:line="16" pos:column="25">return <expr><literal type="number" pos:line="16" pos:column="32">1<pos:position pos:line="16" pos:column="33"/></literal></expr>;<pos:position pos:line="16" pos:column="34"/></return>
		}<pos:position pos:line="17" pos:column="18"/></block></then></if>
	}<pos:position pos:line="18" pos:column="10"/></block></for>

	<expr_stmt><expr><name pos:line="20" pos:column="9">tmp<pos:position pos:line="20" pos:column="12"/></name> <operator pos:line="20" pos:column="13">=<pos:position pos:line="20" pos:column="14"/></operator> <call><name pos:line="20" pos:column="15">realloc<pos:position pos:line="20" pos:column="22"/></name> <argument_list pos:line="20" pos:column="23">(<argument><expr><operator pos:line="20" pos:column="24">*<pos:position pos:line="20" pos:column="25"/></operator><name pos:line="20" pos:column="25">var<pos:position pos:line="20" pos:column="28"/></name></expr></argument>, <argument><expr><operator pos:line="20" pos:column="30">(<pos:position pos:line="20" pos:column="31"/></operator><operator pos:line="20" pos:column="31">(<pos:position pos:line="20" pos:column="32"/></operator><operator pos:line="20" pos:column="32">*<pos:position pos:line="20" pos:column="33"/></operator><name pos:line="20" pos:column="33">len<pos:position pos:line="20" pos:column="36"/></name><operator pos:line="20" pos:column="36">)<pos:position pos:line="20" pos:column="37"/></operator> <operator pos:line="20" pos:column="38">+<pos:position pos:line="20" pos:column="39"/></operator> <name pos:line="20" pos:column="40">num<pos:position pos:line="20" pos:column="43"/></name><operator pos:line="20" pos:column="43">)<pos:position pos:line="20" pos:column="44"/></operator> <operator pos:line="20" pos:column="45">*<pos:position pos:line="20" pos:column="46"/></operator> <sizeof pos:line="20" pos:column="47">sizeof <argument_list pos:line="20" pos:column="54">(<argument><expr><operator pos:line="20" pos:column="55">*<pos:position pos:line="20" pos:column="56"/></operator><operator pos:line="20" pos:column="56">*<pos:position pos:line="20" pos:column="57"/></operator><name pos:line="20" pos:column="57">var<pos:position pos:line="20" pos:column="60"/></name></expr></argument>)<pos:position pos:line="20" pos:column="61"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="20" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="63"/></expr_stmt>
	<if pos:line="21" pos:column="9">if <condition pos:line="21" pos:column="12">(<expr><name pos:line="21" pos:column="13">NULL<pos:position pos:line="21" pos:column="17"/></name> <operator pos:line="21" pos:column="18">==<pos:position pos:line="21" pos:column="20"/></operator> <name pos:line="21" pos:column="21">tmp<pos:position pos:line="21" pos:column="24"/></name></expr>)<pos:position pos:line="21" pos:column="25"/></condition><then pos:line="21" pos:column="25"> <block pos:line="21" pos:column="26">{
		<decl_stmt><decl><type><name pos:line="22" pos:column="17">char<pos:position pos:line="22" pos:column="21"/></name></type> <name><name pos:line="22" pos:column="22">errbuf<pos:position pos:line="22" pos:column="28"/></name><index pos:line="22" pos:column="28">[<expr><literal type="number" pos:line="22" pos:column="29">1024<pos:position pos:line="22" pos:column="33"/></literal></expr>]<pos:position pos:line="22" pos:column="34"/></index></name></decl>;<pos:position pos:line="22" pos:column="35"/></decl_stmt>
		<expr_stmt><expr><call><name pos:line="23" pos:column="17">log_err<pos:position pos:line="23" pos:column="24"/></name> <argument_list pos:line="23" pos:column="25">(<argument><expr><literal type="string" pos:line="23" pos:column="26">"realloc failed: %s."<pos:position pos:line="23" pos:column="47"/></literal></expr></argument>,
				<argument><expr><call><name pos:line="24" pos:column="33">sstrerror<pos:position pos:line="24" pos:column="42"/></name> <argument_list pos:line="24" pos:column="43">(<argument><expr><name pos:line="24" pos:column="44">errno<pos:position pos:line="24" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="51">errbuf<pos:position pos:line="24" pos:column="57"/></name></expr></argument>, <argument><expr><sizeof pos:line="24" pos:column="59">sizeof <argument_list pos:line="24" pos:column="66">(<argument><expr><name pos:line="24" pos:column="67">errbuf<pos:position pos:line="24" pos:column="73"/></name></expr></argument>)<pos:position pos:line="24" pos:column="74"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="24" pos:column="75"/></argument_list></call></expr></argument>)<pos:position pos:line="24" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="77"/></expr_stmt>
		<return pos:line="25" pos:column="17">return <expr><operator pos:line="25" pos:column="24">-<pos:position pos:line="25" pos:column="25"/></operator><literal type="number" pos:line="25" pos:column="25">1<pos:position pos:line="25" pos:column="26"/></literal></expr>;<pos:position pos:line="25" pos:column="27"/></return>
	}<pos:position pos:line="26" pos:column="10"/></block></then></if>
	<expr_stmt><expr><operator pos:line="27" pos:column="9">*<pos:position pos:line="27" pos:column="10"/></operator><name pos:line="27" pos:column="10">var<pos:position pos:line="27" pos:column="13"/></name> <operator pos:line="27" pos:column="14">=<pos:position pos:line="27" pos:column="15"/></operator> <name pos:line="27" pos:column="16">tmp<pos:position pos:line="27" pos:column="19"/></name></expr>;<pos:position pos:line="27" pos:column="20"/></expr_stmt>

	<for pos:line="29" pos:column="9">for <control pos:line="29" pos:column="13">(<init><decl><type><name pos:line="29" pos:column="14">size_t<pos:position pos:line="29" pos:column="20"/></name></type> <name pos:line="29" pos:column="21">i<pos:position pos:line="29" pos:column="22"/></name> <init pos:line="29" pos:column="23">= <expr><literal type="number" pos:line="29" pos:column="25">0<pos:position pos:line="29" pos:column="26"/></literal></expr></init></decl>;<pos:position pos:line="29" pos:column="27"/></init> <condition><expr><name pos:line="29" pos:column="28">i<pos:position pos:line="29" pos:column="29"/></name> <operator pos:line="29" pos:column="30">&lt;<pos:position pos:line="29" pos:column="34"/></operator> <name pos:line="29" pos:column="32">num<pos:position pos:line="29" pos:column="35"/></name></expr>;<pos:position pos:line="29" pos:column="36"/></condition> <incr><expr><operator pos:line="29" pos:column="37">++<pos:position pos:line="29" pos:column="39"/></operator><name pos:line="29" pos:column="39">i<pos:position pos:line="29" pos:column="40"/></name></expr></incr>)<pos:position pos:line="29" pos:column="41"/></control> <block pos:line="29" pos:column="42">{
		<expr_stmt><expr><operator pos:line="30" pos:column="17">(<pos:position pos:line="30" pos:column="18"/></operator><operator pos:line="30" pos:column="18">*<pos:position pos:line="30" pos:column="19"/></operator><name pos:line="30" pos:column="19">var<pos:position pos:line="30" pos:column="22"/></name><operator pos:line="30" pos:column="22">)<pos:position pos:line="30" pos:column="23"/></operator><index pos:line="30" pos:column="23">[<expr><operator pos:line="30" pos:column="24">*<pos:position pos:line="30" pos:column="25"/></operator><name pos:line="30" pos:column="25">len<pos:position pos:line="30" pos:column="28"/></name></expr>]<pos:position pos:line="30" pos:column="29"/></index> <operator pos:line="30" pos:column="30">=<pos:position pos:line="30" pos:column="31"/></operator> <operator pos:line="30" pos:column="32">(<pos:position pos:line="30" pos:column="33"/></operator><name pos:line="30" pos:column="33">size_t<pos:position pos:line="30" pos:column="39"/></name><operator pos:line="30" pos:column="39">)<pos:position pos:line="30" pos:column="40"/></operator> <name><name pos:line="30" pos:column="41">ci<pos:position pos:line="30" pos:column="43"/></name><operator pos:line="30" pos:column="43">-&gt;<pos:position pos:line="30" pos:column="48"/></operator><name pos:line="30" pos:column="45">values<pos:position pos:line="30" pos:column="51"/></name><index pos:line="30" pos:column="51">[<expr><name pos:line="30" pos:column="52">i<pos:position pos:line="30" pos:column="53"/></name></expr>]<pos:position pos:line="30" pos:column="54"/></index></name><operator pos:line="30" pos:column="54">.<pos:position pos:line="30" pos:column="55"/></operator><name><name pos:line="30" pos:column="55">value<pos:position pos:line="30" pos:column="60"/></name><operator pos:line="30" pos:column="60">.<pos:position pos:line="30" pos:column="61"/></operator><name pos:line="30" pos:column="61">number<pos:position pos:line="30" pos:column="67"/></name></name></expr>;<pos:position pos:line="30" pos:column="68"/></expr_stmt>
		<expr_stmt><expr><operator pos:line="31" pos:column="17">(<pos:position pos:line="31" pos:column="18"/></operator><operator pos:line="31" pos:column="18">*<pos:position pos:line="31" pos:column="19"/></operator><name pos:line="31" pos:column="19">len<pos:position pos:line="31" pos:column="22"/></name><operator pos:line="31" pos:column="22">)<pos:position pos:line="31" pos:column="23"/></operator><operator pos:line="31" pos:column="23">++<pos:position pos:line="31" pos:column="25"/></operator></expr>;<pos:position pos:line="31" pos:column="26"/></expr_stmt>
	}<pos:position pos:line="32" pos:column="10"/></block></for>

	<return pos:line="34" pos:column="9">return <expr><literal type="number" pos:line="34" pos:column="16">0<pos:position pos:line="34" pos:column="17"/></literal></expr>;<pos:position pos:line="34" pos:column="18"/></return>
}<pos:position pos:line="35" pos:column="2"/></block></function></unit>
