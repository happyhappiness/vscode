<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_2586_collectd-5.6.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">stop_read_threads<pos:position pos:line="1" pos:column="30"/></name><parameter_list pos:line="1" pos:column="30">(<parameter><decl><type><name pos:line="1" pos:column="31">void<pos:position pos:line="1" pos:column="35"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="36"/></parameter_list> <block pos:line="1" pos:column="37">{
  <if pos:line="2" pos:column="3">if <condition pos:line="2" pos:column="6">(<expr><name pos:line="2" pos:column="7">read_threads<pos:position pos:line="2" pos:column="19"/></name> <operator pos:line="2" pos:column="20">==<pos:position pos:line="2" pos:column="22"/></operator> <name pos:line="2" pos:column="23">NULL<pos:position pos:line="2" pos:column="27"/></name></expr>)<pos:position pos:line="2" pos:column="28"/></condition><then pos:line="2" pos:column="28">
    <block type="pseudo"><return pos:line="3" pos:column="5">return;<pos:position pos:line="3" pos:column="12"/></return></block></then></if>

  <expr_stmt><expr><call><name pos:line="5" pos:column="3">INFO<pos:position pos:line="5" pos:column="7"/></name><argument_list pos:line="5" pos:column="7">(<argument><expr><literal type="string" pos:line="5" pos:column="8">"collectd: Stopping %i read threads."<pos:position pos:line="5" pos:column="45"/></literal></expr></argument>, <argument><expr><name pos:line="5" pos:column="47">read_threads_num<pos:position pos:line="5" pos:column="63"/></name></expr></argument>)<pos:position pos:line="5" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="65"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="7" pos:column="3">pthread_mutex_lock<pos:position pos:line="7" pos:column="21"/></name><argument_list pos:line="7" pos:column="21">(<argument><expr><operator pos:line="7" pos:column="22">&amp;<pos:position pos:line="7" pos:column="27"/></operator><name pos:line="7" pos:column="23">read_lock<pos:position pos:line="7" pos:column="32"/></name></expr></argument>)<pos:position pos:line="7" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="34"/></expr_stmt>
  <expr_stmt><expr><name pos:line="8" pos:column="3">read_loop<pos:position pos:line="8" pos:column="12"/></name> <operator pos:line="8" pos:column="13">=<pos:position pos:line="8" pos:column="14"/></operator> <literal type="number" pos:line="8" pos:column="15">0<pos:position pos:line="8" pos:column="16"/></literal></expr>;<pos:position pos:line="8" pos:column="17"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="9" pos:column="3">DEBUG<pos:position pos:line="9" pos:column="8"/></name><argument_list pos:line="9" pos:column="8">(<argument><expr><literal type="string" pos:line="9" pos:column="9">"plugin: stop_read_threads: Signalling `read_cond'"<pos:position pos:line="9" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="62"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="10" pos:column="3">pthread_cond_broadcast<pos:position pos:line="10" pos:column="25"/></name><argument_list pos:line="10" pos:column="25">(<argument><expr><operator pos:line="10" pos:column="26">&amp;<pos:position pos:line="10" pos:column="31"/></operator><name pos:line="10" pos:column="27">read_cond<pos:position pos:line="10" pos:column="36"/></name></expr></argument>)<pos:position pos:line="10" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="38"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="11" pos:column="3">pthread_mutex_unlock<pos:position pos:line="11" pos:column="23"/></name><argument_list pos:line="11" pos:column="23">(<argument><expr><operator pos:line="11" pos:column="24">&amp;<pos:position pos:line="11" pos:column="29"/></operator><name pos:line="11" pos:column="25">read_lock<pos:position pos:line="11" pos:column="34"/></name></expr></argument>)<pos:position pos:line="11" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="36"/></expr_stmt>

  <for pos:line="13" pos:column="3">for <control pos:line="13" pos:column="7">(<init><decl><type><name pos:line="13" pos:column="8">int<pos:position pos:line="13" pos:column="11"/></name></type> <name pos:line="13" pos:column="12">i<pos:position pos:line="13" pos:column="13"/></name> <init pos:line="13" pos:column="14">= <expr><literal type="number" pos:line="13" pos:column="16">0<pos:position pos:line="13" pos:column="17"/></literal></expr></init></decl>;<pos:position pos:line="13" pos:column="18"/></init> <condition><expr><name pos:line="13" pos:column="19">i<pos:position pos:line="13" pos:column="20"/></name> <operator pos:line="13" pos:column="21">&lt;<pos:position pos:line="13" pos:column="25"/></operator> <name pos:line="13" pos:column="23">read_threads_num<pos:position pos:line="13" pos:column="39"/></name></expr>;<pos:position pos:line="13" pos:column="40"/></condition> <incr><expr><name pos:line="13" pos:column="41">i<pos:position pos:line="13" pos:column="42"/></name><operator pos:line="13" pos:column="42">++<pos:position pos:line="13" pos:column="44"/></operator></expr></incr>)<pos:position pos:line="13" pos:column="45"/></control> <block pos:line="13" pos:column="46">{
    <if pos:line="14" pos:column="5">if <condition pos:line="14" pos:column="8">(<expr><call><name pos:line="14" pos:column="9">pthread_join<pos:position pos:line="14" pos:column="21"/></name><argument_list pos:line="14" pos:column="21">(<argument><expr><name><name pos:line="14" pos:column="22">read_threads<pos:position pos:line="14" pos:column="34"/></name><index pos:line="14" pos:column="34">[<expr><name pos:line="14" pos:column="35">i<pos:position pos:line="14" pos:column="36"/></name></expr>]<pos:position pos:line="14" pos:column="37"/></index></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="39">NULL<pos:position pos:line="14" pos:column="43"/></name></expr></argument>)<pos:position pos:line="14" pos:column="44"/></argument_list></call> <operator pos:line="14" pos:column="45">!=<pos:position pos:line="14" pos:column="47"/></operator> <literal type="number" pos:line="14" pos:column="48">0<pos:position pos:line="14" pos:column="49"/></literal></expr>)<pos:position pos:line="14" pos:column="50"/></condition><then pos:line="14" pos:column="50"> <block pos:line="14" pos:column="51">{
      <expr_stmt><expr><call><name pos:line="15" pos:column="7">ERROR<pos:position pos:line="15" pos:column="12"/></name><argument_list pos:line="15" pos:column="12">(<argument><expr><literal type="string" pos:line="15" pos:column="13">"plugin: stop_read_threads: pthread_join failed."<pos:position pos:line="15" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="64"/></expr_stmt>
    }<pos:position pos:line="16" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name><name pos:line="17" pos:column="5">read_threads<pos:position pos:line="17" pos:column="17"/></name><index pos:line="17" pos:column="17">[<expr><name pos:line="17" pos:column="18">i<pos:position pos:line="17" pos:column="19"/></name></expr>]<pos:position pos:line="17" pos:column="20"/></index></name> <operator pos:line="17" pos:column="21">=<pos:position pos:line="17" pos:column="22"/></operator> <operator pos:line="17" pos:column="23">(<pos:position pos:line="17" pos:column="24"/></operator><name pos:line="17" pos:column="24">pthread_t<pos:position pos:line="17" pos:column="33"/></name><operator pos:line="17" pos:column="33">)<pos:position pos:line="17" pos:column="34"/></operator><literal type="number" pos:line="17" pos:column="34">0<pos:position pos:line="17" pos:column="35"/></literal></expr>;<pos:position pos:line="17" pos:column="36"/></expr_stmt>
  }<pos:position pos:line="18" pos:column="4"/></block></for>
  <expr_stmt><expr><call><name pos:line="19" pos:column="3">sfree<pos:position pos:line="19" pos:column="8"/></name><argument_list pos:line="19" pos:column="8">(<argument><expr><name pos:line="19" pos:column="9">read_threads<pos:position pos:line="19" pos:column="21"/></name></expr></argument>)<pos:position pos:line="19" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="23"/></expr_stmt>
  <expr_stmt><expr><name pos:line="20" pos:column="3">read_threads_num<pos:position pos:line="20" pos:column="19"/></name> <operator pos:line="20" pos:column="20">=<pos:position pos:line="20" pos:column="21"/></operator> <literal type="number" pos:line="20" pos:column="22">0<pos:position pos:line="20" pos:column="23"/></literal></expr>;<pos:position pos:line="20" pos:column="24"/></expr_stmt>
}<pos:position pos:line="21" pos:column="2"/></block></function></unit>
