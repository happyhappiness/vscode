<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1453_collectd-4.9.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">cpy_config<pos:position pos:line="1" pos:column="22"/></name><parameter_list pos:line="1" pos:column="22">(<parameter><decl><type><name pos:line="1" pos:column="23">oconfig_item_t<pos:position pos:line="1" pos:column="37"/></name> <modifier pos:line="1" pos:column="38">*<pos:position pos:line="1" pos:column="39"/></modifier></type><name pos:line="1" pos:column="39">ci<pos:position pos:line="1" pos:column="41"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="42"/></parameter_list> <block pos:line="1" pos:column="43">{
	<decl_stmt><decl><type><name pos:line="2" pos:column="9">int<pos:position pos:line="2" pos:column="12"/></name></type> <name pos:line="2" pos:column="13">i<pos:position pos:line="2" pos:column="14"/></name></decl>;<pos:position pos:line="2" pos:column="15"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">PyObject<pos:position pos:line="3" pos:column="17"/></name> <modifier pos:line="3" pos:column="18">*<pos:position pos:line="3" pos:column="19"/></modifier></type><name pos:line="3" pos:column="19">sys<pos:position pos:line="3" pos:column="22"/></name></decl>, <modifier pos:line="3" pos:column="24">*<pos:position pos:line="3" pos:column="25"/></modifier><decl><type ref="prev"/><name pos:line="3" pos:column="25">tb<pos:position pos:line="3" pos:column="27"/></name></decl>;<pos:position pos:line="3" pos:column="28"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">PyObject<pos:position pos:line="4" pos:column="17"/></name> <modifier pos:line="4" pos:column="18">*<pos:position pos:line="4" pos:column="19"/></modifier></type><name pos:line="4" pos:column="19">sys_path<pos:position pos:line="4" pos:column="27"/></name></decl>;<pos:position pos:line="4" pos:column="28"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">PyObject<pos:position pos:line="5" pos:column="17"/></name> <modifier pos:line="5" pos:column="18">*<pos:position pos:line="5" pos:column="19"/></modifier></type><name pos:line="5" pos:column="19">module<pos:position pos:line="5" pos:column="25"/></name></decl>;<pos:position pos:line="5" pos:column="26"/></decl_stmt>
	
	<comment type="block" pos:line="7" pos:column="9">/* Ok in theory we shouldn't do initialization at this point
	 * but we have to. In order to give python scripts a chance
	 * to register a config callback we need to be able to execute
	 * python code during the config callback so we have to start
	 * the interpreter here. */</comment>
	<comment type="block" pos:line="12" pos:column="9">/* Do *not* use the python "thread" module at this point! */</comment>
	<expr_stmt><expr><call><name pos:line="13" pos:column="9">Py_Initialize<pos:position pos:line="13" pos:column="22"/></name><argument_list pos:line="13" pos:column="22">()<pos:position pos:line="13" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="25"/></expr_stmt>
	
	<expr_stmt><expr><call><name pos:line="15" pos:column="9">PyType_Ready<pos:position pos:line="15" pos:column="21"/></name><argument_list pos:line="15" pos:column="21">(<argument><expr><operator pos:line="15" pos:column="22">&amp;<pos:position pos:line="15" pos:column="27"/></operator><name pos:line="15" pos:column="23">ConfigType<pos:position pos:line="15" pos:column="33"/></name></expr></argument>)<pos:position pos:line="15" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="35"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="16" pos:column="9">PyType_Ready<pos:position pos:line="16" pos:column="21"/></name><argument_list pos:line="16" pos:column="21">(<argument><expr><operator pos:line="16" pos:column="22">&amp;<pos:position pos:line="16" pos:column="27"/></operator><name pos:line="16" pos:column="23">PluginDataType<pos:position pos:line="16" pos:column="37"/></name></expr></argument>)<pos:position pos:line="16" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="39"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="17" pos:column="9">ValuesType<pos:position pos:line="17" pos:column="19"/></name><operator pos:line="17" pos:column="19">.<pos:position pos:line="17" pos:column="20"/></operator><name pos:line="17" pos:column="20">tp_base<pos:position pos:line="17" pos:column="27"/></name></name> <operator pos:line="17" pos:column="28">=<pos:position pos:line="17" pos:column="29"/></operator> <operator pos:line="17" pos:column="30">&amp;<pos:position pos:line="17" pos:column="35"/></operator><name pos:line="17" pos:column="31">PluginDataType<pos:position pos:line="17" pos:column="45"/></name></expr>;<pos:position pos:line="17" pos:column="46"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="18" pos:column="9">PyType_Ready<pos:position pos:line="18" pos:column="21"/></name><argument_list pos:line="18" pos:column="21">(<argument><expr><operator pos:line="18" pos:column="22">&amp;<pos:position pos:line="18" pos:column="27"/></operator><name pos:line="18" pos:column="23">ValuesType<pos:position pos:line="18" pos:column="33"/></name></expr></argument>)<pos:position pos:line="18" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="35"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="19" pos:column="9">NotificationType<pos:position pos:line="19" pos:column="25"/></name><operator pos:line="19" pos:column="25">.<pos:position pos:line="19" pos:column="26"/></operator><name pos:line="19" pos:column="26">tp_base<pos:position pos:line="19" pos:column="33"/></name></name> <operator pos:line="19" pos:column="34">=<pos:position pos:line="19" pos:column="35"/></operator> <operator pos:line="19" pos:column="36">&amp;<pos:position pos:line="19" pos:column="41"/></operator><name pos:line="19" pos:column="37">PluginDataType<pos:position pos:line="19" pos:column="51"/></name></expr>;<pos:position pos:line="19" pos:column="52"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="20" pos:column="9">PyType_Ready<pos:position pos:line="20" pos:column="21"/></name><argument_list pos:line="20" pos:column="21">(<argument><expr><operator pos:line="20" pos:column="22">&amp;<pos:position pos:line="20" pos:column="27"/></operator><name pos:line="20" pos:column="23">NotificationType<pos:position pos:line="20" pos:column="39"/></name></expr></argument>)<pos:position pos:line="20" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="41"/></expr_stmt>
	<expr_stmt><expr><name pos:line="21" pos:column="9">sys<pos:position pos:line="21" pos:column="12"/></name> <operator pos:line="21" pos:column="13">=<pos:position pos:line="21" pos:column="14"/></operator> <call><name pos:line="21" pos:column="15">PyImport_ImportModule<pos:position pos:line="21" pos:column="36"/></name><argument_list pos:line="21" pos:column="36">(<argument><expr><literal type="string" pos:line="21" pos:column="37">"sys"<pos:position pos:line="21" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="44"/></expr_stmt> <comment type="block" pos:line="21" pos:column="45">/* New reference. */</comment>
	<if pos:line="22" pos:column="9">if <condition pos:line="22" pos:column="12">(<expr><name pos:line="22" pos:column="13">sys<pos:position pos:line="22" pos:column="16"/></name> <operator pos:line="22" pos:column="17">==<pos:position pos:line="22" pos:column="19"/></operator> <name pos:line="22" pos:column="20">NULL<pos:position pos:line="22" pos:column="24"/></name></expr>)<pos:position pos:line="22" pos:column="25"/></condition><then pos:line="22" pos:column="25"> <block pos:line="22" pos:column="26">{
		<expr_stmt><expr><call><name pos:line="23" pos:column="17">cpy_log_exception<pos:position pos:line="23" pos:column="34"/></name><argument_list pos:line="23" pos:column="34">(<argument><expr><literal type="string" pos:line="23" pos:column="35">"python initialization"<pos:position pos:line="23" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="60"/></expr_stmt>
		<return pos:line="24" pos:column="17">return <expr><literal type="number" pos:line="24" pos:column="24">1<pos:position pos:line="24" pos:column="25"/></literal></expr>;<pos:position pos:line="24" pos:column="26"/></return>
	}<pos:position pos:line="25" pos:column="10"/></block></then></if>
	<expr_stmt><expr><name pos:line="26" pos:column="9">sys_path<pos:position pos:line="26" pos:column="17"/></name> <operator pos:line="26" pos:column="18">=<pos:position pos:line="26" pos:column="19"/></operator> <call><name pos:line="26" pos:column="20">PyObject_GetAttrString<pos:position pos:line="26" pos:column="42"/></name><argument_list pos:line="26" pos:column="42">(<argument><expr><name pos:line="26" pos:column="43">sys<pos:position pos:line="26" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="26" pos:column="48">"path"<pos:position pos:line="26" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="56"/></expr_stmt> <comment type="block" pos:line="26" pos:column="57">/* New reference. */</comment>
	<expr_stmt><expr><call><name pos:line="27" pos:column="9">Py_DECREF<pos:position pos:line="27" pos:column="18"/></name><argument_list pos:line="27" pos:column="18">(<argument><expr><name pos:line="27" pos:column="19">sys<pos:position pos:line="27" pos:column="22"/></name></expr></argument>)<pos:position pos:line="27" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="24"/></expr_stmt>
	<if pos:line="28" pos:column="9">if <condition pos:line="28" pos:column="12">(<expr><name pos:line="28" pos:column="13">sys_path<pos:position pos:line="28" pos:column="21"/></name> <operator pos:line="28" pos:column="22">==<pos:position pos:line="28" pos:column="24"/></operator> <name pos:line="28" pos:column="25">NULL<pos:position pos:line="28" pos:column="29"/></name></expr>)<pos:position pos:line="28" pos:column="30"/></condition><then pos:line="28" pos:column="30"> <block pos:line="28" pos:column="31">{
		<expr_stmt><expr><call><name pos:line="29" pos:column="17">cpy_log_exception<pos:position pos:line="29" pos:column="34"/></name><argument_list pos:line="29" pos:column="34">(<argument><expr><literal type="string" pos:line="29" pos:column="35">"python initialization"<pos:position pos:line="29" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="60"/></expr_stmt>
		<return pos:line="30" pos:column="17">return <expr><literal type="number" pos:line="30" pos:column="24">1<pos:position pos:line="30" pos:column="25"/></literal></expr>;<pos:position pos:line="30" pos:column="26"/></return>
	}<pos:position pos:line="31" pos:column="10"/></block></then></if>
	<expr_stmt><expr><name pos:line="32" pos:column="9">module<pos:position pos:line="32" pos:column="15"/></name> <operator pos:line="32" pos:column="16">=<pos:position pos:line="32" pos:column="17"/></operator> <call><name pos:line="32" pos:column="18">Py_InitModule<pos:position pos:line="32" pos:column="31"/></name><argument_list pos:line="32" pos:column="31">(<argument><expr><literal type="string" pos:line="32" pos:column="32">"collectd"<pos:position pos:line="32" pos:column="42"/></literal></expr></argument>, <argument><expr><name pos:line="32" pos:column="44">cpy_methods<pos:position pos:line="32" pos:column="55"/></name></expr></argument>)<pos:position pos:line="32" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="57"/></expr_stmt> <comment type="block" pos:line="32" pos:column="58">/* Borrowed reference. */</comment>
	<expr_stmt><expr><call><name pos:line="33" pos:column="9">PyModule_AddObject<pos:position pos:line="33" pos:column="27"/></name><argument_list pos:line="33" pos:column="27">(<argument><expr><name pos:line="33" pos:column="28">module<pos:position pos:line="33" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="33" pos:column="36">"Config"<pos:position pos:line="33" pos:column="44"/></literal></expr></argument>, <argument><expr><operator pos:line="33" pos:column="46">(<pos:position pos:line="33" pos:column="47"/></operator><name pos:line="33" pos:column="47">void<pos:position pos:line="33" pos:column="51"/></name> <operator pos:line="33" pos:column="52">*<pos:position pos:line="33" pos:column="53"/></operator><operator pos:line="33" pos:column="53">)<pos:position pos:line="33" pos:column="54"/></operator> <operator pos:line="33" pos:column="55">&amp;<pos:position pos:line="33" pos:column="60"/></operator><name pos:line="33" pos:column="56">ConfigType<pos:position pos:line="33" pos:column="66"/></name></expr></argument>)<pos:position pos:line="33" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="68"/></expr_stmt> <comment type="block" pos:line="33" pos:column="69">/* Steals a reference. */</comment>
	<expr_stmt><expr><call><name pos:line="34" pos:column="9">PyModule_AddObject<pos:position pos:line="34" pos:column="27"/></name><argument_list pos:line="34" pos:column="27">(<argument><expr><name pos:line="34" pos:column="28">module<pos:position pos:line="34" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="34" pos:column="36">"Values"<pos:position pos:line="34" pos:column="44"/></literal></expr></argument>, <argument><expr><operator pos:line="34" pos:column="46">(<pos:position pos:line="34" pos:column="47"/></operator><name pos:line="34" pos:column="47">void<pos:position pos:line="34" pos:column="51"/></name> <operator pos:line="34" pos:column="52">*<pos:position pos:line="34" pos:column="53"/></operator><operator pos:line="34" pos:column="53">)<pos:position pos:line="34" pos:column="54"/></operator> <operator pos:line="34" pos:column="55">&amp;<pos:position pos:line="34" pos:column="60"/></operator><name pos:line="34" pos:column="56">ValuesType<pos:position pos:line="34" pos:column="66"/></name></expr></argument>)<pos:position pos:line="34" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="68"/></expr_stmt> <comment type="block" pos:line="34" pos:column="69">/* Steals a reference. */</comment>
	<expr_stmt><expr><call><name pos:line="35" pos:column="9">PyModule_AddObject<pos:position pos:line="35" pos:column="27"/></name><argument_list pos:line="35" pos:column="27">(<argument><expr><name pos:line="35" pos:column="28">module<pos:position pos:line="35" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="35" pos:column="36">"Notification"<pos:position pos:line="35" pos:column="50"/></literal></expr></argument>, <argument><expr><operator pos:line="35" pos:column="52">(<pos:position pos:line="35" pos:column="53"/></operator><name pos:line="35" pos:column="53">void<pos:position pos:line="35" pos:column="57"/></name> <operator pos:line="35" pos:column="58">*<pos:position pos:line="35" pos:column="59"/></operator><operator pos:line="35" pos:column="59">)<pos:position pos:line="35" pos:column="60"/></operator> <operator pos:line="35" pos:column="61">&amp;<pos:position pos:line="35" pos:column="66"/></operator><name pos:line="35" pos:column="62">NotificationType<pos:position pos:line="35" pos:column="78"/></name></expr></argument>)<pos:position pos:line="35" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="80"/></expr_stmt> <comment type="block" pos:line="35" pos:column="81">/* Steals a reference. */</comment>
	<expr_stmt><expr><call><name pos:line="36" pos:column="9">PyModule_AddIntConstant<pos:position pos:line="36" pos:column="32"/></name><argument_list pos:line="36" pos:column="32">(<argument><expr><name pos:line="36" pos:column="33">module<pos:position pos:line="36" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="36" pos:column="41">"LOG_DEBUG"<pos:position pos:line="36" pos:column="52"/></literal></expr></argument>, <argument><expr><name pos:line="36" pos:column="54">LOG_DEBUG<pos:position pos:line="36" pos:column="63"/></name></expr></argument>)<pos:position pos:line="36" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="65"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="37" pos:column="9">PyModule_AddIntConstant<pos:position pos:line="37" pos:column="32"/></name><argument_list pos:line="37" pos:column="32">(<argument><expr><name pos:line="37" pos:column="33">module<pos:position pos:line="37" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="37" pos:column="41">"LOG_INFO"<pos:position pos:line="37" pos:column="51"/></literal></expr></argument>, <argument><expr><name pos:line="37" pos:column="53">LOG_INFO<pos:position pos:line="37" pos:column="61"/></name></expr></argument>)<pos:position pos:line="37" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="63"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="38" pos:column="9">PyModule_AddIntConstant<pos:position pos:line="38" pos:column="32"/></name><argument_list pos:line="38" pos:column="32">(<argument><expr><name pos:line="38" pos:column="33">module<pos:position pos:line="38" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="38" pos:column="41">"LOG_NOTICE"<pos:position pos:line="38" pos:column="53"/></literal></expr></argument>, <argument><expr><name pos:line="38" pos:column="55">LOG_NOTICE<pos:position pos:line="38" pos:column="65"/></name></expr></argument>)<pos:position pos:line="38" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="67"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="39" pos:column="9">PyModule_AddIntConstant<pos:position pos:line="39" pos:column="32"/></name><argument_list pos:line="39" pos:column="32">(<argument><expr><name pos:line="39" pos:column="33">module<pos:position pos:line="39" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="39" pos:column="41">"LOG_WARNING"<pos:position pos:line="39" pos:column="54"/></literal></expr></argument>, <argument><expr><name pos:line="39" pos:column="56">LOG_WARNING<pos:position pos:line="39" pos:column="67"/></name></expr></argument>)<pos:position pos:line="39" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="69"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="40" pos:column="9">PyModule_AddIntConstant<pos:position pos:line="40" pos:column="32"/></name><argument_list pos:line="40" pos:column="32">(<argument><expr><name pos:line="40" pos:column="33">module<pos:position pos:line="40" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="40" pos:column="41">"LOG_ERROR"<pos:position pos:line="40" pos:column="52"/></literal></expr></argument>, <argument><expr><name pos:line="40" pos:column="54">LOG_ERR<pos:position pos:line="40" pos:column="61"/></name></expr></argument>)<pos:position pos:line="40" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="63"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="41" pos:column="9">PyModule_AddIntConstant<pos:position pos:line="41" pos:column="32"/></name><argument_list pos:line="41" pos:column="32">(<argument><expr><name pos:line="41" pos:column="33">module<pos:position pos:line="41" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="41" pos:column="41">"NOTIF_FAILURE"<pos:position pos:line="41" pos:column="56"/></literal></expr></argument>, <argument><expr><name pos:line="41" pos:column="58">NOTIF_FAILURE<pos:position pos:line="41" pos:column="71"/></name></expr></argument>)<pos:position pos:line="41" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="73"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="42" pos:column="9">PyModule_AddIntConstant<pos:position pos:line="42" pos:column="32"/></name><argument_list pos:line="42" pos:column="32">(<argument><expr><name pos:line="42" pos:column="33">module<pos:position pos:line="42" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="42" pos:column="41">"NOTIF_WARNING"<pos:position pos:line="42" pos:column="56"/></literal></expr></argument>, <argument><expr><name pos:line="42" pos:column="58">NOTIF_WARNING<pos:position pos:line="42" pos:column="71"/></name></expr></argument>)<pos:position pos:line="42" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="73"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="43" pos:column="9">PyModule_AddIntConstant<pos:position pos:line="43" pos:column="32"/></name><argument_list pos:line="43" pos:column="32">(<argument><expr><name pos:line="43" pos:column="33">module<pos:position pos:line="43" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="43" pos:column="41">"NOTIF_OKAY"<pos:position pos:line="43" pos:column="53"/></literal></expr></argument>, <argument><expr><name pos:line="43" pos:column="55">NOTIF_OKAY<pos:position pos:line="43" pos:column="65"/></name></expr></argument>)<pos:position pos:line="43" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="67"/></expr_stmt>
	<for pos:line="44" pos:column="9">for <control pos:line="44" pos:column="13">(<init><expr><name pos:line="44" pos:column="14">i<pos:position pos:line="44" pos:column="15"/></name> <operator pos:line="44" pos:column="16">=<pos:position pos:line="44" pos:column="17"/></operator> <literal type="number" pos:line="44" pos:column="18">0<pos:position pos:line="44" pos:column="19"/></literal></expr>;<pos:position pos:line="44" pos:column="20"/></init> <condition><expr><name pos:line="44" pos:column="21">i<pos:position pos:line="44" pos:column="22"/></name> <operator pos:line="44" pos:column="23">&lt;<pos:position pos:line="44" pos:column="27"/></operator> <name><name pos:line="44" pos:column="25">ci<pos:position pos:line="44" pos:column="27"/></name><operator pos:line="44" pos:column="27">-&gt;<pos:position pos:line="44" pos:column="32"/></operator><name pos:line="44" pos:column="29">children_num<pos:position pos:line="44" pos:column="41"/></name></name></expr>;<pos:position pos:line="44" pos:column="42"/></condition> <incr><expr><operator pos:line="44" pos:column="43">++<pos:position pos:line="44" pos:column="45"/></operator><name pos:line="44" pos:column="45">i<pos:position pos:line="44" pos:column="46"/></name></expr></incr>)<pos:position pos:line="44" pos:column="47"/></control> <block pos:line="44" pos:column="48">{
		<decl_stmt><decl><type><name pos:line="45" pos:column="17">oconfig_item_t<pos:position pos:line="45" pos:column="31"/></name> <modifier pos:line="45" pos:column="32">*<pos:position pos:line="45" pos:column="33"/></modifier></type><name pos:line="45" pos:column="33">item<pos:position pos:line="45" pos:column="37"/></name> <init pos:line="45" pos:column="38">= <expr><name><name pos:line="45" pos:column="40">ci<pos:position pos:line="45" pos:column="42"/></name><operator pos:line="45" pos:column="42">-&gt;<pos:position pos:line="45" pos:column="47"/></operator><name pos:line="45" pos:column="44">children<pos:position pos:line="45" pos:column="52"/></name></name> <operator pos:line="45" pos:column="53">+<pos:position pos:line="45" pos:column="54"/></operator> <name pos:line="45" pos:column="55">i<pos:position pos:line="45" pos:column="56"/></name></expr></init></decl>;<pos:position pos:line="45" pos:column="57"/></decl_stmt>
		
		<if pos:line="47" pos:column="17">if <condition pos:line="47" pos:column="20">(<expr><call><name pos:line="47" pos:column="21">strcasecmp<pos:position pos:line="47" pos:column="31"/></name><argument_list pos:line="47" pos:column="31">(<argument><expr><name><name pos:line="47" pos:column="32">item<pos:position pos:line="47" pos:column="36"/></name><operator pos:line="47" pos:column="36">-&gt;<pos:position pos:line="47" pos:column="41"/></operator><name pos:line="47" pos:column="38">key<pos:position pos:line="47" pos:column="41"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="47" pos:column="43">"Interactive"<pos:position pos:line="47" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="47" pos:column="57"/></argument_list></call> <operator pos:line="47" pos:column="58">==<pos:position pos:line="47" pos:column="60"/></operator> <literal type="number" pos:line="47" pos:column="61">0<pos:position pos:line="47" pos:column="62"/></literal></expr>)<pos:position pos:line="47" pos:column="63"/></condition><then pos:line="47" pos:column="63"> <block pos:line="47" pos:column="64">{
			<if pos:line="48" pos:column="25">if <condition pos:line="48" pos:column="28">(<expr><name><name pos:line="48" pos:column="29">item<pos:position pos:line="48" pos:column="33"/></name><operator pos:line="48" pos:column="33">-&gt;<pos:position pos:line="48" pos:column="38"/></operator><name pos:line="48" pos:column="35">values_num<pos:position pos:line="48" pos:column="45"/></name></name> <operator pos:line="48" pos:column="46">!=<pos:position pos:line="48" pos:column="48"/></operator> <literal type="number" pos:line="48" pos:column="49">1<pos:position pos:line="48" pos:column="50"/></literal> <operator pos:line="48" pos:column="51">||<pos:position pos:line="48" pos:column="53"/></operator> <name><name pos:line="48" pos:column="54">item<pos:position pos:line="48" pos:column="58"/></name><operator pos:line="48" pos:column="58">-&gt;<pos:position pos:line="48" pos:column="63"/></operator><name pos:line="48" pos:column="60">values<pos:position pos:line="48" pos:column="66"/></name><index pos:line="48" pos:column="66">[<expr><literal type="number" pos:line="48" pos:column="67">0<pos:position pos:line="48" pos:column="68"/></literal></expr>]<pos:position pos:line="48" pos:column="69"/></index></name><operator pos:line="48" pos:column="69">.<pos:position pos:line="48" pos:column="70"/></operator><name pos:line="48" pos:column="70">type<pos:position pos:line="48" pos:column="74"/></name> <operator pos:line="48" pos:column="75">!=<pos:position pos:line="48" pos:column="77"/></operator> <name pos:line="48" pos:column="78">OCONFIG_TYPE_BOOLEAN<pos:position pos:line="48" pos:column="98"/></name></expr>)<pos:position pos:line="48" pos:column="99"/></condition><then pos:line="48" pos:column="99">
				<block type="pseudo"><continue pos:line="49" pos:column="33">continue;<pos:position pos:line="49" pos:column="42"/></continue></block></then></if>
			<expr_stmt><expr><name pos:line="50" pos:column="25">do_interactive<pos:position pos:line="50" pos:column="39"/></name> <operator pos:line="50" pos:column="40">=<pos:position pos:line="50" pos:column="41"/></operator> <name><name pos:line="50" pos:column="42">item<pos:position pos:line="50" pos:column="46"/></name><operator pos:line="50" pos:column="46">-&gt;<pos:position pos:line="50" pos:column="51"/></operator><name pos:line="50" pos:column="48">values<pos:position pos:line="50" pos:column="54"/></name><index pos:line="50" pos:column="54">[<expr><literal type="number" pos:line="50" pos:column="55">0<pos:position pos:line="50" pos:column="56"/></literal></expr>]<pos:position pos:line="50" pos:column="57"/></index></name><operator pos:line="50" pos:column="57">.<pos:position pos:line="50" pos:column="58"/></operator><name><name pos:line="50" pos:column="58">value<pos:position pos:line="50" pos:column="63"/></name><operator pos:line="50" pos:column="63">.<pos:position pos:line="50" pos:column="64"/></operator><name pos:line="50" pos:column="64">boolean<pos:position pos:line="50" pos:column="71"/></name></name></expr>;<pos:position pos:line="50" pos:column="72"/></expr_stmt>
		}<pos:position pos:line="51" pos:column="18"/></block></then> <elseif pos:line="51" pos:column="19">else <if pos:line="51" pos:column="24">if <condition pos:line="51" pos:column="27">(<expr><call><name pos:line="51" pos:column="28">strcasecmp<pos:position pos:line="51" pos:column="38"/></name><argument_list pos:line="51" pos:column="38">(<argument><expr><name><name pos:line="51" pos:column="39">item<pos:position pos:line="51" pos:column="43"/></name><operator pos:line="51" pos:column="43">-&gt;<pos:position pos:line="51" pos:column="48"/></operator><name pos:line="51" pos:column="45">key<pos:position pos:line="51" pos:column="48"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="51" pos:column="50">"Encoding"<pos:position pos:line="51" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="51" pos:column="61"/></argument_list></call> <operator pos:line="51" pos:column="62">==<pos:position pos:line="51" pos:column="64"/></operator> <literal type="number" pos:line="51" pos:column="65">0<pos:position pos:line="51" pos:column="66"/></literal></expr>)<pos:position pos:line="51" pos:column="67"/></condition><then pos:line="51" pos:column="67"> <block pos:line="51" pos:column="68">{
			<if pos:line="52" pos:column="25">if <condition pos:line="52" pos:column="28">(<expr><name><name pos:line="52" pos:column="29">item<pos:position pos:line="52" pos:column="33"/></name><operator pos:line="52" pos:column="33">-&gt;<pos:position pos:line="52" pos:column="38"/></operator><name pos:line="52" pos:column="35">values_num<pos:position pos:line="52" pos:column="45"/></name></name> <operator pos:line="52" pos:column="46">!=<pos:position pos:line="52" pos:column="48"/></operator> <literal type="number" pos:line="52" pos:column="49">1<pos:position pos:line="52" pos:column="50"/></literal> <operator pos:line="52" pos:column="51">||<pos:position pos:line="52" pos:column="53"/></operator> <name><name pos:line="52" pos:column="54">item<pos:position pos:line="52" pos:column="58"/></name><operator pos:line="52" pos:column="58">-&gt;<pos:position pos:line="52" pos:column="63"/></operator><name pos:line="52" pos:column="60">values<pos:position pos:line="52" pos:column="66"/></name><index pos:line="52" pos:column="66">[<expr><literal type="number" pos:line="52" pos:column="67">0<pos:position pos:line="52" pos:column="68"/></literal></expr>]<pos:position pos:line="52" pos:column="69"/></index></name><operator pos:line="52" pos:column="69">.<pos:position pos:line="52" pos:column="70"/></operator><name pos:line="52" pos:column="70">type<pos:position pos:line="52" pos:column="74"/></name> <operator pos:line="52" pos:column="75">!=<pos:position pos:line="52" pos:column="77"/></operator> <name pos:line="52" pos:column="78">OCONFIG_TYPE_STRING<pos:position pos:line="52" pos:column="97"/></name></expr>)<pos:position pos:line="52" pos:column="98"/></condition><then pos:line="52" pos:column="98">
				<block type="pseudo"><continue pos:line="53" pos:column="33">continue;<pos:position pos:line="53" pos:column="42"/></continue></block></then></if>
			<comment type="block" pos:line="54" pos:column="25">/* Why is this even necessary? And undocumented? */</comment>
			<if pos:line="55" pos:column="25">if <condition pos:line="55" pos:column="28">(<expr><call><name pos:line="55" pos:column="29">PyUnicode_SetDefaultEncoding<pos:position pos:line="55" pos:column="57"/></name><argument_list pos:line="55" pos:column="57">(<argument><expr><name><name pos:line="55" pos:column="58">item<pos:position pos:line="55" pos:column="62"/></name><operator pos:line="55" pos:column="62">-&gt;<pos:position pos:line="55" pos:column="67"/></operator><name pos:line="55" pos:column="64">values<pos:position pos:line="55" pos:column="70"/></name><index pos:line="55" pos:column="70">[<expr><literal type="number" pos:line="55" pos:column="71">0<pos:position pos:line="55" pos:column="72"/></literal></expr>]<pos:position pos:line="55" pos:column="73"/></index></name><operator pos:line="55" pos:column="73">.<pos:position pos:line="55" pos:column="74"/></operator><name><name pos:line="55" pos:column="74">value<pos:position pos:line="55" pos:column="79"/></name><operator pos:line="55" pos:column="79">.<pos:position pos:line="55" pos:column="80"/></operator><name pos:line="55" pos:column="80">string<pos:position pos:line="55" pos:column="86"/></name></name></expr></argument>)<pos:position pos:line="55" pos:column="87"/></argument_list></call></expr>)<pos:position pos:line="55" pos:column="88"/></condition><then pos:line="55" pos:column="88">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="56" pos:column="33">cpy_log_exception<pos:position pos:line="56" pos:column="50"/></name><argument_list pos:line="56" pos:column="50">(<argument><expr><literal type="string" pos:line="56" pos:column="51">"setting default encoding"<pos:position pos:line="56" pos:column="77"/></literal></expr></argument>)<pos:position pos:line="56" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="79"/></expr_stmt></block></then></if>
		}<pos:position pos:line="57" pos:column="18"/></block></then></if></elseif> <elseif pos:line="57" pos:column="19">else <if pos:line="57" pos:column="24">if <condition pos:line="57" pos:column="27">(<expr><call><name pos:line="57" pos:column="28">strcasecmp<pos:position pos:line="57" pos:column="38"/></name><argument_list pos:line="57" pos:column="38">(<argument><expr><name><name pos:line="57" pos:column="39">item<pos:position pos:line="57" pos:column="43"/></name><operator pos:line="57" pos:column="43">-&gt;<pos:position pos:line="57" pos:column="48"/></operator><name pos:line="57" pos:column="45">key<pos:position pos:line="57" pos:column="48"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="57" pos:column="50">"LogTraces"<pos:position pos:line="57" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="57" pos:column="62"/></argument_list></call> <operator pos:line="57" pos:column="63">==<pos:position pos:line="57" pos:column="65"/></operator> <literal type="number" pos:line="57" pos:column="66">0<pos:position pos:line="57" pos:column="67"/></literal></expr>)<pos:position pos:line="57" pos:column="68"/></condition><then pos:line="57" pos:column="68"> <block pos:line="57" pos:column="69">{
			<if pos:line="58" pos:column="25">if <condition pos:line="58" pos:column="28">(<expr><name><name pos:line="58" pos:column="29">item<pos:position pos:line="58" pos:column="33"/></name><operator pos:line="58" pos:column="33">-&gt;<pos:position pos:line="58" pos:column="38"/></operator><name pos:line="58" pos:column="35">values_num<pos:position pos:line="58" pos:column="45"/></name></name> <operator pos:line="58" pos:column="46">!=<pos:position pos:line="58" pos:column="48"/></operator> <literal type="number" pos:line="58" pos:column="49">1<pos:position pos:line="58" pos:column="50"/></literal> <operator pos:line="58" pos:column="51">||<pos:position pos:line="58" pos:column="53"/></operator> <name><name pos:line="58" pos:column="54">item<pos:position pos:line="58" pos:column="58"/></name><operator pos:line="58" pos:column="58">-&gt;<pos:position pos:line="58" pos:column="63"/></operator><name pos:line="58" pos:column="60">values<pos:position pos:line="58" pos:column="66"/></name><index pos:line="58" pos:column="66">[<expr><literal type="number" pos:line="58" pos:column="67">0<pos:position pos:line="58" pos:column="68"/></literal></expr>]<pos:position pos:line="58" pos:column="69"/></index></name><operator pos:line="58" pos:column="69">.<pos:position pos:line="58" pos:column="70"/></operator><name pos:line="58" pos:column="70">type<pos:position pos:line="58" pos:column="74"/></name> <operator pos:line="58" pos:column="75">!=<pos:position pos:line="58" pos:column="77"/></operator> <name pos:line="58" pos:column="78">OCONFIG_TYPE_BOOLEAN<pos:position pos:line="58" pos:column="98"/></name></expr>)<pos:position pos:line="58" pos:column="99"/></condition><then pos:line="58" pos:column="99">
				<block type="pseudo"><continue pos:line="59" pos:column="33">continue;<pos:position pos:line="59" pos:column="42"/></continue></block></then></if>
			<if pos:line="60" pos:column="25">if <condition pos:line="60" pos:column="28">(<expr><operator pos:line="60" pos:column="29">!<pos:position pos:line="60" pos:column="30"/></operator><name><name pos:line="60" pos:column="30">item<pos:position pos:line="60" pos:column="34"/></name><operator pos:line="60" pos:column="34">-&gt;<pos:position pos:line="60" pos:column="39"/></operator><name pos:line="60" pos:column="36">values<pos:position pos:line="60" pos:column="42"/></name><index pos:line="60" pos:column="42">[<expr><literal type="number" pos:line="60" pos:column="43">0<pos:position pos:line="60" pos:column="44"/></literal></expr>]<pos:position pos:line="60" pos:column="45"/></index></name><operator pos:line="60" pos:column="45">.<pos:position pos:line="60" pos:column="46"/></operator><name><name pos:line="60" pos:column="46">value<pos:position pos:line="60" pos:column="51"/></name><operator pos:line="60" pos:column="51">.<pos:position pos:line="60" pos:column="52"/></operator><name pos:line="60" pos:column="52">boolean<pos:position pos:line="60" pos:column="59"/></name></name></expr>)<pos:position pos:line="60" pos:column="60"/></condition><then pos:line="60" pos:column="60"> <block pos:line="60" pos:column="61">{
				<expr_stmt><expr><call><name pos:line="61" pos:column="33">Py_XDECREF<pos:position pos:line="61" pos:column="43"/></name><argument_list pos:line="61" pos:column="43">(<argument><expr><name pos:line="61" pos:column="44">cpy_format_exception<pos:position pos:line="61" pos:column="64"/></name></expr></argument>)<pos:position pos:line="61" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="66"/></expr_stmt>
				<expr_stmt><expr><name pos:line="62" pos:column="33">cpy_format_exception<pos:position pos:line="62" pos:column="53"/></name> <operator pos:line="62" pos:column="54">=<pos:position pos:line="62" pos:column="55"/></operator> <name pos:line="62" pos:column="56">NULL<pos:position pos:line="62" pos:column="60"/></name></expr>;<pos:position pos:line="62" pos:column="61"/></expr_stmt>
				<continue pos:line="63" pos:column="33">continue;<pos:position pos:line="63" pos:column="42"/></continue>
			}<pos:position pos:line="64" pos:column="26"/></block></then></if>
			<if pos:line="65" pos:column="25">if <condition pos:line="65" pos:column="28">(<expr><name pos:line="65" pos:column="29">cpy_format_exception<pos:position pos:line="65" pos:column="49"/></name></expr>)<pos:position pos:line="65" pos:column="50"/></condition><then pos:line="65" pos:column="50">
				<block type="pseudo"><continue pos:line="66" pos:column="33">continue;<pos:position pos:line="66" pos:column="42"/></continue></block></then></if>
			<expr_stmt><expr><name pos:line="67" pos:column="25">tb<pos:position pos:line="67" pos:column="27"/></name> <operator pos:line="67" pos:column="28">=<pos:position pos:line="67" pos:column="29"/></operator> <call><name pos:line="67" pos:column="30">PyImport_ImportModule<pos:position pos:line="67" pos:column="51"/></name><argument_list pos:line="67" pos:column="51">(<argument><expr><literal type="string" pos:line="67" pos:column="52">"traceback"<pos:position pos:line="67" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="67" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="65"/></expr_stmt> <comment type="block" pos:line="67" pos:column="66">/* New reference. */</comment>
			<if pos:line="68" pos:column="25">if <condition pos:line="68" pos:column="28">(<expr><name pos:line="68" pos:column="29">tb<pos:position pos:line="68" pos:column="31"/></name> <operator pos:line="68" pos:column="32">==<pos:position pos:line="68" pos:column="34"/></operator> <name pos:line="68" pos:column="35">NULL<pos:position pos:line="68" pos:column="39"/></name></expr>)<pos:position pos:line="68" pos:column="40"/></condition><then pos:line="68" pos:column="40"> <block pos:line="68" pos:column="41">{
				<expr_stmt><expr><call><name pos:line="69" pos:column="33">cpy_log_exception<pos:position pos:line="69" pos:column="50"/></name><argument_list pos:line="69" pos:column="50">(<argument><expr><literal type="string" pos:line="69" pos:column="51">"python initialization"<pos:position pos:line="69" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="69" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="76"/></expr_stmt>
				<continue pos:line="70" pos:column="33">continue;<pos:position pos:line="70" pos:column="42"/></continue>
			}<pos:position pos:line="71" pos:column="26"/></block></then></if>
			<expr_stmt><expr><name pos:line="72" pos:column="25">cpy_format_exception<pos:position pos:line="72" pos:column="45"/></name> <operator pos:line="72" pos:column="46">=<pos:position pos:line="72" pos:column="47"/></operator> <call><name pos:line="72" pos:column="48">PyObject_GetAttrString<pos:position pos:line="72" pos:column="70"/></name><argument_list pos:line="72" pos:column="70">(<argument><expr><name pos:line="72" pos:column="71">tb<pos:position pos:line="72" pos:column="73"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="72" pos:column="75">"format_exception"<pos:position pos:line="72" pos:column="93"/></literal></expr></argument>)<pos:position pos:line="72" pos:column="94"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="95"/></expr_stmt> <comment type="block" pos:line="72" pos:column="96">/* New reference. */</comment>
			<expr_stmt><expr><call><name pos:line="73" pos:column="25">Py_DECREF<pos:position pos:line="73" pos:column="34"/></name><argument_list pos:line="73" pos:column="34">(<argument><expr><name pos:line="73" pos:column="35">tb<pos:position pos:line="73" pos:column="37"/></name></expr></argument>)<pos:position pos:line="73" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="39"/></expr_stmt>
			<if pos:line="74" pos:column="25">if <condition pos:line="74" pos:column="28">(<expr><name pos:line="74" pos:column="29">cpy_format_exception<pos:position pos:line="74" pos:column="49"/></name> <operator pos:line="74" pos:column="50">==<pos:position pos:line="74" pos:column="52"/></operator> <name pos:line="74" pos:column="53">NULL<pos:position pos:line="74" pos:column="57"/></name></expr>)<pos:position pos:line="74" pos:column="58"/></condition><then pos:line="74" pos:column="58">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="75" pos:column="33">cpy_log_exception<pos:position pos:line="75" pos:column="50"/></name><argument_list pos:line="75" pos:column="50">(<argument><expr><literal type="string" pos:line="75" pos:column="51">"python initialization"<pos:position pos:line="75" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="75" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="76"/></expr_stmt></block></then></if>
		}<pos:position pos:line="76" pos:column="18"/></block></then></if></elseif> <elseif pos:line="76" pos:column="19">else <if pos:line="76" pos:column="24">if <condition pos:line="76" pos:column="27">(<expr><call><name pos:line="76" pos:column="28">strcasecmp<pos:position pos:line="76" pos:column="38"/></name><argument_list pos:line="76" pos:column="38">(<argument><expr><name><name pos:line="76" pos:column="39">item<pos:position pos:line="76" pos:column="43"/></name><operator pos:line="76" pos:column="43">-&gt;<pos:position pos:line="76" pos:column="48"/></operator><name pos:line="76" pos:column="45">key<pos:position pos:line="76" pos:column="48"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="76" pos:column="50">"ModulePath"<pos:position pos:line="76" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="76" pos:column="63"/></argument_list></call> <operator pos:line="76" pos:column="64">==<pos:position pos:line="76" pos:column="66"/></operator> <literal type="number" pos:line="76" pos:column="67">0<pos:position pos:line="76" pos:column="68"/></literal></expr>)<pos:position pos:line="76" pos:column="69"/></condition><then pos:line="76" pos:column="69"> <block pos:line="76" pos:column="70">{
			<decl_stmt><decl><type><name pos:line="77" pos:column="25">char<pos:position pos:line="77" pos:column="29"/></name> <modifier pos:line="77" pos:column="30">*<pos:position pos:line="77" pos:column="31"/></modifier></type><name pos:line="77" pos:column="31">dir<pos:position pos:line="77" pos:column="34"/></name> <init pos:line="77" pos:column="35">= <expr><name pos:line="77" pos:column="37">NULL<pos:position pos:line="77" pos:column="41"/></name></expr></init></decl>;<pos:position pos:line="77" pos:column="42"/></decl_stmt>
			<decl_stmt><decl><type><name pos:line="78" pos:column="25">PyObject<pos:position pos:line="78" pos:column="33"/></name> <modifier pos:line="78" pos:column="34">*<pos:position pos:line="78" pos:column="35"/></modifier></type><name pos:line="78" pos:column="35">dir_object<pos:position pos:line="78" pos:column="45"/></name></decl>;<pos:position pos:line="78" pos:column="46"/></decl_stmt>
			
			<if pos:line="80" pos:column="25">if <condition pos:line="80" pos:column="28">(<expr><call><name pos:line="80" pos:column="29">cf_util_get_string<pos:position pos:line="80" pos:column="47"/></name><argument_list pos:line="80" pos:column="47">(<argument><expr><name pos:line="80" pos:column="48">item<pos:position pos:line="80" pos:column="52"/></name></expr></argument>, <argument><expr><operator pos:line="80" pos:column="54">&amp;<pos:position pos:line="80" pos:column="59"/></operator><name pos:line="80" pos:column="55">dir<pos:position pos:line="80" pos:column="58"/></name></expr></argument>)<pos:position pos:line="80" pos:column="59"/></argument_list></call> <operator pos:line="80" pos:column="60">!=<pos:position pos:line="80" pos:column="62"/></operator> <literal type="number" pos:line="80" pos:column="63">0<pos:position pos:line="80" pos:column="64"/></literal></expr>)<pos:position pos:line="80" pos:column="65"/></condition><then pos:line="80" pos:column="65"> 
				<block type="pseudo"><continue pos:line="81" pos:column="33">continue;<pos:position pos:line="81" pos:column="42"/></continue></block></then></if>
			<expr_stmt><expr><name pos:line="82" pos:column="25">dir_object<pos:position pos:line="82" pos:column="35"/></name> <operator pos:line="82" pos:column="36">=<pos:position pos:line="82" pos:column="37"/></operator> <call><name pos:line="82" pos:column="38">PyString_FromString<pos:position pos:line="82" pos:column="57"/></name><argument_list pos:line="82" pos:column="57">(<argument><expr><name pos:line="82" pos:column="58">dir<pos:position pos:line="82" pos:column="61"/></name></expr></argument>)<pos:position pos:line="82" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="63"/></expr_stmt> <comment type="block" pos:line="82" pos:column="64">/* New reference. */</comment>
			<if pos:line="83" pos:column="25">if <condition pos:line="83" pos:column="28">(<expr><name pos:line="83" pos:column="29">dir_object<pos:position pos:line="83" pos:column="39"/></name> <operator pos:line="83" pos:column="40">==<pos:position pos:line="83" pos:column="42"/></operator> <name pos:line="83" pos:column="43">NULL<pos:position pos:line="83" pos:column="47"/></name></expr>)<pos:position pos:line="83" pos:column="48"/></condition><then pos:line="83" pos:column="48"> <block pos:line="83" pos:column="49">{
				<expr_stmt><expr><call><name pos:line="84" pos:column="33">ERROR<pos:position pos:line="84" pos:column="38"/></name><argument_list pos:line="84" pos:column="38">(<argument><expr><literal type="string" pos:line="84" pos:column="39">"python plugin: Unable to convert \"%s\" to "<pos:position pos:line="84" pos:column="84"/></literal>
				      <literal type="string" pos:line="85" pos:column="39">"a python object."<pos:position pos:line="85" pos:column="57"/></literal></expr></argument>, <argument><expr><name pos:line="85" pos:column="59">dir<pos:position pos:line="85" pos:column="62"/></name></expr></argument>)<pos:position pos:line="85" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="64"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="86" pos:column="33">free<pos:position pos:line="86" pos:column="37"/></name><argument_list pos:line="86" pos:column="37">(<argument><expr><name pos:line="86" pos:column="38">dir<pos:position pos:line="86" pos:column="41"/></name></expr></argument>)<pos:position pos:line="86" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="43"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="87" pos:column="33">cpy_log_exception<pos:position pos:line="87" pos:column="50"/></name><argument_list pos:line="87" pos:column="50">(<argument><expr><literal type="string" pos:line="87" pos:column="51">"python initialization"<pos:position pos:line="87" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="87" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="76"/></expr_stmt>
				<continue pos:line="88" pos:column="33">continue;<pos:position pos:line="88" pos:column="42"/></continue>
			}<pos:position pos:line="89" pos:column="26"/></block></then></if>
			<if pos:line="90" pos:column="25">if <condition pos:line="90" pos:column="28">(<expr><call><name pos:line="90" pos:column="29">PyList_Append<pos:position pos:line="90" pos:column="42"/></name><argument_list pos:line="90" pos:column="42">(<argument><expr><name pos:line="90" pos:column="43">sys_path<pos:position pos:line="90" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="90" pos:column="53">dir_object<pos:position pos:line="90" pos:column="63"/></name></expr></argument>)<pos:position pos:line="90" pos:column="64"/></argument_list></call> <operator pos:line="90" pos:column="65">!=<pos:position pos:line="90" pos:column="67"/></operator> <literal type="number" pos:line="90" pos:column="68">0<pos:position pos:line="90" pos:column="69"/></literal></expr>)<pos:position pos:line="90" pos:column="70"/></condition><then pos:line="90" pos:column="70"> <block pos:line="90" pos:column="71">{
				<expr_stmt><expr><call><name pos:line="91" pos:column="33">ERROR<pos:position pos:line="91" pos:column="38"/></name><argument_list pos:line="91" pos:column="38">(<argument><expr><literal type="string" pos:line="91" pos:column="39">"python plugin: Unable to append \"%s\" to "<pos:position pos:line="91" pos:column="83"/></literal>
				      <literal type="string" pos:line="92" pos:column="39">"python module path."<pos:position pos:line="92" pos:column="60"/></literal></expr></argument>, <argument><expr><name pos:line="92" pos:column="62">dir<pos:position pos:line="92" pos:column="65"/></name></expr></argument>)<pos:position pos:line="92" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="67"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="93" pos:column="33">cpy_log_exception<pos:position pos:line="93" pos:column="50"/></name><argument_list pos:line="93" pos:column="50">(<argument><expr><literal type="string" pos:line="93" pos:column="51">"python initialization"<pos:position pos:line="93" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="93" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="76"/></expr_stmt>
			}<pos:position pos:line="94" pos:column="26"/></block></then></if>
			<expr_stmt><expr><call><name pos:line="95" pos:column="25">Py_DECREF<pos:position pos:line="95" pos:column="34"/></name><argument_list pos:line="95" pos:column="34">(<argument><expr><name pos:line="95" pos:column="35">dir_object<pos:position pos:line="95" pos:column="45"/></name></expr></argument>)<pos:position pos:line="95" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="95" pos:column="47"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="96" pos:column="25">free<pos:position pos:line="96" pos:column="29"/></name><argument_list pos:line="96" pos:column="29">(<argument><expr><name pos:line="96" pos:column="30">dir<pos:position pos:line="96" pos:column="33"/></name></expr></argument>)<pos:position pos:line="96" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="96" pos:column="35"/></expr_stmt>
		}<pos:position pos:line="97" pos:column="18"/></block></then></if></elseif> <elseif pos:line="97" pos:column="19">else <if pos:line="97" pos:column="24">if <condition pos:line="97" pos:column="27">(<expr><call><name pos:line="97" pos:column="28">strcasecmp<pos:position pos:line="97" pos:column="38"/></name><argument_list pos:line="97" pos:column="38">(<argument><expr><name><name pos:line="97" pos:column="39">item<pos:position pos:line="97" pos:column="43"/></name><operator pos:line="97" pos:column="43">-&gt;<pos:position pos:line="97" pos:column="48"/></operator><name pos:line="97" pos:column="45">key<pos:position pos:line="97" pos:column="48"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="97" pos:column="50">"Import"<pos:position pos:line="97" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="97" pos:column="59"/></argument_list></call> <operator pos:line="97" pos:column="60">==<pos:position pos:line="97" pos:column="62"/></operator> <literal type="number" pos:line="97" pos:column="63">0<pos:position pos:line="97" pos:column="64"/></literal></expr>)<pos:position pos:line="97" pos:column="65"/></condition><then pos:line="97" pos:column="65"> <block pos:line="97" pos:column="66">{
			<decl_stmt><decl><type><name pos:line="98" pos:column="25">char<pos:position pos:line="98" pos:column="29"/></name> <modifier pos:line="98" pos:column="30">*<pos:position pos:line="98" pos:column="31"/></modifier></type><name pos:line="98" pos:column="31">module_name<pos:position pos:line="98" pos:column="42"/></name> <init pos:line="98" pos:column="43">= <expr><name pos:line="98" pos:column="45">NULL<pos:position pos:line="98" pos:column="49"/></name></expr></init></decl>;<pos:position pos:line="98" pos:column="50"/></decl_stmt>
			<decl_stmt><decl><type><name pos:line="99" pos:column="25">PyObject<pos:position pos:line="99" pos:column="33"/></name> <modifier pos:line="99" pos:column="34">*<pos:position pos:line="99" pos:column="35"/></modifier></type><name pos:line="99" pos:column="35">module<pos:position pos:line="99" pos:column="41"/></name></decl>;<pos:position pos:line="99" pos:column="42"/></decl_stmt>
			
			<if pos:line="101" pos:column="25">if <condition pos:line="101" pos:column="28">(<expr><call><name pos:line="101" pos:column="29">cf_util_get_string<pos:position pos:line="101" pos:column="47"/></name><argument_list pos:line="101" pos:column="47">(<argument><expr><name pos:line="101" pos:column="48">item<pos:position pos:line="101" pos:column="52"/></name></expr></argument>, <argument><expr><operator pos:line="101" pos:column="54">&amp;<pos:position pos:line="101" pos:column="59"/></operator><name pos:line="101" pos:column="55">module_name<pos:position pos:line="101" pos:column="66"/></name></expr></argument>)<pos:position pos:line="101" pos:column="67"/></argument_list></call> <operator pos:line="101" pos:column="68">!=<pos:position pos:line="101" pos:column="70"/></operator> <literal type="number" pos:line="101" pos:column="71">0<pos:position pos:line="101" pos:column="72"/></literal></expr>)<pos:position pos:line="101" pos:column="73"/></condition><then pos:line="101" pos:column="73"> 
				<block type="pseudo"><continue pos:line="102" pos:column="33">continue;<pos:position pos:line="102" pos:column="42"/></continue></block></then></if>
			<expr_stmt><expr><name pos:line="103" pos:column="25">module<pos:position pos:line="103" pos:column="31"/></name> <operator pos:line="103" pos:column="32">=<pos:position pos:line="103" pos:column="33"/></operator> <call><name pos:line="103" pos:column="34">PyImport_ImportModule<pos:position pos:line="103" pos:column="55"/></name><argument_list pos:line="103" pos:column="55">(<argument><expr><name pos:line="103" pos:column="56">module_name<pos:position pos:line="103" pos:column="67"/></name></expr></argument>)<pos:position pos:line="103" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="103" pos:column="69"/></expr_stmt> <comment type="block" pos:line="103" pos:column="70">/* New reference. */</comment>
			<if pos:line="104" pos:column="25">if <condition pos:line="104" pos:column="28">(<expr><name pos:line="104" pos:column="29">module<pos:position pos:line="104" pos:column="35"/></name> <operator pos:line="104" pos:column="36">==<pos:position pos:line="104" pos:column="38"/></operator> <name pos:line="104" pos:column="39">NULL<pos:position pos:line="104" pos:column="43"/></name></expr>)<pos:position pos:line="104" pos:column="44"/></condition><then pos:line="104" pos:column="44"> <block pos:line="104" pos:column="45">{
				<expr_stmt><expr><call><name pos:line="105" pos:column="33">ERROR<pos:position pos:line="105" pos:column="38"/></name><argument_list pos:line="105" pos:column="38">(<argument><expr><literal type="string" pos:line="105" pos:column="39">"python plugin: Error importing module \"%s\"."<pos:position pos:line="105" pos:column="86"/></literal></expr></argument>, <argument><expr><name pos:line="105" pos:column="88">module_name<pos:position pos:line="105" pos:column="99"/></name></expr></argument>)<pos:position pos:line="105" pos:column="100"/></argument_list></call></expr>;<pos:position pos:line="105" pos:column="101"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="106" pos:column="33">cpy_log_exception<pos:position pos:line="106" pos:column="50"/></name><argument_list pos:line="106" pos:column="50">(<argument><expr><literal type="string" pos:line="106" pos:column="51">"importing module"<pos:position pos:line="106" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="106" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="106" pos:column="71"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="107" pos:column="33">PyErr_Print<pos:position pos:line="107" pos:column="44"/></name><argument_list pos:line="107" pos:column="44">()<pos:position pos:line="107" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="107" pos:column="47"/></expr_stmt>
			}<pos:position pos:line="108" pos:column="26"/></block></then></if>
			<expr_stmt><expr><call><name pos:line="109" pos:column="25">free<pos:position pos:line="109" pos:column="29"/></name><argument_list pos:line="109" pos:column="29">(<argument><expr><name pos:line="109" pos:column="30">module_name<pos:position pos:line="109" pos:column="41"/></name></expr></argument>)<pos:position pos:line="109" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="109" pos:column="43"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="110" pos:column="25">Py_XDECREF<pos:position pos:line="110" pos:column="35"/></name><argument_list pos:line="110" pos:column="35">(<argument><expr><name pos:line="110" pos:column="36">module<pos:position pos:line="110" pos:column="42"/></name></expr></argument>)<pos:position pos:line="110" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="110" pos:column="44"/></expr_stmt>
		}<pos:position pos:line="111" pos:column="18"/></block></then></if></elseif> <elseif pos:line="111" pos:column="19">else <if pos:line="111" pos:column="24">if <condition pos:line="111" pos:column="27">(<expr><call><name pos:line="111" pos:column="28">strcasecmp<pos:position pos:line="111" pos:column="38"/></name><argument_list pos:line="111" pos:column="38">(<argument><expr><name><name pos:line="111" pos:column="39">item<pos:position pos:line="111" pos:column="43"/></name><operator pos:line="111" pos:column="43">-&gt;<pos:position pos:line="111" pos:column="48"/></operator><name pos:line="111" pos:column="45">key<pos:position pos:line="111" pos:column="48"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="111" pos:column="50">"Module"<pos:position pos:line="111" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="111" pos:column="59"/></argument_list></call> <operator pos:line="111" pos:column="60">==<pos:position pos:line="111" pos:column="62"/></operator> <literal type="number" pos:line="111" pos:column="63">0<pos:position pos:line="111" pos:column="64"/></literal></expr>)<pos:position pos:line="111" pos:column="65"/></condition><then pos:line="111" pos:column="65"> <block pos:line="111" pos:column="66">{
			<decl_stmt><decl><type><name pos:line="112" pos:column="25">char<pos:position pos:line="112" pos:column="29"/></name> <modifier pos:line="112" pos:column="30">*<pos:position pos:line="112" pos:column="31"/></modifier></type><name pos:line="112" pos:column="31">name<pos:position pos:line="112" pos:column="35"/></name> <init pos:line="112" pos:column="36">= <expr><name pos:line="112" pos:column="38">NULL<pos:position pos:line="112" pos:column="42"/></name></expr></init></decl>;<pos:position pos:line="112" pos:column="43"/></decl_stmt>
			<decl_stmt><decl><type><name pos:line="113" pos:column="25">cpy_callback_t<pos:position pos:line="113" pos:column="39"/></name> <modifier pos:line="113" pos:column="40">*<pos:position pos:line="113" pos:column="41"/></modifier></type><name pos:line="113" pos:column="41">c<pos:position pos:line="113" pos:column="42"/></name></decl>;<pos:position pos:line="113" pos:column="43"/></decl_stmt>
			<decl_stmt><decl><type><name pos:line="114" pos:column="25">PyObject<pos:position pos:line="114" pos:column="33"/></name> <modifier pos:line="114" pos:column="34">*<pos:position pos:line="114" pos:column="35"/></modifier></type><name pos:line="114" pos:column="35">ret<pos:position pos:line="114" pos:column="38"/></name></decl>;<pos:position pos:line="114" pos:column="39"/></decl_stmt>
			
			<if pos:line="116" pos:column="25">if <condition pos:line="116" pos:column="28">(<expr><call><name pos:line="116" pos:column="29">cf_util_get_string<pos:position pos:line="116" pos:column="47"/></name><argument_list pos:line="116" pos:column="47">(<argument><expr><name pos:line="116" pos:column="48">item<pos:position pos:line="116" pos:column="52"/></name></expr></argument>, <argument><expr><operator pos:line="116" pos:column="54">&amp;<pos:position pos:line="116" pos:column="59"/></operator><name pos:line="116" pos:column="55">name<pos:position pos:line="116" pos:column="59"/></name></expr></argument>)<pos:position pos:line="116" pos:column="60"/></argument_list></call> <operator pos:line="116" pos:column="61">!=<pos:position pos:line="116" pos:column="63"/></operator> <literal type="number" pos:line="116" pos:column="64">0<pos:position pos:line="116" pos:column="65"/></literal></expr>)<pos:position pos:line="116" pos:column="66"/></condition><then pos:line="116" pos:column="66">
				<block type="pseudo"><continue pos:line="117" pos:column="33">continue;<pos:position pos:line="117" pos:column="42"/></continue></block></then></if>
			<for pos:line="118" pos:column="25">for <control pos:line="118" pos:column="29">(<init><expr><name pos:line="118" pos:column="30">c<pos:position pos:line="118" pos:column="31"/></name> <operator pos:line="118" pos:column="32">=<pos:position pos:line="118" pos:column="33"/></operator> <name pos:line="118" pos:column="34">cpy_config_callbacks<pos:position pos:line="118" pos:column="54"/></name></expr>;<pos:position pos:line="118" pos:column="55"/></init> <condition><expr><name pos:line="118" pos:column="56">c<pos:position pos:line="118" pos:column="57"/></name></expr>;<pos:position pos:line="118" pos:column="58"/></condition> <incr><expr><name pos:line="118" pos:column="59">c<pos:position pos:line="118" pos:column="60"/></name> <operator pos:line="118" pos:column="61">=<pos:position pos:line="118" pos:column="62"/></operator> <name><name pos:line="118" pos:column="63">c<pos:position pos:line="118" pos:column="64"/></name><operator pos:line="118" pos:column="64">-&gt;<pos:position pos:line="118" pos:column="69"/></operator><name pos:line="118" pos:column="66">next<pos:position pos:line="118" pos:column="70"/></name></name></expr></incr>)<pos:position pos:line="118" pos:column="71"/></control> <block pos:line="118" pos:column="72">{
				<if pos:line="119" pos:column="33">if <condition pos:line="119" pos:column="36">(<expr><call><name pos:line="119" pos:column="37">strcasecmp<pos:position pos:line="119" pos:column="47"/></name><argument_list pos:line="119" pos:column="47">(<argument><expr><name><name pos:line="119" pos:column="48">c<pos:position pos:line="119" pos:column="49"/></name><operator pos:line="119" pos:column="49">-&gt;<pos:position pos:line="119" pos:column="54"/></operator><name pos:line="119" pos:column="51">name<pos:position pos:line="119" pos:column="55"/></name></name> <operator pos:line="119" pos:column="56">+<pos:position pos:line="119" pos:column="57"/></operator> <literal type="number" pos:line="119" pos:column="58">7<pos:position pos:line="119" pos:column="59"/></literal></expr></argument>, <argument><expr><name pos:line="119" pos:column="61">name<pos:position pos:line="119" pos:column="65"/></name></expr></argument>)<pos:position pos:line="119" pos:column="66"/></argument_list></call> <operator pos:line="119" pos:column="67">==<pos:position pos:line="119" pos:column="69"/></operator> <literal type="number" pos:line="119" pos:column="70">0<pos:position pos:line="119" pos:column="71"/></literal></expr>)<pos:position pos:line="119" pos:column="72"/></condition><then pos:line="119" pos:column="72">
					<block type="pseudo"><break pos:line="120" pos:column="41">break;<pos:position pos:line="120" pos:column="47"/></break></block></then></if>
			}<pos:position pos:line="121" pos:column="26"/></block></for>
			<if pos:line="122" pos:column="25">if <condition pos:line="122" pos:column="28">(<expr><name pos:line="122" pos:column="29">c<pos:position pos:line="122" pos:column="30"/></name> <operator pos:line="122" pos:column="31">==<pos:position pos:line="122" pos:column="33"/></operator> <name pos:line="122" pos:column="34">NULL<pos:position pos:line="122" pos:column="38"/></name></expr>)<pos:position pos:line="122" pos:column="39"/></condition><then pos:line="122" pos:column="39"> <block pos:line="122" pos:column="40">{
				<expr_stmt><expr><call><name pos:line="123" pos:column="33">WARNING<pos:position pos:line="123" pos:column="40"/></name><argument_list pos:line="123" pos:column="40">(<argument><expr><literal type="string" pos:line="123" pos:column="41">"python plugin: Found a configuration for the \"%s\" plugin, "<pos:position pos:line="123" pos:column="103"/></literal>
					<literal type="string" pos:line="124" pos:column="41">"but the plugin isn't loaded or didn't register "<pos:position pos:line="124" pos:column="90"/></literal>
					<literal type="string" pos:line="125" pos:column="41">"a configuration callback."<pos:position pos:line="125" pos:column="68"/></literal></expr></argument>, <argument><expr><name pos:line="125" pos:column="70">name<pos:position pos:line="125" pos:column="74"/></name></expr></argument>)<pos:position pos:line="125" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="125" pos:column="76"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="126" pos:column="33">free<pos:position pos:line="126" pos:column="37"/></name><argument_list pos:line="126" pos:column="37">(<argument><expr><name pos:line="126" pos:column="38">name<pos:position pos:line="126" pos:column="42"/></name></expr></argument>)<pos:position pos:line="126" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="126" pos:column="44"/></expr_stmt>
				<continue pos:line="127" pos:column="33">continue;<pos:position pos:line="127" pos:column="42"/></continue>
			}<pos:position pos:line="128" pos:column="26"/></block></then></if>
			<expr_stmt><expr><call><name pos:line="129" pos:column="25">free<pos:position pos:line="129" pos:column="29"/></name><argument_list pos:line="129" pos:column="29">(<argument><expr><name pos:line="129" pos:column="30">name<pos:position pos:line="129" pos:column="34"/></name></expr></argument>)<pos:position pos:line="129" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="129" pos:column="36"/></expr_stmt>
			<if pos:line="130" pos:column="25">if <condition pos:line="130" pos:column="28">(<expr><name><name pos:line="130" pos:column="29">c<pos:position pos:line="130" pos:column="30"/></name><operator pos:line="130" pos:column="30">-&gt;<pos:position pos:line="130" pos:column="35"/></operator><name pos:line="130" pos:column="32">data<pos:position pos:line="130" pos:column="36"/></name></name> <operator pos:line="130" pos:column="37">==<pos:position pos:line="130" pos:column="39"/></operator> <name pos:line="130" pos:column="40">NULL<pos:position pos:line="130" pos:column="44"/></name></expr>)<pos:position pos:line="130" pos:column="45"/></condition><then pos:line="130" pos:column="45">
				<block type="pseudo"><expr_stmt><expr><name pos:line="131" pos:column="33">ret<pos:position pos:line="131" pos:column="36"/></name> <operator pos:line="131" pos:column="37">=<pos:position pos:line="131" pos:column="38"/></operator> <call><name pos:line="131" pos:column="39">PyObject_CallFunction<pos:position pos:line="131" pos:column="60"/></name><argument_list pos:line="131" pos:column="60">(<argument><expr><name><name pos:line="131" pos:column="61">c<pos:position pos:line="131" pos:column="62"/></name><operator pos:line="131" pos:column="62">-&gt;<pos:position pos:line="131" pos:column="67"/></operator><name pos:line="131" pos:column="64">callback<pos:position pos:line="131" pos:column="72"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="131" pos:column="74">"N"<pos:position pos:line="131" pos:column="77"/></literal></expr></argument>,
					<argument><expr><call><name pos:line="132" pos:column="41">cpy_oconfig_to_pyconfig<pos:position pos:line="132" pos:column="64"/></name><argument_list pos:line="132" pos:column="64">(<argument><expr><name pos:line="132" pos:column="65">item<pos:position pos:line="132" pos:column="69"/></name></expr></argument>, <argument><expr><name pos:line="132" pos:column="71">NULL<pos:position pos:line="132" pos:column="75"/></name></expr></argument>)<pos:position pos:line="132" pos:column="76"/></argument_list></call></expr></argument>)<pos:position pos:line="132" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="132" pos:column="78"/></expr_stmt></block></then> <comment type="block" pos:line="132" pos:column="79">/* New reference. */</comment>
			<else pos:line="133" pos:column="25">else
				<block type="pseudo"><expr_stmt><expr><name pos:line="134" pos:column="33">ret<pos:position pos:line="134" pos:column="36"/></name> <operator pos:line="134" pos:column="37">=<pos:position pos:line="134" pos:column="38"/></operator> <call><name pos:line="134" pos:column="39">PyObject_CallFunction<pos:position pos:line="134" pos:column="60"/></name><argument_list pos:line="134" pos:column="60">(<argument><expr><name><name pos:line="134" pos:column="61">c<pos:position pos:line="134" pos:column="62"/></name><operator pos:line="134" pos:column="62">-&gt;<pos:position pos:line="134" pos:column="67"/></operator><name pos:line="134" pos:column="64">callback<pos:position pos:line="134" pos:column="72"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="134" pos:column="74">"NO"<pos:position pos:line="134" pos:column="78"/></literal></expr></argument>,
					<argument><expr><call><name pos:line="135" pos:column="41">cpy_oconfig_to_pyconfig<pos:position pos:line="135" pos:column="64"/></name><argument_list pos:line="135" pos:column="64">(<argument><expr><name pos:line="135" pos:column="65">item<pos:position pos:line="135" pos:column="69"/></name></expr></argument>, <argument><expr><name pos:line="135" pos:column="71">NULL<pos:position pos:line="135" pos:column="75"/></name></expr></argument>)<pos:position pos:line="135" pos:column="76"/></argument_list></call></expr></argument>, <argument><expr><name><name pos:line="135" pos:column="78">c<pos:position pos:line="135" pos:column="79"/></name><operator pos:line="135" pos:column="79">-&gt;<pos:position pos:line="135" pos:column="84"/></operator><name pos:line="135" pos:column="81">data<pos:position pos:line="135" pos:column="85"/></name></name></expr></argument>)<pos:position pos:line="135" pos:column="86"/></argument_list></call></expr>;<pos:position pos:line="135" pos:column="87"/></expr_stmt></block></else></if> <comment type="block" pos:line="135" pos:column="88">/* New reference. */</comment>
			<if pos:line="136" pos:column="25">if <condition pos:line="136" pos:column="28">(<expr><name pos:line="136" pos:column="29">ret<pos:position pos:line="136" pos:column="32"/></name> <operator pos:line="136" pos:column="33">==<pos:position pos:line="136" pos:column="35"/></operator> <name pos:line="136" pos:column="36">NULL<pos:position pos:line="136" pos:column="40"/></name></expr>)<pos:position pos:line="136" pos:column="41"/></condition><then pos:line="136" pos:column="41">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="137" pos:column="33">cpy_log_exception<pos:position pos:line="137" pos:column="50"/></name><argument_list pos:line="137" pos:column="50">(<argument><expr><literal type="string" pos:line="137" pos:column="51">"loading module"<pos:position pos:line="137" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="137" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="137" pos:column="69"/></expr_stmt></block></then>
			<else pos:line="138" pos:column="25">else
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="139" pos:column="33">Py_DECREF<pos:position pos:line="139" pos:column="42"/></name><argument_list pos:line="139" pos:column="42">(<argument><expr><name pos:line="139" pos:column="43">ret<pos:position pos:line="139" pos:column="46"/></name></expr></argument>)<pos:position pos:line="139" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="139" pos:column="48"/></expr_stmt></block></else></if>
		}<pos:position pos:line="140" pos:column="18"/></block></then></if></elseif> <else pos:line="140" pos:column="19">else <block pos:line="140" pos:column="24">{
			<expr_stmt><expr><call><name pos:line="141" pos:column="25">WARNING<pos:position pos:line="141" pos:column="32"/></name><argument_list pos:line="141" pos:column="32">(<argument><expr><literal type="string" pos:line="141" pos:column="33">"python plugin: Ignoring unknown config key \"%s\"."<pos:position pos:line="141" pos:column="85"/></literal></expr></argument>, <argument><expr><name><name pos:line="141" pos:column="87">item<pos:position pos:line="141" pos:column="91"/></name><operator pos:line="141" pos:column="91">-&gt;<pos:position pos:line="141" pos:column="96"/></operator><name pos:line="141" pos:column="93">key<pos:position pos:line="141" pos:column="96"/></name></name></expr></argument>)<pos:position pos:line="141" pos:column="97"/></argument_list></call></expr>;<pos:position pos:line="141" pos:column="98"/></expr_stmt>
		}<pos:position pos:line="142" pos:column="18"/></block></else></if>
	}<pos:position pos:line="143" pos:column="10"/></block></for>
	<expr_stmt><expr><call><name pos:line="144" pos:column="9">Py_DECREF<pos:position pos:line="144" pos:column="18"/></name><argument_list pos:line="144" pos:column="18">(<argument><expr><name pos:line="144" pos:column="19">sys_path<pos:position pos:line="144" pos:column="27"/></name></expr></argument>)<pos:position pos:line="144" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="144" pos:column="29"/></expr_stmt>
	<return pos:line="145" pos:column="9">return <expr><literal type="number" pos:line="145" pos:column="16">0<pos:position pos:line="145" pos:column="17"/></literal></expr>;<pos:position pos:line="145" pos:column="18"/></return>
}<pos:position pos:line="146" pos:column="2"/></block></function></unit>
