<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_366_collectd-5.5.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">apc_query_server<pos:position pos:line="1" pos:column="28"/></name> <parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name pos:line="1" pos:column="30">char<pos:position pos:line="1" pos:column="34"/></name> <modifier pos:line="1" pos:column="35">*<pos:position pos:line="1" pos:column="36"/></modifier></type><name pos:line="1" pos:column="36">host<pos:position pos:line="1" pos:column="40"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="42">int<pos:position pos:line="1" pos:column="45"/></name></type> <name pos:line="1" pos:column="46">port<pos:position pos:line="1" pos:column="50"/></name></decl></parameter>,
		<parameter><decl><type><name pos:line="2" pos:column="17">apc_detail_t<pos:position pos:line="2" pos:column="29"/></name> <modifier pos:line="2" pos:column="30">*<pos:position pos:line="2" pos:column="31"/></modifier></type><name pos:line="2" pos:column="31">apcups_detail<pos:position pos:line="2" pos:column="44"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="45"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type>     <name pos:line="4" pos:column="17">n<pos:position pos:line="4" pos:column="18"/></name></decl>;<pos:position pos:line="4" pos:column="19"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">char<pos:position pos:line="5" pos:column="13"/></name></type>    <name><name pos:line="5" pos:column="17">recvline<pos:position pos:line="5" pos:column="25"/></name><index pos:line="5" pos:column="25">[<expr><literal type="number" pos:line="5" pos:column="26">1024<pos:position pos:line="5" pos:column="30"/></literal></expr>]<pos:position pos:line="5" pos:column="31"/></index></name></decl>;<pos:position pos:line="5" pos:column="32"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">char<pos:position pos:line="6" pos:column="13"/></name>   <modifier pos:line="6" pos:column="16">*<pos:position pos:line="6" pos:column="17"/></modifier></type><name pos:line="6" pos:column="17">tokptr<pos:position pos:line="6" pos:column="23"/></name></decl>;<pos:position pos:line="6" pos:column="24"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">char<pos:position pos:line="7" pos:column="13"/></name>   <modifier pos:line="7" pos:column="16">*<pos:position pos:line="7" pos:column="17"/></modifier></type><name pos:line="7" pos:column="17">toksaveptr<pos:position pos:line="7" pos:column="27"/></name></decl>;<pos:position pos:line="7" pos:column="28"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">_Bool<pos:position pos:line="8" pos:column="14"/></name></type> <name pos:line="8" pos:column="15">retry<pos:position pos:line="8" pos:column="20"/></name> <init pos:line="8" pos:column="21">= <expr><literal type="number" pos:line="8" pos:column="23">1<pos:position pos:line="8" pos:column="24"/></literal></expr></init></decl>;<pos:position pos:line="8" pos:column="25"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="9" pos:column="9">int<pos:position pos:line="9" pos:column="12"/></name></type> <name pos:line="9" pos:column="13">status<pos:position pos:line="9" pos:column="19"/></name></decl>;<pos:position pos:line="9" pos:column="20"/></decl_stmt>

<cpp:if pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">if<pos:position pos:line="11" pos:column="4"/></cpp:directive> <expr><name pos:line="11" pos:column="5">APCMAIN<pos:position pos:line="11" pos:column="12"/></name></expr></cpp:if>
<cpp:define pos:line="12" pos:column="1"># <cpp:directive pos:line="12" pos:column="3">define<pos:position pos:line="12" pos:column="9"/></cpp:directive> <cpp:macro><name pos:line="12" pos:column="10">PRINT_VALUE<pos:position pos:line="12" pos:column="21"/></name><parameter_list pos:line="12" pos:column="21">(<parameter><type><name pos:line="12" pos:column="22">name<pos:position pos:line="12" pos:column="26"/></name></type></parameter>, <parameter><type><name pos:line="12" pos:column="28">val<pos:position pos:line="12" pos:column="31"/></name></type></parameter>)<pos:position pos:line="12" pos:column="32"/></parameter_list></cpp:macro> <cpp:value pos:line="12" pos:column="33">printf("  Found property: name = %s; value = %f;\n", name, val)<pos:position pos:line="12" pos:column="96"/></cpp:value></cpp:define>
<cpp:else pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">else<pos:position pos:line="13" pos:column="6"/></cpp:directive></cpp:else>
<cpp:define pos:line="14" pos:column="1"># <cpp:directive pos:line="14" pos:column="3">define<pos:position pos:line="14" pos:column="9"/></cpp:directive> <cpp:macro><name pos:line="14" pos:column="10">PRINT_VALUE<pos:position pos:line="14" pos:column="21"/></name><parameter_list pos:line="14" pos:column="21">(<parameter><type><name pos:line="14" pos:column="22">name<pos:position pos:line="14" pos:column="26"/></name></type></parameter>, <parameter><type><name pos:line="14" pos:column="28">val<pos:position pos:line="14" pos:column="31"/></name></type></parameter>)<pos:position pos:line="14" pos:column="32"/></parameter_list></cpp:macro></cpp:define> <comment type="block" pos:line="14" pos:column="33">/**/</comment>
<cpp:endif pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">endif<pos:position pos:line="15" pos:column="7"/></cpp:directive></cpp:endif>

	<while pos:line="17" pos:column="9">while <condition pos:line="17" pos:column="15">(<expr><name pos:line="17" pos:column="16">retry<pos:position pos:line="17" pos:column="21"/></name></expr>)<pos:position pos:line="17" pos:column="22"/></condition>
	<block pos:line="18" pos:column="9">{
		<if pos:line="19" pos:column="17">if <condition pos:line="19" pos:column="20">(<expr><name pos:line="19" pos:column="21">global_sockfd<pos:position pos:line="19" pos:column="34"/></name> <operator pos:line="19" pos:column="35">&lt;<pos:position pos:line="19" pos:column="39"/></operator> <literal type="number" pos:line="19" pos:column="37">0<pos:position pos:line="19" pos:column="38"/></literal></expr>)<pos:position pos:line="19" pos:column="39"/></condition><then pos:line="19" pos:column="39">
		<block pos:line="20" pos:column="17">{
			<expr_stmt><expr><name pos:line="21" pos:column="25">global_sockfd<pos:position pos:line="21" pos:column="38"/></name> <operator pos:line="21" pos:column="39">=<pos:position pos:line="21" pos:column="40"/></operator> <call><name pos:line="21" pos:column="41">net_open<pos:position pos:line="21" pos:column="49"/></name> <argument_list pos:line="21" pos:column="50">(<argument><expr><name pos:line="21" pos:column="51">host<pos:position pos:line="21" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="57">port<pos:position pos:line="21" pos:column="61"/></name></expr></argument>)<pos:position pos:line="21" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="63"/></expr_stmt>
			<if pos:line="22" pos:column="25">if <condition pos:line="22" pos:column="28">(<expr><name pos:line="22" pos:column="29">global_sockfd<pos:position pos:line="22" pos:column="42"/></name> <operator pos:line="22" pos:column="43">&lt;<pos:position pos:line="22" pos:column="47"/></operator> <literal type="number" pos:line="22" pos:column="45">0<pos:position pos:line="22" pos:column="46"/></literal></expr>)<pos:position pos:line="22" pos:column="47"/></condition><then pos:line="22" pos:column="47">
			<block pos:line="23" pos:column="25">{
				<expr_stmt><expr><call><name pos:line="24" pos:column="33">ERROR<pos:position pos:line="24" pos:column="38"/></name> <argument_list pos:line="24" pos:column="39">(<argument><expr><literal type="string" pos:line="24" pos:column="40">"apcups plugin: Connecting to the "<pos:position pos:line="24" pos:column="75"/></literal>
						<literal type="string" pos:line="25" pos:column="49">"apcupsd failed."<pos:position pos:line="25" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="68"/></expr_stmt>
				<return pos:line="26" pos:column="33">return <expr><operator pos:line="26" pos:column="40">(<pos:position pos:line="26" pos:column="41"/></operator><operator pos:line="26" pos:column="41">-<pos:position pos:line="26" pos:column="42"/></operator><literal type="number" pos:line="26" pos:column="42">1<pos:position pos:line="26" pos:column="43"/></literal><operator pos:line="26" pos:column="43">)<pos:position pos:line="26" pos:column="44"/></operator></expr>;<pos:position pos:line="26" pos:column="45"/></return>
			}<pos:position pos:line="27" pos:column="26"/></block></then></if>
		}<pos:position pos:line="28" pos:column="18"/></block></then></if>


		<expr_stmt><expr><name pos:line="31" pos:column="17">status<pos:position pos:line="31" pos:column="23"/></name> <operator pos:line="31" pos:column="24">=<pos:position pos:line="31" pos:column="25"/></operator> <call><name pos:line="31" pos:column="26">net_send<pos:position pos:line="31" pos:column="34"/></name> <argument_list pos:line="31" pos:column="35">(<argument><expr><operator pos:line="31" pos:column="36">&amp;<pos:position pos:line="31" pos:column="41"/></operator><name pos:line="31" pos:column="37">global_sockfd<pos:position pos:line="31" pos:column="50"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="31" pos:column="52">"status"<pos:position pos:line="31" pos:column="60"/></literal></expr></argument>, <argument><expr><call><name pos:line="31" pos:column="62">strlen<pos:position pos:line="31" pos:column="68"/></name> <argument_list pos:line="31" pos:column="69">(<argument><expr><literal type="string" pos:line="31" pos:column="70">"status"<pos:position pos:line="31" pos:column="78"/></literal></expr></argument>)<pos:position pos:line="31" pos:column="79"/></argument_list></call></expr></argument>)<pos:position pos:line="31" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="81"/></expr_stmt>
		<if pos:line="32" pos:column="17">if <condition pos:line="32" pos:column="20">(<expr><name pos:line="32" pos:column="21">status<pos:position pos:line="32" pos:column="27"/></name> <operator pos:line="32" pos:column="28">!=<pos:position pos:line="32" pos:column="30"/></operator> <literal type="number" pos:line="32" pos:column="31">0<pos:position pos:line="32" pos:column="32"/></literal></expr>)<pos:position pos:line="32" pos:column="33"/></condition><then pos:line="32" pos:column="33">
		<block pos:line="33" pos:column="17">{
			<comment type="block" pos:line="34" pos:column="25">/* net_send is closing the socket on error. */</comment>
			<expr_stmt><expr><call><name pos:line="35" pos:column="25">assert<pos:position pos:line="35" pos:column="31"/></name> <argument_list pos:line="35" pos:column="32">(<argument><expr><name pos:line="35" pos:column="33">global_sockfd<pos:position pos:line="35" pos:column="46"/></name> <operator pos:line="35" pos:column="47">&lt;<pos:position pos:line="35" pos:column="51"/></operator> <literal type="number" pos:line="35" pos:column="49">0<pos:position pos:line="35" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="35" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="52"/></expr_stmt>
			<if pos:line="36" pos:column="25">if <condition pos:line="36" pos:column="28">(<expr><name pos:line="36" pos:column="29">retry<pos:position pos:line="36" pos:column="34"/></name></expr>)<pos:position pos:line="36" pos:column="35"/></condition><then pos:line="36" pos:column="35">
			<block pos:line="37" pos:column="25">{
				<expr_stmt><expr><name pos:line="38" pos:column="33">retry<pos:position pos:line="38" pos:column="38"/></name> <operator pos:line="38" pos:column="39">=<pos:position pos:line="38" pos:column="40"/></operator> <literal type="number" pos:line="38" pos:column="41">0<pos:position pos:line="38" pos:column="42"/></literal></expr>;<pos:position pos:line="38" pos:column="43"/></expr_stmt>
				<expr_stmt><expr><name pos:line="39" pos:column="33">count_retries<pos:position pos:line="39" pos:column="46"/></name><operator pos:line="39" pos:column="46">++<pos:position pos:line="39" pos:column="48"/></operator></expr>;<pos:position pos:line="39" pos:column="49"/></expr_stmt>
				<continue pos:line="40" pos:column="33">continue;<pos:position pos:line="40" pos:column="42"/></continue>
			}<pos:position pos:line="41" pos:column="26"/></block></then></if>

			<expr_stmt><expr><call><name pos:line="43" pos:column="25">ERROR<pos:position pos:line="43" pos:column="30"/></name> <argument_list pos:line="43" pos:column="31">(<argument><expr><literal type="string" pos:line="43" pos:column="32">"apcups plugin: Writing to the socket failed."<pos:position pos:line="43" pos:column="78"/></literal></expr></argument>)<pos:position pos:line="43" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="80"/></expr_stmt>
			<return pos:line="44" pos:column="25">return <expr><operator pos:line="44" pos:column="32">(<pos:position pos:line="44" pos:column="33"/></operator><operator pos:line="44" pos:column="33">-<pos:position pos:line="44" pos:column="34"/></operator><literal type="number" pos:line="44" pos:column="34">1<pos:position pos:line="44" pos:column="35"/></literal><operator pos:line="44" pos:column="35">)<pos:position pos:line="44" pos:column="36"/></operator></expr>;<pos:position pos:line="44" pos:column="37"/></return>
		}<pos:position pos:line="45" pos:column="18"/></block></then></if>

		<break pos:line="47" pos:column="17">break;<pos:position pos:line="47" pos:column="23"/></break>
	}<pos:position pos:line="48" pos:column="10"/></block></while> <comment type="block" pos:line="48" pos:column="11">/* while (retry) */</comment>

        <comment type="block" pos:line="50" pos:column="9">/* When collectd's collection interval is larger than apcupsd's
         * timeout, we would have to retry / re-connect each iteration. Try to
         * detect this situation and shut down the socket gracefully in that
         * case. Otherwise, keep the socket open to avoid overhead. */</comment>
	<expr_stmt><expr><name pos:line="54" pos:column="9">count_iterations<pos:position pos:line="54" pos:column="25"/></name><operator pos:line="54" pos:column="25">++<pos:position pos:line="54" pos:column="27"/></operator></expr>;<pos:position pos:line="54" pos:column="28"/></expr_stmt>
	<if pos:line="55" pos:column="9">if <condition pos:line="55" pos:column="12">(<expr><operator pos:line="55" pos:column="13">(<pos:position pos:line="55" pos:column="14"/></operator><name pos:line="55" pos:column="14">count_iterations<pos:position pos:line="55" pos:column="30"/></name> <operator pos:line="55" pos:column="31">==<pos:position pos:line="55" pos:column="33"/></operator> <literal type="number" pos:line="55" pos:column="34">10<pos:position pos:line="55" pos:column="36"/></literal><operator pos:line="55" pos:column="36">)<pos:position pos:line="55" pos:column="37"/></operator> <operator pos:line="55" pos:column="38">&amp;&amp;<pos:position pos:line="55" pos:column="48"/></operator> <operator pos:line="55" pos:column="41">(<pos:position pos:line="55" pos:column="42"/></operator><name pos:line="55" pos:column="42">count_retries<pos:position pos:line="55" pos:column="55"/></name> <operator pos:line="55" pos:column="56">&gt;<pos:position pos:line="55" pos:column="60"/></operator> <literal type="number" pos:line="55" pos:column="58">2<pos:position pos:line="55" pos:column="59"/></literal><operator pos:line="55" pos:column="59">)<pos:position pos:line="55" pos:column="60"/></operator></expr>)<pos:position pos:line="55" pos:column="61"/></condition><then pos:line="55" pos:column="61">
	<block pos:line="56" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="57" pos:column="17">NOTICE<pos:position pos:line="57" pos:column="23"/></name> <argument_list pos:line="57" pos:column="24">(<argument><expr><literal type="string" pos:line="57" pos:column="25">"apcups plugin: There have been %i retries in the "<pos:position pos:line="57" pos:column="76"/></literal>
				<literal type="string" pos:line="58" pos:column="33">"first %i iterations. Will close the socket "<pos:position pos:line="58" pos:column="78"/></literal>
				<literal type="string" pos:line="59" pos:column="33">"in future iterations."<pos:position pos:line="59" pos:column="56"/></literal></expr></argument>,
				<argument><expr><name pos:line="60" pos:column="33">count_retries<pos:position pos:line="60" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="60" pos:column="48">count_iterations<pos:position pos:line="60" pos:column="64"/></name></expr></argument>)<pos:position pos:line="60" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="66"/></expr_stmt>
		<expr_stmt><expr><name pos:line="61" pos:column="17">close_socket<pos:position pos:line="61" pos:column="29"/></name> <operator pos:line="61" pos:column="30">=<pos:position pos:line="61" pos:column="31"/></operator> <literal type="number" pos:line="61" pos:column="32">1<pos:position pos:line="61" pos:column="33"/></literal></expr>;<pos:position pos:line="61" pos:column="34"/></expr_stmt>
	}<pos:position pos:line="62" pos:column="10"/></block></then></if>

	<while pos:line="64" pos:column="9">while <condition pos:line="64" pos:column="15">(<expr><operator pos:line="64" pos:column="16">(<pos:position pos:line="64" pos:column="17"/></operator><name pos:line="64" pos:column="17">n<pos:position pos:line="64" pos:column="18"/></name> <operator pos:line="64" pos:column="19">=<pos:position pos:line="64" pos:column="20"/></operator> <call><name pos:line="64" pos:column="21">net_recv<pos:position pos:line="64" pos:column="29"/></name> <argument_list pos:line="64" pos:column="30">(<argument><expr><operator pos:line="64" pos:column="31">&amp;<pos:position pos:line="64" pos:column="36"/></operator><name pos:line="64" pos:column="32">global_sockfd<pos:position pos:line="64" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="64" pos:column="47">recvline<pos:position pos:line="64" pos:column="55"/></name></expr></argument>, <argument><expr><sizeof pos:line="64" pos:column="57">sizeof <argument_list pos:line="64" pos:column="64">(<argument><expr><name pos:line="64" pos:column="65">recvline<pos:position pos:line="64" pos:column="73"/></name></expr></argument>)<pos:position pos:line="64" pos:column="74"/></argument_list></sizeof> <operator pos:line="64" pos:column="75">-<pos:position pos:line="64" pos:column="76"/></operator> <literal type="number" pos:line="64" pos:column="77">1<pos:position pos:line="64" pos:column="78"/></literal></expr></argument>)<pos:position pos:line="64" pos:column="79"/></argument_list></call><operator pos:line="64" pos:column="79">)<pos:position pos:line="64" pos:column="80"/></operator> <operator pos:line="64" pos:column="81">&gt;<pos:position pos:line="64" pos:column="85"/></operator> <literal type="number" pos:line="64" pos:column="83">0<pos:position pos:line="64" pos:column="84"/></literal></expr>)<pos:position pos:line="64" pos:column="85"/></condition>
	<block pos:line="65" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="66" pos:column="17">assert<pos:position pos:line="66" pos:column="23"/></name> <argument_list pos:line="66" pos:column="24">(<argument><expr><operator pos:line="66" pos:column="25">(<pos:position pos:line="66" pos:column="26"/></operator><name pos:line="66" pos:column="26">unsigned<pos:position pos:line="66" pos:column="34"/></name> <name pos:line="66" pos:column="35">int<pos:position pos:line="66" pos:column="38"/></name><operator pos:line="66" pos:column="38">)<pos:position pos:line="66" pos:column="39"/></operator><name pos:line="66" pos:column="39">n<pos:position pos:line="66" pos:column="40"/></name> <operator pos:line="66" pos:column="41">&lt;<pos:position pos:line="66" pos:column="45"/></operator> <sizeof pos:line="66" pos:column="43">sizeof <argument_list pos:line="66" pos:column="50">(<argument><expr><name pos:line="66" pos:column="51">recvline<pos:position pos:line="66" pos:column="59"/></name></expr></argument>)<pos:position pos:line="66" pos:column="60"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="66" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="62"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="67" pos:column="17">recvline<pos:position pos:line="67" pos:column="25"/></name><index pos:line="67" pos:column="25">[<expr><name pos:line="67" pos:column="26">n<pos:position pos:line="67" pos:column="27"/></name></expr>]<pos:position pos:line="67" pos:column="28"/></index></name> <operator pos:line="67" pos:column="29">=<pos:position pos:line="67" pos:column="30"/></operator> <literal type="char" pos:line="67" pos:column="31">'\0'<pos:position pos:line="67" pos:column="35"/></literal></expr>;<pos:position pos:line="67" pos:column="36"/></expr_stmt>
<cpp:if pos:line="68" pos:column="1">#<cpp:directive pos:line="68" pos:column="2">if<pos:position pos:line="68" pos:column="4"/></cpp:directive> <expr><name pos:line="68" pos:column="5">APCMAIN<pos:position pos:line="68" pos:column="12"/></name></expr></cpp:if>
		<expr_stmt><expr><call><name pos:line="69" pos:column="17">printf<pos:position pos:line="69" pos:column="23"/></name> <argument_list pos:line="69" pos:column="24">(<argument><expr><literal type="string" pos:line="69" pos:column="25">"net_recv = `%s';\n"<pos:position pos:line="69" pos:column="45"/></literal></expr></argument>, <argument><expr><name pos:line="69" pos:column="47">recvline<pos:position pos:line="69" pos:column="55"/></name></expr></argument>)<pos:position pos:line="69" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="57"/></expr_stmt>
<cpp:endif pos:line="70" pos:column="1">#<cpp:directive pos:line="70" pos:column="2">endif<pos:position pos:line="70" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="70" pos:column="8">/* if APCMAIN */</comment>

		<expr_stmt><expr><name pos:line="72" pos:column="17">toksaveptr<pos:position pos:line="72" pos:column="27"/></name> <operator pos:line="72" pos:column="28">=<pos:position pos:line="72" pos:column="29"/></operator> <name pos:line="72" pos:column="30">NULL<pos:position pos:line="72" pos:column="34"/></name></expr>;<pos:position pos:line="72" pos:column="35"/></expr_stmt>
		<expr_stmt><expr><name pos:line="73" pos:column="17">tokptr<pos:position pos:line="73" pos:column="23"/></name> <operator pos:line="73" pos:column="24">=<pos:position pos:line="73" pos:column="25"/></operator> <call><name pos:line="73" pos:column="26">strtok_r<pos:position pos:line="73" pos:column="34"/></name> <argument_list pos:line="73" pos:column="35">(<argument><expr><name pos:line="73" pos:column="36">recvline<pos:position pos:line="73" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="73" pos:column="46">" :\t"<pos:position pos:line="73" pos:column="52"/></literal></expr></argument>, <argument><expr><operator pos:line="73" pos:column="54">&amp;<pos:position pos:line="73" pos:column="59"/></operator><name pos:line="73" pos:column="55">toksaveptr<pos:position pos:line="73" pos:column="65"/></name></expr></argument>)<pos:position pos:line="73" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="67"/></expr_stmt>
		<while pos:line="74" pos:column="17">while <condition pos:line="74" pos:column="23">(<expr><name pos:line="74" pos:column="24">tokptr<pos:position pos:line="74" pos:column="30"/></name> <operator pos:line="74" pos:column="31">!=<pos:position pos:line="74" pos:column="33"/></operator> <name pos:line="74" pos:column="34">NULL<pos:position pos:line="74" pos:column="38"/></name></expr>)<pos:position pos:line="74" pos:column="39"/></condition>
		<block pos:line="75" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="76" pos:column="25">char<pos:position pos:line="76" pos:column="29"/></name> <modifier pos:line="76" pos:column="30">*<pos:position pos:line="76" pos:column="31"/></modifier></type><name pos:line="76" pos:column="31">key<pos:position pos:line="76" pos:column="34"/></name> <init pos:line="76" pos:column="35">= <expr><name pos:line="76" pos:column="37">tokptr<pos:position pos:line="76" pos:column="43"/></name></expr></init></decl>;<pos:position pos:line="76" pos:column="44"/></decl_stmt>
			<if pos:line="77" pos:column="25">if <condition pos:line="77" pos:column="28">(<expr><operator pos:line="77" pos:column="29">(<pos:position pos:line="77" pos:column="30"/></operator><name pos:line="77" pos:column="30">tokptr<pos:position pos:line="77" pos:column="36"/></name> <operator pos:line="77" pos:column="37">=<pos:position pos:line="77" pos:column="38"/></operator> <call><name pos:line="77" pos:column="39">strtok_r<pos:position pos:line="77" pos:column="47"/></name> <argument_list pos:line="77" pos:column="48">(<argument><expr><name pos:line="77" pos:column="49">NULL<pos:position pos:line="77" pos:column="53"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="77" pos:column="55">" :\t"<pos:position pos:line="77" pos:column="61"/></literal></expr></argument>, <argument><expr><operator pos:line="77" pos:column="63">&amp;<pos:position pos:line="77" pos:column="68"/></operator><name pos:line="77" pos:column="64">toksaveptr<pos:position pos:line="77" pos:column="74"/></name></expr></argument>)<pos:position pos:line="77" pos:column="75"/></argument_list></call><operator pos:line="77" pos:column="75">)<pos:position pos:line="77" pos:column="76"/></operator> <operator pos:line="77" pos:column="77">==<pos:position pos:line="77" pos:column="79"/></operator> <name pos:line="77" pos:column="80">NULL<pos:position pos:line="77" pos:column="84"/></name></expr>)<pos:position pos:line="77" pos:column="85"/></condition><then pos:line="77" pos:column="85">
				<block type="pseudo"><continue pos:line="78" pos:column="33">continue;<pos:position pos:line="78" pos:column="42"/></continue></block></then></if>

			<decl_stmt><decl><type><name pos:line="80" pos:column="25">gauge_t<pos:position pos:line="80" pos:column="32"/></name></type> <name pos:line="80" pos:column="33">value<pos:position pos:line="80" pos:column="38"/></name></decl>;<pos:position pos:line="80" pos:column="39"/></decl_stmt>
			<if pos:line="81" pos:column="25">if <condition pos:line="81" pos:column="28">(<expr><call><name pos:line="81" pos:column="29">strtogauge<pos:position pos:line="81" pos:column="39"/></name> <argument_list pos:line="81" pos:column="40">(<argument><expr><name pos:line="81" pos:column="41">tokptr<pos:position pos:line="81" pos:column="47"/></name></expr></argument>, <argument><expr><operator pos:line="81" pos:column="49">&amp;<pos:position pos:line="81" pos:column="54"/></operator><name pos:line="81" pos:column="50">value<pos:position pos:line="81" pos:column="55"/></name></expr></argument>)<pos:position pos:line="81" pos:column="56"/></argument_list></call> <operator pos:line="81" pos:column="57">!=<pos:position pos:line="81" pos:column="59"/></operator> <literal type="number" pos:line="81" pos:column="60">0<pos:position pos:line="81" pos:column="61"/></literal></expr>)<pos:position pos:line="81" pos:column="62"/></condition><then pos:line="81" pos:column="62">
				<block type="pseudo"><continue pos:line="82" pos:column="33">continue;<pos:position pos:line="82" pos:column="42"/></continue></block></then></if>

			<expr_stmt><expr><call><name pos:line="84" pos:column="25">PRINT_VALUE<pos:position pos:line="84" pos:column="36"/></name> <argument_list pos:line="84" pos:column="37">(<argument><expr><name pos:line="84" pos:column="38">key<pos:position pos:line="84" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="84" pos:column="43">value<pos:position pos:line="84" pos:column="48"/></name></expr></argument>)<pos:position pos:line="84" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="50"/></expr_stmt>

			<if pos:line="86" pos:column="25">if <condition pos:line="86" pos:column="28">(<expr><call><name pos:line="86" pos:column="29">strcmp<pos:position pos:line="86" pos:column="35"/></name> <argument_list pos:line="86" pos:column="36">(<argument><expr><literal type="string" pos:line="86" pos:column="37">"LINEV"<pos:position pos:line="86" pos:column="44"/></literal></expr></argument>, <argument><expr><name pos:line="86" pos:column="46">key<pos:position pos:line="86" pos:column="49"/></name></expr></argument>)<pos:position pos:line="86" pos:column="50"/></argument_list></call> <operator pos:line="86" pos:column="51">==<pos:position pos:line="86" pos:column="53"/></operator> <literal type="number" pos:line="86" pos:column="54">0<pos:position pos:line="86" pos:column="55"/></literal></expr>)<pos:position pos:line="86" pos:column="56"/></condition><then pos:line="86" pos:column="56">
				<block type="pseudo"><expr_stmt><expr><name><name pos:line="87" pos:column="33">apcups_detail<pos:position pos:line="87" pos:column="46"/></name><operator pos:line="87" pos:column="46">-&gt;<pos:position pos:line="87" pos:column="51"/></operator><name pos:line="87" pos:column="48">linev<pos:position pos:line="87" pos:column="53"/></name></name> <operator pos:line="87" pos:column="54">=<pos:position pos:line="87" pos:column="55"/></operator> <name pos:line="87" pos:column="56">value<pos:position pos:line="87" pos:column="61"/></name></expr>;<pos:position pos:line="87" pos:column="62"/></expr_stmt></block></then>
			<elseif pos:line="88" pos:column="25">else <if pos:line="88" pos:column="30">if <condition pos:line="88" pos:column="33">(<expr><call><name pos:line="88" pos:column="34">strcmp<pos:position pos:line="88" pos:column="40"/></name> <argument_list pos:line="88" pos:column="41">(<argument><expr><literal type="string" pos:line="88" pos:column="42">"BATTV"<pos:position pos:line="88" pos:column="49"/></literal></expr></argument>, <argument><expr><name pos:line="88" pos:column="51">key<pos:position pos:line="88" pos:column="54"/></name></expr></argument>)<pos:position pos:line="88" pos:column="55"/></argument_list></call> <operator pos:line="88" pos:column="56">==<pos:position pos:line="88" pos:column="58"/></operator> <literal type="number" pos:line="88" pos:column="59">0<pos:position pos:line="88" pos:column="60"/></literal></expr>)<pos:position pos:line="88" pos:column="61"/></condition><then pos:line="88" pos:column="61">
				<block type="pseudo"><expr_stmt><expr><name><name pos:line="89" pos:column="33">apcups_detail<pos:position pos:line="89" pos:column="46"/></name><operator pos:line="89" pos:column="46">-&gt;<pos:position pos:line="89" pos:column="51"/></operator><name pos:line="89" pos:column="48">battv<pos:position pos:line="89" pos:column="53"/></name></name> <operator pos:line="89" pos:column="54">=<pos:position pos:line="89" pos:column="55"/></operator> <name pos:line="89" pos:column="56">value<pos:position pos:line="89" pos:column="61"/></name></expr>;<pos:position pos:line="89" pos:column="62"/></expr_stmt></block></then></if></elseif>
			<elseif pos:line="90" pos:column="25">else <if pos:line="90" pos:column="30">if <condition pos:line="90" pos:column="33">(<expr><call><name pos:line="90" pos:column="34">strcmp<pos:position pos:line="90" pos:column="40"/></name> <argument_list pos:line="90" pos:column="41">(<argument><expr><literal type="string" pos:line="90" pos:column="42">"ITEMP"<pos:position pos:line="90" pos:column="49"/></literal></expr></argument>, <argument><expr><name pos:line="90" pos:column="51">key<pos:position pos:line="90" pos:column="54"/></name></expr></argument>)<pos:position pos:line="90" pos:column="55"/></argument_list></call> <operator pos:line="90" pos:column="56">==<pos:position pos:line="90" pos:column="58"/></operator> <literal type="number" pos:line="90" pos:column="59">0<pos:position pos:line="90" pos:column="60"/></literal></expr>)<pos:position pos:line="90" pos:column="61"/></condition><then pos:line="90" pos:column="61">
				<block type="pseudo"><expr_stmt><expr><name><name pos:line="91" pos:column="33">apcups_detail<pos:position pos:line="91" pos:column="46"/></name><operator pos:line="91" pos:column="46">-&gt;<pos:position pos:line="91" pos:column="51"/></operator><name pos:line="91" pos:column="48">itemp<pos:position pos:line="91" pos:column="53"/></name></name> <operator pos:line="91" pos:column="54">=<pos:position pos:line="91" pos:column="55"/></operator> <name pos:line="91" pos:column="56">value<pos:position pos:line="91" pos:column="61"/></name></expr>;<pos:position pos:line="91" pos:column="62"/></expr_stmt></block></then></if></elseif>
			<elseif pos:line="92" pos:column="25">else <if pos:line="92" pos:column="30">if <condition pos:line="92" pos:column="33">(<expr><call><name pos:line="92" pos:column="34">strcmp<pos:position pos:line="92" pos:column="40"/></name> <argument_list pos:line="92" pos:column="41">(<argument><expr><literal type="string" pos:line="92" pos:column="42">"LOADPCT"<pos:position pos:line="92" pos:column="51"/></literal></expr></argument>, <argument><expr><name pos:line="92" pos:column="53">key<pos:position pos:line="92" pos:column="56"/></name></expr></argument>)<pos:position pos:line="92" pos:column="57"/></argument_list></call> <operator pos:line="92" pos:column="58">==<pos:position pos:line="92" pos:column="60"/></operator> <literal type="number" pos:line="92" pos:column="61">0<pos:position pos:line="92" pos:column="62"/></literal></expr>)<pos:position pos:line="92" pos:column="63"/></condition><then pos:line="92" pos:column="63">
				<block type="pseudo"><expr_stmt><expr><name><name pos:line="93" pos:column="33">apcups_detail<pos:position pos:line="93" pos:column="46"/></name><operator pos:line="93" pos:column="46">-&gt;<pos:position pos:line="93" pos:column="51"/></operator><name pos:line="93" pos:column="48">loadpct<pos:position pos:line="93" pos:column="55"/></name></name> <operator pos:line="93" pos:column="56">=<pos:position pos:line="93" pos:column="57"/></operator> <name pos:line="93" pos:column="58">value<pos:position pos:line="93" pos:column="63"/></name></expr>;<pos:position pos:line="93" pos:column="64"/></expr_stmt></block></then></if></elseif>
			<elseif pos:line="94" pos:column="25">else <if pos:line="94" pos:column="30">if <condition pos:line="94" pos:column="33">(<expr><call><name pos:line="94" pos:column="34">strcmp<pos:position pos:line="94" pos:column="40"/></name> <argument_list pos:line="94" pos:column="41">(<argument><expr><literal type="string" pos:line="94" pos:column="42">"BCHARGE"<pos:position pos:line="94" pos:column="51"/></literal></expr></argument>, <argument><expr><name pos:line="94" pos:column="53">key<pos:position pos:line="94" pos:column="56"/></name></expr></argument>)<pos:position pos:line="94" pos:column="57"/></argument_list></call> <operator pos:line="94" pos:column="58">==<pos:position pos:line="94" pos:column="60"/></operator> <literal type="number" pos:line="94" pos:column="61">0<pos:position pos:line="94" pos:column="62"/></literal></expr>)<pos:position pos:line="94" pos:column="63"/></condition><then pos:line="94" pos:column="63">
				<block type="pseudo"><expr_stmt><expr><name><name pos:line="95" pos:column="33">apcups_detail<pos:position pos:line="95" pos:column="46"/></name><operator pos:line="95" pos:column="46">-&gt;<pos:position pos:line="95" pos:column="51"/></operator><name pos:line="95" pos:column="48">bcharge<pos:position pos:line="95" pos:column="55"/></name></name> <operator pos:line="95" pos:column="56">=<pos:position pos:line="95" pos:column="57"/></operator> <name pos:line="95" pos:column="58">value<pos:position pos:line="95" pos:column="63"/></name></expr>;<pos:position pos:line="95" pos:column="64"/></expr_stmt></block></then></if></elseif>
			<elseif pos:line="96" pos:column="25">else <if pos:line="96" pos:column="30">if <condition pos:line="96" pos:column="33">(<expr><call><name pos:line="96" pos:column="34">strcmp<pos:position pos:line="96" pos:column="40"/></name> <argument_list pos:line="96" pos:column="41">(<argument><expr><literal type="string" pos:line="96" pos:column="42">"OUTPUTV"<pos:position pos:line="96" pos:column="51"/></literal></expr></argument>, <argument><expr><name pos:line="96" pos:column="53">key<pos:position pos:line="96" pos:column="56"/></name></expr></argument>)<pos:position pos:line="96" pos:column="57"/></argument_list></call> <operator pos:line="96" pos:column="58">==<pos:position pos:line="96" pos:column="60"/></operator> <literal type="number" pos:line="96" pos:column="61">0<pos:position pos:line="96" pos:column="62"/></literal></expr>)<pos:position pos:line="96" pos:column="63"/></condition><then pos:line="96" pos:column="63">
				<block type="pseudo"><expr_stmt><expr><name><name pos:line="97" pos:column="33">apcups_detail<pos:position pos:line="97" pos:column="46"/></name><operator pos:line="97" pos:column="46">-&gt;<pos:position pos:line="97" pos:column="51"/></operator><name pos:line="97" pos:column="48">outputv<pos:position pos:line="97" pos:column="55"/></name></name> <operator pos:line="97" pos:column="56">=<pos:position pos:line="97" pos:column="57"/></operator> <name pos:line="97" pos:column="58">value<pos:position pos:line="97" pos:column="63"/></name></expr>;<pos:position pos:line="97" pos:column="64"/></expr_stmt></block></then></if></elseif>
			<elseif pos:line="98" pos:column="25">else <if pos:line="98" pos:column="30">if <condition pos:line="98" pos:column="33">(<expr><call><name pos:line="98" pos:column="34">strcmp<pos:position pos:line="98" pos:column="40"/></name> <argument_list pos:line="98" pos:column="41">(<argument><expr><literal type="string" pos:line="98" pos:column="42">"LINEFREQ"<pos:position pos:line="98" pos:column="52"/></literal></expr></argument>, <argument><expr><name pos:line="98" pos:column="54">key<pos:position pos:line="98" pos:column="57"/></name></expr></argument>)<pos:position pos:line="98" pos:column="58"/></argument_list></call> <operator pos:line="98" pos:column="59">==<pos:position pos:line="98" pos:column="61"/></operator> <literal type="number" pos:line="98" pos:column="62">0<pos:position pos:line="98" pos:column="63"/></literal></expr>)<pos:position pos:line="98" pos:column="64"/></condition><then pos:line="98" pos:column="64">
				<block type="pseudo"><expr_stmt><expr><name><name pos:line="99" pos:column="33">apcups_detail<pos:position pos:line="99" pos:column="46"/></name><operator pos:line="99" pos:column="46">-&gt;<pos:position pos:line="99" pos:column="51"/></operator><name pos:line="99" pos:column="48">linefreq<pos:position pos:line="99" pos:column="56"/></name></name> <operator pos:line="99" pos:column="57">=<pos:position pos:line="99" pos:column="58"/></operator> <name pos:line="99" pos:column="59">value<pos:position pos:line="99" pos:column="64"/></name></expr>;<pos:position pos:line="99" pos:column="65"/></expr_stmt></block></then></if></elseif>
			<elseif pos:line="100" pos:column="25">else <if pos:line="100" pos:column="30">if <condition pos:line="100" pos:column="33">(<expr><call><name pos:line="100" pos:column="34">strcmp<pos:position pos:line="100" pos:column="40"/></name> <argument_list pos:line="100" pos:column="41">(<argument><expr><literal type="string" pos:line="100" pos:column="42">"TIMELEFT"<pos:position pos:line="100" pos:column="52"/></literal></expr></argument>, <argument><expr><name pos:line="100" pos:column="54">key<pos:position pos:line="100" pos:column="57"/></name></expr></argument>)<pos:position pos:line="100" pos:column="58"/></argument_list></call> <operator pos:line="100" pos:column="59">==<pos:position pos:line="100" pos:column="61"/></operator> <literal type="number" pos:line="100" pos:column="62">0<pos:position pos:line="100" pos:column="63"/></literal></expr>)<pos:position pos:line="100" pos:column="64"/></condition><then pos:line="100" pos:column="64">
			<block pos:line="101" pos:column="25">{
				<comment type="block" pos:line="102" pos:column="33">/* Convert minutes to seconds if requested by
				 * the user. */</comment>
				<if pos:line="104" pos:column="33">if <condition pos:line="104" pos:column="36">(<expr><name pos:line="104" pos:column="37">conf_report_seconds<pos:position pos:line="104" pos:column="56"/></name></expr>)<pos:position pos:line="104" pos:column="57"/></condition><then pos:line="104" pos:column="57">
					<block type="pseudo"><expr_stmt><expr><name pos:line="105" pos:column="41">value<pos:position pos:line="105" pos:column="46"/></name> <operator pos:line="105" pos:column="47">*=<pos:position pos:line="105" pos:column="49"/></operator> <literal type="number" pos:line="105" pos:column="50">60.0<pos:position pos:line="105" pos:column="54"/></literal></expr>;<pos:position pos:line="105" pos:column="55"/></expr_stmt></block></then></if>
				<expr_stmt><expr><name><name pos:line="106" pos:column="33">apcups_detail<pos:position pos:line="106" pos:column="46"/></name><operator pos:line="106" pos:column="46">-&gt;<pos:position pos:line="106" pos:column="51"/></operator><name pos:line="106" pos:column="48">timeleft<pos:position pos:line="106" pos:column="56"/></name></name> <operator pos:line="106" pos:column="57">=<pos:position pos:line="106" pos:column="58"/></operator> <name pos:line="106" pos:column="59">value<pos:position pos:line="106" pos:column="64"/></name></expr>;<pos:position pos:line="106" pos:column="65"/></expr_stmt>
			}<pos:position pos:line="107" pos:column="26"/></block></then></if></elseif></if>

			<expr_stmt><expr><name pos:line="109" pos:column="25">tokptr<pos:position pos:line="109" pos:column="31"/></name> <operator pos:line="109" pos:column="32">=<pos:position pos:line="109" pos:column="33"/></operator> <call><name pos:line="109" pos:column="34">strtok_r<pos:position pos:line="109" pos:column="42"/></name> <argument_list pos:line="109" pos:column="43">(<argument><expr><name pos:line="109" pos:column="44">NULL<pos:position pos:line="109" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="109" pos:column="50">":"<pos:position pos:line="109" pos:column="53"/></literal></expr></argument>, <argument><expr><operator pos:line="109" pos:column="55">&amp;<pos:position pos:line="109" pos:column="60"/></operator><name pos:line="109" pos:column="56">toksaveptr<pos:position pos:line="109" pos:column="66"/></name></expr></argument>)<pos:position pos:line="109" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="109" pos:column="68"/></expr_stmt>
		}<pos:position pos:line="110" pos:column="18"/></block></while> <comment type="block" pos:line="110" pos:column="19">/* while (tokptr != NULL) */</comment>
	}<pos:position pos:line="111" pos:column="10"/></block></while>
	<expr_stmt><expr><name pos:line="112" pos:column="9">status<pos:position pos:line="112" pos:column="15"/></name> <operator pos:line="112" pos:column="16">=<pos:position pos:line="112" pos:column="17"/></operator> <name pos:line="112" pos:column="18">errno<pos:position pos:line="112" pos:column="23"/></name></expr>;<pos:position pos:line="112" pos:column="24"/></expr_stmt> <comment type="block" pos:line="112" pos:column="25">/* save errno, net_shutdown() may re-set it. */</comment>

	<if pos:line="114" pos:column="9">if <condition pos:line="114" pos:column="12">(<expr><name pos:line="114" pos:column="13">close_socket<pos:position pos:line="114" pos:column="25"/></name></expr>)<pos:position pos:line="114" pos:column="26"/></condition><then pos:line="114" pos:column="26">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="115" pos:column="17">net_shutdown<pos:position pos:line="115" pos:column="29"/></name> <argument_list pos:line="115" pos:column="30">(<argument><expr><operator pos:line="115" pos:column="31">&amp;<pos:position pos:line="115" pos:column="36"/></operator><name pos:line="115" pos:column="32">global_sockfd<pos:position pos:line="115" pos:column="45"/></name></expr></argument>)<pos:position pos:line="115" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="115" pos:column="47"/></expr_stmt></block></then></if>

	<if pos:line="117" pos:column="9">if <condition pos:line="117" pos:column="12">(<expr><name pos:line="117" pos:column="13">n<pos:position pos:line="117" pos:column="14"/></name> <operator pos:line="117" pos:column="15">&lt;<pos:position pos:line="117" pos:column="19"/></operator> <literal type="number" pos:line="117" pos:column="17">0<pos:position pos:line="117" pos:column="18"/></literal></expr>)<pos:position pos:line="117" pos:column="19"/></condition><then pos:line="117" pos:column="19">
	<block pos:line="118" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="119" pos:column="17">char<pos:position pos:line="119" pos:column="21"/></name></type> <name><name pos:line="119" pos:column="22">errbuf<pos:position pos:line="119" pos:column="28"/></name><index pos:line="119" pos:column="28">[<expr><literal type="number" pos:line="119" pos:column="29">1024<pos:position pos:line="119" pos:column="33"/></literal></expr>]<pos:position pos:line="119" pos:column="34"/></index></name></decl>;<pos:position pos:line="119" pos:column="35"/></decl_stmt>
		<expr_stmt><expr><call><name pos:line="120" pos:column="17">ERROR<pos:position pos:line="120" pos:column="22"/></name> <argument_list pos:line="120" pos:column="23">(<argument><expr><literal type="string" pos:line="120" pos:column="24">"apcups plugin: Reading from socket failed: %s"<pos:position pos:line="120" pos:column="71"/></literal></expr></argument>,
				<argument><expr><call><name pos:line="121" pos:column="33">sstrerror<pos:position pos:line="121" pos:column="42"/></name> <argument_list pos:line="121" pos:column="43">(<argument><expr><name pos:line="121" pos:column="44">status<pos:position pos:line="121" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="121" pos:column="52">errbuf<pos:position pos:line="121" pos:column="58"/></name></expr></argument>, <argument><expr><sizeof pos:line="121" pos:column="60">sizeof <argument_list pos:line="121" pos:column="67">(<argument><expr><name pos:line="121" pos:column="68">errbuf<pos:position pos:line="121" pos:column="74"/></name></expr></argument>)<pos:position pos:line="121" pos:column="75"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="121" pos:column="76"/></argument_list></call></expr></argument>)<pos:position pos:line="121" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="121" pos:column="78"/></expr_stmt>
		<return pos:line="122" pos:column="17">return <expr><operator pos:line="122" pos:column="24">(<pos:position pos:line="122" pos:column="25"/></operator><operator pos:line="122" pos:column="25">-<pos:position pos:line="122" pos:column="26"/></operator><literal type="number" pos:line="122" pos:column="26">1<pos:position pos:line="122" pos:column="27"/></literal><operator pos:line="122" pos:column="27">)<pos:position pos:line="122" pos:column="28"/></operator></expr>;<pos:position pos:line="122" pos:column="29"/></return>
	}<pos:position pos:line="123" pos:column="10"/></block></then></if>

	<return pos:line="125" pos:column="9">return <expr><operator pos:line="125" pos:column="16">(<pos:position pos:line="125" pos:column="17"/></operator><literal type="number" pos:line="125" pos:column="17">0<pos:position pos:line="125" pos:column="18"/></literal><operator pos:line="125" pos:column="18">)<pos:position pos:line="125" pos:column="19"/></operator></expr>;<pos:position pos:line="125" pos:column="20"/></return>
}<pos:position pos:line="126" pos:column="2"/></block></function></unit>
