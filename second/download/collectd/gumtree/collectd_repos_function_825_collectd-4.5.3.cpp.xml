<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_825_collectd-4.5.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">parse_part_string<pos:position pos:line="1" pos:column="29"/></name> <parameter_list pos:line="1" pos:column="30">(<parameter><decl><type><name pos:line="1" pos:column="31">void<pos:position pos:line="1" pos:column="35"/></name> <modifier pos:line="1" pos:column="36">*<pos:position pos:line="1" pos:column="37"/></modifier><modifier pos:line="1" pos:column="37">*<pos:position pos:line="1" pos:column="38"/></modifier></type><name pos:line="1" pos:column="38">ret_buffer<pos:position pos:line="1" pos:column="48"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="50">int<pos:position pos:line="1" pos:column="53"/></name> <modifier pos:line="1" pos:column="54">*<pos:position pos:line="1" pos:column="55"/></modifier></type><name pos:line="1" pos:column="55">ret_buffer_len<pos:position pos:line="1" pos:column="69"/></name></decl></parameter>,
		<parameter><decl><type><name pos:line="2" pos:column="17">char<pos:position pos:line="2" pos:column="21"/></name> <modifier pos:line="2" pos:column="22">*<pos:position pos:line="2" pos:column="23"/></modifier></type><name pos:line="2" pos:column="23">output<pos:position pos:line="2" pos:column="29"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="31">int<pos:position pos:line="2" pos:column="34"/></name></type> <name pos:line="2" pos:column="35">output_len<pos:position pos:line="2" pos:column="45"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="46"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">char<pos:position pos:line="4" pos:column="13"/></name> <modifier pos:line="4" pos:column="14">*<pos:position pos:line="4" pos:column="15"/></modifier></type><name pos:line="4" pos:column="15">buffer<pos:position pos:line="4" pos:column="21"/></name> <init pos:line="4" pos:column="22">= <expr><operator pos:line="4" pos:column="24">*<pos:position pos:line="4" pos:column="25"/></operator><name pos:line="4" pos:column="25">ret_buffer<pos:position pos:line="4" pos:column="35"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="36"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type>   <name pos:line="5" pos:column="15">buffer_len<pos:position pos:line="5" pos:column="25"/></name> <init pos:line="5" pos:column="26">= <expr><operator pos:line="5" pos:column="28">*<pos:position pos:line="5" pos:column="29"/></operator><name pos:line="5" pos:column="29">ret_buffer_len<pos:position pos:line="5" pos:column="43"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="44"/></decl_stmt>

	<decl_stmt><decl><type><name pos:line="7" pos:column="9">uint16_t<pos:position pos:line="7" pos:column="17"/></name></type> <name pos:line="7" pos:column="18">tmp16<pos:position pos:line="7" pos:column="23"/></name></decl>;<pos:position pos:line="7" pos:column="24"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">size_t<pos:position pos:line="8" pos:column="15"/></name></type> <name pos:line="8" pos:column="16">header_size<pos:position pos:line="8" pos:column="27"/></name> <init pos:line="8" pos:column="28">= <expr><literal type="number" pos:line="8" pos:column="30">2<pos:position pos:line="8" pos:column="31"/></literal> <operator pos:line="8" pos:column="32">*<pos:position pos:line="8" pos:column="33"/></operator> <sizeof pos:line="8" pos:column="34">sizeof <argument_list pos:line="8" pos:column="41">(<argument><expr><name pos:line="8" pos:column="42">uint16_t<pos:position pos:line="8" pos:column="50"/></name></expr></argument>)<pos:position pos:line="8" pos:column="51"/></argument_list></sizeof></expr></init></decl>;<pos:position pos:line="8" pos:column="52"/></decl_stmt>

	<decl_stmt><decl><type><name pos:line="10" pos:column="9">uint16_t<pos:position pos:line="10" pos:column="17"/></name></type> <name pos:line="10" pos:column="18">pkg_length<pos:position pos:line="10" pos:column="28"/></name></decl>;<pos:position pos:line="10" pos:column="29"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="11" pos:column="9">uint16_t<pos:position pos:line="11" pos:column="17"/></name></type> <name pos:line="11" pos:column="18">pkg_type<pos:position pos:line="11" pos:column="26"/></name></decl>;<pos:position pos:line="11" pos:column="27"/></decl_stmt>

	<if pos:line="13" pos:column="9">if <condition pos:line="13" pos:column="12">(<expr><name pos:line="13" pos:column="13">buffer_len<pos:position pos:line="13" pos:column="23"/></name> <operator pos:line="13" pos:column="24">&lt;<pos:position pos:line="13" pos:column="28"/></operator> <name pos:line="13" pos:column="26">header_size<pos:position pos:line="13" pos:column="37"/></name></expr>)<pos:position pos:line="13" pos:column="38"/></condition><then pos:line="13" pos:column="38">
	<block pos:line="14" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="15" pos:column="17">WARNING<pos:position pos:line="15" pos:column="24"/></name> <argument_list pos:line="15" pos:column="25">(<argument><expr><literal type="string" pos:line="15" pos:column="26">"network plugin: parse_part_string: "<pos:position pos:line="15" pos:column="63"/></literal>
				<literal type="string" pos:line="16" pos:column="33">"Packet too short: "<pos:position pos:line="16" pos:column="53"/></literal>
				<literal type="string" pos:line="17" pos:column="33">"Chunk of at least size %u expected, "<pos:position pos:line="17" pos:column="71"/></literal>
				<literal type="string" pos:line="18" pos:column="33">"but buffer has only %i bytes left."<pos:position pos:line="18" pos:column="69"/></literal></expr></argument>,
				<argument><expr><operator pos:line="19" pos:column="33">(<pos:position pos:line="19" pos:column="34"/></operator><name pos:line="19" pos:column="34">unsigned<pos:position pos:line="19" pos:column="42"/></name> <name pos:line="19" pos:column="43">int<pos:position pos:line="19" pos:column="46"/></name><operator pos:line="19" pos:column="46">)<pos:position pos:line="19" pos:column="47"/></operator> <name pos:line="19" pos:column="48">header_size<pos:position pos:line="19" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="61">buffer_len<pos:position pos:line="19" pos:column="71"/></name></expr></argument>)<pos:position pos:line="19" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="73"/></expr_stmt>
		<return pos:line="20" pos:column="17">return <expr><operator pos:line="20" pos:column="24">(<pos:position pos:line="20" pos:column="25"/></operator><operator pos:line="20" pos:column="25">-<pos:position pos:line="20" pos:column="26"/></operator><literal type="number" pos:line="20" pos:column="26">1<pos:position pos:line="20" pos:column="27"/></literal><operator pos:line="20" pos:column="27">)<pos:position pos:line="20" pos:column="28"/></operator></expr>;<pos:position pos:line="20" pos:column="29"/></return>
	}<pos:position pos:line="21" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="23" pos:column="9">memcpy<pos:position pos:line="23" pos:column="15"/></name> <argument_list pos:line="23" pos:column="16">(<argument><expr><operator pos:line="23" pos:column="17">(<pos:position pos:line="23" pos:column="18"/></operator><name pos:line="23" pos:column="18">void<pos:position pos:line="23" pos:column="22"/></name> <operator pos:line="23" pos:column="23">*<pos:position pos:line="23" pos:column="24"/></operator><operator pos:line="23" pos:column="24">)<pos:position pos:line="23" pos:column="25"/></operator> <operator pos:line="23" pos:column="26">&amp;<pos:position pos:line="23" pos:column="31"/></operator><name pos:line="23" pos:column="27">tmp16<pos:position pos:line="23" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="34">buffer<pos:position pos:line="23" pos:column="40"/></name></expr></argument>, <argument><expr><sizeof pos:line="23" pos:column="42">sizeof <argument_list pos:line="23" pos:column="49">(<argument><expr><name pos:line="23" pos:column="50">tmp16<pos:position pos:line="23" pos:column="55"/></name></expr></argument>)<pos:position pos:line="23" pos:column="56"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="23" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="58"/></expr_stmt>
	<expr_stmt><expr><name pos:line="24" pos:column="9">buffer<pos:position pos:line="24" pos:column="15"/></name> <operator pos:line="24" pos:column="16">+=<pos:position pos:line="24" pos:column="18"/></operator> <sizeof pos:line="24" pos:column="19">sizeof <argument_list pos:line="24" pos:column="26">(<argument><expr><name pos:line="24" pos:column="27">tmp16<pos:position pos:line="24" pos:column="32"/></name></expr></argument>)<pos:position pos:line="24" pos:column="33"/></argument_list></sizeof></expr>;<pos:position pos:line="24" pos:column="34"/></expr_stmt>
	<expr_stmt><expr><name pos:line="25" pos:column="9">pkg_type<pos:position pos:line="25" pos:column="17"/></name> <operator pos:line="25" pos:column="18">=<pos:position pos:line="25" pos:column="19"/></operator> <call><name pos:line="25" pos:column="20">ntohs<pos:position pos:line="25" pos:column="25"/></name> <argument_list pos:line="25" pos:column="26">(<argument><expr><name pos:line="25" pos:column="27">tmp16<pos:position pos:line="25" pos:column="32"/></name></expr></argument>)<pos:position pos:line="25" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="34"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="27" pos:column="9">memcpy<pos:position pos:line="27" pos:column="15"/></name> <argument_list pos:line="27" pos:column="16">(<argument><expr><operator pos:line="27" pos:column="17">(<pos:position pos:line="27" pos:column="18"/></operator><name pos:line="27" pos:column="18">void<pos:position pos:line="27" pos:column="22"/></name> <operator pos:line="27" pos:column="23">*<pos:position pos:line="27" pos:column="24"/></operator><operator pos:line="27" pos:column="24">)<pos:position pos:line="27" pos:column="25"/></operator> <operator pos:line="27" pos:column="26">&amp;<pos:position pos:line="27" pos:column="31"/></operator><name pos:line="27" pos:column="27">tmp16<pos:position pos:line="27" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="34">buffer<pos:position pos:line="27" pos:column="40"/></name></expr></argument>, <argument><expr><sizeof pos:line="27" pos:column="42">sizeof <argument_list pos:line="27" pos:column="49">(<argument><expr><name pos:line="27" pos:column="50">tmp16<pos:position pos:line="27" pos:column="55"/></name></expr></argument>)<pos:position pos:line="27" pos:column="56"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="27" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="58"/></expr_stmt>
	<expr_stmt><expr><name pos:line="28" pos:column="9">buffer<pos:position pos:line="28" pos:column="15"/></name> <operator pos:line="28" pos:column="16">+=<pos:position pos:line="28" pos:column="18"/></operator> <sizeof pos:line="28" pos:column="19">sizeof <argument_list pos:line="28" pos:column="26">(<argument><expr><name pos:line="28" pos:column="27">tmp16<pos:position pos:line="28" pos:column="32"/></name></expr></argument>)<pos:position pos:line="28" pos:column="33"/></argument_list></sizeof></expr>;<pos:position pos:line="28" pos:column="34"/></expr_stmt>
	<expr_stmt><expr><name pos:line="29" pos:column="9">pkg_length<pos:position pos:line="29" pos:column="19"/></name> <operator pos:line="29" pos:column="20">=<pos:position pos:line="29" pos:column="21"/></operator> <call><name pos:line="29" pos:column="22">ntohs<pos:position pos:line="29" pos:column="27"/></name> <argument_list pos:line="29" pos:column="28">(<argument><expr><name pos:line="29" pos:column="29">tmp16<pos:position pos:line="29" pos:column="34"/></name></expr></argument>)<pos:position pos:line="29" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="36"/></expr_stmt>

	<comment type="block" pos:line="31" pos:column="9">/* Check that packet fits in the input buffer */</comment>
	<if pos:line="32" pos:column="9">if <condition pos:line="32" pos:column="12">(<expr><name pos:line="32" pos:column="13">pkg_length<pos:position pos:line="32" pos:column="23"/></name> <operator pos:line="32" pos:column="24">&gt;<pos:position pos:line="32" pos:column="28"/></operator> <name pos:line="32" pos:column="26">buffer_len<pos:position pos:line="32" pos:column="36"/></name></expr>)<pos:position pos:line="32" pos:column="37"/></condition><then pos:line="32" pos:column="37">
	<block pos:line="33" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="34" pos:column="17">WARNING<pos:position pos:line="34" pos:column="24"/></name> <argument_list pos:line="34" pos:column="25">(<argument><expr><literal type="string" pos:line="34" pos:column="26">"network plugin: parse_part_string: "<pos:position pos:line="34" pos:column="63"/></literal>
				<literal type="string" pos:line="35" pos:column="33">"Packet too big: "<pos:position pos:line="35" pos:column="51"/></literal>
				<literal type="string" pos:line="36" pos:column="33">"Chunk of size %hu received, "<pos:position pos:line="36" pos:column="63"/></literal>
				<literal type="string" pos:line="37" pos:column="33">"but buffer has only %i bytes left."<pos:position pos:line="37" pos:column="69"/></literal></expr></argument>,
				<argument><expr><name pos:line="38" pos:column="33">pkg_length<pos:position pos:line="38" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="45">buffer_len<pos:position pos:line="38" pos:column="55"/></name></expr></argument>)<pos:position pos:line="38" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="57"/></expr_stmt>
		<return pos:line="39" pos:column="17">return <expr><operator pos:line="39" pos:column="24">(<pos:position pos:line="39" pos:column="25"/></operator><operator pos:line="39" pos:column="25">-<pos:position pos:line="39" pos:column="26"/></operator><literal type="number" pos:line="39" pos:column="26">1<pos:position pos:line="39" pos:column="27"/></literal><operator pos:line="39" pos:column="27">)<pos:position pos:line="39" pos:column="28"/></operator></expr>;<pos:position pos:line="39" pos:column="29"/></return>
	}<pos:position pos:line="40" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="42" pos:column="9">/* Check that pkg_length is in the valid range */</comment>
	<if pos:line="43" pos:column="9">if <condition pos:line="43" pos:column="12">(<expr><name pos:line="43" pos:column="13">pkg_length<pos:position pos:line="43" pos:column="23"/></name> <operator pos:line="43" pos:column="24">&lt;=<pos:position pos:line="43" pos:column="29"/></operator> <name pos:line="43" pos:column="27">header_size<pos:position pos:line="43" pos:column="38"/></name></expr>)<pos:position pos:line="43" pos:column="39"/></condition><then pos:line="43" pos:column="39">
	<block pos:line="44" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="45" pos:column="17">WARNING<pos:position pos:line="45" pos:column="24"/></name> <argument_list pos:line="45" pos:column="25">(<argument><expr><literal type="string" pos:line="45" pos:column="26">"network plugin: parse_part_string: "<pos:position pos:line="45" pos:column="63"/></literal>
				<literal type="string" pos:line="46" pos:column="33">"Packet too short: "<pos:position pos:line="46" pos:column="53"/></literal>
				<literal type="string" pos:line="47" pos:column="33">"Header claims this packet is only %hu "<pos:position pos:line="47" pos:column="73"/></literal>
				<literal type="string" pos:line="48" pos:column="33">"bytes long."<pos:position pos:line="48" pos:column="46"/></literal></expr></argument>, <argument><expr><name pos:line="48" pos:column="48">pkg_length<pos:position pos:line="48" pos:column="58"/></name></expr></argument>)<pos:position pos:line="48" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="60"/></expr_stmt>
		<return pos:line="49" pos:column="17">return <expr><operator pos:line="49" pos:column="24">(<pos:position pos:line="49" pos:column="25"/></operator><operator pos:line="49" pos:column="25">-<pos:position pos:line="49" pos:column="26"/></operator><literal type="number" pos:line="49" pos:column="26">1<pos:position pos:line="49" pos:column="27"/></literal><operator pos:line="49" pos:column="27">)<pos:position pos:line="49" pos:column="28"/></operator></expr>;<pos:position pos:line="49" pos:column="29"/></return>
	}<pos:position pos:line="50" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="52" pos:column="9">/* Check that the package data fits into the output buffer.
	 * The previous if-statement ensures that:
	 * `pkg_length &gt; header_size' */</comment>
	<if pos:line="55" pos:column="9">if <condition pos:line="55" pos:column="12">(<expr><operator pos:line="55" pos:column="13">(<pos:position pos:line="55" pos:column="14"/></operator><name pos:line="55" pos:column="14">pkg_length<pos:position pos:line="55" pos:column="24"/></name> <operator pos:line="55" pos:column="25">-<pos:position pos:line="55" pos:column="26"/></operator> <name pos:line="55" pos:column="27">header_size<pos:position pos:line="55" pos:column="38"/></name><operator pos:line="55" pos:column="38">)<pos:position pos:line="55" pos:column="39"/></operator> <operator pos:line="55" pos:column="40">&gt;<pos:position pos:line="55" pos:column="44"/></operator> <name pos:line="55" pos:column="42">output_len<pos:position pos:line="55" pos:column="52"/></name></expr>)<pos:position pos:line="55" pos:column="53"/></condition><then pos:line="55" pos:column="53">
	<block pos:line="56" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="57" pos:column="17">WARNING<pos:position pos:line="57" pos:column="24"/></name> <argument_list pos:line="57" pos:column="25">(<argument><expr><literal type="string" pos:line="57" pos:column="26">"network plugin: parse_part_string: "<pos:position pos:line="57" pos:column="63"/></literal>
				<literal type="string" pos:line="58" pos:column="33">"Output buffer too small."<pos:position pos:line="58" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="58" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="61"/></expr_stmt>
		<return pos:line="59" pos:column="17">return <expr><operator pos:line="59" pos:column="24">(<pos:position pos:line="59" pos:column="25"/></operator><operator pos:line="59" pos:column="25">-<pos:position pos:line="59" pos:column="26"/></operator><literal type="number" pos:line="59" pos:column="26">1<pos:position pos:line="59" pos:column="27"/></literal><operator pos:line="59" pos:column="27">)<pos:position pos:line="59" pos:column="28"/></operator></expr>;<pos:position pos:line="59" pos:column="29"/></return>
	}<pos:position pos:line="60" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="62" pos:column="9">/* All sanity checks successfull, let's copy the data over */</comment>
	<expr_stmt><expr><name pos:line="63" pos:column="9">output_len<pos:position pos:line="63" pos:column="19"/></name> <operator pos:line="63" pos:column="20">=<pos:position pos:line="63" pos:column="21"/></operator> <name pos:line="63" pos:column="22">pkg_length<pos:position pos:line="63" pos:column="32"/></name> <operator pos:line="63" pos:column="33">-<pos:position pos:line="63" pos:column="34"/></operator> <name pos:line="63" pos:column="35">header_size<pos:position pos:line="63" pos:column="46"/></name></expr>;<pos:position pos:line="63" pos:column="47"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="64" pos:column="9">memcpy<pos:position pos:line="64" pos:column="15"/></name> <argument_list pos:line="64" pos:column="16">(<argument><expr><operator pos:line="64" pos:column="17">(<pos:position pos:line="64" pos:column="18"/></operator><name pos:line="64" pos:column="18">void<pos:position pos:line="64" pos:column="22"/></name> <operator pos:line="64" pos:column="23">*<pos:position pos:line="64" pos:column="24"/></operator><operator pos:line="64" pos:column="24">)<pos:position pos:line="64" pos:column="25"/></operator> <name pos:line="64" pos:column="26">output<pos:position pos:line="64" pos:column="32"/></name></expr></argument>, <argument><expr><operator pos:line="64" pos:column="34">(<pos:position pos:line="64" pos:column="35"/></operator><name pos:line="64" pos:column="35">void<pos:position pos:line="64" pos:column="39"/></name> <operator pos:line="64" pos:column="40">*<pos:position pos:line="64" pos:column="41"/></operator><operator pos:line="64" pos:column="41">)<pos:position pos:line="64" pos:column="42"/></operator> <name pos:line="64" pos:column="43">buffer<pos:position pos:line="64" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="64" pos:column="51">output_len<pos:position pos:line="64" pos:column="61"/></name></expr></argument>)<pos:position pos:line="64" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="63"/></expr_stmt>
	<expr_stmt><expr><name pos:line="65" pos:column="9">buffer<pos:position pos:line="65" pos:column="15"/></name> <operator pos:line="65" pos:column="16">+=<pos:position pos:line="65" pos:column="18"/></operator> <name pos:line="65" pos:column="19">output_len<pos:position pos:line="65" pos:column="29"/></name></expr>;<pos:position pos:line="65" pos:column="30"/></expr_stmt>

	<comment type="block" pos:line="67" pos:column="9">/* For some very weird reason '\0' doesn't do the trick on SPARC in
	 * this statement. */</comment>
	<if pos:line="69" pos:column="9">if <condition pos:line="69" pos:column="12">(<expr><name><name pos:line="69" pos:column="13">output<pos:position pos:line="69" pos:column="19"/></name><index pos:line="69" pos:column="19">[<expr><name pos:line="69" pos:column="20">output_len<pos:position pos:line="69" pos:column="30"/></name> <operator pos:line="69" pos:column="31">-<pos:position pos:line="69" pos:column="32"/></operator> <literal type="number" pos:line="69" pos:column="33">1<pos:position pos:line="69" pos:column="34"/></literal></expr>]<pos:position pos:line="69" pos:column="35"/></index></name> <operator pos:line="69" pos:column="36">!=<pos:position pos:line="69" pos:column="38"/></operator> <literal type="number" pos:line="69" pos:column="39">0<pos:position pos:line="69" pos:column="40"/></literal></expr>)<pos:position pos:line="69" pos:column="41"/></condition><then pos:line="69" pos:column="41">
	<block pos:line="70" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="71" pos:column="17">WARNING<pos:position pos:line="71" pos:column="24"/></name> <argument_list pos:line="71" pos:column="25">(<argument><expr><literal type="string" pos:line="71" pos:column="26">"network plugin: parse_part_string: "<pos:position pos:line="71" pos:column="63"/></literal>
				<literal type="string" pos:line="72" pos:column="33">"Received string does not end "<pos:position pos:line="72" pos:column="64"/></literal>
				<literal type="string" pos:line="73" pos:column="33">"with a NULL-byte."<pos:position pos:line="73" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="73" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="54"/></expr_stmt>
		<return pos:line="74" pos:column="17">return <expr><operator pos:line="74" pos:column="24">(<pos:position pos:line="74" pos:column="25"/></operator><operator pos:line="74" pos:column="25">-<pos:position pos:line="74" pos:column="26"/></operator><literal type="number" pos:line="74" pos:column="26">1<pos:position pos:line="74" pos:column="27"/></literal><operator pos:line="74" pos:column="27">)<pos:position pos:line="74" pos:column="28"/></operator></expr>;<pos:position pos:line="74" pos:column="29"/></return>
	}<pos:position pos:line="75" pos:column="10"/></block></then></if>

	<expr_stmt><expr><operator pos:line="77" pos:column="9">*<pos:position pos:line="77" pos:column="10"/></operator><name pos:line="77" pos:column="10">ret_buffer<pos:position pos:line="77" pos:column="20"/></name> <operator pos:line="77" pos:column="21">=<pos:position pos:line="77" pos:column="22"/></operator> <name pos:line="77" pos:column="23">buffer<pos:position pos:line="77" pos:column="29"/></name></expr>;<pos:position pos:line="77" pos:column="30"/></expr_stmt>
	<expr_stmt><expr><operator pos:line="78" pos:column="9">*<pos:position pos:line="78" pos:column="10"/></operator><name pos:line="78" pos:column="10">ret_buffer_len<pos:position pos:line="78" pos:column="24"/></name> <operator pos:line="78" pos:column="25">=<pos:position pos:line="78" pos:column="26"/></operator> <name pos:line="78" pos:column="27">buffer_len<pos:position pos:line="78" pos:column="37"/></name> <operator pos:line="78" pos:column="38">-<pos:position pos:line="78" pos:column="39"/></operator> <name pos:line="78" pos:column="40">pkg_length<pos:position pos:line="78" pos:column="50"/></name></expr>;<pos:position pos:line="78" pos:column="51"/></expr_stmt>

	<return pos:line="80" pos:column="9">return <expr><operator pos:line="80" pos:column="16">(<pos:position pos:line="80" pos:column="17"/></operator><literal type="number" pos:line="80" pos:column="17">0<pos:position pos:line="80" pos:column="18"/></literal><operator pos:line="80" pos:column="18">)<pos:position pos:line="80" pos:column="19"/></operator></expr>;<pos:position pos:line="80" pos:column="20"/></return>
}<pos:position pos:line="81" pos:column="2"/></block></function></unit>
