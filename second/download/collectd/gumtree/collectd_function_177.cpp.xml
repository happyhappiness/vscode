<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_function_177.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">us_handle_getval<pos:position pos:line="1" pos:column="28"/></name> <parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name pos:line="1" pos:column="30">FILE<pos:position pos:line="1" pos:column="34"/></name> <modifier pos:line="1" pos:column="35">*<pos:position pos:line="1" pos:column="36"/></modifier></type><name pos:line="1" pos:column="36">fh<pos:position pos:line="1" pos:column="38"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="40">char<pos:position pos:line="1" pos:column="44"/></name> <modifier pos:line="1" pos:column="45">*<pos:position pos:line="1" pos:column="46"/></modifier><modifier pos:line="1" pos:column="46">*<pos:position pos:line="1" pos:column="47"/></modifier></type><name pos:line="1" pos:column="47">fields<pos:position pos:line="1" pos:column="53"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="55">int<pos:position pos:line="1" pos:column="58"/></name></type> <name pos:line="1" pos:column="59">fields_num<pos:position pos:line="1" pos:column="69"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="70"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">char<pos:position pos:line="3" pos:column="13"/></name> <modifier pos:line="3" pos:column="14">*<pos:position pos:line="3" pos:column="15"/></modifier></type><name pos:line="3" pos:column="15">hostname<pos:position pos:line="3" pos:column="23"/></name></decl>;<pos:position pos:line="3" pos:column="24"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">char<pos:position pos:line="4" pos:column="13"/></name> <modifier pos:line="4" pos:column="14">*<pos:position pos:line="4" pos:column="15"/></modifier></type><name pos:line="4" pos:column="15">plugin<pos:position pos:line="4" pos:column="21"/></name></decl>;<pos:position pos:line="4" pos:column="22"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">char<pos:position pos:line="5" pos:column="13"/></name> <modifier pos:line="5" pos:column="14">*<pos:position pos:line="5" pos:column="15"/></modifier></type><name pos:line="5" pos:column="15">plugin_instance<pos:position pos:line="5" pos:column="30"/></name></decl>;<pos:position pos:line="5" pos:column="31"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">char<pos:position pos:line="6" pos:column="13"/></name> <modifier pos:line="6" pos:column="14">*<pos:position pos:line="6" pos:column="15"/></modifier></type><name pos:line="6" pos:column="15">type<pos:position pos:line="6" pos:column="19"/></name></decl>;<pos:position pos:line="6" pos:column="20"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">char<pos:position pos:line="7" pos:column="13"/></name> <modifier pos:line="7" pos:column="14">*<pos:position pos:line="7" pos:column="15"/></modifier></type><name pos:line="7" pos:column="15">type_instance<pos:position pos:line="7" pos:column="28"/></name></decl>;<pos:position pos:line="7" pos:column="29"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">char<pos:position pos:line="8" pos:column="13"/></name></type>  <name><name pos:line="8" pos:column="15">name<pos:position pos:line="8" pos:column="19"/></name><index pos:line="8" pos:column="19">[<expr><literal type="number" pos:line="8" pos:column="20">4<pos:position pos:line="8" pos:column="21"/></literal><operator pos:line="8" pos:column="21">*<pos:position pos:line="8" pos:column="22"/></operator><name pos:line="8" pos:column="22">DATA_MAX_NAME_LEN<pos:position pos:line="8" pos:column="39"/></name></expr>]<pos:position pos:line="8" pos:column="40"/></index></name></decl>;<pos:position pos:line="8" pos:column="41"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="9" pos:column="9">value_cache_t<pos:position pos:line="9" pos:column="22"/></name> <modifier pos:line="9" pos:column="23">*<pos:position pos:line="9" pos:column="24"/></modifier></type><name pos:line="9" pos:column="24">vc<pos:position pos:line="9" pos:column="26"/></name></decl>;<pos:position pos:line="9" pos:column="27"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="10" pos:column="9">int<pos:position pos:line="10" pos:column="12"/></name></type>   <name pos:line="10" pos:column="15">status<pos:position pos:line="10" pos:column="21"/></name></decl>;<pos:position pos:line="10" pos:column="22"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="11" pos:column="9">int<pos:position pos:line="11" pos:column="12"/></name></type>   <name pos:line="11" pos:column="15">i<pos:position pos:line="11" pos:column="16"/></name></decl>;<pos:position pos:line="11" pos:column="17"/></decl_stmt>

	<if pos:line="13" pos:column="9">if <condition pos:line="13" pos:column="12">(<expr><name pos:line="13" pos:column="13">fields_num<pos:position pos:line="13" pos:column="23"/></name> <operator pos:line="13" pos:column="24">!=<pos:position pos:line="13" pos:column="26"/></operator> <literal type="number" pos:line="13" pos:column="27">2<pos:position pos:line="13" pos:column="28"/></literal></expr>)<pos:position pos:line="13" pos:column="29"/></condition><then pos:line="13" pos:column="29">
	<block pos:line="14" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="15" pos:column="17">DEBUG<pos:position pos:line="15" pos:column="22"/></name> <argument_list pos:line="15" pos:column="23">(<argument><expr><literal type="string" pos:line="15" pos:column="24">"unixsock plugin: Wrong number of fields: %i"<pos:position pos:line="15" pos:column="69"/></literal></expr></argument>, <argument><expr><name pos:line="15" pos:column="71">fields_num<pos:position pos:line="15" pos:column="81"/></name></expr></argument>)<pos:position pos:line="15" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="83"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="16" pos:column="17">fprintf<pos:position pos:line="16" pos:column="24"/></name> <argument_list pos:line="16" pos:column="25">(<argument><expr><name pos:line="16" pos:column="26">fh<pos:position pos:line="16" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="16" pos:column="30">"-1 Wrong number of fields: Got %i, expected 2.\n"<pos:position pos:line="16" pos:column="80"/></literal></expr></argument>,
				<argument><expr><name pos:line="17" pos:column="33">fields_num<pos:position pos:line="17" pos:column="43"/></name></expr></argument>)<pos:position pos:line="17" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="45"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="18" pos:column="17">fflush<pos:position pos:line="18" pos:column="23"/></name> <argument_list pos:line="18" pos:column="24">(<argument><expr><name pos:line="18" pos:column="25">fh<pos:position pos:line="18" pos:column="27"/></name></expr></argument>)<pos:position pos:line="18" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="29"/></expr_stmt>
		<return pos:line="19" pos:column="17">return <expr><operator pos:line="19" pos:column="24">(<pos:position pos:line="19" pos:column="25"/></operator><operator pos:line="19" pos:column="25">-<pos:position pos:line="19" pos:column="26"/></operator><literal type="number" pos:line="19" pos:column="26">1<pos:position pos:line="19" pos:column="27"/></literal><operator pos:line="19" pos:column="27">)<pos:position pos:line="19" pos:column="28"/></operator></expr>;<pos:position pos:line="19" pos:column="29"/></return>
	}<pos:position pos:line="20" pos:column="10"/></block></then></if>
	<expr_stmt><expr><call><name pos:line="21" pos:column="9">DEBUG<pos:position pos:line="21" pos:column="14"/></name> <argument_list pos:line="21" pos:column="15">(<argument><expr><literal type="string" pos:line="21" pos:column="16">"unixsock plugin: Got query for `%s'"<pos:position pos:line="21" pos:column="53"/></literal></expr></argument>, <argument><expr><name><name pos:line="21" pos:column="55">fields<pos:position pos:line="21" pos:column="61"/></name><index pos:line="21" pos:column="61">[<expr><literal type="number" pos:line="21" pos:column="62">1<pos:position pos:line="21" pos:column="63"/></literal></expr>]<pos:position pos:line="21" pos:column="64"/></index></name></expr></argument>)<pos:position pos:line="21" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="66"/></expr_stmt>

	<expr_stmt><expr><name pos:line="23" pos:column="9">status<pos:position pos:line="23" pos:column="15"/></name> <operator pos:line="23" pos:column="16">=<pos:position pos:line="23" pos:column="17"/></operator> <call><name pos:line="23" pos:column="18">parse_identifier<pos:position pos:line="23" pos:column="34"/></name> <argument_list pos:line="23" pos:column="35">(<argument><expr><name><name pos:line="23" pos:column="36">fields<pos:position pos:line="23" pos:column="42"/></name><index pos:line="23" pos:column="42">[<expr><literal type="number" pos:line="23" pos:column="43">1<pos:position pos:line="23" pos:column="44"/></literal></expr>]<pos:position pos:line="23" pos:column="45"/></index></name></expr></argument>, <argument><expr><operator pos:line="23" pos:column="47">&amp;<pos:position pos:line="23" pos:column="52"/></operator><name pos:line="23" pos:column="48">hostname<pos:position pos:line="23" pos:column="56"/></name></expr></argument>,
			<argument><expr><operator pos:line="24" pos:column="25">&amp;<pos:position pos:line="24" pos:column="30"/></operator><name pos:line="24" pos:column="26">plugin<pos:position pos:line="24" pos:column="32"/></name></expr></argument>, <argument><expr><operator pos:line="24" pos:column="34">&amp;<pos:position pos:line="24" pos:column="39"/></operator><name pos:line="24" pos:column="35">plugin_instance<pos:position pos:line="24" pos:column="50"/></name></expr></argument>,
			<argument><expr><operator pos:line="25" pos:column="25">&amp;<pos:position pos:line="25" pos:column="30"/></operator><name pos:line="25" pos:column="26">type<pos:position pos:line="25" pos:column="30"/></name></expr></argument>, <argument><expr><operator pos:line="25" pos:column="32">&amp;<pos:position pos:line="25" pos:column="37"/></operator><name pos:line="25" pos:column="33">type_instance<pos:position pos:line="25" pos:column="46"/></name></expr></argument>)<pos:position pos:line="25" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="48"/></expr_stmt>
	<if pos:line="26" pos:column="9">if <condition pos:line="26" pos:column="12">(<expr><name pos:line="26" pos:column="13">status<pos:position pos:line="26" pos:column="19"/></name> <operator pos:line="26" pos:column="20">!=<pos:position pos:line="26" pos:column="22"/></operator> <literal type="number" pos:line="26" pos:column="23">0<pos:position pos:line="26" pos:column="24"/></literal></expr>)<pos:position pos:line="26" pos:column="25"/></condition><then pos:line="26" pos:column="25">
	<block pos:line="27" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="28" pos:column="17">DEBUG<pos:position pos:line="28" pos:column="22"/></name> <argument_list pos:line="28" pos:column="23">(<argument><expr><literal type="string" pos:line="28" pos:column="24">"unixsock plugin: Cannot parse `%s'"<pos:position pos:line="28" pos:column="60"/></literal></expr></argument>, <argument><expr><name><name pos:line="28" pos:column="62">fields<pos:position pos:line="28" pos:column="68"/></name><index pos:line="28" pos:column="68">[<expr><literal type="number" pos:line="28" pos:column="69">1<pos:position pos:line="28" pos:column="70"/></literal></expr>]<pos:position pos:line="28" pos:column="71"/></index></name></expr></argument>)<pos:position pos:line="28" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="73"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="29" pos:column="17">fprintf<pos:position pos:line="29" pos:column="24"/></name> <argument_list pos:line="29" pos:column="25">(<argument><expr><name pos:line="29" pos:column="26">fh<pos:position pos:line="29" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="29" pos:column="30">"-1 Cannot parse identifier.\n"<pos:position pos:line="29" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="63"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="30" pos:column="17">fflush<pos:position pos:line="30" pos:column="23"/></name> <argument_list pos:line="30" pos:column="24">(<argument><expr><name pos:line="30" pos:column="25">fh<pos:position pos:line="30" pos:column="27"/></name></expr></argument>)<pos:position pos:line="30" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="29"/></expr_stmt>
		<return pos:line="31" pos:column="17">return <expr><operator pos:line="31" pos:column="24">(<pos:position pos:line="31" pos:column="25"/></operator><operator pos:line="31" pos:column="25">-<pos:position pos:line="31" pos:column="26"/></operator><literal type="number" pos:line="31" pos:column="26">1<pos:position pos:line="31" pos:column="27"/></literal><operator pos:line="31" pos:column="27">)<pos:position pos:line="31" pos:column="28"/></operator></expr>;<pos:position pos:line="31" pos:column="29"/></return>
	}<pos:position pos:line="32" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="34" pos:column="9">status<pos:position pos:line="34" pos:column="15"/></name> <operator pos:line="34" pos:column="16">=<pos:position pos:line="34" pos:column="17"/></operator> <call><name pos:line="34" pos:column="18">format_name<pos:position pos:line="34" pos:column="29"/></name> <argument_list pos:line="34" pos:column="30">(<argument><expr><name pos:line="34" pos:column="31">name<pos:position pos:line="34" pos:column="35"/></name></expr></argument>, <argument><expr><sizeof pos:line="34" pos:column="37">sizeof <argument_list pos:line="34" pos:column="44">(<argument><expr><name pos:line="34" pos:column="45">name<pos:position pos:line="34" pos:column="49"/></name></expr></argument>)<pos:position pos:line="34" pos:column="50"/></argument_list></sizeof></expr></argument>,
			<argument><expr><name pos:line="35" pos:column="25">hostname<pos:position pos:line="35" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="35">plugin<pos:position pos:line="35" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="43">plugin_instance<pos:position pos:line="35" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="60">type<pos:position pos:line="35" pos:column="64"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="66">type_instance<pos:position pos:line="35" pos:column="79"/></name></expr></argument>)<pos:position pos:line="35" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="81"/></expr_stmt>
	<if pos:line="36" pos:column="9">if <condition pos:line="36" pos:column="12">(<expr><name pos:line="36" pos:column="13">status<pos:position pos:line="36" pos:column="19"/></name> <operator pos:line="36" pos:column="20">!=<pos:position pos:line="36" pos:column="22"/></operator> <literal type="number" pos:line="36" pos:column="23">0<pos:position pos:line="36" pos:column="24"/></literal></expr>)<pos:position pos:line="36" pos:column="25"/></condition><then pos:line="36" pos:column="25">
	<block pos:line="37" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="38" pos:column="17">fprintf<pos:position pos:line="38" pos:column="24"/></name> <argument_list pos:line="38" pos:column="25">(<argument><expr><name pos:line="38" pos:column="26">fh<pos:position pos:line="38" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="38" pos:column="30">"-1 format_name failed.\n"<pos:position pos:line="38" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="38" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="58"/></expr_stmt>
		<return pos:line="39" pos:column="17">return <expr><operator pos:line="39" pos:column="24">(<pos:position pos:line="39" pos:column="25"/></operator><operator pos:line="39" pos:column="25">-<pos:position pos:line="39" pos:column="26"/></operator><literal type="number" pos:line="39" pos:column="26">1<pos:position pos:line="39" pos:column="27"/></literal><operator pos:line="39" pos:column="27">)<pos:position pos:line="39" pos:column="28"/></operator></expr>;<pos:position pos:line="39" pos:column="29"/></return>
	}<pos:position pos:line="40" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="42" pos:column="9">pthread_mutex_lock<pos:position pos:line="42" pos:column="27"/></name> <argument_list pos:line="42" pos:column="28">(<argument><expr><operator pos:line="42" pos:column="29">&amp;<pos:position pos:line="42" pos:column="34"/></operator><name pos:line="42" pos:column="30">cache_lock<pos:position pos:line="42" pos:column="40"/></name></expr></argument>)<pos:position pos:line="42" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="42"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="44" pos:column="9">DEBUG<pos:position pos:line="44" pos:column="14"/></name> <argument_list pos:line="44" pos:column="15">(<argument><expr><literal type="string" pos:line="44" pos:column="16">"vc = cache_search (%s)"<pos:position pos:line="44" pos:column="40"/></literal></expr></argument>, <argument><expr><name pos:line="44" pos:column="42">name<pos:position pos:line="44" pos:column="46"/></name></expr></argument>)<pos:position pos:line="44" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="48"/></expr_stmt>
	<expr_stmt><expr><name pos:line="45" pos:column="9">vc<pos:position pos:line="45" pos:column="11"/></name> <operator pos:line="45" pos:column="12">=<pos:position pos:line="45" pos:column="13"/></operator> <call><name pos:line="45" pos:column="14">cache_search<pos:position pos:line="45" pos:column="26"/></name> <argument_list pos:line="45" pos:column="27">(<argument><expr><name pos:line="45" pos:column="28">name<pos:position pos:line="45" pos:column="32"/></name></expr></argument>)<pos:position pos:line="45" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="34"/></expr_stmt>

	<if pos:line="47" pos:column="9">if <condition pos:line="47" pos:column="12">(<expr><name pos:line="47" pos:column="13">vc<pos:position pos:line="47" pos:column="15"/></name> <operator pos:line="47" pos:column="16">==<pos:position pos:line="47" pos:column="18"/></operator> <name pos:line="47" pos:column="19">NULL<pos:position pos:line="47" pos:column="23"/></name></expr>)<pos:position pos:line="47" pos:column="24"/></condition><then pos:line="47" pos:column="24">
	<block pos:line="48" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="49" pos:column="17">DEBUG<pos:position pos:line="49" pos:column="22"/></name> <argument_list pos:line="49" pos:column="23">(<argument><expr><literal type="string" pos:line="49" pos:column="24">"Did not find cache entry."<pos:position pos:line="49" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="49" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="53"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="50" pos:column="17">fprintf<pos:position pos:line="50" pos:column="24"/></name> <argument_list pos:line="50" pos:column="25">(<argument><expr><name pos:line="50" pos:column="26">fh<pos:position pos:line="50" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="50" pos:column="30">"-1 No such value"<pos:position pos:line="50" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="50" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="50"/></expr_stmt>
	}<pos:position pos:line="51" pos:column="10"/></block></then>
	<else pos:line="52" pos:column="9">else
	<block pos:line="53" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="54" pos:column="17">DEBUG<pos:position pos:line="54" pos:column="22"/></name> <argument_list pos:line="54" pos:column="23">(<argument><expr><literal type="string" pos:line="54" pos:column="24">"Found cache entry."<pos:position pos:line="54" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="54" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="46"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="55" pos:column="17">fprintf<pos:position pos:line="55" pos:column="24"/></name> <argument_list pos:line="55" pos:column="25">(<argument><expr><name pos:line="55" pos:column="26">fh<pos:position pos:line="55" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="55" pos:column="30">"%i"<pos:position pos:line="55" pos:column="34"/></literal></expr></argument>, <argument><expr><name><name pos:line="55" pos:column="36">vc<pos:position pos:line="55" pos:column="38"/></name><operator pos:line="55" pos:column="38">-&gt;<pos:position pos:line="55" pos:column="43"/></operator><name pos:line="55" pos:column="40">values_num<pos:position pos:line="55" pos:column="50"/></name></name></expr></argument>)<pos:position pos:line="55" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="52"/></expr_stmt>
		<for pos:line="56" pos:column="17">for <control pos:line="56" pos:column="21">(<init><expr><name pos:line="56" pos:column="22">i<pos:position pos:line="56" pos:column="23"/></name> <operator pos:line="56" pos:column="24">=<pos:position pos:line="56" pos:column="25"/></operator> <literal type="number" pos:line="56" pos:column="26">0<pos:position pos:line="56" pos:column="27"/></literal></expr>;<pos:position pos:line="56" pos:column="28"/></init> <condition><expr><name pos:line="56" pos:column="29">i<pos:position pos:line="56" pos:column="30"/></name> <operator pos:line="56" pos:column="31">&lt;<pos:position pos:line="56" pos:column="35"/></operator> <name><name pos:line="56" pos:column="33">vc<pos:position pos:line="56" pos:column="35"/></name><operator pos:line="56" pos:column="35">-&gt;<pos:position pos:line="56" pos:column="40"/></operator><name pos:line="56" pos:column="37">values_num<pos:position pos:line="56" pos:column="47"/></name></name></expr>;<pos:position pos:line="56" pos:column="48"/></condition> <incr><expr><name pos:line="56" pos:column="49">i<pos:position pos:line="56" pos:column="50"/></name><operator pos:line="56" pos:column="50">++<pos:position pos:line="56" pos:column="52"/></operator></expr></incr>)<pos:position pos:line="56" pos:column="53"/></control>
		<block pos:line="57" pos:column="17">{
			<expr_stmt><expr><call><name pos:line="58" pos:column="25">fprintf<pos:position pos:line="58" pos:column="32"/></name> <argument_list pos:line="58" pos:column="33">(<argument><expr><name pos:line="58" pos:column="34">fh<pos:position pos:line="58" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="58" pos:column="38">" %s="<pos:position pos:line="58" pos:column="44"/></literal></expr></argument>, <argument><expr><name><name pos:line="58" pos:column="46">vc<pos:position pos:line="58" pos:column="48"/></name><operator pos:line="58" pos:column="48">-&gt;<pos:position pos:line="58" pos:column="53"/></operator><name pos:line="58" pos:column="50">ds<pos:position pos:line="58" pos:column="52"/></name><operator pos:line="58" pos:column="52">-&gt;<pos:position pos:line="58" pos:column="57"/></operator><name pos:line="58" pos:column="54">ds<pos:position pos:line="58" pos:column="56"/></name><index pos:line="58" pos:column="56">[<expr><name pos:line="58" pos:column="57">i<pos:position pos:line="58" pos:column="58"/></name></expr>]<pos:position pos:line="58" pos:column="59"/></index></name><operator pos:line="58" pos:column="59">.<pos:position pos:line="58" pos:column="60"/></operator><name pos:line="58" pos:column="60">name<pos:position pos:line="58" pos:column="64"/></name></expr></argument>)<pos:position pos:line="58" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="66"/></expr_stmt>
			<if pos:line="59" pos:column="25">if <condition pos:line="59" pos:column="28">(<expr><call><name pos:line="59" pos:column="29">isnan<pos:position pos:line="59" pos:column="34"/></name> <argument_list pos:line="59" pos:column="35">(<argument><expr><name><name pos:line="59" pos:column="36">vc<pos:position pos:line="59" pos:column="38"/></name><operator pos:line="59" pos:column="38">-&gt;<pos:position pos:line="59" pos:column="43"/></operator><name pos:line="59" pos:column="40">gauge<pos:position pos:line="59" pos:column="45"/></name><index pos:line="59" pos:column="45">[<expr><name pos:line="59" pos:column="46">i<pos:position pos:line="59" pos:column="47"/></name></expr>]<pos:position pos:line="59" pos:column="48"/></index></name></expr></argument>)<pos:position pos:line="59" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="59" pos:column="50"/></condition><then pos:line="59" pos:column="50">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="60" pos:column="33">fprintf<pos:position pos:line="60" pos:column="40"/></name> <argument_list pos:line="60" pos:column="41">(<argument><expr><name pos:line="60" pos:column="42">fh<pos:position pos:line="60" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="60" pos:column="46">"NaN"<pos:position pos:line="60" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="60" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="53"/></expr_stmt></block></then>
			<else pos:line="61" pos:column="25">else
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="62" pos:column="33">fprintf<pos:position pos:line="62" pos:column="40"/></name> <argument_list pos:line="62" pos:column="41">(<argument><expr><name pos:line="62" pos:column="42">fh<pos:position pos:line="62" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="62" pos:column="46">"%12e"<pos:position pos:line="62" pos:column="52"/></literal></expr></argument>, <argument><expr><name><name pos:line="62" pos:column="54">vc<pos:position pos:line="62" pos:column="56"/></name><operator pos:line="62" pos:column="56">-&gt;<pos:position pos:line="62" pos:column="61"/></operator><name pos:line="62" pos:column="58">gauge<pos:position pos:line="62" pos:column="63"/></name><index pos:line="62" pos:column="63">[<expr><name pos:line="62" pos:column="64">i<pos:position pos:line="62" pos:column="65"/></name></expr>]<pos:position pos:line="62" pos:column="66"/></index></name></expr></argument>)<pos:position pos:line="62" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="68"/></expr_stmt></block></else></if>
		}<pos:position pos:line="63" pos:column="18"/></block></for>
	}<pos:position pos:line="64" pos:column="10"/></block></else></if>

	<comment type="block" pos:line="66" pos:column="9">/* Free the mutex as soon as possible and definitely before flushing */</comment>
	<expr_stmt><expr><call><name pos:line="67" pos:column="9">pthread_mutex_unlock<pos:position pos:line="67" pos:column="29"/></name> <argument_list pos:line="67" pos:column="30">(<argument><expr><operator pos:line="67" pos:column="31">&amp;<pos:position pos:line="67" pos:column="36"/></operator><name pos:line="67" pos:column="32">cache_lock<pos:position pos:line="67" pos:column="42"/></name></expr></argument>)<pos:position pos:line="67" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="44"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="69" pos:column="9">fprintf<pos:position pos:line="69" pos:column="16"/></name> <argument_list pos:line="69" pos:column="17">(<argument><expr><name pos:line="69" pos:column="18">fh<pos:position pos:line="69" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="69" pos:column="22">"\n"<pos:position pos:line="69" pos:column="26"/></literal></expr></argument>)<pos:position pos:line="69" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="28"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="70" pos:column="9">fflush<pos:position pos:line="70" pos:column="15"/></name> <argument_list pos:line="70" pos:column="16">(<argument><expr><name pos:line="70" pos:column="17">fh<pos:position pos:line="70" pos:column="19"/></name></expr></argument>)<pos:position pos:line="70" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="21"/></expr_stmt>

	<return pos:line="72" pos:column="9">return <expr><operator pos:line="72" pos:column="16">(<pos:position pos:line="72" pos:column="17"/></operator><literal type="number" pos:line="72" pos:column="17">0<pos:position pos:line="72" pos:column="18"/></literal><operator pos:line="72" pos:column="18">)<pos:position pos:line="72" pos:column="19"/></operator></expr>;<pos:position pos:line="72" pos:column="20"/></return>
}<pos:position pos:line="73" pos:column="2"/></block></function></unit>
