<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_2547_collectd-5.6.1.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">meta_data_clone_merge<pos:position pos:line="1" pos:column="26"/></name> <parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><name pos:line="1" pos:column="28">meta_data_t<pos:position pos:line="1" pos:column="39"/></name> <modifier pos:line="1" pos:column="40">*<pos:position pos:line="1" pos:column="41"/></modifier><modifier pos:line="1" pos:column="41">*<pos:position pos:line="1" pos:column="42"/></modifier></type><name pos:line="1" pos:column="42">dest<pos:position pos:line="1" pos:column="46"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="48">meta_data_t<pos:position pos:line="1" pos:column="59"/></name> <modifier pos:line="1" pos:column="60">*<pos:position pos:line="1" pos:column="61"/></modifier></type><name pos:line="1" pos:column="61">orig<pos:position pos:line="1" pos:column="65"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="66"/></parameter_list> <comment type="block" pos:line="1" pos:column="67">/* {{{ */</comment>
<block pos:line="2" pos:column="1">{
  <if pos:line="3" pos:column="3">if <condition pos:line="3" pos:column="6">(<expr><name pos:line="3" pos:column="7">orig<pos:position pos:line="3" pos:column="11"/></name> <operator pos:line="3" pos:column="12">==<pos:position pos:line="3" pos:column="14"/></operator> <name pos:line="3" pos:column="15">NULL<pos:position pos:line="3" pos:column="19"/></name></expr>)<pos:position pos:line="3" pos:column="20"/></condition><then pos:line="3" pos:column="20">
    <block type="pseudo"><return pos:line="4" pos:column="5">return <expr><operator pos:line="4" pos:column="12">(<pos:position pos:line="4" pos:column="13"/></operator><literal type="number" pos:line="4" pos:column="13">0<pos:position pos:line="4" pos:column="14"/></literal><operator pos:line="4" pos:column="14">)<pos:position pos:line="4" pos:column="15"/></operator></expr>;<pos:position pos:line="4" pos:column="16"/></return></block></then></if>

  <if pos:line="6" pos:column="3">if <condition pos:line="6" pos:column="6">(<expr><operator pos:line="6" pos:column="7">*<pos:position pos:line="6" pos:column="8"/></operator><name pos:line="6" pos:column="8">dest<pos:position pos:line="6" pos:column="12"/></name> <operator pos:line="6" pos:column="13">==<pos:position pos:line="6" pos:column="15"/></operator> <name pos:line="6" pos:column="16">NULL<pos:position pos:line="6" pos:column="20"/></name></expr>)<pos:position pos:line="6" pos:column="21"/></condition><then pos:line="6" pos:column="21"> <block pos:line="6" pos:column="22">{
    <expr_stmt><expr><operator pos:line="7" pos:column="5">*<pos:position pos:line="7" pos:column="6"/></operator><name pos:line="7" pos:column="6">dest<pos:position pos:line="7" pos:column="10"/></name> <operator pos:line="7" pos:column="11">=<pos:position pos:line="7" pos:column="12"/></operator> <call><name pos:line="7" pos:column="13">meta_data_clone<pos:position pos:line="7" pos:column="28"/></name><argument_list pos:line="7" pos:column="28">(<argument><expr><name pos:line="7" pos:column="29">orig<pos:position pos:line="7" pos:column="33"/></name></expr></argument>)<pos:position pos:line="7" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="35"/></expr_stmt>
    <return pos:line="8" pos:column="5">return<expr><operator pos:line="8" pos:column="11">(<pos:position pos:line="8" pos:column="12"/></operator><literal type="number" pos:line="8" pos:column="12">0<pos:position pos:line="8" pos:column="13"/></literal><operator pos:line="8" pos:column="13">)<pos:position pos:line="8" pos:column="14"/></operator></expr>;<pos:position pos:line="8" pos:column="15"/></return>
  }<pos:position pos:line="9" pos:column="4"/></block></then></if>

  <expr_stmt><expr><call><name pos:line="11" pos:column="3">pthread_mutex_lock<pos:position pos:line="11" pos:column="21"/></name> <argument_list pos:line="11" pos:column="22">(<argument><expr><operator pos:line="11" pos:column="23">&amp;<pos:position pos:line="11" pos:column="28"/></operator><name><name pos:line="11" pos:column="24">orig<pos:position pos:line="11" pos:column="28"/></name><operator pos:line="11" pos:column="28">-&gt;<pos:position pos:line="11" pos:column="33"/></operator><name pos:line="11" pos:column="30">lock<pos:position pos:line="11" pos:column="34"/></name></name></expr></argument>)<pos:position pos:line="11" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="36"/></expr_stmt>
  <for pos:line="12" pos:column="3">for <control pos:line="12" pos:column="7">(<init><decl><type><name pos:line="12" pos:column="8">meta_entry_t<pos:position pos:line="12" pos:column="20"/></name> <modifier pos:line="12" pos:column="21">*<pos:position pos:line="12" pos:column="22"/></modifier></type><name pos:line="12" pos:column="22">e<pos:position pos:line="12" pos:column="23"/></name><init pos:line="12" pos:column="23">=<expr><name><name pos:line="12" pos:column="24">orig<pos:position pos:line="12" pos:column="28"/></name><operator pos:line="12" pos:column="28">-&gt;<pos:position pos:line="12" pos:column="33"/></operator><name pos:line="12" pos:column="30">head<pos:position pos:line="12" pos:column="34"/></name></name></expr></init></decl>;<pos:position pos:line="12" pos:column="35"/></init> <condition><expr><name pos:line="12" pos:column="36">e<pos:position pos:line="12" pos:column="37"/></name> <operator pos:line="12" pos:column="38">!=<pos:position pos:line="12" pos:column="40"/></operator> <name pos:line="12" pos:column="41">NULL<pos:position pos:line="12" pos:column="45"/></name></expr>;<pos:position pos:line="12" pos:column="46"/></condition> <incr><expr><name pos:line="12" pos:column="47">e<pos:position pos:line="12" pos:column="48"/></name> <operator pos:line="12" pos:column="49">=<pos:position pos:line="12" pos:column="50"/></operator> <name><name pos:line="12" pos:column="51">e<pos:position pos:line="12" pos:column="52"/></name><operator pos:line="12" pos:column="52">-&gt;<pos:position pos:line="12" pos:column="57"/></operator><name pos:line="12" pos:column="54">next<pos:position pos:line="12" pos:column="58"/></name></name></expr></incr>)<pos:position pos:line="12" pos:column="59"/></control>
  <block pos:line="13" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="14" pos:column="5">md_entry_insert_clone<pos:position pos:line="14" pos:column="26"/></name><argument_list pos:line="14" pos:column="26">(<argument><expr><operator pos:line="14" pos:column="27">(<pos:position pos:line="14" pos:column="28"/></operator><operator pos:line="14" pos:column="28">*<pos:position pos:line="14" pos:column="29"/></operator><name pos:line="14" pos:column="29">dest<pos:position pos:line="14" pos:column="33"/></name><operator pos:line="14" pos:column="33">)<pos:position pos:line="14" pos:column="34"/></operator></expr></argument>, <argument><expr><name pos:line="14" pos:column="36">e<pos:position pos:line="14" pos:column="37"/></name></expr></argument>)<pos:position pos:line="14" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="39"/></expr_stmt>
  }<pos:position pos:line="15" pos:column="4"/></block></for>
  <expr_stmt><expr><call><name pos:line="16" pos:column="3">pthread_mutex_unlock<pos:position pos:line="16" pos:column="23"/></name> <argument_list pos:line="16" pos:column="24">(<argument><expr><operator pos:line="16" pos:column="25">&amp;<pos:position pos:line="16" pos:column="30"/></operator><name><name pos:line="16" pos:column="26">orig<pos:position pos:line="16" pos:column="30"/></name><operator pos:line="16" pos:column="30">-&gt;<pos:position pos:line="16" pos:column="35"/></operator><name pos:line="16" pos:column="32">lock<pos:position pos:line="16" pos:column="36"/></name></name></expr></argument>)<pos:position pos:line="16" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="38"/></expr_stmt>

  <return pos:line="18" pos:column="3">return <expr><operator pos:line="18" pos:column="10">(<pos:position pos:line="18" pos:column="11"/></operator><literal type="number" pos:line="18" pos:column="11">0<pos:position pos:line="18" pos:column="12"/></literal><operator pos:line="18" pos:column="12">)<pos:position pos:line="18" pos:column="13"/></operator></expr>;<pos:position pos:line="18" pos:column="14"/></return>
}<pos:position pos:line="19" pos:column="2"/></block></function></unit>
