<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1665_collectd-5.6.2.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">cconn_connect<pos:position pos:line="1" pos:column="25"/></name><parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><name><name pos:line="1" pos:column="26">struct<pos:position pos:line="1" pos:column="32"/></name> <name pos:line="1" pos:column="33">cconn<pos:position pos:line="1" pos:column="38"/></name></name> <modifier pos:line="1" pos:column="39">*<pos:position pos:line="1" pos:column="40"/></modifier></type><name pos:line="1" pos:column="40">io<pos:position pos:line="1" pos:column="42"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="43"/></parameter_list> <block pos:line="1" pos:column="44">{
  <decl_stmt><decl><type><name><name pos:line="2" pos:column="3">struct<pos:position pos:line="2" pos:column="9"/></name> <name pos:line="2" pos:column="10">sockaddr_un<pos:position pos:line="2" pos:column="21"/></name></name></type> <name pos:line="2" pos:column="22">address<pos:position pos:line="2" pos:column="29"/></name> <init pos:line="2" pos:column="30">= <expr><block pos:line="2" pos:column="32">{<expr><literal type="number" pos:line="2" pos:column="33">0<pos:position pos:line="2" pos:column="34"/></literal></expr>}<pos:position pos:line="2" pos:column="35"/></block></expr></init></decl>;<pos:position pos:line="2" pos:column="36"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">int<pos:position pos:line="3" pos:column="6"/></name></type> <name pos:line="3" pos:column="7">flags<pos:position pos:line="3" pos:column="12"/></name></decl>, <decl><type ref="prev"/><name pos:line="3" pos:column="14">fd<pos:position pos:line="3" pos:column="16"/></name></decl>, <decl><type ref="prev"/><name pos:line="3" pos:column="18">err<pos:position pos:line="3" pos:column="21"/></name></decl>;<pos:position pos:line="3" pos:column="22"/></decl_stmt>
  <if pos:line="4" pos:column="3">if <condition pos:line="4" pos:column="6">(<expr><name><name pos:line="4" pos:column="7">io<pos:position pos:line="4" pos:column="9"/></name><operator pos:line="4" pos:column="9">-&gt;<pos:position pos:line="4" pos:column="14"/></operator><name pos:line="4" pos:column="11">state<pos:position pos:line="4" pos:column="16"/></name></name> <operator pos:line="4" pos:column="17">!=<pos:position pos:line="4" pos:column="19"/></operator> <name pos:line="4" pos:column="20">CSTATE_UNCONNECTED<pos:position pos:line="4" pos:column="38"/></name></expr>)<pos:position pos:line="4" pos:column="39"/></condition><then pos:line="4" pos:column="39"> <block pos:line="4" pos:column="40">{
    <expr_stmt><expr><call><name pos:line="5" pos:column="5">ERROR<pos:position pos:line="5" pos:column="10"/></name><argument_list pos:line="5" pos:column="10">(<argument><expr><literal type="string" pos:line="5" pos:column="11">"ceph plugin: cconn_connect: io-&gt;state != CSTATE_UNCONNECTED"<pos:position pos:line="5" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="5" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="74"/></expr_stmt>
    <return pos:line="6" pos:column="5">return <expr><operator pos:line="6" pos:column="12">-<pos:position pos:line="6" pos:column="13"/></operator><name pos:line="6" pos:column="13">EDOM<pos:position pos:line="6" pos:column="17"/></name></expr>;<pos:position pos:line="6" pos:column="18"/></return>
  }<pos:position pos:line="7" pos:column="4"/></block></then></if>
  <expr_stmt><expr><name pos:line="8" pos:column="3">fd<pos:position pos:line="8" pos:column="5"/></name> <operator pos:line="8" pos:column="6">=<pos:position pos:line="8" pos:column="7"/></operator> <call><name pos:line="8" pos:column="8">socket<pos:position pos:line="8" pos:column="14"/></name><argument_list pos:line="8" pos:column="14">(<argument><expr><name pos:line="8" pos:column="15">PF_UNIX<pos:position pos:line="8" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="24">SOCK_STREAM<pos:position pos:line="8" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="8" pos:column="37">0<pos:position pos:line="8" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="40"/></expr_stmt>
  <if pos:line="9" pos:column="3">if <condition pos:line="9" pos:column="6">(<expr><name pos:line="9" pos:column="7">fd<pos:position pos:line="9" pos:column="9"/></name> <operator pos:line="9" pos:column="10">&lt;<pos:position pos:line="9" pos:column="14"/></operator> <literal type="number" pos:line="9" pos:column="12">0<pos:position pos:line="9" pos:column="13"/></literal></expr>)<pos:position pos:line="9" pos:column="14"/></condition><then pos:line="9" pos:column="14"> <block pos:line="9" pos:column="15">{
    <expr_stmt><expr><name pos:line="10" pos:column="5">err<pos:position pos:line="10" pos:column="8"/></name> <operator pos:line="10" pos:column="9">=<pos:position pos:line="10" pos:column="10"/></operator> <operator pos:line="10" pos:column="11">-<pos:position pos:line="10" pos:column="12"/></operator><name pos:line="10" pos:column="12">errno<pos:position pos:line="10" pos:column="17"/></name></expr>;<pos:position pos:line="10" pos:column="18"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="11" pos:column="5">ERROR<pos:position pos:line="11" pos:column="10"/></name><argument_list pos:line="11" pos:column="10">(<argument><expr><literal type="string" pos:line="11" pos:column="11">"ceph plugin: cconn_connect: socket(PF_UNIX, SOCK_STREAM, 0) "<pos:position pos:line="11" pos:column="73"/></literal>
          <literal type="string" pos:line="12" pos:column="11">"failed: error %d"<pos:position pos:line="12" pos:column="29"/></literal></expr></argument>,
          <argument><expr><name pos:line="13" pos:column="11">err<pos:position pos:line="13" pos:column="14"/></name></expr></argument>)<pos:position pos:line="13" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="16"/></expr_stmt>
    <return pos:line="14" pos:column="5">return <expr><name pos:line="14" pos:column="12">err<pos:position pos:line="14" pos:column="15"/></name></expr>;<pos:position pos:line="14" pos:column="16"/></return>
  }<pos:position pos:line="15" pos:column="4"/></block></then></if>
  <expr_stmt><expr><name><name pos:line="16" pos:column="3">address<pos:position pos:line="16" pos:column="10"/></name><operator pos:line="16" pos:column="10">.<pos:position pos:line="16" pos:column="11"/></operator><name pos:line="16" pos:column="11">sun_family<pos:position pos:line="16" pos:column="21"/></name></name> <operator pos:line="16" pos:column="22">=<pos:position pos:line="16" pos:column="23"/></operator> <name pos:line="16" pos:column="24">AF_UNIX<pos:position pos:line="16" pos:column="31"/></name></expr>;<pos:position pos:line="16" pos:column="32"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="17" pos:column="3">snprintf<pos:position pos:line="17" pos:column="11"/></name><argument_list pos:line="17" pos:column="11">(<argument><expr><name><name pos:line="17" pos:column="12">address<pos:position pos:line="17" pos:column="19"/></name><operator pos:line="17" pos:column="19">.<pos:position pos:line="17" pos:column="20"/></operator><name pos:line="17" pos:column="20">sun_path<pos:position pos:line="17" pos:column="28"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="17" pos:column="30">sizeof<argument_list pos:line="17" pos:column="36">(<argument><expr><name><name pos:line="17" pos:column="37">address<pos:position pos:line="17" pos:column="44"/></name><operator pos:line="17" pos:column="44">.<pos:position pos:line="17" pos:column="45"/></operator><name pos:line="17" pos:column="45">sun_path<pos:position pos:line="17" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="17" pos:column="54"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="17" pos:column="56">"%s"<pos:position pos:line="17" pos:column="60"/></literal></expr></argument>, <argument><expr><name><name pos:line="17" pos:column="62">io<pos:position pos:line="17" pos:column="64"/></name><operator pos:line="17" pos:column="64">-&gt;<pos:position pos:line="17" pos:column="69"/></operator><name pos:line="17" pos:column="66">d<pos:position pos:line="17" pos:column="67"/></name><operator pos:line="17" pos:column="67">-&gt;<pos:position pos:line="17" pos:column="72"/></operator><name pos:line="17" pos:column="69">asok_path<pos:position pos:line="17" pos:column="78"/></name></name></expr></argument>)<pos:position pos:line="17" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="80"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="18" pos:column="3">RETRY_ON_EINTR<pos:position pos:line="18" pos:column="17"/></name><argument_list pos:line="18" pos:column="17">(<argument><expr><name pos:line="18" pos:column="18">err<pos:position pos:line="18" pos:column="21"/></name></expr></argument>, <argument><expr><call><name pos:line="18" pos:column="23">connect<pos:position pos:line="18" pos:column="30"/></name><argument_list pos:line="18" pos:column="30">(<argument><expr><name pos:line="18" pos:column="31">fd<pos:position pos:line="18" pos:column="33"/></name></expr></argument>, <argument><expr><operator pos:line="18" pos:column="35">(<pos:position pos:line="18" pos:column="36"/></operator>struct <name pos:line="18" pos:column="43">sockaddr<pos:position pos:line="18" pos:column="51"/></name> <operator pos:line="18" pos:column="52">*<pos:position pos:line="18" pos:column="53"/></operator><operator pos:line="18" pos:column="53">)<pos:position pos:line="18" pos:column="54"/></operator><operator pos:line="18" pos:column="54">&amp;<pos:position pos:line="18" pos:column="59"/></operator><name pos:line="18" pos:column="55">address<pos:position pos:line="18" pos:column="62"/></name></expr></argument>,
                              <argument><expr><sizeof pos:line="19" pos:column="31">sizeof<argument_list pos:line="19" pos:column="37">(<argument><expr pos:line="19" pos:column="38">struct <name pos:line="19" pos:column="45">sockaddr_un<pos:position pos:line="19" pos:column="56"/></name></expr></argument>)<pos:position pos:line="19" pos:column="57"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="19" pos:column="58"/></argument_list></call></expr></argument>)<pos:position pos:line="19" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="60"/></expr_stmt>
  <if pos:line="20" pos:column="3">if <condition pos:line="20" pos:column="6">(<expr><name pos:line="20" pos:column="7">err<pos:position pos:line="20" pos:column="10"/></name> <operator pos:line="20" pos:column="11">&lt;<pos:position pos:line="20" pos:column="15"/></operator> <literal type="number" pos:line="20" pos:column="13">0<pos:position pos:line="20" pos:column="14"/></literal></expr>)<pos:position pos:line="20" pos:column="15"/></condition><then pos:line="20" pos:column="15"> <block pos:line="20" pos:column="16">{
    <expr_stmt><expr><call><name pos:line="21" pos:column="5">ERROR<pos:position pos:line="21" pos:column="10"/></name><argument_list pos:line="21" pos:column="10">(<argument><expr><literal type="string" pos:line="21" pos:column="11">"ceph plugin: cconn_connect: connect(%d) failed: error %d"<pos:position pos:line="21" pos:column="69"/></literal></expr></argument>, <argument><expr><name pos:line="21" pos:column="71">fd<pos:position pos:line="21" pos:column="73"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="75">err<pos:position pos:line="21" pos:column="78"/></name></expr></argument>)<pos:position pos:line="21" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="80"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="22" pos:column="5">close<pos:position pos:line="22" pos:column="10"/></name><argument_list pos:line="22" pos:column="10">(<argument><expr><name pos:line="22" pos:column="11">fd<pos:position pos:line="22" pos:column="13"/></name></expr></argument>)<pos:position pos:line="22" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="15"/></expr_stmt>
    <return pos:line="23" pos:column="5">return <expr><name pos:line="23" pos:column="12">err<pos:position pos:line="23" pos:column="15"/></name></expr>;<pos:position pos:line="23" pos:column="16"/></return>
  }<pos:position pos:line="24" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="26" pos:column="3">flags<pos:position pos:line="26" pos:column="8"/></name> <operator pos:line="26" pos:column="9">=<pos:position pos:line="26" pos:column="10"/></operator> <call><name pos:line="26" pos:column="11">fcntl<pos:position pos:line="26" pos:column="16"/></name><argument_list pos:line="26" pos:column="16">(<argument><expr><name pos:line="26" pos:column="17">fd<pos:position pos:line="26" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="21">F_GETFL<pos:position pos:line="26" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="26" pos:column="30">0<pos:position pos:line="26" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="33"/></expr_stmt>
  <if pos:line="27" pos:column="3">if <condition pos:line="27" pos:column="6">(<expr><call><name pos:line="27" pos:column="7">fcntl<pos:position pos:line="27" pos:column="12"/></name><argument_list pos:line="27" pos:column="12">(<argument><expr><name pos:line="27" pos:column="13">fd<pos:position pos:line="27" pos:column="15"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="17">F_SETFL<pos:position pos:line="27" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="26">flags<pos:position pos:line="27" pos:column="31"/></name> <operator pos:line="27" pos:column="32">|<pos:position pos:line="27" pos:column="33"/></operator> <name pos:line="27" pos:column="34">O_NONBLOCK<pos:position pos:line="27" pos:column="44"/></name></expr></argument>)<pos:position pos:line="27" pos:column="45"/></argument_list></call> <operator pos:line="27" pos:column="46">!=<pos:position pos:line="27" pos:column="48"/></operator> <literal type="number" pos:line="27" pos:column="49">0<pos:position pos:line="27" pos:column="50"/></literal></expr>)<pos:position pos:line="27" pos:column="51"/></condition><then pos:line="27" pos:column="51"> <block pos:line="27" pos:column="52">{
    <expr_stmt><expr><name pos:line="28" pos:column="5">err<pos:position pos:line="28" pos:column="8"/></name> <operator pos:line="28" pos:column="9">=<pos:position pos:line="28" pos:column="10"/></operator> <operator pos:line="28" pos:column="11">-<pos:position pos:line="28" pos:column="12"/></operator><name pos:line="28" pos:column="12">errno<pos:position pos:line="28" pos:column="17"/></name></expr>;<pos:position pos:line="28" pos:column="18"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="29" pos:column="5">ERROR<pos:position pos:line="29" pos:column="10"/></name><argument_list pos:line="29" pos:column="10">(<argument><expr><literal type="string" pos:line="29" pos:column="11">"ceph plugin: cconn_connect: fcntl(%d, O_NONBLOCK) error %d"<pos:position pos:line="29" pos:column="71"/></literal></expr></argument>, <argument><expr><name pos:line="29" pos:column="73">fd<pos:position pos:line="29" pos:column="75"/></name></expr></argument>,
          <argument><expr><name pos:line="30" pos:column="11">err<pos:position pos:line="30" pos:column="14"/></name></expr></argument>)<pos:position pos:line="30" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="16"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="31" pos:column="5">close<pos:position pos:line="31" pos:column="10"/></name><argument_list pos:line="31" pos:column="10">(<argument><expr><name pos:line="31" pos:column="11">fd<pos:position pos:line="31" pos:column="13"/></name></expr></argument>)<pos:position pos:line="31" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="15"/></expr_stmt>
    <return pos:line="32" pos:column="5">return <expr><name pos:line="32" pos:column="12">err<pos:position pos:line="32" pos:column="15"/></name></expr>;<pos:position pos:line="32" pos:column="16"/></return>
  }<pos:position pos:line="33" pos:column="4"/></block></then></if>
  <expr_stmt><expr><name><name pos:line="34" pos:column="3">io<pos:position pos:line="34" pos:column="5"/></name><operator pos:line="34" pos:column="5">-&gt;<pos:position pos:line="34" pos:column="10"/></operator><name pos:line="34" pos:column="7">asok<pos:position pos:line="34" pos:column="11"/></name></name> <operator pos:line="34" pos:column="12">=<pos:position pos:line="34" pos:column="13"/></operator> <name pos:line="34" pos:column="14">fd<pos:position pos:line="34" pos:column="16"/></name></expr>;<pos:position pos:line="34" pos:column="17"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="35" pos:column="3">io<pos:position pos:line="35" pos:column="5"/></name><operator pos:line="35" pos:column="5">-&gt;<pos:position pos:line="35" pos:column="10"/></operator><name pos:line="35" pos:column="7">state<pos:position pos:line="35" pos:column="12"/></name></name> <operator pos:line="35" pos:column="13">=<pos:position pos:line="35" pos:column="14"/></operator> <name pos:line="35" pos:column="15">CSTATE_WRITE_REQUEST<pos:position pos:line="35" pos:column="35"/></name></expr>;<pos:position pos:line="35" pos:column="36"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="36" pos:column="3">io<pos:position pos:line="36" pos:column="5"/></name><operator pos:line="36" pos:column="5">-&gt;<pos:position pos:line="36" pos:column="10"/></operator><name pos:line="36" pos:column="7">amt<pos:position pos:line="36" pos:column="10"/></name></name> <operator pos:line="36" pos:column="11">=<pos:position pos:line="36" pos:column="12"/></operator> <literal type="number" pos:line="36" pos:column="13">0<pos:position pos:line="36" pos:column="14"/></literal></expr>;<pos:position pos:line="36" pos:column="15"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="37" pos:column="3">io<pos:position pos:line="37" pos:column="5"/></name><operator pos:line="37" pos:column="5">-&gt;<pos:position pos:line="37" pos:column="10"/></operator><name pos:line="37" pos:column="7">json_len<pos:position pos:line="37" pos:column="15"/></name></name> <operator pos:line="37" pos:column="16">=<pos:position pos:line="37" pos:column="17"/></operator> <literal type="number" pos:line="37" pos:column="18">0<pos:position pos:line="37" pos:column="19"/></literal></expr>;<pos:position pos:line="37" pos:column="20"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="38" pos:column="3">io<pos:position pos:line="38" pos:column="5"/></name><operator pos:line="38" pos:column="5">-&gt;<pos:position pos:line="38" pos:column="10"/></operator><name pos:line="38" pos:column="7">json<pos:position pos:line="38" pos:column="11"/></name></name> <operator pos:line="38" pos:column="12">=<pos:position pos:line="38" pos:column="13"/></operator> <name pos:line="38" pos:column="14">NULL<pos:position pos:line="38" pos:column="18"/></name></expr>;<pos:position pos:line="38" pos:column="19"/></expr_stmt>
  <return pos:line="39" pos:column="3">return <expr><literal type="number" pos:line="39" pos:column="10">0<pos:position pos:line="39" pos:column="11"/></literal></expr>;<pos:position pos:line="39" pos:column="12"/></return>
}<pos:position pos:line="40" pos:column="2"/></block></function></unit>
