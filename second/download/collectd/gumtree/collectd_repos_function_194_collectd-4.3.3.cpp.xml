<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_194_collectd-4.3.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">us_open_socket<pos:position pos:line="1" pos:column="26"/></name> <parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><name pos:line="1" pos:column="28">void<pos:position pos:line="1" pos:column="32"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="33"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">sockaddr_un<pos:position pos:line="3" pos:column="27"/></name></name></type> <name pos:line="3" pos:column="28">sa<pos:position pos:line="3" pos:column="30"/></name></decl>;<pos:position pos:line="3" pos:column="31"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">status<pos:position pos:line="4" pos:column="19"/></name></decl>;<pos:position pos:line="4" pos:column="20"/></decl_stmt>

	<expr_stmt><expr><name pos:line="6" pos:column="9">sock_fd<pos:position pos:line="6" pos:column="16"/></name> <operator pos:line="6" pos:column="17">=<pos:position pos:line="6" pos:column="18"/></operator> <call><name pos:line="6" pos:column="19">socket<pos:position pos:line="6" pos:column="25"/></name> <argument_list pos:line="6" pos:column="26">(<argument><expr><name pos:line="6" pos:column="27">PF_UNIX<pos:position pos:line="6" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="6" pos:column="36">SOCK_STREAM<pos:position pos:line="6" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="6" pos:column="49">0<pos:position pos:line="6" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="52"/></expr_stmt>
	<if pos:line="7" pos:column="9">if <condition pos:line="7" pos:column="12">(<expr><name pos:line="7" pos:column="13">sock_fd<pos:position pos:line="7" pos:column="20"/></name> <operator pos:line="7" pos:column="21">&lt;<pos:position pos:line="7" pos:column="25"/></operator> <literal type="number" pos:line="7" pos:column="23">0<pos:position pos:line="7" pos:column="24"/></literal></expr>)<pos:position pos:line="7" pos:column="25"/></condition><then pos:line="7" pos:column="25">
	<block pos:line="8" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="9" pos:column="17">char<pos:position pos:line="9" pos:column="21"/></name></type> <name><name pos:line="9" pos:column="22">errbuf<pos:position pos:line="9" pos:column="28"/></name><index pos:line="9" pos:column="28">[<expr><literal type="number" pos:line="9" pos:column="29">1024<pos:position pos:line="9" pos:column="33"/></literal></expr>]<pos:position pos:line="9" pos:column="34"/></index></name></decl>;<pos:position pos:line="9" pos:column="35"/></decl_stmt>
		<expr_stmt><expr><call><name pos:line="10" pos:column="17">ERROR<pos:position pos:line="10" pos:column="22"/></name> <argument_list pos:line="10" pos:column="23">(<argument><expr><literal type="string" pos:line="10" pos:column="24">"unixsock plugin: socket failed: %s"<pos:position pos:line="10" pos:column="60"/></literal></expr></argument>,
				<argument><expr><call><name pos:line="11" pos:column="33">sstrerror<pos:position pos:line="11" pos:column="42"/></name> <argument_list pos:line="11" pos:column="43">(<argument><expr><name pos:line="11" pos:column="44">errno<pos:position pos:line="11" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="51">errbuf<pos:position pos:line="11" pos:column="57"/></name></expr></argument>, <argument><expr><sizeof pos:line="11" pos:column="59">sizeof <argument_list pos:line="11" pos:column="66">(<argument><expr><name pos:line="11" pos:column="67">errbuf<pos:position pos:line="11" pos:column="73"/></name></expr></argument>)<pos:position pos:line="11" pos:column="74"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="11" pos:column="75"/></argument_list></call></expr></argument>)<pos:position pos:line="11" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="77"/></expr_stmt>
		<return pos:line="12" pos:column="17">return <expr><operator pos:line="12" pos:column="24">(<pos:position pos:line="12" pos:column="25"/></operator><operator pos:line="12" pos:column="25">-<pos:position pos:line="12" pos:column="26"/></operator><literal type="number" pos:line="12" pos:column="26">1<pos:position pos:line="12" pos:column="27"/></literal><operator pos:line="12" pos:column="27">)<pos:position pos:line="12" pos:column="28"/></operator></expr>;<pos:position pos:line="12" pos:column="29"/></return>
	}<pos:position pos:line="13" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="15" pos:column="9">memset<pos:position pos:line="15" pos:column="15"/></name> <argument_list pos:line="15" pos:column="16">(<argument><expr><operator pos:line="15" pos:column="17">&amp;<pos:position pos:line="15" pos:column="22"/></operator><name pos:line="15" pos:column="18">sa<pos:position pos:line="15" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="15" pos:column="22">'\0'<pos:position pos:line="15" pos:column="26"/></literal></expr></argument>, <argument><expr><sizeof pos:line="15" pos:column="28">sizeof <argument_list pos:line="15" pos:column="35">(<argument><expr><name pos:line="15" pos:column="36">sa<pos:position pos:line="15" pos:column="38"/></name></expr></argument>)<pos:position pos:line="15" pos:column="39"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="15" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="41"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="16" pos:column="9">sa<pos:position pos:line="16" pos:column="11"/></name><operator pos:line="16" pos:column="11">.<pos:position pos:line="16" pos:column="12"/></operator><name pos:line="16" pos:column="12">sun_family<pos:position pos:line="16" pos:column="22"/></name></name> <operator pos:line="16" pos:column="23">=<pos:position pos:line="16" pos:column="24"/></operator> <name pos:line="16" pos:column="25">AF_UNIX<pos:position pos:line="16" pos:column="32"/></name></expr>;<pos:position pos:line="16" pos:column="33"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="17" pos:column="9">strncpy<pos:position pos:line="17" pos:column="16"/></name> <argument_list pos:line="17" pos:column="17">(<argument><expr><name><name pos:line="17" pos:column="18">sa<pos:position pos:line="17" pos:column="20"/></name><operator pos:line="17" pos:column="20">.<pos:position pos:line="17" pos:column="21"/></operator><name pos:line="17" pos:column="21">sun_path<pos:position pos:line="17" pos:column="29"/></name></name></expr></argument>, <argument><expr><ternary><condition><expr><operator pos:line="17" pos:column="31">(<pos:position pos:line="17" pos:column="32"/></operator><name pos:line="17" pos:column="32">sock_file<pos:position pos:line="17" pos:column="41"/></name> <operator pos:line="17" pos:column="42">!=<pos:position pos:line="17" pos:column="44"/></operator> <name pos:line="17" pos:column="45">NULL<pos:position pos:line="17" pos:column="49"/></name><operator pos:line="17" pos:column="49">)<pos:position pos:line="17" pos:column="50"/></operator></expr> ?<pos:position pos:line="17" pos:column="52"/></condition><then pos:line="17" pos:column="52"> <expr><name pos:line="17" pos:column="53">sock_file<pos:position pos:line="17" pos:column="62"/></name></expr> <pos:position pos:line="17" pos:column="63"/></then><else pos:line="17" pos:column="63">: <expr><name pos:line="17" pos:column="65">US_DEFAULT_PATH<pos:position pos:line="17" pos:column="80"/></name></expr></else></ternary></expr></argument>,
			<argument><expr><sizeof pos:line="18" pos:column="25">sizeof <argument_list pos:line="18" pos:column="32">(<argument><expr><name><name pos:line="18" pos:column="33">sa<pos:position pos:line="18" pos:column="35"/></name><operator pos:line="18" pos:column="35">.<pos:position pos:line="18" pos:column="36"/></operator><name pos:line="18" pos:column="36">sun_path<pos:position pos:line="18" pos:column="44"/></name></name></expr></argument>)<pos:position pos:line="18" pos:column="45"/></argument_list></sizeof> <operator pos:line="18" pos:column="46">-<pos:position pos:line="18" pos:column="47"/></operator> <literal type="number" pos:line="18" pos:column="48">1<pos:position pos:line="18" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="51"/></expr_stmt>
	<comment type="block" pos:line="19" pos:column="9">/* unlink (sa.sun_path); */</comment>

	<expr_stmt><expr><call><name pos:line="21" pos:column="9">DEBUG<pos:position pos:line="21" pos:column="14"/></name> <argument_list pos:line="21" pos:column="15">(<argument><expr><literal type="string" pos:line="21" pos:column="16">"unixsock plugin: socket path = %s"<pos:position pos:line="21" pos:column="51"/></literal></expr></argument>, <argument><expr><name><name pos:line="21" pos:column="53">sa<pos:position pos:line="21" pos:column="55"/></name><operator pos:line="21" pos:column="55">.<pos:position pos:line="21" pos:column="56"/></operator><name pos:line="21" pos:column="56">sun_path<pos:position pos:line="21" pos:column="64"/></name></name></expr></argument>)<pos:position pos:line="21" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="66"/></expr_stmt>

	<expr_stmt><expr><name pos:line="23" pos:column="9">status<pos:position pos:line="23" pos:column="15"/></name> <operator pos:line="23" pos:column="16">=<pos:position pos:line="23" pos:column="17"/></operator> <call><name pos:line="23" pos:column="18">bind<pos:position pos:line="23" pos:column="22"/></name> <argument_list pos:line="23" pos:column="23">(<argument><expr><name pos:line="23" pos:column="24">sock_fd<pos:position pos:line="23" pos:column="31"/></name></expr></argument>, <argument><expr><operator pos:line="23" pos:column="33">(<pos:position pos:line="23" pos:column="34"/></operator>struct <name pos:line="23" pos:column="41">sockaddr<pos:position pos:line="23" pos:column="49"/></name> <operator pos:line="23" pos:column="50">*<pos:position pos:line="23" pos:column="51"/></operator><operator pos:line="23" pos:column="51">)<pos:position pos:line="23" pos:column="52"/></operator> <operator pos:line="23" pos:column="53">&amp;<pos:position pos:line="23" pos:column="58"/></operator><name pos:line="23" pos:column="54">sa<pos:position pos:line="23" pos:column="56"/></name></expr></argument>, <argument><expr><sizeof pos:line="23" pos:column="58">sizeof <argument_list pos:line="23" pos:column="65">(<argument><expr><name pos:line="23" pos:column="66">sa<pos:position pos:line="23" pos:column="68"/></name></expr></argument>)<pos:position pos:line="23" pos:column="69"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="23" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="71"/></expr_stmt>
	<if pos:line="24" pos:column="9">if <condition pos:line="24" pos:column="12">(<expr><name pos:line="24" pos:column="13">status<pos:position pos:line="24" pos:column="19"/></name> <operator pos:line="24" pos:column="20">!=<pos:position pos:line="24" pos:column="22"/></operator> <literal type="number" pos:line="24" pos:column="23">0<pos:position pos:line="24" pos:column="24"/></literal></expr>)<pos:position pos:line="24" pos:column="25"/></condition><then pos:line="24" pos:column="25">
	<block pos:line="25" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="26" pos:column="17">char<pos:position pos:line="26" pos:column="21"/></name></type> <name><name pos:line="26" pos:column="22">errbuf<pos:position pos:line="26" pos:column="28"/></name><index pos:line="26" pos:column="28">[<expr><literal type="number" pos:line="26" pos:column="29">1024<pos:position pos:line="26" pos:column="33"/></literal></expr>]<pos:position pos:line="26" pos:column="34"/></index></name></decl>;<pos:position pos:line="26" pos:column="35"/></decl_stmt>
		<expr_stmt><expr><call><name pos:line="27" pos:column="17">sstrerror<pos:position pos:line="27" pos:column="26"/></name> <argument_list pos:line="27" pos:column="27">(<argument><expr><name pos:line="27" pos:column="28">errno<pos:position pos:line="27" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="35">errbuf<pos:position pos:line="27" pos:column="41"/></name></expr></argument>, <argument><expr><sizeof pos:line="27" pos:column="43">sizeof <argument_list pos:line="27" pos:column="50">(<argument><expr><name pos:line="27" pos:column="51">errbuf<pos:position pos:line="27" pos:column="57"/></name></expr></argument>)<pos:position pos:line="27" pos:column="58"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="27" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="60"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="28" pos:column="17">ERROR<pos:position pos:line="28" pos:column="22"/></name> <argument_list pos:line="28" pos:column="23">(<argument><expr><literal type="string" pos:line="28" pos:column="24">"unixsock plugin: bind failed: %s"<pos:position pos:line="28" pos:column="58"/></literal></expr></argument>, <argument><expr><name pos:line="28" pos:column="60">errbuf<pos:position pos:line="28" pos:column="66"/></name></expr></argument>)<pos:position pos:line="28" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="68"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="29" pos:column="17">close<pos:position pos:line="29" pos:column="22"/></name> <argument_list pos:line="29" pos:column="23">(<argument><expr><name pos:line="29" pos:column="24">sock_fd<pos:position pos:line="29" pos:column="31"/></name></expr></argument>)<pos:position pos:line="29" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="33"/></expr_stmt>
		<expr_stmt><expr><name pos:line="30" pos:column="17">sock_fd<pos:position pos:line="30" pos:column="24"/></name> <operator pos:line="30" pos:column="25">=<pos:position pos:line="30" pos:column="26"/></operator> <operator pos:line="30" pos:column="27">-<pos:position pos:line="30" pos:column="28"/></operator><literal type="number" pos:line="30" pos:column="28">1<pos:position pos:line="30" pos:column="29"/></literal></expr>;<pos:position pos:line="30" pos:column="30"/></expr_stmt>
		<return pos:line="31" pos:column="17">return <expr><operator pos:line="31" pos:column="24">(<pos:position pos:line="31" pos:column="25"/></operator><operator pos:line="31" pos:column="25">-<pos:position pos:line="31" pos:column="26"/></operator><literal type="number" pos:line="31" pos:column="26">1<pos:position pos:line="31" pos:column="27"/></literal><operator pos:line="31" pos:column="27">)<pos:position pos:line="31" pos:column="28"/></operator></expr>;<pos:position pos:line="31" pos:column="29"/></return>
	}<pos:position pos:line="32" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="34" pos:column="9">chmod<pos:position pos:line="34" pos:column="14"/></name> <argument_list pos:line="34" pos:column="15">(<argument><expr><name><name pos:line="34" pos:column="16">sa<pos:position pos:line="34" pos:column="18"/></name><operator pos:line="34" pos:column="18">.<pos:position pos:line="34" pos:column="19"/></operator><name pos:line="34" pos:column="19">sun_path<pos:position pos:line="34" pos:column="27"/></name></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="29">sock_perms<pos:position pos:line="34" pos:column="39"/></name></expr></argument>)<pos:position pos:line="34" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="41"/></expr_stmt>

	<expr_stmt><expr><name pos:line="36" pos:column="9">status<pos:position pos:line="36" pos:column="15"/></name> <operator pos:line="36" pos:column="16">=<pos:position pos:line="36" pos:column="17"/></operator> <call><name pos:line="36" pos:column="18">listen<pos:position pos:line="36" pos:column="24"/></name> <argument_list pos:line="36" pos:column="25">(<argument><expr><name pos:line="36" pos:column="26">sock_fd<pos:position pos:line="36" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="36" pos:column="35">8<pos:position pos:line="36" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="36" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="38"/></expr_stmt>
	<if pos:line="37" pos:column="9">if <condition pos:line="37" pos:column="12">(<expr><name pos:line="37" pos:column="13">status<pos:position pos:line="37" pos:column="19"/></name> <operator pos:line="37" pos:column="20">!=<pos:position pos:line="37" pos:column="22"/></operator> <literal type="number" pos:line="37" pos:column="23">0<pos:position pos:line="37" pos:column="24"/></literal></expr>)<pos:position pos:line="37" pos:column="25"/></condition><then pos:line="37" pos:column="25">
	<block pos:line="38" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="39" pos:column="17">char<pos:position pos:line="39" pos:column="21"/></name></type> <name><name pos:line="39" pos:column="22">errbuf<pos:position pos:line="39" pos:column="28"/></name><index pos:line="39" pos:column="28">[<expr><literal type="number" pos:line="39" pos:column="29">1024<pos:position pos:line="39" pos:column="33"/></literal></expr>]<pos:position pos:line="39" pos:column="34"/></index></name></decl>;<pos:position pos:line="39" pos:column="35"/></decl_stmt>
		<expr_stmt><expr><call><name pos:line="40" pos:column="17">ERROR<pos:position pos:line="40" pos:column="22"/></name> <argument_list pos:line="40" pos:column="23">(<argument><expr><literal type="string" pos:line="40" pos:column="24">"unixsock plugin: listen failed: %s"<pos:position pos:line="40" pos:column="60"/></literal></expr></argument>,
				<argument><expr><call><name pos:line="41" pos:column="33">sstrerror<pos:position pos:line="41" pos:column="42"/></name> <argument_list pos:line="41" pos:column="43">(<argument><expr><name pos:line="41" pos:column="44">errno<pos:position pos:line="41" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="51">errbuf<pos:position pos:line="41" pos:column="57"/></name></expr></argument>, <argument><expr><sizeof pos:line="41" pos:column="59">sizeof <argument_list pos:line="41" pos:column="66">(<argument><expr><name pos:line="41" pos:column="67">errbuf<pos:position pos:line="41" pos:column="73"/></name></expr></argument>)<pos:position pos:line="41" pos:column="74"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="41" pos:column="75"/></argument_list></call></expr></argument>)<pos:position pos:line="41" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="77"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="42" pos:column="17">close<pos:position pos:line="42" pos:column="22"/></name> <argument_list pos:line="42" pos:column="23">(<argument><expr><name pos:line="42" pos:column="24">sock_fd<pos:position pos:line="42" pos:column="31"/></name></expr></argument>)<pos:position pos:line="42" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="33"/></expr_stmt>
		<expr_stmt><expr><name pos:line="43" pos:column="17">sock_fd<pos:position pos:line="43" pos:column="24"/></name> <operator pos:line="43" pos:column="25">=<pos:position pos:line="43" pos:column="26"/></operator> <operator pos:line="43" pos:column="27">-<pos:position pos:line="43" pos:column="28"/></operator><literal type="number" pos:line="43" pos:column="28">1<pos:position pos:line="43" pos:column="29"/></literal></expr>;<pos:position pos:line="43" pos:column="30"/></expr_stmt>
		<return pos:line="44" pos:column="17">return <expr><operator pos:line="44" pos:column="24">(<pos:position pos:line="44" pos:column="25"/></operator><operator pos:line="44" pos:column="25">-<pos:position pos:line="44" pos:column="26"/></operator><literal type="number" pos:line="44" pos:column="26">1<pos:position pos:line="44" pos:column="27"/></literal><operator pos:line="44" pos:column="27">)<pos:position pos:line="44" pos:column="28"/></operator></expr>;<pos:position pos:line="44" pos:column="29"/></return>
	}<pos:position pos:line="45" pos:column="10"/></block></then></if>

	<do pos:line="47" pos:column="9">do
	<block pos:line="48" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="49" pos:column="17">char<pos:position pos:line="49" pos:column="21"/></name> <modifier pos:line="49" pos:column="22">*<pos:position pos:line="49" pos:column="23"/></modifier></type><name pos:line="49" pos:column="23">grpname<pos:position pos:line="49" pos:column="30"/></name></decl>;<pos:position pos:line="49" pos:column="31"/></decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="50" pos:column="17">struct<pos:position pos:line="50" pos:column="23"/></name> <name pos:line="50" pos:column="24">group<pos:position pos:line="50" pos:column="29"/></name></name> <modifier pos:line="50" pos:column="30">*<pos:position pos:line="50" pos:column="31"/></modifier></type><name pos:line="50" pos:column="31">g<pos:position pos:line="50" pos:column="32"/></name></decl>;<pos:position pos:line="50" pos:column="33"/></decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="51" pos:column="17">struct<pos:position pos:line="51" pos:column="23"/></name> <name pos:line="51" pos:column="24">group<pos:position pos:line="51" pos:column="29"/></name></name></type> <name pos:line="51" pos:column="30">sg<pos:position pos:line="51" pos:column="32"/></name></decl>;<pos:position pos:line="51" pos:column="33"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="52" pos:column="17">char<pos:position pos:line="52" pos:column="21"/></name></type> <name><name pos:line="52" pos:column="22">grbuf<pos:position pos:line="52" pos:column="27"/></name><index pos:line="52" pos:column="27">[<expr><literal type="number" pos:line="52" pos:column="28">2048<pos:position pos:line="52" pos:column="32"/></literal></expr>]<pos:position pos:line="52" pos:column="33"/></index></name></decl>;<pos:position pos:line="52" pos:column="34"/></decl_stmt>

		<expr_stmt><expr><name pos:line="54" pos:column="17">grpname<pos:position pos:line="54" pos:column="24"/></name> <operator pos:line="54" pos:column="25">=<pos:position pos:line="54" pos:column="26"/></operator> <ternary><condition><expr><operator pos:line="54" pos:column="27">(<pos:position pos:line="54" pos:column="28"/></operator><name pos:line="54" pos:column="28">sock_group<pos:position pos:line="54" pos:column="38"/></name> <operator pos:line="54" pos:column="39">!=<pos:position pos:line="54" pos:column="41"/></operator> <name pos:line="54" pos:column="42">NULL<pos:position pos:line="54" pos:column="46"/></name><operator pos:line="54" pos:column="46">)<pos:position pos:line="54" pos:column="47"/></operator></expr> ?<pos:position pos:line="54" pos:column="49"/></condition><then pos:line="54" pos:column="49"> <expr><name pos:line="54" pos:column="50">sock_group<pos:position pos:line="54" pos:column="60"/></name></expr> <pos:position pos:line="54" pos:column="61"/></then><else pos:line="54" pos:column="61">: <expr><name pos:line="54" pos:column="63">COLLECTD_GRP_NAME<pos:position pos:line="54" pos:column="80"/></name></expr></else></ternary></expr>;<pos:position pos:line="54" pos:column="81"/></expr_stmt>
		<expr_stmt><expr><name pos:line="55" pos:column="17">g<pos:position pos:line="55" pos:column="18"/></name> <operator pos:line="55" pos:column="19">=<pos:position pos:line="55" pos:column="20"/></operator> <name pos:line="55" pos:column="21">NULL<pos:position pos:line="55" pos:column="25"/></name></expr>;<pos:position pos:line="55" pos:column="26"/></expr_stmt>

		<expr_stmt><expr><name pos:line="57" pos:column="17">status<pos:position pos:line="57" pos:column="23"/></name> <operator pos:line="57" pos:column="24">=<pos:position pos:line="57" pos:column="25"/></operator> <call><name pos:line="57" pos:column="26">getgrnam_r<pos:position pos:line="57" pos:column="36"/></name> <argument_list pos:line="57" pos:column="37">(<argument><expr><name pos:line="57" pos:column="38">grpname<pos:position pos:line="57" pos:column="45"/></name></expr></argument>, <argument><expr><operator pos:line="57" pos:column="47">&amp;<pos:position pos:line="57" pos:column="52"/></operator><name pos:line="57" pos:column="48">sg<pos:position pos:line="57" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="57" pos:column="52">grbuf<pos:position pos:line="57" pos:column="57"/></name></expr></argument>, <argument><expr><sizeof pos:line="57" pos:column="59">sizeof <argument_list pos:line="57" pos:column="66">(<argument><expr><name pos:line="57" pos:column="67">grbuf<pos:position pos:line="57" pos:column="72"/></name></expr></argument>)<pos:position pos:line="57" pos:column="73"/></argument_list></sizeof></expr></argument>, <argument><expr><operator pos:line="57" pos:column="75">&amp;<pos:position pos:line="57" pos:column="80"/></operator><name pos:line="57" pos:column="76">g<pos:position pos:line="57" pos:column="77"/></name></expr></argument>)<pos:position pos:line="57" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="79"/></expr_stmt>
		<if pos:line="58" pos:column="17">if <condition pos:line="58" pos:column="20">(<expr><name pos:line="58" pos:column="21">status<pos:position pos:line="58" pos:column="27"/></name> <operator pos:line="58" pos:column="28">!=<pos:position pos:line="58" pos:column="30"/></operator> <literal type="number" pos:line="58" pos:column="31">0<pos:position pos:line="58" pos:column="32"/></literal></expr>)<pos:position pos:line="58" pos:column="33"/></condition><then pos:line="58" pos:column="33">
		<block pos:line="59" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="60" pos:column="25">char<pos:position pos:line="60" pos:column="29"/></name></type> <name><name pos:line="60" pos:column="30">errbuf<pos:position pos:line="60" pos:column="36"/></name><index pos:line="60" pos:column="36">[<expr><literal type="number" pos:line="60" pos:column="37">1024<pos:position pos:line="60" pos:column="41"/></literal></expr>]<pos:position pos:line="60" pos:column="42"/></index></name></decl>;<pos:position pos:line="60" pos:column="43"/></decl_stmt>
			<expr_stmt><expr><call><name pos:line="61" pos:column="25">WARNING<pos:position pos:line="61" pos:column="32"/></name> <argument_list pos:line="61" pos:column="33">(<argument><expr><literal type="string" pos:line="61" pos:column="34">"unixsock plugin: getgrnam_r (%s) failed: %s"<pos:position pos:line="61" pos:column="79"/></literal></expr></argument>, <argument><expr><name pos:line="61" pos:column="81">grpname<pos:position pos:line="61" pos:column="88"/></name></expr></argument>,
					<argument><expr><call><name pos:line="62" pos:column="41">sstrerror<pos:position pos:line="62" pos:column="50"/></name> <argument_list pos:line="62" pos:column="51">(<argument><expr><name pos:line="62" pos:column="52">errno<pos:position pos:line="62" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="62" pos:column="59">errbuf<pos:position pos:line="62" pos:column="65"/></name></expr></argument>, <argument><expr><sizeof pos:line="62" pos:column="67">sizeof <argument_list pos:line="62" pos:column="74">(<argument><expr><name pos:line="62" pos:column="75">errbuf<pos:position pos:line="62" pos:column="81"/></name></expr></argument>)<pos:position pos:line="62" pos:column="82"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="62" pos:column="83"/></argument_list></call></expr></argument>)<pos:position pos:line="62" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="85"/></expr_stmt>
			<break pos:line="63" pos:column="25">break;<pos:position pos:line="63" pos:column="31"/></break>
		}<pos:position pos:line="64" pos:column="18"/></block></then></if>
		<if pos:line="65" pos:column="17">if <condition pos:line="65" pos:column="20">(<expr><name pos:line="65" pos:column="21">g<pos:position pos:line="65" pos:column="22"/></name> <operator pos:line="65" pos:column="23">==<pos:position pos:line="65" pos:column="25"/></operator> <name pos:line="65" pos:column="26">NULL<pos:position pos:line="65" pos:column="30"/></name></expr>)<pos:position pos:line="65" pos:column="31"/></condition><then pos:line="65" pos:column="31">
		<block pos:line="66" pos:column="17">{
			<expr_stmt><expr><call><name pos:line="67" pos:column="25">WARNING<pos:position pos:line="67" pos:column="32"/></name> <argument_list pos:line="67" pos:column="33">(<argument><expr><literal type="string" pos:line="67" pos:column="34">"unixsock plugin: No such group: `%s'"<pos:position pos:line="67" pos:column="72"/></literal></expr></argument>,
					<argument><expr><name pos:line="68" pos:column="41">grpname<pos:position pos:line="68" pos:column="48"/></name></expr></argument>)<pos:position pos:line="68" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="50"/></expr_stmt>
			<break pos:line="69" pos:column="25">break;<pos:position pos:line="69" pos:column="31"/></break>
		}<pos:position pos:line="70" pos:column="18"/></block></then></if>

		<if pos:line="72" pos:column="17">if <condition pos:line="72" pos:column="20">(<expr><call><name pos:line="72" pos:column="21">chown<pos:position pos:line="72" pos:column="26"/></name> <argument_list pos:line="72" pos:column="27">(<argument><expr><ternary><condition><expr><operator pos:line="72" pos:column="28">(<pos:position pos:line="72" pos:column="29"/></operator><name pos:line="72" pos:column="29">sock_file<pos:position pos:line="72" pos:column="38"/></name> <operator pos:line="72" pos:column="39">!=<pos:position pos:line="72" pos:column="41"/></operator> <name pos:line="72" pos:column="42">NULL<pos:position pos:line="72" pos:column="46"/></name><operator pos:line="72" pos:column="46">)<pos:position pos:line="72" pos:column="47"/></operator></expr> ?<pos:position pos:line="72" pos:column="49"/></condition><then pos:line="72" pos:column="49"> <expr><name pos:line="72" pos:column="50">sock_file<pos:position pos:line="72" pos:column="59"/></name></expr> <pos:position pos:line="72" pos:column="60"/></then><else pos:line="72" pos:column="60">: <expr><name pos:line="72" pos:column="62">US_DEFAULT_PATH<pos:position pos:line="72" pos:column="77"/></name></expr></else></ternary></expr></argument>,
					<argument><expr><operator pos:line="73" pos:column="41">(<pos:position pos:line="73" pos:column="42"/></operator><name pos:line="73" pos:column="42">uid_t<pos:position pos:line="73" pos:column="47"/></name><operator pos:line="73" pos:column="47">)<pos:position pos:line="73" pos:column="48"/></operator> <operator pos:line="73" pos:column="49">-<pos:position pos:line="73" pos:column="50"/></operator><literal type="number" pos:line="73" pos:column="50">1<pos:position pos:line="73" pos:column="51"/></literal></expr></argument>, <argument><expr><name><name pos:line="73" pos:column="53">g<pos:position pos:line="73" pos:column="54"/></name><operator pos:line="73" pos:column="54">-&gt;<pos:position pos:line="73" pos:column="59"/></operator><name pos:line="73" pos:column="56">gr_gid<pos:position pos:line="73" pos:column="62"/></name></name></expr></argument>)<pos:position pos:line="73" pos:column="63"/></argument_list></call> <operator pos:line="73" pos:column="64">!=<pos:position pos:line="73" pos:column="66"/></operator> <literal type="number" pos:line="73" pos:column="67">0<pos:position pos:line="73" pos:column="68"/></literal></expr>)<pos:position pos:line="73" pos:column="69"/></condition><then pos:line="73" pos:column="69">
		<block pos:line="74" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="75" pos:column="25">char<pos:position pos:line="75" pos:column="29"/></name></type> <name><name pos:line="75" pos:column="30">errbuf<pos:position pos:line="75" pos:column="36"/></name><index pos:line="75" pos:column="36">[<expr><literal type="number" pos:line="75" pos:column="37">1024<pos:position pos:line="75" pos:column="41"/></literal></expr>]<pos:position pos:line="75" pos:column="42"/></index></name></decl>;<pos:position pos:line="75" pos:column="43"/></decl_stmt>
			<expr_stmt><expr><call><name pos:line="76" pos:column="25">WARNING<pos:position pos:line="76" pos:column="32"/></name> <argument_list pos:line="76" pos:column="33">(<argument><expr><literal type="string" pos:line="76" pos:column="34">"unixsock plugin: chown (%s, -1, %i) failed: %s"<pos:position pos:line="76" pos:column="82"/></literal></expr></argument>,
					<argument><expr><ternary><condition><expr><operator pos:line="77" pos:column="41">(<pos:position pos:line="77" pos:column="42"/></operator><name pos:line="77" pos:column="42">sock_file<pos:position pos:line="77" pos:column="51"/></name> <operator pos:line="77" pos:column="52">!=<pos:position pos:line="77" pos:column="54"/></operator> <name pos:line="77" pos:column="55">NULL<pos:position pos:line="77" pos:column="59"/></name><operator pos:line="77" pos:column="59">)<pos:position pos:line="77" pos:column="60"/></operator></expr> ?<pos:position pos:line="77" pos:column="62"/></condition><then pos:line="77" pos:column="62"> <expr><name pos:line="77" pos:column="63">sock_file<pos:position pos:line="77" pos:column="72"/></name></expr> <pos:position pos:line="77" pos:column="73"/></then><else pos:line="77" pos:column="73">: <expr><name pos:line="77" pos:column="75">US_DEFAULT_PATH<pos:position pos:line="77" pos:column="90"/></name></expr></else></ternary></expr></argument>,
					<argument><expr><operator pos:line="78" pos:column="41">(<pos:position pos:line="78" pos:column="42"/></operator><name pos:line="78" pos:column="42">int<pos:position pos:line="78" pos:column="45"/></name><operator pos:line="78" pos:column="45">)<pos:position pos:line="78" pos:column="46"/></operator> <name><name pos:line="78" pos:column="47">g<pos:position pos:line="78" pos:column="48"/></name><operator pos:line="78" pos:column="48">-&gt;<pos:position pos:line="78" pos:column="53"/></operator><name pos:line="78" pos:column="50">gr_gid<pos:position pos:line="78" pos:column="56"/></name></name></expr></argument>,
					<argument><expr><call><name pos:line="79" pos:column="41">sstrerror<pos:position pos:line="79" pos:column="50"/></name> <argument_list pos:line="79" pos:column="51">(<argument><expr><name pos:line="79" pos:column="52">errno<pos:position pos:line="79" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="79" pos:column="59">errbuf<pos:position pos:line="79" pos:column="65"/></name></expr></argument>, <argument><expr><sizeof pos:line="79" pos:column="67">sizeof <argument_list pos:line="79" pos:column="74">(<argument><expr><name pos:line="79" pos:column="75">errbuf<pos:position pos:line="79" pos:column="81"/></name></expr></argument>)<pos:position pos:line="79" pos:column="82"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="79" pos:column="83"/></argument_list></call></expr></argument>)<pos:position pos:line="79" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="85"/></expr_stmt>
		}<pos:position pos:line="80" pos:column="18"/></block></then></if>
	}<pos:position pos:line="81" pos:column="10"/></block> while <condition pos:line="81" pos:column="17">(<expr><literal type="number" pos:line="81" pos:column="18">0<pos:position pos:line="81" pos:column="19"/></literal></expr>)<pos:position pos:line="81" pos:column="20"/></condition>;<pos:position pos:line="81" pos:column="21"/></do>

	<return pos:line="83" pos:column="9">return <expr><operator pos:line="83" pos:column="16">(<pos:position pos:line="83" pos:column="17"/></operator><literal type="number" pos:line="83" pos:column="17">0<pos:position pos:line="83" pos:column="18"/></literal><operator pos:line="83" pos:column="18">)<pos:position pos:line="83" pos:column="19"/></operator></expr>;<pos:position pos:line="83" pos:column="20"/></return>
}<pos:position pos:line="84" pos:column="2"/></block></function></unit>
