<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_2665_collectd-5.6.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">my_write<pos:position pos:line="1" pos:column="20"/></name><parameter_list pos:line="1" pos:column="20">(<parameter><decl><type><specifier pos:line="1" pos:column="21">const<pos:position pos:line="1" pos:column="26"/></specifier> <name pos:line="1" pos:column="27">data_set_t<pos:position pos:line="1" pos:column="37"/></name> <modifier pos:line="1" pos:column="38">*<pos:position pos:line="1" pos:column="39"/></modifier></type><name pos:line="1" pos:column="39">ds<pos:position pos:line="1" pos:column="41"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="43">const<pos:position pos:line="1" pos:column="48"/></specifier> <name pos:line="1" pos:column="49">value_list_t<pos:position pos:line="1" pos:column="61"/></name> <modifier pos:line="1" pos:column="62">*<pos:position pos:line="1" pos:column="63"/></modifier></type><name pos:line="1" pos:column="63">vl<pos:position pos:line="1" pos:column="65"/></name></decl></parameter>,
                    <parameter><decl><type><name pos:line="2" pos:column="21">user_data_t<pos:position pos:line="2" pos:column="32"/></name> <modifier pos:line="2" pos:column="33">*<pos:position pos:line="2" pos:column="34"/></modifier></type><name pos:line="2" pos:column="34">ud<pos:position pos:line="2" pos:column="36"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="37"/></parameter_list> <block pos:line="2" pos:column="38">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">char<pos:position pos:line="3" pos:column="7"/></name></type> <name><name pos:line="3" pos:column="8">name<pos:position pos:line="3" pos:column="12"/></name><index pos:line="3" pos:column="12">[<expr><literal type="number" pos:line="3" pos:column="13">1024<pos:position pos:line="3" pos:column="17"/></literal></expr>]<pos:position pos:line="3" pos:column="18"/></index></name> <init pos:line="3" pos:column="19">= <expr><literal type="string" pos:line="3" pos:column="21">""<pos:position pos:line="3" pos:column="23"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="24"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">int<pos:position pos:line="4" pos:column="6"/></name></type> <name pos:line="4" pos:column="7">i<pos:position pos:line="4" pos:column="8"/></name> <init pos:line="4" pos:column="9">= <expr><literal type="number" pos:line="4" pos:column="11">0<pos:position pos:line="4" pos:column="12"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="13"/></decl_stmt>

  <if pos:line="6" pos:column="3">if <condition pos:line="6" pos:column="6">(<expr><name><name pos:line="6" pos:column="7">ds<pos:position pos:line="6" pos:column="9"/></name><operator pos:line="6" pos:column="9">-&gt;<pos:position pos:line="6" pos:column="14"/></operator><name pos:line="6" pos:column="11">ds_num<pos:position pos:line="6" pos:column="17"/></name></name> <operator pos:line="6" pos:column="18">!=<pos:position pos:line="6" pos:column="20"/></operator> <name><name pos:line="6" pos:column="21">vl<pos:position pos:line="6" pos:column="23"/></name><operator pos:line="6" pos:column="23">-&gt;<pos:position pos:line="6" pos:column="28"/></operator><name pos:line="6" pos:column="25">values_len<pos:position pos:line="6" pos:column="35"/></name></name></expr>)<pos:position pos:line="6" pos:column="36"/></condition><then pos:line="6" pos:column="36"> <block pos:line="6" pos:column="37">{
    <expr_stmt><expr><call><name pos:line="7" pos:column="5">plugin_log<pos:position pos:line="7" pos:column="15"/></name><argument_list pos:line="7" pos:column="15">(<argument><expr><name pos:line="7" pos:column="16">LOG_WARNING<pos:position pos:line="7" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="7" pos:column="29">"DS number does not match values length"<pos:position pos:line="7" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="71"/></expr_stmt>
    <return pos:line="8" pos:column="5">return <expr><operator pos:line="8" pos:column="12">-<pos:position pos:line="8" pos:column="13"/></operator><literal type="number" pos:line="8" pos:column="13">1<pos:position pos:line="8" pos:column="14"/></literal></expr>;<pos:position pos:line="8" pos:column="15"/></return>
  }<pos:position pos:line="9" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="11" pos:column="3">/* get the default base filename for the output file - depending on the
   * provided values this will be something like
   * &lt;host&gt;/&lt;plugin&gt;[-&lt;plugin_type&gt;]/&lt;instance&gt;[-&lt;instance_type&gt;] */</comment>
  <if pos:line="14" pos:column="3">if <condition pos:line="14" pos:column="6">(<expr><literal type="number" pos:line="14" pos:column="7">0<pos:position pos:line="14" pos:column="8"/></literal> <operator pos:line="14" pos:column="9">!=<pos:position pos:line="14" pos:column="11"/></operator> <call><name pos:line="14" pos:column="12">format_name<pos:position pos:line="14" pos:column="23"/></name><argument_list pos:line="14" pos:column="23">(<argument><expr><name pos:line="14" pos:column="24">name<pos:position pos:line="14" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="14" pos:column="30">1024<pos:position pos:line="14" pos:column="34"/></literal></expr></argument>, <argument><expr><name><name pos:line="14" pos:column="36">vl<pos:position pos:line="14" pos:column="38"/></name><operator pos:line="14" pos:column="38">-&gt;<pos:position pos:line="14" pos:column="43"/></operator><name pos:line="14" pos:column="40">host<pos:position pos:line="14" pos:column="44"/></name></name></expr></argument>, <argument><expr><name><name pos:line="14" pos:column="46">vl<pos:position pos:line="14" pos:column="48"/></name><operator pos:line="14" pos:column="48">-&gt;<pos:position pos:line="14" pos:column="53"/></operator><name pos:line="14" pos:column="50">plugin<pos:position pos:line="14" pos:column="56"/></name></name></expr></argument>, <argument><expr><name><name pos:line="14" pos:column="58">vl<pos:position pos:line="14" pos:column="60"/></name><operator pos:line="14" pos:column="60">-&gt;<pos:position pos:line="14" pos:column="65"/></operator><name pos:line="14" pos:column="62">plugin_instance<pos:position pos:line="14" pos:column="77"/></name></name></expr></argument>,
                       <argument><expr><name><name pos:line="15" pos:column="24">ds<pos:position pos:line="15" pos:column="26"/></name><operator pos:line="15" pos:column="26">-&gt;<pos:position pos:line="15" pos:column="31"/></operator><name pos:line="15" pos:column="28">type<pos:position pos:line="15" pos:column="32"/></name></name></expr></argument>, <argument><expr><name><name pos:line="15" pos:column="34">vl<pos:position pos:line="15" pos:column="36"/></name><operator pos:line="15" pos:column="36">-&gt;<pos:position pos:line="15" pos:column="41"/></operator><name pos:line="15" pos:column="38">type_instance<pos:position pos:line="15" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="15" pos:column="52"/></argument_list></call></expr>)<pos:position pos:line="15" pos:column="53"/></condition><then pos:line="15" pos:column="53">
    <block type="pseudo"><return pos:line="16" pos:column="5">return <expr><operator pos:line="16" pos:column="12">-<pos:position pos:line="16" pos:column="13"/></operator><literal type="number" pos:line="16" pos:column="13">1<pos:position pos:line="16" pos:column="14"/></literal></expr>;<pos:position pos:line="16" pos:column="15"/></return></block></then></if>

  <for pos:line="18" pos:column="3">for <control pos:line="18" pos:column="7">(<init><expr><name pos:line="18" pos:column="8">i<pos:position pos:line="18" pos:column="9"/></name> <operator pos:line="18" pos:column="10">=<pos:position pos:line="18" pos:column="11"/></operator> <literal type="number" pos:line="18" pos:column="12">0<pos:position pos:line="18" pos:column="13"/></literal></expr>;<pos:position pos:line="18" pos:column="14"/></init> <condition><expr><name pos:line="18" pos:column="15">i<pos:position pos:line="18" pos:column="16"/></name> <operator pos:line="18" pos:column="17">&lt;<pos:position pos:line="18" pos:column="21"/></operator> <name><name pos:line="18" pos:column="19">ds<pos:position pos:line="18" pos:column="21"/></name><operator pos:line="18" pos:column="21">-&gt;<pos:position pos:line="18" pos:column="26"/></operator><name pos:line="18" pos:column="23">ds_num<pos:position pos:line="18" pos:column="29"/></name></name></expr>;<pos:position pos:line="18" pos:column="30"/></condition> <incr><expr><operator pos:line="18" pos:column="31">++<pos:position pos:line="18" pos:column="33"/></operator><name pos:line="18" pos:column="33">i<pos:position pos:line="18" pos:column="34"/></name></expr></incr>)<pos:position pos:line="18" pos:column="35"/></control> <block pos:line="18" pos:column="36">{
    <comment type="block" pos:line="19" pos:column="5">/* do the magic to output the data */</comment>
    <expr_stmt><expr><call><name pos:line="20" pos:column="5">printf<pos:position pos:line="20" pos:column="11"/></name><argument_list pos:line="20" pos:column="11">(<argument><expr><literal type="string" pos:line="20" pos:column="12">"%s (%s) at %i: "<pos:position pos:line="20" pos:column="29"/></literal></expr></argument>, <argument><expr><name pos:line="20" pos:column="31">name<pos:position pos:line="20" pos:column="35"/></name></expr></argument>,
           <argument><expr><ternary><condition><expr><operator pos:line="21" pos:column="12">(<pos:position pos:line="21" pos:column="13"/></operator><name><name pos:line="21" pos:column="13">ds<pos:position pos:line="21" pos:column="15"/></name><operator pos:line="21" pos:column="15">-&gt;<pos:position pos:line="21" pos:column="20"/></operator><name pos:line="21" pos:column="17">ds<pos:position pos:line="21" pos:column="19"/></name><operator pos:line="21" pos:column="19">-&gt;<pos:position pos:line="21" pos:column="24"/></operator><name pos:line="21" pos:column="21">type<pos:position pos:line="21" pos:column="25"/></name></name> <operator pos:line="21" pos:column="26">==<pos:position pos:line="21" pos:column="28"/></operator> <name pos:line="21" pos:column="29">DS_TYPE_GAUGE<pos:position pos:line="21" pos:column="42"/></name><operator pos:line="21" pos:column="42">)<pos:position pos:line="21" pos:column="43"/></operator></expr> ?<pos:position pos:line="21" pos:column="45"/></condition><then pos:line="21" pos:column="45"> <expr><literal type="string" pos:line="21" pos:column="46">"GAUGE"<pos:position pos:line="21" pos:column="53"/></literal></expr> <pos:position pos:line="21" pos:column="54"/></then><else pos:line="21" pos:column="54">: <expr><literal type="string" pos:line="21" pos:column="56">"COUNTER"<pos:position pos:line="21" pos:column="65"/></literal></expr></else></ternary></expr></argument>,
           <argument><expr><operator pos:line="22" pos:column="12">(<pos:position pos:line="22" pos:column="13"/></operator><name pos:line="22" pos:column="13">int<pos:position pos:line="22" pos:column="16"/></name><operator pos:line="22" pos:column="16">)<pos:position pos:line="22" pos:column="17"/></operator><name><name pos:line="22" pos:column="17">vl<pos:position pos:line="22" pos:column="19"/></name><operator pos:line="22" pos:column="19">-&gt;<pos:position pos:line="22" pos:column="24"/></operator><name pos:line="22" pos:column="21">time<pos:position pos:line="22" pos:column="25"/></name></name></expr></argument>)<pos:position pos:line="22" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="27"/></expr_stmt>

    <if pos:line="24" pos:column="5">if <condition pos:line="24" pos:column="8">(<expr><name><name pos:line="24" pos:column="9">ds<pos:position pos:line="24" pos:column="11"/></name><operator pos:line="24" pos:column="11">-&gt;<pos:position pos:line="24" pos:column="16"/></operator><name pos:line="24" pos:column="13">ds<pos:position pos:line="24" pos:column="15"/></name><operator pos:line="24" pos:column="15">-&gt;<pos:position pos:line="24" pos:column="20"/></operator><name pos:line="24" pos:column="17">type<pos:position pos:line="24" pos:column="21"/></name></name> <operator pos:line="24" pos:column="22">==<pos:position pos:line="24" pos:column="24"/></operator> <name pos:line="24" pos:column="25">DS_TYPE_GAUGE<pos:position pos:line="24" pos:column="38"/></name></expr>)<pos:position pos:line="24" pos:column="39"/></condition><then pos:line="24" pos:column="39">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="25" pos:column="7">printf<pos:position pos:line="25" pos:column="13"/></name><argument_list pos:line="25" pos:column="13">(<argument><expr><literal type="string" pos:line="25" pos:column="14">"%f\n"<pos:position pos:line="25" pos:column="20"/></literal></expr></argument>, <argument><expr><name><name pos:line="25" pos:column="22">vl<pos:position pos:line="25" pos:column="24"/></name><operator pos:line="25" pos:column="24">-&gt;<pos:position pos:line="25" pos:column="29"/></operator><name pos:line="25" pos:column="26">values<pos:position pos:line="25" pos:column="32"/></name><index pos:line="25" pos:column="32">[<expr><name pos:line="25" pos:column="33">i<pos:position pos:line="25" pos:column="34"/></name></expr>]<pos:position pos:line="25" pos:column="35"/></index></name><operator pos:line="25" pos:column="35">.<pos:position pos:line="25" pos:column="36"/></operator><name pos:line="25" pos:column="36">gauge<pos:position pos:line="25" pos:column="41"/></name></expr></argument>)<pos:position pos:line="25" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="43"/></expr_stmt></block></then>
    <else pos:line="26" pos:column="5">else
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="27" pos:column="7">printf<pos:position pos:line="27" pos:column="13"/></name><argument_list pos:line="27" pos:column="13">(<argument><expr><literal type="string" pos:line="27" pos:column="14">"%lld\n"<pos:position pos:line="27" pos:column="22"/></literal></expr></argument>, <argument><expr><name><name pos:line="27" pos:column="24">vl<pos:position pos:line="27" pos:column="26"/></name><operator pos:line="27" pos:column="26">-&gt;<pos:position pos:line="27" pos:column="31"/></operator><name pos:line="27" pos:column="28">values<pos:position pos:line="27" pos:column="34"/></name><index pos:line="27" pos:column="34">[<expr><name pos:line="27" pos:column="35">i<pos:position pos:line="27" pos:column="36"/></name></expr>]<pos:position pos:line="27" pos:column="37"/></index></name><operator pos:line="27" pos:column="37">.<pos:position pos:line="27" pos:column="38"/></operator><name pos:line="27" pos:column="38">counter<pos:position pos:line="27" pos:column="45"/></name></expr></argument>)<pos:position pos:line="27" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="47"/></expr_stmt></block></else></if>
  }<pos:position pos:line="28" pos:column="4"/></block></for>
  <return pos:line="29" pos:column="3">return <expr><literal type="number" pos:line="29" pos:column="10">0<pos:position pos:line="29" pos:column="11"/></literal></expr>;<pos:position pos:line="29" pos:column="12"/></return>
}<pos:position pos:line="30" pos:column="2"/></block></function></unit>
