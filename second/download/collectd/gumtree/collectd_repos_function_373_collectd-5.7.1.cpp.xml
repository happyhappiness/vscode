<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_373_collectd-5.7.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">zone_stats_t<pos:position pos:line="1" pos:column="20"/></name> <modifier pos:line="1" pos:column="21">*<pos:position pos:line="1" pos:column="22"/></modifier></type><name pos:line="1" pos:column="22">zone_find_stats<pos:position pos:line="1" pos:column="37"/></name><parameter_list pos:line="1" pos:column="37">(<parameter><decl><type><name pos:line="1" pos:column="38">c_avl_tree_t<pos:position pos:line="1" pos:column="50"/></name> <modifier pos:line="1" pos:column="51">*<pos:position pos:line="1" pos:column="52"/></modifier></type><name pos:line="1" pos:column="52">tree<pos:position pos:line="1" pos:column="56"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="58">zoneid_t<pos:position pos:line="1" pos:column="66"/></name></type> <name pos:line="1" pos:column="67">zoneid<pos:position pos:line="1" pos:column="73"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="74"/></parameter_list> <block pos:line="1" pos:column="75">{
  <decl_stmt><decl><type><name pos:line="2" pos:column="3">zone_stats_t<pos:position pos:line="2" pos:column="15"/></name> <modifier pos:line="2" pos:column="16">*<pos:position pos:line="2" pos:column="17"/></modifier></type><name pos:line="2" pos:column="17">ret<pos:position pos:line="2" pos:column="20"/></name> <init pos:line="2" pos:column="21">= <expr><name pos:line="2" pos:column="23">NULL<pos:position pos:line="2" pos:column="27"/></name></expr></init></decl>;<pos:position pos:line="2" pos:column="28"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">zoneid_t<pos:position pos:line="3" pos:column="11"/></name> <modifier pos:line="3" pos:column="12">*<pos:position pos:line="3" pos:column="13"/></modifier></type><name pos:line="3" pos:column="13">key<pos:position pos:line="3" pos:column="16"/></name> <init pos:line="3" pos:column="17">= <expr><name pos:line="3" pos:column="19">NULL<pos:position pos:line="3" pos:column="23"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="24"/></decl_stmt>

  <if pos:line="5" pos:column="3">if <condition pos:line="5" pos:column="6">(<expr><call><name pos:line="5" pos:column="7">c_avl_get<pos:position pos:line="5" pos:column="16"/></name><argument_list pos:line="5" pos:column="16">(<argument><expr><name pos:line="5" pos:column="17">tree<pos:position pos:line="5" pos:column="21"/></name></expr></argument>, <argument><expr><operator pos:line="5" pos:column="23">(<pos:position pos:line="5" pos:column="24"/></operator><name pos:line="5" pos:column="24">void<pos:position pos:line="5" pos:column="28"/></name> <operator pos:line="5" pos:column="29">*<pos:position pos:line="5" pos:column="30"/></operator><operator pos:line="5" pos:column="30">*<pos:position pos:line="5" pos:column="31"/></operator><operator pos:line="5" pos:column="31">)<pos:position pos:line="5" pos:column="32"/></operator><operator pos:line="5" pos:column="32">&amp;<pos:position pos:line="5" pos:column="37"/></operator><name pos:line="5" pos:column="33">zoneid<pos:position pos:line="5" pos:column="39"/></name></expr></argument>, <argument><expr><operator pos:line="5" pos:column="41">(<pos:position pos:line="5" pos:column="42"/></operator><name pos:line="5" pos:column="42">void<pos:position pos:line="5" pos:column="46"/></name> <operator pos:line="5" pos:column="47">*<pos:position pos:line="5" pos:column="48"/></operator><operator pos:line="5" pos:column="48">*<pos:position pos:line="5" pos:column="49"/></operator><operator pos:line="5" pos:column="49">)<pos:position pos:line="5" pos:column="50"/></operator><operator pos:line="5" pos:column="50">&amp;<pos:position pos:line="5" pos:column="55"/></operator><name pos:line="5" pos:column="51">ret<pos:position pos:line="5" pos:column="54"/></name></expr></argument>)<pos:position pos:line="5" pos:column="55"/></argument_list></call></expr>)<pos:position pos:line="5" pos:column="56"/></condition><then pos:line="5" pos:column="56"> <block pos:line="5" pos:column="57">{
    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><operator pos:line="6" pos:column="9">!<pos:position pos:line="6" pos:column="10"/></operator><operator pos:line="6" pos:column="10">(<pos:position pos:line="6" pos:column="11"/></operator><name pos:line="6" pos:column="11">ret<pos:position pos:line="6" pos:column="14"/></name> <operator pos:line="6" pos:column="15">=<pos:position pos:line="6" pos:column="16"/></operator> <call><name pos:line="6" pos:column="17">malloc<pos:position pos:line="6" pos:column="23"/></name><argument_list pos:line="6" pos:column="23">(<argument><expr><sizeof pos:line="6" pos:column="24">sizeof<argument_list pos:line="6" pos:column="30">(<argument><expr><operator pos:line="6" pos:column="31">*<pos:position pos:line="6" pos:column="32"/></operator><name pos:line="6" pos:column="32">ret<pos:position pos:line="6" pos:column="35"/></name></expr></argument>)<pos:position pos:line="6" pos:column="36"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="6" pos:column="37"/></argument_list></call><operator pos:line="6" pos:column="37">)<pos:position pos:line="6" pos:column="38"/></operator></expr>)<pos:position pos:line="6" pos:column="39"/></condition><then pos:line="6" pos:column="39"> <block pos:line="6" pos:column="40">{
      <expr_stmt><expr><call><name pos:line="7" pos:column="7">WARNING<pos:position pos:line="7" pos:column="14"/></name><argument_list pos:line="7" pos:column="14">(<argument><expr><literal type="string" pos:line="7" pos:column="15">"zone plugin: no memory"<pos:position pos:line="7" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="41"/></expr_stmt>
      <return pos:line="8" pos:column="7">return <expr><operator pos:line="8" pos:column="14">(<pos:position pos:line="8" pos:column="15"/></operator><name pos:line="8" pos:column="15">NULL<pos:position pos:line="8" pos:column="19"/></name><operator pos:line="8" pos:column="19">)<pos:position pos:line="8" pos:column="20"/></operator></expr>;<pos:position pos:line="8" pos:column="21"/></return>
    }<pos:position pos:line="9" pos:column="6"/></block></then></if>
    <if pos:line="10" pos:column="5">if <condition pos:line="10" pos:column="8">(<expr><operator pos:line="10" pos:column="9">!<pos:position pos:line="10" pos:column="10"/></operator><operator pos:line="10" pos:column="10">(<pos:position pos:line="10" pos:column="11"/></operator><name pos:line="10" pos:column="11">key<pos:position pos:line="10" pos:column="14"/></name> <operator pos:line="10" pos:column="15">=<pos:position pos:line="10" pos:column="16"/></operator> <call><name pos:line="10" pos:column="17">malloc<pos:position pos:line="10" pos:column="23"/></name><argument_list pos:line="10" pos:column="23">(<argument><expr><sizeof pos:line="10" pos:column="24">sizeof<argument_list pos:line="10" pos:column="30">(<argument><expr><operator pos:line="10" pos:column="31">*<pos:position pos:line="10" pos:column="32"/></operator><name pos:line="10" pos:column="32">key<pos:position pos:line="10" pos:column="35"/></name></expr></argument>)<pos:position pos:line="10" pos:column="36"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="10" pos:column="37"/></argument_list></call><operator pos:line="10" pos:column="37">)<pos:position pos:line="10" pos:column="38"/></operator></expr>)<pos:position pos:line="10" pos:column="39"/></condition><then pos:line="10" pos:column="39"> <block pos:line="10" pos:column="40">{
      <expr_stmt><expr><call><name pos:line="11" pos:column="7">WARNING<pos:position pos:line="11" pos:column="14"/></name><argument_list pos:line="11" pos:column="14">(<argument><expr><literal type="string" pos:line="11" pos:column="15">"zone plugin: no memory"<pos:position pos:line="11" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="41"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="12" pos:column="7">free<pos:position pos:line="12" pos:column="11"/></name><argument_list pos:line="12" pos:column="11">(<argument><expr><name pos:line="12" pos:column="12">ret<pos:position pos:line="12" pos:column="15"/></name></expr></argument>)<pos:position pos:line="12" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="17"/></expr_stmt>
      <return pos:line="13" pos:column="7">return <expr><operator pos:line="13" pos:column="14">(<pos:position pos:line="13" pos:column="15"/></operator><name pos:line="13" pos:column="15">NULL<pos:position pos:line="13" pos:column="19"/></name><operator pos:line="13" pos:column="19">)<pos:position pos:line="13" pos:column="20"/></operator></expr>;<pos:position pos:line="13" pos:column="21"/></return>
    }<pos:position pos:line="14" pos:column="6"/></block></then></if>
    <expr_stmt><expr><operator pos:line="15" pos:column="5">*<pos:position pos:line="15" pos:column="6"/></operator><name pos:line="15" pos:column="6">key<pos:position pos:line="15" pos:column="9"/></name> <operator pos:line="15" pos:column="10">=<pos:position pos:line="15" pos:column="11"/></operator> <name pos:line="15" pos:column="12">zoneid<pos:position pos:line="15" pos:column="18"/></name></expr>;<pos:position pos:line="15" pos:column="19"/></expr_stmt>
    <if pos:line="16" pos:column="5">if <condition pos:line="16" pos:column="8">(<expr><call><name pos:line="16" pos:column="9">c_avl_insert<pos:position pos:line="16" pos:column="21"/></name><argument_list pos:line="16" pos:column="21">(<argument><expr><name pos:line="16" pos:column="22">tree<pos:position pos:line="16" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="28">key<pos:position pos:line="16" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="33">ret<pos:position pos:line="16" pos:column="36"/></name></expr></argument>)<pos:position pos:line="16" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="16" pos:column="38"/></condition><then pos:line="16" pos:column="38"> <block pos:line="16" pos:column="39">{
      <expr_stmt><expr><call><name pos:line="17" pos:column="7">WARNING<pos:position pos:line="17" pos:column="14"/></name><argument_list pos:line="17" pos:column="14">(<argument><expr><literal type="string" pos:line="17" pos:column="15">"zone plugin: error inserting into tree"<pos:position pos:line="17" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="57"/></expr_stmt>
      <return pos:line="18" pos:column="7">return <expr><operator pos:line="18" pos:column="14">(<pos:position pos:line="18" pos:column="15"/></operator><name pos:line="18" pos:column="15">NULL<pos:position pos:line="18" pos:column="19"/></name><operator pos:line="18" pos:column="19">)<pos:position pos:line="18" pos:column="20"/></operator></expr>;<pos:position pos:line="18" pos:column="21"/></return>
    }<pos:position pos:line="19" pos:column="6"/></block></then></if>
  }<pos:position pos:line="20" pos:column="4"/></block></then></if>
  <return pos:line="21" pos:column="3">return <expr><operator pos:line="21" pos:column="10">(<pos:position pos:line="21" pos:column="11"/></operator><name pos:line="21" pos:column="11">ret<pos:position pos:line="21" pos:column="14"/></name><operator pos:line="21" pos:column="14">)<pos:position pos:line="21" pos:column="15"/></operator></expr>;<pos:position pos:line="21" pos:column="16"/></return>
}<pos:position pos:line="22" pos:column="2"/></block></function></unit>
