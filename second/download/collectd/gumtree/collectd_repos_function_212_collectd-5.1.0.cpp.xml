<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_212_collectd-5.1.0.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">flush<pos:position pos:line="1" pos:column="17"/></name> <parameter_list pos:line="1" pos:column="18">(<parameter><decl><type><name pos:line="1" pos:column="19">lcc_connection_t<pos:position pos:line="1" pos:column="35"/></name> <modifier pos:line="1" pos:column="36">*<pos:position pos:line="1" pos:column="37"/></modifier></type><name pos:line="1" pos:column="37">c<pos:position pos:line="1" pos:column="38"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="40">int<pos:position pos:line="1" pos:column="43"/></name></type> <name pos:line="1" pos:column="44">argc<pos:position pos:line="1" pos:column="48"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="50">char<pos:position pos:line="1" pos:column="54"/></name> <modifier pos:line="1" pos:column="55">*<pos:position pos:line="1" pos:column="56"/></modifier><modifier pos:line="1" pos:column="56">*<pos:position pos:line="1" pos:column="57"/></modifier></type><name pos:line="1" pos:column="57">argv<pos:position pos:line="1" pos:column="61"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="62"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">int<pos:position pos:line="3" pos:column="6"/></name></type> <name pos:line="3" pos:column="7">timeout<pos:position pos:line="3" pos:column="14"/></name> <init pos:line="3" pos:column="15">= <expr><operator pos:line="3" pos:column="17">-<pos:position pos:line="3" pos:column="18"/></operator><literal type="number" pos:line="3" pos:column="18">1<pos:position pos:line="3" pos:column="19"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="20"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="5" pos:column="3">lcc_identifier_t<pos:position pos:line="5" pos:column="19"/></name> <modifier pos:line="5" pos:column="20">*<pos:position pos:line="5" pos:column="21"/></modifier></type><name pos:line="5" pos:column="21">identifiers<pos:position pos:line="5" pos:column="32"/></name> <init pos:line="5" pos:column="33">= <expr><name pos:line="5" pos:column="35">NULL<pos:position pos:line="5" pos:column="39"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="40"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">int<pos:position pos:line="6" pos:column="6"/></name></type> <name pos:line="6" pos:column="7">identifiers_num<pos:position pos:line="6" pos:column="22"/></name> <init pos:line="6" pos:column="23">= <expr><literal type="number" pos:line="6" pos:column="25">0<pos:position pos:line="6" pos:column="26"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="27"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="8" pos:column="3">char<pos:position pos:line="8" pos:column="7"/></name> <modifier pos:line="8" pos:column="8">*<pos:position pos:line="8" pos:column="9"/></modifier><modifier pos:line="8" pos:column="9">*<pos:position pos:line="8" pos:column="10"/></modifier></type><name pos:line="8" pos:column="10">plugins<pos:position pos:line="8" pos:column="17"/></name> <init pos:line="8" pos:column="18">= <expr><name pos:line="8" pos:column="20">NULL<pos:position pos:line="8" pos:column="24"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="25"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">int<pos:position pos:line="9" pos:column="6"/></name></type> <name pos:line="9" pos:column="7">plugins_num<pos:position pos:line="9" pos:column="18"/></name> <init pos:line="9" pos:column="19">= <expr><literal type="number" pos:line="9" pos:column="21">0<pos:position pos:line="9" pos:column="22"/></literal></expr></init></decl>;<pos:position pos:line="9" pos:column="23"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="11" pos:column="3">int<pos:position pos:line="11" pos:column="6"/></name></type> <name pos:line="11" pos:column="7">status<pos:position pos:line="11" pos:column="13"/></name></decl>;<pos:position pos:line="11" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="12" pos:column="3">int<pos:position pos:line="12" pos:column="6"/></name></type> <name pos:line="12" pos:column="7">i<pos:position pos:line="12" pos:column="8"/></name></decl>;<pos:position pos:line="12" pos:column="9"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="14" pos:column="3">assert<pos:position pos:line="14" pos:column="9"/></name> <argument_list pos:line="14" pos:column="10">(<argument><expr><call><name pos:line="14" pos:column="11">strcasecmp<pos:position pos:line="14" pos:column="21"/></name> <argument_list pos:line="14" pos:column="22">(<argument><expr><name><name pos:line="14" pos:column="23">argv<pos:position pos:line="14" pos:column="27"/></name><index pos:line="14" pos:column="27">[<expr><literal type="number" pos:line="14" pos:column="28">0<pos:position pos:line="14" pos:column="29"/></literal></expr>]<pos:position pos:line="14" pos:column="30"/></index></name></expr></argument>, <argument><expr><literal type="string" pos:line="14" pos:column="32">"flush"<pos:position pos:line="14" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="40"/></argument_list></call> <operator pos:line="14" pos:column="41">==<pos:position pos:line="14" pos:column="43"/></operator> <literal type="number" pos:line="14" pos:column="44">0<pos:position pos:line="14" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="47"/></expr_stmt>

<cpp:define pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">define<pos:position pos:line="16" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="16" pos:column="9">BAIL_OUT<pos:position pos:line="16" pos:column="17"/></name><parameter_list pos:line="16" pos:column="17">(<parameter><type><name pos:line="16" pos:column="18">s<pos:position pos:line="16" pos:column="19"/></name></type></parameter>)<pos:position pos:line="16" pos:column="20"/></parameter_list></cpp:macro> \
  <cpp:value pos:line="17" pos:column="3">do { \
    if (identifiers != NULL) \
      free (identifiers); \
    identifiers_num = 0; \
    if (plugins != NULL) \
      free (plugins); \
    plugins_num = 0; \
    return (s); \
  } while (0)<pos:position pos:line="25" pos:column="14"/></cpp:value></cpp:define>

  <for pos:line="27" pos:column="3">for <control pos:line="27" pos:column="7">(<init><expr><name pos:line="27" pos:column="8">i<pos:position pos:line="27" pos:column="9"/></name> <operator pos:line="27" pos:column="10">=<pos:position pos:line="27" pos:column="11"/></operator> <literal type="number" pos:line="27" pos:column="12">1<pos:position pos:line="27" pos:column="13"/></literal></expr>;<pos:position pos:line="27" pos:column="14"/></init> <condition><expr><name pos:line="27" pos:column="15">i<pos:position pos:line="27" pos:column="16"/></name> <operator pos:line="27" pos:column="17">&lt;<pos:position pos:line="27" pos:column="21"/></operator> <name pos:line="27" pos:column="19">argc<pos:position pos:line="27" pos:column="23"/></name></expr>;<pos:position pos:line="27" pos:column="24"/></condition> <incr><expr><operator pos:line="27" pos:column="25">++<pos:position pos:line="27" pos:column="27"/></operator><name pos:line="27" pos:column="27">i<pos:position pos:line="27" pos:column="28"/></name></expr></incr>)<pos:position pos:line="27" pos:column="29"/></control> <block pos:line="27" pos:column="30">{
    <decl_stmt><decl><type><name pos:line="28" pos:column="5">char<pos:position pos:line="28" pos:column="9"/></name> <modifier pos:line="28" pos:column="10">*<pos:position pos:line="28" pos:column="11"/></modifier></type><name pos:line="28" pos:column="11">key<pos:position pos:line="28" pos:column="14"/></name></decl>, <modifier pos:line="28" pos:column="16">*<pos:position pos:line="28" pos:column="17"/></modifier><decl><type ref="prev"/><name pos:line="28" pos:column="17">value<pos:position pos:line="28" pos:column="22"/></name></decl>;<pos:position pos:line="28" pos:column="23"/></decl_stmt>

    <expr_stmt><expr><name pos:line="30" pos:column="5">key<pos:position pos:line="30" pos:column="8"/></name>   <operator pos:line="30" pos:column="11">=<pos:position pos:line="30" pos:column="12"/></operator> <name><name pos:line="30" pos:column="13">argv<pos:position pos:line="30" pos:column="17"/></name><index pos:line="30" pos:column="17">[<expr><name pos:line="30" pos:column="18">i<pos:position pos:line="30" pos:column="19"/></name></expr>]<pos:position pos:line="30" pos:column="20"/></index></name></expr>;<pos:position pos:line="30" pos:column="21"/></expr_stmt>
    <expr_stmt><expr><name pos:line="31" pos:column="5">value<pos:position pos:line="31" pos:column="10"/></name> <operator pos:line="31" pos:column="11">=<pos:position pos:line="31" pos:column="12"/></operator> <call><name pos:line="31" pos:column="13">strchr<pos:position pos:line="31" pos:column="19"/></name> <argument_list pos:line="31" pos:column="20">(<argument><expr><name><name pos:line="31" pos:column="21">argv<pos:position pos:line="31" pos:column="25"/></name><index pos:line="31" pos:column="25">[<expr><name pos:line="31" pos:column="26">i<pos:position pos:line="31" pos:column="27"/></name></expr>]<pos:position pos:line="31" pos:column="28"/></index></name></expr></argument>, <argument><expr><operator pos:line="31" pos:column="30">(<pos:position pos:line="31" pos:column="31"/></operator><name pos:line="31" pos:column="31">int<pos:position pos:line="31" pos:column="34"/></name><operator pos:line="31" pos:column="34">)<pos:position pos:line="31" pos:column="35"/></operator><literal type="char" pos:line="31" pos:column="35">'='<pos:position pos:line="31" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="31" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="40"/></expr_stmt>

    <if pos:line="33" pos:column="5">if <condition pos:line="33" pos:column="8">(<expr><operator pos:line="33" pos:column="9">!<pos:position pos:line="33" pos:column="10"/></operator> <name pos:line="33" pos:column="11">value<pos:position pos:line="33" pos:column="16"/></name></expr>)<pos:position pos:line="33" pos:column="17"/></condition><then pos:line="33" pos:column="17"> <block pos:line="33" pos:column="18">{
      <expr_stmt><expr><call><name pos:line="34" pos:column="7">fprintf<pos:position pos:line="34" pos:column="14"/></name> <argument_list pos:line="34" pos:column="15">(<argument><expr><name pos:line="34" pos:column="16">stderr<pos:position pos:line="34" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="34" pos:column="24">"ERROR: flush: Invalid option ``%s''.\n"<pos:position pos:line="34" pos:column="64"/></literal></expr></argument>, <argument><expr><name><name pos:line="34" pos:column="66">argv<pos:position pos:line="34" pos:column="70"/></name><index pos:line="34" pos:column="70">[<expr><name pos:line="34" pos:column="71">i<pos:position pos:line="34" pos:column="72"/></name></expr>]<pos:position pos:line="34" pos:column="73"/></index></name></expr></argument>)<pos:position pos:line="34" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="75"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="35" pos:column="7">BAIL_OUT<pos:position pos:line="35" pos:column="15"/></name> <argument_list pos:line="35" pos:column="16">(<argument><expr><operator pos:line="35" pos:column="17">-<pos:position pos:line="35" pos:column="18"/></operator><literal type="number" pos:line="35" pos:column="18">1<pos:position pos:line="35" pos:column="19"/></literal></expr></argument>)<pos:position pos:line="35" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="21"/></expr_stmt>
    }<pos:position pos:line="36" pos:column="6"/></block></then></if>

    <expr_stmt><expr><operator pos:line="38" pos:column="5">*<pos:position pos:line="38" pos:column="6"/></operator><name pos:line="38" pos:column="6">value<pos:position pos:line="38" pos:column="11"/></name> <operator pos:line="38" pos:column="12">=<pos:position pos:line="38" pos:column="13"/></operator> <literal type="char" pos:line="38" pos:column="14">'\0'<pos:position pos:line="38" pos:column="18"/></literal></expr>;<pos:position pos:line="38" pos:column="19"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="39" pos:column="5">++<pos:position pos:line="39" pos:column="7"/></operator><name pos:line="39" pos:column="7">value<pos:position pos:line="39" pos:column="12"/></name></expr>;<pos:position pos:line="39" pos:column="13"/></expr_stmt>

    <if pos:line="41" pos:column="5">if <condition pos:line="41" pos:column="8">(<expr><call><name pos:line="41" pos:column="9">strcasecmp<pos:position pos:line="41" pos:column="19"/></name> <argument_list pos:line="41" pos:column="20">(<argument><expr><name pos:line="41" pos:column="21">key<pos:position pos:line="41" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="41" pos:column="26">"timeout"<pos:position pos:line="41" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="41" pos:column="36"/></argument_list></call> <operator pos:line="41" pos:column="37">==<pos:position pos:line="41" pos:column="39"/></operator> <literal type="number" pos:line="41" pos:column="40">0<pos:position pos:line="41" pos:column="41"/></literal></expr>)<pos:position pos:line="41" pos:column="42"/></condition><then pos:line="41" pos:column="42"> <block pos:line="41" pos:column="43">{
      <decl_stmt><decl><type><name pos:line="42" pos:column="7">char<pos:position pos:line="42" pos:column="11"/></name> <modifier pos:line="42" pos:column="12">*<pos:position pos:line="42" pos:column="13"/></modifier></type><name pos:line="42" pos:column="13">endptr<pos:position pos:line="42" pos:column="19"/></name> <init pos:line="42" pos:column="20">= <expr><name pos:line="42" pos:column="22">NULL<pos:position pos:line="42" pos:column="26"/></name></expr></init></decl>;<pos:position pos:line="42" pos:column="27"/></decl_stmt>

      <expr_stmt><expr><name pos:line="44" pos:column="7">timeout<pos:position pos:line="44" pos:column="14"/></name> <operator pos:line="44" pos:column="15">=<pos:position pos:line="44" pos:column="16"/></operator> <operator pos:line="44" pos:column="17">(<pos:position pos:line="44" pos:column="18"/></operator><name pos:line="44" pos:column="18">int<pos:position pos:line="44" pos:column="21"/></name><operator pos:line="44" pos:column="21">)<pos:position pos:line="44" pos:column="22"/></operator> <call><name pos:line="44" pos:column="23">strtol<pos:position pos:line="44" pos:column="29"/></name> <argument_list pos:line="44" pos:column="30">(<argument><expr><name pos:line="44" pos:column="31">value<pos:position pos:line="44" pos:column="36"/></name></expr></argument>, <argument><expr><operator pos:line="44" pos:column="38">&amp;<pos:position pos:line="44" pos:column="43"/></operator><name pos:line="44" pos:column="39">endptr<pos:position pos:line="44" pos:column="45"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="44" pos:column="47">0<pos:position pos:line="44" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="44" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="50"/></expr_stmt>

      <if pos:line="46" pos:column="7">if <condition pos:line="46" pos:column="10">(<expr><name pos:line="46" pos:column="11">endptr<pos:position pos:line="46" pos:column="17"/></name> <operator pos:line="46" pos:column="18">==<pos:position pos:line="46" pos:column="20"/></operator> <name pos:line="46" pos:column="21">value<pos:position pos:line="46" pos:column="26"/></name></expr>)<pos:position pos:line="46" pos:column="27"/></condition><then pos:line="46" pos:column="27"> <block pos:line="46" pos:column="28">{
        <expr_stmt><expr><call><name pos:line="47" pos:column="9">fprintf<pos:position pos:line="47" pos:column="16"/></name> <argument_list pos:line="47" pos:column="17">(<argument><expr><name pos:line="47" pos:column="18">stderr<pos:position pos:line="47" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="47" pos:column="26">"ERROR: Failed to parse timeout as number: %s.\n"<pos:position pos:line="47" pos:column="75"/></literal></expr></argument>,
            <argument><expr><name pos:line="48" pos:column="13">value<pos:position pos:line="48" pos:column="18"/></name></expr></argument>)<pos:position pos:line="48" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="20"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="49" pos:column="9">BAIL_OUT<pos:position pos:line="49" pos:column="17"/></name> <argument_list pos:line="49" pos:column="18">(<argument><expr><operator pos:line="49" pos:column="19">-<pos:position pos:line="49" pos:column="20"/></operator><literal type="number" pos:line="49" pos:column="20">1<pos:position pos:line="49" pos:column="21"/></literal></expr></argument>)<pos:position pos:line="49" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="23"/></expr_stmt>
      }<pos:position pos:line="50" pos:column="8"/></block></then>
      <elseif pos:line="51" pos:column="7">else <if pos:line="51" pos:column="12">if <condition pos:line="51" pos:column="15">(<expr><operator pos:line="51" pos:column="16">(<pos:position pos:line="51" pos:column="17"/></operator><name pos:line="51" pos:column="17">endptr<pos:position pos:line="51" pos:column="23"/></name> <operator pos:line="51" pos:column="24">!=<pos:position pos:line="51" pos:column="26"/></operator> <name pos:line="51" pos:column="27">NULL<pos:position pos:line="51" pos:column="31"/></name><operator pos:line="51" pos:column="31">)<pos:position pos:line="51" pos:column="32"/></operator> <operator pos:line="51" pos:column="33">&amp;&amp;<pos:position pos:line="51" pos:column="43"/></operator> <operator pos:line="51" pos:column="36">(<pos:position pos:line="51" pos:column="37"/></operator><operator pos:line="51" pos:column="37">*<pos:position pos:line="51" pos:column="38"/></operator><name pos:line="51" pos:column="38">endptr<pos:position pos:line="51" pos:column="44"/></name> <operator pos:line="51" pos:column="45">!=<pos:position pos:line="51" pos:column="47"/></operator> <literal type="char" pos:line="51" pos:column="48">'\0'<pos:position pos:line="51" pos:column="52"/></literal><operator pos:line="51" pos:column="52">)<pos:position pos:line="51" pos:column="53"/></operator></expr>)<pos:position pos:line="51" pos:column="54"/></condition><then pos:line="51" pos:column="54"> <block pos:line="51" pos:column="55">{
        <expr_stmt><expr><call><name pos:line="52" pos:column="9">fprintf<pos:position pos:line="52" pos:column="16"/></name> <argument_list pos:line="52" pos:column="17">(<argument><expr><name pos:line="52" pos:column="18">stderr<pos:position pos:line="52" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="52" pos:column="26">"WARNING: Ignoring trailing garbage after timeout: "<pos:position pos:line="52" pos:column="78"/></literal>
            <literal type="string" pos:line="53" pos:column="13">"%s.\n"<pos:position pos:line="53" pos:column="20"/></literal></expr></argument>, <argument><expr><name pos:line="53" pos:column="22">endptr<pos:position pos:line="53" pos:column="28"/></name></expr></argument>)<pos:position pos:line="53" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="30"/></expr_stmt>
      }<pos:position pos:line="54" pos:column="8"/></block></then></if></elseif></if>
    }<pos:position pos:line="55" pos:column="6"/></block></then>
    <elseif pos:line="56" pos:column="5">else <if pos:line="56" pos:column="10">if <condition pos:line="56" pos:column="13">(<expr><call><name pos:line="56" pos:column="14">strcasecmp<pos:position pos:line="56" pos:column="24"/></name> <argument_list pos:line="56" pos:column="25">(<argument><expr><name pos:line="56" pos:column="26">key<pos:position pos:line="56" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="56" pos:column="31">"plugin"<pos:position pos:line="56" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="56" pos:column="40"/></argument_list></call> <operator pos:line="56" pos:column="41">==<pos:position pos:line="56" pos:column="43"/></operator> <literal type="number" pos:line="56" pos:column="44">0<pos:position pos:line="56" pos:column="45"/></literal></expr>)<pos:position pos:line="56" pos:column="46"/></condition><then pos:line="56" pos:column="46"> <block pos:line="56" pos:column="47">{
      <expr_stmt><expr><name pos:line="57" pos:column="7">status<pos:position pos:line="57" pos:column="13"/></name> <operator pos:line="57" pos:column="14">=<pos:position pos:line="57" pos:column="15"/></operator> <call><name pos:line="57" pos:column="16">array_grow<pos:position pos:line="57" pos:column="26"/></name> <argument_list pos:line="57" pos:column="27">(<argument><expr><operator pos:line="57" pos:column="28">(<pos:position pos:line="57" pos:column="29"/></operator><name pos:line="57" pos:column="29">void<pos:position pos:line="57" pos:column="33"/></name> <operator pos:line="57" pos:column="34">*<pos:position pos:line="57" pos:column="35"/></operator><operator pos:line="57" pos:column="35">)<pos:position pos:line="57" pos:column="36"/></operator><operator pos:line="57" pos:column="36">&amp;<pos:position pos:line="57" pos:column="41"/></operator><name pos:line="57" pos:column="37">plugins<pos:position pos:line="57" pos:column="44"/></name></expr></argument>, <argument><expr><operator pos:line="57" pos:column="46">&amp;<pos:position pos:line="57" pos:column="51"/></operator><name pos:line="57" pos:column="47">plugins_num<pos:position pos:line="57" pos:column="58"/></name></expr></argument>,
          <argument><expr><sizeof pos:line="58" pos:column="11">sizeof <argument_list pos:line="58" pos:column="18">(<argument><expr><operator pos:line="58" pos:column="19">*<pos:position pos:line="58" pos:column="20"/></operator><name pos:line="58" pos:column="20">plugins<pos:position pos:line="58" pos:column="27"/></name></expr></argument>)<pos:position pos:line="58" pos:column="28"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="58" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="30"/></expr_stmt>
      <if pos:line="59" pos:column="7">if <condition pos:line="59" pos:column="10">(<expr><name pos:line="59" pos:column="11">status<pos:position pos:line="59" pos:column="17"/></name> <operator pos:line="59" pos:column="18">!=<pos:position pos:line="59" pos:column="20"/></operator> <literal type="number" pos:line="59" pos:column="21">0<pos:position pos:line="59" pos:column="22"/></literal></expr>)<pos:position pos:line="59" pos:column="23"/></condition><then pos:line="59" pos:column="23">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="60" pos:column="9">BAIL_OUT<pos:position pos:line="60" pos:column="17"/></name> <argument_list pos:line="60" pos:column="18">(<argument><expr><name pos:line="60" pos:column="19">status<pos:position pos:line="60" pos:column="25"/></name></expr></argument>)<pos:position pos:line="60" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="27"/></expr_stmt></block></then></if>

      <expr_stmt><expr><name><name pos:line="62" pos:column="7">plugins<pos:position pos:line="62" pos:column="14"/></name><index pos:line="62" pos:column="14">[<expr><name pos:line="62" pos:column="15">plugins_num<pos:position pos:line="62" pos:column="26"/></name> <operator pos:line="62" pos:column="27">-<pos:position pos:line="62" pos:column="28"/></operator> <literal type="number" pos:line="62" pos:column="29">1<pos:position pos:line="62" pos:column="30"/></literal></expr>]<pos:position pos:line="62" pos:column="31"/></index></name> <operator pos:line="62" pos:column="32">=<pos:position pos:line="62" pos:column="33"/></operator> <name pos:line="62" pos:column="34">value<pos:position pos:line="62" pos:column="39"/></name></expr>;<pos:position pos:line="62" pos:column="40"/></expr_stmt>
    }<pos:position pos:line="63" pos:column="6"/></block></then></if></elseif>
    <elseif pos:line="64" pos:column="5">else <if pos:line="64" pos:column="10">if <condition pos:line="64" pos:column="13">(<expr><call><name pos:line="64" pos:column="14">strcasecmp<pos:position pos:line="64" pos:column="24"/></name> <argument_list pos:line="64" pos:column="25">(<argument><expr><name pos:line="64" pos:column="26">key<pos:position pos:line="64" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="64" pos:column="31">"identifier"<pos:position pos:line="64" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="64" pos:column="44"/></argument_list></call> <operator pos:line="64" pos:column="45">==<pos:position pos:line="64" pos:column="47"/></operator> <literal type="number" pos:line="64" pos:column="48">0<pos:position pos:line="64" pos:column="49"/></literal></expr>)<pos:position pos:line="64" pos:column="50"/></condition><then pos:line="64" pos:column="50"> <block pos:line="64" pos:column="51">{
      <expr_stmt><expr><name pos:line="65" pos:column="7">status<pos:position pos:line="65" pos:column="13"/></name> <operator pos:line="65" pos:column="14">=<pos:position pos:line="65" pos:column="15"/></operator> <call><name pos:line="65" pos:column="16">array_grow<pos:position pos:line="65" pos:column="26"/></name> <argument_list pos:line="65" pos:column="27">(<argument><expr><operator pos:line="65" pos:column="28">(<pos:position pos:line="65" pos:column="29"/></operator><name pos:line="65" pos:column="29">void<pos:position pos:line="65" pos:column="33"/></name> <operator pos:line="65" pos:column="34">*<pos:position pos:line="65" pos:column="35"/></operator><operator pos:line="65" pos:column="35">)<pos:position pos:line="65" pos:column="36"/></operator><operator pos:line="65" pos:column="36">&amp;<pos:position pos:line="65" pos:column="41"/></operator><name pos:line="65" pos:column="37">identifiers<pos:position pos:line="65" pos:column="48"/></name></expr></argument>, <argument><expr><operator pos:line="65" pos:column="50">&amp;<pos:position pos:line="65" pos:column="55"/></operator><name pos:line="65" pos:column="51">identifiers_num<pos:position pos:line="65" pos:column="66"/></name></expr></argument>,
          <argument><expr><sizeof pos:line="66" pos:column="11">sizeof <argument_list pos:line="66" pos:column="18">(<argument><expr><operator pos:line="66" pos:column="19">*<pos:position pos:line="66" pos:column="20"/></operator><name pos:line="66" pos:column="20">identifiers<pos:position pos:line="66" pos:column="31"/></name></expr></argument>)<pos:position pos:line="66" pos:column="32"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="66" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="34"/></expr_stmt>
      <if pos:line="67" pos:column="7">if <condition pos:line="67" pos:column="10">(<expr><name pos:line="67" pos:column="11">status<pos:position pos:line="67" pos:column="17"/></name> <operator pos:line="67" pos:column="18">!=<pos:position pos:line="67" pos:column="20"/></operator> <literal type="number" pos:line="67" pos:column="21">0<pos:position pos:line="67" pos:column="22"/></literal></expr>)<pos:position pos:line="67" pos:column="23"/></condition><then pos:line="67" pos:column="23">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="68" pos:column="9">BAIL_OUT<pos:position pos:line="68" pos:column="17"/></name> <argument_list pos:line="68" pos:column="18">(<argument><expr><name pos:line="68" pos:column="19">status<pos:position pos:line="68" pos:column="25"/></name></expr></argument>)<pos:position pos:line="68" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="27"/></expr_stmt></block></then></if>

      <expr_stmt><expr><call><name pos:line="70" pos:column="7">memset<pos:position pos:line="70" pos:column="13"/></name> <argument_list pos:line="70" pos:column="14">(<argument><expr><name pos:line="70" pos:column="15">identifiers<pos:position pos:line="70" pos:column="26"/></name> <operator pos:line="70" pos:column="27">+<pos:position pos:line="70" pos:column="28"/></operator> <operator pos:line="70" pos:column="29">(<pos:position pos:line="70" pos:column="30"/></operator><name pos:line="70" pos:column="30">identifiers_num<pos:position pos:line="70" pos:column="45"/></name> <operator pos:line="70" pos:column="46">-<pos:position pos:line="70" pos:column="47"/></operator> <literal type="number" pos:line="70" pos:column="48">1<pos:position pos:line="70" pos:column="49"/></literal><operator pos:line="70" pos:column="49">)<pos:position pos:line="70" pos:column="50"/></operator></expr></argument>, <argument><expr><literal type="number" pos:line="70" pos:column="52">0<pos:position pos:line="70" pos:column="53"/></literal></expr></argument>, <argument><expr><sizeof pos:line="70" pos:column="55">sizeof <argument_list pos:line="70" pos:column="62">(<argument><expr><operator pos:line="70" pos:column="63">*<pos:position pos:line="70" pos:column="64"/></operator><name pos:line="70" pos:column="64">identifiers<pos:position pos:line="70" pos:column="75"/></name></expr></argument>)<pos:position pos:line="70" pos:column="76"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="70" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="78"/></expr_stmt>
      <expr_stmt><expr><name pos:line="71" pos:column="7">status<pos:position pos:line="71" pos:column="13"/></name> <operator pos:line="71" pos:column="14">=<pos:position pos:line="71" pos:column="15"/></operator> <call><name pos:line="71" pos:column="16">parse_identifier<pos:position pos:line="71" pos:column="32"/></name> <argument_list pos:line="71" pos:column="33">(<argument><expr><name pos:line="71" pos:column="34">c<pos:position pos:line="71" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="71" pos:column="37">value<pos:position pos:line="71" pos:column="42"/></name></expr></argument>,
          <argument><expr><name pos:line="72" pos:column="11">identifiers<pos:position pos:line="72" pos:column="22"/></name> <operator pos:line="72" pos:column="23">+<pos:position pos:line="72" pos:column="24"/></operator> <operator pos:line="72" pos:column="25">(<pos:position pos:line="72" pos:column="26"/></operator><name pos:line="72" pos:column="26">identifiers_num<pos:position pos:line="72" pos:column="41"/></name> <operator pos:line="72" pos:column="42">-<pos:position pos:line="72" pos:column="43"/></operator> <literal type="number" pos:line="72" pos:column="44">1<pos:position pos:line="72" pos:column="45"/></literal><operator pos:line="72" pos:column="45">)<pos:position pos:line="72" pos:column="46"/></operator></expr></argument>)<pos:position pos:line="72" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="48"/></expr_stmt>
      <if pos:line="73" pos:column="7">if <condition pos:line="73" pos:column="10">(<expr><name pos:line="73" pos:column="11">status<pos:position pos:line="73" pos:column="17"/></name> <operator pos:line="73" pos:column="18">!=<pos:position pos:line="73" pos:column="20"/></operator> <literal type="number" pos:line="73" pos:column="21">0<pos:position pos:line="73" pos:column="22"/></literal></expr>)<pos:position pos:line="73" pos:column="23"/></condition><then pos:line="73" pos:column="23">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="74" pos:column="9">BAIL_OUT<pos:position pos:line="74" pos:column="17"/></name> <argument_list pos:line="74" pos:column="18">(<argument><expr><name pos:line="74" pos:column="19">status<pos:position pos:line="74" pos:column="25"/></name></expr></argument>)<pos:position pos:line="74" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="27"/></expr_stmt></block></then></if>
    }<pos:position pos:line="75" pos:column="6"/></block></then></if></elseif>
    <else pos:line="76" pos:column="5">else <block pos:line="76" pos:column="10">{
      <expr_stmt><expr><call><name pos:line="77" pos:column="7">fprintf<pos:position pos:line="77" pos:column="14"/></name> <argument_list pos:line="77" pos:column="15">(<argument><expr><name pos:line="77" pos:column="16">stderr<pos:position pos:line="77" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="77" pos:column="24">"ERROR: flush: Unknown option `%s'.\n"<pos:position pos:line="77" pos:column="62"/></literal></expr></argument>, <argument><expr><name pos:line="77" pos:column="64">key<pos:position pos:line="77" pos:column="67"/></name></expr></argument>)<pos:position pos:line="77" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="69"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="78" pos:column="7">BAIL_OUT<pos:position pos:line="78" pos:column="15"/></name> <argument_list pos:line="78" pos:column="16">(<argument><expr><operator pos:line="78" pos:column="17">-<pos:position pos:line="78" pos:column="18"/></operator><literal type="number" pos:line="78" pos:column="18">1<pos:position pos:line="78" pos:column="19"/></literal></expr></argument>)<pos:position pos:line="78" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="21"/></expr_stmt>
    }<pos:position pos:line="79" pos:column="6"/></block></else></if>
  }<pos:position pos:line="80" pos:column="4"/></block></for>

  <if pos:line="82" pos:column="3">if <condition pos:line="82" pos:column="6">(<expr><name pos:line="82" pos:column="7">plugins_num<pos:position pos:line="82" pos:column="18"/></name> <operator pos:line="82" pos:column="19">==<pos:position pos:line="82" pos:column="21"/></operator> <literal type="number" pos:line="82" pos:column="22">0<pos:position pos:line="82" pos:column="23"/></literal></expr>)<pos:position pos:line="82" pos:column="24"/></condition><then pos:line="82" pos:column="24"> <block pos:line="82" pos:column="25">{
    <expr_stmt><expr><name pos:line="83" pos:column="5">status<pos:position pos:line="83" pos:column="11"/></name> <operator pos:line="83" pos:column="12">=<pos:position pos:line="83" pos:column="13"/></operator> <call><name pos:line="83" pos:column="14">array_grow<pos:position pos:line="83" pos:column="24"/></name> <argument_list pos:line="83" pos:column="25">(<argument><expr><operator pos:line="83" pos:column="26">(<pos:position pos:line="83" pos:column="27"/></operator><name pos:line="83" pos:column="27">void<pos:position pos:line="83" pos:column="31"/></name> <operator pos:line="83" pos:column="32">*<pos:position pos:line="83" pos:column="33"/></operator><operator pos:line="83" pos:column="33">)<pos:position pos:line="83" pos:column="34"/></operator><operator pos:line="83" pos:column="34">&amp;<pos:position pos:line="83" pos:column="39"/></operator><name pos:line="83" pos:column="35">plugins<pos:position pos:line="83" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="83" pos:column="44">&amp;<pos:position pos:line="83" pos:column="49"/></operator><name pos:line="83" pos:column="45">plugins_num<pos:position pos:line="83" pos:column="56"/></name></expr></argument>, <argument><expr><sizeof pos:line="83" pos:column="58">sizeof <argument_list pos:line="83" pos:column="65">(<argument><expr><operator pos:line="83" pos:column="66">*<pos:position pos:line="83" pos:column="67"/></operator><name pos:line="83" pos:column="67">plugins<pos:position pos:line="83" pos:column="74"/></name></expr></argument>)<pos:position pos:line="83" pos:column="75"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="83" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="77"/></expr_stmt>
    <if pos:line="84" pos:column="5">if <condition pos:line="84" pos:column="8">(<expr><name pos:line="84" pos:column="9">status<pos:position pos:line="84" pos:column="15"/></name> <operator pos:line="84" pos:column="16">!=<pos:position pos:line="84" pos:column="18"/></operator> <literal type="number" pos:line="84" pos:column="19">0<pos:position pos:line="84" pos:column="20"/></literal></expr>)<pos:position pos:line="84" pos:column="21"/></condition><then pos:line="84" pos:column="21">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="85" pos:column="7">BAIL_OUT<pos:position pos:line="85" pos:column="15"/></name> <argument_list pos:line="85" pos:column="16">(<argument><expr><name pos:line="85" pos:column="17">status<pos:position pos:line="85" pos:column="23"/></name></expr></argument>)<pos:position pos:line="85" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="25"/></expr_stmt></block></then></if>

    <expr_stmt><expr><call><name pos:line="87" pos:column="5">assert<pos:position pos:line="87" pos:column="11"/></name> <argument_list pos:line="87" pos:column="12">(<argument><expr><name pos:line="87" pos:column="13">plugins_num<pos:position pos:line="87" pos:column="24"/></name> <operator pos:line="87" pos:column="25">==<pos:position pos:line="87" pos:column="27"/></operator> <literal type="number" pos:line="87" pos:column="28">1<pos:position pos:line="87" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="87" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="31"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="88" pos:column="5">plugins<pos:position pos:line="88" pos:column="12"/></name><index pos:line="88" pos:column="12">[<expr><literal type="number" pos:line="88" pos:column="13">0<pos:position pos:line="88" pos:column="14"/></literal></expr>]<pos:position pos:line="88" pos:column="15"/></index></name> <operator pos:line="88" pos:column="16">=<pos:position pos:line="88" pos:column="17"/></operator> <name pos:line="88" pos:column="18">NULL<pos:position pos:line="88" pos:column="22"/></name></expr>;<pos:position pos:line="88" pos:column="23"/></expr_stmt>
  }<pos:position pos:line="89" pos:column="4"/></block></then></if>

  <for pos:line="91" pos:column="3">for <control pos:line="91" pos:column="7">(<init><expr><name pos:line="91" pos:column="8">i<pos:position pos:line="91" pos:column="9"/></name> <operator pos:line="91" pos:column="10">=<pos:position pos:line="91" pos:column="11"/></operator> <literal type="number" pos:line="91" pos:column="12">0<pos:position pos:line="91" pos:column="13"/></literal></expr>;<pos:position pos:line="91" pos:column="14"/></init> <condition><expr><name pos:line="91" pos:column="15">i<pos:position pos:line="91" pos:column="16"/></name> <operator pos:line="91" pos:column="17">&lt;<pos:position pos:line="91" pos:column="21"/></operator> <name pos:line="91" pos:column="19">plugins_num<pos:position pos:line="91" pos:column="30"/></name></expr>;<pos:position pos:line="91" pos:column="31"/></condition> <incr><expr><operator pos:line="91" pos:column="32">++<pos:position pos:line="91" pos:column="34"/></operator><name pos:line="91" pos:column="34">i<pos:position pos:line="91" pos:column="35"/></name></expr></incr>)<pos:position pos:line="91" pos:column="36"/></control> <block pos:line="91" pos:column="37">{
    <if pos:line="92" pos:column="5">if <condition pos:line="92" pos:column="8">(<expr><name pos:line="92" pos:column="9">identifiers_num<pos:position pos:line="92" pos:column="24"/></name> <operator pos:line="92" pos:column="25">==<pos:position pos:line="92" pos:column="27"/></operator> <literal type="number" pos:line="92" pos:column="28">0<pos:position pos:line="92" pos:column="29"/></literal></expr>)<pos:position pos:line="92" pos:column="30"/></condition><then pos:line="92" pos:column="30"> <block pos:line="92" pos:column="31">{
      <expr_stmt><expr><name pos:line="93" pos:column="7">status<pos:position pos:line="93" pos:column="13"/></name> <operator pos:line="93" pos:column="14">=<pos:position pos:line="93" pos:column="15"/></operator> <call><name pos:line="93" pos:column="16">lcc_flush<pos:position pos:line="93" pos:column="25"/></name> <argument_list pos:line="93" pos:column="26">(<argument><expr><name pos:line="93" pos:column="27">c<pos:position pos:line="93" pos:column="28"/></name></expr></argument>, <argument><expr><name><name pos:line="93" pos:column="30">plugins<pos:position pos:line="93" pos:column="37"/></name><index pos:line="93" pos:column="37">[<expr><name pos:line="93" pos:column="38">i<pos:position pos:line="93" pos:column="39"/></name></expr>]<pos:position pos:line="93" pos:column="40"/></index></name></expr></argument>, <argument><expr><name pos:line="93" pos:column="42">NULL<pos:position pos:line="93" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="93" pos:column="48">timeout<pos:position pos:line="93" pos:column="55"/></name></expr></argument>)<pos:position pos:line="93" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="57"/></expr_stmt>
      <if pos:line="94" pos:column="7">if <condition pos:line="94" pos:column="10">(<expr><name pos:line="94" pos:column="11">status<pos:position pos:line="94" pos:column="17"/></name> <operator pos:line="94" pos:column="18">!=<pos:position pos:line="94" pos:column="20"/></operator> <literal type="number" pos:line="94" pos:column="21">0<pos:position pos:line="94" pos:column="22"/></literal></expr>)<pos:position pos:line="94" pos:column="23"/></condition><then pos:line="94" pos:column="23">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="95" pos:column="9">fprintf<pos:position pos:line="95" pos:column="16"/></name> <argument_list pos:line="95" pos:column="17">(<argument><expr><name pos:line="95" pos:column="18">stderr<pos:position pos:line="95" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="95" pos:column="26">"ERROR: Failed to flush plugin `%s': %s.\n"<pos:position pos:line="95" pos:column="69"/></literal></expr></argument>,
            <argument><expr><ternary><condition><expr><operator pos:line="96" pos:column="13">(<pos:position pos:line="96" pos:column="14"/></operator><name><name pos:line="96" pos:column="14">plugins<pos:position pos:line="96" pos:column="21"/></name><index pos:line="96" pos:column="21">[<expr><name pos:line="96" pos:column="22">i<pos:position pos:line="96" pos:column="23"/></name></expr>]<pos:position pos:line="96" pos:column="24"/></index></name> <operator pos:line="96" pos:column="25">==<pos:position pos:line="96" pos:column="27"/></operator> <name pos:line="96" pos:column="28">NULL<pos:position pos:line="96" pos:column="32"/></name><operator pos:line="96" pos:column="32">)<pos:position pos:line="96" pos:column="33"/></operator></expr> ?<pos:position pos:line="96" pos:column="35"/></condition><then pos:line="96" pos:column="35"> <expr><literal type="string" pos:line="96" pos:column="36">"(all)"<pos:position pos:line="96" pos:column="43"/></literal></expr> <pos:position pos:line="96" pos:column="44"/></then><else pos:line="96" pos:column="44">: <expr><name><name pos:line="96" pos:column="46">plugins<pos:position pos:line="96" pos:column="53"/></name><index pos:line="96" pos:column="53">[<expr><name pos:line="96" pos:column="54">i<pos:position pos:line="96" pos:column="55"/></name></expr>]<pos:position pos:line="96" pos:column="56"/></index></name></expr></else></ternary></expr></argument>, <argument><expr><call><name pos:line="96" pos:column="58">lcc_strerror<pos:position pos:line="96" pos:column="70"/></name> <argument_list pos:line="96" pos:column="71">(<argument><expr><name pos:line="96" pos:column="72">c<pos:position pos:line="96" pos:column="73"/></name></expr></argument>)<pos:position pos:line="96" pos:column="74"/></argument_list></call></expr></argument>)<pos:position pos:line="96" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="96" pos:column="76"/></expr_stmt></block></then></if>
    }<pos:position pos:line="97" pos:column="6"/></block></then>
    <else pos:line="98" pos:column="5">else <block pos:line="98" pos:column="10">{
      <decl_stmt><decl><type><name pos:line="99" pos:column="7">int<pos:position pos:line="99" pos:column="10"/></name></type> <name pos:line="99" pos:column="11">j<pos:position pos:line="99" pos:column="12"/></name></decl>;<pos:position pos:line="99" pos:column="13"/></decl_stmt>

      <for pos:line="101" pos:column="7">for <control pos:line="101" pos:column="11">(<init><expr><name pos:line="101" pos:column="12">j<pos:position pos:line="101" pos:column="13"/></name> <operator pos:line="101" pos:column="14">=<pos:position pos:line="101" pos:column="15"/></operator> <literal type="number" pos:line="101" pos:column="16">0<pos:position pos:line="101" pos:column="17"/></literal></expr>;<pos:position pos:line="101" pos:column="18"/></init> <condition><expr><name pos:line="101" pos:column="19">j<pos:position pos:line="101" pos:column="20"/></name> <operator pos:line="101" pos:column="21">&lt;<pos:position pos:line="101" pos:column="25"/></operator> <name pos:line="101" pos:column="23">identifiers_num<pos:position pos:line="101" pos:column="38"/></name></expr>;<pos:position pos:line="101" pos:column="39"/></condition> <incr><expr><operator pos:line="101" pos:column="40">++<pos:position pos:line="101" pos:column="42"/></operator><name pos:line="101" pos:column="42">j<pos:position pos:line="101" pos:column="43"/></name></expr></incr>)<pos:position pos:line="101" pos:column="44"/></control> <block pos:line="101" pos:column="45">{
        <expr_stmt><expr><name pos:line="102" pos:column="9">status<pos:position pos:line="102" pos:column="15"/></name> <operator pos:line="102" pos:column="16">=<pos:position pos:line="102" pos:column="17"/></operator> <call><name pos:line="102" pos:column="18">lcc_flush<pos:position pos:line="102" pos:column="27"/></name> <argument_list pos:line="102" pos:column="28">(<argument><expr><name pos:line="102" pos:column="29">c<pos:position pos:line="102" pos:column="30"/></name></expr></argument>, <argument><expr><name><name pos:line="102" pos:column="32">plugins<pos:position pos:line="102" pos:column="39"/></name><index pos:line="102" pos:column="39">[<expr><name pos:line="102" pos:column="40">i<pos:position pos:line="102" pos:column="41"/></name></expr>]<pos:position pos:line="102" pos:column="42"/></index></name></expr></argument>, <argument><expr><name pos:line="102" pos:column="44">identifiers<pos:position pos:line="102" pos:column="55"/></name> <operator pos:line="102" pos:column="56">+<pos:position pos:line="102" pos:column="57"/></operator> <name pos:line="102" pos:column="58">j<pos:position pos:line="102" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="102" pos:column="61">timeout<pos:position pos:line="102" pos:column="68"/></name></expr></argument>)<pos:position pos:line="102" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="102" pos:column="70"/></expr_stmt>
        <if pos:line="103" pos:column="9">if <condition pos:line="103" pos:column="12">(<expr><name pos:line="103" pos:column="13">status<pos:position pos:line="103" pos:column="19"/></name> <operator pos:line="103" pos:column="20">!=<pos:position pos:line="103" pos:column="22"/></operator> <literal type="number" pos:line="103" pos:column="23">0<pos:position pos:line="103" pos:column="24"/></literal></expr>)<pos:position pos:line="103" pos:column="25"/></condition><then pos:line="103" pos:column="25"> <block pos:line="103" pos:column="26">{
          <decl_stmt><decl><type><name pos:line="104" pos:column="11">char<pos:position pos:line="104" pos:column="15"/></name></type> <name><name pos:line="104" pos:column="16">id<pos:position pos:line="104" pos:column="18"/></name><index pos:line="104" pos:column="18">[<expr><literal type="number" pos:line="104" pos:column="19">1024<pos:position pos:line="104" pos:column="23"/></literal></expr>]<pos:position pos:line="104" pos:column="24"/></index></name></decl>;<pos:position pos:line="104" pos:column="25"/></decl_stmt>

          <expr_stmt><expr><call><name pos:line="106" pos:column="11">lcc_identifier_to_string<pos:position pos:line="106" pos:column="35"/></name> <argument_list pos:line="106" pos:column="36">(<argument><expr><name pos:line="106" pos:column="37">c<pos:position pos:line="106" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="106" pos:column="40">id<pos:position pos:line="106" pos:column="42"/></name></expr></argument>, <argument><expr><sizeof pos:line="106" pos:column="44">sizeof <argument_list pos:line="106" pos:column="51">(<argument><expr><name pos:line="106" pos:column="52">id<pos:position pos:line="106" pos:column="54"/></name></expr></argument>)<pos:position pos:line="106" pos:column="55"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="106" pos:column="57">identifiers<pos:position pos:line="106" pos:column="68"/></name> <operator pos:line="106" pos:column="69">+<pos:position pos:line="106" pos:column="70"/></operator> <name pos:line="106" pos:column="71">j<pos:position pos:line="106" pos:column="72"/></name></expr></argument>)<pos:position pos:line="106" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="106" pos:column="74"/></expr_stmt>
          <expr_stmt><expr><call><name pos:line="107" pos:column="11">fprintf<pos:position pos:line="107" pos:column="18"/></name> <argument_list pos:line="107" pos:column="19">(<argument><expr><name pos:line="107" pos:column="20">stderr<pos:position pos:line="107" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="107" pos:column="28">"ERROR: Failed to flush plugin `%s', "<pos:position pos:line="107" pos:column="66"/></literal>
              <literal type="string" pos:line="108" pos:column="15">"identifier `%s': %s.\n"<pos:position pos:line="108" pos:column="39"/></literal></expr></argument>,
              <argument><expr><ternary><condition><expr><operator pos:line="109" pos:column="15">(<pos:position pos:line="109" pos:column="16"/></operator><name><name pos:line="109" pos:column="16">plugins<pos:position pos:line="109" pos:column="23"/></name><index pos:line="109" pos:column="23">[<expr><name pos:line="109" pos:column="24">i<pos:position pos:line="109" pos:column="25"/></name></expr>]<pos:position pos:line="109" pos:column="26"/></index></name> <operator pos:line="109" pos:column="27">==<pos:position pos:line="109" pos:column="29"/></operator> <name pos:line="109" pos:column="30">NULL<pos:position pos:line="109" pos:column="34"/></name><operator pos:line="109" pos:column="34">)<pos:position pos:line="109" pos:column="35"/></operator></expr> ?<pos:position pos:line="109" pos:column="37"/></condition><then pos:line="109" pos:column="37"> <expr><literal type="string" pos:line="109" pos:column="38">"(all)"<pos:position pos:line="109" pos:column="45"/></literal></expr> <pos:position pos:line="109" pos:column="46"/></then><else pos:line="109" pos:column="46">: <expr><name><name pos:line="109" pos:column="48">plugins<pos:position pos:line="109" pos:column="55"/></name><index pos:line="109" pos:column="55">[<expr><name pos:line="109" pos:column="56">i<pos:position pos:line="109" pos:column="57"/></name></expr>]<pos:position pos:line="109" pos:column="58"/></index></name></expr></else></ternary></expr></argument>,
              <argument><expr><name pos:line="110" pos:column="15">id<pos:position pos:line="110" pos:column="17"/></name></expr></argument>, <argument><expr><call><name pos:line="110" pos:column="19">lcc_strerror<pos:position pos:line="110" pos:column="31"/></name> <argument_list pos:line="110" pos:column="32">(<argument><expr><name pos:line="110" pos:column="33">c<pos:position pos:line="110" pos:column="34"/></name></expr></argument>)<pos:position pos:line="110" pos:column="35"/></argument_list></call></expr></argument>)<pos:position pos:line="110" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="110" pos:column="37"/></expr_stmt>
        }<pos:position pos:line="111" pos:column="10"/></block></then></if>
      }<pos:position pos:line="112" pos:column="8"/></block></for>
    }<pos:position pos:line="113" pos:column="6"/></block></else></if>
  }<pos:position pos:line="114" pos:column="4"/></block></for>

  <expr_stmt><expr><call><name pos:line="116" pos:column="3">BAIL_OUT<pos:position pos:line="116" pos:column="11"/></name> <argument_list pos:line="116" pos:column="12">(<argument><expr><literal type="number" pos:line="116" pos:column="13">0<pos:position pos:line="116" pos:column="14"/></literal></expr></argument>)<pos:position pos:line="116" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="116" pos:column="16"/></expr_stmt>
<cpp:undef pos:line="117" pos:column="1">#<cpp:directive pos:line="117" pos:column="2">undef<pos:position pos:line="117" pos:column="7"/></cpp:directive> <name pos:line="117" pos:column="8">BAIL_OUT<pos:position pos:line="117" pos:column="16"/></name></cpp:undef>
}<pos:position pos:line="118" pos:column="2"/></block></function></unit>
