<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_2258_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">cpy_config<pos:position pos:line="1" pos:column="22"/></name><parameter_list pos:line="1" pos:column="22">(<parameter><decl><type><name pos:line="1" pos:column="23">oconfig_item_t<pos:position pos:line="1" pos:column="37"/></name> <modifier pos:line="1" pos:column="38">*<pos:position pos:line="1" pos:column="39"/></modifier></type><name pos:line="1" pos:column="39">ci<pos:position pos:line="1" pos:column="41"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="42"/></parameter_list> <block pos:line="1" pos:column="43">{
  <decl_stmt><decl><type><name pos:line="2" pos:column="3">PyObject<pos:position pos:line="2" pos:column="11"/></name> <modifier pos:line="2" pos:column="12">*<pos:position pos:line="2" pos:column="13"/></modifier></type><name pos:line="2" pos:column="13">tb<pos:position pos:line="2" pos:column="15"/></name></decl>;<pos:position pos:line="2" pos:column="16"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">int<pos:position pos:line="3" pos:column="6"/></name></type> <name pos:line="3" pos:column="7">status<pos:position pos:line="3" pos:column="13"/></name> <init pos:line="3" pos:column="14">= <expr><literal type="number" pos:line="3" pos:column="16">0<pos:position pos:line="3" pos:column="17"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="18"/></decl_stmt>

  <comment type="block" pos:line="5" pos:column="3">/* Ok in theory we shouldn't do initialization at this point
   * but we have to. In order to give python scripts a chance
   * to register a config callback we need to be able to execute
   * python code during the config callback so we have to start
   * the interpreter here. */</comment>
  <comment type="block" pos:line="10" pos:column="3">/* Do *not* use the python "thread" module at this point! */</comment>

  <if pos:line="12" pos:column="3">if <condition pos:line="12" pos:column="6">(<expr><operator pos:line="12" pos:column="7">!<pos:position pos:line="12" pos:column="8"/></operator><call><name pos:line="12" pos:column="8">Py_IsInitialized<pos:position pos:line="12" pos:column="24"/></name><argument_list pos:line="12" pos:column="24">()<pos:position pos:line="12" pos:column="26"/></argument_list></call> <operator pos:line="12" pos:column="27">&amp;&amp;<pos:position pos:line="12" pos:column="37"/></operator> <call><name pos:line="12" pos:column="30">cpy_init_python<pos:position pos:line="12" pos:column="45"/></name><argument_list pos:line="12" pos:column="45">()<pos:position pos:line="12" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="12" pos:column="48"/></condition><then pos:line="12" pos:column="48">
    <block type="pseudo"><return pos:line="13" pos:column="5">return <expr><literal type="number" pos:line="13" pos:column="12">1<pos:position pos:line="13" pos:column="13"/></literal></expr>;<pos:position pos:line="13" pos:column="14"/></return></block></then></if>

  <for pos:line="15" pos:column="3">for <control pos:line="15" pos:column="7">(<init><decl><type><name pos:line="15" pos:column="8">int<pos:position pos:line="15" pos:column="11"/></name></type> <name pos:line="15" pos:column="12">i<pos:position pos:line="15" pos:column="13"/></name> <init pos:line="15" pos:column="14">= <expr><literal type="number" pos:line="15" pos:column="16">0<pos:position pos:line="15" pos:column="17"/></literal></expr></init></decl>;<pos:position pos:line="15" pos:column="18"/></init> <condition><expr><name pos:line="15" pos:column="19">i<pos:position pos:line="15" pos:column="20"/></name> <operator pos:line="15" pos:column="21">&lt;<pos:position pos:line="15" pos:column="25"/></operator> <name><name pos:line="15" pos:column="23">ci<pos:position pos:line="15" pos:column="25"/></name><operator pos:line="15" pos:column="25">-&gt;<pos:position pos:line="15" pos:column="30"/></operator><name pos:line="15" pos:column="27">children_num<pos:position pos:line="15" pos:column="39"/></name></name></expr>;<pos:position pos:line="15" pos:column="40"/></condition> <incr><expr><operator pos:line="15" pos:column="41">++<pos:position pos:line="15" pos:column="43"/></operator><name pos:line="15" pos:column="43">i<pos:position pos:line="15" pos:column="44"/></name></expr></incr>)<pos:position pos:line="15" pos:column="45"/></control> <block pos:line="15" pos:column="46">{
    <decl_stmt><decl><type><name pos:line="16" pos:column="5">oconfig_item_t<pos:position pos:line="16" pos:column="19"/></name> <modifier pos:line="16" pos:column="20">*<pos:position pos:line="16" pos:column="21"/></modifier></type><name pos:line="16" pos:column="21">item<pos:position pos:line="16" pos:column="25"/></name> <init pos:line="16" pos:column="26">= <expr><name><name pos:line="16" pos:column="28">ci<pos:position pos:line="16" pos:column="30"/></name><operator pos:line="16" pos:column="30">-&gt;<pos:position pos:line="16" pos:column="35"/></operator><name pos:line="16" pos:column="32">children<pos:position pos:line="16" pos:column="40"/></name></name> <operator pos:line="16" pos:column="41">+<pos:position pos:line="16" pos:column="42"/></operator> <name pos:line="16" pos:column="43">i<pos:position pos:line="16" pos:column="44"/></name></expr></init></decl>;<pos:position pos:line="16" pos:column="45"/></decl_stmt>

    <if pos:line="18" pos:column="5">if <condition pos:line="18" pos:column="8">(<expr><call><name pos:line="18" pos:column="9">strcasecmp<pos:position pos:line="18" pos:column="19"/></name><argument_list pos:line="18" pos:column="19">(<argument><expr><name><name pos:line="18" pos:column="20">item<pos:position pos:line="18" pos:column="24"/></name><operator pos:line="18" pos:column="24">-&gt;<pos:position pos:line="18" pos:column="29"/></operator><name pos:line="18" pos:column="26">key<pos:position pos:line="18" pos:column="29"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="18" pos:column="31">"Interactive"<pos:position pos:line="18" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="45"/></argument_list></call> <operator pos:line="18" pos:column="46">==<pos:position pos:line="18" pos:column="48"/></operator> <literal type="number" pos:line="18" pos:column="49">0<pos:position pos:line="18" pos:column="50"/></literal></expr>)<pos:position pos:line="18" pos:column="51"/></condition><then pos:line="18" pos:column="51"> <block pos:line="18" pos:column="52">{
      <if pos:line="19" pos:column="7">if <condition pos:line="19" pos:column="10">(<expr><call><name pos:line="19" pos:column="11">cf_util_get_boolean<pos:position pos:line="19" pos:column="30"/></name><argument_list pos:line="19" pos:column="30">(<argument><expr><name pos:line="19" pos:column="31">item<pos:position pos:line="19" pos:column="35"/></name></expr></argument>, <argument><expr><operator pos:line="19" pos:column="37">&amp;<pos:position pos:line="19" pos:column="42"/></operator><name pos:line="19" pos:column="38">do_interactive<pos:position pos:line="19" pos:column="52"/></name></expr></argument>)<pos:position pos:line="19" pos:column="53"/></argument_list></call> <operator pos:line="19" pos:column="54">!=<pos:position pos:line="19" pos:column="56"/></operator> <literal type="number" pos:line="19" pos:column="57">0<pos:position pos:line="19" pos:column="58"/></literal></expr>)<pos:position pos:line="19" pos:column="59"/></condition><then pos:line="19" pos:column="59"> <block pos:line="19" pos:column="60">{
        <expr_stmt><expr><name pos:line="20" pos:column="9">status<pos:position pos:line="20" pos:column="15"/></name> <operator pos:line="20" pos:column="16">=<pos:position pos:line="20" pos:column="17"/></operator> <literal type="number" pos:line="20" pos:column="18">1<pos:position pos:line="20" pos:column="19"/></literal></expr>;<pos:position pos:line="20" pos:column="20"/></expr_stmt>
        <continue pos:line="21" pos:column="9">continue;<pos:position pos:line="21" pos:column="18"/></continue>
      }<pos:position pos:line="22" pos:column="8"/></block></then></if>
    }<pos:position pos:line="23" pos:column="6"/></block></then> <elseif pos:line="23" pos:column="7">else <if pos:line="23" pos:column="12">if <condition pos:line="23" pos:column="15">(<expr><call><name pos:line="23" pos:column="16">strcasecmp<pos:position pos:line="23" pos:column="26"/></name><argument_list pos:line="23" pos:column="26">(<argument><expr><name><name pos:line="23" pos:column="27">item<pos:position pos:line="23" pos:column="31"/></name><operator pos:line="23" pos:column="31">-&gt;<pos:position pos:line="23" pos:column="36"/></operator><name pos:line="23" pos:column="33">key<pos:position pos:line="23" pos:column="36"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="23" pos:column="38">"Encoding"<pos:position pos:line="23" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="49"/></argument_list></call> <operator pos:line="23" pos:column="50">==<pos:position pos:line="23" pos:column="52"/></operator> <literal type="number" pos:line="23" pos:column="53">0<pos:position pos:line="23" pos:column="54"/></literal></expr>)<pos:position pos:line="23" pos:column="55"/></condition><then pos:line="23" pos:column="55"> <block pos:line="23" pos:column="56">{
      <decl_stmt><decl><type><name pos:line="24" pos:column="7">char<pos:position pos:line="24" pos:column="11"/></name> <modifier pos:line="24" pos:column="12">*<pos:position pos:line="24" pos:column="13"/></modifier></type><name pos:line="24" pos:column="13">encoding<pos:position pos:line="24" pos:column="21"/></name> <init pos:line="24" pos:column="22">= <expr><name pos:line="24" pos:column="24">NULL<pos:position pos:line="24" pos:column="28"/></name></expr></init></decl>;<pos:position pos:line="24" pos:column="29"/></decl_stmt>
      <if pos:line="25" pos:column="7">if <condition pos:line="25" pos:column="10">(<expr><call><name pos:line="25" pos:column="11">cf_util_get_string<pos:position pos:line="25" pos:column="29"/></name><argument_list pos:line="25" pos:column="29">(<argument><expr><name pos:line="25" pos:column="30">item<pos:position pos:line="25" pos:column="34"/></name></expr></argument>, <argument><expr><operator pos:line="25" pos:column="36">&amp;<pos:position pos:line="25" pos:column="41"/></operator><name pos:line="25" pos:column="37">encoding<pos:position pos:line="25" pos:column="45"/></name></expr></argument>)<pos:position pos:line="25" pos:column="46"/></argument_list></call> <operator pos:line="25" pos:column="47">!=<pos:position pos:line="25" pos:column="49"/></operator> <literal type="number" pos:line="25" pos:column="50">0<pos:position pos:line="25" pos:column="51"/></literal></expr>)<pos:position pos:line="25" pos:column="52"/></condition><then pos:line="25" pos:column="52"> <block pos:line="25" pos:column="53">{
        <expr_stmt><expr><name pos:line="26" pos:column="9">status<pos:position pos:line="26" pos:column="15"/></name> <operator pos:line="26" pos:column="16">=<pos:position pos:line="26" pos:column="17"/></operator> <literal type="number" pos:line="26" pos:column="18">1<pos:position pos:line="26" pos:column="19"/></literal></expr>;<pos:position pos:line="26" pos:column="20"/></expr_stmt>
        <continue pos:line="27" pos:column="9">continue;<pos:position pos:line="27" pos:column="18"/></continue>
      }<pos:position pos:line="28" pos:column="8"/></block></then></if>
<cpp:ifdef pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">ifdef<pos:position pos:line="29" pos:column="7"/></cpp:directive> <name pos:line="29" pos:column="8">IS_PY3K<pos:position pos:line="29" pos:column="15"/></name></cpp:ifdef>
      <expr_stmt><expr><call><name pos:line="30" pos:column="7">ERROR<pos:position pos:line="30" pos:column="12"/></name><argument_list pos:line="30" pos:column="12">(<argument><expr><literal type="string" pos:line="30" pos:column="13">"python: \"Encoding\" was used in the config file but Python3 was "<pos:position pos:line="30" pos:column="80"/></literal>
            <literal type="string" pos:line="31" pos:column="13">"used, which does not support changing encodings"<pos:position pos:line="31" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="31" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="64"/></expr_stmt>
      <expr_stmt><expr><name pos:line="32" pos:column="7">status<pos:position pos:line="32" pos:column="13"/></name> <operator pos:line="32" pos:column="14">=<pos:position pos:line="32" pos:column="15"/></operator> <literal type="number" pos:line="32" pos:column="16">1<pos:position pos:line="32" pos:column="17"/></literal></expr>;<pos:position pos:line="32" pos:column="18"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="33" pos:column="7">sfree<pos:position pos:line="33" pos:column="12"/></name><argument_list pos:line="33" pos:column="12">(<argument><expr><name pos:line="33" pos:column="13">encoding<pos:position pos:line="33" pos:column="21"/></name></expr></argument>)<pos:position pos:line="33" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="23"/></expr_stmt>
      <continue pos:line="34" pos:column="7">continue;<pos:position pos:line="34" pos:column="16"/></continue>
<cpp:else pos:line="35" pos:column="1">#<cpp:directive pos:line="35" pos:column="2">else<pos:position pos:line="35" pos:column="6"/></cpp:directive></cpp:else>
      <comment type="block" pos:line="36" pos:column="7">/* Why is this even necessary? And undocumented? */</comment>
      <if pos:line="37" pos:column="7">if <condition pos:line="37" pos:column="10">(<expr><call><name pos:line="37" pos:column="11">PyUnicode_SetDefaultEncoding<pos:position pos:line="37" pos:column="39"/></name><argument_list pos:line="37" pos:column="39">(<argument><expr><name pos:line="37" pos:column="40">encoding<pos:position pos:line="37" pos:column="48"/></name></expr></argument>)<pos:position pos:line="37" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="37" pos:column="50"/></condition><then pos:line="37" pos:column="50"> <block pos:line="37" pos:column="51">{
        <expr_stmt><expr><call><name pos:line="38" pos:column="9">cpy_log_exception<pos:position pos:line="38" pos:column="26"/></name><argument_list pos:line="38" pos:column="26">(<argument><expr><literal type="string" pos:line="38" pos:column="27">"setting default encoding"<pos:position pos:line="38" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="38" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="55"/></expr_stmt>
        <expr_stmt><expr><name pos:line="39" pos:column="9">status<pos:position pos:line="39" pos:column="15"/></name> <operator pos:line="39" pos:column="16">=<pos:position pos:line="39" pos:column="17"/></operator> <literal type="number" pos:line="39" pos:column="18">1<pos:position pos:line="39" pos:column="19"/></literal></expr>;<pos:position pos:line="39" pos:column="20"/></expr_stmt>
      }<pos:position pos:line="40" pos:column="8"/></block></then></if>
<cpp:endif pos:line="41" pos:column="1">#<cpp:directive pos:line="41" pos:column="2">endif<pos:position pos:line="41" pos:column="7"/></cpp:directive></cpp:endif>
      <expr_stmt><expr><call><name pos:line="42" pos:column="7">sfree<pos:position pos:line="42" pos:column="12"/></name><argument_list pos:line="42" pos:column="12">(<argument><expr><name pos:line="42" pos:column="13">encoding<pos:position pos:line="42" pos:column="21"/></name></expr></argument>)<pos:position pos:line="42" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="23"/></expr_stmt>
    }<pos:position pos:line="43" pos:column="6"/></block></then></if></elseif> <elseif pos:line="43" pos:column="7">else <if pos:line="43" pos:column="12">if <condition pos:line="43" pos:column="15">(<expr><call><name pos:line="43" pos:column="16">strcasecmp<pos:position pos:line="43" pos:column="26"/></name><argument_list pos:line="43" pos:column="26">(<argument><expr><name><name pos:line="43" pos:column="27">item<pos:position pos:line="43" pos:column="31"/></name><operator pos:line="43" pos:column="31">-&gt;<pos:position pos:line="43" pos:column="36"/></operator><name pos:line="43" pos:column="33">key<pos:position pos:line="43" pos:column="36"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="43" pos:column="38">"LogTraces"<pos:position pos:line="43" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="43" pos:column="50"/></argument_list></call> <operator pos:line="43" pos:column="51">==<pos:position pos:line="43" pos:column="53"/></operator> <literal type="number" pos:line="43" pos:column="54">0<pos:position pos:line="43" pos:column="55"/></literal></expr>)<pos:position pos:line="43" pos:column="56"/></condition><then pos:line="43" pos:column="56"> <block pos:line="43" pos:column="57">{
      <decl_stmt><decl><type><name pos:line="44" pos:column="7">_Bool<pos:position pos:line="44" pos:column="12"/></name></type> <name pos:line="44" pos:column="13">log_traces<pos:position pos:line="44" pos:column="23"/></name></decl>;<pos:position pos:line="44" pos:column="24"/></decl_stmt>
      <if pos:line="45" pos:column="7">if <condition pos:line="45" pos:column="10">(<expr><call><name pos:line="45" pos:column="11">cf_util_get_boolean<pos:position pos:line="45" pos:column="30"/></name><argument_list pos:line="45" pos:column="30">(<argument><expr><name pos:line="45" pos:column="31">item<pos:position pos:line="45" pos:column="35"/></name></expr></argument>, <argument><expr><operator pos:line="45" pos:column="37">&amp;<pos:position pos:line="45" pos:column="42"/></operator><name pos:line="45" pos:column="38">log_traces<pos:position pos:line="45" pos:column="48"/></name></expr></argument>)<pos:position pos:line="45" pos:column="49"/></argument_list></call> <operator pos:line="45" pos:column="50">!=<pos:position pos:line="45" pos:column="52"/></operator> <literal type="number" pos:line="45" pos:column="53">0<pos:position pos:line="45" pos:column="54"/></literal></expr>)<pos:position pos:line="45" pos:column="55"/></condition><then pos:line="45" pos:column="55"> <block pos:line="45" pos:column="56">{
        <expr_stmt><expr><name pos:line="46" pos:column="9">status<pos:position pos:line="46" pos:column="15"/></name> <operator pos:line="46" pos:column="16">=<pos:position pos:line="46" pos:column="17"/></operator> <literal type="number" pos:line="46" pos:column="18">1<pos:position pos:line="46" pos:column="19"/></literal></expr>;<pos:position pos:line="46" pos:column="20"/></expr_stmt>
        <continue pos:line="47" pos:column="9">continue;<pos:position pos:line="47" pos:column="18"/></continue>
      }<pos:position pos:line="48" pos:column="8"/></block></then></if>
      <if pos:line="49" pos:column="7">if <condition pos:line="49" pos:column="10">(<expr><operator pos:line="49" pos:column="11">!<pos:position pos:line="49" pos:column="12"/></operator><name pos:line="49" pos:column="12">log_traces<pos:position pos:line="49" pos:column="22"/></name></expr>)<pos:position pos:line="49" pos:column="23"/></condition><then pos:line="49" pos:column="23"> <block pos:line="49" pos:column="24">{
        <expr_stmt><expr><call><name pos:line="50" pos:column="9">Py_XDECREF<pos:position pos:line="50" pos:column="19"/></name><argument_list pos:line="50" pos:column="19">(<argument><expr><name pos:line="50" pos:column="20">cpy_format_exception<pos:position pos:line="50" pos:column="40"/></name></expr></argument>)<pos:position pos:line="50" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="42"/></expr_stmt>
        <expr_stmt><expr><name pos:line="51" pos:column="9">cpy_format_exception<pos:position pos:line="51" pos:column="29"/></name> <operator pos:line="51" pos:column="30">=<pos:position pos:line="51" pos:column="31"/></operator> <name pos:line="51" pos:column="32">NULL<pos:position pos:line="51" pos:column="36"/></name></expr>;<pos:position pos:line="51" pos:column="37"/></expr_stmt>
        <continue pos:line="52" pos:column="9">continue;<pos:position pos:line="52" pos:column="18"/></continue>
      }<pos:position pos:line="53" pos:column="8"/></block></then></if>
      <if pos:line="54" pos:column="7">if <condition pos:line="54" pos:column="10">(<expr><name pos:line="54" pos:column="11">cpy_format_exception<pos:position pos:line="54" pos:column="31"/></name></expr>)<pos:position pos:line="54" pos:column="32"/></condition><then pos:line="54" pos:column="32">
        <block type="pseudo"><continue pos:line="55" pos:column="9">continue;<pos:position pos:line="55" pos:column="18"/></continue></block></then></if>
      <expr_stmt><expr><name pos:line="56" pos:column="7">tb<pos:position pos:line="56" pos:column="9"/></name> <operator pos:line="56" pos:column="10">=<pos:position pos:line="56" pos:column="11"/></operator> <call><name pos:line="56" pos:column="12">PyImport_ImportModule<pos:position pos:line="56" pos:column="33"/></name><argument_list pos:line="56" pos:column="33">(<argument><expr><literal type="string" pos:line="56" pos:column="34">"traceback"<pos:position pos:line="56" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="56" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="47"/></expr_stmt> <comment type="block" pos:line="56" pos:column="48">/* New reference. */</comment>
      <if pos:line="57" pos:column="7">if <condition pos:line="57" pos:column="10">(<expr><name pos:line="57" pos:column="11">tb<pos:position pos:line="57" pos:column="13"/></name> <operator pos:line="57" pos:column="14">==<pos:position pos:line="57" pos:column="16"/></operator> <name pos:line="57" pos:column="17">NULL<pos:position pos:line="57" pos:column="21"/></name></expr>)<pos:position pos:line="57" pos:column="22"/></condition><then pos:line="57" pos:column="22"> <block pos:line="57" pos:column="23">{
        <expr_stmt><expr><call><name pos:line="58" pos:column="9">cpy_log_exception<pos:position pos:line="58" pos:column="26"/></name><argument_list pos:line="58" pos:column="26">(<argument><expr><literal type="string" pos:line="58" pos:column="27">"python initialization"<pos:position pos:line="58" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="58" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="52"/></expr_stmt>
        <expr_stmt><expr><name pos:line="59" pos:column="9">status<pos:position pos:line="59" pos:column="15"/></name> <operator pos:line="59" pos:column="16">=<pos:position pos:line="59" pos:column="17"/></operator> <literal type="number" pos:line="59" pos:column="18">1<pos:position pos:line="59" pos:column="19"/></literal></expr>;<pos:position pos:line="59" pos:column="20"/></expr_stmt>
        <continue pos:line="60" pos:column="9">continue;<pos:position pos:line="60" pos:column="18"/></continue>
      }<pos:position pos:line="61" pos:column="8"/></block></then></if>
      <expr_stmt><expr><name pos:line="62" pos:column="7">cpy_format_exception<pos:position pos:line="62" pos:column="27"/></name> <operator pos:line="62" pos:column="28">=<pos:position pos:line="62" pos:column="29"/></operator>
          <call><name pos:line="63" pos:column="11">PyObject_GetAttrString<pos:position pos:line="63" pos:column="33"/></name><argument_list pos:line="63" pos:column="33">(<argument><expr><name pos:line="63" pos:column="34">tb<pos:position pos:line="63" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="63" pos:column="38">"format_exception"<pos:position pos:line="63" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="63" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="58"/></expr_stmt> <comment type="block" pos:line="63" pos:column="59">/* New reference. */</comment>
      <expr_stmt><expr><call><name pos:line="64" pos:column="7">Py_DECREF<pos:position pos:line="64" pos:column="16"/></name><argument_list pos:line="64" pos:column="16">(<argument><expr><name pos:line="64" pos:column="17">tb<pos:position pos:line="64" pos:column="19"/></name></expr></argument>)<pos:position pos:line="64" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="21"/></expr_stmt>
      <if pos:line="65" pos:column="7">if <condition pos:line="65" pos:column="10">(<expr><name pos:line="65" pos:column="11">cpy_format_exception<pos:position pos:line="65" pos:column="31"/></name> <operator pos:line="65" pos:column="32">==<pos:position pos:line="65" pos:column="34"/></operator> <name pos:line="65" pos:column="35">NULL<pos:position pos:line="65" pos:column="39"/></name></expr>)<pos:position pos:line="65" pos:column="40"/></condition><then pos:line="65" pos:column="40"> <block pos:line="65" pos:column="41">{
        <expr_stmt><expr><call><name pos:line="66" pos:column="9">cpy_log_exception<pos:position pos:line="66" pos:column="26"/></name><argument_list pos:line="66" pos:column="26">(<argument><expr><literal type="string" pos:line="66" pos:column="27">"python initialization"<pos:position pos:line="66" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="66" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="52"/></expr_stmt>
        <expr_stmt><expr><name pos:line="67" pos:column="9">status<pos:position pos:line="67" pos:column="15"/></name> <operator pos:line="67" pos:column="16">=<pos:position pos:line="67" pos:column="17"/></operator> <literal type="number" pos:line="67" pos:column="18">1<pos:position pos:line="67" pos:column="19"/></literal></expr>;<pos:position pos:line="67" pos:column="20"/></expr_stmt>
      }<pos:position pos:line="68" pos:column="8"/></block></then></if>
    }<pos:position pos:line="69" pos:column="6"/></block></then></if></elseif> <elseif pos:line="69" pos:column="7">else <if pos:line="69" pos:column="12">if <condition pos:line="69" pos:column="15">(<expr><call><name pos:line="69" pos:column="16">strcasecmp<pos:position pos:line="69" pos:column="26"/></name><argument_list pos:line="69" pos:column="26">(<argument><expr><name><name pos:line="69" pos:column="27">item<pos:position pos:line="69" pos:column="31"/></name><operator pos:line="69" pos:column="31">-&gt;<pos:position pos:line="69" pos:column="36"/></operator><name pos:line="69" pos:column="33">key<pos:position pos:line="69" pos:column="36"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="69" pos:column="38">"ModulePath"<pos:position pos:line="69" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="69" pos:column="51"/></argument_list></call> <operator pos:line="69" pos:column="52">==<pos:position pos:line="69" pos:column="54"/></operator> <literal type="number" pos:line="69" pos:column="55">0<pos:position pos:line="69" pos:column="56"/></literal></expr>)<pos:position pos:line="69" pos:column="57"/></condition><then pos:line="69" pos:column="57"> <block pos:line="69" pos:column="58">{
      <decl_stmt><decl><type><name pos:line="70" pos:column="7">char<pos:position pos:line="70" pos:column="11"/></name> <modifier pos:line="70" pos:column="12">*<pos:position pos:line="70" pos:column="13"/></modifier></type><name pos:line="70" pos:column="13">dir<pos:position pos:line="70" pos:column="16"/></name> <init pos:line="70" pos:column="17">= <expr><name pos:line="70" pos:column="19">NULL<pos:position pos:line="70" pos:column="23"/></name></expr></init></decl>;<pos:position pos:line="70" pos:column="24"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="71" pos:column="7">PyObject<pos:position pos:line="71" pos:column="15"/></name> <modifier pos:line="71" pos:column="16">*<pos:position pos:line="71" pos:column="17"/></modifier></type><name pos:line="71" pos:column="17">dir_object<pos:position pos:line="71" pos:column="27"/></name></decl>;<pos:position pos:line="71" pos:column="28"/></decl_stmt>

      <if pos:line="73" pos:column="7">if <condition pos:line="73" pos:column="10">(<expr><call><name pos:line="73" pos:column="11">cf_util_get_string<pos:position pos:line="73" pos:column="29"/></name><argument_list pos:line="73" pos:column="29">(<argument><expr><name pos:line="73" pos:column="30">item<pos:position pos:line="73" pos:column="34"/></name></expr></argument>, <argument><expr><operator pos:line="73" pos:column="36">&amp;<pos:position pos:line="73" pos:column="41"/></operator><name pos:line="73" pos:column="37">dir<pos:position pos:line="73" pos:column="40"/></name></expr></argument>)<pos:position pos:line="73" pos:column="41"/></argument_list></call> <operator pos:line="73" pos:column="42">!=<pos:position pos:line="73" pos:column="44"/></operator> <literal type="number" pos:line="73" pos:column="45">0<pos:position pos:line="73" pos:column="46"/></literal></expr>)<pos:position pos:line="73" pos:column="47"/></condition><then pos:line="73" pos:column="47"> <block pos:line="73" pos:column="48">{
        <expr_stmt><expr><name pos:line="74" pos:column="9">status<pos:position pos:line="74" pos:column="15"/></name> <operator pos:line="74" pos:column="16">=<pos:position pos:line="74" pos:column="17"/></operator> <literal type="number" pos:line="74" pos:column="18">1<pos:position pos:line="74" pos:column="19"/></literal></expr>;<pos:position pos:line="74" pos:column="20"/></expr_stmt>
        <continue pos:line="75" pos:column="9">continue;<pos:position pos:line="75" pos:column="18"/></continue>
      }<pos:position pos:line="76" pos:column="8"/></block></then></if>
      <expr_stmt><expr><name pos:line="77" pos:column="7">dir_object<pos:position pos:line="77" pos:column="17"/></name> <operator pos:line="77" pos:column="18">=<pos:position pos:line="77" pos:column="19"/></operator> <call><name pos:line="77" pos:column="20">cpy_string_to_unicode_or_bytes<pos:position pos:line="77" pos:column="50"/></name><argument_list pos:line="77" pos:column="50">(<argument><expr><name pos:line="77" pos:column="51">dir<pos:position pos:line="77" pos:column="54"/></name></expr></argument>)<pos:position pos:line="77" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="56"/></expr_stmt> <comment type="block" pos:line="77" pos:column="57">/* New reference. */</comment>
      <if pos:line="78" pos:column="7">if <condition pos:line="78" pos:column="10">(<expr><name pos:line="78" pos:column="11">dir_object<pos:position pos:line="78" pos:column="21"/></name> <operator pos:line="78" pos:column="22">==<pos:position pos:line="78" pos:column="24"/></operator> <name pos:line="78" pos:column="25">NULL<pos:position pos:line="78" pos:column="29"/></name></expr>)<pos:position pos:line="78" pos:column="30"/></condition><then pos:line="78" pos:column="30"> <block pos:line="78" pos:column="31">{
        <expr_stmt><expr><call><name pos:line="79" pos:column="9">ERROR<pos:position pos:line="79" pos:column="14"/></name><argument_list pos:line="79" pos:column="14">(<argument><expr><literal type="string" pos:line="79" pos:column="15">"python plugin: Unable to convert \"%s\" to "<pos:position pos:line="79" pos:column="60"/></literal>
              <literal type="string" pos:line="80" pos:column="15">"a python object."<pos:position pos:line="80" pos:column="33"/></literal></expr></argument>,
              <argument><expr><name pos:line="81" pos:column="15">dir<pos:position pos:line="81" pos:column="18"/></name></expr></argument>)<pos:position pos:line="81" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="20"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="82" pos:column="9">free<pos:position pos:line="82" pos:column="13"/></name><argument_list pos:line="82" pos:column="13">(<argument><expr><name pos:line="82" pos:column="14">dir<pos:position pos:line="82" pos:column="17"/></name></expr></argument>)<pos:position pos:line="82" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="19"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="83" pos:column="9">cpy_log_exception<pos:position pos:line="83" pos:column="26"/></name><argument_list pos:line="83" pos:column="26">(<argument><expr><literal type="string" pos:line="83" pos:column="27">"python initialization"<pos:position pos:line="83" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="83" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="52"/></expr_stmt>
        <expr_stmt><expr><name pos:line="84" pos:column="9">status<pos:position pos:line="84" pos:column="15"/></name> <operator pos:line="84" pos:column="16">=<pos:position pos:line="84" pos:column="17"/></operator> <literal type="number" pos:line="84" pos:column="18">1<pos:position pos:line="84" pos:column="19"/></literal></expr>;<pos:position pos:line="84" pos:column="20"/></expr_stmt>
        <continue pos:line="85" pos:column="9">continue;<pos:position pos:line="85" pos:column="18"/></continue>
      }<pos:position pos:line="86" pos:column="8"/></block></then></if>
      <if pos:line="87" pos:column="7">if <condition pos:line="87" pos:column="10">(<expr><call><name pos:line="87" pos:column="11">PyList_Insert<pos:position pos:line="87" pos:column="24"/></name><argument_list pos:line="87" pos:column="24">(<argument><expr><name pos:line="87" pos:column="25">sys_path<pos:position pos:line="87" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="87" pos:column="35">0<pos:position pos:line="87" pos:column="36"/></literal></expr></argument>, <argument><expr><name pos:line="87" pos:column="38">dir_object<pos:position pos:line="87" pos:column="48"/></name></expr></argument>)<pos:position pos:line="87" pos:column="49"/></argument_list></call> <operator pos:line="87" pos:column="50">!=<pos:position pos:line="87" pos:column="52"/></operator> <literal type="number" pos:line="87" pos:column="53">0<pos:position pos:line="87" pos:column="54"/></literal></expr>)<pos:position pos:line="87" pos:column="55"/></condition><then pos:line="87" pos:column="55"> <block pos:line="87" pos:column="56">{
        <expr_stmt><expr><call><name pos:line="88" pos:column="9">ERROR<pos:position pos:line="88" pos:column="14"/></name><argument_list pos:line="88" pos:column="14">(<argument><expr><literal type="string" pos:line="88" pos:column="15">"python plugin: Unable to prepend \"%s\" to "<pos:position pos:line="88" pos:column="60"/></literal>
              <literal type="string" pos:line="89" pos:column="15">"python module path."<pos:position pos:line="89" pos:column="36"/></literal></expr></argument>,
              <argument><expr><name pos:line="90" pos:column="15">dir<pos:position pos:line="90" pos:column="18"/></name></expr></argument>)<pos:position pos:line="90" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="90" pos:column="20"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="91" pos:column="9">cpy_log_exception<pos:position pos:line="91" pos:column="26"/></name><argument_list pos:line="91" pos:column="26">(<argument><expr><literal type="string" pos:line="91" pos:column="27">"python initialization"<pos:position pos:line="91" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="91" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="91" pos:column="52"/></expr_stmt>
        <expr_stmt><expr><name pos:line="92" pos:column="9">status<pos:position pos:line="92" pos:column="15"/></name> <operator pos:line="92" pos:column="16">=<pos:position pos:line="92" pos:column="17"/></operator> <literal type="number" pos:line="92" pos:column="18">1<pos:position pos:line="92" pos:column="19"/></literal></expr>;<pos:position pos:line="92" pos:column="20"/></expr_stmt>
      }<pos:position pos:line="93" pos:column="8"/></block></then></if>
      <expr_stmt><expr><call><name pos:line="94" pos:column="7">Py_DECREF<pos:position pos:line="94" pos:column="16"/></name><argument_list pos:line="94" pos:column="16">(<argument><expr><name pos:line="94" pos:column="17">dir_object<pos:position pos:line="94" pos:column="27"/></name></expr></argument>)<pos:position pos:line="94" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="94" pos:column="29"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="95" pos:column="7">free<pos:position pos:line="95" pos:column="11"/></name><argument_list pos:line="95" pos:column="11">(<argument><expr><name pos:line="95" pos:column="12">dir<pos:position pos:line="95" pos:column="15"/></name></expr></argument>)<pos:position pos:line="95" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="95" pos:column="17"/></expr_stmt>
    }<pos:position pos:line="96" pos:column="6"/></block></then></if></elseif> <elseif pos:line="96" pos:column="7">else <if pos:line="96" pos:column="12">if <condition pos:line="96" pos:column="15">(<expr><call><name pos:line="96" pos:column="16">strcasecmp<pos:position pos:line="96" pos:column="26"/></name><argument_list pos:line="96" pos:column="26">(<argument><expr><name><name pos:line="96" pos:column="27">item<pos:position pos:line="96" pos:column="31"/></name><operator pos:line="96" pos:column="31">-&gt;<pos:position pos:line="96" pos:column="36"/></operator><name pos:line="96" pos:column="33">key<pos:position pos:line="96" pos:column="36"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="96" pos:column="38">"Import"<pos:position pos:line="96" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="96" pos:column="47"/></argument_list></call> <operator pos:line="96" pos:column="48">==<pos:position pos:line="96" pos:column="50"/></operator> <literal type="number" pos:line="96" pos:column="51">0<pos:position pos:line="96" pos:column="52"/></literal></expr>)<pos:position pos:line="96" pos:column="53"/></condition><then pos:line="96" pos:column="53"> <block pos:line="96" pos:column="54">{
      <decl_stmt><decl><type><name pos:line="97" pos:column="7">char<pos:position pos:line="97" pos:column="11"/></name> <modifier pos:line="97" pos:column="12">*<pos:position pos:line="97" pos:column="13"/></modifier></type><name pos:line="97" pos:column="13">module_name<pos:position pos:line="97" pos:column="24"/></name> <init pos:line="97" pos:column="25">= <expr><name pos:line="97" pos:column="27">NULL<pos:position pos:line="97" pos:column="31"/></name></expr></init></decl>;<pos:position pos:line="97" pos:column="32"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="98" pos:column="7">PyObject<pos:position pos:line="98" pos:column="15"/></name> <modifier pos:line="98" pos:column="16">*<pos:position pos:line="98" pos:column="17"/></modifier></type><name pos:line="98" pos:column="17">module<pos:position pos:line="98" pos:column="23"/></name></decl>;<pos:position pos:line="98" pos:column="24"/></decl_stmt>

      <if pos:line="100" pos:column="7">if <condition pos:line="100" pos:column="10">(<expr><call><name pos:line="100" pos:column="11">cf_util_get_string<pos:position pos:line="100" pos:column="29"/></name><argument_list pos:line="100" pos:column="29">(<argument><expr><name pos:line="100" pos:column="30">item<pos:position pos:line="100" pos:column="34"/></name></expr></argument>, <argument><expr><operator pos:line="100" pos:column="36">&amp;<pos:position pos:line="100" pos:column="41"/></operator><name pos:line="100" pos:column="37">module_name<pos:position pos:line="100" pos:column="48"/></name></expr></argument>)<pos:position pos:line="100" pos:column="49"/></argument_list></call> <operator pos:line="100" pos:column="50">!=<pos:position pos:line="100" pos:column="52"/></operator> <literal type="number" pos:line="100" pos:column="53">0<pos:position pos:line="100" pos:column="54"/></literal></expr>)<pos:position pos:line="100" pos:column="55"/></condition><then pos:line="100" pos:column="55"> <block pos:line="100" pos:column="56">{
        <expr_stmt><expr><name pos:line="101" pos:column="9">status<pos:position pos:line="101" pos:column="15"/></name> <operator pos:line="101" pos:column="16">=<pos:position pos:line="101" pos:column="17"/></operator> <literal type="number" pos:line="101" pos:column="18">1<pos:position pos:line="101" pos:column="19"/></literal></expr>;<pos:position pos:line="101" pos:column="20"/></expr_stmt>
        <continue pos:line="102" pos:column="9">continue;<pos:position pos:line="102" pos:column="18"/></continue>
      }<pos:position pos:line="103" pos:column="8"/></block></then></if>
      <expr_stmt><expr><name pos:line="104" pos:column="7">module<pos:position pos:line="104" pos:column="13"/></name> <operator pos:line="104" pos:column="14">=<pos:position pos:line="104" pos:column="15"/></operator> <call><name pos:line="104" pos:column="16">PyImport_ImportModule<pos:position pos:line="104" pos:column="37"/></name><argument_list pos:line="104" pos:column="37">(<argument><expr><name pos:line="104" pos:column="38">module_name<pos:position pos:line="104" pos:column="49"/></name></expr></argument>)<pos:position pos:line="104" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="104" pos:column="51"/></expr_stmt> <comment type="block" pos:line="104" pos:column="52">/* New reference. */</comment>
      <if pos:line="105" pos:column="7">if <condition pos:line="105" pos:column="10">(<expr><name pos:line="105" pos:column="11">module<pos:position pos:line="105" pos:column="17"/></name> <operator pos:line="105" pos:column="18">==<pos:position pos:line="105" pos:column="20"/></operator> <name pos:line="105" pos:column="21">NULL<pos:position pos:line="105" pos:column="25"/></name></expr>)<pos:position pos:line="105" pos:column="26"/></condition><then pos:line="105" pos:column="26"> <block pos:line="105" pos:column="27">{
        <expr_stmt><expr><call><name pos:line="106" pos:column="9">ERROR<pos:position pos:line="106" pos:column="14"/></name><argument_list pos:line="106" pos:column="14">(<argument><expr><literal type="string" pos:line="106" pos:column="15">"python plugin: Error importing module \"%s\"."<pos:position pos:line="106" pos:column="62"/></literal></expr></argument>, <argument><expr><name pos:line="106" pos:column="64">module_name<pos:position pos:line="106" pos:column="75"/></name></expr></argument>)<pos:position pos:line="106" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="106" pos:column="77"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="107" pos:column="9">cpy_log_exception<pos:position pos:line="107" pos:column="26"/></name><argument_list pos:line="107" pos:column="26">(<argument><expr><literal type="string" pos:line="107" pos:column="27">"importing module"<pos:position pos:line="107" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="107" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="107" pos:column="47"/></expr_stmt>
        <expr_stmt><expr><name pos:line="108" pos:column="9">status<pos:position pos:line="108" pos:column="15"/></name> <operator pos:line="108" pos:column="16">=<pos:position pos:line="108" pos:column="17"/></operator> <literal type="number" pos:line="108" pos:column="18">1<pos:position pos:line="108" pos:column="19"/></literal></expr>;<pos:position pos:line="108" pos:column="20"/></expr_stmt>
      }<pos:position pos:line="109" pos:column="8"/></block></then></if>
      <expr_stmt><expr><call><name pos:line="110" pos:column="7">free<pos:position pos:line="110" pos:column="11"/></name><argument_list pos:line="110" pos:column="11">(<argument><expr><name pos:line="110" pos:column="12">module_name<pos:position pos:line="110" pos:column="23"/></name></expr></argument>)<pos:position pos:line="110" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="110" pos:column="25"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="111" pos:column="7">Py_XDECREF<pos:position pos:line="111" pos:column="17"/></name><argument_list pos:line="111" pos:column="17">(<argument><expr><name pos:line="111" pos:column="18">module<pos:position pos:line="111" pos:column="24"/></name></expr></argument>)<pos:position pos:line="111" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="111" pos:column="26"/></expr_stmt>
    }<pos:position pos:line="112" pos:column="6"/></block></then></if></elseif> <elseif pos:line="112" pos:column="7">else <if pos:line="112" pos:column="12">if <condition pos:line="112" pos:column="15">(<expr><call><name pos:line="112" pos:column="16">strcasecmp<pos:position pos:line="112" pos:column="26"/></name><argument_list pos:line="112" pos:column="26">(<argument><expr><name><name pos:line="112" pos:column="27">item<pos:position pos:line="112" pos:column="31"/></name><operator pos:line="112" pos:column="31">-&gt;<pos:position pos:line="112" pos:column="36"/></operator><name pos:line="112" pos:column="33">key<pos:position pos:line="112" pos:column="36"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="112" pos:column="38">"Module"<pos:position pos:line="112" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="112" pos:column="47"/></argument_list></call> <operator pos:line="112" pos:column="48">==<pos:position pos:line="112" pos:column="50"/></operator> <literal type="number" pos:line="112" pos:column="51">0<pos:position pos:line="112" pos:column="52"/></literal></expr>)<pos:position pos:line="112" pos:column="53"/></condition><then pos:line="112" pos:column="53"> <block pos:line="112" pos:column="54">{
      <decl_stmt><decl><type><name pos:line="113" pos:column="7">char<pos:position pos:line="113" pos:column="11"/></name> <modifier pos:line="113" pos:column="12">*<pos:position pos:line="113" pos:column="13"/></modifier></type><name pos:line="113" pos:column="13">name<pos:position pos:line="113" pos:column="17"/></name> <init pos:line="113" pos:column="18">= <expr><name pos:line="113" pos:column="20">NULL<pos:position pos:line="113" pos:column="24"/></name></expr></init></decl>;<pos:position pos:line="113" pos:column="25"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="114" pos:column="7">cpy_callback_t<pos:position pos:line="114" pos:column="21"/></name> <modifier pos:line="114" pos:column="22">*<pos:position pos:line="114" pos:column="23"/></modifier></type><name pos:line="114" pos:column="23">c<pos:position pos:line="114" pos:column="24"/></name></decl>;<pos:position pos:line="114" pos:column="25"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="115" pos:column="7">PyObject<pos:position pos:line="115" pos:column="15"/></name> <modifier pos:line="115" pos:column="16">*<pos:position pos:line="115" pos:column="17"/></modifier></type><name pos:line="115" pos:column="17">ret<pos:position pos:line="115" pos:column="20"/></name></decl>;<pos:position pos:line="115" pos:column="21"/></decl_stmt>

      <if pos:line="117" pos:column="7">if <condition pos:line="117" pos:column="10">(<expr><call><name pos:line="117" pos:column="11">cf_util_get_string<pos:position pos:line="117" pos:column="29"/></name><argument_list pos:line="117" pos:column="29">(<argument><expr><name pos:line="117" pos:column="30">item<pos:position pos:line="117" pos:column="34"/></name></expr></argument>, <argument><expr><operator pos:line="117" pos:column="36">&amp;<pos:position pos:line="117" pos:column="41"/></operator><name pos:line="117" pos:column="37">name<pos:position pos:line="117" pos:column="41"/></name></expr></argument>)<pos:position pos:line="117" pos:column="42"/></argument_list></call> <operator pos:line="117" pos:column="43">!=<pos:position pos:line="117" pos:column="45"/></operator> <literal type="number" pos:line="117" pos:column="46">0<pos:position pos:line="117" pos:column="47"/></literal></expr>)<pos:position pos:line="117" pos:column="48"/></condition><then pos:line="117" pos:column="48"> <block pos:line="117" pos:column="49">{
        <expr_stmt><expr><name pos:line="118" pos:column="9">status<pos:position pos:line="118" pos:column="15"/></name> <operator pos:line="118" pos:column="16">=<pos:position pos:line="118" pos:column="17"/></operator> <literal type="number" pos:line="118" pos:column="18">1<pos:position pos:line="118" pos:column="19"/></literal></expr>;<pos:position pos:line="118" pos:column="20"/></expr_stmt>
        <continue pos:line="119" pos:column="9">continue;<pos:position pos:line="119" pos:column="18"/></continue>
      }<pos:position pos:line="120" pos:column="8"/></block></then></if>
      <for pos:line="121" pos:column="7">for <control pos:line="121" pos:column="11">(<init><expr><name pos:line="121" pos:column="12">c<pos:position pos:line="121" pos:column="13"/></name> <operator pos:line="121" pos:column="14">=<pos:position pos:line="121" pos:column="15"/></operator> <name pos:line="121" pos:column="16">cpy_config_callbacks<pos:position pos:line="121" pos:column="36"/></name></expr>;<pos:position pos:line="121" pos:column="37"/></init> <condition><expr><name pos:line="121" pos:column="38">c<pos:position pos:line="121" pos:column="39"/></name></expr>;<pos:position pos:line="121" pos:column="40"/></condition> <incr><expr><name pos:line="121" pos:column="41">c<pos:position pos:line="121" pos:column="42"/></name> <operator pos:line="121" pos:column="43">=<pos:position pos:line="121" pos:column="44"/></operator> <name><name pos:line="121" pos:column="45">c<pos:position pos:line="121" pos:column="46"/></name><operator pos:line="121" pos:column="46">-&gt;<pos:position pos:line="121" pos:column="51"/></operator><name pos:line="121" pos:column="48">next<pos:position pos:line="121" pos:column="52"/></name></name></expr></incr>)<pos:position pos:line="121" pos:column="53"/></control> <block pos:line="121" pos:column="54">{
        <if pos:line="122" pos:column="9">if <condition pos:line="122" pos:column="12">(<expr><call><name pos:line="122" pos:column="13">strcasecmp<pos:position pos:line="122" pos:column="23"/></name><argument_list pos:line="122" pos:column="23">(<argument><expr><name><name pos:line="122" pos:column="24">c<pos:position pos:line="122" pos:column="25"/></name><operator pos:line="122" pos:column="25">-&gt;<pos:position pos:line="122" pos:column="30"/></operator><name pos:line="122" pos:column="27">name<pos:position pos:line="122" pos:column="31"/></name></name> <operator pos:line="122" pos:column="32">+<pos:position pos:line="122" pos:column="33"/></operator> <literal type="number" pos:line="122" pos:column="34">7<pos:position pos:line="122" pos:column="35"/></literal></expr></argument>, <argument><expr><name pos:line="122" pos:column="37">name<pos:position pos:line="122" pos:column="41"/></name></expr></argument>)<pos:position pos:line="122" pos:column="42"/></argument_list></call> <operator pos:line="122" pos:column="43">==<pos:position pos:line="122" pos:column="45"/></operator> <literal type="number" pos:line="122" pos:column="46">0<pos:position pos:line="122" pos:column="47"/></literal></expr>)<pos:position pos:line="122" pos:column="48"/></condition><then pos:line="122" pos:column="48">
          <block type="pseudo"><break pos:line="123" pos:column="11">break;<pos:position pos:line="123" pos:column="17"/></break></block></then></if>
      }<pos:position pos:line="124" pos:column="8"/></block></for>
      <if pos:line="125" pos:column="7">if <condition pos:line="125" pos:column="10">(<expr><name pos:line="125" pos:column="11">c<pos:position pos:line="125" pos:column="12"/></name> <operator pos:line="125" pos:column="13">==<pos:position pos:line="125" pos:column="15"/></operator> <name pos:line="125" pos:column="16">NULL<pos:position pos:line="125" pos:column="20"/></name></expr>)<pos:position pos:line="125" pos:column="21"/></condition><then pos:line="125" pos:column="21"> <block pos:line="125" pos:column="22">{
        <expr_stmt><expr><call><name pos:line="126" pos:column="9">WARNING<pos:position pos:line="126" pos:column="16"/></name><argument_list pos:line="126" pos:column="16">(<argument><expr><literal type="string" pos:line="126" pos:column="17">"python plugin: Found a configuration for the \"%s\" plugin, "<pos:position pos:line="126" pos:column="79"/></literal>
                <literal type="string" pos:line="127" pos:column="17">"but the plugin isn't loaded or didn't register "<pos:position pos:line="127" pos:column="66"/></literal>
                <literal type="string" pos:line="128" pos:column="17">"a configuration callback."<pos:position pos:line="128" pos:column="44"/></literal></expr></argument>,
                <argument><expr><name pos:line="129" pos:column="17">name<pos:position pos:line="129" pos:column="21"/></name></expr></argument>)<pos:position pos:line="129" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="129" pos:column="23"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="130" pos:column="9">free<pos:position pos:line="130" pos:column="13"/></name><argument_list pos:line="130" pos:column="13">(<argument><expr><name pos:line="130" pos:column="14">name<pos:position pos:line="130" pos:column="18"/></name></expr></argument>)<pos:position pos:line="130" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="130" pos:column="20"/></expr_stmt>
        <continue pos:line="131" pos:column="9">continue;<pos:position pos:line="131" pos:column="18"/></continue>
      }<pos:position pos:line="132" pos:column="8"/></block></then></if>
      <expr_stmt><expr><call><name pos:line="133" pos:column="7">free<pos:position pos:line="133" pos:column="11"/></name><argument_list pos:line="133" pos:column="11">(<argument><expr><name pos:line="133" pos:column="12">name<pos:position pos:line="133" pos:column="16"/></name></expr></argument>)<pos:position pos:line="133" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="133" pos:column="18"/></expr_stmt>
      <if pos:line="134" pos:column="7">if <condition pos:line="134" pos:column="10">(<expr><name><name pos:line="134" pos:column="11">c<pos:position pos:line="134" pos:column="12"/></name><operator pos:line="134" pos:column="12">-&gt;<pos:position pos:line="134" pos:column="17"/></operator><name pos:line="134" pos:column="14">data<pos:position pos:line="134" pos:column="18"/></name></name> <operator pos:line="134" pos:column="19">==<pos:position pos:line="134" pos:column="21"/></operator> <name pos:line="134" pos:column="22">NULL<pos:position pos:line="134" pos:column="26"/></name></expr>)<pos:position pos:line="134" pos:column="27"/></condition><then pos:line="134" pos:column="27">
        <block type="pseudo"><expr_stmt><expr><name pos:line="135" pos:column="9">ret<pos:position pos:line="135" pos:column="12"/></name> <operator pos:line="135" pos:column="13">=<pos:position pos:line="135" pos:column="14"/></operator> <call><name pos:line="135" pos:column="15">PyObject_CallFunction<pos:position pos:line="135" pos:column="36"/></name><argument_list pos:line="135" pos:column="36">(
            <argument><expr><name><name pos:line="136" pos:column="13">c<pos:position pos:line="136" pos:column="14"/></name><operator pos:line="136" pos:column="14">-&gt;<pos:position pos:line="136" pos:column="19"/></operator><name pos:line="136" pos:column="16">callback<pos:position pos:line="136" pos:column="24"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="136" pos:column="26">"N"<pos:position pos:line="136" pos:column="29"/></literal></expr></argument>,
            <argument><expr><call><name pos:line="137" pos:column="13">cpy_oconfig_to_pyconfig<pos:position pos:line="137" pos:column="36"/></name><argument_list pos:line="137" pos:column="36">(<argument><expr><name pos:line="137" pos:column="37">item<pos:position pos:line="137" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="137" pos:column="43">NULL<pos:position pos:line="137" pos:column="47"/></name></expr></argument>)<pos:position pos:line="137" pos:column="48"/></argument_list></call></expr></argument>)<pos:position pos:line="137" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="137" pos:column="50"/></expr_stmt></block></then> <comment type="block" pos:line="137" pos:column="51">/* New reference. */</comment>
      <else pos:line="138" pos:column="7">else
        <block type="pseudo"><expr_stmt><expr><name pos:line="139" pos:column="9">ret<pos:position pos:line="139" pos:column="12"/></name> <operator pos:line="139" pos:column="13">=<pos:position pos:line="139" pos:column="14"/></operator> <call><name pos:line="139" pos:column="15">PyObject_CallFunction<pos:position pos:line="139" pos:column="36"/></name><argument_list pos:line="139" pos:column="36">(<argument><expr><name><name pos:line="139" pos:column="37">c<pos:position pos:line="139" pos:column="38"/></name><operator pos:line="139" pos:column="38">-&gt;<pos:position pos:line="139" pos:column="43"/></operator><name pos:line="139" pos:column="40">callback<pos:position pos:line="139" pos:column="48"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="139" pos:column="50">"NO"<pos:position pos:line="139" pos:column="54"/></literal></expr></argument>,
                                    <argument><expr><call><name pos:line="140" pos:column="37">cpy_oconfig_to_pyconfig<pos:position pos:line="140" pos:column="60"/></name><argument_list pos:line="140" pos:column="60">(<argument><expr><name pos:line="140" pos:column="61">item<pos:position pos:line="140" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="140" pos:column="67">NULL<pos:position pos:line="140" pos:column="71"/></name></expr></argument>)<pos:position pos:line="140" pos:column="72"/></argument_list></call></expr></argument>,
                                    <argument><expr><name><name pos:line="141" pos:column="37">c<pos:position pos:line="141" pos:column="38"/></name><operator pos:line="141" pos:column="38">-&gt;<pos:position pos:line="141" pos:column="43"/></operator><name pos:line="141" pos:column="40">data<pos:position pos:line="141" pos:column="44"/></name></name></expr></argument>)<pos:position pos:line="141" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="141" pos:column="46"/></expr_stmt></block></else></if> <comment type="block" pos:line="141" pos:column="47">/* New reference. */</comment>
      <if pos:line="142" pos:column="7">if <condition pos:line="142" pos:column="10">(<expr><name pos:line="142" pos:column="11">ret<pos:position pos:line="142" pos:column="14"/></name> <operator pos:line="142" pos:column="15">==<pos:position pos:line="142" pos:column="17"/></operator> <name pos:line="142" pos:column="18">NULL<pos:position pos:line="142" pos:column="22"/></name></expr>)<pos:position pos:line="142" pos:column="23"/></condition><then pos:line="142" pos:column="23"> <block pos:line="142" pos:column="24">{
        <expr_stmt><expr><call><name pos:line="143" pos:column="9">cpy_log_exception<pos:position pos:line="143" pos:column="26"/></name><argument_list pos:line="143" pos:column="26">(<argument><expr><literal type="string" pos:line="143" pos:column="27">"loading module"<pos:position pos:line="143" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="143" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="143" pos:column="45"/></expr_stmt>
        <expr_stmt><expr><name pos:line="144" pos:column="9">status<pos:position pos:line="144" pos:column="15"/></name> <operator pos:line="144" pos:column="16">=<pos:position pos:line="144" pos:column="17"/></operator> <literal type="number" pos:line="144" pos:column="18">1<pos:position pos:line="144" pos:column="19"/></literal></expr>;<pos:position pos:line="144" pos:column="20"/></expr_stmt>
      }<pos:position pos:line="145" pos:column="8"/></block></then> <else pos:line="145" pos:column="9">else
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="146" pos:column="9">Py_DECREF<pos:position pos:line="146" pos:column="18"/></name><argument_list pos:line="146" pos:column="18">(<argument><expr><name pos:line="146" pos:column="19">ret<pos:position pos:line="146" pos:column="22"/></name></expr></argument>)<pos:position pos:line="146" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="146" pos:column="24"/></expr_stmt></block></else></if>
    }<pos:position pos:line="147" pos:column="6"/></block></then></if></elseif> <else pos:line="147" pos:column="7">else <block pos:line="147" pos:column="12">{
      <expr_stmt><expr><call><name pos:line="148" pos:column="7">ERROR<pos:position pos:line="148" pos:column="12"/></name><argument_list pos:line="148" pos:column="12">(<argument><expr><literal type="string" pos:line="148" pos:column="13">"python plugin: Unknown config key \"%s\"."<pos:position pos:line="148" pos:column="56"/></literal></expr></argument>, <argument><expr><name><name pos:line="148" pos:column="58">item<pos:position pos:line="148" pos:column="62"/></name><operator pos:line="148" pos:column="62">-&gt;<pos:position pos:line="148" pos:column="67"/></operator><name pos:line="148" pos:column="64">key<pos:position pos:line="148" pos:column="67"/></name></name></expr></argument>)<pos:position pos:line="148" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="148" pos:column="69"/></expr_stmt>
      <expr_stmt><expr><name pos:line="149" pos:column="7">status<pos:position pos:line="149" pos:column="13"/></name> <operator pos:line="149" pos:column="14">=<pos:position pos:line="149" pos:column="15"/></operator> <literal type="number" pos:line="149" pos:column="16">1<pos:position pos:line="149" pos:column="17"/></literal></expr>;<pos:position pos:line="149" pos:column="18"/></expr_stmt>
    }<pos:position pos:line="150" pos:column="6"/></block></else></if>
  }<pos:position pos:line="151" pos:column="4"/></block></for>
  <return pos:line="152" pos:column="3">return <expr><name pos:line="152" pos:column="10">status<pos:position pos:line="152" pos:column="16"/></name></expr>;<pos:position pos:line="152" pos:column="17"/></return>
}<pos:position pos:line="153" pos:column="2"/></block></function></unit>
