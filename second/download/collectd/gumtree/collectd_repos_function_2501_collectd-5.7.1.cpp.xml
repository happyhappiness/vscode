<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_2501_collectd-5.7.1.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">char<pos:position pos:line="1" pos:column="5"/></name> <modifier pos:line="1" pos:column="6">*<pos:position pos:line="1" pos:column="7"/></modifier></type><name pos:line="1" pos:column="7">ssnprintf_alloc<pos:position pos:line="1" pos:column="22"/></name><parameter_list pos:line="1" pos:column="22">(<parameter><decl><type><name pos:line="1" pos:column="23">char<pos:position pos:line="1" pos:column="27"/></name> <specifier pos:line="1" pos:column="28">const<pos:position pos:line="1" pos:column="33"/></specifier> <modifier pos:line="1" pos:column="34">*<pos:position pos:line="1" pos:column="35"/></modifier></type><name pos:line="1" pos:column="35">format<pos:position pos:line="1" pos:column="41"/></name></decl></parameter>, <parameter><decl><type><modifier pos:line="1" pos:column="43">...<pos:position pos:line="1" pos:column="46"/></modifier></type></decl></parameter>)<pos:position pos:line="1" pos:column="47"/></parameter_list> <comment type="block" pos:line="1" pos:column="48">/* {{{ */</comment>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">char<pos:position pos:line="3" pos:column="7"/></name></type> <name><name pos:line="3" pos:column="8">static_buffer<pos:position pos:line="3" pos:column="21"/></name><index pos:line="3" pos:column="21">[<expr><literal type="number" pos:line="3" pos:column="22">1024<pos:position pos:line="3" pos:column="26"/></literal></expr>]<pos:position pos:line="3" pos:column="27"/></index></name> <init pos:line="3" pos:column="28">= <expr><literal type="string" pos:line="3" pos:column="30">""<pos:position pos:line="3" pos:column="32"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="33"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">char<pos:position pos:line="4" pos:column="7"/></name> <modifier pos:line="4" pos:column="8">*<pos:position pos:line="4" pos:column="9"/></modifier></type><name pos:line="4" pos:column="9">alloc_buffer<pos:position pos:line="4" pos:column="21"/></name></decl>;<pos:position pos:line="4" pos:column="22"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">size_t<pos:position pos:line="5" pos:column="9"/></name></type> <name pos:line="5" pos:column="10">alloc_buffer_size<pos:position pos:line="5" pos:column="27"/></name></decl>;<pos:position pos:line="5" pos:column="28"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">int<pos:position pos:line="6" pos:column="6"/></name></type> <name pos:line="6" pos:column="7">status<pos:position pos:line="6" pos:column="13"/></name></decl>;<pos:position pos:line="6" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">va_list<pos:position pos:line="7" pos:column="10"/></name></type> <name pos:line="7" pos:column="11">ap<pos:position pos:line="7" pos:column="13"/></name></decl>;<pos:position pos:line="7" pos:column="14"/></decl_stmt>

  <comment type="block" pos:line="9" pos:column="3">/* Try printing into the static buffer. In many cases it will be
   * sufficiently large and we can simply return a strdup() of this
   * buffer. */</comment>
  <expr_stmt><expr><call><name pos:line="12" pos:column="3">va_start<pos:position pos:line="12" pos:column="11"/></name><argument_list pos:line="12" pos:column="11">(<argument><expr><name pos:line="12" pos:column="12">ap<pos:position pos:line="12" pos:column="14"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="16">format<pos:position pos:line="12" pos:column="22"/></name></expr></argument>)<pos:position pos:line="12" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="24"/></expr_stmt>
  <expr_stmt><expr><name pos:line="13" pos:column="3">status<pos:position pos:line="13" pos:column="9"/></name> <operator pos:line="13" pos:column="10">=<pos:position pos:line="13" pos:column="11"/></operator> <call><name pos:line="13" pos:column="12">vsnprintf<pos:position pos:line="13" pos:column="21"/></name><argument_list pos:line="13" pos:column="21">(<argument><expr><name pos:line="13" pos:column="22">static_buffer<pos:position pos:line="13" pos:column="35"/></name></expr></argument>, <argument><expr><sizeof pos:line="13" pos:column="37">sizeof<argument_list pos:line="13" pos:column="43">(<argument><expr><name pos:line="13" pos:column="44">static_buffer<pos:position pos:line="13" pos:column="57"/></name></expr></argument>)<pos:position pos:line="13" pos:column="58"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="13" pos:column="60">format<pos:position pos:line="13" pos:column="66"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="68">ap<pos:position pos:line="13" pos:column="70"/></name></expr></argument>)<pos:position pos:line="13" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="72"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="14" pos:column="3">va_end<pos:position pos:line="14" pos:column="9"/></name><argument_list pos:line="14" pos:column="9">(<argument><expr><name pos:line="14" pos:column="10">ap<pos:position pos:line="14" pos:column="12"/></name></expr></argument>)<pos:position pos:line="14" pos:column="13"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="14"/></expr_stmt>
  <if pos:line="15" pos:column="3">if <condition pos:line="15" pos:column="6">(<expr><name pos:line="15" pos:column="7">status<pos:position pos:line="15" pos:column="13"/></name> <operator pos:line="15" pos:column="14">&lt;<pos:position pos:line="15" pos:column="18"/></operator> <literal type="number" pos:line="15" pos:column="16">0<pos:position pos:line="15" pos:column="17"/></literal></expr>)<pos:position pos:line="15" pos:column="18"/></condition><then pos:line="15" pos:column="18">
    <block type="pseudo"><return pos:line="16" pos:column="5">return <expr><operator pos:line="16" pos:column="12">(<pos:position pos:line="16" pos:column="13"/></operator><name pos:line="16" pos:column="13">NULL<pos:position pos:line="16" pos:column="17"/></name><operator pos:line="16" pos:column="17">)<pos:position pos:line="16" pos:column="18"/></operator></expr>;<pos:position pos:line="16" pos:column="19"/></return></block></then></if>

  <comment type="block" pos:line="18" pos:column="3">/* "status" does not include the null byte. */</comment>
  <expr_stmt><expr><name pos:line="19" pos:column="3">alloc_buffer_size<pos:position pos:line="19" pos:column="20"/></name> <operator pos:line="19" pos:column="21">=<pos:position pos:line="19" pos:column="22"/></operator> <call pos:line="19" pos:column="23">(<name pos:line="19" pos:column="24">size_t<pos:position pos:line="19" pos:column="30"/></name>)<argument_list pos:line="19" pos:column="31">(<argument><expr><name pos:line="19" pos:column="32">status<pos:position pos:line="19" pos:column="38"/></name> <operator pos:line="19" pos:column="39">+<pos:position pos:line="19" pos:column="40"/></operator> <literal type="number" pos:line="19" pos:column="41">1<pos:position pos:line="19" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="44"/></expr_stmt>
  <if pos:line="20" pos:column="3">if <condition pos:line="20" pos:column="6">(<expr><name pos:line="20" pos:column="7">alloc_buffer_size<pos:position pos:line="20" pos:column="24"/></name> <operator pos:line="20" pos:column="25">&lt;=<pos:position pos:line="20" pos:column="30"/></operator> <sizeof pos:line="20" pos:column="28">sizeof<argument_list pos:line="20" pos:column="34">(<argument><expr><name pos:line="20" pos:column="35">static_buffer<pos:position pos:line="20" pos:column="48"/></name></expr></argument>)<pos:position pos:line="20" pos:column="49"/></argument_list></sizeof></expr>)<pos:position pos:line="20" pos:column="50"/></condition><then pos:line="20" pos:column="50">
    <block type="pseudo"><return pos:line="21" pos:column="5">return <expr><operator pos:line="21" pos:column="12">(<pos:position pos:line="21" pos:column="13"/></operator><call><name pos:line="21" pos:column="13">strdup<pos:position pos:line="21" pos:column="19"/></name><argument_list pos:line="21" pos:column="19">(<argument><expr><name pos:line="21" pos:column="20">static_buffer<pos:position pos:line="21" pos:column="33"/></name></expr></argument>)<pos:position pos:line="21" pos:column="34"/></argument_list></call><operator pos:line="21" pos:column="34">)<pos:position pos:line="21" pos:column="35"/></operator></expr>;<pos:position pos:line="21" pos:column="36"/></return></block></then></if>

  <comment type="block" pos:line="23" pos:column="3">/* Allocate a buffer large enough to hold the string. */</comment>
  <expr_stmt><expr><name pos:line="24" pos:column="3">alloc_buffer<pos:position pos:line="24" pos:column="15"/></name> <operator pos:line="24" pos:column="16">=<pos:position pos:line="24" pos:column="17"/></operator> <call><name pos:line="24" pos:column="18">calloc<pos:position pos:line="24" pos:column="24"/></name><argument_list pos:line="24" pos:column="24">(<argument><expr><literal type="number" pos:line="24" pos:column="25">1<pos:position pos:line="24" pos:column="26"/></literal></expr></argument>, <argument><expr><name pos:line="24" pos:column="28">alloc_buffer_size<pos:position pos:line="24" pos:column="45"/></name></expr></argument>)<pos:position pos:line="24" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="47"/></expr_stmt>
  <if pos:line="25" pos:column="3">if <condition pos:line="25" pos:column="6">(<expr><name pos:line="25" pos:column="7">alloc_buffer<pos:position pos:line="25" pos:column="19"/></name> <operator pos:line="25" pos:column="20">==<pos:position pos:line="25" pos:column="22"/></operator> <name pos:line="25" pos:column="23">NULL<pos:position pos:line="25" pos:column="27"/></name></expr>)<pos:position pos:line="25" pos:column="28"/></condition><then pos:line="25" pos:column="28">
    <block type="pseudo"><return pos:line="26" pos:column="5">return <expr><operator pos:line="26" pos:column="12">(<pos:position pos:line="26" pos:column="13"/></operator><name pos:line="26" pos:column="13">NULL<pos:position pos:line="26" pos:column="17"/></name><operator pos:line="26" pos:column="17">)<pos:position pos:line="26" pos:column="18"/></operator></expr>;<pos:position pos:line="26" pos:column="19"/></return></block></then></if>

  <comment type="block" pos:line="28" pos:column="3">/* Print again into this new buffer. */</comment>
  <expr_stmt><expr><call><name pos:line="29" pos:column="3">va_start<pos:position pos:line="29" pos:column="11"/></name><argument_list pos:line="29" pos:column="11">(<argument><expr><name pos:line="29" pos:column="12">ap<pos:position pos:line="29" pos:column="14"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="16">format<pos:position pos:line="29" pos:column="22"/></name></expr></argument>)<pos:position pos:line="29" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="24"/></expr_stmt>
  <expr_stmt><expr><name pos:line="30" pos:column="3">status<pos:position pos:line="30" pos:column="9"/></name> <operator pos:line="30" pos:column="10">=<pos:position pos:line="30" pos:column="11"/></operator> <call><name pos:line="30" pos:column="12">vsnprintf<pos:position pos:line="30" pos:column="21"/></name><argument_list pos:line="30" pos:column="21">(<argument><expr><name pos:line="30" pos:column="22">alloc_buffer<pos:position pos:line="30" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="36">alloc_buffer_size<pos:position pos:line="30" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="55">format<pos:position pos:line="30" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="63">ap<pos:position pos:line="30" pos:column="65"/></name></expr></argument>)<pos:position pos:line="30" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="67"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="31" pos:column="3">va_end<pos:position pos:line="31" pos:column="9"/></name><argument_list pos:line="31" pos:column="9">(<argument><expr><name pos:line="31" pos:column="10">ap<pos:position pos:line="31" pos:column="12"/></name></expr></argument>)<pos:position pos:line="31" pos:column="13"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="14"/></expr_stmt>
  <if pos:line="32" pos:column="3">if <condition pos:line="32" pos:column="6">(<expr><name pos:line="32" pos:column="7">status<pos:position pos:line="32" pos:column="13"/></name> <operator pos:line="32" pos:column="14">&lt;<pos:position pos:line="32" pos:column="18"/></operator> <literal type="number" pos:line="32" pos:column="16">0<pos:position pos:line="32" pos:column="17"/></literal></expr>)<pos:position pos:line="32" pos:column="18"/></condition><then pos:line="32" pos:column="18"> <block pos:line="32" pos:column="19">{
    <expr_stmt><expr><call><name pos:line="33" pos:column="5">sfree<pos:position pos:line="33" pos:column="10"/></name><argument_list pos:line="33" pos:column="10">(<argument><expr><name pos:line="33" pos:column="11">alloc_buffer<pos:position pos:line="33" pos:column="23"/></name></expr></argument>)<pos:position pos:line="33" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="25"/></expr_stmt>
    <return pos:line="34" pos:column="5">return <expr><operator pos:line="34" pos:column="12">(<pos:position pos:line="34" pos:column="13"/></operator><name pos:line="34" pos:column="13">NULL<pos:position pos:line="34" pos:column="17"/></name><operator pos:line="34" pos:column="17">)<pos:position pos:line="34" pos:column="18"/></operator></expr>;<pos:position pos:line="34" pos:column="19"/></return>
  }<pos:position pos:line="35" pos:column="4"/></block></then></if>

  <return pos:line="37" pos:column="3">return <expr><operator pos:line="37" pos:column="10">(<pos:position pos:line="37" pos:column="11"/></operator><name pos:line="37" pos:column="11">alloc_buffer<pos:position pos:line="37" pos:column="23"/></name><operator pos:line="37" pos:column="23">)<pos:position pos:line="37" pos:column="24"/></operator></expr>;<pos:position pos:line="37" pos:column="25"/></return>
}<pos:position pos:line="38" pos:column="2"/></block></function></unit>
