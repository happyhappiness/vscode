<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1208_collectd-4.8.0.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">network_receive<pos:position pos:line="1" pos:column="27"/></name> <parameter_list pos:line="1" pos:column="28">(<parameter><decl><type><name pos:line="1" pos:column="29">void<pos:position pos:line="1" pos:column="33"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="34"/></parameter_list> <comment type="block" pos:line="1" pos:column="35">/* {{{ */</comment>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">char<pos:position pos:line="3" pos:column="13"/></name></type> <name><name pos:line="3" pos:column="14">buffer<pos:position pos:line="3" pos:column="20"/></name><index pos:line="3" pos:column="20">[<expr><name pos:line="3" pos:column="21">network_config_packet_size<pos:position pos:line="3" pos:column="47"/></name></expr>]<pos:position pos:line="3" pos:column="48"/></index></name></decl>;<pos:position pos:line="3" pos:column="49"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type>  <name pos:line="4" pos:column="14">buffer_len<pos:position pos:line="4" pos:column="24"/></name></decl>;<pos:position pos:line="4" pos:column="25"/></decl_stmt>

	<decl_stmt><decl><type><name pos:line="6" pos:column="9">int<pos:position pos:line="6" pos:column="12"/></name></type> <name pos:line="6" pos:column="13">i<pos:position pos:line="6" pos:column="14"/></name></decl>;<pos:position pos:line="6" pos:column="15"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">int<pos:position pos:line="7" pos:column="12"/></name></type> <name pos:line="7" pos:column="13">status<pos:position pos:line="7" pos:column="19"/></name></decl>;<pos:position pos:line="7" pos:column="20"/></decl_stmt>

	<decl_stmt><decl><type><name pos:line="9" pos:column="9">receive_list_entry_t<pos:position pos:line="9" pos:column="29"/></name> <modifier pos:line="9" pos:column="30">*<pos:position pos:line="9" pos:column="31"/></modifier></type><name pos:line="9" pos:column="31">private_list_head<pos:position pos:line="9" pos:column="48"/></name></decl>;<pos:position pos:line="9" pos:column="49"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="10" pos:column="9">receive_list_entry_t<pos:position pos:line="10" pos:column="29"/></name> <modifier pos:line="10" pos:column="30">*<pos:position pos:line="10" pos:column="31"/></modifier></type><name pos:line="10" pos:column="31">private_list_tail<pos:position pos:line="10" pos:column="48"/></name></decl>;<pos:position pos:line="10" pos:column="49"/></decl_stmt>

        <expr_stmt><expr><call><name pos:line="12" pos:column="9">assert<pos:position pos:line="12" pos:column="15"/></name> <argument_list pos:line="12" pos:column="16">(<argument><expr><name pos:line="12" pos:column="17">listen_sockets_num<pos:position pos:line="12" pos:column="35"/></name> <operator pos:line="12" pos:column="36">&gt;<pos:position pos:line="12" pos:column="40"/></operator> <literal type="number" pos:line="12" pos:column="38">0<pos:position pos:line="12" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="41"/></expr_stmt>

	<expr_stmt><expr><name pos:line="14" pos:column="9">private_list_head<pos:position pos:line="14" pos:column="26"/></name> <operator pos:line="14" pos:column="27">=<pos:position pos:line="14" pos:column="28"/></operator> <name pos:line="14" pos:column="29">NULL<pos:position pos:line="14" pos:column="33"/></name></expr>;<pos:position pos:line="14" pos:column="34"/></expr_stmt>
	<expr_stmt><expr><name pos:line="15" pos:column="9">private_list_tail<pos:position pos:line="15" pos:column="26"/></name> <operator pos:line="15" pos:column="27">=<pos:position pos:line="15" pos:column="28"/></operator> <name pos:line="15" pos:column="29">NULL<pos:position pos:line="15" pos:column="33"/></name></expr>;<pos:position pos:line="15" pos:column="34"/></expr_stmt>

	<while pos:line="17" pos:column="9">while <condition pos:line="17" pos:column="15">(<expr><name pos:line="17" pos:column="16">listen_loop<pos:position pos:line="17" pos:column="27"/></name> <operator pos:line="17" pos:column="28">==<pos:position pos:line="17" pos:column="30"/></operator> <literal type="number" pos:line="17" pos:column="31">0<pos:position pos:line="17" pos:column="32"/></literal></expr>)<pos:position pos:line="17" pos:column="33"/></condition>
	<block pos:line="18" pos:column="9">{
		<expr_stmt><expr><name pos:line="19" pos:column="17">status<pos:position pos:line="19" pos:column="23"/></name> <operator pos:line="19" pos:column="24">=<pos:position pos:line="19" pos:column="25"/></operator> <call><name pos:line="19" pos:column="26">poll<pos:position pos:line="19" pos:column="30"/></name> <argument_list pos:line="19" pos:column="31">(<argument><expr><name pos:line="19" pos:column="32">listen_sockets_pollfd<pos:position pos:line="19" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="55">listen_sockets_num<pos:position pos:line="19" pos:column="73"/></name></expr></argument>, <argument><expr><operator pos:line="19" pos:column="75">-<pos:position pos:line="19" pos:column="76"/></operator><literal type="number" pos:line="19" pos:column="76">1<pos:position pos:line="19" pos:column="77"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="79"/></expr_stmt>

		<if pos:line="21" pos:column="17">if <condition pos:line="21" pos:column="20">(<expr><name pos:line="21" pos:column="21">status<pos:position pos:line="21" pos:column="27"/></name> <operator pos:line="21" pos:column="28">&lt;=<pos:position pos:line="21" pos:column="33"/></operator> <literal type="number" pos:line="21" pos:column="31">0<pos:position pos:line="21" pos:column="32"/></literal></expr>)<pos:position pos:line="21" pos:column="33"/></condition><then pos:line="21" pos:column="33">
		<block pos:line="22" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="23" pos:column="25">char<pos:position pos:line="23" pos:column="29"/></name></type> <name><name pos:line="23" pos:column="30">errbuf<pos:position pos:line="23" pos:column="36"/></name><index pos:line="23" pos:column="36">[<expr><literal type="number" pos:line="23" pos:column="37">1024<pos:position pos:line="23" pos:column="41"/></literal></expr>]<pos:position pos:line="23" pos:column="42"/></index></name></decl>;<pos:position pos:line="23" pos:column="43"/></decl_stmt>
			<if pos:line="24" pos:column="25">if <condition pos:line="24" pos:column="28">(<expr><name pos:line="24" pos:column="29">errno<pos:position pos:line="24" pos:column="34"/></name> <operator pos:line="24" pos:column="35">==<pos:position pos:line="24" pos:column="37"/></operator> <name pos:line="24" pos:column="38">EINTR<pos:position pos:line="24" pos:column="43"/></name></expr>)<pos:position pos:line="24" pos:column="44"/></condition><then pos:line="24" pos:column="44">
				<block type="pseudo"><continue pos:line="25" pos:column="33">continue;<pos:position pos:line="25" pos:column="42"/></continue></block></then></if>
			<expr_stmt><expr><call><name pos:line="26" pos:column="25">ERROR<pos:position pos:line="26" pos:column="30"/></name> <argument_list pos:line="26" pos:column="31">(<argument><expr><literal type="string" pos:line="26" pos:column="32">"poll failed: %s"<pos:position pos:line="26" pos:column="49"/></literal></expr></argument>,
					<argument><expr><call><name pos:line="27" pos:column="41">sstrerror<pos:position pos:line="27" pos:column="50"/></name> <argument_list pos:line="27" pos:column="51">(<argument><expr><name pos:line="27" pos:column="52">errno<pos:position pos:line="27" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="59">errbuf<pos:position pos:line="27" pos:column="65"/></name></expr></argument>, <argument><expr><sizeof pos:line="27" pos:column="67">sizeof <argument_list pos:line="27" pos:column="74">(<argument><expr><name pos:line="27" pos:column="75">errbuf<pos:position pos:line="27" pos:column="81"/></name></expr></argument>)<pos:position pos:line="27" pos:column="82"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="27" pos:column="83"/></argument_list></call></expr></argument>)<pos:position pos:line="27" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="85"/></expr_stmt>
			<return pos:line="28" pos:column="25">return <expr><operator pos:line="28" pos:column="32">(<pos:position pos:line="28" pos:column="33"/></operator><operator pos:line="28" pos:column="33">-<pos:position pos:line="28" pos:column="34"/></operator><literal type="number" pos:line="28" pos:column="34">1<pos:position pos:line="28" pos:column="35"/></literal><operator pos:line="28" pos:column="35">)<pos:position pos:line="28" pos:column="36"/></operator></expr>;<pos:position pos:line="28" pos:column="37"/></return>
		}<pos:position pos:line="29" pos:column="18"/></block></then></if>

		<for pos:line="31" pos:column="17">for <control pos:line="31" pos:column="21">(<init><expr><name pos:line="31" pos:column="22">i<pos:position pos:line="31" pos:column="23"/></name> <operator pos:line="31" pos:column="24">=<pos:position pos:line="31" pos:column="25"/></operator> <literal type="number" pos:line="31" pos:column="26">0<pos:position pos:line="31" pos:column="27"/></literal></expr>;<pos:position pos:line="31" pos:column="28"/></init> <condition><expr><operator pos:line="31" pos:column="29">(<pos:position pos:line="31" pos:column="30"/></operator><name pos:line="31" pos:column="30">i<pos:position pos:line="31" pos:column="31"/></name> <operator pos:line="31" pos:column="32">&lt;<pos:position pos:line="31" pos:column="36"/></operator> <name pos:line="31" pos:column="34">listen_sockets_num<pos:position pos:line="31" pos:column="52"/></name><operator pos:line="31" pos:column="52">)<pos:position pos:line="31" pos:column="53"/></operator> <operator pos:line="31" pos:column="54">&amp;&amp;<pos:position pos:line="31" pos:column="64"/></operator> <operator pos:line="31" pos:column="57">(<pos:position pos:line="31" pos:column="58"/></operator><name pos:line="31" pos:column="58">status<pos:position pos:line="31" pos:column="64"/></name> <operator pos:line="31" pos:column="65">&gt;<pos:position pos:line="31" pos:column="69"/></operator> <literal type="number" pos:line="31" pos:column="67">0<pos:position pos:line="31" pos:column="68"/></literal><operator pos:line="31" pos:column="68">)<pos:position pos:line="31" pos:column="69"/></operator></expr>;<pos:position pos:line="31" pos:column="70"/></condition> <incr><expr><name pos:line="31" pos:column="71">i<pos:position pos:line="31" pos:column="72"/></name><operator pos:line="31" pos:column="72">++<pos:position pos:line="31" pos:column="74"/></operator></expr></incr>)<pos:position pos:line="31" pos:column="75"/></control>
		<block pos:line="32" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="33" pos:column="25">receive_list_entry_t<pos:position pos:line="33" pos:column="45"/></name> <modifier pos:line="33" pos:column="46">*<pos:position pos:line="33" pos:column="47"/></modifier></type><name pos:line="33" pos:column="47">ent<pos:position pos:line="33" pos:column="50"/></name></decl>;<pos:position pos:line="33" pos:column="51"/></decl_stmt>

			<if pos:line="35" pos:column="25">if <condition pos:line="35" pos:column="28">(<expr><operator pos:line="35" pos:column="29">(<pos:position pos:line="35" pos:column="30"/></operator><name><name pos:line="35" pos:column="30">listen_sockets_pollfd<pos:position pos:line="35" pos:column="51"/></name><index pos:line="35" pos:column="51">[<expr><name pos:line="35" pos:column="52">i<pos:position pos:line="35" pos:column="53"/></name></expr>]<pos:position pos:line="35" pos:column="54"/></index></name><operator pos:line="35" pos:column="54">.<pos:position pos:line="35" pos:column="55"/></operator><name pos:line="35" pos:column="55">revents<pos:position pos:line="35" pos:column="62"/></name>
						<operator pos:line="36" pos:column="49">&amp;<pos:position pos:line="36" pos:column="54"/></operator> <operator pos:line="36" pos:column="51">(<pos:position pos:line="36" pos:column="52"/></operator><name pos:line="36" pos:column="52">POLLIN<pos:position pos:line="36" pos:column="58"/></name> <operator pos:line="36" pos:column="59">|<pos:position pos:line="36" pos:column="60"/></operator> <name pos:line="36" pos:column="61">POLLPRI<pos:position pos:line="36" pos:column="68"/></name><operator pos:line="36" pos:column="68">)<pos:position pos:line="36" pos:column="69"/></operator><operator pos:line="36" pos:column="69">)<pos:position pos:line="36" pos:column="70"/></operator> <operator pos:line="36" pos:column="71">==<pos:position pos:line="36" pos:column="73"/></operator> <literal type="number" pos:line="36" pos:column="74">0<pos:position pos:line="36" pos:column="75"/></literal></expr>)<pos:position pos:line="36" pos:column="76"/></condition><then pos:line="36" pos:column="76">
				<block type="pseudo"><continue pos:line="37" pos:column="33">continue;<pos:position pos:line="37" pos:column="42"/></continue></block></then></if>
			<expr_stmt><expr><name pos:line="38" pos:column="25">status<pos:position pos:line="38" pos:column="31"/></name><operator pos:line="38" pos:column="31">--<pos:position pos:line="38" pos:column="33"/></operator></expr>;<pos:position pos:line="38" pos:column="34"/></expr_stmt>

			<expr_stmt><expr><name pos:line="40" pos:column="25">buffer_len<pos:position pos:line="40" pos:column="35"/></name> <operator pos:line="40" pos:column="36">=<pos:position pos:line="40" pos:column="37"/></operator> <call><name pos:line="40" pos:column="38">recv<pos:position pos:line="40" pos:column="42"/></name> <argument_list pos:line="40" pos:column="43">(<argument><expr><name><name pos:line="40" pos:column="44">listen_sockets_pollfd<pos:position pos:line="40" pos:column="65"/></name><index pos:line="40" pos:column="65">[<expr><name pos:line="40" pos:column="66">i<pos:position pos:line="40" pos:column="67"/></name></expr>]<pos:position pos:line="40" pos:column="68"/></index></name><operator pos:line="40" pos:column="68">.<pos:position pos:line="40" pos:column="69"/></operator><name pos:line="40" pos:column="69">fd<pos:position pos:line="40" pos:column="71"/></name></expr></argument>,
					<argument><expr><name pos:line="41" pos:column="41">buffer<pos:position pos:line="41" pos:column="47"/></name></expr></argument>, <argument><expr><sizeof pos:line="41" pos:column="49">sizeof <argument_list pos:line="41" pos:column="56">(<argument><expr><name pos:line="41" pos:column="57">buffer<pos:position pos:line="41" pos:column="63"/></name></expr></argument>)<pos:position pos:line="41" pos:column="64"/></argument_list></sizeof></expr></argument>,
					<argument><expr><literal type="number" pos:line="42" pos:column="41">0<pos:position pos:line="42" pos:column="42"/></literal></expr></argument> <comment type="block" pos:line="42" pos:column="43">/* no flags */</comment>)<pos:position pos:line="42" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="59"/></expr_stmt>
			<if pos:line="43" pos:column="25">if <condition pos:line="43" pos:column="28">(<expr><name pos:line="43" pos:column="29">buffer_len<pos:position pos:line="43" pos:column="39"/></name> <operator pos:line="43" pos:column="40">&lt;<pos:position pos:line="43" pos:column="44"/></operator> <literal type="number" pos:line="43" pos:column="42">0<pos:position pos:line="43" pos:column="43"/></literal></expr>)<pos:position pos:line="43" pos:column="44"/></condition><then pos:line="43" pos:column="44">
			<block pos:line="44" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="45" pos:column="33">char<pos:position pos:line="45" pos:column="37"/></name></type> <name><name pos:line="45" pos:column="38">errbuf<pos:position pos:line="45" pos:column="44"/></name><index pos:line="45" pos:column="44">[<expr><literal type="number" pos:line="45" pos:column="45">1024<pos:position pos:line="45" pos:column="49"/></literal></expr>]<pos:position pos:line="45" pos:column="50"/></index></name></decl>;<pos:position pos:line="45" pos:column="51"/></decl_stmt>
				<expr_stmt><expr><call><name pos:line="46" pos:column="33">ERROR<pos:position pos:line="46" pos:column="38"/></name> <argument_list pos:line="46" pos:column="39">(<argument><expr><literal type="string" pos:line="46" pos:column="40">"recv failed: %s"<pos:position pos:line="46" pos:column="57"/></literal></expr></argument>,
						<argument><expr><call><name pos:line="47" pos:column="49">sstrerror<pos:position pos:line="47" pos:column="58"/></name> <argument_list pos:line="47" pos:column="59">(<argument><expr><name pos:line="47" pos:column="60">errno<pos:position pos:line="47" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="67">errbuf<pos:position pos:line="47" pos:column="73"/></name></expr></argument>,
							<argument><expr><sizeof pos:line="48" pos:column="57">sizeof <argument_list pos:line="48" pos:column="64">(<argument><expr><name pos:line="48" pos:column="65">errbuf<pos:position pos:line="48" pos:column="71"/></name></expr></argument>)<pos:position pos:line="48" pos:column="72"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="48" pos:column="73"/></argument_list></call></expr></argument>)<pos:position pos:line="48" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="75"/></expr_stmt>
				<return pos:line="49" pos:column="33">return <expr><operator pos:line="49" pos:column="40">(<pos:position pos:line="49" pos:column="41"/></operator><operator pos:line="49" pos:column="41">-<pos:position pos:line="49" pos:column="42"/></operator><literal type="number" pos:line="49" pos:column="42">1<pos:position pos:line="49" pos:column="43"/></literal><operator pos:line="49" pos:column="43">)<pos:position pos:line="49" pos:column="44"/></operator></expr>;<pos:position pos:line="49" pos:column="45"/></return>
			}<pos:position pos:line="50" pos:column="26"/></block></then></if>

			<comment type="block" pos:line="52" pos:column="25">/* TODO: Possible performance enhancement: Do not free
			 * these entries in the dispatch thread but put them in
			 * another list, so we don't have to allocate more and
			 * more of these structures. */</comment>
			<expr_stmt><expr><name pos:line="56" pos:column="25">ent<pos:position pos:line="56" pos:column="28"/></name> <operator pos:line="56" pos:column="29">=<pos:position pos:line="56" pos:column="30"/></operator> <call><name pos:line="56" pos:column="31">malloc<pos:position pos:line="56" pos:column="37"/></name> <argument_list pos:line="56" pos:column="38">(<argument><expr><sizeof pos:line="56" pos:column="39">sizeof <argument_list pos:line="56" pos:column="46">(<argument><expr><name pos:line="56" pos:column="47">receive_list_entry_t<pos:position pos:line="56" pos:column="67"/></name></expr></argument>)<pos:position pos:line="56" pos:column="68"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="56" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="70"/></expr_stmt>
			<if pos:line="57" pos:column="25">if <condition pos:line="57" pos:column="28">(<expr><name pos:line="57" pos:column="29">ent<pos:position pos:line="57" pos:column="32"/></name> <operator pos:line="57" pos:column="33">==<pos:position pos:line="57" pos:column="35"/></operator> <name pos:line="57" pos:column="36">NULL<pos:position pos:line="57" pos:column="40"/></name></expr>)<pos:position pos:line="57" pos:column="41"/></condition><then pos:line="57" pos:column="41">
			<block pos:line="58" pos:column="25">{
				<expr_stmt><expr><call><name pos:line="59" pos:column="33">ERROR<pos:position pos:line="59" pos:column="38"/></name> <argument_list pos:line="59" pos:column="39">(<argument><expr><literal type="string" pos:line="59" pos:column="40">"network plugin: malloc failed."<pos:position pos:line="59" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="59" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="74"/></expr_stmt>
				<return pos:line="60" pos:column="33">return <expr><operator pos:line="60" pos:column="40">(<pos:position pos:line="60" pos:column="41"/></operator><operator pos:line="60" pos:column="41">-<pos:position pos:line="60" pos:column="42"/></operator><literal type="number" pos:line="60" pos:column="42">1<pos:position pos:line="60" pos:column="43"/></literal><operator pos:line="60" pos:column="43">)<pos:position pos:line="60" pos:column="44"/></operator></expr>;<pos:position pos:line="60" pos:column="45"/></return>
			}<pos:position pos:line="61" pos:column="26"/></block></then></if>
			<expr_stmt><expr><call><name pos:line="62" pos:column="25">memset<pos:position pos:line="62" pos:column="31"/></name> <argument_list pos:line="62" pos:column="32">(<argument><expr><name pos:line="62" pos:column="33">ent<pos:position pos:line="62" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="62" pos:column="38">0<pos:position pos:line="62" pos:column="39"/></literal></expr></argument>, <argument><expr><sizeof pos:line="62" pos:column="41">sizeof <argument_list pos:line="62" pos:column="48">(<argument><expr><name pos:line="62" pos:column="49">receive_list_entry_t<pos:position pos:line="62" pos:column="69"/></name></expr></argument>)<pos:position pos:line="62" pos:column="70"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="62" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="72"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="63" pos:column="25">ent<pos:position pos:line="63" pos:column="28"/></name><operator pos:line="63" pos:column="28">-&gt;<pos:position pos:line="63" pos:column="33"/></operator><name pos:line="63" pos:column="30">data<pos:position pos:line="63" pos:column="34"/></name></name> <operator pos:line="63" pos:column="35">=<pos:position pos:line="63" pos:column="36"/></operator> <call><name pos:line="63" pos:column="37">malloc<pos:position pos:line="63" pos:column="43"/></name> <argument_list pos:line="63" pos:column="44">(<argument><expr><name pos:line="63" pos:column="45">network_config_packet_size<pos:position pos:line="63" pos:column="71"/></name></expr></argument>)<pos:position pos:line="63" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="73"/></expr_stmt>
			<if pos:line="64" pos:column="25">if <condition pos:line="64" pos:column="28">(<expr><name><name pos:line="64" pos:column="29">ent<pos:position pos:line="64" pos:column="32"/></name><operator pos:line="64" pos:column="32">-&gt;<pos:position pos:line="64" pos:column="37"/></operator><name pos:line="64" pos:column="34">data<pos:position pos:line="64" pos:column="38"/></name></name> <operator pos:line="64" pos:column="39">==<pos:position pos:line="64" pos:column="41"/></operator> <name pos:line="64" pos:column="42">NULL<pos:position pos:line="64" pos:column="46"/></name></expr>)<pos:position pos:line="64" pos:column="47"/></condition><then pos:line="64" pos:column="47">
			<block pos:line="65" pos:column="25">{
				<expr_stmt><expr><call><name pos:line="66" pos:column="33">ERROR<pos:position pos:line="66" pos:column="38"/></name> <argument_list pos:line="66" pos:column="39">(<argument><expr><literal type="string" pos:line="66" pos:column="40">"network plugin: malloc failed."<pos:position pos:line="66" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="66" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="74"/></expr_stmt>
				<return pos:line="67" pos:column="33">return <expr><operator pos:line="67" pos:column="40">(<pos:position pos:line="67" pos:column="41"/></operator><operator pos:line="67" pos:column="41">-<pos:position pos:line="67" pos:column="42"/></operator><literal type="number" pos:line="67" pos:column="42">1<pos:position pos:line="67" pos:column="43"/></literal><operator pos:line="67" pos:column="43">)<pos:position pos:line="67" pos:column="44"/></operator></expr>;<pos:position pos:line="67" pos:column="45"/></return>
			}<pos:position pos:line="68" pos:column="26"/></block></then></if>
			<expr_stmt><expr><name><name pos:line="69" pos:column="25">ent<pos:position pos:line="69" pos:column="28"/></name><operator pos:line="69" pos:column="28">-&gt;<pos:position pos:line="69" pos:column="33"/></operator><name pos:line="69" pos:column="30">fd<pos:position pos:line="69" pos:column="32"/></name></name> <operator pos:line="69" pos:column="33">=<pos:position pos:line="69" pos:column="34"/></operator> <name><name pos:line="69" pos:column="35">listen_sockets_pollfd<pos:position pos:line="69" pos:column="56"/></name><index pos:line="69" pos:column="56">[<expr><name pos:line="69" pos:column="57">i<pos:position pos:line="69" pos:column="58"/></name></expr>]<pos:position pos:line="69" pos:column="59"/></index></name><operator pos:line="69" pos:column="59">.<pos:position pos:line="69" pos:column="60"/></operator><name pos:line="69" pos:column="60">fd<pos:position pos:line="69" pos:column="62"/></name></expr>;<pos:position pos:line="69" pos:column="63"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="70" pos:column="25">ent<pos:position pos:line="70" pos:column="28"/></name><operator pos:line="70" pos:column="28">-&gt;<pos:position pos:line="70" pos:column="33"/></operator><name pos:line="70" pos:column="30">next<pos:position pos:line="70" pos:column="34"/></name></name> <operator pos:line="70" pos:column="35">=<pos:position pos:line="70" pos:column="36"/></operator> <name pos:line="70" pos:column="37">NULL<pos:position pos:line="70" pos:column="41"/></name></expr>;<pos:position pos:line="70" pos:column="42"/></expr_stmt>

			<expr_stmt><expr><call><name pos:line="72" pos:column="25">memcpy<pos:position pos:line="72" pos:column="31"/></name> <argument_list pos:line="72" pos:column="32">(<argument><expr><name><name pos:line="72" pos:column="33">ent<pos:position pos:line="72" pos:column="36"/></name><operator pos:line="72" pos:column="36">-&gt;<pos:position pos:line="72" pos:column="41"/></operator><name pos:line="72" pos:column="38">data<pos:position pos:line="72" pos:column="42"/></name></name></expr></argument>, <argument><expr><name pos:line="72" pos:column="44">buffer<pos:position pos:line="72" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="72" pos:column="52">buffer_len<pos:position pos:line="72" pos:column="62"/></name></expr></argument>)<pos:position pos:line="72" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="64"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="73" pos:column="25">ent<pos:position pos:line="73" pos:column="28"/></name><operator pos:line="73" pos:column="28">-&gt;<pos:position pos:line="73" pos:column="33"/></operator><name pos:line="73" pos:column="30">data_len<pos:position pos:line="73" pos:column="38"/></name></name> <operator pos:line="73" pos:column="39">=<pos:position pos:line="73" pos:column="40"/></operator> <name pos:line="73" pos:column="41">buffer_len<pos:position pos:line="73" pos:column="51"/></name></expr>;<pos:position pos:line="73" pos:column="52"/></expr_stmt>

			<if pos:line="75" pos:column="25">if <condition pos:line="75" pos:column="28">(<expr><name pos:line="75" pos:column="29">private_list_head<pos:position pos:line="75" pos:column="46"/></name> <operator pos:line="75" pos:column="47">==<pos:position pos:line="75" pos:column="49"/></operator> <name pos:line="75" pos:column="50">NULL<pos:position pos:line="75" pos:column="54"/></name></expr>)<pos:position pos:line="75" pos:column="55"/></condition><then pos:line="75" pos:column="55">
				<block type="pseudo"><expr_stmt><expr><name pos:line="76" pos:column="33">private_list_head<pos:position pos:line="76" pos:column="50"/></name> <operator pos:line="76" pos:column="51">=<pos:position pos:line="76" pos:column="52"/></operator> <name pos:line="76" pos:column="53">ent<pos:position pos:line="76" pos:column="56"/></name></expr>;<pos:position pos:line="76" pos:column="57"/></expr_stmt></block></then>
			<else pos:line="77" pos:column="25">else
				<block type="pseudo"><expr_stmt><expr><name><name pos:line="78" pos:column="33">private_list_tail<pos:position pos:line="78" pos:column="50"/></name><operator pos:line="78" pos:column="50">-&gt;<pos:position pos:line="78" pos:column="55"/></operator><name pos:line="78" pos:column="52">next<pos:position pos:line="78" pos:column="56"/></name></name> <operator pos:line="78" pos:column="57">=<pos:position pos:line="78" pos:column="58"/></operator> <name pos:line="78" pos:column="59">ent<pos:position pos:line="78" pos:column="62"/></name></expr>;<pos:position pos:line="78" pos:column="63"/></expr_stmt></block></else></if>
			<expr_stmt><expr><name pos:line="79" pos:column="25">private_list_tail<pos:position pos:line="79" pos:column="42"/></name> <operator pos:line="79" pos:column="43">=<pos:position pos:line="79" pos:column="44"/></operator> <name pos:line="79" pos:column="45">ent<pos:position pos:line="79" pos:column="48"/></name></expr>;<pos:position pos:line="79" pos:column="49"/></expr_stmt>

			<comment type="block" pos:line="81" pos:column="25">/* Do not block here. Blocking here has led to
			 * insufficient performance in the past. */</comment>
			<if pos:line="83" pos:column="25">if <condition pos:line="83" pos:column="28">(<expr><call><name pos:line="83" pos:column="29">pthread_mutex_trylock<pos:position pos:line="83" pos:column="50"/></name> <argument_list pos:line="83" pos:column="51">(<argument><expr><operator pos:line="83" pos:column="52">&amp;<pos:position pos:line="83" pos:column="57"/></operator><name pos:line="83" pos:column="53">receive_list_lock<pos:position pos:line="83" pos:column="70"/></name></expr></argument>)<pos:position pos:line="83" pos:column="71"/></argument_list></call> <operator pos:line="83" pos:column="72">==<pos:position pos:line="83" pos:column="74"/></operator> <literal type="number" pos:line="83" pos:column="75">0<pos:position pos:line="83" pos:column="76"/></literal></expr>)<pos:position pos:line="83" pos:column="77"/></condition><then pos:line="83" pos:column="77">
			<block pos:line="84" pos:column="25">{
				<if pos:line="85" pos:column="33">if <condition pos:line="85" pos:column="36">(<expr><name pos:line="85" pos:column="37">receive_list_head<pos:position pos:line="85" pos:column="54"/></name> <operator pos:line="85" pos:column="55">==<pos:position pos:line="85" pos:column="57"/></operator> <name pos:line="85" pos:column="58">NULL<pos:position pos:line="85" pos:column="62"/></name></expr>)<pos:position pos:line="85" pos:column="63"/></condition><then pos:line="85" pos:column="63">
					<block type="pseudo"><expr_stmt><expr><name pos:line="86" pos:column="41">receive_list_head<pos:position pos:line="86" pos:column="58"/></name> <operator pos:line="86" pos:column="59">=<pos:position pos:line="86" pos:column="60"/></operator> <name pos:line="86" pos:column="61">private_list_head<pos:position pos:line="86" pos:column="78"/></name></expr>;<pos:position pos:line="86" pos:column="79"/></expr_stmt></block></then>
				<else pos:line="87" pos:column="33">else
					<block type="pseudo"><expr_stmt><expr><name><name pos:line="88" pos:column="41">receive_list_tail<pos:position pos:line="88" pos:column="58"/></name><operator pos:line="88" pos:column="58">-&gt;<pos:position pos:line="88" pos:column="63"/></operator><name pos:line="88" pos:column="60">next<pos:position pos:line="88" pos:column="64"/></name></name> <operator pos:line="88" pos:column="65">=<pos:position pos:line="88" pos:column="66"/></operator> <name pos:line="88" pos:column="67">private_list_head<pos:position pos:line="88" pos:column="84"/></name></expr>;<pos:position pos:line="88" pos:column="85"/></expr_stmt></block></else></if>
				<expr_stmt><expr><name pos:line="89" pos:column="33">receive_list_tail<pos:position pos:line="89" pos:column="50"/></name> <operator pos:line="89" pos:column="51">=<pos:position pos:line="89" pos:column="52"/></operator> <name pos:line="89" pos:column="53">private_list_tail<pos:position pos:line="89" pos:column="70"/></name></expr>;<pos:position pos:line="89" pos:column="71"/></expr_stmt>

				<expr_stmt><expr><name pos:line="91" pos:column="33">private_list_head<pos:position pos:line="91" pos:column="50"/></name> <operator pos:line="91" pos:column="51">=<pos:position pos:line="91" pos:column="52"/></operator> <name pos:line="91" pos:column="53">NULL<pos:position pos:line="91" pos:column="57"/></name></expr>;<pos:position pos:line="91" pos:column="58"/></expr_stmt>
				<expr_stmt><expr><name pos:line="92" pos:column="33">private_list_tail<pos:position pos:line="92" pos:column="50"/></name> <operator pos:line="92" pos:column="51">=<pos:position pos:line="92" pos:column="52"/></operator> <name pos:line="92" pos:column="53">NULL<pos:position pos:line="92" pos:column="57"/></name></expr>;<pos:position pos:line="92" pos:column="58"/></expr_stmt>

				<expr_stmt><expr><call><name pos:line="94" pos:column="33">pthread_cond_signal<pos:position pos:line="94" pos:column="52"/></name> <argument_list pos:line="94" pos:column="53">(<argument><expr><operator pos:line="94" pos:column="54">&amp;<pos:position pos:line="94" pos:column="59"/></operator><name pos:line="94" pos:column="55">receive_list_cond<pos:position pos:line="94" pos:column="72"/></name></expr></argument>)<pos:position pos:line="94" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="94" pos:column="74"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="95" pos:column="33">pthread_mutex_unlock<pos:position pos:line="95" pos:column="53"/></name> <argument_list pos:line="95" pos:column="54">(<argument><expr><operator pos:line="95" pos:column="55">&amp;<pos:position pos:line="95" pos:column="60"/></operator><name pos:line="95" pos:column="56">receive_list_lock<pos:position pos:line="95" pos:column="73"/></name></expr></argument>)<pos:position pos:line="95" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="95" pos:column="75"/></expr_stmt>
			}<pos:position pos:line="96" pos:column="26"/></block></then></if>
		}<pos:position pos:line="97" pos:column="18"/></block></for> <comment type="block" pos:line="97" pos:column="19">/* for (listen_sockets_pollfd) */</comment>
	}<pos:position pos:line="98" pos:column="10"/></block></while> <comment type="block" pos:line="98" pos:column="11">/* while (listen_loop == 0) */</comment>

	<comment type="block" pos:line="100" pos:column="9">/* Make sure everything is dispatched before exiting. */</comment>
	<if pos:line="101" pos:column="9">if <condition pos:line="101" pos:column="12">(<expr><name pos:line="101" pos:column="13">private_list_head<pos:position pos:line="101" pos:column="30"/></name> <operator pos:line="101" pos:column="31">!=<pos:position pos:line="101" pos:column="33"/></operator> <name pos:line="101" pos:column="34">NULL<pos:position pos:line="101" pos:column="38"/></name></expr>)<pos:position pos:line="101" pos:column="39"/></condition><then pos:line="101" pos:column="39">
	<block pos:line="102" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="103" pos:column="17">pthread_mutex_lock<pos:position pos:line="103" pos:column="35"/></name> <argument_list pos:line="103" pos:column="36">(<argument><expr><operator pos:line="103" pos:column="37">&amp;<pos:position pos:line="103" pos:column="42"/></operator><name pos:line="103" pos:column="38">receive_list_lock<pos:position pos:line="103" pos:column="55"/></name></expr></argument>)<pos:position pos:line="103" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="103" pos:column="57"/></expr_stmt>

		<if pos:line="105" pos:column="17">if <condition pos:line="105" pos:column="20">(<expr><name pos:line="105" pos:column="21">receive_list_head<pos:position pos:line="105" pos:column="38"/></name> <operator pos:line="105" pos:column="39">==<pos:position pos:line="105" pos:column="41"/></operator> <name pos:line="105" pos:column="42">NULL<pos:position pos:line="105" pos:column="46"/></name></expr>)<pos:position pos:line="105" pos:column="47"/></condition><then pos:line="105" pos:column="47">
			<block type="pseudo"><expr_stmt><expr><name pos:line="106" pos:column="25">receive_list_head<pos:position pos:line="106" pos:column="42"/></name> <operator pos:line="106" pos:column="43">=<pos:position pos:line="106" pos:column="44"/></operator> <name pos:line="106" pos:column="45">private_list_head<pos:position pos:line="106" pos:column="62"/></name></expr>;<pos:position pos:line="106" pos:column="63"/></expr_stmt></block></then>
		<else pos:line="107" pos:column="17">else
			<block type="pseudo"><expr_stmt><expr><name><name pos:line="108" pos:column="25">receive_list_tail<pos:position pos:line="108" pos:column="42"/></name><operator pos:line="108" pos:column="42">-&gt;<pos:position pos:line="108" pos:column="47"/></operator><name pos:line="108" pos:column="44">next<pos:position pos:line="108" pos:column="48"/></name></name> <operator pos:line="108" pos:column="49">=<pos:position pos:line="108" pos:column="50"/></operator> <name pos:line="108" pos:column="51">private_list_head<pos:position pos:line="108" pos:column="68"/></name></expr>;<pos:position pos:line="108" pos:column="69"/></expr_stmt></block></else></if>
		<expr_stmt><expr><name pos:line="109" pos:column="17">receive_list_tail<pos:position pos:line="109" pos:column="34"/></name> <operator pos:line="109" pos:column="35">=<pos:position pos:line="109" pos:column="36"/></operator> <name pos:line="109" pos:column="37">private_list_tail<pos:position pos:line="109" pos:column="54"/></name></expr>;<pos:position pos:line="109" pos:column="55"/></expr_stmt>

		<expr_stmt><expr><name pos:line="111" pos:column="17">private_list_head<pos:position pos:line="111" pos:column="34"/></name> <operator pos:line="111" pos:column="35">=<pos:position pos:line="111" pos:column="36"/></operator> <name pos:line="111" pos:column="37">NULL<pos:position pos:line="111" pos:column="41"/></name></expr>;<pos:position pos:line="111" pos:column="42"/></expr_stmt>
		<expr_stmt><expr><name pos:line="112" pos:column="17">private_list_tail<pos:position pos:line="112" pos:column="34"/></name> <operator pos:line="112" pos:column="35">=<pos:position pos:line="112" pos:column="36"/></operator> <name pos:line="112" pos:column="37">NULL<pos:position pos:line="112" pos:column="41"/></name></expr>;<pos:position pos:line="112" pos:column="42"/></expr_stmt>

		<expr_stmt><expr><call><name pos:line="114" pos:column="17">pthread_cond_signal<pos:position pos:line="114" pos:column="36"/></name> <argument_list pos:line="114" pos:column="37">(<argument><expr><operator pos:line="114" pos:column="38">&amp;<pos:position pos:line="114" pos:column="43"/></operator><name pos:line="114" pos:column="39">receive_list_cond<pos:position pos:line="114" pos:column="56"/></name></expr></argument>)<pos:position pos:line="114" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="114" pos:column="58"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="115" pos:column="17">pthread_mutex_unlock<pos:position pos:line="115" pos:column="37"/></name> <argument_list pos:line="115" pos:column="38">(<argument><expr><operator pos:line="115" pos:column="39">&amp;<pos:position pos:line="115" pos:column="44"/></operator><name pos:line="115" pos:column="40">receive_list_lock<pos:position pos:line="115" pos:column="57"/></name></expr></argument>)<pos:position pos:line="115" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="115" pos:column="59"/></expr_stmt>
	}<pos:position pos:line="116" pos:column="10"/></block></then></if>

	<return pos:line="118" pos:column="9">return <expr><operator pos:line="118" pos:column="16">(<pos:position pos:line="118" pos:column="17"/></operator><literal type="number" pos:line="118" pos:column="17">0<pos:position pos:line="118" pos:column="18"/></literal><operator pos:line="118" pos:column="18">)<pos:position pos:line="118" pos:column="19"/></operator></expr>;<pos:position pos:line="118" pos:column="20"/></return>
}<pos:position pos:line="119" pos:column="2"/></block></function></unit>
