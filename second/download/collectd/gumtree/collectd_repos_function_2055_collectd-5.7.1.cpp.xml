<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_2055_collectd-5.7.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">network_receive<pos:position pos:line="1" pos:column="27"/></name><parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><name pos:line="1" pos:column="28">void<pos:position pos:line="1" pos:column="32"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="33"/></parameter_list> <comment type="block" pos:line="1" pos:column="34">/* {{{ */</comment>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">char<pos:position pos:line="3" pos:column="7"/></name></type> <name><name pos:line="3" pos:column="8">buffer<pos:position pos:line="3" pos:column="14"/></name><index pos:line="3" pos:column="14">[<expr><name pos:line="3" pos:column="15">network_config_packet_size<pos:position pos:line="3" pos:column="41"/></name></expr>]<pos:position pos:line="3" pos:column="42"/></index></name></decl>;<pos:position pos:line="3" pos:column="43"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">int<pos:position pos:line="4" pos:column="6"/></name></type> <name pos:line="4" pos:column="7">buffer_len<pos:position pos:line="4" pos:column="17"/></name></decl>;<pos:position pos:line="4" pos:column="18"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="6" pos:column="3">int<pos:position pos:line="6" pos:column="6"/></name></type> <name pos:line="6" pos:column="7">status<pos:position pos:line="6" pos:column="13"/></name> <init pos:line="6" pos:column="14">= <expr><literal type="number" pos:line="6" pos:column="16">0<pos:position pos:line="6" pos:column="17"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="18"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="8" pos:column="3">receive_list_entry_t<pos:position pos:line="8" pos:column="23"/></name> <modifier pos:line="8" pos:column="24">*<pos:position pos:line="8" pos:column="25"/></modifier></type><name pos:line="8" pos:column="25">private_list_head<pos:position pos:line="8" pos:column="42"/></name></decl>;<pos:position pos:line="8" pos:column="43"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">receive_list_entry_t<pos:position pos:line="9" pos:column="23"/></name> <modifier pos:line="9" pos:column="24">*<pos:position pos:line="9" pos:column="25"/></modifier></type><name pos:line="9" pos:column="25">private_list_tail<pos:position pos:line="9" pos:column="42"/></name></decl>;<pos:position pos:line="9" pos:column="43"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">uint64_t<pos:position pos:line="10" pos:column="11"/></name></type> <name pos:line="10" pos:column="12">private_list_length<pos:position pos:line="10" pos:column="31"/></name></decl>;<pos:position pos:line="10" pos:column="32"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="12" pos:column="3">assert<pos:position pos:line="12" pos:column="9"/></name><argument_list pos:line="12" pos:column="9">(<argument><expr><name pos:line="12" pos:column="10">listen_sockets_num<pos:position pos:line="12" pos:column="28"/></name> <operator pos:line="12" pos:column="29">&gt;<pos:position pos:line="12" pos:column="33"/></operator> <literal type="number" pos:line="12" pos:column="31">0<pos:position pos:line="12" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="34"/></expr_stmt>

  <expr_stmt><expr><name pos:line="14" pos:column="3">private_list_head<pos:position pos:line="14" pos:column="20"/></name> <operator pos:line="14" pos:column="21">=<pos:position pos:line="14" pos:column="22"/></operator> <name pos:line="14" pos:column="23">NULL<pos:position pos:line="14" pos:column="27"/></name></expr>;<pos:position pos:line="14" pos:column="28"/></expr_stmt>
  <expr_stmt><expr><name pos:line="15" pos:column="3">private_list_tail<pos:position pos:line="15" pos:column="20"/></name> <operator pos:line="15" pos:column="21">=<pos:position pos:line="15" pos:column="22"/></operator> <name pos:line="15" pos:column="23">NULL<pos:position pos:line="15" pos:column="27"/></name></expr>;<pos:position pos:line="15" pos:column="28"/></expr_stmt>
  <expr_stmt><expr><name pos:line="16" pos:column="3">private_list_length<pos:position pos:line="16" pos:column="22"/></name> <operator pos:line="16" pos:column="23">=<pos:position pos:line="16" pos:column="24"/></operator> <literal type="number" pos:line="16" pos:column="25">0<pos:position pos:line="16" pos:column="26"/></literal></expr>;<pos:position pos:line="16" pos:column="27"/></expr_stmt>

  <while pos:line="18" pos:column="3">while <condition pos:line="18" pos:column="9">(<expr><name pos:line="18" pos:column="10">listen_loop<pos:position pos:line="18" pos:column="21"/></name> <operator pos:line="18" pos:column="22">==<pos:position pos:line="18" pos:column="24"/></operator> <literal type="number" pos:line="18" pos:column="25">0<pos:position pos:line="18" pos:column="26"/></literal></expr>)<pos:position pos:line="18" pos:column="27"/></condition> <block pos:line="18" pos:column="28">{
    <expr_stmt><expr><name pos:line="19" pos:column="5">status<pos:position pos:line="19" pos:column="11"/></name> <operator pos:line="19" pos:column="12">=<pos:position pos:line="19" pos:column="13"/></operator> <call><name pos:line="19" pos:column="14">poll<pos:position pos:line="19" pos:column="18"/></name><argument_list pos:line="19" pos:column="18">(<argument><expr><name pos:line="19" pos:column="19">listen_sockets_pollfd<pos:position pos:line="19" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="42">listen_sockets_num<pos:position pos:line="19" pos:column="60"/></name></expr></argument>, <argument><expr><operator pos:line="19" pos:column="62">-<pos:position pos:line="19" pos:column="63"/></operator><literal type="number" pos:line="19" pos:column="63">1<pos:position pos:line="19" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="66"/></expr_stmt>
    <if pos:line="20" pos:column="5">if <condition pos:line="20" pos:column="8">(<expr><name pos:line="20" pos:column="9">status<pos:position pos:line="20" pos:column="15"/></name> <operator pos:line="20" pos:column="16">&lt;=<pos:position pos:line="20" pos:column="21"/></operator> <literal type="number" pos:line="20" pos:column="19">0<pos:position pos:line="20" pos:column="20"/></literal></expr>)<pos:position pos:line="20" pos:column="21"/></condition><then pos:line="20" pos:column="21"> <block pos:line="20" pos:column="22">{
      <decl_stmt><decl><type><name pos:line="21" pos:column="7">char<pos:position pos:line="21" pos:column="11"/></name></type> <name><name pos:line="21" pos:column="12">errbuf<pos:position pos:line="21" pos:column="18"/></name><index pos:line="21" pos:column="18">[<expr><literal type="number" pos:line="21" pos:column="19">1024<pos:position pos:line="21" pos:column="23"/></literal></expr>]<pos:position pos:line="21" pos:column="24"/></index></name></decl>;<pos:position pos:line="21" pos:column="25"/></decl_stmt>
      <if pos:line="22" pos:column="7">if <condition pos:line="22" pos:column="10">(<expr><name pos:line="22" pos:column="11">errno<pos:position pos:line="22" pos:column="16"/></name> <operator pos:line="22" pos:column="17">==<pos:position pos:line="22" pos:column="19"/></operator> <name pos:line="22" pos:column="20">EINTR<pos:position pos:line="22" pos:column="25"/></name></expr>)<pos:position pos:line="22" pos:column="26"/></condition><then pos:line="22" pos:column="26">
        <block type="pseudo"><continue pos:line="23" pos:column="9">continue;<pos:position pos:line="23" pos:column="18"/></continue></block></then></if>
      <expr_stmt><expr><call><name pos:line="24" pos:column="7">ERROR<pos:position pos:line="24" pos:column="12"/></name><argument_list pos:line="24" pos:column="12">(<argument><expr><literal type="string" pos:line="24" pos:column="13">"network plugin: poll(2) failed: %s"<pos:position pos:line="24" pos:column="49"/></literal></expr></argument>,
            <argument><expr><call><name pos:line="25" pos:column="13">sstrerror<pos:position pos:line="25" pos:column="22"/></name><argument_list pos:line="25" pos:column="22">(<argument><expr><name pos:line="25" pos:column="23">errno<pos:position pos:line="25" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="30">errbuf<pos:position pos:line="25" pos:column="36"/></name></expr></argument>, <argument><expr><sizeof pos:line="25" pos:column="38">sizeof<argument_list pos:line="25" pos:column="44">(<argument><expr><name pos:line="25" pos:column="45">errbuf<pos:position pos:line="25" pos:column="51"/></name></expr></argument>)<pos:position pos:line="25" pos:column="52"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="25" pos:column="53"/></argument_list></call></expr></argument>)<pos:position pos:line="25" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="55"/></expr_stmt>
      <break pos:line="26" pos:column="7">break;<pos:position pos:line="26" pos:column="13"/></break>
    }<pos:position pos:line="27" pos:column="6"/></block></then></if>

    <for pos:line="29" pos:column="5">for <control pos:line="29" pos:column="9">(<init><decl><type><name pos:line="29" pos:column="10">size_t<pos:position pos:line="29" pos:column="16"/></name></type> <name pos:line="29" pos:column="17">i<pos:position pos:line="29" pos:column="18"/></name> <init pos:line="29" pos:column="19">= <expr><literal type="number" pos:line="29" pos:column="21">0<pos:position pos:line="29" pos:column="22"/></literal></expr></init></decl>;<pos:position pos:line="29" pos:column="23"/></init> <condition><expr><operator pos:line="29" pos:column="24">(<pos:position pos:line="29" pos:column="25"/></operator><name pos:line="29" pos:column="25">i<pos:position pos:line="29" pos:column="26"/></name> <operator pos:line="29" pos:column="27">&lt;<pos:position pos:line="29" pos:column="31"/></operator> <name pos:line="29" pos:column="29">listen_sockets_num<pos:position pos:line="29" pos:column="47"/></name><operator pos:line="29" pos:column="47">)<pos:position pos:line="29" pos:column="48"/></operator> <operator pos:line="29" pos:column="49">&amp;&amp;<pos:position pos:line="29" pos:column="59"/></operator> <operator pos:line="29" pos:column="52">(<pos:position pos:line="29" pos:column="53"/></operator><name pos:line="29" pos:column="53">status<pos:position pos:line="29" pos:column="59"/></name> <operator pos:line="29" pos:column="60">&gt;<pos:position pos:line="29" pos:column="64"/></operator> <literal type="number" pos:line="29" pos:column="62">0<pos:position pos:line="29" pos:column="63"/></literal><operator pos:line="29" pos:column="63">)<pos:position pos:line="29" pos:column="64"/></operator></expr>;<pos:position pos:line="29" pos:column="65"/></condition> <incr><expr><name pos:line="29" pos:column="66">i<pos:position pos:line="29" pos:column="67"/></name><operator pos:line="29" pos:column="67">++<pos:position pos:line="29" pos:column="69"/></operator></expr></incr>)<pos:position pos:line="29" pos:column="70"/></control> <block pos:line="29" pos:column="71">{
      <decl_stmt><decl><type><name pos:line="30" pos:column="7">receive_list_entry_t<pos:position pos:line="30" pos:column="27"/></name> <modifier pos:line="30" pos:column="28">*<pos:position pos:line="30" pos:column="29"/></modifier></type><name pos:line="30" pos:column="29">ent<pos:position pos:line="30" pos:column="32"/></name></decl>;<pos:position pos:line="30" pos:column="33"/></decl_stmt>

      <if pos:line="32" pos:column="7">if <condition pos:line="32" pos:column="10">(<expr><operator pos:line="32" pos:column="11">(<pos:position pos:line="32" pos:column="12"/></operator><name><name pos:line="32" pos:column="12">listen_sockets_pollfd<pos:position pos:line="32" pos:column="33"/></name><index pos:line="32" pos:column="33">[<expr><name pos:line="32" pos:column="34">i<pos:position pos:line="32" pos:column="35"/></name></expr>]<pos:position pos:line="32" pos:column="36"/></index></name><operator pos:line="32" pos:column="36">.<pos:position pos:line="32" pos:column="37"/></operator><name pos:line="32" pos:column="37">revents<pos:position pos:line="32" pos:column="44"/></name> <operator pos:line="32" pos:column="45">&amp;<pos:position pos:line="32" pos:column="50"/></operator> <operator pos:line="32" pos:column="47">(<pos:position pos:line="32" pos:column="48"/></operator><name pos:line="32" pos:column="48">POLLIN<pos:position pos:line="32" pos:column="54"/></name> <operator pos:line="32" pos:column="55">|<pos:position pos:line="32" pos:column="56"/></operator> <name pos:line="32" pos:column="57">POLLPRI<pos:position pos:line="32" pos:column="64"/></name><operator pos:line="32" pos:column="64">)<pos:position pos:line="32" pos:column="65"/></operator><operator pos:line="32" pos:column="65">)<pos:position pos:line="32" pos:column="66"/></operator> <operator pos:line="32" pos:column="67">==<pos:position pos:line="32" pos:column="69"/></operator> <literal type="number" pos:line="32" pos:column="70">0<pos:position pos:line="32" pos:column="71"/></literal></expr>)<pos:position pos:line="32" pos:column="72"/></condition><then pos:line="32" pos:column="72">
        <block type="pseudo"><continue pos:line="33" pos:column="9">continue;<pos:position pos:line="33" pos:column="18"/></continue></block></then></if>
      <expr_stmt><expr><name pos:line="34" pos:column="7">status<pos:position pos:line="34" pos:column="13"/></name><operator pos:line="34" pos:column="13">--<pos:position pos:line="34" pos:column="15"/></operator></expr>;<pos:position pos:line="34" pos:column="16"/></expr_stmt>

      <expr_stmt><expr><name pos:line="36" pos:column="7">buffer_len<pos:position pos:line="36" pos:column="17"/></name> <operator pos:line="36" pos:column="18">=<pos:position pos:line="36" pos:column="19"/></operator> <call><name pos:line="36" pos:column="20">recv<pos:position pos:line="36" pos:column="24"/></name><argument_list pos:line="36" pos:column="24">(<argument><expr><name><name pos:line="36" pos:column="25">listen_sockets_pollfd<pos:position pos:line="36" pos:column="46"/></name><index pos:line="36" pos:column="46">[<expr><name pos:line="36" pos:column="47">i<pos:position pos:line="36" pos:column="48"/></name></expr>]<pos:position pos:line="36" pos:column="49"/></index></name><operator pos:line="36" pos:column="49">.<pos:position pos:line="36" pos:column="50"/></operator><name pos:line="36" pos:column="50">fd<pos:position pos:line="36" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="54">buffer<pos:position pos:line="36" pos:column="60"/></name></expr></argument>, <argument><expr><sizeof pos:line="36" pos:column="62">sizeof<argument_list pos:line="36" pos:column="68">(<argument><expr><name pos:line="36" pos:column="69">buffer<pos:position pos:line="36" pos:column="75"/></name></expr></argument>)<pos:position pos:line="36" pos:column="76"/></argument_list></sizeof></expr></argument>,
                        <argument><expr><literal type="number" pos:line="37" pos:column="25">0<pos:position pos:line="37" pos:column="26"/></literal></expr></argument> <comment type="block" pos:line="37" pos:column="27">/* no flags */</comment>)<pos:position pos:line="37" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="43"/></expr_stmt>
      <if pos:line="38" pos:column="7">if <condition pos:line="38" pos:column="10">(<expr><name pos:line="38" pos:column="11">buffer_len<pos:position pos:line="38" pos:column="21"/></name> <operator pos:line="38" pos:column="22">&lt;<pos:position pos:line="38" pos:column="26"/></operator> <literal type="number" pos:line="38" pos:column="24">0<pos:position pos:line="38" pos:column="25"/></literal></expr>)<pos:position pos:line="38" pos:column="26"/></condition><then pos:line="38" pos:column="26"> <block pos:line="38" pos:column="27">{
        <decl_stmt><decl><type><name pos:line="39" pos:column="9">char<pos:position pos:line="39" pos:column="13"/></name></type> <name><name pos:line="39" pos:column="14">errbuf<pos:position pos:line="39" pos:column="20"/></name><index pos:line="39" pos:column="20">[<expr><literal type="number" pos:line="39" pos:column="21">1024<pos:position pos:line="39" pos:column="25"/></literal></expr>]<pos:position pos:line="39" pos:column="26"/></index></name></decl>;<pos:position pos:line="39" pos:column="27"/></decl_stmt>
        <expr_stmt><expr><name pos:line="40" pos:column="9">status<pos:position pos:line="40" pos:column="15"/></name> <operator pos:line="40" pos:column="16">=<pos:position pos:line="40" pos:column="17"/></operator> <ternary><condition><expr><operator pos:line="40" pos:column="18">(<pos:position pos:line="40" pos:column="19"/></operator><name pos:line="40" pos:column="19">errno<pos:position pos:line="40" pos:column="24"/></name> <operator pos:line="40" pos:column="25">!=<pos:position pos:line="40" pos:column="27"/></operator> <literal type="number" pos:line="40" pos:column="28">0<pos:position pos:line="40" pos:column="29"/></literal><operator pos:line="40" pos:column="29">)<pos:position pos:line="40" pos:column="30"/></operator></expr> ?<pos:position pos:line="40" pos:column="32"/></condition><then pos:line="40" pos:column="32"> <expr><name pos:line="40" pos:column="33">errno<pos:position pos:line="40" pos:column="38"/></name></expr> <pos:position pos:line="40" pos:column="39"/></then><else pos:line="40" pos:column="39">: <expr><operator pos:line="40" pos:column="41">-<pos:position pos:line="40" pos:column="42"/></operator><literal type="number" pos:line="40" pos:column="42">1<pos:position pos:line="40" pos:column="43"/></literal></expr></else></ternary></expr>;<pos:position pos:line="40" pos:column="44"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="41" pos:column="9">ERROR<pos:position pos:line="41" pos:column="14"/></name><argument_list pos:line="41" pos:column="14">(<argument><expr><literal type="string" pos:line="41" pos:column="15">"network plugin: recv(2) failed: %s"<pos:position pos:line="41" pos:column="51"/></literal></expr></argument>,
              <argument><expr><call><name pos:line="42" pos:column="15">sstrerror<pos:position pos:line="42" pos:column="24"/></name><argument_list pos:line="42" pos:column="24">(<argument><expr><name pos:line="42" pos:column="25">errno<pos:position pos:line="42" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="32">errbuf<pos:position pos:line="42" pos:column="38"/></name></expr></argument>, <argument><expr><sizeof pos:line="42" pos:column="40">sizeof<argument_list pos:line="42" pos:column="46">(<argument><expr><name pos:line="42" pos:column="47">errbuf<pos:position pos:line="42" pos:column="53"/></name></expr></argument>)<pos:position pos:line="42" pos:column="54"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="42" pos:column="55"/></argument_list></call></expr></argument>)<pos:position pos:line="42" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="57"/></expr_stmt>
        <break pos:line="43" pos:column="9">break;<pos:position pos:line="43" pos:column="15"/></break>
      }<pos:position pos:line="44" pos:column="8"/></block></then></if>

      <expr_stmt><expr><name pos:line="46" pos:column="7">stats_octets_rx<pos:position pos:line="46" pos:column="22"/></name> <operator pos:line="46" pos:column="23">+=<pos:position pos:line="46" pos:column="25"/></operator> <operator pos:line="46" pos:column="26">(<pos:position pos:line="46" pos:column="27"/></operator><operator pos:line="46" pos:column="27">(<pos:position pos:line="46" pos:column="28"/></operator><name pos:line="46" pos:column="28">uint64_t<pos:position pos:line="46" pos:column="36"/></name><operator pos:line="46" pos:column="36">)<pos:position pos:line="46" pos:column="37"/></operator><name pos:line="46" pos:column="37">buffer_len<pos:position pos:line="46" pos:column="47"/></name><operator pos:line="46" pos:column="47">)<pos:position pos:line="46" pos:column="48"/></operator></expr>;<pos:position pos:line="46" pos:column="49"/></expr_stmt>
      <expr_stmt><expr><name pos:line="47" pos:column="7">stats_packets_rx<pos:position pos:line="47" pos:column="23"/></name><operator pos:line="47" pos:column="23">++<pos:position pos:line="47" pos:column="25"/></operator></expr>;<pos:position pos:line="47" pos:column="26"/></expr_stmt>

      <comment type="block" pos:line="49" pos:column="7">/* TODO: Possible performance enhancement: Do not free
       * these entries in the dispatch thread but put them in
       * another list, so we don't have to allocate more and
       * more of these structures. */</comment>
      <expr_stmt><expr><name pos:line="53" pos:column="7">ent<pos:position pos:line="53" pos:column="10"/></name> <operator pos:line="53" pos:column="11">=<pos:position pos:line="53" pos:column="12"/></operator> <call><name pos:line="53" pos:column="13">calloc<pos:position pos:line="53" pos:column="19"/></name><argument_list pos:line="53" pos:column="19">(<argument><expr><literal type="number" pos:line="53" pos:column="20">1<pos:position pos:line="53" pos:column="21"/></literal></expr></argument>, <argument><expr><sizeof pos:line="53" pos:column="23">sizeof<argument_list pos:line="53" pos:column="29">(<argument><expr><operator pos:line="53" pos:column="30">*<pos:position pos:line="53" pos:column="31"/></operator><name pos:line="53" pos:column="31">ent<pos:position pos:line="53" pos:column="34"/></name></expr></argument>)<pos:position pos:line="53" pos:column="35"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="53" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="37"/></expr_stmt>
      <if pos:line="54" pos:column="7">if <condition pos:line="54" pos:column="10">(<expr><name pos:line="54" pos:column="11">ent<pos:position pos:line="54" pos:column="14"/></name> <operator pos:line="54" pos:column="15">==<pos:position pos:line="54" pos:column="17"/></operator> <name pos:line="54" pos:column="18">NULL<pos:position pos:line="54" pos:column="22"/></name></expr>)<pos:position pos:line="54" pos:column="23"/></condition><then pos:line="54" pos:column="23"> <block pos:line="54" pos:column="24">{
        <expr_stmt><expr><call><name pos:line="55" pos:column="9">ERROR<pos:position pos:line="55" pos:column="14"/></name><argument_list pos:line="55" pos:column="14">(<argument><expr><literal type="string" pos:line="55" pos:column="15">"network plugin: calloc failed."<pos:position pos:line="55" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="55" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="49"/></expr_stmt>
        <expr_stmt><expr><name pos:line="56" pos:column="9">status<pos:position pos:line="56" pos:column="15"/></name> <operator pos:line="56" pos:column="16">=<pos:position pos:line="56" pos:column="17"/></operator> <name pos:line="56" pos:column="18">ENOMEM<pos:position pos:line="56" pos:column="24"/></name></expr>;<pos:position pos:line="56" pos:column="25"/></expr_stmt>
        <break pos:line="57" pos:column="9">break;<pos:position pos:line="57" pos:column="15"/></break>
      }<pos:position pos:line="58" pos:column="8"/></block></then></if>

      <expr_stmt><expr><name><name pos:line="60" pos:column="7">ent<pos:position pos:line="60" pos:column="10"/></name><operator pos:line="60" pos:column="10">-&gt;<pos:position pos:line="60" pos:column="15"/></operator><name pos:line="60" pos:column="12">data<pos:position pos:line="60" pos:column="16"/></name></name> <operator pos:line="60" pos:column="17">=<pos:position pos:line="60" pos:column="18"/></operator> <call><name pos:line="60" pos:column="19">malloc<pos:position pos:line="60" pos:column="25"/></name><argument_list pos:line="60" pos:column="25">(<argument><expr><name pos:line="60" pos:column="26">network_config_packet_size<pos:position pos:line="60" pos:column="52"/></name></expr></argument>)<pos:position pos:line="60" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="54"/></expr_stmt>
      <if pos:line="61" pos:column="7">if <condition pos:line="61" pos:column="10">(<expr><name><name pos:line="61" pos:column="11">ent<pos:position pos:line="61" pos:column="14"/></name><operator pos:line="61" pos:column="14">-&gt;<pos:position pos:line="61" pos:column="19"/></operator><name pos:line="61" pos:column="16">data<pos:position pos:line="61" pos:column="20"/></name></name> <operator pos:line="61" pos:column="21">==<pos:position pos:line="61" pos:column="23"/></operator> <name pos:line="61" pos:column="24">NULL<pos:position pos:line="61" pos:column="28"/></name></expr>)<pos:position pos:line="61" pos:column="29"/></condition><then pos:line="61" pos:column="29"> <block pos:line="61" pos:column="30">{
        <expr_stmt><expr><call><name pos:line="62" pos:column="9">sfree<pos:position pos:line="62" pos:column="14"/></name><argument_list pos:line="62" pos:column="14">(<argument><expr><name pos:line="62" pos:column="15">ent<pos:position pos:line="62" pos:column="18"/></name></expr></argument>)<pos:position pos:line="62" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="20"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="63" pos:column="9">ERROR<pos:position pos:line="63" pos:column="14"/></name><argument_list pos:line="63" pos:column="14">(<argument><expr><literal type="string" pos:line="63" pos:column="15">"network plugin: malloc failed."<pos:position pos:line="63" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="63" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="49"/></expr_stmt>
        <expr_stmt><expr><name pos:line="64" pos:column="9">status<pos:position pos:line="64" pos:column="15"/></name> <operator pos:line="64" pos:column="16">=<pos:position pos:line="64" pos:column="17"/></operator> <name pos:line="64" pos:column="18">ENOMEM<pos:position pos:line="64" pos:column="24"/></name></expr>;<pos:position pos:line="64" pos:column="25"/></expr_stmt>
        <break pos:line="65" pos:column="9">break;<pos:position pos:line="65" pos:column="15"/></break>
      }<pos:position pos:line="66" pos:column="8"/></block></then></if>
      <expr_stmt><expr><name><name pos:line="67" pos:column="7">ent<pos:position pos:line="67" pos:column="10"/></name><operator pos:line="67" pos:column="10">-&gt;<pos:position pos:line="67" pos:column="15"/></operator><name pos:line="67" pos:column="12">fd<pos:position pos:line="67" pos:column="14"/></name></name> <operator pos:line="67" pos:column="15">=<pos:position pos:line="67" pos:column="16"/></operator> <name><name pos:line="67" pos:column="17">listen_sockets_pollfd<pos:position pos:line="67" pos:column="38"/></name><index pos:line="67" pos:column="38">[<expr><name pos:line="67" pos:column="39">i<pos:position pos:line="67" pos:column="40"/></name></expr>]<pos:position pos:line="67" pos:column="41"/></index></name><operator pos:line="67" pos:column="41">.<pos:position pos:line="67" pos:column="42"/></operator><name pos:line="67" pos:column="42">fd<pos:position pos:line="67" pos:column="44"/></name></expr>;<pos:position pos:line="67" pos:column="45"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="68" pos:column="7">ent<pos:position pos:line="68" pos:column="10"/></name><operator pos:line="68" pos:column="10">-&gt;<pos:position pos:line="68" pos:column="15"/></operator><name pos:line="68" pos:column="12">next<pos:position pos:line="68" pos:column="16"/></name></name> <operator pos:line="68" pos:column="17">=<pos:position pos:line="68" pos:column="18"/></operator> <name pos:line="68" pos:column="19">NULL<pos:position pos:line="68" pos:column="23"/></name></expr>;<pos:position pos:line="68" pos:column="24"/></expr_stmt>

      <expr_stmt><expr><call><name pos:line="70" pos:column="7">memcpy<pos:position pos:line="70" pos:column="13"/></name><argument_list pos:line="70" pos:column="13">(<argument><expr><name><name pos:line="70" pos:column="14">ent<pos:position pos:line="70" pos:column="17"/></name><operator pos:line="70" pos:column="17">-&gt;<pos:position pos:line="70" pos:column="22"/></operator><name pos:line="70" pos:column="19">data<pos:position pos:line="70" pos:column="23"/></name></name></expr></argument>, <argument><expr><name pos:line="70" pos:column="25">buffer<pos:position pos:line="70" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="70" pos:column="33">buffer_len<pos:position pos:line="70" pos:column="43"/></name></expr></argument>)<pos:position pos:line="70" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="45"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="71" pos:column="7">ent<pos:position pos:line="71" pos:column="10"/></name><operator pos:line="71" pos:column="10">-&gt;<pos:position pos:line="71" pos:column="15"/></operator><name pos:line="71" pos:column="12">data_len<pos:position pos:line="71" pos:column="20"/></name></name> <operator pos:line="71" pos:column="21">=<pos:position pos:line="71" pos:column="22"/></operator> <name pos:line="71" pos:column="23">buffer_len<pos:position pos:line="71" pos:column="33"/></name></expr>;<pos:position pos:line="71" pos:column="34"/></expr_stmt>

      <if pos:line="73" pos:column="7">if <condition pos:line="73" pos:column="10">(<expr><name pos:line="73" pos:column="11">private_list_head<pos:position pos:line="73" pos:column="28"/></name> <operator pos:line="73" pos:column="29">==<pos:position pos:line="73" pos:column="31"/></operator> <name pos:line="73" pos:column="32">NULL<pos:position pos:line="73" pos:column="36"/></name></expr>)<pos:position pos:line="73" pos:column="37"/></condition><then pos:line="73" pos:column="37">
        <block type="pseudo"><expr_stmt><expr><name pos:line="74" pos:column="9">private_list_head<pos:position pos:line="74" pos:column="26"/></name> <operator pos:line="74" pos:column="27">=<pos:position pos:line="74" pos:column="28"/></operator> <name pos:line="74" pos:column="29">ent<pos:position pos:line="74" pos:column="32"/></name></expr>;<pos:position pos:line="74" pos:column="33"/></expr_stmt></block></then>
      <else pos:line="75" pos:column="7">else
        <block type="pseudo"><expr_stmt><expr><name><name pos:line="76" pos:column="9">private_list_tail<pos:position pos:line="76" pos:column="26"/></name><operator pos:line="76" pos:column="26">-&gt;<pos:position pos:line="76" pos:column="31"/></operator><name pos:line="76" pos:column="28">next<pos:position pos:line="76" pos:column="32"/></name></name> <operator pos:line="76" pos:column="33">=<pos:position pos:line="76" pos:column="34"/></operator> <name pos:line="76" pos:column="35">ent<pos:position pos:line="76" pos:column="38"/></name></expr>;<pos:position pos:line="76" pos:column="39"/></expr_stmt></block></else></if>
      <expr_stmt><expr><name pos:line="77" pos:column="7">private_list_tail<pos:position pos:line="77" pos:column="24"/></name> <operator pos:line="77" pos:column="25">=<pos:position pos:line="77" pos:column="26"/></operator> <name pos:line="77" pos:column="27">ent<pos:position pos:line="77" pos:column="30"/></name></expr>;<pos:position pos:line="77" pos:column="31"/></expr_stmt>
      <expr_stmt><expr><name pos:line="78" pos:column="7">private_list_length<pos:position pos:line="78" pos:column="26"/></name><operator pos:line="78" pos:column="26">++<pos:position pos:line="78" pos:column="28"/></operator></expr>;<pos:position pos:line="78" pos:column="29"/></expr_stmt>

      <comment type="block" pos:line="80" pos:column="7">/* Do not block here. Blocking here has led to
       * insufficient performance in the past. */</comment>
      <if pos:line="82" pos:column="7">if <condition pos:line="82" pos:column="10">(<expr><call><name pos:line="82" pos:column="11">pthread_mutex_trylock<pos:position pos:line="82" pos:column="32"/></name><argument_list pos:line="82" pos:column="32">(<argument><expr><operator pos:line="82" pos:column="33">&amp;<pos:position pos:line="82" pos:column="38"/></operator><name pos:line="82" pos:column="34">receive_list_lock<pos:position pos:line="82" pos:column="51"/></name></expr></argument>)<pos:position pos:line="82" pos:column="52"/></argument_list></call> <operator pos:line="82" pos:column="53">==<pos:position pos:line="82" pos:column="55"/></operator> <literal type="number" pos:line="82" pos:column="56">0<pos:position pos:line="82" pos:column="57"/></literal></expr>)<pos:position pos:line="82" pos:column="58"/></condition><then pos:line="82" pos:column="58"> <block pos:line="82" pos:column="59">{
        <expr_stmt><expr><call><name pos:line="83" pos:column="9">assert<pos:position pos:line="83" pos:column="15"/></name><argument_list pos:line="83" pos:column="15">(<argument><expr><operator pos:line="83" pos:column="16">(<pos:position pos:line="83" pos:column="17"/></operator><operator pos:line="83" pos:column="17">(<pos:position pos:line="83" pos:column="18"/></operator><name pos:line="83" pos:column="18">receive_list_head<pos:position pos:line="83" pos:column="35"/></name> <operator pos:line="83" pos:column="36">==<pos:position pos:line="83" pos:column="38"/></operator> <name pos:line="83" pos:column="39">NULL<pos:position pos:line="83" pos:column="43"/></name><operator pos:line="83" pos:column="43">)<pos:position pos:line="83" pos:column="44"/></operator> <operator pos:line="83" pos:column="45">&amp;&amp;<pos:position pos:line="83" pos:column="55"/></operator> <operator pos:line="83" pos:column="48">(<pos:position pos:line="83" pos:column="49"/></operator><name pos:line="83" pos:column="49">receive_list_length<pos:position pos:line="83" pos:column="68"/></name> <operator pos:line="83" pos:column="69">==<pos:position pos:line="83" pos:column="71"/></operator> <literal type="number" pos:line="83" pos:column="72">0<pos:position pos:line="83" pos:column="73"/></literal><operator pos:line="83" pos:column="73">)<pos:position pos:line="83" pos:column="74"/></operator><operator pos:line="83" pos:column="74">)<pos:position pos:line="83" pos:column="75"/></operator> <operator pos:line="83" pos:column="76">||<pos:position pos:line="83" pos:column="78"/></operator>
               <operator pos:line="84" pos:column="16">(<pos:position pos:line="84" pos:column="17"/></operator><operator pos:line="84" pos:column="17">(<pos:position pos:line="84" pos:column="18"/></operator><name pos:line="84" pos:column="18">receive_list_head<pos:position pos:line="84" pos:column="35"/></name> <operator pos:line="84" pos:column="36">!=<pos:position pos:line="84" pos:column="38"/></operator> <name pos:line="84" pos:column="39">NULL<pos:position pos:line="84" pos:column="43"/></name><operator pos:line="84" pos:column="43">)<pos:position pos:line="84" pos:column="44"/></operator> <operator pos:line="84" pos:column="45">&amp;&amp;<pos:position pos:line="84" pos:column="55"/></operator> <operator pos:line="84" pos:column="48">(<pos:position pos:line="84" pos:column="49"/></operator><name pos:line="84" pos:column="49">receive_list_length<pos:position pos:line="84" pos:column="68"/></name> <operator pos:line="84" pos:column="69">!=<pos:position pos:line="84" pos:column="71"/></operator> <literal type="number" pos:line="84" pos:column="72">0<pos:position pos:line="84" pos:column="73"/></literal><operator pos:line="84" pos:column="73">)<pos:position pos:line="84" pos:column="74"/></operator><operator pos:line="84" pos:column="74">)<pos:position pos:line="84" pos:column="75"/></operator></expr></argument>)<pos:position pos:line="84" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="77"/></expr_stmt>

        <if pos:line="86" pos:column="9">if <condition pos:line="86" pos:column="12">(<expr><name pos:line="86" pos:column="13">receive_list_head<pos:position pos:line="86" pos:column="30"/></name> <operator pos:line="86" pos:column="31">==<pos:position pos:line="86" pos:column="33"/></operator> <name pos:line="86" pos:column="34">NULL<pos:position pos:line="86" pos:column="38"/></name></expr>)<pos:position pos:line="86" pos:column="39"/></condition><then pos:line="86" pos:column="39">
          <block type="pseudo"><expr_stmt><expr><name pos:line="87" pos:column="11">receive_list_head<pos:position pos:line="87" pos:column="28"/></name> <operator pos:line="87" pos:column="29">=<pos:position pos:line="87" pos:column="30"/></operator> <name pos:line="87" pos:column="31">private_list_head<pos:position pos:line="87" pos:column="48"/></name></expr>;<pos:position pos:line="87" pos:column="49"/></expr_stmt></block></then>
        <else pos:line="88" pos:column="9">else
          <block type="pseudo"><expr_stmt><expr><name><name pos:line="89" pos:column="11">receive_list_tail<pos:position pos:line="89" pos:column="28"/></name><operator pos:line="89" pos:column="28">-&gt;<pos:position pos:line="89" pos:column="33"/></operator><name pos:line="89" pos:column="30">next<pos:position pos:line="89" pos:column="34"/></name></name> <operator pos:line="89" pos:column="35">=<pos:position pos:line="89" pos:column="36"/></operator> <name pos:line="89" pos:column="37">private_list_head<pos:position pos:line="89" pos:column="54"/></name></expr>;<pos:position pos:line="89" pos:column="55"/></expr_stmt></block></else></if>
        <expr_stmt><expr><name pos:line="90" pos:column="9">receive_list_tail<pos:position pos:line="90" pos:column="26"/></name> <operator pos:line="90" pos:column="27">=<pos:position pos:line="90" pos:column="28"/></operator> <name pos:line="90" pos:column="29">private_list_tail<pos:position pos:line="90" pos:column="46"/></name></expr>;<pos:position pos:line="90" pos:column="47"/></expr_stmt>
        <expr_stmt><expr><name pos:line="91" pos:column="9">receive_list_length<pos:position pos:line="91" pos:column="28"/></name> <operator pos:line="91" pos:column="29">+=<pos:position pos:line="91" pos:column="31"/></operator> <name pos:line="91" pos:column="32">private_list_length<pos:position pos:line="91" pos:column="51"/></name></expr>;<pos:position pos:line="91" pos:column="52"/></expr_stmt>

        <expr_stmt><expr><call><name pos:line="93" pos:column="9">pthread_cond_signal<pos:position pos:line="93" pos:column="28"/></name><argument_list pos:line="93" pos:column="28">(<argument><expr><operator pos:line="93" pos:column="29">&amp;<pos:position pos:line="93" pos:column="34"/></operator><name pos:line="93" pos:column="30">receive_list_cond<pos:position pos:line="93" pos:column="47"/></name></expr></argument>)<pos:position pos:line="93" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="49"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="94" pos:column="9">pthread_mutex_unlock<pos:position pos:line="94" pos:column="29"/></name><argument_list pos:line="94" pos:column="29">(<argument><expr><operator pos:line="94" pos:column="30">&amp;<pos:position pos:line="94" pos:column="35"/></operator><name pos:line="94" pos:column="31">receive_list_lock<pos:position pos:line="94" pos:column="48"/></name></expr></argument>)<pos:position pos:line="94" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="94" pos:column="50"/></expr_stmt>

        <expr_stmt><expr><name pos:line="96" pos:column="9">private_list_head<pos:position pos:line="96" pos:column="26"/></name> <operator pos:line="96" pos:column="27">=<pos:position pos:line="96" pos:column="28"/></operator> <name pos:line="96" pos:column="29">NULL<pos:position pos:line="96" pos:column="33"/></name></expr>;<pos:position pos:line="96" pos:column="34"/></expr_stmt>
        <expr_stmt><expr><name pos:line="97" pos:column="9">private_list_tail<pos:position pos:line="97" pos:column="26"/></name> <operator pos:line="97" pos:column="27">=<pos:position pos:line="97" pos:column="28"/></operator> <name pos:line="97" pos:column="29">NULL<pos:position pos:line="97" pos:column="33"/></name></expr>;<pos:position pos:line="97" pos:column="34"/></expr_stmt>
        <expr_stmt><expr><name pos:line="98" pos:column="9">private_list_length<pos:position pos:line="98" pos:column="28"/></name> <operator pos:line="98" pos:column="29">=<pos:position pos:line="98" pos:column="30"/></operator> <literal type="number" pos:line="98" pos:column="31">0<pos:position pos:line="98" pos:column="32"/></literal></expr>;<pos:position pos:line="98" pos:column="33"/></expr_stmt>
      }<pos:position pos:line="99" pos:column="8"/></block></then></if>

      <expr_stmt><expr><name pos:line="101" pos:column="7">status<pos:position pos:line="101" pos:column="13"/></name> <operator pos:line="101" pos:column="14">=<pos:position pos:line="101" pos:column="15"/></operator> <literal type="number" pos:line="101" pos:column="16">0<pos:position pos:line="101" pos:column="17"/></literal></expr>;<pos:position pos:line="101" pos:column="18"/></expr_stmt>
    }<pos:position pos:line="102" pos:column="6"/></block></for> <comment type="block" pos:line="102" pos:column="7">/* for (listen_sockets_pollfd) */</comment>

    <if pos:line="104" pos:column="5">if <condition pos:line="104" pos:column="8">(<expr><name pos:line="104" pos:column="9">status<pos:position pos:line="104" pos:column="15"/></name> <operator pos:line="104" pos:column="16">!=<pos:position pos:line="104" pos:column="18"/></operator> <literal type="number" pos:line="104" pos:column="19">0<pos:position pos:line="104" pos:column="20"/></literal></expr>)<pos:position pos:line="104" pos:column="21"/></condition><then pos:line="104" pos:column="21">
      <block type="pseudo"><break pos:line="105" pos:column="7">break;<pos:position pos:line="105" pos:column="13"/></break></block></then></if>
  }<pos:position pos:line="106" pos:column="4"/></block></while> <comment type="block" pos:line="106" pos:column="5">/* while (listen_loop == 0) */</comment>

  <comment type="block" pos:line="108" pos:column="3">/* Make sure everything is dispatched before exiting. */</comment>
  <if pos:line="109" pos:column="3">if <condition pos:line="109" pos:column="6">(<expr><name pos:line="109" pos:column="7">private_list_head<pos:position pos:line="109" pos:column="24"/></name> <operator pos:line="109" pos:column="25">!=<pos:position pos:line="109" pos:column="27"/></operator> <name pos:line="109" pos:column="28">NULL<pos:position pos:line="109" pos:column="32"/></name></expr>)<pos:position pos:line="109" pos:column="33"/></condition><then pos:line="109" pos:column="33"> <block pos:line="109" pos:column="34">{
    <expr_stmt><expr><call><name pos:line="110" pos:column="5">pthread_mutex_lock<pos:position pos:line="110" pos:column="23"/></name><argument_list pos:line="110" pos:column="23">(<argument><expr><operator pos:line="110" pos:column="24">&amp;<pos:position pos:line="110" pos:column="29"/></operator><name pos:line="110" pos:column="25">receive_list_lock<pos:position pos:line="110" pos:column="42"/></name></expr></argument>)<pos:position pos:line="110" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="110" pos:column="44"/></expr_stmt>

    <if pos:line="112" pos:column="5">if <condition pos:line="112" pos:column="8">(<expr><name pos:line="112" pos:column="9">receive_list_head<pos:position pos:line="112" pos:column="26"/></name> <operator pos:line="112" pos:column="27">==<pos:position pos:line="112" pos:column="29"/></operator> <name pos:line="112" pos:column="30">NULL<pos:position pos:line="112" pos:column="34"/></name></expr>)<pos:position pos:line="112" pos:column="35"/></condition><then pos:line="112" pos:column="35">
      <block type="pseudo"><expr_stmt><expr><name pos:line="113" pos:column="7">receive_list_head<pos:position pos:line="113" pos:column="24"/></name> <operator pos:line="113" pos:column="25">=<pos:position pos:line="113" pos:column="26"/></operator> <name pos:line="113" pos:column="27">private_list_head<pos:position pos:line="113" pos:column="44"/></name></expr>;<pos:position pos:line="113" pos:column="45"/></expr_stmt></block></then>
    <else pos:line="114" pos:column="5">else
      <block type="pseudo"><expr_stmt><expr><name><name pos:line="115" pos:column="7">receive_list_tail<pos:position pos:line="115" pos:column="24"/></name><operator pos:line="115" pos:column="24">-&gt;<pos:position pos:line="115" pos:column="29"/></operator><name pos:line="115" pos:column="26">next<pos:position pos:line="115" pos:column="30"/></name></name> <operator pos:line="115" pos:column="31">=<pos:position pos:line="115" pos:column="32"/></operator> <name pos:line="115" pos:column="33">private_list_head<pos:position pos:line="115" pos:column="50"/></name></expr>;<pos:position pos:line="115" pos:column="51"/></expr_stmt></block></else></if>
    <expr_stmt><expr><name pos:line="116" pos:column="5">receive_list_tail<pos:position pos:line="116" pos:column="22"/></name> <operator pos:line="116" pos:column="23">=<pos:position pos:line="116" pos:column="24"/></operator> <name pos:line="116" pos:column="25">private_list_tail<pos:position pos:line="116" pos:column="42"/></name></expr>;<pos:position pos:line="116" pos:column="43"/></expr_stmt>
    <expr_stmt><expr><name pos:line="117" pos:column="5">receive_list_length<pos:position pos:line="117" pos:column="24"/></name> <operator pos:line="117" pos:column="25">+=<pos:position pos:line="117" pos:column="27"/></operator> <name pos:line="117" pos:column="28">private_list_length<pos:position pos:line="117" pos:column="47"/></name></expr>;<pos:position pos:line="117" pos:column="48"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="119" pos:column="5">pthread_cond_signal<pos:position pos:line="119" pos:column="24"/></name><argument_list pos:line="119" pos:column="24">(<argument><expr><operator pos:line="119" pos:column="25">&amp;<pos:position pos:line="119" pos:column="30"/></operator><name pos:line="119" pos:column="26">receive_list_cond<pos:position pos:line="119" pos:column="43"/></name></expr></argument>)<pos:position pos:line="119" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="119" pos:column="45"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="120" pos:column="5">pthread_mutex_unlock<pos:position pos:line="120" pos:column="25"/></name><argument_list pos:line="120" pos:column="25">(<argument><expr><operator pos:line="120" pos:column="26">&amp;<pos:position pos:line="120" pos:column="31"/></operator><name pos:line="120" pos:column="27">receive_list_lock<pos:position pos:line="120" pos:column="44"/></name></expr></argument>)<pos:position pos:line="120" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="120" pos:column="46"/></expr_stmt>
  }<pos:position pos:line="121" pos:column="4"/></block></then></if>

  <return pos:line="123" pos:column="3">return <expr><operator pos:line="123" pos:column="10">(<pos:position pos:line="123" pos:column="11"/></operator><name pos:line="123" pos:column="11">status<pos:position pos:line="123" pos:column="17"/></name><operator pos:line="123" pos:column="17">)<pos:position pos:line="123" pos:column="18"/></operator></expr>;<pos:position pos:line="123" pos:column="19"/></return>
}<pos:position pos:line="124" pos:column="2"/></block></function></unit>
