<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_816_collectd-4.9.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">mbmon_read<pos:position pos:line="1" pos:column="22"/></name> <parameter_list pos:line="1" pos:column="23">(<parameter><decl><type><name pos:line="1" pos:column="24">void<pos:position pos:line="1" pos:column="28"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="29"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">char<pos:position pos:line="3" pos:column="13"/></name></type> <name><name pos:line="3" pos:column="14">buf<pos:position pos:line="3" pos:column="17"/></name><index pos:line="3" pos:column="17">[<expr><literal type="number" pos:line="3" pos:column="18">1024<pos:position pos:line="3" pos:column="22"/></literal></expr>]<pos:position pos:line="3" pos:column="23"/></index></name></decl>;<pos:position pos:line="3" pos:column="24"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">char<pos:position pos:line="4" pos:column="13"/></name> <modifier pos:line="4" pos:column="14">*<pos:position pos:line="4" pos:column="15"/></modifier></type><name pos:line="4" pos:column="15">s<pos:position pos:line="4" pos:column="16"/></name></decl>, <modifier pos:line="4" pos:column="18">*<pos:position pos:line="4" pos:column="19"/></modifier><decl><type ref="prev"/><name pos:line="4" pos:column="19">t<pos:position pos:line="4" pos:column="20"/></name></decl>;<pos:position pos:line="4" pos:column="21"/></decl_stmt>

	<comment type="block" pos:line="6" pos:column="9">/* get data from daemon */</comment>
	<if pos:line="7" pos:column="9">if <condition pos:line="7" pos:column="12">(<expr><call><name pos:line="7" pos:column="13">mbmon_query_daemon<pos:position pos:line="7" pos:column="31"/></name> <argument_list pos:line="7" pos:column="32">(<argument><expr><name pos:line="7" pos:column="33">buf<pos:position pos:line="7" pos:column="36"/></name></expr></argument>, <argument><expr><sizeof pos:line="7" pos:column="38">sizeof <argument_list pos:line="7" pos:column="45">(<argument><expr><name pos:line="7" pos:column="46">buf<pos:position pos:line="7" pos:column="49"/></name></expr></argument>)<pos:position pos:line="7" pos:column="50"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="7" pos:column="51"/></argument_list></call> <operator pos:line="7" pos:column="52">&lt;<pos:position pos:line="7" pos:column="56"/></operator> <literal type="number" pos:line="7" pos:column="54">0<pos:position pos:line="7" pos:column="55"/></literal></expr>)<pos:position pos:line="7" pos:column="56"/></condition><then pos:line="7" pos:column="56">
		<block type="pseudo"><return pos:line="8" pos:column="17">return <expr><operator pos:line="8" pos:column="24">(<pos:position pos:line="8" pos:column="25"/></operator><operator pos:line="8" pos:column="25">-<pos:position pos:line="8" pos:column="26"/></operator><literal type="number" pos:line="8" pos:column="26">1<pos:position pos:line="8" pos:column="27"/></literal><operator pos:line="8" pos:column="27">)<pos:position pos:line="8" pos:column="28"/></operator></expr>;<pos:position pos:line="8" pos:column="29"/></return></block></then></if>

	<expr_stmt><expr><name pos:line="10" pos:column="9">s<pos:position pos:line="10" pos:column="10"/></name> <operator pos:line="10" pos:column="11">=<pos:position pos:line="10" pos:column="12"/></operator> <name pos:line="10" pos:column="13">buf<pos:position pos:line="10" pos:column="16"/></name></expr>;<pos:position pos:line="10" pos:column="17"/></expr_stmt>
	<while pos:line="11" pos:column="9">while <condition pos:line="11" pos:column="15">(<expr><operator pos:line="11" pos:column="16">(<pos:position pos:line="11" pos:column="17"/></operator><name pos:line="11" pos:column="17">t<pos:position pos:line="11" pos:column="18"/></name> <operator pos:line="11" pos:column="19">=<pos:position pos:line="11" pos:column="20"/></operator> <call><name pos:line="11" pos:column="21">strchr<pos:position pos:line="11" pos:column="27"/></name> <argument_list pos:line="11" pos:column="28">(<argument><expr><name pos:line="11" pos:column="29">s<pos:position pos:line="11" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="11" pos:column="32">':'<pos:position pos:line="11" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="36"/></argument_list></call><operator pos:line="11" pos:column="36">)<pos:position pos:line="11" pos:column="37"/></operator> <operator pos:line="11" pos:column="38">!=<pos:position pos:line="11" pos:column="40"/></operator> <name pos:line="11" pos:column="41">NULL<pos:position pos:line="11" pos:column="45"/></name></expr>)<pos:position pos:line="11" pos:column="46"/></condition>
	<block pos:line="12" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="13" pos:column="17">double<pos:position pos:line="13" pos:column="23"/></name></type> <name pos:line="13" pos:column="24">value<pos:position pos:line="13" pos:column="29"/></name></decl>;<pos:position pos:line="13" pos:column="30"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="14" pos:column="17">char<pos:position pos:line="14" pos:column="21"/></name> <modifier pos:line="14" pos:column="22">*<pos:position pos:line="14" pos:column="23"/></modifier></type><name pos:line="14" pos:column="23">nextc<pos:position pos:line="14" pos:column="28"/></name></decl>;<pos:position pos:line="14" pos:column="29"/></decl_stmt>

		<decl_stmt><decl><type><name pos:line="16" pos:column="17">char<pos:position pos:line="16" pos:column="21"/></name> <modifier pos:line="16" pos:column="22">*<pos:position pos:line="16" pos:column="23"/></modifier></type><name pos:line="16" pos:column="23">type<pos:position pos:line="16" pos:column="27"/></name></decl>;<pos:position pos:line="16" pos:column="28"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="17" pos:column="17">char<pos:position pos:line="17" pos:column="21"/></name> <modifier pos:line="17" pos:column="22">*<pos:position pos:line="17" pos:column="23"/></modifier></type><name pos:line="17" pos:column="23">inst<pos:position pos:line="17" pos:column="27"/></name></decl>;<pos:position pos:line="17" pos:column="28"/></decl_stmt>

		<expr_stmt><expr><operator pos:line="19" pos:column="17">*<pos:position pos:line="19" pos:column="18"/></operator><name pos:line="19" pos:column="18">t<pos:position pos:line="19" pos:column="19"/></name><operator pos:line="19" pos:column="19">++<pos:position pos:line="19" pos:column="21"/></operator> <operator pos:line="19" pos:column="22">=<pos:position pos:line="19" pos:column="23"/></operator> <literal type="char" pos:line="19" pos:column="24">'\0'<pos:position pos:line="19" pos:column="28"/></literal></expr>;<pos:position pos:line="19" pos:column="29"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="20" pos:column="17">trim_spaces<pos:position pos:line="20" pos:column="28"/></name> <argument_list pos:line="20" pos:column="29">(<argument><expr><name pos:line="20" pos:column="30">s<pos:position pos:line="20" pos:column="31"/></name></expr></argument>)<pos:position pos:line="20" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="33"/></expr_stmt>

		<expr_stmt><expr><name pos:line="22" pos:column="17">value<pos:position pos:line="22" pos:column="22"/></name> <operator pos:line="22" pos:column="23">=<pos:position pos:line="22" pos:column="24"/></operator> <call><name pos:line="22" pos:column="25">strtod<pos:position pos:line="22" pos:column="31"/></name> <argument_list pos:line="22" pos:column="32">(<argument><expr><name pos:line="22" pos:column="33">t<pos:position pos:line="22" pos:column="34"/></name></expr></argument>, <argument><expr><operator pos:line="22" pos:column="36">&amp;<pos:position pos:line="22" pos:column="41"/></operator><name pos:line="22" pos:column="37">nextc<pos:position pos:line="22" pos:column="42"/></name></expr></argument>)<pos:position pos:line="22" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="44"/></expr_stmt>
		<if pos:line="23" pos:column="17">if <condition pos:line="23" pos:column="20">(<expr><operator pos:line="23" pos:column="21">(<pos:position pos:line="23" pos:column="22"/></operator><operator pos:line="23" pos:column="22">*<pos:position pos:line="23" pos:column="23"/></operator><name pos:line="23" pos:column="23">nextc<pos:position pos:line="23" pos:column="28"/></name> <operator pos:line="23" pos:column="29">!=<pos:position pos:line="23" pos:column="31"/></operator> <literal type="char" pos:line="23" pos:column="32">'\n'<pos:position pos:line="23" pos:column="36"/></literal><operator pos:line="23" pos:column="36">)<pos:position pos:line="23" pos:column="37"/></operator> <operator pos:line="23" pos:column="38">&amp;&amp;<pos:position pos:line="23" pos:column="48"/></operator> <operator pos:line="23" pos:column="41">(<pos:position pos:line="23" pos:column="42"/></operator><operator pos:line="23" pos:column="42">*<pos:position pos:line="23" pos:column="43"/></operator><name pos:line="23" pos:column="43">nextc<pos:position pos:line="23" pos:column="48"/></name> <operator pos:line="23" pos:column="49">!=<pos:position pos:line="23" pos:column="51"/></operator> <literal type="char" pos:line="23" pos:column="52">'\0'<pos:position pos:line="23" pos:column="56"/></literal><operator pos:line="23" pos:column="56">)<pos:position pos:line="23" pos:column="57"/></operator></expr>)<pos:position pos:line="23" pos:column="58"/></condition><then pos:line="23" pos:column="58">
		<block pos:line="24" pos:column="17">{
			<expr_stmt><expr><call><name pos:line="25" pos:column="25">ERROR<pos:position pos:line="25" pos:column="30"/></name> <argument_list pos:line="25" pos:column="31">(<argument><expr><literal type="string" pos:line="25" pos:column="32">"mbmon: value for `%s' contains invalid characters: `%s'"<pos:position pos:line="25" pos:column="89"/></literal></expr></argument>, <argument><expr><name pos:line="25" pos:column="91">s<pos:position pos:line="25" pos:column="92"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="94">t<pos:position pos:line="25" pos:column="95"/></name></expr></argument>)<pos:position pos:line="25" pos:column="96"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="97"/></expr_stmt>
			<break pos:line="26" pos:column="25">break;<pos:position pos:line="26" pos:column="31"/></break>
		}<pos:position pos:line="27" pos:column="18"/></block></then></if>

		<if pos:line="29" pos:column="17">if <condition pos:line="29" pos:column="20">(<expr><call><name pos:line="29" pos:column="21">strncmp<pos:position pos:line="29" pos:column="28"/></name> <argument_list pos:line="29" pos:column="29">(<argument><expr><name pos:line="29" pos:column="30">s<pos:position pos:line="29" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="29" pos:column="33">"TEMP"<pos:position pos:line="29" pos:column="39"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="29" pos:column="41">4<pos:position pos:line="29" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="43"/></argument_list></call> <operator pos:line="29" pos:column="44">==<pos:position pos:line="29" pos:column="46"/></operator> <literal type="number" pos:line="29" pos:column="47">0<pos:position pos:line="29" pos:column="48"/></literal></expr>)<pos:position pos:line="29" pos:column="49"/></condition><then pos:line="29" pos:column="49">
		<block pos:line="30" pos:column="17">{
			<expr_stmt><expr><name pos:line="31" pos:column="25">inst<pos:position pos:line="31" pos:column="29"/></name> <operator pos:line="31" pos:column="30">=<pos:position pos:line="31" pos:column="31"/></operator> <name pos:line="31" pos:column="32">s<pos:position pos:line="31" pos:column="33"/></name> <operator pos:line="31" pos:column="34">+<pos:position pos:line="31" pos:column="35"/></operator> <literal type="number" pos:line="31" pos:column="36">4<pos:position pos:line="31" pos:column="37"/></literal></expr>;<pos:position pos:line="31" pos:column="38"/></expr_stmt>
			<expr_stmt><expr><name pos:line="32" pos:column="25">type<pos:position pos:line="32" pos:column="29"/></name> <operator pos:line="32" pos:column="30">=<pos:position pos:line="32" pos:column="31"/></operator> <literal type="string" pos:line="32" pos:column="32">"temperature"<pos:position pos:line="32" pos:column="45"/></literal></expr>;<pos:position pos:line="32" pos:column="46"/></expr_stmt>
		}<pos:position pos:line="33" pos:column="18"/></block></then>
		<elseif pos:line="34" pos:column="17">else <if pos:line="34" pos:column="22">if <condition pos:line="34" pos:column="25">(<expr><call><name pos:line="34" pos:column="26">strncmp<pos:position pos:line="34" pos:column="33"/></name> <argument_list pos:line="34" pos:column="34">(<argument><expr><name pos:line="34" pos:column="35">s<pos:position pos:line="34" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="34" pos:column="38">"FAN"<pos:position pos:line="34" pos:column="43"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="34" pos:column="45">3<pos:position pos:line="34" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="47"/></argument_list></call> <operator pos:line="34" pos:column="48">==<pos:position pos:line="34" pos:column="50"/></operator> <literal type="number" pos:line="34" pos:column="51">0<pos:position pos:line="34" pos:column="52"/></literal></expr>)<pos:position pos:line="34" pos:column="53"/></condition><then pos:line="34" pos:column="53">
		<block pos:line="35" pos:column="17">{
			<expr_stmt><expr><name pos:line="36" pos:column="25">inst<pos:position pos:line="36" pos:column="29"/></name> <operator pos:line="36" pos:column="30">=<pos:position pos:line="36" pos:column="31"/></operator> <name pos:line="36" pos:column="32">s<pos:position pos:line="36" pos:column="33"/></name> <operator pos:line="36" pos:column="34">+<pos:position pos:line="36" pos:column="35"/></operator> <literal type="number" pos:line="36" pos:column="36">3<pos:position pos:line="36" pos:column="37"/></literal></expr>;<pos:position pos:line="36" pos:column="38"/></expr_stmt>
			<expr_stmt><expr><name pos:line="37" pos:column="25">type<pos:position pos:line="37" pos:column="29"/></name> <operator pos:line="37" pos:column="30">=<pos:position pos:line="37" pos:column="31"/></operator> <literal type="string" pos:line="37" pos:column="32">"fanspeed"<pos:position pos:line="37" pos:column="42"/></literal></expr>;<pos:position pos:line="37" pos:column="43"/></expr_stmt>
		}<pos:position pos:line="38" pos:column="18"/></block></then></if></elseif>
		<elseif pos:line="39" pos:column="17">else <if pos:line="39" pos:column="22">if <condition pos:line="39" pos:column="25">(<expr><call><name pos:line="39" pos:column="26">strncmp<pos:position pos:line="39" pos:column="33"/></name> <argument_list pos:line="39" pos:column="34">(<argument><expr><name pos:line="39" pos:column="35">s<pos:position pos:line="39" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="39" pos:column="38">"V"<pos:position pos:line="39" pos:column="41"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="39" pos:column="43">1<pos:position pos:line="39" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="39" pos:column="45"/></argument_list></call> <operator pos:line="39" pos:column="46">==<pos:position pos:line="39" pos:column="48"/></operator> <literal type="number" pos:line="39" pos:column="49">0<pos:position pos:line="39" pos:column="50"/></literal></expr>)<pos:position pos:line="39" pos:column="51"/></condition><then pos:line="39" pos:column="51">
		<block pos:line="40" pos:column="17">{
			<expr_stmt><expr><name pos:line="41" pos:column="25">inst<pos:position pos:line="41" pos:column="29"/></name> <operator pos:line="41" pos:column="30">=<pos:position pos:line="41" pos:column="31"/></operator> <name pos:line="41" pos:column="32">s<pos:position pos:line="41" pos:column="33"/></name> <operator pos:line="41" pos:column="34">+<pos:position pos:line="41" pos:column="35"/></operator> <literal type="number" pos:line="41" pos:column="36">1<pos:position pos:line="41" pos:column="37"/></literal></expr>;<pos:position pos:line="41" pos:column="38"/></expr_stmt>
			<expr_stmt><expr><name pos:line="42" pos:column="25">type<pos:position pos:line="42" pos:column="29"/></name> <operator pos:line="42" pos:column="30">=<pos:position pos:line="42" pos:column="31"/></operator> <literal type="string" pos:line="42" pos:column="32">"voltage"<pos:position pos:line="42" pos:column="41"/></literal></expr>;<pos:position pos:line="42" pos:column="42"/></expr_stmt>
		}<pos:position pos:line="43" pos:column="18"/></block></then></if></elseif>
		<else pos:line="44" pos:column="17">else
		<block pos:line="45" pos:column="17">{
			<continue pos:line="46" pos:column="25">continue;<pos:position pos:line="46" pos:column="34"/></continue>
		}<pos:position pos:line="47" pos:column="18"/></block></else></if>

		<expr_stmt><expr><call><name pos:line="49" pos:column="17">mbmon_submit<pos:position pos:line="49" pos:column="29"/></name> <argument_list pos:line="49" pos:column="30">(<argument><expr><name pos:line="49" pos:column="31">type<pos:position pos:line="49" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="37">inst<pos:position pos:line="49" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="43">value<pos:position pos:line="49" pos:column="48"/></name></expr></argument>)<pos:position pos:line="49" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="50"/></expr_stmt>

		<if pos:line="51" pos:column="17">if <condition pos:line="51" pos:column="20">(<expr><operator pos:line="51" pos:column="21">*<pos:position pos:line="51" pos:column="22"/></operator><name pos:line="51" pos:column="22">nextc<pos:position pos:line="51" pos:column="27"/></name> <operator pos:line="51" pos:column="28">==<pos:position pos:line="51" pos:column="30"/></operator> <literal type="char" pos:line="51" pos:column="31">'\0'<pos:position pos:line="51" pos:column="35"/></literal></expr>)<pos:position pos:line="51" pos:column="36"/></condition><then pos:line="51" pos:column="36">
			<block type="pseudo"><break pos:line="52" pos:column="25">break;<pos:position pos:line="52" pos:column="31"/></break></block></then></if>

		<expr_stmt><expr><name pos:line="54" pos:column="17">s<pos:position pos:line="54" pos:column="18"/></name> <operator pos:line="54" pos:column="19">=<pos:position pos:line="54" pos:column="20"/></operator> <name pos:line="54" pos:column="21">nextc<pos:position pos:line="54" pos:column="26"/></name> <operator pos:line="54" pos:column="27">+<pos:position pos:line="54" pos:column="28"/></operator> <literal type="number" pos:line="54" pos:column="29">1<pos:position pos:line="54" pos:column="30"/></literal></expr>;<pos:position pos:line="54" pos:column="31"/></expr_stmt>
	}<pos:position pos:line="55" pos:column="10"/></block></while>

	<return pos:line="57" pos:column="9">return <expr><operator pos:line="57" pos:column="16">(<pos:position pos:line="57" pos:column="17"/></operator><literal type="number" pos:line="57" pos:column="17">0<pos:position pos:line="57" pos:column="18"/></literal><operator pos:line="57" pos:column="18">)<pos:position pos:line="57" pos:column="19"/></operator></expr>;<pos:position pos:line="57" pos:column="20"/></return>
}<pos:position pos:line="58" pos:column="2"/></block></function></unit>
