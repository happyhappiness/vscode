<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1919_collectd-5.6.2.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">parse_part_string<pos:position pos:line="1" pos:column="29"/></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name pos:line="1" pos:column="30">void<pos:position pos:line="1" pos:column="34"/></name> <modifier pos:line="1" pos:column="35">*<pos:position pos:line="1" pos:column="36"/></modifier><modifier pos:line="1" pos:column="36">*<pos:position pos:line="1" pos:column="37"/></modifier></type><name pos:line="1" pos:column="37">ret_buffer<pos:position pos:line="1" pos:column="47"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="49">size_t<pos:position pos:line="1" pos:column="55"/></name> <modifier pos:line="1" pos:column="56">*<pos:position pos:line="1" pos:column="57"/></modifier></type><name pos:line="1" pos:column="57">ret_buffer_len<pos:position pos:line="1" pos:column="71"/></name></decl></parameter>,
                             <parameter><decl><type><name pos:line="2" pos:column="30">char<pos:position pos:line="2" pos:column="34"/></name> <modifier pos:line="2" pos:column="35">*<pos:position pos:line="2" pos:column="36"/></modifier></type><name pos:line="2" pos:column="36">output<pos:position pos:line="2" pos:column="42"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="44">size_t<pos:position pos:line="2" pos:column="50"/></name> <specifier pos:line="2" pos:column="51">const<pos:position pos:line="2" pos:column="56"/></specifier></type> <name pos:line="2" pos:column="57">output_len<pos:position pos:line="2" pos:column="67"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="68"/></parameter_list> <block pos:line="2" pos:column="69">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">char<pos:position pos:line="3" pos:column="7"/></name> <modifier pos:line="3" pos:column="8">*<pos:position pos:line="3" pos:column="9"/></modifier></type><name pos:line="3" pos:column="9">buffer<pos:position pos:line="3" pos:column="15"/></name> <init pos:line="3" pos:column="16">= <expr><operator pos:line="3" pos:column="18">*<pos:position pos:line="3" pos:column="19"/></operator><name pos:line="3" pos:column="19">ret_buffer<pos:position pos:line="3" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="30"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">size_t<pos:position pos:line="4" pos:column="9"/></name></type> <name pos:line="4" pos:column="10">buffer_len<pos:position pos:line="4" pos:column="20"/></name> <init pos:line="4" pos:column="21">= <expr><operator pos:line="4" pos:column="23">*<pos:position pos:line="4" pos:column="24"/></operator><name pos:line="4" pos:column="24">ret_buffer_len<pos:position pos:line="4" pos:column="38"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="39"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="6" pos:column="3">uint16_t<pos:position pos:line="6" pos:column="11"/></name></type> <name pos:line="6" pos:column="12">tmp16<pos:position pos:line="6" pos:column="17"/></name></decl>;<pos:position pos:line="6" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">size_t<pos:position pos:line="7" pos:column="9"/></name> <specifier pos:line="7" pos:column="10">const<pos:position pos:line="7" pos:column="15"/></specifier></type> <name pos:line="7" pos:column="16">header_size<pos:position pos:line="7" pos:column="27"/></name> <init pos:line="7" pos:column="28">= <expr><literal type="number" pos:line="7" pos:column="30">2<pos:position pos:line="7" pos:column="31"/></literal> <operator pos:line="7" pos:column="32">*<pos:position pos:line="7" pos:column="33"/></operator> <sizeof pos:line="7" pos:column="34">sizeof<argument_list pos:line="7" pos:column="40">(<argument><expr><name pos:line="7" pos:column="41">uint16_t<pos:position pos:line="7" pos:column="49"/></name></expr></argument>)<pos:position pos:line="7" pos:column="50"/></argument_list></sizeof></expr></init></decl>;<pos:position pos:line="7" pos:column="51"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="9" pos:column="3">uint16_t<pos:position pos:line="9" pos:column="11"/></name></type> <name pos:line="9" pos:column="12">pkg_length<pos:position pos:line="9" pos:column="22"/></name></decl>;<pos:position pos:line="9" pos:column="23"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">size_t<pos:position pos:line="10" pos:column="9"/></name></type> <name pos:line="10" pos:column="10">payload_size<pos:position pos:line="10" pos:column="22"/></name></decl>;<pos:position pos:line="10" pos:column="23"/></decl_stmt>

  <if pos:line="12" pos:column="3">if <condition pos:line="12" pos:column="6">(<expr><name pos:line="12" pos:column="7">output_len<pos:position pos:line="12" pos:column="17"/></name> <operator pos:line="12" pos:column="18">==<pos:position pos:line="12" pos:column="20"/></operator> <literal type="number" pos:line="12" pos:column="21">0<pos:position pos:line="12" pos:column="22"/></literal></expr>)<pos:position pos:line="12" pos:column="23"/></condition><then pos:line="12" pos:column="23">
    <block type="pseudo"><return pos:line="13" pos:column="5">return <expr><operator pos:line="13" pos:column="12">(<pos:position pos:line="13" pos:column="13"/></operator><name pos:line="13" pos:column="13">EINVAL<pos:position pos:line="13" pos:column="19"/></name><operator pos:line="13" pos:column="19">)<pos:position pos:line="13" pos:column="20"/></operator></expr>;<pos:position pos:line="13" pos:column="21"/></return></block></then></if>

  <if pos:line="15" pos:column="3">if <condition pos:line="15" pos:column="6">(<expr><name pos:line="15" pos:column="7">buffer_len<pos:position pos:line="15" pos:column="17"/></name> <operator pos:line="15" pos:column="18">&lt;<pos:position pos:line="15" pos:column="22"/></operator> <name pos:line="15" pos:column="20">header_size<pos:position pos:line="15" pos:column="31"/></name></expr>)<pos:position pos:line="15" pos:column="32"/></condition><then pos:line="15" pos:column="32"> <block pos:line="15" pos:column="33">{
    <expr_stmt><expr><call><name pos:line="16" pos:column="5">WARNING<pos:position pos:line="16" pos:column="12"/></name><argument_list pos:line="16" pos:column="12">(<argument><expr><literal type="string" pos:line="16" pos:column="13">"network plugin: parse_part_string: "<pos:position pos:line="16" pos:column="50"/></literal>
            <literal type="string" pos:line="17" pos:column="13">"Packet too short: "<pos:position pos:line="17" pos:column="33"/></literal>
            <literal type="string" pos:line="18" pos:column="13">"Chunk of at least size %zu expected, "<pos:position pos:line="18" pos:column="52"/></literal>
            <literal type="string" pos:line="19" pos:column="13">"but buffer has only %zu bytes left."<pos:position pos:line="19" pos:column="50"/></literal></expr></argument>,
            <argument><expr><name pos:line="20" pos:column="13">header_size<pos:position pos:line="20" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="26">buffer_len<pos:position pos:line="20" pos:column="36"/></name></expr></argument>)<pos:position pos:line="20" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="38"/></expr_stmt>
    <return pos:line="21" pos:column="5">return <expr><operator pos:line="21" pos:column="12">(<pos:position pos:line="21" pos:column="13"/></operator><operator pos:line="21" pos:column="13">-<pos:position pos:line="21" pos:column="14"/></operator><literal type="number" pos:line="21" pos:column="14">1<pos:position pos:line="21" pos:column="15"/></literal><operator pos:line="21" pos:column="15">)<pos:position pos:line="21" pos:column="16"/></operator></expr>;<pos:position pos:line="21" pos:column="17"/></return>
  }<pos:position pos:line="22" pos:column="4"/></block></then></if>

  <expr_stmt><expr><call><name pos:line="24" pos:column="3">memcpy<pos:position pos:line="24" pos:column="9"/></name><argument_list pos:line="24" pos:column="9">(<argument><expr><operator pos:line="24" pos:column="10">(<pos:position pos:line="24" pos:column="11"/></operator><name pos:line="24" pos:column="11">void<pos:position pos:line="24" pos:column="15"/></name> <operator pos:line="24" pos:column="16">*<pos:position pos:line="24" pos:column="17"/></operator><operator pos:line="24" pos:column="17">)<pos:position pos:line="24" pos:column="18"/></operator><operator pos:line="24" pos:column="18">&amp;<pos:position pos:line="24" pos:column="23"/></operator><name pos:line="24" pos:column="19">tmp16<pos:position pos:line="24" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="26">buffer<pos:position pos:line="24" pos:column="32"/></name></expr></argument>, <argument><expr><sizeof pos:line="24" pos:column="34">sizeof<argument_list pos:line="24" pos:column="40">(<argument><expr><name pos:line="24" pos:column="41">tmp16<pos:position pos:line="24" pos:column="46"/></name></expr></argument>)<pos:position pos:line="24" pos:column="47"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="24" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="49"/></expr_stmt>
  <expr_stmt><expr><name pos:line="25" pos:column="3">buffer<pos:position pos:line="25" pos:column="9"/></name> <operator pos:line="25" pos:column="10">+=<pos:position pos:line="25" pos:column="12"/></operator> <sizeof pos:line="25" pos:column="13">sizeof<argument_list pos:line="25" pos:column="19">(<argument><expr><name pos:line="25" pos:column="20">tmp16<pos:position pos:line="25" pos:column="25"/></name></expr></argument>)<pos:position pos:line="25" pos:column="26"/></argument_list></sizeof></expr>;<pos:position pos:line="25" pos:column="27"/></expr_stmt>
  <comment type="block" pos:line="26" pos:column="3">/* pkg_type = ntohs (tmp16); */</comment>

  <expr_stmt><expr><call><name pos:line="28" pos:column="3">memcpy<pos:position pos:line="28" pos:column="9"/></name><argument_list pos:line="28" pos:column="9">(<argument><expr><operator pos:line="28" pos:column="10">(<pos:position pos:line="28" pos:column="11"/></operator><name pos:line="28" pos:column="11">void<pos:position pos:line="28" pos:column="15"/></name> <operator pos:line="28" pos:column="16">*<pos:position pos:line="28" pos:column="17"/></operator><operator pos:line="28" pos:column="17">)<pos:position pos:line="28" pos:column="18"/></operator><operator pos:line="28" pos:column="18">&amp;<pos:position pos:line="28" pos:column="23"/></operator><name pos:line="28" pos:column="19">tmp16<pos:position pos:line="28" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="26">buffer<pos:position pos:line="28" pos:column="32"/></name></expr></argument>, <argument><expr><sizeof pos:line="28" pos:column="34">sizeof<argument_list pos:line="28" pos:column="40">(<argument><expr><name pos:line="28" pos:column="41">tmp16<pos:position pos:line="28" pos:column="46"/></name></expr></argument>)<pos:position pos:line="28" pos:column="47"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="28" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="49"/></expr_stmt>
  <expr_stmt><expr><name pos:line="29" pos:column="3">buffer<pos:position pos:line="29" pos:column="9"/></name> <operator pos:line="29" pos:column="10">+=<pos:position pos:line="29" pos:column="12"/></operator> <sizeof pos:line="29" pos:column="13">sizeof<argument_list pos:line="29" pos:column="19">(<argument><expr><name pos:line="29" pos:column="20">tmp16<pos:position pos:line="29" pos:column="25"/></name></expr></argument>)<pos:position pos:line="29" pos:column="26"/></argument_list></sizeof></expr>;<pos:position pos:line="29" pos:column="27"/></expr_stmt>
  <expr_stmt><expr><name pos:line="30" pos:column="3">pkg_length<pos:position pos:line="30" pos:column="13"/></name> <operator pos:line="30" pos:column="14">=<pos:position pos:line="30" pos:column="15"/></operator> <call><name pos:line="30" pos:column="16">ntohs<pos:position pos:line="30" pos:column="21"/></name><argument_list pos:line="30" pos:column="21">(<argument><expr><name pos:line="30" pos:column="22">tmp16<pos:position pos:line="30" pos:column="27"/></name></expr></argument>)<pos:position pos:line="30" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="29"/></expr_stmt>
  <expr_stmt><expr><name pos:line="31" pos:column="3">payload_size<pos:position pos:line="31" pos:column="15"/></name> <operator pos:line="31" pos:column="16">=<pos:position pos:line="31" pos:column="17"/></operator> <operator pos:line="31" pos:column="18">(<pos:position pos:line="31" pos:column="19"/></operator><operator pos:line="31" pos:column="19">(<pos:position pos:line="31" pos:column="20"/></operator><name pos:line="31" pos:column="20">size_t<pos:position pos:line="31" pos:column="26"/></name><operator pos:line="31" pos:column="26">)<pos:position pos:line="31" pos:column="27"/></operator><name pos:line="31" pos:column="27">pkg_length<pos:position pos:line="31" pos:column="37"/></name><operator pos:line="31" pos:column="37">)<pos:position pos:line="31" pos:column="38"/></operator> <operator pos:line="31" pos:column="39">-<pos:position pos:line="31" pos:column="40"/></operator> <name pos:line="31" pos:column="41">header_size<pos:position pos:line="31" pos:column="52"/></name></expr>;<pos:position pos:line="31" pos:column="53"/></expr_stmt>

  <comment type="block" pos:line="33" pos:column="3">/* Check that packet fits in the input buffer */</comment>
  <if pos:line="34" pos:column="3">if <condition pos:line="34" pos:column="6">(<expr><name pos:line="34" pos:column="7">pkg_length<pos:position pos:line="34" pos:column="17"/></name> <operator pos:line="34" pos:column="18">&gt;<pos:position pos:line="34" pos:column="22"/></operator> <name pos:line="34" pos:column="20">buffer_len<pos:position pos:line="34" pos:column="30"/></name></expr>)<pos:position pos:line="34" pos:column="31"/></condition><then pos:line="34" pos:column="31"> <block pos:line="34" pos:column="32">{
    <expr_stmt><expr><call><name pos:line="35" pos:column="5">WARNING<pos:position pos:line="35" pos:column="12"/></name><argument_list pos:line="35" pos:column="12">(<argument><expr><literal type="string" pos:line="35" pos:column="13">"network plugin: parse_part_string: "<pos:position pos:line="35" pos:column="50"/></literal>
            <literal type="string" pos:line="36" pos:column="13">"Packet too big: "<pos:position pos:line="36" pos:column="31"/></literal>
            <literal type="string" pos:line="37" pos:column="13">"Chunk of size %"<pos:position pos:line="37" pos:column="30"/></literal> <name pos:line="37" pos:column="31">PRIu16<pos:position pos:line="37" pos:column="37"/></name> <literal type="string" pos:line="37" pos:column="38">" received, "<pos:position pos:line="37" pos:column="51"/></literal>
            <literal type="string" pos:line="38" pos:column="13">"but buffer has only %zu bytes left."<pos:position pos:line="38" pos:column="50"/></literal></expr></argument>,
            <argument><expr><name pos:line="39" pos:column="13">pkg_length<pos:position pos:line="39" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="25">buffer_len<pos:position pos:line="39" pos:column="35"/></name></expr></argument>)<pos:position pos:line="39" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="37"/></expr_stmt>
    <return pos:line="40" pos:column="5">return <expr><operator pos:line="40" pos:column="12">(<pos:position pos:line="40" pos:column="13"/></operator><operator pos:line="40" pos:column="13">-<pos:position pos:line="40" pos:column="14"/></operator><literal type="number" pos:line="40" pos:column="14">1<pos:position pos:line="40" pos:column="15"/></literal><operator pos:line="40" pos:column="15">)<pos:position pos:line="40" pos:column="16"/></operator></expr>;<pos:position pos:line="40" pos:column="17"/></return>
  }<pos:position pos:line="41" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="43" pos:column="3">/* Check that pkg_length is in the valid range */</comment>
  <if pos:line="44" pos:column="3">if <condition pos:line="44" pos:column="6">(<expr><name pos:line="44" pos:column="7">pkg_length<pos:position pos:line="44" pos:column="17"/></name> <operator pos:line="44" pos:column="18">&lt;=<pos:position pos:line="44" pos:column="23"/></operator> <name pos:line="44" pos:column="21">header_size<pos:position pos:line="44" pos:column="32"/></name></expr>)<pos:position pos:line="44" pos:column="33"/></condition><then pos:line="44" pos:column="33"> <block pos:line="44" pos:column="34">{
    <expr_stmt><expr><call><name pos:line="45" pos:column="5">WARNING<pos:position pos:line="45" pos:column="12"/></name><argument_list pos:line="45" pos:column="12">(<argument><expr><literal type="string" pos:line="45" pos:column="13">"network plugin: parse_part_string: "<pos:position pos:line="45" pos:column="50"/></literal>
            <literal type="string" pos:line="46" pos:column="13">"Packet too short: "<pos:position pos:line="46" pos:column="33"/></literal>
            <literal type="string" pos:line="47" pos:column="13">"Header claims this packet is only %hu "<pos:position pos:line="47" pos:column="53"/></literal>
            <literal type="string" pos:line="48" pos:column="13">"bytes long."<pos:position pos:line="48" pos:column="26"/></literal></expr></argument>,
            <argument><expr><name pos:line="49" pos:column="13">pkg_length<pos:position pos:line="49" pos:column="23"/></name></expr></argument>)<pos:position pos:line="49" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="25"/></expr_stmt>
    <return pos:line="50" pos:column="5">return <expr><operator pos:line="50" pos:column="12">(<pos:position pos:line="50" pos:column="13"/></operator><operator pos:line="50" pos:column="13">-<pos:position pos:line="50" pos:column="14"/></operator><literal type="number" pos:line="50" pos:column="14">1<pos:position pos:line="50" pos:column="15"/></literal><operator pos:line="50" pos:column="15">)<pos:position pos:line="50" pos:column="16"/></operator></expr>;<pos:position pos:line="50" pos:column="17"/></return>
  }<pos:position pos:line="51" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="53" pos:column="3">/* Check that the package data fits into the output buffer.
   * The previous if-statement ensures that:
   * `pkg_length &gt; header_size' */</comment>
  <if pos:line="56" pos:column="3">if <condition pos:line="56" pos:column="6">(<expr><name pos:line="56" pos:column="7">output_len<pos:position pos:line="56" pos:column="17"/></name> <operator pos:line="56" pos:column="18">&lt;<pos:position pos:line="56" pos:column="22"/></operator> <name pos:line="56" pos:column="20">payload_size<pos:position pos:line="56" pos:column="32"/></name></expr>)<pos:position pos:line="56" pos:column="33"/></condition><then pos:line="56" pos:column="33"> <block pos:line="56" pos:column="34">{
    <expr_stmt><expr><call><name pos:line="57" pos:column="5">WARNING<pos:position pos:line="57" pos:column="12"/></name><argument_list pos:line="57" pos:column="12">(<argument><expr><literal type="string" pos:line="57" pos:column="13">"network plugin: parse_part_string: "<pos:position pos:line="57" pos:column="50"/></literal>
            <literal type="string" pos:line="58" pos:column="13">"Buffer too small: "<pos:position pos:line="58" pos:column="33"/></literal>
            <literal type="string" pos:line="59" pos:column="13">"Output buffer holds %zu bytes, "<pos:position pos:line="59" pos:column="46"/></literal>
            <literal type="string" pos:line="60" pos:column="13">"which is too small to hold the received "<pos:position pos:line="60" pos:column="55"/></literal>
            <literal type="string" pos:line="61" pos:column="13">"%zu byte string."<pos:position pos:line="61" pos:column="31"/></literal></expr></argument>,
            <argument><expr><name pos:line="62" pos:column="13">output_len<pos:position pos:line="62" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="62" pos:column="25">payload_size<pos:position pos:line="62" pos:column="37"/></name></expr></argument>)<pos:position pos:line="62" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="39"/></expr_stmt>
    <return pos:line="63" pos:column="5">return <expr><operator pos:line="63" pos:column="12">(<pos:position pos:line="63" pos:column="13"/></operator><operator pos:line="63" pos:column="13">-<pos:position pos:line="63" pos:column="14"/></operator><literal type="number" pos:line="63" pos:column="14">1<pos:position pos:line="63" pos:column="15"/></literal><operator pos:line="63" pos:column="15">)<pos:position pos:line="63" pos:column="16"/></operator></expr>;<pos:position pos:line="63" pos:column="17"/></return>
  }<pos:position pos:line="64" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="66" pos:column="3">/* All sanity checks successfull, let's copy the data over */</comment>
  <expr_stmt><expr><call><name pos:line="67" pos:column="3">memcpy<pos:position pos:line="67" pos:column="9"/></name><argument_list pos:line="67" pos:column="9">(<argument><expr><operator pos:line="67" pos:column="10">(<pos:position pos:line="67" pos:column="11"/></operator><name pos:line="67" pos:column="11">void<pos:position pos:line="67" pos:column="15"/></name> <operator pos:line="67" pos:column="16">*<pos:position pos:line="67" pos:column="17"/></operator><operator pos:line="67" pos:column="17">)<pos:position pos:line="67" pos:column="18"/></operator><name pos:line="67" pos:column="18">output<pos:position pos:line="67" pos:column="24"/></name></expr></argument>, <argument><expr><operator pos:line="67" pos:column="26">(<pos:position pos:line="67" pos:column="27"/></operator><name pos:line="67" pos:column="27">void<pos:position pos:line="67" pos:column="31"/></name> <operator pos:line="67" pos:column="32">*<pos:position pos:line="67" pos:column="33"/></operator><operator pos:line="67" pos:column="33">)<pos:position pos:line="67" pos:column="34"/></operator><name pos:line="67" pos:column="34">buffer<pos:position pos:line="67" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="67" pos:column="42">payload_size<pos:position pos:line="67" pos:column="54"/></name></expr></argument>)<pos:position pos:line="67" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="56"/></expr_stmt>
  <expr_stmt><expr><name pos:line="68" pos:column="3">buffer<pos:position pos:line="68" pos:column="9"/></name> <operator pos:line="68" pos:column="10">+=<pos:position pos:line="68" pos:column="12"/></operator> <name pos:line="68" pos:column="13">payload_size<pos:position pos:line="68" pos:column="25"/></name></expr>;<pos:position pos:line="68" pos:column="26"/></expr_stmt>

  <comment type="block" pos:line="70" pos:column="3">/* For some very weird reason '\0' doesn't do the trick on SPARC in
   * this statement. */</comment>
  <if pos:line="72" pos:column="3">if <condition pos:line="72" pos:column="6">(<expr><name><name pos:line="72" pos:column="7">output<pos:position pos:line="72" pos:column="13"/></name><index pos:line="72" pos:column="13">[<expr><name pos:line="72" pos:column="14">payload_size<pos:position pos:line="72" pos:column="26"/></name> <operator pos:line="72" pos:column="27">-<pos:position pos:line="72" pos:column="28"/></operator> <literal type="number" pos:line="72" pos:column="29">1<pos:position pos:line="72" pos:column="30"/></literal></expr>]<pos:position pos:line="72" pos:column="31"/></index></name> <operator pos:line="72" pos:column="32">!=<pos:position pos:line="72" pos:column="34"/></operator> <literal type="number" pos:line="72" pos:column="35">0<pos:position pos:line="72" pos:column="36"/></literal></expr>)<pos:position pos:line="72" pos:column="37"/></condition><then pos:line="72" pos:column="37"> <block pos:line="72" pos:column="38">{
    <expr_stmt><expr><call><name pos:line="73" pos:column="5">WARNING<pos:position pos:line="73" pos:column="12"/></name><argument_list pos:line="73" pos:column="12">(<argument><expr><literal type="string" pos:line="73" pos:column="13">"network plugin: parse_part_string: "<pos:position pos:line="73" pos:column="50"/></literal>
            <literal type="string" pos:line="74" pos:column="13">"Received string does not end "<pos:position pos:line="74" pos:column="44"/></literal>
            <literal type="string" pos:line="75" pos:column="13">"with a NULL-byte."<pos:position pos:line="75" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="75" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="34"/></expr_stmt>
    <return pos:line="76" pos:column="5">return <expr><operator pos:line="76" pos:column="12">(<pos:position pos:line="76" pos:column="13"/></operator><operator pos:line="76" pos:column="13">-<pos:position pos:line="76" pos:column="14"/></operator><literal type="number" pos:line="76" pos:column="14">1<pos:position pos:line="76" pos:column="15"/></literal><operator pos:line="76" pos:column="15">)<pos:position pos:line="76" pos:column="16"/></operator></expr>;<pos:position pos:line="76" pos:column="17"/></return>
  }<pos:position pos:line="77" pos:column="4"/></block></then></if>

  <expr_stmt><expr><operator pos:line="79" pos:column="3">*<pos:position pos:line="79" pos:column="4"/></operator><name pos:line="79" pos:column="4">ret_buffer<pos:position pos:line="79" pos:column="14"/></name> <operator pos:line="79" pos:column="15">=<pos:position pos:line="79" pos:column="16"/></operator> <name pos:line="79" pos:column="17">buffer<pos:position pos:line="79" pos:column="23"/></name></expr>;<pos:position pos:line="79" pos:column="24"/></expr_stmt>
  <expr_stmt><expr><operator pos:line="80" pos:column="3">*<pos:position pos:line="80" pos:column="4"/></operator><name pos:line="80" pos:column="4">ret_buffer_len<pos:position pos:line="80" pos:column="18"/></name> <operator pos:line="80" pos:column="19">=<pos:position pos:line="80" pos:column="20"/></operator> <name pos:line="80" pos:column="21">buffer_len<pos:position pos:line="80" pos:column="31"/></name> <operator pos:line="80" pos:column="32">-<pos:position pos:line="80" pos:column="33"/></operator> <name pos:line="80" pos:column="34">pkg_length<pos:position pos:line="80" pos:column="44"/></name></expr>;<pos:position pos:line="80" pos:column="45"/></expr_stmt>

  <return pos:line="82" pos:column="3">return <expr><operator pos:line="82" pos:column="10">(<pos:position pos:line="82" pos:column="11"/></operator><literal type="number" pos:line="82" pos:column="11">0<pos:position pos:line="82" pos:column="12"/></literal><operator pos:line="82" pos:column="12">)<pos:position pos:line="82" pos:column="13"/></operator></expr>;<pos:position pos:line="82" pos:column="14"/></return>
}<pos:position pos:line="83" pos:column="2"/></block></function></unit>
