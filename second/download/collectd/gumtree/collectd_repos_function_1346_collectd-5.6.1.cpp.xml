<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1346_collectd-5.6.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">swap_init<pos:position pos:line="1" pos:column="21"/></name> <parameter_list pos:line="1" pos:column="22">(<parameter><decl><type><name pos:line="1" pos:column="23">void<pos:position pos:line="1" pos:column="27"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="28"/></parameter_list> <comment type="block" pos:line="1" pos:column="29">/* {{{ */</comment>
<block pos:line="2" pos:column="1">{
<cpp:if pos:line="3" pos:column="1">#<cpp:directive pos:line="3" pos:column="2">if<pos:position pos:line="3" pos:column="4"/></cpp:directive> <expr><name pos:line="3" pos:column="5">KERNEL_LINUX<pos:position pos:line="3" pos:column="17"/></name></expr></cpp:if>
	<expr_stmt><expr><name pos:line="4" pos:column="9">pagesize<pos:position pos:line="4" pos:column="17"/></name> <operator pos:line="4" pos:column="18">=<pos:position pos:line="4" pos:column="19"/></operator> <operator pos:line="4" pos:column="20">(<pos:position pos:line="4" pos:column="21"/></operator><name pos:line="4" pos:column="21">derive_t<pos:position pos:line="4" pos:column="29"/></name><operator pos:line="4" pos:column="29">)<pos:position pos:line="4" pos:column="30"/></operator> <call><name pos:line="4" pos:column="31">sysconf<pos:position pos:line="4" pos:column="38"/></name> <argument_list pos:line="4" pos:column="39">(<argument><expr><name pos:line="4" pos:column="40">_SC_PAGESIZE<pos:position pos:line="4" pos:column="52"/></name></expr></argument>)<pos:position pos:line="4" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="54"/></expr_stmt>
<comment type="block" pos:line="5" pos:column="1">/* #endif KERNEL_LINUX */</comment>

<cpp:elif pos:line="7" pos:column="1">#<cpp:directive pos:line="7" pos:column="2">elif<pos:position pos:line="7" pos:column="6"/></cpp:directive> <expr><name pos:line="7" pos:column="7">HAVE_SWAPCTL<pos:position pos:line="7" pos:column="19"/></name> <operator pos:line="7" pos:column="20">&amp;&amp;<pos:position pos:line="7" pos:column="30"/></operator> <name pos:line="7" pos:column="23">HAVE_SWAPCTL_TWO_ARGS<pos:position pos:line="7" pos:column="44"/></name></expr></cpp:elif>
	<comment type="block" pos:line="8" pos:column="9">/* getpagesize(3C) tells me this does not fail.. */</comment>
	<expr_stmt><expr><name pos:line="9" pos:column="9">pagesize<pos:position pos:line="9" pos:column="17"/></name> <operator pos:line="9" pos:column="18">=<pos:position pos:line="9" pos:column="19"/></operator> <operator pos:line="9" pos:column="20">(<pos:position pos:line="9" pos:column="21"/></operator><name pos:line="9" pos:column="21">derive_t<pos:position pos:line="9" pos:column="29"/></name><operator pos:line="9" pos:column="29">)<pos:position pos:line="9" pos:column="30"/></operator> <call><name pos:line="9" pos:column="31">getpagesize<pos:position pos:line="9" pos:column="42"/></name> <argument_list pos:line="9" pos:column="43">()<pos:position pos:line="9" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="46"/></expr_stmt>
<comment type="block" pos:line="10" pos:column="1">/* #endif HAVE_SWAPCTL */</comment>

<cpp:elif pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">elif<pos:position pos:line="12" pos:column="6"/></cpp:directive> <expr><call><name pos:line="12" pos:column="7">defined<pos:position pos:line="12" pos:column="14"/></name><argument_list pos:line="12" pos:column="14">(<argument><expr><name pos:line="12" pos:column="15">VM_SWAPUSAGE<pos:position pos:line="12" pos:column="27"/></name></expr></argument>)<pos:position pos:line="12" pos:column="28"/></argument_list></call></expr></cpp:elif>
	<comment type="block" pos:line="13" pos:column="9">/* No init stuff */</comment>
<comment type="block" pos:line="14" pos:column="1">/* #endif defined(VM_SWAPUSAGE) */</comment>

<cpp:elif pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">elif<pos:position pos:line="16" pos:column="6"/></cpp:directive> <expr><name pos:line="16" pos:column="7">HAVE_LIBKVM_GETSWAPINFO<pos:position pos:line="16" pos:column="30"/></name></expr></cpp:elif>
	<decl_stmt><decl><type><name pos:line="17" pos:column="9">char<pos:position pos:line="17" pos:column="13"/></name></type> <name><name pos:line="17" pos:column="14">errbuf<pos:position pos:line="17" pos:column="20"/></name><index pos:line="17" pos:column="20">[<expr><name pos:line="17" pos:column="21">_POSIX2_LINE_MAX<pos:position pos:line="17" pos:column="37"/></name></expr>]<pos:position pos:line="17" pos:column="38"/></index></name></decl>;<pos:position pos:line="17" pos:column="39"/></decl_stmt>

	<if pos:line="19" pos:column="9">if <condition pos:line="19" pos:column="12">(<expr><name pos:line="19" pos:column="13">kvm_obj<pos:position pos:line="19" pos:column="20"/></name> <operator pos:line="19" pos:column="21">!=<pos:position pos:line="19" pos:column="23"/></operator> <name pos:line="19" pos:column="24">NULL<pos:position pos:line="19" pos:column="28"/></name></expr>)<pos:position pos:line="19" pos:column="29"/></condition><then pos:line="19" pos:column="29">
	<block pos:line="20" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="21" pos:column="17">kvm_close<pos:position pos:line="21" pos:column="26"/></name> <argument_list pos:line="21" pos:column="27">(<argument><expr><name pos:line="21" pos:column="28">kvm_obj<pos:position pos:line="21" pos:column="35"/></name></expr></argument>)<pos:position pos:line="21" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="37"/></expr_stmt>
		<expr_stmt><expr><name pos:line="22" pos:column="17">kvm_obj<pos:position pos:line="22" pos:column="24"/></name> <operator pos:line="22" pos:column="25">=<pos:position pos:line="22" pos:column="26"/></operator> <name pos:line="22" pos:column="27">NULL<pos:position pos:line="22" pos:column="31"/></name></expr>;<pos:position pos:line="22" pos:column="32"/></expr_stmt>
	}<pos:position pos:line="23" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="25" pos:column="9">kvm_pagesize<pos:position pos:line="25" pos:column="21"/></name> <operator pos:line="25" pos:column="22">=<pos:position pos:line="25" pos:column="23"/></operator> <call><name pos:line="25" pos:column="24">getpagesize<pos:position pos:line="25" pos:column="35"/></name> <argument_list pos:line="25" pos:column="36">()<pos:position pos:line="25" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="39"/></expr_stmt>

	<expr_stmt><expr><name pos:line="27" pos:column="9">kvm_obj<pos:position pos:line="27" pos:column="16"/></name> <operator pos:line="27" pos:column="17">=<pos:position pos:line="27" pos:column="18"/></operator> <call><name pos:line="27" pos:column="19">kvm_openfiles<pos:position pos:line="27" pos:column="32"/></name> <argument_list pos:line="27" pos:column="33">(<argument><expr><name pos:line="27" pos:column="34">NULL<pos:position pos:line="27" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="27" pos:column="40">"/dev/null"<pos:position pos:line="27" pos:column="51"/></literal></expr></argument>, <argument><expr><name pos:line="27" pos:column="53">NULL<pos:position pos:line="27" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="59">O_RDONLY<pos:position pos:line="27" pos:column="67"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="69">errbuf<pos:position pos:line="27" pos:column="75"/></name></expr></argument>)<pos:position pos:line="27" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="77"/></expr_stmt>

	<if pos:line="29" pos:column="9">if <condition pos:line="29" pos:column="12">(<expr><name pos:line="29" pos:column="13">kvm_obj<pos:position pos:line="29" pos:column="20"/></name> <operator pos:line="29" pos:column="21">==<pos:position pos:line="29" pos:column="23"/></operator> <name pos:line="29" pos:column="24">NULL<pos:position pos:line="29" pos:column="28"/></name></expr>)<pos:position pos:line="29" pos:column="29"/></condition><then pos:line="29" pos:column="29">
	<block pos:line="30" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="31" pos:column="17">ERROR<pos:position pos:line="31" pos:column="22"/></name> <argument_list pos:line="31" pos:column="23">(<argument><expr><literal type="string" pos:line="31" pos:column="24">"swap plugin: kvm_openfiles failed, %s"<pos:position pos:line="31" pos:column="63"/></literal></expr></argument>, <argument><expr><name pos:line="31" pos:column="65">errbuf<pos:position pos:line="31" pos:column="71"/></name></expr></argument>)<pos:position pos:line="31" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="73"/></expr_stmt>
		<return pos:line="32" pos:column="17">return <expr><operator pos:line="32" pos:column="24">(<pos:position pos:line="32" pos:column="25"/></operator><operator pos:line="32" pos:column="25">-<pos:position pos:line="32" pos:column="26"/></operator><literal type="number" pos:line="32" pos:column="26">1<pos:position pos:line="32" pos:column="27"/></literal><operator pos:line="32" pos:column="27">)<pos:position pos:line="32" pos:column="28"/></operator></expr>;<pos:position pos:line="32" pos:column="29"/></return>
	}<pos:position pos:line="33" pos:column="10"/></block></then></if>
<comment type="block" pos:line="34" pos:column="1">/* #endif HAVE_LIBKVM_GETSWAPINFO */</comment>

<cpp:elif pos:line="36" pos:column="1">#<cpp:directive pos:line="36" pos:column="2">elif<pos:position pos:line="36" pos:column="6"/></cpp:directive> <expr><name pos:line="36" pos:column="7">HAVE_LIBSTATGRAB<pos:position pos:line="36" pos:column="23"/></name></expr></cpp:elif>
	<comment type="block" pos:line="37" pos:column="9">/* No init stuff */</comment>
<comment type="block" pos:line="38" pos:column="1">/* #endif HAVE_LIBSTATGRAB */</comment>

<cpp:elif pos:line="40" pos:column="1">#<cpp:directive pos:line="40" pos:column="2">elif<pos:position pos:line="40" pos:column="6"/></cpp:directive> <expr><name pos:line="40" pos:column="7">HAVE_PERFSTAT<pos:position pos:line="40" pos:column="20"/></name></expr></cpp:elif>
	<expr_stmt><expr><name pos:line="41" pos:column="9">pagesize<pos:position pos:line="41" pos:column="17"/></name> <operator pos:line="41" pos:column="18">=<pos:position pos:line="41" pos:column="19"/></operator> <call><name pos:line="41" pos:column="20">getpagesize<pos:position pos:line="41" pos:column="31"/></name><argument_list pos:line="41" pos:column="31">()<pos:position pos:line="41" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="34"/></expr_stmt>
<cpp:endif pos:line="42" pos:column="1">#<cpp:directive pos:line="42" pos:column="2">endif<pos:position pos:line="42" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="42" pos:column="8">/* HAVE_PERFSTAT */</comment>

	<return pos:line="44" pos:column="9">return <expr><operator pos:line="44" pos:column="16">(<pos:position pos:line="44" pos:column="17"/></operator><literal type="number" pos:line="44" pos:column="17">0<pos:position pos:line="44" pos:column="18"/></literal><operator pos:line="44" pos:column="18">)<pos:position pos:line="44" pos:column="19"/></operator></expr>;<pos:position pos:line="44" pos:column="20"/></return>
}<pos:position pos:line="45" pos:column="2"/></block></function></unit>
