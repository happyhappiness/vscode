<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_2104_collectd-5.6.2.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">cipvs_init<pos:position pos:line="1" pos:column="22"/></name><parameter_list pos:line="1" pos:column="22">(<parameter><decl><type><name pos:line="1" pos:column="23">void<pos:position pos:line="1" pos:column="27"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="28"/></parameter_list> <block pos:line="1" pos:column="29">{
  <decl_stmt><decl><type><name><name pos:line="2" pos:column="3">struct<pos:position pos:line="2" pos:column="9"/></name> <name pos:line="2" pos:column="10">ip_vs_getinfo<pos:position pos:line="2" pos:column="23"/></name></name></type> <name pos:line="2" pos:column="24">ipvs_info<pos:position pos:line="2" pos:column="33"/></name></decl>;<pos:position pos:line="2" pos:column="34"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="4" pos:column="3">socklen_t<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">len<pos:position pos:line="4" pos:column="16"/></name></decl>;<pos:position pos:line="4" pos:column="17"/></decl_stmt>

  <if pos:line="6" pos:column="3">if <condition pos:line="6" pos:column="6">(<expr><operator pos:line="6" pos:column="7">-<pos:position pos:line="6" pos:column="8"/></operator><literal type="number" pos:line="6" pos:column="8">1<pos:position pos:line="6" pos:column="9"/></literal> <operator pos:line="6" pos:column="10">==<pos:position pos:line="6" pos:column="12"/></operator> <operator pos:line="6" pos:column="13">(<pos:position pos:line="6" pos:column="14"/></operator><name pos:line="6" pos:column="14">sockfd<pos:position pos:line="6" pos:column="20"/></name> <operator pos:line="6" pos:column="21">=<pos:position pos:line="6" pos:column="22"/></operator> <call><name pos:line="6" pos:column="23">socket<pos:position pos:line="6" pos:column="29"/></name><argument_list pos:line="6" pos:column="29">(<argument><expr><name pos:line="6" pos:column="30">AF_INET<pos:position pos:line="6" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="6" pos:column="39">SOCK_RAW<pos:position pos:line="6" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="6" pos:column="49">IPPROTO_RAW<pos:position pos:line="6" pos:column="60"/></name></expr></argument>)<pos:position pos:line="6" pos:column="61"/></argument_list></call><operator pos:line="6" pos:column="61">)<pos:position pos:line="6" pos:column="62"/></operator></expr>)<pos:position pos:line="6" pos:column="63"/></condition><then pos:line="6" pos:column="63"> <block pos:line="6" pos:column="64">{
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">char<pos:position pos:line="7" pos:column="9"/></name></type> <name><name pos:line="7" pos:column="10">errbuf<pos:position pos:line="7" pos:column="16"/></name><index pos:line="7" pos:column="16">[<expr><literal type="number" pos:line="7" pos:column="17">1024<pos:position pos:line="7" pos:column="21"/></literal></expr>]<pos:position pos:line="7" pos:column="22"/></index></name></decl>;<pos:position pos:line="7" pos:column="23"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="8" pos:column="5">log_err<pos:position pos:line="8" pos:column="12"/></name><argument_list pos:line="8" pos:column="12">(<argument><expr><literal type="string" pos:line="8" pos:column="13">"cipvs_init: socket() failed: %s"<pos:position pos:line="8" pos:column="46"/></literal></expr></argument>,
            <argument><expr><call><name pos:line="9" pos:column="13">sstrerror<pos:position pos:line="9" pos:column="22"/></name><argument_list pos:line="9" pos:column="22">(<argument><expr><name pos:line="9" pos:column="23">errno<pos:position pos:line="9" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="30">errbuf<pos:position pos:line="9" pos:column="36"/></name></expr></argument>, <argument><expr><sizeof pos:line="9" pos:column="38">sizeof<argument_list pos:line="9" pos:column="44">(<argument><expr><name pos:line="9" pos:column="45">errbuf<pos:position pos:line="9" pos:column="51"/></name></expr></argument>)<pos:position pos:line="9" pos:column="52"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="9" pos:column="53"/></argument_list></call></expr></argument>)<pos:position pos:line="9" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="55"/></expr_stmt>
    <return pos:line="10" pos:column="5">return <expr><operator pos:line="10" pos:column="12">-<pos:position pos:line="10" pos:column="13"/></operator><literal type="number" pos:line="10" pos:column="13">1<pos:position pos:line="10" pos:column="14"/></literal></expr>;<pos:position pos:line="10" pos:column="15"/></return>
  }<pos:position pos:line="11" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="13" pos:column="3">len<pos:position pos:line="13" pos:column="6"/></name> <operator pos:line="13" pos:column="7">=<pos:position pos:line="13" pos:column="8"/></operator> <sizeof pos:line="13" pos:column="9">sizeof<argument_list pos:line="13" pos:column="15">(<argument><expr><name pos:line="13" pos:column="16">ipvs_info<pos:position pos:line="13" pos:column="25"/></name></expr></argument>)<pos:position pos:line="13" pos:column="26"/></argument_list></sizeof></expr>;<pos:position pos:line="13" pos:column="27"/></expr_stmt>

  <if pos:line="15" pos:column="3">if <condition pos:line="15" pos:column="6">(<expr><literal type="number" pos:line="15" pos:column="7">0<pos:position pos:line="15" pos:column="8"/></literal> <operator pos:line="15" pos:column="9">!=<pos:position pos:line="15" pos:column="11"/></operator> <call><name pos:line="15" pos:column="12">getsockopt<pos:position pos:line="15" pos:column="22"/></name><argument_list pos:line="15" pos:column="22">(<argument><expr><name pos:line="15" pos:column="23">sockfd<pos:position pos:line="15" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="31">IPPROTO_IP<pos:position pos:line="15" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="43">IP_VS_SO_GET_INFO<pos:position pos:line="15" pos:column="60"/></name></expr></argument>, <argument><expr><operator pos:line="15" pos:column="62">(<pos:position pos:line="15" pos:column="63"/></operator><name pos:line="15" pos:column="63">void<pos:position pos:line="15" pos:column="67"/></name> <operator pos:line="15" pos:column="68">*<pos:position pos:line="15" pos:column="69"/></operator><operator pos:line="15" pos:column="69">)<pos:position pos:line="15" pos:column="70"/></operator><operator pos:line="15" pos:column="70">&amp;<pos:position pos:line="15" pos:column="75"/></operator><name pos:line="15" pos:column="71">ipvs_info<pos:position pos:line="15" pos:column="80"/></name></expr></argument>,
                      <argument><expr><operator pos:line="16" pos:column="23">&amp;<pos:position pos:line="16" pos:column="28"/></operator><name pos:line="16" pos:column="24">len<pos:position pos:line="16" pos:column="27"/></name></expr></argument>)<pos:position pos:line="16" pos:column="28"/></argument_list></call></expr>)<pos:position pos:line="16" pos:column="29"/></condition><then pos:line="16" pos:column="29"> <block pos:line="16" pos:column="30">{
    <decl_stmt><decl><type><name pos:line="17" pos:column="5">char<pos:position pos:line="17" pos:column="9"/></name></type> <name><name pos:line="17" pos:column="10">errbuf<pos:position pos:line="17" pos:column="16"/></name><index pos:line="17" pos:column="16">[<expr><literal type="number" pos:line="17" pos:column="17">1024<pos:position pos:line="17" pos:column="21"/></literal></expr>]<pos:position pos:line="17" pos:column="22"/></index></name></decl>;<pos:position pos:line="17" pos:column="23"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="18" pos:column="5">log_err<pos:position pos:line="18" pos:column="12"/></name><argument_list pos:line="18" pos:column="12">(<argument><expr><literal type="string" pos:line="18" pos:column="13">"cipvs_init: getsockopt() failed: %s"<pos:position pos:line="18" pos:column="50"/></literal></expr></argument>,
            <argument><expr><call><name pos:line="19" pos:column="13">sstrerror<pos:position pos:line="19" pos:column="22"/></name><argument_list pos:line="19" pos:column="22">(<argument><expr><name pos:line="19" pos:column="23">errno<pos:position pos:line="19" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="30">errbuf<pos:position pos:line="19" pos:column="36"/></name></expr></argument>, <argument><expr><sizeof pos:line="19" pos:column="38">sizeof<argument_list pos:line="19" pos:column="44">(<argument><expr><name pos:line="19" pos:column="45">errbuf<pos:position pos:line="19" pos:column="51"/></name></expr></argument>)<pos:position pos:line="19" pos:column="52"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="19" pos:column="53"/></argument_list></call></expr></argument>)<pos:position pos:line="19" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="55"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="20" pos:column="5">close<pos:position pos:line="20" pos:column="10"/></name><argument_list pos:line="20" pos:column="10">(<argument><expr><name pos:line="20" pos:column="11">sockfd<pos:position pos:line="20" pos:column="17"/></name></expr></argument>)<pos:position pos:line="20" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="19"/></expr_stmt>
    <expr_stmt><expr><name pos:line="21" pos:column="5">sockfd<pos:position pos:line="21" pos:column="11"/></name> <operator pos:line="21" pos:column="12">=<pos:position pos:line="21" pos:column="13"/></operator> <operator pos:line="21" pos:column="14">-<pos:position pos:line="21" pos:column="15"/></operator><literal type="number" pos:line="21" pos:column="15">1<pos:position pos:line="21" pos:column="16"/></literal></expr>;<pos:position pos:line="21" pos:column="17"/></expr_stmt>
    <return pos:line="22" pos:column="5">return <expr><operator pos:line="22" pos:column="12">-<pos:position pos:line="22" pos:column="13"/></operator><literal type="number" pos:line="22" pos:column="13">1<pos:position pos:line="22" pos:column="14"/></literal></expr>;<pos:position pos:line="22" pos:column="15"/></return>
  }<pos:position pos:line="23" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="25" pos:column="3">/* we need IPVS &gt;= 1.1.4 */</comment>
  <if pos:line="26" pos:column="3">if <condition pos:line="26" pos:column="6">(<expr><name><name pos:line="26" pos:column="7">ipvs_info<pos:position pos:line="26" pos:column="16"/></name><operator pos:line="26" pos:column="16">.<pos:position pos:line="26" pos:column="17"/></operator><name pos:line="26" pos:column="17">version<pos:position pos:line="26" pos:column="24"/></name></name> <operator pos:line="26" pos:column="25">&lt;<pos:position pos:line="26" pos:column="29"/></operator> <operator pos:line="26" pos:column="27">(<pos:position pos:line="26" pos:column="28"/></operator><operator pos:line="26" pos:column="28">(<pos:position pos:line="26" pos:column="29"/></operator><literal type="number" pos:line="26" pos:column="29">1<pos:position pos:line="26" pos:column="30"/></literal> <operator pos:line="26" pos:column="31">&lt;&lt;<pos:position pos:line="26" pos:column="39"/></operator> <literal type="number" pos:line="26" pos:column="34">16<pos:position pos:line="26" pos:column="36"/></literal><operator pos:line="26" pos:column="36">)<pos:position pos:line="26" pos:column="37"/></operator> <operator pos:line="26" pos:column="38">+<pos:position pos:line="26" pos:column="39"/></operator> <operator pos:line="26" pos:column="40">(<pos:position pos:line="26" pos:column="41"/></operator><literal type="number" pos:line="26" pos:column="41">1<pos:position pos:line="26" pos:column="42"/></literal> <operator pos:line="26" pos:column="43">&lt;&lt;<pos:position pos:line="26" pos:column="51"/></operator> <literal type="number" pos:line="26" pos:column="46">8<pos:position pos:line="26" pos:column="47"/></literal><operator pos:line="26" pos:column="47">)<pos:position pos:line="26" pos:column="48"/></operator> <operator pos:line="26" pos:column="49">+<pos:position pos:line="26" pos:column="50"/></operator> <literal type="number" pos:line="26" pos:column="51">4<pos:position pos:line="26" pos:column="52"/></literal><operator pos:line="26" pos:column="52">)<pos:position pos:line="26" pos:column="53"/></operator></expr>)<pos:position pos:line="26" pos:column="54"/></condition><then pos:line="26" pos:column="54"> <block pos:line="26" pos:column="55">{
    <expr_stmt><expr><call><name pos:line="27" pos:column="5">log_err<pos:position pos:line="27" pos:column="12"/></name><argument_list pos:line="27" pos:column="12">(<argument><expr><literal type="string" pos:line="27" pos:column="13">"cipvs_init: IPVS version too old (%d.%d.%d &lt; %d.%d.%d)"<pos:position pos:line="27" pos:column="72"/></literal></expr></argument>,
            <argument><expr><call><name pos:line="28" pos:column="13">NVERSION<pos:position pos:line="28" pos:column="21"/></name><argument_list pos:line="28" pos:column="21">(<argument><expr><name><name pos:line="28" pos:column="22">ipvs_info<pos:position pos:line="28" pos:column="31"/></name><operator pos:line="28" pos:column="31">.<pos:position pos:line="28" pos:column="32"/></operator><name pos:line="28" pos:column="32">version<pos:position pos:line="28" pos:column="39"/></name></name></expr></argument>)<pos:position pos:line="28" pos:column="40"/></argument_list></call></expr></argument>, <argument><expr><literal type="number" pos:line="28" pos:column="42">1<pos:position pos:line="28" pos:column="43"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="28" pos:column="45">1<pos:position pos:line="28" pos:column="46"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="28" pos:column="48">4<pos:position pos:line="28" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="51"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="29" pos:column="5">close<pos:position pos:line="29" pos:column="10"/></name><argument_list pos:line="29" pos:column="10">(<argument><expr><name pos:line="29" pos:column="11">sockfd<pos:position pos:line="29" pos:column="17"/></name></expr></argument>)<pos:position pos:line="29" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="19"/></expr_stmt>
    <expr_stmt><expr><name pos:line="30" pos:column="5">sockfd<pos:position pos:line="30" pos:column="11"/></name> <operator pos:line="30" pos:column="12">=<pos:position pos:line="30" pos:column="13"/></operator> <operator pos:line="30" pos:column="14">-<pos:position pos:line="30" pos:column="15"/></operator><literal type="number" pos:line="30" pos:column="15">1<pos:position pos:line="30" pos:column="16"/></literal></expr>;<pos:position pos:line="30" pos:column="17"/></expr_stmt>
    <return pos:line="31" pos:column="5">return <expr><operator pos:line="31" pos:column="12">-<pos:position pos:line="31" pos:column="13"/></operator><literal type="number" pos:line="31" pos:column="13">1<pos:position pos:line="31" pos:column="14"/></literal></expr>;<pos:position pos:line="31" pos:column="15"/></return>
  }<pos:position pos:line="32" pos:column="4"/></block></then> <else pos:line="32" pos:column="5">else <block pos:line="32" pos:column="10">{
    <expr_stmt><expr><call><name pos:line="33" pos:column="5">log_info<pos:position pos:line="33" pos:column="13"/></name><argument_list pos:line="33" pos:column="13">(<argument><expr><literal type="string" pos:line="33" pos:column="14">"Successfully connected to IPVS %d.%d.%d"<pos:position pos:line="33" pos:column="55"/></literal></expr></argument>,
             <argument><expr><call><name pos:line="34" pos:column="14">NVERSION<pos:position pos:line="34" pos:column="22"/></name><argument_list pos:line="34" pos:column="22">(<argument><expr><name><name pos:line="34" pos:column="23">ipvs_info<pos:position pos:line="34" pos:column="32"/></name><operator pos:line="34" pos:column="32">.<pos:position pos:line="34" pos:column="33"/></operator><name pos:line="34" pos:column="33">version<pos:position pos:line="34" pos:column="40"/></name></name></expr></argument>)<pos:position pos:line="34" pos:column="41"/></argument_list></call></expr></argument>)<pos:position pos:line="34" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="43"/></expr_stmt>
  }<pos:position pos:line="35" pos:column="4"/></block></else></if>
  <return pos:line="36" pos:column="3">return <expr><literal type="number" pos:line="36" pos:column="10">0<pos:position pos:line="36" pos:column="11"/></literal></expr>;<pos:position pos:line="36" pos:column="12"/></return>
}<pos:position pos:line="37" pos:column="2"/></block></function></unit>
