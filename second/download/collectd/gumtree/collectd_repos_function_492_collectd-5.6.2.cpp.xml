<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_492_collectd-5.6.2.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">c_psql_exec_query<pos:position pos:line="1" pos:column="29"/></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name pos:line="1" pos:column="30">c_psql_database_t<pos:position pos:line="1" pos:column="47"/></name> <modifier pos:line="1" pos:column="48">*<pos:position pos:line="1" pos:column="49"/></modifier></type><name pos:line="1" pos:column="49">db<pos:position pos:line="1" pos:column="51"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="53">udb_query_t<pos:position pos:line="1" pos:column="64"/></name> <modifier pos:line="1" pos:column="65">*<pos:position pos:line="1" pos:column="66"/></modifier></type><name pos:line="1" pos:column="66">q<pos:position pos:line="1" pos:column="67"/></name></decl></parameter>,
                             <parameter><decl><type><name pos:line="2" pos:column="30">udb_query_preparation_area_t<pos:position pos:line="2" pos:column="58"/></name> <modifier pos:line="2" pos:column="59">*<pos:position pos:line="2" pos:column="60"/></modifier></type><name pos:line="2" pos:column="60">prep_area<pos:position pos:line="2" pos:column="69"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="70"/></parameter_list> <block pos:line="2" pos:column="71">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">PGresult<pos:position pos:line="3" pos:column="11"/></name> <modifier pos:line="3" pos:column="12">*<pos:position pos:line="3" pos:column="13"/></modifier></type><name pos:line="3" pos:column="13">res<pos:position pos:line="3" pos:column="16"/></name></decl>;<pos:position pos:line="3" pos:column="17"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="5" pos:column="3">c_psql_user_data_t<pos:position pos:line="5" pos:column="21"/></name> <modifier pos:line="5" pos:column="22">*<pos:position pos:line="5" pos:column="23"/></modifier></type><name pos:line="5" pos:column="23">data<pos:position pos:line="5" pos:column="27"/></name></decl>;<pos:position pos:line="5" pos:column="28"/></decl_stmt>

  <decl_stmt><decl><type><specifier pos:line="7" pos:column="3">const<pos:position pos:line="7" pos:column="8"/></specifier> <name pos:line="7" pos:column="9">char<pos:position pos:line="7" pos:column="13"/></name> <modifier pos:line="7" pos:column="14">*<pos:position pos:line="7" pos:column="15"/></modifier></type><name pos:line="7" pos:column="15">host<pos:position pos:line="7" pos:column="19"/></name></decl>;<pos:position pos:line="7" pos:column="20"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="9" pos:column="3">char<pos:position pos:line="9" pos:column="7"/></name> <modifier pos:line="9" pos:column="8">*<pos:position pos:line="9" pos:column="9"/></modifier><modifier pos:line="9" pos:column="9">*<pos:position pos:line="9" pos:column="10"/></modifier></type><name pos:line="9" pos:column="10">column_names<pos:position pos:line="9" pos:column="22"/></name></decl>;<pos:position pos:line="9" pos:column="23"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">char<pos:position pos:line="10" pos:column="7"/></name> <modifier pos:line="10" pos:column="8">*<pos:position pos:line="10" pos:column="9"/></modifier><modifier pos:line="10" pos:column="9">*<pos:position pos:line="10" pos:column="10"/></modifier></type><name pos:line="10" pos:column="10">column_values<pos:position pos:line="10" pos:column="23"/></name></decl>;<pos:position pos:line="10" pos:column="24"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="11" pos:column="3">int<pos:position pos:line="11" pos:column="6"/></name></type> <name pos:line="11" pos:column="7">column_num<pos:position pos:line="11" pos:column="17"/></name></decl>;<pos:position pos:line="11" pos:column="18"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="13" pos:column="3">int<pos:position pos:line="13" pos:column="6"/></name></type> <name pos:line="13" pos:column="7">rows_num<pos:position pos:line="13" pos:column="15"/></name></decl>;<pos:position pos:line="13" pos:column="16"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="14" pos:column="3">int<pos:position pos:line="14" pos:column="6"/></name></type> <name pos:line="14" pos:column="7">status<pos:position pos:line="14" pos:column="13"/></name></decl>;<pos:position pos:line="14" pos:column="14"/></decl_stmt>

  <comment type="block" pos:line="16" pos:column="3">/* The user data may hold parameter information, but may be NULL. */</comment>
  <expr_stmt><expr><name pos:line="17" pos:column="3">data<pos:position pos:line="17" pos:column="7"/></name> <operator pos:line="17" pos:column="8">=<pos:position pos:line="17" pos:column="9"/></operator> <call><name pos:line="17" pos:column="10">udb_query_get_user_data<pos:position pos:line="17" pos:column="33"/></name><argument_list pos:line="17" pos:column="33">(<argument><expr><name pos:line="17" pos:column="34">q<pos:position pos:line="17" pos:column="35"/></name></expr></argument>)<pos:position pos:line="17" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="37"/></expr_stmt>

  <comment type="block" pos:line="19" pos:column="3">/* Versions up to `3' don't know how to handle parameters. */</comment>
  <if pos:line="20" pos:column="3">if <condition pos:line="20" pos:column="6">(<expr><literal type="number" pos:line="20" pos:column="7">3<pos:position pos:line="20" pos:column="8"/></literal> <operator pos:line="20" pos:column="9">&lt;=<pos:position pos:line="20" pos:column="14"/></operator> <name><name pos:line="20" pos:column="12">db<pos:position pos:line="20" pos:column="14"/></name><operator pos:line="20" pos:column="14">-&gt;<pos:position pos:line="20" pos:column="19"/></operator><name pos:line="20" pos:column="16">proto_version<pos:position pos:line="20" pos:column="29"/></name></name></expr>)<pos:position pos:line="20" pos:column="30"/></condition><then pos:line="20" pos:column="30">
    <block type="pseudo"><expr_stmt><expr><name pos:line="21" pos:column="5">res<pos:position pos:line="21" pos:column="8"/></name> <operator pos:line="21" pos:column="9">=<pos:position pos:line="21" pos:column="10"/></operator> <call><name pos:line="21" pos:column="11">c_psql_exec_query_params<pos:position pos:line="21" pos:column="35"/></name><argument_list pos:line="21" pos:column="35">(<argument><expr><name pos:line="21" pos:column="36">db<pos:position pos:line="21" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="40">q<pos:position pos:line="21" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="43">data<pos:position pos:line="21" pos:column="47"/></name></expr></argument>)<pos:position pos:line="21" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="49"/></expr_stmt></block></then>
  <elseif pos:line="22" pos:column="3">else <if pos:line="22" pos:column="8">if <condition pos:line="22" pos:column="11">(<expr><operator pos:line="22" pos:column="12">(<pos:position pos:line="22" pos:column="13"/></operator><name pos:line="22" pos:column="13">NULL<pos:position pos:line="22" pos:column="17"/></name> <operator pos:line="22" pos:column="18">==<pos:position pos:line="22" pos:column="20"/></operator> <name pos:line="22" pos:column="21">data<pos:position pos:line="22" pos:column="25"/></name><operator pos:line="22" pos:column="25">)<pos:position pos:line="22" pos:column="26"/></operator> <operator pos:line="22" pos:column="27">||<pos:position pos:line="22" pos:column="29"/></operator> <operator pos:line="22" pos:column="30">(<pos:position pos:line="22" pos:column="31"/></operator><literal type="number" pos:line="22" pos:column="31">0<pos:position pos:line="22" pos:column="32"/></literal> <operator pos:line="22" pos:column="33">==<pos:position pos:line="22" pos:column="35"/></operator> <name><name pos:line="22" pos:column="36">data<pos:position pos:line="22" pos:column="40"/></name><operator pos:line="22" pos:column="40">-&gt;<pos:position pos:line="22" pos:column="45"/></operator><name pos:line="22" pos:column="42">params_num<pos:position pos:line="22" pos:column="52"/></name></name><operator pos:line="22" pos:column="52">)<pos:position pos:line="22" pos:column="53"/></operator></expr>)<pos:position pos:line="22" pos:column="54"/></condition><then pos:line="22" pos:column="54">
    <block type="pseudo"><expr_stmt><expr><name pos:line="23" pos:column="5">res<pos:position pos:line="23" pos:column="8"/></name> <operator pos:line="23" pos:column="9">=<pos:position pos:line="23" pos:column="10"/></operator> <call><name pos:line="23" pos:column="11">c_psql_exec_query_noparams<pos:position pos:line="23" pos:column="37"/></name><argument_list pos:line="23" pos:column="37">(<argument><expr><name pos:line="23" pos:column="38">db<pos:position pos:line="23" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="42">q<pos:position pos:line="23" pos:column="43"/></name></expr></argument>)<pos:position pos:line="23" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="45"/></expr_stmt></block></then></if></elseif>
  <else pos:line="24" pos:column="3">else <block pos:line="24" pos:column="8">{
    <expr_stmt><expr><call><name pos:line="25" pos:column="5">log_err<pos:position pos:line="25" pos:column="12"/></name><argument_list pos:line="25" pos:column="12">(<argument><expr><literal type="string" pos:line="25" pos:column="13">"Connection to database \"%s\" (%s) does not support "<pos:position pos:line="25" pos:column="67"/></literal>
            <literal type="string" pos:line="26" pos:column="13">"parameters (protocol version %d) - "<pos:position pos:line="26" pos:column="50"/></literal>
            <literal type="string" pos:line="27" pos:column="13">"cannot execute query \"%s\"."<pos:position pos:line="27" pos:column="43"/></literal></expr></argument>,
            <argument><expr><name><name pos:line="28" pos:column="13">db<pos:position pos:line="28" pos:column="15"/></name><operator pos:line="28" pos:column="15">-&gt;<pos:position pos:line="28" pos:column="20"/></operator><name pos:line="28" pos:column="17">database<pos:position pos:line="28" pos:column="25"/></name></name></expr></argument>, <argument><expr><name><name pos:line="28" pos:column="27">db<pos:position pos:line="28" pos:column="29"/></name><operator pos:line="28" pos:column="29">-&gt;<pos:position pos:line="28" pos:column="34"/></operator><name pos:line="28" pos:column="31">instance<pos:position pos:line="28" pos:column="39"/></name></name></expr></argument>, <argument><expr><name><name pos:line="28" pos:column="41">db<pos:position pos:line="28" pos:column="43"/></name><operator pos:line="28" pos:column="43">-&gt;<pos:position pos:line="28" pos:column="48"/></operator><name pos:line="28" pos:column="45">proto_version<pos:position pos:line="28" pos:column="58"/></name></name></expr></argument>,
            <argument><expr><call><name pos:line="29" pos:column="13">udb_query_get_name<pos:position pos:line="29" pos:column="31"/></name><argument_list pos:line="29" pos:column="31">(<argument><expr><name pos:line="29" pos:column="32">q<pos:position pos:line="29" pos:column="33"/></name></expr></argument>)<pos:position pos:line="29" pos:column="34"/></argument_list></call></expr></argument>)<pos:position pos:line="29" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="36"/></expr_stmt>
    <return pos:line="30" pos:column="5">return <expr><operator pos:line="30" pos:column="12">-<pos:position pos:line="30" pos:column="13"/></operator><literal type="number" pos:line="30" pos:column="13">1<pos:position pos:line="30" pos:column="14"/></literal></expr>;<pos:position pos:line="30" pos:column="15"/></return>
  }<pos:position pos:line="31" pos:column="4"/></block></else></if>

  <comment type="block" pos:line="33" pos:column="3">/* give c_psql_write() a chance to acquire the lock if called recursively
   * through dispatch_values(); this will happen if, both, queries and
   * writers are configured for a single connection */</comment>
  <expr_stmt><expr><call><name pos:line="36" pos:column="3">pthread_mutex_unlock<pos:position pos:line="36" pos:column="23"/></name><argument_list pos:line="36" pos:column="23">(<argument><expr><operator pos:line="36" pos:column="24">&amp;<pos:position pos:line="36" pos:column="29"/></operator><name><name pos:line="36" pos:column="25">db<pos:position pos:line="36" pos:column="27"/></name><operator pos:line="36" pos:column="27">-&gt;<pos:position pos:line="36" pos:column="32"/></operator><name pos:line="36" pos:column="29">db_lock<pos:position pos:line="36" pos:column="36"/></name></name></expr></argument>)<pos:position pos:line="36" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="38"/></expr_stmt>

  <expr_stmt><expr><name pos:line="38" pos:column="3">column_names<pos:position pos:line="38" pos:column="15"/></name> <operator pos:line="38" pos:column="16">=<pos:position pos:line="38" pos:column="17"/></operator> <name pos:line="38" pos:column="18">NULL<pos:position pos:line="38" pos:column="22"/></name></expr>;<pos:position pos:line="38" pos:column="23"/></expr_stmt>
  <expr_stmt><expr><name pos:line="39" pos:column="3">column_values<pos:position pos:line="39" pos:column="16"/></name> <operator pos:line="39" pos:column="17">=<pos:position pos:line="39" pos:column="18"/></operator> <name pos:line="39" pos:column="19">NULL<pos:position pos:line="39" pos:column="23"/></name></expr>;<pos:position pos:line="39" pos:column="24"/></expr_stmt>

  <if pos:line="41" pos:column="3">if <condition pos:line="41" pos:column="6">(<expr><name pos:line="41" pos:column="7">PGRES_TUPLES_OK<pos:position pos:line="41" pos:column="22"/></name> <operator pos:line="41" pos:column="23">!=<pos:position pos:line="41" pos:column="25"/></operator> <call><name pos:line="41" pos:column="26">PQresultStatus<pos:position pos:line="41" pos:column="40"/></name><argument_list pos:line="41" pos:column="40">(<argument><expr><name pos:line="41" pos:column="41">res<pos:position pos:line="41" pos:column="44"/></name></expr></argument>)<pos:position pos:line="41" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="41" pos:column="46"/></condition><then pos:line="41" pos:column="46"> <block pos:line="41" pos:column="47">{
    <expr_stmt><expr><call><name pos:line="42" pos:column="5">pthread_mutex_lock<pos:position pos:line="42" pos:column="23"/></name><argument_list pos:line="42" pos:column="23">(<argument><expr><operator pos:line="42" pos:column="24">&amp;<pos:position pos:line="42" pos:column="29"/></operator><name><name pos:line="42" pos:column="25">db<pos:position pos:line="42" pos:column="27"/></name><operator pos:line="42" pos:column="27">-&gt;<pos:position pos:line="42" pos:column="32"/></operator><name pos:line="42" pos:column="29">db_lock<pos:position pos:line="42" pos:column="36"/></name></name></expr></argument>)<pos:position pos:line="42" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="38"/></expr_stmt>

    <if pos:line="44" pos:column="5">if <condition pos:line="44" pos:column="8">(<expr><operator pos:line="44" pos:column="9">(<pos:position pos:line="44" pos:column="10"/></operator><name pos:line="44" pos:column="10">CONNECTION_OK<pos:position pos:line="44" pos:column="23"/></name> <operator pos:line="44" pos:column="24">!=<pos:position pos:line="44" pos:column="26"/></operator> <call><name pos:line="44" pos:column="27">PQstatus<pos:position pos:line="44" pos:column="35"/></name><argument_list pos:line="44" pos:column="35">(<argument><expr><name><name pos:line="44" pos:column="36">db<pos:position pos:line="44" pos:column="38"/></name><operator pos:line="44" pos:column="38">-&gt;<pos:position pos:line="44" pos:column="43"/></operator><name pos:line="44" pos:column="40">conn<pos:position pos:line="44" pos:column="44"/></name></name></expr></argument>)<pos:position pos:line="44" pos:column="45"/></argument_list></call><operator pos:line="44" pos:column="45">)<pos:position pos:line="44" pos:column="46"/></operator> <operator pos:line="44" pos:column="47">&amp;&amp;<pos:position pos:line="44" pos:column="57"/></operator>
        <operator pos:line="45" pos:column="9">(<pos:position pos:line="45" pos:column="10"/></operator><literal type="number" pos:line="45" pos:column="10">0<pos:position pos:line="45" pos:column="11"/></literal> <operator pos:line="45" pos:column="12">==<pos:position pos:line="45" pos:column="14"/></operator> <call><name pos:line="45" pos:column="15">c_psql_check_connection<pos:position pos:line="45" pos:column="38"/></name><argument_list pos:line="45" pos:column="38">(<argument><expr><name pos:line="45" pos:column="39">db<pos:position pos:line="45" pos:column="41"/></name></expr></argument>)<pos:position pos:line="45" pos:column="42"/></argument_list></call><operator pos:line="45" pos:column="42">)<pos:position pos:line="45" pos:column="43"/></operator></expr>)<pos:position pos:line="45" pos:column="44"/></condition><then pos:line="45" pos:column="44"> <block pos:line="45" pos:column="45">{
      <expr_stmt><expr><call><name pos:line="46" pos:column="7">PQclear<pos:position pos:line="46" pos:column="14"/></name><argument_list pos:line="46" pos:column="14">(<argument><expr><name pos:line="46" pos:column="15">res<pos:position pos:line="46" pos:column="18"/></name></expr></argument>)<pos:position pos:line="46" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="20"/></expr_stmt>
      <return pos:line="47" pos:column="7">return <expr><call><name pos:line="47" pos:column="14">c_psql_exec_query<pos:position pos:line="47" pos:column="31"/></name><argument_list pos:line="47" pos:column="31">(<argument><expr><name pos:line="47" pos:column="32">db<pos:position pos:line="47" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="36">q<pos:position pos:line="47" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="39">prep_area<pos:position pos:line="47" pos:column="48"/></name></expr></argument>)<pos:position pos:line="47" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="50"/></return>
    }<pos:position pos:line="48" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="50" pos:column="5">log_err<pos:position pos:line="50" pos:column="12"/></name><argument_list pos:line="50" pos:column="12">(<argument><expr><literal type="string" pos:line="50" pos:column="13">"Failed to execute SQL query: %s"<pos:position pos:line="50" pos:column="46"/></literal></expr></argument>, <argument><expr><call><name pos:line="50" pos:column="48">PQerrorMessage<pos:position pos:line="50" pos:column="62"/></name><argument_list pos:line="50" pos:column="62">(<argument><expr><name><name pos:line="50" pos:column="63">db<pos:position pos:line="50" pos:column="65"/></name><operator pos:line="50" pos:column="65">-&gt;<pos:position pos:line="50" pos:column="70"/></operator><name pos:line="50" pos:column="67">conn<pos:position pos:line="50" pos:column="71"/></name></name></expr></argument>)<pos:position pos:line="50" pos:column="72"/></argument_list></call></expr></argument>)<pos:position pos:line="50" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="74"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="51" pos:column="5">log_info<pos:position pos:line="51" pos:column="13"/></name><argument_list pos:line="51" pos:column="13">(<argument><expr><literal type="string" pos:line="51" pos:column="14">"SQL query was: %s"<pos:position pos:line="51" pos:column="33"/></literal></expr></argument>, <argument><expr><call><name pos:line="51" pos:column="35">udb_query_get_statement<pos:position pos:line="51" pos:column="58"/></name><argument_list pos:line="51" pos:column="58">(<argument><expr><name pos:line="51" pos:column="59">q<pos:position pos:line="51" pos:column="60"/></name></expr></argument>)<pos:position pos:line="51" pos:column="61"/></argument_list></call></expr></argument>)<pos:position pos:line="51" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="63"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="52" pos:column="5">PQclear<pos:position pos:line="52" pos:column="12"/></name><argument_list pos:line="52" pos:column="12">(<argument><expr><name pos:line="52" pos:column="13">res<pos:position pos:line="52" pos:column="16"/></name></expr></argument>)<pos:position pos:line="52" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="18"/></expr_stmt>
    <return pos:line="53" pos:column="5">return <expr><operator pos:line="53" pos:column="12">-<pos:position pos:line="53" pos:column="13"/></operator><literal type="number" pos:line="53" pos:column="13">1<pos:position pos:line="53" pos:column="14"/></literal></expr>;<pos:position pos:line="53" pos:column="15"/></return>
  }<pos:position pos:line="54" pos:column="4"/></block></then></if>

<cpp:define pos:line="56" pos:column="1">#<cpp:directive pos:line="56" pos:column="2">define<pos:position pos:line="56" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="56" pos:column="9">BAIL_OUT<pos:position pos:line="56" pos:column="17"/></name><parameter_list pos:line="56" pos:column="17">(<parameter><type><name pos:line="56" pos:column="18">status<pos:position pos:line="56" pos:column="24"/></name></type></parameter>)<pos:position pos:line="56" pos:column="25"/></parameter_list></cpp:macro>                                                       \
  <cpp:value pos:line="57" pos:column="3">sfree(column_names);                                                         \
  sfree(column_values);                                                        \
  PQclear(res);                                                                \
  pthread_mutex_lock(&amp;db-&gt;db_lock);                                            \
  return status<pos:position pos:line="61" pos:column="16"/></cpp:value></cpp:define>

  <expr_stmt><expr><name pos:line="63" pos:column="3">rows_num<pos:position pos:line="63" pos:column="11"/></name> <operator pos:line="63" pos:column="12">=<pos:position pos:line="63" pos:column="13"/></operator> <call><name pos:line="63" pos:column="14">PQntuples<pos:position pos:line="63" pos:column="23"/></name><argument_list pos:line="63" pos:column="23">(<argument><expr><name pos:line="63" pos:column="24">res<pos:position pos:line="63" pos:column="27"/></name></expr></argument>)<pos:position pos:line="63" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="29"/></expr_stmt>
  <if pos:line="64" pos:column="3">if <condition pos:line="64" pos:column="6">(<expr><literal type="number" pos:line="64" pos:column="7">1<pos:position pos:line="64" pos:column="8"/></literal> <operator pos:line="64" pos:column="9">&gt;<pos:position pos:line="64" pos:column="13"/></operator> <name pos:line="64" pos:column="11">rows_num<pos:position pos:line="64" pos:column="19"/></name></expr>)<pos:position pos:line="64" pos:column="20"/></condition><then pos:line="64" pos:column="20"> <block pos:line="64" pos:column="21">{
    <expr_stmt><expr><call><name pos:line="65" pos:column="5">BAIL_OUT<pos:position pos:line="65" pos:column="13"/></name><argument_list pos:line="65" pos:column="13">(<argument><expr><literal type="number" pos:line="65" pos:column="14">0<pos:position pos:line="65" pos:column="15"/></literal></expr></argument>)<pos:position pos:line="65" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="17"/></expr_stmt>
  }<pos:position pos:line="66" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="68" pos:column="3">column_num<pos:position pos:line="68" pos:column="13"/></name> <operator pos:line="68" pos:column="14">=<pos:position pos:line="68" pos:column="15"/></operator> <call><name pos:line="68" pos:column="16">PQnfields<pos:position pos:line="68" pos:column="25"/></name><argument_list pos:line="68" pos:column="25">(<argument><expr><name pos:line="68" pos:column="26">res<pos:position pos:line="68" pos:column="29"/></name></expr></argument>)<pos:position pos:line="68" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="31"/></expr_stmt>
  <expr_stmt><expr><name pos:line="69" pos:column="3">column_names<pos:position pos:line="69" pos:column="15"/></name> <operator pos:line="69" pos:column="16">=<pos:position pos:line="69" pos:column="17"/></operator> <operator pos:line="69" pos:column="18">(<pos:position pos:line="69" pos:column="19"/></operator><name pos:line="69" pos:column="19">char<pos:position pos:line="69" pos:column="23"/></name> <operator pos:line="69" pos:column="24">*<pos:position pos:line="69" pos:column="25"/></operator><operator pos:line="69" pos:column="25">*<pos:position pos:line="69" pos:column="26"/></operator><operator pos:line="69" pos:column="26">)<pos:position pos:line="69" pos:column="27"/></operator><call><name pos:line="69" pos:column="27">calloc<pos:position pos:line="69" pos:column="33"/></name><argument_list pos:line="69" pos:column="33">(<argument><expr><name pos:line="69" pos:column="34">column_num<pos:position pos:line="69" pos:column="44"/></name></expr></argument>, <argument><expr><sizeof pos:line="69" pos:column="46">sizeof<argument_list pos:line="69" pos:column="52">(<argument><expr><name pos:line="69" pos:column="53">char<pos:position pos:line="69" pos:column="57"/></name> <operator pos:line="69" pos:column="58">*<pos:position pos:line="69" pos:column="59"/></operator></expr></argument>)<pos:position pos:line="69" pos:column="60"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="69" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="62"/></expr_stmt>
  <if pos:line="70" pos:column="3">if <condition pos:line="70" pos:column="6">(<expr><name pos:line="70" pos:column="7">NULL<pos:position pos:line="70" pos:column="11"/></name> <operator pos:line="70" pos:column="12">==<pos:position pos:line="70" pos:column="14"/></operator> <name pos:line="70" pos:column="15">column_names<pos:position pos:line="70" pos:column="27"/></name></expr>)<pos:position pos:line="70" pos:column="28"/></condition><then pos:line="70" pos:column="28"> <block pos:line="70" pos:column="29">{
    <expr_stmt><expr><call><name pos:line="71" pos:column="5">log_err<pos:position pos:line="71" pos:column="12"/></name><argument_list pos:line="71" pos:column="12">(<argument><expr><literal type="string" pos:line="71" pos:column="13">"calloc failed."<pos:position pos:line="71" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="71" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="31"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="72" pos:column="5">BAIL_OUT<pos:position pos:line="72" pos:column="13"/></name><argument_list pos:line="72" pos:column="13">(<argument><expr><operator pos:line="72" pos:column="14">-<pos:position pos:line="72" pos:column="15"/></operator><literal type="number" pos:line="72" pos:column="15">1<pos:position pos:line="72" pos:column="16"/></literal></expr></argument>)<pos:position pos:line="72" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="18"/></expr_stmt>
  }<pos:position pos:line="73" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="75" pos:column="3">column_values<pos:position pos:line="75" pos:column="16"/></name> <operator pos:line="75" pos:column="17">=<pos:position pos:line="75" pos:column="18"/></operator> <operator pos:line="75" pos:column="19">(<pos:position pos:line="75" pos:column="20"/></operator><name pos:line="75" pos:column="20">char<pos:position pos:line="75" pos:column="24"/></name> <operator pos:line="75" pos:column="25">*<pos:position pos:line="75" pos:column="26"/></operator><operator pos:line="75" pos:column="26">*<pos:position pos:line="75" pos:column="27"/></operator><operator pos:line="75" pos:column="27">)<pos:position pos:line="75" pos:column="28"/></operator><call><name pos:line="75" pos:column="28">calloc<pos:position pos:line="75" pos:column="34"/></name><argument_list pos:line="75" pos:column="34">(<argument><expr><name pos:line="75" pos:column="35">column_num<pos:position pos:line="75" pos:column="45"/></name></expr></argument>, <argument><expr><sizeof pos:line="75" pos:column="47">sizeof<argument_list pos:line="75" pos:column="53">(<argument><expr><name pos:line="75" pos:column="54">char<pos:position pos:line="75" pos:column="58"/></name> <operator pos:line="75" pos:column="59">*<pos:position pos:line="75" pos:column="60"/></operator></expr></argument>)<pos:position pos:line="75" pos:column="61"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="75" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="63"/></expr_stmt>
  <if pos:line="76" pos:column="3">if <condition pos:line="76" pos:column="6">(<expr><name pos:line="76" pos:column="7">NULL<pos:position pos:line="76" pos:column="11"/></name> <operator pos:line="76" pos:column="12">==<pos:position pos:line="76" pos:column="14"/></operator> <name pos:line="76" pos:column="15">column_values<pos:position pos:line="76" pos:column="28"/></name></expr>)<pos:position pos:line="76" pos:column="29"/></condition><then pos:line="76" pos:column="29"> <block pos:line="76" pos:column="30">{
    <expr_stmt><expr><call><name pos:line="77" pos:column="5">log_err<pos:position pos:line="77" pos:column="12"/></name><argument_list pos:line="77" pos:column="12">(<argument><expr><literal type="string" pos:line="77" pos:column="13">"calloc failed."<pos:position pos:line="77" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="77" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="31"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="78" pos:column="5">BAIL_OUT<pos:position pos:line="78" pos:column="13"/></name><argument_list pos:line="78" pos:column="13">(<argument><expr><operator pos:line="78" pos:column="14">-<pos:position pos:line="78" pos:column="15"/></operator><literal type="number" pos:line="78" pos:column="15">1<pos:position pos:line="78" pos:column="16"/></literal></expr></argument>)<pos:position pos:line="78" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="18"/></expr_stmt>
  }<pos:position pos:line="79" pos:column="4"/></block></then></if>

  <for pos:line="81" pos:column="3">for <control pos:line="81" pos:column="7">(<init><decl><type><name pos:line="81" pos:column="8">int<pos:position pos:line="81" pos:column="11"/></name></type> <name pos:line="81" pos:column="12">col<pos:position pos:line="81" pos:column="15"/></name> <init pos:line="81" pos:column="16">= <expr><literal type="number" pos:line="81" pos:column="18">0<pos:position pos:line="81" pos:column="19"/></literal></expr></init></decl>;<pos:position pos:line="81" pos:column="20"/></init> <condition><expr><name pos:line="81" pos:column="21">col<pos:position pos:line="81" pos:column="24"/></name> <operator pos:line="81" pos:column="25">&lt;<pos:position pos:line="81" pos:column="29"/></operator> <name pos:line="81" pos:column="27">column_num<pos:position pos:line="81" pos:column="37"/></name></expr>;<pos:position pos:line="81" pos:column="38"/></condition> <incr><expr><operator pos:line="81" pos:column="39">++<pos:position pos:line="81" pos:column="41"/></operator><name pos:line="81" pos:column="41">col<pos:position pos:line="81" pos:column="44"/></name></expr></incr>)<pos:position pos:line="81" pos:column="45"/></control> <block pos:line="81" pos:column="46">{
    <comment type="block" pos:line="82" pos:column="5">/* Pointers returned by `PQfname' are freed by `PQclear' via
     * `BAIL_OUT'. */</comment>
    <expr_stmt><expr><name><name pos:line="84" pos:column="5">column_names<pos:position pos:line="84" pos:column="17"/></name><index pos:line="84" pos:column="17">[<expr><name pos:line="84" pos:column="18">col<pos:position pos:line="84" pos:column="21"/></name></expr>]<pos:position pos:line="84" pos:column="22"/></index></name> <operator pos:line="84" pos:column="23">=<pos:position pos:line="84" pos:column="24"/></operator> <call><name pos:line="84" pos:column="25">PQfname<pos:position pos:line="84" pos:column="32"/></name><argument_list pos:line="84" pos:column="32">(<argument><expr><name pos:line="84" pos:column="33">res<pos:position pos:line="84" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="84" pos:column="38">col<pos:position pos:line="84" pos:column="41"/></name></expr></argument>)<pos:position pos:line="84" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="43"/></expr_stmt>
    <if pos:line="85" pos:column="5">if <condition pos:line="85" pos:column="8">(<expr><name pos:line="85" pos:column="9">NULL<pos:position pos:line="85" pos:column="13"/></name> <operator pos:line="85" pos:column="14">==<pos:position pos:line="85" pos:column="16"/></operator> <name><name pos:line="85" pos:column="17">column_names<pos:position pos:line="85" pos:column="29"/></name><index pos:line="85" pos:column="29">[<expr><name pos:line="85" pos:column="30">col<pos:position pos:line="85" pos:column="33"/></name></expr>]<pos:position pos:line="85" pos:column="34"/></index></name></expr>)<pos:position pos:line="85" pos:column="35"/></condition><then pos:line="85" pos:column="35"> <block pos:line="85" pos:column="36">{
      <expr_stmt><expr><call><name pos:line="86" pos:column="7">log_err<pos:position pos:line="86" pos:column="14"/></name><argument_list pos:line="86" pos:column="14">(<argument><expr><literal type="string" pos:line="86" pos:column="15">"Failed to resolve name of column %i."<pos:position pos:line="86" pos:column="53"/></literal></expr></argument>, <argument><expr><name pos:line="86" pos:column="55">col<pos:position pos:line="86" pos:column="58"/></name></expr></argument>)<pos:position pos:line="86" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="60"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="87" pos:column="7">BAIL_OUT<pos:position pos:line="87" pos:column="15"/></name><argument_list pos:line="87" pos:column="15">(<argument><expr><operator pos:line="87" pos:column="16">-<pos:position pos:line="87" pos:column="17"/></operator><literal type="number" pos:line="87" pos:column="17">1<pos:position pos:line="87" pos:column="18"/></literal></expr></argument>)<pos:position pos:line="87" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="20"/></expr_stmt>
    }<pos:position pos:line="88" pos:column="6"/></block></then></if>
  }<pos:position pos:line="89" pos:column="4"/></block></for>

  <if pos:line="91" pos:column="3">if <condition pos:line="91" pos:column="6">(<expr><call><name pos:line="91" pos:column="7">C_PSQL_IS_UNIX_DOMAIN_SOCKET<pos:position pos:line="91" pos:column="35"/></name><argument_list pos:line="91" pos:column="35">(<argument><expr><name><name pos:line="91" pos:column="36">db<pos:position pos:line="91" pos:column="38"/></name><operator pos:line="91" pos:column="38">-&gt;<pos:position pos:line="91" pos:column="43"/></operator><name pos:line="91" pos:column="40">host<pos:position pos:line="91" pos:column="44"/></name></name></expr></argument>)<pos:position pos:line="91" pos:column="45"/></argument_list></call> <operator pos:line="91" pos:column="46">||<pos:position pos:line="91" pos:column="48"/></operator>
      <operator pos:line="92" pos:column="7">(<pos:position pos:line="92" pos:column="8"/></operator><literal type="number" pos:line="92" pos:column="8">0<pos:position pos:line="92" pos:column="9"/></literal> <operator pos:line="92" pos:column="10">==<pos:position pos:line="92" pos:column="12"/></operator> <call><name pos:line="92" pos:column="13">strcmp<pos:position pos:line="92" pos:column="19"/></name><argument_list pos:line="92" pos:column="19">(<argument><expr><name><name pos:line="92" pos:column="20">db<pos:position pos:line="92" pos:column="22"/></name><operator pos:line="92" pos:column="22">-&gt;<pos:position pos:line="92" pos:column="27"/></operator><name pos:line="92" pos:column="24">host<pos:position pos:line="92" pos:column="28"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="92" pos:column="30">"127.0.0.1"<pos:position pos:line="92" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="92" pos:column="42"/></argument_list></call><operator pos:line="92" pos:column="42">)<pos:position pos:line="92" pos:column="43"/></operator> <operator pos:line="92" pos:column="44">||<pos:position pos:line="92" pos:column="46"/></operator>
      <operator pos:line="93" pos:column="7">(<pos:position pos:line="93" pos:column="8"/></operator><literal type="number" pos:line="93" pos:column="8">0<pos:position pos:line="93" pos:column="9"/></literal> <operator pos:line="93" pos:column="10">==<pos:position pos:line="93" pos:column="12"/></operator> <call><name pos:line="93" pos:column="13">strcmp<pos:position pos:line="93" pos:column="19"/></name><argument_list pos:line="93" pos:column="19">(<argument><expr><name><name pos:line="93" pos:column="20">db<pos:position pos:line="93" pos:column="22"/></name><operator pos:line="93" pos:column="22">-&gt;<pos:position pos:line="93" pos:column="27"/></operator><name pos:line="93" pos:column="24">host<pos:position pos:line="93" pos:column="28"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="93" pos:column="30">"localhost"<pos:position pos:line="93" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="93" pos:column="42"/></argument_list></call><operator pos:line="93" pos:column="42">)<pos:position pos:line="93" pos:column="43"/></operator></expr>)<pos:position pos:line="93" pos:column="44"/></condition><then pos:line="93" pos:column="44">
    <block type="pseudo"><expr_stmt><expr><name pos:line="94" pos:column="5">host<pos:position pos:line="94" pos:column="9"/></name> <operator pos:line="94" pos:column="10">=<pos:position pos:line="94" pos:column="11"/></operator> <name pos:line="94" pos:column="12">hostname_g<pos:position pos:line="94" pos:column="22"/></name></expr>;<pos:position pos:line="94" pos:column="23"/></expr_stmt></block></then>
  <else pos:line="95" pos:column="3">else
    <block type="pseudo"><expr_stmt><expr><name pos:line="96" pos:column="5">host<pos:position pos:line="96" pos:column="9"/></name> <operator pos:line="96" pos:column="10">=<pos:position pos:line="96" pos:column="11"/></operator> <name><name pos:line="96" pos:column="12">db<pos:position pos:line="96" pos:column="14"/></name><operator pos:line="96" pos:column="14">-&gt;<pos:position pos:line="96" pos:column="19"/></operator><name pos:line="96" pos:column="16">host<pos:position pos:line="96" pos:column="20"/></name></name></expr>;<pos:position pos:line="96" pos:column="21"/></expr_stmt></block></else></if>

  <expr_stmt><expr><name pos:line="98" pos:column="3">status<pos:position pos:line="98" pos:column="9"/></name> <operator pos:line="98" pos:column="10">=<pos:position pos:line="98" pos:column="11"/></operator>
      <call><name pos:line="99" pos:column="7">udb_query_prepare_result<pos:position pos:line="99" pos:column="31"/></name><argument_list pos:line="99" pos:column="31">(<argument><expr><name pos:line="99" pos:column="32">q<pos:position pos:line="99" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="99" pos:column="35">prep_area<pos:position pos:line="99" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="99" pos:column="46">host<pos:position pos:line="99" pos:column="50"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="99" pos:column="52">"postgresql"<pos:position pos:line="99" pos:column="64"/></literal></expr></argument>, <argument><expr><name><name pos:line="99" pos:column="66">db<pos:position pos:line="99" pos:column="68"/></name><operator pos:line="99" pos:column="68">-&gt;<pos:position pos:line="99" pos:column="73"/></operator><name pos:line="99" pos:column="70">instance<pos:position pos:line="99" pos:column="78"/></name></name></expr></argument>,
                               <argument><expr><name pos:line="100" pos:column="32">column_names<pos:position pos:line="100" pos:column="44"/></name></expr></argument>, <argument><expr><operator pos:line="100" pos:column="46">(<pos:position pos:line="100" pos:column="47"/></operator><name pos:line="100" pos:column="47">size_t<pos:position pos:line="100" pos:column="53"/></name><operator pos:line="100" pos:column="53">)<pos:position pos:line="100" pos:column="54"/></operator><name pos:line="100" pos:column="54">column_num<pos:position pos:line="100" pos:column="64"/></name></expr></argument>, <argument><expr><name><name pos:line="100" pos:column="66">db<pos:position pos:line="100" pos:column="68"/></name><operator pos:line="100" pos:column="68">-&gt;<pos:position pos:line="100" pos:column="73"/></operator><name pos:line="100" pos:column="70">interval<pos:position pos:line="100" pos:column="78"/></name></name></expr></argument>)<pos:position pos:line="100" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="100" pos:column="80"/></expr_stmt>
  <if pos:line="101" pos:column="3">if <condition pos:line="101" pos:column="6">(<expr><literal type="number" pos:line="101" pos:column="7">0<pos:position pos:line="101" pos:column="8"/></literal> <operator pos:line="101" pos:column="9">!=<pos:position pos:line="101" pos:column="11"/></operator> <name pos:line="101" pos:column="12">status<pos:position pos:line="101" pos:column="18"/></name></expr>)<pos:position pos:line="101" pos:column="19"/></condition><then pos:line="101" pos:column="19"> <block pos:line="101" pos:column="20">{
    <expr_stmt><expr><call><name pos:line="102" pos:column="5">log_err<pos:position pos:line="102" pos:column="12"/></name><argument_list pos:line="102" pos:column="12">(<argument><expr><literal type="string" pos:line="102" pos:column="13">"udb_query_prepare_result failed with status %i."<pos:position pos:line="102" pos:column="62"/></literal></expr></argument>, <argument><expr><name pos:line="102" pos:column="64">status<pos:position pos:line="102" pos:column="70"/></name></expr></argument>)<pos:position pos:line="102" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="102" pos:column="72"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="103" pos:column="5">BAIL_OUT<pos:position pos:line="103" pos:column="13"/></name><argument_list pos:line="103" pos:column="13">(<argument><expr><operator pos:line="103" pos:column="14">-<pos:position pos:line="103" pos:column="15"/></operator><literal type="number" pos:line="103" pos:column="15">1<pos:position pos:line="103" pos:column="16"/></literal></expr></argument>)<pos:position pos:line="103" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="103" pos:column="18"/></expr_stmt>
  }<pos:position pos:line="104" pos:column="4"/></block></then></if>

  <for pos:line="106" pos:column="3">for <control pos:line="106" pos:column="7">(<init><decl><type><name pos:line="106" pos:column="8">int<pos:position pos:line="106" pos:column="11"/></name></type> <name pos:line="106" pos:column="12">row<pos:position pos:line="106" pos:column="15"/></name> <init pos:line="106" pos:column="16">= <expr><literal type="number" pos:line="106" pos:column="18">0<pos:position pos:line="106" pos:column="19"/></literal></expr></init></decl>;<pos:position pos:line="106" pos:column="20"/></init> <condition><expr><name pos:line="106" pos:column="21">row<pos:position pos:line="106" pos:column="24"/></name> <operator pos:line="106" pos:column="25">&lt;<pos:position pos:line="106" pos:column="29"/></operator> <name pos:line="106" pos:column="27">rows_num<pos:position pos:line="106" pos:column="35"/></name></expr>;<pos:position pos:line="106" pos:column="36"/></condition> <incr><expr><operator pos:line="106" pos:column="37">++<pos:position pos:line="106" pos:column="39"/></operator><name pos:line="106" pos:column="39">row<pos:position pos:line="106" pos:column="42"/></name></expr></incr>)<pos:position pos:line="106" pos:column="43"/></control> <block pos:line="106" pos:column="44">{
    <decl_stmt><decl><type><name pos:line="107" pos:column="5">int<pos:position pos:line="107" pos:column="8"/></name></type> <name pos:line="107" pos:column="9">col<pos:position pos:line="107" pos:column="12"/></name></decl>;<pos:position pos:line="107" pos:column="13"/></decl_stmt>
    <for pos:line="108" pos:column="5">for <control pos:line="108" pos:column="9">(<init><expr><name pos:line="108" pos:column="10">col<pos:position pos:line="108" pos:column="13"/></name> <operator pos:line="108" pos:column="14">=<pos:position pos:line="108" pos:column="15"/></operator> <literal type="number" pos:line="108" pos:column="16">0<pos:position pos:line="108" pos:column="17"/></literal></expr>;<pos:position pos:line="108" pos:column="18"/></init> <condition><expr><name pos:line="108" pos:column="19">col<pos:position pos:line="108" pos:column="22"/></name> <operator pos:line="108" pos:column="23">&lt;<pos:position pos:line="108" pos:column="27"/></operator> <name pos:line="108" pos:column="25">column_num<pos:position pos:line="108" pos:column="35"/></name></expr>;<pos:position pos:line="108" pos:column="36"/></condition> <incr><expr><operator pos:line="108" pos:column="37">++<pos:position pos:line="108" pos:column="39"/></operator><name pos:line="108" pos:column="39">col<pos:position pos:line="108" pos:column="42"/></name></expr></incr>)<pos:position pos:line="108" pos:column="43"/></control> <block pos:line="108" pos:column="44">{
      <comment type="block" pos:line="109" pos:column="7">/* Pointers returned by `PQgetvalue' are freed by `PQclear' via
       * `BAIL_OUT'. */</comment>
      <expr_stmt><expr><name><name pos:line="111" pos:column="7">column_values<pos:position pos:line="111" pos:column="20"/></name><index pos:line="111" pos:column="20">[<expr><name pos:line="111" pos:column="21">col<pos:position pos:line="111" pos:column="24"/></name></expr>]<pos:position pos:line="111" pos:column="25"/></index></name> <operator pos:line="111" pos:column="26">=<pos:position pos:line="111" pos:column="27"/></operator> <call><name pos:line="111" pos:column="28">PQgetvalue<pos:position pos:line="111" pos:column="38"/></name><argument_list pos:line="111" pos:column="38">(<argument><expr><name pos:line="111" pos:column="39">res<pos:position pos:line="111" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="111" pos:column="44">row<pos:position pos:line="111" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="111" pos:column="49">col<pos:position pos:line="111" pos:column="52"/></name></expr></argument>)<pos:position pos:line="111" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="111" pos:column="54"/></expr_stmt>
      <if pos:line="112" pos:column="7">if <condition pos:line="112" pos:column="10">(<expr><name pos:line="112" pos:column="11">NULL<pos:position pos:line="112" pos:column="15"/></name> <operator pos:line="112" pos:column="16">==<pos:position pos:line="112" pos:column="18"/></operator> <name><name pos:line="112" pos:column="19">column_values<pos:position pos:line="112" pos:column="32"/></name><index pos:line="112" pos:column="32">[<expr><name pos:line="112" pos:column="33">col<pos:position pos:line="112" pos:column="36"/></name></expr>]<pos:position pos:line="112" pos:column="37"/></index></name></expr>)<pos:position pos:line="112" pos:column="38"/></condition><then pos:line="112" pos:column="38"> <block pos:line="112" pos:column="39">{
        <expr_stmt><expr><call><name pos:line="113" pos:column="9">log_err<pos:position pos:line="113" pos:column="16"/></name><argument_list pos:line="113" pos:column="16">(<argument><expr><literal type="string" pos:line="113" pos:column="17">"Failed to get value at (row = %i, col = %i)."<pos:position pos:line="113" pos:column="63"/></literal></expr></argument>, <argument><expr><name pos:line="113" pos:column="65">row<pos:position pos:line="113" pos:column="68"/></name></expr></argument>, <argument><expr><name pos:line="113" pos:column="70">col<pos:position pos:line="113" pos:column="73"/></name></expr></argument>)<pos:position pos:line="113" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="113" pos:column="75"/></expr_stmt>
        <break pos:line="114" pos:column="9">break;<pos:position pos:line="114" pos:column="15"/></break>
      }<pos:position pos:line="115" pos:column="8"/></block></then></if>
    }<pos:position pos:line="116" pos:column="6"/></block></for>

    <comment type="block" pos:line="118" pos:column="5">/* check for an error */</comment>
    <if pos:line="119" pos:column="5">if <condition pos:line="119" pos:column="8">(<expr><name pos:line="119" pos:column="9">col<pos:position pos:line="119" pos:column="12"/></name> <operator pos:line="119" pos:column="13">&lt;<pos:position pos:line="119" pos:column="17"/></operator> <name pos:line="119" pos:column="15">column_num<pos:position pos:line="119" pos:column="25"/></name></expr>)<pos:position pos:line="119" pos:column="26"/></condition><then pos:line="119" pos:column="26">
      <block type="pseudo"><continue pos:line="120" pos:column="7">continue;<pos:position pos:line="120" pos:column="16"/></continue></block></then></if>

    <expr_stmt><expr><name pos:line="122" pos:column="5">status<pos:position pos:line="122" pos:column="11"/></name> <operator pos:line="122" pos:column="12">=<pos:position pos:line="122" pos:column="13"/></operator> <call><name pos:line="122" pos:column="14">udb_query_handle_result<pos:position pos:line="122" pos:column="37"/></name><argument_list pos:line="122" pos:column="37">(<argument><expr><name pos:line="122" pos:column="38">q<pos:position pos:line="122" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="122" pos:column="41">prep_area<pos:position pos:line="122" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="122" pos:column="52">column_values<pos:position pos:line="122" pos:column="65"/></name></expr></argument>)<pos:position pos:line="122" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="122" pos:column="67"/></expr_stmt>
    <if pos:line="123" pos:column="5">if <condition pos:line="123" pos:column="8">(<expr><name pos:line="123" pos:column="9">status<pos:position pos:line="123" pos:column="15"/></name> <operator pos:line="123" pos:column="16">!=<pos:position pos:line="123" pos:column="18"/></operator> <literal type="number" pos:line="123" pos:column="19">0<pos:position pos:line="123" pos:column="20"/></literal></expr>)<pos:position pos:line="123" pos:column="21"/></condition><then pos:line="123" pos:column="21"> <block pos:line="123" pos:column="22">{
      <expr_stmt><expr><call><name pos:line="124" pos:column="7">log_err<pos:position pos:line="124" pos:column="14"/></name><argument_list pos:line="124" pos:column="14">(<argument><expr><literal type="string" pos:line="124" pos:column="15">"udb_query_handle_result failed with status %i."<pos:position pos:line="124" pos:column="63"/></literal></expr></argument>, <argument><expr><name pos:line="124" pos:column="65">status<pos:position pos:line="124" pos:column="71"/></name></expr></argument>)<pos:position pos:line="124" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="124" pos:column="73"/></expr_stmt>
    }<pos:position pos:line="125" pos:column="6"/></block></then></if>
  }<pos:position pos:line="126" pos:column="4"/></block></for> <comment type="block" pos:line="126" pos:column="5">/* for (row = 0; row &lt; rows_num; ++row) */</comment>

  <expr_stmt><expr><call><name pos:line="128" pos:column="3">udb_query_finish_result<pos:position pos:line="128" pos:column="26"/></name><argument_list pos:line="128" pos:column="26">(<argument><expr><name pos:line="128" pos:column="27">q<pos:position pos:line="128" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="128" pos:column="30">prep_area<pos:position pos:line="128" pos:column="39"/></name></expr></argument>)<pos:position pos:line="128" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="128" pos:column="41"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="130" pos:column="3">BAIL_OUT<pos:position pos:line="130" pos:column="11"/></name><argument_list pos:line="130" pos:column="11">(<argument><expr><literal type="number" pos:line="130" pos:column="12">0<pos:position pos:line="130" pos:column="13"/></literal></expr></argument>)<pos:position pos:line="130" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="130" pos:column="15"/></expr_stmt>
<cpp:undef pos:line="131" pos:column="1">#<cpp:directive pos:line="131" pos:column="2">undef<pos:position pos:line="131" pos:column="7"/></cpp:directive> <name pos:line="131" pos:column="8">BAIL_OUT<pos:position pos:line="131" pos:column="16"/></name></cpp:undef>
}<pos:position pos:line="132" pos:column="2"/></block></function></unit>
