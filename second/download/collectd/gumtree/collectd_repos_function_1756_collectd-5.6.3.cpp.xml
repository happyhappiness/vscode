<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1756_collectd-5.6.3.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">handle_putval<pos:position pos:line="1" pos:column="18"/></name><parameter_list pos:line="1" pos:column="18">(<parameter><decl><type><name pos:line="1" pos:column="19">FILE<pos:position pos:line="1" pos:column="23"/></name> <modifier pos:line="1" pos:column="24">*<pos:position pos:line="1" pos:column="25"/></modifier></type><name pos:line="1" pos:column="25">fh<pos:position pos:line="1" pos:column="27"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="29">char<pos:position pos:line="1" pos:column="33"/></name> <modifier pos:line="1" pos:column="34">*<pos:position pos:line="1" pos:column="35"/></modifier></type><name pos:line="1" pos:column="35">buffer<pos:position pos:line="1" pos:column="41"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="42"/></parameter_list> <block pos:line="1" pos:column="43">{
  <decl_stmt><decl><type><name pos:line="2" pos:column="3">char<pos:position pos:line="2" pos:column="7"/></name> <modifier pos:line="2" pos:column="8">*<pos:position pos:line="2" pos:column="9"/></modifier></type><name pos:line="2" pos:column="9">command<pos:position pos:line="2" pos:column="16"/></name></decl>;<pos:position pos:line="2" pos:column="17"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">char<pos:position pos:line="3" pos:column="7"/></name> <modifier pos:line="3" pos:column="8">*<pos:position pos:line="3" pos:column="9"/></modifier></type><name pos:line="3" pos:column="9">identifier<pos:position pos:line="3" pos:column="19"/></name></decl>;<pos:position pos:line="3" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">char<pos:position pos:line="4" pos:column="7"/></name> <modifier pos:line="4" pos:column="8">*<pos:position pos:line="4" pos:column="9"/></modifier></type><name pos:line="4" pos:column="9">hostname<pos:position pos:line="4" pos:column="17"/></name></decl>;<pos:position pos:line="4" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">char<pos:position pos:line="5" pos:column="7"/></name> <modifier pos:line="5" pos:column="8">*<pos:position pos:line="5" pos:column="9"/></modifier></type><name pos:line="5" pos:column="9">plugin<pos:position pos:line="5" pos:column="15"/></name></decl>;<pos:position pos:line="5" pos:column="16"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">char<pos:position pos:line="6" pos:column="7"/></name> <modifier pos:line="6" pos:column="8">*<pos:position pos:line="6" pos:column="9"/></modifier></type><name pos:line="6" pos:column="9">plugin_instance<pos:position pos:line="6" pos:column="24"/></name></decl>;<pos:position pos:line="6" pos:column="25"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">char<pos:position pos:line="7" pos:column="7"/></name> <modifier pos:line="7" pos:column="8">*<pos:position pos:line="7" pos:column="9"/></modifier></type><name pos:line="7" pos:column="9">type<pos:position pos:line="7" pos:column="13"/></name></decl>;<pos:position pos:line="7" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">char<pos:position pos:line="8" pos:column="7"/></name> <modifier pos:line="8" pos:column="8">*<pos:position pos:line="8" pos:column="9"/></modifier></type><name pos:line="8" pos:column="9">type_instance<pos:position pos:line="8" pos:column="22"/></name></decl>;<pos:position pos:line="8" pos:column="23"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">int<pos:position pos:line="9" pos:column="6"/></name></type> <name pos:line="9" pos:column="7">status<pos:position pos:line="9" pos:column="13"/></name></decl>;<pos:position pos:line="9" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">int<pos:position pos:line="10" pos:column="6"/></name></type> <name pos:line="10" pos:column="7">values_submitted<pos:position pos:line="10" pos:column="23"/></name></decl>;<pos:position pos:line="10" pos:column="24"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="12" pos:column="3">char<pos:position pos:line="12" pos:column="7"/></name> <modifier pos:line="12" pos:column="8">*<pos:position pos:line="12" pos:column="9"/></modifier></type><name pos:line="12" pos:column="9">identifier_copy<pos:position pos:line="12" pos:column="24"/></name></decl>;<pos:position pos:line="12" pos:column="25"/></decl_stmt>

  <decl_stmt><decl><type><specifier pos:line="14" pos:column="3">const<pos:position pos:line="14" pos:column="8"/></specifier> <name pos:line="14" pos:column="9">data_set_t<pos:position pos:line="14" pos:column="19"/></name> <modifier pos:line="14" pos:column="20">*<pos:position pos:line="14" pos:column="21"/></modifier></type><name pos:line="14" pos:column="21">ds<pos:position pos:line="14" pos:column="23"/></name></decl>;<pos:position pos:line="14" pos:column="24"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="15" pos:column="3">value_list_t<pos:position pos:line="15" pos:column="15"/></name></type> <name pos:line="15" pos:column="16">vl<pos:position pos:line="15" pos:column="18"/></name> <init pos:line="15" pos:column="19">= <expr><name pos:line="15" pos:column="21">VALUE_LIST_INIT<pos:position pos:line="15" pos:column="36"/></name></expr></init></decl>;<pos:position pos:line="15" pos:column="37"/></decl_stmt>
  <expr_stmt><expr><name><name pos:line="16" pos:column="3">vl<pos:position pos:line="16" pos:column="5"/></name><operator pos:line="16" pos:column="5">.<pos:position pos:line="16" pos:column="6"/></operator><name pos:line="16" pos:column="6">values<pos:position pos:line="16" pos:column="12"/></name></name> <operator pos:line="16" pos:column="13">=<pos:position pos:line="16" pos:column="14"/></operator> <name pos:line="16" pos:column="15">NULL<pos:position pos:line="16" pos:column="19"/></name></expr>;<pos:position pos:line="16" pos:column="20"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="18" pos:column="3">DEBUG<pos:position pos:line="18" pos:column="8"/></name><argument_list pos:line="18" pos:column="8">(<argument><expr><literal type="string" pos:line="18" pos:column="9">"utils_cmd_putval: handle_putval (fh = %p, buffer = %s);"<pos:position pos:line="18" pos:column="66"/></literal></expr></argument>, <argument><expr><operator pos:line="18" pos:column="68">(<pos:position pos:line="18" pos:column="69"/></operator><name pos:line="18" pos:column="69">void<pos:position pos:line="18" pos:column="73"/></name> <operator pos:line="18" pos:column="74">*<pos:position pos:line="18" pos:column="75"/></operator><operator pos:line="18" pos:column="75">)<pos:position pos:line="18" pos:column="76"/></operator><name pos:line="18" pos:column="76">fh<pos:position pos:line="18" pos:column="78"/></name></expr></argument>,
        <argument><expr><name pos:line="19" pos:column="9">buffer<pos:position pos:line="19" pos:column="15"/></name></expr></argument>)<pos:position pos:line="19" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="17"/></expr_stmt>

  <expr_stmt><expr><name pos:line="21" pos:column="3">command<pos:position pos:line="21" pos:column="10"/></name> <operator pos:line="21" pos:column="11">=<pos:position pos:line="21" pos:column="12"/></operator> <name pos:line="21" pos:column="13">NULL<pos:position pos:line="21" pos:column="17"/></name></expr>;<pos:position pos:line="21" pos:column="18"/></expr_stmt>
  <expr_stmt><expr><name pos:line="22" pos:column="3">status<pos:position pos:line="22" pos:column="9"/></name> <operator pos:line="22" pos:column="10">=<pos:position pos:line="22" pos:column="11"/></operator> <call><name pos:line="22" pos:column="12">parse_string<pos:position pos:line="22" pos:column="24"/></name><argument_list pos:line="22" pos:column="24">(<argument><expr><operator pos:line="22" pos:column="25">&amp;<pos:position pos:line="22" pos:column="30"/></operator><name pos:line="22" pos:column="26">buffer<pos:position pos:line="22" pos:column="32"/></name></expr></argument>, <argument><expr><operator pos:line="22" pos:column="34">&amp;<pos:position pos:line="22" pos:column="39"/></operator><name pos:line="22" pos:column="35">command<pos:position pos:line="22" pos:column="42"/></name></expr></argument>)<pos:position pos:line="22" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="44"/></expr_stmt>
  <if pos:line="23" pos:column="3">if <condition pos:line="23" pos:column="6">(<expr><name pos:line="23" pos:column="7">status<pos:position pos:line="23" pos:column="13"/></name> <operator pos:line="23" pos:column="14">!=<pos:position pos:line="23" pos:column="16"/></operator> <literal type="number" pos:line="23" pos:column="17">0<pos:position pos:line="23" pos:column="18"/></literal></expr>)<pos:position pos:line="23" pos:column="19"/></condition><then pos:line="23" pos:column="19"> <block pos:line="23" pos:column="20">{
    <expr_stmt><expr><call><name pos:line="24" pos:column="5">print_to_socket<pos:position pos:line="24" pos:column="20"/></name><argument_list pos:line="24" pos:column="20">(<argument><expr><name pos:line="24" pos:column="21">fh<pos:position pos:line="24" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="24" pos:column="25">"-1 Cannot parse command.\n"<pos:position pos:line="24" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="55"/></expr_stmt>
    <return pos:line="25" pos:column="5">return <expr><operator pos:line="25" pos:column="12">(<pos:position pos:line="25" pos:column="13"/></operator><operator pos:line="25" pos:column="13">-<pos:position pos:line="25" pos:column="14"/></operator><literal type="number" pos:line="25" pos:column="14">1<pos:position pos:line="25" pos:column="15"/></literal><operator pos:line="25" pos:column="15">)<pos:position pos:line="25" pos:column="16"/></operator></expr>;<pos:position pos:line="25" pos:column="17"/></return>
  }<pos:position pos:line="26" pos:column="4"/></block></then></if>
  <expr_stmt><expr><call><name pos:line="27" pos:column="3">assert<pos:position pos:line="27" pos:column="9"/></name><argument_list pos:line="27" pos:column="9">(<argument><expr><name pos:line="27" pos:column="10">command<pos:position pos:line="27" pos:column="17"/></name> <operator pos:line="27" pos:column="18">!=<pos:position pos:line="27" pos:column="20"/></operator> <name pos:line="27" pos:column="21">NULL<pos:position pos:line="27" pos:column="25"/></name></expr></argument>)<pos:position pos:line="27" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="27"/></expr_stmt>

  <if pos:line="29" pos:column="3">if <condition pos:line="29" pos:column="6">(<expr><call><name pos:line="29" pos:column="7">strcasecmp<pos:position pos:line="29" pos:column="17"/></name><argument_list pos:line="29" pos:column="17">(<argument><expr><literal type="string" pos:line="29" pos:column="18">"PUTVAL"<pos:position pos:line="29" pos:column="26"/></literal></expr></argument>, <argument><expr><name pos:line="29" pos:column="28">command<pos:position pos:line="29" pos:column="35"/></name></expr></argument>)<pos:position pos:line="29" pos:column="36"/></argument_list></call> <operator pos:line="29" pos:column="37">!=<pos:position pos:line="29" pos:column="39"/></operator> <literal type="number" pos:line="29" pos:column="40">0<pos:position pos:line="29" pos:column="41"/></literal></expr>)<pos:position pos:line="29" pos:column="42"/></condition><then pos:line="29" pos:column="42"> <block pos:line="29" pos:column="43">{
    <expr_stmt><expr><call><name pos:line="30" pos:column="5">print_to_socket<pos:position pos:line="30" pos:column="20"/></name><argument_list pos:line="30" pos:column="20">(<argument><expr><name pos:line="30" pos:column="21">fh<pos:position pos:line="30" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="30" pos:column="25">"-1 Unexpected command: `%s'.\n"<pos:position pos:line="30" pos:column="57"/></literal></expr></argument>, <argument><expr><name pos:line="30" pos:column="59">command<pos:position pos:line="30" pos:column="66"/></name></expr></argument>)<pos:position pos:line="30" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="68"/></expr_stmt>
    <return pos:line="31" pos:column="5">return <expr><operator pos:line="31" pos:column="12">(<pos:position pos:line="31" pos:column="13"/></operator><operator pos:line="31" pos:column="13">-<pos:position pos:line="31" pos:column="14"/></operator><literal type="number" pos:line="31" pos:column="14">1<pos:position pos:line="31" pos:column="15"/></literal><operator pos:line="31" pos:column="15">)<pos:position pos:line="31" pos:column="16"/></operator></expr>;<pos:position pos:line="31" pos:column="17"/></return>
  }<pos:position pos:line="32" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="34" pos:column="3">identifier<pos:position pos:line="34" pos:column="13"/></name> <operator pos:line="34" pos:column="14">=<pos:position pos:line="34" pos:column="15"/></operator> <name pos:line="34" pos:column="16">NULL<pos:position pos:line="34" pos:column="20"/></name></expr>;<pos:position pos:line="34" pos:column="21"/></expr_stmt>
  <expr_stmt><expr><name pos:line="35" pos:column="3">status<pos:position pos:line="35" pos:column="9"/></name> <operator pos:line="35" pos:column="10">=<pos:position pos:line="35" pos:column="11"/></operator> <call><name pos:line="35" pos:column="12">parse_string<pos:position pos:line="35" pos:column="24"/></name><argument_list pos:line="35" pos:column="24">(<argument><expr><operator pos:line="35" pos:column="25">&amp;<pos:position pos:line="35" pos:column="30"/></operator><name pos:line="35" pos:column="26">buffer<pos:position pos:line="35" pos:column="32"/></name></expr></argument>, <argument><expr><operator pos:line="35" pos:column="34">&amp;<pos:position pos:line="35" pos:column="39"/></operator><name pos:line="35" pos:column="35">identifier<pos:position pos:line="35" pos:column="45"/></name></expr></argument>)<pos:position pos:line="35" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="47"/></expr_stmt>
  <if pos:line="36" pos:column="3">if <condition pos:line="36" pos:column="6">(<expr><name pos:line="36" pos:column="7">status<pos:position pos:line="36" pos:column="13"/></name> <operator pos:line="36" pos:column="14">!=<pos:position pos:line="36" pos:column="16"/></operator> <literal type="number" pos:line="36" pos:column="17">0<pos:position pos:line="36" pos:column="18"/></literal></expr>)<pos:position pos:line="36" pos:column="19"/></condition><then pos:line="36" pos:column="19"> <block pos:line="36" pos:column="20">{
    <expr_stmt><expr><call><name pos:line="37" pos:column="5">print_to_socket<pos:position pos:line="37" pos:column="20"/></name><argument_list pos:line="37" pos:column="20">(<argument><expr><name pos:line="37" pos:column="21">fh<pos:position pos:line="37" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="37" pos:column="25">"-1 Cannot parse identifier.\n"<pos:position pos:line="37" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="37" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="58"/></expr_stmt>
    <return pos:line="38" pos:column="5">return <expr><operator pos:line="38" pos:column="12">(<pos:position pos:line="38" pos:column="13"/></operator><operator pos:line="38" pos:column="13">-<pos:position pos:line="38" pos:column="14"/></operator><literal type="number" pos:line="38" pos:column="14">1<pos:position pos:line="38" pos:column="15"/></literal><operator pos:line="38" pos:column="15">)<pos:position pos:line="38" pos:column="16"/></operator></expr>;<pos:position pos:line="38" pos:column="17"/></return>
  }<pos:position pos:line="39" pos:column="4"/></block></then></if>
  <expr_stmt><expr><call><name pos:line="40" pos:column="3">assert<pos:position pos:line="40" pos:column="9"/></name><argument_list pos:line="40" pos:column="9">(<argument><expr><name pos:line="40" pos:column="10">identifier<pos:position pos:line="40" pos:column="20"/></name> <operator pos:line="40" pos:column="21">!=<pos:position pos:line="40" pos:column="23"/></operator> <name pos:line="40" pos:column="24">NULL<pos:position pos:line="40" pos:column="28"/></name></expr></argument>)<pos:position pos:line="40" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="30"/></expr_stmt>

  <comment type="block" pos:line="42" pos:column="3">/* parse_identifier() modifies its first argument,
   * returning pointers into it */</comment>
  <expr_stmt><expr><name pos:line="44" pos:column="3">identifier_copy<pos:position pos:line="44" pos:column="18"/></name> <operator pos:line="44" pos:column="19">=<pos:position pos:line="44" pos:column="20"/></operator> <call><name pos:line="44" pos:column="21">sstrdup<pos:position pos:line="44" pos:column="28"/></name><argument_list pos:line="44" pos:column="28">(<argument><expr><name pos:line="44" pos:column="29">identifier<pos:position pos:line="44" pos:column="39"/></name></expr></argument>)<pos:position pos:line="44" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="41"/></expr_stmt>

  <expr_stmt><expr><name pos:line="46" pos:column="3">status<pos:position pos:line="46" pos:column="9"/></name> <operator pos:line="46" pos:column="10">=<pos:position pos:line="46" pos:column="11"/></operator> <call><name pos:line="46" pos:column="12">parse_identifier<pos:position pos:line="46" pos:column="28"/></name><argument_list pos:line="46" pos:column="28">(<argument><expr><name pos:line="46" pos:column="29">identifier_copy<pos:position pos:line="46" pos:column="44"/></name></expr></argument>, <argument><expr><operator pos:line="46" pos:column="46">&amp;<pos:position pos:line="46" pos:column="51"/></operator><name pos:line="46" pos:column="47">hostname<pos:position pos:line="46" pos:column="55"/></name></expr></argument>, <argument><expr><operator pos:line="46" pos:column="57">&amp;<pos:position pos:line="46" pos:column="62"/></operator><name pos:line="46" pos:column="58">plugin<pos:position pos:line="46" pos:column="64"/></name></expr></argument>,
                            <argument><expr><operator pos:line="47" pos:column="29">&amp;<pos:position pos:line="47" pos:column="34"/></operator><name pos:line="47" pos:column="30">plugin_instance<pos:position pos:line="47" pos:column="45"/></name></expr></argument>, <argument><expr><operator pos:line="47" pos:column="47">&amp;<pos:position pos:line="47" pos:column="52"/></operator><name pos:line="47" pos:column="48">type<pos:position pos:line="47" pos:column="52"/></name></expr></argument>, <argument><expr><operator pos:line="47" pos:column="54">&amp;<pos:position pos:line="47" pos:column="59"/></operator><name pos:line="47" pos:column="55">type_instance<pos:position pos:line="47" pos:column="68"/></name></expr></argument>)<pos:position pos:line="47" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="70"/></expr_stmt>
  <if pos:line="48" pos:column="3">if <condition pos:line="48" pos:column="6">(<expr><name pos:line="48" pos:column="7">status<pos:position pos:line="48" pos:column="13"/></name> <operator pos:line="48" pos:column="14">!=<pos:position pos:line="48" pos:column="16"/></operator> <literal type="number" pos:line="48" pos:column="17">0<pos:position pos:line="48" pos:column="18"/></literal></expr>)<pos:position pos:line="48" pos:column="19"/></condition><then pos:line="48" pos:column="19"> <block pos:line="48" pos:column="20">{
    <expr_stmt><expr><call><name pos:line="49" pos:column="5">DEBUG<pos:position pos:line="49" pos:column="10"/></name><argument_list pos:line="49" pos:column="10">(<argument><expr><literal type="string" pos:line="49" pos:column="11">"handle_putval: Cannot parse identifier `%s'."<pos:position pos:line="49" pos:column="57"/></literal></expr></argument>, <argument><expr><name pos:line="49" pos:column="59">identifier<pos:position pos:line="49" pos:column="69"/></name></expr></argument>)<pos:position pos:line="49" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="71"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="50" pos:column="5">print_to_socket<pos:position pos:line="50" pos:column="20"/></name><argument_list pos:line="50" pos:column="20">(<argument><expr><name pos:line="50" pos:column="21">fh<pos:position pos:line="50" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="50" pos:column="25">"-1 Cannot parse identifier `%s'.\n"<pos:position pos:line="50" pos:column="61"/></literal></expr></argument>, <argument><expr><name pos:line="50" pos:column="63">identifier<pos:position pos:line="50" pos:column="73"/></name></expr></argument>)<pos:position pos:line="50" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="75"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="51" pos:column="5">sfree<pos:position pos:line="51" pos:column="10"/></name><argument_list pos:line="51" pos:column="10">(<argument><expr><name pos:line="51" pos:column="11">identifier_copy<pos:position pos:line="51" pos:column="26"/></name></expr></argument>)<pos:position pos:line="51" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="28"/></expr_stmt>
    <return pos:line="52" pos:column="5">return <expr><operator pos:line="52" pos:column="12">(<pos:position pos:line="52" pos:column="13"/></operator><operator pos:line="52" pos:column="13">-<pos:position pos:line="52" pos:column="14"/></operator><literal type="number" pos:line="52" pos:column="14">1<pos:position pos:line="52" pos:column="15"/></literal><operator pos:line="52" pos:column="15">)<pos:position pos:line="52" pos:column="16"/></operator></expr>;<pos:position pos:line="52" pos:column="17"/></return>
  }<pos:position pos:line="53" pos:column="4"/></block></then></if>

  <if pos:line="55" pos:column="3">if <condition pos:line="55" pos:column="6">(<expr><operator pos:line="55" pos:column="7">(<pos:position pos:line="55" pos:column="8"/></operator><call><name pos:line="55" pos:column="8">strlen<pos:position pos:line="55" pos:column="14"/></name><argument_list pos:line="55" pos:column="14">(<argument><expr><name pos:line="55" pos:column="15">hostname<pos:position pos:line="55" pos:column="23"/></name></expr></argument>)<pos:position pos:line="55" pos:column="24"/></argument_list></call> <operator pos:line="55" pos:column="25">&gt;=<pos:position pos:line="55" pos:column="30"/></operator> <sizeof pos:line="55" pos:column="28">sizeof<argument_list pos:line="55" pos:column="34">(<argument><expr><name><name pos:line="55" pos:column="35">vl<pos:position pos:line="55" pos:column="37"/></name><operator pos:line="55" pos:column="37">.<pos:position pos:line="55" pos:column="38"/></operator><name pos:line="55" pos:column="38">host<pos:position pos:line="55" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="55" pos:column="43"/></argument_list></sizeof><operator pos:line="55" pos:column="43">)<pos:position pos:line="55" pos:column="44"/></operator> <operator pos:line="55" pos:column="45">||<pos:position pos:line="55" pos:column="47"/></operator>
      <operator pos:line="56" pos:column="7">(<pos:position pos:line="56" pos:column="8"/></operator><call><name pos:line="56" pos:column="8">strlen<pos:position pos:line="56" pos:column="14"/></name><argument_list pos:line="56" pos:column="14">(<argument><expr><name pos:line="56" pos:column="15">plugin<pos:position pos:line="56" pos:column="21"/></name></expr></argument>)<pos:position pos:line="56" pos:column="22"/></argument_list></call> <operator pos:line="56" pos:column="23">&gt;=<pos:position pos:line="56" pos:column="28"/></operator> <sizeof pos:line="56" pos:column="26">sizeof<argument_list pos:line="56" pos:column="32">(<argument><expr><name><name pos:line="56" pos:column="33">vl<pos:position pos:line="56" pos:column="35"/></name><operator pos:line="56" pos:column="35">.<pos:position pos:line="56" pos:column="36"/></operator><name pos:line="56" pos:column="36">plugin<pos:position pos:line="56" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="56" pos:column="43"/></argument_list></sizeof><operator pos:line="56" pos:column="43">)<pos:position pos:line="56" pos:column="44"/></operator> <operator pos:line="56" pos:column="45">||<pos:position pos:line="56" pos:column="47"/></operator>
      <operator pos:line="57" pos:column="7">(<pos:position pos:line="57" pos:column="8"/></operator><operator pos:line="57" pos:column="8">(<pos:position pos:line="57" pos:column="9"/></operator><name pos:line="57" pos:column="9">plugin_instance<pos:position pos:line="57" pos:column="24"/></name> <operator pos:line="57" pos:column="25">!=<pos:position pos:line="57" pos:column="27"/></operator> <name pos:line="57" pos:column="28">NULL<pos:position pos:line="57" pos:column="32"/></name><operator pos:line="57" pos:column="32">)<pos:position pos:line="57" pos:column="33"/></operator> <operator pos:line="57" pos:column="34">&amp;&amp;<pos:position pos:line="57" pos:column="44"/></operator>
       <operator pos:line="58" pos:column="8">(<pos:position pos:line="58" pos:column="9"/></operator><call><name pos:line="58" pos:column="9">strlen<pos:position pos:line="58" pos:column="15"/></name><argument_list pos:line="58" pos:column="15">(<argument><expr><name pos:line="58" pos:column="16">plugin_instance<pos:position pos:line="58" pos:column="31"/></name></expr></argument>)<pos:position pos:line="58" pos:column="32"/></argument_list></call> <operator pos:line="58" pos:column="33">&gt;=<pos:position pos:line="58" pos:column="38"/></operator> <sizeof pos:line="58" pos:column="36">sizeof<argument_list pos:line="58" pos:column="42">(<argument><expr><name><name pos:line="58" pos:column="43">vl<pos:position pos:line="58" pos:column="45"/></name><operator pos:line="58" pos:column="45">.<pos:position pos:line="58" pos:column="46"/></operator><name pos:line="58" pos:column="46">plugin_instance<pos:position pos:line="58" pos:column="61"/></name></name></expr></argument>)<pos:position pos:line="58" pos:column="62"/></argument_list></sizeof><operator pos:line="58" pos:column="62">)<pos:position pos:line="58" pos:column="63"/></operator><operator pos:line="58" pos:column="63">)<pos:position pos:line="58" pos:column="64"/></operator> <operator pos:line="58" pos:column="65">||<pos:position pos:line="58" pos:column="67"/></operator>
      <operator pos:line="59" pos:column="7">(<pos:position pos:line="59" pos:column="8"/></operator><operator pos:line="59" pos:column="8">(<pos:position pos:line="59" pos:column="9"/></operator><name pos:line="59" pos:column="9">type_instance<pos:position pos:line="59" pos:column="22"/></name> <operator pos:line="59" pos:column="23">!=<pos:position pos:line="59" pos:column="25"/></operator> <name pos:line="59" pos:column="26">NULL<pos:position pos:line="59" pos:column="30"/></name><operator pos:line="59" pos:column="30">)<pos:position pos:line="59" pos:column="31"/></operator> <operator pos:line="59" pos:column="32">&amp;&amp;<pos:position pos:line="59" pos:column="42"/></operator>
       <operator pos:line="60" pos:column="8">(<pos:position pos:line="60" pos:column="9"/></operator><call><name pos:line="60" pos:column="9">strlen<pos:position pos:line="60" pos:column="15"/></name><argument_list pos:line="60" pos:column="15">(<argument><expr><name pos:line="60" pos:column="16">type_instance<pos:position pos:line="60" pos:column="29"/></name></expr></argument>)<pos:position pos:line="60" pos:column="30"/></argument_list></call> <operator pos:line="60" pos:column="31">&gt;=<pos:position pos:line="60" pos:column="36"/></operator> <sizeof pos:line="60" pos:column="34">sizeof<argument_list pos:line="60" pos:column="40">(<argument><expr><name><name pos:line="60" pos:column="41">vl<pos:position pos:line="60" pos:column="43"/></name><operator pos:line="60" pos:column="43">.<pos:position pos:line="60" pos:column="44"/></operator><name pos:line="60" pos:column="44">type_instance<pos:position pos:line="60" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="60" pos:column="58"/></argument_list></sizeof><operator pos:line="60" pos:column="58">)<pos:position pos:line="60" pos:column="59"/></operator><operator pos:line="60" pos:column="59">)<pos:position pos:line="60" pos:column="60"/></operator></expr>)<pos:position pos:line="60" pos:column="61"/></condition><then pos:line="60" pos:column="61"> <block pos:line="60" pos:column="62">{
    <expr_stmt><expr><call><name pos:line="61" pos:column="5">print_to_socket<pos:position pos:line="61" pos:column="20"/></name><argument_list pos:line="61" pos:column="20">(<argument><expr><name pos:line="61" pos:column="21">fh<pos:position pos:line="61" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="61" pos:column="25">"-1 Identifier too long.\n"<pos:position pos:line="61" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="61" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="54"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="62" pos:column="5">sfree<pos:position pos:line="62" pos:column="10"/></name><argument_list pos:line="62" pos:column="10">(<argument><expr><name pos:line="62" pos:column="11">identifier_copy<pos:position pos:line="62" pos:column="26"/></name></expr></argument>)<pos:position pos:line="62" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="28"/></expr_stmt>
    <return pos:line="63" pos:column="5">return <expr><operator pos:line="63" pos:column="12">(<pos:position pos:line="63" pos:column="13"/></operator><operator pos:line="63" pos:column="13">-<pos:position pos:line="63" pos:column="14"/></operator><literal type="number" pos:line="63" pos:column="14">1<pos:position pos:line="63" pos:column="15"/></literal><operator pos:line="63" pos:column="15">)<pos:position pos:line="63" pos:column="16"/></operator></expr>;<pos:position pos:line="63" pos:column="17"/></return>
  }<pos:position pos:line="64" pos:column="4"/></block></then></if>

  <expr_stmt><expr><call><name pos:line="66" pos:column="3">sstrncpy<pos:position pos:line="66" pos:column="11"/></name><argument_list pos:line="66" pos:column="11">(<argument><expr><name><name pos:line="66" pos:column="12">vl<pos:position pos:line="66" pos:column="14"/></name><operator pos:line="66" pos:column="14">.<pos:position pos:line="66" pos:column="15"/></operator><name pos:line="66" pos:column="15">host<pos:position pos:line="66" pos:column="19"/></name></name></expr></argument>, <argument><expr><name pos:line="66" pos:column="21">hostname<pos:position pos:line="66" pos:column="29"/></name></expr></argument>, <argument><expr><sizeof pos:line="66" pos:column="31">sizeof<argument_list pos:line="66" pos:column="37">(<argument><expr><name><name pos:line="66" pos:column="38">vl<pos:position pos:line="66" pos:column="40"/></name><operator pos:line="66" pos:column="40">.<pos:position pos:line="66" pos:column="41"/></operator><name pos:line="66" pos:column="41">host<pos:position pos:line="66" pos:column="45"/></name></name></expr></argument>)<pos:position pos:line="66" pos:column="46"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="66" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="48"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="67" pos:column="3">sstrncpy<pos:position pos:line="67" pos:column="11"/></name><argument_list pos:line="67" pos:column="11">(<argument><expr><name><name pos:line="67" pos:column="12">vl<pos:position pos:line="67" pos:column="14"/></name><operator pos:line="67" pos:column="14">.<pos:position pos:line="67" pos:column="15"/></operator><name pos:line="67" pos:column="15">plugin<pos:position pos:line="67" pos:column="21"/></name></name></expr></argument>, <argument><expr><name pos:line="67" pos:column="23">plugin<pos:position pos:line="67" pos:column="29"/></name></expr></argument>, <argument><expr><sizeof pos:line="67" pos:column="31">sizeof<argument_list pos:line="67" pos:column="37">(<argument><expr><name><name pos:line="67" pos:column="38">vl<pos:position pos:line="67" pos:column="40"/></name><operator pos:line="67" pos:column="40">.<pos:position pos:line="67" pos:column="41"/></operator><name pos:line="67" pos:column="41">plugin<pos:position pos:line="67" pos:column="47"/></name></name></expr></argument>)<pos:position pos:line="67" pos:column="48"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="67" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="50"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="68" pos:column="3">sstrncpy<pos:position pos:line="68" pos:column="11"/></name><argument_list pos:line="68" pos:column="11">(<argument><expr><name><name pos:line="68" pos:column="12">vl<pos:position pos:line="68" pos:column="14"/></name><operator pos:line="68" pos:column="14">.<pos:position pos:line="68" pos:column="15"/></operator><name pos:line="68" pos:column="15">type<pos:position pos:line="68" pos:column="19"/></name></name></expr></argument>, <argument><expr><name pos:line="68" pos:column="21">type<pos:position pos:line="68" pos:column="25"/></name></expr></argument>, <argument><expr><sizeof pos:line="68" pos:column="27">sizeof<argument_list pos:line="68" pos:column="33">(<argument><expr><name><name pos:line="68" pos:column="34">vl<pos:position pos:line="68" pos:column="36"/></name><operator pos:line="68" pos:column="36">.<pos:position pos:line="68" pos:column="37"/></operator><name pos:line="68" pos:column="37">type<pos:position pos:line="68" pos:column="41"/></name></name></expr></argument>)<pos:position pos:line="68" pos:column="42"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="68" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="44"/></expr_stmt>
  <if pos:line="69" pos:column="3">if <condition pos:line="69" pos:column="6">(<expr><name pos:line="69" pos:column="7">plugin_instance<pos:position pos:line="69" pos:column="22"/></name> <operator pos:line="69" pos:column="23">!=<pos:position pos:line="69" pos:column="25"/></operator> <name pos:line="69" pos:column="26">NULL<pos:position pos:line="69" pos:column="30"/></name></expr>)<pos:position pos:line="69" pos:column="31"/></condition><then pos:line="69" pos:column="31">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="70" pos:column="5">sstrncpy<pos:position pos:line="70" pos:column="13"/></name><argument_list pos:line="70" pos:column="13">(<argument><expr><name><name pos:line="70" pos:column="14">vl<pos:position pos:line="70" pos:column="16"/></name><operator pos:line="70" pos:column="16">.<pos:position pos:line="70" pos:column="17"/></operator><name pos:line="70" pos:column="17">plugin_instance<pos:position pos:line="70" pos:column="32"/></name></name></expr></argument>, <argument><expr><name pos:line="70" pos:column="34">plugin_instance<pos:position pos:line="70" pos:column="49"/></name></expr></argument>, <argument><expr><sizeof pos:line="70" pos:column="51">sizeof<argument_list pos:line="70" pos:column="57">(<argument><expr><name><name pos:line="70" pos:column="58">vl<pos:position pos:line="70" pos:column="60"/></name><operator pos:line="70" pos:column="60">.<pos:position pos:line="70" pos:column="61"/></operator><name pos:line="70" pos:column="61">plugin_instance<pos:position pos:line="70" pos:column="76"/></name></name></expr></argument>)<pos:position pos:line="70" pos:column="77"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="70" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="79"/></expr_stmt></block></then></if>
  <if pos:line="71" pos:column="3">if <condition pos:line="71" pos:column="6">(<expr><name pos:line="71" pos:column="7">type_instance<pos:position pos:line="71" pos:column="20"/></name> <operator pos:line="71" pos:column="21">!=<pos:position pos:line="71" pos:column="23"/></operator> <name pos:line="71" pos:column="24">NULL<pos:position pos:line="71" pos:column="28"/></name></expr>)<pos:position pos:line="71" pos:column="29"/></condition><then pos:line="71" pos:column="29">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="72" pos:column="5">sstrncpy<pos:position pos:line="72" pos:column="13"/></name><argument_list pos:line="72" pos:column="13">(<argument><expr><name><name pos:line="72" pos:column="14">vl<pos:position pos:line="72" pos:column="16"/></name><operator pos:line="72" pos:column="16">.<pos:position pos:line="72" pos:column="17"/></operator><name pos:line="72" pos:column="17">type_instance<pos:position pos:line="72" pos:column="30"/></name></name></expr></argument>, <argument><expr><name pos:line="72" pos:column="32">type_instance<pos:position pos:line="72" pos:column="45"/></name></expr></argument>, <argument><expr><sizeof pos:line="72" pos:column="47">sizeof<argument_list pos:line="72" pos:column="53">(<argument><expr><name><name pos:line="72" pos:column="54">vl<pos:position pos:line="72" pos:column="56"/></name><operator pos:line="72" pos:column="56">.<pos:position pos:line="72" pos:column="57"/></operator><name pos:line="72" pos:column="57">type_instance<pos:position pos:line="72" pos:column="70"/></name></name></expr></argument>)<pos:position pos:line="72" pos:column="71"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="72" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="73"/></expr_stmt></block></then></if>

  <expr_stmt><expr><name pos:line="74" pos:column="3">ds<pos:position pos:line="74" pos:column="5"/></name> <operator pos:line="74" pos:column="6">=<pos:position pos:line="74" pos:column="7"/></operator> <call><name pos:line="74" pos:column="8">plugin_get_ds<pos:position pos:line="74" pos:column="21"/></name><argument_list pos:line="74" pos:column="21">(<argument><expr><name pos:line="74" pos:column="22">type<pos:position pos:line="74" pos:column="26"/></name></expr></argument>)<pos:position pos:line="74" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="28"/></expr_stmt>
  <if pos:line="75" pos:column="3">if <condition pos:line="75" pos:column="6">(<expr><name pos:line="75" pos:column="7">ds<pos:position pos:line="75" pos:column="9"/></name> <operator pos:line="75" pos:column="10">==<pos:position pos:line="75" pos:column="12"/></operator> <name pos:line="75" pos:column="13">NULL<pos:position pos:line="75" pos:column="17"/></name></expr>)<pos:position pos:line="75" pos:column="18"/></condition><then pos:line="75" pos:column="18"> <block pos:line="75" pos:column="19">{
    <expr_stmt><expr><call><name pos:line="76" pos:column="5">print_to_socket<pos:position pos:line="76" pos:column="20"/></name><argument_list pos:line="76" pos:column="20">(<argument><expr><name pos:line="76" pos:column="21">fh<pos:position pos:line="76" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="76" pos:column="25">"-1 Type `%s' isn't defined.\n"<pos:position pos:line="76" pos:column="56"/></literal></expr></argument>, <argument><expr><name pos:line="76" pos:column="58">type<pos:position pos:line="76" pos:column="62"/></name></expr></argument>)<pos:position pos:line="76" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="64"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="77" pos:column="5">sfree<pos:position pos:line="77" pos:column="10"/></name><argument_list pos:line="77" pos:column="10">(<argument><expr><name pos:line="77" pos:column="11">identifier_copy<pos:position pos:line="77" pos:column="26"/></name></expr></argument>)<pos:position pos:line="77" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="28"/></expr_stmt>
    <return pos:line="78" pos:column="5">return <expr><operator pos:line="78" pos:column="12">(<pos:position pos:line="78" pos:column="13"/></operator><operator pos:line="78" pos:column="13">-<pos:position pos:line="78" pos:column="14"/></operator><literal type="number" pos:line="78" pos:column="14">1<pos:position pos:line="78" pos:column="15"/></literal><operator pos:line="78" pos:column="15">)<pos:position pos:line="78" pos:column="16"/></operator></expr>;<pos:position pos:line="78" pos:column="17"/></return>
  }<pos:position pos:line="79" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="81" pos:column="3">/* Free identifier_copy */</comment>
  <expr_stmt><expr><name pos:line="82" pos:column="3">hostname<pos:position pos:line="82" pos:column="11"/></name> <operator pos:line="82" pos:column="12">=<pos:position pos:line="82" pos:column="13"/></operator> <name pos:line="82" pos:column="14">NULL<pos:position pos:line="82" pos:column="18"/></name></expr>;<pos:position pos:line="82" pos:column="19"/></expr_stmt>
  <expr_stmt><expr><name pos:line="83" pos:column="3">plugin<pos:position pos:line="83" pos:column="9"/></name> <operator pos:line="83" pos:column="10">=<pos:position pos:line="83" pos:column="11"/></operator> <name pos:line="83" pos:column="12">NULL<pos:position pos:line="83" pos:column="16"/></name></expr>;<pos:position pos:line="83" pos:column="17"/></expr_stmt>
  <expr_stmt><expr><name pos:line="84" pos:column="3">plugin_instance<pos:position pos:line="84" pos:column="18"/></name> <operator pos:line="84" pos:column="19">=<pos:position pos:line="84" pos:column="20"/></operator> <name pos:line="84" pos:column="21">NULL<pos:position pos:line="84" pos:column="25"/></name></expr>;<pos:position pos:line="84" pos:column="26"/></expr_stmt>
  <expr_stmt><expr><name pos:line="85" pos:column="3">type<pos:position pos:line="85" pos:column="7"/></name> <operator pos:line="85" pos:column="8">=<pos:position pos:line="85" pos:column="9"/></operator> <name pos:line="85" pos:column="10">NULL<pos:position pos:line="85" pos:column="14"/></name></expr>;<pos:position pos:line="85" pos:column="15"/></expr_stmt>
  <expr_stmt><expr><name pos:line="86" pos:column="3">type_instance<pos:position pos:line="86" pos:column="16"/></name> <operator pos:line="86" pos:column="17">=<pos:position pos:line="86" pos:column="18"/></operator> <name pos:line="86" pos:column="19">NULL<pos:position pos:line="86" pos:column="23"/></name></expr>;<pos:position pos:line="86" pos:column="24"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="87" pos:column="3">sfree<pos:position pos:line="87" pos:column="8"/></name><argument_list pos:line="87" pos:column="8">(<argument><expr><name pos:line="87" pos:column="9">identifier_copy<pos:position pos:line="87" pos:column="24"/></name></expr></argument>)<pos:position pos:line="87" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="26"/></expr_stmt>

  <expr_stmt><expr><name><name pos:line="89" pos:column="3">vl<pos:position pos:line="89" pos:column="5"/></name><operator pos:line="89" pos:column="5">.<pos:position pos:line="89" pos:column="6"/></operator><name pos:line="89" pos:column="6">values_len<pos:position pos:line="89" pos:column="16"/></name></name> <operator pos:line="89" pos:column="17">=<pos:position pos:line="89" pos:column="18"/></operator> <name><name pos:line="89" pos:column="19">ds<pos:position pos:line="89" pos:column="21"/></name><operator pos:line="89" pos:column="21">-&gt;<pos:position pos:line="89" pos:column="26"/></operator><name pos:line="89" pos:column="23">ds_num<pos:position pos:line="89" pos:column="29"/></name></name></expr>;<pos:position pos:line="89" pos:column="30"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="90" pos:column="3">vl<pos:position pos:line="90" pos:column="5"/></name><operator pos:line="90" pos:column="5">.<pos:position pos:line="90" pos:column="6"/></operator><name pos:line="90" pos:column="6">values<pos:position pos:line="90" pos:column="12"/></name></name> <operator pos:line="90" pos:column="13">=<pos:position pos:line="90" pos:column="14"/></operator> <call><name pos:line="90" pos:column="15">malloc<pos:position pos:line="90" pos:column="21"/></name><argument_list pos:line="90" pos:column="21">(<argument><expr><name><name pos:line="90" pos:column="22">vl<pos:position pos:line="90" pos:column="24"/></name><operator pos:line="90" pos:column="24">.<pos:position pos:line="90" pos:column="25"/></operator><name pos:line="90" pos:column="25">values_len<pos:position pos:line="90" pos:column="35"/></name></name> <operator pos:line="90" pos:column="36">*<pos:position pos:line="90" pos:column="37"/></operator> <sizeof pos:line="90" pos:column="38">sizeof<argument_list pos:line="90" pos:column="44">(<argument><expr><operator pos:line="90" pos:column="45">*<pos:position pos:line="90" pos:column="46"/></operator><name><name pos:line="90" pos:column="46">vl<pos:position pos:line="90" pos:column="48"/></name><operator pos:line="90" pos:column="48">.<pos:position pos:line="90" pos:column="49"/></operator><name pos:line="90" pos:column="49">values<pos:position pos:line="90" pos:column="55"/></name></name></expr></argument>)<pos:position pos:line="90" pos:column="56"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="90" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="90" pos:column="58"/></expr_stmt>
  <if pos:line="91" pos:column="3">if <condition pos:line="91" pos:column="6">(<expr><name><name pos:line="91" pos:column="7">vl<pos:position pos:line="91" pos:column="9"/></name><operator pos:line="91" pos:column="9">.<pos:position pos:line="91" pos:column="10"/></operator><name pos:line="91" pos:column="10">values<pos:position pos:line="91" pos:column="16"/></name></name> <operator pos:line="91" pos:column="17">==<pos:position pos:line="91" pos:column="19"/></operator> <name pos:line="91" pos:column="20">NULL<pos:position pos:line="91" pos:column="24"/></name></expr>)<pos:position pos:line="91" pos:column="25"/></condition><then pos:line="91" pos:column="25"> <block pos:line="91" pos:column="26">{
    <expr_stmt><expr><call><name pos:line="92" pos:column="5">print_to_socket<pos:position pos:line="92" pos:column="20"/></name><argument_list pos:line="92" pos:column="20">(<argument><expr><name pos:line="92" pos:column="21">fh<pos:position pos:line="92" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="92" pos:column="25">"-1 malloc failed.\n"<pos:position pos:line="92" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="92" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="48"/></expr_stmt>
    <return pos:line="93" pos:column="5">return <expr><operator pos:line="93" pos:column="12">(<pos:position pos:line="93" pos:column="13"/></operator><operator pos:line="93" pos:column="13">-<pos:position pos:line="93" pos:column="14"/></operator><literal type="number" pos:line="93" pos:column="14">1<pos:position pos:line="93" pos:column="15"/></literal><operator pos:line="93" pos:column="15">)<pos:position pos:line="93" pos:column="16"/></operator></expr>;<pos:position pos:line="93" pos:column="17"/></return>
  }<pos:position pos:line="94" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="96" pos:column="3">/* All the remaining fields are part of the optionlist. */</comment>
  <expr_stmt><expr><name pos:line="97" pos:column="3">values_submitted<pos:position pos:line="97" pos:column="19"/></name> <operator pos:line="97" pos:column="20">=<pos:position pos:line="97" pos:column="21"/></operator> <literal type="number" pos:line="97" pos:column="22">0<pos:position pos:line="97" pos:column="23"/></literal></expr>;<pos:position pos:line="97" pos:column="24"/></expr_stmt>
  <while pos:line="98" pos:column="3">while <condition pos:line="98" pos:column="9">(<expr><operator pos:line="98" pos:column="10">*<pos:position pos:line="98" pos:column="11"/></operator><name pos:line="98" pos:column="11">buffer<pos:position pos:line="98" pos:column="17"/></name> <operator pos:line="98" pos:column="18">!=<pos:position pos:line="98" pos:column="20"/></operator> <literal type="number" pos:line="98" pos:column="21">0<pos:position pos:line="98" pos:column="22"/></literal></expr>)<pos:position pos:line="98" pos:column="23"/></condition> <block pos:line="98" pos:column="24">{
    <decl_stmt><decl><type><name pos:line="99" pos:column="5">char<pos:position pos:line="99" pos:column="9"/></name> <modifier pos:line="99" pos:column="10">*<pos:position pos:line="99" pos:column="11"/></modifier></type><name pos:line="99" pos:column="11">string<pos:position pos:line="99" pos:column="17"/></name> <init pos:line="99" pos:column="18">= <expr><name pos:line="99" pos:column="20">NULL<pos:position pos:line="99" pos:column="24"/></name></expr></init></decl>;<pos:position pos:line="99" pos:column="25"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="100" pos:column="5">char<pos:position pos:line="100" pos:column="9"/></name> <modifier pos:line="100" pos:column="10">*<pos:position pos:line="100" pos:column="11"/></modifier></type><name pos:line="100" pos:column="11">value<pos:position pos:line="100" pos:column="16"/></name> <init pos:line="100" pos:column="17">= <expr><name pos:line="100" pos:column="19">NULL<pos:position pos:line="100" pos:column="23"/></name></expr></init></decl>;<pos:position pos:line="100" pos:column="24"/></decl_stmt>

    <expr_stmt><expr><name pos:line="102" pos:column="5">status<pos:position pos:line="102" pos:column="11"/></name> <operator pos:line="102" pos:column="12">=<pos:position pos:line="102" pos:column="13"/></operator> <call><name pos:line="102" pos:column="14">parse_option<pos:position pos:line="102" pos:column="26"/></name><argument_list pos:line="102" pos:column="26">(<argument><expr><operator pos:line="102" pos:column="27">&amp;<pos:position pos:line="102" pos:column="32"/></operator><name pos:line="102" pos:column="28">buffer<pos:position pos:line="102" pos:column="34"/></name></expr></argument>, <argument><expr><operator pos:line="102" pos:column="36">&amp;<pos:position pos:line="102" pos:column="41"/></operator><name pos:line="102" pos:column="37">string<pos:position pos:line="102" pos:column="43"/></name></expr></argument>, <argument><expr><operator pos:line="102" pos:column="45">&amp;<pos:position pos:line="102" pos:column="50"/></operator><name pos:line="102" pos:column="46">value<pos:position pos:line="102" pos:column="51"/></name></expr></argument>)<pos:position pos:line="102" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="102" pos:column="53"/></expr_stmt>
    <if pos:line="103" pos:column="5">if <condition pos:line="103" pos:column="8">(<expr><name pos:line="103" pos:column="9">status<pos:position pos:line="103" pos:column="15"/></name> <operator pos:line="103" pos:column="16">&lt;<pos:position pos:line="103" pos:column="20"/></operator> <literal type="number" pos:line="103" pos:column="18">0<pos:position pos:line="103" pos:column="19"/></literal></expr>)<pos:position pos:line="103" pos:column="20"/></condition><then pos:line="103" pos:column="20"> <block pos:line="103" pos:column="21">{
      <comment type="block" pos:line="104" pos:column="7">/* parse_option failed, buffer has been modified.
       * =&gt; we need to abort */</comment>
      <expr_stmt><expr><call><name pos:line="106" pos:column="7">print_to_socket<pos:position pos:line="106" pos:column="22"/></name><argument_list pos:line="106" pos:column="22">(<argument><expr><name pos:line="106" pos:column="23">fh<pos:position pos:line="106" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="106" pos:column="27">"-1 Misformatted option.\n"<pos:position pos:line="106" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="106" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="106" pos:column="56"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="107" pos:column="7">sfree<pos:position pos:line="107" pos:column="12"/></name><argument_list pos:line="107" pos:column="12">(<argument><expr><name><name pos:line="107" pos:column="13">vl<pos:position pos:line="107" pos:column="15"/></name><operator pos:line="107" pos:column="15">.<pos:position pos:line="107" pos:column="16"/></operator><name pos:line="107" pos:column="16">values<pos:position pos:line="107" pos:column="22"/></name></name></expr></argument>)<pos:position pos:line="107" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="107" pos:column="24"/></expr_stmt>
      <return pos:line="108" pos:column="7">return <expr><operator pos:line="108" pos:column="14">(<pos:position pos:line="108" pos:column="15"/></operator><operator pos:line="108" pos:column="15">-<pos:position pos:line="108" pos:column="16"/></operator><literal type="number" pos:line="108" pos:column="16">1<pos:position pos:line="108" pos:column="17"/></literal><operator pos:line="108" pos:column="17">)<pos:position pos:line="108" pos:column="18"/></operator></expr>;<pos:position pos:line="108" pos:column="19"/></return>
    }<pos:position pos:line="109" pos:column="6"/></block></then> <elseif pos:line="109" pos:column="7">else <if pos:line="109" pos:column="12">if <condition pos:line="109" pos:column="15">(<expr><name pos:line="109" pos:column="16">status<pos:position pos:line="109" pos:column="22"/></name> <operator pos:line="109" pos:column="23">==<pos:position pos:line="109" pos:column="25"/></operator> <literal type="number" pos:line="109" pos:column="26">0<pos:position pos:line="109" pos:column="27"/></literal></expr>)<pos:position pos:line="109" pos:column="28"/></condition><then pos:line="109" pos:column="28"> <block pos:line="109" pos:column="29">{
      <expr_stmt><expr><call><name pos:line="110" pos:column="7">assert<pos:position pos:line="110" pos:column="13"/></name><argument_list pos:line="110" pos:column="13">(<argument><expr><name pos:line="110" pos:column="14">string<pos:position pos:line="110" pos:column="20"/></name> <operator pos:line="110" pos:column="21">!=<pos:position pos:line="110" pos:column="23"/></operator> <name pos:line="110" pos:column="24">NULL<pos:position pos:line="110" pos:column="28"/></name></expr></argument>)<pos:position pos:line="110" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="110" pos:column="30"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="111" pos:column="7">assert<pos:position pos:line="111" pos:column="13"/></name><argument_list pos:line="111" pos:column="13">(<argument><expr><name pos:line="111" pos:column="14">value<pos:position pos:line="111" pos:column="19"/></name> <operator pos:line="111" pos:column="20">!=<pos:position pos:line="111" pos:column="22"/></operator> <name pos:line="111" pos:column="23">NULL<pos:position pos:line="111" pos:column="27"/></name></expr></argument>)<pos:position pos:line="111" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="111" pos:column="29"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="112" pos:column="7">set_option<pos:position pos:line="112" pos:column="17"/></name><argument_list pos:line="112" pos:column="17">(<argument><expr><operator pos:line="112" pos:column="18">&amp;<pos:position pos:line="112" pos:column="23"/></operator><name pos:line="112" pos:column="19">vl<pos:position pos:line="112" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="112" pos:column="23">string<pos:position pos:line="112" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="112" pos:column="31">value<pos:position pos:line="112" pos:column="36"/></name></expr></argument>)<pos:position pos:line="112" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="112" pos:column="38"/></expr_stmt>
      <continue pos:line="113" pos:column="7">continue;<pos:position pos:line="113" pos:column="16"/></continue>
    }<pos:position pos:line="114" pos:column="6"/></block></then></if></elseif></if>
    <comment type="block" pos:line="115" pos:column="5">/* else: parse_option but buffer has not been modified. This is
     * the default if no `=' is found.. */</comment>

    <expr_stmt><expr><name pos:line="118" pos:column="5">status<pos:position pos:line="118" pos:column="11"/></name> <operator pos:line="118" pos:column="12">=<pos:position pos:line="118" pos:column="13"/></operator> <call><name pos:line="118" pos:column="14">parse_string<pos:position pos:line="118" pos:column="26"/></name><argument_list pos:line="118" pos:column="26">(<argument><expr><operator pos:line="118" pos:column="27">&amp;<pos:position pos:line="118" pos:column="32"/></operator><name pos:line="118" pos:column="28">buffer<pos:position pos:line="118" pos:column="34"/></name></expr></argument>, <argument><expr><operator pos:line="118" pos:column="36">&amp;<pos:position pos:line="118" pos:column="41"/></operator><name pos:line="118" pos:column="37">string<pos:position pos:line="118" pos:column="43"/></name></expr></argument>)<pos:position pos:line="118" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="118" pos:column="45"/></expr_stmt>
    <if pos:line="119" pos:column="5">if <condition pos:line="119" pos:column="8">(<expr><name pos:line="119" pos:column="9">status<pos:position pos:line="119" pos:column="15"/></name> <operator pos:line="119" pos:column="16">!=<pos:position pos:line="119" pos:column="18"/></operator> <literal type="number" pos:line="119" pos:column="19">0<pos:position pos:line="119" pos:column="20"/></literal></expr>)<pos:position pos:line="119" pos:column="21"/></condition><then pos:line="119" pos:column="21"> <block pos:line="119" pos:column="22">{
      <expr_stmt><expr><call><name pos:line="120" pos:column="7">print_to_socket<pos:position pos:line="120" pos:column="22"/></name><argument_list pos:line="120" pos:column="22">(<argument><expr><name pos:line="120" pos:column="23">fh<pos:position pos:line="120" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="120" pos:column="27">"-1 Misformatted value.\n"<pos:position pos:line="120" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="120" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="120" pos:column="55"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="121" pos:column="7">sfree<pos:position pos:line="121" pos:column="12"/></name><argument_list pos:line="121" pos:column="12">(<argument><expr><name><name pos:line="121" pos:column="13">vl<pos:position pos:line="121" pos:column="15"/></name><operator pos:line="121" pos:column="15">.<pos:position pos:line="121" pos:column="16"/></operator><name pos:line="121" pos:column="16">values<pos:position pos:line="121" pos:column="22"/></name></name></expr></argument>)<pos:position pos:line="121" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="121" pos:column="24"/></expr_stmt>
      <return pos:line="122" pos:column="7">return <expr><operator pos:line="122" pos:column="14">(<pos:position pos:line="122" pos:column="15"/></operator><operator pos:line="122" pos:column="15">-<pos:position pos:line="122" pos:column="16"/></operator><literal type="number" pos:line="122" pos:column="16">1<pos:position pos:line="122" pos:column="17"/></literal><operator pos:line="122" pos:column="17">)<pos:position pos:line="122" pos:column="18"/></operator></expr>;<pos:position pos:line="122" pos:column="19"/></return>
    }<pos:position pos:line="123" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="124" pos:column="5">assert<pos:position pos:line="124" pos:column="11"/></name><argument_list pos:line="124" pos:column="11">(<argument><expr><name pos:line="124" pos:column="12">string<pos:position pos:line="124" pos:column="18"/></name> <operator pos:line="124" pos:column="19">!=<pos:position pos:line="124" pos:column="21"/></operator> <name pos:line="124" pos:column="22">NULL<pos:position pos:line="124" pos:column="26"/></name></expr></argument>)<pos:position pos:line="124" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="124" pos:column="28"/></expr_stmt>

    <expr_stmt><expr><name pos:line="126" pos:column="5">status<pos:position pos:line="126" pos:column="11"/></name> <operator pos:line="126" pos:column="12">=<pos:position pos:line="126" pos:column="13"/></operator> <call><name pos:line="126" pos:column="14">parse_values<pos:position pos:line="126" pos:column="26"/></name><argument_list pos:line="126" pos:column="26">(<argument><expr><name pos:line="126" pos:column="27">string<pos:position pos:line="126" pos:column="33"/></name></expr></argument>, <argument><expr><operator pos:line="126" pos:column="35">&amp;<pos:position pos:line="126" pos:column="40"/></operator><name pos:line="126" pos:column="36">vl<pos:position pos:line="126" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="126" pos:column="40">ds<pos:position pos:line="126" pos:column="42"/></name></expr></argument>)<pos:position pos:line="126" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="126" pos:column="44"/></expr_stmt>
    <if pos:line="127" pos:column="5">if <condition pos:line="127" pos:column="8">(<expr><name pos:line="127" pos:column="9">status<pos:position pos:line="127" pos:column="15"/></name> <operator pos:line="127" pos:column="16">!=<pos:position pos:line="127" pos:column="18"/></operator> <literal type="number" pos:line="127" pos:column="19">0<pos:position pos:line="127" pos:column="20"/></literal></expr>)<pos:position pos:line="127" pos:column="21"/></condition><then pos:line="127" pos:column="21"> <block pos:line="127" pos:column="22">{
      <expr_stmt><expr><call><name pos:line="128" pos:column="7">print_to_socket<pos:position pos:line="128" pos:column="22"/></name><argument_list pos:line="128" pos:column="22">(<argument><expr><name pos:line="128" pos:column="23">fh<pos:position pos:line="128" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="128" pos:column="27">"-1 Parsing the values string failed.\n"<pos:position pos:line="128" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="128" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="128" pos:column="69"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="129" pos:column="7">sfree<pos:position pos:line="129" pos:column="12"/></name><argument_list pos:line="129" pos:column="12">(<argument><expr><name><name pos:line="129" pos:column="13">vl<pos:position pos:line="129" pos:column="15"/></name><operator pos:line="129" pos:column="15">.<pos:position pos:line="129" pos:column="16"/></operator><name pos:line="129" pos:column="16">values<pos:position pos:line="129" pos:column="22"/></name></name></expr></argument>)<pos:position pos:line="129" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="129" pos:column="24"/></expr_stmt>
      <return pos:line="130" pos:column="7">return <expr><operator pos:line="130" pos:column="14">(<pos:position pos:line="130" pos:column="15"/></operator><operator pos:line="130" pos:column="15">-<pos:position pos:line="130" pos:column="16"/></operator><literal type="number" pos:line="130" pos:column="16">1<pos:position pos:line="130" pos:column="17"/></literal><operator pos:line="130" pos:column="17">)<pos:position pos:line="130" pos:column="18"/></operator></expr>;<pos:position pos:line="130" pos:column="19"/></return>
    }<pos:position pos:line="131" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="133" pos:column="5">plugin_dispatch_values<pos:position pos:line="133" pos:column="27"/></name><argument_list pos:line="133" pos:column="27">(<argument><expr><operator pos:line="133" pos:column="28">&amp;<pos:position pos:line="133" pos:column="33"/></operator><name pos:line="133" pos:column="29">vl<pos:position pos:line="133" pos:column="31"/></name></expr></argument>)<pos:position pos:line="133" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="133" pos:column="33"/></expr_stmt>
    <expr_stmt><expr><name pos:line="134" pos:column="5">values_submitted<pos:position pos:line="134" pos:column="21"/></name><operator pos:line="134" pos:column="21">++<pos:position pos:line="134" pos:column="23"/></operator></expr>;<pos:position pos:line="134" pos:column="24"/></expr_stmt>
  }<pos:position pos:line="135" pos:column="4"/></block></while> <comment type="block" pos:line="135" pos:column="5">/* while (*buffer != 0) */</comment>
  <comment type="block" pos:line="136" pos:column="3">/* Done parsing the options. */</comment>

  <if pos:line="138" pos:column="3">if <condition pos:line="138" pos:column="6">(<expr><name pos:line="138" pos:column="7">fh<pos:position pos:line="138" pos:column="9"/></name> <operator pos:line="138" pos:column="10">!=<pos:position pos:line="138" pos:column="12"/></operator> <name pos:line="138" pos:column="13">stdout<pos:position pos:line="138" pos:column="19"/></name></expr>)<pos:position pos:line="138" pos:column="20"/></condition><then pos:line="138" pos:column="20">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="139" pos:column="5">print_to_socket<pos:position pos:line="139" pos:column="20"/></name><argument_list pos:line="139" pos:column="20">(<argument><expr><name pos:line="139" pos:column="21">fh<pos:position pos:line="139" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="139" pos:column="25">"0 Success: %i %s been dispatched.\n"<pos:position pos:line="139" pos:column="62"/></literal></expr></argument>, <argument><expr><name pos:line="139" pos:column="64">values_submitted<pos:position pos:line="139" pos:column="80"/></name></expr></argument>,
                    <argument><expr><ternary><condition><expr><operator pos:line="140" pos:column="21">(<pos:position pos:line="140" pos:column="22"/></operator><name pos:line="140" pos:column="22">values_submitted<pos:position pos:line="140" pos:column="38"/></name> <operator pos:line="140" pos:column="39">==<pos:position pos:line="140" pos:column="41"/></operator> <literal type="number" pos:line="140" pos:column="42">1<pos:position pos:line="140" pos:column="43"/></literal><operator pos:line="140" pos:column="43">)<pos:position pos:line="140" pos:column="44"/></operator></expr> ?<pos:position pos:line="140" pos:column="46"/></condition><then pos:line="140" pos:column="46"> <expr><literal type="string" pos:line="140" pos:column="47">"value has"<pos:position pos:line="140" pos:column="58"/></literal></expr> <pos:position pos:line="140" pos:column="59"/></then><else pos:line="140" pos:column="59">: <expr><literal type="string" pos:line="140" pos:column="61">"values have"<pos:position pos:line="140" pos:column="74"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="140" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="140" pos:column="76"/></expr_stmt></block></then></if>

  <expr_stmt><expr><call><name pos:line="142" pos:column="3">sfree<pos:position pos:line="142" pos:column="8"/></name><argument_list pos:line="142" pos:column="8">(<argument><expr><name><name pos:line="142" pos:column="9">vl<pos:position pos:line="142" pos:column="11"/></name><operator pos:line="142" pos:column="11">.<pos:position pos:line="142" pos:column="12"/></operator><name pos:line="142" pos:column="12">values<pos:position pos:line="142" pos:column="18"/></name></name></expr></argument>)<pos:position pos:line="142" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="142" pos:column="20"/></expr_stmt>
  <return pos:line="143" pos:column="3">return <expr><operator pos:line="143" pos:column="10">(<pos:position pos:line="143" pos:column="11"/></operator><literal type="number" pos:line="143" pos:column="11">0<pos:position pos:line="143" pos:column="12"/></literal><operator pos:line="143" pos:column="12">)<pos:position pos:line="143" pos:column="13"/></operator></expr>;<pos:position pos:line="143" pos:column="14"/></return>
}<pos:position pos:line="144" pos:column="2"/></block></function></unit>
