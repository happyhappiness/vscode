<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_2752_collectd-5.7.1.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">plugin_write<pos:position pos:line="1" pos:column="17"/></name><parameter_list pos:line="1" pos:column="17">(<parameter><decl><type><specifier pos:line="1" pos:column="18">const<pos:position pos:line="1" pos:column="23"/></specifier> <name pos:line="1" pos:column="24">char<pos:position pos:line="1" pos:column="28"/></name> <modifier pos:line="1" pos:column="29">*<pos:position pos:line="1" pos:column="30"/></modifier></type><name pos:line="1" pos:column="30">plugin<pos:position pos:line="1" pos:column="36"/></name></decl></parameter>, <comment type="block" pos:line="1" pos:column="38">/* {{{ */</comment>
                 <parameter><decl><type><specifier pos:line="2" pos:column="18">const<pos:position pos:line="2" pos:column="23"/></specifier> <name pos:line="2" pos:column="24">data_set_t<pos:position pos:line="2" pos:column="34"/></name> <modifier pos:line="2" pos:column="35">*<pos:position pos:line="2" pos:column="36"/></modifier></type><name pos:line="2" pos:column="36">ds<pos:position pos:line="2" pos:column="38"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="40">const<pos:position pos:line="2" pos:column="45"/></specifier> <name pos:line="2" pos:column="46">value_list_t<pos:position pos:line="2" pos:column="58"/></name> <modifier pos:line="2" pos:column="59">*<pos:position pos:line="2" pos:column="60"/></modifier></type><name pos:line="2" pos:column="60">vl<pos:position pos:line="2" pos:column="62"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="63"/></parameter_list> <block pos:line="2" pos:column="64">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">llentry_t<pos:position pos:line="3" pos:column="12"/></name> <modifier pos:line="3" pos:column="13">*<pos:position pos:line="3" pos:column="14"/></modifier></type><name pos:line="3" pos:column="14">le<pos:position pos:line="3" pos:column="16"/></name></decl>;<pos:position pos:line="3" pos:column="17"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">int<pos:position pos:line="4" pos:column="6"/></name></type> <name pos:line="4" pos:column="7">status<pos:position pos:line="4" pos:column="13"/></name></decl>;<pos:position pos:line="4" pos:column="14"/></decl_stmt>

  <if pos:line="6" pos:column="3">if <condition pos:line="6" pos:column="6">(<expr><name pos:line="6" pos:column="7">vl<pos:position pos:line="6" pos:column="9"/></name> <operator pos:line="6" pos:column="10">==<pos:position pos:line="6" pos:column="12"/></operator> <name pos:line="6" pos:column="13">NULL<pos:position pos:line="6" pos:column="17"/></name></expr>)<pos:position pos:line="6" pos:column="18"/></condition><then pos:line="6" pos:column="18">
    <block type="pseudo"><return pos:line="7" pos:column="5">return <expr><operator pos:line="7" pos:column="12">(<pos:position pos:line="7" pos:column="13"/></operator><name pos:line="7" pos:column="13">EINVAL<pos:position pos:line="7" pos:column="19"/></name><operator pos:line="7" pos:column="19">)<pos:position pos:line="7" pos:column="20"/></operator></expr>;<pos:position pos:line="7" pos:column="21"/></return></block></then></if>

  <if pos:line="9" pos:column="3">if <condition pos:line="9" pos:column="6">(<expr><name pos:line="9" pos:column="7">list_write<pos:position pos:line="9" pos:column="17"/></name> <operator pos:line="9" pos:column="18">==<pos:position pos:line="9" pos:column="20"/></operator> <name pos:line="9" pos:column="21">NULL<pos:position pos:line="9" pos:column="25"/></name></expr>)<pos:position pos:line="9" pos:column="26"/></condition><then pos:line="9" pos:column="26">
    <block type="pseudo"><return pos:line="10" pos:column="5">return <expr><operator pos:line="10" pos:column="12">(<pos:position pos:line="10" pos:column="13"/></operator><name pos:line="10" pos:column="13">ENOENT<pos:position pos:line="10" pos:column="19"/></name><operator pos:line="10" pos:column="19">)<pos:position pos:line="10" pos:column="20"/></operator></expr>;<pos:position pos:line="10" pos:column="21"/></return></block></then></if>

  <if pos:line="12" pos:column="3">if <condition pos:line="12" pos:column="6">(<expr><name pos:line="12" pos:column="7">ds<pos:position pos:line="12" pos:column="9"/></name> <operator pos:line="12" pos:column="10">==<pos:position pos:line="12" pos:column="12"/></operator> <name pos:line="12" pos:column="13">NULL<pos:position pos:line="12" pos:column="17"/></name></expr>)<pos:position pos:line="12" pos:column="18"/></condition><then pos:line="12" pos:column="18"> <block pos:line="12" pos:column="19">{
    <expr_stmt><expr><name pos:line="13" pos:column="5">ds<pos:position pos:line="13" pos:column="7"/></name> <operator pos:line="13" pos:column="8">=<pos:position pos:line="13" pos:column="9"/></operator> <call><name pos:line="13" pos:column="10">plugin_get_ds<pos:position pos:line="13" pos:column="23"/></name><argument_list pos:line="13" pos:column="23">(<argument><expr><name><name pos:line="13" pos:column="24">vl<pos:position pos:line="13" pos:column="26"/></name><operator pos:line="13" pos:column="26">-&gt;<pos:position pos:line="13" pos:column="31"/></operator><name pos:line="13" pos:column="28">type<pos:position pos:line="13" pos:column="32"/></name></name></expr></argument>)<pos:position pos:line="13" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="34"/></expr_stmt>
    <if pos:line="14" pos:column="5">if <condition pos:line="14" pos:column="8">(<expr><name pos:line="14" pos:column="9">ds<pos:position pos:line="14" pos:column="11"/></name> <operator pos:line="14" pos:column="12">==<pos:position pos:line="14" pos:column="14"/></operator> <name pos:line="14" pos:column="15">NULL<pos:position pos:line="14" pos:column="19"/></name></expr>)<pos:position pos:line="14" pos:column="20"/></condition><then pos:line="14" pos:column="20"> <block pos:line="14" pos:column="21">{
      <expr_stmt><expr><call><name pos:line="15" pos:column="7">ERROR<pos:position pos:line="15" pos:column="12"/></name><argument_list pos:line="15" pos:column="12">(<argument><expr><literal type="string" pos:line="15" pos:column="13">"plugin_write: Unable to lookup type `%s'."<pos:position pos:line="15" pos:column="56"/></literal></expr></argument>, <argument><expr><name><name pos:line="15" pos:column="58">vl<pos:position pos:line="15" pos:column="60"/></name><operator pos:line="15" pos:column="60">-&gt;<pos:position pos:line="15" pos:column="65"/></operator><name pos:line="15" pos:column="62">type<pos:position pos:line="15" pos:column="66"/></name></name></expr></argument>)<pos:position pos:line="15" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="68"/></expr_stmt>
      <return pos:line="16" pos:column="7">return <expr><operator pos:line="16" pos:column="14">(<pos:position pos:line="16" pos:column="15"/></operator><name pos:line="16" pos:column="15">ENOENT<pos:position pos:line="16" pos:column="21"/></name><operator pos:line="16" pos:column="21">)<pos:position pos:line="16" pos:column="22"/></operator></expr>;<pos:position pos:line="16" pos:column="23"/></return>
    }<pos:position pos:line="17" pos:column="6"/></block></then></if>
  }<pos:position pos:line="18" pos:column="4"/></block></then></if>

  <if pos:line="20" pos:column="3">if <condition pos:line="20" pos:column="6">(<expr><name pos:line="20" pos:column="7">plugin<pos:position pos:line="20" pos:column="13"/></name> <operator pos:line="20" pos:column="14">==<pos:position pos:line="20" pos:column="16"/></operator> <name pos:line="20" pos:column="17">NULL<pos:position pos:line="20" pos:column="21"/></name></expr>)<pos:position pos:line="20" pos:column="22"/></condition><then pos:line="20" pos:column="22"> <block pos:line="20" pos:column="23">{
    <decl_stmt><decl><type><name pos:line="21" pos:column="5">int<pos:position pos:line="21" pos:column="8"/></name></type> <name pos:line="21" pos:column="9">success<pos:position pos:line="21" pos:column="16"/></name> <init pos:line="21" pos:column="17">= <expr><literal type="number" pos:line="21" pos:column="19">0<pos:position pos:line="21" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="21" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="22" pos:column="5">int<pos:position pos:line="22" pos:column="8"/></name></type> <name pos:line="22" pos:column="9">failure<pos:position pos:line="22" pos:column="16"/></name> <init pos:line="22" pos:column="17">= <expr><literal type="number" pos:line="22" pos:column="19">0<pos:position pos:line="22" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="22" pos:column="21"/></decl_stmt>

    <expr_stmt><expr><name pos:line="24" pos:column="5">le<pos:position pos:line="24" pos:column="7"/></name> <operator pos:line="24" pos:column="8">=<pos:position pos:line="24" pos:column="9"/></operator> <call><name pos:line="24" pos:column="10">llist_head<pos:position pos:line="24" pos:column="20"/></name><argument_list pos:line="24" pos:column="20">(<argument><expr><name pos:line="24" pos:column="21">list_write<pos:position pos:line="24" pos:column="31"/></name></expr></argument>)<pos:position pos:line="24" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="33"/></expr_stmt>
    <while pos:line="25" pos:column="5">while <condition pos:line="25" pos:column="11">(<expr><name pos:line="25" pos:column="12">le<pos:position pos:line="25" pos:column="14"/></name> <operator pos:line="25" pos:column="15">!=<pos:position pos:line="25" pos:column="17"/></operator> <name pos:line="25" pos:column="18">NULL<pos:position pos:line="25" pos:column="22"/></name></expr>)<pos:position pos:line="25" pos:column="23"/></condition> <block pos:line="25" pos:column="24">{
      <decl_stmt><decl><type><name pos:line="26" pos:column="7">callback_func_t<pos:position pos:line="26" pos:column="22"/></name> <modifier pos:line="26" pos:column="23">*<pos:position pos:line="26" pos:column="24"/></modifier></type><name pos:line="26" pos:column="24">cf<pos:position pos:line="26" pos:column="26"/></name> <init pos:line="26" pos:column="27">= <expr><name><name pos:line="26" pos:column="29">le<pos:position pos:line="26" pos:column="31"/></name><operator pos:line="26" pos:column="31">-&gt;<pos:position pos:line="26" pos:column="36"/></operator><name pos:line="26" pos:column="33">value<pos:position pos:line="26" pos:column="38"/></name></name></expr></init></decl>;<pos:position pos:line="26" pos:column="39"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="27" pos:column="7">plugin_write_cb<pos:position pos:line="27" pos:column="22"/></name></type> <name pos:line="27" pos:column="23">callback<pos:position pos:line="27" pos:column="31"/></name></decl>;<pos:position pos:line="27" pos:column="32"/></decl_stmt>

      <comment type="block" pos:line="29" pos:column="7">/* do not switch plugin context; rather keep the context (interval)
       * information of the calling read plugin */</comment>

      <expr_stmt><expr><call><name pos:line="32" pos:column="7">DEBUG<pos:position pos:line="32" pos:column="12"/></name><argument_list pos:line="32" pos:column="12">(<argument><expr><literal type="string" pos:line="32" pos:column="13">"plugin: plugin_write: Writing values via %s."<pos:position pos:line="32" pos:column="59"/></literal></expr></argument>, <argument><expr><name><name pos:line="32" pos:column="61">le<pos:position pos:line="32" pos:column="63"/></name><operator pos:line="32" pos:column="63">-&gt;<pos:position pos:line="32" pos:column="68"/></operator><name pos:line="32" pos:column="65">key<pos:position pos:line="32" pos:column="68"/></name></name></expr></argument>)<pos:position pos:line="32" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="70"/></expr_stmt>
      <expr_stmt><expr><name pos:line="33" pos:column="7">callback<pos:position pos:line="33" pos:column="15"/></name> <operator pos:line="33" pos:column="16">=<pos:position pos:line="33" pos:column="17"/></operator> <name><name pos:line="33" pos:column="18">cf<pos:position pos:line="33" pos:column="20"/></name><operator pos:line="33" pos:column="20">-&gt;<pos:position pos:line="33" pos:column="25"/></operator><name pos:line="33" pos:column="22">cf_callback<pos:position pos:line="33" pos:column="33"/></name></name></expr>;<pos:position pos:line="33" pos:column="34"/></expr_stmt>
      <expr_stmt><expr><name pos:line="34" pos:column="7">status<pos:position pos:line="34" pos:column="13"/></name> <operator pos:line="34" pos:column="14">=<pos:position pos:line="34" pos:column="15"/></operator> <call pos:line="34" pos:column="16">(<modifier pos:line="34" pos:column="17">*<pos:position pos:line="34" pos:column="18"/></modifier><name pos:line="34" pos:column="18">callback<pos:position pos:line="34" pos:column="26"/></name>)<argument_list pos:line="34" pos:column="27">(<argument><expr><name pos:line="34" pos:column="28">ds<pos:position pos:line="34" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="32">vl<pos:position pos:line="34" pos:column="34"/></name></expr></argument>, <argument><expr><operator pos:line="34" pos:column="36">&amp;<pos:position pos:line="34" pos:column="41"/></operator><name><name pos:line="34" pos:column="37">cf<pos:position pos:line="34" pos:column="39"/></name><operator pos:line="34" pos:column="39">-&gt;<pos:position pos:line="34" pos:column="44"/></operator><name pos:line="34" pos:column="41">cf_udata<pos:position pos:line="34" pos:column="49"/></name></name></expr></argument>)<pos:position pos:line="34" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="51"/></expr_stmt>
      <if pos:line="35" pos:column="7">if <condition pos:line="35" pos:column="10">(<expr><name pos:line="35" pos:column="11">status<pos:position pos:line="35" pos:column="17"/></name> <operator pos:line="35" pos:column="18">!=<pos:position pos:line="35" pos:column="20"/></operator> <literal type="number" pos:line="35" pos:column="21">0<pos:position pos:line="35" pos:column="22"/></literal></expr>)<pos:position pos:line="35" pos:column="23"/></condition><then pos:line="35" pos:column="23">
        <block type="pseudo"><expr_stmt><expr><name pos:line="36" pos:column="9">failure<pos:position pos:line="36" pos:column="16"/></name><operator pos:line="36" pos:column="16">++<pos:position pos:line="36" pos:column="18"/></operator></expr>;<pos:position pos:line="36" pos:column="19"/></expr_stmt></block></then>
      <else pos:line="37" pos:column="7">else
        <block type="pseudo"><expr_stmt><expr><name pos:line="38" pos:column="9">success<pos:position pos:line="38" pos:column="16"/></name><operator pos:line="38" pos:column="16">++<pos:position pos:line="38" pos:column="18"/></operator></expr>;<pos:position pos:line="38" pos:column="19"/></expr_stmt></block></else></if>

      <expr_stmt><expr><name pos:line="40" pos:column="7">le<pos:position pos:line="40" pos:column="9"/></name> <operator pos:line="40" pos:column="10">=<pos:position pos:line="40" pos:column="11"/></operator> <name><name pos:line="40" pos:column="12">le<pos:position pos:line="40" pos:column="14"/></name><operator pos:line="40" pos:column="14">-&gt;<pos:position pos:line="40" pos:column="19"/></operator><name pos:line="40" pos:column="16">next<pos:position pos:line="40" pos:column="20"/></name></name></expr>;<pos:position pos:line="40" pos:column="21"/></expr_stmt>
    }<pos:position pos:line="41" pos:column="6"/></block></while>

    <if pos:line="43" pos:column="5">if <condition pos:line="43" pos:column="8">(<expr><operator pos:line="43" pos:column="9">(<pos:position pos:line="43" pos:column="10"/></operator><name pos:line="43" pos:column="10">success<pos:position pos:line="43" pos:column="17"/></name> <operator pos:line="43" pos:column="18">==<pos:position pos:line="43" pos:column="20"/></operator> <literal type="number" pos:line="43" pos:column="21">0<pos:position pos:line="43" pos:column="22"/></literal><operator pos:line="43" pos:column="22">)<pos:position pos:line="43" pos:column="23"/></operator> <operator pos:line="43" pos:column="24">&amp;&amp;<pos:position pos:line="43" pos:column="34"/></operator> <operator pos:line="43" pos:column="27">(<pos:position pos:line="43" pos:column="28"/></operator><name pos:line="43" pos:column="28">failure<pos:position pos:line="43" pos:column="35"/></name> <operator pos:line="43" pos:column="36">!=<pos:position pos:line="43" pos:column="38"/></operator> <literal type="number" pos:line="43" pos:column="39">0<pos:position pos:line="43" pos:column="40"/></literal><operator pos:line="43" pos:column="40">)<pos:position pos:line="43" pos:column="41"/></operator></expr>)<pos:position pos:line="43" pos:column="42"/></condition><then pos:line="43" pos:column="42">
      <block type="pseudo"><expr_stmt><expr><name pos:line="44" pos:column="7">status<pos:position pos:line="44" pos:column="13"/></name> <operator pos:line="44" pos:column="14">=<pos:position pos:line="44" pos:column="15"/></operator> <operator pos:line="44" pos:column="16">-<pos:position pos:line="44" pos:column="17"/></operator><literal type="number" pos:line="44" pos:column="17">1<pos:position pos:line="44" pos:column="18"/></literal></expr>;<pos:position pos:line="44" pos:column="19"/></expr_stmt></block></then>
    <else pos:line="45" pos:column="5">else
      <block type="pseudo"><expr_stmt><expr><name pos:line="46" pos:column="7">status<pos:position pos:line="46" pos:column="13"/></name> <operator pos:line="46" pos:column="14">=<pos:position pos:line="46" pos:column="15"/></operator> <literal type="number" pos:line="46" pos:column="16">0<pos:position pos:line="46" pos:column="17"/></literal></expr>;<pos:position pos:line="46" pos:column="18"/></expr_stmt></block></else></if>
  }<pos:position pos:line="47" pos:column="4"/></block></then> <else pos:line="47" pos:column="5">else <comment type="block" pos:line="47" pos:column="10">/* plugin != NULL */</comment>
  <block pos:line="48" pos:column="3">{
    <decl_stmt><decl><type><name pos:line="49" pos:column="5">callback_func_t<pos:position pos:line="49" pos:column="20"/></name> <modifier pos:line="49" pos:column="21">*<pos:position pos:line="49" pos:column="22"/></modifier></type><name pos:line="49" pos:column="22">cf<pos:position pos:line="49" pos:column="24"/></name></decl>;<pos:position pos:line="49" pos:column="25"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="50" pos:column="5">plugin_write_cb<pos:position pos:line="50" pos:column="20"/></name></type> <name pos:line="50" pos:column="21">callback<pos:position pos:line="50" pos:column="29"/></name></decl>;<pos:position pos:line="50" pos:column="30"/></decl_stmt>

    <expr_stmt><expr><name pos:line="52" pos:column="5">le<pos:position pos:line="52" pos:column="7"/></name> <operator pos:line="52" pos:column="8">=<pos:position pos:line="52" pos:column="9"/></operator> <call><name pos:line="52" pos:column="10">llist_head<pos:position pos:line="52" pos:column="20"/></name><argument_list pos:line="52" pos:column="20">(<argument><expr><name pos:line="52" pos:column="21">list_write<pos:position pos:line="52" pos:column="31"/></name></expr></argument>)<pos:position pos:line="52" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="33"/></expr_stmt>
    <while pos:line="53" pos:column="5">while <condition pos:line="53" pos:column="11">(<expr><name pos:line="53" pos:column="12">le<pos:position pos:line="53" pos:column="14"/></name> <operator pos:line="53" pos:column="15">!=<pos:position pos:line="53" pos:column="17"/></operator> <name pos:line="53" pos:column="18">NULL<pos:position pos:line="53" pos:column="22"/></name></expr>)<pos:position pos:line="53" pos:column="23"/></condition> <block pos:line="53" pos:column="24">{
      <if pos:line="54" pos:column="7">if <condition pos:line="54" pos:column="10">(<expr><call><name pos:line="54" pos:column="11">strcasecmp<pos:position pos:line="54" pos:column="21"/></name><argument_list pos:line="54" pos:column="21">(<argument><expr><name pos:line="54" pos:column="22">plugin<pos:position pos:line="54" pos:column="28"/></name></expr></argument>, <argument><expr><name><name pos:line="54" pos:column="30">le<pos:position pos:line="54" pos:column="32"/></name><operator pos:line="54" pos:column="32">-&gt;<pos:position pos:line="54" pos:column="37"/></operator><name pos:line="54" pos:column="34">key<pos:position pos:line="54" pos:column="37"/></name></name></expr></argument>)<pos:position pos:line="54" pos:column="38"/></argument_list></call> <operator pos:line="54" pos:column="39">==<pos:position pos:line="54" pos:column="41"/></operator> <literal type="number" pos:line="54" pos:column="42">0<pos:position pos:line="54" pos:column="43"/></literal></expr>)<pos:position pos:line="54" pos:column="44"/></condition><then pos:line="54" pos:column="44">
        <block type="pseudo"><break pos:line="55" pos:column="9">break;<pos:position pos:line="55" pos:column="15"/></break></block></then></if>

      <expr_stmt><expr><name pos:line="57" pos:column="7">le<pos:position pos:line="57" pos:column="9"/></name> <operator pos:line="57" pos:column="10">=<pos:position pos:line="57" pos:column="11"/></operator> <name><name pos:line="57" pos:column="12">le<pos:position pos:line="57" pos:column="14"/></name><operator pos:line="57" pos:column="14">-&gt;<pos:position pos:line="57" pos:column="19"/></operator><name pos:line="57" pos:column="16">next<pos:position pos:line="57" pos:column="20"/></name></name></expr>;<pos:position pos:line="57" pos:column="21"/></expr_stmt>
    }<pos:position pos:line="58" pos:column="6"/></block></while>

    <if pos:line="60" pos:column="5">if <condition pos:line="60" pos:column="8">(<expr><name pos:line="60" pos:column="9">le<pos:position pos:line="60" pos:column="11"/></name> <operator pos:line="60" pos:column="12">==<pos:position pos:line="60" pos:column="14"/></operator> <name pos:line="60" pos:column="15">NULL<pos:position pos:line="60" pos:column="19"/></name></expr>)<pos:position pos:line="60" pos:column="20"/></condition><then pos:line="60" pos:column="20">
      <block type="pseudo"><return pos:line="61" pos:column="7">return <expr><operator pos:line="61" pos:column="14">(<pos:position pos:line="61" pos:column="15"/></operator><name pos:line="61" pos:column="15">ENOENT<pos:position pos:line="61" pos:column="21"/></name><operator pos:line="61" pos:column="21">)<pos:position pos:line="61" pos:column="22"/></operator></expr>;<pos:position pos:line="61" pos:column="23"/></return></block></then></if>

    <expr_stmt><expr><name pos:line="63" pos:column="5">cf<pos:position pos:line="63" pos:column="7"/></name> <operator pos:line="63" pos:column="8">=<pos:position pos:line="63" pos:column="9"/></operator> <name><name pos:line="63" pos:column="10">le<pos:position pos:line="63" pos:column="12"/></name><operator pos:line="63" pos:column="12">-&gt;<pos:position pos:line="63" pos:column="17"/></operator><name pos:line="63" pos:column="14">value<pos:position pos:line="63" pos:column="19"/></name></name></expr>;<pos:position pos:line="63" pos:column="20"/></expr_stmt>

    <comment type="block" pos:line="65" pos:column="5">/* do not switch plugin context; rather keep the context (interval)
     * information of the calling read plugin */</comment>

    <expr_stmt><expr><call><name pos:line="68" pos:column="5">DEBUG<pos:position pos:line="68" pos:column="10"/></name><argument_list pos:line="68" pos:column="10">(<argument><expr><literal type="string" pos:line="68" pos:column="11">"plugin: plugin_write: Writing values via %s."<pos:position pos:line="68" pos:column="57"/></literal></expr></argument>, <argument><expr><name><name pos:line="68" pos:column="59">le<pos:position pos:line="68" pos:column="61"/></name><operator pos:line="68" pos:column="61">-&gt;<pos:position pos:line="68" pos:column="66"/></operator><name pos:line="68" pos:column="63">key<pos:position pos:line="68" pos:column="66"/></name></name></expr></argument>)<pos:position pos:line="68" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="68"/></expr_stmt>
    <expr_stmt><expr><name pos:line="69" pos:column="5">callback<pos:position pos:line="69" pos:column="13"/></name> <operator pos:line="69" pos:column="14">=<pos:position pos:line="69" pos:column="15"/></operator> <name><name pos:line="69" pos:column="16">cf<pos:position pos:line="69" pos:column="18"/></name><operator pos:line="69" pos:column="18">-&gt;<pos:position pos:line="69" pos:column="23"/></operator><name pos:line="69" pos:column="20">cf_callback<pos:position pos:line="69" pos:column="31"/></name></name></expr>;<pos:position pos:line="69" pos:column="32"/></expr_stmt>
    <expr_stmt><expr><name pos:line="70" pos:column="5">status<pos:position pos:line="70" pos:column="11"/></name> <operator pos:line="70" pos:column="12">=<pos:position pos:line="70" pos:column="13"/></operator> <call pos:line="70" pos:column="14">(<modifier pos:line="70" pos:column="15">*<pos:position pos:line="70" pos:column="16"/></modifier><name pos:line="70" pos:column="16">callback<pos:position pos:line="70" pos:column="24"/></name>)<argument_list pos:line="70" pos:column="25">(<argument><expr><name pos:line="70" pos:column="26">ds<pos:position pos:line="70" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="70" pos:column="30">vl<pos:position pos:line="70" pos:column="32"/></name></expr></argument>, <argument><expr><operator pos:line="70" pos:column="34">&amp;<pos:position pos:line="70" pos:column="39"/></operator><name><name pos:line="70" pos:column="35">cf<pos:position pos:line="70" pos:column="37"/></name><operator pos:line="70" pos:column="37">-&gt;<pos:position pos:line="70" pos:column="42"/></operator><name pos:line="70" pos:column="39">cf_udata<pos:position pos:line="70" pos:column="47"/></name></name></expr></argument>)<pos:position pos:line="70" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="49"/></expr_stmt>
  }<pos:position pos:line="71" pos:column="4"/></block></else></if>

  <return pos:line="73" pos:column="3">return <expr><operator pos:line="73" pos:column="10">(<pos:position pos:line="73" pos:column="11"/></operator><name pos:line="73" pos:column="11">status<pos:position pos:line="73" pos:column="17"/></name><operator pos:line="73" pos:column="17">)<pos:position pos:line="73" pos:column="18"/></operator></expr>;<pos:position pos:line="73" pos:column="19"/></return>
}<pos:position pos:line="74" pos:column="2"/></block></function></unit>
