<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1029_collectd-5.6.2.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">filter_ds<pos:position pos:line="1" pos:column="21"/></name><parameter_list pos:line="1" pos:column="21">(<parameter><decl><type><name pos:line="1" pos:column="22">size_t<pos:position pos:line="1" pos:column="28"/></name> <modifier pos:line="1" pos:column="29">*<pos:position pos:line="1" pos:column="30"/></modifier></type><name pos:line="1" pos:column="30">values_num<pos:position pos:line="1" pos:column="40"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="42">double<pos:position pos:line="1" pos:column="48"/></name> <modifier pos:line="1" pos:column="49">*<pos:position pos:line="1" pos:column="50"/></modifier><modifier pos:line="1" pos:column="50">*<pos:position pos:line="1" pos:column="51"/></modifier></type><name pos:line="1" pos:column="51">values<pos:position pos:line="1" pos:column="57"/></name></decl></parameter>,
                     <parameter><decl><type><name pos:line="2" pos:column="22">char<pos:position pos:line="2" pos:column="26"/></name> <modifier pos:line="2" pos:column="27">*<pos:position pos:line="2" pos:column="28"/></modifier><modifier pos:line="2" pos:column="28">*<pos:position pos:line="2" pos:column="29"/></modifier><modifier pos:line="2" pos:column="29">*<pos:position pos:line="2" pos:column="30"/></modifier></type><name pos:line="2" pos:column="30">values_names<pos:position pos:line="2" pos:column="42"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="43"/></parameter_list> <block pos:line="2" pos:column="44">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">gauge_t<pos:position pos:line="3" pos:column="10"/></name> <modifier pos:line="3" pos:column="11">*<pos:position pos:line="3" pos:column="12"/></modifier></type><name pos:line="3" pos:column="12">new_values<pos:position pos:line="3" pos:column="22"/></name></decl>;<pos:position pos:line="3" pos:column="23"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">char<pos:position pos:line="4" pos:column="7"/></name> <modifier pos:line="4" pos:column="8">*<pos:position pos:line="4" pos:column="9"/></modifier><modifier pos:line="4" pos:column="9">*<pos:position pos:line="4" pos:column="10"/></modifier></type><name pos:line="4" pos:column="10">new_names<pos:position pos:line="4" pos:column="19"/></name></decl>;<pos:position pos:line="4" pos:column="20"/></decl_stmt>

  <if pos:line="6" pos:column="3">if <condition pos:line="6" pos:column="6">(<expr><name pos:line="6" pos:column="7">match_ds_g<pos:position pos:line="6" pos:column="17"/></name> <operator pos:line="6" pos:column="18">==<pos:position pos:line="6" pos:column="20"/></operator> <name pos:line="6" pos:column="21">NULL<pos:position pos:line="6" pos:column="25"/></name></expr>)<pos:position pos:line="6" pos:column="26"/></condition><then pos:line="6" pos:column="26">
    <block type="pseudo"><return pos:line="7" pos:column="5">return <expr><operator pos:line="7" pos:column="12">(<pos:position pos:line="7" pos:column="13"/></operator><name pos:line="7" pos:column="13">RET_OKAY<pos:position pos:line="7" pos:column="21"/></name><operator pos:line="7" pos:column="21">)<pos:position pos:line="7" pos:column="22"/></operator></expr>;<pos:position pos:line="7" pos:column="23"/></return></block></then></if>

  <expr_stmt><expr><name pos:line="9" pos:column="3">new_values<pos:position pos:line="9" pos:column="13"/></name> <operator pos:line="9" pos:column="14">=<pos:position pos:line="9" pos:column="15"/></operator> <operator pos:line="9" pos:column="16">(<pos:position pos:line="9" pos:column="17"/></operator><name pos:line="9" pos:column="17">gauge_t<pos:position pos:line="9" pos:column="24"/></name> <operator pos:line="9" pos:column="25">*<pos:position pos:line="9" pos:column="26"/></operator><operator pos:line="9" pos:column="26">)<pos:position pos:line="9" pos:column="27"/></operator><call><name pos:line="9" pos:column="27">calloc<pos:position pos:line="9" pos:column="33"/></name><argument_list pos:line="9" pos:column="33">(<argument><expr><name pos:line="9" pos:column="34">match_ds_num_g<pos:position pos:line="9" pos:column="48"/></name></expr></argument>, <argument><expr><sizeof pos:line="9" pos:column="50">sizeof<argument_list pos:line="9" pos:column="56">(<argument><expr><operator pos:line="9" pos:column="57">*<pos:position pos:line="9" pos:column="58"/></operator><name pos:line="9" pos:column="58">new_values<pos:position pos:line="9" pos:column="68"/></name></expr></argument>)<pos:position pos:line="9" pos:column="69"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="9" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="71"/></expr_stmt>
  <if pos:line="10" pos:column="3">if <condition pos:line="10" pos:column="6">(<expr><name pos:line="10" pos:column="7">new_values<pos:position pos:line="10" pos:column="17"/></name> <operator pos:line="10" pos:column="18">==<pos:position pos:line="10" pos:column="20"/></operator> <name pos:line="10" pos:column="21">NULL<pos:position pos:line="10" pos:column="25"/></name></expr>)<pos:position pos:line="10" pos:column="26"/></condition><then pos:line="10" pos:column="26"> <block pos:line="10" pos:column="27">{
    <expr_stmt><expr><call><name pos:line="11" pos:column="5">fprintf<pos:position pos:line="11" pos:column="12"/></name><argument_list pos:line="11" pos:column="12">(<argument><expr><name pos:line="11" pos:column="13">stderr<pos:position pos:line="11" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="11" pos:column="21">"calloc failed: %s\n"<pos:position pos:line="11" pos:column="42"/></literal></expr></argument>, <argument><expr><call><name pos:line="11" pos:column="44">strerror<pos:position pos:line="11" pos:column="52"/></name><argument_list pos:line="11" pos:column="52">(<argument><expr><name pos:line="11" pos:column="53">errno<pos:position pos:line="11" pos:column="58"/></name></expr></argument>)<pos:position pos:line="11" pos:column="59"/></argument_list></call></expr></argument>)<pos:position pos:line="11" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="61"/></expr_stmt>
    <return pos:line="12" pos:column="5">return <expr><operator pos:line="12" pos:column="12">(<pos:position pos:line="12" pos:column="13"/></operator><name pos:line="12" pos:column="13">RET_UNKNOWN<pos:position pos:line="12" pos:column="24"/></name><operator pos:line="12" pos:column="24">)<pos:position pos:line="12" pos:column="25"/></operator></expr>;<pos:position pos:line="12" pos:column="26"/></return>
  }<pos:position pos:line="13" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="15" pos:column="3">new_names<pos:position pos:line="15" pos:column="12"/></name> <operator pos:line="15" pos:column="13">=<pos:position pos:line="15" pos:column="14"/></operator> <operator pos:line="15" pos:column="15">(<pos:position pos:line="15" pos:column="16"/></operator><name pos:line="15" pos:column="16">char<pos:position pos:line="15" pos:column="20"/></name> <operator pos:line="15" pos:column="21">*<pos:position pos:line="15" pos:column="22"/></operator><operator pos:line="15" pos:column="22">*<pos:position pos:line="15" pos:column="23"/></operator><operator pos:line="15" pos:column="23">)<pos:position pos:line="15" pos:column="24"/></operator><call><name pos:line="15" pos:column="24">calloc<pos:position pos:line="15" pos:column="30"/></name><argument_list pos:line="15" pos:column="30">(<argument><expr><name pos:line="15" pos:column="31">match_ds_num_g<pos:position pos:line="15" pos:column="45"/></name></expr></argument>, <argument><expr><sizeof pos:line="15" pos:column="47">sizeof<argument_list pos:line="15" pos:column="53">(<argument><expr><operator pos:line="15" pos:column="54">*<pos:position pos:line="15" pos:column="55"/></operator><name pos:line="15" pos:column="55">new_names<pos:position pos:line="15" pos:column="64"/></name></expr></argument>)<pos:position pos:line="15" pos:column="65"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="15" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="67"/></expr_stmt>
  <if pos:line="16" pos:column="3">if <condition pos:line="16" pos:column="6">(<expr><name pos:line="16" pos:column="7">new_names<pos:position pos:line="16" pos:column="16"/></name> <operator pos:line="16" pos:column="17">==<pos:position pos:line="16" pos:column="19"/></operator> <name pos:line="16" pos:column="20">NULL<pos:position pos:line="16" pos:column="24"/></name></expr>)<pos:position pos:line="16" pos:column="25"/></condition><then pos:line="16" pos:column="25"> <block pos:line="16" pos:column="26">{
    <expr_stmt><expr><call><name pos:line="17" pos:column="5">fprintf<pos:position pos:line="17" pos:column="12"/></name><argument_list pos:line="17" pos:column="12">(<argument><expr><name pos:line="17" pos:column="13">stderr<pos:position pos:line="17" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="17" pos:column="21">"calloc failed: %s\n"<pos:position pos:line="17" pos:column="42"/></literal></expr></argument>, <argument><expr><call><name pos:line="17" pos:column="44">strerror<pos:position pos:line="17" pos:column="52"/></name><argument_list pos:line="17" pos:column="52">(<argument><expr><name pos:line="17" pos:column="53">errno<pos:position pos:line="17" pos:column="58"/></name></expr></argument>)<pos:position pos:line="17" pos:column="59"/></argument_list></call></expr></argument>)<pos:position pos:line="17" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="61"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="18" pos:column="5">free<pos:position pos:line="18" pos:column="9"/></name><argument_list pos:line="18" pos:column="9">(<argument><expr><name pos:line="18" pos:column="10">new_values<pos:position pos:line="18" pos:column="20"/></name></expr></argument>)<pos:position pos:line="18" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="22"/></expr_stmt>
    <return pos:line="19" pos:column="5">return <expr><operator pos:line="19" pos:column="12">(<pos:position pos:line="19" pos:column="13"/></operator><name pos:line="19" pos:column="13">RET_UNKNOWN<pos:position pos:line="19" pos:column="24"/></name><operator pos:line="19" pos:column="24">)<pos:position pos:line="19" pos:column="25"/></operator></expr>;<pos:position pos:line="19" pos:column="26"/></return>
  }<pos:position pos:line="20" pos:column="4"/></block></then></if>

  <for pos:line="22" pos:column="3">for <control pos:line="22" pos:column="7">(<init><decl><type><name pos:line="22" pos:column="8">size_t<pos:position pos:line="22" pos:column="14"/></name></type> <name pos:line="22" pos:column="15">i<pos:position pos:line="22" pos:column="16"/></name> <init pos:line="22" pos:column="17">= <expr><literal type="number" pos:line="22" pos:column="19">0<pos:position pos:line="22" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="22" pos:column="21"/></init> <condition><expr><name pos:line="22" pos:column="22">i<pos:position pos:line="22" pos:column="23"/></name> <operator pos:line="22" pos:column="24">&lt;<pos:position pos:line="22" pos:column="28"/></operator> <name pos:line="22" pos:column="26">match_ds_num_g<pos:position pos:line="22" pos:column="40"/></name></expr>;<pos:position pos:line="22" pos:column="41"/></condition> <incr><expr><name pos:line="22" pos:column="42">i<pos:position pos:line="22" pos:column="43"/></name><operator pos:line="22" pos:column="43">++<pos:position pos:line="22" pos:column="45"/></operator></expr></incr>)<pos:position pos:line="22" pos:column="46"/></control> <block pos:line="22" pos:column="47">{
    <decl_stmt><decl><type><name pos:line="23" pos:column="5">size_t<pos:position pos:line="23" pos:column="11"/></name></type> <name pos:line="23" pos:column="12">j<pos:position pos:line="23" pos:column="13"/></name></decl>;<pos:position pos:line="23" pos:column="14"/></decl_stmt>

    <comment type="block" pos:line="25" pos:column="5">/* match_ds_g keeps pointers into argv but the names will be freed */</comment>
    <expr_stmt><expr><name><name pos:line="26" pos:column="5">new_names<pos:position pos:line="26" pos:column="14"/></name><index pos:line="26" pos:column="14">[<expr><name pos:line="26" pos:column="15">i<pos:position pos:line="26" pos:column="16"/></name></expr>]<pos:position pos:line="26" pos:column="17"/></index></name> <operator pos:line="26" pos:column="18">=<pos:position pos:line="26" pos:column="19"/></operator> <call><name pos:line="26" pos:column="20">cn_strdup<pos:position pos:line="26" pos:column="29"/></name><argument_list pos:line="26" pos:column="29">(<argument><expr><name><name pos:line="26" pos:column="30">match_ds_g<pos:position pos:line="26" pos:column="40"/></name><index pos:line="26" pos:column="40">[<expr><name pos:line="26" pos:column="41">i<pos:position pos:line="26" pos:column="42"/></name></expr>]<pos:position pos:line="26" pos:column="43"/></index></name></expr></argument>)<pos:position pos:line="26" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="45"/></expr_stmt>
    <if pos:line="27" pos:column="5">if <condition pos:line="27" pos:column="8">(<expr><name><name pos:line="27" pos:column="9">new_names<pos:position pos:line="27" pos:column="18"/></name><index pos:line="27" pos:column="18">[<expr><name pos:line="27" pos:column="19">i<pos:position pos:line="27" pos:column="20"/></name></expr>]<pos:position pos:line="27" pos:column="21"/></index></name> <operator pos:line="27" pos:column="22">==<pos:position pos:line="27" pos:column="24"/></operator> <name pos:line="27" pos:column="25">NULL<pos:position pos:line="27" pos:column="29"/></name></expr>)<pos:position pos:line="27" pos:column="30"/></condition><then pos:line="27" pos:column="30"> <block pos:line="27" pos:column="31">{
      <expr_stmt><expr><call><name pos:line="28" pos:column="7">fprintf<pos:position pos:line="28" pos:column="14"/></name><argument_list pos:line="28" pos:column="14">(<argument><expr><name pos:line="28" pos:column="15">stderr<pos:position pos:line="28" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="28" pos:column="23">"cn_strdup failed: %s\n"<pos:position pos:line="28" pos:column="47"/></literal></expr></argument>, <argument><expr><call><name pos:line="28" pos:column="49">strerror<pos:position pos:line="28" pos:column="57"/></name><argument_list pos:line="28" pos:column="57">(<argument><expr><name pos:line="28" pos:column="58">errno<pos:position pos:line="28" pos:column="63"/></name></expr></argument>)<pos:position pos:line="28" pos:column="64"/></argument_list></call></expr></argument>)<pos:position pos:line="28" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="66"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="29" pos:column="7">free<pos:position pos:line="29" pos:column="11"/></name><argument_list pos:line="29" pos:column="11">(<argument><expr><name pos:line="29" pos:column="12">new_values<pos:position pos:line="29" pos:column="22"/></name></expr></argument>)<pos:position pos:line="29" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="24"/></expr_stmt>
      <for pos:line="30" pos:column="7">for <control pos:line="30" pos:column="11">(<init><expr><name pos:line="30" pos:column="12">j<pos:position pos:line="30" pos:column="13"/></name> <operator pos:line="30" pos:column="14">=<pos:position pos:line="30" pos:column="15"/></operator> <literal type="number" pos:line="30" pos:column="16">0<pos:position pos:line="30" pos:column="17"/></literal></expr>;<pos:position pos:line="30" pos:column="18"/></init> <condition><expr><name pos:line="30" pos:column="19">j<pos:position pos:line="30" pos:column="20"/></name> <operator pos:line="30" pos:column="21">&lt;<pos:position pos:line="30" pos:column="25"/></operator> <name pos:line="30" pos:column="23">i<pos:position pos:line="30" pos:column="24"/></name></expr>;<pos:position pos:line="30" pos:column="25"/></condition> <incr><expr><name pos:line="30" pos:column="26">j<pos:position pos:line="30" pos:column="27"/></name><operator pos:line="30" pos:column="27">++<pos:position pos:line="30" pos:column="29"/></operator></expr></incr>)<pos:position pos:line="30" pos:column="30"/></control>
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="31" pos:column="9">free<pos:position pos:line="31" pos:column="13"/></name><argument_list pos:line="31" pos:column="13">(<argument><expr><name><name pos:line="31" pos:column="14">new_names<pos:position pos:line="31" pos:column="23"/></name><index pos:line="31" pos:column="23">[<expr><name pos:line="31" pos:column="24">j<pos:position pos:line="31" pos:column="25"/></name></expr>]<pos:position pos:line="31" pos:column="26"/></index></name></expr></argument>)<pos:position pos:line="31" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="28"/></expr_stmt></block></for>
      <expr_stmt><expr><call><name pos:line="32" pos:column="7">free<pos:position pos:line="32" pos:column="11"/></name><argument_list pos:line="32" pos:column="11">(<argument><expr><name pos:line="32" pos:column="12">new_names<pos:position pos:line="32" pos:column="21"/></name></expr></argument>)<pos:position pos:line="32" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="23"/></expr_stmt>
      <return pos:line="33" pos:column="7">return <expr><operator pos:line="33" pos:column="14">(<pos:position pos:line="33" pos:column="15"/></operator><name pos:line="33" pos:column="15">RET_UNKNOWN<pos:position pos:line="33" pos:column="26"/></name><operator pos:line="33" pos:column="26">)<pos:position pos:line="33" pos:column="27"/></operator></expr>;<pos:position pos:line="33" pos:column="28"/></return>
    }<pos:position pos:line="34" pos:column="6"/></block></then></if>

    <for pos:line="36" pos:column="5">for <control pos:line="36" pos:column="9">(<init><expr><name pos:line="36" pos:column="10">j<pos:position pos:line="36" pos:column="11"/></name> <operator pos:line="36" pos:column="12">=<pos:position pos:line="36" pos:column="13"/></operator> <literal type="number" pos:line="36" pos:column="14">0<pos:position pos:line="36" pos:column="15"/></literal></expr>;<pos:position pos:line="36" pos:column="16"/></init> <condition><expr><name pos:line="36" pos:column="17">j<pos:position pos:line="36" pos:column="18"/></name> <operator pos:line="36" pos:column="19">&lt;<pos:position pos:line="36" pos:column="23"/></operator> <operator pos:line="36" pos:column="21">*<pos:position pos:line="36" pos:column="22"/></operator><name pos:line="36" pos:column="22">values_num<pos:position pos:line="36" pos:column="32"/></name></expr>;<pos:position pos:line="36" pos:column="33"/></condition> <incr><expr><name pos:line="36" pos:column="34">j<pos:position pos:line="36" pos:column="35"/></name><operator pos:line="36" pos:column="35">++<pos:position pos:line="36" pos:column="37"/></operator></expr></incr>)<pos:position pos:line="36" pos:column="38"/></control>
      <block type="pseudo"><if pos:line="37" pos:column="7">if <condition pos:line="37" pos:column="10">(<expr><call><name pos:line="37" pos:column="11">strcasecmp<pos:position pos:line="37" pos:column="21"/></name><argument_list pos:line="37" pos:column="21">(<argument><expr><name><name pos:line="37" pos:column="22">new_names<pos:position pos:line="37" pos:column="31"/></name><index pos:line="37" pos:column="31">[<expr><name pos:line="37" pos:column="32">i<pos:position pos:line="37" pos:column="33"/></name></expr>]<pos:position pos:line="37" pos:column="34"/></index></name></expr></argument>, <argument><expr><operator pos:line="37" pos:column="36">(<pos:position pos:line="37" pos:column="37"/></operator><operator pos:line="37" pos:column="37">*<pos:position pos:line="37" pos:column="38"/></operator><name pos:line="37" pos:column="38">values_names<pos:position pos:line="37" pos:column="50"/></name><operator pos:line="37" pos:column="50">)<pos:position pos:line="37" pos:column="51"/></operator><index pos:line="37" pos:column="51">[<expr><name pos:line="37" pos:column="52">j<pos:position pos:line="37" pos:column="53"/></name></expr>]<pos:position pos:line="37" pos:column="54"/></index></expr></argument>)<pos:position pos:line="37" pos:column="55"/></argument_list></call> <operator pos:line="37" pos:column="56">==<pos:position pos:line="37" pos:column="58"/></operator> <literal type="number" pos:line="37" pos:column="59">0<pos:position pos:line="37" pos:column="60"/></literal></expr>)<pos:position pos:line="37" pos:column="61"/></condition><then pos:line="37" pos:column="61">
        <block type="pseudo"><break pos:line="38" pos:column="9">break;<pos:position pos:line="38" pos:column="15"/></break></block></then></if></block></for>

    <if pos:line="40" pos:column="5">if <condition pos:line="40" pos:column="8">(<expr><name pos:line="40" pos:column="9">j<pos:position pos:line="40" pos:column="10"/></name> <operator pos:line="40" pos:column="11">==<pos:position pos:line="40" pos:column="13"/></operator> <operator pos:line="40" pos:column="14">*<pos:position pos:line="40" pos:column="15"/></operator><name pos:line="40" pos:column="15">values_num<pos:position pos:line="40" pos:column="25"/></name></expr>)<pos:position pos:line="40" pos:column="26"/></condition><then pos:line="40" pos:column="26"> <block pos:line="40" pos:column="27">{
      <expr_stmt><expr><call><name pos:line="41" pos:column="7">printf<pos:position pos:line="41" pos:column="13"/></name><argument_list pos:line="41" pos:column="13">(<argument><expr><literal type="string" pos:line="41" pos:column="14">"ERROR: DS `%s' is not available.\n"<pos:position pos:line="41" pos:column="50"/></literal></expr></argument>, <argument><expr><name><name pos:line="41" pos:column="52">new_names<pos:position pos:line="41" pos:column="61"/></name><index pos:line="41" pos:column="61">[<expr><name pos:line="41" pos:column="62">i<pos:position pos:line="41" pos:column="63"/></name></expr>]<pos:position pos:line="41" pos:column="64"/></index></name></expr></argument>)<pos:position pos:line="41" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="66"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="42" pos:column="7">free<pos:position pos:line="42" pos:column="11"/></name><argument_list pos:line="42" pos:column="11">(<argument><expr><name pos:line="42" pos:column="12">new_values<pos:position pos:line="42" pos:column="22"/></name></expr></argument>)<pos:position pos:line="42" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="24"/></expr_stmt>
      <for pos:line="43" pos:column="7">for <control pos:line="43" pos:column="11">(<init><expr><name pos:line="43" pos:column="12">j<pos:position pos:line="43" pos:column="13"/></name> <operator pos:line="43" pos:column="14">=<pos:position pos:line="43" pos:column="15"/></operator> <literal type="number" pos:line="43" pos:column="16">0<pos:position pos:line="43" pos:column="17"/></literal></expr>;<pos:position pos:line="43" pos:column="18"/></init> <condition><expr><name pos:line="43" pos:column="19">j<pos:position pos:line="43" pos:column="20"/></name> <operator pos:line="43" pos:column="21">&lt;=<pos:position pos:line="43" pos:column="26"/></operator> <name pos:line="43" pos:column="24">i<pos:position pos:line="43" pos:column="25"/></name></expr>;<pos:position pos:line="43" pos:column="26"/></condition> <incr><expr><name pos:line="43" pos:column="27">j<pos:position pos:line="43" pos:column="28"/></name><operator pos:line="43" pos:column="28">++<pos:position pos:line="43" pos:column="30"/></operator></expr></incr>)<pos:position pos:line="43" pos:column="31"/></control>
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="44" pos:column="9">free<pos:position pos:line="44" pos:column="13"/></name><argument_list pos:line="44" pos:column="13">(<argument><expr><name><name pos:line="44" pos:column="14">new_names<pos:position pos:line="44" pos:column="23"/></name><index pos:line="44" pos:column="23">[<expr><name pos:line="44" pos:column="24">j<pos:position pos:line="44" pos:column="25"/></name></expr>]<pos:position pos:line="44" pos:column="26"/></index></name></expr></argument>)<pos:position pos:line="44" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="28"/></expr_stmt></block></for>
      <expr_stmt><expr><call><name pos:line="45" pos:column="7">free<pos:position pos:line="45" pos:column="11"/></name><argument_list pos:line="45" pos:column="11">(<argument><expr><name pos:line="45" pos:column="12">new_names<pos:position pos:line="45" pos:column="21"/></name></expr></argument>)<pos:position pos:line="45" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="23"/></expr_stmt>
      <return pos:line="46" pos:column="7">return <expr><operator pos:line="46" pos:column="14">(<pos:position pos:line="46" pos:column="15"/></operator><name pos:line="46" pos:column="15">RET_CRITICAL<pos:position pos:line="46" pos:column="27"/></name><operator pos:line="46" pos:column="27">)<pos:position pos:line="46" pos:column="28"/></operator></expr>;<pos:position pos:line="46" pos:column="29"/></return>
    }<pos:position pos:line="47" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name><name pos:line="49" pos:column="5">new_values<pos:position pos:line="49" pos:column="15"/></name><index pos:line="49" pos:column="15">[<expr><name pos:line="49" pos:column="16">i<pos:position pos:line="49" pos:column="17"/></name></expr>]<pos:position pos:line="49" pos:column="18"/></index></name> <operator pos:line="49" pos:column="19">=<pos:position pos:line="49" pos:column="20"/></operator> <operator pos:line="49" pos:column="21">(<pos:position pos:line="49" pos:column="22"/></operator><operator pos:line="49" pos:column="22">*<pos:position pos:line="49" pos:column="23"/></operator><name pos:line="49" pos:column="23">values<pos:position pos:line="49" pos:column="29"/></name><operator pos:line="49" pos:column="29">)<pos:position pos:line="49" pos:column="30"/></operator><index pos:line="49" pos:column="30">[<expr><name pos:line="49" pos:column="31">j<pos:position pos:line="49" pos:column="32"/></name></expr>]<pos:position pos:line="49" pos:column="33"/></index></expr>;<pos:position pos:line="49" pos:column="34"/></expr_stmt>
  }<pos:position pos:line="50" pos:column="4"/></block></for>

  <expr_stmt><expr><call><name pos:line="52" pos:column="3">free<pos:position pos:line="52" pos:column="7"/></name><argument_list pos:line="52" pos:column="7">(<argument><expr><operator pos:line="52" pos:column="8">*<pos:position pos:line="52" pos:column="9"/></operator><name pos:line="52" pos:column="9">values<pos:position pos:line="52" pos:column="15"/></name></expr></argument>)<pos:position pos:line="52" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="17"/></expr_stmt>
  <for pos:line="53" pos:column="3">for <control pos:line="53" pos:column="7">(<init><decl><type><name pos:line="53" pos:column="8">size_t<pos:position pos:line="53" pos:column="14"/></name></type> <name pos:line="53" pos:column="15">i<pos:position pos:line="53" pos:column="16"/></name> <init pos:line="53" pos:column="17">= <expr><literal type="number" pos:line="53" pos:column="19">0<pos:position pos:line="53" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="53" pos:column="21"/></init> <condition><expr><name pos:line="53" pos:column="22">i<pos:position pos:line="53" pos:column="23"/></name> <operator pos:line="53" pos:column="24">&lt;<pos:position pos:line="53" pos:column="28"/></operator> <operator pos:line="53" pos:column="26">*<pos:position pos:line="53" pos:column="27"/></operator><name pos:line="53" pos:column="27">values_num<pos:position pos:line="53" pos:column="37"/></name></expr>;<pos:position pos:line="53" pos:column="38"/></condition> <incr><expr><name pos:line="53" pos:column="39">i<pos:position pos:line="53" pos:column="40"/></name><operator pos:line="53" pos:column="40">++<pos:position pos:line="53" pos:column="42"/></operator></expr></incr>)<pos:position pos:line="53" pos:column="43"/></control>
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="54" pos:column="5">free<pos:position pos:line="54" pos:column="9"/></name><argument_list pos:line="54" pos:column="9">(<argument><expr><operator pos:line="54" pos:column="10">(<pos:position pos:line="54" pos:column="11"/></operator><operator pos:line="54" pos:column="11">*<pos:position pos:line="54" pos:column="12"/></operator><name pos:line="54" pos:column="12">values_names<pos:position pos:line="54" pos:column="24"/></name><operator pos:line="54" pos:column="24">)<pos:position pos:line="54" pos:column="25"/></operator><index pos:line="54" pos:column="25">[<expr><name pos:line="54" pos:column="26">i<pos:position pos:line="54" pos:column="27"/></name></expr>]<pos:position pos:line="54" pos:column="28"/></index></expr></argument>)<pos:position pos:line="54" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="30"/></expr_stmt></block></for>
  <expr_stmt><expr><call><name pos:line="55" pos:column="3">free<pos:position pos:line="55" pos:column="7"/></name><argument_list pos:line="55" pos:column="7">(<argument><expr><operator pos:line="55" pos:column="8">*<pos:position pos:line="55" pos:column="9"/></operator><name pos:line="55" pos:column="9">values_names<pos:position pos:line="55" pos:column="21"/></name></expr></argument>)<pos:position pos:line="55" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="23"/></expr_stmt>

  <expr_stmt><expr><operator pos:line="57" pos:column="3">*<pos:position pos:line="57" pos:column="4"/></operator><name pos:line="57" pos:column="4">values<pos:position pos:line="57" pos:column="10"/></name> <operator pos:line="57" pos:column="11">=<pos:position pos:line="57" pos:column="12"/></operator> <name pos:line="57" pos:column="13">new_values<pos:position pos:line="57" pos:column="23"/></name></expr>;<pos:position pos:line="57" pos:column="24"/></expr_stmt>
  <expr_stmt><expr><operator pos:line="58" pos:column="3">*<pos:position pos:line="58" pos:column="4"/></operator><name pos:line="58" pos:column="4">values_names<pos:position pos:line="58" pos:column="16"/></name> <operator pos:line="58" pos:column="17">=<pos:position pos:line="58" pos:column="18"/></operator> <name pos:line="58" pos:column="19">new_names<pos:position pos:line="58" pos:column="28"/></name></expr>;<pos:position pos:line="58" pos:column="29"/></expr_stmt>
  <expr_stmt><expr><operator pos:line="59" pos:column="3">*<pos:position pos:line="59" pos:column="4"/></operator><name pos:line="59" pos:column="4">values_num<pos:position pos:line="59" pos:column="14"/></name> <operator pos:line="59" pos:column="15">=<pos:position pos:line="59" pos:column="16"/></operator> <name pos:line="59" pos:column="17">match_ds_num_g<pos:position pos:line="59" pos:column="31"/></name></expr>;<pos:position pos:line="59" pos:column="32"/></expr_stmt>
  <return pos:line="60" pos:column="3">return <expr><operator pos:line="60" pos:column="10">(<pos:position pos:line="60" pos:column="11"/></operator><name pos:line="60" pos:column="11">RET_OKAY<pos:position pos:line="60" pos:column="19"/></name><operator pos:line="60" pos:column="19">)<pos:position pos:line="60" pos:column="20"/></operator></expr>;<pos:position pos:line="60" pos:column="21"/></return>
}<pos:position pos:line="61" pos:column="2"/></block></function></unit>
