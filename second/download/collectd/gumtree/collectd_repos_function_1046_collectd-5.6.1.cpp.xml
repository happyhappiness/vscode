<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1046_collectd-5.6.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">mbmon_query_daemon<pos:position pos:line="1" pos:column="30"/></name> <parameter_list pos:line="1" pos:column="31">(<parameter><decl><type><name pos:line="1" pos:column="32">char<pos:position pos:line="1" pos:column="36"/></name> <modifier pos:line="1" pos:column="37">*<pos:position pos:line="1" pos:column="38"/></modifier></type><name pos:line="1" pos:column="38">buffer<pos:position pos:line="1" pos:column="44"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="46">int<pos:position pos:line="1" pos:column="49"/></name></type> <name pos:line="1" pos:column="50">buffer_size<pos:position pos:line="1" pos:column="61"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="62"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">fd<pos:position pos:line="3" pos:column="15"/></name></decl>;<pos:position pos:line="3" pos:column="16"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">ssize_t<pos:position pos:line="4" pos:column="16"/></name></type> <name pos:line="4" pos:column="17">status<pos:position pos:line="4" pos:column="23"/></name></decl>;<pos:position pos:line="4" pos:column="24"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">buffer_fill<pos:position pos:line="5" pos:column="24"/></name></decl>;<pos:position pos:line="5" pos:column="25"/></decl_stmt>

	<decl_stmt><decl><type><specifier pos:line="7" pos:column="9">const<pos:position pos:line="7" pos:column="14"/></specifier> <name pos:line="7" pos:column="15">char<pos:position pos:line="7" pos:column="19"/></name> <modifier pos:line="7" pos:column="20">*<pos:position pos:line="7" pos:column="21"/></modifier></type><name pos:line="7" pos:column="21">host<pos:position pos:line="7" pos:column="25"/></name></decl>;<pos:position pos:line="7" pos:column="26"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="8" pos:column="9">const<pos:position pos:line="8" pos:column="14"/></specifier> <name pos:line="8" pos:column="15">char<pos:position pos:line="8" pos:column="19"/></name> <modifier pos:line="8" pos:column="20">*<pos:position pos:line="8" pos:column="21"/></modifier></type><name pos:line="8" pos:column="21">port<pos:position pos:line="8" pos:column="25"/></name></decl>;<pos:position pos:line="8" pos:column="26"/></decl_stmt>

	<decl_stmt><decl><type><name><name pos:line="10" pos:column="9">struct<pos:position pos:line="10" pos:column="15"/></name> <name pos:line="10" pos:column="16">addrinfo<pos:position pos:line="10" pos:column="24"/></name></name> <modifier pos:line="10" pos:column="25">*<pos:position pos:line="10" pos:column="26"/></modifier></type><name pos:line="10" pos:column="26">ai_list<pos:position pos:line="10" pos:column="33"/></name></decl>;<pos:position pos:line="10" pos:column="34"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="11" pos:column="9">int<pos:position pos:line="11" pos:column="12"/></name></type>              <name pos:line="11" pos:column="26">ai_return<pos:position pos:line="11" pos:column="35"/></name></decl>;<pos:position pos:line="11" pos:column="36"/></decl_stmt>

	<expr_stmt><expr><name pos:line="13" pos:column="9">host<pos:position pos:line="13" pos:column="13"/></name> <operator pos:line="13" pos:column="14">=<pos:position pos:line="13" pos:column="15"/></operator> <name pos:line="13" pos:column="16">mbmon_host<pos:position pos:line="13" pos:column="26"/></name></expr>;<pos:position pos:line="13" pos:column="27"/></expr_stmt>
	<if pos:line="14" pos:column="9">if <condition pos:line="14" pos:column="12">(<expr><name pos:line="14" pos:column="13">host<pos:position pos:line="14" pos:column="17"/></name> <operator pos:line="14" pos:column="18">==<pos:position pos:line="14" pos:column="20"/></operator> <name pos:line="14" pos:column="21">NULL<pos:position pos:line="14" pos:column="25"/></name></expr>)<pos:position pos:line="14" pos:column="26"/></condition><then pos:line="14" pos:column="26">
		<block type="pseudo"><expr_stmt><expr><name pos:line="15" pos:column="17">host<pos:position pos:line="15" pos:column="21"/></name> <operator pos:line="15" pos:column="22">=<pos:position pos:line="15" pos:column="23"/></operator> <name pos:line="15" pos:column="24">MBMON_DEF_HOST<pos:position pos:line="15" pos:column="38"/></name></expr>;<pos:position pos:line="15" pos:column="39"/></expr_stmt></block></then></if>

	<expr_stmt><expr><name pos:line="17" pos:column="9">port<pos:position pos:line="17" pos:column="13"/></name> <operator pos:line="17" pos:column="14">=<pos:position pos:line="17" pos:column="15"/></operator> <name pos:line="17" pos:column="16">mbmon_port<pos:position pos:line="17" pos:column="26"/></name></expr>;<pos:position pos:line="17" pos:column="27"/></expr_stmt>
	<if pos:line="18" pos:column="9">if <condition pos:line="18" pos:column="12">(<expr><name pos:line="18" pos:column="13">port<pos:position pos:line="18" pos:column="17"/></name> <operator pos:line="18" pos:column="18">==<pos:position pos:line="18" pos:column="20"/></operator> <name pos:line="18" pos:column="21">NULL<pos:position pos:line="18" pos:column="25"/></name></expr>)<pos:position pos:line="18" pos:column="26"/></condition><then pos:line="18" pos:column="26">
		<block type="pseudo"><expr_stmt><expr><name pos:line="19" pos:column="17">port<pos:position pos:line="19" pos:column="21"/></name> <operator pos:line="19" pos:column="22">=<pos:position pos:line="19" pos:column="23"/></operator> <name pos:line="19" pos:column="24">MBMON_DEF_PORT<pos:position pos:line="19" pos:column="38"/></name></expr>;<pos:position pos:line="19" pos:column="39"/></expr_stmt></block></then></if>

	<decl_stmt><decl><type><name><name pos:line="21" pos:column="9">struct<pos:position pos:line="21" pos:column="15"/></name> <name pos:line="21" pos:column="16">addrinfo<pos:position pos:line="21" pos:column="24"/></name></name></type> <name pos:line="21" pos:column="25">ai_hints<pos:position pos:line="21" pos:column="33"/></name> <init pos:line="21" pos:column="34">= <expr><block pos:line="21" pos:column="36">{
		<expr><operator pos:line="22" pos:column="17">.<pos:position pos:line="22" pos:column="18"/></operator><name pos:line="22" pos:column="18">ai_family<pos:position pos:line="22" pos:column="27"/></name> <operator pos:line="22" pos:column="28">=<pos:position pos:line="22" pos:column="29"/></operator> <name pos:line="22" pos:column="30">AF_UNSPEC<pos:position pos:line="22" pos:column="39"/></name></expr>,
		<expr><operator pos:line="23" pos:column="17">.<pos:position pos:line="23" pos:column="18"/></operator><name pos:line="23" pos:column="18">ai_flags<pos:position pos:line="23" pos:column="26"/></name> <operator pos:line="23" pos:column="27">=<pos:position pos:line="23" pos:column="28"/></operator> <name pos:line="23" pos:column="29">AI_ADDRCONFIG<pos:position pos:line="23" pos:column="42"/></name></expr>,
		<expr><operator pos:line="24" pos:column="17">.<pos:position pos:line="24" pos:column="18"/></operator><name pos:line="24" pos:column="18">ai_protocol<pos:position pos:line="24" pos:column="29"/></name> <operator pos:line="24" pos:column="30">=<pos:position pos:line="24" pos:column="31"/></operator> <name pos:line="24" pos:column="32">IPPROTO_TCP<pos:position pos:line="24" pos:column="43"/></name></expr>,
		<expr><operator pos:line="25" pos:column="17">.<pos:position pos:line="25" pos:column="18"/></operator><name pos:line="25" pos:column="18">ai_socktype<pos:position pos:line="25" pos:column="29"/></name> <operator pos:line="25" pos:column="30">=<pos:position pos:line="25" pos:column="31"/></operator> <name pos:line="25" pos:column="32">SOCK_STREAM<pos:position pos:line="25" pos:column="43"/></name></expr>
	}<pos:position pos:line="26" pos:column="10"/></block></expr></init></decl>;<pos:position pos:line="26" pos:column="11"/></decl_stmt>

	<if pos:line="28" pos:column="9">if <condition pos:line="28" pos:column="12">(<expr><operator pos:line="28" pos:column="13">(<pos:position pos:line="28" pos:column="14"/></operator><name pos:line="28" pos:column="14">ai_return<pos:position pos:line="28" pos:column="23"/></name> <operator pos:line="28" pos:column="24">=<pos:position pos:line="28" pos:column="25"/></operator> <call><name pos:line="28" pos:column="26">getaddrinfo<pos:position pos:line="28" pos:column="37"/></name> <argument_list pos:line="28" pos:column="38">(<argument><expr><name pos:line="28" pos:column="39">host<pos:position pos:line="28" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="45">port<pos:position pos:line="28" pos:column="49"/></name></expr></argument>, <argument><expr><operator pos:line="28" pos:column="51">&amp;<pos:position pos:line="28" pos:column="56"/></operator><name pos:line="28" pos:column="52">ai_hints<pos:position pos:line="28" pos:column="60"/></name></expr></argument>, <argument><expr><operator pos:line="28" pos:column="62">&amp;<pos:position pos:line="28" pos:column="67"/></operator><name pos:line="28" pos:column="63">ai_list<pos:position pos:line="28" pos:column="70"/></name></expr></argument>)<pos:position pos:line="28" pos:column="71"/></argument_list></call><operator pos:line="28" pos:column="71">)<pos:position pos:line="28" pos:column="72"/></operator> <operator pos:line="28" pos:column="73">!=<pos:position pos:line="28" pos:column="75"/></operator> <literal type="number" pos:line="28" pos:column="76">0<pos:position pos:line="28" pos:column="77"/></literal></expr>)<pos:position pos:line="28" pos:column="78"/></condition><then pos:line="28" pos:column="78">
	<block pos:line="29" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="30" pos:column="17">char<pos:position pos:line="30" pos:column="21"/></name></type> <name><name pos:line="30" pos:column="22">errbuf<pos:position pos:line="30" pos:column="28"/></name><index pos:line="30" pos:column="28">[<expr><literal type="number" pos:line="30" pos:column="29">1024<pos:position pos:line="30" pos:column="33"/></literal></expr>]<pos:position pos:line="30" pos:column="34"/></index></name></decl>;<pos:position pos:line="30" pos:column="35"/></decl_stmt>
		<expr_stmt><expr><call><name pos:line="31" pos:column="17">ERROR<pos:position pos:line="31" pos:column="22"/></name> <argument_list pos:line="31" pos:column="23">(<argument><expr><literal type="string" pos:line="31" pos:column="24">"mbmon: getaddrinfo (%s, %s): %s"<pos:position pos:line="31" pos:column="57"/></literal></expr></argument>,
				<argument><expr><name pos:line="32" pos:column="33">host<pos:position pos:line="32" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="39">port<pos:position pos:line="32" pos:column="43"/></name></expr></argument>,
				<argument><expr><ternary><condition><expr><operator pos:line="33" pos:column="33">(<pos:position pos:line="33" pos:column="34"/></operator><name pos:line="33" pos:column="34">ai_return<pos:position pos:line="33" pos:column="43"/></name> <operator pos:line="33" pos:column="44">==<pos:position pos:line="33" pos:column="46"/></operator> <name pos:line="33" pos:column="47">EAI_SYSTEM<pos:position pos:line="33" pos:column="57"/></name><operator pos:line="33" pos:column="57">)<pos:position pos:line="33" pos:column="58"/></operator></expr>
				?<pos:position pos:line="34" pos:column="34"/></condition><then pos:line="34" pos:column="34"> <expr><call><name pos:line="34" pos:column="35">sstrerror<pos:position pos:line="34" pos:column="44"/></name> <argument_list pos:line="34" pos:column="45">(<argument><expr><name pos:line="34" pos:column="46">errno<pos:position pos:line="34" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="53">errbuf<pos:position pos:line="34" pos:column="59"/></name></expr></argument>, <argument><expr><sizeof pos:line="34" pos:column="61">sizeof <argument_list pos:line="34" pos:column="68">(<argument><expr><name pos:line="34" pos:column="69">errbuf<pos:position pos:line="34" pos:column="75"/></name></expr></argument>)<pos:position pos:line="34" pos:column="76"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="34" pos:column="77"/></argument_list></call></expr>
				<pos:position pos:line="35" pos:column="5"/></then><else pos:line="35" pos:column="33">: <expr><call><name pos:line="35" pos:column="35">gai_strerror<pos:position pos:line="35" pos:column="47"/></name> <argument_list pos:line="35" pos:column="48">(<argument><expr><name pos:line="35" pos:column="49">ai_return<pos:position pos:line="35" pos:column="58"/></name></expr></argument>)<pos:position pos:line="35" pos:column="59"/></argument_list></call></expr></else></ternary></expr></argument>)<pos:position pos:line="35" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="61"/></expr_stmt>
		<return pos:line="36" pos:column="17">return <expr><operator pos:line="36" pos:column="24">(<pos:position pos:line="36" pos:column="25"/></operator><operator pos:line="36" pos:column="25">-<pos:position pos:line="36" pos:column="26"/></operator><literal type="number" pos:line="36" pos:column="26">1<pos:position pos:line="36" pos:column="27"/></literal><operator pos:line="36" pos:column="27">)<pos:position pos:line="36" pos:column="28"/></operator></expr>;<pos:position pos:line="36" pos:column="29"/></return>
	}<pos:position pos:line="37" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="39" pos:column="9">fd<pos:position pos:line="39" pos:column="11"/></name> <operator pos:line="39" pos:column="12">=<pos:position pos:line="39" pos:column="13"/></operator> <operator pos:line="39" pos:column="14">-<pos:position pos:line="39" pos:column="15"/></operator><literal type="number" pos:line="39" pos:column="15">1<pos:position pos:line="39" pos:column="16"/></literal></expr>;<pos:position pos:line="39" pos:column="17"/></expr_stmt>
	<for pos:line="40" pos:column="9">for <control pos:line="40" pos:column="13">(<init><decl><type><name><name pos:line="40" pos:column="14">struct<pos:position pos:line="40" pos:column="20"/></name> <name pos:line="40" pos:column="21">addrinfo<pos:position pos:line="40" pos:column="29"/></name></name> <modifier pos:line="40" pos:column="30">*<pos:position pos:line="40" pos:column="31"/></modifier><name pos:line="40" pos:column="31">ai_ptr<pos:position pos:line="40" pos:column="37"/></name></type> <init pos:line="40" pos:column="38">= <expr><name pos:line="40" pos:column="40">ai_list<pos:position pos:line="40" pos:column="47"/></name></expr></init></decl>;<pos:position pos:line="40" pos:column="48"/></init> <condition><expr><name pos:line="40" pos:column="49">ai_ptr<pos:position pos:line="40" pos:column="55"/></name> <operator pos:line="40" pos:column="56">!=<pos:position pos:line="40" pos:column="58"/></operator> <name pos:line="40" pos:column="59">NULL<pos:position pos:line="40" pos:column="63"/></name></expr>;<pos:position pos:line="40" pos:column="64"/></condition> <incr><expr><name pos:line="40" pos:column="65">ai_ptr<pos:position pos:line="40" pos:column="71"/></name> <operator pos:line="40" pos:column="72">=<pos:position pos:line="40" pos:column="73"/></operator> <name><name pos:line="40" pos:column="74">ai_ptr<pos:position pos:line="40" pos:column="80"/></name><operator pos:line="40" pos:column="80">-&gt;<pos:position pos:line="40" pos:column="85"/></operator><name pos:line="40" pos:column="82">ai_next<pos:position pos:line="40" pos:column="89"/></name></name></expr></incr>)<pos:position pos:line="40" pos:column="90"/></control>
	<block pos:line="41" pos:column="9">{
		<comment type="block" pos:line="42" pos:column="17">/* create our socket descriptor */</comment>
		<if pos:line="43" pos:column="17">if <condition pos:line="43" pos:column="20">(<expr><operator pos:line="43" pos:column="21">(<pos:position pos:line="43" pos:column="22"/></operator><name pos:line="43" pos:column="22">fd<pos:position pos:line="43" pos:column="24"/></name> <operator pos:line="43" pos:column="25">=<pos:position pos:line="43" pos:column="26"/></operator> <call><name pos:line="43" pos:column="27">socket<pos:position pos:line="43" pos:column="33"/></name> <argument_list pos:line="43" pos:column="34">(<argument><expr><name><name pos:line="43" pos:column="35">ai_ptr<pos:position pos:line="43" pos:column="41"/></name><operator pos:line="43" pos:column="41">-&gt;<pos:position pos:line="43" pos:column="46"/></operator><name pos:line="43" pos:column="43">ai_family<pos:position pos:line="43" pos:column="52"/></name></name></expr></argument>, <argument><expr><name><name pos:line="43" pos:column="54">ai_ptr<pos:position pos:line="43" pos:column="60"/></name><operator pos:line="43" pos:column="60">-&gt;<pos:position pos:line="43" pos:column="65"/></operator><name pos:line="43" pos:column="62">ai_socktype<pos:position pos:line="43" pos:column="73"/></name></name></expr></argument>, <argument><expr><name><name pos:line="43" pos:column="75">ai_ptr<pos:position pos:line="43" pos:column="81"/></name><operator pos:line="43" pos:column="81">-&gt;<pos:position pos:line="43" pos:column="86"/></operator><name pos:line="43" pos:column="83">ai_protocol<pos:position pos:line="43" pos:column="94"/></name></name></expr></argument>)<pos:position pos:line="43" pos:column="95"/></argument_list></call><operator pos:line="43" pos:column="95">)<pos:position pos:line="43" pos:column="96"/></operator> <operator pos:line="43" pos:column="97">&lt;<pos:position pos:line="43" pos:column="101"/></operator> <literal type="number" pos:line="43" pos:column="99">0<pos:position pos:line="43" pos:column="100"/></literal></expr>)<pos:position pos:line="43" pos:column="101"/></condition><then pos:line="43" pos:column="101">
		<block pos:line="44" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="45" pos:column="25">char<pos:position pos:line="45" pos:column="29"/></name></type> <name><name pos:line="45" pos:column="30">errbuf<pos:position pos:line="45" pos:column="36"/></name><index pos:line="45" pos:column="36">[<expr><literal type="number" pos:line="45" pos:column="37">1024<pos:position pos:line="45" pos:column="41"/></literal></expr>]<pos:position pos:line="45" pos:column="42"/></index></name></decl>;<pos:position pos:line="45" pos:column="43"/></decl_stmt>
			<expr_stmt><expr><call><name pos:line="46" pos:column="25">ERROR<pos:position pos:line="46" pos:column="30"/></name> <argument_list pos:line="46" pos:column="31">(<argument><expr><literal type="string" pos:line="46" pos:column="32">"mbmon: socket: %s"<pos:position pos:line="46" pos:column="51"/></literal></expr></argument>,
					<argument><expr><call><name pos:line="47" pos:column="41">sstrerror<pos:position pos:line="47" pos:column="50"/></name> <argument_list pos:line="47" pos:column="51">(<argument><expr><name pos:line="47" pos:column="52">errno<pos:position pos:line="47" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="59">errbuf<pos:position pos:line="47" pos:column="65"/></name></expr></argument>,
						<argument><expr><sizeof pos:line="48" pos:column="49">sizeof <argument_list pos:line="48" pos:column="56">(<argument><expr><name pos:line="48" pos:column="57">errbuf<pos:position pos:line="48" pos:column="63"/></name></expr></argument>)<pos:position pos:line="48" pos:column="64"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="48" pos:column="65"/></argument_list></call></expr></argument>)<pos:position pos:line="48" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="67"/></expr_stmt>
			<continue pos:line="49" pos:column="25">continue;<pos:position pos:line="49" pos:column="34"/></continue>
		}<pos:position pos:line="50" pos:column="18"/></block></then></if>

		<comment type="block" pos:line="52" pos:column="17">/* connect to the mbmon daemon */</comment>
		<if pos:line="53" pos:column="17">if <condition pos:line="53" pos:column="20">(<expr><call><name pos:line="53" pos:column="21">connect<pos:position pos:line="53" pos:column="28"/></name> <argument_list pos:line="53" pos:column="29">(<argument><expr><name pos:line="53" pos:column="30">fd<pos:position pos:line="53" pos:column="32"/></name></expr></argument>, <argument><expr><operator pos:line="53" pos:column="34">(<pos:position pos:line="53" pos:column="35"/></operator>struct <name pos:line="53" pos:column="42">sockaddr<pos:position pos:line="53" pos:column="50"/></name> <operator pos:line="53" pos:column="51">*<pos:position pos:line="53" pos:column="52"/></operator><operator pos:line="53" pos:column="52">)<pos:position pos:line="53" pos:column="53"/></operator> <name><name pos:line="53" pos:column="54">ai_ptr<pos:position pos:line="53" pos:column="60"/></name><operator pos:line="53" pos:column="60">-&gt;<pos:position pos:line="53" pos:column="65"/></operator><name pos:line="53" pos:column="62">ai_addr<pos:position pos:line="53" pos:column="69"/></name></name></expr></argument>, <argument><expr><name><name pos:line="53" pos:column="71">ai_ptr<pos:position pos:line="53" pos:column="77"/></name><operator pos:line="53" pos:column="77">-&gt;<pos:position pos:line="53" pos:column="82"/></operator><name pos:line="53" pos:column="79">ai_addrlen<pos:position pos:line="53" pos:column="89"/></name></name></expr></argument>)<pos:position pos:line="53" pos:column="90"/></argument_list></call></expr>)<pos:position pos:line="53" pos:column="91"/></condition><then pos:line="53" pos:column="91">
		<block pos:line="54" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="55" pos:column="25">char<pos:position pos:line="55" pos:column="29"/></name></type> <name><name pos:line="55" pos:column="30">errbuf<pos:position pos:line="55" pos:column="36"/></name><index pos:line="55" pos:column="36">[<expr><literal type="number" pos:line="55" pos:column="37">1024<pos:position pos:line="55" pos:column="41"/></literal></expr>]<pos:position pos:line="55" pos:column="42"/></index></name></decl>;<pos:position pos:line="55" pos:column="43"/></decl_stmt>
			<expr_stmt><expr><call><name pos:line="56" pos:column="25">INFO<pos:position pos:line="56" pos:column="29"/></name> <argument_list pos:line="56" pos:column="30">(<argument><expr><literal type="string" pos:line="56" pos:column="31">"mbmon: connect (%s, %s): %s"<pos:position pos:line="56" pos:column="60"/></literal></expr></argument>, <argument><expr><name pos:line="56" pos:column="62">host<pos:position pos:line="56" pos:column="66"/></name></expr></argument>, <argument><expr><name pos:line="56" pos:column="68">port<pos:position pos:line="56" pos:column="72"/></name></expr></argument>,
					<argument><expr><call><name pos:line="57" pos:column="41">sstrerror<pos:position pos:line="57" pos:column="50"/></name> <argument_list pos:line="57" pos:column="51">(<argument><expr><name pos:line="57" pos:column="52">errno<pos:position pos:line="57" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="57" pos:column="59">errbuf<pos:position pos:line="57" pos:column="65"/></name></expr></argument>,
						<argument><expr><sizeof pos:line="58" pos:column="49">sizeof <argument_list pos:line="58" pos:column="56">(<argument><expr><name pos:line="58" pos:column="57">errbuf<pos:position pos:line="58" pos:column="63"/></name></expr></argument>)<pos:position pos:line="58" pos:column="64"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="58" pos:column="65"/></argument_list></call></expr></argument>)<pos:position pos:line="58" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="67"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="59" pos:column="25">close<pos:position pos:line="59" pos:column="30"/></name> <argument_list pos:line="59" pos:column="31">(<argument><expr><name pos:line="59" pos:column="32">fd<pos:position pos:line="59" pos:column="34"/></name></expr></argument>)<pos:position pos:line="59" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="36"/></expr_stmt>
			<expr_stmt><expr><name pos:line="60" pos:column="25">fd<pos:position pos:line="60" pos:column="27"/></name> <operator pos:line="60" pos:column="28">=<pos:position pos:line="60" pos:column="29"/></operator> <operator pos:line="60" pos:column="30">-<pos:position pos:line="60" pos:column="31"/></operator><literal type="number" pos:line="60" pos:column="31">1<pos:position pos:line="60" pos:column="32"/></literal></expr>;<pos:position pos:line="60" pos:column="33"/></expr_stmt>
			<continue pos:line="61" pos:column="25">continue;<pos:position pos:line="61" pos:column="34"/></continue>
		}<pos:position pos:line="62" pos:column="18"/></block></then></if>

		<comment type="block" pos:line="64" pos:column="17">/* A socket could be opened and connecting succeeded. We're
		 * done. */</comment>
		<break pos:line="66" pos:column="17">break;<pos:position pos:line="66" pos:column="23"/></break>
	}<pos:position pos:line="67" pos:column="10"/></block></for>

	<expr_stmt><expr><call><name pos:line="69" pos:column="9">freeaddrinfo<pos:position pos:line="69" pos:column="21"/></name> <argument_list pos:line="69" pos:column="22">(<argument><expr><name pos:line="69" pos:column="23">ai_list<pos:position pos:line="69" pos:column="30"/></name></expr></argument>)<pos:position pos:line="69" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="32"/></expr_stmt>

	<if pos:line="71" pos:column="9">if <condition pos:line="71" pos:column="12">(<expr><name pos:line="71" pos:column="13">fd<pos:position pos:line="71" pos:column="15"/></name> <operator pos:line="71" pos:column="16">&lt;<pos:position pos:line="71" pos:column="20"/></operator> <literal type="number" pos:line="71" pos:column="18">0<pos:position pos:line="71" pos:column="19"/></literal></expr>)<pos:position pos:line="71" pos:column="20"/></condition><then pos:line="71" pos:column="20">
	<block pos:line="72" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="73" pos:column="17">ERROR<pos:position pos:line="73" pos:column="22"/></name> <argument_list pos:line="73" pos:column="23">(<argument><expr><literal type="string" pos:line="73" pos:column="24">"mbmon: Could not connect to daemon."<pos:position pos:line="73" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="73" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="63"/></expr_stmt>
		<return pos:line="74" pos:column="17">return <expr><operator pos:line="74" pos:column="24">(<pos:position pos:line="74" pos:column="25"/></operator><operator pos:line="74" pos:column="25">-<pos:position pos:line="74" pos:column="26"/></operator><literal type="number" pos:line="74" pos:column="26">1<pos:position pos:line="74" pos:column="27"/></literal><operator pos:line="74" pos:column="27">)<pos:position pos:line="74" pos:column="28"/></operator></expr>;<pos:position pos:line="74" pos:column="29"/></return>
	}<pos:position pos:line="75" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="77" pos:column="9">/* receive data from the mbmon daemon */</comment>
	<expr_stmt><expr><call><name pos:line="78" pos:column="9">memset<pos:position pos:line="78" pos:column="15"/></name> <argument_list pos:line="78" pos:column="16">(<argument><expr><name pos:line="78" pos:column="17">buffer<pos:position pos:line="78" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="78" pos:column="25">'\0'<pos:position pos:line="78" pos:column="29"/></literal></expr></argument>, <argument><expr><name pos:line="78" pos:column="31">buffer_size<pos:position pos:line="78" pos:column="42"/></name></expr></argument>)<pos:position pos:line="78" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="44"/></expr_stmt>

	<expr_stmt><expr><name pos:line="80" pos:column="9">buffer_fill<pos:position pos:line="80" pos:column="20"/></name> <operator pos:line="80" pos:column="21">=<pos:position pos:line="80" pos:column="22"/></operator> <literal type="number" pos:line="80" pos:column="23">0<pos:position pos:line="80" pos:column="24"/></literal></expr>;<pos:position pos:line="80" pos:column="25"/></expr_stmt>
	<while pos:line="81" pos:column="9">while <condition pos:line="81" pos:column="15">(<expr><operator pos:line="81" pos:column="16">(<pos:position pos:line="81" pos:column="17"/></operator><name pos:line="81" pos:column="17">status<pos:position pos:line="81" pos:column="23"/></name> <operator pos:line="81" pos:column="24">=<pos:position pos:line="81" pos:column="25"/></operator> <call><name pos:line="81" pos:column="26">read<pos:position pos:line="81" pos:column="30"/></name> <argument_list pos:line="81" pos:column="31">(<argument><expr><name pos:line="81" pos:column="32">fd<pos:position pos:line="81" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="81" pos:column="36">buffer<pos:position pos:line="81" pos:column="42"/></name> <operator pos:line="81" pos:column="43">+<pos:position pos:line="81" pos:column="44"/></operator> <name pos:line="81" pos:column="45">buffer_fill<pos:position pos:line="81" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="81" pos:column="58">buffer_size<pos:position pos:line="81" pos:column="69"/></name> <operator pos:line="81" pos:column="70">-<pos:position pos:line="81" pos:column="71"/></operator> <name pos:line="81" pos:column="72">buffer_fill<pos:position pos:line="81" pos:column="83"/></name></expr></argument>)<pos:position pos:line="81" pos:column="84"/></argument_list></call><operator pos:line="81" pos:column="84">)<pos:position pos:line="81" pos:column="85"/></operator> <operator pos:line="81" pos:column="86">!=<pos:position pos:line="81" pos:column="88"/></operator> <literal type="number" pos:line="81" pos:column="89">0<pos:position pos:line="81" pos:column="90"/></literal></expr>)<pos:position pos:line="81" pos:column="91"/></condition>
	<block pos:line="82" pos:column="9">{
		<if pos:line="83" pos:column="17">if <condition pos:line="83" pos:column="20">(<expr><name pos:line="83" pos:column="21">status<pos:position pos:line="83" pos:column="27"/></name> <operator pos:line="83" pos:column="28">==<pos:position pos:line="83" pos:column="30"/></operator> <operator pos:line="83" pos:column="31">-<pos:position pos:line="83" pos:column="32"/></operator><literal type="number" pos:line="83" pos:column="32">1<pos:position pos:line="83" pos:column="33"/></literal></expr>)<pos:position pos:line="83" pos:column="34"/></condition><then pos:line="83" pos:column="34">
		<block pos:line="84" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="85" pos:column="25">char<pos:position pos:line="85" pos:column="29"/></name></type> <name><name pos:line="85" pos:column="30">errbuf<pos:position pos:line="85" pos:column="36"/></name><index pos:line="85" pos:column="36">[<expr><literal type="number" pos:line="85" pos:column="37">1024<pos:position pos:line="85" pos:column="41"/></literal></expr>]<pos:position pos:line="85" pos:column="42"/></index></name></decl>;<pos:position pos:line="85" pos:column="43"/></decl_stmt>

			<if pos:line="87" pos:column="25">if <condition pos:line="87" pos:column="28">(<expr><operator pos:line="87" pos:column="29">(<pos:position pos:line="87" pos:column="30"/></operator><name pos:line="87" pos:column="30">errno<pos:position pos:line="87" pos:column="35"/></name> <operator pos:line="87" pos:column="36">==<pos:position pos:line="87" pos:column="38"/></operator> <name pos:line="87" pos:column="39">EAGAIN<pos:position pos:line="87" pos:column="45"/></name><operator pos:line="87" pos:column="45">)<pos:position pos:line="87" pos:column="46"/></operator> <operator pos:line="87" pos:column="47">||<pos:position pos:line="87" pos:column="49"/></operator> <operator pos:line="87" pos:column="50">(<pos:position pos:line="87" pos:column="51"/></operator><name pos:line="87" pos:column="51">errno<pos:position pos:line="87" pos:column="56"/></name> <operator pos:line="87" pos:column="57">==<pos:position pos:line="87" pos:column="59"/></operator> <name pos:line="87" pos:column="60">EINTR<pos:position pos:line="87" pos:column="65"/></name><operator pos:line="87" pos:column="65">)<pos:position pos:line="87" pos:column="66"/></operator></expr>)<pos:position pos:line="87" pos:column="67"/></condition><then pos:line="87" pos:column="67">
				<block type="pseudo"><continue pos:line="88" pos:column="33">continue;<pos:position pos:line="88" pos:column="42"/></continue></block></then></if>

			<expr_stmt><expr><call><name pos:line="90" pos:column="25">ERROR<pos:position pos:line="90" pos:column="30"/></name> <argument_list pos:line="90" pos:column="31">(<argument><expr><literal type="string" pos:line="90" pos:column="32">"mbmon: Error reading from socket: %s"<pos:position pos:line="90" pos:column="70"/></literal></expr></argument>,
					<argument><expr><call><name pos:line="91" pos:column="41">sstrerror<pos:position pos:line="91" pos:column="50"/></name> <argument_list pos:line="91" pos:column="51">(<argument><expr><name pos:line="91" pos:column="52">errno<pos:position pos:line="91" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="91" pos:column="59">errbuf<pos:position pos:line="91" pos:column="65"/></name></expr></argument>,
						<argument><expr><sizeof pos:line="92" pos:column="49">sizeof <argument_list pos:line="92" pos:column="56">(<argument><expr><name pos:line="92" pos:column="57">errbuf<pos:position pos:line="92" pos:column="63"/></name></expr></argument>)<pos:position pos:line="92" pos:column="64"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="92" pos:column="65"/></argument_list></call></expr></argument>)<pos:position pos:line="92" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="67"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="93" pos:column="25">close<pos:position pos:line="93" pos:column="30"/></name> <argument_list pos:line="93" pos:column="31">(<argument><expr><name pos:line="93" pos:column="32">fd<pos:position pos:line="93" pos:column="34"/></name></expr></argument>)<pos:position pos:line="93" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="36"/></expr_stmt>
			<return pos:line="94" pos:column="25">return <expr><operator pos:line="94" pos:column="32">(<pos:position pos:line="94" pos:column="33"/></operator><operator pos:line="94" pos:column="33">-<pos:position pos:line="94" pos:column="34"/></operator><literal type="number" pos:line="94" pos:column="34">1<pos:position pos:line="94" pos:column="35"/></literal><operator pos:line="94" pos:column="35">)<pos:position pos:line="94" pos:column="36"/></operator></expr>;<pos:position pos:line="94" pos:column="37"/></return>
		}<pos:position pos:line="95" pos:column="18"/></block></then></if>
		<expr_stmt><expr><name pos:line="96" pos:column="17">buffer_fill<pos:position pos:line="96" pos:column="28"/></name> <operator pos:line="96" pos:column="29">+=<pos:position pos:line="96" pos:column="31"/></operator> <name pos:line="96" pos:column="32">status<pos:position pos:line="96" pos:column="38"/></name></expr>;<pos:position pos:line="96" pos:column="39"/></expr_stmt>

		<if pos:line="98" pos:column="17">if <condition pos:line="98" pos:column="20">(<expr><name pos:line="98" pos:column="21">buffer_fill<pos:position pos:line="98" pos:column="32"/></name> <operator pos:line="98" pos:column="33">&gt;=<pos:position pos:line="98" pos:column="38"/></operator> <name pos:line="98" pos:column="36">buffer_size<pos:position pos:line="98" pos:column="47"/></name></expr>)<pos:position pos:line="98" pos:column="48"/></condition><then pos:line="98" pos:column="48">
			<block type="pseudo"><break pos:line="99" pos:column="25">break;<pos:position pos:line="99" pos:column="31"/></break></block></then></if>
	}<pos:position pos:line="100" pos:column="10"/></block></while>

	<if pos:line="102" pos:column="9">if <condition pos:line="102" pos:column="12">(<expr><name pos:line="102" pos:column="13">buffer_fill<pos:position pos:line="102" pos:column="24"/></name> <operator pos:line="102" pos:column="25">&gt;=<pos:position pos:line="102" pos:column="30"/></operator> <name pos:line="102" pos:column="28">buffer_size<pos:position pos:line="102" pos:column="39"/></name></expr>)<pos:position pos:line="102" pos:column="40"/></condition><then pos:line="102" pos:column="40">
	<block pos:line="103" pos:column="9">{
		<expr_stmt><expr><name><name pos:line="104" pos:column="17">buffer<pos:position pos:line="104" pos:column="23"/></name><index pos:line="104" pos:column="23">[<expr><name pos:line="104" pos:column="24">buffer_size<pos:position pos:line="104" pos:column="35"/></name> <operator pos:line="104" pos:column="36">-<pos:position pos:line="104" pos:column="37"/></operator> <literal type="number" pos:line="104" pos:column="38">1<pos:position pos:line="104" pos:column="39"/></literal></expr>]<pos:position pos:line="104" pos:column="40"/></index></name> <operator pos:line="104" pos:column="41">=<pos:position pos:line="104" pos:column="42"/></operator> <literal type="char" pos:line="104" pos:column="43">'\0'<pos:position pos:line="104" pos:column="47"/></literal></expr>;<pos:position pos:line="104" pos:column="48"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="105" pos:column="17">WARNING<pos:position pos:line="105" pos:column="24"/></name> <argument_list pos:line="105" pos:column="25">(<argument><expr><literal type="string" pos:line="105" pos:column="26">"mbmon: Message from mbmon has been truncated."<pos:position pos:line="105" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="105" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="105" pos:column="75"/></expr_stmt>
	}<pos:position pos:line="106" pos:column="10"/></block></then>
	<elseif pos:line="107" pos:column="9">else <if pos:line="107" pos:column="14">if <condition pos:line="107" pos:column="17">(<expr><name pos:line="107" pos:column="18">buffer_fill<pos:position pos:line="107" pos:column="29"/></name> <operator pos:line="107" pos:column="30">==<pos:position pos:line="107" pos:column="32"/></operator> <literal type="number" pos:line="107" pos:column="33">0<pos:position pos:line="107" pos:column="34"/></literal></expr>)<pos:position pos:line="107" pos:column="35"/></condition><then pos:line="107" pos:column="35">
	<block pos:line="108" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="109" pos:column="17">WARNING<pos:position pos:line="109" pos:column="24"/></name> <argument_list pos:line="109" pos:column="25">(<argument><expr><literal type="string" pos:line="109" pos:column="26">"mbmon: Peer has unexpectedly shut down the socket. "<pos:position pos:line="109" pos:column="79"/></literal>
				<literal type="string" pos:line="110" pos:column="33">"Buffer: `%s'"<pos:position pos:line="110" pos:column="47"/></literal></expr></argument>, <argument><expr><name pos:line="110" pos:column="49">buffer<pos:position pos:line="110" pos:column="55"/></name></expr></argument>)<pos:position pos:line="110" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="110" pos:column="57"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="111" pos:column="17">close<pos:position pos:line="111" pos:column="22"/></name> <argument_list pos:line="111" pos:column="23">(<argument><expr><name pos:line="111" pos:column="24">fd<pos:position pos:line="111" pos:column="26"/></name></expr></argument>)<pos:position pos:line="111" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="111" pos:column="28"/></expr_stmt>
		<return pos:line="112" pos:column="17">return <expr><operator pos:line="112" pos:column="24">(<pos:position pos:line="112" pos:column="25"/></operator><operator pos:line="112" pos:column="25">-<pos:position pos:line="112" pos:column="26"/></operator><literal type="number" pos:line="112" pos:column="26">1<pos:position pos:line="112" pos:column="27"/></literal><operator pos:line="112" pos:column="27">)<pos:position pos:line="112" pos:column="28"/></operator></expr>;<pos:position pos:line="112" pos:column="29"/></return>
	}<pos:position pos:line="113" pos:column="10"/></block></then></if></elseif></if>

	<expr_stmt><expr><call><name pos:line="115" pos:column="9">close<pos:position pos:line="115" pos:column="14"/></name> <argument_list pos:line="115" pos:column="15">(<argument><expr><name pos:line="115" pos:column="16">fd<pos:position pos:line="115" pos:column="18"/></name></expr></argument>)<pos:position pos:line="115" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="115" pos:column="20"/></expr_stmt>
	<return pos:line="116" pos:column="9">return <expr><operator pos:line="116" pos:column="16">(<pos:position pos:line="116" pos:column="17"/></operator><literal type="number" pos:line="116" pos:column="17">0<pos:position pos:line="116" pos:column="18"/></literal><operator pos:line="116" pos:column="18">)<pos:position pos:line="116" pos:column="19"/></operator></expr>;<pos:position pos:line="116" pos:column="20"/></return>
}<pos:position pos:line="117" pos:column="2"/></block></function></unit>
