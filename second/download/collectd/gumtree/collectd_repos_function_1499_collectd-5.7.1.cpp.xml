<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1499_collectd-5.7.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">uuidcache_init<pos:position pos:line="1" pos:column="27"/></name><parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><name pos:line="1" pos:column="28">void<pos:position pos:line="1" pos:column="32"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="33"/></parameter_list> <block pos:line="1" pos:column="34">{
  <decl_stmt><decl><type><name pos:line="2" pos:column="3">char<pos:position pos:line="2" pos:column="7"/></name></type> <name><name pos:line="2" pos:column="8">line<pos:position pos:line="2" pos:column="12"/></name><index pos:line="2" pos:column="12">[<expr><literal type="number" pos:line="2" pos:column="13">100<pos:position pos:line="2" pos:column="16"/></literal></expr>]<pos:position pos:line="2" pos:column="17"/></index></name></decl>;<pos:position pos:line="2" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">char<pos:position pos:line="3" pos:column="7"/></name> <modifier pos:line="3" pos:column="8">*<pos:position pos:line="3" pos:column="9"/></modifier></type><name pos:line="3" pos:column="9">s<pos:position pos:line="3" pos:column="10"/></name></decl>;<pos:position pos:line="3" pos:column="11"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">int<pos:position pos:line="4" pos:column="6"/></name></type> <name pos:line="4" pos:column="7">ma<pos:position pos:line="4" pos:column="9"/></name></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="11">mi<pos:position pos:line="4" pos:column="13"/></name></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="15">sz<pos:position pos:line="4" pos:column="17"/></name></decl>;<pos:position pos:line="4" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><specifier pos:line="5" pos:column="3">static<pos:position pos:line="5" pos:column="9"/></specifier> <type><name pos:line="5" pos:column="10">char<pos:position pos:line="5" pos:column="14"/></name></type> <name><name pos:line="5" pos:column="15">ptname<pos:position pos:line="5" pos:column="21"/></name><index pos:line="5" pos:column="21">[<expr><literal type="number" pos:line="5" pos:column="22">100<pos:position pos:line="5" pos:column="25"/></literal></expr>]<pos:position pos:line="5" pos:column="26"/></index></name></decl>;<pos:position pos:line="5" pos:column="27"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">FILE<pos:position pos:line="6" pos:column="7"/></name> <modifier pos:line="6" pos:column="8">*<pos:position pos:line="6" pos:column="9"/></modifier></type><name pos:line="6" pos:column="9">procpt<pos:position pos:line="6" pos:column="15"/></name></decl>;<pos:position pos:line="6" pos:column="16"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">char<pos:position pos:line="7" pos:column="7"/></name></type> <name><name pos:line="7" pos:column="8">uuid<pos:position pos:line="7" pos:column="12"/></name><index pos:line="7" pos:column="12">[<expr><literal type="number" pos:line="7" pos:column="13">16<pos:position pos:line="7" pos:column="15"/></literal></expr>]<pos:position pos:line="7" pos:column="16"/></index></name></decl>, <modifier pos:line="7" pos:column="18">*<pos:position pos:line="7" pos:column="19"/></modifier><decl><type ref="prev"/><name pos:line="7" pos:column="19">label<pos:position pos:line="7" pos:column="24"/></name> <init pos:line="7" pos:column="25">= <expr><name pos:line="7" pos:column="27">NULL<pos:position pos:line="7" pos:column="31"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="32"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">char<pos:position pos:line="8" pos:column="7"/></name></type> <name><name pos:line="8" pos:column="8">device<pos:position pos:line="8" pos:column="14"/></name><index pos:line="8" pos:column="14">[<expr><literal type="number" pos:line="8" pos:column="15">110<pos:position pos:line="8" pos:column="18"/></literal></expr>]<pos:position pos:line="8" pos:column="19"/></index></name></decl>;<pos:position pos:line="8" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">int<pos:position pos:line="9" pos:column="6"/></name></type> <name pos:line="9" pos:column="7">handleOnFirst<pos:position pos:line="9" pos:column="20"/></name></decl>;<pos:position pos:line="9" pos:column="21"/></decl_stmt>

  <if pos:line="11" pos:column="3">if <condition pos:line="11" pos:column="6">(<expr><name pos:line="11" pos:column="7">uuidCache<pos:position pos:line="11" pos:column="16"/></name></expr>)<pos:position pos:line="11" pos:column="17"/></condition><then pos:line="11" pos:column="17"> <block pos:line="11" pos:column="18">{
    <return pos:line="12" pos:column="5">return;<pos:position pos:line="12" pos:column="12"/></return>
  }<pos:position pos:line="13" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="15" pos:column="3">procpt<pos:position pos:line="15" pos:column="9"/></name> <operator pos:line="15" pos:column="10">=<pos:position pos:line="15" pos:column="11"/></operator> <call><name pos:line="15" pos:column="12">fopen<pos:position pos:line="15" pos:column="17"/></name><argument_list pos:line="15" pos:column="17">(<argument><expr><name pos:line="15" pos:column="18">PROC_PARTITIONS<pos:position pos:line="15" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="15" pos:column="35">"r"<pos:position pos:line="15" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="40"/></expr_stmt>
  <if pos:line="16" pos:column="3">if <condition pos:line="16" pos:column="6">(<expr><name pos:line="16" pos:column="7">procpt<pos:position pos:line="16" pos:column="13"/></name> <operator pos:line="16" pos:column="14">==<pos:position pos:line="16" pos:column="16"/></operator> <name pos:line="16" pos:column="17">NULL<pos:position pos:line="16" pos:column="21"/></name></expr>)<pos:position pos:line="16" pos:column="22"/></condition><then pos:line="16" pos:column="22"> <block pos:line="16" pos:column="23">{
    <return pos:line="17" pos:column="5">return;<pos:position pos:line="17" pos:column="12"/></return>
  }<pos:position pos:line="18" pos:column="4"/></block></then></if>

  <for pos:line="20" pos:column="3">for <control pos:line="20" pos:column="7">(<init><decl><type><name pos:line="20" pos:column="8">int<pos:position pos:line="20" pos:column="11"/></name></type> <name pos:line="20" pos:column="12">firstPass<pos:position pos:line="20" pos:column="21"/></name> <init pos:line="20" pos:column="22">= <expr><literal type="number" pos:line="20" pos:column="24">1<pos:position pos:line="20" pos:column="25"/></literal></expr></init></decl>;<pos:position pos:line="20" pos:column="26"/></init> <condition><expr><name pos:line="20" pos:column="27">firstPass<pos:position pos:line="20" pos:column="36"/></name> <operator pos:line="20" pos:column="37">&gt;=<pos:position pos:line="20" pos:column="42"/></operator> <literal type="number" pos:line="20" pos:column="40">0<pos:position pos:line="20" pos:column="41"/></literal></expr>;<pos:position pos:line="20" pos:column="42"/></condition> <incr><expr><name pos:line="20" pos:column="43">firstPass<pos:position pos:line="20" pos:column="52"/></name><operator pos:line="20" pos:column="52">--<pos:position pos:line="20" pos:column="54"/></operator></expr></incr>)<pos:position pos:line="20" pos:column="55"/></control> <block pos:line="20" pos:column="56">{
    <expr_stmt><expr><call><name pos:line="21" pos:column="5">fseek<pos:position pos:line="21" pos:column="10"/></name><argument_list pos:line="21" pos:column="10">(<argument><expr><name pos:line="21" pos:column="11">procpt<pos:position pos:line="21" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="21" pos:column="19">0<pos:position pos:line="21" pos:column="20"/></literal></expr></argument>, <argument><expr><name pos:line="21" pos:column="22">SEEK_SET<pos:position pos:line="21" pos:column="30"/></name></expr></argument>)<pos:position pos:line="21" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="32"/></expr_stmt>
    <while pos:line="22" pos:column="5">while <condition pos:line="22" pos:column="11">(<expr><call><name pos:line="22" pos:column="12">fgets<pos:position pos:line="22" pos:column="17"/></name><argument_list pos:line="22" pos:column="17">(<argument><expr><name pos:line="22" pos:column="18">line<pos:position pos:line="22" pos:column="22"/></name></expr></argument>, <argument><expr><sizeof pos:line="22" pos:column="24">sizeof<argument_list pos:line="22" pos:column="30">(<argument><expr><name pos:line="22" pos:column="31">line<pos:position pos:line="22" pos:column="35"/></name></expr></argument>)<pos:position pos:line="22" pos:column="36"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="22" pos:column="38">procpt<pos:position pos:line="22" pos:column="44"/></name></expr></argument>)<pos:position pos:line="22" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="22" pos:column="46"/></condition> <block pos:line="22" pos:column="47">{
      <if pos:line="23" pos:column="7">if <condition pos:line="23" pos:column="10">(<expr><call><name pos:line="23" pos:column="11">sscanf<pos:position pos:line="23" pos:column="17"/></name><argument_list pos:line="23" pos:column="17">(<argument><expr><name pos:line="23" pos:column="18">line<pos:position pos:line="23" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="23" pos:column="24">" %d %d %d %[^\n ]"<pos:position pos:line="23" pos:column="43"/></literal></expr></argument>, <argument><expr><operator pos:line="23" pos:column="45">&amp;<pos:position pos:line="23" pos:column="50"/></operator><name pos:line="23" pos:column="46">ma<pos:position pos:line="23" pos:column="48"/></name></expr></argument>, <argument><expr><operator pos:line="23" pos:column="50">&amp;<pos:position pos:line="23" pos:column="55"/></operator><name pos:line="23" pos:column="51">mi<pos:position pos:line="23" pos:column="53"/></name></expr></argument>, <argument><expr><operator pos:line="23" pos:column="55">&amp;<pos:position pos:line="23" pos:column="60"/></operator><name pos:line="23" pos:column="56">sz<pos:position pos:line="23" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="60">ptname<pos:position pos:line="23" pos:column="66"/></name></expr></argument>)<pos:position pos:line="23" pos:column="67"/></argument_list></call> <operator pos:line="23" pos:column="68">!=<pos:position pos:line="23" pos:column="70"/></operator> <literal type="number" pos:line="23" pos:column="71">4<pos:position pos:line="23" pos:column="72"/></literal></expr>)<pos:position pos:line="23" pos:column="73"/></condition><then pos:line="23" pos:column="73"> <block pos:line="23" pos:column="74">{
        <continue pos:line="24" pos:column="9">continue;<pos:position pos:line="24" pos:column="18"/></continue>
      }<pos:position pos:line="25" pos:column="8"/></block></then></if>

      <comment type="block" pos:line="27" pos:column="7">/* skip extended partitions (heuristic: size 1) */</comment>
      <if pos:line="28" pos:column="7">if <condition pos:line="28" pos:column="10">(<expr><name pos:line="28" pos:column="11">sz<pos:position pos:line="28" pos:column="13"/></name> <operator pos:line="28" pos:column="14">==<pos:position pos:line="28" pos:column="16"/></operator> <literal type="number" pos:line="28" pos:column="17">1<pos:position pos:line="28" pos:column="18"/></literal></expr>)<pos:position pos:line="28" pos:column="19"/></condition><then pos:line="28" pos:column="19"> <block pos:line="28" pos:column="20">{
        <continue pos:line="29" pos:column="9">continue;<pos:position pos:line="29" pos:column="18"/></continue>
      }<pos:position pos:line="30" pos:column="8"/></block></then></if>

      <comment type="block" pos:line="32" pos:column="7">/* look only at md devices on first pass */</comment>
      <expr_stmt><expr><name pos:line="33" pos:column="7">handleOnFirst<pos:position pos:line="33" pos:column="20"/></name> <operator pos:line="33" pos:column="21">=<pos:position pos:line="33" pos:column="22"/></operator> <operator pos:line="33" pos:column="23">!<pos:position pos:line="33" pos:column="24"/></operator><call><name pos:line="33" pos:column="24">strncmp<pos:position pos:line="33" pos:column="31"/></name><argument_list pos:line="33" pos:column="31">(<argument><expr><name pos:line="33" pos:column="32">ptname<pos:position pos:line="33" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="33" pos:column="40">"md"<pos:position pos:line="33" pos:column="44"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="33" pos:column="46">2<pos:position pos:line="33" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="49"/></expr_stmt>
      <if pos:line="34" pos:column="7">if <condition pos:line="34" pos:column="10">(<expr><name pos:line="34" pos:column="11">firstPass<pos:position pos:line="34" pos:column="20"/></name> <operator pos:line="34" pos:column="21">!=<pos:position pos:line="34" pos:column="23"/></operator> <name pos:line="34" pos:column="24">handleOnFirst<pos:position pos:line="34" pos:column="37"/></name></expr>)<pos:position pos:line="34" pos:column="38"/></condition><then pos:line="34" pos:column="38"> <block pos:line="34" pos:column="39">{
        <continue pos:line="35" pos:column="9">continue;<pos:position pos:line="35" pos:column="18"/></continue>
      }<pos:position pos:line="36" pos:column="8"/></block></then></if>

      <comment type="block" pos:line="38" pos:column="7">/* skip entire disk (minor 0, 64, ... on ide;
      0, 16, ... on sd) */</comment>
      <comment type="block" pos:line="40" pos:column="7">/* heuristic: partition name ends in a digit */</comment>

      <for pos:line="42" pos:column="7">for <control pos:line="42" pos:column="11">(<init><expr><name pos:line="42" pos:column="12">s<pos:position pos:line="42" pos:column="13"/></name> <operator pos:line="42" pos:column="14">=<pos:position pos:line="42" pos:column="15"/></operator> <name pos:line="42" pos:column="16">ptname<pos:position pos:line="42" pos:column="22"/></name></expr>;<pos:position pos:line="42" pos:column="23"/></init> <condition><expr><operator pos:line="42" pos:column="24">*<pos:position pos:line="42" pos:column="25"/></operator><name pos:line="42" pos:column="25">s<pos:position pos:line="42" pos:column="26"/></name></expr>;<pos:position pos:line="42" pos:column="27"/></condition> <incr><expr><name pos:line="42" pos:column="28">s<pos:position pos:line="42" pos:column="29"/></name><operator pos:line="42" pos:column="29">++<pos:position pos:line="42" pos:column="31"/></operator></expr></incr>)<pos:position pos:line="42" pos:column="32"/></control>
        <block type="pseudo"><empty_stmt pos:line="43" pos:column="9">;<pos:position pos:line="43" pos:column="10"/></empty_stmt></block></for>

      <if pos:line="45" pos:column="7">if <condition pos:line="45" pos:column="10">(<expr><call><name pos:line="45" pos:column="11">isdigit<pos:position pos:line="45" pos:column="18"/></name><argument_list pos:line="45" pos:column="18">(<argument><expr><operator pos:line="45" pos:column="19">(<pos:position pos:line="45" pos:column="20"/></operator><name pos:line="45" pos:column="20">int<pos:position pos:line="45" pos:column="23"/></name><operator pos:line="45" pos:column="23">)<pos:position pos:line="45" pos:column="24"/></operator><name><name pos:line="45" pos:column="24">s<pos:position pos:line="45" pos:column="25"/></name><index pos:line="45" pos:column="25">[<expr><operator pos:line="45" pos:column="26">-<pos:position pos:line="45" pos:column="27"/></operator><literal type="number" pos:line="45" pos:column="27">1<pos:position pos:line="45" pos:column="28"/></literal></expr>]<pos:position pos:line="45" pos:column="29"/></index></name></expr></argument>)<pos:position pos:line="45" pos:column="30"/></argument_list></call></expr>)<pos:position pos:line="45" pos:column="31"/></condition><then pos:line="45" pos:column="31"> <block pos:line="45" pos:column="32">{
        <comment type="block" pos:line="46" pos:column="9">/*
        * Note: this is a heuristic only - there is no reason
        * why these devices should live in /dev.
        * Perhaps this directory should be specifiable by option.
        * One might for example have /devlabel with links to /dev
        * for the devices that may be accessed in this way.
        * (This is useful, if the cdrom on /dev/hdc must not
        * be accessed.)
        */</comment>
        <expr_stmt><expr><call><name pos:line="55" pos:column="9">ssnprintf<pos:position pos:line="55" pos:column="18"/></name><argument_list pos:line="55" pos:column="18">(<argument><expr><name pos:line="55" pos:column="19">device<pos:position pos:line="55" pos:column="25"/></name></expr></argument>, <argument><expr><sizeof pos:line="55" pos:column="27">sizeof<argument_list pos:line="55" pos:column="33">(<argument><expr><name pos:line="55" pos:column="34">device<pos:position pos:line="55" pos:column="40"/></name></expr></argument>)<pos:position pos:line="55" pos:column="41"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="55" pos:column="43">"%s/%s"<pos:position pos:line="55" pos:column="50"/></literal></expr></argument>, <argument><expr><name pos:line="55" pos:column="52">DEVLABELDIR<pos:position pos:line="55" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="55" pos:column="65">ptname<pos:position pos:line="55" pos:column="71"/></name></expr></argument>)<pos:position pos:line="55" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="73"/></expr_stmt>
        <if pos:line="56" pos:column="9">if <condition pos:line="56" pos:column="12">(<expr><operator pos:line="56" pos:column="13">!<pos:position pos:line="56" pos:column="14"/></operator><call><name pos:line="56" pos:column="14">get_label_uuid<pos:position pos:line="56" pos:column="28"/></name><argument_list pos:line="56" pos:column="28">(<argument><expr><name pos:line="56" pos:column="29">device<pos:position pos:line="56" pos:column="35"/></name></expr></argument>, <argument><expr><operator pos:line="56" pos:column="37">&amp;<pos:position pos:line="56" pos:column="42"/></operator><name pos:line="56" pos:column="38">label<pos:position pos:line="56" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="56" pos:column="45">uuid<pos:position pos:line="56" pos:column="49"/></name></expr></argument>)<pos:position pos:line="56" pos:column="50"/></argument_list></call></expr>)<pos:position pos:line="56" pos:column="51"/></condition><then pos:line="56" pos:column="51"> <block pos:line="56" pos:column="52">{
          <expr_stmt><expr><call><name pos:line="57" pos:column="11">uuidcache_addentry<pos:position pos:line="57" pos:column="29"/></name><argument_list pos:line="57" pos:column="29">(<argument><expr><call><name pos:line="57" pos:column="30">sstrdup<pos:position pos:line="57" pos:column="37"/></name><argument_list pos:line="57" pos:column="37">(<argument><expr><name pos:line="57" pos:column="38">device<pos:position pos:line="57" pos:column="44"/></name></expr></argument>)<pos:position pos:line="57" pos:column="45"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="57" pos:column="47">label<pos:position pos:line="57" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="57" pos:column="54">uuid<pos:position pos:line="57" pos:column="58"/></name></expr></argument>)<pos:position pos:line="57" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="60"/></expr_stmt>
        }<pos:position pos:line="58" pos:column="10"/></block></then></if>
      }<pos:position pos:line="59" pos:column="8"/></block></then></if>
    }<pos:position pos:line="60" pos:column="6"/></block></while>
  }<pos:position pos:line="61" pos:column="4"/></block></for>
  <expr_stmt><expr><call><name pos:line="62" pos:column="3">fclose<pos:position pos:line="62" pos:column="9"/></name><argument_list pos:line="62" pos:column="9">(<argument><expr><name pos:line="62" pos:column="10">procpt<pos:position pos:line="62" pos:column="16"/></name></expr></argument>)<pos:position pos:line="62" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="18"/></expr_stmt>
}<pos:position pos:line="63" pos:column="2"/></block></function></unit>
