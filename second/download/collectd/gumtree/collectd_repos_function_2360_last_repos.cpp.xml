<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_2360_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">cipvs_submit_service<pos:position pos:line="1" pos:column="33"/></name><parameter_list pos:line="1" pos:column="33">(<parameter><decl><type><name><name pos:line="1" pos:column="34">struct<pos:position pos:line="1" pos:column="40"/></name> <name pos:line="1" pos:column="41">ip_vs_service_entry<pos:position pos:line="1" pos:column="60"/></name></name> <modifier pos:line="1" pos:column="61">*<pos:position pos:line="1" pos:column="62"/></modifier></type><name pos:line="1" pos:column="62">se<pos:position pos:line="1" pos:column="64"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="65"/></parameter_list> <block pos:line="1" pos:column="66">{
  <decl_stmt><decl><type><name><name pos:line="2" pos:column="3">struct<pos:position pos:line="2" pos:column="9"/></name> <name pos:line="2" pos:column="10">ip_vs_stats_user<pos:position pos:line="2" pos:column="26"/></name></name></type> <name pos:line="2" pos:column="27">stats<pos:position pos:line="2" pos:column="32"/></name> <init pos:line="2" pos:column="33">= <expr><name><name pos:line="2" pos:column="35">se<pos:position pos:line="2" pos:column="37"/></name><operator pos:line="2" pos:column="37">-&gt;<pos:position pos:line="2" pos:column="42"/></operator><name pos:line="2" pos:column="39">stats<pos:position pos:line="2" pos:column="44"/></name></name></expr></init></decl>;<pos:position pos:line="2" pos:column="45"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="3" pos:column="3">struct<pos:position pos:line="3" pos:column="9"/></name> <name pos:line="3" pos:column="10">ip_vs_get_dests<pos:position pos:line="3" pos:column="25"/></name></name> <modifier pos:line="3" pos:column="26">*<pos:position pos:line="3" pos:column="27"/></modifier></type><name pos:line="3" pos:column="27">dests<pos:position pos:line="3" pos:column="32"/></name> <init pos:line="3" pos:column="33">= <expr><call><name pos:line="3" pos:column="35">ipvs_get_dests<pos:position pos:line="3" pos:column="49"/></name><argument_list pos:line="3" pos:column="49">(<argument><expr><name pos:line="3" pos:column="50">se<pos:position pos:line="3" pos:column="52"/></name></expr></argument>)<pos:position pos:line="3" pos:column="53"/></argument_list></call></expr></init></decl>;<pos:position pos:line="3" pos:column="54"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="5" pos:column="3">char<pos:position pos:line="5" pos:column="7"/></name></type> <name><name pos:line="5" pos:column="8">pi<pos:position pos:line="5" pos:column="10"/></name><index pos:line="5" pos:column="10">[<expr><name pos:line="5" pos:column="11">DATA_MAX_NAME_LEN<pos:position pos:line="5" pos:column="28"/></name></expr>]<pos:position pos:line="5" pos:column="29"/></index></name></decl>;<pos:position pos:line="5" pos:column="30"/></decl_stmt>

  <if pos:line="7" pos:column="3">if <condition pos:line="7" pos:column="6">(<expr><call><name pos:line="7" pos:column="7">get_pi<pos:position pos:line="7" pos:column="13"/></name><argument_list pos:line="7" pos:column="13">(<argument><expr><name pos:line="7" pos:column="14">se<pos:position pos:line="7" pos:column="16"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="18">pi<pos:position pos:line="7" pos:column="20"/></name></expr></argument>, <argument><expr><sizeof pos:line="7" pos:column="22">sizeof<argument_list pos:line="7" pos:column="28">(<argument><expr><name pos:line="7" pos:column="29">pi<pos:position pos:line="7" pos:column="31"/></name></expr></argument>)<pos:position pos:line="7" pos:column="32"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="7" pos:column="33"/></argument_list></call> <operator pos:line="7" pos:column="34">!=<pos:position pos:line="7" pos:column="36"/></operator> <literal type="number" pos:line="7" pos:column="37">0<pos:position pos:line="7" pos:column="38"/></literal></expr>)<pos:position pos:line="7" pos:column="39"/></condition><then pos:line="7" pos:column="39"> <block pos:line="7" pos:column="40">{
    <expr_stmt><expr><call><name pos:line="8" pos:column="5">free<pos:position pos:line="8" pos:column="9"/></name><argument_list pos:line="8" pos:column="9">(<argument><expr><name pos:line="8" pos:column="10">dests<pos:position pos:line="8" pos:column="15"/></name></expr></argument>)<pos:position pos:line="8" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="17"/></expr_stmt>
    <return pos:line="9" pos:column="5">return;<pos:position pos:line="9" pos:column="12"/></return>
  }<pos:position pos:line="10" pos:column="4"/></block></then></if>

  <expr_stmt><expr><call><name pos:line="12" pos:column="3">cipvs_submit_connections<pos:position pos:line="12" pos:column="27"/></name><argument_list pos:line="12" pos:column="27">(<argument><expr><name pos:line="12" pos:column="28">pi<pos:position pos:line="12" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="32">NULL<pos:position pos:line="12" pos:column="36"/></name></expr></argument>, <argument><expr><name><name pos:line="12" pos:column="38">stats<pos:position pos:line="12" pos:column="43"/></name><operator pos:line="12" pos:column="43">.<pos:position pos:line="12" pos:column="44"/></operator><name pos:line="12" pos:column="44">conns<pos:position pos:line="12" pos:column="49"/></name></name></expr></argument>)<pos:position pos:line="12" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="51"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="13" pos:column="3">cipvs_submit_if<pos:position pos:line="13" pos:column="18"/></name><argument_list pos:line="13" pos:column="18">(<argument><expr><name pos:line="13" pos:column="19">pi<pos:position pos:line="13" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="13" pos:column="23">"if_packets"<pos:position pos:line="13" pos:column="35"/></literal></expr></argument>, <argument><expr><name pos:line="13" pos:column="37">NULL<pos:position pos:line="13" pos:column="41"/></name></expr></argument>, <argument><expr><name><name pos:line="13" pos:column="43">stats<pos:position pos:line="13" pos:column="48"/></name><operator pos:line="13" pos:column="48">.<pos:position pos:line="13" pos:column="49"/></operator><name pos:line="13" pos:column="49">inpkts<pos:position pos:line="13" pos:column="55"/></name></name></expr></argument>, <argument><expr><name><name pos:line="13" pos:column="57">stats<pos:position pos:line="13" pos:column="62"/></name><operator pos:line="13" pos:column="62">.<pos:position pos:line="13" pos:column="63"/></operator><name pos:line="13" pos:column="63">outpkts<pos:position pos:line="13" pos:column="70"/></name></name></expr></argument>)<pos:position pos:line="13" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="72"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="14" pos:column="3">cipvs_submit_if<pos:position pos:line="14" pos:column="18"/></name><argument_list pos:line="14" pos:column="18">(<argument><expr><name pos:line="14" pos:column="19">pi<pos:position pos:line="14" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="14" pos:column="23">"if_octets"<pos:position pos:line="14" pos:column="34"/></literal></expr></argument>, <argument><expr><name pos:line="14" pos:column="36">NULL<pos:position pos:line="14" pos:column="40"/></name></expr></argument>, <argument><expr><name><name pos:line="14" pos:column="42">stats<pos:position pos:line="14" pos:column="47"/></name><operator pos:line="14" pos:column="47">.<pos:position pos:line="14" pos:column="48"/></operator><name pos:line="14" pos:column="48">inbytes<pos:position pos:line="14" pos:column="55"/></name></name></expr></argument>, <argument><expr><name><name pos:line="14" pos:column="57">stats<pos:position pos:line="14" pos:column="62"/></name><operator pos:line="14" pos:column="62">.<pos:position pos:line="14" pos:column="63"/></operator><name pos:line="14" pos:column="63">outbytes<pos:position pos:line="14" pos:column="71"/></name></name></expr></argument>)<pos:position pos:line="14" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="73"/></expr_stmt>

  <for pos:line="16" pos:column="3">for <control pos:line="16" pos:column="7">(<init><decl><type><name pos:line="16" pos:column="8">size_t<pos:position pos:line="16" pos:column="14"/></name></type> <name pos:line="16" pos:column="15">i<pos:position pos:line="16" pos:column="16"/></name> <init pos:line="16" pos:column="17">= <expr><literal type="number" pos:line="16" pos:column="19">0<pos:position pos:line="16" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="16" pos:column="21"/></init> <condition><expr><name pos:line="16" pos:column="22">i<pos:position pos:line="16" pos:column="23"/></name> <operator pos:line="16" pos:column="24">&lt;<pos:position pos:line="16" pos:column="28"/></operator> <name><name pos:line="16" pos:column="26">dests<pos:position pos:line="16" pos:column="31"/></name><operator pos:line="16" pos:column="31">-&gt;<pos:position pos:line="16" pos:column="36"/></operator><name pos:line="16" pos:column="33">num_dests<pos:position pos:line="16" pos:column="42"/></name></name></expr>;<pos:position pos:line="16" pos:column="43"/></condition> <incr><expr><operator pos:line="16" pos:column="44">++<pos:position pos:line="16" pos:column="46"/></operator><name pos:line="16" pos:column="46">i<pos:position pos:line="16" pos:column="47"/></name></expr></incr>)<pos:position pos:line="16" pos:column="48"/></control>
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="17" pos:column="5">cipvs_submit_dest<pos:position pos:line="17" pos:column="22"/></name><argument_list pos:line="17" pos:column="22">(<argument><expr><name pos:line="17" pos:column="23">pi<pos:position pos:line="17" pos:column="25"/></name></expr></argument>, <argument><expr><operator pos:line="17" pos:column="27">&amp;<pos:position pos:line="17" pos:column="32"/></operator><name><name pos:line="17" pos:column="28">dests<pos:position pos:line="17" pos:column="33"/></name><operator pos:line="17" pos:column="33">-&gt;<pos:position pos:line="17" pos:column="38"/></operator><name pos:line="17" pos:column="35">entrytable<pos:position pos:line="17" pos:column="45"/></name><index pos:line="17" pos:column="45">[<expr><name pos:line="17" pos:column="46">i<pos:position pos:line="17" pos:column="47"/></name></expr>]<pos:position pos:line="17" pos:column="48"/></index></name></expr></argument>)<pos:position pos:line="17" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="50"/></expr_stmt></block></for>

  <expr_stmt><expr><call><name pos:line="19" pos:column="3">free<pos:position pos:line="19" pos:column="7"/></name><argument_list pos:line="19" pos:column="7">(<argument><expr><name pos:line="19" pos:column="8">dests<pos:position pos:line="19" pos:column="13"/></name></expr></argument>)<pos:position pos:line="19" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="15"/></expr_stmt>
  <return pos:line="20" pos:column="3">return;<pos:position pos:line="20" pos:column="10"/></return>
}<pos:position pos:line="21" pos:column="2"/></block></function></unit>
