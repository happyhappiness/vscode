<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1222_collectd-5.6.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type>
<name pos:line="2" pos:column="1">connect_client<pos:position pos:line="2" pos:column="15"/></name><parameter_list pos:line="2" pos:column="15">(<parameter><decl><type><specifier pos:line="2" pos:column="16">const<pos:position pos:line="2" pos:column="21"/></specifier> <name pos:line="2" pos:column="22">char<pos:position pos:line="2" pos:column="26"/></name> <modifier pos:line="2" pos:column="27">*<pos:position pos:line="2" pos:column="28"/></modifier></type><name pos:line="2" pos:column="28">p_hostname<pos:position pos:line="2" pos:column="38"/></name></decl></parameter>,
               <parameter><decl><type><specifier pos:line="3" pos:column="16">const<pos:position pos:line="3" pos:column="21"/></specifier> <name pos:line="3" pos:column="22">char<pos:position pos:line="3" pos:column="26"/></name> <modifier pos:line="3" pos:column="27">*<pos:position pos:line="3" pos:column="28"/></modifier></type><name pos:line="3" pos:column="28">p_service<pos:position pos:line="3" pos:column="37"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="39">int<pos:position pos:line="3" pos:column="42"/></name></type> <name pos:line="3" pos:column="43">p_family<pos:position pos:line="3" pos:column="51"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="53">int<pos:position pos:line="3" pos:column="56"/></name></type> <name pos:line="3" pos:column="57">p_socktype<pos:position pos:line="3" pos:column="67"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="68"/></parameter_list>
<block pos:line="4" pos:column="1">{
  <decl_stmt><decl><type><name><name pos:line="5" pos:column="3">struct<pos:position pos:line="5" pos:column="9"/></name> <name pos:line="5" pos:column="10">addrinfo<pos:position pos:line="5" pos:column="18"/></name></name> <modifier pos:line="5" pos:column="19">*<pos:position pos:line="5" pos:column="20"/></modifier></type><name pos:line="5" pos:column="20">res<pos:position pos:line="5" pos:column="23"/></name></decl>, <modifier pos:line="5" pos:column="25">*<pos:position pos:line="5" pos:column="26"/></modifier><decl><type ref="prev"/><name pos:line="5" pos:column="26">ressave<pos:position pos:line="5" pos:column="33"/></name></decl>;<pos:position pos:line="5" pos:column="34"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">int<pos:position pos:line="6" pos:column="6"/></name></type> <name pos:line="6" pos:column="7">n<pos:position pos:line="6" pos:column="8"/></name></decl>, <decl><type ref="prev"/><name pos:line="6" pos:column="10">sockfd<pos:position pos:line="6" pos:column="16"/></name></decl>;<pos:position pos:line="6" pos:column="17"/></decl_stmt>

  <decl_stmt><decl><type><name><name pos:line="8" pos:column="3">struct<pos:position pos:line="8" pos:column="9"/></name> <name pos:line="8" pos:column="10">addrinfo<pos:position pos:line="8" pos:column="18"/></name></name></type> <name pos:line="8" pos:column="19">ai_hints<pos:position pos:line="8" pos:column="27"/></name> <init pos:line="8" pos:column="28">= <expr><block pos:line="8" pos:column="30">{
    <expr><operator pos:line="9" pos:column="5">.<pos:position pos:line="9" pos:column="6"/></operator><name pos:line="9" pos:column="6">ai_family<pos:position pos:line="9" pos:column="15"/></name> <operator pos:line="9" pos:column="16">=<pos:position pos:line="9" pos:column="17"/></operator> <name pos:line="9" pos:column="18">p_family<pos:position pos:line="9" pos:column="26"/></name></expr>,
    <expr><operator pos:line="10" pos:column="5">.<pos:position pos:line="10" pos:column="6"/></operator><name pos:line="10" pos:column="6">ai_socktype<pos:position pos:line="10" pos:column="17"/></name> <operator pos:line="10" pos:column="18">=<pos:position pos:line="10" pos:column="19"/></operator> <name pos:line="10" pos:column="20">p_socktype<pos:position pos:line="10" pos:column="30"/></name></expr>
  }<pos:position pos:line="11" pos:column="4"/></block></expr></init></decl>;<pos:position pos:line="11" pos:column="5"/></decl_stmt>

  <expr_stmt><expr><name pos:line="13" pos:column="3">n<pos:position pos:line="13" pos:column="4"/></name> <operator pos:line="13" pos:column="5">=<pos:position pos:line="13" pos:column="6"/></operator> <call><name pos:line="13" pos:column="7">getaddrinfo<pos:position pos:line="13" pos:column="18"/></name><argument_list pos:line="13" pos:column="18">(<argument><expr><name pos:line="13" pos:column="19">p_hostname<pos:position pos:line="13" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="31">p_service<pos:position pos:line="13" pos:column="40"/></name></expr></argument>, <argument><expr><operator pos:line="13" pos:column="42">&amp;<pos:position pos:line="13" pos:column="47"/></operator><name pos:line="13" pos:column="43">ai_hints<pos:position pos:line="13" pos:column="51"/></name></expr></argument>, <argument><expr><operator pos:line="13" pos:column="53">&amp;<pos:position pos:line="13" pos:column="58"/></operator><name pos:line="13" pos:column="54">res<pos:position pos:line="13" pos:column="57"/></name></expr></argument>)<pos:position pos:line="13" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="59"/></expr_stmt>

  <if pos:line="15" pos:column="3">if <condition pos:line="15" pos:column="6">(<expr><name pos:line="15" pos:column="7">n<pos:position pos:line="15" pos:column="8"/></name> <operator pos:line="15" pos:column="9">&lt;<pos:position pos:line="15" pos:column="13"/></operator> <literal type="number" pos:line="15" pos:column="11">0<pos:position pos:line="15" pos:column="12"/></literal></expr>)<pos:position pos:line="15" pos:column="13"/></condition><then pos:line="15" pos:column="13">
  <block pos:line="16" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="17" pos:column="5">ERROR<pos:position pos:line="17" pos:column="10"/></name><argument_list pos:line="17" pos:column="10">(<argument><expr><name pos:line="17" pos:column="11">PLUGIN_NAME<pos:position pos:line="17" pos:column="22"/></name> <literal type="string" pos:line="17" pos:column="23">": getaddrinfo error:: [%s]"<pos:position pos:line="17" pos:column="51"/></literal></expr></argument>, <argument><expr><call><name pos:line="17" pos:column="53">gai_strerror<pos:position pos:line="17" pos:column="65"/></name><argument_list pos:line="17" pos:column="65">(<argument><expr><name pos:line="17" pos:column="66">n<pos:position pos:line="17" pos:column="67"/></name></expr></argument>)<pos:position pos:line="17" pos:column="68"/></argument_list></call></expr></argument>)<pos:position pos:line="17" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="70"/></expr_stmt>
    <return pos:line="18" pos:column="5">return <expr><operator pos:line="18" pos:column="12">-<pos:position pos:line="18" pos:column="13"/></operator><literal type="number" pos:line="18" pos:column="13">1<pos:position pos:line="18" pos:column="14"/></literal></expr>;<pos:position pos:line="18" pos:column="15"/></return>
  }<pos:position pos:line="19" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="21" pos:column="3">ressave<pos:position pos:line="21" pos:column="10"/></name> <operator pos:line="21" pos:column="11">=<pos:position pos:line="21" pos:column="12"/></operator> <name pos:line="21" pos:column="13">res<pos:position pos:line="21" pos:column="16"/></name></expr>;<pos:position pos:line="21" pos:column="17"/></expr_stmt>

  <expr_stmt><expr><name pos:line="23" pos:column="3">sockfd<pos:position pos:line="23" pos:column="9"/></name> <operator pos:line="23" pos:column="10">=<pos:position pos:line="23" pos:column="11"/></operator> <operator pos:line="23" pos:column="12">-<pos:position pos:line="23" pos:column="13"/></operator><literal type="number" pos:line="23" pos:column="13">1<pos:position pos:line="23" pos:column="14"/></literal></expr>;<pos:position pos:line="23" pos:column="15"/></expr_stmt>
  <while pos:line="24" pos:column="3">while <condition pos:line="24" pos:column="9">(<expr><name pos:line="24" pos:column="10">res<pos:position pos:line="24" pos:column="13"/></name></expr>)<pos:position pos:line="24" pos:column="14"/></condition>
  <block pos:line="25" pos:column="3">{
    <expr_stmt><expr><name pos:line="26" pos:column="5">sockfd<pos:position pos:line="26" pos:column="11"/></name> <operator pos:line="26" pos:column="12">=<pos:position pos:line="26" pos:column="13"/></operator> <call><name pos:line="26" pos:column="14">socket<pos:position pos:line="26" pos:column="20"/></name><argument_list pos:line="26" pos:column="20">(<argument><expr><name><name pos:line="26" pos:column="21">res<pos:position pos:line="26" pos:column="24"/></name><operator pos:line="26" pos:column="24">-&gt;<pos:position pos:line="26" pos:column="29"/></operator><name pos:line="26" pos:column="26">ai_family<pos:position pos:line="26" pos:column="35"/></name></name></expr></argument>, <argument><expr><name><name pos:line="26" pos:column="37">res<pos:position pos:line="26" pos:column="40"/></name><operator pos:line="26" pos:column="40">-&gt;<pos:position pos:line="26" pos:column="45"/></operator><name pos:line="26" pos:column="42">ai_socktype<pos:position pos:line="26" pos:column="53"/></name></name></expr></argument>, <argument><expr><name><name pos:line="26" pos:column="55">res<pos:position pos:line="26" pos:column="58"/></name><operator pos:line="26" pos:column="58">-&gt;<pos:position pos:line="26" pos:column="63"/></operator><name pos:line="26" pos:column="60">ai_protocol<pos:position pos:line="26" pos:column="71"/></name></name></expr></argument>)<pos:position pos:line="26" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="73"/></expr_stmt>

    <if pos:line="28" pos:column="5">if <condition pos:line="28" pos:column="8">(<expr><operator pos:line="28" pos:column="9">!<pos:position pos:line="28" pos:column="10"/></operator><operator pos:line="28" pos:column="10">(<pos:position pos:line="28" pos:column="11"/></operator><name pos:line="28" pos:column="11">sockfd<pos:position pos:line="28" pos:column="17"/></name> <operator pos:line="28" pos:column="18">&lt;<pos:position pos:line="28" pos:column="22"/></operator> <literal type="number" pos:line="28" pos:column="20">0<pos:position pos:line="28" pos:column="21"/></literal><operator pos:line="28" pos:column="21">)<pos:position pos:line="28" pos:column="22"/></operator></expr>)<pos:position pos:line="28" pos:column="23"/></condition><then pos:line="28" pos:column="23">
    <block pos:line="29" pos:column="5">{
      <if pos:line="30" pos:column="7">if <condition pos:line="30" pos:column="10">(<expr><call><name pos:line="30" pos:column="11">connect<pos:position pos:line="30" pos:column="18"/></name><argument_list pos:line="30" pos:column="18">(<argument><expr><name pos:line="30" pos:column="19">sockfd<pos:position pos:line="30" pos:column="25"/></name></expr></argument>, <argument><expr><name><name pos:line="30" pos:column="27">res<pos:position pos:line="30" pos:column="30"/></name><operator pos:line="30" pos:column="30">-&gt;<pos:position pos:line="30" pos:column="35"/></operator><name pos:line="30" pos:column="32">ai_addr<pos:position pos:line="30" pos:column="39"/></name></name></expr></argument>, <argument><expr><name><name pos:line="30" pos:column="41">res<pos:position pos:line="30" pos:column="44"/></name><operator pos:line="30" pos:column="44">-&gt;<pos:position pos:line="30" pos:column="49"/></operator><name pos:line="30" pos:column="46">ai_addrlen<pos:position pos:line="30" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="30" pos:column="57"/></argument_list></call> <operator pos:line="30" pos:column="58">==<pos:position pos:line="30" pos:column="60"/></operator> <literal type="number" pos:line="30" pos:column="61">0<pos:position pos:line="30" pos:column="62"/></literal></expr>)<pos:position pos:line="30" pos:column="63"/></condition><then pos:line="30" pos:column="63">
      <block pos:line="31" pos:column="7">{
        <comment type="block" pos:line="32" pos:column="9">/* Success */</comment>
        <break pos:line="33" pos:column="9">break;<pos:position pos:line="33" pos:column="15"/></break>
      }<pos:position pos:line="34" pos:column="8"/></block></then></if>

      <expr_stmt><expr><call><name pos:line="36" pos:column="7">close<pos:position pos:line="36" pos:column="12"/></name><argument_list pos:line="36" pos:column="12">(<argument><expr><name pos:line="36" pos:column="13">sockfd<pos:position pos:line="36" pos:column="19"/></name></expr></argument>)<pos:position pos:line="36" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="21"/></expr_stmt>
      <expr_stmt><expr><name pos:line="37" pos:column="7">sockfd<pos:position pos:line="37" pos:column="13"/></name> <operator pos:line="37" pos:column="14">=<pos:position pos:line="37" pos:column="15"/></operator> <operator pos:line="37" pos:column="16">-<pos:position pos:line="37" pos:column="17"/></operator><literal type="number" pos:line="37" pos:column="17">1<pos:position pos:line="37" pos:column="18"/></literal></expr>;<pos:position pos:line="37" pos:column="19"/></expr_stmt>
    }<pos:position pos:line="38" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="39" pos:column="5">res<pos:position pos:line="39" pos:column="8"/></name> <operator pos:line="39" pos:column="9">=<pos:position pos:line="39" pos:column="10"/></operator> <name><name pos:line="39" pos:column="11">res<pos:position pos:line="39" pos:column="14"/></name><operator pos:line="39" pos:column="14">-&gt;<pos:position pos:line="39" pos:column="19"/></operator><name pos:line="39" pos:column="16">ai_next<pos:position pos:line="39" pos:column="23"/></name></name></expr>;<pos:position pos:line="39" pos:column="24"/></expr_stmt>
  }<pos:position pos:line="40" pos:column="4"/></block></while>

  <expr_stmt><expr><call><name pos:line="42" pos:column="3">freeaddrinfo<pos:position pos:line="42" pos:column="15"/></name><argument_list pos:line="42" pos:column="15">(<argument><expr><name pos:line="42" pos:column="16">ressave<pos:position pos:line="42" pos:column="23"/></name></expr></argument>)<pos:position pos:line="42" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="25"/></expr_stmt>
  <return pos:line="43" pos:column="3">return <expr><name pos:line="43" pos:column="10">sockfd<pos:position pos:line="43" pos:column="16"/></name></expr>;<pos:position pos:line="43" pos:column="17"/></return>
}<pos:position pos:line="44" pos:column="2"/></block></function></unit>
