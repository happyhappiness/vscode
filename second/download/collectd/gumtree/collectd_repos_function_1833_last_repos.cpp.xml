<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1833_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">char<pos:position pos:line="1" pos:column="12"/></name> <modifier pos:line="1" pos:column="13">*<pos:position pos:line="1" pos:column="14"/></modifier></type><name pos:line="1" pos:column="14">cx_get_text_node_value<pos:position pos:line="1" pos:column="36"/></name><parameter_list pos:line="1" pos:column="36">(<parameter><decl><type><name pos:line="1" pos:column="37">xmlXPathContextPtr<pos:position pos:line="1" pos:column="55"/></name></type> <name pos:line="1" pos:column="56">xpath_ctx<pos:position pos:line="1" pos:column="65"/></name></decl></parameter>, <comment type="block" pos:line="1" pos:column="67">/* {{{ */</comment>
                                    <parameter><decl><type><name pos:line="2" pos:column="37">char<pos:position pos:line="2" pos:column="41"/></name> <modifier pos:line="2" pos:column="42">*<pos:position pos:line="2" pos:column="43"/></modifier></type><name pos:line="2" pos:column="43">expr<pos:position pos:line="2" pos:column="47"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="49">const<pos:position pos:line="2" pos:column="54"/></specifier> <name pos:line="2" pos:column="55">char<pos:position pos:line="2" pos:column="59"/></name> <modifier pos:line="2" pos:column="60">*<pos:position pos:line="2" pos:column="61"/></modifier></type><name pos:line="2" pos:column="61">from_option<pos:position pos:line="2" pos:column="72"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="73"/></parameter_list> <block pos:line="2" pos:column="74">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">xmlXPathObjectPtr<pos:position pos:line="3" pos:column="20"/></name></type> <name pos:line="3" pos:column="21">values_node_obj<pos:position pos:line="3" pos:column="36"/></name> <init pos:line="3" pos:column="37">= <expr><call><name pos:line="3" pos:column="39">cx_evaluate_xpath<pos:position pos:line="3" pos:column="56"/></name><argument_list pos:line="3" pos:column="56">(<argument><expr><name pos:line="3" pos:column="57">xpath_ctx<pos:position pos:line="3" pos:column="66"/></name></expr></argument>, <argument><expr><name pos:line="3" pos:column="68">expr<pos:position pos:line="3" pos:column="72"/></name></expr></argument>)<pos:position pos:line="3" pos:column="73"/></argument_list></call></expr></init></decl>;<pos:position pos:line="3" pos:column="74"/></decl_stmt>
  <if pos:line="4" pos:column="3">if <condition pos:line="4" pos:column="6">(<expr><name pos:line="4" pos:column="7">values_node_obj<pos:position pos:line="4" pos:column="22"/></name> <operator pos:line="4" pos:column="23">==<pos:position pos:line="4" pos:column="25"/></operator> <name pos:line="4" pos:column="26">NULL<pos:position pos:line="4" pos:column="30"/></name></expr>)<pos:position pos:line="4" pos:column="31"/></condition><then pos:line="4" pos:column="31">
    <block type="pseudo"><return pos:line="5" pos:column="5">return <expr><name pos:line="5" pos:column="12">NULL<pos:position pos:line="5" pos:column="16"/></name></expr>;<pos:position pos:line="5" pos:column="17"/></return></block></then></if> <comment type="block" pos:line="5" pos:column="18">/* Error already logged. */</comment>

  <decl_stmt><decl><type><name pos:line="7" pos:column="3">xmlNodeSetPtr<pos:position pos:line="7" pos:column="16"/></name></type> <name pos:line="7" pos:column="17">values_node<pos:position pos:line="7" pos:column="28"/></name> <init pos:line="7" pos:column="29">= <expr><name><name pos:line="7" pos:column="31">values_node_obj<pos:position pos:line="7" pos:column="46"/></name><operator pos:line="7" pos:column="46">-&gt;<pos:position pos:line="7" pos:column="51"/></operator><name pos:line="7" pos:column="48">nodesetval<pos:position pos:line="7" pos:column="58"/></name></name></expr></init></decl>;<pos:position pos:line="7" pos:column="59"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">size_t<pos:position pos:line="8" pos:column="9"/></name></type> <name pos:line="8" pos:column="10">tmp_size<pos:position pos:line="8" pos:column="18"/></name> <init pos:line="8" pos:column="19">= <expr><ternary><condition><expr><operator pos:line="8" pos:column="21">(<pos:position pos:line="8" pos:column="22"/></operator><name pos:line="8" pos:column="22">values_node<pos:position pos:line="8" pos:column="33"/></name><operator pos:line="8" pos:column="33">)<pos:position pos:line="8" pos:column="34"/></operator></expr> ?<pos:position pos:line="8" pos:column="36"/></condition><then pos:line="8" pos:column="36"> <expr><name><name pos:line="8" pos:column="37">values_node<pos:position pos:line="8" pos:column="48"/></name><operator pos:line="8" pos:column="48">-&gt;<pos:position pos:line="8" pos:column="53"/></operator><name pos:line="8" pos:column="50">nodeNr<pos:position pos:line="8" pos:column="56"/></name></name></expr> <pos:position pos:line="8" pos:column="57"/></then><else pos:line="8" pos:column="57">: <expr><literal type="number" pos:line="8" pos:column="59">0<pos:position pos:line="8" pos:column="60"/></literal></expr></else></ternary></expr></init></decl>;<pos:position pos:line="8" pos:column="61"/></decl_stmt>

  <if pos:line="10" pos:column="3">if <condition pos:line="10" pos:column="6">(<expr><name pos:line="10" pos:column="7">tmp_size<pos:position pos:line="10" pos:column="15"/></name> <operator pos:line="10" pos:column="16">==<pos:position pos:line="10" pos:column="18"/></operator> <literal type="number" pos:line="10" pos:column="19">0<pos:position pos:line="10" pos:column="20"/></literal></expr>)<pos:position pos:line="10" pos:column="21"/></condition><then pos:line="10" pos:column="21"> <block pos:line="10" pos:column="22">{
    <expr_stmt><expr><call><name pos:line="11" pos:column="5">WARNING<pos:position pos:line="11" pos:column="12"/></name><argument_list pos:line="11" pos:column="12">(<argument><expr><literal type="string" pos:line="11" pos:column="13">"curl_xml plugin: "<pos:position pos:line="11" pos:column="32"/></literal>
            <literal type="string" pos:line="12" pos:column="13">"relative xpath expression \"%s\" from '%s' doesn't match "<pos:position pos:line="12" pos:column="72"/></literal>
            <literal type="string" pos:line="13" pos:column="13">"any of the nodes."<pos:position pos:line="13" pos:column="32"/></literal></expr></argument>,
            <argument><expr><name pos:line="14" pos:column="13">expr<pos:position pos:line="14" pos:column="17"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="19">from_option<pos:position pos:line="14" pos:column="30"/></name></expr></argument>)<pos:position pos:line="14" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="32"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="15" pos:column="5">xmlXPathFreeObject<pos:position pos:line="15" pos:column="23"/></name><argument_list pos:line="15" pos:column="23">(<argument><expr><name pos:line="15" pos:column="24">values_node_obj<pos:position pos:line="15" pos:column="39"/></name></expr></argument>)<pos:position pos:line="15" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="41"/></expr_stmt>
    <return pos:line="16" pos:column="5">return <expr><name pos:line="16" pos:column="12">NULL<pos:position pos:line="16" pos:column="16"/></name></expr>;<pos:position pos:line="16" pos:column="17"/></return>
  }<pos:position pos:line="17" pos:column="4"/></block></then></if>

  <if pos:line="19" pos:column="3">if <condition pos:line="19" pos:column="6">(<expr><name pos:line="19" pos:column="7">tmp_size<pos:position pos:line="19" pos:column="15"/></name> <operator pos:line="19" pos:column="16">&gt;<pos:position pos:line="19" pos:column="20"/></operator> <literal type="number" pos:line="19" pos:column="18">1<pos:position pos:line="19" pos:column="19"/></literal></expr>)<pos:position pos:line="19" pos:column="20"/></condition><then pos:line="19" pos:column="20"> <block pos:line="19" pos:column="21">{
    <expr_stmt><expr><call><name pos:line="20" pos:column="5">WARNING<pos:position pos:line="20" pos:column="12"/></name><argument_list pos:line="20" pos:column="12">(<argument><expr><literal type="string" pos:line="20" pos:column="13">"curl_xml plugin: "<pos:position pos:line="20" pos:column="32"/></literal>
            <literal type="string" pos:line="21" pos:column="13">"relative xpath expression \"%s\" from '%s' is expected to return "<pos:position pos:line="21" pos:column="80"/></literal>
            <literal type="string" pos:line="22" pos:column="13">"only one text node. Skipping the node."<pos:position pos:line="22" pos:column="53"/></literal></expr></argument>,
            <argument><expr><name pos:line="23" pos:column="13">expr<pos:position pos:line="23" pos:column="17"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="19">from_option<pos:position pos:line="23" pos:column="30"/></name></expr></argument>)<pos:position pos:line="23" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="32"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="24" pos:column="5">xmlXPathFreeObject<pos:position pos:line="24" pos:column="23"/></name><argument_list pos:line="24" pos:column="23">(<argument><expr><name pos:line="24" pos:column="24">values_node_obj<pos:position pos:line="24" pos:column="39"/></name></expr></argument>)<pos:position pos:line="24" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="41"/></expr_stmt>
    <return pos:line="25" pos:column="5">return <expr><name pos:line="25" pos:column="12">NULL<pos:position pos:line="25" pos:column="16"/></name></expr>;<pos:position pos:line="25" pos:column="17"/></return>
  }<pos:position pos:line="26" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="28" pos:column="3">/* ignoring the element if other than textnode/attribute*/</comment>
  <if pos:line="29" pos:column="3">if <condition pos:line="29" pos:column="6">(<expr><call><name pos:line="29" pos:column="7">cx_if_not_text_node<pos:position pos:line="29" pos:column="26"/></name><argument_list pos:line="29" pos:column="26">(<argument><expr><name><name pos:line="29" pos:column="27">values_node<pos:position pos:line="29" pos:column="38"/></name><operator pos:line="29" pos:column="38">-&gt;<pos:position pos:line="29" pos:column="43"/></operator><name pos:line="29" pos:column="40">nodeTab<pos:position pos:line="29" pos:column="47"/></name><index pos:line="29" pos:column="47">[<expr><literal type="number" pos:line="29" pos:column="48">0<pos:position pos:line="29" pos:column="49"/></literal></expr>]<pos:position pos:line="29" pos:column="50"/></index></name></expr></argument>)<pos:position pos:line="29" pos:column="51"/></argument_list></call></expr>)<pos:position pos:line="29" pos:column="52"/></condition><then pos:line="29" pos:column="52"> <block pos:line="29" pos:column="53">{
    <expr_stmt><expr><call><name pos:line="30" pos:column="5">WARNING<pos:position pos:line="30" pos:column="12"/></name><argument_list pos:line="30" pos:column="12">(<argument><expr><literal type="string" pos:line="30" pos:column="13">"curl_xml plugin: "<pos:position pos:line="30" pos:column="32"/></literal>
            <literal type="string" pos:line="31" pos:column="13">"relative xpath expression \"%s\" from '%s' is expected to return "<pos:position pos:line="31" pos:column="80"/></literal>
            <literal type="string" pos:line="32" pos:column="13">"only text/attribute node which is not the case. "<pos:position pos:line="32" pos:column="63"/></literal>
            <literal type="string" pos:line="33" pos:column="13">"Skipping the node."<pos:position pos:line="33" pos:column="33"/></literal></expr></argument>,
            <argument><expr><name pos:line="34" pos:column="13">expr<pos:position pos:line="34" pos:column="17"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="19">from_option<pos:position pos:line="34" pos:column="30"/></name></expr></argument>)<pos:position pos:line="34" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="32"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="35" pos:column="5">xmlXPathFreeObject<pos:position pos:line="35" pos:column="23"/></name><argument_list pos:line="35" pos:column="23">(<argument><expr><name pos:line="35" pos:column="24">values_node_obj<pos:position pos:line="35" pos:column="39"/></name></expr></argument>)<pos:position pos:line="35" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="41"/></expr_stmt>
    <return pos:line="36" pos:column="5">return <expr><name pos:line="36" pos:column="12">NULL<pos:position pos:line="36" pos:column="16"/></name></expr>;<pos:position pos:line="36" pos:column="17"/></return>
  }<pos:position pos:line="37" pos:column="4"/></block></then></if>

  <decl_stmt><decl><type><name pos:line="39" pos:column="3">char<pos:position pos:line="39" pos:column="7"/></name> <modifier pos:line="39" pos:column="8">*<pos:position pos:line="39" pos:column="9"/></modifier></type><name pos:line="39" pos:column="9">node_value<pos:position pos:line="39" pos:column="19"/></name> <init pos:line="39" pos:column="20">= <expr><operator pos:line="39" pos:column="22">(<pos:position pos:line="39" pos:column="23"/></operator><name pos:line="39" pos:column="23">char<pos:position pos:line="39" pos:column="27"/></name> <operator pos:line="39" pos:column="28">*<pos:position pos:line="39" pos:column="29"/></operator><operator pos:line="39" pos:column="29">)<pos:position pos:line="39" pos:column="30"/></operator><call><name pos:line="39" pos:column="30">xmlNodeGetContent<pos:position pos:line="39" pos:column="47"/></name><argument_list pos:line="39" pos:column="47">(<argument><expr><name><name pos:line="39" pos:column="48">values_node<pos:position pos:line="39" pos:column="59"/></name><operator pos:line="39" pos:column="59">-&gt;<pos:position pos:line="39" pos:column="64"/></operator><name pos:line="39" pos:column="61">nodeTab<pos:position pos:line="39" pos:column="68"/></name><index pos:line="39" pos:column="68">[<expr><literal type="number" pos:line="39" pos:column="69">0<pos:position pos:line="39" pos:column="70"/></literal></expr>]<pos:position pos:line="39" pos:column="71"/></index></name></expr></argument>)<pos:position pos:line="39" pos:column="72"/></argument_list></call></expr></init></decl>;<pos:position pos:line="39" pos:column="73"/></decl_stmt>

  <comment type="block" pos:line="41" pos:column="3">/* free up object */</comment>
  <expr_stmt><expr><call><name pos:line="42" pos:column="3">xmlXPathFreeObject<pos:position pos:line="42" pos:column="21"/></name><argument_list pos:line="42" pos:column="21">(<argument><expr><name pos:line="42" pos:column="22">values_node_obj<pos:position pos:line="42" pos:column="37"/></name></expr></argument>)<pos:position pos:line="42" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="39"/></expr_stmt>

  <return pos:line="44" pos:column="3">return <expr><name pos:line="44" pos:column="10">node_value<pos:position pos:line="44" pos:column="20"/></name></expr>;<pos:position pos:line="44" pos:column="21"/></return>
}<pos:position pos:line="45" pos:column="2"/></block></function></unit>
