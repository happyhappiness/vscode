<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_758_collectd-5.7.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">mic_read_power<pos:position pos:line="1" pos:column="26"/></name><parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><name pos:line="1" pos:column="27">int<pos:position pos:line="1" pos:column="30"/></name></type> <name pos:line="1" pos:column="31">mic<pos:position pos:line="1" pos:column="34"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="35"/></parameter_list> <block pos:line="1" pos:column="36">{
  <decl_stmt><decl><type><name pos:line="2" pos:column="3">U32<pos:position pos:line="2" pos:column="6"/></name></type> <name pos:line="2" pos:column="7">ret<pos:position pos:line="2" pos:column="10"/></name></decl>;<pos:position pos:line="2" pos:column="11"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">MicPwrUsage<pos:position pos:line="3" pos:column="14"/></name></type> <name pos:line="3" pos:column="15">power_use<pos:position pos:line="3" pos:column="24"/></name></decl>;<pos:position pos:line="3" pos:column="25"/></decl_stmt>

  <expr_stmt><expr><name pos:line="5" pos:column="3">ret<pos:position pos:line="5" pos:column="6"/></name> <operator pos:line="5" pos:column="7">=<pos:position pos:line="5" pos:column="8"/></operator> <call><name pos:line="5" pos:column="9">MicGetPowerUsage<pos:position pos:line="5" pos:column="25"/></name><argument_list pos:line="5" pos:column="25">(<argument><expr><name pos:line="5" pos:column="26">mic_handle<pos:position pos:line="5" pos:column="36"/></name></expr></argument>, <argument><expr><operator pos:line="5" pos:column="38">&amp;<pos:position pos:line="5" pos:column="43"/></operator><name pos:line="5" pos:column="39">power_use<pos:position pos:line="5" pos:column="48"/></name></expr></argument>)<pos:position pos:line="5" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="50"/></expr_stmt>
  <if pos:line="6" pos:column="3">if <condition pos:line="6" pos:column="6">(<expr><name pos:line="6" pos:column="7">ret<pos:position pos:line="6" pos:column="10"/></name> <operator pos:line="6" pos:column="11">!=<pos:position pos:line="6" pos:column="13"/></operator> <name pos:line="6" pos:column="14">MIC_ACCESS_API_SUCCESS<pos:position pos:line="6" pos:column="36"/></name></expr>)<pos:position pos:line="6" pos:column="37"/></condition><then pos:line="6" pos:column="37"> <block pos:line="6" pos:column="38">{
    <expr_stmt><expr><call><name pos:line="7" pos:column="5">ERROR<pos:position pos:line="7" pos:column="10"/></name><argument_list pos:line="7" pos:column="10">(<argument><expr><literal type="string" pos:line="7" pos:column="11">"mic plugin: Problem getting Power Usage: %s"<pos:position pos:line="7" pos:column="56"/></literal></expr></argument>,
          <argument><expr><call><name pos:line="8" pos:column="11">MicGetErrorString<pos:position pos:line="8" pos:column="28"/></name><argument_list pos:line="8" pos:column="28">(<argument><expr><name pos:line="8" pos:column="29">ret<pos:position pos:line="8" pos:column="32"/></name></expr></argument>)<pos:position pos:line="8" pos:column="33"/></argument_list></call></expr></argument>)<pos:position pos:line="8" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="35"/></expr_stmt>
    <return pos:line="9" pos:column="5">return <expr><operator pos:line="9" pos:column="12">(<pos:position pos:line="9" pos:column="13"/></operator><literal type="number" pos:line="9" pos:column="13">1<pos:position pos:line="9" pos:column="14"/></literal><operator pos:line="9" pos:column="14">)<pos:position pos:line="9" pos:column="15"/></operator></expr>;<pos:position pos:line="9" pos:column="16"/></return>
  }<pos:position pos:line="10" pos:column="4"/></block></then></if>

<comment type="block" pos:line="12" pos:column="1">/* power is in uWatts, current in mA, voltage in uVolts..   convert to
 * base unit */</comment>
<cpp:define pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">define<pos:position pos:line="14" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="14" pos:column="9">SUB_POWER<pos:position pos:line="14" pos:column="18"/></name><parameter_list pos:line="14" pos:column="18">(<parameter><type><name pos:line="14" pos:column="19">name<pos:position pos:line="14" pos:column="23"/></name></type></parameter>)<pos:position pos:line="14" pos:column="24"/></parameter_list></cpp:macro>                                                        \
  <cpp:value pos:line="15" pos:column="3">do {                                                                         \
    if (ignorelist_match(power_ignore, #name) == 0)                            \
      mic_submit_power(mic, "power", #name,                                    \
                       (gauge_t)power_use.name.prr * 0.000001);                \
  } while (0)<pos:position pos:line="19" pos:column="14"/></cpp:value></cpp:define>
<cpp:define pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">define<pos:position pos:line="20" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="20" pos:column="9">SUB_VOLTS<pos:position pos:line="20" pos:column="18"/></name><parameter_list pos:line="20" pos:column="18">(<parameter><type><name pos:line="20" pos:column="19">name<pos:position pos:line="20" pos:column="23"/></name></type></parameter>)<pos:position pos:line="20" pos:column="24"/></parameter_list></cpp:macro>                                                        \
  <cpp:value pos:line="21" pos:column="3">do {                                                                         \
    if (ignorelist_match(power_ignore, #name) == 0) {                          \
      mic_submit_power(mic, "power", #name,                                    \
                       (gauge_t)(power_use.name.pwr * 0.000001));              \
      mic_submit_power(mic, "current", #name,                                  \
                       (gauge_t)(power_use.name.cur * 0.001));                 \
      mic_submit_power(mic, "voltage", #name,                                  \
                       (gauge_t)(power_use.name.volt * 0.000001));             \
    }                                                                          \
  } while (0)<pos:position pos:line="30" pos:column="14"/></cpp:value></cpp:define>

  <expr_stmt><expr><call><name pos:line="32" pos:column="3">SUB_POWER<pos:position pos:line="32" pos:column="12"/></name><argument_list pos:line="32" pos:column="12">(<argument><expr><name pos:line="32" pos:column="13">total0<pos:position pos:line="32" pos:column="19"/></name></expr></argument>)<pos:position pos:line="32" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="21"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="33" pos:column="3">SUB_POWER<pos:position pos:line="33" pos:column="12"/></name><argument_list pos:line="33" pos:column="12">(<argument><expr><name pos:line="33" pos:column="13">total1<pos:position pos:line="33" pos:column="19"/></name></expr></argument>)<pos:position pos:line="33" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="21"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="34" pos:column="3">SUB_POWER<pos:position pos:line="34" pos:column="12"/></name><argument_list pos:line="34" pos:column="12">(<argument><expr><name pos:line="34" pos:column="13">inst<pos:position pos:line="34" pos:column="17"/></name></expr></argument>)<pos:position pos:line="34" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="19"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="35" pos:column="3">SUB_POWER<pos:position pos:line="35" pos:column="12"/></name><argument_list pos:line="35" pos:column="12">(<argument><expr><name pos:line="35" pos:column="13">imax<pos:position pos:line="35" pos:column="17"/></name></expr></argument>)<pos:position pos:line="35" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="19"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="36" pos:column="3">SUB_POWER<pos:position pos:line="36" pos:column="12"/></name><argument_list pos:line="36" pos:column="12">(<argument><expr><name pos:line="36" pos:column="13">pcie<pos:position pos:line="36" pos:column="17"/></name></expr></argument>)<pos:position pos:line="36" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="19"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="37" pos:column="3">SUB_POWER<pos:position pos:line="37" pos:column="12"/></name><argument_list pos:line="37" pos:column="12">(<argument><expr><name pos:line="37" pos:column="13">c2x3<pos:position pos:line="37" pos:column="17"/></name></expr></argument>)<pos:position pos:line="37" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="19"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="38" pos:column="3">SUB_POWER<pos:position pos:line="38" pos:column="12"/></name><argument_list pos:line="38" pos:column="12">(<argument><expr><name pos:line="38" pos:column="13">c2x4<pos:position pos:line="38" pos:column="17"/></name></expr></argument>)<pos:position pos:line="38" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="19"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="39" pos:column="3">SUB_VOLTS<pos:position pos:line="39" pos:column="12"/></name><argument_list pos:line="39" pos:column="12">(<argument><expr><name pos:line="39" pos:column="13">vccp<pos:position pos:line="39" pos:column="17"/></name></expr></argument>)<pos:position pos:line="39" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="19"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="40" pos:column="3">SUB_VOLTS<pos:position pos:line="40" pos:column="12"/></name><argument_list pos:line="40" pos:column="12">(<argument><expr><name pos:line="40" pos:column="13">vddg<pos:position pos:line="40" pos:column="17"/></name></expr></argument>)<pos:position pos:line="40" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="19"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="41" pos:column="3">SUB_VOLTS<pos:position pos:line="41" pos:column="12"/></name><argument_list pos:line="41" pos:column="12">(<argument><expr><name pos:line="41" pos:column="13">vddq<pos:position pos:line="41" pos:column="17"/></name></expr></argument>)<pos:position pos:line="41" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="19"/></expr_stmt>

  <return pos:line="43" pos:column="3">return <expr><operator pos:line="43" pos:column="10">(<pos:position pos:line="43" pos:column="11"/></operator><literal type="number" pos:line="43" pos:column="11">0<pos:position pos:line="43" pos:column="12"/></literal><operator pos:line="43" pos:column="12">)<pos:position pos:line="43" pos:column="13"/></operator></expr>;<pos:position pos:line="43" pos:column="14"/></return>
}<pos:position pos:line="44" pos:column="2"/></block></function></unit>
