<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_612_collectd-4.5.3.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">handle_listval<pos:position pos:line="1" pos:column="19"/></name> <parameter_list pos:line="1" pos:column="20">(<parameter><decl><type><name pos:line="1" pos:column="21">FILE<pos:position pos:line="1" pos:column="25"/></name> <modifier pos:line="1" pos:column="26">*<pos:position pos:line="1" pos:column="27"/></modifier></type><name pos:line="1" pos:column="27">fh<pos:position pos:line="1" pos:column="29"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="31">char<pos:position pos:line="1" pos:column="35"/></name> <modifier pos:line="1" pos:column="36">*<pos:position pos:line="1" pos:column="37"/></modifier></type><name pos:line="1" pos:column="37">buffer<pos:position pos:line="1" pos:column="43"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="44"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">char<pos:position pos:line="3" pos:column="7"/></name> <modifier pos:line="3" pos:column="8">*<pos:position pos:line="3" pos:column="9"/></modifier></type><name pos:line="3" pos:column="9">command<pos:position pos:line="3" pos:column="16"/></name></decl>;<pos:position pos:line="3" pos:column="17"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">char<pos:position pos:line="4" pos:column="7"/></name> <modifier pos:line="4" pos:column="8">*<pos:position pos:line="4" pos:column="9"/></modifier><modifier pos:line="4" pos:column="9">*<pos:position pos:line="4" pos:column="10"/></modifier></type><name pos:line="4" pos:column="10">names<pos:position pos:line="4" pos:column="15"/></name> <init pos:line="4" pos:column="16">= <expr><name pos:line="4" pos:column="18">NULL<pos:position pos:line="4" pos:column="22"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="23"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">time_t<pos:position pos:line="5" pos:column="9"/></name> <modifier pos:line="5" pos:column="10">*<pos:position pos:line="5" pos:column="11"/></modifier></type><name pos:line="5" pos:column="11">times<pos:position pos:line="5" pos:column="16"/></name> <init pos:line="5" pos:column="17">= <expr><name pos:line="5" pos:column="19">NULL<pos:position pos:line="5" pos:column="23"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="24"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">size_t<pos:position pos:line="6" pos:column="9"/></name></type> <name pos:line="6" pos:column="10">number<pos:position pos:line="6" pos:column="16"/></name> <init pos:line="6" pos:column="17">= <expr><literal type="number" pos:line="6" pos:column="19">0<pos:position pos:line="6" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">size_t<pos:position pos:line="7" pos:column="9"/></name></type> <name pos:line="7" pos:column="10">i<pos:position pos:line="7" pos:column="11"/></name></decl>;<pos:position pos:line="7" pos:column="12"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">int<pos:position pos:line="8" pos:column="6"/></name></type> <name pos:line="8" pos:column="7">status<pos:position pos:line="8" pos:column="13"/></name></decl>;<pos:position pos:line="8" pos:column="14"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="10" pos:column="3">DEBUG<pos:position pos:line="10" pos:column="8"/></name> <argument_list pos:line="10" pos:column="9">(<argument><expr><literal type="string" pos:line="10" pos:column="10">"utils_cmd_listval: handle_listval (fh = %p, buffer = %s);"<pos:position pos:line="10" pos:column="69"/></literal></expr></argument>,
      <argument><expr><operator pos:line="11" pos:column="7">(<pos:position pos:line="11" pos:column="8"/></operator><name pos:line="11" pos:column="8">void<pos:position pos:line="11" pos:column="12"/></name> <operator pos:line="11" pos:column="13">*<pos:position pos:line="11" pos:column="14"/></operator><operator pos:line="11" pos:column="14">)<pos:position pos:line="11" pos:column="15"/></operator> <name pos:line="11" pos:column="16">fh<pos:position pos:line="11" pos:column="18"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="20">buffer<pos:position pos:line="11" pos:column="26"/></name></expr></argument>)<pos:position pos:line="11" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="28"/></expr_stmt>

  <expr_stmt><expr><name pos:line="13" pos:column="3">command<pos:position pos:line="13" pos:column="10"/></name> <operator pos:line="13" pos:column="11">=<pos:position pos:line="13" pos:column="12"/></operator> <name pos:line="13" pos:column="13">NULL<pos:position pos:line="13" pos:column="17"/></name></expr>;<pos:position pos:line="13" pos:column="18"/></expr_stmt>
  <expr_stmt><expr><name pos:line="14" pos:column="3">status<pos:position pos:line="14" pos:column="9"/></name> <operator pos:line="14" pos:column="10">=<pos:position pos:line="14" pos:column="11"/></operator> <call><name pos:line="14" pos:column="12">parse_string<pos:position pos:line="14" pos:column="24"/></name> <argument_list pos:line="14" pos:column="25">(<argument><expr><operator pos:line="14" pos:column="26">&amp;<pos:position pos:line="14" pos:column="31"/></operator><name pos:line="14" pos:column="27">buffer<pos:position pos:line="14" pos:column="33"/></name></expr></argument>, <argument><expr><operator pos:line="14" pos:column="35">&amp;<pos:position pos:line="14" pos:column="40"/></operator><name pos:line="14" pos:column="36">command<pos:position pos:line="14" pos:column="43"/></name></expr></argument>)<pos:position pos:line="14" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="45"/></expr_stmt>
  <if pos:line="15" pos:column="3">if <condition pos:line="15" pos:column="6">(<expr><name pos:line="15" pos:column="7">status<pos:position pos:line="15" pos:column="13"/></name> <operator pos:line="15" pos:column="14">!=<pos:position pos:line="15" pos:column="16"/></operator> <literal type="number" pos:line="15" pos:column="17">0<pos:position pos:line="15" pos:column="18"/></literal></expr>)<pos:position pos:line="15" pos:column="19"/></condition><then pos:line="15" pos:column="19">
  <block pos:line="16" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="17" pos:column="5">print_to_socket<pos:position pos:line="17" pos:column="20"/></name> <argument_list pos:line="17" pos:column="21">(<argument><expr><name pos:line="17" pos:column="22">fh<pos:position pos:line="17" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="17" pos:column="26">"-1 Cannot parse command.\n"<pos:position pos:line="17" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="56"/></expr_stmt>
    <return pos:line="18" pos:column="5">return <expr><operator pos:line="18" pos:column="12">(<pos:position pos:line="18" pos:column="13"/></operator><operator pos:line="18" pos:column="13">-<pos:position pos:line="18" pos:column="14"/></operator><literal type="number" pos:line="18" pos:column="14">1<pos:position pos:line="18" pos:column="15"/></literal><operator pos:line="18" pos:column="15">)<pos:position pos:line="18" pos:column="16"/></operator></expr>;<pos:position pos:line="18" pos:column="17"/></return>
  }<pos:position pos:line="19" pos:column="4"/></block></then></if>
  <expr_stmt><expr><call><name pos:line="20" pos:column="3">assert<pos:position pos:line="20" pos:column="9"/></name> <argument_list pos:line="20" pos:column="10">(<argument><expr><name pos:line="20" pos:column="11">command<pos:position pos:line="20" pos:column="18"/></name> <operator pos:line="20" pos:column="19">!=<pos:position pos:line="20" pos:column="21"/></operator> <name pos:line="20" pos:column="22">NULL<pos:position pos:line="20" pos:column="26"/></name></expr></argument>)<pos:position pos:line="20" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="28"/></expr_stmt>

  <if pos:line="22" pos:column="3">if <condition pos:line="22" pos:column="6">(<expr><call><name pos:line="22" pos:column="7">strcasecmp<pos:position pos:line="22" pos:column="17"/></name> <argument_list pos:line="22" pos:column="18">(<argument><expr><literal type="string" pos:line="22" pos:column="19">"LISTVAL"<pos:position pos:line="22" pos:column="28"/></literal></expr></argument>, <argument><expr><name pos:line="22" pos:column="30">command<pos:position pos:line="22" pos:column="37"/></name></expr></argument>)<pos:position pos:line="22" pos:column="38"/></argument_list></call> <operator pos:line="22" pos:column="39">!=<pos:position pos:line="22" pos:column="41"/></operator> <literal type="number" pos:line="22" pos:column="42">0<pos:position pos:line="22" pos:column="43"/></literal></expr>)<pos:position pos:line="22" pos:column="44"/></condition><then pos:line="22" pos:column="44">
  <block pos:line="23" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="24" pos:column="5">print_to_socket<pos:position pos:line="24" pos:column="20"/></name> <argument_list pos:line="24" pos:column="21">(<argument><expr><name pos:line="24" pos:column="22">fh<pos:position pos:line="24" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="24" pos:column="26">"-1 Unexpected command: `%s'.\n"<pos:position pos:line="24" pos:column="58"/></literal></expr></argument>, <argument><expr><name pos:line="24" pos:column="60">command<pos:position pos:line="24" pos:column="67"/></name></expr></argument>)<pos:position pos:line="24" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="69"/></expr_stmt>
    <return pos:line="25" pos:column="5">return <expr><operator pos:line="25" pos:column="12">(<pos:position pos:line="25" pos:column="13"/></operator><operator pos:line="25" pos:column="13">-<pos:position pos:line="25" pos:column="14"/></operator><literal type="number" pos:line="25" pos:column="14">1<pos:position pos:line="25" pos:column="15"/></literal><operator pos:line="25" pos:column="15">)<pos:position pos:line="25" pos:column="16"/></operator></expr>;<pos:position pos:line="25" pos:column="17"/></return>
  }<pos:position pos:line="26" pos:column="4"/></block></then></if>

  <if pos:line="28" pos:column="3">if <condition pos:line="28" pos:column="6">(<expr><operator pos:line="28" pos:column="7">*<pos:position pos:line="28" pos:column="8"/></operator><name pos:line="28" pos:column="8">buffer<pos:position pos:line="28" pos:column="14"/></name> <operator pos:line="28" pos:column="15">!=<pos:position pos:line="28" pos:column="17"/></operator> <literal type="number" pos:line="28" pos:column="18">0<pos:position pos:line="28" pos:column="19"/></literal></expr>)<pos:position pos:line="28" pos:column="20"/></condition><then pos:line="28" pos:column="20">
  <block pos:line="29" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="30" pos:column="5">print_to_socket<pos:position pos:line="30" pos:column="20"/></name> <argument_list pos:line="30" pos:column="21">(<argument><expr><name pos:line="30" pos:column="22">fh<pos:position pos:line="30" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="30" pos:column="26">"-1 Garbage after end of command: %s\n"<pos:position pos:line="30" pos:column="65"/></literal></expr></argument>, <argument><expr><name pos:line="30" pos:column="67">buffer<pos:position pos:line="30" pos:column="73"/></name></expr></argument>)<pos:position pos:line="30" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="75"/></expr_stmt>
    <return pos:line="31" pos:column="5">return <expr><operator pos:line="31" pos:column="12">(<pos:position pos:line="31" pos:column="13"/></operator><operator pos:line="31" pos:column="13">-<pos:position pos:line="31" pos:column="14"/></operator><literal type="number" pos:line="31" pos:column="14">1<pos:position pos:line="31" pos:column="15"/></literal><operator pos:line="31" pos:column="15">)<pos:position pos:line="31" pos:column="16"/></operator></expr>;<pos:position pos:line="31" pos:column="17"/></return>
  }<pos:position pos:line="32" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="34" pos:column="3">status<pos:position pos:line="34" pos:column="9"/></name> <operator pos:line="34" pos:column="10">=<pos:position pos:line="34" pos:column="11"/></operator> <call><name pos:line="34" pos:column="12">uc_get_names<pos:position pos:line="34" pos:column="24"/></name> <argument_list pos:line="34" pos:column="25">(<argument><expr><operator pos:line="34" pos:column="26">&amp;<pos:position pos:line="34" pos:column="31"/></operator><name pos:line="34" pos:column="27">names<pos:position pos:line="34" pos:column="32"/></name></expr></argument>, <argument><expr><operator pos:line="34" pos:column="34">&amp;<pos:position pos:line="34" pos:column="39"/></operator><name pos:line="34" pos:column="35">times<pos:position pos:line="34" pos:column="40"/></name></expr></argument>, <argument><expr><operator pos:line="34" pos:column="42">&amp;<pos:position pos:line="34" pos:column="47"/></operator><name pos:line="34" pos:column="43">number<pos:position pos:line="34" pos:column="49"/></name></expr></argument>)<pos:position pos:line="34" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="51"/></expr_stmt>
  <if pos:line="35" pos:column="3">if <condition pos:line="35" pos:column="6">(<expr><name pos:line="35" pos:column="7">status<pos:position pos:line="35" pos:column="13"/></name> <operator pos:line="35" pos:column="14">!=<pos:position pos:line="35" pos:column="16"/></operator> <literal type="number" pos:line="35" pos:column="17">0<pos:position pos:line="35" pos:column="18"/></literal></expr>)<pos:position pos:line="35" pos:column="19"/></condition><then pos:line="35" pos:column="19">
  <block pos:line="36" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="37" pos:column="5">DEBUG<pos:position pos:line="37" pos:column="10"/></name> <argument_list pos:line="37" pos:column="11">(<argument><expr><literal type="string" pos:line="37" pos:column="12">"command listval: uc_get_names failed with status %i"<pos:position pos:line="37" pos:column="65"/></literal></expr></argument>, <argument><expr><name pos:line="37" pos:column="67">status<pos:position pos:line="37" pos:column="73"/></name></expr></argument>)<pos:position pos:line="37" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="75"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="38" pos:column="5">print_to_socket<pos:position pos:line="38" pos:column="20"/></name> <argument_list pos:line="38" pos:column="21">(<argument><expr><name pos:line="38" pos:column="22">fh<pos:position pos:line="38" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="38" pos:column="26">"-1 uc_get_names failed.\n"<pos:position pos:line="38" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="38" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="55"/></expr_stmt>
    <return pos:line="39" pos:column="5">return <expr><operator pos:line="39" pos:column="12">(<pos:position pos:line="39" pos:column="13"/></operator><operator pos:line="39" pos:column="13">-<pos:position pos:line="39" pos:column="14"/></operator><literal type="number" pos:line="39" pos:column="14">1<pos:position pos:line="39" pos:column="15"/></literal><operator pos:line="39" pos:column="15">)<pos:position pos:line="39" pos:column="16"/></operator></expr>;<pos:position pos:line="39" pos:column="17"/></return>
  }<pos:position pos:line="40" pos:column="4"/></block></then></if>

  <expr_stmt><expr><call><name pos:line="42" pos:column="3">print_to_socket<pos:position pos:line="42" pos:column="18"/></name> <argument_list pos:line="42" pos:column="19">(<argument><expr><name pos:line="42" pos:column="20">fh<pos:position pos:line="42" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="42" pos:column="24">"%i Value%s found\n"<pos:position pos:line="42" pos:column="44"/></literal></expr></argument>,
      <argument><expr><operator pos:line="43" pos:column="7">(<pos:position pos:line="43" pos:column="8"/></operator><name pos:line="43" pos:column="8">int<pos:position pos:line="43" pos:column="11"/></name><operator pos:line="43" pos:column="11">)<pos:position pos:line="43" pos:column="12"/></operator> <name pos:line="43" pos:column="13">number<pos:position pos:line="43" pos:column="19"/></name></expr></argument>, <argument><expr><ternary><condition><expr><operator pos:line="43" pos:column="21">(<pos:position pos:line="43" pos:column="22"/></operator><name pos:line="43" pos:column="22">number<pos:position pos:line="43" pos:column="28"/></name> <operator pos:line="43" pos:column="29">==<pos:position pos:line="43" pos:column="31"/></operator> <literal type="number" pos:line="43" pos:column="32">1<pos:position pos:line="43" pos:column="33"/></literal><operator pos:line="43" pos:column="33">)<pos:position pos:line="43" pos:column="34"/></operator></expr> ?<pos:position pos:line="43" pos:column="36"/></condition><then pos:line="43" pos:column="36"> <expr><literal type="string" pos:line="43" pos:column="37">""<pos:position pos:line="43" pos:column="39"/></literal></expr> <pos:position pos:line="43" pos:column="40"/></then><else pos:line="43" pos:column="40">: <expr><literal type="string" pos:line="43" pos:column="42">"s"<pos:position pos:line="43" pos:column="45"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="43" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="47"/></expr_stmt>
  <for pos:line="44" pos:column="3">for <control pos:line="44" pos:column="7">(<init><expr><name pos:line="44" pos:column="8">i<pos:position pos:line="44" pos:column="9"/></name> <operator pos:line="44" pos:column="10">=<pos:position pos:line="44" pos:column="11"/></operator> <literal type="number" pos:line="44" pos:column="12">0<pos:position pos:line="44" pos:column="13"/></literal></expr>;<pos:position pos:line="44" pos:column="14"/></init> <condition><expr><name pos:line="44" pos:column="15">i<pos:position pos:line="44" pos:column="16"/></name> <operator pos:line="44" pos:column="17">&lt;<pos:position pos:line="44" pos:column="21"/></operator> <name pos:line="44" pos:column="19">number<pos:position pos:line="44" pos:column="25"/></name></expr>;<pos:position pos:line="44" pos:column="26"/></condition> <incr><expr><name pos:line="44" pos:column="27">i<pos:position pos:line="44" pos:column="28"/></name><operator pos:line="44" pos:column="28">++<pos:position pos:line="44" pos:column="30"/></operator></expr></incr>)<pos:position pos:line="44" pos:column="31"/></control>
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="45" pos:column="5">print_to_socket<pos:position pos:line="45" pos:column="20"/></name> <argument_list pos:line="45" pos:column="21">(<argument><expr><name pos:line="45" pos:column="22">fh<pos:position pos:line="45" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="45" pos:column="26">"%u %s\n"<pos:position pos:line="45" pos:column="35"/></literal></expr></argument>, <argument><expr><operator pos:line="45" pos:column="37">(<pos:position pos:line="45" pos:column="38"/></operator><name pos:line="45" pos:column="38">unsigned<pos:position pos:line="45" pos:column="46"/></name> <name pos:line="45" pos:column="47">int<pos:position pos:line="45" pos:column="50"/></name><operator pos:line="45" pos:column="50">)<pos:position pos:line="45" pos:column="51"/></operator> <name><name pos:line="45" pos:column="52">times<pos:position pos:line="45" pos:column="57"/></name><index pos:line="45" pos:column="57">[<expr><name pos:line="45" pos:column="58">i<pos:position pos:line="45" pos:column="59"/></name></expr>]<pos:position pos:line="45" pos:column="60"/></index></name></expr></argument>, <argument><expr><name><name pos:line="45" pos:column="62">names<pos:position pos:line="45" pos:column="67"/></name><index pos:line="45" pos:column="67">[<expr><name pos:line="45" pos:column="68">i<pos:position pos:line="45" pos:column="69"/></name></expr>]<pos:position pos:line="45" pos:column="70"/></index></name></expr></argument>)<pos:position pos:line="45" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="72"/></expr_stmt></block></for>

  <return pos:line="47" pos:column="3">return <expr><operator pos:line="47" pos:column="10">(<pos:position pos:line="47" pos:column="11"/></operator><literal type="number" pos:line="47" pos:column="11">0<pos:position pos:line="47" pos:column="12"/></literal><operator pos:line="47" pos:column="12">)<pos:position pos:line="47" pos:column="13"/></operator></expr>;<pos:position pos:line="47" pos:column="14"/></return>
}<pos:position pos:line="48" pos:column="2"/></block></function></unit>
