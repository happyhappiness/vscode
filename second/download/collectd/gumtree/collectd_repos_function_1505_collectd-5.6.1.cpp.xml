<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1505_collectd-5.6.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">format_json_meta<pos:position pos:line="1" pos:column="28"/></name> <parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name pos:line="1" pos:column="30">yajl_gen<pos:position pos:line="1" pos:column="38"/></name></type> <name pos:line="1" pos:column="39">g<pos:position pos:line="1" pos:column="40"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="42">notification_meta_t<pos:position pos:line="1" pos:column="61"/></name> <modifier pos:line="1" pos:column="62">*<pos:position pos:line="1" pos:column="63"/></modifier></type><name pos:line="1" pos:column="63">meta<pos:position pos:line="1" pos:column="67"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="68"/></parameter_list> <comment type="block" pos:line="1" pos:column="69">/* {{{ */</comment>
<block pos:line="2" pos:column="1">{
  <if pos:line="3" pos:column="3">if <condition pos:line="3" pos:column="6">(<expr><name pos:line="3" pos:column="7">meta<pos:position pos:line="3" pos:column="11"/></name> <operator pos:line="3" pos:column="12">==<pos:position pos:line="3" pos:column="14"/></operator> <name pos:line="3" pos:column="15">NULL<pos:position pos:line="3" pos:column="19"/></name></expr>)<pos:position pos:line="3" pos:column="20"/></condition><then pos:line="3" pos:column="20">
    <block type="pseudo"><return pos:line="4" pos:column="5">return <expr><literal type="number" pos:line="4" pos:column="12">0<pos:position pos:line="4" pos:column="13"/></literal></expr>;<pos:position pos:line="4" pos:column="14"/></return></block></then></if>

  <expr_stmt><expr><call><name pos:line="6" pos:column="3">JSON_ADD<pos:position pos:line="6" pos:column="11"/></name> <argument_list pos:line="6" pos:column="12">(<argument><expr><name pos:line="6" pos:column="13">g<pos:position pos:line="6" pos:column="14"/></name></expr></argument>, <argument><expr><name><name pos:line="6" pos:column="16">meta<pos:position pos:line="6" pos:column="20"/></name><operator pos:line="6" pos:column="20">-&gt;<pos:position pos:line="6" pos:column="25"/></operator><name pos:line="6" pos:column="22">name<pos:position pos:line="6" pos:column="26"/></name></name></expr></argument>)<pos:position pos:line="6" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="28"/></expr_stmt>
  <switch pos:line="7" pos:column="3">switch <condition pos:line="7" pos:column="10">(<expr><name><name pos:line="7" pos:column="11">meta<pos:position pos:line="7" pos:column="15"/></name><operator pos:line="7" pos:column="15">-&gt;<pos:position pos:line="7" pos:column="20"/></operator><name pos:line="7" pos:column="17">type<pos:position pos:line="7" pos:column="21"/></name></name></expr>)<pos:position pos:line="7" pos:column="22"/></condition>
  <block pos:line="8" pos:column="3">{
    <case pos:line="9" pos:column="5">case <expr><name pos:line="9" pos:column="10">NM_TYPE_STRING<pos:position pos:line="9" pos:column="24"/></name></expr>:<pos:position pos:line="9" pos:column="25"/></case>
      <expr_stmt><expr><call><name pos:line="10" pos:column="7">JSON_ADD<pos:position pos:line="10" pos:column="15"/></name> <argument_list pos:line="10" pos:column="16">(<argument><expr><name pos:line="10" pos:column="17">g<pos:position pos:line="10" pos:column="18"/></name></expr></argument>, <argument><expr><name><name pos:line="10" pos:column="20">meta<pos:position pos:line="10" pos:column="24"/></name><operator pos:line="10" pos:column="24">-&gt;<pos:position pos:line="10" pos:column="29"/></operator><name pos:line="10" pos:column="26">nm_value<pos:position pos:line="10" pos:column="34"/></name><operator pos:line="10" pos:column="34">.<pos:position pos:line="10" pos:column="35"/></operator><name pos:line="10" pos:column="35">nm_string<pos:position pos:line="10" pos:column="44"/></name></name></expr></argument>)<pos:position pos:line="10" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="46"/></expr_stmt>
      <break pos:line="11" pos:column="7">break;<pos:position pos:line="11" pos:column="13"/></break>
    <case pos:line="12" pos:column="5">case <expr><name pos:line="12" pos:column="10">NM_TYPE_SIGNED_INT<pos:position pos:line="12" pos:column="28"/></name></expr>:<pos:position pos:line="12" pos:column="29"/></case>
      <expr_stmt><expr><call><name pos:line="13" pos:column="7">JSON_ADDF<pos:position pos:line="13" pos:column="16"/></name> <argument_list pos:line="13" pos:column="17">(<argument><expr><name pos:line="13" pos:column="18">g<pos:position pos:line="13" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="13" pos:column="21">"%"<pos:position pos:line="13" pos:column="24"/></literal><name pos:line="13" pos:column="24">PRIi64<pos:position pos:line="13" pos:column="30"/></name></expr></argument>, <argument><expr><name><name pos:line="13" pos:column="32">meta<pos:position pos:line="13" pos:column="36"/></name><operator pos:line="13" pos:column="36">-&gt;<pos:position pos:line="13" pos:column="41"/></operator><name pos:line="13" pos:column="38">nm_value<pos:position pos:line="13" pos:column="46"/></name><operator pos:line="13" pos:column="46">.<pos:position pos:line="13" pos:column="47"/></operator><name pos:line="13" pos:column="47">nm_signed_int<pos:position pos:line="13" pos:column="60"/></name></name></expr></argument>)<pos:position pos:line="13" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="62"/></expr_stmt>
      <break pos:line="14" pos:column="7">break;<pos:position pos:line="14" pos:column="13"/></break>
    <case pos:line="15" pos:column="5">case <expr><name pos:line="15" pos:column="10">NM_TYPE_UNSIGNED_INT<pos:position pos:line="15" pos:column="30"/></name></expr>:<pos:position pos:line="15" pos:column="31"/></case>
      <expr_stmt><expr><call><name pos:line="16" pos:column="7">JSON_ADDF<pos:position pos:line="16" pos:column="16"/></name> <argument_list pos:line="16" pos:column="17">(<argument><expr><name pos:line="16" pos:column="18">g<pos:position pos:line="16" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="16" pos:column="21">"%"<pos:position pos:line="16" pos:column="24"/></literal><name pos:line="16" pos:column="24">PRIu64<pos:position pos:line="16" pos:column="30"/></name></expr></argument>, <argument><expr><name><name pos:line="16" pos:column="32">meta<pos:position pos:line="16" pos:column="36"/></name><operator pos:line="16" pos:column="36">-&gt;<pos:position pos:line="16" pos:column="41"/></operator><name pos:line="16" pos:column="38">nm_value<pos:position pos:line="16" pos:column="46"/></name><operator pos:line="16" pos:column="46">.<pos:position pos:line="16" pos:column="47"/></operator><name pos:line="16" pos:column="47">nm_unsigned_int<pos:position pos:line="16" pos:column="62"/></name></name></expr></argument>)<pos:position pos:line="16" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="64"/></expr_stmt>
      <break pos:line="17" pos:column="7">break;<pos:position pos:line="17" pos:column="13"/></break>
    <case pos:line="18" pos:column="5">case <expr><name pos:line="18" pos:column="10">NM_TYPE_DOUBLE<pos:position pos:line="18" pos:column="24"/></name></expr>:<pos:position pos:line="18" pos:column="25"/></case>
      <expr_stmt><expr><call><name pos:line="19" pos:column="7">JSON_ADDF<pos:position pos:line="19" pos:column="16"/></name> <argument_list pos:line="19" pos:column="17">(<argument><expr><name pos:line="19" pos:column="18">g<pos:position pos:line="19" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="21">JSON_GAUGE_FORMAT<pos:position pos:line="19" pos:column="38"/></name></expr></argument>, <argument><expr><name><name pos:line="19" pos:column="40">meta<pos:position pos:line="19" pos:column="44"/></name><operator pos:line="19" pos:column="44">-&gt;<pos:position pos:line="19" pos:column="49"/></operator><name pos:line="19" pos:column="46">nm_value<pos:position pos:line="19" pos:column="54"/></name><operator pos:line="19" pos:column="54">.<pos:position pos:line="19" pos:column="55"/></operator><name pos:line="19" pos:column="55">nm_double<pos:position pos:line="19" pos:column="64"/></name></name></expr></argument>)<pos:position pos:line="19" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="66"/></expr_stmt>
      <break pos:line="20" pos:column="7">break;<pos:position pos:line="20" pos:column="13"/></break>
    <case pos:line="21" pos:column="5">case <expr><name pos:line="21" pos:column="10">NM_TYPE_BOOLEAN<pos:position pos:line="21" pos:column="25"/></name></expr>:<pos:position pos:line="21" pos:column="26"/></case>
      <expr_stmt><expr><call><name pos:line="22" pos:column="7">JSON_ADD<pos:position pos:line="22" pos:column="15"/></name> <argument_list pos:line="22" pos:column="16">(<argument><expr><name pos:line="22" pos:column="17">g<pos:position pos:line="22" pos:column="18"/></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name pos:line="22" pos:column="20">meta<pos:position pos:line="22" pos:column="24"/></name><operator pos:line="22" pos:column="24">-&gt;<pos:position pos:line="22" pos:column="29"/></operator><name pos:line="22" pos:column="26">nm_value<pos:position pos:line="22" pos:column="34"/></name><operator pos:line="22" pos:column="34">.<pos:position pos:line="22" pos:column="35"/></operator><name pos:line="22" pos:column="35">nm_boolean<pos:position pos:line="22" pos:column="45"/></name></name></expr> ?<pos:position pos:line="22" pos:column="47"/></condition><then pos:line="22" pos:column="47"> <expr><literal type="string" pos:line="22" pos:column="48">"true"<pos:position pos:line="22" pos:column="54"/></literal></expr> <pos:position pos:line="22" pos:column="55"/></then><else pos:line="22" pos:column="55">: <expr><literal type="string" pos:line="22" pos:column="57">"false"<pos:position pos:line="22" pos:column="64"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="22" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="66"/></expr_stmt>
      <break pos:line="23" pos:column="7">break;<pos:position pos:line="23" pos:column="13"/></break>
    <default pos:line="24" pos:column="5">default:<pos:position pos:line="24" pos:column="13"/></default>
      <expr_stmt><expr><call><name pos:line="25" pos:column="7">ERROR<pos:position pos:line="25" pos:column="12"/></name> <argument_list pos:line="25" pos:column="13">(<argument><expr><literal type="string" pos:line="25" pos:column="14">"format_json_meta: unknown meta data type %d (name \"%s\")"<pos:position pos:line="25" pos:column="73"/></literal></expr></argument>, <argument><expr><name><name pos:line="25" pos:column="75">meta<pos:position pos:line="25" pos:column="79"/></name><operator pos:line="25" pos:column="79">-&gt;<pos:position pos:line="25" pos:column="84"/></operator><name pos:line="25" pos:column="81">type<pos:position pos:line="25" pos:column="85"/></name></name></expr></argument>, <argument><expr><name><name pos:line="25" pos:column="87">meta<pos:position pos:line="25" pos:column="91"/></name><operator pos:line="25" pos:column="91">-&gt;<pos:position pos:line="25" pos:column="96"/></operator><name pos:line="25" pos:column="93">name<pos:position pos:line="25" pos:column="97"/></name></name></expr></argument>)<pos:position pos:line="25" pos:column="98"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="99"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="26" pos:column="7">yajl_gen_null<pos:position pos:line="26" pos:column="20"/></name> <argument_list pos:line="26" pos:column="21">(<argument><expr><name pos:line="26" pos:column="22">g<pos:position pos:line="26" pos:column="23"/></name></expr></argument>)<pos:position pos:line="26" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="25"/></expr_stmt>
  }<pos:position pos:line="27" pos:column="4"/></block></switch>

  <return pos:line="29" pos:column="3">return <expr><call><name pos:line="29" pos:column="10">format_json_meta<pos:position pos:line="29" pos:column="26"/></name> <argument_list pos:line="29" pos:column="27">(<argument><expr><name pos:line="29" pos:column="28">g<pos:position pos:line="29" pos:column="29"/></name></expr></argument>, <argument><expr><name><name pos:line="29" pos:column="31">meta<pos:position pos:line="29" pos:column="35"/></name><operator pos:line="29" pos:column="35">-&gt;<pos:position pos:line="29" pos:column="40"/></operator><name pos:line="29" pos:column="37">next<pos:position pos:line="29" pos:column="41"/></name></name></expr></argument>)<pos:position pos:line="29" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="43"/></return>
}<pos:position pos:line="30" pos:column="2"/></block></function></unit>
