<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_299_collectd-5.0.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">_Bool<pos:position pos:line="1" pos:column="13"/></name></type> <name pos:line="1" pos:column="14">camqp_is_error<pos:position pos:line="1" pos:column="28"/></name> <parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name pos:line="1" pos:column="30">camqp_config_t<pos:position pos:line="1" pos:column="44"/></name> <modifier pos:line="1" pos:column="45">*<pos:position pos:line="1" pos:column="46"/></modifier></type><name pos:line="1" pos:column="46">conf<pos:position pos:line="1" pos:column="50"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="51"/></parameter_list> <comment type="block" pos:line="1" pos:column="52">/* {{{ */</comment>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">amqp_rpc_reply_t<pos:position pos:line="3" pos:column="21"/></name></type> <name pos:line="3" pos:column="22">r<pos:position pos:line="3" pos:column="23"/></name></decl>;<pos:position pos:line="3" pos:column="24"/></decl_stmt>

    <expr_stmt><expr><name pos:line="5" pos:column="5">r<pos:position pos:line="5" pos:column="6"/></name> <operator pos:line="5" pos:column="7">=<pos:position pos:line="5" pos:column="8"/></operator> <call><name pos:line="5" pos:column="9">amqp_get_rpc_reply<pos:position pos:line="5" pos:column="27"/></name> <argument_list pos:line="5" pos:column="28">(<argument><expr><name><name pos:line="5" pos:column="29">conf<pos:position pos:line="5" pos:column="33"/></name><operator pos:line="5" pos:column="33">-&gt;<pos:position pos:line="5" pos:column="38"/></operator><name pos:line="5" pos:column="35">connection<pos:position pos:line="5" pos:column="45"/></name></name></expr></argument>)<pos:position pos:line="5" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="47"/></expr_stmt>
    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><name><name pos:line="6" pos:column="9">r<pos:position pos:line="6" pos:column="10"/></name><operator pos:line="6" pos:column="10">.<pos:position pos:line="6" pos:column="11"/></operator><name pos:line="6" pos:column="11">reply_type<pos:position pos:line="6" pos:column="21"/></name></name> <operator pos:line="6" pos:column="22">==<pos:position pos:line="6" pos:column="24"/></operator> <name pos:line="6" pos:column="25">AMQP_RESPONSE_NORMAL<pos:position pos:line="6" pos:column="45"/></name></expr>)<pos:position pos:line="6" pos:column="46"/></condition><then pos:line="6" pos:column="46">
        <block type="pseudo"><return pos:line="7" pos:column="9">return <expr><operator pos:line="7" pos:column="16">(<pos:position pos:line="7" pos:column="17"/></operator><literal type="number" pos:line="7" pos:column="17">0<pos:position pos:line="7" pos:column="18"/></literal><operator pos:line="7" pos:column="18">)<pos:position pos:line="7" pos:column="19"/></operator></expr>;<pos:position pos:line="7" pos:column="20"/></return></block></then></if>

    <return pos:line="9" pos:column="5">return <expr><operator pos:line="9" pos:column="12">(<pos:position pos:line="9" pos:column="13"/></operator><literal type="number" pos:line="9" pos:column="13">1<pos:position pos:line="9" pos:column="14"/></literal><operator pos:line="9" pos:column="14">)<pos:position pos:line="9" pos:column="15"/></operator></expr>;<pos:position pos:line="9" pos:column="16"/></return>
}<pos:position pos:line="10" pos:column="2"/></block></function></unit>
