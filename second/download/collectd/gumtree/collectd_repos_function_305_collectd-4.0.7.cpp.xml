<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_305_collectd-4.0.7.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">pplugin_unregister_data_set<pos:position pos:line="1" pos:column="39"/></name> <parameter_list pos:line="1" pos:column="40">(<parameter><decl><type><name pos:line="1" pos:column="41">char<pos:position pos:line="1" pos:column="45"/></name> <modifier pos:line="1" pos:column="46">*<pos:position pos:line="1" pos:column="47"/></modifier></type><name pos:line="1" pos:column="47">name<pos:position pos:line="1" pos:column="51"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="52"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">SV<pos:position pos:line="3" pos:column="11"/></name> <modifier pos:line="3" pos:column="12">*<pos:position pos:line="3" pos:column="13"/></modifier></type><name pos:line="3" pos:column="13">tmp<pos:position pos:line="3" pos:column="16"/></name> <init pos:line="3" pos:column="17">= <expr><name pos:line="3" pos:column="19">NULL<pos:position pos:line="3" pos:column="23"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="24"/></decl_stmt>

	<if pos:line="5" pos:column="9">if <condition pos:line="5" pos:column="12">(<expr><name pos:line="5" pos:column="13">NULL<pos:position pos:line="5" pos:column="17"/></name> <operator pos:line="5" pos:column="18">==<pos:position pos:line="5" pos:column="20"/></operator> <name pos:line="5" pos:column="21">name<pos:position pos:line="5" pos:column="25"/></name></expr>)<pos:position pos:line="5" pos:column="26"/></condition><then pos:line="5" pos:column="26">
		<block type="pseudo"><return pos:line="6" pos:column="17">return <expr><literal type="number" pos:line="6" pos:column="24">0<pos:position pos:line="6" pos:column="25"/></literal></expr>;<pos:position pos:line="6" pos:column="26"/></return></block></then></if>

	<comment type="block" pos:line="8" pos:column="9">/* freeing the allocated memory of the element itself (ds_types_t *)
	 * causes a segfault during perl_destruct () thus I assume perl somehow
	 * takes care of this... */</comment>

	<expr_stmt><expr><name pos:line="12" pos:column="9">tmp<pos:position pos:line="12" pos:column="12"/></name> <operator pos:line="12" pos:column="13">=<pos:position pos:line="12" pos:column="14"/></operator> <call><name pos:line="12" pos:column="15">Perl_hv_delete<pos:position pos:line="12" pos:column="29"/></name> <argument_list pos:line="12" pos:column="30">(<argument><expr><name pos:line="12" pos:column="31">perl<pos:position pos:line="12" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="37">data_sets<pos:position pos:line="12" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="48">name<pos:position pos:line="12" pos:column="52"/></name></expr></argument>, <argument><expr><call><name pos:line="12" pos:column="54">strlen<pos:position pos:line="12" pos:column="60"/></name> <argument_list pos:line="12" pos:column="61">(<argument><expr><name pos:line="12" pos:column="62">name<pos:position pos:line="12" pos:column="66"/></name></expr></argument>)<pos:position pos:line="12" pos:column="67"/></argument_list></call></expr></argument>, <argument><expr><literal type="number" pos:line="12" pos:column="69">0<pos:position pos:line="12" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="72"/></expr_stmt>
	<if pos:line="13" pos:column="9">if <condition pos:line="13" pos:column="12">(<expr><name pos:line="13" pos:column="13">NULL<pos:position pos:line="13" pos:column="17"/></name> <operator pos:line="13" pos:column="18">!=<pos:position pos:line="13" pos:column="20"/></operator> <name pos:line="13" pos:column="21">tmp<pos:position pos:line="13" pos:column="24"/></name></expr>)<pos:position pos:line="13" pos:column="25"/></condition><then pos:line="13" pos:column="25"> <block pos:line="13" pos:column="26">{
		<decl_stmt><decl><type><name pos:line="14" pos:column="17">ds_types_t<pos:position pos:line="14" pos:column="27"/></name> <modifier pos:line="14" pos:column="28">*<pos:position pos:line="14" pos:column="29"/></modifier></type><name pos:line="14" pos:column="29">ds<pos:position pos:line="14" pos:column="31"/></name> <init pos:line="14" pos:column="32">= <expr><operator pos:line="14" pos:column="34">(<pos:position pos:line="14" pos:column="35"/></operator><name pos:line="14" pos:column="35">ds_types_t<pos:position pos:line="14" pos:column="45"/></name> <operator pos:line="14" pos:column="46">*<pos:position pos:line="14" pos:column="47"/></operator><operator pos:line="14" pos:column="47">)<pos:position pos:line="14" pos:column="48"/></operator><call><name pos:line="14" pos:column="48">SvIV<pos:position pos:line="14" pos:column="52"/></name> <argument_list pos:line="14" pos:column="53">(<argument><expr><operator pos:line="14" pos:column="54">(<pos:position pos:line="14" pos:column="55"/></operator><name pos:line="14" pos:column="55">SV<pos:position pos:line="14" pos:column="57"/></name> <operator pos:line="14" pos:column="58">*<pos:position pos:line="14" pos:column="59"/></operator><operator pos:line="14" pos:column="59">)<pos:position pos:line="14" pos:column="60"/></operator><call><name pos:line="14" pos:column="60">SvRV<pos:position pos:line="14" pos:column="64"/></name> <argument_list pos:line="14" pos:column="65">(<argument><expr><name pos:line="14" pos:column="66">tmp<pos:position pos:line="14" pos:column="69"/></name></expr></argument>)<pos:position pos:line="14" pos:column="70"/></argument_list></call></expr></argument>)<pos:position pos:line="14" pos:column="71"/></argument_list></call></expr></init></decl>;<pos:position pos:line="14" pos:column="72"/></decl_stmt>
		<expr_stmt><expr><call><name pos:line="15" pos:column="17">sfree<pos:position pos:line="15" pos:column="22"/></name> <argument_list pos:line="15" pos:column="23">(<argument><expr><name><name pos:line="15" pos:column="24">ds<pos:position pos:line="15" pos:column="26"/></name><operator pos:line="15" pos:column="26">-&gt;<pos:position pos:line="15" pos:column="31"/></operator><name pos:line="15" pos:column="28">values<pos:position pos:line="15" pos:column="34"/></name></name></expr></argument>)<pos:position pos:line="15" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="36"/></expr_stmt>
	}<pos:position pos:line="16" pos:column="10"/></block></then></if>
	<return pos:line="17" pos:column="9">return <expr><call><name pos:line="17" pos:column="16">plugin_unregister_data_set<pos:position pos:line="17" pos:column="42"/></name> <argument_list pos:line="17" pos:column="43">(<argument><expr><name pos:line="17" pos:column="44">name<pos:position pos:line="17" pos:column="48"/></name></expr></argument>)<pos:position pos:line="17" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="50"/></return>
}<pos:position pos:line="18" pos:column="2"/></block></function></unit>
