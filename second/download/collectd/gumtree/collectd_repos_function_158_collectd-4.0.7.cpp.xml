<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_158_collectd-4.0.7.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">net_recv<pos:position pos:line="1" pos:column="20"/></name> <parameter_list pos:line="1" pos:column="21">(<parameter><decl><type><name pos:line="1" pos:column="22">int<pos:position pos:line="1" pos:column="25"/></name> <modifier pos:line="1" pos:column="26">*<pos:position pos:line="1" pos:column="27"/></modifier></type><name pos:line="1" pos:column="27">sockfd<pos:position pos:line="1" pos:column="33"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="35">char<pos:position pos:line="1" pos:column="39"/></name> <modifier pos:line="1" pos:column="40">*<pos:position pos:line="1" pos:column="41"/></modifier></type><name pos:line="1" pos:column="41">buf<pos:position pos:line="1" pos:column="44"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="46">int<pos:position pos:line="1" pos:column="49"/></name></type> <name pos:line="1" pos:column="50">buflen<pos:position pos:line="1" pos:column="56"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="57"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">uint16_t<pos:position pos:line="3" pos:column="17"/></name></type> <name pos:line="3" pos:column="18">packet_size<pos:position pos:line="3" pos:column="29"/></name></decl>;<pos:position pos:line="3" pos:column="30"/></decl_stmt>

	<comment type="block" pos:line="5" pos:column="9">/* get data size -- in short */</comment>
	<if pos:line="6" pos:column="9">if <condition pos:line="6" pos:column="12">(<expr><call><name pos:line="6" pos:column="13">sread<pos:position pos:line="6" pos:column="18"/></name> <argument_list pos:line="6" pos:column="19">(<argument><expr><operator pos:line="6" pos:column="20">*<pos:position pos:line="6" pos:column="21"/></operator><name pos:line="6" pos:column="21">sockfd<pos:position pos:line="6" pos:column="27"/></name></expr></argument>, <argument><expr><operator pos:line="6" pos:column="29">(<pos:position pos:line="6" pos:column="30"/></operator><name pos:line="6" pos:column="30">void<pos:position pos:line="6" pos:column="34"/></name> <operator pos:line="6" pos:column="35">*<pos:position pos:line="6" pos:column="36"/></operator><operator pos:line="6" pos:column="36">)<pos:position pos:line="6" pos:column="37"/></operator> <operator pos:line="6" pos:column="38">&amp;<pos:position pos:line="6" pos:column="43"/></operator><name pos:line="6" pos:column="39">packet_size<pos:position pos:line="6" pos:column="50"/></name></expr></argument>, <argument><expr><sizeof pos:line="6" pos:column="52">sizeof <argument_list pos:line="6" pos:column="59">(<argument><expr><name pos:line="6" pos:column="60">packet_size<pos:position pos:line="6" pos:column="71"/></name></expr></argument>)<pos:position pos:line="6" pos:column="72"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="6" pos:column="73"/></argument_list></call> <operator pos:line="6" pos:column="74">!=<pos:position pos:line="6" pos:column="76"/></operator> <literal type="number" pos:line="6" pos:column="77">0<pos:position pos:line="6" pos:column="78"/></literal></expr>)<pos:position pos:line="6" pos:column="79"/></condition><then pos:line="6" pos:column="79">
	<block pos:line="7" pos:column="9">{
		<expr_stmt><expr><operator pos:line="8" pos:column="17">*<pos:position pos:line="8" pos:column="18"/></operator><name pos:line="8" pos:column="18">sockfd<pos:position pos:line="8" pos:column="24"/></name> <operator pos:line="8" pos:column="25">=<pos:position pos:line="8" pos:column="26"/></operator> <operator pos:line="8" pos:column="27">-<pos:position pos:line="8" pos:column="28"/></operator><literal type="number" pos:line="8" pos:column="28">1<pos:position pos:line="8" pos:column="29"/></literal></expr>;<pos:position pos:line="8" pos:column="30"/></expr_stmt>
		<return pos:line="9" pos:column="17">return <expr><operator pos:line="9" pos:column="24">(<pos:position pos:line="9" pos:column="25"/></operator><operator pos:line="9" pos:column="25">-<pos:position pos:line="9" pos:column="26"/></operator><literal type="number" pos:line="9" pos:column="26">1<pos:position pos:line="9" pos:column="27"/></literal><operator pos:line="9" pos:column="27">)<pos:position pos:line="9" pos:column="28"/></operator></expr>;<pos:position pos:line="9" pos:column="29"/></return>
	}<pos:position pos:line="10" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="12" pos:column="9">packet_size<pos:position pos:line="12" pos:column="20"/></name> <operator pos:line="12" pos:column="21">=<pos:position pos:line="12" pos:column="22"/></operator> <call><name pos:line="12" pos:column="23">ntohs<pos:position pos:line="12" pos:column="28"/></name> <argument_list pos:line="12" pos:column="29">(<argument><expr><name pos:line="12" pos:column="30">packet_size<pos:position pos:line="12" pos:column="41"/></name></expr></argument>)<pos:position pos:line="12" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="43"/></expr_stmt>
	<if pos:line="13" pos:column="9">if <condition pos:line="13" pos:column="12">(<expr><name pos:line="13" pos:column="13">packet_size<pos:position pos:line="13" pos:column="24"/></name> <operator pos:line="13" pos:column="25">&gt;<pos:position pos:line="13" pos:column="29"/></operator> <name pos:line="13" pos:column="27">buflen<pos:position pos:line="13" pos:column="33"/></name></expr>)<pos:position pos:line="13" pos:column="34"/></condition><then pos:line="13" pos:column="34">
	<block pos:line="14" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="15" pos:column="17">DEBUG<pos:position pos:line="15" pos:column="22"/></name> <argument_list pos:line="15" pos:column="23">(<argument><expr><literal type="string" pos:line="15" pos:column="24">"record length too large"<pos:position pos:line="15" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="51"/></expr_stmt>
		<return pos:line="16" pos:column="17">return <expr><operator pos:line="16" pos:column="24">(<pos:position pos:line="16" pos:column="25"/></operator><operator pos:line="16" pos:column="25">-<pos:position pos:line="16" pos:column="26"/></operator><literal type="number" pos:line="16" pos:column="26">2<pos:position pos:line="16" pos:column="27"/></literal><operator pos:line="16" pos:column="27">)<pos:position pos:line="16" pos:column="28"/></operator></expr>;<pos:position pos:line="16" pos:column="29"/></return>
	}<pos:position pos:line="17" pos:column="10"/></block></then></if>

	<if pos:line="19" pos:column="9">if <condition pos:line="19" pos:column="12">(<expr><name pos:line="19" pos:column="13">packet_size<pos:position pos:line="19" pos:column="24"/></name> <operator pos:line="19" pos:column="25">==<pos:position pos:line="19" pos:column="27"/></operator> <literal type="number" pos:line="19" pos:column="28">0<pos:position pos:line="19" pos:column="29"/></literal></expr>)<pos:position pos:line="19" pos:column="30"/></condition><then pos:line="19" pos:column="30">
		<block type="pseudo"><return pos:line="20" pos:column="17">return <expr><operator pos:line="20" pos:column="24">(<pos:position pos:line="20" pos:column="25"/></operator><literal type="number" pos:line="20" pos:column="25">0<pos:position pos:line="20" pos:column="26"/></literal><operator pos:line="20" pos:column="26">)<pos:position pos:line="20" pos:column="27"/></operator></expr>;<pos:position pos:line="20" pos:column="28"/></return></block></then></if>

	<comment type="block" pos:line="22" pos:column="9">/* now read the actual data */</comment>
	<if pos:line="23" pos:column="9">if <condition pos:line="23" pos:column="12">(<expr><call><name pos:line="23" pos:column="13">sread<pos:position pos:line="23" pos:column="18"/></name> <argument_list pos:line="23" pos:column="19">(<argument><expr><operator pos:line="23" pos:column="20">*<pos:position pos:line="23" pos:column="21"/></operator><name pos:line="23" pos:column="21">sockfd<pos:position pos:line="23" pos:column="27"/></name></expr></argument>, <argument><expr><operator pos:line="23" pos:column="29">(<pos:position pos:line="23" pos:column="30"/></operator><name pos:line="23" pos:column="30">void<pos:position pos:line="23" pos:column="34"/></name> <operator pos:line="23" pos:column="35">*<pos:position pos:line="23" pos:column="36"/></operator><operator pos:line="23" pos:column="36">)<pos:position pos:line="23" pos:column="37"/></operator> <name pos:line="23" pos:column="38">buf<pos:position pos:line="23" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="43">packet_size<pos:position pos:line="23" pos:column="54"/></name></expr></argument>)<pos:position pos:line="23" pos:column="55"/></argument_list></call> <operator pos:line="23" pos:column="56">!=<pos:position pos:line="23" pos:column="58"/></operator> <literal type="number" pos:line="23" pos:column="59">0<pos:position pos:line="23" pos:column="60"/></literal></expr>)<pos:position pos:line="23" pos:column="61"/></condition><then pos:line="23" pos:column="61">
	<block pos:line="24" pos:column="9">{
		<expr_stmt><expr><operator pos:line="25" pos:column="17">*<pos:position pos:line="25" pos:column="18"/></operator><name pos:line="25" pos:column="18">sockfd<pos:position pos:line="25" pos:column="24"/></name> <operator pos:line="25" pos:column="25">=<pos:position pos:line="25" pos:column="26"/></operator> <operator pos:line="25" pos:column="27">-<pos:position pos:line="25" pos:column="28"/></operator><literal type="number" pos:line="25" pos:column="28">1<pos:position pos:line="25" pos:column="29"/></literal></expr>;<pos:position pos:line="25" pos:column="30"/></expr_stmt>
		<return pos:line="26" pos:column="17">return <expr><operator pos:line="26" pos:column="24">(<pos:position pos:line="26" pos:column="25"/></operator><operator pos:line="26" pos:column="25">-<pos:position pos:line="26" pos:column="26"/></operator><literal type="number" pos:line="26" pos:column="26">1<pos:position pos:line="26" pos:column="27"/></literal><operator pos:line="26" pos:column="27">)<pos:position pos:line="26" pos:column="28"/></operator></expr>;<pos:position pos:line="26" pos:column="29"/></return>
	}<pos:position pos:line="27" pos:column="10"/></block></then></if>

	<return pos:line="29" pos:column="9">return <expr><operator pos:line="29" pos:column="16">(<pos:position pos:line="29" pos:column="17"/></operator><operator pos:line="29" pos:column="17">(<pos:position pos:line="29" pos:column="18"/></operator><name pos:line="29" pos:column="18">int<pos:position pos:line="29" pos:column="21"/></name><operator pos:line="29" pos:column="21">)<pos:position pos:line="29" pos:column="22"/></operator> <name pos:line="29" pos:column="23">packet_size<pos:position pos:line="29" pos:column="34"/></name><operator pos:line="29" pos:column="34">)<pos:position pos:line="29" pos:column="35"/></operator></expr>;<pos:position pos:line="29" pos:column="36"/></return>
}<pos:position pos:line="30" pos:column="2"/></block></function></unit>
