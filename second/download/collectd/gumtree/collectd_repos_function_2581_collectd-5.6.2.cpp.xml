<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_2581_collectd-5.6.2.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">plugin_load_file<pos:position pos:line="1" pos:column="28"/></name><parameter_list pos:line="1" pos:column="28">(<parameter><decl><type><name pos:line="1" pos:column="29">char<pos:position pos:line="1" pos:column="33"/></name> <modifier pos:line="1" pos:column="34">*<pos:position pos:line="1" pos:column="35"/></modifier></type><name pos:line="1" pos:column="35">file<pos:position pos:line="1" pos:column="39"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="41">uint32_t<pos:position pos:line="1" pos:column="49"/></name></type> <name pos:line="1" pos:column="50">flags<pos:position pos:line="1" pos:column="55"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="56"/></parameter_list> <block pos:line="1" pos:column="57">{
  <decl_stmt><decl><type><name pos:line="2" pos:column="3">lt_dlhandle<pos:position pos:line="2" pos:column="14"/></name></type> <name pos:line="2" pos:column="15">dlh<pos:position pos:line="2" pos:column="18"/></name></decl>;<pos:position pos:line="2" pos:column="19"/></decl_stmt>
  <function_decl><type><name pos:line="3" pos:column="3">void<pos:position pos:line="3" pos:column="7"/></name></type> (<modifier pos:line="3" pos:column="9">*<pos:position pos:line="3" pos:column="10"/></modifier><name pos:line="3" pos:column="10">reg_handle<pos:position pos:line="3" pos:column="20"/></name>)<parameter_list pos:line="3" pos:column="21">(<parameter><decl><type><name pos:line="3" pos:column="22">void<pos:position pos:line="3" pos:column="26"/></name></type></decl></parameter>)<pos:position pos:line="3" pos:column="27"/></parameter_list>;<pos:position pos:line="3" pos:column="28"/></function_decl>

  <expr_stmt><expr><call><name pos:line="5" pos:column="3">lt_dlinit<pos:position pos:line="5" pos:column="12"/></name><argument_list pos:line="5" pos:column="12">()<pos:position pos:line="5" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="15"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="6" pos:column="3">lt_dlerror<pos:position pos:line="6" pos:column="13"/></name><argument_list pos:line="6" pos:column="13">()<pos:position pos:line="6" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="16"/></expr_stmt> <comment type="block" pos:line="6" pos:column="17">/* clear errors */</comment>

<cpp:if pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">if<pos:position pos:line="8" pos:column="4"/></cpp:directive> <expr><name pos:line="8" pos:column="5">LIBTOOL_VERSION<pos:position pos:line="8" pos:column="20"/></name> <operator pos:line="8" pos:column="21">==<pos:position pos:line="8" pos:column="23"/></operator> <literal type="number" pos:line="8" pos:column="24">2<pos:position pos:line="8" pos:column="25"/></literal></expr></cpp:if>
  <if pos:line="9" pos:column="3">if <condition pos:line="9" pos:column="6">(<expr><name pos:line="9" pos:column="7">flags<pos:position pos:line="9" pos:column="12"/></name> <operator pos:line="9" pos:column="13">&amp;<pos:position pos:line="9" pos:column="18"/></operator> <name pos:line="9" pos:column="15">PLUGIN_FLAGS_GLOBAL<pos:position pos:line="9" pos:column="34"/></name></expr>)<pos:position pos:line="9" pos:column="35"/></condition><then pos:line="9" pos:column="35"> <block pos:line="9" pos:column="36">{
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">lt_dladvise<pos:position pos:line="10" pos:column="16"/></name></type> <name pos:line="10" pos:column="17">advise<pos:position pos:line="10" pos:column="23"/></name></decl>;<pos:position pos:line="10" pos:column="24"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="11" pos:column="5">lt_dladvise_init<pos:position pos:line="11" pos:column="21"/></name><argument_list pos:line="11" pos:column="21">(<argument><expr><operator pos:line="11" pos:column="22">&amp;<pos:position pos:line="11" pos:column="27"/></operator><name pos:line="11" pos:column="23">advise<pos:position pos:line="11" pos:column="29"/></name></expr></argument>)<pos:position pos:line="11" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="31"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="12" pos:column="5">lt_dladvise_global<pos:position pos:line="12" pos:column="23"/></name><argument_list pos:line="12" pos:column="23">(<argument><expr><operator pos:line="12" pos:column="24">&amp;<pos:position pos:line="12" pos:column="29"/></operator><name pos:line="12" pos:column="25">advise<pos:position pos:line="12" pos:column="31"/></name></expr></argument>)<pos:position pos:line="12" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="33"/></expr_stmt>
    <expr_stmt><expr><name pos:line="13" pos:column="5">dlh<pos:position pos:line="13" pos:column="8"/></name> <operator pos:line="13" pos:column="9">=<pos:position pos:line="13" pos:column="10"/></operator> <call><name pos:line="13" pos:column="11">lt_dlopenadvise<pos:position pos:line="13" pos:column="26"/></name><argument_list pos:line="13" pos:column="26">(<argument><expr><name pos:line="13" pos:column="27">file<pos:position pos:line="13" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="33">advise<pos:position pos:line="13" pos:column="39"/></name></expr></argument>)<pos:position pos:line="13" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="41"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="14" pos:column="5">lt_dladvise_destroy<pos:position pos:line="14" pos:column="24"/></name><argument_list pos:line="14" pos:column="24">(<argument><expr><operator pos:line="14" pos:column="25">&amp;<pos:position pos:line="14" pos:column="30"/></operator><name pos:line="14" pos:column="26">advise<pos:position pos:line="14" pos:column="32"/></name></expr></argument>)<pos:position pos:line="14" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="34"/></expr_stmt>
  }<pos:position pos:line="15" pos:column="4"/></block></then> <else pos:line="15" pos:column="5">else <block pos:line="15" pos:column="10">{
    <expr_stmt><expr><name pos:line="16" pos:column="5">dlh<pos:position pos:line="16" pos:column="8"/></name> <operator pos:line="16" pos:column="9">=<pos:position pos:line="16" pos:column="10"/></operator> <call><name pos:line="16" pos:column="11">lt_dlopen<pos:position pos:line="16" pos:column="20"/></name><argument_list pos:line="16" pos:column="20">(<argument><expr><name pos:line="16" pos:column="21">file<pos:position pos:line="16" pos:column="25"/></name></expr></argument>)<pos:position pos:line="16" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="27"/></expr_stmt>
  }<pos:position pos:line="17" pos:column="4"/></block></else></if>
<cpp:else pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">else<pos:position pos:line="18" pos:column="6"/></cpp:directive></cpp:else> <comment type="block" pos:line="18" pos:column="7">/* if LIBTOOL_VERSION == 1 */</comment>
  <if pos:line="19" pos:column="3">if <condition pos:line="19" pos:column="6">(<expr><name pos:line="19" pos:column="7">flags<pos:position pos:line="19" pos:column="12"/></name> <operator pos:line="19" pos:column="13">&amp;<pos:position pos:line="19" pos:column="18"/></operator> <name pos:line="19" pos:column="15">PLUGIN_FLAGS_GLOBAL<pos:position pos:line="19" pos:column="34"/></name></expr>)<pos:position pos:line="19" pos:column="35"/></condition><then pos:line="19" pos:column="35">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="20" pos:column="5">WARNING<pos:position pos:line="20" pos:column="12"/></name><argument_list pos:line="20" pos:column="12">(<argument><expr><literal type="string" pos:line="20" pos:column="13">"plugin_load_file: The global flag is not supported, "<pos:position pos:line="20" pos:column="67"/></literal>
            <literal type="string" pos:line="21" pos:column="13">"libtool 2 is required for this."<pos:position pos:line="21" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="48"/></expr_stmt></block></then></if>
  <expr_stmt><expr><name pos:line="22" pos:column="3">dlh<pos:position pos:line="22" pos:column="6"/></name> <operator pos:line="22" pos:column="7">=<pos:position pos:line="22" pos:column="8"/></operator> <call><name pos:line="22" pos:column="9">lt_dlopen<pos:position pos:line="22" pos:column="18"/></name><argument_list pos:line="22" pos:column="18">(<argument><expr><name pos:line="22" pos:column="19">file<pos:position pos:line="22" pos:column="23"/></name></expr></argument>)<pos:position pos:line="22" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="25"/></expr_stmt>
<cpp:endif pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">endif<pos:position pos:line="23" pos:column="7"/></cpp:directive></cpp:endif>

  <if pos:line="25" pos:column="3">if <condition pos:line="25" pos:column="6">(<expr><name pos:line="25" pos:column="7">dlh<pos:position pos:line="25" pos:column="10"/></name> <operator pos:line="25" pos:column="11">==<pos:position pos:line="25" pos:column="13"/></operator> <name pos:line="25" pos:column="14">NULL<pos:position pos:line="25" pos:column="18"/></name></expr>)<pos:position pos:line="25" pos:column="19"/></condition><then pos:line="25" pos:column="19"> <block pos:line="25" pos:column="20">{
    <decl_stmt><decl><type><name pos:line="26" pos:column="5">char<pos:position pos:line="26" pos:column="9"/></name></type> <name><name pos:line="26" pos:column="10">errbuf<pos:position pos:line="26" pos:column="16"/></name><index pos:line="26" pos:column="16">[<expr><literal type="number" pos:line="26" pos:column="17">1024<pos:position pos:line="26" pos:column="21"/></literal></expr>]<pos:position pos:line="26" pos:column="22"/></index></name> <init pos:line="26" pos:column="23">= <expr><literal type="string" pos:line="26" pos:column="25">""<pos:position pos:line="26" pos:column="27"/></literal></expr></init></decl>;<pos:position pos:line="26" pos:column="28"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="28" pos:column="5">ssnprintf<pos:position pos:line="28" pos:column="14"/></name><argument_list pos:line="28" pos:column="14">(<argument><expr><name pos:line="28" pos:column="15">errbuf<pos:position pos:line="28" pos:column="21"/></name></expr></argument>, <argument><expr><sizeof pos:line="28" pos:column="23">sizeof<argument_list pos:line="28" pos:column="29">(<argument><expr><name pos:line="28" pos:column="30">errbuf<pos:position pos:line="28" pos:column="36"/></name></expr></argument>)<pos:position pos:line="28" pos:column="37"/></argument_list></sizeof></expr></argument>,
              <argument><expr><literal type="string" pos:line="29" pos:column="15">"lt_dlopen (\"%s\") failed: %s. "<pos:position pos:line="29" pos:column="48"/></literal>
              <literal type="string" pos:line="30" pos:column="15">"The most common cause for this problem is "<pos:position pos:line="30" pos:column="59"/></literal>
              <literal type="string" pos:line="31" pos:column="15">"missing dependencies. Use ldd(1) to check "<pos:position pos:line="31" pos:column="59"/></literal>
              <literal type="string" pos:line="32" pos:column="15">"the dependencies of the plugin "<pos:position pos:line="32" pos:column="48"/></literal>
              <literal type="string" pos:line="33" pos:column="15">"/ shared object."<pos:position pos:line="33" pos:column="33"/></literal></expr></argument>,
              <argument><expr><name pos:line="34" pos:column="15">file<pos:position pos:line="34" pos:column="19"/></name></expr></argument>, <argument><expr><call><name pos:line="34" pos:column="21">lt_dlerror<pos:position pos:line="34" pos:column="31"/></name><argument_list pos:line="34" pos:column="31">()<pos:position pos:line="34" pos:column="33"/></argument_list></call></expr></argument>)<pos:position pos:line="34" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="35"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="36" pos:column="5">ERROR<pos:position pos:line="36" pos:column="10"/></name><argument_list pos:line="36" pos:column="10">(<argument><expr><literal type="string" pos:line="36" pos:column="11">"%s"<pos:position pos:line="36" pos:column="15"/></literal></expr></argument>, <argument><expr><name pos:line="36" pos:column="17">errbuf<pos:position pos:line="36" pos:column="23"/></name></expr></argument>)<pos:position pos:line="36" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="25"/></expr_stmt>
    <comment type="block" pos:line="37" pos:column="5">/* Make sure this is printed to STDERR in any case, but also
     * make sure it's printed only once. */</comment>
    <if pos:line="39" pos:column="5">if <condition pos:line="39" pos:column="8">(<expr><name pos:line="39" pos:column="9">list_log<pos:position pos:line="39" pos:column="17"/></name> <operator pos:line="39" pos:column="18">!=<pos:position pos:line="39" pos:column="20"/></operator> <name pos:line="39" pos:column="21">NULL<pos:position pos:line="39" pos:column="25"/></name></expr>)<pos:position pos:line="39" pos:column="26"/></condition><then pos:line="39" pos:column="26">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="40" pos:column="7">fprintf<pos:position pos:line="40" pos:column="14"/></name><argument_list pos:line="40" pos:column="14">(<argument><expr><name pos:line="40" pos:column="15">stderr<pos:position pos:line="40" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="40" pos:column="23">"ERROR: %s\n"<pos:position pos:line="40" pos:column="36"/></literal></expr></argument>, <argument><expr><name pos:line="40" pos:column="38">errbuf<pos:position pos:line="40" pos:column="44"/></name></expr></argument>)<pos:position pos:line="40" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="46"/></expr_stmt></block></then></if>

    <return pos:line="42" pos:column="5">return <expr><operator pos:line="42" pos:column="12">(<pos:position pos:line="42" pos:column="13"/></operator><literal type="number" pos:line="42" pos:column="13">1<pos:position pos:line="42" pos:column="14"/></literal><operator pos:line="42" pos:column="14">)<pos:position pos:line="42" pos:column="15"/></operator></expr>;<pos:position pos:line="42" pos:column="16"/></return>
  }<pos:position pos:line="43" pos:column="4"/></block></then></if>

  <if pos:line="45" pos:column="3">if <condition pos:line="45" pos:column="6">(<expr><operator pos:line="45" pos:column="7">(<pos:position pos:line="45" pos:column="8"/></operator><name pos:line="45" pos:column="8">reg_handle<pos:position pos:line="45" pos:column="18"/></name> <operator pos:line="45" pos:column="19">=<pos:position pos:line="45" pos:column="20"/></operator> <operator pos:line="45" pos:column="21">(<pos:position pos:line="45" pos:column="22"/></operator><call><call><name pos:line="45" pos:column="22">void<pos:position pos:line="45" pos:column="26"/></name> <argument_list pos:line="45" pos:column="27">(<argument><expr><operator pos:line="45" pos:column="28">*<pos:position pos:line="45" pos:column="29"/></operator></expr></argument>)<pos:position pos:line="45" pos:column="30"/></argument_list></call><argument_list pos:line="45" pos:column="30">(<argument><expr><name pos:line="45" pos:column="31">void<pos:position pos:line="45" pos:column="35"/></name></expr></argument>)<pos:position pos:line="45" pos:column="36"/></argument_list></call><operator pos:line="45" pos:column="36">)<pos:position pos:line="45" pos:column="37"/></operator><call><name pos:line="45" pos:column="37">lt_dlsym<pos:position pos:line="45" pos:column="45"/></name><argument_list pos:line="45" pos:column="45">(<argument><expr><name pos:line="45" pos:column="46">dlh<pos:position pos:line="45" pos:column="49"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="45" pos:column="51">"module_register"<pos:position pos:line="45" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="45" pos:column="69"/></argument_list></call><operator pos:line="45" pos:column="69">)<pos:position pos:line="45" pos:column="70"/></operator> <operator pos:line="45" pos:column="71">==<pos:position pos:line="45" pos:column="73"/></operator> <name pos:line="45" pos:column="74">NULL<pos:position pos:line="45" pos:column="78"/></name></expr>)<pos:position pos:line="45" pos:column="79"/></condition><then pos:line="45" pos:column="79"> <block pos:line="45" pos:column="80">{
    <expr_stmt><expr><call><name pos:line="46" pos:column="5">WARNING<pos:position pos:line="46" pos:column="12"/></name><argument_list pos:line="46" pos:column="12">(<argument><expr><literal type="string" pos:line="46" pos:column="13">"Couldn't find symbol \"module_register\" in \"%s\": %s\n"<pos:position pos:line="46" pos:column="71"/></literal></expr></argument>, <argument><expr><name pos:line="46" pos:column="73">file<pos:position pos:line="46" pos:column="77"/></name></expr></argument>,
            <argument><expr><call><name pos:line="47" pos:column="13">lt_dlerror<pos:position pos:line="47" pos:column="23"/></name><argument_list pos:line="47" pos:column="23">()<pos:position pos:line="47" pos:column="25"/></argument_list></call></expr></argument>)<pos:position pos:line="47" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="27"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="48" pos:column="5">lt_dlclose<pos:position pos:line="48" pos:column="15"/></name><argument_list pos:line="48" pos:column="15">(<argument><expr><name pos:line="48" pos:column="16">dlh<pos:position pos:line="48" pos:column="19"/></name></expr></argument>)<pos:position pos:line="48" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="21"/></expr_stmt>
    <return pos:line="49" pos:column="5">return <expr><operator pos:line="49" pos:column="12">(<pos:position pos:line="49" pos:column="13"/></operator><operator pos:line="49" pos:column="13">-<pos:position pos:line="49" pos:column="14"/></operator><literal type="number" pos:line="49" pos:column="14">1<pos:position pos:line="49" pos:column="15"/></literal><operator pos:line="49" pos:column="15">)<pos:position pos:line="49" pos:column="16"/></operator></expr>;<pos:position pos:line="49" pos:column="17"/></return>
  }<pos:position pos:line="50" pos:column="4"/></block></then></if>

  <expr_stmt><expr><call pos:line="52" pos:column="3">(<modifier pos:line="52" pos:column="4">*<pos:position pos:line="52" pos:column="5"/></modifier><name pos:line="52" pos:column="5">reg_handle<pos:position pos:line="52" pos:column="15"/></name>)<argument_list pos:line="52" pos:column="16">()<pos:position pos:line="52" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="19"/></expr_stmt>

  <return pos:line="54" pos:column="3">return <expr><operator pos:line="54" pos:column="10">(<pos:position pos:line="54" pos:column="11"/></operator><literal type="number" pos:line="54" pos:column="11">0<pos:position pos:line="54" pos:column="12"/></literal><operator pos:line="54" pos:column="12">)<pos:position pos:line="54" pos:column="13"/></operator></expr>;<pos:position pos:line="54" pos:column="14"/></return>
}<pos:position pos:line="55" pos:column="2"/></block></function></unit>
