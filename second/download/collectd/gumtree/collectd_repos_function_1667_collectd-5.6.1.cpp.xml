<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1667_collectd-5.6.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">cconn_process_json<pos:position pos:line="1" pos:column="30"/></name><parameter_list pos:line="1" pos:column="30">(<parameter><decl><type><name><name pos:line="1" pos:column="31">struct<pos:position pos:line="1" pos:column="37"/></name> <name pos:line="1" pos:column="38">cconn<pos:position pos:line="1" pos:column="43"/></name></name> <modifier pos:line="1" pos:column="44">*<pos:position pos:line="1" pos:column="45"/></modifier></type><name pos:line="1" pos:column="45">io<pos:position pos:line="1" pos:column="47"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="48"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <if pos:line="3" pos:column="5">if<condition pos:line="3" pos:column="7">(<expr><operator pos:line="3" pos:column="8">(<pos:position pos:line="3" pos:column="9"/></operator><name><name pos:line="3" pos:column="9">io<pos:position pos:line="3" pos:column="11"/></name><operator pos:line="3" pos:column="11">-&gt;<pos:position pos:line="3" pos:column="16"/></operator><name pos:line="3" pos:column="13">request_type<pos:position pos:line="3" pos:column="25"/></name></name> <operator pos:line="3" pos:column="26">!=<pos:position pos:line="3" pos:column="28"/></operator> <name pos:line="3" pos:column="29">ASOK_REQ_DATA<pos:position pos:line="3" pos:column="42"/></name><operator pos:line="3" pos:column="42">)<pos:position pos:line="3" pos:column="43"/></operator> <operator pos:line="3" pos:column="44">&amp;&amp;<pos:position pos:line="3" pos:column="54"/></operator>
            <operator pos:line="4" pos:column="13">(<pos:position pos:line="4" pos:column="14"/></operator><name><name pos:line="4" pos:column="14">io<pos:position pos:line="4" pos:column="16"/></name><operator pos:line="4" pos:column="16">-&gt;<pos:position pos:line="4" pos:column="21"/></operator><name pos:line="4" pos:column="18">request_type<pos:position pos:line="4" pos:column="30"/></name></name> <operator pos:line="4" pos:column="31">!=<pos:position pos:line="4" pos:column="33"/></operator> <name pos:line="4" pos:column="34">ASOK_REQ_SCHEMA<pos:position pos:line="4" pos:column="49"/></name><operator pos:line="4" pos:column="49">)<pos:position pos:line="4" pos:column="50"/></operator></expr>)<pos:position pos:line="4" pos:column="51"/></condition><then pos:line="4" pos:column="51">
    <block pos:line="5" pos:column="5">{
        <return pos:line="6" pos:column="9">return <expr><operator pos:line="6" pos:column="16">-<pos:position pos:line="6" pos:column="17"/></operator><name pos:line="6" pos:column="17">EDOM<pos:position pos:line="6" pos:column="21"/></name></expr>;<pos:position pos:line="6" pos:column="22"/></return>
    }<pos:position pos:line="7" pos:column="6"/></block></then></if>

    <decl_stmt><decl><type><name pos:line="9" pos:column="5">int<pos:position pos:line="9" pos:column="8"/></name></type> <name pos:line="9" pos:column="9">result<pos:position pos:line="9" pos:column="15"/></name> <init pos:line="9" pos:column="16">= <expr><literal type="number" pos:line="9" pos:column="18">1<pos:position pos:line="9" pos:column="19"/></literal></expr></init></decl>;<pos:position pos:line="9" pos:column="20"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">yajl_handle<pos:position pos:line="10" pos:column="16"/></name></type> <name pos:line="10" pos:column="17">hand<pos:position pos:line="10" pos:column="21"/></name></decl>;<pos:position pos:line="10" pos:column="22"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="11" pos:column="5">yajl_status<pos:position pos:line="11" pos:column="16"/></name></type> <name pos:line="11" pos:column="17">status<pos:position pos:line="11" pos:column="23"/></name></decl>;<pos:position pos:line="11" pos:column="24"/></decl_stmt>

    <expr_stmt><expr><name pos:line="13" pos:column="5">hand<pos:position pos:line="13" pos:column="9"/></name> <operator pos:line="13" pos:column="10">=<pos:position pos:line="13" pos:column="11"/></operator> <call><name pos:line="13" pos:column="12">yajl_alloc<pos:position pos:line="13" pos:column="22"/></name><argument_list pos:line="13" pos:column="22">(<argument><expr><operator pos:line="13" pos:column="23">&amp;<pos:position pos:line="13" pos:column="28"/></operator><name pos:line="13" pos:column="24">callbacks<pos:position pos:line="13" pos:column="33"/></name></expr></argument>,
<cpp:if pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">if<pos:position pos:line="14" pos:column="4"/></cpp:directive> <expr><name pos:line="14" pos:column="5">HAVE_YAJL_V2<pos:position pos:line="14" pos:column="17"/></name></expr></cpp:if>
      <comment type="block" pos:line="15" pos:column="7">/* alloc funcs = */</comment> <argument><expr><name pos:line="15" pos:column="27">NULL<pos:position pos:line="15" pos:column="31"/></name></expr></argument>,
<cpp:else pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">else<pos:position pos:line="16" pos:column="6"/></cpp:directive></cpp:else>
      <comment type="block" pos:line="17" pos:column="7">/* alloc funcs = */</comment> <argument><expr><name pos:line="17" pos:column="27">NULL<pos:position pos:line="17" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="33">NULL<pos:position pos:line="17" pos:column="37"/></name></expr></argument>,
<cpp:endif pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">endif<pos:position pos:line="18" pos:column="7"/></cpp:directive></cpp:endif>
      <comment type="block" pos:line="19" pos:column="7">/* context = */</comment> <argument><expr><operator pos:line="19" pos:column="23">(<pos:position pos:line="19" pos:column="24"/></operator><name pos:line="19" pos:column="24">void<pos:position pos:line="19" pos:column="28"/></name> <operator pos:line="19" pos:column="29">*<pos:position pos:line="19" pos:column="30"/></operator><operator pos:line="19" pos:column="30">)<pos:position pos:line="19" pos:column="31"/></operator><operator pos:line="19" pos:column="31">(<pos:position pos:line="19" pos:column="32"/></operator><operator pos:line="19" pos:column="32">&amp;<pos:position pos:line="19" pos:column="37"/></operator><name><name pos:line="19" pos:column="33">io<pos:position pos:line="19" pos:column="35"/></name><operator pos:line="19" pos:column="35">-&gt;<pos:position pos:line="19" pos:column="40"/></operator><name pos:line="19" pos:column="37">yajl<pos:position pos:line="19" pos:column="41"/></name></name><operator pos:line="19" pos:column="41">)<pos:position pos:line="19" pos:column="42"/></operator></expr></argument>)<pos:position pos:line="19" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="44"/></expr_stmt>

    <if pos:line="21" pos:column="5">if<condition pos:line="21" pos:column="7">(<expr><operator pos:line="21" pos:column="8">!<pos:position pos:line="21" pos:column="9"/></operator><name pos:line="21" pos:column="9">hand<pos:position pos:line="21" pos:column="13"/></name></expr>)<pos:position pos:line="21" pos:column="14"/></condition><then pos:line="21" pos:column="14">
    <block pos:line="22" pos:column="5">{
        <expr_stmt><expr><call><name pos:line="23" pos:column="9">ERROR<pos:position pos:line="23" pos:column="14"/></name> <argument_list pos:line="23" pos:column="15">(<argument><expr><literal type="string" pos:line="23" pos:column="16">"ceph plugin: yajl_alloc failed."<pos:position pos:line="23" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="51"/></expr_stmt>
        <return pos:line="24" pos:column="9">return <expr><name pos:line="24" pos:column="16">ENOMEM<pos:position pos:line="24" pos:column="22"/></name></expr>;<pos:position pos:line="24" pos:column="23"/></return>
    }<pos:position pos:line="25" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name><name pos:line="27" pos:column="5">io<pos:position pos:line="27" pos:column="7"/></name><operator pos:line="27" pos:column="7">-&gt;<pos:position pos:line="27" pos:column="12"/></operator><name pos:line="27" pos:column="9">yajl<pos:position pos:line="27" pos:column="13"/></name><operator pos:line="27" pos:column="13">.<pos:position pos:line="27" pos:column="14"/></operator><name pos:line="27" pos:column="14">depth<pos:position pos:line="27" pos:column="19"/></name></name> <operator pos:line="27" pos:column="20">=<pos:position pos:line="27" pos:column="21"/></operator> <literal type="number" pos:line="27" pos:column="22">0<pos:position pos:line="27" pos:column="23"/></literal></expr>;<pos:position pos:line="27" pos:column="24"/></expr_stmt>

    <switch pos:line="29" pos:column="5">switch<condition pos:line="29" pos:column="11">(<expr><name><name pos:line="29" pos:column="12">io<pos:position pos:line="29" pos:column="14"/></name><operator pos:line="29" pos:column="14">-&gt;<pos:position pos:line="29" pos:column="19"/></operator><name pos:line="29" pos:column="16">request_type<pos:position pos:line="29" pos:column="28"/></name></name></expr>)<pos:position pos:line="29" pos:column="29"/></condition>
    <block pos:line="30" pos:column="5">{
        <case pos:line="31" pos:column="9">case <expr><name pos:line="31" pos:column="14">ASOK_REQ_DATA<pos:position pos:line="31" pos:column="27"/></name></expr>:<pos:position pos:line="31" pos:column="28"/></case>
            <expr_stmt><expr><name><name pos:line="32" pos:column="13">io<pos:position pos:line="32" pos:column="15"/></name><operator pos:line="32" pos:column="15">-&gt;<pos:position pos:line="32" pos:column="20"/></operator><name pos:line="32" pos:column="17">yajl<pos:position pos:line="32" pos:column="21"/></name><operator pos:line="32" pos:column="21">.<pos:position pos:line="32" pos:column="22"/></operator><name pos:line="32" pos:column="22">handler<pos:position pos:line="32" pos:column="29"/></name></name> <operator pos:line="32" pos:column="30">=<pos:position pos:line="32" pos:column="31"/></operator> <name pos:line="32" pos:column="32">node_handler_fetch_data<pos:position pos:line="32" pos:column="55"/></name></expr>;<pos:position pos:line="32" pos:column="56"/></expr_stmt>
            <expr_stmt><expr><name pos:line="33" pos:column="13">result<pos:position pos:line="33" pos:column="19"/></name> <operator pos:line="33" pos:column="20">=<pos:position pos:line="33" pos:column="21"/></operator> <call><name pos:line="33" pos:column="22">cconn_process_data<pos:position pos:line="33" pos:column="40"/></name><argument_list pos:line="33" pos:column="40">(<argument><expr><name pos:line="33" pos:column="41">io<pos:position pos:line="33" pos:column="43"/></name></expr></argument>, <argument><expr><operator pos:line="33" pos:column="45">&amp;<pos:position pos:line="33" pos:column="50"/></operator><name><name pos:line="33" pos:column="46">io<pos:position pos:line="33" pos:column="48"/></name><operator pos:line="33" pos:column="48">-&gt;<pos:position pos:line="33" pos:column="53"/></operator><name pos:line="33" pos:column="50">yajl<pos:position pos:line="33" pos:column="54"/></name></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="56">hand<pos:position pos:line="33" pos:column="60"/></name></expr></argument>)<pos:position pos:line="33" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="62"/></expr_stmt>
            <break pos:line="34" pos:column="13">break;<pos:position pos:line="34" pos:column="19"/></break>
        <case pos:line="35" pos:column="9">case <expr><name pos:line="35" pos:column="14">ASOK_REQ_SCHEMA<pos:position pos:line="35" pos:column="29"/></name></expr>:<pos:position pos:line="35" pos:column="30"/></case>
            <comment type="line" pos:line="36" pos:column="13">//init daemon specific variables</comment>
            <expr_stmt><expr><name><name pos:line="37" pos:column="13">io<pos:position pos:line="37" pos:column="15"/></name><operator pos:line="37" pos:column="15">-&gt;<pos:position pos:line="37" pos:column="20"/></operator><name pos:line="37" pos:column="17">d<pos:position pos:line="37" pos:column="18"/></name><operator pos:line="37" pos:column="18">-&gt;<pos:position pos:line="37" pos:column="23"/></operator><name pos:line="37" pos:column="20">ds_num<pos:position pos:line="37" pos:column="26"/></name></name> <operator pos:line="37" pos:column="27">=<pos:position pos:line="37" pos:column="28"/></operator> <literal type="number" pos:line="37" pos:column="29">0<pos:position pos:line="37" pos:column="30"/></literal></expr>;<pos:position pos:line="37" pos:column="31"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="38" pos:column="13">io<pos:position pos:line="38" pos:column="15"/></name><operator pos:line="38" pos:column="15">-&gt;<pos:position pos:line="38" pos:column="20"/></operator><name pos:line="38" pos:column="17">d<pos:position pos:line="38" pos:column="18"/></name><operator pos:line="38" pos:column="18">-&gt;<pos:position pos:line="38" pos:column="23"/></operator><name pos:line="38" pos:column="20">last_idx<pos:position pos:line="38" pos:column="28"/></name></name> <operator pos:line="38" pos:column="29">=<pos:position pos:line="38" pos:column="30"/></operator> <literal type="number" pos:line="38" pos:column="31">0<pos:position pos:line="38" pos:column="32"/></literal></expr>;<pos:position pos:line="38" pos:column="33"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="39" pos:column="13">io<pos:position pos:line="39" pos:column="15"/></name><operator pos:line="39" pos:column="15">-&gt;<pos:position pos:line="39" pos:column="20"/></operator><name pos:line="39" pos:column="17">d<pos:position pos:line="39" pos:column="18"/></name><operator pos:line="39" pos:column="18">-&gt;<pos:position pos:line="39" pos:column="23"/></operator><name pos:line="39" pos:column="20">last_poll_data<pos:position pos:line="39" pos:column="34"/></name></name> <operator pos:line="39" pos:column="35">=<pos:position pos:line="39" pos:column="36"/></operator> <name pos:line="39" pos:column="37">NULL<pos:position pos:line="39" pos:column="41"/></name></expr>;<pos:position pos:line="39" pos:column="42"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="40" pos:column="13">io<pos:position pos:line="40" pos:column="15"/></name><operator pos:line="40" pos:column="15">-&gt;<pos:position pos:line="40" pos:column="20"/></operator><name pos:line="40" pos:column="17">yajl<pos:position pos:line="40" pos:column="21"/></name><operator pos:line="40" pos:column="21">.<pos:position pos:line="40" pos:column="22"/></operator><name pos:line="40" pos:column="22">handler<pos:position pos:line="40" pos:column="29"/></name></name> <operator pos:line="40" pos:column="30">=<pos:position pos:line="40" pos:column="31"/></operator> <name pos:line="40" pos:column="32">node_handler_define_schema<pos:position pos:line="40" pos:column="58"/></name></expr>;<pos:position pos:line="40" pos:column="59"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="41" pos:column="13">io<pos:position pos:line="41" pos:column="15"/></name><operator pos:line="41" pos:column="15">-&gt;<pos:position pos:line="41" pos:column="20"/></operator><name pos:line="41" pos:column="17">yajl<pos:position pos:line="41" pos:column="21"/></name><operator pos:line="41" pos:column="21">.<pos:position pos:line="41" pos:column="22"/></operator><name pos:line="41" pos:column="22">handler_arg<pos:position pos:line="41" pos:column="33"/></name></name> <operator pos:line="41" pos:column="34">=<pos:position pos:line="41" pos:column="35"/></operator> <name><name pos:line="41" pos:column="36">io<pos:position pos:line="41" pos:column="38"/></name><operator pos:line="41" pos:column="38">-&gt;<pos:position pos:line="41" pos:column="43"/></operator><name pos:line="41" pos:column="40">d<pos:position pos:line="41" pos:column="41"/></name></name></expr>;<pos:position pos:line="41" pos:column="42"/></expr_stmt>
            <expr_stmt><expr><name pos:line="42" pos:column="13">result<pos:position pos:line="42" pos:column="19"/></name> <operator pos:line="42" pos:column="20">=<pos:position pos:line="42" pos:column="21"/></operator> <call><name pos:line="42" pos:column="22">traverse_json<pos:position pos:line="42" pos:column="35"/></name><argument_list pos:line="42" pos:column="35">(<argument><expr><name><name pos:line="42" pos:column="36">io<pos:position pos:line="42" pos:column="38"/></name><operator pos:line="42" pos:column="38">-&gt;<pos:position pos:line="42" pos:column="43"/></operator><name pos:line="42" pos:column="40">json<pos:position pos:line="42" pos:column="44"/></name></name></expr></argument>, <argument><expr><name><name pos:line="42" pos:column="46">io<pos:position pos:line="42" pos:column="48"/></name><operator pos:line="42" pos:column="48">-&gt;<pos:position pos:line="42" pos:column="53"/></operator><name pos:line="42" pos:column="50">json_len<pos:position pos:line="42" pos:column="58"/></name></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="60">hand<pos:position pos:line="42" pos:column="64"/></name></expr></argument>)<pos:position pos:line="42" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="66"/></expr_stmt>
            <break pos:line="43" pos:column="13">break;<pos:position pos:line="43" pos:column="19"/></break>
    }<pos:position pos:line="44" pos:column="6"/></block></switch>

    <if pos:line="46" pos:column="5">if<condition pos:line="46" pos:column="7">(<expr><name pos:line="46" pos:column="8">result<pos:position pos:line="46" pos:column="14"/></name></expr>)<pos:position pos:line="46" pos:column="15"/></condition><then pos:line="46" pos:column="15">
    <block pos:line="47" pos:column="5">{
        <goto pos:line="48" pos:column="9">goto <name pos:line="48" pos:column="14">done<pos:position pos:line="48" pos:column="18"/></name>;<pos:position pos:line="48" pos:column="19"/></goto>
    }<pos:position pos:line="49" pos:column="6"/></block></then></if>

<cpp:if pos:line="51" pos:column="1">#<cpp:directive pos:line="51" pos:column="2">if<pos:position pos:line="51" pos:column="4"/></cpp:directive> <expr><name pos:line="51" pos:column="5">HAVE_YAJL_V2<pos:position pos:line="51" pos:column="17"/></name></expr></cpp:if>
    <expr_stmt><expr><name pos:line="52" pos:column="5">status<pos:position pos:line="52" pos:column="11"/></name> <operator pos:line="52" pos:column="12">=<pos:position pos:line="52" pos:column="13"/></operator> <call><name pos:line="52" pos:column="14">yajl_complete_parse<pos:position pos:line="52" pos:column="33"/></name><argument_list pos:line="52" pos:column="33">(<argument><expr><name pos:line="52" pos:column="34">hand<pos:position pos:line="52" pos:column="38"/></name></expr></argument>)<pos:position pos:line="52" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="40"/></expr_stmt>
<cpp:else pos:line="53" pos:column="1">#<cpp:directive pos:line="53" pos:column="2">else<pos:position pos:line="53" pos:column="6"/></cpp:directive></cpp:else>
    <expr_stmt><expr><name pos:line="54" pos:column="5">status<pos:position pos:line="54" pos:column="11"/></name> <operator pos:line="54" pos:column="12">=<pos:position pos:line="54" pos:column="13"/></operator> <call><name pos:line="54" pos:column="14">yajl_parse_complete<pos:position pos:line="54" pos:column="33"/></name><argument_list pos:line="54" pos:column="33">(<argument><expr><name pos:line="54" pos:column="34">hand<pos:position pos:line="54" pos:column="38"/></name></expr></argument>)<pos:position pos:line="54" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="40"/></expr_stmt>
<cpp:endif pos:line="55" pos:column="1">#<cpp:directive pos:line="55" pos:column="2">endif<pos:position pos:line="55" pos:column="7"/></cpp:directive></cpp:endif>

    <if pos:line="57" pos:column="5">if <condition pos:line="57" pos:column="8">(<expr><name pos:line="57" pos:column="9">status<pos:position pos:line="57" pos:column="15"/></name> <operator pos:line="57" pos:column="16">!=<pos:position pos:line="57" pos:column="18"/></operator> <name pos:line="57" pos:column="19">yajl_status_ok<pos:position pos:line="57" pos:column="33"/></name></expr>)<pos:position pos:line="57" pos:column="34"/></condition><then pos:line="57" pos:column="34">
    <block pos:line="58" pos:column="5">{
      <decl_stmt><decl><type><name pos:line="59" pos:column="7">unsigned<pos:position pos:line="59" pos:column="15"/></name> <name pos:line="59" pos:column="16">char<pos:position pos:line="59" pos:column="20"/></name> <modifier pos:line="59" pos:column="21">*<pos:position pos:line="59" pos:column="22"/></modifier></type><name pos:line="59" pos:column="22">errmsg<pos:position pos:line="59" pos:column="28"/></name> <init pos:line="59" pos:column="29">= <expr><call><name pos:line="59" pos:column="31">yajl_get_error<pos:position pos:line="59" pos:column="45"/></name> <argument_list pos:line="59" pos:column="46">(<argument><expr><name pos:line="59" pos:column="47">hand<pos:position pos:line="59" pos:column="51"/></name></expr></argument>, <comment type="block" pos:line="59" pos:column="53">/* verbose = */</comment> <argument><expr><literal type="number" pos:line="59" pos:column="69">0<pos:position pos:line="59" pos:column="70"/></literal></expr></argument>,
          <comment type="block" pos:line="60" pos:column="11">/* jsonText = */</comment> <argument><expr><name pos:line="60" pos:column="28">NULL<pos:position pos:line="60" pos:column="32"/></name></expr></argument>, <comment type="block" pos:line="60" pos:column="34">/* jsonTextLen = */</comment> <argument><expr><literal type="number" pos:line="60" pos:column="54">0<pos:position pos:line="60" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="60" pos:column="56"/></argument_list></call></expr></init></decl>;<pos:position pos:line="60" pos:column="57"/></decl_stmt>
      <expr_stmt><expr><call><name pos:line="61" pos:column="7">ERROR<pos:position pos:line="61" pos:column="12"/></name> <argument_list pos:line="61" pos:column="13">(<argument><expr><literal type="string" pos:line="61" pos:column="14">"ceph plugin: yajl_parse_complete failed: %s"<pos:position pos:line="61" pos:column="59"/></literal></expr></argument>,
          <argument><expr><operator pos:line="62" pos:column="11">(<pos:position pos:line="62" pos:column="12"/></operator><name pos:line="62" pos:column="12">char<pos:position pos:line="62" pos:column="16"/></name> <operator pos:line="62" pos:column="17">*<pos:position pos:line="62" pos:column="18"/></operator><operator pos:line="62" pos:column="18">)<pos:position pos:line="62" pos:column="19"/></operator> <name pos:line="62" pos:column="20">errmsg<pos:position pos:line="62" pos:column="26"/></name></expr></argument>)<pos:position pos:line="62" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="28"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="63" pos:column="7">yajl_free_error<pos:position pos:line="63" pos:column="22"/></name> <argument_list pos:line="63" pos:column="23">(<argument><expr><name pos:line="63" pos:column="24">hand<pos:position pos:line="63" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="63" pos:column="30">errmsg<pos:position pos:line="63" pos:column="36"/></name></expr></argument>)<pos:position pos:line="63" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="38"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="64" pos:column="7">yajl_free<pos:position pos:line="64" pos:column="16"/></name> <argument_list pos:line="64" pos:column="17">(<argument><expr><name pos:line="64" pos:column="18">hand<pos:position pos:line="64" pos:column="22"/></name></expr></argument>)<pos:position pos:line="64" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="24"/></expr_stmt>
      <return pos:line="65" pos:column="7">return <expr><literal type="number" pos:line="65" pos:column="14">1<pos:position pos:line="65" pos:column="15"/></literal></expr>;<pos:position pos:line="65" pos:column="16"/></return>
    }<pos:position pos:line="66" pos:column="6"/></block></then></if>

    <label><name pos:line="68" pos:column="5">done<pos:position pos:line="68" pos:column="9"/></name>:<pos:position pos:line="68" pos:column="10"/></label>
    <expr_stmt><expr><call><name pos:line="69" pos:column="5">yajl_free<pos:position pos:line="69" pos:column="14"/></name> <argument_list pos:line="69" pos:column="15">(<argument><expr><name pos:line="69" pos:column="16">hand<pos:position pos:line="69" pos:column="20"/></name></expr></argument>)<pos:position pos:line="69" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="22"/></expr_stmt>
    <return pos:line="70" pos:column="5">return <expr><name pos:line="70" pos:column="12">result<pos:position pos:line="70" pos:column="18"/></name></expr>;<pos:position pos:line="70" pos:column="19"/></return>
}<pos:position pos:line="71" pos:column="2"/></block></function></unit>
