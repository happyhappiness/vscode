<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_88_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">get_vcpu_stats<pos:position pos:line="1" pos:column="26"/></name><parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><name pos:line="1" pos:column="27">virDomainPtr<pos:position pos:line="1" pos:column="39"/></name></type> <name pos:line="1" pos:column="40">domain<pos:position pos:line="1" pos:column="46"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="48">unsigned<pos:position pos:line="1" pos:column="56"/></name> <name pos:line="1" pos:column="57">short<pos:position pos:line="1" pos:column="62"/></name></type> <name pos:line="1" pos:column="63">nr_virt_cpu<pos:position pos:line="1" pos:column="74"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="75"/></parameter_list> <block pos:line="1" pos:column="76">{
  <decl_stmt><decl><type><name pos:line="2" pos:column="3">int<pos:position pos:line="2" pos:column="6"/></name></type> <name pos:line="2" pos:column="7">max_cpus<pos:position pos:line="2" pos:column="15"/></name> <init pos:line="2" pos:column="16">= <expr><call><name pos:line="2" pos:column="18">VIR_NODEINFO_MAXCPUS<pos:position pos:line="2" pos:column="38"/></name><argument_list pos:line="2" pos:column="38">(<argument><expr><name pos:line="2" pos:column="39">nodeinfo<pos:position pos:line="2" pos:column="47"/></name></expr></argument>)<pos:position pos:line="2" pos:column="48"/></argument_list></call></expr></init></decl>;<pos:position pos:line="2" pos:column="49"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">int<pos:position pos:line="3" pos:column="6"/></name></type> <name pos:line="3" pos:column="7">cpu_map_len<pos:position pos:line="3" pos:column="18"/></name> <init pos:line="3" pos:column="19">= <expr><call><name pos:line="3" pos:column="21">VIR_CPU_MAPLEN<pos:position pos:line="3" pos:column="35"/></name><argument_list pos:line="3" pos:column="35">(<argument><expr><name pos:line="3" pos:column="36">max_cpus<pos:position pos:line="3" pos:column="44"/></name></expr></argument>)<pos:position pos:line="3" pos:column="45"/></argument_list></call></expr></init></decl>;<pos:position pos:line="3" pos:column="46"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="5" pos:column="3">virVcpuInfoPtr<pos:position pos:line="5" pos:column="17"/></name></type> <name pos:line="5" pos:column="18">vinfo<pos:position pos:line="5" pos:column="23"/></name> <init pos:line="5" pos:column="24">= <expr><call><name pos:line="5" pos:column="26">calloc<pos:position pos:line="5" pos:column="32"/></name><argument_list pos:line="5" pos:column="32">(<argument><expr><name pos:line="5" pos:column="33">nr_virt_cpu<pos:position pos:line="5" pos:column="44"/></name></expr></argument>, <argument><expr><sizeof pos:line="5" pos:column="46">sizeof<argument_list pos:line="5" pos:column="52">(<argument><expr><name><name pos:line="5" pos:column="53">vinfo<pos:position pos:line="5" pos:column="58"/></name><index pos:line="5" pos:column="58">[<expr><literal type="number" pos:line="5" pos:column="59">0<pos:position pos:line="5" pos:column="60"/></literal></expr>]<pos:position pos:line="5" pos:column="61"/></index></name></expr></argument>)<pos:position pos:line="5" pos:column="62"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="5" pos:column="63"/></argument_list></call></expr></init></decl>;<pos:position pos:line="5" pos:column="64"/></decl_stmt>
  <if pos:line="6" pos:column="3">if <condition pos:line="6" pos:column="6">(<expr><name pos:line="6" pos:column="7">vinfo<pos:position pos:line="6" pos:column="12"/></name> <operator pos:line="6" pos:column="13">==<pos:position pos:line="6" pos:column="15"/></operator> <name pos:line="6" pos:column="16">NULL<pos:position pos:line="6" pos:column="20"/></name></expr>)<pos:position pos:line="6" pos:column="21"/></condition><then pos:line="6" pos:column="21"> <block pos:line="6" pos:column="22">{
    <expr_stmt><expr><call><name pos:line="7" pos:column="5">ERROR<pos:position pos:line="7" pos:column="10"/></name><argument_list pos:line="7" pos:column="10">(<argument><expr><name pos:line="7" pos:column="11">PLUGIN_NAME<pos:position pos:line="7" pos:column="22"/></name> <literal type="string" pos:line="7" pos:column="23">" plugin: malloc failed."<pos:position pos:line="7" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="50"/></expr_stmt>
    <return pos:line="8" pos:column="5">return <expr><operator pos:line="8" pos:column="12">-<pos:position pos:line="8" pos:column="13"/></operator><literal type="number" pos:line="8" pos:column="13">1<pos:position pos:line="8" pos:column="14"/></literal></expr>;<pos:position pos:line="8" pos:column="15"/></return>
  }<pos:position pos:line="9" pos:column="4"/></block></then></if>

  <decl_stmt><decl><type><name pos:line="11" pos:column="3">unsigned<pos:position pos:line="11" pos:column="11"/></name> <name pos:line="11" pos:column="12">char<pos:position pos:line="11" pos:column="16"/></name> <modifier pos:line="11" pos:column="17">*<pos:position pos:line="11" pos:column="18"/></modifier></type><name pos:line="11" pos:column="18">cpumaps<pos:position pos:line="11" pos:column="25"/></name> <init pos:line="11" pos:column="26">= <expr><call><name pos:line="11" pos:column="28">calloc<pos:position pos:line="11" pos:column="34"/></name><argument_list pos:line="11" pos:column="34">(<argument><expr><name pos:line="11" pos:column="35">nr_virt_cpu<pos:position pos:line="11" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="48">cpu_map_len<pos:position pos:line="11" pos:column="59"/></name></expr></argument>)<pos:position pos:line="11" pos:column="60"/></argument_list></call></expr></init></decl>;<pos:position pos:line="11" pos:column="61"/></decl_stmt>
  <if pos:line="12" pos:column="3">if <condition pos:line="12" pos:column="6">(<expr><name pos:line="12" pos:column="7">cpumaps<pos:position pos:line="12" pos:column="14"/></name> <operator pos:line="12" pos:column="15">==<pos:position pos:line="12" pos:column="17"/></operator> <name pos:line="12" pos:column="18">NULL<pos:position pos:line="12" pos:column="22"/></name></expr>)<pos:position pos:line="12" pos:column="23"/></condition><then pos:line="12" pos:column="23"> <block pos:line="12" pos:column="24">{
    <expr_stmt><expr><call><name pos:line="13" pos:column="5">ERROR<pos:position pos:line="13" pos:column="10"/></name><argument_list pos:line="13" pos:column="10">(<argument><expr><name pos:line="13" pos:column="11">PLUGIN_NAME<pos:position pos:line="13" pos:column="22"/></name> <literal type="string" pos:line="13" pos:column="23">" plugin: malloc failed."<pos:position pos:line="13" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="50"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="14" pos:column="5">sfree<pos:position pos:line="14" pos:column="10"/></name><argument_list pos:line="14" pos:column="10">(<argument><expr><name pos:line="14" pos:column="11">vinfo<pos:position pos:line="14" pos:column="16"/></name></expr></argument>)<pos:position pos:line="14" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="18"/></expr_stmt>
    <return pos:line="15" pos:column="5">return <expr><operator pos:line="15" pos:column="12">-<pos:position pos:line="15" pos:column="13"/></operator><literal type="number" pos:line="15" pos:column="13">1<pos:position pos:line="15" pos:column="14"/></literal></expr>;<pos:position pos:line="15" pos:column="15"/></return>
  }<pos:position pos:line="16" pos:column="4"/></block></then></if>

  <decl_stmt><decl><type><name pos:line="18" pos:column="3">int<pos:position pos:line="18" pos:column="6"/></name></type> <name pos:line="18" pos:column="7">status<pos:position pos:line="18" pos:column="13"/></name> <init pos:line="18" pos:column="14">=
      <expr><call><name pos:line="19" pos:column="7">virDomainGetVcpus<pos:position pos:line="19" pos:column="24"/></name><argument_list pos:line="19" pos:column="24">(<argument><expr><name pos:line="19" pos:column="25">domain<pos:position pos:line="19" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="33">vinfo<pos:position pos:line="19" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="40">nr_virt_cpu<pos:position pos:line="19" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="53">cpumaps<pos:position pos:line="19" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="62">cpu_map_len<pos:position pos:line="19" pos:column="73"/></name></expr></argument>)<pos:position pos:line="19" pos:column="74"/></argument_list></call></expr></init></decl>;<pos:position pos:line="19" pos:column="75"/></decl_stmt>
  <if pos:line="20" pos:column="3">if <condition pos:line="20" pos:column="6">(<expr><name pos:line="20" pos:column="7">status<pos:position pos:line="20" pos:column="13"/></name> <operator pos:line="20" pos:column="14">&lt;<pos:position pos:line="20" pos:column="18"/></operator> <literal type="number" pos:line="20" pos:column="16">0<pos:position pos:line="20" pos:column="17"/></literal></expr>)<pos:position pos:line="20" pos:column="18"/></condition><then pos:line="20" pos:column="18"> <block pos:line="20" pos:column="19">{
    <expr_stmt><expr><call><name pos:line="21" pos:column="5">ERROR<pos:position pos:line="21" pos:column="10"/></name><argument_list pos:line="21" pos:column="10">(<argument><expr><name pos:line="21" pos:column="11">PLUGIN_NAME<pos:position pos:line="21" pos:column="22"/></name> <literal type="string" pos:line="21" pos:column="23">" plugin: virDomainGetVcpus failed with status %i."<pos:position pos:line="21" pos:column="74"/></literal></expr></argument>,
          <argument><expr><name pos:line="22" pos:column="11">status<pos:position pos:line="22" pos:column="17"/></name></expr></argument>)<pos:position pos:line="22" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="19"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="23" pos:column="5">sfree<pos:position pos:line="23" pos:column="10"/></name><argument_list pos:line="23" pos:column="10">(<argument><expr><name pos:line="23" pos:column="11">cpumaps<pos:position pos:line="23" pos:column="18"/></name></expr></argument>)<pos:position pos:line="23" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="20"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="24" pos:column="5">sfree<pos:position pos:line="24" pos:column="10"/></name><argument_list pos:line="24" pos:column="10">(<argument><expr><name pos:line="24" pos:column="11">vinfo<pos:position pos:line="24" pos:column="16"/></name></expr></argument>)<pos:position pos:line="24" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="18"/></expr_stmt>
    <return pos:line="25" pos:column="5">return <expr><name pos:line="25" pos:column="12">status<pos:position pos:line="25" pos:column="18"/></name></expr>;<pos:position pos:line="25" pos:column="19"/></return>
  }<pos:position pos:line="26" pos:column="4"/></block></then></if>

  <for pos:line="28" pos:column="3">for <control pos:line="28" pos:column="7">(<init><decl><type><name pos:line="28" pos:column="8">int<pos:position pos:line="28" pos:column="11"/></name></type> <name pos:line="28" pos:column="12">i<pos:position pos:line="28" pos:column="13"/></name> <init pos:line="28" pos:column="14">= <expr><literal type="number" pos:line="28" pos:column="16">0<pos:position pos:line="28" pos:column="17"/></literal></expr></init></decl>;<pos:position pos:line="28" pos:column="18"/></init> <condition><expr><name pos:line="28" pos:column="19">i<pos:position pos:line="28" pos:column="20"/></name> <operator pos:line="28" pos:column="21">&lt;<pos:position pos:line="28" pos:column="25"/></operator> <name pos:line="28" pos:column="23">nr_virt_cpu<pos:position pos:line="28" pos:column="34"/></name></expr>;<pos:position pos:line="28" pos:column="35"/></condition> <incr><expr><operator pos:line="28" pos:column="36">++<pos:position pos:line="28" pos:column="38"/></operator><name pos:line="28" pos:column="38">i<pos:position pos:line="28" pos:column="39"/></name></expr></incr>)<pos:position pos:line="28" pos:column="40"/></control> <block pos:line="28" pos:column="41">{
    <expr_stmt><expr><call><name pos:line="29" pos:column="5">vcpu_submit<pos:position pos:line="29" pos:column="16"/></name><argument_list pos:line="29" pos:column="16">(<argument><expr><name><name pos:line="29" pos:column="17">vinfo<pos:position pos:line="29" pos:column="22"/></name><index pos:line="29" pos:column="22">[<expr><name pos:line="29" pos:column="23">i<pos:position pos:line="29" pos:column="24"/></name></expr>]<pos:position pos:line="29" pos:column="25"/></index></name><operator pos:line="29" pos:column="25">.<pos:position pos:line="29" pos:column="26"/></operator><name pos:line="29" pos:column="26">cpuTime<pos:position pos:line="29" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="35">domain<pos:position pos:line="29" pos:column="41"/></name></expr></argument>, <argument><expr><name><name pos:line="29" pos:column="43">vinfo<pos:position pos:line="29" pos:column="48"/></name><index pos:line="29" pos:column="48">[<expr><name pos:line="29" pos:column="49">i<pos:position pos:line="29" pos:column="50"/></name></expr>]<pos:position pos:line="29" pos:column="51"/></index></name><operator pos:line="29" pos:column="51">.<pos:position pos:line="29" pos:column="52"/></operator><name pos:line="29" pos:column="52">number<pos:position pos:line="29" pos:column="58"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="29" pos:column="60">"virt_vcpu"<pos:position pos:line="29" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="73"/></expr_stmt>
    <if pos:line="30" pos:column="5">if <condition pos:line="30" pos:column="8">(<expr><name pos:line="30" pos:column="9">extra_stats<pos:position pos:line="30" pos:column="20"/></name> <operator pos:line="30" pos:column="21">&amp;<pos:position pos:line="30" pos:column="26"/></operator> <name pos:line="30" pos:column="23">ex_stats_vcpupin<pos:position pos:line="30" pos:column="39"/></name></expr>)<pos:position pos:line="30" pos:column="40"/></condition><then pos:line="30" pos:column="40">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="31" pos:column="7">vcpu_pin_submit<pos:position pos:line="31" pos:column="22"/></name><argument_list pos:line="31" pos:column="22">(<argument><expr><name pos:line="31" pos:column="23">domain<pos:position pos:line="31" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="31">max_cpus<pos:position pos:line="31" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="41">i<pos:position pos:line="31" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="44">cpumaps<pos:position pos:line="31" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="53">cpu_map_len<pos:position pos:line="31" pos:column="64"/></name></expr></argument>)<pos:position pos:line="31" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="66"/></expr_stmt></block></then></if>
  }<pos:position pos:line="32" pos:column="4"/></block></for>

  <expr_stmt><expr><call><name pos:line="34" pos:column="3">sfree<pos:position pos:line="34" pos:column="8"/></name><argument_list pos:line="34" pos:column="8">(<argument><expr><name pos:line="34" pos:column="9">cpumaps<pos:position pos:line="34" pos:column="16"/></name></expr></argument>)<pos:position pos:line="34" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="18"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="35" pos:column="3">sfree<pos:position pos:line="35" pos:column="8"/></name><argument_list pos:line="35" pos:column="8">(<argument><expr><name pos:line="35" pos:column="9">vinfo<pos:position pos:line="35" pos:column="14"/></name></expr></argument>)<pos:position pos:line="35" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="16"/></expr_stmt>
  <return pos:line="36" pos:column="3">return <expr><literal type="number" pos:line="36" pos:column="10">0<pos:position pos:line="36" pos:column="11"/></literal></expr>;<pos:position pos:line="36" pos:column="12"/></return>
}<pos:position pos:line="37" pos:column="2"/></block></function></unit>
