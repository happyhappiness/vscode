<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_888_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">memcached_query_daemon<pos:position pos:line="1" pos:column="34"/></name><parameter_list pos:line="1" pos:column="34">(<parameter><decl><type><name pos:line="1" pos:column="35">char<pos:position pos:line="1" pos:column="39"/></name> <modifier pos:line="1" pos:column="40">*<pos:position pos:line="1" pos:column="41"/></modifier></type><name pos:line="1" pos:column="41">buffer<pos:position pos:line="1" pos:column="47"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="49">size_t<pos:position pos:line="1" pos:column="55"/></name></type> <name pos:line="1" pos:column="56">buffer_size<pos:position pos:line="1" pos:column="67"/></name></decl></parameter>,
                                  <parameter><decl><type><name pos:line="2" pos:column="35">memcached_t<pos:position pos:line="2" pos:column="46"/></name> <modifier pos:line="2" pos:column="47">*<pos:position pos:line="2" pos:column="48"/></modifier></type><name pos:line="2" pos:column="48">st<pos:position pos:line="2" pos:column="50"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="51"/></parameter_list> <block pos:line="2" pos:column="52">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">int<pos:position pos:line="3" pos:column="6"/></name></type> <name pos:line="3" pos:column="7">status<pos:position pos:line="3" pos:column="13"/></name></decl>;<pos:position pos:line="3" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">size_t<pos:position pos:line="4" pos:column="9"/></name></type> <name pos:line="4" pos:column="10">buffer_fill<pos:position pos:line="4" pos:column="21"/></name></decl>;<pos:position pos:line="4" pos:column="22"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="6" pos:column="3">memcached_connect<pos:position pos:line="6" pos:column="20"/></name><argument_list pos:line="6" pos:column="20">(<argument><expr><name pos:line="6" pos:column="21">st<pos:position pos:line="6" pos:column="23"/></name></expr></argument>)<pos:position pos:line="6" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="25"/></expr_stmt>
  <if pos:line="7" pos:column="3">if <condition pos:line="7" pos:column="6">(<expr><name><name pos:line="7" pos:column="7">st<pos:position pos:line="7" pos:column="9"/></name><operator pos:line="7" pos:column="9">-&gt;<pos:position pos:line="7" pos:column="14"/></operator><name pos:line="7" pos:column="11">fd<pos:position pos:line="7" pos:column="13"/></name></name> <operator pos:line="7" pos:column="14">&lt;<pos:position pos:line="7" pos:column="18"/></operator> <literal type="number" pos:line="7" pos:column="16">0<pos:position pos:line="7" pos:column="17"/></literal></expr>)<pos:position pos:line="7" pos:column="18"/></condition><then pos:line="7" pos:column="18"> <block pos:line="7" pos:column="19">{
    <expr_stmt><expr><call><name pos:line="8" pos:column="5">ERROR<pos:position pos:line="8" pos:column="10"/></name><argument_list pos:line="8" pos:column="10">(<argument><expr><literal type="string" pos:line="8" pos:column="11">"memcached plugin: Instance \"%s\" could not connect to daemon."<pos:position pos:line="8" pos:column="75"/></literal></expr></argument>,
          <argument><expr><name><name pos:line="9" pos:column="11">st<pos:position pos:line="9" pos:column="13"/></name><operator pos:line="9" pos:column="13">-&gt;<pos:position pos:line="9" pos:column="18"/></operator><name pos:line="9" pos:column="15">name<pos:position pos:line="9" pos:column="19"/></name></name></expr></argument>)<pos:position pos:line="9" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="21"/></expr_stmt>
    <return pos:line="10" pos:column="5">return <expr><operator pos:line="10" pos:column="12">-<pos:position pos:line="10" pos:column="13"/></operator><literal type="number" pos:line="10" pos:column="13">1<pos:position pos:line="10" pos:column="14"/></literal></expr>;<pos:position pos:line="10" pos:column="15"/></return>
  }<pos:position pos:line="11" pos:column="4"/></block></then></if>

  <decl_stmt><decl><type><name><name pos:line="13" pos:column="3">struct<pos:position pos:line="13" pos:column="9"/></name> <name pos:line="13" pos:column="10">pollfd<pos:position pos:line="13" pos:column="16"/></name></name></type> <name pos:line="13" pos:column="17">pollfd<pos:position pos:line="13" pos:column="23"/></name> <init pos:line="13" pos:column="24">= <expr><block pos:line="13" pos:column="26">{
      <expr><operator pos:line="14" pos:column="7">.<pos:position pos:line="14" pos:column="8"/></operator><name pos:line="14" pos:column="8">fd<pos:position pos:line="14" pos:column="10"/></name> <operator pos:line="14" pos:column="11">=<pos:position pos:line="14" pos:column="12"/></operator> <name><name pos:line="14" pos:column="13">st<pos:position pos:line="14" pos:column="15"/></name><operator pos:line="14" pos:column="15">-&gt;<pos:position pos:line="14" pos:column="20"/></operator><name pos:line="14" pos:column="17">fd<pos:position pos:line="14" pos:column="19"/></name></name></expr>, <expr><operator pos:line="14" pos:column="21">.<pos:position pos:line="14" pos:column="22"/></operator><name pos:line="14" pos:column="22">events<pos:position pos:line="14" pos:column="28"/></name> <operator pos:line="14" pos:column="29">=<pos:position pos:line="14" pos:column="30"/></operator> <name pos:line="14" pos:column="31">POLLOUT<pos:position pos:line="14" pos:column="38"/></name></expr>,
  }<pos:position pos:line="15" pos:column="4"/></block></expr></init></decl>;<pos:position pos:line="15" pos:column="5"/></decl_stmt>

  <do pos:line="17" pos:column="3">do
    <block type="pseudo"><expr_stmt><expr><name pos:line="18" pos:column="5">status<pos:position pos:line="18" pos:column="11"/></name> <operator pos:line="18" pos:column="12">=<pos:position pos:line="18" pos:column="13"/></operator> <call><name pos:line="18" pos:column="14">poll<pos:position pos:line="18" pos:column="18"/></name><argument_list pos:line="18" pos:column="18">(<argument><expr><operator pos:line="18" pos:column="19">&amp;<pos:position pos:line="18" pos:column="24"/></operator><name pos:line="18" pos:column="20">pollfd<pos:position pos:line="18" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="18" pos:column="28">1<pos:position pos:line="18" pos:column="29"/></literal></expr></argument>, <argument><expr><name pos:line="18" pos:column="31">MEMCACHED_IO_TIMEOUT<pos:position pos:line="18" pos:column="51"/></name></expr></argument>)<pos:position pos:line="18" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="53"/></expr_stmt></block>
  while <condition pos:line="19" pos:column="9">(<expr><name pos:line="19" pos:column="10">status<pos:position pos:line="19" pos:column="16"/></name> <operator pos:line="19" pos:column="17">&lt;<pos:position pos:line="19" pos:column="21"/></operator> <literal type="number" pos:line="19" pos:column="19">0<pos:position pos:line="19" pos:column="20"/></literal> <operator pos:line="19" pos:column="21">&amp;&amp;<pos:position pos:line="19" pos:column="31"/></operator> <name pos:line="19" pos:column="24">errno<pos:position pos:line="19" pos:column="29"/></name> <operator pos:line="19" pos:column="30">==<pos:position pos:line="19" pos:column="32"/></operator> <name pos:line="19" pos:column="33">EINTR<pos:position pos:line="19" pos:column="38"/></name></expr>)<pos:position pos:line="19" pos:column="39"/></condition>;<pos:position pos:line="19" pos:column="40"/></do>

  <if pos:line="21" pos:column="3">if <condition pos:line="21" pos:column="6">(<expr><name pos:line="21" pos:column="7">status<pos:position pos:line="21" pos:column="13"/></name> <operator pos:line="21" pos:column="14">&lt;=<pos:position pos:line="21" pos:column="19"/></operator> <literal type="number" pos:line="21" pos:column="17">0<pos:position pos:line="21" pos:column="18"/></literal></expr>)<pos:position pos:line="21" pos:column="19"/></condition><then pos:line="21" pos:column="19"> <block pos:line="21" pos:column="20">{
    <expr_stmt><expr><call><name pos:line="22" pos:column="5">ERROR<pos:position pos:line="22" pos:column="10"/></name><argument_list pos:line="22" pos:column="10">(<argument><expr><literal type="string" pos:line="22" pos:column="11">"memcached plugin: poll() failed for write() call."<pos:position pos:line="22" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="64"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="23" pos:column="5">close<pos:position pos:line="23" pos:column="10"/></name><argument_list pos:line="23" pos:column="10">(<argument><expr><name><name pos:line="23" pos:column="11">st<pos:position pos:line="23" pos:column="13"/></name><operator pos:line="23" pos:column="13">-&gt;<pos:position pos:line="23" pos:column="18"/></operator><name pos:line="23" pos:column="15">fd<pos:position pos:line="23" pos:column="17"/></name></name></expr></argument>)<pos:position pos:line="23" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="19"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="24" pos:column="5">st<pos:position pos:line="24" pos:column="7"/></name><operator pos:line="24" pos:column="7">-&gt;<pos:position pos:line="24" pos:column="12"/></operator><name pos:line="24" pos:column="9">fd<pos:position pos:line="24" pos:column="11"/></name></name> <operator pos:line="24" pos:column="12">=<pos:position pos:line="24" pos:column="13"/></operator> <operator pos:line="24" pos:column="14">-<pos:position pos:line="24" pos:column="15"/></operator><literal type="number" pos:line="24" pos:column="15">1<pos:position pos:line="24" pos:column="16"/></literal></expr>;<pos:position pos:line="24" pos:column="17"/></expr_stmt>
    <return pos:line="25" pos:column="5">return <expr><operator pos:line="25" pos:column="12">-<pos:position pos:line="25" pos:column="13"/></operator><literal type="number" pos:line="25" pos:column="13">1<pos:position pos:line="25" pos:column="14"/></literal></expr>;<pos:position pos:line="25" pos:column="15"/></return>
  }<pos:position pos:line="26" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="28" pos:column="3">status<pos:position pos:line="28" pos:column="9"/></name> <operator pos:line="28" pos:column="10">=<pos:position pos:line="28" pos:column="11"/></operator> <operator pos:line="28" pos:column="12">(<pos:position pos:line="28" pos:column="13"/></operator><name pos:line="28" pos:column="13">int<pos:position pos:line="28" pos:column="16"/></name><operator pos:line="28" pos:column="16">)<pos:position pos:line="28" pos:column="17"/></operator><call><name pos:line="28" pos:column="17">swrite<pos:position pos:line="28" pos:column="23"/></name><argument_list pos:line="28" pos:column="23">(<argument><expr><name><name pos:line="28" pos:column="24">st<pos:position pos:line="28" pos:column="26"/></name><operator pos:line="28" pos:column="26">-&gt;<pos:position pos:line="28" pos:column="31"/></operator><name pos:line="28" pos:column="28">fd<pos:position pos:line="28" pos:column="30"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="28" pos:column="32">"stats\r\n"<pos:position pos:line="28" pos:column="43"/></literal></expr></argument>, <argument><expr><call><name pos:line="28" pos:column="45">strlen<pos:position pos:line="28" pos:column="51"/></name><argument_list pos:line="28" pos:column="51">(<argument><expr><literal type="string" pos:line="28" pos:column="52">"stats\r\n"<pos:position pos:line="28" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="64"/></argument_list></call></expr></argument>)<pos:position pos:line="28" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="66"/></expr_stmt>
  <if pos:line="29" pos:column="3">if <condition pos:line="29" pos:column="6">(<expr><name pos:line="29" pos:column="7">status<pos:position pos:line="29" pos:column="13"/></name> <operator pos:line="29" pos:column="14">!=<pos:position pos:line="29" pos:column="16"/></operator> <literal type="number" pos:line="29" pos:column="17">0<pos:position pos:line="29" pos:column="18"/></literal></expr>)<pos:position pos:line="29" pos:column="19"/></condition><then pos:line="29" pos:column="19"> <block pos:line="29" pos:column="20">{
    <decl_stmt><decl><type><name pos:line="30" pos:column="5">char<pos:position pos:line="30" pos:column="9"/></name></type> <name><name pos:line="30" pos:column="10">errbuf<pos:position pos:line="30" pos:column="16"/></name><index pos:line="30" pos:column="16">[<expr><literal type="number" pos:line="30" pos:column="17">1024<pos:position pos:line="30" pos:column="21"/></literal></expr>]<pos:position pos:line="30" pos:column="22"/></index></name></decl>;<pos:position pos:line="30" pos:column="23"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="31" pos:column="5">ERROR<pos:position pos:line="31" pos:column="10"/></name><argument_list pos:line="31" pos:column="10">(<argument><expr><literal type="string" pos:line="31" pos:column="11">"memcached plugin: Instance \"%s\": write(2) failed: %s"<pos:position pos:line="31" pos:column="67"/></literal></expr></argument>, <argument><expr><name><name pos:line="31" pos:column="69">st<pos:position pos:line="31" pos:column="71"/></name><operator pos:line="31" pos:column="71">-&gt;<pos:position pos:line="31" pos:column="76"/></operator><name pos:line="31" pos:column="73">name<pos:position pos:line="31" pos:column="77"/></name></name></expr></argument>,
          <argument><expr><call><name pos:line="32" pos:column="11">sstrerror<pos:position pos:line="32" pos:column="20"/></name><argument_list pos:line="32" pos:column="20">(<argument><expr><name pos:line="32" pos:column="21">errno<pos:position pos:line="32" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="28">errbuf<pos:position pos:line="32" pos:column="34"/></name></expr></argument>, <argument><expr><sizeof pos:line="32" pos:column="36">sizeof<argument_list pos:line="32" pos:column="42">(<argument><expr><name pos:line="32" pos:column="43">errbuf<pos:position pos:line="32" pos:column="49"/></name></expr></argument>)<pos:position pos:line="32" pos:column="50"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="32" pos:column="51"/></argument_list></call></expr></argument>)<pos:position pos:line="32" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="53"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="33" pos:column="5">shutdown<pos:position pos:line="33" pos:column="13"/></name><argument_list pos:line="33" pos:column="13">(<argument><expr><name><name pos:line="33" pos:column="14">st<pos:position pos:line="33" pos:column="16"/></name><operator pos:line="33" pos:column="16">-&gt;<pos:position pos:line="33" pos:column="21"/></operator><name pos:line="33" pos:column="18">fd<pos:position pos:line="33" pos:column="20"/></name></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="22">SHUT_RDWR<pos:position pos:line="33" pos:column="31"/></name></expr></argument>)<pos:position pos:line="33" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="33"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="34" pos:column="5">close<pos:position pos:line="34" pos:column="10"/></name><argument_list pos:line="34" pos:column="10">(<argument><expr><name><name pos:line="34" pos:column="11">st<pos:position pos:line="34" pos:column="13"/></name><operator pos:line="34" pos:column="13">-&gt;<pos:position pos:line="34" pos:column="18"/></operator><name pos:line="34" pos:column="15">fd<pos:position pos:line="34" pos:column="17"/></name></name></expr></argument>)<pos:position pos:line="34" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="19"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="35" pos:column="5">st<pos:position pos:line="35" pos:column="7"/></name><operator pos:line="35" pos:column="7">-&gt;<pos:position pos:line="35" pos:column="12"/></operator><name pos:line="35" pos:column="9">fd<pos:position pos:line="35" pos:column="11"/></name></name> <operator pos:line="35" pos:column="12">=<pos:position pos:line="35" pos:column="13"/></operator> <operator pos:line="35" pos:column="14">-<pos:position pos:line="35" pos:column="15"/></operator><literal type="number" pos:line="35" pos:column="15">1<pos:position pos:line="35" pos:column="16"/></literal></expr>;<pos:position pos:line="35" pos:column="17"/></expr_stmt>
    <return pos:line="36" pos:column="5">return <expr><operator pos:line="36" pos:column="12">-<pos:position pos:line="36" pos:column="13"/></operator><literal type="number" pos:line="36" pos:column="13">1<pos:position pos:line="36" pos:column="14"/></literal></expr>;<pos:position pos:line="36" pos:column="15"/></return>
  }<pos:position pos:line="37" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="39" pos:column="3">/* receive data from the memcached daemon */</comment>
  <expr_stmt><expr><call><name pos:line="40" pos:column="3">memset<pos:position pos:line="40" pos:column="9"/></name><argument_list pos:line="40" pos:column="9">(<argument><expr><name pos:line="40" pos:column="10">buffer<pos:position pos:line="40" pos:column="16"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="40" pos:column="18">0<pos:position pos:line="40" pos:column="19"/></literal></expr></argument>, <argument><expr><name pos:line="40" pos:column="21">buffer_size<pos:position pos:line="40" pos:column="32"/></name></expr></argument>)<pos:position pos:line="40" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="34"/></expr_stmt>

  <expr_stmt><expr><name pos:line="42" pos:column="3">buffer_fill<pos:position pos:line="42" pos:column="14"/></name> <operator pos:line="42" pos:column="15">=<pos:position pos:line="42" pos:column="16"/></operator> <literal type="number" pos:line="42" pos:column="17">0<pos:position pos:line="42" pos:column="18"/></literal></expr>;<pos:position pos:line="42" pos:column="19"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="43" pos:column="3">pollfd<pos:position pos:line="43" pos:column="9"/></name><operator pos:line="43" pos:column="9">.<pos:position pos:line="43" pos:column="10"/></operator><name pos:line="43" pos:column="10">events<pos:position pos:line="43" pos:column="16"/></name></name> <operator pos:line="43" pos:column="17">=<pos:position pos:line="43" pos:column="18"/></operator> <name pos:line="43" pos:column="19">POLLIN<pos:position pos:line="43" pos:column="25"/></name></expr>;<pos:position pos:line="43" pos:column="26"/></expr_stmt>
  <while pos:line="44" pos:column="3">while <condition pos:line="44" pos:column="9">(<expr><literal type="number" pos:line="44" pos:column="10">1<pos:position pos:line="44" pos:column="11"/></literal></expr>)<pos:position pos:line="44" pos:column="12"/></condition> <block pos:line="44" pos:column="13">{
    <do pos:line="45" pos:column="5">do
      <block type="pseudo"><expr_stmt><expr><name pos:line="46" pos:column="7">status<pos:position pos:line="46" pos:column="13"/></name> <operator pos:line="46" pos:column="14">=<pos:position pos:line="46" pos:column="15"/></operator> <call><name pos:line="46" pos:column="16">poll<pos:position pos:line="46" pos:column="20"/></name><argument_list pos:line="46" pos:column="20">(<argument><expr><operator pos:line="46" pos:column="21">&amp;<pos:position pos:line="46" pos:column="26"/></operator><name pos:line="46" pos:column="22">pollfd<pos:position pos:line="46" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="46" pos:column="30">1<pos:position pos:line="46" pos:column="31"/></literal></expr></argument>, <argument><expr><name pos:line="46" pos:column="33">MEMCACHED_IO_TIMEOUT<pos:position pos:line="46" pos:column="53"/></name></expr></argument>)<pos:position pos:line="46" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="55"/></expr_stmt></block>
    while <condition pos:line="47" pos:column="11">(<expr><name pos:line="47" pos:column="12">status<pos:position pos:line="47" pos:column="18"/></name> <operator pos:line="47" pos:column="19">&lt;<pos:position pos:line="47" pos:column="23"/></operator> <literal type="number" pos:line="47" pos:column="21">0<pos:position pos:line="47" pos:column="22"/></literal> <operator pos:line="47" pos:column="23">&amp;&amp;<pos:position pos:line="47" pos:column="33"/></operator> <name pos:line="47" pos:column="26">errno<pos:position pos:line="47" pos:column="31"/></name> <operator pos:line="47" pos:column="32">==<pos:position pos:line="47" pos:column="34"/></operator> <name pos:line="47" pos:column="35">EINTR<pos:position pos:line="47" pos:column="40"/></name></expr>)<pos:position pos:line="47" pos:column="41"/></condition>;<pos:position pos:line="47" pos:column="42"/></do>

    <if pos:line="49" pos:column="5">if <condition pos:line="49" pos:column="8">(<expr><name pos:line="49" pos:column="9">status<pos:position pos:line="49" pos:column="15"/></name> <operator pos:line="49" pos:column="16">&lt;=<pos:position pos:line="49" pos:column="21"/></operator> <literal type="number" pos:line="49" pos:column="19">0<pos:position pos:line="49" pos:column="20"/></literal></expr>)<pos:position pos:line="49" pos:column="21"/></condition><then pos:line="49" pos:column="21"> <block pos:line="49" pos:column="22">{
      <expr_stmt><expr><call><name pos:line="50" pos:column="7">ERROR<pos:position pos:line="50" pos:column="12"/></name><argument_list pos:line="50" pos:column="12">(<argument><expr><literal type="string" pos:line="50" pos:column="13">"memcached plugin: Instance \"%s\": Timeout reading from socket"<pos:position pos:line="50" pos:column="77"/></literal></expr></argument>,
            <argument><expr><name><name pos:line="51" pos:column="13">st<pos:position pos:line="51" pos:column="15"/></name><operator pos:line="51" pos:column="15">-&gt;<pos:position pos:line="51" pos:column="20"/></operator><name pos:line="51" pos:column="17">name<pos:position pos:line="51" pos:column="21"/></name></name></expr></argument>)<pos:position pos:line="51" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="23"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="52" pos:column="7">close<pos:position pos:line="52" pos:column="12"/></name><argument_list pos:line="52" pos:column="12">(<argument><expr><name><name pos:line="52" pos:column="13">st<pos:position pos:line="52" pos:column="15"/></name><operator pos:line="52" pos:column="15">-&gt;<pos:position pos:line="52" pos:column="20"/></operator><name pos:line="52" pos:column="17">fd<pos:position pos:line="52" pos:column="19"/></name></name></expr></argument>)<pos:position pos:line="52" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="21"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="53" pos:column="7">st<pos:position pos:line="53" pos:column="9"/></name><operator pos:line="53" pos:column="9">-&gt;<pos:position pos:line="53" pos:column="14"/></operator><name pos:line="53" pos:column="11">fd<pos:position pos:line="53" pos:column="13"/></name></name> <operator pos:line="53" pos:column="14">=<pos:position pos:line="53" pos:column="15"/></operator> <operator pos:line="53" pos:column="16">-<pos:position pos:line="53" pos:column="17"/></operator><literal type="number" pos:line="53" pos:column="17">1<pos:position pos:line="53" pos:column="18"/></literal></expr>;<pos:position pos:line="53" pos:column="19"/></expr_stmt>
      <return pos:line="54" pos:column="7">return <expr><operator pos:line="54" pos:column="14">-<pos:position pos:line="54" pos:column="15"/></operator><literal type="number" pos:line="54" pos:column="15">1<pos:position pos:line="54" pos:column="16"/></literal></expr>;<pos:position pos:line="54" pos:column="17"/></return>
    }<pos:position pos:line="55" pos:column="6"/></block></then></if>

    <do pos:line="57" pos:column="5">do
      <block type="pseudo"><expr_stmt><expr><name pos:line="58" pos:column="7">status<pos:position pos:line="58" pos:column="13"/></name> <operator pos:line="58" pos:column="14">=<pos:position pos:line="58" pos:column="15"/></operator> <operator pos:line="58" pos:column="16">(<pos:position pos:line="58" pos:column="17"/></operator><name pos:line="58" pos:column="17">int<pos:position pos:line="58" pos:column="20"/></name><operator pos:line="58" pos:column="20">)<pos:position pos:line="58" pos:column="21"/></operator><call><name pos:line="58" pos:column="21">recv<pos:position pos:line="58" pos:column="25"/></name><argument_list pos:line="58" pos:column="25">(<argument><expr><name><name pos:line="58" pos:column="26">st<pos:position pos:line="58" pos:column="28"/></name><operator pos:line="58" pos:column="28">-&gt;<pos:position pos:line="58" pos:column="33"/></operator><name pos:line="58" pos:column="30">fd<pos:position pos:line="58" pos:column="32"/></name></name></expr></argument>, <argument><expr><name pos:line="58" pos:column="34">buffer<pos:position pos:line="58" pos:column="40"/></name> <operator pos:line="58" pos:column="41">+<pos:position pos:line="58" pos:column="42"/></operator> <name pos:line="58" pos:column="43">buffer_fill<pos:position pos:line="58" pos:column="54"/></name></expr></argument>,
                         <argument><expr><name pos:line="59" pos:column="26">buffer_size<pos:position pos:line="59" pos:column="37"/></name> <operator pos:line="59" pos:column="38">-<pos:position pos:line="59" pos:column="39"/></operator> <name pos:line="59" pos:column="40">buffer_fill<pos:position pos:line="59" pos:column="51"/></name></expr></argument>, <comment type="block" pos:line="59" pos:column="53">/* flags = */</comment> <argument><expr><literal type="number" pos:line="59" pos:column="67">0<pos:position pos:line="59" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="59" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="70"/></expr_stmt></block>
    while <condition pos:line="60" pos:column="11">(<expr><name pos:line="60" pos:column="12">status<pos:position pos:line="60" pos:column="18"/></name> <operator pos:line="60" pos:column="19">&lt;<pos:position pos:line="60" pos:column="23"/></operator> <literal type="number" pos:line="60" pos:column="21">0<pos:position pos:line="60" pos:column="22"/></literal> <operator pos:line="60" pos:column="23">&amp;&amp;<pos:position pos:line="60" pos:column="33"/></operator> <name pos:line="60" pos:column="26">errno<pos:position pos:line="60" pos:column="31"/></name> <operator pos:line="60" pos:column="32">==<pos:position pos:line="60" pos:column="34"/></operator> <name pos:line="60" pos:column="35">EINTR<pos:position pos:line="60" pos:column="40"/></name></expr>)<pos:position pos:line="60" pos:column="41"/></condition>;<pos:position pos:line="60" pos:column="42"/></do>

    <decl_stmt><decl><type><name pos:line="62" pos:column="5">char<pos:position pos:line="62" pos:column="9"/></name> <specifier pos:line="62" pos:column="10">const<pos:position pos:line="62" pos:column="15"/></specifier></type> <name><name pos:line="62" pos:column="16">end_token<pos:position pos:line="62" pos:column="25"/></name><index pos:line="62" pos:column="25">[<expr><literal type="number" pos:line="62" pos:column="26">5<pos:position pos:line="62" pos:column="27"/></literal></expr>]<pos:position pos:line="62" pos:column="28"/></index></name> <init pos:line="62" pos:column="29">= <expr><block pos:line="62" pos:column="31">{<expr><literal type="char" pos:line="62" pos:column="32">'E'<pos:position pos:line="62" pos:column="35"/></literal></expr>, <expr><literal type="char" pos:line="62" pos:column="37">'N'<pos:position pos:line="62" pos:column="40"/></literal></expr>, <expr><literal type="char" pos:line="62" pos:column="42">'D'<pos:position pos:line="62" pos:column="45"/></literal></expr>, <expr><literal type="char" pos:line="62" pos:column="47">'\r'<pos:position pos:line="62" pos:column="51"/></literal></expr>, <expr><literal type="char" pos:line="62" pos:column="53">'\n'<pos:position pos:line="62" pos:column="57"/></literal></expr>}<pos:position pos:line="62" pos:column="58"/></block></expr></init></decl>;<pos:position pos:line="62" pos:column="59"/></decl_stmt>
    <if pos:line="63" pos:column="5">if <condition pos:line="63" pos:column="8">(<expr><name pos:line="63" pos:column="9">status<pos:position pos:line="63" pos:column="15"/></name> <operator pos:line="63" pos:column="16">&lt;<pos:position pos:line="63" pos:column="20"/></operator> <literal type="number" pos:line="63" pos:column="18">0<pos:position pos:line="63" pos:column="19"/></literal></expr>)<pos:position pos:line="63" pos:column="20"/></condition><then pos:line="63" pos:column="20"> <block pos:line="63" pos:column="21">{
      <decl_stmt><decl><type><name pos:line="64" pos:column="7">char<pos:position pos:line="64" pos:column="11"/></name></type> <name><name pos:line="64" pos:column="12">errbuf<pos:position pos:line="64" pos:column="18"/></name><index pos:line="64" pos:column="18">[<expr><literal type="number" pos:line="64" pos:column="19">1024<pos:position pos:line="64" pos:column="23"/></literal></expr>]<pos:position pos:line="64" pos:column="24"/></index></name></decl>;<pos:position pos:line="64" pos:column="25"/></decl_stmt>

      <if pos:line="66" pos:column="7">if <condition pos:line="66" pos:column="10">(<expr><operator pos:line="66" pos:column="11">(<pos:position pos:line="66" pos:column="12"/></operator><name pos:line="66" pos:column="12">errno<pos:position pos:line="66" pos:column="17"/></name> <operator pos:line="66" pos:column="18">==<pos:position pos:line="66" pos:column="20"/></operator> <name pos:line="66" pos:column="21">EAGAIN<pos:position pos:line="66" pos:column="27"/></name><operator pos:line="66" pos:column="27">)<pos:position pos:line="66" pos:column="28"/></operator> <operator pos:line="66" pos:column="29">||<pos:position pos:line="66" pos:column="31"/></operator> <operator pos:line="66" pos:column="32">(<pos:position pos:line="66" pos:column="33"/></operator><name pos:line="66" pos:column="33">errno<pos:position pos:line="66" pos:column="38"/></name> <operator pos:line="66" pos:column="39">==<pos:position pos:line="66" pos:column="41"/></operator> <name pos:line="66" pos:column="42">EWOULDBLOCK<pos:position pos:line="66" pos:column="53"/></name><operator pos:line="66" pos:column="53">)<pos:position pos:line="66" pos:column="54"/></operator></expr>)<pos:position pos:line="66" pos:column="55"/></condition><then pos:line="66" pos:column="55">
        <block type="pseudo"><continue pos:line="67" pos:column="9">continue;<pos:position pos:line="67" pos:column="18"/></continue></block></then></if>

      <expr_stmt><expr><call><name pos:line="69" pos:column="7">ERROR<pos:position pos:line="69" pos:column="12"/></name><argument_list pos:line="69" pos:column="12">(<argument><expr><literal type="string" pos:line="69" pos:column="13">"memcached plugin: Instance \"%s\": Error reading from socket: %s"<pos:position pos:line="69" pos:column="79"/></literal></expr></argument>,
            <argument><expr><name><name pos:line="70" pos:column="13">st<pos:position pos:line="70" pos:column="15"/></name><operator pos:line="70" pos:column="15">-&gt;<pos:position pos:line="70" pos:column="20"/></operator><name pos:line="70" pos:column="17">name<pos:position pos:line="70" pos:column="21"/></name></name></expr></argument>, <argument><expr><call><name pos:line="70" pos:column="23">sstrerror<pos:position pos:line="70" pos:column="32"/></name><argument_list pos:line="70" pos:column="32">(<argument><expr><name pos:line="70" pos:column="33">errno<pos:position pos:line="70" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="70" pos:column="40">errbuf<pos:position pos:line="70" pos:column="46"/></name></expr></argument>, <argument><expr><sizeof pos:line="70" pos:column="48">sizeof<argument_list pos:line="70" pos:column="54">(<argument><expr><name pos:line="70" pos:column="55">errbuf<pos:position pos:line="70" pos:column="61"/></name></expr></argument>)<pos:position pos:line="70" pos:column="62"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="70" pos:column="63"/></argument_list></call></expr></argument>)<pos:position pos:line="70" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="65"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="71" pos:column="7">shutdown<pos:position pos:line="71" pos:column="15"/></name><argument_list pos:line="71" pos:column="15">(<argument><expr><name><name pos:line="71" pos:column="16">st<pos:position pos:line="71" pos:column="18"/></name><operator pos:line="71" pos:column="18">-&gt;<pos:position pos:line="71" pos:column="23"/></operator><name pos:line="71" pos:column="20">fd<pos:position pos:line="71" pos:column="22"/></name></name></expr></argument>, <argument><expr><name pos:line="71" pos:column="24">SHUT_RDWR<pos:position pos:line="71" pos:column="33"/></name></expr></argument>)<pos:position pos:line="71" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="35"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="72" pos:column="7">close<pos:position pos:line="72" pos:column="12"/></name><argument_list pos:line="72" pos:column="12">(<argument><expr><name><name pos:line="72" pos:column="13">st<pos:position pos:line="72" pos:column="15"/></name><operator pos:line="72" pos:column="15">-&gt;<pos:position pos:line="72" pos:column="20"/></operator><name pos:line="72" pos:column="17">fd<pos:position pos:line="72" pos:column="19"/></name></name></expr></argument>)<pos:position pos:line="72" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="21"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="73" pos:column="7">st<pos:position pos:line="73" pos:column="9"/></name><operator pos:line="73" pos:column="9">-&gt;<pos:position pos:line="73" pos:column="14"/></operator><name pos:line="73" pos:column="11">fd<pos:position pos:line="73" pos:column="13"/></name></name> <operator pos:line="73" pos:column="14">=<pos:position pos:line="73" pos:column="15"/></operator> <operator pos:line="73" pos:column="16">-<pos:position pos:line="73" pos:column="17"/></operator><literal type="number" pos:line="73" pos:column="17">1<pos:position pos:line="73" pos:column="18"/></literal></expr>;<pos:position pos:line="73" pos:column="19"/></expr_stmt>
      <return pos:line="74" pos:column="7">return <expr><operator pos:line="74" pos:column="14">-<pos:position pos:line="74" pos:column="15"/></operator><literal type="number" pos:line="74" pos:column="15">1<pos:position pos:line="74" pos:column="16"/></literal></expr>;<pos:position pos:line="74" pos:column="17"/></return>
    }<pos:position pos:line="75" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="77" pos:column="5">buffer_fill<pos:position pos:line="77" pos:column="16"/></name> <operator pos:line="77" pos:column="17">+=<pos:position pos:line="77" pos:column="19"/></operator> <operator pos:line="77" pos:column="20">(<pos:position pos:line="77" pos:column="21"/></operator><name pos:line="77" pos:column="21">size_t<pos:position pos:line="77" pos:column="27"/></name><operator pos:line="77" pos:column="27">)<pos:position pos:line="77" pos:column="28"/></operator><name pos:line="77" pos:column="28">status<pos:position pos:line="77" pos:column="34"/></name></expr>;<pos:position pos:line="77" pos:column="35"/></expr_stmt>
    <if pos:line="78" pos:column="5">if <condition pos:line="78" pos:column="8">(<expr><name pos:line="78" pos:column="9">buffer_fill<pos:position pos:line="78" pos:column="20"/></name> <operator pos:line="78" pos:column="21">&gt;<pos:position pos:line="78" pos:column="25"/></operator> <name pos:line="78" pos:column="23">buffer_size<pos:position pos:line="78" pos:column="34"/></name></expr>)<pos:position pos:line="78" pos:column="35"/></condition><then pos:line="78" pos:column="35"> <block pos:line="78" pos:column="36">{
      <expr_stmt><expr><name pos:line="79" pos:column="7">buffer_fill<pos:position pos:line="79" pos:column="18"/></name> <operator pos:line="79" pos:column="19">=<pos:position pos:line="79" pos:column="20"/></operator> <name pos:line="79" pos:column="21">buffer_size<pos:position pos:line="79" pos:column="32"/></name></expr>;<pos:position pos:line="79" pos:column="33"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="80" pos:column="7">WARNING<pos:position pos:line="80" pos:column="14"/></name><argument_list pos:line="80" pos:column="14">(<argument><expr><literal type="string" pos:line="80" pos:column="15">"memcached plugin: Instance \"%s\": Message was truncated."<pos:position pos:line="80" pos:column="74"/></literal></expr></argument>,
              <argument><expr><name><name pos:line="81" pos:column="15">st<pos:position pos:line="81" pos:column="17"/></name><operator pos:line="81" pos:column="17">-&gt;<pos:position pos:line="81" pos:column="22"/></operator><name pos:line="81" pos:column="19">name<pos:position pos:line="81" pos:column="23"/></name></name></expr></argument>)<pos:position pos:line="81" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="25"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="82" pos:column="7">shutdown<pos:position pos:line="82" pos:column="15"/></name><argument_list pos:line="82" pos:column="15">(<argument><expr><name><name pos:line="82" pos:column="16">st<pos:position pos:line="82" pos:column="18"/></name><operator pos:line="82" pos:column="18">-&gt;<pos:position pos:line="82" pos:column="23"/></operator><name pos:line="82" pos:column="20">fd<pos:position pos:line="82" pos:column="22"/></name></name></expr></argument>, <argument><expr><name pos:line="82" pos:column="24">SHUT_RDWR<pos:position pos:line="82" pos:column="33"/></name></expr></argument>)<pos:position pos:line="82" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="35"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="83" pos:column="7">close<pos:position pos:line="83" pos:column="12"/></name><argument_list pos:line="83" pos:column="12">(<argument><expr><name><name pos:line="83" pos:column="13">st<pos:position pos:line="83" pos:column="15"/></name><operator pos:line="83" pos:column="15">-&gt;<pos:position pos:line="83" pos:column="20"/></operator><name pos:line="83" pos:column="17">fd<pos:position pos:line="83" pos:column="19"/></name></name></expr></argument>)<pos:position pos:line="83" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="21"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="84" pos:column="7">st<pos:position pos:line="84" pos:column="9"/></name><operator pos:line="84" pos:column="9">-&gt;<pos:position pos:line="84" pos:column="14"/></operator><name pos:line="84" pos:column="11">fd<pos:position pos:line="84" pos:column="13"/></name></name> <operator pos:line="84" pos:column="14">=<pos:position pos:line="84" pos:column="15"/></operator> <operator pos:line="84" pos:column="16">-<pos:position pos:line="84" pos:column="17"/></operator><literal type="number" pos:line="84" pos:column="17">1<pos:position pos:line="84" pos:column="18"/></literal></expr>;<pos:position pos:line="84" pos:column="19"/></expr_stmt>
      <break pos:line="85" pos:column="7">break;<pos:position pos:line="85" pos:column="13"/></break>
    }<pos:position pos:line="86" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="88" pos:column="5">/* If buffer ends in end_token, we have all the data. */</comment>
    <if pos:line="89" pos:column="5">if <condition pos:line="89" pos:column="8">(<expr><call><name pos:line="89" pos:column="9">memcmp<pos:position pos:line="89" pos:column="15"/></name><argument_list pos:line="89" pos:column="15">(<argument><expr><name pos:line="89" pos:column="16">buffer<pos:position pos:line="89" pos:column="22"/></name> <operator pos:line="89" pos:column="23">+<pos:position pos:line="89" pos:column="24"/></operator> <name pos:line="89" pos:column="25">buffer_fill<pos:position pos:line="89" pos:column="36"/></name> <operator pos:line="89" pos:column="37">-<pos:position pos:line="89" pos:column="38"/></operator> <sizeof pos:line="89" pos:column="39">sizeof<argument_list pos:line="89" pos:column="45">(<argument><expr><name pos:line="89" pos:column="46">end_token<pos:position pos:line="89" pos:column="55"/></name></expr></argument>)<pos:position pos:line="89" pos:column="56"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="89" pos:column="58">end_token<pos:position pos:line="89" pos:column="67"/></name></expr></argument>,
               <argument><expr><sizeof pos:line="90" pos:column="16">sizeof<argument_list pos:line="90" pos:column="22">(<argument><expr><name pos:line="90" pos:column="23">end_token<pos:position pos:line="90" pos:column="32"/></name></expr></argument>)<pos:position pos:line="90" pos:column="33"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="90" pos:column="34"/></argument_list></call> <operator pos:line="90" pos:column="35">==<pos:position pos:line="90" pos:column="37"/></operator> <literal type="number" pos:line="90" pos:column="38">0<pos:position pos:line="90" pos:column="39"/></literal></expr>)<pos:position pos:line="90" pos:column="40"/></condition><then pos:line="90" pos:column="40">
      <block type="pseudo"><break pos:line="91" pos:column="7">break;<pos:position pos:line="91" pos:column="13"/></break></block></then></if>
  }<pos:position pos:line="92" pos:column="4"/></block></while> <comment type="block" pos:line="92" pos:column="5">/* while (recv) */</comment>

  <expr_stmt><expr><name pos:line="94" pos:column="3">status<pos:position pos:line="94" pos:column="9"/></name> <operator pos:line="94" pos:column="10">=<pos:position pos:line="94" pos:column="11"/></operator> <literal type="number" pos:line="94" pos:column="12">0<pos:position pos:line="94" pos:column="13"/></literal></expr>;<pos:position pos:line="94" pos:column="14"/></expr_stmt>
  <if pos:line="95" pos:column="3">if <condition pos:line="95" pos:column="6">(<expr><name pos:line="95" pos:column="7">buffer_fill<pos:position pos:line="95" pos:column="18"/></name> <operator pos:line="95" pos:column="19">==<pos:position pos:line="95" pos:column="21"/></operator> <literal type="number" pos:line="95" pos:column="22">0<pos:position pos:line="95" pos:column="23"/></literal></expr>)<pos:position pos:line="95" pos:column="24"/></condition><then pos:line="95" pos:column="24"> <block pos:line="95" pos:column="25">{
    <expr_stmt><expr><call><name pos:line="96" pos:column="5">WARNING<pos:position pos:line="96" pos:column="12"/></name><argument_list pos:line="96" pos:column="12">(<argument><expr><literal type="string" pos:line="96" pos:column="13">"memcached plugin: Instance \"%s\": No data returned by memcached."<pos:position pos:line="96" pos:column="80"/></literal></expr></argument>,
            <argument><expr><name><name pos:line="97" pos:column="13">st<pos:position pos:line="97" pos:column="15"/></name><operator pos:line="97" pos:column="15">-&gt;<pos:position pos:line="97" pos:column="20"/></operator><name pos:line="97" pos:column="17">name<pos:position pos:line="97" pos:column="21"/></name></name></expr></argument>)<pos:position pos:line="97" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="23"/></expr_stmt>
    <expr_stmt><expr><name pos:line="98" pos:column="5">status<pos:position pos:line="98" pos:column="11"/></name> <operator pos:line="98" pos:column="12">=<pos:position pos:line="98" pos:column="13"/></operator> <operator pos:line="98" pos:column="14">-<pos:position pos:line="98" pos:column="15"/></operator><literal type="number" pos:line="98" pos:column="15">1<pos:position pos:line="98" pos:column="16"/></literal></expr>;<pos:position pos:line="98" pos:column="17"/></expr_stmt>
  }<pos:position pos:line="99" pos:column="4"/></block></then></if>

  <return pos:line="101" pos:column="3">return <expr><name pos:line="101" pos:column="10">status<pos:position pos:line="101" pos:column="16"/></name></expr>;<pos:position pos:line="101" pos:column="17"/></return>
}<pos:position pos:line="102" pos:column="2"/></block></function></unit>
