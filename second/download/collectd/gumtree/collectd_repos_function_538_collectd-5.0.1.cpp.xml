<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_538_collectd-5.0.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">ps_init<pos:position pos:line="1" pos:column="19"/></name> <parameter_list pos:line="1" pos:column="20">(<parameter><decl><type><name pos:line="1" pos:column="21">void<pos:position pos:line="1" pos:column="25"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="26"/></parameter_list>
<block pos:line="2" pos:column="1">{
<cpp:if pos:line="3" pos:column="1">#<cpp:directive pos:line="3" pos:column="2">if<pos:position pos:line="3" pos:column="4"/></cpp:directive> <expr><name pos:line="3" pos:column="5">HAVE_THREAD_INFO<pos:position pos:line="3" pos:column="21"/></name></expr></cpp:if>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">kern_return_t<pos:position pos:line="4" pos:column="22"/></name></type> <name pos:line="4" pos:column="23">status<pos:position pos:line="4" pos:column="29"/></name></decl>;<pos:position pos:line="4" pos:column="30"/></decl_stmt>

	<expr_stmt><expr><name pos:line="6" pos:column="9">port_host_self<pos:position pos:line="6" pos:column="23"/></name> <operator pos:line="6" pos:column="24">=<pos:position pos:line="6" pos:column="25"/></operator> <call><name pos:line="6" pos:column="26">mach_host_self<pos:position pos:line="6" pos:column="40"/></name> <argument_list pos:line="6" pos:column="41">()<pos:position pos:line="6" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="44"/></expr_stmt>
	<expr_stmt><expr><name pos:line="7" pos:column="9">port_task_self<pos:position pos:line="7" pos:column="23"/></name> <operator pos:line="7" pos:column="24">=<pos:position pos:line="7" pos:column="25"/></operator> <call><name pos:line="7" pos:column="26">mach_task_self<pos:position pos:line="7" pos:column="40"/></name> <argument_list pos:line="7" pos:column="41">()<pos:position pos:line="7" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="44"/></expr_stmt>

	<if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><name pos:line="9" pos:column="13">pset_list<pos:position pos:line="9" pos:column="22"/></name> <operator pos:line="9" pos:column="23">!=<pos:position pos:line="9" pos:column="25"/></operator> <name pos:line="9" pos:column="26">NULL<pos:position pos:line="9" pos:column="30"/></name></expr>)<pos:position pos:line="9" pos:column="31"/></condition><then pos:line="9" pos:column="31">
	<block pos:line="10" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="11" pos:column="17">vm_deallocate<pos:position pos:line="11" pos:column="30"/></name> <argument_list pos:line="11" pos:column="31">(<argument><expr><name pos:line="11" pos:column="32">port_task_self<pos:position pos:line="11" pos:column="46"/></name></expr></argument>,
				<argument><expr><operator pos:line="12" pos:column="33">(<pos:position pos:line="12" pos:column="34"/></operator><name pos:line="12" pos:column="34">vm_address_t<pos:position pos:line="12" pos:column="46"/></name><operator pos:line="12" pos:column="46">)<pos:position pos:line="12" pos:column="47"/></operator> <name pos:line="12" pos:column="48">pset_list<pos:position pos:line="12" pos:column="57"/></name></expr></argument>,
				<argument><expr><name pos:line="13" pos:column="33">pset_list_len<pos:position pos:line="13" pos:column="46"/></name> <operator pos:line="13" pos:column="47">*<pos:position pos:line="13" pos:column="48"/></operator> <sizeof pos:line="13" pos:column="49">sizeof <argument_list pos:line="13" pos:column="56">(<argument><expr><name pos:line="13" pos:column="57">processor_set_t<pos:position pos:line="13" pos:column="72"/></name></expr></argument>)<pos:position pos:line="13" pos:column="73"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="13" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="75"/></expr_stmt>
		<expr_stmt><expr><name pos:line="14" pos:column="17">pset_list<pos:position pos:line="14" pos:column="26"/></name> <operator pos:line="14" pos:column="27">=<pos:position pos:line="14" pos:column="28"/></operator> <name pos:line="14" pos:column="29">NULL<pos:position pos:line="14" pos:column="33"/></name></expr>;<pos:position pos:line="14" pos:column="34"/></expr_stmt>
		<expr_stmt><expr><name pos:line="15" pos:column="17">pset_list_len<pos:position pos:line="15" pos:column="30"/></name> <operator pos:line="15" pos:column="31">=<pos:position pos:line="15" pos:column="32"/></operator> <literal type="number" pos:line="15" pos:column="33">0<pos:position pos:line="15" pos:column="34"/></literal></expr>;<pos:position pos:line="15" pos:column="35"/></expr_stmt>
	}<pos:position pos:line="16" pos:column="10"/></block></then></if>

	<if pos:line="18" pos:column="9">if <condition pos:line="18" pos:column="12">(<expr><operator pos:line="18" pos:column="13">(<pos:position pos:line="18" pos:column="14"/></operator><name pos:line="18" pos:column="14">status<pos:position pos:line="18" pos:column="20"/></name> <operator pos:line="18" pos:column="21">=<pos:position pos:line="18" pos:column="22"/></operator> <call><name pos:line="18" pos:column="23">host_processor_sets<pos:position pos:line="18" pos:column="42"/></name> <argument_list pos:line="18" pos:column="43">(<argument><expr><name pos:line="18" pos:column="44">port_host_self<pos:position pos:line="18" pos:column="58"/></name></expr></argument>,
					<argument><expr><operator pos:line="19" pos:column="41">&amp;<pos:position pos:line="19" pos:column="46"/></operator><name pos:line="19" pos:column="42">pset_list<pos:position pos:line="19" pos:column="51"/></name></expr></argument>,
				       	<argument><expr><operator pos:line="20" pos:column="41">&amp;<pos:position pos:line="20" pos:column="46"/></operator><name pos:line="20" pos:column="42">pset_list_len<pos:position pos:line="20" pos:column="55"/></name></expr></argument>)<pos:position pos:line="20" pos:column="56"/></argument_list></call><operator pos:line="20" pos:column="56">)<pos:position pos:line="20" pos:column="57"/></operator> <operator pos:line="20" pos:column="58">!=<pos:position pos:line="20" pos:column="60"/></operator> <name pos:line="20" pos:column="61">KERN_SUCCESS<pos:position pos:line="20" pos:column="73"/></name></expr>)<pos:position pos:line="20" pos:column="74"/></condition><then pos:line="20" pos:column="74">
	<block pos:line="21" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="22" pos:column="17">ERROR<pos:position pos:line="22" pos:column="22"/></name> <argument_list pos:line="22" pos:column="23">(<argument><expr><literal type="string" pos:line="22" pos:column="24">"host_processor_sets failed: %s\n"<pos:position pos:line="22" pos:column="58"/></literal></expr></argument>,
			       	<argument><expr><call><name pos:line="23" pos:column="33">mach_error_string<pos:position pos:line="23" pos:column="50"/></name> <argument_list pos:line="23" pos:column="51">(<argument><expr><name pos:line="23" pos:column="52">status<pos:position pos:line="23" pos:column="58"/></name></expr></argument>)<pos:position pos:line="23" pos:column="59"/></argument_list></call></expr></argument>)<pos:position pos:line="23" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="61"/></expr_stmt>
		<expr_stmt><expr><name pos:line="24" pos:column="17">pset_list<pos:position pos:line="24" pos:column="26"/></name> <operator pos:line="24" pos:column="27">=<pos:position pos:line="24" pos:column="28"/></operator> <name pos:line="24" pos:column="29">NULL<pos:position pos:line="24" pos:column="33"/></name></expr>;<pos:position pos:line="24" pos:column="34"/></expr_stmt>
		<expr_stmt><expr><name pos:line="25" pos:column="17">pset_list_len<pos:position pos:line="25" pos:column="30"/></name> <operator pos:line="25" pos:column="31">=<pos:position pos:line="25" pos:column="32"/></operator> <literal type="number" pos:line="25" pos:column="33">0<pos:position pos:line="25" pos:column="34"/></literal></expr>;<pos:position pos:line="25" pos:column="35"/></expr_stmt>
		<return pos:line="26" pos:column="17">return <expr><operator pos:line="26" pos:column="24">(<pos:position pos:line="26" pos:column="25"/></operator><operator pos:line="26" pos:column="25">-<pos:position pos:line="26" pos:column="26"/></operator><literal type="number" pos:line="26" pos:column="26">1<pos:position pos:line="26" pos:column="27"/></literal><operator pos:line="26" pos:column="27">)<pos:position pos:line="26" pos:column="28"/></operator></expr>;<pos:position pos:line="26" pos:column="29"/></return>
	}<pos:position pos:line="27" pos:column="10"/></block></then></if>
<comment type="block" pos:line="28" pos:column="1">/* #endif HAVE_THREAD_INFO */</comment>

<cpp:elif pos:line="30" pos:column="1">#<cpp:directive pos:line="30" pos:column="2">elif<pos:position pos:line="30" pos:column="6"/></cpp:directive> <expr><name pos:line="30" pos:column="7">KERNEL_LINUX<pos:position pos:line="30" pos:column="19"/></name></expr></cpp:elif>
	<expr_stmt><expr><name pos:line="31" pos:column="9">pagesize_g<pos:position pos:line="31" pos:column="19"/></name> <operator pos:line="31" pos:column="20">=<pos:position pos:line="31" pos:column="21"/></operator> <call><name pos:line="31" pos:column="22">sysconf<pos:position pos:line="31" pos:column="29"/></name><argument_list pos:line="31" pos:column="29">(<argument><expr><name pos:line="31" pos:column="30">_SC_PAGESIZE<pos:position pos:line="31" pos:column="42"/></name></expr></argument>)<pos:position pos:line="31" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="44"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="32" pos:column="9">DEBUG<pos:position pos:line="32" pos:column="14"/></name> <argument_list pos:line="32" pos:column="15">(<argument><expr><literal type="string" pos:line="32" pos:column="16">"pagesize_g = %li; CONFIG_HZ = %i;"<pos:position pos:line="32" pos:column="51"/></literal></expr></argument>,
			<argument><expr><name pos:line="33" pos:column="25">pagesize_g<pos:position pos:line="33" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="37">CONFIG_HZ<pos:position pos:line="33" pos:column="46"/></name></expr></argument>)<pos:position pos:line="33" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="48"/></expr_stmt>
<comment type="block" pos:line="34" pos:column="1">/* #endif KERNEL_LINUX */</comment>

<cpp:elif pos:line="36" pos:column="1">#<cpp:directive pos:line="36" pos:column="2">elif<pos:position pos:line="36" pos:column="6"/></cpp:directive> <expr><name pos:line="36" pos:column="7">HAVE_LIBKVM_GETPROCS<pos:position pos:line="36" pos:column="27"/></name> <operator pos:line="36" pos:column="28">&amp;&amp;<pos:position pos:line="36" pos:column="38"/></operator> <name pos:line="36" pos:column="31">HAVE_STRUCT_KINFO_PROC_FREEBSD<pos:position pos:line="36" pos:column="61"/></name></expr></cpp:elif>
<comment type="block" pos:line="37" pos:column="1">/* no initialization */</comment>
<comment type="block" pos:line="38" pos:column="1">/* #endif HAVE_LIBKVM_GETPROCS &amp;&amp; HAVE_STRUCT_KINFO_PROC_FREEBSD */</comment>

<cpp:elif pos:line="40" pos:column="1">#<cpp:directive pos:line="40" pos:column="2">elif<pos:position pos:line="40" pos:column="6"/></cpp:directive> <expr><name pos:line="40" pos:column="7">HAVE_PROCINFO_H<pos:position pos:line="40" pos:column="22"/></name></expr></cpp:elif>
	<expr_stmt><expr><name pos:line="41" pos:column="9">pagesize<pos:position pos:line="41" pos:column="17"/></name> <operator pos:line="41" pos:column="18">=<pos:position pos:line="41" pos:column="19"/></operator> <call><name pos:line="41" pos:column="20">getpagesize<pos:position pos:line="41" pos:column="31"/></name><argument_list pos:line="41" pos:column="31">()<pos:position pos:line="41" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="34"/></expr_stmt>
<cpp:endif pos:line="42" pos:column="1">#<cpp:directive pos:line="42" pos:column="2">endif<pos:position pos:line="42" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="42" pos:column="8">/* HAVE_PROCINFO_H */</comment>

	<return pos:line="44" pos:column="9">return <expr><operator pos:line="44" pos:column="16">(<pos:position pos:line="44" pos:column="17"/></operator><literal type="number" pos:line="44" pos:column="17">0<pos:position pos:line="44" pos:column="18"/></literal><operator pos:line="44" pos:column="18">)<pos:position pos:line="44" pos:column="19"/></operator></expr>;<pos:position pos:line="44" pos:column="20"/></return>
}<pos:position pos:line="45" pos:column="2"/></block></function></unit>
