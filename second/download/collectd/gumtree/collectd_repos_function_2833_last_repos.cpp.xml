<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_2833_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">meta_data_toc<pos:position pos:line="1" pos:column="18"/></name><parameter_list pos:line="1" pos:column="18">(<parameter><decl><type><name pos:line="1" pos:column="19">meta_data_t<pos:position pos:line="1" pos:column="30"/></name> <modifier pos:line="1" pos:column="31">*<pos:position pos:line="1" pos:column="32"/></modifier></type><name pos:line="1" pos:column="32">md<pos:position pos:line="1" pos:column="34"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="36">char<pos:position pos:line="1" pos:column="40"/></name> <modifier pos:line="1" pos:column="41">*<pos:position pos:line="1" pos:column="42"/></modifier><modifier pos:line="1" pos:column="42">*<pos:position pos:line="1" pos:column="43"/></modifier><modifier pos:line="1" pos:column="43">*<pos:position pos:line="1" pos:column="44"/></modifier></type><name pos:line="1" pos:column="44">toc<pos:position pos:line="1" pos:column="47"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="48"/></parameter_list> <comment type="block" pos:line="1" pos:column="49">/* {{{ */</comment>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">int<pos:position pos:line="3" pos:column="6"/></name></type> <name pos:line="3" pos:column="7">i<pos:position pos:line="3" pos:column="8"/></name> <init pos:line="3" pos:column="9">= <expr><literal type="number" pos:line="3" pos:column="11">0<pos:position pos:line="3" pos:column="12"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="3" pos:column="14">count<pos:position pos:line="3" pos:column="19"/></name> <init pos:line="3" pos:column="20">= <expr><literal type="number" pos:line="3" pos:column="22">0<pos:position pos:line="3" pos:column="23"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="24"/></decl_stmt>

  <if pos:line="5" pos:column="3">if <condition pos:line="5" pos:column="6">(<expr><operator pos:line="5" pos:column="7">(<pos:position pos:line="5" pos:column="8"/></operator><name pos:line="5" pos:column="8">md<pos:position pos:line="5" pos:column="10"/></name> <operator pos:line="5" pos:column="11">==<pos:position pos:line="5" pos:column="13"/></operator> <name pos:line="5" pos:column="14">NULL<pos:position pos:line="5" pos:column="18"/></name><operator pos:line="5" pos:column="18">)<pos:position pos:line="5" pos:column="19"/></operator> <operator pos:line="5" pos:column="20">||<pos:position pos:line="5" pos:column="22"/></operator> <operator pos:line="5" pos:column="23">(<pos:position pos:line="5" pos:column="24"/></operator><name pos:line="5" pos:column="24">toc<pos:position pos:line="5" pos:column="27"/></name> <operator pos:line="5" pos:column="28">==<pos:position pos:line="5" pos:column="30"/></operator> <name pos:line="5" pos:column="31">NULL<pos:position pos:line="5" pos:column="35"/></name><operator pos:line="5" pos:column="35">)<pos:position pos:line="5" pos:column="36"/></operator></expr>)<pos:position pos:line="5" pos:column="37"/></condition><then pos:line="5" pos:column="37">
    <block type="pseudo"><return pos:line="6" pos:column="5">return <expr><operator pos:line="6" pos:column="12">-<pos:position pos:line="6" pos:column="13"/></operator><name pos:line="6" pos:column="13">EINVAL<pos:position pos:line="6" pos:column="19"/></name></expr>;<pos:position pos:line="6" pos:column="20"/></return></block></then></if>

  <expr_stmt><expr><call><name pos:line="8" pos:column="3">pthread_mutex_lock<pos:position pos:line="8" pos:column="21"/></name><argument_list pos:line="8" pos:column="21">(<argument><expr><operator pos:line="8" pos:column="22">&amp;<pos:position pos:line="8" pos:column="27"/></operator><name><name pos:line="8" pos:column="23">md<pos:position pos:line="8" pos:column="25"/></name><operator pos:line="8" pos:column="25">-&gt;<pos:position pos:line="8" pos:column="30"/></operator><name pos:line="8" pos:column="27">lock<pos:position pos:line="8" pos:column="31"/></name></name></expr></argument>)<pos:position pos:line="8" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="33"/></expr_stmt>

  <for pos:line="10" pos:column="3">for <control pos:line="10" pos:column="7">(<init><decl><type><name pos:line="10" pos:column="8">meta_entry_t<pos:position pos:line="10" pos:column="20"/></name> <modifier pos:line="10" pos:column="21">*<pos:position pos:line="10" pos:column="22"/></modifier></type><name pos:line="10" pos:column="22">e<pos:position pos:line="10" pos:column="23"/></name> <init pos:line="10" pos:column="24">= <expr><name><name pos:line="10" pos:column="26">md<pos:position pos:line="10" pos:column="28"/></name><operator pos:line="10" pos:column="28">-&gt;<pos:position pos:line="10" pos:column="33"/></operator><name pos:line="10" pos:column="30">head<pos:position pos:line="10" pos:column="34"/></name></name></expr></init></decl>;<pos:position pos:line="10" pos:column="35"/></init> <condition><expr><name pos:line="10" pos:column="36">e<pos:position pos:line="10" pos:column="37"/></name> <operator pos:line="10" pos:column="38">!=<pos:position pos:line="10" pos:column="40"/></operator> <name pos:line="10" pos:column="41">NULL<pos:position pos:line="10" pos:column="45"/></name></expr>;<pos:position pos:line="10" pos:column="46"/></condition> <incr><expr><name pos:line="10" pos:column="47">e<pos:position pos:line="10" pos:column="48"/></name> <operator pos:line="10" pos:column="49">=<pos:position pos:line="10" pos:column="50"/></operator> <name><name pos:line="10" pos:column="51">e<pos:position pos:line="10" pos:column="52"/></name><operator pos:line="10" pos:column="52">-&gt;<pos:position pos:line="10" pos:column="57"/></operator><name pos:line="10" pos:column="54">next<pos:position pos:line="10" pos:column="58"/></name></name></expr></incr>)<pos:position pos:line="10" pos:column="59"/></control>
    <block type="pseudo"><expr_stmt><expr><operator pos:line="11" pos:column="5">++<pos:position pos:line="11" pos:column="7"/></operator><name pos:line="11" pos:column="7">count<pos:position pos:line="11" pos:column="12"/></name></expr>;<pos:position pos:line="11" pos:column="13"/></expr_stmt></block></for>

  <if pos:line="13" pos:column="3">if <condition pos:line="13" pos:column="6">(<expr><name pos:line="13" pos:column="7">count<pos:position pos:line="13" pos:column="12"/></name> <operator pos:line="13" pos:column="13">==<pos:position pos:line="13" pos:column="15"/></operator> <literal type="number" pos:line="13" pos:column="16">0<pos:position pos:line="13" pos:column="17"/></literal></expr>)<pos:position pos:line="13" pos:column="18"/></condition><then pos:line="13" pos:column="18"> <block pos:line="13" pos:column="19">{
    <expr_stmt><expr><call><name pos:line="14" pos:column="5">pthread_mutex_unlock<pos:position pos:line="14" pos:column="25"/></name><argument_list pos:line="14" pos:column="25">(<argument><expr><operator pos:line="14" pos:column="26">&amp;<pos:position pos:line="14" pos:column="31"/></operator><name><name pos:line="14" pos:column="27">md<pos:position pos:line="14" pos:column="29"/></name><operator pos:line="14" pos:column="29">-&gt;<pos:position pos:line="14" pos:column="34"/></operator><name pos:line="14" pos:column="31">lock<pos:position pos:line="14" pos:column="35"/></name></name></expr></argument>)<pos:position pos:line="14" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="37"/></expr_stmt>
    <return pos:line="15" pos:column="5">return <expr><name pos:line="15" pos:column="12">count<pos:position pos:line="15" pos:column="17"/></name></expr>;<pos:position pos:line="15" pos:column="18"/></return>
  }<pos:position pos:line="16" pos:column="4"/></block></then></if>

  <expr_stmt><expr><operator pos:line="18" pos:column="3">*<pos:position pos:line="18" pos:column="4"/></operator><name pos:line="18" pos:column="4">toc<pos:position pos:line="18" pos:column="7"/></name> <operator pos:line="18" pos:column="8">=<pos:position pos:line="18" pos:column="9"/></operator> <call><name pos:line="18" pos:column="10">calloc<pos:position pos:line="18" pos:column="16"/></name><argument_list pos:line="18" pos:column="16">(<argument><expr><name pos:line="18" pos:column="17">count<pos:position pos:line="18" pos:column="22"/></name></expr></argument>, <argument><expr><sizeof pos:line="18" pos:column="24">sizeof<argument_list pos:line="18" pos:column="30">(<argument><expr><operator pos:line="18" pos:column="31">*<pos:position pos:line="18" pos:column="32"/></operator><operator pos:line="18" pos:column="32">*<pos:position pos:line="18" pos:column="33"/></operator><name pos:line="18" pos:column="33">toc<pos:position pos:line="18" pos:column="36"/></name></expr></argument>)<pos:position pos:line="18" pos:column="37"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="18" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="39"/></expr_stmt>
  <for pos:line="19" pos:column="3">for <control pos:line="19" pos:column="7">(<init><decl><type><name pos:line="19" pos:column="8">meta_entry_t<pos:position pos:line="19" pos:column="20"/></name> <modifier pos:line="19" pos:column="21">*<pos:position pos:line="19" pos:column="22"/></modifier></type><name pos:line="19" pos:column="22">e<pos:position pos:line="19" pos:column="23"/></name> <init pos:line="19" pos:column="24">= <expr><name><name pos:line="19" pos:column="26">md<pos:position pos:line="19" pos:column="28"/></name><operator pos:line="19" pos:column="28">-&gt;<pos:position pos:line="19" pos:column="33"/></operator><name pos:line="19" pos:column="30">head<pos:position pos:line="19" pos:column="34"/></name></name></expr></init></decl>;<pos:position pos:line="19" pos:column="35"/></init> <condition><expr><name pos:line="19" pos:column="36">e<pos:position pos:line="19" pos:column="37"/></name> <operator pos:line="19" pos:column="38">!=<pos:position pos:line="19" pos:column="40"/></operator> <name pos:line="19" pos:column="41">NULL<pos:position pos:line="19" pos:column="45"/></name></expr>;<pos:position pos:line="19" pos:column="46"/></condition> <incr><expr><name pos:line="19" pos:column="47">e<pos:position pos:line="19" pos:column="48"/></name> <operator pos:line="19" pos:column="49">=<pos:position pos:line="19" pos:column="50"/></operator> <name><name pos:line="19" pos:column="51">e<pos:position pos:line="19" pos:column="52"/></name><operator pos:line="19" pos:column="52">-&gt;<pos:position pos:line="19" pos:column="57"/></operator><name pos:line="19" pos:column="54">next<pos:position pos:line="19" pos:column="58"/></name></name></expr></incr>)<pos:position pos:line="19" pos:column="59"/></control>
    <block type="pseudo"><expr_stmt><expr><operator pos:line="20" pos:column="5">(<pos:position pos:line="20" pos:column="6"/></operator><operator pos:line="20" pos:column="6">*<pos:position pos:line="20" pos:column="7"/></operator><name pos:line="20" pos:column="7">toc<pos:position pos:line="20" pos:column="10"/></name><operator pos:line="20" pos:column="10">)<pos:position pos:line="20" pos:column="11"/></operator><index pos:line="20" pos:column="11">[<expr><name pos:line="20" pos:column="12">i<pos:position pos:line="20" pos:column="13"/></name><operator pos:line="20" pos:column="13">++<pos:position pos:line="20" pos:column="15"/></operator></expr>]<pos:position pos:line="20" pos:column="16"/></index> <operator pos:line="20" pos:column="17">=<pos:position pos:line="20" pos:column="18"/></operator> <call><name pos:line="20" pos:column="19">strdup<pos:position pos:line="20" pos:column="25"/></name><argument_list pos:line="20" pos:column="25">(<argument><expr><name><name pos:line="20" pos:column="26">e<pos:position pos:line="20" pos:column="27"/></name><operator pos:line="20" pos:column="27">-&gt;<pos:position pos:line="20" pos:column="32"/></operator><name pos:line="20" pos:column="29">key<pos:position pos:line="20" pos:column="32"/></name></name></expr></argument>)<pos:position pos:line="20" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="34"/></expr_stmt></block></for>

  <expr_stmt><expr><call><name pos:line="22" pos:column="3">pthread_mutex_unlock<pos:position pos:line="22" pos:column="23"/></name><argument_list pos:line="22" pos:column="23">(<argument><expr><operator pos:line="22" pos:column="24">&amp;<pos:position pos:line="22" pos:column="29"/></operator><name><name pos:line="22" pos:column="25">md<pos:position pos:line="22" pos:column="27"/></name><operator pos:line="22" pos:column="27">-&gt;<pos:position pos:line="22" pos:column="32"/></operator><name pos:line="22" pos:column="29">lock<pos:position pos:line="22" pos:column="33"/></name></name></expr></argument>)<pos:position pos:line="22" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="35"/></expr_stmt>
  <return pos:line="23" pos:column="3">return <expr><name pos:line="23" pos:column="10">count<pos:position pos:line="23" pos:column="15"/></name></expr>;<pos:position pos:line="23" pos:column="16"/></return>
}<pos:position pos:line="24" pos:column="2"/></block></function></unit>
