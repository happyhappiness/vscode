<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1284_collectd-5.7.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">bson<pos:position pos:line="1" pos:column="12"/></name> <modifier pos:line="1" pos:column="13">*<pos:position pos:line="1" pos:column="14"/></modifier></type><name pos:line="1" pos:column="14">wm_create_bson<pos:position pos:line="1" pos:column="28"/></name><parameter_list pos:line="1" pos:column="28">(<parameter><decl><type><specifier pos:line="1" pos:column="29">const<pos:position pos:line="1" pos:column="34"/></specifier> <name pos:line="1" pos:column="35">data_set_t<pos:position pos:line="1" pos:column="45"/></name> <modifier pos:line="1" pos:column="46">*<pos:position pos:line="1" pos:column="47"/></modifier></type><name pos:line="1" pos:column="47">ds<pos:position pos:line="1" pos:column="49"/></name></decl></parameter>, <comment type="block" pos:line="1" pos:column="51">/* {{{ */</comment>
                            <parameter><decl><type><specifier pos:line="2" pos:column="29">const<pos:position pos:line="2" pos:column="34"/></specifier> <name pos:line="2" pos:column="35">value_list_t<pos:position pos:line="2" pos:column="47"/></name> <modifier pos:line="2" pos:column="48">*<pos:position pos:line="2" pos:column="49"/></modifier></type><name pos:line="2" pos:column="49">vl<pos:position pos:line="2" pos:column="51"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="53">_Bool<pos:position pos:line="2" pos:column="58"/></name></type> <name pos:line="2" pos:column="59">store_rates<pos:position pos:line="2" pos:column="70"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="71"/></parameter_list> <block pos:line="2" pos:column="72">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">bson<pos:position pos:line="3" pos:column="7"/></name> <modifier pos:line="3" pos:column="8">*<pos:position pos:line="3" pos:column="9"/></modifier></type><name pos:line="3" pos:column="9">ret<pos:position pos:line="3" pos:column="12"/></name></decl>;<pos:position pos:line="3" pos:column="13"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">gauge_t<pos:position pos:line="4" pos:column="10"/></name> <modifier pos:line="4" pos:column="11">*<pos:position pos:line="4" pos:column="12"/></modifier></type><name pos:line="4" pos:column="12">rates<pos:position pos:line="4" pos:column="17"/></name></decl>;<pos:position pos:line="4" pos:column="18"/></decl_stmt>

  <expr_stmt><expr><name pos:line="6" pos:column="3">ret<pos:position pos:line="6" pos:column="6"/></name> <operator pos:line="6" pos:column="7">=<pos:position pos:line="6" pos:column="8"/></operator> <call><name pos:line="6" pos:column="9">bson_alloc<pos:position pos:line="6" pos:column="19"/></name><argument_list pos:line="6" pos:column="19">()<pos:position pos:line="6" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="22"/></expr_stmt> <comment type="block" pos:line="6" pos:column="23">/* matched by bson_dealloc() */</comment>
  <if pos:line="7" pos:column="3">if <condition pos:line="7" pos:column="6">(<expr><name pos:line="7" pos:column="7">ret<pos:position pos:line="7" pos:column="10"/></name> <operator pos:line="7" pos:column="11">==<pos:position pos:line="7" pos:column="13"/></operator> <name pos:line="7" pos:column="14">NULL<pos:position pos:line="7" pos:column="18"/></name></expr>)<pos:position pos:line="7" pos:column="19"/></condition><then pos:line="7" pos:column="19"> <block pos:line="7" pos:column="20">{
    <expr_stmt><expr><call><name pos:line="8" pos:column="5">ERROR<pos:position pos:line="8" pos:column="10"/></name><argument_list pos:line="8" pos:column="10">(<argument><expr><literal type="string" pos:line="8" pos:column="11">"write_mongodb plugin: bson_create failed."<pos:position pos:line="8" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="56"/></expr_stmt>
    <return pos:line="9" pos:column="5">return <expr><operator pos:line="9" pos:column="12">(<pos:position pos:line="9" pos:column="13"/></operator><name pos:line="9" pos:column="13">NULL<pos:position pos:line="9" pos:column="17"/></name><operator pos:line="9" pos:column="17">)<pos:position pos:line="9" pos:column="18"/></operator></expr>;<pos:position pos:line="9" pos:column="19"/></return>
  }<pos:position pos:line="10" pos:column="4"/></block></then></if>

  <if pos:line="12" pos:column="3">if <condition pos:line="12" pos:column="6">(<expr><name pos:line="12" pos:column="7">store_rates<pos:position pos:line="12" pos:column="18"/></name></expr>)<pos:position pos:line="12" pos:column="19"/></condition><then pos:line="12" pos:column="19"> <block pos:line="12" pos:column="20">{
    <expr_stmt><expr><name pos:line="13" pos:column="5">rates<pos:position pos:line="13" pos:column="10"/></name> <operator pos:line="13" pos:column="11">=<pos:position pos:line="13" pos:column="12"/></operator> <call><name pos:line="13" pos:column="13">uc_get_rate<pos:position pos:line="13" pos:column="24"/></name><argument_list pos:line="13" pos:column="24">(<argument><expr><name pos:line="13" pos:column="25">ds<pos:position pos:line="13" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="29">vl<pos:position pos:line="13" pos:column="31"/></name></expr></argument>)<pos:position pos:line="13" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="33"/></expr_stmt>
    <if pos:line="14" pos:column="5">if <condition pos:line="14" pos:column="8">(<expr><name pos:line="14" pos:column="9">rates<pos:position pos:line="14" pos:column="14"/></name> <operator pos:line="14" pos:column="15">==<pos:position pos:line="14" pos:column="17"/></operator> <name pos:line="14" pos:column="18">NULL<pos:position pos:line="14" pos:column="22"/></name></expr>)<pos:position pos:line="14" pos:column="23"/></condition><then pos:line="14" pos:column="23"> <block pos:line="14" pos:column="24">{
      <expr_stmt><expr><call><name pos:line="15" pos:column="7">ERROR<pos:position pos:line="15" pos:column="12"/></name><argument_list pos:line="15" pos:column="12">(<argument><expr><literal type="string" pos:line="15" pos:column="13">"write_mongodb plugin: uc_get_rate() failed."<pos:position pos:line="15" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="60"/></expr_stmt>
      <return pos:line="16" pos:column="7">return <expr><operator pos:line="16" pos:column="14">(<pos:position pos:line="16" pos:column="15"/></operator><name pos:line="16" pos:column="15">NULL<pos:position pos:line="16" pos:column="19"/></name><operator pos:line="16" pos:column="19">)<pos:position pos:line="16" pos:column="20"/></operator></expr>;<pos:position pos:line="16" pos:column="21"/></return>
    }<pos:position pos:line="17" pos:column="6"/></block></then></if>
  }<pos:position pos:line="18" pos:column="4"/></block></then> <else pos:line="18" pos:column="5">else <block pos:line="18" pos:column="10">{
    <expr_stmt><expr><name pos:line="19" pos:column="5">rates<pos:position pos:line="19" pos:column="10"/></name> <operator pos:line="19" pos:column="11">=<pos:position pos:line="19" pos:column="12"/></operator> <name pos:line="19" pos:column="13">NULL<pos:position pos:line="19" pos:column="17"/></name></expr>;<pos:position pos:line="19" pos:column="18"/></expr_stmt>
  }<pos:position pos:line="20" pos:column="4"/></block></else></if>

  <expr_stmt><expr><call><name pos:line="22" pos:column="3">bson_init<pos:position pos:line="22" pos:column="12"/></name><argument_list pos:line="22" pos:column="12">(<argument><expr><name pos:line="22" pos:column="13">ret<pos:position pos:line="22" pos:column="16"/></name></expr></argument>)<pos:position pos:line="22" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="18"/></expr_stmt> <comment type="block" pos:line="22" pos:column="19">/* matched by bson_destroy() */</comment>
  <expr_stmt><expr><call><name pos:line="23" pos:column="3">bson_append_date<pos:position pos:line="23" pos:column="19"/></name><argument_list pos:line="23" pos:column="19">(<argument><expr><name pos:line="23" pos:column="20">ret<pos:position pos:line="23" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="23" pos:column="25">"time"<pos:position pos:line="23" pos:column="31"/></literal></expr></argument>, <argument><expr><operator pos:line="23" pos:column="33">(<pos:position pos:line="23" pos:column="34"/></operator><name pos:line="23" pos:column="34">bson_date_t<pos:position pos:line="23" pos:column="45"/></name><operator pos:line="23" pos:column="45">)<pos:position pos:line="23" pos:column="46"/></operator><call><name pos:line="23" pos:column="46">CDTIME_T_TO_MS<pos:position pos:line="23" pos:column="60"/></name><argument_list pos:line="23" pos:column="60">(<argument><expr><name><name pos:line="23" pos:column="61">vl<pos:position pos:line="23" pos:column="63"/></name><operator pos:line="23" pos:column="63">-&gt;<pos:position pos:line="23" pos:column="68"/></operator><name pos:line="23" pos:column="65">time<pos:position pos:line="23" pos:column="69"/></name></name></expr></argument>)<pos:position pos:line="23" pos:column="70"/></argument_list></call></expr></argument>)<pos:position pos:line="23" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="72"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="24" pos:column="3">bson_append_string<pos:position pos:line="24" pos:column="21"/></name><argument_list pos:line="24" pos:column="21">(<argument><expr><name pos:line="24" pos:column="22">ret<pos:position pos:line="24" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="24" pos:column="27">"host"<pos:position pos:line="24" pos:column="33"/></literal></expr></argument>, <argument><expr><name><name pos:line="24" pos:column="35">vl<pos:position pos:line="24" pos:column="37"/></name><operator pos:line="24" pos:column="37">-&gt;<pos:position pos:line="24" pos:column="42"/></operator><name pos:line="24" pos:column="39">host<pos:position pos:line="24" pos:column="43"/></name></name></expr></argument>)<pos:position pos:line="24" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="45"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="25" pos:column="3">bson_append_string<pos:position pos:line="25" pos:column="21"/></name><argument_list pos:line="25" pos:column="21">(<argument><expr><name pos:line="25" pos:column="22">ret<pos:position pos:line="25" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="25" pos:column="27">"plugin"<pos:position pos:line="25" pos:column="35"/></literal></expr></argument>, <argument><expr><name><name pos:line="25" pos:column="37">vl<pos:position pos:line="25" pos:column="39"/></name><operator pos:line="25" pos:column="39">-&gt;<pos:position pos:line="25" pos:column="44"/></operator><name pos:line="25" pos:column="41">plugin<pos:position pos:line="25" pos:column="47"/></name></name></expr></argument>)<pos:position pos:line="25" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="49"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="26" pos:column="3">bson_append_string<pos:position pos:line="26" pos:column="21"/></name><argument_list pos:line="26" pos:column="21">(<argument><expr><name pos:line="26" pos:column="22">ret<pos:position pos:line="26" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="26" pos:column="27">"plugin_instance"<pos:position pos:line="26" pos:column="44"/></literal></expr></argument>, <argument><expr><name><name pos:line="26" pos:column="46">vl<pos:position pos:line="26" pos:column="48"/></name><operator pos:line="26" pos:column="48">-&gt;<pos:position pos:line="26" pos:column="53"/></operator><name pos:line="26" pos:column="50">plugin_instance<pos:position pos:line="26" pos:column="65"/></name></name></expr></argument>)<pos:position pos:line="26" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="67"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="27" pos:column="3">bson_append_string<pos:position pos:line="27" pos:column="21"/></name><argument_list pos:line="27" pos:column="21">(<argument><expr><name pos:line="27" pos:column="22">ret<pos:position pos:line="27" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="27" pos:column="27">"type"<pos:position pos:line="27" pos:column="33"/></literal></expr></argument>, <argument><expr><name><name pos:line="27" pos:column="35">vl<pos:position pos:line="27" pos:column="37"/></name><operator pos:line="27" pos:column="37">-&gt;<pos:position pos:line="27" pos:column="42"/></operator><name pos:line="27" pos:column="39">type<pos:position pos:line="27" pos:column="43"/></name></name></expr></argument>)<pos:position pos:line="27" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="45"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="28" pos:column="3">bson_append_string<pos:position pos:line="28" pos:column="21"/></name><argument_list pos:line="28" pos:column="21">(<argument><expr><name pos:line="28" pos:column="22">ret<pos:position pos:line="28" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="28" pos:column="27">"type_instance"<pos:position pos:line="28" pos:column="42"/></literal></expr></argument>, <argument><expr><name><name pos:line="28" pos:column="44">vl<pos:position pos:line="28" pos:column="46"/></name><operator pos:line="28" pos:column="46">-&gt;<pos:position pos:line="28" pos:column="51"/></operator><name pos:line="28" pos:column="48">type_instance<pos:position pos:line="28" pos:column="61"/></name></name></expr></argument>)<pos:position pos:line="28" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="63"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="30" pos:column="3">bson_append_start_array<pos:position pos:line="30" pos:column="26"/></name><argument_list pos:line="30" pos:column="26">(<argument><expr><name pos:line="30" pos:column="27">ret<pos:position pos:line="30" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="30" pos:column="32">"values"<pos:position pos:line="30" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="42"/></expr_stmt> <comment type="block" pos:line="30" pos:column="43">/* {{{ */</comment>
  <for pos:line="31" pos:column="3">for <control pos:line="31" pos:column="7">(<init><decl><type><name pos:line="31" pos:column="8">int<pos:position pos:line="31" pos:column="11"/></name></type> <name pos:line="31" pos:column="12">i<pos:position pos:line="31" pos:column="13"/></name> <init pos:line="31" pos:column="14">= <expr><literal type="number" pos:line="31" pos:column="16">0<pos:position pos:line="31" pos:column="17"/></literal></expr></init></decl>;<pos:position pos:line="31" pos:column="18"/></init> <condition><expr><name pos:line="31" pos:column="19">i<pos:position pos:line="31" pos:column="20"/></name> <operator pos:line="31" pos:column="21">&lt;<pos:position pos:line="31" pos:column="25"/></operator> <name><name pos:line="31" pos:column="23">ds<pos:position pos:line="31" pos:column="25"/></name><operator pos:line="31" pos:column="25">-&gt;<pos:position pos:line="31" pos:column="30"/></operator><name pos:line="31" pos:column="27">ds_num<pos:position pos:line="31" pos:column="33"/></name></name></expr>;<pos:position pos:line="31" pos:column="34"/></condition> <incr><expr><name pos:line="31" pos:column="35">i<pos:position pos:line="31" pos:column="36"/></name><operator pos:line="31" pos:column="36">++<pos:position pos:line="31" pos:column="38"/></operator></expr></incr>)<pos:position pos:line="31" pos:column="39"/></control> <block pos:line="31" pos:column="40">{
    <decl_stmt><decl><type><name pos:line="32" pos:column="5">char<pos:position pos:line="32" pos:column="9"/></name></type> <name><name pos:line="32" pos:column="10">key<pos:position pos:line="32" pos:column="13"/></name><index pos:line="32" pos:column="13">[<expr><literal type="number" pos:line="32" pos:column="14">16<pos:position pos:line="32" pos:column="16"/></literal></expr>]<pos:position pos:line="32" pos:column="17"/></index></name></decl>;<pos:position pos:line="32" pos:column="18"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="34" pos:column="5">ssnprintf<pos:position pos:line="34" pos:column="14"/></name><argument_list pos:line="34" pos:column="14">(<argument><expr><name pos:line="34" pos:column="15">key<pos:position pos:line="34" pos:column="18"/></name></expr></argument>, <argument><expr><sizeof pos:line="34" pos:column="20">sizeof<argument_list pos:line="34" pos:column="26">(<argument><expr><name pos:line="34" pos:column="27">key<pos:position pos:line="34" pos:column="30"/></name></expr></argument>)<pos:position pos:line="34" pos:column="31"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="34" pos:column="33">"%i"<pos:position pos:line="34" pos:column="37"/></literal></expr></argument>, <argument><expr><name pos:line="34" pos:column="39">i<pos:position pos:line="34" pos:column="40"/></name></expr></argument>)<pos:position pos:line="34" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="42"/></expr_stmt>

    <if pos:line="36" pos:column="5">if <condition pos:line="36" pos:column="8">(<expr><name><name pos:line="36" pos:column="9">ds<pos:position pos:line="36" pos:column="11"/></name><operator pos:line="36" pos:column="11">-&gt;<pos:position pos:line="36" pos:column="16"/></operator><name pos:line="36" pos:column="13">ds<pos:position pos:line="36" pos:column="15"/></name><index pos:line="36" pos:column="15">[<expr><name pos:line="36" pos:column="16">i<pos:position pos:line="36" pos:column="17"/></name></expr>]<pos:position pos:line="36" pos:column="18"/></index></name><operator pos:line="36" pos:column="18">.<pos:position pos:line="36" pos:column="19"/></operator><name pos:line="36" pos:column="19">type<pos:position pos:line="36" pos:column="23"/></name> <operator pos:line="36" pos:column="24">==<pos:position pos:line="36" pos:column="26"/></operator> <name pos:line="36" pos:column="27">DS_TYPE_GAUGE<pos:position pos:line="36" pos:column="40"/></name></expr>)<pos:position pos:line="36" pos:column="41"/></condition><then pos:line="36" pos:column="41">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="37" pos:column="7">bson_append_double<pos:position pos:line="37" pos:column="25"/></name><argument_list pos:line="37" pos:column="25">(<argument><expr><name pos:line="37" pos:column="26">ret<pos:position pos:line="37" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="31">key<pos:position pos:line="37" pos:column="34"/></name></expr></argument>, <argument><expr><name><name pos:line="37" pos:column="36">vl<pos:position pos:line="37" pos:column="38"/></name><operator pos:line="37" pos:column="38">-&gt;<pos:position pos:line="37" pos:column="43"/></operator><name pos:line="37" pos:column="40">values<pos:position pos:line="37" pos:column="46"/></name><index pos:line="37" pos:column="46">[<expr><name pos:line="37" pos:column="47">i<pos:position pos:line="37" pos:column="48"/></name></expr>]<pos:position pos:line="37" pos:column="49"/></index></name><operator pos:line="37" pos:column="49">.<pos:position pos:line="37" pos:column="50"/></operator><name pos:line="37" pos:column="50">gauge<pos:position pos:line="37" pos:column="55"/></name></expr></argument>)<pos:position pos:line="37" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="57"/></expr_stmt></block></then>
    <elseif pos:line="38" pos:column="5">else <if pos:line="38" pos:column="10">if <condition pos:line="38" pos:column="13">(<expr><name pos:line="38" pos:column="14">store_rates<pos:position pos:line="38" pos:column="25"/></name></expr>)<pos:position pos:line="38" pos:column="26"/></condition><then pos:line="38" pos:column="26">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="39" pos:column="7">bson_append_double<pos:position pos:line="39" pos:column="25"/></name><argument_list pos:line="39" pos:column="25">(<argument><expr><name pos:line="39" pos:column="26">ret<pos:position pos:line="39" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="31">key<pos:position pos:line="39" pos:column="34"/></name></expr></argument>, <argument><expr><operator pos:line="39" pos:column="36">(<pos:position pos:line="39" pos:column="37"/></operator><name pos:line="39" pos:column="37">double<pos:position pos:line="39" pos:column="43"/></name><operator pos:line="39" pos:column="43">)<pos:position pos:line="39" pos:column="44"/></operator><name><name pos:line="39" pos:column="44">rates<pos:position pos:line="39" pos:column="49"/></name><index pos:line="39" pos:column="49">[<expr><name pos:line="39" pos:column="50">i<pos:position pos:line="39" pos:column="51"/></name></expr>]<pos:position pos:line="39" pos:column="52"/></index></name></expr></argument>)<pos:position pos:line="39" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="54"/></expr_stmt></block></then></if></elseif>
    <elseif pos:line="40" pos:column="5">else <if pos:line="40" pos:column="10">if <condition pos:line="40" pos:column="13">(<expr><name><name pos:line="40" pos:column="14">ds<pos:position pos:line="40" pos:column="16"/></name><operator pos:line="40" pos:column="16">-&gt;<pos:position pos:line="40" pos:column="21"/></operator><name pos:line="40" pos:column="18">ds<pos:position pos:line="40" pos:column="20"/></name><index pos:line="40" pos:column="20">[<expr><name pos:line="40" pos:column="21">i<pos:position pos:line="40" pos:column="22"/></name></expr>]<pos:position pos:line="40" pos:column="23"/></index></name><operator pos:line="40" pos:column="23">.<pos:position pos:line="40" pos:column="24"/></operator><name pos:line="40" pos:column="24">type<pos:position pos:line="40" pos:column="28"/></name> <operator pos:line="40" pos:column="29">==<pos:position pos:line="40" pos:column="31"/></operator> <name pos:line="40" pos:column="32">DS_TYPE_COUNTER<pos:position pos:line="40" pos:column="47"/></name></expr>)<pos:position pos:line="40" pos:column="48"/></condition><then pos:line="40" pos:column="48">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="41" pos:column="7">bson_append_long<pos:position pos:line="41" pos:column="23"/></name><argument_list pos:line="41" pos:column="23">(<argument><expr><name pos:line="41" pos:column="24">ret<pos:position pos:line="41" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="29">key<pos:position pos:line="41" pos:column="32"/></name></expr></argument>, <argument><expr><name><name pos:line="41" pos:column="34">vl<pos:position pos:line="41" pos:column="36"/></name><operator pos:line="41" pos:column="36">-&gt;<pos:position pos:line="41" pos:column="41"/></operator><name pos:line="41" pos:column="38">values<pos:position pos:line="41" pos:column="44"/></name><index pos:line="41" pos:column="44">[<expr><name pos:line="41" pos:column="45">i<pos:position pos:line="41" pos:column="46"/></name></expr>]<pos:position pos:line="41" pos:column="47"/></index></name><operator pos:line="41" pos:column="47">.<pos:position pos:line="41" pos:column="48"/></operator><name pos:line="41" pos:column="48">counter<pos:position pos:line="41" pos:column="55"/></name></expr></argument>)<pos:position pos:line="41" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="57"/></expr_stmt></block></then></if></elseif>
    <elseif pos:line="42" pos:column="5">else <if pos:line="42" pos:column="10">if <condition pos:line="42" pos:column="13">(<expr><name><name pos:line="42" pos:column="14">ds<pos:position pos:line="42" pos:column="16"/></name><operator pos:line="42" pos:column="16">-&gt;<pos:position pos:line="42" pos:column="21"/></operator><name pos:line="42" pos:column="18">ds<pos:position pos:line="42" pos:column="20"/></name><index pos:line="42" pos:column="20">[<expr><name pos:line="42" pos:column="21">i<pos:position pos:line="42" pos:column="22"/></name></expr>]<pos:position pos:line="42" pos:column="23"/></index></name><operator pos:line="42" pos:column="23">.<pos:position pos:line="42" pos:column="24"/></operator><name pos:line="42" pos:column="24">type<pos:position pos:line="42" pos:column="28"/></name> <operator pos:line="42" pos:column="29">==<pos:position pos:line="42" pos:column="31"/></operator> <name pos:line="42" pos:column="32">DS_TYPE_DERIVE<pos:position pos:line="42" pos:column="46"/></name></expr>)<pos:position pos:line="42" pos:column="47"/></condition><then pos:line="42" pos:column="47">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="43" pos:column="7">bson_append_long<pos:position pos:line="43" pos:column="23"/></name><argument_list pos:line="43" pos:column="23">(<argument><expr><name pos:line="43" pos:column="24">ret<pos:position pos:line="43" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="29">key<pos:position pos:line="43" pos:column="32"/></name></expr></argument>, <argument><expr><name><name pos:line="43" pos:column="34">vl<pos:position pos:line="43" pos:column="36"/></name><operator pos:line="43" pos:column="36">-&gt;<pos:position pos:line="43" pos:column="41"/></operator><name pos:line="43" pos:column="38">values<pos:position pos:line="43" pos:column="44"/></name><index pos:line="43" pos:column="44">[<expr><name pos:line="43" pos:column="45">i<pos:position pos:line="43" pos:column="46"/></name></expr>]<pos:position pos:line="43" pos:column="47"/></index></name><operator pos:line="43" pos:column="47">.<pos:position pos:line="43" pos:column="48"/></operator><name pos:line="43" pos:column="48">derive<pos:position pos:line="43" pos:column="54"/></name></expr></argument>)<pos:position pos:line="43" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="56"/></expr_stmt></block></then></if></elseif>
    <elseif pos:line="44" pos:column="5">else <if pos:line="44" pos:column="10">if <condition pos:line="44" pos:column="13">(<expr><name><name pos:line="44" pos:column="14">ds<pos:position pos:line="44" pos:column="16"/></name><operator pos:line="44" pos:column="16">-&gt;<pos:position pos:line="44" pos:column="21"/></operator><name pos:line="44" pos:column="18">ds<pos:position pos:line="44" pos:column="20"/></name><index pos:line="44" pos:column="20">[<expr><name pos:line="44" pos:column="21">i<pos:position pos:line="44" pos:column="22"/></name></expr>]<pos:position pos:line="44" pos:column="23"/></index></name><operator pos:line="44" pos:column="23">.<pos:position pos:line="44" pos:column="24"/></operator><name pos:line="44" pos:column="24">type<pos:position pos:line="44" pos:column="28"/></name> <operator pos:line="44" pos:column="29">==<pos:position pos:line="44" pos:column="31"/></operator> <name pos:line="44" pos:column="32">DS_TYPE_ABSOLUTE<pos:position pos:line="44" pos:column="48"/></name></expr>)<pos:position pos:line="44" pos:column="49"/></condition><then pos:line="44" pos:column="49">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="45" pos:column="7">bson_append_long<pos:position pos:line="45" pos:column="23"/></name><argument_list pos:line="45" pos:column="23">(<argument><expr><name pos:line="45" pos:column="24">ret<pos:position pos:line="45" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="29">key<pos:position pos:line="45" pos:column="32"/></name></expr></argument>, <argument><expr><name><name pos:line="45" pos:column="34">vl<pos:position pos:line="45" pos:column="36"/></name><operator pos:line="45" pos:column="36">-&gt;<pos:position pos:line="45" pos:column="41"/></operator><name pos:line="45" pos:column="38">values<pos:position pos:line="45" pos:column="44"/></name><index pos:line="45" pos:column="44">[<expr><name pos:line="45" pos:column="45">i<pos:position pos:line="45" pos:column="46"/></name></expr>]<pos:position pos:line="45" pos:column="47"/></index></name><operator pos:line="45" pos:column="47">.<pos:position pos:line="45" pos:column="48"/></operator><name pos:line="45" pos:column="48">absolute<pos:position pos:line="45" pos:column="56"/></name></expr></argument>)<pos:position pos:line="45" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="58"/></expr_stmt></block></then></if></elseif>
    <else pos:line="46" pos:column="5">else
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="47" pos:column="7">assert<pos:position pos:line="47" pos:column="13"/></name><argument_list pos:line="47" pos:column="13">(<argument><expr><literal type="number" pos:line="47" pos:column="14">23<pos:position pos:line="47" pos:column="16"/></literal> <operator pos:line="47" pos:column="17">==<pos:position pos:line="47" pos:column="19"/></operator> <literal type="number" pos:line="47" pos:column="20">42<pos:position pos:line="47" pos:column="22"/></literal></expr></argument>)<pos:position pos:line="47" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="24"/></expr_stmt></block></else></if>
  }<pos:position pos:line="48" pos:column="4"/></block></for>
  <expr_stmt><expr><call><name pos:line="49" pos:column="3">bson_append_finish_array<pos:position pos:line="49" pos:column="27"/></name><argument_list pos:line="49" pos:column="27">(<argument><expr><name pos:line="49" pos:column="28">ret<pos:position pos:line="49" pos:column="31"/></name></expr></argument>)<pos:position pos:line="49" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="33"/></expr_stmt> <comment type="block" pos:line="49" pos:column="34">/* }}} values */</comment>

  <expr_stmt><expr><call><name pos:line="51" pos:column="3">bson_append_start_array<pos:position pos:line="51" pos:column="26"/></name><argument_list pos:line="51" pos:column="26">(<argument><expr><name pos:line="51" pos:column="27">ret<pos:position pos:line="51" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="51" pos:column="32">"dstypes"<pos:position pos:line="51" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="51" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="43"/></expr_stmt> <comment type="block" pos:line="51" pos:column="44">/* {{{ */</comment>
  <for pos:line="52" pos:column="3">for <control pos:line="52" pos:column="7">(<init><decl><type><name pos:line="52" pos:column="8">int<pos:position pos:line="52" pos:column="11"/></name></type> <name pos:line="52" pos:column="12">i<pos:position pos:line="52" pos:column="13"/></name> <init pos:line="52" pos:column="14">= <expr><literal type="number" pos:line="52" pos:column="16">0<pos:position pos:line="52" pos:column="17"/></literal></expr></init></decl>;<pos:position pos:line="52" pos:column="18"/></init> <condition><expr><name pos:line="52" pos:column="19">i<pos:position pos:line="52" pos:column="20"/></name> <operator pos:line="52" pos:column="21">&lt;<pos:position pos:line="52" pos:column="25"/></operator> <name><name pos:line="52" pos:column="23">ds<pos:position pos:line="52" pos:column="25"/></name><operator pos:line="52" pos:column="25">-&gt;<pos:position pos:line="52" pos:column="30"/></operator><name pos:line="52" pos:column="27">ds_num<pos:position pos:line="52" pos:column="33"/></name></name></expr>;<pos:position pos:line="52" pos:column="34"/></condition> <incr><expr><name pos:line="52" pos:column="35">i<pos:position pos:line="52" pos:column="36"/></name><operator pos:line="52" pos:column="36">++<pos:position pos:line="52" pos:column="38"/></operator></expr></incr>)<pos:position pos:line="52" pos:column="39"/></control> <block pos:line="52" pos:column="40">{
    <decl_stmt><decl><type><name pos:line="53" pos:column="5">char<pos:position pos:line="53" pos:column="9"/></name></type> <name><name pos:line="53" pos:column="10">key<pos:position pos:line="53" pos:column="13"/></name><index pos:line="53" pos:column="13">[<expr><literal type="number" pos:line="53" pos:column="14">16<pos:position pos:line="53" pos:column="16"/></literal></expr>]<pos:position pos:line="53" pos:column="17"/></index></name></decl>;<pos:position pos:line="53" pos:column="18"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="55" pos:column="5">ssnprintf<pos:position pos:line="55" pos:column="14"/></name><argument_list pos:line="55" pos:column="14">(<argument><expr><name pos:line="55" pos:column="15">key<pos:position pos:line="55" pos:column="18"/></name></expr></argument>, <argument><expr><sizeof pos:line="55" pos:column="20">sizeof<argument_list pos:line="55" pos:column="26">(<argument><expr><name pos:line="55" pos:column="27">key<pos:position pos:line="55" pos:column="30"/></name></expr></argument>)<pos:position pos:line="55" pos:column="31"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="55" pos:column="33">"%i"<pos:position pos:line="55" pos:column="37"/></literal></expr></argument>, <argument><expr><name pos:line="55" pos:column="39">i<pos:position pos:line="55" pos:column="40"/></name></expr></argument>)<pos:position pos:line="55" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="42"/></expr_stmt>

    <if pos:line="57" pos:column="5">if <condition pos:line="57" pos:column="8">(<expr><name pos:line="57" pos:column="9">store_rates<pos:position pos:line="57" pos:column="20"/></name></expr>)<pos:position pos:line="57" pos:column="21"/></condition><then pos:line="57" pos:column="21">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="58" pos:column="7">bson_append_string<pos:position pos:line="58" pos:column="25"/></name><argument_list pos:line="58" pos:column="25">(<argument><expr><name pos:line="58" pos:column="26">ret<pos:position pos:line="58" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="58" pos:column="31">key<pos:position pos:line="58" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="58" pos:column="36">"gauge"<pos:position pos:line="58" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="58" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="45"/></expr_stmt></block></then>
    <else pos:line="59" pos:column="5">else
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="60" pos:column="7">bson_append_string<pos:position pos:line="60" pos:column="25"/></name><argument_list pos:line="60" pos:column="25">(<argument><expr><name pos:line="60" pos:column="26">ret<pos:position pos:line="60" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="60" pos:column="31">key<pos:position pos:line="60" pos:column="34"/></name></expr></argument>, <argument><expr><call><name pos:line="60" pos:column="36">DS_TYPE_TO_STRING<pos:position pos:line="60" pos:column="53"/></name><argument_list pos:line="60" pos:column="53">(<argument><expr><name><name pos:line="60" pos:column="54">ds<pos:position pos:line="60" pos:column="56"/></name><operator pos:line="60" pos:column="56">-&gt;<pos:position pos:line="60" pos:column="61"/></operator><name pos:line="60" pos:column="58">ds<pos:position pos:line="60" pos:column="60"/></name><index pos:line="60" pos:column="60">[<expr><name pos:line="60" pos:column="61">i<pos:position pos:line="60" pos:column="62"/></name></expr>]<pos:position pos:line="60" pos:column="63"/></index></name><operator pos:line="60" pos:column="63">.<pos:position pos:line="60" pos:column="64"/></operator><name pos:line="60" pos:column="64">type<pos:position pos:line="60" pos:column="68"/></name></expr></argument>)<pos:position pos:line="60" pos:column="69"/></argument_list></call></expr></argument>)<pos:position pos:line="60" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="71"/></expr_stmt></block></else></if>
  }<pos:position pos:line="61" pos:column="4"/></block></for>
  <expr_stmt><expr><call><name pos:line="62" pos:column="3">bson_append_finish_array<pos:position pos:line="62" pos:column="27"/></name><argument_list pos:line="62" pos:column="27">(<argument><expr><name pos:line="62" pos:column="28">ret<pos:position pos:line="62" pos:column="31"/></name></expr></argument>)<pos:position pos:line="62" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="33"/></expr_stmt> <comment type="block" pos:line="62" pos:column="34">/* }}} dstypes */</comment>

  <expr_stmt><expr><call><name pos:line="64" pos:column="3">bson_append_start_array<pos:position pos:line="64" pos:column="26"/></name><argument_list pos:line="64" pos:column="26">(<argument><expr><name pos:line="64" pos:column="27">ret<pos:position pos:line="64" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="64" pos:column="32">"dsnames"<pos:position pos:line="64" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="64" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="43"/></expr_stmt> <comment type="block" pos:line="64" pos:column="44">/* {{{ */</comment>
  <for pos:line="65" pos:column="3">for <control pos:line="65" pos:column="7">(<init><decl><type><name pos:line="65" pos:column="8">int<pos:position pos:line="65" pos:column="11"/></name></type> <name pos:line="65" pos:column="12">i<pos:position pos:line="65" pos:column="13"/></name> <init pos:line="65" pos:column="14">= <expr><literal type="number" pos:line="65" pos:column="16">0<pos:position pos:line="65" pos:column="17"/></literal></expr></init></decl>;<pos:position pos:line="65" pos:column="18"/></init> <condition><expr><name pos:line="65" pos:column="19">i<pos:position pos:line="65" pos:column="20"/></name> <operator pos:line="65" pos:column="21">&lt;<pos:position pos:line="65" pos:column="25"/></operator> <name><name pos:line="65" pos:column="23">ds<pos:position pos:line="65" pos:column="25"/></name><operator pos:line="65" pos:column="25">-&gt;<pos:position pos:line="65" pos:column="30"/></operator><name pos:line="65" pos:column="27">ds_num<pos:position pos:line="65" pos:column="33"/></name></name></expr>;<pos:position pos:line="65" pos:column="34"/></condition> <incr><expr><name pos:line="65" pos:column="35">i<pos:position pos:line="65" pos:column="36"/></name><operator pos:line="65" pos:column="36">++<pos:position pos:line="65" pos:column="38"/></operator></expr></incr>)<pos:position pos:line="65" pos:column="39"/></control> <block pos:line="65" pos:column="40">{
    <decl_stmt><decl><type><name pos:line="66" pos:column="5">char<pos:position pos:line="66" pos:column="9"/></name></type> <name><name pos:line="66" pos:column="10">key<pos:position pos:line="66" pos:column="13"/></name><index pos:line="66" pos:column="13">[<expr><literal type="number" pos:line="66" pos:column="14">16<pos:position pos:line="66" pos:column="16"/></literal></expr>]<pos:position pos:line="66" pos:column="17"/></index></name></decl>;<pos:position pos:line="66" pos:column="18"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="68" pos:column="5">ssnprintf<pos:position pos:line="68" pos:column="14"/></name><argument_list pos:line="68" pos:column="14">(<argument><expr><name pos:line="68" pos:column="15">key<pos:position pos:line="68" pos:column="18"/></name></expr></argument>, <argument><expr><sizeof pos:line="68" pos:column="20">sizeof<argument_list pos:line="68" pos:column="26">(<argument><expr><name pos:line="68" pos:column="27">key<pos:position pos:line="68" pos:column="30"/></name></expr></argument>)<pos:position pos:line="68" pos:column="31"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="68" pos:column="33">"%i"<pos:position pos:line="68" pos:column="37"/></literal></expr></argument>, <argument><expr><name pos:line="68" pos:column="39">i<pos:position pos:line="68" pos:column="40"/></name></expr></argument>)<pos:position pos:line="68" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="42"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="69" pos:column="5">bson_append_string<pos:position pos:line="69" pos:column="23"/></name><argument_list pos:line="69" pos:column="23">(<argument><expr><name pos:line="69" pos:column="24">ret<pos:position pos:line="69" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="69" pos:column="29">key<pos:position pos:line="69" pos:column="32"/></name></expr></argument>, <argument><expr><name><name pos:line="69" pos:column="34">ds<pos:position pos:line="69" pos:column="36"/></name><operator pos:line="69" pos:column="36">-&gt;<pos:position pos:line="69" pos:column="41"/></operator><name pos:line="69" pos:column="38">ds<pos:position pos:line="69" pos:column="40"/></name><index pos:line="69" pos:column="40">[<expr><name pos:line="69" pos:column="41">i<pos:position pos:line="69" pos:column="42"/></name></expr>]<pos:position pos:line="69" pos:column="43"/></index></name><operator pos:line="69" pos:column="43">.<pos:position pos:line="69" pos:column="44"/></operator><name pos:line="69" pos:column="44">name<pos:position pos:line="69" pos:column="48"/></name></expr></argument>)<pos:position pos:line="69" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="50"/></expr_stmt>
  }<pos:position pos:line="70" pos:column="4"/></block></for>
  <expr_stmt><expr><call><name pos:line="71" pos:column="3">bson_append_finish_array<pos:position pos:line="71" pos:column="27"/></name><argument_list pos:line="71" pos:column="27">(<argument><expr><name pos:line="71" pos:column="28">ret<pos:position pos:line="71" pos:column="31"/></name></expr></argument>)<pos:position pos:line="71" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="33"/></expr_stmt> <comment type="block" pos:line="71" pos:column="34">/* }}} dsnames */</comment>

  <expr_stmt><expr><call><name pos:line="73" pos:column="3">bson_finish<pos:position pos:line="73" pos:column="14"/></name><argument_list pos:line="73" pos:column="14">(<argument><expr><name pos:line="73" pos:column="15">ret<pos:position pos:line="73" pos:column="18"/></name></expr></argument>)<pos:position pos:line="73" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="20"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="75" pos:column="3">sfree<pos:position pos:line="75" pos:column="8"/></name><argument_list pos:line="75" pos:column="8">(<argument><expr><name pos:line="75" pos:column="9">rates<pos:position pos:line="75" pos:column="14"/></name></expr></argument>)<pos:position pos:line="75" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="16"/></expr_stmt>
  <return pos:line="76" pos:column="3">return <expr><operator pos:line="76" pos:column="10">(<pos:position pos:line="76" pos:column="11"/></operator><name pos:line="76" pos:column="11">ret<pos:position pos:line="76" pos:column="14"/></name><operator pos:line="76" pos:column="14">)<pos:position pos:line="76" pos:column="15"/></operator></expr>;<pos:position pos:line="76" pos:column="16"/></return>
}<pos:position pos:line="77" pos:column="2"/></block></function></unit>
