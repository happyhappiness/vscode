<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1534_collectd-4.10.4.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name> <modifier pos:line="1" pos:column="13">*<pos:position pos:line="1" pos:column="14"/></modifier></type><name pos:line="1" pos:column="14">cpy_interactive<pos:position pos:line="1" pos:column="29"/></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name pos:line="1" pos:column="30">void<pos:position pos:line="1" pos:column="34"/></name> <modifier pos:line="1" pos:column="35">*<pos:position pos:line="1" pos:column="36"/></modifier></type><name pos:line="1" pos:column="36">data<pos:position pos:line="1" pos:column="40"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="41"/></parameter_list> <block pos:line="1" pos:column="42">{
	<decl_stmt><decl><type><name pos:line="2" pos:column="9">sigset_t<pos:position pos:line="2" pos:column="17"/></name></type> <name pos:line="2" pos:column="18">sigset<pos:position pos:line="2" pos:column="24"/></name></decl>;<pos:position pos:line="2" pos:column="25"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">sigaction<pos:position pos:line="3" pos:column="25"/></name></name></type> <name pos:line="3" pos:column="26">sig_int_action<pos:position pos:line="3" pos:column="40"/></name></decl>, <decl><type ref="prev"/><name pos:line="3" pos:column="42">old<pos:position pos:line="3" pos:column="45"/></name></decl>;<pos:position pos:line="3" pos:column="46"/></decl_stmt>
	
	<comment type="block" pos:line="5" pos:column="9">/* Signal handler in a plugin? Bad stuff, but the best way to
	 * handle it I guess. In an interactive session people will
	 * press Ctrl+C at some time, which will generate a SIGINT.
	 * This will cause collectd to shutdown, thus killing the
	 * interactive interpreter, and leaving the terminal in a
	 * mess. Chances are, this isn't what the user wanted to do.
	 * 
	 * So this is the plan:
	 * 1. Block SIGINT in the main thread.
	 * 2. Install our own signal handler that does nothing.
	 * 3. Unblock SIGINT in the interactive thread.
	 *
	 * This will make sure that SIGINT won't kill collectd but
	 * still interrupt syscalls like sleep and pause.
	 * It does not raise a KeyboardInterrupt exception because so
	 * far nobody managed to figure out how to do that. */</comment>
	<expr_stmt><expr><call><name pos:line="21" pos:column="9">memset<pos:position pos:line="21" pos:column="15"/></name> <argument_list pos:line="21" pos:column="16">(<argument><expr><operator pos:line="21" pos:column="17">&amp;<pos:position pos:line="21" pos:column="22"/></operator><name pos:line="21" pos:column="18">sig_int_action<pos:position pos:line="21" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="21" pos:column="34">'\0'<pos:position pos:line="21" pos:column="38"/></literal></expr></argument>, <argument><expr><sizeof pos:line="21" pos:column="40">sizeof <argument_list pos:line="21" pos:column="47">(<argument><expr><name pos:line="21" pos:column="48">sig_int_action<pos:position pos:line="21" pos:column="62"/></name></expr></argument>)<pos:position pos:line="21" pos:column="63"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="21" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="65"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="22" pos:column="9">sig_int_action<pos:position pos:line="22" pos:column="23"/></name><operator pos:line="22" pos:column="23">.<pos:position pos:line="22" pos:column="24"/></operator><name pos:line="22" pos:column="24">sa_handler<pos:position pos:line="22" pos:column="34"/></name></name> <operator pos:line="22" pos:column="35">=<pos:position pos:line="22" pos:column="36"/></operator> <name pos:line="22" pos:column="37">cpy_int_handler<pos:position pos:line="22" pos:column="52"/></name></expr>;<pos:position pos:line="22" pos:column="53"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="23" pos:column="9">sigaction<pos:position pos:line="23" pos:column="18"/></name> <argument_list pos:line="23" pos:column="19">(<argument><expr><name pos:line="23" pos:column="20">SIGINT<pos:position pos:line="23" pos:column="26"/></name></expr></argument>, <argument><expr><operator pos:line="23" pos:column="28">&amp;<pos:position pos:line="23" pos:column="33"/></operator><name pos:line="23" pos:column="29">sig_int_action<pos:position pos:line="23" pos:column="43"/></name></expr></argument>, <argument><expr><operator pos:line="23" pos:column="45">&amp;<pos:position pos:line="23" pos:column="50"/></operator><name pos:line="23" pos:column="46">old<pos:position pos:line="23" pos:column="49"/></name></expr></argument>)<pos:position pos:line="23" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="51"/></expr_stmt>
	
	<expr_stmt><expr><call><name pos:line="25" pos:column="9">sigemptyset<pos:position pos:line="25" pos:column="20"/></name><argument_list pos:line="25" pos:column="20">(<argument><expr><operator pos:line="25" pos:column="21">&amp;<pos:position pos:line="25" pos:column="26"/></operator><name pos:line="25" pos:column="22">sigset<pos:position pos:line="25" pos:column="28"/></name></expr></argument>)<pos:position pos:line="25" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="30"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="26" pos:column="9">sigaddset<pos:position pos:line="26" pos:column="18"/></name><argument_list pos:line="26" pos:column="18">(<argument><expr><operator pos:line="26" pos:column="19">&amp;<pos:position pos:line="26" pos:column="24"/></operator><name pos:line="26" pos:column="20">sigset<pos:position pos:line="26" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="28">SIGINT<pos:position pos:line="26" pos:column="34"/></name></expr></argument>)<pos:position pos:line="26" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="36"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="27" pos:column="9">pthread_sigmask<pos:position pos:line="27" pos:column="24"/></name><argument_list pos:line="27" pos:column="24">(<argument><expr><name pos:line="27" pos:column="25">SIG_UNBLOCK<pos:position pos:line="27" pos:column="36"/></name></expr></argument>, <argument><expr><operator pos:line="27" pos:column="38">&amp;<pos:position pos:line="27" pos:column="43"/></operator><name pos:line="27" pos:column="39">sigset<pos:position pos:line="27" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="47">NULL<pos:position pos:line="27" pos:column="51"/></name></expr></argument>)<pos:position pos:line="27" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="53"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="28" pos:column="9">PyEval_AcquireThread<pos:position pos:line="28" pos:column="29"/></name><argument_list pos:line="28" pos:column="29">(<argument><expr><name pos:line="28" pos:column="30">state<pos:position pos:line="28" pos:column="35"/></name></expr></argument>)<pos:position pos:line="28" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="37"/></expr_stmt>
	<if pos:line="29" pos:column="9">if <condition pos:line="29" pos:column="12">(<expr><call><name pos:line="29" pos:column="13">PyImport_ImportModule<pos:position pos:line="29" pos:column="34"/></name><argument_list pos:line="29" pos:column="34">(<argument><expr><literal type="string" pos:line="29" pos:column="35">"readline"<pos:position pos:line="29" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="46"/></argument_list></call> <operator pos:line="29" pos:column="47">==<pos:position pos:line="29" pos:column="49"/></operator> <name pos:line="29" pos:column="50">NULL<pos:position pos:line="29" pos:column="54"/></name></expr>)<pos:position pos:line="29" pos:column="55"/></condition><then pos:line="29" pos:column="55"> <block pos:line="29" pos:column="56">{
		<comment type="block" pos:line="30" pos:column="17">/* This interactive session will suck. */</comment>
		<expr_stmt><expr><call><name pos:line="31" pos:column="17">cpy_log_exception<pos:position pos:line="31" pos:column="34"/></name><argument_list pos:line="31" pos:column="34">(<argument><expr><literal type="string" pos:line="31" pos:column="35">"interactive session init"<pos:position pos:line="31" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="31" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="63"/></expr_stmt>
	}<pos:position pos:line="32" pos:column="10"/></block></then></if>
	<expr_stmt><expr><call><name pos:line="33" pos:column="9">PyRun_InteractiveLoop<pos:position pos:line="33" pos:column="30"/></name><argument_list pos:line="33" pos:column="30">(<argument><expr><name pos:line="33" pos:column="31">stdin<pos:position pos:line="33" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="33" pos:column="38">"&lt;stdin&gt;"<pos:position pos:line="33" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="49"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="34" pos:column="9">PyErr_Print<pos:position pos:line="34" pos:column="20"/></name><argument_list pos:line="34" pos:column="20">()<pos:position pos:line="34" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="23"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="35" pos:column="9">PyEval_ReleaseThread<pos:position pos:line="35" pos:column="29"/></name><argument_list pos:line="35" pos:column="29">(<argument><expr><name pos:line="35" pos:column="30">state<pos:position pos:line="35" pos:column="35"/></name></expr></argument>)<pos:position pos:line="35" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="37"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="36" pos:column="9">NOTICE<pos:position pos:line="36" pos:column="15"/></name><argument_list pos:line="36" pos:column="15">(<argument><expr><literal type="string" pos:line="36" pos:column="16">"python: Interactive interpreter exited, stopping collectd ..."<pos:position pos:line="36" pos:column="79"/></literal></expr></argument>)<pos:position pos:line="36" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="81"/></expr_stmt>
	<comment type="block" pos:line="37" pos:column="9">/* Restore the original collectd SIGINT handler and raise SIGINT.
	 * The main thread still has SIGINT blocked and there's nothing we
	 * can do about that so this thread will handle it. But that's not
	 * important, except that it won't interrupt the main loop and so
	 * it might take a few seconds before collectd really shuts down. */</comment>
	<expr_stmt><expr><call><name pos:line="42" pos:column="9">sigaction<pos:position pos:line="42" pos:column="18"/></name> <argument_list pos:line="42" pos:column="19">(<argument><expr><name pos:line="42" pos:column="20">SIGINT<pos:position pos:line="42" pos:column="26"/></name></expr></argument>, <argument><expr><operator pos:line="42" pos:column="28">&amp;<pos:position pos:line="42" pos:column="33"/></operator><name pos:line="42" pos:column="29">old<pos:position pos:line="42" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="34">NULL<pos:position pos:line="42" pos:column="38"/></name></expr></argument>)<pos:position pos:line="42" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="40"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="43" pos:column="9">raise<pos:position pos:line="43" pos:column="14"/></name><argument_list pos:line="43" pos:column="14">(<argument><expr><name pos:line="43" pos:column="15">SIGINT<pos:position pos:line="43" pos:column="21"/></name></expr></argument>)<pos:position pos:line="43" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="23"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="44" pos:column="9">pause<pos:position pos:line="44" pos:column="14"/></name><argument_list pos:line="44" pos:column="14">()<pos:position pos:line="44" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="17"/></expr_stmt>
	<return pos:line="45" pos:column="9">return <expr><name pos:line="45" pos:column="16">NULL<pos:position pos:line="45" pos:column="20"/></name></expr>;<pos:position pos:line="45" pos:column="21"/></return>
}<pos:position pos:line="46" pos:column="2"/></block></function></unit>
