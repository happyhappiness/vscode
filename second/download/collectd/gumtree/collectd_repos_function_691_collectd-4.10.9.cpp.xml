<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_691_collectd-4.10.9.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">powerdns_get_data_stream<pos:position pos:line="1" pos:column="36"/></name> <parameter_list pos:line="1" pos:column="37">(<parameter><decl><type><name pos:line="1" pos:column="38">list_item_t<pos:position pos:line="1" pos:column="49"/></name> <modifier pos:line="1" pos:column="50">*<pos:position pos:line="1" pos:column="51"/></modifier></type><name pos:line="1" pos:column="51">item<pos:position pos:line="1" pos:column="55"/></name></decl></parameter>, <comment type="block" pos:line="1" pos:column="57">/* {{{ */</comment>
    <parameter><decl><type><name pos:line="2" pos:column="5">char<pos:position pos:line="2" pos:column="9"/></name> <modifier pos:line="2" pos:column="10">*<pos:position pos:line="2" pos:column="11"/></modifier><modifier pos:line="2" pos:column="11">*<pos:position pos:line="2" pos:column="12"/></modifier></type><name pos:line="2" pos:column="12">ret_buffer<pos:position pos:line="2" pos:column="22"/></name></decl></parameter>,
    <parameter><decl><type><name pos:line="3" pos:column="5">size_t<pos:position pos:line="3" pos:column="11"/></name> <modifier pos:line="3" pos:column="12">*<pos:position pos:line="3" pos:column="13"/></modifier></type><name pos:line="3" pos:column="13">ret_buffer_size<pos:position pos:line="3" pos:column="28"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="29"/></parameter_list>
<block pos:line="4" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">int<pos:position pos:line="5" pos:column="6"/></name></type> <name pos:line="5" pos:column="7">sd<pos:position pos:line="5" pos:column="9"/></name></decl>;<pos:position pos:line="5" pos:column="10"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">int<pos:position pos:line="6" pos:column="6"/></name></type> <name pos:line="6" pos:column="7">status<pos:position pos:line="6" pos:column="13"/></name></decl>;<pos:position pos:line="6" pos:column="14"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="8" pos:column="3">char<pos:position pos:line="8" pos:column="7"/></name></type> <name><name pos:line="8" pos:column="8">temp<pos:position pos:line="8" pos:column="12"/></name><index pos:line="8" pos:column="12">[<expr><literal type="number" pos:line="8" pos:column="13">4096<pos:position pos:line="8" pos:column="17"/></literal></expr>]<pos:position pos:line="8" pos:column="18"/></index></name></decl>;<pos:position pos:line="8" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">char<pos:position pos:line="9" pos:column="7"/></name> <modifier pos:line="9" pos:column="8">*<pos:position pos:line="9" pos:column="9"/></modifier></type><name pos:line="9" pos:column="9">buffer<pos:position pos:line="9" pos:column="15"/></name> <init pos:line="9" pos:column="16">= <expr><name pos:line="9" pos:column="18">NULL<pos:position pos:line="9" pos:column="22"/></name></expr></init></decl>;<pos:position pos:line="9" pos:column="23"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">size_t<pos:position pos:line="10" pos:column="9"/></name></type> <name pos:line="10" pos:column="10">buffer_size<pos:position pos:line="10" pos:column="21"/></name> <init pos:line="10" pos:column="22">= <expr><literal type="number" pos:line="10" pos:column="24">0<pos:position pos:line="10" pos:column="25"/></literal></expr></init></decl>;<pos:position pos:line="10" pos:column="26"/></decl_stmt>

  <expr_stmt><expr><name pos:line="12" pos:column="3">sd<pos:position pos:line="12" pos:column="5"/></name> <operator pos:line="12" pos:column="6">=<pos:position pos:line="12" pos:column="7"/></operator> <call><name pos:line="12" pos:column="8">socket<pos:position pos:line="12" pos:column="14"/></name> <argument_list pos:line="12" pos:column="15">(<argument><expr><name pos:line="12" pos:column="16">PF_UNIX<pos:position pos:line="12" pos:column="23"/></name></expr></argument>, <argument><expr><name><name pos:line="12" pos:column="25">item<pos:position pos:line="12" pos:column="29"/></name><operator pos:line="12" pos:column="29">-&gt;<pos:position pos:line="12" pos:column="34"/></operator><name pos:line="12" pos:column="31">socktype<pos:position pos:line="12" pos:column="39"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="12" pos:column="41">0<pos:position pos:line="12" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="44"/></expr_stmt>
  <if pos:line="13" pos:column="3">if <condition pos:line="13" pos:column="6">(<expr><name pos:line="13" pos:column="7">sd<pos:position pos:line="13" pos:column="9"/></name> <operator pos:line="13" pos:column="10">&lt;<pos:position pos:line="13" pos:column="14"/></operator> <literal type="number" pos:line="13" pos:column="12">0<pos:position pos:line="13" pos:column="13"/></literal></expr>)<pos:position pos:line="13" pos:column="14"/></condition><then pos:line="13" pos:column="14">
  <block pos:line="14" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="15" pos:column="5">FUNC_ERROR<pos:position pos:line="15" pos:column="15"/></name> <argument_list pos:line="15" pos:column="16">(<argument><expr><literal type="string" pos:line="15" pos:column="17">"socket"<pos:position pos:line="15" pos:column="25"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="27"/></expr_stmt>
    <return pos:line="16" pos:column="5">return <expr><operator pos:line="16" pos:column="12">(<pos:position pos:line="16" pos:column="13"/></operator><operator pos:line="16" pos:column="13">-<pos:position pos:line="16" pos:column="14"/></operator><literal type="number" pos:line="16" pos:column="14">1<pos:position pos:line="16" pos:column="15"/></literal><operator pos:line="16" pos:column="15">)<pos:position pos:line="16" pos:column="16"/></operator></expr>;<pos:position pos:line="16" pos:column="17"/></return>
  }<pos:position pos:line="17" pos:column="4"/></block></then></if>

  <decl_stmt><decl><type><name><name pos:line="19" pos:column="3">struct<pos:position pos:line="19" pos:column="9"/></name> <name pos:line="19" pos:column="10">timeval<pos:position pos:line="19" pos:column="17"/></name></name></type> <name pos:line="19" pos:column="18">timeout<pos:position pos:line="19" pos:column="25"/></name></decl>;<pos:position pos:line="19" pos:column="26"/></decl_stmt>
  <expr_stmt><expr><name><name pos:line="20" pos:column="3">timeout<pos:position pos:line="20" pos:column="10"/></name><operator pos:line="20" pos:column="10">.<pos:position pos:line="20" pos:column="11"/></operator><name pos:line="20" pos:column="11">tv_sec<pos:position pos:line="20" pos:column="17"/></name></name><operator pos:line="20" pos:column="17">=<pos:position pos:line="20" pos:column="18"/></operator><literal type="number" pos:line="20" pos:column="18">5<pos:position pos:line="20" pos:column="19"/></literal></expr>;<pos:position pos:line="20" pos:column="20"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="21" pos:column="3">timeout<pos:position pos:line="21" pos:column="10"/></name><operator pos:line="21" pos:column="10">.<pos:position pos:line="21" pos:column="11"/></operator><name pos:line="21" pos:column="11">tv_usec<pos:position pos:line="21" pos:column="18"/></name></name><operator pos:line="21" pos:column="18">=<pos:position pos:line="21" pos:column="19"/></operator><literal type="number" pos:line="21" pos:column="19">0<pos:position pos:line="21" pos:column="20"/></literal></expr>;<pos:position pos:line="21" pos:column="21"/></expr_stmt>
  <expr_stmt><expr><name pos:line="22" pos:column="3">status<pos:position pos:line="22" pos:column="9"/></name> <operator pos:line="22" pos:column="10">=<pos:position pos:line="22" pos:column="11"/></operator> <call><name pos:line="22" pos:column="12">setsockopt<pos:position pos:line="22" pos:column="22"/></name> <argument_list pos:line="22" pos:column="23">(<argument><expr><name pos:line="22" pos:column="24">sd<pos:position pos:line="22" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="28">SOL_SOCKET<pos:position pos:line="22" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="40">SO_RCVTIMEO<pos:position pos:line="22" pos:column="51"/></name></expr></argument>, <argument><expr><operator pos:line="22" pos:column="53">&amp;<pos:position pos:line="22" pos:column="58"/></operator><name pos:line="22" pos:column="54">timeout<pos:position pos:line="22" pos:column="61"/></name></expr></argument>, <argument><expr><sizeof pos:line="22" pos:column="63">sizeof <argument_list pos:line="22" pos:column="70">(<argument><expr><name pos:line="22" pos:column="71">timeout<pos:position pos:line="22" pos:column="78"/></name></expr></argument>)<pos:position pos:line="22" pos:column="79"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="22" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="81"/></expr_stmt>

  <expr_stmt><expr><name pos:line="24" pos:column="3">status<pos:position pos:line="24" pos:column="9"/></name> <operator pos:line="24" pos:column="10">=<pos:position pos:line="24" pos:column="11"/></operator> <call><name pos:line="24" pos:column="12">connect<pos:position pos:line="24" pos:column="19"/></name> <argument_list pos:line="24" pos:column="20">(<argument><expr><name pos:line="24" pos:column="21">sd<pos:position pos:line="24" pos:column="23"/></name></expr></argument>, <argument><expr><operator pos:line="24" pos:column="25">(<pos:position pos:line="24" pos:column="26"/></operator>struct <name pos:line="24" pos:column="33">sockaddr<pos:position pos:line="24" pos:column="41"/></name> <operator pos:line="24" pos:column="42">*<pos:position pos:line="24" pos:column="43"/></operator><operator pos:line="24" pos:column="43">)<pos:position pos:line="24" pos:column="44"/></operator> <operator pos:line="24" pos:column="45">&amp;<pos:position pos:line="24" pos:column="50"/></operator><name><name pos:line="24" pos:column="46">item<pos:position pos:line="24" pos:column="50"/></name><operator pos:line="24" pos:column="50">-&gt;<pos:position pos:line="24" pos:column="55"/></operator><name pos:line="24" pos:column="52">sockaddr<pos:position pos:line="24" pos:column="60"/></name></name></expr></argument>,
      <argument><expr><sizeof pos:line="25" pos:column="7">sizeof <argument_list pos:line="25" pos:column="14">(<argument><expr><name><name pos:line="25" pos:column="15">item<pos:position pos:line="25" pos:column="19"/></name><operator pos:line="25" pos:column="19">-&gt;<pos:position pos:line="25" pos:column="24"/></operator><name pos:line="25" pos:column="21">sockaddr<pos:position pos:line="25" pos:column="29"/></name></name></expr></argument>)<pos:position pos:line="25" pos:column="30"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="25" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="32"/></expr_stmt>
  <if pos:line="26" pos:column="3">if <condition pos:line="26" pos:column="6">(<expr><name pos:line="26" pos:column="7">status<pos:position pos:line="26" pos:column="13"/></name> <operator pos:line="26" pos:column="14">!=<pos:position pos:line="26" pos:column="16"/></operator> <literal type="number" pos:line="26" pos:column="17">0<pos:position pos:line="26" pos:column="18"/></literal></expr>)<pos:position pos:line="26" pos:column="19"/></condition><then pos:line="26" pos:column="19">
  <block pos:line="27" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="28" pos:column="5">FUNC_ERROR<pos:position pos:line="28" pos:column="15"/></name> <argument_list pos:line="28" pos:column="16">(<argument><expr><literal type="string" pos:line="28" pos:column="17">"connect"<pos:position pos:line="28" pos:column="26"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="28"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="29" pos:column="5">close<pos:position pos:line="29" pos:column="10"/></name> <argument_list pos:line="29" pos:column="11">(<argument><expr><name pos:line="29" pos:column="12">sd<pos:position pos:line="29" pos:column="14"/></name></expr></argument>)<pos:position pos:line="29" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="16"/></expr_stmt>
    <return pos:line="30" pos:column="5">return <expr><operator pos:line="30" pos:column="12">(<pos:position pos:line="30" pos:column="13"/></operator><operator pos:line="30" pos:column="13">-<pos:position pos:line="30" pos:column="14"/></operator><literal type="number" pos:line="30" pos:column="14">1<pos:position pos:line="30" pos:column="15"/></literal><operator pos:line="30" pos:column="15">)<pos:position pos:line="30" pos:column="16"/></operator></expr>;<pos:position pos:line="30" pos:column="17"/></return>
  }<pos:position pos:line="31" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="33" pos:column="3">/* strlen + 1, because we need to send the terminating NULL byte, too. */</comment>
  <expr_stmt><expr><name pos:line="34" pos:column="3">status<pos:position pos:line="34" pos:column="9"/></name> <operator pos:line="34" pos:column="10">=<pos:position pos:line="34" pos:column="11"/></operator> <call><name pos:line="34" pos:column="12">send<pos:position pos:line="34" pos:column="16"/></name> <argument_list pos:line="34" pos:column="17">(<argument><expr><name pos:line="34" pos:column="18">sd<pos:position pos:line="34" pos:column="20"/></name></expr></argument>, <argument><expr><name><name pos:line="34" pos:column="22">item<pos:position pos:line="34" pos:column="26"/></name><operator pos:line="34" pos:column="26">-&gt;<pos:position pos:line="34" pos:column="31"/></operator><name pos:line="34" pos:column="28">command<pos:position pos:line="34" pos:column="35"/></name></name></expr></argument>, <argument><expr><call><name pos:line="34" pos:column="37">strlen<pos:position pos:line="34" pos:column="43"/></name> <argument_list pos:line="34" pos:column="44">(<argument><expr><name><name pos:line="34" pos:column="45">item<pos:position pos:line="34" pos:column="49"/></name><operator pos:line="34" pos:column="49">-&gt;<pos:position pos:line="34" pos:column="54"/></operator><name pos:line="34" pos:column="51">command<pos:position pos:line="34" pos:column="58"/></name></name></expr></argument>)<pos:position pos:line="34" pos:column="59"/></argument_list></call> <operator pos:line="34" pos:column="60">+<pos:position pos:line="34" pos:column="61"/></operator> <literal type="number" pos:line="34" pos:column="62">1<pos:position pos:line="34" pos:column="63"/></literal></expr></argument>,
      <comment type="block" pos:line="35" pos:column="7">/* flags = */</comment> <argument><expr><literal type="number" pos:line="35" pos:column="21">0<pos:position pos:line="35" pos:column="22"/></literal></expr></argument>)<pos:position pos:line="35" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="24"/></expr_stmt>
  <if pos:line="36" pos:column="3">if <condition pos:line="36" pos:column="6">(<expr><name pos:line="36" pos:column="7">status<pos:position pos:line="36" pos:column="13"/></name> <operator pos:line="36" pos:column="14">&lt;<pos:position pos:line="36" pos:column="18"/></operator> <literal type="number" pos:line="36" pos:column="16">0<pos:position pos:line="36" pos:column="17"/></literal></expr>)<pos:position pos:line="36" pos:column="18"/></condition><then pos:line="36" pos:column="18">
  <block pos:line="37" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="38" pos:column="5">FUNC_ERROR<pos:position pos:line="38" pos:column="15"/></name> <argument_list pos:line="38" pos:column="16">(<argument><expr><literal type="string" pos:line="38" pos:column="17">"send"<pos:position pos:line="38" pos:column="23"/></literal></expr></argument>)<pos:position pos:line="38" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="25"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="39" pos:column="5">close<pos:position pos:line="39" pos:column="10"/></name> <argument_list pos:line="39" pos:column="11">(<argument><expr><name pos:line="39" pos:column="12">sd<pos:position pos:line="39" pos:column="14"/></name></expr></argument>)<pos:position pos:line="39" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="16"/></expr_stmt>
    <return pos:line="40" pos:column="5">return <expr><operator pos:line="40" pos:column="12">(<pos:position pos:line="40" pos:column="13"/></operator><operator pos:line="40" pos:column="13">-<pos:position pos:line="40" pos:column="14"/></operator><literal type="number" pos:line="40" pos:column="14">1<pos:position pos:line="40" pos:column="15"/></literal><operator pos:line="40" pos:column="15">)<pos:position pos:line="40" pos:column="16"/></operator></expr>;<pos:position pos:line="40" pos:column="17"/></return>
  }<pos:position pos:line="41" pos:column="4"/></block></then></if>

  <while pos:line="43" pos:column="3">while <condition pos:line="43" pos:column="9">(<expr><literal type="number" pos:line="43" pos:column="10">42<pos:position pos:line="43" pos:column="12"/></literal></expr>)<pos:position pos:line="43" pos:column="13"/></condition>
  <block pos:line="44" pos:column="3">{
    <decl_stmt><decl><type><name pos:line="45" pos:column="5">char<pos:position pos:line="45" pos:column="9"/></name> <modifier pos:line="45" pos:column="10">*<pos:position pos:line="45" pos:column="11"/></modifier></type><name pos:line="45" pos:column="11">buffer_new<pos:position pos:line="45" pos:column="21"/></name></decl>;<pos:position pos:line="45" pos:column="22"/></decl_stmt>

    <expr_stmt><expr><name pos:line="47" pos:column="5">status<pos:position pos:line="47" pos:column="11"/></name> <operator pos:line="47" pos:column="12">=<pos:position pos:line="47" pos:column="13"/></operator> <call><name pos:line="47" pos:column="14">recv<pos:position pos:line="47" pos:column="18"/></name> <argument_list pos:line="47" pos:column="19">(<argument><expr><name pos:line="47" pos:column="20">sd<pos:position pos:line="47" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="24">temp<pos:position pos:line="47" pos:column="28"/></name></expr></argument>, <argument><expr><sizeof pos:line="47" pos:column="30">sizeof <argument_list pos:line="47" pos:column="37">(<argument><expr><name pos:line="47" pos:column="38">temp<pos:position pos:line="47" pos:column="42"/></name></expr></argument>)<pos:position pos:line="47" pos:column="43"/></argument_list></sizeof></expr></argument>, <comment type="block" pos:line="47" pos:column="45">/* flags = */</comment> <argument><expr><literal type="number" pos:line="47" pos:column="59">0<pos:position pos:line="47" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="47" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="62"/></expr_stmt>
    <if pos:line="48" pos:column="5">if <condition pos:line="48" pos:column="8">(<expr><name pos:line="48" pos:column="9">status<pos:position pos:line="48" pos:column="15"/></name> <operator pos:line="48" pos:column="16">&lt;<pos:position pos:line="48" pos:column="20"/></operator> <literal type="number" pos:line="48" pos:column="18">0<pos:position pos:line="48" pos:column="19"/></literal></expr>)<pos:position pos:line="48" pos:column="20"/></condition><then pos:line="48" pos:column="20">
    <block pos:line="49" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="50" pos:column="7">FUNC_ERROR<pos:position pos:line="50" pos:column="17"/></name> <argument_list pos:line="50" pos:column="18">(<argument><expr><literal type="string" pos:line="50" pos:column="19">"recv"<pos:position pos:line="50" pos:column="25"/></literal></expr></argument>)<pos:position pos:line="50" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="27"/></expr_stmt>
      <break pos:line="51" pos:column="7">break;<pos:position pos:line="51" pos:column="13"/></break>
    }<pos:position pos:line="52" pos:column="6"/></block></then>
    <elseif pos:line="53" pos:column="5">else <if pos:line="53" pos:column="10">if <condition pos:line="53" pos:column="13">(<expr><name pos:line="53" pos:column="14">status<pos:position pos:line="53" pos:column="20"/></name> <operator pos:line="53" pos:column="21">==<pos:position pos:line="53" pos:column="23"/></operator> <literal type="number" pos:line="53" pos:column="24">0<pos:position pos:line="53" pos:column="25"/></literal></expr>)<pos:position pos:line="53" pos:column="26"/></condition><then pos:line="53" pos:column="26">
      <block type="pseudo"><break pos:line="54" pos:column="7">break;<pos:position pos:line="54" pos:column="13"/></break></block></then></if></elseif></if>

    <expr_stmt><expr><name pos:line="56" pos:column="5">buffer_new<pos:position pos:line="56" pos:column="15"/></name> <operator pos:line="56" pos:column="16">=<pos:position pos:line="56" pos:column="17"/></operator> <operator pos:line="56" pos:column="18">(<pos:position pos:line="56" pos:column="19"/></operator><name pos:line="56" pos:column="19">char<pos:position pos:line="56" pos:column="23"/></name> <operator pos:line="56" pos:column="24">*<pos:position pos:line="56" pos:column="25"/></operator><operator pos:line="56" pos:column="25">)<pos:position pos:line="56" pos:column="26"/></operator> <call><name pos:line="56" pos:column="27">realloc<pos:position pos:line="56" pos:column="34"/></name> <argument_list pos:line="56" pos:column="35">(<argument><expr><name pos:line="56" pos:column="36">buffer<pos:position pos:line="56" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="56" pos:column="44">buffer_size<pos:position pos:line="56" pos:column="55"/></name> <operator pos:line="56" pos:column="56">+<pos:position pos:line="56" pos:column="57"/></operator> <name pos:line="56" pos:column="58">status<pos:position pos:line="56" pos:column="64"/></name> <operator pos:line="56" pos:column="65">+<pos:position pos:line="56" pos:column="66"/></operator> <literal type="number" pos:line="56" pos:column="67">1<pos:position pos:line="56" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="56" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="70"/></expr_stmt>
    <if pos:line="57" pos:column="5">if <condition pos:line="57" pos:column="8">(<expr><name pos:line="57" pos:column="9">buffer_new<pos:position pos:line="57" pos:column="19"/></name> <operator pos:line="57" pos:column="20">==<pos:position pos:line="57" pos:column="22"/></operator> <name pos:line="57" pos:column="23">NULL<pos:position pos:line="57" pos:column="27"/></name></expr>)<pos:position pos:line="57" pos:column="28"/></condition><then pos:line="57" pos:column="28">
    <block pos:line="58" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="59" pos:column="7">FUNC_ERROR<pos:position pos:line="59" pos:column="17"/></name> <argument_list pos:line="59" pos:column="18">(<argument><expr><literal type="string" pos:line="59" pos:column="19">"realloc"<pos:position pos:line="59" pos:column="28"/></literal></expr></argument>)<pos:position pos:line="59" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="30"/></expr_stmt>
      <expr_stmt><expr><name pos:line="60" pos:column="7">status<pos:position pos:line="60" pos:column="13"/></name> <operator pos:line="60" pos:column="14">=<pos:position pos:line="60" pos:column="15"/></operator> <operator pos:line="60" pos:column="16">-<pos:position pos:line="60" pos:column="17"/></operator><literal type="number" pos:line="60" pos:column="17">1<pos:position pos:line="60" pos:column="18"/></literal></expr>;<pos:position pos:line="60" pos:column="19"/></expr_stmt>
      <break pos:line="61" pos:column="7">break;<pos:position pos:line="61" pos:column="13"/></break>
    }<pos:position pos:line="62" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="63" pos:column="5">buffer<pos:position pos:line="63" pos:column="11"/></name> <operator pos:line="63" pos:column="12">=<pos:position pos:line="63" pos:column="13"/></operator> <name pos:line="63" pos:column="14">buffer_new<pos:position pos:line="63" pos:column="24"/></name></expr>;<pos:position pos:line="63" pos:column="25"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="65" pos:column="5">memcpy<pos:position pos:line="65" pos:column="11"/></name> <argument_list pos:line="65" pos:column="12">(<argument><expr><name pos:line="65" pos:column="13">buffer<pos:position pos:line="65" pos:column="19"/></name> <operator pos:line="65" pos:column="20">+<pos:position pos:line="65" pos:column="21"/></operator> <name pos:line="65" pos:column="22">buffer_size<pos:position pos:line="65" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="65" pos:column="35">temp<pos:position pos:line="65" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="65" pos:column="41">status<pos:position pos:line="65" pos:column="47"/></name></expr></argument>)<pos:position pos:line="65" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="49"/></expr_stmt>
    <expr_stmt><expr><name pos:line="66" pos:column="5">buffer_size<pos:position pos:line="66" pos:column="16"/></name> <operator pos:line="66" pos:column="17">+=<pos:position pos:line="66" pos:column="19"/></operator> <name pos:line="66" pos:column="20">status<pos:position pos:line="66" pos:column="26"/></name></expr>;<pos:position pos:line="66" pos:column="27"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="67" pos:column="5">buffer<pos:position pos:line="67" pos:column="11"/></name><index pos:line="67" pos:column="11">[<expr><name pos:line="67" pos:column="12">buffer_size<pos:position pos:line="67" pos:column="23"/></name></expr>]<pos:position pos:line="67" pos:column="24"/></index></name> <operator pos:line="67" pos:column="25">=<pos:position pos:line="67" pos:column="26"/></operator> <literal type="number" pos:line="67" pos:column="27">0<pos:position pos:line="67" pos:column="28"/></literal></expr>;<pos:position pos:line="67" pos:column="29"/></expr_stmt>
  }<pos:position pos:line="68" pos:column="4"/></block></while> <comment type="block" pos:line="68" pos:column="5">/* while (42) */</comment>
  <expr_stmt><expr><call><name pos:line="69" pos:column="3">close<pos:position pos:line="69" pos:column="8"/></name> <argument_list pos:line="69" pos:column="9">(<argument><expr><name pos:line="69" pos:column="10">sd<pos:position pos:line="69" pos:column="12"/></name></expr></argument>)<pos:position pos:line="69" pos:column="13"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="14"/></expr_stmt>
  <expr_stmt><expr><name pos:line="70" pos:column="3">sd<pos:position pos:line="70" pos:column="5"/></name> <operator pos:line="70" pos:column="6">=<pos:position pos:line="70" pos:column="7"/></operator> <operator pos:line="70" pos:column="8">-<pos:position pos:line="70" pos:column="9"/></operator><literal type="number" pos:line="70" pos:column="9">1<pos:position pos:line="70" pos:column="10"/></literal></expr>;<pos:position pos:line="70" pos:column="11"/></expr_stmt>

  <if pos:line="72" pos:column="3">if <condition pos:line="72" pos:column="6">(<expr><name pos:line="72" pos:column="7">status<pos:position pos:line="72" pos:column="13"/></name> <operator pos:line="72" pos:column="14">&lt;<pos:position pos:line="72" pos:column="18"/></operator> <literal type="number" pos:line="72" pos:column="16">0<pos:position pos:line="72" pos:column="17"/></literal></expr>)<pos:position pos:line="72" pos:column="18"/></condition><then pos:line="72" pos:column="18">
  <block pos:line="73" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="74" pos:column="5">sfree<pos:position pos:line="74" pos:column="10"/></name> <argument_list pos:line="74" pos:column="11">(<argument><expr><name pos:line="74" pos:column="12">buffer<pos:position pos:line="74" pos:column="18"/></name></expr></argument>)<pos:position pos:line="74" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="20"/></expr_stmt>
  }<pos:position pos:line="75" pos:column="4"/></block></then>
  <else pos:line="76" pos:column="3">else
  <block pos:line="77" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="78" pos:column="5">assert<pos:position pos:line="78" pos:column="11"/></name> <argument_list pos:line="78" pos:column="12">(<argument><expr><name pos:line="78" pos:column="13">status<pos:position pos:line="78" pos:column="19"/></name> <operator pos:line="78" pos:column="20">==<pos:position pos:line="78" pos:column="22"/></operator> <literal type="number" pos:line="78" pos:column="23">0<pos:position pos:line="78" pos:column="24"/></literal></expr></argument>)<pos:position pos:line="78" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="79" pos:column="5">*<pos:position pos:line="79" pos:column="6"/></operator><name pos:line="79" pos:column="6">ret_buffer<pos:position pos:line="79" pos:column="16"/></name> <operator pos:line="79" pos:column="17">=<pos:position pos:line="79" pos:column="18"/></operator> <name pos:line="79" pos:column="19">buffer<pos:position pos:line="79" pos:column="25"/></name></expr>;<pos:position pos:line="79" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="80" pos:column="5">*<pos:position pos:line="80" pos:column="6"/></operator><name pos:line="80" pos:column="6">ret_buffer_size<pos:position pos:line="80" pos:column="21"/></name> <operator pos:line="80" pos:column="22">=<pos:position pos:line="80" pos:column="23"/></operator> <name pos:line="80" pos:column="24">buffer_size<pos:position pos:line="80" pos:column="35"/></name></expr>;<pos:position pos:line="80" pos:column="36"/></expr_stmt>
  }<pos:position pos:line="81" pos:column="4"/></block></else></if>

  <return pos:line="83" pos:column="3">return <expr><operator pos:line="83" pos:column="10">(<pos:position pos:line="83" pos:column="11"/></operator><name pos:line="83" pos:column="11">status<pos:position pos:line="83" pos:column="17"/></name><operator pos:line="83" pos:column="17">)<pos:position pos:line="83" pos:column="18"/></operator></expr>;<pos:position pos:line="83" pos:column="19"/></return>
}<pos:position pos:line="84" pos:column="2"/></block></function></unit>
