<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1468_collectd-5.5.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">riemann_config_node<pos:position pos:line="1" pos:column="31"/></name><parameter_list pos:line="1" pos:column="31">(<parameter><decl><type><name pos:line="1" pos:column="32">oconfig_item_t<pos:position pos:line="1" pos:column="46"/></name> <modifier pos:line="1" pos:column="47">*<pos:position pos:line="1" pos:column="48"/></modifier></type><name pos:line="1" pos:column="48">ci<pos:position pos:line="1" pos:column="50"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="51"/></parameter_list> <comment type="block" pos:line="1" pos:column="52">/* {{{ */</comment>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">riemann_host<pos:position pos:line="3" pos:column="28"/></name></name>	<modifier pos:line="3" pos:column="33">*<pos:position pos:line="3" pos:column="34"/></modifier></type><name pos:line="3" pos:column="34">host<pos:position pos:line="3" pos:column="38"/></name> <init pos:line="3" pos:column="39">= <expr><name pos:line="3" pos:column="41">NULL<pos:position pos:line="3" pos:column="45"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="46"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type>			 <name pos:line="4" pos:column="34">status<pos:position pos:line="4" pos:column="40"/></name> <init pos:line="4" pos:column="41">= <expr><literal type="number" pos:line="4" pos:column="43">0<pos:position pos:line="4" pos:column="44"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="45"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type>			 <name pos:line="5" pos:column="34">i<pos:position pos:line="5" pos:column="35"/></name></decl>;<pos:position pos:line="5" pos:column="36"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">oconfig_item_t<pos:position pos:line="6" pos:column="23"/></name>		<modifier pos:line="6" pos:column="33">*<pos:position pos:line="6" pos:column="34"/></modifier></type><name pos:line="6" pos:column="34">child<pos:position pos:line="6" pos:column="39"/></name></decl>;<pos:position pos:line="6" pos:column="40"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">char<pos:position pos:line="7" pos:column="13"/></name></type>			 <name><name pos:line="7" pos:column="34">callback_name<pos:position pos:line="7" pos:column="47"/></name><index pos:line="7" pos:column="47">[<expr><name pos:line="7" pos:column="48">DATA_MAX_NAME_LEN<pos:position pos:line="7" pos:column="65"/></name></expr>]<pos:position pos:line="7" pos:column="66"/></index></name></decl>;<pos:position pos:line="7" pos:column="67"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">user_data_t<pos:position pos:line="8" pos:column="20"/></name></type>		 <name pos:line="8" pos:column="34">ud<pos:position pos:line="8" pos:column="36"/></name></decl>;<pos:position pos:line="8" pos:column="37"/></decl_stmt>

	<if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><operator pos:line="10" pos:column="13">(<pos:position pos:line="10" pos:column="14"/></operator><name pos:line="10" pos:column="14">host<pos:position pos:line="10" pos:column="18"/></name> <operator pos:line="10" pos:column="19">=<pos:position pos:line="10" pos:column="20"/></operator> <call><name pos:line="10" pos:column="21">calloc<pos:position pos:line="10" pos:column="27"/></name><argument_list pos:line="10" pos:column="27">(<argument><expr><literal type="number" pos:line="10" pos:column="28">1<pos:position pos:line="10" pos:column="29"/></literal></expr></argument>, <argument><expr><sizeof pos:line="10" pos:column="31">sizeof <argument_list pos:line="10" pos:column="38">(<argument><expr><operator pos:line="10" pos:column="39">*<pos:position pos:line="10" pos:column="40"/></operator><name pos:line="10" pos:column="40">host<pos:position pos:line="10" pos:column="44"/></name></expr></argument>)<pos:position pos:line="10" pos:column="45"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="10" pos:column="46"/></argument_list></call><operator pos:line="10" pos:column="46">)<pos:position pos:line="10" pos:column="47"/></operator> <operator pos:line="10" pos:column="48">==<pos:position pos:line="10" pos:column="50"/></operator> <name pos:line="10" pos:column="51">NULL<pos:position pos:line="10" pos:column="55"/></name></expr>)<pos:position pos:line="10" pos:column="56"/></condition><then pos:line="10" pos:column="56"> <block pos:line="10" pos:column="57">{
		<expr_stmt><expr><call><name pos:line="11" pos:column="17">ERROR<pos:position pos:line="11" pos:column="22"/></name> <argument_list pos:line="11" pos:column="23">(<argument><expr><literal type="string" pos:line="11" pos:column="24">"write_riemann plugin: calloc failed."<pos:position pos:line="11" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="64"/></expr_stmt>
		<return pos:line="12" pos:column="17">return <expr><name pos:line="12" pos:column="24">ENOMEM<pos:position pos:line="12" pos:column="30"/></name></expr>;<pos:position pos:line="12" pos:column="31"/></return>
	}<pos:position pos:line="13" pos:column="10"/></block></then></if>
	<expr_stmt><expr><call><name pos:line="14" pos:column="9">pthread_mutex_init<pos:position pos:line="14" pos:column="27"/></name> <argument_list pos:line="14" pos:column="28">(<argument><expr><operator pos:line="14" pos:column="29">&amp;<pos:position pos:line="14" pos:column="34"/></operator><name><name pos:line="14" pos:column="30">host<pos:position pos:line="14" pos:column="34"/></name><operator pos:line="14" pos:column="34">-&gt;<pos:position pos:line="14" pos:column="39"/></operator><name pos:line="14" pos:column="36">lock<pos:position pos:line="14" pos:column="40"/></name></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="42">NULL<pos:position pos:line="14" pos:column="46"/></name></expr></argument>)<pos:position pos:line="14" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="48"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="15" pos:column="9">host<pos:position pos:line="15" pos:column="13"/></name><operator pos:line="15" pos:column="13">-&gt;<pos:position pos:line="15" pos:column="18"/></operator><name pos:line="15" pos:column="15">reference_count<pos:position pos:line="15" pos:column="30"/></name></name> <operator pos:line="15" pos:column="31">=<pos:position pos:line="15" pos:column="32"/></operator> <literal type="number" pos:line="15" pos:column="33">1<pos:position pos:line="15" pos:column="34"/></literal></expr>;<pos:position pos:line="15" pos:column="35"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="16" pos:column="9">host<pos:position pos:line="16" pos:column="13"/></name><operator pos:line="16" pos:column="13">-&gt;<pos:position pos:line="16" pos:column="18"/></operator><name pos:line="16" pos:column="15">node<pos:position pos:line="16" pos:column="19"/></name></name> <operator pos:line="16" pos:column="20">=<pos:position pos:line="16" pos:column="21"/></operator> <name pos:line="16" pos:column="22">NULL<pos:position pos:line="16" pos:column="26"/></name></expr>;<pos:position pos:line="16" pos:column="27"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="17" pos:column="9">host<pos:position pos:line="17" pos:column="13"/></name><operator pos:line="17" pos:column="13">-&gt;<pos:position pos:line="17" pos:column="18"/></operator><name pos:line="17" pos:column="15">service<pos:position pos:line="17" pos:column="22"/></name></name> <operator pos:line="17" pos:column="23">=<pos:position pos:line="17" pos:column="24"/></operator> <name pos:line="17" pos:column="25">NULL<pos:position pos:line="17" pos:column="29"/></name></expr>;<pos:position pos:line="17" pos:column="30"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="18" pos:column="9">host<pos:position pos:line="18" pos:column="13"/></name><operator pos:line="18" pos:column="13">-&gt;<pos:position pos:line="18" pos:column="18"/></operator><name pos:line="18" pos:column="15">notifications<pos:position pos:line="18" pos:column="28"/></name></name> <operator pos:line="18" pos:column="29">=<pos:position pos:line="18" pos:column="30"/></operator> <literal type="number" pos:line="18" pos:column="31">1<pos:position pos:line="18" pos:column="32"/></literal></expr>;<pos:position pos:line="18" pos:column="33"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="19" pos:column="9">host<pos:position pos:line="19" pos:column="13"/></name><operator pos:line="19" pos:column="13">-&gt;<pos:position pos:line="19" pos:column="18"/></operator><name pos:line="19" pos:column="15">check_thresholds<pos:position pos:line="19" pos:column="31"/></name></name> <operator pos:line="19" pos:column="32">=<pos:position pos:line="19" pos:column="33"/></operator> <literal type="number" pos:line="19" pos:column="34">0<pos:position pos:line="19" pos:column="35"/></literal></expr>;<pos:position pos:line="19" pos:column="36"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="20" pos:column="9">host<pos:position pos:line="20" pos:column="13"/></name><operator pos:line="20" pos:column="13">-&gt;<pos:position pos:line="20" pos:column="18"/></operator><name pos:line="20" pos:column="15">store_rates<pos:position pos:line="20" pos:column="26"/></name></name> <operator pos:line="20" pos:column="27">=<pos:position pos:line="20" pos:column="28"/></operator> <literal type="number" pos:line="20" pos:column="29">1<pos:position pos:line="20" pos:column="30"/></literal></expr>;<pos:position pos:line="20" pos:column="31"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="21" pos:column="9">host<pos:position pos:line="21" pos:column="13"/></name><operator pos:line="21" pos:column="13">-&gt;<pos:position pos:line="21" pos:column="18"/></operator><name pos:line="21" pos:column="15">always_append_ds<pos:position pos:line="21" pos:column="31"/></name></name> <operator pos:line="21" pos:column="32">=<pos:position pos:line="21" pos:column="33"/></operator> <literal type="number" pos:line="21" pos:column="34">0<pos:position pos:line="21" pos:column="35"/></literal></expr>;<pos:position pos:line="21" pos:column="36"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="22" pos:column="9">host<pos:position pos:line="22" pos:column="13"/></name><operator pos:line="22" pos:column="13">-&gt;<pos:position pos:line="22" pos:column="18"/></operator><name pos:line="22" pos:column="15">use_tcp<pos:position pos:line="22" pos:column="22"/></name></name> <operator pos:line="22" pos:column="23">=<pos:position pos:line="22" pos:column="24"/></operator> <literal type="number" pos:line="22" pos:column="25">1<pos:position pos:line="22" pos:column="26"/></literal></expr>;<pos:position pos:line="22" pos:column="27"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="23" pos:column="9">host<pos:position pos:line="23" pos:column="13"/></name><operator pos:line="23" pos:column="13">-&gt;<pos:position pos:line="23" pos:column="18"/></operator><name pos:line="23" pos:column="15">batch_mode<pos:position pos:line="23" pos:column="25"/></name></name> <operator pos:line="23" pos:column="26">=<pos:position pos:line="23" pos:column="27"/></operator> <literal type="number" pos:line="23" pos:column="28">1<pos:position pos:line="23" pos:column="29"/></literal></expr>;<pos:position pos:line="23" pos:column="30"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="24" pos:column="9">host<pos:position pos:line="24" pos:column="13"/></name><operator pos:line="24" pos:column="13">-&gt;<pos:position pos:line="24" pos:column="18"/></operator><name pos:line="24" pos:column="15">batch_max<pos:position pos:line="24" pos:column="24"/></name></name> <operator pos:line="24" pos:column="25">=<pos:position pos:line="24" pos:column="26"/></operator> <name pos:line="24" pos:column="27">RIEMANN_BATCH_MAX<pos:position pos:line="24" pos:column="44"/></name></expr>;<pos:position pos:line="24" pos:column="45"/></expr_stmt> <comment type="block" pos:line="24" pos:column="46">/* typical MSS */</comment>
	<expr_stmt><expr><name><name pos:line="25" pos:column="9">host<pos:position pos:line="25" pos:column="13"/></name><operator pos:line="25" pos:column="13">-&gt;<pos:position pos:line="25" pos:column="18"/></operator><name pos:line="25" pos:column="15">batch_init<pos:position pos:line="25" pos:column="25"/></name></name> <operator pos:line="25" pos:column="26">=<pos:position pos:line="25" pos:column="27"/></operator> <call><name pos:line="25" pos:column="28">cdtime<pos:position pos:line="25" pos:column="34"/></name><argument_list pos:line="25" pos:column="34">()<pos:position pos:line="25" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="37"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="26" pos:column="9">host<pos:position pos:line="26" pos:column="13"/></name><operator pos:line="26" pos:column="13">-&gt;<pos:position pos:line="26" pos:column="18"/></operator><name pos:line="26" pos:column="15">ttl_factor<pos:position pos:line="26" pos:column="25"/></name></name> <operator pos:line="26" pos:column="26">=<pos:position pos:line="26" pos:column="27"/></operator> <name pos:line="26" pos:column="28">RIEMANN_TTL_FACTOR<pos:position pos:line="26" pos:column="46"/></name></expr>;<pos:position pos:line="26" pos:column="47"/></expr_stmt>

	<expr_stmt><expr><name pos:line="28" pos:column="9">status<pos:position pos:line="28" pos:column="15"/></name> <operator pos:line="28" pos:column="16">=<pos:position pos:line="28" pos:column="17"/></operator> <call><name pos:line="28" pos:column="18">cf_util_get_string<pos:position pos:line="28" pos:column="36"/></name> <argument_list pos:line="28" pos:column="37">(<argument><expr><name pos:line="28" pos:column="38">ci<pos:position pos:line="28" pos:column="40"/></name></expr></argument>, <argument><expr><operator pos:line="28" pos:column="42">&amp;<pos:position pos:line="28" pos:column="47"/></operator><name><name pos:line="28" pos:column="43">host<pos:position pos:line="28" pos:column="47"/></name><operator pos:line="28" pos:column="47">-&gt;<pos:position pos:line="28" pos:column="52"/></operator><name pos:line="28" pos:column="49">name<pos:position pos:line="28" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="28" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="55"/></expr_stmt>
	<if pos:line="29" pos:column="9">if <condition pos:line="29" pos:column="12">(<expr><name pos:line="29" pos:column="13">status<pos:position pos:line="29" pos:column="19"/></name> <operator pos:line="29" pos:column="20">!=<pos:position pos:line="29" pos:column="22"/></operator> <literal type="number" pos:line="29" pos:column="23">0<pos:position pos:line="29" pos:column="24"/></literal></expr>)<pos:position pos:line="29" pos:column="25"/></condition><then pos:line="29" pos:column="25"> <block pos:line="29" pos:column="26">{
		<expr_stmt><expr><call><name pos:line="30" pos:column="17">WARNING<pos:position pos:line="30" pos:column="24"/></name><argument_list pos:line="30" pos:column="24">(<argument><expr><literal type="string" pos:line="30" pos:column="25">"write_riemann plugin: Required host name is missing."<pos:position pos:line="30" pos:column="79"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="81"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="31" pos:column="17">riemann_free<pos:position pos:line="31" pos:column="29"/></name> <argument_list pos:line="31" pos:column="30">(<argument><expr><name pos:line="31" pos:column="31">host<pos:position pos:line="31" pos:column="35"/></name></expr></argument>)<pos:position pos:line="31" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="37"/></expr_stmt>
		<return pos:line="32" pos:column="17">return <expr><operator pos:line="32" pos:column="24">-<pos:position pos:line="32" pos:column="25"/></operator><literal type="number" pos:line="32" pos:column="25">1<pos:position pos:line="32" pos:column="26"/></literal></expr>;<pos:position pos:line="32" pos:column="27"/></return>
	}<pos:position pos:line="33" pos:column="10"/></block></then></if>

	<for pos:line="35" pos:column="9">for <control pos:line="35" pos:column="13">(<init><expr><name pos:line="35" pos:column="14">i<pos:position pos:line="35" pos:column="15"/></name> <operator pos:line="35" pos:column="16">=<pos:position pos:line="35" pos:column="17"/></operator> <literal type="number" pos:line="35" pos:column="18">0<pos:position pos:line="35" pos:column="19"/></literal></expr>;<pos:position pos:line="35" pos:column="20"/></init> <condition><expr><name pos:line="35" pos:column="21">i<pos:position pos:line="35" pos:column="22"/></name> <operator pos:line="35" pos:column="23">&lt;<pos:position pos:line="35" pos:column="27"/></operator> <name><name pos:line="35" pos:column="25">ci<pos:position pos:line="35" pos:column="27"/></name><operator pos:line="35" pos:column="27">-&gt;<pos:position pos:line="35" pos:column="32"/></operator><name pos:line="35" pos:column="29">children_num<pos:position pos:line="35" pos:column="41"/></name></name></expr>;<pos:position pos:line="35" pos:column="42"/></condition> <incr><expr><name pos:line="35" pos:column="43">i<pos:position pos:line="35" pos:column="44"/></name><operator pos:line="35" pos:column="44">++<pos:position pos:line="35" pos:column="46"/></operator></expr></incr>)<pos:position pos:line="35" pos:column="47"/></control> <block pos:line="35" pos:column="48">{
		<comment type="block" pos:line="36" pos:column="17">/*
		 * The code here could be simplified but makes room
		 * for easy adding of new options later on.
		 */</comment>
		<expr_stmt><expr><name pos:line="40" pos:column="17">child<pos:position pos:line="40" pos:column="22"/></name> <operator pos:line="40" pos:column="23">=<pos:position pos:line="40" pos:column="24"/></operator> <operator pos:line="40" pos:column="25">&amp;<pos:position pos:line="40" pos:column="30"/></operator><name><name pos:line="40" pos:column="26">ci<pos:position pos:line="40" pos:column="28"/></name><operator pos:line="40" pos:column="28">-&gt;<pos:position pos:line="40" pos:column="33"/></operator><name pos:line="40" pos:column="30">children<pos:position pos:line="40" pos:column="38"/></name><index pos:line="40" pos:column="38">[<expr><name pos:line="40" pos:column="39">i<pos:position pos:line="40" pos:column="40"/></name></expr>]<pos:position pos:line="40" pos:column="41"/></index></name></expr>;<pos:position pos:line="40" pos:column="42"/></expr_stmt>
		<expr_stmt><expr><name pos:line="41" pos:column="17">status<pos:position pos:line="41" pos:column="23"/></name> <operator pos:line="41" pos:column="24">=<pos:position pos:line="41" pos:column="25"/></operator> <literal type="number" pos:line="41" pos:column="26">0<pos:position pos:line="41" pos:column="27"/></literal></expr>;<pos:position pos:line="41" pos:column="28"/></expr_stmt>

		<if pos:line="43" pos:column="17">if <condition pos:line="43" pos:column="20">(<expr><call><name pos:line="43" pos:column="21">strcasecmp<pos:position pos:line="43" pos:column="31"/></name> <argument_list pos:line="43" pos:column="32">(<argument><expr><literal type="string" pos:line="43" pos:column="33">"Host"<pos:position pos:line="43" pos:column="39"/></literal></expr></argument>, <argument><expr><name><name pos:line="43" pos:column="41">child<pos:position pos:line="43" pos:column="46"/></name><operator pos:line="43" pos:column="46">-&gt;<pos:position pos:line="43" pos:column="51"/></operator><name pos:line="43" pos:column="48">key<pos:position pos:line="43" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="43" pos:column="52"/></argument_list></call> <operator pos:line="43" pos:column="53">==<pos:position pos:line="43" pos:column="55"/></operator> <literal type="number" pos:line="43" pos:column="56">0<pos:position pos:line="43" pos:column="57"/></literal></expr>)<pos:position pos:line="43" pos:column="58"/></condition><then pos:line="43" pos:column="58"> <block pos:line="43" pos:column="59">{
			<expr_stmt><expr><name pos:line="44" pos:column="25">status<pos:position pos:line="44" pos:column="31"/></name> <operator pos:line="44" pos:column="32">=<pos:position pos:line="44" pos:column="33"/></operator> <call><name pos:line="44" pos:column="34">cf_util_get_string<pos:position pos:line="44" pos:column="52"/></name> <argument_list pos:line="44" pos:column="53">(<argument><expr><name pos:line="44" pos:column="54">child<pos:position pos:line="44" pos:column="59"/></name></expr></argument>, <argument><expr><operator pos:line="44" pos:column="61">&amp;<pos:position pos:line="44" pos:column="66"/></operator><name><name pos:line="44" pos:column="62">host<pos:position pos:line="44" pos:column="66"/></name><operator pos:line="44" pos:column="66">-&gt;<pos:position pos:line="44" pos:column="71"/></operator><name pos:line="44" pos:column="68">node<pos:position pos:line="44" pos:column="72"/></name></name></expr></argument>)<pos:position pos:line="44" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="74"/></expr_stmt>
			<if pos:line="45" pos:column="25">if <condition pos:line="45" pos:column="28">(<expr><name pos:line="45" pos:column="29">status<pos:position pos:line="45" pos:column="35"/></name> <operator pos:line="45" pos:column="36">!=<pos:position pos:line="45" pos:column="38"/></operator> <literal type="number" pos:line="45" pos:column="39">0<pos:position pos:line="45" pos:column="40"/></literal></expr>)<pos:position pos:line="45" pos:column="41"/></condition><then pos:line="45" pos:column="41">
				<block type="pseudo"><break pos:line="46" pos:column="33">break;<pos:position pos:line="46" pos:column="39"/></break></block></then></if>
		}<pos:position pos:line="47" pos:column="18"/></block></then> <elseif pos:line="47" pos:column="19">else <if pos:line="47" pos:column="24">if <condition pos:line="47" pos:column="27">(<expr><call><name pos:line="47" pos:column="28">strcasecmp<pos:position pos:line="47" pos:column="38"/></name> <argument_list pos:line="47" pos:column="39">(<argument><expr><literal type="string" pos:line="47" pos:column="40">"Notifications"<pos:position pos:line="47" pos:column="55"/></literal></expr></argument>, <argument><expr><name><name pos:line="47" pos:column="57">child<pos:position pos:line="47" pos:column="62"/></name><operator pos:line="47" pos:column="62">-&gt;<pos:position pos:line="47" pos:column="67"/></operator><name pos:line="47" pos:column="64">key<pos:position pos:line="47" pos:column="67"/></name></name></expr></argument>)<pos:position pos:line="47" pos:column="68"/></argument_list></call> <operator pos:line="47" pos:column="69">==<pos:position pos:line="47" pos:column="71"/></operator> <literal type="number" pos:line="47" pos:column="72">0<pos:position pos:line="47" pos:column="73"/></literal></expr>)<pos:position pos:line="47" pos:column="74"/></condition><then pos:line="47" pos:column="74"> <block pos:line="47" pos:column="75">{
			<expr_stmt><expr><name pos:line="48" pos:column="25">status<pos:position pos:line="48" pos:column="31"/></name> <operator pos:line="48" pos:column="32">=<pos:position pos:line="48" pos:column="33"/></operator> <call><name pos:line="48" pos:column="34">cf_util_get_boolean<pos:position pos:line="48" pos:column="53"/></name><argument_list pos:line="48" pos:column="53">(<argument><expr><name pos:line="48" pos:column="54">child<pos:position pos:line="48" pos:column="59"/></name></expr></argument>, <argument><expr><operator pos:line="48" pos:column="61">&amp;<pos:position pos:line="48" pos:column="66"/></operator><name><name pos:line="48" pos:column="62">host<pos:position pos:line="48" pos:column="66"/></name><operator pos:line="48" pos:column="66">-&gt;<pos:position pos:line="48" pos:column="71"/></operator><name pos:line="48" pos:column="68">notifications<pos:position pos:line="48" pos:column="81"/></name></name></expr></argument>)<pos:position pos:line="48" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="83"/></expr_stmt>
			<if pos:line="49" pos:column="25">if <condition pos:line="49" pos:column="28">(<expr><name pos:line="49" pos:column="29">status<pos:position pos:line="49" pos:column="35"/></name> <operator pos:line="49" pos:column="36">!=<pos:position pos:line="49" pos:column="38"/></operator> <literal type="number" pos:line="49" pos:column="39">0<pos:position pos:line="49" pos:column="40"/></literal></expr>)<pos:position pos:line="49" pos:column="41"/></condition><then pos:line="49" pos:column="41">
				<block type="pseudo"><break pos:line="50" pos:column="33">break;<pos:position pos:line="50" pos:column="39"/></break></block></then></if>
		}<pos:position pos:line="51" pos:column="18"/></block></then></if></elseif> <elseif pos:line="51" pos:column="19">else <if pos:line="51" pos:column="24">if <condition pos:line="51" pos:column="27">(<expr><call><name pos:line="51" pos:column="28">strcasecmp<pos:position pos:line="51" pos:column="38"/></name> <argument_list pos:line="51" pos:column="39">(<argument><expr><literal type="string" pos:line="51" pos:column="40">"EventServicePrefix"<pos:position pos:line="51" pos:column="60"/></literal></expr></argument>, <argument><expr><name><name pos:line="51" pos:column="62">child<pos:position pos:line="51" pos:column="67"/></name><operator pos:line="51" pos:column="67">-&gt;<pos:position pos:line="51" pos:column="72"/></operator><name pos:line="51" pos:column="69">key<pos:position pos:line="51" pos:column="72"/></name></name></expr></argument>)<pos:position pos:line="51" pos:column="73"/></argument_list></call> <operator pos:line="51" pos:column="74">==<pos:position pos:line="51" pos:column="76"/></operator> <literal type="number" pos:line="51" pos:column="77">0<pos:position pos:line="51" pos:column="78"/></literal></expr>)<pos:position pos:line="51" pos:column="79"/></condition><then pos:line="51" pos:column="79"> <block pos:line="51" pos:column="80">{
			<expr_stmt><expr><name pos:line="52" pos:column="25">status<pos:position pos:line="52" pos:column="31"/></name> <operator pos:line="52" pos:column="32">=<pos:position pos:line="52" pos:column="33"/></operator> <call><name pos:line="52" pos:column="34">cf_util_get_string<pos:position pos:line="52" pos:column="52"/></name> <argument_list pos:line="52" pos:column="53">(<argument><expr><name pos:line="52" pos:column="54">child<pos:position pos:line="52" pos:column="59"/></name></expr></argument>, <argument><expr><operator pos:line="52" pos:column="61">&amp;<pos:position pos:line="52" pos:column="66"/></operator><name><name pos:line="52" pos:column="62">host<pos:position pos:line="52" pos:column="66"/></name><operator pos:line="52" pos:column="66">-&gt;<pos:position pos:line="52" pos:column="71"/></operator><name pos:line="52" pos:column="68">event_service_prefix<pos:position pos:line="52" pos:column="88"/></name></name></expr></argument>)<pos:position pos:line="52" pos:column="89"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="90"/></expr_stmt>
			<if pos:line="53" pos:column="25">if <condition pos:line="53" pos:column="28">(<expr><name pos:line="53" pos:column="29">status<pos:position pos:line="53" pos:column="35"/></name> <operator pos:line="53" pos:column="36">!=<pos:position pos:line="53" pos:column="38"/></operator> <literal type="number" pos:line="53" pos:column="39">0<pos:position pos:line="53" pos:column="40"/></literal></expr>)<pos:position pos:line="53" pos:column="41"/></condition><then pos:line="53" pos:column="41">
				<block type="pseudo"><break pos:line="54" pos:column="33">break;<pos:position pos:line="54" pos:column="39"/></break></block></then></if>
		}<pos:position pos:line="55" pos:column="18"/></block></then></if></elseif> <elseif pos:line="55" pos:column="19">else <if pos:line="55" pos:column="24">if <condition pos:line="55" pos:column="27">(<expr><call><name pos:line="55" pos:column="28">strcasecmp<pos:position pos:line="55" pos:column="38"/></name> <argument_list pos:line="55" pos:column="39">(<argument><expr><literal type="string" pos:line="55" pos:column="40">"CheckThresholds"<pos:position pos:line="55" pos:column="57"/></literal></expr></argument>, <argument><expr><name><name pos:line="55" pos:column="59">child<pos:position pos:line="55" pos:column="64"/></name><operator pos:line="55" pos:column="64">-&gt;<pos:position pos:line="55" pos:column="69"/></operator><name pos:line="55" pos:column="66">key<pos:position pos:line="55" pos:column="69"/></name></name></expr></argument>)<pos:position pos:line="55" pos:column="70"/></argument_list></call> <operator pos:line="55" pos:column="71">==<pos:position pos:line="55" pos:column="73"/></operator> <literal type="number" pos:line="55" pos:column="74">0<pos:position pos:line="55" pos:column="75"/></literal></expr>)<pos:position pos:line="55" pos:column="76"/></condition><then pos:line="55" pos:column="76"> <block pos:line="55" pos:column="77">{
			<expr_stmt><expr><name pos:line="56" pos:column="25">status<pos:position pos:line="56" pos:column="31"/></name> <operator pos:line="56" pos:column="32">=<pos:position pos:line="56" pos:column="33"/></operator> <call><name pos:line="56" pos:column="34">cf_util_get_boolean<pos:position pos:line="56" pos:column="53"/></name><argument_list pos:line="56" pos:column="53">(<argument><expr><name pos:line="56" pos:column="54">child<pos:position pos:line="56" pos:column="59"/></name></expr></argument>, <argument><expr><operator pos:line="56" pos:column="61">&amp;<pos:position pos:line="56" pos:column="66"/></operator><name><name pos:line="56" pos:column="62">host<pos:position pos:line="56" pos:column="66"/></name><operator pos:line="56" pos:column="66">-&gt;<pos:position pos:line="56" pos:column="71"/></operator><name pos:line="56" pos:column="68">check_thresholds<pos:position pos:line="56" pos:column="84"/></name></name></expr></argument>)<pos:position pos:line="56" pos:column="85"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="86"/></expr_stmt>
			<if pos:line="57" pos:column="25">if <condition pos:line="57" pos:column="28">(<expr><name pos:line="57" pos:column="29">status<pos:position pos:line="57" pos:column="35"/></name> <operator pos:line="57" pos:column="36">!=<pos:position pos:line="57" pos:column="38"/></operator> <literal type="number" pos:line="57" pos:column="39">0<pos:position pos:line="57" pos:column="40"/></literal></expr>)<pos:position pos:line="57" pos:column="41"/></condition><then pos:line="57" pos:column="41">
				<block type="pseudo"><break pos:line="58" pos:column="33">break;<pos:position pos:line="58" pos:column="39"/></break></block></then></if>
        }<pos:position pos:line="59" pos:column="10"/></block></then></if></elseif> <elseif pos:line="59" pos:column="11">else <if pos:line="59" pos:column="16">if <condition pos:line="59" pos:column="19">(<expr><call><name pos:line="59" pos:column="20">strcasecmp<pos:position pos:line="59" pos:column="30"/></name> <argument_list pos:line="59" pos:column="31">(<argument><expr><literal type="string" pos:line="59" pos:column="32">"Batch"<pos:position pos:line="59" pos:column="39"/></literal></expr></argument>, <argument><expr><name><name pos:line="59" pos:column="41">child<pos:position pos:line="59" pos:column="46"/></name><operator pos:line="59" pos:column="46">-&gt;<pos:position pos:line="59" pos:column="51"/></operator><name pos:line="59" pos:column="48">key<pos:position pos:line="59" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="59" pos:column="52"/></argument_list></call> <operator pos:line="59" pos:column="53">==<pos:position pos:line="59" pos:column="55"/></operator> <literal type="number" pos:line="59" pos:column="56">0<pos:position pos:line="59" pos:column="57"/></literal></expr>)<pos:position pos:line="59" pos:column="58"/></condition><then pos:line="59" pos:column="58"> <block pos:line="59" pos:column="59">{
            <expr_stmt><expr><name pos:line="60" pos:column="13">status<pos:position pos:line="60" pos:column="19"/></name> <operator pos:line="60" pos:column="20">=<pos:position pos:line="60" pos:column="21"/></operator> <call><name pos:line="60" pos:column="22">cf_util_get_boolean<pos:position pos:line="60" pos:column="41"/></name><argument_list pos:line="60" pos:column="41">(<argument><expr><name pos:line="60" pos:column="42">child<pos:position pos:line="60" pos:column="47"/></name></expr></argument>, <argument><expr><operator pos:line="60" pos:column="49">&amp;<pos:position pos:line="60" pos:column="54"/></operator><name><name pos:line="60" pos:column="50">host<pos:position pos:line="60" pos:column="54"/></name><operator pos:line="60" pos:column="54">-&gt;<pos:position pos:line="60" pos:column="59"/></operator><name pos:line="60" pos:column="56">batch_mode<pos:position pos:line="60" pos:column="66"/></name></name></expr></argument>)<pos:position pos:line="60" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="68"/></expr_stmt>
            <if pos:line="61" pos:column="13">if <condition pos:line="61" pos:column="16">(<expr><name pos:line="61" pos:column="17">status<pos:position pos:line="61" pos:column="23"/></name> <operator pos:line="61" pos:column="24">!=<pos:position pos:line="61" pos:column="26"/></operator> <literal type="number" pos:line="61" pos:column="27">0<pos:position pos:line="61" pos:column="28"/></literal></expr>)<pos:position pos:line="61" pos:column="29"/></condition><then pos:line="61" pos:column="29">
                <block type="pseudo"><break pos:line="62" pos:column="17">break;<pos:position pos:line="62" pos:column="23"/></break></block></then></if>
        }<pos:position pos:line="63" pos:column="10"/></block></then></if></elseif> <elseif pos:line="63" pos:column="11">else <if pos:line="63" pos:column="16">if <condition pos:line="63" pos:column="19">(<expr><call><name pos:line="63" pos:column="20">strcasecmp<pos:position pos:line="63" pos:column="30"/></name><argument_list pos:line="63" pos:column="30">(<argument><expr><literal type="string" pos:line="63" pos:column="31">"BatchMaxSize"<pos:position pos:line="63" pos:column="45"/></literal></expr></argument>, <argument><expr><name><name pos:line="63" pos:column="47">child<pos:position pos:line="63" pos:column="52"/></name><operator pos:line="63" pos:column="52">-&gt;<pos:position pos:line="63" pos:column="57"/></operator><name pos:line="63" pos:column="54">key<pos:position pos:line="63" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="63" pos:column="58"/></argument_list></call> <operator pos:line="63" pos:column="59">==<pos:position pos:line="63" pos:column="61"/></operator> <literal type="number" pos:line="63" pos:column="62">0<pos:position pos:line="63" pos:column="63"/></literal></expr>)<pos:position pos:line="63" pos:column="64"/></condition><then pos:line="63" pos:column="64"> <block pos:line="63" pos:column="65">{
            <expr_stmt><expr><name pos:line="64" pos:column="13">status<pos:position pos:line="64" pos:column="19"/></name> <operator pos:line="64" pos:column="20">=<pos:position pos:line="64" pos:column="21"/></operator> <call><name pos:line="64" pos:column="22">cf_util_get_int<pos:position pos:line="64" pos:column="37"/></name><argument_list pos:line="64" pos:column="37">(<argument><expr><name pos:line="64" pos:column="38">child<pos:position pos:line="64" pos:column="43"/></name></expr></argument>, <argument><expr><operator pos:line="64" pos:column="45">&amp;<pos:position pos:line="64" pos:column="50"/></operator><name><name pos:line="64" pos:column="46">host<pos:position pos:line="64" pos:column="50"/></name><operator pos:line="64" pos:column="50">-&gt;<pos:position pos:line="64" pos:column="55"/></operator><name pos:line="64" pos:column="52">batch_max<pos:position pos:line="64" pos:column="61"/></name></name></expr></argument>)<pos:position pos:line="64" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="63"/></expr_stmt>
            <if pos:line="65" pos:column="13">if <condition pos:line="65" pos:column="16">(<expr><name pos:line="65" pos:column="17">status<pos:position pos:line="65" pos:column="23"/></name> <operator pos:line="65" pos:column="24">!=<pos:position pos:line="65" pos:column="26"/></operator> <literal type="number" pos:line="65" pos:column="27">0<pos:position pos:line="65" pos:column="28"/></literal></expr>)<pos:position pos:line="65" pos:column="29"/></condition><then pos:line="65" pos:column="29">
                <block type="pseudo"><break pos:line="66" pos:column="17">break;<pos:position pos:line="66" pos:column="23"/></break></block></then></if>
		}<pos:position pos:line="67" pos:column="18"/></block></then></if></elseif> <elseif pos:line="67" pos:column="19">else <if pos:line="67" pos:column="24">if <condition pos:line="67" pos:column="27">(<expr><call><name pos:line="67" pos:column="28">strcasecmp<pos:position pos:line="67" pos:column="38"/></name> <argument_list pos:line="67" pos:column="39">(<argument><expr><literal type="string" pos:line="67" pos:column="40">"Port"<pos:position pos:line="67" pos:column="46"/></literal></expr></argument>, <argument><expr><name><name pos:line="67" pos:column="48">child<pos:position pos:line="67" pos:column="53"/></name><operator pos:line="67" pos:column="53">-&gt;<pos:position pos:line="67" pos:column="58"/></operator><name pos:line="67" pos:column="55">key<pos:position pos:line="67" pos:column="58"/></name></name></expr></argument>)<pos:position pos:line="67" pos:column="59"/></argument_list></call> <operator pos:line="67" pos:column="60">==<pos:position pos:line="67" pos:column="62"/></operator> <literal type="number" pos:line="67" pos:column="63">0<pos:position pos:line="67" pos:column="64"/></literal></expr>)<pos:position pos:line="67" pos:column="65"/></condition><then pos:line="67" pos:column="65"> <block pos:line="67" pos:column="66">{
			<expr_stmt><expr><name pos:line="68" pos:column="25">status<pos:position pos:line="68" pos:column="31"/></name> <operator pos:line="68" pos:column="32">=<pos:position pos:line="68" pos:column="33"/></operator> <call><name pos:line="68" pos:column="34">cf_util_get_service<pos:position pos:line="68" pos:column="53"/></name> <argument_list pos:line="68" pos:column="54">(<argument><expr><name pos:line="68" pos:column="55">child<pos:position pos:line="68" pos:column="60"/></name></expr></argument>, <argument><expr><operator pos:line="68" pos:column="62">&amp;<pos:position pos:line="68" pos:column="67"/></operator><name><name pos:line="68" pos:column="63">host<pos:position pos:line="68" pos:column="67"/></name><operator pos:line="68" pos:column="67">-&gt;<pos:position pos:line="68" pos:column="72"/></operator><name pos:line="68" pos:column="69">service<pos:position pos:line="68" pos:column="76"/></name></name></expr></argument>)<pos:position pos:line="68" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="78"/></expr_stmt>
			<if pos:line="69" pos:column="25">if <condition pos:line="69" pos:column="28">(<expr><name pos:line="69" pos:column="29">status<pos:position pos:line="69" pos:column="35"/></name> <operator pos:line="69" pos:column="36">!=<pos:position pos:line="69" pos:column="38"/></operator> <literal type="number" pos:line="69" pos:column="39">0<pos:position pos:line="69" pos:column="40"/></literal></expr>)<pos:position pos:line="69" pos:column="41"/></condition><then pos:line="69" pos:column="41"> <block pos:line="69" pos:column="42">{
				<expr_stmt><expr><call><name pos:line="70" pos:column="33">ERROR<pos:position pos:line="70" pos:column="38"/></name> <argument_list pos:line="70" pos:column="39">(<argument><expr><literal type="string" pos:line="70" pos:column="40">"write_riemann plugin: Invalid argument "<pos:position pos:line="70" pos:column="81"/></literal>
						<literal type="string" pos:line="71" pos:column="49">"configured for the \"Port\" "<pos:position pos:line="71" pos:column="79"/></literal>
						<literal type="string" pos:line="72" pos:column="49">"option."<pos:position pos:line="72" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="72" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="60"/></expr_stmt>
				<break pos:line="73" pos:column="33">break;<pos:position pos:line="73" pos:column="39"/></break>
			}<pos:position pos:line="74" pos:column="26"/></block></then></if>
		}<pos:position pos:line="75" pos:column="18"/></block></then></if></elseif> <elseif pos:line="75" pos:column="19">else <if pos:line="75" pos:column="24">if <condition pos:line="75" pos:column="27">(<expr><call><name pos:line="75" pos:column="28">strcasecmp<pos:position pos:line="75" pos:column="38"/></name> <argument_list pos:line="75" pos:column="39">(<argument><expr><literal type="string" pos:line="75" pos:column="40">"Protocol"<pos:position pos:line="75" pos:column="50"/></literal></expr></argument>, <argument><expr><name><name pos:line="75" pos:column="52">child<pos:position pos:line="75" pos:column="57"/></name><operator pos:line="75" pos:column="57">-&gt;<pos:position pos:line="75" pos:column="62"/></operator><name pos:line="75" pos:column="59">key<pos:position pos:line="75" pos:column="62"/></name></name></expr></argument>)<pos:position pos:line="75" pos:column="63"/></argument_list></call> <operator pos:line="75" pos:column="64">==<pos:position pos:line="75" pos:column="66"/></operator> <literal type="number" pos:line="75" pos:column="67">0<pos:position pos:line="75" pos:column="68"/></literal></expr>)<pos:position pos:line="75" pos:column="69"/></condition><then pos:line="75" pos:column="69"> <block pos:line="75" pos:column="70">{
			<decl_stmt><decl><type><name pos:line="76" pos:column="25">char<pos:position pos:line="76" pos:column="29"/></name></type> <name><name pos:line="76" pos:column="30">tmp<pos:position pos:line="76" pos:column="33"/></name><index pos:line="76" pos:column="33">[<expr><literal type="number" pos:line="76" pos:column="34">16<pos:position pos:line="76" pos:column="36"/></literal></expr>]<pos:position pos:line="76" pos:column="37"/></index></name></decl>;<pos:position pos:line="76" pos:column="38"/></decl_stmt>
			<expr_stmt><expr><name pos:line="77" pos:column="25">status<pos:position pos:line="77" pos:column="31"/></name> <operator pos:line="77" pos:column="32">=<pos:position pos:line="77" pos:column="33"/></operator> <call><name pos:line="77" pos:column="34">cf_util_get_string_buffer<pos:position pos:line="77" pos:column="59"/></name> <argument_list pos:line="77" pos:column="60">(<argument><expr><name pos:line="77" pos:column="61">child<pos:position pos:line="77" pos:column="66"/></name></expr></argument>,
					<argument><expr><name pos:line="78" pos:column="41">tmp<pos:position pos:line="78" pos:column="44"/></name></expr></argument>, <argument><expr><sizeof pos:line="78" pos:column="46">sizeof <argument_list pos:line="78" pos:column="53">(<argument><expr><name pos:line="78" pos:column="54">tmp<pos:position pos:line="78" pos:column="57"/></name></expr></argument>)<pos:position pos:line="78" pos:column="58"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="78" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="60"/></expr_stmt>
			<if pos:line="79" pos:column="25">if <condition pos:line="79" pos:column="28">(<expr><name pos:line="79" pos:column="29">status<pos:position pos:line="79" pos:column="35"/></name> <operator pos:line="79" pos:column="36">!=<pos:position pos:line="79" pos:column="38"/></operator> <literal type="number" pos:line="79" pos:column="39">0<pos:position pos:line="79" pos:column="40"/></literal></expr>)<pos:position pos:line="79" pos:column="41"/></condition><then pos:line="79" pos:column="41">
			<block pos:line="80" pos:column="25">{
				<expr_stmt><expr><call><name pos:line="81" pos:column="33">ERROR<pos:position pos:line="81" pos:column="38"/></name> <argument_list pos:line="81" pos:column="39">(<argument><expr><literal type="string" pos:line="81" pos:column="40">"write_riemann plugin: cf_util_get_"<pos:position pos:line="81" pos:column="76"/></literal>
						<literal type="string" pos:line="82" pos:column="49">"string_buffer failed with "<pos:position pos:line="82" pos:column="77"/></literal>
						<literal type="string" pos:line="83" pos:column="49">"status %i."<pos:position pos:line="83" pos:column="61"/></literal></expr></argument>, <argument><expr><name pos:line="83" pos:column="63">status<pos:position pos:line="83" pos:column="69"/></name></expr></argument>)<pos:position pos:line="83" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="71"/></expr_stmt>
				<break pos:line="84" pos:column="33">break;<pos:position pos:line="84" pos:column="39"/></break>
			}<pos:position pos:line="85" pos:column="26"/></block></then></if>

			<if pos:line="87" pos:column="25">if <condition pos:line="87" pos:column="28">(<expr><call><name pos:line="87" pos:column="29">strcasecmp<pos:position pos:line="87" pos:column="39"/></name> <argument_list pos:line="87" pos:column="40">(<argument><expr><literal type="string" pos:line="87" pos:column="41">"UDP"<pos:position pos:line="87" pos:column="46"/></literal></expr></argument>, <argument><expr><name pos:line="87" pos:column="48">tmp<pos:position pos:line="87" pos:column="51"/></name></expr></argument>)<pos:position pos:line="87" pos:column="52"/></argument_list></call> <operator pos:line="87" pos:column="53">==<pos:position pos:line="87" pos:column="55"/></operator> <literal type="number" pos:line="87" pos:column="56">0<pos:position pos:line="87" pos:column="57"/></literal></expr>)<pos:position pos:line="87" pos:column="58"/></condition><then pos:line="87" pos:column="58">
				<block type="pseudo"><expr_stmt><expr><name><name pos:line="88" pos:column="33">host<pos:position pos:line="88" pos:column="37"/></name><operator pos:line="88" pos:column="37">-&gt;<pos:position pos:line="88" pos:column="42"/></operator><name pos:line="88" pos:column="39">use_tcp<pos:position pos:line="88" pos:column="46"/></name></name> <operator pos:line="88" pos:column="47">=<pos:position pos:line="88" pos:column="48"/></operator> <literal type="number" pos:line="88" pos:column="49">0<pos:position pos:line="88" pos:column="50"/></literal></expr>;<pos:position pos:line="88" pos:column="51"/></expr_stmt></block></then>
			<elseif pos:line="89" pos:column="25">else <if pos:line="89" pos:column="30">if <condition pos:line="89" pos:column="33">(<expr><call><name pos:line="89" pos:column="34">strcasecmp<pos:position pos:line="89" pos:column="44"/></name> <argument_list pos:line="89" pos:column="45">(<argument><expr><literal type="string" pos:line="89" pos:column="46">"TCP"<pos:position pos:line="89" pos:column="51"/></literal></expr></argument>, <argument><expr><name pos:line="89" pos:column="53">tmp<pos:position pos:line="89" pos:column="56"/></name></expr></argument>)<pos:position pos:line="89" pos:column="57"/></argument_list></call> <operator pos:line="89" pos:column="58">==<pos:position pos:line="89" pos:column="60"/></operator> <literal type="number" pos:line="89" pos:column="61">0<pos:position pos:line="89" pos:column="62"/></literal></expr>)<pos:position pos:line="89" pos:column="63"/></condition><then pos:line="89" pos:column="63">
				<block type="pseudo"><expr_stmt><expr><name><name pos:line="90" pos:column="33">host<pos:position pos:line="90" pos:column="37"/></name><operator pos:line="90" pos:column="37">-&gt;<pos:position pos:line="90" pos:column="42"/></operator><name pos:line="90" pos:column="39">use_tcp<pos:position pos:line="90" pos:column="46"/></name></name> <operator pos:line="90" pos:column="47">=<pos:position pos:line="90" pos:column="48"/></operator> <literal type="number" pos:line="90" pos:column="49">1<pos:position pos:line="90" pos:column="50"/></literal></expr>;<pos:position pos:line="90" pos:column="51"/></expr_stmt></block></then></if></elseif>
			<else pos:line="91" pos:column="25">else
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="92" pos:column="33">WARNING<pos:position pos:line="92" pos:column="40"/></name> <argument_list pos:line="92" pos:column="41">(<argument><expr><literal type="string" pos:line="92" pos:column="42">"write_riemann plugin: The value "<pos:position pos:line="92" pos:column="76"/></literal>
						<literal type="string" pos:line="93" pos:column="49">"\"%s\" is not valid for the "<pos:position pos:line="93" pos:column="79"/></literal>
						<literal type="string" pos:line="94" pos:column="49">"\"Protocol\" option. Use "<pos:position pos:line="94" pos:column="76"/></literal>
						<literal type="string" pos:line="95" pos:column="49">"either \"UDP\" or \"TCP\"."<pos:position pos:line="95" pos:column="77"/></literal></expr></argument>,
						<argument><expr><name pos:line="96" pos:column="49">tmp<pos:position pos:line="96" pos:column="52"/></name></expr></argument>)<pos:position pos:line="96" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="96" pos:column="54"/></expr_stmt></block></else></if>
		}<pos:position pos:line="97" pos:column="18"/></block></then></if></elseif> <elseif pos:line="97" pos:column="19">else <if pos:line="97" pos:column="24">if <condition pos:line="97" pos:column="27">(<expr><call><name pos:line="97" pos:column="28">strcasecmp<pos:position pos:line="97" pos:column="38"/></name> <argument_list pos:line="97" pos:column="39">(<argument><expr><literal type="string" pos:line="97" pos:column="40">"StoreRates"<pos:position pos:line="97" pos:column="52"/></literal></expr></argument>, <argument><expr><name><name pos:line="97" pos:column="54">child<pos:position pos:line="97" pos:column="59"/></name><operator pos:line="97" pos:column="59">-&gt;<pos:position pos:line="97" pos:column="64"/></operator><name pos:line="97" pos:column="61">key<pos:position pos:line="97" pos:column="64"/></name></name></expr></argument>)<pos:position pos:line="97" pos:column="65"/></argument_list></call> <operator pos:line="97" pos:column="66">==<pos:position pos:line="97" pos:column="68"/></operator> <literal type="number" pos:line="97" pos:column="69">0<pos:position pos:line="97" pos:column="70"/></literal></expr>)<pos:position pos:line="97" pos:column="71"/></condition><then pos:line="97" pos:column="71"> <block pos:line="97" pos:column="72">{
			<expr_stmt><expr><name pos:line="98" pos:column="25">status<pos:position pos:line="98" pos:column="31"/></name> <operator pos:line="98" pos:column="32">=<pos:position pos:line="98" pos:column="33"/></operator> <call><name pos:line="98" pos:column="34">cf_util_get_boolean<pos:position pos:line="98" pos:column="53"/></name> <argument_list pos:line="98" pos:column="54">(<argument><expr><name pos:line="98" pos:column="55">child<pos:position pos:line="98" pos:column="60"/></name></expr></argument>, <argument><expr><operator pos:line="98" pos:column="62">&amp;<pos:position pos:line="98" pos:column="67"/></operator><name><name pos:line="98" pos:column="63">host<pos:position pos:line="98" pos:column="67"/></name><operator pos:line="98" pos:column="67">-&gt;<pos:position pos:line="98" pos:column="72"/></operator><name pos:line="98" pos:column="69">store_rates<pos:position pos:line="98" pos:column="80"/></name></name></expr></argument>)<pos:position pos:line="98" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="98" pos:column="82"/></expr_stmt>
			<if pos:line="99" pos:column="25">if <condition pos:line="99" pos:column="28">(<expr><name pos:line="99" pos:column="29">status<pos:position pos:line="99" pos:column="35"/></name> <operator pos:line="99" pos:column="36">!=<pos:position pos:line="99" pos:column="38"/></operator> <literal type="number" pos:line="99" pos:column="39">0<pos:position pos:line="99" pos:column="40"/></literal></expr>)<pos:position pos:line="99" pos:column="41"/></condition><then pos:line="99" pos:column="41">
				<block type="pseudo"><break pos:line="100" pos:column="33">break;<pos:position pos:line="100" pos:column="39"/></break></block></then></if>
		}<pos:position pos:line="101" pos:column="18"/></block></then></if></elseif> <elseif pos:line="101" pos:column="19">else <if pos:line="101" pos:column="24">if <condition pos:line="101" pos:column="27">(<expr><call><name pos:line="101" pos:column="28">strcasecmp<pos:position pos:line="101" pos:column="38"/></name> <argument_list pos:line="101" pos:column="39">(<argument><expr><literal type="string" pos:line="101" pos:column="40">"AlwaysAppendDS"<pos:position pos:line="101" pos:column="56"/></literal></expr></argument>, <argument><expr><name><name pos:line="101" pos:column="58">child<pos:position pos:line="101" pos:column="63"/></name><operator pos:line="101" pos:column="63">-&gt;<pos:position pos:line="101" pos:column="68"/></operator><name pos:line="101" pos:column="65">key<pos:position pos:line="101" pos:column="68"/></name></name></expr></argument>)<pos:position pos:line="101" pos:column="69"/></argument_list></call> <operator pos:line="101" pos:column="70">==<pos:position pos:line="101" pos:column="72"/></operator> <literal type="number" pos:line="101" pos:column="73">0<pos:position pos:line="101" pos:column="74"/></literal></expr>)<pos:position pos:line="101" pos:column="75"/></condition><then pos:line="101" pos:column="75"> <block pos:line="101" pos:column="76">{
			<expr_stmt><expr><name pos:line="102" pos:column="25">status<pos:position pos:line="102" pos:column="31"/></name> <operator pos:line="102" pos:column="32">=<pos:position pos:line="102" pos:column="33"/></operator> <call><name pos:line="102" pos:column="34">cf_util_get_boolean<pos:position pos:line="102" pos:column="53"/></name> <argument_list pos:line="102" pos:column="54">(<argument><expr><name pos:line="102" pos:column="55">child<pos:position pos:line="102" pos:column="60"/></name></expr></argument>,
					<argument><expr><operator pos:line="103" pos:column="41">&amp;<pos:position pos:line="103" pos:column="46"/></operator><name><name pos:line="103" pos:column="42">host<pos:position pos:line="103" pos:column="46"/></name><operator pos:line="103" pos:column="46">-&gt;<pos:position pos:line="103" pos:column="51"/></operator><name pos:line="103" pos:column="48">always_append_ds<pos:position pos:line="103" pos:column="64"/></name></name></expr></argument>)<pos:position pos:line="103" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="103" pos:column="66"/></expr_stmt>
			<if pos:line="104" pos:column="25">if <condition pos:line="104" pos:column="28">(<expr><name pos:line="104" pos:column="29">status<pos:position pos:line="104" pos:column="35"/></name> <operator pos:line="104" pos:column="36">!=<pos:position pos:line="104" pos:column="38"/></operator> <literal type="number" pos:line="104" pos:column="39">0<pos:position pos:line="104" pos:column="40"/></literal></expr>)<pos:position pos:line="104" pos:column="41"/></condition><then pos:line="104" pos:column="41">
				<block type="pseudo"><break pos:line="105" pos:column="33">break;<pos:position pos:line="105" pos:column="39"/></break></block></then></if>
		}<pos:position pos:line="106" pos:column="18"/></block></then></if></elseif> <elseif pos:line="106" pos:column="19">else <if pos:line="106" pos:column="24">if <condition pos:line="106" pos:column="27">(<expr><call><name pos:line="106" pos:column="28">strcasecmp<pos:position pos:line="106" pos:column="38"/></name> <argument_list pos:line="106" pos:column="39">(<argument><expr><literal type="string" pos:line="106" pos:column="40">"TTLFactor"<pos:position pos:line="106" pos:column="51"/></literal></expr></argument>, <argument><expr><name><name pos:line="106" pos:column="53">child<pos:position pos:line="106" pos:column="58"/></name><operator pos:line="106" pos:column="58">-&gt;<pos:position pos:line="106" pos:column="63"/></operator><name pos:line="106" pos:column="60">key<pos:position pos:line="106" pos:column="63"/></name></name></expr></argument>)<pos:position pos:line="106" pos:column="64"/></argument_list></call> <operator pos:line="106" pos:column="65">==<pos:position pos:line="106" pos:column="67"/></operator> <literal type="number" pos:line="106" pos:column="68">0<pos:position pos:line="106" pos:column="69"/></literal></expr>)<pos:position pos:line="106" pos:column="70"/></condition><then pos:line="106" pos:column="70"> <block pos:line="106" pos:column="71">{
			<decl_stmt><decl><type><name pos:line="107" pos:column="25">double<pos:position pos:line="107" pos:column="31"/></name></type> <name pos:line="107" pos:column="32">tmp<pos:position pos:line="107" pos:column="35"/></name> <init pos:line="107" pos:column="36">= <expr><name pos:line="107" pos:column="38">NAN<pos:position pos:line="107" pos:column="41"/></name></expr></init></decl>;<pos:position pos:line="107" pos:column="42"/></decl_stmt>
			<expr_stmt><expr><name pos:line="108" pos:column="25">status<pos:position pos:line="108" pos:column="31"/></name> <operator pos:line="108" pos:column="32">=<pos:position pos:line="108" pos:column="33"/></operator> <call><name pos:line="108" pos:column="34">cf_util_get_double<pos:position pos:line="108" pos:column="52"/></name> <argument_list pos:line="108" pos:column="53">(<argument><expr><name pos:line="108" pos:column="54">child<pos:position pos:line="108" pos:column="59"/></name></expr></argument>, <argument><expr><operator pos:line="108" pos:column="61">&amp;<pos:position pos:line="108" pos:column="66"/></operator><name pos:line="108" pos:column="62">tmp<pos:position pos:line="108" pos:column="65"/></name></expr></argument>)<pos:position pos:line="108" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="108" pos:column="67"/></expr_stmt>
			<if pos:line="109" pos:column="25">if <condition pos:line="109" pos:column="28">(<expr><name pos:line="109" pos:column="29">status<pos:position pos:line="109" pos:column="35"/></name> <operator pos:line="109" pos:column="36">!=<pos:position pos:line="109" pos:column="38"/></operator> <literal type="number" pos:line="109" pos:column="39">0<pos:position pos:line="109" pos:column="40"/></literal></expr>)<pos:position pos:line="109" pos:column="41"/></condition><then pos:line="109" pos:column="41">
				<block type="pseudo"><break pos:line="110" pos:column="33">break;<pos:position pos:line="110" pos:column="39"/></break></block></then></if>
			<if pos:line="111" pos:column="25">if <condition pos:line="111" pos:column="28">(<expr><name pos:line="111" pos:column="29">tmp<pos:position pos:line="111" pos:column="32"/></name> <operator pos:line="111" pos:column="33">&gt;=<pos:position pos:line="111" pos:column="38"/></operator> <literal type="number" pos:line="111" pos:column="36">2.0<pos:position pos:line="111" pos:column="39"/></literal></expr>)<pos:position pos:line="111" pos:column="40"/></condition><then pos:line="111" pos:column="40"> <block pos:line="111" pos:column="41">{
				<expr_stmt><expr><name><name pos:line="112" pos:column="33">host<pos:position pos:line="112" pos:column="37"/></name><operator pos:line="112" pos:column="37">-&gt;<pos:position pos:line="112" pos:column="42"/></operator><name pos:line="112" pos:column="39">ttl_factor<pos:position pos:line="112" pos:column="49"/></name></name> <operator pos:line="112" pos:column="50">=<pos:position pos:line="112" pos:column="51"/></operator> <name pos:line="112" pos:column="52">tmp<pos:position pos:line="112" pos:column="55"/></name></expr>;<pos:position pos:line="112" pos:column="56"/></expr_stmt>
			}<pos:position pos:line="113" pos:column="26"/></block></then> <elseif pos:line="113" pos:column="27">else <if pos:line="113" pos:column="32">if <condition pos:line="113" pos:column="35">(<expr><name pos:line="113" pos:column="36">tmp<pos:position pos:line="113" pos:column="39"/></name> <operator pos:line="113" pos:column="40">&gt;=<pos:position pos:line="113" pos:column="45"/></operator> <literal type="number" pos:line="113" pos:column="43">1.0<pos:position pos:line="113" pos:column="46"/></literal></expr>)<pos:position pos:line="113" pos:column="47"/></condition><then pos:line="113" pos:column="47"> <block pos:line="113" pos:column="48">{
				<expr_stmt><expr><call><name pos:line="114" pos:column="33">NOTICE<pos:position pos:line="114" pos:column="39"/></name> <argument_list pos:line="114" pos:column="40">(<argument><expr><literal type="string" pos:line="114" pos:column="41">"write_riemann plugin: The configured "<pos:position pos:line="114" pos:column="80"/></literal>
						<literal type="string" pos:line="115" pos:column="49">"TTLFactor is very small "<pos:position pos:line="115" pos:column="75"/></literal>
						<literal type="string" pos:line="116" pos:column="49">"(%.1f). A value of 2.0 or "<pos:position pos:line="116" pos:column="77"/></literal>
						<literal type="string" pos:line="117" pos:column="49">"greater is recommended."<pos:position pos:line="117" pos:column="74"/></literal></expr></argument>,
						<argument><expr><name pos:line="118" pos:column="49">tmp<pos:position pos:line="118" pos:column="52"/></name></expr></argument>)<pos:position pos:line="118" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="118" pos:column="54"/></expr_stmt>
				<expr_stmt><expr><name><name pos:line="119" pos:column="33">host<pos:position pos:line="119" pos:column="37"/></name><operator pos:line="119" pos:column="37">-&gt;<pos:position pos:line="119" pos:column="42"/></operator><name pos:line="119" pos:column="39">ttl_factor<pos:position pos:line="119" pos:column="49"/></name></name> <operator pos:line="119" pos:column="50">=<pos:position pos:line="119" pos:column="51"/></operator> <name pos:line="119" pos:column="52">tmp<pos:position pos:line="119" pos:column="55"/></name></expr>;<pos:position pos:line="119" pos:column="56"/></expr_stmt>
			}<pos:position pos:line="120" pos:column="26"/></block></then></if></elseif> <elseif pos:line="120" pos:column="27">else <if pos:line="120" pos:column="32">if <condition pos:line="120" pos:column="35">(<expr><name pos:line="120" pos:column="36">tmp<pos:position pos:line="120" pos:column="39"/></name> <operator pos:line="120" pos:column="40">&gt;<pos:position pos:line="120" pos:column="44"/></operator> <literal type="number" pos:line="120" pos:column="42">0.0<pos:position pos:line="120" pos:column="45"/></literal></expr>)<pos:position pos:line="120" pos:column="46"/></condition><then pos:line="120" pos:column="46"> <block pos:line="120" pos:column="47">{
				<expr_stmt><expr><call><name pos:line="121" pos:column="33">WARNING<pos:position pos:line="121" pos:column="40"/></name> <argument_list pos:line="121" pos:column="41">(<argument><expr><literal type="string" pos:line="121" pos:column="42">"write_riemann plugin: The configured "<pos:position pos:line="121" pos:column="81"/></literal>
						<literal type="string" pos:line="122" pos:column="49">"TTLFactor is too small to be "<pos:position pos:line="122" pos:column="80"/></literal>
						<literal type="string" pos:line="123" pos:column="49">"useful (%.1f). I'll use it "<pos:position pos:line="123" pos:column="78"/></literal>
						<literal type="string" pos:line="124" pos:column="49">"since the user knows best, "<pos:position pos:line="124" pos:column="78"/></literal>
						<literal type="string" pos:line="125" pos:column="49">"but under protest."<pos:position pos:line="125" pos:column="69"/></literal></expr></argument>,
						<argument><expr><name pos:line="126" pos:column="49">tmp<pos:position pos:line="126" pos:column="52"/></name></expr></argument>)<pos:position pos:line="126" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="126" pos:column="54"/></expr_stmt>
				<expr_stmt><expr><name><name pos:line="127" pos:column="33">host<pos:position pos:line="127" pos:column="37"/></name><operator pos:line="127" pos:column="37">-&gt;<pos:position pos:line="127" pos:column="42"/></operator><name pos:line="127" pos:column="39">ttl_factor<pos:position pos:line="127" pos:column="49"/></name></name> <operator pos:line="127" pos:column="50">=<pos:position pos:line="127" pos:column="51"/></operator> <name pos:line="127" pos:column="52">tmp<pos:position pos:line="127" pos:column="55"/></name></expr>;<pos:position pos:line="127" pos:column="56"/></expr_stmt>
			}<pos:position pos:line="128" pos:column="26"/></block></then></if></elseif> <else pos:line="128" pos:column="27">else <block pos:line="128" pos:column="32">{ <comment type="block" pos:line="128" pos:column="34">/* zero, negative and NAN */</comment>
				<expr_stmt><expr><call><name pos:line="129" pos:column="33">ERROR<pos:position pos:line="129" pos:column="38"/></name> <argument_list pos:line="129" pos:column="39">(<argument><expr><literal type="string" pos:line="129" pos:column="40">"write_riemann plugin: The configured "<pos:position pos:line="129" pos:column="79"/></literal>
						<literal type="string" pos:line="130" pos:column="49">"TTLFactor is invalid (%.1f)."<pos:position pos:line="130" pos:column="79"/></literal></expr></argument>,
						<argument><expr><name pos:line="131" pos:column="49">tmp<pos:position pos:line="131" pos:column="52"/></name></expr></argument>)<pos:position pos:line="131" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="131" pos:column="54"/></expr_stmt>
			}<pos:position pos:line="132" pos:column="26"/></block></else></if>
		}<pos:position pos:line="133" pos:column="18"/></block></then></if></elseif> <else pos:line="133" pos:column="19">else <block pos:line="133" pos:column="24">{
			<expr_stmt><expr><call><name pos:line="134" pos:column="25">WARNING<pos:position pos:line="134" pos:column="32"/></name><argument_list pos:line="134" pos:column="32">(<argument><expr><literal type="string" pos:line="134" pos:column="33">"write_riemann plugin: ignoring unknown config "<pos:position pos:line="134" pos:column="81"/></literal>
				<literal type="string" pos:line="135" pos:column="33">"option: \"%s\""<pos:position pos:line="135" pos:column="49"/></literal></expr></argument>, <argument><expr><name><name pos:line="135" pos:column="51">child<pos:position pos:line="135" pos:column="56"/></name><operator pos:line="135" pos:column="56">-&gt;<pos:position pos:line="135" pos:column="61"/></operator><name pos:line="135" pos:column="58">key<pos:position pos:line="135" pos:column="61"/></name></name></expr></argument>)<pos:position pos:line="135" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="135" pos:column="63"/></expr_stmt>
		}<pos:position pos:line="136" pos:column="18"/></block></else></if>
	}<pos:position pos:line="137" pos:column="10"/></block></for>
	<if pos:line="138" pos:column="9">if <condition pos:line="138" pos:column="12">(<expr><name pos:line="138" pos:column="13">status<pos:position pos:line="138" pos:column="19"/></name> <operator pos:line="138" pos:column="20">!=<pos:position pos:line="138" pos:column="22"/></operator> <literal type="number" pos:line="138" pos:column="23">0<pos:position pos:line="138" pos:column="24"/></literal></expr>)<pos:position pos:line="138" pos:column="25"/></condition><then pos:line="138" pos:column="25"> <block pos:line="138" pos:column="26">{
		<expr_stmt><expr><call><name pos:line="139" pos:column="17">riemann_free<pos:position pos:line="139" pos:column="29"/></name> <argument_list pos:line="139" pos:column="30">(<argument><expr><name pos:line="139" pos:column="31">host<pos:position pos:line="139" pos:column="35"/></name></expr></argument>)<pos:position pos:line="139" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="139" pos:column="37"/></expr_stmt>
		<return pos:line="140" pos:column="17">return <expr><name pos:line="140" pos:column="24">status<pos:position pos:line="140" pos:column="30"/></name></expr>;<pos:position pos:line="140" pos:column="31"/></return>
	}<pos:position pos:line="141" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="143" pos:column="9">ssnprintf<pos:position pos:line="143" pos:column="18"/></name> <argument_list pos:line="143" pos:column="19">(<argument><expr><name pos:line="143" pos:column="20">callback_name<pos:position pos:line="143" pos:column="33"/></name></expr></argument>, <argument><expr><sizeof pos:line="143" pos:column="35">sizeof <argument_list pos:line="143" pos:column="42">(<argument><expr><name pos:line="143" pos:column="43">callback_name<pos:position pos:line="143" pos:column="56"/></name></expr></argument>)<pos:position pos:line="143" pos:column="57"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="143" pos:column="59">"write_riemann/%s"<pos:position pos:line="143" pos:column="77"/></literal></expr></argument>,
			<argument><expr><name><name pos:line="144" pos:column="25">host<pos:position pos:line="144" pos:column="29"/></name><operator pos:line="144" pos:column="29">-&gt;<pos:position pos:line="144" pos:column="34"/></operator><name pos:line="144" pos:column="31">name<pos:position pos:line="144" pos:column="35"/></name></name></expr></argument>)<pos:position pos:line="144" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="144" pos:column="37"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="145" pos:column="9">ud<pos:position pos:line="145" pos:column="11"/></name><operator pos:line="145" pos:column="11">.<pos:position pos:line="145" pos:column="12"/></operator><name pos:line="145" pos:column="12">data<pos:position pos:line="145" pos:column="16"/></name></name> <operator pos:line="145" pos:column="17">=<pos:position pos:line="145" pos:column="18"/></operator> <name pos:line="145" pos:column="19">host<pos:position pos:line="145" pos:column="23"/></name></expr>;<pos:position pos:line="145" pos:column="24"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="146" pos:column="9">ud<pos:position pos:line="146" pos:column="11"/></name><operator pos:line="146" pos:column="11">.<pos:position pos:line="146" pos:column="12"/></operator><name pos:line="146" pos:column="12">free_func<pos:position pos:line="146" pos:column="21"/></name></name> <operator pos:line="146" pos:column="22">=<pos:position pos:line="146" pos:column="23"/></operator> <name pos:line="146" pos:column="24">riemann_free<pos:position pos:line="146" pos:column="36"/></name></expr>;<pos:position pos:line="146" pos:column="37"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="148" pos:column="9">pthread_mutex_lock<pos:position pos:line="148" pos:column="27"/></name> <argument_list pos:line="148" pos:column="28">(<argument><expr><operator pos:line="148" pos:column="29">&amp;<pos:position pos:line="148" pos:column="34"/></operator><name><name pos:line="148" pos:column="30">host<pos:position pos:line="148" pos:column="34"/></name><operator pos:line="148" pos:column="34">-&gt;<pos:position pos:line="148" pos:column="39"/></operator><name pos:line="148" pos:column="36">lock<pos:position pos:line="148" pos:column="40"/></name></name></expr></argument>)<pos:position pos:line="148" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="148" pos:column="42"/></expr_stmt>

	<expr_stmt><expr><name pos:line="150" pos:column="9">status<pos:position pos:line="150" pos:column="15"/></name> <operator pos:line="150" pos:column="16">=<pos:position pos:line="150" pos:column="17"/></operator> <call><name pos:line="150" pos:column="18">plugin_register_write<pos:position pos:line="150" pos:column="39"/></name> <argument_list pos:line="150" pos:column="40">(<argument><expr><name pos:line="150" pos:column="41">callback_name<pos:position pos:line="150" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="150" pos:column="56">riemann_write<pos:position pos:line="150" pos:column="69"/></name></expr></argument>, <argument><expr><operator pos:line="150" pos:column="71">&amp;<pos:position pos:line="150" pos:column="76"/></operator><name pos:line="150" pos:column="72">ud<pos:position pos:line="150" pos:column="74"/></name></expr></argument>)<pos:position pos:line="150" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="150" pos:column="76"/></expr_stmt>

    <if pos:line="152" pos:column="5">if <condition pos:line="152" pos:column="8">(<expr><name><name pos:line="152" pos:column="9">host<pos:position pos:line="152" pos:column="13"/></name><operator pos:line="152" pos:column="13">-&gt;<pos:position pos:line="152" pos:column="18"/></operator><name pos:line="152" pos:column="15">use_tcp<pos:position pos:line="152" pos:column="22"/></name></name> <operator pos:line="152" pos:column="23">==<pos:position pos:line="152" pos:column="25"/></operator> <literal type="number" pos:line="152" pos:column="26">1<pos:position pos:line="152" pos:column="27"/></literal> <operator pos:line="152" pos:column="28">&amp;&amp;<pos:position pos:line="152" pos:column="38"/></operator> <name><name pos:line="152" pos:column="31">host<pos:position pos:line="152" pos:column="35"/></name><operator pos:line="152" pos:column="35">-&gt;<pos:position pos:line="152" pos:column="40"/></operator><name pos:line="152" pos:column="37">batch_mode<pos:position pos:line="152" pos:column="47"/></name></name></expr>)<pos:position pos:line="152" pos:column="48"/></condition><then pos:line="152" pos:column="48"> <block pos:line="152" pos:column="49">{
        <expr_stmt><expr><name><name pos:line="153" pos:column="9">ud<pos:position pos:line="153" pos:column="11"/></name><operator pos:line="153" pos:column="11">.<pos:position pos:line="153" pos:column="12"/></operator><name pos:line="153" pos:column="12">free_func<pos:position pos:line="153" pos:column="21"/></name></name> <operator pos:line="153" pos:column="22">=<pos:position pos:line="153" pos:column="23"/></operator> <name pos:line="153" pos:column="24">NULL<pos:position pos:line="153" pos:column="28"/></name></expr>;<pos:position pos:line="153" pos:column="29"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="154" pos:column="9">plugin_register_flush<pos:position pos:line="154" pos:column="30"/></name><argument_list pos:line="154" pos:column="30">(<argument><expr><name pos:line="154" pos:column="31">callback_name<pos:position pos:line="154" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="154" pos:column="46">riemann_batch_flush<pos:position pos:line="154" pos:column="65"/></name></expr></argument>, <argument><expr><operator pos:line="154" pos:column="67">&amp;<pos:position pos:line="154" pos:column="72"/></operator><name pos:line="154" pos:column="68">ud<pos:position pos:line="154" pos:column="70"/></name></expr></argument>)<pos:position pos:line="154" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="154" pos:column="72"/></expr_stmt>
    }<pos:position pos:line="155" pos:column="6"/></block></then></if>
	<if pos:line="156" pos:column="9">if <condition pos:line="156" pos:column="12">(<expr><name pos:line="156" pos:column="13">status<pos:position pos:line="156" pos:column="19"/></name> <operator pos:line="156" pos:column="20">!=<pos:position pos:line="156" pos:column="22"/></operator> <literal type="number" pos:line="156" pos:column="23">0<pos:position pos:line="156" pos:column="24"/></literal></expr>)<pos:position pos:line="156" pos:column="25"/></condition><then pos:line="156" pos:column="25">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="157" pos:column="17">WARNING<pos:position pos:line="157" pos:column="24"/></name> <argument_list pos:line="157" pos:column="25">(<argument><expr><literal type="string" pos:line="157" pos:column="26">"write_riemann plugin: plugin_register_write (\"%s\") "<pos:position pos:line="157" pos:column="81"/></literal>
				<literal type="string" pos:line="158" pos:column="33">"failed with status %i."<pos:position pos:line="158" pos:column="57"/></literal></expr></argument>,
				<argument><expr><name pos:line="159" pos:column="33">callback_name<pos:position pos:line="159" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="159" pos:column="48">status<pos:position pos:line="159" pos:column="54"/></name></expr></argument>)<pos:position pos:line="159" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="159" pos:column="56"/></expr_stmt></block></then>
	<else pos:line="160" pos:column="9">else <comment type="block" pos:line="160" pos:column="14">/* success */</comment>
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="161" pos:column="17">host<pos:position pos:line="161" pos:column="21"/></name><operator pos:line="161" pos:column="21">-&gt;<pos:position pos:line="161" pos:column="26"/></operator><name pos:line="161" pos:column="23">reference_count<pos:position pos:line="161" pos:column="38"/></name></name><operator pos:line="161" pos:column="38">++<pos:position pos:line="161" pos:column="40"/></operator></expr>;<pos:position pos:line="161" pos:column="41"/></expr_stmt></block></else></if>

	<expr_stmt><expr><name pos:line="163" pos:column="9">status<pos:position pos:line="163" pos:column="15"/></name> <operator pos:line="163" pos:column="16">=<pos:position pos:line="163" pos:column="17"/></operator> <call><name pos:line="163" pos:column="18">plugin_register_notification<pos:position pos:line="163" pos:column="46"/></name> <argument_list pos:line="163" pos:column="47">(<argument><expr><name pos:line="163" pos:column="48">callback_name<pos:position pos:line="163" pos:column="61"/></name></expr></argument>,
			<argument><expr><name pos:line="164" pos:column="25">riemann_notification<pos:position pos:line="164" pos:column="45"/></name></expr></argument>, <argument><expr><operator pos:line="164" pos:column="47">&amp;<pos:position pos:line="164" pos:column="52"/></operator><name pos:line="164" pos:column="48">ud<pos:position pos:line="164" pos:column="50"/></name></expr></argument>)<pos:position pos:line="164" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="164" pos:column="52"/></expr_stmt>
	<if pos:line="165" pos:column="9">if <condition pos:line="165" pos:column="12">(<expr><name pos:line="165" pos:column="13">status<pos:position pos:line="165" pos:column="19"/></name> <operator pos:line="165" pos:column="20">!=<pos:position pos:line="165" pos:column="22"/></operator> <literal type="number" pos:line="165" pos:column="23">0<pos:position pos:line="165" pos:column="24"/></literal></expr>)<pos:position pos:line="165" pos:column="25"/></condition><then pos:line="165" pos:column="25">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="166" pos:column="17">WARNING<pos:position pos:line="166" pos:column="24"/></name> <argument_list pos:line="166" pos:column="25">(<argument><expr><literal type="string" pos:line="166" pos:column="26">"write_riemann plugin: plugin_register_notification (\"%s\") "<pos:position pos:line="166" pos:column="88"/></literal>
				<literal type="string" pos:line="167" pos:column="33">"failed with status %i."<pos:position pos:line="167" pos:column="57"/></literal></expr></argument>,
				<argument><expr><name pos:line="168" pos:column="33">callback_name<pos:position pos:line="168" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="168" pos:column="48">status<pos:position pos:line="168" pos:column="54"/></name></expr></argument>)<pos:position pos:line="168" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="168" pos:column="56"/></expr_stmt></block></then>
	<else pos:line="169" pos:column="9">else <comment type="block" pos:line="169" pos:column="14">/* success */</comment>
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="170" pos:column="17">host<pos:position pos:line="170" pos:column="21"/></name><operator pos:line="170" pos:column="21">-&gt;<pos:position pos:line="170" pos:column="26"/></operator><name pos:line="170" pos:column="23">reference_count<pos:position pos:line="170" pos:column="38"/></name></name><operator pos:line="170" pos:column="38">++<pos:position pos:line="170" pos:column="40"/></operator></expr>;<pos:position pos:line="170" pos:column="41"/></expr_stmt></block></else></if>

	<if pos:line="172" pos:column="9">if <condition pos:line="172" pos:column="12">(<expr><name><name pos:line="172" pos:column="13">host<pos:position pos:line="172" pos:column="17"/></name><operator pos:line="172" pos:column="17">-&gt;<pos:position pos:line="172" pos:column="22"/></operator><name pos:line="172" pos:column="19">reference_count<pos:position pos:line="172" pos:column="34"/></name></name> <operator pos:line="172" pos:column="35">&lt;=<pos:position pos:line="172" pos:column="40"/></operator> <literal type="number" pos:line="172" pos:column="38">1<pos:position pos:line="172" pos:column="39"/></literal></expr>)<pos:position pos:line="172" pos:column="40"/></condition><then pos:line="172" pos:column="40">
	<block pos:line="173" pos:column="9">{
		<comment type="block" pos:line="174" pos:column="17">/* Both callbacks failed =&gt; free memory.
		 * We need to unlock here, because riemann_free() will lock.
		 * This is not a race condition, because we're the only one
		 * holding a reference. */</comment>
		<expr_stmt><expr><call><name pos:line="178" pos:column="17">pthread_mutex_unlock<pos:position pos:line="178" pos:column="37"/></name> <argument_list pos:line="178" pos:column="38">(<argument><expr><operator pos:line="178" pos:column="39">&amp;<pos:position pos:line="178" pos:column="44"/></operator><name><name pos:line="178" pos:column="40">host<pos:position pos:line="178" pos:column="44"/></name><operator pos:line="178" pos:column="44">-&gt;<pos:position pos:line="178" pos:column="49"/></operator><name pos:line="178" pos:column="46">lock<pos:position pos:line="178" pos:column="50"/></name></name></expr></argument>)<pos:position pos:line="178" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="178" pos:column="52"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="179" pos:column="17">riemann_free<pos:position pos:line="179" pos:column="29"/></name> <argument_list pos:line="179" pos:column="30">(<argument><expr><name pos:line="179" pos:column="31">host<pos:position pos:line="179" pos:column="35"/></name></expr></argument>)<pos:position pos:line="179" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="179" pos:column="37"/></expr_stmt>
		<return pos:line="180" pos:column="17">return <expr><operator pos:line="180" pos:column="24">(<pos:position pos:line="180" pos:column="25"/></operator><operator pos:line="180" pos:column="25">-<pos:position pos:line="180" pos:column="26"/></operator><literal type="number" pos:line="180" pos:column="26">1<pos:position pos:line="180" pos:column="27"/></literal><operator pos:line="180" pos:column="27">)<pos:position pos:line="180" pos:column="28"/></operator></expr>;<pos:position pos:line="180" pos:column="29"/></return>
	}<pos:position pos:line="181" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name><name pos:line="183" pos:column="9">host<pos:position pos:line="183" pos:column="13"/></name><operator pos:line="183" pos:column="13">-&gt;<pos:position pos:line="183" pos:column="18"/></operator><name pos:line="183" pos:column="15">reference_count<pos:position pos:line="183" pos:column="30"/></name></name><operator pos:line="183" pos:column="30">--<pos:position pos:line="183" pos:column="32"/></operator></expr>;<pos:position pos:line="183" pos:column="33"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="184" pos:column="9">pthread_mutex_unlock<pos:position pos:line="184" pos:column="29"/></name> <argument_list pos:line="184" pos:column="30">(<argument><expr><operator pos:line="184" pos:column="31">&amp;<pos:position pos:line="184" pos:column="36"/></operator><name><name pos:line="184" pos:column="32">host<pos:position pos:line="184" pos:column="36"/></name><operator pos:line="184" pos:column="36">-&gt;<pos:position pos:line="184" pos:column="41"/></operator><name pos:line="184" pos:column="38">lock<pos:position pos:line="184" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="184" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="184" pos:column="44"/></expr_stmt>

	<return pos:line="186" pos:column="9">return <expr><name pos:line="186" pos:column="16">status<pos:position pos:line="186" pos:column="22"/></name></expr>;<pos:position pos:line="186" pos:column="23"/></return>
}<pos:position pos:line="187" pos:column="2"/></block></function></unit>
