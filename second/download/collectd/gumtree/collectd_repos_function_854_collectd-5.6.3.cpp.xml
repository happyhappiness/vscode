<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_854_collectd-5.6.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">meta_data_t<pos:position pos:line="1" pos:column="19"/></name> <modifier pos:line="1" pos:column="20">*<pos:position pos:line="1" pos:column="21"/></modifier></type><name pos:line="1" pos:column="21">cpy_build_meta<pos:position pos:line="1" pos:column="35"/></name><parameter_list pos:line="1" pos:column="35">(<parameter><decl><type><name pos:line="1" pos:column="36">PyObject<pos:position pos:line="1" pos:column="44"/></name> <modifier pos:line="1" pos:column="45">*<pos:position pos:line="1" pos:column="46"/></modifier></type><name pos:line="1" pos:column="46">meta<pos:position pos:line="1" pos:column="50"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="51"/></parameter_list> <block pos:line="1" pos:column="52">{
  <decl_stmt><decl><type><name pos:line="2" pos:column="3">int<pos:position pos:line="2" pos:column="6"/></name></type> <name pos:line="2" pos:column="7">s<pos:position pos:line="2" pos:column="8"/></name></decl>;<pos:position pos:line="2" pos:column="9"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">meta_data_t<pos:position pos:line="3" pos:column="14"/></name> <modifier pos:line="3" pos:column="15">*<pos:position pos:line="3" pos:column="16"/></modifier></type><name pos:line="3" pos:column="16">m<pos:position pos:line="3" pos:column="17"/></name> <init pos:line="3" pos:column="18">= <expr><name pos:line="3" pos:column="20">NULL<pos:position pos:line="3" pos:column="24"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="25"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">PyObject<pos:position pos:line="4" pos:column="11"/></name> <modifier pos:line="4" pos:column="12">*<pos:position pos:line="4" pos:column="13"/></modifier></type><name pos:line="4" pos:column="13">l<pos:position pos:line="4" pos:column="14"/></name></decl>;<pos:position pos:line="4" pos:column="15"/></decl_stmt>

  <if pos:line="6" pos:column="3">if <condition pos:line="6" pos:column="6">(<expr><operator pos:line="6" pos:column="7">(<pos:position pos:line="6" pos:column="8"/></operator><name pos:line="6" pos:column="8">meta<pos:position pos:line="6" pos:column="12"/></name> <operator pos:line="6" pos:column="13">==<pos:position pos:line="6" pos:column="15"/></operator> <name pos:line="6" pos:column="16">NULL<pos:position pos:line="6" pos:column="20"/></name><operator pos:line="6" pos:column="20">)<pos:position pos:line="6" pos:column="21"/></operator> <operator pos:line="6" pos:column="22">||<pos:position pos:line="6" pos:column="24"/></operator> <operator pos:line="6" pos:column="25">(<pos:position pos:line="6" pos:column="26"/></operator><name pos:line="6" pos:column="26">meta<pos:position pos:line="6" pos:column="30"/></name> <operator pos:line="6" pos:column="31">==<pos:position pos:line="6" pos:column="33"/></operator> <name pos:line="6" pos:column="34">Py_None<pos:position pos:line="6" pos:column="41"/></name><operator pos:line="6" pos:column="41">)<pos:position pos:line="6" pos:column="42"/></operator></expr>)<pos:position pos:line="6" pos:column="43"/></condition><then pos:line="6" pos:column="43">
    <block type="pseudo"><return pos:line="7" pos:column="5">return <expr><name pos:line="7" pos:column="12">NULL<pos:position pos:line="7" pos:column="16"/></name></expr>;<pos:position pos:line="7" pos:column="17"/></return></block></then></if>

  <expr_stmt><expr><name pos:line="9" pos:column="3">l<pos:position pos:line="9" pos:column="4"/></name> <operator pos:line="9" pos:column="5">=<pos:position pos:line="9" pos:column="6"/></operator> <call><name pos:line="9" pos:column="7">PyDict_Items<pos:position pos:line="9" pos:column="19"/></name><argument_list pos:line="9" pos:column="19">(<argument><expr><name pos:line="9" pos:column="20">meta<pos:position pos:line="9" pos:column="24"/></name></expr></argument>)<pos:position pos:line="9" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="26"/></expr_stmt> <comment type="block" pos:line="9" pos:column="27">/* New reference. */</comment>
  <if pos:line="10" pos:column="3">if <condition pos:line="10" pos:column="6">(<expr><operator pos:line="10" pos:column="7">!<pos:position pos:line="10" pos:column="8"/></operator><name pos:line="10" pos:column="8">l<pos:position pos:line="10" pos:column="9"/></name></expr>)<pos:position pos:line="10" pos:column="10"/></condition><then pos:line="10" pos:column="10"> <block pos:line="10" pos:column="11">{
    <expr_stmt><expr><call><name pos:line="11" pos:column="5">cpy_log_exception<pos:position pos:line="11" pos:column="22"/></name><argument_list pos:line="11" pos:column="22">(<argument><expr><literal type="string" pos:line="11" pos:column="23">"building meta data"<pos:position pos:line="11" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="45"/></expr_stmt>
    <return pos:line="12" pos:column="5">return <expr><name pos:line="12" pos:column="12">NULL<pos:position pos:line="12" pos:column="16"/></name></expr>;<pos:position pos:line="12" pos:column="17"/></return>
  }<pos:position pos:line="13" pos:column="4"/></block></then></if>
  <expr_stmt><expr><name pos:line="14" pos:column="3">s<pos:position pos:line="14" pos:column="4"/></name> <operator pos:line="14" pos:column="5">=<pos:position pos:line="14" pos:column="6"/></operator> <call><name pos:line="14" pos:column="7">PyList_Size<pos:position pos:line="14" pos:column="18"/></name><argument_list pos:line="14" pos:column="18">(<argument><expr><name pos:line="14" pos:column="19">l<pos:position pos:line="14" pos:column="20"/></name></expr></argument>)<pos:position pos:line="14" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="22"/></expr_stmt>
  <if pos:line="15" pos:column="3">if <condition pos:line="15" pos:column="6">(<expr><name pos:line="15" pos:column="7">s<pos:position pos:line="15" pos:column="8"/></name> <operator pos:line="15" pos:column="9">&lt;=<pos:position pos:line="15" pos:column="14"/></operator> <literal type="number" pos:line="15" pos:column="12">0<pos:position pos:line="15" pos:column="13"/></literal></expr>)<pos:position pos:line="15" pos:column="14"/></condition><then pos:line="15" pos:column="14"> <block pos:line="15" pos:column="15">{
    <expr_stmt><expr><call><name pos:line="16" pos:column="5">Py_XDECREF<pos:position pos:line="16" pos:column="15"/></name><argument_list pos:line="16" pos:column="15">(<argument><expr><name pos:line="16" pos:column="16">l<pos:position pos:line="16" pos:column="17"/></name></expr></argument>)<pos:position pos:line="16" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="19"/></expr_stmt>
    <return pos:line="17" pos:column="5">return <expr><name pos:line="17" pos:column="12">NULL<pos:position pos:line="17" pos:column="16"/></name></expr>;<pos:position pos:line="17" pos:column="17"/></return>
  }<pos:position pos:line="18" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="20" pos:column="3">m<pos:position pos:line="20" pos:column="4"/></name> <operator pos:line="20" pos:column="5">=<pos:position pos:line="20" pos:column="6"/></operator> <call><name pos:line="20" pos:column="7">meta_data_create<pos:position pos:line="20" pos:column="23"/></name><argument_list pos:line="20" pos:column="23">()<pos:position pos:line="20" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="26"/></expr_stmt>
  <for pos:line="21" pos:column="3">for <control pos:line="21" pos:column="7">(<init><decl><type><name pos:line="21" pos:column="8">int<pos:position pos:line="21" pos:column="11"/></name></type> <name pos:line="21" pos:column="12">i<pos:position pos:line="21" pos:column="13"/></name> <init pos:line="21" pos:column="14">= <expr><literal type="number" pos:line="21" pos:column="16">0<pos:position pos:line="21" pos:column="17"/></literal></expr></init></decl>;<pos:position pos:line="21" pos:column="18"/></init> <condition><expr><name pos:line="21" pos:column="19">i<pos:position pos:line="21" pos:column="20"/></name> <operator pos:line="21" pos:column="21">&lt;<pos:position pos:line="21" pos:column="25"/></operator> <name pos:line="21" pos:column="23">s<pos:position pos:line="21" pos:column="24"/></name></expr>;<pos:position pos:line="21" pos:column="25"/></condition> <incr><expr><operator pos:line="21" pos:column="26">++<pos:position pos:line="21" pos:column="28"/></operator><name pos:line="21" pos:column="28">i<pos:position pos:line="21" pos:column="29"/></name></expr></incr>)<pos:position pos:line="21" pos:column="30"/></control> <block pos:line="21" pos:column="31">{
    <decl_stmt><decl><type><specifier pos:line="22" pos:column="5">const<pos:position pos:line="22" pos:column="10"/></specifier> <name pos:line="22" pos:column="11">char<pos:position pos:line="22" pos:column="15"/></name> <modifier pos:line="22" pos:column="16">*<pos:position pos:line="22" pos:column="17"/></modifier></type><name pos:line="22" pos:column="17">string<pos:position pos:line="22" pos:column="23"/></name></decl>, <modifier pos:line="22" pos:column="25">*<pos:position pos:line="22" pos:column="26"/></modifier><decl><type ref="prev"/><name pos:line="22" pos:column="26">keystring<pos:position pos:line="22" pos:column="35"/></name></decl>;<pos:position pos:line="22" pos:column="36"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="23" pos:column="5">PyObject<pos:position pos:line="23" pos:column="13"/></name> <modifier pos:line="23" pos:column="14">*<pos:position pos:line="23" pos:column="15"/></modifier></type><name pos:line="23" pos:column="15">key<pos:position pos:line="23" pos:column="18"/></name></decl>, <modifier pos:line="23" pos:column="20">*<pos:position pos:line="23" pos:column="21"/></modifier><decl><type ref="prev"/><name pos:line="23" pos:column="21">value<pos:position pos:line="23" pos:column="26"/></name></decl>, <modifier pos:line="23" pos:column="28">*<pos:position pos:line="23" pos:column="29"/></modifier><decl><type ref="prev"/><name pos:line="23" pos:column="29">item<pos:position pos:line="23" pos:column="33"/></name></decl>, <modifier pos:line="23" pos:column="35">*<pos:position pos:line="23" pos:column="36"/></modifier><decl><type ref="prev"/><name pos:line="23" pos:column="36">tmp<pos:position pos:line="23" pos:column="39"/></name></decl>;<pos:position pos:line="23" pos:column="40"/></decl_stmt>

    <expr_stmt><expr><name pos:line="25" pos:column="5">item<pos:position pos:line="25" pos:column="9"/></name> <operator pos:line="25" pos:column="10">=<pos:position pos:line="25" pos:column="11"/></operator> <call><name pos:line="25" pos:column="12">PyList_GET_ITEM<pos:position pos:line="25" pos:column="27"/></name><argument_list pos:line="25" pos:column="27">(<argument><expr><name pos:line="25" pos:column="28">l<pos:position pos:line="25" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="31">i<pos:position pos:line="25" pos:column="32"/></name></expr></argument>)<pos:position pos:line="25" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="34"/></expr_stmt>
    <expr_stmt><expr><name pos:line="26" pos:column="5">key<pos:position pos:line="26" pos:column="8"/></name> <operator pos:line="26" pos:column="9">=<pos:position pos:line="26" pos:column="10"/></operator> <call><name pos:line="26" pos:column="11">PyTuple_GET_ITEM<pos:position pos:line="26" pos:column="27"/></name><argument_list pos:line="26" pos:column="27">(<argument><expr><name pos:line="26" pos:column="28">item<pos:position pos:line="26" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="26" pos:column="34">0<pos:position pos:line="26" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="37"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="27" pos:column="5">Py_INCREF<pos:position pos:line="27" pos:column="14"/></name><argument_list pos:line="27" pos:column="14">(<argument><expr><name pos:line="27" pos:column="15">key<pos:position pos:line="27" pos:column="18"/></name></expr></argument>)<pos:position pos:line="27" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="20"/></expr_stmt>
    <expr_stmt><expr><name pos:line="28" pos:column="5">keystring<pos:position pos:line="28" pos:column="14"/></name> <operator pos:line="28" pos:column="15">=<pos:position pos:line="28" pos:column="16"/></operator> <call><name pos:line="28" pos:column="17">cpy_unicode_or_bytes_to_string<pos:position pos:line="28" pos:column="47"/></name><argument_list pos:line="28" pos:column="47">(<argument><expr><operator pos:line="28" pos:column="48">&amp;<pos:position pos:line="28" pos:column="53"/></operator><name pos:line="28" pos:column="49">key<pos:position pos:line="28" pos:column="52"/></name></expr></argument>)<pos:position pos:line="28" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="54"/></expr_stmt>
    <if pos:line="29" pos:column="5">if <condition pos:line="29" pos:column="8">(<expr><operator pos:line="29" pos:column="9">!<pos:position pos:line="29" pos:column="10"/></operator><name pos:line="29" pos:column="10">keystring<pos:position pos:line="29" pos:column="19"/></name></expr>)<pos:position pos:line="29" pos:column="20"/></condition><then pos:line="29" pos:column="20"> <block pos:line="29" pos:column="21">{
      <expr_stmt><expr><call><name pos:line="30" pos:column="7">PyErr_Clear<pos:position pos:line="30" pos:column="18"/></name><argument_list pos:line="30" pos:column="18">()<pos:position pos:line="30" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="21"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="31" pos:column="7">Py_XDECREF<pos:position pos:line="31" pos:column="17"/></name><argument_list pos:line="31" pos:column="17">(<argument><expr><name pos:line="31" pos:column="18">key<pos:position pos:line="31" pos:column="21"/></name></expr></argument>)<pos:position pos:line="31" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="23"/></expr_stmt>
      <continue pos:line="32" pos:column="7">continue;<pos:position pos:line="32" pos:column="16"/></continue>
    }<pos:position pos:line="33" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="34" pos:column="5">value<pos:position pos:line="34" pos:column="10"/></name> <operator pos:line="34" pos:column="11">=<pos:position pos:line="34" pos:column="12"/></operator> <call><name pos:line="34" pos:column="13">PyTuple_GET_ITEM<pos:position pos:line="34" pos:column="29"/></name><argument_list pos:line="34" pos:column="29">(<argument><expr><name pos:line="34" pos:column="30">item<pos:position pos:line="34" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="34" pos:column="36">1<pos:position pos:line="34" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="39"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="35" pos:column="5">Py_INCREF<pos:position pos:line="35" pos:column="14"/></name><argument_list pos:line="35" pos:column="14">(<argument><expr><name pos:line="35" pos:column="15">value<pos:position pos:line="35" pos:column="20"/></name></expr></argument>)<pos:position pos:line="35" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="22"/></expr_stmt>
    <if pos:line="36" pos:column="5">if <condition pos:line="36" pos:column="8">(<expr><name pos:line="36" pos:column="9">value<pos:position pos:line="36" pos:column="14"/></name> <operator pos:line="36" pos:column="15">==<pos:position pos:line="36" pos:column="17"/></operator> <name pos:line="36" pos:column="18">Py_True<pos:position pos:line="36" pos:column="25"/></name></expr>)<pos:position pos:line="36" pos:column="26"/></condition><then pos:line="36" pos:column="26"> <block pos:line="36" pos:column="27">{
      <expr_stmt><expr><call><name pos:line="37" pos:column="7">meta_data_add_boolean<pos:position pos:line="37" pos:column="28"/></name><argument_list pos:line="37" pos:column="28">(<argument><expr><name pos:line="37" pos:column="29">m<pos:position pos:line="37" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="32">keystring<pos:position pos:line="37" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="37" pos:column="43">1<pos:position pos:line="37" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="37" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="46"/></expr_stmt>
    }<pos:position pos:line="38" pos:column="6"/></block></then> <elseif pos:line="38" pos:column="7">else <if pos:line="38" pos:column="12">if <condition pos:line="38" pos:column="15">(<expr><name pos:line="38" pos:column="16">value<pos:position pos:line="38" pos:column="21"/></name> <operator pos:line="38" pos:column="22">==<pos:position pos:line="38" pos:column="24"/></operator> <name pos:line="38" pos:column="25">Py_False<pos:position pos:line="38" pos:column="33"/></name></expr>)<pos:position pos:line="38" pos:column="34"/></condition><then pos:line="38" pos:column="34"> <block pos:line="38" pos:column="35">{
      <expr_stmt><expr><call><name pos:line="39" pos:column="7">meta_data_add_boolean<pos:position pos:line="39" pos:column="28"/></name><argument_list pos:line="39" pos:column="28">(<argument><expr><name pos:line="39" pos:column="29">m<pos:position pos:line="39" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="32">keystring<pos:position pos:line="39" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="39" pos:column="43">0<pos:position pos:line="39" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="39" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="46"/></expr_stmt>
    }<pos:position pos:line="40" pos:column="6"/></block></then></if></elseif> <elseif pos:line="40" pos:column="7">else <if pos:line="40" pos:column="12">if <condition pos:line="40" pos:column="15">(<expr><call><name pos:line="40" pos:column="16">PyFloat_Check<pos:position pos:line="40" pos:column="29"/></name><argument_list pos:line="40" pos:column="29">(<argument><expr><name pos:line="40" pos:column="30">value<pos:position pos:line="40" pos:column="35"/></name></expr></argument>)<pos:position pos:line="40" pos:column="36"/></argument_list></call></expr>)<pos:position pos:line="40" pos:column="37"/></condition><then pos:line="40" pos:column="37"> <block pos:line="40" pos:column="38">{
      <expr_stmt><expr><call><name pos:line="41" pos:column="7">meta_data_add_double<pos:position pos:line="41" pos:column="27"/></name><argument_list pos:line="41" pos:column="27">(<argument><expr><name pos:line="41" pos:column="28">m<pos:position pos:line="41" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="31">keystring<pos:position pos:line="41" pos:column="40"/></name></expr></argument>, <argument><expr><call><name pos:line="41" pos:column="42">PyFloat_AsDouble<pos:position pos:line="41" pos:column="58"/></name><argument_list pos:line="41" pos:column="58">(<argument><expr><name pos:line="41" pos:column="59">value<pos:position pos:line="41" pos:column="64"/></name></expr></argument>)<pos:position pos:line="41" pos:column="65"/></argument_list></call></expr></argument>)<pos:position pos:line="41" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="67"/></expr_stmt>
    }<pos:position pos:line="42" pos:column="6"/></block></then></if></elseif> <elseif pos:line="42" pos:column="7">else <if pos:line="42" pos:column="12">if <condition pos:line="42" pos:column="15">(<expr><call><name pos:line="42" pos:column="16">PyObject_TypeCheck<pos:position pos:line="42" pos:column="34"/></name><argument_list pos:line="42" pos:column="34">(<argument><expr><name pos:line="42" pos:column="35">value<pos:position pos:line="42" pos:column="40"/></name></expr></argument>, <argument><expr><operator pos:line="42" pos:column="42">&amp;<pos:position pos:line="42" pos:column="47"/></operator><name pos:line="42" pos:column="43">SignedType<pos:position pos:line="42" pos:column="53"/></name></expr></argument>)<pos:position pos:line="42" pos:column="54"/></argument_list></call></expr>)<pos:position pos:line="42" pos:column="55"/></condition><then pos:line="42" pos:column="55"> <block pos:line="42" pos:column="56">{
      <decl_stmt><decl><type><name pos:line="43" pos:column="7">long<pos:position pos:line="43" pos:column="11"/></name> <name pos:line="43" pos:column="12">long<pos:position pos:line="43" pos:column="16"/></name> <name pos:line="43" pos:column="17">int<pos:position pos:line="43" pos:column="20"/></name></type> <name pos:line="43" pos:column="21">lli<pos:position pos:line="43" pos:column="24"/></name></decl>;<pos:position pos:line="43" pos:column="25"/></decl_stmt>
      <expr_stmt><expr><name pos:line="44" pos:column="7">lli<pos:position pos:line="44" pos:column="10"/></name> <operator pos:line="44" pos:column="11">=<pos:position pos:line="44" pos:column="12"/></operator> <call><name pos:line="44" pos:column="13">PyLong_AsLongLong<pos:position pos:line="44" pos:column="30"/></name><argument_list pos:line="44" pos:column="30">(<argument><expr><name pos:line="44" pos:column="31">value<pos:position pos:line="44" pos:column="36"/></name></expr></argument>)<pos:position pos:line="44" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="38"/></expr_stmt>
      <if pos:line="45" pos:column="7">if <condition pos:line="45" pos:column="10">(<expr><operator pos:line="45" pos:column="11">!<pos:position pos:line="45" pos:column="12"/></operator><call><name pos:line="45" pos:column="12">PyErr_Occurred<pos:position pos:line="45" pos:column="26"/></name><argument_list pos:line="45" pos:column="26">()<pos:position pos:line="45" pos:column="28"/></argument_list></call> <operator pos:line="45" pos:column="29">&amp;&amp;<pos:position pos:line="45" pos:column="39"/></operator> <operator pos:line="45" pos:column="32">(<pos:position pos:line="45" pos:column="33"/></operator><name pos:line="45" pos:column="33">lli<pos:position pos:line="45" pos:column="36"/></name> <operator pos:line="45" pos:column="37">==<pos:position pos:line="45" pos:column="39"/></operator> <operator pos:line="45" pos:column="40">(<pos:position pos:line="45" pos:column="41"/></operator><name pos:line="45" pos:column="41">int64_t<pos:position pos:line="45" pos:column="48"/></name><operator pos:line="45" pos:column="48">)<pos:position pos:line="45" pos:column="49"/></operator><name pos:line="45" pos:column="49">lli<pos:position pos:line="45" pos:column="52"/></name><operator pos:line="45" pos:column="52">)<pos:position pos:line="45" pos:column="53"/></operator></expr>)<pos:position pos:line="45" pos:column="54"/></condition><then pos:line="45" pos:column="54">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="46" pos:column="9">meta_data_add_signed_int<pos:position pos:line="46" pos:column="33"/></name><argument_list pos:line="46" pos:column="33">(<argument><expr><name pos:line="46" pos:column="34">m<pos:position pos:line="46" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="37">keystring<pos:position pos:line="46" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="48">lli<pos:position pos:line="46" pos:column="51"/></name></expr></argument>)<pos:position pos:line="46" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="53"/></expr_stmt></block></then></if>
    }<pos:position pos:line="47" pos:column="6"/></block></then></if></elseif> <elseif pos:line="47" pos:column="7">else <if pos:line="47" pos:column="12">if <condition pos:line="47" pos:column="15">(<expr><call><name pos:line="47" pos:column="16">PyObject_TypeCheck<pos:position pos:line="47" pos:column="34"/></name><argument_list pos:line="47" pos:column="34">(<argument><expr><name pos:line="47" pos:column="35">value<pos:position pos:line="47" pos:column="40"/></name></expr></argument>, <argument><expr><operator pos:line="47" pos:column="42">&amp;<pos:position pos:line="47" pos:column="47"/></operator><name pos:line="47" pos:column="43">UnsignedType<pos:position pos:line="47" pos:column="55"/></name></expr></argument>)<pos:position pos:line="47" pos:column="56"/></argument_list></call></expr>)<pos:position pos:line="47" pos:column="57"/></condition><then pos:line="47" pos:column="57"> <block pos:line="47" pos:column="58">{
      <decl_stmt><decl><type><name pos:line="48" pos:column="7">long<pos:position pos:line="48" pos:column="11"/></name> <name pos:line="48" pos:column="12">long<pos:position pos:line="48" pos:column="16"/></name> <name pos:line="48" pos:column="17">unsigned<pos:position pos:line="48" pos:column="25"/></name></type> <name pos:line="48" pos:column="26">llu<pos:position pos:line="48" pos:column="29"/></name></decl>;<pos:position pos:line="48" pos:column="30"/></decl_stmt>
      <expr_stmt><expr><name pos:line="49" pos:column="7">llu<pos:position pos:line="49" pos:column="10"/></name> <operator pos:line="49" pos:column="11">=<pos:position pos:line="49" pos:column="12"/></operator> <call><name pos:line="49" pos:column="13">PyLong_AsUnsignedLongLong<pos:position pos:line="49" pos:column="38"/></name><argument_list pos:line="49" pos:column="38">(<argument><expr><name pos:line="49" pos:column="39">value<pos:position pos:line="49" pos:column="44"/></name></expr></argument>)<pos:position pos:line="49" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="46"/></expr_stmt>
      <if pos:line="50" pos:column="7">if <condition pos:line="50" pos:column="10">(<expr><operator pos:line="50" pos:column="11">!<pos:position pos:line="50" pos:column="12"/></operator><call><name pos:line="50" pos:column="12">PyErr_Occurred<pos:position pos:line="50" pos:column="26"/></name><argument_list pos:line="50" pos:column="26">()<pos:position pos:line="50" pos:column="28"/></argument_list></call> <operator pos:line="50" pos:column="29">&amp;&amp;<pos:position pos:line="50" pos:column="39"/></operator> <operator pos:line="50" pos:column="32">(<pos:position pos:line="50" pos:column="33"/></operator><name pos:line="50" pos:column="33">llu<pos:position pos:line="50" pos:column="36"/></name> <operator pos:line="50" pos:column="37">==<pos:position pos:line="50" pos:column="39"/></operator> <operator pos:line="50" pos:column="40">(<pos:position pos:line="50" pos:column="41"/></operator><name pos:line="50" pos:column="41">uint64_t<pos:position pos:line="50" pos:column="49"/></name><operator pos:line="50" pos:column="49">)<pos:position pos:line="50" pos:column="50"/></operator><name pos:line="50" pos:column="50">llu<pos:position pos:line="50" pos:column="53"/></name><operator pos:line="50" pos:column="53">)<pos:position pos:line="50" pos:column="54"/></operator></expr>)<pos:position pos:line="50" pos:column="55"/></condition><then pos:line="50" pos:column="55">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="51" pos:column="9">meta_data_add_unsigned_int<pos:position pos:line="51" pos:column="35"/></name><argument_list pos:line="51" pos:column="35">(<argument><expr><name pos:line="51" pos:column="36">m<pos:position pos:line="51" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="51" pos:column="39">keystring<pos:position pos:line="51" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="51" pos:column="50">llu<pos:position pos:line="51" pos:column="53"/></name></expr></argument>)<pos:position pos:line="51" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="55"/></expr_stmt></block></then></if>
    }<pos:position pos:line="52" pos:column="6"/></block></then></if></elseif> <elseif pos:line="52" pos:column="7">else <if pos:line="52" pos:column="12">if <condition pos:line="52" pos:column="15">(<expr><call><name pos:line="52" pos:column="16">PyNumber_Check<pos:position pos:line="52" pos:column="30"/></name><argument_list pos:line="52" pos:column="30">(<argument><expr><name pos:line="52" pos:column="31">value<pos:position pos:line="52" pos:column="36"/></name></expr></argument>)<pos:position pos:line="52" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="52" pos:column="38"/></condition><then pos:line="52" pos:column="38"> <block pos:line="52" pos:column="39">{
      <decl_stmt><decl><type><name pos:line="53" pos:column="7">long<pos:position pos:line="53" pos:column="11"/></name> <name pos:line="53" pos:column="12">long<pos:position pos:line="53" pos:column="16"/></name> <name pos:line="53" pos:column="17">int<pos:position pos:line="53" pos:column="20"/></name></type> <name pos:line="53" pos:column="21">lli<pos:position pos:line="53" pos:column="24"/></name></decl>;<pos:position pos:line="53" pos:column="25"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="54" pos:column="7">long<pos:position pos:line="54" pos:column="11"/></name> <name pos:line="54" pos:column="12">long<pos:position pos:line="54" pos:column="16"/></name> <name pos:line="54" pos:column="17">unsigned<pos:position pos:line="54" pos:column="25"/></name></type> <name pos:line="54" pos:column="26">llu<pos:position pos:line="54" pos:column="29"/></name></decl>;<pos:position pos:line="54" pos:column="30"/></decl_stmt>
      <expr_stmt><expr><name pos:line="55" pos:column="7">tmp<pos:position pos:line="55" pos:column="10"/></name> <operator pos:line="55" pos:column="11">=<pos:position pos:line="55" pos:column="12"/></operator> <call><name pos:line="55" pos:column="13">PyNumber_Long<pos:position pos:line="55" pos:column="26"/></name><argument_list pos:line="55" pos:column="26">(<argument><expr><name pos:line="55" pos:column="27">value<pos:position pos:line="55" pos:column="32"/></name></expr></argument>)<pos:position pos:line="55" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="34"/></expr_stmt>
      <expr_stmt><expr><name pos:line="56" pos:column="7">lli<pos:position pos:line="56" pos:column="10"/></name> <operator pos:line="56" pos:column="11">=<pos:position pos:line="56" pos:column="12"/></operator> <call><name pos:line="56" pos:column="13">PyLong_AsLongLong<pos:position pos:line="56" pos:column="30"/></name><argument_list pos:line="56" pos:column="30">(<argument><expr><name pos:line="56" pos:column="31">tmp<pos:position pos:line="56" pos:column="34"/></name></expr></argument>)<pos:position pos:line="56" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="36"/></expr_stmt>
      <if pos:line="57" pos:column="7">if <condition pos:line="57" pos:column="10">(<expr><operator pos:line="57" pos:column="11">!<pos:position pos:line="57" pos:column="12"/></operator><call><name pos:line="57" pos:column="12">PyErr_Occurred<pos:position pos:line="57" pos:column="26"/></name><argument_list pos:line="57" pos:column="26">()<pos:position pos:line="57" pos:column="28"/></argument_list></call> <operator pos:line="57" pos:column="29">&amp;&amp;<pos:position pos:line="57" pos:column="39"/></operator> <operator pos:line="57" pos:column="32">(<pos:position pos:line="57" pos:column="33"/></operator><name pos:line="57" pos:column="33">lli<pos:position pos:line="57" pos:column="36"/></name> <operator pos:line="57" pos:column="37">==<pos:position pos:line="57" pos:column="39"/></operator> <operator pos:line="57" pos:column="40">(<pos:position pos:line="57" pos:column="41"/></operator><name pos:line="57" pos:column="41">int64_t<pos:position pos:line="57" pos:column="48"/></name><operator pos:line="57" pos:column="48">)<pos:position pos:line="57" pos:column="49"/></operator><name pos:line="57" pos:column="49">lli<pos:position pos:line="57" pos:column="52"/></name><operator pos:line="57" pos:column="52">)<pos:position pos:line="57" pos:column="53"/></operator></expr>)<pos:position pos:line="57" pos:column="54"/></condition><then pos:line="57" pos:column="54"> <block pos:line="57" pos:column="55">{
        <expr_stmt><expr><call><name pos:line="58" pos:column="9">meta_data_add_signed_int<pos:position pos:line="58" pos:column="33"/></name><argument_list pos:line="58" pos:column="33">(<argument><expr><name pos:line="58" pos:column="34">m<pos:position pos:line="58" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="58" pos:column="37">keystring<pos:position pos:line="58" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="58" pos:column="48">lli<pos:position pos:line="58" pos:column="51"/></name></expr></argument>)<pos:position pos:line="58" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="53"/></expr_stmt>
      }<pos:position pos:line="59" pos:column="8"/></block></then> <else pos:line="59" pos:column="9">else <block pos:line="59" pos:column="14">{
        <expr_stmt><expr><call><name pos:line="60" pos:column="9">PyErr_Clear<pos:position pos:line="60" pos:column="20"/></name><argument_list pos:line="60" pos:column="20">()<pos:position pos:line="60" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="23"/></expr_stmt>
        <expr_stmt><expr><name pos:line="61" pos:column="9">llu<pos:position pos:line="61" pos:column="12"/></name> <operator pos:line="61" pos:column="13">=<pos:position pos:line="61" pos:column="14"/></operator> <call><name pos:line="61" pos:column="15">PyLong_AsUnsignedLongLong<pos:position pos:line="61" pos:column="40"/></name><argument_list pos:line="61" pos:column="40">(<argument><expr><name pos:line="61" pos:column="41">tmp<pos:position pos:line="61" pos:column="44"/></name></expr></argument>)<pos:position pos:line="61" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="46"/></expr_stmt>
        <if pos:line="62" pos:column="9">if <condition pos:line="62" pos:column="12">(<expr><operator pos:line="62" pos:column="13">!<pos:position pos:line="62" pos:column="14"/></operator><call><name pos:line="62" pos:column="14">PyErr_Occurred<pos:position pos:line="62" pos:column="28"/></name><argument_list pos:line="62" pos:column="28">()<pos:position pos:line="62" pos:column="30"/></argument_list></call> <operator pos:line="62" pos:column="31">&amp;&amp;<pos:position pos:line="62" pos:column="41"/></operator> <operator pos:line="62" pos:column="34">(<pos:position pos:line="62" pos:column="35"/></operator><name pos:line="62" pos:column="35">llu<pos:position pos:line="62" pos:column="38"/></name> <operator pos:line="62" pos:column="39">==<pos:position pos:line="62" pos:column="41"/></operator> <operator pos:line="62" pos:column="42">(<pos:position pos:line="62" pos:column="43"/></operator><name pos:line="62" pos:column="43">uint64_t<pos:position pos:line="62" pos:column="51"/></name><operator pos:line="62" pos:column="51">)<pos:position pos:line="62" pos:column="52"/></operator><name pos:line="62" pos:column="52">llu<pos:position pos:line="62" pos:column="55"/></name><operator pos:line="62" pos:column="55">)<pos:position pos:line="62" pos:column="56"/></operator></expr>)<pos:position pos:line="62" pos:column="57"/></condition><then pos:line="62" pos:column="57">
          <block type="pseudo"><expr_stmt><expr><call><name pos:line="63" pos:column="11">meta_data_add_unsigned_int<pos:position pos:line="63" pos:column="37"/></name><argument_list pos:line="63" pos:column="37">(<argument><expr><name pos:line="63" pos:column="38">m<pos:position pos:line="63" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="63" pos:column="41">keystring<pos:position pos:line="63" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="63" pos:column="52">llu<pos:position pos:line="63" pos:column="55"/></name></expr></argument>)<pos:position pos:line="63" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="57"/></expr_stmt></block></then></if>
      }<pos:position pos:line="64" pos:column="8"/></block></else></if>
      <expr_stmt><expr><call><name pos:line="65" pos:column="7">Py_XDECREF<pos:position pos:line="65" pos:column="17"/></name><argument_list pos:line="65" pos:column="17">(<argument><expr><name pos:line="65" pos:column="18">tmp<pos:position pos:line="65" pos:column="21"/></name></expr></argument>)<pos:position pos:line="65" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="23"/></expr_stmt>
    }<pos:position pos:line="66" pos:column="6"/></block></then></if></elseif> <else pos:line="66" pos:column="7">else <block pos:line="66" pos:column="12">{
      <expr_stmt><expr><name pos:line="67" pos:column="7">string<pos:position pos:line="67" pos:column="13"/></name> <operator pos:line="67" pos:column="14">=<pos:position pos:line="67" pos:column="15"/></operator> <call><name pos:line="67" pos:column="16">cpy_unicode_or_bytes_to_string<pos:position pos:line="67" pos:column="46"/></name><argument_list pos:line="67" pos:column="46">(<argument><expr><operator pos:line="67" pos:column="47">&amp;<pos:position pos:line="67" pos:column="52"/></operator><name pos:line="67" pos:column="48">value<pos:position pos:line="67" pos:column="53"/></name></expr></argument>)<pos:position pos:line="67" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="55"/></expr_stmt>
      <if pos:line="68" pos:column="7">if <condition pos:line="68" pos:column="10">(<expr><name pos:line="68" pos:column="11">string<pos:position pos:line="68" pos:column="17"/></name></expr>)<pos:position pos:line="68" pos:column="18"/></condition><then pos:line="68" pos:column="18"> <block pos:line="68" pos:column="19">{
        <expr_stmt><expr><call><name pos:line="69" pos:column="9">meta_data_add_string<pos:position pos:line="69" pos:column="29"/></name><argument_list pos:line="69" pos:column="29">(<argument><expr><name pos:line="69" pos:column="30">m<pos:position pos:line="69" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="69" pos:column="33">keystring<pos:position pos:line="69" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="69" pos:column="44">string<pos:position pos:line="69" pos:column="50"/></name></expr></argument>)<pos:position pos:line="69" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="52"/></expr_stmt>
      }<pos:position pos:line="70" pos:column="8"/></block></then> <else pos:line="70" pos:column="9">else <block pos:line="70" pos:column="14">{
        <expr_stmt><expr><call><name pos:line="71" pos:column="9">PyErr_Clear<pos:position pos:line="71" pos:column="20"/></name><argument_list pos:line="71" pos:column="20">()<pos:position pos:line="71" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="23"/></expr_stmt>
        <expr_stmt><expr><name pos:line="72" pos:column="9">tmp<pos:position pos:line="72" pos:column="12"/></name> <operator pos:line="72" pos:column="13">=<pos:position pos:line="72" pos:column="14"/></operator> <call><name pos:line="72" pos:column="15">PyObject_Str<pos:position pos:line="72" pos:column="27"/></name><argument_list pos:line="72" pos:column="27">(<argument><expr><name pos:line="72" pos:column="28">value<pos:position pos:line="72" pos:column="33"/></name></expr></argument>)<pos:position pos:line="72" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="35"/></expr_stmt>
        <expr_stmt><expr><name pos:line="73" pos:column="9">string<pos:position pos:line="73" pos:column="15"/></name> <operator pos:line="73" pos:column="16">=<pos:position pos:line="73" pos:column="17"/></operator> <call><name pos:line="73" pos:column="18">cpy_unicode_or_bytes_to_string<pos:position pos:line="73" pos:column="48"/></name><argument_list pos:line="73" pos:column="48">(<argument><expr><operator pos:line="73" pos:column="49">&amp;<pos:position pos:line="73" pos:column="54"/></operator><name pos:line="73" pos:column="50">tmp<pos:position pos:line="73" pos:column="53"/></name></expr></argument>)<pos:position pos:line="73" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="55"/></expr_stmt>
        <if pos:line="74" pos:column="9">if <condition pos:line="74" pos:column="12">(<expr><name pos:line="74" pos:column="13">string<pos:position pos:line="74" pos:column="19"/></name></expr>)<pos:position pos:line="74" pos:column="20"/></condition><then pos:line="74" pos:column="20">
          <block type="pseudo"><expr_stmt><expr><call><name pos:line="75" pos:column="11">meta_data_add_string<pos:position pos:line="75" pos:column="31"/></name><argument_list pos:line="75" pos:column="31">(<argument><expr><name pos:line="75" pos:column="32">m<pos:position pos:line="75" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="75" pos:column="35">keystring<pos:position pos:line="75" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="75" pos:column="46">string<pos:position pos:line="75" pos:column="52"/></name></expr></argument>)<pos:position pos:line="75" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="54"/></expr_stmt></block></then></if>
        <expr_stmt><expr><call><name pos:line="76" pos:column="9">Py_XDECREF<pos:position pos:line="76" pos:column="19"/></name><argument_list pos:line="76" pos:column="19">(<argument><expr><name pos:line="76" pos:column="20">tmp<pos:position pos:line="76" pos:column="23"/></name></expr></argument>)<pos:position pos:line="76" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="25"/></expr_stmt>
      }<pos:position pos:line="77" pos:column="8"/></block></else></if>
    }<pos:position pos:line="78" pos:column="6"/></block></else></if>
    <if pos:line="79" pos:column="5">if <condition pos:line="79" pos:column="8">(<expr><call><name pos:line="79" pos:column="9">PyErr_Occurred<pos:position pos:line="79" pos:column="23"/></name><argument_list pos:line="79" pos:column="23">()<pos:position pos:line="79" pos:column="25"/></argument_list></call></expr>)<pos:position pos:line="79" pos:column="26"/></condition><then pos:line="79" pos:column="26">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="80" pos:column="7">cpy_log_exception<pos:position pos:line="80" pos:column="24"/></name><argument_list pos:line="80" pos:column="24">(<argument><expr><literal type="string" pos:line="80" pos:column="25">"building meta data"<pos:position pos:line="80" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="80" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="47"/></expr_stmt></block></then></if>
    <expr_stmt><expr><call><name pos:line="81" pos:column="5">Py_XDECREF<pos:position pos:line="81" pos:column="15"/></name><argument_list pos:line="81" pos:column="15">(<argument><expr><name pos:line="81" pos:column="16">value<pos:position pos:line="81" pos:column="21"/></name></expr></argument>)<pos:position pos:line="81" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="23"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="82" pos:column="5">Py_DECREF<pos:position pos:line="82" pos:column="14"/></name><argument_list pos:line="82" pos:column="14">(<argument><expr><name pos:line="82" pos:column="15">key<pos:position pos:line="82" pos:column="18"/></name></expr></argument>)<pos:position pos:line="82" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="20"/></expr_stmt>
  }<pos:position pos:line="83" pos:column="4"/></block></for>
  <expr_stmt><expr><call><name pos:line="84" pos:column="3">Py_XDECREF<pos:position pos:line="84" pos:column="13"/></name><argument_list pos:line="84" pos:column="13">(<argument><expr><name pos:line="84" pos:column="14">l<pos:position pos:line="84" pos:column="15"/></name></expr></argument>)<pos:position pos:line="84" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="17"/></expr_stmt>
  <return pos:line="85" pos:column="3">return <expr><name pos:line="85" pos:column="10">m<pos:position pos:line="85" pos:column="11"/></name></expr>;<pos:position pos:line="85" pos:column="12"/></return>
}<pos:position pos:line="86" pos:column="2"/></block></function></unit>
