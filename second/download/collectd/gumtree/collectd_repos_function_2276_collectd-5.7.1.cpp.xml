<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_2276_collectd-5.7.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">cj_sock_perform<pos:position pos:line="1" pos:column="27"/></name><parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><name pos:line="1" pos:column="28">cj_t<pos:position pos:line="1" pos:column="32"/></name> <modifier pos:line="1" pos:column="33">*<pos:position pos:line="1" pos:column="34"/></modifier></type><name pos:line="1" pos:column="34">db<pos:position pos:line="1" pos:column="36"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="37"/></parameter_list> <comment type="block" pos:line="1" pos:column="38">/* {{{ */</comment>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">char<pos:position pos:line="3" pos:column="7"/></name></type> <name><name pos:line="3" pos:column="8">errbuf<pos:position pos:line="3" pos:column="14"/></name><index pos:line="3" pos:column="14">[<expr><literal type="number" pos:line="3" pos:column="15">1024<pos:position pos:line="3" pos:column="19"/></literal></expr>]<pos:position pos:line="3" pos:column="20"/></index></name></decl>;<pos:position pos:line="3" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="4" pos:column="3">struct<pos:position pos:line="4" pos:column="9"/></name> <name pos:line="4" pos:column="10">sockaddr_un<pos:position pos:line="4" pos:column="21"/></name></name></type> <name pos:line="4" pos:column="22">sa_unix<pos:position pos:line="4" pos:column="29"/></name> <init pos:line="4" pos:column="30">= <expr><block pos:line="4" pos:column="32">{<expr><literal type="number" pos:line="4" pos:column="33">0<pos:position pos:line="4" pos:column="34"/></literal></expr>}<pos:position pos:line="4" pos:column="35"/></block></expr></init></decl>;<pos:position pos:line="4" pos:column="36"/></decl_stmt>
  <expr_stmt><expr><name><name pos:line="5" pos:column="3">sa_unix<pos:position pos:line="5" pos:column="10"/></name><operator pos:line="5" pos:column="10">.<pos:position pos:line="5" pos:column="11"/></operator><name pos:line="5" pos:column="11">sun_family<pos:position pos:line="5" pos:column="21"/></name></name> <operator pos:line="5" pos:column="22">=<pos:position pos:line="5" pos:column="23"/></operator> <name pos:line="5" pos:column="24">AF_UNIX<pos:position pos:line="5" pos:column="31"/></name></expr>;<pos:position pos:line="5" pos:column="32"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="6" pos:column="3">sstrncpy<pos:position pos:line="6" pos:column="11"/></name><argument_list pos:line="6" pos:column="11">(<argument><expr><name><name pos:line="6" pos:column="12">sa_unix<pos:position pos:line="6" pos:column="19"/></name><operator pos:line="6" pos:column="19">.<pos:position pos:line="6" pos:column="20"/></operator><name pos:line="6" pos:column="20">sun_path<pos:position pos:line="6" pos:column="28"/></name></name></expr></argument>, <argument><expr><name><name pos:line="6" pos:column="30">db<pos:position pos:line="6" pos:column="32"/></name><operator pos:line="6" pos:column="32">-&gt;<pos:position pos:line="6" pos:column="37"/></operator><name pos:line="6" pos:column="34">sock<pos:position pos:line="6" pos:column="38"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="6" pos:column="40">sizeof<argument_list pos:line="6" pos:column="46">(<argument><expr><name><name pos:line="6" pos:column="47">sa_unix<pos:position pos:line="6" pos:column="54"/></name><operator pos:line="6" pos:column="54">.<pos:position pos:line="6" pos:column="55"/></operator><name pos:line="6" pos:column="55">sun_path<pos:position pos:line="6" pos:column="63"/></name></name></expr></argument>)<pos:position pos:line="6" pos:column="64"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="6" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="66"/></expr_stmt>

  <decl_stmt><decl><type><name pos:line="8" pos:column="3">int<pos:position pos:line="8" pos:column="6"/></name></type> <name pos:line="8" pos:column="7">fd<pos:position pos:line="8" pos:column="9"/></name> <init pos:line="8" pos:column="10">= <expr><call><name pos:line="8" pos:column="12">socket<pos:position pos:line="8" pos:column="18"/></name><argument_list pos:line="8" pos:column="18">(<argument><expr><name pos:line="8" pos:column="19">AF_UNIX<pos:position pos:line="8" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="28">SOCK_STREAM<pos:position pos:line="8" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="8" pos:column="41">0<pos:position pos:line="8" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="43"/></argument_list></call></expr></init></decl>;<pos:position pos:line="8" pos:column="44"/></decl_stmt>
  <if pos:line="9" pos:column="3">if <condition pos:line="9" pos:column="6">(<expr><name pos:line="9" pos:column="7">fd<pos:position pos:line="9" pos:column="9"/></name> <operator pos:line="9" pos:column="10">&lt;<pos:position pos:line="9" pos:column="14"/></operator> <literal type="number" pos:line="9" pos:column="12">0<pos:position pos:line="9" pos:column="13"/></literal></expr>)<pos:position pos:line="9" pos:column="14"/></condition><then pos:line="9" pos:column="14">
    <block type="pseudo"><return pos:line="10" pos:column="5">return <expr><operator pos:line="10" pos:column="12">(<pos:position pos:line="10" pos:column="13"/></operator><operator pos:line="10" pos:column="13">-<pos:position pos:line="10" pos:column="14"/></operator><literal type="number" pos:line="10" pos:column="14">1<pos:position pos:line="10" pos:column="15"/></literal><operator pos:line="10" pos:column="15">)<pos:position pos:line="10" pos:column="16"/></operator></expr>;<pos:position pos:line="10" pos:column="17"/></return></block></then></if>
  <if pos:line="11" pos:column="3">if <condition pos:line="11" pos:column="6">(<expr><call><name pos:line="11" pos:column="7">connect<pos:position pos:line="11" pos:column="14"/></name><argument_list pos:line="11" pos:column="14">(<argument><expr><name pos:line="11" pos:column="15">fd<pos:position pos:line="11" pos:column="17"/></name></expr></argument>, <argument><expr><operator pos:line="11" pos:column="19">(<pos:position pos:line="11" pos:column="20"/></operator>struct <name pos:line="11" pos:column="27">sockaddr<pos:position pos:line="11" pos:column="35"/></name> <operator pos:line="11" pos:column="36">*<pos:position pos:line="11" pos:column="37"/></operator><operator pos:line="11" pos:column="37">)<pos:position pos:line="11" pos:column="38"/></operator><operator pos:line="11" pos:column="38">&amp;<pos:position pos:line="11" pos:column="43"/></operator><name pos:line="11" pos:column="39">sa_unix<pos:position pos:line="11" pos:column="46"/></name></expr></argument>, <argument><expr><sizeof pos:line="11" pos:column="48">sizeof<argument_list pos:line="11" pos:column="54">(<argument><expr><name pos:line="11" pos:column="55">sa_unix<pos:position pos:line="11" pos:column="62"/></name></expr></argument>)<pos:position pos:line="11" pos:column="63"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="11" pos:column="64"/></argument_list></call> <operator pos:line="11" pos:column="65">&lt;<pos:position pos:line="11" pos:column="69"/></operator> <literal type="number" pos:line="11" pos:column="67">0<pos:position pos:line="11" pos:column="68"/></literal></expr>)<pos:position pos:line="11" pos:column="69"/></condition><then pos:line="11" pos:column="69"> <block pos:line="11" pos:column="70">{
    <expr_stmt><expr><call><name pos:line="12" pos:column="5">ERROR<pos:position pos:line="12" pos:column="10"/></name><argument_list pos:line="12" pos:column="10">(<argument><expr><literal type="string" pos:line="12" pos:column="11">"curl_json plugin: connect(%s) failed: %s"<pos:position pos:line="12" pos:column="53"/></literal></expr></argument>,
          <argument><expr><ternary><condition><expr><operator pos:line="13" pos:column="11">(<pos:position pos:line="13" pos:column="12"/></operator><name><name pos:line="13" pos:column="12">db<pos:position pos:line="13" pos:column="14"/></name><operator pos:line="13" pos:column="14">-&gt;<pos:position pos:line="13" pos:column="19"/></operator><name pos:line="13" pos:column="16">sock<pos:position pos:line="13" pos:column="20"/></name></name> <operator pos:line="13" pos:column="21">!=<pos:position pos:line="13" pos:column="23"/></operator> <name pos:line="13" pos:column="24">NULL<pos:position pos:line="13" pos:column="28"/></name><operator pos:line="13" pos:column="28">)<pos:position pos:line="13" pos:column="29"/></operator></expr> ?<pos:position pos:line="13" pos:column="31"/></condition><then pos:line="13" pos:column="31"> <expr><name><name pos:line="13" pos:column="32">db<pos:position pos:line="13" pos:column="34"/></name><operator pos:line="13" pos:column="34">-&gt;<pos:position pos:line="13" pos:column="39"/></operator><name pos:line="13" pos:column="36">sock<pos:position pos:line="13" pos:column="40"/></name></name></expr> <pos:position pos:line="13" pos:column="41"/></then><else pos:line="13" pos:column="41">: <expr><literal type="string" pos:line="13" pos:column="43">"&lt;null&gt;"<pos:position pos:line="13" pos:column="57"/></literal></expr></else></ternary></expr></argument>,
          <argument><expr><call><name pos:line="14" pos:column="11">sstrerror<pos:position pos:line="14" pos:column="20"/></name><argument_list pos:line="14" pos:column="20">(<argument><expr><name pos:line="14" pos:column="21">errno<pos:position pos:line="14" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="28">errbuf<pos:position pos:line="14" pos:column="34"/></name></expr></argument>, <argument><expr><sizeof pos:line="14" pos:column="36">sizeof<argument_list pos:line="14" pos:column="42">(<argument><expr><name pos:line="14" pos:column="43">errbuf<pos:position pos:line="14" pos:column="49"/></name></expr></argument>)<pos:position pos:line="14" pos:column="50"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="14" pos:column="51"/></argument_list></call></expr></argument>)<pos:position pos:line="14" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="53"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="15" pos:column="5">close<pos:position pos:line="15" pos:column="10"/></name><argument_list pos:line="15" pos:column="10">(<argument><expr><name pos:line="15" pos:column="11">fd<pos:position pos:line="15" pos:column="13"/></name></expr></argument>)<pos:position pos:line="15" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="15"/></expr_stmt>
    <return pos:line="16" pos:column="5">return <expr><operator pos:line="16" pos:column="12">(<pos:position pos:line="16" pos:column="13"/></operator><operator pos:line="16" pos:column="13">-<pos:position pos:line="16" pos:column="14"/></operator><literal type="number" pos:line="16" pos:column="14">1<pos:position pos:line="16" pos:column="15"/></literal><operator pos:line="16" pos:column="15">)<pos:position pos:line="16" pos:column="16"/></operator></expr>;<pos:position pos:line="16" pos:column="17"/></return>
  }<pos:position pos:line="17" pos:column="4"/></block></then></if>

  <decl_stmt><decl><type><name pos:line="19" pos:column="3">ssize_t<pos:position pos:line="19" pos:column="10"/></name></type> <name pos:line="19" pos:column="11">red<pos:position pos:line="19" pos:column="14"/></name></decl>;<pos:position pos:line="19" pos:column="15"/></decl_stmt>
  <do pos:line="20" pos:column="3">do <block pos:line="20" pos:column="6">{
    <decl_stmt><decl><type><name pos:line="21" pos:column="5">unsigned<pos:position pos:line="21" pos:column="13"/></name> <name pos:line="21" pos:column="14">char<pos:position pos:line="21" pos:column="18"/></name></type> <name><name pos:line="21" pos:column="19">buffer<pos:position pos:line="21" pos:column="25"/></name><index pos:line="21" pos:column="25">[<expr><literal type="number" pos:line="21" pos:column="26">4096<pos:position pos:line="21" pos:column="30"/></literal></expr>]<pos:position pos:line="21" pos:column="31"/></index></name></decl>;<pos:position pos:line="21" pos:column="32"/></decl_stmt>
    <expr_stmt><expr><name pos:line="22" pos:column="5">red<pos:position pos:line="22" pos:column="8"/></name> <operator pos:line="22" pos:column="9">=<pos:position pos:line="22" pos:column="10"/></operator> <call><name pos:line="22" pos:column="11">read<pos:position pos:line="22" pos:column="15"/></name><argument_list pos:line="22" pos:column="15">(<argument><expr><name pos:line="22" pos:column="16">fd<pos:position pos:line="22" pos:column="18"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="20">buffer<pos:position pos:line="22" pos:column="26"/></name></expr></argument>, <argument><expr><sizeof pos:line="22" pos:column="28">sizeof<argument_list pos:line="22" pos:column="34">(<argument><expr><name pos:line="22" pos:column="35">buffer<pos:position pos:line="22" pos:column="41"/></name></expr></argument>)<pos:position pos:line="22" pos:column="42"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="22" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="44"/></expr_stmt>
    <if pos:line="23" pos:column="5">if <condition pos:line="23" pos:column="8">(<expr><name pos:line="23" pos:column="9">red<pos:position pos:line="23" pos:column="12"/></name> <operator pos:line="23" pos:column="13">&lt;<pos:position pos:line="23" pos:column="17"/></operator> <literal type="number" pos:line="23" pos:column="15">0<pos:position pos:line="23" pos:column="16"/></literal></expr>)<pos:position pos:line="23" pos:column="17"/></condition><then pos:line="23" pos:column="17"> <block pos:line="23" pos:column="18">{
      <expr_stmt><expr><call><name pos:line="24" pos:column="7">ERROR<pos:position pos:line="24" pos:column="12"/></name><argument_list pos:line="24" pos:column="12">(<argument><expr><literal type="string" pos:line="24" pos:column="13">"curl_json plugin: read(%s) failed: %s"<pos:position pos:line="24" pos:column="52"/></literal></expr></argument>,
            <argument><expr><ternary><condition><expr><operator pos:line="25" pos:column="13">(<pos:position pos:line="25" pos:column="14"/></operator><name><name pos:line="25" pos:column="14">db<pos:position pos:line="25" pos:column="16"/></name><operator pos:line="25" pos:column="16">-&gt;<pos:position pos:line="25" pos:column="21"/></operator><name pos:line="25" pos:column="18">sock<pos:position pos:line="25" pos:column="22"/></name></name> <operator pos:line="25" pos:column="23">!=<pos:position pos:line="25" pos:column="25"/></operator> <name pos:line="25" pos:column="26">NULL<pos:position pos:line="25" pos:column="30"/></name><operator pos:line="25" pos:column="30">)<pos:position pos:line="25" pos:column="31"/></operator></expr> ?<pos:position pos:line="25" pos:column="33"/></condition><then pos:line="25" pos:column="33"> <expr><name><name pos:line="25" pos:column="34">db<pos:position pos:line="25" pos:column="36"/></name><operator pos:line="25" pos:column="36">-&gt;<pos:position pos:line="25" pos:column="41"/></operator><name pos:line="25" pos:column="38">sock<pos:position pos:line="25" pos:column="42"/></name></name></expr> <pos:position pos:line="25" pos:column="43"/></then><else pos:line="25" pos:column="43">: <expr><literal type="string" pos:line="25" pos:column="45">"&lt;null&gt;"<pos:position pos:line="25" pos:column="59"/></literal></expr></else></ternary></expr></argument>,
            <argument><expr><call><name pos:line="26" pos:column="13">sstrerror<pos:position pos:line="26" pos:column="22"/></name><argument_list pos:line="26" pos:column="22">(<argument><expr><name pos:line="26" pos:column="23">errno<pos:position pos:line="26" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="30">errbuf<pos:position pos:line="26" pos:column="36"/></name></expr></argument>, <argument><expr><sizeof pos:line="26" pos:column="38">sizeof<argument_list pos:line="26" pos:column="44">(<argument><expr><name pos:line="26" pos:column="45">errbuf<pos:position pos:line="26" pos:column="51"/></name></expr></argument>)<pos:position pos:line="26" pos:column="52"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="26" pos:column="53"/></argument_list></call></expr></argument>)<pos:position pos:line="26" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="55"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="27" pos:column="7">close<pos:position pos:line="27" pos:column="12"/></name><argument_list pos:line="27" pos:column="12">(<argument><expr><name pos:line="27" pos:column="13">fd<pos:position pos:line="27" pos:column="15"/></name></expr></argument>)<pos:position pos:line="27" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="17"/></expr_stmt>
      <return pos:line="28" pos:column="7">return <expr><operator pos:line="28" pos:column="14">(<pos:position pos:line="28" pos:column="15"/></operator><operator pos:line="28" pos:column="15">-<pos:position pos:line="28" pos:column="16"/></operator><literal type="number" pos:line="28" pos:column="16">1<pos:position pos:line="28" pos:column="17"/></literal><operator pos:line="28" pos:column="17">)<pos:position pos:line="28" pos:column="18"/></operator></expr>;<pos:position pos:line="28" pos:column="19"/></return>
    }<pos:position pos:line="29" pos:column="6"/></block></then></if>
    <if pos:line="30" pos:column="5">if <condition pos:line="30" pos:column="8">(<expr><operator pos:line="30" pos:column="9">!<pos:position pos:line="30" pos:column="10"/></operator><call><name pos:line="30" pos:column="10">cj_curl_callback<pos:position pos:line="30" pos:column="26"/></name><argument_list pos:line="30" pos:column="26">(<argument><expr><name pos:line="30" pos:column="27">buffer<pos:position pos:line="30" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="35">red<pos:position pos:line="30" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="30" pos:column="40">1<pos:position pos:line="30" pos:column="41"/></literal></expr></argument>, <argument><expr><name pos:line="30" pos:column="43">db<pos:position pos:line="30" pos:column="45"/></name></expr></argument>)<pos:position pos:line="30" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="30" pos:column="47"/></condition><then pos:line="30" pos:column="47">
      <block type="pseudo"><break pos:line="31" pos:column="7">break;<pos:position pos:line="31" pos:column="13"/></break></block></then></if>
  }<pos:position pos:line="32" pos:column="4"/></block> while <condition pos:line="32" pos:column="11">(<expr><name pos:line="32" pos:column="12">red<pos:position pos:line="32" pos:column="15"/></name> <operator pos:line="32" pos:column="16">&gt;<pos:position pos:line="32" pos:column="20"/></operator> <literal type="number" pos:line="32" pos:column="18">0<pos:position pos:line="32" pos:column="19"/></literal></expr>)<pos:position pos:line="32" pos:column="20"/></condition>;<pos:position pos:line="32" pos:column="21"/></do>
  <expr_stmt><expr><call><name pos:line="33" pos:column="3">close<pos:position pos:line="33" pos:column="8"/></name><argument_list pos:line="33" pos:column="8">(<argument><expr><name pos:line="33" pos:column="9">fd<pos:position pos:line="33" pos:column="11"/></name></expr></argument>)<pos:position pos:line="33" pos:column="12"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="13"/></expr_stmt>
  <return pos:line="34" pos:column="3">return <expr><operator pos:line="34" pos:column="10">(<pos:position pos:line="34" pos:column="11"/></operator><literal type="number" pos:line="34" pos:column="11">0<pos:position pos:line="34" pos:column="12"/></literal><operator pos:line="34" pos:column="12">)<pos:position pos:line="34" pos:column="13"/></operator></expr>;<pos:position pos:line="34" pos:column="14"/></return>
}<pos:position pos:line="35" pos:column="2"/></block></function></unit>
