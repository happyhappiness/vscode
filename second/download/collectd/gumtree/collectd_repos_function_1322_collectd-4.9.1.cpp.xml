<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1322_collectd-4.9.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">udb_result_prepare_result<pos:position pos:line="1" pos:column="37"/></name> <parameter_list pos:line="1" pos:column="38">(<parameter><decl><type><name pos:line="1" pos:column="39">udb_result_t<pos:position pos:line="1" pos:column="51"/></name> <modifier pos:line="1" pos:column="52">*<pos:position pos:line="1" pos:column="53"/></modifier></type><name pos:line="1" pos:column="53">r<pos:position pos:line="1" pos:column="54"/></name></decl></parameter>, <comment type="block" pos:line="1" pos:column="56">/* {{{ */</comment>
    <parameter><decl><type><name pos:line="2" pos:column="5">char<pos:position pos:line="2" pos:column="9"/></name> <modifier pos:line="2" pos:column="10">*<pos:position pos:line="2" pos:column="11"/></modifier><modifier pos:line="2" pos:column="11">*<pos:position pos:line="2" pos:column="12"/></modifier></type><name pos:line="2" pos:column="12">column_names<pos:position pos:line="2" pos:column="24"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="26">size_t<pos:position pos:line="2" pos:column="32"/></name></type> <name pos:line="2" pos:column="33">column_num<pos:position pos:line="2" pos:column="43"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="44"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">size_t<pos:position pos:line="4" pos:column="9"/></name></type> <name pos:line="4" pos:column="10">i<pos:position pos:line="4" pos:column="11"/></name></decl>;<pos:position pos:line="4" pos:column="12"/></decl_stmt>

  <if pos:line="6" pos:column="3">if <condition pos:line="6" pos:column="6">(<expr><name pos:line="6" pos:column="7">r<pos:position pos:line="6" pos:column="8"/></name> <operator pos:line="6" pos:column="9">==<pos:position pos:line="6" pos:column="11"/></operator> <name pos:line="6" pos:column="12">NULL<pos:position pos:line="6" pos:column="16"/></name></expr>)<pos:position pos:line="6" pos:column="17"/></condition><then pos:line="6" pos:column="17">
    <block type="pseudo"><return pos:line="7" pos:column="5">return <expr><operator pos:line="7" pos:column="12">(<pos:position pos:line="7" pos:column="13"/></operator><operator pos:line="7" pos:column="13">-<pos:position pos:line="7" pos:column="14"/></operator><name pos:line="7" pos:column="14">EINVAL<pos:position pos:line="7" pos:column="20"/></name><operator pos:line="7" pos:column="20">)<pos:position pos:line="7" pos:column="21"/></operator></expr>;<pos:position pos:line="7" pos:column="22"/></return></block></then></if>

  <if pos:line="9" pos:column="3">if <condition pos:line="9" pos:column="6">(<expr><name><name pos:line="9" pos:column="7">r<pos:position pos:line="9" pos:column="8"/></name><operator pos:line="9" pos:column="8">-&gt;<pos:position pos:line="9" pos:column="13"/></operator><name pos:line="9" pos:column="10">legacy_mode<pos:position pos:line="9" pos:column="21"/></name></name> <operator pos:line="9" pos:column="22">==<pos:position pos:line="9" pos:column="24"/></operator> <literal type="number" pos:line="9" pos:column="25">1<pos:position pos:line="9" pos:column="26"/></literal></expr>)<pos:position pos:line="9" pos:column="27"/></condition><then pos:line="9" pos:column="27">
    <block type="pseudo"><return pos:line="10" pos:column="5">return <expr><operator pos:line="10" pos:column="12">(<pos:position pos:line="10" pos:column="13"/></operator><call><name pos:line="10" pos:column="13">udb_legacy_result_prepare_result<pos:position pos:line="10" pos:column="45"/></name> <argument_list pos:line="10" pos:column="46">(<argument><expr><name pos:line="10" pos:column="47">r<pos:position pos:line="10" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="50">column_names<pos:position pos:line="10" pos:column="62"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="64">column_num<pos:position pos:line="10" pos:column="74"/></name></expr></argument>)<pos:position pos:line="10" pos:column="75"/></argument_list></call><operator pos:line="10" pos:column="75">)<pos:position pos:line="10" pos:column="76"/></operator></expr>;<pos:position pos:line="10" pos:column="77"/></return></block></then></if>

  <expr_stmt><expr><call><name pos:line="12" pos:column="3">assert<pos:position pos:line="12" pos:column="9"/></name> <argument_list pos:line="12" pos:column="10">(<argument><expr><name><name pos:line="12" pos:column="11">r<pos:position pos:line="12" pos:column="12"/></name><operator pos:line="12" pos:column="12">-&gt;<pos:position pos:line="12" pos:column="17"/></operator><name pos:line="12" pos:column="14">legacy_mode<pos:position pos:line="12" pos:column="25"/></name></name> <operator pos:line="12" pos:column="26">==<pos:position pos:line="12" pos:column="28"/></operator> <literal type="number" pos:line="12" pos:column="29">0<pos:position pos:line="12" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="32"/></expr_stmt>

<cpp:define pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">define<pos:position pos:line="14" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="14" pos:column="9">BAIL_OUT<pos:position pos:line="14" pos:column="17"/></name><parameter_list pos:line="14" pos:column="17">(<parameter><type><name pos:line="14" pos:column="18">status<pos:position pos:line="14" pos:column="24"/></name></type></parameter>)<pos:position pos:line="14" pos:column="25"/></parameter_list></cpp:macro> \
  <cpp:value pos:line="15" pos:column="3">r-&gt;ds = NULL; \
  sfree (r-&gt;instances_pos); \
  sfree (r-&gt;values_pos); \
  sfree (r-&gt;instances_buffer); \
  sfree (r-&gt;values_buffer); \
  return (status)<pos:position pos:line="20" pos:column="18"/></cpp:value></cpp:define>

  <comment type="block" pos:line="22" pos:column="3">/* Make sure previous preparations are cleaned up. */</comment>
  <expr_stmt><expr><call><name pos:line="23" pos:column="3">udb_result_finish_result<pos:position pos:line="23" pos:column="27"/></name> <argument_list pos:line="23" pos:column="28">(<argument><expr><name pos:line="23" pos:column="29">r<pos:position pos:line="23" pos:column="30"/></name></expr></argument>)<pos:position pos:line="23" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="32"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="24" pos:column="3">r<pos:position pos:line="24" pos:column="4"/></name><operator pos:line="24" pos:column="4">-&gt;<pos:position pos:line="24" pos:column="9"/></operator><name pos:line="24" pos:column="6">instances_pos<pos:position pos:line="24" pos:column="19"/></name></name> <operator pos:line="24" pos:column="20">=<pos:position pos:line="24" pos:column="21"/></operator> <name pos:line="24" pos:column="22">NULL<pos:position pos:line="24" pos:column="26"/></name></expr>;<pos:position pos:line="24" pos:column="27"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="25" pos:column="3">r<pos:position pos:line="25" pos:column="4"/></name><operator pos:line="25" pos:column="4">-&gt;<pos:position pos:line="25" pos:column="9"/></operator><name pos:line="25" pos:column="6">values_pos<pos:position pos:line="25" pos:column="16"/></name></name> <operator pos:line="25" pos:column="17">=<pos:position pos:line="25" pos:column="18"/></operator> <name pos:line="25" pos:column="19">NULL<pos:position pos:line="25" pos:column="23"/></name></expr>;<pos:position pos:line="25" pos:column="24"/></expr_stmt>

  <comment type="block" pos:line="27" pos:column="3">/* Read `ds' and check number of values {{{ */</comment>
  <expr_stmt><expr><name><name pos:line="28" pos:column="3">r<pos:position pos:line="28" pos:column="4"/></name><operator pos:line="28" pos:column="4">-&gt;<pos:position pos:line="28" pos:column="9"/></operator><name pos:line="28" pos:column="6">ds<pos:position pos:line="28" pos:column="8"/></name></name> <operator pos:line="28" pos:column="9">=<pos:position pos:line="28" pos:column="10"/></operator> <call><name pos:line="28" pos:column="11">plugin_get_ds<pos:position pos:line="28" pos:column="24"/></name> <argument_list pos:line="28" pos:column="25">(<argument><expr><name><name pos:line="28" pos:column="26">r<pos:position pos:line="28" pos:column="27"/></name><operator pos:line="28" pos:column="27">-&gt;<pos:position pos:line="28" pos:column="32"/></operator><name pos:line="28" pos:column="29">type<pos:position pos:line="28" pos:column="33"/></name></name></expr></argument>)<pos:position pos:line="28" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="35"/></expr_stmt>
  <if pos:line="29" pos:column="3">if <condition pos:line="29" pos:column="6">(<expr><name><name pos:line="29" pos:column="7">r<pos:position pos:line="29" pos:column="8"/></name><operator pos:line="29" pos:column="8">-&gt;<pos:position pos:line="29" pos:column="13"/></operator><name pos:line="29" pos:column="10">ds<pos:position pos:line="29" pos:column="12"/></name></name> <operator pos:line="29" pos:column="13">==<pos:position pos:line="29" pos:column="15"/></operator> <name pos:line="29" pos:column="16">NULL<pos:position pos:line="29" pos:column="20"/></name></expr>)<pos:position pos:line="29" pos:column="21"/></condition><then pos:line="29" pos:column="21">
  <block pos:line="30" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="31" pos:column="5">ERROR<pos:position pos:line="31" pos:column="10"/></name> <argument_list pos:line="31" pos:column="11">(<argument><expr><literal type="string" pos:line="31" pos:column="12">"db query utils: udb_result_prepare_result: Type `%s' is not "<pos:position pos:line="31" pos:column="74"/></literal>
        <literal type="string" pos:line="32" pos:column="9">"known by the daemon. See types.db(5) for details."<pos:position pos:line="32" pos:column="60"/></literal></expr></argument>,
        <argument><expr><name><name pos:line="33" pos:column="9">r<pos:position pos:line="33" pos:column="10"/></name><operator pos:line="33" pos:column="10">-&gt;<pos:position pos:line="33" pos:column="15"/></operator><name pos:line="33" pos:column="12">type<pos:position pos:line="33" pos:column="16"/></name></name></expr></argument>)<pos:position pos:line="33" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="18"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="34" pos:column="5">BAIL_OUT<pos:position pos:line="34" pos:column="13"/></name> <argument_list pos:line="34" pos:column="14">(<argument><expr><operator pos:line="34" pos:column="15">-<pos:position pos:line="34" pos:column="16"/></operator><literal type="number" pos:line="34" pos:column="16">1<pos:position pos:line="34" pos:column="17"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="19"/></expr_stmt>
  }<pos:position pos:line="35" pos:column="4"/></block></then></if>

  <if pos:line="37" pos:column="3">if <condition pos:line="37" pos:column="6">(<expr><operator pos:line="37" pos:column="7">(<pos:position pos:line="37" pos:column="8"/></operator><operator pos:line="37" pos:column="8">(<pos:position pos:line="37" pos:column="9"/></operator><name pos:line="37" pos:column="9">size_t<pos:position pos:line="37" pos:column="15"/></name><operator pos:line="37" pos:column="15">)<pos:position pos:line="37" pos:column="16"/></operator> <name><name pos:line="37" pos:column="17">r<pos:position pos:line="37" pos:column="18"/></name><operator pos:line="37" pos:column="18">-&gt;<pos:position pos:line="37" pos:column="23"/></operator><name pos:line="37" pos:column="20">ds<pos:position pos:line="37" pos:column="22"/></name><operator pos:line="37" pos:column="22">-&gt;<pos:position pos:line="37" pos:column="27"/></operator><name pos:line="37" pos:column="24">ds_num<pos:position pos:line="37" pos:column="30"/></name></name><operator pos:line="37" pos:column="30">)<pos:position pos:line="37" pos:column="31"/></operator> <operator pos:line="37" pos:column="32">!=<pos:position pos:line="37" pos:column="34"/></operator> <name><name pos:line="37" pos:column="35">r<pos:position pos:line="37" pos:column="36"/></name><operator pos:line="37" pos:column="36">-&gt;<pos:position pos:line="37" pos:column="41"/></operator><name pos:line="37" pos:column="38">values_num<pos:position pos:line="37" pos:column="48"/></name></name></expr>)<pos:position pos:line="37" pos:column="49"/></condition><then pos:line="37" pos:column="49">
  <block pos:line="38" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="39" pos:column="5">ERROR<pos:position pos:line="39" pos:column="10"/></name> <argument_list pos:line="39" pos:column="11">(<argument><expr><literal type="string" pos:line="39" pos:column="12">"db query utils: udb_result_prepare_result: The type `%s' "<pos:position pos:line="39" pos:column="71"/></literal>
        <literal type="string" pos:line="40" pos:column="9">"requires exactly %i value%s, but the configuration specifies %zu."<pos:position pos:line="40" pos:column="76"/></literal></expr></argument>,
        <argument><expr><name><name pos:line="41" pos:column="9">r<pos:position pos:line="41" pos:column="10"/></name><operator pos:line="41" pos:column="10">-&gt;<pos:position pos:line="41" pos:column="15"/></operator><name pos:line="41" pos:column="12">type<pos:position pos:line="41" pos:column="16"/></name></name></expr></argument>,
        <argument><expr><name><name pos:line="42" pos:column="9">r<pos:position pos:line="42" pos:column="10"/></name><operator pos:line="42" pos:column="10">-&gt;<pos:position pos:line="42" pos:column="15"/></operator><name pos:line="42" pos:column="12">ds<pos:position pos:line="42" pos:column="14"/></name><operator pos:line="42" pos:column="14">-&gt;<pos:position pos:line="42" pos:column="19"/></operator><name pos:line="42" pos:column="16">ds_num<pos:position pos:line="42" pos:column="22"/></name></name></expr></argument>, <argument><expr><ternary><condition><expr><operator pos:line="42" pos:column="24">(<pos:position pos:line="42" pos:column="25"/></operator><name><name pos:line="42" pos:column="25">r<pos:position pos:line="42" pos:column="26"/></name><operator pos:line="42" pos:column="26">-&gt;<pos:position pos:line="42" pos:column="31"/></operator><name pos:line="42" pos:column="28">ds<pos:position pos:line="42" pos:column="30"/></name><operator pos:line="42" pos:column="30">-&gt;<pos:position pos:line="42" pos:column="35"/></operator><name pos:line="42" pos:column="32">ds_num<pos:position pos:line="42" pos:column="38"/></name></name> <operator pos:line="42" pos:column="39">==<pos:position pos:line="42" pos:column="41"/></operator> <literal type="number" pos:line="42" pos:column="42">1<pos:position pos:line="42" pos:column="43"/></literal><operator pos:line="42" pos:column="43">)<pos:position pos:line="42" pos:column="44"/></operator></expr> ?<pos:position pos:line="42" pos:column="46"/></condition><then pos:line="42" pos:column="46"> <expr><literal type="string" pos:line="42" pos:column="47">""<pos:position pos:line="42" pos:column="49"/></literal></expr> <pos:position pos:line="42" pos:column="50"/></then><else pos:line="42" pos:column="50">: <expr><literal type="string" pos:line="42" pos:column="52">"s"<pos:position pos:line="42" pos:column="55"/></literal></expr></else></ternary></expr></argument>,
        <argument><expr><name><name pos:line="43" pos:column="9">r<pos:position pos:line="43" pos:column="10"/></name><operator pos:line="43" pos:column="10">-&gt;<pos:position pos:line="43" pos:column="15"/></operator><name pos:line="43" pos:column="12">values_num<pos:position pos:line="43" pos:column="22"/></name></name></expr></argument>)<pos:position pos:line="43" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="24"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="44" pos:column="5">BAIL_OUT<pos:position pos:line="44" pos:column="13"/></name> <argument_list pos:line="44" pos:column="14">(<argument><expr><operator pos:line="44" pos:column="15">-<pos:position pos:line="44" pos:column="16"/></operator><literal type="number" pos:line="44" pos:column="16">1<pos:position pos:line="44" pos:column="17"/></literal></expr></argument>)<pos:position pos:line="44" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="19"/></expr_stmt>
  }<pos:position pos:line="45" pos:column="4"/></block></then></if>
  <comment type="block" pos:line="46" pos:column="3">/* }}} */</comment>

  <comment type="block" pos:line="48" pos:column="3">/* Allocate r-&gt;instances_pos, r-&gt;values_pos, r-&gt;instances_buffer, and
   * r-&gt;values_buffer {{{ */</comment>
  <if pos:line="50" pos:column="3">if <condition pos:line="50" pos:column="6">(<expr><name><name pos:line="50" pos:column="7">r<pos:position pos:line="50" pos:column="8"/></name><operator pos:line="50" pos:column="8">-&gt;<pos:position pos:line="50" pos:column="13"/></operator><name pos:line="50" pos:column="10">instances_num<pos:position pos:line="50" pos:column="23"/></name></name> <operator pos:line="50" pos:column="24">&gt;<pos:position pos:line="50" pos:column="28"/></operator> <literal type="number" pos:line="50" pos:column="26">0<pos:position pos:line="50" pos:column="27"/></literal></expr>)<pos:position pos:line="50" pos:column="28"/></condition><then pos:line="50" pos:column="28">
  <block pos:line="51" pos:column="3">{
    <expr_stmt><expr><name><name pos:line="52" pos:column="5">r<pos:position pos:line="52" pos:column="6"/></name><operator pos:line="52" pos:column="6">-&gt;<pos:position pos:line="52" pos:column="11"/></operator><name pos:line="52" pos:column="8">instances_pos<pos:position pos:line="52" pos:column="21"/></name></name> <operator pos:line="52" pos:column="22">=<pos:position pos:line="52" pos:column="23"/></operator> <operator pos:line="52" pos:column="24">(<pos:position pos:line="52" pos:column="25"/></operator><name pos:line="52" pos:column="25">size_t<pos:position pos:line="52" pos:column="31"/></name> <operator pos:line="52" pos:column="32">*<pos:position pos:line="52" pos:column="33"/></operator><operator pos:line="52" pos:column="33">)<pos:position pos:line="52" pos:column="34"/></operator> <call><name pos:line="52" pos:column="35">calloc<pos:position pos:line="52" pos:column="41"/></name> <argument_list pos:line="52" pos:column="42">(<argument><expr><name><name pos:line="52" pos:column="43">r<pos:position pos:line="52" pos:column="44"/></name><operator pos:line="52" pos:column="44">-&gt;<pos:position pos:line="52" pos:column="49"/></operator><name pos:line="52" pos:column="46">instances_num<pos:position pos:line="52" pos:column="59"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="52" pos:column="61">sizeof <argument_list pos:line="52" pos:column="68">(<argument><expr><name pos:line="52" pos:column="69">size_t<pos:position pos:line="52" pos:column="75"/></name></expr></argument>)<pos:position pos:line="52" pos:column="76"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="52" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="78"/></expr_stmt>
    <if pos:line="53" pos:column="5">if <condition pos:line="53" pos:column="8">(<expr><name><name pos:line="53" pos:column="9">r<pos:position pos:line="53" pos:column="10"/></name><operator pos:line="53" pos:column="10">-&gt;<pos:position pos:line="53" pos:column="15"/></operator><name pos:line="53" pos:column="12">instances_pos<pos:position pos:line="53" pos:column="25"/></name></name> <operator pos:line="53" pos:column="26">==<pos:position pos:line="53" pos:column="28"/></operator> <name pos:line="53" pos:column="29">NULL<pos:position pos:line="53" pos:column="33"/></name></expr>)<pos:position pos:line="53" pos:column="34"/></condition><then pos:line="53" pos:column="34">
    <block pos:line="54" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="55" pos:column="7">ERROR<pos:position pos:line="55" pos:column="12"/></name> <argument_list pos:line="55" pos:column="13">(<argument><expr><literal type="string" pos:line="55" pos:column="14">"db query utils: udb_result_prepare_result: malloc failed."<pos:position pos:line="55" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="55" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="75"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="56" pos:column="7">BAIL_OUT<pos:position pos:line="56" pos:column="15"/></name> <argument_list pos:line="56" pos:column="16">(<argument><expr><operator pos:line="56" pos:column="17">-<pos:position pos:line="56" pos:column="18"/></operator><name pos:line="56" pos:column="18">ENOMEM<pos:position pos:line="56" pos:column="24"/></name></expr></argument>)<pos:position pos:line="56" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="26"/></expr_stmt>
    }<pos:position pos:line="57" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name><name pos:line="59" pos:column="5">r<pos:position pos:line="59" pos:column="6"/></name><operator pos:line="59" pos:column="6">-&gt;<pos:position pos:line="59" pos:column="11"/></operator><name pos:line="59" pos:column="8">instances_buffer<pos:position pos:line="59" pos:column="24"/></name></name> <operator pos:line="59" pos:column="25">=<pos:position pos:line="59" pos:column="26"/></operator> <operator pos:line="59" pos:column="27">(<pos:position pos:line="59" pos:column="28"/></operator><name pos:line="59" pos:column="28">char<pos:position pos:line="59" pos:column="32"/></name> <operator pos:line="59" pos:column="33">*<pos:position pos:line="59" pos:column="34"/></operator><operator pos:line="59" pos:column="34">*<pos:position pos:line="59" pos:column="35"/></operator><operator pos:line="59" pos:column="35">)<pos:position pos:line="59" pos:column="36"/></operator> <call><name pos:line="59" pos:column="37">calloc<pos:position pos:line="59" pos:column="43"/></name> <argument_list pos:line="59" pos:column="44">(<argument><expr><name><name pos:line="59" pos:column="45">r<pos:position pos:line="59" pos:column="46"/></name><operator pos:line="59" pos:column="46">-&gt;<pos:position pos:line="59" pos:column="51"/></operator><name pos:line="59" pos:column="48">instances_num<pos:position pos:line="59" pos:column="61"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="59" pos:column="63">sizeof <argument_list pos:line="59" pos:column="70">(<argument><expr><name pos:line="59" pos:column="71">char<pos:position pos:line="59" pos:column="75"/></name> <operator pos:line="59" pos:column="76">*<pos:position pos:line="59" pos:column="77"/></operator></expr></argument>)<pos:position pos:line="59" pos:column="78"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="59" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="80"/></expr_stmt>
    <if pos:line="60" pos:column="5">if <condition pos:line="60" pos:column="8">(<expr><name><name pos:line="60" pos:column="9">r<pos:position pos:line="60" pos:column="10"/></name><operator pos:line="60" pos:column="10">-&gt;<pos:position pos:line="60" pos:column="15"/></operator><name pos:line="60" pos:column="12">instances_buffer<pos:position pos:line="60" pos:column="28"/></name></name> <operator pos:line="60" pos:column="29">==<pos:position pos:line="60" pos:column="31"/></operator> <name pos:line="60" pos:column="32">NULL<pos:position pos:line="60" pos:column="36"/></name></expr>)<pos:position pos:line="60" pos:column="37"/></condition><then pos:line="60" pos:column="37">
    <block pos:line="61" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="62" pos:column="7">ERROR<pos:position pos:line="62" pos:column="12"/></name> <argument_list pos:line="62" pos:column="13">(<argument><expr><literal type="string" pos:line="62" pos:column="14">"db query utils: udb_result_prepare_result: malloc failed."<pos:position pos:line="62" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="62" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="75"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="63" pos:column="7">BAIL_OUT<pos:position pos:line="63" pos:column="15"/></name> <argument_list pos:line="63" pos:column="16">(<argument><expr><operator pos:line="63" pos:column="17">-<pos:position pos:line="63" pos:column="18"/></operator><name pos:line="63" pos:column="18">ENOMEM<pos:position pos:line="63" pos:column="24"/></name></expr></argument>)<pos:position pos:line="63" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="26"/></expr_stmt>
    }<pos:position pos:line="64" pos:column="6"/></block></then></if>
  }<pos:position pos:line="65" pos:column="4"/></block></then></if> <comment type="block" pos:line="65" pos:column="5">/* if (r-&gt;instances_num &gt; 0) */</comment>

  <expr_stmt><expr><name><name pos:line="67" pos:column="3">r<pos:position pos:line="67" pos:column="4"/></name><operator pos:line="67" pos:column="4">-&gt;<pos:position pos:line="67" pos:column="9"/></operator><name pos:line="67" pos:column="6">values_pos<pos:position pos:line="67" pos:column="16"/></name></name> <operator pos:line="67" pos:column="17">=<pos:position pos:line="67" pos:column="18"/></operator> <operator pos:line="67" pos:column="19">(<pos:position pos:line="67" pos:column="20"/></operator><name pos:line="67" pos:column="20">size_t<pos:position pos:line="67" pos:column="26"/></name> <operator pos:line="67" pos:column="27">*<pos:position pos:line="67" pos:column="28"/></operator><operator pos:line="67" pos:column="28">)<pos:position pos:line="67" pos:column="29"/></operator> <call><name pos:line="67" pos:column="30">calloc<pos:position pos:line="67" pos:column="36"/></name> <argument_list pos:line="67" pos:column="37">(<argument><expr><name><name pos:line="67" pos:column="38">r<pos:position pos:line="67" pos:column="39"/></name><operator pos:line="67" pos:column="39">-&gt;<pos:position pos:line="67" pos:column="44"/></operator><name pos:line="67" pos:column="41">values_num<pos:position pos:line="67" pos:column="51"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="67" pos:column="53">sizeof <argument_list pos:line="67" pos:column="60">(<argument><expr><name pos:line="67" pos:column="61">size_t<pos:position pos:line="67" pos:column="67"/></name></expr></argument>)<pos:position pos:line="67" pos:column="68"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="67" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="70"/></expr_stmt>
  <if pos:line="68" pos:column="3">if <condition pos:line="68" pos:column="6">(<expr><name><name pos:line="68" pos:column="7">r<pos:position pos:line="68" pos:column="8"/></name><operator pos:line="68" pos:column="8">-&gt;<pos:position pos:line="68" pos:column="13"/></operator><name pos:line="68" pos:column="10">values_pos<pos:position pos:line="68" pos:column="20"/></name></name> <operator pos:line="68" pos:column="21">==<pos:position pos:line="68" pos:column="23"/></operator> <name pos:line="68" pos:column="24">NULL<pos:position pos:line="68" pos:column="28"/></name></expr>)<pos:position pos:line="68" pos:column="29"/></condition><then pos:line="68" pos:column="29">
  <block pos:line="69" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="70" pos:column="5">ERROR<pos:position pos:line="70" pos:column="10"/></name> <argument_list pos:line="70" pos:column="11">(<argument><expr><literal type="string" pos:line="70" pos:column="12">"db query utils: udb_result_prepare_result: malloc failed."<pos:position pos:line="70" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="70" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="73"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="71" pos:column="5">BAIL_OUT<pos:position pos:line="71" pos:column="13"/></name> <argument_list pos:line="71" pos:column="14">(<argument><expr><operator pos:line="71" pos:column="15">-<pos:position pos:line="71" pos:column="16"/></operator><name pos:line="71" pos:column="16">ENOMEM<pos:position pos:line="71" pos:column="22"/></name></expr></argument>)<pos:position pos:line="71" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="24"/></expr_stmt>
  }<pos:position pos:line="72" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name><name pos:line="74" pos:column="3">r<pos:position pos:line="74" pos:column="4"/></name><operator pos:line="74" pos:column="4">-&gt;<pos:position pos:line="74" pos:column="9"/></operator><name pos:line="74" pos:column="6">values_buffer<pos:position pos:line="74" pos:column="19"/></name></name> <operator pos:line="74" pos:column="20">=<pos:position pos:line="74" pos:column="21"/></operator> <operator pos:line="74" pos:column="22">(<pos:position pos:line="74" pos:column="23"/></operator><name pos:line="74" pos:column="23">char<pos:position pos:line="74" pos:column="27"/></name> <operator pos:line="74" pos:column="28">*<pos:position pos:line="74" pos:column="29"/></operator><operator pos:line="74" pos:column="29">*<pos:position pos:line="74" pos:column="30"/></operator><operator pos:line="74" pos:column="30">)<pos:position pos:line="74" pos:column="31"/></operator> <call><name pos:line="74" pos:column="32">calloc<pos:position pos:line="74" pos:column="38"/></name> <argument_list pos:line="74" pos:column="39">(<argument><expr><name><name pos:line="74" pos:column="40">r<pos:position pos:line="74" pos:column="41"/></name><operator pos:line="74" pos:column="41">-&gt;<pos:position pos:line="74" pos:column="46"/></operator><name pos:line="74" pos:column="43">values_num<pos:position pos:line="74" pos:column="53"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="74" pos:column="55">sizeof <argument_list pos:line="74" pos:column="62">(<argument><expr><name pos:line="74" pos:column="63">char<pos:position pos:line="74" pos:column="67"/></name> <operator pos:line="74" pos:column="68">*<pos:position pos:line="74" pos:column="69"/></operator></expr></argument>)<pos:position pos:line="74" pos:column="70"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="74" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="72"/></expr_stmt>
  <if pos:line="75" pos:column="3">if <condition pos:line="75" pos:column="6">(<expr><name><name pos:line="75" pos:column="7">r<pos:position pos:line="75" pos:column="8"/></name><operator pos:line="75" pos:column="8">-&gt;<pos:position pos:line="75" pos:column="13"/></operator><name pos:line="75" pos:column="10">values_buffer<pos:position pos:line="75" pos:column="23"/></name></name> <operator pos:line="75" pos:column="24">==<pos:position pos:line="75" pos:column="26"/></operator> <name pos:line="75" pos:column="27">NULL<pos:position pos:line="75" pos:column="31"/></name></expr>)<pos:position pos:line="75" pos:column="32"/></condition><then pos:line="75" pos:column="32">
  <block pos:line="76" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="77" pos:column="5">ERROR<pos:position pos:line="77" pos:column="10"/></name> <argument_list pos:line="77" pos:column="11">(<argument><expr><literal type="string" pos:line="77" pos:column="12">"db query utils: udb_result_prepare_result: malloc failed."<pos:position pos:line="77" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="77" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="73"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="78" pos:column="5">BAIL_OUT<pos:position pos:line="78" pos:column="13"/></name> <argument_list pos:line="78" pos:column="14">(<argument><expr><operator pos:line="78" pos:column="15">-<pos:position pos:line="78" pos:column="16"/></operator><name pos:line="78" pos:column="16">ENOMEM<pos:position pos:line="78" pos:column="22"/></name></expr></argument>)<pos:position pos:line="78" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="24"/></expr_stmt>
  }<pos:position pos:line="79" pos:column="4"/></block></then></if>
  <comment type="block" pos:line="80" pos:column="3">/* }}} */</comment>

  <comment type="block" pos:line="82" pos:column="3">/* Determine the position of the instance columns {{{ */</comment>
  <for pos:line="83" pos:column="3">for <control pos:line="83" pos:column="7">(<init><expr><name pos:line="83" pos:column="8">i<pos:position pos:line="83" pos:column="9"/></name> <operator pos:line="83" pos:column="10">=<pos:position pos:line="83" pos:column="11"/></operator> <literal type="number" pos:line="83" pos:column="12">0<pos:position pos:line="83" pos:column="13"/></literal></expr>;<pos:position pos:line="83" pos:column="14"/></init> <condition><expr><name pos:line="83" pos:column="15">i<pos:position pos:line="83" pos:column="16"/></name> <operator pos:line="83" pos:column="17">&lt;<pos:position pos:line="83" pos:column="21"/></operator> <name><name pos:line="83" pos:column="19">r<pos:position pos:line="83" pos:column="20"/></name><operator pos:line="83" pos:column="20">-&gt;<pos:position pos:line="83" pos:column="25"/></operator><name pos:line="83" pos:column="22">instances_num<pos:position pos:line="83" pos:column="35"/></name></name></expr>;<pos:position pos:line="83" pos:column="36"/></condition> <incr><expr><name pos:line="83" pos:column="37">i<pos:position pos:line="83" pos:column="38"/></name><operator pos:line="83" pos:column="38">++<pos:position pos:line="83" pos:column="40"/></operator></expr></incr>)<pos:position pos:line="83" pos:column="41"/></control>
  <block pos:line="84" pos:column="3">{
    <decl_stmt><decl><type><name pos:line="85" pos:column="5">size_t<pos:position pos:line="85" pos:column="11"/></name></type> <name pos:line="85" pos:column="12">j<pos:position pos:line="85" pos:column="13"/></name></decl>;<pos:position pos:line="85" pos:column="14"/></decl_stmt>

    <for pos:line="87" pos:column="5">for <control pos:line="87" pos:column="9">(<init><expr><name pos:line="87" pos:column="10">j<pos:position pos:line="87" pos:column="11"/></name> <operator pos:line="87" pos:column="12">=<pos:position pos:line="87" pos:column="13"/></operator> <literal type="number" pos:line="87" pos:column="14">0<pos:position pos:line="87" pos:column="15"/></literal></expr>;<pos:position pos:line="87" pos:column="16"/></init> <condition><expr><name pos:line="87" pos:column="17">j<pos:position pos:line="87" pos:column="18"/></name> <operator pos:line="87" pos:column="19">&lt;<pos:position pos:line="87" pos:column="23"/></operator> <name pos:line="87" pos:column="21">column_num<pos:position pos:line="87" pos:column="31"/></name></expr>;<pos:position pos:line="87" pos:column="32"/></condition> <incr><expr><name pos:line="87" pos:column="33">j<pos:position pos:line="87" pos:column="34"/></name><operator pos:line="87" pos:column="34">++<pos:position pos:line="87" pos:column="36"/></operator></expr></incr>)<pos:position pos:line="87" pos:column="37"/></control>
    <block pos:line="88" pos:column="5">{
      <if pos:line="89" pos:column="7">if <condition pos:line="89" pos:column="10">(<expr><call><name pos:line="89" pos:column="11">strcasecmp<pos:position pos:line="89" pos:column="21"/></name> <argument_list pos:line="89" pos:column="22">(<argument><expr><name><name pos:line="89" pos:column="23">r<pos:position pos:line="89" pos:column="24"/></name><operator pos:line="89" pos:column="24">-&gt;<pos:position pos:line="89" pos:column="29"/></operator><name pos:line="89" pos:column="26">instances<pos:position pos:line="89" pos:column="35"/></name><index pos:line="89" pos:column="35">[<expr><name pos:line="89" pos:column="36">i<pos:position pos:line="89" pos:column="37"/></name></expr>]<pos:position pos:line="89" pos:column="38"/></index></name></expr></argument>, <argument><expr><name><name pos:line="89" pos:column="40">column_names<pos:position pos:line="89" pos:column="52"/></name><index pos:line="89" pos:column="52">[<expr><name pos:line="89" pos:column="53">j<pos:position pos:line="89" pos:column="54"/></name></expr>]<pos:position pos:line="89" pos:column="55"/></index></name></expr></argument>)<pos:position pos:line="89" pos:column="56"/></argument_list></call> <operator pos:line="89" pos:column="57">==<pos:position pos:line="89" pos:column="59"/></operator> <literal type="number" pos:line="89" pos:column="60">0<pos:position pos:line="89" pos:column="61"/></literal></expr>)<pos:position pos:line="89" pos:column="62"/></condition><then pos:line="89" pos:column="62">
      <block pos:line="90" pos:column="7">{
        <expr_stmt><expr><name><name pos:line="91" pos:column="9">r<pos:position pos:line="91" pos:column="10"/></name><operator pos:line="91" pos:column="10">-&gt;<pos:position pos:line="91" pos:column="15"/></operator><name pos:line="91" pos:column="12">instances_pos<pos:position pos:line="91" pos:column="25"/></name><index pos:line="91" pos:column="25">[<expr><name pos:line="91" pos:column="26">i<pos:position pos:line="91" pos:column="27"/></name></expr>]<pos:position pos:line="91" pos:column="28"/></index></name> <operator pos:line="91" pos:column="29">=<pos:position pos:line="91" pos:column="30"/></operator> <name pos:line="91" pos:column="31">j<pos:position pos:line="91" pos:column="32"/></name></expr>;<pos:position pos:line="91" pos:column="33"/></expr_stmt>
        <break pos:line="92" pos:column="9">break;<pos:position pos:line="92" pos:column="15"/></break>
      }<pos:position pos:line="93" pos:column="8"/></block></then></if>
    }<pos:position pos:line="94" pos:column="6"/></block></for>

    <if pos:line="96" pos:column="5">if <condition pos:line="96" pos:column="8">(<expr><name pos:line="96" pos:column="9">j<pos:position pos:line="96" pos:column="10"/></name> <operator pos:line="96" pos:column="11">&gt;=<pos:position pos:line="96" pos:column="16"/></operator> <name pos:line="96" pos:column="14">column_num<pos:position pos:line="96" pos:column="24"/></name></expr>)<pos:position pos:line="96" pos:column="25"/></condition><then pos:line="96" pos:column="25">
    <block pos:line="97" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="98" pos:column="7">ERROR<pos:position pos:line="98" pos:column="12"/></name> <argument_list pos:line="98" pos:column="13">(<argument><expr><literal type="string" pos:line="98" pos:column="14">"db query utils: udb_result_prepare_result: "<pos:position pos:line="98" pos:column="59"/></literal>
          <literal type="string" pos:line="99" pos:column="11">"Column `%s' could not be found."<pos:position pos:line="99" pos:column="44"/></literal></expr></argument>,
          <argument><expr><name><name pos:line="100" pos:column="11">r<pos:position pos:line="100" pos:column="12"/></name><operator pos:line="100" pos:column="12">-&gt;<pos:position pos:line="100" pos:column="17"/></operator><name pos:line="100" pos:column="14">instances<pos:position pos:line="100" pos:column="23"/></name><index pos:line="100" pos:column="23">[<expr><name pos:line="100" pos:column="24">i<pos:position pos:line="100" pos:column="25"/></name></expr>]<pos:position pos:line="100" pos:column="26"/></index></name></expr></argument>)<pos:position pos:line="100" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="100" pos:column="28"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="101" pos:column="7">BAIL_OUT<pos:position pos:line="101" pos:column="15"/></name> <argument_list pos:line="101" pos:column="16">(<argument><expr><operator pos:line="101" pos:column="17">-<pos:position pos:line="101" pos:column="18"/></operator><name pos:line="101" pos:column="18">ENOENT<pos:position pos:line="101" pos:column="24"/></name></expr></argument>)<pos:position pos:line="101" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="101" pos:column="26"/></expr_stmt>
    }<pos:position pos:line="102" pos:column="6"/></block></then></if>
  }<pos:position pos:line="103" pos:column="4"/></block></for> <comment type="block" pos:line="103" pos:column="5">/* }}} for (i = 0; i &lt; r-&gt;instances_num; i++) */</comment>

  <comment type="block" pos:line="105" pos:column="3">/* Determine the position of the value columns {{{ */</comment>
  <for pos:line="106" pos:column="3">for <control pos:line="106" pos:column="7">(<init><expr><name pos:line="106" pos:column="8">i<pos:position pos:line="106" pos:column="9"/></name> <operator pos:line="106" pos:column="10">=<pos:position pos:line="106" pos:column="11"/></operator> <literal type="number" pos:line="106" pos:column="12">0<pos:position pos:line="106" pos:column="13"/></literal></expr>;<pos:position pos:line="106" pos:column="14"/></init> <condition><expr><name pos:line="106" pos:column="15">i<pos:position pos:line="106" pos:column="16"/></name> <operator pos:line="106" pos:column="17">&lt;<pos:position pos:line="106" pos:column="21"/></operator> <name><name pos:line="106" pos:column="19">r<pos:position pos:line="106" pos:column="20"/></name><operator pos:line="106" pos:column="20">-&gt;<pos:position pos:line="106" pos:column="25"/></operator><name pos:line="106" pos:column="22">values_num<pos:position pos:line="106" pos:column="32"/></name></name></expr>;<pos:position pos:line="106" pos:column="33"/></condition> <incr><expr><name pos:line="106" pos:column="34">i<pos:position pos:line="106" pos:column="35"/></name><operator pos:line="106" pos:column="35">++<pos:position pos:line="106" pos:column="37"/></operator></expr></incr>)<pos:position pos:line="106" pos:column="38"/></control>
  <block pos:line="107" pos:column="3">{
    <decl_stmt><decl><type><name pos:line="108" pos:column="5">size_t<pos:position pos:line="108" pos:column="11"/></name></type> <name pos:line="108" pos:column="12">j<pos:position pos:line="108" pos:column="13"/></name></decl>;<pos:position pos:line="108" pos:column="14"/></decl_stmt>

    <for pos:line="110" pos:column="5">for <control pos:line="110" pos:column="9">(<init><expr><name pos:line="110" pos:column="10">j<pos:position pos:line="110" pos:column="11"/></name> <operator pos:line="110" pos:column="12">=<pos:position pos:line="110" pos:column="13"/></operator> <literal type="number" pos:line="110" pos:column="14">0<pos:position pos:line="110" pos:column="15"/></literal></expr>;<pos:position pos:line="110" pos:column="16"/></init> <condition><expr><name pos:line="110" pos:column="17">j<pos:position pos:line="110" pos:column="18"/></name> <operator pos:line="110" pos:column="19">&lt;<pos:position pos:line="110" pos:column="23"/></operator> <name pos:line="110" pos:column="21">column_num<pos:position pos:line="110" pos:column="31"/></name></expr>;<pos:position pos:line="110" pos:column="32"/></condition> <incr><expr><name pos:line="110" pos:column="33">j<pos:position pos:line="110" pos:column="34"/></name><operator pos:line="110" pos:column="34">++<pos:position pos:line="110" pos:column="36"/></operator></expr></incr>)<pos:position pos:line="110" pos:column="37"/></control>
    <block pos:line="111" pos:column="5">{
      <if pos:line="112" pos:column="7">if <condition pos:line="112" pos:column="10">(<expr><call><name pos:line="112" pos:column="11">strcasecmp<pos:position pos:line="112" pos:column="21"/></name> <argument_list pos:line="112" pos:column="22">(<argument><expr><name><name pos:line="112" pos:column="23">r<pos:position pos:line="112" pos:column="24"/></name><operator pos:line="112" pos:column="24">-&gt;<pos:position pos:line="112" pos:column="29"/></operator><name pos:line="112" pos:column="26">values<pos:position pos:line="112" pos:column="32"/></name><index pos:line="112" pos:column="32">[<expr><name pos:line="112" pos:column="33">i<pos:position pos:line="112" pos:column="34"/></name></expr>]<pos:position pos:line="112" pos:column="35"/></index></name></expr></argument>, <argument><expr><name><name pos:line="112" pos:column="37">column_names<pos:position pos:line="112" pos:column="49"/></name><index pos:line="112" pos:column="49">[<expr><name pos:line="112" pos:column="50">j<pos:position pos:line="112" pos:column="51"/></name></expr>]<pos:position pos:line="112" pos:column="52"/></index></name></expr></argument>)<pos:position pos:line="112" pos:column="53"/></argument_list></call> <operator pos:line="112" pos:column="54">==<pos:position pos:line="112" pos:column="56"/></operator> <literal type="number" pos:line="112" pos:column="57">0<pos:position pos:line="112" pos:column="58"/></literal></expr>)<pos:position pos:line="112" pos:column="59"/></condition><then pos:line="112" pos:column="59">
      <block pos:line="113" pos:column="7">{
        <expr_stmt><expr><name><name pos:line="114" pos:column="9">r<pos:position pos:line="114" pos:column="10"/></name><operator pos:line="114" pos:column="10">-&gt;<pos:position pos:line="114" pos:column="15"/></operator><name pos:line="114" pos:column="12">values_pos<pos:position pos:line="114" pos:column="22"/></name><index pos:line="114" pos:column="22">[<expr><name pos:line="114" pos:column="23">i<pos:position pos:line="114" pos:column="24"/></name></expr>]<pos:position pos:line="114" pos:column="25"/></index></name> <operator pos:line="114" pos:column="26">=<pos:position pos:line="114" pos:column="27"/></operator> <name pos:line="114" pos:column="28">j<pos:position pos:line="114" pos:column="29"/></name></expr>;<pos:position pos:line="114" pos:column="30"/></expr_stmt>
        <break pos:line="115" pos:column="9">break;<pos:position pos:line="115" pos:column="15"/></break>
      }<pos:position pos:line="116" pos:column="8"/></block></then></if>
    }<pos:position pos:line="117" pos:column="6"/></block></for>

    <if pos:line="119" pos:column="5">if <condition pos:line="119" pos:column="8">(<expr><name pos:line="119" pos:column="9">j<pos:position pos:line="119" pos:column="10"/></name> <operator pos:line="119" pos:column="11">&gt;=<pos:position pos:line="119" pos:column="16"/></operator> <name pos:line="119" pos:column="14">column_num<pos:position pos:line="119" pos:column="24"/></name></expr>)<pos:position pos:line="119" pos:column="25"/></condition><then pos:line="119" pos:column="25">
    <block pos:line="120" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="121" pos:column="7">ERROR<pos:position pos:line="121" pos:column="12"/></name> <argument_list pos:line="121" pos:column="13">(<argument><expr><literal type="string" pos:line="121" pos:column="14">"db query utils: udb_result_prepare_result: "<pos:position pos:line="121" pos:column="59"/></literal>
          <literal type="string" pos:line="122" pos:column="11">"Column `%s' could not be found."<pos:position pos:line="122" pos:column="44"/></literal></expr></argument>,
          <argument><expr><name><name pos:line="123" pos:column="11">r<pos:position pos:line="123" pos:column="12"/></name><operator pos:line="123" pos:column="12">-&gt;<pos:position pos:line="123" pos:column="17"/></operator><name pos:line="123" pos:column="14">values<pos:position pos:line="123" pos:column="20"/></name><index pos:line="123" pos:column="20">[<expr><name pos:line="123" pos:column="21">i<pos:position pos:line="123" pos:column="22"/></name></expr>]<pos:position pos:line="123" pos:column="23"/></index></name></expr></argument>)<pos:position pos:line="123" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="123" pos:column="25"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="124" pos:column="7">BAIL_OUT<pos:position pos:line="124" pos:column="15"/></name> <argument_list pos:line="124" pos:column="16">(<argument><expr><operator pos:line="124" pos:column="17">-<pos:position pos:line="124" pos:column="18"/></operator><name pos:line="124" pos:column="18">ENOENT<pos:position pos:line="124" pos:column="24"/></name></expr></argument>)<pos:position pos:line="124" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="124" pos:column="26"/></expr_stmt>
    }<pos:position pos:line="125" pos:column="6"/></block></then></if>
  }<pos:position pos:line="126" pos:column="4"/></block></for> <comment type="block" pos:line="126" pos:column="5">/* }}} for (i = 0; i &lt; r-&gt;values_num; i++) */</comment>

<cpp:undef pos:line="128" pos:column="1">#<cpp:directive pos:line="128" pos:column="2">undef<pos:position pos:line="128" pos:column="7"/></cpp:directive> <name pos:line="128" pos:column="8">BAIL_OUT<pos:position pos:line="128" pos:column="16"/></name></cpp:undef>
  <return pos:line="129" pos:column="3">return <expr><operator pos:line="129" pos:column="10">(<pos:position pos:line="129" pos:column="11"/></operator><literal type="number" pos:line="129" pos:column="11">0<pos:position pos:line="129" pos:column="12"/></literal><operator pos:line="129" pos:column="12">)<pos:position pos:line="129" pos:column="13"/></operator></expr>;<pos:position pos:line="129" pos:column="14"/></return>
}<pos:position pos:line="130" pos:column="2"/></block></function></unit>
