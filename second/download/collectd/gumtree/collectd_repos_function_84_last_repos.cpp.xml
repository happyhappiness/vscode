<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_84_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">lv_domain_block_info<pos:position pos:line="1" pos:column="32"/></name><parameter_list pos:line="1" pos:column="32">(<parameter><decl><type><name pos:line="1" pos:column="33">virDomainPtr<pos:position pos:line="1" pos:column="45"/></name></type> <name pos:line="1" pos:column="46">dom<pos:position pos:line="1" pos:column="49"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="51">const<pos:position pos:line="1" pos:column="56"/></specifier> <name pos:line="1" pos:column="57">char<pos:position pos:line="1" pos:column="61"/></name> <modifier pos:line="1" pos:column="62">*<pos:position pos:line="1" pos:column="63"/></modifier></type><name pos:line="1" pos:column="63">path<pos:position pos:line="1" pos:column="67"/></name></decl></parameter>,
                                <parameter><decl><type><name><name pos:line="2" pos:column="33">struct<pos:position pos:line="2" pos:column="39"/></name> <name pos:line="2" pos:column="40">lv_block_info<pos:position pos:line="2" pos:column="53"/></name></name> <modifier pos:line="2" pos:column="54">*<pos:position pos:line="2" pos:column="55"/></modifier></type><name pos:line="2" pos:column="55">binfo<pos:position pos:line="2" pos:column="60"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="61"/></parameter_list> <block pos:line="2" pos:column="62">{
<cpp:ifdef pos:line="3" pos:column="1">#<cpp:directive pos:line="3" pos:column="2">ifdef<pos:position pos:line="3" pos:column="7"/></cpp:directive> <name pos:line="3" pos:column="8">HAVE_BLOCK_STATS_FLAGS<pos:position pos:line="3" pos:column="30"/></name></cpp:ifdef>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">int<pos:position pos:line="4" pos:column="6"/></name></type> <name pos:line="4" pos:column="7">nparams<pos:position pos:line="4" pos:column="14"/></name> <init pos:line="4" pos:column="15">= <expr><literal type="number" pos:line="4" pos:column="17">0<pos:position pos:line="4" pos:column="18"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="19"/></decl_stmt>
  <if pos:line="5" pos:column="3">if <condition pos:line="5" pos:column="6">(<expr><call><name pos:line="5" pos:column="7">virDomainBlockStatsFlags<pos:position pos:line="5" pos:column="31"/></name><argument_list pos:line="5" pos:column="31">(<argument><expr><name pos:line="5" pos:column="32">dom<pos:position pos:line="5" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="5" pos:column="37">path<pos:position pos:line="5" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="5" pos:column="43">NULL<pos:position pos:line="5" pos:column="47"/></name></expr></argument>, <argument><expr><operator pos:line="5" pos:column="49">&amp;<pos:position pos:line="5" pos:column="54"/></operator><name pos:line="5" pos:column="50">nparams<pos:position pos:line="5" pos:column="57"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="5" pos:column="59">0<pos:position pos:line="5" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="5" pos:column="61"/></argument_list></call> <operator pos:line="5" pos:column="62">&lt;<pos:position pos:line="5" pos:column="66"/></operator> <literal type="number" pos:line="5" pos:column="64">0<pos:position pos:line="5" pos:column="65"/></literal> <operator pos:line="5" pos:column="66">||<pos:position pos:line="5" pos:column="68"/></operator>
      <name pos:line="6" pos:column="7">nparams<pos:position pos:line="6" pos:column="14"/></name> <operator pos:line="6" pos:column="15">&lt;=<pos:position pos:line="6" pos:column="20"/></operator> <literal type="number" pos:line="6" pos:column="18">0<pos:position pos:line="6" pos:column="19"/></literal></expr>)<pos:position pos:line="6" pos:column="20"/></condition><then pos:line="6" pos:column="20"> <block pos:line="6" pos:column="21">{
    <expr_stmt><expr><call><name pos:line="7" pos:column="5">VIRT_ERROR<pos:position pos:line="7" pos:column="15"/></name><argument_list pos:line="7" pos:column="15">(<argument><expr><name pos:line="7" pos:column="16">conn<pos:position pos:line="7" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="7" pos:column="22">"getting the disk params count"<pos:position pos:line="7" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="55"/></expr_stmt>
    <return pos:line="8" pos:column="5">return <expr><operator pos:line="8" pos:column="12">-<pos:position pos:line="8" pos:column="13"/></operator><literal type="number" pos:line="8" pos:column="13">1<pos:position pos:line="8" pos:column="14"/></literal></expr>;<pos:position pos:line="8" pos:column="15"/></return>
  }<pos:position pos:line="9" pos:column="4"/></block></then></if>

  <decl_stmt><decl><type><name pos:line="11" pos:column="3">virTypedParameterPtr<pos:position pos:line="11" pos:column="23"/></name></type> <name pos:line="11" pos:column="24">params<pos:position pos:line="11" pos:column="30"/></name> <init pos:line="11" pos:column="31">= <expr><call><name pos:line="11" pos:column="33">calloc<pos:position pos:line="11" pos:column="39"/></name><argument_list pos:line="11" pos:column="39">(<argument><expr><operator pos:line="11" pos:column="40">(<pos:position pos:line="11" pos:column="41"/></operator><name pos:line="11" pos:column="41">size_t<pos:position pos:line="11" pos:column="47"/></name><operator pos:line="11" pos:column="47">)<pos:position pos:line="11" pos:column="48"/></operator><name pos:line="11" pos:column="48">nparams<pos:position pos:line="11" pos:column="55"/></name></expr></argument>, <argument><expr><sizeof pos:line="11" pos:column="57">sizeof<argument_list pos:line="11" pos:column="63">(<argument><expr><operator pos:line="11" pos:column="64">*<pos:position pos:line="11" pos:column="65"/></operator><name pos:line="11" pos:column="65">params<pos:position pos:line="11" pos:column="71"/></name></expr></argument>)<pos:position pos:line="11" pos:column="72"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="11" pos:column="73"/></argument_list></call></expr></init></decl>;<pos:position pos:line="11" pos:column="74"/></decl_stmt>
  <if pos:line="12" pos:column="3">if <condition pos:line="12" pos:column="6">(<expr><name pos:line="12" pos:column="7">params<pos:position pos:line="12" pos:column="13"/></name> <operator pos:line="12" pos:column="14">==<pos:position pos:line="12" pos:column="16"/></operator> <name pos:line="12" pos:column="17">NULL<pos:position pos:line="12" pos:column="21"/></name></expr>)<pos:position pos:line="12" pos:column="22"/></condition><then pos:line="12" pos:column="22"> <block pos:line="12" pos:column="23">{
    <expr_stmt><expr><call><name pos:line="13" pos:column="5">ERROR<pos:position pos:line="13" pos:column="10"/></name><argument_list pos:line="13" pos:column="10">(<argument><expr><literal type="string" pos:line="13" pos:column="11">"virt plugin: alloc(%i) for block=%s parameters failed."<pos:position pos:line="13" pos:column="67"/></literal></expr></argument>, <argument><expr><name pos:line="13" pos:column="69">nparams<pos:position pos:line="13" pos:column="76"/></name></expr></argument>,
          <argument><expr><name pos:line="14" pos:column="11">path<pos:position pos:line="14" pos:column="15"/></name></expr></argument>)<pos:position pos:line="14" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="17"/></expr_stmt>
    <return pos:line="15" pos:column="5">return <expr><operator pos:line="15" pos:column="12">-<pos:position pos:line="15" pos:column="13"/></operator><literal type="number" pos:line="15" pos:column="13">1<pos:position pos:line="15" pos:column="14"/></literal></expr>;<pos:position pos:line="15" pos:column="15"/></return>
  }<pos:position pos:line="16" pos:column="4"/></block></then></if>

  <decl_stmt><decl><type><name pos:line="18" pos:column="3">int<pos:position pos:line="18" pos:column="6"/></name></type> <name pos:line="18" pos:column="7">rc<pos:position pos:line="18" pos:column="9"/></name> <init pos:line="18" pos:column="10">= <expr><operator pos:line="18" pos:column="12">-<pos:position pos:line="18" pos:column="13"/></operator><literal type="number" pos:line="18" pos:column="13">1<pos:position pos:line="18" pos:column="14"/></literal></expr></init></decl>;<pos:position pos:line="18" pos:column="15"/></decl_stmt>
  <if pos:line="19" pos:column="3">if <condition pos:line="19" pos:column="6">(<expr><call><name pos:line="19" pos:column="7">virDomainBlockStatsFlags<pos:position pos:line="19" pos:column="31"/></name><argument_list pos:line="19" pos:column="31">(<argument><expr><name pos:line="19" pos:column="32">dom<pos:position pos:line="19" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="37">path<pos:position pos:line="19" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="43">params<pos:position pos:line="19" pos:column="49"/></name></expr></argument>, <argument><expr><operator pos:line="19" pos:column="51">&amp;<pos:position pos:line="19" pos:column="56"/></operator><name pos:line="19" pos:column="52">nparams<pos:position pos:line="19" pos:column="59"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="19" pos:column="61">0<pos:position pos:line="19" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="63"/></argument_list></call> <operator pos:line="19" pos:column="64">&lt;<pos:position pos:line="19" pos:column="68"/></operator> <literal type="number" pos:line="19" pos:column="66">0<pos:position pos:line="19" pos:column="67"/></literal></expr>)<pos:position pos:line="19" pos:column="68"/></condition><then pos:line="19" pos:column="68"> <block pos:line="19" pos:column="69">{
    <expr_stmt><expr><call><name pos:line="20" pos:column="5">VIRT_ERROR<pos:position pos:line="20" pos:column="15"/></name><argument_list pos:line="20" pos:column="15">(<argument><expr><name pos:line="20" pos:column="16">conn<pos:position pos:line="20" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="20" pos:column="22">"getting the disk params values"<pos:position pos:line="20" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="56"/></expr_stmt>
  }<pos:position pos:line="21" pos:column="4"/></block></then> <else pos:line="21" pos:column="5">else <block pos:line="21" pos:column="10">{
    <expr_stmt><expr><name pos:line="22" pos:column="5">rc<pos:position pos:line="22" pos:column="7"/></name> <operator pos:line="22" pos:column="8">=<pos:position pos:line="22" pos:column="9"/></operator> <call><name pos:line="22" pos:column="10">get_block_info<pos:position pos:line="22" pos:column="24"/></name><argument_list pos:line="22" pos:column="24">(<argument><expr><name pos:line="22" pos:column="25">binfo<pos:position pos:line="22" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="32">params<pos:position pos:line="22" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="40">nparams<pos:position pos:line="22" pos:column="47"/></name></expr></argument>)<pos:position pos:line="22" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="49"/></expr_stmt>
  }<pos:position pos:line="23" pos:column="4"/></block></else></if>

  <expr_stmt><expr><call><name pos:line="25" pos:column="3">virTypedParamsClear<pos:position pos:line="25" pos:column="22"/></name><argument_list pos:line="25" pos:column="22">(<argument><expr><name pos:line="25" pos:column="23">params<pos:position pos:line="25" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="31">nparams<pos:position pos:line="25" pos:column="38"/></name></expr></argument>)<pos:position pos:line="25" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="40"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="26" pos:column="3">sfree<pos:position pos:line="26" pos:column="8"/></name><argument_list pos:line="26" pos:column="8">(<argument><expr><name pos:line="26" pos:column="9">params<pos:position pos:line="26" pos:column="15"/></name></expr></argument>)<pos:position pos:line="26" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="17"/></expr_stmt>
  <return pos:line="27" pos:column="3">return <expr><name pos:line="27" pos:column="10">rc<pos:position pos:line="27" pos:column="12"/></name></expr>;<pos:position pos:line="27" pos:column="13"/></return>
<cpp:else pos:line="28" pos:column="1">#<cpp:directive pos:line="28" pos:column="2">else<pos:position pos:line="28" pos:column="6"/></cpp:directive></cpp:else>
  <return pos:line="29" pos:column="3">return <expr><call><name pos:line="29" pos:column="10">virDomainBlockStats<pos:position pos:line="29" pos:column="29"/></name><argument_list pos:line="29" pos:column="29">(<argument><expr><name pos:line="29" pos:column="30">dom<pos:position pos:line="29" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="35">path<pos:position pos:line="29" pos:column="39"/></name></expr></argument>, <argument><expr><operator pos:line="29" pos:column="41">&amp;<pos:position pos:line="29" pos:column="46"/></operator><operator pos:line="29" pos:column="42">(<pos:position pos:line="29" pos:column="43"/></operator><name><name pos:line="29" pos:column="43">binfo<pos:position pos:line="29" pos:column="48"/></name><operator pos:line="29" pos:column="48">-&gt;<pos:position pos:line="29" pos:column="53"/></operator><name pos:line="29" pos:column="50">bi<pos:position pos:line="29" pos:column="52"/></name></name><operator pos:line="29" pos:column="52">)<pos:position pos:line="29" pos:column="53"/></operator></expr></argument>, <argument><expr><sizeof pos:line="29" pos:column="55">sizeof<argument_list pos:line="29" pos:column="61">(<argument><expr><name><name pos:line="29" pos:column="62">binfo<pos:position pos:line="29" pos:column="67"/></name><operator pos:line="29" pos:column="67">-&gt;<pos:position pos:line="29" pos:column="72"/></operator><name pos:line="29" pos:column="69">bi<pos:position pos:line="29" pos:column="71"/></name></name></expr></argument>)<pos:position pos:line="29" pos:column="72"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="29" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="74"/></return>
<cpp:endif pos:line="30" pos:column="1">#<cpp:directive pos:line="30" pos:column="2">endif<pos:position pos:line="30" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="30" pos:column="8">/* HAVE_BLOCK_STATS_FLAGS */</comment>
}<pos:position pos:line="31" pos:column="2"/></block></function></unit>
