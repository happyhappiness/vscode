<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_2577_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">lcc_getval<pos:position pos:line="1" pos:column="15"/></name><parameter_list pos:line="1" pos:column="15">(<parameter><decl><type><name pos:line="1" pos:column="16">lcc_connection_t<pos:position pos:line="1" pos:column="32"/></name> <modifier pos:line="1" pos:column="33">*<pos:position pos:line="1" pos:column="34"/></modifier></type><name pos:line="1" pos:column="34">c<pos:position pos:line="1" pos:column="35"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="37">lcc_identifier_t<pos:position pos:line="1" pos:column="53"/></name> <modifier pos:line="1" pos:column="54">*<pos:position pos:line="1" pos:column="55"/></modifier></type><name pos:line="1" pos:column="55">ident<pos:position pos:line="1" pos:column="60"/></name></decl></parameter>, <comment type="block" pos:line="1" pos:column="62">/* {{{ */</comment>
               <parameter><decl><type><name pos:line="2" pos:column="16">size_t<pos:position pos:line="2" pos:column="22"/></name> <modifier pos:line="2" pos:column="23">*<pos:position pos:line="2" pos:column="24"/></modifier></type><name pos:line="2" pos:column="24">ret_values_num<pos:position pos:line="2" pos:column="38"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="40">gauge_t<pos:position pos:line="2" pos:column="47"/></name> <modifier pos:line="2" pos:column="48">*<pos:position pos:line="2" pos:column="49"/></modifier><modifier pos:line="2" pos:column="49">*<pos:position pos:line="2" pos:column="50"/></modifier></type><name pos:line="2" pos:column="50">ret_values<pos:position pos:line="2" pos:column="60"/></name></decl></parameter>,
               <parameter><decl><type><name pos:line="3" pos:column="16">char<pos:position pos:line="3" pos:column="20"/></name> <modifier pos:line="3" pos:column="21">*<pos:position pos:line="3" pos:column="22"/></modifier><modifier pos:line="3" pos:column="22">*<pos:position pos:line="3" pos:column="23"/></modifier><modifier pos:line="3" pos:column="23">*<pos:position pos:line="3" pos:column="24"/></modifier></type><name pos:line="3" pos:column="24">ret_values_names<pos:position pos:line="3" pos:column="40"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="41"/></parameter_list> <block pos:line="3" pos:column="42">{
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">char<pos:position pos:line="4" pos:column="7"/></name></type> <name><name pos:line="4" pos:column="8">ident_str<pos:position pos:line="4" pos:column="17"/></name><index pos:line="4" pos:column="17">[<expr><literal type="number" pos:line="4" pos:column="18">6<pos:position pos:line="4" pos:column="19"/></literal> <operator pos:line="4" pos:column="20">*<pos:position pos:line="4" pos:column="21"/></operator> <name pos:line="4" pos:column="22">LCC_NAME_LEN<pos:position pos:line="4" pos:column="34"/></name></expr>]<pos:position pos:line="4" pos:column="35"/></index></name></decl>;<pos:position pos:line="4" pos:column="36"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">char<pos:position pos:line="5" pos:column="7"/></name></type> <name><name pos:line="5" pos:column="8">ident_esc<pos:position pos:line="5" pos:column="17"/></name><index pos:line="5" pos:column="17">[<expr><literal type="number" pos:line="5" pos:column="18">12<pos:position pos:line="5" pos:column="20"/></literal> <operator pos:line="5" pos:column="21">*<pos:position pos:line="5" pos:column="22"/></operator> <name pos:line="5" pos:column="23">LCC_NAME_LEN<pos:position pos:line="5" pos:column="35"/></name></expr>]<pos:position pos:line="5" pos:column="36"/></index></name></decl>;<pos:position pos:line="5" pos:column="37"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">char<pos:position pos:line="6" pos:column="7"/></name></type> <name><name pos:line="6" pos:column="8">command<pos:position pos:line="6" pos:column="15"/></name><index pos:line="6" pos:column="15">[<expr><literal type="number" pos:line="6" pos:column="16">14<pos:position pos:line="6" pos:column="18"/></literal> <operator pos:line="6" pos:column="19">*<pos:position pos:line="6" pos:column="20"/></operator> <name pos:line="6" pos:column="21">LCC_NAME_LEN<pos:position pos:line="6" pos:column="33"/></name></expr>]<pos:position pos:line="6" pos:column="34"/></index></name></decl>;<pos:position pos:line="6" pos:column="35"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="8" pos:column="3">lcc_response_t<pos:position pos:line="8" pos:column="17"/></name></type> <name pos:line="8" pos:column="18">res<pos:position pos:line="8" pos:column="21"/></name></decl>;<pos:position pos:line="8" pos:column="22"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">size_t<pos:position pos:line="9" pos:column="9"/></name></type> <name pos:line="9" pos:column="10">values_num<pos:position pos:line="9" pos:column="20"/></name></decl>;<pos:position pos:line="9" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">gauge_t<pos:position pos:line="10" pos:column="10"/></name> <modifier pos:line="10" pos:column="11">*<pos:position pos:line="10" pos:column="12"/></modifier></type><name pos:line="10" pos:column="12">values<pos:position pos:line="10" pos:column="18"/></name> <init pos:line="10" pos:column="19">= <expr><name pos:line="10" pos:column="21">NULL<pos:position pos:line="10" pos:column="25"/></name></expr></init></decl>;<pos:position pos:line="10" pos:column="26"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="11" pos:column="3">char<pos:position pos:line="11" pos:column="7"/></name> <modifier pos:line="11" pos:column="8">*<pos:position pos:line="11" pos:column="9"/></modifier><modifier pos:line="11" pos:column="9">*<pos:position pos:line="11" pos:column="10"/></modifier></type><name pos:line="11" pos:column="10">values_names<pos:position pos:line="11" pos:column="22"/></name> <init pos:line="11" pos:column="23">= <expr><name pos:line="11" pos:column="25">NULL<pos:position pos:line="11" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="11" pos:column="30"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="13" pos:column="3">size_t<pos:position pos:line="13" pos:column="9"/></name></type> <name pos:line="13" pos:column="10">i<pos:position pos:line="13" pos:column="11"/></name></decl>;<pos:position pos:line="13" pos:column="12"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="14" pos:column="3">int<pos:position pos:line="14" pos:column="6"/></name></type> <name pos:line="14" pos:column="7">status<pos:position pos:line="14" pos:column="13"/></name></decl>;<pos:position pos:line="14" pos:column="14"/></decl_stmt>

  <if pos:line="16" pos:column="3">if <condition pos:line="16" pos:column="6">(<expr><name pos:line="16" pos:column="7">c<pos:position pos:line="16" pos:column="8"/></name> <operator pos:line="16" pos:column="9">==<pos:position pos:line="16" pos:column="11"/></operator> <name pos:line="16" pos:column="12">NULL<pos:position pos:line="16" pos:column="16"/></name></expr>)<pos:position pos:line="16" pos:column="17"/></condition><then pos:line="16" pos:column="17">
    <block type="pseudo"><return pos:line="17" pos:column="5">return <expr><operator pos:line="17" pos:column="12">-<pos:position pos:line="17" pos:column="13"/></operator><literal type="number" pos:line="17" pos:column="13">1<pos:position pos:line="17" pos:column="14"/></literal></expr>;<pos:position pos:line="17" pos:column="15"/></return></block></then></if>

  <if pos:line="19" pos:column="3">if <condition pos:line="19" pos:column="6">(<expr><name pos:line="19" pos:column="7">ident<pos:position pos:line="19" pos:column="12"/></name> <operator pos:line="19" pos:column="13">==<pos:position pos:line="19" pos:column="15"/></operator> <name pos:line="19" pos:column="16">NULL<pos:position pos:line="19" pos:column="20"/></name></expr>)<pos:position pos:line="19" pos:column="21"/></condition><then pos:line="19" pos:column="21"> <block pos:line="19" pos:column="22">{
    <expr_stmt><expr><call><name pos:line="20" pos:column="5">lcc_set_errno<pos:position pos:line="20" pos:column="18"/></name><argument_list pos:line="20" pos:column="18">(<argument><expr><name pos:line="20" pos:column="19">c<pos:position pos:line="20" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="22">EINVAL<pos:position pos:line="20" pos:column="28"/></name></expr></argument>)<pos:position pos:line="20" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="30"/></expr_stmt>
    <return pos:line="21" pos:column="5">return <expr><operator pos:line="21" pos:column="12">-<pos:position pos:line="21" pos:column="13"/></operator><literal type="number" pos:line="21" pos:column="13">1<pos:position pos:line="21" pos:column="14"/></literal></expr>;<pos:position pos:line="21" pos:column="15"/></return>
  }<pos:position pos:line="22" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="24" pos:column="3">/* Build a commend with an escaped version of the identifier string. */</comment>
  <expr_stmt><expr><name pos:line="25" pos:column="3">status<pos:position pos:line="25" pos:column="9"/></name> <operator pos:line="25" pos:column="10">=<pos:position pos:line="25" pos:column="11"/></operator> <call><name pos:line="25" pos:column="12">lcc_identifier_to_string<pos:position pos:line="25" pos:column="36"/></name><argument_list pos:line="25" pos:column="36">(<argument><expr><name pos:line="25" pos:column="37">c<pos:position pos:line="25" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="40">ident_str<pos:position pos:line="25" pos:column="49"/></name></expr></argument>, <argument><expr><sizeof pos:line="25" pos:column="51">sizeof<argument_list pos:line="25" pos:column="57">(<argument><expr><name pos:line="25" pos:column="58">ident_str<pos:position pos:line="25" pos:column="67"/></name></expr></argument>)<pos:position pos:line="25" pos:column="68"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="25" pos:column="70">ident<pos:position pos:line="25" pos:column="75"/></name></expr></argument>)<pos:position pos:line="25" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="77"/></expr_stmt>
  <if pos:line="26" pos:column="3">if <condition pos:line="26" pos:column="6">(<expr><name pos:line="26" pos:column="7">status<pos:position pos:line="26" pos:column="13"/></name> <operator pos:line="26" pos:column="14">!=<pos:position pos:line="26" pos:column="16"/></operator> <literal type="number" pos:line="26" pos:column="17">0<pos:position pos:line="26" pos:column="18"/></literal></expr>)<pos:position pos:line="26" pos:column="19"/></condition><then pos:line="26" pos:column="19">
    <block type="pseudo"><return pos:line="27" pos:column="5">return <expr><name pos:line="27" pos:column="12">status<pos:position pos:line="27" pos:column="18"/></name></expr>;<pos:position pos:line="27" pos:column="19"/></return></block></then></if>

  <expr_stmt><expr><call><name pos:line="29" pos:column="3">snprintf<pos:position pos:line="29" pos:column="11"/></name><argument_list pos:line="29" pos:column="11">(<argument><expr><name pos:line="29" pos:column="12">command<pos:position pos:line="29" pos:column="19"/></name></expr></argument>, <argument><expr><sizeof pos:line="29" pos:column="21">sizeof<argument_list pos:line="29" pos:column="27">(<argument><expr><name pos:line="29" pos:column="28">command<pos:position pos:line="29" pos:column="35"/></name></expr></argument>)<pos:position pos:line="29" pos:column="36"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="29" pos:column="38">"GETVAL %s"<pos:position pos:line="29" pos:column="49"/></literal></expr></argument>,
           <argument><expr><call><name pos:line="30" pos:column="12">lcc_strescape<pos:position pos:line="30" pos:column="25"/></name><argument_list pos:line="30" pos:column="25">(<argument><expr><name pos:line="30" pos:column="26">ident_esc<pos:position pos:line="30" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="37">ident_str<pos:position pos:line="30" pos:column="46"/></name></expr></argument>, <argument><expr><sizeof pos:line="30" pos:column="48">sizeof<argument_list pos:line="30" pos:column="54">(<argument><expr><name pos:line="30" pos:column="55">ident_esc<pos:position pos:line="30" pos:column="64"/></name></expr></argument>)<pos:position pos:line="30" pos:column="65"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="30" pos:column="66"/></argument_list></call></expr></argument>)<pos:position pos:line="30" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="68"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="31" pos:column="3">command<pos:position pos:line="31" pos:column="10"/></name><index pos:line="31" pos:column="10">[<expr><sizeof pos:line="31" pos:column="11">sizeof<argument_list pos:line="31" pos:column="17">(<argument><expr><name pos:line="31" pos:column="18">command<pos:position pos:line="31" pos:column="25"/></name></expr></argument>)<pos:position pos:line="31" pos:column="26"/></argument_list></sizeof> <operator pos:line="31" pos:column="27">-<pos:position pos:line="31" pos:column="28"/></operator> <literal type="number" pos:line="31" pos:column="29">1<pos:position pos:line="31" pos:column="30"/></literal></expr>]<pos:position pos:line="31" pos:column="31"/></index></name> <operator pos:line="31" pos:column="32">=<pos:position pos:line="31" pos:column="33"/></operator> <literal type="number" pos:line="31" pos:column="34">0<pos:position pos:line="31" pos:column="35"/></literal></expr>;<pos:position pos:line="31" pos:column="36"/></expr_stmt>

  <comment type="block" pos:line="33" pos:column="3">/* Send talk to the daemon.. */</comment>
  <expr_stmt><expr><name pos:line="34" pos:column="3">status<pos:position pos:line="34" pos:column="9"/></name> <operator pos:line="34" pos:column="10">=<pos:position pos:line="34" pos:column="11"/></operator> <call><name pos:line="34" pos:column="12">lcc_sendreceive<pos:position pos:line="34" pos:column="27"/></name><argument_list pos:line="34" pos:column="27">(<argument><expr><name pos:line="34" pos:column="28">c<pos:position pos:line="34" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="31">command<pos:position pos:line="34" pos:column="38"/></name></expr></argument>, <argument><expr><operator pos:line="34" pos:column="40">&amp;<pos:position pos:line="34" pos:column="45"/></operator><name pos:line="34" pos:column="41">res<pos:position pos:line="34" pos:column="44"/></name></expr></argument>)<pos:position pos:line="34" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="46"/></expr_stmt>
  <if pos:line="35" pos:column="3">if <condition pos:line="35" pos:column="6">(<expr><name pos:line="35" pos:column="7">status<pos:position pos:line="35" pos:column="13"/></name> <operator pos:line="35" pos:column="14">!=<pos:position pos:line="35" pos:column="16"/></operator> <literal type="number" pos:line="35" pos:column="17">0<pos:position pos:line="35" pos:column="18"/></literal></expr>)<pos:position pos:line="35" pos:column="19"/></condition><then pos:line="35" pos:column="19">
    <block type="pseudo"><return pos:line="36" pos:column="5">return <expr><name pos:line="36" pos:column="12">status<pos:position pos:line="36" pos:column="18"/></name></expr>;<pos:position pos:line="36" pos:column="19"/></return></block></then></if>

  <if pos:line="38" pos:column="3">if <condition pos:line="38" pos:column="6">(<expr><name><name pos:line="38" pos:column="7">res<pos:position pos:line="38" pos:column="10"/></name><operator pos:line="38" pos:column="10">.<pos:position pos:line="38" pos:column="11"/></operator><name pos:line="38" pos:column="11">status<pos:position pos:line="38" pos:column="17"/></name></name> <operator pos:line="38" pos:column="18">!=<pos:position pos:line="38" pos:column="20"/></operator> <literal type="number" pos:line="38" pos:column="21">0<pos:position pos:line="38" pos:column="22"/></literal></expr>)<pos:position pos:line="38" pos:column="23"/></condition><then pos:line="38" pos:column="23"> <block pos:line="38" pos:column="24">{
    <expr_stmt><expr><call><name pos:line="39" pos:column="5">LCC_SET_ERRSTR<pos:position pos:line="39" pos:column="19"/></name><argument_list pos:line="39" pos:column="19">(<argument><expr><name pos:line="39" pos:column="20">c<pos:position pos:line="39" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="39" pos:column="23">"Server error: %s"<pos:position pos:line="39" pos:column="41"/></literal></expr></argument>, <argument><expr><name><name pos:line="39" pos:column="43">res<pos:position pos:line="39" pos:column="46"/></name><operator pos:line="39" pos:column="46">.<pos:position pos:line="39" pos:column="47"/></operator><name pos:line="39" pos:column="47">message<pos:position pos:line="39" pos:column="54"/></name></name></expr></argument>)<pos:position pos:line="39" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="56"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="40" pos:column="5">lcc_response_free<pos:position pos:line="40" pos:column="22"/></name><argument_list pos:line="40" pos:column="22">(<argument><expr><operator pos:line="40" pos:column="23">&amp;<pos:position pos:line="40" pos:column="28"/></operator><name pos:line="40" pos:column="24">res<pos:position pos:line="40" pos:column="27"/></name></expr></argument>)<pos:position pos:line="40" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="29"/></expr_stmt>
    <return pos:line="41" pos:column="5">return <expr><operator pos:line="41" pos:column="12">-<pos:position pos:line="41" pos:column="13"/></operator><literal type="number" pos:line="41" pos:column="13">1<pos:position pos:line="41" pos:column="14"/></literal></expr>;<pos:position pos:line="41" pos:column="15"/></return>
  }<pos:position pos:line="42" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="44" pos:column="3">values_num<pos:position pos:line="44" pos:column="13"/></name> <operator pos:line="44" pos:column="14">=<pos:position pos:line="44" pos:column="15"/></operator> <name><name pos:line="44" pos:column="16">res<pos:position pos:line="44" pos:column="19"/></name><operator pos:line="44" pos:column="19">.<pos:position pos:line="44" pos:column="20"/></operator><name pos:line="44" pos:column="20">lines_num<pos:position pos:line="44" pos:column="29"/></name></name></expr>;<pos:position pos:line="44" pos:column="30"/></expr_stmt>

<cpp:define pos:line="46" pos:column="1">#<cpp:directive pos:line="46" pos:column="2">define<pos:position pos:line="46" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="46" pos:column="9">BAIL_OUT<pos:position pos:line="46" pos:column="17"/></name><parameter_list pos:line="46" pos:column="17">(<parameter><type><name pos:line="46" pos:column="18">e<pos:position pos:line="46" pos:column="19"/></name></type></parameter>)<pos:position pos:line="46" pos:column="20"/></parameter_list></cpp:macro>                                                            \
  <cpp:value pos:line="47" pos:column="3">do {                                                                         \
    lcc_set_errno(c, (e));                                                     \
    free(values);                                                              \
    if (values_names != NULL) {                                                \
      for (i = 0; i &lt; values_num; i++) {                                       \
        free(values_names[i]);                                                 \
      }                                                                        \
    }                                                                          \
    free(values_names);                                                        \
    lcc_response_free(&amp;res);                                                   \
    return -1;                                                                 \
  } while (0)<pos:position pos:line="58" pos:column="14"/></cpp:value></cpp:define>

  <comment type="block" pos:line="60" pos:column="3">/* If neither the values nor the names are requested, return here.. */</comment>
  <if pos:line="61" pos:column="3">if <condition pos:line="61" pos:column="6">(<expr><operator pos:line="61" pos:column="7">(<pos:position pos:line="61" pos:column="8"/></operator><name pos:line="61" pos:column="8">ret_values<pos:position pos:line="61" pos:column="18"/></name> <operator pos:line="61" pos:column="19">==<pos:position pos:line="61" pos:column="21"/></operator> <name pos:line="61" pos:column="22">NULL<pos:position pos:line="61" pos:column="26"/></name><operator pos:line="61" pos:column="26">)<pos:position pos:line="61" pos:column="27"/></operator> <operator pos:line="61" pos:column="28">&amp;&amp;<pos:position pos:line="61" pos:column="38"/></operator> <operator pos:line="61" pos:column="31">(<pos:position pos:line="61" pos:column="32"/></operator><name pos:line="61" pos:column="32">ret_values_names<pos:position pos:line="61" pos:column="48"/></name> <operator pos:line="61" pos:column="49">==<pos:position pos:line="61" pos:column="51"/></operator> <name pos:line="61" pos:column="52">NULL<pos:position pos:line="61" pos:column="56"/></name><operator pos:line="61" pos:column="56">)<pos:position pos:line="61" pos:column="57"/></operator></expr>)<pos:position pos:line="61" pos:column="58"/></condition><then pos:line="61" pos:column="58"> <block pos:line="61" pos:column="59">{
    <if pos:line="62" pos:column="5">if <condition pos:line="62" pos:column="8">(<expr><name pos:line="62" pos:column="9">ret_values_num<pos:position pos:line="62" pos:column="23"/></name> <operator pos:line="62" pos:column="24">!=<pos:position pos:line="62" pos:column="26"/></operator> <name pos:line="62" pos:column="27">NULL<pos:position pos:line="62" pos:column="31"/></name></expr>)<pos:position pos:line="62" pos:column="32"/></condition><then pos:line="62" pos:column="32">
      <block type="pseudo"><expr_stmt><expr><operator pos:line="63" pos:column="7">*<pos:position pos:line="63" pos:column="8"/></operator><name pos:line="63" pos:column="8">ret_values_num<pos:position pos:line="63" pos:column="22"/></name> <operator pos:line="63" pos:column="23">=<pos:position pos:line="63" pos:column="24"/></operator> <name pos:line="63" pos:column="25">values_num<pos:position pos:line="63" pos:column="35"/></name></expr>;<pos:position pos:line="63" pos:column="36"/></expr_stmt></block></then></if>
    <expr_stmt><expr><call><name pos:line="64" pos:column="5">lcc_response_free<pos:position pos:line="64" pos:column="22"/></name><argument_list pos:line="64" pos:column="22">(<argument><expr><operator pos:line="64" pos:column="23">&amp;<pos:position pos:line="64" pos:column="28"/></operator><name pos:line="64" pos:column="24">res<pos:position pos:line="64" pos:column="27"/></name></expr></argument>)<pos:position pos:line="64" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="29"/></expr_stmt>
    <return pos:line="65" pos:column="5">return <expr><literal type="number" pos:line="65" pos:column="12">0<pos:position pos:line="65" pos:column="13"/></literal></expr>;<pos:position pos:line="65" pos:column="14"/></return>
  }<pos:position pos:line="66" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="68" pos:column="3">/* Allocate space for the values */</comment>
  <if pos:line="69" pos:column="3">if <condition pos:line="69" pos:column="6">(<expr><name pos:line="69" pos:column="7">ret_values<pos:position pos:line="69" pos:column="17"/></name> <operator pos:line="69" pos:column="18">!=<pos:position pos:line="69" pos:column="20"/></operator> <name pos:line="69" pos:column="21">NULL<pos:position pos:line="69" pos:column="25"/></name></expr>)<pos:position pos:line="69" pos:column="26"/></condition><then pos:line="69" pos:column="26"> <block pos:line="69" pos:column="27">{
    <expr_stmt><expr><name pos:line="70" pos:column="5">values<pos:position pos:line="70" pos:column="11"/></name> <operator pos:line="70" pos:column="12">=<pos:position pos:line="70" pos:column="13"/></operator> <call><name pos:line="70" pos:column="14">malloc<pos:position pos:line="70" pos:column="20"/></name><argument_list pos:line="70" pos:column="20">(<argument><expr><name pos:line="70" pos:column="21">values_num<pos:position pos:line="70" pos:column="31"/></name> <operator pos:line="70" pos:column="32">*<pos:position pos:line="70" pos:column="33"/></operator> <sizeof pos:line="70" pos:column="34">sizeof<argument_list pos:line="70" pos:column="40">(<argument><expr><operator pos:line="70" pos:column="41">*<pos:position pos:line="70" pos:column="42"/></operator><name pos:line="70" pos:column="42">values<pos:position pos:line="70" pos:column="48"/></name></expr></argument>)<pos:position pos:line="70" pos:column="49"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="70" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="51"/></expr_stmt>
    <if pos:line="71" pos:column="5">if <condition pos:line="71" pos:column="8">(<expr><name pos:line="71" pos:column="9">values<pos:position pos:line="71" pos:column="15"/></name> <operator pos:line="71" pos:column="16">==<pos:position pos:line="71" pos:column="18"/></operator> <name pos:line="71" pos:column="19">NULL<pos:position pos:line="71" pos:column="23"/></name></expr>)<pos:position pos:line="71" pos:column="24"/></condition><then pos:line="71" pos:column="24">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="72" pos:column="7">BAIL_OUT<pos:position pos:line="72" pos:column="15"/></name><argument_list pos:line="72" pos:column="15">(<argument><expr><name pos:line="72" pos:column="16">ENOMEM<pos:position pos:line="72" pos:column="22"/></name></expr></argument>)<pos:position pos:line="72" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="24"/></expr_stmt></block></then></if>
  }<pos:position pos:line="73" pos:column="4"/></block></then></if>

  <if pos:line="75" pos:column="3">if <condition pos:line="75" pos:column="6">(<expr><name pos:line="75" pos:column="7">ret_values_names<pos:position pos:line="75" pos:column="23"/></name> <operator pos:line="75" pos:column="24">!=<pos:position pos:line="75" pos:column="26"/></operator> <name pos:line="75" pos:column="27">NULL<pos:position pos:line="75" pos:column="31"/></name></expr>)<pos:position pos:line="75" pos:column="32"/></condition><then pos:line="75" pos:column="32"> <block pos:line="75" pos:column="33">{
    <expr_stmt><expr><name pos:line="76" pos:column="5">values_names<pos:position pos:line="76" pos:column="17"/></name> <operator pos:line="76" pos:column="18">=<pos:position pos:line="76" pos:column="19"/></operator> <call><name pos:line="76" pos:column="20">calloc<pos:position pos:line="76" pos:column="26"/></name><argument_list pos:line="76" pos:column="26">(<argument><expr><name pos:line="76" pos:column="27">values_num<pos:position pos:line="76" pos:column="37"/></name></expr></argument>, <argument><expr><sizeof pos:line="76" pos:column="39">sizeof<argument_list pos:line="76" pos:column="45">(<argument><expr><operator pos:line="76" pos:column="46">*<pos:position pos:line="76" pos:column="47"/></operator><name pos:line="76" pos:column="47">values_names<pos:position pos:line="76" pos:column="59"/></name></expr></argument>)<pos:position pos:line="76" pos:column="60"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="76" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="62"/></expr_stmt>
    <if pos:line="77" pos:column="5">if <condition pos:line="77" pos:column="8">(<expr><name pos:line="77" pos:column="9">values_names<pos:position pos:line="77" pos:column="21"/></name> <operator pos:line="77" pos:column="22">==<pos:position pos:line="77" pos:column="24"/></operator> <name pos:line="77" pos:column="25">NULL<pos:position pos:line="77" pos:column="29"/></name></expr>)<pos:position pos:line="77" pos:column="30"/></condition><then pos:line="77" pos:column="30">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="78" pos:column="7">BAIL_OUT<pos:position pos:line="78" pos:column="15"/></name><argument_list pos:line="78" pos:column="15">(<argument><expr><name pos:line="78" pos:column="16">ENOMEM<pos:position pos:line="78" pos:column="22"/></name></expr></argument>)<pos:position pos:line="78" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="24"/></expr_stmt></block></then></if>
  }<pos:position pos:line="79" pos:column="4"/></block></then></if>

  <for pos:line="81" pos:column="3">for <control pos:line="81" pos:column="7">(<init><expr><name pos:line="81" pos:column="8">i<pos:position pos:line="81" pos:column="9"/></name> <operator pos:line="81" pos:column="10">=<pos:position pos:line="81" pos:column="11"/></operator> <literal type="number" pos:line="81" pos:column="12">0<pos:position pos:line="81" pos:column="13"/></literal></expr>;<pos:position pos:line="81" pos:column="14"/></init> <condition><expr><name pos:line="81" pos:column="15">i<pos:position pos:line="81" pos:column="16"/></name> <operator pos:line="81" pos:column="17">&lt;<pos:position pos:line="81" pos:column="21"/></operator> <name><name pos:line="81" pos:column="19">res<pos:position pos:line="81" pos:column="22"/></name><operator pos:line="81" pos:column="22">.<pos:position pos:line="81" pos:column="23"/></operator><name pos:line="81" pos:column="23">lines_num<pos:position pos:line="81" pos:column="32"/></name></name></expr>;<pos:position pos:line="81" pos:column="33"/></condition> <incr><expr><name pos:line="81" pos:column="34">i<pos:position pos:line="81" pos:column="35"/></name><operator pos:line="81" pos:column="35">++<pos:position pos:line="81" pos:column="37"/></operator></expr></incr>)<pos:position pos:line="81" pos:column="38"/></control> <block pos:line="81" pos:column="39">{
    <decl_stmt><decl><type><name pos:line="82" pos:column="5">char<pos:position pos:line="82" pos:column="9"/></name> <modifier pos:line="82" pos:column="10">*<pos:position pos:line="82" pos:column="11"/></modifier></type><name pos:line="82" pos:column="11">key<pos:position pos:line="82" pos:column="14"/></name></decl>;<pos:position pos:line="82" pos:column="15"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="83" pos:column="5">char<pos:position pos:line="83" pos:column="9"/></name> <modifier pos:line="83" pos:column="10">*<pos:position pos:line="83" pos:column="11"/></modifier></type><name pos:line="83" pos:column="11">value<pos:position pos:line="83" pos:column="16"/></name></decl>;<pos:position pos:line="83" pos:column="17"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="84" pos:column="5">char<pos:position pos:line="84" pos:column="9"/></name> <modifier pos:line="84" pos:column="10">*<pos:position pos:line="84" pos:column="11"/></modifier></type><name pos:line="84" pos:column="11">endptr<pos:position pos:line="84" pos:column="17"/></name></decl>;<pos:position pos:line="84" pos:column="18"/></decl_stmt>

    <expr_stmt><expr><name pos:line="86" pos:column="5">key<pos:position pos:line="86" pos:column="8"/></name> <operator pos:line="86" pos:column="9">=<pos:position pos:line="86" pos:column="10"/></operator> <name><name pos:line="86" pos:column="11">res<pos:position pos:line="86" pos:column="14"/></name><operator pos:line="86" pos:column="14">.<pos:position pos:line="86" pos:column="15"/></operator><name pos:line="86" pos:column="15">lines<pos:position pos:line="86" pos:column="20"/></name><index pos:line="86" pos:column="20">[<expr><name pos:line="86" pos:column="21">i<pos:position pos:line="86" pos:column="22"/></name></expr>]<pos:position pos:line="86" pos:column="23"/></index></name></expr>;<pos:position pos:line="86" pos:column="24"/></expr_stmt>
    <expr_stmt><expr><name pos:line="87" pos:column="5">value<pos:position pos:line="87" pos:column="10"/></name> <operator pos:line="87" pos:column="11">=<pos:position pos:line="87" pos:column="12"/></operator> <call><name pos:line="87" pos:column="13">strchr<pos:position pos:line="87" pos:column="19"/></name><argument_list pos:line="87" pos:column="19">(<argument><expr><name pos:line="87" pos:column="20">key<pos:position pos:line="87" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="87" pos:column="25">'='<pos:position pos:line="87" pos:column="28"/></literal></expr></argument>)<pos:position pos:line="87" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="30"/></expr_stmt>
    <if pos:line="88" pos:column="5">if <condition pos:line="88" pos:column="8">(<expr><name pos:line="88" pos:column="9">value<pos:position pos:line="88" pos:column="14"/></name> <operator pos:line="88" pos:column="15">==<pos:position pos:line="88" pos:column="17"/></operator> <name pos:line="88" pos:column="18">NULL<pos:position pos:line="88" pos:column="22"/></name></expr>)<pos:position pos:line="88" pos:column="23"/></condition><then pos:line="88" pos:column="23">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="89" pos:column="7">BAIL_OUT<pos:position pos:line="89" pos:column="15"/></name><argument_list pos:line="89" pos:column="15">(<argument><expr><name pos:line="89" pos:column="16">EILSEQ<pos:position pos:line="89" pos:column="22"/></name></expr></argument>)<pos:position pos:line="89" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="24"/></expr_stmt></block></then></if>

    <expr_stmt><expr><operator pos:line="91" pos:column="5">*<pos:position pos:line="91" pos:column="6"/></operator><name pos:line="91" pos:column="6">value<pos:position pos:line="91" pos:column="11"/></name> <operator pos:line="91" pos:column="12">=<pos:position pos:line="91" pos:column="13"/></operator> <literal type="number" pos:line="91" pos:column="14">0<pos:position pos:line="91" pos:column="15"/></literal></expr>;<pos:position pos:line="91" pos:column="16"/></expr_stmt>
    <expr_stmt><expr><name pos:line="92" pos:column="5">value<pos:position pos:line="92" pos:column="10"/></name><operator pos:line="92" pos:column="10">++<pos:position pos:line="92" pos:column="12"/></operator></expr>;<pos:position pos:line="92" pos:column="13"/></expr_stmt>

    <if pos:line="94" pos:column="5">if <condition pos:line="94" pos:column="8">(<expr><name pos:line="94" pos:column="9">values<pos:position pos:line="94" pos:column="15"/></name> <operator pos:line="94" pos:column="16">!=<pos:position pos:line="94" pos:column="18"/></operator> <name pos:line="94" pos:column="19">NULL<pos:position pos:line="94" pos:column="23"/></name></expr>)<pos:position pos:line="94" pos:column="24"/></condition><then pos:line="94" pos:column="24"> <block pos:line="94" pos:column="25">{
      <expr_stmt><expr><name pos:line="95" pos:column="7">endptr<pos:position pos:line="95" pos:column="13"/></name> <operator pos:line="95" pos:column="14">=<pos:position pos:line="95" pos:column="15"/></operator> <name pos:line="95" pos:column="16">NULL<pos:position pos:line="95" pos:column="20"/></name></expr>;<pos:position pos:line="95" pos:column="21"/></expr_stmt>
      <expr_stmt><expr><name pos:line="96" pos:column="7">errno<pos:position pos:line="96" pos:column="12"/></name> <operator pos:line="96" pos:column="13">=<pos:position pos:line="96" pos:column="14"/></operator> <literal type="number" pos:line="96" pos:column="15">0<pos:position pos:line="96" pos:column="16"/></literal></expr>;<pos:position pos:line="96" pos:column="17"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="97" pos:column="7">values<pos:position pos:line="97" pos:column="13"/></name><index pos:line="97" pos:column="13">[<expr><name pos:line="97" pos:column="14">i<pos:position pos:line="97" pos:column="15"/></name></expr>]<pos:position pos:line="97" pos:column="16"/></index></name> <operator pos:line="97" pos:column="17">=<pos:position pos:line="97" pos:column="18"/></operator> <call><name pos:line="97" pos:column="19">strtod<pos:position pos:line="97" pos:column="25"/></name><argument_list pos:line="97" pos:column="25">(<argument><expr><name pos:line="97" pos:column="26">value<pos:position pos:line="97" pos:column="31"/></name></expr></argument>, <argument><expr><operator pos:line="97" pos:column="33">&amp;<pos:position pos:line="97" pos:column="38"/></operator><name pos:line="97" pos:column="34">endptr<pos:position pos:line="97" pos:column="40"/></name></expr></argument>)<pos:position pos:line="97" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="42"/></expr_stmt>

      <if pos:line="99" pos:column="7">if <condition pos:line="99" pos:column="10">(<expr><operator pos:line="99" pos:column="11">(<pos:position pos:line="99" pos:column="12"/></operator><name pos:line="99" pos:column="12">endptr<pos:position pos:line="99" pos:column="18"/></name> <operator pos:line="99" pos:column="19">==<pos:position pos:line="99" pos:column="21"/></operator> <name pos:line="99" pos:column="22">value<pos:position pos:line="99" pos:column="27"/></name><operator pos:line="99" pos:column="27">)<pos:position pos:line="99" pos:column="28"/></operator> <operator pos:line="99" pos:column="29">||<pos:position pos:line="99" pos:column="31"/></operator> <operator pos:line="99" pos:column="32">(<pos:position pos:line="99" pos:column="33"/></operator><name pos:line="99" pos:column="33">errno<pos:position pos:line="99" pos:column="38"/></name> <operator pos:line="99" pos:column="39">!=<pos:position pos:line="99" pos:column="41"/></operator> <literal type="number" pos:line="99" pos:column="42">0<pos:position pos:line="99" pos:column="43"/></literal><operator pos:line="99" pos:column="43">)<pos:position pos:line="99" pos:column="44"/></operator></expr>)<pos:position pos:line="99" pos:column="45"/></condition><then pos:line="99" pos:column="45">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="100" pos:column="9">BAIL_OUT<pos:position pos:line="100" pos:column="17"/></name><argument_list pos:line="100" pos:column="17">(<argument><expr><name pos:line="100" pos:column="18">errno<pos:position pos:line="100" pos:column="23"/></name></expr></argument>)<pos:position pos:line="100" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="100" pos:column="25"/></expr_stmt></block></then></if>
    }<pos:position pos:line="101" pos:column="6"/></block></then></if>

    <if pos:line="103" pos:column="5">if <condition pos:line="103" pos:column="8">(<expr><name pos:line="103" pos:column="9">values_names<pos:position pos:line="103" pos:column="21"/></name> <operator pos:line="103" pos:column="22">!=<pos:position pos:line="103" pos:column="24"/></operator> <name pos:line="103" pos:column="25">NULL<pos:position pos:line="103" pos:column="29"/></name></expr>)<pos:position pos:line="103" pos:column="30"/></condition><then pos:line="103" pos:column="30"> <block pos:line="103" pos:column="31">{
      <expr_stmt><expr><name><name pos:line="104" pos:column="7">values_names<pos:position pos:line="104" pos:column="19"/></name><index pos:line="104" pos:column="19">[<expr><name pos:line="104" pos:column="20">i<pos:position pos:line="104" pos:column="21"/></name></expr>]<pos:position pos:line="104" pos:column="22"/></index></name> <operator pos:line="104" pos:column="23">=<pos:position pos:line="104" pos:column="24"/></operator> <call><name pos:line="104" pos:column="25">strdup<pos:position pos:line="104" pos:column="31"/></name><argument_list pos:line="104" pos:column="31">(<argument><expr><name pos:line="104" pos:column="32">key<pos:position pos:line="104" pos:column="35"/></name></expr></argument>)<pos:position pos:line="104" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="104" pos:column="37"/></expr_stmt>
      <if pos:line="105" pos:column="7">if <condition pos:line="105" pos:column="10">(<expr><name><name pos:line="105" pos:column="11">values_names<pos:position pos:line="105" pos:column="23"/></name><index pos:line="105" pos:column="23">[<expr><name pos:line="105" pos:column="24">i<pos:position pos:line="105" pos:column="25"/></name></expr>]<pos:position pos:line="105" pos:column="26"/></index></name> <operator pos:line="105" pos:column="27">==<pos:position pos:line="105" pos:column="29"/></operator> <name pos:line="105" pos:column="30">NULL<pos:position pos:line="105" pos:column="34"/></name></expr>)<pos:position pos:line="105" pos:column="35"/></condition><then pos:line="105" pos:column="35">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="106" pos:column="9">BAIL_OUT<pos:position pos:line="106" pos:column="17"/></name><argument_list pos:line="106" pos:column="17">(<argument><expr><name pos:line="106" pos:column="18">ENOMEM<pos:position pos:line="106" pos:column="24"/></name></expr></argument>)<pos:position pos:line="106" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="106" pos:column="26"/></expr_stmt></block></then></if>
    }<pos:position pos:line="107" pos:column="6"/></block></then></if>
  }<pos:position pos:line="108" pos:column="4"/></block></for> <comment type="block" pos:line="108" pos:column="5">/* for (i = 0; i &lt; res.lines_num; i++) */</comment>

  <if pos:line="110" pos:column="3">if <condition pos:line="110" pos:column="6">(<expr><name pos:line="110" pos:column="7">ret_values_num<pos:position pos:line="110" pos:column="21"/></name> <operator pos:line="110" pos:column="22">!=<pos:position pos:line="110" pos:column="24"/></operator> <name pos:line="110" pos:column="25">NULL<pos:position pos:line="110" pos:column="29"/></name></expr>)<pos:position pos:line="110" pos:column="30"/></condition><then pos:line="110" pos:column="30">
    <block type="pseudo"><expr_stmt><expr><operator pos:line="111" pos:column="5">*<pos:position pos:line="111" pos:column="6"/></operator><name pos:line="111" pos:column="6">ret_values_num<pos:position pos:line="111" pos:column="20"/></name> <operator pos:line="111" pos:column="21">=<pos:position pos:line="111" pos:column="22"/></operator> <name pos:line="111" pos:column="23">values_num<pos:position pos:line="111" pos:column="33"/></name></expr>;<pos:position pos:line="111" pos:column="34"/></expr_stmt></block></then></if>
  <if pos:line="112" pos:column="3">if <condition pos:line="112" pos:column="6">(<expr><name pos:line="112" pos:column="7">ret_values<pos:position pos:line="112" pos:column="17"/></name> <operator pos:line="112" pos:column="18">!=<pos:position pos:line="112" pos:column="20"/></operator> <name pos:line="112" pos:column="21">NULL<pos:position pos:line="112" pos:column="25"/></name></expr>)<pos:position pos:line="112" pos:column="26"/></condition><then pos:line="112" pos:column="26">
    <block type="pseudo"><expr_stmt><expr><operator pos:line="113" pos:column="5">*<pos:position pos:line="113" pos:column="6"/></operator><name pos:line="113" pos:column="6">ret_values<pos:position pos:line="113" pos:column="16"/></name> <operator pos:line="113" pos:column="17">=<pos:position pos:line="113" pos:column="18"/></operator> <name pos:line="113" pos:column="19">values<pos:position pos:line="113" pos:column="25"/></name></expr>;<pos:position pos:line="113" pos:column="26"/></expr_stmt></block></then></if>
  <if pos:line="114" pos:column="3">if <condition pos:line="114" pos:column="6">(<expr><name pos:line="114" pos:column="7">ret_values_names<pos:position pos:line="114" pos:column="23"/></name> <operator pos:line="114" pos:column="24">!=<pos:position pos:line="114" pos:column="26"/></operator> <name pos:line="114" pos:column="27">NULL<pos:position pos:line="114" pos:column="31"/></name></expr>)<pos:position pos:line="114" pos:column="32"/></condition><then pos:line="114" pos:column="32">
    <block type="pseudo"><expr_stmt><expr><operator pos:line="115" pos:column="5">*<pos:position pos:line="115" pos:column="6"/></operator><name pos:line="115" pos:column="6">ret_values_names<pos:position pos:line="115" pos:column="22"/></name> <operator pos:line="115" pos:column="23">=<pos:position pos:line="115" pos:column="24"/></operator> <name pos:line="115" pos:column="25">values_names<pos:position pos:line="115" pos:column="37"/></name></expr>;<pos:position pos:line="115" pos:column="38"/></expr_stmt></block></then></if>

  <expr_stmt><expr><call><name pos:line="117" pos:column="3">lcc_response_free<pos:position pos:line="117" pos:column="20"/></name><argument_list pos:line="117" pos:column="20">(<argument><expr><operator pos:line="117" pos:column="21">&amp;<pos:position pos:line="117" pos:column="26"/></operator><name pos:line="117" pos:column="22">res<pos:position pos:line="117" pos:column="25"/></name></expr></argument>)<pos:position pos:line="117" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="117" pos:column="27"/></expr_stmt>

  <return pos:line="119" pos:column="3">return <expr><literal type="number" pos:line="119" pos:column="10">0<pos:position pos:line="119" pos:column="11"/></literal></expr>;<pos:position pos:line="119" pos:column="12"/></return>
}<pos:position pos:line="120" pos:column="2"/></block></function></unit>
