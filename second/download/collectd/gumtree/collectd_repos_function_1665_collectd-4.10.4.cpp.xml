<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1665_collectd-4.10.4.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">cipvs_init<pos:position pos:line="1" pos:column="22"/></name> <parameter_list pos:line="1" pos:column="23">(<parameter><decl><type><name pos:line="1" pos:column="24">void<pos:position pos:line="1" pos:column="28"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="29"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">ip_vs_getinfo<pos:position pos:line="3" pos:column="29"/></name></name></type> <name pos:line="3" pos:column="30">ipvs_info<pos:position pos:line="3" pos:column="39"/></name></decl>;<pos:position pos:line="3" pos:column="40"/></decl_stmt>

	<decl_stmt><decl><type><name pos:line="5" pos:column="9">socklen_t<pos:position pos:line="5" pos:column="18"/></name></type> <name pos:line="5" pos:column="19">len<pos:position pos:line="5" pos:column="22"/></name></decl>;<pos:position pos:line="5" pos:column="23"/></decl_stmt>

	<if pos:line="7" pos:column="9">if <condition pos:line="7" pos:column="12">(<expr><operator pos:line="7" pos:column="13">-<pos:position pos:line="7" pos:column="14"/></operator><literal type="number" pos:line="7" pos:column="14">1<pos:position pos:line="7" pos:column="15"/></literal> <operator pos:line="7" pos:column="16">==<pos:position pos:line="7" pos:column="18"/></operator> <operator pos:line="7" pos:column="19">(<pos:position pos:line="7" pos:column="20"/></operator><name pos:line="7" pos:column="20">sockfd<pos:position pos:line="7" pos:column="26"/></name> <operator pos:line="7" pos:column="27">=<pos:position pos:line="7" pos:column="28"/></operator> <call><name pos:line="7" pos:column="29">socket<pos:position pos:line="7" pos:column="35"/></name> <argument_list pos:line="7" pos:column="36">(<argument><expr><name pos:line="7" pos:column="37">AF_INET<pos:position pos:line="7" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="46">SOCK_RAW<pos:position pos:line="7" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="56">IPPROTO_RAW<pos:position pos:line="7" pos:column="67"/></name></expr></argument>)<pos:position pos:line="7" pos:column="68"/></argument_list></call><operator pos:line="7" pos:column="68">)<pos:position pos:line="7" pos:column="69"/></operator></expr>)<pos:position pos:line="7" pos:column="70"/></condition><then pos:line="7" pos:column="70"> <block pos:line="7" pos:column="71">{
		<decl_stmt><decl><type><name pos:line="8" pos:column="17">char<pos:position pos:line="8" pos:column="21"/></name></type> <name><name pos:line="8" pos:column="22">errbuf<pos:position pos:line="8" pos:column="28"/></name><index pos:line="8" pos:column="28">[<expr><literal type="number" pos:line="8" pos:column="29">1024<pos:position pos:line="8" pos:column="33"/></literal></expr>]<pos:position pos:line="8" pos:column="34"/></index></name></decl>;<pos:position pos:line="8" pos:column="35"/></decl_stmt>
		<expr_stmt><expr><call><name pos:line="9" pos:column="17">log_err<pos:position pos:line="9" pos:column="24"/></name> <argument_list pos:line="9" pos:column="25">(<argument><expr><literal type="string" pos:line="9" pos:column="26">"cipvs_init: socket() failed: %s"<pos:position pos:line="9" pos:column="59"/></literal></expr></argument>,
				<argument><expr><call><name pos:line="10" pos:column="33">sstrerror<pos:position pos:line="10" pos:column="42"/></name> <argument_list pos:line="10" pos:column="43">(<argument><expr><name pos:line="10" pos:column="44">errno<pos:position pos:line="10" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="51">errbuf<pos:position pos:line="10" pos:column="57"/></name></expr></argument>, <argument><expr><sizeof pos:line="10" pos:column="59">sizeof <argument_list pos:line="10" pos:column="66">(<argument><expr><name pos:line="10" pos:column="67">errbuf<pos:position pos:line="10" pos:column="73"/></name></expr></argument>)<pos:position pos:line="10" pos:column="74"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="10" pos:column="75"/></argument_list></call></expr></argument>)<pos:position pos:line="10" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="77"/></expr_stmt>
		<return pos:line="11" pos:column="17">return <expr><operator pos:line="11" pos:column="24">-<pos:position pos:line="11" pos:column="25"/></operator><literal type="number" pos:line="11" pos:column="25">1<pos:position pos:line="11" pos:column="26"/></literal></expr>;<pos:position pos:line="11" pos:column="27"/></return>
	}<pos:position pos:line="12" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="14" pos:column="9">len<pos:position pos:line="14" pos:column="12"/></name> <operator pos:line="14" pos:column="13">=<pos:position pos:line="14" pos:column="14"/></operator> <sizeof pos:line="14" pos:column="15">sizeof <argument_list pos:line="14" pos:column="22">(<argument><expr><name pos:line="14" pos:column="23">ipvs_info<pos:position pos:line="14" pos:column="32"/></name></expr></argument>)<pos:position pos:line="14" pos:column="33"/></argument_list></sizeof></expr>;<pos:position pos:line="14" pos:column="34"/></expr_stmt>

	<if pos:line="16" pos:column="9">if <condition pos:line="16" pos:column="12">(<expr><literal type="number" pos:line="16" pos:column="13">0<pos:position pos:line="16" pos:column="14"/></literal> <operator pos:line="16" pos:column="15">!=<pos:position pos:line="16" pos:column="17"/></operator> <call><name pos:line="16" pos:column="18">getsockopt<pos:position pos:line="16" pos:column="28"/></name> <argument_list pos:line="16" pos:column="29">(<argument><expr><name pos:line="16" pos:column="30">sockfd<pos:position pos:line="16" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="38">IPPROTO_IP<pos:position pos:line="16" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="50">IP_VS_SO_GET_INFO<pos:position pos:line="16" pos:column="67"/></name></expr></argument>,
				<argument><expr><operator pos:line="17" pos:column="33">(<pos:position pos:line="17" pos:column="34"/></operator><name pos:line="17" pos:column="34">void<pos:position pos:line="17" pos:column="38"/></name> <operator pos:line="17" pos:column="39">*<pos:position pos:line="17" pos:column="40"/></operator><operator pos:line="17" pos:column="40">)<pos:position pos:line="17" pos:column="41"/></operator><operator pos:line="17" pos:column="41">&amp;<pos:position pos:line="17" pos:column="46"/></operator><name pos:line="17" pos:column="42">ipvs_info<pos:position pos:line="17" pos:column="51"/></name></expr></argument>, <argument><expr><operator pos:line="17" pos:column="53">&amp;<pos:position pos:line="17" pos:column="58"/></operator><name pos:line="17" pos:column="54">len<pos:position pos:line="17" pos:column="57"/></name></expr></argument>)<pos:position pos:line="17" pos:column="58"/></argument_list></call></expr>)<pos:position pos:line="17" pos:column="59"/></condition><then pos:line="17" pos:column="59"> <block pos:line="17" pos:column="60">{
		<decl_stmt><decl><type><name pos:line="18" pos:column="17">char<pos:position pos:line="18" pos:column="21"/></name></type> <name><name pos:line="18" pos:column="22">errbuf<pos:position pos:line="18" pos:column="28"/></name><index pos:line="18" pos:column="28">[<expr><literal type="number" pos:line="18" pos:column="29">1024<pos:position pos:line="18" pos:column="33"/></literal></expr>]<pos:position pos:line="18" pos:column="34"/></index></name></decl>;<pos:position pos:line="18" pos:column="35"/></decl_stmt>
		<expr_stmt><expr><call><name pos:line="19" pos:column="17">log_err<pos:position pos:line="19" pos:column="24"/></name> <argument_list pos:line="19" pos:column="25">(<argument><expr><literal type="string" pos:line="19" pos:column="26">"cipvs_init: getsockopt() failed: %s"<pos:position pos:line="19" pos:column="63"/></literal></expr></argument>,
				<argument><expr><call><name pos:line="20" pos:column="33">sstrerror<pos:position pos:line="20" pos:column="42"/></name> <argument_list pos:line="20" pos:column="43">(<argument><expr><name pos:line="20" pos:column="44">errno<pos:position pos:line="20" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="51">errbuf<pos:position pos:line="20" pos:column="57"/></name></expr></argument>, <argument><expr><sizeof pos:line="20" pos:column="59">sizeof <argument_list pos:line="20" pos:column="66">(<argument><expr><name pos:line="20" pos:column="67">errbuf<pos:position pos:line="20" pos:column="73"/></name></expr></argument>)<pos:position pos:line="20" pos:column="74"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="20" pos:column="75"/></argument_list></call></expr></argument>)<pos:position pos:line="20" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="77"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="21" pos:column="17">close<pos:position pos:line="21" pos:column="22"/></name> <argument_list pos:line="21" pos:column="23">(<argument><expr><name pos:line="21" pos:column="24">sockfd<pos:position pos:line="21" pos:column="30"/></name></expr></argument>)<pos:position pos:line="21" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="32"/></expr_stmt>
		<expr_stmt><expr><name pos:line="22" pos:column="17">sockfd<pos:position pos:line="22" pos:column="23"/></name> <operator pos:line="22" pos:column="24">=<pos:position pos:line="22" pos:column="25"/></operator> <operator pos:line="22" pos:column="26">-<pos:position pos:line="22" pos:column="27"/></operator><literal type="number" pos:line="22" pos:column="27">1<pos:position pos:line="22" pos:column="28"/></literal></expr>;<pos:position pos:line="22" pos:column="29"/></expr_stmt>
		<return pos:line="23" pos:column="17">return <expr><operator pos:line="23" pos:column="24">-<pos:position pos:line="23" pos:column="25"/></operator><literal type="number" pos:line="23" pos:column="25">1<pos:position pos:line="23" pos:column="26"/></literal></expr>;<pos:position pos:line="23" pos:column="27"/></return>
	}<pos:position pos:line="24" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="26" pos:column="9">/* we need IPVS &gt;= 1.1.4 */</comment>
	<if pos:line="27" pos:column="9">if <condition pos:line="27" pos:column="12">(<expr><name><name pos:line="27" pos:column="13">ipvs_info<pos:position pos:line="27" pos:column="22"/></name><operator pos:line="27" pos:column="22">.<pos:position pos:line="27" pos:column="23"/></operator><name pos:line="27" pos:column="23">version<pos:position pos:line="27" pos:column="30"/></name></name> <operator pos:line="27" pos:column="31">&lt;<pos:position pos:line="27" pos:column="35"/></operator> <operator pos:line="27" pos:column="33">(<pos:position pos:line="27" pos:column="34"/></operator><operator pos:line="27" pos:column="34">(<pos:position pos:line="27" pos:column="35"/></operator><literal type="number" pos:line="27" pos:column="35">1<pos:position pos:line="27" pos:column="36"/></literal> <operator pos:line="27" pos:column="37">&lt;&lt;<pos:position pos:line="27" pos:column="45"/></operator> <literal type="number" pos:line="27" pos:column="40">16<pos:position pos:line="27" pos:column="42"/></literal><operator pos:line="27" pos:column="42">)<pos:position pos:line="27" pos:column="43"/></operator> <operator pos:line="27" pos:column="44">+<pos:position pos:line="27" pos:column="45"/></operator> <operator pos:line="27" pos:column="46">(<pos:position pos:line="27" pos:column="47"/></operator><literal type="number" pos:line="27" pos:column="47">1<pos:position pos:line="27" pos:column="48"/></literal> <operator pos:line="27" pos:column="49">&lt;&lt;<pos:position pos:line="27" pos:column="57"/></operator> <literal type="number" pos:line="27" pos:column="52">8<pos:position pos:line="27" pos:column="53"/></literal><operator pos:line="27" pos:column="53">)<pos:position pos:line="27" pos:column="54"/></operator> <operator pos:line="27" pos:column="55">+<pos:position pos:line="27" pos:column="56"/></operator> <literal type="number" pos:line="27" pos:column="57">4<pos:position pos:line="27" pos:column="58"/></literal><operator pos:line="27" pos:column="58">)<pos:position pos:line="27" pos:column="59"/></operator></expr>)<pos:position pos:line="27" pos:column="60"/></condition><then pos:line="27" pos:column="60"> <block pos:line="27" pos:column="61">{
		<expr_stmt><expr><call><name pos:line="28" pos:column="17">log_err<pos:position pos:line="28" pos:column="24"/></name> <argument_list pos:line="28" pos:column="25">(<argument><expr><literal type="string" pos:line="28" pos:column="26">"cipvs_init: IPVS version too old (%d.%d.%d &lt; %d.%d.%d)"<pos:position pos:line="28" pos:column="85"/></literal></expr></argument>,
				<argument><expr><call><name pos:line="29" pos:column="33">NVERSION<pos:position pos:line="29" pos:column="41"/></name> <argument_list pos:line="29" pos:column="42">(<argument><expr><name><name pos:line="29" pos:column="43">ipvs_info<pos:position pos:line="29" pos:column="52"/></name><operator pos:line="29" pos:column="52">.<pos:position pos:line="29" pos:column="53"/></operator><name pos:line="29" pos:column="53">version<pos:position pos:line="29" pos:column="60"/></name></name></expr></argument>)<pos:position pos:line="29" pos:column="61"/></argument_list></call></expr></argument>, <argument><expr><literal type="number" pos:line="29" pos:column="63">1<pos:position pos:line="29" pos:column="64"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="29" pos:column="66">1<pos:position pos:line="29" pos:column="67"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="29" pos:column="69">4<pos:position pos:line="29" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="72"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="30" pos:column="17">close<pos:position pos:line="30" pos:column="22"/></name> <argument_list pos:line="30" pos:column="23">(<argument><expr><name pos:line="30" pos:column="24">sockfd<pos:position pos:line="30" pos:column="30"/></name></expr></argument>)<pos:position pos:line="30" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="32"/></expr_stmt>
		<expr_stmt><expr><name pos:line="31" pos:column="17">sockfd<pos:position pos:line="31" pos:column="23"/></name> <operator pos:line="31" pos:column="24">=<pos:position pos:line="31" pos:column="25"/></operator> <operator pos:line="31" pos:column="26">-<pos:position pos:line="31" pos:column="27"/></operator><literal type="number" pos:line="31" pos:column="27">1<pos:position pos:line="31" pos:column="28"/></literal></expr>;<pos:position pos:line="31" pos:column="29"/></expr_stmt>
		<return pos:line="32" pos:column="17">return <expr><operator pos:line="32" pos:column="24">-<pos:position pos:line="32" pos:column="25"/></operator><literal type="number" pos:line="32" pos:column="25">1<pos:position pos:line="32" pos:column="26"/></literal></expr>;<pos:position pos:line="32" pos:column="27"/></return>
	}<pos:position pos:line="33" pos:column="10"/></block></then>
	<else pos:line="34" pos:column="9">else <block pos:line="34" pos:column="14">{
		<expr_stmt><expr><call><name pos:line="35" pos:column="17">log_info<pos:position pos:line="35" pos:column="25"/></name> <argument_list pos:line="35" pos:column="26">(<argument><expr><literal type="string" pos:line="35" pos:column="27">"Successfully connected to IPVS %d.%d.%d"<pos:position pos:line="35" pos:column="68"/></literal></expr></argument>,
				<argument><expr><call><name pos:line="36" pos:column="33">NVERSION<pos:position pos:line="36" pos:column="41"/></name> <argument_list pos:line="36" pos:column="42">(<argument><expr><name><name pos:line="36" pos:column="43">ipvs_info<pos:position pos:line="36" pos:column="52"/></name><operator pos:line="36" pos:column="52">.<pos:position pos:line="36" pos:column="53"/></operator><name pos:line="36" pos:column="53">version<pos:position pos:line="36" pos:column="60"/></name></name></expr></argument>)<pos:position pos:line="36" pos:column="61"/></argument_list></call></expr></argument>)<pos:position pos:line="36" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="63"/></expr_stmt>
	}<pos:position pos:line="37" pos:column="10"/></block></else></if>
	<return pos:line="38" pos:column="9">return <expr><literal type="number" pos:line="38" pos:column="16">0<pos:position pos:line="38" pos:column="17"/></literal></expr>;<pos:position pos:line="38" pos:column="18"/></return>
}<pos:position pos:line="39" pos:column="2"/></block></function></unit>
