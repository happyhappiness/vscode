<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1804_collectd-5.6.2.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">ted_read_value<pos:position pos:line="1" pos:column="26"/></name><parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><name pos:line="1" pos:column="27">double<pos:position pos:line="1" pos:column="33"/></name> <modifier pos:line="1" pos:column="34">*<pos:position pos:line="1" pos:column="35"/></modifier></type><name pos:line="1" pos:column="35">ret_power<pos:position pos:line="1" pos:column="44"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="46">double<pos:position pos:line="1" pos:column="52"/></name> <modifier pos:line="1" pos:column="53">*<pos:position pos:line="1" pos:column="54"/></modifier></type><name pos:line="1" pos:column="54">ret_voltage<pos:position pos:line="1" pos:column="65"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="66"/></parameter_list> <block pos:line="1" pos:column="67">{
  <decl_stmt><decl><type><name pos:line="2" pos:column="3">unsigned<pos:position pos:line="2" pos:column="11"/></name> <name pos:line="2" pos:column="12">char<pos:position pos:line="2" pos:column="16"/></name></type> <name><name pos:line="2" pos:column="17">receive_buffer<pos:position pos:line="2" pos:column="31"/></name><index pos:line="2" pos:column="31">[<expr><literal type="number" pos:line="2" pos:column="32">300<pos:position pos:line="2" pos:column="35"/></literal></expr>]<pos:position pos:line="2" pos:column="36"/></index></name></decl>;<pos:position pos:line="2" pos:column="37"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">unsigned<pos:position pos:line="3" pos:column="11"/></name> <name pos:line="3" pos:column="12">char<pos:position pos:line="3" pos:column="16"/></name></type> <name><name pos:line="3" pos:column="17">package_buffer<pos:position pos:line="3" pos:column="31"/></name><index pos:line="3" pos:column="31">[<expr><literal type="number" pos:line="3" pos:column="32">300<pos:position pos:line="3" pos:column="35"/></literal></expr>]<pos:position pos:line="3" pos:column="36"/></index></name></decl>;<pos:position pos:line="3" pos:column="37"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">unsigned<pos:position pos:line="4" pos:column="11"/></name> <name pos:line="4" pos:column="12">char<pos:position pos:line="4" pos:column="16"/></name></type> <name><name pos:line="4" pos:column="17">pkt_request<pos:position pos:line="4" pos:column="28"/></name><index pos:line="4" pos:column="28">[<expr><literal type="number" pos:line="4" pos:column="29">1<pos:position pos:line="4" pos:column="30"/></literal></expr>]<pos:position pos:line="4" pos:column="31"/></index></name> <init pos:line="4" pos:column="32">= <expr><block pos:line="4" pos:column="34">{<expr><literal type="number" pos:line="4" pos:column="35">0xAA<pos:position pos:line="4" pos:column="39"/></literal></expr>}<pos:position pos:line="4" pos:column="40"/></block></expr></init></decl>;<pos:position pos:line="4" pos:column="41"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">int<pos:position pos:line="5" pos:column="6"/></name></type> <name pos:line="5" pos:column="7">package_buffer_pos<pos:position pos:line="5" pos:column="25"/></name></decl>;<pos:position pos:line="5" pos:column="26"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="7" pos:column="3">fd_set<pos:position pos:line="7" pos:column="9"/></name></type> <name pos:line="7" pos:column="10">input<pos:position pos:line="7" pos:column="15"/></name></decl>;<pos:position pos:line="7" pos:column="16"/></decl_stmt>

  <comment type="block" pos:line="9" pos:column="3">/* Initialize timeout structure, set to 2 seconds */</comment>
  <decl_stmt><decl><type><name><name pos:line="10" pos:column="3">struct<pos:position pos:line="10" pos:column="9"/></name> <name pos:line="10" pos:column="10">timeval<pos:position pos:line="10" pos:column="17"/></name></name></type> <name pos:line="10" pos:column="18">timeout<pos:position pos:line="10" pos:column="25"/></name> <init pos:line="10" pos:column="26">= <expr><block pos:line="10" pos:column="28">{<expr><operator pos:line="10" pos:column="29">.<pos:position pos:line="10" pos:column="30"/></operator><name pos:line="10" pos:column="30">tv_sec<pos:position pos:line="10" pos:column="36"/></name> <operator pos:line="10" pos:column="37">=<pos:position pos:line="10" pos:column="38"/></operator> <literal type="number" pos:line="10" pos:column="39">2<pos:position pos:line="10" pos:column="40"/></literal></expr>}<pos:position pos:line="10" pos:column="41"/></block></expr></init></decl>;<pos:position pos:line="10" pos:column="42"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="12" pos:column="3">int<pos:position pos:line="12" pos:column="6"/></name></type> <name pos:line="12" pos:column="7">end_flag<pos:position pos:line="12" pos:column="15"/></name></decl>;<pos:position pos:line="12" pos:column="16"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="13" pos:column="3">int<pos:position pos:line="13" pos:column="6"/></name></type> <name pos:line="13" pos:column="7">escape_flag<pos:position pos:line="13" pos:column="18"/></name></decl>;<pos:position pos:line="13" pos:column="19"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="15" pos:column="3">int<pos:position pos:line="15" pos:column="6"/></name></type> <name pos:line="15" pos:column="7">status<pos:position pos:line="15" pos:column="13"/></name></decl>;<pos:position pos:line="15" pos:column="14"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="17" pos:column="3">assert<pos:position pos:line="17" pos:column="9"/></name><argument_list pos:line="17" pos:column="9">(<argument><expr><name pos:line="17" pos:column="10">fd<pos:position pos:line="17" pos:column="12"/></name> <operator pos:line="17" pos:column="13">&gt;=<pos:position pos:line="17" pos:column="18"/></operator> <literal type="number" pos:line="17" pos:column="16">0<pos:position pos:line="17" pos:column="17"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="19"/></expr_stmt>

  <comment type="block" pos:line="19" pos:column="3">/* Initialize the input set*/</comment>
  <expr_stmt><expr><call><name pos:line="20" pos:column="3">FD_ZERO<pos:position pos:line="20" pos:column="10"/></name><argument_list pos:line="20" pos:column="10">(<argument><expr><operator pos:line="20" pos:column="11">&amp;<pos:position pos:line="20" pos:column="16"/></operator><name pos:line="20" pos:column="12">input<pos:position pos:line="20" pos:column="17"/></name></expr></argument>)<pos:position pos:line="20" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="19"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="21" pos:column="3">FD_SET<pos:position pos:line="21" pos:column="9"/></name><argument_list pos:line="21" pos:column="9">(<argument><expr><name pos:line="21" pos:column="10">fd<pos:position pos:line="21" pos:column="12"/></name></expr></argument>, <argument><expr><operator pos:line="21" pos:column="14">&amp;<pos:position pos:line="21" pos:column="19"/></operator><name pos:line="21" pos:column="15">input<pos:position pos:line="21" pos:column="20"/></name></expr></argument>)<pos:position pos:line="21" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="22"/></expr_stmt>

  <comment type="block" pos:line="23" pos:column="3">/* clear out anything in the buffer */</comment>
  <expr_stmt><expr><call><name pos:line="24" pos:column="3">tcflush<pos:position pos:line="24" pos:column="10"/></name><argument_list pos:line="24" pos:column="10">(<argument><expr><name pos:line="24" pos:column="11">fd<pos:position pos:line="24" pos:column="13"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="15">TCIFLUSH<pos:position pos:line="24" pos:column="23"/></name></expr></argument>)<pos:position pos:line="24" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="25"/></expr_stmt>

  <expr_stmt><expr><name pos:line="26" pos:column="3">status<pos:position pos:line="26" pos:column="9"/></name> <operator pos:line="26" pos:column="10">=<pos:position pos:line="26" pos:column="11"/></operator> <call><name pos:line="26" pos:column="12">write<pos:position pos:line="26" pos:column="17"/></name><argument_list pos:line="26" pos:column="17">(<argument><expr><name pos:line="26" pos:column="18">fd<pos:position pos:line="26" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="22">pkt_request<pos:position pos:line="26" pos:column="33"/></name></expr></argument>, <argument><expr><sizeof pos:line="26" pos:column="35">sizeof<argument_list pos:line="26" pos:column="41">(<argument><expr><name pos:line="26" pos:column="42">pkt_request<pos:position pos:line="26" pos:column="53"/></name></expr></argument>)<pos:position pos:line="26" pos:column="54"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="26" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="56"/></expr_stmt>
  <if pos:line="27" pos:column="3">if <condition pos:line="27" pos:column="6">(<expr><name pos:line="27" pos:column="7">status<pos:position pos:line="27" pos:column="13"/></name> <operator pos:line="27" pos:column="14">&lt;=<pos:position pos:line="27" pos:column="19"/></operator> <literal type="number" pos:line="27" pos:column="17">0<pos:position pos:line="27" pos:column="18"/></literal></expr>)<pos:position pos:line="27" pos:column="19"/></condition><then pos:line="27" pos:column="19"> <block pos:line="27" pos:column="20">{
    <expr_stmt><expr><call><name pos:line="28" pos:column="5">ERROR<pos:position pos:line="28" pos:column="10"/></name><argument_list pos:line="28" pos:column="10">(<argument><expr><literal type="string" pos:line="28" pos:column="11">"ted plugin: swrite failed."<pos:position pos:line="28" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="41"/></expr_stmt>
    <return pos:line="29" pos:column="5">return <expr><operator pos:line="29" pos:column="12">(<pos:position pos:line="29" pos:column="13"/></operator><operator pos:line="29" pos:column="13">-<pos:position pos:line="29" pos:column="14"/></operator><literal type="number" pos:line="29" pos:column="14">1<pos:position pos:line="29" pos:column="15"/></literal><operator pos:line="29" pos:column="15">)<pos:position pos:line="29" pos:column="16"/></operator></expr>;<pos:position pos:line="29" pos:column="17"/></return>
  }<pos:position pos:line="30" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="32" pos:column="3">/* Loop until we find the end of the package */</comment>
  <expr_stmt><expr><name pos:line="33" pos:column="3">end_flag<pos:position pos:line="33" pos:column="11"/></name> <operator pos:line="33" pos:column="12">=<pos:position pos:line="33" pos:column="13"/></operator> <literal type="number" pos:line="33" pos:column="14">0<pos:position pos:line="33" pos:column="15"/></literal></expr>;<pos:position pos:line="33" pos:column="16"/></expr_stmt>
  <expr_stmt><expr><name pos:line="34" pos:column="3">package_buffer_pos<pos:position pos:line="34" pos:column="21"/></name> <operator pos:line="34" pos:column="22">=<pos:position pos:line="34" pos:column="23"/></operator> <literal type="number" pos:line="34" pos:column="24">0<pos:position pos:line="34" pos:column="25"/></literal></expr>;<pos:position pos:line="34" pos:column="26"/></expr_stmt>
  <while pos:line="35" pos:column="3">while <condition pos:line="35" pos:column="9">(<expr><name pos:line="35" pos:column="10">end_flag<pos:position pos:line="35" pos:column="18"/></name> <operator pos:line="35" pos:column="19">==<pos:position pos:line="35" pos:column="21"/></operator> <literal type="number" pos:line="35" pos:column="22">0<pos:position pos:line="35" pos:column="23"/></literal></expr>)<pos:position pos:line="35" pos:column="24"/></condition> <block pos:line="35" pos:column="25">{
    <decl_stmt><decl><type><name pos:line="36" pos:column="5">ssize_t<pos:position pos:line="36" pos:column="12"/></name></type> <name pos:line="36" pos:column="13">receive_buffer_length<pos:position pos:line="36" pos:column="34"/></name></decl>;<pos:position pos:line="36" pos:column="35"/></decl_stmt>

    <comment type="block" pos:line="38" pos:column="5">/* check for timeout or input error*/</comment>
    <expr_stmt><expr><name pos:line="39" pos:column="5">status<pos:position pos:line="39" pos:column="11"/></name> <operator pos:line="39" pos:column="12">=<pos:position pos:line="39" pos:column="13"/></operator> <call><name pos:line="39" pos:column="14">select<pos:position pos:line="39" pos:column="20"/></name><argument_list pos:line="39" pos:column="20">(<argument><expr><name pos:line="39" pos:column="21">fd<pos:position pos:line="39" pos:column="23"/></name> <operator pos:line="39" pos:column="24">+<pos:position pos:line="39" pos:column="25"/></operator> <literal type="number" pos:line="39" pos:column="26">1<pos:position pos:line="39" pos:column="27"/></literal></expr></argument>, <argument><expr><operator pos:line="39" pos:column="29">&amp;<pos:position pos:line="39" pos:column="34"/></operator><name pos:line="39" pos:column="30">input<pos:position pos:line="39" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="37">NULL<pos:position pos:line="39" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="43">NULL<pos:position pos:line="39" pos:column="47"/></name></expr></argument>, <argument><expr><operator pos:line="39" pos:column="49">&amp;<pos:position pos:line="39" pos:column="54"/></operator><name pos:line="39" pos:column="50">timeout<pos:position pos:line="39" pos:column="57"/></name></expr></argument>)<pos:position pos:line="39" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="59"/></expr_stmt>
    <if pos:line="40" pos:column="5">if <condition pos:line="40" pos:column="8">(<expr><name pos:line="40" pos:column="9">status<pos:position pos:line="40" pos:column="15"/></name> <operator pos:line="40" pos:column="16">==<pos:position pos:line="40" pos:column="18"/></operator> <literal type="number" pos:line="40" pos:column="19">0<pos:position pos:line="40" pos:column="20"/></literal></expr>)<pos:position pos:line="40" pos:column="21"/></condition><then pos:line="40" pos:column="21"> <comment type="block" pos:line="40" pos:column="22">/* Timeout */</comment>
    <block pos:line="41" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="42" pos:column="7">WARNING<pos:position pos:line="42" pos:column="14"/></name><argument_list pos:line="42" pos:column="14">(<argument><expr><literal type="string" pos:line="42" pos:column="15">"ted plugin: Timeout while waiting for file descriptor "<pos:position pos:line="42" pos:column="71"/></literal>
              <literal type="string" pos:line="43" pos:column="15">"to become ready."<pos:position pos:line="43" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="43" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="35"/></expr_stmt>
      <return pos:line="44" pos:column="7">return <expr><operator pos:line="44" pos:column="14">(<pos:position pos:line="44" pos:column="15"/></operator><operator pos:line="44" pos:column="15">-<pos:position pos:line="44" pos:column="16"/></operator><literal type="number" pos:line="44" pos:column="16">1<pos:position pos:line="44" pos:column="17"/></literal><operator pos:line="44" pos:column="17">)<pos:position pos:line="44" pos:column="18"/></operator></expr>;<pos:position pos:line="44" pos:column="19"/></return>
    }<pos:position pos:line="45" pos:column="6"/></block></then> <elseif pos:line="45" pos:column="7">else <if pos:line="45" pos:column="12">if <condition pos:line="45" pos:column="15">(<expr><operator pos:line="45" pos:column="16">(<pos:position pos:line="45" pos:column="17"/></operator><name pos:line="45" pos:column="17">status<pos:position pos:line="45" pos:column="23"/></name> <operator pos:line="45" pos:column="24">&lt;<pos:position pos:line="45" pos:column="28"/></operator> <literal type="number" pos:line="45" pos:column="26">0<pos:position pos:line="45" pos:column="27"/></literal><operator pos:line="45" pos:column="27">)<pos:position pos:line="45" pos:column="28"/></operator> <operator pos:line="45" pos:column="29">&amp;&amp;<pos:position pos:line="45" pos:column="39"/></operator> <operator pos:line="45" pos:column="32">(<pos:position pos:line="45" pos:column="33"/></operator><operator pos:line="45" pos:column="33">(<pos:position pos:line="45" pos:column="34"/></operator><name pos:line="45" pos:column="34">errno<pos:position pos:line="45" pos:column="39"/></name> <operator pos:line="45" pos:column="40">==<pos:position pos:line="45" pos:column="42"/></operator> <name pos:line="45" pos:column="43">EAGAIN<pos:position pos:line="45" pos:column="49"/></name><operator pos:line="45" pos:column="49">)<pos:position pos:line="45" pos:column="50"/></operator> <operator pos:line="45" pos:column="51">||<pos:position pos:line="45" pos:column="53"/></operator> <operator pos:line="45" pos:column="54">(<pos:position pos:line="45" pos:column="55"/></operator><name pos:line="45" pos:column="55">errno<pos:position pos:line="45" pos:column="60"/></name> <operator pos:line="45" pos:column="61">==<pos:position pos:line="45" pos:column="63"/></operator> <name pos:line="45" pos:column="64">EINTR<pos:position pos:line="45" pos:column="69"/></name><operator pos:line="45" pos:column="69">)<pos:position pos:line="45" pos:column="70"/></operator><operator pos:line="45" pos:column="70">)<pos:position pos:line="45" pos:column="71"/></operator></expr>)<pos:position pos:line="45" pos:column="72"/></condition><then pos:line="45" pos:column="72"> <block pos:line="45" pos:column="73">{
      <comment type="block" pos:line="46" pos:column="7">/* Some signal or something. Start over.. */</comment>
      <continue pos:line="47" pos:column="7">continue;<pos:position pos:line="47" pos:column="16"/></continue>
    }<pos:position pos:line="48" pos:column="6"/></block></then></if></elseif> <elseif pos:line="48" pos:column="7">else <if pos:line="48" pos:column="12">if <condition pos:line="48" pos:column="15">(<expr><name pos:line="48" pos:column="16">status<pos:position pos:line="48" pos:column="22"/></name> <operator pos:line="48" pos:column="23">&lt;<pos:position pos:line="48" pos:column="27"/></operator> <literal type="number" pos:line="48" pos:column="25">0<pos:position pos:line="48" pos:column="26"/></literal></expr>)<pos:position pos:line="48" pos:column="27"/></condition><then pos:line="48" pos:column="27"> <block pos:line="48" pos:column="28">{
      <decl_stmt><decl><type><name pos:line="49" pos:column="7">char<pos:position pos:line="49" pos:column="11"/></name></type> <name><name pos:line="49" pos:column="12">errbuf<pos:position pos:line="49" pos:column="18"/></name><index pos:line="49" pos:column="18">[<expr><literal type="number" pos:line="49" pos:column="19">1024<pos:position pos:line="49" pos:column="23"/></literal></expr>]<pos:position pos:line="49" pos:column="24"/></index></name></decl>;<pos:position pos:line="49" pos:column="25"/></decl_stmt>
      <expr_stmt><expr><call><name pos:line="50" pos:column="7">ERROR<pos:position pos:line="50" pos:column="12"/></name><argument_list pos:line="50" pos:column="12">(<argument><expr><literal type="string" pos:line="50" pos:column="13">"ted plugin: select failed: %s"<pos:position pos:line="50" pos:column="44"/></literal></expr></argument>,
            <argument><expr><call><name pos:line="51" pos:column="13">sstrerror<pos:position pos:line="51" pos:column="22"/></name><argument_list pos:line="51" pos:column="22">(<argument><expr><name pos:line="51" pos:column="23">errno<pos:position pos:line="51" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="51" pos:column="30">errbuf<pos:position pos:line="51" pos:column="36"/></name></expr></argument>, <argument><expr><sizeof pos:line="51" pos:column="38">sizeof<argument_list pos:line="51" pos:column="44">(<argument><expr><name pos:line="51" pos:column="45">errbuf<pos:position pos:line="51" pos:column="51"/></name></expr></argument>)<pos:position pos:line="51" pos:column="52"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="51" pos:column="53"/></argument_list></call></expr></argument>)<pos:position pos:line="51" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="55"/></expr_stmt>
      <return pos:line="52" pos:column="7">return <expr><operator pos:line="52" pos:column="14">(<pos:position pos:line="52" pos:column="15"/></operator><operator pos:line="52" pos:column="15">-<pos:position pos:line="52" pos:column="16"/></operator><literal type="number" pos:line="52" pos:column="16">1<pos:position pos:line="52" pos:column="17"/></literal><operator pos:line="52" pos:column="17">)<pos:position pos:line="52" pos:column="18"/></operator></expr>;<pos:position pos:line="52" pos:column="19"/></return>
    }<pos:position pos:line="53" pos:column="6"/></block></then></if></elseif></if>

    <expr_stmt><expr><name pos:line="55" pos:column="5">receive_buffer_length<pos:position pos:line="55" pos:column="26"/></name> <operator pos:line="55" pos:column="27">=<pos:position pos:line="55" pos:column="28"/></operator> <call><name pos:line="55" pos:column="29">read<pos:position pos:line="55" pos:column="33"/></name><argument_list pos:line="55" pos:column="33">(<argument><expr><name pos:line="55" pos:column="34">fd<pos:position pos:line="55" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="55" pos:column="38">receive_buffer<pos:position pos:line="55" pos:column="52"/></name></expr></argument>, <argument><expr><sizeof pos:line="55" pos:column="54">sizeof<argument_list pos:line="55" pos:column="60">(<argument><expr><name pos:line="55" pos:column="61">receive_buffer<pos:position pos:line="55" pos:column="75"/></name></expr></argument>)<pos:position pos:line="55" pos:column="76"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="55" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="78"/></expr_stmt>
    <if pos:line="56" pos:column="5">if <condition pos:line="56" pos:column="8">(<expr><name pos:line="56" pos:column="9">receive_buffer_length<pos:position pos:line="56" pos:column="30"/></name> <operator pos:line="56" pos:column="31">&lt;<pos:position pos:line="56" pos:column="35"/></operator> <literal type="number" pos:line="56" pos:column="33">0<pos:position pos:line="56" pos:column="34"/></literal></expr>)<pos:position pos:line="56" pos:column="35"/></condition><then pos:line="56" pos:column="35"> <block pos:line="56" pos:column="36">{
      <decl_stmt><decl><type><name pos:line="57" pos:column="7">char<pos:position pos:line="57" pos:column="11"/></name></type> <name><name pos:line="57" pos:column="12">errbuf<pos:position pos:line="57" pos:column="18"/></name><index pos:line="57" pos:column="18">[<expr><literal type="number" pos:line="57" pos:column="19">1024<pos:position pos:line="57" pos:column="23"/></literal></expr>]<pos:position pos:line="57" pos:column="24"/></index></name></decl>;<pos:position pos:line="57" pos:column="25"/></decl_stmt>
      <if pos:line="58" pos:column="7">if <condition pos:line="58" pos:column="10">(<expr><operator pos:line="58" pos:column="11">(<pos:position pos:line="58" pos:column="12"/></operator><name pos:line="58" pos:column="12">errno<pos:position pos:line="58" pos:column="17"/></name> <operator pos:line="58" pos:column="18">==<pos:position pos:line="58" pos:column="20"/></operator> <name pos:line="58" pos:column="21">EAGAIN<pos:position pos:line="58" pos:column="27"/></name><operator pos:line="58" pos:column="27">)<pos:position pos:line="58" pos:column="28"/></operator> <operator pos:line="58" pos:column="29">||<pos:position pos:line="58" pos:column="31"/></operator> <operator pos:line="58" pos:column="32">(<pos:position pos:line="58" pos:column="33"/></operator><name pos:line="58" pos:column="33">errno<pos:position pos:line="58" pos:column="38"/></name> <operator pos:line="58" pos:column="39">==<pos:position pos:line="58" pos:column="41"/></operator> <name pos:line="58" pos:column="42">EINTR<pos:position pos:line="58" pos:column="47"/></name><operator pos:line="58" pos:column="47">)<pos:position pos:line="58" pos:column="48"/></operator></expr>)<pos:position pos:line="58" pos:column="49"/></condition><then pos:line="58" pos:column="49">
        <block type="pseudo"><continue pos:line="59" pos:column="9">continue;<pos:position pos:line="59" pos:column="18"/></continue></block></then></if>
      <expr_stmt><expr><call><name pos:line="60" pos:column="7">ERROR<pos:position pos:line="60" pos:column="12"/></name><argument_list pos:line="60" pos:column="12">(<argument><expr><literal type="string" pos:line="60" pos:column="13">"ted plugin: read(2) failed: %s"<pos:position pos:line="60" pos:column="45"/></literal></expr></argument>,
            <argument><expr><call><name pos:line="61" pos:column="13">sstrerror<pos:position pos:line="61" pos:column="22"/></name><argument_list pos:line="61" pos:column="22">(<argument><expr><name pos:line="61" pos:column="23">errno<pos:position pos:line="61" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="61" pos:column="30">errbuf<pos:position pos:line="61" pos:column="36"/></name></expr></argument>, <argument><expr><sizeof pos:line="61" pos:column="38">sizeof<argument_list pos:line="61" pos:column="44">(<argument><expr><name pos:line="61" pos:column="45">errbuf<pos:position pos:line="61" pos:column="51"/></name></expr></argument>)<pos:position pos:line="61" pos:column="52"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="61" pos:column="53"/></argument_list></call></expr></argument>)<pos:position pos:line="61" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="55"/></expr_stmt>
      <return pos:line="62" pos:column="7">return <expr><operator pos:line="62" pos:column="14">(<pos:position pos:line="62" pos:column="15"/></operator><operator pos:line="62" pos:column="15">-<pos:position pos:line="62" pos:column="16"/></operator><literal type="number" pos:line="62" pos:column="16">1<pos:position pos:line="62" pos:column="17"/></literal><operator pos:line="62" pos:column="17">)<pos:position pos:line="62" pos:column="18"/></operator></expr>;<pos:position pos:line="62" pos:column="19"/></return>
    }<pos:position pos:line="63" pos:column="6"/></block></then> <elseif pos:line="63" pos:column="7">else <if pos:line="63" pos:column="12">if <condition pos:line="63" pos:column="15">(<expr><name pos:line="63" pos:column="16">receive_buffer_length<pos:position pos:line="63" pos:column="37"/></name> <operator pos:line="63" pos:column="38">==<pos:position pos:line="63" pos:column="40"/></operator> <literal type="number" pos:line="63" pos:column="41">0<pos:position pos:line="63" pos:column="42"/></literal></expr>)<pos:position pos:line="63" pos:column="43"/></condition><then pos:line="63" pos:column="43"> <block pos:line="63" pos:column="44">{
      <comment type="block" pos:line="64" pos:column="7">/* Should we close the FD in this case? */</comment>
      <expr_stmt><expr><call><name pos:line="65" pos:column="7">WARNING<pos:position pos:line="65" pos:column="14"/></name><argument_list pos:line="65" pos:column="14">(<argument><expr><literal type="string" pos:line="65" pos:column="15">"ted plugin: Received EOF from file descriptor."<pos:position pos:line="65" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="65" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="65"/></expr_stmt>
      <return pos:line="66" pos:column="7">return <expr><operator pos:line="66" pos:column="14">(<pos:position pos:line="66" pos:column="15"/></operator><operator pos:line="66" pos:column="15">-<pos:position pos:line="66" pos:column="16"/></operator><literal type="number" pos:line="66" pos:column="16">1<pos:position pos:line="66" pos:column="17"/></literal><operator pos:line="66" pos:column="17">)<pos:position pos:line="66" pos:column="18"/></operator></expr>;<pos:position pos:line="66" pos:column="19"/></return>
    }<pos:position pos:line="67" pos:column="6"/></block></then></if></elseif> <elseif pos:line="67" pos:column="7">else <if pos:line="67" pos:column="12">if <condition pos:line="67" pos:column="15">(<expr><operator pos:line="67" pos:column="16">(<pos:position pos:line="67" pos:column="17"/></operator><operator pos:line="67" pos:column="17">(<pos:position pos:line="67" pos:column="18"/></operator><name pos:line="67" pos:column="18">size_t<pos:position pos:line="67" pos:column="24"/></name><operator pos:line="67" pos:column="24">)<pos:position pos:line="67" pos:column="25"/></operator><name pos:line="67" pos:column="25">receive_buffer_length<pos:position pos:line="67" pos:column="46"/></name><operator pos:line="67" pos:column="46">)<pos:position pos:line="67" pos:column="47"/></operator> <operator pos:line="67" pos:column="48">&gt;<pos:position pos:line="67" pos:column="52"/></operator> <sizeof pos:line="67" pos:column="50">sizeof<argument_list pos:line="67" pos:column="56">(<argument><expr><name pos:line="67" pos:column="57">receive_buffer<pos:position pos:line="67" pos:column="71"/></name></expr></argument>)<pos:position pos:line="67" pos:column="72"/></argument_list></sizeof></expr>)<pos:position pos:line="67" pos:column="73"/></condition><then pos:line="67" pos:column="73"> <block pos:line="67" pos:column="74">{
      <expr_stmt><expr><call><name pos:line="68" pos:column="7">ERROR<pos:position pos:line="68" pos:column="12"/></name><argument_list pos:line="68" pos:column="12">(<argument><expr><literal type="string" pos:line="68" pos:column="13">"ted plugin: read(2) returned invalid value %zi."<pos:position pos:line="68" pos:column="62"/></literal></expr></argument>,
            <argument><expr><name pos:line="69" pos:column="13">receive_buffer_length<pos:position pos:line="69" pos:column="34"/></name></expr></argument>)<pos:position pos:line="69" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="36"/></expr_stmt>
      <return pos:line="70" pos:column="7">return <expr><operator pos:line="70" pos:column="14">(<pos:position pos:line="70" pos:column="15"/></operator><operator pos:line="70" pos:column="15">-<pos:position pos:line="70" pos:column="16"/></operator><literal type="number" pos:line="70" pos:column="16">1<pos:position pos:line="70" pos:column="17"/></literal><operator pos:line="70" pos:column="17">)<pos:position pos:line="70" pos:column="18"/></operator></expr>;<pos:position pos:line="70" pos:column="19"/></return>
    }<pos:position pos:line="71" pos:column="6"/></block></then></if></elseif></if>

    <comment type="block" pos:line="73" pos:column="5">/*
     * packet filter loop
     *
     * Handle escape sequences in `receive_buffer' and put the
     * result in `package_buffer'.
     */</comment>
    <comment type="block" pos:line="79" pos:column="5">/* We need to see the begin sequence first. When we receive `ESCAPE
     * PKT_BEGIN', we set `package_buffer_pos' to zero to signal that
     * the beginning of the package has been found. */</comment>

    <expr_stmt><expr><name pos:line="83" pos:column="5">escape_flag<pos:position pos:line="83" pos:column="16"/></name> <operator pos:line="83" pos:column="17">=<pos:position pos:line="83" pos:column="18"/></operator> <literal type="number" pos:line="83" pos:column="19">0<pos:position pos:line="83" pos:column="20"/></literal></expr>;<pos:position pos:line="83" pos:column="21"/></expr_stmt>
    <for pos:line="84" pos:column="5">for <control pos:line="84" pos:column="9">(<init><decl><type><name pos:line="84" pos:column="10">ssize_t<pos:position pos:line="84" pos:column="17"/></name></type> <name pos:line="84" pos:column="18">i<pos:position pos:line="84" pos:column="19"/></name> <init pos:line="84" pos:column="20">= <expr><literal type="number" pos:line="84" pos:column="22">0<pos:position pos:line="84" pos:column="23"/></literal></expr></init></decl>;<pos:position pos:line="84" pos:column="24"/></init> <condition><expr><name pos:line="84" pos:column="25">i<pos:position pos:line="84" pos:column="26"/></name> <operator pos:line="84" pos:column="27">&lt;<pos:position pos:line="84" pos:column="31"/></operator> <name pos:line="84" pos:column="29">receive_buffer_length<pos:position pos:line="84" pos:column="50"/></name></expr>;<pos:position pos:line="84" pos:column="51"/></condition> <incr><expr><name pos:line="84" pos:column="52">i<pos:position pos:line="84" pos:column="53"/></name><operator pos:line="84" pos:column="53">++<pos:position pos:line="84" pos:column="55"/></operator></expr></incr>)<pos:position pos:line="84" pos:column="56"/></control> <block pos:line="84" pos:column="57">{
      <comment type="block" pos:line="85" pos:column="7">/* Check if previous byte was the escape byte. */</comment>
      <if pos:line="86" pos:column="7">if <condition pos:line="86" pos:column="10">(<expr><name pos:line="86" pos:column="11">escape_flag<pos:position pos:line="86" pos:column="22"/></name> <operator pos:line="86" pos:column="23">==<pos:position pos:line="86" pos:column="25"/></operator> <literal type="number" pos:line="86" pos:column="26">1<pos:position pos:line="86" pos:column="27"/></literal></expr>)<pos:position pos:line="86" pos:column="28"/></condition><then pos:line="86" pos:column="28"> <block pos:line="86" pos:column="29">{
        <expr_stmt><expr><name pos:line="87" pos:column="9">escape_flag<pos:position pos:line="87" pos:column="20"/></name> <operator pos:line="87" pos:column="21">=<pos:position pos:line="87" pos:column="22"/></operator> <literal type="number" pos:line="87" pos:column="23">0<pos:position pos:line="87" pos:column="24"/></literal></expr>;<pos:position pos:line="87" pos:column="25"/></expr_stmt>
        <comment type="block" pos:line="88" pos:column="9">/* escape escape = single escape */</comment>
        <if pos:line="89" pos:column="9">if <condition pos:line="89" pos:column="12">(<expr><operator pos:line="89" pos:column="13">(<pos:position pos:line="89" pos:column="14"/></operator><name><name pos:line="89" pos:column="14">receive_buffer<pos:position pos:line="89" pos:column="28"/></name><index pos:line="89" pos:column="28">[<expr><name pos:line="89" pos:column="29">i<pos:position pos:line="89" pos:column="30"/></name></expr>]<pos:position pos:line="89" pos:column="31"/></index></name> <operator pos:line="89" pos:column="32">==<pos:position pos:line="89" pos:column="34"/></operator> <name pos:line="89" pos:column="35">ESCAPE<pos:position pos:line="89" pos:column="41"/></name><operator pos:line="89" pos:column="41">)<pos:position pos:line="89" pos:column="42"/></operator> <operator pos:line="89" pos:column="43">&amp;&amp;<pos:position pos:line="89" pos:column="53"/></operator> <operator pos:line="89" pos:column="46">(<pos:position pos:line="89" pos:column="47"/></operator><name pos:line="89" pos:column="47">package_buffer_pos<pos:position pos:line="89" pos:column="65"/></name> <operator pos:line="89" pos:column="66">&gt;=<pos:position pos:line="89" pos:column="71"/></operator> <literal type="number" pos:line="89" pos:column="69">0<pos:position pos:line="89" pos:column="70"/></literal><operator pos:line="89" pos:column="70">)<pos:position pos:line="89" pos:column="71"/></operator></expr>)<pos:position pos:line="89" pos:column="72"/></condition><then pos:line="89" pos:column="72"> <block pos:line="89" pos:column="73">{
          <expr_stmt><expr><name><name pos:line="90" pos:column="11">package_buffer<pos:position pos:line="90" pos:column="25"/></name><index pos:line="90" pos:column="25">[<expr><name pos:line="90" pos:column="26">package_buffer_pos<pos:position pos:line="90" pos:column="44"/></name></expr>]<pos:position pos:line="90" pos:column="45"/></index></name> <operator pos:line="90" pos:column="46">=<pos:position pos:line="90" pos:column="47"/></operator> <name pos:line="90" pos:column="48">ESCAPE<pos:position pos:line="90" pos:column="54"/></name></expr>;<pos:position pos:line="90" pos:column="55"/></expr_stmt>
          <expr_stmt><expr><name pos:line="91" pos:column="11">package_buffer_pos<pos:position pos:line="91" pos:column="29"/></name><operator pos:line="91" pos:column="29">++<pos:position pos:line="91" pos:column="31"/></operator></expr>;<pos:position pos:line="91" pos:column="32"/></expr_stmt>
        }<pos:position pos:line="92" pos:column="10"/></block></then> <elseif pos:line="92" pos:column="11">else <if pos:line="92" pos:column="16">if <condition pos:line="92" pos:column="19">(<expr><name><name pos:line="92" pos:column="20">receive_buffer<pos:position pos:line="92" pos:column="34"/></name><index pos:line="92" pos:column="34">[<expr><name pos:line="92" pos:column="35">i<pos:position pos:line="92" pos:column="36"/></name></expr>]<pos:position pos:line="92" pos:column="37"/></index></name> <operator pos:line="92" pos:column="38">==<pos:position pos:line="92" pos:column="40"/></operator> <name pos:line="92" pos:column="41">PKT_BEGIN<pos:position pos:line="92" pos:column="50"/></name></expr>)<pos:position pos:line="92" pos:column="51"/></condition><then pos:line="92" pos:column="51"> <block pos:line="92" pos:column="52">{
          <expr_stmt><expr><name pos:line="93" pos:column="11">package_buffer_pos<pos:position pos:line="93" pos:column="29"/></name> <operator pos:line="93" pos:column="30">=<pos:position pos:line="93" pos:column="31"/></operator> <literal type="number" pos:line="93" pos:column="32">0<pos:position pos:line="93" pos:column="33"/></literal></expr>;<pos:position pos:line="93" pos:column="34"/></expr_stmt>
        }<pos:position pos:line="94" pos:column="10"/></block></then></if></elseif> <elseif pos:line="94" pos:column="11">else <if pos:line="94" pos:column="16">if <condition pos:line="94" pos:column="19">(<expr><name><name pos:line="94" pos:column="20">receive_buffer<pos:position pos:line="94" pos:column="34"/></name><index pos:line="94" pos:column="34">[<expr><name pos:line="94" pos:column="35">i<pos:position pos:line="94" pos:column="36"/></name></expr>]<pos:position pos:line="94" pos:column="37"/></index></name> <operator pos:line="94" pos:column="38">==<pos:position pos:line="94" pos:column="40"/></operator> <name pos:line="94" pos:column="41">PKT_END<pos:position pos:line="94" pos:column="48"/></name></expr>)<pos:position pos:line="94" pos:column="49"/></condition><then pos:line="94" pos:column="49"> <block pos:line="94" pos:column="50">{
          <expr_stmt><expr><name pos:line="95" pos:column="11">end_flag<pos:position pos:line="95" pos:column="19"/></name> <operator pos:line="95" pos:column="20">=<pos:position pos:line="95" pos:column="21"/></operator> <literal type="number" pos:line="95" pos:column="22">1<pos:position pos:line="95" pos:column="23"/></literal></expr>;<pos:position pos:line="95" pos:column="24"/></expr_stmt>
          <break pos:line="96" pos:column="11">break;<pos:position pos:line="96" pos:column="17"/></break>
        }<pos:position pos:line="97" pos:column="10"/></block></then></if></elseif> <else pos:line="97" pos:column="11">else <block pos:line="97" pos:column="16">{
          <expr_stmt><expr><call><name pos:line="98" pos:column="11">DEBUG<pos:position pos:line="98" pos:column="16"/></name><argument_list pos:line="98" pos:column="16">(<argument><expr><literal type="string" pos:line="98" pos:column="17">"ted plugin: Unknown escaped byte: %#x"<pos:position pos:line="98" pos:column="56"/></literal></expr></argument>,
                <argument><expr><operator pos:line="99" pos:column="17">(<pos:position pos:line="99" pos:column="18"/></operator><name pos:line="99" pos:column="18">unsigned<pos:position pos:line="99" pos:column="26"/></name> <name pos:line="99" pos:column="27">int<pos:position pos:line="99" pos:column="30"/></name><operator pos:line="99" pos:column="30">)<pos:position pos:line="99" pos:column="31"/></operator><name><name pos:line="99" pos:column="31">receive_buffer<pos:position pos:line="99" pos:column="45"/></name><index pos:line="99" pos:column="45">[<expr><name pos:line="99" pos:column="46">i<pos:position pos:line="99" pos:column="47"/></name></expr>]<pos:position pos:line="99" pos:column="48"/></index></name></expr></argument>)<pos:position pos:line="99" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="99" pos:column="50"/></expr_stmt>
        }<pos:position pos:line="100" pos:column="10"/></block></else></if>
      }<pos:position pos:line="101" pos:column="8"/></block></then> <elseif pos:line="101" pos:column="9">else <if pos:line="101" pos:column="14">if <condition pos:line="101" pos:column="17">(<expr><name><name pos:line="101" pos:column="18">receive_buffer<pos:position pos:line="101" pos:column="32"/></name><index pos:line="101" pos:column="32">[<expr><name pos:line="101" pos:column="33">i<pos:position pos:line="101" pos:column="34"/></name></expr>]<pos:position pos:line="101" pos:column="35"/></index></name> <operator pos:line="101" pos:column="36">==<pos:position pos:line="101" pos:column="38"/></operator> <name pos:line="101" pos:column="39">ESCAPE<pos:position pos:line="101" pos:column="45"/></name></expr>)<pos:position pos:line="101" pos:column="46"/></condition><then pos:line="101" pos:column="46"> <block pos:line="101" pos:column="47">{
        <expr_stmt><expr><name pos:line="102" pos:column="9">escape_flag<pos:position pos:line="102" pos:column="20"/></name> <operator pos:line="102" pos:column="21">=<pos:position pos:line="102" pos:column="22"/></operator> <literal type="number" pos:line="102" pos:column="23">1<pos:position pos:line="102" pos:column="24"/></literal></expr>;<pos:position pos:line="102" pos:column="25"/></expr_stmt>
      }<pos:position pos:line="103" pos:column="8"/></block></then></if></elseif>
      <comment type="block" pos:line="104" pos:column="7">/* if we are in a package add byte to buffer
       * otherwise throw away */</comment>
      <elseif pos:line="106" pos:column="7">else <if pos:line="106" pos:column="12">if <condition pos:line="106" pos:column="15">(<expr><name pos:line="106" pos:column="16">package_buffer_pos<pos:position pos:line="106" pos:column="34"/></name> <operator pos:line="106" pos:column="35">&gt;=<pos:position pos:line="106" pos:column="40"/></operator> <literal type="number" pos:line="106" pos:column="38">0<pos:position pos:line="106" pos:column="39"/></literal></expr>)<pos:position pos:line="106" pos:column="40"/></condition><then pos:line="106" pos:column="40"> <block pos:line="106" pos:column="41">{
        <expr_stmt><expr><name><name pos:line="107" pos:column="9">package_buffer<pos:position pos:line="107" pos:column="23"/></name><index pos:line="107" pos:column="23">[<expr><name pos:line="107" pos:column="24">package_buffer_pos<pos:position pos:line="107" pos:column="42"/></name></expr>]<pos:position pos:line="107" pos:column="43"/></index></name> <operator pos:line="107" pos:column="44">=<pos:position pos:line="107" pos:column="45"/></operator> <name><name pos:line="107" pos:column="46">receive_buffer<pos:position pos:line="107" pos:column="60"/></name><index pos:line="107" pos:column="60">[<expr><name pos:line="107" pos:column="61">i<pos:position pos:line="107" pos:column="62"/></name></expr>]<pos:position pos:line="107" pos:column="63"/></index></name></expr>;<pos:position pos:line="107" pos:column="64"/></expr_stmt>
        <expr_stmt><expr><name pos:line="108" pos:column="9">package_buffer_pos<pos:position pos:line="108" pos:column="27"/></name><operator pos:line="108" pos:column="27">++<pos:position pos:line="108" pos:column="29"/></operator></expr>;<pos:position pos:line="108" pos:column="30"/></expr_stmt>
      }<pos:position pos:line="109" pos:column="8"/></block></then></if></elseif></if>
    }<pos:position pos:line="110" pos:column="6"/></block></for> <comment type="block" pos:line="110" pos:column="7">/* for (i = 0; i &lt; receive_buffer_length; i++) */</comment>
  }<pos:position pos:line="111" pos:column="4"/></block></while>   <comment type="block" pos:line="111" pos:column="7">/* while (end_flag == 0) */</comment>

  <comment type="block" pos:line="113" pos:column="3">/* Check for errors inside the loop. */</comment>
  <if pos:line="114" pos:column="3">if <condition pos:line="114" pos:column="6">(<expr><operator pos:line="114" pos:column="7">(<pos:position pos:line="114" pos:column="8"/></operator><name pos:line="114" pos:column="8">end_flag<pos:position pos:line="114" pos:column="16"/></name> <operator pos:line="114" pos:column="17">==<pos:position pos:line="114" pos:column="19"/></operator> <literal type="number" pos:line="114" pos:column="20">0<pos:position pos:line="114" pos:column="21"/></literal><operator pos:line="114" pos:column="21">)<pos:position pos:line="114" pos:column="22"/></operator> <operator pos:line="114" pos:column="23">||<pos:position pos:line="114" pos:column="25"/></operator> <operator pos:line="114" pos:column="26">(<pos:position pos:line="114" pos:column="27"/></operator><name pos:line="114" pos:column="27">package_buffer_pos<pos:position pos:line="114" pos:column="45"/></name> <operator pos:line="114" pos:column="46">!=<pos:position pos:line="114" pos:column="48"/></operator> <name pos:line="114" pos:column="49">EXPECTED_PACKAGE_LENGTH<pos:position pos:line="114" pos:column="72"/></name><operator pos:line="114" pos:column="72">)<pos:position pos:line="114" pos:column="73"/></operator></expr>)<pos:position pos:line="114" pos:column="74"/></condition><then pos:line="114" pos:column="74">
    <block type="pseudo"><return pos:line="115" pos:column="5">return <expr><operator pos:line="115" pos:column="12">(<pos:position pos:line="115" pos:column="13"/></operator><operator pos:line="115" pos:column="13">-<pos:position pos:line="115" pos:column="14"/></operator><literal type="number" pos:line="115" pos:column="14">1<pos:position pos:line="115" pos:column="15"/></literal><operator pos:line="115" pos:column="15">)<pos:position pos:line="115" pos:column="16"/></operator></expr>;<pos:position pos:line="115" pos:column="17"/></return></block></then></if>

  <comment type="block" pos:line="117" pos:column="3">/*
   * Power is at positions 247 and 248 (LSB first) in [10kW].
   * Voltage is at positions 251 and 252 (LSB first) in [.1V].
   *
   * Power is in 10 Watt steps
   * Voltage is in volts
   */</comment>
  <expr_stmt><expr><operator pos:line="124" pos:column="3">*<pos:position pos:line="124" pos:column="4"/></operator><name pos:line="124" pos:column="4">ret_power<pos:position pos:line="124" pos:column="13"/></name> <operator pos:line="124" pos:column="14">=<pos:position pos:line="124" pos:column="15"/></operator> <literal type="number" pos:line="124" pos:column="16">10.0<pos:position pos:line="124" pos:column="20"/></literal> <operator pos:line="124" pos:column="21">*<pos:position pos:line="124" pos:column="22"/></operator> <call pos:line="124" pos:column="23">(<name pos:line="124" pos:column="24">double<pos:position pos:line="124" pos:column="30"/></name>)<argument_list pos:line="124" pos:column="31">(<argument><expr><operator pos:line="124" pos:column="32">(<pos:position pos:line="124" pos:column="33"/></operator><operator pos:line="124" pos:column="33">(<pos:position pos:line="124" pos:column="34"/></operator><operator pos:line="124" pos:column="34">(<pos:position pos:line="124" pos:column="35"/></operator><name pos:line="124" pos:column="35">int<pos:position pos:line="124" pos:column="38"/></name><operator pos:line="124" pos:column="38">)<pos:position pos:line="124" pos:column="39"/></operator><name><name pos:line="124" pos:column="39">package_buffer<pos:position pos:line="124" pos:column="53"/></name><index pos:line="124" pos:column="53">[<expr><literal type="number" pos:line="124" pos:column="54">248<pos:position pos:line="124" pos:column="57"/></literal></expr>]<pos:position pos:line="124" pos:column="58"/></index></name><operator pos:line="124" pos:column="58">)<pos:position pos:line="124" pos:column="59"/></operator> <operator pos:line="124" pos:column="60">*<pos:position pos:line="124" pos:column="61"/></operator> <literal type="number" pos:line="124" pos:column="62">256<pos:position pos:line="124" pos:column="65"/></literal><operator pos:line="124" pos:column="65">)<pos:position pos:line="124" pos:column="66"/></operator> <operator pos:line="124" pos:column="67">+<pos:position pos:line="124" pos:column="68"/></operator>
                               <operator pos:line="125" pos:column="32">(<pos:position pos:line="125" pos:column="33"/></operator><operator pos:line="125" pos:column="33">(<pos:position pos:line="125" pos:column="34"/></operator><name pos:line="125" pos:column="34">int<pos:position pos:line="125" pos:column="37"/></name><operator pos:line="125" pos:column="37">)<pos:position pos:line="125" pos:column="38"/></operator><name><name pos:line="125" pos:column="38">package_buffer<pos:position pos:line="125" pos:column="52"/></name><index pos:line="125" pos:column="52">[<expr><literal type="number" pos:line="125" pos:column="53">247<pos:position pos:line="125" pos:column="56"/></literal></expr>]<pos:position pos:line="125" pos:column="57"/></index></name><operator pos:line="125" pos:column="57">)<pos:position pos:line="125" pos:column="58"/></operator></expr></argument>)<pos:position pos:line="125" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="125" pos:column="60"/></expr_stmt>
  <expr_stmt><expr><operator pos:line="126" pos:column="3">*<pos:position pos:line="126" pos:column="4"/></operator><name pos:line="126" pos:column="4">ret_voltage<pos:position pos:line="126" pos:column="15"/></name> <operator pos:line="126" pos:column="16">=<pos:position pos:line="126" pos:column="17"/></operator> <literal type="number" pos:line="126" pos:column="18">0.1<pos:position pos:line="126" pos:column="21"/></literal> <operator pos:line="126" pos:column="22">*<pos:position pos:line="126" pos:column="23"/></operator> <call pos:line="126" pos:column="24">(<name pos:line="126" pos:column="25">double<pos:position pos:line="126" pos:column="31"/></name>)<argument_list pos:line="126" pos:column="32">(<argument><expr><operator pos:line="126" pos:column="33">(<pos:position pos:line="126" pos:column="34"/></operator><operator pos:line="126" pos:column="34">(<pos:position pos:line="126" pos:column="35"/></operator><operator pos:line="126" pos:column="35">(<pos:position pos:line="126" pos:column="36"/></operator><name pos:line="126" pos:column="36">int<pos:position pos:line="126" pos:column="39"/></name><operator pos:line="126" pos:column="39">)<pos:position pos:line="126" pos:column="40"/></operator><name><name pos:line="126" pos:column="40">package_buffer<pos:position pos:line="126" pos:column="54"/></name><index pos:line="126" pos:column="54">[<expr><literal type="number" pos:line="126" pos:column="55">252<pos:position pos:line="126" pos:column="58"/></literal></expr>]<pos:position pos:line="126" pos:column="59"/></index></name><operator pos:line="126" pos:column="59">)<pos:position pos:line="126" pos:column="60"/></operator> <operator pos:line="126" pos:column="61">*<pos:position pos:line="126" pos:column="62"/></operator> <literal type="number" pos:line="126" pos:column="63">256<pos:position pos:line="126" pos:column="66"/></literal><operator pos:line="126" pos:column="66">)<pos:position pos:line="126" pos:column="67"/></operator> <operator pos:line="126" pos:column="68">+<pos:position pos:line="126" pos:column="69"/></operator>
                                <operator pos:line="127" pos:column="33">(<pos:position pos:line="127" pos:column="34"/></operator><operator pos:line="127" pos:column="34">(<pos:position pos:line="127" pos:column="35"/></operator><name pos:line="127" pos:column="35">int<pos:position pos:line="127" pos:column="38"/></name><operator pos:line="127" pos:column="38">)<pos:position pos:line="127" pos:column="39"/></operator><name><name pos:line="127" pos:column="39">package_buffer<pos:position pos:line="127" pos:column="53"/></name><index pos:line="127" pos:column="53">[<expr><literal type="number" pos:line="127" pos:column="54">251<pos:position pos:line="127" pos:column="57"/></literal></expr>]<pos:position pos:line="127" pos:column="58"/></index></name><operator pos:line="127" pos:column="58">)<pos:position pos:line="127" pos:column="59"/></operator></expr></argument>)<pos:position pos:line="127" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="127" pos:column="61"/></expr_stmt>

  <comment type="block" pos:line="129" pos:column="3">/* success */</comment>
  <return pos:line="130" pos:column="3">return <expr><operator pos:line="130" pos:column="10">(<pos:position pos:line="130" pos:column="11"/></operator><literal type="number" pos:line="130" pos:column="11">0<pos:position pos:line="130" pos:column="12"/></literal><operator pos:line="130" pos:column="12">)<pos:position pos:line="130" pos:column="13"/></operator></expr>;<pos:position pos:line="130" pos:column="14"/></return>
}<pos:position pos:line="131" pos:column="2"/></block></function></unit>
