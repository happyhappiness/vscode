<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_59_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">flush<pos:position pos:line="1" pos:column="17"/></name><parameter_list pos:line="1" pos:column="17">(<parameter><decl><type><name pos:line="1" pos:column="18">lcc_connection_t<pos:position pos:line="1" pos:column="34"/></name> <modifier pos:line="1" pos:column="35">*<pos:position pos:line="1" pos:column="36"/></modifier></type><name pos:line="1" pos:column="36">c<pos:position pos:line="1" pos:column="37"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="39">int<pos:position pos:line="1" pos:column="42"/></name></type> <name pos:line="1" pos:column="43">argc<pos:position pos:line="1" pos:column="47"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="49">char<pos:position pos:line="1" pos:column="53"/></name> <modifier pos:line="1" pos:column="54">*<pos:position pos:line="1" pos:column="55"/></modifier><modifier pos:line="1" pos:column="55">*<pos:position pos:line="1" pos:column="56"/></modifier></type><name pos:line="1" pos:column="56">argv<pos:position pos:line="1" pos:column="60"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="61"/></parameter_list> <block pos:line="1" pos:column="62">{
  <decl_stmt><decl><type><name pos:line="2" pos:column="3">int<pos:position pos:line="2" pos:column="6"/></name></type> <name pos:line="2" pos:column="7">timeout<pos:position pos:line="2" pos:column="14"/></name> <init pos:line="2" pos:column="15">= <expr><operator pos:line="2" pos:column="17">-<pos:position pos:line="2" pos:column="18"/></operator><literal type="number" pos:line="2" pos:column="18">1<pos:position pos:line="2" pos:column="19"/></literal></expr></init></decl>;<pos:position pos:line="2" pos:column="20"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="4" pos:column="3">lcc_identifier_t<pos:position pos:line="4" pos:column="19"/></name> <modifier pos:line="4" pos:column="20">*<pos:position pos:line="4" pos:column="21"/></modifier></type><name pos:line="4" pos:column="21">identifiers<pos:position pos:line="4" pos:column="32"/></name> <init pos:line="4" pos:column="33">= <expr><name pos:line="4" pos:column="35">NULL<pos:position pos:line="4" pos:column="39"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="40"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">size_t<pos:position pos:line="5" pos:column="9"/></name></type> <name pos:line="5" pos:column="10">identifiers_num<pos:position pos:line="5" pos:column="25"/></name> <init pos:line="5" pos:column="26">= <expr><literal type="number" pos:line="5" pos:column="28">0<pos:position pos:line="5" pos:column="29"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="30"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="7" pos:column="3">char<pos:position pos:line="7" pos:column="7"/></name> <modifier pos:line="7" pos:column="8">*<pos:position pos:line="7" pos:column="9"/></modifier><modifier pos:line="7" pos:column="9">*<pos:position pos:line="7" pos:column="10"/></modifier></type><name pos:line="7" pos:column="10">plugins<pos:position pos:line="7" pos:column="17"/></name> <init pos:line="7" pos:column="18">= <expr><name pos:line="7" pos:column="20">NULL<pos:position pos:line="7" pos:column="24"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="25"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">size_t<pos:position pos:line="8" pos:column="9"/></name></type> <name pos:line="8" pos:column="10">plugins_num<pos:position pos:line="8" pos:column="21"/></name> <init pos:line="8" pos:column="22">= <expr><literal type="number" pos:line="8" pos:column="24">0<pos:position pos:line="8" pos:column="25"/></literal></expr></init></decl>;<pos:position pos:line="8" pos:column="26"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="10" pos:column="3">int<pos:position pos:line="10" pos:column="6"/></name></type> <name pos:line="10" pos:column="7">status<pos:position pos:line="10" pos:column="13"/></name></decl>;<pos:position pos:line="10" pos:column="14"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="12" pos:column="3">assert<pos:position pos:line="12" pos:column="9"/></name><argument_list pos:line="12" pos:column="9">(<argument><expr><call><name pos:line="12" pos:column="10">strcasecmp<pos:position pos:line="12" pos:column="20"/></name><argument_list pos:line="12" pos:column="20">(<argument><expr><name><name pos:line="12" pos:column="21">argv<pos:position pos:line="12" pos:column="25"/></name><index pos:line="12" pos:column="25">[<expr><literal type="number" pos:line="12" pos:column="26">0<pos:position pos:line="12" pos:column="27"/></literal></expr>]<pos:position pos:line="12" pos:column="28"/></index></name></expr></argument>, <argument><expr><literal type="string" pos:line="12" pos:column="30">"flush"<pos:position pos:line="12" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="38"/></argument_list></call> <operator pos:line="12" pos:column="39">==<pos:position pos:line="12" pos:column="41"/></operator> <literal type="number" pos:line="12" pos:column="42">0<pos:position pos:line="12" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="45"/></expr_stmt>

<cpp:define pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">define<pos:position pos:line="14" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="14" pos:column="9">BAIL_OUT<pos:position pos:line="14" pos:column="17"/></name><parameter_list pos:line="14" pos:column="17">(<parameter><type><name pos:line="14" pos:column="18">s<pos:position pos:line="14" pos:column="19"/></name></type></parameter>)<pos:position pos:line="14" pos:column="20"/></parameter_list></cpp:macro>                                                            \
  <cpp:value pos:line="15" pos:column="3">do {                                                                         \
    if (identifiers != NULL)                                                   \
      free(identifiers);                                                       \
    identifiers_num = 0;                                                       \
    if (plugins != NULL)                                                       \
      free(plugins);                                                           \
    plugins_num = 0;                                                           \
    return s;                                                                  \
  } while (0)<pos:position pos:line="23" pos:column="14"/></cpp:value></cpp:define>

  <for pos:line="25" pos:column="3">for <control pos:line="25" pos:column="7">(<init><decl><type><name pos:line="25" pos:column="8">int<pos:position pos:line="25" pos:column="11"/></name></type> <name pos:line="25" pos:column="12">i<pos:position pos:line="25" pos:column="13"/></name> <init pos:line="25" pos:column="14">= <expr><literal type="number" pos:line="25" pos:column="16">1<pos:position pos:line="25" pos:column="17"/></literal></expr></init></decl>;<pos:position pos:line="25" pos:column="18"/></init> <condition><expr><name pos:line="25" pos:column="19">i<pos:position pos:line="25" pos:column="20"/></name> <operator pos:line="25" pos:column="21">&lt;<pos:position pos:line="25" pos:column="25"/></operator> <name pos:line="25" pos:column="23">argc<pos:position pos:line="25" pos:column="27"/></name></expr>;<pos:position pos:line="25" pos:column="28"/></condition> <incr><expr><operator pos:line="25" pos:column="29">++<pos:position pos:line="25" pos:column="31"/></operator><name pos:line="25" pos:column="31">i<pos:position pos:line="25" pos:column="32"/></name></expr></incr>)<pos:position pos:line="25" pos:column="33"/></control> <block pos:line="25" pos:column="34">{
    <decl_stmt><decl><type><name pos:line="26" pos:column="5">char<pos:position pos:line="26" pos:column="9"/></name> <modifier pos:line="26" pos:column="10">*<pos:position pos:line="26" pos:column="11"/></modifier></type><name pos:line="26" pos:column="11">key<pos:position pos:line="26" pos:column="14"/></name></decl>, <modifier pos:line="26" pos:column="16">*<pos:position pos:line="26" pos:column="17"/></modifier><decl><type ref="prev"/><name pos:line="26" pos:column="17">value<pos:position pos:line="26" pos:column="22"/></name></decl>;<pos:position pos:line="26" pos:column="23"/></decl_stmt>

    <expr_stmt><expr><name pos:line="28" pos:column="5">key<pos:position pos:line="28" pos:column="8"/></name> <operator pos:line="28" pos:column="9">=<pos:position pos:line="28" pos:column="10"/></operator> <name><name pos:line="28" pos:column="11">argv<pos:position pos:line="28" pos:column="15"/></name><index pos:line="28" pos:column="15">[<expr><name pos:line="28" pos:column="16">i<pos:position pos:line="28" pos:column="17"/></name></expr>]<pos:position pos:line="28" pos:column="18"/></index></name></expr>;<pos:position pos:line="28" pos:column="19"/></expr_stmt>
    <expr_stmt><expr><name pos:line="29" pos:column="5">value<pos:position pos:line="29" pos:column="10"/></name> <operator pos:line="29" pos:column="11">=<pos:position pos:line="29" pos:column="12"/></operator> <call><name pos:line="29" pos:column="13">strchr<pos:position pos:line="29" pos:column="19"/></name><argument_list pos:line="29" pos:column="19">(<argument><expr><name><name pos:line="29" pos:column="20">argv<pos:position pos:line="29" pos:column="24"/></name><index pos:line="29" pos:column="24">[<expr><name pos:line="29" pos:column="25">i<pos:position pos:line="29" pos:column="26"/></name></expr>]<pos:position pos:line="29" pos:column="27"/></index></name></expr></argument>, <argument><expr><operator pos:line="29" pos:column="29">(<pos:position pos:line="29" pos:column="30"/></operator><name pos:line="29" pos:column="30">int<pos:position pos:line="29" pos:column="33"/></name><operator pos:line="29" pos:column="33">)<pos:position pos:line="29" pos:column="34"/></operator><literal type="char" pos:line="29" pos:column="34">'='<pos:position pos:line="29" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="39"/></expr_stmt>

    <if pos:line="31" pos:column="5">if <condition pos:line="31" pos:column="8">(<expr><operator pos:line="31" pos:column="9">!<pos:position pos:line="31" pos:column="10"/></operator><name pos:line="31" pos:column="10">value<pos:position pos:line="31" pos:column="15"/></name></expr>)<pos:position pos:line="31" pos:column="16"/></condition><then pos:line="31" pos:column="16"> <block pos:line="31" pos:column="17">{
      <expr_stmt><expr><call><name pos:line="32" pos:column="7">fprintf<pos:position pos:line="32" pos:column="14"/></name><argument_list pos:line="32" pos:column="14">(<argument><expr><name pos:line="32" pos:column="15">stderr<pos:position pos:line="32" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="32" pos:column="23">"ERROR: flush: Invalid option ``%s''.\n"<pos:position pos:line="32" pos:column="63"/></literal></expr></argument>, <argument><expr><name><name pos:line="32" pos:column="65">argv<pos:position pos:line="32" pos:column="69"/></name><index pos:line="32" pos:column="69">[<expr><name pos:line="32" pos:column="70">i<pos:position pos:line="32" pos:column="71"/></name></expr>]<pos:position pos:line="32" pos:column="72"/></index></name></expr></argument>)<pos:position pos:line="32" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="74"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="33" pos:column="7">BAIL_OUT<pos:position pos:line="33" pos:column="15"/></name><argument_list pos:line="33" pos:column="15">(<argument><expr><operator pos:line="33" pos:column="16">-<pos:position pos:line="33" pos:column="17"/></operator><literal type="number" pos:line="33" pos:column="17">1<pos:position pos:line="33" pos:column="18"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="20"/></expr_stmt>
    }<pos:position pos:line="34" pos:column="6"/></block></then></if>

    <expr_stmt><expr><operator pos:line="36" pos:column="5">*<pos:position pos:line="36" pos:column="6"/></operator><name pos:line="36" pos:column="6">value<pos:position pos:line="36" pos:column="11"/></name> <operator pos:line="36" pos:column="12">=<pos:position pos:line="36" pos:column="13"/></operator> <literal type="char" pos:line="36" pos:column="14">'\0'<pos:position pos:line="36" pos:column="18"/></literal></expr>;<pos:position pos:line="36" pos:column="19"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="37" pos:column="5">++<pos:position pos:line="37" pos:column="7"/></operator><name pos:line="37" pos:column="7">value<pos:position pos:line="37" pos:column="12"/></name></expr>;<pos:position pos:line="37" pos:column="13"/></expr_stmt>

    <if pos:line="39" pos:column="5">if <condition pos:line="39" pos:column="8">(<expr><call><name pos:line="39" pos:column="9">strcasecmp<pos:position pos:line="39" pos:column="19"/></name><argument_list pos:line="39" pos:column="19">(<argument><expr><name pos:line="39" pos:column="20">key<pos:position pos:line="39" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="39" pos:column="25">"timeout"<pos:position pos:line="39" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="39" pos:column="35"/></argument_list></call> <operator pos:line="39" pos:column="36">==<pos:position pos:line="39" pos:column="38"/></operator> <literal type="number" pos:line="39" pos:column="39">0<pos:position pos:line="39" pos:column="40"/></literal></expr>)<pos:position pos:line="39" pos:column="41"/></condition><then pos:line="39" pos:column="41"> <block pos:line="39" pos:column="42">{
      <decl_stmt><decl><type><name pos:line="40" pos:column="7">char<pos:position pos:line="40" pos:column="11"/></name> <modifier pos:line="40" pos:column="12">*<pos:position pos:line="40" pos:column="13"/></modifier></type><name pos:line="40" pos:column="13">endptr<pos:position pos:line="40" pos:column="19"/></name> <init pos:line="40" pos:column="20">= <expr><name pos:line="40" pos:column="22">NULL<pos:position pos:line="40" pos:column="26"/></name></expr></init></decl>;<pos:position pos:line="40" pos:column="27"/></decl_stmt>

      <expr_stmt><expr><name pos:line="42" pos:column="7">timeout<pos:position pos:line="42" pos:column="14"/></name> <operator pos:line="42" pos:column="15">=<pos:position pos:line="42" pos:column="16"/></operator> <operator pos:line="42" pos:column="17">(<pos:position pos:line="42" pos:column="18"/></operator><name pos:line="42" pos:column="18">int<pos:position pos:line="42" pos:column="21"/></name><operator pos:line="42" pos:column="21">)<pos:position pos:line="42" pos:column="22"/></operator><call><name pos:line="42" pos:column="22">strtol<pos:position pos:line="42" pos:column="28"/></name><argument_list pos:line="42" pos:column="28">(<argument><expr><name pos:line="42" pos:column="29">value<pos:position pos:line="42" pos:column="34"/></name></expr></argument>, <argument><expr><operator pos:line="42" pos:column="36">&amp;<pos:position pos:line="42" pos:column="41"/></operator><name pos:line="42" pos:column="37">endptr<pos:position pos:line="42" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="42" pos:column="45">0<pos:position pos:line="42" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="42" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="48"/></expr_stmt>

      <if pos:line="44" pos:column="7">if <condition pos:line="44" pos:column="10">(<expr><name pos:line="44" pos:column="11">endptr<pos:position pos:line="44" pos:column="17"/></name> <operator pos:line="44" pos:column="18">==<pos:position pos:line="44" pos:column="20"/></operator> <name pos:line="44" pos:column="21">value<pos:position pos:line="44" pos:column="26"/></name></expr>)<pos:position pos:line="44" pos:column="27"/></condition><then pos:line="44" pos:column="27"> <block pos:line="44" pos:column="28">{
        <expr_stmt><expr><call><name pos:line="45" pos:column="9">fprintf<pos:position pos:line="45" pos:column="16"/></name><argument_list pos:line="45" pos:column="16">(<argument><expr><name pos:line="45" pos:column="17">stderr<pos:position pos:line="45" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="45" pos:column="25">"ERROR: Failed to parse timeout as number: %s.\n"<pos:position pos:line="45" pos:column="74"/></literal></expr></argument>,
                <argument><expr><name pos:line="46" pos:column="17">value<pos:position pos:line="46" pos:column="22"/></name></expr></argument>)<pos:position pos:line="46" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="24"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="47" pos:column="9">BAIL_OUT<pos:position pos:line="47" pos:column="17"/></name><argument_list pos:line="47" pos:column="17">(<argument><expr><operator pos:line="47" pos:column="18">-<pos:position pos:line="47" pos:column="19"/></operator><literal type="number" pos:line="47" pos:column="19">1<pos:position pos:line="47" pos:column="20"/></literal></expr></argument>)<pos:position pos:line="47" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="22"/></expr_stmt>
      }<pos:position pos:line="48" pos:column="8"/></block></then> <elseif pos:line="48" pos:column="9">else <if pos:line="48" pos:column="14">if <condition pos:line="48" pos:column="17">(<expr><operator pos:line="48" pos:column="18">(<pos:position pos:line="48" pos:column="19"/></operator><name pos:line="48" pos:column="19">endptr<pos:position pos:line="48" pos:column="25"/></name> <operator pos:line="48" pos:column="26">!=<pos:position pos:line="48" pos:column="28"/></operator> <name pos:line="48" pos:column="29">NULL<pos:position pos:line="48" pos:column="33"/></name><operator pos:line="48" pos:column="33">)<pos:position pos:line="48" pos:column="34"/></operator> <operator pos:line="48" pos:column="35">&amp;&amp;<pos:position pos:line="48" pos:column="45"/></operator> <operator pos:line="48" pos:column="38">(<pos:position pos:line="48" pos:column="39"/></operator><operator pos:line="48" pos:column="39">*<pos:position pos:line="48" pos:column="40"/></operator><name pos:line="48" pos:column="40">endptr<pos:position pos:line="48" pos:column="46"/></name> <operator pos:line="48" pos:column="47">!=<pos:position pos:line="48" pos:column="49"/></operator> <literal type="char" pos:line="48" pos:column="50">'\0'<pos:position pos:line="48" pos:column="54"/></literal><operator pos:line="48" pos:column="54">)<pos:position pos:line="48" pos:column="55"/></operator></expr>)<pos:position pos:line="48" pos:column="56"/></condition><then pos:line="48" pos:column="56"> <block pos:line="48" pos:column="57">{
        <expr_stmt><expr><call><name pos:line="49" pos:column="9">fprintf<pos:position pos:line="49" pos:column="16"/></name><argument_list pos:line="49" pos:column="16">(<argument><expr><name pos:line="49" pos:column="17">stderr<pos:position pos:line="49" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="49" pos:column="25">"WARNING: Ignoring trailing garbage after timeout: "<pos:position pos:line="49" pos:column="77"/></literal>
                        <literal type="string" pos:line="50" pos:column="25">"%s.\n"<pos:position pos:line="50" pos:column="32"/></literal></expr></argument>,
                <argument><expr><name pos:line="51" pos:column="17">endptr<pos:position pos:line="51" pos:column="23"/></name></expr></argument>)<pos:position pos:line="51" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="25"/></expr_stmt>
      }<pos:position pos:line="52" pos:column="8"/></block></then></if></elseif></if>
    }<pos:position pos:line="53" pos:column="6"/></block></then> <elseif pos:line="53" pos:column="7">else <if pos:line="53" pos:column="12">if <condition pos:line="53" pos:column="15">(<expr><call><name pos:line="53" pos:column="16">strcasecmp<pos:position pos:line="53" pos:column="26"/></name><argument_list pos:line="53" pos:column="26">(<argument><expr><name pos:line="53" pos:column="27">key<pos:position pos:line="53" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="53" pos:column="32">"plugin"<pos:position pos:line="53" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="53" pos:column="41"/></argument_list></call> <operator pos:line="53" pos:column="42">==<pos:position pos:line="53" pos:column="44"/></operator> <literal type="number" pos:line="53" pos:column="45">0<pos:position pos:line="53" pos:column="46"/></literal></expr>)<pos:position pos:line="53" pos:column="47"/></condition><then pos:line="53" pos:column="47"> <block pos:line="53" pos:column="48">{
      <expr_stmt><expr><name pos:line="54" pos:column="7">status<pos:position pos:line="54" pos:column="13"/></name> <operator pos:line="54" pos:column="14">=<pos:position pos:line="54" pos:column="15"/></operator> <call><name pos:line="54" pos:column="16">array_grow<pos:position pos:line="54" pos:column="26"/></name><argument_list pos:line="54" pos:column="26">(<argument><expr><operator pos:line="54" pos:column="27">(<pos:position pos:line="54" pos:column="28"/></operator><name pos:line="54" pos:column="28">void<pos:position pos:line="54" pos:column="32"/></name> <operator pos:line="54" pos:column="33">*<pos:position pos:line="54" pos:column="34"/></operator><operator pos:line="54" pos:column="34">)<pos:position pos:line="54" pos:column="35"/></operator><operator pos:line="54" pos:column="35">&amp;<pos:position pos:line="54" pos:column="40"/></operator><name pos:line="54" pos:column="36">plugins<pos:position pos:line="54" pos:column="43"/></name></expr></argument>, <argument><expr><operator pos:line="54" pos:column="45">&amp;<pos:position pos:line="54" pos:column="50"/></operator><name pos:line="54" pos:column="46">plugins_num<pos:position pos:line="54" pos:column="57"/></name></expr></argument>, <argument><expr><sizeof pos:line="54" pos:column="59">sizeof<argument_list pos:line="54" pos:column="65">(<argument><expr><operator pos:line="54" pos:column="66">*<pos:position pos:line="54" pos:column="67"/></operator><name pos:line="54" pos:column="67">plugins<pos:position pos:line="54" pos:column="74"/></name></expr></argument>)<pos:position pos:line="54" pos:column="75"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="54" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="77"/></expr_stmt>
      <if pos:line="55" pos:column="7">if <condition pos:line="55" pos:column="10">(<expr><name pos:line="55" pos:column="11">status<pos:position pos:line="55" pos:column="17"/></name> <operator pos:line="55" pos:column="18">!=<pos:position pos:line="55" pos:column="20"/></operator> <literal type="number" pos:line="55" pos:column="21">0<pos:position pos:line="55" pos:column="22"/></literal></expr>)<pos:position pos:line="55" pos:column="23"/></condition><then pos:line="55" pos:column="23">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="56" pos:column="9">BAIL_OUT<pos:position pos:line="56" pos:column="17"/></name><argument_list pos:line="56" pos:column="17">(<argument><expr><name pos:line="56" pos:column="18">status<pos:position pos:line="56" pos:column="24"/></name></expr></argument>)<pos:position pos:line="56" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="26"/></expr_stmt></block></then></if>

      <expr_stmt><expr><name><name pos:line="58" pos:column="7">plugins<pos:position pos:line="58" pos:column="14"/></name><index pos:line="58" pos:column="14">[<expr><name pos:line="58" pos:column="15">plugins_num<pos:position pos:line="58" pos:column="26"/></name> <operator pos:line="58" pos:column="27">-<pos:position pos:line="58" pos:column="28"/></operator> <literal type="number" pos:line="58" pos:column="29">1<pos:position pos:line="58" pos:column="30"/></literal></expr>]<pos:position pos:line="58" pos:column="31"/></index></name> <operator pos:line="58" pos:column="32">=<pos:position pos:line="58" pos:column="33"/></operator> <name pos:line="58" pos:column="34">value<pos:position pos:line="58" pos:column="39"/></name></expr>;<pos:position pos:line="58" pos:column="40"/></expr_stmt>
    }<pos:position pos:line="59" pos:column="6"/></block></then></if></elseif> <elseif pos:line="59" pos:column="7">else <if pos:line="59" pos:column="12">if <condition pos:line="59" pos:column="15">(<expr><call><name pos:line="59" pos:column="16">strcasecmp<pos:position pos:line="59" pos:column="26"/></name><argument_list pos:line="59" pos:column="26">(<argument><expr><name pos:line="59" pos:column="27">key<pos:position pos:line="59" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="59" pos:column="32">"identifier"<pos:position pos:line="59" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="59" pos:column="45"/></argument_list></call> <operator pos:line="59" pos:column="46">==<pos:position pos:line="59" pos:column="48"/></operator> <literal type="number" pos:line="59" pos:column="49">0<pos:position pos:line="59" pos:column="50"/></literal></expr>)<pos:position pos:line="59" pos:column="51"/></condition><then pos:line="59" pos:column="51"> <block pos:line="59" pos:column="52">{
      <expr_stmt><expr><name pos:line="60" pos:column="7">status<pos:position pos:line="60" pos:column="13"/></name> <operator pos:line="60" pos:column="14">=<pos:position pos:line="60" pos:column="15"/></operator> <call><name pos:line="60" pos:column="16">array_grow<pos:position pos:line="60" pos:column="26"/></name><argument_list pos:line="60" pos:column="26">(<argument><expr><operator pos:line="60" pos:column="27">(<pos:position pos:line="60" pos:column="28"/></operator><name pos:line="60" pos:column="28">void<pos:position pos:line="60" pos:column="32"/></name> <operator pos:line="60" pos:column="33">*<pos:position pos:line="60" pos:column="34"/></operator><operator pos:line="60" pos:column="34">)<pos:position pos:line="60" pos:column="35"/></operator><operator pos:line="60" pos:column="35">&amp;<pos:position pos:line="60" pos:column="40"/></operator><name pos:line="60" pos:column="36">identifiers<pos:position pos:line="60" pos:column="47"/></name></expr></argument>, <argument><expr><operator pos:line="60" pos:column="49">&amp;<pos:position pos:line="60" pos:column="54"/></operator><name pos:line="60" pos:column="50">identifiers_num<pos:position pos:line="60" pos:column="65"/></name></expr></argument>,
                          <argument><expr><sizeof pos:line="61" pos:column="27">sizeof<argument_list pos:line="61" pos:column="33">(<argument><expr><operator pos:line="61" pos:column="34">*<pos:position pos:line="61" pos:column="35"/></operator><name pos:line="61" pos:column="35">identifiers<pos:position pos:line="61" pos:column="46"/></name></expr></argument>)<pos:position pos:line="61" pos:column="47"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="61" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="49"/></expr_stmt>
      <if pos:line="62" pos:column="7">if <condition pos:line="62" pos:column="10">(<expr><name pos:line="62" pos:column="11">status<pos:position pos:line="62" pos:column="17"/></name> <operator pos:line="62" pos:column="18">!=<pos:position pos:line="62" pos:column="20"/></operator> <literal type="number" pos:line="62" pos:column="21">0<pos:position pos:line="62" pos:column="22"/></literal></expr>)<pos:position pos:line="62" pos:column="23"/></condition><then pos:line="62" pos:column="23">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="63" pos:column="9">BAIL_OUT<pos:position pos:line="63" pos:column="17"/></name><argument_list pos:line="63" pos:column="17">(<argument><expr><name pos:line="63" pos:column="18">status<pos:position pos:line="63" pos:column="24"/></name></expr></argument>)<pos:position pos:line="63" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="26"/></expr_stmt></block></then></if>

      <expr_stmt><expr><call><name pos:line="65" pos:column="7">memset<pos:position pos:line="65" pos:column="13"/></name><argument_list pos:line="65" pos:column="13">(<argument><expr><name pos:line="65" pos:column="14">identifiers<pos:position pos:line="65" pos:column="25"/></name> <operator pos:line="65" pos:column="26">+<pos:position pos:line="65" pos:column="27"/></operator> <operator pos:line="65" pos:column="28">(<pos:position pos:line="65" pos:column="29"/></operator><name pos:line="65" pos:column="29">identifiers_num<pos:position pos:line="65" pos:column="44"/></name> <operator pos:line="65" pos:column="45">-<pos:position pos:line="65" pos:column="46"/></operator> <literal type="number" pos:line="65" pos:column="47">1<pos:position pos:line="65" pos:column="48"/></literal><operator pos:line="65" pos:column="48">)<pos:position pos:line="65" pos:column="49"/></operator></expr></argument>, <argument><expr><literal type="number" pos:line="65" pos:column="51">0<pos:position pos:line="65" pos:column="52"/></literal></expr></argument>, <argument><expr><sizeof pos:line="65" pos:column="54">sizeof<argument_list pos:line="65" pos:column="60">(<argument><expr><operator pos:line="65" pos:column="61">*<pos:position pos:line="65" pos:column="62"/></operator><name pos:line="65" pos:column="62">identifiers<pos:position pos:line="65" pos:column="73"/></name></expr></argument>)<pos:position pos:line="65" pos:column="74"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="65" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="76"/></expr_stmt>
      <expr_stmt><expr><name pos:line="66" pos:column="7">status<pos:position pos:line="66" pos:column="13"/></name> <operator pos:line="66" pos:column="14">=<pos:position pos:line="66" pos:column="15"/></operator> <call><name pos:line="66" pos:column="16">parse_identifier<pos:position pos:line="66" pos:column="32"/></name><argument_list pos:line="66" pos:column="32">(<argument><expr><name pos:line="66" pos:column="33">c<pos:position pos:line="66" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="66" pos:column="36">value<pos:position pos:line="66" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="66" pos:column="43">identifiers<pos:position pos:line="66" pos:column="54"/></name> <operator pos:line="66" pos:column="55">+<pos:position pos:line="66" pos:column="56"/></operator> <operator pos:line="66" pos:column="57">(<pos:position pos:line="66" pos:column="58"/></operator><name pos:line="66" pos:column="58">identifiers_num<pos:position pos:line="66" pos:column="73"/></name> <operator pos:line="66" pos:column="74">-<pos:position pos:line="66" pos:column="75"/></operator> <literal type="number" pos:line="66" pos:column="76">1<pos:position pos:line="66" pos:column="77"/></literal><operator pos:line="66" pos:column="77">)<pos:position pos:line="66" pos:column="78"/></operator></expr></argument>)<pos:position pos:line="66" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="80"/></expr_stmt>
      <if pos:line="67" pos:column="7">if <condition pos:line="67" pos:column="10">(<expr><name pos:line="67" pos:column="11">status<pos:position pos:line="67" pos:column="17"/></name> <operator pos:line="67" pos:column="18">!=<pos:position pos:line="67" pos:column="20"/></operator> <literal type="number" pos:line="67" pos:column="21">0<pos:position pos:line="67" pos:column="22"/></literal></expr>)<pos:position pos:line="67" pos:column="23"/></condition><then pos:line="67" pos:column="23">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="68" pos:column="9">BAIL_OUT<pos:position pos:line="68" pos:column="17"/></name><argument_list pos:line="68" pos:column="17">(<argument><expr><name pos:line="68" pos:column="18">status<pos:position pos:line="68" pos:column="24"/></name></expr></argument>)<pos:position pos:line="68" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="26"/></expr_stmt></block></then></if>
    }<pos:position pos:line="69" pos:column="6"/></block></then></if></elseif> <else pos:line="69" pos:column="7">else <block pos:line="69" pos:column="12">{
      <expr_stmt><expr><call><name pos:line="70" pos:column="7">fprintf<pos:position pos:line="70" pos:column="14"/></name><argument_list pos:line="70" pos:column="14">(<argument><expr><name pos:line="70" pos:column="15">stderr<pos:position pos:line="70" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="70" pos:column="23">"ERROR: flush: Unknown option `%s'.\n"<pos:position pos:line="70" pos:column="61"/></literal></expr></argument>, <argument><expr><name pos:line="70" pos:column="63">key<pos:position pos:line="70" pos:column="66"/></name></expr></argument>)<pos:position pos:line="70" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="68"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="71" pos:column="7">BAIL_OUT<pos:position pos:line="71" pos:column="15"/></name><argument_list pos:line="71" pos:column="15">(<argument><expr><operator pos:line="71" pos:column="16">-<pos:position pos:line="71" pos:column="17"/></operator><literal type="number" pos:line="71" pos:column="17">1<pos:position pos:line="71" pos:column="18"/></literal></expr></argument>)<pos:position pos:line="71" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="20"/></expr_stmt>
    }<pos:position pos:line="72" pos:column="6"/></block></else></if>
  }<pos:position pos:line="73" pos:column="4"/></block></for>

  <if pos:line="75" pos:column="3">if <condition pos:line="75" pos:column="6">(<expr><name pos:line="75" pos:column="7">plugins_num<pos:position pos:line="75" pos:column="18"/></name> <operator pos:line="75" pos:column="19">==<pos:position pos:line="75" pos:column="21"/></operator> <literal type="number" pos:line="75" pos:column="22">0<pos:position pos:line="75" pos:column="23"/></literal></expr>)<pos:position pos:line="75" pos:column="24"/></condition><then pos:line="75" pos:column="24"> <block pos:line="75" pos:column="25">{
    <expr_stmt><expr><name pos:line="76" pos:column="5">status<pos:position pos:line="76" pos:column="11"/></name> <operator pos:line="76" pos:column="12">=<pos:position pos:line="76" pos:column="13"/></operator> <call><name pos:line="76" pos:column="14">array_grow<pos:position pos:line="76" pos:column="24"/></name><argument_list pos:line="76" pos:column="24">(<argument><expr><operator pos:line="76" pos:column="25">(<pos:position pos:line="76" pos:column="26"/></operator><name pos:line="76" pos:column="26">void<pos:position pos:line="76" pos:column="30"/></name> <operator pos:line="76" pos:column="31">*<pos:position pos:line="76" pos:column="32"/></operator><operator pos:line="76" pos:column="32">)<pos:position pos:line="76" pos:column="33"/></operator><operator pos:line="76" pos:column="33">&amp;<pos:position pos:line="76" pos:column="38"/></operator><name pos:line="76" pos:column="34">plugins<pos:position pos:line="76" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="76" pos:column="43">&amp;<pos:position pos:line="76" pos:column="48"/></operator><name pos:line="76" pos:column="44">plugins_num<pos:position pos:line="76" pos:column="55"/></name></expr></argument>, <argument><expr><sizeof pos:line="76" pos:column="57">sizeof<argument_list pos:line="76" pos:column="63">(<argument><expr><operator pos:line="76" pos:column="64">*<pos:position pos:line="76" pos:column="65"/></operator><name pos:line="76" pos:column="65">plugins<pos:position pos:line="76" pos:column="72"/></name></expr></argument>)<pos:position pos:line="76" pos:column="73"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="76" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="75"/></expr_stmt>
    <if pos:line="77" pos:column="5">if <condition pos:line="77" pos:column="8">(<expr><name pos:line="77" pos:column="9">status<pos:position pos:line="77" pos:column="15"/></name> <operator pos:line="77" pos:column="16">!=<pos:position pos:line="77" pos:column="18"/></operator> <literal type="number" pos:line="77" pos:column="19">0<pos:position pos:line="77" pos:column="20"/></literal></expr>)<pos:position pos:line="77" pos:column="21"/></condition><then pos:line="77" pos:column="21">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="78" pos:column="7">BAIL_OUT<pos:position pos:line="78" pos:column="15"/></name><argument_list pos:line="78" pos:column="15">(<argument><expr><name pos:line="78" pos:column="16">status<pos:position pos:line="78" pos:column="22"/></name></expr></argument>)<pos:position pos:line="78" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="24"/></expr_stmt></block></then></if>

    <expr_stmt><expr><call><name pos:line="80" pos:column="5">assert<pos:position pos:line="80" pos:column="11"/></name><argument_list pos:line="80" pos:column="11">(<argument><expr><name pos:line="80" pos:column="12">plugins_num<pos:position pos:line="80" pos:column="23"/></name> <operator pos:line="80" pos:column="24">==<pos:position pos:line="80" pos:column="26"/></operator> <literal type="number" pos:line="80" pos:column="27">1<pos:position pos:line="80" pos:column="28"/></literal></expr></argument>)<pos:position pos:line="80" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="30"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="81" pos:column="5">plugins<pos:position pos:line="81" pos:column="12"/></name><index pos:line="81" pos:column="12">[<expr><literal type="number" pos:line="81" pos:column="13">0<pos:position pos:line="81" pos:column="14"/></literal></expr>]<pos:position pos:line="81" pos:column="15"/></index></name> <operator pos:line="81" pos:column="16">=<pos:position pos:line="81" pos:column="17"/></operator> <name pos:line="81" pos:column="18">NULL<pos:position pos:line="81" pos:column="22"/></name></expr>;<pos:position pos:line="81" pos:column="23"/></expr_stmt>
  }<pos:position pos:line="82" pos:column="4"/></block></then></if>

  <for pos:line="84" pos:column="3">for <control pos:line="84" pos:column="7">(<init><decl><type><name pos:line="84" pos:column="8">size_t<pos:position pos:line="84" pos:column="14"/></name></type> <name pos:line="84" pos:column="15">i<pos:position pos:line="84" pos:column="16"/></name> <init pos:line="84" pos:column="17">= <expr><literal type="number" pos:line="84" pos:column="19">0<pos:position pos:line="84" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="84" pos:column="21"/></init> <condition><expr><name pos:line="84" pos:column="22">i<pos:position pos:line="84" pos:column="23"/></name> <operator pos:line="84" pos:column="24">&lt;<pos:position pos:line="84" pos:column="28"/></operator> <name pos:line="84" pos:column="26">plugins_num<pos:position pos:line="84" pos:column="37"/></name></expr>;<pos:position pos:line="84" pos:column="38"/></condition> <incr><expr><operator pos:line="84" pos:column="39">++<pos:position pos:line="84" pos:column="41"/></operator><name pos:line="84" pos:column="41">i<pos:position pos:line="84" pos:column="42"/></name></expr></incr>)<pos:position pos:line="84" pos:column="43"/></control> <block pos:line="84" pos:column="44">{
    <if pos:line="85" pos:column="5">if <condition pos:line="85" pos:column="8">(<expr><name pos:line="85" pos:column="9">identifiers_num<pos:position pos:line="85" pos:column="24"/></name> <operator pos:line="85" pos:column="25">==<pos:position pos:line="85" pos:column="27"/></operator> <literal type="number" pos:line="85" pos:column="28">0<pos:position pos:line="85" pos:column="29"/></literal></expr>)<pos:position pos:line="85" pos:column="30"/></condition><then pos:line="85" pos:column="30"> <block pos:line="85" pos:column="31">{
      <expr_stmt><expr><name pos:line="86" pos:column="7">status<pos:position pos:line="86" pos:column="13"/></name> <operator pos:line="86" pos:column="14">=<pos:position pos:line="86" pos:column="15"/></operator> <call><name pos:line="86" pos:column="16">lcc_flush<pos:position pos:line="86" pos:column="25"/></name><argument_list pos:line="86" pos:column="25">(<argument><expr><name pos:line="86" pos:column="26">c<pos:position pos:line="86" pos:column="27"/></name></expr></argument>, <argument><expr><name><name pos:line="86" pos:column="29">plugins<pos:position pos:line="86" pos:column="36"/></name><index pos:line="86" pos:column="36">[<expr><name pos:line="86" pos:column="37">i<pos:position pos:line="86" pos:column="38"/></name></expr>]<pos:position pos:line="86" pos:column="39"/></index></name></expr></argument>, <argument><expr><name pos:line="86" pos:column="41">NULL<pos:position pos:line="86" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="86" pos:column="47">timeout<pos:position pos:line="86" pos:column="54"/></name></expr></argument>)<pos:position pos:line="86" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="56"/></expr_stmt>
      <if pos:line="87" pos:column="7">if <condition pos:line="87" pos:column="10">(<expr><name pos:line="87" pos:column="11">status<pos:position pos:line="87" pos:column="17"/></name> <operator pos:line="87" pos:column="18">!=<pos:position pos:line="87" pos:column="20"/></operator> <literal type="number" pos:line="87" pos:column="21">0<pos:position pos:line="87" pos:column="22"/></literal></expr>)<pos:position pos:line="87" pos:column="23"/></condition><then pos:line="87" pos:column="23">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="88" pos:column="9">fprintf<pos:position pos:line="88" pos:column="16"/></name><argument_list pos:line="88" pos:column="16">(<argument><expr><name pos:line="88" pos:column="17">stderr<pos:position pos:line="88" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="88" pos:column="25">"ERROR: Failed to flush plugin `%s': %s.\n"<pos:position pos:line="88" pos:column="68"/></literal></expr></argument>,
                <argument><expr><ternary><condition><expr><operator pos:line="89" pos:column="17">(<pos:position pos:line="89" pos:column="18"/></operator><name><name pos:line="89" pos:column="18">plugins<pos:position pos:line="89" pos:column="25"/></name><index pos:line="89" pos:column="25">[<expr><name pos:line="89" pos:column="26">i<pos:position pos:line="89" pos:column="27"/></name></expr>]<pos:position pos:line="89" pos:column="28"/></index></name> <operator pos:line="89" pos:column="29">==<pos:position pos:line="89" pos:column="31"/></operator> <name pos:line="89" pos:column="32">NULL<pos:position pos:line="89" pos:column="36"/></name><operator pos:line="89" pos:column="36">)<pos:position pos:line="89" pos:column="37"/></operator></expr> ?<pos:position pos:line="89" pos:column="39"/></condition><then pos:line="89" pos:column="39"> <expr><literal type="string" pos:line="89" pos:column="40">"(all)"<pos:position pos:line="89" pos:column="47"/></literal></expr> <pos:position pos:line="89" pos:column="48"/></then><else pos:line="89" pos:column="48">: <expr><name><name pos:line="89" pos:column="50">plugins<pos:position pos:line="89" pos:column="57"/></name><index pos:line="89" pos:column="57">[<expr><name pos:line="89" pos:column="58">i<pos:position pos:line="89" pos:column="59"/></name></expr>]<pos:position pos:line="89" pos:column="60"/></index></name></expr></else></ternary></expr></argument>, <argument><expr><call><name pos:line="89" pos:column="62">lcc_strerror<pos:position pos:line="89" pos:column="74"/></name><argument_list pos:line="89" pos:column="74">(<argument><expr><name pos:line="89" pos:column="75">c<pos:position pos:line="89" pos:column="76"/></name></expr></argument>)<pos:position pos:line="89" pos:column="77"/></argument_list></call></expr></argument>)<pos:position pos:line="89" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="79"/></expr_stmt></block></then></if>
    }<pos:position pos:line="90" pos:column="6"/></block></then> <else pos:line="90" pos:column="7">else <block pos:line="90" pos:column="12">{
      <for pos:line="91" pos:column="7">for <control pos:line="91" pos:column="11">(<init><decl><type><name pos:line="91" pos:column="12">size_t<pos:position pos:line="91" pos:column="18"/></name></type> <name pos:line="91" pos:column="19">j<pos:position pos:line="91" pos:column="20"/></name> <init pos:line="91" pos:column="21">= <expr><literal type="number" pos:line="91" pos:column="23">0<pos:position pos:line="91" pos:column="24"/></literal></expr></init></decl>;<pos:position pos:line="91" pos:column="25"/></init> <condition><expr><name pos:line="91" pos:column="26">j<pos:position pos:line="91" pos:column="27"/></name> <operator pos:line="91" pos:column="28">&lt;<pos:position pos:line="91" pos:column="32"/></operator> <name pos:line="91" pos:column="30">identifiers_num<pos:position pos:line="91" pos:column="45"/></name></expr>;<pos:position pos:line="91" pos:column="46"/></condition> <incr><expr><operator pos:line="91" pos:column="47">++<pos:position pos:line="91" pos:column="49"/></operator><name pos:line="91" pos:column="49">j<pos:position pos:line="91" pos:column="50"/></name></expr></incr>)<pos:position pos:line="91" pos:column="51"/></control> <block pos:line="91" pos:column="52">{
        <expr_stmt><expr><name pos:line="92" pos:column="9">status<pos:position pos:line="92" pos:column="15"/></name> <operator pos:line="92" pos:column="16">=<pos:position pos:line="92" pos:column="17"/></operator> <call><name pos:line="92" pos:column="18">lcc_flush<pos:position pos:line="92" pos:column="27"/></name><argument_list pos:line="92" pos:column="27">(<argument><expr><name pos:line="92" pos:column="28">c<pos:position pos:line="92" pos:column="29"/></name></expr></argument>, <argument><expr><name><name pos:line="92" pos:column="31">plugins<pos:position pos:line="92" pos:column="38"/></name><index pos:line="92" pos:column="38">[<expr><name pos:line="92" pos:column="39">i<pos:position pos:line="92" pos:column="40"/></name></expr>]<pos:position pos:line="92" pos:column="41"/></index></name></expr></argument>, <argument><expr><name pos:line="92" pos:column="43">identifiers<pos:position pos:line="92" pos:column="54"/></name> <operator pos:line="92" pos:column="55">+<pos:position pos:line="92" pos:column="56"/></operator> <name pos:line="92" pos:column="57">j<pos:position pos:line="92" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="92" pos:column="60">timeout<pos:position pos:line="92" pos:column="67"/></name></expr></argument>)<pos:position pos:line="92" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="69"/></expr_stmt>
        <if pos:line="93" pos:column="9">if <condition pos:line="93" pos:column="12">(<expr><name pos:line="93" pos:column="13">status<pos:position pos:line="93" pos:column="19"/></name> <operator pos:line="93" pos:column="20">!=<pos:position pos:line="93" pos:column="22"/></operator> <literal type="number" pos:line="93" pos:column="23">0<pos:position pos:line="93" pos:column="24"/></literal></expr>)<pos:position pos:line="93" pos:column="25"/></condition><then pos:line="93" pos:column="25"> <block pos:line="93" pos:column="26">{
          <decl_stmt><decl><type><name pos:line="94" pos:column="11">char<pos:position pos:line="94" pos:column="15"/></name></type> <name><name pos:line="94" pos:column="16">id<pos:position pos:line="94" pos:column="18"/></name><index pos:line="94" pos:column="18">[<expr><literal type="number" pos:line="94" pos:column="19">1024<pos:position pos:line="94" pos:column="23"/></literal></expr>]<pos:position pos:line="94" pos:column="24"/></index></name></decl>;<pos:position pos:line="94" pos:column="25"/></decl_stmt>

          <expr_stmt><expr><call><name pos:line="96" pos:column="11">lcc_identifier_to_string<pos:position pos:line="96" pos:column="35"/></name><argument_list pos:line="96" pos:column="35">(<argument><expr><name pos:line="96" pos:column="36">c<pos:position pos:line="96" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="96" pos:column="39">id<pos:position pos:line="96" pos:column="41"/></name></expr></argument>, <argument><expr><sizeof pos:line="96" pos:column="43">sizeof<argument_list pos:line="96" pos:column="49">(<argument><expr><name pos:line="96" pos:column="50">id<pos:position pos:line="96" pos:column="52"/></name></expr></argument>)<pos:position pos:line="96" pos:column="53"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="96" pos:column="55">identifiers<pos:position pos:line="96" pos:column="66"/></name> <operator pos:line="96" pos:column="67">+<pos:position pos:line="96" pos:column="68"/></operator> <name pos:line="96" pos:column="69">j<pos:position pos:line="96" pos:column="70"/></name></expr></argument>)<pos:position pos:line="96" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="96" pos:column="72"/></expr_stmt>
          <expr_stmt><expr><call><name pos:line="97" pos:column="11">fprintf<pos:position pos:line="97" pos:column="18"/></name><argument_list pos:line="97" pos:column="18">(<argument><expr><name pos:line="97" pos:column="19">stderr<pos:position pos:line="97" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="97" pos:column="27">"ERROR: Failed to flush plugin `%s', "<pos:position pos:line="97" pos:column="65"/></literal>
                          <literal type="string" pos:line="98" pos:column="27">"identifier `%s': %s.\n"<pos:position pos:line="98" pos:column="51"/></literal></expr></argument>,
                  <argument><expr><ternary><condition><expr><operator pos:line="99" pos:column="19">(<pos:position pos:line="99" pos:column="20"/></operator><name><name pos:line="99" pos:column="20">plugins<pos:position pos:line="99" pos:column="27"/></name><index pos:line="99" pos:column="27">[<expr><name pos:line="99" pos:column="28">i<pos:position pos:line="99" pos:column="29"/></name></expr>]<pos:position pos:line="99" pos:column="30"/></index></name> <operator pos:line="99" pos:column="31">==<pos:position pos:line="99" pos:column="33"/></operator> <name pos:line="99" pos:column="34">NULL<pos:position pos:line="99" pos:column="38"/></name><operator pos:line="99" pos:column="38">)<pos:position pos:line="99" pos:column="39"/></operator></expr> ?<pos:position pos:line="99" pos:column="41"/></condition><then pos:line="99" pos:column="41"> <expr><literal type="string" pos:line="99" pos:column="42">"(all)"<pos:position pos:line="99" pos:column="49"/></literal></expr> <pos:position pos:line="99" pos:column="50"/></then><else pos:line="99" pos:column="50">: <expr><name><name pos:line="99" pos:column="52">plugins<pos:position pos:line="99" pos:column="59"/></name><index pos:line="99" pos:column="59">[<expr><name pos:line="99" pos:column="60">i<pos:position pos:line="99" pos:column="61"/></name></expr>]<pos:position pos:line="99" pos:column="62"/></index></name></expr></else></ternary></expr></argument>, <argument><expr><name pos:line="99" pos:column="64">id<pos:position pos:line="99" pos:column="66"/></name></expr></argument>,
                  <argument><expr><call><name pos:line="100" pos:column="19">lcc_strerror<pos:position pos:line="100" pos:column="31"/></name><argument_list pos:line="100" pos:column="31">(<argument><expr><name pos:line="100" pos:column="32">c<pos:position pos:line="100" pos:column="33"/></name></expr></argument>)<pos:position pos:line="100" pos:column="34"/></argument_list></call></expr></argument>)<pos:position pos:line="100" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="100" pos:column="36"/></expr_stmt>
        }<pos:position pos:line="101" pos:column="10"/></block></then></if>
      }<pos:position pos:line="102" pos:column="8"/></block></for>
    }<pos:position pos:line="103" pos:column="6"/></block></else></if>
  }<pos:position pos:line="104" pos:column="4"/></block></for>

  <expr_stmt><expr><call><name pos:line="106" pos:column="3">BAIL_OUT<pos:position pos:line="106" pos:column="11"/></name><argument_list pos:line="106" pos:column="11">(<argument><expr><literal type="number" pos:line="106" pos:column="12">0<pos:position pos:line="106" pos:column="13"/></literal></expr></argument>)<pos:position pos:line="106" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="106" pos:column="15"/></expr_stmt>
<cpp:undef pos:line="107" pos:column="1">#<cpp:directive pos:line="107" pos:column="2">undef<pos:position pos:line="107" pos:column="7"/></cpp:directive> <name pos:line="107" pos:column="8">BAIL_OUT<pos:position pos:line="107" pos:column="16"/></name></cpp:undef>
}<pos:position pos:line="108" pos:column="2"/></block></function></unit>
