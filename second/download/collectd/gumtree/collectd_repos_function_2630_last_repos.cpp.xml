<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_2630_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">uc_init<pos:position pos:line="1" pos:column="12"/></name><parameter_list pos:line="1" pos:column="12">(<parameter><decl><type><name pos:line="1" pos:column="13">void<pos:position pos:line="1" pos:column="17"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="18"/></parameter_list> <block pos:line="1" pos:column="19">{
  <if pos:line="2" pos:column="3">if <condition pos:line="2" pos:column="6">(<expr><name pos:line="2" pos:column="7">cache_tree<pos:position pos:line="2" pos:column="17"/></name> <operator pos:line="2" pos:column="18">==<pos:position pos:line="2" pos:column="20"/></operator> <name pos:line="2" pos:column="21">NULL<pos:position pos:line="2" pos:column="25"/></name></expr>)<pos:position pos:line="2" pos:column="26"/></condition><then pos:line="2" pos:column="26">
    <block type="pseudo"><expr_stmt><expr><name pos:line="3" pos:column="5">cache_tree<pos:position pos:line="3" pos:column="15"/></name> <operator pos:line="3" pos:column="16">=<pos:position pos:line="3" pos:column="17"/></operator>
        <call><name pos:line="4" pos:column="9">c_avl_create<pos:position pos:line="4" pos:column="21"/></name><argument_list pos:line="4" pos:column="21">(<argument><expr><operator pos:line="4" pos:column="22">(<pos:position pos:line="4" pos:column="23"/></operator><call><call><name pos:line="4" pos:column="23">int<pos:position pos:line="4" pos:column="26"/></name> <argument_list pos:line="4" pos:column="27">(<argument><expr><operator pos:line="4" pos:column="28">*<pos:position pos:line="4" pos:column="29"/></operator></expr></argument>)<pos:position pos:line="4" pos:column="30"/></argument_list></call><argument_list pos:line="4" pos:column="30">(<argument><expr><specifier pos:line="4" pos:column="31">const<pos:position pos:line="4" pos:column="36"/></specifier> <name pos:line="4" pos:column="37">void<pos:position pos:line="4" pos:column="41"/></name> <operator pos:line="4" pos:column="42">*<pos:position pos:line="4" pos:column="43"/></operator></expr></argument>, <argument><expr><specifier pos:line="4" pos:column="45">const<pos:position pos:line="4" pos:column="50"/></specifier> <name pos:line="4" pos:column="51">void<pos:position pos:line="4" pos:column="55"/></name> <operator pos:line="4" pos:column="56">*<pos:position pos:line="4" pos:column="57"/></operator></expr></argument>)<pos:position pos:line="4" pos:column="58"/></argument_list></call><operator pos:line="4" pos:column="58">)<pos:position pos:line="4" pos:column="59"/></operator><name pos:line="4" pos:column="59">cache_compare<pos:position pos:line="4" pos:column="72"/></name></expr></argument>)<pos:position pos:line="4" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="74"/></expr_stmt></block></then></if>

  <return pos:line="6" pos:column="3">return <expr><literal type="number" pos:line="6" pos:column="10">0<pos:position pos:line="6" pos:column="11"/></literal></expr>;<pos:position pos:line="6" pos:column="12"/></return>
}<pos:position pos:line="7" pos:column="2"/></block></function></unit>
