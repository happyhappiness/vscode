<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1700_collectd-4.9.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">lcc_open_netsocket<pos:position pos:line="1" pos:column="30"/></name> <parameter_list pos:line="1" pos:column="31">(<parameter><decl><type><name pos:line="1" pos:column="32">lcc_connection_t<pos:position pos:line="1" pos:column="48"/></name> <modifier pos:line="1" pos:column="49">*<pos:position pos:line="1" pos:column="50"/></modifier></type><name pos:line="1" pos:column="50">c<pos:position pos:line="1" pos:column="51"/></name></decl></parameter>, <comment type="block" pos:line="1" pos:column="53">/* {{{ */</comment>
    <parameter><decl><type><specifier pos:line="2" pos:column="5">const<pos:position pos:line="2" pos:column="10"/></specifier> <name pos:line="2" pos:column="11">char<pos:position pos:line="2" pos:column="15"/></name> <modifier pos:line="2" pos:column="16">*<pos:position pos:line="2" pos:column="17"/></modifier></type><name pos:line="2" pos:column="17">addr_orig<pos:position pos:line="2" pos:column="26"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="27"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><name><name pos:line="4" pos:column="3">struct<pos:position pos:line="4" pos:column="9"/></name> <name pos:line="4" pos:column="10">addrinfo<pos:position pos:line="4" pos:column="18"/></name></name></type> <name pos:line="4" pos:column="19">ai_hints<pos:position pos:line="4" pos:column="27"/></name></decl>;<pos:position pos:line="4" pos:column="28"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="5" pos:column="3">struct<pos:position pos:line="5" pos:column="9"/></name> <name pos:line="5" pos:column="10">addrinfo<pos:position pos:line="5" pos:column="18"/></name></name> <modifier pos:line="5" pos:column="19">*<pos:position pos:line="5" pos:column="20"/></modifier></type><name pos:line="5" pos:column="20">ai_res<pos:position pos:line="5" pos:column="26"/></name></decl>;<pos:position pos:line="5" pos:column="27"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="6" pos:column="3">struct<pos:position pos:line="6" pos:column="9"/></name> <name pos:line="6" pos:column="10">addrinfo<pos:position pos:line="6" pos:column="18"/></name></name> <modifier pos:line="6" pos:column="19">*<pos:position pos:line="6" pos:column="20"/></modifier></type><name pos:line="6" pos:column="20">ai_ptr<pos:position pos:line="6" pos:column="26"/></name></decl>;<pos:position pos:line="6" pos:column="27"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">char<pos:position pos:line="7" pos:column="7"/></name></type> <name><name pos:line="7" pos:column="8">addr_copy<pos:position pos:line="7" pos:column="17"/></name><index pos:line="7" pos:column="17">[<expr><name pos:line="7" pos:column="18">NI_MAXHOST<pos:position pos:line="7" pos:column="28"/></name></expr>]<pos:position pos:line="7" pos:column="29"/></index></name></decl>;<pos:position pos:line="7" pos:column="30"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">char<pos:position pos:line="8" pos:column="7"/></name> <modifier pos:line="8" pos:column="8">*<pos:position pos:line="8" pos:column="9"/></modifier></type><name pos:line="8" pos:column="9">addr<pos:position pos:line="8" pos:column="13"/></name></decl>;<pos:position pos:line="8" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">char<pos:position pos:line="9" pos:column="7"/></name> <modifier pos:line="9" pos:column="8">*<pos:position pos:line="9" pos:column="9"/></modifier></type><name pos:line="9" pos:column="9">port<pos:position pos:line="9" pos:column="13"/></name></decl>;<pos:position pos:line="9" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">int<pos:position pos:line="10" pos:column="6"/></name></type> <name pos:line="10" pos:column="7">fd<pos:position pos:line="10" pos:column="9"/></name></decl>;<pos:position pos:line="10" pos:column="10"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="11" pos:column="3">int<pos:position pos:line="11" pos:column="6"/></name></type> <name pos:line="11" pos:column="7">status<pos:position pos:line="11" pos:column="13"/></name></decl>;<pos:position pos:line="11" pos:column="14"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="13" pos:column="3">assert<pos:position pos:line="13" pos:column="9"/></name> <argument_list pos:line="13" pos:column="10">(<argument><expr><name pos:line="13" pos:column="11">c<pos:position pos:line="13" pos:column="12"/></name> <operator pos:line="13" pos:column="13">!=<pos:position pos:line="13" pos:column="15"/></operator> <name pos:line="13" pos:column="16">NULL<pos:position pos:line="13" pos:column="20"/></name></expr></argument>)<pos:position pos:line="13" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="22"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="14" pos:column="3">assert<pos:position pos:line="14" pos:column="9"/></name> <argument_list pos:line="14" pos:column="10">(<argument><expr><name><name pos:line="14" pos:column="11">c<pos:position pos:line="14" pos:column="12"/></name><operator pos:line="14" pos:column="12">-&gt;<pos:position pos:line="14" pos:column="17"/></operator><name pos:line="14" pos:column="14">fh<pos:position pos:line="14" pos:column="16"/></name></name> <operator pos:line="14" pos:column="17">==<pos:position pos:line="14" pos:column="19"/></operator> <name pos:line="14" pos:column="20">NULL<pos:position pos:line="14" pos:column="24"/></name></expr></argument>)<pos:position pos:line="14" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="26"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="15" pos:column="3">assert<pos:position pos:line="15" pos:column="9"/></name> <argument_list pos:line="15" pos:column="10">(<argument><expr><name pos:line="15" pos:column="11">addr_orig<pos:position pos:line="15" pos:column="20"/></name> <operator pos:line="15" pos:column="21">!=<pos:position pos:line="15" pos:column="23"/></operator> <name pos:line="15" pos:column="24">NULL<pos:position pos:line="15" pos:column="28"/></name></expr></argument>)<pos:position pos:line="15" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="30"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="17" pos:column="3">strncpy<pos:position pos:line="17" pos:column="10"/></name><argument_list pos:line="17" pos:column="10">(<argument><expr><name pos:line="17" pos:column="11">addr_copy<pos:position pos:line="17" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="22">addr_orig<pos:position pos:line="17" pos:column="31"/></name></expr></argument>, <argument><expr><sizeof pos:line="17" pos:column="33">sizeof<argument_list pos:line="17" pos:column="39">(<argument><expr><name pos:line="17" pos:column="40">addr_copy<pos:position pos:line="17" pos:column="49"/></name></expr></argument>)<pos:position pos:line="17" pos:column="50"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="17" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="52"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="18" pos:column="3">addr_copy<pos:position pos:line="18" pos:column="12"/></name><index pos:line="18" pos:column="12">[<expr><sizeof pos:line="18" pos:column="13">sizeof<argument_list pos:line="18" pos:column="19">(<argument><expr><name pos:line="18" pos:column="20">addr_copy<pos:position pos:line="18" pos:column="29"/></name></expr></argument>)<pos:position pos:line="18" pos:column="30"/></argument_list></sizeof> <operator pos:line="18" pos:column="31">-<pos:position pos:line="18" pos:column="32"/></operator> <literal type="number" pos:line="18" pos:column="33">1<pos:position pos:line="18" pos:column="34"/></literal></expr>]<pos:position pos:line="18" pos:column="35"/></index></name> <operator pos:line="18" pos:column="36">=<pos:position pos:line="18" pos:column="37"/></operator> <literal type="char" pos:line="18" pos:column="38">'\0'<pos:position pos:line="18" pos:column="42"/></literal></expr>;<pos:position pos:line="18" pos:column="43"/></expr_stmt>
  <expr_stmt><expr><name pos:line="19" pos:column="3">addr<pos:position pos:line="19" pos:column="7"/></name> <operator pos:line="19" pos:column="8">=<pos:position pos:line="19" pos:column="9"/></operator> <name pos:line="19" pos:column="10">addr_copy<pos:position pos:line="19" pos:column="19"/></name></expr>;<pos:position pos:line="19" pos:column="20"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="21" pos:column="3">memset<pos:position pos:line="21" pos:column="9"/></name> <argument_list pos:line="21" pos:column="10">(<argument><expr><operator pos:line="21" pos:column="11">&amp;<pos:position pos:line="21" pos:column="16"/></operator><name pos:line="21" pos:column="12">ai_hints<pos:position pos:line="21" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="21" pos:column="22">0<pos:position pos:line="21" pos:column="23"/></literal></expr></argument>, <argument><expr><sizeof pos:line="21" pos:column="25">sizeof <argument_list pos:line="21" pos:column="32">(<argument><expr><name pos:line="21" pos:column="33">ai_hints<pos:position pos:line="21" pos:column="41"/></name></expr></argument>)<pos:position pos:line="21" pos:column="42"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="21" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="44"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="22" pos:column="3">ai_hints<pos:position pos:line="22" pos:column="11"/></name><operator pos:line="22" pos:column="11">.<pos:position pos:line="22" pos:column="12"/></operator><name pos:line="22" pos:column="12">ai_flags<pos:position pos:line="22" pos:column="20"/></name></name> <operator pos:line="22" pos:column="21">=<pos:position pos:line="22" pos:column="22"/></operator> <literal type="number" pos:line="22" pos:column="23">0<pos:position pos:line="22" pos:column="24"/></literal></expr>;<pos:position pos:line="22" pos:column="25"/></expr_stmt>
<cpp:ifdef pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">ifdef<pos:position pos:line="23" pos:column="7"/></cpp:directive> <name pos:line="23" pos:column="8">AI_ADDRCONFIG<pos:position pos:line="23" pos:column="21"/></name></cpp:ifdef>
  <expr_stmt><expr><name><name pos:line="24" pos:column="3">ai_hints<pos:position pos:line="24" pos:column="11"/></name><operator pos:line="24" pos:column="11">.<pos:position pos:line="24" pos:column="12"/></operator><name pos:line="24" pos:column="12">ai_flags<pos:position pos:line="24" pos:column="20"/></name></name> <operator pos:line="24" pos:column="21">|=<pos:position pos:line="24" pos:column="23"/></operator> <name pos:line="24" pos:column="24">AI_ADDRCONFIG<pos:position pos:line="24" pos:column="37"/></name></expr>;<pos:position pos:line="24" pos:column="38"/></expr_stmt>
<cpp:endif pos:line="25" pos:column="1">#<cpp:directive pos:line="25" pos:column="2">endif<pos:position pos:line="25" pos:column="7"/></cpp:directive></cpp:endif>
  <expr_stmt><expr><name><name pos:line="26" pos:column="3">ai_hints<pos:position pos:line="26" pos:column="11"/></name><operator pos:line="26" pos:column="11">.<pos:position pos:line="26" pos:column="12"/></operator><name pos:line="26" pos:column="12">ai_family<pos:position pos:line="26" pos:column="21"/></name></name> <operator pos:line="26" pos:column="22">=<pos:position pos:line="26" pos:column="23"/></operator> <name pos:line="26" pos:column="24">AF_UNSPEC<pos:position pos:line="26" pos:column="33"/></name></expr>;<pos:position pos:line="26" pos:column="34"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="27" pos:column="3">ai_hints<pos:position pos:line="27" pos:column="11"/></name><operator pos:line="27" pos:column="11">.<pos:position pos:line="27" pos:column="12"/></operator><name pos:line="27" pos:column="12">ai_socktype<pos:position pos:line="27" pos:column="23"/></name></name> <operator pos:line="27" pos:column="24">=<pos:position pos:line="27" pos:column="25"/></operator> <name pos:line="27" pos:column="26">SOCK_STREAM<pos:position pos:line="27" pos:column="37"/></name></expr>;<pos:position pos:line="27" pos:column="38"/></expr_stmt>

  <expr_stmt><expr><name pos:line="29" pos:column="3">port<pos:position pos:line="29" pos:column="7"/></name> <operator pos:line="29" pos:column="8">=<pos:position pos:line="29" pos:column="9"/></operator> <name pos:line="29" pos:column="10">NULL<pos:position pos:line="29" pos:column="14"/></name></expr>;<pos:position pos:line="29" pos:column="15"/></expr_stmt>
  <if pos:line="30" pos:column="3">if <condition pos:line="30" pos:column="6">(<expr><operator pos:line="30" pos:column="7">*<pos:position pos:line="30" pos:column="8"/></operator><name pos:line="30" pos:column="8">addr<pos:position pos:line="30" pos:column="12"/></name> <operator pos:line="30" pos:column="13">==<pos:position pos:line="30" pos:column="15"/></operator> <literal type="char" pos:line="30" pos:column="16">'['<pos:position pos:line="30" pos:column="19"/></literal></expr>)<pos:position pos:line="30" pos:column="20"/></condition><then pos:line="30" pos:column="20"> <comment type="block" pos:line="30" pos:column="21">/* IPv6+port format */</comment>
  <block pos:line="31" pos:column="3">{
    <comment type="block" pos:line="32" pos:column="5">/* `addr' is something like "[2001:780:104:2:211:24ff:feab:26f8]:12345" */</comment>
    <expr_stmt><expr><name pos:line="33" pos:column="5">addr<pos:position pos:line="33" pos:column="9"/></name><operator pos:line="33" pos:column="9">++<pos:position pos:line="33" pos:column="11"/></operator></expr>;<pos:position pos:line="33" pos:column="12"/></expr_stmt>

    <expr_stmt><expr><name pos:line="35" pos:column="5">port<pos:position pos:line="35" pos:column="9"/></name> <operator pos:line="35" pos:column="10">=<pos:position pos:line="35" pos:column="11"/></operator> <call><name pos:line="35" pos:column="12">strchr<pos:position pos:line="35" pos:column="18"/></name> <argument_list pos:line="35" pos:column="19">(<argument><expr><name pos:line="35" pos:column="20">addr<pos:position pos:line="35" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="35" pos:column="26">']'<pos:position pos:line="35" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="35" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="31"/></expr_stmt>
    <if pos:line="36" pos:column="5">if <condition pos:line="36" pos:column="8">(<expr><name pos:line="36" pos:column="9">port<pos:position pos:line="36" pos:column="13"/></name> <operator pos:line="36" pos:column="14">==<pos:position pos:line="36" pos:column="16"/></operator> <name pos:line="36" pos:column="17">NULL<pos:position pos:line="36" pos:column="21"/></name></expr>)<pos:position pos:line="36" pos:column="22"/></condition><then pos:line="36" pos:column="22">
    <block pos:line="37" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="38" pos:column="7">LCC_SET_ERRSTR<pos:position pos:line="38" pos:column="21"/></name> <argument_list pos:line="38" pos:column="22">(<argument><expr><name pos:line="38" pos:column="23">c<pos:position pos:line="38" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="38" pos:column="26">"malformed address: %s"<pos:position pos:line="38" pos:column="49"/></literal></expr></argument>, <argument><expr><name pos:line="38" pos:column="51">addr_orig<pos:position pos:line="38" pos:column="60"/></name></expr></argument>)<pos:position pos:line="38" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="62"/></expr_stmt>
      <return pos:line="39" pos:column="7">return <expr><operator pos:line="39" pos:column="14">(<pos:position pos:line="39" pos:column="15"/></operator><operator pos:line="39" pos:column="15">-<pos:position pos:line="39" pos:column="16"/></operator><literal type="number" pos:line="39" pos:column="16">1<pos:position pos:line="39" pos:column="17"/></literal><operator pos:line="39" pos:column="17">)<pos:position pos:line="39" pos:column="18"/></operator></expr>;<pos:position pos:line="39" pos:column="19"/></return>
    }<pos:position pos:line="40" pos:column="6"/></block></then></if>
    <expr_stmt><expr><operator pos:line="41" pos:column="5">*<pos:position pos:line="41" pos:column="6"/></operator><name pos:line="41" pos:column="6">port<pos:position pos:line="41" pos:column="10"/></name> <operator pos:line="41" pos:column="11">=<pos:position pos:line="41" pos:column="12"/></operator> <literal type="number" pos:line="41" pos:column="13">0<pos:position pos:line="41" pos:column="14"/></literal></expr>;<pos:position pos:line="41" pos:column="15"/></expr_stmt>
    <expr_stmt><expr><name pos:line="42" pos:column="5">port<pos:position pos:line="42" pos:column="9"/></name><operator pos:line="42" pos:column="9">++<pos:position pos:line="42" pos:column="11"/></operator></expr>;<pos:position pos:line="42" pos:column="12"/></expr_stmt>

    <if pos:line="44" pos:column="5">if <condition pos:line="44" pos:column="8">(<expr><operator pos:line="44" pos:column="9">*<pos:position pos:line="44" pos:column="10"/></operator><name pos:line="44" pos:column="10">port<pos:position pos:line="44" pos:column="14"/></name> <operator pos:line="44" pos:column="15">==<pos:position pos:line="44" pos:column="17"/></operator> <literal type="char" pos:line="44" pos:column="18">':'<pos:position pos:line="44" pos:column="21"/></literal></expr>)<pos:position pos:line="44" pos:column="22"/></condition><then pos:line="44" pos:column="22">
      <block type="pseudo"><expr_stmt><expr><name pos:line="45" pos:column="7">port<pos:position pos:line="45" pos:column="11"/></name><operator pos:line="45" pos:column="11">++<pos:position pos:line="45" pos:column="13"/></operator></expr>;<pos:position pos:line="45" pos:column="14"/></expr_stmt></block></then>
    <elseif pos:line="46" pos:column="5">else <if pos:line="46" pos:column="10">if <condition pos:line="46" pos:column="13">(<expr><operator pos:line="46" pos:column="14">*<pos:position pos:line="46" pos:column="15"/></operator><name pos:line="46" pos:column="15">port<pos:position pos:line="46" pos:column="19"/></name> <operator pos:line="46" pos:column="20">==<pos:position pos:line="46" pos:column="22"/></operator> <literal type="number" pos:line="46" pos:column="23">0<pos:position pos:line="46" pos:column="24"/></literal></expr>)<pos:position pos:line="46" pos:column="25"/></condition><then pos:line="46" pos:column="25">
      <block type="pseudo"><expr_stmt><expr><name pos:line="47" pos:column="7">port<pos:position pos:line="47" pos:column="11"/></name> <operator pos:line="47" pos:column="12">=<pos:position pos:line="47" pos:column="13"/></operator> <name pos:line="47" pos:column="14">NULL<pos:position pos:line="47" pos:column="18"/></name></expr>;<pos:position pos:line="47" pos:column="19"/></expr_stmt></block></then></if></elseif>
    <else pos:line="48" pos:column="5">else
    <block pos:line="49" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="50" pos:column="7">LCC_SET_ERRSTR<pos:position pos:line="50" pos:column="21"/></name> <argument_list pos:line="50" pos:column="22">(<argument><expr><name pos:line="50" pos:column="23">c<pos:position pos:line="50" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="50" pos:column="26">"garbage after address: %s"<pos:position pos:line="50" pos:column="53"/></literal></expr></argument>, <argument><expr><name pos:line="50" pos:column="55">port<pos:position pos:line="50" pos:column="59"/></name></expr></argument>)<pos:position pos:line="50" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="61"/></expr_stmt>
      <return pos:line="51" pos:column="7">return <expr><operator pos:line="51" pos:column="14">(<pos:position pos:line="51" pos:column="15"/></operator><operator pos:line="51" pos:column="15">-<pos:position pos:line="51" pos:column="16"/></operator><literal type="number" pos:line="51" pos:column="16">1<pos:position pos:line="51" pos:column="17"/></literal><operator pos:line="51" pos:column="17">)<pos:position pos:line="51" pos:column="18"/></operator></expr>;<pos:position pos:line="51" pos:column="19"/></return>
    }<pos:position pos:line="52" pos:column="6"/></block></else></if>
  }<pos:position pos:line="53" pos:column="4"/></block></then> <comment type="block" pos:line="53" pos:column="5">/* if (*addr = ']') */</comment>
  <elseif pos:line="54" pos:column="3">else <if pos:line="54" pos:column="8">if <condition pos:line="54" pos:column="11">(<expr><call><name pos:line="54" pos:column="12">strchr<pos:position pos:line="54" pos:column="18"/></name> <argument_list pos:line="54" pos:column="19">(<argument><expr><name pos:line="54" pos:column="20">addr<pos:position pos:line="54" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="54" pos:column="26">'.'<pos:position pos:line="54" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="54" pos:column="30"/></argument_list></call> <operator pos:line="54" pos:column="31">!=<pos:position pos:line="54" pos:column="33"/></operator> <name pos:line="54" pos:column="34">NULL<pos:position pos:line="54" pos:column="38"/></name></expr>)<pos:position pos:line="54" pos:column="39"/></condition><then pos:line="54" pos:column="39"> <comment type="block" pos:line="54" pos:column="40">/* Hostname or IPv4 */</comment>
  <block pos:line="55" pos:column="3">{
    <expr_stmt><expr><name pos:line="56" pos:column="5">port<pos:position pos:line="56" pos:column="9"/></name> <operator pos:line="56" pos:column="10">=<pos:position pos:line="56" pos:column="11"/></operator> <call><name pos:line="56" pos:column="12">strrchr<pos:position pos:line="56" pos:column="19"/></name> <argument_list pos:line="56" pos:column="20">(<argument><expr><name pos:line="56" pos:column="21">addr<pos:position pos:line="56" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="56" pos:column="27">':'<pos:position pos:line="56" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="56" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="32"/></expr_stmt>
    <if pos:line="57" pos:column="5">if <condition pos:line="57" pos:column="8">(<expr><name pos:line="57" pos:column="9">port<pos:position pos:line="57" pos:column="13"/></name> <operator pos:line="57" pos:column="14">!=<pos:position pos:line="57" pos:column="16"/></operator> <name pos:line="57" pos:column="17">NULL<pos:position pos:line="57" pos:column="21"/></name></expr>)<pos:position pos:line="57" pos:column="22"/></condition><then pos:line="57" pos:column="22">
    <block pos:line="58" pos:column="5">{
      <expr_stmt><expr><operator pos:line="59" pos:column="7">*<pos:position pos:line="59" pos:column="8"/></operator><name pos:line="59" pos:column="8">port<pos:position pos:line="59" pos:column="12"/></name> <operator pos:line="59" pos:column="13">=<pos:position pos:line="59" pos:column="14"/></operator> <literal type="number" pos:line="59" pos:column="15">0<pos:position pos:line="59" pos:column="16"/></literal></expr>;<pos:position pos:line="59" pos:column="17"/></expr_stmt>
      <expr_stmt><expr><name pos:line="60" pos:column="7">port<pos:position pos:line="60" pos:column="11"/></name><operator pos:line="60" pos:column="11">++<pos:position pos:line="60" pos:column="13"/></operator></expr>;<pos:position pos:line="60" pos:column="14"/></expr_stmt>
    }<pos:position pos:line="61" pos:column="6"/></block></then></if>
  }<pos:position pos:line="62" pos:column="4"/></block></then></if></elseif></if>

  <expr_stmt><expr><name pos:line="64" pos:column="3">ai_res<pos:position pos:line="64" pos:column="9"/></name> <operator pos:line="64" pos:column="10">=<pos:position pos:line="64" pos:column="11"/></operator> <name pos:line="64" pos:column="12">NULL<pos:position pos:line="64" pos:column="16"/></name></expr>;<pos:position pos:line="64" pos:column="17"/></expr_stmt>
  <expr_stmt><expr><name pos:line="65" pos:column="3">status<pos:position pos:line="65" pos:column="9"/></name> <operator pos:line="65" pos:column="10">=<pos:position pos:line="65" pos:column="11"/></operator> <call><name pos:line="65" pos:column="12">getaddrinfo<pos:position pos:line="65" pos:column="23"/></name> <argument_list pos:line="65" pos:column="24">(<argument><expr><name pos:line="65" pos:column="25">addr<pos:position pos:line="65" pos:column="29"/></name></expr></argument>,
                        <argument><expr><ternary><condition><expr><name pos:line="66" pos:column="25">port<pos:position pos:line="66" pos:column="29"/></name> <operator pos:line="66" pos:column="30">==<pos:position pos:line="66" pos:column="32"/></operator> <name pos:line="66" pos:column="33">NULL<pos:position pos:line="66" pos:column="37"/></name></expr> ?<pos:position pos:line="66" pos:column="39"/></condition><then pos:line="66" pos:column="39"> <expr><name pos:line="66" pos:column="40">LCC_DEFAULT_PORT<pos:position pos:line="66" pos:column="56"/></name></expr> <pos:position pos:line="66" pos:column="57"/></then><else pos:line="66" pos:column="57">: <expr><name pos:line="66" pos:column="59">port<pos:position pos:line="66" pos:column="63"/></name></expr></else></ternary></expr></argument>,
                        <argument><expr><operator pos:line="67" pos:column="25">&amp;<pos:position pos:line="67" pos:column="30"/></operator><name pos:line="67" pos:column="26">ai_hints<pos:position pos:line="67" pos:column="34"/></name></expr></argument>, <argument><expr><operator pos:line="67" pos:column="36">&amp;<pos:position pos:line="67" pos:column="41"/></operator><name pos:line="67" pos:column="37">ai_res<pos:position pos:line="67" pos:column="43"/></name></expr></argument>)<pos:position pos:line="67" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="45"/></expr_stmt>
  <if pos:line="68" pos:column="3">if <condition pos:line="68" pos:column="6">(<expr><name pos:line="68" pos:column="7">status<pos:position pos:line="68" pos:column="13"/></name> <operator pos:line="68" pos:column="14">!=<pos:position pos:line="68" pos:column="16"/></operator> <literal type="number" pos:line="68" pos:column="17">0<pos:position pos:line="68" pos:column="18"/></literal></expr>)<pos:position pos:line="68" pos:column="19"/></condition><then pos:line="68" pos:column="19">
  <block pos:line="69" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="70" pos:column="5">LCC_SET_ERRSTR<pos:position pos:line="70" pos:column="19"/></name> <argument_list pos:line="70" pos:column="20">(<argument><expr><name pos:line="70" pos:column="21">c<pos:position pos:line="70" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="70" pos:column="24">"getaddrinfo: %s"<pos:position pos:line="70" pos:column="41"/></literal></expr></argument>, <argument><expr><call><name pos:line="70" pos:column="43">gai_strerror<pos:position pos:line="70" pos:column="55"/></name> <argument_list pos:line="70" pos:column="56">(<argument><expr><name pos:line="70" pos:column="57">status<pos:position pos:line="70" pos:column="63"/></name></expr></argument>)<pos:position pos:line="70" pos:column="64"/></argument_list></call></expr></argument>)<pos:position pos:line="70" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="66"/></expr_stmt>
    <return pos:line="71" pos:column="5">return <expr><operator pos:line="71" pos:column="12">(<pos:position pos:line="71" pos:column="13"/></operator><operator pos:line="71" pos:column="13">-<pos:position pos:line="71" pos:column="14"/></operator><literal type="number" pos:line="71" pos:column="14">1<pos:position pos:line="71" pos:column="15"/></literal><operator pos:line="71" pos:column="15">)<pos:position pos:line="71" pos:column="16"/></operator></expr>;<pos:position pos:line="71" pos:column="17"/></return>
  }<pos:position pos:line="72" pos:column="4"/></block></then></if>

  <for pos:line="74" pos:column="3">for <control pos:line="74" pos:column="7">(<init><expr><name pos:line="74" pos:column="8">ai_ptr<pos:position pos:line="74" pos:column="14"/></name> <operator pos:line="74" pos:column="15">=<pos:position pos:line="74" pos:column="16"/></operator> <name pos:line="74" pos:column="17">ai_res<pos:position pos:line="74" pos:column="23"/></name></expr>;<pos:position pos:line="74" pos:column="24"/></init> <condition><expr><name pos:line="74" pos:column="25">ai_ptr<pos:position pos:line="74" pos:column="31"/></name> <operator pos:line="74" pos:column="32">!=<pos:position pos:line="74" pos:column="34"/></operator> <name pos:line="74" pos:column="35">NULL<pos:position pos:line="74" pos:column="39"/></name></expr>;<pos:position pos:line="74" pos:column="40"/></condition> <incr><expr><name pos:line="74" pos:column="41">ai_ptr<pos:position pos:line="74" pos:column="47"/></name> <operator pos:line="74" pos:column="48">=<pos:position pos:line="74" pos:column="49"/></operator> <name><name pos:line="74" pos:column="50">ai_ptr<pos:position pos:line="74" pos:column="56"/></name><operator pos:line="74" pos:column="56">-&gt;<pos:position pos:line="74" pos:column="61"/></operator><name pos:line="74" pos:column="58">ai_next<pos:position pos:line="74" pos:column="65"/></name></name></expr></incr>)<pos:position pos:line="74" pos:column="66"/></control>
  <block pos:line="75" pos:column="3">{
    <expr_stmt><expr><name pos:line="76" pos:column="5">fd<pos:position pos:line="76" pos:column="7"/></name> <operator pos:line="76" pos:column="8">=<pos:position pos:line="76" pos:column="9"/></operator> <call><name pos:line="76" pos:column="10">socket<pos:position pos:line="76" pos:column="16"/></name> <argument_list pos:line="76" pos:column="17">(<argument><expr><name><name pos:line="76" pos:column="18">ai_ptr<pos:position pos:line="76" pos:column="24"/></name><operator pos:line="76" pos:column="24">-&gt;<pos:position pos:line="76" pos:column="29"/></operator><name pos:line="76" pos:column="26">ai_family<pos:position pos:line="76" pos:column="35"/></name></name></expr></argument>, <argument><expr><name><name pos:line="76" pos:column="37">ai_ptr<pos:position pos:line="76" pos:column="43"/></name><operator pos:line="76" pos:column="43">-&gt;<pos:position pos:line="76" pos:column="48"/></operator><name pos:line="76" pos:column="45">ai_socktype<pos:position pos:line="76" pos:column="56"/></name></name></expr></argument>, <argument><expr><name><name pos:line="76" pos:column="58">ai_ptr<pos:position pos:line="76" pos:column="64"/></name><operator pos:line="76" pos:column="64">-&gt;<pos:position pos:line="76" pos:column="69"/></operator><name pos:line="76" pos:column="66">ai_protocol<pos:position pos:line="76" pos:column="77"/></name></name></expr></argument>)<pos:position pos:line="76" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="79"/></expr_stmt>
    <if pos:line="77" pos:column="5">if <condition pos:line="77" pos:column="8">(<expr><name pos:line="77" pos:column="9">fd<pos:position pos:line="77" pos:column="11"/></name> <operator pos:line="77" pos:column="12">&lt;<pos:position pos:line="77" pos:column="16"/></operator> <literal type="number" pos:line="77" pos:column="14">0<pos:position pos:line="77" pos:column="15"/></literal></expr>)<pos:position pos:line="77" pos:column="16"/></condition><then pos:line="77" pos:column="16">
    <block pos:line="78" pos:column="5">{
      <expr_stmt><expr><name pos:line="79" pos:column="7">status<pos:position pos:line="79" pos:column="13"/></name> <operator pos:line="79" pos:column="14">=<pos:position pos:line="79" pos:column="15"/></operator> <name pos:line="79" pos:column="16">errno<pos:position pos:line="79" pos:column="21"/></name></expr>;<pos:position pos:line="79" pos:column="22"/></expr_stmt>
      <expr_stmt><expr><name pos:line="80" pos:column="7">fd<pos:position pos:line="80" pos:column="9"/></name> <operator pos:line="80" pos:column="10">=<pos:position pos:line="80" pos:column="11"/></operator> <operator pos:line="80" pos:column="12">-<pos:position pos:line="80" pos:column="13"/></operator><literal type="number" pos:line="80" pos:column="13">1<pos:position pos:line="80" pos:column="14"/></literal></expr>;<pos:position pos:line="80" pos:column="15"/></expr_stmt>
      <continue pos:line="81" pos:column="7">continue;<pos:position pos:line="81" pos:column="16"/></continue>
    }<pos:position pos:line="82" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="84" pos:column="5">status<pos:position pos:line="84" pos:column="11"/></name> <operator pos:line="84" pos:column="12">=<pos:position pos:line="84" pos:column="13"/></operator> <call><name pos:line="84" pos:column="14">connect<pos:position pos:line="84" pos:column="21"/></name> <argument_list pos:line="84" pos:column="22">(<argument><expr><name pos:line="84" pos:column="23">fd<pos:position pos:line="84" pos:column="25"/></name></expr></argument>, <argument><expr><name><name pos:line="84" pos:column="27">ai_ptr<pos:position pos:line="84" pos:column="33"/></name><operator pos:line="84" pos:column="33">-&gt;<pos:position pos:line="84" pos:column="38"/></operator><name pos:line="84" pos:column="35">ai_addr<pos:position pos:line="84" pos:column="42"/></name></name></expr></argument>, <argument><expr><name><name pos:line="84" pos:column="44">ai_ptr<pos:position pos:line="84" pos:column="50"/></name><operator pos:line="84" pos:column="50">-&gt;<pos:position pos:line="84" pos:column="55"/></operator><name pos:line="84" pos:column="52">ai_addrlen<pos:position pos:line="84" pos:column="62"/></name></name></expr></argument>)<pos:position pos:line="84" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="64"/></expr_stmt>
    <if pos:line="85" pos:column="5">if <condition pos:line="85" pos:column="8">(<expr><name pos:line="85" pos:column="9">status<pos:position pos:line="85" pos:column="15"/></name> <operator pos:line="85" pos:column="16">!=<pos:position pos:line="85" pos:column="18"/></operator> <literal type="number" pos:line="85" pos:column="19">0<pos:position pos:line="85" pos:column="20"/></literal></expr>)<pos:position pos:line="85" pos:column="21"/></condition><then pos:line="85" pos:column="21">
    <block pos:line="86" pos:column="5">{
      <expr_stmt><expr><name pos:line="87" pos:column="7">status<pos:position pos:line="87" pos:column="13"/></name> <operator pos:line="87" pos:column="14">=<pos:position pos:line="87" pos:column="15"/></operator> <name pos:line="87" pos:column="16">errno<pos:position pos:line="87" pos:column="21"/></name></expr>;<pos:position pos:line="87" pos:column="22"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="88" pos:column="7">close<pos:position pos:line="88" pos:column="12"/></name> <argument_list pos:line="88" pos:column="13">(<argument><expr><name pos:line="88" pos:column="14">fd<pos:position pos:line="88" pos:column="16"/></name></expr></argument>)<pos:position pos:line="88" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="18"/></expr_stmt>
      <expr_stmt><expr><name pos:line="89" pos:column="7">fd<pos:position pos:line="89" pos:column="9"/></name> <operator pos:line="89" pos:column="10">=<pos:position pos:line="89" pos:column="11"/></operator> <operator pos:line="89" pos:column="12">-<pos:position pos:line="89" pos:column="13"/></operator><literal type="number" pos:line="89" pos:column="13">1<pos:position pos:line="89" pos:column="14"/></literal></expr>;<pos:position pos:line="89" pos:column="15"/></expr_stmt>
      <continue pos:line="90" pos:column="7">continue;<pos:position pos:line="90" pos:column="16"/></continue>
    }<pos:position pos:line="91" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name><name pos:line="93" pos:column="5">c<pos:position pos:line="93" pos:column="6"/></name><operator pos:line="93" pos:column="6">-&gt;<pos:position pos:line="93" pos:column="11"/></operator><name pos:line="93" pos:column="8">fh<pos:position pos:line="93" pos:column="10"/></name></name> <operator pos:line="93" pos:column="11">=<pos:position pos:line="93" pos:column="12"/></operator> <call><name pos:line="93" pos:column="13">fdopen<pos:position pos:line="93" pos:column="19"/></name> <argument_list pos:line="93" pos:column="20">(<argument><expr><name pos:line="93" pos:column="21">fd<pos:position pos:line="93" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="93" pos:column="25">"r+"<pos:position pos:line="93" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="93" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="31"/></expr_stmt>
    <if pos:line="94" pos:column="5">if <condition pos:line="94" pos:column="8">(<expr><name><name pos:line="94" pos:column="9">c<pos:position pos:line="94" pos:column="10"/></name><operator pos:line="94" pos:column="10">-&gt;<pos:position pos:line="94" pos:column="15"/></operator><name pos:line="94" pos:column="12">fh<pos:position pos:line="94" pos:column="14"/></name></name> <operator pos:line="94" pos:column="15">==<pos:position pos:line="94" pos:column="17"/></operator> <name pos:line="94" pos:column="18">NULL<pos:position pos:line="94" pos:column="22"/></name></expr>)<pos:position pos:line="94" pos:column="23"/></condition><then pos:line="94" pos:column="23">
    <block pos:line="95" pos:column="5">{
      <expr_stmt><expr><name pos:line="96" pos:column="7">status<pos:position pos:line="96" pos:column="13"/></name> <operator pos:line="96" pos:column="14">=<pos:position pos:line="96" pos:column="15"/></operator> <name pos:line="96" pos:column="16">errno<pos:position pos:line="96" pos:column="21"/></name></expr>;<pos:position pos:line="96" pos:column="22"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="97" pos:column="7">close<pos:position pos:line="97" pos:column="12"/></name> <argument_list pos:line="97" pos:column="13">(<argument><expr><name pos:line="97" pos:column="14">fd<pos:position pos:line="97" pos:column="16"/></name></expr></argument>)<pos:position pos:line="97" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="18"/></expr_stmt>
      <expr_stmt><expr><name pos:line="98" pos:column="7">fd<pos:position pos:line="98" pos:column="9"/></name> <operator pos:line="98" pos:column="10">=<pos:position pos:line="98" pos:column="11"/></operator> <operator pos:line="98" pos:column="12">-<pos:position pos:line="98" pos:column="13"/></operator><literal type="number" pos:line="98" pos:column="13">1<pos:position pos:line="98" pos:column="14"/></literal></expr>;<pos:position pos:line="98" pos:column="15"/></expr_stmt>
      <continue pos:line="99" pos:column="7">continue;<pos:position pos:line="99" pos:column="16"/></continue>
    }<pos:position pos:line="100" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="102" pos:column="5">assert<pos:position pos:line="102" pos:column="11"/></name> <argument_list pos:line="102" pos:column="12">(<argument><expr><name pos:line="102" pos:column="13">status<pos:position pos:line="102" pos:column="19"/></name> <operator pos:line="102" pos:column="20">==<pos:position pos:line="102" pos:column="22"/></operator> <literal type="number" pos:line="102" pos:column="23">0<pos:position pos:line="102" pos:column="24"/></literal></expr></argument>)<pos:position pos:line="102" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="102" pos:column="26"/></expr_stmt>
    <break pos:line="103" pos:column="5">break;<pos:position pos:line="103" pos:column="11"/></break>
  }<pos:position pos:line="104" pos:column="4"/></block></for> <comment type="block" pos:line="104" pos:column="5">/* for (ai_ptr) */</comment>

  <if pos:line="106" pos:column="3">if <condition pos:line="106" pos:column="6">(<expr><name pos:line="106" pos:column="7">status<pos:position pos:line="106" pos:column="13"/></name> <operator pos:line="106" pos:column="14">!=<pos:position pos:line="106" pos:column="16"/></operator> <literal type="number" pos:line="106" pos:column="17">0<pos:position pos:line="106" pos:column="18"/></literal></expr>)<pos:position pos:line="106" pos:column="19"/></condition><then pos:line="106" pos:column="19">
  <block pos:line="107" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="108" pos:column="5">lcc_set_errno<pos:position pos:line="108" pos:column="18"/></name> <argument_list pos:line="108" pos:column="19">(<argument><expr><name pos:line="108" pos:column="20">c<pos:position pos:line="108" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="108" pos:column="23">status<pos:position pos:line="108" pos:column="29"/></name></expr></argument>)<pos:position pos:line="108" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="108" pos:column="31"/></expr_stmt>
    <return pos:line="109" pos:column="5">return <expr><operator pos:line="109" pos:column="12">(<pos:position pos:line="109" pos:column="13"/></operator><operator pos:line="109" pos:column="13">-<pos:position pos:line="109" pos:column="14"/></operator><literal type="number" pos:line="109" pos:column="14">1<pos:position pos:line="109" pos:column="15"/></literal><operator pos:line="109" pos:column="15">)<pos:position pos:line="109" pos:column="16"/></operator></expr>;<pos:position pos:line="109" pos:column="17"/></return>
  }<pos:position pos:line="110" pos:column="4"/></block></then></if>

  <return pos:line="112" pos:column="3">return <expr><operator pos:line="112" pos:column="10">(<pos:position pos:line="112" pos:column="11"/></operator><literal type="number" pos:line="112" pos:column="11">0<pos:position pos:line="112" pos:column="12"/></literal><operator pos:line="112" pos:column="12">)<pos:position pos:line="112" pos:column="13"/></operator></expr>;<pos:position pos:line="112" pos:column="14"/></return>
}<pos:position pos:line="113" pos:column="2"/></block></function></unit>
