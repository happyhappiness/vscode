<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_2307_collectd-5.6.3.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">lcc_string_to_identifier<pos:position pos:line="1" pos:column="29"/></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name pos:line="1" pos:column="30">lcc_connection_t<pos:position pos:line="1" pos:column="46"/></name> <modifier pos:line="1" pos:column="47">*<pos:position pos:line="1" pos:column="48"/></modifier></type><name pos:line="1" pos:column="48">c<pos:position pos:line="1" pos:column="49"/></name></decl></parameter>, <comment type="block" pos:line="1" pos:column="51">/* {{{ */</comment>
                             <parameter><decl><type><name pos:line="2" pos:column="30">lcc_identifier_t<pos:position pos:line="2" pos:column="46"/></name> <modifier pos:line="2" pos:column="47">*<pos:position pos:line="2" pos:column="48"/></modifier></type><name pos:line="2" pos:column="48">ident<pos:position pos:line="2" pos:column="53"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="55">const<pos:position pos:line="2" pos:column="60"/></specifier> <name pos:line="2" pos:column="61">char<pos:position pos:line="2" pos:column="65"/></name> <modifier pos:line="2" pos:column="66">*<pos:position pos:line="2" pos:column="67"/></modifier></type><name pos:line="2" pos:column="67">string<pos:position pos:line="2" pos:column="73"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="74"/></parameter_list> <block pos:line="2" pos:column="75">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">char<pos:position pos:line="3" pos:column="7"/></name> <modifier pos:line="3" pos:column="8">*<pos:position pos:line="3" pos:column="9"/></modifier></type><name pos:line="3" pos:column="9">string_copy<pos:position pos:line="3" pos:column="20"/></name></decl>;<pos:position pos:line="3" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">char<pos:position pos:line="4" pos:column="7"/></name> <modifier pos:line="4" pos:column="8">*<pos:position pos:line="4" pos:column="9"/></modifier></type><name pos:line="4" pos:column="9">host<pos:position pos:line="4" pos:column="13"/></name></decl>;<pos:position pos:line="4" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">char<pos:position pos:line="5" pos:column="7"/></name> <modifier pos:line="5" pos:column="8">*<pos:position pos:line="5" pos:column="9"/></modifier></type><name pos:line="5" pos:column="9">plugin<pos:position pos:line="5" pos:column="15"/></name></decl>;<pos:position pos:line="5" pos:column="16"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">char<pos:position pos:line="6" pos:column="7"/></name> <modifier pos:line="6" pos:column="8">*<pos:position pos:line="6" pos:column="9"/></modifier></type><name pos:line="6" pos:column="9">plugin_instance<pos:position pos:line="6" pos:column="24"/></name></decl>;<pos:position pos:line="6" pos:column="25"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">char<pos:position pos:line="7" pos:column="7"/></name> <modifier pos:line="7" pos:column="8">*<pos:position pos:line="7" pos:column="9"/></modifier></type><name pos:line="7" pos:column="9">type<pos:position pos:line="7" pos:column="13"/></name></decl>;<pos:position pos:line="7" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">char<pos:position pos:line="8" pos:column="7"/></name> <modifier pos:line="8" pos:column="8">*<pos:position pos:line="8" pos:column="9"/></modifier></type><name pos:line="8" pos:column="9">type_instance<pos:position pos:line="8" pos:column="22"/></name></decl>;<pos:position pos:line="8" pos:column="23"/></decl_stmt>

  <expr_stmt><expr><name pos:line="10" pos:column="3">string_copy<pos:position pos:line="10" pos:column="14"/></name> <operator pos:line="10" pos:column="15">=<pos:position pos:line="10" pos:column="16"/></operator> <call><name pos:line="10" pos:column="17">strdup<pos:position pos:line="10" pos:column="23"/></name><argument_list pos:line="10" pos:column="23">(<argument><expr><name pos:line="10" pos:column="24">string<pos:position pos:line="10" pos:column="30"/></name></expr></argument>)<pos:position pos:line="10" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="32"/></expr_stmt>
  <if pos:line="11" pos:column="3">if <condition pos:line="11" pos:column="6">(<expr><name pos:line="11" pos:column="7">string_copy<pos:position pos:line="11" pos:column="18"/></name> <operator pos:line="11" pos:column="19">==<pos:position pos:line="11" pos:column="21"/></operator> <name pos:line="11" pos:column="22">NULL<pos:position pos:line="11" pos:column="26"/></name></expr>)<pos:position pos:line="11" pos:column="27"/></condition><then pos:line="11" pos:column="27"> <block pos:line="11" pos:column="28">{
    <expr_stmt><expr><call><name pos:line="12" pos:column="5">lcc_set_errno<pos:position pos:line="12" pos:column="18"/></name><argument_list pos:line="12" pos:column="18">(<argument><expr><name pos:line="12" pos:column="19">c<pos:position pos:line="12" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="22">ENOMEM<pos:position pos:line="12" pos:column="28"/></name></expr></argument>)<pos:position pos:line="12" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="30"/></expr_stmt>
    <return pos:line="13" pos:column="5">return <expr><operator pos:line="13" pos:column="12">(<pos:position pos:line="13" pos:column="13"/></operator><operator pos:line="13" pos:column="13">-<pos:position pos:line="13" pos:column="14"/></operator><literal type="number" pos:line="13" pos:column="14">1<pos:position pos:line="13" pos:column="15"/></literal><operator pos:line="13" pos:column="15">)<pos:position pos:line="13" pos:column="16"/></operator></expr>;<pos:position pos:line="13" pos:column="17"/></return>
  }<pos:position pos:line="14" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="16" pos:column="3">host<pos:position pos:line="16" pos:column="7"/></name> <operator pos:line="16" pos:column="8">=<pos:position pos:line="16" pos:column="9"/></operator> <name pos:line="16" pos:column="10">string_copy<pos:position pos:line="16" pos:column="21"/></name></expr>;<pos:position pos:line="16" pos:column="22"/></expr_stmt>
  <expr_stmt><expr><name pos:line="17" pos:column="3">plugin<pos:position pos:line="17" pos:column="9"/></name> <operator pos:line="17" pos:column="10">=<pos:position pos:line="17" pos:column="11"/></operator> <call><name pos:line="17" pos:column="12">strchr<pos:position pos:line="17" pos:column="18"/></name><argument_list pos:line="17" pos:column="18">(<argument><expr><name pos:line="17" pos:column="19">host<pos:position pos:line="17" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="17" pos:column="25">'/'<pos:position pos:line="17" pos:column="28"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="30"/></expr_stmt>
  <if pos:line="18" pos:column="3">if <condition pos:line="18" pos:column="6">(<expr><name pos:line="18" pos:column="7">plugin<pos:position pos:line="18" pos:column="13"/></name> <operator pos:line="18" pos:column="14">==<pos:position pos:line="18" pos:column="16"/></operator> <name pos:line="18" pos:column="17">NULL<pos:position pos:line="18" pos:column="21"/></name></expr>)<pos:position pos:line="18" pos:column="22"/></condition><then pos:line="18" pos:column="22"> <block pos:line="18" pos:column="23">{
    <expr_stmt><expr><call><name pos:line="19" pos:column="5">LCC_SET_ERRSTR<pos:position pos:line="19" pos:column="19"/></name><argument_list pos:line="19" pos:column="19">(<argument><expr><name pos:line="19" pos:column="20">c<pos:position pos:line="19" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="19" pos:column="23">"Malformed identifier string: %s"<pos:position pos:line="19" pos:column="56"/></literal></expr></argument>, <argument><expr><name pos:line="19" pos:column="58">string<pos:position pos:line="19" pos:column="64"/></name></expr></argument>)<pos:position pos:line="19" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="66"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="20" pos:column="5">free<pos:position pos:line="20" pos:column="9"/></name><argument_list pos:line="20" pos:column="9">(<argument><expr><name pos:line="20" pos:column="10">string_copy<pos:position pos:line="20" pos:column="21"/></name></expr></argument>)<pos:position pos:line="20" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="23"/></expr_stmt>
    <return pos:line="21" pos:column="5">return <expr><operator pos:line="21" pos:column="12">(<pos:position pos:line="21" pos:column="13"/></operator><operator pos:line="21" pos:column="13">-<pos:position pos:line="21" pos:column="14"/></operator><literal type="number" pos:line="21" pos:column="14">1<pos:position pos:line="21" pos:column="15"/></literal><operator pos:line="21" pos:column="15">)<pos:position pos:line="21" pos:column="16"/></operator></expr>;<pos:position pos:line="21" pos:column="17"/></return>
  }<pos:position pos:line="22" pos:column="4"/></block></then></if>
  <expr_stmt><expr><operator pos:line="23" pos:column="3">*<pos:position pos:line="23" pos:column="4"/></operator><name pos:line="23" pos:column="4">plugin<pos:position pos:line="23" pos:column="10"/></name> <operator pos:line="23" pos:column="11">=<pos:position pos:line="23" pos:column="12"/></operator> <literal type="number" pos:line="23" pos:column="13">0<pos:position pos:line="23" pos:column="14"/></literal></expr>;<pos:position pos:line="23" pos:column="15"/></expr_stmt>
  <expr_stmt><expr><name pos:line="24" pos:column="3">plugin<pos:position pos:line="24" pos:column="9"/></name><operator pos:line="24" pos:column="9">++<pos:position pos:line="24" pos:column="11"/></operator></expr>;<pos:position pos:line="24" pos:column="12"/></expr_stmt>

  <expr_stmt><expr><name pos:line="26" pos:column="3">type<pos:position pos:line="26" pos:column="7"/></name> <operator pos:line="26" pos:column="8">=<pos:position pos:line="26" pos:column="9"/></operator> <call><name pos:line="26" pos:column="10">strchr<pos:position pos:line="26" pos:column="16"/></name><argument_list pos:line="26" pos:column="16">(<argument><expr><name pos:line="26" pos:column="17">plugin<pos:position pos:line="26" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="26" pos:column="25">'/'<pos:position pos:line="26" pos:column="28"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="30"/></expr_stmt>
  <if pos:line="27" pos:column="3">if <condition pos:line="27" pos:column="6">(<expr><name pos:line="27" pos:column="7">type<pos:position pos:line="27" pos:column="11"/></name> <operator pos:line="27" pos:column="12">==<pos:position pos:line="27" pos:column="14"/></operator> <name pos:line="27" pos:column="15">NULL<pos:position pos:line="27" pos:column="19"/></name></expr>)<pos:position pos:line="27" pos:column="20"/></condition><then pos:line="27" pos:column="20"> <block pos:line="27" pos:column="21">{
    <expr_stmt><expr><call><name pos:line="28" pos:column="5">LCC_SET_ERRSTR<pos:position pos:line="28" pos:column="19"/></name><argument_list pos:line="28" pos:column="19">(<argument><expr><name pos:line="28" pos:column="20">c<pos:position pos:line="28" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="28" pos:column="23">"Malformed identifier string: %s"<pos:position pos:line="28" pos:column="56"/></literal></expr></argument>, <argument><expr><name pos:line="28" pos:column="58">string<pos:position pos:line="28" pos:column="64"/></name></expr></argument>)<pos:position pos:line="28" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="66"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="29" pos:column="5">free<pos:position pos:line="29" pos:column="9"/></name><argument_list pos:line="29" pos:column="9">(<argument><expr><name pos:line="29" pos:column="10">string_copy<pos:position pos:line="29" pos:column="21"/></name></expr></argument>)<pos:position pos:line="29" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="23"/></expr_stmt>
    <return pos:line="30" pos:column="5">return <expr><operator pos:line="30" pos:column="12">(<pos:position pos:line="30" pos:column="13"/></operator><operator pos:line="30" pos:column="13">-<pos:position pos:line="30" pos:column="14"/></operator><literal type="number" pos:line="30" pos:column="14">1<pos:position pos:line="30" pos:column="15"/></literal><operator pos:line="30" pos:column="15">)<pos:position pos:line="30" pos:column="16"/></operator></expr>;<pos:position pos:line="30" pos:column="17"/></return>
  }<pos:position pos:line="31" pos:column="4"/></block></then></if>
  <expr_stmt><expr><operator pos:line="32" pos:column="3">*<pos:position pos:line="32" pos:column="4"/></operator><name pos:line="32" pos:column="4">type<pos:position pos:line="32" pos:column="8"/></name> <operator pos:line="32" pos:column="9">=<pos:position pos:line="32" pos:column="10"/></operator> <literal type="number" pos:line="32" pos:column="11">0<pos:position pos:line="32" pos:column="12"/></literal></expr>;<pos:position pos:line="32" pos:column="13"/></expr_stmt>
  <expr_stmt><expr><name pos:line="33" pos:column="3">type<pos:position pos:line="33" pos:column="7"/></name><operator pos:line="33" pos:column="7">++<pos:position pos:line="33" pos:column="9"/></operator></expr>;<pos:position pos:line="33" pos:column="10"/></expr_stmt>

  <expr_stmt><expr><name pos:line="35" pos:column="3">plugin_instance<pos:position pos:line="35" pos:column="18"/></name> <operator pos:line="35" pos:column="19">=<pos:position pos:line="35" pos:column="20"/></operator> <call><name pos:line="35" pos:column="21">strchr<pos:position pos:line="35" pos:column="27"/></name><argument_list pos:line="35" pos:column="27">(<argument><expr><name pos:line="35" pos:column="28">plugin<pos:position pos:line="35" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="35" pos:column="36">'-'<pos:position pos:line="35" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="35" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="41"/></expr_stmt>
  <if pos:line="36" pos:column="3">if <condition pos:line="36" pos:column="6">(<expr><name pos:line="36" pos:column="7">plugin_instance<pos:position pos:line="36" pos:column="22"/></name> <operator pos:line="36" pos:column="23">!=<pos:position pos:line="36" pos:column="25"/></operator> <name pos:line="36" pos:column="26">NULL<pos:position pos:line="36" pos:column="30"/></name></expr>)<pos:position pos:line="36" pos:column="31"/></condition><then pos:line="36" pos:column="31"> <block pos:line="36" pos:column="32">{
    <expr_stmt><expr><operator pos:line="37" pos:column="5">*<pos:position pos:line="37" pos:column="6"/></operator><name pos:line="37" pos:column="6">plugin_instance<pos:position pos:line="37" pos:column="21"/></name> <operator pos:line="37" pos:column="22">=<pos:position pos:line="37" pos:column="23"/></operator> <literal type="number" pos:line="37" pos:column="24">0<pos:position pos:line="37" pos:column="25"/></literal></expr>;<pos:position pos:line="37" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><name pos:line="38" pos:column="5">plugin_instance<pos:position pos:line="38" pos:column="20"/></name><operator pos:line="38" pos:column="20">++<pos:position pos:line="38" pos:column="22"/></operator></expr>;<pos:position pos:line="38" pos:column="23"/></expr_stmt>
  }<pos:position pos:line="39" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="41" pos:column="3">type_instance<pos:position pos:line="41" pos:column="16"/></name> <operator pos:line="41" pos:column="17">=<pos:position pos:line="41" pos:column="18"/></operator> <call><name pos:line="41" pos:column="19">strchr<pos:position pos:line="41" pos:column="25"/></name><argument_list pos:line="41" pos:column="25">(<argument><expr><name pos:line="41" pos:column="26">type<pos:position pos:line="41" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="41" pos:column="32">'-'<pos:position pos:line="41" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="41" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="37"/></expr_stmt>
  <if pos:line="42" pos:column="3">if <condition pos:line="42" pos:column="6">(<expr><name pos:line="42" pos:column="7">type_instance<pos:position pos:line="42" pos:column="20"/></name> <operator pos:line="42" pos:column="21">!=<pos:position pos:line="42" pos:column="23"/></operator> <name pos:line="42" pos:column="24">NULL<pos:position pos:line="42" pos:column="28"/></name></expr>)<pos:position pos:line="42" pos:column="29"/></condition><then pos:line="42" pos:column="29"> <block pos:line="42" pos:column="30">{
    <expr_stmt><expr><operator pos:line="43" pos:column="5">*<pos:position pos:line="43" pos:column="6"/></operator><name pos:line="43" pos:column="6">type_instance<pos:position pos:line="43" pos:column="19"/></name> <operator pos:line="43" pos:column="20">=<pos:position pos:line="43" pos:column="21"/></operator> <literal type="number" pos:line="43" pos:column="22">0<pos:position pos:line="43" pos:column="23"/></literal></expr>;<pos:position pos:line="43" pos:column="24"/></expr_stmt>
    <expr_stmt><expr><name pos:line="44" pos:column="5">type_instance<pos:position pos:line="44" pos:column="18"/></name><operator pos:line="44" pos:column="18">++<pos:position pos:line="44" pos:column="20"/></operator></expr>;<pos:position pos:line="44" pos:column="21"/></expr_stmt>
  }<pos:position pos:line="45" pos:column="4"/></block></then></if>

  <expr_stmt><expr><call><name pos:line="47" pos:column="3">memset<pos:position pos:line="47" pos:column="9"/></name><argument_list pos:line="47" pos:column="9">(<argument><expr><name pos:line="47" pos:column="10">ident<pos:position pos:line="47" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="47" pos:column="17">0<pos:position pos:line="47" pos:column="18"/></literal></expr></argument>, <argument><expr><sizeof pos:line="47" pos:column="20">sizeof<argument_list pos:line="47" pos:column="26">(<argument><expr><operator pos:line="47" pos:column="27">*<pos:position pos:line="47" pos:column="28"/></operator><name pos:line="47" pos:column="28">ident<pos:position pos:line="47" pos:column="33"/></name></expr></argument>)<pos:position pos:line="47" pos:column="34"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="47" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="36"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="49" pos:column="3">SSTRCPY<pos:position pos:line="49" pos:column="10"/></name><argument_list pos:line="49" pos:column="10">(<argument><expr><name><name pos:line="49" pos:column="11">ident<pos:position pos:line="49" pos:column="16"/></name><operator pos:line="49" pos:column="16">-&gt;<pos:position pos:line="49" pos:column="21"/></operator><name pos:line="49" pos:column="18">host<pos:position pos:line="49" pos:column="22"/></name></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="24">host<pos:position pos:line="49" pos:column="28"/></name></expr></argument>)<pos:position pos:line="49" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="30"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="50" pos:column="3">SSTRCPY<pos:position pos:line="50" pos:column="10"/></name><argument_list pos:line="50" pos:column="10">(<argument><expr><name><name pos:line="50" pos:column="11">ident<pos:position pos:line="50" pos:column="16"/></name><operator pos:line="50" pos:column="16">-&gt;<pos:position pos:line="50" pos:column="21"/></operator><name pos:line="50" pos:column="18">plugin<pos:position pos:line="50" pos:column="24"/></name></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="26">plugin<pos:position pos:line="50" pos:column="32"/></name></expr></argument>)<pos:position pos:line="50" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="34"/></expr_stmt>
  <if pos:line="51" pos:column="3">if <condition pos:line="51" pos:column="6">(<expr><name pos:line="51" pos:column="7">plugin_instance<pos:position pos:line="51" pos:column="22"/></name> <operator pos:line="51" pos:column="23">!=<pos:position pos:line="51" pos:column="25"/></operator> <name pos:line="51" pos:column="26">NULL<pos:position pos:line="51" pos:column="30"/></name></expr>)<pos:position pos:line="51" pos:column="31"/></condition><then pos:line="51" pos:column="31">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="52" pos:column="5">SSTRCPY<pos:position pos:line="52" pos:column="12"/></name><argument_list pos:line="52" pos:column="12">(<argument><expr><name><name pos:line="52" pos:column="13">ident<pos:position pos:line="52" pos:column="18"/></name><operator pos:line="52" pos:column="18">-&gt;<pos:position pos:line="52" pos:column="23"/></operator><name pos:line="52" pos:column="20">plugin_instance<pos:position pos:line="52" pos:column="35"/></name></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="37">plugin_instance<pos:position pos:line="52" pos:column="52"/></name></expr></argument>)<pos:position pos:line="52" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="54"/></expr_stmt></block></then></if>
  <expr_stmt><expr><call><name pos:line="53" pos:column="3">SSTRCPY<pos:position pos:line="53" pos:column="10"/></name><argument_list pos:line="53" pos:column="10">(<argument><expr><name><name pos:line="53" pos:column="11">ident<pos:position pos:line="53" pos:column="16"/></name><operator pos:line="53" pos:column="16">-&gt;<pos:position pos:line="53" pos:column="21"/></operator><name pos:line="53" pos:column="18">type<pos:position pos:line="53" pos:column="22"/></name></name></expr></argument>, <argument><expr><name pos:line="53" pos:column="24">type<pos:position pos:line="53" pos:column="28"/></name></expr></argument>)<pos:position pos:line="53" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="30"/></expr_stmt>
  <if pos:line="54" pos:column="3">if <condition pos:line="54" pos:column="6">(<expr><name pos:line="54" pos:column="7">type_instance<pos:position pos:line="54" pos:column="20"/></name> <operator pos:line="54" pos:column="21">!=<pos:position pos:line="54" pos:column="23"/></operator> <name pos:line="54" pos:column="24">NULL<pos:position pos:line="54" pos:column="28"/></name></expr>)<pos:position pos:line="54" pos:column="29"/></condition><then pos:line="54" pos:column="29">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="55" pos:column="5">SSTRCPY<pos:position pos:line="55" pos:column="12"/></name><argument_list pos:line="55" pos:column="12">(<argument><expr><name><name pos:line="55" pos:column="13">ident<pos:position pos:line="55" pos:column="18"/></name><operator pos:line="55" pos:column="18">-&gt;<pos:position pos:line="55" pos:column="23"/></operator><name pos:line="55" pos:column="20">type_instance<pos:position pos:line="55" pos:column="33"/></name></name></expr></argument>, <argument><expr><name pos:line="55" pos:column="35">type_instance<pos:position pos:line="55" pos:column="48"/></name></expr></argument>)<pos:position pos:line="55" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="50"/></expr_stmt></block></then></if>

  <expr_stmt><expr><call><name pos:line="57" pos:column="3">free<pos:position pos:line="57" pos:column="7"/></name><argument_list pos:line="57" pos:column="7">(<argument><expr><name pos:line="57" pos:column="8">string_copy<pos:position pos:line="57" pos:column="19"/></name></expr></argument>)<pos:position pos:line="57" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="21"/></expr_stmt>
  <return pos:line="58" pos:column="3">return <expr><operator pos:line="58" pos:column="10">(<pos:position pos:line="58" pos:column="11"/></operator><literal type="number" pos:line="58" pos:column="11">0<pos:position pos:line="58" pos:column="12"/></literal><operator pos:line="58" pos:column="12">)<pos:position pos:line="58" pos:column="13"/></operator></expr>;<pos:position pos:line="58" pos:column="14"/></return>
}<pos:position pos:line="59" pos:column="2"/></block></function></unit>
