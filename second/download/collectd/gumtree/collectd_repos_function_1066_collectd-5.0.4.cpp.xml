<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1066_collectd-5.0.4.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">staging_entry_submit<pos:position pos:line="1" pos:column="32"/></name> <parameter_list pos:line="1" pos:column="33">(<parameter><decl><type><specifier pos:line="1" pos:column="34">const<pos:position pos:line="1" pos:column="39"/></specifier> <name pos:line="1" pos:column="40">char<pos:position pos:line="1" pos:column="44"/></name> <modifier pos:line="1" pos:column="45">*<pos:position pos:line="1" pos:column="46"/></modifier></type><name pos:line="1" pos:column="46">host<pos:position pos:line="1" pos:column="50"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="52">const<pos:position pos:line="1" pos:column="57"/></specifier> <name pos:line="1" pos:column="58">char<pos:position pos:line="1" pos:column="62"/></name> <modifier pos:line="1" pos:column="63">*<pos:position pos:line="1" pos:column="64"/></modifier></type><name pos:line="1" pos:column="64">name<pos:position pos:line="1" pos:column="68"/></name></decl></parameter>, <comment type="block" pos:line="1" pos:column="70">/* {{{ */</comment>
    <parameter><decl><type><name pos:line="2" pos:column="5">staging_entry_t<pos:position pos:line="2" pos:column="20"/></name> <modifier pos:line="2" pos:column="21">*<pos:position pos:line="2" pos:column="22"/></modifier></type><name pos:line="2" pos:column="22">se<pos:position pos:line="2" pos:column="24"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="25"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">value_list_t<pos:position pos:line="4" pos:column="15"/></name></type> <name pos:line="4" pos:column="16">vl<pos:position pos:line="4" pos:column="18"/></name></decl>;<pos:position pos:line="4" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">value_t<pos:position pos:line="5" pos:column="10"/></name></type> <name><name pos:line="5" pos:column="11">values<pos:position pos:line="5" pos:column="17"/></name><index pos:line="5" pos:column="17">[<expr><name><name pos:line="5" pos:column="18">se<pos:position pos:line="5" pos:column="20"/></name><operator pos:line="5" pos:column="20">-&gt;<pos:position pos:line="5" pos:column="25"/></operator><name pos:line="5" pos:column="22">vl<pos:position pos:line="5" pos:column="24"/></name><operator pos:line="5" pos:column="24">.<pos:position pos:line="5" pos:column="25"/></operator><name pos:line="5" pos:column="25">values_len<pos:position pos:line="5" pos:column="35"/></name></name></expr>]<pos:position pos:line="5" pos:column="36"/></index></name></decl>;<pos:position pos:line="5" pos:column="37"/></decl_stmt>

  <if pos:line="7" pos:column="3">if <condition pos:line="7" pos:column="6">(<expr><name><name pos:line="7" pos:column="7">se<pos:position pos:line="7" pos:column="9"/></name><operator pos:line="7" pos:column="9">-&gt;<pos:position pos:line="7" pos:column="14"/></operator><name pos:line="7" pos:column="11">vl<pos:position pos:line="7" pos:column="13"/></name><operator pos:line="7" pos:column="13">.<pos:position pos:line="7" pos:column="14"/></operator><name pos:line="7" pos:column="14">interval<pos:position pos:line="7" pos:column="22"/></name></name> <operator pos:line="7" pos:column="23">==<pos:position pos:line="7" pos:column="25"/></operator> <literal type="number" pos:line="7" pos:column="26">0<pos:position pos:line="7" pos:column="27"/></literal></expr>)<pos:position pos:line="7" pos:column="28"/></condition><then pos:line="7" pos:column="28">
  <block pos:line="8" pos:column="3">{
    <comment type="block" pos:line="9" pos:column="5">/* No meta data has been received for this metric yet. */</comment>
    <expr_stmt><expr><name><name pos:line="10" pos:column="5">se<pos:position pos:line="10" pos:column="7"/></name><operator pos:line="10" pos:column="7">-&gt;<pos:position pos:line="10" pos:column="12"/></operator><name pos:line="10" pos:column="9">flags<pos:position pos:line="10" pos:column="14"/></name></name> <operator pos:line="10" pos:column="15">=<pos:position pos:line="10" pos:column="16"/></operator> <literal type="number" pos:line="10" pos:column="17">0<pos:position pos:line="10" pos:column="18"/></literal></expr>;<pos:position pos:line="10" pos:column="19"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="11" pos:column="5">pthread_mutex_unlock<pos:position pos:line="11" pos:column="25"/></name> <argument_list pos:line="11" pos:column="26">(<argument><expr><operator pos:line="11" pos:column="27">&amp;<pos:position pos:line="11" pos:column="32"/></operator><name pos:line="11" pos:column="28">staging_lock<pos:position pos:line="11" pos:column="40"/></name></expr></argument>)<pos:position pos:line="11" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="42"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="12" pos:column="5">request_meta_data<pos:position pos:line="12" pos:column="22"/></name> <argument_list pos:line="12" pos:column="23">(<argument><expr><name pos:line="12" pos:column="24">host<pos:position pos:line="12" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="30">name<pos:position pos:line="12" pos:column="34"/></name></expr></argument>)<pos:position pos:line="12" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="36"/></expr_stmt>
    <return pos:line="13" pos:column="5">return <expr><operator pos:line="13" pos:column="12">(<pos:position pos:line="13" pos:column="13"/></operator><literal type="number" pos:line="13" pos:column="13">0<pos:position pos:line="13" pos:column="14"/></literal><operator pos:line="13" pos:column="14">)<pos:position pos:line="13" pos:column="15"/></operator></expr>;<pos:position pos:line="13" pos:column="16"/></return>
  }<pos:position pos:line="14" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name><name pos:line="16" pos:column="3">se<pos:position pos:line="16" pos:column="5"/></name><operator pos:line="16" pos:column="5">-&gt;<pos:position pos:line="16" pos:column="10"/></operator><name pos:line="16" pos:column="7">flags<pos:position pos:line="16" pos:column="12"/></name></name> <operator pos:line="16" pos:column="13">=<pos:position pos:line="16" pos:column="14"/></operator> <literal type="number" pos:line="16" pos:column="15">0<pos:position pos:line="16" pos:column="16"/></literal></expr>;<pos:position pos:line="16" pos:column="17"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="18" pos:column="3">memcpy<pos:position pos:line="18" pos:column="9"/></name> <argument_list pos:line="18" pos:column="10">(<argument><expr><name pos:line="18" pos:column="11">values<pos:position pos:line="18" pos:column="17"/></name></expr></argument>, <argument><expr><name><name pos:line="18" pos:column="19">se<pos:position pos:line="18" pos:column="21"/></name><operator pos:line="18" pos:column="21">-&gt;<pos:position pos:line="18" pos:column="26"/></operator><name pos:line="18" pos:column="23">vl<pos:position pos:line="18" pos:column="25"/></name><operator pos:line="18" pos:column="25">.<pos:position pos:line="18" pos:column="26"/></operator><name pos:line="18" pos:column="26">values<pos:position pos:line="18" pos:column="32"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="18" pos:column="34">sizeof <argument_list pos:line="18" pos:column="41">(<argument><expr><name pos:line="18" pos:column="42">values<pos:position pos:line="18" pos:column="48"/></name></expr></argument>)<pos:position pos:line="18" pos:column="49"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="18" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="51"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="19" pos:column="3">memcpy<pos:position pos:line="19" pos:column="9"/></name> <argument_list pos:line="19" pos:column="10">(<argument><expr><operator pos:line="19" pos:column="11">&amp;<pos:position pos:line="19" pos:column="16"/></operator><name pos:line="19" pos:column="12">vl<pos:position pos:line="19" pos:column="14"/></name></expr></argument>, <argument><expr><operator pos:line="19" pos:column="16">&amp;<pos:position pos:line="19" pos:column="21"/></operator><name><name pos:line="19" pos:column="17">se<pos:position pos:line="19" pos:column="19"/></name><operator pos:line="19" pos:column="19">-&gt;<pos:position pos:line="19" pos:column="24"/></operator><name pos:line="19" pos:column="21">vl<pos:position pos:line="19" pos:column="23"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="19" pos:column="25">sizeof <argument_list pos:line="19" pos:column="32">(<argument><expr><name pos:line="19" pos:column="33">vl<pos:position pos:line="19" pos:column="35"/></name></expr></argument>)<pos:position pos:line="19" pos:column="36"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="19" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="38"/></expr_stmt>

  <comment type="block" pos:line="21" pos:column="3">/* Unlock before calling `plugin_dispatch_values'.. */</comment>
  <expr_stmt><expr><call><name pos:line="22" pos:column="3">pthread_mutex_unlock<pos:position pos:line="22" pos:column="23"/></name> <argument_list pos:line="22" pos:column="24">(<argument><expr><operator pos:line="22" pos:column="25">&amp;<pos:position pos:line="22" pos:column="30"/></operator><name pos:line="22" pos:column="26">staging_lock<pos:position pos:line="22" pos:column="38"/></name></expr></argument>)<pos:position pos:line="22" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="40"/></expr_stmt>

  <expr_stmt><expr><name><name pos:line="24" pos:column="3">vl<pos:position pos:line="24" pos:column="5"/></name><operator pos:line="24" pos:column="5">.<pos:position pos:line="24" pos:column="6"/></operator><name pos:line="24" pos:column="6">values<pos:position pos:line="24" pos:column="12"/></name></name> <operator pos:line="24" pos:column="13">=<pos:position pos:line="24" pos:column="14"/></operator> <name pos:line="24" pos:column="15">values<pos:position pos:line="24" pos:column="21"/></name></expr>;<pos:position pos:line="24" pos:column="22"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="26" pos:column="3">plugin_dispatch_values<pos:position pos:line="26" pos:column="25"/></name> <argument_list pos:line="26" pos:column="26">(<argument><expr><operator pos:line="26" pos:column="27">&amp;<pos:position pos:line="26" pos:column="32"/></operator><name pos:line="26" pos:column="28">vl<pos:position pos:line="26" pos:column="30"/></name></expr></argument>)<pos:position pos:line="26" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="32"/></expr_stmt>

  <return pos:line="28" pos:column="3">return <expr><operator pos:line="28" pos:column="10">(<pos:position pos:line="28" pos:column="11"/></operator><literal type="number" pos:line="28" pos:column="11">0<pos:position pos:line="28" pos:column="12"/></literal><operator pos:line="28" pos:column="12">)<pos:position pos:line="28" pos:column="13"/></operator></expr>;<pos:position pos:line="28" pos:column="14"/></return>
}<pos:position pos:line="29" pos:column="2"/></block></function></unit>
