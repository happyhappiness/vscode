<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_2007_collectd-5.6.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name> <modifier pos:line="1" pos:column="13">*<pos:position pos:line="1" pos:column="14"/></modifier></type><name pos:line="1" pos:column="14">cpy_interactive<pos:position pos:line="1" pos:column="29"/></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name pos:line="1" pos:column="30">void<pos:position pos:line="1" pos:column="34"/></name> <modifier pos:line="1" pos:column="35">*<pos:position pos:line="1" pos:column="36"/></modifier></type><name pos:line="1" pos:column="36">pipefd<pos:position pos:line="1" pos:column="42"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="43"/></parameter_list> <block pos:line="1" pos:column="44">{
	<decl_stmt><decl><type><name pos:line="2" pos:column="9">PyOS_sighandler_t<pos:position pos:line="2" pos:column="26"/></name></type> <name pos:line="2" pos:column="27">cur_sig<pos:position pos:line="2" pos:column="34"/></name></decl>;<pos:position pos:line="2" pos:column="35"/></decl_stmt>

	<comment type="block" pos:line="4" pos:column="9">/* Signal handler in a plugin? Bad stuff, but the best way to
	 * handle it I guess. In an interactive session people will
	 * press Ctrl+C at some time, which will generate a SIGINT.
	 * This will cause collectd to shutdown, thus killing the
	 * interactive interpreter, and leaving the terminal in a
	 * mess. Chances are, this isn't what the user wanted to do.
	 *
	 * So this is the plan:
	 * 1. Restore Python's own signal handler
	 * 2. Tell Python we just forked so it will accept this thread
	 *    as the main one. No version of Python will ever handle
	 *    interrupts anywhere but in the main thread.
	 * 3. After the interactive loop is done, restore collectd's
	 *    SIGINT handler.
	 * 4. Raise SIGINT for a clean shutdown. The signal is sent to
	 *    the main thread to ensure it wakes up the main interval
	 *    sleep so that collectd shuts down immediately not in 10
	 *    seconds.
	 *
	 * This will make sure that SIGINT won't kill collectd but
	 * still interrupt syscalls like sleep and pause. */</comment>

	<if pos:line="26" pos:column="9">if <condition pos:line="26" pos:column="12">(<expr><call><name pos:line="26" pos:column="13">PyImport_ImportModule<pos:position pos:line="26" pos:column="34"/></name><argument_list pos:line="26" pos:column="34">(<argument><expr><literal type="string" pos:line="26" pos:column="35">"readline"<pos:position pos:line="26" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="46"/></argument_list></call> <operator pos:line="26" pos:column="47">==<pos:position pos:line="26" pos:column="49"/></operator> <name pos:line="26" pos:column="50">NULL<pos:position pos:line="26" pos:column="54"/></name></expr>)<pos:position pos:line="26" pos:column="55"/></condition><then pos:line="26" pos:column="55"> <block pos:line="26" pos:column="56">{
		<comment type="block" pos:line="27" pos:column="17">/* This interactive session will suck. */</comment>
		<expr_stmt><expr><call><name pos:line="28" pos:column="17">cpy_log_exception<pos:position pos:line="28" pos:column="34"/></name><argument_list pos:line="28" pos:column="34">(<argument><expr><literal type="string" pos:line="28" pos:column="35">"interactive session init"<pos:position pos:line="28" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="63"/></expr_stmt>
	}<pos:position pos:line="29" pos:column="10"/></block></then></if>
	<expr_stmt><expr><name pos:line="30" pos:column="9">cur_sig<pos:position pos:line="30" pos:column="16"/></name> <operator pos:line="30" pos:column="17">=<pos:position pos:line="30" pos:column="18"/></operator> <call><name pos:line="30" pos:column="19">PyOS_setsig<pos:position pos:line="30" pos:column="30"/></name><argument_list pos:line="30" pos:column="30">(<argument><expr><name pos:line="30" pos:column="31">SIGINT<pos:position pos:line="30" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="39">python_sigint_handler<pos:position pos:line="30" pos:column="60"/></name></expr></argument>)<pos:position pos:line="30" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="62"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="31" pos:column="9">PyOS_AfterFork<pos:position pos:line="31" pos:column="23"/></name><argument_list pos:line="31" pos:column="23">()<pos:position pos:line="31" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="26"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="32" pos:column="9">PyEval_InitThreads<pos:position pos:line="32" pos:column="27"/></name><argument_list pos:line="32" pos:column="27">()<pos:position pos:line="32" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="30"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="33" pos:column="9">close<pos:position pos:line="33" pos:column="14"/></name><argument_list pos:line="33" pos:column="14">(<argument><expr><operator pos:line="33" pos:column="15">*<pos:position pos:line="33" pos:column="16"/></operator><operator pos:line="33" pos:column="16">(<pos:position pos:line="33" pos:column="17"/></operator><name pos:line="33" pos:column="17">int<pos:position pos:line="33" pos:column="20"/></name> <operator pos:line="33" pos:column="21">*<pos:position pos:line="33" pos:column="22"/></operator><operator pos:line="33" pos:column="22">)<pos:position pos:line="33" pos:column="23"/></operator> <name pos:line="33" pos:column="24">pipefd<pos:position pos:line="33" pos:column="30"/></name></expr></argument>)<pos:position pos:line="33" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="32"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="34" pos:column="9">PyRun_InteractiveLoop<pos:position pos:line="34" pos:column="30"/></name><argument_list pos:line="34" pos:column="30">(<argument><expr><name pos:line="34" pos:column="31">stdin<pos:position pos:line="34" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="34" pos:column="38">"&lt;stdin&gt;"<pos:position pos:line="34" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="49"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="35" pos:column="9">PyOS_setsig<pos:position pos:line="35" pos:column="20"/></name><argument_list pos:line="35" pos:column="20">(<argument><expr><name pos:line="35" pos:column="21">SIGINT<pos:position pos:line="35" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="29">cur_sig<pos:position pos:line="35" pos:column="36"/></name></expr></argument>)<pos:position pos:line="35" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="38"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="36" pos:column="9">PyErr_Print<pos:position pos:line="36" pos:column="20"/></name><argument_list pos:line="36" pos:column="20">()<pos:position pos:line="36" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="23"/></expr_stmt>
	<expr_stmt><expr><name pos:line="37" pos:column="9">state<pos:position pos:line="37" pos:column="14"/></name> <operator pos:line="37" pos:column="15">=<pos:position pos:line="37" pos:column="16"/></operator> <call><name pos:line="37" pos:column="17">PyEval_SaveThread<pos:position pos:line="37" pos:column="34"/></name><argument_list pos:line="37" pos:column="34">()<pos:position pos:line="37" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="37"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="38" pos:column="9">NOTICE<pos:position pos:line="38" pos:column="15"/></name><argument_list pos:line="38" pos:column="15">(<argument><expr><literal type="string" pos:line="38" pos:column="16">"python: Interactive interpreter exited, stopping collectd ..."<pos:position pos:line="38" pos:column="79"/></literal></expr></argument>)<pos:position pos:line="38" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="81"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="39" pos:column="9">pthread_kill<pos:position pos:line="39" pos:column="21"/></name><argument_list pos:line="39" pos:column="21">(<argument><expr><name pos:line="39" pos:column="22">main_thread<pos:position pos:line="39" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="35">SIGINT<pos:position pos:line="39" pos:column="41"/></name></expr></argument>)<pos:position pos:line="39" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="43"/></expr_stmt>
	<return pos:line="40" pos:column="9">return <expr><name pos:line="40" pos:column="16">NULL<pos:position pos:line="40" pos:column="20"/></name></expr>;<pos:position pos:line="40" pos:column="21"/></return>
}<pos:position pos:line="41" pos:column="2"/></block></function></unit>
