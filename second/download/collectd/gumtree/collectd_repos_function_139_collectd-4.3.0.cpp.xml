<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_139_collectd-4.3.0.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">ping_config<pos:position pos:line="1" pos:column="23"/></name> <parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><specifier pos:line="1" pos:column="25">const<pos:position pos:line="1" pos:column="30"/></specifier> <name pos:line="1" pos:column="31">char<pos:position pos:line="1" pos:column="35"/></name> <modifier pos:line="1" pos:column="36">*<pos:position pos:line="1" pos:column="37"/></modifier></type><name pos:line="1" pos:column="37">key<pos:position pos:line="1" pos:column="40"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="42">const<pos:position pos:line="1" pos:column="47"/></specifier> <name pos:line="1" pos:column="48">char<pos:position pos:line="1" pos:column="52"/></name> <modifier pos:line="1" pos:column="53">*<pos:position pos:line="1" pos:column="54"/></modifier></type><name pos:line="1" pos:column="54">value<pos:position pos:line="1" pos:column="59"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="60"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<if pos:line="3" pos:column="9">if <condition pos:line="3" pos:column="12">(<expr><name pos:line="3" pos:column="13">pingobj<pos:position pos:line="3" pos:column="20"/></name> <operator pos:line="3" pos:column="21">==<pos:position pos:line="3" pos:column="23"/></operator> <name pos:line="3" pos:column="24">NULL<pos:position pos:line="3" pos:column="28"/></name></expr>)<pos:position pos:line="3" pos:column="29"/></condition><then pos:line="3" pos:column="29">
	<block pos:line="4" pos:column="9">{
		<if pos:line="5" pos:column="17">if <condition pos:line="5" pos:column="20">(<expr><operator pos:line="5" pos:column="21">(<pos:position pos:line="5" pos:column="22"/></operator><name pos:line="5" pos:column="22">pingobj<pos:position pos:line="5" pos:column="29"/></name> <operator pos:line="5" pos:column="30">=<pos:position pos:line="5" pos:column="31"/></operator> <call><name pos:line="5" pos:column="32">ping_construct<pos:position pos:line="5" pos:column="46"/></name> <argument_list pos:line="5" pos:column="47">()<pos:position pos:line="5" pos:column="49"/></argument_list></call><operator pos:line="5" pos:column="49">)<pos:position pos:line="5" pos:column="50"/></operator> <operator pos:line="5" pos:column="51">==<pos:position pos:line="5" pos:column="53"/></operator> <name pos:line="5" pos:column="54">NULL<pos:position pos:line="5" pos:column="58"/></name></expr>)<pos:position pos:line="5" pos:column="59"/></condition><then pos:line="5" pos:column="59">
		<block pos:line="6" pos:column="17">{
			<expr_stmt><expr><call><name pos:line="7" pos:column="25">ERROR<pos:position pos:line="7" pos:column="30"/></name> <argument_list pos:line="7" pos:column="31">(<argument><expr><literal type="string" pos:line="7" pos:column="32">"ping plugin: `ping_construct' failed."<pos:position pos:line="7" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="73"/></expr_stmt>
			<return pos:line="8" pos:column="25">return <expr><operator pos:line="8" pos:column="32">(<pos:position pos:line="8" pos:column="33"/></operator><literal type="number" pos:line="8" pos:column="33">1<pos:position pos:line="8" pos:column="34"/></literal><operator pos:line="8" pos:column="34">)<pos:position pos:line="8" pos:column="35"/></operator></expr>;<pos:position pos:line="8" pos:column="36"/></return>
		}<pos:position pos:line="9" pos:column="18"/></block></then></if>
	}<pos:position pos:line="10" pos:column="10"/></block></then></if>

	<if pos:line="12" pos:column="9">if <condition pos:line="12" pos:column="12">(<expr><call><name pos:line="12" pos:column="13">strcasecmp<pos:position pos:line="12" pos:column="23"/></name> <argument_list pos:line="12" pos:column="24">(<argument><expr><name pos:line="12" pos:column="25">key<pos:position pos:line="12" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="12" pos:column="30">"host"<pos:position pos:line="12" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="37"/></argument_list></call> <operator pos:line="12" pos:column="38">==<pos:position pos:line="12" pos:column="40"/></operator> <literal type="number" pos:line="12" pos:column="41">0<pos:position pos:line="12" pos:column="42"/></literal></expr>)<pos:position pos:line="12" pos:column="43"/></condition><then pos:line="12" pos:column="43">
	<block pos:line="13" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="14" pos:column="17">hostlist_t<pos:position pos:line="14" pos:column="27"/></name> <modifier pos:line="14" pos:column="28">*<pos:position pos:line="14" pos:column="29"/></modifier></type><name pos:line="14" pos:column="29">hl<pos:position pos:line="14" pos:column="31"/></name></decl>;<pos:position pos:line="14" pos:column="32"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="15" pos:column="17">char<pos:position pos:line="15" pos:column="21"/></name> <modifier pos:line="15" pos:column="22">*<pos:position pos:line="15" pos:column="23"/></modifier></type><name pos:line="15" pos:column="23">host<pos:position pos:line="15" pos:column="27"/></name></decl>;<pos:position pos:line="15" pos:column="28"/></decl_stmt>

		<if pos:line="17" pos:column="17">if <condition pos:line="17" pos:column="20">(<expr><operator pos:line="17" pos:column="21">(<pos:position pos:line="17" pos:column="22"/></operator><name pos:line="17" pos:column="22">hl<pos:position pos:line="17" pos:column="24"/></name> <operator pos:line="17" pos:column="25">=<pos:position pos:line="17" pos:column="26"/></operator> <operator pos:line="17" pos:column="27">(<pos:position pos:line="17" pos:column="28"/></operator><name pos:line="17" pos:column="28">hostlist_t<pos:position pos:line="17" pos:column="38"/></name> <operator pos:line="17" pos:column="39">*<pos:position pos:line="17" pos:column="40"/></operator><operator pos:line="17" pos:column="40">)<pos:position pos:line="17" pos:column="41"/></operator> <call><name pos:line="17" pos:column="42">malloc<pos:position pos:line="17" pos:column="48"/></name> <argument_list pos:line="17" pos:column="49">(<argument><expr><sizeof pos:line="17" pos:column="50">sizeof <argument_list pos:line="17" pos:column="57">(<argument><expr><name pos:line="17" pos:column="58">hostlist_t<pos:position pos:line="17" pos:column="68"/></name></expr></argument>)<pos:position pos:line="17" pos:column="69"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="17" pos:column="70"/></argument_list></call><operator pos:line="17" pos:column="70">)<pos:position pos:line="17" pos:column="71"/></operator> <operator pos:line="17" pos:column="72">==<pos:position pos:line="17" pos:column="74"/></operator> <name pos:line="17" pos:column="75">NULL<pos:position pos:line="17" pos:column="79"/></name></expr>)<pos:position pos:line="17" pos:column="80"/></condition><then pos:line="17" pos:column="80">
		<block pos:line="18" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="19" pos:column="25">char<pos:position pos:line="19" pos:column="29"/></name></type> <name><name pos:line="19" pos:column="30">errbuf<pos:position pos:line="19" pos:column="36"/></name><index pos:line="19" pos:column="36">[<expr><literal type="number" pos:line="19" pos:column="37">1024<pos:position pos:line="19" pos:column="41"/></literal></expr>]<pos:position pos:line="19" pos:column="42"/></index></name></decl>;<pos:position pos:line="19" pos:column="43"/></decl_stmt>
			<expr_stmt><expr><call><name pos:line="20" pos:column="25">ERROR<pos:position pos:line="20" pos:column="30"/></name> <argument_list pos:line="20" pos:column="31">(<argument><expr><literal type="string" pos:line="20" pos:column="32">"ping plugin: malloc failed: %s"<pos:position pos:line="20" pos:column="64"/></literal></expr></argument>,
					<argument><expr><call><name pos:line="21" pos:column="41">sstrerror<pos:position pos:line="21" pos:column="50"/></name> <argument_list pos:line="21" pos:column="51">(<argument><expr><name pos:line="21" pos:column="52">errno<pos:position pos:line="21" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="59">errbuf<pos:position pos:line="21" pos:column="65"/></name></expr></argument>,
						<argument><expr><sizeof pos:line="22" pos:column="49">sizeof <argument_list pos:line="22" pos:column="56">(<argument><expr><name pos:line="22" pos:column="57">errbuf<pos:position pos:line="22" pos:column="63"/></name></expr></argument>)<pos:position pos:line="22" pos:column="64"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="22" pos:column="65"/></argument_list></call></expr></argument>)<pos:position pos:line="22" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="67"/></expr_stmt>
			<return pos:line="23" pos:column="25">return <expr><operator pos:line="23" pos:column="32">(<pos:position pos:line="23" pos:column="33"/></operator><literal type="number" pos:line="23" pos:column="33">1<pos:position pos:line="23" pos:column="34"/></literal><operator pos:line="23" pos:column="34">)<pos:position pos:line="23" pos:column="35"/></operator></expr>;<pos:position pos:line="23" pos:column="36"/></return>
		}<pos:position pos:line="24" pos:column="18"/></block></then></if>
		<if pos:line="25" pos:column="17">if <condition pos:line="25" pos:column="20">(<expr><operator pos:line="25" pos:column="21">(<pos:position pos:line="25" pos:column="22"/></operator><name pos:line="25" pos:column="22">host<pos:position pos:line="25" pos:column="26"/></name> <operator pos:line="25" pos:column="27">=<pos:position pos:line="25" pos:column="28"/></operator> <call><name pos:line="25" pos:column="29">strdup<pos:position pos:line="25" pos:column="35"/></name> <argument_list pos:line="25" pos:column="36">(<argument><expr><name pos:line="25" pos:column="37">value<pos:position pos:line="25" pos:column="42"/></name></expr></argument>)<pos:position pos:line="25" pos:column="43"/></argument_list></call><operator pos:line="25" pos:column="43">)<pos:position pos:line="25" pos:column="44"/></operator> <operator pos:line="25" pos:column="45">==<pos:position pos:line="25" pos:column="47"/></operator> <name pos:line="25" pos:column="48">NULL<pos:position pos:line="25" pos:column="52"/></name></expr>)<pos:position pos:line="25" pos:column="53"/></condition><then pos:line="25" pos:column="53">
		<block pos:line="26" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="27" pos:column="25">char<pos:position pos:line="27" pos:column="29"/></name></type> <name><name pos:line="27" pos:column="30">errbuf<pos:position pos:line="27" pos:column="36"/></name><index pos:line="27" pos:column="36">[<expr><literal type="number" pos:line="27" pos:column="37">1024<pos:position pos:line="27" pos:column="41"/></literal></expr>]<pos:position pos:line="27" pos:column="42"/></index></name></decl>;<pos:position pos:line="27" pos:column="43"/></decl_stmt>
			<expr_stmt><expr><call><name pos:line="28" pos:column="25">free<pos:position pos:line="28" pos:column="29"/></name> <argument_list pos:line="28" pos:column="30">(<argument><expr><name pos:line="28" pos:column="31">hl<pos:position pos:line="28" pos:column="33"/></name></expr></argument>)<pos:position pos:line="28" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="35"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="29" pos:column="25">ERROR<pos:position pos:line="29" pos:column="30"/></name> <argument_list pos:line="29" pos:column="31">(<argument><expr><literal type="string" pos:line="29" pos:column="32">"ping plugin: strdup failed: %s"<pos:position pos:line="29" pos:column="64"/></literal></expr></argument>,
					<argument><expr><call><name pos:line="30" pos:column="41">sstrerror<pos:position pos:line="30" pos:column="50"/></name> <argument_list pos:line="30" pos:column="51">(<argument><expr><name pos:line="30" pos:column="52">errno<pos:position pos:line="30" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="59">errbuf<pos:position pos:line="30" pos:column="65"/></name></expr></argument>,
						<argument><expr><sizeof pos:line="31" pos:column="49">sizeof <argument_list pos:line="31" pos:column="56">(<argument><expr><name pos:line="31" pos:column="57">errbuf<pos:position pos:line="31" pos:column="63"/></name></expr></argument>)<pos:position pos:line="31" pos:column="64"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="31" pos:column="65"/></argument_list></call></expr></argument>)<pos:position pos:line="31" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="67"/></expr_stmt>
			<return pos:line="32" pos:column="25">return <expr><operator pos:line="32" pos:column="32">(<pos:position pos:line="32" pos:column="33"/></operator><literal type="number" pos:line="32" pos:column="33">1<pos:position pos:line="32" pos:column="34"/></literal><operator pos:line="32" pos:column="34">)<pos:position pos:line="32" pos:column="35"/></operator></expr>;<pos:position pos:line="32" pos:column="36"/></return>
		}<pos:position pos:line="33" pos:column="18"/></block></then></if>

		<expr_stmt><expr><name><name pos:line="35" pos:column="17">hl<pos:position pos:line="35" pos:column="19"/></name><operator pos:line="35" pos:column="19">-&gt;<pos:position pos:line="35" pos:column="24"/></operator><name pos:line="35" pos:column="21">host<pos:position pos:line="35" pos:column="25"/></name></name> <operator pos:line="35" pos:column="26">=<pos:position pos:line="35" pos:column="27"/></operator> <name pos:line="35" pos:column="28">host<pos:position pos:line="35" pos:column="32"/></name></expr>;<pos:position pos:line="35" pos:column="33"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="36" pos:column="17">hl<pos:position pos:line="36" pos:column="19"/></name><operator pos:line="36" pos:column="19">-&gt;<pos:position pos:line="36" pos:column="24"/></operator><name pos:line="36" pos:column="21">wait_time<pos:position pos:line="36" pos:column="30"/></name></name> <operator pos:line="36" pos:column="31">=<pos:position pos:line="36" pos:column="32"/></operator> <literal type="number" pos:line="36" pos:column="33">2<pos:position pos:line="36" pos:column="34"/></literal> <operator pos:line="36" pos:column="35">*<pos:position pos:line="36" pos:column="36"/></operator> <name pos:line="36" pos:column="37">interval_g<pos:position pos:line="36" pos:column="47"/></name></expr>;<pos:position pos:line="36" pos:column="48"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="37" pos:column="17">hl<pos:position pos:line="37" pos:column="19"/></name><operator pos:line="37" pos:column="19">-&gt;<pos:position pos:line="37" pos:column="24"/></operator><name pos:line="37" pos:column="21">wait_left<pos:position pos:line="37" pos:column="30"/></name></name> <operator pos:line="37" pos:column="31">=<pos:position pos:line="37" pos:column="32"/></operator> <literal type="number" pos:line="37" pos:column="33">0<pos:position pos:line="37" pos:column="34"/></literal></expr>;<pos:position pos:line="37" pos:column="35"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="38" pos:column="17">hl<pos:position pos:line="38" pos:column="19"/></name><operator pos:line="38" pos:column="19">-&gt;<pos:position pos:line="38" pos:column="24"/></operator><name pos:line="38" pos:column="21">next<pos:position pos:line="38" pos:column="25"/></name></name> <operator pos:line="38" pos:column="26">=<pos:position pos:line="38" pos:column="27"/></operator> <name pos:line="38" pos:column="28">hosts<pos:position pos:line="38" pos:column="33"/></name></expr>;<pos:position pos:line="38" pos:column="34"/></expr_stmt>
		<expr_stmt><expr><name pos:line="39" pos:column="17">hosts<pos:position pos:line="39" pos:column="22"/></name> <operator pos:line="39" pos:column="23">=<pos:position pos:line="39" pos:column="24"/></operator> <name pos:line="39" pos:column="25">hl<pos:position pos:line="39" pos:column="27"/></name></expr>;<pos:position pos:line="39" pos:column="28"/></expr_stmt>
	}<pos:position pos:line="40" pos:column="10"/></block></then>
	<elseif pos:line="41" pos:column="9">else <if pos:line="41" pos:column="14">if <condition pos:line="41" pos:column="17">(<expr><call><name pos:line="41" pos:column="18">strcasecmp<pos:position pos:line="41" pos:column="28"/></name> <argument_list pos:line="41" pos:column="29">(<argument><expr><name pos:line="41" pos:column="30">key<pos:position pos:line="41" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="41" pos:column="35">"ttl"<pos:position pos:line="41" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="41" pos:column="41"/></argument_list></call> <operator pos:line="41" pos:column="42">==<pos:position pos:line="41" pos:column="44"/></operator> <literal type="number" pos:line="41" pos:column="45">0<pos:position pos:line="41" pos:column="46"/></literal></expr>)<pos:position pos:line="41" pos:column="47"/></condition><then pos:line="41" pos:column="47">
	<block pos:line="42" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="43" pos:column="17">int<pos:position pos:line="43" pos:column="20"/></name></type> <name pos:line="43" pos:column="21">ttl<pos:position pos:line="43" pos:column="24"/></name> <init pos:line="43" pos:column="25">= <expr><call><name pos:line="43" pos:column="27">atoi<pos:position pos:line="43" pos:column="31"/></name> <argument_list pos:line="43" pos:column="32">(<argument><expr><name pos:line="43" pos:column="33">value<pos:position pos:line="43" pos:column="38"/></name></expr></argument>)<pos:position pos:line="43" pos:column="39"/></argument_list></call></expr></init></decl>;<pos:position pos:line="43" pos:column="40"/></decl_stmt>
		<if pos:line="44" pos:column="17">if <condition pos:line="44" pos:column="20">(<expr><call><name pos:line="44" pos:column="21">ping_setopt<pos:position pos:line="44" pos:column="32"/></name> <argument_list pos:line="44" pos:column="33">(<argument><expr><name pos:line="44" pos:column="34">pingobj<pos:position pos:line="44" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="43">PING_DEF_TIMEOUT<pos:position pos:line="44" pos:column="59"/></name></expr></argument>, <argument><expr><operator pos:line="44" pos:column="61">(<pos:position pos:line="44" pos:column="62"/></operator><name pos:line="44" pos:column="62">void<pos:position pos:line="44" pos:column="66"/></name> <operator pos:line="44" pos:column="67">*<pos:position pos:line="44" pos:column="68"/></operator><operator pos:line="44" pos:column="68">)<pos:position pos:line="44" pos:column="69"/></operator> <operator pos:line="44" pos:column="70">&amp;<pos:position pos:line="44" pos:column="75"/></operator><name pos:line="44" pos:column="71">ttl<pos:position pos:line="44" pos:column="74"/></name></expr></argument>)<pos:position pos:line="44" pos:column="75"/></argument_list></call></expr>)<pos:position pos:line="44" pos:column="76"/></condition><then pos:line="44" pos:column="76">
		<block pos:line="45" pos:column="17">{
			<expr_stmt><expr><call><name pos:line="46" pos:column="25">WARNING<pos:position pos:line="46" pos:column="32"/></name> <argument_list pos:line="46" pos:column="33">(<argument><expr><literal type="string" pos:line="46" pos:column="34">"ping: liboping did not accept the TTL value %i"<pos:position pos:line="46" pos:column="82"/></literal></expr></argument>, <argument><expr><name pos:line="46" pos:column="84">ttl<pos:position pos:line="46" pos:column="87"/></name></expr></argument>)<pos:position pos:line="46" pos:column="88"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="89"/></expr_stmt>
			<return pos:line="47" pos:column="25">return <expr><operator pos:line="47" pos:column="32">(<pos:position pos:line="47" pos:column="33"/></operator><literal type="number" pos:line="47" pos:column="33">1<pos:position pos:line="47" pos:column="34"/></literal><operator pos:line="47" pos:column="34">)<pos:position pos:line="47" pos:column="35"/></operator></expr>;<pos:position pos:line="47" pos:column="36"/></return>
		}<pos:position pos:line="48" pos:column="18"/></block></then></if>
	}<pos:position pos:line="49" pos:column="10"/></block></then></if></elseif>
	<else pos:line="50" pos:column="9">else
	<block pos:line="51" pos:column="9">{
		<return pos:line="52" pos:column="17">return <expr><operator pos:line="52" pos:column="24">(<pos:position pos:line="52" pos:column="25"/></operator><operator pos:line="52" pos:column="25">-<pos:position pos:line="52" pos:column="26"/></operator><literal type="number" pos:line="52" pos:column="26">1<pos:position pos:line="52" pos:column="27"/></literal><operator pos:line="52" pos:column="27">)<pos:position pos:line="52" pos:column="28"/></operator></expr>;<pos:position pos:line="52" pos:column="29"/></return>
	}<pos:position pos:line="53" pos:column="10"/></block></else></if>

	<return pos:line="55" pos:column="9">return <expr><operator pos:line="55" pos:column="16">(<pos:position pos:line="55" pos:column="17"/></operator><literal type="number" pos:line="55" pos:column="17">0<pos:position pos:line="55" pos:column="18"/></literal><operator pos:line="55" pos:column="18">)<pos:position pos:line="55" pos:column="19"/></operator></expr>;<pos:position pos:line="55" pos:column="20"/></return>
}<pos:position pos:line="56" pos:column="2"/></block></function></unit>
