<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_2125_collectd-5.7.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">cpy_shutdown<pos:position pos:line="1" pos:column="24"/></name><parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><name pos:line="1" pos:column="25">void<pos:position pos:line="1" pos:column="29"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="30"/></parameter_list> <block pos:line="1" pos:column="31">{
  <decl_stmt><decl><type><name pos:line="2" pos:column="3">PyObject<pos:position pos:line="2" pos:column="11"/></name> <modifier pos:line="2" pos:column="12">*<pos:position pos:line="2" pos:column="13"/></modifier></type><name pos:line="2" pos:column="13">ret<pos:position pos:line="2" pos:column="16"/></name></decl>;<pos:position pos:line="2" pos:column="17"/></decl_stmt>

  <if pos:line="4" pos:column="3">if <condition pos:line="4" pos:column="6">(<expr><operator pos:line="4" pos:column="7">!<pos:position pos:line="4" pos:column="8"/></operator><name pos:line="4" pos:column="8">state<pos:position pos:line="4" pos:column="13"/></name></expr>)<pos:position pos:line="4" pos:column="14"/></condition><then pos:line="4" pos:column="14"> <block pos:line="4" pos:column="15">{
    <expr_stmt><expr><call><name pos:line="5" pos:column="5">printf<pos:position pos:line="5" pos:column="11"/></name><argument_list pos:line="5" pos:column="11">(
        <argument><expr><literal type="string" pos:line="6" pos:column="9">"================================================================\n"<pos:position pos:line="6" pos:column="77"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="79"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="7" pos:column="5">printf<pos:position pos:line="7" pos:column="11"/></name><argument_list pos:line="7" pos:column="11">(
        <argument><expr><literal type="string" pos:line="8" pos:column="9">"collectd shutdown while running an interactive session. This will\n"<pos:position pos:line="8" pos:column="78"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="80"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="9" pos:column="5">printf<pos:position pos:line="9" pos:column="11"/></name><argument_list pos:line="9" pos:column="11">(<argument><expr><literal type="string" pos:line="9" pos:column="12">"probably leave your terminal in a mess.\n"<pos:position pos:line="9" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="57"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="10" pos:column="5">printf<pos:position pos:line="10" pos:column="11"/></name><argument_list pos:line="10" pos:column="11">(<argument><expr><literal type="string" pos:line="10" pos:column="12">"Run the command \"reset\" to get it back into a usable state.\n"<pos:position pos:line="10" pos:column="77"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="79"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="11" pos:column="5">printf<pos:position pos:line="11" pos:column="11"/></name><argument_list pos:line="11" pos:column="11">(<argument><expr><literal type="string" pos:line="11" pos:column="12">"You can press Ctrl+D in the interactive session to\n"<pos:position pos:line="11" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="68"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="12" pos:column="5">printf<pos:position pos:line="12" pos:column="11"/></name><argument_list pos:line="12" pos:column="11">(<argument><expr><literal type="string" pos:line="12" pos:column="12">"close collectd and avoid this problem in the future.\n"<pos:position pos:line="12" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="70"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="13" pos:column="5">printf<pos:position pos:line="13" pos:column="11"/></name><argument_list pos:line="13" pos:column="11">(
        <argument><expr><literal type="string" pos:line="14" pos:column="9">"================================================================\n"<pos:position pos:line="14" pos:column="77"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="79"/></expr_stmt>
  }<pos:position pos:line="15" pos:column="4"/></block></then></if>

  <macro><name pos:line="17" pos:column="3">CPY_LOCK_THREADS<pos:position pos:line="17" pos:column="19"/></name></macro>

  <for pos:line="19" pos:column="3">for <control pos:line="19" pos:column="7">(<init><decl><type><name pos:line="19" pos:column="8">cpy_callback_t<pos:position pos:line="19" pos:column="22"/></name> <modifier pos:line="19" pos:column="23">*<pos:position pos:line="19" pos:column="24"/></modifier></type><name pos:line="19" pos:column="24">c<pos:position pos:line="19" pos:column="25"/></name> <init pos:line="19" pos:column="26">= <expr><name pos:line="19" pos:column="28">cpy_shutdown_callbacks<pos:position pos:line="19" pos:column="50"/></name></expr></init></decl>;<pos:position pos:line="19" pos:column="51"/></init> <condition><expr><name pos:line="19" pos:column="52">c<pos:position pos:line="19" pos:column="53"/></name></expr>;<pos:position pos:line="19" pos:column="54"/></condition> <incr><expr><name pos:line="19" pos:column="55">c<pos:position pos:line="19" pos:column="56"/></name> <operator pos:line="19" pos:column="57">=<pos:position pos:line="19" pos:column="58"/></operator> <name><name pos:line="19" pos:column="59">c<pos:position pos:line="19" pos:column="60"/></name><operator pos:line="19" pos:column="60">-&gt;<pos:position pos:line="19" pos:column="65"/></operator><name pos:line="19" pos:column="62">next<pos:position pos:line="19" pos:column="66"/></name></name></expr></incr>)<pos:position pos:line="19" pos:column="67"/></control> <block pos:line="19" pos:column="68">{
    <expr_stmt><expr><name pos:line="20" pos:column="5">ret<pos:position pos:line="20" pos:column="8"/></name> <operator pos:line="20" pos:column="9">=<pos:position pos:line="20" pos:column="10"/></operator> <call><name pos:line="20" pos:column="11">PyObject_CallFunctionObjArgs<pos:position pos:line="20" pos:column="39"/></name><argument_list pos:line="20" pos:column="39">(<argument><expr><name><name pos:line="20" pos:column="40">c<pos:position pos:line="20" pos:column="41"/></name><operator pos:line="20" pos:column="41">-&gt;<pos:position pos:line="20" pos:column="46"/></operator><name pos:line="20" pos:column="43">callback<pos:position pos:line="20" pos:column="51"/></name></name></expr></argument>, <argument><expr><name><name pos:line="20" pos:column="53">c<pos:position pos:line="20" pos:column="54"/></name><operator pos:line="20" pos:column="54">-&gt;<pos:position pos:line="20" pos:column="59"/></operator><name pos:line="20" pos:column="56">data<pos:position pos:line="20" pos:column="60"/></name></name></expr></argument>,
                                       <argument><expr><operator pos:line="21" pos:column="40">(<pos:position pos:line="21" pos:column="41"/></operator><name pos:line="21" pos:column="41">void<pos:position pos:line="21" pos:column="45"/></name> <operator pos:line="21" pos:column="46">*<pos:position pos:line="21" pos:column="47"/></operator><operator pos:line="21" pos:column="47">)<pos:position pos:line="21" pos:column="48"/></operator><literal type="number" pos:line="21" pos:column="48">0<pos:position pos:line="21" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="51"/></expr_stmt> <comment type="block" pos:line="21" pos:column="52">/* New reference. */</comment>
    <if pos:line="22" pos:column="5">if <condition pos:line="22" pos:column="8">(<expr><name pos:line="22" pos:column="9">ret<pos:position pos:line="22" pos:column="12"/></name> <operator pos:line="22" pos:column="13">==<pos:position pos:line="22" pos:column="15"/></operator> <name pos:line="22" pos:column="16">NULL<pos:position pos:line="22" pos:column="20"/></name></expr>)<pos:position pos:line="22" pos:column="21"/></condition><then pos:line="22" pos:column="21">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="23" pos:column="7">cpy_log_exception<pos:position pos:line="23" pos:column="24"/></name><argument_list pos:line="23" pos:column="24">(<argument><expr><literal type="string" pos:line="23" pos:column="25">"shutdown callback"<pos:position pos:line="23" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="46"/></expr_stmt></block></then>
    <else pos:line="24" pos:column="5">else
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="25" pos:column="7">Py_DECREF<pos:position pos:line="25" pos:column="16"/></name><argument_list pos:line="25" pos:column="16">(<argument><expr><name pos:line="25" pos:column="17">ret<pos:position pos:line="25" pos:column="20"/></name></expr></argument>)<pos:position pos:line="25" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="22"/></expr_stmt></block></else></if>
  }<pos:position pos:line="26" pos:column="4"/></block></for>
  <expr_stmt><expr><call><name pos:line="27" pos:column="3">PyErr_Print<pos:position pos:line="27" pos:column="14"/></name><argument_list pos:line="27" pos:column="14">()<pos:position pos:line="27" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="17"/></expr_stmt>

  <decl_stmt><decl><type><name pos:line="29" pos:column="3">Py_BEGIN_ALLOW_THREADS<pos:position pos:line="29" pos:column="25"/></name></type> <name pos:line="29" pos:column="26">cpy_unregister_list<pos:position pos:line="29" pos:column="45"/></name><argument_list pos:line="29" pos:column="45">(<argument><expr><operator pos:line="29" pos:column="46">&amp;<pos:position pos:line="29" pos:column="51"/></operator><name pos:line="29" pos:column="47">cpy_config_callbacks<pos:position pos:line="29" pos:column="67"/></name></expr></argument>)<pos:position pos:line="29" pos:column="68"/></argument_list></decl>;<pos:position pos:line="29" pos:column="69"/></decl_stmt>
  <expr_stmt><expr><call><name pos:line="30" pos:column="3">cpy_unregister_list<pos:position pos:line="30" pos:column="22"/></name><argument_list pos:line="30" pos:column="22">(<argument><expr><operator pos:line="30" pos:column="23">&amp;<pos:position pos:line="30" pos:column="28"/></operator><name pos:line="30" pos:column="24">cpy_init_callbacks<pos:position pos:line="30" pos:column="42"/></name></expr></argument>)<pos:position pos:line="30" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="44"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="31" pos:column="3">cpy_unregister_list<pos:position pos:line="31" pos:column="22"/></name><argument_list pos:line="31" pos:column="22">(<argument><expr><operator pos:line="31" pos:column="23">&amp;<pos:position pos:line="31" pos:column="28"/></operator><name pos:line="31" pos:column="24">cpy_shutdown_callbacks<pos:position pos:line="31" pos:column="46"/></name></expr></argument>)<pos:position pos:line="31" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="48"/></expr_stmt>
  <expr_stmt><expr><name pos:line="32" pos:column="3">cpy_shutdown_triggered<pos:position pos:line="32" pos:column="25"/></name> <operator pos:line="32" pos:column="26">=<pos:position pos:line="32" pos:column="27"/></operator> <literal type="number" pos:line="32" pos:column="28">1<pos:position pos:line="32" pos:column="29"/></literal></expr>;<pos:position pos:line="32" pos:column="30"/></expr_stmt>
  <macro><name pos:line="33" pos:column="3">Py_END_ALLOW_THREADS<pos:position pos:line="33" pos:column="23"/></name></macro>

      <if pos:line="35" pos:column="7">if <condition pos:line="35" pos:column="10">(<expr><operator pos:line="35" pos:column="11">!<pos:position pos:line="35" pos:column="12"/></operator><name pos:line="35" pos:column="12">cpy_num_callbacks<pos:position pos:line="35" pos:column="29"/></name></expr>)<pos:position pos:line="35" pos:column="30"/></condition><then pos:line="35" pos:column="30"> <block pos:line="35" pos:column="31">{
    <expr_stmt><expr><call><name pos:line="36" pos:column="5">Py_Finalize<pos:position pos:line="36" pos:column="16"/></name><argument_list pos:line="36" pos:column="16">()<pos:position pos:line="36" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="19"/></expr_stmt>
    <return pos:line="37" pos:column="5">return <expr><literal type="number" pos:line="37" pos:column="12">0<pos:position pos:line="37" pos:column="13"/></literal></expr>;<pos:position pos:line="37" pos:column="14"/></return>
  }<pos:position pos:line="38" pos:column="4"/></block></then></if>

  <macro><name pos:line="40" pos:column="3">CPY_RELEASE_THREADS<pos:position pos:line="40" pos:column="22"/></name></macro>
  <return pos:line="41" pos:column="3">return <expr><literal type="number" pos:line="41" pos:column="10">0<pos:position pos:line="41" pos:column="11"/></literal></expr>;<pos:position pos:line="41" pos:column="12"/></return>
}<pos:position pos:line="42" pos:column="2"/></block></function></unit>
