<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_560_collectd-4.1.0.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">network_receive<pos:position pos:line="1" pos:column="20"/></name> <parameter_list pos:line="1" pos:column="21">(<parameter><decl><type><name pos:line="1" pos:column="22">void<pos:position pos:line="1" pos:column="26"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="27"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">char<pos:position pos:line="3" pos:column="13"/></name></type> <name><name pos:line="3" pos:column="14">buffer<pos:position pos:line="3" pos:column="20"/></name><index pos:line="3" pos:column="20">[<expr><name pos:line="3" pos:column="21">BUFF_SIZE<pos:position pos:line="3" pos:column="30"/></name></expr>]<pos:position pos:line="3" pos:column="31"/></index></name></decl>;<pos:position pos:line="3" pos:column="32"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type>  <name pos:line="4" pos:column="14">buffer_len<pos:position pos:line="4" pos:column="24"/></name></decl>;<pos:position pos:line="4" pos:column="25"/></decl_stmt>

	<decl_stmt><decl><type><name pos:line="6" pos:column="9">int<pos:position pos:line="6" pos:column="12"/></name></type> <name pos:line="6" pos:column="13">i<pos:position pos:line="6" pos:column="14"/></name></decl>;<pos:position pos:line="6" pos:column="15"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">int<pos:position pos:line="7" pos:column="12"/></name></type> <name pos:line="7" pos:column="13">status<pos:position pos:line="7" pos:column="19"/></name></decl>;<pos:position pos:line="7" pos:column="20"/></decl_stmt>

	<if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><name pos:line="9" pos:column="13">listen_sockets_num<pos:position pos:line="9" pos:column="31"/></name> <operator pos:line="9" pos:column="32">==<pos:position pos:line="9" pos:column="34"/></operator> <literal type="number" pos:line="9" pos:column="35">0<pos:position pos:line="9" pos:column="36"/></literal></expr>)<pos:position pos:line="9" pos:column="37"/></condition><then pos:line="9" pos:column="37">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="10" pos:column="17">network_add_listen_socket<pos:position pos:line="10" pos:column="42"/></name> <argument_list pos:line="10" pos:column="43">(<argument><expr><name pos:line="10" pos:column="44">NULL<pos:position pos:line="10" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="50">NULL<pos:position pos:line="10" pos:column="54"/></name></expr></argument>)<pos:position pos:line="10" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="56"/></expr_stmt></block></then></if>

	<if pos:line="12" pos:column="9">if <condition pos:line="12" pos:column="12">(<expr><name pos:line="12" pos:column="13">listen_sockets_num<pos:position pos:line="12" pos:column="31"/></name> <operator pos:line="12" pos:column="32">==<pos:position pos:line="12" pos:column="34"/></operator> <literal type="number" pos:line="12" pos:column="35">0<pos:position pos:line="12" pos:column="36"/></literal></expr>)<pos:position pos:line="12" pos:column="37"/></condition><then pos:line="12" pos:column="37">
	<block pos:line="13" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="14" pos:column="17">ERROR<pos:position pos:line="14" pos:column="22"/></name> <argument_list pos:line="14" pos:column="23">(<argument><expr><literal type="string" pos:line="14" pos:column="24">"network: Failed to open a listening socket."<pos:position pos:line="14" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="71"/></expr_stmt>
		<return pos:line="15" pos:column="17">return <expr><operator pos:line="15" pos:column="24">(<pos:position pos:line="15" pos:column="25"/></operator><operator pos:line="15" pos:column="25">-<pos:position pos:line="15" pos:column="26"/></operator><literal type="number" pos:line="15" pos:column="26">1<pos:position pos:line="15" pos:column="27"/></literal><operator pos:line="15" pos:column="27">)<pos:position pos:line="15" pos:column="28"/></operator></expr>;<pos:position pos:line="15" pos:column="29"/></return>
	}<pos:position pos:line="16" pos:column="10"/></block></then></if>

	<while pos:line="18" pos:column="9">while <condition pos:line="18" pos:column="15">(<expr><name pos:line="18" pos:column="16">listen_loop<pos:position pos:line="18" pos:column="27"/></name> <operator pos:line="18" pos:column="28">==<pos:position pos:line="18" pos:column="30"/></operator> <literal type="number" pos:line="18" pos:column="31">0<pos:position pos:line="18" pos:column="32"/></literal></expr>)<pos:position pos:line="18" pos:column="33"/></condition>
	<block pos:line="19" pos:column="9">{
		<expr_stmt><expr><name pos:line="20" pos:column="17">status<pos:position pos:line="20" pos:column="23"/></name> <operator pos:line="20" pos:column="24">=<pos:position pos:line="20" pos:column="25"/></operator> <call><name pos:line="20" pos:column="26">poll<pos:position pos:line="20" pos:column="30"/></name> <argument_list pos:line="20" pos:column="31">(<argument><expr><name pos:line="20" pos:column="32">listen_sockets<pos:position pos:line="20" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="48">listen_sockets_num<pos:position pos:line="20" pos:column="66"/></name></expr></argument>, <argument><expr><operator pos:line="20" pos:column="68">-<pos:position pos:line="20" pos:column="69"/></operator><literal type="number" pos:line="20" pos:column="69">1<pos:position pos:line="20" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="72"/></expr_stmt>

		<if pos:line="22" pos:column="17">if <condition pos:line="22" pos:column="20">(<expr><name pos:line="22" pos:column="21">status<pos:position pos:line="22" pos:column="27"/></name> <operator pos:line="22" pos:column="28">&lt;=<pos:position pos:line="22" pos:column="33"/></operator> <literal type="number" pos:line="22" pos:column="31">0<pos:position pos:line="22" pos:column="32"/></literal></expr>)<pos:position pos:line="22" pos:column="33"/></condition><then pos:line="22" pos:column="33">
		<block pos:line="23" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="24" pos:column="25">char<pos:position pos:line="24" pos:column="29"/></name></type> <name><name pos:line="24" pos:column="30">errbuf<pos:position pos:line="24" pos:column="36"/></name><index pos:line="24" pos:column="36">[<expr><literal type="number" pos:line="24" pos:column="37">1024<pos:position pos:line="24" pos:column="41"/></literal></expr>]<pos:position pos:line="24" pos:column="42"/></index></name></decl>;<pos:position pos:line="24" pos:column="43"/></decl_stmt>
			<if pos:line="25" pos:column="25">if <condition pos:line="25" pos:column="28">(<expr><name pos:line="25" pos:column="29">errno<pos:position pos:line="25" pos:column="34"/></name> <operator pos:line="25" pos:column="35">==<pos:position pos:line="25" pos:column="37"/></operator> <name pos:line="25" pos:column="38">EINTR<pos:position pos:line="25" pos:column="43"/></name></expr>)<pos:position pos:line="25" pos:column="44"/></condition><then pos:line="25" pos:column="44">
				<block type="pseudo"><continue pos:line="26" pos:column="33">continue;<pos:position pos:line="26" pos:column="42"/></continue></block></then></if>
			<expr_stmt><expr><call><name pos:line="27" pos:column="25">ERROR<pos:position pos:line="27" pos:column="30"/></name> <argument_list pos:line="27" pos:column="31">(<argument><expr><literal type="string" pos:line="27" pos:column="32">"poll failed: %s"<pos:position pos:line="27" pos:column="49"/></literal></expr></argument>,
					<argument><expr><call><name pos:line="28" pos:column="41">sstrerror<pos:position pos:line="28" pos:column="50"/></name> <argument_list pos:line="28" pos:column="51">(<argument><expr><name pos:line="28" pos:column="52">errno<pos:position pos:line="28" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="59">errbuf<pos:position pos:line="28" pos:column="65"/></name></expr></argument>, <argument><expr><sizeof pos:line="28" pos:column="67">sizeof <argument_list pos:line="28" pos:column="74">(<argument><expr><name pos:line="28" pos:column="75">errbuf<pos:position pos:line="28" pos:column="81"/></name></expr></argument>)<pos:position pos:line="28" pos:column="82"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="28" pos:column="83"/></argument_list></call></expr></argument>)<pos:position pos:line="28" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="85"/></expr_stmt>
			<return pos:line="29" pos:column="25">return <expr><operator pos:line="29" pos:column="32">(<pos:position pos:line="29" pos:column="33"/></operator><operator pos:line="29" pos:column="33">-<pos:position pos:line="29" pos:column="34"/></operator><literal type="number" pos:line="29" pos:column="34">1<pos:position pos:line="29" pos:column="35"/></literal><operator pos:line="29" pos:column="35">)<pos:position pos:line="29" pos:column="36"/></operator></expr>;<pos:position pos:line="29" pos:column="37"/></return>
		}<pos:position pos:line="30" pos:column="18"/></block></then></if>

		<for pos:line="32" pos:column="17">for <control pos:line="32" pos:column="21">(<init><expr><name pos:line="32" pos:column="22">i<pos:position pos:line="32" pos:column="23"/></name> <operator pos:line="32" pos:column="24">=<pos:position pos:line="32" pos:column="25"/></operator> <literal type="number" pos:line="32" pos:column="26">0<pos:position pos:line="32" pos:column="27"/></literal></expr>;<pos:position pos:line="32" pos:column="28"/></init> <condition><expr><operator pos:line="32" pos:column="29">(<pos:position pos:line="32" pos:column="30"/></operator><name pos:line="32" pos:column="30">i<pos:position pos:line="32" pos:column="31"/></name> <operator pos:line="32" pos:column="32">&lt;<pos:position pos:line="32" pos:column="36"/></operator> <name pos:line="32" pos:column="34">listen_sockets_num<pos:position pos:line="32" pos:column="52"/></name><operator pos:line="32" pos:column="52">)<pos:position pos:line="32" pos:column="53"/></operator> <operator pos:line="32" pos:column="54">&amp;&amp;<pos:position pos:line="32" pos:column="64"/></operator> <operator pos:line="32" pos:column="57">(<pos:position pos:line="32" pos:column="58"/></operator><name pos:line="32" pos:column="58">status<pos:position pos:line="32" pos:column="64"/></name> <operator pos:line="32" pos:column="65">&gt;<pos:position pos:line="32" pos:column="69"/></operator> <literal type="number" pos:line="32" pos:column="67">0<pos:position pos:line="32" pos:column="68"/></literal><operator pos:line="32" pos:column="68">)<pos:position pos:line="32" pos:column="69"/></operator></expr>;<pos:position pos:line="32" pos:column="70"/></condition> <incr><expr><name pos:line="32" pos:column="71">i<pos:position pos:line="32" pos:column="72"/></name><operator pos:line="32" pos:column="72">++<pos:position pos:line="32" pos:column="74"/></operator></expr></incr>)<pos:position pos:line="32" pos:column="75"/></control>
		<block pos:line="33" pos:column="17">{
			<if pos:line="34" pos:column="25">if <condition pos:line="34" pos:column="28">(<expr><operator pos:line="34" pos:column="29">(<pos:position pos:line="34" pos:column="30"/></operator><name><name pos:line="34" pos:column="30">listen_sockets<pos:position pos:line="34" pos:column="44"/></name><index pos:line="34" pos:column="44">[<expr><name pos:line="34" pos:column="45">i<pos:position pos:line="34" pos:column="46"/></name></expr>]<pos:position pos:line="34" pos:column="47"/></index></name><operator pos:line="34" pos:column="47">.<pos:position pos:line="34" pos:column="48"/></operator><name pos:line="34" pos:column="48">revents<pos:position pos:line="34" pos:column="55"/></name> <operator pos:line="34" pos:column="56">&amp;<pos:position pos:line="34" pos:column="61"/></operator> <operator pos:line="34" pos:column="58">(<pos:position pos:line="34" pos:column="59"/></operator><name pos:line="34" pos:column="59">POLLIN<pos:position pos:line="34" pos:column="65"/></name> <operator pos:line="34" pos:column="66">|<pos:position pos:line="34" pos:column="67"/></operator> <name pos:line="34" pos:column="68">POLLPRI<pos:position pos:line="34" pos:column="75"/></name><operator pos:line="34" pos:column="75">)<pos:position pos:line="34" pos:column="76"/></operator><operator pos:line="34" pos:column="76">)<pos:position pos:line="34" pos:column="77"/></operator> <operator pos:line="34" pos:column="78">==<pos:position pos:line="34" pos:column="80"/></operator> <literal type="number" pos:line="34" pos:column="81">0<pos:position pos:line="34" pos:column="82"/></literal></expr>)<pos:position pos:line="34" pos:column="83"/></condition><then pos:line="34" pos:column="83">
				<block type="pseudo"><continue pos:line="35" pos:column="33">continue;<pos:position pos:line="35" pos:column="42"/></continue></block></then></if>
			<expr_stmt><expr><name pos:line="36" pos:column="25">status<pos:position pos:line="36" pos:column="31"/></name><operator pos:line="36" pos:column="31">--<pos:position pos:line="36" pos:column="33"/></operator></expr>;<pos:position pos:line="36" pos:column="34"/></expr_stmt>

			<expr_stmt><expr><name pos:line="38" pos:column="25">buffer_len<pos:position pos:line="38" pos:column="35"/></name> <operator pos:line="38" pos:column="36">=<pos:position pos:line="38" pos:column="37"/></operator> <call><name pos:line="38" pos:column="38">recv<pos:position pos:line="38" pos:column="42"/></name> <argument_list pos:line="38" pos:column="43">(<argument><expr><name><name pos:line="38" pos:column="44">listen_sockets<pos:position pos:line="38" pos:column="58"/></name><index pos:line="38" pos:column="58">[<expr><name pos:line="38" pos:column="59">i<pos:position pos:line="38" pos:column="60"/></name></expr>]<pos:position pos:line="38" pos:column="61"/></index></name><operator pos:line="38" pos:column="61">.<pos:position pos:line="38" pos:column="62"/></operator><name pos:line="38" pos:column="62">fd<pos:position pos:line="38" pos:column="64"/></name></expr></argument>,
					<argument><expr><name pos:line="39" pos:column="41">buffer<pos:position pos:line="39" pos:column="47"/></name></expr></argument>, <argument><expr><sizeof pos:line="39" pos:column="49">sizeof <argument_list pos:line="39" pos:column="56">(<argument><expr><name pos:line="39" pos:column="57">buffer<pos:position pos:line="39" pos:column="63"/></name></expr></argument>)<pos:position pos:line="39" pos:column="64"/></argument_list></sizeof></expr></argument>,
					<argument><expr><literal type="number" pos:line="40" pos:column="41">0<pos:position pos:line="40" pos:column="42"/></literal></expr></argument> <comment type="block" pos:line="40" pos:column="43">/* no flags */</comment>)<pos:position pos:line="40" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="59"/></expr_stmt>
			<if pos:line="41" pos:column="25">if <condition pos:line="41" pos:column="28">(<expr><name pos:line="41" pos:column="29">buffer_len<pos:position pos:line="41" pos:column="39"/></name> <operator pos:line="41" pos:column="40">&lt;<pos:position pos:line="41" pos:column="44"/></operator> <literal type="number" pos:line="41" pos:column="42">0<pos:position pos:line="41" pos:column="43"/></literal></expr>)<pos:position pos:line="41" pos:column="44"/></condition><then pos:line="41" pos:column="44">
			<block pos:line="42" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="43" pos:column="33">char<pos:position pos:line="43" pos:column="37"/></name></type> <name><name pos:line="43" pos:column="38">errbuf<pos:position pos:line="43" pos:column="44"/></name><index pos:line="43" pos:column="44">[<expr><literal type="number" pos:line="43" pos:column="45">1024<pos:position pos:line="43" pos:column="49"/></literal></expr>]<pos:position pos:line="43" pos:column="50"/></index></name></decl>;<pos:position pos:line="43" pos:column="51"/></decl_stmt>
				<expr_stmt><expr><call><name pos:line="44" pos:column="33">ERROR<pos:position pos:line="44" pos:column="38"/></name> <argument_list pos:line="44" pos:column="39">(<argument><expr><literal type="string" pos:line="44" pos:column="40">"recv failed: %s"<pos:position pos:line="44" pos:column="57"/></literal></expr></argument>,
						<argument><expr><call><name pos:line="45" pos:column="49">sstrerror<pos:position pos:line="45" pos:column="58"/></name> <argument_list pos:line="45" pos:column="59">(<argument><expr><name pos:line="45" pos:column="60">errno<pos:position pos:line="45" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="67">errbuf<pos:position pos:line="45" pos:column="73"/></name></expr></argument>,
							<argument><expr><sizeof pos:line="46" pos:column="57">sizeof <argument_list pos:line="46" pos:column="64">(<argument><expr><name pos:line="46" pos:column="65">errbuf<pos:position pos:line="46" pos:column="71"/></name></expr></argument>)<pos:position pos:line="46" pos:column="72"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="46" pos:column="73"/></argument_list></call></expr></argument>)<pos:position pos:line="46" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="75"/></expr_stmt>
				<return pos:line="47" pos:column="33">return <expr><operator pos:line="47" pos:column="40">(<pos:position pos:line="47" pos:column="41"/></operator><operator pos:line="47" pos:column="41">-<pos:position pos:line="47" pos:column="42"/></operator><literal type="number" pos:line="47" pos:column="42">1<pos:position pos:line="47" pos:column="43"/></literal><operator pos:line="47" pos:column="43">)<pos:position pos:line="47" pos:column="44"/></operator></expr>;<pos:position pos:line="47" pos:column="45"/></return>
			}<pos:position pos:line="48" pos:column="26"/></block></then></if>

			<expr_stmt><expr><call><name pos:line="50" pos:column="25">parse_packet<pos:position pos:line="50" pos:column="37"/></name> <argument_list pos:line="50" pos:column="38">(<argument><expr><name pos:line="50" pos:column="39">buffer<pos:position pos:line="50" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="47">buffer_len<pos:position pos:line="50" pos:column="57"/></name></expr></argument>)<pos:position pos:line="50" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="59"/></expr_stmt>
		}<pos:position pos:line="51" pos:column="18"/></block></for> <comment type="block" pos:line="51" pos:column="19">/* for (listen_sockets) */</comment>
	}<pos:position pos:line="52" pos:column="10"/></block></while> <comment type="block" pos:line="52" pos:column="11">/* while (listen_loop == 0) */</comment>

	<return pos:line="54" pos:column="9">return <expr><operator pos:line="54" pos:column="16">(<pos:position pos:line="54" pos:column="17"/></operator><literal type="number" pos:line="54" pos:column="17">0<pos:position pos:line="54" pos:column="18"/></literal><operator pos:line="54" pos:column="18">)<pos:position pos:line="54" pos:column="19"/></operator></expr>;<pos:position pos:line="54" pos:column="20"/></return>
}<pos:position pos:line="55" pos:column="2"/></block></function></unit>
