<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_2759_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">main<pos:position pos:line="1" pos:column="9"/></name><parameter_list pos:line="1" pos:column="9">(<parameter><decl><type><name pos:line="1" pos:column="10">int<pos:position pos:line="1" pos:column="13"/></name></type> <name pos:line="1" pos:column="14">argc<pos:position pos:line="1" pos:column="18"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="20">char<pos:position pos:line="1" pos:column="24"/></name> <modifier pos:line="1" pos:column="25">*<pos:position pos:line="1" pos:column="26"/></modifier><modifier pos:line="1" pos:column="26">*<pos:position pos:line="1" pos:column="27"/></modifier></type><name pos:line="1" pos:column="27">argv<pos:position pos:line="1" pos:column="31"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="32"/></parameter_list> <block pos:line="1" pos:column="33">{
<cpp:if pos:line="2" pos:column="1">#<cpp:directive pos:line="2" pos:column="2">if<pos:position pos:line="2" pos:column="4"/></cpp:directive> <expr><name pos:line="2" pos:column="5">COLLECT_DAEMON<pos:position pos:line="2" pos:column="19"/></name></expr></cpp:if>
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">pid_t<pos:position pos:line="3" pos:column="8"/></name></type> <name pos:line="3" pos:column="9">pid<pos:position pos:line="3" pos:column="12"/></name></decl>;<pos:position pos:line="3" pos:column="13"/></decl_stmt>
<cpp:endif pos:line="4" pos:column="1">#<cpp:directive pos:line="4" pos:column="2">endif<pos:position pos:line="4" pos:column="7"/></cpp:directive></cpp:endif>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">int<pos:position pos:line="5" pos:column="6"/></name></type> <name pos:line="5" pos:column="7">exit_status<pos:position pos:line="5" pos:column="18"/></name> <init pos:line="5" pos:column="19">= <expr><literal type="number" pos:line="5" pos:column="21">0<pos:position pos:line="5" pos:column="22"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="23"/></decl_stmt>

  <decl_stmt><decl><type><name><name pos:line="7" pos:column="3">struct<pos:position pos:line="7" pos:column="9"/></name> <name pos:line="7" pos:column="10">cmdline_config<pos:position pos:line="7" pos:column="24"/></name></name></type> <name pos:line="7" pos:column="25">config<pos:position pos:line="7" pos:column="31"/></name> <init pos:line="7" pos:column="32">= <expr><block pos:line="7" pos:column="34">{
      <expr><operator pos:line="8" pos:column="7">.<pos:position pos:line="8" pos:column="8"/></operator><name pos:line="8" pos:column="8">daemonize<pos:position pos:line="8" pos:column="17"/></name> <operator pos:line="8" pos:column="18">=<pos:position pos:line="8" pos:column="19"/></operator> <literal type="number" pos:line="8" pos:column="20">1<pos:position pos:line="8" pos:column="21"/></literal></expr>, <expr><operator pos:line="8" pos:column="23">.<pos:position pos:line="8" pos:column="24"/></operator><name pos:line="8" pos:column="24">create_basedir<pos:position pos:line="8" pos:column="38"/></name> <operator pos:line="8" pos:column="39">=<pos:position pos:line="8" pos:column="40"/></operator> <literal type="number" pos:line="8" pos:column="41">1<pos:position pos:line="8" pos:column="42"/></literal></expr>, <expr><operator pos:line="8" pos:column="44">.<pos:position pos:line="8" pos:column="45"/></operator><name pos:line="8" pos:column="45">configfile<pos:position pos:line="8" pos:column="55"/></name> <operator pos:line="8" pos:column="56">=<pos:position pos:line="8" pos:column="57"/></operator> <name pos:line="8" pos:column="58">CONFIGFILE<pos:position pos:line="8" pos:column="68"/></name></expr>,
  }<pos:position pos:line="9" pos:column="4"/></block></expr></init></decl>;<pos:position pos:line="9" pos:column="5"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="11" pos:column="3">read_cmdline<pos:position pos:line="11" pos:column="15"/></name><argument_list pos:line="11" pos:column="15">(<argument><expr><name pos:line="11" pos:column="16">argc<pos:position pos:line="11" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="22">argv<pos:position pos:line="11" pos:column="26"/></name></expr></argument>, <argument><expr><operator pos:line="11" pos:column="28">&amp;<pos:position pos:line="11" pos:column="33"/></operator><name pos:line="11" pos:column="29">config<pos:position pos:line="11" pos:column="35"/></name></expr></argument>)<pos:position pos:line="11" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="37"/></expr_stmt>

  <if pos:line="13" pos:column="3">if <condition pos:line="13" pos:column="6">(<expr><name><name pos:line="13" pos:column="7">config<pos:position pos:line="13" pos:column="13"/></name><operator pos:line="13" pos:column="13">.<pos:position pos:line="13" pos:column="14"/></operator><name pos:line="13" pos:column="14">test_config<pos:position pos:line="13" pos:column="25"/></name></name></expr>)<pos:position pos:line="13" pos:column="26"/></condition><then pos:line="13" pos:column="26">
    <block type="pseudo"><return pos:line="14" pos:column="5">return <expr><literal type="number" pos:line="14" pos:column="12">0<pos:position pos:line="14" pos:column="13"/></literal></expr>;<pos:position pos:line="14" pos:column="14"/></return></block></then></if>

  <if pos:line="16" pos:column="3">if <condition pos:line="16" pos:column="6">(<expr><name pos:line="16" pos:column="7">optind<pos:position pos:line="16" pos:column="13"/></name> <operator pos:line="16" pos:column="14">&lt;<pos:position pos:line="16" pos:column="18"/></operator> <name pos:line="16" pos:column="16">argc<pos:position pos:line="16" pos:column="20"/></name></expr>)<pos:position pos:line="16" pos:column="21"/></condition><then pos:line="16" pos:column="21">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="17" pos:column="5">exit_usage<pos:position pos:line="17" pos:column="15"/></name><argument_list pos:line="17" pos:column="15">(<argument><expr><literal type="number" pos:line="17" pos:column="16">1<pos:position pos:line="17" pos:column="17"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="19"/></expr_stmt></block></then></if>

  <expr_stmt><expr><call><name pos:line="19" pos:column="3">plugin_init_ctx<pos:position pos:line="19" pos:column="18"/></name><argument_list pos:line="19" pos:column="18">()<pos:position pos:line="19" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="21"/></expr_stmt>

  <decl_stmt><decl><type><name pos:line="21" pos:column="3">int<pos:position pos:line="21" pos:column="6"/></name></type> <name pos:line="21" pos:column="7">status<pos:position pos:line="21" pos:column="13"/></name></decl>;<pos:position pos:line="21" pos:column="14"/></decl_stmt>
  <if pos:line="22" pos:column="3">if <condition pos:line="22" pos:column="6">(<expr><operator pos:line="22" pos:column="7">(<pos:position pos:line="22" pos:column="8"/></operator><name pos:line="22" pos:column="8">status<pos:position pos:line="22" pos:column="14"/></name> <operator pos:line="22" pos:column="15">=<pos:position pos:line="22" pos:column="16"/></operator> <call><name pos:line="22" pos:column="17">configure_collectd<pos:position pos:line="22" pos:column="35"/></name><argument_list pos:line="22" pos:column="35">(<argument><expr><operator pos:line="22" pos:column="36">&amp;<pos:position pos:line="22" pos:column="41"/></operator><name pos:line="22" pos:column="37">config<pos:position pos:line="22" pos:column="43"/></name></expr></argument>)<pos:position pos:line="22" pos:column="44"/></argument_list></call><operator pos:line="22" pos:column="44">)<pos:position pos:line="22" pos:column="45"/></operator> <operator pos:line="22" pos:column="46">!=<pos:position pos:line="22" pos:column="48"/></operator> <literal type="number" pos:line="22" pos:column="49">0<pos:position pos:line="22" pos:column="50"/></literal></expr>)<pos:position pos:line="22" pos:column="51"/></condition><then pos:line="22" pos:column="51">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="23" pos:column="5">exit<pos:position pos:line="23" pos:column="9"/></name><argument_list pos:line="23" pos:column="9">(<argument><expr><name pos:line="23" pos:column="10">EXIT_FAILURE<pos:position pos:line="23" pos:column="22"/></name></expr></argument>)<pos:position pos:line="23" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="24"/></expr_stmt></block></then></if>

<cpp:if pos:line="25" pos:column="1">#<cpp:directive pos:line="25" pos:column="2">if<pos:position pos:line="25" pos:column="4"/></cpp:directive> <expr><name pos:line="25" pos:column="5">COLLECT_DAEMON<pos:position pos:line="25" pos:column="19"/></name></expr></cpp:if>
  <comment type="block" pos:line="26" pos:column="3">/*
   * fork off child
   */</comment>
  <decl_stmt><decl><type><name><name pos:line="29" pos:column="3">struct<pos:position pos:line="29" pos:column="9"/></name> <name pos:line="29" pos:column="10">sigaction<pos:position pos:line="29" pos:column="19"/></name></name></type> <name pos:line="29" pos:column="20">sig_chld_action<pos:position pos:line="29" pos:column="35"/></name> <init pos:line="29" pos:column="36">= <expr><block pos:line="29" pos:column="38">{<expr><operator pos:line="29" pos:column="39">.<pos:position pos:line="29" pos:column="40"/></operator><name pos:line="29" pos:column="40">sa_handler<pos:position pos:line="29" pos:column="50"/></name> <operator pos:line="29" pos:column="51">=<pos:position pos:line="29" pos:column="52"/></operator> <name pos:line="29" pos:column="53">SIG_IGN<pos:position pos:line="29" pos:column="60"/></name></expr>}<pos:position pos:line="29" pos:column="61"/></block></expr></init></decl>;<pos:position pos:line="29" pos:column="62"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="31" pos:column="3">sigaction<pos:position pos:line="31" pos:column="12"/></name><argument_list pos:line="31" pos:column="12">(<argument><expr><name pos:line="31" pos:column="13">SIGCHLD<pos:position pos:line="31" pos:column="20"/></name></expr></argument>, <argument><expr><operator pos:line="31" pos:column="22">&amp;<pos:position pos:line="31" pos:column="27"/></operator><name pos:line="31" pos:column="23">sig_chld_action<pos:position pos:line="31" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="40">NULL<pos:position pos:line="31" pos:column="44"/></name></expr></argument>)<pos:position pos:line="31" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="46"/></expr_stmt>

  <comment type="block" pos:line="33" pos:column="3">/*
   * Only daemonize if we're not being supervised
   * by upstart or systemd (when using Linux).
   */</comment>
  <if pos:line="37" pos:column="3">if <condition pos:line="37" pos:column="6">(<expr><name><name pos:line="37" pos:column="7">config<pos:position pos:line="37" pos:column="13"/></name><operator pos:line="37" pos:column="13">.<pos:position pos:line="37" pos:column="14"/></operator><name pos:line="37" pos:column="14">daemonize<pos:position pos:line="37" pos:column="23"/></name></name>
<cpp:ifdef pos:line="38" pos:column="1">#<cpp:directive pos:line="38" pos:column="2">ifdef<pos:position pos:line="38" pos:column="7"/></cpp:directive> <name pos:line="38" pos:column="8">KERNEL_LINUX<pos:position pos:line="38" pos:column="20"/></name></cpp:ifdef>
      <operator pos:line="39" pos:column="7">&amp;&amp;<pos:position pos:line="39" pos:column="17"/></operator> <call><name pos:line="39" pos:column="10">notify_upstart<pos:position pos:line="39" pos:column="24"/></name><argument_list pos:line="39" pos:column="24">()<pos:position pos:line="39" pos:column="26"/></argument_list></call> <operator pos:line="39" pos:column="27">==<pos:position pos:line="39" pos:column="29"/></operator> <literal type="number" pos:line="39" pos:column="30">0<pos:position pos:line="39" pos:column="31"/></literal> <operator pos:line="39" pos:column="32">&amp;&amp;<pos:position pos:line="39" pos:column="42"/></operator> <call><name pos:line="39" pos:column="35">notify_systemd<pos:position pos:line="39" pos:column="49"/></name><argument_list pos:line="39" pos:column="49">()<pos:position pos:line="39" pos:column="51"/></argument_list></call> <operator pos:line="39" pos:column="52">==<pos:position pos:line="39" pos:column="54"/></operator> <literal type="number" pos:line="39" pos:column="55">0<pos:position pos:line="39" pos:column="56"/></literal></expr>
<cpp:endif pos:line="40" pos:column="1">#<cpp:directive pos:line="40" pos:column="2">endif<pos:position pos:line="40" pos:column="7"/></cpp:directive></cpp:endif>
      )<pos:position pos:line="41" pos:column="8"/></condition><then pos:line="41" pos:column="8"> <block pos:line="41" pos:column="9">{
    <decl_stmt><decl><type><name pos:line="42" pos:column="5">int<pos:position pos:line="42" pos:column="8"/></name></type> <name pos:line="42" pos:column="9">status<pos:position pos:line="42" pos:column="15"/></name></decl>;<pos:position pos:line="42" pos:column="16"/></decl_stmt>

    <if pos:line="44" pos:column="5">if <condition pos:line="44" pos:column="8">(<expr><operator pos:line="44" pos:column="9">(<pos:position pos:line="44" pos:column="10"/></operator><name pos:line="44" pos:column="10">pid<pos:position pos:line="44" pos:column="13"/></name> <operator pos:line="44" pos:column="14">=<pos:position pos:line="44" pos:column="15"/></operator> <call><name pos:line="44" pos:column="16">fork<pos:position pos:line="44" pos:column="20"/></name><argument_list pos:line="44" pos:column="20">()<pos:position pos:line="44" pos:column="22"/></argument_list></call><operator pos:line="44" pos:column="22">)<pos:position pos:line="44" pos:column="23"/></operator> <operator pos:line="44" pos:column="24">==<pos:position pos:line="44" pos:column="26"/></operator> <operator pos:line="44" pos:column="27">-<pos:position pos:line="44" pos:column="28"/></operator><literal type="number" pos:line="44" pos:column="28">1<pos:position pos:line="44" pos:column="29"/></literal></expr>)<pos:position pos:line="44" pos:column="30"/></condition><then pos:line="44" pos:column="30"> <block pos:line="44" pos:column="31">{
      <comment type="block" pos:line="45" pos:column="7">/* error */</comment>
      <decl_stmt><decl><type><name pos:line="46" pos:column="7">char<pos:position pos:line="46" pos:column="11"/></name></type> <name><name pos:line="46" pos:column="12">errbuf<pos:position pos:line="46" pos:column="18"/></name><index pos:line="46" pos:column="18">[<expr><literal type="number" pos:line="46" pos:column="19">1024<pos:position pos:line="46" pos:column="23"/></literal></expr>]<pos:position pos:line="46" pos:column="24"/></index></name></decl>;<pos:position pos:line="46" pos:column="25"/></decl_stmt>
      <expr_stmt><expr><call><name pos:line="47" pos:column="7">fprintf<pos:position pos:line="47" pos:column="14"/></name><argument_list pos:line="47" pos:column="14">(<argument><expr><name pos:line="47" pos:column="15">stderr<pos:position pos:line="47" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="47" pos:column="23">"fork: %s"<pos:position pos:line="47" pos:column="33"/></literal></expr></argument>, <argument><expr><call><name pos:line="47" pos:column="35">sstrerror<pos:position pos:line="47" pos:column="44"/></name><argument_list pos:line="47" pos:column="44">(<argument><expr><name pos:line="47" pos:column="45">errno<pos:position pos:line="47" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="52">errbuf<pos:position pos:line="47" pos:column="58"/></name></expr></argument>, <argument><expr><sizeof pos:line="47" pos:column="60">sizeof<argument_list pos:line="47" pos:column="66">(<argument><expr><name pos:line="47" pos:column="67">errbuf<pos:position pos:line="47" pos:column="73"/></name></expr></argument>)<pos:position pos:line="47" pos:column="74"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="47" pos:column="75"/></argument_list></call></expr></argument>)<pos:position pos:line="47" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="77"/></expr_stmt>
      <return pos:line="48" pos:column="7">return <expr><literal type="number" pos:line="48" pos:column="14">1<pos:position pos:line="48" pos:column="15"/></literal></expr>;<pos:position pos:line="48" pos:column="16"/></return>
    }<pos:position pos:line="49" pos:column="6"/></block></then> <elseif pos:line="49" pos:column="7">else <if pos:line="49" pos:column="12">if <condition pos:line="49" pos:column="15">(<expr><name pos:line="49" pos:column="16">pid<pos:position pos:line="49" pos:column="19"/></name> <operator pos:line="49" pos:column="20">!=<pos:position pos:line="49" pos:column="22"/></operator> <literal type="number" pos:line="49" pos:column="23">0<pos:position pos:line="49" pos:column="24"/></literal></expr>)<pos:position pos:line="49" pos:column="25"/></condition><then pos:line="49" pos:column="25"> <block pos:line="49" pos:column="26">{
      <comment type="block" pos:line="50" pos:column="7">/* parent */</comment>
      <comment type="block" pos:line="51" pos:column="7">/* printf ("Running (PID %i)\n", pid); */</comment>
      <return pos:line="52" pos:column="7">return <expr><literal type="number" pos:line="52" pos:column="14">0<pos:position pos:line="52" pos:column="15"/></literal></expr>;<pos:position pos:line="52" pos:column="16"/></return>
    }<pos:position pos:line="53" pos:column="6"/></block></then></if></elseif></if>

    <comment type="block" pos:line="55" pos:column="5">/* Detach from session */</comment>
    <expr_stmt><expr><call><name pos:line="56" pos:column="5">setsid<pos:position pos:line="56" pos:column="11"/></name><argument_list pos:line="56" pos:column="11">()<pos:position pos:line="56" pos:column="13"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="14"/></expr_stmt>

    <comment type="block" pos:line="58" pos:column="5">/* Write pidfile */</comment>
    <if pos:line="59" pos:column="5">if <condition pos:line="59" pos:column="8">(<expr><call><name pos:line="59" pos:column="9">pidfile_create<pos:position pos:line="59" pos:column="23"/></name><argument_list pos:line="59" pos:column="23">()<pos:position pos:line="59" pos:column="25"/></argument_list></call></expr>)<pos:position pos:line="59" pos:column="26"/></condition><then pos:line="59" pos:column="26">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="60" pos:column="7">exit<pos:position pos:line="60" pos:column="11"/></name><argument_list pos:line="60" pos:column="11">(<argument><expr><literal type="number" pos:line="60" pos:column="12">2<pos:position pos:line="60" pos:column="13"/></literal></expr></argument>)<pos:position pos:line="60" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="15"/></expr_stmt></block></then></if>

    <comment type="block" pos:line="62" pos:column="5">/* close standard descriptors */</comment>
    <expr_stmt><expr><call><name pos:line="63" pos:column="5">close<pos:position pos:line="63" pos:column="10"/></name><argument_list pos:line="63" pos:column="10">(<argument><expr><literal type="number" pos:line="63" pos:column="11">2<pos:position pos:line="63" pos:column="12"/></literal></expr></argument>)<pos:position pos:line="63" pos:column="13"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="14"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="64" pos:column="5">close<pos:position pos:line="64" pos:column="10"/></name><argument_list pos:line="64" pos:column="10">(<argument><expr><literal type="number" pos:line="64" pos:column="11">1<pos:position pos:line="64" pos:column="12"/></literal></expr></argument>)<pos:position pos:line="64" pos:column="13"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="14"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="65" pos:column="5">close<pos:position pos:line="65" pos:column="10"/></name><argument_list pos:line="65" pos:column="10">(<argument><expr><literal type="number" pos:line="65" pos:column="11">0<pos:position pos:line="65" pos:column="12"/></literal></expr></argument>)<pos:position pos:line="65" pos:column="13"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="14"/></expr_stmt>

    <expr_stmt><expr><name pos:line="67" pos:column="5">status<pos:position pos:line="67" pos:column="11"/></name> <operator pos:line="67" pos:column="12">=<pos:position pos:line="67" pos:column="13"/></operator> <call><name pos:line="67" pos:column="14">open<pos:position pos:line="67" pos:column="18"/></name><argument_list pos:line="67" pos:column="18">(<argument><expr><literal type="string" pos:line="67" pos:column="19">"/dev/null"<pos:position pos:line="67" pos:column="30"/></literal></expr></argument>, <argument><expr><name pos:line="67" pos:column="32">O_RDWR<pos:position pos:line="67" pos:column="38"/></name></expr></argument>)<pos:position pos:line="67" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="40"/></expr_stmt>
    <if pos:line="68" pos:column="5">if <condition pos:line="68" pos:column="8">(<expr><name pos:line="68" pos:column="9">status<pos:position pos:line="68" pos:column="15"/></name> <operator pos:line="68" pos:column="16">!=<pos:position pos:line="68" pos:column="18"/></operator> <literal type="number" pos:line="68" pos:column="19">0<pos:position pos:line="68" pos:column="20"/></literal></expr>)<pos:position pos:line="68" pos:column="21"/></condition><then pos:line="68" pos:column="21"> <block pos:line="68" pos:column="22">{
      <expr_stmt><expr><call><name pos:line="69" pos:column="7">ERROR<pos:position pos:line="69" pos:column="12"/></name><argument_list pos:line="69" pos:column="12">(<argument><expr><literal type="string" pos:line="69" pos:column="13">"Error: Could not connect `STDIN' to `/dev/null' (status %d)"<pos:position pos:line="69" pos:column="74"/></literal></expr></argument>,
            <argument><expr><name pos:line="70" pos:column="13">status<pos:position pos:line="70" pos:column="19"/></name></expr></argument>)<pos:position pos:line="70" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="21"/></expr_stmt>
      <return pos:line="71" pos:column="7">return <expr><literal type="number" pos:line="71" pos:column="14">1<pos:position pos:line="71" pos:column="15"/></literal></expr>;<pos:position pos:line="71" pos:column="16"/></return>
    }<pos:position pos:line="72" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="74" pos:column="5">status<pos:position pos:line="74" pos:column="11"/></name> <operator pos:line="74" pos:column="12">=<pos:position pos:line="74" pos:column="13"/></operator> <call><name pos:line="74" pos:column="14">dup<pos:position pos:line="74" pos:column="17"/></name><argument_list pos:line="74" pos:column="17">(<argument><expr><literal type="number" pos:line="74" pos:column="18">0<pos:position pos:line="74" pos:column="19"/></literal></expr></argument>)<pos:position pos:line="74" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="21"/></expr_stmt>
    <if pos:line="75" pos:column="5">if <condition pos:line="75" pos:column="8">(<expr><name pos:line="75" pos:column="9">status<pos:position pos:line="75" pos:column="15"/></name> <operator pos:line="75" pos:column="16">!=<pos:position pos:line="75" pos:column="18"/></operator> <literal type="number" pos:line="75" pos:column="19">1<pos:position pos:line="75" pos:column="20"/></literal></expr>)<pos:position pos:line="75" pos:column="21"/></condition><then pos:line="75" pos:column="21"> <block pos:line="75" pos:column="22">{
      <expr_stmt><expr><call><name pos:line="76" pos:column="7">ERROR<pos:position pos:line="76" pos:column="12"/></name><argument_list pos:line="76" pos:column="12">(<argument><expr><literal type="string" pos:line="76" pos:column="13">"Error: Could not connect `STDOUT' to `/dev/null' (status %d)"<pos:position pos:line="76" pos:column="75"/></literal></expr></argument>,
            <argument><expr><name pos:line="77" pos:column="13">status<pos:position pos:line="77" pos:column="19"/></name></expr></argument>)<pos:position pos:line="77" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="21"/></expr_stmt>
      <return pos:line="78" pos:column="7">return <expr><literal type="number" pos:line="78" pos:column="14">1<pos:position pos:line="78" pos:column="15"/></literal></expr>;<pos:position pos:line="78" pos:column="16"/></return>
    }<pos:position pos:line="79" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="81" pos:column="5">status<pos:position pos:line="81" pos:column="11"/></name> <operator pos:line="81" pos:column="12">=<pos:position pos:line="81" pos:column="13"/></operator> <call><name pos:line="81" pos:column="14">dup<pos:position pos:line="81" pos:column="17"/></name><argument_list pos:line="81" pos:column="17">(<argument><expr><literal type="number" pos:line="81" pos:column="18">0<pos:position pos:line="81" pos:column="19"/></literal></expr></argument>)<pos:position pos:line="81" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="21"/></expr_stmt>
    <if pos:line="82" pos:column="5">if <condition pos:line="82" pos:column="8">(<expr><name pos:line="82" pos:column="9">status<pos:position pos:line="82" pos:column="15"/></name> <operator pos:line="82" pos:column="16">!=<pos:position pos:line="82" pos:column="18"/></operator> <literal type="number" pos:line="82" pos:column="19">2<pos:position pos:line="82" pos:column="20"/></literal></expr>)<pos:position pos:line="82" pos:column="21"/></condition><then pos:line="82" pos:column="21"> <block pos:line="82" pos:column="22">{
      <expr_stmt><expr><call><name pos:line="83" pos:column="7">ERROR<pos:position pos:line="83" pos:column="12"/></name><argument_list pos:line="83" pos:column="12">(<argument><expr><literal type="string" pos:line="83" pos:column="13">"Error: Could not connect `STDERR' to `/dev/null', (status %d)"<pos:position pos:line="83" pos:column="76"/></literal></expr></argument>,
            <argument><expr><name pos:line="84" pos:column="13">status<pos:position pos:line="84" pos:column="19"/></name></expr></argument>)<pos:position pos:line="84" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="21"/></expr_stmt>
      <return pos:line="85" pos:column="7">return <expr><literal type="number" pos:line="85" pos:column="14">1<pos:position pos:line="85" pos:column="15"/></literal></expr>;<pos:position pos:line="85" pos:column="16"/></return>
    }<pos:position pos:line="86" pos:column="6"/></block></then></if>
  }<pos:position pos:line="87" pos:column="4"/></block></then></if>    <comment type="block" pos:line="87" pos:column="8">/* if (config.daemonize) */</comment>
<cpp:endif pos:line="88" pos:column="1">#<cpp:directive pos:line="88" pos:column="2">endif<pos:position pos:line="88" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="88" pos:column="8">/* COLLECT_DAEMON */</comment>

  <decl_stmt><decl><type><name><name pos:line="90" pos:column="3">struct<pos:position pos:line="90" pos:column="9"/></name> <name pos:line="90" pos:column="10">sigaction<pos:position pos:line="90" pos:column="19"/></name></name></type> <name pos:line="90" pos:column="20">sig_pipe_action<pos:position pos:line="90" pos:column="35"/></name> <init pos:line="90" pos:column="36">= <expr><block pos:line="90" pos:column="38">{<expr><operator pos:line="90" pos:column="39">.<pos:position pos:line="90" pos:column="40"/></operator><name pos:line="90" pos:column="40">sa_handler<pos:position pos:line="90" pos:column="50"/></name> <operator pos:line="90" pos:column="51">=<pos:position pos:line="90" pos:column="52"/></operator> <name pos:line="90" pos:column="53">SIG_IGN<pos:position pos:line="90" pos:column="60"/></name></expr>}<pos:position pos:line="90" pos:column="61"/></block></expr></init></decl>;<pos:position pos:line="90" pos:column="62"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="92" pos:column="3">sigaction<pos:position pos:line="92" pos:column="12"/></name><argument_list pos:line="92" pos:column="12">(<argument><expr><name pos:line="92" pos:column="13">SIGPIPE<pos:position pos:line="92" pos:column="20"/></name></expr></argument>, <argument><expr><operator pos:line="92" pos:column="22">&amp;<pos:position pos:line="92" pos:column="27"/></operator><name pos:line="92" pos:column="23">sig_pipe_action<pos:position pos:line="92" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="92" pos:column="40">NULL<pos:position pos:line="92" pos:column="44"/></name></expr></argument>)<pos:position pos:line="92" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="46"/></expr_stmt>

  <comment type="block" pos:line="94" pos:column="3">/*
   * install signal handlers
   */</comment>
  <decl_stmt><decl><type><name><name pos:line="97" pos:column="3">struct<pos:position pos:line="97" pos:column="9"/></name> <name pos:line="97" pos:column="10">sigaction<pos:position pos:line="97" pos:column="19"/></name></name></type> <name pos:line="97" pos:column="20">sig_int_action<pos:position pos:line="97" pos:column="34"/></name> <init pos:line="97" pos:column="35">= <expr><block pos:line="97" pos:column="37">{<expr><operator pos:line="97" pos:column="38">.<pos:position pos:line="97" pos:column="39"/></operator><name pos:line="97" pos:column="39">sa_handler<pos:position pos:line="97" pos:column="49"/></name> <operator pos:line="97" pos:column="50">=<pos:position pos:line="97" pos:column="51"/></operator> <name pos:line="97" pos:column="52">sig_int_handler<pos:position pos:line="97" pos:column="67"/></name></expr>}<pos:position pos:line="97" pos:column="68"/></block></expr></init></decl>;<pos:position pos:line="97" pos:column="69"/></decl_stmt>

  <if pos:line="99" pos:column="3">if <condition pos:line="99" pos:column="6">(<expr><literal type="number" pos:line="99" pos:column="7">0<pos:position pos:line="99" pos:column="8"/></literal> <operator pos:line="99" pos:column="9">!=<pos:position pos:line="99" pos:column="11"/></operator> <call><name pos:line="99" pos:column="12">sigaction<pos:position pos:line="99" pos:column="21"/></name><argument_list pos:line="99" pos:column="21">(<argument><expr><name pos:line="99" pos:column="22">SIGINT<pos:position pos:line="99" pos:column="28"/></name></expr></argument>, <argument><expr><operator pos:line="99" pos:column="30">&amp;<pos:position pos:line="99" pos:column="35"/></operator><name pos:line="99" pos:column="31">sig_int_action<pos:position pos:line="99" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="99" pos:column="47">NULL<pos:position pos:line="99" pos:column="51"/></name></expr></argument>)<pos:position pos:line="99" pos:column="52"/></argument_list></call></expr>)<pos:position pos:line="99" pos:column="53"/></condition><then pos:line="99" pos:column="53"> <block pos:line="99" pos:column="54">{
    <decl_stmt><decl><type><name pos:line="100" pos:column="5">char<pos:position pos:line="100" pos:column="9"/></name></type> <name><name pos:line="100" pos:column="10">errbuf<pos:position pos:line="100" pos:column="16"/></name><index pos:line="100" pos:column="16">[<expr><literal type="number" pos:line="100" pos:column="17">1024<pos:position pos:line="100" pos:column="21"/></literal></expr>]<pos:position pos:line="100" pos:column="22"/></index></name></decl>;<pos:position pos:line="100" pos:column="23"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="101" pos:column="5">ERROR<pos:position pos:line="101" pos:column="10"/></name><argument_list pos:line="101" pos:column="10">(<argument><expr><literal type="string" pos:line="101" pos:column="11">"Error: Failed to install a signal handler for signal INT: %s"<pos:position pos:line="101" pos:column="73"/></literal></expr></argument>,
          <argument><expr><call><name pos:line="102" pos:column="11">sstrerror<pos:position pos:line="102" pos:column="20"/></name><argument_list pos:line="102" pos:column="20">(<argument><expr><name pos:line="102" pos:column="21">errno<pos:position pos:line="102" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="102" pos:column="28">errbuf<pos:position pos:line="102" pos:column="34"/></name></expr></argument>, <argument><expr><sizeof pos:line="102" pos:column="36">sizeof<argument_list pos:line="102" pos:column="42">(<argument><expr><name pos:line="102" pos:column="43">errbuf<pos:position pos:line="102" pos:column="49"/></name></expr></argument>)<pos:position pos:line="102" pos:column="50"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="102" pos:column="51"/></argument_list></call></expr></argument>)<pos:position pos:line="102" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="102" pos:column="53"/></expr_stmt>
    <return pos:line="103" pos:column="5">return <expr><literal type="number" pos:line="103" pos:column="12">1<pos:position pos:line="103" pos:column="13"/></literal></expr>;<pos:position pos:line="103" pos:column="14"/></return>
  }<pos:position pos:line="104" pos:column="4"/></block></then></if>

  <decl_stmt><decl><type><name><name pos:line="106" pos:column="3">struct<pos:position pos:line="106" pos:column="9"/></name> <name pos:line="106" pos:column="10">sigaction<pos:position pos:line="106" pos:column="19"/></name></name></type> <name pos:line="106" pos:column="20">sig_term_action<pos:position pos:line="106" pos:column="35"/></name> <init pos:line="106" pos:column="36">= <expr><block pos:line="106" pos:column="38">{<expr><operator pos:line="106" pos:column="39">.<pos:position pos:line="106" pos:column="40"/></operator><name pos:line="106" pos:column="40">sa_handler<pos:position pos:line="106" pos:column="50"/></name> <operator pos:line="106" pos:column="51">=<pos:position pos:line="106" pos:column="52"/></operator> <name pos:line="106" pos:column="53">sig_term_handler<pos:position pos:line="106" pos:column="69"/></name></expr>}<pos:position pos:line="106" pos:column="70"/></block></expr></init></decl>;<pos:position pos:line="106" pos:column="71"/></decl_stmt>

  <if pos:line="108" pos:column="3">if <condition pos:line="108" pos:column="6">(<expr><literal type="number" pos:line="108" pos:column="7">0<pos:position pos:line="108" pos:column="8"/></literal> <operator pos:line="108" pos:column="9">!=<pos:position pos:line="108" pos:column="11"/></operator> <call><name pos:line="108" pos:column="12">sigaction<pos:position pos:line="108" pos:column="21"/></name><argument_list pos:line="108" pos:column="21">(<argument><expr><name pos:line="108" pos:column="22">SIGTERM<pos:position pos:line="108" pos:column="29"/></name></expr></argument>, <argument><expr><operator pos:line="108" pos:column="31">&amp;<pos:position pos:line="108" pos:column="36"/></operator><name pos:line="108" pos:column="32">sig_term_action<pos:position pos:line="108" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="108" pos:column="49">NULL<pos:position pos:line="108" pos:column="53"/></name></expr></argument>)<pos:position pos:line="108" pos:column="54"/></argument_list></call></expr>)<pos:position pos:line="108" pos:column="55"/></condition><then pos:line="108" pos:column="55"> <block pos:line="108" pos:column="56">{
    <decl_stmt><decl><type><name pos:line="109" pos:column="5">char<pos:position pos:line="109" pos:column="9"/></name></type> <name><name pos:line="109" pos:column="10">errbuf<pos:position pos:line="109" pos:column="16"/></name><index pos:line="109" pos:column="16">[<expr><literal type="number" pos:line="109" pos:column="17">1024<pos:position pos:line="109" pos:column="21"/></literal></expr>]<pos:position pos:line="109" pos:column="22"/></index></name></decl>;<pos:position pos:line="109" pos:column="23"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="110" pos:column="5">ERROR<pos:position pos:line="110" pos:column="10"/></name><argument_list pos:line="110" pos:column="10">(<argument><expr><literal type="string" pos:line="110" pos:column="11">"Error: Failed to install a signal handler for signal TERM: %s"<pos:position pos:line="110" pos:column="74"/></literal></expr></argument>,
          <argument><expr><call><name pos:line="111" pos:column="11">sstrerror<pos:position pos:line="111" pos:column="20"/></name><argument_list pos:line="111" pos:column="20">(<argument><expr><name pos:line="111" pos:column="21">errno<pos:position pos:line="111" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="111" pos:column="28">errbuf<pos:position pos:line="111" pos:column="34"/></name></expr></argument>, <argument><expr><sizeof pos:line="111" pos:column="36">sizeof<argument_list pos:line="111" pos:column="42">(<argument><expr><name pos:line="111" pos:column="43">errbuf<pos:position pos:line="111" pos:column="49"/></name></expr></argument>)<pos:position pos:line="111" pos:column="50"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="111" pos:column="51"/></argument_list></call></expr></argument>)<pos:position pos:line="111" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="111" pos:column="53"/></expr_stmt>
    <return pos:line="112" pos:column="5">return <expr><literal type="number" pos:line="112" pos:column="12">1<pos:position pos:line="112" pos:column="13"/></literal></expr>;<pos:position pos:line="112" pos:column="14"/></return>
  }<pos:position pos:line="113" pos:column="4"/></block></then></if>

  <decl_stmt><decl><type><name><name pos:line="115" pos:column="3">struct<pos:position pos:line="115" pos:column="9"/></name> <name pos:line="115" pos:column="10">sigaction<pos:position pos:line="115" pos:column="19"/></name></name></type> <name pos:line="115" pos:column="20">sig_usr1_action<pos:position pos:line="115" pos:column="35"/></name> <init pos:line="115" pos:column="36">= <expr><block pos:line="115" pos:column="38">{<expr><operator pos:line="115" pos:column="39">.<pos:position pos:line="115" pos:column="40"/></operator><name pos:line="115" pos:column="40">sa_handler<pos:position pos:line="115" pos:column="50"/></name> <operator pos:line="115" pos:column="51">=<pos:position pos:line="115" pos:column="52"/></operator> <name pos:line="115" pos:column="53">sig_usr1_handler<pos:position pos:line="115" pos:column="69"/></name></expr>}<pos:position pos:line="115" pos:column="70"/></block></expr></init></decl>;<pos:position pos:line="115" pos:column="71"/></decl_stmt>

  <if pos:line="117" pos:column="3">if <condition pos:line="117" pos:column="6">(<expr><literal type="number" pos:line="117" pos:column="7">0<pos:position pos:line="117" pos:column="8"/></literal> <operator pos:line="117" pos:column="9">!=<pos:position pos:line="117" pos:column="11"/></operator> <call><name pos:line="117" pos:column="12">sigaction<pos:position pos:line="117" pos:column="21"/></name><argument_list pos:line="117" pos:column="21">(<argument><expr><name pos:line="117" pos:column="22">SIGUSR1<pos:position pos:line="117" pos:column="29"/></name></expr></argument>, <argument><expr><operator pos:line="117" pos:column="31">&amp;<pos:position pos:line="117" pos:column="36"/></operator><name pos:line="117" pos:column="32">sig_usr1_action<pos:position pos:line="117" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="117" pos:column="49">NULL<pos:position pos:line="117" pos:column="53"/></name></expr></argument>)<pos:position pos:line="117" pos:column="54"/></argument_list></call></expr>)<pos:position pos:line="117" pos:column="55"/></condition><then pos:line="117" pos:column="55"> <block pos:line="117" pos:column="56">{
    <decl_stmt><decl><type><name pos:line="118" pos:column="5">char<pos:position pos:line="118" pos:column="9"/></name></type> <name><name pos:line="118" pos:column="10">errbuf<pos:position pos:line="118" pos:column="16"/></name><index pos:line="118" pos:column="16">[<expr><literal type="number" pos:line="118" pos:column="17">1024<pos:position pos:line="118" pos:column="21"/></literal></expr>]<pos:position pos:line="118" pos:column="22"/></index></name></decl>;<pos:position pos:line="118" pos:column="23"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="119" pos:column="5">ERROR<pos:position pos:line="119" pos:column="10"/></name><argument_list pos:line="119" pos:column="10">(<argument><expr><literal type="string" pos:line="119" pos:column="11">"Error: Failed to install a signal handler for signal USR1: %s"<pos:position pos:line="119" pos:column="74"/></literal></expr></argument>,
          <argument><expr><call><name pos:line="120" pos:column="11">sstrerror<pos:position pos:line="120" pos:column="20"/></name><argument_list pos:line="120" pos:column="20">(<argument><expr><name pos:line="120" pos:column="21">errno<pos:position pos:line="120" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="120" pos:column="28">errbuf<pos:position pos:line="120" pos:column="34"/></name></expr></argument>, <argument><expr><sizeof pos:line="120" pos:column="36">sizeof<argument_list pos:line="120" pos:column="42">(<argument><expr><name pos:line="120" pos:column="43">errbuf<pos:position pos:line="120" pos:column="49"/></name></expr></argument>)<pos:position pos:line="120" pos:column="50"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="120" pos:column="51"/></argument_list></call></expr></argument>)<pos:position pos:line="120" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="120" pos:column="53"/></expr_stmt>
    <return pos:line="121" pos:column="5">return <expr><literal type="number" pos:line="121" pos:column="12">1<pos:position pos:line="121" pos:column="13"/></literal></expr>;<pos:position pos:line="121" pos:column="14"/></return>
  }<pos:position pos:line="122" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="124" pos:column="3">/*
   * run the actual loops
   */</comment>
  <if pos:line="127" pos:column="3">if <condition pos:line="127" pos:column="6">(<expr><call><name pos:line="127" pos:column="7">do_init<pos:position pos:line="127" pos:column="14"/></name><argument_list pos:line="127" pos:column="14">()<pos:position pos:line="127" pos:column="16"/></argument_list></call> <operator pos:line="127" pos:column="17">!=<pos:position pos:line="127" pos:column="19"/></operator> <literal type="number" pos:line="127" pos:column="20">0<pos:position pos:line="127" pos:column="21"/></literal></expr>)<pos:position pos:line="127" pos:column="22"/></condition><then pos:line="127" pos:column="22"> <block pos:line="127" pos:column="23">{
    <expr_stmt><expr><call><name pos:line="128" pos:column="5">ERROR<pos:position pos:line="128" pos:column="10"/></name><argument_list pos:line="128" pos:column="10">(<argument><expr><literal type="string" pos:line="128" pos:column="11">"Error: one or more plugin init callbacks failed."<pos:position pos:line="128" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="128" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="128" pos:column="63"/></expr_stmt>
    <expr_stmt><expr><name pos:line="129" pos:column="5">exit_status<pos:position pos:line="129" pos:column="16"/></name> <operator pos:line="129" pos:column="17">=<pos:position pos:line="129" pos:column="18"/></operator> <literal type="number" pos:line="129" pos:column="19">1<pos:position pos:line="129" pos:column="20"/></literal></expr>;<pos:position pos:line="129" pos:column="21"/></expr_stmt>
  }<pos:position pos:line="130" pos:column="4"/></block></then></if>

  <if pos:line="132" pos:column="3">if <condition pos:line="132" pos:column="6">(<expr><name><name pos:line="132" pos:column="7">config<pos:position pos:line="132" pos:column="13"/></name><operator pos:line="132" pos:column="13">.<pos:position pos:line="132" pos:column="14"/></operator><name pos:line="132" pos:column="14">test_readall<pos:position pos:line="132" pos:column="26"/></name></name></expr>)<pos:position pos:line="132" pos:column="27"/></condition><then pos:line="132" pos:column="27"> <block pos:line="132" pos:column="28">{
    <if pos:line="133" pos:column="5">if <condition pos:line="133" pos:column="8">(<expr><call><name pos:line="133" pos:column="9">plugin_read_all_once<pos:position pos:line="133" pos:column="29"/></name><argument_list pos:line="133" pos:column="29">()<pos:position pos:line="133" pos:column="31"/></argument_list></call> <operator pos:line="133" pos:column="32">!=<pos:position pos:line="133" pos:column="34"/></operator> <literal type="number" pos:line="133" pos:column="35">0<pos:position pos:line="133" pos:column="36"/></literal></expr>)<pos:position pos:line="133" pos:column="37"/></condition><then pos:line="133" pos:column="37"> <block pos:line="133" pos:column="38">{
      <expr_stmt><expr><call><name pos:line="134" pos:column="7">ERROR<pos:position pos:line="134" pos:column="12"/></name><argument_list pos:line="134" pos:column="12">(<argument><expr><literal type="string" pos:line="134" pos:column="13">"Error: one or more plugin read callbacks failed."<pos:position pos:line="134" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="134" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="134" pos:column="65"/></expr_stmt>
      <expr_stmt><expr><name pos:line="135" pos:column="7">exit_status<pos:position pos:line="135" pos:column="18"/></name> <operator pos:line="135" pos:column="19">=<pos:position pos:line="135" pos:column="20"/></operator> <literal type="number" pos:line="135" pos:column="21">1<pos:position pos:line="135" pos:column="22"/></literal></expr>;<pos:position pos:line="135" pos:column="23"/></expr_stmt>
    }<pos:position pos:line="136" pos:column="6"/></block></then></if>
  }<pos:position pos:line="137" pos:column="4"/></block></then> <else pos:line="137" pos:column="5">else <block pos:line="137" pos:column="10">{
    <expr_stmt><expr><call><name pos:line="138" pos:column="5">INFO<pos:position pos:line="138" pos:column="9"/></name><argument_list pos:line="138" pos:column="9">(<argument><expr><literal type="string" pos:line="138" pos:column="10">"Initialization complete, entering read-loop."<pos:position pos:line="138" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="138" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="138" pos:column="58"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="139" pos:column="5">do_loop<pos:position pos:line="139" pos:column="12"/></name><argument_list pos:line="139" pos:column="12">()<pos:position pos:line="139" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="139" pos:column="15"/></expr_stmt>
  }<pos:position pos:line="140" pos:column="4"/></block></else></if>

  <comment type="block" pos:line="142" pos:column="3">/* close syslog */</comment>
  <expr_stmt><expr><call><name pos:line="143" pos:column="3">INFO<pos:position pos:line="143" pos:column="7"/></name><argument_list pos:line="143" pos:column="7">(<argument><expr><literal type="string" pos:line="143" pos:column="8">"Exiting normally."<pos:position pos:line="143" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="143" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="143" pos:column="29"/></expr_stmt>

  <if pos:line="145" pos:column="3">if <condition pos:line="145" pos:column="6">(<expr><call><name pos:line="145" pos:column="7">do_shutdown<pos:position pos:line="145" pos:column="18"/></name><argument_list pos:line="145" pos:column="18">()<pos:position pos:line="145" pos:column="20"/></argument_list></call> <operator pos:line="145" pos:column="21">!=<pos:position pos:line="145" pos:column="23"/></operator> <literal type="number" pos:line="145" pos:column="24">0<pos:position pos:line="145" pos:column="25"/></literal></expr>)<pos:position pos:line="145" pos:column="26"/></condition><then pos:line="145" pos:column="26"> <block pos:line="145" pos:column="27">{
    <expr_stmt><expr><call><name pos:line="146" pos:column="5">ERROR<pos:position pos:line="146" pos:column="10"/></name><argument_list pos:line="146" pos:column="10">(<argument><expr><literal type="string" pos:line="146" pos:column="11">"Error: one or more plugin shutdown callbacks failed."<pos:position pos:line="146" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="146" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="146" pos:column="67"/></expr_stmt>
    <expr_stmt><expr><name pos:line="147" pos:column="5">exit_status<pos:position pos:line="147" pos:column="16"/></name> <operator pos:line="147" pos:column="17">=<pos:position pos:line="147" pos:column="18"/></operator> <literal type="number" pos:line="147" pos:column="19">1<pos:position pos:line="147" pos:column="20"/></literal></expr>;<pos:position pos:line="147" pos:column="21"/></expr_stmt>
  }<pos:position pos:line="148" pos:column="4"/></block></then></if>

<cpp:if pos:line="150" pos:column="1">#<cpp:directive pos:line="150" pos:column="2">if<pos:position pos:line="150" pos:column="4"/></cpp:directive> <expr><name pos:line="150" pos:column="5">COLLECT_DAEMON<pos:position pos:line="150" pos:column="19"/></name></expr></cpp:if>
  <if pos:line="151" pos:column="3">if <condition pos:line="151" pos:column="6">(<expr><name><name pos:line="151" pos:column="7">config<pos:position pos:line="151" pos:column="13"/></name><operator pos:line="151" pos:column="13">.<pos:position pos:line="151" pos:column="14"/></operator><name pos:line="151" pos:column="14">daemonize<pos:position pos:line="151" pos:column="23"/></name></name></expr>)<pos:position pos:line="151" pos:column="24"/></condition><then pos:line="151" pos:column="24">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="152" pos:column="5">pidfile_remove<pos:position pos:line="152" pos:column="19"/></name><argument_list pos:line="152" pos:column="19">()<pos:position pos:line="152" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="152" pos:column="22"/></expr_stmt></block></then></if>
<cpp:endif pos:line="153" pos:column="1">#<cpp:directive pos:line="153" pos:column="2">endif<pos:position pos:line="153" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="153" pos:column="8">/* COLLECT_DAEMON */</comment>

  <return pos:line="155" pos:column="3">return <expr><name pos:line="155" pos:column="10">exit_status<pos:position pos:line="155" pos:column="21"/></name></expr>;<pos:position pos:line="155" pos:column="22"/></return>
}<pos:position pos:line="156" pos:column="2"/></block></function></unit>
