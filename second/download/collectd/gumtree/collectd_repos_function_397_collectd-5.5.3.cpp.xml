<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_397_collectd-5.5.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">disk_config<pos:position pos:line="1" pos:column="23"/></name> <parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><specifier pos:line="1" pos:column="25">const<pos:position pos:line="1" pos:column="30"/></specifier> <name pos:line="1" pos:column="31">char<pos:position pos:line="1" pos:column="35"/></name> <modifier pos:line="1" pos:column="36">*<pos:position pos:line="1" pos:column="37"/></modifier></type><name pos:line="1" pos:column="37">key<pos:position pos:line="1" pos:column="40"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="42">const<pos:position pos:line="1" pos:column="47"/></specifier> <name pos:line="1" pos:column="48">char<pos:position pos:line="1" pos:column="52"/></name> <modifier pos:line="1" pos:column="53">*<pos:position pos:line="1" pos:column="54"/></modifier></type><name pos:line="1" pos:column="54">value<pos:position pos:line="1" pos:column="59"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="60"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <if pos:line="3" pos:column="3">if <condition pos:line="3" pos:column="6">(<expr><name pos:line="3" pos:column="7">ignorelist<pos:position pos:line="3" pos:column="17"/></name> <operator pos:line="3" pos:column="18">==<pos:position pos:line="3" pos:column="20"/></operator> <name pos:line="3" pos:column="21">NULL<pos:position pos:line="3" pos:column="25"/></name></expr>)<pos:position pos:line="3" pos:column="26"/></condition><then pos:line="3" pos:column="26">
    <block type="pseudo"><expr_stmt><expr><name pos:line="4" pos:column="5">ignorelist<pos:position pos:line="4" pos:column="15"/></name> <operator pos:line="4" pos:column="16">=<pos:position pos:line="4" pos:column="17"/></operator> <call><name pos:line="4" pos:column="18">ignorelist_create<pos:position pos:line="4" pos:column="35"/></name> <argument_list pos:line="4" pos:column="36">(<comment type="block" pos:line="4" pos:column="37">/* invert = */</comment> <argument><expr><literal type="number" pos:line="4" pos:column="52">1<pos:position pos:line="4" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="4" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="55"/></expr_stmt></block></then></if>
  <if pos:line="5" pos:column="3">if <condition pos:line="5" pos:column="6">(<expr><name pos:line="5" pos:column="7">ignorelist<pos:position pos:line="5" pos:column="17"/></name> <operator pos:line="5" pos:column="18">==<pos:position pos:line="5" pos:column="20"/></operator> <name pos:line="5" pos:column="21">NULL<pos:position pos:line="5" pos:column="25"/></name></expr>)<pos:position pos:line="5" pos:column="26"/></condition><then pos:line="5" pos:column="26">
    <block type="pseudo"><return pos:line="6" pos:column="5">return <expr><operator pos:line="6" pos:column="12">(<pos:position pos:line="6" pos:column="13"/></operator><literal type="number" pos:line="6" pos:column="13">1<pos:position pos:line="6" pos:column="14"/></literal><operator pos:line="6" pos:column="14">)<pos:position pos:line="6" pos:column="15"/></operator></expr>;<pos:position pos:line="6" pos:column="16"/></return></block></then></if>

  <if pos:line="8" pos:column="3">if <condition pos:line="8" pos:column="6">(<expr><call><name pos:line="8" pos:column="7">strcasecmp<pos:position pos:line="8" pos:column="17"/></name> <argument_list pos:line="8" pos:column="18">(<argument><expr><literal type="string" pos:line="8" pos:column="19">"Disk"<pos:position pos:line="8" pos:column="25"/></literal></expr></argument>, <argument><expr><name pos:line="8" pos:column="27">key<pos:position pos:line="8" pos:column="30"/></name></expr></argument>)<pos:position pos:line="8" pos:column="31"/></argument_list></call> <operator pos:line="8" pos:column="32">==<pos:position pos:line="8" pos:column="34"/></operator> <literal type="number" pos:line="8" pos:column="35">0<pos:position pos:line="8" pos:column="36"/></literal></expr>)<pos:position pos:line="8" pos:column="37"/></condition><then pos:line="8" pos:column="37">
  <block pos:line="9" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="10" pos:column="5">ignorelist_add<pos:position pos:line="10" pos:column="19"/></name> <argument_list pos:line="10" pos:column="20">(<argument><expr><name pos:line="10" pos:column="21">ignorelist<pos:position pos:line="10" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="33">value<pos:position pos:line="10" pos:column="38"/></name></expr></argument>)<pos:position pos:line="10" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="40"/></expr_stmt>
  }<pos:position pos:line="11" pos:column="4"/></block></then>
  <elseif pos:line="12" pos:column="3">else <if pos:line="12" pos:column="8">if <condition pos:line="12" pos:column="11">(<expr><call><name pos:line="12" pos:column="12">strcasecmp<pos:position pos:line="12" pos:column="22"/></name> <argument_list pos:line="12" pos:column="23">(<argument><expr><literal type="string" pos:line="12" pos:column="24">"IgnoreSelected"<pos:position pos:line="12" pos:column="40"/></literal></expr></argument>, <argument><expr><name pos:line="12" pos:column="42">key<pos:position pos:line="12" pos:column="45"/></name></expr></argument>)<pos:position pos:line="12" pos:column="46"/></argument_list></call> <operator pos:line="12" pos:column="47">==<pos:position pos:line="12" pos:column="49"/></operator> <literal type="number" pos:line="12" pos:column="50">0<pos:position pos:line="12" pos:column="51"/></literal></expr>)<pos:position pos:line="12" pos:column="52"/></condition><then pos:line="12" pos:column="52">
  <block pos:line="13" pos:column="3">{
    <decl_stmt><decl><type><name pos:line="14" pos:column="5">int<pos:position pos:line="14" pos:column="8"/></name></type> <name pos:line="14" pos:column="9">invert<pos:position pos:line="14" pos:column="15"/></name> <init pos:line="14" pos:column="16">= <expr><literal type="number" pos:line="14" pos:column="18">1<pos:position pos:line="14" pos:column="19"/></literal></expr></init></decl>;<pos:position pos:line="14" pos:column="20"/></decl_stmt>
    <if pos:line="15" pos:column="5">if <condition pos:line="15" pos:column="8">(<expr><call><name pos:line="15" pos:column="9">IS_TRUE<pos:position pos:line="15" pos:column="16"/></name> <argument_list pos:line="15" pos:column="17">(<argument><expr><name pos:line="15" pos:column="18">value<pos:position pos:line="15" pos:column="23"/></name></expr></argument>)<pos:position pos:line="15" pos:column="24"/></argument_list></call></expr>)<pos:position pos:line="15" pos:column="25"/></condition><then pos:line="15" pos:column="25">
      <block type="pseudo"><expr_stmt><expr><name pos:line="16" pos:column="7">invert<pos:position pos:line="16" pos:column="13"/></name> <operator pos:line="16" pos:column="14">=<pos:position pos:line="16" pos:column="15"/></operator> <literal type="number" pos:line="16" pos:column="16">0<pos:position pos:line="16" pos:column="17"/></literal></expr>;<pos:position pos:line="16" pos:column="18"/></expr_stmt></block></then></if>
    <expr_stmt><expr><call><name pos:line="17" pos:column="5">ignorelist_set_invert<pos:position pos:line="17" pos:column="26"/></name> <argument_list pos:line="17" pos:column="27">(<argument><expr><name pos:line="17" pos:column="28">ignorelist<pos:position pos:line="17" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="40">invert<pos:position pos:line="17" pos:column="46"/></name></expr></argument>)<pos:position pos:line="17" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="48"/></expr_stmt>
  }<pos:position pos:line="18" pos:column="4"/></block></then></if></elseif>
  <elseif pos:line="19" pos:column="3">else <if pos:line="19" pos:column="8">if <condition pos:line="19" pos:column="11">(<expr><call><name pos:line="19" pos:column="12">strcasecmp<pos:position pos:line="19" pos:column="22"/></name> <argument_list pos:line="19" pos:column="23">(<argument><expr><literal type="string" pos:line="19" pos:column="24">"UseBSDName"<pos:position pos:line="19" pos:column="36"/></literal></expr></argument>, <argument><expr><name pos:line="19" pos:column="38">key<pos:position pos:line="19" pos:column="41"/></name></expr></argument>)<pos:position pos:line="19" pos:column="42"/></argument_list></call> <operator pos:line="19" pos:column="43">==<pos:position pos:line="19" pos:column="45"/></operator> <literal type="number" pos:line="19" pos:column="46">0<pos:position pos:line="19" pos:column="47"/></literal></expr>)<pos:position pos:line="19" pos:column="48"/></condition><then pos:line="19" pos:column="48">
  <block pos:line="20" pos:column="3">{
<cpp:if pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">if<pos:position pos:line="21" pos:column="4"/></cpp:directive> <expr><name pos:line="21" pos:column="5">HAVE_IOKIT_IOKITLIB_H<pos:position pos:line="21" pos:column="26"/></name></expr></cpp:if>
    <expr_stmt><expr><name pos:line="22" pos:column="5">use_bsd_name<pos:position pos:line="22" pos:column="17"/></name> <operator pos:line="22" pos:column="18">=<pos:position pos:line="22" pos:column="19"/></operator> <ternary><condition><expr><call><name pos:line="22" pos:column="20">IS_TRUE<pos:position pos:line="22" pos:column="27"/></name> <argument_list pos:line="22" pos:column="28">(<argument><expr><name pos:line="22" pos:column="29">value<pos:position pos:line="22" pos:column="34"/></name></expr></argument>)<pos:position pos:line="22" pos:column="35"/></argument_list></call></expr> ?<pos:position pos:line="22" pos:column="37"/></condition><then pos:line="22" pos:column="37"> <expr><literal type="number" pos:line="22" pos:column="38">1<pos:position pos:line="22" pos:column="39"/></literal></expr> <pos:position pos:line="22" pos:column="40"/></then><else pos:line="22" pos:column="40">: <expr><literal type="number" pos:line="22" pos:column="42">0<pos:position pos:line="22" pos:column="43"/></literal></expr></else></ternary></expr>;<pos:position pos:line="22" pos:column="44"/></expr_stmt>
<cpp:else pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">else<pos:position pos:line="23" pos:column="6"/></cpp:directive></cpp:else>
    <expr_stmt><expr><call><name pos:line="24" pos:column="5">WARNING<pos:position pos:line="24" pos:column="12"/></name> <argument_list pos:line="24" pos:column="13">(<argument><expr><literal type="string" pos:line="24" pos:column="14">"disk plugin: The \"UseBSDName\" option is only supported "<pos:position pos:line="24" pos:column="73"/></literal>
        <literal type="string" pos:line="25" pos:column="9">"on Mach / Mac OS X and will be ignored."<pos:position pos:line="25" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="52"/></expr_stmt>
<cpp:endif pos:line="26" pos:column="1">#<cpp:directive pos:line="26" pos:column="2">endif<pos:position pos:line="26" pos:column="7"/></cpp:directive></cpp:endif>
  }<pos:position pos:line="27" pos:column="4"/></block></then></if></elseif>
  <elseif pos:line="28" pos:column="3">else <if pos:line="28" pos:column="8">if <condition pos:line="28" pos:column="11">(<expr><call><name pos:line="28" pos:column="12">strcasecmp<pos:position pos:line="28" pos:column="22"/></name> <argument_list pos:line="28" pos:column="23">(<argument><expr><literal type="string" pos:line="28" pos:column="24">"UdevNameAttr"<pos:position pos:line="28" pos:column="38"/></literal></expr></argument>, <argument><expr><name pos:line="28" pos:column="40">key<pos:position pos:line="28" pos:column="43"/></name></expr></argument>)<pos:position pos:line="28" pos:column="44"/></argument_list></call> <operator pos:line="28" pos:column="45">==<pos:position pos:line="28" pos:column="47"/></operator> <literal type="number" pos:line="28" pos:column="48">0<pos:position pos:line="28" pos:column="49"/></literal></expr>)<pos:position pos:line="28" pos:column="50"/></condition><then pos:line="28" pos:column="50">
  <block pos:line="29" pos:column="3">{
<cpp:if pos:line="30" pos:column="1">#<cpp:directive pos:line="30" pos:column="2">if<pos:position pos:line="30" pos:column="4"/></cpp:directive> <expr><name pos:line="30" pos:column="5">HAVE_LIBUDEV<pos:position pos:line="30" pos:column="17"/></name></expr></cpp:if>
    <if pos:line="31" pos:column="5">if <condition pos:line="31" pos:column="8">(<expr><name pos:line="31" pos:column="9">conf_udev_name_attr<pos:position pos:line="31" pos:column="28"/></name> <operator pos:line="31" pos:column="29">!=<pos:position pos:line="31" pos:column="31"/></operator> <name pos:line="31" pos:column="32">NULL<pos:position pos:line="31" pos:column="36"/></name></expr>)<pos:position pos:line="31" pos:column="37"/></condition><then pos:line="31" pos:column="37">
    <block pos:line="32" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="33" pos:column="7">free<pos:position pos:line="33" pos:column="11"/></name> <argument_list pos:line="33" pos:column="12">(<argument><expr><name pos:line="33" pos:column="13">conf_udev_name_attr<pos:position pos:line="33" pos:column="32"/></name></expr></argument>)<pos:position pos:line="33" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="34"/></expr_stmt>
      <expr_stmt><expr><name pos:line="34" pos:column="7">conf_udev_name_attr<pos:position pos:line="34" pos:column="26"/></name> <operator pos:line="34" pos:column="27">=<pos:position pos:line="34" pos:column="28"/></operator> <name pos:line="34" pos:column="29">NULL<pos:position pos:line="34" pos:column="33"/></name></expr>;<pos:position pos:line="34" pos:column="34"/></expr_stmt>
    }<pos:position pos:line="35" pos:column="6"/></block></then></if>
    <if pos:line="36" pos:column="5">if <condition pos:line="36" pos:column="8">(<expr><operator pos:line="36" pos:column="9">(<pos:position pos:line="36" pos:column="10"/></operator><name pos:line="36" pos:column="10">conf_udev_name_attr<pos:position pos:line="36" pos:column="29"/></name> <operator pos:line="36" pos:column="30">=<pos:position pos:line="36" pos:column="31"/></operator> <call><name pos:line="36" pos:column="32">strdup<pos:position pos:line="36" pos:column="38"/></name> <argument_list pos:line="36" pos:column="39">(<argument><expr><name pos:line="36" pos:column="40">value<pos:position pos:line="36" pos:column="45"/></name></expr></argument>)<pos:position pos:line="36" pos:column="46"/></argument_list></call><operator pos:line="36" pos:column="46">)<pos:position pos:line="36" pos:column="47"/></operator> <operator pos:line="36" pos:column="48">==<pos:position pos:line="36" pos:column="50"/></operator> <name pos:line="36" pos:column="51">NULL<pos:position pos:line="36" pos:column="55"/></name></expr>)<pos:position pos:line="36" pos:column="56"/></condition><then pos:line="36" pos:column="56">
      <block type="pseudo"><return pos:line="37" pos:column="7">return <expr><operator pos:line="37" pos:column="14">(<pos:position pos:line="37" pos:column="15"/></operator><literal type="number" pos:line="37" pos:column="15">1<pos:position pos:line="37" pos:column="16"/></literal><operator pos:line="37" pos:column="16">)<pos:position pos:line="37" pos:column="17"/></operator></expr>;<pos:position pos:line="37" pos:column="18"/></return></block></then></if>
<cpp:else pos:line="38" pos:column="1">#<cpp:directive pos:line="38" pos:column="2">else<pos:position pos:line="38" pos:column="6"/></cpp:directive></cpp:else>
    <expr_stmt><expr><call><name pos:line="39" pos:column="5">WARNING<pos:position pos:line="39" pos:column="12"/></name> <argument_list pos:line="39" pos:column="13">(<argument><expr><literal type="string" pos:line="39" pos:column="14">"disk plugin: The \"UdevNameAttr\" option is only supported "<pos:position pos:line="39" pos:column="75"/></literal>
        <literal type="string" pos:line="40" pos:column="9">"if collectd is built with libudev support"<pos:position pos:line="40" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="40" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="54"/></expr_stmt>
<cpp:endif pos:line="41" pos:column="1">#<cpp:directive pos:line="41" pos:column="2">endif<pos:position pos:line="41" pos:column="7"/></cpp:directive></cpp:endif>
  }<pos:position pos:line="42" pos:column="4"/></block></then></if></elseif>
  <else pos:line="43" pos:column="3">else
  <block pos:line="44" pos:column="3">{
    <return pos:line="45" pos:column="5">return <expr><operator pos:line="45" pos:column="12">(<pos:position pos:line="45" pos:column="13"/></operator><operator pos:line="45" pos:column="13">-<pos:position pos:line="45" pos:column="14"/></operator><literal type="number" pos:line="45" pos:column="14">1<pos:position pos:line="45" pos:column="15"/></literal><operator pos:line="45" pos:column="15">)<pos:position pos:line="45" pos:column="16"/></operator></expr>;<pos:position pos:line="45" pos:column="17"/></return>
  }<pos:position pos:line="46" pos:column="4"/></block></else></if>

  <return pos:line="48" pos:column="3">return <expr><operator pos:line="48" pos:column="10">(<pos:position pos:line="48" pos:column="11"/></operator><literal type="number" pos:line="48" pos:column="11">0<pos:position pos:line="48" pos:column="12"/></literal><operator pos:line="48" pos:column="12">)<pos:position pos:line="48" pos:column="13"/></operator></expr>;<pos:position pos:line="48" pos:column="14"/></return>
}<pos:position pos:line="49" pos:column="2"/></block></function></unit>
