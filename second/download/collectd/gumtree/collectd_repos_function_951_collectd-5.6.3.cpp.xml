<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_951_collectd-5.6.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">zookeeper_config<pos:position pos:line="1" pos:column="28"/></name><parameter_list pos:line="1" pos:column="28">(<parameter><decl><type><specifier pos:line="1" pos:column="29">const<pos:position pos:line="1" pos:column="34"/></specifier> <name pos:line="1" pos:column="35">char<pos:position pos:line="1" pos:column="39"/></name> <modifier pos:line="1" pos:column="40">*<pos:position pos:line="1" pos:column="41"/></modifier></type><name pos:line="1" pos:column="41">key<pos:position pos:line="1" pos:column="44"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="46">const<pos:position pos:line="1" pos:column="51"/></specifier> <name pos:line="1" pos:column="52">char<pos:position pos:line="1" pos:column="56"/></name> <modifier pos:line="1" pos:column="57">*<pos:position pos:line="1" pos:column="58"/></modifier></type><name pos:line="1" pos:column="58">value<pos:position pos:line="1" pos:column="63"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="64"/></parameter_list> <block pos:line="1" pos:column="65">{
  <if pos:line="2" pos:column="3">if <condition pos:line="2" pos:column="6">(<expr><call><name pos:line="2" pos:column="7">strncmp<pos:position pos:line="2" pos:column="14"/></name><argument_list pos:line="2" pos:column="14">(<argument><expr><name pos:line="2" pos:column="15">key<pos:position pos:line="2" pos:column="18"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="2" pos:column="20">"Host"<pos:position pos:line="2" pos:column="26"/></literal></expr></argument>, <argument><expr><call><name pos:line="2" pos:column="28">strlen<pos:position pos:line="2" pos:column="34"/></name><argument_list pos:line="2" pos:column="34">(<argument><expr><literal type="string" pos:line="2" pos:column="35">"Host"<pos:position pos:line="2" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="2" pos:column="42"/></argument_list></call></expr></argument>)<pos:position pos:line="2" pos:column="43"/></argument_list></call> <operator pos:line="2" pos:column="44">==<pos:position pos:line="2" pos:column="46"/></operator> <literal type="number" pos:line="2" pos:column="47">0<pos:position pos:line="2" pos:column="48"/></literal></expr>)<pos:position pos:line="2" pos:column="49"/></condition><then pos:line="2" pos:column="49"> <block pos:line="2" pos:column="50">{
    <expr_stmt><expr><call><name pos:line="3" pos:column="5">sfree<pos:position pos:line="3" pos:column="10"/></name><argument_list pos:line="3" pos:column="10">(<argument><expr><name pos:line="3" pos:column="11">zk_host<pos:position pos:line="3" pos:column="18"/></name></expr></argument>)<pos:position pos:line="3" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="3" pos:column="20"/></expr_stmt>
    <expr_stmt><expr><name pos:line="4" pos:column="5">zk_host<pos:position pos:line="4" pos:column="12"/></name> <operator pos:line="4" pos:column="13">=<pos:position pos:line="4" pos:column="14"/></operator> <call><name pos:line="4" pos:column="15">strdup<pos:position pos:line="4" pos:column="21"/></name><argument_list pos:line="4" pos:column="21">(<argument><expr><name pos:line="4" pos:column="22">value<pos:position pos:line="4" pos:column="27"/></name></expr></argument>)<pos:position pos:line="4" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="29"/></expr_stmt>
  }<pos:position pos:line="5" pos:column="4"/></block></then> <elseif pos:line="5" pos:column="5">else <if pos:line="5" pos:column="10">if <condition pos:line="5" pos:column="13">(<expr><call><name pos:line="5" pos:column="14">strncmp<pos:position pos:line="5" pos:column="21"/></name><argument_list pos:line="5" pos:column="21">(<argument><expr><name pos:line="5" pos:column="22">key<pos:position pos:line="5" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="5" pos:column="27">"Port"<pos:position pos:line="5" pos:column="33"/></literal></expr></argument>, <argument><expr><call><name pos:line="5" pos:column="35">strlen<pos:position pos:line="5" pos:column="41"/></name><argument_list pos:line="5" pos:column="41">(<argument><expr><literal type="string" pos:line="5" pos:column="42">"Port"<pos:position pos:line="5" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="5" pos:column="49"/></argument_list></call></expr></argument>)<pos:position pos:line="5" pos:column="50"/></argument_list></call> <operator pos:line="5" pos:column="51">==<pos:position pos:line="5" pos:column="53"/></operator> <literal type="number" pos:line="5" pos:column="54">0<pos:position pos:line="5" pos:column="55"/></literal></expr>)<pos:position pos:line="5" pos:column="56"/></condition><then pos:line="5" pos:column="56"> <block pos:line="5" pos:column="57">{
    <expr_stmt><expr><call><name pos:line="6" pos:column="5">sfree<pos:position pos:line="6" pos:column="10"/></name><argument_list pos:line="6" pos:column="10">(<argument><expr><name pos:line="6" pos:column="11">zk_port<pos:position pos:line="6" pos:column="18"/></name></expr></argument>)<pos:position pos:line="6" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="20"/></expr_stmt>
    <expr_stmt><expr><name pos:line="7" pos:column="5">zk_port<pos:position pos:line="7" pos:column="12"/></name> <operator pos:line="7" pos:column="13">=<pos:position pos:line="7" pos:column="14"/></operator> <call><name pos:line="7" pos:column="15">strdup<pos:position pos:line="7" pos:column="21"/></name><argument_list pos:line="7" pos:column="21">(<argument><expr><name pos:line="7" pos:column="22">value<pos:position pos:line="7" pos:column="27"/></name></expr></argument>)<pos:position pos:line="7" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="29"/></expr_stmt>
  }<pos:position pos:line="8" pos:column="4"/></block></then></if></elseif> <else pos:line="8" pos:column="5">else <block pos:line="8" pos:column="10">{
    <return pos:line="9" pos:column="5">return <expr><operator pos:line="9" pos:column="12">-<pos:position pos:line="9" pos:column="13"/></operator><literal type="number" pos:line="9" pos:column="13">1<pos:position pos:line="9" pos:column="14"/></literal></expr>;<pos:position pos:line="9" pos:column="15"/></return>
  }<pos:position pos:line="10" pos:column="4"/></block></else></if>
  <return pos:line="11" pos:column="3">return <expr><literal type="number" pos:line="11" pos:column="10">0<pos:position pos:line="11" pos:column="11"/></literal></expr>;<pos:position pos:line="11" pos:column="12"/></return>
}<pos:position pos:line="12" pos:column="2"/></block></function></unit>
