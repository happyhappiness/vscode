<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_120_collectd-4.1.0.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">fork_child<pos:position pos:line="1" pos:column="22"/></name> <parameter_list pos:line="1" pos:column="23">(<parameter><decl><type><name pos:line="1" pos:column="24">program_list_t<pos:position pos:line="1" pos:column="38"/></name> <modifier pos:line="1" pos:column="39">*<pos:position pos:line="1" pos:column="40"/></modifier></type><name pos:line="1" pos:column="40">pl<pos:position pos:line="1" pos:column="42"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="43"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">int<pos:position pos:line="3" pos:column="6"/></name></type> <name><name pos:line="3" pos:column="7">fd_pipe<pos:position pos:line="3" pos:column="14"/></name><index pos:line="3" pos:column="14">[<expr><literal type="number" pos:line="3" pos:column="15">2<pos:position pos:line="3" pos:column="16"/></literal></expr>]<pos:position pos:line="3" pos:column="17"/></index></name></decl>;<pos:position pos:line="3" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">int<pos:position pos:line="4" pos:column="6"/></name></type> <name pos:line="4" pos:column="7">status<pos:position pos:line="4" pos:column="13"/></name></decl>;<pos:position pos:line="4" pos:column="14"/></decl_stmt>

  <if pos:line="6" pos:column="3">if <condition pos:line="6" pos:column="6">(<expr><name><name pos:line="6" pos:column="7">pl<pos:position pos:line="6" pos:column="9"/></name><operator pos:line="6" pos:column="9">-&gt;<pos:position pos:line="6" pos:column="14"/></operator><name pos:line="6" pos:column="11">pid<pos:position pos:line="6" pos:column="14"/></name></name> <operator pos:line="6" pos:column="15">!=<pos:position pos:line="6" pos:column="17"/></operator> <literal type="number" pos:line="6" pos:column="18">0<pos:position pos:line="6" pos:column="19"/></literal></expr>)<pos:position pos:line="6" pos:column="20"/></condition><then pos:line="6" pos:column="20">
    <block type="pseudo"><return pos:line="7" pos:column="5">return <expr><operator pos:line="7" pos:column="12">(<pos:position pos:line="7" pos:column="13"/></operator><operator pos:line="7" pos:column="13">-<pos:position pos:line="7" pos:column="14"/></operator><literal type="number" pos:line="7" pos:column="14">1<pos:position pos:line="7" pos:column="15"/></literal><operator pos:line="7" pos:column="15">)<pos:position pos:line="7" pos:column="16"/></operator></expr>;<pos:position pos:line="7" pos:column="17"/></return></block></then></if>

  <expr_stmt><expr><name pos:line="9" pos:column="3">status<pos:position pos:line="9" pos:column="9"/></name> <operator pos:line="9" pos:column="10">=<pos:position pos:line="9" pos:column="11"/></operator> <call><name pos:line="9" pos:column="12">pipe<pos:position pos:line="9" pos:column="16"/></name> <argument_list pos:line="9" pos:column="17">(<argument><expr><name pos:line="9" pos:column="18">fd_pipe<pos:position pos:line="9" pos:column="25"/></name></expr></argument>)<pos:position pos:line="9" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="27"/></expr_stmt>
  <if pos:line="10" pos:column="3">if <condition pos:line="10" pos:column="6">(<expr><name pos:line="10" pos:column="7">status<pos:position pos:line="10" pos:column="13"/></name> <operator pos:line="10" pos:column="14">!=<pos:position pos:line="10" pos:column="16"/></operator> <literal type="number" pos:line="10" pos:column="17">0<pos:position pos:line="10" pos:column="18"/></literal></expr>)<pos:position pos:line="10" pos:column="19"/></condition><then pos:line="10" pos:column="19">
  <block pos:line="11" pos:column="3">{
    <decl_stmt><decl><type><name pos:line="12" pos:column="5">char<pos:position pos:line="12" pos:column="9"/></name></type> <name><name pos:line="12" pos:column="10">errbuf<pos:position pos:line="12" pos:column="16"/></name><index pos:line="12" pos:column="16">[<expr><literal type="number" pos:line="12" pos:column="17">1024<pos:position pos:line="12" pos:column="21"/></literal></expr>]<pos:position pos:line="12" pos:column="22"/></index></name></decl>;<pos:position pos:line="12" pos:column="23"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="13" pos:column="5">ERROR<pos:position pos:line="13" pos:column="10"/></name> <argument_list pos:line="13" pos:column="11">(<argument><expr><literal type="string" pos:line="13" pos:column="12">"exec plugin: pipe failed: %s"<pos:position pos:line="13" pos:column="42"/></literal></expr></argument>,
	<argument><expr><call><name pos:line="14" pos:column="9">sstrerror<pos:position pos:line="14" pos:column="18"/></name> <argument_list pos:line="14" pos:column="19">(<argument><expr><name pos:line="14" pos:column="20">errno<pos:position pos:line="14" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="27">errbuf<pos:position pos:line="14" pos:column="33"/></name></expr></argument>, <argument><expr><sizeof pos:line="14" pos:column="35">sizeof <argument_list pos:line="14" pos:column="42">(<argument><expr><name pos:line="14" pos:column="43">errbuf<pos:position pos:line="14" pos:column="49"/></name></expr></argument>)<pos:position pos:line="14" pos:column="50"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="14" pos:column="51"/></argument_list></call></expr></argument>)<pos:position pos:line="14" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="53"/></expr_stmt>
    <return pos:line="15" pos:column="5">return <expr><operator pos:line="15" pos:column="12">(<pos:position pos:line="15" pos:column="13"/></operator><operator pos:line="15" pos:column="13">-<pos:position pos:line="15" pos:column="14"/></operator><literal type="number" pos:line="15" pos:column="14">1<pos:position pos:line="15" pos:column="15"/></literal><operator pos:line="15" pos:column="15">)<pos:position pos:line="15" pos:column="16"/></operator></expr>;<pos:position pos:line="15" pos:column="17"/></return>
  }<pos:position pos:line="16" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name><name pos:line="18" pos:column="3">pl<pos:position pos:line="18" pos:column="5"/></name><operator pos:line="18" pos:column="5">-&gt;<pos:position pos:line="18" pos:column="10"/></operator><name pos:line="18" pos:column="7">pid<pos:position pos:line="18" pos:column="10"/></name></name> <operator pos:line="18" pos:column="11">=<pos:position pos:line="18" pos:column="12"/></operator> <call><name pos:line="18" pos:column="13">fork<pos:position pos:line="18" pos:column="17"/></name> <argument_list pos:line="18" pos:column="18">()<pos:position pos:line="18" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="21"/></expr_stmt>
  <if pos:line="19" pos:column="3">if <condition pos:line="19" pos:column="6">(<expr><name><name pos:line="19" pos:column="7">pl<pos:position pos:line="19" pos:column="9"/></name><operator pos:line="19" pos:column="9">-&gt;<pos:position pos:line="19" pos:column="14"/></operator><name pos:line="19" pos:column="11">pid<pos:position pos:line="19" pos:column="14"/></name></name> <operator pos:line="19" pos:column="15">&lt;<pos:position pos:line="19" pos:column="19"/></operator> <literal type="number" pos:line="19" pos:column="17">0<pos:position pos:line="19" pos:column="18"/></literal></expr>)<pos:position pos:line="19" pos:column="19"/></condition><then pos:line="19" pos:column="19">
  <block pos:line="20" pos:column="3">{
    <decl_stmt><decl><type><name pos:line="21" pos:column="5">char<pos:position pos:line="21" pos:column="9"/></name></type> <name><name pos:line="21" pos:column="10">errbuf<pos:position pos:line="21" pos:column="16"/></name><index pos:line="21" pos:column="16">[<expr><literal type="number" pos:line="21" pos:column="17">1024<pos:position pos:line="21" pos:column="21"/></literal></expr>]<pos:position pos:line="21" pos:column="22"/></index></name></decl>;<pos:position pos:line="21" pos:column="23"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="22" pos:column="5">ERROR<pos:position pos:line="22" pos:column="10"/></name> <argument_list pos:line="22" pos:column="11">(<argument><expr><literal type="string" pos:line="22" pos:column="12">"exec plugin: fork failed: %s"<pos:position pos:line="22" pos:column="42"/></literal></expr></argument>,
	<argument><expr><call><name pos:line="23" pos:column="9">sstrerror<pos:position pos:line="23" pos:column="18"/></name> <argument_list pos:line="23" pos:column="19">(<argument><expr><name pos:line="23" pos:column="20">errno<pos:position pos:line="23" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="27">errbuf<pos:position pos:line="23" pos:column="33"/></name></expr></argument>, <argument><expr><sizeof pos:line="23" pos:column="35">sizeof <argument_list pos:line="23" pos:column="42">(<argument><expr><name pos:line="23" pos:column="43">errbuf<pos:position pos:line="23" pos:column="49"/></name></expr></argument>)<pos:position pos:line="23" pos:column="50"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="23" pos:column="51"/></argument_list></call></expr></argument>)<pos:position pos:line="23" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="53"/></expr_stmt>
    <return pos:line="24" pos:column="5">return <expr><operator pos:line="24" pos:column="12">(<pos:position pos:line="24" pos:column="13"/></operator><operator pos:line="24" pos:column="13">-<pos:position pos:line="24" pos:column="14"/></operator><literal type="number" pos:line="24" pos:column="14">1<pos:position pos:line="24" pos:column="15"/></literal><operator pos:line="24" pos:column="15">)<pos:position pos:line="24" pos:column="16"/></operator></expr>;<pos:position pos:line="24" pos:column="17"/></return>
  }<pos:position pos:line="25" pos:column="4"/></block></then>
  <elseif pos:line="26" pos:column="3">else <if pos:line="26" pos:column="8">if <condition pos:line="26" pos:column="11">(<expr><name><name pos:line="26" pos:column="12">pl<pos:position pos:line="26" pos:column="14"/></name><operator pos:line="26" pos:column="14">-&gt;<pos:position pos:line="26" pos:column="19"/></operator><name pos:line="26" pos:column="16">pid<pos:position pos:line="26" pos:column="19"/></name></name> <operator pos:line="26" pos:column="20">==<pos:position pos:line="26" pos:column="22"/></operator> <literal type="number" pos:line="26" pos:column="23">0<pos:position pos:line="26" pos:column="24"/></literal></expr>)<pos:position pos:line="26" pos:column="25"/></condition><then pos:line="26" pos:column="25">
  <block pos:line="27" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="28" pos:column="5">close<pos:position pos:line="28" pos:column="10"/></name> <argument_list pos:line="28" pos:column="11">(<argument><expr><name><name pos:line="28" pos:column="12">fd_pipe<pos:position pos:line="28" pos:column="19"/></name><index pos:line="28" pos:column="19">[<expr><literal type="number" pos:line="28" pos:column="20">0<pos:position pos:line="28" pos:column="21"/></literal></expr>]<pos:position pos:line="28" pos:column="22"/></index></name></expr></argument>)<pos:position pos:line="28" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="24"/></expr_stmt>

    <comment type="block" pos:line="30" pos:column="5">/* Connect the pipe to STDOUT and STDERR */</comment>
    <if pos:line="31" pos:column="5">if <condition pos:line="31" pos:column="8">(<expr><name><name pos:line="31" pos:column="9">fd_pipe<pos:position pos:line="31" pos:column="16"/></name><index pos:line="31" pos:column="16">[<expr><literal type="number" pos:line="31" pos:column="17">1<pos:position pos:line="31" pos:column="18"/></literal></expr>]<pos:position pos:line="31" pos:column="19"/></index></name> <operator pos:line="31" pos:column="20">!=<pos:position pos:line="31" pos:column="22"/></operator> <name pos:line="31" pos:column="23">STDOUT_FILENO<pos:position pos:line="31" pos:column="36"/></name></expr>)<pos:position pos:line="31" pos:column="37"/></condition><then pos:line="31" pos:column="37">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="32" pos:column="7">dup2<pos:position pos:line="32" pos:column="11"/></name> <argument_list pos:line="32" pos:column="12">(<argument><expr><name><name pos:line="32" pos:column="13">fd_pipe<pos:position pos:line="32" pos:column="20"/></name><index pos:line="32" pos:column="20">[<expr><literal type="number" pos:line="32" pos:column="21">1<pos:position pos:line="32" pos:column="22"/></literal></expr>]<pos:position pos:line="32" pos:column="23"/></index></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="25">STDOUT_FILENO<pos:position pos:line="32" pos:column="38"/></name></expr></argument>)<pos:position pos:line="32" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="40"/></expr_stmt></block></then></if>
    <if pos:line="33" pos:column="5">if <condition pos:line="33" pos:column="8">(<expr><name><name pos:line="33" pos:column="9">fd_pipe<pos:position pos:line="33" pos:column="16"/></name><index pos:line="33" pos:column="16">[<expr><literal type="number" pos:line="33" pos:column="17">1<pos:position pos:line="33" pos:column="18"/></literal></expr>]<pos:position pos:line="33" pos:column="19"/></index></name> <operator pos:line="33" pos:column="20">!=<pos:position pos:line="33" pos:column="22"/></operator> <name pos:line="33" pos:column="23">STDERR_FILENO<pos:position pos:line="33" pos:column="36"/></name></expr>)<pos:position pos:line="33" pos:column="37"/></condition><then pos:line="33" pos:column="37">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="34" pos:column="7">dup2<pos:position pos:line="34" pos:column="11"/></name> <argument_list pos:line="34" pos:column="12">(<argument><expr><name><name pos:line="34" pos:column="13">fd_pipe<pos:position pos:line="34" pos:column="20"/></name><index pos:line="34" pos:column="20">[<expr><literal type="number" pos:line="34" pos:column="21">1<pos:position pos:line="34" pos:column="22"/></literal></expr>]<pos:position pos:line="34" pos:column="23"/></index></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="25">STDERR_FILENO<pos:position pos:line="34" pos:column="38"/></name></expr></argument>)<pos:position pos:line="34" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="40"/></expr_stmt></block></then></if>
    <if pos:line="35" pos:column="5">if <condition pos:line="35" pos:column="8">(<expr><operator pos:line="35" pos:column="9">(<pos:position pos:line="35" pos:column="10"/></operator><name><name pos:line="35" pos:column="10">fd_pipe<pos:position pos:line="35" pos:column="17"/></name><index pos:line="35" pos:column="17">[<expr><literal type="number" pos:line="35" pos:column="18">1<pos:position pos:line="35" pos:column="19"/></literal></expr>]<pos:position pos:line="35" pos:column="20"/></index></name> <operator pos:line="35" pos:column="21">!=<pos:position pos:line="35" pos:column="23"/></operator> <name pos:line="35" pos:column="24">STDOUT_FILENO<pos:position pos:line="35" pos:column="37"/></name><operator pos:line="35" pos:column="37">)<pos:position pos:line="35" pos:column="38"/></operator> <operator pos:line="35" pos:column="39">&amp;&amp;<pos:position pos:line="35" pos:column="49"/></operator> <operator pos:line="35" pos:column="42">(<pos:position pos:line="35" pos:column="43"/></operator><name><name pos:line="35" pos:column="43">fd_pipe<pos:position pos:line="35" pos:column="50"/></name><index pos:line="35" pos:column="50">[<expr><literal type="number" pos:line="35" pos:column="51">1<pos:position pos:line="35" pos:column="52"/></literal></expr>]<pos:position pos:line="35" pos:column="53"/></index></name> <operator pos:line="35" pos:column="54">!=<pos:position pos:line="35" pos:column="56"/></operator> <name pos:line="35" pos:column="57">STDERR_FILENO<pos:position pos:line="35" pos:column="70"/></name><operator pos:line="35" pos:column="70">)<pos:position pos:line="35" pos:column="71"/></operator></expr>)<pos:position pos:line="35" pos:column="72"/></condition><then pos:line="35" pos:column="72">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="36" pos:column="7">close<pos:position pos:line="36" pos:column="12"/></name> <argument_list pos:line="36" pos:column="13">(<argument><expr><name><name pos:line="36" pos:column="14">fd_pipe<pos:position pos:line="36" pos:column="21"/></name><index pos:line="36" pos:column="21">[<expr><literal type="number" pos:line="36" pos:column="22">1<pos:position pos:line="36" pos:column="23"/></literal></expr>]<pos:position pos:line="36" pos:column="24"/></index></name></expr></argument>)<pos:position pos:line="36" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="26"/></expr_stmt></block></then></if>

    <expr_stmt><expr><call><name pos:line="38" pos:column="5">exec_child<pos:position pos:line="38" pos:column="15"/></name> <argument_list pos:line="38" pos:column="16">(<argument><expr><name pos:line="38" pos:column="17">pl<pos:position pos:line="38" pos:column="19"/></name></expr></argument>)<pos:position pos:line="38" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="21"/></expr_stmt>
    <comment type="block" pos:line="39" pos:column="5">/* does not return */</comment>
  }<pos:position pos:line="40" pos:column="4"/></block></then></if></elseif></if>

  <expr_stmt><expr><call><name pos:line="42" pos:column="3">close<pos:position pos:line="42" pos:column="8"/></name> <argument_list pos:line="42" pos:column="9">(<argument><expr><name><name pos:line="42" pos:column="10">fd_pipe<pos:position pos:line="42" pos:column="17"/></name><index pos:line="42" pos:column="17">[<expr><literal type="number" pos:line="42" pos:column="18">1<pos:position pos:line="42" pos:column="19"/></literal></expr>]<pos:position pos:line="42" pos:column="20"/></index></name></expr></argument>)<pos:position pos:line="42" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="22"/></expr_stmt>
  <return pos:line="43" pos:column="3">return <expr><operator pos:line="43" pos:column="10">(<pos:position pos:line="43" pos:column="11"/></operator><name><name pos:line="43" pos:column="11">fd_pipe<pos:position pos:line="43" pos:column="18"/></name><index pos:line="43" pos:column="18">[<expr><literal type="number" pos:line="43" pos:column="19">0<pos:position pos:line="43" pos:column="20"/></literal></expr>]<pos:position pos:line="43" pos:column="21"/></index></name><operator pos:line="43" pos:column="21">)<pos:position pos:line="43" pos:column="22"/></operator></expr>;<pos:position pos:line="43" pos:column="23"/></return>
}<pos:position pos:line="44" pos:column="2"/></block></function></unit>
