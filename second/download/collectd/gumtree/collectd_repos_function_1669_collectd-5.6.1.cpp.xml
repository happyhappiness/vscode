<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1669_collectd-5.6.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">cconn_handle_event<pos:position pos:line="1" pos:column="30"/></name><parameter_list pos:line="1" pos:column="30">(<parameter><decl><type><name><name pos:line="1" pos:column="31">struct<pos:position pos:line="1" pos:column="37"/></name> <name pos:line="1" pos:column="38">cconn<pos:position pos:line="1" pos:column="43"/></name></name> <modifier pos:line="1" pos:column="44">*<pos:position pos:line="1" pos:column="45"/></modifier></type><name pos:line="1" pos:column="45">io<pos:position pos:line="1" pos:column="47"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="48"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">int<pos:position pos:line="3" pos:column="8"/></name></type> <name pos:line="3" pos:column="9">ret<pos:position pos:line="3" pos:column="12"/></name></decl>;<pos:position pos:line="3" pos:column="13"/></decl_stmt>
    <switch pos:line="4" pos:column="5">switch <condition pos:line="4" pos:column="12">(<expr><name><name pos:line="4" pos:column="13">io<pos:position pos:line="4" pos:column="15"/></name><operator pos:line="4" pos:column="15">-&gt;<pos:position pos:line="4" pos:column="20"/></operator><name pos:line="4" pos:column="17">state<pos:position pos:line="4" pos:column="22"/></name></name></expr>)<pos:position pos:line="4" pos:column="23"/></condition>
    <block pos:line="5" pos:column="5">{
        <case pos:line="6" pos:column="9">case <expr><name pos:line="6" pos:column="14">CSTATE_UNCONNECTED<pos:position pos:line="6" pos:column="32"/></name></expr>:<pos:position pos:line="6" pos:column="33"/></case>
            <expr_stmt><expr><call><name pos:line="7" pos:column="13">ERROR<pos:position pos:line="7" pos:column="18"/></name><argument_list pos:line="7" pos:column="18">(<argument><expr><literal type="string" pos:line="7" pos:column="19">"ceph plugin: cconn_handle_event(name=%s) got to illegal "<pos:position pos:line="7" pos:column="77"/></literal>
                <literal type="string" pos:line="8" pos:column="17">"state on line %d"<pos:position pos:line="8" pos:column="35"/></literal></expr></argument>, <argument><expr><name><name pos:line="8" pos:column="37">io<pos:position pos:line="8" pos:column="39"/></name><operator pos:line="8" pos:column="39">-&gt;<pos:position pos:line="8" pos:column="44"/></operator><name pos:line="8" pos:column="41">d<pos:position pos:line="8" pos:column="42"/></name><operator pos:line="8" pos:column="42">-&gt;<pos:position pos:line="8" pos:column="47"/></operator><name pos:line="8" pos:column="44">name<pos:position pos:line="8" pos:column="48"/></name></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="50">__LINE__<pos:position pos:line="8" pos:column="58"/></name></expr></argument>)<pos:position pos:line="8" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="60"/></expr_stmt>

            <return pos:line="10" pos:column="13">return <expr><operator pos:line="10" pos:column="20">-<pos:position pos:line="10" pos:column="21"/></operator><name pos:line="10" pos:column="21">EDOM<pos:position pos:line="10" pos:column="25"/></name></expr>;<pos:position pos:line="10" pos:column="26"/></return>
        <case pos:line="11" pos:column="9">case <expr><name pos:line="11" pos:column="14">CSTATE_WRITE_REQUEST<pos:position pos:line="11" pos:column="34"/></name></expr>:<pos:position pos:line="11" pos:column="35"/></case>
        <block pos:line="12" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="13" pos:column="13">char<pos:position pos:line="13" pos:column="17"/></name></type> <name><name pos:line="13" pos:column="18">cmd<pos:position pos:line="13" pos:column="21"/></name><index pos:line="13" pos:column="21">[<expr><literal type="number" pos:line="13" pos:column="22">32<pos:position pos:line="13" pos:column="24"/></literal></expr>]<pos:position pos:line="13" pos:column="25"/></index></name></decl>;<pos:position pos:line="13" pos:column="26"/></decl_stmt>
            <expr_stmt><expr><call><name pos:line="14" pos:column="13">snprintf<pos:position pos:line="14" pos:column="21"/></name><argument_list pos:line="14" pos:column="21">(<argument><expr><name pos:line="14" pos:column="22">cmd<pos:position pos:line="14" pos:column="25"/></name></expr></argument>, <argument><expr><sizeof pos:line="14" pos:column="27">sizeof<argument_list pos:line="14" pos:column="33">(<argument><expr><name pos:line="14" pos:column="34">cmd<pos:position pos:line="14" pos:column="37"/></name></expr></argument>)<pos:position pos:line="14" pos:column="38"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="14" pos:column="40">"%s%d%s"<pos:position pos:line="14" pos:column="48"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="14" pos:column="50">"{ \"prefix\": \""<pos:position pos:line="14" pos:column="68"/></literal></expr></argument>,
                    <argument><expr><name><name pos:line="15" pos:column="21">io<pos:position pos:line="15" pos:column="23"/></name><operator pos:line="15" pos:column="23">-&gt;<pos:position pos:line="15" pos:column="28"/></operator><name pos:line="15" pos:column="25">request_type<pos:position pos:line="15" pos:column="37"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="15" pos:column="39">"\" }\n"<pos:position pos:line="15" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="49"/></expr_stmt>
            <decl_stmt><decl><type><name pos:line="16" pos:column="13">size_t<pos:position pos:line="16" pos:column="19"/></name></type> <name pos:line="16" pos:column="20">cmd_len<pos:position pos:line="16" pos:column="27"/></name> <init pos:line="16" pos:column="28">= <expr><call><name pos:line="16" pos:column="30">strlen<pos:position pos:line="16" pos:column="36"/></name><argument_list pos:line="16" pos:column="36">(<argument><expr><name pos:line="16" pos:column="37">cmd<pos:position pos:line="16" pos:column="40"/></name></expr></argument>)<pos:position pos:line="16" pos:column="41"/></argument_list></call></expr></init></decl>;<pos:position pos:line="16" pos:column="42"/></decl_stmt>
            <expr_stmt><expr><call><name pos:line="17" pos:column="13">RETRY_ON_EINTR<pos:position pos:line="17" pos:column="27"/></name><argument_list pos:line="17" pos:column="27">(<argument><expr><name pos:line="17" pos:column="28">ret<pos:position pos:line="17" pos:column="31"/></name></expr></argument>,
                  <argument><expr><call><name pos:line="18" pos:column="19">write<pos:position pos:line="18" pos:column="24"/></name><argument_list pos:line="18" pos:column="24">(<argument><expr><name><name pos:line="18" pos:column="25">io<pos:position pos:line="18" pos:column="27"/></name><operator pos:line="18" pos:column="27">-&gt;<pos:position pos:line="18" pos:column="32"/></operator><name pos:line="18" pos:column="29">asok<pos:position pos:line="18" pos:column="33"/></name></name></expr></argument>, <argument><expr><operator pos:line="18" pos:column="35">(<pos:position pos:line="18" pos:column="36"/></operator><operator pos:line="18" pos:column="36">(<pos:position pos:line="18" pos:column="37"/></operator><name pos:line="18" pos:column="37">char<pos:position pos:line="18" pos:column="41"/></name><operator pos:line="18" pos:column="41">*<pos:position pos:line="18" pos:column="42"/></operator><operator pos:line="18" pos:column="42">)<pos:position pos:line="18" pos:column="43"/></operator><operator pos:line="18" pos:column="43">&amp;<pos:position pos:line="18" pos:column="48"/></operator><name pos:line="18" pos:column="44">cmd<pos:position pos:line="18" pos:column="47"/></name><operator pos:line="18" pos:column="47">)<pos:position pos:line="18" pos:column="48"/></operator> <operator pos:line="18" pos:column="49">+<pos:position pos:line="18" pos:column="50"/></operator> <name><name pos:line="18" pos:column="51">io<pos:position pos:line="18" pos:column="53"/></name><operator pos:line="18" pos:column="53">-&gt;<pos:position pos:line="18" pos:column="58"/></operator><name pos:line="18" pos:column="55">amt<pos:position pos:line="18" pos:column="58"/></name></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="60">cmd_len<pos:position pos:line="18" pos:column="67"/></name> <operator pos:line="18" pos:column="68">-<pos:position pos:line="18" pos:column="69"/></operator> <name><name pos:line="18" pos:column="70">io<pos:position pos:line="18" pos:column="72"/></name><operator pos:line="18" pos:column="72">-&gt;<pos:position pos:line="18" pos:column="77"/></operator><name pos:line="18" pos:column="74">amt<pos:position pos:line="18" pos:column="77"/></name></name></expr></argument>)<pos:position pos:line="18" pos:column="78"/></argument_list></call></expr></argument>)<pos:position pos:line="18" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="80"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="19" pos:column="13">DEBUG<pos:position pos:line="19" pos:column="18"/></name><argument_list pos:line="19" pos:column="18">(<argument><expr><literal type="string" pos:line="19" pos:column="19">"ceph plugin: cconn_handle_event(name=%s,state=%d,amt=%d,ret=%d)"<pos:position pos:line="19" pos:column="84"/></literal></expr></argument>,
                    <argument><expr><name><name pos:line="20" pos:column="21">io<pos:position pos:line="20" pos:column="23"/></name><operator pos:line="20" pos:column="23">-&gt;<pos:position pos:line="20" pos:column="28"/></operator><name pos:line="20" pos:column="25">d<pos:position pos:line="20" pos:column="26"/></name><operator pos:line="20" pos:column="26">-&gt;<pos:position pos:line="20" pos:column="31"/></operator><name pos:line="20" pos:column="28">name<pos:position pos:line="20" pos:column="32"/></name></name></expr></argument>, <argument><expr><name><name pos:line="20" pos:column="34">io<pos:position pos:line="20" pos:column="36"/></name><operator pos:line="20" pos:column="36">-&gt;<pos:position pos:line="20" pos:column="41"/></operator><name pos:line="20" pos:column="38">state<pos:position pos:line="20" pos:column="43"/></name></name></expr></argument>, <argument><expr><name><name pos:line="20" pos:column="45">io<pos:position pos:line="20" pos:column="47"/></name><operator pos:line="20" pos:column="47">-&gt;<pos:position pos:line="20" pos:column="52"/></operator><name pos:line="20" pos:column="49">amt<pos:position pos:line="20" pos:column="52"/></name></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="54">ret<pos:position pos:line="20" pos:column="57"/></name></expr></argument>)<pos:position pos:line="20" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="59"/></expr_stmt>
            <if pos:line="21" pos:column="13">if<condition pos:line="21" pos:column="15">(<expr><name pos:line="21" pos:column="16">ret<pos:position pos:line="21" pos:column="19"/></name> <operator pos:line="21" pos:column="20">&lt;<pos:position pos:line="21" pos:column="24"/></operator> <literal type="number" pos:line="21" pos:column="22">0<pos:position pos:line="21" pos:column="23"/></literal></expr>)<pos:position pos:line="21" pos:column="24"/></condition><then pos:line="21" pos:column="24">
            <block pos:line="22" pos:column="13">{
                <return pos:line="23" pos:column="17">return <expr><name pos:line="23" pos:column="24">ret<pos:position pos:line="23" pos:column="27"/></name></expr>;<pos:position pos:line="23" pos:column="28"/></return>
            }<pos:position pos:line="24" pos:column="14"/></block></then></if>
            <expr_stmt><expr><name><name pos:line="25" pos:column="13">io<pos:position pos:line="25" pos:column="15"/></name><operator pos:line="25" pos:column="15">-&gt;<pos:position pos:line="25" pos:column="20"/></operator><name pos:line="25" pos:column="17">amt<pos:position pos:line="25" pos:column="20"/></name></name> <operator pos:line="25" pos:column="21">+=<pos:position pos:line="25" pos:column="23"/></operator> <name pos:line="25" pos:column="24">ret<pos:position pos:line="25" pos:column="27"/></name></expr>;<pos:position pos:line="25" pos:column="28"/></expr_stmt>
            <if pos:line="26" pos:column="13">if<condition pos:line="26" pos:column="15">(<expr><name><name pos:line="26" pos:column="16">io<pos:position pos:line="26" pos:column="18"/></name><operator pos:line="26" pos:column="18">-&gt;<pos:position pos:line="26" pos:column="23"/></operator><name pos:line="26" pos:column="20">amt<pos:position pos:line="26" pos:column="23"/></name></name> <operator pos:line="26" pos:column="24">&gt;=<pos:position pos:line="26" pos:column="29"/></operator> <name pos:line="26" pos:column="27">cmd_len<pos:position pos:line="26" pos:column="34"/></name></expr>)<pos:position pos:line="26" pos:column="35"/></condition><then pos:line="26" pos:column="35">
            <block pos:line="27" pos:column="13">{
                <expr_stmt><expr><name><name pos:line="28" pos:column="17">io<pos:position pos:line="28" pos:column="19"/></name><operator pos:line="28" pos:column="19">-&gt;<pos:position pos:line="28" pos:column="24"/></operator><name pos:line="28" pos:column="21">amt<pos:position pos:line="28" pos:column="24"/></name></name> <operator pos:line="28" pos:column="25">=<pos:position pos:line="28" pos:column="26"/></operator> <literal type="number" pos:line="28" pos:column="27">0<pos:position pos:line="28" pos:column="28"/></literal></expr>;<pos:position pos:line="28" pos:column="29"/></expr_stmt>
                <switch pos:line="29" pos:column="17">switch <condition pos:line="29" pos:column="24">(<expr><name><name pos:line="29" pos:column="25">io<pos:position pos:line="29" pos:column="27"/></name><operator pos:line="29" pos:column="27">-&gt;<pos:position pos:line="29" pos:column="32"/></operator><name pos:line="29" pos:column="29">request_type<pos:position pos:line="29" pos:column="41"/></name></name></expr>)<pos:position pos:line="29" pos:column="42"/></condition>
                <block pos:line="30" pos:column="17">{
                    <case pos:line="31" pos:column="21">case <expr><name pos:line="31" pos:column="26">ASOK_REQ_VERSION<pos:position pos:line="31" pos:column="42"/></name></expr>:<pos:position pos:line="31" pos:column="43"/></case>
                        <expr_stmt><expr><name><name pos:line="32" pos:column="25">io<pos:position pos:line="32" pos:column="27"/></name><operator pos:line="32" pos:column="27">-&gt;<pos:position pos:line="32" pos:column="32"/></operator><name pos:line="32" pos:column="29">state<pos:position pos:line="32" pos:column="34"/></name></name> <operator pos:line="32" pos:column="35">=<pos:position pos:line="32" pos:column="36"/></operator> <name pos:line="32" pos:column="37">CSTATE_READ_VERSION<pos:position pos:line="32" pos:column="56"/></name></expr>;<pos:position pos:line="32" pos:column="57"/></expr_stmt>
                        <break pos:line="33" pos:column="25">break;<pos:position pos:line="33" pos:column="31"/></break>
                    <default pos:line="34" pos:column="21">default:<pos:position pos:line="34" pos:column="29"/></default>
                        <expr_stmt><expr><name><name pos:line="35" pos:column="25">io<pos:position pos:line="35" pos:column="27"/></name><operator pos:line="35" pos:column="27">-&gt;<pos:position pos:line="35" pos:column="32"/></operator><name pos:line="35" pos:column="29">state<pos:position pos:line="35" pos:column="34"/></name></name> <operator pos:line="35" pos:column="35">=<pos:position pos:line="35" pos:column="36"/></operator> <name pos:line="35" pos:column="37">CSTATE_READ_AMT<pos:position pos:line="35" pos:column="52"/></name></expr>;<pos:position pos:line="35" pos:column="53"/></expr_stmt>
                        <break pos:line="36" pos:column="25">break;<pos:position pos:line="36" pos:column="31"/></break>
                }<pos:position pos:line="37" pos:column="18"/></block></switch>
            }<pos:position pos:line="38" pos:column="14"/></block></then></if>
            <return pos:line="39" pos:column="13">return <expr><literal type="number" pos:line="39" pos:column="20">0<pos:position pos:line="39" pos:column="21"/></literal></expr>;<pos:position pos:line="39" pos:column="22"/></return>
        }<pos:position pos:line="40" pos:column="10"/></block>
        <case pos:line="41" pos:column="9">case <expr><name pos:line="41" pos:column="14">CSTATE_READ_VERSION<pos:position pos:line="41" pos:column="33"/></name></expr>:<pos:position pos:line="41" pos:column="34"/></case>
        <block pos:line="42" pos:column="9">{
            <expr_stmt><expr><call><name pos:line="43" pos:column="13">RETRY_ON_EINTR<pos:position pos:line="43" pos:column="27"/></name><argument_list pos:line="43" pos:column="27">(<argument><expr><name pos:line="43" pos:column="28">ret<pos:position pos:line="43" pos:column="31"/></name></expr></argument>,
                    <argument><expr><call><name pos:line="44" pos:column="21">read<pos:position pos:line="44" pos:column="25"/></name><argument_list pos:line="44" pos:column="25">(<argument><expr><name><name pos:line="44" pos:column="26">io<pos:position pos:line="44" pos:column="28"/></name><operator pos:line="44" pos:column="28">-&gt;<pos:position pos:line="44" pos:column="33"/></operator><name pos:line="44" pos:column="30">asok<pos:position pos:line="44" pos:column="34"/></name></name></expr></argument>, <argument><expr><operator pos:line="44" pos:column="36">(<pos:position pos:line="44" pos:column="37"/></operator><operator pos:line="44" pos:column="37">(<pos:position pos:line="44" pos:column="38"/></operator><name pos:line="44" pos:column="38">char<pos:position pos:line="44" pos:column="42"/></name><operator pos:line="44" pos:column="42">*<pos:position pos:line="44" pos:column="43"/></operator><operator pos:line="44" pos:column="43">)<pos:position pos:line="44" pos:column="44"/></operator><operator pos:line="44" pos:column="44">(<pos:position pos:line="44" pos:column="45"/></operator><operator pos:line="44" pos:column="45">&amp;<pos:position pos:line="44" pos:column="50"/></operator><name><name pos:line="44" pos:column="46">io<pos:position pos:line="44" pos:column="48"/></name><operator pos:line="44" pos:column="48">-&gt;<pos:position pos:line="44" pos:column="53"/></operator><name pos:line="44" pos:column="50">d<pos:position pos:line="44" pos:column="51"/></name><operator pos:line="44" pos:column="51">-&gt;<pos:position pos:line="44" pos:column="56"/></operator><name pos:line="44" pos:column="53">version<pos:position pos:line="44" pos:column="60"/></name></name><operator pos:line="44" pos:column="60">)<pos:position pos:line="44" pos:column="61"/></operator><operator pos:line="44" pos:column="61">)<pos:position pos:line="44" pos:column="62"/></operator> <operator pos:line="44" pos:column="63">+<pos:position pos:line="44" pos:column="64"/></operator> <name><name pos:line="44" pos:column="65">io<pos:position pos:line="44" pos:column="67"/></name><operator pos:line="44" pos:column="67">-&gt;<pos:position pos:line="44" pos:column="72"/></operator><name pos:line="44" pos:column="69">amt<pos:position pos:line="44" pos:column="72"/></name></name></expr></argument>,
                            <argument><expr><sizeof pos:line="45" pos:column="29">sizeof<argument_list pos:line="45" pos:column="35">(<argument><expr><name><name pos:line="45" pos:column="36">io<pos:position pos:line="45" pos:column="38"/></name><operator pos:line="45" pos:column="38">-&gt;<pos:position pos:line="45" pos:column="43"/></operator><name pos:line="45" pos:column="40">d<pos:position pos:line="45" pos:column="41"/></name><operator pos:line="45" pos:column="41">-&gt;<pos:position pos:line="45" pos:column="46"/></operator><name pos:line="45" pos:column="43">version<pos:position pos:line="45" pos:column="50"/></name></name></expr></argument>)<pos:position pos:line="45" pos:column="51"/></argument_list></sizeof> <operator pos:line="45" pos:column="52">-<pos:position pos:line="45" pos:column="53"/></operator> <name><name pos:line="45" pos:column="54">io<pos:position pos:line="45" pos:column="56"/></name><operator pos:line="45" pos:column="56">-&gt;<pos:position pos:line="45" pos:column="61"/></operator><name pos:line="45" pos:column="58">amt<pos:position pos:line="45" pos:column="61"/></name></name></expr></argument>)<pos:position pos:line="45" pos:column="62"/></argument_list></call></expr></argument>)<pos:position pos:line="45" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="64"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="46" pos:column="13">DEBUG<pos:position pos:line="46" pos:column="18"/></name><argument_list pos:line="46" pos:column="18">(<argument><expr><literal type="string" pos:line="46" pos:column="19">"ceph plugin: cconn_handle_event(name=%s,state=%d,ret=%d)"<pos:position pos:line="46" pos:column="77"/></literal></expr></argument>,
                    <argument><expr><name><name pos:line="47" pos:column="21">io<pos:position pos:line="47" pos:column="23"/></name><operator pos:line="47" pos:column="23">-&gt;<pos:position pos:line="47" pos:column="28"/></operator><name pos:line="47" pos:column="25">d<pos:position pos:line="47" pos:column="26"/></name><operator pos:line="47" pos:column="26">-&gt;<pos:position pos:line="47" pos:column="31"/></operator><name pos:line="47" pos:column="28">name<pos:position pos:line="47" pos:column="32"/></name></name></expr></argument>, <argument><expr><name><name pos:line="47" pos:column="34">io<pos:position pos:line="47" pos:column="36"/></name><operator pos:line="47" pos:column="36">-&gt;<pos:position pos:line="47" pos:column="41"/></operator><name pos:line="47" pos:column="38">state<pos:position pos:line="47" pos:column="43"/></name></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="45">ret<pos:position pos:line="47" pos:column="48"/></name></expr></argument>)<pos:position pos:line="47" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="50"/></expr_stmt>
            <if pos:line="48" pos:column="13">if<condition pos:line="48" pos:column="15">(<expr><name pos:line="48" pos:column="16">ret<pos:position pos:line="48" pos:column="19"/></name> <operator pos:line="48" pos:column="20">&lt;<pos:position pos:line="48" pos:column="24"/></operator> <literal type="number" pos:line="48" pos:column="22">0<pos:position pos:line="48" pos:column="23"/></literal></expr>)<pos:position pos:line="48" pos:column="24"/></condition><then pos:line="48" pos:column="24">
            <block pos:line="49" pos:column="13">{
                <return pos:line="50" pos:column="17">return <expr><name pos:line="50" pos:column="24">ret<pos:position pos:line="50" pos:column="27"/></name></expr>;<pos:position pos:line="50" pos:column="28"/></return>
            }<pos:position pos:line="51" pos:column="14"/></block></then></if>
            <expr_stmt><expr><name><name pos:line="52" pos:column="13">io<pos:position pos:line="52" pos:column="15"/></name><operator pos:line="52" pos:column="15">-&gt;<pos:position pos:line="52" pos:column="20"/></operator><name pos:line="52" pos:column="17">amt<pos:position pos:line="52" pos:column="20"/></name></name> <operator pos:line="52" pos:column="21">+=<pos:position pos:line="52" pos:column="23"/></operator> <name pos:line="52" pos:column="24">ret<pos:position pos:line="52" pos:column="27"/></name></expr>;<pos:position pos:line="52" pos:column="28"/></expr_stmt>
            <if pos:line="53" pos:column="13">if<condition pos:line="53" pos:column="15">(<expr><name><name pos:line="53" pos:column="16">io<pos:position pos:line="53" pos:column="18"/></name><operator pos:line="53" pos:column="18">-&gt;<pos:position pos:line="53" pos:column="23"/></operator><name pos:line="53" pos:column="20">amt<pos:position pos:line="53" pos:column="23"/></name></name> <operator pos:line="53" pos:column="24">&gt;=<pos:position pos:line="53" pos:column="29"/></operator> <sizeof pos:line="53" pos:column="27">sizeof<argument_list pos:line="53" pos:column="33">(<argument><expr><name><name pos:line="53" pos:column="34">io<pos:position pos:line="53" pos:column="36"/></name><operator pos:line="53" pos:column="36">-&gt;<pos:position pos:line="53" pos:column="41"/></operator><name pos:line="53" pos:column="38">d<pos:position pos:line="53" pos:column="39"/></name><operator pos:line="53" pos:column="39">-&gt;<pos:position pos:line="53" pos:column="44"/></operator><name pos:line="53" pos:column="41">version<pos:position pos:line="53" pos:column="48"/></name></name></expr></argument>)<pos:position pos:line="53" pos:column="49"/></argument_list></sizeof></expr>)<pos:position pos:line="53" pos:column="50"/></condition><then pos:line="53" pos:column="50">
            <block pos:line="54" pos:column="13">{
                <expr_stmt><expr><name><name pos:line="55" pos:column="17">io<pos:position pos:line="55" pos:column="19"/></name><operator pos:line="55" pos:column="19">-&gt;<pos:position pos:line="55" pos:column="24"/></operator><name pos:line="55" pos:column="21">d<pos:position pos:line="55" pos:column="22"/></name><operator pos:line="55" pos:column="22">-&gt;<pos:position pos:line="55" pos:column="27"/></operator><name pos:line="55" pos:column="24">version<pos:position pos:line="55" pos:column="31"/></name></name> <operator pos:line="55" pos:column="32">=<pos:position pos:line="55" pos:column="33"/></operator> <call><name pos:line="55" pos:column="34">ntohl<pos:position pos:line="55" pos:column="39"/></name><argument_list pos:line="55" pos:column="39">(<argument><expr><name><name pos:line="55" pos:column="40">io<pos:position pos:line="55" pos:column="42"/></name><operator pos:line="55" pos:column="42">-&gt;<pos:position pos:line="55" pos:column="47"/></operator><name pos:line="55" pos:column="44">d<pos:position pos:line="55" pos:column="45"/></name><operator pos:line="55" pos:column="45">-&gt;<pos:position pos:line="55" pos:column="50"/></operator><name pos:line="55" pos:column="47">version<pos:position pos:line="55" pos:column="54"/></name></name></expr></argument>)<pos:position pos:line="55" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="56"/></expr_stmt>
                <if pos:line="56" pos:column="17">if<condition pos:line="56" pos:column="19">(<expr><name><name pos:line="56" pos:column="20">io<pos:position pos:line="56" pos:column="22"/></name><operator pos:line="56" pos:column="22">-&gt;<pos:position pos:line="56" pos:column="27"/></operator><name pos:line="56" pos:column="24">d<pos:position pos:line="56" pos:column="25"/></name><operator pos:line="56" pos:column="25">-&gt;<pos:position pos:line="56" pos:column="30"/></operator><name pos:line="56" pos:column="27">version<pos:position pos:line="56" pos:column="34"/></name></name> <operator pos:line="56" pos:column="35">!=<pos:position pos:line="56" pos:column="37"/></operator> <literal type="number" pos:line="56" pos:column="38">1<pos:position pos:line="56" pos:column="39"/></literal></expr>)<pos:position pos:line="56" pos:column="40"/></condition><then pos:line="56" pos:column="40">
                <block pos:line="57" pos:column="17">{
                    <expr_stmt><expr><call><name pos:line="58" pos:column="21">ERROR<pos:position pos:line="58" pos:column="26"/></name><argument_list pos:line="58" pos:column="26">(<argument><expr><literal type="string" pos:line="58" pos:column="27">"ceph plugin: cconn_handle_event(name=%s) not "<pos:position pos:line="58" pos:column="74"/></literal>
                        <literal type="string" pos:line="59" pos:column="25">"expecting version %d!"<pos:position pos:line="59" pos:column="48"/></literal></expr></argument>, <argument><expr><name><name pos:line="59" pos:column="50">io<pos:position pos:line="59" pos:column="52"/></name><operator pos:line="59" pos:column="52">-&gt;<pos:position pos:line="59" pos:column="57"/></operator><name pos:line="59" pos:column="54">d<pos:position pos:line="59" pos:column="55"/></name><operator pos:line="59" pos:column="55">-&gt;<pos:position pos:line="59" pos:column="60"/></operator><name pos:line="59" pos:column="57">name<pos:position pos:line="59" pos:column="61"/></name></name></expr></argument>, <argument><expr><name><name pos:line="59" pos:column="63">io<pos:position pos:line="59" pos:column="65"/></name><operator pos:line="59" pos:column="65">-&gt;<pos:position pos:line="59" pos:column="70"/></operator><name pos:line="59" pos:column="67">d<pos:position pos:line="59" pos:column="68"/></name><operator pos:line="59" pos:column="68">-&gt;<pos:position pos:line="59" pos:column="73"/></operator><name pos:line="59" pos:column="70">version<pos:position pos:line="59" pos:column="77"/></name></name></expr></argument>)<pos:position pos:line="59" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="79"/></expr_stmt>
                    <return pos:line="60" pos:column="21">return <expr><operator pos:line="60" pos:column="28">-<pos:position pos:line="60" pos:column="29"/></operator><name pos:line="60" pos:column="29">ENOTSUP<pos:position pos:line="60" pos:column="36"/></name></expr>;<pos:position pos:line="60" pos:column="37"/></return>
                }<pos:position pos:line="61" pos:column="18"/></block></then></if>
                <expr_stmt><expr><call><name pos:line="62" pos:column="17">DEBUG<pos:position pos:line="62" pos:column="22"/></name><argument_list pos:line="62" pos:column="22">(<argument><expr><literal type="string" pos:line="62" pos:column="23">"ceph plugin: cconn_handle_event(name=%s): identified as "<pos:position pos:line="62" pos:column="81"/></literal>
                        <literal type="string" pos:line="63" pos:column="25">"version %d"<pos:position pos:line="63" pos:column="37"/></literal></expr></argument>, <argument><expr><name><name pos:line="63" pos:column="39">io<pos:position pos:line="63" pos:column="41"/></name><operator pos:line="63" pos:column="41">-&gt;<pos:position pos:line="63" pos:column="46"/></operator><name pos:line="63" pos:column="43">d<pos:position pos:line="63" pos:column="44"/></name><operator pos:line="63" pos:column="44">-&gt;<pos:position pos:line="63" pos:column="49"/></operator><name pos:line="63" pos:column="46">name<pos:position pos:line="63" pos:column="50"/></name></name></expr></argument>, <argument><expr><name><name pos:line="63" pos:column="52">io<pos:position pos:line="63" pos:column="54"/></name><operator pos:line="63" pos:column="54">-&gt;<pos:position pos:line="63" pos:column="59"/></operator><name pos:line="63" pos:column="56">d<pos:position pos:line="63" pos:column="57"/></name><operator pos:line="63" pos:column="57">-&gt;<pos:position pos:line="63" pos:column="62"/></operator><name pos:line="63" pos:column="59">version<pos:position pos:line="63" pos:column="66"/></name></name></expr></argument>)<pos:position pos:line="63" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="68"/></expr_stmt>
                <expr_stmt><expr><name><name pos:line="64" pos:column="17">io<pos:position pos:line="64" pos:column="19"/></name><operator pos:line="64" pos:column="19">-&gt;<pos:position pos:line="64" pos:column="24"/></operator><name pos:line="64" pos:column="21">amt<pos:position pos:line="64" pos:column="24"/></name></name> <operator pos:line="64" pos:column="25">=<pos:position pos:line="64" pos:column="26"/></operator> <literal type="number" pos:line="64" pos:column="27">0<pos:position pos:line="64" pos:column="28"/></literal></expr>;<pos:position pos:line="64" pos:column="29"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="65" pos:column="17">cconn_close<pos:position pos:line="65" pos:column="28"/></name><argument_list pos:line="65" pos:column="28">(<argument><expr><name pos:line="65" pos:column="29">io<pos:position pos:line="65" pos:column="31"/></name></expr></argument>)<pos:position pos:line="65" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="33"/></expr_stmt>
                <expr_stmt><expr><name><name pos:line="66" pos:column="17">io<pos:position pos:line="66" pos:column="19"/></name><operator pos:line="66" pos:column="19">-&gt;<pos:position pos:line="66" pos:column="24"/></operator><name pos:line="66" pos:column="21">request_type<pos:position pos:line="66" pos:column="33"/></name></name> <operator pos:line="66" pos:column="34">=<pos:position pos:line="66" pos:column="35"/></operator> <name pos:line="66" pos:column="36">ASOK_REQ_SCHEMA<pos:position pos:line="66" pos:column="51"/></name></expr>;<pos:position pos:line="66" pos:column="52"/></expr_stmt>
            }<pos:position pos:line="67" pos:column="14"/></block></then></if>
            <return pos:line="68" pos:column="13">return <expr><literal type="number" pos:line="68" pos:column="20">0<pos:position pos:line="68" pos:column="21"/></literal></expr>;<pos:position pos:line="68" pos:column="22"/></return>
        }<pos:position pos:line="69" pos:column="10"/></block>
        <case pos:line="70" pos:column="9">case <expr><name pos:line="70" pos:column="14">CSTATE_READ_AMT<pos:position pos:line="70" pos:column="29"/></name></expr>:<pos:position pos:line="70" pos:column="30"/></case>
        <block pos:line="71" pos:column="9">{
            <expr_stmt><expr><call><name pos:line="72" pos:column="13">RETRY_ON_EINTR<pos:position pos:line="72" pos:column="27"/></name><argument_list pos:line="72" pos:column="27">(<argument><expr><name pos:line="72" pos:column="28">ret<pos:position pos:line="72" pos:column="31"/></name></expr></argument>,
                    <argument><expr><call><name pos:line="73" pos:column="21">read<pos:position pos:line="73" pos:column="25"/></name><argument_list pos:line="73" pos:column="25">(<argument><expr><name><name pos:line="73" pos:column="26">io<pos:position pos:line="73" pos:column="28"/></name><operator pos:line="73" pos:column="28">-&gt;<pos:position pos:line="73" pos:column="33"/></operator><name pos:line="73" pos:column="30">asok<pos:position pos:line="73" pos:column="34"/></name></name></expr></argument>, <argument><expr><operator pos:line="73" pos:column="36">(<pos:position pos:line="73" pos:column="37"/></operator><operator pos:line="73" pos:column="37">(<pos:position pos:line="73" pos:column="38"/></operator><name pos:line="73" pos:column="38">char<pos:position pos:line="73" pos:column="42"/></name><operator pos:line="73" pos:column="42">*<pos:position pos:line="73" pos:column="43"/></operator><operator pos:line="73" pos:column="43">)<pos:position pos:line="73" pos:column="44"/></operator><operator pos:line="73" pos:column="44">(<pos:position pos:line="73" pos:column="45"/></operator><operator pos:line="73" pos:column="45">&amp;<pos:position pos:line="73" pos:column="50"/></operator><name><name pos:line="73" pos:column="46">io<pos:position pos:line="73" pos:column="48"/></name><operator pos:line="73" pos:column="48">-&gt;<pos:position pos:line="73" pos:column="53"/></operator><name pos:line="73" pos:column="50">json_len<pos:position pos:line="73" pos:column="58"/></name></name><operator pos:line="73" pos:column="58">)<pos:position pos:line="73" pos:column="59"/></operator><operator pos:line="73" pos:column="59">)<pos:position pos:line="73" pos:column="60"/></operator> <operator pos:line="73" pos:column="61">+<pos:position pos:line="73" pos:column="62"/></operator> <name><name pos:line="73" pos:column="63">io<pos:position pos:line="73" pos:column="65"/></name><operator pos:line="73" pos:column="65">-&gt;<pos:position pos:line="73" pos:column="70"/></operator><name pos:line="73" pos:column="67">amt<pos:position pos:line="73" pos:column="70"/></name></name></expr></argument>,
                            <argument><expr><sizeof pos:line="74" pos:column="29">sizeof<argument_list pos:line="74" pos:column="35">(<argument><expr><name><name pos:line="74" pos:column="36">io<pos:position pos:line="74" pos:column="38"/></name><operator pos:line="74" pos:column="38">-&gt;<pos:position pos:line="74" pos:column="43"/></operator><name pos:line="74" pos:column="40">json_len<pos:position pos:line="74" pos:column="48"/></name></name></expr></argument>)<pos:position pos:line="74" pos:column="49"/></argument_list></sizeof> <operator pos:line="74" pos:column="50">-<pos:position pos:line="74" pos:column="51"/></operator> <name><name pos:line="74" pos:column="52">io<pos:position pos:line="74" pos:column="54"/></name><operator pos:line="74" pos:column="54">-&gt;<pos:position pos:line="74" pos:column="59"/></operator><name pos:line="74" pos:column="56">amt<pos:position pos:line="74" pos:column="59"/></name></name></expr></argument>)<pos:position pos:line="74" pos:column="60"/></argument_list></call></expr></argument>)<pos:position pos:line="74" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="62"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="75" pos:column="13">DEBUG<pos:position pos:line="75" pos:column="18"/></name><argument_list pos:line="75" pos:column="18">(<argument><expr><literal type="string" pos:line="75" pos:column="19">"ceph plugin: cconn_handle_event(name=%s,state=%d,ret=%d)"<pos:position pos:line="75" pos:column="77"/></literal></expr></argument>,
                    <argument><expr><name><name pos:line="76" pos:column="21">io<pos:position pos:line="76" pos:column="23"/></name><operator pos:line="76" pos:column="23">-&gt;<pos:position pos:line="76" pos:column="28"/></operator><name pos:line="76" pos:column="25">d<pos:position pos:line="76" pos:column="26"/></name><operator pos:line="76" pos:column="26">-&gt;<pos:position pos:line="76" pos:column="31"/></operator><name pos:line="76" pos:column="28">name<pos:position pos:line="76" pos:column="32"/></name></name></expr></argument>, <argument><expr><name><name pos:line="76" pos:column="34">io<pos:position pos:line="76" pos:column="36"/></name><operator pos:line="76" pos:column="36">-&gt;<pos:position pos:line="76" pos:column="41"/></operator><name pos:line="76" pos:column="38">state<pos:position pos:line="76" pos:column="43"/></name></name></expr></argument>, <argument><expr><name pos:line="76" pos:column="45">ret<pos:position pos:line="76" pos:column="48"/></name></expr></argument>)<pos:position pos:line="76" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="50"/></expr_stmt>
            <if pos:line="77" pos:column="13">if<condition pos:line="77" pos:column="15">(<expr><name pos:line="77" pos:column="16">ret<pos:position pos:line="77" pos:column="19"/></name> <operator pos:line="77" pos:column="20">&lt;<pos:position pos:line="77" pos:column="24"/></operator> <literal type="number" pos:line="77" pos:column="22">0<pos:position pos:line="77" pos:column="23"/></literal></expr>)<pos:position pos:line="77" pos:column="24"/></condition><then pos:line="77" pos:column="24">
            <block pos:line="78" pos:column="13">{
                <return pos:line="79" pos:column="17">return <expr><name pos:line="79" pos:column="24">ret<pos:position pos:line="79" pos:column="27"/></name></expr>;<pos:position pos:line="79" pos:column="28"/></return>
            }<pos:position pos:line="80" pos:column="14"/></block></then></if>
            <expr_stmt><expr><name><name pos:line="81" pos:column="13">io<pos:position pos:line="81" pos:column="15"/></name><operator pos:line="81" pos:column="15">-&gt;<pos:position pos:line="81" pos:column="20"/></operator><name pos:line="81" pos:column="17">amt<pos:position pos:line="81" pos:column="20"/></name></name> <operator pos:line="81" pos:column="21">+=<pos:position pos:line="81" pos:column="23"/></operator> <name pos:line="81" pos:column="24">ret<pos:position pos:line="81" pos:column="27"/></name></expr>;<pos:position pos:line="81" pos:column="28"/></expr_stmt>
            <if pos:line="82" pos:column="13">if<condition pos:line="82" pos:column="15">(<expr><name><name pos:line="82" pos:column="16">io<pos:position pos:line="82" pos:column="18"/></name><operator pos:line="82" pos:column="18">-&gt;<pos:position pos:line="82" pos:column="23"/></operator><name pos:line="82" pos:column="20">amt<pos:position pos:line="82" pos:column="23"/></name></name> <operator pos:line="82" pos:column="24">&gt;=<pos:position pos:line="82" pos:column="29"/></operator> <sizeof pos:line="82" pos:column="27">sizeof<argument_list pos:line="82" pos:column="33">(<argument><expr><name><name pos:line="82" pos:column="34">io<pos:position pos:line="82" pos:column="36"/></name><operator pos:line="82" pos:column="36">-&gt;<pos:position pos:line="82" pos:column="41"/></operator><name pos:line="82" pos:column="38">json_len<pos:position pos:line="82" pos:column="46"/></name></name></expr></argument>)<pos:position pos:line="82" pos:column="47"/></argument_list></sizeof></expr>)<pos:position pos:line="82" pos:column="48"/></condition><then pos:line="82" pos:column="48">
            <block pos:line="83" pos:column="13">{
                <expr_stmt><expr><name><name pos:line="84" pos:column="17">io<pos:position pos:line="84" pos:column="19"/></name><operator pos:line="84" pos:column="19">-&gt;<pos:position pos:line="84" pos:column="24"/></operator><name pos:line="84" pos:column="21">json_len<pos:position pos:line="84" pos:column="29"/></name></name> <operator pos:line="84" pos:column="30">=<pos:position pos:line="84" pos:column="31"/></operator> <call><name pos:line="84" pos:column="32">ntohl<pos:position pos:line="84" pos:column="37"/></name><argument_list pos:line="84" pos:column="37">(<argument><expr><name><name pos:line="84" pos:column="38">io<pos:position pos:line="84" pos:column="40"/></name><operator pos:line="84" pos:column="40">-&gt;<pos:position pos:line="84" pos:column="45"/></operator><name pos:line="84" pos:column="42">json_len<pos:position pos:line="84" pos:column="50"/></name></name></expr></argument>)<pos:position pos:line="84" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="52"/></expr_stmt>
                <expr_stmt><expr><name><name pos:line="85" pos:column="17">io<pos:position pos:line="85" pos:column="19"/></name><operator pos:line="85" pos:column="19">-&gt;<pos:position pos:line="85" pos:column="24"/></operator><name pos:line="85" pos:column="21">amt<pos:position pos:line="85" pos:column="24"/></name></name> <operator pos:line="85" pos:column="25">=<pos:position pos:line="85" pos:column="26"/></operator> <literal type="number" pos:line="85" pos:column="27">0<pos:position pos:line="85" pos:column="28"/></literal></expr>;<pos:position pos:line="85" pos:column="29"/></expr_stmt>
                <expr_stmt><expr><name><name pos:line="86" pos:column="17">io<pos:position pos:line="86" pos:column="19"/></name><operator pos:line="86" pos:column="19">-&gt;<pos:position pos:line="86" pos:column="24"/></operator><name pos:line="86" pos:column="21">state<pos:position pos:line="86" pos:column="26"/></name></name> <operator pos:line="86" pos:column="27">=<pos:position pos:line="86" pos:column="28"/></operator> <name pos:line="86" pos:column="29">CSTATE_READ_JSON<pos:position pos:line="86" pos:column="45"/></name></expr>;<pos:position pos:line="86" pos:column="46"/></expr_stmt>
                <expr_stmt><expr><name><name pos:line="87" pos:column="17">io<pos:position pos:line="87" pos:column="19"/></name><operator pos:line="87" pos:column="19">-&gt;<pos:position pos:line="87" pos:column="24"/></operator><name pos:line="87" pos:column="21">json<pos:position pos:line="87" pos:column="25"/></name></name> <operator pos:line="87" pos:column="26">=<pos:position pos:line="87" pos:column="27"/></operator> <call><name pos:line="87" pos:column="28">calloc<pos:position pos:line="87" pos:column="34"/></name><argument_list pos:line="87" pos:column="34">(<argument><expr><literal type="number" pos:line="87" pos:column="35">1<pos:position pos:line="87" pos:column="36"/></literal></expr></argument>, <argument><expr><name><name pos:line="87" pos:column="38">io<pos:position pos:line="87" pos:column="40"/></name><operator pos:line="87" pos:column="40">-&gt;<pos:position pos:line="87" pos:column="45"/></operator><name pos:line="87" pos:column="42">json_len<pos:position pos:line="87" pos:column="50"/></name></name> <operator pos:line="87" pos:column="51">+<pos:position pos:line="87" pos:column="52"/></operator> <literal type="number" pos:line="87" pos:column="53">1<pos:position pos:line="87" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="87" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="56"/></expr_stmt>
                <if pos:line="88" pos:column="17">if<condition pos:line="88" pos:column="19">(<expr><operator pos:line="88" pos:column="20">!<pos:position pos:line="88" pos:column="21"/></operator><name><name pos:line="88" pos:column="21">io<pos:position pos:line="88" pos:column="23"/></name><operator pos:line="88" pos:column="23">-&gt;<pos:position pos:line="88" pos:column="28"/></operator><name pos:line="88" pos:column="25">json<pos:position pos:line="88" pos:column="29"/></name></name></expr>)<pos:position pos:line="88" pos:column="30"/></condition><then pos:line="88" pos:column="30">
                <block pos:line="89" pos:column="17">{
                    <expr_stmt><expr><call><name pos:line="90" pos:column="21">ERROR<pos:position pos:line="90" pos:column="26"/></name><argument_list pos:line="90" pos:column="26">(<argument><expr><literal type="string" pos:line="90" pos:column="27">"ceph plugin: error callocing io-&gt;json"<pos:position pos:line="90" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="90" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="90" pos:column="68"/></expr_stmt>
                    <return pos:line="91" pos:column="21">return <expr><operator pos:line="91" pos:column="28">-<pos:position pos:line="91" pos:column="29"/></operator><name pos:line="91" pos:column="29">ENOMEM<pos:position pos:line="91" pos:column="35"/></name></expr>;<pos:position pos:line="91" pos:column="36"/></return>
                }<pos:position pos:line="92" pos:column="18"/></block></then></if>
            }<pos:position pos:line="93" pos:column="14"/></block></then></if>
            <return pos:line="94" pos:column="13">return <expr><literal type="number" pos:line="94" pos:column="20">0<pos:position pos:line="94" pos:column="21"/></literal></expr>;<pos:position pos:line="94" pos:column="22"/></return>
        }<pos:position pos:line="95" pos:column="10"/></block>
        <case pos:line="96" pos:column="9">case <expr><name pos:line="96" pos:column="14">CSTATE_READ_JSON<pos:position pos:line="96" pos:column="30"/></name></expr>:<pos:position pos:line="96" pos:column="31"/></case>
        <block pos:line="97" pos:column="9">{
            <expr_stmt><expr><call><name pos:line="98" pos:column="13">RETRY_ON_EINTR<pos:position pos:line="98" pos:column="27"/></name><argument_list pos:line="98" pos:column="27">(<argument><expr><name pos:line="98" pos:column="28">ret<pos:position pos:line="98" pos:column="31"/></name></expr></argument>,
                   <argument><expr><call><name pos:line="99" pos:column="20">read<pos:position pos:line="99" pos:column="24"/></name><argument_list pos:line="99" pos:column="24">(<argument><expr><name><name pos:line="99" pos:column="25">io<pos:position pos:line="99" pos:column="27"/></name><operator pos:line="99" pos:column="27">-&gt;<pos:position pos:line="99" pos:column="32"/></operator><name pos:line="99" pos:column="29">asok<pos:position pos:line="99" pos:column="33"/></name></name></expr></argument>, <argument><expr><name><name pos:line="99" pos:column="35">io<pos:position pos:line="99" pos:column="37"/></name><operator pos:line="99" pos:column="37">-&gt;<pos:position pos:line="99" pos:column="42"/></operator><name pos:line="99" pos:column="39">json<pos:position pos:line="99" pos:column="43"/></name></name> <operator pos:line="99" pos:column="44">+<pos:position pos:line="99" pos:column="45"/></operator> <name><name pos:line="99" pos:column="46">io<pos:position pos:line="99" pos:column="48"/></name><operator pos:line="99" pos:column="48">-&gt;<pos:position pos:line="99" pos:column="53"/></operator><name pos:line="99" pos:column="50">amt<pos:position pos:line="99" pos:column="53"/></name></name></expr></argument>, <argument><expr><name><name pos:line="99" pos:column="55">io<pos:position pos:line="99" pos:column="57"/></name><operator pos:line="99" pos:column="57">-&gt;<pos:position pos:line="99" pos:column="62"/></operator><name pos:line="99" pos:column="59">json_len<pos:position pos:line="99" pos:column="67"/></name></name> <operator pos:line="99" pos:column="68">-<pos:position pos:line="99" pos:column="69"/></operator> <name><name pos:line="99" pos:column="70">io<pos:position pos:line="99" pos:column="72"/></name><operator pos:line="99" pos:column="72">-&gt;<pos:position pos:line="99" pos:column="77"/></operator><name pos:line="99" pos:column="74">amt<pos:position pos:line="99" pos:column="77"/></name></name></expr></argument>)<pos:position pos:line="99" pos:column="78"/></argument_list></call></expr></argument>)<pos:position pos:line="99" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="99" pos:column="80"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="100" pos:column="13">DEBUG<pos:position pos:line="100" pos:column="18"/></name><argument_list pos:line="100" pos:column="18">(<argument><expr><literal type="string" pos:line="100" pos:column="19">"ceph plugin: cconn_handle_event(name=%s,state=%d,ret=%d)"<pos:position pos:line="100" pos:column="77"/></literal></expr></argument>,
                    <argument><expr><name><name pos:line="101" pos:column="21">io<pos:position pos:line="101" pos:column="23"/></name><operator pos:line="101" pos:column="23">-&gt;<pos:position pos:line="101" pos:column="28"/></operator><name pos:line="101" pos:column="25">d<pos:position pos:line="101" pos:column="26"/></name><operator pos:line="101" pos:column="26">-&gt;<pos:position pos:line="101" pos:column="31"/></operator><name pos:line="101" pos:column="28">name<pos:position pos:line="101" pos:column="32"/></name></name></expr></argument>, <argument><expr><name><name pos:line="101" pos:column="34">io<pos:position pos:line="101" pos:column="36"/></name><operator pos:line="101" pos:column="36">-&gt;<pos:position pos:line="101" pos:column="41"/></operator><name pos:line="101" pos:column="38">state<pos:position pos:line="101" pos:column="43"/></name></name></expr></argument>, <argument><expr><name pos:line="101" pos:column="45">ret<pos:position pos:line="101" pos:column="48"/></name></expr></argument>)<pos:position pos:line="101" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="101" pos:column="50"/></expr_stmt>
            <if pos:line="102" pos:column="13">if<condition pos:line="102" pos:column="15">(<expr><name pos:line="102" pos:column="16">ret<pos:position pos:line="102" pos:column="19"/></name> <operator pos:line="102" pos:column="20">&lt;<pos:position pos:line="102" pos:column="24"/></operator> <literal type="number" pos:line="102" pos:column="22">0<pos:position pos:line="102" pos:column="23"/></literal></expr>)<pos:position pos:line="102" pos:column="24"/></condition><then pos:line="102" pos:column="24">
            <block pos:line="103" pos:column="13">{
                <return pos:line="104" pos:column="17">return <expr><name pos:line="104" pos:column="24">ret<pos:position pos:line="104" pos:column="27"/></name></expr>;<pos:position pos:line="104" pos:column="28"/></return>
            }<pos:position pos:line="105" pos:column="14"/></block></then></if>
            <expr_stmt><expr><name><name pos:line="106" pos:column="13">io<pos:position pos:line="106" pos:column="15"/></name><operator pos:line="106" pos:column="15">-&gt;<pos:position pos:line="106" pos:column="20"/></operator><name pos:line="106" pos:column="17">amt<pos:position pos:line="106" pos:column="20"/></name></name> <operator pos:line="106" pos:column="21">+=<pos:position pos:line="106" pos:column="23"/></operator> <name pos:line="106" pos:column="24">ret<pos:position pos:line="106" pos:column="27"/></name></expr>;<pos:position pos:line="106" pos:column="28"/></expr_stmt>
            <if pos:line="107" pos:column="13">if<condition pos:line="107" pos:column="15">(<expr><name><name pos:line="107" pos:column="16">io<pos:position pos:line="107" pos:column="18"/></name><operator pos:line="107" pos:column="18">-&gt;<pos:position pos:line="107" pos:column="23"/></operator><name pos:line="107" pos:column="20">amt<pos:position pos:line="107" pos:column="23"/></name></name> <operator pos:line="107" pos:column="24">&gt;=<pos:position pos:line="107" pos:column="29"/></operator> <name><name pos:line="107" pos:column="27">io<pos:position pos:line="107" pos:column="29"/></name><operator pos:line="107" pos:column="29">-&gt;<pos:position pos:line="107" pos:column="34"/></operator><name pos:line="107" pos:column="31">json_len<pos:position pos:line="107" pos:column="39"/></name></name></expr>)<pos:position pos:line="107" pos:column="40"/></condition><then pos:line="107" pos:column="40">
            <block pos:line="108" pos:column="13">{
                <expr_stmt><expr><name pos:line="109" pos:column="17">ret<pos:position pos:line="109" pos:column="20"/></name> <operator pos:line="109" pos:column="21">=<pos:position pos:line="109" pos:column="22"/></operator> <call><name pos:line="109" pos:column="23">cconn_process_json<pos:position pos:line="109" pos:column="41"/></name><argument_list pos:line="109" pos:column="41">(<argument><expr><name pos:line="109" pos:column="42">io<pos:position pos:line="109" pos:column="44"/></name></expr></argument>)<pos:position pos:line="109" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="109" pos:column="46"/></expr_stmt>
                <if pos:line="110" pos:column="17">if<condition pos:line="110" pos:column="19">(<expr><name pos:line="110" pos:column="20">ret<pos:position pos:line="110" pos:column="23"/></name></expr>)<pos:position pos:line="110" pos:column="24"/></condition><then pos:line="110" pos:column="24">
                <block pos:line="111" pos:column="17">{
                    <return pos:line="112" pos:column="21">return <expr><name pos:line="112" pos:column="28">ret<pos:position pos:line="112" pos:column="31"/></name></expr>;<pos:position pos:line="112" pos:column="32"/></return>
                }<pos:position pos:line="113" pos:column="18"/></block></then></if>
                <expr_stmt><expr><call><name pos:line="114" pos:column="17">cconn_close<pos:position pos:line="114" pos:column="28"/></name><argument_list pos:line="114" pos:column="28">(<argument><expr><name pos:line="114" pos:column="29">io<pos:position pos:line="114" pos:column="31"/></name></expr></argument>)<pos:position pos:line="114" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="114" pos:column="33"/></expr_stmt>
                <expr_stmt><expr><name><name pos:line="115" pos:column="17">io<pos:position pos:line="115" pos:column="19"/></name><operator pos:line="115" pos:column="19">-&gt;<pos:position pos:line="115" pos:column="24"/></operator><name pos:line="115" pos:column="21">request_type<pos:position pos:line="115" pos:column="33"/></name></name> <operator pos:line="115" pos:column="34">=<pos:position pos:line="115" pos:column="35"/></operator> <name pos:line="115" pos:column="36">ASOK_REQ_NONE<pos:position pos:line="115" pos:column="49"/></name></expr>;<pos:position pos:line="115" pos:column="50"/></expr_stmt>
            }<pos:position pos:line="116" pos:column="14"/></block></then></if>
            <return pos:line="117" pos:column="13">return <expr><literal type="number" pos:line="117" pos:column="20">0<pos:position pos:line="117" pos:column="21"/></literal></expr>;<pos:position pos:line="117" pos:column="22"/></return>
        }<pos:position pos:line="118" pos:column="10"/></block>
        <default pos:line="119" pos:column="9">default:<pos:position pos:line="119" pos:column="17"/></default>
            <expr_stmt><expr><call><name pos:line="120" pos:column="13">ERROR<pos:position pos:line="120" pos:column="18"/></name><argument_list pos:line="120" pos:column="18">(<argument><expr><literal type="string" pos:line="120" pos:column="19">"ceph plugin: cconn_handle_event(name=%s) got to illegal "<pos:position pos:line="120" pos:column="77"/></literal>
                <literal type="string" pos:line="121" pos:column="17">"state on line %d"<pos:position pos:line="121" pos:column="35"/></literal></expr></argument>, <argument><expr><name><name pos:line="121" pos:column="37">io<pos:position pos:line="121" pos:column="39"/></name><operator pos:line="121" pos:column="39">-&gt;<pos:position pos:line="121" pos:column="44"/></operator><name pos:line="121" pos:column="41">d<pos:position pos:line="121" pos:column="42"/></name><operator pos:line="121" pos:column="42">-&gt;<pos:position pos:line="121" pos:column="47"/></operator><name pos:line="121" pos:column="44">name<pos:position pos:line="121" pos:column="48"/></name></name></expr></argument>, <argument><expr><name pos:line="121" pos:column="50">__LINE__<pos:position pos:line="121" pos:column="58"/></name></expr></argument>)<pos:position pos:line="121" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="121" pos:column="60"/></expr_stmt>
            <return pos:line="122" pos:column="13">return <expr><operator pos:line="122" pos:column="20">-<pos:position pos:line="122" pos:column="21"/></operator><name pos:line="122" pos:column="21">EDOM<pos:position pos:line="122" pos:column="25"/></name></expr>;<pos:position pos:line="122" pos:column="26"/></return>
    }<pos:position pos:line="123" pos:column="6"/></block></switch>
}<pos:position pos:line="124" pos:column="2"/></block></function></unit>
