<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_703_collectd-5.5.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">cow_load_config<pos:position pos:line="1" pos:column="27"/></name> <parameter_list pos:line="1" pos:column="28">(<parameter><decl><type><specifier pos:line="1" pos:column="29">const<pos:position pos:line="1" pos:column="34"/></specifier> <name pos:line="1" pos:column="35">char<pos:position pos:line="1" pos:column="39"/></name> <modifier pos:line="1" pos:column="40">*<pos:position pos:line="1" pos:column="41"/></modifier></type><name pos:line="1" pos:column="41">key<pos:position pos:line="1" pos:column="44"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="46">const<pos:position pos:line="1" pos:column="51"/></specifier> <name pos:line="1" pos:column="52">char<pos:position pos:line="1" pos:column="56"/></name> <modifier pos:line="1" pos:column="57">*<pos:position pos:line="1" pos:column="58"/></modifier></type><name pos:line="1" pos:column="58">value<pos:position pos:line="1" pos:column="63"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="64"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <if pos:line="3" pos:column="3">if <condition pos:line="3" pos:column="6">(<expr><name pos:line="3" pos:column="7">sensor_list<pos:position pos:line="3" pos:column="18"/></name> <operator pos:line="3" pos:column="19">==<pos:position pos:line="3" pos:column="21"/></operator> <name pos:line="3" pos:column="22">NULL<pos:position pos:line="3" pos:column="26"/></name></expr>)<pos:position pos:line="3" pos:column="27"/></condition><then pos:line="3" pos:column="27">
    <block type="pseudo"><expr_stmt><expr><name pos:line="4" pos:column="5">sensor_list<pos:position pos:line="4" pos:column="16"/></name> <operator pos:line="4" pos:column="17">=<pos:position pos:line="4" pos:column="18"/></operator> <call><name pos:line="4" pos:column="19">ignorelist_create<pos:position pos:line="4" pos:column="36"/></name> <argument_list pos:line="4" pos:column="37">(<argument><expr><literal type="number" pos:line="4" pos:column="38">1<pos:position pos:line="4" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="4" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="41"/></expr_stmt></block></then></if>

  <if pos:line="6" pos:column="3">if <condition pos:line="6" pos:column="6">(<expr><call><name pos:line="6" pos:column="7">strcasecmp<pos:position pos:line="6" pos:column="17"/></name> <argument_list pos:line="6" pos:column="18">(<argument><expr><name pos:line="6" pos:column="19">key<pos:position pos:line="6" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="6" pos:column="24">"Sensor"<pos:position pos:line="6" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="33"/></argument_list></call> <operator pos:line="6" pos:column="34">==<pos:position pos:line="6" pos:column="36"/></operator> <literal type="number" pos:line="6" pos:column="37">0<pos:position pos:line="6" pos:column="38"/></literal></expr>)<pos:position pos:line="6" pos:column="39"/></condition><then pos:line="6" pos:column="39">
  <block pos:line="7" pos:column="3">{
    <if pos:line="8" pos:column="5">if <condition pos:line="8" pos:column="8">(<expr><call><name pos:line="8" pos:column="9">direct_list_insert<pos:position pos:line="8" pos:column="27"/></name> <argument_list pos:line="8" pos:column="28">(<argument><expr><name pos:line="8" pos:column="29">value<pos:position pos:line="8" pos:column="34"/></name></expr></argument>)<pos:position pos:line="8" pos:column="35"/></argument_list></call></expr>)<pos:position pos:line="8" pos:column="36"/></condition><then pos:line="8" pos:column="36">
    <block pos:line="9" pos:column="5">{
        <expr_stmt><expr><call><name pos:line="10" pos:column="9">DEBUG<pos:position pos:line="10" pos:column="14"/></name> <argument_list pos:line="10" pos:column="15">(<argument><expr><literal type="string" pos:line="10" pos:column="16">"onewire plugin: Cannot add %s to direct_list_insert."<pos:position pos:line="10" pos:column="70"/></literal></expr></argument>, <argument><expr><name pos:line="10" pos:column="72">value<pos:position pos:line="10" pos:column="77"/></name></expr></argument>)<pos:position pos:line="10" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="79"/></expr_stmt>

        <if pos:line="12" pos:column="9">if <condition pos:line="12" pos:column="12">(<expr><call><name pos:line="12" pos:column="13">ignorelist_add<pos:position pos:line="12" pos:column="27"/></name> <argument_list pos:line="12" pos:column="28">(<argument><expr><name pos:line="12" pos:column="29">sensor_list<pos:position pos:line="12" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="42">value<pos:position pos:line="12" pos:column="47"/></name></expr></argument>)<pos:position pos:line="12" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="12" pos:column="49"/></condition><then pos:line="12" pos:column="49">
        <block pos:line="13" pos:column="9">{
            <expr_stmt><expr><call><name pos:line="14" pos:column="13">ERROR<pos:position pos:line="14" pos:column="18"/></name> <argument_list pos:line="14" pos:column="19">(<argument><expr><literal type="string" pos:line="14" pos:column="20">"onewire plugin: Cannot add value to ignorelist."<pos:position pos:line="14" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="71"/></expr_stmt>
            <return pos:line="15" pos:column="13">return <expr><operator pos:line="15" pos:column="20">(<pos:position pos:line="15" pos:column="21"/></operator><literal type="number" pos:line="15" pos:column="21">1<pos:position pos:line="15" pos:column="22"/></literal><operator pos:line="15" pos:column="22">)<pos:position pos:line="15" pos:column="23"/></operator></expr>;<pos:position pos:line="15" pos:column="24"/></return>
        }<pos:position pos:line="16" pos:column="10"/></block></then></if>
    }<pos:position pos:line="17" pos:column="6"/></block></then>
    <else pos:line="18" pos:column="5">else
    <block pos:line="19" pos:column="5">{
        <expr_stmt><expr><call><name pos:line="20" pos:column="9">DEBUG<pos:position pos:line="20" pos:column="14"/></name> <argument_list pos:line="20" pos:column="15">(<argument><expr><literal type="string" pos:line="20" pos:column="16">"onewire plugin: %s is a direct access"<pos:position pos:line="20" pos:column="55"/></literal></expr></argument>, <argument><expr><name pos:line="20" pos:column="57">value<pos:position pos:line="20" pos:column="62"/></name></expr></argument>)<pos:position pos:line="20" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="64"/></expr_stmt>
        <expr_stmt><expr><name pos:line="21" pos:column="9">direct_access<pos:position pos:line="21" pos:column="22"/></name> <operator pos:line="21" pos:column="23">=<pos:position pos:line="21" pos:column="24"/></operator> <literal type="number" pos:line="21" pos:column="25">1<pos:position pos:line="21" pos:column="26"/></literal></expr>;<pos:position pos:line="21" pos:column="27"/></expr_stmt>
    }<pos:position pos:line="22" pos:column="6"/></block></else></if>
  }<pos:position pos:line="23" pos:column="4"/></block></then>
  <elseif pos:line="24" pos:column="3">else <if pos:line="24" pos:column="8">if <condition pos:line="24" pos:column="11">(<expr><call><name pos:line="24" pos:column="12">strcasecmp<pos:position pos:line="24" pos:column="22"/></name> <argument_list pos:line="24" pos:column="23">(<argument><expr><name pos:line="24" pos:column="24">key<pos:position pos:line="24" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="24" pos:column="29">"IgnoreSelected"<pos:position pos:line="24" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="46"/></argument_list></call> <operator pos:line="24" pos:column="47">==<pos:position pos:line="24" pos:column="49"/></operator> <literal type="number" pos:line="24" pos:column="50">0<pos:position pos:line="24" pos:column="51"/></literal></expr>)<pos:position pos:line="24" pos:column="52"/></condition><then pos:line="24" pos:column="52">
  <block pos:line="25" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="26" pos:column="5">ignorelist_set_invert<pos:position pos:line="26" pos:column="26"/></name> <argument_list pos:line="26" pos:column="27">(<argument><expr><name pos:line="26" pos:column="28">sensor_list<pos:position pos:line="26" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="26" pos:column="41">1<pos:position pos:line="26" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="44"/></expr_stmt>
    <if pos:line="27" pos:column="5">if <condition pos:line="27" pos:column="8">(<expr><call><name pos:line="27" pos:column="9">IS_TRUE<pos:position pos:line="27" pos:column="16"/></name> <argument_list pos:line="27" pos:column="17">(<argument><expr><name pos:line="27" pos:column="18">value<pos:position pos:line="27" pos:column="23"/></name></expr></argument>)<pos:position pos:line="27" pos:column="24"/></argument_list></call></expr>)<pos:position pos:line="27" pos:column="25"/></condition><then pos:line="27" pos:column="25">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="28" pos:column="7">ignorelist_set_invert<pos:position pos:line="28" pos:column="28"/></name> <argument_list pos:line="28" pos:column="29">(<argument><expr><name pos:line="28" pos:column="30">sensor_list<pos:position pos:line="28" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="28" pos:column="43">0<pos:position pos:line="28" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="46"/></expr_stmt></block></then></if>
  }<pos:position pos:line="29" pos:column="4"/></block></then></if></elseif>
  <elseif pos:line="30" pos:column="3">else <if pos:line="30" pos:column="8">if <condition pos:line="30" pos:column="11">(<expr><call><name pos:line="30" pos:column="12">strcasecmp<pos:position pos:line="30" pos:column="22"/></name> <argument_list pos:line="30" pos:column="23">(<argument><expr><name pos:line="30" pos:column="24">key<pos:position pos:line="30" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="30" pos:column="29">"Device"<pos:position pos:line="30" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="38"/></argument_list></call> <operator pos:line="30" pos:column="39">==<pos:position pos:line="30" pos:column="41"/></operator> <literal type="number" pos:line="30" pos:column="42">0<pos:position pos:line="30" pos:column="43"/></literal></expr>)<pos:position pos:line="30" pos:column="44"/></condition><then pos:line="30" pos:column="44">
  <block pos:line="31" pos:column="3">{
    <decl_stmt><decl><type><name pos:line="32" pos:column="5">char<pos:position pos:line="32" pos:column="9"/></name> <modifier pos:line="32" pos:column="10">*<pos:position pos:line="32" pos:column="11"/></modifier></type><name pos:line="32" pos:column="11">temp<pos:position pos:line="32" pos:column="15"/></name></decl>;<pos:position pos:line="32" pos:column="16"/></decl_stmt>
    <expr_stmt><expr><name pos:line="33" pos:column="5">temp<pos:position pos:line="33" pos:column="9"/></name> <operator pos:line="33" pos:column="10">=<pos:position pos:line="33" pos:column="11"/></operator> <call><name pos:line="33" pos:column="12">strdup<pos:position pos:line="33" pos:column="18"/></name> <argument_list pos:line="33" pos:column="19">(<argument><expr><name pos:line="33" pos:column="20">value<pos:position pos:line="33" pos:column="25"/></name></expr></argument>)<pos:position pos:line="33" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="27"/></expr_stmt>
    <if pos:line="34" pos:column="5">if <condition pos:line="34" pos:column="8">(<expr><name pos:line="34" pos:column="9">temp<pos:position pos:line="34" pos:column="13"/></name> <operator pos:line="34" pos:column="14">==<pos:position pos:line="34" pos:column="16"/></operator> <name pos:line="34" pos:column="17">NULL<pos:position pos:line="34" pos:column="21"/></name></expr>)<pos:position pos:line="34" pos:column="22"/></condition><then pos:line="34" pos:column="22">
    <block pos:line="35" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="36" pos:column="7">ERROR<pos:position pos:line="36" pos:column="12"/></name> <argument_list pos:line="36" pos:column="13">(<argument><expr><literal type="string" pos:line="36" pos:column="14">"onewire plugin: strdup failed."<pos:position pos:line="36" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="36" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="48"/></expr_stmt>
      <return pos:line="37" pos:column="7">return <expr><operator pos:line="37" pos:column="14">(<pos:position pos:line="37" pos:column="15"/></operator><literal type="number" pos:line="37" pos:column="15">1<pos:position pos:line="37" pos:column="16"/></literal><operator pos:line="37" pos:column="16">)<pos:position pos:line="37" pos:column="17"/></operator></expr>;<pos:position pos:line="37" pos:column="18"/></return>
    }<pos:position pos:line="38" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="39" pos:column="5">sfree<pos:position pos:line="39" pos:column="10"/></name> <argument_list pos:line="39" pos:column="11">(<argument><expr><name pos:line="39" pos:column="12">device_g<pos:position pos:line="39" pos:column="20"/></name></expr></argument>)<pos:position pos:line="39" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="22"/></expr_stmt>
    <expr_stmt><expr><name pos:line="40" pos:column="5">device_g<pos:position pos:line="40" pos:column="13"/></name> <operator pos:line="40" pos:column="14">=<pos:position pos:line="40" pos:column="15"/></operator> <name pos:line="40" pos:column="16">temp<pos:position pos:line="40" pos:column="20"/></name></expr>;<pos:position pos:line="40" pos:column="21"/></expr_stmt>
  }<pos:position pos:line="41" pos:column="4"/></block></then></if></elseif>
  <elseif pos:line="42" pos:column="3">else <if pos:line="42" pos:column="8">if <condition pos:line="42" pos:column="11">(<expr><call><name pos:line="42" pos:column="12">strcasecmp<pos:position pos:line="42" pos:column="22"/></name> <argument_list pos:line="42" pos:column="23">(<argument><expr><literal type="string" pos:line="42" pos:column="24">"Interval"<pos:position pos:line="42" pos:column="34"/></literal></expr></argument>, <argument><expr><name pos:line="42" pos:column="36">key<pos:position pos:line="42" pos:column="39"/></name></expr></argument>)<pos:position pos:line="42" pos:column="40"/></argument_list></call> <operator pos:line="42" pos:column="41">==<pos:position pos:line="42" pos:column="43"/></operator> <literal type="number" pos:line="42" pos:column="44">0<pos:position pos:line="42" pos:column="45"/></literal></expr>)<pos:position pos:line="42" pos:column="46"/></condition><then pos:line="42" pos:column="46">
  <block pos:line="43" pos:column="3">{
    <decl_stmt><decl><type><name pos:line="44" pos:column="5">double<pos:position pos:line="44" pos:column="11"/></name></type> <name pos:line="44" pos:column="12">tmp<pos:position pos:line="44" pos:column="15"/></name></decl>;<pos:position pos:line="44" pos:column="16"/></decl_stmt>
    <expr_stmt><expr><name pos:line="45" pos:column="5">tmp<pos:position pos:line="45" pos:column="8"/></name> <operator pos:line="45" pos:column="9">=<pos:position pos:line="45" pos:column="10"/></operator> <call><name pos:line="45" pos:column="11">atof<pos:position pos:line="45" pos:column="15"/></name> <argument_list pos:line="45" pos:column="16">(<argument><expr><name pos:line="45" pos:column="17">value<pos:position pos:line="45" pos:column="22"/></name></expr></argument>)<pos:position pos:line="45" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="24"/></expr_stmt>
    <if pos:line="46" pos:column="5">if <condition pos:line="46" pos:column="8">(<expr><name pos:line="46" pos:column="9">tmp<pos:position pos:line="46" pos:column="12"/></name> <operator pos:line="46" pos:column="13">&gt;<pos:position pos:line="46" pos:column="17"/></operator> <literal type="number" pos:line="46" pos:column="15">0.0<pos:position pos:line="46" pos:column="18"/></literal></expr>)<pos:position pos:line="46" pos:column="19"/></condition><then pos:line="46" pos:column="19">
      <block type="pseudo"><expr_stmt><expr><name pos:line="47" pos:column="7">ow_interval<pos:position pos:line="47" pos:column="18"/></name> <operator pos:line="47" pos:column="19">=<pos:position pos:line="47" pos:column="20"/></operator> <call><name pos:line="47" pos:column="21">DOUBLE_TO_CDTIME_T<pos:position pos:line="47" pos:column="39"/></name> <argument_list pos:line="47" pos:column="40">(<argument><expr><name pos:line="47" pos:column="41">tmp<pos:position pos:line="47" pos:column="44"/></name></expr></argument>)<pos:position pos:line="47" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="46"/></expr_stmt></block></then>
    <else pos:line="48" pos:column="5">else
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="49" pos:column="7">ERROR<pos:position pos:line="49" pos:column="12"/></name> <argument_list pos:line="49" pos:column="13">(<argument><expr><literal type="string" pos:line="49" pos:column="14">"onewire plugin: Invalid `Interval' setting: %s"<pos:position pos:line="49" pos:column="62"/></literal></expr></argument>, <argument><expr><name pos:line="49" pos:column="64">value<pos:position pos:line="49" pos:column="69"/></name></expr></argument>)<pos:position pos:line="49" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="71"/></expr_stmt></block></else></if>
  }<pos:position pos:line="50" pos:column="4"/></block></then></if></elseif>
  <else pos:line="51" pos:column="3">else
  <block pos:line="52" pos:column="3">{
    <return pos:line="53" pos:column="5">return <expr><operator pos:line="53" pos:column="12">(<pos:position pos:line="53" pos:column="13"/></operator><operator pos:line="53" pos:column="13">-<pos:position pos:line="53" pos:column="14"/></operator><literal type="number" pos:line="53" pos:column="14">1<pos:position pos:line="53" pos:column="15"/></literal><operator pos:line="53" pos:column="15">)<pos:position pos:line="53" pos:column="16"/></operator></expr>;<pos:position pos:line="53" pos:column="17"/></return>
  }<pos:position pos:line="54" pos:column="4"/></block></else></if>

  <return pos:line="56" pos:column="3">return <expr><operator pos:line="56" pos:column="10">(<pos:position pos:line="56" pos:column="11"/></operator><literal type="number" pos:line="56" pos:column="11">0<pos:position pos:line="56" pos:column="12"/></literal><operator pos:line="56" pos:column="12">)<pos:position pos:line="56" pos:column="13"/></operator></expr>;<pos:position pos:line="56" pos:column="14"/></return>
}<pos:position pos:line="57" pos:column="2"/></block></function></unit>
