<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_986_collectd-5.7.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">conn_read<pos:position pos:line="1" pos:column="21"/></name><parameter_list pos:line="1" pos:column="21">(<parameter><decl><type><name pos:line="1" pos:column="22">void<pos:position pos:line="1" pos:column="26"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="27"/></parameter_list> <block pos:line="1" pos:column="28">{
  <decl_stmt><decl><type><name><name pos:line="2" pos:column="3">struct<pos:position pos:line="2" pos:column="9"/></name> <name pos:line="2" pos:column="10">inpcbtable<pos:position pos:line="2" pos:column="20"/></name></name></type> <name pos:line="2" pos:column="21">table<pos:position pos:line="2" pos:column="26"/></name></decl>;<pos:position pos:line="2" pos:column="27"/></decl_stmt>
<cpp:if pos:line="3" pos:column="1">#<cpp:directive pos:line="3" pos:column="2">if<pos:position pos:line="3" pos:column="4"/></cpp:directive> <expr><operator pos:line="3" pos:column="5">!<pos:position pos:line="3" pos:column="6"/></operator><call><name pos:line="3" pos:column="6">defined<pos:position pos:line="3" pos:column="13"/></name><argument_list pos:line="3" pos:column="13">(<argument><expr><name pos:line="3" pos:column="14">__OpenBSD__<pos:position pos:line="3" pos:column="25"/></name></expr></argument>)<pos:position pos:line="3" pos:column="26"/></argument_list></call> <operator pos:line="3" pos:column="27">&amp;&amp;<pos:position pos:line="3" pos:column="37"/></operator>                                                   \
    <operator pos:line="4" pos:column="5">(<pos:position pos:line="4" pos:column="6"/></operator><call><name pos:line="4" pos:column="6">defined<pos:position pos:line="4" pos:column="13"/></name><argument_list pos:line="4" pos:column="13">(<argument><expr><name pos:line="4" pos:column="14">__NetBSD_Version__<pos:position pos:line="4" pos:column="32"/></name></expr></argument>)<pos:position pos:line="4" pos:column="33"/></argument_list></call> <operator pos:line="4" pos:column="34">&amp;&amp;<pos:position pos:line="4" pos:column="44"/></operator> <name pos:line="4" pos:column="37">__NetBSD_Version__<pos:position pos:line="4" pos:column="55"/></name> <operator pos:line="4" pos:column="56">&lt;=<pos:position pos:line="4" pos:column="61"/></operator> <literal type="number" pos:line="4" pos:column="59">699002700<pos:position pos:line="4" pos:column="68"/></literal><operator pos:line="4" pos:column="68">)<pos:position pos:line="4" pos:column="69"/></operator></expr></cpp:if>
  <decl_stmt><decl><type><name><name pos:line="5" pos:column="3">struct<pos:position pos:line="5" pos:column="9"/></name> <name pos:line="5" pos:column="10">inpcb<pos:position pos:line="5" pos:column="15"/></name></name> <modifier pos:line="5" pos:column="16">*<pos:position pos:line="5" pos:column="17"/></modifier></type><name pos:line="5" pos:column="17">head<pos:position pos:line="5" pos:column="21"/></name></decl>;<pos:position pos:line="5" pos:column="22"/></decl_stmt>
<cpp:endif pos:line="6" pos:column="1">#<cpp:directive pos:line="6" pos:column="2">endif<pos:position pos:line="6" pos:column="7"/></cpp:directive></cpp:endif>
  <decl_stmt><decl><type><name><name pos:line="7" pos:column="3">struct<pos:position pos:line="7" pos:column="9"/></name> <name pos:line="7" pos:column="10">inpcb<pos:position pos:line="7" pos:column="15"/></name></name> <modifier pos:line="7" pos:column="16">*<pos:position pos:line="7" pos:column="17"/></modifier></type><name pos:line="7" pos:column="17">next<pos:position pos:line="7" pos:column="21"/></name></decl>;<pos:position pos:line="7" pos:column="22"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="8" pos:column="3">struct<pos:position pos:line="8" pos:column="9"/></name> <name pos:line="8" pos:column="10">inpcb<pos:position pos:line="8" pos:column="15"/></name></name></type> <name pos:line="8" pos:column="16">inpcb<pos:position pos:line="8" pos:column="21"/></name></decl>;<pos:position pos:line="8" pos:column="22"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="9" pos:column="3">struct<pos:position pos:line="9" pos:column="9"/></name> <name pos:line="9" pos:column="10">tcpcb<pos:position pos:line="9" pos:column="15"/></name></name></type> <name pos:line="9" pos:column="16">tcpcb<pos:position pos:line="9" pos:column="21"/></name></decl>;<pos:position pos:line="9" pos:column="22"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">int<pos:position pos:line="10" pos:column="6"/></name></type> <name pos:line="10" pos:column="7">status<pos:position pos:line="10" pos:column="13"/></name></decl>;<pos:position pos:line="10" pos:column="14"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="12" pos:column="3">conn_reset_port_entry<pos:position pos:line="12" pos:column="24"/></name><argument_list pos:line="12" pos:column="24">()<pos:position pos:line="12" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="27"/></expr_stmt>

  <comment type="block" pos:line="14" pos:column="3">/* Read the pcbtable from the kernel */</comment>
  <expr_stmt><expr><name pos:line="15" pos:column="3">status<pos:position pos:line="15" pos:column="9"/></name> <operator pos:line="15" pos:column="10">=<pos:position pos:line="15" pos:column="11"/></operator> <call><name pos:line="15" pos:column="12">kread<pos:position pos:line="15" pos:column="17"/></name><argument_list pos:line="15" pos:column="17">(<argument><expr><name pos:line="15" pos:column="18">inpcbtable_off<pos:position pos:line="15" pos:column="32"/></name></expr></argument>, <argument><expr><operator pos:line="15" pos:column="34">&amp;<pos:position pos:line="15" pos:column="39"/></operator><name pos:line="15" pos:column="35">table<pos:position pos:line="15" pos:column="40"/></name></expr></argument>, <argument><expr><sizeof pos:line="15" pos:column="42">sizeof<argument_list pos:line="15" pos:column="48">(<argument><expr><name pos:line="15" pos:column="49">table<pos:position pos:line="15" pos:column="54"/></name></expr></argument>)<pos:position pos:line="15" pos:column="55"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="15" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="57"/></expr_stmt>
  <if pos:line="16" pos:column="3">if <condition pos:line="16" pos:column="6">(<expr><name pos:line="16" pos:column="7">status<pos:position pos:line="16" pos:column="13"/></name> <operator pos:line="16" pos:column="14">!=<pos:position pos:line="16" pos:column="16"/></operator> <literal type="number" pos:line="16" pos:column="17">0<pos:position pos:line="16" pos:column="18"/></literal></expr>)<pos:position pos:line="16" pos:column="19"/></condition><then pos:line="16" pos:column="19">
    <block type="pseudo"><return pos:line="17" pos:column="5">return <expr><operator pos:line="17" pos:column="12">(<pos:position pos:line="17" pos:column="13"/></operator><operator pos:line="17" pos:column="13">-<pos:position pos:line="17" pos:column="14"/></operator><literal type="number" pos:line="17" pos:column="14">1<pos:position pos:line="17" pos:column="15"/></literal><operator pos:line="17" pos:column="15">)<pos:position pos:line="17" pos:column="16"/></operator></expr>;<pos:position pos:line="17" pos:column="17"/></return></block></then></if>

<cpp:if pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">if<pos:position pos:line="19" pos:column="4"/></cpp:directive> <expr><call><name pos:line="19" pos:column="5">defined<pos:position pos:line="19" pos:column="12"/></name><argument_list pos:line="19" pos:column="12">(<argument><expr><name pos:line="19" pos:column="13">__OpenBSD__<pos:position pos:line="19" pos:column="24"/></name></expr></argument>)<pos:position pos:line="19" pos:column="25"/></argument_list></call> <operator pos:line="19" pos:column="26">||<pos:position pos:line="19" pos:column="28"/></operator>                                                    \
    <operator pos:line="20" pos:column="5">(<pos:position pos:line="20" pos:column="6"/></operator><call><name pos:line="20" pos:column="6">defined<pos:position pos:line="20" pos:column="13"/></name><argument_list pos:line="20" pos:column="13">(<argument><expr><name pos:line="20" pos:column="14">__NetBSD_Version__<pos:position pos:line="20" pos:column="32"/></name></expr></argument>)<pos:position pos:line="20" pos:column="33"/></argument_list></call> <operator pos:line="20" pos:column="34">&amp;&amp;<pos:position pos:line="20" pos:column="44"/></operator> <name pos:line="20" pos:column="37">__NetBSD_Version__<pos:position pos:line="20" pos:column="55"/></name> <operator pos:line="20" pos:column="56">&gt;<pos:position pos:line="20" pos:column="60"/></operator> <literal type="number" pos:line="20" pos:column="58">699002700<pos:position pos:line="20" pos:column="67"/></literal><operator pos:line="20" pos:column="67">)<pos:position pos:line="20" pos:column="68"/></operator></expr></cpp:if>
  <comment type="block" pos:line="21" pos:column="3">/* inpt_queue is a TAILQ on OpenBSD */</comment>
  <comment type="block" pos:line="22" pos:column="3">/* Get the first pcb */</comment>
  <expr_stmt><expr><name pos:line="23" pos:column="3">next<pos:position pos:line="23" pos:column="7"/></name> <operator pos:line="23" pos:column="8">=<pos:position pos:line="23" pos:column="9"/></operator> <operator pos:line="23" pos:column="10">(<pos:position pos:line="23" pos:column="11"/></operator>struct <name pos:line="23" pos:column="18">inpcb<pos:position pos:line="23" pos:column="23"/></name> <operator pos:line="23" pos:column="24">*<pos:position pos:line="23" pos:column="25"/></operator><operator pos:line="23" pos:column="25">)<pos:position pos:line="23" pos:column="26"/></operator><call><name pos:line="23" pos:column="26">TAILQ_FIRST<pos:position pos:line="23" pos:column="37"/></name><argument_list pos:line="23" pos:column="37">(<argument><expr><operator pos:line="23" pos:column="38">&amp;<pos:position pos:line="23" pos:column="43"/></operator><name><name pos:line="23" pos:column="39">table<pos:position pos:line="23" pos:column="44"/></name><operator pos:line="23" pos:column="44">.<pos:position pos:line="23" pos:column="45"/></operator><name pos:line="23" pos:column="45">inpt_queue<pos:position pos:line="23" pos:column="55"/></name></name></expr></argument>)<pos:position pos:line="23" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="57"/></expr_stmt>
  <while pos:line="24" pos:column="3">while <condition pos:line="24" pos:column="9">(<expr><name pos:line="24" pos:column="10">next<pos:position pos:line="24" pos:column="14"/></name></expr>)<pos:position pos:line="24" pos:column="15"/></condition>
<cpp:else pos:line="25" pos:column="1">#<cpp:directive pos:line="25" pos:column="2">else<pos:position pos:line="25" pos:column="6"/></cpp:directive></cpp:else>
  <comment type="block" pos:line="26" pos:column="3">/* Get the `head' pcb */</comment>
  <block type="pseudo"><expr_stmt><expr><name pos:line="27" pos:column="3">head<pos:position pos:line="27" pos:column="7"/></name> <operator pos:line="27" pos:column="8">=<pos:position pos:line="27" pos:column="9"/></operator> <operator pos:line="27" pos:column="10">(<pos:position pos:line="27" pos:column="11"/></operator>struct <name pos:line="27" pos:column="18">inpcb<pos:position pos:line="27" pos:column="23"/></name> <operator pos:line="27" pos:column="24">*<pos:position pos:line="27" pos:column="25"/></operator><operator pos:line="27" pos:column="25">)<pos:position pos:line="27" pos:column="26"/></operator><operator pos:line="27" pos:column="26">&amp;<pos:position pos:line="27" pos:column="31"/></operator><operator pos:line="27" pos:column="27">(<pos:position pos:line="27" pos:column="28"/></operator><name><name pos:line="27" pos:column="28">inpcbtable_ptr<pos:position pos:line="27" pos:column="42"/></name><operator pos:line="27" pos:column="42">-&gt;<pos:position pos:line="27" pos:column="47"/></operator><name pos:line="27" pos:column="44">inpt_queue<pos:position pos:line="27" pos:column="54"/></name></name><operator pos:line="27" pos:column="54">)<pos:position pos:line="27" pos:column="55"/></operator></expr>;<pos:position pos:line="27" pos:column="56"/></expr_stmt></block></while>
  <comment type="block" pos:line="28" pos:column="3">/* Get the first pcb */</comment>
  <expr_stmt><expr><name pos:line="29" pos:column="3">next<pos:position pos:line="29" pos:column="7"/></name> <operator pos:line="29" pos:column="8">=<pos:position pos:line="29" pos:column="9"/></operator> <operator pos:line="29" pos:column="10">(<pos:position pos:line="29" pos:column="11"/></operator>struct <name pos:line="29" pos:column="18">inpcb<pos:position pos:line="29" pos:column="23"/></name> <operator pos:line="29" pos:column="24">*<pos:position pos:line="29" pos:column="25"/></operator><operator pos:line="29" pos:column="25">)<pos:position pos:line="29" pos:column="26"/></operator><call><name pos:line="29" pos:column="26">CIRCLEQ_FIRST<pos:position pos:line="29" pos:column="39"/></name><argument_list pos:line="29" pos:column="39">(<argument><expr><operator pos:line="29" pos:column="40">&amp;<pos:position pos:line="29" pos:column="45"/></operator><name><name pos:line="29" pos:column="41">table<pos:position pos:line="29" pos:column="46"/></name><operator pos:line="29" pos:column="46">.<pos:position pos:line="29" pos:column="47"/></operator><name pos:line="29" pos:column="47">inpt_queue<pos:position pos:line="29" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="29" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="59"/></expr_stmt>

  <while pos:line="31" pos:column="3">while <condition pos:line="31" pos:column="9">(<expr><name pos:line="31" pos:column="10">next<pos:position pos:line="31" pos:column="14"/></name> <operator pos:line="31" pos:column="15">!=<pos:position pos:line="31" pos:column="17"/></operator> <name pos:line="31" pos:column="18">head<pos:position pos:line="31" pos:column="22"/></name></expr>)<pos:position pos:line="31" pos:column="23"/></condition>
<cpp:endif pos:line="32" pos:column="1">#<cpp:directive pos:line="32" pos:column="2">endif<pos:position pos:line="32" pos:column="7"/></cpp:directive></cpp:endif>
  <block pos:line="33" pos:column="3">{
    <comment type="block" pos:line="34" pos:column="5">/* Read the pcb pointed to by `next' into `inpcb' */</comment>
    <expr_stmt><expr><name pos:line="35" pos:column="5">status<pos:position pos:line="35" pos:column="11"/></name> <operator pos:line="35" pos:column="12">=<pos:position pos:line="35" pos:column="13"/></operator> <call><name pos:line="35" pos:column="14">kread<pos:position pos:line="35" pos:column="19"/></name><argument_list pos:line="35" pos:column="19">(<argument><expr><operator pos:line="35" pos:column="20">(<pos:position pos:line="35" pos:column="21"/></operator><name pos:line="35" pos:column="21">u_long<pos:position pos:line="35" pos:column="27"/></name><operator pos:line="35" pos:column="27">)<pos:position pos:line="35" pos:column="28"/></operator><name pos:line="35" pos:column="28">next<pos:position pos:line="35" pos:column="32"/></name></expr></argument>, <argument><expr><operator pos:line="35" pos:column="34">&amp;<pos:position pos:line="35" pos:column="39"/></operator><name pos:line="35" pos:column="35">inpcb<pos:position pos:line="35" pos:column="40"/></name></expr></argument>, <argument><expr><sizeof pos:line="35" pos:column="42">sizeof<argument_list pos:line="35" pos:column="48">(<argument><expr><name pos:line="35" pos:column="49">inpcb<pos:position pos:line="35" pos:column="54"/></name></expr></argument>)<pos:position pos:line="35" pos:column="55"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="35" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="57"/></expr_stmt>
    <if pos:line="36" pos:column="5">if <condition pos:line="36" pos:column="8">(<expr><name pos:line="36" pos:column="9">status<pos:position pos:line="36" pos:column="15"/></name> <operator pos:line="36" pos:column="16">!=<pos:position pos:line="36" pos:column="18"/></operator> <literal type="number" pos:line="36" pos:column="19">0<pos:position pos:line="36" pos:column="20"/></literal></expr>)<pos:position pos:line="36" pos:column="21"/></condition><then pos:line="36" pos:column="21">
      <block type="pseudo"><return pos:line="37" pos:column="7">return <expr><operator pos:line="37" pos:column="14">(<pos:position pos:line="37" pos:column="15"/></operator><operator pos:line="37" pos:column="15">-<pos:position pos:line="37" pos:column="16"/></operator><literal type="number" pos:line="37" pos:column="16">1<pos:position pos:line="37" pos:column="17"/></literal><operator pos:line="37" pos:column="17">)<pos:position pos:line="37" pos:column="18"/></operator></expr>;<pos:position pos:line="37" pos:column="19"/></return></block></then></if>

<comment type="block" pos:line="39" pos:column="1">/* Advance `next' */</comment>
<cpp:if pos:line="40" pos:column="1">#<cpp:directive pos:line="40" pos:column="2">if<pos:position pos:line="40" pos:column="4"/></cpp:directive> <expr><call><name pos:line="40" pos:column="5">defined<pos:position pos:line="40" pos:column="12"/></name><argument_list pos:line="40" pos:column="12">(<argument><expr><name pos:line="40" pos:column="13">__OpenBSD__<pos:position pos:line="40" pos:column="24"/></name></expr></argument>)<pos:position pos:line="40" pos:column="25"/></argument_list></call> <operator pos:line="40" pos:column="26">||<pos:position pos:line="40" pos:column="28"/></operator>                                                    \
    <operator pos:line="41" pos:column="5">(<pos:position pos:line="41" pos:column="6"/></operator><call><name pos:line="41" pos:column="6">defined<pos:position pos:line="41" pos:column="13"/></name><argument_list pos:line="41" pos:column="13">(<argument><expr><name pos:line="41" pos:column="14">__NetBSD_Version__<pos:position pos:line="41" pos:column="32"/></name></expr></argument>)<pos:position pos:line="41" pos:column="33"/></argument_list></call> <operator pos:line="41" pos:column="34">&amp;&amp;<pos:position pos:line="41" pos:column="44"/></operator> <name pos:line="41" pos:column="37">__NetBSD_Version__<pos:position pos:line="41" pos:column="55"/></name> <operator pos:line="41" pos:column="56">&gt;<pos:position pos:line="41" pos:column="60"/></operator> <literal type="number" pos:line="41" pos:column="58">699002700<pos:position pos:line="41" pos:column="67"/></literal><operator pos:line="41" pos:column="67">)<pos:position pos:line="41" pos:column="68"/></operator></expr></cpp:if>
    <comment type="block" pos:line="42" pos:column="5">/* inpt_queue is a TAILQ on OpenBSD */</comment>
    <expr_stmt><expr><name pos:line="43" pos:column="5">next<pos:position pos:line="43" pos:column="9"/></name> <operator pos:line="43" pos:column="10">=<pos:position pos:line="43" pos:column="11"/></operator> <operator pos:line="43" pos:column="12">(<pos:position pos:line="43" pos:column="13"/></operator>struct <name pos:line="43" pos:column="20">inpcb<pos:position pos:line="43" pos:column="25"/></name> <operator pos:line="43" pos:column="26">*<pos:position pos:line="43" pos:column="27"/></operator><operator pos:line="43" pos:column="27">)<pos:position pos:line="43" pos:column="28"/></operator><call><name pos:line="43" pos:column="28">TAILQ_NEXT<pos:position pos:line="43" pos:column="38"/></name><argument_list pos:line="43" pos:column="38">(<argument><expr><operator pos:line="43" pos:column="39">&amp;<pos:position pos:line="43" pos:column="44"/></operator><name pos:line="43" pos:column="40">inpcb<pos:position pos:line="43" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="47">inp_queue<pos:position pos:line="43" pos:column="56"/></name></expr></argument>)<pos:position pos:line="43" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="58"/></expr_stmt>
<cpp:else pos:line="44" pos:column="1">#<cpp:directive pos:line="44" pos:column="2">else<pos:position pos:line="44" pos:column="6"/></cpp:directive></cpp:else>
    <expr_stmt><expr><name pos:line="45" pos:column="5">next<pos:position pos:line="45" pos:column="9"/></name> <operator pos:line="45" pos:column="10">=<pos:position pos:line="45" pos:column="11"/></operator> <operator pos:line="45" pos:column="12">(<pos:position pos:line="45" pos:column="13"/></operator>struct <name pos:line="45" pos:column="20">inpcb<pos:position pos:line="45" pos:column="25"/></name> <operator pos:line="45" pos:column="26">*<pos:position pos:line="45" pos:column="27"/></operator><operator pos:line="45" pos:column="27">)<pos:position pos:line="45" pos:column="28"/></operator><call><name pos:line="45" pos:column="28">CIRCLEQ_NEXT<pos:position pos:line="45" pos:column="40"/></name><argument_list pos:line="45" pos:column="40">(<argument><expr><operator pos:line="45" pos:column="41">&amp;<pos:position pos:line="45" pos:column="46"/></operator><name pos:line="45" pos:column="42">inpcb<pos:position pos:line="45" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="49">inp_queue<pos:position pos:line="45" pos:column="58"/></name></expr></argument>)<pos:position pos:line="45" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="60"/></expr_stmt>
<cpp:endif pos:line="46" pos:column="1">#<cpp:directive pos:line="46" pos:column="2">endif<pos:position pos:line="46" pos:column="7"/></cpp:directive></cpp:endif>

<comment type="block" pos:line="48" pos:column="1">/* Ignore sockets, that are not connected. */</comment>
<cpp:ifdef pos:line="49" pos:column="1">#<cpp:directive pos:line="49" pos:column="2">ifdef<pos:position pos:line="49" pos:column="7"/></cpp:directive> <name pos:line="49" pos:column="8">__NetBSD__<pos:position pos:line="49" pos:column="18"/></name></cpp:ifdef>
    <if pos:line="50" pos:column="5">if <condition pos:line="50" pos:column="8">(<expr><name><name pos:line="50" pos:column="9">inpcb<pos:position pos:line="50" pos:column="14"/></name><operator pos:line="50" pos:column="14">.<pos:position pos:line="50" pos:column="15"/></operator><name pos:line="50" pos:column="15">inp_af<pos:position pos:line="50" pos:column="21"/></name></name> <operator pos:line="50" pos:column="22">==<pos:position pos:line="50" pos:column="24"/></operator> <name pos:line="50" pos:column="25">AF_INET6<pos:position pos:line="50" pos:column="33"/></name></expr>)<pos:position pos:line="50" pos:column="34"/></condition><then pos:line="50" pos:column="34">
      <block type="pseudo"><continue pos:line="51" pos:column="7">continue;<pos:position pos:line="51" pos:column="16"/></continue></block></then></if> <comment type="block" pos:line="51" pos:column="17">/* XXX see netbsd/src/usr.bin/netstat/inet6.c */</comment>
<cpp:else pos:line="52" pos:column="1">#<cpp:directive pos:line="52" pos:column="2">else<pos:position pos:line="52" pos:column="6"/></cpp:directive></cpp:else>
    <if pos:line="53" pos:column="5">if <condition pos:line="53" pos:column="8">(<expr><operator pos:line="53" pos:column="9">!<pos:position pos:line="53" pos:column="10"/></operator><operator pos:line="53" pos:column="10">(<pos:position pos:line="53" pos:column="11"/></operator><name><name pos:line="53" pos:column="11">inpcb<pos:position pos:line="53" pos:column="16"/></name><operator pos:line="53" pos:column="16">.<pos:position pos:line="53" pos:column="17"/></operator><name pos:line="53" pos:column="17">inp_flags<pos:position pos:line="53" pos:column="26"/></name></name> <operator pos:line="53" pos:column="27">&amp;<pos:position pos:line="53" pos:column="32"/></operator> <name pos:line="53" pos:column="29">INP_IPV6<pos:position pos:line="53" pos:column="37"/></name><operator pos:line="53" pos:column="37">)<pos:position pos:line="53" pos:column="38"/></operator> <operator pos:line="53" pos:column="39">&amp;&amp;<pos:position pos:line="53" pos:column="49"/></operator>
        <operator pos:line="54" pos:column="9">(<pos:position pos:line="54" pos:column="10"/></operator><call><name pos:line="54" pos:column="10">inet_lnaof<pos:position pos:line="54" pos:column="20"/></name><argument_list pos:line="54" pos:column="20">(<argument><expr><name><name pos:line="54" pos:column="21">inpcb<pos:position pos:line="54" pos:column="26"/></name><operator pos:line="54" pos:column="26">.<pos:position pos:line="54" pos:column="27"/></operator><name pos:line="54" pos:column="27">inp_laddr<pos:position pos:line="54" pos:column="36"/></name></name></expr></argument>)<pos:position pos:line="54" pos:column="37"/></argument_list></call> <operator pos:line="54" pos:column="38">==<pos:position pos:line="54" pos:column="40"/></operator> <name pos:line="54" pos:column="41">INADDR_ANY<pos:position pos:line="54" pos:column="51"/></name><operator pos:line="54" pos:column="51">)<pos:position pos:line="54" pos:column="52"/></operator></expr>)<pos:position pos:line="54" pos:column="53"/></condition><then pos:line="54" pos:column="53">
      <block type="pseudo"><continue pos:line="55" pos:column="7">continue;<pos:position pos:line="55" pos:column="16"/></continue></block></then></if>
    <if pos:line="56" pos:column="5">if <condition pos:line="56" pos:column="8">(<expr><operator pos:line="56" pos:column="9">(<pos:position pos:line="56" pos:column="10"/></operator><name><name pos:line="56" pos:column="10">inpcb<pos:position pos:line="56" pos:column="15"/></name><operator pos:line="56" pos:column="15">.<pos:position pos:line="56" pos:column="16"/></operator><name pos:line="56" pos:column="16">inp_flags<pos:position pos:line="56" pos:column="25"/></name></name> <operator pos:line="56" pos:column="26">&amp;<pos:position pos:line="56" pos:column="31"/></operator> <name pos:line="56" pos:column="28">INP_IPV6<pos:position pos:line="56" pos:column="36"/></name><operator pos:line="56" pos:column="36">)<pos:position pos:line="56" pos:column="37"/></operator> <operator pos:line="56" pos:column="38">&amp;&amp;<pos:position pos:line="56" pos:column="48"/></operator>
        <call><name pos:line="57" pos:column="9">IN6_IS_ADDR_UNSPECIFIED<pos:position pos:line="57" pos:column="32"/></name><argument_list pos:line="57" pos:column="32">(<argument><expr><operator pos:line="57" pos:column="33">&amp;<pos:position pos:line="57" pos:column="38"/></operator><name><name pos:line="57" pos:column="34">inpcb<pos:position pos:line="57" pos:column="39"/></name><operator pos:line="57" pos:column="39">.<pos:position pos:line="57" pos:column="40"/></operator><name pos:line="57" pos:column="40">inp_laddr6<pos:position pos:line="57" pos:column="50"/></name></name></expr></argument>)<pos:position pos:line="57" pos:column="51"/></argument_list></call></expr>)<pos:position pos:line="57" pos:column="52"/></condition><then pos:line="57" pos:column="52">
      <block type="pseudo"><continue pos:line="58" pos:column="7">continue;<pos:position pos:line="58" pos:column="16"/></continue></block></then></if>
<cpp:endif pos:line="59" pos:column="1">#<cpp:directive pos:line="59" pos:column="2">endif<pos:position pos:line="59" pos:column="7"/></cpp:directive></cpp:endif>

    <expr_stmt><expr><name pos:line="61" pos:column="5">status<pos:position pos:line="61" pos:column="11"/></name> <operator pos:line="61" pos:column="12">=<pos:position pos:line="61" pos:column="13"/></operator> <call><name pos:line="61" pos:column="14">kread<pos:position pos:line="61" pos:column="19"/></name><argument_list pos:line="61" pos:column="19">(<argument><expr><operator pos:line="61" pos:column="20">(<pos:position pos:line="61" pos:column="21"/></operator><name pos:line="61" pos:column="21">u_long<pos:position pos:line="61" pos:column="27"/></name><operator pos:line="61" pos:column="27">)<pos:position pos:line="61" pos:column="28"/></operator><name><name pos:line="61" pos:column="28">inpcb<pos:position pos:line="61" pos:column="33"/></name><operator pos:line="61" pos:column="33">.<pos:position pos:line="61" pos:column="34"/></operator><name pos:line="61" pos:column="34">inp_ppcb<pos:position pos:line="61" pos:column="42"/></name></name></expr></argument>, <argument><expr><operator pos:line="61" pos:column="44">&amp;<pos:position pos:line="61" pos:column="49"/></operator><name pos:line="61" pos:column="45">tcpcb<pos:position pos:line="61" pos:column="50"/></name></expr></argument>, <argument><expr><sizeof pos:line="61" pos:column="52">sizeof<argument_list pos:line="61" pos:column="58">(<argument><expr><name pos:line="61" pos:column="59">tcpcb<pos:position pos:line="61" pos:column="64"/></name></expr></argument>)<pos:position pos:line="61" pos:column="65"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="61" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="67"/></expr_stmt>
    <if pos:line="62" pos:column="5">if <condition pos:line="62" pos:column="8">(<expr><name pos:line="62" pos:column="9">status<pos:position pos:line="62" pos:column="15"/></name> <operator pos:line="62" pos:column="16">!=<pos:position pos:line="62" pos:column="18"/></operator> <literal type="number" pos:line="62" pos:column="19">0<pos:position pos:line="62" pos:column="20"/></literal></expr>)<pos:position pos:line="62" pos:column="21"/></condition><then pos:line="62" pos:column="21">
      <block type="pseudo"><return pos:line="63" pos:column="7">return <expr><operator pos:line="63" pos:column="14">(<pos:position pos:line="63" pos:column="15"/></operator><operator pos:line="63" pos:column="15">-<pos:position pos:line="63" pos:column="16"/></operator><literal type="number" pos:line="63" pos:column="16">1<pos:position pos:line="63" pos:column="17"/></literal><operator pos:line="63" pos:column="17">)<pos:position pos:line="63" pos:column="18"/></operator></expr>;<pos:position pos:line="63" pos:column="19"/></return></block></then></if>
    <expr_stmt><expr><call><name pos:line="64" pos:column="5">conn_handle_ports<pos:position pos:line="64" pos:column="22"/></name><argument_list pos:line="64" pos:column="22">(<argument><expr><call><name pos:line="64" pos:column="23">ntohs<pos:position pos:line="64" pos:column="28"/></name><argument_list pos:line="64" pos:column="28">(<argument><expr><name><name pos:line="64" pos:column="29">inpcb<pos:position pos:line="64" pos:column="34"/></name><operator pos:line="64" pos:column="34">.<pos:position pos:line="64" pos:column="35"/></operator><name pos:line="64" pos:column="35">inp_lport<pos:position pos:line="64" pos:column="44"/></name></name></expr></argument>)<pos:position pos:line="64" pos:column="45"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="64" pos:column="47">ntohs<pos:position pos:line="64" pos:column="52"/></name><argument_list pos:line="64" pos:column="52">(<argument><expr><name><name pos:line="64" pos:column="53">inpcb<pos:position pos:line="64" pos:column="58"/></name><operator pos:line="64" pos:column="58">.<pos:position pos:line="64" pos:column="59"/></operator><name pos:line="64" pos:column="59">inp_fport<pos:position pos:line="64" pos:column="68"/></name></name></expr></argument>)<pos:position pos:line="64" pos:column="69"/></argument_list></call></expr></argument>,
                      <argument><expr><name><name pos:line="65" pos:column="23">tcpcb<pos:position pos:line="65" pos:column="28"/></name><operator pos:line="65" pos:column="28">.<pos:position pos:line="65" pos:column="29"/></operator><name pos:line="65" pos:column="29">t_state<pos:position pos:line="65" pos:column="36"/></name></name></expr></argument>)<pos:position pos:line="65" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="38"/></expr_stmt>
  }<pos:position pos:line="66" pos:column="4"/></block></while> <comment type="block" pos:line="66" pos:column="5">/* while (next != head) */</comment>

  <expr_stmt><expr><call><name pos:line="68" pos:column="3">conn_submit_all<pos:position pos:line="68" pos:column="18"/></name><argument_list pos:line="68" pos:column="18">()<pos:position pos:line="68" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="21"/></expr_stmt>

  <return pos:line="70" pos:column="3">return <expr><operator pos:line="70" pos:column="10">(<pos:position pos:line="70" pos:column="11"/></operator><literal type="number" pos:line="70" pos:column="11">0<pos:position pos:line="70" pos:column="12"/></literal><operator pos:line="70" pos:column="12">)<pos:position pos:line="70" pos:column="13"/></operator></expr>;<pos:position pos:line="70" pos:column="14"/></return>
}<pos:position pos:line="71" pos:column="2"/></block></function></unit>
