<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_439_collectd-5.0.5.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">uc_check_timeout<pos:position pos:line="1" pos:column="21"/></name> <parameter_list pos:line="1" pos:column="22">(<parameter><decl><type><name pos:line="1" pos:column="23">void<pos:position pos:line="1" pos:column="27"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="28"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">cdtime_t<pos:position pos:line="3" pos:column="11"/></name></type> <name pos:line="3" pos:column="12">now<pos:position pos:line="3" pos:column="15"/></name></decl>;<pos:position pos:line="3" pos:column="16"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">cache_entry_t<pos:position pos:line="4" pos:column="16"/></name> <modifier pos:line="4" pos:column="17">*<pos:position pos:line="4" pos:column="18"/></modifier></type><name pos:line="4" pos:column="18">ce<pos:position pos:line="4" pos:column="20"/></name></decl>;<pos:position pos:line="4" pos:column="21"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="6" pos:column="3">char<pos:position pos:line="6" pos:column="7"/></name> <modifier pos:line="6" pos:column="8">*<pos:position pos:line="6" pos:column="9"/></modifier><modifier pos:line="6" pos:column="9">*<pos:position pos:line="6" pos:column="10"/></modifier></type><name pos:line="6" pos:column="10">keys<pos:position pos:line="6" pos:column="14"/></name> <init pos:line="6" pos:column="15">= <expr><name pos:line="6" pos:column="17">NULL<pos:position pos:line="6" pos:column="21"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="22"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">cdtime_t<pos:position pos:line="7" pos:column="11"/></name> <modifier pos:line="7" pos:column="12">*<pos:position pos:line="7" pos:column="13"/></modifier></type><name pos:line="7" pos:column="13">keys_time<pos:position pos:line="7" pos:column="22"/></name> <init pos:line="7" pos:column="23">= <expr><name pos:line="7" pos:column="25">NULL<pos:position pos:line="7" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="30"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">cdtime_t<pos:position pos:line="8" pos:column="11"/></name> <modifier pos:line="8" pos:column="12">*<pos:position pos:line="8" pos:column="13"/></modifier></type><name pos:line="8" pos:column="13">keys_interval<pos:position pos:line="8" pos:column="26"/></name> <init pos:line="8" pos:column="27">= <expr><name pos:line="8" pos:column="29">NULL<pos:position pos:line="8" pos:column="33"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="34"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">int<pos:position pos:line="9" pos:column="6"/></name></type> <name pos:line="9" pos:column="7">keys_len<pos:position pos:line="9" pos:column="15"/></name> <init pos:line="9" pos:column="16">= <expr><literal type="number" pos:line="9" pos:column="18">0<pos:position pos:line="9" pos:column="19"/></literal></expr></init></decl>;<pos:position pos:line="9" pos:column="20"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="11" pos:column="3">char<pos:position pos:line="11" pos:column="7"/></name> <modifier pos:line="11" pos:column="8">*<pos:position pos:line="11" pos:column="9"/></modifier></type><name pos:line="11" pos:column="9">key<pos:position pos:line="11" pos:column="12"/></name></decl>;<pos:position pos:line="11" pos:column="13"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="12" pos:column="3">c_avl_iterator_t<pos:position pos:line="12" pos:column="19"/></name> <modifier pos:line="12" pos:column="20">*<pos:position pos:line="12" pos:column="21"/></modifier></type><name pos:line="12" pos:column="21">iter<pos:position pos:line="12" pos:column="25"/></name></decl>;<pos:position pos:line="12" pos:column="26"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="14" pos:column="3">int<pos:position pos:line="14" pos:column="6"/></name></type> <name pos:line="14" pos:column="7">status<pos:position pos:line="14" pos:column="13"/></name></decl>;<pos:position pos:line="14" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="15" pos:column="3">int<pos:position pos:line="15" pos:column="6"/></name></type> <name pos:line="15" pos:column="7">i<pos:position pos:line="15" pos:column="8"/></name></decl>;<pos:position pos:line="15" pos:column="9"/></decl_stmt>
  
  <expr_stmt><expr><call><name pos:line="17" pos:column="3">pthread_mutex_lock<pos:position pos:line="17" pos:column="21"/></name> <argument_list pos:line="17" pos:column="22">(<argument><expr><operator pos:line="17" pos:column="23">&amp;<pos:position pos:line="17" pos:column="28"/></operator><name pos:line="17" pos:column="24">cache_lock<pos:position pos:line="17" pos:column="34"/></name></expr></argument>)<pos:position pos:line="17" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="36"/></expr_stmt>

  <expr_stmt><expr><name pos:line="19" pos:column="3">now<pos:position pos:line="19" pos:column="6"/></name> <operator pos:line="19" pos:column="7">=<pos:position pos:line="19" pos:column="8"/></operator> <call><name pos:line="19" pos:column="9">cdtime<pos:position pos:line="19" pos:column="15"/></name> <argument_list pos:line="19" pos:column="16">()<pos:position pos:line="19" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="19"/></expr_stmt>

  <comment type="block" pos:line="21" pos:column="3">/* Build a list of entries to be flushed */</comment>
  <expr_stmt><expr><name pos:line="22" pos:column="3">iter<pos:position pos:line="22" pos:column="7"/></name> <operator pos:line="22" pos:column="8">=<pos:position pos:line="22" pos:column="9"/></operator> <call><name pos:line="22" pos:column="10">c_avl_get_iterator<pos:position pos:line="22" pos:column="28"/></name> <argument_list pos:line="22" pos:column="29">(<argument><expr><name pos:line="22" pos:column="30">cache_tree<pos:position pos:line="22" pos:column="40"/></name></expr></argument>)<pos:position pos:line="22" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="42"/></expr_stmt>
  <while pos:line="23" pos:column="3">while <condition pos:line="23" pos:column="9">(<expr><call><name pos:line="23" pos:column="10">c_avl_iterator_next<pos:position pos:line="23" pos:column="29"/></name> <argument_list pos:line="23" pos:column="30">(<argument><expr><name pos:line="23" pos:column="31">iter<pos:position pos:line="23" pos:column="35"/></name></expr></argument>, <argument><expr><operator pos:line="23" pos:column="37">(<pos:position pos:line="23" pos:column="38"/></operator><name pos:line="23" pos:column="38">void<pos:position pos:line="23" pos:column="42"/></name> <operator pos:line="23" pos:column="43">*<pos:position pos:line="23" pos:column="44"/></operator><operator pos:line="23" pos:column="44">)<pos:position pos:line="23" pos:column="45"/></operator> <operator pos:line="23" pos:column="46">&amp;<pos:position pos:line="23" pos:column="51"/></operator><name pos:line="23" pos:column="47">key<pos:position pos:line="23" pos:column="50"/></name></expr></argument>, <argument><expr><operator pos:line="23" pos:column="52">(<pos:position pos:line="23" pos:column="53"/></operator><name pos:line="23" pos:column="53">void<pos:position pos:line="23" pos:column="57"/></name> <operator pos:line="23" pos:column="58">*<pos:position pos:line="23" pos:column="59"/></operator><operator pos:line="23" pos:column="59">)<pos:position pos:line="23" pos:column="60"/></operator> <operator pos:line="23" pos:column="61">&amp;<pos:position pos:line="23" pos:column="66"/></operator><name pos:line="23" pos:column="62">ce<pos:position pos:line="23" pos:column="64"/></name></expr></argument>)<pos:position pos:line="23" pos:column="65"/></argument_list></call> <operator pos:line="23" pos:column="66">==<pos:position pos:line="23" pos:column="68"/></operator> <literal type="number" pos:line="23" pos:column="69">0<pos:position pos:line="23" pos:column="70"/></literal></expr>)<pos:position pos:line="23" pos:column="71"/></condition>
  <block pos:line="24" pos:column="3">{
    <decl_stmt><decl><type><name pos:line="25" pos:column="5">char<pos:position pos:line="25" pos:column="9"/></name> <modifier pos:line="25" pos:column="10">*<pos:position pos:line="25" pos:column="11"/></modifier><modifier pos:line="25" pos:column="11">*<pos:position pos:line="25" pos:column="12"/></modifier></type><name pos:line="25" pos:column="12">tmp<pos:position pos:line="25" pos:column="15"/></name></decl>;<pos:position pos:line="25" pos:column="16"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="26" pos:column="5">cdtime_t<pos:position pos:line="26" pos:column="13"/></name> <modifier pos:line="26" pos:column="14">*<pos:position pos:line="26" pos:column="15"/></modifier></type><name pos:line="26" pos:column="15">tmp_time<pos:position pos:line="26" pos:column="23"/></name></decl>;<pos:position pos:line="26" pos:column="24"/></decl_stmt>

    <comment type="block" pos:line="28" pos:column="5">/* If the entry is fresh enough, continue. */</comment>
    <if pos:line="29" pos:column="5">if <condition pos:line="29" pos:column="8">(<expr><operator pos:line="29" pos:column="9">(<pos:position pos:line="29" pos:column="10"/></operator><name pos:line="29" pos:column="10">now<pos:position pos:line="29" pos:column="13"/></name> <operator pos:line="29" pos:column="14">-<pos:position pos:line="29" pos:column="15"/></operator> <name><name pos:line="29" pos:column="16">ce<pos:position pos:line="29" pos:column="18"/></name><operator pos:line="29" pos:column="18">-&gt;<pos:position pos:line="29" pos:column="23"/></operator><name pos:line="29" pos:column="20">last_update<pos:position pos:line="29" pos:column="31"/></name></name><operator pos:line="29" pos:column="31">)<pos:position pos:line="29" pos:column="32"/></operator> <operator pos:line="29" pos:column="33">&lt;<pos:position pos:line="29" pos:column="37"/></operator> <operator pos:line="29" pos:column="35">(<pos:position pos:line="29" pos:column="36"/></operator><name><name pos:line="29" pos:column="36">ce<pos:position pos:line="29" pos:column="38"/></name><operator pos:line="29" pos:column="38">-&gt;<pos:position pos:line="29" pos:column="43"/></operator><name pos:line="29" pos:column="40">interval<pos:position pos:line="29" pos:column="48"/></name></name> <operator pos:line="29" pos:column="49">*<pos:position pos:line="29" pos:column="50"/></operator> <name pos:line="29" pos:column="51">timeout_g<pos:position pos:line="29" pos:column="60"/></name><operator pos:line="29" pos:column="60">)<pos:position pos:line="29" pos:column="61"/></operator></expr>)<pos:position pos:line="29" pos:column="62"/></condition><then pos:line="29" pos:column="62">
      <block type="pseudo"><continue pos:line="30" pos:column="7">continue;<pos:position pos:line="30" pos:column="16"/></continue></block></then></if>

    <comment type="block" pos:line="32" pos:column="5">/* If entry has not been updated, add to `keys' array */</comment>
    <expr_stmt><expr><name pos:line="33" pos:column="5">tmp<pos:position pos:line="33" pos:column="8"/></name> <operator pos:line="33" pos:column="9">=<pos:position pos:line="33" pos:column="10"/></operator> <operator pos:line="33" pos:column="11">(<pos:position pos:line="33" pos:column="12"/></operator><name pos:line="33" pos:column="12">char<pos:position pos:line="33" pos:column="16"/></name> <operator pos:line="33" pos:column="17">*<pos:position pos:line="33" pos:column="18"/></operator><operator pos:line="33" pos:column="18">*<pos:position pos:line="33" pos:column="19"/></operator><operator pos:line="33" pos:column="19">)<pos:position pos:line="33" pos:column="20"/></operator> <call><name pos:line="33" pos:column="21">realloc<pos:position pos:line="33" pos:column="28"/></name> <argument_list pos:line="33" pos:column="29">(<argument><expr><operator pos:line="33" pos:column="30">(<pos:position pos:line="33" pos:column="31"/></operator><name pos:line="33" pos:column="31">void<pos:position pos:line="33" pos:column="35"/></name> <operator pos:line="33" pos:column="36">*<pos:position pos:line="33" pos:column="37"/></operator><operator pos:line="33" pos:column="37">)<pos:position pos:line="33" pos:column="38"/></operator> <name pos:line="33" pos:column="39">keys<pos:position pos:line="33" pos:column="43"/></name></expr></argument>,
	<argument><expr><operator pos:line="34" pos:column="9">(<pos:position pos:line="34" pos:column="10"/></operator><name pos:line="34" pos:column="10">keys_len<pos:position pos:line="34" pos:column="18"/></name> <operator pos:line="34" pos:column="19">+<pos:position pos:line="34" pos:column="20"/></operator> <literal type="number" pos:line="34" pos:column="21">1<pos:position pos:line="34" pos:column="22"/></literal><operator pos:line="34" pos:column="22">)<pos:position pos:line="34" pos:column="23"/></operator> <operator pos:line="34" pos:column="24">*<pos:position pos:line="34" pos:column="25"/></operator> <sizeof pos:line="34" pos:column="26">sizeof <argument_list pos:line="34" pos:column="33">(<argument><expr><name pos:line="34" pos:column="34">char<pos:position pos:line="34" pos:column="38"/></name> <operator pos:line="34" pos:column="39">*<pos:position pos:line="34" pos:column="40"/></operator></expr></argument>)<pos:position pos:line="34" pos:column="41"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="34" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="43"/></expr_stmt>
    <if pos:line="35" pos:column="5">if <condition pos:line="35" pos:column="8">(<expr><name pos:line="35" pos:column="9">tmp<pos:position pos:line="35" pos:column="12"/></name> <operator pos:line="35" pos:column="13">==<pos:position pos:line="35" pos:column="15"/></operator> <name pos:line="35" pos:column="16">NULL<pos:position pos:line="35" pos:column="20"/></name></expr>)<pos:position pos:line="35" pos:column="21"/></condition><then pos:line="35" pos:column="21">
    <block pos:line="36" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="37" pos:column="7">ERROR<pos:position pos:line="37" pos:column="12"/></name> <argument_list pos:line="37" pos:column="13">(<argument><expr><literal type="string" pos:line="37" pos:column="14">"uc_check_timeout: realloc failed."<pos:position pos:line="37" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="37" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="51"/></expr_stmt>
      <continue pos:line="38" pos:column="7">continue;<pos:position pos:line="38" pos:column="16"/></continue>
    }<pos:position pos:line="39" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="40" pos:column="5">keys<pos:position pos:line="40" pos:column="9"/></name> <operator pos:line="40" pos:column="10">=<pos:position pos:line="40" pos:column="11"/></operator> <name pos:line="40" pos:column="12">tmp<pos:position pos:line="40" pos:column="15"/></name></expr>;<pos:position pos:line="40" pos:column="16"/></expr_stmt>

    <expr_stmt><expr><name pos:line="42" pos:column="5">tmp_time<pos:position pos:line="42" pos:column="13"/></name> <operator pos:line="42" pos:column="14">=<pos:position pos:line="42" pos:column="15"/></operator> <call><name pos:line="42" pos:column="16">realloc<pos:position pos:line="42" pos:column="23"/></name> <argument_list pos:line="42" pos:column="24">(<argument><expr><name pos:line="42" pos:column="25">keys_time<pos:position pos:line="42" pos:column="34"/></name></expr></argument>, <argument><expr><operator pos:line="42" pos:column="36">(<pos:position pos:line="42" pos:column="37"/></operator><name pos:line="42" pos:column="37">keys_len<pos:position pos:line="42" pos:column="45"/></name> <operator pos:line="42" pos:column="46">+<pos:position pos:line="42" pos:column="47"/></operator> <literal type="number" pos:line="42" pos:column="48">1<pos:position pos:line="42" pos:column="49"/></literal><operator pos:line="42" pos:column="49">)<pos:position pos:line="42" pos:column="50"/></operator> <operator pos:line="42" pos:column="51">*<pos:position pos:line="42" pos:column="52"/></operator> <sizeof pos:line="42" pos:column="53">sizeof <argument_list pos:line="42" pos:column="60">(<argument><expr><operator pos:line="42" pos:column="61">*<pos:position pos:line="42" pos:column="62"/></operator><name pos:line="42" pos:column="62">keys_time<pos:position pos:line="42" pos:column="71"/></name></expr></argument>)<pos:position pos:line="42" pos:column="72"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="42" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="74"/></expr_stmt>
    <if pos:line="43" pos:column="5">if <condition pos:line="43" pos:column="8">(<expr><name pos:line="43" pos:column="9">tmp_time<pos:position pos:line="43" pos:column="17"/></name> <operator pos:line="43" pos:column="18">==<pos:position pos:line="43" pos:column="20"/></operator> <name pos:line="43" pos:column="21">NULL<pos:position pos:line="43" pos:column="25"/></name></expr>)<pos:position pos:line="43" pos:column="26"/></condition><then pos:line="43" pos:column="26">
    <block pos:line="44" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="45" pos:column="7">ERROR<pos:position pos:line="45" pos:column="12"/></name> <argument_list pos:line="45" pos:column="13">(<argument><expr><literal type="string" pos:line="45" pos:column="14">"uc_check_timeout: realloc failed."<pos:position pos:line="45" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="45" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="51"/></expr_stmt>
      <continue pos:line="46" pos:column="7">continue;<pos:position pos:line="46" pos:column="16"/></continue>
    }<pos:position pos:line="47" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="48" pos:column="5">keys_time<pos:position pos:line="48" pos:column="14"/></name> <operator pos:line="48" pos:column="15">=<pos:position pos:line="48" pos:column="16"/></operator> <name pos:line="48" pos:column="17">tmp_time<pos:position pos:line="48" pos:column="25"/></name></expr>;<pos:position pos:line="48" pos:column="26"/></expr_stmt>

    <expr_stmt><expr><name pos:line="50" pos:column="5">tmp_time<pos:position pos:line="50" pos:column="13"/></name> <operator pos:line="50" pos:column="14">=<pos:position pos:line="50" pos:column="15"/></operator> <call><name pos:line="50" pos:column="16">realloc<pos:position pos:line="50" pos:column="23"/></name> <argument_list pos:line="50" pos:column="24">(<argument><expr><name pos:line="50" pos:column="25">keys_interval<pos:position pos:line="50" pos:column="38"/></name></expr></argument>, <argument><expr><operator pos:line="50" pos:column="40">(<pos:position pos:line="50" pos:column="41"/></operator><name pos:line="50" pos:column="41">keys_len<pos:position pos:line="50" pos:column="49"/></name> <operator pos:line="50" pos:column="50">+<pos:position pos:line="50" pos:column="51"/></operator> <literal type="number" pos:line="50" pos:column="52">1<pos:position pos:line="50" pos:column="53"/></literal><operator pos:line="50" pos:column="53">)<pos:position pos:line="50" pos:column="54"/></operator> <operator pos:line="50" pos:column="55">*<pos:position pos:line="50" pos:column="56"/></operator> <sizeof pos:line="50" pos:column="57">sizeof <argument_list pos:line="50" pos:column="64">(<argument><expr><operator pos:line="50" pos:column="65">*<pos:position pos:line="50" pos:column="66"/></operator><name pos:line="50" pos:column="66">keys_interval<pos:position pos:line="50" pos:column="79"/></name></expr></argument>)<pos:position pos:line="50" pos:column="80"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="50" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="82"/></expr_stmt>
    <if pos:line="51" pos:column="5">if <condition pos:line="51" pos:column="8">(<expr><name pos:line="51" pos:column="9">tmp_time<pos:position pos:line="51" pos:column="17"/></name> <operator pos:line="51" pos:column="18">==<pos:position pos:line="51" pos:column="20"/></operator> <name pos:line="51" pos:column="21">NULL<pos:position pos:line="51" pos:column="25"/></name></expr>)<pos:position pos:line="51" pos:column="26"/></condition><then pos:line="51" pos:column="26">
    <block pos:line="52" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="53" pos:column="7">ERROR<pos:position pos:line="53" pos:column="12"/></name> <argument_list pos:line="53" pos:column="13">(<argument><expr><literal type="string" pos:line="53" pos:column="14">"uc_check_timeout: realloc failed."<pos:position pos:line="53" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="53" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="51"/></expr_stmt>
      <continue pos:line="54" pos:column="7">continue;<pos:position pos:line="54" pos:column="16"/></continue>
    }<pos:position pos:line="55" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="56" pos:column="5">keys_interval<pos:position pos:line="56" pos:column="18"/></name> <operator pos:line="56" pos:column="19">=<pos:position pos:line="56" pos:column="20"/></operator> <name pos:line="56" pos:column="21">tmp_time<pos:position pos:line="56" pos:column="29"/></name></expr>;<pos:position pos:line="56" pos:column="30"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="58" pos:column="5">keys<pos:position pos:line="58" pos:column="9"/></name><index pos:line="58" pos:column="9">[<expr><name pos:line="58" pos:column="10">keys_len<pos:position pos:line="58" pos:column="18"/></name></expr>]<pos:position pos:line="58" pos:column="19"/></index></name> <operator pos:line="58" pos:column="20">=<pos:position pos:line="58" pos:column="21"/></operator> <call><name pos:line="58" pos:column="22">strdup<pos:position pos:line="58" pos:column="28"/></name> <argument_list pos:line="58" pos:column="29">(<argument><expr><name pos:line="58" pos:column="30">key<pos:position pos:line="58" pos:column="33"/></name></expr></argument>)<pos:position pos:line="58" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="35"/></expr_stmt>
    <if pos:line="59" pos:column="5">if <condition pos:line="59" pos:column="8">(<expr><name><name pos:line="59" pos:column="9">keys<pos:position pos:line="59" pos:column="13"/></name><index pos:line="59" pos:column="13">[<expr><name pos:line="59" pos:column="14">keys_len<pos:position pos:line="59" pos:column="22"/></name></expr>]<pos:position pos:line="59" pos:column="23"/></index></name> <operator pos:line="59" pos:column="24">==<pos:position pos:line="59" pos:column="26"/></operator> <name pos:line="59" pos:column="27">NULL<pos:position pos:line="59" pos:column="31"/></name></expr>)<pos:position pos:line="59" pos:column="32"/></condition><then pos:line="59" pos:column="32">
    <block pos:line="60" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="61" pos:column="7">ERROR<pos:position pos:line="61" pos:column="12"/></name> <argument_list pos:line="61" pos:column="13">(<argument><expr><literal type="string" pos:line="61" pos:column="14">"uc_check_timeout: strdup failed."<pos:position pos:line="61" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="61" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="50"/></expr_stmt>
      <continue pos:line="62" pos:column="7">continue;<pos:position pos:line="62" pos:column="16"/></continue>
    }<pos:position pos:line="63" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name><name pos:line="64" pos:column="5">keys_time<pos:position pos:line="64" pos:column="14"/></name><index pos:line="64" pos:column="14">[<expr><name pos:line="64" pos:column="15">keys_len<pos:position pos:line="64" pos:column="23"/></name></expr>]<pos:position pos:line="64" pos:column="24"/></index></name> <operator pos:line="64" pos:column="25">=<pos:position pos:line="64" pos:column="26"/></operator> <name><name pos:line="64" pos:column="27">ce<pos:position pos:line="64" pos:column="29"/></name><operator pos:line="64" pos:column="29">-&gt;<pos:position pos:line="64" pos:column="34"/></operator><name pos:line="64" pos:column="31">last_time<pos:position pos:line="64" pos:column="40"/></name></name></expr>;<pos:position pos:line="64" pos:column="41"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="65" pos:column="5">keys_interval<pos:position pos:line="65" pos:column="18"/></name><index pos:line="65" pos:column="18">[<expr><name pos:line="65" pos:column="19">keys_len<pos:position pos:line="65" pos:column="27"/></name></expr>]<pos:position pos:line="65" pos:column="28"/></index></name> <operator pos:line="65" pos:column="29">=<pos:position pos:line="65" pos:column="30"/></operator> <name><name pos:line="65" pos:column="31">ce<pos:position pos:line="65" pos:column="33"/></name><operator pos:line="65" pos:column="33">-&gt;<pos:position pos:line="65" pos:column="38"/></operator><name pos:line="65" pos:column="35">interval<pos:position pos:line="65" pos:column="43"/></name></name></expr>;<pos:position pos:line="65" pos:column="44"/></expr_stmt>

    <expr_stmt><expr><name pos:line="67" pos:column="5">keys_len<pos:position pos:line="67" pos:column="13"/></name><operator pos:line="67" pos:column="13">++<pos:position pos:line="67" pos:column="15"/></operator></expr>;<pos:position pos:line="67" pos:column="16"/></expr_stmt>
  }<pos:position pos:line="68" pos:column="4"/></block></while> <comment type="block" pos:line="68" pos:column="5">/* while (c_avl_iterator_next) */</comment>

  <expr_stmt><expr><call><name pos:line="70" pos:column="3">c_avl_iterator_destroy<pos:position pos:line="70" pos:column="25"/></name> <argument_list pos:line="70" pos:column="26">(<argument><expr><name pos:line="70" pos:column="27">iter<pos:position pos:line="70" pos:column="31"/></name></expr></argument>)<pos:position pos:line="70" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="33"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="71" pos:column="3">pthread_mutex_unlock<pos:position pos:line="71" pos:column="23"/></name> <argument_list pos:line="71" pos:column="24">(<argument><expr><operator pos:line="71" pos:column="25">&amp;<pos:position pos:line="71" pos:column="30"/></operator><name pos:line="71" pos:column="26">cache_lock<pos:position pos:line="71" pos:column="36"/></name></expr></argument>)<pos:position pos:line="71" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="38"/></expr_stmt>

  <if pos:line="73" pos:column="3">if <condition pos:line="73" pos:column="6">(<expr><name pos:line="73" pos:column="7">keys_len<pos:position pos:line="73" pos:column="15"/></name> <operator pos:line="73" pos:column="16">==<pos:position pos:line="73" pos:column="18"/></operator> <literal type="number" pos:line="73" pos:column="19">0<pos:position pos:line="73" pos:column="20"/></literal></expr>)<pos:position pos:line="73" pos:column="21"/></condition><then pos:line="73" pos:column="21">
    <block type="pseudo"><return pos:line="74" pos:column="5">return <expr><operator pos:line="74" pos:column="12">(<pos:position pos:line="74" pos:column="13"/></operator><literal type="number" pos:line="74" pos:column="13">0<pos:position pos:line="74" pos:column="14"/></literal><operator pos:line="74" pos:column="14">)<pos:position pos:line="74" pos:column="15"/></operator></expr>;<pos:position pos:line="74" pos:column="16"/></return></block></then></if>

  <comment type="block" pos:line="76" pos:column="3">/* Call the "missing" callback for each value. Do this before removing the
   * value from the cache, so that callbacks can still access the data stored,
   * including plugin specific meta data, rates, history, â¦. This must be done
   * without holding the lock, otherwise we will run into a deadlock if a
   * plugin calls the cache interface. */</comment>
  <for pos:line="81" pos:column="3">for <control pos:line="81" pos:column="7">(<init><expr><name pos:line="81" pos:column="8">i<pos:position pos:line="81" pos:column="9"/></name> <operator pos:line="81" pos:column="10">=<pos:position pos:line="81" pos:column="11"/></operator> <literal type="number" pos:line="81" pos:column="12">0<pos:position pos:line="81" pos:column="13"/></literal></expr>;<pos:position pos:line="81" pos:column="14"/></init> <condition><expr><name pos:line="81" pos:column="15">i<pos:position pos:line="81" pos:column="16"/></name> <operator pos:line="81" pos:column="17">&lt;<pos:position pos:line="81" pos:column="21"/></operator> <name pos:line="81" pos:column="19">keys_len<pos:position pos:line="81" pos:column="27"/></name></expr>;<pos:position pos:line="81" pos:column="28"/></condition> <incr><expr><name pos:line="81" pos:column="29">i<pos:position pos:line="81" pos:column="30"/></name><operator pos:line="81" pos:column="30">++<pos:position pos:line="81" pos:column="32"/></operator></expr></incr>)<pos:position pos:line="81" pos:column="33"/></control>
  <block pos:line="82" pos:column="3">{
    <decl_stmt><decl><type><name pos:line="83" pos:column="5">value_list_t<pos:position pos:line="83" pos:column="17"/></name></type> <name pos:line="83" pos:column="18">vl<pos:position pos:line="83" pos:column="20"/></name> <init pos:line="83" pos:column="21">= <expr><name pos:line="83" pos:column="23">VALUE_LIST_INIT<pos:position pos:line="83" pos:column="38"/></name></expr></init></decl>;<pos:position pos:line="83" pos:column="39"/></decl_stmt>

    <expr_stmt><expr><name><name pos:line="85" pos:column="5">vl<pos:position pos:line="85" pos:column="7"/></name><operator pos:line="85" pos:column="7">.<pos:position pos:line="85" pos:column="8"/></operator><name pos:line="85" pos:column="8">values<pos:position pos:line="85" pos:column="14"/></name></name> <operator pos:line="85" pos:column="15">=<pos:position pos:line="85" pos:column="16"/></operator> <name pos:line="85" pos:column="17">NULL<pos:position pos:line="85" pos:column="21"/></name></expr>;<pos:position pos:line="85" pos:column="22"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="86" pos:column="5">vl<pos:position pos:line="86" pos:column="7"/></name><operator pos:line="86" pos:column="7">.<pos:position pos:line="86" pos:column="8"/></operator><name pos:line="86" pos:column="8">values_len<pos:position pos:line="86" pos:column="18"/></name></name> <operator pos:line="86" pos:column="19">=<pos:position pos:line="86" pos:column="20"/></operator> <literal type="number" pos:line="86" pos:column="21">0<pos:position pos:line="86" pos:column="22"/></literal></expr>;<pos:position pos:line="86" pos:column="23"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="87" pos:column="5">vl<pos:position pos:line="87" pos:column="7"/></name><operator pos:line="87" pos:column="7">.<pos:position pos:line="87" pos:column="8"/></operator><name pos:line="87" pos:column="8">meta<pos:position pos:line="87" pos:column="12"/></name></name> <operator pos:line="87" pos:column="13">=<pos:position pos:line="87" pos:column="14"/></operator> <name pos:line="87" pos:column="15">NULL<pos:position pos:line="87" pos:column="19"/></name></expr>;<pos:position pos:line="87" pos:column="20"/></expr_stmt>

    <expr_stmt><expr><name pos:line="89" pos:column="5">status<pos:position pos:line="89" pos:column="11"/></name> <operator pos:line="89" pos:column="12">=<pos:position pos:line="89" pos:column="13"/></operator> <call><name pos:line="89" pos:column="14">parse_identifier_vl<pos:position pos:line="89" pos:column="33"/></name> <argument_list pos:line="89" pos:column="34">(<argument><expr><name><name pos:line="89" pos:column="35">keys<pos:position pos:line="89" pos:column="39"/></name><index pos:line="89" pos:column="39">[<expr><name pos:line="89" pos:column="40">i<pos:position pos:line="89" pos:column="41"/></name></expr>]<pos:position pos:line="89" pos:column="42"/></index></name></expr></argument>, <argument><expr><operator pos:line="89" pos:column="44">&amp;<pos:position pos:line="89" pos:column="49"/></operator><name pos:line="89" pos:column="45">vl<pos:position pos:line="89" pos:column="47"/></name></expr></argument>)<pos:position pos:line="89" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="49"/></expr_stmt>
    <if pos:line="90" pos:column="5">if <condition pos:line="90" pos:column="8">(<expr><name pos:line="90" pos:column="9">status<pos:position pos:line="90" pos:column="15"/></name> <operator pos:line="90" pos:column="16">!=<pos:position pos:line="90" pos:column="18"/></operator> <literal type="number" pos:line="90" pos:column="19">0<pos:position pos:line="90" pos:column="20"/></literal></expr>)<pos:position pos:line="90" pos:column="21"/></condition><then pos:line="90" pos:column="21">
    <block pos:line="91" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="92" pos:column="7">ERROR<pos:position pos:line="92" pos:column="12"/></name> <argument_list pos:line="92" pos:column="13">(<argument><expr><literal type="string" pos:line="92" pos:column="14">"uc_check_timeout: parse_identifier_vl (\"%s\") failed."<pos:position pos:line="92" pos:column="70"/></literal></expr></argument>, <argument><expr><name><name pos:line="92" pos:column="72">keys<pos:position pos:line="92" pos:column="76"/></name><index pos:line="92" pos:column="76">[<expr><name pos:line="92" pos:column="77">i<pos:position pos:line="92" pos:column="78"/></name></expr>]<pos:position pos:line="92" pos:column="79"/></index></name></expr></argument>)<pos:position pos:line="92" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="81"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="93" pos:column="7">cache_free<pos:position pos:line="93" pos:column="17"/></name> <argument_list pos:line="93" pos:column="18">(<argument><expr><name pos:line="93" pos:column="19">ce<pos:position pos:line="93" pos:column="21"/></name></expr></argument>)<pos:position pos:line="93" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="23"/></expr_stmt>
      <continue pos:line="94" pos:column="7">continue;<pos:position pos:line="94" pos:column="16"/></continue>
    }<pos:position pos:line="95" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name><name pos:line="97" pos:column="5">vl<pos:position pos:line="97" pos:column="7"/></name><operator pos:line="97" pos:column="7">.<pos:position pos:line="97" pos:column="8"/></operator><name pos:line="97" pos:column="8">time<pos:position pos:line="97" pos:column="12"/></name></name> <operator pos:line="97" pos:column="13">=<pos:position pos:line="97" pos:column="14"/></operator> <name><name pos:line="97" pos:column="15">keys_time<pos:position pos:line="97" pos:column="24"/></name><index pos:line="97" pos:column="24">[<expr><name pos:line="97" pos:column="25">i<pos:position pos:line="97" pos:column="26"/></name></expr>]<pos:position pos:line="97" pos:column="27"/></index></name></expr>;<pos:position pos:line="97" pos:column="28"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="98" pos:column="5">vl<pos:position pos:line="98" pos:column="7"/></name><operator pos:line="98" pos:column="7">.<pos:position pos:line="98" pos:column="8"/></operator><name pos:line="98" pos:column="8">interval<pos:position pos:line="98" pos:column="16"/></name></name> <operator pos:line="98" pos:column="17">=<pos:position pos:line="98" pos:column="18"/></operator> <name><name pos:line="98" pos:column="19">keys_interval<pos:position pos:line="98" pos:column="32"/></name><index pos:line="98" pos:column="32">[<expr><name pos:line="98" pos:column="33">i<pos:position pos:line="98" pos:column="34"/></name></expr>]<pos:position pos:line="98" pos:column="35"/></index></name></expr>;<pos:position pos:line="98" pos:column="36"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="100" pos:column="5">plugin_dispatch_missing<pos:position pos:line="100" pos:column="28"/></name> <argument_list pos:line="100" pos:column="29">(<argument><expr><operator pos:line="100" pos:column="30">&amp;<pos:position pos:line="100" pos:column="35"/></operator><name pos:line="100" pos:column="31">vl<pos:position pos:line="100" pos:column="33"/></name></expr></argument>)<pos:position pos:line="100" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="100" pos:column="35"/></expr_stmt>
  }<pos:position pos:line="101" pos:column="4"/></block></for> <comment type="block" pos:line="101" pos:column="5">/* for (i = 0; i &lt; keys_len; i++) */</comment>

  <comment type="block" pos:line="103" pos:column="3">/* Now actually remove all the values from the cache. We don't re-evaluate
   * the timestamp again, so in theory it is possible we remove a value after
   * it is updated here. */</comment>
  <expr_stmt><expr><call><name pos:line="106" pos:column="3">pthread_mutex_lock<pos:position pos:line="106" pos:column="21"/></name> <argument_list pos:line="106" pos:column="22">(<argument><expr><operator pos:line="106" pos:column="23">&amp;<pos:position pos:line="106" pos:column="28"/></operator><name pos:line="106" pos:column="24">cache_lock<pos:position pos:line="106" pos:column="34"/></name></expr></argument>)<pos:position pos:line="106" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="106" pos:column="36"/></expr_stmt>
  <for pos:line="107" pos:column="3">for <control pos:line="107" pos:column="7">(<init><expr><name pos:line="107" pos:column="8">i<pos:position pos:line="107" pos:column="9"/></name> <operator pos:line="107" pos:column="10">=<pos:position pos:line="107" pos:column="11"/></operator> <literal type="number" pos:line="107" pos:column="12">0<pos:position pos:line="107" pos:column="13"/></literal></expr>;<pos:position pos:line="107" pos:column="14"/></init> <condition><expr><name pos:line="107" pos:column="15">i<pos:position pos:line="107" pos:column="16"/></name> <operator pos:line="107" pos:column="17">&lt;<pos:position pos:line="107" pos:column="21"/></operator> <name pos:line="107" pos:column="19">keys_len<pos:position pos:line="107" pos:column="27"/></name></expr>;<pos:position pos:line="107" pos:column="28"/></condition> <incr><expr><name pos:line="107" pos:column="29">i<pos:position pos:line="107" pos:column="30"/></name><operator pos:line="107" pos:column="30">++<pos:position pos:line="107" pos:column="32"/></operator></expr></incr>)<pos:position pos:line="107" pos:column="33"/></control>
  <block pos:line="108" pos:column="3">{
    <expr_stmt><expr><name pos:line="109" pos:column="5">key<pos:position pos:line="109" pos:column="8"/></name> <operator pos:line="109" pos:column="9">=<pos:position pos:line="109" pos:column="10"/></operator> <name pos:line="109" pos:column="11">NULL<pos:position pos:line="109" pos:column="15"/></name></expr>;<pos:position pos:line="109" pos:column="16"/></expr_stmt>
    <expr_stmt><expr><name pos:line="110" pos:column="5">ce<pos:position pos:line="110" pos:column="7"/></name> <operator pos:line="110" pos:column="8">=<pos:position pos:line="110" pos:column="9"/></operator> <name pos:line="110" pos:column="10">NULL<pos:position pos:line="110" pos:column="14"/></name></expr>;<pos:position pos:line="110" pos:column="15"/></expr_stmt>

    <expr_stmt><expr><name pos:line="112" pos:column="5">status<pos:position pos:line="112" pos:column="11"/></name> <operator pos:line="112" pos:column="12">=<pos:position pos:line="112" pos:column="13"/></operator> <call><name pos:line="112" pos:column="14">c_avl_remove<pos:position pos:line="112" pos:column="26"/></name> <argument_list pos:line="112" pos:column="27">(<argument><expr><name pos:line="112" pos:column="28">cache_tree<pos:position pos:line="112" pos:column="38"/></name></expr></argument>, <argument><expr><name><name pos:line="112" pos:column="40">keys<pos:position pos:line="112" pos:column="44"/></name><index pos:line="112" pos:column="44">[<expr><name pos:line="112" pos:column="45">i<pos:position pos:line="112" pos:column="46"/></name></expr>]<pos:position pos:line="112" pos:column="47"/></index></name></expr></argument>,
	<argument><expr><operator pos:line="113" pos:column="9">(<pos:position pos:line="113" pos:column="10"/></operator><name pos:line="113" pos:column="10">void<pos:position pos:line="113" pos:column="14"/></name> <operator pos:line="113" pos:column="15">*<pos:position pos:line="113" pos:column="16"/></operator><operator pos:line="113" pos:column="16">)<pos:position pos:line="113" pos:column="17"/></operator> <operator pos:line="113" pos:column="18">&amp;<pos:position pos:line="113" pos:column="23"/></operator><name pos:line="113" pos:column="19">key<pos:position pos:line="113" pos:column="22"/></name></expr></argument>, <argument><expr><operator pos:line="113" pos:column="24">(<pos:position pos:line="113" pos:column="25"/></operator><name pos:line="113" pos:column="25">void<pos:position pos:line="113" pos:column="29"/></name> <operator pos:line="113" pos:column="30">*<pos:position pos:line="113" pos:column="31"/></operator><operator pos:line="113" pos:column="31">)<pos:position pos:line="113" pos:column="32"/></operator> <operator pos:line="113" pos:column="33">&amp;<pos:position pos:line="113" pos:column="38"/></operator><name pos:line="113" pos:column="34">ce<pos:position pos:line="113" pos:column="36"/></name></expr></argument>)<pos:position pos:line="113" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="113" pos:column="38"/></expr_stmt>
    <if pos:line="114" pos:column="5">if <condition pos:line="114" pos:column="8">(<expr><name pos:line="114" pos:column="9">status<pos:position pos:line="114" pos:column="15"/></name> <operator pos:line="114" pos:column="16">!=<pos:position pos:line="114" pos:column="18"/></operator> <literal type="number" pos:line="114" pos:column="19">0<pos:position pos:line="114" pos:column="20"/></literal></expr>)<pos:position pos:line="114" pos:column="21"/></condition><then pos:line="114" pos:column="21">
    <block pos:line="115" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="116" pos:column="7">ERROR<pos:position pos:line="116" pos:column="12"/></name> <argument_list pos:line="116" pos:column="13">(<argument><expr><literal type="string" pos:line="116" pos:column="14">"uc_check_timeout: c_avl_remove (\"%s\") failed."<pos:position pos:line="116" pos:column="63"/></literal></expr></argument>, <argument><expr><name><name pos:line="116" pos:column="65">keys<pos:position pos:line="116" pos:column="69"/></name><index pos:line="116" pos:column="69">[<expr><name pos:line="116" pos:column="70">i<pos:position pos:line="116" pos:column="71"/></name></expr>]<pos:position pos:line="116" pos:column="72"/></index></name></expr></argument>)<pos:position pos:line="116" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="116" pos:column="74"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="117" pos:column="7">sfree<pos:position pos:line="117" pos:column="12"/></name> <argument_list pos:line="117" pos:column="13">(<argument><expr><name><name pos:line="117" pos:column="14">keys<pos:position pos:line="117" pos:column="18"/></name><index pos:line="117" pos:column="18">[<expr><name pos:line="117" pos:column="19">i<pos:position pos:line="117" pos:column="20"/></name></expr>]<pos:position pos:line="117" pos:column="21"/></index></name></expr></argument>)<pos:position pos:line="117" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="117" pos:column="23"/></expr_stmt>
      <continue pos:line="118" pos:column="7">continue;<pos:position pos:line="118" pos:column="16"/></continue>
    }<pos:position pos:line="119" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="121" pos:column="5">sfree<pos:position pos:line="121" pos:column="10"/></name> <argument_list pos:line="121" pos:column="11">(<argument><expr><name><name pos:line="121" pos:column="12">keys<pos:position pos:line="121" pos:column="16"/></name><index pos:line="121" pos:column="16">[<expr><name pos:line="121" pos:column="17">i<pos:position pos:line="121" pos:column="18"/></name></expr>]<pos:position pos:line="121" pos:column="19"/></index></name></expr></argument>)<pos:position pos:line="121" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="121" pos:column="21"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="122" pos:column="5">sfree<pos:position pos:line="122" pos:column="10"/></name> <argument_list pos:line="122" pos:column="11">(<argument><expr><name pos:line="122" pos:column="12">key<pos:position pos:line="122" pos:column="15"/></name></expr></argument>)<pos:position pos:line="122" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="122" pos:column="17"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="123" pos:column="5">cache_free<pos:position pos:line="123" pos:column="15"/></name> <argument_list pos:line="123" pos:column="16">(<argument><expr><name pos:line="123" pos:column="17">ce<pos:position pos:line="123" pos:column="19"/></name></expr></argument>)<pos:position pos:line="123" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="123" pos:column="21"/></expr_stmt>
  }<pos:position pos:line="124" pos:column="4"/></block></for> <comment type="block" pos:line="124" pos:column="5">/* for (i = 0; i &lt; keys_len; i++) */</comment>
  <expr_stmt><expr><call><name pos:line="125" pos:column="3">pthread_mutex_unlock<pos:position pos:line="125" pos:column="23"/></name> <argument_list pos:line="125" pos:column="24">(<argument><expr><operator pos:line="125" pos:column="25">&amp;<pos:position pos:line="125" pos:column="30"/></operator><name pos:line="125" pos:column="26">cache_lock<pos:position pos:line="125" pos:column="36"/></name></expr></argument>)<pos:position pos:line="125" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="125" pos:column="38"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="127" pos:column="3">sfree<pos:position pos:line="127" pos:column="8"/></name> <argument_list pos:line="127" pos:column="9">(<argument><expr><name pos:line="127" pos:column="10">keys<pos:position pos:line="127" pos:column="14"/></name></expr></argument>)<pos:position pos:line="127" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="127" pos:column="16"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="128" pos:column="3">sfree<pos:position pos:line="128" pos:column="8"/></name> <argument_list pos:line="128" pos:column="9">(<argument><expr><name pos:line="128" pos:column="10">keys_time<pos:position pos:line="128" pos:column="19"/></name></expr></argument>)<pos:position pos:line="128" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="128" pos:column="21"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="129" pos:column="3">sfree<pos:position pos:line="129" pos:column="8"/></name> <argument_list pos:line="129" pos:column="9">(<argument><expr><name pos:line="129" pos:column="10">keys_interval<pos:position pos:line="129" pos:column="23"/></name></expr></argument>)<pos:position pos:line="129" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="129" pos:column="25"/></expr_stmt>

  <return pos:line="131" pos:column="3">return <expr><operator pos:line="131" pos:column="10">(<pos:position pos:line="131" pos:column="11"/></operator><literal type="number" pos:line="131" pos:column="11">0<pos:position pos:line="131" pos:column="12"/></literal><operator pos:line="131" pos:column="12">)<pos:position pos:line="131" pos:column="13"/></operator></expr>;<pos:position pos:line="131" pos:column="14"/></return>
}<pos:position pos:line="132" pos:column="2"/></block></function></unit>
