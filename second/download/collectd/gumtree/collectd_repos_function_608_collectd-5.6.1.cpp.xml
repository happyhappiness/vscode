<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_608_collectd-5.6.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">agg_config_handle_group_by<pos:position pos:line="1" pos:column="38"/></name> <parameter_list pos:line="1" pos:column="39">(<parameter><decl><type><name pos:line="1" pos:column="40">oconfig_item_t<pos:position pos:line="1" pos:column="54"/></name> <specifier pos:line="1" pos:column="55">const<pos:position pos:line="1" pos:column="60"/></specifier> <modifier pos:line="1" pos:column="61">*<pos:position pos:line="1" pos:column="62"/></modifier></type><name pos:line="1" pos:column="62">ci<pos:position pos:line="1" pos:column="64"/></name></decl></parameter>, <comment type="block" pos:line="1" pos:column="66">/* {{{ */</comment>
    <parameter><decl><type><name pos:line="2" pos:column="5">aggregation_t<pos:position pos:line="2" pos:column="18"/></name> <modifier pos:line="2" pos:column="19">*<pos:position pos:line="2" pos:column="20"/></modifier></type><name pos:line="2" pos:column="20">agg<pos:position pos:line="2" pos:column="23"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="24"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <for pos:line="4" pos:column="3">for <control pos:line="4" pos:column="7">(<init><decl><type><name pos:line="4" pos:column="8">int<pos:position pos:line="4" pos:column="11"/></name></type> <name pos:line="4" pos:column="12">i<pos:position pos:line="4" pos:column="13"/></name> <init pos:line="4" pos:column="14">= <expr><literal type="number" pos:line="4" pos:column="16">0<pos:position pos:line="4" pos:column="17"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="18"/></init> <condition><expr><name pos:line="4" pos:column="19">i<pos:position pos:line="4" pos:column="20"/></name> <operator pos:line="4" pos:column="21">&lt;<pos:position pos:line="4" pos:column="25"/></operator> <name><name pos:line="4" pos:column="23">ci<pos:position pos:line="4" pos:column="25"/></name><operator pos:line="4" pos:column="25">-&gt;<pos:position pos:line="4" pos:column="30"/></operator><name pos:line="4" pos:column="27">values_num<pos:position pos:line="4" pos:column="37"/></name></name></expr>;<pos:position pos:line="4" pos:column="38"/></condition> <incr><expr><name pos:line="4" pos:column="39">i<pos:position pos:line="4" pos:column="40"/></name><operator pos:line="4" pos:column="40">++<pos:position pos:line="4" pos:column="42"/></operator></expr></incr>)<pos:position pos:line="4" pos:column="43"/></control>
  <block pos:line="5" pos:column="3">{
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">char<pos:position pos:line="6" pos:column="9"/></name> <specifier pos:line="6" pos:column="10">const<pos:position pos:line="6" pos:column="15"/></specifier> <modifier pos:line="6" pos:column="16">*<pos:position pos:line="6" pos:column="17"/></modifier></type><name pos:line="6" pos:column="17">value<pos:position pos:line="6" pos:column="22"/></name></decl>;<pos:position pos:line="6" pos:column="23"/></decl_stmt>

    <if pos:line="8" pos:column="5">if <condition pos:line="8" pos:column="8">(<expr><name><name pos:line="8" pos:column="9">ci<pos:position pos:line="8" pos:column="11"/></name><operator pos:line="8" pos:column="11">-&gt;<pos:position pos:line="8" pos:column="16"/></operator><name pos:line="8" pos:column="13">values<pos:position pos:line="8" pos:column="19"/></name><index pos:line="8" pos:column="19">[<expr><name pos:line="8" pos:column="20">i<pos:position pos:line="8" pos:column="21"/></name></expr>]<pos:position pos:line="8" pos:column="22"/></index></name><operator pos:line="8" pos:column="22">.<pos:position pos:line="8" pos:column="23"/></operator><name pos:line="8" pos:column="23">type<pos:position pos:line="8" pos:column="27"/></name> <operator pos:line="8" pos:column="28">!=<pos:position pos:line="8" pos:column="30"/></operator> <name pos:line="8" pos:column="31">OCONFIG_TYPE_STRING<pos:position pos:line="8" pos:column="50"/></name></expr>)<pos:position pos:line="8" pos:column="51"/></condition><then pos:line="8" pos:column="51">
    <block pos:line="9" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="10" pos:column="7">ERROR<pos:position pos:line="10" pos:column="12"/></name> <argument_list pos:line="10" pos:column="13">(<argument><expr><literal type="string" pos:line="10" pos:column="14">"aggregation plugin: Argument %i of the \"GroupBy\" option "<pos:position pos:line="10" pos:column="74"/></literal>
          <literal type="string" pos:line="11" pos:column="11">"is not a string."<pos:position pos:line="11" pos:column="29"/></literal></expr></argument>, <argument><expr><name pos:line="11" pos:column="31">i<pos:position pos:line="11" pos:column="32"/></name> <operator pos:line="11" pos:column="33">+<pos:position pos:line="11" pos:column="34"/></operator> <literal type="number" pos:line="11" pos:column="35">1<pos:position pos:line="11" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="38"/></expr_stmt>
      <continue pos:line="12" pos:column="7">continue;<pos:position pos:line="12" pos:column="16"/></continue>
    }<pos:position pos:line="13" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="15" pos:column="5">value<pos:position pos:line="15" pos:column="10"/></name> <operator pos:line="15" pos:column="11">=<pos:position pos:line="15" pos:column="12"/></operator> <name><name pos:line="15" pos:column="13">ci<pos:position pos:line="15" pos:column="15"/></name><operator pos:line="15" pos:column="15">-&gt;<pos:position pos:line="15" pos:column="20"/></operator><name pos:line="15" pos:column="17">values<pos:position pos:line="15" pos:column="23"/></name><index pos:line="15" pos:column="23">[<expr><name pos:line="15" pos:column="24">i<pos:position pos:line="15" pos:column="25"/></name></expr>]<pos:position pos:line="15" pos:column="26"/></index></name><operator pos:line="15" pos:column="26">.<pos:position pos:line="15" pos:column="27"/></operator><name><name pos:line="15" pos:column="27">value<pos:position pos:line="15" pos:column="32"/></name><operator pos:line="15" pos:column="32">.<pos:position pos:line="15" pos:column="33"/></operator><name pos:line="15" pos:column="33">string<pos:position pos:line="15" pos:column="39"/></name></name></expr>;<pos:position pos:line="15" pos:column="40"/></expr_stmt>

    <if pos:line="17" pos:column="5">if <condition pos:line="17" pos:column="8">(<expr><call><name pos:line="17" pos:column="9">strcasecmp<pos:position pos:line="17" pos:column="19"/></name> <argument_list pos:line="17" pos:column="20">(<argument><expr><literal type="string" pos:line="17" pos:column="21">"Host"<pos:position pos:line="17" pos:column="27"/></literal></expr></argument>, <argument><expr><name pos:line="17" pos:column="29">value<pos:position pos:line="17" pos:column="34"/></name></expr></argument>)<pos:position pos:line="17" pos:column="35"/></argument_list></call> <operator pos:line="17" pos:column="36">==<pos:position pos:line="17" pos:column="38"/></operator> <literal type="number" pos:line="17" pos:column="39">0<pos:position pos:line="17" pos:column="40"/></literal></expr>)<pos:position pos:line="17" pos:column="41"/></condition><then pos:line="17" pos:column="41">
      <block type="pseudo"><expr_stmt><expr><name><name pos:line="18" pos:column="7">agg<pos:position pos:line="18" pos:column="10"/></name><operator pos:line="18" pos:column="10">-&gt;<pos:position pos:line="18" pos:column="15"/></operator><name pos:line="18" pos:column="12">group_by<pos:position pos:line="18" pos:column="20"/></name></name> <operator pos:line="18" pos:column="21">|=<pos:position pos:line="18" pos:column="23"/></operator> <name pos:line="18" pos:column="24">LU_GROUP_BY_HOST<pos:position pos:line="18" pos:column="40"/></name></expr>;<pos:position pos:line="18" pos:column="41"/></expr_stmt></block></then>
    <elseif pos:line="19" pos:column="5">else <if pos:line="19" pos:column="10">if <condition pos:line="19" pos:column="13">(<expr><call><name pos:line="19" pos:column="14">strcasecmp<pos:position pos:line="19" pos:column="24"/></name> <argument_list pos:line="19" pos:column="25">(<argument><expr><literal type="string" pos:line="19" pos:column="26">"Plugin"<pos:position pos:line="19" pos:column="34"/></literal></expr></argument>, <argument><expr><name pos:line="19" pos:column="36">value<pos:position pos:line="19" pos:column="41"/></name></expr></argument>)<pos:position pos:line="19" pos:column="42"/></argument_list></call> <operator pos:line="19" pos:column="43">==<pos:position pos:line="19" pos:column="45"/></operator> <literal type="number" pos:line="19" pos:column="46">0<pos:position pos:line="19" pos:column="47"/></literal></expr>)<pos:position pos:line="19" pos:column="48"/></condition><then pos:line="19" pos:column="48">
      <block type="pseudo"><expr_stmt><expr><name><name pos:line="20" pos:column="7">agg<pos:position pos:line="20" pos:column="10"/></name><operator pos:line="20" pos:column="10">-&gt;<pos:position pos:line="20" pos:column="15"/></operator><name pos:line="20" pos:column="12">group_by<pos:position pos:line="20" pos:column="20"/></name></name> <operator pos:line="20" pos:column="21">|=<pos:position pos:line="20" pos:column="23"/></operator> <name pos:line="20" pos:column="24">LU_GROUP_BY_PLUGIN<pos:position pos:line="20" pos:column="42"/></name></expr>;<pos:position pos:line="20" pos:column="43"/></expr_stmt></block></then></if></elseif>
    <elseif pos:line="21" pos:column="5">else <if pos:line="21" pos:column="10">if <condition pos:line="21" pos:column="13">(<expr><call><name pos:line="21" pos:column="14">strcasecmp<pos:position pos:line="21" pos:column="24"/></name> <argument_list pos:line="21" pos:column="25">(<argument><expr><literal type="string" pos:line="21" pos:column="26">"PluginInstance"<pos:position pos:line="21" pos:column="42"/></literal></expr></argument>, <argument><expr><name pos:line="21" pos:column="44">value<pos:position pos:line="21" pos:column="49"/></name></expr></argument>)<pos:position pos:line="21" pos:column="50"/></argument_list></call> <operator pos:line="21" pos:column="51">==<pos:position pos:line="21" pos:column="53"/></operator> <literal type="number" pos:line="21" pos:column="54">0<pos:position pos:line="21" pos:column="55"/></literal></expr>)<pos:position pos:line="21" pos:column="56"/></condition><then pos:line="21" pos:column="56">
      <block type="pseudo"><expr_stmt><expr><name><name pos:line="22" pos:column="7">agg<pos:position pos:line="22" pos:column="10"/></name><operator pos:line="22" pos:column="10">-&gt;<pos:position pos:line="22" pos:column="15"/></operator><name pos:line="22" pos:column="12">group_by<pos:position pos:line="22" pos:column="20"/></name></name> <operator pos:line="22" pos:column="21">|=<pos:position pos:line="22" pos:column="23"/></operator> <name pos:line="22" pos:column="24">LU_GROUP_BY_PLUGIN_INSTANCE<pos:position pos:line="22" pos:column="51"/></name></expr>;<pos:position pos:line="22" pos:column="52"/></expr_stmt></block></then></if></elseif>
    <elseif pos:line="23" pos:column="5">else <if pos:line="23" pos:column="10">if <condition pos:line="23" pos:column="13">(<expr><call><name pos:line="23" pos:column="14">strcasecmp<pos:position pos:line="23" pos:column="24"/></name> <argument_list pos:line="23" pos:column="25">(<argument><expr><literal type="string" pos:line="23" pos:column="26">"TypeInstance"<pos:position pos:line="23" pos:column="40"/></literal></expr></argument>, <argument><expr><name pos:line="23" pos:column="42">value<pos:position pos:line="23" pos:column="47"/></name></expr></argument>)<pos:position pos:line="23" pos:column="48"/></argument_list></call> <operator pos:line="23" pos:column="49">==<pos:position pos:line="23" pos:column="51"/></operator> <literal type="number" pos:line="23" pos:column="52">0<pos:position pos:line="23" pos:column="53"/></literal></expr>)<pos:position pos:line="23" pos:column="54"/></condition><then pos:line="23" pos:column="54">
      <block type="pseudo"><expr_stmt><expr><name><name pos:line="24" pos:column="7">agg<pos:position pos:line="24" pos:column="10"/></name><operator pos:line="24" pos:column="10">-&gt;<pos:position pos:line="24" pos:column="15"/></operator><name pos:line="24" pos:column="12">group_by<pos:position pos:line="24" pos:column="20"/></name></name> <operator pos:line="24" pos:column="21">|=<pos:position pos:line="24" pos:column="23"/></operator> <name pos:line="24" pos:column="24">LU_GROUP_BY_TYPE_INSTANCE<pos:position pos:line="24" pos:column="49"/></name></expr>;<pos:position pos:line="24" pos:column="50"/></expr_stmt></block></then></if></elseif>
    <elseif pos:line="25" pos:column="5">else <if pos:line="25" pos:column="10">if <condition pos:line="25" pos:column="13">(<expr><call><name pos:line="25" pos:column="14">strcasecmp<pos:position pos:line="25" pos:column="24"/></name> <argument_list pos:line="25" pos:column="25">(<argument><expr><literal type="string" pos:line="25" pos:column="26">"Type"<pos:position pos:line="25" pos:column="32"/></literal></expr></argument>, <argument><expr><name pos:line="25" pos:column="34">value<pos:position pos:line="25" pos:column="39"/></name></expr></argument>)<pos:position pos:line="25" pos:column="40"/></argument_list></call> <operator pos:line="25" pos:column="41">==<pos:position pos:line="25" pos:column="43"/></operator> <literal type="number" pos:line="25" pos:column="44">0<pos:position pos:line="25" pos:column="45"/></literal></expr>)<pos:position pos:line="25" pos:column="46"/></condition><then pos:line="25" pos:column="46">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="26" pos:column="7">ERROR<pos:position pos:line="26" pos:column="12"/></name> <argument_list pos:line="26" pos:column="13">(<argument><expr><literal type="string" pos:line="26" pos:column="14">"aggregation plugin: Grouping by type is not supported."<pos:position pos:line="26" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="72"/></expr_stmt></block></then></if></elseif>
    <else pos:line="27" pos:column="5">else
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="28" pos:column="7">WARNING<pos:position pos:line="28" pos:column="14"/></name> <argument_list pos:line="28" pos:column="15">(<argument><expr><literal type="string" pos:line="28" pos:column="16">"aggregation plugin: The \"%s\" argument to the \"GroupBy\" "<pos:position pos:line="28" pos:column="77"/></literal>
          <literal type="string" pos:line="29" pos:column="11">"option is invalid and will be ignored."<pos:position pos:line="29" pos:column="51"/></literal></expr></argument>, <argument><expr><name pos:line="29" pos:column="53">value<pos:position pos:line="29" pos:column="58"/></name></expr></argument>)<pos:position pos:line="29" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="60"/></expr_stmt></block></else></if>
  }<pos:position pos:line="30" pos:column="4"/></block></for> <comment type="block" pos:line="30" pos:column="5">/* for (ci-&gt;values) */</comment>

  <return pos:line="32" pos:column="3">return <expr><operator pos:line="32" pos:column="10">(<pos:position pos:line="32" pos:column="11"/></operator><literal type="number" pos:line="32" pos:column="11">0<pos:position pos:line="32" pos:column="12"/></literal><operator pos:line="32" pos:column="12">)<pos:position pos:line="32" pos:column="13"/></operator></expr>;<pos:position pos:line="32" pos:column="14"/></return>
}<pos:position pos:line="33" pos:column="2"/></block></function></unit>
