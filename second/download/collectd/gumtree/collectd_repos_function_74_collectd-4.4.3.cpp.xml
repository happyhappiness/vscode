<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_74_collectd-4.4.3.cpp" pos:tabs="8"><decl_stmt><decl><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type>
<name pos:line="2" pos:column="1">lt_argz_insertinorder<pos:position pos:line="2" pos:column="22"/></name> <argument_list pos:line="2" pos:column="23">(<argument><expr><name pos:line="2" pos:column="24">pargz<pos:position pos:line="2" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="2" pos:column="31">pargz_len<pos:position pos:line="2" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="2" pos:column="42">entry<pos:position pos:line="2" pos:column="47"/></name></expr></argument>)<pos:position pos:line="2" pos:column="48"/></argument_list>
     <name pos:line="3" pos:column="6">char<pos:position pos:line="3" pos:column="10"/></name> <modifier pos:line="3" pos:column="11">*<pos:position pos:line="3" pos:column="12"/></modifier><modifier pos:line="3" pos:column="12">*<pos:position pos:line="3" pos:column="13"/></modifier><name pos:line="3" pos:column="13">pargz<pos:position pos:line="3" pos:column="18"/></name></decl>;<pos:position pos:line="3" pos:column="19"/></decl_stmt>
     <decl_stmt><decl><type><name pos:line="4" pos:column="6">size_t<pos:position pos:line="4" pos:column="12"/></name> <modifier pos:line="4" pos:column="13">*<pos:position pos:line="4" pos:column="14"/></modifier></type><name pos:line="4" pos:column="14">pargz_len<pos:position pos:line="4" pos:column="23"/></name></decl>;<pos:position pos:line="4" pos:column="24"/></decl_stmt>
     <decl_stmt><decl><type><specifier pos:line="5" pos:column="6">const<pos:position pos:line="5" pos:column="11"/></specifier> <name pos:line="5" pos:column="12">char<pos:position pos:line="5" pos:column="16"/></name> <modifier pos:line="5" pos:column="17">*<pos:position pos:line="5" pos:column="18"/></modifier></type><name pos:line="5" pos:column="18">entry<pos:position pos:line="5" pos:column="23"/></name></decl>;<pos:position pos:line="5" pos:column="24"/></decl_stmt>
<block pos:line="6" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">char<pos:position pos:line="7" pos:column="7"/></name> <modifier pos:line="7" pos:column="8">*<pos:position pos:line="7" pos:column="9"/></modifier></type><name pos:line="7" pos:column="9">before<pos:position pos:line="7" pos:column="15"/></name> <init pos:line="7" pos:column="16">= <expr><literal type="number" pos:line="7" pos:column="18">0<pos:position pos:line="7" pos:column="19"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="20"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="9" pos:column="3">assert<pos:position pos:line="9" pos:column="9"/></name> <argument_list pos:line="9" pos:column="10">(<argument><expr><name pos:line="9" pos:column="11">pargz<pos:position pos:line="9" pos:column="16"/></name></expr></argument>)<pos:position pos:line="9" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="18"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="10" pos:column="3">assert<pos:position pos:line="10" pos:column="9"/></name> <argument_list pos:line="10" pos:column="10">(<argument><expr><name pos:line="10" pos:column="11">pargz_len<pos:position pos:line="10" pos:column="20"/></name></expr></argument>)<pos:position pos:line="10" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="22"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="11" pos:column="3">assert<pos:position pos:line="11" pos:column="9"/></name> <argument_list pos:line="11" pos:column="10">(<argument><expr><name pos:line="11" pos:column="11">entry<pos:position pos:line="11" pos:column="16"/></name> <operator pos:line="11" pos:column="17">&amp;&amp;<pos:position pos:line="11" pos:column="27"/></operator> <operator pos:line="11" pos:column="20">*<pos:position pos:line="11" pos:column="21"/></operator><name pos:line="11" pos:column="21">entry<pos:position pos:line="11" pos:column="26"/></name></expr></argument>)<pos:position pos:line="11" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="28"/></expr_stmt>

  <if pos:line="13" pos:column="3">if <condition pos:line="13" pos:column="6">(<expr><operator pos:line="13" pos:column="7">*<pos:position pos:line="13" pos:column="8"/></operator><name pos:line="13" pos:column="8">pargz<pos:position pos:line="13" pos:column="13"/></name></expr>)<pos:position pos:line="13" pos:column="14"/></condition><then pos:line="13" pos:column="14">
    <block type="pseudo"><while pos:line="14" pos:column="5">while <condition pos:line="14" pos:column="11">(<expr><operator pos:line="14" pos:column="12">(<pos:position pos:line="14" pos:column="13"/></operator><name pos:line="14" pos:column="13">before<pos:position pos:line="14" pos:column="19"/></name> <operator pos:line="14" pos:column="20">=<pos:position pos:line="14" pos:column="21"/></operator> <call><name pos:line="14" pos:column="22">argz_next<pos:position pos:line="14" pos:column="31"/></name> <argument_list pos:line="14" pos:column="32">(<argument><expr><operator pos:line="14" pos:column="33">*<pos:position pos:line="14" pos:column="34"/></operator><name pos:line="14" pos:column="34">pargz<pos:position pos:line="14" pos:column="39"/></name></expr></argument>, <argument><expr><operator pos:line="14" pos:column="41">*<pos:position pos:line="14" pos:column="42"/></operator><name pos:line="14" pos:column="42">pargz_len<pos:position pos:line="14" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="53">before<pos:position pos:line="14" pos:column="59"/></name></expr></argument>)<pos:position pos:line="14" pos:column="60"/></argument_list></call><operator pos:line="14" pos:column="60">)<pos:position pos:line="14" pos:column="61"/></operator></expr>)<pos:position pos:line="14" pos:column="62"/></condition>
      <block pos:line="15" pos:column="7">{
	<decl_stmt><decl><type><name pos:line="16" pos:column="9">int<pos:position pos:line="16" pos:column="12"/></name></type> <name pos:line="16" pos:column="13">cmp<pos:position pos:line="16" pos:column="16"/></name> <init pos:line="16" pos:column="17">= <expr><call><name pos:line="16" pos:column="19">strcmp<pos:position pos:line="16" pos:column="25"/></name> <argument_list pos:line="16" pos:column="26">(<argument><expr><name pos:line="16" pos:column="27">entry<pos:position pos:line="16" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="34">before<pos:position pos:line="16" pos:column="40"/></name></expr></argument>)<pos:position pos:line="16" pos:column="41"/></argument_list></call></expr></init></decl>;<pos:position pos:line="16" pos:column="42"/></decl_stmt>

	<if pos:line="18" pos:column="9">if <condition pos:line="18" pos:column="12">(<expr><name pos:line="18" pos:column="13">cmp<pos:position pos:line="18" pos:column="16"/></name> <operator pos:line="18" pos:column="17">&lt;<pos:position pos:line="18" pos:column="21"/></operator> <literal type="number" pos:line="18" pos:column="19">0<pos:position pos:line="18" pos:column="20"/></literal></expr>)<pos:position pos:line="18" pos:column="21"/></condition><then pos:line="18" pos:column="21">  <block type="pseudo"><break pos:line="18" pos:column="23">break;<pos:position pos:line="18" pos:column="29"/></break></block></then></if>
	<if pos:line="19" pos:column="9">if <condition pos:line="19" pos:column="12">(<expr><name pos:line="19" pos:column="13">cmp<pos:position pos:line="19" pos:column="16"/></name> <operator pos:line="19" pos:column="17">==<pos:position pos:line="19" pos:column="19"/></operator> <literal type="number" pos:line="19" pos:column="20">0<pos:position pos:line="19" pos:column="21"/></literal></expr>)<pos:position pos:line="19" pos:column="22"/></condition><then pos:line="19" pos:column="22"> <block type="pseudo"><return pos:line="19" pos:column="23">return <expr><literal type="number" pos:line="19" pos:column="30">0<pos:position pos:line="19" pos:column="31"/></literal></expr>;<pos:position pos:line="19" pos:column="32"/></return></block></then></if>	<comment type="block" pos:line="19" pos:column="33">/* No duplicates! */</comment>
      }<pos:position pos:line="20" pos:column="8"/></block></while></block></then></if>

  <return pos:line="22" pos:column="3">return <expr><call><name pos:line="22" pos:column="10">lt_argz_insert<pos:position pos:line="22" pos:column="24"/></name> <argument_list pos:line="22" pos:column="25">(<argument><expr><name pos:line="22" pos:column="26">pargz<pos:position pos:line="22" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="33">pargz_len<pos:position pos:line="22" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="44">before<pos:position pos:line="22" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="52">entry<pos:position pos:line="22" pos:column="57"/></name></expr></argument>)<pos:position pos:line="22" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="59"/></return>
}<pos:position pos:line="23" pos:column="2"/></block></unit>
