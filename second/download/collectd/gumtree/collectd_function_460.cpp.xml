<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_function_460.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">cmd_status_t<pos:position pos:line="1" pos:column="13"/></name></type> <name pos:line="1" pos:column="14">cmd_parse_putval<pos:position pos:line="1" pos:column="30"/></name><parameter_list pos:line="1" pos:column="30">(<parameter><decl><type><name pos:line="1" pos:column="31">size_t<pos:position pos:line="1" pos:column="37"/></name></type> <name pos:line="1" pos:column="38">argc<pos:position pos:line="1" pos:column="42"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="44">char<pos:position pos:line="1" pos:column="48"/></name> <modifier pos:line="1" pos:column="49">*<pos:position pos:line="1" pos:column="50"/></modifier><modifier pos:line="1" pos:column="50">*<pos:position pos:line="1" pos:column="51"/></modifier></type><name pos:line="1" pos:column="51">argv<pos:position pos:line="1" pos:column="55"/></name></decl></parameter>,
                              <parameter><decl><type><name pos:line="2" pos:column="31">cmd_putval_t<pos:position pos:line="2" pos:column="43"/></name> <modifier pos:line="2" pos:column="44">*<pos:position pos:line="2" pos:column="45"/></modifier></type><name pos:line="2" pos:column="45">ret_putval<pos:position pos:line="2" pos:column="55"/></name></decl></parameter>,
                              <parameter><decl><type><specifier pos:line="3" pos:column="31">const<pos:position pos:line="3" pos:column="36"/></specifier> <name pos:line="3" pos:column="37">cmd_options_t<pos:position pos:line="3" pos:column="50"/></name> <modifier pos:line="3" pos:column="51">*<pos:position pos:line="3" pos:column="52"/></modifier></type><name pos:line="3" pos:column="52">opts<pos:position pos:line="3" pos:column="56"/></name></decl></parameter>,
                              <parameter><decl><type><name pos:line="4" pos:column="31">cmd_error_handler_t<pos:position pos:line="4" pos:column="50"/></name> <modifier pos:line="4" pos:column="51">*<pos:position pos:line="4" pos:column="52"/></modifier></type><name pos:line="4" pos:column="52">err<pos:position pos:line="4" pos:column="55"/></name></decl></parameter>)<pos:position pos:line="4" pos:column="56"/></parameter_list> <block pos:line="4" pos:column="57">{
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">cmd_status_t<pos:position pos:line="5" pos:column="15"/></name></type> <name pos:line="5" pos:column="16">result<pos:position pos:line="5" pos:column="22"/></name></decl>;<pos:position pos:line="5" pos:column="23"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="7" pos:column="3">char<pos:position pos:line="7" pos:column="7"/></name> <modifier pos:line="7" pos:column="8">*<pos:position pos:line="7" pos:column="9"/></modifier></type><name pos:line="7" pos:column="9">identifier<pos:position pos:line="7" pos:column="19"/></name></decl>;<pos:position pos:line="7" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">char<pos:position pos:line="8" pos:column="7"/></name> <modifier pos:line="8" pos:column="8">*<pos:position pos:line="8" pos:column="9"/></modifier></type><name pos:line="8" pos:column="9">hostname<pos:position pos:line="8" pos:column="17"/></name></decl>;<pos:position pos:line="8" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">char<pos:position pos:line="9" pos:column="7"/></name> <modifier pos:line="9" pos:column="8">*<pos:position pos:line="9" pos:column="9"/></modifier></type><name pos:line="9" pos:column="9">plugin<pos:position pos:line="9" pos:column="15"/></name></decl>;<pos:position pos:line="9" pos:column="16"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">char<pos:position pos:line="10" pos:column="7"/></name> <modifier pos:line="10" pos:column="8">*<pos:position pos:line="10" pos:column="9"/></modifier></type><name pos:line="10" pos:column="9">plugin_instance<pos:position pos:line="10" pos:column="24"/></name></decl>;<pos:position pos:line="10" pos:column="25"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="11" pos:column="3">char<pos:position pos:line="11" pos:column="7"/></name> <modifier pos:line="11" pos:column="8">*<pos:position pos:line="11" pos:column="9"/></modifier></type><name pos:line="11" pos:column="9">type<pos:position pos:line="11" pos:column="13"/></name></decl>;<pos:position pos:line="11" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="12" pos:column="3">char<pos:position pos:line="12" pos:column="7"/></name> <modifier pos:line="12" pos:column="8">*<pos:position pos:line="12" pos:column="9"/></modifier></type><name pos:line="12" pos:column="9">type_instance<pos:position pos:line="12" pos:column="22"/></name></decl>;<pos:position pos:line="12" pos:column="23"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="13" pos:column="3">int<pos:position pos:line="13" pos:column="6"/></name></type> <name pos:line="13" pos:column="7">status<pos:position pos:line="13" pos:column="13"/></name></decl>;<pos:position pos:line="13" pos:column="14"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="15" pos:column="3">char<pos:position pos:line="15" pos:column="7"/></name> <modifier pos:line="15" pos:column="8">*<pos:position pos:line="15" pos:column="9"/></modifier></type><name pos:line="15" pos:column="9">identifier_copy<pos:position pos:line="15" pos:column="24"/></name></decl>;<pos:position pos:line="15" pos:column="25"/></decl_stmt>

  <decl_stmt><decl><type><specifier pos:line="17" pos:column="3">const<pos:position pos:line="17" pos:column="8"/></specifier> <name pos:line="17" pos:column="9">data_set_t<pos:position pos:line="17" pos:column="19"/></name> <modifier pos:line="17" pos:column="20">*<pos:position pos:line="17" pos:column="21"/></modifier></type><name pos:line="17" pos:column="21">ds<pos:position pos:line="17" pos:column="23"/></name></decl>;<pos:position pos:line="17" pos:column="24"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="18" pos:column="3">value_list_t<pos:position pos:line="18" pos:column="15"/></name></type> <name pos:line="18" pos:column="16">vl<pos:position pos:line="18" pos:column="18"/></name> <init pos:line="18" pos:column="19">= <expr><name pos:line="18" pos:column="21">VALUE_LIST_INIT<pos:position pos:line="18" pos:column="36"/></name></expr></init></decl>;<pos:position pos:line="18" pos:column="37"/></decl_stmt>

  <if pos:line="20" pos:column="3">if <condition pos:line="20" pos:column="6">(<expr><operator pos:line="20" pos:column="7">(<pos:position pos:line="20" pos:column="8"/></operator><name pos:line="20" pos:column="8">ret_putval<pos:position pos:line="20" pos:column="18"/></name> <operator pos:line="20" pos:column="19">==<pos:position pos:line="20" pos:column="21"/></operator> <name pos:line="20" pos:column="22">NULL<pos:position pos:line="20" pos:column="26"/></name><operator pos:line="20" pos:column="26">)<pos:position pos:line="20" pos:column="27"/></operator> <operator pos:line="20" pos:column="28">||<pos:position pos:line="20" pos:column="30"/></operator> <operator pos:line="20" pos:column="31">(<pos:position pos:line="20" pos:column="32"/></operator><name pos:line="20" pos:column="32">opts<pos:position pos:line="20" pos:column="36"/></name> <operator pos:line="20" pos:column="37">==<pos:position pos:line="20" pos:column="39"/></operator> <name pos:line="20" pos:column="40">NULL<pos:position pos:line="20" pos:column="44"/></name><operator pos:line="20" pos:column="44">)<pos:position pos:line="20" pos:column="45"/></operator></expr>)<pos:position pos:line="20" pos:column="46"/></condition><then pos:line="20" pos:column="46"> <block pos:line="20" pos:column="47">{
    <expr_stmt><expr><name pos:line="21" pos:column="5">errno<pos:position pos:line="21" pos:column="10"/></name> <operator pos:line="21" pos:column="11">=<pos:position pos:line="21" pos:column="12"/></operator> <name pos:line="21" pos:column="13">EINVAL<pos:position pos:line="21" pos:column="19"/></name></expr>;<pos:position pos:line="21" pos:column="20"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="22" pos:column="5">cmd_error<pos:position pos:line="22" pos:column="14"/></name><argument_list pos:line="22" pos:column="14">(<argument><expr><name pos:line="22" pos:column="15">CMD_ERROR<pos:position pos:line="22" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="26">err<pos:position pos:line="22" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="22" pos:column="31">"Invalid arguments to cmd_parse_putval."<pos:position pos:line="22" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="73"/></expr_stmt>
    <return pos:line="23" pos:column="5">return <expr><operator pos:line="23" pos:column="12">(<pos:position pos:line="23" pos:column="13"/></operator><name pos:line="23" pos:column="13">CMD_ERROR<pos:position pos:line="23" pos:column="22"/></name><operator pos:line="23" pos:column="22">)<pos:position pos:line="23" pos:column="23"/></operator></expr>;<pos:position pos:line="23" pos:column="24"/></return>
  }<pos:position pos:line="24" pos:column="4"/></block></then></if>

  <if pos:line="26" pos:column="3">if <condition pos:line="26" pos:column="6">(<expr><name pos:line="26" pos:column="7">argc<pos:position pos:line="26" pos:column="11"/></name> <operator pos:line="26" pos:column="12">&lt;<pos:position pos:line="26" pos:column="16"/></operator> <literal type="number" pos:line="26" pos:column="14">2<pos:position pos:line="26" pos:column="15"/></literal></expr>)<pos:position pos:line="26" pos:column="16"/></condition><then pos:line="26" pos:column="16"> <block pos:line="26" pos:column="17">{
    <expr_stmt><expr><call><name pos:line="27" pos:column="5">cmd_error<pos:position pos:line="27" pos:column="14"/></name><argument_list pos:line="27" pos:column="14">(<argument><expr><name pos:line="27" pos:column="15">CMD_PARSE_ERROR<pos:position pos:line="27" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="32">err<pos:position pos:line="27" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="27" pos:column="37">"Missing identifier and/or value-list."<pos:position pos:line="27" pos:column="76"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="78"/></expr_stmt>
    <return pos:line="28" pos:column="5">return <expr><operator pos:line="28" pos:column="12">(<pos:position pos:line="28" pos:column="13"/></operator><name pos:line="28" pos:column="13">CMD_PARSE_ERROR<pos:position pos:line="28" pos:column="28"/></name><operator pos:line="28" pos:column="28">)<pos:position pos:line="28" pos:column="29"/></operator></expr>;<pos:position pos:line="28" pos:column="30"/></return>
  }<pos:position pos:line="29" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="31" pos:column="3">identifier<pos:position pos:line="31" pos:column="13"/></name> <operator pos:line="31" pos:column="14">=<pos:position pos:line="31" pos:column="15"/></operator> <name><name pos:line="31" pos:column="16">argv<pos:position pos:line="31" pos:column="20"/></name><index pos:line="31" pos:column="20">[<expr><literal type="number" pos:line="31" pos:column="21">0<pos:position pos:line="31" pos:column="22"/></literal></expr>]<pos:position pos:line="31" pos:column="23"/></index></name></expr>;<pos:position pos:line="31" pos:column="24"/></expr_stmt>

  <comment type="block" pos:line="33" pos:column="3">/* parse_identifier() modifies its first argument, returning pointers into
   * it; retain the old value for later. */</comment>
  <expr_stmt><expr><name pos:line="35" pos:column="3">identifier_copy<pos:position pos:line="35" pos:column="18"/></name> <operator pos:line="35" pos:column="19">=<pos:position pos:line="35" pos:column="20"/></operator> <call><name pos:line="35" pos:column="21">sstrdup<pos:position pos:line="35" pos:column="28"/></name><argument_list pos:line="35" pos:column="28">(<argument><expr><name pos:line="35" pos:column="29">identifier<pos:position pos:line="35" pos:column="39"/></name></expr></argument>)<pos:position pos:line="35" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="41"/></expr_stmt>

  <expr_stmt><expr><name pos:line="37" pos:column="3">status<pos:position pos:line="37" pos:column="9"/></name> <operator pos:line="37" pos:column="10">=<pos:position pos:line="37" pos:column="11"/></operator>
      <call><name pos:line="38" pos:column="7">parse_identifier<pos:position pos:line="38" pos:column="23"/></name><argument_list pos:line="38" pos:column="23">(<argument><expr><name pos:line="38" pos:column="24">identifier<pos:position pos:line="38" pos:column="34"/></name></expr></argument>, <argument><expr><operator pos:line="38" pos:column="36">&amp;<pos:position pos:line="38" pos:column="41"/></operator><name pos:line="38" pos:column="37">hostname<pos:position pos:line="38" pos:column="45"/></name></expr></argument>, <argument><expr><operator pos:line="38" pos:column="47">&amp;<pos:position pos:line="38" pos:column="52"/></operator><name pos:line="38" pos:column="48">plugin<pos:position pos:line="38" pos:column="54"/></name></expr></argument>, <argument><expr><operator pos:line="38" pos:column="56">&amp;<pos:position pos:line="38" pos:column="61"/></operator><name pos:line="38" pos:column="57">plugin_instance<pos:position pos:line="38" pos:column="72"/></name></expr></argument>, <argument><expr><operator pos:line="38" pos:column="74">&amp;<pos:position pos:line="38" pos:column="79"/></operator><name pos:line="38" pos:column="75">type<pos:position pos:line="38" pos:column="79"/></name></expr></argument>,
                       <argument><expr><operator pos:line="39" pos:column="24">&amp;<pos:position pos:line="39" pos:column="29"/></operator><name pos:line="39" pos:column="25">type_instance<pos:position pos:line="39" pos:column="38"/></name></expr></argument>, <argument><expr><name><name pos:line="39" pos:column="40">opts<pos:position pos:line="39" pos:column="44"/></name><operator pos:line="39" pos:column="44">-&gt;<pos:position pos:line="39" pos:column="49"/></operator><name pos:line="39" pos:column="46">identifier_default_host<pos:position pos:line="39" pos:column="69"/></name></name></expr></argument>)<pos:position pos:line="39" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="71"/></expr_stmt>
  <if pos:line="40" pos:column="3">if <condition pos:line="40" pos:column="6">(<expr><name pos:line="40" pos:column="7">status<pos:position pos:line="40" pos:column="13"/></name> <operator pos:line="40" pos:column="14">!=<pos:position pos:line="40" pos:column="16"/></operator> <literal type="number" pos:line="40" pos:column="17">0<pos:position pos:line="40" pos:column="18"/></literal></expr>)<pos:position pos:line="40" pos:column="19"/></condition><then pos:line="40" pos:column="19"> <block pos:line="40" pos:column="20">{
    <expr_stmt><expr><call><name pos:line="41" pos:column="5">DEBUG<pos:position pos:line="41" pos:column="10"/></name><argument_list pos:line="41" pos:column="10">(<argument><expr><literal type="string" pos:line="41" pos:column="11">"cmd_handle_putval: Cannot parse identifier `%s'."<pos:position pos:line="41" pos:column="61"/></literal></expr></argument>, <argument><expr><name pos:line="41" pos:column="63">identifier_copy<pos:position pos:line="41" pos:column="78"/></name></expr></argument>)<pos:position pos:line="41" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="80"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="42" pos:column="5">cmd_error<pos:position pos:line="42" pos:column="14"/></name><argument_list pos:line="42" pos:column="14">(<argument><expr><name pos:line="42" pos:column="15">CMD_PARSE_ERROR<pos:position pos:line="42" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="32">err<pos:position pos:line="42" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="42" pos:column="37">"Cannot parse identifier `%s'."<pos:position pos:line="42" pos:column="68"/></literal></expr></argument>,
              <argument><expr><name pos:line="43" pos:column="15">identifier_copy<pos:position pos:line="43" pos:column="30"/></name></expr></argument>)<pos:position pos:line="43" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="32"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="44" pos:column="5">sfree<pos:position pos:line="44" pos:column="10"/></name><argument_list pos:line="44" pos:column="10">(<argument><expr><name pos:line="44" pos:column="11">identifier_copy<pos:position pos:line="44" pos:column="26"/></name></expr></argument>)<pos:position pos:line="44" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="28"/></expr_stmt>
    <return pos:line="45" pos:column="5">return <expr><operator pos:line="45" pos:column="12">(<pos:position pos:line="45" pos:column="13"/></operator><name pos:line="45" pos:column="13">CMD_PARSE_ERROR<pos:position pos:line="45" pos:column="28"/></name><operator pos:line="45" pos:column="28">)<pos:position pos:line="45" pos:column="29"/></operator></expr>;<pos:position pos:line="45" pos:column="30"/></return>
  }<pos:position pos:line="46" pos:column="4"/></block></then></if>

  <if pos:line="48" pos:column="3">if <condition pos:line="48" pos:column="6">(<expr><operator pos:line="48" pos:column="7">(<pos:position pos:line="48" pos:column="8"/></operator><call><name pos:line="48" pos:column="8">strlen<pos:position pos:line="48" pos:column="14"/></name><argument_list pos:line="48" pos:column="14">(<argument><expr><name pos:line="48" pos:column="15">hostname<pos:position pos:line="48" pos:column="23"/></name></expr></argument>)<pos:position pos:line="48" pos:column="24"/></argument_list></call> <operator pos:line="48" pos:column="25">&gt;=<pos:position pos:line="48" pos:column="30"/></operator> <sizeof pos:line="48" pos:column="28">sizeof<argument_list pos:line="48" pos:column="34">(<argument><expr><name><name pos:line="48" pos:column="35">vl<pos:position pos:line="48" pos:column="37"/></name><operator pos:line="48" pos:column="37">.<pos:position pos:line="48" pos:column="38"/></operator><name pos:line="48" pos:column="38">host<pos:position pos:line="48" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="48" pos:column="43"/></argument_list></sizeof><operator pos:line="48" pos:column="43">)<pos:position pos:line="48" pos:column="44"/></operator> <operator pos:line="48" pos:column="45">||<pos:position pos:line="48" pos:column="47"/></operator>
      <operator pos:line="49" pos:column="7">(<pos:position pos:line="49" pos:column="8"/></operator><call><name pos:line="49" pos:column="8">strlen<pos:position pos:line="49" pos:column="14"/></name><argument_list pos:line="49" pos:column="14">(<argument><expr><name pos:line="49" pos:column="15">plugin<pos:position pos:line="49" pos:column="21"/></name></expr></argument>)<pos:position pos:line="49" pos:column="22"/></argument_list></call> <operator pos:line="49" pos:column="23">&gt;=<pos:position pos:line="49" pos:column="28"/></operator> <sizeof pos:line="49" pos:column="26">sizeof<argument_list pos:line="49" pos:column="32">(<argument><expr><name><name pos:line="49" pos:column="33">vl<pos:position pos:line="49" pos:column="35"/></name><operator pos:line="49" pos:column="35">.<pos:position pos:line="49" pos:column="36"/></operator><name pos:line="49" pos:column="36">plugin<pos:position pos:line="49" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="49" pos:column="43"/></argument_list></sizeof><operator pos:line="49" pos:column="43">)<pos:position pos:line="49" pos:column="44"/></operator> <operator pos:line="49" pos:column="45">||<pos:position pos:line="49" pos:column="47"/></operator>
      <operator pos:line="50" pos:column="7">(<pos:position pos:line="50" pos:column="8"/></operator><operator pos:line="50" pos:column="8">(<pos:position pos:line="50" pos:column="9"/></operator><name pos:line="50" pos:column="9">plugin_instance<pos:position pos:line="50" pos:column="24"/></name> <operator pos:line="50" pos:column="25">!=<pos:position pos:line="50" pos:column="27"/></operator> <name pos:line="50" pos:column="28">NULL<pos:position pos:line="50" pos:column="32"/></name><operator pos:line="50" pos:column="32">)<pos:position pos:line="50" pos:column="33"/></operator> <operator pos:line="50" pos:column="34">&amp;&amp;<pos:position pos:line="50" pos:column="44"/></operator>
       <operator pos:line="51" pos:column="8">(<pos:position pos:line="51" pos:column="9"/></operator><call><name pos:line="51" pos:column="9">strlen<pos:position pos:line="51" pos:column="15"/></name><argument_list pos:line="51" pos:column="15">(<argument><expr><name pos:line="51" pos:column="16">plugin_instance<pos:position pos:line="51" pos:column="31"/></name></expr></argument>)<pos:position pos:line="51" pos:column="32"/></argument_list></call> <operator pos:line="51" pos:column="33">&gt;=<pos:position pos:line="51" pos:column="38"/></operator> <sizeof pos:line="51" pos:column="36">sizeof<argument_list pos:line="51" pos:column="42">(<argument><expr><name><name pos:line="51" pos:column="43">vl<pos:position pos:line="51" pos:column="45"/></name><operator pos:line="51" pos:column="45">.<pos:position pos:line="51" pos:column="46"/></operator><name pos:line="51" pos:column="46">plugin_instance<pos:position pos:line="51" pos:column="61"/></name></name></expr></argument>)<pos:position pos:line="51" pos:column="62"/></argument_list></sizeof><operator pos:line="51" pos:column="62">)<pos:position pos:line="51" pos:column="63"/></operator><operator pos:line="51" pos:column="63">)<pos:position pos:line="51" pos:column="64"/></operator> <operator pos:line="51" pos:column="65">||<pos:position pos:line="51" pos:column="67"/></operator>
      <operator pos:line="52" pos:column="7">(<pos:position pos:line="52" pos:column="8"/></operator><operator pos:line="52" pos:column="8">(<pos:position pos:line="52" pos:column="9"/></operator><name pos:line="52" pos:column="9">type_instance<pos:position pos:line="52" pos:column="22"/></name> <operator pos:line="52" pos:column="23">!=<pos:position pos:line="52" pos:column="25"/></operator> <name pos:line="52" pos:column="26">NULL<pos:position pos:line="52" pos:column="30"/></name><operator pos:line="52" pos:column="30">)<pos:position pos:line="52" pos:column="31"/></operator> <operator pos:line="52" pos:column="32">&amp;&amp;<pos:position pos:line="52" pos:column="42"/></operator>
       <operator pos:line="53" pos:column="8">(<pos:position pos:line="53" pos:column="9"/></operator><call><name pos:line="53" pos:column="9">strlen<pos:position pos:line="53" pos:column="15"/></name><argument_list pos:line="53" pos:column="15">(<argument><expr><name pos:line="53" pos:column="16">type_instance<pos:position pos:line="53" pos:column="29"/></name></expr></argument>)<pos:position pos:line="53" pos:column="30"/></argument_list></call> <operator pos:line="53" pos:column="31">&gt;=<pos:position pos:line="53" pos:column="36"/></operator> <sizeof pos:line="53" pos:column="34">sizeof<argument_list pos:line="53" pos:column="40">(<argument><expr><name><name pos:line="53" pos:column="41">vl<pos:position pos:line="53" pos:column="43"/></name><operator pos:line="53" pos:column="43">.<pos:position pos:line="53" pos:column="44"/></operator><name pos:line="53" pos:column="44">type_instance<pos:position pos:line="53" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="53" pos:column="58"/></argument_list></sizeof><operator pos:line="53" pos:column="58">)<pos:position pos:line="53" pos:column="59"/></operator><operator pos:line="53" pos:column="59">)<pos:position pos:line="53" pos:column="60"/></operator></expr>)<pos:position pos:line="53" pos:column="61"/></condition><then pos:line="53" pos:column="61"> <block pos:line="53" pos:column="62">{
    <expr_stmt><expr><call><name pos:line="54" pos:column="5">cmd_error<pos:position pos:line="54" pos:column="14"/></name><argument_list pos:line="54" pos:column="14">(<argument><expr><name pos:line="54" pos:column="15">CMD_PARSE_ERROR<pos:position pos:line="54" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="32">err<pos:position pos:line="54" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="54" pos:column="37">"Identifier too long."<pos:position pos:line="54" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="54" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="61"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="55" pos:column="5">sfree<pos:position pos:line="55" pos:column="10"/></name><argument_list pos:line="55" pos:column="10">(<argument><expr><name pos:line="55" pos:column="11">identifier_copy<pos:position pos:line="55" pos:column="26"/></name></expr></argument>)<pos:position pos:line="55" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="28"/></expr_stmt>
    <return pos:line="56" pos:column="5">return <expr><operator pos:line="56" pos:column="12">(<pos:position pos:line="56" pos:column="13"/></operator><name pos:line="56" pos:column="13">CMD_PARSE_ERROR<pos:position pos:line="56" pos:column="28"/></name><operator pos:line="56" pos:column="28">)<pos:position pos:line="56" pos:column="29"/></operator></expr>;<pos:position pos:line="56" pos:column="30"/></return>
  }<pos:position pos:line="57" pos:column="4"/></block></then></if>

  <expr_stmt><expr><call><name pos:line="59" pos:column="3">sstrncpy<pos:position pos:line="59" pos:column="11"/></name><argument_list pos:line="59" pos:column="11">(<argument><expr><name><name pos:line="59" pos:column="12">vl<pos:position pos:line="59" pos:column="14"/></name><operator pos:line="59" pos:column="14">.<pos:position pos:line="59" pos:column="15"/></operator><name pos:line="59" pos:column="15">host<pos:position pos:line="59" pos:column="19"/></name></name></expr></argument>, <argument><expr><name pos:line="59" pos:column="21">hostname<pos:position pos:line="59" pos:column="29"/></name></expr></argument>, <argument><expr><sizeof pos:line="59" pos:column="31">sizeof<argument_list pos:line="59" pos:column="37">(<argument><expr><name><name pos:line="59" pos:column="38">vl<pos:position pos:line="59" pos:column="40"/></name><operator pos:line="59" pos:column="40">.<pos:position pos:line="59" pos:column="41"/></operator><name pos:line="59" pos:column="41">host<pos:position pos:line="59" pos:column="45"/></name></name></expr></argument>)<pos:position pos:line="59" pos:column="46"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="59" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="48"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="60" pos:column="3">sstrncpy<pos:position pos:line="60" pos:column="11"/></name><argument_list pos:line="60" pos:column="11">(<argument><expr><name><name pos:line="60" pos:column="12">vl<pos:position pos:line="60" pos:column="14"/></name><operator pos:line="60" pos:column="14">.<pos:position pos:line="60" pos:column="15"/></operator><name pos:line="60" pos:column="15">plugin<pos:position pos:line="60" pos:column="21"/></name></name></expr></argument>, <argument><expr><name pos:line="60" pos:column="23">plugin<pos:position pos:line="60" pos:column="29"/></name></expr></argument>, <argument><expr><sizeof pos:line="60" pos:column="31">sizeof<argument_list pos:line="60" pos:column="37">(<argument><expr><name><name pos:line="60" pos:column="38">vl<pos:position pos:line="60" pos:column="40"/></name><operator pos:line="60" pos:column="40">.<pos:position pos:line="60" pos:column="41"/></operator><name pos:line="60" pos:column="41">plugin<pos:position pos:line="60" pos:column="47"/></name></name></expr></argument>)<pos:position pos:line="60" pos:column="48"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="60" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="50"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="61" pos:column="3">sstrncpy<pos:position pos:line="61" pos:column="11"/></name><argument_list pos:line="61" pos:column="11">(<argument><expr><name><name pos:line="61" pos:column="12">vl<pos:position pos:line="61" pos:column="14"/></name><operator pos:line="61" pos:column="14">.<pos:position pos:line="61" pos:column="15"/></operator><name pos:line="61" pos:column="15">type<pos:position pos:line="61" pos:column="19"/></name></name></expr></argument>, <argument><expr><name pos:line="61" pos:column="21">type<pos:position pos:line="61" pos:column="25"/></name></expr></argument>, <argument><expr><sizeof pos:line="61" pos:column="27">sizeof<argument_list pos:line="61" pos:column="33">(<argument><expr><name><name pos:line="61" pos:column="34">vl<pos:position pos:line="61" pos:column="36"/></name><operator pos:line="61" pos:column="36">.<pos:position pos:line="61" pos:column="37"/></operator><name pos:line="61" pos:column="37">type<pos:position pos:line="61" pos:column="41"/></name></name></expr></argument>)<pos:position pos:line="61" pos:column="42"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="61" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="44"/></expr_stmt>
  <if pos:line="62" pos:column="3">if <condition pos:line="62" pos:column="6">(<expr><name pos:line="62" pos:column="7">plugin_instance<pos:position pos:line="62" pos:column="22"/></name> <operator pos:line="62" pos:column="23">!=<pos:position pos:line="62" pos:column="25"/></operator> <name pos:line="62" pos:column="26">NULL<pos:position pos:line="62" pos:column="30"/></name></expr>)<pos:position pos:line="62" pos:column="31"/></condition><then pos:line="62" pos:column="31">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="63" pos:column="5">sstrncpy<pos:position pos:line="63" pos:column="13"/></name><argument_list pos:line="63" pos:column="13">(<argument><expr><name><name pos:line="63" pos:column="14">vl<pos:position pos:line="63" pos:column="16"/></name><operator pos:line="63" pos:column="16">.<pos:position pos:line="63" pos:column="17"/></operator><name pos:line="63" pos:column="17">plugin_instance<pos:position pos:line="63" pos:column="32"/></name></name></expr></argument>, <argument><expr><name pos:line="63" pos:column="34">plugin_instance<pos:position pos:line="63" pos:column="49"/></name></expr></argument>, <argument><expr><sizeof pos:line="63" pos:column="51">sizeof<argument_list pos:line="63" pos:column="57">(<argument><expr><name><name pos:line="63" pos:column="58">vl<pos:position pos:line="63" pos:column="60"/></name><operator pos:line="63" pos:column="60">.<pos:position pos:line="63" pos:column="61"/></operator><name pos:line="63" pos:column="61">plugin_instance<pos:position pos:line="63" pos:column="76"/></name></name></expr></argument>)<pos:position pos:line="63" pos:column="77"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="63" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="79"/></expr_stmt></block></then></if>
  <if pos:line="64" pos:column="3">if <condition pos:line="64" pos:column="6">(<expr><name pos:line="64" pos:column="7">type_instance<pos:position pos:line="64" pos:column="20"/></name> <operator pos:line="64" pos:column="21">!=<pos:position pos:line="64" pos:column="23"/></operator> <name pos:line="64" pos:column="24">NULL<pos:position pos:line="64" pos:column="28"/></name></expr>)<pos:position pos:line="64" pos:column="29"/></condition><then pos:line="64" pos:column="29">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="65" pos:column="5">sstrncpy<pos:position pos:line="65" pos:column="13"/></name><argument_list pos:line="65" pos:column="13">(<argument><expr><name><name pos:line="65" pos:column="14">vl<pos:position pos:line="65" pos:column="16"/></name><operator pos:line="65" pos:column="16">.<pos:position pos:line="65" pos:column="17"/></operator><name pos:line="65" pos:column="17">type_instance<pos:position pos:line="65" pos:column="30"/></name></name></expr></argument>, <argument><expr><name pos:line="65" pos:column="32">type_instance<pos:position pos:line="65" pos:column="45"/></name></expr></argument>, <argument><expr><sizeof pos:line="65" pos:column="47">sizeof<argument_list pos:line="65" pos:column="53">(<argument><expr><name><name pos:line="65" pos:column="54">vl<pos:position pos:line="65" pos:column="56"/></name><operator pos:line="65" pos:column="56">.<pos:position pos:line="65" pos:column="57"/></operator><name pos:line="65" pos:column="57">type_instance<pos:position pos:line="65" pos:column="70"/></name></name></expr></argument>)<pos:position pos:line="65" pos:column="71"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="65" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="73"/></expr_stmt></block></then></if>

  <expr_stmt><expr><name pos:line="67" pos:column="3">ds<pos:position pos:line="67" pos:column="5"/></name> <operator pos:line="67" pos:column="6">=<pos:position pos:line="67" pos:column="7"/></operator> <call><name pos:line="67" pos:column="8">plugin_get_ds<pos:position pos:line="67" pos:column="21"/></name><argument_list pos:line="67" pos:column="21">(<argument><expr><name pos:line="67" pos:column="22">type<pos:position pos:line="67" pos:column="26"/></name></expr></argument>)<pos:position pos:line="67" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="28"/></expr_stmt>
  <if pos:line="68" pos:column="3">if <condition pos:line="68" pos:column="6">(<expr><name pos:line="68" pos:column="7">ds<pos:position pos:line="68" pos:column="9"/></name> <operator pos:line="68" pos:column="10">==<pos:position pos:line="68" pos:column="12"/></operator> <name pos:line="68" pos:column="13">NULL<pos:position pos:line="68" pos:column="17"/></name></expr>)<pos:position pos:line="68" pos:column="18"/></condition><then pos:line="68" pos:column="18"> <block pos:line="68" pos:column="19">{
    <expr_stmt><expr><call><name pos:line="69" pos:column="5">cmd_error<pos:position pos:line="69" pos:column="14"/></name><argument_list pos:line="69" pos:column="14">(<argument><expr><name pos:line="69" pos:column="15">CMD_PARSE_ERROR<pos:position pos:line="69" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="69" pos:column="32">err<pos:position pos:line="69" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="69" pos:column="37">"1 Type `%s' isn't defined."<pos:position pos:line="69" pos:column="65"/></literal></expr></argument>, <argument><expr><name pos:line="69" pos:column="67">type<pos:position pos:line="69" pos:column="71"/></name></expr></argument>)<pos:position pos:line="69" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="73"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="70" pos:column="5">sfree<pos:position pos:line="70" pos:column="10"/></name><argument_list pos:line="70" pos:column="10">(<argument><expr><name pos:line="70" pos:column="11">identifier_copy<pos:position pos:line="70" pos:column="26"/></name></expr></argument>)<pos:position pos:line="70" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="28"/></expr_stmt>
    <return pos:line="71" pos:column="5">return <expr><operator pos:line="71" pos:column="12">(<pos:position pos:line="71" pos:column="13"/></operator><name pos:line="71" pos:column="13">CMD_PARSE_ERROR<pos:position pos:line="71" pos:column="28"/></name><operator pos:line="71" pos:column="28">)<pos:position pos:line="71" pos:column="29"/></operator></expr>;<pos:position pos:line="71" pos:column="30"/></return>
  }<pos:position pos:line="72" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="74" pos:column="3">hostname<pos:position pos:line="74" pos:column="11"/></name> <operator pos:line="74" pos:column="12">=<pos:position pos:line="74" pos:column="13"/></operator> <name pos:line="74" pos:column="14">NULL<pos:position pos:line="74" pos:column="18"/></name></expr>;<pos:position pos:line="74" pos:column="19"/></expr_stmt>
  <expr_stmt><expr><name pos:line="75" pos:column="3">plugin<pos:position pos:line="75" pos:column="9"/></name> <operator pos:line="75" pos:column="10">=<pos:position pos:line="75" pos:column="11"/></operator> <name pos:line="75" pos:column="12">NULL<pos:position pos:line="75" pos:column="16"/></name></expr>;<pos:position pos:line="75" pos:column="17"/></expr_stmt>
  <expr_stmt><expr><name pos:line="76" pos:column="3">plugin_instance<pos:position pos:line="76" pos:column="18"/></name> <operator pos:line="76" pos:column="19">=<pos:position pos:line="76" pos:column="20"/></operator> <name pos:line="76" pos:column="21">NULL<pos:position pos:line="76" pos:column="25"/></name></expr>;<pos:position pos:line="76" pos:column="26"/></expr_stmt>
  <expr_stmt><expr><name pos:line="77" pos:column="3">type<pos:position pos:line="77" pos:column="7"/></name> <operator pos:line="77" pos:column="8">=<pos:position pos:line="77" pos:column="9"/></operator> <name pos:line="77" pos:column="10">NULL<pos:position pos:line="77" pos:column="14"/></name></expr>;<pos:position pos:line="77" pos:column="15"/></expr_stmt>
  <expr_stmt><expr><name pos:line="78" pos:column="3">type_instance<pos:position pos:line="78" pos:column="16"/></name> <operator pos:line="78" pos:column="17">=<pos:position pos:line="78" pos:column="18"/></operator> <name pos:line="78" pos:column="19">NULL<pos:position pos:line="78" pos:column="23"/></name></expr>;<pos:position pos:line="78" pos:column="24"/></expr_stmt>

  <expr_stmt><expr><name><name pos:line="80" pos:column="3">vl<pos:position pos:line="80" pos:column="5"/></name><operator pos:line="80" pos:column="5">.<pos:position pos:line="80" pos:column="6"/></operator><name pos:line="80" pos:column="6">values_len<pos:position pos:line="80" pos:column="16"/></name></name> <operator pos:line="80" pos:column="17">=<pos:position pos:line="80" pos:column="18"/></operator> <name><name pos:line="80" pos:column="19">ds<pos:position pos:line="80" pos:column="21"/></name><operator pos:line="80" pos:column="21">-&gt;<pos:position pos:line="80" pos:column="26"/></operator><name pos:line="80" pos:column="23">ds_num<pos:position pos:line="80" pos:column="29"/></name></name></expr>;<pos:position pos:line="80" pos:column="30"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="81" pos:column="3">vl<pos:position pos:line="81" pos:column="5"/></name><operator pos:line="81" pos:column="5">.<pos:position pos:line="81" pos:column="6"/></operator><name pos:line="81" pos:column="6">values<pos:position pos:line="81" pos:column="12"/></name></name> <operator pos:line="81" pos:column="13">=<pos:position pos:line="81" pos:column="14"/></operator> <call><name pos:line="81" pos:column="15">malloc<pos:position pos:line="81" pos:column="21"/></name><argument_list pos:line="81" pos:column="21">(<argument><expr><name><name pos:line="81" pos:column="22">vl<pos:position pos:line="81" pos:column="24"/></name><operator pos:line="81" pos:column="24">.<pos:position pos:line="81" pos:column="25"/></operator><name pos:line="81" pos:column="25">values_len<pos:position pos:line="81" pos:column="35"/></name></name> <operator pos:line="81" pos:column="36">*<pos:position pos:line="81" pos:column="37"/></operator> <sizeof pos:line="81" pos:column="38">sizeof<argument_list pos:line="81" pos:column="44">(<argument><expr><operator pos:line="81" pos:column="45">*<pos:position pos:line="81" pos:column="46"/></operator><name><name pos:line="81" pos:column="46">vl<pos:position pos:line="81" pos:column="48"/></name><operator pos:line="81" pos:column="48">.<pos:position pos:line="81" pos:column="49"/></operator><name pos:line="81" pos:column="49">values<pos:position pos:line="81" pos:column="55"/></name></name></expr></argument>)<pos:position pos:line="81" pos:column="56"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="81" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="58"/></expr_stmt>
  <if pos:line="82" pos:column="3">if <condition pos:line="82" pos:column="6">(<expr><name><name pos:line="82" pos:column="7">vl<pos:position pos:line="82" pos:column="9"/></name><operator pos:line="82" pos:column="9">.<pos:position pos:line="82" pos:column="10"/></operator><name pos:line="82" pos:column="10">values<pos:position pos:line="82" pos:column="16"/></name></name> <operator pos:line="82" pos:column="17">==<pos:position pos:line="82" pos:column="19"/></operator> <name pos:line="82" pos:column="20">NULL<pos:position pos:line="82" pos:column="24"/></name></expr>)<pos:position pos:line="82" pos:column="25"/></condition><then pos:line="82" pos:column="25"> <block pos:line="82" pos:column="26">{
    <expr_stmt><expr><call><name pos:line="83" pos:column="5">cmd_error<pos:position pos:line="83" pos:column="14"/></name><argument_list pos:line="83" pos:column="14">(<argument><expr><name pos:line="83" pos:column="15">CMD_ERROR<pos:position pos:line="83" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="83" pos:column="26">err<pos:position pos:line="83" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="83" pos:column="31">"malloc failed."<pos:position pos:line="83" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="83" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="49"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="84" pos:column="5">sfree<pos:position pos:line="84" pos:column="10"/></name><argument_list pos:line="84" pos:column="10">(<argument><expr><name pos:line="84" pos:column="11">identifier_copy<pos:position pos:line="84" pos:column="26"/></name></expr></argument>)<pos:position pos:line="84" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="28"/></expr_stmt>
    <return pos:line="85" pos:column="5">return <expr><operator pos:line="85" pos:column="12">(<pos:position pos:line="85" pos:column="13"/></operator><name pos:line="85" pos:column="13">CMD_ERROR<pos:position pos:line="85" pos:column="22"/></name><operator pos:line="85" pos:column="22">)<pos:position pos:line="85" pos:column="23"/></operator></expr>;<pos:position pos:line="85" pos:column="24"/></return>
  }<pos:position pos:line="86" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name><name pos:line="88" pos:column="3">ret_putval<pos:position pos:line="88" pos:column="13"/></name><operator pos:line="88" pos:column="13">-&gt;<pos:position pos:line="88" pos:column="18"/></operator><name pos:line="88" pos:column="15">raw_identifier<pos:position pos:line="88" pos:column="29"/></name></name> <operator pos:line="88" pos:column="30">=<pos:position pos:line="88" pos:column="31"/></operator> <name pos:line="88" pos:column="32">identifier_copy<pos:position pos:line="88" pos:column="47"/></name></expr>;<pos:position pos:line="88" pos:column="48"/></expr_stmt>
  <if pos:line="89" pos:column="3">if <condition pos:line="89" pos:column="6">(<expr><name><name pos:line="89" pos:column="7">ret_putval<pos:position pos:line="89" pos:column="17"/></name><operator pos:line="89" pos:column="17">-&gt;<pos:position pos:line="89" pos:column="22"/></operator><name pos:line="89" pos:column="19">raw_identifier<pos:position pos:line="89" pos:column="33"/></name></name> <operator pos:line="89" pos:column="34">==<pos:position pos:line="89" pos:column="36"/></operator> <name pos:line="89" pos:column="37">NULL<pos:position pos:line="89" pos:column="41"/></name></expr>)<pos:position pos:line="89" pos:column="42"/></condition><then pos:line="89" pos:column="42"> <block pos:line="89" pos:column="43">{
    <expr_stmt><expr><call><name pos:line="90" pos:column="5">cmd_error<pos:position pos:line="90" pos:column="14"/></name><argument_list pos:line="90" pos:column="14">(<argument><expr><name pos:line="90" pos:column="15">CMD_ERROR<pos:position pos:line="90" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="90" pos:column="26">err<pos:position pos:line="90" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="90" pos:column="31">"malloc failed."<pos:position pos:line="90" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="90" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="90" pos:column="49"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="91" pos:column="5">cmd_destroy_putval<pos:position pos:line="91" pos:column="23"/></name><argument_list pos:line="91" pos:column="23">(<argument><expr><name pos:line="91" pos:column="24">ret_putval<pos:position pos:line="91" pos:column="34"/></name></expr></argument>)<pos:position pos:line="91" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="91" pos:column="36"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="92" pos:column="5">sfree<pos:position pos:line="92" pos:column="10"/></name><argument_list pos:line="92" pos:column="10">(<argument><expr><name><name pos:line="92" pos:column="11">vl<pos:position pos:line="92" pos:column="13"/></name><operator pos:line="92" pos:column="13">.<pos:position pos:line="92" pos:column="14"/></operator><name pos:line="92" pos:column="14">values<pos:position pos:line="92" pos:column="20"/></name></name></expr></argument>)<pos:position pos:line="92" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="22"/></expr_stmt>
    <return pos:line="93" pos:column="5">return <expr><operator pos:line="93" pos:column="12">(<pos:position pos:line="93" pos:column="13"/></operator><name pos:line="93" pos:column="13">CMD_ERROR<pos:position pos:line="93" pos:column="22"/></name><operator pos:line="93" pos:column="22">)<pos:position pos:line="93" pos:column="23"/></operator></expr>;<pos:position pos:line="93" pos:column="24"/></return>
  }<pos:position pos:line="94" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="96" pos:column="3">/* All the remaining fields are part of the option list. */</comment>
  <expr_stmt><expr><name pos:line="97" pos:column="3">result<pos:position pos:line="97" pos:column="9"/></name> <operator pos:line="97" pos:column="10">=<pos:position pos:line="97" pos:column="11"/></operator> <name pos:line="97" pos:column="12">CMD_OK<pos:position pos:line="97" pos:column="18"/></name></expr>;<pos:position pos:line="97" pos:column="19"/></expr_stmt>
  <for pos:line="98" pos:column="3">for <control pos:line="98" pos:column="7">(<init><decl><type><name pos:line="98" pos:column="8">size_t<pos:position pos:line="98" pos:column="14"/></name></type> <name pos:line="98" pos:column="15">i<pos:position pos:line="98" pos:column="16"/></name> <init pos:line="98" pos:column="17">= <expr><literal type="number" pos:line="98" pos:column="19">1<pos:position pos:line="98" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="98" pos:column="21"/></init> <condition><expr><name pos:line="98" pos:column="22">i<pos:position pos:line="98" pos:column="23"/></name> <operator pos:line="98" pos:column="24">&lt;<pos:position pos:line="98" pos:column="28"/></operator> <name pos:line="98" pos:column="26">argc<pos:position pos:line="98" pos:column="30"/></name></expr>;<pos:position pos:line="98" pos:column="31"/></condition> <incr><expr><operator pos:line="98" pos:column="32">++<pos:position pos:line="98" pos:column="34"/></operator><name pos:line="98" pos:column="34">i<pos:position pos:line="98" pos:column="35"/></name></expr></incr>)<pos:position pos:line="98" pos:column="36"/></control> <block pos:line="98" pos:column="37">{
    <decl_stmt><decl><type><name pos:line="99" pos:column="5">value_list_t<pos:position pos:line="99" pos:column="17"/></name> <modifier pos:line="99" pos:column="18">*<pos:position pos:line="99" pos:column="19"/></modifier></type><name pos:line="99" pos:column="19">tmp<pos:position pos:line="99" pos:column="22"/></name></decl>;<pos:position pos:line="99" pos:column="23"/></decl_stmt>

    <decl_stmt><decl><type><name pos:line="101" pos:column="5">char<pos:position pos:line="101" pos:column="9"/></name> <modifier pos:line="101" pos:column="10">*<pos:position pos:line="101" pos:column="11"/></modifier></type><name pos:line="101" pos:column="11">key<pos:position pos:line="101" pos:column="14"/></name> <init pos:line="101" pos:column="15">= <expr><name pos:line="101" pos:column="17">NULL<pos:position pos:line="101" pos:column="21"/></name></expr></init></decl>;<pos:position pos:line="101" pos:column="22"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="102" pos:column="5">char<pos:position pos:line="102" pos:column="9"/></name> <modifier pos:line="102" pos:column="10">*<pos:position pos:line="102" pos:column="11"/></modifier></type><name pos:line="102" pos:column="11">value<pos:position pos:line="102" pos:column="16"/></name> <init pos:line="102" pos:column="17">= <expr><name pos:line="102" pos:column="19">NULL<pos:position pos:line="102" pos:column="23"/></name></expr></init></decl>;<pos:position pos:line="102" pos:column="24"/></decl_stmt>

    <expr_stmt><expr><name pos:line="104" pos:column="5">status<pos:position pos:line="104" pos:column="11"/></name> <operator pos:line="104" pos:column="12">=<pos:position pos:line="104" pos:column="13"/></operator> <call><name pos:line="104" pos:column="14">cmd_parse_option<pos:position pos:line="104" pos:column="30"/></name><argument_list pos:line="104" pos:column="30">(<argument><expr><name><name pos:line="104" pos:column="31">argv<pos:position pos:line="104" pos:column="35"/></name><index pos:line="104" pos:column="35">[<expr><name pos:line="104" pos:column="36">i<pos:position pos:line="104" pos:column="37"/></name></expr>]<pos:position pos:line="104" pos:column="38"/></index></name></expr></argument>, <argument><expr><operator pos:line="104" pos:column="40">&amp;<pos:position pos:line="104" pos:column="45"/></operator><name pos:line="104" pos:column="41">key<pos:position pos:line="104" pos:column="44"/></name></expr></argument>, <argument><expr><operator pos:line="104" pos:column="46">&amp;<pos:position pos:line="104" pos:column="51"/></operator><name pos:line="104" pos:column="47">value<pos:position pos:line="104" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="104" pos:column="54">err<pos:position pos:line="104" pos:column="57"/></name></expr></argument>)<pos:position pos:line="104" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="104" pos:column="59"/></expr_stmt>
    <if pos:line="105" pos:column="5">if <condition pos:line="105" pos:column="8">(<expr><name pos:line="105" pos:column="9">status<pos:position pos:line="105" pos:column="15"/></name> <operator pos:line="105" pos:column="16">==<pos:position pos:line="105" pos:column="18"/></operator> <name pos:line="105" pos:column="19">CMD_OK<pos:position pos:line="105" pos:column="25"/></name></expr>)<pos:position pos:line="105" pos:column="26"/></condition><then pos:line="105" pos:column="26"> <block pos:line="105" pos:column="27">{
      <expr_stmt><expr><call><name pos:line="106" pos:column="7">assert<pos:position pos:line="106" pos:column="13"/></name><argument_list pos:line="106" pos:column="13">(<argument><expr><name pos:line="106" pos:column="14">key<pos:position pos:line="106" pos:column="17"/></name> <operator pos:line="106" pos:column="18">!=<pos:position pos:line="106" pos:column="20"/></operator> <name pos:line="106" pos:column="21">NULL<pos:position pos:line="106" pos:column="25"/></name></expr></argument>)<pos:position pos:line="106" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="106" pos:column="27"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="107" pos:column="7">assert<pos:position pos:line="107" pos:column="13"/></name><argument_list pos:line="107" pos:column="13">(<argument><expr><name pos:line="107" pos:column="14">value<pos:position pos:line="107" pos:column="19"/></name> <operator pos:line="107" pos:column="20">!=<pos:position pos:line="107" pos:column="22"/></operator> <name pos:line="107" pos:column="23">NULL<pos:position pos:line="107" pos:column="27"/></name></expr></argument>)<pos:position pos:line="107" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="107" pos:column="29"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="108" pos:column="7">set_option<pos:position pos:line="108" pos:column="17"/></name><argument_list pos:line="108" pos:column="17">(<argument><expr><operator pos:line="108" pos:column="18">&amp;<pos:position pos:line="108" pos:column="23"/></operator><name pos:line="108" pos:column="19">vl<pos:position pos:line="108" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="108" pos:column="23">key<pos:position pos:line="108" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="108" pos:column="28">value<pos:position pos:line="108" pos:column="33"/></name></expr></argument>)<pos:position pos:line="108" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="108" pos:column="35"/></expr_stmt>
      <continue pos:line="109" pos:column="7">continue;<pos:position pos:line="109" pos:column="16"/></continue>
    }<pos:position pos:line="110" pos:column="6"/></block></then> <elseif pos:line="110" pos:column="7">else <if pos:line="110" pos:column="12">if <condition pos:line="110" pos:column="15">(<expr><name pos:line="110" pos:column="16">status<pos:position pos:line="110" pos:column="22"/></name> <operator pos:line="110" pos:column="23">!=<pos:position pos:line="110" pos:column="25"/></operator> <name pos:line="110" pos:column="26">CMD_NO_OPTION<pos:position pos:line="110" pos:column="39"/></name></expr>)<pos:position pos:line="110" pos:column="40"/></condition><then pos:line="110" pos:column="40"> <block pos:line="110" pos:column="41">{
      <comment type="block" pos:line="111" pos:column="7">/* parse_option failed, buffer has been modified.
       * =&gt; we need to abort */</comment>
      <expr_stmt><expr><name pos:line="113" pos:column="7">result<pos:position pos:line="113" pos:column="13"/></name> <operator pos:line="113" pos:column="14">=<pos:position pos:line="113" pos:column="15"/></operator> <name pos:line="113" pos:column="16">status<pos:position pos:line="113" pos:column="22"/></name></expr>;<pos:position pos:line="113" pos:column="23"/></expr_stmt>
      <break pos:line="114" pos:column="7">break;<pos:position pos:line="114" pos:column="13"/></break>
    }<pos:position pos:line="115" pos:column="6"/></block></then></if></elseif></if>
    <comment type="block" pos:line="116" pos:column="5">/* else: cmd_parse_option did not find an option; treat this as a
     * value list. */</comment>

    <expr_stmt><expr><name pos:line="119" pos:column="5">status<pos:position pos:line="119" pos:column="11"/></name> <operator pos:line="119" pos:column="12">=<pos:position pos:line="119" pos:column="13"/></operator> <call><name pos:line="119" pos:column="14">parse_values<pos:position pos:line="119" pos:column="26"/></name><argument_list pos:line="119" pos:column="26">(<argument><expr><name><name pos:line="119" pos:column="27">argv<pos:position pos:line="119" pos:column="31"/></name><index pos:line="119" pos:column="31">[<expr><name pos:line="119" pos:column="32">i<pos:position pos:line="119" pos:column="33"/></name></expr>]<pos:position pos:line="119" pos:column="34"/></index></name></expr></argument>, <argument><expr><operator pos:line="119" pos:column="36">&amp;<pos:position pos:line="119" pos:column="41"/></operator><name pos:line="119" pos:column="37">vl<pos:position pos:line="119" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="119" pos:column="41">ds<pos:position pos:line="119" pos:column="43"/></name></expr></argument>)<pos:position pos:line="119" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="119" pos:column="45"/></expr_stmt>
    <if pos:line="120" pos:column="5">if <condition pos:line="120" pos:column="8">(<expr><name pos:line="120" pos:column="9">status<pos:position pos:line="120" pos:column="15"/></name> <operator pos:line="120" pos:column="16">!=<pos:position pos:line="120" pos:column="18"/></operator> <literal type="number" pos:line="120" pos:column="19">0<pos:position pos:line="120" pos:column="20"/></literal></expr>)<pos:position pos:line="120" pos:column="21"/></condition><then pos:line="120" pos:column="21"> <block pos:line="120" pos:column="22">{
      <expr_stmt><expr><call><name pos:line="121" pos:column="7">cmd_error<pos:position pos:line="121" pos:column="16"/></name><argument_list pos:line="121" pos:column="16">(<argument><expr><name pos:line="121" pos:column="17">CMD_PARSE_ERROR<pos:position pos:line="121" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="121" pos:column="34">err<pos:position pos:line="121" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="121" pos:column="39">"Parsing the values string failed."<pos:position pos:line="121" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="121" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="121" pos:column="76"/></expr_stmt>
      <expr_stmt><expr><name pos:line="122" pos:column="7">result<pos:position pos:line="122" pos:column="13"/></name> <operator pos:line="122" pos:column="14">=<pos:position pos:line="122" pos:column="15"/></operator> <name pos:line="122" pos:column="16">CMD_PARSE_ERROR<pos:position pos:line="122" pos:column="31"/></name></expr>;<pos:position pos:line="122" pos:column="32"/></expr_stmt>
      <break pos:line="123" pos:column="7">break;<pos:position pos:line="123" pos:column="13"/></break>
    }<pos:position pos:line="124" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="126" pos:column="5">tmp<pos:position pos:line="126" pos:column="8"/></name> <operator pos:line="126" pos:column="9">=<pos:position pos:line="126" pos:column="10"/></operator> <operator pos:line="126" pos:column="11">(<pos:position pos:line="126" pos:column="12"/></operator><name pos:line="126" pos:column="12">value_list_t<pos:position pos:line="126" pos:column="24"/></name> <operator pos:line="126" pos:column="25">*<pos:position pos:line="126" pos:column="26"/></operator><operator pos:line="126" pos:column="26">)<pos:position pos:line="126" pos:column="27"/></operator><call><name pos:line="126" pos:column="27">realloc<pos:position pos:line="126" pos:column="34"/></name><argument_list pos:line="126" pos:column="34">(<argument><expr><name><name pos:line="126" pos:column="35">ret_putval<pos:position pos:line="126" pos:column="45"/></name><operator pos:line="126" pos:column="45">-&gt;<pos:position pos:line="126" pos:column="50"/></operator><name pos:line="126" pos:column="47">vl<pos:position pos:line="126" pos:column="49"/></name></name></expr></argument>, <argument><expr><operator pos:line="126" pos:column="51">(<pos:position pos:line="126" pos:column="52"/></operator><name><name pos:line="126" pos:column="52">ret_putval<pos:position pos:line="126" pos:column="62"/></name><operator pos:line="126" pos:column="62">-&gt;<pos:position pos:line="126" pos:column="67"/></operator><name pos:line="126" pos:column="64">vl_num<pos:position pos:line="126" pos:column="70"/></name></name> <operator pos:line="126" pos:column="71">+<pos:position pos:line="126" pos:column="72"/></operator> <literal type="number" pos:line="126" pos:column="73">1<pos:position pos:line="126" pos:column="74"/></literal><operator pos:line="126" pos:column="74">)<pos:position pos:line="126" pos:column="75"/></operator> <operator pos:line="126" pos:column="76">*<pos:position pos:line="126" pos:column="77"/></operator>
                                                      <sizeof pos:line="127" pos:column="55">sizeof<argument_list pos:line="127" pos:column="61">(<argument><expr><operator pos:line="127" pos:column="62">*<pos:position pos:line="127" pos:column="63"/></operator><name><name pos:line="127" pos:column="63">ret_putval<pos:position pos:line="127" pos:column="73"/></name><operator pos:line="127" pos:column="73">-&gt;<pos:position pos:line="127" pos:column="78"/></operator><name pos:line="127" pos:column="75">vl<pos:position pos:line="127" pos:column="77"/></name></name></expr></argument>)<pos:position pos:line="127" pos:column="78"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="127" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="127" pos:column="80"/></expr_stmt>
    <if pos:line="128" pos:column="5">if <condition pos:line="128" pos:column="8">(<expr><name pos:line="128" pos:column="9">tmp<pos:position pos:line="128" pos:column="12"/></name> <operator pos:line="128" pos:column="13">==<pos:position pos:line="128" pos:column="15"/></operator> <name pos:line="128" pos:column="16">NULL<pos:position pos:line="128" pos:column="20"/></name></expr>)<pos:position pos:line="128" pos:column="21"/></condition><then pos:line="128" pos:column="21"> <block pos:line="128" pos:column="22">{
      <expr_stmt><expr><call><name pos:line="129" pos:column="7">cmd_error<pos:position pos:line="129" pos:column="16"/></name><argument_list pos:line="129" pos:column="16">(<argument><expr><name pos:line="129" pos:column="17">CMD_ERROR<pos:position pos:line="129" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="129" pos:column="28">err<pos:position pos:line="129" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="129" pos:column="33">"realloc failed."<pos:position pos:line="129" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="129" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="129" pos:column="52"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="130" pos:column="7">cmd_destroy_putval<pos:position pos:line="130" pos:column="25"/></name><argument_list pos:line="130" pos:column="25">(<argument><expr><name pos:line="130" pos:column="26">ret_putval<pos:position pos:line="130" pos:column="36"/></name></expr></argument>)<pos:position pos:line="130" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="130" pos:column="38"/></expr_stmt>
      <expr_stmt><expr><name pos:line="131" pos:column="7">result<pos:position pos:line="131" pos:column="13"/></name> <operator pos:line="131" pos:column="14">=<pos:position pos:line="131" pos:column="15"/></operator> <name pos:line="131" pos:column="16">CMD_ERROR<pos:position pos:line="131" pos:column="25"/></name></expr>;<pos:position pos:line="131" pos:column="26"/></expr_stmt>
      <break pos:line="132" pos:column="7">break;<pos:position pos:line="132" pos:column="13"/></break>
    }<pos:position pos:line="133" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name><name pos:line="135" pos:column="5">ret_putval<pos:position pos:line="135" pos:column="15"/></name><operator pos:line="135" pos:column="15">-&gt;<pos:position pos:line="135" pos:column="20"/></operator><name pos:line="135" pos:column="17">vl<pos:position pos:line="135" pos:column="19"/></name></name> <operator pos:line="135" pos:column="20">=<pos:position pos:line="135" pos:column="21"/></operator> <name pos:line="135" pos:column="22">tmp<pos:position pos:line="135" pos:column="25"/></name></expr>;<pos:position pos:line="135" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="136" pos:column="5">ret_putval<pos:position pos:line="136" pos:column="15"/></name><operator pos:line="136" pos:column="15">-&gt;<pos:position pos:line="136" pos:column="20"/></operator><name pos:line="136" pos:column="17">vl_num<pos:position pos:line="136" pos:column="23"/></name></name><operator pos:line="136" pos:column="23">++<pos:position pos:line="136" pos:column="25"/></operator></expr>;<pos:position pos:line="136" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="137" pos:column="5">memcpy<pos:position pos:line="137" pos:column="11"/></name><argument_list pos:line="137" pos:column="11">(<argument><expr><operator pos:line="137" pos:column="12">&amp;<pos:position pos:line="137" pos:column="17"/></operator><name><name pos:line="137" pos:column="13">ret_putval<pos:position pos:line="137" pos:column="23"/></name><operator pos:line="137" pos:column="23">-&gt;<pos:position pos:line="137" pos:column="28"/></operator><name pos:line="137" pos:column="25">vl<pos:position pos:line="137" pos:column="27"/></name><index pos:line="137" pos:column="27">[<expr><name><name pos:line="137" pos:column="28">ret_putval<pos:position pos:line="137" pos:column="38"/></name><operator pos:line="137" pos:column="38">-&gt;<pos:position pos:line="137" pos:column="43"/></operator><name pos:line="137" pos:column="40">vl_num<pos:position pos:line="137" pos:column="46"/></name></name> <operator pos:line="137" pos:column="47">-<pos:position pos:line="137" pos:column="48"/></operator> <literal type="number" pos:line="137" pos:column="49">1<pos:position pos:line="137" pos:column="50"/></literal></expr>]<pos:position pos:line="137" pos:column="51"/></index></name></expr></argument>, <argument><expr><operator pos:line="137" pos:column="53">&amp;<pos:position pos:line="137" pos:column="58"/></operator><name pos:line="137" pos:column="54">vl<pos:position pos:line="137" pos:column="56"/></name></expr></argument>, <argument><expr><sizeof pos:line="137" pos:column="58">sizeof<argument_list pos:line="137" pos:column="64">(<argument><expr><name pos:line="137" pos:column="65">vl<pos:position pos:line="137" pos:column="67"/></name></expr></argument>)<pos:position pos:line="137" pos:column="68"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="137" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="137" pos:column="70"/></expr_stmt>
  }<pos:position pos:line="138" pos:column="4"/></block></for> <comment type="block" pos:line="138" pos:column="5">/* while (*buffer != 0) */</comment>
  <comment type="block" pos:line="139" pos:column="3">/* Done parsing the options. */</comment>

  <if pos:line="141" pos:column="3">if <condition pos:line="141" pos:column="6">(<expr><name pos:line="141" pos:column="7">result<pos:position pos:line="141" pos:column="13"/></name> <operator pos:line="141" pos:column="14">!=<pos:position pos:line="141" pos:column="16"/></operator> <name pos:line="141" pos:column="17">CMD_OK<pos:position pos:line="141" pos:column="23"/></name></expr>)<pos:position pos:line="141" pos:column="24"/></condition><then pos:line="141" pos:column="24"> <block pos:line="141" pos:column="25">{
    <if pos:line="142" pos:column="5">if <condition pos:line="142" pos:column="8">(<expr><name><name pos:line="142" pos:column="9">ret_putval<pos:position pos:line="142" pos:column="19"/></name><operator pos:line="142" pos:column="19">-&gt;<pos:position pos:line="142" pos:column="24"/></operator><name pos:line="142" pos:column="21">vl_num<pos:position pos:line="142" pos:column="27"/></name></name> <operator pos:line="142" pos:column="28">==<pos:position pos:line="142" pos:column="30"/></operator> <literal type="number" pos:line="142" pos:column="31">0<pos:position pos:line="142" pos:column="32"/></literal></expr>)<pos:position pos:line="142" pos:column="33"/></condition><then pos:line="142" pos:column="33">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="143" pos:column="7">sfree<pos:position pos:line="143" pos:column="12"/></name><argument_list pos:line="143" pos:column="12">(<argument><expr><name><name pos:line="143" pos:column="13">vl<pos:position pos:line="143" pos:column="15"/></name><operator pos:line="143" pos:column="15">.<pos:position pos:line="143" pos:column="16"/></operator><name pos:line="143" pos:column="16">values<pos:position pos:line="143" pos:column="22"/></name></name></expr></argument>)<pos:position pos:line="143" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="143" pos:column="24"/></expr_stmt></block></then></if>
    <expr_stmt><expr><call><name pos:line="144" pos:column="5">cmd_destroy_putval<pos:position pos:line="144" pos:column="23"/></name><argument_list pos:line="144" pos:column="23">(<argument><expr><name pos:line="144" pos:column="24">ret_putval<pos:position pos:line="144" pos:column="34"/></name></expr></argument>)<pos:position pos:line="144" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="144" pos:column="36"/></expr_stmt>
  }<pos:position pos:line="145" pos:column="4"/></block></then></if>

  <return pos:line="147" pos:column="3">return <expr><operator pos:line="147" pos:column="10">(<pos:position pos:line="147" pos:column="11"/></operator><name pos:line="147" pos:column="11">result<pos:position pos:line="147" pos:column="17"/></name><operator pos:line="147" pos:column="17">)<pos:position pos:line="147" pos:column="18"/></operator></expr>;<pos:position pos:line="147" pos:column="19"/></return>
}<pos:position pos:line="148" pos:column="2"/></block></function></unit>
