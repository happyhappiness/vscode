<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1106_collectd-5.6.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">cna_handle_volume_perf_data<pos:position pos:line="1" pos:column="39"/></name><parameter_list pos:line="1" pos:column="39">(<parameter><decl><type><specifier pos:line="1" pos:column="40">const<pos:position pos:line="1" pos:column="45"/></specifier> <name pos:line="1" pos:column="46">char<pos:position pos:line="1" pos:column="50"/></name> <modifier pos:line="1" pos:column="51">*<pos:position pos:line="1" pos:column="52"/></modifier></type><name pos:line="1" pos:column="52">hostname<pos:position pos:line="1" pos:column="60"/></name></decl></parameter>, <comment type="block" pos:line="1" pos:column="62">/* {{{ */</comment>
                                       <parameter><decl><type><name pos:line="2" pos:column="40">cfg_volume_perf_t<pos:position pos:line="2" pos:column="57"/></name> <modifier pos:line="2" pos:column="58">*<pos:position pos:line="2" pos:column="59"/></modifier></type><name pos:line="2" pos:column="59">cvp<pos:position pos:line="2" pos:column="62"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="64">na_elem_t<pos:position pos:line="2" pos:column="73"/></name> <modifier pos:line="2" pos:column="74">*<pos:position pos:line="2" pos:column="75"/></modifier></type><name pos:line="2" pos:column="75">data<pos:position pos:line="2" pos:column="79"/></name></decl></parameter>,
                                       <parameter><decl><type><name pos:line="3" pos:column="40">cdtime_t<pos:position pos:line="3" pos:column="48"/></name></type> <name pos:line="3" pos:column="49">interval<pos:position pos:line="3" pos:column="57"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="58"/></parameter_list> <block pos:line="3" pos:column="59">{
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">cdtime_t<pos:position pos:line="4" pos:column="11"/></name></type> <name pos:line="4" pos:column="12">timestamp<pos:position pos:line="4" pos:column="21"/></name></decl>;<pos:position pos:line="4" pos:column="22"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">na_elem_t<pos:position pos:line="5" pos:column="12"/></name> <modifier pos:line="5" pos:column="13">*<pos:position pos:line="5" pos:column="14"/></modifier></type><name pos:line="5" pos:column="14">elem_instances<pos:position pos:line="5" pos:column="28"/></name></decl>;<pos:position pos:line="5" pos:column="29"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">na_elem_iter_t<pos:position pos:line="6" pos:column="17"/></name></type> <name pos:line="6" pos:column="18">iter_instances<pos:position pos:line="6" pos:column="32"/></name></decl>;<pos:position pos:line="6" pos:column="33"/></decl_stmt>

  <expr_stmt><expr><name pos:line="8" pos:column="3">timestamp<pos:position pos:line="8" pos:column="12"/></name> <operator pos:line="8" pos:column="13">=<pos:position pos:line="8" pos:column="14"/></operator> <call><name pos:line="8" pos:column="15">cna_child_get_cdtime<pos:position pos:line="8" pos:column="35"/></name><argument_list pos:line="8" pos:column="35">(<argument><expr><name pos:line="8" pos:column="36">data<pos:position pos:line="8" pos:column="40"/></name></expr></argument>)<pos:position pos:line="8" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="42"/></expr_stmt>

  <expr_stmt><expr><name pos:line="10" pos:column="3">elem_instances<pos:position pos:line="10" pos:column="17"/></name> <operator pos:line="10" pos:column="18">=<pos:position pos:line="10" pos:column="19"/></operator> <call><name pos:line="10" pos:column="20">na_elem_child<pos:position pos:line="10" pos:column="33"/></name><argument_list pos:line="10" pos:column="33">(<argument><expr><name pos:line="10" pos:column="34">data<pos:position pos:line="10" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="10" pos:column="40">"instances"<pos:position pos:line="10" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="53"/></expr_stmt>
  <if pos:line="11" pos:column="3">if <condition pos:line="11" pos:column="6">(<expr><name pos:line="11" pos:column="7">elem_instances<pos:position pos:line="11" pos:column="21"/></name> <operator pos:line="11" pos:column="22">==<pos:position pos:line="11" pos:column="24"/></operator> <name pos:line="11" pos:column="25">NULL<pos:position pos:line="11" pos:column="29"/></name></expr>)<pos:position pos:line="11" pos:column="30"/></condition><then pos:line="11" pos:column="30"> <block pos:line="11" pos:column="31">{
    <expr_stmt><expr><call><name pos:line="12" pos:column="5">ERROR<pos:position pos:line="12" pos:column="10"/></name><argument_list pos:line="12" pos:column="10">(<argument><expr><literal type="string" pos:line="12" pos:column="11">"netapp plugin: handle_volume_perf_data: "<pos:position pos:line="12" pos:column="53"/></literal>
          <literal type="string" pos:line="13" pos:column="11">"na_elem_child (\"instances\") failed "<pos:position pos:line="13" pos:column="50"/></literal>
          <literal type="string" pos:line="14" pos:column="11">"for host %s."<pos:position pos:line="14" pos:column="25"/></literal></expr></argument>,
          <argument><expr><name pos:line="15" pos:column="11">hostname<pos:position pos:line="15" pos:column="19"/></name></expr></argument>)<pos:position pos:line="15" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="21"/></expr_stmt>
    <return pos:line="16" pos:column="5">return <expr><operator pos:line="16" pos:column="12">(<pos:position pos:line="16" pos:column="13"/></operator><operator pos:line="16" pos:column="13">-<pos:position pos:line="16" pos:column="14"/></operator><literal type="number" pos:line="16" pos:column="14">1<pos:position pos:line="16" pos:column="15"/></literal><operator pos:line="16" pos:column="15">)<pos:position pos:line="16" pos:column="16"/></operator></expr>;<pos:position pos:line="16" pos:column="17"/></return>
  }<pos:position pos:line="17" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="19" pos:column="3">iter_instances<pos:position pos:line="19" pos:column="17"/></name> <operator pos:line="19" pos:column="18">=<pos:position pos:line="19" pos:column="19"/></operator> <call><name pos:line="19" pos:column="20">na_child_iterator<pos:position pos:line="19" pos:column="37"/></name><argument_list pos:line="19" pos:column="37">(<argument><expr><name pos:line="19" pos:column="38">elem_instances<pos:position pos:line="19" pos:column="52"/></name></expr></argument>)<pos:position pos:line="19" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="54"/></expr_stmt>
  <for pos:line="20" pos:column="3">for <control pos:line="20" pos:column="7">(<init><decl><type><name pos:line="20" pos:column="8">na_elem_t<pos:position pos:line="20" pos:column="17"/></name> <modifier pos:line="20" pos:column="18">*<pos:position pos:line="20" pos:column="19"/></modifier></type><name pos:line="20" pos:column="19">elem_instance<pos:position pos:line="20" pos:column="32"/></name> <init pos:line="20" pos:column="33">= <expr><call><name pos:line="20" pos:column="35">na_iterator_next<pos:position pos:line="20" pos:column="51"/></name><argument_list pos:line="20" pos:column="51">(<argument><expr><operator pos:line="20" pos:column="52">&amp;<pos:position pos:line="20" pos:column="57"/></operator><name pos:line="20" pos:column="53">iter_instances<pos:position pos:line="20" pos:column="67"/></name></expr></argument>)<pos:position pos:line="20" pos:column="68"/></argument_list></call></expr></init></decl>;<pos:position pos:line="20" pos:column="69"/></init>
       <condition><expr><name pos:line="21" pos:column="8">elem_instance<pos:position pos:line="21" pos:column="21"/></name> <operator pos:line="21" pos:column="22">!=<pos:position pos:line="21" pos:column="24"/></operator> <name pos:line="21" pos:column="25">NULL<pos:position pos:line="21" pos:column="29"/></name></expr>;<pos:position pos:line="21" pos:column="30"/></condition>
       <incr><expr><name pos:line="22" pos:column="8">elem_instance<pos:position pos:line="22" pos:column="21"/></name> <operator pos:line="22" pos:column="22">=<pos:position pos:line="22" pos:column="23"/></operator> <call><name pos:line="22" pos:column="24">na_iterator_next<pos:position pos:line="22" pos:column="40"/></name><argument_list pos:line="22" pos:column="40">(<argument><expr><operator pos:line="22" pos:column="41">&amp;<pos:position pos:line="22" pos:column="46"/></operator><name pos:line="22" pos:column="42">iter_instances<pos:position pos:line="22" pos:column="56"/></name></expr></argument>)<pos:position pos:line="22" pos:column="57"/></argument_list></call></expr></incr>)<pos:position pos:line="22" pos:column="58"/></control> <block pos:line="22" pos:column="59">{
    <decl_stmt><decl><type><specifier pos:line="23" pos:column="5">const<pos:position pos:line="23" pos:column="10"/></specifier> <name pos:line="23" pos:column="11">char<pos:position pos:line="23" pos:column="15"/></name> <modifier pos:line="23" pos:column="16">*<pos:position pos:line="23" pos:column="17"/></modifier></type><name pos:line="23" pos:column="17">name<pos:position pos:line="23" pos:column="21"/></name></decl>;<pos:position pos:line="23" pos:column="22"/></decl_stmt>

    <decl_stmt><decl><type><name pos:line="25" pos:column="5">data_volume_perf_t<pos:position pos:line="25" pos:column="23"/></name></type> <name pos:line="25" pos:column="24">perf_data<pos:position pos:line="25" pos:column="33"/></name> <init pos:line="25" pos:column="34">= <expr><block pos:line="25" pos:column="36">{<expr><literal type="number" pos:line="25" pos:column="37">0<pos:position pos:line="25" pos:column="38"/></literal></expr>}<pos:position pos:line="25" pos:column="39"/></block></expr></init></decl>;<pos:position pos:line="25" pos:column="40"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="26" pos:column="5">data_volume_perf_t<pos:position pos:line="26" pos:column="23"/></name> <modifier pos:line="26" pos:column="24">*<pos:position pos:line="26" pos:column="25"/></modifier></type><name pos:line="26" pos:column="25">v<pos:position pos:line="26" pos:column="26"/></name></decl>;<pos:position pos:line="26" pos:column="27"/></decl_stmt>

    <decl_stmt><decl><type><name pos:line="28" pos:column="5">na_elem_t<pos:position pos:line="28" pos:column="14"/></name> <modifier pos:line="28" pos:column="15">*<pos:position pos:line="28" pos:column="16"/></modifier></type><name pos:line="28" pos:column="16">elem_counters<pos:position pos:line="28" pos:column="29"/></name></decl>;<pos:position pos:line="28" pos:column="30"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="29" pos:column="5">na_elem_iter_t<pos:position pos:line="29" pos:column="19"/></name></type> <name pos:line="29" pos:column="20">iter_counters<pos:position pos:line="29" pos:column="33"/></name></decl>;<pos:position pos:line="29" pos:column="34"/></decl_stmt>

    <expr_stmt><expr><name><name pos:line="31" pos:column="5">perf_data<pos:position pos:line="31" pos:column="14"/></name><operator pos:line="31" pos:column="14">.<pos:position pos:line="31" pos:column="15"/></operator><name pos:line="31" pos:column="15">timestamp<pos:position pos:line="31" pos:column="24"/></name></name> <operator pos:line="31" pos:column="25">=<pos:position pos:line="31" pos:column="26"/></operator> <name pos:line="31" pos:column="27">timestamp<pos:position pos:line="31" pos:column="36"/></name></expr>;<pos:position pos:line="31" pos:column="37"/></expr_stmt>

    <expr_stmt><expr><name pos:line="33" pos:column="5">name<pos:position pos:line="33" pos:column="9"/></name> <operator pos:line="33" pos:column="10">=<pos:position pos:line="33" pos:column="11"/></operator> <call><name pos:line="33" pos:column="12">na_child_get_string<pos:position pos:line="33" pos:column="31"/></name><argument_list pos:line="33" pos:column="31">(<argument><expr><name pos:line="33" pos:column="32">elem_instance<pos:position pos:line="33" pos:column="45"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="33" pos:column="47">"name"<pos:position pos:line="33" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="55"/></expr_stmt>
    <if pos:line="34" pos:column="5">if <condition pos:line="34" pos:column="8">(<expr><name pos:line="34" pos:column="9">name<pos:position pos:line="34" pos:column="13"/></name> <operator pos:line="34" pos:column="14">==<pos:position pos:line="34" pos:column="16"/></operator> <name pos:line="34" pos:column="17">NULL<pos:position pos:line="34" pos:column="21"/></name></expr>)<pos:position pos:line="34" pos:column="22"/></condition><then pos:line="34" pos:column="22">
      <block type="pseudo"><continue pos:line="35" pos:column="7">continue;<pos:position pos:line="35" pos:column="16"/></continue></block></then></if>

    <comment type="block" pos:line="37" pos:column="5">/* get_volume_perf may return NULL if this volume is to be ignored. */</comment>
    <expr_stmt><expr><name pos:line="38" pos:column="5">v<pos:position pos:line="38" pos:column="6"/></name> <operator pos:line="38" pos:column="7">=<pos:position pos:line="38" pos:column="8"/></operator> <call><name pos:line="38" pos:column="9">get_volume_perf<pos:position pos:line="38" pos:column="24"/></name><argument_list pos:line="38" pos:column="24">(<argument><expr><name pos:line="38" pos:column="25">cvp<pos:position pos:line="38" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="30">name<pos:position pos:line="38" pos:column="34"/></name></expr></argument>)<pos:position pos:line="38" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="36"/></expr_stmt>
    <if pos:line="39" pos:column="5">if <condition pos:line="39" pos:column="8">(<expr><name pos:line="39" pos:column="9">v<pos:position pos:line="39" pos:column="10"/></name> <operator pos:line="39" pos:column="11">==<pos:position pos:line="39" pos:column="13"/></operator> <name pos:line="39" pos:column="14">NULL<pos:position pos:line="39" pos:column="18"/></name></expr>)<pos:position pos:line="39" pos:column="19"/></condition><then pos:line="39" pos:column="19">
      <block type="pseudo"><continue pos:line="40" pos:column="7">continue;<pos:position pos:line="40" pos:column="16"/></continue></block></then></if>

    <expr_stmt><expr><name pos:line="42" pos:column="5">elem_counters<pos:position pos:line="42" pos:column="18"/></name> <operator pos:line="42" pos:column="19">=<pos:position pos:line="42" pos:column="20"/></operator> <call><name pos:line="42" pos:column="21">na_elem_child<pos:position pos:line="42" pos:column="34"/></name><argument_list pos:line="42" pos:column="34">(<argument><expr><name pos:line="42" pos:column="35">elem_instance<pos:position pos:line="42" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="42" pos:column="50">"counters"<pos:position pos:line="42" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="42" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="62"/></expr_stmt>
    <if pos:line="43" pos:column="5">if <condition pos:line="43" pos:column="8">(<expr><name pos:line="43" pos:column="9">elem_counters<pos:position pos:line="43" pos:column="22"/></name> <operator pos:line="43" pos:column="23">==<pos:position pos:line="43" pos:column="25"/></operator> <name pos:line="43" pos:column="26">NULL<pos:position pos:line="43" pos:column="30"/></name></expr>)<pos:position pos:line="43" pos:column="31"/></condition><then pos:line="43" pos:column="31">
      <block type="pseudo"><continue pos:line="44" pos:column="7">continue;<pos:position pos:line="44" pos:column="16"/></continue></block></then></if>

    <expr_stmt><expr><name pos:line="46" pos:column="5">iter_counters<pos:position pos:line="46" pos:column="18"/></name> <operator pos:line="46" pos:column="19">=<pos:position pos:line="46" pos:column="20"/></operator> <call><name pos:line="46" pos:column="21">na_child_iterator<pos:position pos:line="46" pos:column="38"/></name><argument_list pos:line="46" pos:column="38">(<argument><expr><name pos:line="46" pos:column="39">elem_counters<pos:position pos:line="46" pos:column="52"/></name></expr></argument>)<pos:position pos:line="46" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="54"/></expr_stmt>
    <for pos:line="47" pos:column="5">for <control pos:line="47" pos:column="9">(<init><decl><type><name pos:line="47" pos:column="10">na_elem_t<pos:position pos:line="47" pos:column="19"/></name> <modifier pos:line="47" pos:column="20">*<pos:position pos:line="47" pos:column="21"/></modifier></type><name pos:line="47" pos:column="21">elem_counter<pos:position pos:line="47" pos:column="33"/></name> <init pos:line="47" pos:column="34">= <expr><call><name pos:line="47" pos:column="36">na_iterator_next<pos:position pos:line="47" pos:column="52"/></name><argument_list pos:line="47" pos:column="52">(<argument><expr><operator pos:line="47" pos:column="53">&amp;<pos:position pos:line="47" pos:column="58"/></operator><name pos:line="47" pos:column="54">iter_counters<pos:position pos:line="47" pos:column="67"/></name></expr></argument>)<pos:position pos:line="47" pos:column="68"/></argument_list></call></expr></init></decl>;<pos:position pos:line="47" pos:column="69"/></init>
         <condition><expr><name pos:line="48" pos:column="10">elem_counter<pos:position pos:line="48" pos:column="22"/></name> <operator pos:line="48" pos:column="23">!=<pos:position pos:line="48" pos:column="25"/></operator> <name pos:line="48" pos:column="26">NULL<pos:position pos:line="48" pos:column="30"/></name></expr>;<pos:position pos:line="48" pos:column="31"/></condition>
         <incr><expr><name pos:line="49" pos:column="10">elem_counter<pos:position pos:line="49" pos:column="22"/></name> <operator pos:line="49" pos:column="23">=<pos:position pos:line="49" pos:column="24"/></operator> <call><name pos:line="49" pos:column="25">na_iterator_next<pos:position pos:line="49" pos:column="41"/></name><argument_list pos:line="49" pos:column="41">(<argument><expr><operator pos:line="49" pos:column="42">&amp;<pos:position pos:line="49" pos:column="47"/></operator><name pos:line="49" pos:column="43">iter_counters<pos:position pos:line="49" pos:column="56"/></name></expr></argument>)<pos:position pos:line="49" pos:column="57"/></argument_list></call></expr></incr>)<pos:position pos:line="49" pos:column="58"/></control> <block pos:line="49" pos:column="59">{
      <decl_stmt><decl><type><specifier pos:line="50" pos:column="7">const<pos:position pos:line="50" pos:column="12"/></specifier> <name pos:line="50" pos:column="13">char<pos:position pos:line="50" pos:column="17"/></name> <modifier pos:line="50" pos:column="18">*<pos:position pos:line="50" pos:column="19"/></modifier></type><name pos:line="50" pos:column="19">name<pos:position pos:line="50" pos:column="23"/></name></decl>;<pos:position pos:line="50" pos:column="24"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="51" pos:column="7">uint64_t<pos:position pos:line="51" pos:column="15"/></name></type> <name pos:line="51" pos:column="16">value<pos:position pos:line="51" pos:column="21"/></name></decl>;<pos:position pos:line="51" pos:column="22"/></decl_stmt>

      <expr_stmt><expr><name pos:line="53" pos:column="7">name<pos:position pos:line="53" pos:column="11"/></name> <operator pos:line="53" pos:column="12">=<pos:position pos:line="53" pos:column="13"/></operator> <call><name pos:line="53" pos:column="14">na_child_get_string<pos:position pos:line="53" pos:column="33"/></name><argument_list pos:line="53" pos:column="33">(<argument><expr><name pos:line="53" pos:column="34">elem_counter<pos:position pos:line="53" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="53" pos:column="48">"name"<pos:position pos:line="53" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="53" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="56"/></expr_stmt>
      <if pos:line="54" pos:column="7">if <condition pos:line="54" pos:column="10">(<expr><name pos:line="54" pos:column="11">name<pos:position pos:line="54" pos:column="15"/></name> <operator pos:line="54" pos:column="16">==<pos:position pos:line="54" pos:column="18"/></operator> <name pos:line="54" pos:column="19">NULL<pos:position pos:line="54" pos:column="23"/></name></expr>)<pos:position pos:line="54" pos:column="24"/></condition><then pos:line="54" pos:column="24">
        <block type="pseudo"><continue pos:line="55" pos:column="9">continue;<pos:position pos:line="55" pos:column="18"/></continue></block></then></if>

      <expr_stmt><expr><name pos:line="57" pos:column="7">value<pos:position pos:line="57" pos:column="12"/></name> <operator pos:line="57" pos:column="13">=<pos:position pos:line="57" pos:column="14"/></operator> <call><name pos:line="57" pos:column="15">na_child_get_uint64<pos:position pos:line="57" pos:column="34"/></name><argument_list pos:line="57" pos:column="34">(<argument><expr><name pos:line="57" pos:column="35">elem_counter<pos:position pos:line="57" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="57" pos:column="49">"value"<pos:position pos:line="57" pos:column="56"/></literal></expr></argument>, <argument><expr><name pos:line="57" pos:column="58">UINT64_MAX<pos:position pos:line="57" pos:column="68"/></name></expr></argument>)<pos:position pos:line="57" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="70"/></expr_stmt>
      <if pos:line="58" pos:column="7">if <condition pos:line="58" pos:column="10">(<expr><name pos:line="58" pos:column="11">value<pos:position pos:line="58" pos:column="16"/></name> <operator pos:line="58" pos:column="17">==<pos:position pos:line="58" pos:column="19"/></operator> <name pos:line="58" pos:column="20">UINT64_MAX<pos:position pos:line="58" pos:column="30"/></name></expr>)<pos:position pos:line="58" pos:column="31"/></condition><then pos:line="58" pos:column="31">
        <block type="pseudo"><continue pos:line="59" pos:column="9">continue;<pos:position pos:line="59" pos:column="18"/></continue></block></then></if>

      <if pos:line="61" pos:column="7">if <condition pos:line="61" pos:column="10">(<expr><operator pos:line="61" pos:column="11">!<pos:position pos:line="61" pos:column="12"/></operator><call><name pos:line="61" pos:column="12">strcmp<pos:position pos:line="61" pos:column="18"/></name><argument_list pos:line="61" pos:column="18">(<argument><expr><name pos:line="61" pos:column="19">name<pos:position pos:line="61" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="61" pos:column="25">"read_data"<pos:position pos:line="61" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="61" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="61" pos:column="38"/></condition><then pos:line="61" pos:column="38"> <block pos:line="61" pos:column="39">{
        <expr_stmt><expr><name><name pos:line="62" pos:column="9">perf_data<pos:position pos:line="62" pos:column="18"/></name><operator pos:line="62" pos:column="18">.<pos:position pos:line="62" pos:column="19"/></operator><name pos:line="62" pos:column="19">read_bytes<pos:position pos:line="62" pos:column="29"/></name></name> <operator pos:line="62" pos:column="30">=<pos:position pos:line="62" pos:column="31"/></operator> <name pos:line="62" pos:column="32">value<pos:position pos:line="62" pos:column="37"/></name></expr>;<pos:position pos:line="62" pos:column="38"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="63" pos:column="9">perf_data<pos:position pos:line="63" pos:column="18"/></name><operator pos:line="63" pos:column="18">.<pos:position pos:line="63" pos:column="19"/></operator><name pos:line="63" pos:column="19">flags<pos:position pos:line="63" pos:column="24"/></name></name> <operator pos:line="63" pos:column="25">|=<pos:position pos:line="63" pos:column="27"/></operator> <name pos:line="63" pos:column="28">HAVE_VOLUME_PERF_BYTES_READ<pos:position pos:line="63" pos:column="55"/></name></expr>;<pos:position pos:line="63" pos:column="56"/></expr_stmt>
      }<pos:position pos:line="64" pos:column="8"/></block></then> <elseif pos:line="64" pos:column="9">else <if pos:line="64" pos:column="14">if <condition pos:line="64" pos:column="17">(<expr><operator pos:line="64" pos:column="18">!<pos:position pos:line="64" pos:column="19"/></operator><call><name pos:line="64" pos:column="19">strcmp<pos:position pos:line="64" pos:column="25"/></name><argument_list pos:line="64" pos:column="25">(<argument><expr><name pos:line="64" pos:column="26">name<pos:position pos:line="64" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="64" pos:column="32">"write_data"<pos:position pos:line="64" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="64" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="64" pos:column="46"/></condition><then pos:line="64" pos:column="46"> <block pos:line="64" pos:column="47">{
        <expr_stmt><expr><name><name pos:line="65" pos:column="9">perf_data<pos:position pos:line="65" pos:column="18"/></name><operator pos:line="65" pos:column="18">.<pos:position pos:line="65" pos:column="19"/></operator><name pos:line="65" pos:column="19">write_bytes<pos:position pos:line="65" pos:column="30"/></name></name> <operator pos:line="65" pos:column="31">=<pos:position pos:line="65" pos:column="32"/></operator> <name pos:line="65" pos:column="33">value<pos:position pos:line="65" pos:column="38"/></name></expr>;<pos:position pos:line="65" pos:column="39"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="66" pos:column="9">perf_data<pos:position pos:line="66" pos:column="18"/></name><operator pos:line="66" pos:column="18">.<pos:position pos:line="66" pos:column="19"/></operator><name pos:line="66" pos:column="19">flags<pos:position pos:line="66" pos:column="24"/></name></name> <operator pos:line="66" pos:column="25">|=<pos:position pos:line="66" pos:column="27"/></operator> <name pos:line="66" pos:column="28">HAVE_VOLUME_PERF_BYTES_WRITE<pos:position pos:line="66" pos:column="56"/></name></expr>;<pos:position pos:line="66" pos:column="57"/></expr_stmt>
      }<pos:position pos:line="67" pos:column="8"/></block></then></if></elseif> <elseif pos:line="67" pos:column="9">else <if pos:line="67" pos:column="14">if <condition pos:line="67" pos:column="17">(<expr><operator pos:line="67" pos:column="18">!<pos:position pos:line="67" pos:column="19"/></operator><call><name pos:line="67" pos:column="19">strcmp<pos:position pos:line="67" pos:column="25"/></name><argument_list pos:line="67" pos:column="25">(<argument><expr><name pos:line="67" pos:column="26">name<pos:position pos:line="67" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="67" pos:column="32">"read_ops"<pos:position pos:line="67" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="67" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="67" pos:column="44"/></condition><then pos:line="67" pos:column="44"> <block pos:line="67" pos:column="45">{
        <expr_stmt><expr><name><name pos:line="68" pos:column="9">perf_data<pos:position pos:line="68" pos:column="18"/></name><operator pos:line="68" pos:column="18">.<pos:position pos:line="68" pos:column="19"/></operator><name pos:line="68" pos:column="19">read_ops<pos:position pos:line="68" pos:column="27"/></name></name> <operator pos:line="68" pos:column="28">=<pos:position pos:line="68" pos:column="29"/></operator> <name pos:line="68" pos:column="30">value<pos:position pos:line="68" pos:column="35"/></name></expr>;<pos:position pos:line="68" pos:column="36"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="69" pos:column="9">perf_data<pos:position pos:line="69" pos:column="18"/></name><operator pos:line="69" pos:column="18">.<pos:position pos:line="69" pos:column="19"/></operator><name pos:line="69" pos:column="19">flags<pos:position pos:line="69" pos:column="24"/></name></name> <operator pos:line="69" pos:column="25">|=<pos:position pos:line="69" pos:column="27"/></operator> <name pos:line="69" pos:column="28">HAVE_VOLUME_PERF_OPS_READ<pos:position pos:line="69" pos:column="53"/></name></expr>;<pos:position pos:line="69" pos:column="54"/></expr_stmt>
      }<pos:position pos:line="70" pos:column="8"/></block></then></if></elseif> <elseif pos:line="70" pos:column="9">else <if pos:line="70" pos:column="14">if <condition pos:line="70" pos:column="17">(<expr><operator pos:line="70" pos:column="18">!<pos:position pos:line="70" pos:column="19"/></operator><call><name pos:line="70" pos:column="19">strcmp<pos:position pos:line="70" pos:column="25"/></name><argument_list pos:line="70" pos:column="25">(<argument><expr><name pos:line="70" pos:column="26">name<pos:position pos:line="70" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="70" pos:column="32">"write_ops"<pos:position pos:line="70" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="70" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="70" pos:column="45"/></condition><then pos:line="70" pos:column="45"> <block pos:line="70" pos:column="46">{
        <expr_stmt><expr><name><name pos:line="71" pos:column="9">perf_data<pos:position pos:line="71" pos:column="18"/></name><operator pos:line="71" pos:column="18">.<pos:position pos:line="71" pos:column="19"/></operator><name pos:line="71" pos:column="19">write_ops<pos:position pos:line="71" pos:column="28"/></name></name> <operator pos:line="71" pos:column="29">=<pos:position pos:line="71" pos:column="30"/></operator> <name pos:line="71" pos:column="31">value<pos:position pos:line="71" pos:column="36"/></name></expr>;<pos:position pos:line="71" pos:column="37"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="72" pos:column="9">perf_data<pos:position pos:line="72" pos:column="18"/></name><operator pos:line="72" pos:column="18">.<pos:position pos:line="72" pos:column="19"/></operator><name pos:line="72" pos:column="19">flags<pos:position pos:line="72" pos:column="24"/></name></name> <operator pos:line="72" pos:column="25">|=<pos:position pos:line="72" pos:column="27"/></operator> <name pos:line="72" pos:column="28">HAVE_VOLUME_PERF_OPS_WRITE<pos:position pos:line="72" pos:column="54"/></name></expr>;<pos:position pos:line="72" pos:column="55"/></expr_stmt>
      }<pos:position pos:line="73" pos:column="8"/></block></then></if></elseif> <elseif pos:line="73" pos:column="9">else <if pos:line="73" pos:column="14">if <condition pos:line="73" pos:column="17">(<expr><operator pos:line="73" pos:column="18">!<pos:position pos:line="73" pos:column="19"/></operator><call><name pos:line="73" pos:column="19">strcmp<pos:position pos:line="73" pos:column="25"/></name><argument_list pos:line="73" pos:column="25">(<argument><expr><name pos:line="73" pos:column="26">name<pos:position pos:line="73" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="73" pos:column="32">"read_latency"<pos:position pos:line="73" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="73" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="73" pos:column="48"/></condition><then pos:line="73" pos:column="48"> <block pos:line="73" pos:column="49">{
        <expr_stmt><expr><name><name pos:line="74" pos:column="9">perf_data<pos:position pos:line="74" pos:column="18"/></name><operator pos:line="74" pos:column="18">.<pos:position pos:line="74" pos:column="19"/></operator><name pos:line="74" pos:column="19">read_latency<pos:position pos:line="74" pos:column="31"/></name></name> <operator pos:line="74" pos:column="32">=<pos:position pos:line="74" pos:column="33"/></operator> <name pos:line="74" pos:column="34">value<pos:position pos:line="74" pos:column="39"/></name></expr>;<pos:position pos:line="74" pos:column="40"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="75" pos:column="9">perf_data<pos:position pos:line="75" pos:column="18"/></name><operator pos:line="75" pos:column="18">.<pos:position pos:line="75" pos:column="19"/></operator><name pos:line="75" pos:column="19">flags<pos:position pos:line="75" pos:column="24"/></name></name> <operator pos:line="75" pos:column="25">|=<pos:position pos:line="75" pos:column="27"/></operator> <name pos:line="75" pos:column="28">HAVE_VOLUME_PERF_LATENCY_READ<pos:position pos:line="75" pos:column="57"/></name></expr>;<pos:position pos:line="75" pos:column="58"/></expr_stmt>
      }<pos:position pos:line="76" pos:column="8"/></block></then></if></elseif> <elseif pos:line="76" pos:column="9">else <if pos:line="76" pos:column="14">if <condition pos:line="76" pos:column="17">(<expr><operator pos:line="76" pos:column="18">!<pos:position pos:line="76" pos:column="19"/></operator><call><name pos:line="76" pos:column="19">strcmp<pos:position pos:line="76" pos:column="25"/></name><argument_list pos:line="76" pos:column="25">(<argument><expr><name pos:line="76" pos:column="26">name<pos:position pos:line="76" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="76" pos:column="32">"write_latency"<pos:position pos:line="76" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="76" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="76" pos:column="49"/></condition><then pos:line="76" pos:column="49"> <block pos:line="76" pos:column="50">{
        <expr_stmt><expr><name><name pos:line="77" pos:column="9">perf_data<pos:position pos:line="77" pos:column="18"/></name><operator pos:line="77" pos:column="18">.<pos:position pos:line="77" pos:column="19"/></operator><name pos:line="77" pos:column="19">write_latency<pos:position pos:line="77" pos:column="32"/></name></name> <operator pos:line="77" pos:column="33">=<pos:position pos:line="77" pos:column="34"/></operator> <name pos:line="77" pos:column="35">value<pos:position pos:line="77" pos:column="40"/></name></expr>;<pos:position pos:line="77" pos:column="41"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="78" pos:column="9">perf_data<pos:position pos:line="78" pos:column="18"/></name><operator pos:line="78" pos:column="18">.<pos:position pos:line="78" pos:column="19"/></operator><name pos:line="78" pos:column="19">flags<pos:position pos:line="78" pos:column="24"/></name></name> <operator pos:line="78" pos:column="25">|=<pos:position pos:line="78" pos:column="27"/></operator> <name pos:line="78" pos:column="28">HAVE_VOLUME_PERF_LATENCY_WRITE<pos:position pos:line="78" pos:column="58"/></name></expr>;<pos:position pos:line="78" pos:column="59"/></expr_stmt>
      }<pos:position pos:line="79" pos:column="8"/></block></then></if></elseif></if>
    }<pos:position pos:line="80" pos:column="6"/></block></for> <comment type="block" pos:line="80" pos:column="7">/* for (elem_counter) */</comment>

    <expr_stmt><expr><call><name pos:line="82" pos:column="5">submit_volume_perf_data<pos:position pos:line="82" pos:column="28"/></name><argument_list pos:line="82" pos:column="28">(<argument><expr><name pos:line="82" pos:column="29">hostname<pos:position pos:line="82" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="82" pos:column="39">v<pos:position pos:line="82" pos:column="40"/></name></expr></argument>, <argument><expr><operator pos:line="82" pos:column="42">&amp;<pos:position pos:line="82" pos:column="47"/></operator><name pos:line="82" pos:column="43">perf_data<pos:position pos:line="82" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="82" pos:column="54">interval<pos:position pos:line="82" pos:column="62"/></name></expr></argument>)<pos:position pos:line="82" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="64"/></expr_stmt>
  }<pos:position pos:line="83" pos:column="4"/></block></for> <comment type="block" pos:line="83" pos:column="5">/* for (volume) */</comment>

  <return pos:line="85" pos:column="3">return <expr><operator pos:line="85" pos:column="10">(<pos:position pos:line="85" pos:column="11"/></operator><literal type="number" pos:line="85" pos:column="11">0<pos:position pos:line="85" pos:column="12"/></literal><operator pos:line="85" pos:column="12">)<pos:position pos:line="85" pos:column="13"/></operator></expr>;<pos:position pos:line="85" pos:column="14"/></return>
}<pos:position pos:line="86" pos:column="2"/></block></function></unit>
