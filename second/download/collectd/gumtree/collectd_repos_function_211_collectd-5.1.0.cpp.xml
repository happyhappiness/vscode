<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_211_collectd-5.1.0.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">getval<pos:position pos:line="1" pos:column="18"/></name> <parameter_list pos:line="1" pos:column="19">(<parameter><decl><type><name pos:line="1" pos:column="20">lcc_connection_t<pos:position pos:line="1" pos:column="36"/></name> <modifier pos:line="1" pos:column="37">*<pos:position pos:line="1" pos:column="38"/></modifier></type><name pos:line="1" pos:column="38">c<pos:position pos:line="1" pos:column="39"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="41">int<pos:position pos:line="1" pos:column="44"/></name></type> <name pos:line="1" pos:column="45">argc<pos:position pos:line="1" pos:column="49"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="51">char<pos:position pos:line="1" pos:column="55"/></name> <modifier pos:line="1" pos:column="56">*<pos:position pos:line="1" pos:column="57"/></modifier><modifier pos:line="1" pos:column="57">*<pos:position pos:line="1" pos:column="58"/></modifier></type><name pos:line="1" pos:column="58">argv<pos:position pos:line="1" pos:column="62"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="63"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">lcc_identifier_t<pos:position pos:line="3" pos:column="19"/></name></type> <name pos:line="3" pos:column="20">ident<pos:position pos:line="3" pos:column="25"/></name></decl>;<pos:position pos:line="3" pos:column="26"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="5" pos:column="3">size_t<pos:position pos:line="5" pos:column="9"/></name></type>   <name pos:line="5" pos:column="12">ret_values_num<pos:position pos:line="5" pos:column="26"/></name>   <init pos:line="5" pos:column="29">= <expr><literal type="number" pos:line="5" pos:column="31">0<pos:position pos:line="5" pos:column="32"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="33"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">gauge_t<pos:position pos:line="6" pos:column="10"/></name> <modifier pos:line="6" pos:column="11">*<pos:position pos:line="6" pos:column="12"/></modifier></type><name pos:line="6" pos:column="12">ret_values<pos:position pos:line="6" pos:column="22"/></name>       <init pos:line="6" pos:column="29">= <expr><name pos:line="6" pos:column="31">NULL<pos:position pos:line="6" pos:column="35"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="36"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">char<pos:position pos:line="7" pos:column="7"/></name>   <modifier pos:line="7" pos:column="10">*<pos:position pos:line="7" pos:column="11"/></modifier><modifier pos:line="7" pos:column="11">*<pos:position pos:line="7" pos:column="12"/></modifier></type><name pos:line="7" pos:column="12">ret_values_names<pos:position pos:line="7" pos:column="28"/></name> <init pos:line="7" pos:column="29">= <expr><name pos:line="7" pos:column="31">NULL<pos:position pos:line="7" pos:column="35"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="36"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="9" pos:column="3">int<pos:position pos:line="9" pos:column="6"/></name></type> <name pos:line="9" pos:column="7">status<pos:position pos:line="9" pos:column="13"/></name></decl>;<pos:position pos:line="9" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">size_t<pos:position pos:line="10" pos:column="9"/></name></type> <name pos:line="10" pos:column="10">i<pos:position pos:line="10" pos:column="11"/></name></decl>;<pos:position pos:line="10" pos:column="12"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="12" pos:column="3">assert<pos:position pos:line="12" pos:column="9"/></name> <argument_list pos:line="12" pos:column="10">(<argument><expr><call><name pos:line="12" pos:column="11">strcasecmp<pos:position pos:line="12" pos:column="21"/></name> <argument_list pos:line="12" pos:column="22">(<argument><expr><name><name pos:line="12" pos:column="23">argv<pos:position pos:line="12" pos:column="27"/></name><index pos:line="12" pos:column="27">[<expr><literal type="number" pos:line="12" pos:column="28">0<pos:position pos:line="12" pos:column="29"/></literal></expr>]<pos:position pos:line="12" pos:column="30"/></index></name></expr></argument>, <argument><expr><literal type="string" pos:line="12" pos:column="32">"getval"<pos:position pos:line="12" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="41"/></argument_list></call> <operator pos:line="12" pos:column="42">==<pos:position pos:line="12" pos:column="44"/></operator> <literal type="number" pos:line="12" pos:column="45">0<pos:position pos:line="12" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="48"/></expr_stmt>

  <if pos:line="14" pos:column="3">if <condition pos:line="14" pos:column="6">(<expr><name pos:line="14" pos:column="7">argc<pos:position pos:line="14" pos:column="11"/></name> <operator pos:line="14" pos:column="12">!=<pos:position pos:line="14" pos:column="14"/></operator> <literal type="number" pos:line="14" pos:column="15">2<pos:position pos:line="14" pos:column="16"/></literal></expr>)<pos:position pos:line="14" pos:column="17"/></condition><then pos:line="14" pos:column="17"> <block pos:line="14" pos:column="18">{
    <expr_stmt><expr><call><name pos:line="15" pos:column="5">fprintf<pos:position pos:line="15" pos:column="12"/></name> <argument_list pos:line="15" pos:column="13">(<argument><expr><name pos:line="15" pos:column="14">stderr<pos:position pos:line="15" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="15" pos:column="22">"ERROR: getval: Missing identifier.\n"<pos:position pos:line="15" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="62"/></expr_stmt>
    <return pos:line="16" pos:column="5">return <expr><operator pos:line="16" pos:column="12">(<pos:position pos:line="16" pos:column="13"/></operator><operator pos:line="16" pos:column="13">-<pos:position pos:line="16" pos:column="14"/></operator><literal type="number" pos:line="16" pos:column="14">1<pos:position pos:line="16" pos:column="15"/></literal><operator pos:line="16" pos:column="15">)<pos:position pos:line="16" pos:column="16"/></operator></expr>;<pos:position pos:line="16" pos:column="17"/></return>
  }<pos:position pos:line="17" pos:column="4"/></block></then></if>

  <expr_stmt><expr><call><name pos:line="19" pos:column="3">memset<pos:position pos:line="19" pos:column="9"/></name> <argument_list pos:line="19" pos:column="10">(<argument><expr><operator pos:line="19" pos:column="11">&amp;<pos:position pos:line="19" pos:column="16"/></operator><name pos:line="19" pos:column="12">ident<pos:position pos:line="19" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="19" pos:column="19">0<pos:position pos:line="19" pos:column="20"/></literal></expr></argument>, <argument><expr><sizeof pos:line="19" pos:column="22">sizeof <argument_list pos:line="19" pos:column="29">(<argument><expr><name pos:line="19" pos:column="30">ident<pos:position pos:line="19" pos:column="35"/></name></expr></argument>)<pos:position pos:line="19" pos:column="36"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="19" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="38"/></expr_stmt>
  <expr_stmt><expr><name pos:line="20" pos:column="3">status<pos:position pos:line="20" pos:column="9"/></name> <operator pos:line="20" pos:column="10">=<pos:position pos:line="20" pos:column="11"/></operator> <call><name pos:line="20" pos:column="12">parse_identifier<pos:position pos:line="20" pos:column="28"/></name> <argument_list pos:line="20" pos:column="29">(<argument><expr><name pos:line="20" pos:column="30">c<pos:position pos:line="20" pos:column="31"/></name></expr></argument>, <argument><expr><name><name pos:line="20" pos:column="33">argv<pos:position pos:line="20" pos:column="37"/></name><index pos:line="20" pos:column="37">[<expr><literal type="number" pos:line="20" pos:column="38">1<pos:position pos:line="20" pos:column="39"/></literal></expr>]<pos:position pos:line="20" pos:column="40"/></index></name></expr></argument>, <argument><expr><operator pos:line="20" pos:column="42">&amp;<pos:position pos:line="20" pos:column="47"/></operator><name pos:line="20" pos:column="43">ident<pos:position pos:line="20" pos:column="48"/></name></expr></argument>)<pos:position pos:line="20" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="50"/></expr_stmt>
  <if pos:line="21" pos:column="3">if <condition pos:line="21" pos:column="6">(<expr><name pos:line="21" pos:column="7">status<pos:position pos:line="21" pos:column="13"/></name> <operator pos:line="21" pos:column="14">!=<pos:position pos:line="21" pos:column="16"/></operator> <literal type="number" pos:line="21" pos:column="17">0<pos:position pos:line="21" pos:column="18"/></literal></expr>)<pos:position pos:line="21" pos:column="19"/></condition><then pos:line="21" pos:column="19">
    <block type="pseudo"><return pos:line="22" pos:column="5">return <expr><operator pos:line="22" pos:column="12">(<pos:position pos:line="22" pos:column="13"/></operator><name pos:line="22" pos:column="13">status<pos:position pos:line="22" pos:column="19"/></name><operator pos:line="22" pos:column="19">)<pos:position pos:line="22" pos:column="20"/></operator></expr>;<pos:position pos:line="22" pos:column="21"/></return></block></then></if>

<cpp:define pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">define<pos:position pos:line="24" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="24" pos:column="9">BAIL_OUT<pos:position pos:line="24" pos:column="17"/></name><parameter_list pos:line="24" pos:column="17">(<parameter><type><name pos:line="24" pos:column="18">s<pos:position pos:line="24" pos:column="19"/></name></type></parameter>)<pos:position pos:line="24" pos:column="20"/></parameter_list></cpp:macro> \
  <cpp:value pos:line="25" pos:column="3">do { \
    if (ret_values != NULL) \
      free (ret_values); \
    if (ret_values_names != NULL) { \
      for (i = 0; i &lt; ret_values_num; ++i) \
        free (ret_values_names[i]); \
      free (ret_values_names); \
    } \
    ret_values_num = 0; \
    return (s); \
  } while (0)<pos:position pos:line="35" pos:column="14"/></cpp:value></cpp:define>

  <expr_stmt><expr><name pos:line="37" pos:column="3">status<pos:position pos:line="37" pos:column="9"/></name> <operator pos:line="37" pos:column="10">=<pos:position pos:line="37" pos:column="11"/></operator> <call><name pos:line="37" pos:column="12">lcc_getval<pos:position pos:line="37" pos:column="22"/></name> <argument_list pos:line="37" pos:column="23">(<argument><expr><name pos:line="37" pos:column="24">c<pos:position pos:line="37" pos:column="25"/></name></expr></argument>, <argument><expr><operator pos:line="37" pos:column="27">&amp;<pos:position pos:line="37" pos:column="32"/></operator><name pos:line="37" pos:column="28">ident<pos:position pos:line="37" pos:column="33"/></name></expr></argument>,
      <argument><expr><operator pos:line="38" pos:column="7">&amp;<pos:position pos:line="38" pos:column="12"/></operator><name pos:line="38" pos:column="8">ret_values_num<pos:position pos:line="38" pos:column="22"/></name></expr></argument>, <argument><expr><operator pos:line="38" pos:column="24">&amp;<pos:position pos:line="38" pos:column="29"/></operator><name pos:line="38" pos:column="25">ret_values<pos:position pos:line="38" pos:column="35"/></name></expr></argument>, <argument><expr><operator pos:line="38" pos:column="37">&amp;<pos:position pos:line="38" pos:column="42"/></operator><name pos:line="38" pos:column="38">ret_values_names<pos:position pos:line="38" pos:column="54"/></name></expr></argument>)<pos:position pos:line="38" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="56"/></expr_stmt>
  <if pos:line="39" pos:column="3">if <condition pos:line="39" pos:column="6">(<expr><name pos:line="39" pos:column="7">status<pos:position pos:line="39" pos:column="13"/></name> <operator pos:line="39" pos:column="14">!=<pos:position pos:line="39" pos:column="16"/></operator> <literal type="number" pos:line="39" pos:column="17">0<pos:position pos:line="39" pos:column="18"/></literal></expr>)<pos:position pos:line="39" pos:column="19"/></condition><then pos:line="39" pos:column="19"> <block pos:line="39" pos:column="20">{
    <expr_stmt><expr><call><name pos:line="40" pos:column="5">fprintf<pos:position pos:line="40" pos:column="12"/></name> <argument_list pos:line="40" pos:column="13">(<argument><expr><name pos:line="40" pos:column="14">stderr<pos:position pos:line="40" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="40" pos:column="22">"ERROR: %s\n"<pos:position pos:line="40" pos:column="35"/></literal></expr></argument>, <argument><expr><call><name pos:line="40" pos:column="37">lcc_strerror<pos:position pos:line="40" pos:column="49"/></name> <argument_list pos:line="40" pos:column="50">(<argument><expr><name pos:line="40" pos:column="51">c<pos:position pos:line="40" pos:column="52"/></name></expr></argument>)<pos:position pos:line="40" pos:column="53"/></argument_list></call></expr></argument>)<pos:position pos:line="40" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="55"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="41" pos:column="5">BAIL_OUT<pos:position pos:line="41" pos:column="13"/></name> <argument_list pos:line="41" pos:column="14">(<argument><expr><operator pos:line="41" pos:column="15">-<pos:position pos:line="41" pos:column="16"/></operator><literal type="number" pos:line="41" pos:column="16">1<pos:position pos:line="41" pos:column="17"/></literal></expr></argument>)<pos:position pos:line="41" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="19"/></expr_stmt>
  }<pos:position pos:line="42" pos:column="4"/></block></then></if>

  <for pos:line="44" pos:column="3">for <control pos:line="44" pos:column="7">(<init><expr><name pos:line="44" pos:column="8">i<pos:position pos:line="44" pos:column="9"/></name> <operator pos:line="44" pos:column="10">=<pos:position pos:line="44" pos:column="11"/></operator> <literal type="number" pos:line="44" pos:column="12">0<pos:position pos:line="44" pos:column="13"/></literal></expr>;<pos:position pos:line="44" pos:column="14"/></init> <condition><expr><name pos:line="44" pos:column="15">i<pos:position pos:line="44" pos:column="16"/></name> <operator pos:line="44" pos:column="17">&lt;<pos:position pos:line="44" pos:column="21"/></operator> <name pos:line="44" pos:column="19">ret_values_num<pos:position pos:line="44" pos:column="33"/></name></expr>;<pos:position pos:line="44" pos:column="34"/></condition> <incr><expr><operator pos:line="44" pos:column="35">++<pos:position pos:line="44" pos:column="37"/></operator><name pos:line="44" pos:column="37">i<pos:position pos:line="44" pos:column="38"/></name></expr></incr>)<pos:position pos:line="44" pos:column="39"/></control>
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="45" pos:column="5">printf<pos:position pos:line="45" pos:column="11"/></name> <argument_list pos:line="45" pos:column="12">(<argument><expr><literal type="string" pos:line="45" pos:column="13">"%s=%e\n"<pos:position pos:line="45" pos:column="22"/></literal></expr></argument>, <argument><expr><name><name pos:line="45" pos:column="24">ret_values_names<pos:position pos:line="45" pos:column="40"/></name><index pos:line="45" pos:column="40">[<expr><name pos:line="45" pos:column="41">i<pos:position pos:line="45" pos:column="42"/></name></expr>]<pos:position pos:line="45" pos:column="43"/></index></name></expr></argument>, <argument><expr><name><name pos:line="45" pos:column="45">ret_values<pos:position pos:line="45" pos:column="55"/></name><index pos:line="45" pos:column="55">[<expr><name pos:line="45" pos:column="56">i<pos:position pos:line="45" pos:column="57"/></name></expr>]<pos:position pos:line="45" pos:column="58"/></index></name></expr></argument>)<pos:position pos:line="45" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="60"/></expr_stmt></block></for>
  <expr_stmt><expr><call><name pos:line="46" pos:column="3">BAIL_OUT<pos:position pos:line="46" pos:column="11"/></name> <argument_list pos:line="46" pos:column="12">(<argument><expr><literal type="number" pos:line="46" pos:column="13">0<pos:position pos:line="46" pos:column="14"/></literal></expr></argument>)<pos:position pos:line="46" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="16"/></expr_stmt>
<cpp:undef pos:line="47" pos:column="1">#<cpp:directive pos:line="47" pos:column="2">undef<pos:position pos:line="47" pos:column="7"/></cpp:directive> <name pos:line="47" pos:column="8">BAIL_OUT<pos:position pos:line="47" pos:column="16"/></name></cpp:undef>
}<pos:position pos:line="48" pos:column="2"/></block></function></unit>
