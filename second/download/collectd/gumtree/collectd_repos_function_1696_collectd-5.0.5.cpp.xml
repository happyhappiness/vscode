<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1696_collectd-5.0.5.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">plugin_insert_read<pos:position pos:line="1" pos:column="30"/></name> <parameter_list pos:line="1" pos:column="31">(<parameter><decl><type><name pos:line="1" pos:column="32">read_func_t<pos:position pos:line="1" pos:column="43"/></name> <modifier pos:line="1" pos:column="44">*<pos:position pos:line="1" pos:column="45"/></modifier></type><name pos:line="1" pos:column="45">rf<pos:position pos:line="1" pos:column="47"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="48"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">status<pos:position pos:line="3" pos:column="19"/></name></decl>;<pos:position pos:line="3" pos:column="20"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">llentry_t<pos:position pos:line="4" pos:column="18"/></name> <modifier pos:line="4" pos:column="19">*<pos:position pos:line="4" pos:column="20"/></modifier></type><name pos:line="4" pos:column="20">le<pos:position pos:line="4" pos:column="22"/></name></decl>;<pos:position pos:line="4" pos:column="23"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="6" pos:column="9">pthread_mutex_lock<pos:position pos:line="6" pos:column="27"/></name> <argument_list pos:line="6" pos:column="28">(<argument><expr><operator pos:line="6" pos:column="29">&amp;<pos:position pos:line="6" pos:column="34"/></operator><name pos:line="6" pos:column="30">read_lock<pos:position pos:line="6" pos:column="39"/></name></expr></argument>)<pos:position pos:line="6" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="41"/></expr_stmt>

	<if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><name pos:line="8" pos:column="13">read_list<pos:position pos:line="8" pos:column="22"/></name> <operator pos:line="8" pos:column="23">==<pos:position pos:line="8" pos:column="25"/></operator> <name pos:line="8" pos:column="26">NULL<pos:position pos:line="8" pos:column="30"/></name></expr>)<pos:position pos:line="8" pos:column="31"/></condition><then pos:line="8" pos:column="31">
	<block pos:line="9" pos:column="9">{
		<expr_stmt><expr><name pos:line="10" pos:column="17">read_list<pos:position pos:line="10" pos:column="26"/></name> <operator pos:line="10" pos:column="27">=<pos:position pos:line="10" pos:column="28"/></operator> <call><name pos:line="10" pos:column="29">llist_create<pos:position pos:line="10" pos:column="41"/></name> <argument_list pos:line="10" pos:column="42">()<pos:position pos:line="10" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="45"/></expr_stmt>
		<if pos:line="11" pos:column="17">if <condition pos:line="11" pos:column="20">(<expr><name pos:line="11" pos:column="21">read_list<pos:position pos:line="11" pos:column="30"/></name> <operator pos:line="11" pos:column="31">==<pos:position pos:line="11" pos:column="33"/></operator> <name pos:line="11" pos:column="34">NULL<pos:position pos:line="11" pos:column="38"/></name></expr>)<pos:position pos:line="11" pos:column="39"/></condition><then pos:line="11" pos:column="39">
		<block pos:line="12" pos:column="17">{
			<expr_stmt><expr><call><name pos:line="13" pos:column="25">pthread_mutex_unlock<pos:position pos:line="13" pos:column="45"/></name> <argument_list pos:line="13" pos:column="46">(<argument><expr><operator pos:line="13" pos:column="47">&amp;<pos:position pos:line="13" pos:column="52"/></operator><name pos:line="13" pos:column="48">read_lock<pos:position pos:line="13" pos:column="57"/></name></expr></argument>)<pos:position pos:line="13" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="59"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="14" pos:column="25">ERROR<pos:position pos:line="14" pos:column="30"/></name> <argument_list pos:line="14" pos:column="31">(<argument><expr><literal type="string" pos:line="14" pos:column="32">"plugin_insert_read: read_list failed."<pos:position pos:line="14" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="73"/></expr_stmt>
			<return pos:line="15" pos:column="25">return <expr><operator pos:line="15" pos:column="32">(<pos:position pos:line="15" pos:column="33"/></operator><operator pos:line="15" pos:column="33">-<pos:position pos:line="15" pos:column="34"/></operator><literal type="number" pos:line="15" pos:column="34">1<pos:position pos:line="15" pos:column="35"/></literal><operator pos:line="15" pos:column="35">)<pos:position pos:line="15" pos:column="36"/></operator></expr>;<pos:position pos:line="15" pos:column="37"/></return>
		}<pos:position pos:line="16" pos:column="18"/></block></then></if>
	}<pos:position pos:line="17" pos:column="10"/></block></then></if>

	<if pos:line="19" pos:column="9">if <condition pos:line="19" pos:column="12">(<expr><name pos:line="19" pos:column="13">read_heap<pos:position pos:line="19" pos:column="22"/></name> <operator pos:line="19" pos:column="23">==<pos:position pos:line="19" pos:column="25"/></operator> <name pos:line="19" pos:column="26">NULL<pos:position pos:line="19" pos:column="30"/></name></expr>)<pos:position pos:line="19" pos:column="31"/></condition><then pos:line="19" pos:column="31">
	<block pos:line="20" pos:column="9">{
		<expr_stmt><expr><name pos:line="21" pos:column="17">read_heap<pos:position pos:line="21" pos:column="26"/></name> <operator pos:line="21" pos:column="27">=<pos:position pos:line="21" pos:column="28"/></operator> <call><name pos:line="21" pos:column="29">c_heap_create<pos:position pos:line="21" pos:column="42"/></name> <argument_list pos:line="21" pos:column="43">(<argument><expr><name pos:line="21" pos:column="44">plugin_compare_read_func<pos:position pos:line="21" pos:column="68"/></name></expr></argument>)<pos:position pos:line="21" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="70"/></expr_stmt>
		<if pos:line="22" pos:column="17">if <condition pos:line="22" pos:column="20">(<expr><name pos:line="22" pos:column="21">read_heap<pos:position pos:line="22" pos:column="30"/></name> <operator pos:line="22" pos:column="31">==<pos:position pos:line="22" pos:column="33"/></operator> <name pos:line="22" pos:column="34">NULL<pos:position pos:line="22" pos:column="38"/></name></expr>)<pos:position pos:line="22" pos:column="39"/></condition><then pos:line="22" pos:column="39">
		<block pos:line="23" pos:column="17">{
			<expr_stmt><expr><call><name pos:line="24" pos:column="25">pthread_mutex_unlock<pos:position pos:line="24" pos:column="45"/></name> <argument_list pos:line="24" pos:column="46">(<argument><expr><operator pos:line="24" pos:column="47">&amp;<pos:position pos:line="24" pos:column="52"/></operator><name pos:line="24" pos:column="48">read_lock<pos:position pos:line="24" pos:column="57"/></name></expr></argument>)<pos:position pos:line="24" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="59"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="25" pos:column="25">ERROR<pos:position pos:line="25" pos:column="30"/></name> <argument_list pos:line="25" pos:column="31">(<argument><expr><literal type="string" pos:line="25" pos:column="32">"plugin_insert_read: c_heap_create failed."<pos:position pos:line="25" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="77"/></expr_stmt>
			<return pos:line="26" pos:column="25">return <expr><operator pos:line="26" pos:column="32">(<pos:position pos:line="26" pos:column="33"/></operator><operator pos:line="26" pos:column="33">-<pos:position pos:line="26" pos:column="34"/></operator><literal type="number" pos:line="26" pos:column="34">1<pos:position pos:line="26" pos:column="35"/></literal><operator pos:line="26" pos:column="35">)<pos:position pos:line="26" pos:column="36"/></operator></expr>;<pos:position pos:line="26" pos:column="37"/></return>
		}<pos:position pos:line="27" pos:column="18"/></block></then></if>
	}<pos:position pos:line="28" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="30" pos:column="9">le<pos:position pos:line="30" pos:column="11"/></name> <operator pos:line="30" pos:column="12">=<pos:position pos:line="30" pos:column="13"/></operator> <call><name pos:line="30" pos:column="14">llist_search<pos:position pos:line="30" pos:column="26"/></name> <argument_list pos:line="30" pos:column="27">(<argument><expr><name pos:line="30" pos:column="28">read_list<pos:position pos:line="30" pos:column="37"/></name></expr></argument>, <argument><expr><name><name pos:line="30" pos:column="39">rf<pos:position pos:line="30" pos:column="41"/></name><operator pos:line="30" pos:column="41">-&gt;<pos:position pos:line="30" pos:column="46"/></operator><name pos:line="30" pos:column="43">rf_name<pos:position pos:line="30" pos:column="50"/></name></name></expr></argument>)<pos:position pos:line="30" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="52"/></expr_stmt>
	<if pos:line="31" pos:column="9">if <condition pos:line="31" pos:column="12">(<expr><name pos:line="31" pos:column="13">le<pos:position pos:line="31" pos:column="15"/></name> <operator pos:line="31" pos:column="16">!=<pos:position pos:line="31" pos:column="18"/></operator> <name pos:line="31" pos:column="19">NULL<pos:position pos:line="31" pos:column="23"/></name></expr>)<pos:position pos:line="31" pos:column="24"/></condition><then pos:line="31" pos:column="24">
	<block pos:line="32" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="33" pos:column="17">pthread_mutex_unlock<pos:position pos:line="33" pos:column="37"/></name> <argument_list pos:line="33" pos:column="38">(<argument><expr><operator pos:line="33" pos:column="39">&amp;<pos:position pos:line="33" pos:column="44"/></operator><name pos:line="33" pos:column="40">read_lock<pos:position pos:line="33" pos:column="49"/></name></expr></argument>)<pos:position pos:line="33" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="51"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="34" pos:column="17">WARNING<pos:position pos:line="34" pos:column="24"/></name> <argument_list pos:line="34" pos:column="25">(<argument><expr><literal type="string" pos:line="34" pos:column="26">"The read function \"%s\" is already registered. "<pos:position pos:line="34" pos:column="76"/></literal>
				<literal type="string" pos:line="35" pos:column="33">"Check for duplicate \"LoadPlugin\" lines "<pos:position pos:line="35" pos:column="76"/></literal>
				<literal type="string" pos:line="36" pos:column="33">"in your configuration!"<pos:position pos:line="36" pos:column="57"/></literal></expr></argument>,
				<argument><expr><name><name pos:line="37" pos:column="33">rf<pos:position pos:line="37" pos:column="35"/></name><operator pos:line="37" pos:column="35">-&gt;<pos:position pos:line="37" pos:column="40"/></operator><name pos:line="37" pos:column="37">rf_name<pos:position pos:line="37" pos:column="44"/></name></name></expr></argument>)<pos:position pos:line="37" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="46"/></expr_stmt>
		<return pos:line="38" pos:column="17">return <expr><operator pos:line="38" pos:column="24">(<pos:position pos:line="38" pos:column="25"/></operator><name pos:line="38" pos:column="25">EINVAL<pos:position pos:line="38" pos:column="31"/></name><operator pos:line="38" pos:column="31">)<pos:position pos:line="38" pos:column="32"/></operator></expr>;<pos:position pos:line="38" pos:column="33"/></return>
	}<pos:position pos:line="39" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="41" pos:column="9">le<pos:position pos:line="41" pos:column="11"/></name> <operator pos:line="41" pos:column="12">=<pos:position pos:line="41" pos:column="13"/></operator> <call><name pos:line="41" pos:column="14">llentry_create<pos:position pos:line="41" pos:column="28"/></name> <argument_list pos:line="41" pos:column="29">(<argument><expr><name><name pos:line="41" pos:column="30">rf<pos:position pos:line="41" pos:column="32"/></name><operator pos:line="41" pos:column="32">-&gt;<pos:position pos:line="41" pos:column="37"/></operator><name pos:line="41" pos:column="34">rf_name<pos:position pos:line="41" pos:column="41"/></name></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="43">rf<pos:position pos:line="41" pos:column="45"/></name></expr></argument>)<pos:position pos:line="41" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="47"/></expr_stmt>
	<if pos:line="42" pos:column="9">if <condition pos:line="42" pos:column="12">(<expr><name pos:line="42" pos:column="13">le<pos:position pos:line="42" pos:column="15"/></name> <operator pos:line="42" pos:column="16">==<pos:position pos:line="42" pos:column="18"/></operator> <name pos:line="42" pos:column="19">NULL<pos:position pos:line="42" pos:column="23"/></name></expr>)<pos:position pos:line="42" pos:column="24"/></condition><then pos:line="42" pos:column="24">
	<block pos:line="43" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="44" pos:column="17">pthread_mutex_unlock<pos:position pos:line="44" pos:column="37"/></name> <argument_list pos:line="44" pos:column="38">(<argument><expr><operator pos:line="44" pos:column="39">&amp;<pos:position pos:line="44" pos:column="44"/></operator><name pos:line="44" pos:column="40">read_lock<pos:position pos:line="44" pos:column="49"/></name></expr></argument>)<pos:position pos:line="44" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="51"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="45" pos:column="17">ERROR<pos:position pos:line="45" pos:column="22"/></name> <argument_list pos:line="45" pos:column="23">(<argument><expr><literal type="string" pos:line="45" pos:column="24">"plugin_insert_read: llentry_create failed."<pos:position pos:line="45" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="45" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="70"/></expr_stmt>
		<return pos:line="46" pos:column="17">return <expr><operator pos:line="46" pos:column="24">(<pos:position pos:line="46" pos:column="25"/></operator><operator pos:line="46" pos:column="25">-<pos:position pos:line="46" pos:column="26"/></operator><literal type="number" pos:line="46" pos:column="26">1<pos:position pos:line="46" pos:column="27"/></literal><operator pos:line="46" pos:column="27">)<pos:position pos:line="46" pos:column="28"/></operator></expr>;<pos:position pos:line="46" pos:column="29"/></return>
	}<pos:position pos:line="47" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="49" pos:column="9">status<pos:position pos:line="49" pos:column="15"/></name> <operator pos:line="49" pos:column="16">=<pos:position pos:line="49" pos:column="17"/></operator> <call><name pos:line="49" pos:column="18">c_heap_insert<pos:position pos:line="49" pos:column="31"/></name> <argument_list pos:line="49" pos:column="32">(<argument><expr><name pos:line="49" pos:column="33">read_heap<pos:position pos:line="49" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="44">rf<pos:position pos:line="49" pos:column="46"/></name></expr></argument>)<pos:position pos:line="49" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="48"/></expr_stmt>
	<if pos:line="50" pos:column="9">if <condition pos:line="50" pos:column="12">(<expr><name pos:line="50" pos:column="13">status<pos:position pos:line="50" pos:column="19"/></name> <operator pos:line="50" pos:column="20">!=<pos:position pos:line="50" pos:column="22"/></operator> <literal type="number" pos:line="50" pos:column="23">0<pos:position pos:line="50" pos:column="24"/></literal></expr>)<pos:position pos:line="50" pos:column="25"/></condition><then pos:line="50" pos:column="25">
	<block pos:line="51" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="52" pos:column="17">pthread_mutex_unlock<pos:position pos:line="52" pos:column="37"/></name> <argument_list pos:line="52" pos:column="38">(<argument><expr><operator pos:line="52" pos:column="39">&amp;<pos:position pos:line="52" pos:column="44"/></operator><name pos:line="52" pos:column="40">read_lock<pos:position pos:line="52" pos:column="49"/></name></expr></argument>)<pos:position pos:line="52" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="51"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="53" pos:column="17">ERROR<pos:position pos:line="53" pos:column="22"/></name> <argument_list pos:line="53" pos:column="23">(<argument><expr><literal type="string" pos:line="53" pos:column="24">"plugin_insert_read: c_heap_insert failed."<pos:position pos:line="53" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="53" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="69"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="54" pos:column="17">llentry_destroy<pos:position pos:line="54" pos:column="32"/></name> <argument_list pos:line="54" pos:column="33">(<argument><expr><name pos:line="54" pos:column="34">le<pos:position pos:line="54" pos:column="36"/></name></expr></argument>)<pos:position pos:line="54" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="38"/></expr_stmt>
		<return pos:line="55" pos:column="17">return <expr><operator pos:line="55" pos:column="24">(<pos:position pos:line="55" pos:column="25"/></operator><operator pos:line="55" pos:column="25">-<pos:position pos:line="55" pos:column="26"/></operator><literal type="number" pos:line="55" pos:column="26">1<pos:position pos:line="55" pos:column="27"/></literal><operator pos:line="55" pos:column="27">)<pos:position pos:line="55" pos:column="28"/></operator></expr>;<pos:position pos:line="55" pos:column="29"/></return>
	}<pos:position pos:line="56" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="58" pos:column="9">/* This does not fail. */</comment>
	<expr_stmt><expr><call><name pos:line="59" pos:column="9">llist_append<pos:position pos:line="59" pos:column="21"/></name> <argument_list pos:line="59" pos:column="22">(<argument><expr><name pos:line="59" pos:column="23">read_list<pos:position pos:line="59" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="59" pos:column="34">le<pos:position pos:line="59" pos:column="36"/></name></expr></argument>)<pos:position pos:line="59" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="38"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="61" pos:column="9">pthread_mutex_unlock<pos:position pos:line="61" pos:column="29"/></name> <argument_list pos:line="61" pos:column="30">(<argument><expr><operator pos:line="61" pos:column="31">&amp;<pos:position pos:line="61" pos:column="36"/></operator><name pos:line="61" pos:column="32">read_lock<pos:position pos:line="61" pos:column="41"/></name></expr></argument>)<pos:position pos:line="61" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="43"/></expr_stmt>
	<return pos:line="62" pos:column="9">return <expr><operator pos:line="62" pos:column="16">(<pos:position pos:line="62" pos:column="17"/></operator><literal type="number" pos:line="62" pos:column="17">0<pos:position pos:line="62" pos:column="18"/></literal><operator pos:line="62" pos:column="18">)<pos:position pos:line="62" pos:column="19"/></operator></expr>;<pos:position pos:line="62" pos:column="20"/></return>
}<pos:position pos:line="63" pos:column="2"/></block></function></unit>
