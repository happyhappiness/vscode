<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1650_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">rrd_cache_flush<pos:position pos:line="1" pos:column="28"/></name><parameter_list pos:line="1" pos:column="28">(<parameter><decl><type><name pos:line="1" pos:column="29">cdtime_t<pos:position pos:line="1" pos:column="37"/></name></type> <name pos:line="1" pos:column="38">timeout<pos:position pos:line="1" pos:column="45"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="46"/></parameter_list> <block pos:line="1" pos:column="47">{
  <decl_stmt><decl><type><name pos:line="2" pos:column="3">rrd_cache_t<pos:position pos:line="2" pos:column="14"/></name> <modifier pos:line="2" pos:column="15">*<pos:position pos:line="2" pos:column="16"/></modifier></type><name pos:line="2" pos:column="16">rc<pos:position pos:line="2" pos:column="18"/></name></decl>;<pos:position pos:line="2" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">cdtime_t<pos:position pos:line="3" pos:column="11"/></name></type> <name pos:line="3" pos:column="12">now<pos:position pos:line="3" pos:column="15"/></name></decl>;<pos:position pos:line="3" pos:column="16"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="5" pos:column="3">char<pos:position pos:line="5" pos:column="7"/></name> <modifier pos:line="5" pos:column="8">*<pos:position pos:line="5" pos:column="9"/></modifier><modifier pos:line="5" pos:column="9">*<pos:position pos:line="5" pos:column="10"/></modifier></type><name pos:line="5" pos:column="10">keys<pos:position pos:line="5" pos:column="14"/></name> <init pos:line="5" pos:column="15">= <expr><name pos:line="5" pos:column="17">NULL<pos:position pos:line="5" pos:column="21"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="22"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">int<pos:position pos:line="6" pos:column="6"/></name></type> <name pos:line="6" pos:column="7">keys_num<pos:position pos:line="6" pos:column="15"/></name> <init pos:line="6" pos:column="16">= <expr><literal type="number" pos:line="6" pos:column="18">0<pos:position pos:line="6" pos:column="19"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="20"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="8" pos:column="3">char<pos:position pos:line="8" pos:column="7"/></name> <modifier pos:line="8" pos:column="8">*<pos:position pos:line="8" pos:column="9"/></modifier></type><name pos:line="8" pos:column="9">key<pos:position pos:line="8" pos:column="12"/></name></decl>;<pos:position pos:line="8" pos:column="13"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">c_avl_iterator_t<pos:position pos:line="9" pos:column="19"/></name> <modifier pos:line="9" pos:column="20">*<pos:position pos:line="9" pos:column="21"/></modifier></type><name pos:line="9" pos:column="21">iter<pos:position pos:line="9" pos:column="25"/></name></decl>;<pos:position pos:line="9" pos:column="26"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="11" pos:column="3">DEBUG<pos:position pos:line="11" pos:column="8"/></name><argument_list pos:line="11" pos:column="8">(<argument><expr><literal type="string" pos:line="11" pos:column="9">"rrdtool plugin: Flushing cache, timeout = %.3f"<pos:position pos:line="11" pos:column="57"/></literal></expr></argument>,
        <argument><expr><call><name pos:line="12" pos:column="9">CDTIME_T_TO_DOUBLE<pos:position pos:line="12" pos:column="27"/></name><argument_list pos:line="12" pos:column="27">(<argument><expr><name pos:line="12" pos:column="28">timeout<pos:position pos:line="12" pos:column="35"/></name></expr></argument>)<pos:position pos:line="12" pos:column="36"/></argument_list></call></expr></argument>)<pos:position pos:line="12" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="38"/></expr_stmt>

  <expr_stmt><expr><name pos:line="14" pos:column="3">now<pos:position pos:line="14" pos:column="6"/></name> <operator pos:line="14" pos:column="7">=<pos:position pos:line="14" pos:column="8"/></operator> <call><name pos:line="14" pos:column="9">cdtime<pos:position pos:line="14" pos:column="15"/></name><argument_list pos:line="14" pos:column="15">()<pos:position pos:line="14" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="18"/></expr_stmt>

  <comment type="block" pos:line="16" pos:column="3">/* Build a list of entries to be flushed */</comment>
  <expr_stmt><expr><name pos:line="17" pos:column="3">iter<pos:position pos:line="17" pos:column="7"/></name> <operator pos:line="17" pos:column="8">=<pos:position pos:line="17" pos:column="9"/></operator> <call><name pos:line="17" pos:column="10">c_avl_get_iterator<pos:position pos:line="17" pos:column="28"/></name><argument_list pos:line="17" pos:column="28">(<argument><expr><name pos:line="17" pos:column="29">cache<pos:position pos:line="17" pos:column="34"/></name></expr></argument>)<pos:position pos:line="17" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="36"/></expr_stmt>
  <while pos:line="18" pos:column="3">while <condition pos:line="18" pos:column="9">(<expr><call><name pos:line="18" pos:column="10">c_avl_iterator_next<pos:position pos:line="18" pos:column="29"/></name><argument_list pos:line="18" pos:column="29">(<argument><expr><name pos:line="18" pos:column="30">iter<pos:position pos:line="18" pos:column="34"/></name></expr></argument>, <argument><expr><operator pos:line="18" pos:column="36">(<pos:position pos:line="18" pos:column="37"/></operator><name pos:line="18" pos:column="37">void<pos:position pos:line="18" pos:column="41"/></name> <operator pos:line="18" pos:column="42">*<pos:position pos:line="18" pos:column="43"/></operator><operator pos:line="18" pos:column="43">)<pos:position pos:line="18" pos:column="44"/></operator><operator pos:line="18" pos:column="44">&amp;<pos:position pos:line="18" pos:column="49"/></operator><name pos:line="18" pos:column="45">key<pos:position pos:line="18" pos:column="48"/></name></expr></argument>, <argument><expr><operator pos:line="18" pos:column="50">(<pos:position pos:line="18" pos:column="51"/></operator><name pos:line="18" pos:column="51">void<pos:position pos:line="18" pos:column="55"/></name> <operator pos:line="18" pos:column="56">*<pos:position pos:line="18" pos:column="57"/></operator><operator pos:line="18" pos:column="57">)<pos:position pos:line="18" pos:column="58"/></operator><operator pos:line="18" pos:column="58">&amp;<pos:position pos:line="18" pos:column="63"/></operator><name pos:line="18" pos:column="59">rc<pos:position pos:line="18" pos:column="61"/></name></expr></argument>)<pos:position pos:line="18" pos:column="62"/></argument_list></call> <operator pos:line="18" pos:column="63">==<pos:position pos:line="18" pos:column="65"/></operator> <literal type="number" pos:line="18" pos:column="66">0<pos:position pos:line="18" pos:column="67"/></literal></expr>)<pos:position pos:line="18" pos:column="68"/></condition> <block pos:line="18" pos:column="69">{
    <if pos:line="19" pos:column="5">if <condition pos:line="19" pos:column="8">(<expr><name><name pos:line="19" pos:column="9">rc<pos:position pos:line="19" pos:column="11"/></name><operator pos:line="19" pos:column="11">-&gt;<pos:position pos:line="19" pos:column="16"/></operator><name pos:line="19" pos:column="13">flags<pos:position pos:line="19" pos:column="18"/></name></name> <operator pos:line="19" pos:column="19">!=<pos:position pos:line="19" pos:column="21"/></operator> <name pos:line="19" pos:column="22">FLAG_NONE<pos:position pos:line="19" pos:column="31"/></name></expr>)<pos:position pos:line="19" pos:column="32"/></condition><then pos:line="19" pos:column="32">
      <block type="pseudo"><continue pos:line="20" pos:column="7">continue;<pos:position pos:line="20" pos:column="16"/></continue></block></then>
    <comment type="block" pos:line="21" pos:column="5">/* timeout == 0  =&gt;  flush everything */</comment>
    <elseif pos:line="22" pos:column="5">else <if pos:line="22" pos:column="10">if <condition pos:line="22" pos:column="13">(<expr><operator pos:line="22" pos:column="14">(<pos:position pos:line="22" pos:column="15"/></operator><name pos:line="22" pos:column="15">timeout<pos:position pos:line="22" pos:column="22"/></name> <operator pos:line="22" pos:column="23">!=<pos:position pos:line="22" pos:column="25"/></operator> <literal type="number" pos:line="22" pos:column="26">0<pos:position pos:line="22" pos:column="27"/></literal><operator pos:line="22" pos:column="27">)<pos:position pos:line="22" pos:column="28"/></operator> <operator pos:line="22" pos:column="29">&amp;&amp;<pos:position pos:line="22" pos:column="39"/></operator> <operator pos:line="22" pos:column="32">(<pos:position pos:line="22" pos:column="33"/></operator><operator pos:line="22" pos:column="33">(<pos:position pos:line="22" pos:column="34"/></operator><name pos:line="22" pos:column="34">now<pos:position pos:line="22" pos:column="37"/></name> <operator pos:line="22" pos:column="38">-<pos:position pos:line="22" pos:column="39"/></operator> <name><name pos:line="22" pos:column="40">rc<pos:position pos:line="22" pos:column="42"/></name><operator pos:line="22" pos:column="42">-&gt;<pos:position pos:line="22" pos:column="47"/></operator><name pos:line="22" pos:column="44">first_value<pos:position pos:line="22" pos:column="55"/></name></name><operator pos:line="22" pos:column="55">)<pos:position pos:line="22" pos:column="56"/></operator> <operator pos:line="22" pos:column="57">&lt;<pos:position pos:line="22" pos:column="61"/></operator> <name pos:line="22" pos:column="59">timeout<pos:position pos:line="22" pos:column="66"/></name><operator pos:line="22" pos:column="66">)<pos:position pos:line="22" pos:column="67"/></operator></expr>)<pos:position pos:line="22" pos:column="68"/></condition><then pos:line="22" pos:column="68">
      <block type="pseudo"><continue pos:line="23" pos:column="7">continue;<pos:position pos:line="23" pos:column="16"/></continue></block></then></if></elseif>
    <elseif pos:line="24" pos:column="5">else <if pos:line="24" pos:column="10">if <condition pos:line="24" pos:column="13">(<expr><name><name pos:line="24" pos:column="14">rc<pos:position pos:line="24" pos:column="16"/></name><operator pos:line="24" pos:column="16">-&gt;<pos:position pos:line="24" pos:column="21"/></operator><name pos:line="24" pos:column="18">values_num<pos:position pos:line="24" pos:column="28"/></name></name> <operator pos:line="24" pos:column="29">&gt;<pos:position pos:line="24" pos:column="33"/></operator> <literal type="number" pos:line="24" pos:column="31">0<pos:position pos:line="24" pos:column="32"/></literal></expr>)<pos:position pos:line="24" pos:column="33"/></condition><then pos:line="24" pos:column="33"> <block pos:line="24" pos:column="34">{
      <decl_stmt><decl><type><name pos:line="25" pos:column="7">int<pos:position pos:line="25" pos:column="10"/></name></type> <name pos:line="25" pos:column="11">status<pos:position pos:line="25" pos:column="17"/></name></decl>;<pos:position pos:line="25" pos:column="18"/></decl_stmt>

      <expr_stmt><expr><name pos:line="27" pos:column="7">status<pos:position pos:line="27" pos:column="13"/></name> <operator pos:line="27" pos:column="14">=<pos:position pos:line="27" pos:column="15"/></operator> <call><name pos:line="27" pos:column="16">rrd_queue_enqueue<pos:position pos:line="27" pos:column="33"/></name><argument_list pos:line="27" pos:column="33">(<argument><expr><name pos:line="27" pos:column="34">key<pos:position pos:line="27" pos:column="37"/></name></expr></argument>, <argument><expr><operator pos:line="27" pos:column="39">&amp;<pos:position pos:line="27" pos:column="44"/></operator><name pos:line="27" pos:column="40">queue_head<pos:position pos:line="27" pos:column="50"/></name></expr></argument>, <argument><expr><operator pos:line="27" pos:column="52">&amp;<pos:position pos:line="27" pos:column="57"/></operator><name pos:line="27" pos:column="53">queue_tail<pos:position pos:line="27" pos:column="63"/></name></expr></argument>)<pos:position pos:line="27" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="65"/></expr_stmt>
      <if pos:line="28" pos:column="7">if <condition pos:line="28" pos:column="10">(<expr><name pos:line="28" pos:column="11">status<pos:position pos:line="28" pos:column="17"/></name> <operator pos:line="28" pos:column="18">==<pos:position pos:line="28" pos:column="20"/></operator> <literal type="number" pos:line="28" pos:column="21">0<pos:position pos:line="28" pos:column="22"/></literal></expr>)<pos:position pos:line="28" pos:column="23"/></condition><then pos:line="28" pos:column="23">
        <block type="pseudo"><expr_stmt><expr><name><name pos:line="29" pos:column="9">rc<pos:position pos:line="29" pos:column="11"/></name><operator pos:line="29" pos:column="11">-&gt;<pos:position pos:line="29" pos:column="16"/></operator><name pos:line="29" pos:column="13">flags<pos:position pos:line="29" pos:column="18"/></name></name> <operator pos:line="29" pos:column="19">=<pos:position pos:line="29" pos:column="20"/></operator> <name pos:line="29" pos:column="21">FLAG_QUEUED<pos:position pos:line="29" pos:column="32"/></name></expr>;<pos:position pos:line="29" pos:column="33"/></expr_stmt></block></then></if>
    }<pos:position pos:line="30" pos:column="6"/></block></then></if></elseif> <else pos:line="30" pos:column="7">else <comment type="block" pos:line="30" pos:column="12">/* ancient and no values -&gt; waste of memory */</comment>
    <block pos:line="31" pos:column="5">{
      <decl_stmt><decl><type><name pos:line="32" pos:column="7">char<pos:position pos:line="32" pos:column="11"/></name> <modifier pos:line="32" pos:column="12">*<pos:position pos:line="32" pos:column="13"/></modifier><modifier pos:line="32" pos:column="13">*<pos:position pos:line="32" pos:column="14"/></modifier></type><name pos:line="32" pos:column="14">tmp<pos:position pos:line="32" pos:column="17"/></name> <init pos:line="32" pos:column="18">= <expr><call><name pos:line="32" pos:column="20">realloc<pos:position pos:line="32" pos:column="27"/></name><argument_list pos:line="32" pos:column="27">(<argument><expr><name pos:line="32" pos:column="28">keys<pos:position pos:line="32" pos:column="32"/></name></expr></argument>, <argument><expr><operator pos:line="32" pos:column="34">(<pos:position pos:line="32" pos:column="35"/></operator><name pos:line="32" pos:column="35">keys_num<pos:position pos:line="32" pos:column="43"/></name> <operator pos:line="32" pos:column="44">+<pos:position pos:line="32" pos:column="45"/></operator> <literal type="number" pos:line="32" pos:column="46">1<pos:position pos:line="32" pos:column="47"/></literal><operator pos:line="32" pos:column="47">)<pos:position pos:line="32" pos:column="48"/></operator> <operator pos:line="32" pos:column="49">*<pos:position pos:line="32" pos:column="50"/></operator> <sizeof pos:line="32" pos:column="51">sizeof<argument_list pos:line="32" pos:column="57">(<argument><expr><name pos:line="32" pos:column="58">char<pos:position pos:line="32" pos:column="62"/></name> <operator pos:line="32" pos:column="63">*<pos:position pos:line="32" pos:column="64"/></operator></expr></argument>)<pos:position pos:line="32" pos:column="65"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="32" pos:column="66"/></argument_list></call></expr></init></decl>;<pos:position pos:line="32" pos:column="67"/></decl_stmt>
      <if pos:line="33" pos:column="7">if <condition pos:line="33" pos:column="10">(<expr><name pos:line="33" pos:column="11">tmp<pos:position pos:line="33" pos:column="14"/></name> <operator pos:line="33" pos:column="15">==<pos:position pos:line="33" pos:column="17"/></operator> <name pos:line="33" pos:column="18">NULL<pos:position pos:line="33" pos:column="22"/></name></expr>)<pos:position pos:line="33" pos:column="23"/></condition><then pos:line="33" pos:column="23"> <block pos:line="33" pos:column="24">{
        <decl_stmt><decl><type><name pos:line="34" pos:column="9">char<pos:position pos:line="34" pos:column="13"/></name></type> <name><name pos:line="34" pos:column="14">errbuf<pos:position pos:line="34" pos:column="20"/></name><index pos:line="34" pos:column="20">[<expr><literal type="number" pos:line="34" pos:column="21">1024<pos:position pos:line="34" pos:column="25"/></literal></expr>]<pos:position pos:line="34" pos:column="26"/></index></name></decl>;<pos:position pos:line="34" pos:column="27"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="35" pos:column="9">ERROR<pos:position pos:line="35" pos:column="14"/></name><argument_list pos:line="35" pos:column="14">(<argument><expr><literal type="string" pos:line="35" pos:column="15">"rrdtool plugin: "<pos:position pos:line="35" pos:column="33"/></literal>
              <literal type="string" pos:line="36" pos:column="15">"realloc failed: %s"<pos:position pos:line="36" pos:column="35"/></literal></expr></argument>,
              <argument><expr><call><name pos:line="37" pos:column="15">sstrerror<pos:position pos:line="37" pos:column="24"/></name><argument_list pos:line="37" pos:column="24">(<argument><expr><name pos:line="37" pos:column="25">errno<pos:position pos:line="37" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="32">errbuf<pos:position pos:line="37" pos:column="38"/></name></expr></argument>, <argument><expr><sizeof pos:line="37" pos:column="40">sizeof<argument_list pos:line="37" pos:column="46">(<argument><expr><name pos:line="37" pos:column="47">errbuf<pos:position pos:line="37" pos:column="53"/></name></expr></argument>)<pos:position pos:line="37" pos:column="54"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="37" pos:column="55"/></argument_list></call></expr></argument>)<pos:position pos:line="37" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="57"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="38" pos:column="9">c_avl_iterator_destroy<pos:position pos:line="38" pos:column="31"/></name><argument_list pos:line="38" pos:column="31">(<argument><expr><name pos:line="38" pos:column="32">iter<pos:position pos:line="38" pos:column="36"/></name></expr></argument>)<pos:position pos:line="38" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="38"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="39" pos:column="9">sfree<pos:position pos:line="39" pos:column="14"/></name><argument_list pos:line="39" pos:column="14">(<argument><expr><name pos:line="39" pos:column="15">keys<pos:position pos:line="39" pos:column="19"/></name></expr></argument>)<pos:position pos:line="39" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="21"/></expr_stmt>
        <return pos:line="40" pos:column="9">return;<pos:position pos:line="40" pos:column="16"/></return>
      }<pos:position pos:line="41" pos:column="8"/></block></then></if>
      <expr_stmt><expr><name pos:line="42" pos:column="7">keys<pos:position pos:line="42" pos:column="11"/></name> <operator pos:line="42" pos:column="12">=<pos:position pos:line="42" pos:column="13"/></operator> <name pos:line="42" pos:column="14">tmp<pos:position pos:line="42" pos:column="17"/></name></expr>;<pos:position pos:line="42" pos:column="18"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="43" pos:column="7">keys<pos:position pos:line="43" pos:column="11"/></name><index pos:line="43" pos:column="11">[<expr><name pos:line="43" pos:column="12">keys_num<pos:position pos:line="43" pos:column="20"/></name></expr>]<pos:position pos:line="43" pos:column="21"/></index></name> <operator pos:line="43" pos:column="22">=<pos:position pos:line="43" pos:column="23"/></operator> <name pos:line="43" pos:column="24">key<pos:position pos:line="43" pos:column="27"/></name></expr>;<pos:position pos:line="43" pos:column="28"/></expr_stmt>
      <expr_stmt><expr><name pos:line="44" pos:column="7">keys_num<pos:position pos:line="44" pos:column="15"/></name><operator pos:line="44" pos:column="15">++<pos:position pos:line="44" pos:column="17"/></operator></expr>;<pos:position pos:line="44" pos:column="18"/></expr_stmt>
    }<pos:position pos:line="45" pos:column="6"/></block></else></if>
  }<pos:position pos:line="46" pos:column="4"/></block></while> <comment type="block" pos:line="46" pos:column="5">/* while (c_avl_iterator_next) */</comment>
  <expr_stmt><expr><call><name pos:line="47" pos:column="3">c_avl_iterator_destroy<pos:position pos:line="47" pos:column="25"/></name><argument_list pos:line="47" pos:column="25">(<argument><expr><name pos:line="47" pos:column="26">iter<pos:position pos:line="47" pos:column="30"/></name></expr></argument>)<pos:position pos:line="47" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="32"/></expr_stmt>

  <for pos:line="49" pos:column="3">for <control pos:line="49" pos:column="7">(<init><decl><type><name pos:line="49" pos:column="8">int<pos:position pos:line="49" pos:column="11"/></name></type> <name pos:line="49" pos:column="12">i<pos:position pos:line="49" pos:column="13"/></name> <init pos:line="49" pos:column="14">= <expr><literal type="number" pos:line="49" pos:column="16">0<pos:position pos:line="49" pos:column="17"/></literal></expr></init></decl>;<pos:position pos:line="49" pos:column="18"/></init> <condition><expr><name pos:line="49" pos:column="19">i<pos:position pos:line="49" pos:column="20"/></name> <operator pos:line="49" pos:column="21">&lt;<pos:position pos:line="49" pos:column="25"/></operator> <name pos:line="49" pos:column="23">keys_num<pos:position pos:line="49" pos:column="31"/></name></expr>;<pos:position pos:line="49" pos:column="32"/></condition> <incr><expr><name pos:line="49" pos:column="33">i<pos:position pos:line="49" pos:column="34"/></name><operator pos:line="49" pos:column="34">++<pos:position pos:line="49" pos:column="36"/></operator></expr></incr>)<pos:position pos:line="49" pos:column="37"/></control> <block pos:line="49" pos:column="38">{
    <if pos:line="50" pos:column="5">if <condition pos:line="50" pos:column="8">(<expr><call><name pos:line="50" pos:column="9">c_avl_remove<pos:position pos:line="50" pos:column="21"/></name><argument_list pos:line="50" pos:column="21">(<argument><expr><name pos:line="50" pos:column="22">cache<pos:position pos:line="50" pos:column="27"/></name></expr></argument>, <argument><expr><name><name pos:line="50" pos:column="29">keys<pos:position pos:line="50" pos:column="33"/></name><index pos:line="50" pos:column="33">[<expr><name pos:line="50" pos:column="34">i<pos:position pos:line="50" pos:column="35"/></name></expr>]<pos:position pos:line="50" pos:column="36"/></index></name></expr></argument>, <argument><expr><operator pos:line="50" pos:column="38">(<pos:position pos:line="50" pos:column="39"/></operator><name pos:line="50" pos:column="39">void<pos:position pos:line="50" pos:column="43"/></name> <operator pos:line="50" pos:column="44">*<pos:position pos:line="50" pos:column="45"/></operator><operator pos:line="50" pos:column="45">)<pos:position pos:line="50" pos:column="46"/></operator><operator pos:line="50" pos:column="46">&amp;<pos:position pos:line="50" pos:column="51"/></operator><name pos:line="50" pos:column="47">key<pos:position pos:line="50" pos:column="50"/></name></expr></argument>, <argument><expr><operator pos:line="50" pos:column="52">(<pos:position pos:line="50" pos:column="53"/></operator><name pos:line="50" pos:column="53">void<pos:position pos:line="50" pos:column="57"/></name> <operator pos:line="50" pos:column="58">*<pos:position pos:line="50" pos:column="59"/></operator><operator pos:line="50" pos:column="59">)<pos:position pos:line="50" pos:column="60"/></operator><operator pos:line="50" pos:column="60">&amp;<pos:position pos:line="50" pos:column="65"/></operator><name pos:line="50" pos:column="61">rc<pos:position pos:line="50" pos:column="63"/></name></expr></argument>)<pos:position pos:line="50" pos:column="64"/></argument_list></call> <operator pos:line="50" pos:column="65">!=<pos:position pos:line="50" pos:column="67"/></operator> <literal type="number" pos:line="50" pos:column="68">0<pos:position pos:line="50" pos:column="69"/></literal></expr>)<pos:position pos:line="50" pos:column="70"/></condition><then pos:line="50" pos:column="70"> <block pos:line="50" pos:column="71">{
      <expr_stmt><expr><call><name pos:line="51" pos:column="7">DEBUG<pos:position pos:line="51" pos:column="12"/></name><argument_list pos:line="51" pos:column="12">(<argument><expr><literal type="string" pos:line="51" pos:column="13">"rrdtool plugin: c_avl_remove (%s) failed."<pos:position pos:line="51" pos:column="56"/></literal></expr></argument>, <argument><expr><name><name pos:line="51" pos:column="58">keys<pos:position pos:line="51" pos:column="62"/></name><index pos:line="51" pos:column="62">[<expr><name pos:line="51" pos:column="63">i<pos:position pos:line="51" pos:column="64"/></name></expr>]<pos:position pos:line="51" pos:column="65"/></index></name></expr></argument>)<pos:position pos:line="51" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="67"/></expr_stmt>
      <continue pos:line="52" pos:column="7">continue;<pos:position pos:line="52" pos:column="16"/></continue>
    }<pos:position pos:line="53" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="55" pos:column="5">assert<pos:position pos:line="55" pos:column="11"/></name><argument_list pos:line="55" pos:column="11">(<argument><expr><name><name pos:line="55" pos:column="12">rc<pos:position pos:line="55" pos:column="14"/></name><operator pos:line="55" pos:column="14">-&gt;<pos:position pos:line="55" pos:column="19"/></operator><name pos:line="55" pos:column="16">values<pos:position pos:line="55" pos:column="22"/></name></name> <operator pos:line="55" pos:column="23">==<pos:position pos:line="55" pos:column="25"/></operator> <name pos:line="55" pos:column="26">NULL<pos:position pos:line="55" pos:column="30"/></name></expr></argument>)<pos:position pos:line="55" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="32"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="56" pos:column="5">assert<pos:position pos:line="56" pos:column="11"/></name><argument_list pos:line="56" pos:column="11">(<argument><expr><name><name pos:line="56" pos:column="12">rc<pos:position pos:line="56" pos:column="14"/></name><operator pos:line="56" pos:column="14">-&gt;<pos:position pos:line="56" pos:column="19"/></operator><name pos:line="56" pos:column="16">values_num<pos:position pos:line="56" pos:column="26"/></name></name> <operator pos:line="56" pos:column="27">==<pos:position pos:line="56" pos:column="29"/></operator> <literal type="number" pos:line="56" pos:column="30">0<pos:position pos:line="56" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="56" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="33"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="58" pos:column="5">sfree<pos:position pos:line="58" pos:column="10"/></name><argument_list pos:line="58" pos:column="10">(<argument><expr><name pos:line="58" pos:column="11">rc<pos:position pos:line="58" pos:column="13"/></name></expr></argument>)<pos:position pos:line="58" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="15"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="59" pos:column="5">sfree<pos:position pos:line="59" pos:column="10"/></name><argument_list pos:line="59" pos:column="10">(<argument><expr><name pos:line="59" pos:column="11">key<pos:position pos:line="59" pos:column="14"/></name></expr></argument>)<pos:position pos:line="59" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="16"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="60" pos:column="5">keys<pos:position pos:line="60" pos:column="9"/></name><index pos:line="60" pos:column="9">[<expr><name pos:line="60" pos:column="10">i<pos:position pos:line="60" pos:column="11"/></name></expr>]<pos:position pos:line="60" pos:column="12"/></index></name> <operator pos:line="60" pos:column="13">=<pos:position pos:line="60" pos:column="14"/></operator> <name pos:line="60" pos:column="15">NULL<pos:position pos:line="60" pos:column="19"/></name></expr>;<pos:position pos:line="60" pos:column="20"/></expr_stmt>
  }<pos:position pos:line="61" pos:column="4"/></block></for> <comment type="block" pos:line="61" pos:column="5">/* for (i = 0..keys_num) */</comment>

  <expr_stmt><expr><call><name pos:line="63" pos:column="3">sfree<pos:position pos:line="63" pos:column="8"/></name><argument_list pos:line="63" pos:column="8">(<argument><expr><name pos:line="63" pos:column="9">keys<pos:position pos:line="63" pos:column="13"/></name></expr></argument>)<pos:position pos:line="63" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="15"/></expr_stmt>

  <expr_stmt><expr><name pos:line="65" pos:column="3">cache_flush_last<pos:position pos:line="65" pos:column="19"/></name> <operator pos:line="65" pos:column="20">=<pos:position pos:line="65" pos:column="21"/></operator> <name pos:line="65" pos:column="22">now<pos:position pos:line="65" pos:column="25"/></name></expr>;<pos:position pos:line="65" pos:column="26"/></expr_stmt>
}<pos:position pos:line="66" pos:column="2"/></block></function></unit>
