<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1065_collectd-5.6.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">single_read<pos:position pos:line="1" pos:column="23"/></name><parameter_list pos:line="1" pos:column="23">(<parameter><decl><type><specifier pos:line="1" pos:column="24">const<pos:position pos:line="1" pos:column="29"/></specifier> <name pos:line="1" pos:column="30">char<pos:position pos:line="1" pos:column="34"/></name> <modifier pos:line="1" pos:column="35">*<pos:position pos:line="1" pos:column="36"/></modifier></type><name pos:line="1" pos:column="36">name<pos:position pos:line="1" pos:column="40"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="42">FILE<pos:position pos:line="1" pos:column="46"/></name> <modifier pos:line="1" pos:column="47">*<pos:position pos:line="1" pos:column="48"/></modifier></type><name pos:line="1" pos:column="48">fh<pos:position pos:line="1" pos:column="50"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="51"/></parameter_list> <block pos:line="1" pos:column="52">{
  <decl_stmt><decl><type><name pos:line="2" pos:column="3">char<pos:position pos:line="2" pos:column="7"/></name></type> <name><name pos:line="2" pos:column="8">buffer<pos:position pos:line="2" pos:column="14"/></name><index pos:line="2" pos:column="14">[<expr><literal type="number" pos:line="2" pos:column="15">1024<pos:position pos:line="2" pos:column="19"/></literal></expr>]<pos:position pos:line="2" pos:column="20"/></index></name></decl>;<pos:position pos:line="2" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">char<pos:position pos:line="3" pos:column="7"/></name> <modifier pos:line="3" pos:column="8">*<pos:position pos:line="3" pos:column="9"/></modifier></type><name><name pos:line="3" pos:column="9">fields<pos:position pos:line="3" pos:column="15"/></name><index pos:line="3" pos:column="15">[<expr><literal type="number" pos:line="3" pos:column="16">4<pos:position pos:line="3" pos:column="17"/></literal></expr>]<pos:position pos:line="3" pos:column="18"/></index></name></decl>;<pos:position pos:line="3" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="4" pos:column="3">const<pos:position pos:line="4" pos:column="8"/></specifier> <name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">max_fields<pos:position pos:line="4" pos:column="23"/></name> <init pos:line="4" pos:column="24">= <expr><call><name pos:line="4" pos:column="26">STATIC_ARRAY_SIZE<pos:position pos:line="4" pos:column="43"/></name><argument_list pos:line="4" pos:column="43">(<argument><expr><name pos:line="4" pos:column="44">fields<pos:position pos:line="4" pos:column="50"/></name></expr></argument>)<pos:position pos:line="4" pos:column="51"/></argument_list></call></expr></init></decl>;<pos:position pos:line="4" pos:column="52"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">int<pos:position pos:line="5" pos:column="6"/></name></type> <name pos:line="5" pos:column="7">fields_num<pos:position pos:line="5" pos:column="17"/></name></decl>, <decl><type ref="prev"/><name pos:line="5" pos:column="19">read<pos:position pos:line="5" pos:column="23"/></name> <init pos:line="5" pos:column="24">= <expr><literal type="number" pos:line="5" pos:column="26">0<pos:position pos:line="5" pos:column="27"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="28"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="7" pos:column="3">derive_t<pos:position pos:line="7" pos:column="11"/></name></type> <name pos:line="7" pos:column="12">link_rx<pos:position pos:line="7" pos:column="19"/></name></decl>, <decl><type ref="prev"/><name pos:line="7" pos:column="21">link_tx<pos:position pos:line="7" pos:column="28"/></name></decl>;<pos:position pos:line="7" pos:column="29"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">derive_t<pos:position pos:line="8" pos:column="11"/></name></type> <name pos:line="8" pos:column="12">tun_rx<pos:position pos:line="8" pos:column="18"/></name></decl>, <decl><type ref="prev"/><name pos:line="8" pos:column="20">tun_tx<pos:position pos:line="8" pos:column="26"/></name></decl>;<pos:position pos:line="8" pos:column="27"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">derive_t<pos:position pos:line="9" pos:column="11"/></name></type> <name pos:line="9" pos:column="12">pre_compress<pos:position pos:line="9" pos:column="24"/></name></decl>, <decl><type ref="prev"/><name pos:line="9" pos:column="26">post_compress<pos:position pos:line="9" pos:column="39"/></name></decl>;<pos:position pos:line="9" pos:column="40"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">derive_t<pos:position pos:line="10" pos:column="11"/></name></type> <name pos:line="10" pos:column="12">pre_decompress<pos:position pos:line="10" pos:column="26"/></name></decl>, <decl><type ref="prev"/><name pos:line="10" pos:column="28">post_decompress<pos:position pos:line="10" pos:column="43"/></name></decl>;<pos:position pos:line="10" pos:column="44"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="11" pos:column="3">derive_t<pos:position pos:line="11" pos:column="11"/></name></type> <name pos:line="11" pos:column="12">overhead_rx<pos:position pos:line="11" pos:column="23"/></name></decl>, <decl><type ref="prev"/><name pos:line="11" pos:column="25">overhead_tx<pos:position pos:line="11" pos:column="36"/></name></decl>;<pos:position pos:line="11" pos:column="37"/></decl_stmt>

  <expr_stmt><expr><name pos:line="13" pos:column="3">link_rx<pos:position pos:line="13" pos:column="10"/></name> <operator pos:line="13" pos:column="11">=<pos:position pos:line="13" pos:column="12"/></operator> <literal type="number" pos:line="13" pos:column="13">0<pos:position pos:line="13" pos:column="14"/></literal></expr>;<pos:position pos:line="13" pos:column="15"/></expr_stmt>
  <expr_stmt><expr><name pos:line="14" pos:column="3">link_tx<pos:position pos:line="14" pos:column="10"/></name> <operator pos:line="14" pos:column="11">=<pos:position pos:line="14" pos:column="12"/></operator> <literal type="number" pos:line="14" pos:column="13">0<pos:position pos:line="14" pos:column="14"/></literal></expr>;<pos:position pos:line="14" pos:column="15"/></expr_stmt>
  <expr_stmt><expr><name pos:line="15" pos:column="3">tun_rx<pos:position pos:line="15" pos:column="9"/></name> <operator pos:line="15" pos:column="10">=<pos:position pos:line="15" pos:column="11"/></operator> <literal type="number" pos:line="15" pos:column="12">0<pos:position pos:line="15" pos:column="13"/></literal></expr>;<pos:position pos:line="15" pos:column="14"/></expr_stmt>
  <expr_stmt><expr><name pos:line="16" pos:column="3">tun_tx<pos:position pos:line="16" pos:column="9"/></name> <operator pos:line="16" pos:column="10">=<pos:position pos:line="16" pos:column="11"/></operator> <literal type="number" pos:line="16" pos:column="12">0<pos:position pos:line="16" pos:column="13"/></literal></expr>;<pos:position pos:line="16" pos:column="14"/></expr_stmt>
  <expr_stmt><expr><name pos:line="17" pos:column="3">pre_compress<pos:position pos:line="17" pos:column="15"/></name> <operator pos:line="17" pos:column="16">=<pos:position pos:line="17" pos:column="17"/></operator> <literal type="number" pos:line="17" pos:column="18">0<pos:position pos:line="17" pos:column="19"/></literal></expr>;<pos:position pos:line="17" pos:column="20"/></expr_stmt>
  <expr_stmt><expr><name pos:line="18" pos:column="3">post_compress<pos:position pos:line="18" pos:column="16"/></name> <operator pos:line="18" pos:column="17">=<pos:position pos:line="18" pos:column="18"/></operator> <literal type="number" pos:line="18" pos:column="19">0<pos:position pos:line="18" pos:column="20"/></literal></expr>;<pos:position pos:line="18" pos:column="21"/></expr_stmt>
  <expr_stmt><expr><name pos:line="19" pos:column="3">pre_decompress<pos:position pos:line="19" pos:column="17"/></name> <operator pos:line="19" pos:column="18">=<pos:position pos:line="19" pos:column="19"/></operator> <literal type="number" pos:line="19" pos:column="20">0<pos:position pos:line="19" pos:column="21"/></literal></expr>;<pos:position pos:line="19" pos:column="22"/></expr_stmt>
  <expr_stmt><expr><name pos:line="20" pos:column="3">post_decompress<pos:position pos:line="20" pos:column="18"/></name> <operator pos:line="20" pos:column="19">=<pos:position pos:line="20" pos:column="20"/></operator> <literal type="number" pos:line="20" pos:column="21">0<pos:position pos:line="20" pos:column="22"/></literal></expr>;<pos:position pos:line="20" pos:column="23"/></expr_stmt>

  <while pos:line="22" pos:column="3">while <condition pos:line="22" pos:column="9">(<expr><call><name pos:line="22" pos:column="10">fgets<pos:position pos:line="22" pos:column="15"/></name><argument_list pos:line="22" pos:column="15">(<argument><expr><name pos:line="22" pos:column="16">buffer<pos:position pos:line="22" pos:column="22"/></name></expr></argument>, <argument><expr><sizeof pos:line="22" pos:column="24">sizeof<argument_list pos:line="22" pos:column="30">(<argument><expr><name pos:line="22" pos:column="31">buffer<pos:position pos:line="22" pos:column="37"/></name></expr></argument>)<pos:position pos:line="22" pos:column="38"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="22" pos:column="40">fh<pos:position pos:line="22" pos:column="42"/></name></expr></argument>)<pos:position pos:line="22" pos:column="43"/></argument_list></call> <operator pos:line="22" pos:column="44">!=<pos:position pos:line="22" pos:column="46"/></operator> <name pos:line="22" pos:column="47">NULL<pos:position pos:line="22" pos:column="51"/></name></expr>)<pos:position pos:line="22" pos:column="52"/></condition> <block pos:line="22" pos:column="53">{
    <expr_stmt><expr><name pos:line="23" pos:column="5">fields_num<pos:position pos:line="23" pos:column="15"/></name> <operator pos:line="23" pos:column="16">=<pos:position pos:line="23" pos:column="17"/></operator> <call><name pos:line="23" pos:column="18">openvpn_strsplit<pos:position pos:line="23" pos:column="34"/></name><argument_list pos:line="23" pos:column="34">(<argument><expr><name pos:line="23" pos:column="35">buffer<pos:position pos:line="23" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="43">fields<pos:position pos:line="23" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="51">max_fields<pos:position pos:line="23" pos:column="61"/></name></expr></argument>)<pos:position pos:line="23" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="63"/></expr_stmt>

    <comment type="block" pos:line="25" pos:column="5">/* status file is generated by openvpn/sig.c:print_status()
     * http://svn.openvpn.net/projects/openvpn/trunk/openvpn/sig.c
     *
     * The line we're expecting has 2 fields. We ignore all lines
     *  with more or less fields.
     */</comment>
    <if pos:line="31" pos:column="5">if <condition pos:line="31" pos:column="8">(<expr><name pos:line="31" pos:column="9">fields_num<pos:position pos:line="31" pos:column="19"/></name> <operator pos:line="31" pos:column="20">!=<pos:position pos:line="31" pos:column="22"/></operator> <literal type="number" pos:line="31" pos:column="23">2<pos:position pos:line="31" pos:column="24"/></literal></expr>)<pos:position pos:line="31" pos:column="25"/></condition><then pos:line="31" pos:column="25"> <block pos:line="31" pos:column="26">{
      <continue pos:line="32" pos:column="7">continue;<pos:position pos:line="32" pos:column="16"/></continue>
    }<pos:position pos:line="33" pos:column="6"/></block></then></if>

    <if pos:line="35" pos:column="5">if <condition pos:line="35" pos:column="8">(<expr><call><name pos:line="35" pos:column="9">strcmp<pos:position pos:line="35" pos:column="15"/></name><argument_list pos:line="35" pos:column="15">(<argument><expr><name><name pos:line="35" pos:column="16">fields<pos:position pos:line="35" pos:column="22"/></name><index pos:line="35" pos:column="22">[<expr><literal type="number" pos:line="35" pos:column="23">0<pos:position pos:line="35" pos:column="24"/></literal></expr>]<pos:position pos:line="35" pos:column="25"/></index></name></expr></argument>, <argument><expr><literal type="string" pos:line="35" pos:column="27">"TUN/TAP read bytes"<pos:position pos:line="35" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="35" pos:column="48"/></argument_list></call> <operator pos:line="35" pos:column="49">==<pos:position pos:line="35" pos:column="51"/></operator> <literal type="number" pos:line="35" pos:column="52">0<pos:position pos:line="35" pos:column="53"/></literal></expr>)<pos:position pos:line="35" pos:column="54"/></condition><then pos:line="35" pos:column="54"> <block pos:line="35" pos:column="55">{
      <comment type="block" pos:line="36" pos:column="7">/* read from the system and sent over the tunnel */</comment>
      <expr_stmt><expr><name pos:line="37" pos:column="7">tun_tx<pos:position pos:line="37" pos:column="13"/></name> <operator pos:line="37" pos:column="14">=<pos:position pos:line="37" pos:column="15"/></operator> <call><name pos:line="37" pos:column="16">atoll<pos:position pos:line="37" pos:column="21"/></name><argument_list pos:line="37" pos:column="21">(<argument><expr><name><name pos:line="37" pos:column="22">fields<pos:position pos:line="37" pos:column="28"/></name><index pos:line="37" pos:column="28">[<expr><literal type="number" pos:line="37" pos:column="29">1<pos:position pos:line="37" pos:column="30"/></literal></expr>]<pos:position pos:line="37" pos:column="31"/></index></name></expr></argument>)<pos:position pos:line="37" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="33"/></expr_stmt>
    }<pos:position pos:line="38" pos:column="6"/></block></then> <elseif pos:line="38" pos:column="7">else <if pos:line="38" pos:column="12">if <condition pos:line="38" pos:column="15">(<expr><call><name pos:line="38" pos:column="16">strcmp<pos:position pos:line="38" pos:column="22"/></name><argument_list pos:line="38" pos:column="22">(<argument><expr><name><name pos:line="38" pos:column="23">fields<pos:position pos:line="38" pos:column="29"/></name><index pos:line="38" pos:column="29">[<expr><literal type="number" pos:line="38" pos:column="30">0<pos:position pos:line="38" pos:column="31"/></literal></expr>]<pos:position pos:line="38" pos:column="32"/></index></name></expr></argument>, <argument><expr><literal type="string" pos:line="38" pos:column="34">"TUN/TAP write bytes"<pos:position pos:line="38" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="38" pos:column="56"/></argument_list></call> <operator pos:line="38" pos:column="57">==<pos:position pos:line="38" pos:column="59"/></operator> <literal type="number" pos:line="38" pos:column="60">0<pos:position pos:line="38" pos:column="61"/></literal></expr>)<pos:position pos:line="38" pos:column="62"/></condition><then pos:line="38" pos:column="62"> <block pos:line="38" pos:column="63">{
      <comment type="block" pos:line="39" pos:column="7">/* read from the tunnel and written in the system */</comment>
      <expr_stmt><expr><name pos:line="40" pos:column="7">tun_rx<pos:position pos:line="40" pos:column="13"/></name> <operator pos:line="40" pos:column="14">=<pos:position pos:line="40" pos:column="15"/></operator> <call><name pos:line="40" pos:column="16">atoll<pos:position pos:line="40" pos:column="21"/></name><argument_list pos:line="40" pos:column="21">(<argument><expr><name><name pos:line="40" pos:column="22">fields<pos:position pos:line="40" pos:column="28"/></name><index pos:line="40" pos:column="28">[<expr><literal type="number" pos:line="40" pos:column="29">1<pos:position pos:line="40" pos:column="30"/></literal></expr>]<pos:position pos:line="40" pos:column="31"/></index></name></expr></argument>)<pos:position pos:line="40" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="33"/></expr_stmt>
    }<pos:position pos:line="41" pos:column="6"/></block></then></if></elseif> <elseif pos:line="41" pos:column="7">else <if pos:line="41" pos:column="12">if <condition pos:line="41" pos:column="15">(<expr><call><name pos:line="41" pos:column="16">strcmp<pos:position pos:line="41" pos:column="22"/></name><argument_list pos:line="41" pos:column="22">(<argument><expr><name><name pos:line="41" pos:column="23">fields<pos:position pos:line="41" pos:column="29"/></name><index pos:line="41" pos:column="29">[<expr><literal type="number" pos:line="41" pos:column="30">0<pos:position pos:line="41" pos:column="31"/></literal></expr>]<pos:position pos:line="41" pos:column="32"/></index></name></expr></argument>, <argument><expr><literal type="string" pos:line="41" pos:column="34">"TCP/UDP read bytes"<pos:position pos:line="41" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="41" pos:column="55"/></argument_list></call> <operator pos:line="41" pos:column="56">==<pos:position pos:line="41" pos:column="58"/></operator> <literal type="number" pos:line="41" pos:column="59">0<pos:position pos:line="41" pos:column="60"/></literal></expr>)<pos:position pos:line="41" pos:column="61"/></condition><then pos:line="41" pos:column="61"> <block pos:line="41" pos:column="62">{
      <expr_stmt><expr><name pos:line="42" pos:column="7">link_rx<pos:position pos:line="42" pos:column="14"/></name> <operator pos:line="42" pos:column="15">=<pos:position pos:line="42" pos:column="16"/></operator> <call><name pos:line="42" pos:column="17">atoll<pos:position pos:line="42" pos:column="22"/></name><argument_list pos:line="42" pos:column="22">(<argument><expr><name><name pos:line="42" pos:column="23">fields<pos:position pos:line="42" pos:column="29"/></name><index pos:line="42" pos:column="29">[<expr><literal type="number" pos:line="42" pos:column="30">1<pos:position pos:line="42" pos:column="31"/></literal></expr>]<pos:position pos:line="42" pos:column="32"/></index></name></expr></argument>)<pos:position pos:line="42" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="34"/></expr_stmt>
    }<pos:position pos:line="43" pos:column="6"/></block></then></if></elseif> <elseif pos:line="43" pos:column="7">else <if pos:line="43" pos:column="12">if <condition pos:line="43" pos:column="15">(<expr><call><name pos:line="43" pos:column="16">strcmp<pos:position pos:line="43" pos:column="22"/></name><argument_list pos:line="43" pos:column="22">(<argument><expr><name><name pos:line="43" pos:column="23">fields<pos:position pos:line="43" pos:column="29"/></name><index pos:line="43" pos:column="29">[<expr><literal type="number" pos:line="43" pos:column="30">0<pos:position pos:line="43" pos:column="31"/></literal></expr>]<pos:position pos:line="43" pos:column="32"/></index></name></expr></argument>, <argument><expr><literal type="string" pos:line="43" pos:column="34">"TCP/UDP write bytes"<pos:position pos:line="43" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="43" pos:column="56"/></argument_list></call> <operator pos:line="43" pos:column="57">==<pos:position pos:line="43" pos:column="59"/></operator> <literal type="number" pos:line="43" pos:column="60">0<pos:position pos:line="43" pos:column="61"/></literal></expr>)<pos:position pos:line="43" pos:column="62"/></condition><then pos:line="43" pos:column="62"> <block pos:line="43" pos:column="63">{
      <expr_stmt><expr><name pos:line="44" pos:column="7">link_tx<pos:position pos:line="44" pos:column="14"/></name> <operator pos:line="44" pos:column="15">=<pos:position pos:line="44" pos:column="16"/></operator> <call><name pos:line="44" pos:column="17">atoll<pos:position pos:line="44" pos:column="22"/></name><argument_list pos:line="44" pos:column="22">(<argument><expr><name><name pos:line="44" pos:column="23">fields<pos:position pos:line="44" pos:column="29"/></name><index pos:line="44" pos:column="29">[<expr><literal type="number" pos:line="44" pos:column="30">1<pos:position pos:line="44" pos:column="31"/></literal></expr>]<pos:position pos:line="44" pos:column="32"/></index></name></expr></argument>)<pos:position pos:line="44" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="34"/></expr_stmt>
    }<pos:position pos:line="45" pos:column="6"/></block></then></if></elseif> <elseif pos:line="45" pos:column="7">else <if pos:line="45" pos:column="12">if <condition pos:line="45" pos:column="15">(<expr><call><name pos:line="45" pos:column="16">strcmp<pos:position pos:line="45" pos:column="22"/></name><argument_list pos:line="45" pos:column="22">(<argument><expr><name><name pos:line="45" pos:column="23">fields<pos:position pos:line="45" pos:column="29"/></name><index pos:line="45" pos:column="29">[<expr><literal type="number" pos:line="45" pos:column="30">0<pos:position pos:line="45" pos:column="31"/></literal></expr>]<pos:position pos:line="45" pos:column="32"/></index></name></expr></argument>, <argument><expr><literal type="string" pos:line="45" pos:column="34">"pre-compress bytes"<pos:position pos:line="45" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="45" pos:column="55"/></argument_list></call> <operator pos:line="45" pos:column="56">==<pos:position pos:line="45" pos:column="58"/></operator> <literal type="number" pos:line="45" pos:column="59">0<pos:position pos:line="45" pos:column="60"/></literal></expr>)<pos:position pos:line="45" pos:column="61"/></condition><then pos:line="45" pos:column="61"> <block pos:line="45" pos:column="62">{
      <expr_stmt><expr><name pos:line="46" pos:column="7">pre_compress<pos:position pos:line="46" pos:column="19"/></name> <operator pos:line="46" pos:column="20">=<pos:position pos:line="46" pos:column="21"/></operator> <call><name pos:line="46" pos:column="22">atoll<pos:position pos:line="46" pos:column="27"/></name><argument_list pos:line="46" pos:column="27">(<argument><expr><name><name pos:line="46" pos:column="28">fields<pos:position pos:line="46" pos:column="34"/></name><index pos:line="46" pos:column="34">[<expr><literal type="number" pos:line="46" pos:column="35">1<pos:position pos:line="46" pos:column="36"/></literal></expr>]<pos:position pos:line="46" pos:column="37"/></index></name></expr></argument>)<pos:position pos:line="46" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="39"/></expr_stmt>
    }<pos:position pos:line="47" pos:column="6"/></block></then></if></elseif> <elseif pos:line="47" pos:column="7">else <if pos:line="47" pos:column="12">if <condition pos:line="47" pos:column="15">(<expr><call><name pos:line="47" pos:column="16">strcmp<pos:position pos:line="47" pos:column="22"/></name><argument_list pos:line="47" pos:column="22">(<argument><expr><name><name pos:line="47" pos:column="23">fields<pos:position pos:line="47" pos:column="29"/></name><index pos:line="47" pos:column="29">[<expr><literal type="number" pos:line="47" pos:column="30">0<pos:position pos:line="47" pos:column="31"/></literal></expr>]<pos:position pos:line="47" pos:column="32"/></index></name></expr></argument>, <argument><expr><literal type="string" pos:line="47" pos:column="34">"post-compress bytes"<pos:position pos:line="47" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="47" pos:column="56"/></argument_list></call> <operator pos:line="47" pos:column="57">==<pos:position pos:line="47" pos:column="59"/></operator> <literal type="number" pos:line="47" pos:column="60">0<pos:position pos:line="47" pos:column="61"/></literal></expr>)<pos:position pos:line="47" pos:column="62"/></condition><then pos:line="47" pos:column="62"> <block pos:line="47" pos:column="63">{
      <expr_stmt><expr><name pos:line="48" pos:column="7">post_compress<pos:position pos:line="48" pos:column="20"/></name> <operator pos:line="48" pos:column="21">=<pos:position pos:line="48" pos:column="22"/></operator> <call><name pos:line="48" pos:column="23">atoll<pos:position pos:line="48" pos:column="28"/></name><argument_list pos:line="48" pos:column="28">(<argument><expr><name><name pos:line="48" pos:column="29">fields<pos:position pos:line="48" pos:column="35"/></name><index pos:line="48" pos:column="35">[<expr><literal type="number" pos:line="48" pos:column="36">1<pos:position pos:line="48" pos:column="37"/></literal></expr>]<pos:position pos:line="48" pos:column="38"/></index></name></expr></argument>)<pos:position pos:line="48" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="40"/></expr_stmt>
    }<pos:position pos:line="49" pos:column="6"/></block></then></if></elseif> <elseif pos:line="49" pos:column="7">else <if pos:line="49" pos:column="12">if <condition pos:line="49" pos:column="15">(<expr><call><name pos:line="49" pos:column="16">strcmp<pos:position pos:line="49" pos:column="22"/></name><argument_list pos:line="49" pos:column="22">(<argument><expr><name><name pos:line="49" pos:column="23">fields<pos:position pos:line="49" pos:column="29"/></name><index pos:line="49" pos:column="29">[<expr><literal type="number" pos:line="49" pos:column="30">0<pos:position pos:line="49" pos:column="31"/></literal></expr>]<pos:position pos:line="49" pos:column="32"/></index></name></expr></argument>, <argument><expr><literal type="string" pos:line="49" pos:column="34">"pre-decompress bytes"<pos:position pos:line="49" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="49" pos:column="57"/></argument_list></call> <operator pos:line="49" pos:column="58">==<pos:position pos:line="49" pos:column="60"/></operator> <literal type="number" pos:line="49" pos:column="61">0<pos:position pos:line="49" pos:column="62"/></literal></expr>)<pos:position pos:line="49" pos:column="63"/></condition><then pos:line="49" pos:column="63"> <block pos:line="49" pos:column="64">{
      <expr_stmt><expr><name pos:line="50" pos:column="7">pre_decompress<pos:position pos:line="50" pos:column="21"/></name> <operator pos:line="50" pos:column="22">=<pos:position pos:line="50" pos:column="23"/></operator> <call><name pos:line="50" pos:column="24">atoll<pos:position pos:line="50" pos:column="29"/></name><argument_list pos:line="50" pos:column="29">(<argument><expr><name><name pos:line="50" pos:column="30">fields<pos:position pos:line="50" pos:column="36"/></name><index pos:line="50" pos:column="36">[<expr><literal type="number" pos:line="50" pos:column="37">1<pos:position pos:line="50" pos:column="38"/></literal></expr>]<pos:position pos:line="50" pos:column="39"/></index></name></expr></argument>)<pos:position pos:line="50" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="41"/></expr_stmt>
    }<pos:position pos:line="51" pos:column="6"/></block></then></if></elseif> <elseif pos:line="51" pos:column="7">else <if pos:line="51" pos:column="12">if <condition pos:line="51" pos:column="15">(<expr><call><name pos:line="51" pos:column="16">strcmp<pos:position pos:line="51" pos:column="22"/></name><argument_list pos:line="51" pos:column="22">(<argument><expr><name><name pos:line="51" pos:column="23">fields<pos:position pos:line="51" pos:column="29"/></name><index pos:line="51" pos:column="29">[<expr><literal type="number" pos:line="51" pos:column="30">0<pos:position pos:line="51" pos:column="31"/></literal></expr>]<pos:position pos:line="51" pos:column="32"/></index></name></expr></argument>, <argument><expr><literal type="string" pos:line="51" pos:column="34">"post-decompress bytes"<pos:position pos:line="51" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="51" pos:column="58"/></argument_list></call> <operator pos:line="51" pos:column="59">==<pos:position pos:line="51" pos:column="61"/></operator> <literal type="number" pos:line="51" pos:column="62">0<pos:position pos:line="51" pos:column="63"/></literal></expr>)<pos:position pos:line="51" pos:column="64"/></condition><then pos:line="51" pos:column="64"> <block pos:line="51" pos:column="65">{
      <expr_stmt><expr><name pos:line="52" pos:column="7">post_decompress<pos:position pos:line="52" pos:column="22"/></name> <operator pos:line="52" pos:column="23">=<pos:position pos:line="52" pos:column="24"/></operator> <call><name pos:line="52" pos:column="25">atoll<pos:position pos:line="52" pos:column="30"/></name><argument_list pos:line="52" pos:column="30">(<argument><expr><name><name pos:line="52" pos:column="31">fields<pos:position pos:line="52" pos:column="37"/></name><index pos:line="52" pos:column="37">[<expr><literal type="number" pos:line="52" pos:column="38">1<pos:position pos:line="52" pos:column="39"/></literal></expr>]<pos:position pos:line="52" pos:column="40"/></index></name></expr></argument>)<pos:position pos:line="52" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="42"/></expr_stmt>
    }<pos:position pos:line="53" pos:column="6"/></block></then></if></elseif></if>
  }<pos:position pos:line="54" pos:column="4"/></block></while>

  <expr_stmt><expr><call><name pos:line="56" pos:column="3">iostats_submit<pos:position pos:line="56" pos:column="17"/></name><argument_list pos:line="56" pos:column="17">(<argument><expr><name pos:line="56" pos:column="18">name<pos:position pos:line="56" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="56" pos:column="24">"traffic"<pos:position pos:line="56" pos:column="33"/></literal></expr></argument>, <argument><expr><name pos:line="56" pos:column="35">link_rx<pos:position pos:line="56" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="56" pos:column="44">link_tx<pos:position pos:line="56" pos:column="51"/></name></expr></argument>)<pos:position pos:line="56" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="53"/></expr_stmt>

  <comment type="block" pos:line="58" pos:column="3">/* we need to force this order to avoid negative values with these unsigned */</comment>
  <expr_stmt><expr><name pos:line="59" pos:column="3">overhead_rx<pos:position pos:line="59" pos:column="14"/></name> <operator pos:line="59" pos:column="15">=<pos:position pos:line="59" pos:column="16"/></operator> <operator pos:line="59" pos:column="17">(<pos:position pos:line="59" pos:column="18"/></operator><operator pos:line="59" pos:column="18">(<pos:position pos:line="59" pos:column="19"/></operator><operator pos:line="59" pos:column="19">(<pos:position pos:line="59" pos:column="20"/></operator><name pos:line="59" pos:column="20">link_rx<pos:position pos:line="59" pos:column="27"/></name> <operator pos:line="59" pos:column="28">-<pos:position pos:line="59" pos:column="29"/></operator> <name pos:line="59" pos:column="30">pre_decompress<pos:position pos:line="59" pos:column="44"/></name><operator pos:line="59" pos:column="44">)<pos:position pos:line="59" pos:column="45"/></operator> <operator pos:line="59" pos:column="46">+<pos:position pos:line="59" pos:column="47"/></operator> <name pos:line="59" pos:column="48">post_decompress<pos:position pos:line="59" pos:column="63"/></name><operator pos:line="59" pos:column="63">)<pos:position pos:line="59" pos:column="64"/></operator> <operator pos:line="59" pos:column="65">-<pos:position pos:line="59" pos:column="66"/></operator> <name pos:line="59" pos:column="67">tun_rx<pos:position pos:line="59" pos:column="73"/></name><operator pos:line="59" pos:column="73">)<pos:position pos:line="59" pos:column="74"/></operator></expr>;<pos:position pos:line="59" pos:column="75"/></expr_stmt>
  <expr_stmt><expr><name pos:line="60" pos:column="3">overhead_tx<pos:position pos:line="60" pos:column="14"/></name> <operator pos:line="60" pos:column="15">=<pos:position pos:line="60" pos:column="16"/></operator> <operator pos:line="60" pos:column="17">(<pos:position pos:line="60" pos:column="18"/></operator><operator pos:line="60" pos:column="18">(<pos:position pos:line="60" pos:column="19"/></operator><operator pos:line="60" pos:column="19">(<pos:position pos:line="60" pos:column="20"/></operator><name pos:line="60" pos:column="20">link_tx<pos:position pos:line="60" pos:column="27"/></name> <operator pos:line="60" pos:column="28">-<pos:position pos:line="60" pos:column="29"/></operator> <name pos:line="60" pos:column="30">post_compress<pos:position pos:line="60" pos:column="43"/></name><operator pos:line="60" pos:column="43">)<pos:position pos:line="60" pos:column="44"/></operator> <operator pos:line="60" pos:column="45">+<pos:position pos:line="60" pos:column="46"/></operator> <name pos:line="60" pos:column="47">pre_compress<pos:position pos:line="60" pos:column="59"/></name><operator pos:line="60" pos:column="59">)<pos:position pos:line="60" pos:column="60"/></operator> <operator pos:line="60" pos:column="61">-<pos:position pos:line="60" pos:column="62"/></operator> <name pos:line="60" pos:column="63">tun_tx<pos:position pos:line="60" pos:column="69"/></name><operator pos:line="60" pos:column="69">)<pos:position pos:line="60" pos:column="70"/></operator></expr>;<pos:position pos:line="60" pos:column="71"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="62" pos:column="3">iostats_submit<pos:position pos:line="62" pos:column="17"/></name><argument_list pos:line="62" pos:column="17">(<argument><expr><name pos:line="62" pos:column="18">name<pos:position pos:line="62" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="62" pos:column="24">"overhead"<pos:position pos:line="62" pos:column="34"/></literal></expr></argument>, <argument><expr><name pos:line="62" pos:column="36">overhead_rx<pos:position pos:line="62" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="62" pos:column="49">overhead_tx<pos:position pos:line="62" pos:column="60"/></name></expr></argument>)<pos:position pos:line="62" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="62"/></expr_stmt>

  <if pos:line="64" pos:column="3">if <condition pos:line="64" pos:column="6">(<expr><name pos:line="64" pos:column="7">collect_compression<pos:position pos:line="64" pos:column="26"/></name></expr>)<pos:position pos:line="64" pos:column="27"/></condition><then pos:line="64" pos:column="27"> <block pos:line="64" pos:column="28">{
    <expr_stmt><expr><call><name pos:line="65" pos:column="5">compression_submit<pos:position pos:line="65" pos:column="23"/></name><argument_list pos:line="65" pos:column="23">(<argument><expr><name pos:line="65" pos:column="24">name<pos:position pos:line="65" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="65" pos:column="30">"data_in"<pos:position pos:line="65" pos:column="39"/></literal></expr></argument>, <argument><expr><name pos:line="65" pos:column="41">post_decompress<pos:position pos:line="65" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="65" pos:column="58">pre_decompress<pos:position pos:line="65" pos:column="72"/></name></expr></argument>)<pos:position pos:line="65" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="74"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="66" pos:column="5">compression_submit<pos:position pos:line="66" pos:column="23"/></name><argument_list pos:line="66" pos:column="23">(<argument><expr><name pos:line="66" pos:column="24">name<pos:position pos:line="66" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="66" pos:column="30">"data_out"<pos:position pos:line="66" pos:column="40"/></literal></expr></argument>, <argument><expr><name pos:line="66" pos:column="42">pre_compress<pos:position pos:line="66" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="66" pos:column="56">post_compress<pos:position pos:line="66" pos:column="69"/></name></expr></argument>)<pos:position pos:line="66" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="71"/></expr_stmt>
  }<pos:position pos:line="67" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="69" pos:column="3">read<pos:position pos:line="69" pos:column="7"/></name> <operator pos:line="69" pos:column="8">=<pos:position pos:line="69" pos:column="9"/></operator> <literal type="number" pos:line="69" pos:column="10">1<pos:position pos:line="69" pos:column="11"/></literal></expr>;<pos:position pos:line="69" pos:column="12"/></expr_stmt>

  <return pos:line="71" pos:column="3">return <expr><operator pos:line="71" pos:column="10">(<pos:position pos:line="71" pos:column="11"/></operator><name pos:line="71" pos:column="11">read<pos:position pos:line="71" pos:column="15"/></name><operator pos:line="71" pos:column="15">)<pos:position pos:line="71" pos:column="16"/></operator></expr>;<pos:position pos:line="71" pos:column="17"/></return>
}<pos:position pos:line="72" pos:column="2"/></block></function></unit>
