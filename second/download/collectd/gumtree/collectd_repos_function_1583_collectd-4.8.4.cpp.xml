<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1583_collectd-4.8.4.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">cache_add_entry<pos:position pos:line="1" pos:column="27"/></name><parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><name pos:line="1" pos:column="28">STRUCT_ENTRY<pos:position pos:line="1" pos:column="40"/></name> <modifier pos:line="1" pos:column="41">*<pos:position pos:line="1" pos:column="42"/></modifier></type><name pos:line="1" pos:column="42">e<pos:position pos:line="1" pos:column="43"/></name></decl></parameter>, 
			   <parameter><decl><type><name pos:line="2" pos:column="28">TC_HANDLE_T<pos:position pos:line="2" pos:column="39"/></name></type> <name pos:line="2" pos:column="40">h<pos:position pos:line="2" pos:column="41"/></name></decl></parameter>, 
			   <parameter><decl><type><name pos:line="3" pos:column="28">STRUCT_ENTRY<pos:position pos:line="3" pos:column="40"/></name> <modifier pos:line="3" pos:column="41">*<pos:position pos:line="3" pos:column="42"/></modifier><modifier pos:line="3" pos:column="42">*<pos:position pos:line="3" pos:column="43"/></modifier></type><name pos:line="3" pos:column="43">prev<pos:position pos:line="3" pos:column="47"/></name></decl></parameter>,
			   <parameter><decl><type><name pos:line="4" pos:column="28">unsigned<pos:position pos:line="4" pos:column="36"/></name> <name pos:line="4" pos:column="37">int<pos:position pos:line="4" pos:column="40"/></name> <modifier pos:line="4" pos:column="41">*<pos:position pos:line="4" pos:column="42"/></modifier></type><name pos:line="4" pos:column="42">num<pos:position pos:line="4" pos:column="45"/></name></decl></parameter>)<pos:position pos:line="4" pos:column="46"/></parameter_list>
<block pos:line="5" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">unsigned<pos:position pos:line="6" pos:column="17"/></name> <name pos:line="6" pos:column="18">int<pos:position pos:line="6" pos:column="21"/></name></type> <name pos:line="6" pos:column="22">builtin<pos:position pos:line="6" pos:column="29"/></name></decl>;<pos:position pos:line="6" pos:column="30"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">unsigned<pos:position pos:line="7" pos:column="17"/></name> <name pos:line="7" pos:column="18">int<pos:position pos:line="7" pos:column="21"/></name></type> <name pos:line="7" pos:column="22">offset<pos:position pos:line="7" pos:column="28"/></name> <init pos:line="7" pos:column="29">= <expr><operator pos:line="7" pos:column="31">(<pos:position pos:line="7" pos:column="32"/></operator><name pos:line="7" pos:column="32">char<pos:position pos:line="7" pos:column="36"/></name> <operator pos:line="7" pos:column="37">*<pos:position pos:line="7" pos:column="38"/></operator><operator pos:line="7" pos:column="38">)<pos:position pos:line="7" pos:column="39"/></operator><name pos:line="7" pos:column="39">e<pos:position pos:line="7" pos:column="40"/></name> <operator pos:line="7" pos:column="41">-<pos:position pos:line="7" pos:column="42"/></operator> <operator pos:line="7" pos:column="43">(<pos:position pos:line="7" pos:column="44"/></operator><name pos:line="7" pos:column="44">char<pos:position pos:line="7" pos:column="48"/></name> <operator pos:line="7" pos:column="49">*<pos:position pos:line="7" pos:column="50"/></operator><operator pos:line="7" pos:column="50">)<pos:position pos:line="7" pos:column="51"/></operator><name><name pos:line="7" pos:column="51">h<pos:position pos:line="7" pos:column="52"/></name><operator pos:line="7" pos:column="52">-&gt;<pos:position pos:line="7" pos:column="57"/></operator><name pos:line="7" pos:column="54">entries<pos:position pos:line="7" pos:column="61"/></name><operator pos:line="7" pos:column="61">-&gt;<pos:position pos:line="7" pos:column="66"/></operator><name pos:line="7" pos:column="63">entrytable<pos:position pos:line="7" pos:column="73"/></name></name></expr></init></decl>;<pos:position pos:line="7" pos:column="74"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="9" pos:column="9">DEBUGP<pos:position pos:line="9" pos:column="15"/></name><argument_list pos:line="9" pos:column="15">(<argument><expr><literal type="string" pos:line="9" pos:column="16">"entering..."<pos:position pos:line="9" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="31"/></expr_stmt>

	<comment type="block" pos:line="11" pos:column="9">/* Last entry ("policy rule"). End it.*/</comment>
	<if pos:line="12" pos:column="9">if <condition pos:line="12" pos:column="12">(<expr><call><name pos:line="12" pos:column="13">iptcb_entry2offset<pos:position pos:line="12" pos:column="31"/></name><argument_list pos:line="12" pos:column="31">(<argument><expr><name pos:line="12" pos:column="32">h<pos:position pos:line="12" pos:column="33"/></name></expr></argument>,<argument><expr><name pos:line="12" pos:column="34">e<pos:position pos:line="12" pos:column="35"/></name></expr></argument>)<pos:position pos:line="12" pos:column="36"/></argument_list></call> <operator pos:line="12" pos:column="37">+<pos:position pos:line="12" pos:column="38"/></operator> <name><name pos:line="12" pos:column="39">e<pos:position pos:line="12" pos:column="40"/></name><operator pos:line="12" pos:column="40">-&gt;<pos:position pos:line="12" pos:column="45"/></operator><name pos:line="12" pos:column="42">next_offset<pos:position pos:line="12" pos:column="53"/></name></name> <operator pos:line="12" pos:column="54">==<pos:position pos:line="12" pos:column="56"/></operator> <name><name pos:line="12" pos:column="57">h<pos:position pos:line="12" pos:column="58"/></name><operator pos:line="12" pos:column="58">-&gt;<pos:position pos:line="12" pos:column="63"/></operator><name pos:line="12" pos:column="60">entries<pos:position pos:line="12" pos:column="67"/></name><operator pos:line="12" pos:column="67">-&gt;<pos:position pos:line="12" pos:column="72"/></operator><name pos:line="12" pos:column="69">size<pos:position pos:line="12" pos:column="73"/></name></name></expr>)<pos:position pos:line="12" pos:column="74"/></condition><then pos:line="12" pos:column="74"> <block pos:line="12" pos:column="75">{
		<comment type="block" pos:line="13" pos:column="17">/* This is the ERROR node at the end of the chain */</comment>
		<expr_stmt><expr><call><name pos:line="14" pos:column="17">DEBUGP_C<pos:position pos:line="14" pos:column="25"/></name><argument_list pos:line="14" pos:column="25">(<argument><expr><literal type="string" pos:line="14" pos:column="26">"%u:%u: end of table:\n"<pos:position pos:line="14" pos:column="50"/></literal></expr></argument>, <argument><expr><operator pos:line="14" pos:column="52">*<pos:position pos:line="14" pos:column="53"/></operator><name pos:line="14" pos:column="53">num<pos:position pos:line="14" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="58">offset<pos:position pos:line="14" pos:column="64"/></name></expr></argument>)<pos:position pos:line="14" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="66"/></expr_stmt>

		<expr_stmt><expr><call><name pos:line="16" pos:column="17">__iptcc_p_del_policy<pos:position pos:line="16" pos:column="37"/></name><argument_list pos:line="16" pos:column="37">(<argument><expr><name pos:line="16" pos:column="38">h<pos:position pos:line="16" pos:column="39"/></name></expr></argument>, <argument><expr><operator pos:line="16" pos:column="41">*<pos:position pos:line="16" pos:column="42"/></operator><name pos:line="16" pos:column="42">num<pos:position pos:line="16" pos:column="45"/></name></expr></argument>)<pos:position pos:line="16" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="47"/></expr_stmt>

		<expr_stmt><expr><name><name pos:line="18" pos:column="17">h<pos:position pos:line="18" pos:column="18"/></name><operator pos:line="18" pos:column="18">-&gt;<pos:position pos:line="18" pos:column="23"/></operator><name pos:line="18" pos:column="20">chain_iterator_cur<pos:position pos:line="18" pos:column="38"/></name></name> <operator pos:line="18" pos:column="39">=<pos:position pos:line="18" pos:column="40"/></operator> <name pos:line="18" pos:column="41">NULL<pos:position pos:line="18" pos:column="45"/></name></expr>;<pos:position pos:line="18" pos:column="46"/></expr_stmt>
		<goto pos:line="19" pos:column="17">goto <name pos:line="19" pos:column="22">out_inc<pos:position pos:line="19" pos:column="29"/></name>;<pos:position pos:line="19" pos:column="30"/></goto>
	}<pos:position pos:line="20" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="22" pos:column="9">/* We know this is the start of a new chain if it's an ERROR
	 * target, or a hook entry point */</comment>

	<if pos:line="25" pos:column="9">if <condition pos:line="25" pos:column="12">(<expr><call><name pos:line="25" pos:column="13">strcmp<pos:position pos:line="25" pos:column="19"/></name><argument_list pos:line="25" pos:column="19">(<argument><expr><call><name pos:line="25" pos:column="20">GET_TARGET<pos:position pos:line="25" pos:column="30"/></name><argument_list pos:line="25" pos:column="30">(<argument><expr><name pos:line="25" pos:column="31">e<pos:position pos:line="25" pos:column="32"/></name></expr></argument>)<pos:position pos:line="25" pos:column="33"/></argument_list></call><operator pos:line="25" pos:column="33">-&gt;<pos:position pos:line="25" pos:column="38"/></operator><name><name pos:line="25" pos:column="35">u<pos:position pos:line="25" pos:column="36"/></name><operator pos:line="25" pos:column="36">.<pos:position pos:line="25" pos:column="37"/></operator><name pos:line="25" pos:column="37">user<pos:position pos:line="25" pos:column="41"/></name><operator pos:line="25" pos:column="41">.<pos:position pos:line="25" pos:column="42"/></operator><name pos:line="25" pos:column="42">name<pos:position pos:line="25" pos:column="46"/></name></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="48">ERROR_TARGET<pos:position pos:line="25" pos:column="60"/></name></expr></argument>)<pos:position pos:line="25" pos:column="61"/></argument_list></call> <operator pos:line="25" pos:column="62">==<pos:position pos:line="25" pos:column="64"/></operator> <literal type="number" pos:line="25" pos:column="65">0<pos:position pos:line="25" pos:column="66"/></literal></expr>)<pos:position pos:line="25" pos:column="67"/></condition><then pos:line="25" pos:column="67"> <block pos:line="25" pos:column="68">{
		<decl_stmt><decl><type><name><name pos:line="26" pos:column="17">struct<pos:position pos:line="26" pos:column="23"/></name> <name pos:line="26" pos:column="24">chain_head<pos:position pos:line="26" pos:column="34"/></name></name> <modifier pos:line="26" pos:column="35">*<pos:position pos:line="26" pos:column="36"/></modifier></type><name pos:line="26" pos:column="36">c<pos:position pos:line="26" pos:column="37"/></name> <init pos:line="26" pos:column="38">= 
			<expr><call><name pos:line="27" pos:column="25">iptcc_alloc_chain_head<pos:position pos:line="27" pos:column="47"/></name><argument_list pos:line="27" pos:column="47">(<argument><expr><operator pos:line="27" pos:column="48">(<pos:position pos:line="27" pos:column="49"/></operator><specifier pos:line="27" pos:column="49">const<pos:position pos:line="27" pos:column="54"/></specifier> <name pos:line="27" pos:column="55">char<pos:position pos:line="27" pos:column="59"/></name> <operator pos:line="27" pos:column="60">*<pos:position pos:line="27" pos:column="61"/></operator><operator pos:line="27" pos:column="61">)<pos:position pos:line="27" pos:column="62"/></operator><call><name pos:line="27" pos:column="62">GET_TARGET<pos:position pos:line="27" pos:column="72"/></name><argument_list pos:line="27" pos:column="72">(<argument><expr><name pos:line="27" pos:column="73">e<pos:position pos:line="27" pos:column="74"/></name></expr></argument>)<pos:position pos:line="27" pos:column="75"/></argument_list></call><operator pos:line="27" pos:column="75">-&gt;<pos:position pos:line="27" pos:column="80"/></operator><name pos:line="27" pos:column="77">data<pos:position pos:line="27" pos:column="81"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="27" pos:column="83">0<pos:position pos:line="27" pos:column="84"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="85"/></argument_list></call></expr></init></decl>;<pos:position pos:line="27" pos:column="86"/></decl_stmt>
		<expr_stmt><expr><call><name pos:line="28" pos:column="17">DEBUGP_C<pos:position pos:line="28" pos:column="25"/></name><argument_list pos:line="28" pos:column="25">(<argument><expr><literal type="string" pos:line="28" pos:column="26">"%u:%u:new userdefined chain %s: %p\n"<pos:position pos:line="28" pos:column="64"/></literal></expr></argument>, <argument><expr><operator pos:line="28" pos:column="66">*<pos:position pos:line="28" pos:column="67"/></operator><name pos:line="28" pos:column="67">num<pos:position pos:line="28" pos:column="70"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="72">offset<pos:position pos:line="28" pos:column="78"/></name></expr></argument>, 
			<argument><expr><operator pos:line="29" pos:column="25">(<pos:position pos:line="29" pos:column="26"/></operator><name pos:line="29" pos:column="26">char<pos:position pos:line="29" pos:column="30"/></name> <operator pos:line="29" pos:column="31">*<pos:position pos:line="29" pos:column="32"/></operator><operator pos:line="29" pos:column="32">)<pos:position pos:line="29" pos:column="33"/></operator><name><name pos:line="29" pos:column="33">c<pos:position pos:line="29" pos:column="34"/></name><operator pos:line="29" pos:column="34">-&gt;<pos:position pos:line="29" pos:column="39"/></operator><name pos:line="29" pos:column="36">name<pos:position pos:line="29" pos:column="40"/></name></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="42">c<pos:position pos:line="29" pos:column="43"/></name></expr></argument>)<pos:position pos:line="29" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="45"/></expr_stmt>
		<if pos:line="30" pos:column="17">if <condition pos:line="30" pos:column="20">(<expr><operator pos:line="30" pos:column="21">!<pos:position pos:line="30" pos:column="22"/></operator><name pos:line="30" pos:column="22">c<pos:position pos:line="30" pos:column="23"/></name></expr>)<pos:position pos:line="30" pos:column="24"/></condition><then pos:line="30" pos:column="24"> <block pos:line="30" pos:column="25">{
			<expr_stmt><expr><name pos:line="31" pos:column="25">errno<pos:position pos:line="31" pos:column="30"/></name> <operator pos:line="31" pos:column="31">=<pos:position pos:line="31" pos:column="32"/></operator> <operator pos:line="31" pos:column="33">-<pos:position pos:line="31" pos:column="34"/></operator><name pos:line="31" pos:column="34">ENOMEM<pos:position pos:line="31" pos:column="40"/></name></expr>;<pos:position pos:line="31" pos:column="41"/></expr_stmt>
			<return pos:line="32" pos:column="25">return <expr><operator pos:line="32" pos:column="32">-<pos:position pos:line="32" pos:column="33"/></operator><literal type="number" pos:line="32" pos:column="33">1<pos:position pos:line="32" pos:column="34"/></literal></expr>;<pos:position pos:line="32" pos:column="35"/></return>
		}<pos:position pos:line="33" pos:column="18"/></block></then></if>
		<expr_stmt><expr><name><name pos:line="34" pos:column="17">h<pos:position pos:line="34" pos:column="18"/></name><operator pos:line="34" pos:column="18">-&gt;<pos:position pos:line="34" pos:column="23"/></operator><name pos:line="34" pos:column="20">num_chains<pos:position pos:line="34" pos:column="30"/></name></name><operator pos:line="34" pos:column="30">++<pos:position pos:line="34" pos:column="32"/></operator></expr>;<pos:position pos:line="34" pos:column="33"/></expr_stmt> <comment type="block" pos:line="34" pos:column="34">/* New user defined chain */</comment>

		<expr_stmt><expr><call><name pos:line="36" pos:column="17">__iptcc_p_add_chain<pos:position pos:line="36" pos:column="36"/></name><argument_list pos:line="36" pos:column="36">(<argument><expr><name pos:line="36" pos:column="37">h<pos:position pos:line="36" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="40">c<pos:position pos:line="36" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="43">offset<pos:position pos:line="36" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="51">num<pos:position pos:line="36" pos:column="54"/></name></expr></argument>)<pos:position pos:line="36" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="56"/></expr_stmt>

	}<pos:position pos:line="38" pos:column="10"/></block></then> <elseif pos:line="38" pos:column="11">else <if pos:line="38" pos:column="16">if <condition pos:line="38" pos:column="19">(<expr><operator pos:line="38" pos:column="20">(<pos:position pos:line="38" pos:column="21"/></operator><name pos:line="38" pos:column="21">builtin<pos:position pos:line="38" pos:column="28"/></name> <operator pos:line="38" pos:column="29">=<pos:position pos:line="38" pos:column="30"/></operator> <call><name pos:line="38" pos:column="31">iptcb_ent_is_hook_entry<pos:position pos:line="38" pos:column="54"/></name><argument_list pos:line="38" pos:column="54">(<argument><expr><name pos:line="38" pos:column="55">e<pos:position pos:line="38" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="58">h<pos:position pos:line="38" pos:column="59"/></name></expr></argument>)<pos:position pos:line="38" pos:column="60"/></argument_list></call><operator pos:line="38" pos:column="60">)<pos:position pos:line="38" pos:column="61"/></operator> <operator pos:line="38" pos:column="62">!=<pos:position pos:line="38" pos:column="64"/></operator> <literal type="number" pos:line="38" pos:column="65">0<pos:position pos:line="38" pos:column="66"/></literal></expr>)<pos:position pos:line="38" pos:column="67"/></condition><then pos:line="38" pos:column="67"> <block pos:line="38" pos:column="68">{
		<decl_stmt><decl><type><name><name pos:line="39" pos:column="17">struct<pos:position pos:line="39" pos:column="23"/></name> <name pos:line="39" pos:column="24">chain_head<pos:position pos:line="39" pos:column="34"/></name></name> <modifier pos:line="39" pos:column="35">*<pos:position pos:line="39" pos:column="36"/></modifier></type><name pos:line="39" pos:column="36">c<pos:position pos:line="39" pos:column="37"/></name> <init pos:line="39" pos:column="38">=
			<expr><call><name pos:line="40" pos:column="25">iptcc_alloc_chain_head<pos:position pos:line="40" pos:column="47"/></name><argument_list pos:line="40" pos:column="47">(<argument><expr><operator pos:line="40" pos:column="48">(<pos:position pos:line="40" pos:column="49"/></operator><name pos:line="40" pos:column="49">char<pos:position pos:line="40" pos:column="53"/></name> <operator pos:line="40" pos:column="54">*<pos:position pos:line="40" pos:column="55"/></operator><operator pos:line="40" pos:column="55">)<pos:position pos:line="40" pos:column="56"/></operator><name><name pos:line="40" pos:column="56">hooknames<pos:position pos:line="40" pos:column="65"/></name><index pos:line="40" pos:column="65">[<expr><name pos:line="40" pos:column="66">builtin<pos:position pos:line="40" pos:column="73"/></name><operator pos:line="40" pos:column="73">-<pos:position pos:line="40" pos:column="74"/></operator><literal type="number" pos:line="40" pos:column="74">1<pos:position pos:line="40" pos:column="75"/></literal></expr>]<pos:position pos:line="40" pos:column="76"/></index></name></expr></argument>, 
						<argument><expr><name pos:line="41" pos:column="49">builtin<pos:position pos:line="41" pos:column="56"/></name></expr></argument>)<pos:position pos:line="41" pos:column="57"/></argument_list></call></expr></init></decl>;<pos:position pos:line="41" pos:column="58"/></decl_stmt>
		<expr_stmt><expr><call><name pos:line="42" pos:column="17">DEBUGP_C<pos:position pos:line="42" pos:column="25"/></name><argument_list pos:line="42" pos:column="25">(<argument><expr><literal type="string" pos:line="42" pos:column="26">"%u:%u new builtin chain: %p (rules=%p)\n"<pos:position pos:line="42" pos:column="68"/></literal></expr></argument>, 
			<argument><expr><operator pos:line="43" pos:column="25">*<pos:position pos:line="43" pos:column="26"/></operator><name pos:line="43" pos:column="26">num<pos:position pos:line="43" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="31">offset<pos:position pos:line="43" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="39">c<pos:position pos:line="43" pos:column="40"/></name></expr></argument>, <argument><expr><operator pos:line="43" pos:column="42">&amp;<pos:position pos:line="43" pos:column="47"/></operator><name><name pos:line="43" pos:column="43">c<pos:position pos:line="43" pos:column="44"/></name><operator pos:line="43" pos:column="44">-&gt;<pos:position pos:line="43" pos:column="49"/></operator><name pos:line="43" pos:column="46">rules<pos:position pos:line="43" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="43" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="53"/></expr_stmt>
		<if pos:line="44" pos:column="17">if <condition pos:line="44" pos:column="20">(<expr><operator pos:line="44" pos:column="21">!<pos:position pos:line="44" pos:column="22"/></operator><name pos:line="44" pos:column="22">c<pos:position pos:line="44" pos:column="23"/></name></expr>)<pos:position pos:line="44" pos:column="24"/></condition><then pos:line="44" pos:column="24"> <block pos:line="44" pos:column="25">{
			<expr_stmt><expr><name pos:line="45" pos:column="25">errno<pos:position pos:line="45" pos:column="30"/></name> <operator pos:line="45" pos:column="31">=<pos:position pos:line="45" pos:column="32"/></operator> <operator pos:line="45" pos:column="33">-<pos:position pos:line="45" pos:column="34"/></operator><name pos:line="45" pos:column="34">ENOMEM<pos:position pos:line="45" pos:column="40"/></name></expr>;<pos:position pos:line="45" pos:column="41"/></expr_stmt>
			<return pos:line="46" pos:column="25">return <expr><operator pos:line="46" pos:column="32">-<pos:position pos:line="46" pos:column="33"/></operator><literal type="number" pos:line="46" pos:column="33">1<pos:position pos:line="46" pos:column="34"/></literal></expr>;<pos:position pos:line="46" pos:column="35"/></return>
		}<pos:position pos:line="47" pos:column="18"/></block></then></if>

		<expr_stmt><expr><name><name pos:line="49" pos:column="17">c<pos:position pos:line="49" pos:column="18"/></name><operator pos:line="49" pos:column="18">-&gt;<pos:position pos:line="49" pos:column="23"/></operator><name pos:line="49" pos:column="20">hooknum<pos:position pos:line="49" pos:column="27"/></name></name> <operator pos:line="49" pos:column="28">=<pos:position pos:line="49" pos:column="29"/></operator> <name pos:line="49" pos:column="30">builtin<pos:position pos:line="49" pos:column="37"/></name></expr>;<pos:position pos:line="49" pos:column="38"/></expr_stmt>

		<expr_stmt><expr><call><name pos:line="51" pos:column="17">__iptcc_p_add_chain<pos:position pos:line="51" pos:column="36"/></name><argument_list pos:line="51" pos:column="36">(<argument><expr><name pos:line="51" pos:column="37">h<pos:position pos:line="51" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="51" pos:column="40">c<pos:position pos:line="51" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="51" pos:column="43">offset<pos:position pos:line="51" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="51" pos:column="51">num<pos:position pos:line="51" pos:column="54"/></name></expr></argument>)<pos:position pos:line="51" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="56"/></expr_stmt>

		<comment type="block" pos:line="53" pos:column="17">/* FIXME: this is ugly. */</comment>
		<goto pos:line="54" pos:column="17">goto <name pos:line="54" pos:column="22">new_rule<pos:position pos:line="54" pos:column="30"/></name>;<pos:position pos:line="54" pos:column="31"/></goto>
	}<pos:position pos:line="55" pos:column="10"/></block></then></if></elseif> <else pos:line="55" pos:column="11">else <block pos:line="55" pos:column="16">{
		<comment type="block" pos:line="56" pos:column="17">/* has to be normal rule */</comment>
		<decl_stmt><decl><type><name><name pos:line="57" pos:column="17">struct<pos:position pos:line="57" pos:column="23"/></name> <name pos:line="57" pos:column="24">rule_head<pos:position pos:line="57" pos:column="33"/></name></name> <modifier pos:line="57" pos:column="34">*<pos:position pos:line="57" pos:column="35"/></modifier></type><name pos:line="57" pos:column="35">r<pos:position pos:line="57" pos:column="36"/></name></decl>;<pos:position pos:line="57" pos:column="37"/></decl_stmt>
<label><name pos:line="58" pos:column="1">new_rule<pos:position pos:line="58" pos:column="9"/></name>:<pos:position pos:line="58" pos:column="10"/></label>

		<if pos:line="60" pos:column="17">if <condition pos:line="60" pos:column="20">(<expr><operator pos:line="60" pos:column="21">!<pos:position pos:line="60" pos:column="22"/></operator><operator pos:line="60" pos:column="22">(<pos:position pos:line="60" pos:column="23"/></operator><name pos:line="60" pos:column="23">r<pos:position pos:line="60" pos:column="24"/></name> <operator pos:line="60" pos:column="25">=<pos:position pos:line="60" pos:column="26"/></operator> <call><name pos:line="60" pos:column="27">iptcc_alloc_rule<pos:position pos:line="60" pos:column="43"/></name><argument_list pos:line="60" pos:column="43">(<argument><expr><name><name pos:line="60" pos:column="44">h<pos:position pos:line="60" pos:column="45"/></name><operator pos:line="60" pos:column="45">-&gt;<pos:position pos:line="60" pos:column="50"/></operator><name pos:line="60" pos:column="47">chain_iterator_cur<pos:position pos:line="60" pos:column="65"/></name></name></expr></argument>, 
					   <argument><expr><name><name pos:line="61" pos:column="44">e<pos:position pos:line="61" pos:column="45"/></name><operator pos:line="61" pos:column="45">-&gt;<pos:position pos:line="61" pos:column="50"/></operator><name pos:line="61" pos:column="47">next_offset<pos:position pos:line="61" pos:column="58"/></name></name></expr></argument>)<pos:position pos:line="61" pos:column="59"/></argument_list></call><operator pos:line="61" pos:column="59">)<pos:position pos:line="61" pos:column="60"/></operator></expr>)<pos:position pos:line="61" pos:column="61"/></condition><then pos:line="61" pos:column="61"> <block pos:line="61" pos:column="62">{
			<expr_stmt><expr><name pos:line="62" pos:column="25">errno<pos:position pos:line="62" pos:column="30"/></name> <operator pos:line="62" pos:column="31">=<pos:position pos:line="62" pos:column="32"/></operator> <name pos:line="62" pos:column="33">ENOMEM<pos:position pos:line="62" pos:column="39"/></name></expr>;<pos:position pos:line="62" pos:column="40"/></expr_stmt>
			<return pos:line="63" pos:column="25">return <expr><operator pos:line="63" pos:column="32">-<pos:position pos:line="63" pos:column="33"/></operator><literal type="number" pos:line="63" pos:column="33">1<pos:position pos:line="63" pos:column="34"/></literal></expr>;<pos:position pos:line="63" pos:column="35"/></return>
		}<pos:position pos:line="64" pos:column="18"/></block></then></if>
		<expr_stmt><expr><call><name pos:line="65" pos:column="17">DEBUGP_C<pos:position pos:line="65" pos:column="25"/></name><argument_list pos:line="65" pos:column="25">(<argument><expr><literal type="string" pos:line="65" pos:column="26">"%u:%u normal rule: %p: "<pos:position pos:line="65" pos:column="51"/></literal></expr></argument>, <argument><expr><operator pos:line="65" pos:column="53">*<pos:position pos:line="65" pos:column="54"/></operator><name pos:line="65" pos:column="54">num<pos:position pos:line="65" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="65" pos:column="59">offset<pos:position pos:line="65" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="65" pos:column="67">r<pos:position pos:line="65" pos:column="68"/></name></expr></argument>)<pos:position pos:line="65" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="70"/></expr_stmt>

		<expr_stmt><expr><name><name pos:line="67" pos:column="17">r<pos:position pos:line="67" pos:column="18"/></name><operator pos:line="67" pos:column="18">-&gt;<pos:position pos:line="67" pos:column="23"/></operator><name pos:line="67" pos:column="20">index<pos:position pos:line="67" pos:column="25"/></name></name> <operator pos:line="67" pos:column="26">=<pos:position pos:line="67" pos:column="27"/></operator> <operator pos:line="67" pos:column="28">*<pos:position pos:line="67" pos:column="29"/></operator><name pos:line="67" pos:column="29">num<pos:position pos:line="67" pos:column="32"/></name></expr>;<pos:position pos:line="67" pos:column="33"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="68" pos:column="17">r<pos:position pos:line="68" pos:column="18"/></name><operator pos:line="68" pos:column="18">-&gt;<pos:position pos:line="68" pos:column="23"/></operator><name pos:line="68" pos:column="20">offset<pos:position pos:line="68" pos:column="26"/></name></name> <operator pos:line="68" pos:column="27">=<pos:position pos:line="68" pos:column="28"/></operator> <name pos:line="68" pos:column="29">offset<pos:position pos:line="68" pos:column="35"/></name></expr>;<pos:position pos:line="68" pos:column="36"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="69" pos:column="17">memcpy<pos:position pos:line="69" pos:column="23"/></name><argument_list pos:line="69" pos:column="23">(<argument><expr><name><name pos:line="69" pos:column="24">r<pos:position pos:line="69" pos:column="25"/></name><operator pos:line="69" pos:column="25">-&gt;<pos:position pos:line="69" pos:column="30"/></operator><name pos:line="69" pos:column="27">entry<pos:position pos:line="69" pos:column="32"/></name></name></expr></argument>, <argument><expr><name pos:line="69" pos:column="34">e<pos:position pos:line="69" pos:column="35"/></name></expr></argument>, <argument><expr><name><name pos:line="69" pos:column="37">e<pos:position pos:line="69" pos:column="38"/></name><operator pos:line="69" pos:column="38">-&gt;<pos:position pos:line="69" pos:column="43"/></operator><name pos:line="69" pos:column="40">next_offset<pos:position pos:line="69" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="69" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="53"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="70" pos:column="17">r<pos:position pos:line="70" pos:column="18"/></name><operator pos:line="70" pos:column="18">-&gt;<pos:position pos:line="70" pos:column="23"/></operator><name pos:line="70" pos:column="20">counter_map<pos:position pos:line="70" pos:column="31"/></name><operator pos:line="70" pos:column="31">.<pos:position pos:line="70" pos:column="32"/></operator><name pos:line="70" pos:column="32">maptype<pos:position pos:line="70" pos:column="39"/></name></name> <operator pos:line="70" pos:column="40">=<pos:position pos:line="70" pos:column="41"/></operator> <name pos:line="70" pos:column="42">COUNTER_MAP_NORMAL_MAP<pos:position pos:line="70" pos:column="64"/></name></expr>;<pos:position pos:line="70" pos:column="65"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="71" pos:column="17">r<pos:position pos:line="71" pos:column="18"/></name><operator pos:line="71" pos:column="18">-&gt;<pos:position pos:line="71" pos:column="23"/></operator><name pos:line="71" pos:column="20">counter_map<pos:position pos:line="71" pos:column="31"/></name><operator pos:line="71" pos:column="31">.<pos:position pos:line="71" pos:column="32"/></operator><name pos:line="71" pos:column="32">mappos<pos:position pos:line="71" pos:column="38"/></name></name> <operator pos:line="71" pos:column="39">=<pos:position pos:line="71" pos:column="40"/></operator> <name><name pos:line="71" pos:column="41">r<pos:position pos:line="71" pos:column="42"/></name><operator pos:line="71" pos:column="42">-&gt;<pos:position pos:line="71" pos:column="47"/></operator><name pos:line="71" pos:column="44">index<pos:position pos:line="71" pos:column="49"/></name></name></expr>;<pos:position pos:line="71" pos:column="50"/></expr_stmt>

		<comment type="block" pos:line="73" pos:column="17">/* handling of jumps, etc. */</comment>
		<if pos:line="74" pos:column="17">if <condition pos:line="74" pos:column="20">(<expr><operator pos:line="74" pos:column="21">!<pos:position pos:line="74" pos:column="22"/></operator><call><name pos:line="74" pos:column="22">strcmp<pos:position pos:line="74" pos:column="28"/></name><argument_list pos:line="74" pos:column="28">(<argument><expr><call><name pos:line="74" pos:column="29">GET_TARGET<pos:position pos:line="74" pos:column="39"/></name><argument_list pos:line="74" pos:column="39">(<argument><expr><name pos:line="74" pos:column="40">e<pos:position pos:line="74" pos:column="41"/></name></expr></argument>)<pos:position pos:line="74" pos:column="42"/></argument_list></call><operator pos:line="74" pos:column="42">-&gt;<pos:position pos:line="74" pos:column="47"/></operator><name><name pos:line="74" pos:column="44">u<pos:position pos:line="74" pos:column="45"/></name><operator pos:line="74" pos:column="45">.<pos:position pos:line="74" pos:column="46"/></operator><name pos:line="74" pos:column="46">user<pos:position pos:line="74" pos:column="50"/></name><operator pos:line="74" pos:column="50">.<pos:position pos:line="74" pos:column="51"/></operator><name pos:line="74" pos:column="51">name<pos:position pos:line="74" pos:column="55"/></name></name></expr></argument>, <argument><expr><name pos:line="74" pos:column="57">STANDARD_TARGET<pos:position pos:line="74" pos:column="72"/></name></expr></argument>)<pos:position pos:line="74" pos:column="73"/></argument_list></call></expr>)<pos:position pos:line="74" pos:column="74"/></condition><then pos:line="74" pos:column="74"> <block pos:line="74" pos:column="75">{
			<decl_stmt><decl><type><name pos:line="75" pos:column="25">STRUCT_STANDARD_TARGET<pos:position pos:line="75" pos:column="47"/></name> <modifier pos:line="75" pos:column="48">*<pos:position pos:line="75" pos:column="49"/></modifier></type><name pos:line="75" pos:column="49">t<pos:position pos:line="75" pos:column="50"/></name></decl>;<pos:position pos:line="75" pos:column="51"/></decl_stmt>

			<expr_stmt><expr><name pos:line="77" pos:column="25">t<pos:position pos:line="77" pos:column="26"/></name> <operator pos:line="77" pos:column="27">=<pos:position pos:line="77" pos:column="28"/></operator> <operator pos:line="77" pos:column="29">(<pos:position pos:line="77" pos:column="30"/></operator><name pos:line="77" pos:column="30">STRUCT_STANDARD_TARGET<pos:position pos:line="77" pos:column="52"/></name> <operator pos:line="77" pos:column="53">*<pos:position pos:line="77" pos:column="54"/></operator><operator pos:line="77" pos:column="54">)<pos:position pos:line="77" pos:column="55"/></operator><call><name pos:line="77" pos:column="55">GET_TARGET<pos:position pos:line="77" pos:column="65"/></name><argument_list pos:line="77" pos:column="65">(<argument><expr><name pos:line="77" pos:column="66">e<pos:position pos:line="77" pos:column="67"/></name></expr></argument>)<pos:position pos:line="77" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="69"/></expr_stmt>
			<if pos:line="78" pos:column="25">if <condition pos:line="78" pos:column="28">(<expr><name><name pos:line="78" pos:column="29">t<pos:position pos:line="78" pos:column="30"/></name><operator pos:line="78" pos:column="30">-&gt;<pos:position pos:line="78" pos:column="35"/></operator><name pos:line="78" pos:column="32">target<pos:position pos:line="78" pos:column="38"/></name><operator pos:line="78" pos:column="38">.<pos:position pos:line="78" pos:column="39"/></operator><name pos:line="78" pos:column="39">u<pos:position pos:line="78" pos:column="40"/></name><operator pos:line="78" pos:column="40">.<pos:position pos:line="78" pos:column="41"/></operator><name pos:line="78" pos:column="41">target_size<pos:position pos:line="78" pos:column="52"/></name></name>
			    <operator pos:line="79" pos:column="29">!=<pos:position pos:line="79" pos:column="31"/></operator> <call><name pos:line="79" pos:column="32">ALIGN<pos:position pos:line="79" pos:column="37"/></name><argument_list pos:line="79" pos:column="37">(<argument><expr><sizeof pos:line="79" pos:column="38">sizeof<argument_list pos:line="79" pos:column="44">(<argument><expr><name pos:line="79" pos:column="45">STRUCT_STANDARD_TARGET<pos:position pos:line="79" pos:column="67"/></name></expr></argument>)<pos:position pos:line="79" pos:column="68"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="79" pos:column="69"/></argument_list></call></expr>)<pos:position pos:line="79" pos:column="70"/></condition><then pos:line="79" pos:column="70"> <block pos:line="79" pos:column="71">{
				<expr_stmt><expr><name pos:line="80" pos:column="33">errno<pos:position pos:line="80" pos:column="38"/></name> <operator pos:line="80" pos:column="39">=<pos:position pos:line="80" pos:column="40"/></operator> <name pos:line="80" pos:column="41">EINVAL<pos:position pos:line="80" pos:column="47"/></name></expr>;<pos:position pos:line="80" pos:column="48"/></expr_stmt>
				<return pos:line="81" pos:column="33">return <expr><operator pos:line="81" pos:column="40">-<pos:position pos:line="81" pos:column="41"/></operator><literal type="number" pos:line="81" pos:column="41">1<pos:position pos:line="81" pos:column="42"/></literal></expr>;<pos:position pos:line="81" pos:column="43"/></return>
			}<pos:position pos:line="82" pos:column="26"/></block></then></if>

			<if pos:line="84" pos:column="25">if <condition pos:line="84" pos:column="28">(<expr><name><name pos:line="84" pos:column="29">t<pos:position pos:line="84" pos:column="30"/></name><operator pos:line="84" pos:column="30">-&gt;<pos:position pos:line="84" pos:column="35"/></operator><name pos:line="84" pos:column="32">verdict<pos:position pos:line="84" pos:column="39"/></name></name> <operator pos:line="84" pos:column="40">&lt;<pos:position pos:line="84" pos:column="44"/></operator> <literal type="number" pos:line="84" pos:column="42">0<pos:position pos:line="84" pos:column="43"/></literal></expr>)<pos:position pos:line="84" pos:column="44"/></condition><then pos:line="84" pos:column="44"> <block pos:line="84" pos:column="45">{
				<expr_stmt><expr><call><name pos:line="85" pos:column="33">DEBUGP_C<pos:position pos:line="85" pos:column="41"/></name><argument_list pos:line="85" pos:column="41">(<argument><expr><literal type="string" pos:line="85" pos:column="42">"standard, verdict=%d\n"<pos:position pos:line="85" pos:column="66"/></literal></expr></argument>, <argument><expr><name><name pos:line="85" pos:column="68">t<pos:position pos:line="85" pos:column="69"/></name><operator pos:line="85" pos:column="69">-&gt;<pos:position pos:line="85" pos:column="74"/></operator><name pos:line="85" pos:column="71">verdict<pos:position pos:line="85" pos:column="78"/></name></name></expr></argument>)<pos:position pos:line="85" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="80"/></expr_stmt>
				<expr_stmt><expr><name><name pos:line="86" pos:column="33">r<pos:position pos:line="86" pos:column="34"/></name><operator pos:line="86" pos:column="34">-&gt;<pos:position pos:line="86" pos:column="39"/></operator><name pos:line="86" pos:column="36">type<pos:position pos:line="86" pos:column="40"/></name></name> <operator pos:line="86" pos:column="41">=<pos:position pos:line="86" pos:column="42"/></operator> <name pos:line="86" pos:column="43">IPTCC_R_STANDARD<pos:position pos:line="86" pos:column="59"/></name></expr>;<pos:position pos:line="86" pos:column="60"/></expr_stmt>
			}<pos:position pos:line="87" pos:column="26"/></block></then> <elseif pos:line="87" pos:column="27">else <if pos:line="87" pos:column="32">if <condition pos:line="87" pos:column="35">(<expr><name><name pos:line="87" pos:column="36">t<pos:position pos:line="87" pos:column="37"/></name><operator pos:line="87" pos:column="37">-&gt;<pos:position pos:line="87" pos:column="42"/></operator><name pos:line="87" pos:column="39">verdict<pos:position pos:line="87" pos:column="46"/></name></name> <operator pos:line="87" pos:column="47">==<pos:position pos:line="87" pos:column="49"/></operator> <name><name pos:line="87" pos:column="50">r<pos:position pos:line="87" pos:column="51"/></name><operator pos:line="87" pos:column="51">-&gt;<pos:position pos:line="87" pos:column="56"/></operator><name pos:line="87" pos:column="53">offset<pos:position pos:line="87" pos:column="59"/></name></name><operator pos:line="87" pos:column="59">+<pos:position pos:line="87" pos:column="60"/></operator><name><name pos:line="87" pos:column="60">e<pos:position pos:line="87" pos:column="61"/></name><operator pos:line="87" pos:column="61">-&gt;<pos:position pos:line="87" pos:column="66"/></operator><name pos:line="87" pos:column="63">next_offset<pos:position pos:line="87" pos:column="74"/></name></name></expr>)<pos:position pos:line="87" pos:column="75"/></condition><then pos:line="87" pos:column="75"> <block pos:line="87" pos:column="76">{
				<expr_stmt><expr><call><name pos:line="88" pos:column="33">DEBUGP_C<pos:position pos:line="88" pos:column="41"/></name><argument_list pos:line="88" pos:column="41">(<argument><expr><literal type="string" pos:line="88" pos:column="42">"fallthrough\n"<pos:position pos:line="88" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="88" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="59"/></expr_stmt>
				<expr_stmt><expr><name><name pos:line="89" pos:column="33">r<pos:position pos:line="89" pos:column="34"/></name><operator pos:line="89" pos:column="34">-&gt;<pos:position pos:line="89" pos:column="39"/></operator><name pos:line="89" pos:column="36">type<pos:position pos:line="89" pos:column="40"/></name></name> <operator pos:line="89" pos:column="41">=<pos:position pos:line="89" pos:column="42"/></operator> <name pos:line="89" pos:column="43">IPTCC_R_FALLTHROUGH<pos:position pos:line="89" pos:column="62"/></name></expr>;<pos:position pos:line="89" pos:column="63"/></expr_stmt>
			}<pos:position pos:line="90" pos:column="26"/></block></then></if></elseif> <else pos:line="90" pos:column="27">else <block pos:line="90" pos:column="32">{
				<expr_stmt><expr><call><name pos:line="91" pos:column="33">DEBUGP_C<pos:position pos:line="91" pos:column="41"/></name><argument_list pos:line="91" pos:column="41">(<argument><expr><literal type="string" pos:line="91" pos:column="42">"jump, target=%u\n"<pos:position pos:line="91" pos:column="61"/></literal></expr></argument>, <argument><expr><name><name pos:line="91" pos:column="63">t<pos:position pos:line="91" pos:column="64"/></name><operator pos:line="91" pos:column="64">-&gt;<pos:position pos:line="91" pos:column="69"/></operator><name pos:line="91" pos:column="66">verdict<pos:position pos:line="91" pos:column="73"/></name></name></expr></argument>)<pos:position pos:line="91" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="91" pos:column="75"/></expr_stmt>
				<expr_stmt><expr><name><name pos:line="92" pos:column="33">r<pos:position pos:line="92" pos:column="34"/></name><operator pos:line="92" pos:column="34">-&gt;<pos:position pos:line="92" pos:column="39"/></operator><name pos:line="92" pos:column="36">type<pos:position pos:line="92" pos:column="40"/></name></name> <operator pos:line="92" pos:column="41">=<pos:position pos:line="92" pos:column="42"/></operator> <name pos:line="92" pos:column="43">IPTCC_R_JUMP<pos:position pos:line="92" pos:column="55"/></name></expr>;<pos:position pos:line="92" pos:column="56"/></expr_stmt>
				<comment type="block" pos:line="93" pos:column="33">/* Jump target fixup has to be deferred
				 * until second pass, since we migh not
				 * yet have parsed the target */</comment>
			}<pos:position pos:line="96" pos:column="26"/></block></else></if>
		}<pos:position pos:line="97" pos:column="18"/></block></then> <else pos:line="97" pos:column="19">else <block pos:line="97" pos:column="24">{
			<expr_stmt><expr><call><name pos:line="98" pos:column="25">DEBUGP_C<pos:position pos:line="98" pos:column="33"/></name><argument_list pos:line="98" pos:column="33">(<argument><expr><literal type="string" pos:line="98" pos:column="34">"module, target=%s\n"<pos:position pos:line="98" pos:column="55"/></literal></expr></argument>, <argument><expr><call><name pos:line="98" pos:column="57">GET_TARGET<pos:position pos:line="98" pos:column="67"/></name><argument_list pos:line="98" pos:column="67">(<argument><expr><name pos:line="98" pos:column="68">e<pos:position pos:line="98" pos:column="69"/></name></expr></argument>)<pos:position pos:line="98" pos:column="70"/></argument_list></call><operator pos:line="98" pos:column="70">-&gt;<pos:position pos:line="98" pos:column="75"/></operator><name><name pos:line="98" pos:column="72">u<pos:position pos:line="98" pos:column="73"/></name><operator pos:line="98" pos:column="73">.<pos:position pos:line="98" pos:column="74"/></operator><name pos:line="98" pos:column="74">user<pos:position pos:line="98" pos:column="78"/></name><operator pos:line="98" pos:column="78">.<pos:position pos:line="98" pos:column="79"/></operator><name pos:line="98" pos:column="79">name<pos:position pos:line="98" pos:column="83"/></name></name></expr></argument>)<pos:position pos:line="98" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="98" pos:column="85"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="99" pos:column="25">r<pos:position pos:line="99" pos:column="26"/></name><operator pos:line="99" pos:column="26">-&gt;<pos:position pos:line="99" pos:column="31"/></operator><name pos:line="99" pos:column="28">type<pos:position pos:line="99" pos:column="32"/></name></name> <operator pos:line="99" pos:column="33">=<pos:position pos:line="99" pos:column="34"/></operator> <name pos:line="99" pos:column="35">IPTCC_R_MODULE<pos:position pos:line="99" pos:column="49"/></name></expr>;<pos:position pos:line="99" pos:column="50"/></expr_stmt>
		}<pos:position pos:line="100" pos:column="18"/></block></else></if>

		<expr_stmt><expr><call><name pos:line="102" pos:column="17">list_add_tail<pos:position pos:line="102" pos:column="30"/></name><argument_list pos:line="102" pos:column="30">(<argument><expr><operator pos:line="102" pos:column="31">&amp;<pos:position pos:line="102" pos:column="36"/></operator><name><name pos:line="102" pos:column="32">r<pos:position pos:line="102" pos:column="33"/></name><operator pos:line="102" pos:column="33">-&gt;<pos:position pos:line="102" pos:column="38"/></operator><name pos:line="102" pos:column="35">list<pos:position pos:line="102" pos:column="39"/></name></name></expr></argument>, <argument><expr><operator pos:line="102" pos:column="41">&amp;<pos:position pos:line="102" pos:column="46"/></operator><name><name pos:line="102" pos:column="42">h<pos:position pos:line="102" pos:column="43"/></name><operator pos:line="102" pos:column="43">-&gt;<pos:position pos:line="102" pos:column="48"/></operator><name pos:line="102" pos:column="45">chain_iterator_cur<pos:position pos:line="102" pos:column="63"/></name><operator pos:line="102" pos:column="63">-&gt;<pos:position pos:line="102" pos:column="68"/></operator><name pos:line="102" pos:column="65">rules<pos:position pos:line="102" pos:column="70"/></name></name></expr></argument>)<pos:position pos:line="102" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="102" pos:column="72"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="103" pos:column="17">h<pos:position pos:line="103" pos:column="18"/></name><operator pos:line="103" pos:column="18">-&gt;<pos:position pos:line="103" pos:column="23"/></operator><name pos:line="103" pos:column="20">chain_iterator_cur<pos:position pos:line="103" pos:column="38"/></name><operator pos:line="103" pos:column="38">-&gt;<pos:position pos:line="103" pos:column="43"/></operator><name pos:line="103" pos:column="40">num_rules<pos:position pos:line="103" pos:column="49"/></name></name><operator pos:line="103" pos:column="49">++<pos:position pos:line="103" pos:column="51"/></operator></expr>;<pos:position pos:line="103" pos:column="52"/></expr_stmt>
	}<pos:position pos:line="104" pos:column="10"/></block></else></if>
<label><name pos:line="105" pos:column="1">out_inc<pos:position pos:line="105" pos:column="8"/></name>:<pos:position pos:line="105" pos:column="9"/></label>
	<expr_stmt><expr><operator pos:line="106" pos:column="9">(<pos:position pos:line="106" pos:column="10"/></operator><operator pos:line="106" pos:column="10">*<pos:position pos:line="106" pos:column="11"/></operator><name pos:line="106" pos:column="11">num<pos:position pos:line="106" pos:column="14"/></name><operator pos:line="106" pos:column="14">)<pos:position pos:line="106" pos:column="15"/></operator><operator pos:line="106" pos:column="15">++<pos:position pos:line="106" pos:column="17"/></operator></expr>;<pos:position pos:line="106" pos:column="18"/></expr_stmt>
	<return pos:line="107" pos:column="9">return <expr><literal type="number" pos:line="107" pos:column="16">0<pos:position pos:line="107" pos:column="17"/></literal></expr>;<pos:position pos:line="107" pos:column="18"/></return>
}<pos:position pos:line="108" pos:column="2"/></block></function></unit>
