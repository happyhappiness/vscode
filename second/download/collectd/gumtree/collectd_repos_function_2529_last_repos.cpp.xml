<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_2529_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">lcc_listen_and_write<pos:position pos:line="1" pos:column="25"/></name><parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><name pos:line="1" pos:column="26">lcc_listener_t<pos:position pos:line="1" pos:column="40"/></name></type> <name pos:line="1" pos:column="41">srv<pos:position pos:line="1" pos:column="44"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="45"/></parameter_list> <block pos:line="1" pos:column="46">{
  <decl_stmt><decl><type><name pos:line="2" pos:column="3">_Bool<pos:position pos:line="2" pos:column="8"/></name></type> <name pos:line="2" pos:column="9">close_socket<pos:position pos:line="2" pos:column="21"/></name> <init pos:line="2" pos:column="22">= <expr><literal type="number" pos:line="2" pos:column="24">0<pos:position pos:line="2" pos:column="25"/></literal></expr></init></decl>;<pos:position pos:line="2" pos:column="26"/></decl_stmt>

  <if pos:line="4" pos:column="3">if <condition pos:line="4" pos:column="6">(<expr><name><name pos:line="4" pos:column="7">srv<pos:position pos:line="4" pos:column="10"/></name><operator pos:line="4" pos:column="10">.<pos:position pos:line="4" pos:column="11"/></operator><name pos:line="4" pos:column="11">conn<pos:position pos:line="4" pos:column="15"/></name></name> <operator pos:line="4" pos:column="16">&lt;<pos:position pos:line="4" pos:column="20"/></operator> <literal type="number" pos:line="4" pos:column="18">0<pos:position pos:line="4" pos:column="19"/></literal></expr>)<pos:position pos:line="4" pos:column="20"/></condition><then pos:line="4" pos:column="20"> <block pos:line="4" pos:column="21">{
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">int<pos:position pos:line="5" pos:column="8"/></name></type> <name pos:line="5" pos:column="9">status<pos:position pos:line="5" pos:column="15"/></name> <init pos:line="5" pos:column="16">= <expr><call><name pos:line="5" pos:column="18">server_open<pos:position pos:line="5" pos:column="29"/></name><argument_list pos:line="5" pos:column="29">(<argument><expr><operator pos:line="5" pos:column="30">&amp;<pos:position pos:line="5" pos:column="35"/></operator><name pos:line="5" pos:column="31">srv<pos:position pos:line="5" pos:column="34"/></name></expr></argument>)<pos:position pos:line="5" pos:column="35"/></argument_list></call></expr></init></decl>;<pos:position pos:line="5" pos:column="36"/></decl_stmt>
    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><name pos:line="6" pos:column="9">status<pos:position pos:line="6" pos:column="15"/></name> <operator pos:line="6" pos:column="16">!=<pos:position pos:line="6" pos:column="18"/></operator> <literal type="number" pos:line="6" pos:column="19">0<pos:position pos:line="6" pos:column="20"/></literal></expr>)<pos:position pos:line="6" pos:column="21"/></condition><then pos:line="6" pos:column="21">
      <block type="pseudo"><return pos:line="7" pos:column="7">return <expr><name pos:line="7" pos:column="14">status<pos:position pos:line="7" pos:column="20"/></name></expr>;<pos:position pos:line="7" pos:column="21"/></return></block></then></if>
    <expr_stmt><expr><name pos:line="8" pos:column="5">close_socket<pos:position pos:line="8" pos:column="17"/></name> <operator pos:line="8" pos:column="18">=<pos:position pos:line="8" pos:column="19"/></operator> <literal type="number" pos:line="8" pos:column="20">1<pos:position pos:line="8" pos:column="21"/></literal></expr>;<pos:position pos:line="8" pos:column="22"/></expr_stmt>
  }<pos:position pos:line="9" pos:column="4"/></block></then></if>

  <if pos:line="11" pos:column="3">if <condition pos:line="11" pos:column="6">(<expr><name><name pos:line="11" pos:column="7">srv<pos:position pos:line="11" pos:column="10"/></name><operator pos:line="11" pos:column="10">.<pos:position pos:line="11" pos:column="11"/></operator><name pos:line="11" pos:column="11">buffer_size<pos:position pos:line="11" pos:column="22"/></name></name> <operator pos:line="11" pos:column="23">==<pos:position pos:line="11" pos:column="25"/></operator> <literal type="number" pos:line="11" pos:column="26">0<pos:position pos:line="11" pos:column="27"/></literal></expr>)<pos:position pos:line="11" pos:column="28"/></condition><then pos:line="11" pos:column="28">
    <block type="pseudo"><expr_stmt><expr><name><name pos:line="12" pos:column="5">srv<pos:position pos:line="12" pos:column="8"/></name><operator pos:line="12" pos:column="8">.<pos:position pos:line="12" pos:column="9"/></operator><name pos:line="12" pos:column="9">buffer_size<pos:position pos:line="12" pos:column="20"/></name></name> <operator pos:line="12" pos:column="21">=<pos:position pos:line="12" pos:column="22"/></operator> <name pos:line="12" pos:column="23">LCC_NETWORK_BUFFER_SIZE<pos:position pos:line="12" pos:column="46"/></name></expr>;<pos:position pos:line="12" pos:column="47"/></expr_stmt></block></then></if>

  <if pos:line="14" pos:column="3">if <condition pos:line="14" pos:column="6">(<expr><name><name pos:line="14" pos:column="7">srv<pos:position pos:line="14" pos:column="10"/></name><operator pos:line="14" pos:column="10">.<pos:position pos:line="14" pos:column="11"/></operator><name pos:line="14" pos:column="11">parser<pos:position pos:line="14" pos:column="17"/></name></name> <operator pos:line="14" pos:column="18">==<pos:position pos:line="14" pos:column="20"/></operator> <name pos:line="14" pos:column="21">NULL<pos:position pos:line="14" pos:column="25"/></name></expr>)<pos:position pos:line="14" pos:column="26"/></condition><then pos:line="14" pos:column="26">
    <block type="pseudo"><expr_stmt><expr><name><name pos:line="15" pos:column="5">srv<pos:position pos:line="15" pos:column="8"/></name><operator pos:line="15" pos:column="8">.<pos:position pos:line="15" pos:column="9"/></operator><name pos:line="15" pos:column="9">parser<pos:position pos:line="15" pos:column="15"/></name></name> <operator pos:line="15" pos:column="16">=<pos:position pos:line="15" pos:column="17"/></operator> <name pos:line="15" pos:column="18">lcc_network_parse<pos:position pos:line="15" pos:column="35"/></name></expr>;<pos:position pos:line="15" pos:column="36"/></expr_stmt></block></then></if>

  <decl_stmt><decl><type><name pos:line="17" pos:column="3">int<pos:position pos:line="17" pos:column="6"/></name></type> <name pos:line="17" pos:column="7">ret<pos:position pos:line="17" pos:column="10"/></name> <init pos:line="17" pos:column="11">= <expr><literal type="number" pos:line="17" pos:column="13">0<pos:position pos:line="17" pos:column="14"/></literal></expr></init></decl>;<pos:position pos:line="17" pos:column="15"/></decl_stmt>
  <while pos:line="18" pos:column="3">while <condition pos:line="18" pos:column="9">(<expr><literal type="number" pos:line="18" pos:column="10">42<pos:position pos:line="18" pos:column="12"/></literal></expr>)<pos:position pos:line="18" pos:column="13"/></condition> <block pos:line="18" pos:column="14">{
    <decl_stmt><decl><type><name pos:line="19" pos:column="5">char<pos:position pos:line="19" pos:column="9"/></name></type> <name><name pos:line="19" pos:column="10">buffer<pos:position pos:line="19" pos:column="16"/></name><index pos:line="19" pos:column="16">[<expr><name><name pos:line="19" pos:column="17">srv<pos:position pos:line="19" pos:column="20"/></name><operator pos:line="19" pos:column="20">.<pos:position pos:line="19" pos:column="21"/></operator><name pos:line="19" pos:column="21">buffer_size<pos:position pos:line="19" pos:column="32"/></name></name></expr>]<pos:position pos:line="19" pos:column="33"/></index></name></decl>;<pos:position pos:line="19" pos:column="34"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="20" pos:column="5">ssize_t<pos:position pos:line="20" pos:column="12"/></name></type> <name pos:line="20" pos:column="13">len<pos:position pos:line="20" pos:column="16"/></name> <init pos:line="20" pos:column="17">= <expr><call><name pos:line="20" pos:column="19">recv<pos:position pos:line="20" pos:column="23"/></name><argument_list pos:line="20" pos:column="23">(<argument><expr><name><name pos:line="20" pos:column="24">srv<pos:position pos:line="20" pos:column="27"/></name><operator pos:line="20" pos:column="27">.<pos:position pos:line="20" pos:column="28"/></operator><name pos:line="20" pos:column="28">conn<pos:position pos:line="20" pos:column="32"/></name></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="34">buffer<pos:position pos:line="20" pos:column="40"/></name></expr></argument>, <argument><expr><sizeof pos:line="20" pos:column="42">sizeof<argument_list pos:line="20" pos:column="48">(<argument><expr><name pos:line="20" pos:column="49">buffer<pos:position pos:line="20" pos:column="55"/></name></expr></argument>)<pos:position pos:line="20" pos:column="56"/></argument_list></sizeof></expr></argument>, <comment type="block" pos:line="20" pos:column="58">/* flags = */</comment> <argument><expr><literal type="number" pos:line="20" pos:column="72">0<pos:position pos:line="20" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="74"/></argument_list></call></expr></init></decl>;<pos:position pos:line="20" pos:column="75"/></decl_stmt>
    <if pos:line="21" pos:column="5">if <condition pos:line="21" pos:column="8">(<expr><name pos:line="21" pos:column="9">len<pos:position pos:line="21" pos:column="12"/></name> <operator pos:line="21" pos:column="13">==<pos:position pos:line="21" pos:column="15"/></operator> <operator pos:line="21" pos:column="16">-<pos:position pos:line="21" pos:column="17"/></operator><literal type="number" pos:line="21" pos:column="17">1<pos:position pos:line="21" pos:column="18"/></literal></expr>)<pos:position pos:line="21" pos:column="19"/></condition><then pos:line="21" pos:column="19"> <block pos:line="21" pos:column="20">{
      <expr_stmt><expr><name pos:line="22" pos:column="7">ret<pos:position pos:line="22" pos:column="10"/></name> <operator pos:line="22" pos:column="11">=<pos:position pos:line="22" pos:column="12"/></operator> <name pos:line="22" pos:column="13">errno<pos:position pos:line="22" pos:column="18"/></name></expr>;<pos:position pos:line="22" pos:column="19"/></expr_stmt>
      <break pos:line="23" pos:column="7">break;<pos:position pos:line="23" pos:column="13"/></break>
    }<pos:position pos:line="24" pos:column="6"/></block></then> <elseif pos:line="24" pos:column="7">else <if pos:line="24" pos:column="12">if <condition pos:line="24" pos:column="15">(<expr><name pos:line="24" pos:column="16">len<pos:position pos:line="24" pos:column="19"/></name> <operator pos:line="24" pos:column="20">==<pos:position pos:line="24" pos:column="22"/></operator> <literal type="number" pos:line="24" pos:column="23">0<pos:position pos:line="24" pos:column="24"/></literal></expr>)<pos:position pos:line="24" pos:column="25"/></condition><then pos:line="24" pos:column="25"> <block pos:line="24" pos:column="26">{
      <break pos:line="25" pos:column="7">break;<pos:position pos:line="25" pos:column="13"/></break>
    }<pos:position pos:line="26" pos:column="6"/></block></then></if></elseif></if>

    <expr_stmt><expr><operator pos:line="28" pos:column="5">(<pos:position pos:line="28" pos:column="6"/></operator><name pos:line="28" pos:column="6">void<pos:position pos:line="28" pos:column="10"/></name><operator pos:line="28" pos:column="10">)<pos:position pos:line="28" pos:column="11"/></operator><call><name><name pos:line="28" pos:column="11">srv<pos:position pos:line="28" pos:column="14"/></name><operator pos:line="28" pos:column="14">.<pos:position pos:line="28" pos:column="15"/></operator><name pos:line="28" pos:column="15">parser<pos:position pos:line="28" pos:column="21"/></name></name><argument_list pos:line="28" pos:column="21">(<argument><expr><name pos:line="28" pos:column="22">buffer<pos:position pos:line="28" pos:column="28"/></name></expr></argument>, <argument><expr><operator pos:line="28" pos:column="30">(<pos:position pos:line="28" pos:column="31"/></operator><name pos:line="28" pos:column="31">size_t<pos:position pos:line="28" pos:column="37"/></name><operator pos:line="28" pos:column="37">)<pos:position pos:line="28" pos:column="38"/></operator><name pos:line="28" pos:column="38">len<pos:position pos:line="28" pos:column="41"/></name></expr></argument>, <argument><expr><name><name pos:line="28" pos:column="43">srv<pos:position pos:line="28" pos:column="46"/></name><operator pos:line="28" pos:column="46">.<pos:position pos:line="28" pos:column="47"/></operator><name pos:line="28" pos:column="47">parse_options<pos:position pos:line="28" pos:column="60"/></name></name></expr></argument>)<pos:position pos:line="28" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="62"/></expr_stmt>
  }<pos:position pos:line="29" pos:column="4"/></block></while>

  <if pos:line="31" pos:column="3">if <condition pos:line="31" pos:column="6">(<expr><name pos:line="31" pos:column="7">close_socket<pos:position pos:line="31" pos:column="19"/></name></expr>)<pos:position pos:line="31" pos:column="20"/></condition><then pos:line="31" pos:column="20"> <block pos:line="31" pos:column="21">{
    <expr_stmt><expr><call><name pos:line="32" pos:column="5">close<pos:position pos:line="32" pos:column="10"/></name><argument_list pos:line="32" pos:column="10">(<argument><expr><name><name pos:line="32" pos:column="11">srv<pos:position pos:line="32" pos:column="14"/></name><operator pos:line="32" pos:column="14">.<pos:position pos:line="32" pos:column="15"/></operator><name pos:line="32" pos:column="15">conn<pos:position pos:line="32" pos:column="19"/></name></name></expr></argument>)<pos:position pos:line="32" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="21"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="33" pos:column="5">srv<pos:position pos:line="33" pos:column="8"/></name><operator pos:line="33" pos:column="8">.<pos:position pos:line="33" pos:column="9"/></operator><name pos:line="33" pos:column="9">conn<pos:position pos:line="33" pos:column="13"/></name></name> <operator pos:line="33" pos:column="14">=<pos:position pos:line="33" pos:column="15"/></operator> <operator pos:line="33" pos:column="16">-<pos:position pos:line="33" pos:column="17"/></operator><literal type="number" pos:line="33" pos:column="17">1<pos:position pos:line="33" pos:column="18"/></literal></expr>;<pos:position pos:line="33" pos:column="19"/></expr_stmt>
  }<pos:position pos:line="34" pos:column="4"/></block></then></if>

  <return pos:line="36" pos:column="3">return <expr><name pos:line="36" pos:column="10">ret<pos:position pos:line="36" pos:column="13"/></name></expr>;<pos:position pos:line="36" pos:column="14"/></return>
}<pos:position pos:line="37" pos:column="2"/></block></function></unit>
