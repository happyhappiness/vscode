<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1142_collectd-4.6.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name><name pos:line="1" pos:column="8">struct<pos:position pos:line="1" pos:column="14"/></name> <name pos:line="1" pos:column="15">chain_head<pos:position pos:line="1" pos:column="25"/></name></name> <modifier pos:line="1" pos:column="26">*<pos:position pos:line="1" pos:column="27"/></modifier></type>
<name pos:line="2" pos:column="1">iptcc_find_label<pos:position pos:line="2" pos:column="17"/></name><parameter_list pos:line="2" pos:column="17">(<parameter><decl><type><specifier pos:line="2" pos:column="18">const<pos:position pos:line="2" pos:column="23"/></specifier> <name pos:line="2" pos:column="24">char<pos:position pos:line="2" pos:column="28"/></name> <modifier pos:line="2" pos:column="29">*<pos:position pos:line="2" pos:column="30"/></modifier></type><name pos:line="2" pos:column="30">name<pos:position pos:line="2" pos:column="34"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="36">TC_HANDLE_T<pos:position pos:line="2" pos:column="47"/></name></type> <name pos:line="2" pos:column="48">handle<pos:position pos:line="2" pos:column="54"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="55"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">list_head<pos:position pos:line="4" pos:column="25"/></name></name> <modifier pos:line="4" pos:column="26">*<pos:position pos:line="4" pos:column="27"/></modifier></type><name pos:line="4" pos:column="27">pos<pos:position pos:line="4" pos:column="30"/></name></decl>;<pos:position pos:line="4" pos:column="31"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">list_head<pos:position pos:line="5" pos:column="25"/></name></name> <modifier pos:line="5" pos:column="26">*<pos:position pos:line="5" pos:column="27"/></modifier></type><name pos:line="5" pos:column="27">list_start_pos<pos:position pos:line="5" pos:column="41"/></name></decl>;<pos:position pos:line="5" pos:column="42"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">unsigned<pos:position pos:line="6" pos:column="17"/></name> <name pos:line="6" pos:column="18">int<pos:position pos:line="6" pos:column="21"/></name></type> <name pos:line="6" pos:column="22">i<pos:position pos:line="6" pos:column="23"/></name><init pos:line="6" pos:column="23">=<expr><literal type="number" pos:line="6" pos:column="24">0<pos:position pos:line="6" pos:column="25"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="26"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">int<pos:position pos:line="7" pos:column="12"/></name></type> <name pos:line="7" pos:column="13">res<pos:position pos:line="7" pos:column="16"/></name></decl>;<pos:position pos:line="7" pos:column="17"/></decl_stmt>

	<if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><call><name pos:line="9" pos:column="13">list_empty<pos:position pos:line="9" pos:column="23"/></name><argument_list pos:line="9" pos:column="23">(<argument><expr><operator pos:line="9" pos:column="24">&amp;<pos:position pos:line="9" pos:column="29"/></operator><name><name pos:line="9" pos:column="25">handle<pos:position pos:line="9" pos:column="31"/></name><operator pos:line="9" pos:column="31">-&gt;<pos:position pos:line="9" pos:column="36"/></operator><name pos:line="9" pos:column="33">chains<pos:position pos:line="9" pos:column="39"/></name></name></expr></argument>)<pos:position pos:line="9" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="9" pos:column="41"/></condition><then pos:line="9" pos:column="41">
		<block type="pseudo"><return pos:line="10" pos:column="17">return <expr><name pos:line="10" pos:column="24">NULL<pos:position pos:line="10" pos:column="28"/></name></expr>;<pos:position pos:line="10" pos:column="29"/></return></block></then></if>

	<comment type="block" pos:line="12" pos:column="9">/* First look at builtin chains */</comment>
	<macro><name pos:line="13" pos:column="9">list_for_each<pos:position pos:line="13" pos:column="22"/></name><argument_list pos:line="13" pos:column="22">(<argument pos:line="13" pos:column="23">pos<pos:position pos:line="13" pos:column="26"/></argument>, <argument pos:line="13" pos:column="28">&amp;handle-&gt;chains<pos:position pos:line="13" pos:column="43"/></argument>)<pos:position pos:line="13" pos:column="44"/></argument_list></macro> <block pos:line="13" pos:column="45">{
		<decl_stmt><decl><type><name><name pos:line="14" pos:column="17">struct<pos:position pos:line="14" pos:column="23"/></name> <name pos:line="14" pos:column="24">chain_head<pos:position pos:line="14" pos:column="34"/></name></name> <modifier pos:line="14" pos:column="35">*<pos:position pos:line="14" pos:column="36"/></modifier></type><name pos:line="14" pos:column="36">c<pos:position pos:line="14" pos:column="37"/></name> <init pos:line="14" pos:column="38">= <expr><call><name pos:line="14" pos:column="40">list_entry<pos:position pos:line="14" pos:column="50"/></name><argument_list pos:line="14" pos:column="50">(<argument><expr><name pos:line="14" pos:column="51">pos<pos:position pos:line="14" pos:column="54"/></name></expr></argument>, <argument><expr pos:line="14" pos:column="56">struct <name pos:line="14" pos:column="63">chain_head<pos:position pos:line="14" pos:column="73"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="75">list<pos:position pos:line="14" pos:column="79"/></name></expr></argument>)<pos:position pos:line="14" pos:column="80"/></argument_list></call></expr></init></decl>;<pos:position pos:line="14" pos:column="81"/></decl_stmt>
		<if pos:line="15" pos:column="17">if <condition pos:line="15" pos:column="20">(<expr><operator pos:line="15" pos:column="21">!<pos:position pos:line="15" pos:column="22"/></operator><call><name pos:line="15" pos:column="22">iptcc_is_builtin<pos:position pos:line="15" pos:column="38"/></name><argument_list pos:line="15" pos:column="38">(<argument><expr><name pos:line="15" pos:column="39">c<pos:position pos:line="15" pos:column="40"/></name></expr></argument>)<pos:position pos:line="15" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="15" pos:column="42"/></condition><then pos:line="15" pos:column="42">
			<block type="pseudo"><break pos:line="16" pos:column="25">break;<pos:position pos:line="16" pos:column="31"/></break></block></then></if>
		<if pos:line="17" pos:column="17">if <condition pos:line="17" pos:column="20">(<expr><operator pos:line="17" pos:column="21">!<pos:position pos:line="17" pos:column="22"/></operator><call><name pos:line="17" pos:column="22">strcmp<pos:position pos:line="17" pos:column="28"/></name><argument_list pos:line="17" pos:column="28">(<argument><expr><name><name pos:line="17" pos:column="29">c<pos:position pos:line="17" pos:column="30"/></name><operator pos:line="17" pos:column="30">-&gt;<pos:position pos:line="17" pos:column="35"/></operator><name pos:line="17" pos:column="32">name<pos:position pos:line="17" pos:column="36"/></name></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="38">name<pos:position pos:line="17" pos:column="42"/></name></expr></argument>)<pos:position pos:line="17" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="17" pos:column="44"/></condition><then pos:line="17" pos:column="44">
			<block type="pseudo"><return pos:line="18" pos:column="25">return <expr><name pos:line="18" pos:column="32">c<pos:position pos:line="18" pos:column="33"/></name></expr>;<pos:position pos:line="18" pos:column="34"/></return></block></then></if>
	}<pos:position pos:line="19" pos:column="10"/></block>

	<comment type="block" pos:line="21" pos:column="9">/* Find a smart place to start the search via chain index */</comment>
  	<comment type="line" pos:line="22" pos:column="9">//list_start_pos = iptcc_linearly_search_chain_index(name, handle);</comment>
  	<expr_stmt><expr><name pos:line="23" pos:column="9">list_start_pos<pos:position pos:line="23" pos:column="23"/></name> <operator pos:line="23" pos:column="24">=<pos:position pos:line="23" pos:column="25"/></operator> <call><name pos:line="23" pos:column="26">iptcc_bsearch_chain_index<pos:position pos:line="23" pos:column="51"/></name><argument_list pos:line="23" pos:column="51">(<argument><expr><name pos:line="23" pos:column="52">name<pos:position pos:line="23" pos:column="56"/></name></expr></argument>, <argument><expr><operator pos:line="23" pos:column="58">&amp;<pos:position pos:line="23" pos:column="63"/></operator><name pos:line="23" pos:column="59">i<pos:position pos:line="23" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="62">handle<pos:position pos:line="23" pos:column="68"/></name></expr></argument>)<pos:position pos:line="23" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="70"/></expr_stmt>

	<comment type="block" pos:line="25" pos:column="9">/* Handel if bsearch bails out early */</comment>
	<if pos:line="26" pos:column="9">if <condition pos:line="26" pos:column="12">(<expr><name pos:line="26" pos:column="13">list_start_pos<pos:position pos:line="26" pos:column="27"/></name> <operator pos:line="26" pos:column="28">==<pos:position pos:line="26" pos:column="30"/></operator> <operator pos:line="26" pos:column="31">&amp;<pos:position pos:line="26" pos:column="36"/></operator><name><name pos:line="26" pos:column="32">handle<pos:position pos:line="26" pos:column="38"/></name><operator pos:line="26" pos:column="38">-&gt;<pos:position pos:line="26" pos:column="43"/></operator><name pos:line="26" pos:column="40">chains<pos:position pos:line="26" pos:column="46"/></name></name></expr>)<pos:position pos:line="26" pos:column="47"/></condition><then pos:line="26" pos:column="47"> <block pos:line="26" pos:column="48">{
		<expr_stmt><expr><name pos:line="27" pos:column="17">list_start_pos<pos:position pos:line="27" pos:column="31"/></name> <operator pos:line="27" pos:column="32">=<pos:position pos:line="27" pos:column="33"/></operator> <name pos:line="27" pos:column="34">pos<pos:position pos:line="27" pos:column="37"/></name></expr>;<pos:position pos:line="27" pos:column="38"/></expr_stmt>
	}<pos:position pos:line="28" pos:column="10"/></block></then>
<cpp:ifdef pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">ifdef<pos:position pos:line="29" pos:column="7"/></cpp:directive> <name pos:line="29" pos:column="8">DEBUG<pos:position pos:line="29" pos:column="13"/></name></cpp:ifdef>
	<else pos:line="30" pos:column="9">else <block pos:line="30" pos:column="14">{
		<comment type="block" pos:line="31" pos:column="17">/* Verify result of bsearch against linearly index search */</comment>
		<decl_stmt><decl><type><name><name pos:line="32" pos:column="17">struct<pos:position pos:line="32" pos:column="23"/></name> <name pos:line="32" pos:column="24">list_head<pos:position pos:line="32" pos:column="33"/></name></name> <modifier pos:line="32" pos:column="34">*<pos:position pos:line="32" pos:column="35"/></modifier></type><name pos:line="32" pos:column="35">test_pos<pos:position pos:line="32" pos:column="43"/></name></decl>;<pos:position pos:line="32" pos:column="44"/></decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="33" pos:column="17">struct<pos:position pos:line="33" pos:column="23"/></name> <name pos:line="33" pos:column="24">chain_head<pos:position pos:line="33" pos:column="34"/></name></name> <modifier pos:line="33" pos:column="35">*<pos:position pos:line="33" pos:column="36"/></modifier></type><name pos:line="33" pos:column="36">test_c<pos:position pos:line="33" pos:column="42"/></name></decl>, <modifier pos:line="33" pos:column="44">*<pos:position pos:line="33" pos:column="45"/></modifier><decl><type ref="prev"/><name pos:line="33" pos:column="45">tmp_c<pos:position pos:line="33" pos:column="50"/></name></decl>;<pos:position pos:line="33" pos:column="51"/></decl_stmt>
		<expr_stmt><expr><name pos:line="34" pos:column="17">test_pos<pos:position pos:line="34" pos:column="25"/></name> <operator pos:line="34" pos:column="26">=<pos:position pos:line="34" pos:column="27"/></operator> <call><name pos:line="34" pos:column="28">iptcc_linearly_search_chain_index<pos:position pos:line="34" pos:column="61"/></name><argument_list pos:line="34" pos:column="61">(<argument><expr><name pos:line="34" pos:column="62">name<pos:position pos:line="34" pos:column="66"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="68">handle<pos:position pos:line="34" pos:column="74"/></name></expr></argument>)<pos:position pos:line="34" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="76"/></expr_stmt>
		<if pos:line="35" pos:column="17">if <condition pos:line="35" pos:column="20">(<expr><name pos:line="35" pos:column="21">list_start_pos<pos:position pos:line="35" pos:column="35"/></name> <operator pos:line="35" pos:column="36">!=<pos:position pos:line="35" pos:column="38"/></operator> <name pos:line="35" pos:column="39">test_pos<pos:position pos:line="35" pos:column="47"/></name></expr>)<pos:position pos:line="35" pos:column="48"/></condition><then pos:line="35" pos:column="48"> <block pos:line="35" pos:column="49">{
			<expr_stmt><expr><call><name pos:line="36" pos:column="25">debug<pos:position pos:line="36" pos:column="30"/></name><argument_list pos:line="36" pos:column="30">(<argument><expr><literal type="string" pos:line="36" pos:column="31">"BUG in chain_index search\n"<pos:position pos:line="36" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="36" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="62"/></expr_stmt>
			<expr_stmt><expr><name pos:line="37" pos:column="25">test_c<pos:position pos:line="37" pos:column="31"/></name><operator pos:line="37" pos:column="31">=<pos:position pos:line="37" pos:column="32"/></operator><call><name pos:line="37" pos:column="32">list_entry<pos:position pos:line="37" pos:column="42"/></name><argument_list pos:line="37" pos:column="42">(<argument><expr><name pos:line="37" pos:column="43">test_pos<pos:position pos:line="37" pos:column="51"/></name></expr></argument>,      <argument><expr pos:line="37" pos:column="58">struct <name pos:line="37" pos:column="65">chain_head<pos:position pos:line="37" pos:column="75"/></name></expr></argument>,<argument><expr><name pos:line="37" pos:column="76">list<pos:position pos:line="37" pos:column="80"/></name></expr></argument>)<pos:position pos:line="37" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="82"/></expr_stmt>
			<expr_stmt><expr><name pos:line="38" pos:column="25">tmp_c<pos:position pos:line="38" pos:column="30"/></name> <operator pos:line="38" pos:column="31">=<pos:position pos:line="38" pos:column="32"/></operator><call><name pos:line="38" pos:column="32">list_entry<pos:position pos:line="38" pos:column="42"/></name><argument_list pos:line="38" pos:column="42">(<argument><expr><name pos:line="38" pos:column="43">list_start_pos<pos:position pos:line="38" pos:column="57"/></name></expr></argument>,<argument><expr pos:line="38" pos:column="58">struct <name pos:line="38" pos:column="65">chain_head<pos:position pos:line="38" pos:column="75"/></name></expr></argument>,<argument><expr><name pos:line="38" pos:column="76">list<pos:position pos:line="38" pos:column="80"/></name></expr></argument>)<pos:position pos:line="38" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="82"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="39" pos:column="25">debug<pos:position pos:line="39" pos:column="30"/></name><argument_list pos:line="39" pos:column="30">(<argument><expr><literal type="string" pos:line="39" pos:column="31">"Verify search found:\n"<pos:position pos:line="39" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="39" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="57"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="40" pos:column="25">debug<pos:position pos:line="40" pos:column="30"/></name><argument_list pos:line="40" pos:column="30">(<argument><expr><literal type="string" pos:line="40" pos:column="31">" Chain:%s\n"<pos:position pos:line="40" pos:column="44"/></literal></expr></argument>, <argument><expr><name><name pos:line="40" pos:column="46">test_c<pos:position pos:line="40" pos:column="52"/></name><operator pos:line="40" pos:column="52">-&gt;<pos:position pos:line="40" pos:column="57"/></operator><name pos:line="40" pos:column="54">name<pos:position pos:line="40" pos:column="58"/></name></name></expr></argument>)<pos:position pos:line="40" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="60"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="41" pos:column="25">debug<pos:position pos:line="41" pos:column="30"/></name><argument_list pos:line="41" pos:column="30">(<argument><expr><literal type="string" pos:line="41" pos:column="31">"BSearch found:\n"<pos:position pos:line="41" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="41" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="51"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="42" pos:column="25">debug<pos:position pos:line="42" pos:column="30"/></name><argument_list pos:line="42" pos:column="30">(<argument><expr><literal type="string" pos:line="42" pos:column="31">" Chain:%s\n"<pos:position pos:line="42" pos:column="44"/></literal></expr></argument>, <argument><expr><name><name pos:line="42" pos:column="46">tmp_c<pos:position pos:line="42" pos:column="51"/></name><operator pos:line="42" pos:column="51">-&gt;<pos:position pos:line="42" pos:column="56"/></operator><name pos:line="42" pos:column="53">name<pos:position pos:line="42" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="42" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="59"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="43" pos:column="25">exit<pos:position pos:line="43" pos:column="29"/></name><argument_list pos:line="43" pos:column="29">(<argument><expr><literal type="number" pos:line="43" pos:column="30">42<pos:position pos:line="43" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="43" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="34"/></expr_stmt>
		}<pos:position pos:line="44" pos:column="18"/></block></then></if>
	}<pos:position pos:line="45" pos:column="10"/></block></else></if>
<cpp:endif pos:line="46" pos:column="1">#<cpp:directive pos:line="46" pos:column="2">endif<pos:position pos:line="46" pos:column="7"/></cpp:directive></cpp:endif>

	<comment type="block" pos:line="48" pos:column="9">/* Initial/special case, no user defined chains */</comment>
	<if pos:line="49" pos:column="9">if <condition pos:line="49" pos:column="12">(<expr><name><name pos:line="49" pos:column="13">handle<pos:position pos:line="49" pos:column="19"/></name><operator pos:line="49" pos:column="19">-&gt;<pos:position pos:line="49" pos:column="24"/></operator><name pos:line="49" pos:column="21">num_chains<pos:position pos:line="49" pos:column="31"/></name></name> <operator pos:line="49" pos:column="32">==<pos:position pos:line="49" pos:column="34"/></operator> <literal type="number" pos:line="49" pos:column="35">0<pos:position pos:line="49" pos:column="36"/></literal></expr>)<pos:position pos:line="49" pos:column="37"/></condition><then pos:line="49" pos:column="37">
		<block type="pseudo"><return pos:line="50" pos:column="17">return <expr><name pos:line="50" pos:column="24">NULL<pos:position pos:line="50" pos:column="28"/></name></expr>;<pos:position pos:line="50" pos:column="29"/></return></block></then></if>

	<comment type="block" pos:line="52" pos:column="9">/* Start searching through the chain list */</comment>
	<macro><name pos:line="53" pos:column="9">list_for_each<pos:position pos:line="53" pos:column="22"/></name><argument_list pos:line="53" pos:column="22">(<argument pos:line="53" pos:column="23">pos<pos:position pos:line="53" pos:column="26"/></argument>, <argument pos:line="53" pos:column="28">list_start_pos-&gt;prev<pos:position pos:line="53" pos:column="48"/></argument>)<pos:position pos:line="53" pos:column="49"/></argument_list></macro> <block pos:line="53" pos:column="50">{
		<decl_stmt><decl><type><name><name pos:line="54" pos:column="17">struct<pos:position pos:line="54" pos:column="23"/></name> <name pos:line="54" pos:column="24">chain_head<pos:position pos:line="54" pos:column="34"/></name></name> <modifier pos:line="54" pos:column="35">*<pos:position pos:line="54" pos:column="36"/></modifier></type><name pos:line="54" pos:column="36">c<pos:position pos:line="54" pos:column="37"/></name> <init pos:line="54" pos:column="38">= <expr><call><name pos:line="54" pos:column="40">list_entry<pos:position pos:line="54" pos:column="50"/></name><argument_list pos:line="54" pos:column="50">(<argument><expr><name pos:line="54" pos:column="51">pos<pos:position pos:line="54" pos:column="54"/></name></expr></argument>, <argument><expr pos:line="54" pos:column="56">struct <name pos:line="54" pos:column="63">chain_head<pos:position pos:line="54" pos:column="73"/></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="75">list<pos:position pos:line="54" pos:column="79"/></name></expr></argument>)<pos:position pos:line="54" pos:column="80"/></argument_list></call></expr></init></decl>;<pos:position pos:line="54" pos:column="81"/></decl_stmt>
		<expr_stmt><expr><name pos:line="55" pos:column="17">res<pos:position pos:line="55" pos:column="20"/></name> <operator pos:line="55" pos:column="21">=<pos:position pos:line="55" pos:column="22"/></operator> <call><name pos:line="55" pos:column="23">strcmp<pos:position pos:line="55" pos:column="29"/></name><argument_list pos:line="55" pos:column="29">(<argument><expr><name><name pos:line="55" pos:column="30">c<pos:position pos:line="55" pos:column="31"/></name><operator pos:line="55" pos:column="31">-&gt;<pos:position pos:line="55" pos:column="36"/></operator><name pos:line="55" pos:column="33">name<pos:position pos:line="55" pos:column="37"/></name></name></expr></argument>, <argument><expr><name pos:line="55" pos:column="39">name<pos:position pos:line="55" pos:column="43"/></name></expr></argument>)<pos:position pos:line="55" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="45"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="56" pos:column="17">debug<pos:position pos:line="56" pos:column="22"/></name><argument_list pos:line="56" pos:column="22">(<argument><expr><literal type="string" pos:line="56" pos:column="23">"List search name:%s == %s res:%d\n"<pos:position pos:line="56" pos:column="59"/></literal></expr></argument>, <argument><expr><name pos:line="56" pos:column="61">name<pos:position pos:line="56" pos:column="65"/></name></expr></argument>, <argument><expr><name><name pos:line="56" pos:column="67">c<pos:position pos:line="56" pos:column="68"/></name><operator pos:line="56" pos:column="68">-&gt;<pos:position pos:line="56" pos:column="73"/></operator><name pos:line="56" pos:column="70">name<pos:position pos:line="56" pos:column="74"/></name></name></expr></argument>, <argument><expr><name pos:line="56" pos:column="76">res<pos:position pos:line="56" pos:column="79"/></name></expr></argument>)<pos:position pos:line="56" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="81"/></expr_stmt>
		<if pos:line="57" pos:column="17">if <condition pos:line="57" pos:column="20">(<expr><name pos:line="57" pos:column="21">res<pos:position pos:line="57" pos:column="24"/></name><operator pos:line="57" pos:column="24">==<pos:position pos:line="57" pos:column="26"/></operator><literal type="number" pos:line="57" pos:column="26">0<pos:position pos:line="57" pos:column="27"/></literal></expr>)<pos:position pos:line="57" pos:column="28"/></condition><then pos:line="57" pos:column="28">
			<block type="pseudo"><return pos:line="58" pos:column="25">return <expr><name pos:line="58" pos:column="32">c<pos:position pos:line="58" pos:column="33"/></name></expr>;<pos:position pos:line="58" pos:column="34"/></return></block></then></if>

		<comment type="block" pos:line="60" pos:column="17">/* We can stop earlier as we know list is sorted */</comment>
		<if pos:line="61" pos:column="17">if <condition pos:line="61" pos:column="20">(<expr><name pos:line="61" pos:column="21">res<pos:position pos:line="61" pos:column="24"/></name><operator pos:line="61" pos:column="24">&gt;<pos:position pos:line="61" pos:column="28"/></operator><literal type="number" pos:line="61" pos:column="25">0<pos:position pos:line="61" pos:column="26"/></literal> <operator pos:line="61" pos:column="27">&amp;&amp;<pos:position pos:line="61" pos:column="37"/></operator> <operator pos:line="61" pos:column="30">!<pos:position pos:line="61" pos:column="31"/></operator><call><name pos:line="61" pos:column="31">iptcc_is_builtin<pos:position pos:line="61" pos:column="47"/></name><argument_list pos:line="61" pos:column="47">(<argument><expr><name pos:line="61" pos:column="48">c<pos:position pos:line="61" pos:column="49"/></name></expr></argument>)<pos:position pos:line="61" pos:column="50"/></argument_list></call></expr>)<pos:position pos:line="61" pos:column="51"/></condition><then pos:line="61" pos:column="51"> <block pos:line="61" pos:column="52">{ <comment type="block" pos:line="61" pos:column="54">/* Walked too far*/</comment>
			<expr_stmt><expr><call><name pos:line="62" pos:column="25">debug<pos:position pos:line="62" pos:column="30"/></name><argument_list pos:line="62" pos:column="30">(<argument><expr><literal type="string" pos:line="62" pos:column="31">" Not in list, walked too far, sorted list\n"<pos:position pos:line="62" pos:column="76"/></literal></expr></argument>)<pos:position pos:line="62" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="78"/></expr_stmt>
			<return pos:line="63" pos:column="25">return <expr><name pos:line="63" pos:column="32">NULL<pos:position pos:line="63" pos:column="36"/></name></expr>;<pos:position pos:line="63" pos:column="37"/></return>
		}<pos:position pos:line="64" pos:column="18"/></block></then></if>

		<comment type="block" pos:line="66" pos:column="17">/* Stop on wrap around, if list head is reached */</comment>
		<if pos:line="67" pos:column="17">if <condition pos:line="67" pos:column="20">(<expr><name pos:line="67" pos:column="21">pos<pos:position pos:line="67" pos:column="24"/></name> <operator pos:line="67" pos:column="25">==<pos:position pos:line="67" pos:column="27"/></operator> <operator pos:line="67" pos:column="28">&amp;<pos:position pos:line="67" pos:column="33"/></operator><name><name pos:line="67" pos:column="29">handle<pos:position pos:line="67" pos:column="35"/></name><operator pos:line="67" pos:column="35">-&gt;<pos:position pos:line="67" pos:column="40"/></operator><name pos:line="67" pos:column="37">chains<pos:position pos:line="67" pos:column="43"/></name></name></expr>)<pos:position pos:line="67" pos:column="44"/></condition><then pos:line="67" pos:column="44"> <block pos:line="67" pos:column="45">{
			<expr_stmt><expr><call><name pos:line="68" pos:column="25">debug<pos:position pos:line="68" pos:column="30"/></name><argument_list pos:line="68" pos:column="30">(<argument><expr><literal type="string" pos:line="68" pos:column="31">"Stop, list head reached\n"<pos:position pos:line="68" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="68" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="60"/></expr_stmt>
			<return pos:line="69" pos:column="25">return <expr><name pos:line="69" pos:column="32">NULL<pos:position pos:line="69" pos:column="36"/></name></expr>;<pos:position pos:line="69" pos:column="37"/></return>
		}<pos:position pos:line="70" pos:column="18"/></block></then></if>
	}<pos:position pos:line="71" pos:column="10"/></block>

	<expr_stmt><expr><call><name pos:line="73" pos:column="9">debug<pos:position pos:line="73" pos:column="14"/></name><argument_list pos:line="73" pos:column="14">(<argument><expr><literal type="string" pos:line="73" pos:column="15">"List search NOT found name:%s\n"<pos:position pos:line="73" pos:column="48"/></literal></expr></argument>, <argument><expr><name pos:line="73" pos:column="50">name<pos:position pos:line="73" pos:column="54"/></name></expr></argument>)<pos:position pos:line="73" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="56"/></expr_stmt>
	<return pos:line="74" pos:column="9">return <expr><name pos:line="74" pos:column="16">NULL<pos:position pos:line="74" pos:column="20"/></name></expr>;<pos:position pos:line="74" pos:column="21"/></return>
}<pos:position pos:line="75" pos:column="2"/></block></function></unit>
