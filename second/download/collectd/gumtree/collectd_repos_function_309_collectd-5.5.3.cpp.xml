<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_309_collectd-5.5.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">cpu_commit_without_aggregation<pos:position pos:line="1" pos:column="43"/></name> <parameter_list pos:line="1" pos:column="44">(<parameter><decl><type><name pos:line="1" pos:column="45">void<pos:position pos:line="1" pos:column="49"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="50"/></parameter_list> <comment type="block" pos:line="1" pos:column="51">/* {{{ */</comment>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">state<pos:position pos:line="3" pos:column="18"/></name></decl>;<pos:position pos:line="3" pos:column="19"/></decl_stmt>

	<for pos:line="5" pos:column="9">for <control pos:line="5" pos:column="13">(<init><expr><name pos:line="5" pos:column="14">state<pos:position pos:line="5" pos:column="19"/></name> <operator pos:line="5" pos:column="20">=<pos:position pos:line="5" pos:column="21"/></operator> <literal type="number" pos:line="5" pos:column="22">0<pos:position pos:line="5" pos:column="23"/></literal></expr>;<pos:position pos:line="5" pos:column="24"/></init> <condition><expr><name pos:line="5" pos:column="25">state<pos:position pos:line="5" pos:column="30"/></name> <operator pos:line="5" pos:column="31">&lt;<pos:position pos:line="5" pos:column="35"/></operator> <name pos:line="5" pos:column="33">COLLECTD_CPU_STATE_ACTIVE<pos:position pos:line="5" pos:column="58"/></name></expr>;<pos:position pos:line="5" pos:column="59"/></condition> <incr><expr><name pos:line="5" pos:column="60">state<pos:position pos:line="5" pos:column="65"/></name><operator pos:line="5" pos:column="65">++<pos:position pos:line="5" pos:column="67"/></operator></expr></incr>)<pos:position pos:line="5" pos:column="68"/></control>
	<block pos:line="6" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="7" pos:column="17">size_t<pos:position pos:line="7" pos:column="23"/></name></type> <name pos:line="7" pos:column="24">cpu_num<pos:position pos:line="7" pos:column="31"/></name></decl>;<pos:position pos:line="7" pos:column="32"/></decl_stmt>

		<for pos:line="9" pos:column="17">for <control pos:line="9" pos:column="21">(<init><expr><name pos:line="9" pos:column="22">cpu_num<pos:position pos:line="9" pos:column="29"/></name> <operator pos:line="9" pos:column="30">=<pos:position pos:line="9" pos:column="31"/></operator> <literal type="number" pos:line="9" pos:column="32">0<pos:position pos:line="9" pos:column="33"/></literal></expr>;<pos:position pos:line="9" pos:column="34"/></init> <condition><expr><name pos:line="9" pos:column="35">cpu_num<pos:position pos:line="9" pos:column="42"/></name> <operator pos:line="9" pos:column="43">&lt;<pos:position pos:line="9" pos:column="47"/></operator> <name pos:line="9" pos:column="45">global_cpu_num<pos:position pos:line="9" pos:column="59"/></name></expr>;<pos:position pos:line="9" pos:column="60"/></condition> <incr><expr><name pos:line="9" pos:column="61">cpu_num<pos:position pos:line="9" pos:column="68"/></name><operator pos:line="9" pos:column="68">++<pos:position pos:line="9" pos:column="70"/></operator></expr></incr>)<pos:position pos:line="9" pos:column="71"/></control>
		<block pos:line="10" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="11" pos:column="25">cpu_state_t<pos:position pos:line="11" pos:column="36"/></name> <modifier pos:line="11" pos:column="37">*<pos:position pos:line="11" pos:column="38"/></modifier></type><name pos:line="11" pos:column="38">s<pos:position pos:line="11" pos:column="39"/></name> <init pos:line="11" pos:column="40">= <expr><call><name pos:line="11" pos:column="42">get_cpu_state<pos:position pos:line="11" pos:column="55"/></name> <argument_list pos:line="11" pos:column="56">(<argument><expr><name pos:line="11" pos:column="57">cpu_num<pos:position pos:line="11" pos:column="64"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="66">state<pos:position pos:line="11" pos:column="71"/></name></expr></argument>)<pos:position pos:line="11" pos:column="72"/></argument_list></call></expr></init></decl>;<pos:position pos:line="11" pos:column="73"/></decl_stmt>

			<if pos:line="13" pos:column="25">if <condition pos:line="13" pos:column="28">(<expr><operator pos:line="13" pos:column="29">!<pos:position pos:line="13" pos:column="30"/></operator><name><name pos:line="13" pos:column="30">s<pos:position pos:line="13" pos:column="31"/></name><operator pos:line="13" pos:column="31">-&gt;<pos:position pos:line="13" pos:column="36"/></operator><name pos:line="13" pos:column="33">has_value<pos:position pos:line="13" pos:column="42"/></name></name></expr>)<pos:position pos:line="13" pos:column="43"/></condition><then pos:line="13" pos:column="43">
				<block type="pseudo"><continue pos:line="14" pos:column="33">continue;<pos:position pos:line="14" pos:column="42"/></continue></block></then></if>

			<expr_stmt><expr><call><name pos:line="16" pos:column="25">submit_derive<pos:position pos:line="16" pos:column="38"/></name> <argument_list pos:line="16" pos:column="39">(<argument><expr><operator pos:line="16" pos:column="40">(<pos:position pos:line="16" pos:column="41"/></operator><name pos:line="16" pos:column="41">int<pos:position pos:line="16" pos:column="44"/></name><operator pos:line="16" pos:column="44">)<pos:position pos:line="16" pos:column="45"/></operator> <name pos:line="16" pos:column="46">cpu_num<pos:position pos:line="16" pos:column="53"/></name></expr></argument>, <argument><expr><operator pos:line="16" pos:column="55">(<pos:position pos:line="16" pos:column="56"/></operator><name pos:line="16" pos:column="56">int<pos:position pos:line="16" pos:column="59"/></name><operator pos:line="16" pos:column="59">)<pos:position pos:line="16" pos:column="60"/></operator> <name pos:line="16" pos:column="61">state<pos:position pos:line="16" pos:column="66"/></name></expr></argument>, <argument><expr><name><name pos:line="16" pos:column="68">s<pos:position pos:line="16" pos:column="69"/></name><operator pos:line="16" pos:column="69">-&gt;<pos:position pos:line="16" pos:column="74"/></operator><name pos:line="16" pos:column="71">conv<pos:position pos:line="16" pos:column="75"/></name><operator pos:line="16" pos:column="75">.<pos:position pos:line="16" pos:column="76"/></operator><name pos:line="16" pos:column="76">last_value<pos:position pos:line="16" pos:column="86"/></name><operator pos:line="16" pos:column="86">.<pos:position pos:line="16" pos:column="87"/></operator><name pos:line="16" pos:column="87">derive<pos:position pos:line="16" pos:column="93"/></name></name></expr></argument>)<pos:position pos:line="16" pos:column="94"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="95"/></expr_stmt>
		}<pos:position pos:line="17" pos:column="18"/></block></for>
	}<pos:position pos:line="18" pos:column="10"/></block></for>
}<pos:position pos:line="19" pos:column="2"/></block></function></unit>
