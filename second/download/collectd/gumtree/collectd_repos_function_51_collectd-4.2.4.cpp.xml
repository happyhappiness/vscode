<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_51_collectd-4.2.4.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name pos:line="2" pos:column="1">lt_dlinit<pos:position pos:line="2" pos:column="10"/></name> <parameter_list pos:line="2" pos:column="11">()<pos:position pos:line="2" pos:column="13"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">int<pos:position pos:line="4" pos:column="6"/></name></type>	      <name pos:line="4" pos:column="15">errors<pos:position pos:line="4" pos:column="21"/></name>   <init pos:line="4" pos:column="24">= <expr><literal type="number" pos:line="4" pos:column="26">0<pos:position pos:line="4" pos:column="27"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="28"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="6" pos:column="3">LT_DLMUTEX_LOCK<pos:position pos:line="6" pos:column="18"/></name> <argument_list pos:line="6" pos:column="19">()<pos:position pos:line="6" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="22"/></expr_stmt>

  <comment type="block" pos:line="8" pos:column="3">/* Initialize only at first call. */</comment>
  <if pos:line="9" pos:column="3">if <condition pos:line="9" pos:column="6">(<expr><operator pos:line="9" pos:column="7">++<pos:position pos:line="9" pos:column="9"/></operator><name pos:line="9" pos:column="9">initialized<pos:position pos:line="9" pos:column="20"/></name> <operator pos:line="9" pos:column="21">==<pos:position pos:line="9" pos:column="23"/></operator> <literal type="number" pos:line="9" pos:column="24">1<pos:position pos:line="9" pos:column="25"/></literal></expr>)<pos:position pos:line="9" pos:column="26"/></condition><then pos:line="9" pos:column="26">
    <block pos:line="10" pos:column="5">{
      <expr_stmt><expr><name pos:line="11" pos:column="7">handles<pos:position pos:line="11" pos:column="14"/></name> <operator pos:line="11" pos:column="15">=<pos:position pos:line="11" pos:column="16"/></operator> <literal type="number" pos:line="11" pos:column="17">0<pos:position pos:line="11" pos:column="18"/></literal></expr>;<pos:position pos:line="11" pos:column="19"/></expr_stmt>
      <expr_stmt><expr><name pos:line="12" pos:column="7">user_search_path<pos:position pos:line="12" pos:column="23"/></name> <operator pos:line="12" pos:column="24">=<pos:position pos:line="12" pos:column="25"/></operator> <literal type="number" pos:line="12" pos:column="26">0<pos:position pos:line="12" pos:column="27"/></literal></expr>;<pos:position pos:line="12" pos:column="28"/></expr_stmt> <comment type="block" pos:line="12" pos:column="29">/* empty search path */</comment>

<cpp:if pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">if<pos:position pos:line="14" pos:column="4"/></cpp:directive> <expr><name pos:line="14" pos:column="5">HAVE_LIBDL<pos:position pos:line="14" pos:column="15"/></name></expr></cpp:if>
      <expr_stmt><expr><name pos:line="15" pos:column="7">errors<pos:position pos:line="15" pos:column="13"/></name> <operator pos:line="15" pos:column="14">+=<pos:position pos:line="15" pos:column="16"/></operator> <call><name pos:line="15" pos:column="17">lt_dlloader_add<pos:position pos:line="15" pos:column="32"/></name> <argument_list pos:line="15" pos:column="33">(<argument><expr><call><name pos:line="15" pos:column="34">lt_dlloader_next<pos:position pos:line="15" pos:column="50"/></name> <argument_list pos:line="15" pos:column="51">(<argument><expr><literal type="number" pos:line="15" pos:column="52">0<pos:position pos:line="15" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="54"/></argument_list></call></expr></argument>, <argument><expr><operator pos:line="15" pos:column="56">&amp;<pos:position pos:line="15" pos:column="61"/></operator><name pos:line="15" pos:column="57">sys_dl<pos:position pos:line="15" pos:column="63"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="15" pos:column="65">"dlopen"<pos:position pos:line="15" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="75"/></expr_stmt>
<cpp:endif pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">endif<pos:position pos:line="16" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:if pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">if<pos:position pos:line="17" pos:column="4"/></cpp:directive> <expr><name pos:line="17" pos:column="5">HAVE_SHL_LOAD<pos:position pos:line="17" pos:column="18"/></name></expr></cpp:if>
      <expr_stmt><expr><name pos:line="18" pos:column="7">errors<pos:position pos:line="18" pos:column="13"/></name> <operator pos:line="18" pos:column="14">+=<pos:position pos:line="18" pos:column="16"/></operator> <call><name pos:line="18" pos:column="17">lt_dlloader_add<pos:position pos:line="18" pos:column="32"/></name> <argument_list pos:line="18" pos:column="33">(<argument><expr><call><name pos:line="18" pos:column="34">lt_dlloader_next<pos:position pos:line="18" pos:column="50"/></name> <argument_list pos:line="18" pos:column="51">(<argument><expr><literal type="number" pos:line="18" pos:column="52">0<pos:position pos:line="18" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="54"/></argument_list></call></expr></argument>, <argument><expr><operator pos:line="18" pos:column="56">&amp;<pos:position pos:line="18" pos:column="61"/></operator><name pos:line="18" pos:column="57">sys_shl<pos:position pos:line="18" pos:column="64"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="18" pos:column="66">"dlopen"<pos:position pos:line="18" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="76"/></expr_stmt>
<cpp:endif pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">endif<pos:position pos:line="19" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:ifdef pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">ifdef<pos:position pos:line="20" pos:column="7"/></cpp:directive> <name pos:line="20" pos:column="8">__WINDOWS__<pos:position pos:line="20" pos:column="19"/></name></cpp:ifdef>
      <expr_stmt><expr><name pos:line="21" pos:column="7">errors<pos:position pos:line="21" pos:column="13"/></name> <operator pos:line="21" pos:column="14">+=<pos:position pos:line="21" pos:column="16"/></operator> <call><name pos:line="21" pos:column="17">lt_dlloader_add<pos:position pos:line="21" pos:column="32"/></name> <argument_list pos:line="21" pos:column="33">(<argument><expr><call><name pos:line="21" pos:column="34">lt_dlloader_next<pos:position pos:line="21" pos:column="50"/></name> <argument_list pos:line="21" pos:column="51">(<argument><expr><literal type="number" pos:line="21" pos:column="52">0<pos:position pos:line="21" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="54"/></argument_list></call></expr></argument>, <argument><expr><operator pos:line="21" pos:column="56">&amp;<pos:position pos:line="21" pos:column="61"/></operator><name pos:line="21" pos:column="57">sys_wll<pos:position pos:line="21" pos:column="64"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="21" pos:column="66">"dlopen"<pos:position pos:line="21" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="76"/></expr_stmt>
<cpp:endif pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">endif<pos:position pos:line="22" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:ifdef pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">ifdef<pos:position pos:line="23" pos:column="7"/></cpp:directive> <name pos:line="23" pos:column="8">__BEOS__<pos:position pos:line="23" pos:column="16"/></name></cpp:ifdef>
      <expr_stmt><expr><name pos:line="24" pos:column="7">errors<pos:position pos:line="24" pos:column="13"/></name> <operator pos:line="24" pos:column="14">+=<pos:position pos:line="24" pos:column="16"/></operator> <call><name pos:line="24" pos:column="17">lt_dlloader_add<pos:position pos:line="24" pos:column="32"/></name> <argument_list pos:line="24" pos:column="33">(<argument><expr><call><name pos:line="24" pos:column="34">lt_dlloader_next<pos:position pos:line="24" pos:column="50"/></name> <argument_list pos:line="24" pos:column="51">(<argument><expr><literal type="number" pos:line="24" pos:column="52">0<pos:position pos:line="24" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="54"/></argument_list></call></expr></argument>, <argument><expr><operator pos:line="24" pos:column="56">&amp;<pos:position pos:line="24" pos:column="61"/></operator><name pos:line="24" pos:column="57">sys_bedl<pos:position pos:line="24" pos:column="65"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="24" pos:column="67">"dlopen"<pos:position pos:line="24" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="77"/></expr_stmt>
<cpp:endif pos:line="25" pos:column="1">#<cpp:directive pos:line="25" pos:column="2">endif<pos:position pos:line="25" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:if pos:line="26" pos:column="1">#<cpp:directive pos:line="26" pos:column="2">if<pos:position pos:line="26" pos:column="4"/></cpp:directive> <expr><name pos:line="26" pos:column="5">HAVE_DLD<pos:position pos:line="26" pos:column="13"/></name></expr></cpp:if>
      <expr_stmt><expr><name pos:line="27" pos:column="7">errors<pos:position pos:line="27" pos:column="13"/></name> <operator pos:line="27" pos:column="14">+=<pos:position pos:line="27" pos:column="16"/></operator> <call><name pos:line="27" pos:column="17">lt_dlloader_add<pos:position pos:line="27" pos:column="32"/></name> <argument_list pos:line="27" pos:column="33">(<argument><expr><call><name pos:line="27" pos:column="34">lt_dlloader_next<pos:position pos:line="27" pos:column="50"/></name> <argument_list pos:line="27" pos:column="51">(<argument><expr><literal type="number" pos:line="27" pos:column="52">0<pos:position pos:line="27" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="54"/></argument_list></call></expr></argument>, <argument><expr><operator pos:line="27" pos:column="56">&amp;<pos:position pos:line="27" pos:column="61"/></operator><name pos:line="27" pos:column="57">sys_dld<pos:position pos:line="27" pos:column="64"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="27" pos:column="66">"dld"<pos:position pos:line="27" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="73"/></expr_stmt>
<cpp:endif pos:line="28" pos:column="1">#<cpp:directive pos:line="28" pos:column="2">endif<pos:position pos:line="28" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:if pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">if<pos:position pos:line="29" pos:column="4"/></cpp:directive> <expr><name pos:line="29" pos:column="5">HAVE_DYLD<pos:position pos:line="29" pos:column="14"/></name></expr></cpp:if>
       <expr_stmt><expr><name pos:line="30" pos:column="8">errors<pos:position pos:line="30" pos:column="14"/></name> <operator pos:line="30" pos:column="15">+=<pos:position pos:line="30" pos:column="17"/></operator> <call><name pos:line="30" pos:column="18">lt_dlloader_add<pos:position pos:line="30" pos:column="33"/></name> <argument_list pos:line="30" pos:column="34">(<argument><expr><call><name pos:line="30" pos:column="35">lt_dlloader_next<pos:position pos:line="30" pos:column="51"/></name> <argument_list pos:line="30" pos:column="52">(<argument><expr><literal type="number" pos:line="30" pos:column="53">0<pos:position pos:line="30" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="55"/></argument_list></call></expr></argument>, <argument><expr><operator pos:line="30" pos:column="57">&amp;<pos:position pos:line="30" pos:column="62"/></operator><name pos:line="30" pos:column="58">sys_dyld<pos:position pos:line="30" pos:column="66"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="30" pos:column="68">"dyld"<pos:position pos:line="30" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="76"/></expr_stmt>
       <expr_stmt><expr><name pos:line="31" pos:column="8">errors<pos:position pos:line="31" pos:column="14"/></name> <operator pos:line="31" pos:column="15">+=<pos:position pos:line="31" pos:column="17"/></operator> <call><name pos:line="31" pos:column="18">sys_dyld_init<pos:position pos:line="31" pos:column="31"/></name><argument_list pos:line="31" pos:column="31">()<pos:position pos:line="31" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="34"/></expr_stmt>
<cpp:endif pos:line="32" pos:column="1">#<cpp:directive pos:line="32" pos:column="2">endif<pos:position pos:line="32" pos:column="7"/></cpp:directive></cpp:endif>
      <expr_stmt><expr><name pos:line="33" pos:column="7">errors<pos:position pos:line="33" pos:column="13"/></name> <operator pos:line="33" pos:column="14">+=<pos:position pos:line="33" pos:column="16"/></operator> <call><name pos:line="33" pos:column="17">lt_dlloader_add<pos:position pos:line="33" pos:column="32"/></name> <argument_list pos:line="33" pos:column="33">(<argument><expr><call><name pos:line="33" pos:column="34">lt_dlloader_next<pos:position pos:line="33" pos:column="50"/></name> <argument_list pos:line="33" pos:column="51">(<argument><expr><literal type="number" pos:line="33" pos:column="52">0<pos:position pos:line="33" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="54"/></argument_list></call></expr></argument>, <argument><expr><operator pos:line="33" pos:column="56">&amp;<pos:position pos:line="33" pos:column="61"/></operator><name pos:line="33" pos:column="57">presym<pos:position pos:line="33" pos:column="63"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="33" pos:column="65">"dlpreload"<pos:position pos:line="33" pos:column="76"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="78"/></expr_stmt>

      <if pos:line="35" pos:column="7">if <condition pos:line="35" pos:column="10">(<expr><call><name pos:line="35" pos:column="11">presym_init<pos:position pos:line="35" pos:column="22"/></name> <argument_list pos:line="35" pos:column="23">(<argument><expr><name><name pos:line="35" pos:column="24">presym<pos:position pos:line="35" pos:column="30"/></name><operator pos:line="35" pos:column="30">.<pos:position pos:line="35" pos:column="31"/></operator><name pos:line="35" pos:column="31">dlloader_data<pos:position pos:line="35" pos:column="44"/></name></name></expr></argument>)<pos:position pos:line="35" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="35" pos:column="46"/></condition><then pos:line="35" pos:column="46">
	<block pos:line="36" pos:column="9">{
	  <expr_stmt><expr><call><name pos:line="37" pos:column="11">LT_DLMUTEX_SETERROR<pos:position pos:line="37" pos:column="30"/></name> <argument_list pos:line="37" pos:column="31">(<argument><expr><call><name pos:line="37" pos:column="32">LT_DLSTRERROR<pos:position pos:line="37" pos:column="45"/></name> <argument_list pos:line="37" pos:column="46">(<argument><expr><name pos:line="37" pos:column="47">INIT_LOADER<pos:position pos:line="37" pos:column="58"/></name></expr></argument>)<pos:position pos:line="37" pos:column="59"/></argument_list></call></expr></argument>)<pos:position pos:line="37" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="61"/></expr_stmt>
	  <expr_stmt><expr><operator pos:line="38" pos:column="11">++<pos:position pos:line="38" pos:column="13"/></operator><name pos:line="38" pos:column="13">errors<pos:position pos:line="38" pos:column="19"/></name></expr>;<pos:position pos:line="38" pos:column="20"/></expr_stmt>
	}<pos:position pos:line="39" pos:column="10"/></block></then>
      <elseif pos:line="40" pos:column="7">else <if pos:line="40" pos:column="12">if <condition pos:line="40" pos:column="15">(<expr><name pos:line="40" pos:column="16">errors<pos:position pos:line="40" pos:column="22"/></name> <operator pos:line="40" pos:column="23">!=<pos:position pos:line="40" pos:column="25"/></operator> <literal type="number" pos:line="40" pos:column="26">0<pos:position pos:line="40" pos:column="27"/></literal></expr>)<pos:position pos:line="40" pos:column="28"/></condition><then pos:line="40" pos:column="28">
	<block pos:line="41" pos:column="9">{
	  <expr_stmt><expr><call><name pos:line="42" pos:column="11">LT_DLMUTEX_SETERROR<pos:position pos:line="42" pos:column="30"/></name> <argument_list pos:line="42" pos:column="31">(<argument><expr><call><name pos:line="42" pos:column="32">LT_DLSTRERROR<pos:position pos:line="42" pos:column="45"/></name> <argument_list pos:line="42" pos:column="46">(<argument><expr><name pos:line="42" pos:column="47">DLOPEN_NOT_SUPPORTED<pos:position pos:line="42" pos:column="67"/></name></expr></argument>)<pos:position pos:line="42" pos:column="68"/></argument_list></call></expr></argument>)<pos:position pos:line="42" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="70"/></expr_stmt>
	  <expr_stmt><expr><operator pos:line="43" pos:column="11">++<pos:position pos:line="43" pos:column="13"/></operator><name pos:line="43" pos:column="13">errors<pos:position pos:line="43" pos:column="19"/></name></expr>;<pos:position pos:line="43" pos:column="20"/></expr_stmt>
	}<pos:position pos:line="44" pos:column="10"/></block></then></if></elseif></if>
    }<pos:position pos:line="45" pos:column="6"/></block></then></if>

  <expr_stmt><expr><call><name pos:line="47" pos:column="3">LT_DLMUTEX_UNLOCK<pos:position pos:line="47" pos:column="20"/></name> <argument_list pos:line="47" pos:column="21">()<pos:position pos:line="47" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="24"/></expr_stmt>

  <return pos:line="49" pos:column="3">return <expr><name pos:line="49" pos:column="10">errors<pos:position pos:line="49" pos:column="16"/></name></expr>;<pos:position pos:line="49" pos:column="17"/></return>
}<pos:position pos:line="50" pos:column="2"/></block></function></unit>
