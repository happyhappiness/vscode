<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_210_collectd-5.6.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">getval<pos:position pos:line="1" pos:column="18"/></name><parameter_list pos:line="1" pos:column="18">(<parameter><decl><type><name pos:line="1" pos:column="19">lcc_connection_t<pos:position pos:line="1" pos:column="35"/></name> <modifier pos:line="1" pos:column="36">*<pos:position pos:line="1" pos:column="37"/></modifier></type><name pos:line="1" pos:column="37">c<pos:position pos:line="1" pos:column="38"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="40">int<pos:position pos:line="1" pos:column="43"/></name></type> <name pos:line="1" pos:column="44">argc<pos:position pos:line="1" pos:column="48"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="50">char<pos:position pos:line="1" pos:column="54"/></name> <modifier pos:line="1" pos:column="55">*<pos:position pos:line="1" pos:column="56"/></modifier><modifier pos:line="1" pos:column="56">*<pos:position pos:line="1" pos:column="57"/></modifier></type><name pos:line="1" pos:column="57">argv<pos:position pos:line="1" pos:column="61"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="62"/></parameter_list> <block pos:line="1" pos:column="63">{
  <decl_stmt><decl><type><name pos:line="2" pos:column="3">lcc_identifier_t<pos:position pos:line="2" pos:column="19"/></name></type> <name pos:line="2" pos:column="20">ident<pos:position pos:line="2" pos:column="25"/></name></decl>;<pos:position pos:line="2" pos:column="26"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="4" pos:column="3">size_t<pos:position pos:line="4" pos:column="9"/></name></type> <name pos:line="4" pos:column="10">ret_values_num<pos:position pos:line="4" pos:column="24"/></name> <init pos:line="4" pos:column="25">= <expr><literal type="number" pos:line="4" pos:column="27">0<pos:position pos:line="4" pos:column="28"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="29"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">gauge_t<pos:position pos:line="5" pos:column="10"/></name> <modifier pos:line="5" pos:column="11">*<pos:position pos:line="5" pos:column="12"/></modifier></type><name pos:line="5" pos:column="12">ret_values<pos:position pos:line="5" pos:column="22"/></name> <init pos:line="5" pos:column="23">= <expr><name pos:line="5" pos:column="25">NULL<pos:position pos:line="5" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="30"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">char<pos:position pos:line="6" pos:column="7"/></name> <modifier pos:line="6" pos:column="8">*<pos:position pos:line="6" pos:column="9"/></modifier><modifier pos:line="6" pos:column="9">*<pos:position pos:line="6" pos:column="10"/></modifier></type><name pos:line="6" pos:column="10">ret_values_names<pos:position pos:line="6" pos:column="26"/></name> <init pos:line="6" pos:column="27">= <expr><name pos:line="6" pos:column="29">NULL<pos:position pos:line="6" pos:column="33"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="34"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="8" pos:column="3">int<pos:position pos:line="8" pos:column="6"/></name></type> <name pos:line="8" pos:column="7">status<pos:position pos:line="8" pos:column="13"/></name></decl>;<pos:position pos:line="8" pos:column="14"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="10" pos:column="3">assert<pos:position pos:line="10" pos:column="9"/></name><argument_list pos:line="10" pos:column="9">(<argument><expr><call><name pos:line="10" pos:column="10">strcasecmp<pos:position pos:line="10" pos:column="20"/></name><argument_list pos:line="10" pos:column="20">(<argument><expr><name><name pos:line="10" pos:column="21">argv<pos:position pos:line="10" pos:column="25"/></name><index pos:line="10" pos:column="25">[<expr><literal type="number" pos:line="10" pos:column="26">0<pos:position pos:line="10" pos:column="27"/></literal></expr>]<pos:position pos:line="10" pos:column="28"/></index></name></expr></argument>, <argument><expr><literal type="string" pos:line="10" pos:column="30">"getval"<pos:position pos:line="10" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="39"/></argument_list></call> <operator pos:line="10" pos:column="40">==<pos:position pos:line="10" pos:column="42"/></operator> <literal type="number" pos:line="10" pos:column="43">0<pos:position pos:line="10" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="46"/></expr_stmt>

  <if pos:line="12" pos:column="3">if <condition pos:line="12" pos:column="6">(<expr><name pos:line="12" pos:column="7">argc<pos:position pos:line="12" pos:column="11"/></name> <operator pos:line="12" pos:column="12">!=<pos:position pos:line="12" pos:column="14"/></operator> <literal type="number" pos:line="12" pos:column="15">2<pos:position pos:line="12" pos:column="16"/></literal></expr>)<pos:position pos:line="12" pos:column="17"/></condition><then pos:line="12" pos:column="17"> <block pos:line="12" pos:column="18">{
    <expr_stmt><expr><call><name pos:line="13" pos:column="5">fprintf<pos:position pos:line="13" pos:column="12"/></name><argument_list pos:line="13" pos:column="12">(<argument><expr><name pos:line="13" pos:column="13">stderr<pos:position pos:line="13" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="13" pos:column="21">"ERROR: getval: Missing identifier.\n"<pos:position pos:line="13" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="61"/></expr_stmt>
    <return pos:line="14" pos:column="5">return <expr><operator pos:line="14" pos:column="12">(<pos:position pos:line="14" pos:column="13"/></operator><operator pos:line="14" pos:column="13">-<pos:position pos:line="14" pos:column="14"/></operator><literal type="number" pos:line="14" pos:column="14">1<pos:position pos:line="14" pos:column="15"/></literal><operator pos:line="14" pos:column="15">)<pos:position pos:line="14" pos:column="16"/></operator></expr>;<pos:position pos:line="14" pos:column="17"/></return>
  }<pos:position pos:line="15" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="17" pos:column="3">status<pos:position pos:line="17" pos:column="9"/></name> <operator pos:line="17" pos:column="10">=<pos:position pos:line="17" pos:column="11"/></operator> <call><name pos:line="17" pos:column="12">parse_identifier<pos:position pos:line="17" pos:column="28"/></name><argument_list pos:line="17" pos:column="28">(<argument><expr><name pos:line="17" pos:column="29">c<pos:position pos:line="17" pos:column="30"/></name></expr></argument>, <argument><expr><name><name pos:line="17" pos:column="32">argv<pos:position pos:line="17" pos:column="36"/></name><index pos:line="17" pos:column="36">[<expr><literal type="number" pos:line="17" pos:column="37">1<pos:position pos:line="17" pos:column="38"/></literal></expr>]<pos:position pos:line="17" pos:column="39"/></index></name></expr></argument>, <argument><expr><operator pos:line="17" pos:column="41">&amp;<pos:position pos:line="17" pos:column="46"/></operator><name pos:line="17" pos:column="42">ident<pos:position pos:line="17" pos:column="47"/></name></expr></argument>)<pos:position pos:line="17" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="49"/></expr_stmt>
  <if pos:line="18" pos:column="3">if <condition pos:line="18" pos:column="6">(<expr><name pos:line="18" pos:column="7">status<pos:position pos:line="18" pos:column="13"/></name> <operator pos:line="18" pos:column="14">!=<pos:position pos:line="18" pos:column="16"/></operator> <literal type="number" pos:line="18" pos:column="17">0<pos:position pos:line="18" pos:column="18"/></literal></expr>)<pos:position pos:line="18" pos:column="19"/></condition><then pos:line="18" pos:column="19">
    <block type="pseudo"><return pos:line="19" pos:column="5">return <expr><operator pos:line="19" pos:column="12">(<pos:position pos:line="19" pos:column="13"/></operator><name pos:line="19" pos:column="13">status<pos:position pos:line="19" pos:column="19"/></name><operator pos:line="19" pos:column="19">)<pos:position pos:line="19" pos:column="20"/></operator></expr>;<pos:position pos:line="19" pos:column="21"/></return></block></then></if>

<cpp:define pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">define<pos:position pos:line="21" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="21" pos:column="9">BAIL_OUT<pos:position pos:line="21" pos:column="17"/></name><parameter_list pos:line="21" pos:column="17">(<parameter><type><name pos:line="21" pos:column="18">s<pos:position pos:line="21" pos:column="19"/></name></type></parameter>)<pos:position pos:line="21" pos:column="20"/></parameter_list></cpp:macro>                                                            \
  <cpp:value pos:line="22" pos:column="3">do {                                                                         \
    if (ret_values != NULL)                                                    \
      free(ret_values);                                                        \
    if (ret_values_names != NULL) {                                            \
      for (size_t i = 0; i &lt; ret_values_num; ++i)                              \
        free(ret_values_names[i]);                                             \
      free(ret_values_names);                                                  \
    }                                                                          \
    ret_values_num = 0;                                                        \
    return (s);                                                                \
  } while (0)<pos:position pos:line="32" pos:column="14"/></cpp:value></cpp:define>

  <expr_stmt><expr><name pos:line="34" pos:column="3">status<pos:position pos:line="34" pos:column="9"/></name> <operator pos:line="34" pos:column="10">=<pos:position pos:line="34" pos:column="11"/></operator>
      <call><name pos:line="35" pos:column="7">lcc_getval<pos:position pos:line="35" pos:column="17"/></name><argument_list pos:line="35" pos:column="17">(<argument><expr><name pos:line="35" pos:column="18">c<pos:position pos:line="35" pos:column="19"/></name></expr></argument>, <argument><expr><operator pos:line="35" pos:column="21">&amp;<pos:position pos:line="35" pos:column="26"/></operator><name pos:line="35" pos:column="22">ident<pos:position pos:line="35" pos:column="27"/></name></expr></argument>, <argument><expr><operator pos:line="35" pos:column="29">&amp;<pos:position pos:line="35" pos:column="34"/></operator><name pos:line="35" pos:column="30">ret_values_num<pos:position pos:line="35" pos:column="44"/></name></expr></argument>, <argument><expr><operator pos:line="35" pos:column="46">&amp;<pos:position pos:line="35" pos:column="51"/></operator><name pos:line="35" pos:column="47">ret_values<pos:position pos:line="35" pos:column="57"/></name></expr></argument>, <argument><expr><operator pos:line="35" pos:column="59">&amp;<pos:position pos:line="35" pos:column="64"/></operator><name pos:line="35" pos:column="60">ret_values_names<pos:position pos:line="35" pos:column="76"/></name></expr></argument>)<pos:position pos:line="35" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="78"/></expr_stmt>
  <if pos:line="36" pos:column="3">if <condition pos:line="36" pos:column="6">(<expr><name pos:line="36" pos:column="7">status<pos:position pos:line="36" pos:column="13"/></name> <operator pos:line="36" pos:column="14">!=<pos:position pos:line="36" pos:column="16"/></operator> <literal type="number" pos:line="36" pos:column="17">0<pos:position pos:line="36" pos:column="18"/></literal></expr>)<pos:position pos:line="36" pos:column="19"/></condition><then pos:line="36" pos:column="19"> <block pos:line="36" pos:column="20">{
    <expr_stmt><expr><call><name pos:line="37" pos:column="5">fprintf<pos:position pos:line="37" pos:column="12"/></name><argument_list pos:line="37" pos:column="12">(<argument><expr><name pos:line="37" pos:column="13">stderr<pos:position pos:line="37" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="37" pos:column="21">"ERROR: %s\n"<pos:position pos:line="37" pos:column="34"/></literal></expr></argument>, <argument><expr><call><name pos:line="37" pos:column="36">lcc_strerror<pos:position pos:line="37" pos:column="48"/></name><argument_list pos:line="37" pos:column="48">(<argument><expr><name pos:line="37" pos:column="49">c<pos:position pos:line="37" pos:column="50"/></name></expr></argument>)<pos:position pos:line="37" pos:column="51"/></argument_list></call></expr></argument>)<pos:position pos:line="37" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="53"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="38" pos:column="5">BAIL_OUT<pos:position pos:line="38" pos:column="13"/></name><argument_list pos:line="38" pos:column="13">(<argument><expr><operator pos:line="38" pos:column="14">-<pos:position pos:line="38" pos:column="15"/></operator><literal type="number" pos:line="38" pos:column="15">1<pos:position pos:line="38" pos:column="16"/></literal></expr></argument>)<pos:position pos:line="38" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="18"/></expr_stmt>
  }<pos:position pos:line="39" pos:column="4"/></block></then></if>

  <for pos:line="41" pos:column="3">for <control pos:line="41" pos:column="7">(<init><decl><type><name pos:line="41" pos:column="8">size_t<pos:position pos:line="41" pos:column="14"/></name></type> <name pos:line="41" pos:column="15">i<pos:position pos:line="41" pos:column="16"/></name> <init pos:line="41" pos:column="17">= <expr><literal type="number" pos:line="41" pos:column="19">0<pos:position pos:line="41" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="41" pos:column="21"/></init> <condition><expr><name pos:line="41" pos:column="22">i<pos:position pos:line="41" pos:column="23"/></name> <operator pos:line="41" pos:column="24">&lt;<pos:position pos:line="41" pos:column="28"/></operator> <name pos:line="41" pos:column="26">ret_values_num<pos:position pos:line="41" pos:column="40"/></name></expr>;<pos:position pos:line="41" pos:column="41"/></condition> <incr><expr><operator pos:line="41" pos:column="42">++<pos:position pos:line="41" pos:column="44"/></operator><name pos:line="41" pos:column="44">i<pos:position pos:line="41" pos:column="45"/></name></expr></incr>)<pos:position pos:line="41" pos:column="46"/></control>
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="42" pos:column="5">printf<pos:position pos:line="42" pos:column="11"/></name><argument_list pos:line="42" pos:column="11">(<argument><expr><literal type="string" pos:line="42" pos:column="12">"%s=%e\n"<pos:position pos:line="42" pos:column="21"/></literal></expr></argument>, <argument><expr><name><name pos:line="42" pos:column="23">ret_values_names<pos:position pos:line="42" pos:column="39"/></name><index pos:line="42" pos:column="39">[<expr><name pos:line="42" pos:column="40">i<pos:position pos:line="42" pos:column="41"/></name></expr>]<pos:position pos:line="42" pos:column="42"/></index></name></expr></argument>, <argument><expr><name><name pos:line="42" pos:column="44">ret_values<pos:position pos:line="42" pos:column="54"/></name><index pos:line="42" pos:column="54">[<expr><name pos:line="42" pos:column="55">i<pos:position pos:line="42" pos:column="56"/></name></expr>]<pos:position pos:line="42" pos:column="57"/></index></name></expr></argument>)<pos:position pos:line="42" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="59"/></expr_stmt></block></for>
  <expr_stmt><expr><call><name pos:line="43" pos:column="3">BAIL_OUT<pos:position pos:line="43" pos:column="11"/></name><argument_list pos:line="43" pos:column="11">(<argument><expr><literal type="number" pos:line="43" pos:column="12">0<pos:position pos:line="43" pos:column="13"/></literal></expr></argument>)<pos:position pos:line="43" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="15"/></expr_stmt>
<cpp:undef pos:line="44" pos:column="1">#<cpp:directive pos:line="44" pos:column="2">undef<pos:position pos:line="44" pos:column="7"/></cpp:directive> <name pos:line="44" pos:column="8">BAIL_OUT<pos:position pos:line="44" pos:column="16"/></name></cpp:undef>
}<pos:position pos:line="45" pos:column="2"/></block></function></unit>
