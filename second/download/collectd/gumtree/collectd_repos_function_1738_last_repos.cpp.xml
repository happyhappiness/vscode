<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1738_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">ovs_db_json_data_process<pos:position pos:line="1" pos:column="36"/></name><parameter_list pos:line="1" pos:column="36">(<parameter><decl><type><name pos:line="1" pos:column="37">ovs_db_t<pos:position pos:line="1" pos:column="45"/></name> <modifier pos:line="1" pos:column="46">*<pos:position pos:line="1" pos:column="47"/></modifier></type><name pos:line="1" pos:column="47">pdb<pos:position pos:line="1" pos:column="50"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="52">const<pos:position pos:line="1" pos:column="57"/></specifier> <name pos:line="1" pos:column="58">char<pos:position pos:line="1" pos:column="62"/></name> <modifier pos:line="1" pos:column="63">*<pos:position pos:line="1" pos:column="64"/></modifier></type><name pos:line="1" pos:column="64">data<pos:position pos:line="1" pos:column="68"/></name></decl></parameter>,
                                    <parameter><decl><type><name pos:line="2" pos:column="37">size_t<pos:position pos:line="2" pos:column="43"/></name></type> <name pos:line="2" pos:column="44">len<pos:position pos:line="2" pos:column="47"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="48"/></parameter_list> <block pos:line="2" pos:column="49">{
  <decl_stmt><decl><type><specifier pos:line="3" pos:column="3">const<pos:position pos:line="3" pos:column="8"/></specifier> <name pos:line="3" pos:column="9">char<pos:position pos:line="3" pos:column="13"/></name> <modifier pos:line="3" pos:column="14">*<pos:position pos:line="3" pos:column="15"/></modifier></type><name pos:line="3" pos:column="15">method<pos:position pos:line="3" pos:column="21"/></name> <init pos:line="3" pos:column="22">= <expr><name pos:line="3" pos:column="24">NULL<pos:position pos:line="3" pos:column="28"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="29"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">char<pos:position pos:line="4" pos:column="7"/></name></type> <name><name pos:line="4" pos:column="8">yajl_errbuf<pos:position pos:line="4" pos:column="19"/></name><index pos:line="4" pos:column="19">[<expr><name pos:line="4" pos:column="20">OVS_YAJL_ERROR_BUFFER_SIZE<pos:position pos:line="4" pos:column="46"/></name></expr>]<pos:position pos:line="4" pos:column="47"/></index></name></decl>;<pos:position pos:line="4" pos:column="48"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="5" pos:column="3">const<pos:position pos:line="5" pos:column="8"/></specifier> <name pos:line="5" pos:column="9">char<pos:position pos:line="5" pos:column="13"/></name> <modifier pos:line="5" pos:column="14">*<pos:position pos:line="5" pos:column="15"/></modifier></type><name><name pos:line="5" pos:column="15">method_path<pos:position pos:line="5" pos:column="26"/></name><index pos:line="5" pos:column="26">[]<pos:position pos:line="5" pos:column="28"/></index></name> <init pos:line="5" pos:column="29">= <expr><block pos:line="5" pos:column="31">{<expr><literal type="string" pos:line="5" pos:column="32">"method"<pos:position pos:line="5" pos:column="40"/></literal></expr>, <expr><name pos:line="5" pos:column="42">NULL<pos:position pos:line="5" pos:column="46"/></name></expr>}<pos:position pos:line="5" pos:column="47"/></block></expr></init></decl>;<pos:position pos:line="5" pos:column="48"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="6" pos:column="3">const<pos:position pos:line="6" pos:column="8"/></specifier> <name pos:line="6" pos:column="9">char<pos:position pos:line="6" pos:column="13"/></name> <modifier pos:line="6" pos:column="14">*<pos:position pos:line="6" pos:column="15"/></modifier></type><name><name pos:line="6" pos:column="15">result_path<pos:position pos:line="6" pos:column="26"/></name><index pos:line="6" pos:column="26">[]<pos:position pos:line="6" pos:column="28"/></index></name> <init pos:line="6" pos:column="29">= <expr><block pos:line="6" pos:column="31">{<expr><literal type="string" pos:line="6" pos:column="32">"result"<pos:position pos:line="6" pos:column="40"/></literal></expr>, <expr><name pos:line="6" pos:column="42">NULL<pos:position pos:line="6" pos:column="46"/></name></expr>}<pos:position pos:line="6" pos:column="47"/></block></expr></init></decl>;<pos:position pos:line="6" pos:column="48"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">char<pos:position pos:line="7" pos:column="7"/></name> <modifier pos:line="7" pos:column="8">*<pos:position pos:line="7" pos:column="9"/></modifier></type><name pos:line="7" pos:column="9">sjson<pos:position pos:line="7" pos:column="14"/></name> <init pos:line="7" pos:column="15">= <expr><name pos:line="7" pos:column="17">NULL<pos:position pos:line="7" pos:column="21"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="22"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">yajl_val<pos:position pos:line="8" pos:column="11"/></name></type> <name pos:line="8" pos:column="12">jnode<pos:position pos:line="8" pos:column="17"/></name></decl>, <decl><type ref="prev"/><name pos:line="8" pos:column="19">jval<pos:position pos:line="8" pos:column="23"/></name></decl>;<pos:position pos:line="8" pos:column="24"/></decl_stmt>

  <comment type="block" pos:line="10" pos:column="3">/* duplicate the data to make null-terminated string
   * required for yajl_tree_parse() */</comment>
  <if pos:line="12" pos:column="3">if <condition pos:line="12" pos:column="6">(<expr><operator pos:line="12" pos:column="7">(<pos:position pos:line="12" pos:column="8"/></operator><name pos:line="12" pos:column="8">sjson<pos:position pos:line="12" pos:column="13"/></name> <operator pos:line="12" pos:column="14">=<pos:position pos:line="12" pos:column="15"/></operator> <call><name pos:line="12" pos:column="16">calloc<pos:position pos:line="12" pos:column="22"/></name><argument_list pos:line="12" pos:column="22">(<argument><expr><literal type="number" pos:line="12" pos:column="23">1<pos:position pos:line="12" pos:column="24"/></literal></expr></argument>, <argument><expr><name pos:line="12" pos:column="26">len<pos:position pos:line="12" pos:column="29"/></name> <operator pos:line="12" pos:column="30">+<pos:position pos:line="12" pos:column="31"/></operator> <literal type="number" pos:line="12" pos:column="32">1<pos:position pos:line="12" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="34"/></argument_list></call><operator pos:line="12" pos:column="34">)<pos:position pos:line="12" pos:column="35"/></operator> <operator pos:line="12" pos:column="36">==<pos:position pos:line="12" pos:column="38"/></operator> <name pos:line="12" pos:column="39">NULL<pos:position pos:line="12" pos:column="43"/></name></expr>)<pos:position pos:line="12" pos:column="44"/></condition><then pos:line="12" pos:column="44">
    <block type="pseudo"><return pos:line="13" pos:column="5">return <expr><operator pos:line="13" pos:column="12">-<pos:position pos:line="13" pos:column="13"/></operator><literal type="number" pos:line="13" pos:column="13">1<pos:position pos:line="13" pos:column="14"/></literal></expr>;<pos:position pos:line="13" pos:column="15"/></return></block></then></if>

  <expr_stmt><expr><call><name pos:line="15" pos:column="3">sstrncpy<pos:position pos:line="15" pos:column="11"/></name><argument_list pos:line="15" pos:column="11">(<argument><expr><name pos:line="15" pos:column="12">sjson<pos:position pos:line="15" pos:column="17"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="19">data<pos:position pos:line="15" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="25">len<pos:position pos:line="15" pos:column="28"/></name> <operator pos:line="15" pos:column="29">+<pos:position pos:line="15" pos:column="30"/></operator> <literal type="number" pos:line="15" pos:column="31">1<pos:position pos:line="15" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="34"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="16" pos:column="3">OVS_DEBUG<pos:position pos:line="16" pos:column="12"/></name><argument_list pos:line="16" pos:column="12">(<argument><expr><literal type="string" pos:line="16" pos:column="13">"[len=%zu] %s"<pos:position pos:line="16" pos:column="27"/></literal></expr></argument>, <argument><expr><name pos:line="16" pos:column="29">len<pos:position pos:line="16" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="34">sjson<pos:position pos:line="16" pos:column="39"/></name></expr></argument>)<pos:position pos:line="16" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="41"/></expr_stmt>

  <comment type="block" pos:line="18" pos:column="3">/* parse json data */</comment>
  <expr_stmt><expr><name pos:line="19" pos:column="3">jnode<pos:position pos:line="19" pos:column="8"/></name> <operator pos:line="19" pos:column="9">=<pos:position pos:line="19" pos:column="10"/></operator> <call><name pos:line="19" pos:column="11">yajl_tree_parse<pos:position pos:line="19" pos:column="26"/></name><argument_list pos:line="19" pos:column="26">(<argument><expr><name pos:line="19" pos:column="27">sjson<pos:position pos:line="19" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="34">yajl_errbuf<pos:position pos:line="19" pos:column="45"/></name></expr></argument>, <argument><expr><sizeof pos:line="19" pos:column="47">sizeof<argument_list pos:line="19" pos:column="53">(<argument><expr><name pos:line="19" pos:column="54">yajl_errbuf<pos:position pos:line="19" pos:column="65"/></name></expr></argument>)<pos:position pos:line="19" pos:column="66"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="19" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="68"/></expr_stmt>
  <if pos:line="20" pos:column="3">if <condition pos:line="20" pos:column="6">(<expr><name pos:line="20" pos:column="7">jnode<pos:position pos:line="20" pos:column="12"/></name> <operator pos:line="20" pos:column="13">==<pos:position pos:line="20" pos:column="15"/></operator> <name pos:line="20" pos:column="16">NULL<pos:position pos:line="20" pos:column="20"/></name></expr>)<pos:position pos:line="20" pos:column="21"/></condition><then pos:line="20" pos:column="21"> <block pos:line="20" pos:column="22">{
    <expr_stmt><expr><call><name pos:line="21" pos:column="5">OVS_ERROR<pos:position pos:line="21" pos:column="14"/></name><argument_list pos:line="21" pos:column="14">(<argument><expr><literal type="string" pos:line="21" pos:column="15">"yajl_tree_parse() %s"<pos:position pos:line="21" pos:column="37"/></literal></expr></argument>, <argument><expr><name pos:line="21" pos:column="39">yajl_errbuf<pos:position pos:line="21" pos:column="50"/></name></expr></argument>)<pos:position pos:line="21" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="52"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="22" pos:column="5">sfree<pos:position pos:line="22" pos:column="10"/></name><argument_list pos:line="22" pos:column="10">(<argument><expr><name pos:line="22" pos:column="11">sjson<pos:position pos:line="22" pos:column="16"/></name></expr></argument>)<pos:position pos:line="22" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="18"/></expr_stmt>
    <return pos:line="23" pos:column="5">return <expr><operator pos:line="23" pos:column="12">-<pos:position pos:line="23" pos:column="13"/></operator><literal type="number" pos:line="23" pos:column="13">1<pos:position pos:line="23" pos:column="14"/></literal></expr>;<pos:position pos:line="23" pos:column="15"/></return>
  }<pos:position pos:line="24" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="26" pos:column="3">/* get method name */</comment>
  <if pos:line="27" pos:column="3">if <condition pos:line="27" pos:column="6">(<expr><operator pos:line="27" pos:column="7">(<pos:position pos:line="27" pos:column="8"/></operator><name pos:line="27" pos:column="8">jval<pos:position pos:line="27" pos:column="12"/></name> <operator pos:line="27" pos:column="13">=<pos:position pos:line="27" pos:column="14"/></operator> <call><name pos:line="27" pos:column="15">yajl_tree_get<pos:position pos:line="27" pos:column="28"/></name><argument_list pos:line="27" pos:column="28">(<argument><expr><name pos:line="27" pos:column="29">jnode<pos:position pos:line="27" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="36">method_path<pos:position pos:line="27" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="49">yajl_t_string<pos:position pos:line="27" pos:column="62"/></name></expr></argument>)<pos:position pos:line="27" pos:column="63"/></argument_list></call><operator pos:line="27" pos:column="63">)<pos:position pos:line="27" pos:column="64"/></operator> <operator pos:line="27" pos:column="65">!=<pos:position pos:line="27" pos:column="67"/></operator> <name pos:line="27" pos:column="68">NULL<pos:position pos:line="27" pos:column="72"/></name></expr>)<pos:position pos:line="27" pos:column="73"/></condition><then pos:line="27" pos:column="73"> <block pos:line="27" pos:column="74">{
    <if pos:line="28" pos:column="5">if <condition pos:line="28" pos:column="8">(<expr><operator pos:line="28" pos:column="9">(<pos:position pos:line="28" pos:column="10"/></operator><name pos:line="28" pos:column="10">method<pos:position pos:line="28" pos:column="16"/></name> <operator pos:line="28" pos:column="17">=<pos:position pos:line="28" pos:column="18"/></operator> <call><name pos:line="28" pos:column="19">YAJL_GET_STRING<pos:position pos:line="28" pos:column="34"/></name><argument_list pos:line="28" pos:column="34">(<argument><expr><name pos:line="28" pos:column="35">jval<pos:position pos:line="28" pos:column="39"/></name></expr></argument>)<pos:position pos:line="28" pos:column="40"/></argument_list></call><operator pos:line="28" pos:column="40">)<pos:position pos:line="28" pos:column="41"/></operator> <operator pos:line="28" pos:column="42">==<pos:position pos:line="28" pos:column="44"/></operator> <name pos:line="28" pos:column="45">NULL<pos:position pos:line="28" pos:column="49"/></name></expr>)<pos:position pos:line="28" pos:column="50"/></condition><then pos:line="28" pos:column="50"> <block pos:line="28" pos:column="51">{
      <expr_stmt><expr><call><name pos:line="29" pos:column="7">yajl_tree_free<pos:position pos:line="29" pos:column="21"/></name><argument_list pos:line="29" pos:column="21">(<argument><expr><name pos:line="29" pos:column="22">jnode<pos:position pos:line="29" pos:column="27"/></name></expr></argument>)<pos:position pos:line="29" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="29"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="30" pos:column="7">sfree<pos:position pos:line="30" pos:column="12"/></name><argument_list pos:line="30" pos:column="12">(<argument><expr><name pos:line="30" pos:column="13">sjson<pos:position pos:line="30" pos:column="18"/></name></expr></argument>)<pos:position pos:line="30" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="20"/></expr_stmt>
      <return pos:line="31" pos:column="7">return <expr><operator pos:line="31" pos:column="14">-<pos:position pos:line="31" pos:column="15"/></operator><literal type="number" pos:line="31" pos:column="15">1<pos:position pos:line="31" pos:column="16"/></literal></expr>;<pos:position pos:line="31" pos:column="17"/></return>
    }<pos:position pos:line="32" pos:column="6"/></block></then></if>
    <if pos:line="33" pos:column="5">if <condition pos:line="33" pos:column="8">(<expr><call><name pos:line="33" pos:column="9">strcmp<pos:position pos:line="33" pos:column="15"/></name><argument_list pos:line="33" pos:column="15">(<argument><expr><literal type="string" pos:line="33" pos:column="16">"echo"<pos:position pos:line="33" pos:column="22"/></literal></expr></argument>, <argument><expr><name pos:line="33" pos:column="24">method<pos:position pos:line="33" pos:column="30"/></name></expr></argument>)<pos:position pos:line="33" pos:column="31"/></argument_list></call> <operator pos:line="33" pos:column="32">==<pos:position pos:line="33" pos:column="34"/></operator> <literal type="number" pos:line="33" pos:column="35">0<pos:position pos:line="33" pos:column="36"/></literal></expr>)<pos:position pos:line="33" pos:column="37"/></condition><then pos:line="33" pos:column="37"> <block pos:line="33" pos:column="38">{
      <comment type="block" pos:line="34" pos:column="7">/* echo request from the server */</comment>
      <if pos:line="35" pos:column="7">if <condition pos:line="35" pos:column="10">(<expr><call><name pos:line="35" pos:column="11">ovs_db_table_echo_cb<pos:position pos:line="35" pos:column="31"/></name><argument_list pos:line="35" pos:column="31">(<argument><expr><name pos:line="35" pos:column="32">pdb<pos:position pos:line="35" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="37">jnode<pos:position pos:line="35" pos:column="42"/></name></expr></argument>)<pos:position pos:line="35" pos:column="43"/></argument_list></call> <operator pos:line="35" pos:column="44">&lt;<pos:position pos:line="35" pos:column="48"/></operator> <literal type="number" pos:line="35" pos:column="46">0<pos:position pos:line="35" pos:column="47"/></literal></expr>)<pos:position pos:line="35" pos:column="48"/></condition><then pos:line="35" pos:column="48">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="36" pos:column="9">OVS_ERROR<pos:position pos:line="36" pos:column="18"/></name><argument_list pos:line="36" pos:column="18">(<argument><expr><literal type="string" pos:line="36" pos:column="19">"handle echo request failed"<pos:position pos:line="36" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="36" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="49"/></expr_stmt></block></then></if>
    }<pos:position pos:line="37" pos:column="6"/></block></then> <elseif pos:line="37" pos:column="7">else <if pos:line="37" pos:column="12">if <condition pos:line="37" pos:column="15">(<expr><call><name pos:line="37" pos:column="16">strcmp<pos:position pos:line="37" pos:column="22"/></name><argument_list pos:line="37" pos:column="22">(<argument><expr><literal type="string" pos:line="37" pos:column="23">"update"<pos:position pos:line="37" pos:column="31"/></literal></expr></argument>, <argument><expr><name pos:line="37" pos:column="33">method<pos:position pos:line="37" pos:column="39"/></name></expr></argument>)<pos:position pos:line="37" pos:column="40"/></argument_list></call> <operator pos:line="37" pos:column="41">==<pos:position pos:line="37" pos:column="43"/></operator> <literal type="number" pos:line="37" pos:column="44">0<pos:position pos:line="37" pos:column="45"/></literal></expr>)<pos:position pos:line="37" pos:column="46"/></condition><then pos:line="37" pos:column="46"> <block pos:line="37" pos:column="47">{
      <comment type="block" pos:line="38" pos:column="7">/* update notification */</comment>
      <if pos:line="39" pos:column="7">if <condition pos:line="39" pos:column="10">(<expr><call><name pos:line="39" pos:column="11">ovs_db_table_update_cb<pos:position pos:line="39" pos:column="33"/></name><argument_list pos:line="39" pos:column="33">(<argument><expr><name pos:line="39" pos:column="34">pdb<pos:position pos:line="39" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="39">jnode<pos:position pos:line="39" pos:column="44"/></name></expr></argument>)<pos:position pos:line="39" pos:column="45"/></argument_list></call> <operator pos:line="39" pos:column="46">&lt;<pos:position pos:line="39" pos:column="50"/></operator> <literal type="number" pos:line="39" pos:column="48">0<pos:position pos:line="39" pos:column="49"/></literal></expr>)<pos:position pos:line="39" pos:column="50"/></condition><then pos:line="39" pos:column="50">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="40" pos:column="9">OVS_ERROR<pos:position pos:line="40" pos:column="18"/></name><argument_list pos:line="40" pos:column="18">(<argument><expr><literal type="string" pos:line="40" pos:column="19">"handle update notification failed"<pos:position pos:line="40" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="40" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="56"/></expr_stmt></block></then></if>
    }<pos:position pos:line="41" pos:column="6"/></block></then></if></elseif></if>
  }<pos:position pos:line="42" pos:column="4"/></block></then> <elseif pos:line="42" pos:column="5">else <if pos:line="42" pos:column="10">if <condition pos:line="42" pos:column="13">(<expr><operator pos:line="42" pos:column="14">(<pos:position pos:line="42" pos:column="15"/></operator><name pos:line="42" pos:column="15">jval<pos:position pos:line="42" pos:column="19"/></name> <operator pos:line="42" pos:column="20">=<pos:position pos:line="42" pos:column="21"/></operator> <call><name pos:line="42" pos:column="22">yajl_tree_get<pos:position pos:line="42" pos:column="35"/></name><argument_list pos:line="42" pos:column="35">(<argument><expr><name pos:line="42" pos:column="36">jnode<pos:position pos:line="42" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="43">result_path<pos:position pos:line="42" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="56">yajl_t_any<pos:position pos:line="42" pos:column="66"/></name></expr></argument>)<pos:position pos:line="42" pos:column="67"/></argument_list></call><operator pos:line="42" pos:column="67">)<pos:position pos:line="42" pos:column="68"/></operator> <operator pos:line="42" pos:column="69">!=<pos:position pos:line="42" pos:column="71"/></operator> <name pos:line="42" pos:column="72">NULL<pos:position pos:line="42" pos:column="76"/></name></expr>)<pos:position pos:line="42" pos:column="77"/></condition><then pos:line="42" pos:column="77"> <block pos:line="42" pos:column="78">{
    <comment type="block" pos:line="43" pos:column="5">/* result notification */</comment>
    <if pos:line="44" pos:column="5">if <condition pos:line="44" pos:column="8">(<expr><call><name pos:line="44" pos:column="9">ovs_db_result_cb<pos:position pos:line="44" pos:column="25"/></name><argument_list pos:line="44" pos:column="25">(<argument><expr><name pos:line="44" pos:column="26">pdb<pos:position pos:line="44" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="31">jnode<pos:position pos:line="44" pos:column="36"/></name></expr></argument>)<pos:position pos:line="44" pos:column="37"/></argument_list></call> <operator pos:line="44" pos:column="38">&lt;<pos:position pos:line="44" pos:column="42"/></operator> <literal type="number" pos:line="44" pos:column="40">0<pos:position pos:line="44" pos:column="41"/></literal></expr>)<pos:position pos:line="44" pos:column="42"/></condition><then pos:line="44" pos:column="42">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="45" pos:column="7">OVS_ERROR<pos:position pos:line="45" pos:column="16"/></name><argument_list pos:line="45" pos:column="16">(<argument><expr><literal type="string" pos:line="45" pos:column="17">"handle result reply failed"<pos:position pos:line="45" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="45" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="47"/></expr_stmt></block></then></if>
  }<pos:position pos:line="46" pos:column="4"/></block></then></if></elseif> <else pos:line="46" pos:column="5">else
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="47" pos:column="5">OVS_ERROR<pos:position pos:line="47" pos:column="14"/></name><argument_list pos:line="47" pos:column="14">(<argument><expr><literal type="string" pos:line="47" pos:column="15">"connot find method or result failed"<pos:position pos:line="47" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="47" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="54"/></expr_stmt></block></else></if>

  <comment type="block" pos:line="49" pos:column="3">/* release memory */</comment>
  <expr_stmt><expr><call><name pos:line="50" pos:column="3">yajl_tree_free<pos:position pos:line="50" pos:column="17"/></name><argument_list pos:line="50" pos:column="17">(<argument><expr><name pos:line="50" pos:column="18">jnode<pos:position pos:line="50" pos:column="23"/></name></expr></argument>)<pos:position pos:line="50" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="25"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="51" pos:column="3">sfree<pos:position pos:line="51" pos:column="8"/></name><argument_list pos:line="51" pos:column="8">(<argument><expr><name pos:line="51" pos:column="9">sjson<pos:position pos:line="51" pos:column="14"/></name></expr></argument>)<pos:position pos:line="51" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="16"/></expr_stmt>
  <return pos:line="52" pos:column="3">return <expr><literal type="number" pos:line="52" pos:column="10">0<pos:position pos:line="52" pos:column="11"/></literal></expr>;<pos:position pos:line="52" pos:column="12"/></return>
}<pos:position pos:line="53" pos:column="2"/></block></function></unit>
