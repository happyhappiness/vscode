<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_545_collectd-5.0.4.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">ps_read_process<pos:position pos:line="1" pos:column="20"/></name> <parameter_list pos:line="1" pos:column="21">(<parameter><decl><type><name pos:line="1" pos:column="22">int<pos:position pos:line="1" pos:column="25"/></name></type> <name pos:line="1" pos:column="26">pid<pos:position pos:line="1" pos:column="29"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="31">procstat_t<pos:position pos:line="1" pos:column="41"/></name> <modifier pos:line="1" pos:column="42">*<pos:position pos:line="1" pos:column="43"/></modifier></type><name pos:line="1" pos:column="43">ps<pos:position pos:line="1" pos:column="45"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="47">char<pos:position pos:line="1" pos:column="51"/></name> <modifier pos:line="1" pos:column="52">*<pos:position pos:line="1" pos:column="53"/></modifier></type><name pos:line="1" pos:column="53">state<pos:position pos:line="1" pos:column="58"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="59"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">char<pos:position pos:line="3" pos:column="13"/></name></type>  <name><name pos:line="3" pos:column="15">filename<pos:position pos:line="3" pos:column="23"/></name><index pos:line="3" pos:column="23">[<expr><literal type="number" pos:line="3" pos:column="24">64<pos:position pos:line="3" pos:column="26"/></literal></expr>]<pos:position pos:line="3" pos:column="27"/></index></name></decl>;<pos:position pos:line="3" pos:column="28"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">char<pos:position pos:line="4" pos:column="13"/></name></type>  <name><name pos:line="4" pos:column="15">buffer<pos:position pos:line="4" pos:column="21"/></name><index pos:line="4" pos:column="21">[<expr><literal type="number" pos:line="4" pos:column="22">1024<pos:position pos:line="4" pos:column="26"/></literal></expr>]<pos:position pos:line="4" pos:column="27"/></index></name></decl>;<pos:position pos:line="4" pos:column="28"/></decl_stmt>

	<decl_stmt><decl><type><name pos:line="6" pos:column="9">char<pos:position pos:line="6" pos:column="13"/></name> <modifier pos:line="6" pos:column="14">*<pos:position pos:line="6" pos:column="15"/></modifier></type><name><name pos:line="6" pos:column="15">fields<pos:position pos:line="6" pos:column="21"/></name><index pos:line="6" pos:column="21">[<expr><literal type="number" pos:line="6" pos:column="22">64<pos:position pos:line="6" pos:column="24"/></literal></expr>]<pos:position pos:line="6" pos:column="25"/></index></name></decl>;<pos:position pos:line="6" pos:column="26"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">char<pos:position pos:line="7" pos:column="13"/></name></type>  <name pos:line="7" pos:column="15">fields_len<pos:position pos:line="7" pos:column="25"/></name></decl>;<pos:position pos:line="7" pos:column="26"/></decl_stmt>

	<decl_stmt><decl><type><name pos:line="9" pos:column="9">int<pos:position pos:line="9" pos:column="12"/></name></type>   <name pos:line="9" pos:column="15">buffer_len<pos:position pos:line="9" pos:column="25"/></name></decl>;<pos:position pos:line="9" pos:column="26"/></decl_stmt>

	<decl_stmt><decl><type><name pos:line="11" pos:column="9">char<pos:position pos:line="11" pos:column="13"/></name> <modifier pos:line="11" pos:column="14">*<pos:position pos:line="11" pos:column="15"/></modifier></type><name pos:line="11" pos:column="15">buffer_ptr<pos:position pos:line="11" pos:column="25"/></name></decl>;<pos:position pos:line="11" pos:column="26"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="12" pos:column="9">size_t<pos:position pos:line="12" pos:column="15"/></name></type> <name pos:line="12" pos:column="16">name_start_pos<pos:position pos:line="12" pos:column="30"/></name></decl>;<pos:position pos:line="12" pos:column="31"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="13" pos:column="9">size_t<pos:position pos:line="13" pos:column="15"/></name></type> <name pos:line="13" pos:column="16">name_end_pos<pos:position pos:line="13" pos:column="28"/></name></decl>;<pos:position pos:line="13" pos:column="29"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="14" pos:column="9">size_t<pos:position pos:line="14" pos:column="15"/></name></type> <name pos:line="14" pos:column="16">name_len<pos:position pos:line="14" pos:column="24"/></name></decl>;<pos:position pos:line="14" pos:column="25"/></decl_stmt>

	<decl_stmt><decl><type><name pos:line="16" pos:column="9">derive_t<pos:position pos:line="16" pos:column="17"/></name></type> <name pos:line="16" pos:column="18">cpu_user_counter<pos:position pos:line="16" pos:column="34"/></name></decl>;<pos:position pos:line="16" pos:column="35"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="17" pos:column="9">derive_t<pos:position pos:line="17" pos:column="17"/></name></type> <name pos:line="17" pos:column="18">cpu_system_counter<pos:position pos:line="17" pos:column="36"/></name></decl>;<pos:position pos:line="17" pos:column="37"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="18" pos:column="9">long<pos:position pos:line="18" pos:column="13"/></name> <name pos:line="18" pos:column="14">long<pos:position pos:line="18" pos:column="18"/></name> <name pos:line="18" pos:column="19">unsigned<pos:position pos:line="18" pos:column="27"/></name></type> <name pos:line="18" pos:column="28">vmem_size<pos:position pos:line="18" pos:column="37"/></name></decl>;<pos:position pos:line="18" pos:column="38"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="19" pos:column="9">long<pos:position pos:line="19" pos:column="13"/></name> <name pos:line="19" pos:column="14">long<pos:position pos:line="19" pos:column="18"/></name> <name pos:line="19" pos:column="19">unsigned<pos:position pos:line="19" pos:column="27"/></name></type> <name pos:line="19" pos:column="28">vmem_rss<pos:position pos:line="19" pos:column="36"/></name></decl>;<pos:position pos:line="19" pos:column="37"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="20" pos:column="9">long<pos:position pos:line="20" pos:column="13"/></name> <name pos:line="20" pos:column="14">long<pos:position pos:line="20" pos:column="18"/></name> <name pos:line="20" pos:column="19">unsigned<pos:position pos:line="20" pos:column="27"/></name></type> <name pos:line="20" pos:column="28">stack_size<pos:position pos:line="20" pos:column="38"/></name></decl>;<pos:position pos:line="20" pos:column="39"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="22" pos:column="9">memset<pos:position pos:line="22" pos:column="15"/></name> <argument_list pos:line="22" pos:column="16">(<argument><expr><name pos:line="22" pos:column="17">ps<pos:position pos:line="22" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="22" pos:column="21">0<pos:position pos:line="22" pos:column="22"/></literal></expr></argument>, <argument><expr><sizeof pos:line="22" pos:column="24">sizeof <argument_list pos:line="22" pos:column="31">(<argument><expr><name pos:line="22" pos:column="32">procstat_t<pos:position pos:line="22" pos:column="42"/></name></expr></argument>)<pos:position pos:line="22" pos:column="43"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="22" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="45"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="24" pos:column="9">ssnprintf<pos:position pos:line="24" pos:column="18"/></name> <argument_list pos:line="24" pos:column="19">(<argument><expr><name pos:line="24" pos:column="20">filename<pos:position pos:line="24" pos:column="28"/></name></expr></argument>, <argument><expr><sizeof pos:line="24" pos:column="30">sizeof <argument_list pos:line="24" pos:column="37">(<argument><expr><name pos:line="24" pos:column="38">filename<pos:position pos:line="24" pos:column="46"/></name></expr></argument>)<pos:position pos:line="24" pos:column="47"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="24" pos:column="49">"/proc/%i/stat"<pos:position pos:line="24" pos:column="64"/></literal></expr></argument>, <argument><expr><name pos:line="24" pos:column="66">pid<pos:position pos:line="24" pos:column="69"/></name></expr></argument>)<pos:position pos:line="24" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="71"/></expr_stmt>

	<expr_stmt><expr><name pos:line="26" pos:column="9">buffer_len<pos:position pos:line="26" pos:column="19"/></name> <operator pos:line="26" pos:column="20">=<pos:position pos:line="26" pos:column="21"/></operator> <call><name pos:line="26" pos:column="22">read_file_contents<pos:position pos:line="26" pos:column="40"/></name> <argument_list pos:line="26" pos:column="41">(<argument><expr><name pos:line="26" pos:column="42">filename<pos:position pos:line="26" pos:column="50"/></name></expr></argument>,
			<argument><expr><name pos:line="27" pos:column="25">buffer<pos:position pos:line="27" pos:column="31"/></name></expr></argument>, <argument><expr><sizeof pos:line="27" pos:column="33">sizeof<argument_list pos:line="27" pos:column="39">(<argument><expr><name pos:line="27" pos:column="40">buffer<pos:position pos:line="27" pos:column="46"/></name></expr></argument>)<pos:position pos:line="27" pos:column="47"/></argument_list></sizeof> <operator pos:line="27" pos:column="48">-<pos:position pos:line="27" pos:column="49"/></operator> <literal type="number" pos:line="27" pos:column="50">1<pos:position pos:line="27" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="53"/></expr_stmt>
	<if pos:line="28" pos:column="9">if <condition pos:line="28" pos:column="12">(<expr><name pos:line="28" pos:column="13">buffer_len<pos:position pos:line="28" pos:column="23"/></name> <operator pos:line="28" pos:column="24">&lt;=<pos:position pos:line="28" pos:column="29"/></operator> <literal type="number" pos:line="28" pos:column="27">0<pos:position pos:line="28" pos:column="28"/></literal></expr>)<pos:position pos:line="28" pos:column="29"/></condition><then pos:line="28" pos:column="29">
		<block type="pseudo"><return pos:line="29" pos:column="17">return <expr><operator pos:line="29" pos:column="24">(<pos:position pos:line="29" pos:column="25"/></operator><operator pos:line="29" pos:column="25">-<pos:position pos:line="29" pos:column="26"/></operator><literal type="number" pos:line="29" pos:column="26">1<pos:position pos:line="29" pos:column="27"/></literal><operator pos:line="29" pos:column="27">)<pos:position pos:line="29" pos:column="28"/></operator></expr>;<pos:position pos:line="29" pos:column="29"/></return></block></then></if>
	<expr_stmt><expr><name><name pos:line="30" pos:column="9">buffer<pos:position pos:line="30" pos:column="15"/></name><index pos:line="30" pos:column="15">[<expr><name pos:line="30" pos:column="16">buffer_len<pos:position pos:line="30" pos:column="26"/></name></expr>]<pos:position pos:line="30" pos:column="27"/></index></name> <operator pos:line="30" pos:column="28">=<pos:position pos:line="30" pos:column="29"/></operator> <literal type="number" pos:line="30" pos:column="30">0<pos:position pos:line="30" pos:column="31"/></literal></expr>;<pos:position pos:line="30" pos:column="32"/></expr_stmt>

	<comment type="block" pos:line="32" pos:column="9">/* The name of the process is enclosed in parens. Since the name can
	 * contain parens itself, spaces, numbers and pretty much everything
	 * else, use these to determine the process name. We don't use
	 * strchr(3) and strrchr(3) to avoid pointer arithmetic which would
	 * otherwise be required to determine name_len. */</comment>
	<expr_stmt><expr><name pos:line="37" pos:column="9">name_start_pos<pos:position pos:line="37" pos:column="23"/></name> <operator pos:line="37" pos:column="24">=<pos:position pos:line="37" pos:column="25"/></operator> <literal type="number" pos:line="37" pos:column="26">0<pos:position pos:line="37" pos:column="27"/></literal></expr>;<pos:position pos:line="37" pos:column="28"/></expr_stmt>
	<while pos:line="38" pos:column="9">while <condition pos:line="38" pos:column="15">(<expr><operator pos:line="38" pos:column="16">(<pos:position pos:line="38" pos:column="17"/></operator><name><name pos:line="38" pos:column="17">buffer<pos:position pos:line="38" pos:column="23"/></name><index pos:line="38" pos:column="23">[<expr><name pos:line="38" pos:column="24">name_start_pos<pos:position pos:line="38" pos:column="38"/></name></expr>]<pos:position pos:line="38" pos:column="39"/></index></name> <operator pos:line="38" pos:column="40">!=<pos:position pos:line="38" pos:column="42"/></operator> <literal type="char" pos:line="38" pos:column="43">'('<pos:position pos:line="38" pos:column="46"/></literal><operator pos:line="38" pos:column="46">)<pos:position pos:line="38" pos:column="47"/></operator>
			<operator pos:line="39" pos:column="25">&amp;&amp;<pos:position pos:line="39" pos:column="35"/></operator> <operator pos:line="39" pos:column="28">(<pos:position pos:line="39" pos:column="29"/></operator><name pos:line="39" pos:column="29">name_start_pos<pos:position pos:line="39" pos:column="43"/></name> <operator pos:line="39" pos:column="44">&lt;<pos:position pos:line="39" pos:column="48"/></operator> <name pos:line="39" pos:column="46">buffer_len<pos:position pos:line="39" pos:column="56"/></name><operator pos:line="39" pos:column="56">)<pos:position pos:line="39" pos:column="57"/></operator></expr>)<pos:position pos:line="39" pos:column="58"/></condition>
		<block type="pseudo"><expr_stmt><expr><name pos:line="40" pos:column="17">name_start_pos<pos:position pos:line="40" pos:column="31"/></name><operator pos:line="40" pos:column="31">++<pos:position pos:line="40" pos:column="33"/></operator></expr>;<pos:position pos:line="40" pos:column="34"/></expr_stmt></block></while>

	<expr_stmt><expr><name pos:line="42" pos:column="9">name_end_pos<pos:position pos:line="42" pos:column="21"/></name> <operator pos:line="42" pos:column="22">=<pos:position pos:line="42" pos:column="23"/></operator> <name pos:line="42" pos:column="24">buffer_len<pos:position pos:line="42" pos:column="34"/></name></expr>;<pos:position pos:line="42" pos:column="35"/></expr_stmt>
	<while pos:line="43" pos:column="9">while <condition pos:line="43" pos:column="15">(<expr><operator pos:line="43" pos:column="16">(<pos:position pos:line="43" pos:column="17"/></operator><name><name pos:line="43" pos:column="17">buffer<pos:position pos:line="43" pos:column="23"/></name><index pos:line="43" pos:column="23">[<expr><name pos:line="43" pos:column="24">name_end_pos<pos:position pos:line="43" pos:column="36"/></name></expr>]<pos:position pos:line="43" pos:column="37"/></index></name> <operator pos:line="43" pos:column="38">!=<pos:position pos:line="43" pos:column="40"/></operator> <literal type="char" pos:line="43" pos:column="41">')'<pos:position pos:line="43" pos:column="44"/></literal><operator pos:line="43" pos:column="44">)<pos:position pos:line="43" pos:column="45"/></operator>
			<operator pos:line="44" pos:column="25">&amp;&amp;<pos:position pos:line="44" pos:column="35"/></operator> <operator pos:line="44" pos:column="28">(<pos:position pos:line="44" pos:column="29"/></operator><name pos:line="44" pos:column="29">name_end_pos<pos:position pos:line="44" pos:column="41"/></name> <operator pos:line="44" pos:column="42">&gt;<pos:position pos:line="44" pos:column="46"/></operator> <literal type="number" pos:line="44" pos:column="44">0<pos:position pos:line="44" pos:column="45"/></literal><operator pos:line="44" pos:column="45">)<pos:position pos:line="44" pos:column="46"/></operator></expr>)<pos:position pos:line="44" pos:column="47"/></condition>
		<block type="pseudo"><expr_stmt><expr><name pos:line="45" pos:column="17">name_end_pos<pos:position pos:line="45" pos:column="29"/></name><operator pos:line="45" pos:column="29">--<pos:position pos:line="45" pos:column="31"/></operator></expr>;<pos:position pos:line="45" pos:column="32"/></expr_stmt></block></while>

	<comment type="block" pos:line="47" pos:column="9">/* Either '(' or ')' is not found or they are in the wrong order.
	 * Anyway, something weird that shouldn't happen ever. */</comment>
	<if pos:line="49" pos:column="9">if <condition pos:line="49" pos:column="12">(<expr><name pos:line="49" pos:column="13">name_start_pos<pos:position pos:line="49" pos:column="27"/></name> <operator pos:line="49" pos:column="28">&gt;=<pos:position pos:line="49" pos:column="33"/></operator> <name pos:line="49" pos:column="31">name_end_pos<pos:position pos:line="49" pos:column="43"/></name></expr>)<pos:position pos:line="49" pos:column="44"/></condition><then pos:line="49" pos:column="44">
	<block pos:line="50" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="51" pos:column="17">ERROR<pos:position pos:line="51" pos:column="22"/></name> <argument_list pos:line="51" pos:column="23">(<argument><expr><literal type="string" pos:line="51" pos:column="24">"processes plugin: name_start_pos = %zu &gt;= name_end_pos = %zu"<pos:position pos:line="51" pos:column="89"/></literal></expr></argument>,
				<argument><expr><name pos:line="52" pos:column="33">name_start_pos<pos:position pos:line="52" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="49">name_end_pos<pos:position pos:line="52" pos:column="61"/></name></expr></argument>)<pos:position pos:line="52" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="63"/></expr_stmt>
		<return pos:line="53" pos:column="17">return <expr><operator pos:line="53" pos:column="24">(<pos:position pos:line="53" pos:column="25"/></operator><operator pos:line="53" pos:column="25">-<pos:position pos:line="53" pos:column="26"/></operator><literal type="number" pos:line="53" pos:column="26">1<pos:position pos:line="53" pos:column="27"/></literal><operator pos:line="53" pos:column="27">)<pos:position pos:line="53" pos:column="28"/></operator></expr>;<pos:position pos:line="53" pos:column="29"/></return>
	}<pos:position pos:line="54" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="56" pos:column="9">name_len<pos:position pos:line="56" pos:column="17"/></name> <operator pos:line="56" pos:column="18">=<pos:position pos:line="56" pos:column="19"/></operator> <operator pos:line="56" pos:column="20">(<pos:position pos:line="56" pos:column="21"/></operator><name pos:line="56" pos:column="21">name_end_pos<pos:position pos:line="56" pos:column="33"/></name> <operator pos:line="56" pos:column="34">-<pos:position pos:line="56" pos:column="35"/></operator> <name pos:line="56" pos:column="36">name_start_pos<pos:position pos:line="56" pos:column="50"/></name><operator pos:line="56" pos:column="50">)<pos:position pos:line="56" pos:column="51"/></operator> <operator pos:line="56" pos:column="52">-<pos:position pos:line="56" pos:column="53"/></operator> <literal type="number" pos:line="56" pos:column="54">1<pos:position pos:line="56" pos:column="55"/></literal></expr>;<pos:position pos:line="56" pos:column="56"/></expr_stmt>
	<if pos:line="57" pos:column="9">if <condition pos:line="57" pos:column="12">(<expr><name pos:line="57" pos:column="13">name_len<pos:position pos:line="57" pos:column="21"/></name> <operator pos:line="57" pos:column="22">&gt;=<pos:position pos:line="57" pos:column="27"/></operator> <sizeof pos:line="57" pos:column="25">sizeof <argument_list pos:line="57" pos:column="32">(<argument><expr><name><name pos:line="57" pos:column="33">ps<pos:position pos:line="57" pos:column="35"/></name><operator pos:line="57" pos:column="35">-&gt;<pos:position pos:line="57" pos:column="40"/></operator><name pos:line="57" pos:column="37">name<pos:position pos:line="57" pos:column="41"/></name></name></expr></argument>)<pos:position pos:line="57" pos:column="42"/></argument_list></sizeof></expr>)<pos:position pos:line="57" pos:column="43"/></condition><then pos:line="57" pos:column="43">
		<block type="pseudo"><expr_stmt><expr><name pos:line="58" pos:column="17">name_len<pos:position pos:line="58" pos:column="25"/></name> <operator pos:line="58" pos:column="26">=<pos:position pos:line="58" pos:column="27"/></operator> <sizeof pos:line="58" pos:column="28">sizeof <argument_list pos:line="58" pos:column="35">(<argument><expr><name><name pos:line="58" pos:column="36">ps<pos:position pos:line="58" pos:column="38"/></name><operator pos:line="58" pos:column="38">-&gt;<pos:position pos:line="58" pos:column="43"/></operator><name pos:line="58" pos:column="40">name<pos:position pos:line="58" pos:column="44"/></name></name></expr></argument>)<pos:position pos:line="58" pos:column="45"/></argument_list></sizeof> <operator pos:line="58" pos:column="46">-<pos:position pos:line="58" pos:column="47"/></operator> <literal type="number" pos:line="58" pos:column="48">1<pos:position pos:line="58" pos:column="49"/></literal></expr>;<pos:position pos:line="58" pos:column="50"/></expr_stmt></block></then></if>

	<expr_stmt><expr><call><name pos:line="60" pos:column="9">sstrncpy<pos:position pos:line="60" pos:column="17"/></name> <argument_list pos:line="60" pos:column="18">(<argument><expr><name><name pos:line="60" pos:column="19">ps<pos:position pos:line="60" pos:column="21"/></name><operator pos:line="60" pos:column="21">-&gt;<pos:position pos:line="60" pos:column="26"/></operator><name pos:line="60" pos:column="23">name<pos:position pos:line="60" pos:column="27"/></name></name></expr></argument>, <argument><expr><operator pos:line="60" pos:column="29">&amp;<pos:position pos:line="60" pos:column="34"/></operator><name><name pos:line="60" pos:column="30">buffer<pos:position pos:line="60" pos:column="36"/></name><index pos:line="60" pos:column="36">[<expr><name pos:line="60" pos:column="37">name_start_pos<pos:position pos:line="60" pos:column="51"/></name> <operator pos:line="60" pos:column="52">+<pos:position pos:line="60" pos:column="53"/></operator> <literal type="number" pos:line="60" pos:column="54">1<pos:position pos:line="60" pos:column="55"/></literal></expr>]<pos:position pos:line="60" pos:column="56"/></index></name></expr></argument>, <argument><expr><name pos:line="60" pos:column="58">name_len<pos:position pos:line="60" pos:column="66"/></name> <operator pos:line="60" pos:column="67">+<pos:position pos:line="60" pos:column="68"/></operator> <literal type="number" pos:line="60" pos:column="69">1<pos:position pos:line="60" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="60" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="72"/></expr_stmt>

	<if pos:line="62" pos:column="9">if <condition pos:line="62" pos:column="12">(<expr><operator pos:line="62" pos:column="13">(<pos:position pos:line="62" pos:column="14"/></operator><name pos:line="62" pos:column="14">buffer_len<pos:position pos:line="62" pos:column="24"/></name> <operator pos:line="62" pos:column="25">-<pos:position pos:line="62" pos:column="26"/></operator> <name pos:line="62" pos:column="27">name_end_pos<pos:position pos:line="62" pos:column="39"/></name><operator pos:line="62" pos:column="39">)<pos:position pos:line="62" pos:column="40"/></operator> <operator pos:line="62" pos:column="41">&lt;<pos:position pos:line="62" pos:column="45"/></operator> <literal type="number" pos:line="62" pos:column="43">2<pos:position pos:line="62" pos:column="44"/></literal></expr>)<pos:position pos:line="62" pos:column="45"/></condition><then pos:line="62" pos:column="45">
		<block type="pseudo"><return pos:line="63" pos:column="17">return <expr><operator pos:line="63" pos:column="24">(<pos:position pos:line="63" pos:column="25"/></operator><operator pos:line="63" pos:column="25">-<pos:position pos:line="63" pos:column="26"/></operator><literal type="number" pos:line="63" pos:column="26">1<pos:position pos:line="63" pos:column="27"/></literal><operator pos:line="63" pos:column="27">)<pos:position pos:line="63" pos:column="28"/></operator></expr>;<pos:position pos:line="63" pos:column="29"/></return></block></then></if>
	<expr_stmt><expr><name pos:line="64" pos:column="9">buffer_ptr<pos:position pos:line="64" pos:column="19"/></name> <operator pos:line="64" pos:column="20">=<pos:position pos:line="64" pos:column="21"/></operator> <operator pos:line="64" pos:column="22">&amp;<pos:position pos:line="64" pos:column="27"/></operator><name><name pos:line="64" pos:column="23">buffer<pos:position pos:line="64" pos:column="29"/></name><index pos:line="64" pos:column="29">[<expr><name pos:line="64" pos:column="30">name_end_pos<pos:position pos:line="64" pos:column="42"/></name> <operator pos:line="64" pos:column="43">+<pos:position pos:line="64" pos:column="44"/></operator> <literal type="number" pos:line="64" pos:column="45">2<pos:position pos:line="64" pos:column="46"/></literal></expr>]<pos:position pos:line="64" pos:column="47"/></index></name></expr>;<pos:position pos:line="64" pos:column="48"/></expr_stmt>

	<expr_stmt><expr><name pos:line="66" pos:column="9">fields_len<pos:position pos:line="66" pos:column="19"/></name> <operator pos:line="66" pos:column="20">=<pos:position pos:line="66" pos:column="21"/></operator> <call><name pos:line="66" pos:column="22">strsplit<pos:position pos:line="66" pos:column="30"/></name> <argument_list pos:line="66" pos:column="31">(<argument><expr><name pos:line="66" pos:column="32">buffer_ptr<pos:position pos:line="66" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="66" pos:column="44">fields<pos:position pos:line="66" pos:column="50"/></name></expr></argument>, <argument><expr><call><name pos:line="66" pos:column="52">STATIC_ARRAY_SIZE<pos:position pos:line="66" pos:column="69"/></name> <argument_list pos:line="66" pos:column="70">(<argument><expr><name pos:line="66" pos:column="71">fields<pos:position pos:line="66" pos:column="77"/></name></expr></argument>)<pos:position pos:line="66" pos:column="78"/></argument_list></call></expr></argument>)<pos:position pos:line="66" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="80"/></expr_stmt>
	<if pos:line="67" pos:column="9">if <condition pos:line="67" pos:column="12">(<expr><name pos:line="67" pos:column="13">fields_len<pos:position pos:line="67" pos:column="23"/></name> <operator pos:line="67" pos:column="24">&lt;<pos:position pos:line="67" pos:column="28"/></operator> <literal type="number" pos:line="67" pos:column="26">22<pos:position pos:line="67" pos:column="28"/></literal></expr>)<pos:position pos:line="67" pos:column="29"/></condition><then pos:line="67" pos:column="29">
	<block pos:line="68" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="69" pos:column="17">DEBUG<pos:position pos:line="69" pos:column="22"/></name> <argument_list pos:line="69" pos:column="23">(<argument><expr><literal type="string" pos:line="69" pos:column="24">"processes plugin: ps_read_process (pid = %i):"<pos:position pos:line="69" pos:column="71"/></literal>
				<literal type="string" pos:line="70" pos:column="33">" `%s' has only %i fields.."<pos:position pos:line="70" pos:column="61"/></literal></expr></argument>,
				<argument><expr><operator pos:line="71" pos:column="33">(<pos:position pos:line="71" pos:column="34"/></operator><name pos:line="71" pos:column="34">int<pos:position pos:line="71" pos:column="37"/></name><operator pos:line="71" pos:column="37">)<pos:position pos:line="71" pos:column="38"/></operator> <name pos:line="71" pos:column="39">pid<pos:position pos:line="71" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="71" pos:column="44">filename<pos:position pos:line="71" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="71" pos:column="54">fields_len<pos:position pos:line="71" pos:column="64"/></name></expr></argument>)<pos:position pos:line="71" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="66"/></expr_stmt>
		<return pos:line="72" pos:column="17">return <expr><operator pos:line="72" pos:column="24">(<pos:position pos:line="72" pos:column="25"/></operator><operator pos:line="72" pos:column="25">-<pos:position pos:line="72" pos:column="26"/></operator><literal type="number" pos:line="72" pos:column="26">1<pos:position pos:line="72" pos:column="27"/></literal><operator pos:line="72" pos:column="27">)<pos:position pos:line="72" pos:column="28"/></operator></expr>;<pos:position pos:line="72" pos:column="29"/></return>
	}<pos:position pos:line="73" pos:column="10"/></block></then></if>

	<expr_stmt><expr><operator pos:line="75" pos:column="9">*<pos:position pos:line="75" pos:column="10"/></operator><name pos:line="75" pos:column="10">state<pos:position pos:line="75" pos:column="15"/></name> <operator pos:line="75" pos:column="16">=<pos:position pos:line="75" pos:column="17"/></operator> <name><name pos:line="75" pos:column="18">fields<pos:position pos:line="75" pos:column="24"/></name><index pos:line="75" pos:column="24">[<expr><literal type="number" pos:line="75" pos:column="25">0<pos:position pos:line="75" pos:column="26"/></literal></expr>]<pos:position pos:line="75" pos:column="27"/></index><index pos:line="75" pos:column="27">[<expr><literal type="number" pos:line="75" pos:column="28">0<pos:position pos:line="75" pos:column="29"/></literal></expr>]<pos:position pos:line="75" pos:column="30"/></index></name></expr>;<pos:position pos:line="75" pos:column="31"/></expr_stmt>

	<if pos:line="77" pos:column="9">if <condition pos:line="77" pos:column="12">(<expr><operator pos:line="77" pos:column="13">*<pos:position pos:line="77" pos:column="14"/></operator><name pos:line="77" pos:column="14">state<pos:position pos:line="77" pos:column="19"/></name> <operator pos:line="77" pos:column="20">==<pos:position pos:line="77" pos:column="22"/></operator> <literal type="char" pos:line="77" pos:column="23">'Z'<pos:position pos:line="77" pos:column="26"/></literal></expr>)<pos:position pos:line="77" pos:column="27"/></condition><then pos:line="77" pos:column="27">
	<block pos:line="78" pos:column="9">{
		<expr_stmt><expr><name><name pos:line="79" pos:column="17">ps<pos:position pos:line="79" pos:column="19"/></name><operator pos:line="79" pos:column="19">-&gt;<pos:position pos:line="79" pos:column="24"/></operator><name pos:line="79" pos:column="21">num_lwp<pos:position pos:line="79" pos:column="28"/></name></name>  <operator pos:line="79" pos:column="30">=<pos:position pos:line="79" pos:column="31"/></operator> <literal type="number" pos:line="79" pos:column="32">0<pos:position pos:line="79" pos:column="33"/></literal></expr>;<pos:position pos:line="79" pos:column="34"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="80" pos:column="17">ps<pos:position pos:line="80" pos:column="19"/></name><operator pos:line="80" pos:column="19">-&gt;<pos:position pos:line="80" pos:column="24"/></operator><name pos:line="80" pos:column="21">num_proc<pos:position pos:line="80" pos:column="29"/></name></name> <operator pos:line="80" pos:column="30">=<pos:position pos:line="80" pos:column="31"/></operator> <literal type="number" pos:line="80" pos:column="32">0<pos:position pos:line="80" pos:column="33"/></literal></expr>;<pos:position pos:line="80" pos:column="34"/></expr_stmt>
	}<pos:position pos:line="81" pos:column="10"/></block></then>
	<else pos:line="82" pos:column="9">else
	<block pos:line="83" pos:column="9">{
		<if pos:line="84" pos:column="17">if <condition pos:line="84" pos:column="20">( <expr><operator pos:line="84" pos:column="22">(<pos:position pos:line="84" pos:column="23"/></operator><name><name pos:line="84" pos:column="23">ps<pos:position pos:line="84" pos:column="25"/></name><operator pos:line="84" pos:column="25">-&gt;<pos:position pos:line="84" pos:column="30"/></operator><name pos:line="84" pos:column="27">num_lwp<pos:position pos:line="84" pos:column="34"/></name></name> <operator pos:line="84" pos:column="35">=<pos:position pos:line="84" pos:column="36"/></operator> <call><name pos:line="84" pos:column="37">ps_read_tasks<pos:position pos:line="84" pos:column="50"/></name> <argument_list pos:line="84" pos:column="51">(<argument><expr><name pos:line="84" pos:column="52">pid<pos:position pos:line="84" pos:column="55"/></name></expr></argument>)<pos:position pos:line="84" pos:column="56"/></argument_list></call><operator pos:line="84" pos:column="56">)<pos:position pos:line="84" pos:column="57"/></operator> <operator pos:line="84" pos:column="58">==<pos:position pos:line="84" pos:column="60"/></operator> <operator pos:line="84" pos:column="61">-<pos:position pos:line="84" pos:column="62"/></operator><literal type="number" pos:line="84" pos:column="62">1<pos:position pos:line="84" pos:column="63"/></literal></expr> )<pos:position pos:line="84" pos:column="65"/></condition><then pos:line="84" pos:column="65">
		<block pos:line="85" pos:column="17">{
			<comment type="block" pos:line="86" pos:column="25">/* returns -1 =&gt; kernel 2.4 */</comment>
			<expr_stmt><expr><name><name pos:line="87" pos:column="25">ps<pos:position pos:line="87" pos:column="27"/></name><operator pos:line="87" pos:column="27">-&gt;<pos:position pos:line="87" pos:column="32"/></operator><name pos:line="87" pos:column="29">num_lwp<pos:position pos:line="87" pos:column="36"/></name></name> <operator pos:line="87" pos:column="37">=<pos:position pos:line="87" pos:column="38"/></operator> <literal type="number" pos:line="87" pos:column="39">1<pos:position pos:line="87" pos:column="40"/></literal></expr>;<pos:position pos:line="87" pos:column="41"/></expr_stmt>
		}<pos:position pos:line="88" pos:column="18"/></block></then></if>
		<expr_stmt><expr><name><name pos:line="89" pos:column="17">ps<pos:position pos:line="89" pos:column="19"/></name><operator pos:line="89" pos:column="19">-&gt;<pos:position pos:line="89" pos:column="24"/></operator><name pos:line="89" pos:column="21">num_proc<pos:position pos:line="89" pos:column="29"/></name></name> <operator pos:line="89" pos:column="30">=<pos:position pos:line="89" pos:column="31"/></operator> <literal type="number" pos:line="89" pos:column="32">1<pos:position pos:line="89" pos:column="33"/></literal></expr>;<pos:position pos:line="89" pos:column="34"/></expr_stmt>
	}<pos:position pos:line="90" pos:column="10"/></block></else></if>

	<comment type="block" pos:line="92" pos:column="9">/* Leave the rest at zero if this is only a zombi */</comment>
	<if pos:line="93" pos:column="9">if <condition pos:line="93" pos:column="12">(<expr><name><name pos:line="93" pos:column="13">ps<pos:position pos:line="93" pos:column="15"/></name><operator pos:line="93" pos:column="15">-&gt;<pos:position pos:line="93" pos:column="20"/></operator><name pos:line="93" pos:column="17">num_proc<pos:position pos:line="93" pos:column="25"/></name></name> <operator pos:line="93" pos:column="26">==<pos:position pos:line="93" pos:column="28"/></operator> <literal type="number" pos:line="93" pos:column="29">0<pos:position pos:line="93" pos:column="30"/></literal></expr>)<pos:position pos:line="93" pos:column="31"/></condition><then pos:line="93" pos:column="31">
	<block pos:line="94" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="95" pos:column="17">DEBUG<pos:position pos:line="95" pos:column="22"/></name> <argument_list pos:line="95" pos:column="23">(<argument><expr><literal type="string" pos:line="95" pos:column="24">"processes plugin: This is only a zombi: pid = %i; "<pos:position pos:line="95" pos:column="76"/></literal>
				<literal type="string" pos:line="96" pos:column="33">"name = %s;"<pos:position pos:line="96" pos:column="45"/></literal></expr></argument>, <argument><expr><name pos:line="96" pos:column="47">pid<pos:position pos:line="96" pos:column="50"/></name></expr></argument>, <argument><expr><name><name pos:line="96" pos:column="52">ps<pos:position pos:line="96" pos:column="54"/></name><operator pos:line="96" pos:column="54">-&gt;<pos:position pos:line="96" pos:column="59"/></operator><name pos:line="96" pos:column="56">name<pos:position pos:line="96" pos:column="60"/></name></name></expr></argument>)<pos:position pos:line="96" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="96" pos:column="62"/></expr_stmt>
		<return pos:line="97" pos:column="17">return <expr><operator pos:line="97" pos:column="24">(<pos:position pos:line="97" pos:column="25"/></operator><literal type="number" pos:line="97" pos:column="25">0<pos:position pos:line="97" pos:column="26"/></literal><operator pos:line="97" pos:column="26">)<pos:position pos:line="97" pos:column="27"/></operator></expr>;<pos:position pos:line="97" pos:column="28"/></return>
	}<pos:position pos:line="98" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="100" pos:column="9">cpu_user_counter<pos:position pos:line="100" pos:column="25"/></name>   <operator pos:line="100" pos:column="28">=<pos:position pos:line="100" pos:column="29"/></operator> <call><name pos:line="100" pos:column="30">atoll<pos:position pos:line="100" pos:column="35"/></name> <argument_list pos:line="100" pos:column="36">(<argument><expr><name><name pos:line="100" pos:column="37">fields<pos:position pos:line="100" pos:column="43"/></name><index pos:line="100" pos:column="43">[<expr><literal type="number" pos:line="100" pos:column="44">11<pos:position pos:line="100" pos:column="46"/></literal></expr>]<pos:position pos:line="100" pos:column="47"/></index></name></expr></argument>)<pos:position pos:line="100" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="100" pos:column="49"/></expr_stmt>
	<expr_stmt><expr><name pos:line="101" pos:column="9">cpu_system_counter<pos:position pos:line="101" pos:column="27"/></name> <operator pos:line="101" pos:column="28">=<pos:position pos:line="101" pos:column="29"/></operator> <call><name pos:line="101" pos:column="30">atoll<pos:position pos:line="101" pos:column="35"/></name> <argument_list pos:line="101" pos:column="36">(<argument><expr><name><name pos:line="101" pos:column="37">fields<pos:position pos:line="101" pos:column="43"/></name><index pos:line="101" pos:column="43">[<expr><literal type="number" pos:line="101" pos:column="44">12<pos:position pos:line="101" pos:column="46"/></literal></expr>]<pos:position pos:line="101" pos:column="47"/></index></name></expr></argument>)<pos:position pos:line="101" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="101" pos:column="49"/></expr_stmt>
	<expr_stmt><expr><name pos:line="102" pos:column="9">vmem_size<pos:position pos:line="102" pos:column="18"/></name>          <operator pos:line="102" pos:column="28">=<pos:position pos:line="102" pos:column="29"/></operator> <call><name pos:line="102" pos:column="30">atoll<pos:position pos:line="102" pos:column="35"/></name> <argument_list pos:line="102" pos:column="36">(<argument><expr><name><name pos:line="102" pos:column="37">fields<pos:position pos:line="102" pos:column="43"/></name><index pos:line="102" pos:column="43">[<expr><literal type="number" pos:line="102" pos:column="44">20<pos:position pos:line="102" pos:column="46"/></literal></expr>]<pos:position pos:line="102" pos:column="47"/></index></name></expr></argument>)<pos:position pos:line="102" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="102" pos:column="49"/></expr_stmt>
	<expr_stmt><expr><name pos:line="103" pos:column="9">vmem_rss<pos:position pos:line="103" pos:column="17"/></name>           <operator pos:line="103" pos:column="28">=<pos:position pos:line="103" pos:column="29"/></operator> <call><name pos:line="103" pos:column="30">atoll<pos:position pos:line="103" pos:column="35"/></name> <argument_list pos:line="103" pos:column="36">(<argument><expr><name><name pos:line="103" pos:column="37">fields<pos:position pos:line="103" pos:column="43"/></name><index pos:line="103" pos:column="43">[<expr><literal type="number" pos:line="103" pos:column="44">21<pos:position pos:line="103" pos:column="46"/></literal></expr>]<pos:position pos:line="103" pos:column="47"/></index></name></expr></argument>)<pos:position pos:line="103" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="103" pos:column="49"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="104" pos:column="9">ps<pos:position pos:line="104" pos:column="11"/></name><operator pos:line="104" pos:column="11">-&gt;<pos:position pos:line="104" pos:column="16"/></operator><name pos:line="104" pos:column="13">vmem_minflt_counter<pos:position pos:line="104" pos:column="32"/></name></name> <operator pos:line="104" pos:column="33">=<pos:position pos:line="104" pos:column="34"/></operator> <call><name pos:line="104" pos:column="35">atol<pos:position pos:line="104" pos:column="39"/></name> <argument_list pos:line="104" pos:column="40">(<argument><expr><name><name pos:line="104" pos:column="41">fields<pos:position pos:line="104" pos:column="47"/></name><index pos:line="104" pos:column="47">[<expr><literal type="number" pos:line="104" pos:column="48">7<pos:position pos:line="104" pos:column="49"/></literal></expr>]<pos:position pos:line="104" pos:column="50"/></index></name></expr></argument>)<pos:position pos:line="104" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="104" pos:column="52"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="105" pos:column="9">ps<pos:position pos:line="105" pos:column="11"/></name><operator pos:line="105" pos:column="11">-&gt;<pos:position pos:line="105" pos:column="16"/></operator><name pos:line="105" pos:column="13">vmem_majflt_counter<pos:position pos:line="105" pos:column="32"/></name></name> <operator pos:line="105" pos:column="33">=<pos:position pos:line="105" pos:column="34"/></operator> <call><name pos:line="105" pos:column="35">atol<pos:position pos:line="105" pos:column="39"/></name> <argument_list pos:line="105" pos:column="40">(<argument><expr><name><name pos:line="105" pos:column="41">fields<pos:position pos:line="105" pos:column="47"/></name><index pos:line="105" pos:column="47">[<expr><literal type="number" pos:line="105" pos:column="48">9<pos:position pos:line="105" pos:column="49"/></literal></expr>]<pos:position pos:line="105" pos:column="50"/></index></name></expr></argument>)<pos:position pos:line="105" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="105" pos:column="52"/></expr_stmt>

	<block pos:line="107" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="108" pos:column="17">unsigned<pos:position pos:line="108" pos:column="25"/></name> <name pos:line="108" pos:column="26">long<pos:position pos:line="108" pos:column="30"/></name> <name pos:line="108" pos:column="31">long<pos:position pos:line="108" pos:column="35"/></name></type> <name pos:line="108" pos:column="36">stack_start<pos:position pos:line="108" pos:column="47"/></name> <init pos:line="108" pos:column="48">= <expr><call><name pos:line="108" pos:column="50">atoll<pos:position pos:line="108" pos:column="55"/></name> <argument_list pos:line="108" pos:column="56">(<argument><expr><name><name pos:line="108" pos:column="57">fields<pos:position pos:line="108" pos:column="63"/></name><index pos:line="108" pos:column="63">[<expr><literal type="number" pos:line="108" pos:column="64">25<pos:position pos:line="108" pos:column="66"/></literal></expr>]<pos:position pos:line="108" pos:column="67"/></index></name></expr></argument>)<pos:position pos:line="108" pos:column="68"/></argument_list></call></expr></init></decl>;<pos:position pos:line="108" pos:column="69"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="109" pos:column="17">unsigned<pos:position pos:line="109" pos:column="25"/></name> <name pos:line="109" pos:column="26">long<pos:position pos:line="109" pos:column="30"/></name> <name pos:line="109" pos:column="31">long<pos:position pos:line="109" pos:column="35"/></name></type> <name pos:line="109" pos:column="36">stack_ptr<pos:position pos:line="109" pos:column="45"/></name>   <init pos:line="109" pos:column="48">= <expr><call><name pos:line="109" pos:column="50">atoll<pos:position pos:line="109" pos:column="55"/></name> <argument_list pos:line="109" pos:column="56">(<argument><expr><name><name pos:line="109" pos:column="57">fields<pos:position pos:line="109" pos:column="63"/></name><index pos:line="109" pos:column="63">[<expr><literal type="number" pos:line="109" pos:column="64">26<pos:position pos:line="109" pos:column="66"/></literal></expr>]<pos:position pos:line="109" pos:column="67"/></index></name></expr></argument>)<pos:position pos:line="109" pos:column="68"/></argument_list></call></expr></init></decl>;<pos:position pos:line="109" pos:column="69"/></decl_stmt>

		<expr_stmt><expr><name pos:line="111" pos:column="17">stack_size<pos:position pos:line="111" pos:column="27"/></name> <operator pos:line="111" pos:column="28">=<pos:position pos:line="111" pos:column="29"/></operator> <ternary><condition><expr><operator pos:line="111" pos:column="30">(<pos:position pos:line="111" pos:column="31"/></operator><name pos:line="111" pos:column="31">stack_start<pos:position pos:line="111" pos:column="42"/></name> <operator pos:line="111" pos:column="43">&gt;<pos:position pos:line="111" pos:column="47"/></operator> <name pos:line="111" pos:column="45">stack_ptr<pos:position pos:line="111" pos:column="54"/></name><operator pos:line="111" pos:column="54">)<pos:position pos:line="111" pos:column="55"/></operator></expr>
			?<pos:position pos:line="112" pos:column="26"/></condition><then pos:line="112" pos:column="26"> <expr><name pos:line="112" pos:column="27">stack_start<pos:position pos:line="112" pos:column="38"/></name> <operator pos:line="112" pos:column="39">-<pos:position pos:line="112" pos:column="40"/></operator> <name pos:line="112" pos:column="41">stack_ptr<pos:position pos:line="112" pos:column="50"/></name></expr>
			<pos:position pos:line="113" pos:column="4"/></then><else pos:line="113" pos:column="25">: <expr><name pos:line="113" pos:column="27">stack_ptr<pos:position pos:line="113" pos:column="36"/></name> <operator pos:line="113" pos:column="37">-<pos:position pos:line="113" pos:column="38"/></operator> <name pos:line="113" pos:column="39">stack_start<pos:position pos:line="113" pos:column="50"/></name></expr></else></ternary></expr>;<pos:position pos:line="113" pos:column="51"/></expr_stmt>
	}<pos:position pos:line="114" pos:column="10"/></block>

	<comment type="block" pos:line="116" pos:column="9">/* Convert jiffies to useconds */</comment>
	<expr_stmt><expr><name pos:line="117" pos:column="9">cpu_user_counter<pos:position pos:line="117" pos:column="25"/></name>   <operator pos:line="117" pos:column="28">=<pos:position pos:line="117" pos:column="29"/></operator> <name pos:line="117" pos:column="30">cpu_user_counter<pos:position pos:line="117" pos:column="46"/></name>   <operator pos:line="117" pos:column="49">*<pos:position pos:line="117" pos:column="50"/></operator> <literal type="number" pos:line="117" pos:column="51">1000000<pos:position pos:line="117" pos:column="58"/></literal> <operator pos:line="117" pos:column="59">/<pos:position pos:line="117" pos:column="60"/></operator> <name pos:line="117" pos:column="61">CONFIG_HZ<pos:position pos:line="117" pos:column="70"/></name></expr>;<pos:position pos:line="117" pos:column="71"/></expr_stmt>
	<expr_stmt><expr><name pos:line="118" pos:column="9">cpu_system_counter<pos:position pos:line="118" pos:column="27"/></name> <operator pos:line="118" pos:column="28">=<pos:position pos:line="118" pos:column="29"/></operator> <name pos:line="118" pos:column="30">cpu_system_counter<pos:position pos:line="118" pos:column="48"/></name> <operator pos:line="118" pos:column="49">*<pos:position pos:line="118" pos:column="50"/></operator> <literal type="number" pos:line="118" pos:column="51">1000000<pos:position pos:line="118" pos:column="58"/></literal> <operator pos:line="118" pos:column="59">/<pos:position pos:line="118" pos:column="60"/></operator> <name pos:line="118" pos:column="61">CONFIG_HZ<pos:position pos:line="118" pos:column="70"/></name></expr>;<pos:position pos:line="118" pos:column="71"/></expr_stmt>
	<expr_stmt><expr><name pos:line="119" pos:column="9">vmem_rss<pos:position pos:line="119" pos:column="17"/></name> <operator pos:line="119" pos:column="18">=<pos:position pos:line="119" pos:column="19"/></operator> <name pos:line="119" pos:column="20">vmem_rss<pos:position pos:line="119" pos:column="28"/></name> <operator pos:line="119" pos:column="29">*<pos:position pos:line="119" pos:column="30"/></operator> <name pos:line="119" pos:column="31">pagesize_g<pos:position pos:line="119" pos:column="41"/></name></expr>;<pos:position pos:line="119" pos:column="42"/></expr_stmt>

	<if pos:line="121" pos:column="9">if <condition pos:line="121" pos:column="12">( <expr><operator pos:line="121" pos:column="14">(<pos:position pos:line="121" pos:column="15"/></operator><call><name pos:line="121" pos:column="15">ps_read_vmem<pos:position pos:line="121" pos:column="27"/></name><argument_list pos:line="121" pos:column="27">(<argument><expr><name pos:line="121" pos:column="28">pid<pos:position pos:line="121" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="121" pos:column="33">ps<pos:position pos:line="121" pos:column="35"/></name></expr></argument>)<pos:position pos:line="121" pos:column="36"/></argument_list></call><operator pos:line="121" pos:column="36">)<pos:position pos:line="121" pos:column="37"/></operator> <operator pos:line="121" pos:column="38">==<pos:position pos:line="121" pos:column="40"/></operator> <name pos:line="121" pos:column="41">NULL<pos:position pos:line="121" pos:column="45"/></name></expr>)<pos:position pos:line="121" pos:column="46"/></condition><then pos:line="121" pos:column="46">
	<block pos:line="122" pos:column="9">{
		<comment type="block" pos:line="123" pos:column="17">/* No VMem data */</comment>
		<expr_stmt><expr><name><name pos:line="124" pos:column="17">ps<pos:position pos:line="124" pos:column="19"/></name><operator pos:line="124" pos:column="19">-&gt;<pos:position pos:line="124" pos:column="24"/></operator><name pos:line="124" pos:column="21">vmem_data<pos:position pos:line="124" pos:column="30"/></name></name> <operator pos:line="124" pos:column="31">=<pos:position pos:line="124" pos:column="32"/></operator> <operator pos:line="124" pos:column="33">-<pos:position pos:line="124" pos:column="34"/></operator><literal type="number" pos:line="124" pos:column="34">1<pos:position pos:line="124" pos:column="35"/></literal></expr>;<pos:position pos:line="124" pos:column="36"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="125" pos:column="17">ps<pos:position pos:line="125" pos:column="19"/></name><operator pos:line="125" pos:column="19">-&gt;<pos:position pos:line="125" pos:column="24"/></operator><name pos:line="125" pos:column="21">vmem_code<pos:position pos:line="125" pos:column="30"/></name></name> <operator pos:line="125" pos:column="31">=<pos:position pos:line="125" pos:column="32"/></operator> <operator pos:line="125" pos:column="33">-<pos:position pos:line="125" pos:column="34"/></operator><literal type="number" pos:line="125" pos:column="34">1<pos:position pos:line="125" pos:column="35"/></literal></expr>;<pos:position pos:line="125" pos:column="36"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="126" pos:column="17">DEBUG<pos:position pos:line="126" pos:column="22"/></name><argument_list pos:line="126" pos:column="22">(<argument><expr><literal type="string" pos:line="126" pos:column="23">"ps_read_process: did not get vmem data for pid %i"<pos:position pos:line="126" pos:column="74"/></literal></expr></argument>,<argument><expr><name pos:line="126" pos:column="75">pid<pos:position pos:line="126" pos:column="78"/></name></expr></argument>)<pos:position pos:line="126" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="126" pos:column="80"/></expr_stmt>
	}<pos:position pos:line="127" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name><name pos:line="129" pos:column="9">ps<pos:position pos:line="129" pos:column="11"/></name><operator pos:line="129" pos:column="11">-&gt;<pos:position pos:line="129" pos:column="16"/></operator><name pos:line="129" pos:column="13">cpu_user_counter<pos:position pos:line="129" pos:column="29"/></name></name> <operator pos:line="129" pos:column="30">=<pos:position pos:line="129" pos:column="31"/></operator> <name pos:line="129" pos:column="32">cpu_user_counter<pos:position pos:line="129" pos:column="48"/></name></expr>;<pos:position pos:line="129" pos:column="49"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="130" pos:column="9">ps<pos:position pos:line="130" pos:column="11"/></name><operator pos:line="130" pos:column="11">-&gt;<pos:position pos:line="130" pos:column="16"/></operator><name pos:line="130" pos:column="13">cpu_system_counter<pos:position pos:line="130" pos:column="31"/></name></name> <operator pos:line="130" pos:column="32">=<pos:position pos:line="130" pos:column="33"/></operator> <name pos:line="130" pos:column="34">cpu_system_counter<pos:position pos:line="130" pos:column="52"/></name></expr>;<pos:position pos:line="130" pos:column="53"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="131" pos:column="9">ps<pos:position pos:line="131" pos:column="11"/></name><operator pos:line="131" pos:column="11">-&gt;<pos:position pos:line="131" pos:column="16"/></operator><name pos:line="131" pos:column="13">vmem_size<pos:position pos:line="131" pos:column="22"/></name></name> <operator pos:line="131" pos:column="23">=<pos:position pos:line="131" pos:column="24"/></operator> <operator pos:line="131" pos:column="25">(<pos:position pos:line="131" pos:column="26"/></operator><name pos:line="131" pos:column="26">unsigned<pos:position pos:line="131" pos:column="34"/></name> <name pos:line="131" pos:column="35">long<pos:position pos:line="131" pos:column="39"/></name><operator pos:line="131" pos:column="39">)<pos:position pos:line="131" pos:column="40"/></operator> <name pos:line="131" pos:column="41">vmem_size<pos:position pos:line="131" pos:column="50"/></name></expr>;<pos:position pos:line="131" pos:column="51"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="132" pos:column="9">ps<pos:position pos:line="132" pos:column="11"/></name><operator pos:line="132" pos:column="11">-&gt;<pos:position pos:line="132" pos:column="16"/></operator><name pos:line="132" pos:column="13">vmem_rss<pos:position pos:line="132" pos:column="21"/></name></name> <operator pos:line="132" pos:column="22">=<pos:position pos:line="132" pos:column="23"/></operator> <operator pos:line="132" pos:column="24">(<pos:position pos:line="132" pos:column="25"/></operator><name pos:line="132" pos:column="25">unsigned<pos:position pos:line="132" pos:column="33"/></name> <name pos:line="132" pos:column="34">long<pos:position pos:line="132" pos:column="38"/></name><operator pos:line="132" pos:column="38">)<pos:position pos:line="132" pos:column="39"/></operator> <name pos:line="132" pos:column="40">vmem_rss<pos:position pos:line="132" pos:column="48"/></name></expr>;<pos:position pos:line="132" pos:column="49"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="133" pos:column="9">ps<pos:position pos:line="133" pos:column="11"/></name><operator pos:line="133" pos:column="11">-&gt;<pos:position pos:line="133" pos:column="16"/></operator><name pos:line="133" pos:column="13">stack_size<pos:position pos:line="133" pos:column="23"/></name></name> <operator pos:line="133" pos:column="24">=<pos:position pos:line="133" pos:column="25"/></operator> <operator pos:line="133" pos:column="26">(<pos:position pos:line="133" pos:column="27"/></operator><name pos:line="133" pos:column="27">unsigned<pos:position pos:line="133" pos:column="35"/></name> <name pos:line="133" pos:column="36">long<pos:position pos:line="133" pos:column="40"/></name><operator pos:line="133" pos:column="40">)<pos:position pos:line="133" pos:column="41"/></operator> <name pos:line="133" pos:column="42">stack_size<pos:position pos:line="133" pos:column="52"/></name></expr>;<pos:position pos:line="133" pos:column="53"/></expr_stmt>

	<if pos:line="135" pos:column="9">if <condition pos:line="135" pos:column="12">( <expr><operator pos:line="135" pos:column="14">(<pos:position pos:line="135" pos:column="15"/></operator><call><name pos:line="135" pos:column="15">ps_read_io<pos:position pos:line="135" pos:column="25"/></name> <argument_list pos:line="135" pos:column="26">(<argument><expr><name pos:line="135" pos:column="27">pid<pos:position pos:line="135" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="135" pos:column="32">ps<pos:position pos:line="135" pos:column="34"/></name></expr></argument>)<pos:position pos:line="135" pos:column="35"/></argument_list></call><operator pos:line="135" pos:column="35">)<pos:position pos:line="135" pos:column="36"/></operator> <operator pos:line="135" pos:column="37">==<pos:position pos:line="135" pos:column="39"/></operator> <name pos:line="135" pos:column="40">NULL<pos:position pos:line="135" pos:column="44"/></name></expr>)<pos:position pos:line="135" pos:column="45"/></condition><then pos:line="135" pos:column="45">
	<block pos:line="136" pos:column="9">{
		<comment type="block" pos:line="137" pos:column="17">/* no io data */</comment>
		<expr_stmt><expr><name><name pos:line="138" pos:column="17">ps<pos:position pos:line="138" pos:column="19"/></name><operator pos:line="138" pos:column="19">-&gt;<pos:position pos:line="138" pos:column="24"/></operator><name pos:line="138" pos:column="21">io_rchar<pos:position pos:line="138" pos:column="29"/></name></name> <operator pos:line="138" pos:column="30">=<pos:position pos:line="138" pos:column="31"/></operator> <operator pos:line="138" pos:column="32">-<pos:position pos:line="138" pos:column="33"/></operator><literal type="number" pos:line="138" pos:column="33">1<pos:position pos:line="138" pos:column="34"/></literal></expr>;<pos:position pos:line="138" pos:column="35"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="139" pos:column="17">ps<pos:position pos:line="139" pos:column="19"/></name><operator pos:line="139" pos:column="19">-&gt;<pos:position pos:line="139" pos:column="24"/></operator><name pos:line="139" pos:column="21">io_wchar<pos:position pos:line="139" pos:column="29"/></name></name> <operator pos:line="139" pos:column="30">=<pos:position pos:line="139" pos:column="31"/></operator> <operator pos:line="139" pos:column="32">-<pos:position pos:line="139" pos:column="33"/></operator><literal type="number" pos:line="139" pos:column="33">1<pos:position pos:line="139" pos:column="34"/></literal></expr>;<pos:position pos:line="139" pos:column="35"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="140" pos:column="17">ps<pos:position pos:line="140" pos:column="19"/></name><operator pos:line="140" pos:column="19">-&gt;<pos:position pos:line="140" pos:column="24"/></operator><name pos:line="140" pos:column="21">io_syscr<pos:position pos:line="140" pos:column="29"/></name></name> <operator pos:line="140" pos:column="30">=<pos:position pos:line="140" pos:column="31"/></operator> <operator pos:line="140" pos:column="32">-<pos:position pos:line="140" pos:column="33"/></operator><literal type="number" pos:line="140" pos:column="33">1<pos:position pos:line="140" pos:column="34"/></literal></expr>;<pos:position pos:line="140" pos:column="35"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="141" pos:column="17">ps<pos:position pos:line="141" pos:column="19"/></name><operator pos:line="141" pos:column="19">-&gt;<pos:position pos:line="141" pos:column="24"/></operator><name pos:line="141" pos:column="21">io_syscw<pos:position pos:line="141" pos:column="29"/></name></name> <operator pos:line="141" pos:column="30">=<pos:position pos:line="141" pos:column="31"/></operator> <operator pos:line="141" pos:column="32">-<pos:position pos:line="141" pos:column="33"/></operator><literal type="number" pos:line="141" pos:column="33">1<pos:position pos:line="141" pos:column="34"/></literal></expr>;<pos:position pos:line="141" pos:column="35"/></expr_stmt>

		<expr_stmt><expr><call><name pos:line="143" pos:column="17">DEBUG<pos:position pos:line="143" pos:column="22"/></name><argument_list pos:line="143" pos:column="22">(<argument><expr><literal type="string" pos:line="143" pos:column="23">"ps_read_process: not get io data for pid %i"<pos:position pos:line="143" pos:column="68"/></literal></expr></argument>,<argument><expr><name pos:line="143" pos:column="69">pid<pos:position pos:line="143" pos:column="72"/></name></expr></argument>)<pos:position pos:line="143" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="143" pos:column="74"/></expr_stmt>
	}<pos:position pos:line="144" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="146" pos:column="9">/* success */</comment>
	<return pos:line="147" pos:column="9">return <expr><operator pos:line="147" pos:column="16">(<pos:position pos:line="147" pos:column="17"/></operator><literal type="number" pos:line="147" pos:column="17">0<pos:position pos:line="147" pos:column="18"/></literal><operator pos:line="147" pos:column="18">)<pos:position pos:line="147" pos:column="19"/></operator></expr>;<pos:position pos:line="147" pos:column="20"/></return>
}<pos:position pos:line="148" pos:column="2"/></block></function></unit>
