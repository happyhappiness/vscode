<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1205_collectd-5.6.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">change_bin_width<pos:position pos:line="1" pos:column="29"/></name> <parameter_list pos:line="1" pos:column="30">(<parameter><decl><type><name pos:line="1" pos:column="31">latency_counter_t<pos:position pos:line="1" pos:column="48"/></name> <modifier pos:line="1" pos:column="49">*<pos:position pos:line="1" pos:column="50"/></modifier></type><name pos:line="1" pos:column="50">lc<pos:position pos:line="1" pos:column="52"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="54">cdtime_t<pos:position pos:line="1" pos:column="62"/></name></type> <name pos:line="1" pos:column="63">latency<pos:position pos:line="1" pos:column="70"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="71"/></parameter_list> <comment type="block" pos:line="1" pos:column="72">/* {{{ */</comment>
<block pos:line="2" pos:column="1">{
  <comment type="block" pos:line="3" pos:column="3">/* This function is called because the new value is above histogram's range.
   * First find the required bin width:
   *           requiredBinWidth = (value + 1) / numBins
   * then get the next nearest power of 2
   *           newBinWidth = 2^(ceil(log2(requiredBinWidth)))
   */</comment>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">double<pos:position pos:line="9" pos:column="9"/></name></type> <name pos:line="9" pos:column="10">required_bin_width<pos:position pos:line="9" pos:column="28"/></name> <init pos:line="9" pos:column="29">= <expr><operator pos:line="9" pos:column="31">(<pos:position pos:line="9" pos:column="32"/></operator><call pos:line="9" pos:column="32">(<name pos:line="9" pos:column="33">double<pos:position pos:line="9" pos:column="39"/></name>) <argument_list pos:line="9" pos:column="41">(<argument><expr><name pos:line="9" pos:column="42">latency<pos:position pos:line="9" pos:column="49"/></name> <operator pos:line="9" pos:column="50">+<pos:position pos:line="9" pos:column="51"/></operator> <literal type="number" pos:line="9" pos:column="52">1<pos:position pos:line="9" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="54"/></argument_list></call><operator pos:line="9" pos:column="54">)<pos:position pos:line="9" pos:column="55"/></operator> <operator pos:line="9" pos:column="56">/<pos:position pos:line="9" pos:column="57"/></operator> <operator pos:line="9" pos:column="58">(<pos:position pos:line="9" pos:column="59"/></operator><operator pos:line="9" pos:column="59">(<pos:position pos:line="9" pos:column="60"/></operator><name pos:line="9" pos:column="60">double<pos:position pos:line="9" pos:column="66"/></name><operator pos:line="9" pos:column="66">)<pos:position pos:line="9" pos:column="67"/></operator> <name pos:line="9" pos:column="68">HISTOGRAM_NUM_BINS<pos:position pos:line="9" pos:column="86"/></name><operator pos:line="9" pos:column="86">)<pos:position pos:line="9" pos:column="87"/></operator></expr></init></decl>;<pos:position pos:line="9" pos:column="88"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">double<pos:position pos:line="10" pos:column="9"/></name></type> <name pos:line="10" pos:column="10">required_bin_width_logbase2<pos:position pos:line="10" pos:column="37"/></name> <init pos:line="10" pos:column="38">= <expr><call><name pos:line="10" pos:column="40">log<pos:position pos:line="10" pos:column="43"/></name> <argument_list pos:line="10" pos:column="44">(<argument><expr><name pos:line="10" pos:column="45">required_bin_width<pos:position pos:line="10" pos:column="63"/></name></expr></argument>)<pos:position pos:line="10" pos:column="64"/></argument_list></call> <operator pos:line="10" pos:column="65">/<pos:position pos:line="10" pos:column="66"/></operator> <call><name pos:line="10" pos:column="67">log<pos:position pos:line="10" pos:column="70"/></name> <argument_list pos:line="10" pos:column="71">(<argument><expr><literal type="number" pos:line="10" pos:column="72">2.0<pos:position pos:line="10" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="76"/></argument_list></call></expr></init></decl>;<pos:position pos:line="10" pos:column="77"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="11" pos:column="3">cdtime_t<pos:position pos:line="11" pos:column="11"/></name></type> <name pos:line="11" pos:column="12">new_bin_width<pos:position pos:line="11" pos:column="25"/></name> <init pos:line="11" pos:column="26">= <expr><call pos:line="11" pos:column="28">(<name pos:line="11" pos:column="29">cdtime_t<pos:position pos:line="11" pos:column="37"/></name>) <argument_list pos:line="11" pos:column="39">(<argument><expr><call><name pos:line="11" pos:column="40">pow<pos:position pos:line="11" pos:column="43"/></name> <argument_list pos:line="11" pos:column="44">(<argument><expr><literal type="number" pos:line="11" pos:column="45">2.0<pos:position pos:line="11" pos:column="48"/></literal></expr></argument>, <argument><expr><call><name pos:line="11" pos:column="50">ceil<pos:position pos:line="11" pos:column="54"/></name> <argument_list pos:line="11" pos:column="55">(<argument><expr><name pos:line="11" pos:column="56">required_bin_width_logbase2<pos:position pos:line="11" pos:column="83"/></name></expr></argument>)<pos:position pos:line="11" pos:column="84"/></argument_list></call></expr></argument>)<pos:position pos:line="11" pos:column="85"/></argument_list></call> <operator pos:line="11" pos:column="86">+<pos:position pos:line="11" pos:column="87"/></operator> <literal type="number" pos:line="11" pos:column="88">.5<pos:position pos:line="11" pos:column="90"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="91"/></argument_list></call></expr></init></decl>;<pos:position pos:line="11" pos:column="92"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="12" pos:column="3">cdtime_t<pos:position pos:line="12" pos:column="11"/></name></type> <name pos:line="12" pos:column="12">old_bin_width<pos:position pos:line="12" pos:column="25"/></name> <init pos:line="12" pos:column="26">= <expr><name><name pos:line="12" pos:column="28">lc<pos:position pos:line="12" pos:column="30"/></name><operator pos:line="12" pos:column="30">-&gt;<pos:position pos:line="12" pos:column="35"/></operator><name pos:line="12" pos:column="32">bin_width<pos:position pos:line="12" pos:column="41"/></name></name></expr></init></decl>;<pos:position pos:line="12" pos:column="42"/></decl_stmt>

  <expr_stmt><expr><name><name pos:line="14" pos:column="3">lc<pos:position pos:line="14" pos:column="5"/></name><operator pos:line="14" pos:column="5">-&gt;<pos:position pos:line="14" pos:column="10"/></operator><name pos:line="14" pos:column="7">bin_width<pos:position pos:line="14" pos:column="16"/></name></name> <operator pos:line="14" pos:column="17">=<pos:position pos:line="14" pos:column="18"/></operator> <name pos:line="14" pos:column="19">new_bin_width<pos:position pos:line="14" pos:column="32"/></name></expr>;<pos:position pos:line="14" pos:column="33"/></expr_stmt>

  <comment type="block" pos:line="16" pos:column="3">/* bin_width has been increased, now iterate through all bins and move the
   * old bin's count to new bin. */</comment>
  <if pos:line="18" pos:column="3">if <condition pos:line="18" pos:column="6">(<expr><name><name pos:line="18" pos:column="7">lc<pos:position pos:line="18" pos:column="9"/></name><operator pos:line="18" pos:column="9">-&gt;<pos:position pos:line="18" pos:column="14"/></operator><name pos:line="18" pos:column="11">num<pos:position pos:line="18" pos:column="14"/></name></name> <operator pos:line="18" pos:column="15">&gt;<pos:position pos:line="18" pos:column="19"/></operator> <literal type="number" pos:line="18" pos:column="17">0<pos:position pos:line="18" pos:column="18"/></literal></expr>)<pos:position pos:line="18" pos:column="19"/></condition><then pos:line="18" pos:column="19"> <comment type="line" pos:line="18" pos:column="20">// if the histogram has data then iterate else skip</comment>
  <block pos:line="19" pos:column="3">{
      <decl_stmt><decl><type><name pos:line="20" pos:column="7">double<pos:position pos:line="20" pos:column="13"/></name></type> <name pos:line="20" pos:column="14">width_change_ratio<pos:position pos:line="20" pos:column="32"/></name> <init pos:line="20" pos:column="33">= <expr><operator pos:line="20" pos:column="35">(<pos:position pos:line="20" pos:column="36"/></operator><operator pos:line="20" pos:column="36">(<pos:position pos:line="20" pos:column="37"/></operator><name pos:line="20" pos:column="37">double<pos:position pos:line="20" pos:column="43"/></name><operator pos:line="20" pos:column="43">)<pos:position pos:line="20" pos:column="44"/></operator> <name pos:line="20" pos:column="45">old_bin_width<pos:position pos:line="20" pos:column="58"/></name><operator pos:line="20" pos:column="58">)<pos:position pos:line="20" pos:column="59"/></operator> <operator pos:line="20" pos:column="60">/<pos:position pos:line="20" pos:column="61"/></operator> <operator pos:line="20" pos:column="62">(<pos:position pos:line="20" pos:column="63"/></operator><operator pos:line="20" pos:column="63">(<pos:position pos:line="20" pos:column="64"/></operator><name pos:line="20" pos:column="64">double<pos:position pos:line="20" pos:column="70"/></name><operator pos:line="20" pos:column="70">)<pos:position pos:line="20" pos:column="71"/></operator> <name pos:line="20" pos:column="72">new_bin_width<pos:position pos:line="20" pos:column="85"/></name><operator pos:line="20" pos:column="85">)<pos:position pos:line="20" pos:column="86"/></operator></expr></init></decl>;<pos:position pos:line="20" pos:column="87"/></decl_stmt>

      <for pos:line="22" pos:column="7">for <control pos:line="22" pos:column="11">(<init><decl><type><name pos:line="22" pos:column="12">size_t<pos:position pos:line="22" pos:column="18"/></name></type> <name pos:line="22" pos:column="19">i<pos:position pos:line="22" pos:column="20"/></name> <init pos:line="22" pos:column="21">= <expr><literal type="number" pos:line="22" pos:column="23">0<pos:position pos:line="22" pos:column="24"/></literal></expr></init></decl>;<pos:position pos:line="22" pos:column="25"/></init> <condition><expr><name pos:line="22" pos:column="26">i<pos:position pos:line="22" pos:column="27"/></name> <operator pos:line="22" pos:column="28">&lt;<pos:position pos:line="22" pos:column="32"/></operator> <name pos:line="22" pos:column="30">HISTOGRAM_NUM_BINS<pos:position pos:line="22" pos:column="48"/></name></expr>;<pos:position pos:line="22" pos:column="49"/></condition> <incr><expr><name pos:line="22" pos:column="50">i<pos:position pos:line="22" pos:column="51"/></name><operator pos:line="22" pos:column="51">++<pos:position pos:line="22" pos:column="53"/></operator></expr></incr>)<pos:position pos:line="22" pos:column="54"/></control>
      <block pos:line="23" pos:column="7">{
         <decl_stmt><decl><type><name pos:line="24" pos:column="10">size_t<pos:position pos:line="24" pos:column="16"/></name></type> <name pos:line="24" pos:column="17">new_bin<pos:position pos:line="24" pos:column="24"/></name> <init pos:line="24" pos:column="25">= <expr><call pos:line="24" pos:column="27">(<name pos:line="24" pos:column="28">size_t<pos:position pos:line="24" pos:column="34"/></name>) <argument_list pos:line="24" pos:column="36">(<argument><expr><operator pos:line="24" pos:column="37">(<pos:position pos:line="24" pos:column="38"/></operator><operator pos:line="24" pos:column="38">(<pos:position pos:line="24" pos:column="39"/></operator><name pos:line="24" pos:column="39">double<pos:position pos:line="24" pos:column="45"/></name><operator pos:line="24" pos:column="45">)<pos:position pos:line="24" pos:column="46"/></operator> <name pos:line="24" pos:column="47">i<pos:position pos:line="24" pos:column="48"/></name><operator pos:line="24" pos:column="48">)<pos:position pos:line="24" pos:column="49"/></operator> <operator pos:line="24" pos:column="50">*<pos:position pos:line="24" pos:column="51"/></operator> <name pos:line="24" pos:column="52">width_change_ratio<pos:position pos:line="24" pos:column="70"/></name></expr></argument>)<pos:position pos:line="24" pos:column="71"/></argument_list></call></expr></init></decl>;<pos:position pos:line="24" pos:column="72"/></decl_stmt>
         <if pos:line="25" pos:column="10">if <condition pos:line="25" pos:column="13">(<expr><name pos:line="25" pos:column="14">i<pos:position pos:line="25" pos:column="15"/></name> <operator pos:line="25" pos:column="16">==<pos:position pos:line="25" pos:column="18"/></operator> <name pos:line="25" pos:column="19">new_bin<pos:position pos:line="25" pos:column="26"/></name></expr>)<pos:position pos:line="25" pos:column="27"/></condition><then pos:line="25" pos:column="27">
             <block type="pseudo"><continue pos:line="26" pos:column="14">continue;<pos:position pos:line="26" pos:column="23"/></continue></block></then></if>
         <expr_stmt><expr><call><name pos:line="27" pos:column="10">assert<pos:position pos:line="27" pos:column="16"/></name> <argument_list pos:line="27" pos:column="17">(<argument><expr><name pos:line="27" pos:column="18">new_bin<pos:position pos:line="27" pos:column="25"/></name> <operator pos:line="27" pos:column="26">&lt;<pos:position pos:line="27" pos:column="30"/></operator> <name pos:line="27" pos:column="28">i<pos:position pos:line="27" pos:column="29"/></name></expr></argument>)<pos:position pos:line="27" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="31"/></expr_stmt>

         <expr_stmt><expr><name><name pos:line="29" pos:column="10">lc<pos:position pos:line="29" pos:column="12"/></name><operator pos:line="29" pos:column="12">-&gt;<pos:position pos:line="29" pos:column="17"/></operator><name pos:line="29" pos:column="14">histogram<pos:position pos:line="29" pos:column="23"/></name><index pos:line="29" pos:column="23">[<expr><name pos:line="29" pos:column="24">new_bin<pos:position pos:line="29" pos:column="31"/></name></expr>]<pos:position pos:line="29" pos:column="32"/></index></name> <operator pos:line="29" pos:column="33">+=<pos:position pos:line="29" pos:column="35"/></operator> <name><name pos:line="29" pos:column="36">lc<pos:position pos:line="29" pos:column="38"/></name><operator pos:line="29" pos:column="38">-&gt;<pos:position pos:line="29" pos:column="43"/></operator><name pos:line="29" pos:column="40">histogram<pos:position pos:line="29" pos:column="49"/></name><index pos:line="29" pos:column="49">[<expr><name pos:line="29" pos:column="50">i<pos:position pos:line="29" pos:column="51"/></name></expr>]<pos:position pos:line="29" pos:column="52"/></index></name></expr>;<pos:position pos:line="29" pos:column="53"/></expr_stmt>
         <expr_stmt><expr><name><name pos:line="30" pos:column="10">lc<pos:position pos:line="30" pos:column="12"/></name><operator pos:line="30" pos:column="12">-&gt;<pos:position pos:line="30" pos:column="17"/></operator><name pos:line="30" pos:column="14">histogram<pos:position pos:line="30" pos:column="23"/></name><index pos:line="30" pos:column="23">[<expr><name pos:line="30" pos:column="24">i<pos:position pos:line="30" pos:column="25"/></name></expr>]<pos:position pos:line="30" pos:column="26"/></index></name> <operator pos:line="30" pos:column="27">=<pos:position pos:line="30" pos:column="28"/></operator> <literal type="number" pos:line="30" pos:column="29">0<pos:position pos:line="30" pos:column="30"/></literal></expr>;<pos:position pos:line="30" pos:column="31"/></expr_stmt>
      }<pos:position pos:line="31" pos:column="8"/></block></for>
  }<pos:position pos:line="32" pos:column="4"/></block></then></if>

  <expr_stmt><expr><call><name pos:line="34" pos:column="3">DEBUG<pos:position pos:line="34" pos:column="8"/></name><argument_list pos:line="34" pos:column="8">(<argument><expr><literal type="string" pos:line="34" pos:column="9">"utils_latency: change_bin_width: latency = %.3f; "<pos:position pos:line="34" pos:column="60"/></literal>
      <literal type="string" pos:line="35" pos:column="7">"old_bin_width = %.3f; new_bin_width = %.3f;"<pos:position pos:line="35" pos:column="52"/></literal></expr></argument>,
      <argument><expr><call><name pos:line="36" pos:column="7">CDTIME_T_TO_DOUBLE<pos:position pos:line="36" pos:column="25"/></name> <argument_list pos:line="36" pos:column="26">(<argument><expr><name pos:line="36" pos:column="27">latency<pos:position pos:line="36" pos:column="34"/></name></expr></argument>)<pos:position pos:line="36" pos:column="35"/></argument_list></call></expr></argument>,
      <argument><expr><call><name pos:line="37" pos:column="7">CDTIME_T_TO_DOUBLE<pos:position pos:line="37" pos:column="25"/></name> <argument_list pos:line="37" pos:column="26">(<argument><expr><name pos:line="37" pos:column="27">old_bin_width<pos:position pos:line="37" pos:column="40"/></name></expr></argument>)<pos:position pos:line="37" pos:column="41"/></argument_list></call></expr></argument>,
      <argument><expr><call><name pos:line="38" pos:column="7">CDTIME_T_TO_DOUBLE<pos:position pos:line="38" pos:column="25"/></name> <argument_list pos:line="38" pos:column="26">(<argument><expr><name pos:line="38" pos:column="27">new_bin_width<pos:position pos:line="38" pos:column="40"/></name></expr></argument>)<pos:position pos:line="38" pos:column="41"/></argument_list></call></expr></argument>)<pos:position pos:line="38" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="43"/></expr_stmt>
}<pos:position pos:line="39" pos:column="2"/></block></function></unit>
