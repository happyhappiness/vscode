<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1703_collectd-5.7.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">statsd_network_init<pos:position pos:line="1" pos:column="31"/></name><parameter_list pos:line="1" pos:column="31">(<parameter><decl><type><name><name pos:line="1" pos:column="32">struct<pos:position pos:line="1" pos:column="38"/></name> <name pos:line="1" pos:column="39">pollfd<pos:position pos:line="1" pos:column="45"/></name></name> <modifier pos:line="1" pos:column="46">*<pos:position pos:line="1" pos:column="47"/></modifier><modifier pos:line="1" pos:column="47">*<pos:position pos:line="1" pos:column="48"/></modifier></type><name pos:line="1" pos:column="48">ret_fds<pos:position pos:line="1" pos:column="55"/></name></decl></parameter>, <comment type="block" pos:line="1" pos:column="57">/* {{{ */</comment>
                               <parameter><decl><type><name pos:line="2" pos:column="32">size_t<pos:position pos:line="2" pos:column="38"/></name> <modifier pos:line="2" pos:column="39">*<pos:position pos:line="2" pos:column="40"/></modifier></type><name pos:line="2" pos:column="40">ret_fds_num<pos:position pos:line="2" pos:column="51"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="52"/></parameter_list> <block pos:line="2" pos:column="53">{
  <decl_stmt><decl><type><name><name pos:line="3" pos:column="3">struct<pos:position pos:line="3" pos:column="9"/></name> <name pos:line="3" pos:column="10">pollfd<pos:position pos:line="3" pos:column="16"/></name></name> <modifier pos:line="3" pos:column="17">*<pos:position pos:line="3" pos:column="18"/></modifier></type><name pos:line="3" pos:column="18">fds<pos:position pos:line="3" pos:column="21"/></name> <init pos:line="3" pos:column="22">= <expr><name pos:line="3" pos:column="24">NULL<pos:position pos:line="3" pos:column="28"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="29"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">size_t<pos:position pos:line="4" pos:column="9"/></name></type> <name pos:line="4" pos:column="10">fds_num<pos:position pos:line="4" pos:column="17"/></name> <init pos:line="4" pos:column="18">= <expr><literal type="number" pos:line="4" pos:column="20">0<pos:position pos:line="4" pos:column="21"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="22"/></decl_stmt>

  <decl_stmt><decl><type><name><name pos:line="6" pos:column="3">struct<pos:position pos:line="6" pos:column="9"/></name> <name pos:line="6" pos:column="10">addrinfo<pos:position pos:line="6" pos:column="18"/></name></name> <modifier pos:line="6" pos:column="19">*<pos:position pos:line="6" pos:column="20"/></modifier></type><name pos:line="6" pos:column="20">ai_list<pos:position pos:line="6" pos:column="27"/></name></decl>;<pos:position pos:line="6" pos:column="28"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">int<pos:position pos:line="7" pos:column="6"/></name></type> <name pos:line="7" pos:column="7">status<pos:position pos:line="7" pos:column="13"/></name></decl>;<pos:position pos:line="7" pos:column="14"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="9" pos:column="3">char<pos:position pos:line="9" pos:column="7"/></name> <specifier pos:line="9" pos:column="8">const<pos:position pos:line="9" pos:column="13"/></specifier> <modifier pos:line="9" pos:column="14">*<pos:position pos:line="9" pos:column="15"/></modifier></type><name pos:line="9" pos:column="15">node<pos:position pos:line="9" pos:column="19"/></name> <init pos:line="9" pos:column="20">= <expr><ternary><condition><expr><operator pos:line="9" pos:column="22">(<pos:position pos:line="9" pos:column="23"/></operator><name pos:line="9" pos:column="23">conf_node<pos:position pos:line="9" pos:column="32"/></name> <operator pos:line="9" pos:column="33">!=<pos:position pos:line="9" pos:column="35"/></operator> <name pos:line="9" pos:column="36">NULL<pos:position pos:line="9" pos:column="40"/></name><operator pos:line="9" pos:column="40">)<pos:position pos:line="9" pos:column="41"/></operator></expr> ?<pos:position pos:line="9" pos:column="43"/></condition><then pos:line="9" pos:column="43"> <expr><name pos:line="9" pos:column="44">conf_node<pos:position pos:line="9" pos:column="53"/></name></expr> <pos:position pos:line="9" pos:column="54"/></then><else pos:line="9" pos:column="54">: <expr><name pos:line="9" pos:column="56">STATSD_DEFAULT_NODE<pos:position pos:line="9" pos:column="75"/></name></expr></else></ternary></expr></init></decl>;<pos:position pos:line="9" pos:column="76"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">char<pos:position pos:line="10" pos:column="7"/></name> <specifier pos:line="10" pos:column="8">const<pos:position pos:line="10" pos:column="13"/></specifier> <modifier pos:line="10" pos:column="14">*<pos:position pos:line="10" pos:column="15"/></modifier></type><name pos:line="10" pos:column="15">service<pos:position pos:line="10" pos:column="22"/></name> <init pos:line="10" pos:column="23">=
      <expr><ternary><condition><expr><operator pos:line="11" pos:column="7">(<pos:position pos:line="11" pos:column="8"/></operator><name pos:line="11" pos:column="8">conf_service<pos:position pos:line="11" pos:column="20"/></name> <operator pos:line="11" pos:column="21">!=<pos:position pos:line="11" pos:column="23"/></operator> <name pos:line="11" pos:column="24">NULL<pos:position pos:line="11" pos:column="28"/></name><operator pos:line="11" pos:column="28">)<pos:position pos:line="11" pos:column="29"/></operator></expr> ?<pos:position pos:line="11" pos:column="31"/></condition><then pos:line="11" pos:column="31"> <expr><name pos:line="11" pos:column="32">conf_service<pos:position pos:line="11" pos:column="44"/></name></expr> <pos:position pos:line="11" pos:column="45"/></then><else pos:line="11" pos:column="45">: <expr><name pos:line="11" pos:column="47">STATSD_DEFAULT_SERVICE<pos:position pos:line="11" pos:column="69"/></name></expr></else></ternary></expr></init></decl>;<pos:position pos:line="11" pos:column="70"/></decl_stmt>

  <decl_stmt><decl><type><name><name pos:line="13" pos:column="3">struct<pos:position pos:line="13" pos:column="9"/></name> <name pos:line="13" pos:column="10">addrinfo<pos:position pos:line="13" pos:column="18"/></name></name></type> <name pos:line="13" pos:column="19">ai_hints<pos:position pos:line="13" pos:column="27"/></name> <init pos:line="13" pos:column="28">= <expr><block pos:line="13" pos:column="30">{<expr><operator pos:line="13" pos:column="31">.<pos:position pos:line="13" pos:column="32"/></operator><name pos:line="13" pos:column="32">ai_family<pos:position pos:line="13" pos:column="41"/></name> <operator pos:line="13" pos:column="42">=<pos:position pos:line="13" pos:column="43"/></operator> <name pos:line="13" pos:column="44">AF_UNSPEC<pos:position pos:line="13" pos:column="53"/></name></expr>,
                              <expr><operator pos:line="14" pos:column="31">.<pos:position pos:line="14" pos:column="32"/></operator><name pos:line="14" pos:column="32">ai_flags<pos:position pos:line="14" pos:column="40"/></name> <operator pos:line="14" pos:column="41">=<pos:position pos:line="14" pos:column="42"/></operator> <name pos:line="14" pos:column="43">AI_PASSIVE<pos:position pos:line="14" pos:column="53"/></name> <operator pos:line="14" pos:column="54">|<pos:position pos:line="14" pos:column="55"/></operator> <name pos:line="14" pos:column="56">AI_ADDRCONFIG<pos:position pos:line="14" pos:column="69"/></name></expr>,
                              <expr><operator pos:line="15" pos:column="31">.<pos:position pos:line="15" pos:column="32"/></operator><name pos:line="15" pos:column="32">ai_socktype<pos:position pos:line="15" pos:column="43"/></name> <operator pos:line="15" pos:column="44">=<pos:position pos:line="15" pos:column="45"/></operator> <name pos:line="15" pos:column="46">SOCK_DGRAM<pos:position pos:line="15" pos:column="56"/></name></expr>}<pos:position pos:line="15" pos:column="57"/></block></expr></init></decl>;<pos:position pos:line="15" pos:column="58"/></decl_stmt>

  <expr_stmt><expr><name pos:line="17" pos:column="3">status<pos:position pos:line="17" pos:column="9"/></name> <operator pos:line="17" pos:column="10">=<pos:position pos:line="17" pos:column="11"/></operator> <call><name pos:line="17" pos:column="12">getaddrinfo<pos:position pos:line="17" pos:column="23"/></name><argument_list pos:line="17" pos:column="23">(<argument><expr><name pos:line="17" pos:column="24">node<pos:position pos:line="17" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="30">service<pos:position pos:line="17" pos:column="37"/></name></expr></argument>, <argument><expr><operator pos:line="17" pos:column="39">&amp;<pos:position pos:line="17" pos:column="44"/></operator><name pos:line="17" pos:column="40">ai_hints<pos:position pos:line="17" pos:column="48"/></name></expr></argument>, <argument><expr><operator pos:line="17" pos:column="50">&amp;<pos:position pos:line="17" pos:column="55"/></operator><name pos:line="17" pos:column="51">ai_list<pos:position pos:line="17" pos:column="58"/></name></expr></argument>)<pos:position pos:line="17" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="60"/></expr_stmt>
  <if pos:line="18" pos:column="3">if <condition pos:line="18" pos:column="6">(<expr><name pos:line="18" pos:column="7">status<pos:position pos:line="18" pos:column="13"/></name> <operator pos:line="18" pos:column="14">!=<pos:position pos:line="18" pos:column="16"/></operator> <literal type="number" pos:line="18" pos:column="17">0<pos:position pos:line="18" pos:column="18"/></literal></expr>)<pos:position pos:line="18" pos:column="19"/></condition><then pos:line="18" pos:column="19"> <block pos:line="18" pos:column="20">{
    <expr_stmt><expr><call><name pos:line="19" pos:column="5">ERROR<pos:position pos:line="19" pos:column="10"/></name><argument_list pos:line="19" pos:column="10">(<argument><expr><literal type="string" pos:line="19" pos:column="11">"statsd plugin: getaddrinfo (\"%s\", \"%s\") failed: %s"<pos:position pos:line="19" pos:column="67"/></literal></expr></argument>, <argument><expr><name pos:line="19" pos:column="69">node<pos:position pos:line="19" pos:column="73"/></name></expr></argument>,
          <argument><expr><name pos:line="20" pos:column="11">service<pos:position pos:line="20" pos:column="18"/></name></expr></argument>, <argument><expr><call><name pos:line="20" pos:column="20">gai_strerror<pos:position pos:line="20" pos:column="32"/></name><argument_list pos:line="20" pos:column="32">(<argument><expr><name pos:line="20" pos:column="33">status<pos:position pos:line="20" pos:column="39"/></name></expr></argument>)<pos:position pos:line="20" pos:column="40"/></argument_list></call></expr></argument>)<pos:position pos:line="20" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="42"/></expr_stmt>
    <return pos:line="21" pos:column="5">return <expr><operator pos:line="21" pos:column="12">(<pos:position pos:line="21" pos:column="13"/></operator><name pos:line="21" pos:column="13">status<pos:position pos:line="21" pos:column="19"/></name><operator pos:line="21" pos:column="19">)<pos:position pos:line="21" pos:column="20"/></operator></expr>;<pos:position pos:line="21" pos:column="21"/></return>
  }<pos:position pos:line="22" pos:column="4"/></block></then></if>

  <for pos:line="24" pos:column="3">for <control pos:line="24" pos:column="7">(<init><decl><type><name><name pos:line="24" pos:column="8">struct<pos:position pos:line="24" pos:column="14"/></name> <name pos:line="24" pos:column="15">addrinfo<pos:position pos:line="24" pos:column="23"/></name></name> <modifier pos:line="24" pos:column="24">*<pos:position pos:line="24" pos:column="25"/></modifier><name pos:line="24" pos:column="25">ai_ptr<pos:position pos:line="24" pos:column="31"/></name></type> <init pos:line="24" pos:column="32">= <expr><name pos:line="24" pos:column="34">ai_list<pos:position pos:line="24" pos:column="41"/></name></expr></init></decl>;<pos:position pos:line="24" pos:column="42"/></init> <condition><expr><name pos:line="24" pos:column="43">ai_ptr<pos:position pos:line="24" pos:column="49"/></name> <operator pos:line="24" pos:column="50">!=<pos:position pos:line="24" pos:column="52"/></operator> <name pos:line="24" pos:column="53">NULL<pos:position pos:line="24" pos:column="57"/></name></expr>;<pos:position pos:line="24" pos:column="58"/></condition>
       <incr><expr><name pos:line="25" pos:column="8">ai_ptr<pos:position pos:line="25" pos:column="14"/></name> <operator pos:line="25" pos:column="15">=<pos:position pos:line="25" pos:column="16"/></operator> <name><name pos:line="25" pos:column="17">ai_ptr<pos:position pos:line="25" pos:column="23"/></name><operator pos:line="25" pos:column="23">-&gt;<pos:position pos:line="25" pos:column="28"/></operator><name pos:line="25" pos:column="25">ai_next<pos:position pos:line="25" pos:column="32"/></name></name></expr></incr>)<pos:position pos:line="25" pos:column="33"/></control> <block pos:line="25" pos:column="34">{
    <decl_stmt><decl><type><name pos:line="26" pos:column="5">int<pos:position pos:line="26" pos:column="8"/></name></type> <name pos:line="26" pos:column="9">fd<pos:position pos:line="26" pos:column="11"/></name></decl>;<pos:position pos:line="26" pos:column="12"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="27" pos:column="5">struct<pos:position pos:line="27" pos:column="11"/></name> <name pos:line="27" pos:column="12">pollfd<pos:position pos:line="27" pos:column="18"/></name></name> <modifier pos:line="27" pos:column="19">*<pos:position pos:line="27" pos:column="20"/></modifier></type><name pos:line="27" pos:column="20">tmp<pos:position pos:line="27" pos:column="23"/></name></decl>;<pos:position pos:line="27" pos:column="24"/></decl_stmt>

    <decl_stmt><decl><type><name pos:line="29" pos:column="5">char<pos:position pos:line="29" pos:column="9"/></name></type> <name><name pos:line="29" pos:column="10">dbg_node<pos:position pos:line="29" pos:column="18"/></name><index pos:line="29" pos:column="18">[<expr><name pos:line="29" pos:column="19">NI_MAXHOST<pos:position pos:line="29" pos:column="29"/></name></expr>]<pos:position pos:line="29" pos:column="30"/></index></name></decl>;<pos:position pos:line="29" pos:column="31"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="30" pos:column="5">char<pos:position pos:line="30" pos:column="9"/></name></type> <name><name pos:line="30" pos:column="10">dbg_service<pos:position pos:line="30" pos:column="21"/></name><index pos:line="30" pos:column="21">[<expr><name pos:line="30" pos:column="22">NI_MAXSERV<pos:position pos:line="30" pos:column="32"/></name></expr>]<pos:position pos:line="30" pos:column="33"/></index></name></decl>;<pos:position pos:line="30" pos:column="34"/></decl_stmt>

    <expr_stmt><expr><name pos:line="32" pos:column="5">fd<pos:position pos:line="32" pos:column="7"/></name> <operator pos:line="32" pos:column="8">=<pos:position pos:line="32" pos:column="9"/></operator> <call><name pos:line="32" pos:column="10">socket<pos:position pos:line="32" pos:column="16"/></name><argument_list pos:line="32" pos:column="16">(<argument><expr><name><name pos:line="32" pos:column="17">ai_ptr<pos:position pos:line="32" pos:column="23"/></name><operator pos:line="32" pos:column="23">-&gt;<pos:position pos:line="32" pos:column="28"/></operator><name pos:line="32" pos:column="25">ai_family<pos:position pos:line="32" pos:column="34"/></name></name></expr></argument>, <argument><expr><name><name pos:line="32" pos:column="36">ai_ptr<pos:position pos:line="32" pos:column="42"/></name><operator pos:line="32" pos:column="42">-&gt;<pos:position pos:line="32" pos:column="47"/></operator><name pos:line="32" pos:column="44">ai_socktype<pos:position pos:line="32" pos:column="55"/></name></name></expr></argument>, <argument><expr><name><name pos:line="32" pos:column="57">ai_ptr<pos:position pos:line="32" pos:column="63"/></name><operator pos:line="32" pos:column="63">-&gt;<pos:position pos:line="32" pos:column="68"/></operator><name pos:line="32" pos:column="65">ai_protocol<pos:position pos:line="32" pos:column="76"/></name></name></expr></argument>)<pos:position pos:line="32" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="78"/></expr_stmt>
    <if pos:line="33" pos:column="5">if <condition pos:line="33" pos:column="8">(<expr><name pos:line="33" pos:column="9">fd<pos:position pos:line="33" pos:column="11"/></name> <operator pos:line="33" pos:column="12">&lt;<pos:position pos:line="33" pos:column="16"/></operator> <literal type="number" pos:line="33" pos:column="14">0<pos:position pos:line="33" pos:column="15"/></literal></expr>)<pos:position pos:line="33" pos:column="16"/></condition><then pos:line="33" pos:column="16"> <block pos:line="33" pos:column="17">{
      <decl_stmt><decl><type><name pos:line="34" pos:column="7">char<pos:position pos:line="34" pos:column="11"/></name></type> <name><name pos:line="34" pos:column="12">errbuf<pos:position pos:line="34" pos:column="18"/></name><index pos:line="34" pos:column="18">[<expr><literal type="number" pos:line="34" pos:column="19">1024<pos:position pos:line="34" pos:column="23"/></literal></expr>]<pos:position pos:line="34" pos:column="24"/></index></name></decl>;<pos:position pos:line="34" pos:column="25"/></decl_stmt>
      <expr_stmt><expr><call><name pos:line="35" pos:column="7">ERROR<pos:position pos:line="35" pos:column="12"/></name><argument_list pos:line="35" pos:column="12">(<argument><expr><literal type="string" pos:line="35" pos:column="13">"statsd plugin: socket(2) failed: %s"<pos:position pos:line="35" pos:column="50"/></literal></expr></argument>,
            <argument><expr><call><name pos:line="36" pos:column="13">sstrerror<pos:position pos:line="36" pos:column="22"/></name><argument_list pos:line="36" pos:column="22">(<argument><expr><name pos:line="36" pos:column="23">errno<pos:position pos:line="36" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="30">errbuf<pos:position pos:line="36" pos:column="36"/></name></expr></argument>, <argument><expr><sizeof pos:line="36" pos:column="38">sizeof<argument_list pos:line="36" pos:column="44">(<argument><expr><name pos:line="36" pos:column="45">errbuf<pos:position pos:line="36" pos:column="51"/></name></expr></argument>)<pos:position pos:line="36" pos:column="52"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="36" pos:column="53"/></argument_list></call></expr></argument>)<pos:position pos:line="36" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="55"/></expr_stmt>
      <continue pos:line="37" pos:column="7">continue;<pos:position pos:line="37" pos:column="16"/></continue>
    }<pos:position pos:line="38" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="40" pos:column="5">getnameinfo<pos:position pos:line="40" pos:column="16"/></name><argument_list pos:line="40" pos:column="16">(<argument><expr><name><name pos:line="40" pos:column="17">ai_ptr<pos:position pos:line="40" pos:column="23"/></name><operator pos:line="40" pos:column="23">-&gt;<pos:position pos:line="40" pos:column="28"/></operator><name pos:line="40" pos:column="25">ai_addr<pos:position pos:line="40" pos:column="32"/></name></name></expr></argument>, <argument><expr><name><name pos:line="40" pos:column="34">ai_ptr<pos:position pos:line="40" pos:column="40"/></name><operator pos:line="40" pos:column="40">-&gt;<pos:position pos:line="40" pos:column="45"/></operator><name pos:line="40" pos:column="42">ai_addrlen<pos:position pos:line="40" pos:column="52"/></name></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="54">dbg_node<pos:position pos:line="40" pos:column="62"/></name></expr></argument>, <argument><expr><sizeof pos:line="40" pos:column="64">sizeof<argument_list pos:line="40" pos:column="70">(<argument><expr><name pos:line="40" pos:column="71">dbg_node<pos:position pos:line="40" pos:column="79"/></name></expr></argument>)<pos:position pos:line="40" pos:column="80"/></argument_list></sizeof></expr></argument>,
                <argument><expr><name pos:line="41" pos:column="17">dbg_service<pos:position pos:line="41" pos:column="28"/></name></expr></argument>, <argument><expr><sizeof pos:line="41" pos:column="30">sizeof<argument_list pos:line="41" pos:column="36">(<argument><expr><name pos:line="41" pos:column="37">dbg_service<pos:position pos:line="41" pos:column="48"/></name></expr></argument>)<pos:position pos:line="41" pos:column="49"/></argument_list></sizeof></expr></argument>,
                <argument><expr><name pos:line="42" pos:column="17">NI_DGRAM<pos:position pos:line="42" pos:column="25"/></name> <operator pos:line="42" pos:column="26">|<pos:position pos:line="42" pos:column="27"/></operator> <name pos:line="42" pos:column="28">NI_NUMERICHOST<pos:position pos:line="42" pos:column="42"/></name> <operator pos:line="42" pos:column="43">|<pos:position pos:line="42" pos:column="44"/></operator> <name pos:line="42" pos:column="45">NI_NUMERICSERV<pos:position pos:line="42" pos:column="59"/></name></expr></argument>)<pos:position pos:line="42" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="61"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="43" pos:column="5">DEBUG<pos:position pos:line="43" pos:column="10"/></name><argument_list pos:line="43" pos:column="10">(<argument><expr><literal type="string" pos:line="43" pos:column="11">"statsd plugin: Trying to bind to [%s]:%s ..."<pos:position pos:line="43" pos:column="57"/></literal></expr></argument>, <argument><expr><name pos:line="43" pos:column="59">dbg_node<pos:position pos:line="43" pos:column="67"/></name></expr></argument>,
          <argument><expr><name pos:line="44" pos:column="11">dbg_service<pos:position pos:line="44" pos:column="22"/></name></expr></argument>)<pos:position pos:line="44" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="24"/></expr_stmt>

    <expr_stmt><expr><name pos:line="46" pos:column="5">status<pos:position pos:line="46" pos:column="11"/></name> <operator pos:line="46" pos:column="12">=<pos:position pos:line="46" pos:column="13"/></operator> <call><name pos:line="46" pos:column="14">bind<pos:position pos:line="46" pos:column="18"/></name><argument_list pos:line="46" pos:column="18">(<argument><expr><name pos:line="46" pos:column="19">fd<pos:position pos:line="46" pos:column="21"/></name></expr></argument>, <argument><expr><name><name pos:line="46" pos:column="23">ai_ptr<pos:position pos:line="46" pos:column="29"/></name><operator pos:line="46" pos:column="29">-&gt;<pos:position pos:line="46" pos:column="34"/></operator><name pos:line="46" pos:column="31">ai_addr<pos:position pos:line="46" pos:column="38"/></name></name></expr></argument>, <argument><expr><name><name pos:line="46" pos:column="40">ai_ptr<pos:position pos:line="46" pos:column="46"/></name><operator pos:line="46" pos:column="46">-&gt;<pos:position pos:line="46" pos:column="51"/></operator><name pos:line="46" pos:column="48">ai_addrlen<pos:position pos:line="46" pos:column="58"/></name></name></expr></argument>)<pos:position pos:line="46" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="60"/></expr_stmt>
    <if pos:line="47" pos:column="5">if <condition pos:line="47" pos:column="8">(<expr><name pos:line="47" pos:column="9">status<pos:position pos:line="47" pos:column="15"/></name> <operator pos:line="47" pos:column="16">!=<pos:position pos:line="47" pos:column="18"/></operator> <literal type="number" pos:line="47" pos:column="19">0<pos:position pos:line="47" pos:column="20"/></literal></expr>)<pos:position pos:line="47" pos:column="21"/></condition><then pos:line="47" pos:column="21"> <block pos:line="47" pos:column="22">{
      <decl_stmt><decl><type><name pos:line="48" pos:column="7">char<pos:position pos:line="48" pos:column="11"/></name></type> <name><name pos:line="48" pos:column="12">errbuf<pos:position pos:line="48" pos:column="18"/></name><index pos:line="48" pos:column="18">[<expr><literal type="number" pos:line="48" pos:column="19">1024<pos:position pos:line="48" pos:column="23"/></literal></expr>]<pos:position pos:line="48" pos:column="24"/></index></name></decl>;<pos:position pos:line="48" pos:column="25"/></decl_stmt>
      <expr_stmt><expr><call><name pos:line="49" pos:column="7">ERROR<pos:position pos:line="49" pos:column="12"/></name><argument_list pos:line="49" pos:column="12">(<argument><expr><literal type="string" pos:line="49" pos:column="13">"statsd plugin: bind(2) failed: %s"<pos:position pos:line="49" pos:column="48"/></literal></expr></argument>,
            <argument><expr><call><name pos:line="50" pos:column="13">sstrerror<pos:position pos:line="50" pos:column="22"/></name><argument_list pos:line="50" pos:column="22">(<argument><expr><name pos:line="50" pos:column="23">errno<pos:position pos:line="50" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="30">errbuf<pos:position pos:line="50" pos:column="36"/></name></expr></argument>, <argument><expr><sizeof pos:line="50" pos:column="38">sizeof<argument_list pos:line="50" pos:column="44">(<argument><expr><name pos:line="50" pos:column="45">errbuf<pos:position pos:line="50" pos:column="51"/></name></expr></argument>)<pos:position pos:line="50" pos:column="52"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="50" pos:column="53"/></argument_list></call></expr></argument>)<pos:position pos:line="50" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="55"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="51" pos:column="7">close<pos:position pos:line="51" pos:column="12"/></name><argument_list pos:line="51" pos:column="12">(<argument><expr><name pos:line="51" pos:column="13">fd<pos:position pos:line="51" pos:column="15"/></name></expr></argument>)<pos:position pos:line="51" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="17"/></expr_stmt>
      <continue pos:line="52" pos:column="7">continue;<pos:position pos:line="52" pos:column="16"/></continue>
    }<pos:position pos:line="53" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="55" pos:column="5">tmp<pos:position pos:line="55" pos:column="8"/></name> <operator pos:line="55" pos:column="9">=<pos:position pos:line="55" pos:column="10"/></operator> <call><name pos:line="55" pos:column="11">realloc<pos:position pos:line="55" pos:column="18"/></name><argument_list pos:line="55" pos:column="18">(<argument><expr><name pos:line="55" pos:column="19">fds<pos:position pos:line="55" pos:column="22"/></name></expr></argument>, <argument><expr><sizeof pos:line="55" pos:column="24">sizeof<argument_list pos:line="55" pos:column="30">(<argument><expr><operator pos:line="55" pos:column="31">*<pos:position pos:line="55" pos:column="32"/></operator><name pos:line="55" pos:column="32">fds<pos:position pos:line="55" pos:column="35"/></name></expr></argument>)<pos:position pos:line="55" pos:column="36"/></argument_list></sizeof> <operator pos:line="55" pos:column="37">*<pos:position pos:line="55" pos:column="38"/></operator> <operator pos:line="55" pos:column="39">(<pos:position pos:line="55" pos:column="40"/></operator><name pos:line="55" pos:column="40">fds_num<pos:position pos:line="55" pos:column="47"/></name> <operator pos:line="55" pos:column="48">+<pos:position pos:line="55" pos:column="49"/></operator> <literal type="number" pos:line="55" pos:column="50">1<pos:position pos:line="55" pos:column="51"/></literal><operator pos:line="55" pos:column="51">)<pos:position pos:line="55" pos:column="52"/></operator></expr></argument>)<pos:position pos:line="55" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="54"/></expr_stmt>
    <if pos:line="56" pos:column="5">if <condition pos:line="56" pos:column="8">(<expr><name pos:line="56" pos:column="9">tmp<pos:position pos:line="56" pos:column="12"/></name> <operator pos:line="56" pos:column="13">==<pos:position pos:line="56" pos:column="15"/></operator> <name pos:line="56" pos:column="16">NULL<pos:position pos:line="56" pos:column="20"/></name></expr>)<pos:position pos:line="56" pos:column="21"/></condition><then pos:line="56" pos:column="21"> <block pos:line="56" pos:column="22">{
      <expr_stmt><expr><call><name pos:line="57" pos:column="7">ERROR<pos:position pos:line="57" pos:column="12"/></name><argument_list pos:line="57" pos:column="12">(<argument><expr><literal type="string" pos:line="57" pos:column="13">"statsd plugin: realloc failed."<pos:position pos:line="57" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="57" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="47"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="58" pos:column="7">close<pos:position pos:line="58" pos:column="12"/></name><argument_list pos:line="58" pos:column="12">(<argument><expr><name pos:line="58" pos:column="13">fd<pos:position pos:line="58" pos:column="15"/></name></expr></argument>)<pos:position pos:line="58" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="17"/></expr_stmt>
      <continue pos:line="59" pos:column="7">continue;<pos:position pos:line="59" pos:column="16"/></continue>
    }<pos:position pos:line="60" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="61" pos:column="5">fds<pos:position pos:line="61" pos:column="8"/></name> <operator pos:line="61" pos:column="9">=<pos:position pos:line="61" pos:column="10"/></operator> <name pos:line="61" pos:column="11">tmp<pos:position pos:line="61" pos:column="14"/></name></expr>;<pos:position pos:line="61" pos:column="15"/></expr_stmt>
    <expr_stmt><expr><name pos:line="62" pos:column="5">tmp<pos:position pos:line="62" pos:column="8"/></name> <operator pos:line="62" pos:column="9">=<pos:position pos:line="62" pos:column="10"/></operator> <name pos:line="62" pos:column="11">fds<pos:position pos:line="62" pos:column="14"/></name> <operator pos:line="62" pos:column="15">+<pos:position pos:line="62" pos:column="16"/></operator> <name pos:line="62" pos:column="17">fds_num<pos:position pos:line="62" pos:column="24"/></name></expr>;<pos:position pos:line="62" pos:column="25"/></expr_stmt>
    <expr_stmt><expr><name pos:line="63" pos:column="5">fds_num<pos:position pos:line="63" pos:column="12"/></name><operator pos:line="63" pos:column="12">++<pos:position pos:line="63" pos:column="14"/></operator></expr>;<pos:position pos:line="63" pos:column="15"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="65" pos:column="5">memset<pos:position pos:line="65" pos:column="11"/></name><argument_list pos:line="65" pos:column="11">(<argument><expr><name pos:line="65" pos:column="12">tmp<pos:position pos:line="65" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="65" pos:column="17">0<pos:position pos:line="65" pos:column="18"/></literal></expr></argument>, <argument><expr><sizeof pos:line="65" pos:column="20">sizeof<argument_list pos:line="65" pos:column="26">(<argument><expr><operator pos:line="65" pos:column="27">*<pos:position pos:line="65" pos:column="28"/></operator><name pos:line="65" pos:column="28">tmp<pos:position pos:line="65" pos:column="31"/></name></expr></argument>)<pos:position pos:line="65" pos:column="32"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="65" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="34"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="66" pos:column="5">tmp<pos:position pos:line="66" pos:column="8"/></name><operator pos:line="66" pos:column="8">-&gt;<pos:position pos:line="66" pos:column="13"/></operator><name pos:line="66" pos:column="10">fd<pos:position pos:line="66" pos:column="12"/></name></name> <operator pos:line="66" pos:column="13">=<pos:position pos:line="66" pos:column="14"/></operator> <name pos:line="66" pos:column="15">fd<pos:position pos:line="66" pos:column="17"/></name></expr>;<pos:position pos:line="66" pos:column="18"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="67" pos:column="5">tmp<pos:position pos:line="67" pos:column="8"/></name><operator pos:line="67" pos:column="8">-&gt;<pos:position pos:line="67" pos:column="13"/></operator><name pos:line="67" pos:column="10">events<pos:position pos:line="67" pos:column="16"/></name></name> <operator pos:line="67" pos:column="17">=<pos:position pos:line="67" pos:column="18"/></operator> <name pos:line="67" pos:column="19">POLLIN<pos:position pos:line="67" pos:column="25"/></name> <operator pos:line="67" pos:column="26">|<pos:position pos:line="67" pos:column="27"/></operator> <name pos:line="67" pos:column="28">POLLPRI<pos:position pos:line="67" pos:column="35"/></name></expr>;<pos:position pos:line="67" pos:column="36"/></expr_stmt>
  }<pos:position pos:line="68" pos:column="4"/></block></for>

  <expr_stmt><expr><call><name pos:line="70" pos:column="3">freeaddrinfo<pos:position pos:line="70" pos:column="15"/></name><argument_list pos:line="70" pos:column="15">(<argument><expr><name pos:line="70" pos:column="16">ai_list<pos:position pos:line="70" pos:column="23"/></name></expr></argument>)<pos:position pos:line="70" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="25"/></expr_stmt>

  <if pos:line="72" pos:column="3">if <condition pos:line="72" pos:column="6">(<expr><name pos:line="72" pos:column="7">fds_num<pos:position pos:line="72" pos:column="14"/></name> <operator pos:line="72" pos:column="15">==<pos:position pos:line="72" pos:column="17"/></operator> <literal type="number" pos:line="72" pos:column="18">0<pos:position pos:line="72" pos:column="19"/></literal></expr>)<pos:position pos:line="72" pos:column="20"/></condition><then pos:line="72" pos:column="20"> <block pos:line="72" pos:column="21">{
    <expr_stmt><expr><call><name pos:line="73" pos:column="5">ERROR<pos:position pos:line="73" pos:column="10"/></name><argument_list pos:line="73" pos:column="10">(<argument><expr><literal type="string" pos:line="73" pos:column="11">"statsd plugin: Unable to create listening socket for [%s]:%s."<pos:position pos:line="73" pos:column="74"/></literal></expr></argument>,
          <argument><expr><ternary><condition><expr><operator pos:line="74" pos:column="11">(<pos:position pos:line="74" pos:column="12"/></operator><name pos:line="74" pos:column="12">node<pos:position pos:line="74" pos:column="16"/></name> <operator pos:line="74" pos:column="17">!=<pos:position pos:line="74" pos:column="19"/></operator> <name pos:line="74" pos:column="20">NULL<pos:position pos:line="74" pos:column="24"/></name><operator pos:line="74" pos:column="24">)<pos:position pos:line="74" pos:column="25"/></operator></expr> ?<pos:position pos:line="74" pos:column="27"/></condition><then pos:line="74" pos:column="27"> <expr><name pos:line="74" pos:column="28">node<pos:position pos:line="74" pos:column="32"/></name></expr> <pos:position pos:line="74" pos:column="33"/></then><else pos:line="74" pos:column="33">: <expr><literal type="string" pos:line="74" pos:column="35">"::"<pos:position pos:line="74" pos:column="39"/></literal></expr></else></ternary></expr></argument>, <argument><expr><name pos:line="74" pos:column="41">service<pos:position pos:line="74" pos:column="48"/></name></expr></argument>)<pos:position pos:line="74" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="50"/></expr_stmt>
    <return pos:line="75" pos:column="5">return <expr><operator pos:line="75" pos:column="12">(<pos:position pos:line="75" pos:column="13"/></operator><name pos:line="75" pos:column="13">ENOENT<pos:position pos:line="75" pos:column="19"/></name><operator pos:line="75" pos:column="19">)<pos:position pos:line="75" pos:column="20"/></operator></expr>;<pos:position pos:line="75" pos:column="21"/></return>
  }<pos:position pos:line="76" pos:column="4"/></block></then></if>

  <expr_stmt><expr><operator pos:line="78" pos:column="3">*<pos:position pos:line="78" pos:column="4"/></operator><name pos:line="78" pos:column="4">ret_fds<pos:position pos:line="78" pos:column="11"/></name> <operator pos:line="78" pos:column="12">=<pos:position pos:line="78" pos:column="13"/></operator> <name pos:line="78" pos:column="14">fds<pos:position pos:line="78" pos:column="17"/></name></expr>;<pos:position pos:line="78" pos:column="18"/></expr_stmt>
  <expr_stmt><expr><operator pos:line="79" pos:column="3">*<pos:position pos:line="79" pos:column="4"/></operator><name pos:line="79" pos:column="4">ret_fds_num<pos:position pos:line="79" pos:column="15"/></name> <operator pos:line="79" pos:column="16">=<pos:position pos:line="79" pos:column="17"/></operator> <name pos:line="79" pos:column="18">fds_num<pos:position pos:line="79" pos:column="25"/></name></expr>;<pos:position pos:line="79" pos:column="26"/></expr_stmt>
  <return pos:line="80" pos:column="3">return <expr><operator pos:line="80" pos:column="10">(<pos:position pos:line="80" pos:column="11"/></operator><literal type="number" pos:line="80" pos:column="11">0<pos:position pos:line="80" pos:column="12"/></literal><operator pos:line="80" pos:column="12">)<pos:position pos:line="80" pos:column="13"/></operator></expr>;<pos:position pos:line="80" pos:column="14"/></return>
}<pos:position pos:line="81" pos:column="2"/></block></function></unit>
