<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_2522_collectd-5.6.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">char<pos:position pos:line="1" pos:column="12"/></name> <modifier pos:line="1" pos:column="13">*<pos:position pos:line="1" pos:column="14"/></modifier></type><name pos:line="1" pos:column="14">match_substr<pos:position pos:line="1" pos:column="26"/></name><parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><specifier pos:line="1" pos:column="27">const<pos:position pos:line="1" pos:column="32"/></specifier> <name pos:line="1" pos:column="33">char<pos:position pos:line="1" pos:column="37"/></name> <modifier pos:line="1" pos:column="38">*<pos:position pos:line="1" pos:column="39"/></modifier></type><name pos:line="1" pos:column="39">str<pos:position pos:line="1" pos:column="42"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="44">int<pos:position pos:line="1" pos:column="47"/></name></type> <name pos:line="1" pos:column="48">begin<pos:position pos:line="1" pos:column="53"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="55">int<pos:position pos:line="1" pos:column="58"/></name></type> <name pos:line="1" pos:column="59">end<pos:position pos:line="1" pos:column="62"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="63"/></parameter_list> <block pos:line="1" pos:column="64">{
  <decl_stmt><decl><type><name pos:line="2" pos:column="3">char<pos:position pos:line="2" pos:column="7"/></name> <modifier pos:line="2" pos:column="8">*<pos:position pos:line="2" pos:column="9"/></modifier></type><name pos:line="2" pos:column="9">ret<pos:position pos:line="2" pos:column="12"/></name></decl>;<pos:position pos:line="2" pos:column="13"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">size_t<pos:position pos:line="3" pos:column="9"/></name></type> <name pos:line="3" pos:column="10">ret_len<pos:position pos:line="3" pos:column="17"/></name></decl>;<pos:position pos:line="3" pos:column="18"/></decl_stmt>

  <if pos:line="5" pos:column="3">if <condition pos:line="5" pos:column="6">(<expr><operator pos:line="5" pos:column="7">(<pos:position pos:line="5" pos:column="8"/></operator><name pos:line="5" pos:column="8">begin<pos:position pos:line="5" pos:column="13"/></name> <operator pos:line="5" pos:column="14">&lt;<pos:position pos:line="5" pos:column="18"/></operator> <literal type="number" pos:line="5" pos:column="16">0<pos:position pos:line="5" pos:column="17"/></literal><operator pos:line="5" pos:column="17">)<pos:position pos:line="5" pos:column="18"/></operator> <operator pos:line="5" pos:column="19">||<pos:position pos:line="5" pos:column="21"/></operator> <operator pos:line="5" pos:column="22">(<pos:position pos:line="5" pos:column="23"/></operator><name pos:line="5" pos:column="23">end<pos:position pos:line="5" pos:column="26"/></name> <operator pos:line="5" pos:column="27">&lt;<pos:position pos:line="5" pos:column="31"/></operator> <literal type="number" pos:line="5" pos:column="29">0<pos:position pos:line="5" pos:column="30"/></literal><operator pos:line="5" pos:column="30">)<pos:position pos:line="5" pos:column="31"/></operator> <operator pos:line="5" pos:column="32">||<pos:position pos:line="5" pos:column="34"/></operator> <operator pos:line="5" pos:column="35">(<pos:position pos:line="5" pos:column="36"/></operator><name pos:line="5" pos:column="36">begin<pos:position pos:line="5" pos:column="41"/></name> <operator pos:line="5" pos:column="42">&gt;=<pos:position pos:line="5" pos:column="47"/></operator> <name pos:line="5" pos:column="45">end<pos:position pos:line="5" pos:column="48"/></name><operator pos:line="5" pos:column="48">)<pos:position pos:line="5" pos:column="49"/></operator></expr>)<pos:position pos:line="5" pos:column="50"/></condition><then pos:line="5" pos:column="50">
    <block type="pseudo"><return pos:line="6" pos:column="5">return <expr><operator pos:line="6" pos:column="12">(<pos:position pos:line="6" pos:column="13"/></operator><name pos:line="6" pos:column="13">NULL<pos:position pos:line="6" pos:column="17"/></name><operator pos:line="6" pos:column="17">)<pos:position pos:line="6" pos:column="18"/></operator></expr>;<pos:position pos:line="6" pos:column="19"/></return></block></then></if>
  <if pos:line="7" pos:column="3">if <condition pos:line="7" pos:column="6">(<expr><operator pos:line="7" pos:column="7">(<pos:position pos:line="7" pos:column="8"/></operator><name pos:line="7" pos:column="8">size_t<pos:position pos:line="7" pos:column="14"/></name><operator pos:line="7" pos:column="14">)<pos:position pos:line="7" pos:column="15"/></operator><name pos:line="7" pos:column="15">end<pos:position pos:line="7" pos:column="18"/></name> <operator pos:line="7" pos:column="19">&gt;<pos:position pos:line="7" pos:column="23"/></operator> <operator pos:line="7" pos:column="21">(<pos:position pos:line="7" pos:column="22"/></operator><call><name pos:line="7" pos:column="22">strlen<pos:position pos:line="7" pos:column="28"/></name><argument_list pos:line="7" pos:column="28">(<argument><expr><name pos:line="7" pos:column="29">str<pos:position pos:line="7" pos:column="32"/></name></expr></argument>)<pos:position pos:line="7" pos:column="33"/></argument_list></call> <operator pos:line="7" pos:column="34">+<pos:position pos:line="7" pos:column="35"/></operator> <literal type="number" pos:line="7" pos:column="36">1<pos:position pos:line="7" pos:column="37"/></literal><operator pos:line="7" pos:column="37">)<pos:position pos:line="7" pos:column="38"/></operator></expr>)<pos:position pos:line="7" pos:column="39"/></condition><then pos:line="7" pos:column="39"> <block pos:line="7" pos:column="40">{
    <expr_stmt><expr><call><name pos:line="8" pos:column="5">ERROR<pos:position pos:line="8" pos:column="10"/></name><argument_list pos:line="8" pos:column="10">(<argument><expr><literal type="string" pos:line="8" pos:column="11">"utils_match: match_substr: `end' points after end of string."<pos:position pos:line="8" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="75"/></expr_stmt>
    <return pos:line="9" pos:column="5">return <expr><operator pos:line="9" pos:column="12">(<pos:position pos:line="9" pos:column="13"/></operator><name pos:line="9" pos:column="13">NULL<pos:position pos:line="9" pos:column="17"/></name><operator pos:line="9" pos:column="17">)<pos:position pos:line="9" pos:column="18"/></operator></expr>;<pos:position pos:line="9" pos:column="19"/></return>
  }<pos:position pos:line="10" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="12" pos:column="3">ret_len<pos:position pos:line="12" pos:column="10"/></name> <operator pos:line="12" pos:column="11">=<pos:position pos:line="12" pos:column="12"/></operator> <name pos:line="12" pos:column="13">end<pos:position pos:line="12" pos:column="16"/></name> <operator pos:line="12" pos:column="17">-<pos:position pos:line="12" pos:column="18"/></operator> <name pos:line="12" pos:column="19">begin<pos:position pos:line="12" pos:column="24"/></name></expr>;<pos:position pos:line="12" pos:column="25"/></expr_stmt>
  <expr_stmt><expr><name pos:line="13" pos:column="3">ret<pos:position pos:line="13" pos:column="6"/></name> <operator pos:line="13" pos:column="7">=<pos:position pos:line="13" pos:column="8"/></operator> <call><name pos:line="13" pos:column="9">malloc<pos:position pos:line="13" pos:column="15"/></name><argument_list pos:line="13" pos:column="15">(<argument><expr><name pos:line="13" pos:column="16">ret_len<pos:position pos:line="13" pos:column="23"/></name> <operator pos:line="13" pos:column="24">+<pos:position pos:line="13" pos:column="25"/></operator> <literal type="number" pos:line="13" pos:column="26">1<pos:position pos:line="13" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="29"/></expr_stmt>
  <if pos:line="14" pos:column="3">if <condition pos:line="14" pos:column="6">(<expr><name pos:line="14" pos:column="7">ret<pos:position pos:line="14" pos:column="10"/></name> <operator pos:line="14" pos:column="11">==<pos:position pos:line="14" pos:column="13"/></operator> <name pos:line="14" pos:column="14">NULL<pos:position pos:line="14" pos:column="18"/></name></expr>)<pos:position pos:line="14" pos:column="19"/></condition><then pos:line="14" pos:column="19"> <block pos:line="14" pos:column="20">{
    <expr_stmt><expr><call><name pos:line="15" pos:column="5">ERROR<pos:position pos:line="15" pos:column="10"/></name><argument_list pos:line="15" pos:column="10">(<argument><expr><literal type="string" pos:line="15" pos:column="11">"utils_match: match_substr: malloc failed."<pos:position pos:line="15" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="56"/></expr_stmt>
    <return pos:line="16" pos:column="5">return <expr><operator pos:line="16" pos:column="12">(<pos:position pos:line="16" pos:column="13"/></operator><name pos:line="16" pos:column="13">NULL<pos:position pos:line="16" pos:column="17"/></name><operator pos:line="16" pos:column="17">)<pos:position pos:line="16" pos:column="18"/></operator></expr>;<pos:position pos:line="16" pos:column="19"/></return>
  }<pos:position pos:line="17" pos:column="4"/></block></then></if>

  <expr_stmt><expr><call><name pos:line="19" pos:column="3">sstrncpy<pos:position pos:line="19" pos:column="11"/></name><argument_list pos:line="19" pos:column="11">(<argument><expr><name pos:line="19" pos:column="12">ret<pos:position pos:line="19" pos:column="15"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="17">str<pos:position pos:line="19" pos:column="20"/></name> <operator pos:line="19" pos:column="21">+<pos:position pos:line="19" pos:column="22"/></operator> <name pos:line="19" pos:column="23">begin<pos:position pos:line="19" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="30">ret_len<pos:position pos:line="19" pos:column="37"/></name> <operator pos:line="19" pos:column="38">+<pos:position pos:line="19" pos:column="39"/></operator> <literal type="number" pos:line="19" pos:column="40">1<pos:position pos:line="19" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="43"/></expr_stmt>
  <return pos:line="20" pos:column="3">return <expr><operator pos:line="20" pos:column="10">(<pos:position pos:line="20" pos:column="11"/></operator><name pos:line="20" pos:column="11">ret<pos:position pos:line="20" pos:column="14"/></name><operator pos:line="20" pos:column="14">)<pos:position pos:line="20" pos:column="15"/></operator></expr>;<pos:position pos:line="20" pos:column="16"/></return>
}<pos:position pos:line="21" pos:column="2"/></block></function></unit>
