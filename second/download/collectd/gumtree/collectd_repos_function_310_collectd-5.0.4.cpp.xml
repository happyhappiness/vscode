<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_310_collectd-5.0.4.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">camqp_write_locked<pos:position pos:line="1" pos:column="30"/></name> <parameter_list pos:line="1" pos:column="31">(<parameter><decl><type><name pos:line="1" pos:column="32">camqp_config_t<pos:position pos:line="1" pos:column="46"/></name> <modifier pos:line="1" pos:column="47">*<pos:position pos:line="1" pos:column="48"/></modifier></type><name pos:line="1" pos:column="48">conf<pos:position pos:line="1" pos:column="52"/></name></decl></parameter>, <comment type="block" pos:line="1" pos:column="54">/* {{{ */</comment>
        <parameter><decl><type><specifier pos:line="2" pos:column="9">const<pos:position pos:line="2" pos:column="14"/></specifier> <name pos:line="2" pos:column="15">char<pos:position pos:line="2" pos:column="19"/></name> <modifier pos:line="2" pos:column="20">*<pos:position pos:line="2" pos:column="21"/></modifier></type><name pos:line="2" pos:column="21">buffer<pos:position pos:line="2" pos:column="27"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="29">const<pos:position pos:line="2" pos:column="34"/></specifier> <name pos:line="2" pos:column="35">char<pos:position pos:line="2" pos:column="39"/></name> <modifier pos:line="2" pos:column="40">*<pos:position pos:line="2" pos:column="41"/></modifier></type><name pos:line="2" pos:column="41">routing_key<pos:position pos:line="2" pos:column="52"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="53"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">amqp_basic_properties_t<pos:position pos:line="4" pos:column="28"/></name></type> <name pos:line="4" pos:column="29">props<pos:position pos:line="4" pos:column="34"/></name></decl>;<pos:position pos:line="4" pos:column="35"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">int<pos:position pos:line="5" pos:column="8"/></name></type> <name pos:line="5" pos:column="9">status<pos:position pos:line="5" pos:column="15"/></name></decl>;<pos:position pos:line="5" pos:column="16"/></decl_stmt>

    <expr_stmt><expr><name pos:line="7" pos:column="5">status<pos:position pos:line="7" pos:column="11"/></name> <operator pos:line="7" pos:column="12">=<pos:position pos:line="7" pos:column="13"/></operator> <call><name pos:line="7" pos:column="14">camqp_connect<pos:position pos:line="7" pos:column="27"/></name> <argument_list pos:line="7" pos:column="28">(<argument><expr><name pos:line="7" pos:column="29">conf<pos:position pos:line="7" pos:column="33"/></name></expr></argument>)<pos:position pos:line="7" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="35"/></expr_stmt>
    <if pos:line="8" pos:column="5">if <condition pos:line="8" pos:column="8">(<expr><name pos:line="8" pos:column="9">status<pos:position pos:line="8" pos:column="15"/></name> <operator pos:line="8" pos:column="16">!=<pos:position pos:line="8" pos:column="18"/></operator> <literal type="number" pos:line="8" pos:column="19">0<pos:position pos:line="8" pos:column="20"/></literal></expr>)<pos:position pos:line="8" pos:column="21"/></condition><then pos:line="8" pos:column="21">
        <block type="pseudo"><return pos:line="9" pos:column="9">return <expr><operator pos:line="9" pos:column="16">(<pos:position pos:line="9" pos:column="17"/></operator><name pos:line="9" pos:column="17">status<pos:position pos:line="9" pos:column="23"/></name><operator pos:line="9" pos:column="23">)<pos:position pos:line="9" pos:column="24"/></operator></expr>;<pos:position pos:line="9" pos:column="25"/></return></block></then></if>

    <expr_stmt><expr><call><name pos:line="11" pos:column="5">memset<pos:position pos:line="11" pos:column="11"/></name> <argument_list pos:line="11" pos:column="12">(<argument><expr><operator pos:line="11" pos:column="13">&amp;<pos:position pos:line="11" pos:column="18"/></operator><name pos:line="11" pos:column="14">props<pos:position pos:line="11" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="11" pos:column="21">0<pos:position pos:line="11" pos:column="22"/></literal></expr></argument>, <argument><expr><sizeof pos:line="11" pos:column="24">sizeof <argument_list pos:line="11" pos:column="31">(<argument><expr><name pos:line="11" pos:column="32">props<pos:position pos:line="11" pos:column="37"/></name></expr></argument>)<pos:position pos:line="11" pos:column="38"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="11" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="40"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="12" pos:column="5">props<pos:position pos:line="12" pos:column="10"/></name><operator pos:line="12" pos:column="10">.<pos:position pos:line="12" pos:column="11"/></operator><name pos:line="12" pos:column="11">_flags<pos:position pos:line="12" pos:column="17"/></name></name> <operator pos:line="12" pos:column="18">=<pos:position pos:line="12" pos:column="19"/></operator> <name pos:line="12" pos:column="20">AMQP_BASIC_CONTENT_TYPE_FLAG<pos:position pos:line="12" pos:column="48"/></name>
        <operator pos:line="13" pos:column="9">|<pos:position pos:line="13" pos:column="10"/></operator> <name pos:line="13" pos:column="11">AMQP_BASIC_DELIVERY_MODE_FLAG<pos:position pos:line="13" pos:column="40"/></name>
        <operator pos:line="14" pos:column="9">|<pos:position pos:line="14" pos:column="10"/></operator> <name pos:line="14" pos:column="11">AMQP_BASIC_APP_ID_FLAG<pos:position pos:line="14" pos:column="33"/></name></expr>;<pos:position pos:line="14" pos:column="34"/></expr_stmt>
    <if pos:line="15" pos:column="5">if <condition pos:line="15" pos:column="8">(<expr><name><name pos:line="15" pos:column="9">conf<pos:position pos:line="15" pos:column="13"/></name><operator pos:line="15" pos:column="13">-&gt;<pos:position pos:line="15" pos:column="18"/></operator><name pos:line="15" pos:column="15">format<pos:position pos:line="15" pos:column="21"/></name></name> <operator pos:line="15" pos:column="22">==<pos:position pos:line="15" pos:column="24"/></operator> <name pos:line="15" pos:column="25">CAMQP_FORMAT_COMMAND<pos:position pos:line="15" pos:column="45"/></name></expr>)<pos:position pos:line="15" pos:column="46"/></condition><then pos:line="15" pos:column="46">
        <block type="pseudo"><expr_stmt><expr><name><name pos:line="16" pos:column="9">props<pos:position pos:line="16" pos:column="14"/></name><operator pos:line="16" pos:column="14">.<pos:position pos:line="16" pos:column="15"/></operator><name pos:line="16" pos:column="15">content_type<pos:position pos:line="16" pos:column="27"/></name></name> <operator pos:line="16" pos:column="28">=<pos:position pos:line="16" pos:column="29"/></operator> <call><name pos:line="16" pos:column="30">amqp_cstring_bytes<pos:position pos:line="16" pos:column="48"/></name><argument_list pos:line="16" pos:column="48">(<argument><expr><literal type="string" pos:line="16" pos:column="49">"text/collectd"<pos:position pos:line="16" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="66"/></expr_stmt></block></then>
    <elseif pos:line="17" pos:column="5">else <if pos:line="17" pos:column="10">if <condition pos:line="17" pos:column="13">(<expr><name><name pos:line="17" pos:column="14">conf<pos:position pos:line="17" pos:column="18"/></name><operator pos:line="17" pos:column="18">-&gt;<pos:position pos:line="17" pos:column="23"/></operator><name pos:line="17" pos:column="20">format<pos:position pos:line="17" pos:column="26"/></name></name> <operator pos:line="17" pos:column="27">==<pos:position pos:line="17" pos:column="29"/></operator> <name pos:line="17" pos:column="30">CAMQP_FORMAT_JSON<pos:position pos:line="17" pos:column="47"/></name></expr>)<pos:position pos:line="17" pos:column="48"/></condition><then pos:line="17" pos:column="48">
        <block type="pseudo"><expr_stmt><expr><name><name pos:line="18" pos:column="9">props<pos:position pos:line="18" pos:column="14"/></name><operator pos:line="18" pos:column="14">.<pos:position pos:line="18" pos:column="15"/></operator><name pos:line="18" pos:column="15">content_type<pos:position pos:line="18" pos:column="27"/></name></name> <operator pos:line="18" pos:column="28">=<pos:position pos:line="18" pos:column="29"/></operator> <call><name pos:line="18" pos:column="30">amqp_cstring_bytes<pos:position pos:line="18" pos:column="48"/></name><argument_list pos:line="18" pos:column="48">(<argument><expr><literal type="string" pos:line="18" pos:column="49">"application/json"<pos:position pos:line="18" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="69"/></expr_stmt></block></then></if></elseif>
    <else pos:line="19" pos:column="5">else
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="20" pos:column="9">assert<pos:position pos:line="20" pos:column="15"/></name> <argument_list pos:line="20" pos:column="16">(<argument><expr><literal type="number" pos:line="20" pos:column="17">23<pos:position pos:line="20" pos:column="19"/></literal> <operator pos:line="20" pos:column="20">==<pos:position pos:line="20" pos:column="22"/></operator> <literal type="number" pos:line="20" pos:column="23">42<pos:position pos:line="20" pos:column="25"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="27"/></expr_stmt></block></else></if>
    <expr_stmt><expr><name><name pos:line="21" pos:column="5">props<pos:position pos:line="21" pos:column="10"/></name><operator pos:line="21" pos:column="10">.<pos:position pos:line="21" pos:column="11"/></operator><name pos:line="21" pos:column="11">delivery_mode<pos:position pos:line="21" pos:column="24"/></name></name> <operator pos:line="21" pos:column="25">=<pos:position pos:line="21" pos:column="26"/></operator> <name><name pos:line="21" pos:column="27">conf<pos:position pos:line="21" pos:column="31"/></name><operator pos:line="21" pos:column="31">-&gt;<pos:position pos:line="21" pos:column="36"/></operator><name pos:line="21" pos:column="33">delivery_mode<pos:position pos:line="21" pos:column="46"/></name></name></expr>;<pos:position pos:line="21" pos:column="47"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="22" pos:column="5">props<pos:position pos:line="22" pos:column="10"/></name><operator pos:line="22" pos:column="10">.<pos:position pos:line="22" pos:column="11"/></operator><name pos:line="22" pos:column="11">app_id<pos:position pos:line="22" pos:column="17"/></name></name> <operator pos:line="22" pos:column="18">=<pos:position pos:line="22" pos:column="19"/></operator> <call><name pos:line="22" pos:column="20">amqp_cstring_bytes<pos:position pos:line="22" pos:column="38"/></name><argument_list pos:line="22" pos:column="38">(<argument><expr><literal type="string" pos:line="22" pos:column="39">"collectd"<pos:position pos:line="22" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="51"/></expr_stmt>

    <expr_stmt><expr><name pos:line="24" pos:column="5">status<pos:position pos:line="24" pos:column="11"/></name> <operator pos:line="24" pos:column="12">=<pos:position pos:line="24" pos:column="13"/></operator> <call><name pos:line="24" pos:column="14">amqp_basic_publish<pos:position pos:line="24" pos:column="32"/></name><argument_list pos:line="24" pos:column="32">(<argument><expr><name><name pos:line="24" pos:column="33">conf<pos:position pos:line="24" pos:column="37"/></name><operator pos:line="24" pos:column="37">-&gt;<pos:position pos:line="24" pos:column="42"/></operator><name pos:line="24" pos:column="39">connection<pos:position pos:line="24" pos:column="49"/></name></name></expr></argument>,
                <comment type="block" pos:line="25" pos:column="17">/* channel = */</comment> <argument><expr><literal type="number" pos:line="25" pos:column="33">1<pos:position pos:line="25" pos:column="34"/></literal></expr></argument>,
                <argument><expr><call><name pos:line="26" pos:column="17">amqp_cstring_bytes<pos:position pos:line="26" pos:column="35"/></name><argument_list pos:line="26" pos:column="35">(<argument><expr><call><name pos:line="26" pos:column="36">CONF<pos:position pos:line="26" pos:column="40"/></name><argument_list pos:line="26" pos:column="40">(<argument><expr><name pos:line="26" pos:column="41">conf<pos:position pos:line="26" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="47">exchange<pos:position pos:line="26" pos:column="55"/></name></expr></argument>)<pos:position pos:line="26" pos:column="56"/></argument_list></call></expr></argument>)<pos:position pos:line="26" pos:column="57"/></argument_list></call></expr></argument>,
                <argument><expr><call><name pos:line="27" pos:column="17">amqp_cstring_bytes<pos:position pos:line="27" pos:column="35"/></name> <argument_list pos:line="27" pos:column="36">(<argument><expr><name pos:line="27" pos:column="37">routing_key<pos:position pos:line="27" pos:column="48"/></name></expr></argument>)<pos:position pos:line="27" pos:column="49"/></argument_list></call></expr></argument>,
                <comment type="block" pos:line="28" pos:column="17">/* mandatory = */</comment> <argument><expr><literal type="number" pos:line="28" pos:column="35">0<pos:position pos:line="28" pos:column="36"/></literal></expr></argument>,
                <comment type="block" pos:line="29" pos:column="17">/* immediate = */</comment> <argument><expr><literal type="number" pos:line="29" pos:column="35">0<pos:position pos:line="29" pos:column="36"/></literal></expr></argument>,
                <argument><expr><operator pos:line="30" pos:column="17">&amp;<pos:position pos:line="30" pos:column="22"/></operator><name pos:line="30" pos:column="18">props<pos:position pos:line="30" pos:column="23"/></name></expr></argument>,
                <argument><expr><call><name pos:line="31" pos:column="17">amqp_cstring_bytes<pos:position pos:line="31" pos:column="35"/></name><argument_list pos:line="31" pos:column="35">(<argument><expr><name pos:line="31" pos:column="36">buffer<pos:position pos:line="31" pos:column="42"/></name></expr></argument>)<pos:position pos:line="31" pos:column="43"/></argument_list></call></expr></argument>)<pos:position pos:line="31" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="45"/></expr_stmt>
    <if pos:line="32" pos:column="5">if <condition pos:line="32" pos:column="8">(<expr><name pos:line="32" pos:column="9">status<pos:position pos:line="32" pos:column="15"/></name> <operator pos:line="32" pos:column="16">!=<pos:position pos:line="32" pos:column="18"/></operator> <literal type="number" pos:line="32" pos:column="19">0<pos:position pos:line="32" pos:column="20"/></literal></expr>)<pos:position pos:line="32" pos:column="21"/></condition><then pos:line="32" pos:column="21">
    <block pos:line="33" pos:column="5">{
        <expr_stmt><expr><call><name pos:line="34" pos:column="9">ERROR<pos:position pos:line="34" pos:column="14"/></name> <argument_list pos:line="34" pos:column="15">(<argument><expr><literal type="string" pos:line="34" pos:column="16">"amqp plugin: amqp_basic_publish failed with status %i."<pos:position pos:line="34" pos:column="72"/></literal></expr></argument>,
                <argument><expr><name pos:line="35" pos:column="17">status<pos:position pos:line="35" pos:column="23"/></name></expr></argument>)<pos:position pos:line="35" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="25"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="36" pos:column="9">camqp_close_connection<pos:position pos:line="36" pos:column="31"/></name> <argument_list pos:line="36" pos:column="32">(<argument><expr><name pos:line="36" pos:column="33">conf<pos:position pos:line="36" pos:column="37"/></name></expr></argument>)<pos:position pos:line="36" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="39"/></expr_stmt>
    }<pos:position pos:line="37" pos:column="6"/></block></then></if>

    <return pos:line="39" pos:column="5">return <expr><operator pos:line="39" pos:column="12">(<pos:position pos:line="39" pos:column="13"/></operator><name pos:line="39" pos:column="13">status<pos:position pos:line="39" pos:column="19"/></name><operator pos:line="39" pos:column="19">)<pos:position pos:line="39" pos:column="20"/></operator></expr>;<pos:position pos:line="39" pos:column="21"/></return>
}<pos:position pos:line="40" pos:column="2"/></block></function></unit>
