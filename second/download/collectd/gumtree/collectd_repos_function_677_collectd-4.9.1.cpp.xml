<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_677_collectd-4.9.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">powerdns_get_data_dgram<pos:position pos:line="1" pos:column="35"/></name> <parameter_list pos:line="1" pos:column="36">(<parameter><decl><type><name pos:line="1" pos:column="37">list_item_t<pos:position pos:line="1" pos:column="48"/></name> <modifier pos:line="1" pos:column="49">*<pos:position pos:line="1" pos:column="50"/></modifier></type><name pos:line="1" pos:column="50">item<pos:position pos:line="1" pos:column="54"/></name></decl></parameter>, <comment type="block" pos:line="1" pos:column="56">/* {{{ */</comment>
    <parameter><decl><type><name pos:line="2" pos:column="5">char<pos:position pos:line="2" pos:column="9"/></name> <modifier pos:line="2" pos:column="10">*<pos:position pos:line="2" pos:column="11"/></modifier><modifier pos:line="2" pos:column="11">*<pos:position pos:line="2" pos:column="12"/></modifier></type><name pos:line="2" pos:column="12">ret_buffer<pos:position pos:line="2" pos:column="22"/></name></decl></parameter>,
    <parameter><decl><type><name pos:line="3" pos:column="5">size_t<pos:position pos:line="3" pos:column="11"/></name> <modifier pos:line="3" pos:column="12">*<pos:position pos:line="3" pos:column="13"/></modifier></type><name pos:line="3" pos:column="13">ret_buffer_size<pos:position pos:line="3" pos:column="28"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="29"/></parameter_list>
<block pos:line="4" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">int<pos:position pos:line="5" pos:column="6"/></name></type> <name pos:line="5" pos:column="7">sd<pos:position pos:line="5" pos:column="9"/></name></decl>;<pos:position pos:line="5" pos:column="10"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">int<pos:position pos:line="6" pos:column="6"/></name></type> <name pos:line="6" pos:column="7">status<pos:position pos:line="6" pos:column="13"/></name></decl>;<pos:position pos:line="6" pos:column="14"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="8" pos:column="3">char<pos:position pos:line="8" pos:column="7"/></name></type> <name><name pos:line="8" pos:column="8">temp<pos:position pos:line="8" pos:column="12"/></name><index pos:line="8" pos:column="12">[<expr><literal type="number" pos:line="8" pos:column="13">4096<pos:position pos:line="8" pos:column="17"/></literal></expr>]<pos:position pos:line="8" pos:column="18"/></index></name></decl>;<pos:position pos:line="8" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">char<pos:position pos:line="9" pos:column="7"/></name> <modifier pos:line="9" pos:column="8">*<pos:position pos:line="9" pos:column="9"/></modifier></type><name pos:line="9" pos:column="9">buffer<pos:position pos:line="9" pos:column="15"/></name> <init pos:line="9" pos:column="16">= <expr><name pos:line="9" pos:column="18">NULL<pos:position pos:line="9" pos:column="22"/></name></expr></init></decl>;<pos:position pos:line="9" pos:column="23"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">size_t<pos:position pos:line="10" pos:column="9"/></name></type> <name pos:line="10" pos:column="10">buffer_size<pos:position pos:line="10" pos:column="21"/></name> <init pos:line="10" pos:column="22">= <expr><literal type="number" pos:line="10" pos:column="24">0<pos:position pos:line="10" pos:column="25"/></literal></expr></init></decl>;<pos:position pos:line="10" pos:column="26"/></decl_stmt>

  <decl_stmt><decl><type><name><name pos:line="12" pos:column="3">struct<pos:position pos:line="12" pos:column="9"/></name> <name pos:line="12" pos:column="10">sockaddr_un<pos:position pos:line="12" pos:column="21"/></name></name></type> <name pos:line="12" pos:column="22">sa_unix<pos:position pos:line="12" pos:column="29"/></name></decl>;<pos:position pos:line="12" pos:column="30"/></decl_stmt>

  <expr_stmt><expr><name pos:line="14" pos:column="3">sd<pos:position pos:line="14" pos:column="5"/></name> <operator pos:line="14" pos:column="6">=<pos:position pos:line="14" pos:column="7"/></operator> <call><name pos:line="14" pos:column="8">socket<pos:position pos:line="14" pos:column="14"/></name> <argument_list pos:line="14" pos:column="15">(<argument><expr><name pos:line="14" pos:column="16">PF_UNIX<pos:position pos:line="14" pos:column="23"/></name></expr></argument>, <argument><expr><name><name pos:line="14" pos:column="25">item<pos:position pos:line="14" pos:column="29"/></name><operator pos:line="14" pos:column="29">-&gt;<pos:position pos:line="14" pos:column="34"/></operator><name pos:line="14" pos:column="31">socktype<pos:position pos:line="14" pos:column="39"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="14" pos:column="41">0<pos:position pos:line="14" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="44"/></expr_stmt>
  <if pos:line="15" pos:column="3">if <condition pos:line="15" pos:column="6">(<expr><name pos:line="15" pos:column="7">sd<pos:position pos:line="15" pos:column="9"/></name> <operator pos:line="15" pos:column="10">&lt;<pos:position pos:line="15" pos:column="14"/></operator> <literal type="number" pos:line="15" pos:column="12">0<pos:position pos:line="15" pos:column="13"/></literal></expr>)<pos:position pos:line="15" pos:column="14"/></condition><then pos:line="15" pos:column="14">
  <block pos:line="16" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="17" pos:column="5">FUNC_ERROR<pos:position pos:line="17" pos:column="15"/></name> <argument_list pos:line="17" pos:column="16">(<argument><expr><literal type="string" pos:line="17" pos:column="17">"socket"<pos:position pos:line="17" pos:column="25"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="27"/></expr_stmt>
    <return pos:line="18" pos:column="5">return <expr><operator pos:line="18" pos:column="12">(<pos:position pos:line="18" pos:column="13"/></operator><operator pos:line="18" pos:column="13">-<pos:position pos:line="18" pos:column="14"/></operator><literal type="number" pos:line="18" pos:column="14">1<pos:position pos:line="18" pos:column="15"/></literal><operator pos:line="18" pos:column="15">)<pos:position pos:line="18" pos:column="16"/></operator></expr>;<pos:position pos:line="18" pos:column="17"/></return>
  }<pos:position pos:line="19" pos:column="4"/></block></then></if>

  <expr_stmt><expr><call><name pos:line="21" pos:column="3">memset<pos:position pos:line="21" pos:column="9"/></name> <argument_list pos:line="21" pos:column="10">(<argument><expr><operator pos:line="21" pos:column="11">&amp;<pos:position pos:line="21" pos:column="16"/></operator><name pos:line="21" pos:column="12">sa_unix<pos:position pos:line="21" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="21" pos:column="21">0<pos:position pos:line="21" pos:column="22"/></literal></expr></argument>, <argument><expr><sizeof pos:line="21" pos:column="24">sizeof <argument_list pos:line="21" pos:column="31">(<argument><expr><name pos:line="21" pos:column="32">sa_unix<pos:position pos:line="21" pos:column="39"/></name></expr></argument>)<pos:position pos:line="21" pos:column="40"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="21" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="42"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="22" pos:column="3">sa_unix<pos:position pos:line="22" pos:column="10"/></name><operator pos:line="22" pos:column="10">.<pos:position pos:line="22" pos:column="11"/></operator><name pos:line="22" pos:column="11">sun_family<pos:position pos:line="22" pos:column="21"/></name></name> <operator pos:line="22" pos:column="22">=<pos:position pos:line="22" pos:column="23"/></operator> <name pos:line="22" pos:column="24">AF_UNIX<pos:position pos:line="22" pos:column="31"/></name></expr>;<pos:position pos:line="22" pos:column="32"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="23" pos:column="3">sstrncpy<pos:position pos:line="23" pos:column="11"/></name> <argument_list pos:line="23" pos:column="12">(<argument><expr><name><name pos:line="23" pos:column="13">sa_unix<pos:position pos:line="23" pos:column="20"/></name><operator pos:line="23" pos:column="20">.<pos:position pos:line="23" pos:column="21"/></operator><name pos:line="23" pos:column="21">sun_path<pos:position pos:line="23" pos:column="29"/></name></name></expr></argument>,
      <argument><expr><ternary><condition><expr><operator pos:line="24" pos:column="7">(<pos:position pos:line="24" pos:column="8"/></operator><name pos:line="24" pos:column="8">local_sockpath<pos:position pos:line="24" pos:column="22"/></name> <operator pos:line="24" pos:column="23">!=<pos:position pos:line="24" pos:column="25"/></operator> <name pos:line="24" pos:column="26">NULL<pos:position pos:line="24" pos:column="30"/></name><operator pos:line="24" pos:column="30">)<pos:position pos:line="24" pos:column="31"/></operator></expr> ?<pos:position pos:line="24" pos:column="33"/></condition><then pos:line="24" pos:column="33"> <expr><name pos:line="24" pos:column="34">local_sockpath<pos:position pos:line="24" pos:column="48"/></name></expr> <pos:position pos:line="24" pos:column="49"/></then><else pos:line="24" pos:column="49">: <expr><name pos:line="24" pos:column="51">PDNS_LOCAL_SOCKPATH<pos:position pos:line="24" pos:column="70"/></name></expr></else></ternary></expr></argument>,
      <argument><expr><sizeof pos:line="25" pos:column="7">sizeof <argument_list pos:line="25" pos:column="14">(<argument><expr><name><name pos:line="25" pos:column="15">sa_unix<pos:position pos:line="25" pos:column="22"/></name><operator pos:line="25" pos:column="22">.<pos:position pos:line="25" pos:column="23"/></operator><name pos:line="25" pos:column="23">sun_path<pos:position pos:line="25" pos:column="31"/></name></name></expr></argument>)<pos:position pos:line="25" pos:column="32"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="25" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="34"/></expr_stmt>

  <expr_stmt><expr><name pos:line="27" pos:column="3">status<pos:position pos:line="27" pos:column="9"/></name> <operator pos:line="27" pos:column="10">=<pos:position pos:line="27" pos:column="11"/></operator> <call><name pos:line="27" pos:column="12">unlink<pos:position pos:line="27" pos:column="18"/></name> <argument_list pos:line="27" pos:column="19">(<argument><expr><name><name pos:line="27" pos:column="20">sa_unix<pos:position pos:line="27" pos:column="27"/></name><operator pos:line="27" pos:column="27">.<pos:position pos:line="27" pos:column="28"/></operator><name pos:line="27" pos:column="28">sun_path<pos:position pos:line="27" pos:column="36"/></name></name></expr></argument>)<pos:position pos:line="27" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="38"/></expr_stmt>
  <if pos:line="28" pos:column="3">if <condition pos:line="28" pos:column="6">(<expr><operator pos:line="28" pos:column="7">(<pos:position pos:line="28" pos:column="8"/></operator><name pos:line="28" pos:column="8">status<pos:position pos:line="28" pos:column="14"/></name> <operator pos:line="28" pos:column="15">!=<pos:position pos:line="28" pos:column="17"/></operator> <literal type="number" pos:line="28" pos:column="18">0<pos:position pos:line="28" pos:column="19"/></literal><operator pos:line="28" pos:column="19">)<pos:position pos:line="28" pos:column="20"/></operator> <operator pos:line="28" pos:column="21">&amp;&amp;<pos:position pos:line="28" pos:column="31"/></operator> <operator pos:line="28" pos:column="24">(<pos:position pos:line="28" pos:column="25"/></operator><name pos:line="28" pos:column="25">errno<pos:position pos:line="28" pos:column="30"/></name> <operator pos:line="28" pos:column="31">!=<pos:position pos:line="28" pos:column="33"/></operator> <name pos:line="28" pos:column="34">ENOENT<pos:position pos:line="28" pos:column="40"/></name><operator pos:line="28" pos:column="40">)<pos:position pos:line="28" pos:column="41"/></operator></expr>)<pos:position pos:line="28" pos:column="42"/></condition><then pos:line="28" pos:column="42">
  <block pos:line="29" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="30" pos:column="5">FUNC_ERROR<pos:position pos:line="30" pos:column="15"/></name> <argument_list pos:line="30" pos:column="16">(<argument><expr><literal type="string" pos:line="30" pos:column="17">"unlink"<pos:position pos:line="30" pos:column="25"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="27"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="31" pos:column="5">close<pos:position pos:line="31" pos:column="10"/></name> <argument_list pos:line="31" pos:column="11">(<argument><expr><name pos:line="31" pos:column="12">sd<pos:position pos:line="31" pos:column="14"/></name></expr></argument>)<pos:position pos:line="31" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="16"/></expr_stmt>
    <return pos:line="32" pos:column="5">return <expr><operator pos:line="32" pos:column="12">(<pos:position pos:line="32" pos:column="13"/></operator><operator pos:line="32" pos:column="13">-<pos:position pos:line="32" pos:column="14"/></operator><literal type="number" pos:line="32" pos:column="14">1<pos:position pos:line="32" pos:column="15"/></literal><operator pos:line="32" pos:column="15">)<pos:position pos:line="32" pos:column="16"/></operator></expr>;<pos:position pos:line="32" pos:column="17"/></return>
  }<pos:position pos:line="33" pos:column="4"/></block></then></if>

  <do pos:line="35" pos:column="3">do <comment type="block" pos:line="35" pos:column="6">/* while (0) */</comment>
  <block pos:line="36" pos:column="3">{
    <comment type="block" pos:line="37" pos:column="5">/* We need to bind to a specific path, because this is a datagram socket
     * and otherwise the daemon cannot answer. */</comment>
    <expr_stmt><expr><name pos:line="39" pos:column="5">status<pos:position pos:line="39" pos:column="11"/></name> <operator pos:line="39" pos:column="12">=<pos:position pos:line="39" pos:column="13"/></operator> <call><name pos:line="39" pos:column="14">bind<pos:position pos:line="39" pos:column="18"/></name> <argument_list pos:line="39" pos:column="19">(<argument><expr><name pos:line="39" pos:column="20">sd<pos:position pos:line="39" pos:column="22"/></name></expr></argument>, <argument><expr><operator pos:line="39" pos:column="24">(<pos:position pos:line="39" pos:column="25"/></operator>struct <name pos:line="39" pos:column="32">sockaddr<pos:position pos:line="39" pos:column="40"/></name> <operator pos:line="39" pos:column="41">*<pos:position pos:line="39" pos:column="42"/></operator><operator pos:line="39" pos:column="42">)<pos:position pos:line="39" pos:column="43"/></operator> <operator pos:line="39" pos:column="44">&amp;<pos:position pos:line="39" pos:column="49"/></operator><name pos:line="39" pos:column="45">sa_unix<pos:position pos:line="39" pos:column="52"/></name></expr></argument>, <argument><expr><sizeof pos:line="39" pos:column="54">sizeof <argument_list pos:line="39" pos:column="61">(<argument><expr><name pos:line="39" pos:column="62">sa_unix<pos:position pos:line="39" pos:column="69"/></name></expr></argument>)<pos:position pos:line="39" pos:column="70"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="39" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="72"/></expr_stmt>
    <if pos:line="40" pos:column="5">if <condition pos:line="40" pos:column="8">(<expr><name pos:line="40" pos:column="9">status<pos:position pos:line="40" pos:column="15"/></name> <operator pos:line="40" pos:column="16">!=<pos:position pos:line="40" pos:column="18"/></operator> <literal type="number" pos:line="40" pos:column="19">0<pos:position pos:line="40" pos:column="20"/></literal></expr>)<pos:position pos:line="40" pos:column="21"/></condition><then pos:line="40" pos:column="21">
    <block pos:line="41" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="42" pos:column="7">FUNC_ERROR<pos:position pos:line="42" pos:column="17"/></name> <argument_list pos:line="42" pos:column="18">(<argument><expr><literal type="string" pos:line="42" pos:column="19">"bind"<pos:position pos:line="42" pos:column="25"/></literal></expr></argument>)<pos:position pos:line="42" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="27"/></expr_stmt>
      <break pos:line="43" pos:column="7">break;<pos:position pos:line="43" pos:column="13"/></break>
    }<pos:position pos:line="44" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="46" pos:column="5">/* Make the socket writeable by the daemon.. */</comment>
    <expr_stmt><expr><name pos:line="47" pos:column="5">status<pos:position pos:line="47" pos:column="11"/></name> <operator pos:line="47" pos:column="12">=<pos:position pos:line="47" pos:column="13"/></operator> <call><name pos:line="47" pos:column="14">chmod<pos:position pos:line="47" pos:column="19"/></name> <argument_list pos:line="47" pos:column="20">(<argument><expr><name><name pos:line="47" pos:column="21">sa_unix<pos:position pos:line="47" pos:column="28"/></name><operator pos:line="47" pos:column="28">.<pos:position pos:line="47" pos:column="29"/></operator><name pos:line="47" pos:column="29">sun_path<pos:position pos:line="47" pos:column="37"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="47" pos:column="39">0666<pos:position pos:line="47" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="47" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="45"/></expr_stmt>
    <if pos:line="48" pos:column="5">if <condition pos:line="48" pos:column="8">(<expr><name pos:line="48" pos:column="9">status<pos:position pos:line="48" pos:column="15"/></name> <operator pos:line="48" pos:column="16">!=<pos:position pos:line="48" pos:column="18"/></operator> <literal type="number" pos:line="48" pos:column="19">0<pos:position pos:line="48" pos:column="20"/></literal></expr>)<pos:position pos:line="48" pos:column="21"/></condition><then pos:line="48" pos:column="21">
    <block pos:line="49" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="50" pos:column="7">FUNC_ERROR<pos:position pos:line="50" pos:column="17"/></name> <argument_list pos:line="50" pos:column="18">(<argument><expr><literal type="string" pos:line="50" pos:column="19">"chmod"<pos:position pos:line="50" pos:column="26"/></literal></expr></argument>)<pos:position pos:line="50" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="28"/></expr_stmt>
      <break pos:line="51" pos:column="7">break;<pos:position pos:line="51" pos:column="13"/></break>
    }<pos:position pos:line="52" pos:column="6"/></block></then></if>

    <decl_stmt><decl><type><name><name pos:line="54" pos:column="5">struct<pos:position pos:line="54" pos:column="11"/></name> <name pos:line="54" pos:column="12">timeval<pos:position pos:line="54" pos:column="19"/></name></name></type> <name pos:line="54" pos:column="20">timeout<pos:position pos:line="54" pos:column="27"/></name></decl>;<pos:position pos:line="54" pos:column="28"/></decl_stmt>
    <expr_stmt><expr><name><name pos:line="55" pos:column="5">timeout<pos:position pos:line="55" pos:column="12"/></name><operator pos:line="55" pos:column="12">.<pos:position pos:line="55" pos:column="13"/></operator><name pos:line="55" pos:column="13">tv_sec<pos:position pos:line="55" pos:column="19"/></name></name><operator pos:line="55" pos:column="19">=<pos:position pos:line="55" pos:column="20"/></operator><literal type="number" pos:line="55" pos:column="20">2<pos:position pos:line="55" pos:column="21"/></literal></expr>;<pos:position pos:line="55" pos:column="22"/></expr_stmt>
    <if pos:line="56" pos:column="5">if <condition pos:line="56" pos:column="8">(<expr><name><name pos:line="56" pos:column="9">timeout<pos:position pos:line="56" pos:column="16"/></name><operator pos:line="56" pos:column="16">.<pos:position pos:line="56" pos:column="17"/></operator><name pos:line="56" pos:column="17">tv_sec<pos:position pos:line="56" pos:column="23"/></name></name> <operator pos:line="56" pos:column="24">&lt;<pos:position pos:line="56" pos:column="28"/></operator> <name pos:line="56" pos:column="26">interval_g<pos:position pos:line="56" pos:column="36"/></name> <operator pos:line="56" pos:column="37">*<pos:position pos:line="56" pos:column="38"/></operator> <literal type="number" pos:line="56" pos:column="39">3<pos:position pos:line="56" pos:column="40"/></literal> <operator pos:line="56" pos:column="41">/<pos:position pos:line="56" pos:column="42"/></operator> <literal type="number" pos:line="56" pos:column="43">4<pos:position pos:line="56" pos:column="44"/></literal></expr>)<pos:position pos:line="56" pos:column="45"/></condition><then pos:line="56" pos:column="45">
      <block type="pseudo"><expr_stmt><expr><name><name pos:line="57" pos:column="7">timeout<pos:position pos:line="57" pos:column="14"/></name><operator pos:line="57" pos:column="14">.<pos:position pos:line="57" pos:column="15"/></operator><name pos:line="57" pos:column="15">tv_sec<pos:position pos:line="57" pos:column="21"/></name></name> <operator pos:line="57" pos:column="22">=<pos:position pos:line="57" pos:column="23"/></operator> <name pos:line="57" pos:column="24">interval_g<pos:position pos:line="57" pos:column="34"/></name> <operator pos:line="57" pos:column="35">*<pos:position pos:line="57" pos:column="36"/></operator> <literal type="number" pos:line="57" pos:column="37">3<pos:position pos:line="57" pos:column="38"/></literal> <operator pos:line="57" pos:column="39">/<pos:position pos:line="57" pos:column="40"/></operator> <literal type="number" pos:line="57" pos:column="41">4<pos:position pos:line="57" pos:column="42"/></literal></expr>;<pos:position pos:line="57" pos:column="43"/></expr_stmt></block></then></if>
    <expr_stmt><expr><name><name pos:line="58" pos:column="5">timeout<pos:position pos:line="58" pos:column="12"/></name><operator pos:line="58" pos:column="12">.<pos:position pos:line="58" pos:column="13"/></operator><name pos:line="58" pos:column="13">tv_usec<pos:position pos:line="58" pos:column="20"/></name></name><operator pos:line="58" pos:column="20">=<pos:position pos:line="58" pos:column="21"/></operator><literal type="number" pos:line="58" pos:column="21">0<pos:position pos:line="58" pos:column="22"/></literal></expr>;<pos:position pos:line="58" pos:column="23"/></expr_stmt>
    <expr_stmt><expr><name pos:line="59" pos:column="5">status<pos:position pos:line="59" pos:column="11"/></name> <operator pos:line="59" pos:column="12">=<pos:position pos:line="59" pos:column="13"/></operator> <call><name pos:line="59" pos:column="14">setsockopt<pos:position pos:line="59" pos:column="24"/></name> <argument_list pos:line="59" pos:column="25">(<argument><expr><name pos:line="59" pos:column="26">sd<pos:position pos:line="59" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="59" pos:column="30">SOL_SOCKET<pos:position pos:line="59" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="59" pos:column="42">SO_RCVTIMEO<pos:position pos:line="59" pos:column="53"/></name></expr></argument>, <argument><expr><operator pos:line="59" pos:column="55">&amp;<pos:position pos:line="59" pos:column="60"/></operator><name pos:line="59" pos:column="56">timeout<pos:position pos:line="59" pos:column="63"/></name></expr></argument>, <argument><expr><sizeof pos:line="59" pos:column="65">sizeof <argument_list pos:line="59" pos:column="72">(<argument><expr><name pos:line="59" pos:column="73">timeout<pos:position pos:line="59" pos:column="80"/></name></expr></argument>)<pos:position pos:line="59" pos:column="81"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="59" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="83"/></expr_stmt>
    <if pos:line="60" pos:column="5">if <condition pos:line="60" pos:column="8">(<expr><name pos:line="60" pos:column="9">status<pos:position pos:line="60" pos:column="15"/></name> <operator pos:line="60" pos:column="16">!=<pos:position pos:line="60" pos:column="18"/></operator> <literal type="number" pos:line="60" pos:column="19">0<pos:position pos:line="60" pos:column="20"/></literal></expr>)<pos:position pos:line="60" pos:column="21"/></condition><then pos:line="60" pos:column="21">
    <block pos:line="61" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="62" pos:column="7">FUNC_ERROR<pos:position pos:line="62" pos:column="17"/></name> <argument_list pos:line="62" pos:column="18">(<argument><expr><literal type="string" pos:line="62" pos:column="19">"setsockopt"<pos:position pos:line="62" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="62" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="33"/></expr_stmt>
      <break pos:line="63" pos:column="7">break;<pos:position pos:line="63" pos:column="13"/></break>
    }<pos:position pos:line="64" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="66" pos:column="5">status<pos:position pos:line="66" pos:column="11"/></name> <operator pos:line="66" pos:column="12">=<pos:position pos:line="66" pos:column="13"/></operator> <call><name pos:line="66" pos:column="14">connect<pos:position pos:line="66" pos:column="21"/></name> <argument_list pos:line="66" pos:column="22">(<argument><expr><name pos:line="66" pos:column="23">sd<pos:position pos:line="66" pos:column="25"/></name></expr></argument>, <argument><expr><operator pos:line="66" pos:column="27">(<pos:position pos:line="66" pos:column="28"/></operator>struct <name pos:line="66" pos:column="35">sockaddr<pos:position pos:line="66" pos:column="43"/></name> <operator pos:line="66" pos:column="44">*<pos:position pos:line="66" pos:column="45"/></operator><operator pos:line="66" pos:column="45">)<pos:position pos:line="66" pos:column="46"/></operator> <operator pos:line="66" pos:column="47">&amp;<pos:position pos:line="66" pos:column="52"/></operator><name><name pos:line="66" pos:column="48">item<pos:position pos:line="66" pos:column="52"/></name><operator pos:line="66" pos:column="52">-&gt;<pos:position pos:line="66" pos:column="57"/></operator><name pos:line="66" pos:column="54">sockaddr<pos:position pos:line="66" pos:column="62"/></name></name></expr></argument>,
        <argument><expr><sizeof pos:line="67" pos:column="9">sizeof <argument_list pos:line="67" pos:column="16">(<argument><expr><name><name pos:line="67" pos:column="17">item<pos:position pos:line="67" pos:column="21"/></name><operator pos:line="67" pos:column="21">-&gt;<pos:position pos:line="67" pos:column="26"/></operator><name pos:line="67" pos:column="23">sockaddr<pos:position pos:line="67" pos:column="31"/></name></name></expr></argument>)<pos:position pos:line="67" pos:column="32"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="67" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="34"/></expr_stmt>
    <if pos:line="68" pos:column="5">if <condition pos:line="68" pos:column="8">(<expr><name pos:line="68" pos:column="9">status<pos:position pos:line="68" pos:column="15"/></name> <operator pos:line="68" pos:column="16">!=<pos:position pos:line="68" pos:column="18"/></operator> <literal type="number" pos:line="68" pos:column="19">0<pos:position pos:line="68" pos:column="20"/></literal></expr>)<pos:position pos:line="68" pos:column="21"/></condition><then pos:line="68" pos:column="21">
    <block pos:line="69" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="70" pos:column="7">FUNC_ERROR<pos:position pos:line="70" pos:column="17"/></name> <argument_list pos:line="70" pos:column="18">(<argument><expr><literal type="string" pos:line="70" pos:column="19">"connect"<pos:position pos:line="70" pos:column="28"/></literal></expr></argument>)<pos:position pos:line="70" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="30"/></expr_stmt>
      <break pos:line="71" pos:column="7">break;<pos:position pos:line="71" pos:column="13"/></break>
    }<pos:position pos:line="72" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="74" pos:column="5">status<pos:position pos:line="74" pos:column="11"/></name> <operator pos:line="74" pos:column="12">=<pos:position pos:line="74" pos:column="13"/></operator> <call><name pos:line="74" pos:column="14">send<pos:position pos:line="74" pos:column="18"/></name> <argument_list pos:line="74" pos:column="19">(<argument><expr><name pos:line="74" pos:column="20">sd<pos:position pos:line="74" pos:column="22"/></name></expr></argument>, <argument><expr><name><name pos:line="74" pos:column="24">item<pos:position pos:line="74" pos:column="28"/></name><operator pos:line="74" pos:column="28">-&gt;<pos:position pos:line="74" pos:column="33"/></operator><name pos:line="74" pos:column="30">command<pos:position pos:line="74" pos:column="37"/></name></name></expr></argument>, <argument><expr><call><name pos:line="74" pos:column="39">strlen<pos:position pos:line="74" pos:column="45"/></name> <argument_list pos:line="74" pos:column="46">(<argument><expr><name><name pos:line="74" pos:column="47">item<pos:position pos:line="74" pos:column="51"/></name><operator pos:line="74" pos:column="51">-&gt;<pos:position pos:line="74" pos:column="56"/></operator><name pos:line="74" pos:column="53">command<pos:position pos:line="74" pos:column="60"/></name></name></expr></argument>)<pos:position pos:line="74" pos:column="61"/></argument_list></call></expr></argument>, <argument><expr><literal type="number" pos:line="74" pos:column="63">0<pos:position pos:line="74" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="74" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="66"/></expr_stmt>
    <if pos:line="75" pos:column="5">if <condition pos:line="75" pos:column="8">(<expr><name pos:line="75" pos:column="9">status<pos:position pos:line="75" pos:column="15"/></name> <operator pos:line="75" pos:column="16">&lt;<pos:position pos:line="75" pos:column="20"/></operator> <literal type="number" pos:line="75" pos:column="18">0<pos:position pos:line="75" pos:column="19"/></literal></expr>)<pos:position pos:line="75" pos:column="20"/></condition><then pos:line="75" pos:column="20">
    <block pos:line="76" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="77" pos:column="7">FUNC_ERROR<pos:position pos:line="77" pos:column="17"/></name> <argument_list pos:line="77" pos:column="18">(<argument><expr><literal type="string" pos:line="77" pos:column="19">"send"<pos:position pos:line="77" pos:column="25"/></literal></expr></argument>)<pos:position pos:line="77" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="27"/></expr_stmt>
      <break pos:line="78" pos:column="7">break;<pos:position pos:line="78" pos:column="13"/></break>
    }<pos:position pos:line="79" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="81" pos:column="5">status<pos:position pos:line="81" pos:column="11"/></name> <operator pos:line="81" pos:column="12">=<pos:position pos:line="81" pos:column="13"/></operator> <call><name pos:line="81" pos:column="14">recv<pos:position pos:line="81" pos:column="18"/></name> <argument_list pos:line="81" pos:column="19">(<argument><expr><name pos:line="81" pos:column="20">sd<pos:position pos:line="81" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="81" pos:column="24">temp<pos:position pos:line="81" pos:column="28"/></name></expr></argument>, <argument><expr><sizeof pos:line="81" pos:column="30">sizeof <argument_list pos:line="81" pos:column="37">(<argument><expr><name pos:line="81" pos:column="38">temp<pos:position pos:line="81" pos:column="42"/></name></expr></argument>)<pos:position pos:line="81" pos:column="43"/></argument_list></sizeof></expr></argument>, <comment type="block" pos:line="81" pos:column="45">/* flags = */</comment> <argument><expr><literal type="number" pos:line="81" pos:column="59">0<pos:position pos:line="81" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="81" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="62"/></expr_stmt>
    <if pos:line="82" pos:column="5">if <condition pos:line="82" pos:column="8">(<expr><name pos:line="82" pos:column="9">status<pos:position pos:line="82" pos:column="15"/></name> <operator pos:line="82" pos:column="16">&lt;<pos:position pos:line="82" pos:column="20"/></operator> <literal type="number" pos:line="82" pos:column="18">0<pos:position pos:line="82" pos:column="19"/></literal></expr>)<pos:position pos:line="82" pos:column="20"/></condition><then pos:line="82" pos:column="20">
    <block pos:line="83" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="84" pos:column="7">FUNC_ERROR<pos:position pos:line="84" pos:column="17"/></name> <argument_list pos:line="84" pos:column="18">(<argument><expr><literal type="string" pos:line="84" pos:column="19">"recv"<pos:position pos:line="84" pos:column="25"/></literal></expr></argument>)<pos:position pos:line="84" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="27"/></expr_stmt>
      <break pos:line="85" pos:column="7">break;<pos:position pos:line="85" pos:column="13"/></break>
    }<pos:position pos:line="86" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="87" pos:column="5">buffer_size<pos:position pos:line="87" pos:column="16"/></name> <operator pos:line="87" pos:column="17">=<pos:position pos:line="87" pos:column="18"/></operator> <name pos:line="87" pos:column="19">status<pos:position pos:line="87" pos:column="25"/></name> <operator pos:line="87" pos:column="26">+<pos:position pos:line="87" pos:column="27"/></operator> <literal type="number" pos:line="87" pos:column="28">1<pos:position pos:line="87" pos:column="29"/></literal></expr>;<pos:position pos:line="87" pos:column="30"/></expr_stmt>
    <expr_stmt><expr><name pos:line="88" pos:column="5">status<pos:position pos:line="88" pos:column="11"/></name> <operator pos:line="88" pos:column="12">=<pos:position pos:line="88" pos:column="13"/></operator> <literal type="number" pos:line="88" pos:column="14">0<pos:position pos:line="88" pos:column="15"/></literal></expr>;<pos:position pos:line="88" pos:column="16"/></expr_stmt>
  }<pos:position pos:line="89" pos:column="4"/></block> while <condition pos:line="89" pos:column="11">(<expr><literal type="number" pos:line="89" pos:column="12">0<pos:position pos:line="89" pos:column="13"/></literal></expr>)<pos:position pos:line="89" pos:column="14"/></condition>;<pos:position pos:line="89" pos:column="15"/></do>

  <expr_stmt><expr><call><name pos:line="91" pos:column="3">close<pos:position pos:line="91" pos:column="8"/></name> <argument_list pos:line="91" pos:column="9">(<argument><expr><name pos:line="91" pos:column="10">sd<pos:position pos:line="91" pos:column="12"/></name></expr></argument>)<pos:position pos:line="91" pos:column="13"/></argument_list></call></expr>;<pos:position pos:line="91" pos:column="14"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="92" pos:column="3">unlink<pos:position pos:line="92" pos:column="9"/></name> <argument_list pos:line="92" pos:column="10">(<argument><expr><name><name pos:line="92" pos:column="11">sa_unix<pos:position pos:line="92" pos:column="18"/></name><operator pos:line="92" pos:column="18">.<pos:position pos:line="92" pos:column="19"/></operator><name pos:line="92" pos:column="19">sun_path<pos:position pos:line="92" pos:column="27"/></name></name></expr></argument>)<pos:position pos:line="92" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="29"/></expr_stmt>

  <if pos:line="94" pos:column="3">if <condition pos:line="94" pos:column="6">(<expr><name pos:line="94" pos:column="7">status<pos:position pos:line="94" pos:column="13"/></name> <operator pos:line="94" pos:column="14">!=<pos:position pos:line="94" pos:column="16"/></operator> <literal type="number" pos:line="94" pos:column="17">0<pos:position pos:line="94" pos:column="18"/></literal></expr>)<pos:position pos:line="94" pos:column="19"/></condition><then pos:line="94" pos:column="19">
    <block type="pseudo"><return pos:line="95" pos:column="5">return <expr><operator pos:line="95" pos:column="12">(<pos:position pos:line="95" pos:column="13"/></operator><operator pos:line="95" pos:column="13">-<pos:position pos:line="95" pos:column="14"/></operator><literal type="number" pos:line="95" pos:column="14">1<pos:position pos:line="95" pos:column="15"/></literal><operator pos:line="95" pos:column="15">)<pos:position pos:line="95" pos:column="16"/></operator></expr>;<pos:position pos:line="95" pos:column="17"/></return></block></then></if>

  <expr_stmt><expr><call><name pos:line="97" pos:column="3">assert<pos:position pos:line="97" pos:column="9"/></name> <argument_list pos:line="97" pos:column="10">(<argument><expr><name pos:line="97" pos:column="11">buffer_size<pos:position pos:line="97" pos:column="22"/></name> <operator pos:line="97" pos:column="23">&gt;<pos:position pos:line="97" pos:column="27"/></operator> <literal type="number" pos:line="97" pos:column="25">0<pos:position pos:line="97" pos:column="26"/></literal></expr></argument>)<pos:position pos:line="97" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="28"/></expr_stmt>
  <expr_stmt><expr><name pos:line="98" pos:column="3">buffer<pos:position pos:line="98" pos:column="9"/></name> <operator pos:line="98" pos:column="10">=<pos:position pos:line="98" pos:column="11"/></operator> <operator pos:line="98" pos:column="12">(<pos:position pos:line="98" pos:column="13"/></operator><name pos:line="98" pos:column="13">char<pos:position pos:line="98" pos:column="17"/></name> <operator pos:line="98" pos:column="18">*<pos:position pos:line="98" pos:column="19"/></operator><operator pos:line="98" pos:column="19">)<pos:position pos:line="98" pos:column="20"/></operator> <call><name pos:line="98" pos:column="21">malloc<pos:position pos:line="98" pos:column="27"/></name> <argument_list pos:line="98" pos:column="28">(<argument><expr><name pos:line="98" pos:column="29">buffer_size<pos:position pos:line="98" pos:column="40"/></name></expr></argument>)<pos:position pos:line="98" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="98" pos:column="42"/></expr_stmt>
  <if pos:line="99" pos:column="3">if <condition pos:line="99" pos:column="6">(<expr><name pos:line="99" pos:column="7">buffer<pos:position pos:line="99" pos:column="13"/></name> <operator pos:line="99" pos:column="14">==<pos:position pos:line="99" pos:column="16"/></operator> <name pos:line="99" pos:column="17">NULL<pos:position pos:line="99" pos:column="21"/></name></expr>)<pos:position pos:line="99" pos:column="22"/></condition><then pos:line="99" pos:column="22">
  <block pos:line="100" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="101" pos:column="5">FUNC_ERROR<pos:position pos:line="101" pos:column="15"/></name> <argument_list pos:line="101" pos:column="16">(<argument><expr><literal type="string" pos:line="101" pos:column="17">"malloc"<pos:position pos:line="101" pos:column="25"/></literal></expr></argument>)<pos:position pos:line="101" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="101" pos:column="27"/></expr_stmt>
    <return pos:line="102" pos:column="5">return <expr><operator pos:line="102" pos:column="12">(<pos:position pos:line="102" pos:column="13"/></operator><operator pos:line="102" pos:column="13">-<pos:position pos:line="102" pos:column="14"/></operator><literal type="number" pos:line="102" pos:column="14">1<pos:position pos:line="102" pos:column="15"/></literal><operator pos:line="102" pos:column="15">)<pos:position pos:line="102" pos:column="16"/></operator></expr>;<pos:position pos:line="102" pos:column="17"/></return>
  }<pos:position pos:line="103" pos:column="4"/></block></then></if>

  <expr_stmt><expr><call><name pos:line="105" pos:column="3">memcpy<pos:position pos:line="105" pos:column="9"/></name> <argument_list pos:line="105" pos:column="10">(<argument><expr><name pos:line="105" pos:column="11">buffer<pos:position pos:line="105" pos:column="17"/></name></expr></argument>, <argument><expr><name pos:line="105" pos:column="19">temp<pos:position pos:line="105" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="105" pos:column="25">buffer_size<pos:position pos:line="105" pos:column="36"/></name> <operator pos:line="105" pos:column="37">-<pos:position pos:line="105" pos:column="38"/></operator> <literal type="number" pos:line="105" pos:column="39">1<pos:position pos:line="105" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="105" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="105" pos:column="42"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="106" pos:column="3">buffer<pos:position pos:line="106" pos:column="9"/></name><index pos:line="106" pos:column="9">[<expr><name pos:line="106" pos:column="10">buffer_size<pos:position pos:line="106" pos:column="21"/></name> <operator pos:line="106" pos:column="22">-<pos:position pos:line="106" pos:column="23"/></operator> <literal type="number" pos:line="106" pos:column="24">1<pos:position pos:line="106" pos:column="25"/></literal></expr>]<pos:position pos:line="106" pos:column="26"/></index></name> <operator pos:line="106" pos:column="27">=<pos:position pos:line="106" pos:column="28"/></operator> <literal type="number" pos:line="106" pos:column="29">0<pos:position pos:line="106" pos:column="30"/></literal></expr>;<pos:position pos:line="106" pos:column="31"/></expr_stmt>

  <expr_stmt><expr><operator pos:line="108" pos:column="3">*<pos:position pos:line="108" pos:column="4"/></operator><name pos:line="108" pos:column="4">ret_buffer<pos:position pos:line="108" pos:column="14"/></name> <operator pos:line="108" pos:column="15">=<pos:position pos:line="108" pos:column="16"/></operator> <name pos:line="108" pos:column="17">buffer<pos:position pos:line="108" pos:column="23"/></name></expr>;<pos:position pos:line="108" pos:column="24"/></expr_stmt>
  <expr_stmt><expr><operator pos:line="109" pos:column="3">*<pos:position pos:line="109" pos:column="4"/></operator><name pos:line="109" pos:column="4">ret_buffer_size<pos:position pos:line="109" pos:column="19"/></name> <operator pos:line="109" pos:column="20">=<pos:position pos:line="109" pos:column="21"/></operator> <name pos:line="109" pos:column="22">buffer_size<pos:position pos:line="109" pos:column="33"/></name></expr>;<pos:position pos:line="109" pos:column="34"/></expr_stmt>

  <return pos:line="111" pos:column="3">return <expr><operator pos:line="111" pos:column="10">(<pos:position pos:line="111" pos:column="11"/></operator><literal type="number" pos:line="111" pos:column="11">0<pos:position pos:line="111" pos:column="12"/></literal><operator pos:line="111" pos:column="12">)<pos:position pos:line="111" pos:column="13"/></operator></expr>;<pos:position pos:line="111" pos:column="14"/></return>
}<pos:position pos:line="112" pos:column="2"/></block></function></unit>
