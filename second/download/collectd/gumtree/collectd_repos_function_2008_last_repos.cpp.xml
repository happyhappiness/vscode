<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_2008_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">pmu_dispatch_data<pos:position pos:line="1" pos:column="30"/></name><parameter_list pos:line="1" pos:column="30">(<parameter><decl><type><name pos:line="1" pos:column="31">void<pos:position pos:line="1" pos:column="35"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="36"/></parameter_list> <block pos:line="1" pos:column="37">{

  <decl_stmt><decl><type><name><name pos:line="3" pos:column="3">struct<pos:position pos:line="3" pos:column="9"/></name> <name pos:line="3" pos:column="10">event<pos:position pos:line="3" pos:column="15"/></name></name> <modifier pos:line="3" pos:column="16">*<pos:position pos:line="3" pos:column="17"/></modifier></type><name pos:line="3" pos:column="17">e<pos:position pos:line="3" pos:column="18"/></name></decl>;<pos:position pos:line="3" pos:column="19"/></decl_stmt>

  <for pos:line="5" pos:column="3">for <control pos:line="5" pos:column="7">(<init><expr><name pos:line="5" pos:column="8">e<pos:position pos:line="5" pos:column="9"/></name> <operator pos:line="5" pos:column="10">=<pos:position pos:line="5" pos:column="11"/></operator> <name><name pos:line="5" pos:column="12">g_ctx<pos:position pos:line="5" pos:column="17"/></name><operator pos:line="5" pos:column="17">.<pos:position pos:line="5" pos:column="18"/></operator><name pos:line="5" pos:column="18">event_list<pos:position pos:line="5" pos:column="28"/></name><operator pos:line="5" pos:column="28">-&gt;<pos:position pos:line="5" pos:column="33"/></operator><name pos:line="5" pos:column="30">eventlist<pos:position pos:line="5" pos:column="39"/></name></name></expr>;<pos:position pos:line="5" pos:column="40"/></init> <condition><expr><name pos:line="5" pos:column="41">e<pos:position pos:line="5" pos:column="42"/></name></expr>;<pos:position pos:line="5" pos:column="43"/></condition> <incr><expr><name pos:line="5" pos:column="44">e<pos:position pos:line="5" pos:column="45"/></name> <operator pos:line="5" pos:column="46">=<pos:position pos:line="5" pos:column="47"/></operator> <name><name pos:line="5" pos:column="48">e<pos:position pos:line="5" pos:column="49"/></name><operator pos:line="5" pos:column="49">-&gt;<pos:position pos:line="5" pos:column="54"/></operator><name pos:line="5" pos:column="51">next<pos:position pos:line="5" pos:column="55"/></name></name></expr></incr>)<pos:position pos:line="5" pos:column="56"/></control> <block pos:line="5" pos:column="57">{
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">uint64_t<pos:position pos:line="6" pos:column="13"/></name></type> <name pos:line="6" pos:column="14">all_value<pos:position pos:line="6" pos:column="23"/></name> <init pos:line="6" pos:column="24">= <expr><literal type="number" pos:line="6" pos:column="26">0<pos:position pos:line="6" pos:column="27"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="28"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">int<pos:position pos:line="7" pos:column="8"/></name></type> <name pos:line="7" pos:column="9">event_enabled<pos:position pos:line="7" pos:column="22"/></name> <init pos:line="7" pos:column="23">= <expr><literal type="number" pos:line="7" pos:column="25">0<pos:position pos:line="7" pos:column="26"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="27"/></decl_stmt>
    <for pos:line="8" pos:column="5">for <control pos:line="8" pos:column="9">(<init><decl><type><name pos:line="8" pos:column="10">int<pos:position pos:line="8" pos:column="13"/></name></type> <name pos:line="8" pos:column="14">i<pos:position pos:line="8" pos:column="15"/></name> <init pos:line="8" pos:column="16">= <expr><literal type="number" pos:line="8" pos:column="18">0<pos:position pos:line="8" pos:column="19"/></literal></expr></init></decl>;<pos:position pos:line="8" pos:column="20"/></init> <condition><expr><name pos:line="8" pos:column="21">i<pos:position pos:line="8" pos:column="22"/></name> <operator pos:line="8" pos:column="23">&lt;<pos:position pos:line="8" pos:column="27"/></operator> <name><name pos:line="8" pos:column="25">g_ctx<pos:position pos:line="8" pos:column="30"/></name><operator pos:line="8" pos:column="30">.<pos:position pos:line="8" pos:column="31"/></operator><name pos:line="8" pos:column="31">event_list<pos:position pos:line="8" pos:column="41"/></name><operator pos:line="8" pos:column="41">-&gt;<pos:position pos:line="8" pos:column="46"/></operator><name pos:line="8" pos:column="43">num_cpus<pos:position pos:line="8" pos:column="51"/></name></name></expr>;<pos:position pos:line="8" pos:column="52"/></condition> <incr><expr><name pos:line="8" pos:column="53">i<pos:position pos:line="8" pos:column="54"/></name><operator pos:line="8" pos:column="54">++<pos:position pos:line="8" pos:column="56"/></operator></expr></incr>)<pos:position pos:line="8" pos:column="57"/></control> <block pos:line="8" pos:column="58">{

      <if pos:line="10" pos:column="7">if <condition pos:line="10" pos:column="10">(<expr><name><name pos:line="10" pos:column="11">e<pos:position pos:line="10" pos:column="12"/></name><operator pos:line="10" pos:column="12">-&gt;<pos:position pos:line="10" pos:column="17"/></operator><name pos:line="10" pos:column="14">efd<pos:position pos:line="10" pos:column="17"/></name><index pos:line="10" pos:column="17">[<expr><name pos:line="10" pos:column="18">i<pos:position pos:line="10" pos:column="19"/></name></expr>]<pos:position pos:line="10" pos:column="20"/></index></name><operator pos:line="10" pos:column="20">.<pos:position pos:line="10" pos:column="21"/></operator><name pos:line="10" pos:column="21">fd<pos:position pos:line="10" pos:column="23"/></name> <operator pos:line="10" pos:column="24">&lt;<pos:position pos:line="10" pos:column="28"/></operator> <literal type="number" pos:line="10" pos:column="26">0<pos:position pos:line="10" pos:column="27"/></literal></expr>)<pos:position pos:line="10" pos:column="28"/></condition><then pos:line="10" pos:column="28">
        <block type="pseudo"><continue pos:line="11" pos:column="9">continue;<pos:position pos:line="11" pos:column="18"/></continue></block></then></if>

      <expr_stmt><expr><name pos:line="13" pos:column="7">event_enabled<pos:position pos:line="13" pos:column="20"/></name><operator pos:line="13" pos:column="20">++<pos:position pos:line="13" pos:column="22"/></operator></expr>;<pos:position pos:line="13" pos:column="23"/></expr_stmt>

      <comment type="block" pos:line="15" pos:column="7">/* If there are more events than counters, the kernel uses time
       * multiplexing. With multiplexing, at the end of the run,
       * the counter is scaled basing on total time enabled vs time running.
       * final_count = raw_count * time_enabled/time_running
       */</comment>
      <decl_stmt><decl><type><name pos:line="20" pos:column="7">uint64_t<pos:position pos:line="20" pos:column="15"/></name></type> <name pos:line="20" pos:column="16">value<pos:position pos:line="20" pos:column="21"/></name> <init pos:line="20" pos:column="22">= <expr><call><name pos:line="20" pos:column="24">event_scaled_value<pos:position pos:line="20" pos:column="42"/></name><argument_list pos:line="20" pos:column="42">(<argument><expr><name pos:line="20" pos:column="43">e<pos:position pos:line="20" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="46">i<pos:position pos:line="20" pos:column="47"/></name></expr></argument>)<pos:position pos:line="20" pos:column="48"/></argument_list></call></expr></init></decl>;<pos:position pos:line="20" pos:column="49"/></decl_stmt>
      <expr_stmt><expr><name pos:line="21" pos:column="7">all_value<pos:position pos:line="21" pos:column="16"/></name> <operator pos:line="21" pos:column="17">+=<pos:position pos:line="21" pos:column="19"/></operator> <name pos:line="21" pos:column="20">value<pos:position pos:line="21" pos:column="25"/></name></expr>;<pos:position pos:line="21" pos:column="26"/></expr_stmt>

      <comment type="block" pos:line="23" pos:column="7">/* get meta data with information about scaling */</comment>
      <decl_stmt><decl><type><name pos:line="24" pos:column="7">meta_data_t<pos:position pos:line="24" pos:column="18"/></name> <modifier pos:line="24" pos:column="19">*<pos:position pos:line="24" pos:column="20"/></modifier></type><name pos:line="24" pos:column="20">meta<pos:position pos:line="24" pos:column="24"/></name> <init pos:line="24" pos:column="25">= <expr><call><name pos:line="24" pos:column="27">pmu_meta_data_create<pos:position pos:line="24" pos:column="47"/></name><argument_list pos:line="24" pos:column="47">(<argument><expr><operator pos:line="24" pos:column="48">&amp;<pos:position pos:line="24" pos:column="53"/></operator><name><name pos:line="24" pos:column="49">e<pos:position pos:line="24" pos:column="50"/></name><operator pos:line="24" pos:column="50">-&gt;<pos:position pos:line="24" pos:column="55"/></operator><name pos:line="24" pos:column="52">efd<pos:position pos:line="24" pos:column="55"/></name><index pos:line="24" pos:column="55">[<expr><name pos:line="24" pos:column="56">i<pos:position pos:line="24" pos:column="57"/></name></expr>]<pos:position pos:line="24" pos:column="58"/></index></name></expr></argument>)<pos:position pos:line="24" pos:column="59"/></argument_list></call></expr></init></decl>;<pos:position pos:line="24" pos:column="60"/></decl_stmt>

      <comment type="block" pos:line="26" pos:column="7">/* dispatch per CPU value */</comment>
      <expr_stmt><expr><call><name pos:line="27" pos:column="7">pmu_submit_counter<pos:position pos:line="27" pos:column="25"/></name><argument_list pos:line="27" pos:column="25">(<argument><expr><name pos:line="27" pos:column="26">i<pos:position pos:line="27" pos:column="27"/></name></expr></argument>, <argument><expr><name><name pos:line="27" pos:column="29">e<pos:position pos:line="27" pos:column="30"/></name><operator pos:line="27" pos:column="30">-&gt;<pos:position pos:line="27" pos:column="35"/></operator><name pos:line="27" pos:column="32">event<pos:position pos:line="27" pos:column="37"/></name></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="39">value<pos:position pos:line="27" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="46">meta<pos:position pos:line="27" pos:column="50"/></name></expr></argument>)<pos:position pos:line="27" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="52"/></expr_stmt>

      <expr_stmt><expr><call><name pos:line="29" pos:column="7">meta_data_destroy<pos:position pos:line="29" pos:column="24"/></name><argument_list pos:line="29" pos:column="24">(<argument><expr><name pos:line="29" pos:column="25">meta<pos:position pos:line="29" pos:column="29"/></name></expr></argument>)<pos:position pos:line="29" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="31"/></expr_stmt>
    }<pos:position pos:line="30" pos:column="6"/></block></for>

    <if pos:line="32" pos:column="5">if <condition pos:line="32" pos:column="8">(<expr><name pos:line="32" pos:column="9">event_enabled<pos:position pos:line="32" pos:column="22"/></name> <operator pos:line="32" pos:column="23">&gt;<pos:position pos:line="32" pos:column="27"/></operator> <literal type="number" pos:line="32" pos:column="25">0<pos:position pos:line="32" pos:column="26"/></literal></expr>)<pos:position pos:line="32" pos:column="27"/></condition><then pos:line="32" pos:column="27"> <block pos:line="32" pos:column="28">{
      <expr_stmt><expr><call><name pos:line="33" pos:column="7">DEBUG<pos:position pos:line="33" pos:column="12"/></name><argument_list pos:line="33" pos:column="12">(<argument><expr><name pos:line="33" pos:column="13">PMU_PLUGIN<pos:position pos:line="33" pos:column="23"/></name> <literal type="string" pos:line="33" pos:column="24">": %-20s %'10lu"<pos:position pos:line="33" pos:column="40"/></literal></expr></argument>, <argument><expr><name><name pos:line="33" pos:column="42">e<pos:position pos:line="33" pos:column="43"/></name><operator pos:line="33" pos:column="43">-&gt;<pos:position pos:line="33" pos:column="48"/></operator><name pos:line="33" pos:column="45">event<pos:position pos:line="33" pos:column="50"/></name></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="52">all_value<pos:position pos:line="33" pos:column="61"/></name></expr></argument>)<pos:position pos:line="33" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="63"/></expr_stmt>
      <comment type="block" pos:line="34" pos:column="7">/* dispatch all CPU value */</comment>
      <expr_stmt><expr><call><name pos:line="35" pos:column="7">pmu_submit_counter<pos:position pos:line="35" pos:column="25"/></name><argument_list pos:line="35" pos:column="25">(<argument><expr><operator pos:line="35" pos:column="26">-<pos:position pos:line="35" pos:column="27"/></operator><literal type="number" pos:line="35" pos:column="27">1<pos:position pos:line="35" pos:column="28"/></literal></expr></argument>, <argument><expr><name><name pos:line="35" pos:column="30">e<pos:position pos:line="35" pos:column="31"/></name><operator pos:line="35" pos:column="31">-&gt;<pos:position pos:line="35" pos:column="36"/></operator><name pos:line="35" pos:column="33">event<pos:position pos:line="35" pos:column="38"/></name></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="40">all_value<pos:position pos:line="35" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="51">NULL<pos:position pos:line="35" pos:column="55"/></name></expr></argument>)<pos:position pos:line="35" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="57"/></expr_stmt>
    }<pos:position pos:line="36" pos:column="6"/></block></then></if>
  }<pos:position pos:line="37" pos:column="4"/></block></for>
}<pos:position pos:line="38" pos:column="2"/></block></function></unit>
