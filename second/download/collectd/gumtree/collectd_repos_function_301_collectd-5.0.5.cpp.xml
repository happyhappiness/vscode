<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_301_collectd-5.0.5.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">char<pos:position pos:line="1" pos:column="12"/></name> <modifier pos:line="1" pos:column="13">*<pos:position pos:line="1" pos:column="14"/></modifier></type><name pos:line="1" pos:column="14">camqp_strerror<pos:position pos:line="1" pos:column="28"/></name> <parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name pos:line="1" pos:column="30">camqp_config_t<pos:position pos:line="1" pos:column="44"/></name> <modifier pos:line="1" pos:column="45">*<pos:position pos:line="1" pos:column="46"/></modifier></type><name pos:line="1" pos:column="46">conf<pos:position pos:line="1" pos:column="50"/></name></decl></parameter>, <comment type="block" pos:line="1" pos:column="52">/* {{{ */</comment>
        <parameter><decl><type><name pos:line="2" pos:column="9">char<pos:position pos:line="2" pos:column="13"/></name> <modifier pos:line="2" pos:column="14">*<pos:position pos:line="2" pos:column="15"/></modifier></type><name pos:line="2" pos:column="15">buffer<pos:position pos:line="2" pos:column="21"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="23">size_t<pos:position pos:line="2" pos:column="29"/></name></type> <name pos:line="2" pos:column="30">buffer_size<pos:position pos:line="2" pos:column="41"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="42"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">amqp_rpc_reply_t<pos:position pos:line="4" pos:column="21"/></name></type> <name pos:line="4" pos:column="22">r<pos:position pos:line="4" pos:column="23"/></name></decl>;<pos:position pos:line="4" pos:column="24"/></decl_stmt>

    <expr_stmt><expr><name pos:line="6" pos:column="5">r<pos:position pos:line="6" pos:column="6"/></name> <operator pos:line="6" pos:column="7">=<pos:position pos:line="6" pos:column="8"/></operator> <call><name pos:line="6" pos:column="9">amqp_get_rpc_reply<pos:position pos:line="6" pos:column="27"/></name> <argument_list pos:line="6" pos:column="28">(<argument><expr><name><name pos:line="6" pos:column="29">conf<pos:position pos:line="6" pos:column="33"/></name><operator pos:line="6" pos:column="33">-&gt;<pos:position pos:line="6" pos:column="38"/></operator><name pos:line="6" pos:column="35">connection<pos:position pos:line="6" pos:column="45"/></name></name></expr></argument>)<pos:position pos:line="6" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="47"/></expr_stmt>
    <switch pos:line="7" pos:column="5">switch <condition pos:line="7" pos:column="12">(<expr><name><name pos:line="7" pos:column="13">r<pos:position pos:line="7" pos:column="14"/></name><operator pos:line="7" pos:column="14">.<pos:position pos:line="7" pos:column="15"/></operator><name pos:line="7" pos:column="15">reply_type<pos:position pos:line="7" pos:column="25"/></name></name></expr>)<pos:position pos:line="7" pos:column="26"/></condition>
    <block pos:line="8" pos:column="5">{
        <case pos:line="9" pos:column="9">case <expr><name pos:line="9" pos:column="14">AMQP_RESPONSE_NORMAL<pos:position pos:line="9" pos:column="34"/></name></expr>:<pos:position pos:line="9" pos:column="35"/></case>
            <expr_stmt><expr><call><name pos:line="10" pos:column="13">sstrncpy<pos:position pos:line="10" pos:column="21"/></name> <argument_list pos:line="10" pos:column="22">(<argument><expr><name pos:line="10" pos:column="23">buffer<pos:position pos:line="10" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="10" pos:column="31">"Success"<pos:position pos:line="10" pos:column="40"/></literal></expr></argument>, <argument><expr><sizeof pos:line="10" pos:column="42">sizeof <argument_list pos:line="10" pos:column="49">(<argument><expr><name pos:line="10" pos:column="50">buffer<pos:position pos:line="10" pos:column="56"/></name></expr></argument>)<pos:position pos:line="10" pos:column="57"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="10" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="59"/></expr_stmt>
            <break pos:line="11" pos:column="13">break;<pos:position pos:line="11" pos:column="19"/></break>

        <case pos:line="13" pos:column="9">case <expr><name pos:line="13" pos:column="14">AMQP_RESPONSE_NONE<pos:position pos:line="13" pos:column="32"/></name></expr>:<pos:position pos:line="13" pos:column="33"/></case>
            <expr_stmt><expr><call><name pos:line="14" pos:column="13">sstrncpy<pos:position pos:line="14" pos:column="21"/></name> <argument_list pos:line="14" pos:column="22">(<argument><expr><name pos:line="14" pos:column="23">buffer<pos:position pos:line="14" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="14" pos:column="31">"Missing RPC reply type"<pos:position pos:line="14" pos:column="55"/></literal></expr></argument>, <argument><expr><sizeof pos:line="14" pos:column="57">sizeof <argument_list pos:line="14" pos:column="64">(<argument><expr><name pos:line="14" pos:column="65">buffer<pos:position pos:line="14" pos:column="71"/></name></expr></argument>)<pos:position pos:line="14" pos:column="72"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="14" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="74"/></expr_stmt>
            <break pos:line="15" pos:column="13">break;<pos:position pos:line="15" pos:column="19"/></break>

        <case pos:line="17" pos:column="9">case <expr><name pos:line="17" pos:column="14">AMQP_RESPONSE_LIBRARY_EXCEPTION<pos:position pos:line="17" pos:column="45"/></name></expr>:<pos:position pos:line="17" pos:column="46"/></case>
<cpp:if pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">if<pos:position pos:line="18" pos:column="4"/></cpp:directive> <expr><name pos:line="18" pos:column="5">HAVE_AMQP_RPC_REPLY_T_LIBRARY_ERRNO<pos:position pos:line="18" pos:column="40"/></name></expr></cpp:if>
            <if pos:line="19" pos:column="13">if <condition pos:line="19" pos:column="16">(<expr><name><name pos:line="19" pos:column="17">r<pos:position pos:line="19" pos:column="18"/></name><operator pos:line="19" pos:column="18">.<pos:position pos:line="19" pos:column="19"/></operator><name pos:line="19" pos:column="19">library_errno<pos:position pos:line="19" pos:column="32"/></name></name></expr>)<pos:position pos:line="19" pos:column="33"/></condition><then pos:line="19" pos:column="33">
                <block type="pseudo"><return pos:line="20" pos:column="17">return <expr><operator pos:line="20" pos:column="24">(<pos:position pos:line="20" pos:column="25"/></operator><call><name pos:line="20" pos:column="25">sstrerror<pos:position pos:line="20" pos:column="34"/></name> <argument_list pos:line="20" pos:column="35">(<argument><expr><name><name pos:line="20" pos:column="36">r<pos:position pos:line="20" pos:column="37"/></name><operator pos:line="20" pos:column="37">.<pos:position pos:line="20" pos:column="38"/></operator><name pos:line="20" pos:column="38">library_errno<pos:position pos:line="20" pos:column="51"/></name></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="53">buffer<pos:position pos:line="20" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="61">buffer_size<pos:position pos:line="20" pos:column="72"/></name></expr></argument>)<pos:position pos:line="20" pos:column="73"/></argument_list></call><operator pos:line="20" pos:column="73">)<pos:position pos:line="20" pos:column="74"/></operator></expr>;<pos:position pos:line="20" pos:column="75"/></return></block></then></if>
<cpp:else pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">else<pos:position pos:line="21" pos:column="6"/></cpp:directive></cpp:else>
            <if pos:line="22" pos:column="13">if <condition pos:line="22" pos:column="16">(<expr><name><name pos:line="22" pos:column="17">r<pos:position pos:line="22" pos:column="18"/></name><operator pos:line="22" pos:column="18">.<pos:position pos:line="22" pos:column="19"/></operator><name pos:line="22" pos:column="19">library_error<pos:position pos:line="22" pos:column="32"/></name></name></expr>)<pos:position pos:line="22" pos:column="33"/></condition><then pos:line="22" pos:column="33">
                <block type="pseudo"><return pos:line="23" pos:column="17">return <expr><operator pos:line="23" pos:column="24">(<pos:position pos:line="23" pos:column="25"/></operator><call><name pos:line="23" pos:column="25">sstrerror<pos:position pos:line="23" pos:column="34"/></name> <argument_list pos:line="23" pos:column="35">(<argument><expr><name><name pos:line="23" pos:column="36">r<pos:position pos:line="23" pos:column="37"/></name><operator pos:line="23" pos:column="37">.<pos:position pos:line="23" pos:column="38"/></operator><name pos:line="23" pos:column="38">library_error<pos:position pos:line="23" pos:column="51"/></name></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="53">buffer<pos:position pos:line="23" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="61">buffer_size<pos:position pos:line="23" pos:column="72"/></name></expr></argument>)<pos:position pos:line="23" pos:column="73"/></argument_list></call><operator pos:line="23" pos:column="73">)<pos:position pos:line="23" pos:column="74"/></operator></expr>;<pos:position pos:line="23" pos:column="75"/></return></block></then>
<cpp:endif pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">endif<pos:position pos:line="24" pos:column="7"/></cpp:directive></cpp:endif>
            <else pos:line="25" pos:column="13">else
                <block type="pseudo"><expr_stmt><expr><call><name pos:line="26" pos:column="17">sstrncpy<pos:position pos:line="26" pos:column="25"/></name> <argument_list pos:line="26" pos:column="26">(<argument><expr><name pos:line="26" pos:column="27">buffer<pos:position pos:line="26" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="26" pos:column="35">"End of stream"<pos:position pos:line="26" pos:column="50"/></literal></expr></argument>, <argument><expr><sizeof pos:line="26" pos:column="52">sizeof <argument_list pos:line="26" pos:column="59">(<argument><expr><name pos:line="26" pos:column="60">buffer<pos:position pos:line="26" pos:column="66"/></name></expr></argument>)<pos:position pos:line="26" pos:column="67"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="26" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="69"/></expr_stmt></block></else></if>
            <break pos:line="27" pos:column="13">break;<pos:position pos:line="27" pos:column="19"/></break>

        <case pos:line="29" pos:column="9">case <expr><name pos:line="29" pos:column="14">AMQP_RESPONSE_SERVER_EXCEPTION<pos:position pos:line="29" pos:column="44"/></name></expr>:<pos:position pos:line="29" pos:column="45"/></case>
            <if pos:line="30" pos:column="13">if <condition pos:line="30" pos:column="16">(<expr><name><name pos:line="30" pos:column="17">r<pos:position pos:line="30" pos:column="18"/></name><operator pos:line="30" pos:column="18">.<pos:position pos:line="30" pos:column="19"/></operator><name pos:line="30" pos:column="19">reply<pos:position pos:line="30" pos:column="24"/></name><operator pos:line="30" pos:column="24">.<pos:position pos:line="30" pos:column="25"/></operator><name pos:line="30" pos:column="25">id<pos:position pos:line="30" pos:column="27"/></name></name> <operator pos:line="30" pos:column="28">==<pos:position pos:line="30" pos:column="30"/></operator> <name pos:line="30" pos:column="31">AMQP_CONNECTION_CLOSE_METHOD<pos:position pos:line="30" pos:column="59"/></name></expr>)<pos:position pos:line="30" pos:column="60"/></condition><then pos:line="30" pos:column="60">
            <block pos:line="31" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="32" pos:column="17">amqp_connection_close_t<pos:position pos:line="32" pos:column="40"/></name> <modifier pos:line="32" pos:column="41">*<pos:position pos:line="32" pos:column="42"/></modifier></type><name pos:line="32" pos:column="42">m<pos:position pos:line="32" pos:column="43"/></name> <init pos:line="32" pos:column="44">= <expr><name><name pos:line="32" pos:column="46">r<pos:position pos:line="32" pos:column="47"/></name><operator pos:line="32" pos:column="47">.<pos:position pos:line="32" pos:column="48"/></operator><name pos:line="32" pos:column="48">reply<pos:position pos:line="32" pos:column="53"/></name><operator pos:line="32" pos:column="53">.<pos:position pos:line="32" pos:column="54"/></operator><name pos:line="32" pos:column="54">decoded<pos:position pos:line="32" pos:column="61"/></name></name></expr></init></decl>;<pos:position pos:line="32" pos:column="62"/></decl_stmt>
                <decl_stmt><decl><type><name pos:line="33" pos:column="17">char<pos:position pos:line="33" pos:column="21"/></name> <modifier pos:line="33" pos:column="22">*<pos:position pos:line="33" pos:column="23"/></modifier></type><name pos:line="33" pos:column="23">tmp<pos:position pos:line="33" pos:column="26"/></name> <init pos:line="33" pos:column="27">= <expr><call><name pos:line="33" pos:column="29">camqp_bytes_cstring<pos:position pos:line="33" pos:column="48"/></name> <argument_list pos:line="33" pos:column="49">(<argument><expr><operator pos:line="33" pos:column="50">&amp;<pos:position pos:line="33" pos:column="55"/></operator><name><name pos:line="33" pos:column="51">m<pos:position pos:line="33" pos:column="52"/></name><operator pos:line="33" pos:column="52">-&gt;<pos:position pos:line="33" pos:column="57"/></operator><name pos:line="33" pos:column="54">reply_text<pos:position pos:line="33" pos:column="64"/></name></name></expr></argument>)<pos:position pos:line="33" pos:column="65"/></argument_list></call></expr></init></decl>;<pos:position pos:line="33" pos:column="66"/></decl_stmt>
                <expr_stmt><expr><call><name pos:line="34" pos:column="17">ssnprintf<pos:position pos:line="34" pos:column="26"/></name> <argument_list pos:line="34" pos:column="27">(<argument><expr><name pos:line="34" pos:column="28">buffer<pos:position pos:line="34" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="36">buffer_size<pos:position pos:line="34" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="34" pos:column="49">"Server connection error %d: %s"<pos:position pos:line="34" pos:column="81"/></literal></expr></argument>,
                        <argument><expr><name><name pos:line="35" pos:column="25">m<pos:position pos:line="35" pos:column="26"/></name><operator pos:line="35" pos:column="26">-&gt;<pos:position pos:line="35" pos:column="31"/></operator><name pos:line="35" pos:column="28">reply_code<pos:position pos:line="35" pos:column="38"/></name></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="40">tmp<pos:position pos:line="35" pos:column="43"/></name></expr></argument>)<pos:position pos:line="35" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="45"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="36" pos:column="17">sfree<pos:position pos:line="36" pos:column="22"/></name> <argument_list pos:line="36" pos:column="23">(<argument><expr><name pos:line="36" pos:column="24">tmp<pos:position pos:line="36" pos:column="27"/></name></expr></argument>)<pos:position pos:line="36" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="29"/></expr_stmt>
            }<pos:position pos:line="37" pos:column="14"/></block></then>
            <elseif pos:line="38" pos:column="13">else <if pos:line="38" pos:column="18">if <condition pos:line="38" pos:column="21">(<expr><name><name pos:line="38" pos:column="22">r<pos:position pos:line="38" pos:column="23"/></name><operator pos:line="38" pos:column="23">.<pos:position pos:line="38" pos:column="24"/></operator><name pos:line="38" pos:column="24">reply<pos:position pos:line="38" pos:column="29"/></name><operator pos:line="38" pos:column="29">.<pos:position pos:line="38" pos:column="30"/></operator><name pos:line="38" pos:column="30">id<pos:position pos:line="38" pos:column="32"/></name></name> <operator pos:line="38" pos:column="33">==<pos:position pos:line="38" pos:column="35"/></operator> <name pos:line="38" pos:column="36">AMQP_CHANNEL_CLOSE_METHOD<pos:position pos:line="38" pos:column="61"/></name></expr>)<pos:position pos:line="38" pos:column="62"/></condition><then pos:line="38" pos:column="62">
            <block pos:line="39" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="40" pos:column="17">amqp_channel_close_t<pos:position pos:line="40" pos:column="37"/></name> <modifier pos:line="40" pos:column="38">*<pos:position pos:line="40" pos:column="39"/></modifier></type><name pos:line="40" pos:column="39">m<pos:position pos:line="40" pos:column="40"/></name> <init pos:line="40" pos:column="41">= <expr><name><name pos:line="40" pos:column="43">r<pos:position pos:line="40" pos:column="44"/></name><operator pos:line="40" pos:column="44">.<pos:position pos:line="40" pos:column="45"/></operator><name pos:line="40" pos:column="45">reply<pos:position pos:line="40" pos:column="50"/></name><operator pos:line="40" pos:column="50">.<pos:position pos:line="40" pos:column="51"/></operator><name pos:line="40" pos:column="51">decoded<pos:position pos:line="40" pos:column="58"/></name></name></expr></init></decl>;<pos:position pos:line="40" pos:column="59"/></decl_stmt>
                <decl_stmt><decl><type><name pos:line="41" pos:column="17">char<pos:position pos:line="41" pos:column="21"/></name> <modifier pos:line="41" pos:column="22">*<pos:position pos:line="41" pos:column="23"/></modifier></type><name pos:line="41" pos:column="23">tmp<pos:position pos:line="41" pos:column="26"/></name> <init pos:line="41" pos:column="27">= <expr><call><name pos:line="41" pos:column="29">camqp_bytes_cstring<pos:position pos:line="41" pos:column="48"/></name> <argument_list pos:line="41" pos:column="49">(<argument><expr><operator pos:line="41" pos:column="50">&amp;<pos:position pos:line="41" pos:column="55"/></operator><name><name pos:line="41" pos:column="51">m<pos:position pos:line="41" pos:column="52"/></name><operator pos:line="41" pos:column="52">-&gt;<pos:position pos:line="41" pos:column="57"/></operator><name pos:line="41" pos:column="54">reply_text<pos:position pos:line="41" pos:column="64"/></name></name></expr></argument>)<pos:position pos:line="41" pos:column="65"/></argument_list></call></expr></init></decl>;<pos:position pos:line="41" pos:column="66"/></decl_stmt>
                <expr_stmt><expr><call><name pos:line="42" pos:column="17">ssnprintf<pos:position pos:line="42" pos:column="26"/></name> <argument_list pos:line="42" pos:column="27">(<argument><expr><name pos:line="42" pos:column="28">buffer<pos:position pos:line="42" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="36">buffer_size<pos:position pos:line="42" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="42" pos:column="49">"Server channel error %d: %s"<pos:position pos:line="42" pos:column="78"/></literal></expr></argument>,
                        <argument><expr><name><name pos:line="43" pos:column="25">m<pos:position pos:line="43" pos:column="26"/></name><operator pos:line="43" pos:column="26">-&gt;<pos:position pos:line="43" pos:column="31"/></operator><name pos:line="43" pos:column="28">reply_code<pos:position pos:line="43" pos:column="38"/></name></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="40">tmp<pos:position pos:line="43" pos:column="43"/></name></expr></argument>)<pos:position pos:line="43" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="45"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="44" pos:column="17">sfree<pos:position pos:line="44" pos:column="22"/></name> <argument_list pos:line="44" pos:column="23">(<argument><expr><name pos:line="44" pos:column="24">tmp<pos:position pos:line="44" pos:column="27"/></name></expr></argument>)<pos:position pos:line="44" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="29"/></expr_stmt>
            }<pos:position pos:line="45" pos:column="14"/></block></then></if></elseif>
            <else pos:line="46" pos:column="13">else
            <block pos:line="47" pos:column="13">{
                <expr_stmt><expr><call><name pos:line="48" pos:column="17">ssnprintf<pos:position pos:line="48" pos:column="26"/></name> <argument_list pos:line="48" pos:column="27">(<argument><expr><name pos:line="48" pos:column="28">buffer<pos:position pos:line="48" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="36">buffer_size<pos:position pos:line="48" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="48" pos:column="49">"Server error method %#"<pos:position pos:line="48" pos:column="73"/></literal><name pos:line="48" pos:column="73">PRIx32<pos:position pos:line="48" pos:column="79"/></name></expr></argument>,
                        <argument><expr><name><name pos:line="49" pos:column="25">r<pos:position pos:line="49" pos:column="26"/></name><operator pos:line="49" pos:column="26">.<pos:position pos:line="49" pos:column="27"/></operator><name pos:line="49" pos:column="27">reply<pos:position pos:line="49" pos:column="32"/></name><operator pos:line="49" pos:column="32">.<pos:position pos:line="49" pos:column="33"/></operator><name pos:line="49" pos:column="33">id<pos:position pos:line="49" pos:column="35"/></name></name></expr></argument>)<pos:position pos:line="49" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="37"/></expr_stmt>
            }<pos:position pos:line="50" pos:column="14"/></block></else></if>
            <break pos:line="51" pos:column="13">break;<pos:position pos:line="51" pos:column="19"/></break>

        <default pos:line="53" pos:column="9">default:<pos:position pos:line="53" pos:column="17"/></default>
            <expr_stmt><expr><call><name pos:line="54" pos:column="13">ssnprintf<pos:position pos:line="54" pos:column="22"/></name> <argument_list pos:line="54" pos:column="23">(<argument><expr><name pos:line="54" pos:column="24">buffer<pos:position pos:line="54" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="32">buffer_size<pos:position pos:line="54" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="54" pos:column="45">"Unknown reply type %i"<pos:position pos:line="54" pos:column="68"/></literal></expr></argument>,
                    <argument><expr><operator pos:line="55" pos:column="21">(<pos:position pos:line="55" pos:column="22"/></operator><name pos:line="55" pos:column="22">int<pos:position pos:line="55" pos:column="25"/></name><operator pos:line="55" pos:column="25">)<pos:position pos:line="55" pos:column="26"/></operator> <name><name pos:line="55" pos:column="27">r<pos:position pos:line="55" pos:column="28"/></name><operator pos:line="55" pos:column="28">.<pos:position pos:line="55" pos:column="29"/></operator><name pos:line="55" pos:column="29">reply_type<pos:position pos:line="55" pos:column="39"/></name></name></expr></argument>)<pos:position pos:line="55" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="41"/></expr_stmt>
    }<pos:position pos:line="56" pos:column="6"/></block></switch>

    <return pos:line="58" pos:column="5">return <expr><operator pos:line="58" pos:column="12">(<pos:position pos:line="58" pos:column="13"/></operator><name pos:line="58" pos:column="13">buffer<pos:position pos:line="58" pos:column="19"/></name><operator pos:line="58" pos:column="19">)<pos:position pos:line="58" pos:column="20"/></operator></expr>;<pos:position pos:line="58" pos:column="21"/></return>
}<pos:position pos:line="59" pos:column="2"/></block></function></unit>
