<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1488_collectd-5.7.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">sensor_list_read_all<pos:position pos:line="1" pos:column="32"/></name><parameter_list pos:line="1" pos:column="32">(<parameter><decl><type><name pos:line="1" pos:column="33">void<pos:position pos:line="1" pos:column="37"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="38"/></parameter_list> <block pos:line="1" pos:column="39">{
  <expr_stmt><expr><call><name pos:line="2" pos:column="3">pthread_mutex_lock<pos:position pos:line="2" pos:column="21"/></name><argument_list pos:line="2" pos:column="21">(<argument><expr><operator pos:line="2" pos:column="22">&amp;<pos:position pos:line="2" pos:column="27"/></operator><name pos:line="2" pos:column="23">sensor_list_lock<pos:position pos:line="2" pos:column="39"/></name></expr></argument>)<pos:position pos:line="2" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="2" pos:column="41"/></expr_stmt>

  <for pos:line="4" pos:column="3">for <control pos:line="4" pos:column="7">(<init><decl><type><name pos:line="4" pos:column="8">c_ipmi_sensor_list_t<pos:position pos:line="4" pos:column="28"/></name> <modifier pos:line="4" pos:column="29">*<pos:position pos:line="4" pos:column="30"/></modifier></type><name pos:line="4" pos:column="30">list_item<pos:position pos:line="4" pos:column="39"/></name> <init pos:line="4" pos:column="40">= <expr><name pos:line="4" pos:column="42">sensor_list<pos:position pos:line="4" pos:column="53"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="54"/></init> <condition><expr><name pos:line="4" pos:column="55">list_item<pos:position pos:line="4" pos:column="64"/></name> <operator pos:line="4" pos:column="65">!=<pos:position pos:line="4" pos:column="67"/></operator> <name pos:line="4" pos:column="68">NULL<pos:position pos:line="4" pos:column="72"/></name></expr>;<pos:position pos:line="4" pos:column="73"/></condition>
       <incr><expr><name pos:line="5" pos:column="8">list_item<pos:position pos:line="5" pos:column="17"/></name> <operator pos:line="5" pos:column="18">=<pos:position pos:line="5" pos:column="19"/></operator> <name><name pos:line="5" pos:column="20">list_item<pos:position pos:line="5" pos:column="29"/></name><operator pos:line="5" pos:column="29">-&gt;<pos:position pos:line="5" pos:column="34"/></operator><name pos:line="5" pos:column="31">next<pos:position pos:line="5" pos:column="35"/></name></name></expr></incr>)<pos:position pos:line="5" pos:column="36"/></control> <block pos:line="5" pos:column="37">{
    <expr_stmt><expr><call><name pos:line="6" pos:column="5">ipmi_sensor_id_get_reading<pos:position pos:line="6" pos:column="31"/></name><argument_list pos:line="6" pos:column="31">(<argument><expr><name><name pos:line="6" pos:column="32">list_item<pos:position pos:line="6" pos:column="41"/></name><operator pos:line="6" pos:column="41">-&gt;<pos:position pos:line="6" pos:column="46"/></operator><name pos:line="6" pos:column="43">sensor_id<pos:position pos:line="6" pos:column="52"/></name></name></expr></argument>, <argument><expr><name pos:line="6" pos:column="54">sensor_read_handler<pos:position pos:line="6" pos:column="73"/></name></expr></argument>,
                               <comment type="block" pos:line="7" pos:column="32">/* user data = */</comment> <argument><expr><name pos:line="7" pos:column="50">list_item<pos:position pos:line="7" pos:column="59"/></name></expr></argument>)<pos:position pos:line="7" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="61"/></expr_stmt>
  }<pos:position pos:line="8" pos:column="4"/></block></for> <comment type="block" pos:line="8" pos:column="5">/* for (list_item) */</comment>

  <expr_stmt><expr><call><name pos:line="10" pos:column="3">pthread_mutex_unlock<pos:position pos:line="10" pos:column="23"/></name><argument_list pos:line="10" pos:column="23">(<argument><expr><operator pos:line="10" pos:column="24">&amp;<pos:position pos:line="10" pos:column="29"/></operator><name pos:line="10" pos:column="25">sensor_list_lock<pos:position pos:line="10" pos:column="41"/></name></expr></argument>)<pos:position pos:line="10" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="43"/></expr_stmt>

  <return pos:line="12" pos:column="3">return <expr><operator pos:line="12" pos:column="10">(<pos:position pos:line="12" pos:column="11"/></operator><literal type="number" pos:line="12" pos:column="11">0<pos:position pos:line="12" pos:column="12"/></literal><operator pos:line="12" pos:column="12">)<pos:position pos:line="12" pos:column="13"/></operator></expr>;<pos:position pos:line="12" pos:column="14"/></return>
}<pos:position pos:line="13" pos:column="2"/></block></function></unit>
