<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_2339_collectd-5.6.3.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">ignorelist_t<pos:position pos:line="1" pos:column="13"/></name> <modifier pos:line="1" pos:column="14">*<pos:position pos:line="1" pos:column="15"/></modifier></type><name pos:line="1" pos:column="15">ignorelist_create<pos:position pos:line="1" pos:column="32"/></name><parameter_list pos:line="1" pos:column="32">(<parameter><decl><type><name pos:line="1" pos:column="33">int<pos:position pos:line="1" pos:column="36"/></name></type> <name pos:line="1" pos:column="37">invert<pos:position pos:line="1" pos:column="43"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="44"/></parameter_list> <block pos:line="1" pos:column="45">{
  <decl_stmt><decl><type><name pos:line="2" pos:column="3">ignorelist_t<pos:position pos:line="2" pos:column="15"/></name> <modifier pos:line="2" pos:column="16">*<pos:position pos:line="2" pos:column="17"/></modifier></type><name pos:line="2" pos:column="17">il<pos:position pos:line="2" pos:column="19"/></name></decl>;<pos:position pos:line="2" pos:column="20"/></decl_stmt>

  <expr_stmt><expr><name pos:line="4" pos:column="3">il<pos:position pos:line="4" pos:column="5"/></name> <operator pos:line="4" pos:column="6">=<pos:position pos:line="4" pos:column="7"/></operator> <call><name pos:line="4" pos:column="8">calloc<pos:position pos:line="4" pos:column="14"/></name><argument_list pos:line="4" pos:column="14">(<argument><expr><literal type="number" pos:line="4" pos:column="15">1<pos:position pos:line="4" pos:column="16"/></literal></expr></argument>, <argument><expr><sizeof pos:line="4" pos:column="18">sizeof<argument_list pos:line="4" pos:column="24">(<argument><expr><operator pos:line="4" pos:column="25">*<pos:position pos:line="4" pos:column="26"/></operator><name pos:line="4" pos:column="26">il<pos:position pos:line="4" pos:column="28"/></name></expr></argument>)<pos:position pos:line="4" pos:column="29"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="4" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="31"/></expr_stmt>
  <if pos:line="5" pos:column="3">if <condition pos:line="5" pos:column="6">(<expr><name pos:line="5" pos:column="7">il<pos:position pos:line="5" pos:column="9"/></name> <operator pos:line="5" pos:column="10">==<pos:position pos:line="5" pos:column="12"/></operator> <name pos:line="5" pos:column="13">NULL<pos:position pos:line="5" pos:column="17"/></name></expr>)<pos:position pos:line="5" pos:column="18"/></condition><then pos:line="5" pos:column="18">
    <block type="pseudo"><return pos:line="6" pos:column="5">return <expr><name pos:line="6" pos:column="12">NULL<pos:position pos:line="6" pos:column="16"/></name></expr>;<pos:position pos:line="6" pos:column="17"/></return></block></then></if>

  <comment type="block" pos:line="8" pos:column="3">/*
   * -&gt;ignore == 0  =&gt;  collect
   * -&gt;ignore == 1  =&gt;  ignore
   */</comment>
  <expr_stmt><expr><name><name pos:line="12" pos:column="3">il<pos:position pos:line="12" pos:column="5"/></name><operator pos:line="12" pos:column="5">-&gt;<pos:position pos:line="12" pos:column="10"/></operator><name pos:line="12" pos:column="7">ignore<pos:position pos:line="12" pos:column="13"/></name></name> <operator pos:line="12" pos:column="14">=<pos:position pos:line="12" pos:column="15"/></operator> <ternary><condition><expr><name pos:line="12" pos:column="16">invert<pos:position pos:line="12" pos:column="22"/></name></expr> ?<pos:position pos:line="12" pos:column="24"/></condition><then pos:line="12" pos:column="24"> <expr><literal type="number" pos:line="12" pos:column="25">0<pos:position pos:line="12" pos:column="26"/></literal></expr> <pos:position pos:line="12" pos:column="27"/></then><else pos:line="12" pos:column="27">: <expr><literal type="number" pos:line="12" pos:column="29">1<pos:position pos:line="12" pos:column="30"/></literal></expr></else></ternary></expr>;<pos:position pos:line="12" pos:column="31"/></expr_stmt>

  <return pos:line="14" pos:column="3">return <expr><operator pos:line="14" pos:column="10">(<pos:position pos:line="14" pos:column="11"/></operator><name pos:line="14" pos:column="11">il<pos:position pos:line="14" pos:column="13"/></name><operator pos:line="14" pos:column="13">)<pos:position pos:line="14" pos:column="14"/></operator></expr>;<pos:position pos:line="14" pos:column="15"/></return>
}<pos:position pos:line="15" pos:column="2"/></block></function></unit>
