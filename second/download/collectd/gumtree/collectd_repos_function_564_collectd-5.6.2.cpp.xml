<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_564_collectd-5.6.2.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">collectd_barometer_config<pos:position pos:line="1" pos:column="37"/></name><parameter_list pos:line="1" pos:column="37">(<parameter><decl><type><specifier pos:line="1" pos:column="38">const<pos:position pos:line="1" pos:column="43"/></specifier> <name pos:line="1" pos:column="44">char<pos:position pos:line="1" pos:column="48"/></name> <modifier pos:line="1" pos:column="49">*<pos:position pos:line="1" pos:column="50"/></modifier></type><name pos:line="1" pos:column="50">key<pos:position pos:line="1" pos:column="53"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="55">const<pos:position pos:line="1" pos:column="60"/></specifier> <name pos:line="1" pos:column="61">char<pos:position pos:line="1" pos:column="65"/></name> <modifier pos:line="1" pos:column="66">*<pos:position pos:line="1" pos:column="67"/></modifier></type><name pos:line="1" pos:column="67">value<pos:position pos:line="1" pos:column="72"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="73"/></parameter_list> <block pos:line="1" pos:column="74">{
  <expr_stmt><expr><call><name pos:line="2" pos:column="3">DEBUG<pos:position pos:line="2" pos:column="8"/></name><argument_list pos:line="2" pos:column="8">(<argument><expr><literal type="string" pos:line="2" pos:column="9">"barometer: collectd_barometer_config"<pos:position pos:line="2" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="2" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="2" pos:column="49"/></expr_stmt>

  <if pos:line="4" pos:column="3">if <condition pos:line="4" pos:column="6">(<expr><call><name pos:line="4" pos:column="7">strcasecmp<pos:position pos:line="4" pos:column="17"/></name><argument_list pos:line="4" pos:column="17">(<argument><expr><name pos:line="4" pos:column="18">key<pos:position pos:line="4" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="4" pos:column="23">"Device"<pos:position pos:line="4" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="4" pos:column="32"/></argument_list></call> <operator pos:line="4" pos:column="33">==<pos:position pos:line="4" pos:column="35"/></operator> <literal type="number" pos:line="4" pos:column="36">0<pos:position pos:line="4" pos:column="37"/></literal></expr>)<pos:position pos:line="4" pos:column="38"/></condition><then pos:line="4" pos:column="38"> <block pos:line="4" pos:column="39">{
    <expr_stmt><expr><call><name pos:line="5" pos:column="5">sfree<pos:position pos:line="5" pos:column="10"/></name><argument_list pos:line="5" pos:column="10">(<argument><expr><name pos:line="5" pos:column="11">config_device<pos:position pos:line="5" pos:column="24"/></name></expr></argument>)<pos:position pos:line="5" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><name pos:line="6" pos:column="5">config_device<pos:position pos:line="6" pos:column="18"/></name> <operator pos:line="6" pos:column="19">=<pos:position pos:line="6" pos:column="20"/></operator> <call><name pos:line="6" pos:column="21">strdup<pos:position pos:line="6" pos:column="27"/></name><argument_list pos:line="6" pos:column="27">(<argument><expr><name pos:line="6" pos:column="28">value<pos:position pos:line="6" pos:column="33"/></name></expr></argument>)<pos:position pos:line="6" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="35"/></expr_stmt>
  }<pos:position pos:line="7" pos:column="4"/></block></then> <elseif pos:line="7" pos:column="5">else <if pos:line="7" pos:column="10">if <condition pos:line="7" pos:column="13">(<expr><call><name pos:line="7" pos:column="14">strcasecmp<pos:position pos:line="7" pos:column="24"/></name><argument_list pos:line="7" pos:column="24">(<argument><expr><name pos:line="7" pos:column="25">key<pos:position pos:line="7" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="7" pos:column="30">"Oversampling"<pos:position pos:line="7" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="45"/></argument_list></call> <operator pos:line="7" pos:column="46">==<pos:position pos:line="7" pos:column="48"/></operator> <literal type="number" pos:line="7" pos:column="49">0<pos:position pos:line="7" pos:column="50"/></literal></expr>)<pos:position pos:line="7" pos:column="51"/></condition><then pos:line="7" pos:column="51"> <block pos:line="7" pos:column="52">{
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">int<pos:position pos:line="8" pos:column="8"/></name></type> <name pos:line="8" pos:column="9">oversampling_tmp<pos:position pos:line="8" pos:column="25"/></name> <init pos:line="8" pos:column="26">= <expr><call><name pos:line="8" pos:column="28">atoi<pos:position pos:line="8" pos:column="32"/></name><argument_list pos:line="8" pos:column="32">(<argument><expr><name pos:line="8" pos:column="33">value<pos:position pos:line="8" pos:column="38"/></name></expr></argument>)<pos:position pos:line="8" pos:column="39"/></argument_list></call></expr></init></decl>;<pos:position pos:line="8" pos:column="40"/></decl_stmt>
    <if pos:line="9" pos:column="5">if <condition pos:line="9" pos:column="8">(<expr><name><name pos:line="9" pos:column="9">oversampling_tmp<pos:position pos:line="9" pos:column="25"/></name> <argument_list type="generic" pos:line="9" pos:column="26">&lt; <argument><expr><literal type="number" pos:line="9" pos:column="28">1<pos:position pos:line="9" pos:column="29"/></literal> <operator pos:line="9" pos:column="30">||<pos:position pos:line="9" pos:column="32"/></operator> <name pos:line="9" pos:column="33">oversampling_tmp<pos:position pos:line="9" pos:column="49"/></name></expr></argument> &gt;<pos:position pos:line="9" pos:column="54"/></argument_list></name> <literal type="number" pos:line="9" pos:column="52">1024<pos:position pos:line="9" pos:column="56"/></literal></expr>)<pos:position pos:line="9" pos:column="57"/></condition><then pos:line="9" pos:column="57"> <block pos:line="9" pos:column="58">{
      <expr_stmt><expr><call><name pos:line="10" pos:column="7">WARNING<pos:position pos:line="10" pos:column="14"/></name><argument_list pos:line="10" pos:column="14">(<argument><expr><literal type="string" pos:line="10" pos:column="15">"barometer: collectd_barometer_config: invalid oversampling: %d."<pos:position pos:line="10" pos:column="80"/></literal>
              <literal type="string" pos:line="11" pos:column="15">" Allowed values are 1 to 1024 (for MPL115) or 1 to 128 (for "<pos:position pos:line="11" pos:column="77"/></literal>
              <literal type="string" pos:line="12" pos:column="15">"MPL3115) or 1 to 8 (for BMP085)."<pos:position pos:line="12" pos:column="49"/></literal></expr></argument>,
              <argument><expr><name pos:line="13" pos:column="15">oversampling_tmp<pos:position pos:line="13" pos:column="31"/></name></expr></argument>)<pos:position pos:line="13" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="33"/></expr_stmt>
      <return pos:line="14" pos:column="7">return <expr><literal type="number" pos:line="14" pos:column="14">1<pos:position pos:line="14" pos:column="15"/></literal></expr>;<pos:position pos:line="14" pos:column="16"/></return>
    }<pos:position pos:line="15" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="16" pos:column="5">config_oversample<pos:position pos:line="16" pos:column="22"/></name> <operator pos:line="16" pos:column="23">=<pos:position pos:line="16" pos:column="24"/></operator> <name pos:line="16" pos:column="25">oversampling_tmp<pos:position pos:line="16" pos:column="41"/></name></expr>;<pos:position pos:line="16" pos:column="42"/></expr_stmt>
  }<pos:position pos:line="17" pos:column="4"/></block></then></if></elseif> <elseif pos:line="17" pos:column="5">else <if pos:line="17" pos:column="10">if <condition pos:line="17" pos:column="13">(<expr><call><name pos:line="17" pos:column="14">strcasecmp<pos:position pos:line="17" pos:column="24"/></name><argument_list pos:line="17" pos:column="24">(<argument><expr><name pos:line="17" pos:column="25">key<pos:position pos:line="17" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="17" pos:column="30">"Altitude"<pos:position pos:line="17" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="41"/></argument_list></call> <operator pos:line="17" pos:column="42">==<pos:position pos:line="17" pos:column="44"/></operator> <literal type="number" pos:line="17" pos:column="45">0<pos:position pos:line="17" pos:column="46"/></literal></expr>)<pos:position pos:line="17" pos:column="47"/></condition><then pos:line="17" pos:column="47"> <block pos:line="17" pos:column="48">{
    <expr_stmt><expr><name pos:line="18" pos:column="5">config_altitude<pos:position pos:line="18" pos:column="20"/></name> <operator pos:line="18" pos:column="21">=<pos:position pos:line="18" pos:column="22"/></operator> <call><name pos:line="18" pos:column="23">atof<pos:position pos:line="18" pos:column="27"/></name><argument_list pos:line="18" pos:column="27">(<argument><expr><name pos:line="18" pos:column="28">value<pos:position pos:line="18" pos:column="33"/></name></expr></argument>)<pos:position pos:line="18" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="35"/></expr_stmt>
  }<pos:position pos:line="19" pos:column="4"/></block></then></if></elseif> <elseif pos:line="19" pos:column="5">else <if pos:line="19" pos:column="10">if <condition pos:line="19" pos:column="13">(<expr><call><name pos:line="19" pos:column="14">strcasecmp<pos:position pos:line="19" pos:column="24"/></name><argument_list pos:line="19" pos:column="24">(<argument><expr><name pos:line="19" pos:column="25">key<pos:position pos:line="19" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="19" pos:column="30">"Normalization"<pos:position pos:line="19" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="46"/></argument_list></call> <operator pos:line="19" pos:column="47">==<pos:position pos:line="19" pos:column="49"/></operator> <literal type="number" pos:line="19" pos:column="50">0<pos:position pos:line="19" pos:column="51"/></literal></expr>)<pos:position pos:line="19" pos:column="52"/></condition><then pos:line="19" pos:column="52"> <block pos:line="19" pos:column="53">{
    <decl_stmt><decl><type><name pos:line="20" pos:column="5">int<pos:position pos:line="20" pos:column="8"/></name></type> <name pos:line="20" pos:column="9">normalize_tmp<pos:position pos:line="20" pos:column="22"/></name> <init pos:line="20" pos:column="23">= <expr><call><name pos:line="20" pos:column="25">atoi<pos:position pos:line="20" pos:column="29"/></name><argument_list pos:line="20" pos:column="29">(<argument><expr><name pos:line="20" pos:column="30">value<pos:position pos:line="20" pos:column="35"/></name></expr></argument>)<pos:position pos:line="20" pos:column="36"/></argument_list></call></expr></init></decl>;<pos:position pos:line="20" pos:column="37"/></decl_stmt>
    <if pos:line="21" pos:column="5">if <condition pos:line="21" pos:column="8">(<expr><name><name pos:line="21" pos:column="9">normalize_tmp<pos:position pos:line="21" pos:column="22"/></name> <argument_list type="generic" pos:line="21" pos:column="23">&lt; <argument><expr><literal type="number" pos:line="21" pos:column="25">0<pos:position pos:line="21" pos:column="26"/></literal> <operator pos:line="21" pos:column="27">||<pos:position pos:line="21" pos:column="29"/></operator> <name pos:line="21" pos:column="30">normalize_tmp<pos:position pos:line="21" pos:column="43"/></name></expr></argument> &gt;<pos:position pos:line="21" pos:column="48"/></argument_list></name> <literal type="number" pos:line="21" pos:column="46">2<pos:position pos:line="21" pos:column="47"/></literal></expr>)<pos:position pos:line="21" pos:column="48"/></condition><then pos:line="21" pos:column="48"> <block pos:line="21" pos:column="49">{
      <expr_stmt><expr><call><name pos:line="22" pos:column="7">WARNING<pos:position pos:line="22" pos:column="14"/></name><argument_list pos:line="22" pos:column="14">(<argument><expr><literal type="string" pos:line="22" pos:column="15">"barometer: collectd_barometer_config: invalid normalization: %d"<pos:position pos:line="22" pos:column="80"/></literal></expr></argument>,
              <argument><expr><name pos:line="23" pos:column="15">normalize_tmp<pos:position pos:line="23" pos:column="28"/></name></expr></argument>)<pos:position pos:line="23" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="30"/></expr_stmt>
      <return pos:line="24" pos:column="7">return <expr><literal type="number" pos:line="24" pos:column="14">1<pos:position pos:line="24" pos:column="15"/></literal></expr>;<pos:position pos:line="24" pos:column="16"/></return>
    }<pos:position pos:line="25" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="26" pos:column="5">config_normalize<pos:position pos:line="26" pos:column="21"/></name> <operator pos:line="26" pos:column="22">=<pos:position pos:line="26" pos:column="23"/></operator> <name pos:line="26" pos:column="24">normalize_tmp<pos:position pos:line="26" pos:column="37"/></name></expr>;<pos:position pos:line="26" pos:column="38"/></expr_stmt>
  }<pos:position pos:line="27" pos:column="4"/></block></then></if></elseif> <elseif pos:line="27" pos:column="5">else <if pos:line="27" pos:column="10">if <condition pos:line="27" pos:column="13">(<expr><call><name pos:line="27" pos:column="14">strcasecmp<pos:position pos:line="27" pos:column="24"/></name><argument_list pos:line="27" pos:column="24">(<argument><expr><name pos:line="27" pos:column="25">key<pos:position pos:line="27" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="27" pos:column="30">"TemperatureSensor"<pos:position pos:line="27" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="50"/></argument_list></call> <operator pos:line="27" pos:column="51">==<pos:position pos:line="27" pos:column="53"/></operator> <literal type="number" pos:line="27" pos:column="54">0<pos:position pos:line="27" pos:column="55"/></literal></expr>)<pos:position pos:line="27" pos:column="56"/></condition><then pos:line="27" pos:column="56"> <block pos:line="27" pos:column="57">{
    <if pos:line="28" pos:column="5">if <condition pos:line="28" pos:column="8">(<expr><call><name pos:line="28" pos:column="9">temp_list_add<pos:position pos:line="28" pos:column="22"/></name><argument_list pos:line="28" pos:column="22">(<argument><expr><name pos:line="28" pos:column="23">temp_list<pos:position pos:line="28" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="34">value<pos:position pos:line="28" pos:column="39"/></name></expr></argument>)<pos:position pos:line="28" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="28" pos:column="41"/></condition><then pos:line="28" pos:column="41"> <block pos:line="28" pos:column="42">{
      <return pos:line="29" pos:column="7">return <expr><operator pos:line="29" pos:column="14">-<pos:position pos:line="29" pos:column="15"/></operator><literal type="number" pos:line="29" pos:column="15">1<pos:position pos:line="29" pos:column="16"/></literal></expr>;<pos:position pos:line="29" pos:column="17"/></return>
    }<pos:position pos:line="30" pos:column="6"/></block></then></if>
  }<pos:position pos:line="31" pos:column="4"/></block></then></if></elseif> <elseif pos:line="31" pos:column="5">else <if pos:line="31" pos:column="10">if <condition pos:line="31" pos:column="13">(<expr><call><name pos:line="31" pos:column="14">strcasecmp<pos:position pos:line="31" pos:column="24"/></name><argument_list pos:line="31" pos:column="24">(<argument><expr><name pos:line="31" pos:column="25">key<pos:position pos:line="31" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="31" pos:column="30">"PressureOffset"<pos:position pos:line="31" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="31" pos:column="47"/></argument_list></call> <operator pos:line="31" pos:column="48">==<pos:position pos:line="31" pos:column="50"/></operator> <literal type="number" pos:line="31" pos:column="51">0<pos:position pos:line="31" pos:column="52"/></literal></expr>)<pos:position pos:line="31" pos:column="53"/></condition><then pos:line="31" pos:column="53"> <block pos:line="31" pos:column="54">{
    <expr_stmt><expr><name pos:line="32" pos:column="5">config_press_offset<pos:position pos:line="32" pos:column="24"/></name> <operator pos:line="32" pos:column="25">=<pos:position pos:line="32" pos:column="26"/></operator> <call><name pos:line="32" pos:column="27">atof<pos:position pos:line="32" pos:column="31"/></name><argument_list pos:line="32" pos:column="31">(<argument><expr><name pos:line="32" pos:column="32">value<pos:position pos:line="32" pos:column="37"/></name></expr></argument>)<pos:position pos:line="32" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="39"/></expr_stmt>
  }<pos:position pos:line="33" pos:column="4"/></block></then></if></elseif> <elseif pos:line="33" pos:column="5">else <if pos:line="33" pos:column="10">if <condition pos:line="33" pos:column="13">(<expr><call><name pos:line="33" pos:column="14">strcasecmp<pos:position pos:line="33" pos:column="24"/></name><argument_list pos:line="33" pos:column="24">(<argument><expr><name pos:line="33" pos:column="25">key<pos:position pos:line="33" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="33" pos:column="30">"TemperatureOffset"<pos:position pos:line="33" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="50"/></argument_list></call> <operator pos:line="33" pos:column="51">==<pos:position pos:line="33" pos:column="53"/></operator> <literal type="number" pos:line="33" pos:column="54">0<pos:position pos:line="33" pos:column="55"/></literal></expr>)<pos:position pos:line="33" pos:column="56"/></condition><then pos:line="33" pos:column="56"> <block pos:line="33" pos:column="57">{
    <expr_stmt><expr><name pos:line="34" pos:column="5">config_temp_offset<pos:position pos:line="34" pos:column="23"/></name> <operator pos:line="34" pos:column="24">=<pos:position pos:line="34" pos:column="25"/></operator> <call><name pos:line="34" pos:column="26">atof<pos:position pos:line="34" pos:column="30"/></name><argument_list pos:line="34" pos:column="30">(<argument><expr><name pos:line="34" pos:column="31">value<pos:position pos:line="34" pos:column="36"/></name></expr></argument>)<pos:position pos:line="34" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="38"/></expr_stmt>
  }<pos:position pos:line="35" pos:column="4"/></block></then></if></elseif> <else pos:line="35" pos:column="5">else <block pos:line="35" pos:column="10">{
    <return pos:line="36" pos:column="5">return <expr><operator pos:line="36" pos:column="12">-<pos:position pos:line="36" pos:column="13"/></operator><literal type="number" pos:line="36" pos:column="13">1<pos:position pos:line="36" pos:column="14"/></literal></expr>;<pos:position pos:line="36" pos:column="15"/></return>
  }<pos:position pos:line="37" pos:column="4"/></block></else></if>

  <return pos:line="39" pos:column="3">return <expr><literal type="number" pos:line="39" pos:column="10">0<pos:position pos:line="39" pos:column="11"/></literal></expr>;<pos:position pos:line="39" pos:column="12"/></return>
}<pos:position pos:line="40" pos:column="2"/></block></function></unit>
