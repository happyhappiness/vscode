<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1342_collectd-4.8.0.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">plugin_read_all_once<pos:position pos:line="1" pos:column="25"/></name> <parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><name pos:line="1" pos:column="27">void<pos:position pos:line="1" pos:column="31"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="32"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">status<pos:position pos:line="3" pos:column="19"/></name></decl>;<pos:position pos:line="3" pos:column="20"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">return_status<pos:position pos:line="4" pos:column="26"/></name> <init pos:line="4" pos:column="27">= <expr><literal type="number" pos:line="4" pos:column="29">0<pos:position pos:line="4" pos:column="30"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="31"/></decl_stmt>

	<if pos:line="6" pos:column="9">if <condition pos:line="6" pos:column="12">(<expr><name pos:line="6" pos:column="13">read_heap<pos:position pos:line="6" pos:column="22"/></name> <operator pos:line="6" pos:column="23">==<pos:position pos:line="6" pos:column="25"/></operator> <name pos:line="6" pos:column="26">NULL<pos:position pos:line="6" pos:column="30"/></name></expr>)<pos:position pos:line="6" pos:column="31"/></condition><then pos:line="6" pos:column="31">
	<block pos:line="7" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="8" pos:column="17">NOTICE<pos:position pos:line="8" pos:column="23"/></name> <argument_list pos:line="8" pos:column="24">(<argument><expr><literal type="string" pos:line="8" pos:column="25">"No read-functions are registered."<pos:position pos:line="8" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="62"/></expr_stmt>
		<return pos:line="9" pos:column="17">return <expr><operator pos:line="9" pos:column="24">(<pos:position pos:line="9" pos:column="25"/></operator><literal type="number" pos:line="9" pos:column="25">0<pos:position pos:line="9" pos:column="26"/></literal><operator pos:line="9" pos:column="26">)<pos:position pos:line="9" pos:column="27"/></operator></expr>;<pos:position pos:line="9" pos:column="28"/></return>
	}<pos:position pos:line="10" pos:column="10"/></block></then></if>

	<while pos:line="12" pos:column="9">while <condition pos:line="12" pos:column="15">(<expr><literal type="number" pos:line="12" pos:column="16">42<pos:position pos:line="12" pos:column="18"/></literal></expr>)<pos:position pos:line="12" pos:column="19"/></condition>
	<block pos:line="13" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="14" pos:column="17">read_func_t<pos:position pos:line="14" pos:column="28"/></name> <modifier pos:line="14" pos:column="29">*<pos:position pos:line="14" pos:column="30"/></modifier></type><name pos:line="14" pos:column="30">rf<pos:position pos:line="14" pos:column="32"/></name></decl>;<pos:position pos:line="14" pos:column="33"/></decl_stmt>

		<expr_stmt><expr><name pos:line="16" pos:column="17">rf<pos:position pos:line="16" pos:column="19"/></name> <operator pos:line="16" pos:column="20">=<pos:position pos:line="16" pos:column="21"/></operator> <call><name pos:line="16" pos:column="22">c_head_get_root<pos:position pos:line="16" pos:column="37"/></name> <argument_list pos:line="16" pos:column="38">(<argument><expr><name pos:line="16" pos:column="39">read_heap<pos:position pos:line="16" pos:column="48"/></name></expr></argument>)<pos:position pos:line="16" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="50"/></expr_stmt>
		<if pos:line="17" pos:column="17">if <condition pos:line="17" pos:column="20">(<expr><name pos:line="17" pos:column="21">rf<pos:position pos:line="17" pos:column="23"/></name> <operator pos:line="17" pos:column="24">==<pos:position pos:line="17" pos:column="26"/></operator> <name pos:line="17" pos:column="27">NULL<pos:position pos:line="17" pos:column="31"/></name></expr>)<pos:position pos:line="17" pos:column="32"/></condition><then pos:line="17" pos:column="32">
			<block type="pseudo"><break pos:line="18" pos:column="25">break;<pos:position pos:line="18" pos:column="31"/></break></block></then></if>

		<if pos:line="20" pos:column="17">if <condition pos:line="20" pos:column="20">(<expr><name><name pos:line="20" pos:column="21">rf<pos:position pos:line="20" pos:column="23"/></name><operator pos:line="20" pos:column="23">-&gt;<pos:position pos:line="20" pos:column="28"/></operator><name pos:line="20" pos:column="25">rf_type<pos:position pos:line="20" pos:column="32"/></name></name> <operator pos:line="20" pos:column="33">==<pos:position pos:line="20" pos:column="35"/></operator> <name pos:line="20" pos:column="36">RF_SIMPLE<pos:position pos:line="20" pos:column="45"/></name></expr>)<pos:position pos:line="20" pos:column="46"/></condition><then pos:line="20" pos:column="46">
		<block pos:line="21" pos:column="17">{
			<function_decl><type><name pos:line="22" pos:column="25">int<pos:position pos:line="22" pos:column="28"/></name></type> (<modifier pos:line="22" pos:column="30">*<pos:position pos:line="22" pos:column="31"/></modifier><name pos:line="22" pos:column="31">callback<pos:position pos:line="22" pos:column="39"/></name>) <parameter_list pos:line="22" pos:column="41">(<parameter><decl><type><name pos:line="22" pos:column="42">void<pos:position pos:line="22" pos:column="46"/></name></type></decl></parameter>)<pos:position pos:line="22" pos:column="47"/></parameter_list>;<pos:position pos:line="22" pos:column="48"/></function_decl>

			<expr_stmt><expr><name pos:line="24" pos:column="25">callback<pos:position pos:line="24" pos:column="33"/></name> <operator pos:line="24" pos:column="34">=<pos:position pos:line="24" pos:column="35"/></operator> <name><name pos:line="24" pos:column="36">rf<pos:position pos:line="24" pos:column="38"/></name><operator pos:line="24" pos:column="38">-&gt;<pos:position pos:line="24" pos:column="43"/></operator><name pos:line="24" pos:column="40">rf_callback<pos:position pos:line="24" pos:column="51"/></name></name></expr>;<pos:position pos:line="24" pos:column="52"/></expr_stmt>
			<expr_stmt><expr><name pos:line="25" pos:column="25">status<pos:position pos:line="25" pos:column="31"/></name> <operator pos:line="25" pos:column="32">=<pos:position pos:line="25" pos:column="33"/></operator> <call pos:line="25" pos:column="34">(<modifier pos:line="25" pos:column="35">*<pos:position pos:line="25" pos:column="36"/></modifier><name pos:line="25" pos:column="36">callback<pos:position pos:line="25" pos:column="44"/></name>) <argument_list pos:line="25" pos:column="46">()<pos:position pos:line="25" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="49"/></expr_stmt>
		}<pos:position pos:line="26" pos:column="18"/></block></then>
		<else pos:line="27" pos:column="17">else
		<block pos:line="28" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="29" pos:column="25">plugin_read_cb<pos:position pos:line="29" pos:column="39"/></name></type> <name pos:line="29" pos:column="40">callback<pos:position pos:line="29" pos:column="48"/></name></decl>;<pos:position pos:line="29" pos:column="49"/></decl_stmt>

			<expr_stmt><expr><name pos:line="31" pos:column="25">callback<pos:position pos:line="31" pos:column="33"/></name> <operator pos:line="31" pos:column="34">=<pos:position pos:line="31" pos:column="35"/></operator> <name><name pos:line="31" pos:column="36">rf<pos:position pos:line="31" pos:column="38"/></name><operator pos:line="31" pos:column="38">-&gt;<pos:position pos:line="31" pos:column="43"/></operator><name pos:line="31" pos:column="40">rf_callback<pos:position pos:line="31" pos:column="51"/></name></name></expr>;<pos:position pos:line="31" pos:column="52"/></expr_stmt>
			<expr_stmt><expr><name pos:line="32" pos:column="25">status<pos:position pos:line="32" pos:column="31"/></name> <operator pos:line="32" pos:column="32">=<pos:position pos:line="32" pos:column="33"/></operator> <call pos:line="32" pos:column="34">(<modifier pos:line="32" pos:column="35">*<pos:position pos:line="32" pos:column="36"/></modifier><name pos:line="32" pos:column="36">callback<pos:position pos:line="32" pos:column="44"/></name>) <argument_list pos:line="32" pos:column="46">(<argument><expr><operator pos:line="32" pos:column="47">&amp;<pos:position pos:line="32" pos:column="52"/></operator><name><name pos:line="32" pos:column="48">rf<pos:position pos:line="32" pos:column="50"/></name><operator pos:line="32" pos:column="50">-&gt;<pos:position pos:line="32" pos:column="55"/></operator><name pos:line="32" pos:column="52">rf_udata<pos:position pos:line="32" pos:column="60"/></name></name></expr></argument>)<pos:position pos:line="32" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="62"/></expr_stmt>
		}<pos:position pos:line="33" pos:column="18"/></block></else></if>

		<if pos:line="35" pos:column="17">if <condition pos:line="35" pos:column="20">(<expr><name pos:line="35" pos:column="21">status<pos:position pos:line="35" pos:column="27"/></name> <operator pos:line="35" pos:column="28">!=<pos:position pos:line="35" pos:column="30"/></operator> <literal type="number" pos:line="35" pos:column="31">0<pos:position pos:line="35" pos:column="32"/></literal></expr>)<pos:position pos:line="35" pos:column="33"/></condition><then pos:line="35" pos:column="33">
		<block pos:line="36" pos:column="17">{
			<expr_stmt><expr><call><name pos:line="37" pos:column="25">NOTICE<pos:position pos:line="37" pos:column="31"/></name> <argument_list pos:line="37" pos:column="32">(<argument><expr><literal type="string" pos:line="37" pos:column="33">"read-function of plugin `%s' failed."<pos:position pos:line="37" pos:column="71"/></literal></expr></argument>,
					<argument><expr><name><name pos:line="38" pos:column="41">rf<pos:position pos:line="38" pos:column="43"/></name><operator pos:line="38" pos:column="43">-&gt;<pos:position pos:line="38" pos:column="48"/></operator><name pos:line="38" pos:column="45">rf_name<pos:position pos:line="38" pos:column="52"/></name></name></expr></argument>)<pos:position pos:line="38" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="54"/></expr_stmt>
			<expr_stmt><expr><name pos:line="39" pos:column="25">return_status<pos:position pos:line="39" pos:column="38"/></name> <operator pos:line="39" pos:column="39">=<pos:position pos:line="39" pos:column="40"/></operator> <operator pos:line="39" pos:column="41">-<pos:position pos:line="39" pos:column="42"/></operator><literal type="number" pos:line="39" pos:column="42">1<pos:position pos:line="39" pos:column="43"/></literal></expr>;<pos:position pos:line="39" pos:column="44"/></expr_stmt>
		}<pos:position pos:line="40" pos:column="18"/></block></then></if>

		<expr_stmt><expr><call><name pos:line="42" pos:column="17">destroy_callback<pos:position pos:line="42" pos:column="33"/></name> <argument_list pos:line="42" pos:column="34">(<argument><expr><operator pos:line="42" pos:column="35">(<pos:position pos:line="42" pos:column="36"/></operator><name pos:line="42" pos:column="36">void<pos:position pos:line="42" pos:column="40"/></name> <operator pos:line="42" pos:column="41">*<pos:position pos:line="42" pos:column="42"/></operator><operator pos:line="42" pos:column="42">)<pos:position pos:line="42" pos:column="43"/></operator> <name pos:line="42" pos:column="44">rf<pos:position pos:line="42" pos:column="46"/></name></expr></argument>)<pos:position pos:line="42" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="48"/></expr_stmt>
	}<pos:position pos:line="43" pos:column="10"/></block></while>

	<return pos:line="45" pos:column="9">return <expr><operator pos:line="45" pos:column="16">(<pos:position pos:line="45" pos:column="17"/></operator><name pos:line="45" pos:column="17">return_status<pos:position pos:line="45" pos:column="30"/></name><operator pos:line="45" pos:column="30">)<pos:position pos:line="45" pos:column="31"/></operator></expr>;<pos:position pos:line="45" pos:column="32"/></return>
}<pos:position pos:line="46" pos:column="2"/></block></function></unit>
