<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1070_collectd-4.8.0.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">FILE<pos:position pos:line="1" pos:column="12"/></name> <modifier pos:line="1" pos:column="13">*<pos:position pos:line="1" pos:column="14"/></modifier></type><name pos:line="1" pos:column="14">olsrd_connect<pos:position pos:line="1" pos:column="27"/></name> <parameter_list pos:line="1" pos:column="28">(<parameter><decl><type><name pos:line="1" pos:column="29">void<pos:position pos:line="1" pos:column="33"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="34"/></parameter_list> <comment type="block" pos:line="1" pos:column="35">/* {{{ */</comment>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name><name pos:line="3" pos:column="3">struct<pos:position pos:line="3" pos:column="9"/></name> <name pos:line="3" pos:column="10">addrinfo<pos:position pos:line="3" pos:column="18"/></name></name></type>  <name pos:line="3" pos:column="20">ai_hints<pos:position pos:line="3" pos:column="28"/></name></decl>;<pos:position pos:line="3" pos:column="29"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="4" pos:column="3">struct<pos:position pos:line="4" pos:column="9"/></name> <name pos:line="4" pos:column="10">addrinfo<pos:position pos:line="4" pos:column="18"/></name></name> <modifier pos:line="4" pos:column="19">*<pos:position pos:line="4" pos:column="20"/></modifier></type><name pos:line="4" pos:column="20">ai_list<pos:position pos:line="4" pos:column="27"/></name></decl>, <modifier pos:line="4" pos:column="29">*<pos:position pos:line="4" pos:column="30"/></modifier><decl><type ref="prev"/><name pos:line="4" pos:column="30">ai_ptr<pos:position pos:line="4" pos:column="36"/></name></decl>;<pos:position pos:line="4" pos:column="37"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">int<pos:position pos:line="5" pos:column="6"/></name></type>              <name pos:line="5" pos:column="20">ai_return<pos:position pos:line="5" pos:column="29"/></name></decl>;<pos:position pos:line="5" pos:column="30"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="7" pos:column="3">FILE<pos:position pos:line="7" pos:column="7"/></name> <modifier pos:line="7" pos:column="8">*<pos:position pos:line="7" pos:column="9"/></modifier></type><name pos:line="7" pos:column="9">fh<pos:position pos:line="7" pos:column="11"/></name></decl>;<pos:position pos:line="7" pos:column="12"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="9" pos:column="3">memset<pos:position pos:line="9" pos:column="9"/></name> <argument_list pos:line="9" pos:column="10">(<argument><expr><operator pos:line="9" pos:column="11">&amp;<pos:position pos:line="9" pos:column="16"/></operator><name pos:line="9" pos:column="12">ai_hints<pos:position pos:line="9" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="9" pos:column="22">0<pos:position pos:line="9" pos:column="23"/></literal></expr></argument>, <argument><expr><sizeof pos:line="9" pos:column="25">sizeof <argument_list pos:line="9" pos:column="32">(<argument><expr><name pos:line="9" pos:column="33">ai_hints<pos:position pos:line="9" pos:column="41"/></name></expr></argument>)<pos:position pos:line="9" pos:column="42"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="9" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="44"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="10" pos:column="3">ai_hints<pos:position pos:line="10" pos:column="11"/></name><operator pos:line="10" pos:column="11">.<pos:position pos:line="10" pos:column="12"/></operator><name pos:line="10" pos:column="12">ai_flags<pos:position pos:line="10" pos:column="20"/></name></name>    <operator pos:line="10" pos:column="24">=<pos:position pos:line="10" pos:column="25"/></operator> <literal type="number" pos:line="10" pos:column="26">0<pos:position pos:line="10" pos:column="27"/></literal></expr>;<pos:position pos:line="10" pos:column="28"/></expr_stmt>
<cpp:ifdef pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">ifdef<pos:position pos:line="11" pos:column="7"/></cpp:directive> <name pos:line="11" pos:column="8">AI_ADDRCONFIG<pos:position pos:line="11" pos:column="21"/></name></cpp:ifdef>
  <expr_stmt><expr><name><name pos:line="12" pos:column="3">ai_hints<pos:position pos:line="12" pos:column="11"/></name><operator pos:line="12" pos:column="11">.<pos:position pos:line="12" pos:column="12"/></operator><name pos:line="12" pos:column="12">ai_flags<pos:position pos:line="12" pos:column="20"/></name></name>   <operator pos:line="12" pos:column="23">|=<pos:position pos:line="12" pos:column="25"/></operator> <name pos:line="12" pos:column="26">AI_ADDRCONFIG<pos:position pos:line="12" pos:column="39"/></name></expr>;<pos:position pos:line="12" pos:column="40"/></expr_stmt>
<cpp:endif pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">endif<pos:position pos:line="13" pos:column="7"/></cpp:directive></cpp:endif>
  <expr_stmt><expr><name><name pos:line="14" pos:column="3">ai_hints<pos:position pos:line="14" pos:column="11"/></name><operator pos:line="14" pos:column="11">.<pos:position pos:line="14" pos:column="12"/></operator><name pos:line="14" pos:column="12">ai_family<pos:position pos:line="14" pos:column="21"/></name></name>   <operator pos:line="14" pos:column="24">=<pos:position pos:line="14" pos:column="25"/></operator> <name pos:line="14" pos:column="26">PF_UNSPEC<pos:position pos:line="14" pos:column="35"/></name></expr>;<pos:position pos:line="14" pos:column="36"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="15" pos:column="3">ai_hints<pos:position pos:line="15" pos:column="11"/></name><operator pos:line="15" pos:column="11">.<pos:position pos:line="15" pos:column="12"/></operator><name pos:line="15" pos:column="12">ai_socktype<pos:position pos:line="15" pos:column="23"/></name></name> <operator pos:line="15" pos:column="24">=<pos:position pos:line="15" pos:column="25"/></operator> <name pos:line="15" pos:column="26">SOCK_STREAM<pos:position pos:line="15" pos:column="37"/></name></expr>;<pos:position pos:line="15" pos:column="38"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="16" pos:column="3">ai_hints<pos:position pos:line="16" pos:column="11"/></name><operator pos:line="16" pos:column="11">.<pos:position pos:line="16" pos:column="12"/></operator><name pos:line="16" pos:column="12">ai_protocol<pos:position pos:line="16" pos:column="23"/></name></name> <operator pos:line="16" pos:column="24">=<pos:position pos:line="16" pos:column="25"/></operator> <name pos:line="16" pos:column="26">IPPROTO_TCP<pos:position pos:line="16" pos:column="37"/></name></expr>;<pos:position pos:line="16" pos:column="38"/></expr_stmt>

  <expr_stmt><expr><name pos:line="18" pos:column="3">ai_list<pos:position pos:line="18" pos:column="10"/></name> <operator pos:line="18" pos:column="11">=<pos:position pos:line="18" pos:column="12"/></operator> <name pos:line="18" pos:column="13">NULL<pos:position pos:line="18" pos:column="17"/></name></expr>;<pos:position pos:line="18" pos:column="18"/></expr_stmt>
  <expr_stmt><expr><name pos:line="19" pos:column="3">ai_return<pos:position pos:line="19" pos:column="12"/></name> <operator pos:line="19" pos:column="13">=<pos:position pos:line="19" pos:column="14"/></operator> <call><name pos:line="19" pos:column="15">getaddrinfo<pos:position pos:line="19" pos:column="26"/></name> <argument_list pos:line="19" pos:column="27">(<argument><expr><call><name pos:line="19" pos:column="28">olsrd_get_node<pos:position pos:line="19" pos:column="42"/></name> <argument_list pos:line="19" pos:column="43">()<pos:position pos:line="19" pos:column="45"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="19" pos:column="47">olsrd_get_service<pos:position pos:line="19" pos:column="64"/></name> <argument_list pos:line="19" pos:column="65">()<pos:position pos:line="19" pos:column="67"/></argument_list></call></expr></argument>,
      <argument><expr><operator pos:line="20" pos:column="7">&amp;<pos:position pos:line="20" pos:column="12"/></operator><name pos:line="20" pos:column="8">ai_hints<pos:position pos:line="20" pos:column="16"/></name></expr></argument>, <argument><expr><operator pos:line="20" pos:column="18">&amp;<pos:position pos:line="20" pos:column="23"/></operator><name pos:line="20" pos:column="19">ai_list<pos:position pos:line="20" pos:column="26"/></name></expr></argument>)<pos:position pos:line="20" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="28"/></expr_stmt>
  <if pos:line="21" pos:column="3">if <condition pos:line="21" pos:column="6">(<expr><name pos:line="21" pos:column="7">ai_return<pos:position pos:line="21" pos:column="16"/></name> <operator pos:line="21" pos:column="17">!=<pos:position pos:line="21" pos:column="19"/></operator> <literal type="number" pos:line="21" pos:column="20">0<pos:position pos:line="21" pos:column="21"/></literal></expr>)<pos:position pos:line="21" pos:column="22"/></condition><then pos:line="21" pos:column="22">
  <block pos:line="22" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="23" pos:column="5">ERROR<pos:position pos:line="23" pos:column="10"/></name> <argument_list pos:line="23" pos:column="11">(<argument><expr><literal type="string" pos:line="23" pos:column="12">"olsrd plugin: getaddrinfo (%s, %s) failed: %s"<pos:position pos:line="23" pos:column="59"/></literal></expr></argument>,
        <argument><expr><call><name pos:line="24" pos:column="9">olsrd_get_node<pos:position pos:line="24" pos:column="23"/></name> <argument_list pos:line="24" pos:column="24">()<pos:position pos:line="24" pos:column="26"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="24" pos:column="28">olsrd_get_service<pos:position pos:line="24" pos:column="45"/></name> <argument_list pos:line="24" pos:column="46">()<pos:position pos:line="24" pos:column="48"/></argument_list></call></expr></argument>,
        <argument><expr><call><name pos:line="25" pos:column="9">gai_strerror<pos:position pos:line="25" pos:column="21"/></name> <argument_list pos:line="25" pos:column="22">(<argument><expr><name pos:line="25" pos:column="23">ai_return<pos:position pos:line="25" pos:column="32"/></name></expr></argument>)<pos:position pos:line="25" pos:column="33"/></argument_list></call></expr></argument>)<pos:position pos:line="25" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="35"/></expr_stmt>
    <return pos:line="26" pos:column="5">return <expr><operator pos:line="26" pos:column="12">(<pos:position pos:line="26" pos:column="13"/></operator><name pos:line="26" pos:column="13">NULL<pos:position pos:line="26" pos:column="17"/></name><operator pos:line="26" pos:column="17">)<pos:position pos:line="26" pos:column="18"/></operator></expr>;<pos:position pos:line="26" pos:column="19"/></return>
  }<pos:position pos:line="27" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="29" pos:column="3">fh<pos:position pos:line="29" pos:column="5"/></name> <operator pos:line="29" pos:column="6">=<pos:position pos:line="29" pos:column="7"/></operator> <name pos:line="29" pos:column="8">NULL<pos:position pos:line="29" pos:column="12"/></name></expr>;<pos:position pos:line="29" pos:column="13"/></expr_stmt>
  <for pos:line="30" pos:column="3">for <control pos:line="30" pos:column="7">(<init><expr><name pos:line="30" pos:column="8">ai_ptr<pos:position pos:line="30" pos:column="14"/></name> <operator pos:line="30" pos:column="15">=<pos:position pos:line="30" pos:column="16"/></operator> <name pos:line="30" pos:column="17">ai_list<pos:position pos:line="30" pos:column="24"/></name></expr>;<pos:position pos:line="30" pos:column="25"/></init> <condition><expr><name pos:line="30" pos:column="26">ai_ptr<pos:position pos:line="30" pos:column="32"/></name> <operator pos:line="30" pos:column="33">!=<pos:position pos:line="30" pos:column="35"/></operator> <name pos:line="30" pos:column="36">NULL<pos:position pos:line="30" pos:column="40"/></name></expr>;<pos:position pos:line="30" pos:column="41"/></condition> <incr><expr><name pos:line="30" pos:column="42">ai_ptr<pos:position pos:line="30" pos:column="48"/></name> <operator pos:line="30" pos:column="49">=<pos:position pos:line="30" pos:column="50"/></operator> <name><name pos:line="30" pos:column="51">ai_ptr<pos:position pos:line="30" pos:column="57"/></name><operator pos:line="30" pos:column="57">-&gt;<pos:position pos:line="30" pos:column="62"/></operator><name pos:line="30" pos:column="59">ai_next<pos:position pos:line="30" pos:column="66"/></name></name></expr></incr>)<pos:position pos:line="30" pos:column="67"/></control>
  <block pos:line="31" pos:column="3">{
    <decl_stmt><decl><type><name pos:line="32" pos:column="5">int<pos:position pos:line="32" pos:column="8"/></name></type> <name pos:line="32" pos:column="9">fd<pos:position pos:line="32" pos:column="11"/></name></decl>;<pos:position pos:line="32" pos:column="12"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="33" pos:column="5">int<pos:position pos:line="33" pos:column="8"/></name></type> <name pos:line="33" pos:column="9">status<pos:position pos:line="33" pos:column="15"/></name></decl>;<pos:position pos:line="33" pos:column="16"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="34" pos:column="5">char<pos:position pos:line="34" pos:column="9"/></name></type> <name><name pos:line="34" pos:column="10">errbuf<pos:position pos:line="34" pos:column="16"/></name><index pos:line="34" pos:column="16">[<expr><literal type="number" pos:line="34" pos:column="17">1024<pos:position pos:line="34" pos:column="21"/></literal></expr>]<pos:position pos:line="34" pos:column="22"/></index></name></decl>;<pos:position pos:line="34" pos:column="23"/></decl_stmt>

    <expr_stmt><expr><name pos:line="36" pos:column="5">fd<pos:position pos:line="36" pos:column="7"/></name> <operator pos:line="36" pos:column="8">=<pos:position pos:line="36" pos:column="9"/></operator> <call><name pos:line="36" pos:column="10">socket<pos:position pos:line="36" pos:column="16"/></name> <argument_list pos:line="36" pos:column="17">(<argument><expr><name><name pos:line="36" pos:column="18">ai_ptr<pos:position pos:line="36" pos:column="24"/></name><operator pos:line="36" pos:column="24">-&gt;<pos:position pos:line="36" pos:column="29"/></operator><name pos:line="36" pos:column="26">ai_family<pos:position pos:line="36" pos:column="35"/></name></name></expr></argument>, <argument><expr><name><name pos:line="36" pos:column="37">ai_ptr<pos:position pos:line="36" pos:column="43"/></name><operator pos:line="36" pos:column="43">-&gt;<pos:position pos:line="36" pos:column="48"/></operator><name pos:line="36" pos:column="45">ai_socktype<pos:position pos:line="36" pos:column="56"/></name></name></expr></argument>, <argument><expr><name><name pos:line="36" pos:column="58">ai_ptr<pos:position pos:line="36" pos:column="64"/></name><operator pos:line="36" pos:column="64">-&gt;<pos:position pos:line="36" pos:column="69"/></operator><name pos:line="36" pos:column="66">ai_protocol<pos:position pos:line="36" pos:column="77"/></name></name></expr></argument>)<pos:position pos:line="36" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="79"/></expr_stmt>
    <if pos:line="37" pos:column="5">if <condition pos:line="37" pos:column="8">(<expr><name pos:line="37" pos:column="9">fd<pos:position pos:line="37" pos:column="11"/></name> <operator pos:line="37" pos:column="12">&lt;<pos:position pos:line="37" pos:column="16"/></operator> <literal type="number" pos:line="37" pos:column="14">0<pos:position pos:line="37" pos:column="15"/></literal></expr>)<pos:position pos:line="37" pos:column="16"/></condition><then pos:line="37" pos:column="16">
    <block pos:line="38" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="39" pos:column="7">ERROR<pos:position pos:line="39" pos:column="12"/></name> <argument_list pos:line="39" pos:column="13">(<argument><expr><literal type="string" pos:line="39" pos:column="14">"olsrd plugin: socket failed: %s"<pos:position pos:line="39" pos:column="47"/></literal></expr></argument>,
          <argument><expr><call><name pos:line="40" pos:column="11">sstrerror<pos:position pos:line="40" pos:column="20"/></name> <argument_list pos:line="40" pos:column="21">(<argument><expr><name pos:line="40" pos:column="22">errno<pos:position pos:line="40" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="29">errbuf<pos:position pos:line="40" pos:column="35"/></name></expr></argument>, <argument><expr><sizeof pos:line="40" pos:column="37">sizeof <argument_list pos:line="40" pos:column="44">(<argument><expr><name pos:line="40" pos:column="45">errbuf<pos:position pos:line="40" pos:column="51"/></name></expr></argument>)<pos:position pos:line="40" pos:column="52"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="40" pos:column="53"/></argument_list></call></expr></argument>)<pos:position pos:line="40" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="55"/></expr_stmt>
      <continue pos:line="41" pos:column="7">continue;<pos:position pos:line="41" pos:column="16"/></continue>
    }<pos:position pos:line="42" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="44" pos:column="5">status<pos:position pos:line="44" pos:column="11"/></name> <operator pos:line="44" pos:column="12">=<pos:position pos:line="44" pos:column="13"/></operator> <call><name pos:line="44" pos:column="14">connect<pos:position pos:line="44" pos:column="21"/></name> <argument_list pos:line="44" pos:column="22">(<argument><expr><name pos:line="44" pos:column="23">fd<pos:position pos:line="44" pos:column="25"/></name></expr></argument>, <argument><expr><name><name pos:line="44" pos:column="27">ai_ptr<pos:position pos:line="44" pos:column="33"/></name><operator pos:line="44" pos:column="33">-&gt;<pos:position pos:line="44" pos:column="38"/></operator><name pos:line="44" pos:column="35">ai_addr<pos:position pos:line="44" pos:column="42"/></name></name></expr></argument>, <argument><expr><name><name pos:line="44" pos:column="44">ai_ptr<pos:position pos:line="44" pos:column="50"/></name><operator pos:line="44" pos:column="50">-&gt;<pos:position pos:line="44" pos:column="55"/></operator><name pos:line="44" pos:column="52">ai_addrlen<pos:position pos:line="44" pos:column="62"/></name></name></expr></argument>)<pos:position pos:line="44" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="64"/></expr_stmt>
    <if pos:line="45" pos:column="5">if <condition pos:line="45" pos:column="8">(<expr><name pos:line="45" pos:column="9">status<pos:position pos:line="45" pos:column="15"/></name> <operator pos:line="45" pos:column="16">!=<pos:position pos:line="45" pos:column="18"/></operator> <literal type="number" pos:line="45" pos:column="19">0<pos:position pos:line="45" pos:column="20"/></literal></expr>)<pos:position pos:line="45" pos:column="21"/></condition><then pos:line="45" pos:column="21">
    <block pos:line="46" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="47" pos:column="7">ERROR<pos:position pos:line="47" pos:column="12"/></name> <argument_list pos:line="47" pos:column="13">(<argument><expr><literal type="string" pos:line="47" pos:column="14">"olsrd plugin: connect failed: %s"<pos:position pos:line="47" pos:column="48"/></literal></expr></argument>,
          <argument><expr><call><name pos:line="48" pos:column="11">sstrerror<pos:position pos:line="48" pos:column="20"/></name> <argument_list pos:line="48" pos:column="21">(<argument><expr><name pos:line="48" pos:column="22">errno<pos:position pos:line="48" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="29">errbuf<pos:position pos:line="48" pos:column="35"/></name></expr></argument>, <argument><expr><sizeof pos:line="48" pos:column="37">sizeof <argument_list pos:line="48" pos:column="44">(<argument><expr><name pos:line="48" pos:column="45">errbuf<pos:position pos:line="48" pos:column="51"/></name></expr></argument>)<pos:position pos:line="48" pos:column="52"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="48" pos:column="53"/></argument_list></call></expr></argument>)<pos:position pos:line="48" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="55"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="49" pos:column="7">close<pos:position pos:line="49" pos:column="12"/></name> <argument_list pos:line="49" pos:column="13">(<argument><expr><name pos:line="49" pos:column="14">fd<pos:position pos:line="49" pos:column="16"/></name></expr></argument>)<pos:position pos:line="49" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="18"/></expr_stmt>
      <continue pos:line="50" pos:column="7">continue;<pos:position pos:line="50" pos:column="16"/></continue>
    }<pos:position pos:line="51" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="53" pos:column="5">fh<pos:position pos:line="53" pos:column="7"/></name> <operator pos:line="53" pos:column="8">=<pos:position pos:line="53" pos:column="9"/></operator> <call><name pos:line="53" pos:column="10">fdopen<pos:position pos:line="53" pos:column="16"/></name> <argument_list pos:line="53" pos:column="17">(<argument><expr><name pos:line="53" pos:column="18">fd<pos:position pos:line="53" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="53" pos:column="22">"r+"<pos:position pos:line="53" pos:column="26"/></literal></expr></argument>)<pos:position pos:line="53" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="28"/></expr_stmt>
    <if pos:line="54" pos:column="5">if <condition pos:line="54" pos:column="8">(<expr><name pos:line="54" pos:column="9">fh<pos:position pos:line="54" pos:column="11"/></name> <operator pos:line="54" pos:column="12">==<pos:position pos:line="54" pos:column="14"/></operator> <name pos:line="54" pos:column="15">NULL<pos:position pos:line="54" pos:column="19"/></name></expr>)<pos:position pos:line="54" pos:column="20"/></condition><then pos:line="54" pos:column="20">
    <block pos:line="55" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="56" pos:column="7">ERROR<pos:position pos:line="56" pos:column="12"/></name> <argument_list pos:line="56" pos:column="13">(<argument><expr><literal type="string" pos:line="56" pos:column="14">"olsrd plugin: fdopen failed."<pos:position pos:line="56" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="56" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="46"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="57" pos:column="7">close<pos:position pos:line="57" pos:column="12"/></name> <argument_list pos:line="57" pos:column="13">(<argument><expr><name pos:line="57" pos:column="14">fd<pos:position pos:line="57" pos:column="16"/></name></expr></argument>)<pos:position pos:line="57" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="18"/></expr_stmt>
      <continue pos:line="58" pos:column="7">continue;<pos:position pos:line="58" pos:column="16"/></continue>
    }<pos:position pos:line="59" pos:column="6"/></block></then></if>

    <break pos:line="61" pos:column="5">break;<pos:position pos:line="61" pos:column="11"/></break>
  }<pos:position pos:line="62" pos:column="4"/></block></for> <comment type="block" pos:line="62" pos:column="5">/* for (ai_ptr) */</comment>

  <expr_stmt><expr><call><name pos:line="64" pos:column="3">freeaddrinfo<pos:position pos:line="64" pos:column="15"/></name> <argument_list pos:line="64" pos:column="16">(<argument><expr><name pos:line="64" pos:column="17">ai_list<pos:position pos:line="64" pos:column="24"/></name></expr></argument>)<pos:position pos:line="64" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="26"/></expr_stmt>

  <return pos:line="66" pos:column="3">return <expr><operator pos:line="66" pos:column="10">(<pos:position pos:line="66" pos:column="11"/></operator><name pos:line="66" pos:column="11">fh<pos:position pos:line="66" pos:column="13"/></name><operator pos:line="66" pos:column="13">)<pos:position pos:line="66" pos:column="14"/></operator></expr>;<pos:position pos:line="66" pos:column="15"/></return>
}<pos:position pos:line="67" pos:column="2"/></block></function></unit>
