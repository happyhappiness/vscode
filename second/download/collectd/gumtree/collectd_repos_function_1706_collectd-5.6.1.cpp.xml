<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1706_collectd-5.6.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">wh_write_command<pos:position pos:line="1" pos:column="28"/></name> <parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><specifier pos:line="1" pos:column="30">const<pos:position pos:line="1" pos:column="35"/></specifier> <name pos:line="1" pos:column="36">data_set_t<pos:position pos:line="1" pos:column="46"/></name> <modifier pos:line="1" pos:column="47">*<pos:position pos:line="1" pos:column="48"/></modifier></type><name pos:line="1" pos:column="48">ds<pos:position pos:line="1" pos:column="50"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="52">const<pos:position pos:line="1" pos:column="57"/></specifier> <name pos:line="1" pos:column="58">value_list_t<pos:position pos:line="1" pos:column="70"/></name> <modifier pos:line="1" pos:column="71">*<pos:position pos:line="1" pos:column="72"/></modifier></type><name pos:line="1" pos:column="72">vl<pos:position pos:line="1" pos:column="74"/></name></decl></parameter>, <comment type="block" pos:line="1" pos:column="76">/* {{{ */</comment>
                <parameter><decl><type><name pos:line="2" pos:column="17">wh_callback_t<pos:position pos:line="2" pos:column="30"/></name> <modifier pos:line="2" pos:column="31">*<pos:position pos:line="2" pos:column="32"/></modifier></type><name pos:line="2" pos:column="32">cb<pos:position pos:line="2" pos:column="34"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="35"/></parameter_list>
<block pos:line="3" pos:column="1">{
        <decl_stmt><decl><type><name pos:line="4" pos:column="9">char<pos:position pos:line="4" pos:column="13"/></name></type> <name><name pos:line="4" pos:column="14">key<pos:position pos:line="4" pos:column="17"/></name><index pos:line="4" pos:column="17">[<expr><literal type="number" pos:line="4" pos:column="18">10<pos:position pos:line="4" pos:column="20"/></literal><operator pos:line="4" pos:column="20">*<pos:position pos:line="4" pos:column="21"/></operator><name pos:line="4" pos:column="21">DATA_MAX_NAME_LEN<pos:position pos:line="4" pos:column="38"/></name></expr>]<pos:position pos:line="4" pos:column="39"/></index></name></decl>;<pos:position pos:line="4" pos:column="40"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="5" pos:column="9">char<pos:position pos:line="5" pos:column="13"/></name></type> <name><name pos:line="5" pos:column="14">values<pos:position pos:line="5" pos:column="20"/></name><index pos:line="5" pos:column="20">[<expr><literal type="number" pos:line="5" pos:column="21">512<pos:position pos:line="5" pos:column="24"/></literal></expr>]<pos:position pos:line="5" pos:column="25"/></index></name></decl>;<pos:position pos:line="5" pos:column="26"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="6" pos:column="9">char<pos:position pos:line="6" pos:column="13"/></name></type> <name><name pos:line="6" pos:column="14">command<pos:position pos:line="6" pos:column="21"/></name><index pos:line="6" pos:column="21">[<expr><literal type="number" pos:line="6" pos:column="22">1024<pos:position pos:line="6" pos:column="26"/></literal></expr>]<pos:position pos:line="6" pos:column="27"/></index></name></decl>;<pos:position pos:line="6" pos:column="28"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="7" pos:column="9">size_t<pos:position pos:line="7" pos:column="15"/></name></type> <name pos:line="7" pos:column="16">command_len<pos:position pos:line="7" pos:column="27"/></name></decl>;<pos:position pos:line="7" pos:column="28"/></decl_stmt>

        <decl_stmt><decl><type><name pos:line="9" pos:column="9">int<pos:position pos:line="9" pos:column="12"/></name></type> <name pos:line="9" pos:column="13">status<pos:position pos:line="9" pos:column="19"/></name></decl>;<pos:position pos:line="9" pos:column="20"/></decl_stmt>

        <comment type="block" pos:line="11" pos:column="9">/* sanity checks, primarily to make static analyzers happy. */</comment>
        <if pos:line="12" pos:column="9">if <condition pos:line="12" pos:column="12">(<expr><operator pos:line="12" pos:column="13">(<pos:position pos:line="12" pos:column="14"/></operator><name pos:line="12" pos:column="14">cb<pos:position pos:line="12" pos:column="16"/></name> <operator pos:line="12" pos:column="17">==<pos:position pos:line="12" pos:column="19"/></operator> <name pos:line="12" pos:column="20">NULL<pos:position pos:line="12" pos:column="24"/></name><operator pos:line="12" pos:column="24">)<pos:position pos:line="12" pos:column="25"/></operator> <operator pos:line="12" pos:column="26">||<pos:position pos:line="12" pos:column="28"/></operator> <operator pos:line="12" pos:column="29">(<pos:position pos:line="12" pos:column="30"/></operator><name><name pos:line="12" pos:column="30">cb<pos:position pos:line="12" pos:column="32"/></name><operator pos:line="12" pos:column="32">-&gt;<pos:position pos:line="12" pos:column="37"/></operator><name pos:line="12" pos:column="34">send_buffer<pos:position pos:line="12" pos:column="45"/></name></name> <operator pos:line="12" pos:column="46">==<pos:position pos:line="12" pos:column="48"/></operator> <name pos:line="12" pos:column="49">NULL<pos:position pos:line="12" pos:column="53"/></name><operator pos:line="12" pos:column="53">)<pos:position pos:line="12" pos:column="54"/></operator></expr>)<pos:position pos:line="12" pos:column="55"/></condition><then pos:line="12" pos:column="55">
                <block type="pseudo"><return pos:line="13" pos:column="17">return <expr><operator pos:line="13" pos:column="24">-<pos:position pos:line="13" pos:column="25"/></operator><literal type="number" pos:line="13" pos:column="25">1<pos:position pos:line="13" pos:column="26"/></literal></expr>;<pos:position pos:line="13" pos:column="27"/></return></block></then></if>

        <if pos:line="15" pos:column="9">if <condition pos:line="15" pos:column="12">(<expr><call><name pos:line="15" pos:column="13">strcmp<pos:position pos:line="15" pos:column="19"/></name> <argument_list pos:line="15" pos:column="20">(<argument><expr><name><name pos:line="15" pos:column="21">ds<pos:position pos:line="15" pos:column="23"/></name><operator pos:line="15" pos:column="23">-&gt;<pos:position pos:line="15" pos:column="28"/></operator><name pos:line="15" pos:column="25">type<pos:position pos:line="15" pos:column="29"/></name></name></expr></argument>, <argument><expr><name><name pos:line="15" pos:column="31">vl<pos:position pos:line="15" pos:column="33"/></name><operator pos:line="15" pos:column="33">-&gt;<pos:position pos:line="15" pos:column="38"/></operator><name pos:line="15" pos:column="35">type<pos:position pos:line="15" pos:column="39"/></name></name></expr></argument>)<pos:position pos:line="15" pos:column="40"/></argument_list></call> <operator pos:line="15" pos:column="41">==<pos:position pos:line="15" pos:column="43"/></operator> <literal type="number" pos:line="15" pos:column="44">0<pos:position pos:line="15" pos:column="45"/></literal></expr>)<pos:position pos:line="15" pos:column="46"/></condition><then pos:line="15" pos:column="46"> <block pos:line="15" pos:column="47">{
                <expr_stmt><expr><call><name pos:line="16" pos:column="17">ERROR<pos:position pos:line="16" pos:column="22"/></name> <argument_list pos:line="16" pos:column="23">(<argument><expr><literal type="string" pos:line="16" pos:column="24">"write_http plugin: DS type does not match "<pos:position pos:line="16" pos:column="68"/></literal>
                                <literal type="string" pos:line="17" pos:column="33">"value list type"<pos:position pos:line="17" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="52"/></expr_stmt>
                <return pos:line="18" pos:column="17">return <expr><operator pos:line="18" pos:column="24">-<pos:position pos:line="18" pos:column="25"/></operator><literal type="number" pos:line="18" pos:column="25">1<pos:position pos:line="18" pos:column="26"/></literal></expr>;<pos:position pos:line="18" pos:column="27"/></return>
        }<pos:position pos:line="19" pos:column="10"/></block></then></if>

        <comment type="block" pos:line="21" pos:column="9">/* Copy the identifier to `key' and escape it. */</comment>
        <expr_stmt><expr><name pos:line="22" pos:column="9">status<pos:position pos:line="22" pos:column="15"/></name> <operator pos:line="22" pos:column="16">=<pos:position pos:line="22" pos:column="17"/></operator> <call><name pos:line="22" pos:column="18">FORMAT_VL<pos:position pos:line="22" pos:column="27"/></name> <argument_list pos:line="22" pos:column="28">(<argument><expr><name pos:line="22" pos:column="29">key<pos:position pos:line="22" pos:column="32"/></name></expr></argument>, <argument><expr><sizeof pos:line="22" pos:column="34">sizeof <argument_list pos:line="22" pos:column="41">(<argument><expr><name pos:line="22" pos:column="42">key<pos:position pos:line="22" pos:column="45"/></name></expr></argument>)<pos:position pos:line="22" pos:column="46"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="22" pos:column="48">vl<pos:position pos:line="22" pos:column="50"/></name></expr></argument>)<pos:position pos:line="22" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="52"/></expr_stmt>
        <if pos:line="23" pos:column="9">if <condition pos:line="23" pos:column="12">(<expr><name pos:line="23" pos:column="13">status<pos:position pos:line="23" pos:column="19"/></name> <operator pos:line="23" pos:column="20">!=<pos:position pos:line="23" pos:column="22"/></operator> <literal type="number" pos:line="23" pos:column="23">0<pos:position pos:line="23" pos:column="24"/></literal></expr>)<pos:position pos:line="23" pos:column="25"/></condition><then pos:line="23" pos:column="25"> <block pos:line="23" pos:column="26">{
                <expr_stmt><expr><call><name pos:line="24" pos:column="17">ERROR<pos:position pos:line="24" pos:column="22"/></name> <argument_list pos:line="24" pos:column="23">(<argument><expr><literal type="string" pos:line="24" pos:column="24">"write_http plugin: error with format_name"<pos:position pos:line="24" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="69"/></expr_stmt>
                <return pos:line="25" pos:column="17">return <expr><operator pos:line="25" pos:column="24">(<pos:position pos:line="25" pos:column="25"/></operator><name pos:line="25" pos:column="25">status<pos:position pos:line="25" pos:column="31"/></name><operator pos:line="25" pos:column="31">)<pos:position pos:line="25" pos:column="32"/></operator></expr>;<pos:position pos:line="25" pos:column="33"/></return>
        }<pos:position pos:line="26" pos:column="10"/></block></then></if>
        <expr_stmt><expr><call><name pos:line="27" pos:column="9">escape_string<pos:position pos:line="27" pos:column="22"/></name> <argument_list pos:line="27" pos:column="23">(<argument><expr><name pos:line="27" pos:column="24">key<pos:position pos:line="27" pos:column="27"/></name></expr></argument>, <argument><expr><sizeof pos:line="27" pos:column="29">sizeof <argument_list pos:line="27" pos:column="36">(<argument><expr><name pos:line="27" pos:column="37">key<pos:position pos:line="27" pos:column="40"/></name></expr></argument>)<pos:position pos:line="27" pos:column="41"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="27" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="43"/></expr_stmt>

        <comment type="block" pos:line="29" pos:column="9">/* Convert the values to an ASCII representation and put that into
         * `values'. */</comment>
        <expr_stmt><expr><name pos:line="31" pos:column="9">status<pos:position pos:line="31" pos:column="15"/></name> <operator pos:line="31" pos:column="16">=<pos:position pos:line="31" pos:column="17"/></operator> <call><name pos:line="31" pos:column="18">format_values<pos:position pos:line="31" pos:column="31"/></name> <argument_list pos:line="31" pos:column="32">(<argument><expr><name pos:line="31" pos:column="33">values<pos:position pos:line="31" pos:column="39"/></name></expr></argument>, <argument><expr><sizeof pos:line="31" pos:column="41">sizeof <argument_list pos:line="31" pos:column="48">(<argument><expr><name pos:line="31" pos:column="49">values<pos:position pos:line="31" pos:column="55"/></name></expr></argument>)<pos:position pos:line="31" pos:column="56"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="31" pos:column="58">ds<pos:position pos:line="31" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="62">vl<pos:position pos:line="31" pos:column="64"/></name></expr></argument>, <argument><expr><name><name pos:line="31" pos:column="66">cb<pos:position pos:line="31" pos:column="68"/></name><operator pos:line="31" pos:column="68">-&gt;<pos:position pos:line="31" pos:column="73"/></operator><name pos:line="31" pos:column="70">store_rates<pos:position pos:line="31" pos:column="81"/></name></name></expr></argument>)<pos:position pos:line="31" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="83"/></expr_stmt>
        <if pos:line="32" pos:column="9">if <condition pos:line="32" pos:column="12">(<expr><name pos:line="32" pos:column="13">status<pos:position pos:line="32" pos:column="19"/></name> <operator pos:line="32" pos:column="20">!=<pos:position pos:line="32" pos:column="22"/></operator> <literal type="number" pos:line="32" pos:column="23">0<pos:position pos:line="32" pos:column="24"/></literal></expr>)<pos:position pos:line="32" pos:column="25"/></condition><then pos:line="32" pos:column="25"> <block pos:line="32" pos:column="26">{
                <expr_stmt><expr><call><name pos:line="33" pos:column="17">ERROR<pos:position pos:line="33" pos:column="22"/></name> <argument_list pos:line="33" pos:column="23">(<argument><expr><literal type="string" pos:line="33" pos:column="24">"write_http plugin: error with "<pos:position pos:line="33" pos:column="56"/></literal>
                                <literal type="string" pos:line="34" pos:column="33">"wh_value_list_to_string"<pos:position pos:line="34" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="60"/></expr_stmt>
                <return pos:line="35" pos:column="17">return <expr><operator pos:line="35" pos:column="24">(<pos:position pos:line="35" pos:column="25"/></operator><name pos:line="35" pos:column="25">status<pos:position pos:line="35" pos:column="31"/></name><operator pos:line="35" pos:column="31">)<pos:position pos:line="35" pos:column="32"/></operator></expr>;<pos:position pos:line="35" pos:column="33"/></return>
        }<pos:position pos:line="36" pos:column="10"/></block></then></if>

        <expr_stmt><expr><name pos:line="38" pos:column="9">command_len<pos:position pos:line="38" pos:column="20"/></name> <operator pos:line="38" pos:column="21">=<pos:position pos:line="38" pos:column="22"/></operator> <operator pos:line="38" pos:column="23">(<pos:position pos:line="38" pos:column="24"/></operator><name pos:line="38" pos:column="24">size_t<pos:position pos:line="38" pos:column="30"/></name><operator pos:line="38" pos:column="30">)<pos:position pos:line="38" pos:column="31"/></operator> <call><name pos:line="38" pos:column="32">ssnprintf<pos:position pos:line="38" pos:column="41"/></name> <argument_list pos:line="38" pos:column="42">(<argument><expr><name pos:line="38" pos:column="43">command<pos:position pos:line="38" pos:column="50"/></name></expr></argument>, <argument><expr><sizeof pos:line="38" pos:column="52">sizeof <argument_list pos:line="38" pos:column="59">(<argument><expr><name pos:line="38" pos:column="60">command<pos:position pos:line="38" pos:column="67"/></name></expr></argument>)<pos:position pos:line="38" pos:column="68"/></argument_list></sizeof></expr></argument>,
                        <argument><expr><literal type="string" pos:line="39" pos:column="25">"PUTVAL %s interval=%.3f %s\r\n"<pos:position pos:line="39" pos:column="57"/></literal></expr></argument>,
                        <argument><expr><name pos:line="40" pos:column="25">key<pos:position pos:line="40" pos:column="28"/></name></expr></argument>,
                        <argument><expr><call><name pos:line="41" pos:column="25">CDTIME_T_TO_DOUBLE<pos:position pos:line="41" pos:column="43"/></name> <argument_list pos:line="41" pos:column="44">(<argument><expr><name><name pos:line="41" pos:column="45">vl<pos:position pos:line="41" pos:column="47"/></name><operator pos:line="41" pos:column="47">-&gt;<pos:position pos:line="41" pos:column="52"/></operator><name pos:line="41" pos:column="49">interval<pos:position pos:line="41" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="41" pos:column="58"/></argument_list></call></expr></argument>,
                        <argument><expr><name pos:line="42" pos:column="25">values<pos:position pos:line="42" pos:column="31"/></name></expr></argument>)<pos:position pos:line="42" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="33"/></expr_stmt>
        <if pos:line="43" pos:column="9">if <condition pos:line="43" pos:column="12">(<expr><name pos:line="43" pos:column="13">command_len<pos:position pos:line="43" pos:column="24"/></name> <operator pos:line="43" pos:column="25">&gt;=<pos:position pos:line="43" pos:column="30"/></operator> <sizeof pos:line="43" pos:column="28">sizeof <argument_list pos:line="43" pos:column="35">(<argument><expr><name pos:line="43" pos:column="36">command<pos:position pos:line="43" pos:column="43"/></name></expr></argument>)<pos:position pos:line="43" pos:column="44"/></argument_list></sizeof></expr>)<pos:position pos:line="43" pos:column="45"/></condition><then pos:line="43" pos:column="45"> <block pos:line="43" pos:column="46">{
                <expr_stmt><expr><call><name pos:line="44" pos:column="17">ERROR<pos:position pos:line="44" pos:column="22"/></name> <argument_list pos:line="44" pos:column="23">(<argument><expr><literal type="string" pos:line="44" pos:column="24">"write_http plugin: Command buffer too small: "<pos:position pos:line="44" pos:column="71"/></literal>
                                <literal type="string" pos:line="45" pos:column="33">"Need %zu bytes."<pos:position pos:line="45" pos:column="50"/></literal></expr></argument>, <argument><expr><name pos:line="45" pos:column="52">command_len<pos:position pos:line="45" pos:column="63"/></name> <operator pos:line="45" pos:column="64">+<pos:position pos:line="45" pos:column="65"/></operator> <literal type="number" pos:line="45" pos:column="66">1<pos:position pos:line="45" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="45" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="69"/></expr_stmt>
                <return pos:line="46" pos:column="17">return <expr><operator pos:line="46" pos:column="24">(<pos:position pos:line="46" pos:column="25"/></operator><operator pos:line="46" pos:column="25">-<pos:position pos:line="46" pos:column="26"/></operator><literal type="number" pos:line="46" pos:column="26">1<pos:position pos:line="46" pos:column="27"/></literal><operator pos:line="46" pos:column="27">)<pos:position pos:line="46" pos:column="28"/></operator></expr>;<pos:position pos:line="46" pos:column="29"/></return>
        }<pos:position pos:line="47" pos:column="10"/></block></then></if>

        <expr_stmt><expr><call><name pos:line="49" pos:column="9">pthread_mutex_lock<pos:position pos:line="49" pos:column="27"/></name> <argument_list pos:line="49" pos:column="28">(<argument><expr><operator pos:line="49" pos:column="29">&amp;<pos:position pos:line="49" pos:column="34"/></operator><name><name pos:line="49" pos:column="30">cb<pos:position pos:line="49" pos:column="32"/></name><operator pos:line="49" pos:column="32">-&gt;<pos:position pos:line="49" pos:column="37"/></operator><name pos:line="49" pos:column="34">send_lock<pos:position pos:line="49" pos:column="43"/></name></name></expr></argument>)<pos:position pos:line="49" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="45"/></expr_stmt>
        <if pos:line="50" pos:column="9">if <condition pos:line="50" pos:column="12">(<expr><call><name pos:line="50" pos:column="13">wh_callback_init<pos:position pos:line="50" pos:column="29"/></name> <argument_list pos:line="50" pos:column="30">(<argument><expr><name pos:line="50" pos:column="31">cb<pos:position pos:line="50" pos:column="33"/></name></expr></argument>)<pos:position pos:line="50" pos:column="34"/></argument_list></call> <operator pos:line="50" pos:column="35">!=<pos:position pos:line="50" pos:column="37"/></operator> <literal type="number" pos:line="50" pos:column="38">0<pos:position pos:line="50" pos:column="39"/></literal></expr>)<pos:position pos:line="50" pos:column="40"/></condition><then pos:line="50" pos:column="40">
        <block pos:line="51" pos:column="9">{
                <expr_stmt><expr><call><name pos:line="52" pos:column="17">ERROR<pos:position pos:line="52" pos:column="22"/></name> <argument_list pos:line="52" pos:column="23">(<argument><expr><literal type="string" pos:line="52" pos:column="24">"write_http plugin: wh_callback_init failed."<pos:position pos:line="52" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="52" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="71"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="53" pos:column="17">pthread_mutex_unlock<pos:position pos:line="53" pos:column="37"/></name> <argument_list pos:line="53" pos:column="38">(<argument><expr><operator pos:line="53" pos:column="39">&amp;<pos:position pos:line="53" pos:column="44"/></operator><name><name pos:line="53" pos:column="40">cb<pos:position pos:line="53" pos:column="42"/></name><operator pos:line="53" pos:column="42">-&gt;<pos:position pos:line="53" pos:column="47"/></operator><name pos:line="53" pos:column="44">send_lock<pos:position pos:line="53" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="53" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="55"/></expr_stmt>
                <return pos:line="54" pos:column="17">return <expr><operator pos:line="54" pos:column="24">(<pos:position pos:line="54" pos:column="25"/></operator><operator pos:line="54" pos:column="25">-<pos:position pos:line="54" pos:column="26"/></operator><literal type="number" pos:line="54" pos:column="26">1<pos:position pos:line="54" pos:column="27"/></literal><operator pos:line="54" pos:column="27">)<pos:position pos:line="54" pos:column="28"/></operator></expr>;<pos:position pos:line="54" pos:column="29"/></return>
        }<pos:position pos:line="55" pos:column="10"/></block></then></if>

        <if pos:line="57" pos:column="9">if <condition pos:line="57" pos:column="12">(<expr><name pos:line="57" pos:column="13">command_len<pos:position pos:line="57" pos:column="24"/></name> <operator pos:line="57" pos:column="25">&gt;=<pos:position pos:line="57" pos:column="30"/></operator> <name><name pos:line="57" pos:column="28">cb<pos:position pos:line="57" pos:column="30"/></name><operator pos:line="57" pos:column="30">-&gt;<pos:position pos:line="57" pos:column="35"/></operator><name pos:line="57" pos:column="32">send_buffer_free<pos:position pos:line="57" pos:column="48"/></name></name></expr>)<pos:position pos:line="57" pos:column="49"/></condition><then pos:line="57" pos:column="49">
        <block pos:line="58" pos:column="9">{
                <expr_stmt><expr><name pos:line="59" pos:column="17">status<pos:position pos:line="59" pos:column="23"/></name> <operator pos:line="59" pos:column="24">=<pos:position pos:line="59" pos:column="25"/></operator> <call><name pos:line="59" pos:column="26">wh_flush_nolock<pos:position pos:line="59" pos:column="41"/></name> <argument_list pos:line="59" pos:column="42">(<comment type="block" pos:line="59" pos:column="43">/* timeout = */</comment> <argument><expr><literal type="number" pos:line="59" pos:column="59">0<pos:position pos:line="59" pos:column="60"/></literal></expr></argument>, <argument><expr><name pos:line="59" pos:column="62">cb<pos:position pos:line="59" pos:column="64"/></name></expr></argument>)<pos:position pos:line="59" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="66"/></expr_stmt>
                <if pos:line="60" pos:column="17">if <condition pos:line="60" pos:column="20">(<expr><name pos:line="60" pos:column="21">status<pos:position pos:line="60" pos:column="27"/></name> <operator pos:line="60" pos:column="28">!=<pos:position pos:line="60" pos:column="30"/></operator> <literal type="number" pos:line="60" pos:column="31">0<pos:position pos:line="60" pos:column="32"/></literal></expr>)<pos:position pos:line="60" pos:column="33"/></condition><then pos:line="60" pos:column="33">
                <block pos:line="61" pos:column="17">{
                        <expr_stmt><expr><call><name pos:line="62" pos:column="25">pthread_mutex_unlock<pos:position pos:line="62" pos:column="45"/></name> <argument_list pos:line="62" pos:column="46">(<argument><expr><operator pos:line="62" pos:column="47">&amp;<pos:position pos:line="62" pos:column="52"/></operator><name><name pos:line="62" pos:column="48">cb<pos:position pos:line="62" pos:column="50"/></name><operator pos:line="62" pos:column="50">-&gt;<pos:position pos:line="62" pos:column="55"/></operator><name pos:line="62" pos:column="52">send_lock<pos:position pos:line="62" pos:column="61"/></name></name></expr></argument>)<pos:position pos:line="62" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="63"/></expr_stmt>
                        <return pos:line="63" pos:column="25">return <expr><operator pos:line="63" pos:column="32">(<pos:position pos:line="63" pos:column="33"/></operator><name pos:line="63" pos:column="33">status<pos:position pos:line="63" pos:column="39"/></name><operator pos:line="63" pos:column="39">)<pos:position pos:line="63" pos:column="40"/></operator></expr>;<pos:position pos:line="63" pos:column="41"/></return>
                }<pos:position pos:line="64" pos:column="18"/></block></then></if>
        }<pos:position pos:line="65" pos:column="10"/></block></then></if>
        <expr_stmt><expr><call><name pos:line="66" pos:column="9">assert<pos:position pos:line="66" pos:column="15"/></name> <argument_list pos:line="66" pos:column="16">(<argument><expr><name pos:line="66" pos:column="17">command_len<pos:position pos:line="66" pos:column="28"/></name> <operator pos:line="66" pos:column="29">&lt;<pos:position pos:line="66" pos:column="33"/></operator> <name><name pos:line="66" pos:column="31">cb<pos:position pos:line="66" pos:column="33"/></name><operator pos:line="66" pos:column="33">-&gt;<pos:position pos:line="66" pos:column="38"/></operator><name pos:line="66" pos:column="35">send_buffer_free<pos:position pos:line="66" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="66" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="53"/></expr_stmt>

        <comment type="block" pos:line="68" pos:column="9">/* `command_len + 1' because `command_len' does not include the
         * trailing null byte. Neither does `send_buffer_fill'. */</comment>
        <expr_stmt><expr><call><name pos:line="70" pos:column="9">memcpy<pos:position pos:line="70" pos:column="15"/></name> <argument_list pos:line="70" pos:column="16">(<argument><expr><name><name pos:line="70" pos:column="17">cb<pos:position pos:line="70" pos:column="19"/></name><operator pos:line="70" pos:column="19">-&gt;<pos:position pos:line="70" pos:column="24"/></operator><name pos:line="70" pos:column="21">send_buffer<pos:position pos:line="70" pos:column="32"/></name></name> <operator pos:line="70" pos:column="33">+<pos:position pos:line="70" pos:column="34"/></operator> <name><name pos:line="70" pos:column="35">cb<pos:position pos:line="70" pos:column="37"/></name><operator pos:line="70" pos:column="37">-&gt;<pos:position pos:line="70" pos:column="42"/></operator><name pos:line="70" pos:column="39">send_buffer_fill<pos:position pos:line="70" pos:column="55"/></name></name></expr></argument>,
                        <argument><expr><name pos:line="71" pos:column="25">command<pos:position pos:line="71" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="71" pos:column="34">command_len<pos:position pos:line="71" pos:column="45"/></name> <operator pos:line="71" pos:column="46">+<pos:position pos:line="71" pos:column="47"/></operator> <literal type="number" pos:line="71" pos:column="48">1<pos:position pos:line="71" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="71" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="51"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="72" pos:column="9">cb<pos:position pos:line="72" pos:column="11"/></name><operator pos:line="72" pos:column="11">-&gt;<pos:position pos:line="72" pos:column="16"/></operator><name pos:line="72" pos:column="13">send_buffer_fill<pos:position pos:line="72" pos:column="29"/></name></name> <operator pos:line="72" pos:column="30">+=<pos:position pos:line="72" pos:column="32"/></operator> <name pos:line="72" pos:column="33">command_len<pos:position pos:line="72" pos:column="44"/></name></expr>;<pos:position pos:line="72" pos:column="45"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="73" pos:column="9">cb<pos:position pos:line="73" pos:column="11"/></name><operator pos:line="73" pos:column="11">-&gt;<pos:position pos:line="73" pos:column="16"/></operator><name pos:line="73" pos:column="13">send_buffer_free<pos:position pos:line="73" pos:column="29"/></name></name> <operator pos:line="73" pos:column="30">-=<pos:position pos:line="73" pos:column="32"/></operator> <name pos:line="73" pos:column="33">command_len<pos:position pos:line="73" pos:column="44"/></name></expr>;<pos:position pos:line="73" pos:column="45"/></expr_stmt>

        <expr_stmt><expr><call><name pos:line="75" pos:column="9">DEBUG<pos:position pos:line="75" pos:column="14"/></name> <argument_list pos:line="75" pos:column="15">(<argument><expr><literal type="string" pos:line="75" pos:column="16">"write_http plugin: &lt;%s&gt; buffer %zu/%zu (%g%%) \"%s\""<pos:position pos:line="75" pos:column="76"/></literal></expr></argument>,
                        <argument><expr><name><name pos:line="76" pos:column="25">cb<pos:position pos:line="76" pos:column="27"/></name><operator pos:line="76" pos:column="27">-&gt;<pos:position pos:line="76" pos:column="32"/></operator><name pos:line="76" pos:column="29">location<pos:position pos:line="76" pos:column="37"/></name></name></expr></argument>,
                        <argument><expr><name><name pos:line="77" pos:column="25">cb<pos:position pos:line="77" pos:column="27"/></name><operator pos:line="77" pos:column="27">-&gt;<pos:position pos:line="77" pos:column="32"/></operator><name pos:line="77" pos:column="29">send_buffer_fill<pos:position pos:line="77" pos:column="45"/></name></name></expr></argument>, <argument><expr><name><name pos:line="77" pos:column="47">cb<pos:position pos:line="77" pos:column="49"/></name><operator pos:line="77" pos:column="49">-&gt;<pos:position pos:line="77" pos:column="54"/></operator><name pos:line="77" pos:column="51">send_buffer_size<pos:position pos:line="77" pos:column="67"/></name></name></expr></argument>,
                        <argument><expr><literal type="number" pos:line="78" pos:column="25">100.0<pos:position pos:line="78" pos:column="30"/></literal> <operator pos:line="78" pos:column="31">*<pos:position pos:line="78" pos:column="32"/></operator> <operator pos:line="78" pos:column="33">(<pos:position pos:line="78" pos:column="34"/></operator><operator pos:line="78" pos:column="34">(<pos:position pos:line="78" pos:column="35"/></operator><name pos:line="78" pos:column="35">double<pos:position pos:line="78" pos:column="41"/></name><operator pos:line="78" pos:column="41">)<pos:position pos:line="78" pos:column="42"/></operator> <name><name pos:line="78" pos:column="43">cb<pos:position pos:line="78" pos:column="45"/></name><operator pos:line="78" pos:column="45">-&gt;<pos:position pos:line="78" pos:column="50"/></operator><name pos:line="78" pos:column="47">send_buffer_fill<pos:position pos:line="78" pos:column="63"/></name></name><operator pos:line="78" pos:column="63">)<pos:position pos:line="78" pos:column="64"/></operator> <operator pos:line="78" pos:column="65">/<pos:position pos:line="78" pos:column="66"/></operator> <operator pos:line="78" pos:column="67">(<pos:position pos:line="78" pos:column="68"/></operator><operator pos:line="78" pos:column="68">(<pos:position pos:line="78" pos:column="69"/></operator><name pos:line="78" pos:column="69">double<pos:position pos:line="78" pos:column="75"/></name><operator pos:line="78" pos:column="75">)<pos:position pos:line="78" pos:column="76"/></operator> <name><name pos:line="78" pos:column="77">cb<pos:position pos:line="78" pos:column="79"/></name><operator pos:line="78" pos:column="79">-&gt;<pos:position pos:line="78" pos:column="84"/></operator><name pos:line="78" pos:column="81">send_buffer_size<pos:position pos:line="78" pos:column="97"/></name></name><operator pos:line="78" pos:column="97">)<pos:position pos:line="78" pos:column="98"/></operator></expr></argument>,
                        <argument><expr><name pos:line="79" pos:column="25">command<pos:position pos:line="79" pos:column="32"/></name></expr></argument>)<pos:position pos:line="79" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="34"/></expr_stmt>

        <comment type="block" pos:line="81" pos:column="9">/* Check if we have enough space for this command. */</comment>
        <expr_stmt><expr><call><name pos:line="82" pos:column="9">pthread_mutex_unlock<pos:position pos:line="82" pos:column="29"/></name> <argument_list pos:line="82" pos:column="30">(<argument><expr><operator pos:line="82" pos:column="31">&amp;<pos:position pos:line="82" pos:column="36"/></operator><name><name pos:line="82" pos:column="32">cb<pos:position pos:line="82" pos:column="34"/></name><operator pos:line="82" pos:column="34">-&gt;<pos:position pos:line="82" pos:column="39"/></operator><name pos:line="82" pos:column="36">send_lock<pos:position pos:line="82" pos:column="45"/></name></name></expr></argument>)<pos:position pos:line="82" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="47"/></expr_stmt>

        <return pos:line="84" pos:column="9">return <expr><operator pos:line="84" pos:column="16">(<pos:position pos:line="84" pos:column="17"/></operator><literal type="number" pos:line="84" pos:column="17">0<pos:position pos:line="84" pos:column="18"/></literal><operator pos:line="84" pos:column="18">)<pos:position pos:line="84" pos:column="19"/></operator></expr>;<pos:position pos:line="84" pos:column="20"/></return>
}<pos:position pos:line="85" pos:column="2"/></block></function></unit>
