<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_2919_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">plugin_log<pos:position pos:line="1" pos:column="16"/></name><parameter_list pos:line="1" pos:column="16">(<parameter><decl><type><name pos:line="1" pos:column="17">int<pos:position pos:line="1" pos:column="20"/></name></type> <name pos:line="1" pos:column="21">level<pos:position pos:line="1" pos:column="26"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="28">const<pos:position pos:line="1" pos:column="33"/></specifier> <name pos:line="1" pos:column="34">char<pos:position pos:line="1" pos:column="38"/></name> <modifier pos:line="1" pos:column="39">*<pos:position pos:line="1" pos:column="40"/></modifier></type><name pos:line="1" pos:column="40">format<pos:position pos:line="1" pos:column="46"/></name></decl></parameter>, <parameter><decl><type><modifier pos:line="1" pos:column="48">...<pos:position pos:line="1" pos:column="51"/></modifier></type></decl></parameter>)<pos:position pos:line="1" pos:column="52"/></parameter_list> <block pos:line="1" pos:column="53">{
  <decl_stmt><decl><type><name pos:line="2" pos:column="3">char<pos:position pos:line="2" pos:column="7"/></name></type> <name><name pos:line="2" pos:column="8">msg<pos:position pos:line="2" pos:column="11"/></name><index pos:line="2" pos:column="11">[<expr><literal type="number" pos:line="2" pos:column="12">1024<pos:position pos:line="2" pos:column="16"/></literal></expr>]<pos:position pos:line="2" pos:column="17"/></index></name></decl>;<pos:position pos:line="2" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">va_list<pos:position pos:line="3" pos:column="10"/></name></type> <name pos:line="3" pos:column="11">ap<pos:position pos:line="3" pos:column="13"/></name></decl>;<pos:position pos:line="3" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">llentry_t<pos:position pos:line="4" pos:column="12"/></name> <modifier pos:line="4" pos:column="13">*<pos:position pos:line="4" pos:column="14"/></modifier></type><name pos:line="4" pos:column="14">le<pos:position pos:line="4" pos:column="16"/></name></decl>;<pos:position pos:line="4" pos:column="17"/></decl_stmt>

<cpp:if pos:line="6" pos:column="1">#<cpp:directive pos:line="6" pos:column="2">if<pos:position pos:line="6" pos:column="4"/></cpp:directive> <expr><operator pos:line="6" pos:column="5">!<pos:position pos:line="6" pos:column="6"/></operator><name pos:line="6" pos:column="6">COLLECT_DEBUG<pos:position pos:line="6" pos:column="19"/></name></expr></cpp:if>
  <if pos:line="7" pos:column="3">if <condition pos:line="7" pos:column="6">(<expr><name pos:line="7" pos:column="7">level<pos:position pos:line="7" pos:column="12"/></name> <operator pos:line="7" pos:column="13">&gt;=<pos:position pos:line="7" pos:column="18"/></operator> <name pos:line="7" pos:column="16">LOG_DEBUG<pos:position pos:line="7" pos:column="25"/></name></expr>)<pos:position pos:line="7" pos:column="26"/></condition><then pos:line="7" pos:column="26">
    <block type="pseudo"><return pos:line="8" pos:column="5">return;<pos:position pos:line="8" pos:column="12"/></return></block></then></if>
<cpp:endif pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">endif<pos:position pos:line="9" pos:column="7"/></cpp:directive></cpp:endif>

  <expr_stmt><expr><call><name pos:line="11" pos:column="3">va_start<pos:position pos:line="11" pos:column="11"/></name><argument_list pos:line="11" pos:column="11">(<argument><expr><name pos:line="11" pos:column="12">ap<pos:position pos:line="11" pos:column="14"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="16">format<pos:position pos:line="11" pos:column="22"/></name></expr></argument>)<pos:position pos:line="11" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="24"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="12" pos:column="3">vsnprintf<pos:position pos:line="12" pos:column="12"/></name><argument_list pos:line="12" pos:column="12">(<argument><expr><name pos:line="12" pos:column="13">msg<pos:position pos:line="12" pos:column="16"/></name></expr></argument>, <argument><expr><sizeof pos:line="12" pos:column="18">sizeof<argument_list pos:line="12" pos:column="24">(<argument><expr><name pos:line="12" pos:column="25">msg<pos:position pos:line="12" pos:column="28"/></name></expr></argument>)<pos:position pos:line="12" pos:column="29"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="12" pos:column="31">format<pos:position pos:line="12" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="39">ap<pos:position pos:line="12" pos:column="41"/></name></expr></argument>)<pos:position pos:line="12" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="43"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="13" pos:column="3">msg<pos:position pos:line="13" pos:column="6"/></name><index pos:line="13" pos:column="6">[<expr><sizeof pos:line="13" pos:column="7">sizeof<argument_list pos:line="13" pos:column="13">(<argument><expr><name pos:line="13" pos:column="14">msg<pos:position pos:line="13" pos:column="17"/></name></expr></argument>)<pos:position pos:line="13" pos:column="18"/></argument_list></sizeof> <operator pos:line="13" pos:column="19">-<pos:position pos:line="13" pos:column="20"/></operator> <literal type="number" pos:line="13" pos:column="21">1<pos:position pos:line="13" pos:column="22"/></literal></expr>]<pos:position pos:line="13" pos:column="23"/></index></name> <operator pos:line="13" pos:column="24">=<pos:position pos:line="13" pos:column="25"/></operator> <literal type="char" pos:line="13" pos:column="26">'\0'<pos:position pos:line="13" pos:column="30"/></literal></expr>;<pos:position pos:line="13" pos:column="31"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="14" pos:column="3">va_end<pos:position pos:line="14" pos:column="9"/></name><argument_list pos:line="14" pos:column="9">(<argument><expr><name pos:line="14" pos:column="10">ap<pos:position pos:line="14" pos:column="12"/></name></expr></argument>)<pos:position pos:line="14" pos:column="13"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="14"/></expr_stmt>

  <if pos:line="16" pos:column="3">if <condition pos:line="16" pos:column="6">(<expr><name pos:line="16" pos:column="7">list_log<pos:position pos:line="16" pos:column="15"/></name> <operator pos:line="16" pos:column="16">==<pos:position pos:line="16" pos:column="18"/></operator> <name pos:line="16" pos:column="19">NULL<pos:position pos:line="16" pos:column="23"/></name></expr>)<pos:position pos:line="16" pos:column="24"/></condition><then pos:line="16" pos:column="24"> <block pos:line="16" pos:column="25">{
    <expr_stmt><expr><call><name pos:line="17" pos:column="5">fprintf<pos:position pos:line="17" pos:column="12"/></name><argument_list pos:line="17" pos:column="12">(<argument><expr><name pos:line="17" pos:column="13">stderr<pos:position pos:line="17" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="17" pos:column="21">"%s\n"<pos:position pos:line="17" pos:column="27"/></literal></expr></argument>, <argument><expr><name pos:line="17" pos:column="29">msg<pos:position pos:line="17" pos:column="32"/></name></expr></argument>)<pos:position pos:line="17" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="34"/></expr_stmt>
    <return pos:line="18" pos:column="5">return;<pos:position pos:line="18" pos:column="12"/></return>
  }<pos:position pos:line="19" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="21" pos:column="3">le<pos:position pos:line="21" pos:column="5"/></name> <operator pos:line="21" pos:column="6">=<pos:position pos:line="21" pos:column="7"/></operator> <call><name pos:line="21" pos:column="8">llist_head<pos:position pos:line="21" pos:column="18"/></name><argument_list pos:line="21" pos:column="18">(<argument><expr><name pos:line="21" pos:column="19">list_log<pos:position pos:line="21" pos:column="27"/></name></expr></argument>)<pos:position pos:line="21" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="29"/></expr_stmt>
  <while pos:line="22" pos:column="3">while <condition pos:line="22" pos:column="9">(<expr><name pos:line="22" pos:column="10">le<pos:position pos:line="22" pos:column="12"/></name> <operator pos:line="22" pos:column="13">!=<pos:position pos:line="22" pos:column="15"/></operator> <name pos:line="22" pos:column="16">NULL<pos:position pos:line="22" pos:column="20"/></name></expr>)<pos:position pos:line="22" pos:column="21"/></condition> <block pos:line="22" pos:column="22">{
    <decl_stmt><decl><type><name pos:line="23" pos:column="5">callback_func_t<pos:position pos:line="23" pos:column="20"/></name> <modifier pos:line="23" pos:column="21">*<pos:position pos:line="23" pos:column="22"/></modifier></type><name pos:line="23" pos:column="22">cf<pos:position pos:line="23" pos:column="24"/></name></decl>;<pos:position pos:line="23" pos:column="25"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="24" pos:column="5">plugin_log_cb<pos:position pos:line="24" pos:column="18"/></name></type> <name pos:line="24" pos:column="19">callback<pos:position pos:line="24" pos:column="27"/></name></decl>;<pos:position pos:line="24" pos:column="28"/></decl_stmt>

    <expr_stmt><expr><name pos:line="26" pos:column="5">cf<pos:position pos:line="26" pos:column="7"/></name> <operator pos:line="26" pos:column="8">=<pos:position pos:line="26" pos:column="9"/></operator> <name><name pos:line="26" pos:column="10">le<pos:position pos:line="26" pos:column="12"/></name><operator pos:line="26" pos:column="12">-&gt;<pos:position pos:line="26" pos:column="17"/></operator><name pos:line="26" pos:column="14">value<pos:position pos:line="26" pos:column="19"/></name></name></expr>;<pos:position pos:line="26" pos:column="20"/></expr_stmt>
    <expr_stmt><expr><name pos:line="27" pos:column="5">callback<pos:position pos:line="27" pos:column="13"/></name> <operator pos:line="27" pos:column="14">=<pos:position pos:line="27" pos:column="15"/></operator> <name><name pos:line="27" pos:column="16">cf<pos:position pos:line="27" pos:column="18"/></name><operator pos:line="27" pos:column="18">-&gt;<pos:position pos:line="27" pos:column="23"/></operator><name pos:line="27" pos:column="20">cf_callback<pos:position pos:line="27" pos:column="31"/></name></name></expr>;<pos:position pos:line="27" pos:column="32"/></expr_stmt>

    <comment type="block" pos:line="29" pos:column="5">/* do not switch plugin context; rather keep the context
     * (interval) information of the calling plugin */</comment>

    <expr_stmt><expr><call pos:line="32" pos:column="5">(<modifier pos:line="32" pos:column="6">*<pos:position pos:line="32" pos:column="7"/></modifier><name pos:line="32" pos:column="7">callback<pos:position pos:line="32" pos:column="15"/></name>)<argument_list pos:line="32" pos:column="16">(<argument><expr><name pos:line="32" pos:column="17">level<pos:position pos:line="32" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="24">msg<pos:position pos:line="32" pos:column="27"/></name></expr></argument>, <argument><expr><operator pos:line="32" pos:column="29">&amp;<pos:position pos:line="32" pos:column="34"/></operator><name><name pos:line="32" pos:column="30">cf<pos:position pos:line="32" pos:column="32"/></name><operator pos:line="32" pos:column="32">-&gt;<pos:position pos:line="32" pos:column="37"/></operator><name pos:line="32" pos:column="34">cf_udata<pos:position pos:line="32" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="32" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="44"/></expr_stmt>

    <expr_stmt><expr><name pos:line="34" pos:column="5">le<pos:position pos:line="34" pos:column="7"/></name> <operator pos:line="34" pos:column="8">=<pos:position pos:line="34" pos:column="9"/></operator> <name><name pos:line="34" pos:column="10">le<pos:position pos:line="34" pos:column="12"/></name><operator pos:line="34" pos:column="12">-&gt;<pos:position pos:line="34" pos:column="17"/></operator><name pos:line="34" pos:column="14">next<pos:position pos:line="34" pos:column="18"/></name></name></expr>;<pos:position pos:line="34" pos:column="19"/></expr_stmt>
  }<pos:position pos:line="35" pos:column="4"/></block></while>
}<pos:position pos:line="36" pos:column="2"/></block></function></unit>
