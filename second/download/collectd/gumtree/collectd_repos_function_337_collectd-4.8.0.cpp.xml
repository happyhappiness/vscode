<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_337_collectd-4.8.0.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">uc_get_rate_by_name<pos:position pos:line="1" pos:column="24"/></name> <parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><specifier pos:line="1" pos:column="26">const<pos:position pos:line="1" pos:column="31"/></specifier> <name pos:line="1" pos:column="32">char<pos:position pos:line="1" pos:column="36"/></name> <modifier pos:line="1" pos:column="37">*<pos:position pos:line="1" pos:column="38"/></modifier></type><name pos:line="1" pos:column="38">name<pos:position pos:line="1" pos:column="42"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="44">gauge_t<pos:position pos:line="1" pos:column="51"/></name> <modifier pos:line="1" pos:column="52">*<pos:position pos:line="1" pos:column="53"/></modifier><modifier pos:line="1" pos:column="53">*<pos:position pos:line="1" pos:column="54"/></modifier></type><name pos:line="1" pos:column="54">ret_values<pos:position pos:line="1" pos:column="64"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="66">size_t<pos:position pos:line="1" pos:column="72"/></name> <modifier pos:line="1" pos:column="73">*<pos:position pos:line="1" pos:column="74"/></modifier></type><name pos:line="1" pos:column="74">ret_values_num<pos:position pos:line="1" pos:column="88"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="89"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">gauge_t<pos:position pos:line="3" pos:column="10"/></name> <modifier pos:line="3" pos:column="11">*<pos:position pos:line="3" pos:column="12"/></modifier></type><name pos:line="3" pos:column="12">ret<pos:position pos:line="3" pos:column="15"/></name> <init pos:line="3" pos:column="16">= <expr><name pos:line="3" pos:column="18">NULL<pos:position pos:line="3" pos:column="22"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="23"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">size_t<pos:position pos:line="4" pos:column="9"/></name></type> <name pos:line="4" pos:column="10">ret_num<pos:position pos:line="4" pos:column="17"/></name> <init pos:line="4" pos:column="18">= <expr><literal type="number" pos:line="4" pos:column="20">0<pos:position pos:line="4" pos:column="21"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="22"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">cache_entry_t<pos:position pos:line="5" pos:column="16"/></name> <modifier pos:line="5" pos:column="17">*<pos:position pos:line="5" pos:column="18"/></modifier></type><name pos:line="5" pos:column="18">ce<pos:position pos:line="5" pos:column="20"/></name> <init pos:line="5" pos:column="21">= <expr><name pos:line="5" pos:column="23">NULL<pos:position pos:line="5" pos:column="27"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="28"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">int<pos:position pos:line="6" pos:column="6"/></name></type> <name pos:line="6" pos:column="7">status<pos:position pos:line="6" pos:column="13"/></name> <init pos:line="6" pos:column="14">= <expr><literal type="number" pos:line="6" pos:column="16">0<pos:position pos:line="6" pos:column="17"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="18"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="8" pos:column="3">pthread_mutex_lock<pos:position pos:line="8" pos:column="21"/></name> <argument_list pos:line="8" pos:column="22">(<argument><expr><operator pos:line="8" pos:column="23">&amp;<pos:position pos:line="8" pos:column="28"/></operator><name pos:line="8" pos:column="24">cache_lock<pos:position pos:line="8" pos:column="34"/></name></expr></argument>)<pos:position pos:line="8" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="36"/></expr_stmt>

  <if pos:line="10" pos:column="3">if <condition pos:line="10" pos:column="6">(<expr><call><name pos:line="10" pos:column="7">c_avl_get<pos:position pos:line="10" pos:column="16"/></name> <argument_list pos:line="10" pos:column="17">(<argument><expr><name pos:line="10" pos:column="18">cache_tree<pos:position pos:line="10" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="30">name<pos:position pos:line="10" pos:column="34"/></name></expr></argument>, <argument><expr><operator pos:line="10" pos:column="36">(<pos:position pos:line="10" pos:column="37"/></operator><name pos:line="10" pos:column="37">void<pos:position pos:line="10" pos:column="41"/></name> <operator pos:line="10" pos:column="42">*<pos:position pos:line="10" pos:column="43"/></operator><operator pos:line="10" pos:column="43">)<pos:position pos:line="10" pos:column="44"/></operator> <operator pos:line="10" pos:column="45">&amp;<pos:position pos:line="10" pos:column="50"/></operator><name pos:line="10" pos:column="46">ce<pos:position pos:line="10" pos:column="48"/></name></expr></argument>)<pos:position pos:line="10" pos:column="49"/></argument_list></call> <operator pos:line="10" pos:column="50">==<pos:position pos:line="10" pos:column="52"/></operator> <literal type="number" pos:line="10" pos:column="53">0<pos:position pos:line="10" pos:column="54"/></literal></expr>)<pos:position pos:line="10" pos:column="55"/></condition><then pos:line="10" pos:column="55">
  <block pos:line="11" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="12" pos:column="5">assert<pos:position pos:line="12" pos:column="11"/></name> <argument_list pos:line="12" pos:column="12">(<argument><expr><name pos:line="12" pos:column="13">ce<pos:position pos:line="12" pos:column="15"/></name> <operator pos:line="12" pos:column="16">!=<pos:position pos:line="12" pos:column="18"/></operator> <name pos:line="12" pos:column="19">NULL<pos:position pos:line="12" pos:column="23"/></name></expr></argument>)<pos:position pos:line="12" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="25"/></expr_stmt>

    <comment type="block" pos:line="14" pos:column="5">/* remove missing values from getval */</comment>
    <if pos:line="15" pos:column="5">if <condition pos:line="15" pos:column="8">(<expr><name><name pos:line="15" pos:column="9">ce<pos:position pos:line="15" pos:column="11"/></name><operator pos:line="15" pos:column="11">-&gt;<pos:position pos:line="15" pos:column="16"/></operator><name pos:line="15" pos:column="13">state<pos:position pos:line="15" pos:column="18"/></name></name> <operator pos:line="15" pos:column="19">==<pos:position pos:line="15" pos:column="21"/></operator> <name pos:line="15" pos:column="22">STATE_MISSING<pos:position pos:line="15" pos:column="35"/></name></expr>)<pos:position pos:line="15" pos:column="36"/></condition><then pos:line="15" pos:column="36">
    <block pos:line="16" pos:column="5">{
      <expr_stmt><expr><name pos:line="17" pos:column="7">status<pos:position pos:line="17" pos:column="13"/></name> <operator pos:line="17" pos:column="14">=<pos:position pos:line="17" pos:column="15"/></operator> <operator pos:line="17" pos:column="16">-<pos:position pos:line="17" pos:column="17"/></operator><literal type="number" pos:line="17" pos:column="17">1<pos:position pos:line="17" pos:column="18"/></literal></expr>;<pos:position pos:line="17" pos:column="19"/></expr_stmt>
    }<pos:position pos:line="18" pos:column="6"/></block></then>
    <else pos:line="19" pos:column="5">else
    <block pos:line="20" pos:column="5">{
      <expr_stmt><expr><name pos:line="21" pos:column="7">ret_num<pos:position pos:line="21" pos:column="14"/></name> <operator pos:line="21" pos:column="15">=<pos:position pos:line="21" pos:column="16"/></operator> <name><name pos:line="21" pos:column="17">ce<pos:position pos:line="21" pos:column="19"/></name><operator pos:line="21" pos:column="19">-&gt;<pos:position pos:line="21" pos:column="24"/></operator><name pos:line="21" pos:column="21">values_num<pos:position pos:line="21" pos:column="31"/></name></name></expr>;<pos:position pos:line="21" pos:column="32"/></expr_stmt>
      <expr_stmt><expr><name pos:line="22" pos:column="7">ret<pos:position pos:line="22" pos:column="10"/></name> <operator pos:line="22" pos:column="11">=<pos:position pos:line="22" pos:column="12"/></operator> <operator pos:line="22" pos:column="13">(<pos:position pos:line="22" pos:column="14"/></operator><name pos:line="22" pos:column="14">gauge_t<pos:position pos:line="22" pos:column="21"/></name> <operator pos:line="22" pos:column="22">*<pos:position pos:line="22" pos:column="23"/></operator><operator pos:line="22" pos:column="23">)<pos:position pos:line="22" pos:column="24"/></operator> <call><name pos:line="22" pos:column="25">malloc<pos:position pos:line="22" pos:column="31"/></name> <argument_list pos:line="22" pos:column="32">(<argument><expr><name pos:line="22" pos:column="33">ret_num<pos:position pos:line="22" pos:column="40"/></name> <operator pos:line="22" pos:column="41">*<pos:position pos:line="22" pos:column="42"/></operator> <sizeof pos:line="22" pos:column="43">sizeof <argument_list pos:line="22" pos:column="50">(<argument><expr><name pos:line="22" pos:column="51">gauge_t<pos:position pos:line="22" pos:column="58"/></name></expr></argument>)<pos:position pos:line="22" pos:column="59"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="22" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="61"/></expr_stmt>
      <if pos:line="23" pos:column="7">if <condition pos:line="23" pos:column="10">(<expr><name pos:line="23" pos:column="11">ret<pos:position pos:line="23" pos:column="14"/></name> <operator pos:line="23" pos:column="15">==<pos:position pos:line="23" pos:column="17"/></operator> <name pos:line="23" pos:column="18">NULL<pos:position pos:line="23" pos:column="22"/></name></expr>)<pos:position pos:line="23" pos:column="23"/></condition><then pos:line="23" pos:column="23">
      <block pos:line="24" pos:column="7">{
        <expr_stmt><expr><call><name pos:line="25" pos:column="9">ERROR<pos:position pos:line="25" pos:column="14"/></name> <argument_list pos:line="25" pos:column="15">(<argument><expr><literal type="string" pos:line="25" pos:column="16">"utils_cache: uc_get_rate_by_name: malloc failed."<pos:position pos:line="25" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="68"/></expr_stmt>
        <expr_stmt><expr><name pos:line="26" pos:column="9">status<pos:position pos:line="26" pos:column="15"/></name> <operator pos:line="26" pos:column="16">=<pos:position pos:line="26" pos:column="17"/></operator> <operator pos:line="26" pos:column="18">-<pos:position pos:line="26" pos:column="19"/></operator><literal type="number" pos:line="26" pos:column="19">1<pos:position pos:line="26" pos:column="20"/></literal></expr>;<pos:position pos:line="26" pos:column="21"/></expr_stmt>
      }<pos:position pos:line="27" pos:column="8"/></block></then>
      <else pos:line="28" pos:column="7">else
      <block pos:line="29" pos:column="7">{
        <expr_stmt><expr><call><name pos:line="30" pos:column="9">memcpy<pos:position pos:line="30" pos:column="15"/></name> <argument_list pos:line="30" pos:column="16">(<argument><expr><name pos:line="30" pos:column="17">ret<pos:position pos:line="30" pos:column="20"/></name></expr></argument>, <argument><expr><name><name pos:line="30" pos:column="22">ce<pos:position pos:line="30" pos:column="24"/></name><operator pos:line="30" pos:column="24">-&gt;<pos:position pos:line="30" pos:column="29"/></operator><name pos:line="30" pos:column="26">values_gauge<pos:position pos:line="30" pos:column="38"/></name></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="40">ret_num<pos:position pos:line="30" pos:column="47"/></name> <operator pos:line="30" pos:column="48">*<pos:position pos:line="30" pos:column="49"/></operator> <sizeof pos:line="30" pos:column="50">sizeof <argument_list pos:line="30" pos:column="57">(<argument><expr><name pos:line="30" pos:column="58">gauge_t<pos:position pos:line="30" pos:column="65"/></name></expr></argument>)<pos:position pos:line="30" pos:column="66"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="30" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="68"/></expr_stmt>
      }<pos:position pos:line="31" pos:column="8"/></block></else></if>
    }<pos:position pos:line="32" pos:column="6"/></block></else></if>
  }<pos:position pos:line="33" pos:column="4"/></block></then>
  <else pos:line="34" pos:column="3">else
  <block pos:line="35" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="36" pos:column="5">DEBUG<pos:position pos:line="36" pos:column="10"/></name> <argument_list pos:line="36" pos:column="11">(<argument><expr><literal type="string" pos:line="36" pos:column="12">"utils_cache: uc_get_rate_by_name: No such value: %s"<pos:position pos:line="36" pos:column="65"/></literal></expr></argument>, <argument><expr><name pos:line="36" pos:column="67">name<pos:position pos:line="36" pos:column="71"/></name></expr></argument>)<pos:position pos:line="36" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="73"/></expr_stmt>
    <expr_stmt><expr><name pos:line="37" pos:column="5">status<pos:position pos:line="37" pos:column="11"/></name> <operator pos:line="37" pos:column="12">=<pos:position pos:line="37" pos:column="13"/></operator> <operator pos:line="37" pos:column="14">-<pos:position pos:line="37" pos:column="15"/></operator><literal type="number" pos:line="37" pos:column="15">1<pos:position pos:line="37" pos:column="16"/></literal></expr>;<pos:position pos:line="37" pos:column="17"/></expr_stmt>
  }<pos:position pos:line="38" pos:column="4"/></block></else></if>

  <expr_stmt><expr><call><name pos:line="40" pos:column="3">pthread_mutex_unlock<pos:position pos:line="40" pos:column="23"/></name> <argument_list pos:line="40" pos:column="24">(<argument><expr><operator pos:line="40" pos:column="25">&amp;<pos:position pos:line="40" pos:column="30"/></operator><name pos:line="40" pos:column="26">cache_lock<pos:position pos:line="40" pos:column="36"/></name></expr></argument>)<pos:position pos:line="40" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="38"/></expr_stmt>

  <if pos:line="42" pos:column="3">if <condition pos:line="42" pos:column="6">(<expr><name pos:line="42" pos:column="7">status<pos:position pos:line="42" pos:column="13"/></name> <operator pos:line="42" pos:column="14">==<pos:position pos:line="42" pos:column="16"/></operator> <literal type="number" pos:line="42" pos:column="17">0<pos:position pos:line="42" pos:column="18"/></literal></expr>)<pos:position pos:line="42" pos:column="19"/></condition><then pos:line="42" pos:column="19">
  <block pos:line="43" pos:column="3">{
    <expr_stmt><expr><operator pos:line="44" pos:column="5">*<pos:position pos:line="44" pos:column="6"/></operator><name pos:line="44" pos:column="6">ret_values<pos:position pos:line="44" pos:column="16"/></name> <operator pos:line="44" pos:column="17">=<pos:position pos:line="44" pos:column="18"/></operator> <name pos:line="44" pos:column="19">ret<pos:position pos:line="44" pos:column="22"/></name></expr>;<pos:position pos:line="44" pos:column="23"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="45" pos:column="5">*<pos:position pos:line="45" pos:column="6"/></operator><name pos:line="45" pos:column="6">ret_values_num<pos:position pos:line="45" pos:column="20"/></name> <operator pos:line="45" pos:column="21">=<pos:position pos:line="45" pos:column="22"/></operator> <name pos:line="45" pos:column="23">ret_num<pos:position pos:line="45" pos:column="30"/></name></expr>;<pos:position pos:line="45" pos:column="31"/></expr_stmt>
  }<pos:position pos:line="46" pos:column="4"/></block></then></if>

  <return pos:line="48" pos:column="3">return <expr><operator pos:line="48" pos:column="10">(<pos:position pos:line="48" pos:column="11"/></operator><name pos:line="48" pos:column="11">status<pos:position pos:line="48" pos:column="17"/></name><operator pos:line="48" pos:column="17">)<pos:position pos:line="48" pos:column="18"/></operator></expr>;<pos:position pos:line="48" pos:column="19"/></return>
}<pos:position pos:line="49" pos:column="2"/></block></function></unit>
