<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_2400_collectd-5.6.3.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">parse_value<pos:position pos:line="1" pos:column="16"/></name><parameter_list pos:line="1" pos:column="16">(<parameter><decl><type><specifier pos:line="1" pos:column="17">const<pos:position pos:line="1" pos:column="22"/></specifier> <name pos:line="1" pos:column="23">char<pos:position pos:line="1" pos:column="27"/></name> <modifier pos:line="1" pos:column="28">*<pos:position pos:line="1" pos:column="29"/></modifier></type><name pos:line="1" pos:column="29">value_orig<pos:position pos:line="1" pos:column="39"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="41">value_t<pos:position pos:line="1" pos:column="48"/></name> <modifier pos:line="1" pos:column="49">*<pos:position pos:line="1" pos:column="50"/></modifier></type><name pos:line="1" pos:column="50">ret_value<pos:position pos:line="1" pos:column="59"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="61">int<pos:position pos:line="1" pos:column="64"/></name></type> <name pos:line="1" pos:column="65">ds_type<pos:position pos:line="1" pos:column="72"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="73"/></parameter_list> <block pos:line="1" pos:column="74">{
  <decl_stmt><decl><type><name pos:line="2" pos:column="3">char<pos:position pos:line="2" pos:column="7"/></name> <modifier pos:line="2" pos:column="8">*<pos:position pos:line="2" pos:column="9"/></modifier></type><name pos:line="2" pos:column="9">value<pos:position pos:line="2" pos:column="14"/></name></decl>;<pos:position pos:line="2" pos:column="15"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">char<pos:position pos:line="3" pos:column="7"/></name> <modifier pos:line="3" pos:column="8">*<pos:position pos:line="3" pos:column="9"/></modifier></type><name pos:line="3" pos:column="9">endptr<pos:position pos:line="3" pos:column="15"/></name> <init pos:line="3" pos:column="16">= <expr><name pos:line="3" pos:column="18">NULL<pos:position pos:line="3" pos:column="22"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="23"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">size_t<pos:position pos:line="4" pos:column="9"/></name></type> <name pos:line="4" pos:column="10">value_len<pos:position pos:line="4" pos:column="19"/></name></decl>;<pos:position pos:line="4" pos:column="20"/></decl_stmt>

  <if pos:line="6" pos:column="3">if <condition pos:line="6" pos:column="6">(<expr><name pos:line="6" pos:column="7">value_orig<pos:position pos:line="6" pos:column="17"/></name> <operator pos:line="6" pos:column="18">==<pos:position pos:line="6" pos:column="20"/></operator> <name pos:line="6" pos:column="21">NULL<pos:position pos:line="6" pos:column="25"/></name></expr>)<pos:position pos:line="6" pos:column="26"/></condition><then pos:line="6" pos:column="26">
    <block type="pseudo"><return pos:line="7" pos:column="5">return <expr><operator pos:line="7" pos:column="12">(<pos:position pos:line="7" pos:column="13"/></operator><name pos:line="7" pos:column="13">EINVAL<pos:position pos:line="7" pos:column="19"/></name><operator pos:line="7" pos:column="19">)<pos:position pos:line="7" pos:column="20"/></operator></expr>;<pos:position pos:line="7" pos:column="21"/></return></block></then></if>

  <expr_stmt><expr><name pos:line="9" pos:column="3">value<pos:position pos:line="9" pos:column="8"/></name> <operator pos:line="9" pos:column="9">=<pos:position pos:line="9" pos:column="10"/></operator> <call><name pos:line="9" pos:column="11">strdup<pos:position pos:line="9" pos:column="17"/></name><argument_list pos:line="9" pos:column="17">(<argument><expr><name pos:line="9" pos:column="18">value_orig<pos:position pos:line="9" pos:column="28"/></name></expr></argument>)<pos:position pos:line="9" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="30"/></expr_stmt>
  <if pos:line="10" pos:column="3">if <condition pos:line="10" pos:column="6">(<expr><name pos:line="10" pos:column="7">value<pos:position pos:line="10" pos:column="12"/></name> <operator pos:line="10" pos:column="13">==<pos:position pos:line="10" pos:column="15"/></operator> <name pos:line="10" pos:column="16">NULL<pos:position pos:line="10" pos:column="20"/></name></expr>)<pos:position pos:line="10" pos:column="21"/></condition><then pos:line="10" pos:column="21">
    <block type="pseudo"><return pos:line="11" pos:column="5">return <expr><operator pos:line="11" pos:column="12">(<pos:position pos:line="11" pos:column="13"/></operator><name pos:line="11" pos:column="13">ENOMEM<pos:position pos:line="11" pos:column="19"/></name><operator pos:line="11" pos:column="19">)<pos:position pos:line="11" pos:column="20"/></operator></expr>;<pos:position pos:line="11" pos:column="21"/></return></block></then></if>
  <expr_stmt><expr><name pos:line="12" pos:column="3">value_len<pos:position pos:line="12" pos:column="12"/></name> <operator pos:line="12" pos:column="13">=<pos:position pos:line="12" pos:column="14"/></operator> <call><name pos:line="12" pos:column="15">strlen<pos:position pos:line="12" pos:column="21"/></name><argument_list pos:line="12" pos:column="21">(<argument><expr><name pos:line="12" pos:column="22">value<pos:position pos:line="12" pos:column="27"/></name></expr></argument>)<pos:position pos:line="12" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="29"/></expr_stmt>

  <while pos:line="14" pos:column="3">while <condition pos:line="14" pos:column="9">(<expr><operator pos:line="14" pos:column="10">(<pos:position pos:line="14" pos:column="11"/></operator><name pos:line="14" pos:column="11">value_len<pos:position pos:line="14" pos:column="20"/></name> <operator pos:line="14" pos:column="21">&gt;<pos:position pos:line="14" pos:column="25"/></operator> <literal type="number" pos:line="14" pos:column="23">0<pos:position pos:line="14" pos:column="24"/></literal><operator pos:line="14" pos:column="24">)<pos:position pos:line="14" pos:column="25"/></operator> <operator pos:line="14" pos:column="26">&amp;&amp;<pos:position pos:line="14" pos:column="36"/></operator> <call><name pos:line="14" pos:column="29">isspace<pos:position pos:line="14" pos:column="36"/></name><argument_list pos:line="14" pos:column="36">(<argument><expr><operator pos:line="14" pos:column="37">(<pos:position pos:line="14" pos:column="38"/></operator><name pos:line="14" pos:column="38">int<pos:position pos:line="14" pos:column="41"/></name><operator pos:line="14" pos:column="41">)<pos:position pos:line="14" pos:column="42"/></operator><name><name pos:line="14" pos:column="42">value<pos:position pos:line="14" pos:column="47"/></name><index pos:line="14" pos:column="47">[<expr><name pos:line="14" pos:column="48">value_len<pos:position pos:line="14" pos:column="57"/></name> <operator pos:line="14" pos:column="58">-<pos:position pos:line="14" pos:column="59"/></operator> <literal type="number" pos:line="14" pos:column="60">1<pos:position pos:line="14" pos:column="61"/></literal></expr>]<pos:position pos:line="14" pos:column="62"/></index></name></expr></argument>)<pos:position pos:line="14" pos:column="63"/></argument_list></call></expr>)<pos:position pos:line="14" pos:column="64"/></condition> <block pos:line="14" pos:column="65">{
    <expr_stmt><expr><name><name pos:line="15" pos:column="5">value<pos:position pos:line="15" pos:column="10"/></name><index pos:line="15" pos:column="10">[<expr><name pos:line="15" pos:column="11">value_len<pos:position pos:line="15" pos:column="20"/></name> <operator pos:line="15" pos:column="21">-<pos:position pos:line="15" pos:column="22"/></operator> <literal type="number" pos:line="15" pos:column="23">1<pos:position pos:line="15" pos:column="24"/></literal></expr>]<pos:position pos:line="15" pos:column="25"/></index></name> <operator pos:line="15" pos:column="26">=<pos:position pos:line="15" pos:column="27"/></operator> <literal type="number" pos:line="15" pos:column="28">0<pos:position pos:line="15" pos:column="29"/></literal></expr>;<pos:position pos:line="15" pos:column="30"/></expr_stmt>
    <expr_stmt><expr><name pos:line="16" pos:column="5">value_len<pos:position pos:line="16" pos:column="14"/></name><operator pos:line="16" pos:column="14">--<pos:position pos:line="16" pos:column="16"/></operator></expr>;<pos:position pos:line="16" pos:column="17"/></expr_stmt>
  }<pos:position pos:line="17" pos:column="4"/></block></while>

  <switch pos:line="19" pos:column="3">switch <condition pos:line="19" pos:column="10">(<expr><name pos:line="19" pos:column="11">ds_type<pos:position pos:line="19" pos:column="18"/></name></expr>)<pos:position pos:line="19" pos:column="19"/></condition> <block pos:line="19" pos:column="20">{
  <case pos:line="20" pos:column="3">case <expr><name pos:line="20" pos:column="8">DS_TYPE_COUNTER<pos:position pos:line="20" pos:column="23"/></name></expr>:<pos:position pos:line="20" pos:column="24"/></case>
    <expr_stmt><expr><name><name pos:line="21" pos:column="5">ret_value<pos:position pos:line="21" pos:column="14"/></name><operator pos:line="21" pos:column="14">-&gt;<pos:position pos:line="21" pos:column="19"/></operator><name pos:line="21" pos:column="16">counter<pos:position pos:line="21" pos:column="23"/></name></name> <operator pos:line="21" pos:column="24">=<pos:position pos:line="21" pos:column="25"/></operator> <operator pos:line="21" pos:column="26">(<pos:position pos:line="21" pos:column="27"/></operator><name pos:line="21" pos:column="27">counter_t<pos:position pos:line="21" pos:column="36"/></name><operator pos:line="21" pos:column="36">)<pos:position pos:line="21" pos:column="37"/></operator><call><name pos:line="21" pos:column="37">strtoull<pos:position pos:line="21" pos:column="45"/></name><argument_list pos:line="21" pos:column="45">(<argument><expr><name pos:line="21" pos:column="46">value<pos:position pos:line="21" pos:column="51"/></name></expr></argument>, <argument><expr><operator pos:line="21" pos:column="53">&amp;<pos:position pos:line="21" pos:column="58"/></operator><name pos:line="21" pos:column="54">endptr<pos:position pos:line="21" pos:column="60"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="21" pos:column="62">0<pos:position pos:line="21" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="65"/></expr_stmt>
    <break pos:line="22" pos:column="5">break;<pos:position pos:line="22" pos:column="11"/></break>

  <case pos:line="24" pos:column="3">case <expr><name pos:line="24" pos:column="8">DS_TYPE_GAUGE<pos:position pos:line="24" pos:column="21"/></name></expr>:<pos:position pos:line="24" pos:column="22"/></case>
    <expr_stmt><expr><name><name pos:line="25" pos:column="5">ret_value<pos:position pos:line="25" pos:column="14"/></name><operator pos:line="25" pos:column="14">-&gt;<pos:position pos:line="25" pos:column="19"/></operator><name pos:line="25" pos:column="16">gauge<pos:position pos:line="25" pos:column="21"/></name></name> <operator pos:line="25" pos:column="22">=<pos:position pos:line="25" pos:column="23"/></operator> <operator pos:line="25" pos:column="24">(<pos:position pos:line="25" pos:column="25"/></operator><name pos:line="25" pos:column="25">gauge_t<pos:position pos:line="25" pos:column="32"/></name><operator pos:line="25" pos:column="32">)<pos:position pos:line="25" pos:column="33"/></operator><call><name pos:line="25" pos:column="33">strtod<pos:position pos:line="25" pos:column="39"/></name><argument_list pos:line="25" pos:column="39">(<argument><expr><name pos:line="25" pos:column="40">value<pos:position pos:line="25" pos:column="45"/></name></expr></argument>, <argument><expr><operator pos:line="25" pos:column="47">&amp;<pos:position pos:line="25" pos:column="52"/></operator><name pos:line="25" pos:column="48">endptr<pos:position pos:line="25" pos:column="54"/></name></expr></argument>)<pos:position pos:line="25" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="56"/></expr_stmt>
    <break pos:line="26" pos:column="5">break;<pos:position pos:line="26" pos:column="11"/></break>

  <case pos:line="28" pos:column="3">case <expr><name pos:line="28" pos:column="8">DS_TYPE_DERIVE<pos:position pos:line="28" pos:column="22"/></name></expr>:<pos:position pos:line="28" pos:column="23"/></case>
    <expr_stmt><expr><name><name pos:line="29" pos:column="5">ret_value<pos:position pos:line="29" pos:column="14"/></name><operator pos:line="29" pos:column="14">-&gt;<pos:position pos:line="29" pos:column="19"/></operator><name pos:line="29" pos:column="16">derive<pos:position pos:line="29" pos:column="22"/></name></name> <operator pos:line="29" pos:column="23">=<pos:position pos:line="29" pos:column="24"/></operator> <operator pos:line="29" pos:column="25">(<pos:position pos:line="29" pos:column="26"/></operator><name pos:line="29" pos:column="26">derive_t<pos:position pos:line="29" pos:column="34"/></name><operator pos:line="29" pos:column="34">)<pos:position pos:line="29" pos:column="35"/></operator><call><name pos:line="29" pos:column="35">strtoll<pos:position pos:line="29" pos:column="42"/></name><argument_list pos:line="29" pos:column="42">(<argument><expr><name pos:line="29" pos:column="43">value<pos:position pos:line="29" pos:column="48"/></name></expr></argument>, <argument><expr><operator pos:line="29" pos:column="50">&amp;<pos:position pos:line="29" pos:column="55"/></operator><name pos:line="29" pos:column="51">endptr<pos:position pos:line="29" pos:column="57"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="29" pos:column="59">0<pos:position pos:line="29" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="62"/></expr_stmt>
    <break pos:line="30" pos:column="5">break;<pos:position pos:line="30" pos:column="11"/></break>

  <case pos:line="32" pos:column="3">case <expr><name pos:line="32" pos:column="8">DS_TYPE_ABSOLUTE<pos:position pos:line="32" pos:column="24"/></name></expr>:<pos:position pos:line="32" pos:column="25"/></case>
    <expr_stmt><expr><name><name pos:line="33" pos:column="5">ret_value<pos:position pos:line="33" pos:column="14"/></name><operator pos:line="33" pos:column="14">-&gt;<pos:position pos:line="33" pos:column="19"/></operator><name pos:line="33" pos:column="16">absolute<pos:position pos:line="33" pos:column="24"/></name></name> <operator pos:line="33" pos:column="25">=<pos:position pos:line="33" pos:column="26"/></operator> <operator pos:line="33" pos:column="27">(<pos:position pos:line="33" pos:column="28"/></operator><name pos:line="33" pos:column="28">absolute_t<pos:position pos:line="33" pos:column="38"/></name><operator pos:line="33" pos:column="38">)<pos:position pos:line="33" pos:column="39"/></operator><call><name pos:line="33" pos:column="39">strtoull<pos:position pos:line="33" pos:column="47"/></name><argument_list pos:line="33" pos:column="47">(<argument><expr><name pos:line="33" pos:column="48">value<pos:position pos:line="33" pos:column="53"/></name></expr></argument>, <argument><expr><operator pos:line="33" pos:column="55">&amp;<pos:position pos:line="33" pos:column="60"/></operator><name pos:line="33" pos:column="56">endptr<pos:position pos:line="33" pos:column="62"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="33" pos:column="64">0<pos:position pos:line="33" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="67"/></expr_stmt>
    <break pos:line="34" pos:column="5">break;<pos:position pos:line="34" pos:column="11"/></break>

  <default pos:line="36" pos:column="3">default:<pos:position pos:line="36" pos:column="11"/></default>
    <expr_stmt><expr><call><name pos:line="37" pos:column="5">sfree<pos:position pos:line="37" pos:column="10"/></name><argument_list pos:line="37" pos:column="10">(<argument><expr><name pos:line="37" pos:column="11">value<pos:position pos:line="37" pos:column="16"/></name></expr></argument>)<pos:position pos:line="37" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="18"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="38" pos:column="5">ERROR<pos:position pos:line="38" pos:column="10"/></name><argument_list pos:line="38" pos:column="10">(<argument><expr><literal type="string" pos:line="38" pos:column="11">"parse_value: Invalid data source type: %i."<pos:position pos:line="38" pos:column="55"/></literal></expr></argument>, <argument><expr><name pos:line="38" pos:column="57">ds_type<pos:position pos:line="38" pos:column="64"/></name></expr></argument>)<pos:position pos:line="38" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="66"/></expr_stmt>
    <return pos:line="39" pos:column="5">return <expr><operator pos:line="39" pos:column="12">-<pos:position pos:line="39" pos:column="13"/></operator><literal type="number" pos:line="39" pos:column="13">1<pos:position pos:line="39" pos:column="14"/></literal></expr>;<pos:position pos:line="39" pos:column="15"/></return>
  }<pos:position pos:line="40" pos:column="4"/></block></switch>

  <if pos:line="42" pos:column="3">if <condition pos:line="42" pos:column="6">(<expr><name pos:line="42" pos:column="7">value<pos:position pos:line="42" pos:column="12"/></name> <operator pos:line="42" pos:column="13">==<pos:position pos:line="42" pos:column="15"/></operator> <name pos:line="42" pos:column="16">endptr<pos:position pos:line="42" pos:column="22"/></name></expr>)<pos:position pos:line="42" pos:column="23"/></condition><then pos:line="42" pos:column="23"> <block pos:line="42" pos:column="24">{
    <expr_stmt><expr><call><name pos:line="43" pos:column="5">ERROR<pos:position pos:line="43" pos:column="10"/></name><argument_list pos:line="43" pos:column="10">(<argument><expr><literal type="string" pos:line="43" pos:column="11">"parse_value: Failed to parse string as %s: \"%s\"."<pos:position pos:line="43" pos:column="63"/></literal></expr></argument>,
          <argument><expr><call><name pos:line="44" pos:column="11">DS_TYPE_TO_STRING<pos:position pos:line="44" pos:column="28"/></name><argument_list pos:line="44" pos:column="28">(<argument><expr><name pos:line="44" pos:column="29">ds_type<pos:position pos:line="44" pos:column="36"/></name></expr></argument>)<pos:position pos:line="44" pos:column="37"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="44" pos:column="39">value<pos:position pos:line="44" pos:column="44"/></name></expr></argument>)<pos:position pos:line="44" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="46"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="45" pos:column="5">sfree<pos:position pos:line="45" pos:column="10"/></name><argument_list pos:line="45" pos:column="10">(<argument><expr><name pos:line="45" pos:column="11">value<pos:position pos:line="45" pos:column="16"/></name></expr></argument>)<pos:position pos:line="45" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="18"/></expr_stmt>
    <return pos:line="46" pos:column="5">return <expr><operator pos:line="46" pos:column="12">-<pos:position pos:line="46" pos:column="13"/></operator><literal type="number" pos:line="46" pos:column="13">1<pos:position pos:line="46" pos:column="14"/></literal></expr>;<pos:position pos:line="46" pos:column="15"/></return>
  }<pos:position pos:line="47" pos:column="4"/></block></then> <elseif pos:line="47" pos:column="5">else <if pos:line="47" pos:column="10">if <condition pos:line="47" pos:column="13">(<expr><operator pos:line="47" pos:column="14">(<pos:position pos:line="47" pos:column="15"/></operator><name pos:line="47" pos:column="15">NULL<pos:position pos:line="47" pos:column="19"/></name> <operator pos:line="47" pos:column="20">!=<pos:position pos:line="47" pos:column="22"/></operator> <name pos:line="47" pos:column="23">endptr<pos:position pos:line="47" pos:column="29"/></name><operator pos:line="47" pos:column="29">)<pos:position pos:line="47" pos:column="30"/></operator> <operator pos:line="47" pos:column="31">&amp;&amp;<pos:position pos:line="47" pos:column="41"/></operator> <operator pos:line="47" pos:column="34">(<pos:position pos:line="47" pos:column="35"/></operator><literal type="char" pos:line="47" pos:column="35">'\0'<pos:position pos:line="47" pos:column="39"/></literal> <operator pos:line="47" pos:column="40">!=<pos:position pos:line="47" pos:column="42"/></operator> <operator pos:line="47" pos:column="43">*<pos:position pos:line="47" pos:column="44"/></operator><name pos:line="47" pos:column="44">endptr<pos:position pos:line="47" pos:column="50"/></name><operator pos:line="47" pos:column="50">)<pos:position pos:line="47" pos:column="51"/></operator></expr>)<pos:position pos:line="47" pos:column="52"/></condition><then pos:line="47" pos:column="52">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="48" pos:column="5">INFO<pos:position pos:line="48" pos:column="9"/></name><argument_list pos:line="48" pos:column="9">(<argument><expr><literal type="string" pos:line="48" pos:column="10">"parse_value: Ignoring trailing garbage \"%s\" after %s value. "<pos:position pos:line="48" pos:column="74"/></literal>
         <literal type="string" pos:line="49" pos:column="10">"Input string was \"%s\"."<pos:position pos:line="49" pos:column="36"/></literal></expr></argument>,
         <argument><expr><name pos:line="50" pos:column="10">endptr<pos:position pos:line="50" pos:column="16"/></name></expr></argument>, <argument><expr><call><name pos:line="50" pos:column="18">DS_TYPE_TO_STRING<pos:position pos:line="50" pos:column="35"/></name><argument_list pos:line="50" pos:column="35">(<argument><expr><name pos:line="50" pos:column="36">ds_type<pos:position pos:line="50" pos:column="43"/></name></expr></argument>)<pos:position pos:line="50" pos:column="44"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="50" pos:column="46">value_orig<pos:position pos:line="50" pos:column="56"/></name></expr></argument>)<pos:position pos:line="50" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="58"/></expr_stmt></block></then></if></elseif></if>

  <expr_stmt><expr><call><name pos:line="52" pos:column="3">sfree<pos:position pos:line="52" pos:column="8"/></name><argument_list pos:line="52" pos:column="8">(<argument><expr><name pos:line="52" pos:column="9">value<pos:position pos:line="52" pos:column="14"/></name></expr></argument>)<pos:position pos:line="52" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="16"/></expr_stmt>
  <return pos:line="53" pos:column="3">return <expr><literal type="number" pos:line="53" pos:column="10">0<pos:position pos:line="53" pos:column="11"/></literal></expr>;<pos:position pos:line="53" pos:column="12"/></return>
}<pos:position pos:line="54" pos:column="2"/></block></function></unit>
