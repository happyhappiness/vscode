<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1464_collectd-5.5.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">riemann_batch_add_value_list<pos:position pos:line="1" pos:column="40"/></name> <parameter_list pos:line="1" pos:column="41">(<parameter><decl><type><name><name pos:line="1" pos:column="42">struct<pos:position pos:line="1" pos:column="48"/></name> <name pos:line="1" pos:column="49">riemann_host<pos:position pos:line="1" pos:column="61"/></name></name> <modifier pos:line="1" pos:column="62">*<pos:position pos:line="1" pos:column="63"/></modifier></type><name pos:line="1" pos:column="63">host<pos:position pos:line="1" pos:column="67"/></name></decl></parameter>, <comment type="block" pos:line="1" pos:column="69">/* {{{ */</comment>
                                         <parameter><decl><type><name pos:line="2" pos:column="42">data_set_t<pos:position pos:line="2" pos:column="52"/></name> <specifier pos:line="2" pos:column="53">const<pos:position pos:line="2" pos:column="58"/></specifier> <modifier pos:line="2" pos:column="59">*<pos:position pos:line="2" pos:column="60"/></modifier></type><name pos:line="2" pos:column="60">ds<pos:position pos:line="2" pos:column="62"/></name></decl></parameter>,
                                         <parameter><decl><type><name pos:line="3" pos:column="42">value_list_t<pos:position pos:line="3" pos:column="54"/></name> <specifier pos:line="3" pos:column="55">const<pos:position pos:line="3" pos:column="60"/></specifier> <modifier pos:line="3" pos:column="61">*<pos:position pos:line="3" pos:column="62"/></modifier></type><name pos:line="3" pos:column="62">vl<pos:position pos:line="3" pos:column="64"/></name></decl></parameter>,
                                         <parameter><decl><type><name pos:line="4" pos:column="42">int<pos:position pos:line="4" pos:column="45"/></name> <modifier pos:line="4" pos:column="46">*<pos:position pos:line="4" pos:column="47"/></modifier></type><name pos:line="4" pos:column="47">statuses<pos:position pos:line="4" pos:column="55"/></name></decl></parameter>)<pos:position pos:line="4" pos:column="56"/></parameter_list>
<block pos:line="5" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">size_t<pos:position pos:line="6" pos:column="15"/></name></type> <name pos:line="6" pos:column="16">i<pos:position pos:line="6" pos:column="17"/></name></decl>;<pos:position pos:line="6" pos:column="18"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">Event<pos:position pos:line="7" pos:column="10"/></name> <modifier pos:line="7" pos:column="11">*<pos:position pos:line="7" pos:column="12"/></modifier><modifier pos:line="7" pos:column="12">*<pos:position pos:line="7" pos:column="13"/></modifier></type><name pos:line="7" pos:column="13">events<pos:position pos:line="7" pos:column="19"/></name></decl>;<pos:position pos:line="7" pos:column="20"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">Msg<pos:position pos:line="8" pos:column="8"/></name> <modifier pos:line="8" pos:column="9">*<pos:position pos:line="8" pos:column="10"/></modifier></type><name pos:line="8" pos:column="10">msg<pos:position pos:line="8" pos:column="13"/></name></decl>;<pos:position pos:line="8" pos:column="14"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">size_t<pos:position pos:line="9" pos:column="11"/></name></type> <name pos:line="9" pos:column="12">len<pos:position pos:line="9" pos:column="15"/></name></decl>;<pos:position pos:line="9" pos:column="16"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">int<pos:position pos:line="10" pos:column="8"/></name></type> <name pos:line="10" pos:column="9">ret<pos:position pos:line="10" pos:column="12"/></name></decl>;<pos:position pos:line="10" pos:column="13"/></decl_stmt>

    <expr_stmt><expr><name pos:line="12" pos:column="5">msg<pos:position pos:line="12" pos:column="8"/></name> <operator pos:line="12" pos:column="9">=<pos:position pos:line="12" pos:column="10"/></operator> <call><name pos:line="12" pos:column="11">riemann_value_list_to_protobuf<pos:position pos:line="12" pos:column="41"/></name> <argument_list pos:line="12" pos:column="42">(<argument><expr><name pos:line="12" pos:column="43">host<pos:position pos:line="12" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="49">ds<pos:position pos:line="12" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="53">vl<pos:position pos:line="12" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="57">statuses<pos:position pos:line="12" pos:column="65"/></name></expr></argument>)<pos:position pos:line="12" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="67"/></expr_stmt>
    <if pos:line="13" pos:column="5">if <condition pos:line="13" pos:column="8">(<expr><name pos:line="13" pos:column="9">msg<pos:position pos:line="13" pos:column="12"/></name> <operator pos:line="13" pos:column="13">==<pos:position pos:line="13" pos:column="15"/></operator> <name pos:line="13" pos:column="16">NULL<pos:position pos:line="13" pos:column="20"/></name></expr>)<pos:position pos:line="13" pos:column="21"/></condition><then pos:line="13" pos:column="21">
        <block type="pseudo"><return pos:line="14" pos:column="9">return <expr><operator pos:line="14" pos:column="16">-<pos:position pos:line="14" pos:column="17"/></operator><literal type="number" pos:line="14" pos:column="17">1<pos:position pos:line="14" pos:column="18"/></literal></expr>;<pos:position pos:line="14" pos:column="19"/></return></block></then></if>

    <expr_stmt><expr><call><name pos:line="16" pos:column="5">pthread_mutex_lock<pos:position pos:line="16" pos:column="23"/></name><argument_list pos:line="16" pos:column="23">(<argument><expr><operator pos:line="16" pos:column="24">&amp;<pos:position pos:line="16" pos:column="29"/></operator><name><name pos:line="16" pos:column="25">host<pos:position pos:line="16" pos:column="29"/></name><operator pos:line="16" pos:column="29">-&gt;<pos:position pos:line="16" pos:column="34"/></operator><name pos:line="16" pos:column="31">lock<pos:position pos:line="16" pos:column="35"/></name></name></expr></argument>)<pos:position pos:line="16" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="37"/></expr_stmt>

    <if pos:line="18" pos:column="5">if <condition pos:line="18" pos:column="8">(<expr><name><name pos:line="18" pos:column="9">host<pos:position pos:line="18" pos:column="13"/></name><operator pos:line="18" pos:column="13">-&gt;<pos:position pos:line="18" pos:column="18"/></operator><name pos:line="18" pos:column="15">batch_msg<pos:position pos:line="18" pos:column="24"/></name></name> <operator pos:line="18" pos:column="25">==<pos:position pos:line="18" pos:column="27"/></operator> <name pos:line="18" pos:column="28">NULL<pos:position pos:line="18" pos:column="32"/></name></expr>)<pos:position pos:line="18" pos:column="33"/></condition><then pos:line="18" pos:column="33"> <block pos:line="18" pos:column="34">{
        <expr_stmt><expr><name><name pos:line="19" pos:column="9">host<pos:position pos:line="19" pos:column="13"/></name><operator pos:line="19" pos:column="13">-&gt;<pos:position pos:line="19" pos:column="18"/></operator><name pos:line="19" pos:column="15">batch_msg<pos:position pos:line="19" pos:column="24"/></name></name> <operator pos:line="19" pos:column="25">=<pos:position pos:line="19" pos:column="26"/></operator> <name pos:line="19" pos:column="27">msg<pos:position pos:line="19" pos:column="30"/></name></expr>;<pos:position pos:line="19" pos:column="31"/></expr_stmt>
    }<pos:position pos:line="20" pos:column="6"/></block></then> <else pos:line="20" pos:column="7">else <block pos:line="20" pos:column="12">{
        <expr_stmt><expr><name pos:line="21" pos:column="9">len<pos:position pos:line="21" pos:column="12"/></name> <operator pos:line="21" pos:column="13">=<pos:position pos:line="21" pos:column="14"/></operator> <name><name pos:line="21" pos:column="15">msg<pos:position pos:line="21" pos:column="18"/></name><operator pos:line="21" pos:column="18">-&gt;<pos:position pos:line="21" pos:column="23"/></operator><name pos:line="21" pos:column="20">n_events<pos:position pos:line="21" pos:column="28"/></name></name> <operator pos:line="21" pos:column="29">+<pos:position pos:line="21" pos:column="30"/></operator> <name><name pos:line="21" pos:column="31">host<pos:position pos:line="21" pos:column="35"/></name><operator pos:line="21" pos:column="35">-&gt;<pos:position pos:line="21" pos:column="40"/></operator><name pos:line="21" pos:column="37">batch_msg<pos:position pos:line="21" pos:column="46"/></name><operator pos:line="21" pos:column="46">-&gt;<pos:position pos:line="21" pos:column="51"/></operator><name pos:line="21" pos:column="48">n_events<pos:position pos:line="21" pos:column="56"/></name></name></expr>;<pos:position pos:line="21" pos:column="57"/></expr_stmt>
        <expr_stmt><expr><name pos:line="22" pos:column="9">events<pos:position pos:line="22" pos:column="15"/></name> <operator pos:line="22" pos:column="16">=<pos:position pos:line="22" pos:column="17"/></operator> <call><name pos:line="22" pos:column="18">realloc<pos:position pos:line="22" pos:column="25"/></name><argument_list pos:line="22" pos:column="25">(<argument><expr><name><name pos:line="22" pos:column="26">host<pos:position pos:line="22" pos:column="30"/></name><operator pos:line="22" pos:column="30">-&gt;<pos:position pos:line="22" pos:column="35"/></operator><name pos:line="22" pos:column="32">batch_msg<pos:position pos:line="22" pos:column="41"/></name><operator pos:line="22" pos:column="41">-&gt;<pos:position pos:line="22" pos:column="46"/></operator><name pos:line="22" pos:column="43">events<pos:position pos:line="22" pos:column="49"/></name></name></expr></argument>,
                         <argument><expr><operator pos:line="23" pos:column="26">(<pos:position pos:line="23" pos:column="27"/></operator><name pos:line="23" pos:column="27">len<pos:position pos:line="23" pos:column="30"/></name> <operator pos:line="23" pos:column="31">*<pos:position pos:line="23" pos:column="32"/></operator> <sizeof pos:line="23" pos:column="33">sizeof<argument_list pos:line="23" pos:column="39">(<argument><expr><operator pos:line="23" pos:column="40">*<pos:position pos:line="23" pos:column="41"/></operator><name><name pos:line="23" pos:column="41">host<pos:position pos:line="23" pos:column="45"/></name><operator pos:line="23" pos:column="45">-&gt;<pos:position pos:line="23" pos:column="50"/></operator><name pos:line="23" pos:column="47">batch_msg<pos:position pos:line="23" pos:column="56"/></name><operator pos:line="23" pos:column="56">-&gt;<pos:position pos:line="23" pos:column="61"/></operator><name pos:line="23" pos:column="58">events<pos:position pos:line="23" pos:column="64"/></name></name></expr></argument>)<pos:position pos:line="23" pos:column="65"/></argument_list></sizeof><operator pos:line="23" pos:column="65">)<pos:position pos:line="23" pos:column="66"/></operator></expr></argument>)<pos:position pos:line="23" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="68"/></expr_stmt>
        <if pos:line="24" pos:column="9">if <condition pos:line="24" pos:column="12">(<expr><name pos:line="24" pos:column="13">events<pos:position pos:line="24" pos:column="19"/></name> <operator pos:line="24" pos:column="20">==<pos:position pos:line="24" pos:column="22"/></operator> <name pos:line="24" pos:column="23">NULL<pos:position pos:line="24" pos:column="27"/></name></expr>)<pos:position pos:line="24" pos:column="28"/></condition><then pos:line="24" pos:column="28"> <block pos:line="24" pos:column="29">{
            <expr_stmt><expr><call><name pos:line="25" pos:column="13">pthread_mutex_unlock<pos:position pos:line="25" pos:column="33"/></name><argument_list pos:line="25" pos:column="33">(<argument><expr><operator pos:line="25" pos:column="34">&amp;<pos:position pos:line="25" pos:column="39"/></operator><name><name pos:line="25" pos:column="35">host<pos:position pos:line="25" pos:column="39"/></name><operator pos:line="25" pos:column="39">-&gt;<pos:position pos:line="25" pos:column="44"/></operator><name pos:line="25" pos:column="41">lock<pos:position pos:line="25" pos:column="45"/></name></name></expr></argument>)<pos:position pos:line="25" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="47"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="26" pos:column="13">ERROR<pos:position pos:line="26" pos:column="18"/></name> <argument_list pos:line="26" pos:column="19">(<argument><expr><literal type="string" pos:line="26" pos:column="20">"write_riemann plugin: out of memory"<pos:position pos:line="26" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="59"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="27" pos:column="13">riemann_msg_protobuf_free<pos:position pos:line="27" pos:column="38"/></name> <argument_list pos:line="27" pos:column="39">(<argument><expr><name pos:line="27" pos:column="40">msg<pos:position pos:line="27" pos:column="43"/></name></expr></argument>)<pos:position pos:line="27" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="45"/></expr_stmt>
            <return pos:line="28" pos:column="13">return <expr><operator pos:line="28" pos:column="20">-<pos:position pos:line="28" pos:column="21"/></operator><literal type="number" pos:line="28" pos:column="21">1<pos:position pos:line="28" pos:column="22"/></literal></expr>;<pos:position pos:line="28" pos:column="23"/></return>
        }<pos:position pos:line="29" pos:column="10"/></block></then></if>
        <expr_stmt><expr><name><name pos:line="30" pos:column="9">host<pos:position pos:line="30" pos:column="13"/></name><operator pos:line="30" pos:column="13">-&gt;<pos:position pos:line="30" pos:column="18"/></operator><name pos:line="30" pos:column="15">batch_msg<pos:position pos:line="30" pos:column="24"/></name><operator pos:line="30" pos:column="24">-&gt;<pos:position pos:line="30" pos:column="29"/></operator><name pos:line="30" pos:column="26">events<pos:position pos:line="30" pos:column="32"/></name></name> <operator pos:line="30" pos:column="33">=<pos:position pos:line="30" pos:column="34"/></operator> <name pos:line="30" pos:column="35">events<pos:position pos:line="30" pos:column="41"/></name></expr>;<pos:position pos:line="30" pos:column="42"/></expr_stmt>

        <for pos:line="32" pos:column="9">for <control pos:line="32" pos:column="13">(<init><expr><name pos:line="32" pos:column="14">i<pos:position pos:line="32" pos:column="15"/></name> <operator pos:line="32" pos:column="16">=<pos:position pos:line="32" pos:column="17"/></operator> <name><name pos:line="32" pos:column="18">host<pos:position pos:line="32" pos:column="22"/></name><operator pos:line="32" pos:column="22">-&gt;<pos:position pos:line="32" pos:column="27"/></operator><name pos:line="32" pos:column="24">batch_msg<pos:position pos:line="32" pos:column="33"/></name><operator pos:line="32" pos:column="33">-&gt;<pos:position pos:line="32" pos:column="38"/></operator><name pos:line="32" pos:column="35">n_events<pos:position pos:line="32" pos:column="43"/></name></name></expr>;<pos:position pos:line="32" pos:column="44"/></init> <condition><expr><name pos:line="32" pos:column="45">i<pos:position pos:line="32" pos:column="46"/></name> <operator pos:line="32" pos:column="47">&lt;<pos:position pos:line="32" pos:column="51"/></operator> <name pos:line="32" pos:column="49">len<pos:position pos:line="32" pos:column="52"/></name></expr>;<pos:position pos:line="32" pos:column="53"/></condition> <incr><expr><name pos:line="32" pos:column="54">i<pos:position pos:line="32" pos:column="55"/></name><operator pos:line="32" pos:column="55">++<pos:position pos:line="32" pos:column="57"/></operator></expr></incr>)<pos:position pos:line="32" pos:column="58"/></control>
            <block type="pseudo"><expr_stmt><expr><name><name pos:line="33" pos:column="13">host<pos:position pos:line="33" pos:column="17"/></name><operator pos:line="33" pos:column="17">-&gt;<pos:position pos:line="33" pos:column="22"/></operator><name pos:line="33" pos:column="19">batch_msg<pos:position pos:line="33" pos:column="28"/></name><operator pos:line="33" pos:column="28">-&gt;<pos:position pos:line="33" pos:column="33"/></operator><name pos:line="33" pos:column="30">events<pos:position pos:line="33" pos:column="36"/></name><index pos:line="33" pos:column="36">[<expr><name pos:line="33" pos:column="37">i<pos:position pos:line="33" pos:column="38"/></name></expr>]<pos:position pos:line="33" pos:column="39"/></index></name> <operator pos:line="33" pos:column="40">=<pos:position pos:line="33" pos:column="41"/></operator> <name><name pos:line="33" pos:column="42">msg<pos:position pos:line="33" pos:column="45"/></name><operator pos:line="33" pos:column="45">-&gt;<pos:position pos:line="33" pos:column="50"/></operator><name pos:line="33" pos:column="47">events<pos:position pos:line="33" pos:column="53"/></name><index pos:line="33" pos:column="53">[<expr><name pos:line="33" pos:column="54">i<pos:position pos:line="33" pos:column="55"/></name> <operator pos:line="33" pos:column="56">-<pos:position pos:line="33" pos:column="57"/></operator> <name><name pos:line="33" pos:column="58">host<pos:position pos:line="33" pos:column="62"/></name><operator pos:line="33" pos:column="62">-&gt;<pos:position pos:line="33" pos:column="67"/></operator><name pos:line="33" pos:column="64">batch_msg<pos:position pos:line="33" pos:column="73"/></name><operator pos:line="33" pos:column="73">-&gt;<pos:position pos:line="33" pos:column="78"/></operator><name pos:line="33" pos:column="75">n_events<pos:position pos:line="33" pos:column="83"/></name></name></expr>]<pos:position pos:line="33" pos:column="84"/></index></name></expr>;<pos:position pos:line="33" pos:column="85"/></expr_stmt></block></for>

        <expr_stmt><expr><name><name pos:line="35" pos:column="9">host<pos:position pos:line="35" pos:column="13"/></name><operator pos:line="35" pos:column="13">-&gt;<pos:position pos:line="35" pos:column="18"/></operator><name pos:line="35" pos:column="15">batch_msg<pos:position pos:line="35" pos:column="24"/></name><operator pos:line="35" pos:column="24">-&gt;<pos:position pos:line="35" pos:column="29"/></operator><name pos:line="35" pos:column="26">n_events<pos:position pos:line="35" pos:column="34"/></name></name> <operator pos:line="35" pos:column="35">=<pos:position pos:line="35" pos:column="36"/></operator> <name pos:line="35" pos:column="37">len<pos:position pos:line="35" pos:column="40"/></name></expr>;<pos:position pos:line="35" pos:column="41"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="36" pos:column="9">sfree<pos:position pos:line="36" pos:column="14"/></name> <argument_list pos:line="36" pos:column="15">(<argument><expr><name><name pos:line="36" pos:column="16">msg<pos:position pos:line="36" pos:column="19"/></name><operator pos:line="36" pos:column="19">-&gt;<pos:position pos:line="36" pos:column="24"/></operator><name pos:line="36" pos:column="21">events<pos:position pos:line="36" pos:column="27"/></name></name></expr></argument>)<pos:position pos:line="36" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="29"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="37" pos:column="9">msg<pos:position pos:line="37" pos:column="12"/></name><operator pos:line="37" pos:column="12">-&gt;<pos:position pos:line="37" pos:column="17"/></operator><name pos:line="37" pos:column="14">n_events<pos:position pos:line="37" pos:column="22"/></name></name> <operator pos:line="37" pos:column="23">=<pos:position pos:line="37" pos:column="24"/></operator> <literal type="number" pos:line="37" pos:column="25">0<pos:position pos:line="37" pos:column="26"/></literal></expr>;<pos:position pos:line="37" pos:column="27"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="38" pos:column="9">sfree<pos:position pos:line="38" pos:column="14"/></name> <argument_list pos:line="38" pos:column="15">(<argument><expr><name pos:line="38" pos:column="16">msg<pos:position pos:line="38" pos:column="19"/></name></expr></argument>)<pos:position pos:line="38" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="21"/></expr_stmt>
    }<pos:position pos:line="39" pos:column="6"/></block></else></if>

	<expr_stmt><expr><name pos:line="41" pos:column="9">len<pos:position pos:line="41" pos:column="12"/></name> <operator pos:line="41" pos:column="13">=<pos:position pos:line="41" pos:column="14"/></operator> <call><name pos:line="41" pos:column="15">msg__get_packed_size<pos:position pos:line="41" pos:column="35"/></name><argument_list pos:line="41" pos:column="35">(<argument><expr><name><name pos:line="41" pos:column="36">host<pos:position pos:line="41" pos:column="40"/></name><operator pos:line="41" pos:column="40">-&gt;<pos:position pos:line="41" pos:column="45"/></operator><name pos:line="41" pos:column="42">batch_msg<pos:position pos:line="41" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="41" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="53"/></expr_stmt>
    <expr_stmt><expr><name pos:line="42" pos:column="5">ret<pos:position pos:line="42" pos:column="8"/></name> <operator pos:line="42" pos:column="9">=<pos:position pos:line="42" pos:column="10"/></operator> <literal type="number" pos:line="42" pos:column="11">0<pos:position pos:line="42" pos:column="12"/></literal></expr>;<pos:position pos:line="42" pos:column="13"/></expr_stmt>
    <if pos:line="43" pos:column="5">if <condition pos:line="43" pos:column="8">(<expr><name pos:line="43" pos:column="9">len<pos:position pos:line="43" pos:column="12"/></name> <operator pos:line="43" pos:column="13">&gt;=<pos:position pos:line="43" pos:column="18"/></operator> <name><name pos:line="43" pos:column="16">host<pos:position pos:line="43" pos:column="20"/></name><operator pos:line="43" pos:column="20">-&gt;<pos:position pos:line="43" pos:column="25"/></operator><name pos:line="43" pos:column="22">batch_max<pos:position pos:line="43" pos:column="31"/></name></name></expr>)<pos:position pos:line="43" pos:column="32"/></condition><then pos:line="43" pos:column="32"> <block pos:line="43" pos:column="33">{
        <expr_stmt><expr><name pos:line="44" pos:column="9">ret<pos:position pos:line="44" pos:column="12"/></name> <operator pos:line="44" pos:column="13">=<pos:position pos:line="44" pos:column="14"/></operator> <call><name pos:line="44" pos:column="15">riemann_batch_flush_nolock<pos:position pos:line="44" pos:column="41"/></name><argument_list pos:line="44" pos:column="41">(<argument><expr><literal type="number" pos:line="44" pos:column="42">0<pos:position pos:line="44" pos:column="43"/></literal></expr></argument>, <argument><expr><name pos:line="44" pos:column="45">host<pos:position pos:line="44" pos:column="49"/></name></expr></argument>)<pos:position pos:line="44" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="51"/></expr_stmt>
    }<pos:position pos:line="45" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="47" pos:column="5">pthread_mutex_unlock<pos:position pos:line="47" pos:column="25"/></name><argument_list pos:line="47" pos:column="25">(<argument><expr><operator pos:line="47" pos:column="26">&amp;<pos:position pos:line="47" pos:column="31"/></operator><name><name pos:line="47" pos:column="27">host<pos:position pos:line="47" pos:column="31"/></name><operator pos:line="47" pos:column="31">-&gt;<pos:position pos:line="47" pos:column="36"/></operator><name pos:line="47" pos:column="33">lock<pos:position pos:line="47" pos:column="37"/></name></name></expr></argument>)<pos:position pos:line="47" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="39"/></expr_stmt>
    <return pos:line="48" pos:column="5">return <expr><name pos:line="48" pos:column="12">ret<pos:position pos:line="48" pos:column="15"/></name></expr>;<pos:position pos:line="48" pos:column="16"/></return>
}<pos:position pos:line="49" pos:column="2"/></block></function></unit>
