<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_707_collectd-5.6.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">mic_read_cpu<pos:position pos:line="1" pos:column="24"/></name><parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><name pos:line="1" pos:column="25">int<pos:position pos:line="1" pos:column="28"/></name></type> <name pos:line="1" pos:column="29">mic<pos:position pos:line="1" pos:column="32"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="33"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">MicCoreUtil<pos:position pos:line="3" pos:column="20"/></name></type> <name pos:line="3" pos:column="21">core_util<pos:position pos:line="3" pos:column="30"/></name></decl>;<pos:position pos:line="3" pos:column="31"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">MicCoreJiff<pos:position pos:line="4" pos:column="20"/></name></type> <name><name pos:line="4" pos:column="21">core_jiffs<pos:position pos:line="4" pos:column="31"/></name><index pos:line="4" pos:column="31">[<expr><name pos:line="4" pos:column="32">MAX_CORES<pos:position pos:line="4" pos:column="41"/></name></expr>]<pos:position pos:line="4" pos:column="42"/></index></name></decl>;<pos:position pos:line="4" pos:column="43"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">U32<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">core_jiffs_size<pos:position pos:line="5" pos:column="28"/></name></decl>;<pos:position pos:line="5" pos:column="29"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">U32<pos:position pos:line="6" pos:column="12"/></name></type> <name pos:line="6" pos:column="13">status<pos:position pos:line="6" pos:column="19"/></name></decl>;<pos:position pos:line="6" pos:column="20"/></decl_stmt>

	<expr_stmt><expr><name pos:line="8" pos:column="9">core_jiffs_size<pos:position pos:line="8" pos:column="24"/></name> <operator pos:line="8" pos:column="25">=<pos:position pos:line="8" pos:column="26"/></operator> <name pos:line="8" pos:column="27">MAX_CORES<pos:position pos:line="8" pos:column="36"/></name> <operator pos:line="8" pos:column="37">*<pos:position pos:line="8" pos:column="38"/></operator> <sizeof pos:line="8" pos:column="39">sizeof<argument_list pos:line="8" pos:column="45">(<argument><expr><name pos:line="8" pos:column="46">MicCoreJiff<pos:position pos:line="8" pos:column="57"/></name></expr></argument>)<pos:position pos:line="8" pos:column="58"/></argument_list></sizeof></expr>;<pos:position pos:line="8" pos:column="59"/></expr_stmt>
	<expr_stmt><expr><name pos:line="9" pos:column="9">status<pos:position pos:line="9" pos:column="15"/></name> <operator pos:line="9" pos:column="16">=<pos:position pos:line="9" pos:column="17"/></operator> <call><name pos:line="9" pos:column="18">MicGetCoreUtilization<pos:position pos:line="9" pos:column="39"/></name><argument_list pos:line="9" pos:column="39">(<argument><expr><name pos:line="9" pos:column="40">mic_handle<pos:position pos:line="9" pos:column="50"/></name></expr></argument>, <argument><expr><operator pos:line="9" pos:column="52">&amp;<pos:position pos:line="9" pos:column="57"/></operator><name pos:line="9" pos:column="53">core_util<pos:position pos:line="9" pos:column="62"/></name></expr></argument>,
			<argument><expr><name pos:line="10" pos:column="25">core_jiffs<pos:position pos:line="10" pos:column="35"/></name></expr></argument>, <argument><expr><operator pos:line="10" pos:column="37">&amp;<pos:position pos:line="10" pos:column="42"/></operator><name pos:line="10" pos:column="38">core_jiffs_size<pos:position pos:line="10" pos:column="53"/></name></expr></argument>)<pos:position pos:line="10" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="55"/></expr_stmt>
	<if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><name pos:line="11" pos:column="13">status<pos:position pos:line="11" pos:column="19"/></name> <operator pos:line="11" pos:column="20">!=<pos:position pos:line="11" pos:column="22"/></operator> <name pos:line="11" pos:column="23">MIC_ACCESS_API_SUCCESS<pos:position pos:line="11" pos:column="45"/></name></expr>)<pos:position pos:line="11" pos:column="46"/></condition><then pos:line="11" pos:column="46"> <block pos:line="11" pos:column="47">{
		<expr_stmt><expr><call><name pos:line="12" pos:column="17">ERROR<pos:position pos:line="12" pos:column="22"/></name><argument_list pos:line="12" pos:column="22">(<argument><expr><literal type="string" pos:line="12" pos:column="23">"mic plugin: Problem getting CPU utilization: %s"<pos:position pos:line="12" pos:column="72"/></literal></expr></argument>,
				<argument><expr><call><name pos:line="13" pos:column="33">MicGetErrorString<pos:position pos:line="13" pos:column="50"/></name><argument_list pos:line="13" pos:column="50">(<argument><expr><name pos:line="13" pos:column="51">status<pos:position pos:line="13" pos:column="57"/></name></expr></argument>)<pos:position pos:line="13" pos:column="58"/></argument_list></call></expr></argument>)<pos:position pos:line="13" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="60"/></expr_stmt>
		<return pos:line="14" pos:column="17">return<expr><operator pos:line="14" pos:column="23">(<pos:position pos:line="14" pos:column="24"/></operator><operator pos:line="14" pos:column="24">-<pos:position pos:line="14" pos:column="25"/></operator><literal type="number" pos:line="14" pos:column="25">1<pos:position pos:line="14" pos:column="26"/></literal><operator pos:line="14" pos:column="26">)<pos:position pos:line="14" pos:column="27"/></operator></expr>;<pos:position pos:line="14" pos:column="28"/></return>
	}<pos:position pos:line="15" pos:column="10"/></block></then></if>

	<if pos:line="17" pos:column="9">if <condition pos:line="17" pos:column="12">(<expr><name pos:line="17" pos:column="13">show_cpu<pos:position pos:line="17" pos:column="21"/></name></expr>)<pos:position pos:line="17" pos:column="22"/></condition><then pos:line="17" pos:column="22"> <block pos:line="17" pos:column="23">{
		<expr_stmt><expr><call><name pos:line="18" pos:column="17">mic_submit_cpu<pos:position pos:line="18" pos:column="31"/></name><argument_list pos:line="18" pos:column="31">(<argument><expr><name pos:line="18" pos:column="32">mic<pos:position pos:line="18" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="18" pos:column="37">"user"<pos:position pos:line="18" pos:column="43"/></literal></expr></argument>, <argument><expr><operator pos:line="18" pos:column="45">-<pos:position pos:line="18" pos:column="46"/></operator><literal type="number" pos:line="18" pos:column="46">1<pos:position pos:line="18" pos:column="47"/></literal></expr></argument>, <argument><expr><name><name pos:line="18" pos:column="49">core_util<pos:position pos:line="18" pos:column="58"/></name><operator pos:line="18" pos:column="58">.<pos:position pos:line="18" pos:column="59"/></operator><name pos:line="18" pos:column="59">sum<pos:position pos:line="18" pos:column="62"/></name><operator pos:line="18" pos:column="62">.<pos:position pos:line="18" pos:column="63"/></operator><name pos:line="18" pos:column="63">user<pos:position pos:line="18" pos:column="67"/></name></name></expr></argument>)<pos:position pos:line="18" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="69"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="19" pos:column="17">mic_submit_cpu<pos:position pos:line="19" pos:column="31"/></name><argument_list pos:line="19" pos:column="31">(<argument><expr><name pos:line="19" pos:column="32">mic<pos:position pos:line="19" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="19" pos:column="37">"sys"<pos:position pos:line="19" pos:column="42"/></literal></expr></argument>, <argument><expr><operator pos:line="19" pos:column="44">-<pos:position pos:line="19" pos:column="45"/></operator><literal type="number" pos:line="19" pos:column="45">1<pos:position pos:line="19" pos:column="46"/></literal></expr></argument>, <argument><expr><name><name pos:line="19" pos:column="48">core_util<pos:position pos:line="19" pos:column="57"/></name><operator pos:line="19" pos:column="57">.<pos:position pos:line="19" pos:column="58"/></operator><name pos:line="19" pos:column="58">sum<pos:position pos:line="19" pos:column="61"/></name><operator pos:line="19" pos:column="61">.<pos:position pos:line="19" pos:column="62"/></operator><name pos:line="19" pos:column="62">sys<pos:position pos:line="19" pos:column="65"/></name></name></expr></argument>)<pos:position pos:line="19" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="67"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="20" pos:column="17">mic_submit_cpu<pos:position pos:line="20" pos:column="31"/></name><argument_list pos:line="20" pos:column="31">(<argument><expr><name pos:line="20" pos:column="32">mic<pos:position pos:line="20" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="20" pos:column="37">"nice"<pos:position pos:line="20" pos:column="43"/></literal></expr></argument>, <argument><expr><operator pos:line="20" pos:column="45">-<pos:position pos:line="20" pos:column="46"/></operator><literal type="number" pos:line="20" pos:column="46">1<pos:position pos:line="20" pos:column="47"/></literal></expr></argument>, <argument><expr><name><name pos:line="20" pos:column="49">core_util<pos:position pos:line="20" pos:column="58"/></name><operator pos:line="20" pos:column="58">.<pos:position pos:line="20" pos:column="59"/></operator><name pos:line="20" pos:column="59">sum<pos:position pos:line="20" pos:column="62"/></name><operator pos:line="20" pos:column="62">.<pos:position pos:line="20" pos:column="63"/></operator><name pos:line="20" pos:column="63">nice<pos:position pos:line="20" pos:column="67"/></name></name></expr></argument>)<pos:position pos:line="20" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="69"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="21" pos:column="17">mic_submit_cpu<pos:position pos:line="21" pos:column="31"/></name><argument_list pos:line="21" pos:column="31">(<argument><expr><name pos:line="21" pos:column="32">mic<pos:position pos:line="21" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="21" pos:column="37">"idle"<pos:position pos:line="21" pos:column="43"/></literal></expr></argument>, <argument><expr><operator pos:line="21" pos:column="45">-<pos:position pos:line="21" pos:column="46"/></operator><literal type="number" pos:line="21" pos:column="46">1<pos:position pos:line="21" pos:column="47"/></literal></expr></argument>, <argument><expr><name><name pos:line="21" pos:column="49">core_util<pos:position pos:line="21" pos:column="58"/></name><operator pos:line="21" pos:column="58">.<pos:position pos:line="21" pos:column="59"/></operator><name pos:line="21" pos:column="59">sum<pos:position pos:line="21" pos:column="62"/></name><operator pos:line="21" pos:column="62">.<pos:position pos:line="21" pos:column="63"/></operator><name pos:line="21" pos:column="63">idle<pos:position pos:line="21" pos:column="67"/></name></name></expr></argument>)<pos:position pos:line="21" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="69"/></expr_stmt>
	}<pos:position pos:line="22" pos:column="10"/></block></then></if>

	<if pos:line="24" pos:column="9">if <condition pos:line="24" pos:column="12">(<expr><name pos:line="24" pos:column="13">show_cpu_cores<pos:position pos:line="24" pos:column="27"/></name></expr>)<pos:position pos:line="24" pos:column="28"/></condition><then pos:line="24" pos:column="28"> <block pos:line="24" pos:column="29">{
		<for pos:line="25" pos:column="17">for <control pos:line="25" pos:column="21">(<init><decl><type><name pos:line="25" pos:column="22">int<pos:position pos:line="25" pos:column="25"/></name></type> <name pos:line="25" pos:column="26">j<pos:position pos:line="25" pos:column="27"/></name> <init pos:line="25" pos:column="28">= <expr><literal type="number" pos:line="25" pos:column="30">0<pos:position pos:line="25" pos:column="31"/></literal></expr></init></decl>;<pos:position pos:line="25" pos:column="32"/></init> <condition><expr><name pos:line="25" pos:column="33">j<pos:position pos:line="25" pos:column="34"/></name> <operator pos:line="25" pos:column="35">&lt;<pos:position pos:line="25" pos:column="39"/></operator> <name><name pos:line="25" pos:column="37">core_util<pos:position pos:line="25" pos:column="46"/></name><operator pos:line="25" pos:column="46">.<pos:position pos:line="25" pos:column="47"/></operator><name pos:line="25" pos:column="47">core<pos:position pos:line="25" pos:column="51"/></name></name></expr>;<pos:position pos:line="25" pos:column="52"/></condition> <incr><expr><name pos:line="25" pos:column="53">j<pos:position pos:line="25" pos:column="54"/></name><operator pos:line="25" pos:column="54">++<pos:position pos:line="25" pos:column="56"/></operator></expr></incr>)<pos:position pos:line="25" pos:column="57"/></control> <block pos:line="25" pos:column="58">{
			<expr_stmt><expr><call><name pos:line="26" pos:column="25">mic_submit_cpu<pos:position pos:line="26" pos:column="39"/></name><argument_list pos:line="26" pos:column="39">(<argument><expr><name pos:line="26" pos:column="40">mic<pos:position pos:line="26" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="26" pos:column="45">"user"<pos:position pos:line="26" pos:column="51"/></literal></expr></argument>, <argument><expr><name pos:line="26" pos:column="53">j<pos:position pos:line="26" pos:column="54"/></name></expr></argument>, <argument><expr><name><name pos:line="26" pos:column="56">core_jiffs<pos:position pos:line="26" pos:column="66"/></name><index pos:line="26" pos:column="66">[<expr><name pos:line="26" pos:column="67">j<pos:position pos:line="26" pos:column="68"/></name></expr>]<pos:position pos:line="26" pos:column="69"/></index></name><operator pos:line="26" pos:column="69">.<pos:position pos:line="26" pos:column="70"/></operator><name pos:line="26" pos:column="70">user<pos:position pos:line="26" pos:column="74"/></name></expr></argument>)<pos:position pos:line="26" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="76"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="27" pos:column="25">mic_submit_cpu<pos:position pos:line="27" pos:column="39"/></name><argument_list pos:line="27" pos:column="39">(<argument><expr><name pos:line="27" pos:column="40">mic<pos:position pos:line="27" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="27" pos:column="45">"sys"<pos:position pos:line="27" pos:column="50"/></literal></expr></argument>, <argument><expr><name pos:line="27" pos:column="52">j<pos:position pos:line="27" pos:column="53"/></name></expr></argument>, <argument><expr><name><name pos:line="27" pos:column="55">core_jiffs<pos:position pos:line="27" pos:column="65"/></name><index pos:line="27" pos:column="65">[<expr><name pos:line="27" pos:column="66">j<pos:position pos:line="27" pos:column="67"/></name></expr>]<pos:position pos:line="27" pos:column="68"/></index></name><operator pos:line="27" pos:column="68">.<pos:position pos:line="27" pos:column="69"/></operator><name pos:line="27" pos:column="69">sys<pos:position pos:line="27" pos:column="72"/></name></expr></argument>)<pos:position pos:line="27" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="74"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="28" pos:column="25">mic_submit_cpu<pos:position pos:line="28" pos:column="39"/></name><argument_list pos:line="28" pos:column="39">(<argument><expr><name pos:line="28" pos:column="40">mic<pos:position pos:line="28" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="28" pos:column="45">"nice"<pos:position pos:line="28" pos:column="51"/></literal></expr></argument>, <argument><expr><name pos:line="28" pos:column="53">j<pos:position pos:line="28" pos:column="54"/></name></expr></argument>, <argument><expr><name><name pos:line="28" pos:column="56">core_jiffs<pos:position pos:line="28" pos:column="66"/></name><index pos:line="28" pos:column="66">[<expr><name pos:line="28" pos:column="67">j<pos:position pos:line="28" pos:column="68"/></name></expr>]<pos:position pos:line="28" pos:column="69"/></index></name><operator pos:line="28" pos:column="69">.<pos:position pos:line="28" pos:column="70"/></operator><name pos:line="28" pos:column="70">nice<pos:position pos:line="28" pos:column="74"/></name></expr></argument>)<pos:position pos:line="28" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="76"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="29" pos:column="25">mic_submit_cpu<pos:position pos:line="29" pos:column="39"/></name><argument_list pos:line="29" pos:column="39">(<argument><expr><name pos:line="29" pos:column="40">mic<pos:position pos:line="29" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="29" pos:column="45">"idle"<pos:position pos:line="29" pos:column="51"/></literal></expr></argument>, <argument><expr><name pos:line="29" pos:column="53">j<pos:position pos:line="29" pos:column="54"/></name></expr></argument>, <argument><expr><name><name pos:line="29" pos:column="56">core_jiffs<pos:position pos:line="29" pos:column="66"/></name><index pos:line="29" pos:column="66">[<expr><name pos:line="29" pos:column="67">j<pos:position pos:line="29" pos:column="68"/></name></expr>]<pos:position pos:line="29" pos:column="69"/></index></name><operator pos:line="29" pos:column="69">.<pos:position pos:line="29" pos:column="70"/></operator><name pos:line="29" pos:column="70">idle<pos:position pos:line="29" pos:column="74"/></name></expr></argument>)<pos:position pos:line="29" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="76"/></expr_stmt>
		}<pos:position pos:line="30" pos:column="18"/></block></for>
	}<pos:position pos:line="31" pos:column="10"/></block></then></if>
	<return pos:line="32" pos:column="9">return <expr><operator pos:line="32" pos:column="16">(<pos:position pos:line="32" pos:column="17"/></operator><literal type="number" pos:line="32" pos:column="17">0<pos:position pos:line="32" pos:column="18"/></literal><operator pos:line="32" pos:column="18">)<pos:position pos:line="32" pos:column="19"/></operator></expr>;<pos:position pos:line="32" pos:column="20"/></return>
}<pos:position pos:line="33" pos:column="2"/></block></function></unit>
