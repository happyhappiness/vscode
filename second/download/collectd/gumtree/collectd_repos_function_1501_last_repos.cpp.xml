<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1501_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name> <modifier pos:line="1" pos:column="13">*<pos:position pos:line="1" pos:column="14"/></modifier></type><name pos:line="1" pos:column="14">c_ipmi_thread_main<pos:position pos:line="1" pos:column="32"/></name><parameter_list pos:line="1" pos:column="32">(<parameter><decl><type><name pos:line="1" pos:column="33">void<pos:position pos:line="1" pos:column="37"/></name> <modifier pos:line="1" pos:column="38">*<pos:position pos:line="1" pos:column="39"/></modifier></type><name pos:line="1" pos:column="39">user_data<pos:position pos:line="1" pos:column="48"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="49"/></parameter_list> <block pos:line="1" pos:column="50">{
  <decl_stmt><decl><type><name pos:line="2" pos:column="3">c_ipmi_instance_t<pos:position pos:line="2" pos:column="20"/></name> <modifier pos:line="2" pos:column="21">*<pos:position pos:line="2" pos:column="22"/></modifier></type><name pos:line="2" pos:column="22">st<pos:position pos:line="2" pos:column="24"/></name> <init pos:line="2" pos:column="25">= <expr><name pos:line="2" pos:column="27">user_data<pos:position pos:line="2" pos:column="36"/></name></expr></init></decl>;<pos:position pos:line="2" pos:column="37"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="4" pos:column="3">int<pos:position pos:line="4" pos:column="6"/></name></type> <name pos:line="4" pos:column="7">status<pos:position pos:line="4" pos:column="13"/></name> <init pos:line="4" pos:column="14">= <expr><call><name pos:line="4" pos:column="16">c_ipmi_thread_init<pos:position pos:line="4" pos:column="34"/></name><argument_list pos:line="4" pos:column="34">(<argument><expr><name pos:line="4" pos:column="35">st<pos:position pos:line="4" pos:column="37"/></name></expr></argument>)<pos:position pos:line="4" pos:column="38"/></argument_list></call></expr></init></decl>;<pos:position pos:line="4" pos:column="39"/></decl_stmt>
  <if pos:line="5" pos:column="3">if <condition pos:line="5" pos:column="6">(<expr><name pos:line="5" pos:column="7">status<pos:position pos:line="5" pos:column="13"/></name> <operator pos:line="5" pos:column="14">!=<pos:position pos:line="5" pos:column="16"/></operator> <literal type="number" pos:line="5" pos:column="17">0<pos:position pos:line="5" pos:column="18"/></literal></expr>)<pos:position pos:line="5" pos:column="19"/></condition><then pos:line="5" pos:column="19"> <block pos:line="5" pos:column="20">{
    <expr_stmt><expr><call><name pos:line="6" pos:column="5">ERROR<pos:position pos:line="6" pos:column="10"/></name><argument_list pos:line="6" pos:column="10">(<argument><expr><literal type="string" pos:line="6" pos:column="11">"ipmi plugin: c_ipmi_thread_init failed."<pos:position pos:line="6" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="54"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="7" pos:column="5">st<pos:position pos:line="7" pos:column="7"/></name><operator pos:line="7" pos:column="7">-&gt;<pos:position pos:line="7" pos:column="12"/></operator><name pos:line="7" pos:column="9">active<pos:position pos:line="7" pos:column="15"/></name></name> <operator pos:line="7" pos:column="16">=<pos:position pos:line="7" pos:column="17"/></operator> <literal type="number" pos:line="7" pos:column="18">0<pos:position pos:line="7" pos:column="19"/></literal></expr>;<pos:position pos:line="7" pos:column="20"/></expr_stmt>
    <return pos:line="8" pos:column="5">return <expr><operator pos:line="8" pos:column="12">(<pos:position pos:line="8" pos:column="13"/></operator><name pos:line="8" pos:column="13">void<pos:position pos:line="8" pos:column="17"/></name> <operator pos:line="8" pos:column="18">*<pos:position pos:line="8" pos:column="19"/></operator><operator pos:line="8" pos:column="19">)<pos:position pos:line="8" pos:column="20"/></operator><operator pos:line="8" pos:column="20">-<pos:position pos:line="8" pos:column="21"/></operator><literal type="number" pos:line="8" pos:column="21">1<pos:position pos:line="8" pos:column="22"/></literal></expr>;<pos:position pos:line="8" pos:column="23"/></return>
  }<pos:position pos:line="9" pos:column="4"/></block></then></if>

  <while pos:line="11" pos:column="3">while <condition pos:line="11" pos:column="9">(<expr><name><name pos:line="11" pos:column="10">st<pos:position pos:line="11" pos:column="12"/></name><operator pos:line="11" pos:column="12">-&gt;<pos:position pos:line="11" pos:column="17"/></operator><name pos:line="11" pos:column="14">active<pos:position pos:line="11" pos:column="20"/></name></name> <operator pos:line="11" pos:column="21">!=<pos:position pos:line="11" pos:column="23"/></operator> <literal type="number" pos:line="11" pos:column="24">0<pos:position pos:line="11" pos:column="25"/></literal></expr>)<pos:position pos:line="11" pos:column="26"/></condition> <block pos:line="11" pos:column="27">{
    <decl_stmt><decl><type><name><name pos:line="12" pos:column="5">struct<pos:position pos:line="12" pos:column="11"/></name> <name pos:line="12" pos:column="12">timeval<pos:position pos:line="12" pos:column="19"/></name></name></type> <name pos:line="12" pos:column="20">tv<pos:position pos:line="12" pos:column="22"/></name> <init pos:line="12" pos:column="23">= <expr><block pos:line="12" pos:column="25">{<expr><literal type="number" pos:line="12" pos:column="26">1<pos:position pos:line="12" pos:column="27"/></literal></expr>, <expr><literal type="number" pos:line="12" pos:column="29">0<pos:position pos:line="12" pos:column="30"/></literal></expr>}<pos:position pos:line="12" pos:column="31"/></block></expr></init></decl>;<pos:position pos:line="12" pos:column="32"/></decl_stmt>
    <expr_stmt><expr><call><name><name pos:line="13" pos:column="5">os_handler<pos:position pos:line="13" pos:column="15"/></name><operator pos:line="13" pos:column="15">-&gt;<pos:position pos:line="13" pos:column="20"/></operator><name pos:line="13" pos:column="17">perform_one_op<pos:position pos:line="13" pos:column="31"/></name></name><argument_list pos:line="13" pos:column="31">(<argument><expr><name pos:line="13" pos:column="32">os_handler<pos:position pos:line="13" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="13" pos:column="44">&amp;<pos:position pos:line="13" pos:column="49"/></operator><name pos:line="13" pos:column="45">tv<pos:position pos:line="13" pos:column="47"/></name></expr></argument>)<pos:position pos:line="13" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="49"/></expr_stmt>
  }<pos:position pos:line="14" pos:column="4"/></block></while>
  <return pos:line="15" pos:column="3">return <expr><operator pos:line="15" pos:column="10">(<pos:position pos:line="15" pos:column="11"/></operator><name pos:line="15" pos:column="11">void<pos:position pos:line="15" pos:column="15"/></name> <operator pos:line="15" pos:column="16">*<pos:position pos:line="15" pos:column="17"/></operator><operator pos:line="15" pos:column="17">)<pos:position pos:line="15" pos:column="18"/></operator><literal type="number" pos:line="15" pos:column="18">0<pos:position pos:line="15" pos:column="19"/></literal></expr>;<pos:position pos:line="15" pos:column="20"/></return>
}<pos:position pos:line="16" pos:column="2"/></block></function></unit>
