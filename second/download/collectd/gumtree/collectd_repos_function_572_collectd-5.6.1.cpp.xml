<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_572_collectd-5.6.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">my_vasprintf<pos:position pos:line="1" pos:column="24"/></name><parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><name pos:line="1" pos:column="25">char<pos:position pos:line="1" pos:column="29"/></name> <modifier pos:line="1" pos:column="30">*<pos:position pos:line="1" pos:column="31"/></modifier><modifier pos:line="1" pos:column="31">*<pos:position pos:line="1" pos:column="32"/></modifier></type><name pos:line="1" pos:column="32">str<pos:position pos:line="1" pos:column="35"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="37">const<pos:position pos:line="1" pos:column="42"/></specifier> <name pos:line="1" pos:column="43">char<pos:position pos:line="1" pos:column="47"/></name> <modifier pos:line="1" pos:column="48">*<pos:position pos:line="1" pos:column="49"/></modifier></type><name pos:line="1" pos:column="49">fmt<pos:position pos:line="1" pos:column="52"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="54">va_list<pos:position pos:line="1" pos:column="61"/></name></type> <name pos:line="1" pos:column="62">args<pos:position pos:line="1" pos:column="66"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="67"/></parameter_list> <block pos:line="1" pos:column="68">{
       <decl_stmt><decl><type><name pos:line="2" pos:column="8">int<pos:position pos:line="2" pos:column="11"/></name></type> <name pos:line="2" pos:column="12">size<pos:position pos:line="2" pos:column="16"/></name> <init pos:line="2" pos:column="17">= <expr><literal type="number" pos:line="2" pos:column="19">0<pos:position pos:line="2" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="2" pos:column="21"/></decl_stmt>
       <decl_stmt><decl><type><name pos:line="3" pos:column="8">va_list<pos:position pos:line="3" pos:column="15"/></name></type> <name pos:line="3" pos:column="16">tmpa<pos:position pos:line="3" pos:column="20"/></name></decl>;<pos:position pos:line="3" pos:column="21"/></decl_stmt>
       <comment type="line" pos:line="4" pos:column="8">// copy</comment>
       <expr_stmt><expr><call><name pos:line="5" pos:column="8">va_copy<pos:position pos:line="5" pos:column="15"/></name><argument_list pos:line="5" pos:column="15">(<argument><expr><name pos:line="5" pos:column="16">tmpa<pos:position pos:line="5" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="5" pos:column="22">args<pos:position pos:line="5" pos:column="26"/></name></expr></argument>)<pos:position pos:line="5" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="28"/></expr_stmt>
       <comment type="line" pos:line="6" pos:column="8">// apply variadic arguments to</comment>
       <comment type="line" pos:line="7" pos:column="8">// sprintf with format to get size</comment>
       <expr_stmt><expr><name pos:line="8" pos:column="8">size<pos:position pos:line="8" pos:column="12"/></name> <operator pos:line="8" pos:column="13">=<pos:position pos:line="8" pos:column="14"/></operator> <call><name pos:line="8" pos:column="15">vsnprintf<pos:position pos:line="8" pos:column="24"/></name><argument_list pos:line="8" pos:column="24">(<argument><expr><name pos:line="8" pos:column="25">NULL<pos:position pos:line="8" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="31">size<pos:position pos:line="8" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="37">fmt<pos:position pos:line="8" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="42">tmpa<pos:position pos:line="8" pos:column="46"/></name></expr></argument>)<pos:position pos:line="8" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="48"/></expr_stmt>
       <comment type="line" pos:line="9" pos:column="8">// toss args</comment>
       <expr_stmt><expr><call><name pos:line="10" pos:column="8">va_end<pos:position pos:line="10" pos:column="14"/></name><argument_list pos:line="10" pos:column="14">(<argument><expr><name pos:line="10" pos:column="15">tmpa<pos:position pos:line="10" pos:column="19"/></name></expr></argument>)<pos:position pos:line="10" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="21"/></expr_stmt>
       <comment type="line" pos:line="11" pos:column="8">// return -1 to be compliant if</comment>
       <comment type="line" pos:line="12" pos:column="8">// size is less than 0</comment>
       <if pos:line="13" pos:column="8">if <condition pos:line="13" pos:column="11">(<expr><name pos:line="13" pos:column="12">size<pos:position pos:line="13" pos:column="16"/></name> <operator pos:line="13" pos:column="17">&lt;<pos:position pos:line="13" pos:column="21"/></operator> <literal type="number" pos:line="13" pos:column="19">0<pos:position pos:line="13" pos:column="20"/></literal></expr>)<pos:position pos:line="13" pos:column="21"/></condition><then pos:line="13" pos:column="21"> <block pos:line="13" pos:column="22">{ <return pos:line="13" pos:column="24">return <expr><operator pos:line="13" pos:column="31">-<pos:position pos:line="13" pos:column="32"/></operator><literal type="number" pos:line="13" pos:column="32">1<pos:position pos:line="13" pos:column="33"/></literal></expr>;<pos:position pos:line="13" pos:column="34"/></return> }<pos:position pos:line="13" pos:column="36"/></block></then></if>
       <comment type="line" pos:line="14" pos:column="8">// alloc with size plus 1 for `\0'</comment>
       <expr_stmt><expr><operator pos:line="15" pos:column="8">*<pos:position pos:line="15" pos:column="9"/></operator><name pos:line="15" pos:column="9">str<pos:position pos:line="15" pos:column="12"/></name> <operator pos:line="15" pos:column="13">=<pos:position pos:line="15" pos:column="14"/></operator> <operator pos:line="15" pos:column="15">(<pos:position pos:line="15" pos:column="16"/></operator><name pos:line="15" pos:column="16">char<pos:position pos:line="15" pos:column="20"/></name> <operator pos:line="15" pos:column="21">*<pos:position pos:line="15" pos:column="22"/></operator><operator pos:line="15" pos:column="22">)<pos:position pos:line="15" pos:column="23"/></operator> <call><name pos:line="15" pos:column="24">malloc<pos:position pos:line="15" pos:column="30"/></name><argument_list pos:line="15" pos:column="30">(<argument><expr><name pos:line="15" pos:column="31">size<pos:position pos:line="15" pos:column="35"/></name> <operator pos:line="15" pos:column="36">+<pos:position pos:line="15" pos:column="37"/></operator> <literal type="number" pos:line="15" pos:column="38">1<pos:position pos:line="15" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="41"/></expr_stmt>
       <comment type="line" pos:line="16" pos:column="8">// return -1 to be compliant</comment>
       <comment type="line" pos:line="17" pos:column="8">// if pointer is `NULL'</comment>
       <if pos:line="18" pos:column="8">if <condition pos:line="18" pos:column="11">(<expr><name pos:line="18" pos:column="12">NULL<pos:position pos:line="18" pos:column="16"/></name> <operator pos:line="18" pos:column="17">==<pos:position pos:line="18" pos:column="19"/></operator> <operator pos:line="18" pos:column="20">*<pos:position pos:line="18" pos:column="21"/></operator><name pos:line="18" pos:column="21">str<pos:position pos:line="18" pos:column="24"/></name></expr>)<pos:position pos:line="18" pos:column="25"/></condition><then pos:line="18" pos:column="25"> <block pos:line="18" pos:column="26">{ <return pos:line="18" pos:column="28">return <expr><operator pos:line="18" pos:column="35">-<pos:position pos:line="18" pos:column="36"/></operator><literal type="number" pos:line="18" pos:column="36">1<pos:position pos:line="18" pos:column="37"/></literal></expr>;<pos:position pos:line="18" pos:column="38"/></return> }<pos:position pos:line="18" pos:column="40"/></block></then></if>
       <comment type="line" pos:line="19" pos:column="8">// format string with original</comment>
       <comment type="line" pos:line="20" pos:column="8">// variadic arguments and set new size</comment>
       <expr_stmt><expr><name pos:line="21" pos:column="8">size<pos:position pos:line="21" pos:column="12"/></name> <operator pos:line="21" pos:column="13">=<pos:position pos:line="21" pos:column="14"/></operator> <call><name pos:line="21" pos:column="15">vsprintf<pos:position pos:line="21" pos:column="23"/></name><argument_list pos:line="21" pos:column="23">(<argument><expr><operator pos:line="21" pos:column="24">*<pos:position pos:line="21" pos:column="25"/></operator><name pos:line="21" pos:column="25">str<pos:position pos:line="21" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="30">fmt<pos:position pos:line="21" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="35">args<pos:position pos:line="21" pos:column="39"/></name></expr></argument>)<pos:position pos:line="21" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="41"/></expr_stmt>
       <return pos:line="22" pos:column="8">return <expr><name pos:line="22" pos:column="15">size<pos:position pos:line="22" pos:column="19"/></name></expr>;<pos:position pos:line="22" pos:column="20"/></return>
}<pos:position pos:line="23" pos:column="2"/></block></function></unit>
