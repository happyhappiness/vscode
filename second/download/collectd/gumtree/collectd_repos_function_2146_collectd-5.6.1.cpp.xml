<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_2146_collectd-5.6.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">cj_config_add_key<pos:position pos:line="1" pos:column="29"/></name> <parameter_list pos:line="1" pos:column="30">(<parameter><decl><type><name pos:line="1" pos:column="31">cj_t<pos:position pos:line="1" pos:column="35"/></name> <modifier pos:line="1" pos:column="36">*<pos:position pos:line="1" pos:column="37"/></modifier></type><name pos:line="1" pos:column="37">db<pos:position pos:line="1" pos:column="39"/></name></decl></parameter>, <comment type="block" pos:line="1" pos:column="41">/* {{{ */</comment>
                                   <parameter><decl><type><name pos:line="2" pos:column="36">oconfig_item_t<pos:position pos:line="2" pos:column="50"/></name> <modifier pos:line="2" pos:column="51">*<pos:position pos:line="2" pos:column="52"/></modifier></type><name pos:line="2" pos:column="52">ci<pos:position pos:line="2" pos:column="54"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="55"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">cj_key_t<pos:position pos:line="4" pos:column="11"/></name> <modifier pos:line="4" pos:column="12">*<pos:position pos:line="4" pos:column="13"/></modifier></type><name pos:line="4" pos:column="13">key<pos:position pos:line="4" pos:column="16"/></name></decl>;<pos:position pos:line="4" pos:column="17"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">int<pos:position pos:line="5" pos:column="6"/></name></type> <name pos:line="5" pos:column="7">status<pos:position pos:line="5" pos:column="13"/></name></decl>;<pos:position pos:line="5" pos:column="14"/></decl_stmt>

  <if pos:line="7" pos:column="3">if <condition pos:line="7" pos:column="6">(<expr><operator pos:line="7" pos:column="7">(<pos:position pos:line="7" pos:column="8"/></operator><name><name pos:line="7" pos:column="8">ci<pos:position pos:line="7" pos:column="10"/></name><operator pos:line="7" pos:column="10">-&gt;<pos:position pos:line="7" pos:column="15"/></operator><name pos:line="7" pos:column="12">values_num<pos:position pos:line="7" pos:column="22"/></name></name> <operator pos:line="7" pos:column="23">!=<pos:position pos:line="7" pos:column="25"/></operator> <literal type="number" pos:line="7" pos:column="26">1<pos:position pos:line="7" pos:column="27"/></literal><operator pos:line="7" pos:column="27">)<pos:position pos:line="7" pos:column="28"/></operator>
      <operator pos:line="8" pos:column="7">||<pos:position pos:line="8" pos:column="9"/></operator> <operator pos:line="8" pos:column="10">(<pos:position pos:line="8" pos:column="11"/></operator><name><name pos:line="8" pos:column="11">ci<pos:position pos:line="8" pos:column="13"/></name><operator pos:line="8" pos:column="13">-&gt;<pos:position pos:line="8" pos:column="18"/></operator><name pos:line="8" pos:column="15">values<pos:position pos:line="8" pos:column="21"/></name><index pos:line="8" pos:column="21">[<expr><literal type="number" pos:line="8" pos:column="22">0<pos:position pos:line="8" pos:column="23"/></literal></expr>]<pos:position pos:line="8" pos:column="24"/></index></name><operator pos:line="8" pos:column="24">.<pos:position pos:line="8" pos:column="25"/></operator><name pos:line="8" pos:column="25">type<pos:position pos:line="8" pos:column="29"/></name> <operator pos:line="8" pos:column="30">!=<pos:position pos:line="8" pos:column="32"/></operator> <name pos:line="8" pos:column="33">OCONFIG_TYPE_STRING<pos:position pos:line="8" pos:column="52"/></name><operator pos:line="8" pos:column="52">)<pos:position pos:line="8" pos:column="53"/></operator></expr>)<pos:position pos:line="8" pos:column="54"/></condition><then pos:line="8" pos:column="54">
  <block pos:line="9" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="10" pos:column="5">WARNING<pos:position pos:line="10" pos:column="12"/></name> <argument_list pos:line="10" pos:column="13">(<argument><expr><literal type="string" pos:line="10" pos:column="14">"curl_json plugin: The `Key' block "<pos:position pos:line="10" pos:column="50"/></literal>
             <literal type="string" pos:line="11" pos:column="14">"needs exactly one string argument."<pos:position pos:line="11" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="52"/></expr_stmt>
    <return pos:line="12" pos:column="5">return <expr><operator pos:line="12" pos:column="12">(<pos:position pos:line="12" pos:column="13"/></operator><operator pos:line="12" pos:column="13">-<pos:position pos:line="12" pos:column="14"/></operator><literal type="number" pos:line="12" pos:column="14">1<pos:position pos:line="12" pos:column="15"/></literal><operator pos:line="12" pos:column="15">)<pos:position pos:line="12" pos:column="16"/></operator></expr>;<pos:position pos:line="12" pos:column="17"/></return>
  }<pos:position pos:line="13" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="15" pos:column="3">key<pos:position pos:line="15" pos:column="6"/></name> <operator pos:line="15" pos:column="7">=<pos:position pos:line="15" pos:column="8"/></operator> <call><name pos:line="15" pos:column="9">calloc<pos:position pos:line="15" pos:column="15"/></name> <argument_list pos:line="15" pos:column="16">(<argument><expr><literal type="number" pos:line="15" pos:column="17">1<pos:position pos:line="15" pos:column="18"/></literal></expr></argument>, <argument><expr><sizeof pos:line="15" pos:column="20">sizeof <argument_list pos:line="15" pos:column="27">(<argument><expr><operator pos:line="15" pos:column="28">*<pos:position pos:line="15" pos:column="29"/></operator><name pos:line="15" pos:column="29">key<pos:position pos:line="15" pos:column="32"/></name></expr></argument>)<pos:position pos:line="15" pos:column="33"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="15" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="35"/></expr_stmt>
  <if pos:line="16" pos:column="3">if <condition pos:line="16" pos:column="6">(<expr><name pos:line="16" pos:column="7">key<pos:position pos:line="16" pos:column="10"/></name> <operator pos:line="16" pos:column="11">==<pos:position pos:line="16" pos:column="13"/></operator> <name pos:line="16" pos:column="14">NULL<pos:position pos:line="16" pos:column="18"/></name></expr>)<pos:position pos:line="16" pos:column="19"/></condition><then pos:line="16" pos:column="19">
  <block pos:line="17" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="18" pos:column="5">ERROR<pos:position pos:line="18" pos:column="10"/></name> <argument_list pos:line="18" pos:column="11">(<argument><expr><literal type="string" pos:line="18" pos:column="12">"curl_json plugin: calloc failed."<pos:position pos:line="18" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="48"/></expr_stmt>
    <return pos:line="19" pos:column="5">return <expr><operator pos:line="19" pos:column="12">(<pos:position pos:line="19" pos:column="13"/></operator><operator pos:line="19" pos:column="13">-<pos:position pos:line="19" pos:column="14"/></operator><literal type="number" pos:line="19" pos:column="14">1<pos:position pos:line="19" pos:column="15"/></literal><operator pos:line="19" pos:column="15">)<pos:position pos:line="19" pos:column="16"/></operator></expr>;<pos:position pos:line="19" pos:column="17"/></return>
  }<pos:position pos:line="20" pos:column="4"/></block></then></if>
  <expr_stmt><expr><name><name pos:line="21" pos:column="3">key<pos:position pos:line="21" pos:column="6"/></name><operator pos:line="21" pos:column="6">-&gt;<pos:position pos:line="21" pos:column="11"/></operator><name pos:line="21" pos:column="8">magic<pos:position pos:line="21" pos:column="13"/></name></name> <operator pos:line="21" pos:column="14">=<pos:position pos:line="21" pos:column="15"/></operator> <name pos:line="21" pos:column="16">CJ_KEY_MAGIC<pos:position pos:line="21" pos:column="28"/></name></expr>;<pos:position pos:line="21" pos:column="29"/></expr_stmt>

  <if pos:line="23" pos:column="3">if <condition pos:line="23" pos:column="6">(<expr><call><name pos:line="23" pos:column="7">strcasecmp<pos:position pos:line="23" pos:column="17"/></name> <argument_list pos:line="23" pos:column="18">(<argument><expr><literal type="string" pos:line="23" pos:column="19">"Key"<pos:position pos:line="23" pos:column="24"/></literal></expr></argument>, <argument><expr><name><name pos:line="23" pos:column="26">ci<pos:position pos:line="23" pos:column="28"/></name><operator pos:line="23" pos:column="28">-&gt;<pos:position pos:line="23" pos:column="33"/></operator><name pos:line="23" pos:column="30">key<pos:position pos:line="23" pos:column="33"/></name></name></expr></argument>)<pos:position pos:line="23" pos:column="34"/></argument_list></call> <operator pos:line="23" pos:column="35">==<pos:position pos:line="23" pos:column="37"/></operator> <literal type="number" pos:line="23" pos:column="38">0<pos:position pos:line="23" pos:column="39"/></literal></expr>)<pos:position pos:line="23" pos:column="40"/></condition><then pos:line="23" pos:column="40">
  <block pos:line="24" pos:column="3">{
    <expr_stmt><expr><name pos:line="25" pos:column="5">status<pos:position pos:line="25" pos:column="11"/></name> <operator pos:line="25" pos:column="12">=<pos:position pos:line="25" pos:column="13"/></operator> <call><name pos:line="25" pos:column="14">cf_util_get_string<pos:position pos:line="25" pos:column="32"/></name> <argument_list pos:line="25" pos:column="33">(<argument><expr><name pos:line="25" pos:column="34">ci<pos:position pos:line="25" pos:column="36"/></name></expr></argument>, <argument><expr><operator pos:line="25" pos:column="38">&amp;<pos:position pos:line="25" pos:column="43"/></operator><name><name pos:line="25" pos:column="39">key<pos:position pos:line="25" pos:column="42"/></name><operator pos:line="25" pos:column="42">-&gt;<pos:position pos:line="25" pos:column="47"/></operator><name pos:line="25" pos:column="44">path<pos:position pos:line="25" pos:column="48"/></name></name></expr></argument>)<pos:position pos:line="25" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="50"/></expr_stmt>
    <if pos:line="26" pos:column="5">if <condition pos:line="26" pos:column="8">(<expr><name pos:line="26" pos:column="9">status<pos:position pos:line="26" pos:column="15"/></name> <operator pos:line="26" pos:column="16">!=<pos:position pos:line="26" pos:column="18"/></operator> <literal type="number" pos:line="26" pos:column="19">0<pos:position pos:line="26" pos:column="20"/></literal></expr>)<pos:position pos:line="26" pos:column="21"/></condition><then pos:line="26" pos:column="21">
    <block pos:line="27" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="28" pos:column="7">sfree<pos:position pos:line="28" pos:column="12"/></name> <argument_list pos:line="28" pos:column="13">(<argument><expr><name pos:line="28" pos:column="14">key<pos:position pos:line="28" pos:column="17"/></name></expr></argument>)<pos:position pos:line="28" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="19"/></expr_stmt>
      <return pos:line="29" pos:column="7">return <expr><operator pos:line="29" pos:column="14">(<pos:position pos:line="29" pos:column="15"/></operator><name pos:line="29" pos:column="15">status<pos:position pos:line="29" pos:column="21"/></name><operator pos:line="29" pos:column="21">)<pos:position pos:line="29" pos:column="22"/></operator></expr>;<pos:position pos:line="29" pos:column="23"/></return>
    }<pos:position pos:line="30" pos:column="6"/></block></then></if>
  }<pos:position pos:line="31" pos:column="4"/></block></then>
  <else pos:line="32" pos:column="3">else
  <block pos:line="33" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="34" pos:column="5">ERROR<pos:position pos:line="34" pos:column="10"/></name> <argument_list pos:line="34" pos:column="11">(<argument><expr><literal type="string" pos:line="34" pos:column="12">"curl_json plugin: cj_config: "<pos:position pos:line="34" pos:column="43"/></literal>
           <literal type="string" pos:line="35" pos:column="12">"Invalid key: %s"<pos:position pos:line="35" pos:column="29"/></literal></expr></argument>, <argument><expr><name><name pos:line="35" pos:column="31">ci<pos:position pos:line="35" pos:column="33"/></name><operator pos:line="35" pos:column="33">-&gt;<pos:position pos:line="35" pos:column="38"/></operator><name pos:line="35" pos:column="35">key<pos:position pos:line="35" pos:column="38"/></name></name></expr></argument>)<pos:position pos:line="35" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="40"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="36" pos:column="5">cj_key_free<pos:position pos:line="36" pos:column="16"/></name> <argument_list pos:line="36" pos:column="17">(<argument><expr><name pos:line="36" pos:column="18">key<pos:position pos:line="36" pos:column="21"/></name></expr></argument>)<pos:position pos:line="36" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="23"/></expr_stmt>
    <return pos:line="37" pos:column="5">return <expr><operator pos:line="37" pos:column="12">(<pos:position pos:line="37" pos:column="13"/></operator><operator pos:line="37" pos:column="13">-<pos:position pos:line="37" pos:column="14"/></operator><literal type="number" pos:line="37" pos:column="14">1<pos:position pos:line="37" pos:column="15"/></literal><operator pos:line="37" pos:column="15">)<pos:position pos:line="37" pos:column="16"/></operator></expr>;<pos:position pos:line="37" pos:column="17"/></return>
  }<pos:position pos:line="38" pos:column="4"/></block></else></if>

  <expr_stmt><expr><name pos:line="40" pos:column="3">status<pos:position pos:line="40" pos:column="9"/></name> <operator pos:line="40" pos:column="10">=<pos:position pos:line="40" pos:column="11"/></operator> <literal type="number" pos:line="40" pos:column="12">0<pos:position pos:line="40" pos:column="13"/></literal></expr>;<pos:position pos:line="40" pos:column="14"/></expr_stmt>
  <for pos:line="41" pos:column="3">for <control pos:line="41" pos:column="7">(<init><decl><type><name pos:line="41" pos:column="8">int<pos:position pos:line="41" pos:column="11"/></name></type> <name pos:line="41" pos:column="12">i<pos:position pos:line="41" pos:column="13"/></name> <init pos:line="41" pos:column="14">= <expr><literal type="number" pos:line="41" pos:column="16">0<pos:position pos:line="41" pos:column="17"/></literal></expr></init></decl>;<pos:position pos:line="41" pos:column="18"/></init> <condition><expr><name pos:line="41" pos:column="19">i<pos:position pos:line="41" pos:column="20"/></name> <operator pos:line="41" pos:column="21">&lt;<pos:position pos:line="41" pos:column="25"/></operator> <name><name pos:line="41" pos:column="23">ci<pos:position pos:line="41" pos:column="25"/></name><operator pos:line="41" pos:column="25">-&gt;<pos:position pos:line="41" pos:column="30"/></operator><name pos:line="41" pos:column="27">children_num<pos:position pos:line="41" pos:column="39"/></name></name></expr>;<pos:position pos:line="41" pos:column="40"/></condition> <incr><expr><name pos:line="41" pos:column="41">i<pos:position pos:line="41" pos:column="42"/></name><operator pos:line="41" pos:column="42">++<pos:position pos:line="41" pos:column="44"/></operator></expr></incr>)<pos:position pos:line="41" pos:column="45"/></control>
  <block pos:line="42" pos:column="3">{
    <decl_stmt><decl><type><name pos:line="43" pos:column="5">oconfig_item_t<pos:position pos:line="43" pos:column="19"/></name> <modifier pos:line="43" pos:column="20">*<pos:position pos:line="43" pos:column="21"/></modifier></type><name pos:line="43" pos:column="21">child<pos:position pos:line="43" pos:column="26"/></name> <init pos:line="43" pos:column="27">= <expr><name><name pos:line="43" pos:column="29">ci<pos:position pos:line="43" pos:column="31"/></name><operator pos:line="43" pos:column="31">-&gt;<pos:position pos:line="43" pos:column="36"/></operator><name pos:line="43" pos:column="33">children<pos:position pos:line="43" pos:column="41"/></name></name> <operator pos:line="43" pos:column="42">+<pos:position pos:line="43" pos:column="43"/></operator> <name pos:line="43" pos:column="44">i<pos:position pos:line="43" pos:column="45"/></name></expr></init></decl>;<pos:position pos:line="43" pos:column="46"/></decl_stmt>

    <if pos:line="45" pos:column="5">if <condition pos:line="45" pos:column="8">(<expr><call><name pos:line="45" pos:column="9">strcasecmp<pos:position pos:line="45" pos:column="19"/></name> <argument_list pos:line="45" pos:column="20">(<argument><expr><literal type="string" pos:line="45" pos:column="21">"Type"<pos:position pos:line="45" pos:column="27"/></literal></expr></argument>, <argument><expr><name><name pos:line="45" pos:column="29">child<pos:position pos:line="45" pos:column="34"/></name><operator pos:line="45" pos:column="34">-&gt;<pos:position pos:line="45" pos:column="39"/></operator><name pos:line="45" pos:column="36">key<pos:position pos:line="45" pos:column="39"/></name></name></expr></argument>)<pos:position pos:line="45" pos:column="40"/></argument_list></call> <operator pos:line="45" pos:column="41">==<pos:position pos:line="45" pos:column="43"/></operator> <literal type="number" pos:line="45" pos:column="44">0<pos:position pos:line="45" pos:column="45"/></literal></expr>)<pos:position pos:line="45" pos:column="46"/></condition><then pos:line="45" pos:column="46">
      <block type="pseudo"><expr_stmt><expr><name pos:line="46" pos:column="7">status<pos:position pos:line="46" pos:column="13"/></name> <operator pos:line="46" pos:column="14">=<pos:position pos:line="46" pos:column="15"/></operator> <call><name pos:line="46" pos:column="16">cf_util_get_string<pos:position pos:line="46" pos:column="34"/></name> <argument_list pos:line="46" pos:column="35">(<argument><expr><name pos:line="46" pos:column="36">child<pos:position pos:line="46" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="46" pos:column="43">&amp;<pos:position pos:line="46" pos:column="48"/></operator><name><name pos:line="46" pos:column="44">key<pos:position pos:line="46" pos:column="47"/></name><operator pos:line="46" pos:column="47">-&gt;<pos:position pos:line="46" pos:column="52"/></operator><name pos:line="46" pos:column="49">type<pos:position pos:line="46" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="46" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="55"/></expr_stmt></block></then>
    <elseif pos:line="47" pos:column="5">else <if pos:line="47" pos:column="10">if <condition pos:line="47" pos:column="13">(<expr><call><name pos:line="47" pos:column="14">strcasecmp<pos:position pos:line="47" pos:column="24"/></name> <argument_list pos:line="47" pos:column="25">(<argument><expr><literal type="string" pos:line="47" pos:column="26">"Instance"<pos:position pos:line="47" pos:column="36"/></literal></expr></argument>, <argument><expr><name><name pos:line="47" pos:column="38">child<pos:position pos:line="47" pos:column="43"/></name><operator pos:line="47" pos:column="43">-&gt;<pos:position pos:line="47" pos:column="48"/></operator><name pos:line="47" pos:column="45">key<pos:position pos:line="47" pos:column="48"/></name></name></expr></argument>)<pos:position pos:line="47" pos:column="49"/></argument_list></call> <operator pos:line="47" pos:column="50">==<pos:position pos:line="47" pos:column="52"/></operator> <literal type="number" pos:line="47" pos:column="53">0<pos:position pos:line="47" pos:column="54"/></literal></expr>)<pos:position pos:line="47" pos:column="55"/></condition><then pos:line="47" pos:column="55">
      <block type="pseudo"><expr_stmt><expr><name pos:line="48" pos:column="7">status<pos:position pos:line="48" pos:column="13"/></name> <operator pos:line="48" pos:column="14">=<pos:position pos:line="48" pos:column="15"/></operator> <call><name pos:line="48" pos:column="16">cf_util_get_string<pos:position pos:line="48" pos:column="34"/></name> <argument_list pos:line="48" pos:column="35">(<argument><expr><name pos:line="48" pos:column="36">child<pos:position pos:line="48" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="48" pos:column="43">&amp;<pos:position pos:line="48" pos:column="48"/></operator><name><name pos:line="48" pos:column="44">key<pos:position pos:line="48" pos:column="47"/></name><operator pos:line="48" pos:column="47">-&gt;<pos:position pos:line="48" pos:column="52"/></operator><name pos:line="48" pos:column="49">instance<pos:position pos:line="48" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="48" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="59"/></expr_stmt></block></then></if></elseif>
    <else pos:line="49" pos:column="5">else
    <block pos:line="50" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="51" pos:column="7">WARNING<pos:position pos:line="51" pos:column="14"/></name> <argument_list pos:line="51" pos:column="15">(<argument><expr><literal type="string" pos:line="51" pos:column="16">"curl_json plugin: Option `%s' not allowed here."<pos:position pos:line="51" pos:column="65"/></literal></expr></argument>, <argument><expr><name><name pos:line="51" pos:column="67">child<pos:position pos:line="51" pos:column="72"/></name><operator pos:line="51" pos:column="72">-&gt;<pos:position pos:line="51" pos:column="77"/></operator><name pos:line="51" pos:column="74">key<pos:position pos:line="51" pos:column="77"/></name></name></expr></argument>)<pos:position pos:line="51" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="79"/></expr_stmt>
      <expr_stmt><expr><name pos:line="52" pos:column="7">status<pos:position pos:line="52" pos:column="13"/></name> <operator pos:line="52" pos:column="14">=<pos:position pos:line="52" pos:column="15"/></operator> <operator pos:line="52" pos:column="16">-<pos:position pos:line="52" pos:column="17"/></operator><literal type="number" pos:line="52" pos:column="17">1<pos:position pos:line="52" pos:column="18"/></literal></expr>;<pos:position pos:line="52" pos:column="19"/></expr_stmt>
    }<pos:position pos:line="53" pos:column="6"/></block></else></if>

    <if pos:line="55" pos:column="5">if <condition pos:line="55" pos:column="8">(<expr><name pos:line="55" pos:column="9">status<pos:position pos:line="55" pos:column="15"/></name> <operator pos:line="55" pos:column="16">!=<pos:position pos:line="55" pos:column="18"/></operator> <literal type="number" pos:line="55" pos:column="19">0<pos:position pos:line="55" pos:column="20"/></literal></expr>)<pos:position pos:line="55" pos:column="21"/></condition><then pos:line="55" pos:column="21">
      <block type="pseudo"><break pos:line="56" pos:column="7">break;<pos:position pos:line="56" pos:column="13"/></break></block></then></if>
  }<pos:position pos:line="57" pos:column="4"/></block></for> <comment type="block" pos:line="57" pos:column="5">/* for (i = 0; i &lt; ci-&gt;children_num; i++) */</comment>

  <if pos:line="59" pos:column="3">if <condition pos:line="59" pos:column="6">(<expr><name pos:line="59" pos:column="7">status<pos:position pos:line="59" pos:column="13"/></name> <operator pos:line="59" pos:column="14">!=<pos:position pos:line="59" pos:column="16"/></operator> <literal type="number" pos:line="59" pos:column="17">0<pos:position pos:line="59" pos:column="18"/></literal></expr>)<pos:position pos:line="59" pos:column="19"/></condition><then pos:line="59" pos:column="19">
  <block pos:line="60" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="61" pos:column="5">cj_key_free<pos:position pos:line="61" pos:column="16"/></name> <argument_list pos:line="61" pos:column="17">(<argument><expr><name pos:line="61" pos:column="18">key<pos:position pos:line="61" pos:column="21"/></name></expr></argument>)<pos:position pos:line="61" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="23"/></expr_stmt>
    <return pos:line="62" pos:column="5">return <expr><operator pos:line="62" pos:column="12">(<pos:position pos:line="62" pos:column="13"/></operator><operator pos:line="62" pos:column="13">-<pos:position pos:line="62" pos:column="14"/></operator><literal type="number" pos:line="62" pos:column="14">1<pos:position pos:line="62" pos:column="15"/></literal><operator pos:line="62" pos:column="15">)<pos:position pos:line="62" pos:column="16"/></operator></expr>;<pos:position pos:line="62" pos:column="17"/></return>
  }<pos:position pos:line="63" pos:column="4"/></block></then></if>

  <if pos:line="65" pos:column="3">if <condition pos:line="65" pos:column="6">(<expr><name><name pos:line="65" pos:column="7">key<pos:position pos:line="65" pos:column="10"/></name><operator pos:line="65" pos:column="10">-&gt;<pos:position pos:line="65" pos:column="15"/></operator><name pos:line="65" pos:column="12">type<pos:position pos:line="65" pos:column="16"/></name></name> <operator pos:line="65" pos:column="17">==<pos:position pos:line="65" pos:column="19"/></operator> <name pos:line="65" pos:column="20">NULL<pos:position pos:line="65" pos:column="24"/></name></expr>)<pos:position pos:line="65" pos:column="25"/></condition><then pos:line="65" pos:column="25">
  <block pos:line="66" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="67" pos:column="5">WARNING<pos:position pos:line="67" pos:column="12"/></name> <argument_list pos:line="67" pos:column="13">(<argument><expr><literal type="string" pos:line="67" pos:column="14">"curl_json plugin: `Type' missing in `Key' block."<pos:position pos:line="67" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="67" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="66"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="68" pos:column="5">cj_key_free<pos:position pos:line="68" pos:column="16"/></name> <argument_list pos:line="68" pos:column="17">(<argument><expr><name pos:line="68" pos:column="18">key<pos:position pos:line="68" pos:column="21"/></name></expr></argument>)<pos:position pos:line="68" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="23"/></expr_stmt>
    <return pos:line="69" pos:column="5">return <expr><operator pos:line="69" pos:column="12">(<pos:position pos:line="69" pos:column="13"/></operator><operator pos:line="69" pos:column="13">-<pos:position pos:line="69" pos:column="14"/></operator><literal type="number" pos:line="69" pos:column="14">1<pos:position pos:line="69" pos:column="15"/></literal><operator pos:line="69" pos:column="15">)<pos:position pos:line="69" pos:column="16"/></operator></expr>;<pos:position pos:line="69" pos:column="17"/></return>
  }<pos:position pos:line="70" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="72" pos:column="3">/* store path in a tree that will match the json map structure, example:
   * "httpd/requests/count",
   * "httpd/requests/current" -&gt;
   * { "httpd": { "requests": { "count": $key, "current": $key } } }
   */</comment>
  <decl_stmt><decl><type><name pos:line="77" pos:column="3">char<pos:position pos:line="77" pos:column="7"/></name> <modifier pos:line="77" pos:column="8">*<pos:position pos:line="77" pos:column="9"/></modifier></type><name pos:line="77" pos:column="9">ptr<pos:position pos:line="77" pos:column="12"/></name></decl>;<pos:position pos:line="77" pos:column="13"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="78" pos:column="3">char<pos:position pos:line="78" pos:column="7"/></name> <modifier pos:line="78" pos:column="8">*<pos:position pos:line="78" pos:column="9"/></modifier></type><name pos:line="78" pos:column="9">name<pos:position pos:line="78" pos:column="13"/></name></decl>;<pos:position pos:line="78" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="79" pos:column="3">c_avl_tree_t<pos:position pos:line="79" pos:column="15"/></name> <modifier pos:line="79" pos:column="16">*<pos:position pos:line="79" pos:column="17"/></modifier></type><name pos:line="79" pos:column="17">tree<pos:position pos:line="79" pos:column="21"/></name></decl>;<pos:position pos:line="79" pos:column="22"/></decl_stmt>

  <if pos:line="81" pos:column="3">if <condition pos:line="81" pos:column="6">(<expr><name><name pos:line="81" pos:column="7">db<pos:position pos:line="81" pos:column="9"/></name><operator pos:line="81" pos:column="9">-&gt;<pos:position pos:line="81" pos:column="14"/></operator><name pos:line="81" pos:column="11">tree<pos:position pos:line="81" pos:column="15"/></name></name> <operator pos:line="81" pos:column="16">==<pos:position pos:line="81" pos:column="18"/></operator> <name pos:line="81" pos:column="19">NULL<pos:position pos:line="81" pos:column="23"/></name></expr>)<pos:position pos:line="81" pos:column="24"/></condition><then pos:line="81" pos:column="24">
    <block type="pseudo"><expr_stmt><expr><name><name pos:line="82" pos:column="5">db<pos:position pos:line="82" pos:column="7"/></name><operator pos:line="82" pos:column="7">-&gt;<pos:position pos:line="82" pos:column="12"/></operator><name pos:line="82" pos:column="9">tree<pos:position pos:line="82" pos:column="13"/></name></name> <operator pos:line="82" pos:column="14">=<pos:position pos:line="82" pos:column="15"/></operator> <call><name pos:line="82" pos:column="16">cj_avl_create<pos:position pos:line="82" pos:column="29"/></name><argument_list pos:line="82" pos:column="29">()<pos:position pos:line="82" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="32"/></expr_stmt></block></then></if>

  <expr_stmt><expr><name pos:line="84" pos:column="3">tree<pos:position pos:line="84" pos:column="7"/></name> <operator pos:line="84" pos:column="8">=<pos:position pos:line="84" pos:column="9"/></operator> <name><name pos:line="84" pos:column="10">db<pos:position pos:line="84" pos:column="12"/></name><operator pos:line="84" pos:column="12">-&gt;<pos:position pos:line="84" pos:column="17"/></operator><name pos:line="84" pos:column="14">tree<pos:position pos:line="84" pos:column="18"/></name></name></expr>;<pos:position pos:line="84" pos:column="19"/></expr_stmt>
  <expr_stmt><expr><name pos:line="85" pos:column="3">ptr<pos:position pos:line="85" pos:column="6"/></name> <operator pos:line="85" pos:column="7">=<pos:position pos:line="85" pos:column="8"/></operator> <name><name pos:line="85" pos:column="9">key<pos:position pos:line="85" pos:column="12"/></name><operator pos:line="85" pos:column="12">-&gt;<pos:position pos:line="85" pos:column="17"/></operator><name pos:line="85" pos:column="14">path<pos:position pos:line="85" pos:column="18"/></name></name></expr>;<pos:position pos:line="85" pos:column="19"/></expr_stmt>
  <if pos:line="86" pos:column="3">if <condition pos:line="86" pos:column="6">(<expr><operator pos:line="86" pos:column="7">*<pos:position pos:line="86" pos:column="8"/></operator><name pos:line="86" pos:column="8">ptr<pos:position pos:line="86" pos:column="11"/></name> <operator pos:line="86" pos:column="12">==<pos:position pos:line="86" pos:column="14"/></operator> <literal type="char" pos:line="86" pos:column="15">'/'<pos:position pos:line="86" pos:column="18"/></literal></expr>)<pos:position pos:line="86" pos:column="19"/></condition><then pos:line="86" pos:column="19">
    <block type="pseudo"><expr_stmt><expr><operator pos:line="87" pos:column="5">++<pos:position pos:line="87" pos:column="7"/></operator><name pos:line="87" pos:column="7">ptr<pos:position pos:line="87" pos:column="10"/></name></expr>;<pos:position pos:line="87" pos:column="11"/></expr_stmt></block></then></if>

  <expr_stmt><expr><name pos:line="89" pos:column="3">name<pos:position pos:line="89" pos:column="7"/></name> <operator pos:line="89" pos:column="8">=<pos:position pos:line="89" pos:column="9"/></operator> <name pos:line="89" pos:column="10">ptr<pos:position pos:line="89" pos:column="13"/></name></expr>;<pos:position pos:line="89" pos:column="14"/></expr_stmt>
  <while pos:line="90" pos:column="3">while <condition pos:line="90" pos:column="9">(<expr><operator pos:line="90" pos:column="10">(<pos:position pos:line="90" pos:column="11"/></operator><name pos:line="90" pos:column="11">ptr<pos:position pos:line="90" pos:column="14"/></name> <operator pos:line="90" pos:column="15">=<pos:position pos:line="90" pos:column="16"/></operator> <call><name pos:line="90" pos:column="17">strchr<pos:position pos:line="90" pos:column="23"/></name> <argument_list pos:line="90" pos:column="24">(<argument><expr><name pos:line="90" pos:column="25">name<pos:position pos:line="90" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="90" pos:column="31">'/'<pos:position pos:line="90" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="90" pos:column="35"/></argument_list></call><operator pos:line="90" pos:column="35">)<pos:position pos:line="90" pos:column="36"/></operator> <operator pos:line="90" pos:column="37">!=<pos:position pos:line="90" pos:column="39"/></operator> <name pos:line="90" pos:column="40">NULL<pos:position pos:line="90" pos:column="44"/></name></expr>)<pos:position pos:line="90" pos:column="45"/></condition>
  <block pos:line="91" pos:column="3">{
    <decl_stmt><decl><type><name pos:line="92" pos:column="5">char<pos:position pos:line="92" pos:column="9"/></name></type> <name><name pos:line="92" pos:column="10">ent<pos:position pos:line="92" pos:column="13"/></name><index pos:line="92" pos:column="13">[<expr><name pos:line="92" pos:column="14">PATH_MAX<pos:position pos:line="92" pos:column="22"/></name></expr>]<pos:position pos:line="92" pos:column="23"/></index></name></decl>;<pos:position pos:line="92" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="93" pos:column="5">c_avl_tree_t<pos:position pos:line="93" pos:column="17"/></name> <modifier pos:line="93" pos:column="18">*<pos:position pos:line="93" pos:column="19"/></modifier></type><name pos:line="93" pos:column="19">value<pos:position pos:line="93" pos:column="24"/></name></decl>;<pos:position pos:line="93" pos:column="25"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="94" pos:column="5">size_t<pos:position pos:line="94" pos:column="11"/></name></type> <name pos:line="94" pos:column="12">len<pos:position pos:line="94" pos:column="15"/></name></decl>;<pos:position pos:line="94" pos:column="16"/></decl_stmt>

    <expr_stmt><expr><name pos:line="96" pos:column="5">len<pos:position pos:line="96" pos:column="8"/></name> <operator pos:line="96" pos:column="9">=<pos:position pos:line="96" pos:column="10"/></operator> <name pos:line="96" pos:column="11">ptr<pos:position pos:line="96" pos:column="14"/></name> <operator pos:line="96" pos:column="15">-<pos:position pos:line="96" pos:column="16"/></operator> <name pos:line="96" pos:column="17">name<pos:position pos:line="96" pos:column="21"/></name></expr>;<pos:position pos:line="96" pos:column="22"/></expr_stmt>
    <if pos:line="97" pos:column="5">if <condition pos:line="97" pos:column="8">(<expr><name pos:line="97" pos:column="9">len<pos:position pos:line="97" pos:column="12"/></name> <operator pos:line="97" pos:column="13">==<pos:position pos:line="97" pos:column="15"/></operator> <literal type="number" pos:line="97" pos:column="16">0<pos:position pos:line="97" pos:column="17"/></literal></expr>)<pos:position pos:line="97" pos:column="18"/></condition><then pos:line="97" pos:column="18">
      <block type="pseudo"><break pos:line="98" pos:column="7">break;<pos:position pos:line="98" pos:column="13"/></break></block></then></if>

    <expr_stmt><expr><name pos:line="100" pos:column="5">len<pos:position pos:line="100" pos:column="8"/></name> <operator pos:line="100" pos:column="9">=<pos:position pos:line="100" pos:column="10"/></operator> <call><name pos:line="100" pos:column="11">COUCH_MIN<pos:position pos:line="100" pos:column="20"/></name><argument_list pos:line="100" pos:column="20">(<argument><expr><name pos:line="100" pos:column="21">len<pos:position pos:line="100" pos:column="24"/></name></expr></argument>, <argument><expr><sizeof pos:line="100" pos:column="26">sizeof <argument_list pos:line="100" pos:column="33">(<argument><expr><name pos:line="100" pos:column="34">ent<pos:position pos:line="100" pos:column="37"/></name></expr></argument>)<pos:position pos:line="100" pos:column="38"/></argument_list></sizeof><operator pos:line="100" pos:column="38">-<pos:position pos:line="100" pos:column="39"/></operator><literal type="number" pos:line="100" pos:column="39">1<pos:position pos:line="100" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="100" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="100" pos:column="42"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="101" pos:column="5">sstrncpy<pos:position pos:line="101" pos:column="13"/></name> <argument_list pos:line="101" pos:column="14">(<argument><expr><name pos:line="101" pos:column="15">ent<pos:position pos:line="101" pos:column="18"/></name></expr></argument>, <argument><expr><name pos:line="101" pos:column="20">name<pos:position pos:line="101" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="101" pos:column="26">len<pos:position pos:line="101" pos:column="29"/></name><operator pos:line="101" pos:column="29">+<pos:position pos:line="101" pos:column="30"/></operator><literal type="number" pos:line="101" pos:column="30">1<pos:position pos:line="101" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="101" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="101" pos:column="33"/></expr_stmt>

    <if pos:line="103" pos:column="5">if <condition pos:line="103" pos:column="8">(<expr><call><name pos:line="103" pos:column="9">c_avl_get<pos:position pos:line="103" pos:column="18"/></name> <argument_list pos:line="103" pos:column="19">(<argument><expr><name pos:line="103" pos:column="20">tree<pos:position pos:line="103" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="103" pos:column="26">ent<pos:position pos:line="103" pos:column="29"/></name></expr></argument>, <argument><expr><operator pos:line="103" pos:column="31">(<pos:position pos:line="103" pos:column="32"/></operator><name pos:line="103" pos:column="32">void<pos:position pos:line="103" pos:column="36"/></name> <operator pos:line="103" pos:column="37">*<pos:position pos:line="103" pos:column="38"/></operator><operator pos:line="103" pos:column="38">)<pos:position pos:line="103" pos:column="39"/></operator> <operator pos:line="103" pos:column="40">&amp;<pos:position pos:line="103" pos:column="45"/></operator><name pos:line="103" pos:column="41">value<pos:position pos:line="103" pos:column="46"/></name></expr></argument>)<pos:position pos:line="103" pos:column="47"/></argument_list></call> <operator pos:line="103" pos:column="48">!=<pos:position pos:line="103" pos:column="50"/></operator> <literal type="number" pos:line="103" pos:column="51">0<pos:position pos:line="103" pos:column="52"/></literal></expr>)<pos:position pos:line="103" pos:column="53"/></condition><then pos:line="103" pos:column="53">
    <block pos:line="104" pos:column="5">{
      <expr_stmt><expr><name pos:line="105" pos:column="7">value<pos:position pos:line="105" pos:column="12"/></name> <operator pos:line="105" pos:column="13">=<pos:position pos:line="105" pos:column="14"/></operator> <call><name pos:line="105" pos:column="15">cj_avl_create<pos:position pos:line="105" pos:column="28"/></name> <argument_list pos:line="105" pos:column="29">()<pos:position pos:line="105" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="105" pos:column="32"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="106" pos:column="7">c_avl_insert<pos:position pos:line="106" pos:column="19"/></name> <argument_list pos:line="106" pos:column="20">(<argument><expr><name pos:line="106" pos:column="21">tree<pos:position pos:line="106" pos:column="25"/></name></expr></argument>, <argument><expr><call><name pos:line="106" pos:column="27">strdup<pos:position pos:line="106" pos:column="33"/></name> <argument_list pos:line="106" pos:column="34">(<argument><expr><name pos:line="106" pos:column="35">ent<pos:position pos:line="106" pos:column="38"/></name></expr></argument>)<pos:position pos:line="106" pos:column="39"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="106" pos:column="41">value<pos:position pos:line="106" pos:column="46"/></name></expr></argument>)<pos:position pos:line="106" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="106" pos:column="48"/></expr_stmt>
    }<pos:position pos:line="107" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="109" pos:column="5">tree<pos:position pos:line="109" pos:column="9"/></name> <operator pos:line="109" pos:column="10">=<pos:position pos:line="109" pos:column="11"/></operator> <name pos:line="109" pos:column="12">value<pos:position pos:line="109" pos:column="17"/></name></expr>;<pos:position pos:line="109" pos:column="18"/></expr_stmt>
    <expr_stmt><expr><name pos:line="110" pos:column="5">name<pos:position pos:line="110" pos:column="9"/></name> <operator pos:line="110" pos:column="10">=<pos:position pos:line="110" pos:column="11"/></operator> <name pos:line="110" pos:column="12">ptr<pos:position pos:line="110" pos:column="15"/></name> <operator pos:line="110" pos:column="16">+<pos:position pos:line="110" pos:column="17"/></operator> <literal type="number" pos:line="110" pos:column="18">1<pos:position pos:line="110" pos:column="19"/></literal></expr>;<pos:position pos:line="110" pos:column="20"/></expr_stmt>
  }<pos:position pos:line="111" pos:column="4"/></block></while>

  <if pos:line="113" pos:column="3">if <condition pos:line="113" pos:column="6">(<expr><call><name pos:line="113" pos:column="7">strlen<pos:position pos:line="113" pos:column="13"/></name> <argument_list pos:line="113" pos:column="14">(<argument><expr><name pos:line="113" pos:column="15">name<pos:position pos:line="113" pos:column="19"/></name></expr></argument>)<pos:position pos:line="113" pos:column="20"/></argument_list></call> <operator pos:line="113" pos:column="21">==<pos:position pos:line="113" pos:column="23"/></operator> <literal type="number" pos:line="113" pos:column="24">0<pos:position pos:line="113" pos:column="25"/></literal></expr>)<pos:position pos:line="113" pos:column="26"/></condition><then pos:line="113" pos:column="26">
  <block pos:line="114" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="115" pos:column="5">ERROR<pos:position pos:line="115" pos:column="10"/></name> <argument_list pos:line="115" pos:column="11">(<argument><expr><literal type="string" pos:line="115" pos:column="12">"curl_json plugin: invalid key: %s"<pos:position pos:line="115" pos:column="47"/></literal></expr></argument>, <argument><expr><name><name pos:line="115" pos:column="49">key<pos:position pos:line="115" pos:column="52"/></name><operator pos:line="115" pos:column="52">-&gt;<pos:position pos:line="115" pos:column="57"/></operator><name pos:line="115" pos:column="54">path<pos:position pos:line="115" pos:column="58"/></name></name></expr></argument>)<pos:position pos:line="115" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="115" pos:column="60"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="116" pos:column="5">cj_key_free<pos:position pos:line="116" pos:column="16"/></name> <argument_list pos:line="116" pos:column="17">(<argument><expr><name pos:line="116" pos:column="18">key<pos:position pos:line="116" pos:column="21"/></name></expr></argument>)<pos:position pos:line="116" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="116" pos:column="23"/></expr_stmt>
    <return pos:line="117" pos:column="5">return <expr><operator pos:line="117" pos:column="12">(<pos:position pos:line="117" pos:column="13"/></operator><operator pos:line="117" pos:column="13">-<pos:position pos:line="117" pos:column="14"/></operator><literal type="number" pos:line="117" pos:column="14">1<pos:position pos:line="117" pos:column="15"/></literal><operator pos:line="117" pos:column="15">)<pos:position pos:line="117" pos:column="16"/></operator></expr>;<pos:position pos:line="117" pos:column="17"/></return>
  }<pos:position pos:line="118" pos:column="4"/></block></then></if>

  <expr_stmt><expr><call><name pos:line="120" pos:column="3">c_avl_insert<pos:position pos:line="120" pos:column="15"/></name> <argument_list pos:line="120" pos:column="16">(<argument><expr><name pos:line="120" pos:column="17">tree<pos:position pos:line="120" pos:column="21"/></name></expr></argument>, <argument><expr><call><name pos:line="120" pos:column="23">strdup<pos:position pos:line="120" pos:column="29"/></name> <argument_list pos:line="120" pos:column="30">(<argument><expr><name pos:line="120" pos:column="31">name<pos:position pos:line="120" pos:column="35"/></name></expr></argument>)<pos:position pos:line="120" pos:column="36"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="120" pos:column="38">key<pos:position pos:line="120" pos:column="41"/></name></expr></argument>)<pos:position pos:line="120" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="120" pos:column="43"/></expr_stmt>
  <return pos:line="121" pos:column="3">return <expr><operator pos:line="121" pos:column="10">(<pos:position pos:line="121" pos:column="11"/></operator><name pos:line="121" pos:column="11">status<pos:position pos:line="121" pos:column="17"/></name><operator pos:line="121" pos:column="17">)<pos:position pos:line="121" pos:column="18"/></operator></expr>;<pos:position pos:line="121" pos:column="19"/></return>
}<pos:position pos:line="122" pos:column="2"/></block></function></unit>
