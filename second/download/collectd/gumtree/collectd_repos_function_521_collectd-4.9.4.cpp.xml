<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_521_collectd-4.9.4.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">char<pos:position pos:line="1" pos:column="5"/></name> <modifier pos:line="1" pos:column="6">*<pos:position pos:line="1" pos:column="7"/></modifier></type><name pos:line="1" pos:column="7">sstrdup<pos:position pos:line="1" pos:column="14"/></name> <parameter_list pos:line="1" pos:column="15">(<parameter><decl><type><specifier pos:line="1" pos:column="16">const<pos:position pos:line="1" pos:column="21"/></specifier> <name pos:line="1" pos:column="22">char<pos:position pos:line="1" pos:column="26"/></name> <modifier pos:line="1" pos:column="27">*<pos:position pos:line="1" pos:column="28"/></modifier></type><name pos:line="1" pos:column="28">s<pos:position pos:line="1" pos:column="29"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="30"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">char<pos:position pos:line="3" pos:column="13"/></name> <modifier pos:line="3" pos:column="14">*<pos:position pos:line="3" pos:column="15"/></modifier></type><name pos:line="3" pos:column="15">r<pos:position pos:line="3" pos:column="16"/></name></decl>;<pos:position pos:line="3" pos:column="17"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">size_t<pos:position pos:line="4" pos:column="15"/></name></type> <name pos:line="4" pos:column="16">sz<pos:position pos:line="4" pos:column="18"/></name></decl>;<pos:position pos:line="4" pos:column="19"/></decl_stmt>

	<if pos:line="6" pos:column="9">if <condition pos:line="6" pos:column="12">(<expr><name pos:line="6" pos:column="13">s<pos:position pos:line="6" pos:column="14"/></name> <operator pos:line="6" pos:column="15">==<pos:position pos:line="6" pos:column="17"/></operator> <name pos:line="6" pos:column="18">NULL<pos:position pos:line="6" pos:column="22"/></name></expr>)<pos:position pos:line="6" pos:column="23"/></condition><then pos:line="6" pos:column="23">
		<block type="pseudo"><return pos:line="7" pos:column="17">return <expr><operator pos:line="7" pos:column="24">(<pos:position pos:line="7" pos:column="25"/></operator><name pos:line="7" pos:column="25">NULL<pos:position pos:line="7" pos:column="29"/></name><operator pos:line="7" pos:column="29">)<pos:position pos:line="7" pos:column="30"/></operator></expr>;<pos:position pos:line="7" pos:column="31"/></return></block></then></if>

	<comment type="block" pos:line="9" pos:column="9">/* Do not use `strdup' here, because it's not specified in POSIX. It's
	 * ``only'' an XSI extension. */</comment>
	<expr_stmt><expr><name pos:line="11" pos:column="9">sz<pos:position pos:line="11" pos:column="11"/></name> <operator pos:line="11" pos:column="12">=<pos:position pos:line="11" pos:column="13"/></operator> <call><name pos:line="11" pos:column="14">strlen<pos:position pos:line="11" pos:column="20"/></name> <argument_list pos:line="11" pos:column="21">(<argument><expr><name pos:line="11" pos:column="22">s<pos:position pos:line="11" pos:column="23"/></name></expr></argument>)<pos:position pos:line="11" pos:column="24"/></argument_list></call> <operator pos:line="11" pos:column="25">+<pos:position pos:line="11" pos:column="26"/></operator> <literal type="number" pos:line="11" pos:column="27">1<pos:position pos:line="11" pos:column="28"/></literal></expr>;<pos:position pos:line="11" pos:column="29"/></expr_stmt>
	<expr_stmt><expr><name pos:line="12" pos:column="9">r<pos:position pos:line="12" pos:column="10"/></name> <operator pos:line="12" pos:column="11">=<pos:position pos:line="12" pos:column="12"/></operator> <operator pos:line="12" pos:column="13">(<pos:position pos:line="12" pos:column="14"/></operator><name pos:line="12" pos:column="14">char<pos:position pos:line="12" pos:column="18"/></name> <operator pos:line="12" pos:column="19">*<pos:position pos:line="12" pos:column="20"/></operator><operator pos:line="12" pos:column="20">)<pos:position pos:line="12" pos:column="21"/></operator> <call><name pos:line="12" pos:column="22">malloc<pos:position pos:line="12" pos:column="28"/></name> <argument_list pos:line="12" pos:column="29">(<argument><expr><sizeof pos:line="12" pos:column="30">sizeof <argument_list pos:line="12" pos:column="37">(<argument><expr><name pos:line="12" pos:column="38">char<pos:position pos:line="12" pos:column="42"/></name></expr></argument>)<pos:position pos:line="12" pos:column="43"/></argument_list></sizeof> <operator pos:line="12" pos:column="44">*<pos:position pos:line="12" pos:column="45"/></operator> <name pos:line="12" pos:column="46">sz<pos:position pos:line="12" pos:column="48"/></name></expr></argument>)<pos:position pos:line="12" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="50"/></expr_stmt>
	<if pos:line="13" pos:column="9">if <condition pos:line="13" pos:column="12">(<expr><name pos:line="13" pos:column="13">r<pos:position pos:line="13" pos:column="14"/></name> <operator pos:line="13" pos:column="15">==<pos:position pos:line="13" pos:column="17"/></operator> <name pos:line="13" pos:column="18">NULL<pos:position pos:line="13" pos:column="22"/></name></expr>)<pos:position pos:line="13" pos:column="23"/></condition><then pos:line="13" pos:column="23">
	<block pos:line="14" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="15" pos:column="17">ERROR<pos:position pos:line="15" pos:column="22"/></name> <argument_list pos:line="15" pos:column="23">(<argument><expr><literal type="string" pos:line="15" pos:column="24">"sstrdup: Out of memory."<pos:position pos:line="15" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="51"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="16" pos:column="17">exit<pos:position pos:line="16" pos:column="21"/></name> <argument_list pos:line="16" pos:column="22">(<argument><expr><literal type="number" pos:line="16" pos:column="23">3<pos:position pos:line="16" pos:column="24"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="26"/></expr_stmt>
	}<pos:position pos:line="17" pos:column="10"/></block></then></if>
	<expr_stmt><expr><call><name pos:line="18" pos:column="9">memcpy<pos:position pos:line="18" pos:column="15"/></name> <argument_list pos:line="18" pos:column="16">(<argument><expr><name pos:line="18" pos:column="17">r<pos:position pos:line="18" pos:column="18"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="20">s<pos:position pos:line="18" pos:column="21"/></name></expr></argument>, <argument><expr><sizeof pos:line="18" pos:column="23">sizeof <argument_list pos:line="18" pos:column="30">(<argument><expr><name pos:line="18" pos:column="31">char<pos:position pos:line="18" pos:column="35"/></name></expr></argument>)<pos:position pos:line="18" pos:column="36"/></argument_list></sizeof> <operator pos:line="18" pos:column="37">*<pos:position pos:line="18" pos:column="38"/></operator> <name pos:line="18" pos:column="39">sz<pos:position pos:line="18" pos:column="41"/></name></expr></argument>)<pos:position pos:line="18" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="43"/></expr_stmt>

	<return pos:line="20" pos:column="9">return <expr><operator pos:line="20" pos:column="16">(<pos:position pos:line="20" pos:column="17"/></operator><name pos:line="20" pos:column="17">r<pos:position pos:line="20" pos:column="18"/></name><operator pos:line="20" pos:column="18">)<pos:position pos:line="20" pos:column="19"/></operator></expr>;<pos:position pos:line="20" pos:column="20"/></return>
}<pos:position pos:line="21" pos:column="2"/></block></function></unit>
