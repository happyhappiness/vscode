<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1763_collectd-5.6.2.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">FILE<pos:position pos:line="1" pos:column="12"/></name> <modifier pos:line="1" pos:column="13">*<pos:position pos:line="1" pos:column="14"/></modifier></type><name pos:line="1" pos:column="14">olsrd_connect<pos:position pos:line="1" pos:column="27"/></name><parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><name pos:line="1" pos:column="28">void<pos:position pos:line="1" pos:column="32"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="33"/></parameter_list> <comment type="block" pos:line="1" pos:column="34">/* {{{ */</comment>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name><name pos:line="3" pos:column="3">struct<pos:position pos:line="3" pos:column="9"/></name> <name pos:line="3" pos:column="10">addrinfo<pos:position pos:line="3" pos:column="18"/></name></name> <modifier pos:line="3" pos:column="19">*<pos:position pos:line="3" pos:column="20"/></modifier></type><name pos:line="3" pos:column="20">ai_list<pos:position pos:line="3" pos:column="27"/></name></decl>;<pos:position pos:line="3" pos:column="28"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">int<pos:position pos:line="4" pos:column="6"/></name></type> <name pos:line="4" pos:column="7">ai_return<pos:position pos:line="4" pos:column="16"/></name></decl>;<pos:position pos:line="4" pos:column="17"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="6" pos:column="3">FILE<pos:position pos:line="6" pos:column="7"/></name> <modifier pos:line="6" pos:column="8">*<pos:position pos:line="6" pos:column="9"/></modifier></type><name pos:line="6" pos:column="9">fh<pos:position pos:line="6" pos:column="11"/></name></decl>;<pos:position pos:line="6" pos:column="12"/></decl_stmt>

  <decl_stmt><decl><type><name><name pos:line="8" pos:column="3">struct<pos:position pos:line="8" pos:column="9"/></name> <name pos:line="8" pos:column="10">addrinfo<pos:position pos:line="8" pos:column="18"/></name></name></type> <name pos:line="8" pos:column="19">ai_hints<pos:position pos:line="8" pos:column="27"/></name> <init pos:line="8" pos:column="28">= <expr><block pos:line="8" pos:column="30">{<expr><operator pos:line="8" pos:column="31">.<pos:position pos:line="8" pos:column="32"/></operator><name pos:line="8" pos:column="32">ai_family<pos:position pos:line="8" pos:column="41"/></name> <operator pos:line="8" pos:column="42">=<pos:position pos:line="8" pos:column="43"/></operator> <name pos:line="8" pos:column="44">AF_UNSPEC<pos:position pos:line="8" pos:column="53"/></name></expr>,
                              <expr><operator pos:line="9" pos:column="31">.<pos:position pos:line="9" pos:column="32"/></operator><name pos:line="9" pos:column="32">ai_flags<pos:position pos:line="9" pos:column="40"/></name> <operator pos:line="9" pos:column="41">=<pos:position pos:line="9" pos:column="42"/></operator> <name pos:line="9" pos:column="43">AI_ADDRCONFIG<pos:position pos:line="9" pos:column="56"/></name></expr>,
                              <expr><operator pos:line="10" pos:column="31">.<pos:position pos:line="10" pos:column="32"/></operator><name pos:line="10" pos:column="32">ai_protocol<pos:position pos:line="10" pos:column="43"/></name> <operator pos:line="10" pos:column="44">=<pos:position pos:line="10" pos:column="45"/></operator> <name pos:line="10" pos:column="46">IPPROTO_TCP<pos:position pos:line="10" pos:column="57"/></name></expr>,
                              <expr><operator pos:line="11" pos:column="31">.<pos:position pos:line="11" pos:column="32"/></operator><name pos:line="11" pos:column="32">ai_socktype<pos:position pos:line="11" pos:column="43"/></name> <operator pos:line="11" pos:column="44">=<pos:position pos:line="11" pos:column="45"/></operator> <name pos:line="11" pos:column="46">SOCK_STREAM<pos:position pos:line="11" pos:column="57"/></name></expr>}<pos:position pos:line="11" pos:column="58"/></block></expr></init></decl>;<pos:position pos:line="11" pos:column="59"/></decl_stmt>

  <expr_stmt><expr><name pos:line="13" pos:column="3">ai_return<pos:position pos:line="13" pos:column="12"/></name> <operator pos:line="13" pos:column="13">=<pos:position pos:line="13" pos:column="14"/></operator>
      <call><name pos:line="14" pos:column="7">getaddrinfo<pos:position pos:line="14" pos:column="18"/></name><argument_list pos:line="14" pos:column="18">(<argument><expr><call><name pos:line="14" pos:column="19">olsrd_get_node<pos:position pos:line="14" pos:column="33"/></name><argument_list pos:line="14" pos:column="33">()<pos:position pos:line="14" pos:column="35"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="14" pos:column="37">olsrd_get_service<pos:position pos:line="14" pos:column="54"/></name><argument_list pos:line="14" pos:column="54">()<pos:position pos:line="14" pos:column="56"/></argument_list></call></expr></argument>, <argument><expr><operator pos:line="14" pos:column="58">&amp;<pos:position pos:line="14" pos:column="63"/></operator><name pos:line="14" pos:column="59">ai_hints<pos:position pos:line="14" pos:column="67"/></name></expr></argument>, <argument><expr><operator pos:line="14" pos:column="69">&amp;<pos:position pos:line="14" pos:column="74"/></operator><name pos:line="14" pos:column="70">ai_list<pos:position pos:line="14" pos:column="77"/></name></expr></argument>)<pos:position pos:line="14" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="79"/></expr_stmt>
  <if pos:line="15" pos:column="3">if <condition pos:line="15" pos:column="6">(<expr><name pos:line="15" pos:column="7">ai_return<pos:position pos:line="15" pos:column="16"/></name> <operator pos:line="15" pos:column="17">!=<pos:position pos:line="15" pos:column="19"/></operator> <literal type="number" pos:line="15" pos:column="20">0<pos:position pos:line="15" pos:column="21"/></literal></expr>)<pos:position pos:line="15" pos:column="22"/></condition><then pos:line="15" pos:column="22"> <block pos:line="15" pos:column="23">{
    <expr_stmt><expr><call><name pos:line="16" pos:column="5">ERROR<pos:position pos:line="16" pos:column="10"/></name><argument_list pos:line="16" pos:column="10">(<argument><expr><literal type="string" pos:line="16" pos:column="11">"olsrd plugin: getaddrinfo (%s, %s) failed: %s"<pos:position pos:line="16" pos:column="58"/></literal></expr></argument>, <argument><expr><call><name pos:line="16" pos:column="60">olsrd_get_node<pos:position pos:line="16" pos:column="74"/></name><argument_list pos:line="16" pos:column="74">()<pos:position pos:line="16" pos:column="76"/></argument_list></call></expr></argument>,
          <argument><expr><call><name pos:line="17" pos:column="11">olsrd_get_service<pos:position pos:line="17" pos:column="28"/></name><argument_list pos:line="17" pos:column="28">()<pos:position pos:line="17" pos:column="30"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="17" pos:column="32">gai_strerror<pos:position pos:line="17" pos:column="44"/></name><argument_list pos:line="17" pos:column="44">(<argument><expr><name pos:line="17" pos:column="45">ai_return<pos:position pos:line="17" pos:column="54"/></name></expr></argument>)<pos:position pos:line="17" pos:column="55"/></argument_list></call></expr></argument>)<pos:position pos:line="17" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="57"/></expr_stmt>
    <return pos:line="18" pos:column="5">return <expr><operator pos:line="18" pos:column="12">(<pos:position pos:line="18" pos:column="13"/></operator><name pos:line="18" pos:column="13">NULL<pos:position pos:line="18" pos:column="17"/></name><operator pos:line="18" pos:column="17">)<pos:position pos:line="18" pos:column="18"/></operator></expr>;<pos:position pos:line="18" pos:column="19"/></return>
  }<pos:position pos:line="19" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="21" pos:column="3">fh<pos:position pos:line="21" pos:column="5"/></name> <operator pos:line="21" pos:column="6">=<pos:position pos:line="21" pos:column="7"/></operator> <name pos:line="21" pos:column="8">NULL<pos:position pos:line="21" pos:column="12"/></name></expr>;<pos:position pos:line="21" pos:column="13"/></expr_stmt>
  <for pos:line="22" pos:column="3">for <control pos:line="22" pos:column="7">(<init><decl><type><name><name pos:line="22" pos:column="8">struct<pos:position pos:line="22" pos:column="14"/></name> <name pos:line="22" pos:column="15">addrinfo<pos:position pos:line="22" pos:column="23"/></name></name> <modifier pos:line="22" pos:column="24">*<pos:position pos:line="22" pos:column="25"/></modifier><name pos:line="22" pos:column="25">ai_ptr<pos:position pos:line="22" pos:column="31"/></name></type> <init pos:line="22" pos:column="32">= <expr><name pos:line="22" pos:column="34">ai_list<pos:position pos:line="22" pos:column="41"/></name></expr></init></decl>;<pos:position pos:line="22" pos:column="42"/></init> <condition><expr><name pos:line="22" pos:column="43">ai_ptr<pos:position pos:line="22" pos:column="49"/></name> <operator pos:line="22" pos:column="50">!=<pos:position pos:line="22" pos:column="52"/></operator> <name pos:line="22" pos:column="53">NULL<pos:position pos:line="22" pos:column="57"/></name></expr>;<pos:position pos:line="22" pos:column="58"/></condition>
       <incr><expr><name pos:line="23" pos:column="8">ai_ptr<pos:position pos:line="23" pos:column="14"/></name> <operator pos:line="23" pos:column="15">=<pos:position pos:line="23" pos:column="16"/></operator> <name><name pos:line="23" pos:column="17">ai_ptr<pos:position pos:line="23" pos:column="23"/></name><operator pos:line="23" pos:column="23">-&gt;<pos:position pos:line="23" pos:column="28"/></operator><name pos:line="23" pos:column="25">ai_next<pos:position pos:line="23" pos:column="32"/></name></name></expr></incr>)<pos:position pos:line="23" pos:column="33"/></control> <block pos:line="23" pos:column="34">{
    <decl_stmt><decl><type><name pos:line="24" pos:column="5">int<pos:position pos:line="24" pos:column="8"/></name></type> <name pos:line="24" pos:column="9">fd<pos:position pos:line="24" pos:column="11"/></name></decl>;<pos:position pos:line="24" pos:column="12"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="25" pos:column="5">int<pos:position pos:line="25" pos:column="8"/></name></type> <name pos:line="25" pos:column="9">status<pos:position pos:line="25" pos:column="15"/></name></decl>;<pos:position pos:line="25" pos:column="16"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="26" pos:column="5">char<pos:position pos:line="26" pos:column="9"/></name></type> <name><name pos:line="26" pos:column="10">errbuf<pos:position pos:line="26" pos:column="16"/></name><index pos:line="26" pos:column="16">[<expr><literal type="number" pos:line="26" pos:column="17">1024<pos:position pos:line="26" pos:column="21"/></literal></expr>]<pos:position pos:line="26" pos:column="22"/></index></name></decl>;<pos:position pos:line="26" pos:column="23"/></decl_stmt>

    <expr_stmt><expr><name pos:line="28" pos:column="5">fd<pos:position pos:line="28" pos:column="7"/></name> <operator pos:line="28" pos:column="8">=<pos:position pos:line="28" pos:column="9"/></operator> <call><name pos:line="28" pos:column="10">socket<pos:position pos:line="28" pos:column="16"/></name><argument_list pos:line="28" pos:column="16">(<argument><expr><name><name pos:line="28" pos:column="17">ai_ptr<pos:position pos:line="28" pos:column="23"/></name><operator pos:line="28" pos:column="23">-&gt;<pos:position pos:line="28" pos:column="28"/></operator><name pos:line="28" pos:column="25">ai_family<pos:position pos:line="28" pos:column="34"/></name></name></expr></argument>, <argument><expr><name><name pos:line="28" pos:column="36">ai_ptr<pos:position pos:line="28" pos:column="42"/></name><operator pos:line="28" pos:column="42">-&gt;<pos:position pos:line="28" pos:column="47"/></operator><name pos:line="28" pos:column="44">ai_socktype<pos:position pos:line="28" pos:column="55"/></name></name></expr></argument>, <argument><expr><name><name pos:line="28" pos:column="57">ai_ptr<pos:position pos:line="28" pos:column="63"/></name><operator pos:line="28" pos:column="63">-&gt;<pos:position pos:line="28" pos:column="68"/></operator><name pos:line="28" pos:column="65">ai_protocol<pos:position pos:line="28" pos:column="76"/></name></name></expr></argument>)<pos:position pos:line="28" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="78"/></expr_stmt>
    <if pos:line="29" pos:column="5">if <condition pos:line="29" pos:column="8">(<expr><name pos:line="29" pos:column="9">fd<pos:position pos:line="29" pos:column="11"/></name> <operator pos:line="29" pos:column="12">&lt;<pos:position pos:line="29" pos:column="16"/></operator> <literal type="number" pos:line="29" pos:column="14">0<pos:position pos:line="29" pos:column="15"/></literal></expr>)<pos:position pos:line="29" pos:column="16"/></condition><then pos:line="29" pos:column="16"> <block pos:line="29" pos:column="17">{
      <expr_stmt><expr><call><name pos:line="30" pos:column="7">ERROR<pos:position pos:line="30" pos:column="12"/></name><argument_list pos:line="30" pos:column="12">(<argument><expr><literal type="string" pos:line="30" pos:column="13">"olsrd plugin: socket failed: %s"<pos:position pos:line="30" pos:column="46"/></literal></expr></argument>,
            <argument><expr><call><name pos:line="31" pos:column="13">sstrerror<pos:position pos:line="31" pos:column="22"/></name><argument_list pos:line="31" pos:column="22">(<argument><expr><name pos:line="31" pos:column="23">errno<pos:position pos:line="31" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="30">errbuf<pos:position pos:line="31" pos:column="36"/></name></expr></argument>, <argument><expr><sizeof pos:line="31" pos:column="38">sizeof<argument_list pos:line="31" pos:column="44">(<argument><expr><name pos:line="31" pos:column="45">errbuf<pos:position pos:line="31" pos:column="51"/></name></expr></argument>)<pos:position pos:line="31" pos:column="52"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="31" pos:column="53"/></argument_list></call></expr></argument>)<pos:position pos:line="31" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="55"/></expr_stmt>
      <continue pos:line="32" pos:column="7">continue;<pos:position pos:line="32" pos:column="16"/></continue>
    }<pos:position pos:line="33" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="35" pos:column="5">status<pos:position pos:line="35" pos:column="11"/></name> <operator pos:line="35" pos:column="12">=<pos:position pos:line="35" pos:column="13"/></operator> <call><name pos:line="35" pos:column="14">connect<pos:position pos:line="35" pos:column="21"/></name><argument_list pos:line="35" pos:column="21">(<argument><expr><name pos:line="35" pos:column="22">fd<pos:position pos:line="35" pos:column="24"/></name></expr></argument>, <argument><expr><name><name pos:line="35" pos:column="26">ai_ptr<pos:position pos:line="35" pos:column="32"/></name><operator pos:line="35" pos:column="32">-&gt;<pos:position pos:line="35" pos:column="37"/></operator><name pos:line="35" pos:column="34">ai_addr<pos:position pos:line="35" pos:column="41"/></name></name></expr></argument>, <argument><expr><name><name pos:line="35" pos:column="43">ai_ptr<pos:position pos:line="35" pos:column="49"/></name><operator pos:line="35" pos:column="49">-&gt;<pos:position pos:line="35" pos:column="54"/></operator><name pos:line="35" pos:column="51">ai_addrlen<pos:position pos:line="35" pos:column="61"/></name></name></expr></argument>)<pos:position pos:line="35" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="63"/></expr_stmt>
    <if pos:line="36" pos:column="5">if <condition pos:line="36" pos:column="8">(<expr><name pos:line="36" pos:column="9">status<pos:position pos:line="36" pos:column="15"/></name> <operator pos:line="36" pos:column="16">!=<pos:position pos:line="36" pos:column="18"/></operator> <literal type="number" pos:line="36" pos:column="19">0<pos:position pos:line="36" pos:column="20"/></literal></expr>)<pos:position pos:line="36" pos:column="21"/></condition><then pos:line="36" pos:column="21"> <block pos:line="36" pos:column="22">{
      <expr_stmt><expr><call><name pos:line="37" pos:column="7">ERROR<pos:position pos:line="37" pos:column="12"/></name><argument_list pos:line="37" pos:column="12">(<argument><expr><literal type="string" pos:line="37" pos:column="13">"olsrd plugin: connect failed: %s"<pos:position pos:line="37" pos:column="47"/></literal></expr></argument>,
            <argument><expr><call><name pos:line="38" pos:column="13">sstrerror<pos:position pos:line="38" pos:column="22"/></name><argument_list pos:line="38" pos:column="22">(<argument><expr><name pos:line="38" pos:column="23">errno<pos:position pos:line="38" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="30">errbuf<pos:position pos:line="38" pos:column="36"/></name></expr></argument>, <argument><expr><sizeof pos:line="38" pos:column="38">sizeof<argument_list pos:line="38" pos:column="44">(<argument><expr><name pos:line="38" pos:column="45">errbuf<pos:position pos:line="38" pos:column="51"/></name></expr></argument>)<pos:position pos:line="38" pos:column="52"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="38" pos:column="53"/></argument_list></call></expr></argument>)<pos:position pos:line="38" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="55"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="39" pos:column="7">close<pos:position pos:line="39" pos:column="12"/></name><argument_list pos:line="39" pos:column="12">(<argument><expr><name pos:line="39" pos:column="13">fd<pos:position pos:line="39" pos:column="15"/></name></expr></argument>)<pos:position pos:line="39" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="17"/></expr_stmt>
      <continue pos:line="40" pos:column="7">continue;<pos:position pos:line="40" pos:column="16"/></continue>
    }<pos:position pos:line="41" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="43" pos:column="5">fh<pos:position pos:line="43" pos:column="7"/></name> <operator pos:line="43" pos:column="8">=<pos:position pos:line="43" pos:column="9"/></operator> <call><name pos:line="43" pos:column="10">fdopen<pos:position pos:line="43" pos:column="16"/></name><argument_list pos:line="43" pos:column="16">(<argument><expr><name pos:line="43" pos:column="17">fd<pos:position pos:line="43" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="43" pos:column="21">"r+"<pos:position pos:line="43" pos:column="25"/></literal></expr></argument>)<pos:position pos:line="43" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="27"/></expr_stmt>
    <if pos:line="44" pos:column="5">if <condition pos:line="44" pos:column="8">(<expr><name pos:line="44" pos:column="9">fh<pos:position pos:line="44" pos:column="11"/></name> <operator pos:line="44" pos:column="12">==<pos:position pos:line="44" pos:column="14"/></operator> <name pos:line="44" pos:column="15">NULL<pos:position pos:line="44" pos:column="19"/></name></expr>)<pos:position pos:line="44" pos:column="20"/></condition><then pos:line="44" pos:column="20"> <block pos:line="44" pos:column="21">{
      <expr_stmt><expr><call><name pos:line="45" pos:column="7">ERROR<pos:position pos:line="45" pos:column="12"/></name><argument_list pos:line="45" pos:column="12">(<argument><expr><literal type="string" pos:line="45" pos:column="13">"olsrd plugin: fdopen failed."<pos:position pos:line="45" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="45" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="45"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="46" pos:column="7">close<pos:position pos:line="46" pos:column="12"/></name><argument_list pos:line="46" pos:column="12">(<argument><expr><name pos:line="46" pos:column="13">fd<pos:position pos:line="46" pos:column="15"/></name></expr></argument>)<pos:position pos:line="46" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="17"/></expr_stmt>
      <continue pos:line="47" pos:column="7">continue;<pos:position pos:line="47" pos:column="16"/></continue>
    }<pos:position pos:line="48" pos:column="6"/></block></then></if>

    <break pos:line="50" pos:column="5">break;<pos:position pos:line="50" pos:column="11"/></break>
  }<pos:position pos:line="51" pos:column="4"/></block></for> <comment type="block" pos:line="51" pos:column="5">/* for (ai_ptr) */</comment>

  <expr_stmt><expr><call><name pos:line="53" pos:column="3">freeaddrinfo<pos:position pos:line="53" pos:column="15"/></name><argument_list pos:line="53" pos:column="15">(<argument><expr><name pos:line="53" pos:column="16">ai_list<pos:position pos:line="53" pos:column="23"/></name></expr></argument>)<pos:position pos:line="53" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="25"/></expr_stmt>

  <return pos:line="55" pos:column="3">return <expr><operator pos:line="55" pos:column="10">(<pos:position pos:line="55" pos:column="11"/></operator><name pos:line="55" pos:column="11">fh<pos:position pos:line="55" pos:column="13"/></name><operator pos:line="55" pos:column="13">)<pos:position pos:line="55" pos:column="14"/></operator></expr>;<pos:position pos:line="55" pos:column="15"/></return>
}<pos:position pos:line="56" pos:column="2"/></block></function></unit>
