<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_565_collectd-5.5.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">char<pos:position pos:line="1" pos:column="12"/></name> <modifier pos:line="1" pos:column="13">*<pos:position pos:line="1" pos:column="14"/></modifier></type><name pos:line="1" pos:column="14">build_json_str_list<pos:position pos:line="1" pos:column="33"/></name><parameter_list pos:line="1" pos:column="33">(<parameter><decl><type><specifier pos:line="1" pos:column="34">const<pos:position pos:line="1" pos:column="39"/></specifier> <name pos:line="1" pos:column="40">char<pos:position pos:line="1" pos:column="44"/></name> <modifier pos:line="1" pos:column="45">*<pos:position pos:line="1" pos:column="46"/></modifier></type><name pos:line="1" pos:column="46">tag<pos:position pos:line="1" pos:column="49"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="51">struct<pos:position pos:line="1" pos:column="57"/></name> <name pos:line="1" pos:column="58">str_list<pos:position pos:line="1" pos:column="66"/></name></name> <specifier pos:line="1" pos:column="67">const<pos:position pos:line="1" pos:column="72"/></specifier> <modifier pos:line="1" pos:column="73">*<pos:position pos:line="1" pos:column="74"/></modifier></type><name pos:line="1" pos:column="74">list<pos:position pos:line="1" pos:column="78"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="79"/></parameter_list> <comment type="block" pos:line="1" pos:column="80">/* {{{ */</comment>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">res<pos:position pos:line="3" pos:column="16"/></name></decl>;<pos:position pos:line="3" pos:column="17"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">char<pos:position pos:line="4" pos:column="13"/></name> <modifier pos:line="4" pos:column="14">*<pos:position pos:line="4" pos:column="15"/></modifier></type><name pos:line="4" pos:column="15">ret_str<pos:position pos:line="4" pos:column="22"/></name></decl>;<pos:position pos:line="4" pos:column="23"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">char<pos:position pos:line="5" pos:column="13"/></name> <modifier pos:line="5" pos:column="14">*<pos:position pos:line="5" pos:column="15"/></modifier></type><name pos:line="5" pos:column="15">temp_str<pos:position pos:line="5" pos:column="23"/></name></decl>;<pos:position pos:line="5" pos:column="24"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">int<pos:position pos:line="6" pos:column="12"/></name></type> <name pos:line="6" pos:column="13">i<pos:position pos:line="6" pos:column="14"/></name></decl>;<pos:position pos:line="6" pos:column="15"/></decl_stmt>
	<if pos:line="7" pos:column="9">if <condition pos:line="7" pos:column="12">(<expr><name><name pos:line="7" pos:column="13">list<pos:position pos:line="7" pos:column="17"/></name><operator pos:line="7" pos:column="17">-&gt;<pos:position pos:line="7" pos:column="22"/></operator><name pos:line="7" pos:column="19">nb_strs<pos:position pos:line="7" pos:column="26"/></name></name> <operator pos:line="7" pos:column="27">==<pos:position pos:line="7" pos:column="29"/></operator> <literal type="number" pos:line="7" pos:column="30">0<pos:position pos:line="7" pos:column="31"/></literal></expr>)<pos:position pos:line="7" pos:column="32"/></condition><then pos:line="7" pos:column="32"> <block pos:line="7" pos:column="33">{
		<expr_stmt><expr><name pos:line="8" pos:column="17">ret_str<pos:position pos:line="8" pos:column="24"/></name> <operator pos:line="8" pos:column="25">=<pos:position pos:line="8" pos:column="26"/></operator> <call><name pos:line="8" pos:column="27">malloc<pos:position pos:line="8" pos:column="33"/></name><argument_list pos:line="8" pos:column="33">(<argument><expr><sizeof pos:line="8" pos:column="34">sizeof<argument_list pos:line="8" pos:column="40">(<argument><expr><name pos:line="8" pos:column="41">char<pos:position pos:line="8" pos:column="45"/></name></expr></argument>)<pos:position pos:line="8" pos:column="46"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="8" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="48"/></expr_stmt>
		<if pos:line="9" pos:column="17">if <condition pos:line="9" pos:column="20">(<expr><name pos:line="9" pos:column="21">ret_str<pos:position pos:line="9" pos:column="28"/></name> <operator pos:line="9" pos:column="29">==<pos:position pos:line="9" pos:column="31"/></operator> <name pos:line="9" pos:column="32">NULL<pos:position pos:line="9" pos:column="36"/></name></expr>)<pos:position pos:line="9" pos:column="37"/></condition><then pos:line="9" pos:column="37"> <block pos:line="9" pos:column="38">{
			<expr_stmt><expr><call><name pos:line="10" pos:column="25">ERROR<pos:position pos:line="10" pos:column="30"/></name><argument_list pos:line="10" pos:column="30">(<argument><expr><literal type="string" pos:line="10" pos:column="31">"write_sensu plugin: Unable to alloc memory"<pos:position pos:line="10" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="77"/></expr_stmt>
			<return pos:line="11" pos:column="25">return <expr><name pos:line="11" pos:column="32">NULL<pos:position pos:line="11" pos:column="36"/></name></expr>;<pos:position pos:line="11" pos:column="37"/></return>
		}<pos:position pos:line="12" pos:column="18"/></block></then></if>
		<expr_stmt><expr><name><name pos:line="13" pos:column="17">ret_str<pos:position pos:line="13" pos:column="24"/></name><index pos:line="13" pos:column="24">[<expr><literal type="number" pos:line="13" pos:column="25">0<pos:position pos:line="13" pos:column="26"/></literal></expr>]<pos:position pos:line="13" pos:column="27"/></index></name> <operator pos:line="13" pos:column="28">=<pos:position pos:line="13" pos:column="29"/></operator> <literal type="char" pos:line="13" pos:column="30">'\0'<pos:position pos:line="13" pos:column="34"/></literal></expr>;<pos:position pos:line="13" pos:column="35"/></expr_stmt>
	}<pos:position pos:line="14" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="16" pos:column="9">res<pos:position pos:line="16" pos:column="12"/></name> <operator pos:line="16" pos:column="13">=<pos:position pos:line="16" pos:column="14"/></operator> <call><name pos:line="16" pos:column="15">asprintf<pos:position pos:line="16" pos:column="23"/></name><argument_list pos:line="16" pos:column="23">(<argument><expr><operator pos:line="16" pos:column="24">&amp;<pos:position pos:line="16" pos:column="29"/></operator><name pos:line="16" pos:column="25">temp_str<pos:position pos:line="16" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="16" pos:column="35">"\"%s\": [\"%s\""<pos:position pos:line="16" pos:column="52"/></literal></expr></argument>, <argument><expr><name pos:line="16" pos:column="54">tag<pos:position pos:line="16" pos:column="57"/></name></expr></argument>, <argument><expr><name><name pos:line="16" pos:column="59">list<pos:position pos:line="16" pos:column="63"/></name><operator pos:line="16" pos:column="63">-&gt;<pos:position pos:line="16" pos:column="68"/></operator><name pos:line="16" pos:column="65">strs<pos:position pos:line="16" pos:column="69"/></name><index pos:line="16" pos:column="69">[<expr><literal type="number" pos:line="16" pos:column="70">0<pos:position pos:line="16" pos:column="71"/></literal></expr>]<pos:position pos:line="16" pos:column="72"/></index></name></expr></argument>)<pos:position pos:line="16" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="74"/></expr_stmt>
	<if pos:line="17" pos:column="9">if <condition pos:line="17" pos:column="12">(<expr><name pos:line="17" pos:column="13">res<pos:position pos:line="17" pos:column="16"/></name> <operator pos:line="17" pos:column="17">==<pos:position pos:line="17" pos:column="19"/></operator> <operator pos:line="17" pos:column="20">-<pos:position pos:line="17" pos:column="21"/></operator><literal type="number" pos:line="17" pos:column="21">1<pos:position pos:line="17" pos:column="22"/></literal></expr>)<pos:position pos:line="17" pos:column="23"/></condition><then pos:line="17" pos:column="23"> <block pos:line="17" pos:column="24">{
		<expr_stmt><expr><call><name pos:line="18" pos:column="17">ERROR<pos:position pos:line="18" pos:column="22"/></name><argument_list pos:line="18" pos:column="22">(<argument><expr><literal type="string" pos:line="18" pos:column="23">"write_sensu plugin: Unable to alloc memory"<pos:position pos:line="18" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="69"/></expr_stmt>
		<return pos:line="19" pos:column="17">return <expr><name pos:line="19" pos:column="24">NULL<pos:position pos:line="19" pos:column="28"/></name></expr>;<pos:position pos:line="19" pos:column="29"/></return>
	}<pos:position pos:line="20" pos:column="10"/></block></then></if>
	<for pos:line="21" pos:column="9">for <control pos:line="21" pos:column="13">(<init><expr><name pos:line="21" pos:column="14">i<pos:position pos:line="21" pos:column="15"/></name><operator pos:line="21" pos:column="15">=<pos:position pos:line="21" pos:column="16"/></operator><literal type="number" pos:line="21" pos:column="16">1<pos:position pos:line="21" pos:column="17"/></literal></expr>;<pos:position pos:line="21" pos:column="18"/></init> <condition><expr><name pos:line="21" pos:column="19">i<pos:position pos:line="21" pos:column="20"/></name><operator pos:line="21" pos:column="20">&lt;<pos:position pos:line="21" pos:column="24"/></operator><name><name pos:line="21" pos:column="21">list<pos:position pos:line="21" pos:column="25"/></name><operator pos:line="21" pos:column="25">-&gt;<pos:position pos:line="21" pos:column="30"/></operator><name pos:line="21" pos:column="27">nb_strs<pos:position pos:line="21" pos:column="34"/></name></name></expr>;<pos:position pos:line="21" pos:column="35"/></condition> <incr><expr><name pos:line="21" pos:column="36">i<pos:position pos:line="21" pos:column="37"/></name><operator pos:line="21" pos:column="37">++<pos:position pos:line="21" pos:column="39"/></operator></expr></incr>)<pos:position pos:line="21" pos:column="40"/></control> <block pos:line="21" pos:column="41">{
		<expr_stmt><expr><name pos:line="22" pos:column="17">res<pos:position pos:line="22" pos:column="20"/></name> <operator pos:line="22" pos:column="21">=<pos:position pos:line="22" pos:column="22"/></operator> <call><name pos:line="22" pos:column="23">asprintf<pos:position pos:line="22" pos:column="31"/></name><argument_list pos:line="22" pos:column="31">(<argument><expr><operator pos:line="22" pos:column="32">&amp;<pos:position pos:line="22" pos:column="37"/></operator><name pos:line="22" pos:column="33">ret_str<pos:position pos:line="22" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="22" pos:column="42">"%s, \"%s\""<pos:position pos:line="22" pos:column="54"/></literal></expr></argument>, <argument><expr><name pos:line="22" pos:column="56">temp_str<pos:position pos:line="22" pos:column="64"/></name></expr></argument>, <argument><expr><name><name pos:line="22" pos:column="66">list<pos:position pos:line="22" pos:column="70"/></name><operator pos:line="22" pos:column="70">-&gt;<pos:position pos:line="22" pos:column="75"/></operator><name pos:line="22" pos:column="72">strs<pos:position pos:line="22" pos:column="76"/></name><index pos:line="22" pos:column="76">[<expr><name pos:line="22" pos:column="77">i<pos:position pos:line="22" pos:column="78"/></name></expr>]<pos:position pos:line="22" pos:column="79"/></index></name></expr></argument>)<pos:position pos:line="22" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="81"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="23" pos:column="17">free<pos:position pos:line="23" pos:column="21"/></name><argument_list pos:line="23" pos:column="21">(<argument><expr><name pos:line="23" pos:column="22">temp_str<pos:position pos:line="23" pos:column="30"/></name></expr></argument>)<pos:position pos:line="23" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="32"/></expr_stmt>
		<if pos:line="24" pos:column="17">if <condition pos:line="24" pos:column="20">(<expr><name pos:line="24" pos:column="21">res<pos:position pos:line="24" pos:column="24"/></name> <operator pos:line="24" pos:column="25">==<pos:position pos:line="24" pos:column="27"/></operator> <operator pos:line="24" pos:column="28">-<pos:position pos:line="24" pos:column="29"/></operator><literal type="number" pos:line="24" pos:column="29">1<pos:position pos:line="24" pos:column="30"/></literal></expr>)<pos:position pos:line="24" pos:column="31"/></condition><then pos:line="24" pos:column="31"> <block pos:line="24" pos:column="32">{
			<expr_stmt><expr><call><name pos:line="25" pos:column="25">ERROR<pos:position pos:line="25" pos:column="30"/></name><argument_list pos:line="25" pos:column="30">(<argument><expr><literal type="string" pos:line="25" pos:column="31">"write_sensu plugin: Unable to alloc memory"<pos:position pos:line="25" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="77"/></expr_stmt>
			<return pos:line="26" pos:column="25">return <expr><name pos:line="26" pos:column="32">NULL<pos:position pos:line="26" pos:column="36"/></name></expr>;<pos:position pos:line="26" pos:column="37"/></return>
		}<pos:position pos:line="27" pos:column="18"/></block></then></if>
		<expr_stmt><expr><name pos:line="28" pos:column="17">temp_str<pos:position pos:line="28" pos:column="25"/></name> <operator pos:line="28" pos:column="26">=<pos:position pos:line="28" pos:column="27"/></operator> <name pos:line="28" pos:column="28">ret_str<pos:position pos:line="28" pos:column="35"/></name></expr>;<pos:position pos:line="28" pos:column="36"/></expr_stmt>
	}<pos:position pos:line="29" pos:column="10"/></block></for>
	<expr_stmt><expr><name pos:line="30" pos:column="9">res<pos:position pos:line="30" pos:column="12"/></name> <operator pos:line="30" pos:column="13">=<pos:position pos:line="30" pos:column="14"/></operator> <call><name pos:line="30" pos:column="15">asprintf<pos:position pos:line="30" pos:column="23"/></name><argument_list pos:line="30" pos:column="23">(<argument><expr><operator pos:line="30" pos:column="24">&amp;<pos:position pos:line="30" pos:column="29"/></operator><name pos:line="30" pos:column="25">ret_str<pos:position pos:line="30" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="30" pos:column="34">"%s]"<pos:position pos:line="30" pos:column="39"/></literal></expr></argument>, <argument><expr><name pos:line="30" pos:column="41">temp_str<pos:position pos:line="30" pos:column="49"/></name></expr></argument>)<pos:position pos:line="30" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="51"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="31" pos:column="9">free<pos:position pos:line="31" pos:column="13"/></name><argument_list pos:line="31" pos:column="13">(<argument><expr><name pos:line="31" pos:column="14">temp_str<pos:position pos:line="31" pos:column="22"/></name></expr></argument>)<pos:position pos:line="31" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="24"/></expr_stmt>
	<if pos:line="32" pos:column="9">if <condition pos:line="32" pos:column="12">(<expr><name pos:line="32" pos:column="13">res<pos:position pos:line="32" pos:column="16"/></name> <operator pos:line="32" pos:column="17">==<pos:position pos:line="32" pos:column="19"/></operator> <operator pos:line="32" pos:column="20">-<pos:position pos:line="32" pos:column="21"/></operator><literal type="number" pos:line="32" pos:column="21">1<pos:position pos:line="32" pos:column="22"/></literal></expr>)<pos:position pos:line="32" pos:column="23"/></condition><then pos:line="32" pos:column="23"> <block pos:line="32" pos:column="24">{
		<expr_stmt><expr><call><name pos:line="33" pos:column="17">ERROR<pos:position pos:line="33" pos:column="22"/></name><argument_list pos:line="33" pos:column="22">(<argument><expr><literal type="string" pos:line="33" pos:column="23">"write_sensu plugin: Unable to alloc memory"<pos:position pos:line="33" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="69"/></expr_stmt>
		<return pos:line="34" pos:column="17">return <expr><name pos:line="34" pos:column="24">NULL<pos:position pos:line="34" pos:column="28"/></name></expr>;<pos:position pos:line="34" pos:column="29"/></return>
	}<pos:position pos:line="35" pos:column="10"/></block></then></if>

	<return pos:line="37" pos:column="9">return <expr><name pos:line="37" pos:column="16">ret_str<pos:position pos:line="37" pos:column="23"/></name></expr>;<pos:position pos:line="37" pos:column="24"/></return>
}<pos:position pos:line="38" pos:column="2"/></block></function></unit>
