<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_66_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">lv_domain_info<pos:position pos:line="1" pos:column="26"/></name><parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><name pos:line="1" pos:column="27">virDomainPtr<pos:position pos:line="1" pos:column="39"/></name></type> <name pos:line="1" pos:column="40">dom<pos:position pos:line="1" pos:column="43"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="45">struct<pos:position pos:line="1" pos:column="51"/></name> <name pos:line="1" pos:column="52">lv_info<pos:position pos:line="1" pos:column="59"/></name></name> <modifier pos:line="1" pos:column="60">*<pos:position pos:line="1" pos:column="61"/></modifier></type><name pos:line="1" pos:column="61">info<pos:position pos:line="1" pos:column="65"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="66"/></parameter_list> <block pos:line="1" pos:column="67">{
<cpp:ifdef pos:line="2" pos:column="1">#<cpp:directive pos:line="2" pos:column="2">ifdef<pos:position pos:line="2" pos:column="7"/></cpp:directive> <name pos:line="2" pos:column="8">HAVE_CPU_STATS<pos:position pos:line="2" pos:column="22"/></name></cpp:ifdef>
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">virTypedParameterPtr<pos:position pos:line="3" pos:column="23"/></name></type> <name pos:line="3" pos:column="24">param<pos:position pos:line="3" pos:column="29"/></name> <init pos:line="3" pos:column="30">= <expr><name pos:line="3" pos:column="32">NULL<pos:position pos:line="3" pos:column="36"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="37"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">int<pos:position pos:line="4" pos:column="6"/></name></type> <name pos:line="4" pos:column="7">nparams<pos:position pos:line="4" pos:column="14"/></name> <init pos:line="4" pos:column="15">= <expr><literal type="number" pos:line="4" pos:column="17">0<pos:position pos:line="4" pos:column="18"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="19"/></decl_stmt>
<cpp:endif pos:line="5" pos:column="1">#<cpp:directive pos:line="5" pos:column="2">endif<pos:position pos:line="5" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="5" pos:column="8">/* HAVE_CPU_STATS */</comment>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">int<pos:position pos:line="6" pos:column="6"/></name></type> <name pos:line="6" pos:column="7">ret<pos:position pos:line="6" pos:column="10"/></name> <init pos:line="6" pos:column="11">= <expr><call><name pos:line="6" pos:column="13">virDomainGetInfo<pos:position pos:line="6" pos:column="29"/></name><argument_list pos:line="6" pos:column="29">(<argument><expr><name pos:line="6" pos:column="30">dom<pos:position pos:line="6" pos:column="33"/></name></expr></argument>, <argument><expr><operator pos:line="6" pos:column="35">&amp;<pos:position pos:line="6" pos:column="40"/></operator><operator pos:line="6" pos:column="36">(<pos:position pos:line="6" pos:column="37"/></operator><name><name pos:line="6" pos:column="37">info<pos:position pos:line="6" pos:column="41"/></name><operator pos:line="6" pos:column="41">-&gt;<pos:position pos:line="6" pos:column="46"/></operator><name pos:line="6" pos:column="43">di<pos:position pos:line="6" pos:column="45"/></name></name><operator pos:line="6" pos:column="45">)<pos:position pos:line="6" pos:column="46"/></operator></expr></argument>)<pos:position pos:line="6" pos:column="47"/></argument_list></call></expr></init></decl>;<pos:position pos:line="6" pos:column="48"/></decl_stmt>
  <if pos:line="7" pos:column="3">if <condition pos:line="7" pos:column="6">(<expr><name pos:line="7" pos:column="7">ret<pos:position pos:line="7" pos:column="10"/></name> <operator pos:line="7" pos:column="11">!=<pos:position pos:line="7" pos:column="13"/></operator> <literal type="number" pos:line="7" pos:column="14">0<pos:position pos:line="7" pos:column="15"/></literal></expr>)<pos:position pos:line="7" pos:column="16"/></condition><then pos:line="7" pos:column="16"> <block pos:line="7" pos:column="17">{
    <return pos:line="8" pos:column="5">return <expr><name pos:line="8" pos:column="12">ret<pos:position pos:line="8" pos:column="15"/></name></expr>;<pos:position pos:line="8" pos:column="16"/></return>
  }<pos:position pos:line="9" pos:column="4"/></block></then></if>

<cpp:ifdef pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">ifdef<pos:position pos:line="11" pos:column="7"/></cpp:directive> <name pos:line="11" pos:column="8">HAVE_CPU_STATS<pos:position pos:line="11" pos:column="22"/></name></cpp:ifdef>
  <expr_stmt><expr><name pos:line="12" pos:column="3">nparams<pos:position pos:line="12" pos:column="10"/></name> <operator pos:line="12" pos:column="11">=<pos:position pos:line="12" pos:column="12"/></operator> <call><name pos:line="12" pos:column="13">virDomainGetCPUStats<pos:position pos:line="12" pos:column="33"/></name><argument_list pos:line="12" pos:column="33">(<argument><expr><name pos:line="12" pos:column="34">dom<pos:position pos:line="12" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="39">NULL<pos:position pos:line="12" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="12" pos:column="45">0<pos:position pos:line="12" pos:column="46"/></literal></expr></argument>, <argument><expr><operator pos:line="12" pos:column="48">-<pos:position pos:line="12" pos:column="49"/></operator><literal type="number" pos:line="12" pos:column="49">1<pos:position pos:line="12" pos:column="50"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="12" pos:column="52">1<pos:position pos:line="12" pos:column="53"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="12" pos:column="55">0<pos:position pos:line="12" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="58"/></expr_stmt>
  <if pos:line="13" pos:column="3">if <condition pos:line="13" pos:column="6">(<expr><name pos:line="13" pos:column="7">nparams<pos:position pos:line="13" pos:column="14"/></name> <operator pos:line="13" pos:column="15">&lt;<pos:position pos:line="13" pos:column="19"/></operator> <literal type="number" pos:line="13" pos:column="17">0<pos:position pos:line="13" pos:column="18"/></literal></expr>)<pos:position pos:line="13" pos:column="19"/></condition><then pos:line="13" pos:column="19"> <block pos:line="13" pos:column="20">{
    <expr_stmt><expr><call><name pos:line="14" pos:column="5">VIRT_ERROR<pos:position pos:line="14" pos:column="15"/></name><argument_list pos:line="14" pos:column="15">(<argument><expr><name pos:line="14" pos:column="16">conn<pos:position pos:line="14" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="14" pos:column="22">"getting the CPU params count"<pos:position pos:line="14" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="54"/></expr_stmt>
    <return pos:line="15" pos:column="5">return <expr><operator pos:line="15" pos:column="12">-<pos:position pos:line="15" pos:column="13"/></operator><literal type="number" pos:line="15" pos:column="13">1<pos:position pos:line="15" pos:column="14"/></literal></expr>;<pos:position pos:line="15" pos:column="15"/></return>
  }<pos:position pos:line="16" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="18" pos:column="3">param<pos:position pos:line="18" pos:column="8"/></name> <operator pos:line="18" pos:column="9">=<pos:position pos:line="18" pos:column="10"/></operator> <call><name pos:line="18" pos:column="11">calloc<pos:position pos:line="18" pos:column="17"/></name><argument_list pos:line="18" pos:column="17">(<argument><expr><name pos:line="18" pos:column="18">nparams<pos:position pos:line="18" pos:column="25"/></name></expr></argument>, <argument><expr><sizeof pos:line="18" pos:column="27">sizeof<argument_list pos:line="18" pos:column="33">(<argument><expr><name pos:line="18" pos:column="34">virTypedParameter<pos:position pos:line="18" pos:column="51"/></name></expr></argument>)<pos:position pos:line="18" pos:column="52"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="18" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="54"/></expr_stmt>
  <if pos:line="19" pos:column="3">if <condition pos:line="19" pos:column="6">(<expr><name pos:line="19" pos:column="7">param<pos:position pos:line="19" pos:column="12"/></name> <operator pos:line="19" pos:column="13">==<pos:position pos:line="19" pos:column="15"/></operator> <name pos:line="19" pos:column="16">NULL<pos:position pos:line="19" pos:column="20"/></name></expr>)<pos:position pos:line="19" pos:column="21"/></condition><then pos:line="19" pos:column="21"> <block pos:line="19" pos:column="22">{
    <expr_stmt><expr><call><name pos:line="20" pos:column="5">ERROR<pos:position pos:line="20" pos:column="10"/></name><argument_list pos:line="20" pos:column="10">(<argument><expr><literal type="string" pos:line="20" pos:column="11">"virt plugin: alloc(%i) for cpu parameters failed."<pos:position pos:line="20" pos:column="62"/></literal></expr></argument>, <argument><expr><name pos:line="20" pos:column="64">nparams<pos:position pos:line="20" pos:column="71"/></name></expr></argument>)<pos:position pos:line="20" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="73"/></expr_stmt>
    <return pos:line="21" pos:column="5">return <expr><operator pos:line="21" pos:column="12">-<pos:position pos:line="21" pos:column="13"/></operator><literal type="number" pos:line="21" pos:column="13">1<pos:position pos:line="21" pos:column="14"/></literal></expr>;<pos:position pos:line="21" pos:column="15"/></return>
  }<pos:position pos:line="22" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="24" pos:column="3">ret<pos:position pos:line="24" pos:column="6"/></name> <operator pos:line="24" pos:column="7">=<pos:position pos:line="24" pos:column="8"/></operator> <call><name pos:line="24" pos:column="9">virDomainGetCPUStats<pos:position pos:line="24" pos:column="29"/></name><argument_list pos:line="24" pos:column="29">(<argument><expr><name pos:line="24" pos:column="30">dom<pos:position pos:line="24" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="35">param<pos:position pos:line="24" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="42">nparams<pos:position pos:line="24" pos:column="49"/></name></expr></argument>, <argument><expr><operator pos:line="24" pos:column="51">-<pos:position pos:line="24" pos:column="52"/></operator><literal type="number" pos:line="24" pos:column="52">1<pos:position pos:line="24" pos:column="53"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="24" pos:column="55">1<pos:position pos:line="24" pos:column="56"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="24" pos:column="58">0<pos:position pos:line="24" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="61"/></expr_stmt> <comment type="line" pos:line="24" pos:column="62">// total stats.</comment>
  <if pos:line="25" pos:column="3">if <condition pos:line="25" pos:column="6">(<expr><name pos:line="25" pos:column="7">ret<pos:position pos:line="25" pos:column="10"/></name> <operator pos:line="25" pos:column="11">&lt;<pos:position pos:line="25" pos:column="15"/></operator> <literal type="number" pos:line="25" pos:column="13">0<pos:position pos:line="25" pos:column="14"/></literal></expr>)<pos:position pos:line="25" pos:column="15"/></condition><then pos:line="25" pos:column="15"> <block pos:line="25" pos:column="16">{
    <expr_stmt><expr><call><name pos:line="26" pos:column="5">virTypedParamsClear<pos:position pos:line="26" pos:column="24"/></name><argument_list pos:line="26" pos:column="24">(<argument><expr><name pos:line="26" pos:column="25">param<pos:position pos:line="26" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="32">nparams<pos:position pos:line="26" pos:column="39"/></name></expr></argument>)<pos:position pos:line="26" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="41"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="27" pos:column="5">sfree<pos:position pos:line="27" pos:column="10"/></name><argument_list pos:line="27" pos:column="10">(<argument><expr><name pos:line="27" pos:column="11">param<pos:position pos:line="27" pos:column="16"/></name></expr></argument>)<pos:position pos:line="27" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="18"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="28" pos:column="5">VIRT_ERROR<pos:position pos:line="28" pos:column="15"/></name><argument_list pos:line="28" pos:column="15">(<argument><expr><name pos:line="28" pos:column="16">conn<pos:position pos:line="28" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="28" pos:column="22">"getting the disk params values"<pos:position pos:line="28" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="56"/></expr_stmt>
    <return pos:line="29" pos:column="5">return <expr><operator pos:line="29" pos:column="12">-<pos:position pos:line="29" pos:column="13"/></operator><literal type="number" pos:line="29" pos:column="13">1<pos:position pos:line="29" pos:column="14"/></literal></expr>;<pos:position pos:line="29" pos:column="15"/></return>
  }<pos:position pos:line="30" pos:column="4"/></block></then></if>

  <for pos:line="32" pos:column="3">for <control pos:line="32" pos:column="7">(<init><decl><type><name pos:line="32" pos:column="8">int<pos:position pos:line="32" pos:column="11"/></name></type> <name pos:line="32" pos:column="12">i<pos:position pos:line="32" pos:column="13"/></name> <init pos:line="32" pos:column="14">= <expr><literal type="number" pos:line="32" pos:column="16">0<pos:position pos:line="32" pos:column="17"/></literal></expr></init></decl>;<pos:position pos:line="32" pos:column="18"/></init> <condition><expr><name pos:line="32" pos:column="19">i<pos:position pos:line="32" pos:column="20"/></name> <operator pos:line="32" pos:column="21">&lt;<pos:position pos:line="32" pos:column="25"/></operator> <name pos:line="32" pos:column="23">nparams<pos:position pos:line="32" pos:column="30"/></name></expr>;<pos:position pos:line="32" pos:column="31"/></condition> <incr><expr><operator pos:line="32" pos:column="32">++<pos:position pos:line="32" pos:column="34"/></operator><name pos:line="32" pos:column="34">i<pos:position pos:line="32" pos:column="35"/></name></expr></incr>)<pos:position pos:line="32" pos:column="36"/></control> <block pos:line="32" pos:column="37">{
    <if pos:line="33" pos:column="5">if <condition pos:line="33" pos:column="8">(<expr><operator pos:line="33" pos:column="9">!<pos:position pos:line="33" pos:column="10"/></operator><call><name pos:line="33" pos:column="10">strcmp<pos:position pos:line="33" pos:column="16"/></name><argument_list pos:line="33" pos:column="16">(<argument><expr><name><name pos:line="33" pos:column="17">param<pos:position pos:line="33" pos:column="22"/></name><index pos:line="33" pos:column="22">[<expr><name pos:line="33" pos:column="23">i<pos:position pos:line="33" pos:column="24"/></name></expr>]<pos:position pos:line="33" pos:column="25"/></index></name><operator pos:line="33" pos:column="25">.<pos:position pos:line="33" pos:column="26"/></operator><name pos:line="33" pos:column="26">field<pos:position pos:line="33" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="33" pos:column="33">"user_time"<pos:position pos:line="33" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="33" pos:column="46"/></condition><then pos:line="33" pos:column="46">
      <block type="pseudo"><expr_stmt><expr><name><name pos:line="34" pos:column="7">info<pos:position pos:line="34" pos:column="11"/></name><operator pos:line="34" pos:column="11">-&gt;<pos:position pos:line="34" pos:column="16"/></operator><name pos:line="34" pos:column="13">total_user_cpu_time<pos:position pos:line="34" pos:column="32"/></name></name> <operator pos:line="34" pos:column="33">=<pos:position pos:line="34" pos:column="34"/></operator> <name><name pos:line="34" pos:column="35">param<pos:position pos:line="34" pos:column="40"/></name><index pos:line="34" pos:column="40">[<expr><name pos:line="34" pos:column="41">i<pos:position pos:line="34" pos:column="42"/></name></expr>]<pos:position pos:line="34" pos:column="43"/></index></name><operator pos:line="34" pos:column="43">.<pos:position pos:line="34" pos:column="44"/></operator><name><name pos:line="34" pos:column="44">value<pos:position pos:line="34" pos:column="49"/></name><operator pos:line="34" pos:column="49">.<pos:position pos:line="34" pos:column="50"/></operator><name pos:line="34" pos:column="50">ul<pos:position pos:line="34" pos:column="52"/></name></name></expr>;<pos:position pos:line="34" pos:column="53"/></expr_stmt></block></then>
    <elseif pos:line="35" pos:column="5">else <if pos:line="35" pos:column="10">if <condition pos:line="35" pos:column="13">(<expr><operator pos:line="35" pos:column="14">!<pos:position pos:line="35" pos:column="15"/></operator><call><name pos:line="35" pos:column="15">strcmp<pos:position pos:line="35" pos:column="21"/></name><argument_list pos:line="35" pos:column="21">(<argument><expr><name><name pos:line="35" pos:column="22">param<pos:position pos:line="35" pos:column="27"/></name><index pos:line="35" pos:column="27">[<expr><name pos:line="35" pos:column="28">i<pos:position pos:line="35" pos:column="29"/></name></expr>]<pos:position pos:line="35" pos:column="30"/></index></name><operator pos:line="35" pos:column="30">.<pos:position pos:line="35" pos:column="31"/></operator><name pos:line="35" pos:column="31">field<pos:position pos:line="35" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="35" pos:column="38">"system_time"<pos:position pos:line="35" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="35" pos:column="52"/></argument_list></call></expr>)<pos:position pos:line="35" pos:column="53"/></condition><then pos:line="35" pos:column="53">
      <block type="pseudo"><expr_stmt><expr><name><name pos:line="36" pos:column="7">info<pos:position pos:line="36" pos:column="11"/></name><operator pos:line="36" pos:column="11">-&gt;<pos:position pos:line="36" pos:column="16"/></operator><name pos:line="36" pos:column="13">total_syst_cpu_time<pos:position pos:line="36" pos:column="32"/></name></name> <operator pos:line="36" pos:column="33">=<pos:position pos:line="36" pos:column="34"/></operator> <name><name pos:line="36" pos:column="35">param<pos:position pos:line="36" pos:column="40"/></name><index pos:line="36" pos:column="40">[<expr><name pos:line="36" pos:column="41">i<pos:position pos:line="36" pos:column="42"/></name></expr>]<pos:position pos:line="36" pos:column="43"/></index></name><operator pos:line="36" pos:column="43">.<pos:position pos:line="36" pos:column="44"/></operator><name><name pos:line="36" pos:column="44">value<pos:position pos:line="36" pos:column="49"/></name><operator pos:line="36" pos:column="49">.<pos:position pos:line="36" pos:column="50"/></operator><name pos:line="36" pos:column="50">ul<pos:position pos:line="36" pos:column="52"/></name></name></expr>;<pos:position pos:line="36" pos:column="53"/></expr_stmt></block></then></if></elseif></if>
  }<pos:position pos:line="37" pos:column="4"/></block></for>

  <expr_stmt><expr><call><name pos:line="39" pos:column="3">virTypedParamsClear<pos:position pos:line="39" pos:column="22"/></name><argument_list pos:line="39" pos:column="22">(<argument><expr><name pos:line="39" pos:column="23">param<pos:position pos:line="39" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="30">nparams<pos:position pos:line="39" pos:column="37"/></name></expr></argument>)<pos:position pos:line="39" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="39"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="40" pos:column="3">sfree<pos:position pos:line="40" pos:column="8"/></name><argument_list pos:line="40" pos:column="8">(<argument><expr><name pos:line="40" pos:column="9">param<pos:position pos:line="40" pos:column="14"/></name></expr></argument>)<pos:position pos:line="40" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="16"/></expr_stmt>
<cpp:endif pos:line="41" pos:column="1">#<cpp:directive pos:line="41" pos:column="2">endif<pos:position pos:line="41" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="41" pos:column="8">/* HAVE_CPU_STATS */</comment>

  <return pos:line="43" pos:column="3">return <expr><literal type="number" pos:line="43" pos:column="10">0<pos:position pos:line="43" pos:column="11"/></literal></expr>;<pos:position pos:line="43" pos:column="12"/></return>
}<pos:position pos:line="44" pos:column="2"/></block></function></unit>
