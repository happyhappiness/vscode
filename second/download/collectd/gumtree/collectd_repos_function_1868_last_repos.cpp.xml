<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1868_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">parse_keys<pos:position pos:line="1" pos:column="22"/></name><parameter_list pos:line="1" pos:column="22">(<parameter><decl><type><name pos:line="1" pos:column="23">char<pos:position pos:line="1" pos:column="27"/></name> <modifier pos:line="1" pos:column="28">*<pos:position pos:line="1" pos:column="29"/></modifier></type><name pos:line="1" pos:column="29">buffer<pos:position pos:line="1" pos:column="35"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="37">size_t<pos:position pos:line="1" pos:column="43"/></name></type> <name pos:line="1" pos:column="44">buffer_size<pos:position pos:line="1" pos:column="55"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="57">const<pos:position pos:line="1" pos:column="62"/></specifier> <name pos:line="1" pos:column="63">char<pos:position pos:line="1" pos:column="67"/></name> <modifier pos:line="1" pos:column="68">*<pos:position pos:line="1" pos:column="69"/></modifier></type><name pos:line="1" pos:column="69">key_str<pos:position pos:line="1" pos:column="76"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="77"/></parameter_list> <block pos:line="1" pos:column="78">{
  <decl_stmt><decl><type><name pos:line="2" pos:column="3">char<pos:position pos:line="2" pos:column="7"/></name></type> <name><name pos:line="2" pos:column="8">tmp<pos:position pos:line="2" pos:column="11"/></name><index pos:line="2" pos:column="11">[<expr><literal type="number" pos:line="2" pos:column="12">2<pos:position pos:line="2" pos:column="13"/></literal> <operator pos:line="2" pos:column="14">*<pos:position pos:line="2" pos:column="15"/></operator> <name pos:line="2" pos:column="16">buffer_size<pos:position pos:line="2" pos:column="27"/></name></expr>]<pos:position pos:line="2" pos:column="28"/></index></name></decl>;<pos:position pos:line="2" pos:column="29"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">size_t<pos:position pos:line="3" pos:column="9"/></name></type> <name pos:line="3" pos:column="10">tmp_size<pos:position pos:line="3" pos:column="18"/></name> <init pos:line="3" pos:column="19">= <expr><sizeof pos:line="3" pos:column="21">sizeof<argument_list pos:line="3" pos:column="27">(<argument><expr><name pos:line="3" pos:column="28">tmp<pos:position pos:line="3" pos:column="31"/></name></expr></argument>)<pos:position pos:line="3" pos:column="32"/></argument_list></sizeof></expr></init></decl>;<pos:position pos:line="3" pos:column="33"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="4" pos:column="3">const<pos:position pos:line="4" pos:column="8"/></specifier> <name pos:line="4" pos:column="9">char<pos:position pos:line="4" pos:column="13"/></name> <modifier pos:line="4" pos:column="14">*<pos:position pos:line="4" pos:column="15"/></modifier></type><name><name pos:line="4" pos:column="15">cut_suffixes<pos:position pos:line="4" pos:column="27"/></name><index pos:line="4" pos:column="27">[]<pos:position pos:line="4" pos:column="29"/></index></name> <init pos:line="4" pos:column="30">= <expr><block pos:line="4" pos:column="32">{<expr><literal type="string" pos:line="4" pos:column="33">".type"<pos:position pos:line="4" pos:column="40"/></literal></expr>, <expr><literal type="string" pos:line="4" pos:column="42">".avgcount"<pos:position pos:line="4" pos:column="53"/></literal></expr>, <expr><literal type="string" pos:line="4" pos:column="55">".sum"<pos:position pos:line="4" pos:column="61"/></literal></expr>, <expr><literal type="string" pos:line="4" pos:column="63">".avgtime"<pos:position pos:line="4" pos:column="73"/></literal></expr>}<pos:position pos:line="4" pos:column="74"/></block></expr></init></decl>;<pos:position pos:line="4" pos:column="75"/></decl_stmt>

  <if pos:line="6" pos:column="3">if <condition pos:line="6" pos:column="6">(<expr><name pos:line="6" pos:column="7">buffer<pos:position pos:line="6" pos:column="13"/></name> <operator pos:line="6" pos:column="14">==<pos:position pos:line="6" pos:column="16"/></operator> <name pos:line="6" pos:column="17">NULL<pos:position pos:line="6" pos:column="21"/></name> <operator pos:line="6" pos:column="22">||<pos:position pos:line="6" pos:column="24"/></operator> <name pos:line="6" pos:column="25">buffer_size<pos:position pos:line="6" pos:column="36"/></name> <operator pos:line="6" pos:column="37">==<pos:position pos:line="6" pos:column="39"/></operator> <literal type="number" pos:line="6" pos:column="40">0<pos:position pos:line="6" pos:column="41"/></literal> <operator pos:line="6" pos:column="42">||<pos:position pos:line="6" pos:column="44"/></operator> <name pos:line="6" pos:column="45">key_str<pos:position pos:line="6" pos:column="52"/></name> <operator pos:line="6" pos:column="53">==<pos:position pos:line="6" pos:column="55"/></operator> <name pos:line="6" pos:column="56">NULL<pos:position pos:line="6" pos:column="60"/></name> <operator pos:line="6" pos:column="61">||<pos:position pos:line="6" pos:column="63"/></operator>
      <call><name pos:line="7" pos:column="7">strlen<pos:position pos:line="7" pos:column="13"/></name><argument_list pos:line="7" pos:column="13">(<argument><expr><name pos:line="7" pos:column="14">key_str<pos:position pos:line="7" pos:column="21"/></name></expr></argument>)<pos:position pos:line="7" pos:column="22"/></argument_list></call> <operator pos:line="7" pos:column="23">==<pos:position pos:line="7" pos:column="25"/></operator> <literal type="number" pos:line="7" pos:column="26">0<pos:position pos:line="7" pos:column="27"/></literal></expr>)<pos:position pos:line="7" pos:column="28"/></condition><then pos:line="7" pos:column="28">
    <block type="pseudo"><return pos:line="8" pos:column="5">return <expr><name pos:line="8" pos:column="12">EINVAL<pos:position pos:line="8" pos:column="18"/></name></expr>;<pos:position pos:line="8" pos:column="19"/></return></block></then></if>

  <expr_stmt><expr><call><name pos:line="10" pos:column="3">sstrncpy<pos:position pos:line="10" pos:column="11"/></name><argument_list pos:line="10" pos:column="11">(<argument><expr><name pos:line="10" pos:column="12">tmp<pos:position pos:line="10" pos:column="15"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="17">key_str<pos:position pos:line="10" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="26">tmp_size<pos:position pos:line="10" pos:column="34"/></name></expr></argument>)<pos:position pos:line="10" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="36"/></expr_stmt>

  <comment type="block" pos:line="12" pos:column="3">/* Strip suffix if it is ".type" or one of latency metric suffix. */</comment>
  <if pos:line="13" pos:column="3">if <condition pos:line="13" pos:column="6">(<expr><call><name pos:line="13" pos:column="7">count_parts<pos:position pos:line="13" pos:column="18"/></name><argument_list pos:line="13" pos:column="18">(<argument><expr><name pos:line="13" pos:column="19">key_str<pos:position pos:line="13" pos:column="26"/></name></expr></argument>)<pos:position pos:line="13" pos:column="27"/></argument_list></call> <operator pos:line="13" pos:column="28">&gt;<pos:position pos:line="13" pos:column="32"/></operator> <literal type="number" pos:line="13" pos:column="30">2<pos:position pos:line="13" pos:column="31"/></literal></expr>)<pos:position pos:line="13" pos:column="32"/></condition><then pos:line="13" pos:column="32"> <block pos:line="13" pos:column="33">{
    <for pos:line="14" pos:column="5">for <control pos:line="14" pos:column="9">(<init><decl><type><name pos:line="14" pos:column="10">size_t<pos:position pos:line="14" pos:column="16"/></name></type> <name pos:line="14" pos:column="17">i<pos:position pos:line="14" pos:column="18"/></name> <init pos:line="14" pos:column="19">= <expr><literal type="number" pos:line="14" pos:column="21">0<pos:position pos:line="14" pos:column="22"/></literal></expr></init></decl>;<pos:position pos:line="14" pos:column="23"/></init> <condition><expr><name pos:line="14" pos:column="24">i<pos:position pos:line="14" pos:column="25"/></name> <operator pos:line="14" pos:column="26">&lt;<pos:position pos:line="14" pos:column="30"/></operator> <call><name pos:line="14" pos:column="28">STATIC_ARRAY_SIZE<pos:position pos:line="14" pos:column="45"/></name><argument_list pos:line="14" pos:column="45">(<argument><expr><name pos:line="14" pos:column="46">cut_suffixes<pos:position pos:line="14" pos:column="58"/></name></expr></argument>)<pos:position pos:line="14" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="60"/></condition> <incr><expr><name pos:line="14" pos:column="61">i<pos:position pos:line="14" pos:column="62"/></name><operator pos:line="14" pos:column="62">++<pos:position pos:line="14" pos:column="64"/></operator></expr></incr>)<pos:position pos:line="14" pos:column="65"/></control> <block pos:line="14" pos:column="66">{
      <if pos:line="15" pos:column="7">if <condition pos:line="15" pos:column="10">(<expr><call><name pos:line="15" pos:column="11">has_suffix<pos:position pos:line="15" pos:column="21"/></name><argument_list pos:line="15" pos:column="21">(<argument><expr><name pos:line="15" pos:column="22">key_str<pos:position pos:line="15" pos:column="29"/></name></expr></argument>, <argument><expr><name><name pos:line="15" pos:column="31">cut_suffixes<pos:position pos:line="15" pos:column="43"/></name><index pos:line="15" pos:column="43">[<expr><name pos:line="15" pos:column="44">i<pos:position pos:line="15" pos:column="45"/></name></expr>]<pos:position pos:line="15" pos:column="46"/></index></name></expr></argument>)<pos:position pos:line="15" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="15" pos:column="48"/></condition><then pos:line="15" pos:column="48"> <block pos:line="15" pos:column="49">{
        <expr_stmt><expr><call><name pos:line="16" pos:column="9">cut_suffix<pos:position pos:line="16" pos:column="19"/></name><argument_list pos:line="16" pos:column="19">(<argument><expr><name pos:line="16" pos:column="20">tmp<pos:position pos:line="16" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="25">tmp_size<pos:position pos:line="16" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="35">key_str<pos:position pos:line="16" pos:column="42"/></name></expr></argument>, <argument><expr><name><name pos:line="16" pos:column="44">cut_suffixes<pos:position pos:line="16" pos:column="56"/></name><index pos:line="16" pos:column="56">[<expr><name pos:line="16" pos:column="57">i<pos:position pos:line="16" pos:column="58"/></name></expr>]<pos:position pos:line="16" pos:column="59"/></index></name></expr></argument>)<pos:position pos:line="16" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="61"/></expr_stmt>
        <break pos:line="17" pos:column="9">break;<pos:position pos:line="17" pos:column="15"/></break>
      }<pos:position pos:line="18" pos:column="8"/></block></then></if>
    }<pos:position pos:line="19" pos:column="6"/></block></for>
  }<pos:position pos:line="20" pos:column="4"/></block></then></if>

  <return pos:line="22" pos:column="3">return <expr><call><name pos:line="22" pos:column="10">compact_ds_name<pos:position pos:line="22" pos:column="25"/></name><argument_list pos:line="22" pos:column="25">(<argument><expr><name pos:line="22" pos:column="26">buffer<pos:position pos:line="22" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="34">buffer_size<pos:position pos:line="22" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="47">tmp<pos:position pos:line="22" pos:column="50"/></name></expr></argument>)<pos:position pos:line="22" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="52"/></return>
}<pos:position pos:line="23" pos:column="2"/></block></function></unit>
