<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1601_collectd-5.6.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">statsd_init<pos:position pos:line="1" pos:column="23"/></name> <parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><name pos:line="1" pos:column="25">void<pos:position pos:line="1" pos:column="29"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="30"/></parameter_list> <comment type="block" pos:line="1" pos:column="31">/* {{{ */</comment>
<block pos:line="2" pos:column="1">{
  <expr_stmt><expr><call><name pos:line="3" pos:column="3">pthread_mutex_lock<pos:position pos:line="3" pos:column="21"/></name> <argument_list pos:line="3" pos:column="22">(<argument><expr><operator pos:line="3" pos:column="23">&amp;<pos:position pos:line="3" pos:column="28"/></operator><name pos:line="3" pos:column="24">metrics_lock<pos:position pos:line="3" pos:column="36"/></name></expr></argument>)<pos:position pos:line="3" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="3" pos:column="38"/></expr_stmt>
  <if pos:line="4" pos:column="3">if <condition pos:line="4" pos:column="6">(<expr><name pos:line="4" pos:column="7">metrics_tree<pos:position pos:line="4" pos:column="19"/></name> <operator pos:line="4" pos:column="20">==<pos:position pos:line="4" pos:column="22"/></operator> <name pos:line="4" pos:column="23">NULL<pos:position pos:line="4" pos:column="27"/></name></expr>)<pos:position pos:line="4" pos:column="28"/></condition><then pos:line="4" pos:column="28">
    <block type="pseudo"><expr_stmt><expr><name pos:line="5" pos:column="5">metrics_tree<pos:position pos:line="5" pos:column="17"/></name> <operator pos:line="5" pos:column="18">=<pos:position pos:line="5" pos:column="19"/></operator> <call><name pos:line="5" pos:column="20">c_avl_create<pos:position pos:line="5" pos:column="32"/></name> <argument_list pos:line="5" pos:column="33">(<argument><expr><operator pos:line="5" pos:column="34">(<pos:position pos:line="5" pos:column="35"/></operator><call><call><name pos:line="5" pos:column="35">int<pos:position pos:line="5" pos:column="38"/></name> <argument_list pos:line="5" pos:column="39">(<argument><expr><operator pos:line="5" pos:column="40">*<pos:position pos:line="5" pos:column="41"/></operator></expr></argument>)<pos:position pos:line="5" pos:column="42"/></argument_list></call> <argument_list pos:line="5" pos:column="43">(<argument><expr><specifier pos:line="5" pos:column="44">const<pos:position pos:line="5" pos:column="49"/></specifier> <name pos:line="5" pos:column="50">void<pos:position pos:line="5" pos:column="54"/></name> <operator pos:line="5" pos:column="55">*<pos:position pos:line="5" pos:column="56"/></operator></expr></argument>, <argument><expr><specifier pos:line="5" pos:column="58">const<pos:position pos:line="5" pos:column="63"/></specifier> <name pos:line="5" pos:column="64">void<pos:position pos:line="5" pos:column="68"/></name> <operator pos:line="5" pos:column="69">*<pos:position pos:line="5" pos:column="70"/></operator></expr></argument>)<pos:position pos:line="5" pos:column="71"/></argument_list></call><operator pos:line="5" pos:column="71">)<pos:position pos:line="5" pos:column="72"/></operator> <name pos:line="5" pos:column="73">strcmp<pos:position pos:line="5" pos:column="79"/></name></expr></argument>)<pos:position pos:line="5" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="81"/></expr_stmt></block></then></if>

  <if pos:line="7" pos:column="3">if <condition pos:line="7" pos:column="6">(<expr><operator pos:line="7" pos:column="7">!<pos:position pos:line="7" pos:column="8"/></operator><name pos:line="7" pos:column="8">network_thread_running<pos:position pos:line="7" pos:column="30"/></name></expr>)<pos:position pos:line="7" pos:column="31"/></condition><then pos:line="7" pos:column="31">
  <block pos:line="8" pos:column="3">{
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">int<pos:position pos:line="9" pos:column="8"/></name></type> <name pos:line="9" pos:column="9">status<pos:position pos:line="9" pos:column="15"/></name></decl>;<pos:position pos:line="9" pos:column="16"/></decl_stmt>

    <expr_stmt><expr><name pos:line="11" pos:column="5">status<pos:position pos:line="11" pos:column="11"/></name> <operator pos:line="11" pos:column="12">=<pos:position pos:line="11" pos:column="13"/></operator> <call><name pos:line="11" pos:column="14">pthread_create<pos:position pos:line="11" pos:column="28"/></name> <argument_list pos:line="11" pos:column="29">(<argument><expr><operator pos:line="11" pos:column="30">&amp;<pos:position pos:line="11" pos:column="35"/></operator><name pos:line="11" pos:column="31">network_thread<pos:position pos:line="11" pos:column="45"/></name></expr></argument>,
        <comment type="block" pos:line="12" pos:column="9">/* attr = */</comment> <argument><expr><name pos:line="12" pos:column="22">NULL<pos:position pos:line="12" pos:column="26"/></name></expr></argument>,
        <argument><expr><name pos:line="13" pos:column="9">statsd_network_thread<pos:position pos:line="13" pos:column="30"/></name></expr></argument>,
        <comment type="block" pos:line="14" pos:column="9">/* args = */</comment> <argument><expr><name pos:line="14" pos:column="22">NULL<pos:position pos:line="14" pos:column="26"/></name></expr></argument>)<pos:position pos:line="14" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="28"/></expr_stmt>
    <if pos:line="15" pos:column="5">if <condition pos:line="15" pos:column="8">(<expr><name pos:line="15" pos:column="9">status<pos:position pos:line="15" pos:column="15"/></name> <operator pos:line="15" pos:column="16">!=<pos:position pos:line="15" pos:column="18"/></operator> <literal type="number" pos:line="15" pos:column="19">0<pos:position pos:line="15" pos:column="20"/></literal></expr>)<pos:position pos:line="15" pos:column="21"/></condition><then pos:line="15" pos:column="21">
    <block pos:line="16" pos:column="5">{
      <decl_stmt><decl><type><name pos:line="17" pos:column="7">char<pos:position pos:line="17" pos:column="11"/></name></type> <name><name pos:line="17" pos:column="12">errbuf<pos:position pos:line="17" pos:column="18"/></name><index pos:line="17" pos:column="18">[<expr><literal type="number" pos:line="17" pos:column="19">1024<pos:position pos:line="17" pos:column="23"/></literal></expr>]<pos:position pos:line="17" pos:column="24"/></index></name></decl>;<pos:position pos:line="17" pos:column="25"/></decl_stmt>
      <expr_stmt><expr><call><name pos:line="18" pos:column="7">pthread_mutex_unlock<pos:position pos:line="18" pos:column="27"/></name> <argument_list pos:line="18" pos:column="28">(<argument><expr><operator pos:line="18" pos:column="29">&amp;<pos:position pos:line="18" pos:column="34"/></operator><name pos:line="18" pos:column="30">metrics_lock<pos:position pos:line="18" pos:column="42"/></name></expr></argument>)<pos:position pos:line="18" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="44"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="19" pos:column="7">ERROR<pos:position pos:line="19" pos:column="12"/></name> <argument_list pos:line="19" pos:column="13">(<argument><expr><literal type="string" pos:line="19" pos:column="14">"statsd plugin: pthread_create failed: %s"<pos:position pos:line="19" pos:column="56"/></literal></expr></argument>,
          <argument><expr><call><name pos:line="20" pos:column="11">sstrerror<pos:position pos:line="20" pos:column="20"/></name> <argument_list pos:line="20" pos:column="21">(<argument><expr><name pos:line="20" pos:column="22">errno<pos:position pos:line="20" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="29">errbuf<pos:position pos:line="20" pos:column="35"/></name></expr></argument>, <argument><expr><sizeof pos:line="20" pos:column="37">sizeof <argument_list pos:line="20" pos:column="44">(<argument><expr><name pos:line="20" pos:column="45">errbuf<pos:position pos:line="20" pos:column="51"/></name></expr></argument>)<pos:position pos:line="20" pos:column="52"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="20" pos:column="53"/></argument_list></call></expr></argument>)<pos:position pos:line="20" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="55"/></expr_stmt>
      <return pos:line="21" pos:column="7">return <expr><operator pos:line="21" pos:column="14">(<pos:position pos:line="21" pos:column="15"/></operator><name pos:line="21" pos:column="15">status<pos:position pos:line="21" pos:column="21"/></name><operator pos:line="21" pos:column="21">)<pos:position pos:line="21" pos:column="22"/></operator></expr>;<pos:position pos:line="21" pos:column="23"/></return>
    }<pos:position pos:line="22" pos:column="6"/></block></then></if>
  }<pos:position pos:line="23" pos:column="4"/></block></then></if>
  <expr_stmt><expr><name pos:line="24" pos:column="3">network_thread_running<pos:position pos:line="24" pos:column="25"/></name> <operator pos:line="24" pos:column="26">=<pos:position pos:line="24" pos:column="27"/></operator> <literal type="number" pos:line="24" pos:column="28">1<pos:position pos:line="24" pos:column="29"/></literal></expr>;<pos:position pos:line="24" pos:column="30"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="26" pos:column="3">pthread_mutex_unlock<pos:position pos:line="26" pos:column="23"/></name> <argument_list pos:line="26" pos:column="24">(<argument><expr><operator pos:line="26" pos:column="25">&amp;<pos:position pos:line="26" pos:column="30"/></operator><name pos:line="26" pos:column="26">metrics_lock<pos:position pos:line="26" pos:column="38"/></name></expr></argument>)<pos:position pos:line="26" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="40"/></expr_stmt>

  <return pos:line="28" pos:column="3">return <expr><operator pos:line="28" pos:column="10">(<pos:position pos:line="28" pos:column="11"/></operator><literal type="number" pos:line="28" pos:column="11">0<pos:position pos:line="28" pos:column="12"/></literal><operator pos:line="28" pos:column="12">)<pos:position pos:line="28" pos:column="13"/></operator></expr>;<pos:position pos:line="28" pos:column="14"/></return>
}<pos:position pos:line="29" pos:column="2"/></block></function></unit>
