<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_650_collectd-4.6.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">openvpn_read<pos:position pos:line="1" pos:column="24"/></name> <parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><name pos:line="1" pos:column="26">void<pos:position pos:line="1" pos:column="30"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="31"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">FILE<pos:position pos:line="3" pos:column="13"/></name> <modifier pos:line="3" pos:column="14">*<pos:position pos:line="3" pos:column="15"/></modifier></type><name pos:line="3" pos:column="15">fh<pos:position pos:line="3" pos:column="17"/></name></decl>;<pos:position pos:line="3" pos:column="18"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">char<pos:position pos:line="4" pos:column="13"/></name></type> <name><name pos:line="4" pos:column="14">buffer<pos:position pos:line="4" pos:column="20"/></name><index pos:line="4" pos:column="20">[<expr><literal type="number" pos:line="4" pos:column="21">1024<pos:position pos:line="4" pos:column="25"/></literal></expr>]<pos:position pos:line="4" pos:column="26"/></index></name></decl>;<pos:position pos:line="4" pos:column="27"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">char<pos:position pos:line="5" pos:column="13"/></name> <modifier pos:line="5" pos:column="14">*<pos:position pos:line="5" pos:column="15"/></modifier></type><name><name pos:line="5" pos:column="15">fields<pos:position pos:line="5" pos:column="21"/></name><index pos:line="5" pos:column="21">[<expr><literal type="number" pos:line="5" pos:column="22">10<pos:position pos:line="5" pos:column="24"/></literal></expr>]<pos:position pos:line="5" pos:column="25"/></index></name></decl>;<pos:position pos:line="5" pos:column="26"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="6" pos:column="9">const<pos:position pos:line="6" pos:column="14"/></specifier> <name pos:line="6" pos:column="15">int<pos:position pos:line="6" pos:column="18"/></name></type> <name pos:line="6" pos:column="19">max_fields<pos:position pos:line="6" pos:column="29"/></name> <init pos:line="6" pos:column="30">= <expr><call><name pos:line="6" pos:column="32">STATIC_ARRAY_SIZE<pos:position pos:line="6" pos:column="49"/></name> <argument_list pos:line="6" pos:column="50">(<argument><expr><name pos:line="6" pos:column="51">fields<pos:position pos:line="6" pos:column="57"/></name></expr></argument>)<pos:position pos:line="6" pos:column="58"/></argument_list></call></expr></init></decl>;<pos:position pos:line="6" pos:column="59"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">int<pos:position pos:line="7" pos:column="12"/></name></type>   <name pos:line="7" pos:column="15">fields_num<pos:position pos:line="7" pos:column="25"/></name></decl>;<pos:position pos:line="7" pos:column="26"/></decl_stmt>

	<decl_stmt><decl><type><name pos:line="9" pos:column="9">counter_t<pos:position pos:line="9" pos:column="18"/></name></type> <name pos:line="9" pos:column="19">pre_compress_new<pos:position pos:line="9" pos:column="35"/></name>    <init pos:line="9" pos:column="39">= <expr><literal type="number" pos:line="9" pos:column="41">0<pos:position pos:line="9" pos:column="42"/></literal></expr></init></decl>;<pos:position pos:line="9" pos:column="43"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="10" pos:column="9">counter_t<pos:position pos:line="10" pos:column="18"/></name></type> <name pos:line="10" pos:column="19">post_compress_new<pos:position pos:line="10" pos:column="36"/></name>   <init pos:line="10" pos:column="39">= <expr><literal type="number" pos:line="10" pos:column="41">0<pos:position pos:line="10" pos:column="42"/></literal></expr></init></decl>;<pos:position pos:line="10" pos:column="43"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="11" pos:column="9">counter_t<pos:position pos:line="11" pos:column="18"/></name></type> <name pos:line="11" pos:column="19">pre_decompress_new<pos:position pos:line="11" pos:column="37"/></name>  <init pos:line="11" pos:column="39">= <expr><literal type="number" pos:line="11" pos:column="41">0<pos:position pos:line="11" pos:column="42"/></literal></expr></init></decl>;<pos:position pos:line="11" pos:column="43"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="12" pos:column="9">counter_t<pos:position pos:line="12" pos:column="18"/></name></type> <name pos:line="12" pos:column="19">post_decompress_new<pos:position pos:line="12" pos:column="38"/></name> <init pos:line="12" pos:column="39">= <expr><literal type="number" pos:line="12" pos:column="41">0<pos:position pos:line="12" pos:column="42"/></literal></expr></init></decl>;<pos:position pos:line="12" pos:column="43"/></decl_stmt>

	<comment type="block" pos:line="14" pos:column="9">/* Clear the least significant four bits, just to make sure all four
	 * counters above are considered to be invalid. */</comment>
	<expr_stmt><expr><name pos:line="16" pos:column="9">compression_counter_valid<pos:position pos:line="16" pos:column="34"/></name> <operator pos:line="16" pos:column="35">&amp;=<pos:position pos:line="16" pos:column="41"/></operator> <operator pos:line="16" pos:column="38">~<pos:position pos:line="16" pos:column="39"/></operator><literal type="number" pos:line="16" pos:column="39">0x0f<pos:position pos:line="16" pos:column="43"/></literal></expr>;<pos:position pos:line="16" pos:column="44"/></expr_stmt>

	<expr_stmt><expr><name pos:line="18" pos:column="9">fh<pos:position pos:line="18" pos:column="11"/></name> <operator pos:line="18" pos:column="12">=<pos:position pos:line="18" pos:column="13"/></operator> <call><name pos:line="18" pos:column="14">fopen<pos:position pos:line="18" pos:column="19"/></name> <argument_list pos:line="18" pos:column="20">(<argument><expr><ternary><condition><expr><operator pos:line="18" pos:column="21">(<pos:position pos:line="18" pos:column="22"/></operator><name pos:line="18" pos:column="22">status_file<pos:position pos:line="18" pos:column="33"/></name> <operator pos:line="18" pos:column="34">!=<pos:position pos:line="18" pos:column="36"/></operator> <name pos:line="18" pos:column="37">NULL<pos:position pos:line="18" pos:column="41"/></name><operator pos:line="18" pos:column="41">)<pos:position pos:line="18" pos:column="42"/></operator></expr>
			?<pos:position pos:line="19" pos:column="26"/></condition><then pos:line="19" pos:column="26"> <expr><name pos:line="19" pos:column="27">status_file<pos:position pos:line="19" pos:column="38"/></name></expr>
			<pos:position pos:line="20" pos:column="4"/></then><else pos:line="20" pos:column="25">: <expr><name pos:line="20" pos:column="27">DEFAULT_STATUS_FILE<pos:position pos:line="20" pos:column="46"/></name></expr></else></ternary></expr></argument>, <argument><expr><literal type="string" pos:line="20" pos:column="48">"r"<pos:position pos:line="20" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="53"/></expr_stmt>
	<if pos:line="21" pos:column="9">if <condition pos:line="21" pos:column="12">(<expr><name pos:line="21" pos:column="13">fh<pos:position pos:line="21" pos:column="15"/></name> <operator pos:line="21" pos:column="16">==<pos:position pos:line="21" pos:column="18"/></operator> <name pos:line="21" pos:column="19">NULL<pos:position pos:line="21" pos:column="23"/></name></expr>)<pos:position pos:line="21" pos:column="24"/></condition><then pos:line="21" pos:column="24">
		<block type="pseudo"><return pos:line="22" pos:column="17">return <expr><operator pos:line="22" pos:column="24">(<pos:position pos:line="22" pos:column="25"/></operator><operator pos:line="22" pos:column="25">-<pos:position pos:line="22" pos:column="26"/></operator><literal type="number" pos:line="22" pos:column="26">1<pos:position pos:line="22" pos:column="27"/></literal><operator pos:line="22" pos:column="27">)<pos:position pos:line="22" pos:column="28"/></operator></expr>;<pos:position pos:line="22" pos:column="29"/></return></block></then></if>

        <comment type="block" pos:line="24" pos:column="9">/* status file is generated by openvpn/multi.c:multi_print_status()
	 * this plugin requires server.conf: "status-version 2"
         * http://svn.openvpn.net/projects/openvpn/trunk/openvpn/multi.c
         */</comment>
	<while pos:line="28" pos:column="9">while <condition pos:line="28" pos:column="15">(<expr><call><name pos:line="28" pos:column="16">fgets<pos:position pos:line="28" pos:column="21"/></name> <argument_list pos:line="28" pos:column="22">(<argument><expr><name pos:line="28" pos:column="23">buffer<pos:position pos:line="28" pos:column="29"/></name></expr></argument>, <argument><expr><sizeof pos:line="28" pos:column="31">sizeof <argument_list pos:line="28" pos:column="38">(<argument><expr><name pos:line="28" pos:column="39">buffer<pos:position pos:line="28" pos:column="45"/></name></expr></argument>)<pos:position pos:line="28" pos:column="46"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="28" pos:column="48">fh<pos:position pos:line="28" pos:column="50"/></name></expr></argument>)<pos:position pos:line="28" pos:column="51"/></argument_list></call> <operator pos:line="28" pos:column="52">!=<pos:position pos:line="28" pos:column="54"/></operator> <name pos:line="28" pos:column="55">NULL<pos:position pos:line="28" pos:column="59"/></name></expr>)<pos:position pos:line="28" pos:column="60"/></condition>
	<block pos:line="29" pos:column="9">{
		<expr_stmt><expr><name pos:line="30" pos:column="17">fields_num<pos:position pos:line="30" pos:column="27"/></name> <operator pos:line="30" pos:column="28">=<pos:position pos:line="30" pos:column="29"/></operator> <call><name pos:line="30" pos:column="30">openvpn_strsplit<pos:position pos:line="30" pos:column="46"/></name> <argument_list pos:line="30" pos:column="47">(<argument><expr><name pos:line="30" pos:column="48">buffer<pos:position pos:line="30" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="56">fields<pos:position pos:line="30" pos:column="62"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="64">max_fields<pos:position pos:line="30" pos:column="74"/></name></expr></argument>)<pos:position pos:line="30" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="76"/></expr_stmt>

		<comment type="block" pos:line="32" pos:column="17">/* Expect at least ``key,value''. */</comment>
		<if pos:line="33" pos:column="17">if <condition pos:line="33" pos:column="20">(<expr><name pos:line="33" pos:column="21">fields_num<pos:position pos:line="33" pos:column="31"/></name> <operator pos:line="33" pos:column="32">&lt;<pos:position pos:line="33" pos:column="36"/></operator> <literal type="number" pos:line="33" pos:column="34">2<pos:position pos:line="33" pos:column="35"/></literal></expr>)<pos:position pos:line="33" pos:column="36"/></condition><then pos:line="33" pos:column="36">
			<block type="pseudo"><continue pos:line="34" pos:column="25">continue;<pos:position pos:line="34" pos:column="34"/></continue></block></then></if>

		<if pos:line="36" pos:column="17">if <condition pos:line="36" pos:column="20">(<expr><call><name pos:line="36" pos:column="21">strcmp<pos:position pos:line="36" pos:column="27"/></name> <argument_list pos:line="36" pos:column="28">(<argument><expr><name><name pos:line="36" pos:column="29">fields<pos:position pos:line="36" pos:column="35"/></name><index pos:line="36" pos:column="35">[<expr><literal type="number" pos:line="36" pos:column="36">0<pos:position pos:line="36" pos:column="37"/></literal></expr>]<pos:position pos:line="36" pos:column="38"/></index></name></expr></argument>, <argument><expr><literal type="string" pos:line="36" pos:column="40">"CLIENT_LIST"<pos:position pos:line="36" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="36" pos:column="54"/></argument_list></call> <operator pos:line="36" pos:column="55">==<pos:position pos:line="36" pos:column="57"/></operator> <literal type="number" pos:line="36" pos:column="58">0<pos:position pos:line="36" pos:column="59"/></literal></expr>)<pos:position pos:line="36" pos:column="60"/></condition><then pos:line="36" pos:column="60">
		<block pos:line="37" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="38" pos:column="25">char<pos:position pos:line="38" pos:column="29"/></name> <modifier pos:line="38" pos:column="30">*<pos:position pos:line="38" pos:column="31"/></modifier></type><name pos:line="38" pos:column="31">name<pos:position pos:line="38" pos:column="35"/></name></decl>;<pos:position pos:line="38" pos:column="36"/></decl_stmt>
			<decl_stmt><decl><type><name pos:line="39" pos:column="25">counter_t<pos:position pos:line="39" pos:column="34"/></name></type> <name pos:line="39" pos:column="35">rx<pos:position pos:line="39" pos:column="37"/></name></decl>;<pos:position pos:line="39" pos:column="38"/></decl_stmt>
			<decl_stmt><decl><type><name pos:line="40" pos:column="25">counter_t<pos:position pos:line="40" pos:column="34"/></name></type> <name pos:line="40" pos:column="35">tx<pos:position pos:line="40" pos:column="37"/></name></decl>;<pos:position pos:line="40" pos:column="38"/></decl_stmt>

			<comment type="block" pos:line="42" pos:column="25">/* The line we're expecting has 8 fields. We ignore all lines
			 * with more or less fields. */</comment>
			<if pos:line="44" pos:column="25">if <condition pos:line="44" pos:column="28">(<expr><name pos:line="44" pos:column="29">fields_num<pos:position pos:line="44" pos:column="39"/></name> <operator pos:line="44" pos:column="40">!=<pos:position pos:line="44" pos:column="42"/></operator> <literal type="number" pos:line="44" pos:column="43">8<pos:position pos:line="44" pos:column="44"/></literal></expr>)<pos:position pos:line="44" pos:column="45"/></condition><then pos:line="44" pos:column="45">
				<block type="pseudo"><continue pos:line="45" pos:column="33">continue;<pos:position pos:line="45" pos:column="42"/></continue></block></then></if>

			<expr_stmt><expr><name pos:line="47" pos:column="25">name<pos:position pos:line="47" pos:column="29"/></name> <operator pos:line="47" pos:column="30">=<pos:position pos:line="47" pos:column="31"/></operator>      <name><name pos:line="47" pos:column="37">fields<pos:position pos:line="47" pos:column="43"/></name><index pos:line="47" pos:column="43">[<expr><literal type="number" pos:line="47" pos:column="44">1<pos:position pos:line="47" pos:column="45"/></literal></expr>]<pos:position pos:line="47" pos:column="46"/></index></name></expr>;<pos:position pos:line="47" pos:column="47"/></expr_stmt>  <comment type="block" pos:line="47" pos:column="49">/* "Common Name" */</comment>
			<expr_stmt><expr><name pos:line="48" pos:column="25">rx<pos:position pos:line="48" pos:column="27"/></name> <operator pos:line="48" pos:column="28">=<pos:position pos:line="48" pos:column="29"/></operator> <call><name pos:line="48" pos:column="30">atoll<pos:position pos:line="48" pos:column="35"/></name> <argument_list pos:line="48" pos:column="36">(<argument><expr><name><name pos:line="48" pos:column="37">fields<pos:position pos:line="48" pos:column="43"/></name><index pos:line="48" pos:column="43">[<expr><literal type="number" pos:line="48" pos:column="44">4<pos:position pos:line="48" pos:column="45"/></literal></expr>]<pos:position pos:line="48" pos:column="46"/></index></name></expr></argument>)<pos:position pos:line="48" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="48"/></expr_stmt> <comment type="block" pos:line="48" pos:column="49">/* "Bytes Received */</comment>
			<expr_stmt><expr><name pos:line="49" pos:column="25">tx<pos:position pos:line="49" pos:column="27"/></name> <operator pos:line="49" pos:column="28">=<pos:position pos:line="49" pos:column="29"/></operator> <call><name pos:line="49" pos:column="30">atoll<pos:position pos:line="49" pos:column="35"/></name> <argument_list pos:line="49" pos:column="36">(<argument><expr><name><name pos:line="49" pos:column="37">fields<pos:position pos:line="49" pos:column="43"/></name><index pos:line="49" pos:column="43">[<expr><literal type="number" pos:line="49" pos:column="44">5<pos:position pos:line="49" pos:column="45"/></literal></expr>]<pos:position pos:line="49" pos:column="46"/></index></name></expr></argument>)<pos:position pos:line="49" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="48"/></expr_stmt> <comment type="block" pos:line="49" pos:column="49">/* "Bytes Sent" */</comment>
			<expr_stmt><expr><call><name pos:line="50" pos:column="25">openvpn_submit<pos:position pos:line="50" pos:column="39"/></name> <argument_list pos:line="50" pos:column="40">(<argument><expr><name pos:line="50" pos:column="41">name<pos:position pos:line="50" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="47">rx<pos:position pos:line="50" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="51">tx<pos:position pos:line="50" pos:column="53"/></name></expr></argument>)<pos:position pos:line="50" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="55"/></expr_stmt>
		}<pos:position pos:line="51" pos:column="18"/></block></then>
		<elseif pos:line="52" pos:column="17">else <if pos:line="52" pos:column="22">if <condition pos:line="52" pos:column="25">(<expr><call><name pos:line="52" pos:column="26">strcmp<pos:position pos:line="52" pos:column="32"/></name> <argument_list pos:line="52" pos:column="33">(<argument><expr><name><name pos:line="52" pos:column="34">fields<pos:position pos:line="52" pos:column="40"/></name><index pos:line="52" pos:column="40">[<expr><literal type="number" pos:line="52" pos:column="41">0<pos:position pos:line="52" pos:column="42"/></literal></expr>]<pos:position pos:line="52" pos:column="43"/></index></name></expr></argument>, <argument><expr><literal type="string" pos:line="52" pos:column="45">"pre-compress"<pos:position pos:line="52" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="52" pos:column="60"/></argument_list></call> <operator pos:line="52" pos:column="61">==<pos:position pos:line="52" pos:column="63"/></operator> <literal type="number" pos:line="52" pos:column="64">0<pos:position pos:line="52" pos:column="65"/></literal></expr>)<pos:position pos:line="52" pos:column="66"/></condition><then pos:line="52" pos:column="66">
		<block pos:line="53" pos:column="17">{
			<expr_stmt><expr><name pos:line="54" pos:column="25">pre_compress_new<pos:position pos:line="54" pos:column="41"/></name> <operator pos:line="54" pos:column="42">=<pos:position pos:line="54" pos:column="43"/></operator> <call><name pos:line="54" pos:column="44">atoll<pos:position pos:line="54" pos:column="49"/></name> <argument_list pos:line="54" pos:column="50">(<argument><expr><name><name pos:line="54" pos:column="51">fields<pos:position pos:line="54" pos:column="57"/></name><index pos:line="54" pos:column="57">[<expr><literal type="number" pos:line="54" pos:column="58">1<pos:position pos:line="54" pos:column="59"/></literal></expr>]<pos:position pos:line="54" pos:column="60"/></index></name></expr></argument>)<pos:position pos:line="54" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="62"/></expr_stmt>
			<expr_stmt><expr><name pos:line="55" pos:column="25">compression_counter_valid<pos:position pos:line="55" pos:column="50"/></name> <operator pos:line="55" pos:column="51">|=<pos:position pos:line="55" pos:column="53"/></operator> <literal type="number" pos:line="55" pos:column="54">0x01<pos:position pos:line="55" pos:column="58"/></literal></expr>;<pos:position pos:line="55" pos:column="59"/></expr_stmt>
		}<pos:position pos:line="56" pos:column="18"/></block></then></if></elseif>
		<elseif pos:line="57" pos:column="17">else <if pos:line="57" pos:column="22">if <condition pos:line="57" pos:column="25">(<expr><call><name pos:line="57" pos:column="26">strcmp<pos:position pos:line="57" pos:column="32"/></name> <argument_list pos:line="57" pos:column="33">(<argument><expr><name><name pos:line="57" pos:column="34">fields<pos:position pos:line="57" pos:column="40"/></name><index pos:line="57" pos:column="40">[<expr><literal type="number" pos:line="57" pos:column="41">0<pos:position pos:line="57" pos:column="42"/></literal></expr>]<pos:position pos:line="57" pos:column="43"/></index></name></expr></argument>, <argument><expr><literal type="string" pos:line="57" pos:column="45">"post-compress"<pos:position pos:line="57" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="57" pos:column="61"/></argument_list></call> <operator pos:line="57" pos:column="62">==<pos:position pos:line="57" pos:column="64"/></operator> <literal type="number" pos:line="57" pos:column="65">0<pos:position pos:line="57" pos:column="66"/></literal></expr>)<pos:position pos:line="57" pos:column="67"/></condition><then pos:line="57" pos:column="67">
		<block pos:line="58" pos:column="17">{
			<expr_stmt><expr><name pos:line="59" pos:column="25">post_compress_new<pos:position pos:line="59" pos:column="42"/></name> <operator pos:line="59" pos:column="43">=<pos:position pos:line="59" pos:column="44"/></operator> <call><name pos:line="59" pos:column="45">atoll<pos:position pos:line="59" pos:column="50"/></name> <argument_list pos:line="59" pos:column="51">(<argument><expr><name><name pos:line="59" pos:column="52">fields<pos:position pos:line="59" pos:column="58"/></name><index pos:line="59" pos:column="58">[<expr><literal type="number" pos:line="59" pos:column="59">1<pos:position pos:line="59" pos:column="60"/></literal></expr>]<pos:position pos:line="59" pos:column="61"/></index></name></expr></argument>)<pos:position pos:line="59" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="63"/></expr_stmt>
			<expr_stmt><expr><name pos:line="60" pos:column="25">compression_counter_valid<pos:position pos:line="60" pos:column="50"/></name> <operator pos:line="60" pos:column="51">|=<pos:position pos:line="60" pos:column="53"/></operator> <literal type="number" pos:line="60" pos:column="54">0x02<pos:position pos:line="60" pos:column="58"/></literal></expr>;<pos:position pos:line="60" pos:column="59"/></expr_stmt>
		}<pos:position pos:line="61" pos:column="18"/></block></then></if></elseif>
		<elseif pos:line="62" pos:column="17">else <if pos:line="62" pos:column="22">if <condition pos:line="62" pos:column="25">(<expr><call><name pos:line="62" pos:column="26">strcmp<pos:position pos:line="62" pos:column="32"/></name> <argument_list pos:line="62" pos:column="33">(<argument><expr><name><name pos:line="62" pos:column="34">fields<pos:position pos:line="62" pos:column="40"/></name><index pos:line="62" pos:column="40">[<expr><literal type="number" pos:line="62" pos:column="41">0<pos:position pos:line="62" pos:column="42"/></literal></expr>]<pos:position pos:line="62" pos:column="43"/></index></name></expr></argument>, <argument><expr><literal type="string" pos:line="62" pos:column="45">"pre-decompress"<pos:position pos:line="62" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="62" pos:column="62"/></argument_list></call> <operator pos:line="62" pos:column="63">==<pos:position pos:line="62" pos:column="65"/></operator> <literal type="number" pos:line="62" pos:column="66">0<pos:position pos:line="62" pos:column="67"/></literal></expr>)<pos:position pos:line="62" pos:column="68"/></condition><then pos:line="62" pos:column="68">
		<block pos:line="63" pos:column="17">{
			<expr_stmt><expr><name pos:line="64" pos:column="25">pre_decompress_new<pos:position pos:line="64" pos:column="43"/></name> <operator pos:line="64" pos:column="44">=<pos:position pos:line="64" pos:column="45"/></operator> <call><name pos:line="64" pos:column="46">atoll<pos:position pos:line="64" pos:column="51"/></name> <argument_list pos:line="64" pos:column="52">(<argument><expr><name><name pos:line="64" pos:column="53">fields<pos:position pos:line="64" pos:column="59"/></name><index pos:line="64" pos:column="59">[<expr><literal type="number" pos:line="64" pos:column="60">1<pos:position pos:line="64" pos:column="61"/></literal></expr>]<pos:position pos:line="64" pos:column="62"/></index></name></expr></argument>)<pos:position pos:line="64" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="64"/></expr_stmt>
			<expr_stmt><expr><name pos:line="65" pos:column="25">compression_counter_valid<pos:position pos:line="65" pos:column="50"/></name> <operator pos:line="65" pos:column="51">|=<pos:position pos:line="65" pos:column="53"/></operator> <literal type="number" pos:line="65" pos:column="54">0x04<pos:position pos:line="65" pos:column="58"/></literal></expr>;<pos:position pos:line="65" pos:column="59"/></expr_stmt>
		}<pos:position pos:line="66" pos:column="18"/></block></then></if></elseif>
		<elseif pos:line="67" pos:column="17">else <if pos:line="67" pos:column="22">if <condition pos:line="67" pos:column="25">(<expr><call><name pos:line="67" pos:column="26">strcmp<pos:position pos:line="67" pos:column="32"/></name> <argument_list pos:line="67" pos:column="33">(<argument><expr><name><name pos:line="67" pos:column="34">fields<pos:position pos:line="67" pos:column="40"/></name><index pos:line="67" pos:column="40">[<expr><literal type="number" pos:line="67" pos:column="41">0<pos:position pos:line="67" pos:column="42"/></literal></expr>]<pos:position pos:line="67" pos:column="43"/></index></name></expr></argument>, <argument><expr><literal type="string" pos:line="67" pos:column="45">"post-decompress"<pos:position pos:line="67" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="67" pos:column="63"/></argument_list></call> <operator pos:line="67" pos:column="64">==<pos:position pos:line="67" pos:column="66"/></operator> <literal type="number" pos:line="67" pos:column="67">0<pos:position pos:line="67" pos:column="68"/></literal></expr>)<pos:position pos:line="67" pos:column="69"/></condition><then pos:line="67" pos:column="69">
		<block pos:line="68" pos:column="17">{
			<expr_stmt><expr><name pos:line="69" pos:column="25">post_decompress_new<pos:position pos:line="69" pos:column="44"/></name> <operator pos:line="69" pos:column="45">=<pos:position pos:line="69" pos:column="46"/></operator> <call><name pos:line="69" pos:column="47">atoll<pos:position pos:line="69" pos:column="52"/></name> <argument_list pos:line="69" pos:column="53">(<argument><expr><name><name pos:line="69" pos:column="54">fields<pos:position pos:line="69" pos:column="60"/></name><index pos:line="69" pos:column="60">[<expr><literal type="number" pos:line="69" pos:column="61">1<pos:position pos:line="69" pos:column="62"/></literal></expr>]<pos:position pos:line="69" pos:column="63"/></index></name></expr></argument>)<pos:position pos:line="69" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="65"/></expr_stmt>
			<expr_stmt><expr><name pos:line="70" pos:column="25">compression_counter_valid<pos:position pos:line="70" pos:column="50"/></name> <operator pos:line="70" pos:column="51">|=<pos:position pos:line="70" pos:column="53"/></operator> <literal type="number" pos:line="70" pos:column="54">0x08<pos:position pos:line="70" pos:column="58"/></literal></expr>;<pos:position pos:line="70" pos:column="59"/></expr_stmt>
		}<pos:position pos:line="71" pos:column="18"/></block></then></if></elseif></if>
	}<pos:position pos:line="72" pos:column="10"/></block></while>
	<expr_stmt><expr><call><name pos:line="73" pos:column="9">fclose<pos:position pos:line="73" pos:column="15"/></name> <argument_list pos:line="73" pos:column="16">(<argument><expr><name pos:line="73" pos:column="17">fh<pos:position pos:line="73" pos:column="19"/></name></expr></argument>)<pos:position pos:line="73" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="21"/></expr_stmt>

	<comment type="block" pos:line="75" pos:column="9">/* Check that all four counters are valid, {pre,post}_*_{old,new}. */</comment>
	<if pos:line="76" pos:column="9">if <condition pos:line="76" pos:column="12">(<expr><operator pos:line="76" pos:column="13">(<pos:position pos:line="76" pos:column="14"/></operator><name pos:line="76" pos:column="14">compression_counter_valid<pos:position pos:line="76" pos:column="39"/></name> <operator pos:line="76" pos:column="40">&amp;<pos:position pos:line="76" pos:column="45"/></operator> <literal type="number" pos:line="76" pos:column="42">0x33<pos:position pos:line="76" pos:column="46"/></literal><operator pos:line="76" pos:column="46">)<pos:position pos:line="76" pos:column="47"/></operator> <operator pos:line="76" pos:column="48">==<pos:position pos:line="76" pos:column="50"/></operator> <literal type="number" pos:line="76" pos:column="51">0x33<pos:position pos:line="76" pos:column="55"/></literal></expr>)<pos:position pos:line="76" pos:column="56"/></condition><then pos:line="76" pos:column="56">
	<block pos:line="77" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="78" pos:column="17">counter_t<pos:position pos:line="78" pos:column="26"/></name></type> <name pos:line="78" pos:column="27">pre_diff<pos:position pos:line="78" pos:column="35"/></name></decl>;<pos:position pos:line="78" pos:column="36"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="79" pos:column="17">counter_t<pos:position pos:line="79" pos:column="26"/></name></type> <name pos:line="79" pos:column="27">post_diff<pos:position pos:line="79" pos:column="36"/></name></decl>;<pos:position pos:line="79" pos:column="37"/></decl_stmt>

		<expr_stmt><expr><name pos:line="81" pos:column="17">pre_diff<pos:position pos:line="81" pos:column="25"/></name> <operator pos:line="81" pos:column="26">=<pos:position pos:line="81" pos:column="27"/></operator> <call><name pos:line="81" pos:column="28">counter_diff<pos:position pos:line="81" pos:column="40"/></name> <argument_list pos:line="81" pos:column="41">(<argument><expr><name pos:line="81" pos:column="42">pre_compress_old<pos:position pos:line="81" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="81" pos:column="60">pre_compress_new<pos:position pos:line="81" pos:column="76"/></name></expr></argument>)<pos:position pos:line="81" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="78"/></expr_stmt>
		<expr_stmt><expr><name pos:line="82" pos:column="17">post_diff<pos:position pos:line="82" pos:column="26"/></name> <operator pos:line="82" pos:column="27">=<pos:position pos:line="82" pos:column="28"/></operator> <call><name pos:line="82" pos:column="29">counter_diff<pos:position pos:line="82" pos:column="41"/></name> <argument_list pos:line="82" pos:column="42">(<argument><expr><name pos:line="82" pos:column="43">post_compress_old<pos:position pos:line="82" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="82" pos:column="62">post_compress_new<pos:position pos:line="82" pos:column="79"/></name></expr></argument>)<pos:position pos:line="82" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="81"/></expr_stmt>

		<comment type="block" pos:line="84" pos:column="17">/* If we compress, we're sending. */</comment>
		<expr_stmt><expr><call><name pos:line="85" pos:column="17">compression_submit<pos:position pos:line="85" pos:column="35"/></name> <argument_list pos:line="85" pos:column="36">(<argument><expr><literal type="string" pos:line="85" pos:column="37">"tx"<pos:position pos:line="85" pos:column="41"/></literal></expr></argument>,
				<argument><expr><operator pos:line="86" pos:column="33">(<pos:position pos:line="86" pos:column="34"/></operator><operator pos:line="86" pos:column="34">(<pos:position pos:line="86" pos:column="35"/></operator><name pos:line="86" pos:column="35">gauge_t<pos:position pos:line="86" pos:column="42"/></name><operator pos:line="86" pos:column="42">)<pos:position pos:line="86" pos:column="43"/></operator> <name pos:line="86" pos:column="44">post_diff<pos:position pos:line="86" pos:column="53"/></name><operator pos:line="86" pos:column="53">)<pos:position pos:line="86" pos:column="54"/></operator> <operator pos:line="86" pos:column="55">/<pos:position pos:line="86" pos:column="56"/></operator> <operator pos:line="86" pos:column="57">(<pos:position pos:line="86" pos:column="58"/></operator><operator pos:line="86" pos:column="58">(<pos:position pos:line="86" pos:column="59"/></operator><name pos:line="86" pos:column="59">gauge_t<pos:position pos:line="86" pos:column="66"/></name><operator pos:line="86" pos:column="66">)<pos:position pos:line="86" pos:column="67"/></operator> <name pos:line="86" pos:column="68">pre_diff<pos:position pos:line="86" pos:column="76"/></name><operator pos:line="86" pos:column="76">)<pos:position pos:line="86" pos:column="77"/></operator></expr></argument>)<pos:position pos:line="86" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="79"/></expr_stmt>
	}<pos:position pos:line="87" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="89" pos:column="9">/* Now check the other found counters. */</comment>
	<if pos:line="90" pos:column="9">if <condition pos:line="90" pos:column="12">(<expr><operator pos:line="90" pos:column="13">(<pos:position pos:line="90" pos:column="14"/></operator><name pos:line="90" pos:column="14">compression_counter_valid<pos:position pos:line="90" pos:column="39"/></name> <operator pos:line="90" pos:column="40">&amp;<pos:position pos:line="90" pos:column="45"/></operator> <literal type="number" pos:line="90" pos:column="42">0xcc<pos:position pos:line="90" pos:column="46"/></literal><operator pos:line="90" pos:column="46">)<pos:position pos:line="90" pos:column="47"/></operator> <operator pos:line="90" pos:column="48">==<pos:position pos:line="90" pos:column="50"/></operator> <literal type="number" pos:line="90" pos:column="51">0xcc<pos:position pos:line="90" pos:column="55"/></literal></expr>)<pos:position pos:line="90" pos:column="56"/></condition><then pos:line="90" pos:column="56">
	<block pos:line="91" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="92" pos:column="17">counter_t<pos:position pos:line="92" pos:column="26"/></name></type> <name pos:line="92" pos:column="27">pre_diff<pos:position pos:line="92" pos:column="35"/></name></decl>;<pos:position pos:line="92" pos:column="36"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="93" pos:column="17">counter_t<pos:position pos:line="93" pos:column="26"/></name></type> <name pos:line="93" pos:column="27">post_diff<pos:position pos:line="93" pos:column="36"/></name></decl>;<pos:position pos:line="93" pos:column="37"/></decl_stmt>

		<expr_stmt><expr><name pos:line="95" pos:column="17">pre_diff<pos:position pos:line="95" pos:column="25"/></name> <operator pos:line="95" pos:column="26">=<pos:position pos:line="95" pos:column="27"/></operator> <call><name pos:line="95" pos:column="28">counter_diff<pos:position pos:line="95" pos:column="40"/></name> <argument_list pos:line="95" pos:column="41">(<argument><expr><name pos:line="95" pos:column="42">pre_decompress_old<pos:position pos:line="95" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="95" pos:column="62">pre_decompress_new<pos:position pos:line="95" pos:column="80"/></name></expr></argument>)<pos:position pos:line="95" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="95" pos:column="82"/></expr_stmt>
		<expr_stmt><expr><name pos:line="96" pos:column="17">post_diff<pos:position pos:line="96" pos:column="26"/></name> <operator pos:line="96" pos:column="27">=<pos:position pos:line="96" pos:column="28"/></operator> <call><name pos:line="96" pos:column="29">counter_diff<pos:position pos:line="96" pos:column="41"/></name> <argument_list pos:line="96" pos:column="42">(<argument><expr><name pos:line="96" pos:column="43">post_decompress_old<pos:position pos:line="96" pos:column="62"/></name></expr></argument>, <argument><expr><name pos:line="96" pos:column="64">post_decompress_new<pos:position pos:line="96" pos:column="83"/></name></expr></argument>)<pos:position pos:line="96" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="96" pos:column="85"/></expr_stmt>

		<comment type="block" pos:line="98" pos:column="17">/* If we decompress, we're receiving. */</comment>
		<expr_stmt><expr><call><name pos:line="99" pos:column="17">compression_submit<pos:position pos:line="99" pos:column="35"/></name> <argument_list pos:line="99" pos:column="36">(<argument><expr><literal type="string" pos:line="99" pos:column="37">"rx"<pos:position pos:line="99" pos:column="41"/></literal></expr></argument>,
				<argument><expr><operator pos:line="100" pos:column="33">(<pos:position pos:line="100" pos:column="34"/></operator><operator pos:line="100" pos:column="34">(<pos:position pos:line="100" pos:column="35"/></operator><name pos:line="100" pos:column="35">gauge_t<pos:position pos:line="100" pos:column="42"/></name><operator pos:line="100" pos:column="42">)<pos:position pos:line="100" pos:column="43"/></operator> <name pos:line="100" pos:column="44">pre_diff<pos:position pos:line="100" pos:column="52"/></name><operator pos:line="100" pos:column="52">)<pos:position pos:line="100" pos:column="53"/></operator> <operator pos:line="100" pos:column="54">/<pos:position pos:line="100" pos:column="55"/></operator> <operator pos:line="100" pos:column="56">(<pos:position pos:line="100" pos:column="57"/></operator><operator pos:line="100" pos:column="57">(<pos:position pos:line="100" pos:column="58"/></operator><name pos:line="100" pos:column="58">gauge_t<pos:position pos:line="100" pos:column="65"/></name><operator pos:line="100" pos:column="65">)<pos:position pos:line="100" pos:column="66"/></operator> <name pos:line="100" pos:column="67">post_diff<pos:position pos:line="100" pos:column="76"/></name><operator pos:line="100" pos:column="76">)<pos:position pos:line="100" pos:column="77"/></operator></expr></argument>)<pos:position pos:line="100" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="100" pos:column="79"/></expr_stmt>
	}<pos:position pos:line="101" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="103" pos:column="9">/* Now copy all the new counters to the old counters and move the flags
	 * up. */</comment>
	<expr_stmt><expr><name pos:line="105" pos:column="9">pre_compress_old<pos:position pos:line="105" pos:column="25"/></name> <operator pos:line="105" pos:column="26">=<pos:position pos:line="105" pos:column="27"/></operator> <name pos:line="105" pos:column="28">pre_compress_new<pos:position pos:line="105" pos:column="44"/></name></expr>;<pos:position pos:line="105" pos:column="45"/></expr_stmt>
	<expr_stmt><expr><name pos:line="106" pos:column="9">post_compress_old<pos:position pos:line="106" pos:column="26"/></name> <operator pos:line="106" pos:column="27">=<pos:position pos:line="106" pos:column="28"/></operator> <name pos:line="106" pos:column="29">post_compress_new<pos:position pos:line="106" pos:column="46"/></name></expr>;<pos:position pos:line="106" pos:column="47"/></expr_stmt>
	<expr_stmt><expr><name pos:line="107" pos:column="9">pre_decompress_old<pos:position pos:line="107" pos:column="27"/></name> <operator pos:line="107" pos:column="28">=<pos:position pos:line="107" pos:column="29"/></operator> <name pos:line="107" pos:column="30">pre_decompress_new<pos:position pos:line="107" pos:column="48"/></name></expr>;<pos:position pos:line="107" pos:column="49"/></expr_stmt>
	<expr_stmt><expr><name pos:line="108" pos:column="9">post_decompress_old<pos:position pos:line="108" pos:column="28"/></name> <operator pos:line="108" pos:column="29">=<pos:position pos:line="108" pos:column="30"/></operator> <name pos:line="108" pos:column="31">post_decompress_new<pos:position pos:line="108" pos:column="50"/></name></expr>;<pos:position pos:line="108" pos:column="51"/></expr_stmt>
	<expr_stmt><expr><name pos:line="109" pos:column="9">compression_counter_valid<pos:position pos:line="109" pos:column="34"/></name> <operator pos:line="109" pos:column="35">=<pos:position pos:line="109" pos:column="36"/></operator> <operator pos:line="109" pos:column="37">(<pos:position pos:line="109" pos:column="38"/></operator><name pos:line="109" pos:column="38">compression_counter_valid<pos:position pos:line="109" pos:column="63"/></name> <operator pos:line="109" pos:column="64">&amp;<pos:position pos:line="109" pos:column="69"/></operator> <literal type="number" pos:line="109" pos:column="66">0x0f<pos:position pos:line="109" pos:column="70"/></literal><operator pos:line="109" pos:column="70">)<pos:position pos:line="109" pos:column="71"/></operator> <operator pos:line="109" pos:column="72">&lt;&lt;<pos:position pos:line="109" pos:column="80"/></operator> <literal type="number" pos:line="109" pos:column="75">4<pos:position pos:line="109" pos:column="76"/></literal></expr>;<pos:position pos:line="109" pos:column="77"/></expr_stmt>

	<return pos:line="111" pos:column="9">return <expr><operator pos:line="111" pos:column="16">(<pos:position pos:line="111" pos:column="17"/></operator><literal type="number" pos:line="111" pos:column="17">0<pos:position pos:line="111" pos:column="18"/></literal><operator pos:line="111" pos:column="18">)<pos:position pos:line="111" pos:column="19"/></operator></expr>;<pos:position pos:line="111" pos:column="20"/></return>
}<pos:position pos:line="112" pos:column="2"/></block></function></unit>
