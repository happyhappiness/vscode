<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_566_collectd-5.5.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">sensu_format_name2<pos:position pos:line="1" pos:column="30"/></name><parameter_list pos:line="1" pos:column="30">(<parameter><decl><type><name pos:line="1" pos:column="31">char<pos:position pos:line="1" pos:column="35"/></name> <modifier pos:line="1" pos:column="36">*<pos:position pos:line="1" pos:column="37"/></modifier></type><name pos:line="1" pos:column="37">ret<pos:position pos:line="1" pos:column="40"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="42">int<pos:position pos:line="1" pos:column="45"/></name></type> <name pos:line="1" pos:column="46">ret_len<pos:position pos:line="1" pos:column="53"/></name></decl></parameter>,
		<parameter><decl><type><specifier pos:line="2" pos:column="17">const<pos:position pos:line="2" pos:column="22"/></specifier> <name pos:line="2" pos:column="23">char<pos:position pos:line="2" pos:column="27"/></name> <modifier pos:line="2" pos:column="28">*<pos:position pos:line="2" pos:column="29"/></modifier></type><name pos:line="2" pos:column="29">hostname<pos:position pos:line="2" pos:column="37"/></name></decl></parameter>,
		<parameter><decl><type><specifier pos:line="3" pos:column="17">const<pos:position pos:line="3" pos:column="22"/></specifier> <name pos:line="3" pos:column="23">char<pos:position pos:line="3" pos:column="27"/></name> <modifier pos:line="3" pos:column="28">*<pos:position pos:line="3" pos:column="29"/></modifier></type><name pos:line="3" pos:column="29">plugin<pos:position pos:line="3" pos:column="35"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="3" pos:column="37">const<pos:position pos:line="3" pos:column="42"/></specifier> <name pos:line="3" pos:column="43">char<pos:position pos:line="3" pos:column="47"/></name> <modifier pos:line="3" pos:column="48">*<pos:position pos:line="3" pos:column="49"/></modifier></type><name pos:line="3" pos:column="49">plugin_instance<pos:position pos:line="3" pos:column="64"/></name></decl></parameter>,
		<parameter><decl><type><specifier pos:line="4" pos:column="17">const<pos:position pos:line="4" pos:column="22"/></specifier> <name pos:line="4" pos:column="23">char<pos:position pos:line="4" pos:column="27"/></name> <modifier pos:line="4" pos:column="28">*<pos:position pos:line="4" pos:column="29"/></modifier></type><name pos:line="4" pos:column="29">type<pos:position pos:line="4" pos:column="33"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="4" pos:column="35">const<pos:position pos:line="4" pos:column="40"/></specifier> <name pos:line="4" pos:column="41">char<pos:position pos:line="4" pos:column="45"/></name> <modifier pos:line="4" pos:column="46">*<pos:position pos:line="4" pos:column="47"/></modifier></type><name pos:line="4" pos:column="47">type_instance<pos:position pos:line="4" pos:column="60"/></name></decl></parameter>,
		<parameter><decl><type><specifier pos:line="5" pos:column="17">const<pos:position pos:line="5" pos:column="22"/></specifier> <name pos:line="5" pos:column="23">char<pos:position pos:line="5" pos:column="27"/></name> <modifier pos:line="5" pos:column="28">*<pos:position pos:line="5" pos:column="29"/></modifier></type><name pos:line="5" pos:column="29">separator<pos:position pos:line="5" pos:column="38"/></name></decl></parameter>)<pos:position pos:line="5" pos:column="39"/></parameter_list>
<block pos:line="6" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">char<pos:position pos:line="7" pos:column="13"/></name> <modifier pos:line="7" pos:column="14">*<pos:position pos:line="7" pos:column="15"/></modifier></type><name pos:line="7" pos:column="15">buffer<pos:position pos:line="7" pos:column="21"/></name></decl>;<pos:position pos:line="7" pos:column="22"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">size_t<pos:position pos:line="8" pos:column="15"/></name></type> <name pos:line="8" pos:column="16">buffer_size<pos:position pos:line="8" pos:column="27"/></name></decl>;<pos:position pos:line="8" pos:column="28"/></decl_stmt>

	<expr_stmt><expr><name pos:line="10" pos:column="9">buffer<pos:position pos:line="10" pos:column="15"/></name> <operator pos:line="10" pos:column="16">=<pos:position pos:line="10" pos:column="17"/></operator> <name pos:line="10" pos:column="18">ret<pos:position pos:line="10" pos:column="21"/></name></expr>;<pos:position pos:line="10" pos:column="22"/></expr_stmt>
	<expr_stmt><expr><name pos:line="11" pos:column="9">buffer_size<pos:position pos:line="11" pos:column="20"/></name> <operator pos:line="11" pos:column="21">=<pos:position pos:line="11" pos:column="22"/></operator> <operator pos:line="11" pos:column="23">(<pos:position pos:line="11" pos:column="24"/></operator><name pos:line="11" pos:column="24">size_t<pos:position pos:line="11" pos:column="30"/></name><operator pos:line="11" pos:column="30">)<pos:position pos:line="11" pos:column="31"/></operator> <name pos:line="11" pos:column="32">ret_len<pos:position pos:line="11" pos:column="39"/></name></expr>;<pos:position pos:line="11" pos:column="40"/></expr_stmt>

<cpp:define pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">define<pos:position pos:line="13" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="13" pos:column="9">APPEND<pos:position pos:line="13" pos:column="15"/></name><parameter_list pos:line="13" pos:column="15">(<parameter><type><name pos:line="13" pos:column="16">str<pos:position pos:line="13" pos:column="19"/></name></type></parameter>)<pos:position pos:line="13" pos:column="20"/></parameter_list></cpp:macro> <cpp:value pos:line="13" pos:column="21">do {          \
	size_t l = strlen (str);        \
	if (l &gt;= buffer_size)           \
		return (ENOBUFS);             \
	memcpy (buffer, (str), l);      \
	buffer += l; buffer_size -= l;  \
} while (0)<pos:position pos:line="19" pos:column="12"/></cpp:value></cpp:define>

	<expr_stmt><expr><call><name pos:line="21" pos:column="9">assert<pos:position pos:line="21" pos:column="15"/></name> <argument_list pos:line="21" pos:column="16">(<argument><expr><name pos:line="21" pos:column="17">plugin<pos:position pos:line="21" pos:column="23"/></name> <operator pos:line="21" pos:column="24">!=<pos:position pos:line="21" pos:column="26"/></operator> <name pos:line="21" pos:column="27">NULL<pos:position pos:line="21" pos:column="31"/></name></expr></argument>)<pos:position pos:line="21" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="33"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="22" pos:column="9">assert<pos:position pos:line="22" pos:column="15"/></name> <argument_list pos:line="22" pos:column="16">(<argument><expr><name pos:line="22" pos:column="17">type<pos:position pos:line="22" pos:column="21"/></name> <operator pos:line="22" pos:column="22">!=<pos:position pos:line="22" pos:column="24"/></operator> <name pos:line="22" pos:column="25">NULL<pos:position pos:line="22" pos:column="29"/></name></expr></argument>)<pos:position pos:line="22" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="31"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="24" pos:column="9">APPEND<pos:position pos:line="24" pos:column="15"/></name> <argument_list pos:line="24" pos:column="16">(<argument><expr><name pos:line="24" pos:column="17">hostname<pos:position pos:line="24" pos:column="25"/></name></expr></argument>)<pos:position pos:line="24" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="27"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="25" pos:column="9">APPEND<pos:position pos:line="25" pos:column="15"/></name> <argument_list pos:line="25" pos:column="16">(<argument><expr><name pos:line="25" pos:column="17">separator<pos:position pos:line="25" pos:column="26"/></name></expr></argument>)<pos:position pos:line="25" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="28"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="26" pos:column="9">APPEND<pos:position pos:line="26" pos:column="15"/></name> <argument_list pos:line="26" pos:column="16">(<argument><expr><name pos:line="26" pos:column="17">plugin<pos:position pos:line="26" pos:column="23"/></name></expr></argument>)<pos:position pos:line="26" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="25"/></expr_stmt>
	<if pos:line="27" pos:column="9">if <condition pos:line="27" pos:column="12">(<expr><operator pos:line="27" pos:column="13">(<pos:position pos:line="27" pos:column="14"/></operator><name pos:line="27" pos:column="14">plugin_instance<pos:position pos:line="27" pos:column="29"/></name> <operator pos:line="27" pos:column="30">!=<pos:position pos:line="27" pos:column="32"/></operator> <name pos:line="27" pos:column="33">NULL<pos:position pos:line="27" pos:column="37"/></name><operator pos:line="27" pos:column="37">)<pos:position pos:line="27" pos:column="38"/></operator> <operator pos:line="27" pos:column="39">&amp;&amp;<pos:position pos:line="27" pos:column="49"/></operator> <operator pos:line="27" pos:column="42">(<pos:position pos:line="27" pos:column="43"/></operator><name><name pos:line="27" pos:column="43">plugin_instance<pos:position pos:line="27" pos:column="58"/></name><index pos:line="27" pos:column="58">[<expr><literal type="number" pos:line="27" pos:column="59">0<pos:position pos:line="27" pos:column="60"/></literal></expr>]<pos:position pos:line="27" pos:column="61"/></index></name> <operator pos:line="27" pos:column="62">!=<pos:position pos:line="27" pos:column="64"/></operator> <literal type="number" pos:line="27" pos:column="65">0<pos:position pos:line="27" pos:column="66"/></literal><operator pos:line="27" pos:column="66">)<pos:position pos:line="27" pos:column="67"/></operator></expr>)<pos:position pos:line="27" pos:column="68"/></condition><then pos:line="27" pos:column="68">
	<block pos:line="28" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="29" pos:column="17">APPEND<pos:position pos:line="29" pos:column="23"/></name> <argument_list pos:line="29" pos:column="24">(<argument><expr><literal type="string" pos:line="29" pos:column="25">"-"<pos:position pos:line="29" pos:column="28"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="30"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="30" pos:column="17">APPEND<pos:position pos:line="30" pos:column="23"/></name> <argument_list pos:line="30" pos:column="24">(<argument><expr><name pos:line="30" pos:column="25">plugin_instance<pos:position pos:line="30" pos:column="40"/></name></expr></argument>)<pos:position pos:line="30" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="42"/></expr_stmt>
	}<pos:position pos:line="31" pos:column="10"/></block></then></if>
	<expr_stmt><expr><call><name pos:line="32" pos:column="9">APPEND<pos:position pos:line="32" pos:column="15"/></name> <argument_list pos:line="32" pos:column="16">(<argument><expr><name pos:line="32" pos:column="17">separator<pos:position pos:line="32" pos:column="26"/></name></expr></argument>)<pos:position pos:line="32" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="28"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="33" pos:column="9">APPEND<pos:position pos:line="33" pos:column="15"/></name> <argument_list pos:line="33" pos:column="16">(<argument><expr><name pos:line="33" pos:column="17">type<pos:position pos:line="33" pos:column="21"/></name></expr></argument>)<pos:position pos:line="33" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="23"/></expr_stmt>
	<if pos:line="34" pos:column="9">if <condition pos:line="34" pos:column="12">(<expr><operator pos:line="34" pos:column="13">(<pos:position pos:line="34" pos:column="14"/></operator><name pos:line="34" pos:column="14">type_instance<pos:position pos:line="34" pos:column="27"/></name> <operator pos:line="34" pos:column="28">!=<pos:position pos:line="34" pos:column="30"/></operator> <name pos:line="34" pos:column="31">NULL<pos:position pos:line="34" pos:column="35"/></name><operator pos:line="34" pos:column="35">)<pos:position pos:line="34" pos:column="36"/></operator> <operator pos:line="34" pos:column="37">&amp;&amp;<pos:position pos:line="34" pos:column="47"/></operator> <operator pos:line="34" pos:column="40">(<pos:position pos:line="34" pos:column="41"/></operator><name><name pos:line="34" pos:column="41">type_instance<pos:position pos:line="34" pos:column="54"/></name><index pos:line="34" pos:column="54">[<expr><literal type="number" pos:line="34" pos:column="55">0<pos:position pos:line="34" pos:column="56"/></literal></expr>]<pos:position pos:line="34" pos:column="57"/></index></name> <operator pos:line="34" pos:column="58">!=<pos:position pos:line="34" pos:column="60"/></operator> <literal type="number" pos:line="34" pos:column="61">0<pos:position pos:line="34" pos:column="62"/></literal><operator pos:line="34" pos:column="62">)<pos:position pos:line="34" pos:column="63"/></operator></expr>)<pos:position pos:line="34" pos:column="64"/></condition><then pos:line="34" pos:column="64">
	<block pos:line="35" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="36" pos:column="17">APPEND<pos:position pos:line="36" pos:column="23"/></name> <argument_list pos:line="36" pos:column="24">(<argument><expr><literal type="string" pos:line="36" pos:column="25">"-"<pos:position pos:line="36" pos:column="28"/></literal></expr></argument>)<pos:position pos:line="36" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="30"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="37" pos:column="17">APPEND<pos:position pos:line="37" pos:column="23"/></name> <argument_list pos:line="37" pos:column="24">(<argument><expr><name pos:line="37" pos:column="25">type_instance<pos:position pos:line="37" pos:column="38"/></name></expr></argument>)<pos:position pos:line="37" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="40"/></expr_stmt>
	}<pos:position pos:line="38" pos:column="10"/></block></then></if>
	<expr_stmt><expr><call><name pos:line="39" pos:column="9">assert<pos:position pos:line="39" pos:column="15"/></name> <argument_list pos:line="39" pos:column="16">(<argument><expr><name pos:line="39" pos:column="17">buffer_size<pos:position pos:line="39" pos:column="28"/></name> <operator pos:line="39" pos:column="29">&gt;<pos:position pos:line="39" pos:column="33"/></operator> <literal type="number" pos:line="39" pos:column="31">0<pos:position pos:line="39" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="39" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="34"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="40" pos:column="9">buffer<pos:position pos:line="40" pos:column="15"/></name><index pos:line="40" pos:column="15">[<expr><literal type="number" pos:line="40" pos:column="16">0<pos:position pos:line="40" pos:column="17"/></literal></expr>]<pos:position pos:line="40" pos:column="18"/></index></name> <operator pos:line="40" pos:column="19">=<pos:position pos:line="40" pos:column="20"/></operator> <literal type="number" pos:line="40" pos:column="21">0<pos:position pos:line="40" pos:column="22"/></literal></expr>;<pos:position pos:line="40" pos:column="23"/></expr_stmt>

<cpp:undef pos:line="42" pos:column="1">#<cpp:directive pos:line="42" pos:column="2">undef<pos:position pos:line="42" pos:column="7"/></cpp:directive> <name pos:line="42" pos:column="8">APPEND<pos:position pos:line="42" pos:column="14"/></name></cpp:undef>
	<return pos:line="43" pos:column="9">return <expr><operator pos:line="43" pos:column="16">(<pos:position pos:line="43" pos:column="17"/></operator><literal type="number" pos:line="43" pos:column="17">0<pos:position pos:line="43" pos:column="18"/></literal><operator pos:line="43" pos:column="18">)<pos:position pos:line="43" pos:column="19"/></operator></expr>;<pos:position pos:line="43" pos:column="20"/></return>
}<pos:position pos:line="44" pos:column="2"/></block></function></unit>
