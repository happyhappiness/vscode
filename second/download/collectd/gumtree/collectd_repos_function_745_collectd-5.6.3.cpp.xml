<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_745_collectd-5.6.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">handle_ipv6<pos:position pos:line="1" pos:column="23"/></name><parameter_list pos:line="1" pos:column="23">(<parameter><decl><type><name><name pos:line="1" pos:column="24">struct<pos:position pos:line="1" pos:column="30"/></name> <name pos:line="1" pos:column="31">ip6_hdr<pos:position pos:line="1" pos:column="38"/></name></name> <modifier pos:line="1" pos:column="39">*<pos:position pos:line="1" pos:column="40"/></modifier></type><name pos:line="1" pos:column="40">ipv6<pos:position pos:line="1" pos:column="44"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="46">int<pos:position pos:line="1" pos:column="49"/></name></type> <name pos:line="1" pos:column="50">len<pos:position pos:line="1" pos:column="53"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="54"/></parameter_list> <block pos:line="1" pos:column="55">{
  <decl_stmt><decl><type><name pos:line="2" pos:column="3">char<pos:position pos:line="2" pos:column="7"/></name></type> <name><name pos:line="2" pos:column="8">buf<pos:position pos:line="2" pos:column="11"/></name><index pos:line="2" pos:column="11">[<expr><name pos:line="2" pos:column="12">PCAP_SNAPLEN<pos:position pos:line="2" pos:column="24"/></name></expr>]<pos:position pos:line="2" pos:column="25"/></index></name></decl>;<pos:position pos:line="2" pos:column="26"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">unsigned<pos:position pos:line="3" pos:column="11"/></name> <name pos:line="3" pos:column="12">int<pos:position pos:line="3" pos:column="15"/></name></type> <name pos:line="3" pos:column="16">offset<pos:position pos:line="3" pos:column="22"/></name></decl>;<pos:position pos:line="3" pos:column="23"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">int<pos:position pos:line="4" pos:column="6"/></name></type> <name pos:line="4" pos:column="7">nexthdr<pos:position pos:line="4" pos:column="14"/></name></decl>;<pos:position pos:line="4" pos:column="15"/></decl_stmt>

  <decl_stmt><decl><type><name><name pos:line="6" pos:column="3">struct<pos:position pos:line="6" pos:column="9"/></name> <name pos:line="6" pos:column="10">in6_addr<pos:position pos:line="6" pos:column="18"/></name></name></type> <name pos:line="6" pos:column="19">c_src_addr<pos:position pos:line="6" pos:column="29"/></name></decl>;<pos:position pos:line="6" pos:column="30"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">uint16_t<pos:position pos:line="7" pos:column="11"/></name></type> <name pos:line="7" pos:column="12">payload_len<pos:position pos:line="7" pos:column="23"/></name></decl>;<pos:position pos:line="7" pos:column="24"/></decl_stmt>

  <if pos:line="9" pos:column="3">if <condition pos:line="9" pos:column="6">(<expr><literal type="number" pos:line="9" pos:column="7">0<pos:position pos:line="9" pos:column="8"/></literal> <operator pos:line="9" pos:column="9">&gt;<pos:position pos:line="9" pos:column="13"/></operator> <name pos:line="9" pos:column="11">len<pos:position pos:line="9" pos:column="14"/></name></expr>)<pos:position pos:line="9" pos:column="15"/></condition><then pos:line="9" pos:column="15">
    <block type="pseudo"><return pos:line="10" pos:column="5">return <expr><operator pos:line="10" pos:column="12">(<pos:position pos:line="10" pos:column="13"/></operator><literal type="number" pos:line="10" pos:column="13">0<pos:position pos:line="10" pos:column="14"/></literal><operator pos:line="10" pos:column="14">)<pos:position pos:line="10" pos:column="15"/></operator></expr>;<pos:position pos:line="10" pos:column="16"/></return></block></then></if>

  <expr_stmt><expr><name pos:line="12" pos:column="3">offset<pos:position pos:line="12" pos:column="9"/></name> <operator pos:line="12" pos:column="10">=<pos:position pos:line="12" pos:column="11"/></operator> <sizeof pos:line="12" pos:column="12">sizeof<argument_list pos:line="12" pos:column="18">(<argument><expr pos:line="12" pos:column="19">struct <name pos:line="12" pos:column="26">ip6_hdr<pos:position pos:line="12" pos:column="33"/></name></expr></argument>)<pos:position pos:line="12" pos:column="34"/></argument_list></sizeof></expr>;<pos:position pos:line="12" pos:column="35"/></expr_stmt>
  <expr_stmt><expr><name pos:line="13" pos:column="3">nexthdr<pos:position pos:line="13" pos:column="10"/></name> <operator pos:line="13" pos:column="11">=<pos:position pos:line="13" pos:column="12"/></operator> <name><name pos:line="13" pos:column="13">ipv6<pos:position pos:line="13" pos:column="17"/></name><operator pos:line="13" pos:column="17">-&gt;<pos:position pos:line="13" pos:column="22"/></operator><name pos:line="13" pos:column="19">ip6_nxt<pos:position pos:line="13" pos:column="26"/></name></name></expr>;<pos:position pos:line="13" pos:column="27"/></expr_stmt>
  <expr_stmt><expr><name pos:line="14" pos:column="3">c_src_addr<pos:position pos:line="14" pos:column="13"/></name> <operator pos:line="14" pos:column="14">=<pos:position pos:line="14" pos:column="15"/></operator> <name><name pos:line="14" pos:column="16">ipv6<pos:position pos:line="14" pos:column="20"/></name><operator pos:line="14" pos:column="20">-&gt;<pos:position pos:line="14" pos:column="25"/></operator><name pos:line="14" pos:column="22">ip6_src<pos:position pos:line="14" pos:column="29"/></name></name></expr>;<pos:position pos:line="14" pos:column="30"/></expr_stmt>
  <expr_stmt><expr><name pos:line="15" pos:column="3">payload_len<pos:position pos:line="15" pos:column="14"/></name> <operator pos:line="15" pos:column="15">=<pos:position pos:line="15" pos:column="16"/></operator> <call><name pos:line="15" pos:column="17">ntohs<pos:position pos:line="15" pos:column="22"/></name><argument_list pos:line="15" pos:column="22">(<argument><expr><name><name pos:line="15" pos:column="23">ipv6<pos:position pos:line="15" pos:column="27"/></name><operator pos:line="15" pos:column="27">-&gt;<pos:position pos:line="15" pos:column="32"/></operator><name pos:line="15" pos:column="29">ip6_plen<pos:position pos:line="15" pos:column="37"/></name></name></expr></argument>)<pos:position pos:line="15" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="39"/></expr_stmt>

  <if pos:line="17" pos:column="3">if <condition pos:line="17" pos:column="6">(<expr><call><name pos:line="17" pos:column="7">ignore_list_match<pos:position pos:line="17" pos:column="24"/></name><argument_list pos:line="17" pos:column="24">(<argument><expr><operator pos:line="17" pos:column="25">&amp;<pos:position pos:line="17" pos:column="30"/></operator><name pos:line="17" pos:column="26">c_src_addr<pos:position pos:line="17" pos:column="36"/></name></expr></argument>)<pos:position pos:line="17" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="17" pos:column="38"/></condition><then pos:line="17" pos:column="38">
    <block type="pseudo"><return pos:line="18" pos:column="5">return <expr><operator pos:line="18" pos:column="12">(<pos:position pos:line="18" pos:column="13"/></operator><literal type="number" pos:line="18" pos:column="13">0<pos:position pos:line="18" pos:column="14"/></literal><operator pos:line="18" pos:column="14">)<pos:position pos:line="18" pos:column="15"/></operator></expr>;<pos:position pos:line="18" pos:column="16"/></return></block></then></if>

  <comment type="block" pos:line="20" pos:column="3">/* Parse extension headers. This only handles the standard headers, as
   * defined in RFC 2460, correctly. Fragments are discarded. */</comment>
  <while pos:line="22" pos:column="3">while <condition pos:line="22" pos:column="9">(<expr><operator pos:line="22" pos:column="10">(<pos:position pos:line="22" pos:column="11"/></operator><name pos:line="22" pos:column="11">IPPROTO_ROUTING<pos:position pos:line="22" pos:column="26"/></name> <operator pos:line="22" pos:column="27">==<pos:position pos:line="22" pos:column="29"/></operator> <name pos:line="22" pos:column="30">nexthdr<pos:position pos:line="22" pos:column="37"/></name><operator pos:line="22" pos:column="37">)<pos:position pos:line="22" pos:column="38"/></operator>     <comment type="block" pos:line="22" pos:column="43">/* routing header */</comment>
         <operator pos:line="23" pos:column="10">||<pos:position pos:line="23" pos:column="12"/></operator> <operator pos:line="23" pos:column="13">(<pos:position pos:line="23" pos:column="14"/></operator><name pos:line="23" pos:column="14">IPPROTO_HOPOPTS<pos:position pos:line="23" pos:column="29"/></name> <operator pos:line="23" pos:column="30">==<pos:position pos:line="23" pos:column="32"/></operator> <name pos:line="23" pos:column="33">nexthdr<pos:position pos:line="23" pos:column="40"/></name><operator pos:line="23" pos:column="40">)<pos:position pos:line="23" pos:column="41"/></operator>  <comment type="block" pos:line="23" pos:column="43">/* Hop-by-Hop options. */</comment>
         <operator pos:line="24" pos:column="10">||<pos:position pos:line="24" pos:column="12"/></operator> <operator pos:line="24" pos:column="13">(<pos:position pos:line="24" pos:column="14"/></operator><name pos:line="24" pos:column="14">IPPROTO_FRAGMENT<pos:position pos:line="24" pos:column="30"/></name> <operator pos:line="24" pos:column="31">==<pos:position pos:line="24" pos:column="33"/></operator> <name pos:line="24" pos:column="34">nexthdr<pos:position pos:line="24" pos:column="41"/></name><operator pos:line="24" pos:column="41">)<pos:position pos:line="24" pos:column="42"/></operator> <comment type="block" pos:line="24" pos:column="43">/* fragmentation header. */</comment>
         <operator pos:line="25" pos:column="10">||<pos:position pos:line="25" pos:column="12"/></operator> <operator pos:line="25" pos:column="13">(<pos:position pos:line="25" pos:column="14"/></operator><name pos:line="25" pos:column="14">IPPROTO_DSTOPTS<pos:position pos:line="25" pos:column="29"/></name> <operator pos:line="25" pos:column="30">==<pos:position pos:line="25" pos:column="32"/></operator> <name pos:line="25" pos:column="33">nexthdr<pos:position pos:line="25" pos:column="40"/></name><operator pos:line="25" pos:column="40">)<pos:position pos:line="25" pos:column="41"/></operator>  <comment type="block" pos:line="25" pos:column="43">/* destination options. */</comment>
         <operator pos:line="26" pos:column="10">||<pos:position pos:line="26" pos:column="12"/></operator> <operator pos:line="26" pos:column="13">(<pos:position pos:line="26" pos:column="14"/></operator><name pos:line="26" pos:column="14">IPPROTO_AH<pos:position pos:line="26" pos:column="24"/></name> <operator pos:line="26" pos:column="25">==<pos:position pos:line="26" pos:column="27"/></operator> <name pos:line="26" pos:column="28">nexthdr<pos:position pos:line="26" pos:column="35"/></name><operator pos:line="26" pos:column="35">)<pos:position pos:line="26" pos:column="36"/></operator>       <comment type="block" pos:line="26" pos:column="43">/* destination options. */</comment>
         <operator pos:line="27" pos:column="10">||<pos:position pos:line="27" pos:column="12"/></operator> <operator pos:line="27" pos:column="13">(<pos:position pos:line="27" pos:column="14"/></operator><name pos:line="27" pos:column="14">IPPROTO_ESP<pos:position pos:line="27" pos:column="25"/></name> <operator pos:line="27" pos:column="26">==<pos:position pos:line="27" pos:column="28"/></operator> <name pos:line="27" pos:column="29">nexthdr<pos:position pos:line="27" pos:column="36"/></name><operator pos:line="27" pos:column="36">)<pos:position pos:line="27" pos:column="37"/></operator></expr>)<pos:position pos:line="27" pos:column="38"/></condition>     <comment type="block" pos:line="27" pos:column="43">/* encapsulating security payload. */</comment>
  <block pos:line="28" pos:column="3">{
    <decl_stmt><decl><type><name><name pos:line="29" pos:column="5">struct<pos:position pos:line="29" pos:column="11"/></name> <name pos:line="29" pos:column="12">ip6_ext<pos:position pos:line="29" pos:column="19"/></name></name></type> <name pos:line="29" pos:column="20">ext_hdr<pos:position pos:line="29" pos:column="27"/></name></decl>;<pos:position pos:line="29" pos:column="28"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="30" pos:column="5">uint16_t<pos:position pos:line="30" pos:column="13"/></name></type> <name pos:line="30" pos:column="14">ext_hdr_len<pos:position pos:line="30" pos:column="25"/></name></decl>;<pos:position pos:line="30" pos:column="26"/></decl_stmt>

    <comment type="block" pos:line="32" pos:column="5">/* Catch broken packets */</comment>
    <if pos:line="33" pos:column="5">if <condition pos:line="33" pos:column="8">(<expr><operator pos:line="33" pos:column="9">(<pos:position pos:line="33" pos:column="10"/></operator><name pos:line="33" pos:column="10">offset<pos:position pos:line="33" pos:column="16"/></name> <operator pos:line="33" pos:column="17">+<pos:position pos:line="33" pos:column="18"/></operator> <sizeof pos:line="33" pos:column="19">sizeof<argument_list pos:line="33" pos:column="25">(<argument><expr pos:line="33" pos:column="26">struct <name pos:line="33" pos:column="33">ip6_ext<pos:position pos:line="33" pos:column="40"/></name></expr></argument>)<pos:position pos:line="33" pos:column="41"/></argument_list></sizeof><operator pos:line="33" pos:column="41">)<pos:position pos:line="33" pos:column="42"/></operator> <operator pos:line="33" pos:column="43">&gt;<pos:position pos:line="33" pos:column="47"/></operator> <operator pos:line="33" pos:column="45">(<pos:position pos:line="33" pos:column="46"/></operator><name pos:line="33" pos:column="46">unsigned<pos:position pos:line="33" pos:column="54"/></name> <name pos:line="33" pos:column="55">int<pos:position pos:line="33" pos:column="58"/></name><operator pos:line="33" pos:column="58">)<pos:position pos:line="33" pos:column="59"/></operator><name pos:line="33" pos:column="59">len<pos:position pos:line="33" pos:column="62"/></name></expr>)<pos:position pos:line="33" pos:column="63"/></condition><then pos:line="33" pos:column="63">
      <block type="pseudo"><return pos:line="34" pos:column="7">return <expr><operator pos:line="34" pos:column="14">(<pos:position pos:line="34" pos:column="15"/></operator><literal type="number" pos:line="34" pos:column="15">0<pos:position pos:line="34" pos:column="16"/></literal><operator pos:line="34" pos:column="16">)<pos:position pos:line="34" pos:column="17"/></operator></expr>;<pos:position pos:line="34" pos:column="18"/></return></block></then></if>

    <comment type="block" pos:line="36" pos:column="5">/* Cannot handle fragments. */</comment>
    <if pos:line="37" pos:column="5">if <condition pos:line="37" pos:column="8">(<expr><name pos:line="37" pos:column="9">IPPROTO_FRAGMENT<pos:position pos:line="37" pos:column="25"/></name> <operator pos:line="37" pos:column="26">==<pos:position pos:line="37" pos:column="28"/></operator> <name pos:line="37" pos:column="29">nexthdr<pos:position pos:line="37" pos:column="36"/></name></expr>)<pos:position pos:line="37" pos:column="37"/></condition><then pos:line="37" pos:column="37">
      <block type="pseudo"><return pos:line="38" pos:column="7">return <expr><operator pos:line="38" pos:column="14">(<pos:position pos:line="38" pos:column="15"/></operator><literal type="number" pos:line="38" pos:column="15">0<pos:position pos:line="38" pos:column="16"/></literal><operator pos:line="38" pos:column="16">)<pos:position pos:line="38" pos:column="17"/></operator></expr>;<pos:position pos:line="38" pos:column="18"/></return></block></then></if>

    <expr_stmt><expr><call><name pos:line="40" pos:column="5">memcpy<pos:position pos:line="40" pos:column="11"/></name><argument_list pos:line="40" pos:column="11">(<argument><expr><operator pos:line="40" pos:column="12">&amp;<pos:position pos:line="40" pos:column="17"/></operator><name pos:line="40" pos:column="13">ext_hdr<pos:position pos:line="40" pos:column="20"/></name></expr></argument>, <argument><expr><operator pos:line="40" pos:column="22">(<pos:position pos:line="40" pos:column="23"/></operator><name pos:line="40" pos:column="23">char<pos:position pos:line="40" pos:column="27"/></name> <operator pos:line="40" pos:column="28">*<pos:position pos:line="40" pos:column="29"/></operator><operator pos:line="40" pos:column="29">)<pos:position pos:line="40" pos:column="30"/></operator><name pos:line="40" pos:column="30">ipv6<pos:position pos:line="40" pos:column="34"/></name> <operator pos:line="40" pos:column="35">+<pos:position pos:line="40" pos:column="36"/></operator> <name pos:line="40" pos:column="37">offset<pos:position pos:line="40" pos:column="43"/></name></expr></argument>, <argument><expr><sizeof pos:line="40" pos:column="45">sizeof<argument_list pos:line="40" pos:column="51">(<argument><expr pos:line="40" pos:column="52">struct <name pos:line="40" pos:column="59">ip6_ext<pos:position pos:line="40" pos:column="66"/></name></expr></argument>)<pos:position pos:line="40" pos:column="67"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="40" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="69"/></expr_stmt>
    <expr_stmt><expr><name pos:line="41" pos:column="5">nexthdr<pos:position pos:line="41" pos:column="12"/></name> <operator pos:line="41" pos:column="13">=<pos:position pos:line="41" pos:column="14"/></operator> <name><name pos:line="41" pos:column="15">ext_hdr<pos:position pos:line="41" pos:column="22"/></name><operator pos:line="41" pos:column="22">.<pos:position pos:line="41" pos:column="23"/></operator><name pos:line="41" pos:column="23">ip6e_nxt<pos:position pos:line="41" pos:column="31"/></name></name></expr>;<pos:position pos:line="41" pos:column="32"/></expr_stmt>
    <expr_stmt><expr><name pos:line="42" pos:column="5">ext_hdr_len<pos:position pos:line="42" pos:column="16"/></name> <operator pos:line="42" pos:column="17">=<pos:position pos:line="42" pos:column="18"/></operator> <operator pos:line="42" pos:column="19">(<pos:position pos:line="42" pos:column="20"/></operator><literal type="number" pos:line="42" pos:column="20">8<pos:position pos:line="42" pos:column="21"/></literal> <operator pos:line="42" pos:column="22">*<pos:position pos:line="42" pos:column="23"/></operator> <operator pos:line="42" pos:column="24">(<pos:position pos:line="42" pos:column="25"/></operator><call><name pos:line="42" pos:column="25">ntohs<pos:position pos:line="42" pos:column="30"/></name><argument_list pos:line="42" pos:column="30">(<argument><expr><name><name pos:line="42" pos:column="31">ext_hdr<pos:position pos:line="42" pos:column="38"/></name><operator pos:line="42" pos:column="38">.<pos:position pos:line="42" pos:column="39"/></operator><name pos:line="42" pos:column="39">ip6e_len<pos:position pos:line="42" pos:column="47"/></name></name></expr></argument>)<pos:position pos:line="42" pos:column="48"/></argument_list></call> <operator pos:line="42" pos:column="49">+<pos:position pos:line="42" pos:column="50"/></operator> <literal type="number" pos:line="42" pos:column="51">1<pos:position pos:line="42" pos:column="52"/></literal><operator pos:line="42" pos:column="52">)<pos:position pos:line="42" pos:column="53"/></operator><operator pos:line="42" pos:column="53">)<pos:position pos:line="42" pos:column="54"/></operator></expr>;<pos:position pos:line="42" pos:column="55"/></expr_stmt>

    <comment type="block" pos:line="44" pos:column="5">/* This header is longer than the packets payload.. WTF? */</comment>
    <if pos:line="45" pos:column="5">if <condition pos:line="45" pos:column="8">(<expr><name pos:line="45" pos:column="9">ext_hdr_len<pos:position pos:line="45" pos:column="20"/></name> <operator pos:line="45" pos:column="21">&gt;<pos:position pos:line="45" pos:column="25"/></operator> <name pos:line="45" pos:column="23">payload_len<pos:position pos:line="45" pos:column="34"/></name></expr>)<pos:position pos:line="45" pos:column="35"/></condition><then pos:line="45" pos:column="35">
      <block type="pseudo"><return pos:line="46" pos:column="7">return <expr><operator pos:line="46" pos:column="14">(<pos:position pos:line="46" pos:column="15"/></operator><literal type="number" pos:line="46" pos:column="15">0<pos:position pos:line="46" pos:column="16"/></literal><operator pos:line="46" pos:column="16">)<pos:position pos:line="46" pos:column="17"/></operator></expr>;<pos:position pos:line="46" pos:column="18"/></return></block></then></if>

    <expr_stmt><expr><name pos:line="48" pos:column="5">offset<pos:position pos:line="48" pos:column="11"/></name> <operator pos:line="48" pos:column="12">+=<pos:position pos:line="48" pos:column="14"/></operator> <name pos:line="48" pos:column="15">ext_hdr_len<pos:position pos:line="48" pos:column="26"/></name></expr>;<pos:position pos:line="48" pos:column="27"/></expr_stmt>
    <expr_stmt><expr><name pos:line="49" pos:column="5">payload_len<pos:position pos:line="49" pos:column="16"/></name> <operator pos:line="49" pos:column="17">-=<pos:position pos:line="49" pos:column="19"/></operator> <name pos:line="49" pos:column="20">ext_hdr_len<pos:position pos:line="49" pos:column="31"/></name></expr>;<pos:position pos:line="49" pos:column="32"/></expr_stmt>
  }<pos:position pos:line="50" pos:column="4"/></block></while> <comment type="block" pos:line="50" pos:column="5">/* while */</comment>

  <comment type="block" pos:line="52" pos:column="3">/* Catch broken and empty packets */</comment>
  <if pos:line="53" pos:column="3">if <condition pos:line="53" pos:column="6">(<expr><operator pos:line="53" pos:column="7">(<pos:position pos:line="53" pos:column="8"/></operator><operator pos:line="53" pos:column="8">(<pos:position pos:line="53" pos:column="9"/></operator><name pos:line="53" pos:column="9">offset<pos:position pos:line="53" pos:column="15"/></name> <operator pos:line="53" pos:column="16">+<pos:position pos:line="53" pos:column="17"/></operator> <name pos:line="53" pos:column="18">payload_len<pos:position pos:line="53" pos:column="29"/></name><operator pos:line="53" pos:column="29">)<pos:position pos:line="53" pos:column="30"/></operator> <operator pos:line="53" pos:column="31">&gt;<pos:position pos:line="53" pos:column="35"/></operator> <operator pos:line="53" pos:column="33">(<pos:position pos:line="53" pos:column="34"/></operator><name pos:line="53" pos:column="34">unsigned<pos:position pos:line="53" pos:column="42"/></name> <name pos:line="53" pos:column="43">int<pos:position pos:line="53" pos:column="46"/></name><operator pos:line="53" pos:column="46">)<pos:position pos:line="53" pos:column="47"/></operator><name pos:line="53" pos:column="47">len<pos:position pos:line="53" pos:column="50"/></name><operator pos:line="53" pos:column="50">)<pos:position pos:line="53" pos:column="51"/></operator> <operator pos:line="53" pos:column="52">||<pos:position pos:line="53" pos:column="54"/></operator> <operator pos:line="53" pos:column="55">(<pos:position pos:line="53" pos:column="56"/></operator><name pos:line="53" pos:column="56">payload_len<pos:position pos:line="53" pos:column="67"/></name> <operator pos:line="53" pos:column="68">==<pos:position pos:line="53" pos:column="70"/></operator> <literal type="number" pos:line="53" pos:column="71">0<pos:position pos:line="53" pos:column="72"/></literal><operator pos:line="53" pos:column="72">)<pos:position pos:line="53" pos:column="73"/></operator> <operator pos:line="53" pos:column="74">||<pos:position pos:line="53" pos:column="76"/></operator>
      <operator pos:line="54" pos:column="7">(<pos:position pos:line="54" pos:column="8"/></operator><name pos:line="54" pos:column="8">payload_len<pos:position pos:line="54" pos:column="19"/></name> <operator pos:line="54" pos:column="20">&gt;<pos:position pos:line="54" pos:column="24"/></operator> <name pos:line="54" pos:column="22">PCAP_SNAPLEN<pos:position pos:line="54" pos:column="34"/></name><operator pos:line="54" pos:column="34">)<pos:position pos:line="54" pos:column="35"/></operator></expr>)<pos:position pos:line="54" pos:column="36"/></condition><then pos:line="54" pos:column="36">
    <block type="pseudo"><return pos:line="55" pos:column="5">return <expr><operator pos:line="55" pos:column="12">(<pos:position pos:line="55" pos:column="13"/></operator><literal type="number" pos:line="55" pos:column="13">0<pos:position pos:line="55" pos:column="14"/></literal><operator pos:line="55" pos:column="14">)<pos:position pos:line="55" pos:column="15"/></operator></expr>;<pos:position pos:line="55" pos:column="16"/></return></block></then></if>

  <if pos:line="57" pos:column="3">if <condition pos:line="57" pos:column="6">(<expr><name pos:line="57" pos:column="7">IPPROTO_UDP<pos:position pos:line="57" pos:column="18"/></name> <operator pos:line="57" pos:column="19">!=<pos:position pos:line="57" pos:column="21"/></operator> <name pos:line="57" pos:column="22">nexthdr<pos:position pos:line="57" pos:column="29"/></name></expr>)<pos:position pos:line="57" pos:column="30"/></condition><then pos:line="57" pos:column="30">
    <block type="pseudo"><return pos:line="58" pos:column="5">return <expr><operator pos:line="58" pos:column="12">(<pos:position pos:line="58" pos:column="13"/></operator><literal type="number" pos:line="58" pos:column="13">0<pos:position pos:line="58" pos:column="14"/></literal><operator pos:line="58" pos:column="14">)<pos:position pos:line="58" pos:column="15"/></operator></expr>;<pos:position pos:line="58" pos:column="16"/></return></block></then></if>

  <expr_stmt><expr><call><name pos:line="60" pos:column="3">memcpy<pos:position pos:line="60" pos:column="9"/></name><argument_list pos:line="60" pos:column="9">(<argument><expr><name pos:line="60" pos:column="10">buf<pos:position pos:line="60" pos:column="13"/></name></expr></argument>, <argument><expr><operator pos:line="60" pos:column="15">(<pos:position pos:line="60" pos:column="16"/></operator><name pos:line="60" pos:column="16">char<pos:position pos:line="60" pos:column="20"/></name> <operator pos:line="60" pos:column="21">*<pos:position pos:line="60" pos:column="22"/></operator><operator pos:line="60" pos:column="22">)<pos:position pos:line="60" pos:column="23"/></operator><name pos:line="60" pos:column="23">ipv6<pos:position pos:line="60" pos:column="27"/></name> <operator pos:line="60" pos:column="28">+<pos:position pos:line="60" pos:column="29"/></operator> <name pos:line="60" pos:column="30">offset<pos:position pos:line="60" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="60" pos:column="38">payload_len<pos:position pos:line="60" pos:column="49"/></name></expr></argument>)<pos:position pos:line="60" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="51"/></expr_stmt>
  <if pos:line="61" pos:column="3">if <condition pos:line="61" pos:column="6">(<expr><call><name pos:line="61" pos:column="7">handle_udp<pos:position pos:line="61" pos:column="17"/></name><argument_list pos:line="61" pos:column="17">(<argument><expr><operator pos:line="61" pos:column="18">(<pos:position pos:line="61" pos:column="19"/></operator>struct <name pos:line="61" pos:column="26">udphdr<pos:position pos:line="61" pos:column="32"/></name> <operator pos:line="61" pos:column="33">*<pos:position pos:line="61" pos:column="34"/></operator><operator pos:line="61" pos:column="34">)<pos:position pos:line="61" pos:column="35"/></operator><name pos:line="61" pos:column="35">buf<pos:position pos:line="61" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="61" pos:column="40">payload_len<pos:position pos:line="61" pos:column="51"/></name></expr></argument>)<pos:position pos:line="61" pos:column="52"/></argument_list></call> <operator pos:line="61" pos:column="53">==<pos:position pos:line="61" pos:column="55"/></operator> <literal type="number" pos:line="61" pos:column="56">0<pos:position pos:line="61" pos:column="57"/></literal></expr>)<pos:position pos:line="61" pos:column="58"/></condition><then pos:line="61" pos:column="58">
    <block type="pseudo"><return pos:line="62" pos:column="5">return <expr><operator pos:line="62" pos:column="12">(<pos:position pos:line="62" pos:column="13"/></operator><literal type="number" pos:line="62" pos:column="13">0<pos:position pos:line="62" pos:column="14"/></literal><operator pos:line="62" pos:column="14">)<pos:position pos:line="62" pos:column="15"/></operator></expr>;<pos:position pos:line="62" pos:column="16"/></return></block></then></if>

  <return pos:line="64" pos:column="3">return <expr><operator pos:line="64" pos:column="10">(<pos:position pos:line="64" pos:column="11"/></operator><literal type="number" pos:line="64" pos:column="11">1<pos:position pos:line="64" pos:column="12"/></literal><operator pos:line="64" pos:column="12">)<pos:position pos:line="64" pos:column="13"/></operator></expr>;<pos:position pos:line="64" pos:column="14"/></return> <comment type="block" pos:line="64" pos:column="15">/* Success */</comment>
}<pos:position pos:line="65" pos:column="2"/></block></function></unit>
