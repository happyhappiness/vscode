<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_2719_collectd-5.7.1.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">plugin_register_init<pos:position pos:line="1" pos:column="25"/></name><parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><specifier pos:line="1" pos:column="26">const<pos:position pos:line="1" pos:column="31"/></specifier> <name pos:line="1" pos:column="32">char<pos:position pos:line="1" pos:column="36"/></name> <modifier pos:line="1" pos:column="37">*<pos:position pos:line="1" pos:column="38"/></modifier></type><name pos:line="1" pos:column="38">name<pos:position pos:line="1" pos:column="42"/></name></decl></parameter>, <parameter><function_decl><type><name pos:line="1" pos:column="44">int<pos:position pos:line="1" pos:column="47"/></name></type> (<modifier pos:line="1" pos:column="49">*<pos:position pos:line="1" pos:column="50"/></modifier><name pos:line="1" pos:column="50">callback<pos:position pos:line="1" pos:column="58"/></name>)<parameter_list pos:line="1" pos:column="59">(<parameter><decl><type><name pos:line="1" pos:column="60">void<pos:position pos:line="1" pos:column="64"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="65"/></parameter_list></function_decl></parameter>)<pos:position pos:line="1" pos:column="66"/></parameter_list> <block pos:line="1" pos:column="67">{
  <return pos:line="2" pos:column="3">return <expr><operator pos:line="2" pos:column="10">(<pos:position pos:line="2" pos:column="11"/></operator><call><name pos:line="2" pos:column="11">create_register_callback<pos:position pos:line="2" pos:column="35"/></name><argument_list pos:line="2" pos:column="35">(<argument><expr><operator pos:line="2" pos:column="36">&amp;<pos:position pos:line="2" pos:column="41"/></operator><name pos:line="2" pos:column="37">list_init<pos:position pos:line="2" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="2" pos:column="48">name<pos:position pos:line="2" pos:column="52"/></name></expr></argument>, <argument><expr><operator pos:line="2" pos:column="54">(<pos:position pos:line="2" pos:column="55"/></operator><name pos:line="2" pos:column="55">void<pos:position pos:line="2" pos:column="59"/></name> <operator pos:line="2" pos:column="60">*<pos:position pos:line="2" pos:column="61"/></operator><operator pos:line="2" pos:column="61">)<pos:position pos:line="2" pos:column="62"/></operator><name pos:line="2" pos:column="62">callback<pos:position pos:line="2" pos:column="70"/></name></expr></argument>,
                                   <comment type="block" pos:line="3" pos:column="36">/* user_data = */</comment> <argument><expr><name pos:line="3" pos:column="54">NULL<pos:position pos:line="3" pos:column="58"/></name></expr></argument>)<pos:position pos:line="3" pos:column="59"/></argument_list></call><operator pos:line="3" pos:column="59">)<pos:position pos:line="3" pos:column="60"/></operator></expr>;<pos:position pos:line="3" pos:column="61"/></return>
}<pos:position pos:line="4" pos:column="2"/></block></function></unit>
