<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_592_collectd-4.2.5.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">parse_part_values<pos:position pos:line="1" pos:column="29"/></name> <parameter_list pos:line="1" pos:column="30">(<parameter><decl><type><name pos:line="1" pos:column="31">void<pos:position pos:line="1" pos:column="35"/></name> <modifier pos:line="1" pos:column="36">*<pos:position pos:line="1" pos:column="37"/></modifier><modifier pos:line="1" pos:column="37">*<pos:position pos:line="1" pos:column="38"/></modifier></type><name pos:line="1" pos:column="38">ret_buffer<pos:position pos:line="1" pos:column="48"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="50">int<pos:position pos:line="1" pos:column="53"/></name> <modifier pos:line="1" pos:column="54">*<pos:position pos:line="1" pos:column="55"/></modifier></type><name pos:line="1" pos:column="55">ret_buffer_len<pos:position pos:line="1" pos:column="69"/></name></decl></parameter>,
		<parameter><decl><type><name pos:line="2" pos:column="17">value_t<pos:position pos:line="2" pos:column="24"/></name> <modifier pos:line="2" pos:column="25">*<pos:position pos:line="2" pos:column="26"/></modifier><modifier pos:line="2" pos:column="26">*<pos:position pos:line="2" pos:column="27"/></modifier></type><name pos:line="2" pos:column="27">ret_values<pos:position pos:line="2" pos:column="37"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="39">int<pos:position pos:line="2" pos:column="42"/></name> <modifier pos:line="2" pos:column="43">*<pos:position pos:line="2" pos:column="44"/></modifier></type><name pos:line="2" pos:column="44">ret_num_values<pos:position pos:line="2" pos:column="58"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="59"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">char<pos:position pos:line="4" pos:column="13"/></name> <modifier pos:line="4" pos:column="14">*<pos:position pos:line="4" pos:column="15"/></modifier></type><name pos:line="4" pos:column="15">buffer<pos:position pos:line="4" pos:column="21"/></name> <init pos:line="4" pos:column="22">= <expr><operator pos:line="4" pos:column="24">*<pos:position pos:line="4" pos:column="25"/></operator><name pos:line="4" pos:column="25">ret_buffer<pos:position pos:line="4" pos:column="35"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="36"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type>   <name pos:line="5" pos:column="15">buffer_len<pos:position pos:line="5" pos:column="25"/></name> <init pos:line="5" pos:column="26">= <expr><operator pos:line="5" pos:column="28">*<pos:position pos:line="5" pos:column="29"/></operator><name pos:line="5" pos:column="29">ret_buffer_len<pos:position pos:line="5" pos:column="43"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="44"/></decl_stmt>

	<decl_stmt><decl><type><name pos:line="7" pos:column="9">uint16_t<pos:position pos:line="7" pos:column="17"/></name></type> <name pos:line="7" pos:column="18">tmp16<pos:position pos:line="7" pos:column="23"/></name></decl>;<pos:position pos:line="7" pos:column="24"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">size_t<pos:position pos:line="8" pos:column="15"/></name></type> <name pos:line="8" pos:column="16">exp_size<pos:position pos:line="8" pos:column="24"/></name></decl>;<pos:position pos:line="8" pos:column="25"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="9" pos:column="9">int<pos:position pos:line="9" pos:column="12"/></name></type>   <name pos:line="9" pos:column="15">i<pos:position pos:line="9" pos:column="16"/></name></decl>;<pos:position pos:line="9" pos:column="17"/></decl_stmt>

	<decl_stmt><decl><type><name pos:line="11" pos:column="9">uint16_t<pos:position pos:line="11" pos:column="17"/></name></type> <name pos:line="11" pos:column="18">pkg_length<pos:position pos:line="11" pos:column="28"/></name></decl>;<pos:position pos:line="11" pos:column="29"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="12" pos:column="9">uint16_t<pos:position pos:line="12" pos:column="17"/></name></type> <name pos:line="12" pos:column="18">pkg_type<pos:position pos:line="12" pos:column="26"/></name></decl>;<pos:position pos:line="12" pos:column="27"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="13" pos:column="9">uint16_t<pos:position pos:line="13" pos:column="17"/></name></type> <name pos:line="13" pos:column="18">pkg_numval<pos:position pos:line="13" pos:column="28"/></name></decl>;<pos:position pos:line="13" pos:column="29"/></decl_stmt>

	<decl_stmt><decl><type><name pos:line="15" pos:column="9">uint8_t<pos:position pos:line="15" pos:column="16"/></name> <modifier pos:line="15" pos:column="17">*<pos:position pos:line="15" pos:column="18"/></modifier></type><name pos:line="15" pos:column="18">pkg_types<pos:position pos:line="15" pos:column="27"/></name></decl>;<pos:position pos:line="15" pos:column="28"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="16" pos:column="9">value_t<pos:position pos:line="16" pos:column="16"/></name> <modifier pos:line="16" pos:column="17">*<pos:position pos:line="16" pos:column="18"/></modifier></type><name pos:line="16" pos:column="18">pkg_values<pos:position pos:line="16" pos:column="28"/></name></decl>;<pos:position pos:line="16" pos:column="29"/></decl_stmt>

	<if pos:line="18" pos:column="9">if <condition pos:line="18" pos:column="12">(<expr><name pos:line="18" pos:column="13">buffer_len<pos:position pos:line="18" pos:column="23"/></name> <operator pos:line="18" pos:column="24">&lt;<pos:position pos:line="18" pos:column="28"/></operator> <operator pos:line="18" pos:column="26">(<pos:position pos:line="18" pos:column="27"/></operator><literal type="number" pos:line="18" pos:column="27">15<pos:position pos:line="18" pos:column="29"/></literal><operator pos:line="18" pos:column="29">)<pos:position pos:line="18" pos:column="30"/></operator></expr>)<pos:position pos:line="18" pos:column="31"/></condition><then pos:line="18" pos:column="31">
	<block pos:line="19" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="20" pos:column="17">DEBUG<pos:position pos:line="20" pos:column="22"/></name> <argument_list pos:line="20" pos:column="23">(<argument><expr><literal type="string" pos:line="20" pos:column="24">"network plugin: packet is too short: buffer_len = %i"<pos:position pos:line="20" pos:column="78"/></literal></expr></argument>,
				<argument><expr><name pos:line="21" pos:column="33">buffer_len<pos:position pos:line="21" pos:column="43"/></name></expr></argument>)<pos:position pos:line="21" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="45"/></expr_stmt>
		<return pos:line="22" pos:column="17">return <expr><operator pos:line="22" pos:column="24">(<pos:position pos:line="22" pos:column="25"/></operator><operator pos:line="22" pos:column="25">-<pos:position pos:line="22" pos:column="26"/></operator><literal type="number" pos:line="22" pos:column="26">1<pos:position pos:line="22" pos:column="27"/></literal><operator pos:line="22" pos:column="27">)<pos:position pos:line="22" pos:column="28"/></operator></expr>;<pos:position pos:line="22" pos:column="29"/></return>
	}<pos:position pos:line="23" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="25" pos:column="9">memcpy<pos:position pos:line="25" pos:column="15"/></name> <argument_list pos:line="25" pos:column="16">(<argument><expr><operator pos:line="25" pos:column="17">(<pos:position pos:line="25" pos:column="18"/></operator><name pos:line="25" pos:column="18">void<pos:position pos:line="25" pos:column="22"/></name> <operator pos:line="25" pos:column="23">*<pos:position pos:line="25" pos:column="24"/></operator><operator pos:line="25" pos:column="24">)<pos:position pos:line="25" pos:column="25"/></operator> <operator pos:line="25" pos:column="26">&amp;<pos:position pos:line="25" pos:column="31"/></operator><name pos:line="25" pos:column="27">tmp16<pos:position pos:line="25" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="34">buffer<pos:position pos:line="25" pos:column="40"/></name></expr></argument>, <argument><expr><sizeof pos:line="25" pos:column="42">sizeof <argument_list pos:line="25" pos:column="49">(<argument><expr><name pos:line="25" pos:column="50">tmp16<pos:position pos:line="25" pos:column="55"/></name></expr></argument>)<pos:position pos:line="25" pos:column="56"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="25" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="58"/></expr_stmt>
	<expr_stmt><expr><name pos:line="26" pos:column="9">buffer<pos:position pos:line="26" pos:column="15"/></name> <operator pos:line="26" pos:column="16">+=<pos:position pos:line="26" pos:column="18"/></operator> <sizeof pos:line="26" pos:column="19">sizeof <argument_list pos:line="26" pos:column="26">(<argument><expr><name pos:line="26" pos:column="27">tmp16<pos:position pos:line="26" pos:column="32"/></name></expr></argument>)<pos:position pos:line="26" pos:column="33"/></argument_list></sizeof></expr>;<pos:position pos:line="26" pos:column="34"/></expr_stmt>
	<expr_stmt><expr><name pos:line="27" pos:column="9">pkg_type<pos:position pos:line="27" pos:column="17"/></name> <operator pos:line="27" pos:column="18">=<pos:position pos:line="27" pos:column="19"/></operator> <call><name pos:line="27" pos:column="20">ntohs<pos:position pos:line="27" pos:column="25"/></name> <argument_list pos:line="27" pos:column="26">(<argument><expr><name pos:line="27" pos:column="27">tmp16<pos:position pos:line="27" pos:column="32"/></name></expr></argument>)<pos:position pos:line="27" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="34"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="29" pos:column="9">memcpy<pos:position pos:line="29" pos:column="15"/></name> <argument_list pos:line="29" pos:column="16">(<argument><expr><operator pos:line="29" pos:column="17">(<pos:position pos:line="29" pos:column="18"/></operator><name pos:line="29" pos:column="18">void<pos:position pos:line="29" pos:column="22"/></name> <operator pos:line="29" pos:column="23">*<pos:position pos:line="29" pos:column="24"/></operator><operator pos:line="29" pos:column="24">)<pos:position pos:line="29" pos:column="25"/></operator> <operator pos:line="29" pos:column="26">&amp;<pos:position pos:line="29" pos:column="31"/></operator><name pos:line="29" pos:column="27">tmp16<pos:position pos:line="29" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="34">buffer<pos:position pos:line="29" pos:column="40"/></name></expr></argument>, <argument><expr><sizeof pos:line="29" pos:column="42">sizeof <argument_list pos:line="29" pos:column="49">(<argument><expr><name pos:line="29" pos:column="50">tmp16<pos:position pos:line="29" pos:column="55"/></name></expr></argument>)<pos:position pos:line="29" pos:column="56"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="29" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="58"/></expr_stmt>
	<expr_stmt><expr><name pos:line="30" pos:column="9">buffer<pos:position pos:line="30" pos:column="15"/></name> <operator pos:line="30" pos:column="16">+=<pos:position pos:line="30" pos:column="18"/></operator> <sizeof pos:line="30" pos:column="19">sizeof <argument_list pos:line="30" pos:column="26">(<argument><expr><name pos:line="30" pos:column="27">tmp16<pos:position pos:line="30" pos:column="32"/></name></expr></argument>)<pos:position pos:line="30" pos:column="33"/></argument_list></sizeof></expr>;<pos:position pos:line="30" pos:column="34"/></expr_stmt>
	<expr_stmt><expr><name pos:line="31" pos:column="9">pkg_length<pos:position pos:line="31" pos:column="19"/></name> <operator pos:line="31" pos:column="20">=<pos:position pos:line="31" pos:column="21"/></operator> <call><name pos:line="31" pos:column="22">ntohs<pos:position pos:line="31" pos:column="27"/></name> <argument_list pos:line="31" pos:column="28">(<argument><expr><name pos:line="31" pos:column="29">tmp16<pos:position pos:line="31" pos:column="34"/></name></expr></argument>)<pos:position pos:line="31" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="36"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="33" pos:column="9">memcpy<pos:position pos:line="33" pos:column="15"/></name> <argument_list pos:line="33" pos:column="16">(<argument><expr><operator pos:line="33" pos:column="17">(<pos:position pos:line="33" pos:column="18"/></operator><name pos:line="33" pos:column="18">void<pos:position pos:line="33" pos:column="22"/></name> <operator pos:line="33" pos:column="23">*<pos:position pos:line="33" pos:column="24"/></operator><operator pos:line="33" pos:column="24">)<pos:position pos:line="33" pos:column="25"/></operator> <operator pos:line="33" pos:column="26">&amp;<pos:position pos:line="33" pos:column="31"/></operator><name pos:line="33" pos:column="27">tmp16<pos:position pos:line="33" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="34">buffer<pos:position pos:line="33" pos:column="40"/></name></expr></argument>, <argument><expr><sizeof pos:line="33" pos:column="42">sizeof <argument_list pos:line="33" pos:column="49">(<argument><expr><name pos:line="33" pos:column="50">tmp16<pos:position pos:line="33" pos:column="55"/></name></expr></argument>)<pos:position pos:line="33" pos:column="56"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="33" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="58"/></expr_stmt>
	<expr_stmt><expr><name pos:line="34" pos:column="9">buffer<pos:position pos:line="34" pos:column="15"/></name> <operator pos:line="34" pos:column="16">+=<pos:position pos:line="34" pos:column="18"/></operator> <sizeof pos:line="34" pos:column="19">sizeof <argument_list pos:line="34" pos:column="26">(<argument><expr><name pos:line="34" pos:column="27">tmp16<pos:position pos:line="34" pos:column="32"/></name></expr></argument>)<pos:position pos:line="34" pos:column="33"/></argument_list></sizeof></expr>;<pos:position pos:line="34" pos:column="34"/></expr_stmt>
	<expr_stmt><expr><name pos:line="35" pos:column="9">pkg_numval<pos:position pos:line="35" pos:column="19"/></name> <operator pos:line="35" pos:column="20">=<pos:position pos:line="35" pos:column="21"/></operator> <call><name pos:line="35" pos:column="22">ntohs<pos:position pos:line="35" pos:column="27"/></name> <argument_list pos:line="35" pos:column="28">(<argument><expr><name pos:line="35" pos:column="29">tmp16<pos:position pos:line="35" pos:column="34"/></name></expr></argument>)<pos:position pos:line="35" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="36"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="37" pos:column="9">assert<pos:position pos:line="37" pos:column="15"/></name> <argument_list pos:line="37" pos:column="16">(<argument><expr><name pos:line="37" pos:column="17">pkg_type<pos:position pos:line="37" pos:column="25"/></name> <operator pos:line="37" pos:column="26">==<pos:position pos:line="37" pos:column="28"/></operator> <name pos:line="37" pos:column="29">TYPE_VALUES<pos:position pos:line="37" pos:column="40"/></name></expr></argument>)<pos:position pos:line="37" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="42"/></expr_stmt>

	<expr_stmt><expr><name pos:line="39" pos:column="9">exp_size<pos:position pos:line="39" pos:column="17"/></name> <operator pos:line="39" pos:column="18">=<pos:position pos:line="39" pos:column="19"/></operator> <literal type="number" pos:line="39" pos:column="20">3<pos:position pos:line="39" pos:column="21"/></literal> <operator pos:line="39" pos:column="22">*<pos:position pos:line="39" pos:column="23"/></operator> <sizeof pos:line="39" pos:column="24">sizeof <argument_list pos:line="39" pos:column="31">(<argument><expr><name pos:line="39" pos:column="32">uint16_t<pos:position pos:line="39" pos:column="40"/></name></expr></argument>)<pos:position pos:line="39" pos:column="41"/></argument_list></sizeof>
		<operator pos:line="40" pos:column="17">+<pos:position pos:line="40" pos:column="18"/></operator> <name pos:line="40" pos:column="19">pkg_numval<pos:position pos:line="40" pos:column="29"/></name> <operator pos:line="40" pos:column="30">*<pos:position pos:line="40" pos:column="31"/></operator> <operator pos:line="40" pos:column="32">(<pos:position pos:line="40" pos:column="33"/></operator><sizeof pos:line="40" pos:column="33">sizeof <argument_list pos:line="40" pos:column="40">(<argument><expr><name pos:line="40" pos:column="41">uint8_t<pos:position pos:line="40" pos:column="48"/></name></expr></argument>)<pos:position pos:line="40" pos:column="49"/></argument_list></sizeof> <operator pos:line="40" pos:column="50">+<pos:position pos:line="40" pos:column="51"/></operator> <sizeof pos:line="40" pos:column="52">sizeof <argument_list pos:line="40" pos:column="59">(<argument><expr><name pos:line="40" pos:column="60">value_t<pos:position pos:line="40" pos:column="67"/></name></expr></argument>)<pos:position pos:line="40" pos:column="68"/></argument_list></sizeof><operator pos:line="40" pos:column="68">)<pos:position pos:line="40" pos:column="69"/></operator></expr>;<pos:position pos:line="40" pos:column="70"/></expr_stmt>
	<if pos:line="41" pos:column="9">if <condition pos:line="41" pos:column="12">(<expr><name pos:line="41" pos:column="13">buffer_len<pos:position pos:line="41" pos:column="23"/></name> <operator pos:line="41" pos:column="24">&lt;<pos:position pos:line="41" pos:column="28"/></operator> <name pos:line="41" pos:column="26">exp_size<pos:position pos:line="41" pos:column="34"/></name></expr>)<pos:position pos:line="41" pos:column="35"/></condition><then pos:line="41" pos:column="35">
	<block pos:line="42" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="43" pos:column="17">WARNING<pos:position pos:line="43" pos:column="24"/></name> <argument_list pos:line="43" pos:column="25">(<argument><expr><literal type="string" pos:line="43" pos:column="26">"network plugin: parse_part_values: "<pos:position pos:line="43" pos:column="63"/></literal>
				<literal type="string" pos:line="44" pos:column="33">"Packet too short: "<pos:position pos:line="44" pos:column="53"/></literal>
				<literal type="string" pos:line="45" pos:column="33">"Chunk of size %u expected, "<pos:position pos:line="45" pos:column="62"/></literal>
				<literal type="string" pos:line="46" pos:column="33">"but buffer has only %i bytes left."<pos:position pos:line="46" pos:column="69"/></literal></expr></argument>,
				<argument><expr><operator pos:line="47" pos:column="33">(<pos:position pos:line="47" pos:column="34"/></operator><name pos:line="47" pos:column="34">unsigned<pos:position pos:line="47" pos:column="42"/></name> <name pos:line="47" pos:column="43">int<pos:position pos:line="47" pos:column="46"/></name><operator pos:line="47" pos:column="46">)<pos:position pos:line="47" pos:column="47"/></operator> <name pos:line="47" pos:column="48">exp_size<pos:position pos:line="47" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="58">buffer_len<pos:position pos:line="47" pos:column="68"/></name></expr></argument>)<pos:position pos:line="47" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="70"/></expr_stmt>
		<return pos:line="48" pos:column="17">return <expr><operator pos:line="48" pos:column="24">(<pos:position pos:line="48" pos:column="25"/></operator><operator pos:line="48" pos:column="25">-<pos:position pos:line="48" pos:column="26"/></operator><literal type="number" pos:line="48" pos:column="26">1<pos:position pos:line="48" pos:column="27"/></literal><operator pos:line="48" pos:column="27">)<pos:position pos:line="48" pos:column="28"/></operator></expr>;<pos:position pos:line="48" pos:column="29"/></return>
	}<pos:position pos:line="49" pos:column="10"/></block></then></if>

	<if pos:line="51" pos:column="9">if <condition pos:line="51" pos:column="12">(<expr><name pos:line="51" pos:column="13">pkg_length<pos:position pos:line="51" pos:column="23"/></name> <operator pos:line="51" pos:column="24">!=<pos:position pos:line="51" pos:column="26"/></operator> <name pos:line="51" pos:column="27">exp_size<pos:position pos:line="51" pos:column="35"/></name></expr>)<pos:position pos:line="51" pos:column="36"/></condition><then pos:line="51" pos:column="36">
	<block pos:line="52" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="53" pos:column="17">WARNING<pos:position pos:line="53" pos:column="24"/></name> <argument_list pos:line="53" pos:column="25">(<argument><expr><literal type="string" pos:line="53" pos:column="26">"network plugin: parse_part_values: "<pos:position pos:line="53" pos:column="63"/></literal>
				<literal type="string" pos:line="54" pos:column="33">"Length and number of values "<pos:position pos:line="54" pos:column="63"/></literal>
				<literal type="string" pos:line="55" pos:column="33">"in the packet don't match."<pos:position pos:line="55" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="55" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="63"/></expr_stmt>
		<return pos:line="56" pos:column="17">return <expr><operator pos:line="56" pos:column="24">(<pos:position pos:line="56" pos:column="25"/></operator><operator pos:line="56" pos:column="25">-<pos:position pos:line="56" pos:column="26"/></operator><literal type="number" pos:line="56" pos:column="26">1<pos:position pos:line="56" pos:column="27"/></literal><operator pos:line="56" pos:column="27">)<pos:position pos:line="56" pos:column="28"/></operator></expr>;<pos:position pos:line="56" pos:column="29"/></return>
	}<pos:position pos:line="57" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="59" pos:column="9">pkg_types<pos:position pos:line="59" pos:column="18"/></name> <operator pos:line="59" pos:column="19">=<pos:position pos:line="59" pos:column="20"/></operator> <operator pos:line="59" pos:column="21">(<pos:position pos:line="59" pos:column="22"/></operator><name pos:line="59" pos:column="22">uint8_t<pos:position pos:line="59" pos:column="29"/></name> <operator pos:line="59" pos:column="30">*<pos:position pos:line="59" pos:column="31"/></operator><operator pos:line="59" pos:column="31">)<pos:position pos:line="59" pos:column="32"/></operator> <call><name pos:line="59" pos:column="33">malloc<pos:position pos:line="59" pos:column="39"/></name> <argument_list pos:line="59" pos:column="40">(<argument><expr><name pos:line="59" pos:column="41">pkg_numval<pos:position pos:line="59" pos:column="51"/></name> <operator pos:line="59" pos:column="52">*<pos:position pos:line="59" pos:column="53"/></operator> <sizeof pos:line="59" pos:column="54">sizeof <argument_list pos:line="59" pos:column="61">(<argument><expr><name pos:line="59" pos:column="62">uint8_t<pos:position pos:line="59" pos:column="69"/></name></expr></argument>)<pos:position pos:line="59" pos:column="70"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="59" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="72"/></expr_stmt>
	<expr_stmt><expr><name pos:line="60" pos:column="9">pkg_values<pos:position pos:line="60" pos:column="19"/></name> <operator pos:line="60" pos:column="20">=<pos:position pos:line="60" pos:column="21"/></operator> <operator pos:line="60" pos:column="22">(<pos:position pos:line="60" pos:column="23"/></operator><name pos:line="60" pos:column="23">value_t<pos:position pos:line="60" pos:column="30"/></name> <operator pos:line="60" pos:column="31">*<pos:position pos:line="60" pos:column="32"/></operator><operator pos:line="60" pos:column="32">)<pos:position pos:line="60" pos:column="33"/></operator> <call><name pos:line="60" pos:column="34">malloc<pos:position pos:line="60" pos:column="40"/></name> <argument_list pos:line="60" pos:column="41">(<argument><expr><name pos:line="60" pos:column="42">pkg_numval<pos:position pos:line="60" pos:column="52"/></name> <operator pos:line="60" pos:column="53">*<pos:position pos:line="60" pos:column="54"/></operator> <sizeof pos:line="60" pos:column="55">sizeof <argument_list pos:line="60" pos:column="62">(<argument><expr><name pos:line="60" pos:column="63">value_t<pos:position pos:line="60" pos:column="70"/></name></expr></argument>)<pos:position pos:line="60" pos:column="71"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="60" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="73"/></expr_stmt>
	<if pos:line="61" pos:column="9">if <condition pos:line="61" pos:column="12">(<expr><operator pos:line="61" pos:column="13">(<pos:position pos:line="61" pos:column="14"/></operator><name pos:line="61" pos:column="14">pkg_types<pos:position pos:line="61" pos:column="23"/></name> <operator pos:line="61" pos:column="24">==<pos:position pos:line="61" pos:column="26"/></operator> <name pos:line="61" pos:column="27">NULL<pos:position pos:line="61" pos:column="31"/></name><operator pos:line="61" pos:column="31">)<pos:position pos:line="61" pos:column="32"/></operator> <operator pos:line="61" pos:column="33">||<pos:position pos:line="61" pos:column="35"/></operator> <operator pos:line="61" pos:column="36">(<pos:position pos:line="61" pos:column="37"/></operator><name pos:line="61" pos:column="37">pkg_values<pos:position pos:line="61" pos:column="47"/></name> <operator pos:line="61" pos:column="48">==<pos:position pos:line="61" pos:column="50"/></operator> <name pos:line="61" pos:column="51">NULL<pos:position pos:line="61" pos:column="55"/></name><operator pos:line="61" pos:column="55">)<pos:position pos:line="61" pos:column="56"/></operator></expr>)<pos:position pos:line="61" pos:column="57"/></condition><then pos:line="61" pos:column="57">
	<block pos:line="62" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="63" pos:column="17">sfree<pos:position pos:line="63" pos:column="22"/></name> <argument_list pos:line="63" pos:column="23">(<argument><expr><name pos:line="63" pos:column="24">pkg_types<pos:position pos:line="63" pos:column="33"/></name></expr></argument>)<pos:position pos:line="63" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="35"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="64" pos:column="17">sfree<pos:position pos:line="64" pos:column="22"/></name> <argument_list pos:line="64" pos:column="23">(<argument><expr><name pos:line="64" pos:column="24">pkg_values<pos:position pos:line="64" pos:column="34"/></name></expr></argument>)<pos:position pos:line="64" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="36"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="65" pos:column="17">ERROR<pos:position pos:line="65" pos:column="22"/></name> <argument_list pos:line="65" pos:column="23">(<argument><expr><literal type="string" pos:line="65" pos:column="24">"network plugin: parse_part_values: malloc failed."<pos:position pos:line="65" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="65" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="77"/></expr_stmt>
		<return pos:line="66" pos:column="17">return <expr><operator pos:line="66" pos:column="24">(<pos:position pos:line="66" pos:column="25"/></operator><operator pos:line="66" pos:column="25">-<pos:position pos:line="66" pos:column="26"/></operator><literal type="number" pos:line="66" pos:column="26">1<pos:position pos:line="66" pos:column="27"/></literal><operator pos:line="66" pos:column="27">)<pos:position pos:line="66" pos:column="28"/></operator></expr>;<pos:position pos:line="66" pos:column="29"/></return>
	}<pos:position pos:line="67" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="69" pos:column="9">memcpy<pos:position pos:line="69" pos:column="15"/></name> <argument_list pos:line="69" pos:column="16">(<argument><expr><operator pos:line="69" pos:column="17">(<pos:position pos:line="69" pos:column="18"/></operator><name pos:line="69" pos:column="18">void<pos:position pos:line="69" pos:column="22"/></name> <operator pos:line="69" pos:column="23">*<pos:position pos:line="69" pos:column="24"/></operator><operator pos:line="69" pos:column="24">)<pos:position pos:line="69" pos:column="25"/></operator> <name pos:line="69" pos:column="26">pkg_types<pos:position pos:line="69" pos:column="35"/></name></expr></argument>, <argument><expr><operator pos:line="69" pos:column="37">(<pos:position pos:line="69" pos:column="38"/></operator><name pos:line="69" pos:column="38">void<pos:position pos:line="69" pos:column="42"/></name> <operator pos:line="69" pos:column="43">*<pos:position pos:line="69" pos:column="44"/></operator><operator pos:line="69" pos:column="44">)<pos:position pos:line="69" pos:column="45"/></operator> <name pos:line="69" pos:column="46">buffer<pos:position pos:line="69" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="69" pos:column="54">pkg_numval<pos:position pos:line="69" pos:column="64"/></name> <operator pos:line="69" pos:column="65">*<pos:position pos:line="69" pos:column="66"/></operator> <sizeof pos:line="69" pos:column="67">sizeof <argument_list pos:line="69" pos:column="74">(<argument><expr><name pos:line="69" pos:column="75">uint8_t<pos:position pos:line="69" pos:column="82"/></name></expr></argument>)<pos:position pos:line="69" pos:column="83"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="69" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="85"/></expr_stmt>
	<expr_stmt><expr><name pos:line="70" pos:column="9">buffer<pos:position pos:line="70" pos:column="15"/></name> <operator pos:line="70" pos:column="16">+=<pos:position pos:line="70" pos:column="18"/></operator> <name pos:line="70" pos:column="19">pkg_numval<pos:position pos:line="70" pos:column="29"/></name> <operator pos:line="70" pos:column="30">*<pos:position pos:line="70" pos:column="31"/></operator> <sizeof pos:line="70" pos:column="32">sizeof <argument_list pos:line="70" pos:column="39">(<argument><expr><name pos:line="70" pos:column="40">uint8_t<pos:position pos:line="70" pos:column="47"/></name></expr></argument>)<pos:position pos:line="70" pos:column="48"/></argument_list></sizeof></expr>;<pos:position pos:line="70" pos:column="49"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="71" pos:column="9">memcpy<pos:position pos:line="71" pos:column="15"/></name> <argument_list pos:line="71" pos:column="16">(<argument><expr><operator pos:line="71" pos:column="17">(<pos:position pos:line="71" pos:column="18"/></operator><name pos:line="71" pos:column="18">void<pos:position pos:line="71" pos:column="22"/></name> <operator pos:line="71" pos:column="23">*<pos:position pos:line="71" pos:column="24"/></operator><operator pos:line="71" pos:column="24">)<pos:position pos:line="71" pos:column="25"/></operator> <name pos:line="71" pos:column="26">pkg_values<pos:position pos:line="71" pos:column="36"/></name></expr></argument>, <argument><expr><operator pos:line="71" pos:column="38">(<pos:position pos:line="71" pos:column="39"/></operator><name pos:line="71" pos:column="39">void<pos:position pos:line="71" pos:column="43"/></name> <operator pos:line="71" pos:column="44">*<pos:position pos:line="71" pos:column="45"/></operator><operator pos:line="71" pos:column="45">)<pos:position pos:line="71" pos:column="46"/></operator> <name pos:line="71" pos:column="47">buffer<pos:position pos:line="71" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="71" pos:column="55">pkg_numval<pos:position pos:line="71" pos:column="65"/></name> <operator pos:line="71" pos:column="66">*<pos:position pos:line="71" pos:column="67"/></operator> <sizeof pos:line="71" pos:column="68">sizeof <argument_list pos:line="71" pos:column="75">(<argument><expr><name pos:line="71" pos:column="76">value_t<pos:position pos:line="71" pos:column="83"/></name></expr></argument>)<pos:position pos:line="71" pos:column="84"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="71" pos:column="85"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="86"/></expr_stmt>
	<expr_stmt><expr><name pos:line="72" pos:column="9">buffer<pos:position pos:line="72" pos:column="15"/></name> <operator pos:line="72" pos:column="16">+=<pos:position pos:line="72" pos:column="18"/></operator> <name pos:line="72" pos:column="19">pkg_numval<pos:position pos:line="72" pos:column="29"/></name> <operator pos:line="72" pos:column="30">*<pos:position pos:line="72" pos:column="31"/></operator> <sizeof pos:line="72" pos:column="32">sizeof <argument_list pos:line="72" pos:column="39">(<argument><expr><name pos:line="72" pos:column="40">value_t<pos:position pos:line="72" pos:column="47"/></name></expr></argument>)<pos:position pos:line="72" pos:column="48"/></argument_list></sizeof></expr>;<pos:position pos:line="72" pos:column="49"/></expr_stmt>

	<for pos:line="74" pos:column="9">for <control pos:line="74" pos:column="13">(<init><expr><name pos:line="74" pos:column="14">i<pos:position pos:line="74" pos:column="15"/></name> <operator pos:line="74" pos:column="16">=<pos:position pos:line="74" pos:column="17"/></operator> <literal type="number" pos:line="74" pos:column="18">0<pos:position pos:line="74" pos:column="19"/></literal></expr>;<pos:position pos:line="74" pos:column="20"/></init> <condition><expr><name pos:line="74" pos:column="21">i<pos:position pos:line="74" pos:column="22"/></name> <operator pos:line="74" pos:column="23">&lt;<pos:position pos:line="74" pos:column="27"/></operator> <name pos:line="74" pos:column="25">pkg_numval<pos:position pos:line="74" pos:column="35"/></name></expr>;<pos:position pos:line="74" pos:column="36"/></condition> <incr><expr><name pos:line="74" pos:column="37">i<pos:position pos:line="74" pos:column="38"/></name><operator pos:line="74" pos:column="38">++<pos:position pos:line="74" pos:column="40"/></operator></expr></incr>)<pos:position pos:line="74" pos:column="41"/></control>
	<block pos:line="75" pos:column="9">{
		<if pos:line="76" pos:column="17">if <condition pos:line="76" pos:column="20">(<expr><name><name pos:line="76" pos:column="21">pkg_types<pos:position pos:line="76" pos:column="30"/></name><index pos:line="76" pos:column="30">[<expr><name pos:line="76" pos:column="31">i<pos:position pos:line="76" pos:column="32"/></name></expr>]<pos:position pos:line="76" pos:column="33"/></index></name> <operator pos:line="76" pos:column="34">==<pos:position pos:line="76" pos:column="36"/></operator> <name pos:line="76" pos:column="37">DS_TYPE_COUNTER<pos:position pos:line="76" pos:column="52"/></name></expr>)<pos:position pos:line="76" pos:column="53"/></condition><then pos:line="76" pos:column="53">
			<block type="pseudo"><expr_stmt><expr><name><name pos:line="77" pos:column="25">pkg_values<pos:position pos:line="77" pos:column="35"/></name><index pos:line="77" pos:column="35">[<expr><name pos:line="77" pos:column="36">i<pos:position pos:line="77" pos:column="37"/></name></expr>]<pos:position pos:line="77" pos:column="38"/></index></name><operator pos:line="77" pos:column="38">.<pos:position pos:line="77" pos:column="39"/></operator><name pos:line="77" pos:column="39">counter<pos:position pos:line="77" pos:column="46"/></name> <operator pos:line="77" pos:column="47">=<pos:position pos:line="77" pos:column="48"/></operator> <call><name pos:line="77" pos:column="49">ntohll<pos:position pos:line="77" pos:column="55"/></name> <argument_list pos:line="77" pos:column="56">(<argument><expr><name><name pos:line="77" pos:column="57">pkg_values<pos:position pos:line="77" pos:column="67"/></name><index pos:line="77" pos:column="67">[<expr><name pos:line="77" pos:column="68">i<pos:position pos:line="77" pos:column="69"/></name></expr>]<pos:position pos:line="77" pos:column="70"/></index></name><operator pos:line="77" pos:column="70">.<pos:position pos:line="77" pos:column="71"/></operator><name pos:line="77" pos:column="71">counter<pos:position pos:line="77" pos:column="78"/></name></expr></argument>)<pos:position pos:line="77" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="80"/></expr_stmt></block></then>
		<elseif pos:line="78" pos:column="17">else <if pos:line="78" pos:column="22">if <condition pos:line="78" pos:column="25">(<expr><name><name pos:line="78" pos:column="26">pkg_types<pos:position pos:line="78" pos:column="35"/></name><index pos:line="78" pos:column="35">[<expr><name pos:line="78" pos:column="36">i<pos:position pos:line="78" pos:column="37"/></name></expr>]<pos:position pos:line="78" pos:column="38"/></index></name> <operator pos:line="78" pos:column="39">==<pos:position pos:line="78" pos:column="41"/></operator> <name pos:line="78" pos:column="42">DS_TYPE_GAUGE<pos:position pos:line="78" pos:column="55"/></name></expr>)<pos:position pos:line="78" pos:column="56"/></condition><then pos:line="78" pos:column="56">
			<block type="pseudo"><expr_stmt><expr><name><name pos:line="79" pos:column="25">pkg_values<pos:position pos:line="79" pos:column="35"/></name><index pos:line="79" pos:column="35">[<expr><name pos:line="79" pos:column="36">i<pos:position pos:line="79" pos:column="37"/></name></expr>]<pos:position pos:line="79" pos:column="38"/></index></name><operator pos:line="79" pos:column="38">.<pos:position pos:line="79" pos:column="39"/></operator><name pos:line="79" pos:column="39">gauge<pos:position pos:line="79" pos:column="44"/></name> <operator pos:line="79" pos:column="45">=<pos:position pos:line="79" pos:column="46"/></operator> <call><name pos:line="79" pos:column="47">ntohd<pos:position pos:line="79" pos:column="52"/></name> <argument_list pos:line="79" pos:column="53">(<argument><expr><name><name pos:line="79" pos:column="54">pkg_values<pos:position pos:line="79" pos:column="64"/></name><index pos:line="79" pos:column="64">[<expr><name pos:line="79" pos:column="65">i<pos:position pos:line="79" pos:column="66"/></name></expr>]<pos:position pos:line="79" pos:column="67"/></index></name><operator pos:line="79" pos:column="67">.<pos:position pos:line="79" pos:column="68"/></operator><name pos:line="79" pos:column="68">gauge<pos:position pos:line="79" pos:column="73"/></name></expr></argument>)<pos:position pos:line="79" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="75"/></expr_stmt></block></then></if></elseif></if>
	}<pos:position pos:line="80" pos:column="10"/></block></for>

	<expr_stmt><expr><operator pos:line="82" pos:column="9">*<pos:position pos:line="82" pos:column="10"/></operator><name pos:line="82" pos:column="10">ret_buffer<pos:position pos:line="82" pos:column="20"/></name>     <operator pos:line="82" pos:column="25">=<pos:position pos:line="82" pos:column="26"/></operator> <name pos:line="82" pos:column="27">buffer<pos:position pos:line="82" pos:column="33"/></name></expr>;<pos:position pos:line="82" pos:column="34"/></expr_stmt>
	<expr_stmt><expr><operator pos:line="83" pos:column="9">*<pos:position pos:line="83" pos:column="10"/></operator><name pos:line="83" pos:column="10">ret_buffer_len<pos:position pos:line="83" pos:column="24"/></name> <operator pos:line="83" pos:column="25">=<pos:position pos:line="83" pos:column="26"/></operator> <name pos:line="83" pos:column="27">buffer_len<pos:position pos:line="83" pos:column="37"/></name> <operator pos:line="83" pos:column="38">-<pos:position pos:line="83" pos:column="39"/></operator> <name pos:line="83" pos:column="40">pkg_length<pos:position pos:line="83" pos:column="50"/></name></expr>;<pos:position pos:line="83" pos:column="51"/></expr_stmt>
	<expr_stmt><expr><operator pos:line="84" pos:column="9">*<pos:position pos:line="84" pos:column="10"/></operator><name pos:line="84" pos:column="10">ret_num_values<pos:position pos:line="84" pos:column="24"/></name> <operator pos:line="84" pos:column="25">=<pos:position pos:line="84" pos:column="26"/></operator> <name pos:line="84" pos:column="27">pkg_numval<pos:position pos:line="84" pos:column="37"/></name></expr>;<pos:position pos:line="84" pos:column="38"/></expr_stmt>
	<expr_stmt><expr><operator pos:line="85" pos:column="9">*<pos:position pos:line="85" pos:column="10"/></operator><name pos:line="85" pos:column="10">ret_values<pos:position pos:line="85" pos:column="20"/></name>     <operator pos:line="85" pos:column="25">=<pos:position pos:line="85" pos:column="26"/></operator> <name pos:line="85" pos:column="27">pkg_values<pos:position pos:line="85" pos:column="37"/></name></expr>;<pos:position pos:line="85" pos:column="38"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="87" pos:column="9">sfree<pos:position pos:line="87" pos:column="14"/></name> <argument_list pos:line="87" pos:column="15">(<argument><expr><name pos:line="87" pos:column="16">pkg_types<pos:position pos:line="87" pos:column="25"/></name></expr></argument>)<pos:position pos:line="87" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="27"/></expr_stmt>

	<return pos:line="89" pos:column="9">return <expr><operator pos:line="89" pos:column="16">(<pos:position pos:line="89" pos:column="17"/></operator><literal type="number" pos:line="89" pos:column="17">0<pos:position pos:line="89" pos:column="18"/></literal><operator pos:line="89" pos:column="18">)<pos:position pos:line="89" pos:column="19"/></operator></expr>;<pos:position pos:line="89" pos:column="20"/></return>
}<pos:position pos:line="90" pos:column="2"/></block></function></unit>
