<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1778_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">dpdk_helper_init<pos:position pos:line="1" pos:column="21"/></name><parameter_list pos:line="1" pos:column="21">(<parameter><decl><type><specifier pos:line="1" pos:column="22">const<pos:position pos:line="1" pos:column="27"/></specifier> <name pos:line="1" pos:column="28">char<pos:position pos:line="1" pos:column="32"/></name> <modifier pos:line="1" pos:column="33">*<pos:position pos:line="1" pos:column="34"/></modifier></type><name pos:line="1" pos:column="34">name<pos:position pos:line="1" pos:column="38"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="40">size_t<pos:position pos:line="1" pos:column="46"/></name></type> <name pos:line="1" pos:column="47">data_size<pos:position pos:line="1" pos:column="56"/></name></decl></parameter>,
                     <parameter><decl><type><name pos:line="2" pos:column="22">dpdk_helper_ctx_t<pos:position pos:line="2" pos:column="39"/></name> <modifier pos:line="2" pos:column="40">*<pos:position pos:line="2" pos:column="41"/></modifier><modifier pos:line="2" pos:column="41">*<pos:position pos:line="2" pos:column="42"/></modifier></type><name pos:line="2" pos:column="42">pphc<pos:position pos:line="2" pos:column="46"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="47"/></parameter_list> <block pos:line="2" pos:column="48">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">dpdk_helper_ctx_t<pos:position pos:line="3" pos:column="20"/></name> <modifier pos:line="3" pos:column="21">*<pos:position pos:line="3" pos:column="22"/></modifier></type><name pos:line="3" pos:column="22">phc<pos:position pos:line="3" pos:column="25"/></name> <init pos:line="3" pos:column="26">= <expr><name pos:line="3" pos:column="28">NULL<pos:position pos:line="3" pos:column="32"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="33"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">size_t<pos:position pos:line="4" pos:column="9"/></name></type> <name pos:line="4" pos:column="10">shm_size<pos:position pos:line="4" pos:column="18"/></name> <init pos:line="4" pos:column="19">= <expr><sizeof pos:line="4" pos:column="21">sizeof<argument_list pos:line="4" pos:column="27">(<argument><expr><name pos:line="4" pos:column="28">dpdk_helper_ctx_t<pos:position pos:line="4" pos:column="45"/></name></expr></argument>)<pos:position pos:line="4" pos:column="46"/></argument_list></sizeof> <operator pos:line="4" pos:column="47">+<pos:position pos:line="4" pos:column="48"/></operator> <name pos:line="4" pos:column="49">data_size<pos:position pos:line="4" pos:column="58"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="59"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">char<pos:position pos:line="5" pos:column="7"/></name></type> <name><name pos:line="5" pos:column="8">errbuf<pos:position pos:line="5" pos:column="14"/></name><index pos:line="5" pos:column="14">[<expr><name pos:line="5" pos:column="15">ERR_BUF_SIZE<pos:position pos:line="5" pos:column="27"/></name></expr>]<pos:position pos:line="5" pos:column="28"/></index></name></decl>;<pos:position pos:line="5" pos:column="29"/></decl_stmt>

  <if pos:line="7" pos:column="3">if <condition pos:line="7" pos:column="6">(<expr><name pos:line="7" pos:column="7">pphc<pos:position pos:line="7" pos:column="11"/></name> <operator pos:line="7" pos:column="12">==<pos:position pos:line="7" pos:column="14"/></operator> <name pos:line="7" pos:column="15">NULL<pos:position pos:line="7" pos:column="19"/></name></expr>)<pos:position pos:line="7" pos:column="20"/></condition><then pos:line="7" pos:column="20"> <block pos:line="7" pos:column="21">{
    <expr_stmt><expr><call><name pos:line="8" pos:column="5">ERROR<pos:position pos:line="8" pos:column="10"/></name><argument_list pos:line="8" pos:column="10">(<argument><expr><literal type="string" pos:line="8" pos:column="11">"%s:Invalid argument(pphc)"<pos:position pos:line="8" pos:column="38"/></literal></expr></argument>, <argument><expr><name pos:line="8" pos:column="40">__FUNCTION__<pos:position pos:line="8" pos:column="52"/></name></expr></argument>)<pos:position pos:line="8" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="54"/></expr_stmt>
    <return pos:line="9" pos:column="5">return <expr><operator pos:line="9" pos:column="12">-<pos:position pos:line="9" pos:column="13"/></operator><name pos:line="9" pos:column="13">EINVAL<pos:position pos:line="9" pos:column="19"/></name></expr>;<pos:position pos:line="9" pos:column="20"/></return>
  }<pos:position pos:line="10" pos:column="4"/></block></then></if>

  <if pos:line="12" pos:column="3">if <condition pos:line="12" pos:column="6">(<expr><name pos:line="12" pos:column="7">name<pos:position pos:line="12" pos:column="11"/></name> <operator pos:line="12" pos:column="12">==<pos:position pos:line="12" pos:column="14"/></operator> <name pos:line="12" pos:column="15">NULL<pos:position pos:line="12" pos:column="19"/></name></expr>)<pos:position pos:line="12" pos:column="20"/></condition><then pos:line="12" pos:column="20"> <block pos:line="12" pos:column="21">{
    <expr_stmt><expr><call><name pos:line="13" pos:column="5">ERROR<pos:position pos:line="13" pos:column="10"/></name><argument_list pos:line="13" pos:column="10">(<argument><expr><literal type="string" pos:line="13" pos:column="11">"%s:Invalid argument(name)"<pos:position pos:line="13" pos:column="38"/></literal></expr></argument>, <argument><expr><name pos:line="13" pos:column="40">__FUNCTION__<pos:position pos:line="13" pos:column="52"/></name></expr></argument>)<pos:position pos:line="13" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="54"/></expr_stmt>
    <return pos:line="14" pos:column="5">return <expr><operator pos:line="14" pos:column="12">-<pos:position pos:line="14" pos:column="13"/></operator><name pos:line="14" pos:column="13">EINVAL<pos:position pos:line="14" pos:column="19"/></name></expr>;<pos:position pos:line="14" pos:column="20"/></return>
  }<pos:position pos:line="15" pos:column="4"/></block></then></if>

  <expr_stmt><expr><call><name pos:line="17" pos:column="3">DPDK_HELPER_TRACE<pos:position pos:line="17" pos:column="20"/></name><argument_list pos:line="17" pos:column="20">(<argument><expr><name pos:line="17" pos:column="21">name<pos:position pos:line="17" pos:column="25"/></name></expr></argument>)<pos:position pos:line="17" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="27"/></expr_stmt>

  <comment type="block" pos:line="19" pos:column="3">/* Allocate dpdk_helper_ctx_t and
  * initialize a POSIX SHared Memory (SHM) object.
  */</comment>
  <decl_stmt><decl><type><name pos:line="22" pos:column="3">int<pos:position pos:line="22" pos:column="6"/></name></type> <name pos:line="22" pos:column="7">err<pos:position pos:line="22" pos:column="10"/></name> <init pos:line="22" pos:column="11">= <expr><call><name pos:line="22" pos:column="13">dpdk_shm_init<pos:position pos:line="22" pos:column="26"/></name><argument_list pos:line="22" pos:column="26">(<argument><expr><name pos:line="22" pos:column="27">name<pos:position pos:line="22" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="33">shm_size<pos:position pos:line="22" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="22" pos:column="43">(<pos:position pos:line="22" pos:column="44"/></operator><name pos:line="22" pos:column="44">void<pos:position pos:line="22" pos:column="48"/></name> <operator pos:line="22" pos:column="49">*<pos:position pos:line="22" pos:column="50"/></operator><operator pos:line="22" pos:column="50">*<pos:position pos:line="22" pos:column="51"/></operator><operator pos:line="22" pos:column="51">)<pos:position pos:line="22" pos:column="52"/></operator><operator pos:line="22" pos:column="52">&amp;<pos:position pos:line="22" pos:column="57"/></operator><name pos:line="22" pos:column="53">phc<pos:position pos:line="22" pos:column="56"/></name></expr></argument>)<pos:position pos:line="22" pos:column="57"/></argument_list></call></expr></init></decl>;<pos:position pos:line="22" pos:column="58"/></decl_stmt>
  <if pos:line="23" pos:column="3">if <condition pos:line="23" pos:column="6">(<expr><name pos:line="23" pos:column="7">err<pos:position pos:line="23" pos:column="10"/></name> <operator pos:line="23" pos:column="11">!=<pos:position pos:line="23" pos:column="13"/></operator> <literal type="number" pos:line="23" pos:column="14">0<pos:position pos:line="23" pos:column="15"/></literal></expr>)<pos:position pos:line="23" pos:column="16"/></condition><then pos:line="23" pos:column="16"> <block pos:line="23" pos:column="17">{
    <return pos:line="24" pos:column="5">return <expr><operator pos:line="24" pos:column="12">-<pos:position pos:line="24" pos:column="13"/></operator><name pos:line="24" pos:column="13">errno<pos:position pos:line="24" pos:column="18"/></name></expr>;<pos:position pos:line="24" pos:column="19"/></return>
  }<pos:position pos:line="25" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="27" pos:column="3">err<pos:position pos:line="27" pos:column="6"/></name> <operator pos:line="27" pos:column="7">=<pos:position pos:line="27" pos:column="8"/></operator> <call><name pos:line="27" pos:column="9">sem_init<pos:position pos:line="27" pos:column="17"/></name><argument_list pos:line="27" pos:column="17">(<argument><expr><operator pos:line="27" pos:column="18">&amp;<pos:position pos:line="27" pos:column="23"/></operator><name><name pos:line="27" pos:column="19">phc<pos:position pos:line="27" pos:column="22"/></name><operator pos:line="27" pos:column="22">-&gt;<pos:position pos:line="27" pos:column="27"/></operator><name pos:line="27" pos:column="24">sema_cmd_start<pos:position pos:line="27" pos:column="38"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="27" pos:column="40">1<pos:position pos:line="27" pos:column="41"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="27" pos:column="43">0<pos:position pos:line="27" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="46"/></expr_stmt>
  <if pos:line="28" pos:column="3">if <condition pos:line="28" pos:column="6">(<expr><name pos:line="28" pos:column="7">err<pos:position pos:line="28" pos:column="10"/></name> <operator pos:line="28" pos:column="11">!=<pos:position pos:line="28" pos:column="13"/></operator> <literal type="number" pos:line="28" pos:column="14">0<pos:position pos:line="28" pos:column="15"/></literal></expr>)<pos:position pos:line="28" pos:column="16"/></condition><then pos:line="28" pos:column="16"> <block pos:line="28" pos:column="17">{
    <expr_stmt><expr><call><name pos:line="29" pos:column="5">ERROR<pos:position pos:line="29" pos:column="10"/></name><argument_list pos:line="29" pos:column="10">(<argument><expr><literal type="string" pos:line="29" pos:column="11">"sema_cmd_start semaphore init failed: %s"<pos:position pos:line="29" pos:column="53"/></literal></expr></argument>,
          <argument><expr><call><name pos:line="30" pos:column="11">sstrerror<pos:position pos:line="30" pos:column="20"/></name><argument_list pos:line="30" pos:column="20">(<argument><expr><name pos:line="30" pos:column="21">errno<pos:position pos:line="30" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="28">errbuf<pos:position pos:line="30" pos:column="34"/></name></expr></argument>, <argument><expr><sizeof pos:line="30" pos:column="36">sizeof<argument_list pos:line="30" pos:column="42">(<argument><expr><name pos:line="30" pos:column="43">errbuf<pos:position pos:line="30" pos:column="49"/></name></expr></argument>)<pos:position pos:line="30" pos:column="50"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="30" pos:column="51"/></argument_list></call></expr></argument>)<pos:position pos:line="30" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="53"/></expr_stmt>
    <decl_stmt><decl><type><name pos:line="31" pos:column="5">int<pos:position pos:line="31" pos:column="8"/></name></type> <name pos:line="31" pos:column="9">errno_m<pos:position pos:line="31" pos:column="16"/></name> <init pos:line="31" pos:column="17">= <expr><name pos:line="31" pos:column="19">errno<pos:position pos:line="31" pos:column="24"/></name></expr></init></decl>;<pos:position pos:line="31" pos:column="25"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="32" pos:column="5">dpdk_shm_cleanup<pos:position pos:line="32" pos:column="21"/></name><argument_list pos:line="32" pos:column="21">(<argument><expr><name pos:line="32" pos:column="22">name<pos:position pos:line="32" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="28">shm_size<pos:position pos:line="32" pos:column="36"/></name></expr></argument>, <argument><expr><operator pos:line="32" pos:column="38">(<pos:position pos:line="32" pos:column="39"/></operator><name pos:line="32" pos:column="39">void<pos:position pos:line="32" pos:column="43"/></name> <operator pos:line="32" pos:column="44">*<pos:position pos:line="32" pos:column="45"/></operator><operator pos:line="32" pos:column="45">)<pos:position pos:line="32" pos:column="46"/></operator><name pos:line="32" pos:column="46">phc<pos:position pos:line="32" pos:column="49"/></name></expr></argument>)<pos:position pos:line="32" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="51"/></expr_stmt>
    <return pos:line="33" pos:column="5">return <expr><operator pos:line="33" pos:column="12">-<pos:position pos:line="33" pos:column="13"/></operator><name pos:line="33" pos:column="13">errno_m<pos:position pos:line="33" pos:column="20"/></name></expr>;<pos:position pos:line="33" pos:column="21"/></return>
  }<pos:position pos:line="34" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="36" pos:column="3">err<pos:position pos:line="36" pos:column="6"/></name> <operator pos:line="36" pos:column="7">=<pos:position pos:line="36" pos:column="8"/></operator> <call><name pos:line="36" pos:column="9">sem_init<pos:position pos:line="36" pos:column="17"/></name><argument_list pos:line="36" pos:column="17">(<argument><expr><operator pos:line="36" pos:column="18">&amp;<pos:position pos:line="36" pos:column="23"/></operator><name><name pos:line="36" pos:column="19">phc<pos:position pos:line="36" pos:column="22"/></name><operator pos:line="36" pos:column="22">-&gt;<pos:position pos:line="36" pos:column="27"/></operator><name pos:line="36" pos:column="24">sema_cmd_complete<pos:position pos:line="36" pos:column="41"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="36" pos:column="43">1<pos:position pos:line="36" pos:column="44"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="36" pos:column="46">0<pos:position pos:line="36" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="36" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="49"/></expr_stmt>
  <if pos:line="37" pos:column="3">if <condition pos:line="37" pos:column="6">(<expr><name pos:line="37" pos:column="7">err<pos:position pos:line="37" pos:column="10"/></name> <operator pos:line="37" pos:column="11">!=<pos:position pos:line="37" pos:column="13"/></operator> <literal type="number" pos:line="37" pos:column="14">0<pos:position pos:line="37" pos:column="15"/></literal></expr>)<pos:position pos:line="37" pos:column="16"/></condition><then pos:line="37" pos:column="16"> <block pos:line="37" pos:column="17">{
    <expr_stmt><expr><call><name pos:line="38" pos:column="5">ERROR<pos:position pos:line="38" pos:column="10"/></name><argument_list pos:line="38" pos:column="10">(<argument><expr><literal type="string" pos:line="38" pos:column="11">"sema_cmd_complete semaphore init failed: %s"<pos:position pos:line="38" pos:column="56"/></literal></expr></argument>,
          <argument><expr><call><name pos:line="39" pos:column="11">sstrerror<pos:position pos:line="39" pos:column="20"/></name><argument_list pos:line="39" pos:column="20">(<argument><expr><name pos:line="39" pos:column="21">errno<pos:position pos:line="39" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="28">errbuf<pos:position pos:line="39" pos:column="34"/></name></expr></argument>, <argument><expr><sizeof pos:line="39" pos:column="36">sizeof<argument_list pos:line="39" pos:column="42">(<argument><expr><name pos:line="39" pos:column="43">errbuf<pos:position pos:line="39" pos:column="49"/></name></expr></argument>)<pos:position pos:line="39" pos:column="50"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="39" pos:column="51"/></argument_list></call></expr></argument>)<pos:position pos:line="39" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="53"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="40" pos:column="5">sem_destroy<pos:position pos:line="40" pos:column="16"/></name><argument_list pos:line="40" pos:column="16">(<argument><expr><operator pos:line="40" pos:column="17">&amp;<pos:position pos:line="40" pos:column="22"/></operator><name><name pos:line="40" pos:column="18">phc<pos:position pos:line="40" pos:column="21"/></name><operator pos:line="40" pos:column="21">-&gt;<pos:position pos:line="40" pos:column="26"/></operator><name pos:line="40" pos:column="23">sema_cmd_start<pos:position pos:line="40" pos:column="37"/></name></name></expr></argument>)<pos:position pos:line="40" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="39"/></expr_stmt>
    <decl_stmt><decl><type><name pos:line="41" pos:column="5">int<pos:position pos:line="41" pos:column="8"/></name></type> <name pos:line="41" pos:column="9">errno_m<pos:position pos:line="41" pos:column="16"/></name> <init pos:line="41" pos:column="17">= <expr><name pos:line="41" pos:column="19">errno<pos:position pos:line="41" pos:column="24"/></name></expr></init></decl>;<pos:position pos:line="41" pos:column="25"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="42" pos:column="5">dpdk_shm_cleanup<pos:position pos:line="42" pos:column="21"/></name><argument_list pos:line="42" pos:column="21">(<argument><expr><name pos:line="42" pos:column="22">name<pos:position pos:line="42" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="28">shm_size<pos:position pos:line="42" pos:column="36"/></name></expr></argument>, <argument><expr><operator pos:line="42" pos:column="38">(<pos:position pos:line="42" pos:column="39"/></operator><name pos:line="42" pos:column="39">void<pos:position pos:line="42" pos:column="43"/></name> <operator pos:line="42" pos:column="44">*<pos:position pos:line="42" pos:column="45"/></operator><operator pos:line="42" pos:column="45">)<pos:position pos:line="42" pos:column="46"/></operator><name pos:line="42" pos:column="46">phc<pos:position pos:line="42" pos:column="49"/></name></expr></argument>)<pos:position pos:line="42" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="51"/></expr_stmt>
    <return pos:line="43" pos:column="5">return <expr><operator pos:line="43" pos:column="12">-<pos:position pos:line="43" pos:column="13"/></operator><name pos:line="43" pos:column="13">errno_m<pos:position pos:line="43" pos:column="20"/></name></expr>;<pos:position pos:line="43" pos:column="21"/></return>
  }<pos:position pos:line="44" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name><name pos:line="46" pos:column="3">phc<pos:position pos:line="46" pos:column="6"/></name><operator pos:line="46" pos:column="6">-&gt;<pos:position pos:line="46" pos:column="11"/></operator><name pos:line="46" pos:column="8">shm_size<pos:position pos:line="46" pos:column="16"/></name></name> <operator pos:line="46" pos:column="17">=<pos:position pos:line="46" pos:column="18"/></operator> <name pos:line="46" pos:column="19">shm_size<pos:position pos:line="46" pos:column="27"/></name></expr>;<pos:position pos:line="46" pos:column="28"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="47" pos:column="3">sstrncpy<pos:position pos:line="47" pos:column="11"/></name><argument_list pos:line="47" pos:column="11">(<argument><expr><name><name pos:line="47" pos:column="12">phc<pos:position pos:line="47" pos:column="15"/></name><operator pos:line="47" pos:column="15">-&gt;<pos:position pos:line="47" pos:column="20"/></operator><name pos:line="47" pos:column="17">shm_name<pos:position pos:line="47" pos:column="25"/></name></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="27">name<pos:position pos:line="47" pos:column="31"/></name></expr></argument>, <argument><expr><sizeof pos:line="47" pos:column="33">sizeof<argument_list pos:line="47" pos:column="39">(<argument><expr><name><name pos:line="47" pos:column="40">phc<pos:position pos:line="47" pos:column="43"/></name><operator pos:line="47" pos:column="43">-&gt;<pos:position pos:line="47" pos:column="48"/></operator><name pos:line="47" pos:column="45">shm_name<pos:position pos:line="47" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="47" pos:column="54"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="47" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="56"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="49" pos:column="3">dpdk_helper_config_default<pos:position pos:line="49" pos:column="29"/></name><argument_list pos:line="49" pos:column="29">(<argument><expr><name pos:line="49" pos:column="30">phc<pos:position pos:line="49" pos:column="33"/></name></expr></argument>)<pos:position pos:line="49" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="35"/></expr_stmt>

  <expr_stmt><expr><operator pos:line="51" pos:column="3">*<pos:position pos:line="51" pos:column="4"/></operator><name pos:line="51" pos:column="4">pphc<pos:position pos:line="51" pos:column="8"/></name> <operator pos:line="51" pos:column="9">=<pos:position pos:line="51" pos:column="10"/></operator> <name pos:line="51" pos:column="11">phc<pos:position pos:line="51" pos:column="14"/></name></expr>;<pos:position pos:line="51" pos:column="15"/></expr_stmt>

  <return pos:line="53" pos:column="3">return <expr><literal type="number" pos:line="53" pos:column="10">0<pos:position pos:line="53" pos:column="11"/></literal></expr>;<pos:position pos:line="53" pos:column="12"/></return>
}<pos:position pos:line="54" pos:column="2"/></block></function></unit>
