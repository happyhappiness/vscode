<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_56_collectd-4.3.1.cpp" pos:tabs="8"><decl_stmt><decl><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type>
<name pos:line="2" pos:column="1">tryall_dlopen_module<pos:position pos:line="2" pos:column="21"/></name> <argument_list pos:line="2" pos:column="22">(<argument><expr><name pos:line="2" pos:column="23">handle<pos:position pos:line="2" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="2" pos:column="31">prefix<pos:position pos:line="2" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="2" pos:column="39">dirname<pos:position pos:line="2" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="2" pos:column="48">dlname<pos:position pos:line="2" pos:column="54"/></name></expr></argument>)<pos:position pos:line="2" pos:column="55"/></argument_list>
     <name pos:line="3" pos:column="6">lt_dlhandle<pos:position pos:line="3" pos:column="17"/></name> <modifier pos:line="3" pos:column="18">*<pos:position pos:line="3" pos:column="19"/></modifier><name pos:line="3" pos:column="19">handle<pos:position pos:line="3" pos:column="25"/></name></decl>;<pos:position pos:line="3" pos:column="26"/></decl_stmt>
     <decl_stmt><decl><type><specifier pos:line="4" pos:column="6">const<pos:position pos:line="4" pos:column="11"/></specifier> <name pos:line="4" pos:column="12">char<pos:position pos:line="4" pos:column="16"/></name> <modifier pos:line="4" pos:column="17">*<pos:position pos:line="4" pos:column="18"/></modifier></type><name pos:line="4" pos:column="18">prefix<pos:position pos:line="4" pos:column="24"/></name></decl>;<pos:position pos:line="4" pos:column="25"/></decl_stmt>
     <decl_stmt><decl><type><specifier pos:line="5" pos:column="6">const<pos:position pos:line="5" pos:column="11"/></specifier> <name pos:line="5" pos:column="12">char<pos:position pos:line="5" pos:column="16"/></name> <modifier pos:line="5" pos:column="17">*<pos:position pos:line="5" pos:column="18"/></modifier></type><name pos:line="5" pos:column="18">dirname<pos:position pos:line="5" pos:column="25"/></name></decl>;<pos:position pos:line="5" pos:column="26"/></decl_stmt>
     <decl_stmt><decl><type><specifier pos:line="6" pos:column="6">const<pos:position pos:line="6" pos:column="11"/></specifier> <name pos:line="6" pos:column="12">char<pos:position pos:line="6" pos:column="16"/></name> <modifier pos:line="6" pos:column="17">*<pos:position pos:line="6" pos:column="18"/></modifier></type><name pos:line="6" pos:column="18">dlname<pos:position pos:line="6" pos:column="24"/></name></decl>;<pos:position pos:line="6" pos:column="25"/></decl_stmt>
<block pos:line="7" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">int<pos:position pos:line="8" pos:column="6"/></name></type>      <name pos:line="8" pos:column="12">error<pos:position pos:line="8" pos:column="17"/></name>	<init pos:line="8" pos:column="25">= <expr><literal type="number" pos:line="8" pos:column="27">0<pos:position pos:line="8" pos:column="28"/></literal></expr></init></decl>;<pos:position pos:line="8" pos:column="29"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">char<pos:position pos:line="9" pos:column="7"/></name>     <modifier pos:line="9" pos:column="12">*<pos:position pos:line="9" pos:column="13"/></modifier></type><name pos:line="9" pos:column="13">filename<pos:position pos:line="9" pos:column="21"/></name>	<init pos:line="9" pos:column="25">= <expr><literal type="number" pos:line="9" pos:column="27">0<pos:position pos:line="9" pos:column="28"/></literal></expr></init></decl>;<pos:position pos:line="9" pos:column="29"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">size_t<pos:position pos:line="10" pos:column="9"/></name></type>   <name pos:line="10" pos:column="12">filename_len<pos:position pos:line="10" pos:column="24"/></name>	<init pos:line="10" pos:column="25">= <expr><literal type="number" pos:line="10" pos:column="27">0<pos:position pos:line="10" pos:column="28"/></literal></expr></init></decl>;<pos:position pos:line="10" pos:column="29"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="11" pos:column="3">size_t<pos:position pos:line="11" pos:column="9"/></name></type>   <name pos:line="11" pos:column="12">dirname_len<pos:position pos:line="11" pos:column="23"/></name>	<init pos:line="11" pos:column="25">= <expr><call><name pos:line="11" pos:column="27">LT_STRLEN<pos:position pos:line="11" pos:column="36"/></name> <argument_list pos:line="11" pos:column="37">(<argument><expr><name pos:line="11" pos:column="38">dirname<pos:position pos:line="11" pos:column="45"/></name></expr></argument>)<pos:position pos:line="11" pos:column="46"/></argument_list></call></expr></init></decl>;<pos:position pos:line="11" pos:column="47"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="13" pos:column="3">assert<pos:position pos:line="13" pos:column="9"/></name> <argument_list pos:line="13" pos:column="10">(<argument><expr><name pos:line="13" pos:column="11">handle<pos:position pos:line="13" pos:column="17"/></name></expr></argument>)<pos:position pos:line="13" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="19"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="14" pos:column="3">assert<pos:position pos:line="14" pos:column="9"/></name> <argument_list pos:line="14" pos:column="10">(<argument><expr><name pos:line="14" pos:column="11">dirname<pos:position pos:line="14" pos:column="18"/></name></expr></argument>)<pos:position pos:line="14" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="20"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="15" pos:column="3">assert<pos:position pos:line="15" pos:column="9"/></name> <argument_list pos:line="15" pos:column="10">(<argument><expr><name pos:line="15" pos:column="11">dlname<pos:position pos:line="15" pos:column="17"/></name></expr></argument>)<pos:position pos:line="15" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="19"/></expr_stmt>
<cpp:ifdef pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">ifdef<pos:position pos:line="16" pos:column="7"/></cpp:directive> <name pos:line="16" pos:column="8">LT_DIRSEP_CHAR<pos:position pos:line="16" pos:column="22"/></name></cpp:ifdef>
  <comment type="block" pos:line="17" pos:column="3">/* Only canonicalized names (i.e. with DIRSEP chars already converted)
     should make it into this function:  */</comment>
  <expr_stmt><expr><call><name pos:line="19" pos:column="3">assert<pos:position pos:line="19" pos:column="9"/></name> <argument_list pos:line="19" pos:column="10">(<argument><expr><call><name pos:line="19" pos:column="11">strchr<pos:position pos:line="19" pos:column="17"/></name> <argument_list pos:line="19" pos:column="18">(<argument><expr><name pos:line="19" pos:column="19">dirname<pos:position pos:line="19" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="28">LT_DIRSEP_CHAR<pos:position pos:line="19" pos:column="42"/></name></expr></argument>)<pos:position pos:line="19" pos:column="43"/></argument_list></call> <operator pos:line="19" pos:column="44">==<pos:position pos:line="19" pos:column="46"/></operator> <literal type="number" pos:line="19" pos:column="47">0<pos:position pos:line="19" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="50"/></expr_stmt>
<cpp:endif pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">endif<pos:position pos:line="20" pos:column="7"/></cpp:directive></cpp:endif>

  <if pos:line="22" pos:column="3">if <condition pos:line="22" pos:column="6">(<expr><name pos:line="22" pos:column="7">dirname_len<pos:position pos:line="22" pos:column="18"/></name> <operator pos:line="22" pos:column="19">&gt;<pos:position pos:line="22" pos:column="23"/></operator> <literal type="number" pos:line="22" pos:column="21">0<pos:position pos:line="22" pos:column="22"/></literal></expr>)<pos:position pos:line="22" pos:column="23"/></condition><then pos:line="22" pos:column="23">
    <block type="pseudo"><if pos:line="23" pos:column="5">if <condition pos:line="23" pos:column="8">(<expr><name><name pos:line="23" pos:column="9">dirname<pos:position pos:line="23" pos:column="16"/></name><index pos:line="23" pos:column="16">[<expr><name pos:line="23" pos:column="17">dirname_len<pos:position pos:line="23" pos:column="28"/></name> <operator pos:line="23" pos:column="29">-<pos:position pos:line="23" pos:column="30"/></operator><literal type="number" pos:line="23" pos:column="30">1<pos:position pos:line="23" pos:column="31"/></literal></expr>]<pos:position pos:line="23" pos:column="32"/></index></name> <operator pos:line="23" pos:column="33">==<pos:position pos:line="23" pos:column="35"/></operator> <literal type="char" pos:line="23" pos:column="36">'/'<pos:position pos:line="23" pos:column="39"/></literal></expr>)<pos:position pos:line="23" pos:column="40"/></condition><then pos:line="23" pos:column="40">
      <block type="pseudo"><expr_stmt><expr><operator pos:line="24" pos:column="7">--<pos:position pos:line="24" pos:column="9"/></operator><name pos:line="24" pos:column="9">dirname_len<pos:position pos:line="24" pos:column="20"/></name></expr>;<pos:position pos:line="24" pos:column="21"/></expr_stmt></block></then></if></block></then></if>
  <expr_stmt><expr><name pos:line="25" pos:column="3">filename_len<pos:position pos:line="25" pos:column="15"/></name> <operator pos:line="25" pos:column="16">=<pos:position pos:line="25" pos:column="17"/></operator> <name pos:line="25" pos:column="18">dirname_len<pos:position pos:line="25" pos:column="29"/></name> <operator pos:line="25" pos:column="30">+<pos:position pos:line="25" pos:column="31"/></operator> <literal type="number" pos:line="25" pos:column="32">1<pos:position pos:line="25" pos:column="33"/></literal> <operator pos:line="25" pos:column="34">+<pos:position pos:line="25" pos:column="35"/></operator> <call><name pos:line="25" pos:column="36">LT_STRLEN<pos:position pos:line="25" pos:column="45"/></name> <argument_list pos:line="25" pos:column="46">(<argument><expr><name pos:line="25" pos:column="47">dlname<pos:position pos:line="25" pos:column="53"/></name></expr></argument>)<pos:position pos:line="25" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="55"/></expr_stmt>

  <comment type="block" pos:line="27" pos:column="3">/* Allocate memory, and combine DIRNAME and MODULENAME into it.
     The PREFIX (if any) is handled below.  */</comment>
  <expr_stmt><expr><name pos:line="29" pos:column="3">filename<pos:position pos:line="29" pos:column="11"/></name>  <operator pos:line="29" pos:column="13">=<pos:position pos:line="29" pos:column="14"/></operator> <call><name pos:line="29" pos:column="15">LT_EMALLOC<pos:position pos:line="29" pos:column="25"/></name> <argument_list pos:line="29" pos:column="26">(<argument><expr><name pos:line="29" pos:column="27">char<pos:position pos:line="29" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="33">dirname_len<pos:position pos:line="29" pos:column="44"/></name> <operator pos:line="29" pos:column="45">+<pos:position pos:line="29" pos:column="46"/></operator> <literal type="number" pos:line="29" pos:column="47">1<pos:position pos:line="29" pos:column="48"/></literal> <operator pos:line="29" pos:column="49">+<pos:position pos:line="29" pos:column="50"/></operator> <name pos:line="29" pos:column="51">filename_len<pos:position pos:line="29" pos:column="63"/></name> <operator pos:line="29" pos:column="64">+<pos:position pos:line="29" pos:column="65"/></operator> <literal type="number" pos:line="29" pos:column="66">1<pos:position pos:line="29" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="69"/></expr_stmt>
  <if pos:line="30" pos:column="3">if <condition pos:line="30" pos:column="6">(<expr><operator pos:line="30" pos:column="7">!<pos:position pos:line="30" pos:column="8"/></operator><name pos:line="30" pos:column="8">filename<pos:position pos:line="30" pos:column="16"/></name></expr>)<pos:position pos:line="30" pos:column="17"/></condition><then pos:line="30" pos:column="17">
    <block type="pseudo"><return pos:line="31" pos:column="5">return <expr><literal type="number" pos:line="31" pos:column="12">1<pos:position pos:line="31" pos:column="13"/></literal></expr>;<pos:position pos:line="31" pos:column="14"/></return></block></then></if>

  <expr_stmt><expr><call><name pos:line="33" pos:column="3">sprintf<pos:position pos:line="33" pos:column="10"/></name> <argument_list pos:line="33" pos:column="11">(<argument><expr><name pos:line="33" pos:column="12">filename<pos:position pos:line="33" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="33" pos:column="22">"%.*s/%s"<pos:position pos:line="33" pos:column="31"/></literal></expr></argument>, <argument><expr><operator pos:line="33" pos:column="33">(<pos:position pos:line="33" pos:column="34"/></operator><name pos:line="33" pos:column="34">int<pos:position pos:line="33" pos:column="37"/></name><operator pos:line="33" pos:column="37">)<pos:position pos:line="33" pos:column="38"/></operator> <name pos:line="33" pos:column="39">dirname_len<pos:position pos:line="33" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="52">dirname<pos:position pos:line="33" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="61">dlname<pos:position pos:line="33" pos:column="67"/></name></expr></argument>)<pos:position pos:line="33" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="69"/></expr_stmt>

  <comment type="block" pos:line="35" pos:column="3">/* Now that we have combined DIRNAME and MODULENAME, if there is
     also a PREFIX to contend with, simply recurse with the arguments
     shuffled.  Otherwise, attempt to open FILENAME as a module.  */</comment>
  <if pos:line="38" pos:column="3">if <condition pos:line="38" pos:column="6">(<expr><name pos:line="38" pos:column="7">prefix<pos:position pos:line="38" pos:column="13"/></name></expr>)<pos:position pos:line="38" pos:column="14"/></condition><then pos:line="38" pos:column="14">
    <block pos:line="39" pos:column="5">{
      <expr_stmt><expr><name pos:line="40" pos:column="7">error<pos:position pos:line="40" pos:column="12"/></name> <operator pos:line="40" pos:column="13">+=<pos:position pos:line="40" pos:column="15"/></operator> <call><name pos:line="40" pos:column="16">tryall_dlopen_module<pos:position pos:line="40" pos:column="36"/></name> <argument_list pos:line="40" pos:column="37">(<argument><expr><name pos:line="40" pos:column="38">handle<pos:position pos:line="40" pos:column="44"/></name></expr></argument>,
				     <argument><expr><operator pos:line="41" pos:column="38">(<pos:position pos:line="41" pos:column="39"/></operator><specifier pos:line="41" pos:column="39">const<pos:position pos:line="41" pos:column="44"/></specifier> <name pos:line="41" pos:column="45">char<pos:position pos:line="41" pos:column="49"/></name> <operator pos:line="41" pos:column="50">*<pos:position pos:line="41" pos:column="51"/></operator><operator pos:line="41" pos:column="51">)<pos:position pos:line="41" pos:column="52"/></operator> <literal type="number" pos:line="41" pos:column="53">0<pos:position pos:line="41" pos:column="54"/></literal></expr></argument>, <argument><expr><name pos:line="41" pos:column="56">prefix<pos:position pos:line="41" pos:column="62"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="64">filename<pos:position pos:line="41" pos:column="72"/></name></expr></argument>)<pos:position pos:line="41" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="74"/></expr_stmt>
    }<pos:position pos:line="42" pos:column="6"/></block></then>
  <elseif pos:line="43" pos:column="3">else <if pos:line="43" pos:column="8">if <condition pos:line="43" pos:column="11">(<expr><call><name pos:line="43" pos:column="12">tryall_dlopen<pos:position pos:line="43" pos:column="25"/></name> <argument_list pos:line="43" pos:column="26">(<argument><expr><name pos:line="43" pos:column="27">handle<pos:position pos:line="43" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="35">filename<pos:position pos:line="43" pos:column="43"/></name></expr></argument>)<pos:position pos:line="43" pos:column="44"/></argument_list></call> <operator pos:line="43" pos:column="45">!=<pos:position pos:line="43" pos:column="47"/></operator> <literal type="number" pos:line="43" pos:column="48">0<pos:position pos:line="43" pos:column="49"/></literal></expr>)<pos:position pos:line="43" pos:column="50"/></condition><then pos:line="43" pos:column="50">
    <block pos:line="44" pos:column="5">{
      <expr_stmt><expr><operator pos:line="45" pos:column="7">++<pos:position pos:line="45" pos:column="9"/></operator><name pos:line="45" pos:column="9">error<pos:position pos:line="45" pos:column="14"/></name></expr>;<pos:position pos:line="45" pos:column="15"/></expr_stmt>
    }<pos:position pos:line="46" pos:column="6"/></block></then></if></elseif></if>

  <expr_stmt><expr><call><name pos:line="48" pos:column="3">LT_DLFREE<pos:position pos:line="48" pos:column="12"/></name> <argument_list pos:line="48" pos:column="13">(<argument><expr><name pos:line="48" pos:column="14">filename<pos:position pos:line="48" pos:column="22"/></name></expr></argument>)<pos:position pos:line="48" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="24"/></expr_stmt>
  <return pos:line="49" pos:column="3">return <expr><name pos:line="49" pos:column="10">error<pos:position pos:line="49" pos:column="15"/></name></expr>;<pos:position pos:line="49" pos:column="16"/></return>
}<pos:position pos:line="50" pos:column="2"/></block></unit>
