<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_581_collectd-5.6.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">char<pos:position pos:line="1" pos:column="12"/></name> <modifier pos:line="1" pos:column="13">*<pos:position pos:line="1" pos:column="14"/></modifier></type><name pos:line="1" pos:column="14">sensu_value_to_json<pos:position pos:line="1" pos:column="33"/></name><parameter_list pos:line="1" pos:column="33">(<parameter><decl><type><name><name pos:line="1" pos:column="34">struct<pos:position pos:line="1" pos:column="40"/></name> <name pos:line="1" pos:column="41">sensu_host<pos:position pos:line="1" pos:column="51"/></name></name> <specifier pos:line="1" pos:column="52">const<pos:position pos:line="1" pos:column="57"/></specifier> <modifier pos:line="1" pos:column="58">*<pos:position pos:line="1" pos:column="59"/></modifier></type><name pos:line="1" pos:column="59">host<pos:position pos:line="1" pos:column="63"/></name></decl></parameter>, <comment type="block" pos:line="1" pos:column="65">/* {{{ */</comment>
		<parameter><decl><type><name pos:line="2" pos:column="17">data_set_t<pos:position pos:line="2" pos:column="27"/></name> <specifier pos:line="2" pos:column="28">const<pos:position pos:line="2" pos:column="33"/></specifier> <modifier pos:line="2" pos:column="34">*<pos:position pos:line="2" pos:column="35"/></modifier></type><name pos:line="2" pos:column="35">ds<pos:position pos:line="2" pos:column="37"/></name></decl></parameter>,
		<parameter><decl><type><name pos:line="3" pos:column="17">value_list_t<pos:position pos:line="3" pos:column="29"/></name> <specifier pos:line="3" pos:column="30">const<pos:position pos:line="3" pos:column="35"/></specifier> <modifier pos:line="3" pos:column="36">*<pos:position pos:line="3" pos:column="37"/></modifier></type><name pos:line="3" pos:column="37">vl<pos:position pos:line="3" pos:column="39"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="41">size_t<pos:position pos:line="3" pos:column="47"/></name></type> <name pos:line="3" pos:column="48">index<pos:position pos:line="3" pos:column="53"/></name></decl></parameter>,
		<parameter><decl><type><name pos:line="4" pos:column="17">gauge_t<pos:position pos:line="4" pos:column="24"/></name> <specifier pos:line="4" pos:column="25">const<pos:position pos:line="4" pos:column="30"/></specifier> <modifier pos:line="4" pos:column="31">*<pos:position pos:line="4" pos:column="32"/></modifier></type><name pos:line="4" pos:column="32">rates<pos:position pos:line="4" pos:column="37"/></name></decl></parameter>,
		<parameter><decl><type><name pos:line="5" pos:column="17">int<pos:position pos:line="5" pos:column="20"/></name></type> <name pos:line="5" pos:column="21">status<pos:position pos:line="5" pos:column="27"/></name></decl></parameter>)<pos:position pos:line="5" pos:column="28"/></parameter_list>
<block pos:line="6" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">char<pos:position pos:line="7" pos:column="13"/></name></type> <name><name pos:line="7" pos:column="14">name_buffer<pos:position pos:line="7" pos:column="25"/></name><index pos:line="7" pos:column="25">[<expr><literal type="number" pos:line="7" pos:column="26">5<pos:position pos:line="7" pos:column="27"/></literal> <operator pos:line="7" pos:column="28">*<pos:position pos:line="7" pos:column="29"/></operator> <name pos:line="7" pos:column="30">DATA_MAX_NAME_LEN<pos:position pos:line="7" pos:column="47"/></name></expr>]<pos:position pos:line="7" pos:column="48"/></index></name></decl>;<pos:position pos:line="7" pos:column="49"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">char<pos:position pos:line="8" pos:column="13"/></name></type> <name><name pos:line="8" pos:column="14">service_buffer<pos:position pos:line="8" pos:column="28"/></name><index pos:line="8" pos:column="28">[<expr><literal type="number" pos:line="8" pos:column="29">6<pos:position pos:line="8" pos:column="30"/></literal> <operator pos:line="8" pos:column="31">*<pos:position pos:line="8" pos:column="32"/></operator> <name pos:line="8" pos:column="33">DATA_MAX_NAME_LEN<pos:position pos:line="8" pos:column="50"/></name></expr>]<pos:position pos:line="8" pos:column="51"/></index></name></decl>;<pos:position pos:line="8" pos:column="52"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="9" pos:column="9">char<pos:position pos:line="9" pos:column="13"/></name> <modifier pos:line="9" pos:column="14">*<pos:position pos:line="9" pos:column="15"/></modifier></type><name pos:line="9" pos:column="15">ret_str<pos:position pos:line="9" pos:column="22"/></name></decl>;<pos:position pos:line="9" pos:column="23"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="10" pos:column="9">char<pos:position pos:line="10" pos:column="13"/></name> <modifier pos:line="10" pos:column="14">*<pos:position pos:line="10" pos:column="15"/></modifier></type><name pos:line="10" pos:column="15">temp_str<pos:position pos:line="10" pos:column="23"/></name></decl>;<pos:position pos:line="10" pos:column="24"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="11" pos:column="9">char<pos:position pos:line="11" pos:column="13"/></name> <modifier pos:line="11" pos:column="14">*<pos:position pos:line="11" pos:column="15"/></modifier></type><name pos:line="11" pos:column="15">value_str<pos:position pos:line="11" pos:column="24"/></name></decl>;<pos:position pos:line="11" pos:column="25"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="12" pos:column="9">int<pos:position pos:line="12" pos:column="12"/></name></type> <name pos:line="12" pos:column="13">res<pos:position pos:line="12" pos:column="16"/></name></decl>;<pos:position pos:line="12" pos:column="17"/></decl_stmt>
	<comment type="line" pos:line="13" pos:column="9">// First part of the JSON string</comment>
	<decl_stmt><decl><type><specifier pos:line="14" pos:column="9">const<pos:position pos:line="14" pos:column="14"/></specifier> <name pos:line="14" pos:column="15">char<pos:position pos:line="14" pos:column="19"/></name> <modifier pos:line="14" pos:column="20">*<pos:position pos:line="14" pos:column="21"/></modifier></type><name pos:line="14" pos:column="21">part1<pos:position pos:line="14" pos:column="26"/></name> <init pos:line="14" pos:column="27">= <expr><literal type="string" pos:line="14" pos:column="29">"{\"name\": \"collectd\", \"type\": \"metric\""<pos:position pos:line="14" pos:column="76"/></literal></expr></init></decl>;<pos:position pos:line="14" pos:column="77"/></decl_stmt>

	<decl_stmt><decl><type><name pos:line="16" pos:column="9">char<pos:position pos:line="16" pos:column="13"/></name> <modifier pos:line="16" pos:column="14">*<pos:position pos:line="16" pos:column="15"/></modifier></type><name pos:line="16" pos:column="15">handlers_str<pos:position pos:line="16" pos:column="27"/></name> <init pos:line="16" pos:column="28">= <expr><call><name pos:line="16" pos:column="30">build_json_str_list<pos:position pos:line="16" pos:column="49"/></name><argument_list pos:line="16" pos:column="49">(<argument><expr><literal type="string" pos:line="16" pos:column="50">"handlers"<pos:position pos:line="16" pos:column="60"/></literal></expr></argument>, <argument><expr><operator pos:line="16" pos:column="62">&amp;<pos:position pos:line="16" pos:column="67"/></operator><operator pos:line="16" pos:column="63">(<pos:position pos:line="16" pos:column="64"/></operator><name><name pos:line="16" pos:column="64">host<pos:position pos:line="16" pos:column="68"/></name><operator pos:line="16" pos:column="68">-&gt;<pos:position pos:line="16" pos:column="73"/></operator><name pos:line="16" pos:column="70">metric_handlers<pos:position pos:line="16" pos:column="85"/></name></name><operator pos:line="16" pos:column="85">)<pos:position pos:line="16" pos:column="86"/></operator></expr></argument>)<pos:position pos:line="16" pos:column="87"/></argument_list></call></expr></init></decl>;<pos:position pos:line="16" pos:column="88"/></decl_stmt>
	<if pos:line="17" pos:column="9">if <condition pos:line="17" pos:column="12">(<expr><name pos:line="17" pos:column="13">handlers_str<pos:position pos:line="17" pos:column="25"/></name> <operator pos:line="17" pos:column="26">==<pos:position pos:line="17" pos:column="28"/></operator> <name pos:line="17" pos:column="29">NULL<pos:position pos:line="17" pos:column="33"/></name></expr>)<pos:position pos:line="17" pos:column="34"/></condition><then pos:line="17" pos:column="34"> <block pos:line="17" pos:column="35">{
		<expr_stmt><expr><call><name pos:line="18" pos:column="17">ERROR<pos:position pos:line="18" pos:column="22"/></name><argument_list pos:line="18" pos:column="22">(<argument><expr><literal type="string" pos:line="18" pos:column="23">"write_sensu plugin: Unable to alloc memory"<pos:position pos:line="18" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="69"/></expr_stmt>
		<return pos:line="19" pos:column="17">return <expr><name pos:line="19" pos:column="24">NULL<pos:position pos:line="19" pos:column="28"/></name></expr>;<pos:position pos:line="19" pos:column="29"/></return>
	}<pos:position pos:line="20" pos:column="10"/></block></then></if>

	<comment type="line" pos:line="22" pos:column="9">// incorporate the handlers</comment>
	<if pos:line="23" pos:column="9">if <condition pos:line="23" pos:column="12">(<expr><call><name pos:line="23" pos:column="13">strlen<pos:position pos:line="23" pos:column="19"/></name><argument_list pos:line="23" pos:column="19">(<argument><expr><name pos:line="23" pos:column="20">handlers_str<pos:position pos:line="23" pos:column="32"/></name></expr></argument>)<pos:position pos:line="23" pos:column="33"/></argument_list></call> <operator pos:line="23" pos:column="34">==<pos:position pos:line="23" pos:column="36"/></operator> <literal type="number" pos:line="23" pos:column="37">0<pos:position pos:line="23" pos:column="38"/></literal></expr>)<pos:position pos:line="23" pos:column="39"/></condition><then pos:line="23" pos:column="39"> <block pos:line="23" pos:column="40">{
		<expr_stmt><expr><call><name pos:line="24" pos:column="17">free<pos:position pos:line="24" pos:column="21"/></name><argument_list pos:line="24" pos:column="21">(<argument><expr><name pos:line="24" pos:column="22">handlers_str<pos:position pos:line="24" pos:column="34"/></name></expr></argument>)<pos:position pos:line="24" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="36"/></expr_stmt>
		<expr_stmt><expr><name pos:line="25" pos:column="17">ret_str<pos:position pos:line="25" pos:column="24"/></name> <operator pos:line="25" pos:column="25">=<pos:position pos:line="25" pos:column="26"/></operator> <call><name pos:line="25" pos:column="27">strdup<pos:position pos:line="25" pos:column="33"/></name><argument_list pos:line="25" pos:column="33">(<argument><expr><name pos:line="25" pos:column="34">part1<pos:position pos:line="25" pos:column="39"/></name></expr></argument>)<pos:position pos:line="25" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="41"/></expr_stmt>
		<if pos:line="26" pos:column="17">if <condition pos:line="26" pos:column="20">(<expr><name pos:line="26" pos:column="21">ret_str<pos:position pos:line="26" pos:column="28"/></name> <operator pos:line="26" pos:column="29">==<pos:position pos:line="26" pos:column="31"/></operator> <name pos:line="26" pos:column="32">NULL<pos:position pos:line="26" pos:column="36"/></name></expr>)<pos:position pos:line="26" pos:column="37"/></condition><then pos:line="26" pos:column="37"> <block pos:line="26" pos:column="38">{
			<expr_stmt><expr><call><name pos:line="27" pos:column="25">ERROR<pos:position pos:line="27" pos:column="30"/></name><argument_list pos:line="27" pos:column="30">(<argument><expr><literal type="string" pos:line="27" pos:column="31">"write_sensu plugin: Unable to alloc memory"<pos:position pos:line="27" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="77"/></expr_stmt>
			<return pos:line="28" pos:column="25">return <expr><name pos:line="28" pos:column="32">NULL<pos:position pos:line="28" pos:column="36"/></name></expr>;<pos:position pos:line="28" pos:column="37"/></return>
		}<pos:position pos:line="29" pos:column="18"/></block></then></if>
	}<pos:position pos:line="30" pos:column="10"/></block></then>
	<else pos:line="31" pos:column="9">else <block pos:line="31" pos:column="14">{
		<expr_stmt><expr><name pos:line="32" pos:column="17">res<pos:position pos:line="32" pos:column="20"/></name> <operator pos:line="32" pos:column="21">=<pos:position pos:line="32" pos:column="22"/></operator> <call><name pos:line="32" pos:column="23">my_asprintf<pos:position pos:line="32" pos:column="34"/></name><argument_list pos:line="32" pos:column="34">(<argument><expr><operator pos:line="32" pos:column="35">&amp;<pos:position pos:line="32" pos:column="40"/></operator><name pos:line="32" pos:column="36">ret_str<pos:position pos:line="32" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="32" pos:column="45">"%s, %s"<pos:position pos:line="32" pos:column="53"/></literal></expr></argument>, <argument><expr><name pos:line="32" pos:column="55">part1<pos:position pos:line="32" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="62">handlers_str<pos:position pos:line="32" pos:column="74"/></name></expr></argument>)<pos:position pos:line="32" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="76"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="33" pos:column="17">free<pos:position pos:line="33" pos:column="21"/></name><argument_list pos:line="33" pos:column="21">(<argument><expr><name pos:line="33" pos:column="22">handlers_str<pos:position pos:line="33" pos:column="34"/></name></expr></argument>)<pos:position pos:line="33" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="36"/></expr_stmt>
		<if pos:line="34" pos:column="17">if <condition pos:line="34" pos:column="20">(<expr><name pos:line="34" pos:column="21">res<pos:position pos:line="34" pos:column="24"/></name> <operator pos:line="34" pos:column="25">==<pos:position pos:line="34" pos:column="27"/></operator> <operator pos:line="34" pos:column="28">-<pos:position pos:line="34" pos:column="29"/></operator><literal type="number" pos:line="34" pos:column="29">1<pos:position pos:line="34" pos:column="30"/></literal></expr>)<pos:position pos:line="34" pos:column="31"/></condition><then pos:line="34" pos:column="31"> <block pos:line="34" pos:column="32">{
			<expr_stmt><expr><call><name pos:line="35" pos:column="25">ERROR<pos:position pos:line="35" pos:column="30"/></name><argument_list pos:line="35" pos:column="30">(<argument><expr><literal type="string" pos:line="35" pos:column="31">"write_sensu plugin: Unable to alloc memory"<pos:position pos:line="35" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="35" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="77"/></expr_stmt>
			<return pos:line="36" pos:column="25">return <expr><name pos:line="36" pos:column="32">NULL<pos:position pos:line="36" pos:column="36"/></name></expr>;<pos:position pos:line="36" pos:column="37"/></return>
		}<pos:position pos:line="37" pos:column="18"/></block></then></if>
	}<pos:position pos:line="38" pos:column="10"/></block></else></if>

	<comment type="line" pos:line="40" pos:column="9">// incorporate the plugin name information</comment>
	<expr_stmt><expr><name pos:line="41" pos:column="9">res<pos:position pos:line="41" pos:column="12"/></name> <operator pos:line="41" pos:column="13">=<pos:position pos:line="41" pos:column="14"/></operator> <call><name pos:line="41" pos:column="15">my_asprintf<pos:position pos:line="41" pos:column="26"/></name><argument_list pos:line="41" pos:column="26">(<argument><expr><operator pos:line="41" pos:column="27">&amp;<pos:position pos:line="41" pos:column="32"/></operator><name pos:line="41" pos:column="28">temp_str<pos:position pos:line="41" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="41" pos:column="38">"%s, \"collectd_plugin\": \"%s\""<pos:position pos:line="41" pos:column="71"/></literal></expr></argument>, <argument><expr><name pos:line="41" pos:column="73">ret_str<pos:position pos:line="41" pos:column="80"/></name></expr></argument>, <argument><expr><name><name pos:line="41" pos:column="82">vl<pos:position pos:line="41" pos:column="84"/></name><operator pos:line="41" pos:column="84">-&gt;<pos:position pos:line="41" pos:column="89"/></operator><name pos:line="41" pos:column="86">plugin<pos:position pos:line="41" pos:column="92"/></name></name></expr></argument>)<pos:position pos:line="41" pos:column="93"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="94"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="42" pos:column="9">free<pos:position pos:line="42" pos:column="13"/></name><argument_list pos:line="42" pos:column="13">(<argument><expr><name pos:line="42" pos:column="14">ret_str<pos:position pos:line="42" pos:column="21"/></name></expr></argument>)<pos:position pos:line="42" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="23"/></expr_stmt>
	<if pos:line="43" pos:column="9">if <condition pos:line="43" pos:column="12">(<expr><name pos:line="43" pos:column="13">res<pos:position pos:line="43" pos:column="16"/></name> <operator pos:line="43" pos:column="17">==<pos:position pos:line="43" pos:column="19"/></operator> <operator pos:line="43" pos:column="20">-<pos:position pos:line="43" pos:column="21"/></operator><literal type="number" pos:line="43" pos:column="21">1<pos:position pos:line="43" pos:column="22"/></literal></expr>)<pos:position pos:line="43" pos:column="23"/></condition><then pos:line="43" pos:column="23"> <block pos:line="43" pos:column="24">{
		<expr_stmt><expr><call><name pos:line="44" pos:column="17">ERROR<pos:position pos:line="44" pos:column="22"/></name><argument_list pos:line="44" pos:column="22">(<argument><expr><literal type="string" pos:line="44" pos:column="23">"write_sensu plugin: Unable to alloc memory"<pos:position pos:line="44" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="44" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="69"/></expr_stmt>
		<return pos:line="45" pos:column="17">return <expr><name pos:line="45" pos:column="24">NULL<pos:position pos:line="45" pos:column="28"/></name></expr>;<pos:position pos:line="45" pos:column="29"/></return>
	}<pos:position pos:line="46" pos:column="10"/></block></then></if>
	<expr_stmt><expr><name pos:line="47" pos:column="9">ret_str<pos:position pos:line="47" pos:column="16"/></name> <operator pos:line="47" pos:column="17">=<pos:position pos:line="47" pos:column="18"/></operator> <name pos:line="47" pos:column="19">temp_str<pos:position pos:line="47" pos:column="27"/></name></expr>;<pos:position pos:line="47" pos:column="28"/></expr_stmt>

	<comment type="line" pos:line="49" pos:column="9">// incorporate the plugin type</comment>
	<expr_stmt><expr><name pos:line="50" pos:column="9">res<pos:position pos:line="50" pos:column="12"/></name> <operator pos:line="50" pos:column="13">=<pos:position pos:line="50" pos:column="14"/></operator> <call><name pos:line="50" pos:column="15">my_asprintf<pos:position pos:line="50" pos:column="26"/></name><argument_list pos:line="50" pos:column="26">(<argument><expr><operator pos:line="50" pos:column="27">&amp;<pos:position pos:line="50" pos:column="32"/></operator><name pos:line="50" pos:column="28">temp_str<pos:position pos:line="50" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="50" pos:column="38">"%s, \"collectd_plugin_type\": \"%s\""<pos:position pos:line="50" pos:column="76"/></literal></expr></argument>, <argument><expr><name pos:line="50" pos:column="78">ret_str<pos:position pos:line="50" pos:column="85"/></name></expr></argument>, <argument><expr><name><name pos:line="50" pos:column="87">vl<pos:position pos:line="50" pos:column="89"/></name><operator pos:line="50" pos:column="89">-&gt;<pos:position pos:line="50" pos:column="94"/></operator><name pos:line="50" pos:column="91">type<pos:position pos:line="50" pos:column="95"/></name></name></expr></argument>)<pos:position pos:line="50" pos:column="96"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="97"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="51" pos:column="9">free<pos:position pos:line="51" pos:column="13"/></name><argument_list pos:line="51" pos:column="13">(<argument><expr><name pos:line="51" pos:column="14">ret_str<pos:position pos:line="51" pos:column="21"/></name></expr></argument>)<pos:position pos:line="51" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="23"/></expr_stmt>
	<if pos:line="52" pos:column="9">if <condition pos:line="52" pos:column="12">(<expr><name pos:line="52" pos:column="13">res<pos:position pos:line="52" pos:column="16"/></name> <operator pos:line="52" pos:column="17">==<pos:position pos:line="52" pos:column="19"/></operator> <operator pos:line="52" pos:column="20">-<pos:position pos:line="52" pos:column="21"/></operator><literal type="number" pos:line="52" pos:column="21">1<pos:position pos:line="52" pos:column="22"/></literal></expr>)<pos:position pos:line="52" pos:column="23"/></condition><then pos:line="52" pos:column="23"> <block pos:line="52" pos:column="24">{
		<expr_stmt><expr><call><name pos:line="53" pos:column="17">ERROR<pos:position pos:line="53" pos:column="22"/></name><argument_list pos:line="53" pos:column="22">(<argument><expr><literal type="string" pos:line="53" pos:column="23">"write_sensu plugin: Unable to alloc memory"<pos:position pos:line="53" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="53" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="69"/></expr_stmt>
		<return pos:line="54" pos:column="17">return <expr><name pos:line="54" pos:column="24">NULL<pos:position pos:line="54" pos:column="28"/></name></expr>;<pos:position pos:line="54" pos:column="29"/></return>
	}<pos:position pos:line="55" pos:column="10"/></block></then></if>
	<expr_stmt><expr><name pos:line="56" pos:column="9">ret_str<pos:position pos:line="56" pos:column="16"/></name> <operator pos:line="56" pos:column="17">=<pos:position pos:line="56" pos:column="18"/></operator> <name pos:line="56" pos:column="19">temp_str<pos:position pos:line="56" pos:column="27"/></name></expr>;<pos:position pos:line="56" pos:column="28"/></expr_stmt>

	<comment type="line" pos:line="58" pos:column="9">// incorporate the plugin instance if any</comment>
	<if pos:line="59" pos:column="9">if <condition pos:line="59" pos:column="12">(<expr><name><name pos:line="59" pos:column="13">vl<pos:position pos:line="59" pos:column="15"/></name><operator pos:line="59" pos:column="15">-&gt;<pos:position pos:line="59" pos:column="20"/></operator><name pos:line="59" pos:column="17">plugin_instance<pos:position pos:line="59" pos:column="32"/></name><index pos:line="59" pos:column="32">[<expr><literal type="number" pos:line="59" pos:column="33">0<pos:position pos:line="59" pos:column="34"/></literal></expr>]<pos:position pos:line="59" pos:column="35"/></index></name> <operator pos:line="59" pos:column="36">!=<pos:position pos:line="59" pos:column="38"/></operator> <literal type="number" pos:line="59" pos:column="39">0<pos:position pos:line="59" pos:column="40"/></literal></expr>)<pos:position pos:line="59" pos:column="41"/></condition><then pos:line="59" pos:column="41"> <block pos:line="59" pos:column="42">{
		<expr_stmt><expr><name pos:line="60" pos:column="17">res<pos:position pos:line="60" pos:column="20"/></name> <operator pos:line="60" pos:column="21">=<pos:position pos:line="60" pos:column="22"/></operator> <call><name pos:line="60" pos:column="23">my_asprintf<pos:position pos:line="60" pos:column="34"/></name><argument_list pos:line="60" pos:column="34">(<argument><expr><operator pos:line="60" pos:column="35">&amp;<pos:position pos:line="60" pos:column="40"/></operator><name pos:line="60" pos:column="36">temp_str<pos:position pos:line="60" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="60" pos:column="46">"%s, \"collectd_plugin_instance\": \"%s\""<pos:position pos:line="60" pos:column="88"/></literal></expr></argument>, <argument><expr><name pos:line="60" pos:column="90">ret_str<pos:position pos:line="60" pos:column="97"/></name></expr></argument>, <argument><expr><name><name pos:line="60" pos:column="99">vl<pos:position pos:line="60" pos:column="101"/></name><operator pos:line="60" pos:column="101">-&gt;<pos:position pos:line="60" pos:column="106"/></operator><name pos:line="60" pos:column="103">plugin_instance<pos:position pos:line="60" pos:column="118"/></name></name></expr></argument>)<pos:position pos:line="60" pos:column="119"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="120"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="61" pos:column="17">free<pos:position pos:line="61" pos:column="21"/></name><argument_list pos:line="61" pos:column="21">(<argument><expr><name pos:line="61" pos:column="22">ret_str<pos:position pos:line="61" pos:column="29"/></name></expr></argument>)<pos:position pos:line="61" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="31"/></expr_stmt>
		<if pos:line="62" pos:column="17">if <condition pos:line="62" pos:column="20">(<expr><name pos:line="62" pos:column="21">res<pos:position pos:line="62" pos:column="24"/></name> <operator pos:line="62" pos:column="25">==<pos:position pos:line="62" pos:column="27"/></operator> <operator pos:line="62" pos:column="28">-<pos:position pos:line="62" pos:column="29"/></operator><literal type="number" pos:line="62" pos:column="29">1<pos:position pos:line="62" pos:column="30"/></literal></expr>)<pos:position pos:line="62" pos:column="31"/></condition><then pos:line="62" pos:column="31"> <block pos:line="62" pos:column="32">{
			<expr_stmt><expr><call><name pos:line="63" pos:column="25">ERROR<pos:position pos:line="63" pos:column="30"/></name><argument_list pos:line="63" pos:column="30">(<argument><expr><literal type="string" pos:line="63" pos:column="31">"write_sensu plugin: Unable to alloc memory"<pos:position pos:line="63" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="63" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="77"/></expr_stmt>
			<return pos:line="64" pos:column="25">return <expr><name pos:line="64" pos:column="32">NULL<pos:position pos:line="64" pos:column="36"/></name></expr>;<pos:position pos:line="64" pos:column="37"/></return>
		}<pos:position pos:line="65" pos:column="18"/></block></then></if>
		<expr_stmt><expr><name pos:line="66" pos:column="17">ret_str<pos:position pos:line="66" pos:column="24"/></name> <operator pos:line="66" pos:column="25">=<pos:position pos:line="66" pos:column="26"/></operator> <name pos:line="66" pos:column="27">temp_str<pos:position pos:line="66" pos:column="35"/></name></expr>;<pos:position pos:line="66" pos:column="36"/></expr_stmt>
	}<pos:position pos:line="67" pos:column="10"/></block></then></if>

	<comment type="line" pos:line="69" pos:column="9">// incorporate the plugin type instance if any</comment>
	<if pos:line="70" pos:column="9">if <condition pos:line="70" pos:column="12">(<expr><name><name pos:line="70" pos:column="13">vl<pos:position pos:line="70" pos:column="15"/></name><operator pos:line="70" pos:column="15">-&gt;<pos:position pos:line="70" pos:column="20"/></operator><name pos:line="70" pos:column="17">type_instance<pos:position pos:line="70" pos:column="30"/></name><index pos:line="70" pos:column="30">[<expr><literal type="number" pos:line="70" pos:column="31">0<pos:position pos:line="70" pos:column="32"/></literal></expr>]<pos:position pos:line="70" pos:column="33"/></index></name> <operator pos:line="70" pos:column="34">!=<pos:position pos:line="70" pos:column="36"/></operator> <literal type="number" pos:line="70" pos:column="37">0<pos:position pos:line="70" pos:column="38"/></literal></expr>)<pos:position pos:line="70" pos:column="39"/></condition><then pos:line="70" pos:column="39"> <block pos:line="70" pos:column="40">{
		<expr_stmt><expr><name pos:line="71" pos:column="17">res<pos:position pos:line="71" pos:column="20"/></name> <operator pos:line="71" pos:column="21">=<pos:position pos:line="71" pos:column="22"/></operator> <call><name pos:line="71" pos:column="23">my_asprintf<pos:position pos:line="71" pos:column="34"/></name><argument_list pos:line="71" pos:column="34">(<argument><expr><operator pos:line="71" pos:column="35">&amp;<pos:position pos:line="71" pos:column="40"/></operator><name pos:line="71" pos:column="36">temp_str<pos:position pos:line="71" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="71" pos:column="46">"%s, \"collectd_plugin_type_instance\": \"%s\""<pos:position pos:line="71" pos:column="93"/></literal></expr></argument>, <argument><expr><name pos:line="71" pos:column="95">ret_str<pos:position pos:line="71" pos:column="102"/></name></expr></argument>, <argument><expr><name><name pos:line="71" pos:column="104">vl<pos:position pos:line="71" pos:column="106"/></name><operator pos:line="71" pos:column="106">-&gt;<pos:position pos:line="71" pos:column="111"/></operator><name pos:line="71" pos:column="108">type_instance<pos:position pos:line="71" pos:column="121"/></name></name></expr></argument>)<pos:position pos:line="71" pos:column="122"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="123"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="72" pos:column="17">free<pos:position pos:line="72" pos:column="21"/></name><argument_list pos:line="72" pos:column="21">(<argument><expr><name pos:line="72" pos:column="22">ret_str<pos:position pos:line="72" pos:column="29"/></name></expr></argument>)<pos:position pos:line="72" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="31"/></expr_stmt>
		<if pos:line="73" pos:column="17">if <condition pos:line="73" pos:column="20">(<expr><name pos:line="73" pos:column="21">res<pos:position pos:line="73" pos:column="24"/></name> <operator pos:line="73" pos:column="25">==<pos:position pos:line="73" pos:column="27"/></operator> <operator pos:line="73" pos:column="28">-<pos:position pos:line="73" pos:column="29"/></operator><literal type="number" pos:line="73" pos:column="29">1<pos:position pos:line="73" pos:column="30"/></literal></expr>)<pos:position pos:line="73" pos:column="31"/></condition><then pos:line="73" pos:column="31"> <block pos:line="73" pos:column="32">{
			<expr_stmt><expr><call><name pos:line="74" pos:column="25">ERROR<pos:position pos:line="74" pos:column="30"/></name><argument_list pos:line="74" pos:column="30">(<argument><expr><literal type="string" pos:line="74" pos:column="31">"write_sensu plugin: Unable to alloc memory"<pos:position pos:line="74" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="74" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="77"/></expr_stmt>
			<return pos:line="75" pos:column="25">return <expr><name pos:line="75" pos:column="32">NULL<pos:position pos:line="75" pos:column="36"/></name></expr>;<pos:position pos:line="75" pos:column="37"/></return>
		}<pos:position pos:line="76" pos:column="18"/></block></then></if>
		<expr_stmt><expr><name pos:line="77" pos:column="17">ret_str<pos:position pos:line="77" pos:column="24"/></name> <operator pos:line="77" pos:column="25">=<pos:position pos:line="77" pos:column="26"/></operator> <name pos:line="77" pos:column="27">temp_str<pos:position pos:line="77" pos:column="35"/></name></expr>;<pos:position pos:line="77" pos:column="36"/></expr_stmt>
	}<pos:position pos:line="78" pos:column="10"/></block></then></if>

	<comment type="line" pos:line="80" pos:column="9">// incorporate the data source type</comment>
	<if pos:line="81" pos:column="9">if <condition pos:line="81" pos:column="12">(<expr><operator pos:line="81" pos:column="13">(<pos:position pos:line="81" pos:column="14"/></operator><name><name pos:line="81" pos:column="14">ds<pos:position pos:line="81" pos:column="16"/></name><operator pos:line="81" pos:column="16">-&gt;<pos:position pos:line="81" pos:column="21"/></operator><name pos:line="81" pos:column="18">ds<pos:position pos:line="81" pos:column="20"/></name><index pos:line="81" pos:column="20">[<expr><name pos:line="81" pos:column="21">index<pos:position pos:line="81" pos:column="26"/></name></expr>]<pos:position pos:line="81" pos:column="27"/></index></name><operator pos:line="81" pos:column="27">.<pos:position pos:line="81" pos:column="28"/></operator><name pos:line="81" pos:column="28">type<pos:position pos:line="81" pos:column="32"/></name> <operator pos:line="81" pos:column="33">!=<pos:position pos:line="81" pos:column="35"/></operator> <name pos:line="81" pos:column="36">DS_TYPE_GAUGE<pos:position pos:line="81" pos:column="49"/></name><operator pos:line="81" pos:column="49">)<pos:position pos:line="81" pos:column="50"/></operator> <operator pos:line="81" pos:column="51">&amp;&amp;<pos:position pos:line="81" pos:column="61"/></operator> <operator pos:line="81" pos:column="54">(<pos:position pos:line="81" pos:column="55"/></operator><name pos:line="81" pos:column="55">rates<pos:position pos:line="81" pos:column="60"/></name> <operator pos:line="81" pos:column="61">!=<pos:position pos:line="81" pos:column="63"/></operator> <name pos:line="81" pos:column="64">NULL<pos:position pos:line="81" pos:column="68"/></name><operator pos:line="81" pos:column="68">)<pos:position pos:line="81" pos:column="69"/></operator></expr>)<pos:position pos:line="81" pos:column="70"/></condition><then pos:line="81" pos:column="70"> <block pos:line="81" pos:column="71">{
		<decl_stmt><decl><type><name pos:line="82" pos:column="17">char<pos:position pos:line="82" pos:column="21"/></name></type> <name><name pos:line="82" pos:column="22">ds_type<pos:position pos:line="82" pos:column="29"/></name><index pos:line="82" pos:column="29">[<expr><name pos:line="82" pos:column="30">DATA_MAX_NAME_LEN<pos:position pos:line="82" pos:column="47"/></name></expr>]<pos:position pos:line="82" pos:column="48"/></index></name></decl>;<pos:position pos:line="82" pos:column="49"/></decl_stmt>
		<expr_stmt><expr><call><name pos:line="83" pos:column="17">ssnprintf<pos:position pos:line="83" pos:column="26"/></name> <argument_list pos:line="83" pos:column="27">(<argument><expr><name pos:line="83" pos:column="28">ds_type<pos:position pos:line="83" pos:column="35"/></name></expr></argument>, <argument><expr><sizeof pos:line="83" pos:column="37">sizeof <argument_list pos:line="83" pos:column="44">(<argument><expr><name pos:line="83" pos:column="45">ds_type<pos:position pos:line="83" pos:column="52"/></name></expr></argument>)<pos:position pos:line="83" pos:column="53"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="83" pos:column="55">"%s:rate"<pos:position pos:line="83" pos:column="64"/></literal></expr></argument>, <argument><expr><call><name pos:line="83" pos:column="66">DS_TYPE_TO_STRING<pos:position pos:line="83" pos:column="83"/></name><argument_list pos:line="83" pos:column="83">(<argument><expr><name><name pos:line="83" pos:column="84">ds<pos:position pos:line="83" pos:column="86"/></name><operator pos:line="83" pos:column="86">-&gt;<pos:position pos:line="83" pos:column="91"/></operator><name pos:line="83" pos:column="88">ds<pos:position pos:line="83" pos:column="90"/></name><index pos:line="83" pos:column="90">[<expr><name pos:line="83" pos:column="91">index<pos:position pos:line="83" pos:column="96"/></name></expr>]<pos:position pos:line="83" pos:column="97"/></index></name><operator pos:line="83" pos:column="97">.<pos:position pos:line="83" pos:column="98"/></operator><name pos:line="83" pos:column="98">type<pos:position pos:line="83" pos:column="102"/></name></expr></argument>)<pos:position pos:line="83" pos:column="103"/></argument_list></call></expr></argument>)<pos:position pos:line="83" pos:column="104"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="105"/></expr_stmt>
		<expr_stmt><expr><name pos:line="84" pos:column="17">res<pos:position pos:line="84" pos:column="20"/></name> <operator pos:line="84" pos:column="21">=<pos:position pos:line="84" pos:column="22"/></operator> <call><name pos:line="84" pos:column="23">my_asprintf<pos:position pos:line="84" pos:column="34"/></name><argument_list pos:line="84" pos:column="34">(<argument><expr><operator pos:line="84" pos:column="35">&amp;<pos:position pos:line="84" pos:column="40"/></operator><name pos:line="84" pos:column="36">temp_str<pos:position pos:line="84" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="84" pos:column="46">"%s, \"collectd_data_source_type\": \"%s\""<pos:position pos:line="84" pos:column="89"/></literal></expr></argument>, <argument><expr><name pos:line="84" pos:column="91">ret_str<pos:position pos:line="84" pos:column="98"/></name></expr></argument>, <argument><expr><name pos:line="84" pos:column="100">ds_type<pos:position pos:line="84" pos:column="107"/></name></expr></argument>)<pos:position pos:line="84" pos:column="108"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="109"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="85" pos:column="17">free<pos:position pos:line="85" pos:column="21"/></name><argument_list pos:line="85" pos:column="21">(<argument><expr><name pos:line="85" pos:column="22">ret_str<pos:position pos:line="85" pos:column="29"/></name></expr></argument>)<pos:position pos:line="85" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="31"/></expr_stmt>
		<if pos:line="86" pos:column="17">if <condition pos:line="86" pos:column="20">(<expr><name pos:line="86" pos:column="21">res<pos:position pos:line="86" pos:column="24"/></name> <operator pos:line="86" pos:column="25">==<pos:position pos:line="86" pos:column="27"/></operator> <operator pos:line="86" pos:column="28">-<pos:position pos:line="86" pos:column="29"/></operator><literal type="number" pos:line="86" pos:column="29">1<pos:position pos:line="86" pos:column="30"/></literal></expr>)<pos:position pos:line="86" pos:column="31"/></condition><then pos:line="86" pos:column="31"> <block pos:line="86" pos:column="32">{
			<expr_stmt><expr><call><name pos:line="87" pos:column="25">ERROR<pos:position pos:line="87" pos:column="30"/></name><argument_list pos:line="87" pos:column="30">(<argument><expr><literal type="string" pos:line="87" pos:column="31">"write_sensu plugin: Unable to alloc memory"<pos:position pos:line="87" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="87" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="77"/></expr_stmt>
			<return pos:line="88" pos:column="25">return <expr><name pos:line="88" pos:column="32">NULL<pos:position pos:line="88" pos:column="36"/></name></expr>;<pos:position pos:line="88" pos:column="37"/></return>
		}<pos:position pos:line="89" pos:column="18"/></block></then></if>
		<expr_stmt><expr><name pos:line="90" pos:column="17">ret_str<pos:position pos:line="90" pos:column="24"/></name> <operator pos:line="90" pos:column="25">=<pos:position pos:line="90" pos:column="26"/></operator> <name pos:line="90" pos:column="27">temp_str<pos:position pos:line="90" pos:column="35"/></name></expr>;<pos:position pos:line="90" pos:column="36"/></expr_stmt>
	}<pos:position pos:line="91" pos:column="10"/></block></then> <else pos:line="91" pos:column="11">else <block pos:line="91" pos:column="16">{
		<expr_stmt><expr><name pos:line="92" pos:column="17">res<pos:position pos:line="92" pos:column="20"/></name> <operator pos:line="92" pos:column="21">=<pos:position pos:line="92" pos:column="22"/></operator> <call><name pos:line="92" pos:column="23">my_asprintf<pos:position pos:line="92" pos:column="34"/></name><argument_list pos:line="92" pos:column="34">(<argument><expr><operator pos:line="92" pos:column="35">&amp;<pos:position pos:line="92" pos:column="40"/></operator><name pos:line="92" pos:column="36">temp_str<pos:position pos:line="92" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="92" pos:column="46">"%s, \"collectd_data_source_type\": \"%s\""<pos:position pos:line="92" pos:column="89"/></literal></expr></argument>, <argument><expr><name pos:line="92" pos:column="91">ret_str<pos:position pos:line="92" pos:column="98"/></name></expr></argument>, <argument><expr><call><name pos:line="92" pos:column="100">DS_TYPE_TO_STRING<pos:position pos:line="92" pos:column="117"/></name><argument_list pos:line="92" pos:column="117">(<argument><expr><name><name pos:line="92" pos:column="118">ds<pos:position pos:line="92" pos:column="120"/></name><operator pos:line="92" pos:column="120">-&gt;<pos:position pos:line="92" pos:column="125"/></operator><name pos:line="92" pos:column="122">ds<pos:position pos:line="92" pos:column="124"/></name><index pos:line="92" pos:column="124">[<expr><name pos:line="92" pos:column="125">index<pos:position pos:line="92" pos:column="130"/></name></expr>]<pos:position pos:line="92" pos:column="131"/></index></name><operator pos:line="92" pos:column="131">.<pos:position pos:line="92" pos:column="132"/></operator><name pos:line="92" pos:column="132">type<pos:position pos:line="92" pos:column="136"/></name></expr></argument>)<pos:position pos:line="92" pos:column="137"/></argument_list></call></expr></argument>)<pos:position pos:line="92" pos:column="138"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="139"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="93" pos:column="17">free<pos:position pos:line="93" pos:column="21"/></name><argument_list pos:line="93" pos:column="21">(<argument><expr><name pos:line="93" pos:column="22">ret_str<pos:position pos:line="93" pos:column="29"/></name></expr></argument>)<pos:position pos:line="93" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="31"/></expr_stmt>
		<if pos:line="94" pos:column="17">if <condition pos:line="94" pos:column="20">(<expr><name pos:line="94" pos:column="21">res<pos:position pos:line="94" pos:column="24"/></name> <operator pos:line="94" pos:column="25">==<pos:position pos:line="94" pos:column="27"/></operator> <operator pos:line="94" pos:column="28">-<pos:position pos:line="94" pos:column="29"/></operator><literal type="number" pos:line="94" pos:column="29">1<pos:position pos:line="94" pos:column="30"/></literal></expr>)<pos:position pos:line="94" pos:column="31"/></condition><then pos:line="94" pos:column="31"> <block pos:line="94" pos:column="32">{
			<expr_stmt><expr><call><name pos:line="95" pos:column="25">ERROR<pos:position pos:line="95" pos:column="30"/></name><argument_list pos:line="95" pos:column="30">(<argument><expr><literal type="string" pos:line="95" pos:column="31">"write_sensu plugin: Unable to alloc memory"<pos:position pos:line="95" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="95" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="95" pos:column="77"/></expr_stmt>
			<return pos:line="96" pos:column="25">return <expr><name pos:line="96" pos:column="32">NULL<pos:position pos:line="96" pos:column="36"/></name></expr>;<pos:position pos:line="96" pos:column="37"/></return>
		}<pos:position pos:line="97" pos:column="18"/></block></then></if>
		<expr_stmt><expr><name pos:line="98" pos:column="17">ret_str<pos:position pos:line="98" pos:column="24"/></name> <operator pos:line="98" pos:column="25">=<pos:position pos:line="98" pos:column="26"/></operator> <name pos:line="98" pos:column="27">temp_str<pos:position pos:line="98" pos:column="35"/></name></expr>;<pos:position pos:line="98" pos:column="36"/></expr_stmt>
	}<pos:position pos:line="99" pos:column="10"/></block></else></if>

	<comment type="line" pos:line="101" pos:column="9">// incorporate the data source name</comment>
	<expr_stmt><expr><name pos:line="102" pos:column="9">res<pos:position pos:line="102" pos:column="12"/></name> <operator pos:line="102" pos:column="13">=<pos:position pos:line="102" pos:column="14"/></operator> <call><name pos:line="102" pos:column="15">my_asprintf<pos:position pos:line="102" pos:column="26"/></name><argument_list pos:line="102" pos:column="26">(<argument><expr><operator pos:line="102" pos:column="27">&amp;<pos:position pos:line="102" pos:column="32"/></operator><name pos:line="102" pos:column="28">temp_str<pos:position pos:line="102" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="102" pos:column="38">"%s, \"collectd_data_source_name\": \"%s\""<pos:position pos:line="102" pos:column="81"/></literal></expr></argument>, <argument><expr><name pos:line="102" pos:column="83">ret_str<pos:position pos:line="102" pos:column="90"/></name></expr></argument>, <argument><expr><name><name pos:line="102" pos:column="92">ds<pos:position pos:line="102" pos:column="94"/></name><operator pos:line="102" pos:column="94">-&gt;<pos:position pos:line="102" pos:column="99"/></operator><name pos:line="102" pos:column="96">ds<pos:position pos:line="102" pos:column="98"/></name><index pos:line="102" pos:column="98">[<expr><name pos:line="102" pos:column="99">index<pos:position pos:line="102" pos:column="104"/></name></expr>]<pos:position pos:line="102" pos:column="105"/></index></name><operator pos:line="102" pos:column="105">.<pos:position pos:line="102" pos:column="106"/></operator><name pos:line="102" pos:column="106">name<pos:position pos:line="102" pos:column="110"/></name></expr></argument>)<pos:position pos:line="102" pos:column="111"/></argument_list></call></expr>;<pos:position pos:line="102" pos:column="112"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="103" pos:column="9">free<pos:position pos:line="103" pos:column="13"/></name><argument_list pos:line="103" pos:column="13">(<argument><expr><name pos:line="103" pos:column="14">ret_str<pos:position pos:line="103" pos:column="21"/></name></expr></argument>)<pos:position pos:line="103" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="103" pos:column="23"/></expr_stmt>
	<if pos:line="104" pos:column="9">if <condition pos:line="104" pos:column="12">(<expr><name pos:line="104" pos:column="13">res<pos:position pos:line="104" pos:column="16"/></name> <operator pos:line="104" pos:column="17">==<pos:position pos:line="104" pos:column="19"/></operator> <operator pos:line="104" pos:column="20">-<pos:position pos:line="104" pos:column="21"/></operator><literal type="number" pos:line="104" pos:column="21">1<pos:position pos:line="104" pos:column="22"/></literal></expr>)<pos:position pos:line="104" pos:column="23"/></condition><then pos:line="104" pos:column="23"> <block pos:line="104" pos:column="24">{
		<expr_stmt><expr><call><name pos:line="105" pos:column="17">ERROR<pos:position pos:line="105" pos:column="22"/></name><argument_list pos:line="105" pos:column="22">(<argument><expr><literal type="string" pos:line="105" pos:column="23">"write_sensu plugin: Unable to alloc memory"<pos:position pos:line="105" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="105" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="105" pos:column="69"/></expr_stmt>
		<return pos:line="106" pos:column="17">return <expr><name pos:line="106" pos:column="24">NULL<pos:position pos:line="106" pos:column="28"/></name></expr>;<pos:position pos:line="106" pos:column="29"/></return>
	}<pos:position pos:line="107" pos:column="10"/></block></then></if>
	<expr_stmt><expr><name pos:line="108" pos:column="9">ret_str<pos:position pos:line="108" pos:column="16"/></name> <operator pos:line="108" pos:column="17">=<pos:position pos:line="108" pos:column="18"/></operator> <name pos:line="108" pos:column="19">temp_str<pos:position pos:line="108" pos:column="27"/></name></expr>;<pos:position pos:line="108" pos:column="28"/></expr_stmt>

	<comment type="line" pos:line="110" pos:column="9">// incorporate the data source index</comment>
	<block pos:line="111" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="112" pos:column="17">char<pos:position pos:line="112" pos:column="21"/></name></type> <name><name pos:line="112" pos:column="22">ds_index<pos:position pos:line="112" pos:column="30"/></name><index pos:line="112" pos:column="30">[<expr><name pos:line="112" pos:column="31">DATA_MAX_NAME_LEN<pos:position pos:line="112" pos:column="48"/></name></expr>]<pos:position pos:line="112" pos:column="49"/></index></name></decl>;<pos:position pos:line="112" pos:column="50"/></decl_stmt>
		<expr_stmt><expr><call><name pos:line="113" pos:column="17">ssnprintf<pos:position pos:line="113" pos:column="26"/></name> <argument_list pos:line="113" pos:column="27">(<argument><expr><name pos:line="113" pos:column="28">ds_index<pos:position pos:line="113" pos:column="36"/></name></expr></argument>, <argument><expr><sizeof pos:line="113" pos:column="38">sizeof <argument_list pos:line="113" pos:column="45">(<argument><expr><name pos:line="113" pos:column="46">ds_index<pos:position pos:line="113" pos:column="54"/></name></expr></argument>)<pos:position pos:line="113" pos:column="55"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="113" pos:column="57">"%zu"<pos:position pos:line="113" pos:column="62"/></literal></expr></argument>, <argument><expr><name pos:line="113" pos:column="64">index<pos:position pos:line="113" pos:column="69"/></name></expr></argument>)<pos:position pos:line="113" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="113" pos:column="71"/></expr_stmt>
		<expr_stmt><expr><name pos:line="114" pos:column="17">res<pos:position pos:line="114" pos:column="20"/></name> <operator pos:line="114" pos:column="21">=<pos:position pos:line="114" pos:column="22"/></operator> <call><name pos:line="114" pos:column="23">my_asprintf<pos:position pos:line="114" pos:column="34"/></name><argument_list pos:line="114" pos:column="34">(<argument><expr><operator pos:line="114" pos:column="35">&amp;<pos:position pos:line="114" pos:column="40"/></operator><name pos:line="114" pos:column="36">temp_str<pos:position pos:line="114" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="114" pos:column="46">"%s, \"collectd_data_source_index\": %s"<pos:position pos:line="114" pos:column="86"/></literal></expr></argument>, <argument><expr><name pos:line="114" pos:column="88">ret_str<pos:position pos:line="114" pos:column="95"/></name></expr></argument>, <argument><expr><name pos:line="114" pos:column="97">ds_index<pos:position pos:line="114" pos:column="105"/></name></expr></argument>)<pos:position pos:line="114" pos:column="106"/></argument_list></call></expr>;<pos:position pos:line="114" pos:column="107"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="115" pos:column="17">free<pos:position pos:line="115" pos:column="21"/></name><argument_list pos:line="115" pos:column="21">(<argument><expr><name pos:line="115" pos:column="22">ret_str<pos:position pos:line="115" pos:column="29"/></name></expr></argument>)<pos:position pos:line="115" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="115" pos:column="31"/></expr_stmt>
		<if pos:line="116" pos:column="17">if <condition pos:line="116" pos:column="20">(<expr><name pos:line="116" pos:column="21">res<pos:position pos:line="116" pos:column="24"/></name> <operator pos:line="116" pos:column="25">==<pos:position pos:line="116" pos:column="27"/></operator> <operator pos:line="116" pos:column="28">-<pos:position pos:line="116" pos:column="29"/></operator><literal type="number" pos:line="116" pos:column="29">1<pos:position pos:line="116" pos:column="30"/></literal></expr>)<pos:position pos:line="116" pos:column="31"/></condition><then pos:line="116" pos:column="31"> <block pos:line="116" pos:column="32">{
			<expr_stmt><expr><call><name pos:line="117" pos:column="25">ERROR<pos:position pos:line="117" pos:column="30"/></name><argument_list pos:line="117" pos:column="30">(<argument><expr><literal type="string" pos:line="117" pos:column="31">"write_sensu plugin: Unable to alloc memory"<pos:position pos:line="117" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="117" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="117" pos:column="77"/></expr_stmt>
			<return pos:line="118" pos:column="25">return <expr><name pos:line="118" pos:column="32">NULL<pos:position pos:line="118" pos:column="36"/></name></expr>;<pos:position pos:line="118" pos:column="37"/></return>
		}<pos:position pos:line="119" pos:column="18"/></block></then></if>
		<expr_stmt><expr><name pos:line="120" pos:column="17">ret_str<pos:position pos:line="120" pos:column="24"/></name> <operator pos:line="120" pos:column="25">=<pos:position pos:line="120" pos:column="26"/></operator> <name pos:line="120" pos:column="27">temp_str<pos:position pos:line="120" pos:column="35"/></name></expr>;<pos:position pos:line="120" pos:column="36"/></expr_stmt>
	}<pos:position pos:line="121" pos:column="10"/></block>

	<comment type="line" pos:line="123" pos:column="9">// add key value attributes from config if any</comment>
	<for pos:line="124" pos:column="9">for <control pos:line="124" pos:column="13">(<init><decl><type><name pos:line="124" pos:column="14">size_t<pos:position pos:line="124" pos:column="20"/></name></type> <name pos:line="124" pos:column="21">i<pos:position pos:line="124" pos:column="22"/></name> <init pos:line="124" pos:column="23">= <expr><literal type="number" pos:line="124" pos:column="25">0<pos:position pos:line="124" pos:column="26"/></literal></expr></init></decl>;<pos:position pos:line="124" pos:column="27"/></init> <condition><expr><name pos:line="124" pos:column="28">i<pos:position pos:line="124" pos:column="29"/></name> <operator pos:line="124" pos:column="30">&lt;<pos:position pos:line="124" pos:column="34"/></operator> <name pos:line="124" pos:column="32">sensu_attrs_num<pos:position pos:line="124" pos:column="47"/></name></expr>;<pos:position pos:line="124" pos:column="48"/></condition> <incr><expr><name pos:line="124" pos:column="49">i<pos:position pos:line="124" pos:column="50"/></name> <operator pos:line="124" pos:column="51">+=<pos:position pos:line="124" pos:column="53"/></operator> <literal type="number" pos:line="124" pos:column="54">2<pos:position pos:line="124" pos:column="55"/></literal></expr></incr>)<pos:position pos:line="124" pos:column="56"/></control> <block pos:line="124" pos:column="57">{
		<expr_stmt><expr><name pos:line="125" pos:column="17">res<pos:position pos:line="125" pos:column="20"/></name> <operator pos:line="125" pos:column="21">=<pos:position pos:line="125" pos:column="22"/></operator> <call><name pos:line="125" pos:column="23">my_asprintf<pos:position pos:line="125" pos:column="34"/></name><argument_list pos:line="125" pos:column="34">(<argument><expr><operator pos:line="125" pos:column="35">&amp;<pos:position pos:line="125" pos:column="40"/></operator><name pos:line="125" pos:column="36">temp_str<pos:position pos:line="125" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="125" pos:column="46">"%s, \"%s\": \"%s\""<pos:position pos:line="125" pos:column="66"/></literal></expr></argument>, <argument><expr><name pos:line="125" pos:column="68">ret_str<pos:position pos:line="125" pos:column="75"/></name></expr></argument>, <argument><expr><name><name pos:line="125" pos:column="77">sensu_attrs<pos:position pos:line="125" pos:column="88"/></name><index pos:line="125" pos:column="88">[<expr><name pos:line="125" pos:column="89">i<pos:position pos:line="125" pos:column="90"/></name></expr>]<pos:position pos:line="125" pos:column="91"/></index></name></expr></argument>, <argument><expr><name><name pos:line="125" pos:column="93">sensu_attrs<pos:position pos:line="125" pos:column="104"/></name><index pos:line="125" pos:column="104">[<expr><name pos:line="125" pos:column="105">i<pos:position pos:line="125" pos:column="106"/></name><operator pos:line="125" pos:column="106">+<pos:position pos:line="125" pos:column="107"/></operator><literal type="number" pos:line="125" pos:column="107">1<pos:position pos:line="125" pos:column="108"/></literal></expr>]<pos:position pos:line="125" pos:column="109"/></index></name></expr></argument>)<pos:position pos:line="125" pos:column="110"/></argument_list></call></expr>;<pos:position pos:line="125" pos:column="111"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="126" pos:column="17">free<pos:position pos:line="126" pos:column="21"/></name><argument_list pos:line="126" pos:column="21">(<argument><expr><name pos:line="126" pos:column="22">ret_str<pos:position pos:line="126" pos:column="29"/></name></expr></argument>)<pos:position pos:line="126" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="126" pos:column="31"/></expr_stmt>
		<if pos:line="127" pos:column="17">if <condition pos:line="127" pos:column="20">(<expr><name pos:line="127" pos:column="21">res<pos:position pos:line="127" pos:column="24"/></name> <operator pos:line="127" pos:column="25">==<pos:position pos:line="127" pos:column="27"/></operator> <operator pos:line="127" pos:column="28">-<pos:position pos:line="127" pos:column="29"/></operator><literal type="number" pos:line="127" pos:column="29">1<pos:position pos:line="127" pos:column="30"/></literal></expr>)<pos:position pos:line="127" pos:column="31"/></condition><then pos:line="127" pos:column="31"> <block pos:line="127" pos:column="32">{
			<expr_stmt><expr><call><name pos:line="128" pos:column="25">ERROR<pos:position pos:line="128" pos:column="30"/></name><argument_list pos:line="128" pos:column="30">(<argument><expr><literal type="string" pos:line="128" pos:column="31">"write_sensu plugin: Unable to alloc memory"<pos:position pos:line="128" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="128" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="128" pos:column="77"/></expr_stmt>
			<return pos:line="129" pos:column="25">return <expr><name pos:line="129" pos:column="32">NULL<pos:position pos:line="129" pos:column="36"/></name></expr>;<pos:position pos:line="129" pos:column="37"/></return>
		}<pos:position pos:line="130" pos:column="18"/></block></then></if>
		<expr_stmt><expr><name pos:line="131" pos:column="17">ret_str<pos:position pos:line="131" pos:column="24"/></name> <operator pos:line="131" pos:column="25">=<pos:position pos:line="131" pos:column="26"/></operator> <name pos:line="131" pos:column="27">temp_str<pos:position pos:line="131" pos:column="35"/></name></expr>;<pos:position pos:line="131" pos:column="36"/></expr_stmt>
	}<pos:position pos:line="132" pos:column="10"/></block></for>

	<comment type="line" pos:line="134" pos:column="9">// incorporate sensu tags from config if any</comment>
	<if pos:line="135" pos:column="9">if <condition pos:line="135" pos:column="12">(<expr><operator pos:line="135" pos:column="13">(<pos:position pos:line="135" pos:column="14"/></operator><name pos:line="135" pos:column="14">sensu_tags<pos:position pos:line="135" pos:column="24"/></name> <operator pos:line="135" pos:column="25">!=<pos:position pos:line="135" pos:column="27"/></operator> <name pos:line="135" pos:column="28">NULL<pos:position pos:line="135" pos:column="32"/></name><operator pos:line="135" pos:column="32">)<pos:position pos:line="135" pos:column="33"/></operator> <operator pos:line="135" pos:column="34">&amp;&amp;<pos:position pos:line="135" pos:column="44"/></operator> <operator pos:line="135" pos:column="37">(<pos:position pos:line="135" pos:column="38"/></operator><call><name pos:line="135" pos:column="38">strlen<pos:position pos:line="135" pos:column="44"/></name><argument_list pos:line="135" pos:column="44">(<argument><expr><name pos:line="135" pos:column="45">sensu_tags<pos:position pos:line="135" pos:column="55"/></name></expr></argument>)<pos:position pos:line="135" pos:column="56"/></argument_list></call> <operator pos:line="135" pos:column="57">!=<pos:position pos:line="135" pos:column="59"/></operator> <literal type="number" pos:line="135" pos:column="60">0<pos:position pos:line="135" pos:column="61"/></literal><operator pos:line="135" pos:column="61">)<pos:position pos:line="135" pos:column="62"/></operator></expr>)<pos:position pos:line="135" pos:column="63"/></condition><then pos:line="135" pos:column="63"> <block pos:line="135" pos:column="64">{
		<expr_stmt><expr><name pos:line="136" pos:column="17">res<pos:position pos:line="136" pos:column="20"/></name> <operator pos:line="136" pos:column="21">=<pos:position pos:line="136" pos:column="22"/></operator> <call><name pos:line="136" pos:column="23">my_asprintf<pos:position pos:line="136" pos:column="34"/></name><argument_list pos:line="136" pos:column="34">(<argument><expr><operator pos:line="136" pos:column="35">&amp;<pos:position pos:line="136" pos:column="40"/></operator><name pos:line="136" pos:column="36">temp_str<pos:position pos:line="136" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="136" pos:column="46">"%s, %s"<pos:position pos:line="136" pos:column="54"/></literal></expr></argument>, <argument><expr><name pos:line="136" pos:column="56">ret_str<pos:position pos:line="136" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="136" pos:column="65">sensu_tags<pos:position pos:line="136" pos:column="75"/></name></expr></argument>)<pos:position pos:line="136" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="136" pos:column="77"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="137" pos:column="17">free<pos:position pos:line="137" pos:column="21"/></name><argument_list pos:line="137" pos:column="21">(<argument><expr><name pos:line="137" pos:column="22">ret_str<pos:position pos:line="137" pos:column="29"/></name></expr></argument>)<pos:position pos:line="137" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="137" pos:column="31"/></expr_stmt>
		<if pos:line="138" pos:column="17">if <condition pos:line="138" pos:column="20">(<expr><name pos:line="138" pos:column="21">res<pos:position pos:line="138" pos:column="24"/></name> <operator pos:line="138" pos:column="25">==<pos:position pos:line="138" pos:column="27"/></operator> <operator pos:line="138" pos:column="28">-<pos:position pos:line="138" pos:column="29"/></operator><literal type="number" pos:line="138" pos:column="29">1<pos:position pos:line="138" pos:column="30"/></literal></expr>)<pos:position pos:line="138" pos:column="31"/></condition><then pos:line="138" pos:column="31"> <block pos:line="138" pos:column="32">{
			<expr_stmt><expr><call><name pos:line="139" pos:column="25">ERROR<pos:position pos:line="139" pos:column="30"/></name><argument_list pos:line="139" pos:column="30">(<argument><expr><literal type="string" pos:line="139" pos:column="31">"write_sensu plugin: Unable to alloc memory"<pos:position pos:line="139" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="139" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="139" pos:column="77"/></expr_stmt>
			<return pos:line="140" pos:column="25">return <expr><name pos:line="140" pos:column="32">NULL<pos:position pos:line="140" pos:column="36"/></name></expr>;<pos:position pos:line="140" pos:column="37"/></return>
		}<pos:position pos:line="141" pos:column="18"/></block></then></if>
		<expr_stmt><expr><name pos:line="142" pos:column="17">ret_str<pos:position pos:line="142" pos:column="24"/></name> <operator pos:line="142" pos:column="25">=<pos:position pos:line="142" pos:column="26"/></operator> <name pos:line="142" pos:column="27">temp_str<pos:position pos:line="142" pos:column="35"/></name></expr>;<pos:position pos:line="142" pos:column="36"/></expr_stmt>
	}<pos:position pos:line="143" pos:column="10"/></block></then></if>

	<comment type="line" pos:line="145" pos:column="9">// calculate the value and set to a string</comment>
	<if pos:line="146" pos:column="9">if <condition pos:line="146" pos:column="12">(<expr><name><name pos:line="146" pos:column="13">ds<pos:position pos:line="146" pos:column="15"/></name><operator pos:line="146" pos:column="15">-&gt;<pos:position pos:line="146" pos:column="20"/></operator><name pos:line="146" pos:column="17">ds<pos:position pos:line="146" pos:column="19"/></name><index pos:line="146" pos:column="19">[<expr><name pos:line="146" pos:column="20">index<pos:position pos:line="146" pos:column="25"/></name></expr>]<pos:position pos:line="146" pos:column="26"/></index></name><operator pos:line="146" pos:column="26">.<pos:position pos:line="146" pos:column="27"/></operator><name pos:line="146" pos:column="27">type<pos:position pos:line="146" pos:column="31"/></name> <operator pos:line="146" pos:column="32">==<pos:position pos:line="146" pos:column="34"/></operator> <name pos:line="146" pos:column="35">DS_TYPE_GAUGE<pos:position pos:line="146" pos:column="48"/></name></expr>)<pos:position pos:line="146" pos:column="49"/></condition><then pos:line="146" pos:column="49"> <block pos:line="146" pos:column="50">{
		<expr_stmt><expr><name pos:line="147" pos:column="17">res<pos:position pos:line="147" pos:column="20"/></name> <operator pos:line="147" pos:column="21">=<pos:position pos:line="147" pos:column="22"/></operator> <call><name pos:line="147" pos:column="23">my_asprintf<pos:position pos:line="147" pos:column="34"/></name><argument_list pos:line="147" pos:column="34">(<argument><expr><operator pos:line="147" pos:column="35">&amp;<pos:position pos:line="147" pos:column="40"/></operator><name pos:line="147" pos:column="36">value_str<pos:position pos:line="147" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="147" pos:column="47">GAUGE_FORMAT<pos:position pos:line="147" pos:column="59"/></name></expr></argument>, <argument><expr><name><name pos:line="147" pos:column="61">vl<pos:position pos:line="147" pos:column="63"/></name><operator pos:line="147" pos:column="63">-&gt;<pos:position pos:line="147" pos:column="68"/></operator><name pos:line="147" pos:column="65">values<pos:position pos:line="147" pos:column="71"/></name><index pos:line="147" pos:column="71">[<expr><name pos:line="147" pos:column="72">index<pos:position pos:line="147" pos:column="77"/></name></expr>]<pos:position pos:line="147" pos:column="78"/></index></name><operator pos:line="147" pos:column="78">.<pos:position pos:line="147" pos:column="79"/></operator><name pos:line="147" pos:column="79">gauge<pos:position pos:line="147" pos:column="84"/></name></expr></argument>)<pos:position pos:line="147" pos:column="85"/></argument_list></call></expr>;<pos:position pos:line="147" pos:column="86"/></expr_stmt>
		<if pos:line="148" pos:column="17">if <condition pos:line="148" pos:column="20">(<expr><name pos:line="148" pos:column="21">res<pos:position pos:line="148" pos:column="24"/></name> <operator pos:line="148" pos:column="25">==<pos:position pos:line="148" pos:column="27"/></operator> <operator pos:line="148" pos:column="28">-<pos:position pos:line="148" pos:column="29"/></operator><literal type="number" pos:line="148" pos:column="29">1<pos:position pos:line="148" pos:column="30"/></literal></expr>)<pos:position pos:line="148" pos:column="31"/></condition><then pos:line="148" pos:column="31"> <block pos:line="148" pos:column="32">{
			<expr_stmt><expr><call><name pos:line="149" pos:column="25">free<pos:position pos:line="149" pos:column="29"/></name><argument_list pos:line="149" pos:column="29">(<argument><expr><name pos:line="149" pos:column="30">ret_str<pos:position pos:line="149" pos:column="37"/></name></expr></argument>)<pos:position pos:line="149" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="149" pos:column="39"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="150" pos:column="25">ERROR<pos:position pos:line="150" pos:column="30"/></name><argument_list pos:line="150" pos:column="30">(<argument><expr><literal type="string" pos:line="150" pos:column="31">"write_sensu plugin: Unable to alloc memory"<pos:position pos:line="150" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="150" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="150" pos:column="77"/></expr_stmt>
			<return pos:line="151" pos:column="25">return <expr><name pos:line="151" pos:column="32">NULL<pos:position pos:line="151" pos:column="36"/></name></expr>;<pos:position pos:line="151" pos:column="37"/></return>
		}<pos:position pos:line="152" pos:column="18"/></block></then></if>
	}<pos:position pos:line="153" pos:column="10"/></block></then> <elseif pos:line="153" pos:column="11">else <if pos:line="153" pos:column="16">if <condition pos:line="153" pos:column="19">(<expr><name pos:line="153" pos:column="20">rates<pos:position pos:line="153" pos:column="25"/></name> <operator pos:line="153" pos:column="26">!=<pos:position pos:line="153" pos:column="28"/></operator> <name pos:line="153" pos:column="29">NULL<pos:position pos:line="153" pos:column="33"/></name></expr>)<pos:position pos:line="153" pos:column="34"/></condition><then pos:line="153" pos:column="34"> <block pos:line="153" pos:column="35">{
		<expr_stmt><expr><name pos:line="154" pos:column="17">res<pos:position pos:line="154" pos:column="20"/></name> <operator pos:line="154" pos:column="21">=<pos:position pos:line="154" pos:column="22"/></operator> <call><name pos:line="154" pos:column="23">my_asprintf<pos:position pos:line="154" pos:column="34"/></name><argument_list pos:line="154" pos:column="34">(<argument><expr><operator pos:line="154" pos:column="35">&amp;<pos:position pos:line="154" pos:column="40"/></operator><name pos:line="154" pos:column="36">value_str<pos:position pos:line="154" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="154" pos:column="47">GAUGE_FORMAT<pos:position pos:line="154" pos:column="59"/></name></expr></argument>, <argument><expr><name><name pos:line="154" pos:column="61">rates<pos:position pos:line="154" pos:column="66"/></name><index pos:line="154" pos:column="66">[<expr><name pos:line="154" pos:column="67">index<pos:position pos:line="154" pos:column="72"/></name></expr>]<pos:position pos:line="154" pos:column="73"/></index></name></expr></argument>)<pos:position pos:line="154" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="154" pos:column="75"/></expr_stmt>
		<if pos:line="155" pos:column="17">if <condition pos:line="155" pos:column="20">(<expr><name pos:line="155" pos:column="21">res<pos:position pos:line="155" pos:column="24"/></name> <operator pos:line="155" pos:column="25">==<pos:position pos:line="155" pos:column="27"/></operator> <operator pos:line="155" pos:column="28">-<pos:position pos:line="155" pos:column="29"/></operator><literal type="number" pos:line="155" pos:column="29">1<pos:position pos:line="155" pos:column="30"/></literal></expr>)<pos:position pos:line="155" pos:column="31"/></condition><then pos:line="155" pos:column="31"> <block pos:line="155" pos:column="32">{
			<expr_stmt><expr><call><name pos:line="156" pos:column="25">free<pos:position pos:line="156" pos:column="29"/></name><argument_list pos:line="156" pos:column="29">(<argument><expr><name pos:line="156" pos:column="30">ret_str<pos:position pos:line="156" pos:column="37"/></name></expr></argument>)<pos:position pos:line="156" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="156" pos:column="39"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="157" pos:column="25">ERROR<pos:position pos:line="157" pos:column="30"/></name><argument_list pos:line="157" pos:column="30">(<argument><expr><literal type="string" pos:line="157" pos:column="31">"write_sensu plugin: Unable to alloc memory"<pos:position pos:line="157" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="157" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="157" pos:column="77"/></expr_stmt>
			<return pos:line="158" pos:column="25">return <expr><name pos:line="158" pos:column="32">NULL<pos:position pos:line="158" pos:column="36"/></name></expr>;<pos:position pos:line="158" pos:column="37"/></return>
		}<pos:position pos:line="159" pos:column="18"/></block></then></if>
	}<pos:position pos:line="160" pos:column="10"/></block></then></if></elseif> <else pos:line="160" pos:column="11">else <block pos:line="160" pos:column="16">{
		<if pos:line="161" pos:column="17">if <condition pos:line="161" pos:column="20">(<expr><name><name pos:line="161" pos:column="21">ds<pos:position pos:line="161" pos:column="23"/></name><operator pos:line="161" pos:column="23">-&gt;<pos:position pos:line="161" pos:column="28"/></operator><name pos:line="161" pos:column="25">ds<pos:position pos:line="161" pos:column="27"/></name><index pos:line="161" pos:column="27">[<expr><name pos:line="161" pos:column="28">index<pos:position pos:line="161" pos:column="33"/></name></expr>]<pos:position pos:line="161" pos:column="34"/></index></name><operator pos:line="161" pos:column="34">.<pos:position pos:line="161" pos:column="35"/></operator><name pos:line="161" pos:column="35">type<pos:position pos:line="161" pos:column="39"/></name> <operator pos:line="161" pos:column="40">==<pos:position pos:line="161" pos:column="42"/></operator> <name pos:line="161" pos:column="43">DS_TYPE_DERIVE<pos:position pos:line="161" pos:column="57"/></name></expr>)<pos:position pos:line="161" pos:column="58"/></condition><then pos:line="161" pos:column="58"> <block pos:line="161" pos:column="59">{
			<expr_stmt><expr><name pos:line="162" pos:column="25">res<pos:position pos:line="162" pos:column="28"/></name> <operator pos:line="162" pos:column="29">=<pos:position pos:line="162" pos:column="30"/></operator> <call><name pos:line="162" pos:column="31">my_asprintf<pos:position pos:line="162" pos:column="42"/></name><argument_list pos:line="162" pos:column="42">(<argument><expr><operator pos:line="162" pos:column="43">&amp;<pos:position pos:line="162" pos:column="48"/></operator><name pos:line="162" pos:column="44">value_str<pos:position pos:line="162" pos:column="53"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="162" pos:column="55">"%"<pos:position pos:line="162" pos:column="58"/></literal><name pos:line="162" pos:column="58">PRIi64<pos:position pos:line="162" pos:column="64"/></name></expr></argument>, <argument><expr><name><name pos:line="162" pos:column="66">vl<pos:position pos:line="162" pos:column="68"/></name><operator pos:line="162" pos:column="68">-&gt;<pos:position pos:line="162" pos:column="73"/></operator><name pos:line="162" pos:column="70">values<pos:position pos:line="162" pos:column="76"/></name><index pos:line="162" pos:column="76">[<expr><name pos:line="162" pos:column="77">index<pos:position pos:line="162" pos:column="82"/></name></expr>]<pos:position pos:line="162" pos:column="83"/></index></name><operator pos:line="162" pos:column="83">.<pos:position pos:line="162" pos:column="84"/></operator><name pos:line="162" pos:column="84">derive<pos:position pos:line="162" pos:column="90"/></name></expr></argument>)<pos:position pos:line="162" pos:column="91"/></argument_list></call></expr>;<pos:position pos:line="162" pos:column="92"/></expr_stmt>
			<if pos:line="163" pos:column="25">if <condition pos:line="163" pos:column="28">(<expr><name pos:line="163" pos:column="29">res<pos:position pos:line="163" pos:column="32"/></name> <operator pos:line="163" pos:column="33">==<pos:position pos:line="163" pos:column="35"/></operator> <operator pos:line="163" pos:column="36">-<pos:position pos:line="163" pos:column="37"/></operator><literal type="number" pos:line="163" pos:column="37">1<pos:position pos:line="163" pos:column="38"/></literal></expr>)<pos:position pos:line="163" pos:column="39"/></condition><then pos:line="163" pos:column="39"> <block pos:line="163" pos:column="40">{
				<expr_stmt><expr><call><name pos:line="164" pos:column="33">free<pos:position pos:line="164" pos:column="37"/></name><argument_list pos:line="164" pos:column="37">(<argument><expr><name pos:line="164" pos:column="38">ret_str<pos:position pos:line="164" pos:column="45"/></name></expr></argument>)<pos:position pos:line="164" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="164" pos:column="47"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="165" pos:column="33">ERROR<pos:position pos:line="165" pos:column="38"/></name><argument_list pos:line="165" pos:column="38">(<argument><expr><literal type="string" pos:line="165" pos:column="39">"write_sensu plugin: Unable to alloc memory"<pos:position pos:line="165" pos:column="83"/></literal></expr></argument>)<pos:position pos:line="165" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="165" pos:column="85"/></expr_stmt>
				<return pos:line="166" pos:column="33">return <expr><name pos:line="166" pos:column="40">NULL<pos:position pos:line="166" pos:column="44"/></name></expr>;<pos:position pos:line="166" pos:column="45"/></return>
			}<pos:position pos:line="167" pos:column="26"/></block></then></if>
		}<pos:position pos:line="168" pos:column="18"/></block></then>
		<elseif pos:line="169" pos:column="17">else <if pos:line="169" pos:column="22">if <condition pos:line="169" pos:column="25">(<expr><name><name pos:line="169" pos:column="26">ds<pos:position pos:line="169" pos:column="28"/></name><operator pos:line="169" pos:column="28">-&gt;<pos:position pos:line="169" pos:column="33"/></operator><name pos:line="169" pos:column="30">ds<pos:position pos:line="169" pos:column="32"/></name><index pos:line="169" pos:column="32">[<expr><name pos:line="169" pos:column="33">index<pos:position pos:line="169" pos:column="38"/></name></expr>]<pos:position pos:line="169" pos:column="39"/></index></name><operator pos:line="169" pos:column="39">.<pos:position pos:line="169" pos:column="40"/></operator><name pos:line="169" pos:column="40">type<pos:position pos:line="169" pos:column="44"/></name> <operator pos:line="169" pos:column="45">==<pos:position pos:line="169" pos:column="47"/></operator> <name pos:line="169" pos:column="48">DS_TYPE_ABSOLUTE<pos:position pos:line="169" pos:column="64"/></name></expr>)<pos:position pos:line="169" pos:column="65"/></condition><then pos:line="169" pos:column="65"> <block pos:line="169" pos:column="66">{
			<expr_stmt><expr><name pos:line="170" pos:column="25">res<pos:position pos:line="170" pos:column="28"/></name> <operator pos:line="170" pos:column="29">=<pos:position pos:line="170" pos:column="30"/></operator> <call><name pos:line="170" pos:column="31">my_asprintf<pos:position pos:line="170" pos:column="42"/></name><argument_list pos:line="170" pos:column="42">(<argument><expr><operator pos:line="170" pos:column="43">&amp;<pos:position pos:line="170" pos:column="48"/></operator><name pos:line="170" pos:column="44">value_str<pos:position pos:line="170" pos:column="53"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="170" pos:column="55">"%"<pos:position pos:line="170" pos:column="58"/></literal><name pos:line="170" pos:column="58">PRIu64<pos:position pos:line="170" pos:column="64"/></name></expr></argument>, <argument><expr><name><name pos:line="170" pos:column="66">vl<pos:position pos:line="170" pos:column="68"/></name><operator pos:line="170" pos:column="68">-&gt;<pos:position pos:line="170" pos:column="73"/></operator><name pos:line="170" pos:column="70">values<pos:position pos:line="170" pos:column="76"/></name><index pos:line="170" pos:column="76">[<expr><name pos:line="170" pos:column="77">index<pos:position pos:line="170" pos:column="82"/></name></expr>]<pos:position pos:line="170" pos:column="83"/></index></name><operator pos:line="170" pos:column="83">.<pos:position pos:line="170" pos:column="84"/></operator><name pos:line="170" pos:column="84">absolute<pos:position pos:line="170" pos:column="92"/></name></expr></argument>)<pos:position pos:line="170" pos:column="93"/></argument_list></call></expr>;<pos:position pos:line="170" pos:column="94"/></expr_stmt>
			<if pos:line="171" pos:column="25">if <condition pos:line="171" pos:column="28">(<expr><name pos:line="171" pos:column="29">res<pos:position pos:line="171" pos:column="32"/></name> <operator pos:line="171" pos:column="33">==<pos:position pos:line="171" pos:column="35"/></operator> <operator pos:line="171" pos:column="36">-<pos:position pos:line="171" pos:column="37"/></operator><literal type="number" pos:line="171" pos:column="37">1<pos:position pos:line="171" pos:column="38"/></literal></expr>)<pos:position pos:line="171" pos:column="39"/></condition><then pos:line="171" pos:column="39"> <block pos:line="171" pos:column="40">{
				<expr_stmt><expr><call><name pos:line="172" pos:column="33">free<pos:position pos:line="172" pos:column="37"/></name><argument_list pos:line="172" pos:column="37">(<argument><expr><name pos:line="172" pos:column="38">ret_str<pos:position pos:line="172" pos:column="45"/></name></expr></argument>)<pos:position pos:line="172" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="172" pos:column="47"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="173" pos:column="33">ERROR<pos:position pos:line="173" pos:column="38"/></name><argument_list pos:line="173" pos:column="38">(<argument><expr><literal type="string" pos:line="173" pos:column="39">"write_sensu plugin: Unable to alloc memory"<pos:position pos:line="173" pos:column="83"/></literal></expr></argument>)<pos:position pos:line="173" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="173" pos:column="85"/></expr_stmt>
				<return pos:line="174" pos:column="33">return <expr><name pos:line="174" pos:column="40">NULL<pos:position pos:line="174" pos:column="44"/></name></expr>;<pos:position pos:line="174" pos:column="45"/></return>
			}<pos:position pos:line="175" pos:column="26"/></block></then></if>
		}<pos:position pos:line="176" pos:column="18"/></block></then></if></elseif>
		<else pos:line="177" pos:column="17">else <block pos:line="177" pos:column="22">{
			<expr_stmt><expr><name pos:line="178" pos:column="25">res<pos:position pos:line="178" pos:column="28"/></name> <operator pos:line="178" pos:column="29">=<pos:position pos:line="178" pos:column="30"/></operator> <call><name pos:line="178" pos:column="31">my_asprintf<pos:position pos:line="178" pos:column="42"/></name><argument_list pos:line="178" pos:column="42">(<argument><expr><operator pos:line="178" pos:column="43">&amp;<pos:position pos:line="178" pos:column="48"/></operator><name pos:line="178" pos:column="44">value_str<pos:position pos:line="178" pos:column="53"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="178" pos:column="55">"%llu"<pos:position pos:line="178" pos:column="61"/></literal></expr></argument>, <argument><expr><name><name pos:line="178" pos:column="63">vl<pos:position pos:line="178" pos:column="65"/></name><operator pos:line="178" pos:column="65">-&gt;<pos:position pos:line="178" pos:column="70"/></operator><name pos:line="178" pos:column="67">values<pos:position pos:line="178" pos:column="73"/></name><index pos:line="178" pos:column="73">[<expr><name pos:line="178" pos:column="74">index<pos:position pos:line="178" pos:column="79"/></name></expr>]<pos:position pos:line="178" pos:column="80"/></index></name><operator pos:line="178" pos:column="80">.<pos:position pos:line="178" pos:column="81"/></operator><name pos:line="178" pos:column="81">counter<pos:position pos:line="178" pos:column="88"/></name></expr></argument>)<pos:position pos:line="178" pos:column="89"/></argument_list></call></expr>;<pos:position pos:line="178" pos:column="90"/></expr_stmt>
			<if pos:line="179" pos:column="25">if <condition pos:line="179" pos:column="28">(<expr><name pos:line="179" pos:column="29">res<pos:position pos:line="179" pos:column="32"/></name> <operator pos:line="179" pos:column="33">==<pos:position pos:line="179" pos:column="35"/></operator> <operator pos:line="179" pos:column="36">-<pos:position pos:line="179" pos:column="37"/></operator><literal type="number" pos:line="179" pos:column="37">1<pos:position pos:line="179" pos:column="38"/></literal></expr>)<pos:position pos:line="179" pos:column="39"/></condition><then pos:line="179" pos:column="39"> <block pos:line="179" pos:column="40">{
				<expr_stmt><expr><call><name pos:line="180" pos:column="33">free<pos:position pos:line="180" pos:column="37"/></name><argument_list pos:line="180" pos:column="37">(<argument><expr><name pos:line="180" pos:column="38">ret_str<pos:position pos:line="180" pos:column="45"/></name></expr></argument>)<pos:position pos:line="180" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="180" pos:column="47"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="181" pos:column="33">ERROR<pos:position pos:line="181" pos:column="38"/></name><argument_list pos:line="181" pos:column="38">(<argument><expr><literal type="string" pos:line="181" pos:column="39">"write_sensu plugin: Unable to alloc memory"<pos:position pos:line="181" pos:column="83"/></literal></expr></argument>)<pos:position pos:line="181" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="181" pos:column="85"/></expr_stmt>
				<return pos:line="182" pos:column="33">return <expr><name pos:line="182" pos:column="40">NULL<pos:position pos:line="182" pos:column="44"/></name></expr>;<pos:position pos:line="182" pos:column="45"/></return>
			}<pos:position pos:line="183" pos:column="26"/></block></then></if>
		}<pos:position pos:line="184" pos:column="18"/></block></else></if>
	}<pos:position pos:line="185" pos:column="10"/></block></else></if>

	<comment type="line" pos:line="187" pos:column="9">// Generate the full service name</comment>
	<expr_stmt><expr><call><name pos:line="188" pos:column="9">sensu_format_name2<pos:position pos:line="188" pos:column="27"/></name><argument_list pos:line="188" pos:column="27">(<argument><expr><name pos:line="188" pos:column="28">name_buffer<pos:position pos:line="188" pos:column="39"/></name></expr></argument>, <argument><expr><sizeof pos:line="188" pos:column="41">sizeof<argument_list pos:line="188" pos:column="47">(<argument><expr><name pos:line="188" pos:column="48">name_buffer<pos:position pos:line="188" pos:column="59"/></name></expr></argument>)<pos:position pos:line="188" pos:column="60"/></argument_list></sizeof></expr></argument>,
		<argument><expr><name><name pos:line="189" pos:column="17">vl<pos:position pos:line="189" pos:column="19"/></name><operator pos:line="189" pos:column="19">-&gt;<pos:position pos:line="189" pos:column="24"/></operator><name pos:line="189" pos:column="21">host<pos:position pos:line="189" pos:column="25"/></name></name></expr></argument>, <argument><expr><name><name pos:line="189" pos:column="27">vl<pos:position pos:line="189" pos:column="29"/></name><operator pos:line="189" pos:column="29">-&gt;<pos:position pos:line="189" pos:column="34"/></operator><name pos:line="189" pos:column="31">plugin<pos:position pos:line="189" pos:column="37"/></name></name></expr></argument>, <argument><expr><name><name pos:line="189" pos:column="39">vl<pos:position pos:line="189" pos:column="41"/></name><operator pos:line="189" pos:column="41">-&gt;<pos:position pos:line="189" pos:column="46"/></operator><name pos:line="189" pos:column="43">plugin_instance<pos:position pos:line="189" pos:column="58"/></name></name></expr></argument>,
		<argument><expr><name><name pos:line="190" pos:column="17">vl<pos:position pos:line="190" pos:column="19"/></name><operator pos:line="190" pos:column="19">-&gt;<pos:position pos:line="190" pos:column="24"/></operator><name pos:line="190" pos:column="21">type<pos:position pos:line="190" pos:column="25"/></name></name></expr></argument>, <argument><expr><name><name pos:line="190" pos:column="27">vl<pos:position pos:line="190" pos:column="29"/></name><operator pos:line="190" pos:column="29">-&gt;<pos:position pos:line="190" pos:column="34"/></operator><name pos:line="190" pos:column="31">type_instance<pos:position pos:line="190" pos:column="44"/></name></name></expr></argument>, <argument><expr><name><name pos:line="190" pos:column="46">host<pos:position pos:line="190" pos:column="50"/></name><operator pos:line="190" pos:column="50">-&gt;<pos:position pos:line="190" pos:column="55"/></operator><name pos:line="190" pos:column="52">separator<pos:position pos:line="190" pos:column="61"/></name></name></expr></argument>)<pos:position pos:line="190" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="190" pos:column="63"/></expr_stmt>
	<if pos:line="191" pos:column="9">if <condition pos:line="191" pos:column="12">(<expr><name><name pos:line="191" pos:column="13">host<pos:position pos:line="191" pos:column="17"/></name><operator pos:line="191" pos:column="17">-&gt;<pos:position pos:line="191" pos:column="22"/></operator><name pos:line="191" pos:column="19">always_append_ds<pos:position pos:line="191" pos:column="35"/></name></name> <operator pos:line="191" pos:column="36">||<pos:position pos:line="191" pos:column="38"/></operator> <operator pos:line="191" pos:column="39">(<pos:position pos:line="191" pos:column="40"/></operator><name><name pos:line="191" pos:column="40">ds<pos:position pos:line="191" pos:column="42"/></name><operator pos:line="191" pos:column="42">-&gt;<pos:position pos:line="191" pos:column="47"/></operator><name pos:line="191" pos:column="44">ds_num<pos:position pos:line="191" pos:column="50"/></name></name> <operator pos:line="191" pos:column="51">&gt;<pos:position pos:line="191" pos:column="55"/></operator> <literal type="number" pos:line="191" pos:column="53">1<pos:position pos:line="191" pos:column="54"/></literal><operator pos:line="191" pos:column="54">)<pos:position pos:line="191" pos:column="55"/></operator></expr>)<pos:position pos:line="191" pos:column="56"/></condition><then pos:line="191" pos:column="56"> <block pos:line="191" pos:column="57">{
		<if pos:line="192" pos:column="17">if <condition pos:line="192" pos:column="20">(<expr><name><name pos:line="192" pos:column="21">host<pos:position pos:line="192" pos:column="25"/></name><operator pos:line="192" pos:column="25">-&gt;<pos:position pos:line="192" pos:column="30"/></operator><name pos:line="192" pos:column="27">event_service_prefix<pos:position pos:line="192" pos:column="47"/></name></name> <operator pos:line="192" pos:column="48">==<pos:position pos:line="192" pos:column="50"/></operator> <name pos:line="192" pos:column="51">NULL<pos:position pos:line="192" pos:column="55"/></name></expr>)<pos:position pos:line="192" pos:column="56"/></condition><then pos:line="192" pos:column="56">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="193" pos:column="25">ssnprintf<pos:position pos:line="193" pos:column="34"/></name><argument_list pos:line="193" pos:column="34">(<argument><expr><name pos:line="193" pos:column="35">service_buffer<pos:position pos:line="193" pos:column="49"/></name></expr></argument>, <argument><expr><sizeof pos:line="193" pos:column="51">sizeof<argument_list pos:line="193" pos:column="57">(<argument><expr><name pos:line="193" pos:column="58">service_buffer<pos:position pos:line="193" pos:column="72"/></name></expr></argument>)<pos:position pos:line="193" pos:column="73"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="193" pos:column="75">"%s.%s"<pos:position pos:line="193" pos:column="82"/></literal></expr></argument>,
					<argument><expr><name pos:line="194" pos:column="41">name_buffer<pos:position pos:line="194" pos:column="52"/></name></expr></argument>, <argument><expr><name><name pos:line="194" pos:column="54">ds<pos:position pos:line="194" pos:column="56"/></name><operator pos:line="194" pos:column="56">-&gt;<pos:position pos:line="194" pos:column="61"/></operator><name pos:line="194" pos:column="58">ds<pos:position pos:line="194" pos:column="60"/></name><index pos:line="194" pos:column="60">[<expr><name pos:line="194" pos:column="61">index<pos:position pos:line="194" pos:column="66"/></name></expr>]<pos:position pos:line="194" pos:column="67"/></index></name><operator pos:line="194" pos:column="67">.<pos:position pos:line="194" pos:column="68"/></operator><name pos:line="194" pos:column="68">name<pos:position pos:line="194" pos:column="72"/></name></expr></argument>)<pos:position pos:line="194" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="194" pos:column="74"/></expr_stmt></block></then>
		<else pos:line="195" pos:column="17">else
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="196" pos:column="25">ssnprintf<pos:position pos:line="196" pos:column="34"/></name><argument_list pos:line="196" pos:column="34">(<argument><expr><name pos:line="196" pos:column="35">service_buffer<pos:position pos:line="196" pos:column="49"/></name></expr></argument>, <argument><expr><sizeof pos:line="196" pos:column="51">sizeof<argument_list pos:line="196" pos:column="57">(<argument><expr><name pos:line="196" pos:column="58">service_buffer<pos:position pos:line="196" pos:column="72"/></name></expr></argument>)<pos:position pos:line="196" pos:column="73"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="196" pos:column="75">"%s%s.%s"<pos:position pos:line="196" pos:column="84"/></literal></expr></argument>,
					<argument><expr><name><name pos:line="197" pos:column="41">host<pos:position pos:line="197" pos:column="45"/></name><operator pos:line="197" pos:column="45">-&gt;<pos:position pos:line="197" pos:column="50"/></operator><name pos:line="197" pos:column="47">event_service_prefix<pos:position pos:line="197" pos:column="67"/></name></name></expr></argument>, <argument><expr><name pos:line="197" pos:column="69">name_buffer<pos:position pos:line="197" pos:column="80"/></name></expr></argument>, <argument><expr><name><name pos:line="197" pos:column="82">ds<pos:position pos:line="197" pos:column="84"/></name><operator pos:line="197" pos:column="84">-&gt;<pos:position pos:line="197" pos:column="89"/></operator><name pos:line="197" pos:column="86">ds<pos:position pos:line="197" pos:column="88"/></name><index pos:line="197" pos:column="88">[<expr><name pos:line="197" pos:column="89">index<pos:position pos:line="197" pos:column="94"/></name></expr>]<pos:position pos:line="197" pos:column="95"/></index></name><operator pos:line="197" pos:column="95">.<pos:position pos:line="197" pos:column="96"/></operator><name pos:line="197" pos:column="96">name<pos:position pos:line="197" pos:column="100"/></name></expr></argument>)<pos:position pos:line="197" pos:column="101"/></argument_list></call></expr>;<pos:position pos:line="197" pos:column="102"/></expr_stmt></block></else></if>
	}<pos:position pos:line="198" pos:column="10"/></block></then> <else pos:line="198" pos:column="11">else <block pos:line="198" pos:column="16">{
		<if pos:line="199" pos:column="17">if <condition pos:line="199" pos:column="20">(<expr><name><name pos:line="199" pos:column="21">host<pos:position pos:line="199" pos:column="25"/></name><operator pos:line="199" pos:column="25">-&gt;<pos:position pos:line="199" pos:column="30"/></operator><name pos:line="199" pos:column="27">event_service_prefix<pos:position pos:line="199" pos:column="47"/></name></name> <operator pos:line="199" pos:column="48">==<pos:position pos:line="199" pos:column="50"/></operator> <name pos:line="199" pos:column="51">NULL<pos:position pos:line="199" pos:column="55"/></name></expr>)<pos:position pos:line="199" pos:column="56"/></condition><then pos:line="199" pos:column="56">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="200" pos:column="25">sstrncpy<pos:position pos:line="200" pos:column="33"/></name><argument_list pos:line="200" pos:column="33">(<argument><expr><name pos:line="200" pos:column="34">service_buffer<pos:position pos:line="200" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="200" pos:column="50">name_buffer<pos:position pos:line="200" pos:column="61"/></name></expr></argument>, <argument><expr><sizeof pos:line="200" pos:column="63">sizeof<argument_list pos:line="200" pos:column="69">(<argument><expr><name pos:line="200" pos:column="70">service_buffer<pos:position pos:line="200" pos:column="84"/></name></expr></argument>)<pos:position pos:line="200" pos:column="85"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="200" pos:column="86"/></argument_list></call></expr>;<pos:position pos:line="200" pos:column="87"/></expr_stmt></block></then>
		<else pos:line="201" pos:column="17">else
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="202" pos:column="25">ssnprintf<pos:position pos:line="202" pos:column="34"/></name><argument_list pos:line="202" pos:column="34">(<argument><expr><name pos:line="202" pos:column="35">service_buffer<pos:position pos:line="202" pos:column="49"/></name></expr></argument>, <argument><expr><sizeof pos:line="202" pos:column="51">sizeof<argument_list pos:line="202" pos:column="57">(<argument><expr><name pos:line="202" pos:column="58">service_buffer<pos:position pos:line="202" pos:column="72"/></name></expr></argument>)<pos:position pos:line="202" pos:column="73"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="202" pos:column="75">"%s%s"<pos:position pos:line="202" pos:column="81"/></literal></expr></argument>,
					<argument><expr><name><name pos:line="203" pos:column="41">host<pos:position pos:line="203" pos:column="45"/></name><operator pos:line="203" pos:column="45">-&gt;<pos:position pos:line="203" pos:column="50"/></operator><name pos:line="203" pos:column="47">event_service_prefix<pos:position pos:line="203" pos:column="67"/></name></name></expr></argument>, <argument><expr><name pos:line="203" pos:column="69">name_buffer<pos:position pos:line="203" pos:column="80"/></name></expr></argument>)<pos:position pos:line="203" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="203" pos:column="82"/></expr_stmt></block></else></if>
	}<pos:position pos:line="204" pos:column="10"/></block></else></if>

	<comment type="line" pos:line="206" pos:column="9">// Replace collectd sensor name reserved characters so that time series DB is happy</comment>
	<expr_stmt><expr><call><name pos:line="207" pos:column="9">in_place_replace_sensu_name_reserved<pos:position pos:line="207" pos:column="45"/></name><argument_list pos:line="207" pos:column="45">(<argument><expr><name pos:line="207" pos:column="46">service_buffer<pos:position pos:line="207" pos:column="60"/></name></expr></argument>)<pos:position pos:line="207" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="207" pos:column="62"/></expr_stmt>

	<comment type="line" pos:line="209" pos:column="9">// finalize the buffer by setting the output and closing curly bracket</comment>
	<expr_stmt><expr><name pos:line="210" pos:column="9">res<pos:position pos:line="210" pos:column="12"/></name> <operator pos:line="210" pos:column="13">=<pos:position pos:line="210" pos:column="14"/></operator> <call><name pos:line="210" pos:column="15">my_asprintf<pos:position pos:line="210" pos:column="26"/></name><argument_list pos:line="210" pos:column="26">(<argument><expr><operator pos:line="210" pos:column="27">&amp;<pos:position pos:line="210" pos:column="32"/></operator><name pos:line="210" pos:column="28">temp_str<pos:position pos:line="210" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="210" pos:column="38">"%s, \"output\": \"%s %s %lld\"}\n"<pos:position pos:line="210" pos:column="73"/></literal></expr></argument>,<argument><expr><name pos:line="210" pos:column="74">ret_str<pos:position pos:line="210" pos:column="81"/></name></expr></argument>, <argument><expr><name pos:line="210" pos:column="83">service_buffer<pos:position pos:line="210" pos:column="97"/></name></expr></argument>, <argument><expr><name pos:line="210" pos:column="99">value_str<pos:position pos:line="210" pos:column="108"/></name></expr></argument>, <argument><expr><operator pos:line="210" pos:column="110">(<pos:position pos:line="210" pos:column="111"/></operator><name pos:line="210" pos:column="111">long<pos:position pos:line="210" pos:column="115"/></name> <name pos:line="210" pos:column="116">long<pos:position pos:line="210" pos:column="120"/></name><operator pos:line="210" pos:column="120">)<pos:position pos:line="210" pos:column="121"/></operator><call><name pos:line="210" pos:column="121">CDTIME_T_TO_TIME_T<pos:position pos:line="210" pos:column="139"/></name><argument_list pos:line="210" pos:column="139">(<argument><expr><name><name pos:line="210" pos:column="140">vl<pos:position pos:line="210" pos:column="142"/></name><operator pos:line="210" pos:column="142">-&gt;<pos:position pos:line="210" pos:column="147"/></operator><name pos:line="210" pos:column="144">time<pos:position pos:line="210" pos:column="148"/></name></name></expr></argument>)<pos:position pos:line="210" pos:column="149"/></argument_list></call></expr></argument>)<pos:position pos:line="210" pos:column="150"/></argument_list></call></expr>;<pos:position pos:line="210" pos:column="151"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="211" pos:column="9">free<pos:position pos:line="211" pos:column="13"/></name><argument_list pos:line="211" pos:column="13">(<argument><expr><name pos:line="211" pos:column="14">ret_str<pos:position pos:line="211" pos:column="21"/></name></expr></argument>)<pos:position pos:line="211" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="211" pos:column="23"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="212" pos:column="9">free<pos:position pos:line="212" pos:column="13"/></name><argument_list pos:line="212" pos:column="13">(<argument><expr><name pos:line="212" pos:column="14">value_str<pos:position pos:line="212" pos:column="23"/></name></expr></argument>)<pos:position pos:line="212" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="212" pos:column="25"/></expr_stmt>
	<if pos:line="213" pos:column="9">if <condition pos:line="213" pos:column="12">(<expr><name pos:line="213" pos:column="13">res<pos:position pos:line="213" pos:column="16"/></name> <operator pos:line="213" pos:column="17">==<pos:position pos:line="213" pos:column="19"/></operator> <operator pos:line="213" pos:column="20">-<pos:position pos:line="213" pos:column="21"/></operator><literal type="number" pos:line="213" pos:column="21">1<pos:position pos:line="213" pos:column="22"/></literal></expr>)<pos:position pos:line="213" pos:column="23"/></condition><then pos:line="213" pos:column="23"> <block pos:line="213" pos:column="24">{
		<expr_stmt><expr><call><name pos:line="214" pos:column="17">ERROR<pos:position pos:line="214" pos:column="22"/></name><argument_list pos:line="214" pos:column="22">(<argument><expr><literal type="string" pos:line="214" pos:column="23">"write_sensu plugin: Unable to alloc memory"<pos:position pos:line="214" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="214" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="214" pos:column="69"/></expr_stmt>
		<return pos:line="215" pos:column="17">return <expr><name pos:line="215" pos:column="24">NULL<pos:position pos:line="215" pos:column="28"/></name></expr>;<pos:position pos:line="215" pos:column="29"/></return>
	}<pos:position pos:line="216" pos:column="10"/></block></then></if>
	<expr_stmt><expr><name pos:line="217" pos:column="9">ret_str<pos:position pos:line="217" pos:column="16"/></name> <operator pos:line="217" pos:column="17">=<pos:position pos:line="217" pos:column="18"/></operator> <name pos:line="217" pos:column="19">temp_str<pos:position pos:line="217" pos:column="27"/></name></expr>;<pos:position pos:line="217" pos:column="28"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="219" pos:column="9">DEBUG<pos:position pos:line="219" pos:column="14"/></name><argument_list pos:line="219" pos:column="14">(<argument><expr><literal type="string" pos:line="219" pos:column="15">"write_sensu plugin: Successfully created json for metric: "<pos:position pos:line="219" pos:column="75"/></literal>
			<literal type="string" pos:line="220" pos:column="25">"host = \"%s\", service = \"%s\""<pos:position pos:line="220" pos:column="58"/></literal></expr></argument>,
			<argument><expr><name><name pos:line="221" pos:column="25">vl<pos:position pos:line="221" pos:column="27"/></name><operator pos:line="221" pos:column="27">-&gt;<pos:position pos:line="221" pos:column="32"/></operator><name pos:line="221" pos:column="29">host<pos:position pos:line="221" pos:column="33"/></name></name></expr></argument>, <argument><expr><name pos:line="221" pos:column="35">service_buffer<pos:position pos:line="221" pos:column="49"/></name></expr></argument>)<pos:position pos:line="221" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="221" pos:column="51"/></expr_stmt>
	<return pos:line="222" pos:column="9">return <expr><name pos:line="222" pos:column="16">ret_str<pos:position pos:line="222" pos:column="23"/></name></expr>;<pos:position pos:line="222" pos:column="24"/></return>
}<pos:position pos:line="223" pos:column="2"/></block></function></unit>
