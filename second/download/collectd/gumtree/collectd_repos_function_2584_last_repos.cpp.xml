<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_2584_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">lcc_identifier_compare<pos:position pos:line="1" pos:column="27"/></name><parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><specifier pos:line="1" pos:column="28">const<pos:position pos:line="1" pos:column="33"/></specifier> <name pos:line="1" pos:column="34">void<pos:position pos:line="1" pos:column="38"/></name> <modifier pos:line="1" pos:column="39">*<pos:position pos:line="1" pos:column="40"/></modifier></type><name pos:line="1" pos:column="40">a<pos:position pos:line="1" pos:column="41"/></name></decl></parameter>, <comment type="block" pos:line="1" pos:column="43">/* {{{ */</comment>
                           <parameter><decl><type><specifier pos:line="2" pos:column="28">const<pos:position pos:line="2" pos:column="33"/></specifier> <name pos:line="2" pos:column="34">void<pos:position pos:line="2" pos:column="38"/></name> <modifier pos:line="2" pos:column="39">*<pos:position pos:line="2" pos:column="40"/></modifier></type><name pos:line="2" pos:column="40">b<pos:position pos:line="2" pos:column="41"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="42"/></parameter_list> <block pos:line="2" pos:column="43">{
  <decl_stmt><decl><type><specifier pos:line="3" pos:column="3">const<pos:position pos:line="3" pos:column="8"/></specifier> <name pos:line="3" pos:column="9">lcc_identifier_t<pos:position pos:line="3" pos:column="25"/></name> <modifier pos:line="3" pos:column="26">*<pos:position pos:line="3" pos:column="27"/></modifier></type><name pos:line="3" pos:column="27">i0<pos:position pos:line="3" pos:column="29"/></name> <init pos:line="3" pos:column="30">= <expr><name pos:line="3" pos:column="32">a<pos:position pos:line="3" pos:column="33"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="34"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="4" pos:column="3">const<pos:position pos:line="4" pos:column="8"/></specifier> <name pos:line="4" pos:column="9">lcc_identifier_t<pos:position pos:line="4" pos:column="25"/></name> <modifier pos:line="4" pos:column="26">*<pos:position pos:line="4" pos:column="27"/></modifier></type><name pos:line="4" pos:column="27">i1<pos:position pos:line="4" pos:column="29"/></name> <init pos:line="4" pos:column="30">= <expr><name pos:line="4" pos:column="32">b<pos:position pos:line="4" pos:column="33"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="34"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">int<pos:position pos:line="5" pos:column="6"/></name></type> <name pos:line="5" pos:column="7">status<pos:position pos:line="5" pos:column="13"/></name></decl>;<pos:position pos:line="5" pos:column="14"/></decl_stmt>

  <if pos:line="7" pos:column="3">if <condition pos:line="7" pos:column="6">(<expr><operator pos:line="7" pos:column="7">(<pos:position pos:line="7" pos:column="8"/></operator><name pos:line="7" pos:column="8">i0<pos:position pos:line="7" pos:column="10"/></name> <operator pos:line="7" pos:column="11">==<pos:position pos:line="7" pos:column="13"/></operator> <name pos:line="7" pos:column="14">NULL<pos:position pos:line="7" pos:column="18"/></name><operator pos:line="7" pos:column="18">)<pos:position pos:line="7" pos:column="19"/></operator> <operator pos:line="7" pos:column="20">&amp;&amp;<pos:position pos:line="7" pos:column="30"/></operator> <operator pos:line="7" pos:column="23">(<pos:position pos:line="7" pos:column="24"/></operator><name pos:line="7" pos:column="24">i1<pos:position pos:line="7" pos:column="26"/></name> <operator pos:line="7" pos:column="27">==<pos:position pos:line="7" pos:column="29"/></operator> <name pos:line="7" pos:column="30">NULL<pos:position pos:line="7" pos:column="34"/></name><operator pos:line="7" pos:column="34">)<pos:position pos:line="7" pos:column="35"/></operator></expr>)<pos:position pos:line="7" pos:column="36"/></condition><then pos:line="7" pos:column="36">
    <block type="pseudo"><return pos:line="8" pos:column="5">return <expr><literal type="number" pos:line="8" pos:column="12">0<pos:position pos:line="8" pos:column="13"/></literal></expr>;<pos:position pos:line="8" pos:column="14"/></return></block></then>
  <elseif pos:line="9" pos:column="3">else <if pos:line="9" pos:column="8">if <condition pos:line="9" pos:column="11">(<expr><name pos:line="9" pos:column="12">i0<pos:position pos:line="9" pos:column="14"/></name> <operator pos:line="9" pos:column="15">==<pos:position pos:line="9" pos:column="17"/></operator> <name pos:line="9" pos:column="18">NULL<pos:position pos:line="9" pos:column="22"/></name></expr>)<pos:position pos:line="9" pos:column="23"/></condition><then pos:line="9" pos:column="23">
    <block type="pseudo"><return pos:line="10" pos:column="5">return <expr><operator pos:line="10" pos:column="12">-<pos:position pos:line="10" pos:column="13"/></operator><literal type="number" pos:line="10" pos:column="13">1<pos:position pos:line="10" pos:column="14"/></literal></expr>;<pos:position pos:line="10" pos:column="15"/></return></block></then></if></elseif>
  <elseif pos:line="11" pos:column="3">else <if pos:line="11" pos:column="8">if <condition pos:line="11" pos:column="11">(<expr><name pos:line="11" pos:column="12">i1<pos:position pos:line="11" pos:column="14"/></name> <operator pos:line="11" pos:column="15">==<pos:position pos:line="11" pos:column="17"/></operator> <name pos:line="11" pos:column="18">NULL<pos:position pos:line="11" pos:column="22"/></name></expr>)<pos:position pos:line="11" pos:column="23"/></condition><then pos:line="11" pos:column="23">
    <block type="pseudo"><return pos:line="12" pos:column="5">return <expr><literal type="number" pos:line="12" pos:column="12">1<pos:position pos:line="12" pos:column="13"/></literal></expr>;<pos:position pos:line="12" pos:column="14"/></return></block></then></if></elseif></if>

<cpp:define pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">define<pos:position pos:line="14" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="14" pos:column="9">CMP_FIELD<pos:position pos:line="14" pos:column="18"/></name><parameter_list pos:line="14" pos:column="18">(<parameter><type><name pos:line="14" pos:column="19">f<pos:position pos:line="14" pos:column="20"/></name></type></parameter>)<pos:position pos:line="14" pos:column="21"/></parameter_list></cpp:macro>                                                           \
  <cpp:value pos:line="15" pos:column="3">do {                                                                         \
    status = strcmp(i0-&gt;f, i1-&gt;f);                                             \
    if (status != 0)                                                           \
      return status;                                                           \
  } while (0);<pos:position pos:line="19" pos:column="15"/></cpp:value></cpp:define>

  <expr_stmt><expr><call><name pos:line="21" pos:column="3">CMP_FIELD<pos:position pos:line="21" pos:column="12"/></name><argument_list pos:line="21" pos:column="12">(<argument><expr><name pos:line="21" pos:column="13">host<pos:position pos:line="21" pos:column="17"/></name></expr></argument>)<pos:position pos:line="21" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="19"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="22" pos:column="3">CMP_FIELD<pos:position pos:line="22" pos:column="12"/></name><argument_list pos:line="22" pos:column="12">(<argument><expr><name pos:line="22" pos:column="13">plugin<pos:position pos:line="22" pos:column="19"/></name></expr></argument>)<pos:position pos:line="22" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="21"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="23" pos:column="3">CMP_FIELD<pos:position pos:line="23" pos:column="12"/></name><argument_list pos:line="23" pos:column="12">(<argument><expr><name pos:line="23" pos:column="13">plugin_instance<pos:position pos:line="23" pos:column="28"/></name></expr></argument>)<pos:position pos:line="23" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="30"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="24" pos:column="3">CMP_FIELD<pos:position pos:line="24" pos:column="12"/></name><argument_list pos:line="24" pos:column="12">(<argument><expr><name pos:line="24" pos:column="13">type<pos:position pos:line="24" pos:column="17"/></name></expr></argument>)<pos:position pos:line="24" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="19"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="25" pos:column="3">CMP_FIELD<pos:position pos:line="25" pos:column="12"/></name><argument_list pos:line="25" pos:column="12">(<argument><expr><name pos:line="25" pos:column="13">type_instance<pos:position pos:line="25" pos:column="26"/></name></expr></argument>)<pos:position pos:line="25" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="28"/></expr_stmt>

<cpp:undef pos:line="27" pos:column="1">#<cpp:directive pos:line="27" pos:column="2">undef<pos:position pos:line="27" pos:column="7"/></cpp:directive> <name pos:line="27" pos:column="8">CMP_FIELD<pos:position pos:line="27" pos:column="17"/></name></cpp:undef>

  <return pos:line="29" pos:column="3">return <expr><literal type="number" pos:line="29" pos:column="10">0<pos:position pos:line="29" pos:column="11"/></literal></expr>;<pos:position pos:line="29" pos:column="12"/></return>
}<pos:position pos:line="30" pos:column="2"/></block></function></unit>
