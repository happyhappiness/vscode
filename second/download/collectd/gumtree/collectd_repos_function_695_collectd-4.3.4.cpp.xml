<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_695_collectd-4.3.4.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">ut_threshold_add<pos:position pos:line="1" pos:column="28"/></name> <parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><specifier pos:line="1" pos:column="30">const<pos:position pos:line="1" pos:column="35"/></specifier> <name pos:line="1" pos:column="36">threshold_t<pos:position pos:line="1" pos:column="47"/></name> <modifier pos:line="1" pos:column="48">*<pos:position pos:line="1" pos:column="49"/></modifier></type><name pos:line="1" pos:column="49">th<pos:position pos:line="1" pos:column="51"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="52"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">char<pos:position pos:line="3" pos:column="7"/></name></type> <name><name pos:line="3" pos:column="8">name<pos:position pos:line="3" pos:column="12"/></name><index pos:line="3" pos:column="12">[<expr><literal type="number" pos:line="3" pos:column="13">6<pos:position pos:line="3" pos:column="14"/></literal> <operator pos:line="3" pos:column="15">*<pos:position pos:line="3" pos:column="16"/></operator> <name pos:line="3" pos:column="17">DATA_MAX_NAME_LEN<pos:position pos:line="3" pos:column="34"/></name></expr>]<pos:position pos:line="3" pos:column="35"/></index></name></decl>;<pos:position pos:line="3" pos:column="36"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">char<pos:position pos:line="4" pos:column="7"/></name> <modifier pos:line="4" pos:column="8">*<pos:position pos:line="4" pos:column="9"/></modifier></type><name pos:line="4" pos:column="9">name_copy<pos:position pos:line="4" pos:column="18"/></name></decl>;<pos:position pos:line="4" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">threshold_t<pos:position pos:line="5" pos:column="14"/></name> <modifier pos:line="5" pos:column="15">*<pos:position pos:line="5" pos:column="16"/></modifier></type><name pos:line="5" pos:column="16">th_copy<pos:position pos:line="5" pos:column="23"/></name></decl>;<pos:position pos:line="5" pos:column="24"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">int<pos:position pos:line="6" pos:column="6"/></name></type> <name pos:line="6" pos:column="7">status<pos:position pos:line="6" pos:column="13"/></name> <init pos:line="6" pos:column="14">= <expr><literal type="number" pos:line="6" pos:column="16">0<pos:position pos:line="6" pos:column="17"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="18"/></decl_stmt>

  <if pos:line="8" pos:column="3">if <condition pos:line="8" pos:column="6">(<expr><call><name pos:line="8" pos:column="7">format_name<pos:position pos:line="8" pos:column="18"/></name> <argument_list pos:line="8" pos:column="19">(<argument><expr><name pos:line="8" pos:column="20">name<pos:position pos:line="8" pos:column="24"/></name></expr></argument>, <argument><expr><sizeof pos:line="8" pos:column="26">sizeof <argument_list pos:line="8" pos:column="33">(<argument><expr><name pos:line="8" pos:column="34">name<pos:position pos:line="8" pos:column="38"/></name></expr></argument>)<pos:position pos:line="8" pos:column="39"/></argument_list></sizeof></expr></argument>, <argument><expr><name><name pos:line="8" pos:column="41">th<pos:position pos:line="8" pos:column="43"/></name><operator pos:line="8" pos:column="43">-&gt;<pos:position pos:line="8" pos:column="48"/></operator><name pos:line="8" pos:column="45">host<pos:position pos:line="8" pos:column="49"/></name></name></expr></argument>,
	<argument><expr><name><name pos:line="9" pos:column="9">th<pos:position pos:line="9" pos:column="11"/></name><operator pos:line="9" pos:column="11">-&gt;<pos:position pos:line="9" pos:column="16"/></operator><name pos:line="9" pos:column="13">plugin<pos:position pos:line="9" pos:column="19"/></name></name></expr></argument>, <argument><expr><name><name pos:line="9" pos:column="21">th<pos:position pos:line="9" pos:column="23"/></name><operator pos:line="9" pos:column="23">-&gt;<pos:position pos:line="9" pos:column="28"/></operator><name pos:line="9" pos:column="25">plugin_instance<pos:position pos:line="9" pos:column="40"/></name></name></expr></argument>,
	<argument><expr><name><name pos:line="10" pos:column="9">th<pos:position pos:line="10" pos:column="11"/></name><operator pos:line="10" pos:column="11">-&gt;<pos:position pos:line="10" pos:column="16"/></operator><name pos:line="10" pos:column="13">type<pos:position pos:line="10" pos:column="17"/></name></name></expr></argument>, <argument><expr><name><name pos:line="10" pos:column="19">th<pos:position pos:line="10" pos:column="21"/></name><operator pos:line="10" pos:column="21">-&gt;<pos:position pos:line="10" pos:column="26"/></operator><name pos:line="10" pos:column="23">type_instance<pos:position pos:line="10" pos:column="36"/></name></name></expr></argument>)<pos:position pos:line="10" pos:column="37"/></argument_list></call> <operator pos:line="10" pos:column="38">!=<pos:position pos:line="10" pos:column="40"/></operator> <literal type="number" pos:line="10" pos:column="41">0<pos:position pos:line="10" pos:column="42"/></literal></expr>)<pos:position pos:line="10" pos:column="43"/></condition><then pos:line="10" pos:column="43">
  <block pos:line="11" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="12" pos:column="5">ERROR<pos:position pos:line="12" pos:column="10"/></name> <argument_list pos:line="12" pos:column="11">(<argument><expr><literal type="string" pos:line="12" pos:column="12">"ut_threshold_add: format_name failed."<pos:position pos:line="12" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="53"/></expr_stmt>
    <return pos:line="13" pos:column="5">return <expr><operator pos:line="13" pos:column="12">(<pos:position pos:line="13" pos:column="13"/></operator><operator pos:line="13" pos:column="13">-<pos:position pos:line="13" pos:column="14"/></operator><literal type="number" pos:line="13" pos:column="14">1<pos:position pos:line="13" pos:column="15"/></literal><operator pos:line="13" pos:column="15">)<pos:position pos:line="13" pos:column="16"/></operator></expr>;<pos:position pos:line="13" pos:column="17"/></return>
  }<pos:position pos:line="14" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="16" pos:column="3">name_copy<pos:position pos:line="16" pos:column="12"/></name> <operator pos:line="16" pos:column="13">=<pos:position pos:line="16" pos:column="14"/></operator> <call><name pos:line="16" pos:column="15">strdup<pos:position pos:line="16" pos:column="21"/></name> <argument_list pos:line="16" pos:column="22">(<argument><expr><name pos:line="16" pos:column="23">name<pos:position pos:line="16" pos:column="27"/></name></expr></argument>)<pos:position pos:line="16" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="29"/></expr_stmt>
  <if pos:line="17" pos:column="3">if <condition pos:line="17" pos:column="6">(<expr><name pos:line="17" pos:column="7">name_copy<pos:position pos:line="17" pos:column="16"/></name> <operator pos:line="17" pos:column="17">==<pos:position pos:line="17" pos:column="19"/></operator> <name pos:line="17" pos:column="20">NULL<pos:position pos:line="17" pos:column="24"/></name></expr>)<pos:position pos:line="17" pos:column="25"/></condition><then pos:line="17" pos:column="25">
  <block pos:line="18" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="19" pos:column="5">ERROR<pos:position pos:line="19" pos:column="10"/></name> <argument_list pos:line="19" pos:column="11">(<argument><expr><literal type="string" pos:line="19" pos:column="12">"ut_threshold_add: strdup failed."<pos:position pos:line="19" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="48"/></expr_stmt>
    <return pos:line="20" pos:column="5">return <expr><operator pos:line="20" pos:column="12">(<pos:position pos:line="20" pos:column="13"/></operator><operator pos:line="20" pos:column="13">-<pos:position pos:line="20" pos:column="14"/></operator><literal type="number" pos:line="20" pos:column="14">1<pos:position pos:line="20" pos:column="15"/></literal><operator pos:line="20" pos:column="15">)<pos:position pos:line="20" pos:column="16"/></operator></expr>;<pos:position pos:line="20" pos:column="17"/></return>
  }<pos:position pos:line="21" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="23" pos:column="3">th_copy<pos:position pos:line="23" pos:column="10"/></name> <operator pos:line="23" pos:column="11">=<pos:position pos:line="23" pos:column="12"/></operator> <operator pos:line="23" pos:column="13">(<pos:position pos:line="23" pos:column="14"/></operator><name pos:line="23" pos:column="14">threshold_t<pos:position pos:line="23" pos:column="25"/></name> <operator pos:line="23" pos:column="26">*<pos:position pos:line="23" pos:column="27"/></operator><operator pos:line="23" pos:column="27">)<pos:position pos:line="23" pos:column="28"/></operator> <call><name pos:line="23" pos:column="29">malloc<pos:position pos:line="23" pos:column="35"/></name> <argument_list pos:line="23" pos:column="36">(<argument><expr><sizeof pos:line="23" pos:column="37">sizeof <argument_list pos:line="23" pos:column="44">(<argument><expr><name pos:line="23" pos:column="45">threshold_t<pos:position pos:line="23" pos:column="56"/></name></expr></argument>)<pos:position pos:line="23" pos:column="57"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="23" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="59"/></expr_stmt>
  <if pos:line="24" pos:column="3">if <condition pos:line="24" pos:column="6">(<expr><name pos:line="24" pos:column="7">th_copy<pos:position pos:line="24" pos:column="14"/></name> <operator pos:line="24" pos:column="15">==<pos:position pos:line="24" pos:column="17"/></operator> <name pos:line="24" pos:column="18">NULL<pos:position pos:line="24" pos:column="22"/></name></expr>)<pos:position pos:line="24" pos:column="23"/></condition><then pos:line="24" pos:column="23">
  <block pos:line="25" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="26" pos:column="5">sfree<pos:position pos:line="26" pos:column="10"/></name> <argument_list pos:line="26" pos:column="11">(<argument><expr><name pos:line="26" pos:column="12">name_copy<pos:position pos:line="26" pos:column="21"/></name></expr></argument>)<pos:position pos:line="26" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="23"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="27" pos:column="5">ERROR<pos:position pos:line="27" pos:column="10"/></name> <argument_list pos:line="27" pos:column="11">(<argument><expr><literal type="string" pos:line="27" pos:column="12">"ut_threshold_add: malloc failed."<pos:position pos:line="27" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="48"/></expr_stmt>
    <return pos:line="28" pos:column="5">return <expr><operator pos:line="28" pos:column="12">(<pos:position pos:line="28" pos:column="13"/></operator><operator pos:line="28" pos:column="13">-<pos:position pos:line="28" pos:column="14"/></operator><literal type="number" pos:line="28" pos:column="14">1<pos:position pos:line="28" pos:column="15"/></literal><operator pos:line="28" pos:column="15">)<pos:position pos:line="28" pos:column="16"/></operator></expr>;<pos:position pos:line="28" pos:column="17"/></return>
  }<pos:position pos:line="29" pos:column="4"/></block></then></if>
  <expr_stmt><expr><call><name pos:line="30" pos:column="3">memcpy<pos:position pos:line="30" pos:column="9"/></name> <argument_list pos:line="30" pos:column="10">(<argument><expr><name pos:line="30" pos:column="11">th_copy<pos:position pos:line="30" pos:column="18"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="20">th<pos:position pos:line="30" pos:column="22"/></name></expr></argument>, <argument><expr><sizeof pos:line="30" pos:column="24">sizeof <argument_list pos:line="30" pos:column="31">(<argument><expr><name pos:line="30" pos:column="32">threshold_t<pos:position pos:line="30" pos:column="43"/></name></expr></argument>)<pos:position pos:line="30" pos:column="44"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="30" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="46"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="32" pos:column="3">DEBUG<pos:position pos:line="32" pos:column="8"/></name> <argument_list pos:line="32" pos:column="9">(<argument><expr><literal type="string" pos:line="32" pos:column="10">"ut_threshold_add: Adding entry `%s'"<pos:position pos:line="32" pos:column="47"/></literal></expr></argument>, <argument><expr><name pos:line="32" pos:column="49">name<pos:position pos:line="32" pos:column="53"/></name></expr></argument>)<pos:position pos:line="32" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="55"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="34" pos:column="3">pthread_mutex_lock<pos:position pos:line="34" pos:column="21"/></name> <argument_list pos:line="34" pos:column="22">(<argument><expr><operator pos:line="34" pos:column="23">&amp;<pos:position pos:line="34" pos:column="28"/></operator><name pos:line="34" pos:column="24">threshold_lock<pos:position pos:line="34" pos:column="38"/></name></expr></argument>)<pos:position pos:line="34" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="40"/></expr_stmt>
  <expr_stmt><expr><name pos:line="35" pos:column="3">status<pos:position pos:line="35" pos:column="9"/></name> <operator pos:line="35" pos:column="10">=<pos:position pos:line="35" pos:column="11"/></operator> <call><name pos:line="35" pos:column="12">c_avl_insert<pos:position pos:line="35" pos:column="24"/></name> <argument_list pos:line="35" pos:column="25">(<argument><expr><name pos:line="35" pos:column="26">threshold_tree<pos:position pos:line="35" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="42">name_copy<pos:position pos:line="35" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="53">th_copy<pos:position pos:line="35" pos:column="60"/></name></expr></argument>)<pos:position pos:line="35" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="62"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="36" pos:column="3">pthread_mutex_unlock<pos:position pos:line="36" pos:column="23"/></name> <argument_list pos:line="36" pos:column="24">(<argument><expr><operator pos:line="36" pos:column="25">&amp;<pos:position pos:line="36" pos:column="30"/></operator><name pos:line="36" pos:column="26">threshold_lock<pos:position pos:line="36" pos:column="40"/></name></expr></argument>)<pos:position pos:line="36" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="42"/></expr_stmt>

  <if pos:line="38" pos:column="3">if <condition pos:line="38" pos:column="6">(<expr><name pos:line="38" pos:column="7">status<pos:position pos:line="38" pos:column="13"/></name> <operator pos:line="38" pos:column="14">!=<pos:position pos:line="38" pos:column="16"/></operator> <literal type="number" pos:line="38" pos:column="17">0<pos:position pos:line="38" pos:column="18"/></literal></expr>)<pos:position pos:line="38" pos:column="19"/></condition><then pos:line="38" pos:column="19">
  <block pos:line="39" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="40" pos:column="5">ERROR<pos:position pos:line="40" pos:column="10"/></name> <argument_list pos:line="40" pos:column="11">(<argument><expr><literal type="string" pos:line="40" pos:column="12">"ut_threshold_add: c_avl_insert (%s) failed."<pos:position pos:line="40" pos:column="57"/></literal></expr></argument>, <argument><expr><name pos:line="40" pos:column="59">name<pos:position pos:line="40" pos:column="63"/></name></expr></argument>)<pos:position pos:line="40" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="65"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="41" pos:column="5">sfree<pos:position pos:line="41" pos:column="10"/></name> <argument_list pos:line="41" pos:column="11">(<argument><expr><name pos:line="41" pos:column="12">name_copy<pos:position pos:line="41" pos:column="21"/></name></expr></argument>)<pos:position pos:line="41" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="23"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="42" pos:column="5">sfree<pos:position pos:line="42" pos:column="10"/></name> <argument_list pos:line="42" pos:column="11">(<argument><expr><name pos:line="42" pos:column="12">th_copy<pos:position pos:line="42" pos:column="19"/></name></expr></argument>)<pos:position pos:line="42" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="21"/></expr_stmt>
  }<pos:position pos:line="43" pos:column="4"/></block></then></if>

  <return pos:line="45" pos:column="3">return <expr><operator pos:line="45" pos:column="10">(<pos:position pos:line="45" pos:column="11"/></operator><name pos:line="45" pos:column="11">status<pos:position pos:line="45" pos:column="17"/></name><operator pos:line="45" pos:column="17">)<pos:position pos:line="45" pos:column="18"/></operator></expr>;<pos:position pos:line="45" pos:column="19"/></return>
}<pos:position pos:line="46" pos:column="2"/></block></function></unit>
