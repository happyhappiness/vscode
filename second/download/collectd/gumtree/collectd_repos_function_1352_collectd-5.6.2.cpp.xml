<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1352_collectd-5.6.2.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">swap_read_io<pos:position pos:line="1" pos:column="24"/></name><parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><name pos:line="1" pos:column="25">void<pos:position pos:line="1" pos:column="29"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="30"/></parameter_list> <comment type="block" pos:line="1" pos:column="31">/* {{{ */</comment>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">FILE<pos:position pos:line="3" pos:column="7"/></name> <modifier pos:line="3" pos:column="8">*<pos:position pos:line="3" pos:column="9"/></modifier></type><name pos:line="3" pos:column="9">fh<pos:position pos:line="3" pos:column="11"/></name></decl>;<pos:position pos:line="3" pos:column="12"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">char<pos:position pos:line="4" pos:column="7"/></name></type> <name><name pos:line="4" pos:column="8">buffer<pos:position pos:line="4" pos:column="14"/></name><index pos:line="4" pos:column="14">[<expr><literal type="number" pos:line="4" pos:column="15">1024<pos:position pos:line="4" pos:column="19"/></literal></expr>]<pos:position pos:line="4" pos:column="20"/></index></name></decl>;<pos:position pos:line="4" pos:column="21"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="6" pos:column="3">_Bool<pos:position pos:line="6" pos:column="8"/></name></type> <name pos:line="6" pos:column="9">old_kernel<pos:position pos:line="6" pos:column="19"/></name> <init pos:line="6" pos:column="20">= <expr><literal type="number" pos:line="6" pos:column="22">0<pos:position pos:line="6" pos:column="23"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="24"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="8" pos:column="3">uint8_t<pos:position pos:line="8" pos:column="10"/></name></type> <name pos:line="8" pos:column="11">have_data<pos:position pos:line="8" pos:column="20"/></name> <init pos:line="8" pos:column="21">= <expr><literal type="number" pos:line="8" pos:column="23">0<pos:position pos:line="8" pos:column="24"/></literal></expr></init></decl>;<pos:position pos:line="8" pos:column="25"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">derive_t<pos:position pos:line="9" pos:column="11"/></name></type> <name pos:line="9" pos:column="12">swap_in<pos:position pos:line="9" pos:column="19"/></name> <init pos:line="9" pos:column="20">= <expr><literal type="number" pos:line="9" pos:column="22">0<pos:position pos:line="9" pos:column="23"/></literal></expr></init></decl>;<pos:position pos:line="9" pos:column="24"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">derive_t<pos:position pos:line="10" pos:column="11"/></name></type> <name pos:line="10" pos:column="12">swap_out<pos:position pos:line="10" pos:column="20"/></name> <init pos:line="10" pos:column="21">= <expr><literal type="number" pos:line="10" pos:column="23">0<pos:position pos:line="10" pos:column="24"/></literal></expr></init></decl>;<pos:position pos:line="10" pos:column="25"/></decl_stmt>

  <expr_stmt><expr><name pos:line="12" pos:column="3">fh<pos:position pos:line="12" pos:column="5"/></name> <operator pos:line="12" pos:column="6">=<pos:position pos:line="12" pos:column="7"/></operator> <call><name pos:line="12" pos:column="8">fopen<pos:position pos:line="12" pos:column="13"/></name><argument_list pos:line="12" pos:column="13">(<argument><expr><literal type="string" pos:line="12" pos:column="14">"/proc/vmstat"<pos:position pos:line="12" pos:column="28"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="12" pos:column="30">"r"<pos:position pos:line="12" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="35"/></expr_stmt>
  <if pos:line="13" pos:column="3">if <condition pos:line="13" pos:column="6">(<expr><name pos:line="13" pos:column="7">fh<pos:position pos:line="13" pos:column="9"/></name> <operator pos:line="13" pos:column="10">==<pos:position pos:line="13" pos:column="12"/></operator> <name pos:line="13" pos:column="13">NULL<pos:position pos:line="13" pos:column="17"/></name></expr>)<pos:position pos:line="13" pos:column="18"/></condition><then pos:line="13" pos:column="18"> <block pos:line="13" pos:column="19">{
    <comment type="block" pos:line="14" pos:column="5">/* /proc/vmstat does not exist in kernels &lt;2.6 */</comment>
    <expr_stmt><expr><name pos:line="15" pos:column="5">fh<pos:position pos:line="15" pos:column="7"/></name> <operator pos:line="15" pos:column="8">=<pos:position pos:line="15" pos:column="9"/></operator> <call><name pos:line="15" pos:column="10">fopen<pos:position pos:line="15" pos:column="15"/></name><argument_list pos:line="15" pos:column="15">(<argument><expr><literal type="string" pos:line="15" pos:column="16">"/proc/stat"<pos:position pos:line="15" pos:column="28"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="15" pos:column="30">"r"<pos:position pos:line="15" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="35"/></expr_stmt>
    <if pos:line="16" pos:column="5">if <condition pos:line="16" pos:column="8">(<expr><name pos:line="16" pos:column="9">fh<pos:position pos:line="16" pos:column="11"/></name> <operator pos:line="16" pos:column="12">==<pos:position pos:line="16" pos:column="14"/></operator> <name pos:line="16" pos:column="15">NULL<pos:position pos:line="16" pos:column="19"/></name></expr>)<pos:position pos:line="16" pos:column="20"/></condition><then pos:line="16" pos:column="20"> <block pos:line="16" pos:column="21">{
      <decl_stmt><decl><type><name pos:line="17" pos:column="7">char<pos:position pos:line="17" pos:column="11"/></name></type> <name><name pos:line="17" pos:column="12">errbuf<pos:position pos:line="17" pos:column="18"/></name><index pos:line="17" pos:column="18">[<expr><literal type="number" pos:line="17" pos:column="19">1024<pos:position pos:line="17" pos:column="23"/></literal></expr>]<pos:position pos:line="17" pos:column="24"/></index></name></decl>;<pos:position pos:line="17" pos:column="25"/></decl_stmt>
      <expr_stmt><expr><call><name pos:line="18" pos:column="7">WARNING<pos:position pos:line="18" pos:column="14"/></name><argument_list pos:line="18" pos:column="14">(<argument><expr><literal type="string" pos:line="18" pos:column="15">"swap: fopen: %s"<pos:position pos:line="18" pos:column="32"/></literal></expr></argument>, <argument><expr><call><name pos:line="18" pos:column="34">sstrerror<pos:position pos:line="18" pos:column="43"/></name><argument_list pos:line="18" pos:column="43">(<argument><expr><name pos:line="18" pos:column="44">errno<pos:position pos:line="18" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="51">errbuf<pos:position pos:line="18" pos:column="57"/></name></expr></argument>, <argument><expr><sizeof pos:line="18" pos:column="59">sizeof<argument_list pos:line="18" pos:column="65">(<argument><expr><name pos:line="18" pos:column="66">errbuf<pos:position pos:line="18" pos:column="72"/></name></expr></argument>)<pos:position pos:line="18" pos:column="73"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="18" pos:column="74"/></argument_list></call></expr></argument>)<pos:position pos:line="18" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="76"/></expr_stmt>
      <return pos:line="19" pos:column="7">return <expr><operator pos:line="19" pos:column="14">(<pos:position pos:line="19" pos:column="15"/></operator><operator pos:line="19" pos:column="15">-<pos:position pos:line="19" pos:column="16"/></operator><literal type="number" pos:line="19" pos:column="16">1<pos:position pos:line="19" pos:column="17"/></literal><operator pos:line="19" pos:column="17">)<pos:position pos:line="19" pos:column="18"/></operator></expr>;<pos:position pos:line="19" pos:column="19"/></return>
    }<pos:position pos:line="20" pos:column="6"/></block></then> <else pos:line="20" pos:column="7">else
      <block type="pseudo"><expr_stmt><expr><name pos:line="21" pos:column="7">old_kernel<pos:position pos:line="21" pos:column="17"/></name> <operator pos:line="21" pos:column="18">=<pos:position pos:line="21" pos:column="19"/></operator> <literal type="number" pos:line="21" pos:column="20">1<pos:position pos:line="21" pos:column="21"/></literal></expr>;<pos:position pos:line="21" pos:column="22"/></expr_stmt></block></else></if>
  }<pos:position pos:line="22" pos:column="4"/></block></then></if>

  <while pos:line="24" pos:column="3">while <condition pos:line="24" pos:column="9">(<expr><call><name pos:line="24" pos:column="10">fgets<pos:position pos:line="24" pos:column="15"/></name><argument_list pos:line="24" pos:column="15">(<argument><expr><name pos:line="24" pos:column="16">buffer<pos:position pos:line="24" pos:column="22"/></name></expr></argument>, <argument><expr><sizeof pos:line="24" pos:column="24">sizeof<argument_list pos:line="24" pos:column="30">(<argument><expr><name pos:line="24" pos:column="31">buffer<pos:position pos:line="24" pos:column="37"/></name></expr></argument>)<pos:position pos:line="24" pos:column="38"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="24" pos:column="40">fh<pos:position pos:line="24" pos:column="42"/></name></expr></argument>)<pos:position pos:line="24" pos:column="43"/></argument_list></call> <operator pos:line="24" pos:column="44">!=<pos:position pos:line="24" pos:column="46"/></operator> <name pos:line="24" pos:column="47">NULL<pos:position pos:line="24" pos:column="51"/></name></expr>)<pos:position pos:line="24" pos:column="52"/></condition> <block pos:line="24" pos:column="53">{
    <decl_stmt><decl><type><name pos:line="25" pos:column="5">char<pos:position pos:line="25" pos:column="9"/></name> <modifier pos:line="25" pos:column="10">*<pos:position pos:line="25" pos:column="11"/></modifier></type><name><name pos:line="25" pos:column="11">fields<pos:position pos:line="25" pos:column="17"/></name><index pos:line="25" pos:column="17">[<expr><literal type="number" pos:line="25" pos:column="18">8<pos:position pos:line="25" pos:column="19"/></literal></expr>]<pos:position pos:line="25" pos:column="20"/></index></name></decl>;<pos:position pos:line="25" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="26" pos:column="5">int<pos:position pos:line="26" pos:column="8"/></name></type> <name pos:line="26" pos:column="9">numfields<pos:position pos:line="26" pos:column="18"/></name></decl>;<pos:position pos:line="26" pos:column="19"/></decl_stmt>

    <expr_stmt><expr><name pos:line="28" pos:column="5">numfields<pos:position pos:line="28" pos:column="14"/></name> <operator pos:line="28" pos:column="15">=<pos:position pos:line="28" pos:column="16"/></operator> <call><name pos:line="28" pos:column="17">strsplit<pos:position pos:line="28" pos:column="25"/></name><argument_list pos:line="28" pos:column="25">(<argument><expr><name pos:line="28" pos:column="26">buffer<pos:position pos:line="28" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="34">fields<pos:position pos:line="28" pos:column="40"/></name></expr></argument>, <argument><expr><call><name pos:line="28" pos:column="42">STATIC_ARRAY_SIZE<pos:position pos:line="28" pos:column="59"/></name><argument_list pos:line="28" pos:column="59">(<argument><expr><name pos:line="28" pos:column="60">fields<pos:position pos:line="28" pos:column="66"/></name></expr></argument>)<pos:position pos:line="28" pos:column="67"/></argument_list></call></expr></argument>)<pos:position pos:line="28" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="69"/></expr_stmt>

    <if pos:line="30" pos:column="5">if <condition pos:line="30" pos:column="8">(<expr><operator pos:line="30" pos:column="9">!<pos:position pos:line="30" pos:column="10"/></operator><name pos:line="30" pos:column="10">old_kernel<pos:position pos:line="30" pos:column="20"/></name></expr>)<pos:position pos:line="30" pos:column="21"/></condition><then pos:line="30" pos:column="21"> <block pos:line="30" pos:column="22">{
      <if pos:line="31" pos:column="7">if <condition pos:line="31" pos:column="10">(<expr><name pos:line="31" pos:column="11">numfields<pos:position pos:line="31" pos:column="20"/></name> <operator pos:line="31" pos:column="21">!=<pos:position pos:line="31" pos:column="23"/></operator> <literal type="number" pos:line="31" pos:column="24">2<pos:position pos:line="31" pos:column="25"/></literal></expr>)<pos:position pos:line="31" pos:column="26"/></condition><then pos:line="31" pos:column="26">
        <block type="pseudo"><continue pos:line="32" pos:column="9">continue;<pos:position pos:line="32" pos:column="18"/></continue></block></then></if>

      <if pos:line="34" pos:column="7">if <condition pos:line="34" pos:column="10">(<expr><call><name pos:line="34" pos:column="11">strcasecmp<pos:position pos:line="34" pos:column="21"/></name><argument_list pos:line="34" pos:column="21">(<argument><expr><literal type="string" pos:line="34" pos:column="22">"pswpin"<pos:position pos:line="34" pos:column="30"/></literal></expr></argument>, <argument><expr><name><name pos:line="34" pos:column="32">fields<pos:position pos:line="34" pos:column="38"/></name><index pos:line="34" pos:column="38">[<expr><literal type="number" pos:line="34" pos:column="39">0<pos:position pos:line="34" pos:column="40"/></literal></expr>]<pos:position pos:line="34" pos:column="41"/></index></name></expr></argument>)<pos:position pos:line="34" pos:column="42"/></argument_list></call> <operator pos:line="34" pos:column="43">==<pos:position pos:line="34" pos:column="45"/></operator> <literal type="number" pos:line="34" pos:column="46">0<pos:position pos:line="34" pos:column="47"/></literal></expr>)<pos:position pos:line="34" pos:column="48"/></condition><then pos:line="34" pos:column="48"> <block pos:line="34" pos:column="49">{
        <expr_stmt><expr><call><name pos:line="35" pos:column="9">strtoderive<pos:position pos:line="35" pos:column="20"/></name><argument_list pos:line="35" pos:column="20">(<argument><expr><name><name pos:line="35" pos:column="21">fields<pos:position pos:line="35" pos:column="27"/></name><index pos:line="35" pos:column="27">[<expr><literal type="number" pos:line="35" pos:column="28">1<pos:position pos:line="35" pos:column="29"/></literal></expr>]<pos:position pos:line="35" pos:column="30"/></index></name></expr></argument>, <argument><expr><operator pos:line="35" pos:column="32">&amp;<pos:position pos:line="35" pos:column="37"/></operator><name pos:line="35" pos:column="33">swap_in<pos:position pos:line="35" pos:column="40"/></name></expr></argument>)<pos:position pos:line="35" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="42"/></expr_stmt>
        <expr_stmt><expr><name pos:line="36" pos:column="9">have_data<pos:position pos:line="36" pos:column="18"/></name> <operator pos:line="36" pos:column="19">|=<pos:position pos:line="36" pos:column="21"/></operator> <literal type="number" pos:line="36" pos:column="22">0x01<pos:position pos:line="36" pos:column="26"/></literal></expr>;<pos:position pos:line="36" pos:column="27"/></expr_stmt>
      }<pos:position pos:line="37" pos:column="8"/></block></then> <elseif pos:line="37" pos:column="9">else <if pos:line="37" pos:column="14">if <condition pos:line="37" pos:column="17">(<expr><call><name pos:line="37" pos:column="18">strcasecmp<pos:position pos:line="37" pos:column="28"/></name><argument_list pos:line="37" pos:column="28">(<argument><expr><literal type="string" pos:line="37" pos:column="29">"pswpout"<pos:position pos:line="37" pos:column="38"/></literal></expr></argument>, <argument><expr><name><name pos:line="37" pos:column="40">fields<pos:position pos:line="37" pos:column="46"/></name><index pos:line="37" pos:column="46">[<expr><literal type="number" pos:line="37" pos:column="47">0<pos:position pos:line="37" pos:column="48"/></literal></expr>]<pos:position pos:line="37" pos:column="49"/></index></name></expr></argument>)<pos:position pos:line="37" pos:column="50"/></argument_list></call> <operator pos:line="37" pos:column="51">==<pos:position pos:line="37" pos:column="53"/></operator> <literal type="number" pos:line="37" pos:column="54">0<pos:position pos:line="37" pos:column="55"/></literal></expr>)<pos:position pos:line="37" pos:column="56"/></condition><then pos:line="37" pos:column="56"> <block pos:line="37" pos:column="57">{
        <expr_stmt><expr><call><name pos:line="38" pos:column="9">strtoderive<pos:position pos:line="38" pos:column="20"/></name><argument_list pos:line="38" pos:column="20">(<argument><expr><name><name pos:line="38" pos:column="21">fields<pos:position pos:line="38" pos:column="27"/></name><index pos:line="38" pos:column="27">[<expr><literal type="number" pos:line="38" pos:column="28">1<pos:position pos:line="38" pos:column="29"/></literal></expr>]<pos:position pos:line="38" pos:column="30"/></index></name></expr></argument>, <argument><expr><operator pos:line="38" pos:column="32">&amp;<pos:position pos:line="38" pos:column="37"/></operator><name pos:line="38" pos:column="33">swap_out<pos:position pos:line="38" pos:column="41"/></name></expr></argument>)<pos:position pos:line="38" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="43"/></expr_stmt>
        <expr_stmt><expr><name pos:line="39" pos:column="9">have_data<pos:position pos:line="39" pos:column="18"/></name> <operator pos:line="39" pos:column="19">|=<pos:position pos:line="39" pos:column="21"/></operator> <literal type="number" pos:line="39" pos:column="22">0x02<pos:position pos:line="39" pos:column="26"/></literal></expr>;<pos:position pos:line="39" pos:column="27"/></expr_stmt>
      }<pos:position pos:line="40" pos:column="8"/></block></then></if></elseif></if>
    }<pos:position pos:line="41" pos:column="6"/></block></then> <else pos:line="41" pos:column="7">else <comment type="block" pos:line="41" pos:column="12">/* if (old_kernel) */</comment>
    <block pos:line="42" pos:column="5">{
      <if pos:line="43" pos:column="7">if <condition pos:line="43" pos:column="10">(<expr><name pos:line="43" pos:column="11">numfields<pos:position pos:line="43" pos:column="20"/></name> <operator pos:line="43" pos:column="21">!=<pos:position pos:line="43" pos:column="23"/></operator> <literal type="number" pos:line="43" pos:column="24">3<pos:position pos:line="43" pos:column="25"/></literal></expr>)<pos:position pos:line="43" pos:column="26"/></condition><then pos:line="43" pos:column="26">
        <block type="pseudo"><continue pos:line="44" pos:column="9">continue;<pos:position pos:line="44" pos:column="18"/></continue></block></then></if>

      <if pos:line="46" pos:column="7">if <condition pos:line="46" pos:column="10">(<expr><call><name pos:line="46" pos:column="11">strcasecmp<pos:position pos:line="46" pos:column="21"/></name><argument_list pos:line="46" pos:column="21">(<argument><expr><literal type="string" pos:line="46" pos:column="22">"page"<pos:position pos:line="46" pos:column="28"/></literal></expr></argument>, <argument><expr><name><name pos:line="46" pos:column="30">fields<pos:position pos:line="46" pos:column="36"/></name><index pos:line="46" pos:column="36">[<expr><literal type="number" pos:line="46" pos:column="37">0<pos:position pos:line="46" pos:column="38"/></literal></expr>]<pos:position pos:line="46" pos:column="39"/></index></name></expr></argument>)<pos:position pos:line="46" pos:column="40"/></argument_list></call> <operator pos:line="46" pos:column="41">==<pos:position pos:line="46" pos:column="43"/></operator> <literal type="number" pos:line="46" pos:column="44">0<pos:position pos:line="46" pos:column="45"/></literal></expr>)<pos:position pos:line="46" pos:column="46"/></condition><then pos:line="46" pos:column="46"> <block pos:line="46" pos:column="47">{
        <expr_stmt><expr><call><name pos:line="47" pos:column="9">strtoderive<pos:position pos:line="47" pos:column="20"/></name><argument_list pos:line="47" pos:column="20">(<argument><expr><name><name pos:line="47" pos:column="21">fields<pos:position pos:line="47" pos:column="27"/></name><index pos:line="47" pos:column="27">[<expr><literal type="number" pos:line="47" pos:column="28">1<pos:position pos:line="47" pos:column="29"/></literal></expr>]<pos:position pos:line="47" pos:column="30"/></index></name></expr></argument>, <argument><expr><operator pos:line="47" pos:column="32">&amp;<pos:position pos:line="47" pos:column="37"/></operator><name pos:line="47" pos:column="33">swap_in<pos:position pos:line="47" pos:column="40"/></name></expr></argument>)<pos:position pos:line="47" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="42"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="48" pos:column="9">strtoderive<pos:position pos:line="48" pos:column="20"/></name><argument_list pos:line="48" pos:column="20">(<argument><expr><name><name pos:line="48" pos:column="21">fields<pos:position pos:line="48" pos:column="27"/></name><index pos:line="48" pos:column="27">[<expr><literal type="number" pos:line="48" pos:column="28">2<pos:position pos:line="48" pos:column="29"/></literal></expr>]<pos:position pos:line="48" pos:column="30"/></index></name></expr></argument>, <argument><expr><operator pos:line="48" pos:column="32">&amp;<pos:position pos:line="48" pos:column="37"/></operator><name pos:line="48" pos:column="33">swap_out<pos:position pos:line="48" pos:column="41"/></name></expr></argument>)<pos:position pos:line="48" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="43"/></expr_stmt>
      }<pos:position pos:line="49" pos:column="8"/></block></then></if>
    }<pos:position pos:line="50" pos:column="6"/></block></else></if>
  }<pos:position pos:line="51" pos:column="4"/></block></while> <comment type="block" pos:line="51" pos:column="5">/* while (fgets) */</comment>

  <expr_stmt><expr><call><name pos:line="53" pos:column="3">fclose<pos:position pos:line="53" pos:column="9"/></name><argument_list pos:line="53" pos:column="9">(<argument><expr><name pos:line="53" pos:column="10">fh<pos:position pos:line="53" pos:column="12"/></name></expr></argument>)<pos:position pos:line="53" pos:column="13"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="14"/></expr_stmt>

  <if pos:line="55" pos:column="3">if <condition pos:line="55" pos:column="6">(<expr><name pos:line="55" pos:column="7">have_data<pos:position pos:line="55" pos:column="16"/></name> <operator pos:line="55" pos:column="17">!=<pos:position pos:line="55" pos:column="19"/></operator> <literal type="number" pos:line="55" pos:column="20">0x03<pos:position pos:line="55" pos:column="24"/></literal></expr>)<pos:position pos:line="55" pos:column="25"/></condition><then pos:line="55" pos:column="25">
    <block type="pseudo"><return pos:line="56" pos:column="5">return <expr><operator pos:line="56" pos:column="12">(<pos:position pos:line="56" pos:column="13"/></operator><name pos:line="56" pos:column="13">ENOENT<pos:position pos:line="56" pos:column="19"/></name><operator pos:line="56" pos:column="19">)<pos:position pos:line="56" pos:column="20"/></operator></expr>;<pos:position pos:line="56" pos:column="21"/></return></block></then></if>

  <if pos:line="58" pos:column="3">if <condition pos:line="58" pos:column="6">(<expr><name pos:line="58" pos:column="7">report_bytes<pos:position pos:line="58" pos:column="19"/></name></expr>)<pos:position pos:line="58" pos:column="20"/></condition><then pos:line="58" pos:column="20"> <block pos:line="58" pos:column="21">{
    <expr_stmt><expr><name pos:line="59" pos:column="5">swap_in<pos:position pos:line="59" pos:column="12"/></name> <operator pos:line="59" pos:column="13">=<pos:position pos:line="59" pos:column="14"/></operator> <name pos:line="59" pos:column="15">swap_in<pos:position pos:line="59" pos:column="22"/></name> <operator pos:line="59" pos:column="23">*<pos:position pos:line="59" pos:column="24"/></operator> <name pos:line="59" pos:column="25">pagesize<pos:position pos:line="59" pos:column="33"/></name></expr>;<pos:position pos:line="59" pos:column="34"/></expr_stmt>
    <expr_stmt><expr><name pos:line="60" pos:column="5">swap_out<pos:position pos:line="60" pos:column="13"/></name> <operator pos:line="60" pos:column="14">=<pos:position pos:line="60" pos:column="15"/></operator> <name pos:line="60" pos:column="16">swap_out<pos:position pos:line="60" pos:column="24"/></name> <operator pos:line="60" pos:column="25">*<pos:position pos:line="60" pos:column="26"/></operator> <name pos:line="60" pos:column="27">pagesize<pos:position pos:line="60" pos:column="35"/></name></expr>;<pos:position pos:line="60" pos:column="36"/></expr_stmt>
  }<pos:position pos:line="61" pos:column="4"/></block></then></if>

  <expr_stmt><expr><call><name pos:line="63" pos:column="3">swap_submit_derive<pos:position pos:line="63" pos:column="21"/></name><argument_list pos:line="63" pos:column="21">(<argument><expr><literal type="string" pos:line="63" pos:column="22">"in"<pos:position pos:line="63" pos:column="26"/></literal></expr></argument>, <argument><expr><name pos:line="63" pos:column="28">swap_in<pos:position pos:line="63" pos:column="35"/></name></expr></argument>)<pos:position pos:line="63" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="37"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="64" pos:column="3">swap_submit_derive<pos:position pos:line="64" pos:column="21"/></name><argument_list pos:line="64" pos:column="21">(<argument><expr><literal type="string" pos:line="64" pos:column="22">"out"<pos:position pos:line="64" pos:column="27"/></literal></expr></argument>, <argument><expr><name pos:line="64" pos:column="29">swap_out<pos:position pos:line="64" pos:column="37"/></name></expr></argument>)<pos:position pos:line="64" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="39"/></expr_stmt>

  <return pos:line="66" pos:column="3">return <expr><operator pos:line="66" pos:column="10">(<pos:position pos:line="66" pos:column="11"/></operator><literal type="number" pos:line="66" pos:column="11">0<pos:position pos:line="66" pos:column="12"/></literal><operator pos:line="66" pos:column="12">)<pos:position pos:line="66" pos:column="13"/></operator></expr>;<pos:position pos:line="66" pos:column="14"/></return>
}<pos:position pos:line="67" pos:column="2"/></block></function></unit>
