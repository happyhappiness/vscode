<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_2686_collectd-5.7.1.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">meta_data_get_unsigned_int<pos:position pos:line="1" pos:column="31"/></name><parameter_list pos:line="1" pos:column="31">(<parameter><decl><type><name pos:line="1" pos:column="32">meta_data_t<pos:position pos:line="1" pos:column="43"/></name> <modifier pos:line="1" pos:column="44">*<pos:position pos:line="1" pos:column="45"/></modifier></type><name pos:line="1" pos:column="45">md<pos:position pos:line="1" pos:column="47"/></name></decl></parameter>, <comment type="block" pos:line="1" pos:column="49">/* {{{ */</comment>
                               <parameter><decl><type><specifier pos:line="2" pos:column="32">const<pos:position pos:line="2" pos:column="37"/></specifier> <name pos:line="2" pos:column="38">char<pos:position pos:line="2" pos:column="42"/></name> <modifier pos:line="2" pos:column="43">*<pos:position pos:line="2" pos:column="44"/></modifier></type><name pos:line="2" pos:column="44">key<pos:position pos:line="2" pos:column="47"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="49">uint64_t<pos:position pos:line="2" pos:column="57"/></name> <modifier pos:line="2" pos:column="58">*<pos:position pos:line="2" pos:column="59"/></modifier></type><name pos:line="2" pos:column="59">value<pos:position pos:line="2" pos:column="64"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="65"/></parameter_list> <block pos:line="2" pos:column="66">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">meta_entry_t<pos:position pos:line="3" pos:column="15"/></name> <modifier pos:line="3" pos:column="16">*<pos:position pos:line="3" pos:column="17"/></modifier></type><name pos:line="3" pos:column="17">e<pos:position pos:line="3" pos:column="18"/></name></decl>;<pos:position pos:line="3" pos:column="19"/></decl_stmt>

  <if pos:line="5" pos:column="3">if <condition pos:line="5" pos:column="6">(<expr><operator pos:line="5" pos:column="7">(<pos:position pos:line="5" pos:column="8"/></operator><name pos:line="5" pos:column="8">md<pos:position pos:line="5" pos:column="10"/></name> <operator pos:line="5" pos:column="11">==<pos:position pos:line="5" pos:column="13"/></operator> <name pos:line="5" pos:column="14">NULL<pos:position pos:line="5" pos:column="18"/></name><operator pos:line="5" pos:column="18">)<pos:position pos:line="5" pos:column="19"/></operator> <operator pos:line="5" pos:column="20">||<pos:position pos:line="5" pos:column="22"/></operator> <operator pos:line="5" pos:column="23">(<pos:position pos:line="5" pos:column="24"/></operator><name pos:line="5" pos:column="24">key<pos:position pos:line="5" pos:column="27"/></name> <operator pos:line="5" pos:column="28">==<pos:position pos:line="5" pos:column="30"/></operator> <name pos:line="5" pos:column="31">NULL<pos:position pos:line="5" pos:column="35"/></name><operator pos:line="5" pos:column="35">)<pos:position pos:line="5" pos:column="36"/></operator> <operator pos:line="5" pos:column="37">||<pos:position pos:line="5" pos:column="39"/></operator> <operator pos:line="5" pos:column="40">(<pos:position pos:line="5" pos:column="41"/></operator><name pos:line="5" pos:column="41">value<pos:position pos:line="5" pos:column="46"/></name> <operator pos:line="5" pos:column="47">==<pos:position pos:line="5" pos:column="49"/></operator> <name pos:line="5" pos:column="50">NULL<pos:position pos:line="5" pos:column="54"/></name><operator pos:line="5" pos:column="54">)<pos:position pos:line="5" pos:column="55"/></operator></expr>)<pos:position pos:line="5" pos:column="56"/></condition><then pos:line="5" pos:column="56">
    <block type="pseudo"><return pos:line="6" pos:column="5">return <expr><operator pos:line="6" pos:column="12">(<pos:position pos:line="6" pos:column="13"/></operator><operator pos:line="6" pos:column="13">-<pos:position pos:line="6" pos:column="14"/></operator><name pos:line="6" pos:column="14">EINVAL<pos:position pos:line="6" pos:column="20"/></name><operator pos:line="6" pos:column="20">)<pos:position pos:line="6" pos:column="21"/></operator></expr>;<pos:position pos:line="6" pos:column="22"/></return></block></then></if>

  <expr_stmt><expr><call><name pos:line="8" pos:column="3">pthread_mutex_lock<pos:position pos:line="8" pos:column="21"/></name><argument_list pos:line="8" pos:column="21">(<argument><expr><operator pos:line="8" pos:column="22">&amp;<pos:position pos:line="8" pos:column="27"/></operator><name><name pos:line="8" pos:column="23">md<pos:position pos:line="8" pos:column="25"/></name><operator pos:line="8" pos:column="25">-&gt;<pos:position pos:line="8" pos:column="30"/></operator><name pos:line="8" pos:column="27">lock<pos:position pos:line="8" pos:column="31"/></name></name></expr></argument>)<pos:position pos:line="8" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="33"/></expr_stmt>

  <expr_stmt><expr><name pos:line="10" pos:column="3">e<pos:position pos:line="10" pos:column="4"/></name> <operator pos:line="10" pos:column="5">=<pos:position pos:line="10" pos:column="6"/></operator> <call><name pos:line="10" pos:column="7">md_entry_lookup<pos:position pos:line="10" pos:column="22"/></name><argument_list pos:line="10" pos:column="22">(<argument><expr><name pos:line="10" pos:column="23">md<pos:position pos:line="10" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="27">key<pos:position pos:line="10" pos:column="30"/></name></expr></argument>)<pos:position pos:line="10" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="32"/></expr_stmt>
  <if pos:line="11" pos:column="3">if <condition pos:line="11" pos:column="6">(<expr><name pos:line="11" pos:column="7">e<pos:position pos:line="11" pos:column="8"/></name> <operator pos:line="11" pos:column="9">==<pos:position pos:line="11" pos:column="11"/></operator> <name pos:line="11" pos:column="12">NULL<pos:position pos:line="11" pos:column="16"/></name></expr>)<pos:position pos:line="11" pos:column="17"/></condition><then pos:line="11" pos:column="17"> <block pos:line="11" pos:column="18">{
    <expr_stmt><expr><call><name pos:line="12" pos:column="5">pthread_mutex_unlock<pos:position pos:line="12" pos:column="25"/></name><argument_list pos:line="12" pos:column="25">(<argument><expr><operator pos:line="12" pos:column="26">&amp;<pos:position pos:line="12" pos:column="31"/></operator><name><name pos:line="12" pos:column="27">md<pos:position pos:line="12" pos:column="29"/></name><operator pos:line="12" pos:column="29">-&gt;<pos:position pos:line="12" pos:column="34"/></operator><name pos:line="12" pos:column="31">lock<pos:position pos:line="12" pos:column="35"/></name></name></expr></argument>)<pos:position pos:line="12" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="37"/></expr_stmt>
    <return pos:line="13" pos:column="5">return <expr><operator pos:line="13" pos:column="12">(<pos:position pos:line="13" pos:column="13"/></operator><operator pos:line="13" pos:column="13">-<pos:position pos:line="13" pos:column="14"/></operator><name pos:line="13" pos:column="14">ENOENT<pos:position pos:line="13" pos:column="20"/></name><operator pos:line="13" pos:column="20">)<pos:position pos:line="13" pos:column="21"/></operator></expr>;<pos:position pos:line="13" pos:column="22"/></return>
  }<pos:position pos:line="14" pos:column="4"/></block></then></if>

  <if pos:line="16" pos:column="3">if <condition pos:line="16" pos:column="6">(<expr><name><name pos:line="16" pos:column="7">e<pos:position pos:line="16" pos:column="8"/></name><operator pos:line="16" pos:column="8">-&gt;<pos:position pos:line="16" pos:column="13"/></operator><name pos:line="16" pos:column="10">type<pos:position pos:line="16" pos:column="14"/></name></name> <operator pos:line="16" pos:column="15">!=<pos:position pos:line="16" pos:column="17"/></operator> <name pos:line="16" pos:column="18">MD_TYPE_UNSIGNED_INT<pos:position pos:line="16" pos:column="38"/></name></expr>)<pos:position pos:line="16" pos:column="39"/></condition><then pos:line="16" pos:column="39"> <block pos:line="16" pos:column="40">{
    <expr_stmt><expr><call><name pos:line="17" pos:column="5">ERROR<pos:position pos:line="17" pos:column="10"/></name><argument_list pos:line="17" pos:column="10">(<argument><expr><literal type="string" pos:line="17" pos:column="11">"meta_data_get_unsigned_int: Type mismatch for key `%s'"<pos:position pos:line="17" pos:column="67"/></literal></expr></argument>, <argument><expr><name><name pos:line="17" pos:column="69">e<pos:position pos:line="17" pos:column="70"/></name><operator pos:line="17" pos:column="70">-&gt;<pos:position pos:line="17" pos:column="75"/></operator><name pos:line="17" pos:column="72">key<pos:position pos:line="17" pos:column="75"/></name></name></expr></argument>)<pos:position pos:line="17" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="77"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="18" pos:column="5">pthread_mutex_unlock<pos:position pos:line="18" pos:column="25"/></name><argument_list pos:line="18" pos:column="25">(<argument><expr><operator pos:line="18" pos:column="26">&amp;<pos:position pos:line="18" pos:column="31"/></operator><name><name pos:line="18" pos:column="27">md<pos:position pos:line="18" pos:column="29"/></name><operator pos:line="18" pos:column="29">-&gt;<pos:position pos:line="18" pos:column="34"/></operator><name pos:line="18" pos:column="31">lock<pos:position pos:line="18" pos:column="35"/></name></name></expr></argument>)<pos:position pos:line="18" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="37"/></expr_stmt>
    <return pos:line="19" pos:column="5">return <expr><operator pos:line="19" pos:column="12">(<pos:position pos:line="19" pos:column="13"/></operator><operator pos:line="19" pos:column="13">-<pos:position pos:line="19" pos:column="14"/></operator><name pos:line="19" pos:column="14">ENOENT<pos:position pos:line="19" pos:column="20"/></name><operator pos:line="19" pos:column="20">)<pos:position pos:line="19" pos:column="21"/></operator></expr>;<pos:position pos:line="19" pos:column="22"/></return>
  }<pos:position pos:line="20" pos:column="4"/></block></then></if>

  <expr_stmt><expr><operator pos:line="22" pos:column="3">*<pos:position pos:line="22" pos:column="4"/></operator><name pos:line="22" pos:column="4">value<pos:position pos:line="22" pos:column="9"/></name> <operator pos:line="22" pos:column="10">=<pos:position pos:line="22" pos:column="11"/></operator> <name><name pos:line="22" pos:column="12">e<pos:position pos:line="22" pos:column="13"/></name><operator pos:line="22" pos:column="13">-&gt;<pos:position pos:line="22" pos:column="18"/></operator><name pos:line="22" pos:column="15">value<pos:position pos:line="22" pos:column="20"/></name><operator pos:line="22" pos:column="20">.<pos:position pos:line="22" pos:column="21"/></operator><name pos:line="22" pos:column="21">mv_unsigned_int<pos:position pos:line="22" pos:column="36"/></name></name></expr>;<pos:position pos:line="22" pos:column="37"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="24" pos:column="3">pthread_mutex_unlock<pos:position pos:line="24" pos:column="23"/></name><argument_list pos:line="24" pos:column="23">(<argument><expr><operator pos:line="24" pos:column="24">&amp;<pos:position pos:line="24" pos:column="29"/></operator><name><name pos:line="24" pos:column="25">md<pos:position pos:line="24" pos:column="27"/></name><operator pos:line="24" pos:column="27">-&gt;<pos:position pos:line="24" pos:column="32"/></operator><name pos:line="24" pos:column="29">lock<pos:position pos:line="24" pos:column="33"/></name></name></expr></argument>)<pos:position pos:line="24" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="35"/></expr_stmt>
  <return pos:line="25" pos:column="3">return <expr><operator pos:line="25" pos:column="10">(<pos:position pos:line="25" pos:column="11"/></operator><literal type="number" pos:line="25" pos:column="11">0<pos:position pos:line="25" pos:column="12"/></literal><operator pos:line="25" pos:column="12">)<pos:position pos:line="25" pos:column="13"/></operator></expr>;<pos:position pos:line="25" pos:column="14"/></return>
}<pos:position pos:line="26" pos:column="2"/></block></function></unit>
