<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_563_last_repos.cpp" pos:tabs="8"><decl_stmt><decl><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">char<pos:position pos:line="1" pos:column="12"/></name> <modifier pos:line="1" pos:column="13">*<pos:position pos:line="1" pos:column="14"/></modifier></type><name pos:line="1" pos:column="14">replace_str<pos:position pos:line="1" pos:column="25"/></name><argument_list pos:line="1" pos:column="25">(<argument><expr><specifier pos:line="1" pos:column="26">const<pos:position pos:line="1" pos:column="31"/></specifier> <name pos:line="1" pos:column="32">char<pos:position pos:line="1" pos:column="36"/></name> <operator pos:line="1" pos:column="37">*<pos:position pos:line="1" pos:column="38"/></operator><name pos:line="1" pos:column="38">str<pos:position pos:line="1" pos:column="41"/></name></expr></argument>, <argument><expr><specifier pos:line="1" pos:column="43">const<pos:position pos:line="1" pos:column="48"/></specifier> <name pos:line="1" pos:column="49">char<pos:position pos:line="1" pos:column="53"/></name> <operator pos:line="1" pos:column="54">*<pos:position pos:line="1" pos:column="55"/></operator><name pos:line="1" pos:column="55">old<pos:position pos:line="1" pos:column="58"/></name></expr></argument>, <comment type="block" pos:line="1" pos:column="60">/* {{{ */</comment>
                         <argument><expr><specifier pos:line="2" pos:column="26">const<pos:position pos:line="2" pos:column="31"/></specifier> <name pos:line="2" pos:column="32">char<pos:position pos:line="2" pos:column="36"/></name> <operator pos:line="2" pos:column="37">*<pos:position pos:line="2" pos:column="38"/></operator><operator pos:line="2" pos:column="38">new<pos:position pos:line="2" pos:column="41"/></operator></expr></argument>)<pos:position pos:line="2" pos:column="42"/></argument_list> <argument_list pos:line="2" pos:column="43">{
  <argument><expr><name pos:line="3" pos:column="3">char<pos:position pos:line="3" pos:column="7"/></name> <operator pos:line="3" pos:column="8">*<pos:position pos:line="3" pos:column="9"/></operator><name pos:line="3" pos:column="9">ret<pos:position pos:line="3" pos:column="12"/></name></expr></argument>, <argument><expr><operator pos:line="3" pos:column="14">*<pos:position pos:line="3" pos:column="15"/></operator><name pos:line="3" pos:column="15">r<pos:position pos:line="3" pos:column="16"/></name></expr></argument>;
  <argument><expr><specifier pos:line="4" pos:column="3">const<pos:position pos:line="4" pos:column="8"/></specifier> <name pos:line="4" pos:column="9">char<pos:position pos:line="4" pos:column="13"/></name> <operator pos:line="4" pos:column="14">*<pos:position pos:line="4" pos:column="15"/></operator><name pos:line="4" pos:column="15">p<pos:position pos:line="4" pos:column="16"/></name></expr></argument>, <argument><expr><operator pos:line="4" pos:column="18">*<pos:position pos:line="4" pos:column="19"/></operator><name pos:line="4" pos:column="19">q<pos:position pos:line="4" pos:column="20"/></name></expr></argument>;
  <argument><expr><name pos:line="5" pos:column="3">size_t<pos:position pos:line="5" pos:column="9"/></name> <name pos:line="5" pos:column="10">oldlen<pos:position pos:line="5" pos:column="16"/></name> <operator pos:line="5" pos:column="17">=<pos:position pos:line="5" pos:column="18"/></operator> <call><name pos:line="5" pos:column="19">strlen<pos:position pos:line="5" pos:column="25"/></name><argument_list pos:line="5" pos:column="25">(<argument><expr><name pos:line="5" pos:column="26">old<pos:position pos:line="5" pos:column="29"/></name></expr></argument>)<pos:position pos:line="5" pos:column="30"/></argument_list></call></expr></argument>;
  <argument><expr><name pos:line="6" pos:column="3">size_t<pos:position pos:line="6" pos:column="9"/></name> <name pos:line="6" pos:column="10">count<pos:position pos:line="6" pos:column="15"/></name> <operator pos:line="6" pos:column="16">=<pos:position pos:line="6" pos:column="17"/></operator> <call><name pos:line="6" pos:column="18">strlen<pos:position pos:line="6" pos:column="24"/></name><argument_list pos:line="6" pos:column="24">(<argument><expr><operator pos:line="6" pos:column="25">new<pos:position pos:line="6" pos:column="28"/></operator></expr></argument>)<pos:position pos:line="6" pos:column="29"/></argument_list></call></expr></argument>;
  <argument><expr><name pos:line="7" pos:column="3">size_t<pos:position pos:line="7" pos:column="9"/></name> <name pos:line="7" pos:column="10">retlen<pos:position pos:line="7" pos:column="16"/></name></expr></argument>;
  <argument><expr><name pos:line="8" pos:column="3">size_t<pos:position pos:line="8" pos:column="9"/></name> <name pos:line="8" pos:column="10">newlen<pos:position pos:line="8" pos:column="16"/></name> <operator pos:line="8" pos:column="17">=<pos:position pos:line="8" pos:column="18"/></operator> <name pos:line="8" pos:column="19">count<pos:position pos:line="8" pos:column="24"/></name></expr></argument>;
  <argument><expr><name pos:line="9" pos:column="3">int<pos:position pos:line="9" pos:column="6"/></name> <name pos:line="9" pos:column="7">samesize<pos:position pos:line="9" pos:column="15"/></name> <operator pos:line="9" pos:column="16">=<pos:position pos:line="9" pos:column="17"/></operator> <operator pos:line="9" pos:column="18">(<pos:position pos:line="9" pos:column="19"/></operator><name pos:line="9" pos:column="19">oldlen<pos:position pos:line="9" pos:column="25"/></name> <operator pos:line="9" pos:column="26">==<pos:position pos:line="9" pos:column="28"/></operator> <name pos:line="9" pos:column="29">newlen<pos:position pos:line="9" pos:column="35"/></name><operator pos:line="9" pos:column="35">)<pos:position pos:line="9" pos:column="36"/></operator></expr></argument>;

  if <argument><expr><operator pos:line="11" pos:column="6">(<pos:position pos:line="11" pos:column="7"/></operator><operator pos:line="11" pos:column="7">!<pos:position pos:line="11" pos:column="8"/></operator><name pos:line="11" pos:column="8">samesize<pos:position pos:line="11" pos:column="16"/></name><operator pos:line="11" pos:column="16">)<pos:position pos:line="11" pos:column="17"/></operator> <block pos:line="11" pos:column="18">{
    <for pos:line="12" pos:column="5">for <control pos:line="12" pos:column="9">(<init><expr><name pos:line="12" pos:column="10">count<pos:position pos:line="12" pos:column="15"/></name> <operator pos:line="12" pos:column="16">=<pos:position pos:line="12" pos:column="17"/></operator> <literal type="number" pos:line="12" pos:column="18">0<pos:position pos:line="12" pos:column="19"/></literal></expr><operator pos:line="12" pos:column="19">,<pos:position pos:line="12" pos:column="20"/></operator> <expr><name pos:line="12" pos:column="21">p<pos:position pos:line="12" pos:column="22"/></name> <operator pos:line="12" pos:column="23">=<pos:position pos:line="12" pos:column="24"/></operator> <name pos:line="12" pos:column="25">str<pos:position pos:line="12" pos:column="28"/></name></expr>;<pos:position pos:line="12" pos:column="29"/></init> <condition><expr><operator pos:line="12" pos:column="30">(<pos:position pos:line="12" pos:column="31"/></operator><name pos:line="12" pos:column="31">q<pos:position pos:line="12" pos:column="32"/></name> <operator pos:line="12" pos:column="33">=<pos:position pos:line="12" pos:column="34"/></operator> <call><name pos:line="12" pos:column="35">strstr<pos:position pos:line="12" pos:column="41"/></name><argument_list pos:line="12" pos:column="41">(<argument><expr><name pos:line="12" pos:column="42">p<pos:position pos:line="12" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="45">old<pos:position pos:line="12" pos:column="48"/></name></expr></argument>)<pos:position pos:line="12" pos:column="49"/></argument_list></call><operator pos:line="12" pos:column="49">)<pos:position pos:line="12" pos:column="50"/></operator> <operator pos:line="12" pos:column="51">!=<pos:position pos:line="12" pos:column="53"/></operator> <name pos:line="12" pos:column="54">NULL<pos:position pos:line="12" pos:column="58"/></name></expr>;<pos:position pos:line="12" pos:column="59"/></condition> <incr><expr><name pos:line="12" pos:column="60">p<pos:position pos:line="12" pos:column="61"/></name> <operator pos:line="12" pos:column="62">=<pos:position pos:line="12" pos:column="63"/></operator> <name pos:line="12" pos:column="64">q<pos:position pos:line="12" pos:column="65"/></name> <operator pos:line="12" pos:column="66">+<pos:position pos:line="12" pos:column="67"/></operator> <name pos:line="12" pos:column="68">oldlen<pos:position pos:line="12" pos:column="74"/></name></expr></incr>)<pos:position pos:line="12" pos:column="75"/></control>
      <block type="pseudo"><expr_stmt><expr><name pos:line="13" pos:column="7">count<pos:position pos:line="13" pos:column="12"/></name><operator pos:line="13" pos:column="12">++<pos:position pos:line="13" pos:column="14"/></operator></expr>;<pos:position pos:line="13" pos:column="15"/></expr_stmt></block></for>
    <comment type="block" pos:line="14" pos:column="5">/* This is undefined if p - str &gt; PTRDIFF_MAX */</comment>
    <name pos:line="15" pos:column="5">retlen<pos:position pos:line="15" pos:column="11"/></name> <operator pos:line="15" pos:column="12">=<pos:position pos:line="15" pos:column="13"/></operator> <name pos:line="15" pos:column="14">p<pos:position pos:line="15" pos:column="15"/></name> <operator pos:line="15" pos:column="16">-<pos:position pos:line="15" pos:column="17"/></operator> <name pos:line="15" pos:column="18">str<pos:position pos:line="15" pos:column="21"/></name> <operator pos:line="15" pos:column="22">+<pos:position pos:line="15" pos:column="23"/></operator> <call><name pos:line="15" pos:column="24">strlen<pos:position pos:line="15" pos:column="30"/></name><argument_list pos:line="15" pos:column="30">(<argument><expr><name pos:line="15" pos:column="31">p<pos:position pos:line="15" pos:column="32"/></name></expr></argument>)<pos:position pos:line="15" pos:column="33"/></argument_list></call> <operator pos:line="15" pos:column="34">+<pos:position pos:line="15" pos:column="35"/></operator> <name pos:line="15" pos:column="36">count<pos:position pos:line="15" pos:column="41"/></name> <operator pos:line="15" pos:column="42">*<pos:position pos:line="15" pos:column="43"/></operator> <operator pos:line="15" pos:column="44">(<pos:position pos:line="15" pos:column="45"/></operator><name pos:line="15" pos:column="45">newlen<pos:position pos:line="15" pos:column="51"/></name> <operator pos:line="15" pos:column="52">-<pos:position pos:line="15" pos:column="53"/></operator> <name pos:line="15" pos:column="54">oldlen<pos:position pos:line="15" pos:column="60"/></name><operator pos:line="15" pos:column="60">)<pos:position pos:line="15" pos:column="61"/></operator></block></expr></argument>;
  }<pos:position pos:line="16" pos:column="4"/></argument_list> else
    <name pos:line="17" pos:column="5">retlen<pos:position pos:line="17" pos:column="11"/></name> <init pos:line="17" pos:column="12">= <expr><call><name pos:line="17" pos:column="14">strlen<pos:position pos:line="17" pos:column="20"/></name><argument_list pos:line="17" pos:column="20">(<argument><expr><name pos:line="17" pos:column="21">str<pos:position pos:line="17" pos:column="24"/></name></expr></argument>)<pos:position pos:line="17" pos:column="25"/></argument_list></call></expr></init></decl>;<pos:position pos:line="17" pos:column="26"/></decl_stmt>

  <expr_stmt><expr><name pos:line="19" pos:column="3">ret<pos:position pos:line="19" pos:column="6"/></name> <operator pos:line="19" pos:column="7">=<pos:position pos:line="19" pos:column="8"/></operator> <call><name pos:line="19" pos:column="9">calloc<pos:position pos:line="19" pos:column="15"/></name><argument_list pos:line="19" pos:column="15">(<argument><expr><literal type="number" pos:line="19" pos:column="16">1<pos:position pos:line="19" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="19" pos:column="19">retlen<pos:position pos:line="19" pos:column="25"/></name> <operator pos:line="19" pos:column="26">+<pos:position pos:line="19" pos:column="27"/></operator> <literal type="number" pos:line="19" pos:column="28">1<pos:position pos:line="19" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="31"/></expr_stmt>
  <if pos:line="20" pos:column="3">if <condition pos:line="20" pos:column="6">(<expr><name pos:line="20" pos:column="7">ret<pos:position pos:line="20" pos:column="10"/></name> <operator pos:line="20" pos:column="11">==<pos:position pos:line="20" pos:column="13"/></operator> <name pos:line="20" pos:column="14">NULL<pos:position pos:line="20" pos:column="18"/></name></expr>)<pos:position pos:line="20" pos:column="19"/></condition><then pos:line="20" pos:column="19">
    <block type="pseudo"><return pos:line="21" pos:column="5">return <expr><name pos:line="21" pos:column="12">NULL<pos:position pos:line="21" pos:column="16"/></name></expr>;<pos:position pos:line="21" pos:column="17"/></return></block></then></if>
  <comment type="line" pos:line="22" pos:column="3">// added to original: not optimized, but keeps valgrind happy.</comment>

  <expr_stmt><expr><name pos:line="24" pos:column="3">r<pos:position pos:line="24" pos:column="4"/></name> <operator pos:line="24" pos:column="5">=<pos:position pos:line="24" pos:column="6"/></operator> <name pos:line="24" pos:column="7">ret<pos:position pos:line="24" pos:column="10"/></name></expr>;<pos:position pos:line="24" pos:column="11"/></expr_stmt>
  <expr_stmt><expr><name pos:line="25" pos:column="3">p<pos:position pos:line="25" pos:column="4"/></name> <operator pos:line="25" pos:column="5">=<pos:position pos:line="25" pos:column="6"/></operator> <name pos:line="25" pos:column="7">str<pos:position pos:line="25" pos:column="10"/></name></expr>;<pos:position pos:line="25" pos:column="11"/></expr_stmt>
  <while pos:line="26" pos:column="3">while <condition pos:line="26" pos:column="9">(<expr><literal type="number" pos:line="26" pos:column="10">1<pos:position pos:line="26" pos:column="11"/></literal></expr>)<pos:position pos:line="26" pos:column="12"/></condition> <block pos:line="26" pos:column="13">{
    <comment type="block" pos:line="27" pos:column="5">/* If the old and new strings are different lengths - in other
     * words we have already iterated through with strstr above,
     * and thus we know how many times we need to call it - then we
     * can avoid the final (potentially lengthy) call to strstr,
     * which we already know is going to return NULL, by
     * decrementing and checking count.
     */</comment>
    <if pos:line="34" pos:column="5">if <condition pos:line="34" pos:column="8">(<expr><operator pos:line="34" pos:column="9">!<pos:position pos:line="34" pos:column="10"/></operator><name pos:line="34" pos:column="10">samesize<pos:position pos:line="34" pos:column="18"/></name> <operator pos:line="34" pos:column="19">&amp;&amp;<pos:position pos:line="34" pos:column="29"/></operator> <operator pos:line="34" pos:column="22">!<pos:position pos:line="34" pos:column="23"/></operator><name pos:line="34" pos:column="23">count<pos:position pos:line="34" pos:column="28"/></name><operator pos:line="34" pos:column="28">--<pos:position pos:line="34" pos:column="30"/></operator></expr>)<pos:position pos:line="34" pos:column="31"/></condition><then pos:line="34" pos:column="31">
      <block type="pseudo"><break pos:line="35" pos:column="7">break;<pos:position pos:line="35" pos:column="13"/></break></block></then></if>
    <comment type="block" pos:line="36" pos:column="5">/* Otherwise i.e. when the old and new strings are the same
     * length, and we don't know how many times to call strstr,
     * we must check for a NULL return here (we check it in any
     * event, to avoid further conditions, and because there's
     * no harm done with the check even when the old and new
     * strings are different lengths).
     */</comment>
    <if pos:line="43" pos:column="5">if <condition pos:line="43" pos:column="8">(<expr><operator pos:line="43" pos:column="9">(<pos:position pos:line="43" pos:column="10"/></operator><name pos:line="43" pos:column="10">q<pos:position pos:line="43" pos:column="11"/></name> <operator pos:line="43" pos:column="12">=<pos:position pos:line="43" pos:column="13"/></operator> <call><name pos:line="43" pos:column="14">strstr<pos:position pos:line="43" pos:column="20"/></name><argument_list pos:line="43" pos:column="20">(<argument><expr><name pos:line="43" pos:column="21">p<pos:position pos:line="43" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="24">old<pos:position pos:line="43" pos:column="27"/></name></expr></argument>)<pos:position pos:line="43" pos:column="28"/></argument_list></call><operator pos:line="43" pos:column="28">)<pos:position pos:line="43" pos:column="29"/></operator> <operator pos:line="43" pos:column="30">==<pos:position pos:line="43" pos:column="32"/></operator> <name pos:line="43" pos:column="33">NULL<pos:position pos:line="43" pos:column="37"/></name></expr>)<pos:position pos:line="43" pos:column="38"/></condition><then pos:line="43" pos:column="38">
      <block type="pseudo"><break pos:line="44" pos:column="7">break;<pos:position pos:line="44" pos:column="13"/></break></block></then></if>
    <comment type="block" pos:line="45" pos:column="5">/* This is undefined if q - p &gt; PTRDIFF_MAX */</comment>
    <decl_stmt><decl><type><name pos:line="46" pos:column="5">ptrdiff_t<pos:position pos:line="46" pos:column="14"/></name></type> <name pos:line="46" pos:column="15">l<pos:position pos:line="46" pos:column="16"/></name> <init pos:line="46" pos:column="17">= <expr><name pos:line="46" pos:column="19">q<pos:position pos:line="46" pos:column="20"/></name> <operator pos:line="46" pos:column="21">-<pos:position pos:line="46" pos:column="22"/></operator> <name pos:line="46" pos:column="23">p<pos:position pos:line="46" pos:column="24"/></name></expr></init></decl>;<pos:position pos:line="46" pos:column="25"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="47" pos:column="5">memcpy<pos:position pos:line="47" pos:column="11"/></name><argument_list pos:line="47" pos:column="11">(<argument><expr><name pos:line="47" pos:column="12">r<pos:position pos:line="47" pos:column="13"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="15">p<pos:position pos:line="47" pos:column="16"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="18">l<pos:position pos:line="47" pos:column="19"/></name></expr></argument>)<pos:position pos:line="47" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="21"/></expr_stmt>
    <expr_stmt><expr><name pos:line="48" pos:column="5">r<pos:position pos:line="48" pos:column="6"/></name> <operator pos:line="48" pos:column="7">+=<pos:position pos:line="48" pos:column="9"/></operator> <name pos:line="48" pos:column="10">l<pos:position pos:line="48" pos:column="11"/></name></expr>;<pos:position pos:line="48" pos:column="12"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="49" pos:column="5">memcpy<pos:position pos:line="49" pos:column="11"/></name><argument_list pos:line="49" pos:column="11">(<argument><expr><name pos:line="49" pos:column="12">r<pos:position pos:line="49" pos:column="13"/></name></expr></argument>, <argument><expr><operator pos:line="49" pos:column="15">new<pos:position pos:line="49" pos:column="18"/></operator></expr></argument>, <argument><expr><name pos:line="49" pos:column="20">newlen<pos:position pos:line="49" pos:column="26"/></name></expr></argument>)<pos:position pos:line="49" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="28"/></expr_stmt>
    <expr_stmt><expr><name pos:line="50" pos:column="5">r<pos:position pos:line="50" pos:column="6"/></name> <operator pos:line="50" pos:column="7">+=<pos:position pos:line="50" pos:column="9"/></operator> <name pos:line="50" pos:column="10">newlen<pos:position pos:line="50" pos:column="16"/></name></expr>;<pos:position pos:line="50" pos:column="17"/></expr_stmt>
    <expr_stmt><expr><name pos:line="51" pos:column="5">p<pos:position pos:line="51" pos:column="6"/></name> <operator pos:line="51" pos:column="7">=<pos:position pos:line="51" pos:column="8"/></operator> <name pos:line="51" pos:column="9">q<pos:position pos:line="51" pos:column="10"/></name> <operator pos:line="51" pos:column="11">+<pos:position pos:line="51" pos:column="12"/></operator> <name pos:line="51" pos:column="13">oldlen<pos:position pos:line="51" pos:column="19"/></name></expr>;<pos:position pos:line="51" pos:column="20"/></expr_stmt>
  }<pos:position pos:line="52" pos:column="4"/></block></while>
  <expr_stmt><expr><call><name pos:line="53" pos:column="3">strncpy<pos:position pos:line="53" pos:column="10"/></name><argument_list pos:line="53" pos:column="10">(<argument><expr><name pos:line="53" pos:column="11">r<pos:position pos:line="53" pos:column="12"/></name></expr></argument>, <argument><expr><name pos:line="53" pos:column="14">p<pos:position pos:line="53" pos:column="15"/></name></expr></argument>, <argument><expr><call><name pos:line="53" pos:column="17">strlen<pos:position pos:line="53" pos:column="23"/></name><argument_list pos:line="53" pos:column="23">(<argument><expr><name pos:line="53" pos:column="24">p<pos:position pos:line="53" pos:column="25"/></name></expr></argument>)<pos:position pos:line="53" pos:column="26"/></argument_list></call></expr></argument>)<pos:position pos:line="53" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="28"/></expr_stmt>

  <return pos:line="55" pos:column="3">return <expr><name pos:line="55" pos:column="10">ret<pos:position pos:line="55" pos:column="13"/></name></expr>;<pos:position pos:line="55" pos:column="14"/></return>
}</unit>
