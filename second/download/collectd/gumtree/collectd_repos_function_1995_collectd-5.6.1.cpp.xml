<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1995_collectd-5.6.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">PyObject<pos:position pos:line="1" pos:column="16"/></name> <modifier pos:line="1" pos:column="17">*<pos:position pos:line="1" pos:column="18"/></modifier></type><name pos:line="1" pos:column="18">cpy_unregister_generic<pos:position pos:line="1" pos:column="40"/></name><parameter_list pos:line="1" pos:column="40">(<parameter><decl><type><name pos:line="1" pos:column="41">cpy_callback_t<pos:position pos:line="1" pos:column="55"/></name> <modifier pos:line="1" pos:column="56">*<pos:position pos:line="1" pos:column="57"/></modifier><modifier pos:line="1" pos:column="57">*<pos:position pos:line="1" pos:column="58"/></modifier></type><name pos:line="1" pos:column="58">list_head<pos:position pos:line="1" pos:column="67"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="69">PyObject<pos:position pos:line="1" pos:column="77"/></name> <modifier pos:line="1" pos:column="78">*<pos:position pos:line="1" pos:column="79"/></modifier></type><name pos:line="1" pos:column="79">arg<pos:position pos:line="1" pos:column="82"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="84">const<pos:position pos:line="1" pos:column="89"/></specifier> <name pos:line="1" pos:column="90">char<pos:position pos:line="1" pos:column="94"/></name> <modifier pos:line="1" pos:column="95">*<pos:position pos:line="1" pos:column="96"/></modifier></type><name pos:line="1" pos:column="96">desc<pos:position pos:line="1" pos:column="100"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="101"/></parameter_list> <block pos:line="1" pos:column="102">{
	<decl_stmt><decl><type><name pos:line="2" pos:column="9">char<pos:position pos:line="2" pos:column="13"/></name></type> <name><name pos:line="2" pos:column="14">buf<pos:position pos:line="2" pos:column="17"/></name><index pos:line="2" pos:column="17">[<expr><literal type="number" pos:line="2" pos:column="18">512<pos:position pos:line="2" pos:column="21"/></literal></expr>]<pos:position pos:line="2" pos:column="22"/></index></name></decl>;<pos:position pos:line="2" pos:column="23"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="3" pos:column="9">const<pos:position pos:line="3" pos:column="14"/></specifier> <name pos:line="3" pos:column="15">char<pos:position pos:line="3" pos:column="19"/></name> <modifier pos:line="3" pos:column="20">*<pos:position pos:line="3" pos:column="21"/></modifier></type><name pos:line="3" pos:column="21">name<pos:position pos:line="3" pos:column="25"/></name></decl>;<pos:position pos:line="3" pos:column="26"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">cpy_callback_t<pos:position pos:line="4" pos:column="23"/></name> <modifier pos:line="4" pos:column="24">*<pos:position pos:line="4" pos:column="25"/></modifier></type><name pos:line="4" pos:column="25">prev<pos:position pos:line="4" pos:column="29"/></name> <init pos:line="4" pos:column="30">= <expr><name pos:line="4" pos:column="32">NULL<pos:position pos:line="4" pos:column="36"/></name></expr></init></decl>, <modifier pos:line="4" pos:column="38">*<pos:position pos:line="4" pos:column="39"/></modifier><decl><type ref="prev"/><name pos:line="4" pos:column="39">tmp<pos:position pos:line="4" pos:column="42"/></name></decl>;<pos:position pos:line="4" pos:column="43"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="6" pos:column="9">Py_INCREF<pos:position pos:line="6" pos:column="18"/></name><argument_list pos:line="6" pos:column="18">(<argument><expr><name pos:line="6" pos:column="19">arg<pos:position pos:line="6" pos:column="22"/></name></expr></argument>)<pos:position pos:line="6" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="24"/></expr_stmt>
	<expr_stmt><expr><name pos:line="7" pos:column="9">name<pos:position pos:line="7" pos:column="13"/></name> <operator pos:line="7" pos:column="14">=<pos:position pos:line="7" pos:column="15"/></operator> <call><name pos:line="7" pos:column="16">cpy_unicode_or_bytes_to_string<pos:position pos:line="7" pos:column="46"/></name><argument_list pos:line="7" pos:column="46">(<argument><expr><operator pos:line="7" pos:column="47">&amp;<pos:position pos:line="7" pos:column="52"/></operator><name pos:line="7" pos:column="48">arg<pos:position pos:line="7" pos:column="51"/></name></expr></argument>)<pos:position pos:line="7" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="53"/></expr_stmt>
	<if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><name pos:line="8" pos:column="13">name<pos:position pos:line="8" pos:column="17"/></name> <operator pos:line="8" pos:column="18">==<pos:position pos:line="8" pos:column="20"/></operator> <name pos:line="8" pos:column="21">NULL<pos:position pos:line="8" pos:column="25"/></name></expr>)<pos:position pos:line="8" pos:column="26"/></condition><then pos:line="8" pos:column="26"> <block pos:line="8" pos:column="27">{
		<expr_stmt><expr><call><name pos:line="9" pos:column="17">PyErr_Clear<pos:position pos:line="9" pos:column="28"/></name><argument_list pos:line="9" pos:column="28">()<pos:position pos:line="9" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="31"/></expr_stmt>
		<if pos:line="10" pos:column="17">if <condition pos:line="10" pos:column="20">(<expr><operator pos:line="10" pos:column="21">!<pos:position pos:line="10" pos:column="22"/></operator><call><name pos:line="10" pos:column="22">PyCallable_Check<pos:position pos:line="10" pos:column="38"/></name><argument_list pos:line="10" pos:column="38">(<argument><expr><name pos:line="10" pos:column="39">arg<pos:position pos:line="10" pos:column="42"/></name></expr></argument>)<pos:position pos:line="10" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="10" pos:column="44"/></condition><then pos:line="10" pos:column="44"> <block pos:line="10" pos:column="45">{
			<expr_stmt><expr><call><name pos:line="11" pos:column="25">PyErr_SetString<pos:position pos:line="11" pos:column="40"/></name><argument_list pos:line="11" pos:column="40">(<argument><expr><name pos:line="11" pos:column="41">PyExc_TypeError<pos:position pos:line="11" pos:column="56"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="11" pos:column="58">"This function needs a string or a callable object as its only parameter."<pos:position pos:line="11" pos:column="132"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="133"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="134"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="12" pos:column="25">Py_DECREF<pos:position pos:line="12" pos:column="34"/></name><argument_list pos:line="12" pos:column="34">(<argument><expr><name pos:line="12" pos:column="35">arg<pos:position pos:line="12" pos:column="38"/></name></expr></argument>)<pos:position pos:line="12" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="40"/></expr_stmt>
			<return pos:line="13" pos:column="25">return <expr><name pos:line="13" pos:column="32">NULL<pos:position pos:line="13" pos:column="36"/></name></expr>;<pos:position pos:line="13" pos:column="37"/></return>
		}<pos:position pos:line="14" pos:column="18"/></block></then></if>
		<expr_stmt><expr><call><name pos:line="15" pos:column="17">cpy_build_name<pos:position pos:line="15" pos:column="31"/></name><argument_list pos:line="15" pos:column="31">(<argument><expr><name pos:line="15" pos:column="32">buf<pos:position pos:line="15" pos:column="35"/></name></expr></argument>, <argument><expr><sizeof pos:line="15" pos:column="37">sizeof<argument_list pos:line="15" pos:column="43">(<argument><expr><name pos:line="15" pos:column="44">buf<pos:position pos:line="15" pos:column="47"/></name></expr></argument>)<pos:position pos:line="15" pos:column="48"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="15" pos:column="50">arg<pos:position pos:line="15" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="55">NULL<pos:position pos:line="15" pos:column="59"/></name></expr></argument>)<pos:position pos:line="15" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="61"/></expr_stmt>
		<expr_stmt><expr><name pos:line="16" pos:column="17">name<pos:position pos:line="16" pos:column="21"/></name> <operator pos:line="16" pos:column="22">=<pos:position pos:line="16" pos:column="23"/></operator> <name pos:line="16" pos:column="24">buf<pos:position pos:line="16" pos:column="27"/></name></expr>;<pos:position pos:line="16" pos:column="28"/></expr_stmt>
	}<pos:position pos:line="17" pos:column="10"/></block></then></if>
	<for pos:line="18" pos:column="9">for <control pos:line="18" pos:column="13">(<init><expr><name pos:line="18" pos:column="14">tmp<pos:position pos:line="18" pos:column="17"/></name> <operator pos:line="18" pos:column="18">=<pos:position pos:line="18" pos:column="19"/></operator> <operator pos:line="18" pos:column="20">*<pos:position pos:line="18" pos:column="21"/></operator><name pos:line="18" pos:column="21">list_head<pos:position pos:line="18" pos:column="30"/></name></expr>;<pos:position pos:line="18" pos:column="31"/></init> <condition><expr><name pos:line="18" pos:column="32">tmp<pos:position pos:line="18" pos:column="35"/></name></expr>;<pos:position pos:line="18" pos:column="36"/></condition> <incr><expr><name pos:line="18" pos:column="37">prev<pos:position pos:line="18" pos:column="41"/></name> <operator pos:line="18" pos:column="42">=<pos:position pos:line="18" pos:column="43"/></operator> <name pos:line="18" pos:column="44">tmp<pos:position pos:line="18" pos:column="47"/></name></expr><operator pos:line="18" pos:column="47">,<pos:position pos:line="18" pos:column="48"/></operator> <expr><name pos:line="18" pos:column="49">tmp<pos:position pos:line="18" pos:column="52"/></name> <operator pos:line="18" pos:column="53">=<pos:position pos:line="18" pos:column="54"/></operator> <name><name pos:line="18" pos:column="55">tmp<pos:position pos:line="18" pos:column="58"/></name><operator pos:line="18" pos:column="58">-&gt;<pos:position pos:line="18" pos:column="63"/></operator><name pos:line="18" pos:column="60">next<pos:position pos:line="18" pos:column="64"/></name></name></expr></incr>)<pos:position pos:line="18" pos:column="65"/></control>
		<block type="pseudo"><if pos:line="19" pos:column="17">if <condition pos:line="19" pos:column="20">(<expr><call><name pos:line="19" pos:column="21">strcmp<pos:position pos:line="19" pos:column="27"/></name><argument_list pos:line="19" pos:column="27">(<argument><expr><name pos:line="19" pos:column="28">name<pos:position pos:line="19" pos:column="32"/></name></expr></argument>, <argument><expr><name><name pos:line="19" pos:column="34">tmp<pos:position pos:line="19" pos:column="37"/></name><operator pos:line="19" pos:column="37">-&gt;<pos:position pos:line="19" pos:column="42"/></operator><name pos:line="19" pos:column="39">name<pos:position pos:line="19" pos:column="43"/></name></name></expr></argument>)<pos:position pos:line="19" pos:column="44"/></argument_list></call> <operator pos:line="19" pos:column="45">==<pos:position pos:line="19" pos:column="47"/></operator> <literal type="number" pos:line="19" pos:column="48">0<pos:position pos:line="19" pos:column="49"/></literal></expr>)<pos:position pos:line="19" pos:column="50"/></condition><then pos:line="19" pos:column="50">
			<block type="pseudo"><break pos:line="20" pos:column="25">break;<pos:position pos:line="20" pos:column="31"/></break></block></then></if></block></for>

	<expr_stmt><expr><call><name pos:line="22" pos:column="9">Py_DECREF<pos:position pos:line="22" pos:column="18"/></name><argument_list pos:line="22" pos:column="18">(<argument><expr><name pos:line="22" pos:column="19">arg<pos:position pos:line="22" pos:column="22"/></name></expr></argument>)<pos:position pos:line="22" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="24"/></expr_stmt>
	<if pos:line="23" pos:column="9">if <condition pos:line="23" pos:column="12">(<expr><name pos:line="23" pos:column="13">tmp<pos:position pos:line="23" pos:column="16"/></name> <operator pos:line="23" pos:column="17">==<pos:position pos:line="23" pos:column="19"/></operator> <name pos:line="23" pos:column="20">NULL<pos:position pos:line="23" pos:column="24"/></name></expr>)<pos:position pos:line="23" pos:column="25"/></condition><then pos:line="23" pos:column="25"> <block pos:line="23" pos:column="26">{
		<expr_stmt><expr><call><name pos:line="24" pos:column="17">PyErr_Format<pos:position pos:line="24" pos:column="29"/></name><argument_list pos:line="24" pos:column="29">(<argument><expr><name pos:line="24" pos:column="30">PyExc_RuntimeError<pos:position pos:line="24" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="24" pos:column="50">"Unable to unregister %s callback '%s'."<pos:position pos:line="24" pos:column="90"/></literal></expr></argument>, <argument><expr><name pos:line="24" pos:column="92">desc<pos:position pos:line="24" pos:column="96"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="98">name<pos:position pos:line="24" pos:column="102"/></name></expr></argument>)<pos:position pos:line="24" pos:column="103"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="104"/></expr_stmt>
		<return pos:line="25" pos:column="17">return <expr><name pos:line="25" pos:column="24">NULL<pos:position pos:line="25" pos:column="28"/></name></expr>;<pos:position pos:line="25" pos:column="29"/></return>
	}<pos:position pos:line="26" pos:column="10"/></block></then></if>
	<comment type="block" pos:line="27" pos:column="9">/* Yes, this is actually safe. To call this function the caller has to
	 * hold the GIL. Well, safe as long as there is only one GIL anyway ... */</comment>
	<if pos:line="29" pos:column="9">if <condition pos:line="29" pos:column="12">(<expr><name pos:line="29" pos:column="13">prev<pos:position pos:line="29" pos:column="17"/></name> <operator pos:line="29" pos:column="18">==<pos:position pos:line="29" pos:column="20"/></operator> <name pos:line="29" pos:column="21">NULL<pos:position pos:line="29" pos:column="25"/></name></expr>)<pos:position pos:line="29" pos:column="26"/></condition><then pos:line="29" pos:column="26">
		<block type="pseudo"><expr_stmt><expr><operator pos:line="30" pos:column="17">*<pos:position pos:line="30" pos:column="18"/></operator><name pos:line="30" pos:column="18">list_head<pos:position pos:line="30" pos:column="27"/></name> <operator pos:line="30" pos:column="28">=<pos:position pos:line="30" pos:column="29"/></operator> <name><name pos:line="30" pos:column="30">tmp<pos:position pos:line="30" pos:column="33"/></name><operator pos:line="30" pos:column="33">-&gt;<pos:position pos:line="30" pos:column="38"/></operator><name pos:line="30" pos:column="35">next<pos:position pos:line="30" pos:column="39"/></name></name></expr>;<pos:position pos:line="30" pos:column="40"/></expr_stmt></block></then>
	<else pos:line="31" pos:column="9">else
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="32" pos:column="17">prev<pos:position pos:line="32" pos:column="21"/></name><operator pos:line="32" pos:column="21">-&gt;<pos:position pos:line="32" pos:column="26"/></operator><name pos:line="32" pos:column="23">next<pos:position pos:line="32" pos:column="27"/></name></name> <operator pos:line="32" pos:column="28">=<pos:position pos:line="32" pos:column="29"/></operator> <name><name pos:line="32" pos:column="30">tmp<pos:position pos:line="32" pos:column="33"/></name><operator pos:line="32" pos:column="33">-&gt;<pos:position pos:line="32" pos:column="38"/></operator><name pos:line="32" pos:column="35">next<pos:position pos:line="32" pos:column="39"/></name></name></expr>;<pos:position pos:line="32" pos:column="40"/></expr_stmt></block></else></if>
	<expr_stmt><expr><call><name pos:line="33" pos:column="9">cpy_destroy_user_data<pos:position pos:line="33" pos:column="30"/></name><argument_list pos:line="33" pos:column="30">(<argument><expr><name pos:line="33" pos:column="31">tmp<pos:position pos:line="33" pos:column="34"/></name></expr></argument>)<pos:position pos:line="33" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="36"/></expr_stmt>
	<expr_stmt><expr><name pos:line="34" pos:column="9">Py_RETURN_NONE<pos:position pos:line="34" pos:column="23"/></name></expr>;<pos:position pos:line="34" pos:column="24"/></expr_stmt>
}<pos:position pos:line="35" pos:column="2"/></block></function></unit>
