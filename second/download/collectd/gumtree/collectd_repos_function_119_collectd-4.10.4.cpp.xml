<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_119_collectd-4.10.4.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type>
<name pos:line="2" pos:column="1">vm_close<pos:position pos:line="2" pos:column="9"/></name> <parameter_list pos:line="2" pos:column="10">(<parameter><decl><type><name pos:line="2" pos:column="11">lt_user_data<pos:position pos:line="2" pos:column="23"/></name></type> <name pos:line="2" pos:column="24">loader_data<pos:position pos:line="2" pos:column="35"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="37">lt_module<pos:position pos:line="2" pos:column="46"/></name></type> <name pos:line="2" pos:column="47">module<pos:position pos:line="2" pos:column="53"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="54"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">int<pos:position pos:line="4" pos:column="6"/></name></type> <name pos:line="4" pos:column="7">errors<pos:position pos:line="4" pos:column="13"/></name> <init pos:line="4" pos:column="14">= <expr><literal type="number" pos:line="4" pos:column="16">0<pos:position pos:line="4" pos:column="17"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="18"/></decl_stmt>

  <if pos:line="6" pos:column="3">if <condition pos:line="6" pos:column="6">(<expr><name pos:line="6" pos:column="7">module<pos:position pos:line="6" pos:column="13"/></name> <operator pos:line="6" pos:column="14">!=<pos:position pos:line="6" pos:column="16"/></operator> <operator pos:line="6" pos:column="17">(<pos:position pos:line="6" pos:column="18"/></operator><name pos:line="6" pos:column="18">lt_module<pos:position pos:line="6" pos:column="27"/></name><operator pos:line="6" pos:column="27">)<pos:position pos:line="6" pos:column="28"/></operator> <operator pos:line="6" pos:column="29">-<pos:position pos:line="6" pos:column="30"/></operator><literal type="number" pos:line="6" pos:column="30">1<pos:position pos:line="6" pos:column="31"/></literal></expr>)<pos:position pos:line="6" pos:column="32"/></condition><then pos:line="6" pos:column="32">
    <block pos:line="7" pos:column="5">{
      <decl_stmt><decl><type><specifier pos:line="8" pos:column="7">const<pos:position pos:line="8" pos:column="12"/></specifier> <name pos:line="8" pos:column="13">mach_header<pos:position pos:line="8" pos:column="24"/></name> <modifier pos:line="8" pos:column="25">*<pos:position pos:line="8" pos:column="26"/></modifier></type><name pos:line="8" pos:column="26">mh<pos:position pos:line="8" pos:column="28"/></name> <init pos:line="8" pos:column="29">= <expr><operator pos:line="8" pos:column="31">(<pos:position pos:line="8" pos:column="32"/></operator><specifier pos:line="8" pos:column="32">const<pos:position pos:line="8" pos:column="37"/></specifier> <name pos:line="8" pos:column="38">mach_header<pos:position pos:line="8" pos:column="49"/></name> <operator pos:line="8" pos:column="50">*<pos:position pos:line="8" pos:column="51"/></operator><operator pos:line="8" pos:column="51">)<pos:position pos:line="8" pos:column="52"/></operator> <name pos:line="8" pos:column="53">module<pos:position pos:line="8" pos:column="59"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="60"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="9" pos:column="7">int<pos:position pos:line="9" pos:column="10"/></name></type> <name pos:line="9" pos:column="11">flags<pos:position pos:line="9" pos:column="16"/></name> <init pos:line="9" pos:column="17">= <expr><literal type="number" pos:line="9" pos:column="19">0<pos:position pos:line="9" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="9" pos:column="21"/></decl_stmt>
      <if pos:line="10" pos:column="7">if <condition pos:line="10" pos:column="10">(<expr><name><name pos:line="10" pos:column="11">mh<pos:position pos:line="10" pos:column="13"/></name><operator pos:line="10" pos:column="13">-&gt;<pos:position pos:line="10" pos:column="18"/></operator><name pos:line="10" pos:column="15">magic<pos:position pos:line="10" pos:column="20"/></name></name> <operator pos:line="10" pos:column="21">==<pos:position pos:line="10" pos:column="23"/></operator> <name pos:line="10" pos:column="24">LT__MAGIC<pos:position pos:line="10" pos:column="33"/></name></expr>)<pos:position pos:line="10" pos:column="34"/></condition><then pos:line="10" pos:column="34">
	<block pos:line="11" pos:column="9">{
	  <expr_stmt><expr><call><name pos:line="12" pos:column="11">lt_dlseterror<pos:position pos:line="12" pos:column="24"/></name> <argument_list pos:line="12" pos:column="25">(<argument><expr><name pos:line="12" pos:column="26">dyld_cannot_close<pos:position pos:line="12" pos:column="43"/></name></expr></argument>)<pos:position pos:line="12" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="45"/></expr_stmt>
	  <expr_stmt><expr><operator pos:line="13" pos:column="11">++<pos:position pos:line="13" pos:column="13"/></operator><name pos:line="13" pos:column="13">errors<pos:position pos:line="13" pos:column="19"/></name></expr>;<pos:position pos:line="13" pos:column="20"/></expr_stmt>
	}<pos:position pos:line="14" pos:column="10"/></block></then>
      <else pos:line="15" pos:column="7">else
	<block pos:line="16" pos:column="9">{
	  <comment type="block" pos:line="17" pos:column="11">/* Currently, if a module contains c++ static destructors and it
	     is unloaded, we get a segfault in atexit(), due to compiler and
	     dynamic loader differences of opinion, this works around that.  */</comment>
	  <if pos:line="20" pos:column="11">if <condition pos:line="20" pos:column="14">(<expr><operator pos:line="20" pos:column="15">(<pos:position pos:line="20" pos:column="16"/></operator><specifier pos:line="20" pos:column="16">const<pos:position pos:line="20" pos:column="21"/></specifier> struct <name pos:line="20" pos:column="29">section<pos:position pos:line="20" pos:column="36"/></name> <operator pos:line="20" pos:column="37">*<pos:position pos:line="20" pos:column="38"/></operator><operator pos:line="20" pos:column="38">)<pos:position pos:line="20" pos:column="39"/></operator> <name pos:line="20" pos:column="40">NULL<pos:position pos:line="20" pos:column="44"/></name> <operator pos:line="20" pos:column="45">!=<pos:position pos:line="20" pos:column="47"/></operator>
	      <call><name pos:line="21" pos:column="15">getsectbynamefromheader<pos:position pos:line="21" pos:column="38"/></name> <argument_list pos:line="21" pos:column="39">(<argument><expr><call><name pos:line="21" pos:column="40">lt__nsmodule_get_header<pos:position pos:line="21" pos:column="63"/></name> <argument_list pos:line="21" pos:column="64">(<argument><expr><name pos:line="21" pos:column="65">module<pos:position pos:line="21" pos:column="71"/></name></expr></argument>)<pos:position pos:line="21" pos:column="72"/></argument_list></call></expr></argument>,
				       <argument><expr><literal type="string" pos:line="22" pos:column="40">"__DATA"<pos:position pos:line="22" pos:column="48"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="22" pos:column="50">"__mod_term_func"<pos:position pos:line="22" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="68"/></argument_list></call></expr>)<pos:position pos:line="22" pos:column="69"/></condition><then pos:line="22" pos:column="69">
	    <block pos:line="23" pos:column="13">{
	      <expr_stmt><expr><name pos:line="24" pos:column="15">flags<pos:position pos:line="24" pos:column="20"/></name> <operator pos:line="24" pos:column="21">|=<pos:position pos:line="24" pos:column="23"/></operator> <name pos:line="24" pos:column="24">NSUNLINKMODULE_OPTION_KEEP_MEMORY_MAPPED<pos:position pos:line="24" pos:column="64"/></name></expr>;<pos:position pos:line="24" pos:column="65"/></expr_stmt>
	    }<pos:position pos:line="25" pos:column="14"/></block></then></if>
<cpp:if pos:line="26" pos:column="1">#<cpp:directive pos:line="26" pos:column="2">if<pos:position pos:line="26" pos:column="4"/></cpp:directive> <expr><call><name pos:line="26" pos:column="5">defined<pos:position pos:line="26" pos:column="12"/></name><argument_list pos:line="26" pos:column="12">(<argument><expr><name pos:line="26" pos:column="13">__ppc__<pos:position pos:line="26" pos:column="20"/></name></expr></argument>)<pos:position pos:line="26" pos:column="21"/></argument_list></call></expr></cpp:if>
	  <expr_stmt><expr><name pos:line="27" pos:column="11">flags<pos:position pos:line="27" pos:column="16"/></name> <operator pos:line="27" pos:column="17">|=<pos:position pos:line="27" pos:column="19"/></operator> <name pos:line="27" pos:column="20">NSUNLINKMODULE_OPTION_RESET_LAZY_REFERENCES<pos:position pos:line="27" pos:column="63"/></name></expr>;<pos:position pos:line="27" pos:column="64"/></expr_stmt>
<cpp:endif pos:line="28" pos:column="1">#<cpp:directive pos:line="28" pos:column="2">endif<pos:position pos:line="28" pos:column="7"/></cpp:directive></cpp:endif>
	  <if pos:line="29" pos:column="11">if <condition pos:line="29" pos:column="14">(<expr><operator pos:line="29" pos:column="15">!<pos:position pos:line="29" pos:column="16"/></operator><call><name pos:line="29" pos:column="16">NSUnLinkModule<pos:position pos:line="29" pos:column="30"/></name> <argument_list pos:line="29" pos:column="31">(<argument><expr><name pos:line="29" pos:column="32">module<pos:position pos:line="29" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="40">flags<pos:position pos:line="29" pos:column="45"/></name></expr></argument>)<pos:position pos:line="29" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="29" pos:column="47"/></condition><then pos:line="29" pos:column="47">
	    <block pos:line="30" pos:column="13">{
	      <expr_stmt><expr><call><name pos:line="31" pos:column="15">DYLD__SETERROR<pos:position pos:line="31" pos:column="29"/></name> <argument_list pos:line="31" pos:column="30">(<argument><expr><name pos:line="31" pos:column="31">CANNOT_CLOSE<pos:position pos:line="31" pos:column="43"/></name></expr></argument>)<pos:position pos:line="31" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="45"/></expr_stmt>
	      <expr_stmt><expr><operator pos:line="32" pos:column="15">++<pos:position pos:line="32" pos:column="17"/></operator><name pos:line="32" pos:column="17">errors<pos:position pos:line="32" pos:column="23"/></name></expr>;<pos:position pos:line="32" pos:column="24"/></expr_stmt>
	    }<pos:position pos:line="33" pos:column="14"/></block></then></if>
	}<pos:position pos:line="34" pos:column="10"/></block></else></if>
    }<pos:position pos:line="35" pos:column="6"/></block></then></if>

  <return pos:line="37" pos:column="3">return <expr><name pos:line="37" pos:column="10">errors<pos:position pos:line="37" pos:column="16"/></name></expr>;<pos:position pos:line="37" pos:column="17"/></return>
}<pos:position pos:line="38" pos:column="2"/></block></function></unit>
