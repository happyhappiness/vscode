<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_966_collectd-5.6.2.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">notification_meta2av<pos:position pos:line="1" pos:column="32"/></name><parameter_list pos:line="1" pos:column="32">(<parameter><decl><type><name pos:line="1" pos:column="33">pTHX_<pos:position pos:line="1" pos:column="38"/></name> <name pos:line="1" pos:column="39">notification_meta_t<pos:position pos:line="1" pos:column="58"/></name> <modifier pos:line="1" pos:column="59">*<pos:position pos:line="1" pos:column="60"/></modifier></type><name pos:line="1" pos:column="60">meta<pos:position pos:line="1" pos:column="64"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="66">AV<pos:position pos:line="1" pos:column="68"/></name> <modifier pos:line="1" pos:column="69">*<pos:position pos:line="1" pos:column="70"/></modifier></type><name pos:line="1" pos:column="70">array<pos:position pos:line="1" pos:column="75"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="76"/></parameter_list> <block pos:line="1" pos:column="77">{
  <decl_stmt><decl><type><name pos:line="2" pos:column="3">int<pos:position pos:line="2" pos:column="6"/></name></type> <name pos:line="2" pos:column="7">meta_num<pos:position pos:line="2" pos:column="15"/></name> <init pos:line="2" pos:column="16">= <expr><literal type="number" pos:line="2" pos:column="18">0<pos:position pos:line="2" pos:column="19"/></literal></expr></init></decl>;<pos:position pos:line="2" pos:column="20"/></decl_stmt>

  <while pos:line="4" pos:column="3">while <condition pos:line="4" pos:column="9">(<expr><name pos:line="4" pos:column="10">meta<pos:position pos:line="4" pos:column="14"/></name></expr>)<pos:position pos:line="4" pos:column="15"/></condition> <block pos:line="4" pos:column="16">{
    <expr_stmt><expr><operator pos:line="5" pos:column="5">++<pos:position pos:line="5" pos:column="7"/></operator><name pos:line="5" pos:column="7">meta_num<pos:position pos:line="5" pos:column="15"/></name></expr>;<pos:position pos:line="5" pos:column="16"/></expr_stmt>
    <expr_stmt><expr><name pos:line="6" pos:column="5">meta<pos:position pos:line="6" pos:column="9"/></name> <operator pos:line="6" pos:column="10">=<pos:position pos:line="6" pos:column="11"/></operator> <name><name pos:line="6" pos:column="12">meta<pos:position pos:line="6" pos:column="16"/></name><operator pos:line="6" pos:column="16">-&gt;<pos:position pos:line="6" pos:column="21"/></operator><name pos:line="6" pos:column="18">next<pos:position pos:line="6" pos:column="22"/></name></name></expr>;<pos:position pos:line="6" pos:column="23"/></expr_stmt>
  }<pos:position pos:line="7" pos:column="4"/></block></while>

  <expr_stmt><expr><call><name pos:line="9" pos:column="3">av_extend<pos:position pos:line="9" pos:column="12"/></name><argument_list pos:line="9" pos:column="12">(<argument><expr><name pos:line="9" pos:column="13">array<pos:position pos:line="9" pos:column="18"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="20">meta_num<pos:position pos:line="9" pos:column="28"/></name></expr></argument>)<pos:position pos:line="9" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="30"/></expr_stmt>

  <for pos:line="11" pos:column="3">for <control pos:line="11" pos:column="7">(<init><decl><type><name pos:line="11" pos:column="8">int<pos:position pos:line="11" pos:column="11"/></name></type> <name pos:line="11" pos:column="12">i<pos:position pos:line="11" pos:column="13"/></name> <init pos:line="11" pos:column="14">= <expr><literal type="number" pos:line="11" pos:column="16">0<pos:position pos:line="11" pos:column="17"/></literal></expr></init></decl>;<pos:position pos:line="11" pos:column="18"/></init> <condition><expr><name pos:line="11" pos:column="19">NULL<pos:position pos:line="11" pos:column="23"/></name> <operator pos:line="11" pos:column="24">!=<pos:position pos:line="11" pos:column="26"/></operator> <name pos:line="11" pos:column="27">meta<pos:position pos:line="11" pos:column="31"/></name></expr>;<pos:position pos:line="11" pos:column="32"/></condition> <incr><expr><name pos:line="11" pos:column="33">meta<pos:position pos:line="11" pos:column="37"/></name> <operator pos:line="11" pos:column="38">=<pos:position pos:line="11" pos:column="39"/></operator> <name><name pos:line="11" pos:column="40">meta<pos:position pos:line="11" pos:column="44"/></name><operator pos:line="11" pos:column="44">-&gt;<pos:position pos:line="11" pos:column="49"/></operator><name pos:line="11" pos:column="46">next<pos:position pos:line="11" pos:column="50"/></name></name></expr><operator pos:line="11" pos:column="50">,<pos:position pos:line="11" pos:column="51"/></operator> <expr><operator pos:line="11" pos:column="52">++<pos:position pos:line="11" pos:column="54"/></operator><name pos:line="11" pos:column="54">i<pos:position pos:line="11" pos:column="55"/></name></expr></incr>)<pos:position pos:line="11" pos:column="56"/></control> <block pos:line="11" pos:column="57">{
    <decl_stmt><decl><type><name pos:line="12" pos:column="5">HV<pos:position pos:line="12" pos:column="7"/></name> <modifier pos:line="12" pos:column="8">*<pos:position pos:line="12" pos:column="9"/></modifier></type><name pos:line="12" pos:column="9">m<pos:position pos:line="12" pos:column="10"/></name> <init pos:line="12" pos:column="11">= <expr><call><name pos:line="12" pos:column="13">newHV<pos:position pos:line="12" pos:column="18"/></name><argument_list pos:line="12" pos:column="18">()<pos:position pos:line="12" pos:column="20"/></argument_list></call></expr></init></decl>;<pos:position pos:line="12" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="13" pos:column="5">SV<pos:position pos:line="13" pos:column="7"/></name> <modifier pos:line="13" pos:column="8">*<pos:position pos:line="13" pos:column="9"/></modifier></type><name pos:line="13" pos:column="9">value<pos:position pos:line="13" pos:column="14"/></name></decl>;<pos:position pos:line="13" pos:column="15"/></decl_stmt>

    <if pos:line="15" pos:column="5">if <condition pos:line="15" pos:column="8">(<expr><name pos:line="15" pos:column="9">NULL<pos:position pos:line="15" pos:column="13"/></name> <operator pos:line="15" pos:column="14">==<pos:position pos:line="15" pos:column="16"/></operator> <call><name pos:line="15" pos:column="17">hv_store<pos:position pos:line="15" pos:column="25"/></name><argument_list pos:line="15" pos:column="25">(<argument><expr><name pos:line="15" pos:column="26">m<pos:position pos:line="15" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="15" pos:column="29">"name"<pos:position pos:line="15" pos:column="35"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="15" pos:column="37">4<pos:position pos:line="15" pos:column="38"/></literal></expr></argument>, <argument><expr><call><name pos:line="15" pos:column="40">newSVpv<pos:position pos:line="15" pos:column="47"/></name><argument_list pos:line="15" pos:column="47">(<argument><expr><name><name pos:line="15" pos:column="48">meta<pos:position pos:line="15" pos:column="52"/></name><operator pos:line="15" pos:column="52">-&gt;<pos:position pos:line="15" pos:column="57"/></operator><name pos:line="15" pos:column="54">name<pos:position pos:line="15" pos:column="58"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="15" pos:column="60">0<pos:position pos:line="15" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="62"/></argument_list></call></expr></argument>, <argument><expr><literal type="number" pos:line="15" pos:column="64">0<pos:position pos:line="15" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="66"/></argument_list></call></expr>)<pos:position pos:line="15" pos:column="67"/></condition><then pos:line="15" pos:column="67">
      <block type="pseudo"><return pos:line="16" pos:column="7">return <expr><operator pos:line="16" pos:column="14">-<pos:position pos:line="16" pos:column="15"/></operator><literal type="number" pos:line="16" pos:column="15">1<pos:position pos:line="16" pos:column="16"/></literal></expr>;<pos:position pos:line="16" pos:column="17"/></return></block></then></if>

    <if pos:line="18" pos:column="5">if <condition pos:line="18" pos:column="8">(<expr><name pos:line="18" pos:column="9">NM_TYPE_STRING<pos:position pos:line="18" pos:column="23"/></name> <operator pos:line="18" pos:column="24">==<pos:position pos:line="18" pos:column="26"/></operator> <name><name pos:line="18" pos:column="27">meta<pos:position pos:line="18" pos:column="31"/></name><operator pos:line="18" pos:column="31">-&gt;<pos:position pos:line="18" pos:column="36"/></operator><name pos:line="18" pos:column="33">type<pos:position pos:line="18" pos:column="37"/></name></name></expr>)<pos:position pos:line="18" pos:column="38"/></condition><then pos:line="18" pos:column="38">
      <block type="pseudo"><expr_stmt><expr><name pos:line="19" pos:column="7">value<pos:position pos:line="19" pos:column="12"/></name> <operator pos:line="19" pos:column="13">=<pos:position pos:line="19" pos:column="14"/></operator> <call><name pos:line="19" pos:column="15">newSVpv<pos:position pos:line="19" pos:column="22"/></name><argument_list pos:line="19" pos:column="22">(<argument><expr><name><name pos:line="19" pos:column="23">meta<pos:position pos:line="19" pos:column="27"/></name><operator pos:line="19" pos:column="27">-&gt;<pos:position pos:line="19" pos:column="32"/></operator><name pos:line="19" pos:column="29">nm_value<pos:position pos:line="19" pos:column="37"/></name><operator pos:line="19" pos:column="37">.<pos:position pos:line="19" pos:column="38"/></operator><name pos:line="19" pos:column="38">nm_string<pos:position pos:line="19" pos:column="47"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="19" pos:column="49">0<pos:position pos:line="19" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="52"/></expr_stmt></block></then>
    <elseif pos:line="20" pos:column="5">else <if pos:line="20" pos:column="10">if <condition pos:line="20" pos:column="13">(<expr><name pos:line="20" pos:column="14">NM_TYPE_SIGNED_INT<pos:position pos:line="20" pos:column="32"/></name> <operator pos:line="20" pos:column="33">==<pos:position pos:line="20" pos:column="35"/></operator> <name><name pos:line="20" pos:column="36">meta<pos:position pos:line="20" pos:column="40"/></name><operator pos:line="20" pos:column="40">-&gt;<pos:position pos:line="20" pos:column="45"/></operator><name pos:line="20" pos:column="42">type<pos:position pos:line="20" pos:column="46"/></name></name></expr>)<pos:position pos:line="20" pos:column="47"/></condition><then pos:line="20" pos:column="47">
      <block type="pseudo"><expr_stmt><expr><name pos:line="21" pos:column="7">value<pos:position pos:line="21" pos:column="12"/></name> <operator pos:line="21" pos:column="13">=<pos:position pos:line="21" pos:column="14"/></operator> <call><name pos:line="21" pos:column="15">newSViv<pos:position pos:line="21" pos:column="22"/></name><argument_list pos:line="21" pos:column="22">(<argument><expr><name><name pos:line="21" pos:column="23">meta<pos:position pos:line="21" pos:column="27"/></name><operator pos:line="21" pos:column="27">-&gt;<pos:position pos:line="21" pos:column="32"/></operator><name pos:line="21" pos:column="29">nm_value<pos:position pos:line="21" pos:column="37"/></name><operator pos:line="21" pos:column="37">.<pos:position pos:line="21" pos:column="38"/></operator><name pos:line="21" pos:column="38">nm_signed_int<pos:position pos:line="21" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="21" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="53"/></expr_stmt></block></then></if></elseif>
    <elseif pos:line="22" pos:column="5">else <if pos:line="22" pos:column="10">if <condition pos:line="22" pos:column="13">(<expr><name pos:line="22" pos:column="14">NM_TYPE_UNSIGNED_INT<pos:position pos:line="22" pos:column="34"/></name> <operator pos:line="22" pos:column="35">==<pos:position pos:line="22" pos:column="37"/></operator> <name><name pos:line="22" pos:column="38">meta<pos:position pos:line="22" pos:column="42"/></name><operator pos:line="22" pos:column="42">-&gt;<pos:position pos:line="22" pos:column="47"/></operator><name pos:line="22" pos:column="44">type<pos:position pos:line="22" pos:column="48"/></name></name></expr>)<pos:position pos:line="22" pos:column="49"/></condition><then pos:line="22" pos:column="49">
      <block type="pseudo"><expr_stmt><expr><name pos:line="23" pos:column="7">value<pos:position pos:line="23" pos:column="12"/></name> <operator pos:line="23" pos:column="13">=<pos:position pos:line="23" pos:column="14"/></operator> <call><name pos:line="23" pos:column="15">newSVuv<pos:position pos:line="23" pos:column="22"/></name><argument_list pos:line="23" pos:column="22">(<argument><expr><name><name pos:line="23" pos:column="23">meta<pos:position pos:line="23" pos:column="27"/></name><operator pos:line="23" pos:column="27">-&gt;<pos:position pos:line="23" pos:column="32"/></operator><name pos:line="23" pos:column="29">nm_value<pos:position pos:line="23" pos:column="37"/></name><operator pos:line="23" pos:column="37">.<pos:position pos:line="23" pos:column="38"/></operator><name pos:line="23" pos:column="38">nm_unsigned_int<pos:position pos:line="23" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="23" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="55"/></expr_stmt></block></then></if></elseif>
    <elseif pos:line="24" pos:column="5">else <if pos:line="24" pos:column="10">if <condition pos:line="24" pos:column="13">(<expr><name pos:line="24" pos:column="14">NM_TYPE_DOUBLE<pos:position pos:line="24" pos:column="28"/></name> <operator pos:line="24" pos:column="29">==<pos:position pos:line="24" pos:column="31"/></operator> <name><name pos:line="24" pos:column="32">meta<pos:position pos:line="24" pos:column="36"/></name><operator pos:line="24" pos:column="36">-&gt;<pos:position pos:line="24" pos:column="41"/></operator><name pos:line="24" pos:column="38">type<pos:position pos:line="24" pos:column="42"/></name></name></expr>)<pos:position pos:line="24" pos:column="43"/></condition><then pos:line="24" pos:column="43">
      <block type="pseudo"><expr_stmt><expr><name pos:line="25" pos:column="7">value<pos:position pos:line="25" pos:column="12"/></name> <operator pos:line="25" pos:column="13">=<pos:position pos:line="25" pos:column="14"/></operator> <call><name pos:line="25" pos:column="15">newSVnv<pos:position pos:line="25" pos:column="22"/></name><argument_list pos:line="25" pos:column="22">(<argument><expr><name><name pos:line="25" pos:column="23">meta<pos:position pos:line="25" pos:column="27"/></name><operator pos:line="25" pos:column="27">-&gt;<pos:position pos:line="25" pos:column="32"/></operator><name pos:line="25" pos:column="29">nm_value<pos:position pos:line="25" pos:column="37"/></name><operator pos:line="25" pos:column="37">.<pos:position pos:line="25" pos:column="38"/></operator><name pos:line="25" pos:column="38">nm_double<pos:position pos:line="25" pos:column="47"/></name></name></expr></argument>)<pos:position pos:line="25" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="49"/></expr_stmt></block></then></if></elseif>
    <elseif pos:line="26" pos:column="5">else <if pos:line="26" pos:column="10">if <condition pos:line="26" pos:column="13">(<expr><name pos:line="26" pos:column="14">NM_TYPE_BOOLEAN<pos:position pos:line="26" pos:column="29"/></name> <operator pos:line="26" pos:column="30">==<pos:position pos:line="26" pos:column="32"/></operator> <name><name pos:line="26" pos:column="33">meta<pos:position pos:line="26" pos:column="37"/></name><operator pos:line="26" pos:column="37">-&gt;<pos:position pos:line="26" pos:column="42"/></operator><name pos:line="26" pos:column="39">type<pos:position pos:line="26" pos:column="43"/></name></name></expr>)<pos:position pos:line="26" pos:column="44"/></condition><then pos:line="26" pos:column="44">
      <block type="pseudo"><expr_stmt><expr><name pos:line="27" pos:column="7">value<pos:position pos:line="27" pos:column="12"/></name> <operator pos:line="27" pos:column="13">=<pos:position pos:line="27" pos:column="14"/></operator> <ternary><condition><expr><name><name pos:line="27" pos:column="15">meta<pos:position pos:line="27" pos:column="19"/></name><operator pos:line="27" pos:column="19">-&gt;<pos:position pos:line="27" pos:column="24"/></operator><name pos:line="27" pos:column="21">nm_value<pos:position pos:line="27" pos:column="29"/></name><operator pos:line="27" pos:column="29">.<pos:position pos:line="27" pos:column="30"/></operator><name pos:line="27" pos:column="30">nm_boolean<pos:position pos:line="27" pos:column="40"/></name></name></expr> ?<pos:position pos:line="27" pos:column="42"/></condition><then pos:line="27" pos:column="42"> <expr><operator pos:line="27" pos:column="43">&amp;<pos:position pos:line="27" pos:column="48"/></operator><name pos:line="27" pos:column="44">PL_sv_yes<pos:position pos:line="27" pos:column="53"/></name></expr> <pos:position pos:line="27" pos:column="54"/></then><else pos:line="27" pos:column="54">: <expr><operator pos:line="27" pos:column="56">&amp;<pos:position pos:line="27" pos:column="61"/></operator><name pos:line="27" pos:column="57">PL_sv_no<pos:position pos:line="27" pos:column="65"/></name></expr></else></ternary></expr>;<pos:position pos:line="27" pos:column="66"/></expr_stmt></block></then></if></elseif>
    <else pos:line="28" pos:column="5">else
      <block type="pseudo"><return pos:line="29" pos:column="7">return <expr><operator pos:line="29" pos:column="14">-<pos:position pos:line="29" pos:column="15"/></operator><literal type="number" pos:line="29" pos:column="15">1<pos:position pos:line="29" pos:column="16"/></literal></expr>;<pos:position pos:line="29" pos:column="17"/></return></block></else></if>

    <if pos:line="31" pos:column="5">if <condition pos:line="31" pos:column="8">(<expr><name pos:line="31" pos:column="9">NULL<pos:position pos:line="31" pos:column="13"/></name> <operator pos:line="31" pos:column="14">==<pos:position pos:line="31" pos:column="16"/></operator> <call><name pos:line="31" pos:column="17">hv_store<pos:position pos:line="31" pos:column="25"/></name><argument_list pos:line="31" pos:column="25">(<argument><expr><name pos:line="31" pos:column="26">m<pos:position pos:line="31" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="31" pos:column="29">"value"<pos:position pos:line="31" pos:column="36"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="31" pos:column="38">5<pos:position pos:line="31" pos:column="39"/></literal></expr></argument>, <argument><expr><name pos:line="31" pos:column="41">value<pos:position pos:line="31" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="31" pos:column="48">0<pos:position pos:line="31" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="31" pos:column="50"/></argument_list></call></expr>)<pos:position pos:line="31" pos:column="51"/></condition><then pos:line="31" pos:column="51"> <block pos:line="31" pos:column="52">{
      <expr_stmt><expr><call><name pos:line="32" pos:column="7">sv_free<pos:position pos:line="32" pos:column="14"/></name><argument_list pos:line="32" pos:column="14">(<argument><expr><name pos:line="32" pos:column="15">value<pos:position pos:line="32" pos:column="20"/></name></expr></argument>)<pos:position pos:line="32" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="22"/></expr_stmt>
      <return pos:line="33" pos:column="7">return <expr><operator pos:line="33" pos:column="14">-<pos:position pos:line="33" pos:column="15"/></operator><literal type="number" pos:line="33" pos:column="15">1<pos:position pos:line="33" pos:column="16"/></literal></expr>;<pos:position pos:line="33" pos:column="17"/></return>
    }<pos:position pos:line="34" pos:column="6"/></block></then></if>

    <if pos:line="36" pos:column="5">if <condition pos:line="36" pos:column="8">(<expr><name pos:line="36" pos:column="9">NULL<pos:position pos:line="36" pos:column="13"/></name> <operator pos:line="36" pos:column="14">==<pos:position pos:line="36" pos:column="16"/></operator> <call><name pos:line="36" pos:column="17">av_store<pos:position pos:line="36" pos:column="25"/></name><argument_list pos:line="36" pos:column="25">(<argument><expr><name pos:line="36" pos:column="26">array<pos:position pos:line="36" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="33">i<pos:position pos:line="36" pos:column="34"/></name></expr></argument>, <argument><expr><call><name pos:line="36" pos:column="36">newRV_noinc<pos:position pos:line="36" pos:column="47"/></name><argument_list pos:line="36" pos:column="47">(<argument><expr><operator pos:line="36" pos:column="48">(<pos:position pos:line="36" pos:column="49"/></operator><name pos:line="36" pos:column="49">SV<pos:position pos:line="36" pos:column="51"/></name> <operator pos:line="36" pos:column="52">*<pos:position pos:line="36" pos:column="53"/></operator><operator pos:line="36" pos:column="53">)<pos:position pos:line="36" pos:column="54"/></operator><name pos:line="36" pos:column="54">m<pos:position pos:line="36" pos:column="55"/></name></expr></argument>)<pos:position pos:line="36" pos:column="56"/></argument_list></call></expr></argument>)<pos:position pos:line="36" pos:column="57"/></argument_list></call></expr>)<pos:position pos:line="36" pos:column="58"/></condition><then pos:line="36" pos:column="58"> <block pos:line="36" pos:column="59">{
      <expr_stmt><expr><call><name pos:line="37" pos:column="7">hv_clear<pos:position pos:line="37" pos:column="15"/></name><argument_list pos:line="37" pos:column="15">(<argument><expr><name pos:line="37" pos:column="16">m<pos:position pos:line="37" pos:column="17"/></name></expr></argument>)<pos:position pos:line="37" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="19"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="38" pos:column="7">hv_undef<pos:position pos:line="38" pos:column="15"/></name><argument_list pos:line="38" pos:column="15">(<argument><expr><name pos:line="38" pos:column="16">m<pos:position pos:line="38" pos:column="17"/></name></expr></argument>)<pos:position pos:line="38" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="19"/></expr_stmt>
      <return pos:line="39" pos:column="7">return <expr><operator pos:line="39" pos:column="14">-<pos:position pos:line="39" pos:column="15"/></operator><literal type="number" pos:line="39" pos:column="15">1<pos:position pos:line="39" pos:column="16"/></literal></expr>;<pos:position pos:line="39" pos:column="17"/></return>
    }<pos:position pos:line="40" pos:column="6"/></block></then></if>
  }<pos:position pos:line="41" pos:column="4"/></block></for>
  <return pos:line="42" pos:column="3">return <expr><literal type="number" pos:line="42" pos:column="10">0<pos:position pos:line="42" pos:column="11"/></literal></expr>;<pos:position pos:line="42" pos:column="12"/></return>
}<pos:position pos:line="43" pos:column="2"/></block></function></unit>
