<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1560_collectd-5.1.0.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">parse_packet<pos:position pos:line="1" pos:column="24"/></name> <parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><name pos:line="1" pos:column="26">sockent_t<pos:position pos:line="1" pos:column="35"/></name> <modifier pos:line="1" pos:column="36">*<pos:position pos:line="1" pos:column="37"/></modifier></type><name pos:line="1" pos:column="37">se<pos:position pos:line="1" pos:column="39"/></name></decl></parameter>, <comment type="block" pos:line="1" pos:column="41">/* {{{ */</comment>
		<parameter><decl><type><name pos:line="2" pos:column="17">void<pos:position pos:line="2" pos:column="21"/></name> <modifier pos:line="2" pos:column="22">*<pos:position pos:line="2" pos:column="23"/></modifier></type><name pos:line="2" pos:column="23">buffer<pos:position pos:line="2" pos:column="29"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="31">size_t<pos:position pos:line="2" pos:column="37"/></name></type> <name pos:line="2" pos:column="38">buffer_size<pos:position pos:line="2" pos:column="49"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="51">int<pos:position pos:line="2" pos:column="54"/></name></type> <name pos:line="2" pos:column="55">flags<pos:position pos:line="2" pos:column="60"/></name></decl></parameter>,
		<parameter><decl><type><specifier pos:line="3" pos:column="17">const<pos:position pos:line="3" pos:column="22"/></specifier> <name pos:line="3" pos:column="23">char<pos:position pos:line="3" pos:column="27"/></name> <modifier pos:line="3" pos:column="28">*<pos:position pos:line="3" pos:column="29"/></modifier></type><name pos:line="3" pos:column="29">username<pos:position pos:line="3" pos:column="37"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="38"/></parameter_list>
<block pos:line="4" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">status<pos:position pos:line="5" pos:column="19"/></name></decl>;<pos:position pos:line="5" pos:column="20"/></decl_stmt>

	<decl_stmt><decl><type><name pos:line="7" pos:column="9">value_list_t<pos:position pos:line="7" pos:column="21"/></name></type> <name pos:line="7" pos:column="22">vl<pos:position pos:line="7" pos:column="24"/></name> <init pos:line="7" pos:column="25">= <expr><name pos:line="7" pos:column="27">VALUE_LIST_INIT<pos:position pos:line="7" pos:column="42"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="43"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">notification_t<pos:position pos:line="8" pos:column="23"/></name></type> <name pos:line="8" pos:column="24">n<pos:position pos:line="8" pos:column="25"/></name></decl>;<pos:position pos:line="8" pos:column="26"/></decl_stmt>

<cpp:if pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">if<pos:position pos:line="10" pos:column="4"/></cpp:directive> <expr><name pos:line="10" pos:column="5">HAVE_LIBGCRYPT<pos:position pos:line="10" pos:column="19"/></name></expr></cpp:if>
	<decl_stmt><decl><type><name pos:line="11" pos:column="9">int<pos:position pos:line="11" pos:column="12"/></name></type> <name pos:line="11" pos:column="13">packet_was_signed<pos:position pos:line="11" pos:column="30"/></name> <init pos:line="11" pos:column="31">= <expr><operator pos:line="11" pos:column="33">(<pos:position pos:line="11" pos:column="34"/></operator><name pos:line="11" pos:column="34">flags<pos:position pos:line="11" pos:column="39"/></name> <operator pos:line="11" pos:column="40">&amp;<pos:position pos:line="11" pos:column="45"/></operator> <name pos:line="11" pos:column="42">PP_SIGNED<pos:position pos:line="11" pos:column="51"/></name><operator pos:line="11" pos:column="51">)<pos:position pos:line="11" pos:column="52"/></operator></expr></init></decl>;<pos:position pos:line="11" pos:column="53"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="12" pos:column="9">int<pos:position pos:line="12" pos:column="12"/></name></type> <name pos:line="12" pos:column="13">packet_was_encrypted<pos:position pos:line="12" pos:column="33"/></name> <init pos:line="12" pos:column="34">= <expr><operator pos:line="12" pos:column="36">(<pos:position pos:line="12" pos:column="37"/></operator><name pos:line="12" pos:column="37">flags<pos:position pos:line="12" pos:column="42"/></name> <operator pos:line="12" pos:column="43">&amp;<pos:position pos:line="12" pos:column="48"/></operator> <name pos:line="12" pos:column="45">PP_ENCRYPTED<pos:position pos:line="12" pos:column="57"/></name><operator pos:line="12" pos:column="57">)<pos:position pos:line="12" pos:column="58"/></operator></expr></init></decl>;<pos:position pos:line="12" pos:column="59"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="13" pos:column="9">int<pos:position pos:line="13" pos:column="12"/></name></type> <name pos:line="13" pos:column="13">printed_ignore_warning<pos:position pos:line="13" pos:column="35"/></name> <init pos:line="13" pos:column="36">= <expr><literal type="number" pos:line="13" pos:column="38">0<pos:position pos:line="13" pos:column="39"/></literal></expr></init></decl>;<pos:position pos:line="13" pos:column="40"/></decl_stmt>
<cpp:endif pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">endif<pos:position pos:line="14" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="14" pos:column="8">/* HAVE_LIBGCRYPT */</comment>


	<expr_stmt><expr><call><name pos:line="17" pos:column="9">memset<pos:position pos:line="17" pos:column="15"/></name> <argument_list pos:line="17" pos:column="16">(<argument><expr><operator pos:line="17" pos:column="17">&amp;<pos:position pos:line="17" pos:column="22"/></operator><name pos:line="17" pos:column="18">vl<pos:position pos:line="17" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="17" pos:column="22">'\0'<pos:position pos:line="17" pos:column="26"/></literal></expr></argument>, <argument><expr><sizeof pos:line="17" pos:column="28">sizeof <argument_list pos:line="17" pos:column="35">(<argument><expr><name pos:line="17" pos:column="36">vl<pos:position pos:line="17" pos:column="38"/></name></expr></argument>)<pos:position pos:line="17" pos:column="39"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="17" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="41"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="18" pos:column="9">memset<pos:position pos:line="18" pos:column="15"/></name> <argument_list pos:line="18" pos:column="16">(<argument><expr><operator pos:line="18" pos:column="17">&amp;<pos:position pos:line="18" pos:column="22"/></operator><name pos:line="18" pos:column="18">n<pos:position pos:line="18" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="18" pos:column="21">'\0'<pos:position pos:line="18" pos:column="25"/></literal></expr></argument>, <argument><expr><sizeof pos:line="18" pos:column="27">sizeof <argument_list pos:line="18" pos:column="34">(<argument><expr><name pos:line="18" pos:column="35">n<pos:position pos:line="18" pos:column="36"/></name></expr></argument>)<pos:position pos:line="18" pos:column="37"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="18" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="39"/></expr_stmt>
	<expr_stmt><expr><name pos:line="19" pos:column="9">status<pos:position pos:line="19" pos:column="15"/></name> <operator pos:line="19" pos:column="16">=<pos:position pos:line="19" pos:column="17"/></operator> <literal type="number" pos:line="19" pos:column="18">0<pos:position pos:line="19" pos:column="19"/></literal></expr>;<pos:position pos:line="19" pos:column="20"/></expr_stmt>

	<while pos:line="21" pos:column="9">while <condition pos:line="21" pos:column="15">(<expr><operator pos:line="21" pos:column="16">(<pos:position pos:line="21" pos:column="17"/></operator><name pos:line="21" pos:column="17">status<pos:position pos:line="21" pos:column="23"/></name> <operator pos:line="21" pos:column="24">==<pos:position pos:line="21" pos:column="26"/></operator> <literal type="number" pos:line="21" pos:column="27">0<pos:position pos:line="21" pos:column="28"/></literal><operator pos:line="21" pos:column="28">)<pos:position pos:line="21" pos:column="29"/></operator> <operator pos:line="21" pos:column="30">&amp;&amp;<pos:position pos:line="21" pos:column="40"/></operator> <operator pos:line="21" pos:column="33">(<pos:position pos:line="21" pos:column="34"/></operator><literal type="number" pos:line="21" pos:column="34">0<pos:position pos:line="21" pos:column="35"/></literal> <operator pos:line="21" pos:column="36">&lt;<pos:position pos:line="21" pos:column="40"/></operator> <name pos:line="21" pos:column="38">buffer_size<pos:position pos:line="21" pos:column="49"/></name><operator pos:line="21" pos:column="49">)<pos:position pos:line="21" pos:column="50"/></operator>
			<operator pos:line="22" pos:column="25">&amp;&amp;<pos:position pos:line="22" pos:column="35"/></operator> <operator pos:line="22" pos:column="28">(<pos:position pos:line="22" pos:column="29"/></operator><operator pos:line="22" pos:column="29">(<pos:position pos:line="22" pos:column="30"/></operator><name pos:line="22" pos:column="30">unsigned<pos:position pos:line="22" pos:column="38"/></name> <name pos:line="22" pos:column="39">int<pos:position pos:line="22" pos:column="42"/></name><operator pos:line="22" pos:column="42">)<pos:position pos:line="22" pos:column="43"/></operator> <name pos:line="22" pos:column="44">buffer_size<pos:position pos:line="22" pos:column="55"/></name> <operator pos:line="22" pos:column="56">&gt;<pos:position pos:line="22" pos:column="60"/></operator> <sizeof pos:line="22" pos:column="58">sizeof <argument_list pos:line="22" pos:column="65">(<argument><expr><name pos:line="22" pos:column="66">part_header_t<pos:position pos:line="22" pos:column="79"/></name></expr></argument>)<pos:position pos:line="22" pos:column="80"/></argument_list></sizeof><operator pos:line="22" pos:column="80">)<pos:position pos:line="22" pos:column="81"/></operator></expr>)<pos:position pos:line="22" pos:column="82"/></condition>
	<block pos:line="23" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="24" pos:column="17">uint16_t<pos:position pos:line="24" pos:column="25"/></name></type> <name pos:line="24" pos:column="26">pkg_length<pos:position pos:line="24" pos:column="36"/></name></decl>;<pos:position pos:line="24" pos:column="37"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="25" pos:column="17">uint16_t<pos:position pos:line="25" pos:column="25"/></name></type> <name pos:line="25" pos:column="26">pkg_type<pos:position pos:line="25" pos:column="34"/></name></decl>;<pos:position pos:line="25" pos:column="35"/></decl_stmt>

		<expr_stmt><expr><call><name pos:line="27" pos:column="17">memcpy<pos:position pos:line="27" pos:column="23"/></name> <argument_list pos:line="27" pos:column="24">(<argument><expr><operator pos:line="27" pos:column="25">(<pos:position pos:line="27" pos:column="26"/></operator><name pos:line="27" pos:column="26">void<pos:position pos:line="27" pos:column="30"/></name> <operator pos:line="27" pos:column="31">*<pos:position pos:line="27" pos:column="32"/></operator><operator pos:line="27" pos:column="32">)<pos:position pos:line="27" pos:column="33"/></operator> <operator pos:line="27" pos:column="34">&amp;<pos:position pos:line="27" pos:column="39"/></operator><name pos:line="27" pos:column="35">pkg_type<pos:position pos:line="27" pos:column="43"/></name></expr></argument>,
				<argument><expr><operator pos:line="28" pos:column="33">(<pos:position pos:line="28" pos:column="34"/></operator><name pos:line="28" pos:column="34">void<pos:position pos:line="28" pos:column="38"/></name> <operator pos:line="28" pos:column="39">*<pos:position pos:line="28" pos:column="40"/></operator><operator pos:line="28" pos:column="40">)<pos:position pos:line="28" pos:column="41"/></operator> <name pos:line="28" pos:column="42">buffer<pos:position pos:line="28" pos:column="48"/></name></expr></argument>,
				<argument><expr><sizeof pos:line="29" pos:column="33">sizeof <argument_list pos:line="29" pos:column="40">(<argument><expr><name pos:line="29" pos:column="41">pkg_type<pos:position pos:line="29" pos:column="49"/></name></expr></argument>)<pos:position pos:line="29" pos:column="50"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="29" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="52"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="30" pos:column="17">memcpy<pos:position pos:line="30" pos:column="23"/></name> <argument_list pos:line="30" pos:column="24">(<argument><expr><operator pos:line="30" pos:column="25">(<pos:position pos:line="30" pos:column="26"/></operator><name pos:line="30" pos:column="26">void<pos:position pos:line="30" pos:column="30"/></name> <operator pos:line="30" pos:column="31">*<pos:position pos:line="30" pos:column="32"/></operator><operator pos:line="30" pos:column="32">)<pos:position pos:line="30" pos:column="33"/></operator> <operator pos:line="30" pos:column="34">&amp;<pos:position pos:line="30" pos:column="39"/></operator><name pos:line="30" pos:column="35">pkg_length<pos:position pos:line="30" pos:column="45"/></name></expr></argument>,
				<argument><expr><operator pos:line="31" pos:column="33">(<pos:position pos:line="31" pos:column="34"/></operator><name pos:line="31" pos:column="34">void<pos:position pos:line="31" pos:column="38"/></name> <operator pos:line="31" pos:column="39">*<pos:position pos:line="31" pos:column="40"/></operator><operator pos:line="31" pos:column="40">)<pos:position pos:line="31" pos:column="41"/></operator> <operator pos:line="31" pos:column="42">(<pos:position pos:line="31" pos:column="43"/></operator><name pos:line="31" pos:column="43">buffer<pos:position pos:line="31" pos:column="49"/></name> <operator pos:line="31" pos:column="50">+<pos:position pos:line="31" pos:column="51"/></operator> <sizeof pos:line="31" pos:column="52">sizeof <argument_list pos:line="31" pos:column="59">(<argument><expr><name pos:line="31" pos:column="60">pkg_type<pos:position pos:line="31" pos:column="68"/></name></expr></argument>)<pos:position pos:line="31" pos:column="69"/></argument_list></sizeof><operator pos:line="31" pos:column="69">)<pos:position pos:line="31" pos:column="70"/></operator></expr></argument>,
				<argument><expr><sizeof pos:line="32" pos:column="33">sizeof <argument_list pos:line="32" pos:column="40">(<argument><expr><name pos:line="32" pos:column="41">pkg_length<pos:position pos:line="32" pos:column="51"/></name></expr></argument>)<pos:position pos:line="32" pos:column="52"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="32" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="54"/></expr_stmt>

		<expr_stmt><expr><name pos:line="34" pos:column="17">pkg_length<pos:position pos:line="34" pos:column="27"/></name> <operator pos:line="34" pos:column="28">=<pos:position pos:line="34" pos:column="29"/></operator> <call><name pos:line="34" pos:column="30">ntohs<pos:position pos:line="34" pos:column="35"/></name> <argument_list pos:line="34" pos:column="36">(<argument><expr><name pos:line="34" pos:column="37">pkg_length<pos:position pos:line="34" pos:column="47"/></name></expr></argument>)<pos:position pos:line="34" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="49"/></expr_stmt>
		<expr_stmt><expr><name pos:line="35" pos:column="17">pkg_type<pos:position pos:line="35" pos:column="25"/></name> <operator pos:line="35" pos:column="26">=<pos:position pos:line="35" pos:column="27"/></operator> <call><name pos:line="35" pos:column="28">ntohs<pos:position pos:line="35" pos:column="33"/></name> <argument_list pos:line="35" pos:column="34">(<argument><expr><name pos:line="35" pos:column="35">pkg_type<pos:position pos:line="35" pos:column="43"/></name></expr></argument>)<pos:position pos:line="35" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="45"/></expr_stmt>

		<if pos:line="37" pos:column="17">if <condition pos:line="37" pos:column="20">(<expr><name pos:line="37" pos:column="21">pkg_length<pos:position pos:line="37" pos:column="31"/></name> <operator pos:line="37" pos:column="32">&gt;<pos:position pos:line="37" pos:column="36"/></operator> <name pos:line="37" pos:column="34">buffer_size<pos:position pos:line="37" pos:column="45"/></name></expr>)<pos:position pos:line="37" pos:column="46"/></condition><then pos:line="37" pos:column="46">
			<block type="pseudo"><break pos:line="38" pos:column="25">break;<pos:position pos:line="38" pos:column="31"/></break></block></then></if>
		<comment type="block" pos:line="39" pos:column="17">/* Ensure that this loop terminates eventually */</comment>
		<if pos:line="40" pos:column="17">if <condition pos:line="40" pos:column="20">(<expr><name pos:line="40" pos:column="21">pkg_length<pos:position pos:line="40" pos:column="31"/></name> <operator pos:line="40" pos:column="32">&lt;<pos:position pos:line="40" pos:column="36"/></operator> <operator pos:line="40" pos:column="34">(<pos:position pos:line="40" pos:column="35"/></operator><literal type="number" pos:line="40" pos:column="35">2<pos:position pos:line="40" pos:column="36"/></literal> <operator pos:line="40" pos:column="37">*<pos:position pos:line="40" pos:column="38"/></operator> <sizeof pos:line="40" pos:column="39">sizeof <argument_list pos:line="40" pos:column="46">(<argument><expr><name pos:line="40" pos:column="47">uint16_t<pos:position pos:line="40" pos:column="55"/></name></expr></argument>)<pos:position pos:line="40" pos:column="56"/></argument_list></sizeof><operator pos:line="40" pos:column="56">)<pos:position pos:line="40" pos:column="57"/></operator></expr>)<pos:position pos:line="40" pos:column="58"/></condition><then pos:line="40" pos:column="58">
			<block type="pseudo"><break pos:line="41" pos:column="25">break;<pos:position pos:line="41" pos:column="31"/></break></block></then></if>

		<if pos:line="43" pos:column="17">if <condition pos:line="43" pos:column="20">(<expr><name pos:line="43" pos:column="21">pkg_type<pos:position pos:line="43" pos:column="29"/></name> <operator pos:line="43" pos:column="30">==<pos:position pos:line="43" pos:column="32"/></operator> <name pos:line="43" pos:column="33">TYPE_ENCR_AES256<pos:position pos:line="43" pos:column="49"/></name></expr>)<pos:position pos:line="43" pos:column="50"/></condition><then pos:line="43" pos:column="50">
		<block pos:line="44" pos:column="17">{
			<expr_stmt><expr><name pos:line="45" pos:column="25">status<pos:position pos:line="45" pos:column="31"/></name> <operator pos:line="45" pos:column="32">=<pos:position pos:line="45" pos:column="33"/></operator> <call><name pos:line="45" pos:column="34">parse_part_encr_aes256<pos:position pos:line="45" pos:column="56"/></name> <argument_list pos:line="45" pos:column="57">(<argument><expr><name pos:line="45" pos:column="58">se<pos:position pos:line="45" pos:column="60"/></name></expr></argument>,
					<argument><expr><operator pos:line="46" pos:column="41">&amp;<pos:position pos:line="46" pos:column="46"/></operator><name pos:line="46" pos:column="42">buffer<pos:position pos:line="46" pos:column="48"/></name></expr></argument>, <argument><expr><operator pos:line="46" pos:column="50">&amp;<pos:position pos:line="46" pos:column="55"/></operator><name pos:line="46" pos:column="51">buffer_size<pos:position pos:line="46" pos:column="62"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="64">flags<pos:position pos:line="46" pos:column="69"/></name></expr></argument>)<pos:position pos:line="46" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="71"/></expr_stmt>
			<if pos:line="47" pos:column="25">if <condition pos:line="47" pos:column="28">(<expr><name pos:line="47" pos:column="29">status<pos:position pos:line="47" pos:column="35"/></name> <operator pos:line="47" pos:column="36">!=<pos:position pos:line="47" pos:column="38"/></operator> <literal type="number" pos:line="47" pos:column="39">0<pos:position pos:line="47" pos:column="40"/></literal></expr>)<pos:position pos:line="47" pos:column="41"/></condition><then pos:line="47" pos:column="41">
			<block pos:line="48" pos:column="25">{
				<expr_stmt><expr><call><name pos:line="49" pos:column="33">ERROR<pos:position pos:line="49" pos:column="38"/></name> <argument_list pos:line="49" pos:column="39">(<argument><expr><literal type="string" pos:line="49" pos:column="40">"network plugin: Decrypting AES256 "<pos:position pos:line="49" pos:column="76"/></literal>
						<literal type="string" pos:line="50" pos:column="49">"part failed "<pos:position pos:line="50" pos:column="63"/></literal>
						<literal type="string" pos:line="51" pos:column="49">"with status %i."<pos:position pos:line="51" pos:column="66"/></literal></expr></argument>, <argument><expr><name pos:line="51" pos:column="68">status<pos:position pos:line="51" pos:column="74"/></name></expr></argument>)<pos:position pos:line="51" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="76"/></expr_stmt>
				<break pos:line="52" pos:column="33">break;<pos:position pos:line="52" pos:column="39"/></break>
			}<pos:position pos:line="53" pos:column="26"/></block></then></if>
		}<pos:position pos:line="54" pos:column="18"/></block></then>
<cpp:if pos:line="55" pos:column="1">#<cpp:directive pos:line="55" pos:column="2">if<pos:position pos:line="55" pos:column="4"/></cpp:directive> <expr><name pos:line="55" pos:column="5">HAVE_LIBGCRYPT<pos:position pos:line="55" pos:column="19"/></name></expr></cpp:if>
		<elseif pos:line="56" pos:column="17">else <if pos:line="56" pos:column="22">if <condition pos:line="56" pos:column="25">(<expr><operator pos:line="56" pos:column="26">(<pos:position pos:line="56" pos:column="27"/></operator><name><name pos:line="56" pos:column="27">se<pos:position pos:line="56" pos:column="29"/></name><operator pos:line="56" pos:column="29">-&gt;<pos:position pos:line="56" pos:column="34"/></operator><name pos:line="56" pos:column="31">data<pos:position pos:line="56" pos:column="35"/></name><operator pos:line="56" pos:column="35">.<pos:position pos:line="56" pos:column="36"/></operator><name pos:line="56" pos:column="36">server<pos:position pos:line="56" pos:column="42"/></name><operator pos:line="56" pos:column="42">.<pos:position pos:line="56" pos:column="43"/></operator><name pos:line="56" pos:column="43">security_level<pos:position pos:line="56" pos:column="57"/></name></name> <operator pos:line="56" pos:column="58">==<pos:position pos:line="56" pos:column="60"/></operator> <name pos:line="56" pos:column="61">SECURITY_LEVEL_ENCRYPT<pos:position pos:line="56" pos:column="83"/></name><operator pos:line="56" pos:column="83">)<pos:position pos:line="56" pos:column="84"/></operator>
				<operator pos:line="57" pos:column="33">&amp;&amp;<pos:position pos:line="57" pos:column="43"/></operator> <operator pos:line="57" pos:column="36">(<pos:position pos:line="57" pos:column="37"/></operator><name pos:line="57" pos:column="37">packet_was_encrypted<pos:position pos:line="57" pos:column="57"/></name> <operator pos:line="57" pos:column="58">==<pos:position pos:line="57" pos:column="60"/></operator> <literal type="number" pos:line="57" pos:column="61">0<pos:position pos:line="57" pos:column="62"/></literal><operator pos:line="57" pos:column="62">)<pos:position pos:line="57" pos:column="63"/></operator></expr>)<pos:position pos:line="57" pos:column="64"/></condition><then pos:line="57" pos:column="64">
		<block pos:line="58" pos:column="17">{
			<if pos:line="59" pos:column="25">if <condition pos:line="59" pos:column="28">(<expr><name pos:line="59" pos:column="29">printed_ignore_warning<pos:position pos:line="59" pos:column="51"/></name> <operator pos:line="59" pos:column="52">==<pos:position pos:line="59" pos:column="54"/></operator> <literal type="number" pos:line="59" pos:column="55">0<pos:position pos:line="59" pos:column="56"/></literal></expr>)<pos:position pos:line="59" pos:column="57"/></condition><then pos:line="59" pos:column="57">
			<block pos:line="60" pos:column="25">{
				<expr_stmt><expr><call><name pos:line="61" pos:column="33">INFO<pos:position pos:line="61" pos:column="37"/></name> <argument_list pos:line="61" pos:column="38">(<argument><expr><literal type="string" pos:line="61" pos:column="39">"network plugin: Unencrypted packet or "<pos:position pos:line="61" pos:column="79"/></literal>
						<literal type="string" pos:line="62" pos:column="49">"part has been ignored."<pos:position pos:line="62" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="62" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="75"/></expr_stmt>
				<expr_stmt><expr><name pos:line="63" pos:column="33">printed_ignore_warning<pos:position pos:line="63" pos:column="55"/></name> <operator pos:line="63" pos:column="56">=<pos:position pos:line="63" pos:column="57"/></operator> <literal type="number" pos:line="63" pos:column="58">1<pos:position pos:line="63" pos:column="59"/></literal></expr>;<pos:position pos:line="63" pos:column="60"/></expr_stmt>
			}<pos:position pos:line="64" pos:column="26"/></block></then></if>
			<expr_stmt><expr><name pos:line="65" pos:column="25">buffer<pos:position pos:line="65" pos:column="31"/></name> <operator pos:line="65" pos:column="32">=<pos:position pos:line="65" pos:column="33"/></operator> <operator pos:line="65" pos:column="34">(<pos:position pos:line="65" pos:column="35"/></operator><operator pos:line="65" pos:column="35">(<pos:position pos:line="65" pos:column="36"/></operator><name pos:line="65" pos:column="36">char<pos:position pos:line="65" pos:column="40"/></name> <operator pos:line="65" pos:column="41">*<pos:position pos:line="65" pos:column="42"/></operator><operator pos:line="65" pos:column="42">)<pos:position pos:line="65" pos:column="43"/></operator> <name pos:line="65" pos:column="44">buffer<pos:position pos:line="65" pos:column="50"/></name><operator pos:line="65" pos:column="50">)<pos:position pos:line="65" pos:column="51"/></operator> <operator pos:line="65" pos:column="52">+<pos:position pos:line="65" pos:column="53"/></operator> <name pos:line="65" pos:column="54">pkg_length<pos:position pos:line="65" pos:column="64"/></name></expr>;<pos:position pos:line="65" pos:column="65"/></expr_stmt>
			<continue pos:line="66" pos:column="25">continue;<pos:position pos:line="66" pos:column="34"/></continue>
		}<pos:position pos:line="67" pos:column="18"/></block></then></if></elseif>
<cpp:endif pos:line="68" pos:column="1">#<cpp:directive pos:line="68" pos:column="2">endif<pos:position pos:line="68" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="68" pos:column="8">/* HAVE_LIBGCRYPT */</comment>
		<elseif pos:line="69" pos:column="17">else <if pos:line="69" pos:column="22">if <condition pos:line="69" pos:column="25">(<expr><name pos:line="69" pos:column="26">pkg_type<pos:position pos:line="69" pos:column="34"/></name> <operator pos:line="69" pos:column="35">==<pos:position pos:line="69" pos:column="37"/></operator> <name pos:line="69" pos:column="38">TYPE_SIGN_SHA256<pos:position pos:line="69" pos:column="54"/></name></expr>)<pos:position pos:line="69" pos:column="55"/></condition><then pos:line="69" pos:column="55">
		<block pos:line="70" pos:column="17">{
			<expr_stmt><expr><name pos:line="71" pos:column="25">status<pos:position pos:line="71" pos:column="31"/></name> <operator pos:line="71" pos:column="32">=<pos:position pos:line="71" pos:column="33"/></operator> <call><name pos:line="71" pos:column="34">parse_part_sign_sha256<pos:position pos:line="71" pos:column="56"/></name> <argument_list pos:line="71" pos:column="57">(<argument><expr><name pos:line="71" pos:column="58">se<pos:position pos:line="71" pos:column="60"/></name></expr></argument>,
                                        <argument><expr><operator pos:line="72" pos:column="41">&amp;<pos:position pos:line="72" pos:column="46"/></operator><name pos:line="72" pos:column="42">buffer<pos:position pos:line="72" pos:column="48"/></name></expr></argument>, <argument><expr><operator pos:line="72" pos:column="50">&amp;<pos:position pos:line="72" pos:column="55"/></operator><name pos:line="72" pos:column="51">buffer_size<pos:position pos:line="72" pos:column="62"/></name></expr></argument>, <argument><expr><name pos:line="72" pos:column="64">flags<pos:position pos:line="72" pos:column="69"/></name></expr></argument>)<pos:position pos:line="72" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="71"/></expr_stmt>
			<if pos:line="73" pos:column="25">if <condition pos:line="73" pos:column="28">(<expr><name pos:line="73" pos:column="29">status<pos:position pos:line="73" pos:column="35"/></name> <operator pos:line="73" pos:column="36">!=<pos:position pos:line="73" pos:column="38"/></operator> <literal type="number" pos:line="73" pos:column="39">0<pos:position pos:line="73" pos:column="40"/></literal></expr>)<pos:position pos:line="73" pos:column="41"/></condition><then pos:line="73" pos:column="41">
			<block pos:line="74" pos:column="25">{
				<expr_stmt><expr><call><name pos:line="75" pos:column="33">ERROR<pos:position pos:line="75" pos:column="38"/></name> <argument_list pos:line="75" pos:column="39">(<argument><expr><literal type="string" pos:line="75" pos:column="40">"network plugin: Verifying HMAC-SHA-256 "<pos:position pos:line="75" pos:column="81"/></literal>
						<literal type="string" pos:line="76" pos:column="49">"signature failed "<pos:position pos:line="76" pos:column="68"/></literal>
						<literal type="string" pos:line="77" pos:column="49">"with status %i."<pos:position pos:line="77" pos:column="66"/></literal></expr></argument>, <argument><expr><name pos:line="77" pos:column="68">status<pos:position pos:line="77" pos:column="74"/></name></expr></argument>)<pos:position pos:line="77" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="76"/></expr_stmt>
				<break pos:line="78" pos:column="33">break;<pos:position pos:line="78" pos:column="39"/></break>
			}<pos:position pos:line="79" pos:column="26"/></block></then></if>
		}<pos:position pos:line="80" pos:column="18"/></block></then></if></elseif>
<cpp:if pos:line="81" pos:column="1">#<cpp:directive pos:line="81" pos:column="2">if<pos:position pos:line="81" pos:column="4"/></cpp:directive> <expr><name pos:line="81" pos:column="5">HAVE_LIBGCRYPT<pos:position pos:line="81" pos:column="19"/></name></expr></cpp:if>
		<elseif pos:line="82" pos:column="17">else <if pos:line="82" pos:column="22">if <condition pos:line="82" pos:column="25">(<expr><operator pos:line="82" pos:column="26">(<pos:position pos:line="82" pos:column="27"/></operator><name><name pos:line="82" pos:column="27">se<pos:position pos:line="82" pos:column="29"/></name><operator pos:line="82" pos:column="29">-&gt;<pos:position pos:line="82" pos:column="34"/></operator><name pos:line="82" pos:column="31">data<pos:position pos:line="82" pos:column="35"/></name><operator pos:line="82" pos:column="35">.<pos:position pos:line="82" pos:column="36"/></operator><name pos:line="82" pos:column="36">server<pos:position pos:line="82" pos:column="42"/></name><operator pos:line="82" pos:column="42">.<pos:position pos:line="82" pos:column="43"/></operator><name pos:line="82" pos:column="43">security_level<pos:position pos:line="82" pos:column="57"/></name></name> <operator pos:line="82" pos:column="58">==<pos:position pos:line="82" pos:column="60"/></operator> <name pos:line="82" pos:column="61">SECURITY_LEVEL_SIGN<pos:position pos:line="82" pos:column="80"/></name><operator pos:line="82" pos:column="80">)<pos:position pos:line="82" pos:column="81"/></operator>
				<operator pos:line="83" pos:column="33">&amp;&amp;<pos:position pos:line="83" pos:column="43"/></operator> <operator pos:line="83" pos:column="36">(<pos:position pos:line="83" pos:column="37"/></operator><name pos:line="83" pos:column="37">packet_was_encrypted<pos:position pos:line="83" pos:column="57"/></name> <operator pos:line="83" pos:column="58">==<pos:position pos:line="83" pos:column="60"/></operator> <literal type="number" pos:line="83" pos:column="61">0<pos:position pos:line="83" pos:column="62"/></literal><operator pos:line="83" pos:column="62">)<pos:position pos:line="83" pos:column="63"/></operator>
				<operator pos:line="84" pos:column="33">&amp;&amp;<pos:position pos:line="84" pos:column="43"/></operator> <operator pos:line="84" pos:column="36">(<pos:position pos:line="84" pos:column="37"/></operator><name pos:line="84" pos:column="37">packet_was_signed<pos:position pos:line="84" pos:column="54"/></name> <operator pos:line="84" pos:column="55">==<pos:position pos:line="84" pos:column="57"/></operator> <literal type="number" pos:line="84" pos:column="58">0<pos:position pos:line="84" pos:column="59"/></literal><operator pos:line="84" pos:column="59">)<pos:position pos:line="84" pos:column="60"/></operator></expr>)<pos:position pos:line="84" pos:column="61"/></condition><then pos:line="84" pos:column="61">
		<block pos:line="85" pos:column="17">{
			<if pos:line="86" pos:column="25">if <condition pos:line="86" pos:column="28">(<expr><name pos:line="86" pos:column="29">printed_ignore_warning<pos:position pos:line="86" pos:column="51"/></name> <operator pos:line="86" pos:column="52">==<pos:position pos:line="86" pos:column="54"/></operator> <literal type="number" pos:line="86" pos:column="55">0<pos:position pos:line="86" pos:column="56"/></literal></expr>)<pos:position pos:line="86" pos:column="57"/></condition><then pos:line="86" pos:column="57">
			<block pos:line="87" pos:column="25">{
				<expr_stmt><expr><call><name pos:line="88" pos:column="33">INFO<pos:position pos:line="88" pos:column="37"/></name> <argument_list pos:line="88" pos:column="38">(<argument><expr><literal type="string" pos:line="88" pos:column="39">"network plugin: Unsigned packet or "<pos:position pos:line="88" pos:column="76"/></literal>
						<literal type="string" pos:line="89" pos:column="49">"part has been ignored."<pos:position pos:line="89" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="89" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="75"/></expr_stmt>
				<expr_stmt><expr><name pos:line="90" pos:column="33">printed_ignore_warning<pos:position pos:line="90" pos:column="55"/></name> <operator pos:line="90" pos:column="56">=<pos:position pos:line="90" pos:column="57"/></operator> <literal type="number" pos:line="90" pos:column="58">1<pos:position pos:line="90" pos:column="59"/></literal></expr>;<pos:position pos:line="90" pos:column="60"/></expr_stmt>
			}<pos:position pos:line="91" pos:column="26"/></block></then></if>
			<expr_stmt><expr><name pos:line="92" pos:column="25">buffer<pos:position pos:line="92" pos:column="31"/></name> <operator pos:line="92" pos:column="32">=<pos:position pos:line="92" pos:column="33"/></operator> <operator pos:line="92" pos:column="34">(<pos:position pos:line="92" pos:column="35"/></operator><operator pos:line="92" pos:column="35">(<pos:position pos:line="92" pos:column="36"/></operator><name pos:line="92" pos:column="36">char<pos:position pos:line="92" pos:column="40"/></name> <operator pos:line="92" pos:column="41">*<pos:position pos:line="92" pos:column="42"/></operator><operator pos:line="92" pos:column="42">)<pos:position pos:line="92" pos:column="43"/></operator> <name pos:line="92" pos:column="44">buffer<pos:position pos:line="92" pos:column="50"/></name><operator pos:line="92" pos:column="50">)<pos:position pos:line="92" pos:column="51"/></operator> <operator pos:line="92" pos:column="52">+<pos:position pos:line="92" pos:column="53"/></operator> <name pos:line="92" pos:column="54">pkg_length<pos:position pos:line="92" pos:column="64"/></name></expr>;<pos:position pos:line="92" pos:column="65"/></expr_stmt>
			<continue pos:line="93" pos:column="25">continue;<pos:position pos:line="93" pos:column="34"/></continue>
		}<pos:position pos:line="94" pos:column="18"/></block></then></if></elseif>
<cpp:endif pos:line="95" pos:column="1">#<cpp:directive pos:line="95" pos:column="2">endif<pos:position pos:line="95" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="95" pos:column="8">/* HAVE_LIBGCRYPT */</comment>
		<elseif pos:line="96" pos:column="17">else <if pos:line="96" pos:column="22">if <condition pos:line="96" pos:column="25">(<expr><name pos:line="96" pos:column="26">pkg_type<pos:position pos:line="96" pos:column="34"/></name> <operator pos:line="96" pos:column="35">==<pos:position pos:line="96" pos:column="37"/></operator> <name pos:line="96" pos:column="38">TYPE_VALUES<pos:position pos:line="96" pos:column="49"/></name></expr>)<pos:position pos:line="96" pos:column="50"/></condition><then pos:line="96" pos:column="50">
		<block pos:line="97" pos:column="17">{
			<expr_stmt><expr><name pos:line="98" pos:column="25">status<pos:position pos:line="98" pos:column="31"/></name> <operator pos:line="98" pos:column="32">=<pos:position pos:line="98" pos:column="33"/></operator> <call><name pos:line="98" pos:column="34">parse_part_values<pos:position pos:line="98" pos:column="51"/></name> <argument_list pos:line="98" pos:column="52">(<argument><expr><operator pos:line="98" pos:column="53">&amp;<pos:position pos:line="98" pos:column="58"/></operator><name pos:line="98" pos:column="54">buffer<pos:position pos:line="98" pos:column="60"/></name></expr></argument>, <argument><expr><operator pos:line="98" pos:column="62">&amp;<pos:position pos:line="98" pos:column="67"/></operator><name pos:line="98" pos:column="63">buffer_size<pos:position pos:line="98" pos:column="74"/></name></expr></argument>,
					<argument><expr><operator pos:line="99" pos:column="41">&amp;<pos:position pos:line="99" pos:column="46"/></operator><name><name pos:line="99" pos:column="42">vl<pos:position pos:line="99" pos:column="44"/></name><operator pos:line="99" pos:column="44">.<pos:position pos:line="99" pos:column="45"/></operator><name pos:line="99" pos:column="45">values<pos:position pos:line="99" pos:column="51"/></name></name></expr></argument>, <argument><expr><operator pos:line="99" pos:column="53">&amp;<pos:position pos:line="99" pos:column="58"/></operator><name><name pos:line="99" pos:column="54">vl<pos:position pos:line="99" pos:column="56"/></name><operator pos:line="99" pos:column="56">.<pos:position pos:line="99" pos:column="57"/></operator><name pos:line="99" pos:column="57">values_len<pos:position pos:line="99" pos:column="67"/></name></name></expr></argument>)<pos:position pos:line="99" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="99" pos:column="69"/></expr_stmt>
			<if pos:line="100" pos:column="25">if <condition pos:line="100" pos:column="28">(<expr><name pos:line="100" pos:column="29">status<pos:position pos:line="100" pos:column="35"/></name> <operator pos:line="100" pos:column="36">!=<pos:position pos:line="100" pos:column="38"/></operator> <literal type="number" pos:line="100" pos:column="39">0<pos:position pos:line="100" pos:column="40"/></literal></expr>)<pos:position pos:line="100" pos:column="41"/></condition><then pos:line="100" pos:column="41">
				<block type="pseudo"><break pos:line="101" pos:column="33">break;<pos:position pos:line="101" pos:column="39"/></break></block></then></if>

			<expr_stmt><expr><call><name pos:line="103" pos:column="25">network_dispatch_values<pos:position pos:line="103" pos:column="48"/></name> <argument_list pos:line="103" pos:column="49">(<argument><expr><operator pos:line="103" pos:column="50">&amp;<pos:position pos:line="103" pos:column="55"/></operator><name pos:line="103" pos:column="51">vl<pos:position pos:line="103" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="103" pos:column="55">username<pos:position pos:line="103" pos:column="63"/></name></expr></argument>)<pos:position pos:line="103" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="103" pos:column="65"/></expr_stmt>

			<expr_stmt><expr><call><name pos:line="105" pos:column="25">sfree<pos:position pos:line="105" pos:column="30"/></name> <argument_list pos:line="105" pos:column="31">(<argument><expr><name><name pos:line="105" pos:column="32">vl<pos:position pos:line="105" pos:column="34"/></name><operator pos:line="105" pos:column="34">.<pos:position pos:line="105" pos:column="35"/></operator><name pos:line="105" pos:column="35">values<pos:position pos:line="105" pos:column="41"/></name></name></expr></argument>)<pos:position pos:line="105" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="105" pos:column="43"/></expr_stmt>
		}<pos:position pos:line="106" pos:column="18"/></block></then></if></elseif>
		<elseif pos:line="107" pos:column="17">else <if pos:line="107" pos:column="22">if <condition pos:line="107" pos:column="25">(<expr><name pos:line="107" pos:column="26">pkg_type<pos:position pos:line="107" pos:column="34"/></name> <operator pos:line="107" pos:column="35">==<pos:position pos:line="107" pos:column="37"/></operator> <name pos:line="107" pos:column="38">TYPE_TIME<pos:position pos:line="107" pos:column="47"/></name></expr>)<pos:position pos:line="107" pos:column="48"/></condition><then pos:line="107" pos:column="48">
		<block pos:line="108" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="109" pos:column="25">uint64_t<pos:position pos:line="109" pos:column="33"/></name></type> <name pos:line="109" pos:column="34">tmp<pos:position pos:line="109" pos:column="37"/></name> <init pos:line="109" pos:column="38">= <expr><literal type="number" pos:line="109" pos:column="40">0<pos:position pos:line="109" pos:column="41"/></literal></expr></init></decl>;<pos:position pos:line="109" pos:column="42"/></decl_stmt>
			<expr_stmt><expr><name pos:line="110" pos:column="25">status<pos:position pos:line="110" pos:column="31"/></name> <operator pos:line="110" pos:column="32">=<pos:position pos:line="110" pos:column="33"/></operator> <call><name pos:line="110" pos:column="34">parse_part_number<pos:position pos:line="110" pos:column="51"/></name> <argument_list pos:line="110" pos:column="52">(<argument><expr><operator pos:line="110" pos:column="53">&amp;<pos:position pos:line="110" pos:column="58"/></operator><name pos:line="110" pos:column="54">buffer<pos:position pos:line="110" pos:column="60"/></name></expr></argument>, <argument><expr><operator pos:line="110" pos:column="62">&amp;<pos:position pos:line="110" pos:column="67"/></operator><name pos:line="110" pos:column="63">buffer_size<pos:position pos:line="110" pos:column="74"/></name></expr></argument>,
					<argument><expr><operator pos:line="111" pos:column="41">&amp;<pos:position pos:line="111" pos:column="46"/></operator><name pos:line="111" pos:column="42">tmp<pos:position pos:line="111" pos:column="45"/></name></expr></argument>)<pos:position pos:line="111" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="111" pos:column="47"/></expr_stmt>
			<if pos:line="112" pos:column="25">if <condition pos:line="112" pos:column="28">(<expr><name pos:line="112" pos:column="29">status<pos:position pos:line="112" pos:column="35"/></name> <operator pos:line="112" pos:column="36">==<pos:position pos:line="112" pos:column="38"/></operator> <literal type="number" pos:line="112" pos:column="39">0<pos:position pos:line="112" pos:column="40"/></literal></expr>)<pos:position pos:line="112" pos:column="41"/></condition><then pos:line="112" pos:column="41">
			<block pos:line="113" pos:column="25">{
				<expr_stmt><expr><name><name pos:line="114" pos:column="33">vl<pos:position pos:line="114" pos:column="35"/></name><operator pos:line="114" pos:column="35">.<pos:position pos:line="114" pos:column="36"/></operator><name pos:line="114" pos:column="36">time<pos:position pos:line="114" pos:column="40"/></name></name> <operator pos:line="114" pos:column="41">=<pos:position pos:line="114" pos:column="42"/></operator> <call><name pos:line="114" pos:column="43">TIME_T_TO_CDTIME_T<pos:position pos:line="114" pos:column="61"/></name> <argument_list pos:line="114" pos:column="62">(<argument><expr><name pos:line="114" pos:column="63">tmp<pos:position pos:line="114" pos:column="66"/></name></expr></argument>)<pos:position pos:line="114" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="114" pos:column="68"/></expr_stmt>
				<expr_stmt><expr><name><name pos:line="115" pos:column="33">n<pos:position pos:line="115" pos:column="34"/></name><operator pos:line="115" pos:column="34">.<pos:position pos:line="115" pos:column="35"/></operator><name pos:line="115" pos:column="35">time<pos:position pos:line="115" pos:column="39"/></name></name>  <operator pos:line="115" pos:column="41">=<pos:position pos:line="115" pos:column="42"/></operator> <call><name pos:line="115" pos:column="43">TIME_T_TO_CDTIME_T<pos:position pos:line="115" pos:column="61"/></name> <argument_list pos:line="115" pos:column="62">(<argument><expr><name pos:line="115" pos:column="63">tmp<pos:position pos:line="115" pos:column="66"/></name></expr></argument>)<pos:position pos:line="115" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="115" pos:column="68"/></expr_stmt>
			}<pos:position pos:line="116" pos:column="26"/></block></then></if>
		}<pos:position pos:line="117" pos:column="18"/></block></then></if></elseif>
		<elseif pos:line="118" pos:column="17">else <if pos:line="118" pos:column="22">if <condition pos:line="118" pos:column="25">(<expr><name pos:line="118" pos:column="26">pkg_type<pos:position pos:line="118" pos:column="34"/></name> <operator pos:line="118" pos:column="35">==<pos:position pos:line="118" pos:column="37"/></operator> <name pos:line="118" pos:column="38">TYPE_TIME_HR<pos:position pos:line="118" pos:column="50"/></name></expr>)<pos:position pos:line="118" pos:column="51"/></condition><then pos:line="118" pos:column="51">
		<block pos:line="119" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="120" pos:column="25">uint64_t<pos:position pos:line="120" pos:column="33"/></name></type> <name pos:line="120" pos:column="34">tmp<pos:position pos:line="120" pos:column="37"/></name> <init pos:line="120" pos:column="38">= <expr><literal type="number" pos:line="120" pos:column="40">0<pos:position pos:line="120" pos:column="41"/></literal></expr></init></decl>;<pos:position pos:line="120" pos:column="42"/></decl_stmt>
			<expr_stmt><expr><name pos:line="121" pos:column="25">status<pos:position pos:line="121" pos:column="31"/></name> <operator pos:line="121" pos:column="32">=<pos:position pos:line="121" pos:column="33"/></operator> <call><name pos:line="121" pos:column="34">parse_part_number<pos:position pos:line="121" pos:column="51"/></name> <argument_list pos:line="121" pos:column="52">(<argument><expr><operator pos:line="121" pos:column="53">&amp;<pos:position pos:line="121" pos:column="58"/></operator><name pos:line="121" pos:column="54">buffer<pos:position pos:line="121" pos:column="60"/></name></expr></argument>, <argument><expr><operator pos:line="121" pos:column="62">&amp;<pos:position pos:line="121" pos:column="67"/></operator><name pos:line="121" pos:column="63">buffer_size<pos:position pos:line="121" pos:column="74"/></name></expr></argument>,
					<argument><expr><operator pos:line="122" pos:column="41">&amp;<pos:position pos:line="122" pos:column="46"/></operator><name pos:line="122" pos:column="42">tmp<pos:position pos:line="122" pos:column="45"/></name></expr></argument>)<pos:position pos:line="122" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="122" pos:column="47"/></expr_stmt>
			<if pos:line="123" pos:column="25">if <condition pos:line="123" pos:column="28">(<expr><name pos:line="123" pos:column="29">status<pos:position pos:line="123" pos:column="35"/></name> <operator pos:line="123" pos:column="36">==<pos:position pos:line="123" pos:column="38"/></operator> <literal type="number" pos:line="123" pos:column="39">0<pos:position pos:line="123" pos:column="40"/></literal></expr>)<pos:position pos:line="123" pos:column="41"/></condition><then pos:line="123" pos:column="41">
			<block pos:line="124" pos:column="25">{
				<expr_stmt><expr><name><name pos:line="125" pos:column="33">vl<pos:position pos:line="125" pos:column="35"/></name><operator pos:line="125" pos:column="35">.<pos:position pos:line="125" pos:column="36"/></operator><name pos:line="125" pos:column="36">time<pos:position pos:line="125" pos:column="40"/></name></name> <operator pos:line="125" pos:column="41">=<pos:position pos:line="125" pos:column="42"/></operator> <operator pos:line="125" pos:column="43">(<pos:position pos:line="125" pos:column="44"/></operator><name pos:line="125" pos:column="44">cdtime_t<pos:position pos:line="125" pos:column="52"/></name><operator pos:line="125" pos:column="52">)<pos:position pos:line="125" pos:column="53"/></operator> <name pos:line="125" pos:column="54">tmp<pos:position pos:line="125" pos:column="57"/></name></expr>;<pos:position pos:line="125" pos:column="58"/></expr_stmt>
				<expr_stmt><expr><name><name pos:line="126" pos:column="33">n<pos:position pos:line="126" pos:column="34"/></name><operator pos:line="126" pos:column="34">.<pos:position pos:line="126" pos:column="35"/></operator><name pos:line="126" pos:column="35">time<pos:position pos:line="126" pos:column="39"/></name></name>  <operator pos:line="126" pos:column="41">=<pos:position pos:line="126" pos:column="42"/></operator> <operator pos:line="126" pos:column="43">(<pos:position pos:line="126" pos:column="44"/></operator><name pos:line="126" pos:column="44">cdtime_t<pos:position pos:line="126" pos:column="52"/></name><operator pos:line="126" pos:column="52">)<pos:position pos:line="126" pos:column="53"/></operator> <name pos:line="126" pos:column="54">tmp<pos:position pos:line="126" pos:column="57"/></name></expr>;<pos:position pos:line="126" pos:column="58"/></expr_stmt>
			}<pos:position pos:line="127" pos:column="26"/></block></then></if>
		}<pos:position pos:line="128" pos:column="18"/></block></then></if></elseif>
		<elseif pos:line="129" pos:column="17">else <if pos:line="129" pos:column="22">if <condition pos:line="129" pos:column="25">(<expr><name pos:line="129" pos:column="26">pkg_type<pos:position pos:line="129" pos:column="34"/></name> <operator pos:line="129" pos:column="35">==<pos:position pos:line="129" pos:column="37"/></operator> <name pos:line="129" pos:column="38">TYPE_INTERVAL<pos:position pos:line="129" pos:column="51"/></name></expr>)<pos:position pos:line="129" pos:column="52"/></condition><then pos:line="129" pos:column="52">
		<block pos:line="130" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="131" pos:column="25">uint64_t<pos:position pos:line="131" pos:column="33"/></name></type> <name pos:line="131" pos:column="34">tmp<pos:position pos:line="131" pos:column="37"/></name> <init pos:line="131" pos:column="38">= <expr><literal type="number" pos:line="131" pos:column="40">0<pos:position pos:line="131" pos:column="41"/></literal></expr></init></decl>;<pos:position pos:line="131" pos:column="42"/></decl_stmt>
			<expr_stmt><expr><name pos:line="132" pos:column="25">status<pos:position pos:line="132" pos:column="31"/></name> <operator pos:line="132" pos:column="32">=<pos:position pos:line="132" pos:column="33"/></operator> <call><name pos:line="132" pos:column="34">parse_part_number<pos:position pos:line="132" pos:column="51"/></name> <argument_list pos:line="132" pos:column="52">(<argument><expr><operator pos:line="132" pos:column="53">&amp;<pos:position pos:line="132" pos:column="58"/></operator><name pos:line="132" pos:column="54">buffer<pos:position pos:line="132" pos:column="60"/></name></expr></argument>, <argument><expr><operator pos:line="132" pos:column="62">&amp;<pos:position pos:line="132" pos:column="67"/></operator><name pos:line="132" pos:column="63">buffer_size<pos:position pos:line="132" pos:column="74"/></name></expr></argument>,
					<argument><expr><operator pos:line="133" pos:column="41">&amp;<pos:position pos:line="133" pos:column="46"/></operator><name pos:line="133" pos:column="42">tmp<pos:position pos:line="133" pos:column="45"/></name></expr></argument>)<pos:position pos:line="133" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="133" pos:column="47"/></expr_stmt>
			<if pos:line="134" pos:column="25">if <condition pos:line="134" pos:column="28">(<expr><name pos:line="134" pos:column="29">status<pos:position pos:line="134" pos:column="35"/></name> <operator pos:line="134" pos:column="36">==<pos:position pos:line="134" pos:column="38"/></operator> <literal type="number" pos:line="134" pos:column="39">0<pos:position pos:line="134" pos:column="40"/></literal></expr>)<pos:position pos:line="134" pos:column="41"/></condition><then pos:line="134" pos:column="41">
				<block type="pseudo"><expr_stmt><expr><name><name pos:line="135" pos:column="33">vl<pos:position pos:line="135" pos:column="35"/></name><operator pos:line="135" pos:column="35">.<pos:position pos:line="135" pos:column="36"/></operator><name pos:line="135" pos:column="36">interval<pos:position pos:line="135" pos:column="44"/></name></name> <operator pos:line="135" pos:column="45">=<pos:position pos:line="135" pos:column="46"/></operator> <call><name pos:line="135" pos:column="47">TIME_T_TO_CDTIME_T<pos:position pos:line="135" pos:column="65"/></name> <argument_list pos:line="135" pos:column="66">(<argument><expr><name pos:line="135" pos:column="67">tmp<pos:position pos:line="135" pos:column="70"/></name></expr></argument>)<pos:position pos:line="135" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="135" pos:column="72"/></expr_stmt></block></then></if>
		}<pos:position pos:line="136" pos:column="18"/></block></then></if></elseif>
		<elseif pos:line="137" pos:column="17">else <if pos:line="137" pos:column="22">if <condition pos:line="137" pos:column="25">(<expr><name pos:line="137" pos:column="26">pkg_type<pos:position pos:line="137" pos:column="34"/></name> <operator pos:line="137" pos:column="35">==<pos:position pos:line="137" pos:column="37"/></operator> <name pos:line="137" pos:column="38">TYPE_INTERVAL_HR<pos:position pos:line="137" pos:column="54"/></name></expr>)<pos:position pos:line="137" pos:column="55"/></condition><then pos:line="137" pos:column="55">
		<block pos:line="138" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="139" pos:column="25">uint64_t<pos:position pos:line="139" pos:column="33"/></name></type> <name pos:line="139" pos:column="34">tmp<pos:position pos:line="139" pos:column="37"/></name> <init pos:line="139" pos:column="38">= <expr><literal type="number" pos:line="139" pos:column="40">0<pos:position pos:line="139" pos:column="41"/></literal></expr></init></decl>;<pos:position pos:line="139" pos:column="42"/></decl_stmt>
			<expr_stmt><expr><name pos:line="140" pos:column="25">status<pos:position pos:line="140" pos:column="31"/></name> <operator pos:line="140" pos:column="32">=<pos:position pos:line="140" pos:column="33"/></operator> <call><name pos:line="140" pos:column="34">parse_part_number<pos:position pos:line="140" pos:column="51"/></name> <argument_list pos:line="140" pos:column="52">(<argument><expr><operator pos:line="140" pos:column="53">&amp;<pos:position pos:line="140" pos:column="58"/></operator><name pos:line="140" pos:column="54">buffer<pos:position pos:line="140" pos:column="60"/></name></expr></argument>, <argument><expr><operator pos:line="140" pos:column="62">&amp;<pos:position pos:line="140" pos:column="67"/></operator><name pos:line="140" pos:column="63">buffer_size<pos:position pos:line="140" pos:column="74"/></name></expr></argument>,
					<argument><expr><operator pos:line="141" pos:column="41">&amp;<pos:position pos:line="141" pos:column="46"/></operator><name pos:line="141" pos:column="42">tmp<pos:position pos:line="141" pos:column="45"/></name></expr></argument>)<pos:position pos:line="141" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="141" pos:column="47"/></expr_stmt>
			<if pos:line="142" pos:column="25">if <condition pos:line="142" pos:column="28">(<expr><name pos:line="142" pos:column="29">status<pos:position pos:line="142" pos:column="35"/></name> <operator pos:line="142" pos:column="36">==<pos:position pos:line="142" pos:column="38"/></operator> <literal type="number" pos:line="142" pos:column="39">0<pos:position pos:line="142" pos:column="40"/></literal></expr>)<pos:position pos:line="142" pos:column="41"/></condition><then pos:line="142" pos:column="41">
				<block type="pseudo"><expr_stmt><expr><name><name pos:line="143" pos:column="33">vl<pos:position pos:line="143" pos:column="35"/></name><operator pos:line="143" pos:column="35">.<pos:position pos:line="143" pos:column="36"/></operator><name pos:line="143" pos:column="36">interval<pos:position pos:line="143" pos:column="44"/></name></name> <operator pos:line="143" pos:column="45">=<pos:position pos:line="143" pos:column="46"/></operator> <operator pos:line="143" pos:column="47">(<pos:position pos:line="143" pos:column="48"/></operator><name pos:line="143" pos:column="48">cdtime_t<pos:position pos:line="143" pos:column="56"/></name><operator pos:line="143" pos:column="56">)<pos:position pos:line="143" pos:column="57"/></operator> <name pos:line="143" pos:column="58">tmp<pos:position pos:line="143" pos:column="61"/></name></expr>;<pos:position pos:line="143" pos:column="62"/></expr_stmt></block></then></if>
		}<pos:position pos:line="144" pos:column="18"/></block></then></if></elseif>
		<elseif pos:line="145" pos:column="17">else <if pos:line="145" pos:column="22">if <condition pos:line="145" pos:column="25">(<expr><name pos:line="145" pos:column="26">pkg_type<pos:position pos:line="145" pos:column="34"/></name> <operator pos:line="145" pos:column="35">==<pos:position pos:line="145" pos:column="37"/></operator> <name pos:line="145" pos:column="38">TYPE_HOST<pos:position pos:line="145" pos:column="47"/></name></expr>)<pos:position pos:line="145" pos:column="48"/></condition><then pos:line="145" pos:column="48">
		<block pos:line="146" pos:column="17">{
			<expr_stmt><expr><name pos:line="147" pos:column="25">status<pos:position pos:line="147" pos:column="31"/></name> <operator pos:line="147" pos:column="32">=<pos:position pos:line="147" pos:column="33"/></operator> <call><name pos:line="147" pos:column="34">parse_part_string<pos:position pos:line="147" pos:column="51"/></name> <argument_list pos:line="147" pos:column="52">(<argument><expr><operator pos:line="147" pos:column="53">&amp;<pos:position pos:line="147" pos:column="58"/></operator><name pos:line="147" pos:column="54">buffer<pos:position pos:line="147" pos:column="60"/></name></expr></argument>, <argument><expr><operator pos:line="147" pos:column="62">&amp;<pos:position pos:line="147" pos:column="67"/></operator><name pos:line="147" pos:column="63">buffer_size<pos:position pos:line="147" pos:column="74"/></name></expr></argument>,
					<argument><expr><name><name pos:line="148" pos:column="41">vl<pos:position pos:line="148" pos:column="43"/></name><operator pos:line="148" pos:column="43">.<pos:position pos:line="148" pos:column="44"/></operator><name pos:line="148" pos:column="44">host<pos:position pos:line="148" pos:column="48"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="148" pos:column="50">sizeof <argument_list pos:line="148" pos:column="57">(<argument><expr><name><name pos:line="148" pos:column="58">vl<pos:position pos:line="148" pos:column="60"/></name><operator pos:line="148" pos:column="60">.<pos:position pos:line="148" pos:column="61"/></operator><name pos:line="148" pos:column="61">host<pos:position pos:line="148" pos:column="65"/></name></name></expr></argument>)<pos:position pos:line="148" pos:column="66"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="148" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="148" pos:column="68"/></expr_stmt>
			<if pos:line="149" pos:column="25">if <condition pos:line="149" pos:column="28">(<expr><name pos:line="149" pos:column="29">status<pos:position pos:line="149" pos:column="35"/></name> <operator pos:line="149" pos:column="36">==<pos:position pos:line="149" pos:column="38"/></operator> <literal type="number" pos:line="149" pos:column="39">0<pos:position pos:line="149" pos:column="40"/></literal></expr>)<pos:position pos:line="149" pos:column="41"/></condition><then pos:line="149" pos:column="41">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="150" pos:column="33">sstrncpy<pos:position pos:line="150" pos:column="41"/></name> <argument_list pos:line="150" pos:column="42">(<argument><expr><name><name pos:line="150" pos:column="43">n<pos:position pos:line="150" pos:column="44"/></name><operator pos:line="150" pos:column="44">.<pos:position pos:line="150" pos:column="45"/></operator><name pos:line="150" pos:column="45">host<pos:position pos:line="150" pos:column="49"/></name></name></expr></argument>, <argument><expr><name><name pos:line="150" pos:column="51">vl<pos:position pos:line="150" pos:column="53"/></name><operator pos:line="150" pos:column="53">.<pos:position pos:line="150" pos:column="54"/></operator><name pos:line="150" pos:column="54">host<pos:position pos:line="150" pos:column="58"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="150" pos:column="60">sizeof <argument_list pos:line="150" pos:column="67">(<argument><expr><name><name pos:line="150" pos:column="68">n<pos:position pos:line="150" pos:column="69"/></name><operator pos:line="150" pos:column="69">.<pos:position pos:line="150" pos:column="70"/></operator><name pos:line="150" pos:column="70">host<pos:position pos:line="150" pos:column="74"/></name></name></expr></argument>)<pos:position pos:line="150" pos:column="75"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="150" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="150" pos:column="77"/></expr_stmt></block></then></if>
		}<pos:position pos:line="151" pos:column="18"/></block></then></if></elseif>
		<elseif pos:line="152" pos:column="17">else <if pos:line="152" pos:column="22">if <condition pos:line="152" pos:column="25">(<expr><name pos:line="152" pos:column="26">pkg_type<pos:position pos:line="152" pos:column="34"/></name> <operator pos:line="152" pos:column="35">==<pos:position pos:line="152" pos:column="37"/></operator> <name pos:line="152" pos:column="38">TYPE_PLUGIN<pos:position pos:line="152" pos:column="49"/></name></expr>)<pos:position pos:line="152" pos:column="50"/></condition><then pos:line="152" pos:column="50">
		<block pos:line="153" pos:column="17">{
			<expr_stmt><expr><name pos:line="154" pos:column="25">status<pos:position pos:line="154" pos:column="31"/></name> <operator pos:line="154" pos:column="32">=<pos:position pos:line="154" pos:column="33"/></operator> <call><name pos:line="154" pos:column="34">parse_part_string<pos:position pos:line="154" pos:column="51"/></name> <argument_list pos:line="154" pos:column="52">(<argument><expr><operator pos:line="154" pos:column="53">&amp;<pos:position pos:line="154" pos:column="58"/></operator><name pos:line="154" pos:column="54">buffer<pos:position pos:line="154" pos:column="60"/></name></expr></argument>, <argument><expr><operator pos:line="154" pos:column="62">&amp;<pos:position pos:line="154" pos:column="67"/></operator><name pos:line="154" pos:column="63">buffer_size<pos:position pos:line="154" pos:column="74"/></name></expr></argument>,
					<argument><expr><name><name pos:line="155" pos:column="41">vl<pos:position pos:line="155" pos:column="43"/></name><operator pos:line="155" pos:column="43">.<pos:position pos:line="155" pos:column="44"/></operator><name pos:line="155" pos:column="44">plugin<pos:position pos:line="155" pos:column="50"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="155" pos:column="52">sizeof <argument_list pos:line="155" pos:column="59">(<argument><expr><name><name pos:line="155" pos:column="60">vl<pos:position pos:line="155" pos:column="62"/></name><operator pos:line="155" pos:column="62">.<pos:position pos:line="155" pos:column="63"/></operator><name pos:line="155" pos:column="63">plugin<pos:position pos:line="155" pos:column="69"/></name></name></expr></argument>)<pos:position pos:line="155" pos:column="70"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="155" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="155" pos:column="72"/></expr_stmt>
			<if pos:line="156" pos:column="25">if <condition pos:line="156" pos:column="28">(<expr><name pos:line="156" pos:column="29">status<pos:position pos:line="156" pos:column="35"/></name> <operator pos:line="156" pos:column="36">==<pos:position pos:line="156" pos:column="38"/></operator> <literal type="number" pos:line="156" pos:column="39">0<pos:position pos:line="156" pos:column="40"/></literal></expr>)<pos:position pos:line="156" pos:column="41"/></condition><then pos:line="156" pos:column="41">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="157" pos:column="33">sstrncpy<pos:position pos:line="157" pos:column="41"/></name> <argument_list pos:line="157" pos:column="42">(<argument><expr><name><name pos:line="157" pos:column="43">n<pos:position pos:line="157" pos:column="44"/></name><operator pos:line="157" pos:column="44">.<pos:position pos:line="157" pos:column="45"/></operator><name pos:line="157" pos:column="45">plugin<pos:position pos:line="157" pos:column="51"/></name></name></expr></argument>, <argument><expr><name><name pos:line="157" pos:column="53">vl<pos:position pos:line="157" pos:column="55"/></name><operator pos:line="157" pos:column="55">.<pos:position pos:line="157" pos:column="56"/></operator><name pos:line="157" pos:column="56">plugin<pos:position pos:line="157" pos:column="62"/></name></name></expr></argument>,
						<argument><expr><sizeof pos:line="158" pos:column="49">sizeof <argument_list pos:line="158" pos:column="56">(<argument><expr><name><name pos:line="158" pos:column="57">n<pos:position pos:line="158" pos:column="58"/></name><operator pos:line="158" pos:column="58">.<pos:position pos:line="158" pos:column="59"/></operator><name pos:line="158" pos:column="59">plugin<pos:position pos:line="158" pos:column="65"/></name></name></expr></argument>)<pos:position pos:line="158" pos:column="66"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="158" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="158" pos:column="68"/></expr_stmt></block></then></if>
		}<pos:position pos:line="159" pos:column="18"/></block></then></if></elseif>
		<elseif pos:line="160" pos:column="17">else <if pos:line="160" pos:column="22">if <condition pos:line="160" pos:column="25">(<expr><name pos:line="160" pos:column="26">pkg_type<pos:position pos:line="160" pos:column="34"/></name> <operator pos:line="160" pos:column="35">==<pos:position pos:line="160" pos:column="37"/></operator> <name pos:line="160" pos:column="38">TYPE_PLUGIN_INSTANCE<pos:position pos:line="160" pos:column="58"/></name></expr>)<pos:position pos:line="160" pos:column="59"/></condition><then pos:line="160" pos:column="59">
		<block pos:line="161" pos:column="17">{
			<expr_stmt><expr><name pos:line="162" pos:column="25">status<pos:position pos:line="162" pos:column="31"/></name> <operator pos:line="162" pos:column="32">=<pos:position pos:line="162" pos:column="33"/></operator> <call><name pos:line="162" pos:column="34">parse_part_string<pos:position pos:line="162" pos:column="51"/></name> <argument_list pos:line="162" pos:column="52">(<argument><expr><operator pos:line="162" pos:column="53">&amp;<pos:position pos:line="162" pos:column="58"/></operator><name pos:line="162" pos:column="54">buffer<pos:position pos:line="162" pos:column="60"/></name></expr></argument>, <argument><expr><operator pos:line="162" pos:column="62">&amp;<pos:position pos:line="162" pos:column="67"/></operator><name pos:line="162" pos:column="63">buffer_size<pos:position pos:line="162" pos:column="74"/></name></expr></argument>,
					<argument><expr><name><name pos:line="163" pos:column="41">vl<pos:position pos:line="163" pos:column="43"/></name><operator pos:line="163" pos:column="43">.<pos:position pos:line="163" pos:column="44"/></operator><name pos:line="163" pos:column="44">plugin_instance<pos:position pos:line="163" pos:column="59"/></name></name></expr></argument>,
					<argument><expr><sizeof pos:line="164" pos:column="41">sizeof <argument_list pos:line="164" pos:column="48">(<argument><expr><name><name pos:line="164" pos:column="49">vl<pos:position pos:line="164" pos:column="51"/></name><operator pos:line="164" pos:column="51">.<pos:position pos:line="164" pos:column="52"/></operator><name pos:line="164" pos:column="52">plugin_instance<pos:position pos:line="164" pos:column="67"/></name></name></expr></argument>)<pos:position pos:line="164" pos:column="68"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="164" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="164" pos:column="70"/></expr_stmt>
			<if pos:line="165" pos:column="25">if <condition pos:line="165" pos:column="28">(<expr><name pos:line="165" pos:column="29">status<pos:position pos:line="165" pos:column="35"/></name> <operator pos:line="165" pos:column="36">==<pos:position pos:line="165" pos:column="38"/></operator> <literal type="number" pos:line="165" pos:column="39">0<pos:position pos:line="165" pos:column="40"/></literal></expr>)<pos:position pos:line="165" pos:column="41"/></condition><then pos:line="165" pos:column="41">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="166" pos:column="33">sstrncpy<pos:position pos:line="166" pos:column="41"/></name> <argument_list pos:line="166" pos:column="42">(<argument><expr><name><name pos:line="166" pos:column="43">n<pos:position pos:line="166" pos:column="44"/></name><operator pos:line="166" pos:column="44">.<pos:position pos:line="166" pos:column="45"/></operator><name pos:line="166" pos:column="45">plugin_instance<pos:position pos:line="166" pos:column="60"/></name></name></expr></argument>,
						<argument><expr><name><name pos:line="167" pos:column="49">vl<pos:position pos:line="167" pos:column="51"/></name><operator pos:line="167" pos:column="51">.<pos:position pos:line="167" pos:column="52"/></operator><name pos:line="167" pos:column="52">plugin_instance<pos:position pos:line="167" pos:column="67"/></name></name></expr></argument>,
						<argument><expr><sizeof pos:line="168" pos:column="49">sizeof <argument_list pos:line="168" pos:column="56">(<argument><expr><name><name pos:line="168" pos:column="57">n<pos:position pos:line="168" pos:column="58"/></name><operator pos:line="168" pos:column="58">.<pos:position pos:line="168" pos:column="59"/></operator><name pos:line="168" pos:column="59">plugin_instance<pos:position pos:line="168" pos:column="74"/></name></name></expr></argument>)<pos:position pos:line="168" pos:column="75"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="168" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="168" pos:column="77"/></expr_stmt></block></then></if>
		}<pos:position pos:line="169" pos:column="18"/></block></then></if></elseif>
		<elseif pos:line="170" pos:column="17">else <if pos:line="170" pos:column="22">if <condition pos:line="170" pos:column="25">(<expr><name pos:line="170" pos:column="26">pkg_type<pos:position pos:line="170" pos:column="34"/></name> <operator pos:line="170" pos:column="35">==<pos:position pos:line="170" pos:column="37"/></operator> <name pos:line="170" pos:column="38">TYPE_TYPE<pos:position pos:line="170" pos:column="47"/></name></expr>)<pos:position pos:line="170" pos:column="48"/></condition><then pos:line="170" pos:column="48">
		<block pos:line="171" pos:column="17">{
			<expr_stmt><expr><name pos:line="172" pos:column="25">status<pos:position pos:line="172" pos:column="31"/></name> <operator pos:line="172" pos:column="32">=<pos:position pos:line="172" pos:column="33"/></operator> <call><name pos:line="172" pos:column="34">parse_part_string<pos:position pos:line="172" pos:column="51"/></name> <argument_list pos:line="172" pos:column="52">(<argument><expr><operator pos:line="172" pos:column="53">&amp;<pos:position pos:line="172" pos:column="58"/></operator><name pos:line="172" pos:column="54">buffer<pos:position pos:line="172" pos:column="60"/></name></expr></argument>, <argument><expr><operator pos:line="172" pos:column="62">&amp;<pos:position pos:line="172" pos:column="67"/></operator><name pos:line="172" pos:column="63">buffer_size<pos:position pos:line="172" pos:column="74"/></name></expr></argument>,
					<argument><expr><name><name pos:line="173" pos:column="41">vl<pos:position pos:line="173" pos:column="43"/></name><operator pos:line="173" pos:column="43">.<pos:position pos:line="173" pos:column="44"/></operator><name pos:line="173" pos:column="44">type<pos:position pos:line="173" pos:column="48"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="173" pos:column="50">sizeof <argument_list pos:line="173" pos:column="57">(<argument><expr><name><name pos:line="173" pos:column="58">vl<pos:position pos:line="173" pos:column="60"/></name><operator pos:line="173" pos:column="60">.<pos:position pos:line="173" pos:column="61"/></operator><name pos:line="173" pos:column="61">type<pos:position pos:line="173" pos:column="65"/></name></name></expr></argument>)<pos:position pos:line="173" pos:column="66"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="173" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="173" pos:column="68"/></expr_stmt>
			<if pos:line="174" pos:column="25">if <condition pos:line="174" pos:column="28">(<expr><name pos:line="174" pos:column="29">status<pos:position pos:line="174" pos:column="35"/></name> <operator pos:line="174" pos:column="36">==<pos:position pos:line="174" pos:column="38"/></operator> <literal type="number" pos:line="174" pos:column="39">0<pos:position pos:line="174" pos:column="40"/></literal></expr>)<pos:position pos:line="174" pos:column="41"/></condition><then pos:line="174" pos:column="41">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="175" pos:column="33">sstrncpy<pos:position pos:line="175" pos:column="41"/></name> <argument_list pos:line="175" pos:column="42">(<argument><expr><name><name pos:line="175" pos:column="43">n<pos:position pos:line="175" pos:column="44"/></name><operator pos:line="175" pos:column="44">.<pos:position pos:line="175" pos:column="45"/></operator><name pos:line="175" pos:column="45">type<pos:position pos:line="175" pos:column="49"/></name></name></expr></argument>, <argument><expr><name><name pos:line="175" pos:column="51">vl<pos:position pos:line="175" pos:column="53"/></name><operator pos:line="175" pos:column="53">.<pos:position pos:line="175" pos:column="54"/></operator><name pos:line="175" pos:column="54">type<pos:position pos:line="175" pos:column="58"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="175" pos:column="60">sizeof <argument_list pos:line="175" pos:column="67">(<argument><expr><name><name pos:line="175" pos:column="68">n<pos:position pos:line="175" pos:column="69"/></name><operator pos:line="175" pos:column="69">.<pos:position pos:line="175" pos:column="70"/></operator><name pos:line="175" pos:column="70">type<pos:position pos:line="175" pos:column="74"/></name></name></expr></argument>)<pos:position pos:line="175" pos:column="75"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="175" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="175" pos:column="77"/></expr_stmt></block></then></if>
		}<pos:position pos:line="176" pos:column="18"/></block></then></if></elseif>
		<elseif pos:line="177" pos:column="17">else <if pos:line="177" pos:column="22">if <condition pos:line="177" pos:column="25">(<expr><name pos:line="177" pos:column="26">pkg_type<pos:position pos:line="177" pos:column="34"/></name> <operator pos:line="177" pos:column="35">==<pos:position pos:line="177" pos:column="37"/></operator> <name pos:line="177" pos:column="38">TYPE_TYPE_INSTANCE<pos:position pos:line="177" pos:column="56"/></name></expr>)<pos:position pos:line="177" pos:column="57"/></condition><then pos:line="177" pos:column="57">
		<block pos:line="178" pos:column="17">{
			<expr_stmt><expr><name pos:line="179" pos:column="25">status<pos:position pos:line="179" pos:column="31"/></name> <operator pos:line="179" pos:column="32">=<pos:position pos:line="179" pos:column="33"/></operator> <call><name pos:line="179" pos:column="34">parse_part_string<pos:position pos:line="179" pos:column="51"/></name> <argument_list pos:line="179" pos:column="52">(<argument><expr><operator pos:line="179" pos:column="53">&amp;<pos:position pos:line="179" pos:column="58"/></operator><name pos:line="179" pos:column="54">buffer<pos:position pos:line="179" pos:column="60"/></name></expr></argument>, <argument><expr><operator pos:line="179" pos:column="62">&amp;<pos:position pos:line="179" pos:column="67"/></operator><name pos:line="179" pos:column="63">buffer_size<pos:position pos:line="179" pos:column="74"/></name></expr></argument>,
					<argument><expr><name><name pos:line="180" pos:column="41">vl<pos:position pos:line="180" pos:column="43"/></name><operator pos:line="180" pos:column="43">.<pos:position pos:line="180" pos:column="44"/></operator><name pos:line="180" pos:column="44">type_instance<pos:position pos:line="180" pos:column="57"/></name></name></expr></argument>,
					<argument><expr><sizeof pos:line="181" pos:column="41">sizeof <argument_list pos:line="181" pos:column="48">(<argument><expr><name><name pos:line="181" pos:column="49">vl<pos:position pos:line="181" pos:column="51"/></name><operator pos:line="181" pos:column="51">.<pos:position pos:line="181" pos:column="52"/></operator><name pos:line="181" pos:column="52">type_instance<pos:position pos:line="181" pos:column="65"/></name></name></expr></argument>)<pos:position pos:line="181" pos:column="66"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="181" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="181" pos:column="68"/></expr_stmt>
			<if pos:line="182" pos:column="25">if <condition pos:line="182" pos:column="28">(<expr><name pos:line="182" pos:column="29">status<pos:position pos:line="182" pos:column="35"/></name> <operator pos:line="182" pos:column="36">==<pos:position pos:line="182" pos:column="38"/></operator> <literal type="number" pos:line="182" pos:column="39">0<pos:position pos:line="182" pos:column="40"/></literal></expr>)<pos:position pos:line="182" pos:column="41"/></condition><then pos:line="182" pos:column="41">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="183" pos:column="33">sstrncpy<pos:position pos:line="183" pos:column="41"/></name> <argument_list pos:line="183" pos:column="42">(<argument><expr><name><name pos:line="183" pos:column="43">n<pos:position pos:line="183" pos:column="44"/></name><operator pos:line="183" pos:column="44">.<pos:position pos:line="183" pos:column="45"/></operator><name pos:line="183" pos:column="45">type_instance<pos:position pos:line="183" pos:column="58"/></name></name></expr></argument>, <argument><expr><name><name pos:line="183" pos:column="60">vl<pos:position pos:line="183" pos:column="62"/></name><operator pos:line="183" pos:column="62">.<pos:position pos:line="183" pos:column="63"/></operator><name pos:line="183" pos:column="63">type_instance<pos:position pos:line="183" pos:column="76"/></name></name></expr></argument>,
						<argument><expr><sizeof pos:line="184" pos:column="49">sizeof <argument_list pos:line="184" pos:column="56">(<argument><expr><name><name pos:line="184" pos:column="57">n<pos:position pos:line="184" pos:column="58"/></name><operator pos:line="184" pos:column="58">.<pos:position pos:line="184" pos:column="59"/></operator><name pos:line="184" pos:column="59">type_instance<pos:position pos:line="184" pos:column="72"/></name></name></expr></argument>)<pos:position pos:line="184" pos:column="73"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="184" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="184" pos:column="75"/></expr_stmt></block></then></if>
		}<pos:position pos:line="185" pos:column="18"/></block></then></if></elseif>
		<elseif pos:line="186" pos:column="17">else <if pos:line="186" pos:column="22">if <condition pos:line="186" pos:column="25">(<expr><name pos:line="186" pos:column="26">pkg_type<pos:position pos:line="186" pos:column="34"/></name> <operator pos:line="186" pos:column="35">==<pos:position pos:line="186" pos:column="37"/></operator> <name pos:line="186" pos:column="38">TYPE_MESSAGE<pos:position pos:line="186" pos:column="50"/></name></expr>)<pos:position pos:line="186" pos:column="51"/></condition><then pos:line="186" pos:column="51">
		<block pos:line="187" pos:column="17">{
			<expr_stmt><expr><name pos:line="188" pos:column="25">status<pos:position pos:line="188" pos:column="31"/></name> <operator pos:line="188" pos:column="32">=<pos:position pos:line="188" pos:column="33"/></operator> <call><name pos:line="188" pos:column="34">parse_part_string<pos:position pos:line="188" pos:column="51"/></name> <argument_list pos:line="188" pos:column="52">(<argument><expr><operator pos:line="188" pos:column="53">&amp;<pos:position pos:line="188" pos:column="58"/></operator><name pos:line="188" pos:column="54">buffer<pos:position pos:line="188" pos:column="60"/></name></expr></argument>, <argument><expr><operator pos:line="188" pos:column="62">&amp;<pos:position pos:line="188" pos:column="67"/></operator><name pos:line="188" pos:column="63">buffer_size<pos:position pos:line="188" pos:column="74"/></name></expr></argument>,
					<argument><expr><name><name pos:line="189" pos:column="41">n<pos:position pos:line="189" pos:column="42"/></name><operator pos:line="189" pos:column="42">.<pos:position pos:line="189" pos:column="43"/></operator><name pos:line="189" pos:column="43">message<pos:position pos:line="189" pos:column="50"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="189" pos:column="52">sizeof <argument_list pos:line="189" pos:column="59">(<argument><expr><name><name pos:line="189" pos:column="60">n<pos:position pos:line="189" pos:column="61"/></name><operator pos:line="189" pos:column="61">.<pos:position pos:line="189" pos:column="62"/></operator><name pos:line="189" pos:column="62">message<pos:position pos:line="189" pos:column="69"/></name></name></expr></argument>)<pos:position pos:line="189" pos:column="70"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="189" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="189" pos:column="72"/></expr_stmt>

			<if pos:line="191" pos:column="25">if <condition pos:line="191" pos:column="28">(<expr><name pos:line="191" pos:column="29">status<pos:position pos:line="191" pos:column="35"/></name> <operator pos:line="191" pos:column="36">!=<pos:position pos:line="191" pos:column="38"/></operator> <literal type="number" pos:line="191" pos:column="39">0<pos:position pos:line="191" pos:column="40"/></literal></expr>)<pos:position pos:line="191" pos:column="41"/></condition><then pos:line="191" pos:column="41">
			<block pos:line="192" pos:column="25">{
				<comment type="block" pos:line="193" pos:column="33">/* do nothing */</comment>
			}<pos:position pos:line="194" pos:column="26"/></block></then>
			<elseif pos:line="195" pos:column="25">else <if pos:line="195" pos:column="30">if <condition pos:line="195" pos:column="33">(<expr><operator pos:line="195" pos:column="34">(<pos:position pos:line="195" pos:column="35"/></operator><name><name pos:line="195" pos:column="35">n<pos:position pos:line="195" pos:column="36"/></name><operator pos:line="195" pos:column="36">.<pos:position pos:line="195" pos:column="37"/></operator><name pos:line="195" pos:column="37">severity<pos:position pos:line="195" pos:column="45"/></name></name> <operator pos:line="195" pos:column="46">!=<pos:position pos:line="195" pos:column="48"/></operator> <name pos:line="195" pos:column="49">NOTIF_FAILURE<pos:position pos:line="195" pos:column="62"/></name><operator pos:line="195" pos:column="62">)<pos:position pos:line="195" pos:column="63"/></operator>
					<operator pos:line="196" pos:column="41">&amp;&amp;<pos:position pos:line="196" pos:column="51"/></operator> <operator pos:line="196" pos:column="44">(<pos:position pos:line="196" pos:column="45"/></operator><name><name pos:line="196" pos:column="45">n<pos:position pos:line="196" pos:column="46"/></name><operator pos:line="196" pos:column="46">.<pos:position pos:line="196" pos:column="47"/></operator><name pos:line="196" pos:column="47">severity<pos:position pos:line="196" pos:column="55"/></name></name> <operator pos:line="196" pos:column="56">!=<pos:position pos:line="196" pos:column="58"/></operator> <name pos:line="196" pos:column="59">NOTIF_WARNING<pos:position pos:line="196" pos:column="72"/></name><operator pos:line="196" pos:column="72">)<pos:position pos:line="196" pos:column="73"/></operator>
					<operator pos:line="197" pos:column="41">&amp;&amp;<pos:position pos:line="197" pos:column="51"/></operator> <operator pos:line="197" pos:column="44">(<pos:position pos:line="197" pos:column="45"/></operator><name><name pos:line="197" pos:column="45">n<pos:position pos:line="197" pos:column="46"/></name><operator pos:line="197" pos:column="46">.<pos:position pos:line="197" pos:column="47"/></operator><name pos:line="197" pos:column="47">severity<pos:position pos:line="197" pos:column="55"/></name></name> <operator pos:line="197" pos:column="56">!=<pos:position pos:line="197" pos:column="58"/></operator> <name pos:line="197" pos:column="59">NOTIF_OKAY<pos:position pos:line="197" pos:column="69"/></name><operator pos:line="197" pos:column="69">)<pos:position pos:line="197" pos:column="70"/></operator></expr>)<pos:position pos:line="197" pos:column="71"/></condition><then pos:line="197" pos:column="71">
			<block pos:line="198" pos:column="25">{
				<expr_stmt><expr><call><name pos:line="199" pos:column="33">INFO<pos:position pos:line="199" pos:column="37"/></name> <argument_list pos:line="199" pos:column="38">(<argument><expr><literal type="string" pos:line="199" pos:column="39">"network plugin: "<pos:position pos:line="199" pos:column="57"/></literal>
						<literal type="string" pos:line="200" pos:column="49">"Ignoring notification with "<pos:position pos:line="200" pos:column="78"/></literal>
						<literal type="string" pos:line="201" pos:column="49">"unknown severity %i."<pos:position pos:line="201" pos:column="71"/></literal></expr></argument>,
						<argument><expr><name><name pos:line="202" pos:column="49">n<pos:position pos:line="202" pos:column="50"/></name><operator pos:line="202" pos:column="50">.<pos:position pos:line="202" pos:column="51"/></operator><name pos:line="202" pos:column="51">severity<pos:position pos:line="202" pos:column="59"/></name></name></expr></argument>)<pos:position pos:line="202" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="202" pos:column="61"/></expr_stmt>
			}<pos:position pos:line="203" pos:column="26"/></block></then></if></elseif>
			<elseif pos:line="204" pos:column="25">else <if pos:line="204" pos:column="30">if <condition pos:line="204" pos:column="33">(<expr><name><name pos:line="204" pos:column="34">n<pos:position pos:line="204" pos:column="35"/></name><operator pos:line="204" pos:column="35">.<pos:position pos:line="204" pos:column="36"/></operator><name pos:line="204" pos:column="36">time<pos:position pos:line="204" pos:column="40"/></name></name> <operator pos:line="204" pos:column="41">&lt;=<pos:position pos:line="204" pos:column="46"/></operator> <literal type="number" pos:line="204" pos:column="44">0<pos:position pos:line="204" pos:column="45"/></literal></expr>)<pos:position pos:line="204" pos:column="46"/></condition><then pos:line="204" pos:column="46">
			<block pos:line="205" pos:column="25">{
				<expr_stmt><expr><call><name pos:line="206" pos:column="33">INFO<pos:position pos:line="206" pos:column="37"/></name> <argument_list pos:line="206" pos:column="38">(<argument><expr><literal type="string" pos:line="206" pos:column="39">"network plugin: "<pos:position pos:line="206" pos:column="57"/></literal>
						<literal type="string" pos:line="207" pos:column="49">"Ignoring notification with "<pos:position pos:line="207" pos:column="78"/></literal>
						<literal type="string" pos:line="208" pos:column="49">"time == 0."<pos:position pos:line="208" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="208" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="208" pos:column="63"/></expr_stmt>
			}<pos:position pos:line="209" pos:column="26"/></block></then></if></elseif>
			<elseif pos:line="210" pos:column="25">else <if pos:line="210" pos:column="30">if <condition pos:line="210" pos:column="33">(<expr><call><name pos:line="210" pos:column="34">strlen<pos:position pos:line="210" pos:column="40"/></name> <argument_list pos:line="210" pos:column="41">(<argument><expr><name><name pos:line="210" pos:column="42">n<pos:position pos:line="210" pos:column="43"/></name><operator pos:line="210" pos:column="43">.<pos:position pos:line="210" pos:column="44"/></operator><name pos:line="210" pos:column="44">message<pos:position pos:line="210" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="210" pos:column="52"/></argument_list></call> <operator pos:line="210" pos:column="53">&lt;=<pos:position pos:line="210" pos:column="58"/></operator> <literal type="number" pos:line="210" pos:column="56">0<pos:position pos:line="210" pos:column="57"/></literal></expr>)<pos:position pos:line="210" pos:column="58"/></condition><then pos:line="210" pos:column="58">
			<block pos:line="211" pos:column="25">{
				<expr_stmt><expr><call><name pos:line="212" pos:column="33">INFO<pos:position pos:line="212" pos:column="37"/></name> <argument_list pos:line="212" pos:column="38">(<argument><expr><literal type="string" pos:line="212" pos:column="39">"network plugin: "<pos:position pos:line="212" pos:column="57"/></literal>
						<literal type="string" pos:line="213" pos:column="49">"Ignoring notification with "<pos:position pos:line="213" pos:column="78"/></literal>
						<literal type="string" pos:line="214" pos:column="49">"an empty message."<pos:position pos:line="214" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="214" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="214" pos:column="70"/></expr_stmt>
			}<pos:position pos:line="215" pos:column="26"/></block></then></if></elseif>
			<else pos:line="216" pos:column="25">else
			<block pos:line="217" pos:column="25">{
				<expr_stmt><expr><call><name pos:line="218" pos:column="33">network_dispatch_notification<pos:position pos:line="218" pos:column="62"/></name> <argument_list pos:line="218" pos:column="63">(<argument><expr><operator pos:line="218" pos:column="64">&amp;<pos:position pos:line="218" pos:column="69"/></operator><name pos:line="218" pos:column="65">n<pos:position pos:line="218" pos:column="66"/></name></expr></argument>)<pos:position pos:line="218" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="218" pos:column="68"/></expr_stmt>
			}<pos:position pos:line="219" pos:column="26"/></block></else></if>
		}<pos:position pos:line="220" pos:column="18"/></block></then></if></elseif>
		<elseif pos:line="221" pos:column="17">else <if pos:line="221" pos:column="22">if <condition pos:line="221" pos:column="25">(<expr><name pos:line="221" pos:column="26">pkg_type<pos:position pos:line="221" pos:column="34"/></name> <operator pos:line="221" pos:column="35">==<pos:position pos:line="221" pos:column="37"/></operator> <name pos:line="221" pos:column="38">TYPE_SEVERITY<pos:position pos:line="221" pos:column="51"/></name></expr>)<pos:position pos:line="221" pos:column="52"/></condition><then pos:line="221" pos:column="52">
		<block pos:line="222" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="223" pos:column="25">uint64_t<pos:position pos:line="223" pos:column="33"/></name></type> <name pos:line="223" pos:column="34">tmp<pos:position pos:line="223" pos:column="37"/></name> <init pos:line="223" pos:column="38">= <expr><literal type="number" pos:line="223" pos:column="40">0<pos:position pos:line="223" pos:column="41"/></literal></expr></init></decl>;<pos:position pos:line="223" pos:column="42"/></decl_stmt>
			<expr_stmt><expr><name pos:line="224" pos:column="25">status<pos:position pos:line="224" pos:column="31"/></name> <operator pos:line="224" pos:column="32">=<pos:position pos:line="224" pos:column="33"/></operator> <call><name pos:line="224" pos:column="34">parse_part_number<pos:position pos:line="224" pos:column="51"/></name> <argument_list pos:line="224" pos:column="52">(<argument><expr><operator pos:line="224" pos:column="53">&amp;<pos:position pos:line="224" pos:column="58"/></operator><name pos:line="224" pos:column="54">buffer<pos:position pos:line="224" pos:column="60"/></name></expr></argument>, <argument><expr><operator pos:line="224" pos:column="62">&amp;<pos:position pos:line="224" pos:column="67"/></operator><name pos:line="224" pos:column="63">buffer_size<pos:position pos:line="224" pos:column="74"/></name></expr></argument>,
					<argument><expr><operator pos:line="225" pos:column="41">&amp;<pos:position pos:line="225" pos:column="46"/></operator><name pos:line="225" pos:column="42">tmp<pos:position pos:line="225" pos:column="45"/></name></expr></argument>)<pos:position pos:line="225" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="225" pos:column="47"/></expr_stmt>
			<if pos:line="226" pos:column="25">if <condition pos:line="226" pos:column="28">(<expr><name pos:line="226" pos:column="29">status<pos:position pos:line="226" pos:column="35"/></name> <operator pos:line="226" pos:column="36">==<pos:position pos:line="226" pos:column="38"/></operator> <literal type="number" pos:line="226" pos:column="39">0<pos:position pos:line="226" pos:column="40"/></literal></expr>)<pos:position pos:line="226" pos:column="41"/></condition><then pos:line="226" pos:column="41">
				<block type="pseudo"><expr_stmt><expr><name><name pos:line="227" pos:column="33">n<pos:position pos:line="227" pos:column="34"/></name><operator pos:line="227" pos:column="34">.<pos:position pos:line="227" pos:column="35"/></operator><name pos:line="227" pos:column="35">severity<pos:position pos:line="227" pos:column="43"/></name></name> <operator pos:line="227" pos:column="44">=<pos:position pos:line="227" pos:column="45"/></operator> <operator pos:line="227" pos:column="46">(<pos:position pos:line="227" pos:column="47"/></operator><name pos:line="227" pos:column="47">int<pos:position pos:line="227" pos:column="50"/></name><operator pos:line="227" pos:column="50">)<pos:position pos:line="227" pos:column="51"/></operator> <name pos:line="227" pos:column="52">tmp<pos:position pos:line="227" pos:column="55"/></name></expr>;<pos:position pos:line="227" pos:column="56"/></expr_stmt></block></then></if>
		}<pos:position pos:line="228" pos:column="18"/></block></then></if></elseif>
		<else pos:line="229" pos:column="17">else
		<block pos:line="230" pos:column="17">{
			<expr_stmt><expr><call><name pos:line="231" pos:column="25">DEBUG<pos:position pos:line="231" pos:column="30"/></name> <argument_list pos:line="231" pos:column="31">(<argument><expr><literal type="string" pos:line="231" pos:column="32">"network plugin: parse_packet: Unknown part"<pos:position pos:line="231" pos:column="76"/></literal>
					<literal type="string" pos:line="232" pos:column="41">" type: 0x%04hx"<pos:position pos:line="232" pos:column="57"/></literal></expr></argument>, <argument><expr><name pos:line="232" pos:column="59">pkg_type<pos:position pos:line="232" pos:column="67"/></name></expr></argument>)<pos:position pos:line="232" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="232" pos:column="69"/></expr_stmt>
			<expr_stmt><expr><name pos:line="233" pos:column="25">buffer<pos:position pos:line="233" pos:column="31"/></name> <operator pos:line="233" pos:column="32">=<pos:position pos:line="233" pos:column="33"/></operator> <operator pos:line="233" pos:column="34">(<pos:position pos:line="233" pos:column="35"/></operator><operator pos:line="233" pos:column="35">(<pos:position pos:line="233" pos:column="36"/></operator><name pos:line="233" pos:column="36">char<pos:position pos:line="233" pos:column="40"/></name> <operator pos:line="233" pos:column="41">*<pos:position pos:line="233" pos:column="42"/></operator><operator pos:line="233" pos:column="42">)<pos:position pos:line="233" pos:column="43"/></operator> <name pos:line="233" pos:column="44">buffer<pos:position pos:line="233" pos:column="50"/></name><operator pos:line="233" pos:column="50">)<pos:position pos:line="233" pos:column="51"/></operator> <operator pos:line="233" pos:column="52">+<pos:position pos:line="233" pos:column="53"/></operator> <name pos:line="233" pos:column="54">pkg_length<pos:position pos:line="233" pos:column="64"/></name></expr>;<pos:position pos:line="233" pos:column="65"/></expr_stmt>
		}<pos:position pos:line="234" pos:column="18"/></block></else></if>
	}<pos:position pos:line="235" pos:column="10"/></block></while> <comment type="block" pos:line="235" pos:column="11">/* while (buffer_size &gt; sizeof (part_header_t)) */</comment>

	<if pos:line="237" pos:column="9">if <condition pos:line="237" pos:column="12">(<expr><name pos:line="237" pos:column="13">status<pos:position pos:line="237" pos:column="19"/></name> <operator pos:line="237" pos:column="20">==<pos:position pos:line="237" pos:column="22"/></operator> <literal type="number" pos:line="237" pos:column="23">0<pos:position pos:line="237" pos:column="24"/></literal> <operator pos:line="237" pos:column="25">&amp;&amp;<pos:position pos:line="237" pos:column="35"/></operator> <name pos:line="237" pos:column="28">buffer_size<pos:position pos:line="237" pos:column="39"/></name> <operator pos:line="237" pos:column="40">&gt;<pos:position pos:line="237" pos:column="44"/></operator> <literal type="number" pos:line="237" pos:column="42">0<pos:position pos:line="237" pos:column="43"/></literal></expr>)<pos:position pos:line="237" pos:column="44"/></condition><then pos:line="237" pos:column="44">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="238" pos:column="17">WARNING<pos:position pos:line="238" pos:column="24"/></name> <argument_list pos:line="238" pos:column="25">(<argument><expr><literal type="string" pos:line="238" pos:column="26">"network plugin: parse_packet: Received truncated "<pos:position pos:line="238" pos:column="77"/></literal>
				<literal type="string" pos:line="239" pos:column="33">"packet, try increasing `MaxPacketSize'"<pos:position pos:line="239" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="239" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="239" pos:column="75"/></expr_stmt></block></then></if>

	<return pos:line="241" pos:column="9">return <expr><operator pos:line="241" pos:column="16">(<pos:position pos:line="241" pos:column="17"/></operator><name pos:line="241" pos:column="17">status<pos:position pos:line="241" pos:column="23"/></name><operator pos:line="241" pos:column="23">)<pos:position pos:line="241" pos:column="24"/></operator></expr>;<pos:position pos:line="241" pos:column="25"/></return>
}<pos:position pos:line="242" pos:column="2"/></block></function></unit>
