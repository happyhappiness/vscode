<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_309_collectd-4.0.7.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">perl_config<pos:position pos:line="1" pos:column="16"/></name> <parameter_list pos:line="1" pos:column="17">(<parameter><decl><type><specifier pos:line="1" pos:column="18">const<pos:position pos:line="1" pos:column="23"/></specifier> <name pos:line="1" pos:column="24">char<pos:position pos:line="1" pos:column="28"/></name> <modifier pos:line="1" pos:column="29">*<pos:position pos:line="1" pos:column="30"/></modifier></type><name pos:line="1" pos:column="30">key<pos:position pos:line="1" pos:column="33"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="35">const<pos:position pos:line="1" pos:column="40"/></specifier> <name pos:line="1" pos:column="41">char<pos:position pos:line="1" pos:column="45"/></name> <modifier pos:line="1" pos:column="46">*<pos:position pos:line="1" pos:column="47"/></modifier></type><name pos:line="1" pos:column="47">value<pos:position pos:line="1" pos:column="52"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="53"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<expr_stmt><expr><call><name pos:line="3" pos:column="9">assert<pos:position pos:line="3" pos:column="15"/></name> <argument_list pos:line="3" pos:column="16">(<argument><expr><name pos:line="3" pos:column="17">NULL<pos:position pos:line="3" pos:column="21"/></name> <operator pos:line="3" pos:column="22">!=<pos:position pos:line="3" pos:column="24"/></operator> <name pos:line="3" pos:column="25">perl<pos:position pos:line="3" pos:column="29"/></name></expr></argument>)<pos:position pos:line="3" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="3" pos:column="31"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="5" pos:column="9">log_debug<pos:position pos:line="5" pos:column="18"/></name> <argument_list pos:line="5" pos:column="19">(<argument><expr><literal type="string" pos:line="5" pos:column="20">"perl_config: key = \"%s\", value=\"%s\""<pos:position pos:line="5" pos:column="61"/></literal></expr></argument>, <argument><expr><name pos:line="5" pos:column="63">key<pos:position pos:line="5" pos:column="66"/></name></expr></argument>, <argument><expr><name pos:line="5" pos:column="68">value<pos:position pos:line="5" pos:column="73"/></name></expr></argument>)<pos:position pos:line="5" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="75"/></expr_stmt>

	<if pos:line="7" pos:column="9">if <condition pos:line="7" pos:column="12">(<expr><literal type="number" pos:line="7" pos:column="13">0<pos:position pos:line="7" pos:column="14"/></literal> <operator pos:line="7" pos:column="15">==<pos:position pos:line="7" pos:column="17"/></operator> <call><name pos:line="7" pos:column="18">strcasecmp<pos:position pos:line="7" pos:column="28"/></name> <argument_list pos:line="7" pos:column="29">(<argument><expr><name pos:line="7" pos:column="30">key<pos:position pos:line="7" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="7" pos:column="35">"LoadPlugin"<pos:position pos:line="7" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="7" pos:column="49"/></condition><then pos:line="7" pos:column="49"> <block pos:line="7" pos:column="50">{
		<decl_stmt><decl><type><name pos:line="8" pos:column="17">char<pos:position pos:line="8" pos:column="21"/></name></type> <name><name pos:line="8" pos:column="22">module_name<pos:position pos:line="8" pos:column="33"/></name><index pos:line="8" pos:column="33">[<expr><name pos:line="8" pos:column="34">DATA_MAX_NAME_LEN<pos:position pos:line="8" pos:column="51"/></name></expr>]<pos:position pos:line="8" pos:column="52"/></index></name></decl>;<pos:position pos:line="8" pos:column="53"/></decl_stmt>

		<if pos:line="10" pos:column="17">if <condition pos:line="10" pos:column="20">(<expr><call><name pos:line="10" pos:column="21">get_module_name<pos:position pos:line="10" pos:column="36"/></name> <argument_list pos:line="10" pos:column="37">(<argument><expr><name pos:line="10" pos:column="38">module_name<pos:position pos:line="10" pos:column="49"/></name></expr></argument>, <argument><expr><sizeof pos:line="10" pos:column="51">sizeof <argument_list pos:line="10" pos:column="58">(<argument><expr><name pos:line="10" pos:column="59">module_name<pos:position pos:line="10" pos:column="70"/></name></expr></argument>)<pos:position pos:line="10" pos:column="71"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="10" pos:column="73">value<pos:position pos:line="10" pos:column="78"/></name></expr></argument>)<pos:position pos:line="10" pos:column="79"/></argument_list></call>
				<operator pos:line="11" pos:column="33">==<pos:position pos:line="11" pos:column="35"/></operator> <name pos:line="11" pos:column="36">NULL<pos:position pos:line="11" pos:column="40"/></name></expr>)<pos:position pos:line="11" pos:column="41"/></condition><then pos:line="11" pos:column="41"> <block pos:line="11" pos:column="42">{
			<expr_stmt><expr><call><name pos:line="12" pos:column="25">log_err<pos:position pos:line="12" pos:column="32"/></name> <argument_list pos:line="12" pos:column="33">(<argument><expr><literal type="string" pos:line="12" pos:column="34">"Invalid module name %s"<pos:position pos:line="12" pos:column="58"/></literal></expr></argument>, <argument><expr><name pos:line="12" pos:column="60">value<pos:position pos:line="12" pos:column="65"/></name></expr></argument>)<pos:position pos:line="12" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="67"/></expr_stmt>
			<return pos:line="13" pos:column="25">return <expr><operator pos:line="13" pos:column="32">(<pos:position pos:line="13" pos:column="33"/></operator><literal type="number" pos:line="13" pos:column="33">1<pos:position pos:line="13" pos:column="34"/></literal><operator pos:line="13" pos:column="34">)<pos:position pos:line="13" pos:column="35"/></operator></expr>;<pos:position pos:line="13" pos:column="36"/></return>
		}<pos:position pos:line="14" pos:column="18"/></block></then></if> <comment type="block" pos:line="14" pos:column="19">/* if (get_module_name == NULL) */</comment>

		<expr_stmt><expr><call><name pos:line="16" pos:column="17">log_debug<pos:position pos:line="16" pos:column="26"/></name> <argument_list pos:line="16" pos:column="27">(<argument><expr><literal type="string" pos:line="16" pos:column="28">"perl_config: loading perl plugin \"%s\""<pos:position pos:line="16" pos:column="69"/></literal></expr></argument>, <argument><expr><name pos:line="16" pos:column="71">value<pos:position pos:line="16" pos:column="76"/></name></expr></argument>)<pos:position pos:line="16" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="78"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="17" pos:column="17">Perl_load_module<pos:position pos:line="17" pos:column="33"/></name> <argument_list pos:line="17" pos:column="34">(<argument><expr><name pos:line="17" pos:column="35">perl<pos:position pos:line="17" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="41">PERL_LOADMOD_NOIMPORT<pos:position pos:line="17" pos:column="62"/></name></expr></argument>,
				<argument><expr><call><name pos:line="18" pos:column="33">Perl_newSVpv<pos:position pos:line="18" pos:column="45"/></name> <argument_list pos:line="18" pos:column="46">(<argument><expr><name pos:line="18" pos:column="47">perl<pos:position pos:line="18" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="53">module_name<pos:position pos:line="18" pos:column="64"/></name></expr></argument>, <argument><expr><call><name pos:line="18" pos:column="66">strlen<pos:position pos:line="18" pos:column="72"/></name> <argument_list pos:line="18" pos:column="73">(<argument><expr><name pos:line="18" pos:column="74">module_name<pos:position pos:line="18" pos:column="85"/></name></expr></argument>)<pos:position pos:line="18" pos:column="86"/></argument_list></call></expr></argument>)<pos:position pos:line="18" pos:column="87"/></argument_list></call></expr></argument>,
				<argument><expr><name pos:line="19" pos:column="33">Nullsv<pos:position pos:line="19" pos:column="39"/></name></expr></argument>)<pos:position pos:line="19" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="41"/></expr_stmt>
	}<pos:position pos:line="20" pos:column="10"/></block></then>
	<elseif pos:line="21" pos:column="9">else <if pos:line="21" pos:column="14">if <condition pos:line="21" pos:column="17">(<expr><literal type="number" pos:line="21" pos:column="18">0<pos:position pos:line="21" pos:column="19"/></literal> <operator pos:line="21" pos:column="20">==<pos:position pos:line="21" pos:column="22"/></operator> <call><name pos:line="21" pos:column="23">strcasecmp<pos:position pos:line="21" pos:column="33"/></name> <argument_list pos:line="21" pos:column="34">(<argument><expr><name pos:line="21" pos:column="35">key<pos:position pos:line="21" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="21" pos:column="40">"BaseName"<pos:position pos:line="21" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="51"/></argument_list></call></expr>)<pos:position pos:line="21" pos:column="52"/></condition><then pos:line="21" pos:column="52"> <block pos:line="21" pos:column="53">{
		<expr_stmt><expr><call><name pos:line="22" pos:column="17">log_debug<pos:position pos:line="22" pos:column="26"/></name> <argument_list pos:line="22" pos:column="27">(<argument><expr><literal type="string" pos:line="22" pos:column="28">"perl_config: Setting plugin basename to \"%s\""<pos:position pos:line="22" pos:column="76"/></literal></expr></argument>, <argument><expr><name pos:line="22" pos:column="78">value<pos:position pos:line="22" pos:column="83"/></name></expr></argument>)<pos:position pos:line="22" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="85"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="23" pos:column="17">strncpy<pos:position pos:line="23" pos:column="24"/></name> <argument_list pos:line="23" pos:column="25">(<argument><expr><name pos:line="23" pos:column="26">base_name<pos:position pos:line="23" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="37">value<pos:position pos:line="23" pos:column="42"/></name></expr></argument>, <argument><expr><sizeof pos:line="23" pos:column="44">sizeof <argument_list pos:line="23" pos:column="51">(<argument><expr><name pos:line="23" pos:column="52">base_name<pos:position pos:line="23" pos:column="61"/></name></expr></argument>)<pos:position pos:line="23" pos:column="62"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="23" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="64"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="24" pos:column="17">base_name<pos:position pos:line="24" pos:column="26"/></name><index pos:line="24" pos:column="26">[<expr><sizeof pos:line="24" pos:column="27">sizeof <argument_list pos:line="24" pos:column="34">(<argument><expr><name pos:line="24" pos:column="35">base_name<pos:position pos:line="24" pos:column="44"/></name></expr></argument>)<pos:position pos:line="24" pos:column="45"/></argument_list></sizeof> <operator pos:line="24" pos:column="46">-<pos:position pos:line="24" pos:column="47"/></operator> <literal type="number" pos:line="24" pos:column="48">1<pos:position pos:line="24" pos:column="49"/></literal></expr>]<pos:position pos:line="24" pos:column="50"/></index></name> <operator pos:line="24" pos:column="51">=<pos:position pos:line="24" pos:column="52"/></operator> <literal type="char" pos:line="24" pos:column="53">'\0'<pos:position pos:line="24" pos:column="57"/></literal></expr>;<pos:position pos:line="24" pos:column="58"/></expr_stmt>
	}<pos:position pos:line="25" pos:column="10"/></block></then></if></elseif>
	<elseif pos:line="26" pos:column="9">else <if pos:line="26" pos:column="14">if <condition pos:line="26" pos:column="17">(<expr><literal type="number" pos:line="26" pos:column="18">0<pos:position pos:line="26" pos:column="19"/></literal> <operator pos:line="26" pos:column="20">==<pos:position pos:line="26" pos:column="22"/></operator> <call><name pos:line="26" pos:column="23">strcasecmp<pos:position pos:line="26" pos:column="33"/></name> <argument_list pos:line="26" pos:column="34">(<argument><expr><name pos:line="26" pos:column="35">key<pos:position pos:line="26" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="26" pos:column="40">"IncludeDir"<pos:position pos:line="26" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="53"/></argument_list></call></expr>)<pos:position pos:line="26" pos:column="54"/></condition><then pos:line="26" pos:column="54"> <block pos:line="26" pos:column="55">{
		<expr_stmt><expr><call><name pos:line="27" pos:column="17">Perl_av_unshift<pos:position pos:line="27" pos:column="32"/></name> <argument_list pos:line="27" pos:column="33">(<argument><expr><name pos:line="27" pos:column="34">perl<pos:position pos:line="27" pos:column="38"/></name></expr></argument>, <argument><expr><call><name pos:line="27" pos:column="40">GvAVn<pos:position pos:line="27" pos:column="45"/></name> <argument_list pos:line="27" pos:column="46">(<argument><expr><name pos:line="27" pos:column="47">PL_incgv<pos:position pos:line="27" pos:column="55"/></name></expr></argument>)<pos:position pos:line="27" pos:column="56"/></argument_list></call></expr></argument>, <argument><expr><literal type="number" pos:line="27" pos:column="58">1<pos:position pos:line="27" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="61"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="28" pos:column="17">Perl_av_store<pos:position pos:line="28" pos:column="30"/></name> <argument_list pos:line="28" pos:column="31">(<argument><expr><name pos:line="28" pos:column="32">perl<pos:position pos:line="28" pos:column="36"/></name></expr></argument>, <argument><expr><call><name pos:line="28" pos:column="38">GvAVn<pos:position pos:line="28" pos:column="43"/></name> <argument_list pos:line="28" pos:column="44">(<argument><expr><name pos:line="28" pos:column="45">PL_incgv<pos:position pos:line="28" pos:column="53"/></name></expr></argument>)<pos:position pos:line="28" pos:column="54"/></argument_list></call></expr></argument>,
				<argument><expr><literal type="number" pos:line="29" pos:column="33">0<pos:position pos:line="29" pos:column="34"/></literal></expr></argument>, <argument><expr><call><name pos:line="29" pos:column="36">Perl_newSVpv<pos:position pos:line="29" pos:column="48"/></name> <argument_list pos:line="29" pos:column="49">(<argument><expr><name pos:line="29" pos:column="50">perl<pos:position pos:line="29" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="56">value<pos:position pos:line="29" pos:column="61"/></name></expr></argument>, <argument><expr><call><name pos:line="29" pos:column="63">strlen<pos:position pos:line="29" pos:column="69"/></name> <argument_list pos:line="29" pos:column="70">(<argument><expr><name pos:line="29" pos:column="71">value<pos:position pos:line="29" pos:column="76"/></name></expr></argument>)<pos:position pos:line="29" pos:column="77"/></argument_list></call></expr></argument>)<pos:position pos:line="29" pos:column="78"/></argument_list></call></expr></argument>)<pos:position pos:line="29" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="80"/></expr_stmt>
	}<pos:position pos:line="30" pos:column="10"/></block></then></if></elseif>
	<else pos:line="31" pos:column="9">else <block pos:line="31" pos:column="14">{
		<return pos:line="32" pos:column="17">return <expr><operator pos:line="32" pos:column="24">-<pos:position pos:line="32" pos:column="25"/></operator><literal type="number" pos:line="32" pos:column="25">1<pos:position pos:line="32" pos:column="26"/></literal></expr>;<pos:position pos:line="32" pos:column="27"/></return>
	}<pos:position pos:line="33" pos:column="10"/></block></else></if>
	<return pos:line="34" pos:column="9">return <expr><literal type="number" pos:line="34" pos:column="16">0<pos:position pos:line="34" pos:column="17"/></literal></expr>;<pos:position pos:line="34" pos:column="18"/></return>
}<pos:position pos:line="35" pos:column="2"/></block></function></unit>
