<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_294_collectd-5.5.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">kafka_write<pos:position pos:line="1" pos:column="23"/></name><parameter_list pos:line="1" pos:column="23">(<parameter><decl><type><specifier pos:line="1" pos:column="24">const<pos:position pos:line="1" pos:column="29"/></specifier> <name pos:line="1" pos:column="30">data_set_t<pos:position pos:line="1" pos:column="40"/></name> <modifier pos:line="1" pos:column="41">*<pos:position pos:line="1" pos:column="42"/></modifier></type><name pos:line="1" pos:column="42">ds<pos:position pos:line="1" pos:column="44"/></name></decl></parameter>, <comment type="block" pos:line="1" pos:column="46">/* {{{ */</comment>
	      <parameter><decl><type><specifier pos:line="2" pos:column="15">const<pos:position pos:line="2" pos:column="20"/></specifier> <name pos:line="2" pos:column="21">value_list_t<pos:position pos:line="2" pos:column="33"/></name> <modifier pos:line="2" pos:column="34">*<pos:position pos:line="2" pos:column="35"/></modifier></type><name pos:line="2" pos:column="35">vl<pos:position pos:line="2" pos:column="37"/></name></decl></parameter>,
	      <parameter><decl><type><name pos:line="3" pos:column="15">user_data_t<pos:position pos:line="3" pos:column="26"/></name> <modifier pos:line="3" pos:column="27">*<pos:position pos:line="3" pos:column="28"/></modifier></type><name pos:line="3" pos:column="28">ud<pos:position pos:line="3" pos:column="30"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="31"/></parameter_list>
<block pos:line="4" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type>			 <name pos:line="5" pos:column="34">status<pos:position pos:line="5" pos:column="40"/></name> <init pos:line="5" pos:column="41">= <expr><literal type="number" pos:line="5" pos:column="43">0<pos:position pos:line="5" pos:column="44"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="45"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">uint32_t<pos:position pos:line="6" pos:column="13"/></name></type>    <name pos:line="6" pos:column="17">key<pos:position pos:line="6" pos:column="20"/></name></decl>;<pos:position pos:line="6" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">char<pos:position pos:line="7" pos:column="9"/></name></type>         <name><name pos:line="7" pos:column="18">buffer<pos:position pos:line="7" pos:column="24"/></name><index pos:line="7" pos:column="24">[<expr><literal type="number" pos:line="7" pos:column="25">8192<pos:position pos:line="7" pos:column="29"/></literal></expr>]<pos:position pos:line="7" pos:column="30"/></index></name></decl>;<pos:position pos:line="7" pos:column="31"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">size_t<pos:position pos:line="8" pos:column="11"/></name></type> <name pos:line="8" pos:column="12">bfree<pos:position pos:line="8" pos:column="17"/></name> <init pos:line="8" pos:column="18">= <expr><sizeof pos:line="8" pos:column="20">sizeof<argument_list pos:line="8" pos:column="26">(<argument><expr><name pos:line="8" pos:column="27">buffer<pos:position pos:line="8" pos:column="33"/></name></expr></argument>)<pos:position pos:line="8" pos:column="34"/></argument_list></sizeof></expr></init></decl>;<pos:position pos:line="8" pos:column="35"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">size_t<pos:position pos:line="9" pos:column="11"/></name></type> <name pos:line="9" pos:column="12">bfill<pos:position pos:line="9" pos:column="17"/></name> <init pos:line="9" pos:column="18">= <expr><literal type="number" pos:line="9" pos:column="20">0<pos:position pos:line="9" pos:column="21"/></literal></expr></init></decl>;<pos:position pos:line="9" pos:column="22"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">size_t<pos:position pos:line="10" pos:column="11"/></name></type> <name pos:line="10" pos:column="12">blen<pos:position pos:line="10" pos:column="16"/></name> <init pos:line="10" pos:column="17">= <expr><literal type="number" pos:line="10" pos:column="19">0<pos:position pos:line="10" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="10" pos:column="21"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="11" pos:column="9">struct<pos:position pos:line="11" pos:column="15"/></name> <name pos:line="11" pos:column="16">kafka_topic_context<pos:position pos:line="11" pos:column="35"/></name></name>	<modifier pos:line="11" pos:column="41">*<pos:position pos:line="11" pos:column="42"/></modifier></type><name pos:line="11" pos:column="42">ctx<pos:position pos:line="11" pos:column="45"/></name> <init pos:line="11" pos:column="46">= <expr><name><name pos:line="11" pos:column="48">ud<pos:position pos:line="11" pos:column="50"/></name><operator pos:line="11" pos:column="50">-&gt;<pos:position pos:line="11" pos:column="55"/></operator><name pos:line="11" pos:column="52">data<pos:position pos:line="11" pos:column="56"/></name></name></expr></init></decl>;<pos:position pos:line="11" pos:column="57"/></decl_stmt>

    <if pos:line="13" pos:column="5">if <condition pos:line="13" pos:column="8">(<expr><operator pos:line="13" pos:column="9">(<pos:position pos:line="13" pos:column="10"/></operator><name pos:line="13" pos:column="10">ds<pos:position pos:line="13" pos:column="12"/></name> <operator pos:line="13" pos:column="13">==<pos:position pos:line="13" pos:column="15"/></operator> <name pos:line="13" pos:column="16">NULL<pos:position pos:line="13" pos:column="20"/></name><operator pos:line="13" pos:column="20">)<pos:position pos:line="13" pos:column="21"/></operator> <operator pos:line="13" pos:column="22">||<pos:position pos:line="13" pos:column="24"/></operator> <operator pos:line="13" pos:column="25">(<pos:position pos:line="13" pos:column="26"/></operator><name pos:line="13" pos:column="26">vl<pos:position pos:line="13" pos:column="28"/></name> <operator pos:line="13" pos:column="29">==<pos:position pos:line="13" pos:column="31"/></operator> <name pos:line="13" pos:column="32">NULL<pos:position pos:line="13" pos:column="36"/></name><operator pos:line="13" pos:column="36">)<pos:position pos:line="13" pos:column="37"/></operator> <operator pos:line="13" pos:column="38">||<pos:position pos:line="13" pos:column="40"/></operator> <operator pos:line="13" pos:column="41">(<pos:position pos:line="13" pos:column="42"/></operator><name pos:line="13" pos:column="42">ctx<pos:position pos:line="13" pos:column="45"/></name> <operator pos:line="13" pos:column="46">==<pos:position pos:line="13" pos:column="48"/></operator> <name pos:line="13" pos:column="49">NULL<pos:position pos:line="13" pos:column="53"/></name><operator pos:line="13" pos:column="53">)<pos:position pos:line="13" pos:column="54"/></operator></expr>)<pos:position pos:line="13" pos:column="55"/></condition><then pos:line="13" pos:column="55">
        <block type="pseudo"><return pos:line="14" pos:column="9">return <expr><name pos:line="14" pos:column="16">EINVAL<pos:position pos:line="14" pos:column="22"/></name></expr>;<pos:position pos:line="14" pos:column="23"/></return></block></then></if>

    <expr_stmt><expr><call><name pos:line="16" pos:column="5">pthread_mutex_lock<pos:position pos:line="16" pos:column="23"/></name> <argument_list pos:line="16" pos:column="24">(<argument><expr><operator pos:line="16" pos:column="25">&amp;<pos:position pos:line="16" pos:column="30"/></operator><name><name pos:line="16" pos:column="26">ctx<pos:position pos:line="16" pos:column="29"/></name><operator pos:line="16" pos:column="29">-&gt;<pos:position pos:line="16" pos:column="34"/></operator><name pos:line="16" pos:column="31">lock<pos:position pos:line="16" pos:column="35"/></name></name></expr></argument>)<pos:position pos:line="16" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="37"/></expr_stmt>
    <expr_stmt><expr><name pos:line="17" pos:column="5">status<pos:position pos:line="17" pos:column="11"/></name> <operator pos:line="17" pos:column="12">=<pos:position pos:line="17" pos:column="13"/></operator> <call><name pos:line="17" pos:column="14">kafka_handle<pos:position pos:line="17" pos:column="26"/></name><argument_list pos:line="17" pos:column="26">(<argument><expr><name pos:line="17" pos:column="27">ctx<pos:position pos:line="17" pos:column="30"/></name></expr></argument>)<pos:position pos:line="17" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="32"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="18" pos:column="5">pthread_mutex_unlock<pos:position pos:line="18" pos:column="25"/></name> <argument_list pos:line="18" pos:column="26">(<argument><expr><operator pos:line="18" pos:column="27">&amp;<pos:position pos:line="18" pos:column="32"/></operator><name><name pos:line="18" pos:column="28">ctx<pos:position pos:line="18" pos:column="31"/></name><operator pos:line="18" pos:column="31">-&gt;<pos:position pos:line="18" pos:column="36"/></operator><name pos:line="18" pos:column="33">lock<pos:position pos:line="18" pos:column="37"/></name></name></expr></argument>)<pos:position pos:line="18" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="39"/></expr_stmt>
    <if pos:line="19" pos:column="5">if<condition pos:line="19" pos:column="7">( <expr><name pos:line="19" pos:column="9">status<pos:position pos:line="19" pos:column="15"/></name> <operator pos:line="19" pos:column="16">!=<pos:position pos:line="19" pos:column="18"/></operator> <literal type="number" pos:line="19" pos:column="19">0<pos:position pos:line="19" pos:column="20"/></literal></expr> )<pos:position pos:line="19" pos:column="22"/></condition><then pos:line="19" pos:column="22">
        <block type="pseudo"><return pos:line="20" pos:column="9">return <expr><name pos:line="20" pos:column="16">status<pos:position pos:line="20" pos:column="22"/></name></expr>;<pos:position pos:line="20" pos:column="23"/></return></block></then></if>

    <expr_stmt><expr><call><name pos:line="22" pos:column="5">bzero<pos:position pos:line="22" pos:column="10"/></name><argument_list pos:line="22" pos:column="10">(<argument><expr><name pos:line="22" pos:column="11">buffer<pos:position pos:line="22" pos:column="17"/></name></expr></argument>, <argument><expr><sizeof pos:line="22" pos:column="19">sizeof<argument_list pos:line="22" pos:column="25">(<argument><expr><name pos:line="22" pos:column="26">buffer<pos:position pos:line="22" pos:column="32"/></name></expr></argument>)<pos:position pos:line="22" pos:column="33"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="22" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="35"/></expr_stmt>

    <switch pos:line="24" pos:column="5">switch <condition pos:line="24" pos:column="12">(<expr><name><name pos:line="24" pos:column="13">ctx<pos:position pos:line="24" pos:column="16"/></name><operator pos:line="24" pos:column="16">-&gt;<pos:position pos:line="24" pos:column="21"/></operator><name pos:line="24" pos:column="18">format<pos:position pos:line="24" pos:column="24"/></name></name></expr>)<pos:position pos:line="24" pos:column="25"/></condition> <block pos:line="24" pos:column="26">{
    <case pos:line="25" pos:column="5">case <expr><name pos:line="25" pos:column="10">KAFKA_FORMAT_COMMAND<pos:position pos:line="25" pos:column="30"/></name></expr>:<pos:position pos:line="25" pos:column="31"/></case>
        <expr_stmt><expr><name pos:line="26" pos:column="9">status<pos:position pos:line="26" pos:column="15"/></name> <operator pos:line="26" pos:column="16">=<pos:position pos:line="26" pos:column="17"/></operator> <call><name pos:line="26" pos:column="18">create_putval<pos:position pos:line="26" pos:column="31"/></name><argument_list pos:line="26" pos:column="31">(<argument><expr><name pos:line="26" pos:column="32">buffer<pos:position pos:line="26" pos:column="38"/></name></expr></argument>, <argument><expr><sizeof pos:line="26" pos:column="40">sizeof<argument_list pos:line="26" pos:column="46">(<argument><expr><name pos:line="26" pos:column="47">buffer<pos:position pos:line="26" pos:column="53"/></name></expr></argument>)<pos:position pos:line="26" pos:column="54"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="26" pos:column="56">ds<pos:position pos:line="26" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="60">vl<pos:position pos:line="26" pos:column="62"/></name></expr></argument>)<pos:position pos:line="26" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="64"/></expr_stmt>
        <if pos:line="27" pos:column="9">if <condition pos:line="27" pos:column="12">(<expr><name pos:line="27" pos:column="13">status<pos:position pos:line="27" pos:column="19"/></name> <operator pos:line="27" pos:column="20">!=<pos:position pos:line="27" pos:column="22"/></operator> <literal type="number" pos:line="27" pos:column="23">0<pos:position pos:line="27" pos:column="24"/></literal></expr>)<pos:position pos:line="27" pos:column="25"/></condition><then pos:line="27" pos:column="25"> <block pos:line="27" pos:column="26">{
            <expr_stmt><expr><call><name pos:line="28" pos:column="13">ERROR<pos:position pos:line="28" pos:column="18"/></name><argument_list pos:line="28" pos:column="18">(<argument><expr><literal type="string" pos:line="28" pos:column="19">"write_kafka plugin: create_putval failed with status %i."<pos:position pos:line="28" pos:column="77"/></literal></expr></argument>,
                  <argument><expr><name pos:line="29" pos:column="19">status<pos:position pos:line="29" pos:column="25"/></name></expr></argument>)<pos:position pos:line="29" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="27"/></expr_stmt>
            <return pos:line="30" pos:column="13">return <expr><name pos:line="30" pos:column="20">status<pos:position pos:line="30" pos:column="26"/></name></expr>;<pos:position pos:line="30" pos:column="27"/></return>
        }<pos:position pos:line="31" pos:column="10"/></block></then></if>
        <expr_stmt><expr><name pos:line="32" pos:column="9">blen<pos:position pos:line="32" pos:column="13"/></name> <operator pos:line="32" pos:column="14">=<pos:position pos:line="32" pos:column="15"/></operator> <call><name pos:line="32" pos:column="16">strlen<pos:position pos:line="32" pos:column="22"/></name><argument_list pos:line="32" pos:column="22">(<argument><expr><name pos:line="32" pos:column="23">buffer<pos:position pos:line="32" pos:column="29"/></name></expr></argument>)<pos:position pos:line="32" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="31"/></expr_stmt>
        <break pos:line="33" pos:column="9">break;<pos:position pos:line="33" pos:column="15"/></break>
    <case pos:line="34" pos:column="5">case <expr><name pos:line="34" pos:column="10">KAFKA_FORMAT_JSON<pos:position pos:line="34" pos:column="27"/></name></expr>:<pos:position pos:line="34" pos:column="28"/></case>

        <expr_stmt><expr><call><name pos:line="36" pos:column="9">format_json_initialize<pos:position pos:line="36" pos:column="31"/></name><argument_list pos:line="36" pos:column="31">(<argument><expr><name pos:line="36" pos:column="32">buffer<pos:position pos:line="36" pos:column="38"/></name></expr></argument>, <argument><expr><operator pos:line="36" pos:column="40">&amp;<pos:position pos:line="36" pos:column="45"/></operator><name pos:line="36" pos:column="41">bfill<pos:position pos:line="36" pos:column="46"/></name></expr></argument>, <argument><expr><operator pos:line="36" pos:column="48">&amp;<pos:position pos:line="36" pos:column="53"/></operator><name pos:line="36" pos:column="49">bfree<pos:position pos:line="36" pos:column="54"/></name></expr></argument>)<pos:position pos:line="36" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="56"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="37" pos:column="9">format_json_value_list<pos:position pos:line="37" pos:column="31"/></name><argument_list pos:line="37" pos:column="31">(<argument><expr><name pos:line="37" pos:column="32">buffer<pos:position pos:line="37" pos:column="38"/></name></expr></argument>, <argument><expr><operator pos:line="37" pos:column="40">&amp;<pos:position pos:line="37" pos:column="45"/></operator><name pos:line="37" pos:column="41">bfill<pos:position pos:line="37" pos:column="46"/></name></expr></argument>, <argument><expr><operator pos:line="37" pos:column="48">&amp;<pos:position pos:line="37" pos:column="53"/></operator><name pos:line="37" pos:column="49">bfree<pos:position pos:line="37" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="56">ds<pos:position pos:line="37" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="60">vl<pos:position pos:line="37" pos:column="62"/></name></expr></argument>,
                               <argument><expr><name><name pos:line="38" pos:column="32">ctx<pos:position pos:line="38" pos:column="35"/></name><operator pos:line="38" pos:column="35">-&gt;<pos:position pos:line="38" pos:column="40"/></operator><name pos:line="38" pos:column="37">store_rates<pos:position pos:line="38" pos:column="48"/></name></name></expr></argument>)<pos:position pos:line="38" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="50"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="39" pos:column="9">format_json_finalize<pos:position pos:line="39" pos:column="29"/></name><argument_list pos:line="39" pos:column="29">(<argument><expr><name pos:line="39" pos:column="30">buffer<pos:position pos:line="39" pos:column="36"/></name></expr></argument>, <argument><expr><operator pos:line="39" pos:column="38">&amp;<pos:position pos:line="39" pos:column="43"/></operator><name pos:line="39" pos:column="39">bfill<pos:position pos:line="39" pos:column="44"/></name></expr></argument>, <argument><expr><operator pos:line="39" pos:column="46">&amp;<pos:position pos:line="39" pos:column="51"/></operator><name pos:line="39" pos:column="47">bfree<pos:position pos:line="39" pos:column="52"/></name></expr></argument>)<pos:position pos:line="39" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="54"/></expr_stmt>
        <expr_stmt><expr><name pos:line="40" pos:column="9">blen<pos:position pos:line="40" pos:column="13"/></name> <operator pos:line="40" pos:column="14">=<pos:position pos:line="40" pos:column="15"/></operator> <call><name pos:line="40" pos:column="16">strlen<pos:position pos:line="40" pos:column="22"/></name><argument_list pos:line="40" pos:column="22">(<argument><expr><name pos:line="40" pos:column="23">buffer<pos:position pos:line="40" pos:column="29"/></name></expr></argument>)<pos:position pos:line="40" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="31"/></expr_stmt>
        <break pos:line="41" pos:column="9">break;<pos:position pos:line="41" pos:column="15"/></break>
    <case pos:line="42" pos:column="5">case <expr><name pos:line="42" pos:column="10">KAFKA_FORMAT_GRAPHITE<pos:position pos:line="42" pos:column="31"/></name></expr>:<pos:position pos:line="42" pos:column="32"/></case>
        <expr_stmt><expr><name pos:line="43" pos:column="9">status<pos:position pos:line="43" pos:column="15"/></name> <operator pos:line="43" pos:column="16">=<pos:position pos:line="43" pos:column="17"/></operator> <call><name pos:line="43" pos:column="18">format_graphite<pos:position pos:line="43" pos:column="33"/></name><argument_list pos:line="43" pos:column="33">(<argument><expr><name pos:line="43" pos:column="34">buffer<pos:position pos:line="43" pos:column="40"/></name></expr></argument>, <argument><expr><sizeof pos:line="43" pos:column="42">sizeof<argument_list pos:line="43" pos:column="48">(<argument><expr><name pos:line="43" pos:column="49">buffer<pos:position pos:line="43" pos:column="55"/></name></expr></argument>)<pos:position pos:line="43" pos:column="56"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="43" pos:column="58">ds<pos:position pos:line="43" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="62">vl<pos:position pos:line="43" pos:column="64"/></name></expr></argument>,
                                 <argument><expr><name><name pos:line="44" pos:column="34">ctx<pos:position pos:line="44" pos:column="37"/></name><operator pos:line="44" pos:column="37">-&gt;<pos:position pos:line="44" pos:column="42"/></operator><name pos:line="44" pos:column="39">prefix<pos:position pos:line="44" pos:column="45"/></name></name></expr></argument>, <argument><expr><name><name pos:line="44" pos:column="47">ctx<pos:position pos:line="44" pos:column="50"/></name><operator pos:line="44" pos:column="50">-&gt;<pos:position pos:line="44" pos:column="55"/></operator><name pos:line="44" pos:column="52">postfix<pos:position pos:line="44" pos:column="59"/></name></name></expr></argument>, <argument><expr><name><name pos:line="44" pos:column="61">ctx<pos:position pos:line="44" pos:column="64"/></name><operator pos:line="44" pos:column="64">-&gt;<pos:position pos:line="44" pos:column="69"/></operator><name pos:line="44" pos:column="66">escape_char<pos:position pos:line="44" pos:column="77"/></name></name></expr></argument>,
                                 <argument><expr><name><name pos:line="45" pos:column="34">ctx<pos:position pos:line="45" pos:column="37"/></name><operator pos:line="45" pos:column="37">-&gt;<pos:position pos:line="45" pos:column="42"/></operator><name pos:line="45" pos:column="39">graphite_flags<pos:position pos:line="45" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="45" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="55"/></expr_stmt>
        <if pos:line="46" pos:column="9">if <condition pos:line="46" pos:column="12">(<expr><name pos:line="46" pos:column="13">status<pos:position pos:line="46" pos:column="19"/></name> <operator pos:line="46" pos:column="20">!=<pos:position pos:line="46" pos:column="22"/></operator> <literal type="number" pos:line="46" pos:column="23">0<pos:position pos:line="46" pos:column="24"/></literal></expr>)<pos:position pos:line="46" pos:column="25"/></condition><then pos:line="46" pos:column="25"> <block pos:line="46" pos:column="26">{
            <expr_stmt><expr><call><name pos:line="47" pos:column="13">ERROR<pos:position pos:line="47" pos:column="18"/></name><argument_list pos:line="47" pos:column="18">(<argument><expr><literal type="string" pos:line="47" pos:column="19">"write_kafka plugin: format_graphite failed with status %i."<pos:position pos:line="47" pos:column="79"/></literal></expr></argument>,
                  <argument><expr><name pos:line="48" pos:column="19">status<pos:position pos:line="48" pos:column="25"/></name></expr></argument>)<pos:position pos:line="48" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="27"/></expr_stmt>
            <return pos:line="49" pos:column="13">return <expr><name pos:line="49" pos:column="20">status<pos:position pos:line="49" pos:column="26"/></name></expr>;<pos:position pos:line="49" pos:column="27"/></return>
        }<pos:position pos:line="50" pos:column="10"/></block></then></if>
        <expr_stmt><expr><name pos:line="51" pos:column="9">blen<pos:position pos:line="51" pos:column="13"/></name> <operator pos:line="51" pos:column="14">=<pos:position pos:line="51" pos:column="15"/></operator> <call><name pos:line="51" pos:column="16">strlen<pos:position pos:line="51" pos:column="22"/></name><argument_list pos:line="51" pos:column="22">(<argument><expr><name pos:line="51" pos:column="23">buffer<pos:position pos:line="51" pos:column="29"/></name></expr></argument>)<pos:position pos:line="51" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="31"/></expr_stmt>
        <break pos:line="52" pos:column="9">break;<pos:position pos:line="52" pos:column="15"/></break>
    <default pos:line="53" pos:column="5">default:<pos:position pos:line="53" pos:column="13"/></default>
        <expr_stmt><expr><call><name pos:line="54" pos:column="9">ERROR<pos:position pos:line="54" pos:column="14"/></name><argument_list pos:line="54" pos:column="14">(<argument><expr><literal type="string" pos:line="54" pos:column="15">"write_kafka plugin: invalid format %i."<pos:position pos:line="54" pos:column="55"/></literal></expr></argument>, <argument><expr><name><name pos:line="54" pos:column="57">ctx<pos:position pos:line="54" pos:column="60"/></name><operator pos:line="54" pos:column="60">-&gt;<pos:position pos:line="54" pos:column="65"/></operator><name pos:line="54" pos:column="62">format<pos:position pos:line="54" pos:column="68"/></name></name></expr></argument>)<pos:position pos:line="54" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="70"/></expr_stmt>
        <return pos:line="55" pos:column="9">return <expr><operator pos:line="55" pos:column="16">-<pos:position pos:line="55" pos:column="17"/></operator><literal type="number" pos:line="55" pos:column="17">1<pos:position pos:line="55" pos:column="18"/></literal></expr>;<pos:position pos:line="55" pos:column="19"/></return>
    }<pos:position pos:line="56" pos:column="6"/></block></switch>

    <comment type="block" pos:line="58" pos:column="5">/*
     * We partition our stream by metric name
     */</comment>
    <if pos:line="61" pos:column="5">if <condition pos:line="61" pos:column="8">(<expr><name><name pos:line="61" pos:column="9">ctx<pos:position pos:line="61" pos:column="12"/></name><operator pos:line="61" pos:column="12">-&gt;<pos:position pos:line="61" pos:column="17"/></operator><name pos:line="61" pos:column="14">has_key<pos:position pos:line="61" pos:column="21"/></name></name></expr>)<pos:position pos:line="61" pos:column="22"/></condition><then pos:line="61" pos:column="22">
        <block type="pseudo"><expr_stmt><expr><name pos:line="62" pos:column="9">key<pos:position pos:line="62" pos:column="12"/></name> <operator pos:line="62" pos:column="13">=<pos:position pos:line="62" pos:column="14"/></operator> <name><name pos:line="62" pos:column="15">ctx<pos:position pos:line="62" pos:column="18"/></name><operator pos:line="62" pos:column="18">-&gt;<pos:position pos:line="62" pos:column="23"/></operator><name pos:line="62" pos:column="20">key<pos:position pos:line="62" pos:column="23"/></name></name></expr>;<pos:position pos:line="62" pos:column="24"/></expr_stmt></block></then>
    <else pos:line="63" pos:column="5">else
        <block type="pseudo"><expr_stmt><expr><name pos:line="64" pos:column="9">key<pos:position pos:line="64" pos:column="12"/></name> <operator pos:line="64" pos:column="13">=<pos:position pos:line="64" pos:column="14"/></operator> <call><name pos:line="64" pos:column="15">rand<pos:position pos:line="64" pos:column="19"/></name><argument_list pos:line="64" pos:column="19">()<pos:position pos:line="64" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="22"/></expr_stmt></block></else></if>

    <expr_stmt><expr><call><name pos:line="66" pos:column="5">rd_kafka_produce<pos:position pos:line="66" pos:column="21"/></name><argument_list pos:line="66" pos:column="21">(<argument><expr><name><name pos:line="66" pos:column="22">ctx<pos:position pos:line="66" pos:column="25"/></name><operator pos:line="66" pos:column="25">-&gt;<pos:position pos:line="66" pos:column="30"/></operator><name pos:line="66" pos:column="27">topic<pos:position pos:line="66" pos:column="32"/></name></name></expr></argument>, <argument><expr><name pos:line="66" pos:column="34">RD_KAFKA_PARTITION_UA<pos:position pos:line="66" pos:column="55"/></name></expr></argument>,
                     <argument><expr><name pos:line="67" pos:column="22">RD_KAFKA_MSG_F_COPY<pos:position pos:line="67" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="67" pos:column="43">buffer<pos:position pos:line="67" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="67" pos:column="51">blen<pos:position pos:line="67" pos:column="55"/></name></expr></argument>,
                     <argument><expr><operator pos:line="68" pos:column="22">&amp;<pos:position pos:line="68" pos:column="27"/></operator><name pos:line="68" pos:column="23">key<pos:position pos:line="68" pos:column="26"/></name></expr></argument>, <argument><expr><sizeof pos:line="68" pos:column="28">sizeof<argument_list pos:line="68" pos:column="34">(<argument><expr><name pos:line="68" pos:column="35">key<pos:position pos:line="68" pos:column="38"/></name></expr></argument>)<pos:position pos:line="68" pos:column="39"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="68" pos:column="41">NULL<pos:position pos:line="68" pos:column="45"/></name></expr></argument>)<pos:position pos:line="68" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="47"/></expr_stmt>

	<return pos:line="70" pos:column="9">return <expr><name pos:line="70" pos:column="16">status<pos:position pos:line="70" pos:column="22"/></name></expr>;<pos:position pos:line="70" pos:column="23"/></return>
}<pos:position pos:line="71" pos:column="2"/></block></function></unit>
