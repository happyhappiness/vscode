<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_2475_collectd-5.6.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">notify_systemd<pos:position pos:line="1" pos:column="26"/></name> <parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><name pos:line="1" pos:column="28">void<pos:position pos:line="1" pos:column="32"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="33"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">int<pos:position pos:line="3" pos:column="8"/></name></type>                  <name pos:line="3" pos:column="26">fd<pos:position pos:line="3" pos:column="28"/></name></decl>;<pos:position pos:line="3" pos:column="29"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="4" pos:column="5">const<pos:position pos:line="4" pos:column="10"/></specifier> <name pos:line="4" pos:column="11">char<pos:position pos:line="4" pos:column="15"/></name>          <modifier pos:line="4" pos:column="25">*<pos:position pos:line="4" pos:column="26"/></modifier></type><name pos:line="4" pos:column="26">notifysocket<pos:position pos:line="4" pos:column="38"/></name></decl>;<pos:position pos:line="4" pos:column="39"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="5" pos:column="5">struct<pos:position pos:line="5" pos:column="11"/></name> <name pos:line="5" pos:column="12">sockaddr_un<pos:position pos:line="5" pos:column="23"/></name></name></type>   <name pos:line="5" pos:column="26">su<pos:position pos:line="5" pos:column="28"/></name> <init pos:line="5" pos:column="29">= <expr><block pos:line="5" pos:column="31">{ <expr><literal type="number" pos:line="5" pos:column="33">0<pos:position pos:line="5" pos:column="34"/></literal></expr> }<pos:position pos:line="5" pos:column="36"/></block></expr></init></decl>;<pos:position pos:line="5" pos:column="37"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">size_t<pos:position pos:line="6" pos:column="11"/></name></type>               <name pos:line="6" pos:column="26">su_size<pos:position pos:line="6" pos:column="33"/></name></decl>;<pos:position pos:line="6" pos:column="34"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">char<pos:position pos:line="7" pos:column="9"/></name></type>                 <name><name pos:line="7" pos:column="26">buffer<pos:position pos:line="7" pos:column="32"/></name><index pos:line="7" pos:column="32">[]<pos:position pos:line="7" pos:column="34"/></index></name> <init pos:line="7" pos:column="35">= <expr><literal type="string" pos:line="7" pos:column="37">"READY=1\n"<pos:position pos:line="7" pos:column="48"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="49"/></decl_stmt>

    <expr_stmt><expr><name pos:line="9" pos:column="5">notifysocket<pos:position pos:line="9" pos:column="17"/></name> <operator pos:line="9" pos:column="18">=<pos:position pos:line="9" pos:column="19"/></operator> <call><name pos:line="9" pos:column="20">getenv<pos:position pos:line="9" pos:column="26"/></name> <argument_list pos:line="9" pos:column="27">(<argument><expr><literal type="string" pos:line="9" pos:column="28">"NOTIFY_SOCKET"<pos:position pos:line="9" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="45"/></expr_stmt>
    <if pos:line="10" pos:column="5">if <condition pos:line="10" pos:column="8">(<expr><name pos:line="10" pos:column="9">notifysocket<pos:position pos:line="10" pos:column="21"/></name> <operator pos:line="10" pos:column="22">==<pos:position pos:line="10" pos:column="24"/></operator> <name pos:line="10" pos:column="25">NULL<pos:position pos:line="10" pos:column="29"/></name></expr>)<pos:position pos:line="10" pos:column="30"/></condition><then pos:line="10" pos:column="30">
        <block type="pseudo"><return pos:line="11" pos:column="9">return <expr><literal type="number" pos:line="11" pos:column="16">0<pos:position pos:line="11" pos:column="17"/></literal></expr>;<pos:position pos:line="11" pos:column="18"/></return></block></then></if>

    <if pos:line="13" pos:column="5">if <condition pos:line="13" pos:column="8">(<expr><operator pos:line="13" pos:column="9">(<pos:position pos:line="13" pos:column="10"/></operator><call><name pos:line="13" pos:column="10">strlen<pos:position pos:line="13" pos:column="16"/></name> <argument_list pos:line="13" pos:column="17">(<argument><expr><name pos:line="13" pos:column="18">notifysocket<pos:position pos:line="13" pos:column="30"/></name></expr></argument>)<pos:position pos:line="13" pos:column="31"/></argument_list></call> <operator pos:line="13" pos:column="32">&lt;<pos:position pos:line="13" pos:column="36"/></operator> <literal type="number" pos:line="13" pos:column="34">2<pos:position pos:line="13" pos:column="35"/></literal><operator pos:line="13" pos:column="35">)<pos:position pos:line="13" pos:column="36"/></operator>
        <operator pos:line="14" pos:column="9">||<pos:position pos:line="14" pos:column="11"/></operator> <operator pos:line="14" pos:column="12">(<pos:position pos:line="14" pos:column="13"/></operator><operator pos:line="14" pos:column="13">(<pos:position pos:line="14" pos:column="14"/></operator><name><name pos:line="14" pos:column="14">notifysocket<pos:position pos:line="14" pos:column="26"/></name><index pos:line="14" pos:column="26">[<expr><literal type="number" pos:line="14" pos:column="27">0<pos:position pos:line="14" pos:column="28"/></literal></expr>]<pos:position pos:line="14" pos:column="29"/></index></name> <operator pos:line="14" pos:column="30">!=<pos:position pos:line="14" pos:column="32"/></operator> <literal type="char" pos:line="14" pos:column="33">'@'<pos:position pos:line="14" pos:column="36"/></literal><operator pos:line="14" pos:column="36">)<pos:position pos:line="14" pos:column="37"/></operator> <operator pos:line="14" pos:column="38">&amp;&amp;<pos:position pos:line="14" pos:column="48"/></operator> <operator pos:line="14" pos:column="41">(<pos:position pos:line="14" pos:column="42"/></operator><name><name pos:line="14" pos:column="42">notifysocket<pos:position pos:line="14" pos:column="54"/></name><index pos:line="14" pos:column="54">[<expr><literal type="number" pos:line="14" pos:column="55">0<pos:position pos:line="14" pos:column="56"/></literal></expr>]<pos:position pos:line="14" pos:column="57"/></index></name> <operator pos:line="14" pos:column="58">!=<pos:position pos:line="14" pos:column="60"/></operator> <literal type="char" pos:line="14" pos:column="61">'/'<pos:position pos:line="14" pos:column="64"/></literal><operator pos:line="14" pos:column="64">)<pos:position pos:line="14" pos:column="65"/></operator><operator pos:line="14" pos:column="65">)<pos:position pos:line="14" pos:column="66"/></operator></expr>)<pos:position pos:line="14" pos:column="67"/></condition><then pos:line="14" pos:column="67">
    <block pos:line="15" pos:column="5">{
        <expr_stmt><expr><call><name pos:line="16" pos:column="9">ERROR<pos:position pos:line="16" pos:column="14"/></name> <argument_list pos:line="16" pos:column="15">(<argument><expr><literal type="string" pos:line="16" pos:column="16">"invalid notification socket NOTIFY_SOCKET=\"%s\": path must be absolute"<pos:position pos:line="16" pos:column="89"/></literal></expr></argument>, <argument><expr><name pos:line="16" pos:column="91">notifysocket<pos:position pos:line="16" pos:column="103"/></name></expr></argument>)<pos:position pos:line="16" pos:column="104"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="105"/></expr_stmt>
        <return pos:line="17" pos:column="9">return <expr><literal type="number" pos:line="17" pos:column="16">0<pos:position pos:line="17" pos:column="17"/></literal></expr>;<pos:position pos:line="17" pos:column="18"/></return>
    }<pos:position pos:line="18" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="19" pos:column="5">NOTICE<pos:position pos:line="19" pos:column="11"/></name> <argument_list pos:line="19" pos:column="12">(<argument><expr><literal type="string" pos:line="19" pos:column="13">"Systemd detected, trying to signal readyness."<pos:position pos:line="19" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="62"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="21" pos:column="5">unsetenv<pos:position pos:line="21" pos:column="13"/></name> <argument_list pos:line="21" pos:column="14">(<argument><expr><literal type="string" pos:line="21" pos:column="15">"NOTIFY_SOCKET"<pos:position pos:line="21" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="32"/></expr_stmt>

<cpp:if pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">if<pos:position pos:line="23" pos:column="4"/></cpp:directive> <expr><call><name pos:line="23" pos:column="5">defined<pos:position pos:line="23" pos:column="12"/></name><argument_list pos:line="23" pos:column="12">(<argument><expr><name pos:line="23" pos:column="13">SOCK_CLOEXEC<pos:position pos:line="23" pos:column="25"/></name></expr></argument>)<pos:position pos:line="23" pos:column="26"/></argument_list></call></expr></cpp:if>
    <expr_stmt><expr><name pos:line="24" pos:column="5">fd<pos:position pos:line="24" pos:column="7"/></name> <operator pos:line="24" pos:column="8">=<pos:position pos:line="24" pos:column="9"/></operator> <call><name pos:line="24" pos:column="10">socket<pos:position pos:line="24" pos:column="16"/></name> <argument_list pos:line="24" pos:column="17">(<argument><expr><name pos:line="24" pos:column="18">AF_UNIX<pos:position pos:line="24" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="27">SOCK_DGRAM<pos:position pos:line="24" pos:column="37"/></name><operator pos:line="24" pos:column="37">|<pos:position pos:line="24" pos:column="38"/></operator><name pos:line="24" pos:column="38">SOCK_CLOEXEC<pos:position pos:line="24" pos:column="50"/></name></expr></argument>, <comment type="block" pos:line="24" pos:column="52">/* protocol = */</comment> <argument><expr><literal type="number" pos:line="24" pos:column="69">0<pos:position pos:line="24" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="72"/></expr_stmt>
<cpp:else pos:line="25" pos:column="1">#<cpp:directive pos:line="25" pos:column="2">else<pos:position pos:line="25" pos:column="6"/></cpp:directive></cpp:else>
    <expr_stmt><expr><name pos:line="26" pos:column="5">fd<pos:position pos:line="26" pos:column="7"/></name> <operator pos:line="26" pos:column="8">=<pos:position pos:line="26" pos:column="9"/></operator> <call><name pos:line="26" pos:column="10">socket<pos:position pos:line="26" pos:column="16"/></name> <argument_list pos:line="26" pos:column="17">(<argument><expr><name pos:line="26" pos:column="18">AF_UNIX<pos:position pos:line="26" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="27">SOCK_DGRAM<pos:position pos:line="26" pos:column="37"/></name></expr></argument>, <comment type="block" pos:line="26" pos:column="39">/* protocol = */</comment> <argument><expr><literal type="number" pos:line="26" pos:column="56">0<pos:position pos:line="26" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="59"/></expr_stmt>
<cpp:endif pos:line="27" pos:column="1">#<cpp:directive pos:line="27" pos:column="2">endif<pos:position pos:line="27" pos:column="7"/></cpp:directive></cpp:endif>
    <if pos:line="28" pos:column="5">if <condition pos:line="28" pos:column="8">(<expr><name pos:line="28" pos:column="9">fd<pos:position pos:line="28" pos:column="11"/></name> <operator pos:line="28" pos:column="12">&lt;<pos:position pos:line="28" pos:column="16"/></operator> <literal type="number" pos:line="28" pos:column="14">0<pos:position pos:line="28" pos:column="15"/></literal></expr>)<pos:position pos:line="28" pos:column="16"/></condition><then pos:line="28" pos:column="16"> <block pos:line="28" pos:column="17">{
        <decl_stmt><decl><type><name pos:line="29" pos:column="9">char<pos:position pos:line="29" pos:column="13"/></name></type> <name><name pos:line="29" pos:column="14">errbuf<pos:position pos:line="29" pos:column="20"/></name><index pos:line="29" pos:column="20">[<expr><literal type="number" pos:line="29" pos:column="21">1024<pos:position pos:line="29" pos:column="25"/></literal></expr>]<pos:position pos:line="29" pos:column="26"/></index></name></decl>;<pos:position pos:line="29" pos:column="27"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="30" pos:column="9">ERROR<pos:position pos:line="30" pos:column="14"/></name> <argument_list pos:line="30" pos:column="15">(<argument><expr><literal type="string" pos:line="30" pos:column="16">"creating UNIX socket failed: %s"<pos:position pos:line="30" pos:column="49"/></literal></expr></argument>,
                 <argument><expr><call><name pos:line="31" pos:column="18">sstrerror<pos:position pos:line="31" pos:column="27"/></name> <argument_list pos:line="31" pos:column="28">(<argument><expr><name pos:line="31" pos:column="29">errno<pos:position pos:line="31" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="36">errbuf<pos:position pos:line="31" pos:column="42"/></name></expr></argument>, <argument><expr><sizeof pos:line="31" pos:column="44">sizeof <argument_list pos:line="31" pos:column="51">(<argument><expr><name pos:line="31" pos:column="52">errbuf<pos:position pos:line="31" pos:column="58"/></name></expr></argument>)<pos:position pos:line="31" pos:column="59"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="31" pos:column="60"/></argument_list></call></expr></argument>)<pos:position pos:line="31" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="62"/></expr_stmt>
        <return pos:line="32" pos:column="9">return <expr><literal type="number" pos:line="32" pos:column="16">0<pos:position pos:line="32" pos:column="17"/></literal></expr>;<pos:position pos:line="32" pos:column="18"/></return>
    }<pos:position pos:line="33" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name><name pos:line="35" pos:column="5">su<pos:position pos:line="35" pos:column="7"/></name><operator pos:line="35" pos:column="7">.<pos:position pos:line="35" pos:column="8"/></operator><name pos:line="35" pos:column="8">sun_family<pos:position pos:line="35" pos:column="18"/></name></name> <operator pos:line="35" pos:column="19">=<pos:position pos:line="35" pos:column="20"/></operator> <name pos:line="35" pos:column="21">AF_UNIX<pos:position pos:line="35" pos:column="28"/></name></expr>;<pos:position pos:line="35" pos:column="29"/></expr_stmt>
    <if pos:line="36" pos:column="5">if <condition pos:line="36" pos:column="8">(<expr><name><name pos:line="36" pos:column="9">notifysocket<pos:position pos:line="36" pos:column="21"/></name><index pos:line="36" pos:column="21">[<expr><literal type="number" pos:line="36" pos:column="22">0<pos:position pos:line="36" pos:column="23"/></literal></expr>]<pos:position pos:line="36" pos:column="24"/></index></name> <operator pos:line="36" pos:column="25">!=<pos:position pos:line="36" pos:column="27"/></operator> <literal type="char" pos:line="36" pos:column="28">'@'<pos:position pos:line="36" pos:column="31"/></literal></expr>)<pos:position pos:line="36" pos:column="32"/></condition><then pos:line="36" pos:column="32">
    <block pos:line="37" pos:column="5">{
        <comment type="block" pos:line="38" pos:column="9">/* regular UNIX socket */</comment>
        <expr_stmt><expr><call><name pos:line="39" pos:column="9">sstrncpy<pos:position pos:line="39" pos:column="17"/></name> <argument_list pos:line="39" pos:column="18">(<argument><expr><name><name pos:line="39" pos:column="19">su<pos:position pos:line="39" pos:column="21"/></name><operator pos:line="39" pos:column="21">.<pos:position pos:line="39" pos:column="22"/></operator><name pos:line="39" pos:column="22">sun_path<pos:position pos:line="39" pos:column="30"/></name></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="32">notifysocket<pos:position pos:line="39" pos:column="44"/></name></expr></argument>, <argument><expr><sizeof pos:line="39" pos:column="46">sizeof <argument_list pos:line="39" pos:column="53">(<argument><expr><name><name pos:line="39" pos:column="54">su<pos:position pos:line="39" pos:column="56"/></name><operator pos:line="39" pos:column="56">.<pos:position pos:line="39" pos:column="57"/></operator><name pos:line="39" pos:column="57">sun_path<pos:position pos:line="39" pos:column="65"/></name></name></expr></argument>)<pos:position pos:line="39" pos:column="66"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="39" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="68"/></expr_stmt>
        <expr_stmt><expr><name pos:line="40" pos:column="9">su_size<pos:position pos:line="40" pos:column="16"/></name> <operator pos:line="40" pos:column="17">=<pos:position pos:line="40" pos:column="18"/></operator> <sizeof pos:line="40" pos:column="19">sizeof <argument_list pos:line="40" pos:column="26">(<argument><expr><name pos:line="40" pos:column="27">su<pos:position pos:line="40" pos:column="29"/></name></expr></argument>)<pos:position pos:line="40" pos:column="30"/></argument_list></sizeof></expr>;<pos:position pos:line="40" pos:column="31"/></expr_stmt>
    }<pos:position pos:line="41" pos:column="6"/></block></then>
    <else pos:line="42" pos:column="5">else
    <block pos:line="43" pos:column="5">{
        <comment type="block" pos:line="44" pos:column="9">/* Linux abstract namespace socket: specify address as "\0foo", i.e.
         * start with a null byte. Since null bytes have no special meaning in
         * that case, we have to set su_size correctly to cover only the bytes
         * that are part of the address. */</comment>
        <expr_stmt><expr><call><name pos:line="48" pos:column="9">sstrncpy<pos:position pos:line="48" pos:column="17"/></name> <argument_list pos:line="48" pos:column="18">(<argument><expr><name><name pos:line="48" pos:column="19">su<pos:position pos:line="48" pos:column="21"/></name><operator pos:line="48" pos:column="21">.<pos:position pos:line="48" pos:column="22"/></operator><name pos:line="48" pos:column="22">sun_path<pos:position pos:line="48" pos:column="30"/></name></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="32">notifysocket<pos:position pos:line="48" pos:column="44"/></name></expr></argument>, <argument><expr><sizeof pos:line="48" pos:column="46">sizeof <argument_list pos:line="48" pos:column="53">(<argument><expr><name><name pos:line="48" pos:column="54">su<pos:position pos:line="48" pos:column="56"/></name><operator pos:line="48" pos:column="56">.<pos:position pos:line="48" pos:column="57"/></operator><name pos:line="48" pos:column="57">sun_path<pos:position pos:line="48" pos:column="65"/></name></name></expr></argument>)<pos:position pos:line="48" pos:column="66"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="48" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="68"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="49" pos:column="9">su<pos:position pos:line="49" pos:column="11"/></name><operator pos:line="49" pos:column="11">.<pos:position pos:line="49" pos:column="12"/></operator><name pos:line="49" pos:column="12">sun_path<pos:position pos:line="49" pos:column="20"/></name><index pos:line="49" pos:column="20">[<expr><literal type="number" pos:line="49" pos:column="21">0<pos:position pos:line="49" pos:column="22"/></literal></expr>]<pos:position pos:line="49" pos:column="23"/></index></name> <operator pos:line="49" pos:column="24">=<pos:position pos:line="49" pos:column="25"/></operator> <literal type="number" pos:line="49" pos:column="26">0<pos:position pos:line="49" pos:column="27"/></literal></expr>;<pos:position pos:line="49" pos:column="28"/></expr_stmt>
        <expr_stmt><expr><name pos:line="50" pos:column="9">su_size<pos:position pos:line="50" pos:column="16"/></name> <operator pos:line="50" pos:column="17">=<pos:position pos:line="50" pos:column="18"/></operator> <sizeof pos:line="50" pos:column="19">sizeof <argument_list pos:line="50" pos:column="26">(<argument><expr><name pos:line="50" pos:column="27">sa_family_t<pos:position pos:line="50" pos:column="38"/></name></expr></argument>)<pos:position pos:line="50" pos:column="39"/></argument_list></sizeof> <operator pos:line="50" pos:column="40">+<pos:position pos:line="50" pos:column="41"/></operator> <call><name pos:line="50" pos:column="42">strlen<pos:position pos:line="50" pos:column="48"/></name> <argument_list pos:line="50" pos:column="49">(<argument><expr><name pos:line="50" pos:column="50">notifysocket<pos:position pos:line="50" pos:column="62"/></name></expr></argument>)<pos:position pos:line="50" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="64"/></expr_stmt>
        <if pos:line="51" pos:column="9">if <condition pos:line="51" pos:column="12">(<expr><name pos:line="51" pos:column="13">su_size<pos:position pos:line="51" pos:column="20"/></name> <operator pos:line="51" pos:column="21">&gt;<pos:position pos:line="51" pos:column="25"/></operator> <sizeof pos:line="51" pos:column="23">sizeof <argument_list pos:line="51" pos:column="30">(<argument><expr><name pos:line="51" pos:column="31">su<pos:position pos:line="51" pos:column="33"/></name></expr></argument>)<pos:position pos:line="51" pos:column="34"/></argument_list></sizeof></expr>)<pos:position pos:line="51" pos:column="35"/></condition><then pos:line="51" pos:column="35">
            <block type="pseudo"><expr_stmt><expr><name pos:line="52" pos:column="13">su_size<pos:position pos:line="52" pos:column="20"/></name> <operator pos:line="52" pos:column="21">=<pos:position pos:line="52" pos:column="22"/></operator> <sizeof pos:line="52" pos:column="23">sizeof <argument_list pos:line="52" pos:column="30">(<argument><expr><name pos:line="52" pos:column="31">su<pos:position pos:line="52" pos:column="33"/></name></expr></argument>)<pos:position pos:line="52" pos:column="34"/></argument_list></sizeof></expr>;<pos:position pos:line="52" pos:column="35"/></expr_stmt></block></then></if>
    }<pos:position pos:line="53" pos:column="6"/></block></else></if>

    <if pos:line="55" pos:column="5">if <condition pos:line="55" pos:column="8">(<expr><call><name pos:line="55" pos:column="9">sendto<pos:position pos:line="55" pos:column="15"/></name> <argument_list pos:line="55" pos:column="16">(<argument><expr><name pos:line="55" pos:column="17">fd<pos:position pos:line="55" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="55" pos:column="21">buffer<pos:position pos:line="55" pos:column="27"/></name></expr></argument>, <argument><expr><call><name pos:line="55" pos:column="29">strlen<pos:position pos:line="55" pos:column="35"/></name> <argument_list pos:line="55" pos:column="36">(<argument><expr><name pos:line="55" pos:column="37">buffer<pos:position pos:line="55" pos:column="43"/></name></expr></argument>)<pos:position pos:line="55" pos:column="44"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="55" pos:column="46">MSG_NOSIGNAL<pos:position pos:line="55" pos:column="58"/></name></expr></argument>, <argument><expr><operator pos:line="55" pos:column="60">(<pos:position pos:line="55" pos:column="61"/></operator><name pos:line="55" pos:column="61">void<pos:position pos:line="55" pos:column="65"/></name> <operator pos:line="55" pos:column="66">*<pos:position pos:line="55" pos:column="67"/></operator><operator pos:line="55" pos:column="67">)<pos:position pos:line="55" pos:column="68"/></operator> <operator pos:line="55" pos:column="69">&amp;<pos:position pos:line="55" pos:column="74"/></operator><name pos:line="55" pos:column="70">su<pos:position pos:line="55" pos:column="72"/></name></expr></argument>, <argument><expr><operator pos:line="55" pos:column="74">(<pos:position pos:line="55" pos:column="75"/></operator><name pos:line="55" pos:column="75">socklen_t<pos:position pos:line="55" pos:column="84"/></name><operator pos:line="55" pos:column="84">)<pos:position pos:line="55" pos:column="85"/></operator> <name pos:line="55" pos:column="86">su_size<pos:position pos:line="55" pos:column="93"/></name></expr></argument>)<pos:position pos:line="55" pos:column="94"/></argument_list></call> <operator pos:line="55" pos:column="95">&lt;<pos:position pos:line="55" pos:column="99"/></operator> <literal type="number" pos:line="55" pos:column="97">0<pos:position pos:line="55" pos:column="98"/></literal></expr>)<pos:position pos:line="55" pos:column="99"/></condition><then pos:line="55" pos:column="99">
    <block pos:line="56" pos:column="5">{
        <decl_stmt><decl><type><name pos:line="57" pos:column="9">char<pos:position pos:line="57" pos:column="13"/></name></type> <name><name pos:line="57" pos:column="14">errbuf<pos:position pos:line="57" pos:column="20"/></name><index pos:line="57" pos:column="20">[<expr><literal type="number" pos:line="57" pos:column="21">1024<pos:position pos:line="57" pos:column="25"/></literal></expr>]<pos:position pos:line="57" pos:column="26"/></index></name></decl>;<pos:position pos:line="57" pos:column="27"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="58" pos:column="9">ERROR<pos:position pos:line="58" pos:column="14"/></name> <argument_list pos:line="58" pos:column="15">(<argument><expr><literal type="string" pos:line="58" pos:column="16">"sendto(\"%s\") failed: %s"<pos:position pos:line="58" pos:column="43"/></literal></expr></argument>, <argument><expr><name pos:line="58" pos:column="45">notifysocket<pos:position pos:line="58" pos:column="57"/></name></expr></argument>,
                 <argument><expr><call><name pos:line="59" pos:column="18">sstrerror<pos:position pos:line="59" pos:column="27"/></name> <argument_list pos:line="59" pos:column="28">(<argument><expr><name pos:line="59" pos:column="29">errno<pos:position pos:line="59" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="59" pos:column="36">errbuf<pos:position pos:line="59" pos:column="42"/></name></expr></argument>, <argument><expr><sizeof pos:line="59" pos:column="44">sizeof <argument_list pos:line="59" pos:column="51">(<argument><expr><name pos:line="59" pos:column="52">errbuf<pos:position pos:line="59" pos:column="58"/></name></expr></argument>)<pos:position pos:line="59" pos:column="59"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="59" pos:column="60"/></argument_list></call></expr></argument>)<pos:position pos:line="59" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="62"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="60" pos:column="9">close<pos:position pos:line="60" pos:column="14"/></name><argument_list pos:line="60" pos:column="14">(<argument><expr><name pos:line="60" pos:column="15">fd<pos:position pos:line="60" pos:column="17"/></name></expr></argument>)<pos:position pos:line="60" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="19"/></expr_stmt>
        <return pos:line="61" pos:column="9">return <expr><literal type="number" pos:line="61" pos:column="16">0<pos:position pos:line="61" pos:column="17"/></literal></expr>;<pos:position pos:line="61" pos:column="18"/></return>
    }<pos:position pos:line="62" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="64" pos:column="5">unsetenv<pos:position pos:line="64" pos:column="13"/></name> <argument_list pos:line="64" pos:column="14">(<argument><expr><literal type="string" pos:line="64" pos:column="15">"NOTIFY_SOCKET"<pos:position pos:line="64" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="64" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="32"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="65" pos:column="5">close<pos:position pos:line="65" pos:column="10"/></name><argument_list pos:line="65" pos:column="10">(<argument><expr><name pos:line="65" pos:column="11">fd<pos:position pos:line="65" pos:column="13"/></name></expr></argument>)<pos:position pos:line="65" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="15"/></expr_stmt>
    <return pos:line="66" pos:column="5">return <expr><literal type="number" pos:line="66" pos:column="12">1<pos:position pos:line="66" pos:column="13"/></literal></expr>;<pos:position pos:line="66" pos:column="14"/></return>
}<pos:position pos:line="67" pos:column="2"/></block></function></unit>
