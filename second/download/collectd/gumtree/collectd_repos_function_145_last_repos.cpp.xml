<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_145_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">exec_read<pos:position pos:line="1" pos:column="21"/></name><parameter_list pos:line="1" pos:column="21">(<parameter><decl><type><name pos:line="1" pos:column="22">void<pos:position pos:line="1" pos:column="26"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="27"/></parameter_list> <comment type="block" pos:line="1" pos:column="28">/* {{{ */</comment>
<block pos:line="2" pos:column="1">{
  <for pos:line="3" pos:column="3">for <control pos:line="3" pos:column="7">(<init><decl><type><name pos:line="3" pos:column="8">program_list_t<pos:position pos:line="3" pos:column="22"/></name> <modifier pos:line="3" pos:column="23">*<pos:position pos:line="3" pos:column="24"/></modifier></type><name pos:line="3" pos:column="24">pl<pos:position pos:line="3" pos:column="26"/></name> <init pos:line="3" pos:column="27">= <expr><name pos:line="3" pos:column="29">pl_head<pos:position pos:line="3" pos:column="36"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="37"/></init> <condition><expr><name pos:line="3" pos:column="38">pl<pos:position pos:line="3" pos:column="40"/></name> <operator pos:line="3" pos:column="41">!=<pos:position pos:line="3" pos:column="43"/></operator> <name pos:line="3" pos:column="44">NULL<pos:position pos:line="3" pos:column="48"/></name></expr>;<pos:position pos:line="3" pos:column="49"/></condition> <incr><expr><name pos:line="3" pos:column="50">pl<pos:position pos:line="3" pos:column="52"/></name> <operator pos:line="3" pos:column="53">=<pos:position pos:line="3" pos:column="54"/></operator> <name><name pos:line="3" pos:column="55">pl<pos:position pos:line="3" pos:column="57"/></name><operator pos:line="3" pos:column="57">-&gt;<pos:position pos:line="3" pos:column="62"/></operator><name pos:line="3" pos:column="59">next<pos:position pos:line="3" pos:column="63"/></name></name></expr></incr>)<pos:position pos:line="3" pos:column="64"/></control> <block pos:line="3" pos:column="65">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">pthread_t<pos:position pos:line="4" pos:column="14"/></name></type> <name pos:line="4" pos:column="15">t<pos:position pos:line="4" pos:column="16"/></name></decl>;<pos:position pos:line="4" pos:column="17"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">pthread_attr_t<pos:position pos:line="5" pos:column="19"/></name></type> <name pos:line="5" pos:column="20">attr<pos:position pos:line="5" pos:column="24"/></name></decl>;<pos:position pos:line="5" pos:column="25"/></decl_stmt>

    <comment type="block" pos:line="7" pos:column="5">/* Only execute `normal' style executables here. */</comment>
    <if pos:line="8" pos:column="5">if <condition pos:line="8" pos:column="8">(<expr><operator pos:line="8" pos:column="9">(<pos:position pos:line="8" pos:column="10"/></operator><name><name pos:line="8" pos:column="10">pl<pos:position pos:line="8" pos:column="12"/></name><operator pos:line="8" pos:column="12">-&gt;<pos:position pos:line="8" pos:column="17"/></operator><name pos:line="8" pos:column="14">flags<pos:position pos:line="8" pos:column="19"/></name></name> <operator pos:line="8" pos:column="20">&amp;<pos:position pos:line="8" pos:column="25"/></operator> <name pos:line="8" pos:column="22">PL_NORMAL<pos:position pos:line="8" pos:column="31"/></name><operator pos:line="8" pos:column="31">)<pos:position pos:line="8" pos:column="32"/></operator> <operator pos:line="8" pos:column="33">==<pos:position pos:line="8" pos:column="35"/></operator> <literal type="number" pos:line="8" pos:column="36">0<pos:position pos:line="8" pos:column="37"/></literal></expr>)<pos:position pos:line="8" pos:column="38"/></condition><then pos:line="8" pos:column="38">
      <block type="pseudo"><continue pos:line="9" pos:column="7">continue;<pos:position pos:line="9" pos:column="16"/></continue></block></then></if>

    <expr_stmt><expr><call><name pos:line="11" pos:column="5">pthread_mutex_lock<pos:position pos:line="11" pos:column="23"/></name><argument_list pos:line="11" pos:column="23">(<argument><expr><operator pos:line="11" pos:column="24">&amp;<pos:position pos:line="11" pos:column="29"/></operator><name pos:line="11" pos:column="25">pl_lock<pos:position pos:line="11" pos:column="32"/></name></expr></argument>)<pos:position pos:line="11" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="34"/></expr_stmt>
    <comment type="block" pos:line="12" pos:column="5">/* Skip if a child is already running. */</comment>
    <if pos:line="13" pos:column="5">if <condition pos:line="13" pos:column="8">(<expr><operator pos:line="13" pos:column="9">(<pos:position pos:line="13" pos:column="10"/></operator><name><name pos:line="13" pos:column="10">pl<pos:position pos:line="13" pos:column="12"/></name><operator pos:line="13" pos:column="12">-&gt;<pos:position pos:line="13" pos:column="17"/></operator><name pos:line="13" pos:column="14">flags<pos:position pos:line="13" pos:column="19"/></name></name> <operator pos:line="13" pos:column="20">&amp;<pos:position pos:line="13" pos:column="25"/></operator> <name pos:line="13" pos:column="22">PL_RUNNING<pos:position pos:line="13" pos:column="32"/></name><operator pos:line="13" pos:column="32">)<pos:position pos:line="13" pos:column="33"/></operator> <operator pos:line="13" pos:column="34">!=<pos:position pos:line="13" pos:column="36"/></operator> <literal type="number" pos:line="13" pos:column="37">0<pos:position pos:line="13" pos:column="38"/></literal></expr>)<pos:position pos:line="13" pos:column="39"/></condition><then pos:line="13" pos:column="39"> <block pos:line="13" pos:column="40">{
      <expr_stmt><expr><call><name pos:line="14" pos:column="7">pthread_mutex_unlock<pos:position pos:line="14" pos:column="27"/></name><argument_list pos:line="14" pos:column="27">(<argument><expr><operator pos:line="14" pos:column="28">&amp;<pos:position pos:line="14" pos:column="33"/></operator><name pos:line="14" pos:column="29">pl_lock<pos:position pos:line="14" pos:column="36"/></name></expr></argument>)<pos:position pos:line="14" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="38"/></expr_stmt>
      <continue pos:line="15" pos:column="7">continue;<pos:position pos:line="15" pos:column="16"/></continue>
    }<pos:position pos:line="16" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name><name pos:line="17" pos:column="5">pl<pos:position pos:line="17" pos:column="7"/></name><operator pos:line="17" pos:column="7">-&gt;<pos:position pos:line="17" pos:column="12"/></operator><name pos:line="17" pos:column="9">flags<pos:position pos:line="17" pos:column="14"/></name></name> <operator pos:line="17" pos:column="15">|=<pos:position pos:line="17" pos:column="17"/></operator> <name pos:line="17" pos:column="18">PL_RUNNING<pos:position pos:line="17" pos:column="28"/></name></expr>;<pos:position pos:line="17" pos:column="29"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="18" pos:column="5">pthread_mutex_unlock<pos:position pos:line="18" pos:column="25"/></name><argument_list pos:line="18" pos:column="25">(<argument><expr><operator pos:line="18" pos:column="26">&amp;<pos:position pos:line="18" pos:column="31"/></operator><name pos:line="18" pos:column="27">pl_lock<pos:position pos:line="18" pos:column="34"/></name></expr></argument>)<pos:position pos:line="18" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="36"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="20" pos:column="5">pthread_attr_init<pos:position pos:line="20" pos:column="22"/></name><argument_list pos:line="20" pos:column="22">(<argument><expr><operator pos:line="20" pos:column="23">&amp;<pos:position pos:line="20" pos:column="28"/></operator><name pos:line="20" pos:column="24">attr<pos:position pos:line="20" pos:column="28"/></name></expr></argument>)<pos:position pos:line="20" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="30"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="21" pos:column="5">pthread_attr_setdetachstate<pos:position pos:line="21" pos:column="32"/></name><argument_list pos:line="21" pos:column="32">(<argument><expr><operator pos:line="21" pos:column="33">&amp;<pos:position pos:line="21" pos:column="38"/></operator><name pos:line="21" pos:column="34">attr<pos:position pos:line="21" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="40">PTHREAD_CREATE_DETACHED<pos:position pos:line="21" pos:column="63"/></name></expr></argument>)<pos:position pos:line="21" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="65"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="22" pos:column="5">plugin_thread_create<pos:position pos:line="22" pos:column="25"/></name><argument_list pos:line="22" pos:column="25">(<argument><expr><operator pos:line="22" pos:column="26">&amp;<pos:position pos:line="22" pos:column="31"/></operator><name pos:line="22" pos:column="27">t<pos:position pos:line="22" pos:column="28"/></name></expr></argument>, <argument><expr><operator pos:line="22" pos:column="30">&amp;<pos:position pos:line="22" pos:column="35"/></operator><name pos:line="22" pos:column="31">attr<pos:position pos:line="22" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="37">exec_read_one<pos:position pos:line="22" pos:column="50"/></name></expr></argument>, <argument><expr><operator pos:line="22" pos:column="52">(<pos:position pos:line="22" pos:column="53"/></operator><name pos:line="22" pos:column="53">void<pos:position pos:line="22" pos:column="57"/></name> <operator pos:line="22" pos:column="58">*<pos:position pos:line="22" pos:column="59"/></operator><operator pos:line="22" pos:column="59">)<pos:position pos:line="22" pos:column="60"/></operator><name pos:line="22" pos:column="60">pl<pos:position pos:line="22" pos:column="62"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="22" pos:column="64">"exec read"<pos:position pos:line="22" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="77"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="23" pos:column="5">pthread_attr_destroy<pos:position pos:line="23" pos:column="25"/></name><argument_list pos:line="23" pos:column="25">(<argument><expr><operator pos:line="23" pos:column="26">&amp;<pos:position pos:line="23" pos:column="31"/></operator><name pos:line="23" pos:column="27">attr<pos:position pos:line="23" pos:column="31"/></name></expr></argument>)<pos:position pos:line="23" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="33"/></expr_stmt>
  }<pos:position pos:line="24" pos:column="4"/></block></for> <comment type="block" pos:line="24" pos:column="5">/* for (pl) */</comment>

  <return pos:line="26" pos:column="3">return <expr><literal type="number" pos:line="26" pos:column="10">0<pos:position pos:line="26" pos:column="11"/></literal></expr>;<pos:position pos:line="26" pos:column="12"/></return>
}<pos:position pos:line="27" pos:column="2"/></block></function></unit>
