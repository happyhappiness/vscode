<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_312_collectd-5.1.0.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">camqp_write<pos:position pos:line="1" pos:column="23"/></name> <parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><specifier pos:line="1" pos:column="25">const<pos:position pos:line="1" pos:column="30"/></specifier> <name pos:line="1" pos:column="31">data_set_t<pos:position pos:line="1" pos:column="41"/></name> <modifier pos:line="1" pos:column="42">*<pos:position pos:line="1" pos:column="43"/></modifier></type><name pos:line="1" pos:column="43">ds<pos:position pos:line="1" pos:column="45"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="47">const<pos:position pos:line="1" pos:column="52"/></specifier> <name pos:line="1" pos:column="53">value_list_t<pos:position pos:line="1" pos:column="65"/></name> <modifier pos:line="1" pos:column="66">*<pos:position pos:line="1" pos:column="67"/></modifier></type><name pos:line="1" pos:column="67">vl<pos:position pos:line="1" pos:column="69"/></name></decl></parameter>, <comment type="block" pos:line="1" pos:column="71">/* {{{ */</comment>
        <parameter><decl><type><name pos:line="2" pos:column="9">user_data_t<pos:position pos:line="2" pos:column="20"/></name> <modifier pos:line="2" pos:column="21">*<pos:position pos:line="2" pos:column="22"/></modifier></type><name pos:line="2" pos:column="22">user_data<pos:position pos:line="2" pos:column="31"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="32"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">camqp_config_t<pos:position pos:line="4" pos:column="19"/></name> <modifier pos:line="4" pos:column="20">*<pos:position pos:line="4" pos:column="21"/></modifier></type><name pos:line="4" pos:column="21">conf<pos:position pos:line="4" pos:column="25"/></name> <init pos:line="4" pos:column="26">= <expr><name><name pos:line="4" pos:column="28">user_data<pos:position pos:line="4" pos:column="37"/></name><operator pos:line="4" pos:column="37">-&gt;<pos:position pos:line="4" pos:column="42"/></operator><name pos:line="4" pos:column="39">data<pos:position pos:line="4" pos:column="43"/></name></name></expr></init></decl>;<pos:position pos:line="4" pos:column="44"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">char<pos:position pos:line="5" pos:column="9"/></name></type> <name><name pos:line="5" pos:column="10">routing_key<pos:position pos:line="5" pos:column="21"/></name><index pos:line="5" pos:column="21">[<expr><literal type="number" pos:line="5" pos:column="22">6<pos:position pos:line="5" pos:column="23"/></literal> <operator pos:line="5" pos:column="24">*<pos:position pos:line="5" pos:column="25"/></operator> <name pos:line="5" pos:column="26">DATA_MAX_NAME_LEN<pos:position pos:line="5" pos:column="43"/></name></expr>]<pos:position pos:line="5" pos:column="44"/></index></name></decl>;<pos:position pos:line="5" pos:column="45"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">char<pos:position pos:line="6" pos:column="9"/></name></type> <name><name pos:line="6" pos:column="10">buffer<pos:position pos:line="6" pos:column="16"/></name><index pos:line="6" pos:column="16">[<expr><literal type="number" pos:line="6" pos:column="17">4096<pos:position pos:line="6" pos:column="21"/></literal></expr>]<pos:position pos:line="6" pos:column="22"/></index></name></decl>;<pos:position pos:line="6" pos:column="23"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">int<pos:position pos:line="7" pos:column="8"/></name></type> <name pos:line="7" pos:column="9">status<pos:position pos:line="7" pos:column="15"/></name></decl>;<pos:position pos:line="7" pos:column="16"/></decl_stmt>

    <if pos:line="9" pos:column="5">if <condition pos:line="9" pos:column="8">(<expr><operator pos:line="9" pos:column="9">(<pos:position pos:line="9" pos:column="10"/></operator><name pos:line="9" pos:column="10">ds<pos:position pos:line="9" pos:column="12"/></name> <operator pos:line="9" pos:column="13">==<pos:position pos:line="9" pos:column="15"/></operator> <name pos:line="9" pos:column="16">NULL<pos:position pos:line="9" pos:column="20"/></name><operator pos:line="9" pos:column="20">)<pos:position pos:line="9" pos:column="21"/></operator> <operator pos:line="9" pos:column="22">||<pos:position pos:line="9" pos:column="24"/></operator> <operator pos:line="9" pos:column="25">(<pos:position pos:line="9" pos:column="26"/></operator><name pos:line="9" pos:column="26">vl<pos:position pos:line="9" pos:column="28"/></name> <operator pos:line="9" pos:column="29">==<pos:position pos:line="9" pos:column="31"/></operator> <name pos:line="9" pos:column="32">NULL<pos:position pos:line="9" pos:column="36"/></name><operator pos:line="9" pos:column="36">)<pos:position pos:line="9" pos:column="37"/></operator> <operator pos:line="9" pos:column="38">||<pos:position pos:line="9" pos:column="40"/></operator> <operator pos:line="9" pos:column="41">(<pos:position pos:line="9" pos:column="42"/></operator><name pos:line="9" pos:column="42">conf<pos:position pos:line="9" pos:column="46"/></name> <operator pos:line="9" pos:column="47">==<pos:position pos:line="9" pos:column="49"/></operator> <name pos:line="9" pos:column="50">NULL<pos:position pos:line="9" pos:column="54"/></name><operator pos:line="9" pos:column="54">)<pos:position pos:line="9" pos:column="55"/></operator></expr>)<pos:position pos:line="9" pos:column="56"/></condition><then pos:line="9" pos:column="56">
        <block type="pseudo"><return pos:line="10" pos:column="9">return <expr><operator pos:line="10" pos:column="16">(<pos:position pos:line="10" pos:column="17"/></operator><name pos:line="10" pos:column="17">EINVAL<pos:position pos:line="10" pos:column="23"/></name><operator pos:line="10" pos:column="23">)<pos:position pos:line="10" pos:column="24"/></operator></expr>;<pos:position pos:line="10" pos:column="25"/></return></block></then></if>

    <expr_stmt><expr><call><name pos:line="12" pos:column="5">memset<pos:position pos:line="12" pos:column="11"/></name> <argument_list pos:line="12" pos:column="12">(<argument><expr><name pos:line="12" pos:column="13">buffer<pos:position pos:line="12" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="12" pos:column="21">0<pos:position pos:line="12" pos:column="22"/></literal></expr></argument>, <argument><expr><sizeof pos:line="12" pos:column="24">sizeof <argument_list pos:line="12" pos:column="31">(<argument><expr><name pos:line="12" pos:column="32">buffer<pos:position pos:line="12" pos:column="38"/></name></expr></argument>)<pos:position pos:line="12" pos:column="39"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="12" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="41"/></expr_stmt>

    <if pos:line="14" pos:column="5">if <condition pos:line="14" pos:column="8">(<expr><name><name pos:line="14" pos:column="9">conf<pos:position pos:line="14" pos:column="13"/></name><operator pos:line="14" pos:column="13">-&gt;<pos:position pos:line="14" pos:column="18"/></operator><name pos:line="14" pos:column="15">routing_key<pos:position pos:line="14" pos:column="26"/></name></name> <operator pos:line="14" pos:column="27">!=<pos:position pos:line="14" pos:column="29"/></operator> <name pos:line="14" pos:column="30">NULL<pos:position pos:line="14" pos:column="34"/></name></expr>)<pos:position pos:line="14" pos:column="35"/></condition><then pos:line="14" pos:column="35">
    <block pos:line="15" pos:column="5">{
        <expr_stmt><expr><call><name pos:line="16" pos:column="9">sstrncpy<pos:position pos:line="16" pos:column="17"/></name> <argument_list pos:line="16" pos:column="18">(<argument><expr><name pos:line="16" pos:column="19">routing_key<pos:position pos:line="16" pos:column="30"/></name></expr></argument>, <argument><expr><name><name pos:line="16" pos:column="32">conf<pos:position pos:line="16" pos:column="36"/></name><operator pos:line="16" pos:column="36">-&gt;<pos:position pos:line="16" pos:column="41"/></operator><name pos:line="16" pos:column="38">routing_key<pos:position pos:line="16" pos:column="49"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="16" pos:column="51">sizeof <argument_list pos:line="16" pos:column="58">(<argument><expr><name pos:line="16" pos:column="59">routing_key<pos:position pos:line="16" pos:column="70"/></name></expr></argument>)<pos:position pos:line="16" pos:column="71"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="16" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="73"/></expr_stmt>
    }<pos:position pos:line="17" pos:column="6"/></block></then>
    <else pos:line="18" pos:column="5">else
    <block pos:line="19" pos:column="5">{
        <decl_stmt><decl><type><name pos:line="20" pos:column="9">size_t<pos:position pos:line="20" pos:column="15"/></name></type> <name pos:line="20" pos:column="16">i<pos:position pos:line="20" pos:column="17"/></name></decl>;<pos:position pos:line="20" pos:column="18"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="21" pos:column="9">ssnprintf<pos:position pos:line="21" pos:column="18"/></name> <argument_list pos:line="21" pos:column="19">(<argument><expr><name pos:line="21" pos:column="20">routing_key<pos:position pos:line="21" pos:column="31"/></name></expr></argument>, <argument><expr><sizeof pos:line="21" pos:column="33">sizeof <argument_list pos:line="21" pos:column="40">(<argument><expr><name pos:line="21" pos:column="41">routing_key<pos:position pos:line="21" pos:column="52"/></name></expr></argument>)<pos:position pos:line="21" pos:column="53"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="21" pos:column="55">"collectd/%s/%s/%s/%s/%s"<pos:position pos:line="21" pos:column="80"/></literal></expr></argument>,
                <argument><expr><name><name pos:line="22" pos:column="17">vl<pos:position pos:line="22" pos:column="19"/></name><operator pos:line="22" pos:column="19">-&gt;<pos:position pos:line="22" pos:column="24"/></operator><name pos:line="22" pos:column="21">host<pos:position pos:line="22" pos:column="25"/></name></name></expr></argument>,
                <argument><expr><name><name pos:line="23" pos:column="17">vl<pos:position pos:line="23" pos:column="19"/></name><operator pos:line="23" pos:column="19">-&gt;<pos:position pos:line="23" pos:column="24"/></operator><name pos:line="23" pos:column="21">plugin<pos:position pos:line="23" pos:column="27"/></name></name></expr></argument>, <argument><expr><name><name pos:line="23" pos:column="29">vl<pos:position pos:line="23" pos:column="31"/></name><operator pos:line="23" pos:column="31">-&gt;<pos:position pos:line="23" pos:column="36"/></operator><name pos:line="23" pos:column="33">plugin_instance<pos:position pos:line="23" pos:column="48"/></name></name></expr></argument>,
                <argument><expr><name><name pos:line="24" pos:column="17">vl<pos:position pos:line="24" pos:column="19"/></name><operator pos:line="24" pos:column="19">-&gt;<pos:position pos:line="24" pos:column="24"/></operator><name pos:line="24" pos:column="21">type<pos:position pos:line="24" pos:column="25"/></name></name></expr></argument>, <argument><expr><name><name pos:line="24" pos:column="27">vl<pos:position pos:line="24" pos:column="29"/></name><operator pos:line="24" pos:column="29">-&gt;<pos:position pos:line="24" pos:column="34"/></operator><name pos:line="24" pos:column="31">type_instance<pos:position pos:line="24" pos:column="44"/></name></name></expr></argument>)<pos:position pos:line="24" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="46"/></expr_stmt>

        <comment type="block" pos:line="26" pos:column="9">/* Switch slashes (the only character forbidden by collectd) and dots
         * (the separation character used by AMQP). */</comment>
        <for pos:line="28" pos:column="9">for <control pos:line="28" pos:column="13">(<init><expr><name pos:line="28" pos:column="14">i<pos:position pos:line="28" pos:column="15"/></name> <operator pos:line="28" pos:column="16">=<pos:position pos:line="28" pos:column="17"/></operator> <literal type="number" pos:line="28" pos:column="18">0<pos:position pos:line="28" pos:column="19"/></literal></expr>;<pos:position pos:line="28" pos:column="20"/></init> <condition><expr><name><name pos:line="28" pos:column="21">routing_key<pos:position pos:line="28" pos:column="32"/></name><index pos:line="28" pos:column="32">[<expr><name pos:line="28" pos:column="33">i<pos:position pos:line="28" pos:column="34"/></name></expr>]<pos:position pos:line="28" pos:column="35"/></index></name> <operator pos:line="28" pos:column="36">!=<pos:position pos:line="28" pos:column="38"/></operator> <literal type="number" pos:line="28" pos:column="39">0<pos:position pos:line="28" pos:column="40"/></literal></expr>;<pos:position pos:line="28" pos:column="41"/></condition> <incr><expr><name pos:line="28" pos:column="42">i<pos:position pos:line="28" pos:column="43"/></name><operator pos:line="28" pos:column="43">++<pos:position pos:line="28" pos:column="45"/></operator></expr></incr>)<pos:position pos:line="28" pos:column="46"/></control>
        <block pos:line="29" pos:column="9">{
            <if pos:line="30" pos:column="13">if <condition pos:line="30" pos:column="16">(<expr><name><name pos:line="30" pos:column="17">routing_key<pos:position pos:line="30" pos:column="28"/></name><index pos:line="30" pos:column="28">[<expr><name pos:line="30" pos:column="29">i<pos:position pos:line="30" pos:column="30"/></name></expr>]<pos:position pos:line="30" pos:column="31"/></index></name> <operator pos:line="30" pos:column="32">==<pos:position pos:line="30" pos:column="34"/></operator> <literal type="char" pos:line="30" pos:column="35">'.'<pos:position pos:line="30" pos:column="38"/></literal></expr>)<pos:position pos:line="30" pos:column="39"/></condition><then pos:line="30" pos:column="39">
                <block type="pseudo"><expr_stmt><expr><name><name pos:line="31" pos:column="17">routing_key<pos:position pos:line="31" pos:column="28"/></name><index pos:line="31" pos:column="28">[<expr><name pos:line="31" pos:column="29">i<pos:position pos:line="31" pos:column="30"/></name></expr>]<pos:position pos:line="31" pos:column="31"/></index></name> <operator pos:line="31" pos:column="32">=<pos:position pos:line="31" pos:column="33"/></operator> <literal type="char" pos:line="31" pos:column="34">'/'<pos:position pos:line="31" pos:column="37"/></literal></expr>;<pos:position pos:line="31" pos:column="38"/></expr_stmt></block></then>
            <elseif pos:line="32" pos:column="13">else <if pos:line="32" pos:column="18">if <condition pos:line="32" pos:column="21">(<expr><name><name pos:line="32" pos:column="22">routing_key<pos:position pos:line="32" pos:column="33"/></name><index pos:line="32" pos:column="33">[<expr><name pos:line="32" pos:column="34">i<pos:position pos:line="32" pos:column="35"/></name></expr>]<pos:position pos:line="32" pos:column="36"/></index></name> <operator pos:line="32" pos:column="37">==<pos:position pos:line="32" pos:column="39"/></operator> <literal type="char" pos:line="32" pos:column="40">'/'<pos:position pos:line="32" pos:column="43"/></literal></expr>)<pos:position pos:line="32" pos:column="44"/></condition><then pos:line="32" pos:column="44">
                <block type="pseudo"><expr_stmt><expr><name><name pos:line="33" pos:column="17">routing_key<pos:position pos:line="33" pos:column="28"/></name><index pos:line="33" pos:column="28">[<expr><name pos:line="33" pos:column="29">i<pos:position pos:line="33" pos:column="30"/></name></expr>]<pos:position pos:line="33" pos:column="31"/></index></name> <operator pos:line="33" pos:column="32">=<pos:position pos:line="33" pos:column="33"/></operator> <literal type="char" pos:line="33" pos:column="34">'.'<pos:position pos:line="33" pos:column="37"/></literal></expr>;<pos:position pos:line="33" pos:column="38"/></expr_stmt></block></then></if></elseif></if>
        }<pos:position pos:line="34" pos:column="10"/></block></for>
    }<pos:position pos:line="35" pos:column="6"/></block></else></if>

    <if pos:line="37" pos:column="5">if <condition pos:line="37" pos:column="8">(<expr><name><name pos:line="37" pos:column="9">conf<pos:position pos:line="37" pos:column="13"/></name><operator pos:line="37" pos:column="13">-&gt;<pos:position pos:line="37" pos:column="18"/></operator><name pos:line="37" pos:column="15">format<pos:position pos:line="37" pos:column="21"/></name></name> <operator pos:line="37" pos:column="22">==<pos:position pos:line="37" pos:column="24"/></operator> <name pos:line="37" pos:column="25">CAMQP_FORMAT_COMMAND<pos:position pos:line="37" pos:column="45"/></name></expr>)<pos:position pos:line="37" pos:column="46"/></condition><then pos:line="37" pos:column="46">
    <block pos:line="38" pos:column="5">{
        <expr_stmt><expr><name pos:line="39" pos:column="9">status<pos:position pos:line="39" pos:column="15"/></name> <operator pos:line="39" pos:column="16">=<pos:position pos:line="39" pos:column="17"/></operator> <call><name pos:line="39" pos:column="18">create_putval<pos:position pos:line="39" pos:column="31"/></name> <argument_list pos:line="39" pos:column="32">(<argument><expr><name pos:line="39" pos:column="33">buffer<pos:position pos:line="39" pos:column="39"/></name></expr></argument>, <argument><expr><sizeof pos:line="39" pos:column="41">sizeof <argument_list pos:line="39" pos:column="48">(<argument><expr><name pos:line="39" pos:column="49">buffer<pos:position pos:line="39" pos:column="55"/></name></expr></argument>)<pos:position pos:line="39" pos:column="56"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="39" pos:column="58">ds<pos:position pos:line="39" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="62">vl<pos:position pos:line="39" pos:column="64"/></name></expr></argument>)<pos:position pos:line="39" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="66"/></expr_stmt>
        <if pos:line="40" pos:column="9">if <condition pos:line="40" pos:column="12">(<expr><name pos:line="40" pos:column="13">status<pos:position pos:line="40" pos:column="19"/></name> <operator pos:line="40" pos:column="20">!=<pos:position pos:line="40" pos:column="22"/></operator> <literal type="number" pos:line="40" pos:column="23">0<pos:position pos:line="40" pos:column="24"/></literal></expr>)<pos:position pos:line="40" pos:column="25"/></condition><then pos:line="40" pos:column="25">
        <block pos:line="41" pos:column="9">{
            <expr_stmt><expr><call><name pos:line="42" pos:column="13">ERROR<pos:position pos:line="42" pos:column="18"/></name> <argument_list pos:line="42" pos:column="19">(<argument><expr><literal type="string" pos:line="42" pos:column="20">"amqp plugin: create_putval failed with status %i."<pos:position pos:line="42" pos:column="71"/></literal></expr></argument>,
                    <argument><expr><name pos:line="43" pos:column="21">status<pos:position pos:line="43" pos:column="27"/></name></expr></argument>)<pos:position pos:line="43" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="29"/></expr_stmt>
            <return pos:line="44" pos:column="13">return <expr><operator pos:line="44" pos:column="20">(<pos:position pos:line="44" pos:column="21"/></operator><name pos:line="44" pos:column="21">status<pos:position pos:line="44" pos:column="27"/></name><operator pos:line="44" pos:column="27">)<pos:position pos:line="44" pos:column="28"/></operator></expr>;<pos:position pos:line="44" pos:column="29"/></return>
        }<pos:position pos:line="45" pos:column="10"/></block></then></if>
    }<pos:position pos:line="46" pos:column="6"/></block></then>
    <elseif pos:line="47" pos:column="5">else <if pos:line="47" pos:column="10">if <condition pos:line="47" pos:column="13">(<expr><name><name pos:line="47" pos:column="14">conf<pos:position pos:line="47" pos:column="18"/></name><operator pos:line="47" pos:column="18">-&gt;<pos:position pos:line="47" pos:column="23"/></operator><name pos:line="47" pos:column="20">format<pos:position pos:line="47" pos:column="26"/></name></name> <operator pos:line="47" pos:column="27">==<pos:position pos:line="47" pos:column="29"/></operator> <name pos:line="47" pos:column="30">CAMQP_FORMAT_JSON<pos:position pos:line="47" pos:column="47"/></name></expr>)<pos:position pos:line="47" pos:column="48"/></condition><then pos:line="47" pos:column="48">
    <block pos:line="48" pos:column="5">{
        <decl_stmt><decl><type><name pos:line="49" pos:column="9">size_t<pos:position pos:line="49" pos:column="15"/></name></type> <name pos:line="49" pos:column="16">bfree<pos:position pos:line="49" pos:column="21"/></name> <init pos:line="49" pos:column="22">= <expr><sizeof pos:line="49" pos:column="24">sizeof <argument_list pos:line="49" pos:column="31">(<argument><expr><name pos:line="49" pos:column="32">buffer<pos:position pos:line="49" pos:column="38"/></name></expr></argument>)<pos:position pos:line="49" pos:column="39"/></argument_list></sizeof></expr></init></decl>;<pos:position pos:line="49" pos:column="40"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="50" pos:column="9">size_t<pos:position pos:line="50" pos:column="15"/></name></type> <name pos:line="50" pos:column="16">bfill<pos:position pos:line="50" pos:column="21"/></name> <init pos:line="50" pos:column="22">= <expr><literal type="number" pos:line="50" pos:column="24">0<pos:position pos:line="50" pos:column="25"/></literal></expr></init></decl>;<pos:position pos:line="50" pos:column="26"/></decl_stmt>

        <expr_stmt><expr><call><name pos:line="52" pos:column="9">format_json_initialize<pos:position pos:line="52" pos:column="31"/></name> <argument_list pos:line="52" pos:column="32">(<argument><expr><name pos:line="52" pos:column="33">buffer<pos:position pos:line="52" pos:column="39"/></name></expr></argument>, <argument><expr><operator pos:line="52" pos:column="41">&amp;<pos:position pos:line="52" pos:column="46"/></operator><name pos:line="52" pos:column="42">bfill<pos:position pos:line="52" pos:column="47"/></name></expr></argument>, <argument><expr><operator pos:line="52" pos:column="49">&amp;<pos:position pos:line="52" pos:column="54"/></operator><name pos:line="52" pos:column="50">bfree<pos:position pos:line="52" pos:column="55"/></name></expr></argument>)<pos:position pos:line="52" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="57"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="53" pos:column="9">format_json_value_list<pos:position pos:line="53" pos:column="31"/></name> <argument_list pos:line="53" pos:column="32">(<argument><expr><name pos:line="53" pos:column="33">buffer<pos:position pos:line="53" pos:column="39"/></name></expr></argument>, <argument><expr><operator pos:line="53" pos:column="41">&amp;<pos:position pos:line="53" pos:column="46"/></operator><name pos:line="53" pos:column="42">bfill<pos:position pos:line="53" pos:column="47"/></name></expr></argument>, <argument><expr><operator pos:line="53" pos:column="49">&amp;<pos:position pos:line="53" pos:column="54"/></operator><name pos:line="53" pos:column="50">bfree<pos:position pos:line="53" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="53" pos:column="57">ds<pos:position pos:line="53" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="53" pos:column="61">vl<pos:position pos:line="53" pos:column="63"/></name></expr></argument>, <argument><expr><name><name pos:line="53" pos:column="65">conf<pos:position pos:line="53" pos:column="69"/></name><operator pos:line="53" pos:column="69">-&gt;<pos:position pos:line="53" pos:column="74"/></operator><name pos:line="53" pos:column="71">store_rates<pos:position pos:line="53" pos:column="82"/></name></name></expr></argument>)<pos:position pos:line="53" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="84"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="54" pos:column="9">format_json_finalize<pos:position pos:line="54" pos:column="29"/></name> <argument_list pos:line="54" pos:column="30">(<argument><expr><name pos:line="54" pos:column="31">buffer<pos:position pos:line="54" pos:column="37"/></name></expr></argument>, <argument><expr><operator pos:line="54" pos:column="39">&amp;<pos:position pos:line="54" pos:column="44"/></operator><name pos:line="54" pos:column="40">bfill<pos:position pos:line="54" pos:column="45"/></name></expr></argument>, <argument><expr><operator pos:line="54" pos:column="47">&amp;<pos:position pos:line="54" pos:column="52"/></operator><name pos:line="54" pos:column="48">bfree<pos:position pos:line="54" pos:column="53"/></name></expr></argument>)<pos:position pos:line="54" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="55"/></expr_stmt>
    }<pos:position pos:line="55" pos:column="6"/></block></then></if></elseif>
    <else pos:line="56" pos:column="5">else
    <block pos:line="57" pos:column="5">{
        <expr_stmt><expr><call><name pos:line="58" pos:column="9">ERROR<pos:position pos:line="58" pos:column="14"/></name> <argument_list pos:line="58" pos:column="15">(<argument><expr><literal type="string" pos:line="58" pos:column="16">"amqp plugin: Invalid format (%i)."<pos:position pos:line="58" pos:column="51"/></literal></expr></argument>, <argument><expr><name><name pos:line="58" pos:column="53">conf<pos:position pos:line="58" pos:column="57"/></name><operator pos:line="58" pos:column="57">-&gt;<pos:position pos:line="58" pos:column="62"/></operator><name pos:line="58" pos:column="59">format<pos:position pos:line="58" pos:column="65"/></name></name></expr></argument>)<pos:position pos:line="58" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="67"/></expr_stmt>
        <return pos:line="59" pos:column="9">return <expr><operator pos:line="59" pos:column="16">(<pos:position pos:line="59" pos:column="17"/></operator><operator pos:line="59" pos:column="17">-<pos:position pos:line="59" pos:column="18"/></operator><literal type="number" pos:line="59" pos:column="18">1<pos:position pos:line="59" pos:column="19"/></literal><operator pos:line="59" pos:column="19">)<pos:position pos:line="59" pos:column="20"/></operator></expr>;<pos:position pos:line="59" pos:column="21"/></return>
    }<pos:position pos:line="60" pos:column="6"/></block></else></if>

    <expr_stmt><expr><call><name pos:line="62" pos:column="5">pthread_mutex_lock<pos:position pos:line="62" pos:column="23"/></name> <argument_list pos:line="62" pos:column="24">(<argument><expr><operator pos:line="62" pos:column="25">&amp;<pos:position pos:line="62" pos:column="30"/></operator><name><name pos:line="62" pos:column="26">conf<pos:position pos:line="62" pos:column="30"/></name><operator pos:line="62" pos:column="30">-&gt;<pos:position pos:line="62" pos:column="35"/></operator><name pos:line="62" pos:column="32">lock<pos:position pos:line="62" pos:column="36"/></name></name></expr></argument>)<pos:position pos:line="62" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="38"/></expr_stmt>
    <expr_stmt><expr><name pos:line="63" pos:column="5">status<pos:position pos:line="63" pos:column="11"/></name> <operator pos:line="63" pos:column="12">=<pos:position pos:line="63" pos:column="13"/></operator> <call><name pos:line="63" pos:column="14">camqp_write_locked<pos:position pos:line="63" pos:column="32"/></name> <argument_list pos:line="63" pos:column="33">(<argument><expr><name pos:line="63" pos:column="34">conf<pos:position pos:line="63" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="63" pos:column="40">buffer<pos:position pos:line="63" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="63" pos:column="48">routing_key<pos:position pos:line="63" pos:column="59"/></name></expr></argument>)<pos:position pos:line="63" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="61"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="64" pos:column="5">pthread_mutex_unlock<pos:position pos:line="64" pos:column="25"/></name> <argument_list pos:line="64" pos:column="26">(<argument><expr><operator pos:line="64" pos:column="27">&amp;<pos:position pos:line="64" pos:column="32"/></operator><name><name pos:line="64" pos:column="28">conf<pos:position pos:line="64" pos:column="32"/></name><operator pos:line="64" pos:column="32">-&gt;<pos:position pos:line="64" pos:column="37"/></operator><name pos:line="64" pos:column="34">lock<pos:position pos:line="64" pos:column="38"/></name></name></expr></argument>)<pos:position pos:line="64" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="40"/></expr_stmt>

    <return pos:line="66" pos:column="5">return <expr><operator pos:line="66" pos:column="12">(<pos:position pos:line="66" pos:column="13"/></operator><name pos:line="66" pos:column="13">status<pos:position pos:line="66" pos:column="19"/></name><operator pos:line="66" pos:column="19">)<pos:position pos:line="66" pos:column="20"/></operator></expr>;<pos:position pos:line="66" pos:column="21"/></return>
}<pos:position pos:line="67" pos:column="2"/></block></function></unit>
