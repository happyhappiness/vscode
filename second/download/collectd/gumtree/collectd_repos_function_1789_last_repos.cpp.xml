<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1789_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">dpdk_helper_command<pos:position pos:line="1" pos:column="24"/></name><parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><name pos:line="1" pos:column="25">dpdk_helper_ctx_t<pos:position pos:line="1" pos:column="42"/></name> <modifier pos:line="1" pos:column="43">*<pos:position pos:line="1" pos:column="44"/></modifier></type><name pos:line="1" pos:column="44">phc<pos:position pos:line="1" pos:column="47"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="49">enum<pos:position pos:line="1" pos:column="53"/></name> <name pos:line="1" pos:column="54">DPDK_CMD<pos:position pos:line="1" pos:column="62"/></name></name></type> <name pos:line="1" pos:column="63">cmd<pos:position pos:line="1" pos:column="66"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="68">int<pos:position pos:line="1" pos:column="71"/></name> <modifier pos:line="1" pos:column="72">*<pos:position pos:line="1" pos:column="73"/></modifier></type><name pos:line="1" pos:column="73">result<pos:position pos:line="1" pos:column="79"/></name></decl></parameter>,
                        <parameter><decl><type><name pos:line="2" pos:column="25">cdtime_t<pos:position pos:line="2" pos:column="33"/></name></type> <name pos:line="2" pos:column="34">cmd_wait_time<pos:position pos:line="2" pos:column="47"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="48"/></parameter_list> <block pos:line="2" pos:column="49">{
  <if pos:line="3" pos:column="3">if <condition pos:line="3" pos:column="6">(<expr><name pos:line="3" pos:column="7">phc<pos:position pos:line="3" pos:column="10"/></name> <operator pos:line="3" pos:column="11">==<pos:position pos:line="3" pos:column="13"/></operator> <name pos:line="3" pos:column="14">NULL<pos:position pos:line="3" pos:column="18"/></name></expr>)<pos:position pos:line="3" pos:column="19"/></condition><then pos:line="3" pos:column="19"> <block pos:line="3" pos:column="20">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">ERROR<pos:position pos:line="4" pos:column="10"/></name><argument_list pos:line="4" pos:column="10">(<argument><expr><literal type="string" pos:line="4" pos:column="11">"Invalid argument(phc)"<pos:position pos:line="4" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="4" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="36"/></expr_stmt>
    <return pos:line="5" pos:column="5">return <expr><operator pos:line="5" pos:column="12">-<pos:position pos:line="5" pos:column="13"/></operator><name pos:line="5" pos:column="13">EINVAL<pos:position pos:line="5" pos:column="19"/></name></expr>;<pos:position pos:line="5" pos:column="20"/></return>
  }<pos:position pos:line="6" pos:column="4"/></block></then></if>

  <expr_stmt><expr><call><name pos:line="8" pos:column="3">DEBUG<pos:position pos:line="8" pos:column="8"/></name><argument_list pos:line="8" pos:column="8">(<argument><expr><literal type="string" pos:line="8" pos:column="9">"%s:%s:%d pid=%lu, cmd=%d"<pos:position pos:line="8" pos:column="35"/></literal></expr></argument>, <argument><expr><name><name pos:line="8" pos:column="37">phc<pos:position pos:line="8" pos:column="40"/></name><operator pos:line="8" pos:column="40">-&gt;<pos:position pos:line="8" pos:column="45"/></operator><name pos:line="8" pos:column="42">shm_name<pos:position pos:line="8" pos:column="50"/></name></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="52">__FUNCTION__<pos:position pos:line="8" pos:column="64"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="66">__LINE__<pos:position pos:line="8" pos:column="74"/></name></expr></argument>,
        <argument><expr><operator pos:line="9" pos:column="9">(<pos:position pos:line="9" pos:column="10"/></operator><name pos:line="9" pos:column="10">long<pos:position pos:line="9" pos:column="14"/></name><operator pos:line="9" pos:column="14">)<pos:position pos:line="9" pos:column="15"/></operator><call><name pos:line="9" pos:column="15">getpid<pos:position pos:line="9" pos:column="21"/></name><argument_list pos:line="9" pos:column="21">()<pos:position pos:line="9" pos:column="23"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="9" pos:column="25">cmd<pos:position pos:line="9" pos:column="28"/></name></expr></argument>)<pos:position pos:line="9" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="30"/></expr_stmt>

  <expr_stmt><expr><name><name pos:line="11" pos:column="3">phc<pos:position pos:line="11" pos:column="6"/></name><operator pos:line="11" pos:column="6">-&gt;<pos:position pos:line="11" pos:column="11"/></operator><name pos:line="11" pos:column="8">cmd_wait_time<pos:position pos:line="11" pos:column="21"/></name></name> <operator pos:line="11" pos:column="22">=<pos:position pos:line="11" pos:column="23"/></operator> <name pos:line="11" pos:column="24">cmd_wait_time<pos:position pos:line="11" pos:column="37"/></name></expr>;<pos:position pos:line="11" pos:column="38"/></expr_stmt>

  <decl_stmt><decl><type><name pos:line="13" pos:column="3">int<pos:position pos:line="13" pos:column="6"/></name></type> <name pos:line="13" pos:column="7">ret<pos:position pos:line="13" pos:column="10"/></name> <init pos:line="13" pos:column="11">= <expr><call><name pos:line="13" pos:column="13">dpdk_helper_status_check<pos:position pos:line="13" pos:column="37"/></name><argument_list pos:line="13" pos:column="37">(<argument><expr><name pos:line="13" pos:column="38">phc<pos:position pos:line="13" pos:column="41"/></name></expr></argument>)<pos:position pos:line="13" pos:column="42"/></argument_list></call></expr></init></decl>;<pos:position pos:line="13" pos:column="43"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="15" pos:column="3">dpdk_helper_check_pipe<pos:position pos:line="15" pos:column="25"/></name><argument_list pos:line="15" pos:column="25">(<argument><expr><name pos:line="15" pos:column="26">phc<pos:position pos:line="15" pos:column="29"/></name></expr></argument>)<pos:position pos:line="15" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="31"/></expr_stmt>

  <if pos:line="17" pos:column="3">if <condition pos:line="17" pos:column="6">(<expr><name pos:line="17" pos:column="7">ret<pos:position pos:line="17" pos:column="10"/></name> <operator pos:line="17" pos:column="11">!=<pos:position pos:line="17" pos:column="13"/></operator> <literal type="number" pos:line="17" pos:column="14">0<pos:position pos:line="17" pos:column="15"/></literal></expr>)<pos:position pos:line="17" pos:column="16"/></condition><then pos:line="17" pos:column="16"> <block pos:line="17" pos:column="17">{
    <return pos:line="18" pos:column="5">return <expr><name pos:line="18" pos:column="12">ret<pos:position pos:line="18" pos:column="15"/></name></expr>;<pos:position pos:line="18" pos:column="16"/></return>
  }<pos:position pos:line="19" pos:column="4"/></block></then></if>

  <expr_stmt><expr><call><name pos:line="21" pos:column="3">DEBUG<pos:position pos:line="21" pos:column="8"/></name><argument_list pos:line="21" pos:column="8">(<argument><expr><literal type="string" pos:line="21" pos:column="9">"%s: DPDK command execute (cmd=%d)"<pos:position pos:line="21" pos:column="44"/></literal></expr></argument>, <argument><expr><name><name pos:line="21" pos:column="46">phc<pos:position pos:line="21" pos:column="49"/></name><operator pos:line="21" pos:column="49">-&gt;<pos:position pos:line="21" pos:column="54"/></operator><name pos:line="21" pos:column="51">shm_name<pos:position pos:line="21" pos:column="59"/></name></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="61">cmd<pos:position pos:line="21" pos:column="64"/></name></expr></argument>)<pos:position pos:line="21" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="66"/></expr_stmt>

  <expr_stmt><expr><name><name pos:line="23" pos:column="3">phc<pos:position pos:line="23" pos:column="6"/></name><operator pos:line="23" pos:column="6">-&gt;<pos:position pos:line="23" pos:column="11"/></operator><name pos:line="23" pos:column="8">cmd_result<pos:position pos:line="23" pos:column="18"/></name></name> <operator pos:line="23" pos:column="19">=<pos:position pos:line="23" pos:column="20"/></operator> <literal type="number" pos:line="23" pos:column="21">0<pos:position pos:line="23" pos:column="22"/></literal></expr>;<pos:position pos:line="23" pos:column="23"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="24" pos:column="3">phc<pos:position pos:line="24" pos:column="6"/></name><operator pos:line="24" pos:column="6">-&gt;<pos:position pos:line="24" pos:column="11"/></operator><name pos:line="24" pos:column="8">cmd<pos:position pos:line="24" pos:column="11"/></name></name> <operator pos:line="24" pos:column="12">=<pos:position pos:line="24" pos:column="13"/></operator> <name pos:line="24" pos:column="14">cmd<pos:position pos:line="24" pos:column="17"/></name></expr>;<pos:position pos:line="24" pos:column="18"/></expr_stmt>

  <comment type="block" pos:line="26" pos:column="3">/* kick helper to process command */</comment>
  <decl_stmt><decl><type><name pos:line="27" pos:column="3">int<pos:position pos:line="27" pos:column="6"/></name></type> <name pos:line="27" pos:column="7">err<pos:position pos:line="27" pos:column="10"/></name> <init pos:line="27" pos:column="11">= <expr><call><name pos:line="27" pos:column="13">sem_post<pos:position pos:line="27" pos:column="21"/></name><argument_list pos:line="27" pos:column="21">(<argument><expr><operator pos:line="27" pos:column="22">&amp;<pos:position pos:line="27" pos:column="27"/></operator><name><name pos:line="27" pos:column="23">phc<pos:position pos:line="27" pos:column="26"/></name><operator pos:line="27" pos:column="26">-&gt;<pos:position pos:line="27" pos:column="31"/></operator><name pos:line="27" pos:column="28">sema_cmd_start<pos:position pos:line="27" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="27" pos:column="43"/></argument_list></call></expr></init></decl>;<pos:position pos:line="27" pos:column="44"/></decl_stmt>
  <if pos:line="28" pos:column="3">if <condition pos:line="28" pos:column="6">(<expr><name pos:line="28" pos:column="7">err<pos:position pos:line="28" pos:column="10"/></name></expr>)<pos:position pos:line="28" pos:column="11"/></condition><then pos:line="28" pos:column="11"> <block pos:line="28" pos:column="12">{
    <decl_stmt><decl><type><name pos:line="29" pos:column="5">char<pos:position pos:line="29" pos:column="9"/></name></type> <name><name pos:line="29" pos:column="10">errbuf<pos:position pos:line="29" pos:column="16"/></name><index pos:line="29" pos:column="16">[<expr><name pos:line="29" pos:column="17">ERR_BUF_SIZE<pos:position pos:line="29" pos:column="29"/></name></expr>]<pos:position pos:line="29" pos:column="30"/></index></name></decl>;<pos:position pos:line="29" pos:column="31"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="30" pos:column="5">ERROR<pos:position pos:line="30" pos:column="10"/></name><argument_list pos:line="30" pos:column="10">(<argument><expr><literal type="string" pos:line="30" pos:column="11">"dpdk_helper_worker: error posting sema_cmd_start semaphore (%s)"<pos:position pos:line="30" pos:column="76"/></literal></expr></argument>,
          <argument><expr><call><name pos:line="31" pos:column="11">sstrerror<pos:position pos:line="31" pos:column="20"/></name><argument_list pos:line="31" pos:column="20">(<argument><expr><name pos:line="31" pos:column="21">errno<pos:position pos:line="31" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="28">errbuf<pos:position pos:line="31" pos:column="34"/></name></expr></argument>, <argument><expr><sizeof pos:line="31" pos:column="36">sizeof<argument_list pos:line="31" pos:column="42">(<argument><expr><name pos:line="31" pos:column="43">errbuf<pos:position pos:line="31" pos:column="49"/></name></expr></argument>)<pos:position pos:line="31" pos:column="50"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="31" pos:column="51"/></argument_list></call></expr></argument>)<pos:position pos:line="31" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="53"/></expr_stmt>
  }<pos:position pos:line="32" pos:column="4"/></block></then></if>

<cpp:if pos:line="34" pos:column="1">#<cpp:directive pos:line="34" pos:column="2">if<pos:position pos:line="34" pos:column="4"/></cpp:directive> <expr><name pos:line="34" pos:column="5">COLLECT_DEBUG<pos:position pos:line="34" pos:column="18"/></name></expr></cpp:if>
  <decl_stmt><decl><type><name pos:line="35" pos:column="3">int<pos:position pos:line="35" pos:column="6"/></name></type> <name pos:line="35" pos:column="7">val<pos:position pos:line="35" pos:column="10"/></name> <init pos:line="35" pos:column="11">= <expr><literal type="number" pos:line="35" pos:column="13">0<pos:position pos:line="35" pos:column="14"/></literal></expr></init></decl>;<pos:position pos:line="35" pos:column="15"/></decl_stmt>
  <if pos:line="36" pos:column="3">if <condition pos:line="36" pos:column="6">(<expr><call><name pos:line="36" pos:column="7">sem_getvalue<pos:position pos:line="36" pos:column="19"/></name><argument_list pos:line="36" pos:column="19">(<argument><expr><operator pos:line="36" pos:column="20">&amp;<pos:position pos:line="36" pos:column="25"/></operator><name><name pos:line="36" pos:column="21">phc<pos:position pos:line="36" pos:column="24"/></name><operator pos:line="36" pos:column="24">-&gt;<pos:position pos:line="36" pos:column="29"/></operator><name pos:line="36" pos:column="26">sema_cmd_start<pos:position pos:line="36" pos:column="40"/></name></name></expr></argument>, <argument><expr><operator pos:line="36" pos:column="42">&amp;<pos:position pos:line="36" pos:column="47"/></operator><name pos:line="36" pos:column="43">val<pos:position pos:line="36" pos:column="46"/></name></expr></argument>)<pos:position pos:line="36" pos:column="47"/></argument_list></call> <operator pos:line="36" pos:column="48">==<pos:position pos:line="36" pos:column="50"/></operator> <literal type="number" pos:line="36" pos:column="51">0<pos:position pos:line="36" pos:column="52"/></literal></expr>)<pos:position pos:line="36" pos:column="53"/></condition><then pos:line="36" pos:column="53">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="37" pos:column="5">DEBUG<pos:position pos:line="37" pos:column="10"/></name><argument_list pos:line="37" pos:column="10">(<argument><expr><literal type="string" pos:line="37" pos:column="11">"%s:dpdk_helper_command: post sema_cmd_start (value=%d)"<pos:position pos:line="37" pos:column="67"/></literal></expr></argument>,
          <argument><expr><name><name pos:line="38" pos:column="11">phc<pos:position pos:line="38" pos:column="14"/></name><operator pos:line="38" pos:column="14">-&gt;<pos:position pos:line="38" pos:column="19"/></operator><name pos:line="38" pos:column="16">shm_name<pos:position pos:line="38" pos:column="24"/></name></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="26">val<pos:position pos:line="38" pos:column="29"/></name></expr></argument>)<pos:position pos:line="38" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="31"/></expr_stmt></block></then></if>
<cpp:endif pos:line="39" pos:column="1">#<cpp:directive pos:line="39" pos:column="2">endif<pos:position pos:line="39" pos:column="7"/></cpp:directive></cpp:endif>

  <if pos:line="41" pos:column="3">if <condition pos:line="41" pos:column="6">(<expr><name><name pos:line="41" pos:column="7">phc<pos:position pos:line="41" pos:column="10"/></name><operator pos:line="41" pos:column="10">-&gt;<pos:position pos:line="41" pos:column="15"/></operator><name pos:line="41" pos:column="12">cmd<pos:position pos:line="41" pos:column="15"/></name></name> <operator pos:line="41" pos:column="16">!=<pos:position pos:line="41" pos:column="18"/></operator> <name pos:line="41" pos:column="19">DPDK_CMD_QUIT<pos:position pos:line="41" pos:column="32"/></name></expr>)<pos:position pos:line="41" pos:column="33"/></condition><then pos:line="41" pos:column="33"> <block pos:line="41" pos:column="34">{

    <comment type="block" pos:line="43" pos:column="5">/* wait for helper to complete processing */</comment>
    <decl_stmt><decl><type><name><name pos:line="44" pos:column="5">struct<pos:position pos:line="44" pos:column="11"/></name> <name pos:line="44" pos:column="12">timespec<pos:position pos:line="44" pos:column="20"/></name></name></type> <name pos:line="44" pos:column="21">ts<pos:position pos:line="44" pos:column="23"/></name></decl>;<pos:position pos:line="44" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="45" pos:column="5">cdtime_t<pos:position pos:line="45" pos:column="13"/></name></type> <name pos:line="45" pos:column="14">now<pos:position pos:line="45" pos:column="17"/></name> <init pos:line="45" pos:column="18">= <expr><call><name pos:line="45" pos:column="20">cdtime<pos:position pos:line="45" pos:column="26"/></name><argument_list pos:line="45" pos:column="26">()<pos:position pos:line="45" pos:column="28"/></argument_list></call></expr></init></decl>;<pos:position pos:line="45" pos:column="29"/></decl_stmt>

    <if pos:line="47" pos:column="5">if <condition pos:line="47" pos:column="8">(<expr><name><name pos:line="47" pos:column="9">phc<pos:position pos:line="47" pos:column="12"/></name><operator pos:line="47" pos:column="12">-&gt;<pos:position pos:line="47" pos:column="17"/></operator><name pos:line="47" pos:column="14">status<pos:position pos:line="47" pos:column="20"/></name></name> <operator pos:line="47" pos:column="21">!=<pos:position pos:line="47" pos:column="23"/></operator> <name pos:line="47" pos:column="24">DPDK_HELPER_ALIVE_SENDING_EVENTS<pos:position pos:line="47" pos:column="56"/></name></expr>)<pos:position pos:line="47" pos:column="57"/></condition><then pos:line="47" pos:column="57"> <block pos:line="47" pos:column="58">{
      <expr_stmt><expr><name pos:line="48" pos:column="7">cmd_wait_time<pos:position pos:line="48" pos:column="20"/></name> <operator pos:line="48" pos:column="21">=<pos:position pos:line="48" pos:column="22"/></operator> <call><name pos:line="48" pos:column="23">MS_TO_CDTIME_T<pos:position pos:line="48" pos:column="37"/></name><argument_list pos:line="48" pos:column="37">(<argument><expr><name pos:line="48" pos:column="38">DPDK_CDM_DEFAULT_TIMEOUT<pos:position pos:line="48" pos:column="62"/></name></expr></argument>)<pos:position pos:line="48" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="64"/></expr_stmt>
    }<pos:position pos:line="49" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="51" pos:column="5">ts<pos:position pos:line="51" pos:column="7"/></name> <operator pos:line="51" pos:column="8">=<pos:position pos:line="51" pos:column="9"/></operator> <call><name pos:line="51" pos:column="10">CDTIME_T_TO_TIMESPEC<pos:position pos:line="51" pos:column="30"/></name><argument_list pos:line="51" pos:column="30">(<argument><expr><name pos:line="51" pos:column="31">now<pos:position pos:line="51" pos:column="34"/></name> <operator pos:line="51" pos:column="35">+<pos:position pos:line="51" pos:column="36"/></operator> <name pos:line="51" pos:column="37">cmd_wait_time<pos:position pos:line="51" pos:column="50"/></name></expr></argument>)<pos:position pos:line="51" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="52"/></expr_stmt>
    <expr_stmt><expr><name pos:line="52" pos:column="5">ret<pos:position pos:line="52" pos:column="8"/></name> <operator pos:line="52" pos:column="9">=<pos:position pos:line="52" pos:column="10"/></operator> <call><name pos:line="52" pos:column="11">sem_timedwait<pos:position pos:line="52" pos:column="24"/></name><argument_list pos:line="52" pos:column="24">(<argument><expr><operator pos:line="52" pos:column="25">&amp;<pos:position pos:line="52" pos:column="30"/></operator><name><name pos:line="52" pos:column="26">phc<pos:position pos:line="52" pos:column="29"/></name><operator pos:line="52" pos:column="29">-&gt;<pos:position pos:line="52" pos:column="34"/></operator><name pos:line="52" pos:column="31">sema_cmd_complete<pos:position pos:line="52" pos:column="48"/></name></name></expr></argument>, <argument><expr><operator pos:line="52" pos:column="50">&amp;<pos:position pos:line="52" pos:column="55"/></operator><name pos:line="52" pos:column="51">ts<pos:position pos:line="52" pos:column="53"/></name></expr></argument>)<pos:position pos:line="52" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="55"/></expr_stmt>
    <if pos:line="53" pos:column="5">if <condition pos:line="53" pos:column="8">(<expr><name pos:line="53" pos:column="9">ret<pos:position pos:line="53" pos:column="12"/></name> <operator pos:line="53" pos:column="13">==<pos:position pos:line="53" pos:column="15"/></operator> <operator pos:line="53" pos:column="16">-<pos:position pos:line="53" pos:column="17"/></operator><literal type="number" pos:line="53" pos:column="17">1<pos:position pos:line="53" pos:column="18"/></literal> <operator pos:line="53" pos:column="19">&amp;&amp;<pos:position pos:line="53" pos:column="29"/></operator> <name pos:line="53" pos:column="22">errno<pos:position pos:line="53" pos:column="27"/></name> <operator pos:line="53" pos:column="28">==<pos:position pos:line="53" pos:column="30"/></operator> <name pos:line="53" pos:column="31">ETIMEDOUT<pos:position pos:line="53" pos:column="40"/></name></expr>)<pos:position pos:line="53" pos:column="41"/></condition><then pos:line="53" pos:column="41"> <block pos:line="53" pos:column="42">{
      <expr_stmt><expr><call><name pos:line="54" pos:column="7">DPDK_HELPER_TRACE<pos:position pos:line="54" pos:column="24"/></name><argument_list pos:line="54" pos:column="24">(<argument><expr><name><name pos:line="54" pos:column="25">phc<pos:position pos:line="54" pos:column="28"/></name><operator pos:line="54" pos:column="28">-&gt;<pos:position pos:line="54" pos:column="33"/></operator><name pos:line="54" pos:column="30">shm_name<pos:position pos:line="54" pos:column="38"/></name></name></expr></argument>)<pos:position pos:line="54" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="40"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="55" pos:column="7">DEBUG<pos:position pos:line="55" pos:column="12"/></name><argument_list pos:line="55" pos:column="12">(<argument><expr><literal type="string" pos:line="55" pos:column="13">"%s:sema_cmd_start: timeout in collectd thread: is a DPDK Primary "<pos:position pos:line="55" pos:column="80"/></literal>
            <literal type="string" pos:line="56" pos:column="13">"running?"<pos:position pos:line="56" pos:column="23"/></literal></expr></argument>,
            <argument><expr><name><name pos:line="57" pos:column="13">phc<pos:position pos:line="57" pos:column="16"/></name><operator pos:line="57" pos:column="16">-&gt;<pos:position pos:line="57" pos:column="21"/></operator><name pos:line="57" pos:column="18">shm_name<pos:position pos:line="57" pos:column="26"/></name></name></expr></argument>)<pos:position pos:line="57" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="28"/></expr_stmt>
      <return pos:line="58" pos:column="7">return <expr><operator pos:line="58" pos:column="14">-<pos:position pos:line="58" pos:column="15"/></operator><name pos:line="58" pos:column="15">ETIMEDOUT<pos:position pos:line="58" pos:column="24"/></name></expr>;<pos:position pos:line="58" pos:column="25"/></return>
    }<pos:position pos:line="59" pos:column="6"/></block></then></if>

<cpp:if pos:line="61" pos:column="1">#<cpp:directive pos:line="61" pos:column="2">if<pos:position pos:line="61" pos:column="4"/></cpp:directive> <expr><name pos:line="61" pos:column="5">COLLECT_DEBUG<pos:position pos:line="61" pos:column="18"/></name></expr></cpp:if>
    <expr_stmt><expr><name pos:line="62" pos:column="5">val<pos:position pos:line="62" pos:column="8"/></name> <operator pos:line="62" pos:column="9">=<pos:position pos:line="62" pos:column="10"/></operator> <literal type="number" pos:line="62" pos:column="11">0<pos:position pos:line="62" pos:column="12"/></literal></expr>;<pos:position pos:line="62" pos:column="13"/></expr_stmt>
    <if pos:line="63" pos:column="5">if <condition pos:line="63" pos:column="8">(<expr><call><name pos:line="63" pos:column="9">sem_getvalue<pos:position pos:line="63" pos:column="21"/></name><argument_list pos:line="63" pos:column="21">(<argument><expr><operator pos:line="63" pos:column="22">&amp;<pos:position pos:line="63" pos:column="27"/></operator><name><name pos:line="63" pos:column="23">phc<pos:position pos:line="63" pos:column="26"/></name><operator pos:line="63" pos:column="26">-&gt;<pos:position pos:line="63" pos:column="31"/></operator><name pos:line="63" pos:column="28">sema_cmd_complete<pos:position pos:line="63" pos:column="45"/></name></name></expr></argument>, <argument><expr><operator pos:line="63" pos:column="47">&amp;<pos:position pos:line="63" pos:column="52"/></operator><name pos:line="63" pos:column="48">val<pos:position pos:line="63" pos:column="51"/></name></expr></argument>)<pos:position pos:line="63" pos:column="52"/></argument_list></call> <operator pos:line="63" pos:column="53">==<pos:position pos:line="63" pos:column="55"/></operator> <literal type="number" pos:line="63" pos:column="56">0<pos:position pos:line="63" pos:column="57"/></literal></expr>)<pos:position pos:line="63" pos:column="58"/></condition><then pos:line="63" pos:column="58">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="64" pos:column="7">DEBUG<pos:position pos:line="64" pos:column="12"/></name><argument_list pos:line="64" pos:column="12">(<argument><expr><literal type="string" pos:line="64" pos:column="13">"%s:dpdk_helper_command: wait sema_cmd_complete (value=%d)"<pos:position pos:line="64" pos:column="72"/></literal></expr></argument>,
            <argument><expr><name><name pos:line="65" pos:column="13">phc<pos:position pos:line="65" pos:column="16"/></name><operator pos:line="65" pos:column="16">-&gt;<pos:position pos:line="65" pos:column="21"/></operator><name pos:line="65" pos:column="18">shm_name<pos:position pos:line="65" pos:column="26"/></name></name></expr></argument>, <argument><expr><name pos:line="65" pos:column="28">val<pos:position pos:line="65" pos:column="31"/></name></expr></argument>)<pos:position pos:line="65" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="33"/></expr_stmt></block></then></if>
<cpp:endif pos:line="66" pos:column="1">#<cpp:directive pos:line="66" pos:column="2">endif<pos:position pos:line="66" pos:column="7"/></cpp:directive></cpp:endif>

    <if pos:line="68" pos:column="5">if <condition pos:line="68" pos:column="8">(<expr><name pos:line="68" pos:column="9">result<pos:position pos:line="68" pos:column="15"/></name></expr>)<pos:position pos:line="68" pos:column="16"/></condition><then pos:line="68" pos:column="16"> <block pos:line="68" pos:column="17">{
      <expr_stmt><expr><operator pos:line="69" pos:column="7">*<pos:position pos:line="69" pos:column="8"/></operator><name pos:line="69" pos:column="8">result<pos:position pos:line="69" pos:column="14"/></name> <operator pos:line="69" pos:column="15">=<pos:position pos:line="69" pos:column="16"/></operator> <name><name pos:line="69" pos:column="17">phc<pos:position pos:line="69" pos:column="20"/></name><operator pos:line="69" pos:column="20">-&gt;<pos:position pos:line="69" pos:column="25"/></operator><name pos:line="69" pos:column="22">cmd_result<pos:position pos:line="69" pos:column="32"/></name></name></expr>;<pos:position pos:line="69" pos:column="33"/></expr_stmt>
    }<pos:position pos:line="70" pos:column="6"/></block></then></if>
  }<pos:position pos:line="71" pos:column="4"/></block></then></if>

  <expr_stmt><expr><call><name pos:line="73" pos:column="3">dpdk_helper_check_pipe<pos:position pos:line="73" pos:column="25"/></name><argument_list pos:line="73" pos:column="25">(<argument><expr><name pos:line="73" pos:column="26">phc<pos:position pos:line="73" pos:column="29"/></name></expr></argument>)<pos:position pos:line="73" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="31"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="75" pos:column="3">DEBUG<pos:position pos:line="75" pos:column="8"/></name><argument_list pos:line="75" pos:column="8">(<argument><expr><literal type="string" pos:line="75" pos:column="9">"%s: DPDK command complete (cmd=%d, result=%d)"<pos:position pos:line="75" pos:column="56"/></literal></expr></argument>, <argument><expr><name><name pos:line="75" pos:column="58">phc<pos:position pos:line="75" pos:column="61"/></name><operator pos:line="75" pos:column="61">-&gt;<pos:position pos:line="75" pos:column="66"/></operator><name pos:line="75" pos:column="63">shm_name<pos:position pos:line="75" pos:column="71"/></name></name></expr></argument>,
        <argument><expr><name><name pos:line="76" pos:column="9">phc<pos:position pos:line="76" pos:column="12"/></name><operator pos:line="76" pos:column="12">-&gt;<pos:position pos:line="76" pos:column="17"/></operator><name pos:line="76" pos:column="14">cmd<pos:position pos:line="76" pos:column="17"/></name></name></expr></argument>, <argument><expr><name><name pos:line="76" pos:column="19">phc<pos:position pos:line="76" pos:column="22"/></name><operator pos:line="76" pos:column="22">-&gt;<pos:position pos:line="76" pos:column="27"/></operator><name pos:line="76" pos:column="24">cmd_result<pos:position pos:line="76" pos:column="34"/></name></name></expr></argument>)<pos:position pos:line="76" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="36"/></expr_stmt>

  <return pos:line="78" pos:column="3">return <expr><literal type="number" pos:line="78" pos:column="10">0<pos:position pos:line="78" pos:column="11"/></literal></expr>;<pos:position pos:line="78" pos:column="12"/></return>
}<pos:position pos:line="79" pos:column="2"/></block></function></unit>
