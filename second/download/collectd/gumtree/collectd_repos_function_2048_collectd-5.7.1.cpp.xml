<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_2048_collectd-5.7.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">network_bind_socket<pos:position pos:line="1" pos:column="31"/></name><parameter_list pos:line="1" pos:column="31">(<parameter><decl><type><name pos:line="1" pos:column="32">int<pos:position pos:line="1" pos:column="35"/></name></type> <name pos:line="1" pos:column="36">fd<pos:position pos:line="1" pos:column="38"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="40">const<pos:position pos:line="1" pos:column="45"/></specifier> <name><name pos:line="1" pos:column="46">struct<pos:position pos:line="1" pos:column="52"/></name> <name pos:line="1" pos:column="53">addrinfo<pos:position pos:line="1" pos:column="61"/></name></name> <modifier pos:line="1" pos:column="62">*<pos:position pos:line="1" pos:column="63"/></modifier></type><name pos:line="1" pos:column="63">ai<pos:position pos:line="1" pos:column="65"/></name></decl></parameter>,
                               <parameter><decl><type><specifier pos:line="2" pos:column="32">const<pos:position pos:line="2" pos:column="37"/></specifier> <name pos:line="2" pos:column="38">int<pos:position pos:line="2" pos:column="41"/></name></type> <name pos:line="2" pos:column="42">interface_idx<pos:position pos:line="2" pos:column="55"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="56"/></parameter_list> <block pos:line="2" pos:column="57">{
<cpp:if pos:line="3" pos:column="1">#<cpp:directive pos:line="3" pos:column="2">if<pos:position pos:line="3" pos:column="4"/></cpp:directive> <expr><name pos:line="3" pos:column="5">KERNEL_SOLARIS<pos:position pos:line="3" pos:column="19"/></name></expr></cpp:if>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">char<pos:position pos:line="4" pos:column="7"/></name></type> <name pos:line="4" pos:column="8">loop<pos:position pos:line="4" pos:column="12"/></name> <init pos:line="4" pos:column="13">= <expr><literal type="number" pos:line="4" pos:column="15">0<pos:position pos:line="4" pos:column="16"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="17"/></decl_stmt>
<cpp:else pos:line="5" pos:column="1">#<cpp:directive pos:line="5" pos:column="2">else<pos:position pos:line="5" pos:column="6"/></cpp:directive></cpp:else>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">int<pos:position pos:line="6" pos:column="6"/></name></type> <name pos:line="6" pos:column="7">loop<pos:position pos:line="6" pos:column="11"/></name> <init pos:line="6" pos:column="12">= <expr><literal type="number" pos:line="6" pos:column="14">0<pos:position pos:line="6" pos:column="15"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="16"/></decl_stmt>
<cpp:endif pos:line="7" pos:column="1">#<cpp:directive pos:line="7" pos:column="2">endif<pos:position pos:line="7" pos:column="7"/></cpp:directive></cpp:endif>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">int<pos:position pos:line="8" pos:column="6"/></name></type> <name pos:line="8" pos:column="7">yes<pos:position pos:line="8" pos:column="10"/></name> <init pos:line="8" pos:column="11">= <expr><literal type="number" pos:line="8" pos:column="13">1<pos:position pos:line="8" pos:column="14"/></literal></expr></init></decl>;<pos:position pos:line="8" pos:column="15"/></decl_stmt>

  <comment type="block" pos:line="10" pos:column="3">/* allow multiple sockets to use the same PORT number */</comment>
  <if pos:line="11" pos:column="3">if <condition pos:line="11" pos:column="6">(<expr><call><name pos:line="11" pos:column="7">setsockopt<pos:position pos:line="11" pos:column="17"/></name><argument_list pos:line="11" pos:column="17">(<argument><expr><name pos:line="11" pos:column="18">fd<pos:position pos:line="11" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="22">SOL_SOCKET<pos:position pos:line="11" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="34">SO_REUSEADDR<pos:position pos:line="11" pos:column="46"/></name></expr></argument>, <argument><expr><operator pos:line="11" pos:column="48">&amp;<pos:position pos:line="11" pos:column="53"/></operator><name pos:line="11" pos:column="49">yes<pos:position pos:line="11" pos:column="52"/></name></expr></argument>, <argument><expr><sizeof pos:line="11" pos:column="54">sizeof<argument_list pos:line="11" pos:column="60">(<argument><expr><name pos:line="11" pos:column="61">yes<pos:position pos:line="11" pos:column="64"/></name></expr></argument>)<pos:position pos:line="11" pos:column="65"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="11" pos:column="66"/></argument_list></call> <operator pos:line="11" pos:column="67">==<pos:position pos:line="11" pos:column="69"/></operator> <operator pos:line="11" pos:column="70">-<pos:position pos:line="11" pos:column="71"/></operator><literal type="number" pos:line="11" pos:column="71">1<pos:position pos:line="11" pos:column="72"/></literal></expr>)<pos:position pos:line="11" pos:column="73"/></condition><then pos:line="11" pos:column="73"> <block pos:line="11" pos:column="74">{
    <decl_stmt><decl><type><name pos:line="12" pos:column="5">char<pos:position pos:line="12" pos:column="9"/></name></type> <name><name pos:line="12" pos:column="10">errbuf<pos:position pos:line="12" pos:column="16"/></name><index pos:line="12" pos:column="16">[<expr><literal type="number" pos:line="12" pos:column="17">1024<pos:position pos:line="12" pos:column="21"/></literal></expr>]<pos:position pos:line="12" pos:column="22"/></index></name></decl>;<pos:position pos:line="12" pos:column="23"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="13" pos:column="5">ERROR<pos:position pos:line="13" pos:column="10"/></name><argument_list pos:line="13" pos:column="10">(<argument><expr><literal type="string" pos:line="13" pos:column="11">"network plugin: setsockopt (reuseaddr): %s"<pos:position pos:line="13" pos:column="55"/></literal></expr></argument>,
          <argument><expr><call><name pos:line="14" pos:column="11">sstrerror<pos:position pos:line="14" pos:column="20"/></name><argument_list pos:line="14" pos:column="20">(<argument><expr><name pos:line="14" pos:column="21">errno<pos:position pos:line="14" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="28">errbuf<pos:position pos:line="14" pos:column="34"/></name></expr></argument>, <argument><expr><sizeof pos:line="14" pos:column="36">sizeof<argument_list pos:line="14" pos:column="42">(<argument><expr><name pos:line="14" pos:column="43">errbuf<pos:position pos:line="14" pos:column="49"/></name></expr></argument>)<pos:position pos:line="14" pos:column="50"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="14" pos:column="51"/></argument_list></call></expr></argument>)<pos:position pos:line="14" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="53"/></expr_stmt>
    <return pos:line="15" pos:column="5">return <expr><operator pos:line="15" pos:column="12">(<pos:position pos:line="15" pos:column="13"/></operator><operator pos:line="15" pos:column="13">-<pos:position pos:line="15" pos:column="14"/></operator><literal type="number" pos:line="15" pos:column="14">1<pos:position pos:line="15" pos:column="15"/></literal><operator pos:line="15" pos:column="15">)<pos:position pos:line="15" pos:column="16"/></operator></expr>;<pos:position pos:line="15" pos:column="17"/></return>
  }<pos:position pos:line="16" pos:column="4"/></block></then></if>

  <expr_stmt><expr><call><name pos:line="18" pos:column="3">DEBUG<pos:position pos:line="18" pos:column="8"/></name><argument_list pos:line="18" pos:column="8">(<argument><expr><literal type="string" pos:line="18" pos:column="9">"fd = %i; calling `bind'"<pos:position pos:line="18" pos:column="34"/></literal></expr></argument>, <argument><expr><name pos:line="18" pos:column="36">fd<pos:position pos:line="18" pos:column="38"/></name></expr></argument>)<pos:position pos:line="18" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="40"/></expr_stmt>

  <if pos:line="20" pos:column="3">if <condition pos:line="20" pos:column="6">(<expr><call><name pos:line="20" pos:column="7">bind<pos:position pos:line="20" pos:column="11"/></name><argument_list pos:line="20" pos:column="11">(<argument><expr><name pos:line="20" pos:column="12">fd<pos:position pos:line="20" pos:column="14"/></name></expr></argument>, <argument><expr><name><name pos:line="20" pos:column="16">ai<pos:position pos:line="20" pos:column="18"/></name><operator pos:line="20" pos:column="18">-&gt;<pos:position pos:line="20" pos:column="23"/></operator><name pos:line="20" pos:column="20">ai_addr<pos:position pos:line="20" pos:column="27"/></name></name></expr></argument>, <argument><expr><name><name pos:line="20" pos:column="29">ai<pos:position pos:line="20" pos:column="31"/></name><operator pos:line="20" pos:column="31">-&gt;<pos:position pos:line="20" pos:column="36"/></operator><name pos:line="20" pos:column="33">ai_addrlen<pos:position pos:line="20" pos:column="43"/></name></name></expr></argument>)<pos:position pos:line="20" pos:column="44"/></argument_list></call> <operator pos:line="20" pos:column="45">==<pos:position pos:line="20" pos:column="47"/></operator> <operator pos:line="20" pos:column="48">-<pos:position pos:line="20" pos:column="49"/></operator><literal type="number" pos:line="20" pos:column="49">1<pos:position pos:line="20" pos:column="50"/></literal></expr>)<pos:position pos:line="20" pos:column="51"/></condition><then pos:line="20" pos:column="51"> <block pos:line="20" pos:column="52">{
    <decl_stmt><decl><type><name pos:line="21" pos:column="5">char<pos:position pos:line="21" pos:column="9"/></name></type> <name><name pos:line="21" pos:column="10">errbuf<pos:position pos:line="21" pos:column="16"/></name><index pos:line="21" pos:column="16">[<expr><literal type="number" pos:line="21" pos:column="17">1024<pos:position pos:line="21" pos:column="21"/></literal></expr>]<pos:position pos:line="21" pos:column="22"/></index></name></decl>;<pos:position pos:line="21" pos:column="23"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="22" pos:column="5">ERROR<pos:position pos:line="22" pos:column="10"/></name><argument_list pos:line="22" pos:column="10">(<argument><expr><literal type="string" pos:line="22" pos:column="11">"bind: %s"<pos:position pos:line="22" pos:column="21"/></literal></expr></argument>, <argument><expr><call><name pos:line="22" pos:column="23">sstrerror<pos:position pos:line="22" pos:column="32"/></name><argument_list pos:line="22" pos:column="32">(<argument><expr><name pos:line="22" pos:column="33">errno<pos:position pos:line="22" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="40">errbuf<pos:position pos:line="22" pos:column="46"/></name></expr></argument>, <argument><expr><sizeof pos:line="22" pos:column="48">sizeof<argument_list pos:line="22" pos:column="54">(<argument><expr><name pos:line="22" pos:column="55">errbuf<pos:position pos:line="22" pos:column="61"/></name></expr></argument>)<pos:position pos:line="22" pos:column="62"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="22" pos:column="63"/></argument_list></call></expr></argument>)<pos:position pos:line="22" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="65"/></expr_stmt>
    <return pos:line="23" pos:column="5">return <expr><operator pos:line="23" pos:column="12">(<pos:position pos:line="23" pos:column="13"/></operator><operator pos:line="23" pos:column="13">-<pos:position pos:line="23" pos:column="14"/></operator><literal type="number" pos:line="23" pos:column="14">1<pos:position pos:line="23" pos:column="15"/></literal><operator pos:line="23" pos:column="15">)<pos:position pos:line="23" pos:column="16"/></operator></expr>;<pos:position pos:line="23" pos:column="17"/></return>
  }<pos:position pos:line="24" pos:column="4"/></block></then></if>

  <if pos:line="26" pos:column="3">if <condition pos:line="26" pos:column="6">(<expr><name><name pos:line="26" pos:column="7">ai<pos:position pos:line="26" pos:column="9"/></name><operator pos:line="26" pos:column="9">-&gt;<pos:position pos:line="26" pos:column="14"/></operator><name pos:line="26" pos:column="11">ai_family<pos:position pos:line="26" pos:column="20"/></name></name> <operator pos:line="26" pos:column="21">==<pos:position pos:line="26" pos:column="23"/></operator> <name pos:line="26" pos:column="24">AF_INET<pos:position pos:line="26" pos:column="31"/></name></expr>)<pos:position pos:line="26" pos:column="32"/></condition><then pos:line="26" pos:column="32"> <block pos:line="26" pos:column="33">{
    <decl_stmt><decl><type><name><name pos:line="27" pos:column="5">struct<pos:position pos:line="27" pos:column="11"/></name> <name pos:line="27" pos:column="12">sockaddr_in<pos:position pos:line="27" pos:column="23"/></name></name> <modifier pos:line="27" pos:column="24">*<pos:position pos:line="27" pos:column="25"/></modifier></type><name pos:line="27" pos:column="25">addr<pos:position pos:line="27" pos:column="29"/></name> <init pos:line="27" pos:column="30">= <expr><operator pos:line="27" pos:column="32">(<pos:position pos:line="27" pos:column="33"/></operator>struct <name pos:line="27" pos:column="40">sockaddr_in<pos:position pos:line="27" pos:column="51"/></name> <operator pos:line="27" pos:column="52">*<pos:position pos:line="27" pos:column="53"/></operator><operator pos:line="27" pos:column="53">)<pos:position pos:line="27" pos:column="54"/></operator><name><name pos:line="27" pos:column="54">ai<pos:position pos:line="27" pos:column="56"/></name><operator pos:line="27" pos:column="56">-&gt;<pos:position pos:line="27" pos:column="61"/></operator><name pos:line="27" pos:column="58">ai_addr<pos:position pos:line="27" pos:column="65"/></name></name></expr></init></decl>;<pos:position pos:line="27" pos:column="66"/></decl_stmt>
    <if pos:line="28" pos:column="5">if <condition pos:line="28" pos:column="8">(<expr><call><name pos:line="28" pos:column="9">IN_MULTICAST<pos:position pos:line="28" pos:column="21"/></name><argument_list pos:line="28" pos:column="21">(<argument><expr><call><name pos:line="28" pos:column="22">ntohl<pos:position pos:line="28" pos:column="27"/></name><argument_list pos:line="28" pos:column="27">(<argument><expr><name><name pos:line="28" pos:column="28">addr<pos:position pos:line="28" pos:column="32"/></name><operator pos:line="28" pos:column="32">-&gt;<pos:position pos:line="28" pos:column="37"/></operator><name pos:line="28" pos:column="34">sin_addr<pos:position pos:line="28" pos:column="42"/></name><operator pos:line="28" pos:column="42">.<pos:position pos:line="28" pos:column="43"/></operator><name pos:line="28" pos:column="43">s_addr<pos:position pos:line="28" pos:column="49"/></name></name></expr></argument>)<pos:position pos:line="28" pos:column="50"/></argument_list></call></expr></argument>)<pos:position pos:line="28" pos:column="51"/></argument_list></call></expr>)<pos:position pos:line="28" pos:column="52"/></condition><then pos:line="28" pos:column="52"> <block pos:line="28" pos:column="53">{
<cpp:if pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">if<pos:position pos:line="29" pos:column="4"/></cpp:directive> <expr><name pos:line="29" pos:column="5">HAVE_STRUCT_IP_MREQN_IMR_IFINDEX<pos:position pos:line="29" pos:column="37"/></name></expr></cpp:if>
      <decl_stmt><decl><type><name><name pos:line="30" pos:column="7">struct<pos:position pos:line="30" pos:column="13"/></name> <name pos:line="30" pos:column="14">ip_mreqn<pos:position pos:line="30" pos:column="22"/></name></name></type> <name pos:line="30" pos:column="23">mreq<pos:position pos:line="30" pos:column="27"/></name></decl>;<pos:position pos:line="30" pos:column="28"/></decl_stmt>
<cpp:else pos:line="31" pos:column="1">#<cpp:directive pos:line="31" pos:column="2">else<pos:position pos:line="31" pos:column="6"/></cpp:directive></cpp:else>
      <decl_stmt><decl><type><name><name pos:line="32" pos:column="7">struct<pos:position pos:line="32" pos:column="13"/></name> <name pos:line="32" pos:column="14">ip_mreq<pos:position pos:line="32" pos:column="21"/></name></name></type> <name pos:line="32" pos:column="22">mreq<pos:position pos:line="32" pos:column="26"/></name></decl>;<pos:position pos:line="32" pos:column="27"/></decl_stmt>
<cpp:endif pos:line="33" pos:column="1">#<cpp:directive pos:line="33" pos:column="2">endif<pos:position pos:line="33" pos:column="7"/></cpp:directive></cpp:endif>

      <expr_stmt><expr><call><name pos:line="35" pos:column="7">DEBUG<pos:position pos:line="35" pos:column="12"/></name><argument_list pos:line="35" pos:column="12">(<argument><expr><literal type="string" pos:line="35" pos:column="13">"fd = %i; IPv4 multicast address found"<pos:position pos:line="35" pos:column="52"/></literal></expr></argument>, <argument><expr><name pos:line="35" pos:column="54">fd<pos:position pos:line="35" pos:column="56"/></name></expr></argument>)<pos:position pos:line="35" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="58"/></expr_stmt>

      <expr_stmt><expr><name><name pos:line="37" pos:column="7">mreq<pos:position pos:line="37" pos:column="11"/></name><operator pos:line="37" pos:column="11">.<pos:position pos:line="37" pos:column="12"/></operator><name pos:line="37" pos:column="12">imr_multiaddr<pos:position pos:line="37" pos:column="25"/></name><operator pos:line="37" pos:column="25">.<pos:position pos:line="37" pos:column="26"/></operator><name pos:line="37" pos:column="26">s_addr<pos:position pos:line="37" pos:column="32"/></name></name> <operator pos:line="37" pos:column="33">=<pos:position pos:line="37" pos:column="34"/></operator> <name><name pos:line="37" pos:column="35">addr<pos:position pos:line="37" pos:column="39"/></name><operator pos:line="37" pos:column="39">-&gt;<pos:position pos:line="37" pos:column="44"/></operator><name pos:line="37" pos:column="41">sin_addr<pos:position pos:line="37" pos:column="49"/></name><operator pos:line="37" pos:column="49">.<pos:position pos:line="37" pos:column="50"/></operator><name pos:line="37" pos:column="50">s_addr<pos:position pos:line="37" pos:column="56"/></name></name></expr>;<pos:position pos:line="37" pos:column="57"/></expr_stmt>
<cpp:if pos:line="38" pos:column="1">#<cpp:directive pos:line="38" pos:column="2">if<pos:position pos:line="38" pos:column="4"/></cpp:directive> <expr><name pos:line="38" pos:column="5">HAVE_STRUCT_IP_MREQN_IMR_IFINDEX<pos:position pos:line="38" pos:column="37"/></name></expr></cpp:if>
      <comment type="block" pos:line="39" pos:column="7">/* Set the interface using the interface index if
       * possible (available). Unfortunately, the struct
       * ip_mreqn is not portable. */</comment>
      <expr_stmt><expr><name><name pos:line="42" pos:column="7">mreq<pos:position pos:line="42" pos:column="11"/></name><operator pos:line="42" pos:column="11">.<pos:position pos:line="42" pos:column="12"/></operator><name pos:line="42" pos:column="12">imr_address<pos:position pos:line="42" pos:column="23"/></name><operator pos:line="42" pos:column="23">.<pos:position pos:line="42" pos:column="24"/></operator><name pos:line="42" pos:column="24">s_addr<pos:position pos:line="42" pos:column="30"/></name></name> <operator pos:line="42" pos:column="31">=<pos:position pos:line="42" pos:column="32"/></operator> <call><name pos:line="42" pos:column="33">ntohl<pos:position pos:line="42" pos:column="38"/></name><argument_list pos:line="42" pos:column="38">(<argument><expr><name pos:line="42" pos:column="39">INADDR_ANY<pos:position pos:line="42" pos:column="49"/></name></expr></argument>)<pos:position pos:line="42" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="51"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="43" pos:column="7">mreq<pos:position pos:line="43" pos:column="11"/></name><operator pos:line="43" pos:column="11">.<pos:position pos:line="43" pos:column="12"/></operator><name pos:line="43" pos:column="12">imr_ifindex<pos:position pos:line="43" pos:column="23"/></name></name> <operator pos:line="43" pos:column="24">=<pos:position pos:line="43" pos:column="25"/></operator> <name pos:line="43" pos:column="26">interface_idx<pos:position pos:line="43" pos:column="39"/></name></expr>;<pos:position pos:line="43" pos:column="40"/></expr_stmt>
<cpp:else pos:line="44" pos:column="1">#<cpp:directive pos:line="44" pos:column="2">else<pos:position pos:line="44" pos:column="6"/></cpp:directive></cpp:else>
      <expr_stmt><expr><name><name pos:line="45" pos:column="7">mreq<pos:position pos:line="45" pos:column="11"/></name><operator pos:line="45" pos:column="11">.<pos:position pos:line="45" pos:column="12"/></operator><name pos:line="45" pos:column="12">imr_interface<pos:position pos:line="45" pos:column="25"/></name><operator pos:line="45" pos:column="25">.<pos:position pos:line="45" pos:column="26"/></operator><name pos:line="45" pos:column="26">s_addr<pos:position pos:line="45" pos:column="32"/></name></name> <operator pos:line="45" pos:column="33">=<pos:position pos:line="45" pos:column="34"/></operator> <call><name pos:line="45" pos:column="35">ntohl<pos:position pos:line="45" pos:column="40"/></name><argument_list pos:line="45" pos:column="40">(<argument><expr><name pos:line="45" pos:column="41">INADDR_ANY<pos:position pos:line="45" pos:column="51"/></name></expr></argument>)<pos:position pos:line="45" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="53"/></expr_stmt>
<cpp:endif pos:line="46" pos:column="1">#<cpp:directive pos:line="46" pos:column="2">endif<pos:position pos:line="46" pos:column="7"/></cpp:directive></cpp:endif>

      <if pos:line="48" pos:column="7">if <condition pos:line="48" pos:column="10">(<expr><call><name pos:line="48" pos:column="11">setsockopt<pos:position pos:line="48" pos:column="21"/></name><argument_list pos:line="48" pos:column="21">(<argument><expr><name pos:line="48" pos:column="22">fd<pos:position pos:line="48" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="26">IPPROTO_IP<pos:position pos:line="48" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="38">IP_MULTICAST_LOOP<pos:position pos:line="48" pos:column="55"/></name></expr></argument>, <argument><expr><operator pos:line="48" pos:column="57">&amp;<pos:position pos:line="48" pos:column="62"/></operator><name pos:line="48" pos:column="58">loop<pos:position pos:line="48" pos:column="62"/></name></expr></argument>, <argument><expr><sizeof pos:line="48" pos:column="64">sizeof<argument_list pos:line="48" pos:column="70">(<argument><expr><name pos:line="48" pos:column="71">loop<pos:position pos:line="48" pos:column="75"/></name></expr></argument>)<pos:position pos:line="48" pos:column="76"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="48" pos:column="77"/></argument_list></call> <operator pos:line="48" pos:column="78">==<pos:position pos:line="48" pos:column="80"/></operator>
          <operator pos:line="49" pos:column="11">-<pos:position pos:line="49" pos:column="12"/></operator><literal type="number" pos:line="49" pos:column="12">1<pos:position pos:line="49" pos:column="13"/></literal></expr>)<pos:position pos:line="49" pos:column="14"/></condition><then pos:line="49" pos:column="14"> <block pos:line="49" pos:column="15">{
        <decl_stmt><decl><type><name pos:line="50" pos:column="9">char<pos:position pos:line="50" pos:column="13"/></name></type> <name><name pos:line="50" pos:column="14">errbuf<pos:position pos:line="50" pos:column="20"/></name><index pos:line="50" pos:column="20">[<expr><literal type="number" pos:line="50" pos:column="21">1024<pos:position pos:line="50" pos:column="25"/></literal></expr>]<pos:position pos:line="50" pos:column="26"/></index></name></decl>;<pos:position pos:line="50" pos:column="27"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="51" pos:column="9">ERROR<pos:position pos:line="51" pos:column="14"/></name><argument_list pos:line="51" pos:column="14">(<argument><expr><literal type="string" pos:line="51" pos:column="15">"network plugin: setsockopt (multicast-loop): %s"<pos:position pos:line="51" pos:column="64"/></literal></expr></argument>,
              <argument><expr><call><name pos:line="52" pos:column="15">sstrerror<pos:position pos:line="52" pos:column="24"/></name><argument_list pos:line="52" pos:column="24">(<argument><expr><name pos:line="52" pos:column="25">errno<pos:position pos:line="52" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="32">errbuf<pos:position pos:line="52" pos:column="38"/></name></expr></argument>, <argument><expr><sizeof pos:line="52" pos:column="40">sizeof<argument_list pos:line="52" pos:column="46">(<argument><expr><name pos:line="52" pos:column="47">errbuf<pos:position pos:line="52" pos:column="53"/></name></expr></argument>)<pos:position pos:line="52" pos:column="54"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="52" pos:column="55"/></argument_list></call></expr></argument>)<pos:position pos:line="52" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="57"/></expr_stmt>
        <return pos:line="53" pos:column="9">return <expr><operator pos:line="53" pos:column="16">(<pos:position pos:line="53" pos:column="17"/></operator><operator pos:line="53" pos:column="17">-<pos:position pos:line="53" pos:column="18"/></operator><literal type="number" pos:line="53" pos:column="18">1<pos:position pos:line="53" pos:column="19"/></literal><operator pos:line="53" pos:column="19">)<pos:position pos:line="53" pos:column="20"/></operator></expr>;<pos:position pos:line="53" pos:column="21"/></return>
      }<pos:position pos:line="54" pos:column="8"/></block></then></if>

      <if pos:line="56" pos:column="7">if <condition pos:line="56" pos:column="10">(<expr><call><name pos:line="56" pos:column="11">setsockopt<pos:position pos:line="56" pos:column="21"/></name><argument_list pos:line="56" pos:column="21">(<argument><expr><name pos:line="56" pos:column="22">fd<pos:position pos:line="56" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="56" pos:column="26">IPPROTO_IP<pos:position pos:line="56" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="56" pos:column="38">IP_ADD_MEMBERSHIP<pos:position pos:line="56" pos:column="55"/></name></expr></argument>, <argument><expr><operator pos:line="56" pos:column="57">&amp;<pos:position pos:line="56" pos:column="62"/></operator><name pos:line="56" pos:column="58">mreq<pos:position pos:line="56" pos:column="62"/></name></expr></argument>, <argument><expr><sizeof pos:line="56" pos:column="64">sizeof<argument_list pos:line="56" pos:column="70">(<argument><expr><name pos:line="56" pos:column="71">mreq<pos:position pos:line="56" pos:column="75"/></name></expr></argument>)<pos:position pos:line="56" pos:column="76"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="56" pos:column="77"/></argument_list></call> <operator pos:line="56" pos:column="78">==<pos:position pos:line="56" pos:column="80"/></operator>
          <operator pos:line="57" pos:column="11">-<pos:position pos:line="57" pos:column="12"/></operator><literal type="number" pos:line="57" pos:column="12">1<pos:position pos:line="57" pos:column="13"/></literal></expr>)<pos:position pos:line="57" pos:column="14"/></condition><then pos:line="57" pos:column="14"> <block pos:line="57" pos:column="15">{
        <decl_stmt><decl><type><name pos:line="58" pos:column="9">char<pos:position pos:line="58" pos:column="13"/></name></type> <name><name pos:line="58" pos:column="14">errbuf<pos:position pos:line="58" pos:column="20"/></name><index pos:line="58" pos:column="20">[<expr><literal type="number" pos:line="58" pos:column="21">1024<pos:position pos:line="58" pos:column="25"/></literal></expr>]<pos:position pos:line="58" pos:column="26"/></index></name></decl>;<pos:position pos:line="58" pos:column="27"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="59" pos:column="9">ERROR<pos:position pos:line="59" pos:column="14"/></name><argument_list pos:line="59" pos:column="14">(<argument><expr><literal type="string" pos:line="59" pos:column="15">"network plugin: setsockopt (add-membership): %s"<pos:position pos:line="59" pos:column="64"/></literal></expr></argument>,
              <argument><expr><call><name pos:line="60" pos:column="15">sstrerror<pos:position pos:line="60" pos:column="24"/></name><argument_list pos:line="60" pos:column="24">(<argument><expr><name pos:line="60" pos:column="25">errno<pos:position pos:line="60" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="60" pos:column="32">errbuf<pos:position pos:line="60" pos:column="38"/></name></expr></argument>, <argument><expr><sizeof pos:line="60" pos:column="40">sizeof<argument_list pos:line="60" pos:column="46">(<argument><expr><name pos:line="60" pos:column="47">errbuf<pos:position pos:line="60" pos:column="53"/></name></expr></argument>)<pos:position pos:line="60" pos:column="54"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="60" pos:column="55"/></argument_list></call></expr></argument>)<pos:position pos:line="60" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="57"/></expr_stmt>
        <return pos:line="61" pos:column="9">return <expr><operator pos:line="61" pos:column="16">(<pos:position pos:line="61" pos:column="17"/></operator><operator pos:line="61" pos:column="17">-<pos:position pos:line="61" pos:column="18"/></operator><literal type="number" pos:line="61" pos:column="18">1<pos:position pos:line="61" pos:column="19"/></literal><operator pos:line="61" pos:column="19">)<pos:position pos:line="61" pos:column="20"/></operator></expr>;<pos:position pos:line="61" pos:column="21"/></return>
      }<pos:position pos:line="62" pos:column="8"/></block></then></if>

      <return pos:line="64" pos:column="7">return <expr><operator pos:line="64" pos:column="14">(<pos:position pos:line="64" pos:column="15"/></operator><literal type="number" pos:line="64" pos:column="15">0<pos:position pos:line="64" pos:column="16"/></literal><operator pos:line="64" pos:column="16">)<pos:position pos:line="64" pos:column="17"/></operator></expr>;<pos:position pos:line="64" pos:column="18"/></return>
    }<pos:position pos:line="65" pos:column="6"/></block></then></if>
  }<pos:position pos:line="66" pos:column="4"/></block></then> <elseif pos:line="66" pos:column="5">else <if pos:line="66" pos:column="10">if <condition pos:line="66" pos:column="13">(<expr><name><name pos:line="66" pos:column="14">ai<pos:position pos:line="66" pos:column="16"/></name><operator pos:line="66" pos:column="16">-&gt;<pos:position pos:line="66" pos:column="21"/></operator><name pos:line="66" pos:column="18">ai_family<pos:position pos:line="66" pos:column="27"/></name></name> <operator pos:line="66" pos:column="28">==<pos:position pos:line="66" pos:column="30"/></operator> <name pos:line="66" pos:column="31">AF_INET6<pos:position pos:line="66" pos:column="39"/></name></expr>)<pos:position pos:line="66" pos:column="40"/></condition><then pos:line="66" pos:column="40"> <block pos:line="66" pos:column="41">{
    <comment type="block" pos:line="67" pos:column="5">/* Useful example:
     * http://gsyc.escet.urjc.es/~eva/IPv6-web/examples/mcast.html */</comment>
    <decl_stmt><decl><type><name><name pos:line="69" pos:column="5">struct<pos:position pos:line="69" pos:column="11"/></name> <name pos:line="69" pos:column="12">sockaddr_in6<pos:position pos:line="69" pos:column="24"/></name></name> <modifier pos:line="69" pos:column="25">*<pos:position pos:line="69" pos:column="26"/></modifier></type><name pos:line="69" pos:column="26">addr<pos:position pos:line="69" pos:column="30"/></name> <init pos:line="69" pos:column="31">= <expr><operator pos:line="69" pos:column="33">(<pos:position pos:line="69" pos:column="34"/></operator>struct <name pos:line="69" pos:column="41">sockaddr_in6<pos:position pos:line="69" pos:column="53"/></name> <operator pos:line="69" pos:column="54">*<pos:position pos:line="69" pos:column="55"/></operator><operator pos:line="69" pos:column="55">)<pos:position pos:line="69" pos:column="56"/></operator><name><name pos:line="69" pos:column="56">ai<pos:position pos:line="69" pos:column="58"/></name><operator pos:line="69" pos:column="58">-&gt;<pos:position pos:line="69" pos:column="63"/></operator><name pos:line="69" pos:column="60">ai_addr<pos:position pos:line="69" pos:column="67"/></name></name></expr></init></decl>;<pos:position pos:line="69" pos:column="68"/></decl_stmt>
    <if pos:line="70" pos:column="5">if <condition pos:line="70" pos:column="8">(<expr><call><name pos:line="70" pos:column="9">IN6_IS_ADDR_MULTICAST<pos:position pos:line="70" pos:column="30"/></name><argument_list pos:line="70" pos:column="30">(<argument><expr><operator pos:line="70" pos:column="31">&amp;<pos:position pos:line="70" pos:column="36"/></operator><name><name pos:line="70" pos:column="32">addr<pos:position pos:line="70" pos:column="36"/></name><operator pos:line="70" pos:column="36">-&gt;<pos:position pos:line="70" pos:column="41"/></operator><name pos:line="70" pos:column="38">sin6_addr<pos:position pos:line="70" pos:column="47"/></name></name></expr></argument>)<pos:position pos:line="70" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="70" pos:column="49"/></condition><then pos:line="70" pos:column="49"> <block pos:line="70" pos:column="50">{
      <decl_stmt><decl><type><name><name pos:line="71" pos:column="7">struct<pos:position pos:line="71" pos:column="13"/></name> <name pos:line="71" pos:column="14">ipv6_mreq<pos:position pos:line="71" pos:column="23"/></name></name></type> <name pos:line="71" pos:column="24">mreq<pos:position pos:line="71" pos:column="28"/></name></decl>;<pos:position pos:line="71" pos:column="29"/></decl_stmt>

      <expr_stmt><expr><call><name pos:line="73" pos:column="7">DEBUG<pos:position pos:line="73" pos:column="12"/></name><argument_list pos:line="73" pos:column="12">(<argument><expr><literal type="string" pos:line="73" pos:column="13">"fd = %i; IPv6 multicast address found"<pos:position pos:line="73" pos:column="52"/></literal></expr></argument>, <argument><expr><name pos:line="73" pos:column="54">fd<pos:position pos:line="73" pos:column="56"/></name></expr></argument>)<pos:position pos:line="73" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="58"/></expr_stmt>

      <expr_stmt><expr><call><name pos:line="75" pos:column="7">memcpy<pos:position pos:line="75" pos:column="13"/></name><argument_list pos:line="75" pos:column="13">(<argument><expr><operator pos:line="75" pos:column="14">&amp;<pos:position pos:line="75" pos:column="19"/></operator><name><name pos:line="75" pos:column="15">mreq<pos:position pos:line="75" pos:column="19"/></name><operator pos:line="75" pos:column="19">.<pos:position pos:line="75" pos:column="20"/></operator><name pos:line="75" pos:column="20">ipv6mr_multiaddr<pos:position pos:line="75" pos:column="36"/></name></name></expr></argument>, <argument><expr><operator pos:line="75" pos:column="38">&amp;<pos:position pos:line="75" pos:column="43"/></operator><name><name pos:line="75" pos:column="39">addr<pos:position pos:line="75" pos:column="43"/></name><operator pos:line="75" pos:column="43">-&gt;<pos:position pos:line="75" pos:column="48"/></operator><name pos:line="75" pos:column="45">sin6_addr<pos:position pos:line="75" pos:column="54"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="75" pos:column="56">sizeof<argument_list pos:line="75" pos:column="62">(<argument><expr><name><name pos:line="75" pos:column="63">addr<pos:position pos:line="75" pos:column="67"/></name><operator pos:line="75" pos:column="67">-&gt;<pos:position pos:line="75" pos:column="72"/></operator><name pos:line="75" pos:column="69">sin6_addr<pos:position pos:line="75" pos:column="78"/></name></name></expr></argument>)<pos:position pos:line="75" pos:column="79"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="75" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="81"/></expr_stmt>

      <comment type="block" pos:line="77" pos:column="7">/* http://developer.apple.com/documentation/Darwin/Reference/ManPages/man4/ip6.4.html
       * ipv6mr_interface may be set to zeroes to
       * choose the default multicast interface or to
       * the index of a particular multicast-capable
       * interface if the host is multihomed.
       * Membership is associ-associated with a
       * single interface; programs running on
       * multihomed hosts may need to join the same
       * group on more than one interface.*/</comment>
      <expr_stmt><expr><name><name pos:line="86" pos:column="7">mreq<pos:position pos:line="86" pos:column="11"/></name><operator pos:line="86" pos:column="11">.<pos:position pos:line="86" pos:column="12"/></operator><name pos:line="86" pos:column="12">ipv6mr_interface<pos:position pos:line="86" pos:column="28"/></name></name> <operator pos:line="86" pos:column="29">=<pos:position pos:line="86" pos:column="30"/></operator> <name pos:line="86" pos:column="31">interface_idx<pos:position pos:line="86" pos:column="44"/></name></expr>;<pos:position pos:line="86" pos:column="45"/></expr_stmt>

      <if pos:line="88" pos:column="7">if <condition pos:line="88" pos:column="10">(<expr><call><name pos:line="88" pos:column="11">setsockopt<pos:position pos:line="88" pos:column="21"/></name><argument_list pos:line="88" pos:column="21">(<argument><expr><name pos:line="88" pos:column="22">fd<pos:position pos:line="88" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="88" pos:column="26">IPPROTO_IPV6<pos:position pos:line="88" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="88" pos:column="40">IPV6_MULTICAST_LOOP<pos:position pos:line="88" pos:column="59"/></name></expr></argument>, <argument><expr><operator pos:line="88" pos:column="61">&amp;<pos:position pos:line="88" pos:column="66"/></operator><name pos:line="88" pos:column="62">loop<pos:position pos:line="88" pos:column="66"/></name></expr></argument>,
                     <argument><expr><sizeof pos:line="89" pos:column="22">sizeof<argument_list pos:line="89" pos:column="28">(<argument><expr><name pos:line="89" pos:column="29">loop<pos:position pos:line="89" pos:column="33"/></name></expr></argument>)<pos:position pos:line="89" pos:column="34"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="89" pos:column="35"/></argument_list></call> <operator pos:line="89" pos:column="36">==<pos:position pos:line="89" pos:column="38"/></operator> <operator pos:line="89" pos:column="39">-<pos:position pos:line="89" pos:column="40"/></operator><literal type="number" pos:line="89" pos:column="40">1<pos:position pos:line="89" pos:column="41"/></literal></expr>)<pos:position pos:line="89" pos:column="42"/></condition><then pos:line="89" pos:column="42"> <block pos:line="89" pos:column="43">{
        <decl_stmt><decl><type><name pos:line="90" pos:column="9">char<pos:position pos:line="90" pos:column="13"/></name></type> <name><name pos:line="90" pos:column="14">errbuf<pos:position pos:line="90" pos:column="20"/></name><index pos:line="90" pos:column="20">[<expr><literal type="number" pos:line="90" pos:column="21">1024<pos:position pos:line="90" pos:column="25"/></literal></expr>]<pos:position pos:line="90" pos:column="26"/></index></name></decl>;<pos:position pos:line="90" pos:column="27"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="91" pos:column="9">ERROR<pos:position pos:line="91" pos:column="14"/></name><argument_list pos:line="91" pos:column="14">(<argument><expr><literal type="string" pos:line="91" pos:column="15">"network plugin: setsockopt (ipv6-multicast-loop): %s"<pos:position pos:line="91" pos:column="69"/></literal></expr></argument>,
              <argument><expr><call><name pos:line="92" pos:column="15">sstrerror<pos:position pos:line="92" pos:column="24"/></name><argument_list pos:line="92" pos:column="24">(<argument><expr><name pos:line="92" pos:column="25">errno<pos:position pos:line="92" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="92" pos:column="32">errbuf<pos:position pos:line="92" pos:column="38"/></name></expr></argument>, <argument><expr><sizeof pos:line="92" pos:column="40">sizeof<argument_list pos:line="92" pos:column="46">(<argument><expr><name pos:line="92" pos:column="47">errbuf<pos:position pos:line="92" pos:column="53"/></name></expr></argument>)<pos:position pos:line="92" pos:column="54"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="92" pos:column="55"/></argument_list></call></expr></argument>)<pos:position pos:line="92" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="57"/></expr_stmt>
        <return pos:line="93" pos:column="9">return <expr><operator pos:line="93" pos:column="16">(<pos:position pos:line="93" pos:column="17"/></operator><operator pos:line="93" pos:column="17">-<pos:position pos:line="93" pos:column="18"/></operator><literal type="number" pos:line="93" pos:column="18">1<pos:position pos:line="93" pos:column="19"/></literal><operator pos:line="93" pos:column="19">)<pos:position pos:line="93" pos:column="20"/></operator></expr>;<pos:position pos:line="93" pos:column="21"/></return>
      }<pos:position pos:line="94" pos:column="8"/></block></then></if>

      <if pos:line="96" pos:column="7">if <condition pos:line="96" pos:column="10">(<expr><call><name pos:line="96" pos:column="11">setsockopt<pos:position pos:line="96" pos:column="21"/></name><argument_list pos:line="96" pos:column="21">(<argument><expr><name pos:line="96" pos:column="22">fd<pos:position pos:line="96" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="96" pos:column="26">IPPROTO_IPV6<pos:position pos:line="96" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="96" pos:column="40">IPV6_ADD_MEMBERSHIP<pos:position pos:line="96" pos:column="59"/></name></expr></argument>, <argument><expr><operator pos:line="96" pos:column="61">&amp;<pos:position pos:line="96" pos:column="66"/></operator><name pos:line="96" pos:column="62">mreq<pos:position pos:line="96" pos:column="66"/></name></expr></argument>,
                     <argument><expr><sizeof pos:line="97" pos:column="22">sizeof<argument_list pos:line="97" pos:column="28">(<argument><expr><name pos:line="97" pos:column="29">mreq<pos:position pos:line="97" pos:column="33"/></name></expr></argument>)<pos:position pos:line="97" pos:column="34"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="97" pos:column="35"/></argument_list></call> <operator pos:line="97" pos:column="36">==<pos:position pos:line="97" pos:column="38"/></operator> <operator pos:line="97" pos:column="39">-<pos:position pos:line="97" pos:column="40"/></operator><literal type="number" pos:line="97" pos:column="40">1<pos:position pos:line="97" pos:column="41"/></literal></expr>)<pos:position pos:line="97" pos:column="42"/></condition><then pos:line="97" pos:column="42"> <block pos:line="97" pos:column="43">{
        <decl_stmt><decl><type><name pos:line="98" pos:column="9">char<pos:position pos:line="98" pos:column="13"/></name></type> <name><name pos:line="98" pos:column="14">errbuf<pos:position pos:line="98" pos:column="20"/></name><index pos:line="98" pos:column="20">[<expr><literal type="number" pos:line="98" pos:column="21">1024<pos:position pos:line="98" pos:column="25"/></literal></expr>]<pos:position pos:line="98" pos:column="26"/></index></name></decl>;<pos:position pos:line="98" pos:column="27"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="99" pos:column="9">ERROR<pos:position pos:line="99" pos:column="14"/></name><argument_list pos:line="99" pos:column="14">(<argument><expr><literal type="string" pos:line="99" pos:column="15">"network plugin: setsockopt (ipv6-add-membership): %s"<pos:position pos:line="99" pos:column="69"/></literal></expr></argument>,
              <argument><expr><call><name pos:line="100" pos:column="15">sstrerror<pos:position pos:line="100" pos:column="24"/></name><argument_list pos:line="100" pos:column="24">(<argument><expr><name pos:line="100" pos:column="25">errno<pos:position pos:line="100" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="100" pos:column="32">errbuf<pos:position pos:line="100" pos:column="38"/></name></expr></argument>, <argument><expr><sizeof pos:line="100" pos:column="40">sizeof<argument_list pos:line="100" pos:column="46">(<argument><expr><name pos:line="100" pos:column="47">errbuf<pos:position pos:line="100" pos:column="53"/></name></expr></argument>)<pos:position pos:line="100" pos:column="54"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="100" pos:column="55"/></argument_list></call></expr></argument>)<pos:position pos:line="100" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="100" pos:column="57"/></expr_stmt>
        <return pos:line="101" pos:column="9">return <expr><operator pos:line="101" pos:column="16">(<pos:position pos:line="101" pos:column="17"/></operator><operator pos:line="101" pos:column="17">-<pos:position pos:line="101" pos:column="18"/></operator><literal type="number" pos:line="101" pos:column="18">1<pos:position pos:line="101" pos:column="19"/></literal><operator pos:line="101" pos:column="19">)<pos:position pos:line="101" pos:column="20"/></operator></expr>;<pos:position pos:line="101" pos:column="21"/></return>
      }<pos:position pos:line="102" pos:column="8"/></block></then></if>

      <return pos:line="104" pos:column="7">return <expr><operator pos:line="104" pos:column="14">(<pos:position pos:line="104" pos:column="15"/></operator><literal type="number" pos:line="104" pos:column="15">0<pos:position pos:line="104" pos:column="16"/></literal><operator pos:line="104" pos:column="16">)<pos:position pos:line="104" pos:column="17"/></operator></expr>;<pos:position pos:line="104" pos:column="18"/></return>
    }<pos:position pos:line="105" pos:column="6"/></block></then></if>
  }<pos:position pos:line="106" pos:column="4"/></block></then></if></elseif></if>

<cpp:if pos:line="108" pos:column="1">#<cpp:directive pos:line="108" pos:column="2">if<pos:position pos:line="108" pos:column="4"/></cpp:directive> <expr><call><name pos:line="108" pos:column="5">defined<pos:position pos:line="108" pos:column="12"/></name><argument_list pos:line="108" pos:column="12">(<argument><expr><name pos:line="108" pos:column="13">HAVE_IF_INDEXTONAME<pos:position pos:line="108" pos:column="32"/></name></expr></argument>)<pos:position pos:line="108" pos:column="33"/></argument_list></call> <operator pos:line="108" pos:column="34">&amp;&amp;<pos:position pos:line="108" pos:column="44"/></operator> <name pos:line="108" pos:column="37">HAVE_IF_INDEXTONAME<pos:position pos:line="108" pos:column="56"/></name> <operator pos:line="108" pos:column="57">&amp;&amp;<pos:position pos:line="108" pos:column="67"/></operator>                     \
    <call><name pos:line="109" pos:column="5">defined<pos:position pos:line="109" pos:column="12"/></name><argument_list pos:line="109" pos:column="12">(<argument><expr><name pos:line="109" pos:column="13">SO_BINDTODEVICE<pos:position pos:line="109" pos:column="28"/></name></expr></argument>)<pos:position pos:line="109" pos:column="29"/></argument_list></call></expr></cpp:if>
  <comment type="block" pos:line="110" pos:column="3">/* if a specific interface was set, bind the socket to it. But to avoid
   * possible problems with multicast routing, only do that for non-multicast
   * addresses */</comment>
  <if pos:line="113" pos:column="3">if <condition pos:line="113" pos:column="6">(<expr><name pos:line="113" pos:column="7">interface_idx<pos:position pos:line="113" pos:column="20"/></name> <operator pos:line="113" pos:column="21">!=<pos:position pos:line="113" pos:column="23"/></operator> <literal type="number" pos:line="113" pos:column="24">0<pos:position pos:line="113" pos:column="25"/></literal></expr>)<pos:position pos:line="113" pos:column="26"/></condition><then pos:line="113" pos:column="26"> <block pos:line="113" pos:column="27">{
    <decl_stmt><decl><type><name pos:line="114" pos:column="5">char<pos:position pos:line="114" pos:column="9"/></name></type> <name><name pos:line="114" pos:column="10">interface_name<pos:position pos:line="114" pos:column="24"/></name><index pos:line="114" pos:column="24">[<expr><name pos:line="114" pos:column="25">IFNAMSIZ<pos:position pos:line="114" pos:column="33"/></name></expr>]<pos:position pos:line="114" pos:column="34"/></index></name></decl>;<pos:position pos:line="114" pos:column="35"/></decl_stmt>

    <if pos:line="116" pos:column="5">if <condition pos:line="116" pos:column="8">(<expr><call><name pos:line="116" pos:column="9">if_indextoname<pos:position pos:line="116" pos:column="23"/></name><argument_list pos:line="116" pos:column="23">(<argument><expr><name pos:line="116" pos:column="24">interface_idx<pos:position pos:line="116" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="116" pos:column="39">interface_name<pos:position pos:line="116" pos:column="53"/></name></expr></argument>)<pos:position pos:line="116" pos:column="54"/></argument_list></call> <operator pos:line="116" pos:column="55">==<pos:position pos:line="116" pos:column="57"/></operator> <name pos:line="116" pos:column="58">NULL<pos:position pos:line="116" pos:column="62"/></name></expr>)<pos:position pos:line="116" pos:column="63"/></condition><then pos:line="116" pos:column="63">
      <block type="pseudo"><return pos:line="117" pos:column="7">return <expr><operator pos:line="117" pos:column="14">(<pos:position pos:line="117" pos:column="15"/></operator><operator pos:line="117" pos:column="15">-<pos:position pos:line="117" pos:column="16"/></operator><literal type="number" pos:line="117" pos:column="16">1<pos:position pos:line="117" pos:column="17"/></literal><operator pos:line="117" pos:column="17">)<pos:position pos:line="117" pos:column="18"/></operator></expr>;<pos:position pos:line="117" pos:column="19"/></return></block></then></if>

    <expr_stmt><expr><call><name pos:line="119" pos:column="5">DEBUG<pos:position pos:line="119" pos:column="10"/></name><argument_list pos:line="119" pos:column="10">(<argument><expr><literal type="string" pos:line="119" pos:column="11">"fd = %i; Binding socket to interface %s"<pos:position pos:line="119" pos:column="52"/></literal></expr></argument>, <argument><expr><name pos:line="119" pos:column="54">fd<pos:position pos:line="119" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="119" pos:column="58">interface_name<pos:position pos:line="119" pos:column="72"/></name></expr></argument>)<pos:position pos:line="119" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="119" pos:column="74"/></expr_stmt>

    <if pos:line="121" pos:column="5">if <condition pos:line="121" pos:column="8">(<expr><call><name pos:line="121" pos:column="9">setsockopt<pos:position pos:line="121" pos:column="19"/></name><argument_list pos:line="121" pos:column="19">(<argument><expr><name pos:line="121" pos:column="20">fd<pos:position pos:line="121" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="121" pos:column="24">SOL_SOCKET<pos:position pos:line="121" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="121" pos:column="36">SO_BINDTODEVICE<pos:position pos:line="121" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="121" pos:column="53">interface_name<pos:position pos:line="121" pos:column="67"/></name></expr></argument>,
                   <argument><expr><sizeof pos:line="122" pos:column="20">sizeof<argument_list pos:line="122" pos:column="26">(<argument><expr><name pos:line="122" pos:column="27">interface_name<pos:position pos:line="122" pos:column="41"/></name></expr></argument>)<pos:position pos:line="122" pos:column="42"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="122" pos:column="43"/></argument_list></call> <operator pos:line="122" pos:column="44">==<pos:position pos:line="122" pos:column="46"/></operator> <operator pos:line="122" pos:column="47">-<pos:position pos:line="122" pos:column="48"/></operator><literal type="number" pos:line="122" pos:column="48">1<pos:position pos:line="122" pos:column="49"/></literal></expr>)<pos:position pos:line="122" pos:column="50"/></condition><then pos:line="122" pos:column="50"> <block pos:line="122" pos:column="51">{
      <decl_stmt><decl><type><name pos:line="123" pos:column="7">char<pos:position pos:line="123" pos:column="11"/></name></type> <name><name pos:line="123" pos:column="12">errbuf<pos:position pos:line="123" pos:column="18"/></name><index pos:line="123" pos:column="18">[<expr><literal type="number" pos:line="123" pos:column="19">1024<pos:position pos:line="123" pos:column="23"/></literal></expr>]<pos:position pos:line="123" pos:column="24"/></index></name></decl>;<pos:position pos:line="123" pos:column="25"/></decl_stmt>
      <expr_stmt><expr><call><name pos:line="124" pos:column="7">ERROR<pos:position pos:line="124" pos:column="12"/></name><argument_list pos:line="124" pos:column="12">(<argument><expr><literal type="string" pos:line="124" pos:column="13">"network plugin: setsockopt (bind-if): %s"<pos:position pos:line="124" pos:column="55"/></literal></expr></argument>,
            <argument><expr><call><name pos:line="125" pos:column="13">sstrerror<pos:position pos:line="125" pos:column="22"/></name><argument_list pos:line="125" pos:column="22">(<argument><expr><name pos:line="125" pos:column="23">errno<pos:position pos:line="125" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="125" pos:column="30">errbuf<pos:position pos:line="125" pos:column="36"/></name></expr></argument>, <argument><expr><sizeof pos:line="125" pos:column="38">sizeof<argument_list pos:line="125" pos:column="44">(<argument><expr><name pos:line="125" pos:column="45">errbuf<pos:position pos:line="125" pos:column="51"/></name></expr></argument>)<pos:position pos:line="125" pos:column="52"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="125" pos:column="53"/></argument_list></call></expr></argument>)<pos:position pos:line="125" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="125" pos:column="55"/></expr_stmt>
      <return pos:line="126" pos:column="7">return <expr><operator pos:line="126" pos:column="14">(<pos:position pos:line="126" pos:column="15"/></operator><operator pos:line="126" pos:column="15">-<pos:position pos:line="126" pos:column="16"/></operator><literal type="number" pos:line="126" pos:column="16">1<pos:position pos:line="126" pos:column="17"/></literal><operator pos:line="126" pos:column="17">)<pos:position pos:line="126" pos:column="18"/></operator></expr>;<pos:position pos:line="126" pos:column="19"/></return>
    }<pos:position pos:line="127" pos:column="6"/></block></then></if>
  }<pos:position pos:line="128" pos:column="4"/></block></then></if>
<cpp:endif pos:line="129" pos:column="1">#<cpp:directive pos:line="129" pos:column="2">endif<pos:position pos:line="129" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="129" pos:column="8">/* HAVE_IF_INDEXTONAME &amp;&amp; SO_BINDTODEVICE */</comment>

  <return pos:line="131" pos:column="3">return <expr><operator pos:line="131" pos:column="10">(<pos:position pos:line="131" pos:column="11"/></operator><literal type="number" pos:line="131" pos:column="11">0<pos:position pos:line="131" pos:column="12"/></literal><operator pos:line="131" pos:column="12">)<pos:position pos:line="131" pos:column="13"/></operator></expr>;<pos:position pos:line="131" pos:column="14"/></return>
}<pos:position pos:line="132" pos:column="2"/></block></function></unit>
