<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_2638_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">uc_get_names<pos:position pos:line="1" pos:column="17"/></name><parameter_list pos:line="1" pos:column="17">(<parameter><decl><type><name pos:line="1" pos:column="18">char<pos:position pos:line="1" pos:column="22"/></name> <modifier pos:line="1" pos:column="23">*<pos:position pos:line="1" pos:column="24"/></modifier><modifier pos:line="1" pos:column="24">*<pos:position pos:line="1" pos:column="25"/></modifier><modifier pos:line="1" pos:column="25">*<pos:position pos:line="1" pos:column="26"/></modifier></type><name pos:line="1" pos:column="26">ret_names<pos:position pos:line="1" pos:column="35"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="37">cdtime_t<pos:position pos:line="1" pos:column="45"/></name> <modifier pos:line="1" pos:column="46">*<pos:position pos:line="1" pos:column="47"/></modifier><modifier pos:line="1" pos:column="47">*<pos:position pos:line="1" pos:column="48"/></modifier></type><name pos:line="1" pos:column="48">ret_times<pos:position pos:line="1" pos:column="57"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="59">size_t<pos:position pos:line="1" pos:column="65"/></name> <modifier pos:line="1" pos:column="66">*<pos:position pos:line="1" pos:column="67"/></modifier></type><name pos:line="1" pos:column="67">ret_number<pos:position pos:line="1" pos:column="77"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="78"/></parameter_list> <block pos:line="1" pos:column="79">{
  <decl_stmt><decl><type><name pos:line="2" pos:column="3">c_avl_iterator_t<pos:position pos:line="2" pos:column="19"/></name> <modifier pos:line="2" pos:column="20">*<pos:position pos:line="2" pos:column="21"/></modifier></type><name pos:line="2" pos:column="21">iter<pos:position pos:line="2" pos:column="25"/></name></decl>;<pos:position pos:line="2" pos:column="26"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">char<pos:position pos:line="3" pos:column="7"/></name> <modifier pos:line="3" pos:column="8">*<pos:position pos:line="3" pos:column="9"/></modifier></type><name pos:line="3" pos:column="9">key<pos:position pos:line="3" pos:column="12"/></name></decl>;<pos:position pos:line="3" pos:column="13"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">cache_entry_t<pos:position pos:line="4" pos:column="16"/></name> <modifier pos:line="4" pos:column="17">*<pos:position pos:line="4" pos:column="18"/></modifier></type><name pos:line="4" pos:column="18">value<pos:position pos:line="4" pos:column="23"/></name></decl>;<pos:position pos:line="4" pos:column="24"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="6" pos:column="3">char<pos:position pos:line="6" pos:column="7"/></name> <modifier pos:line="6" pos:column="8">*<pos:position pos:line="6" pos:column="9"/></modifier><modifier pos:line="6" pos:column="9">*<pos:position pos:line="6" pos:column="10"/></modifier></type><name pos:line="6" pos:column="10">names<pos:position pos:line="6" pos:column="15"/></name> <init pos:line="6" pos:column="16">= <expr><name pos:line="6" pos:column="18">NULL<pos:position pos:line="6" pos:column="22"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="23"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">cdtime_t<pos:position pos:line="7" pos:column="11"/></name> <modifier pos:line="7" pos:column="12">*<pos:position pos:line="7" pos:column="13"/></modifier></type><name pos:line="7" pos:column="13">times<pos:position pos:line="7" pos:column="18"/></name> <init pos:line="7" pos:column="19">= <expr><name pos:line="7" pos:column="21">NULL<pos:position pos:line="7" pos:column="25"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="26"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">size_t<pos:position pos:line="8" pos:column="9"/></name></type> <name pos:line="8" pos:column="10">number<pos:position pos:line="8" pos:column="16"/></name> <init pos:line="8" pos:column="17">= <expr><literal type="number" pos:line="8" pos:column="19">0<pos:position pos:line="8" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="8" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">size_t<pos:position pos:line="9" pos:column="9"/></name></type> <name pos:line="9" pos:column="10">size_arrays<pos:position pos:line="9" pos:column="21"/></name> <init pos:line="9" pos:column="22">= <expr><literal type="number" pos:line="9" pos:column="24">0<pos:position pos:line="9" pos:column="25"/></literal></expr></init></decl>;<pos:position pos:line="9" pos:column="26"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="11" pos:column="3">int<pos:position pos:line="11" pos:column="6"/></name></type> <name pos:line="11" pos:column="7">status<pos:position pos:line="11" pos:column="13"/></name> <init pos:line="11" pos:column="14">= <expr><literal type="number" pos:line="11" pos:column="16">0<pos:position pos:line="11" pos:column="17"/></literal></expr></init></decl>;<pos:position pos:line="11" pos:column="18"/></decl_stmt>

  <if pos:line="13" pos:column="3">if <condition pos:line="13" pos:column="6">(<expr><operator pos:line="13" pos:column="7">(<pos:position pos:line="13" pos:column="8"/></operator><name pos:line="13" pos:column="8">ret_names<pos:position pos:line="13" pos:column="17"/></name> <operator pos:line="13" pos:column="18">==<pos:position pos:line="13" pos:column="20"/></operator> <name pos:line="13" pos:column="21">NULL<pos:position pos:line="13" pos:column="25"/></name><operator pos:line="13" pos:column="25">)<pos:position pos:line="13" pos:column="26"/></operator> <operator pos:line="13" pos:column="27">||<pos:position pos:line="13" pos:column="29"/></operator> <operator pos:line="13" pos:column="30">(<pos:position pos:line="13" pos:column="31"/></operator><name pos:line="13" pos:column="31">ret_number<pos:position pos:line="13" pos:column="41"/></name> <operator pos:line="13" pos:column="42">==<pos:position pos:line="13" pos:column="44"/></operator> <name pos:line="13" pos:column="45">NULL<pos:position pos:line="13" pos:column="49"/></name><operator pos:line="13" pos:column="49">)<pos:position pos:line="13" pos:column="50"/></operator></expr>)<pos:position pos:line="13" pos:column="51"/></condition><then pos:line="13" pos:column="51">
    <block type="pseudo"><return pos:line="14" pos:column="5">return <expr><operator pos:line="14" pos:column="12">-<pos:position pos:line="14" pos:column="13"/></operator><literal type="number" pos:line="14" pos:column="13">1<pos:position pos:line="14" pos:column="14"/></literal></expr>;<pos:position pos:line="14" pos:column="15"/></return></block></then></if>

  <expr_stmt><expr><call><name pos:line="16" pos:column="3">pthread_mutex_lock<pos:position pos:line="16" pos:column="21"/></name><argument_list pos:line="16" pos:column="21">(<argument><expr><operator pos:line="16" pos:column="22">&amp;<pos:position pos:line="16" pos:column="27"/></operator><name pos:line="16" pos:column="23">cache_lock<pos:position pos:line="16" pos:column="33"/></name></expr></argument>)<pos:position pos:line="16" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="35"/></expr_stmt>

  <expr_stmt><expr><name pos:line="18" pos:column="3">size_arrays<pos:position pos:line="18" pos:column="14"/></name> <operator pos:line="18" pos:column="15">=<pos:position pos:line="18" pos:column="16"/></operator> <operator pos:line="18" pos:column="17">(<pos:position pos:line="18" pos:column="18"/></operator><name pos:line="18" pos:column="18">size_t<pos:position pos:line="18" pos:column="24"/></name><operator pos:line="18" pos:column="24">)<pos:position pos:line="18" pos:column="25"/></operator><call><name pos:line="18" pos:column="25">c_avl_size<pos:position pos:line="18" pos:column="35"/></name><argument_list pos:line="18" pos:column="35">(<argument><expr><name pos:line="18" pos:column="36">cache_tree<pos:position pos:line="18" pos:column="46"/></name></expr></argument>)<pos:position pos:line="18" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="48"/></expr_stmt>
  <if pos:line="19" pos:column="3">if <condition pos:line="19" pos:column="6">(<expr><name pos:line="19" pos:column="7">size_arrays<pos:position pos:line="19" pos:column="18"/></name> <operator pos:line="19" pos:column="19">&lt;<pos:position pos:line="19" pos:column="23"/></operator> <literal type="number" pos:line="19" pos:column="21">1<pos:position pos:line="19" pos:column="22"/></literal></expr>)<pos:position pos:line="19" pos:column="23"/></condition><then pos:line="19" pos:column="23"> <block pos:line="19" pos:column="24">{
    <comment type="block" pos:line="20" pos:column="5">/* Handle the "no values" case here, to avoid the error message when
     * calloc() returns NULL. */</comment>
    <expr_stmt><expr><call><name pos:line="22" pos:column="5">pthread_mutex_unlock<pos:position pos:line="22" pos:column="25"/></name><argument_list pos:line="22" pos:column="25">(<argument><expr><operator pos:line="22" pos:column="26">&amp;<pos:position pos:line="22" pos:column="31"/></operator><name pos:line="22" pos:column="27">cache_lock<pos:position pos:line="22" pos:column="37"/></name></expr></argument>)<pos:position pos:line="22" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="39"/></expr_stmt>
    <return pos:line="23" pos:column="5">return <expr><literal type="number" pos:line="23" pos:column="12">0<pos:position pos:line="23" pos:column="13"/></literal></expr>;<pos:position pos:line="23" pos:column="14"/></return>
  }<pos:position pos:line="24" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="26" pos:column="3">names<pos:position pos:line="26" pos:column="8"/></name> <operator pos:line="26" pos:column="9">=<pos:position pos:line="26" pos:column="10"/></operator> <call><name pos:line="26" pos:column="11">calloc<pos:position pos:line="26" pos:column="17"/></name><argument_list pos:line="26" pos:column="17">(<argument><expr><name pos:line="26" pos:column="18">size_arrays<pos:position pos:line="26" pos:column="29"/></name></expr></argument>, <argument><expr><sizeof pos:line="26" pos:column="31">sizeof<argument_list pos:line="26" pos:column="37">(<argument><expr><operator pos:line="26" pos:column="38">*<pos:position pos:line="26" pos:column="39"/></operator><name pos:line="26" pos:column="39">names<pos:position pos:line="26" pos:column="44"/></name></expr></argument>)<pos:position pos:line="26" pos:column="45"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="26" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="47"/></expr_stmt>
  <expr_stmt><expr><name pos:line="27" pos:column="3">times<pos:position pos:line="27" pos:column="8"/></name> <operator pos:line="27" pos:column="9">=<pos:position pos:line="27" pos:column="10"/></operator> <call><name pos:line="27" pos:column="11">calloc<pos:position pos:line="27" pos:column="17"/></name><argument_list pos:line="27" pos:column="17">(<argument><expr><name pos:line="27" pos:column="18">size_arrays<pos:position pos:line="27" pos:column="29"/></name></expr></argument>, <argument><expr><sizeof pos:line="27" pos:column="31">sizeof<argument_list pos:line="27" pos:column="37">(<argument><expr><operator pos:line="27" pos:column="38">*<pos:position pos:line="27" pos:column="39"/></operator><name pos:line="27" pos:column="39">times<pos:position pos:line="27" pos:column="44"/></name></expr></argument>)<pos:position pos:line="27" pos:column="45"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="27" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="47"/></expr_stmt>
  <if pos:line="28" pos:column="3">if <condition pos:line="28" pos:column="6">(<expr><operator pos:line="28" pos:column="7">(<pos:position pos:line="28" pos:column="8"/></operator><name pos:line="28" pos:column="8">names<pos:position pos:line="28" pos:column="13"/></name> <operator pos:line="28" pos:column="14">==<pos:position pos:line="28" pos:column="16"/></operator> <name pos:line="28" pos:column="17">NULL<pos:position pos:line="28" pos:column="21"/></name><operator pos:line="28" pos:column="21">)<pos:position pos:line="28" pos:column="22"/></operator> <operator pos:line="28" pos:column="23">||<pos:position pos:line="28" pos:column="25"/></operator> <operator pos:line="28" pos:column="26">(<pos:position pos:line="28" pos:column="27"/></operator><name pos:line="28" pos:column="27">times<pos:position pos:line="28" pos:column="32"/></name> <operator pos:line="28" pos:column="33">==<pos:position pos:line="28" pos:column="35"/></operator> <name pos:line="28" pos:column="36">NULL<pos:position pos:line="28" pos:column="40"/></name><operator pos:line="28" pos:column="40">)<pos:position pos:line="28" pos:column="41"/></operator></expr>)<pos:position pos:line="28" pos:column="42"/></condition><then pos:line="28" pos:column="42"> <block pos:line="28" pos:column="43">{
    <expr_stmt><expr><call><name pos:line="29" pos:column="5">ERROR<pos:position pos:line="29" pos:column="10"/></name><argument_list pos:line="29" pos:column="10">(<argument><expr><literal type="string" pos:line="29" pos:column="11">"uc_get_names: calloc failed."<pos:position pos:line="29" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="43"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="30" pos:column="5">sfree<pos:position pos:line="30" pos:column="10"/></name><argument_list pos:line="30" pos:column="10">(<argument><expr><name pos:line="30" pos:column="11">names<pos:position pos:line="30" pos:column="16"/></name></expr></argument>)<pos:position pos:line="30" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="18"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="31" pos:column="5">sfree<pos:position pos:line="31" pos:column="10"/></name><argument_list pos:line="31" pos:column="10">(<argument><expr><name pos:line="31" pos:column="11">times<pos:position pos:line="31" pos:column="16"/></name></expr></argument>)<pos:position pos:line="31" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="18"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="32" pos:column="5">pthread_mutex_unlock<pos:position pos:line="32" pos:column="25"/></name><argument_list pos:line="32" pos:column="25">(<argument><expr><operator pos:line="32" pos:column="26">&amp;<pos:position pos:line="32" pos:column="31"/></operator><name pos:line="32" pos:column="27">cache_lock<pos:position pos:line="32" pos:column="37"/></name></expr></argument>)<pos:position pos:line="32" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="39"/></expr_stmt>
    <return pos:line="33" pos:column="5">return <expr><name pos:line="33" pos:column="12">ENOMEM<pos:position pos:line="33" pos:column="18"/></name></expr>;<pos:position pos:line="33" pos:column="19"/></return>
  }<pos:position pos:line="34" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="36" pos:column="3">iter<pos:position pos:line="36" pos:column="7"/></name> <operator pos:line="36" pos:column="8">=<pos:position pos:line="36" pos:column="9"/></operator> <call><name pos:line="36" pos:column="10">c_avl_get_iterator<pos:position pos:line="36" pos:column="28"/></name><argument_list pos:line="36" pos:column="28">(<argument><expr><name pos:line="36" pos:column="29">cache_tree<pos:position pos:line="36" pos:column="39"/></name></expr></argument>)<pos:position pos:line="36" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="41"/></expr_stmt>
  <while pos:line="37" pos:column="3">while <condition pos:line="37" pos:column="9">(<expr><call><name pos:line="37" pos:column="10">c_avl_iterator_next<pos:position pos:line="37" pos:column="29"/></name><argument_list pos:line="37" pos:column="29">(<argument><expr><name pos:line="37" pos:column="30">iter<pos:position pos:line="37" pos:column="34"/></name></expr></argument>, <argument><expr><operator pos:line="37" pos:column="36">(<pos:position pos:line="37" pos:column="37"/></operator><name pos:line="37" pos:column="37">void<pos:position pos:line="37" pos:column="41"/></name> <operator pos:line="37" pos:column="42">*<pos:position pos:line="37" pos:column="43"/></operator><operator pos:line="37" pos:column="43">)<pos:position pos:line="37" pos:column="44"/></operator><operator pos:line="37" pos:column="44">&amp;<pos:position pos:line="37" pos:column="49"/></operator><name pos:line="37" pos:column="45">key<pos:position pos:line="37" pos:column="48"/></name></expr></argument>, <argument><expr><operator pos:line="37" pos:column="50">(<pos:position pos:line="37" pos:column="51"/></operator><name pos:line="37" pos:column="51">void<pos:position pos:line="37" pos:column="55"/></name> <operator pos:line="37" pos:column="56">*<pos:position pos:line="37" pos:column="57"/></operator><operator pos:line="37" pos:column="57">)<pos:position pos:line="37" pos:column="58"/></operator><operator pos:line="37" pos:column="58">&amp;<pos:position pos:line="37" pos:column="63"/></operator><name pos:line="37" pos:column="59">value<pos:position pos:line="37" pos:column="64"/></name></expr></argument>)<pos:position pos:line="37" pos:column="65"/></argument_list></call> <operator pos:line="37" pos:column="66">==<pos:position pos:line="37" pos:column="68"/></operator> <literal type="number" pos:line="37" pos:column="69">0<pos:position pos:line="37" pos:column="70"/></literal></expr>)<pos:position pos:line="37" pos:column="71"/></condition> <block pos:line="37" pos:column="72">{
    <comment type="block" pos:line="38" pos:column="5">/* remove missing values when list values */</comment>
    <if pos:line="39" pos:column="5">if <condition pos:line="39" pos:column="8">(<expr><name><name pos:line="39" pos:column="9">value<pos:position pos:line="39" pos:column="14"/></name><operator pos:line="39" pos:column="14">-&gt;<pos:position pos:line="39" pos:column="19"/></operator><name pos:line="39" pos:column="16">state<pos:position pos:line="39" pos:column="21"/></name></name> <operator pos:line="39" pos:column="22">==<pos:position pos:line="39" pos:column="24"/></operator> <name pos:line="39" pos:column="25">STATE_MISSING<pos:position pos:line="39" pos:column="38"/></name></expr>)<pos:position pos:line="39" pos:column="39"/></condition><then pos:line="39" pos:column="39">
      <block type="pseudo"><continue pos:line="40" pos:column="7">continue;<pos:position pos:line="40" pos:column="16"/></continue></block></then></if>

    <comment type="block" pos:line="42" pos:column="5">/* c_avl_size does not return a number smaller than the number of elements
     * returned by c_avl_iterator_next. */</comment>
    <expr_stmt><expr><call><name pos:line="44" pos:column="5">assert<pos:position pos:line="44" pos:column="11"/></name><argument_list pos:line="44" pos:column="11">(<argument><expr><name pos:line="44" pos:column="12">number<pos:position pos:line="44" pos:column="18"/></name> <operator pos:line="44" pos:column="19">&lt;<pos:position pos:line="44" pos:column="23"/></operator> <name pos:line="44" pos:column="21">size_arrays<pos:position pos:line="44" pos:column="32"/></name></expr></argument>)<pos:position pos:line="44" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="34"/></expr_stmt>

    <if pos:line="46" pos:column="5">if <condition pos:line="46" pos:column="8">(<expr><name pos:line="46" pos:column="9">ret_times<pos:position pos:line="46" pos:column="18"/></name> <operator pos:line="46" pos:column="19">!=<pos:position pos:line="46" pos:column="21"/></operator> <name pos:line="46" pos:column="22">NULL<pos:position pos:line="46" pos:column="26"/></name></expr>)<pos:position pos:line="46" pos:column="27"/></condition><then pos:line="46" pos:column="27">
      <block type="pseudo"><expr_stmt><expr><name><name pos:line="47" pos:column="7">times<pos:position pos:line="47" pos:column="12"/></name><index pos:line="47" pos:column="12">[<expr><name pos:line="47" pos:column="13">number<pos:position pos:line="47" pos:column="19"/></name></expr>]<pos:position pos:line="47" pos:column="20"/></index></name> <operator pos:line="47" pos:column="21">=<pos:position pos:line="47" pos:column="22"/></operator> <name><name pos:line="47" pos:column="23">value<pos:position pos:line="47" pos:column="28"/></name><operator pos:line="47" pos:column="28">-&gt;<pos:position pos:line="47" pos:column="33"/></operator><name pos:line="47" pos:column="30">last_time<pos:position pos:line="47" pos:column="39"/></name></name></expr>;<pos:position pos:line="47" pos:column="40"/></expr_stmt></block></then></if>

    <expr_stmt><expr><name><name pos:line="49" pos:column="5">names<pos:position pos:line="49" pos:column="10"/></name><index pos:line="49" pos:column="10">[<expr><name pos:line="49" pos:column="11">number<pos:position pos:line="49" pos:column="17"/></name></expr>]<pos:position pos:line="49" pos:column="18"/></index></name> <operator pos:line="49" pos:column="19">=<pos:position pos:line="49" pos:column="20"/></operator> <call><name pos:line="49" pos:column="21">strdup<pos:position pos:line="49" pos:column="27"/></name><argument_list pos:line="49" pos:column="27">(<argument><expr><name pos:line="49" pos:column="28">key<pos:position pos:line="49" pos:column="31"/></name></expr></argument>)<pos:position pos:line="49" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="33"/></expr_stmt>
    <if pos:line="50" pos:column="5">if <condition pos:line="50" pos:column="8">(<expr><name><name pos:line="50" pos:column="9">names<pos:position pos:line="50" pos:column="14"/></name><index pos:line="50" pos:column="14">[<expr><name pos:line="50" pos:column="15">number<pos:position pos:line="50" pos:column="21"/></name></expr>]<pos:position pos:line="50" pos:column="22"/></index></name> <operator pos:line="50" pos:column="23">==<pos:position pos:line="50" pos:column="25"/></operator> <name pos:line="50" pos:column="26">NULL<pos:position pos:line="50" pos:column="30"/></name></expr>)<pos:position pos:line="50" pos:column="31"/></condition><then pos:line="50" pos:column="31"> <block pos:line="50" pos:column="32">{
      <expr_stmt><expr><name pos:line="51" pos:column="7">status<pos:position pos:line="51" pos:column="13"/></name> <operator pos:line="51" pos:column="14">=<pos:position pos:line="51" pos:column="15"/></operator> <operator pos:line="51" pos:column="16">-<pos:position pos:line="51" pos:column="17"/></operator><literal type="number" pos:line="51" pos:column="17">1<pos:position pos:line="51" pos:column="18"/></literal></expr>;<pos:position pos:line="51" pos:column="19"/></expr_stmt>
      <break pos:line="52" pos:column="7">break;<pos:position pos:line="52" pos:column="13"/></break>
    }<pos:position pos:line="53" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="55" pos:column="5">number<pos:position pos:line="55" pos:column="11"/></name><operator pos:line="55" pos:column="11">++<pos:position pos:line="55" pos:column="13"/></operator></expr>;<pos:position pos:line="55" pos:column="14"/></expr_stmt>
  }<pos:position pos:line="56" pos:column="4"/></block></while> <comment type="block" pos:line="56" pos:column="5">/* while (c_avl_iterator_next) */</comment>

  <expr_stmt><expr><call><name pos:line="58" pos:column="3">c_avl_iterator_destroy<pos:position pos:line="58" pos:column="25"/></name><argument_list pos:line="58" pos:column="25">(<argument><expr><name pos:line="58" pos:column="26">iter<pos:position pos:line="58" pos:column="30"/></name></expr></argument>)<pos:position pos:line="58" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="32"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="59" pos:column="3">pthread_mutex_unlock<pos:position pos:line="59" pos:column="23"/></name><argument_list pos:line="59" pos:column="23">(<argument><expr><operator pos:line="59" pos:column="24">&amp;<pos:position pos:line="59" pos:column="29"/></operator><name pos:line="59" pos:column="25">cache_lock<pos:position pos:line="59" pos:column="35"/></name></expr></argument>)<pos:position pos:line="59" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="37"/></expr_stmt>

  <if pos:line="61" pos:column="3">if <condition pos:line="61" pos:column="6">(<expr><name pos:line="61" pos:column="7">status<pos:position pos:line="61" pos:column="13"/></name> <operator pos:line="61" pos:column="14">!=<pos:position pos:line="61" pos:column="16"/></operator> <literal type="number" pos:line="61" pos:column="17">0<pos:position pos:line="61" pos:column="18"/></literal></expr>)<pos:position pos:line="61" pos:column="19"/></condition><then pos:line="61" pos:column="19"> <block pos:line="61" pos:column="20">{
    <for pos:line="62" pos:column="5">for <control pos:line="62" pos:column="9">(<init><decl><type><name pos:line="62" pos:column="10">size_t<pos:position pos:line="62" pos:column="16"/></name></type> <name pos:line="62" pos:column="17">i<pos:position pos:line="62" pos:column="18"/></name> <init pos:line="62" pos:column="19">= <expr><literal type="number" pos:line="62" pos:column="21">0<pos:position pos:line="62" pos:column="22"/></literal></expr></init></decl>;<pos:position pos:line="62" pos:column="23"/></init> <condition><expr><name pos:line="62" pos:column="24">i<pos:position pos:line="62" pos:column="25"/></name> <operator pos:line="62" pos:column="26">&lt;<pos:position pos:line="62" pos:column="30"/></operator> <name pos:line="62" pos:column="28">number<pos:position pos:line="62" pos:column="34"/></name></expr>;<pos:position pos:line="62" pos:column="35"/></condition> <incr><expr><name pos:line="62" pos:column="36">i<pos:position pos:line="62" pos:column="37"/></name><operator pos:line="62" pos:column="37">++<pos:position pos:line="62" pos:column="39"/></operator></expr></incr>)<pos:position pos:line="62" pos:column="40"/></control> <block pos:line="62" pos:column="41">{
      <expr_stmt><expr><call><name pos:line="63" pos:column="7">sfree<pos:position pos:line="63" pos:column="12"/></name><argument_list pos:line="63" pos:column="12">(<argument><expr><name><name pos:line="63" pos:column="13">names<pos:position pos:line="63" pos:column="18"/></name><index pos:line="63" pos:column="18">[<expr><name pos:line="63" pos:column="19">i<pos:position pos:line="63" pos:column="20"/></name></expr>]<pos:position pos:line="63" pos:column="21"/></index></name></expr></argument>)<pos:position pos:line="63" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="23"/></expr_stmt>
    }<pos:position pos:line="64" pos:column="6"/></block></for>
    <expr_stmt><expr><call><name pos:line="65" pos:column="5">sfree<pos:position pos:line="65" pos:column="10"/></name><argument_list pos:line="65" pos:column="10">(<argument><expr><name pos:line="65" pos:column="11">names<pos:position pos:line="65" pos:column="16"/></name></expr></argument>)<pos:position pos:line="65" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="18"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="66" pos:column="5">sfree<pos:position pos:line="66" pos:column="10"/></name><argument_list pos:line="66" pos:column="10">(<argument><expr><name pos:line="66" pos:column="11">times<pos:position pos:line="66" pos:column="16"/></name></expr></argument>)<pos:position pos:line="66" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="18"/></expr_stmt>

    <return pos:line="68" pos:column="5">return <expr><operator pos:line="68" pos:column="12">-<pos:position pos:line="68" pos:column="13"/></operator><literal type="number" pos:line="68" pos:column="13">1<pos:position pos:line="68" pos:column="14"/></literal></expr>;<pos:position pos:line="68" pos:column="15"/></return>
  }<pos:position pos:line="69" pos:column="4"/></block></then></if>

  <expr_stmt><expr><operator pos:line="71" pos:column="3">*<pos:position pos:line="71" pos:column="4"/></operator><name pos:line="71" pos:column="4">ret_names<pos:position pos:line="71" pos:column="13"/></name> <operator pos:line="71" pos:column="14">=<pos:position pos:line="71" pos:column="15"/></operator> <name pos:line="71" pos:column="16">names<pos:position pos:line="71" pos:column="21"/></name></expr>;<pos:position pos:line="71" pos:column="22"/></expr_stmt>
  <if pos:line="72" pos:column="3">if <condition pos:line="72" pos:column="6">(<expr><name pos:line="72" pos:column="7">ret_times<pos:position pos:line="72" pos:column="16"/></name> <operator pos:line="72" pos:column="17">!=<pos:position pos:line="72" pos:column="19"/></operator> <name pos:line="72" pos:column="20">NULL<pos:position pos:line="72" pos:column="24"/></name></expr>)<pos:position pos:line="72" pos:column="25"/></condition><then pos:line="72" pos:column="25">
    <block type="pseudo"><expr_stmt><expr><operator pos:line="73" pos:column="5">*<pos:position pos:line="73" pos:column="6"/></operator><name pos:line="73" pos:column="6">ret_times<pos:position pos:line="73" pos:column="15"/></name> <operator pos:line="73" pos:column="16">=<pos:position pos:line="73" pos:column="17"/></operator> <name pos:line="73" pos:column="18">times<pos:position pos:line="73" pos:column="23"/></name></expr>;<pos:position pos:line="73" pos:column="24"/></expr_stmt></block></then>
  <else pos:line="74" pos:column="3">else
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="75" pos:column="5">sfree<pos:position pos:line="75" pos:column="10"/></name><argument_list pos:line="75" pos:column="10">(<argument><expr><name pos:line="75" pos:column="11">times<pos:position pos:line="75" pos:column="16"/></name></expr></argument>)<pos:position pos:line="75" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="18"/></expr_stmt></block></else></if>
  <expr_stmt><expr><operator pos:line="76" pos:column="3">*<pos:position pos:line="76" pos:column="4"/></operator><name pos:line="76" pos:column="4">ret_number<pos:position pos:line="76" pos:column="14"/></name> <operator pos:line="76" pos:column="15">=<pos:position pos:line="76" pos:column="16"/></operator> <name pos:line="76" pos:column="17">number<pos:position pos:line="76" pos:column="23"/></name></expr>;<pos:position pos:line="76" pos:column="24"/></expr_stmt>

  <return pos:line="78" pos:column="3">return <expr><literal type="number" pos:line="78" pos:column="10">0<pos:position pos:line="78" pos:column="11"/></literal></expr>;<pos:position pos:line="78" pos:column="12"/></return>
}<pos:position pos:line="79" pos:column="2"/></block></function></unit>
