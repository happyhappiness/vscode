<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1775_collectd-4.10.4.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">ml_append<pos:position pos:line="1" pos:column="22"/></name> <parameter_list pos:line="1" pos:column="23">(<parameter><decl><type><name pos:line="1" pos:column="24">char<pos:position pos:line="1" pos:column="28"/></name> <modifier pos:line="1" pos:column="29">*<pos:position pos:line="1" pos:column="30"/></modifier></type><name pos:line="1" pos:column="30">string<pos:position pos:line="1" pos:column="36"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="37"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">len<pos:position pos:line="3" pos:column="16"/></name> <init pos:line="3" pos:column="17">= <expr><call><name pos:line="3" pos:column="19">strlen<pos:position pos:line="3" pos:column="25"/></name> <argument_list pos:line="3" pos:column="26">(<argument><expr><name pos:line="3" pos:column="27">string<pos:position pos:line="3" pos:column="33"/></name></expr></argument>)<pos:position pos:line="3" pos:column="34"/></argument_list></call></expr></init></decl>;<pos:position pos:line="3" pos:column="35"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">s<pos:position pos:line="4" pos:column="14"/></name></decl>;<pos:position pos:line="4" pos:column="15"/></decl_stmt>

	<if pos:line="6" pos:column="9">if <condition pos:line="6" pos:column="12">(<expr><name pos:line="6" pos:column="13">ml_free<pos:position pos:line="6" pos:column="20"/></name> <operator pos:line="6" pos:column="21">&lt;=<pos:position pos:line="6" pos:column="26"/></operator> <name pos:line="6" pos:column="24">len<pos:position pos:line="6" pos:column="27"/></name></expr>)<pos:position pos:line="6" pos:column="28"/></condition><then pos:line="6" pos:column="28"> <block pos:line="6" pos:column="29">{
		<expr_stmt><expr><name pos:line="7" pos:column="17">ml_len<pos:position pos:line="7" pos:column="23"/></name> <operator pos:line="7" pos:column="24">+=<pos:position pos:line="7" pos:column="26"/></operator> <name pos:line="7" pos:column="27">len<pos:position pos:line="7" pos:column="30"/></name> <operator pos:line="7" pos:column="31">-<pos:position pos:line="7" pos:column="32"/></operator> <name pos:line="7" pos:column="33">ml_free<pos:position pos:line="7" pos:column="40"/></name> <operator pos:line="7" pos:column="41">+<pos:position pos:line="7" pos:column="42"/></operator> <literal type="number" pos:line="7" pos:column="43">1<pos:position pos:line="7" pos:column="44"/></literal></expr>;<pos:position pos:line="7" pos:column="45"/></expr_stmt>
		<expr_stmt><expr><name pos:line="8" pos:column="17">ml_buffer<pos:position pos:line="8" pos:column="26"/></name> <operator pos:line="8" pos:column="27">=<pos:position pos:line="8" pos:column="28"/></operator> <operator pos:line="8" pos:column="29">(<pos:position pos:line="8" pos:column="30"/></operator><name pos:line="8" pos:column="30">char<pos:position pos:line="8" pos:column="34"/></name> <operator pos:line="8" pos:column="35">*<pos:position pos:line="8" pos:column="36"/></operator><operator pos:line="8" pos:column="36">)<pos:position pos:line="8" pos:column="37"/></operator><call><name pos:line="8" pos:column="37">realloc<pos:position pos:line="8" pos:column="44"/></name> <argument_list pos:line="8" pos:column="45">(<argument><expr><name pos:line="8" pos:column="46">ml_buffer<pos:position pos:line="8" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="57">ml_len<pos:position pos:line="8" pos:column="63"/></name></expr></argument>)<pos:position pos:line="8" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="65"/></expr_stmt>
		<if pos:line="9" pos:column="17">if <condition pos:line="9" pos:column="20">(<expr><name pos:line="9" pos:column="21">NULL<pos:position pos:line="9" pos:column="25"/></name> <operator pos:line="9" pos:column="26">==<pos:position pos:line="9" pos:column="28"/></operator> <name pos:line="9" pos:column="29">ml_buffer<pos:position pos:line="9" pos:column="38"/></name></expr>)<pos:position pos:line="9" pos:column="39"/></condition><then pos:line="9" pos:column="39">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="10" pos:column="25">YY_FATAL_ERROR<pos:position pos:line="10" pos:column="39"/></name> <argument_list pos:line="10" pos:column="40">(<argument><expr><literal type="string" pos:line="10" pos:column="41">"out of dynamic memory in ml_append"<pos:position pos:line="10" pos:column="77"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="79"/></expr_stmt></block></then></if>
	}<pos:position pos:line="11" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="13" pos:column="9">s<pos:position pos:line="13" pos:column="10"/></name> <operator pos:line="13" pos:column="11">=<pos:position pos:line="13" pos:column="12"/></operator> <call><name pos:line="13" pos:column="13">snprintf<pos:position pos:line="13" pos:column="21"/></name> <argument_list pos:line="13" pos:column="22">(<argument><expr><name pos:line="13" pos:column="23">ml_buffer<pos:position pos:line="13" pos:column="32"/></name> <operator pos:line="13" pos:column="33">+<pos:position pos:line="13" pos:column="34"/></operator> <name pos:line="13" pos:column="35">ml_pos<pos:position pos:line="13" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="43">ml_free<pos:position pos:line="13" pos:column="50"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="13" pos:column="52">"%s"<pos:position pos:line="13" pos:column="56"/></literal></expr></argument>, <argument><expr><name pos:line="13" pos:column="58">string<pos:position pos:line="13" pos:column="64"/></name></expr></argument>)<pos:position pos:line="13" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="66"/></expr_stmt>
	<if pos:line="14" pos:column="9">if <condition pos:line="14" pos:column="12">(<expr><operator pos:line="14" pos:column="13">(<pos:position pos:line="14" pos:column="14"/></operator><literal type="number" pos:line="14" pos:column="14">0<pos:position pos:line="14" pos:column="15"/></literal> <operator pos:line="14" pos:column="16">&gt;<pos:position pos:line="14" pos:column="20"/></operator> <name pos:line="14" pos:column="18">s<pos:position pos:line="14" pos:column="19"/></name><operator pos:line="14" pos:column="19">)<pos:position pos:line="14" pos:column="20"/></operator> <operator pos:line="14" pos:column="21">||<pos:position pos:line="14" pos:column="23"/></operator> <operator pos:line="14" pos:column="24">(<pos:position pos:line="14" pos:column="25"/></operator><name pos:line="14" pos:column="25">ml_free<pos:position pos:line="14" pos:column="32"/></name> <operator pos:line="14" pos:column="33">&lt;=<pos:position pos:line="14" pos:column="38"/></operator> <name pos:line="14" pos:column="36">s<pos:position pos:line="14" pos:column="37"/></name><operator pos:line="14" pos:column="37">)<pos:position pos:line="14" pos:column="38"/></operator></expr>)<pos:position pos:line="14" pos:column="39"/></condition><then pos:line="14" pos:column="39">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="15" pos:column="17">YY_FATAL_ERROR<pos:position pos:line="15" pos:column="31"/></name> <argument_list pos:line="15" pos:column="32">(<argument><expr><literal type="string" pos:line="15" pos:column="33">"failed to write to multiline buffer"<pos:position pos:line="15" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="72"/></expr_stmt></block></then></if>

	<expr_stmt><expr><name pos:line="17" pos:column="9">ml_pos<pos:position pos:line="17" pos:column="15"/></name> <operator pos:line="17" pos:column="16">+=<pos:position pos:line="17" pos:column="18"/></operator> <name pos:line="17" pos:column="19">s<pos:position pos:line="17" pos:column="20"/></name></expr>;<pos:position pos:line="17" pos:column="21"/></expr_stmt>
	<return pos:line="18" pos:column="9">return;<pos:position pos:line="18" pos:column="16"/></return>
}<pos:position pos:line="19" pos:column="2"/></block></function></unit>
