<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_579_collectd-5.6.2.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">char<pos:position pos:line="1" pos:column="12"/></name> <modifier pos:line="1" pos:column="13">*<pos:position pos:line="1" pos:column="14"/></modifier></type><name pos:line="1" pos:column="14">build_json_str_list<pos:position pos:line="1" pos:column="33"/></name><parameter_list pos:line="1" pos:column="33">(<parameter><decl><type><specifier pos:line="1" pos:column="34">const<pos:position pos:line="1" pos:column="39"/></specifier> <name pos:line="1" pos:column="40">char<pos:position pos:line="1" pos:column="44"/></name> <modifier pos:line="1" pos:column="45">*<pos:position pos:line="1" pos:column="46"/></modifier></type><name pos:line="1" pos:column="46">tag<pos:position pos:line="1" pos:column="49"/></name></decl></parameter>,
                                 <parameter><decl><type><name><name pos:line="2" pos:column="34">struct<pos:position pos:line="2" pos:column="40"/></name> <name pos:line="2" pos:column="41">str_list<pos:position pos:line="2" pos:column="49"/></name></name> <specifier pos:line="2" pos:column="50">const<pos:position pos:line="2" pos:column="55"/></specifier> <modifier pos:line="2" pos:column="56">*<pos:position pos:line="2" pos:column="57"/></modifier></type><name pos:line="2" pos:column="57">list<pos:position pos:line="2" pos:column="61"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="62"/></parameter_list> <comment type="block" pos:line="2" pos:column="63">/* {{{ */</comment>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">int<pos:position pos:line="4" pos:column="6"/></name></type> <name pos:line="4" pos:column="7">res<pos:position pos:line="4" pos:column="10"/></name></decl>;<pos:position pos:line="4" pos:column="11"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">char<pos:position pos:line="5" pos:column="7"/></name> <modifier pos:line="5" pos:column="8">*<pos:position pos:line="5" pos:column="9"/></modifier></type><name pos:line="5" pos:column="9">ret_str<pos:position pos:line="5" pos:column="16"/></name> <init pos:line="5" pos:column="17">= <expr><name pos:line="5" pos:column="19">NULL<pos:position pos:line="5" pos:column="23"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="24"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">char<pos:position pos:line="6" pos:column="7"/></name> <modifier pos:line="6" pos:column="8">*<pos:position pos:line="6" pos:column="9"/></modifier></type><name pos:line="6" pos:column="9">temp_str<pos:position pos:line="6" pos:column="17"/></name></decl>;<pos:position pos:line="6" pos:column="18"/></decl_stmt>
  <if pos:line="7" pos:column="3">if <condition pos:line="7" pos:column="6">(<expr><name><name pos:line="7" pos:column="7">list<pos:position pos:line="7" pos:column="11"/></name><operator pos:line="7" pos:column="11">-&gt;<pos:position pos:line="7" pos:column="16"/></operator><name pos:line="7" pos:column="13">nb_strs<pos:position pos:line="7" pos:column="20"/></name></name> <operator pos:line="7" pos:column="21">==<pos:position pos:line="7" pos:column="23"/></operator> <literal type="number" pos:line="7" pos:column="24">0<pos:position pos:line="7" pos:column="25"/></literal></expr>)<pos:position pos:line="7" pos:column="26"/></condition><then pos:line="7" pos:column="26"> <block pos:line="7" pos:column="27">{
    <expr_stmt><expr><name pos:line="8" pos:column="5">ret_str<pos:position pos:line="8" pos:column="12"/></name> <operator pos:line="8" pos:column="13">=<pos:position pos:line="8" pos:column="14"/></operator> <call><name pos:line="8" pos:column="15">malloc<pos:position pos:line="8" pos:column="21"/></name><argument_list pos:line="8" pos:column="21">(<argument><expr><sizeof pos:line="8" pos:column="22">sizeof<argument_list pos:line="8" pos:column="28">(<argument><expr><name pos:line="8" pos:column="29">char<pos:position pos:line="8" pos:column="33"/></name></expr></argument>)<pos:position pos:line="8" pos:column="34"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="8" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="36"/></expr_stmt>
    <if pos:line="9" pos:column="5">if <condition pos:line="9" pos:column="8">(<expr><name pos:line="9" pos:column="9">ret_str<pos:position pos:line="9" pos:column="16"/></name> <operator pos:line="9" pos:column="17">==<pos:position pos:line="9" pos:column="19"/></operator> <name pos:line="9" pos:column="20">NULL<pos:position pos:line="9" pos:column="24"/></name></expr>)<pos:position pos:line="9" pos:column="25"/></condition><then pos:line="9" pos:column="25"> <block pos:line="9" pos:column="26">{
      <expr_stmt><expr><call><name pos:line="10" pos:column="7">ERROR<pos:position pos:line="10" pos:column="12"/></name><argument_list pos:line="10" pos:column="12">(<argument><expr><literal type="string" pos:line="10" pos:column="13">"write_sensu plugin: Unable to alloc memory"<pos:position pos:line="10" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="59"/></expr_stmt>
      <return pos:line="11" pos:column="7">return <expr><name pos:line="11" pos:column="14">NULL<pos:position pos:line="11" pos:column="18"/></name></expr>;<pos:position pos:line="11" pos:column="19"/></return>
    }<pos:position pos:line="12" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name><name pos:line="13" pos:column="5">ret_str<pos:position pos:line="13" pos:column="12"/></name><index pos:line="13" pos:column="12">[<expr><literal type="number" pos:line="13" pos:column="13">0<pos:position pos:line="13" pos:column="14"/></literal></expr>]<pos:position pos:line="13" pos:column="15"/></index></name> <operator pos:line="13" pos:column="16">=<pos:position pos:line="13" pos:column="17"/></operator> <literal type="char" pos:line="13" pos:column="18">'\0'<pos:position pos:line="13" pos:column="22"/></literal></expr>;<pos:position pos:line="13" pos:column="23"/></expr_stmt>
  }<pos:position pos:line="14" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="16" pos:column="3">res<pos:position pos:line="16" pos:column="6"/></name> <operator pos:line="16" pos:column="7">=<pos:position pos:line="16" pos:column="8"/></operator> <call><name pos:line="16" pos:column="9">my_asprintf<pos:position pos:line="16" pos:column="20"/></name><argument_list pos:line="16" pos:column="20">(<argument><expr><operator pos:line="16" pos:column="21">&amp;<pos:position pos:line="16" pos:column="26"/></operator><name pos:line="16" pos:column="22">temp_str<pos:position pos:line="16" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="16" pos:column="32">"\"%s\": [\"%s\""<pos:position pos:line="16" pos:column="49"/></literal></expr></argument>, <argument><expr><name pos:line="16" pos:column="51">tag<pos:position pos:line="16" pos:column="54"/></name></expr></argument>, <argument><expr><name><name pos:line="16" pos:column="56">list<pos:position pos:line="16" pos:column="60"/></name><operator pos:line="16" pos:column="60">-&gt;<pos:position pos:line="16" pos:column="65"/></operator><name pos:line="16" pos:column="62">strs<pos:position pos:line="16" pos:column="66"/></name><index pos:line="16" pos:column="66">[<expr><literal type="number" pos:line="16" pos:column="67">0<pos:position pos:line="16" pos:column="68"/></literal></expr>]<pos:position pos:line="16" pos:column="69"/></index></name></expr></argument>)<pos:position pos:line="16" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="71"/></expr_stmt>
  <if pos:line="17" pos:column="3">if <condition pos:line="17" pos:column="6">(<expr><name pos:line="17" pos:column="7">res<pos:position pos:line="17" pos:column="10"/></name> <operator pos:line="17" pos:column="11">==<pos:position pos:line="17" pos:column="13"/></operator> <operator pos:line="17" pos:column="14">-<pos:position pos:line="17" pos:column="15"/></operator><literal type="number" pos:line="17" pos:column="15">1<pos:position pos:line="17" pos:column="16"/></literal></expr>)<pos:position pos:line="17" pos:column="17"/></condition><then pos:line="17" pos:column="17"> <block pos:line="17" pos:column="18">{
    <expr_stmt><expr><call><name pos:line="18" pos:column="5">ERROR<pos:position pos:line="18" pos:column="10"/></name><argument_list pos:line="18" pos:column="10">(<argument><expr><literal type="string" pos:line="18" pos:column="11">"write_sensu plugin: Unable to alloc memory"<pos:position pos:line="18" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="57"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="19" pos:column="5">free<pos:position pos:line="19" pos:column="9"/></name><argument_list pos:line="19" pos:column="9">(<argument><expr><name pos:line="19" pos:column="10">ret_str<pos:position pos:line="19" pos:column="17"/></name></expr></argument>)<pos:position pos:line="19" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="19"/></expr_stmt>
    <return pos:line="20" pos:column="5">return <expr><name pos:line="20" pos:column="12">NULL<pos:position pos:line="20" pos:column="16"/></name></expr>;<pos:position pos:line="20" pos:column="17"/></return>
  }<pos:position pos:line="21" pos:column="4"/></block></then></if>
  <for pos:line="22" pos:column="3">for <control pos:line="22" pos:column="7">(<init><decl><type><name pos:line="22" pos:column="8">int<pos:position pos:line="22" pos:column="11"/></name></type> <name pos:line="22" pos:column="12">i<pos:position pos:line="22" pos:column="13"/></name> <init pos:line="22" pos:column="14">= <expr><literal type="number" pos:line="22" pos:column="16">1<pos:position pos:line="22" pos:column="17"/></literal></expr></init></decl>;<pos:position pos:line="22" pos:column="18"/></init> <condition><expr><name pos:line="22" pos:column="19">i<pos:position pos:line="22" pos:column="20"/></name> <operator pos:line="22" pos:column="21">&lt;<pos:position pos:line="22" pos:column="25"/></operator> <name><name pos:line="22" pos:column="23">list<pos:position pos:line="22" pos:column="27"/></name><operator pos:line="22" pos:column="27">-&gt;<pos:position pos:line="22" pos:column="32"/></operator><name pos:line="22" pos:column="29">nb_strs<pos:position pos:line="22" pos:column="36"/></name></name></expr>;<pos:position pos:line="22" pos:column="37"/></condition> <incr><expr><name pos:line="22" pos:column="38">i<pos:position pos:line="22" pos:column="39"/></name><operator pos:line="22" pos:column="39">++<pos:position pos:line="22" pos:column="41"/></operator></expr></incr>)<pos:position pos:line="22" pos:column="42"/></control> <block pos:line="22" pos:column="43">{
    <expr_stmt><expr><name pos:line="23" pos:column="5">res<pos:position pos:line="23" pos:column="8"/></name> <operator pos:line="23" pos:column="9">=<pos:position pos:line="23" pos:column="10"/></operator> <call><name pos:line="23" pos:column="11">my_asprintf<pos:position pos:line="23" pos:column="22"/></name><argument_list pos:line="23" pos:column="22">(<argument><expr><operator pos:line="23" pos:column="23">&amp;<pos:position pos:line="23" pos:column="28"/></operator><name pos:line="23" pos:column="24">ret_str<pos:position pos:line="23" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="23" pos:column="33">"%s, \"%s\""<pos:position pos:line="23" pos:column="45"/></literal></expr></argument>, <argument><expr><name pos:line="23" pos:column="47">temp_str<pos:position pos:line="23" pos:column="55"/></name></expr></argument>, <argument><expr><name><name pos:line="23" pos:column="57">list<pos:position pos:line="23" pos:column="61"/></name><operator pos:line="23" pos:column="61">-&gt;<pos:position pos:line="23" pos:column="66"/></operator><name pos:line="23" pos:column="63">strs<pos:position pos:line="23" pos:column="67"/></name><index pos:line="23" pos:column="67">[<expr><name pos:line="23" pos:column="68">i<pos:position pos:line="23" pos:column="69"/></name></expr>]<pos:position pos:line="23" pos:column="70"/></index></name></expr></argument>)<pos:position pos:line="23" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="72"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="24" pos:column="5">free<pos:position pos:line="24" pos:column="9"/></name><argument_list pos:line="24" pos:column="9">(<argument><expr><name pos:line="24" pos:column="10">temp_str<pos:position pos:line="24" pos:column="18"/></name></expr></argument>)<pos:position pos:line="24" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="20"/></expr_stmt>
    <if pos:line="25" pos:column="5">if <condition pos:line="25" pos:column="8">(<expr><name pos:line="25" pos:column="9">res<pos:position pos:line="25" pos:column="12"/></name> <operator pos:line="25" pos:column="13">==<pos:position pos:line="25" pos:column="15"/></operator> <operator pos:line="25" pos:column="16">-<pos:position pos:line="25" pos:column="17"/></operator><literal type="number" pos:line="25" pos:column="17">1<pos:position pos:line="25" pos:column="18"/></literal></expr>)<pos:position pos:line="25" pos:column="19"/></condition><then pos:line="25" pos:column="19"> <block pos:line="25" pos:column="20">{
      <expr_stmt><expr><call><name pos:line="26" pos:column="7">ERROR<pos:position pos:line="26" pos:column="12"/></name><argument_list pos:line="26" pos:column="12">(<argument><expr><literal type="string" pos:line="26" pos:column="13">"write_sensu plugin: Unable to alloc memory"<pos:position pos:line="26" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="59"/></expr_stmt>
      <return pos:line="27" pos:column="7">return <expr><name pos:line="27" pos:column="14">NULL<pos:position pos:line="27" pos:column="18"/></name></expr>;<pos:position pos:line="27" pos:column="19"/></return>
    }<pos:position pos:line="28" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="29" pos:column="5">temp_str<pos:position pos:line="29" pos:column="13"/></name> <operator pos:line="29" pos:column="14">=<pos:position pos:line="29" pos:column="15"/></operator> <name pos:line="29" pos:column="16">ret_str<pos:position pos:line="29" pos:column="23"/></name></expr>;<pos:position pos:line="29" pos:column="24"/></expr_stmt>
  }<pos:position pos:line="30" pos:column="4"/></block></for>
  <expr_stmt><expr><name pos:line="31" pos:column="3">res<pos:position pos:line="31" pos:column="6"/></name> <operator pos:line="31" pos:column="7">=<pos:position pos:line="31" pos:column="8"/></operator> <call><name pos:line="31" pos:column="9">my_asprintf<pos:position pos:line="31" pos:column="20"/></name><argument_list pos:line="31" pos:column="20">(<argument><expr><operator pos:line="31" pos:column="21">&amp;<pos:position pos:line="31" pos:column="26"/></operator><name pos:line="31" pos:column="22">ret_str<pos:position pos:line="31" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="31" pos:column="31">"%s]"<pos:position pos:line="31" pos:column="36"/></literal></expr></argument>, <argument><expr><name pos:line="31" pos:column="38">temp_str<pos:position pos:line="31" pos:column="46"/></name></expr></argument>)<pos:position pos:line="31" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="48"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="32" pos:column="3">free<pos:position pos:line="32" pos:column="7"/></name><argument_list pos:line="32" pos:column="7">(<argument><expr><name pos:line="32" pos:column="8">temp_str<pos:position pos:line="32" pos:column="16"/></name></expr></argument>)<pos:position pos:line="32" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="18"/></expr_stmt>
  <if pos:line="33" pos:column="3">if <condition pos:line="33" pos:column="6">(<expr><name pos:line="33" pos:column="7">res<pos:position pos:line="33" pos:column="10"/></name> <operator pos:line="33" pos:column="11">==<pos:position pos:line="33" pos:column="13"/></operator> <operator pos:line="33" pos:column="14">-<pos:position pos:line="33" pos:column="15"/></operator><literal type="number" pos:line="33" pos:column="15">1<pos:position pos:line="33" pos:column="16"/></literal></expr>)<pos:position pos:line="33" pos:column="17"/></condition><then pos:line="33" pos:column="17"> <block pos:line="33" pos:column="18">{
    <expr_stmt><expr><call><name pos:line="34" pos:column="5">ERROR<pos:position pos:line="34" pos:column="10"/></name><argument_list pos:line="34" pos:column="10">(<argument><expr><literal type="string" pos:line="34" pos:column="11">"write_sensu plugin: Unable to alloc memory"<pos:position pos:line="34" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="57"/></expr_stmt>
    <return pos:line="35" pos:column="5">return <expr><name pos:line="35" pos:column="12">NULL<pos:position pos:line="35" pos:column="16"/></name></expr>;<pos:position pos:line="35" pos:column="17"/></return>
  }<pos:position pos:line="36" pos:column="4"/></block></then></if>

  <return pos:line="38" pos:column="3">return <expr><name pos:line="38" pos:column="10">ret_str<pos:position pos:line="38" pos:column="17"/></name></expr>;<pos:position pos:line="38" pos:column="18"/></return>
}<pos:position pos:line="39" pos:column="2"/></block></function></unit>
