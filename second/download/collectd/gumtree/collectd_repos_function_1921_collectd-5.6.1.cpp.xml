<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1921_collectd-5.6.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">parse_part_encr_aes256<pos:position pos:line="1" pos:column="34"/></name> <parameter_list pos:line="1" pos:column="35">(<parameter><decl><type><name pos:line="1" pos:column="36">sockent_t<pos:position pos:line="1" pos:column="45"/></name> <modifier pos:line="1" pos:column="46">*<pos:position pos:line="1" pos:column="47"/></modifier></type><name pos:line="1" pos:column="47">se<pos:position pos:line="1" pos:column="49"/></name></decl></parameter>, <comment type="block" pos:line="1" pos:column="51">/* {{{ */</comment>
		<parameter><decl><type><name pos:line="2" pos:column="17">void<pos:position pos:line="2" pos:column="21"/></name> <modifier pos:line="2" pos:column="22">*<pos:position pos:line="2" pos:column="23"/></modifier><modifier pos:line="2" pos:column="23">*<pos:position pos:line="2" pos:column="24"/></modifier></type><name pos:line="2" pos:column="24">ret_buffer<pos:position pos:line="2" pos:column="34"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="36">size_t<pos:position pos:line="2" pos:column="42"/></name> <modifier pos:line="2" pos:column="43">*<pos:position pos:line="2" pos:column="44"/></modifier></type><name pos:line="2" pos:column="44">ret_buffer_len<pos:position pos:line="2" pos:column="58"/></name></decl></parameter>,
		<parameter><decl><type><name pos:line="3" pos:column="17">int<pos:position pos:line="3" pos:column="20"/></name></type> <name pos:line="3" pos:column="21">flags<pos:position pos:line="3" pos:column="26"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="27"/></parameter_list>
<block pos:line="4" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">char<pos:position pos:line="5" pos:column="7"/></name>  <modifier pos:line="5" pos:column="9">*<pos:position pos:line="5" pos:column="10"/></modifier></type><name pos:line="5" pos:column="10">buffer<pos:position pos:line="5" pos:column="16"/></name> <init pos:line="5" pos:column="17">= <expr><operator pos:line="5" pos:column="19">*<pos:position pos:line="5" pos:column="20"/></operator><name pos:line="5" pos:column="20">ret_buffer<pos:position pos:line="5" pos:column="30"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="31"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">size_t<pos:position pos:line="6" pos:column="9"/></name></type> <name pos:line="6" pos:column="10">buffer_len<pos:position pos:line="6" pos:column="20"/></name> <init pos:line="6" pos:column="21">= <expr><operator pos:line="6" pos:column="23">*<pos:position pos:line="6" pos:column="24"/></operator><name pos:line="6" pos:column="24">ret_buffer_len<pos:position pos:line="6" pos:column="38"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="39"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">size_t<pos:position pos:line="7" pos:column="9"/></name></type> <name pos:line="7" pos:column="10">payload_len<pos:position pos:line="7" pos:column="21"/></name></decl>;<pos:position pos:line="7" pos:column="22"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">size_t<pos:position pos:line="8" pos:column="9"/></name></type> <name pos:line="8" pos:column="10">part_size<pos:position pos:line="8" pos:column="19"/></name></decl>;<pos:position pos:line="8" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">size_t<pos:position pos:line="9" pos:column="9"/></name></type> <name pos:line="9" pos:column="10">buffer_offset<pos:position pos:line="9" pos:column="23"/></name></decl>;<pos:position pos:line="9" pos:column="24"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">uint16_t<pos:position pos:line="10" pos:column="11"/></name></type> <name pos:line="10" pos:column="12">username_len<pos:position pos:line="10" pos:column="24"/></name></decl>;<pos:position pos:line="10" pos:column="25"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="11" pos:column="3">part_encryption_aes256_t<pos:position pos:line="11" pos:column="27"/></name></type> <name pos:line="11" pos:column="28">pea<pos:position pos:line="11" pos:column="31"/></name></decl>;<pos:position pos:line="11" pos:column="32"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="12" pos:column="3">unsigned<pos:position pos:line="12" pos:column="11"/></name> <name pos:line="12" pos:column="12">char<pos:position pos:line="12" pos:column="16"/></name></type> <name><name pos:line="12" pos:column="17">hash<pos:position pos:line="12" pos:column="21"/></name><index pos:line="12" pos:column="21">[<expr><sizeof pos:line="12" pos:column="22">sizeof <argument_list pos:line="12" pos:column="29">(<argument><expr><name><name pos:line="12" pos:column="30">pea<pos:position pos:line="12" pos:column="33"/></name><operator pos:line="12" pos:column="33">.<pos:position pos:line="12" pos:column="34"/></operator><name pos:line="12" pos:column="34">hash<pos:position pos:line="12" pos:column="38"/></name></name></expr></argument>)<pos:position pos:line="12" pos:column="39"/></argument_list></sizeof></expr>]<pos:position pos:line="12" pos:column="40"/></index></name> <init pos:line="12" pos:column="41">= <expr><block pos:line="12" pos:column="43">{ <expr><literal type="number" pos:line="12" pos:column="45">0<pos:position pos:line="12" pos:column="46"/></literal></expr> }<pos:position pos:line="12" pos:column="48"/></block></expr></init></decl>;<pos:position pos:line="12" pos:column="49"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="14" pos:column="3">gcry_cipher_hd_t<pos:position pos:line="14" pos:column="19"/></name></type> <name pos:line="14" pos:column="20">cypher<pos:position pos:line="14" pos:column="26"/></name></decl>;<pos:position pos:line="14" pos:column="27"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="15" pos:column="3">gcry_error_t<pos:position pos:line="15" pos:column="15"/></name></type> <name pos:line="15" pos:column="16">err<pos:position pos:line="15" pos:column="19"/></name></decl>;<pos:position pos:line="15" pos:column="20"/></decl_stmt>

  <comment type="block" pos:line="17" pos:column="3">/* Make sure at least the header if available. */</comment>
  <if pos:line="18" pos:column="3">if <condition pos:line="18" pos:column="6">(<expr><name pos:line="18" pos:column="7">buffer_len<pos:position pos:line="18" pos:column="17"/></name> <operator pos:line="18" pos:column="18">&lt;=<pos:position pos:line="18" pos:column="23"/></operator> <name pos:line="18" pos:column="21">PART_ENCRYPTION_AES256_SIZE<pos:position pos:line="18" pos:column="48"/></name></expr>)<pos:position pos:line="18" pos:column="49"/></condition><then pos:line="18" pos:column="49">
  <block pos:line="19" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="20" pos:column="5">NOTICE<pos:position pos:line="20" pos:column="11"/></name> <argument_list pos:line="20" pos:column="12">(<argument><expr><literal type="string" pos:line="20" pos:column="13">"network plugin: parse_part_encr_aes256: "<pos:position pos:line="20" pos:column="55"/></literal>
        <literal type="string" pos:line="21" pos:column="9">"Discarding short packet."<pos:position pos:line="21" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="37"/></expr_stmt>
    <return pos:line="22" pos:column="5">return <expr><operator pos:line="22" pos:column="12">(<pos:position pos:line="22" pos:column="13"/></operator><operator pos:line="22" pos:column="13">-<pos:position pos:line="22" pos:column="14"/></operator><literal type="number" pos:line="22" pos:column="14">1<pos:position pos:line="22" pos:column="15"/></literal><operator pos:line="22" pos:column="15">)<pos:position pos:line="22" pos:column="16"/></operator></expr>;<pos:position pos:line="22" pos:column="17"/></return>
  }<pos:position pos:line="23" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="25" pos:column="3">buffer_offset<pos:position pos:line="25" pos:column="16"/></name> <operator pos:line="25" pos:column="17">=<pos:position pos:line="25" pos:column="18"/></operator> <literal type="number" pos:line="25" pos:column="19">0<pos:position pos:line="25" pos:column="20"/></literal></expr>;<pos:position pos:line="25" pos:column="21"/></expr_stmt>

  <comment type="block" pos:line="27" pos:column="3">/* Copy the unencrypted information into `pea'. */</comment>
  <expr_stmt><expr><call><name pos:line="28" pos:column="3">BUFFER_READ<pos:position pos:line="28" pos:column="14"/></name> <argument_list pos:line="28" pos:column="15">(<argument><expr><operator pos:line="28" pos:column="16">&amp;<pos:position pos:line="28" pos:column="21"/></operator><name><name pos:line="28" pos:column="17">pea<pos:position pos:line="28" pos:column="20"/></name><operator pos:line="28" pos:column="20">.<pos:position pos:line="28" pos:column="21"/></operator><name pos:line="28" pos:column="21">head<pos:position pos:line="28" pos:column="25"/></name><operator pos:line="28" pos:column="25">.<pos:position pos:line="28" pos:column="26"/></operator><name pos:line="28" pos:column="26">type<pos:position pos:line="28" pos:column="30"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="28" pos:column="32">sizeof <argument_list pos:line="28" pos:column="39">(<argument><expr><name><name pos:line="28" pos:column="40">pea<pos:position pos:line="28" pos:column="43"/></name><operator pos:line="28" pos:column="43">.<pos:position pos:line="28" pos:column="44"/></operator><name pos:line="28" pos:column="44">head<pos:position pos:line="28" pos:column="48"/></name><operator pos:line="28" pos:column="48">.<pos:position pos:line="28" pos:column="49"/></operator><name pos:line="28" pos:column="49">type<pos:position pos:line="28" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="28" pos:column="54"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="28" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="56"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="29" pos:column="3">BUFFER_READ<pos:position pos:line="29" pos:column="14"/></name> <argument_list pos:line="29" pos:column="15">(<argument><expr><operator pos:line="29" pos:column="16">&amp;<pos:position pos:line="29" pos:column="21"/></operator><name><name pos:line="29" pos:column="17">pea<pos:position pos:line="29" pos:column="20"/></name><operator pos:line="29" pos:column="20">.<pos:position pos:line="29" pos:column="21"/></operator><name pos:line="29" pos:column="21">head<pos:position pos:line="29" pos:column="25"/></name><operator pos:line="29" pos:column="25">.<pos:position pos:line="29" pos:column="26"/></operator><name pos:line="29" pos:column="26">length<pos:position pos:line="29" pos:column="32"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="29" pos:column="34">sizeof <argument_list pos:line="29" pos:column="41">(<argument><expr><name><name pos:line="29" pos:column="42">pea<pos:position pos:line="29" pos:column="45"/></name><operator pos:line="29" pos:column="45">.<pos:position pos:line="29" pos:column="46"/></operator><name pos:line="29" pos:column="46">head<pos:position pos:line="29" pos:column="50"/></name><operator pos:line="29" pos:column="50">.<pos:position pos:line="29" pos:column="51"/></operator><name pos:line="29" pos:column="51">length<pos:position pos:line="29" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="29" pos:column="58"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="29" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="60"/></expr_stmt>

  <comment type="block" pos:line="31" pos:column="3">/* Check the `part size'. */</comment>
  <expr_stmt><expr><name pos:line="32" pos:column="3">part_size<pos:position pos:line="32" pos:column="12"/></name> <operator pos:line="32" pos:column="13">=<pos:position pos:line="32" pos:column="14"/></operator> <call><name pos:line="32" pos:column="15">ntohs<pos:position pos:line="32" pos:column="20"/></name> <argument_list pos:line="32" pos:column="21">(<argument><expr><name><name pos:line="32" pos:column="22">pea<pos:position pos:line="32" pos:column="25"/></name><operator pos:line="32" pos:column="25">.<pos:position pos:line="32" pos:column="26"/></operator><name pos:line="32" pos:column="26">head<pos:position pos:line="32" pos:column="30"/></name><operator pos:line="32" pos:column="30">.<pos:position pos:line="32" pos:column="31"/></operator><name pos:line="32" pos:column="31">length<pos:position pos:line="32" pos:column="37"/></name></name></expr></argument>)<pos:position pos:line="32" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="39"/></expr_stmt>
  <if pos:line="33" pos:column="3">if <condition pos:line="33" pos:column="6">(<expr><operator pos:line="33" pos:column="7">(<pos:position pos:line="33" pos:column="8"/></operator><name pos:line="33" pos:column="8">part_size<pos:position pos:line="33" pos:column="17"/></name> <operator pos:line="33" pos:column="18">&lt;=<pos:position pos:line="33" pos:column="23"/></operator> <name pos:line="33" pos:column="21">PART_ENCRYPTION_AES256_SIZE<pos:position pos:line="33" pos:column="48"/></name><operator pos:line="33" pos:column="48">)<pos:position pos:line="33" pos:column="49"/></operator>
      <operator pos:line="34" pos:column="7">||<pos:position pos:line="34" pos:column="9"/></operator> <operator pos:line="34" pos:column="10">(<pos:position pos:line="34" pos:column="11"/></operator><name pos:line="34" pos:column="11">part_size<pos:position pos:line="34" pos:column="20"/></name> <operator pos:line="34" pos:column="21">&gt;<pos:position pos:line="34" pos:column="25"/></operator> <name pos:line="34" pos:column="23">buffer_len<pos:position pos:line="34" pos:column="33"/></name><operator pos:line="34" pos:column="33">)<pos:position pos:line="34" pos:column="34"/></operator></expr>)<pos:position pos:line="34" pos:column="35"/></condition><then pos:line="34" pos:column="35">
  <block pos:line="35" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="36" pos:column="5">NOTICE<pos:position pos:line="36" pos:column="11"/></name> <argument_list pos:line="36" pos:column="12">(<argument><expr><literal type="string" pos:line="36" pos:column="13">"network plugin: parse_part_encr_aes256: "<pos:position pos:line="36" pos:column="55"/></literal>
        <literal type="string" pos:line="37" pos:column="9">"Discarding part with invalid size."<pos:position pos:line="37" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="37" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="47"/></expr_stmt>
    <return pos:line="38" pos:column="5">return <expr><operator pos:line="38" pos:column="12">(<pos:position pos:line="38" pos:column="13"/></operator><operator pos:line="38" pos:column="13">-<pos:position pos:line="38" pos:column="14"/></operator><literal type="number" pos:line="38" pos:column="14">1<pos:position pos:line="38" pos:column="15"/></literal><operator pos:line="38" pos:column="15">)<pos:position pos:line="38" pos:column="16"/></operator></expr>;<pos:position pos:line="38" pos:column="17"/></return>
  }<pos:position pos:line="39" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="41" pos:column="3">/* Read the username */</comment>
  <expr_stmt><expr><call><name pos:line="42" pos:column="3">BUFFER_READ<pos:position pos:line="42" pos:column="14"/></name> <argument_list pos:line="42" pos:column="15">(<argument><expr><operator pos:line="42" pos:column="16">&amp;<pos:position pos:line="42" pos:column="21"/></operator><name pos:line="42" pos:column="17">username_len<pos:position pos:line="42" pos:column="29"/></name></expr></argument>, <argument><expr><sizeof pos:line="42" pos:column="31">sizeof <argument_list pos:line="42" pos:column="38">(<argument><expr><name pos:line="42" pos:column="39">username_len<pos:position pos:line="42" pos:column="51"/></name></expr></argument>)<pos:position pos:line="42" pos:column="52"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="42" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="54"/></expr_stmt>
  <expr_stmt><expr><name pos:line="43" pos:column="3">username_len<pos:position pos:line="43" pos:column="15"/></name> <operator pos:line="43" pos:column="16">=<pos:position pos:line="43" pos:column="17"/></operator> <call><name pos:line="43" pos:column="18">ntohs<pos:position pos:line="43" pos:column="23"/></name> <argument_list pos:line="43" pos:column="24">(<argument><expr><name pos:line="43" pos:column="25">username_len<pos:position pos:line="43" pos:column="37"/></name></expr></argument>)<pos:position pos:line="43" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="39"/></expr_stmt>

  <if pos:line="45" pos:column="3">if <condition pos:line="45" pos:column="6">(<expr><operator pos:line="45" pos:column="7">(<pos:position pos:line="45" pos:column="8"/></operator><name pos:line="45" pos:column="8">username_len<pos:position pos:line="45" pos:column="20"/></name> <operator pos:line="45" pos:column="21">==<pos:position pos:line="45" pos:column="23"/></operator> <literal type="number" pos:line="45" pos:column="24">0<pos:position pos:line="45" pos:column="25"/></literal><operator pos:line="45" pos:column="25">)<pos:position pos:line="45" pos:column="26"/></operator>
      <operator pos:line="46" pos:column="7">||<pos:position pos:line="46" pos:column="9"/></operator> <operator pos:line="46" pos:column="10">(<pos:position pos:line="46" pos:column="11"/></operator><name pos:line="46" pos:column="11">username_len<pos:position pos:line="46" pos:column="23"/></name> <operator pos:line="46" pos:column="24">&gt;<pos:position pos:line="46" pos:column="28"/></operator> <operator pos:line="46" pos:column="26">(<pos:position pos:line="46" pos:column="27"/></operator><name pos:line="46" pos:column="27">part_size<pos:position pos:line="46" pos:column="36"/></name> <operator pos:line="46" pos:column="37">-<pos:position pos:line="46" pos:column="38"/></operator> <operator pos:line="46" pos:column="39">(<pos:position pos:line="46" pos:column="40"/></operator><name pos:line="46" pos:column="40">PART_ENCRYPTION_AES256_SIZE<pos:position pos:line="46" pos:column="67"/></name> <operator pos:line="46" pos:column="68">+<pos:position pos:line="46" pos:column="69"/></operator> <literal type="number" pos:line="46" pos:column="70">1<pos:position pos:line="46" pos:column="71"/></literal><operator pos:line="46" pos:column="71">)<pos:position pos:line="46" pos:column="72"/></operator><operator pos:line="46" pos:column="72">)<pos:position pos:line="46" pos:column="73"/></operator><operator pos:line="46" pos:column="73">)<pos:position pos:line="46" pos:column="74"/></operator></expr>)<pos:position pos:line="46" pos:column="75"/></condition><then pos:line="46" pos:column="75">
  <block pos:line="47" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="48" pos:column="5">NOTICE<pos:position pos:line="48" pos:column="11"/></name> <argument_list pos:line="48" pos:column="12">(<argument><expr><literal type="string" pos:line="48" pos:column="13">"network plugin: parse_part_encr_aes256: "<pos:position pos:line="48" pos:column="55"/></literal>
        <literal type="string" pos:line="49" pos:column="9">"Discarding part with invalid username length."<pos:position pos:line="49" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="49" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="58"/></expr_stmt>
    <return pos:line="50" pos:column="5">return <expr><operator pos:line="50" pos:column="12">(<pos:position pos:line="50" pos:column="13"/></operator><operator pos:line="50" pos:column="13">-<pos:position pos:line="50" pos:column="14"/></operator><literal type="number" pos:line="50" pos:column="14">1<pos:position pos:line="50" pos:column="15"/></literal><operator pos:line="50" pos:column="15">)<pos:position pos:line="50" pos:column="16"/></operator></expr>;<pos:position pos:line="50" pos:column="17"/></return>
  }<pos:position pos:line="51" pos:column="4"/></block></then></if>

  <expr_stmt><expr><call><name pos:line="53" pos:column="3">assert<pos:position pos:line="53" pos:column="9"/></name> <argument_list pos:line="53" pos:column="10">(<argument><expr><name pos:line="53" pos:column="11">username_len<pos:position pos:line="53" pos:column="23"/></name> <operator pos:line="53" pos:column="24">&gt;<pos:position pos:line="53" pos:column="28"/></operator> <literal type="number" pos:line="53" pos:column="26">0<pos:position pos:line="53" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="53" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="29"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="54" pos:column="3">pea<pos:position pos:line="54" pos:column="6"/></name><operator pos:line="54" pos:column="6">.<pos:position pos:line="54" pos:column="7"/></operator><name pos:line="54" pos:column="7">username<pos:position pos:line="54" pos:column="15"/></name></name> <operator pos:line="54" pos:column="16">=<pos:position pos:line="54" pos:column="17"/></operator> <call><name pos:line="54" pos:column="18">malloc<pos:position pos:line="54" pos:column="24"/></name> <argument_list pos:line="54" pos:column="25">(<argument><expr><name pos:line="54" pos:column="26">username_len<pos:position pos:line="54" pos:column="38"/></name> <operator pos:line="54" pos:column="39">+<pos:position pos:line="54" pos:column="40"/></operator> <literal type="number" pos:line="54" pos:column="41">1<pos:position pos:line="54" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="54" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="44"/></expr_stmt>
  <if pos:line="55" pos:column="3">if <condition pos:line="55" pos:column="6">(<expr><name><name pos:line="55" pos:column="7">pea<pos:position pos:line="55" pos:column="10"/></name><operator pos:line="55" pos:column="10">.<pos:position pos:line="55" pos:column="11"/></operator><name pos:line="55" pos:column="11">username<pos:position pos:line="55" pos:column="19"/></name></name> <operator pos:line="55" pos:column="20">==<pos:position pos:line="55" pos:column="22"/></operator> <name pos:line="55" pos:column="23">NULL<pos:position pos:line="55" pos:column="27"/></name></expr>)<pos:position pos:line="55" pos:column="28"/></condition><then pos:line="55" pos:column="28">
    <block type="pseudo"><return pos:line="56" pos:column="5">return <expr><operator pos:line="56" pos:column="12">(<pos:position pos:line="56" pos:column="13"/></operator><operator pos:line="56" pos:column="13">-<pos:position pos:line="56" pos:column="14"/></operator><name pos:line="56" pos:column="14">ENOMEM<pos:position pos:line="56" pos:column="20"/></name><operator pos:line="56" pos:column="20">)<pos:position pos:line="56" pos:column="21"/></operator></expr>;<pos:position pos:line="56" pos:column="22"/></return></block></then></if>
  <expr_stmt><expr><call><name pos:line="57" pos:column="3">BUFFER_READ<pos:position pos:line="57" pos:column="14"/></name> <argument_list pos:line="57" pos:column="15">(<argument><expr><name><name pos:line="57" pos:column="16">pea<pos:position pos:line="57" pos:column="19"/></name><operator pos:line="57" pos:column="19">.<pos:position pos:line="57" pos:column="20"/></operator><name pos:line="57" pos:column="20">username<pos:position pos:line="57" pos:column="28"/></name></name></expr></argument>, <argument><expr><name pos:line="57" pos:column="30">username_len<pos:position pos:line="57" pos:column="42"/></name></expr></argument>)<pos:position pos:line="57" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="44"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="58" pos:column="3">pea<pos:position pos:line="58" pos:column="6"/></name><operator pos:line="58" pos:column="6">.<pos:position pos:line="58" pos:column="7"/></operator><name pos:line="58" pos:column="7">username<pos:position pos:line="58" pos:column="15"/></name><index pos:line="58" pos:column="15">[<expr><name pos:line="58" pos:column="16">username_len<pos:position pos:line="58" pos:column="28"/></name></expr>]<pos:position pos:line="58" pos:column="29"/></index></name> <operator pos:line="58" pos:column="30">=<pos:position pos:line="58" pos:column="31"/></operator> <literal type="number" pos:line="58" pos:column="32">0<pos:position pos:line="58" pos:column="33"/></literal></expr>;<pos:position pos:line="58" pos:column="34"/></expr_stmt>

  <comment type="block" pos:line="60" pos:column="3">/* Last but not least, the initialization vector */</comment>
  <expr_stmt><expr><call><name pos:line="61" pos:column="3">BUFFER_READ<pos:position pos:line="61" pos:column="14"/></name> <argument_list pos:line="61" pos:column="15">(<argument><expr><name><name pos:line="61" pos:column="16">pea<pos:position pos:line="61" pos:column="19"/></name><operator pos:line="61" pos:column="19">.<pos:position pos:line="61" pos:column="20"/></operator><name pos:line="61" pos:column="20">iv<pos:position pos:line="61" pos:column="22"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="61" pos:column="24">sizeof <argument_list pos:line="61" pos:column="31">(<argument><expr><name><name pos:line="61" pos:column="32">pea<pos:position pos:line="61" pos:column="35"/></name><operator pos:line="61" pos:column="35">.<pos:position pos:line="61" pos:column="36"/></operator><name pos:line="61" pos:column="36">iv<pos:position pos:line="61" pos:column="38"/></name></name></expr></argument>)<pos:position pos:line="61" pos:column="39"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="61" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="41"/></expr_stmt>

  <comment type="block" pos:line="63" pos:column="3">/* Make sure we are at the right position */</comment>
  <expr_stmt><expr><call><name pos:line="64" pos:column="3">assert<pos:position pos:line="64" pos:column="9"/></name> <argument_list pos:line="64" pos:column="10">(<argument><expr><name pos:line="64" pos:column="11">buffer_offset<pos:position pos:line="64" pos:column="24"/></name> <operator pos:line="64" pos:column="25">==<pos:position pos:line="64" pos:column="27"/></operator> <operator pos:line="64" pos:column="28">(<pos:position pos:line="64" pos:column="29"/></operator><name pos:line="64" pos:column="29">username_len<pos:position pos:line="64" pos:column="41"/></name> <operator pos:line="64" pos:column="42">+<pos:position pos:line="64" pos:column="43"/></operator>
        <name pos:line="65" pos:column="9">PART_ENCRYPTION_AES256_SIZE<pos:position pos:line="65" pos:column="36"/></name> <operator pos:line="65" pos:column="37">-<pos:position pos:line="65" pos:column="38"/></operator> <sizeof pos:line="65" pos:column="39">sizeof <argument_list pos:line="65" pos:column="46">(<argument><expr><name><name pos:line="65" pos:column="47">pea<pos:position pos:line="65" pos:column="50"/></name><operator pos:line="65" pos:column="50">.<pos:position pos:line="65" pos:column="51"/></operator><name pos:line="65" pos:column="51">hash<pos:position pos:line="65" pos:column="55"/></name></name></expr></argument>)<pos:position pos:line="65" pos:column="56"/></argument_list></sizeof><operator pos:line="65" pos:column="56">)<pos:position pos:line="65" pos:column="57"/></operator></expr></argument>)<pos:position pos:line="65" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="59"/></expr_stmt>

  <expr_stmt><expr><name pos:line="67" pos:column="3">cypher<pos:position pos:line="67" pos:column="9"/></name> <operator pos:line="67" pos:column="10">=<pos:position pos:line="67" pos:column="11"/></operator> <call><name pos:line="67" pos:column="12">network_get_aes256_cypher<pos:position pos:line="67" pos:column="37"/></name> <argument_list pos:line="67" pos:column="38">(<argument><expr><name pos:line="67" pos:column="39">se<pos:position pos:line="67" pos:column="41"/></name></expr></argument>, <argument><expr><name><name pos:line="67" pos:column="43">pea<pos:position pos:line="67" pos:column="46"/></name><operator pos:line="67" pos:column="46">.<pos:position pos:line="67" pos:column="47"/></operator><name pos:line="67" pos:column="47">iv<pos:position pos:line="67" pos:column="49"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="67" pos:column="51">sizeof <argument_list pos:line="67" pos:column="58">(<argument><expr><name><name pos:line="67" pos:column="59">pea<pos:position pos:line="67" pos:column="62"/></name><operator pos:line="67" pos:column="62">.<pos:position pos:line="67" pos:column="63"/></operator><name pos:line="67" pos:column="63">iv<pos:position pos:line="67" pos:column="65"/></name></name></expr></argument>)<pos:position pos:line="67" pos:column="66"/></argument_list></sizeof></expr></argument>,
      <argument><expr><name><name pos:line="68" pos:column="7">pea<pos:position pos:line="68" pos:column="10"/></name><operator pos:line="68" pos:column="10">.<pos:position pos:line="68" pos:column="11"/></operator><name pos:line="68" pos:column="11">username<pos:position pos:line="68" pos:column="19"/></name></name></expr></argument>)<pos:position pos:line="68" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="21"/></expr_stmt>
  <if pos:line="69" pos:column="3">if <condition pos:line="69" pos:column="6">(<expr><name pos:line="69" pos:column="7">cypher<pos:position pos:line="69" pos:column="13"/></name> <operator pos:line="69" pos:column="14">==<pos:position pos:line="69" pos:column="16"/></operator> <name pos:line="69" pos:column="17">NULL<pos:position pos:line="69" pos:column="21"/></name></expr>)<pos:position pos:line="69" pos:column="22"/></condition><then pos:line="69" pos:column="22">
  <block pos:line="70" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="71" pos:column="5">ERROR<pos:position pos:line="71" pos:column="10"/></name> <argument_list pos:line="71" pos:column="11">(<argument><expr><literal type="string" pos:line="71" pos:column="12">"network plugin: Failed to get cypher. Username: %s"<pos:position pos:line="71" pos:column="64"/></literal></expr></argument>, <argument><expr><name><name pos:line="71" pos:column="66">pea<pos:position pos:line="71" pos:column="69"/></name><operator pos:line="71" pos:column="69">.<pos:position pos:line="71" pos:column="70"/></operator><name pos:line="71" pos:column="70">username<pos:position pos:line="71" pos:column="78"/></name></name></expr></argument>)<pos:position pos:line="71" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="80"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="72" pos:column="5">sfree<pos:position pos:line="72" pos:column="10"/></name> <argument_list pos:line="72" pos:column="11">(<argument><expr><name><name pos:line="72" pos:column="12">pea<pos:position pos:line="72" pos:column="15"/></name><operator pos:line="72" pos:column="15">.<pos:position pos:line="72" pos:column="16"/></operator><name pos:line="72" pos:column="16">username<pos:position pos:line="72" pos:column="24"/></name></name></expr></argument>)<pos:position pos:line="72" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="26"/></expr_stmt>
    <return pos:line="73" pos:column="5">return <expr><operator pos:line="73" pos:column="12">(<pos:position pos:line="73" pos:column="13"/></operator><operator pos:line="73" pos:column="13">-<pos:position pos:line="73" pos:column="14"/></operator><literal type="number" pos:line="73" pos:column="14">1<pos:position pos:line="73" pos:column="15"/></literal><operator pos:line="73" pos:column="15">)<pos:position pos:line="73" pos:column="16"/></operator></expr>;<pos:position pos:line="73" pos:column="17"/></return>
  }<pos:position pos:line="74" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="76" pos:column="3">payload_len<pos:position pos:line="76" pos:column="14"/></name> <operator pos:line="76" pos:column="15">=<pos:position pos:line="76" pos:column="16"/></operator> <name pos:line="76" pos:column="17">part_size<pos:position pos:line="76" pos:column="26"/></name> <operator pos:line="76" pos:column="27">-<pos:position pos:line="76" pos:column="28"/></operator> <operator pos:line="76" pos:column="29">(<pos:position pos:line="76" pos:column="30"/></operator><name pos:line="76" pos:column="30">PART_ENCRYPTION_AES256_SIZE<pos:position pos:line="76" pos:column="57"/></name> <operator pos:line="76" pos:column="58">+<pos:position pos:line="76" pos:column="59"/></operator> <name pos:line="76" pos:column="60">username_len<pos:position pos:line="76" pos:column="72"/></name><operator pos:line="76" pos:column="72">)<pos:position pos:line="76" pos:column="73"/></operator></expr>;<pos:position pos:line="76" pos:column="74"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="77" pos:column="3">assert<pos:position pos:line="77" pos:column="9"/></name> <argument_list pos:line="77" pos:column="10">(<argument><expr><name pos:line="77" pos:column="11">payload_len<pos:position pos:line="77" pos:column="22"/></name> <operator pos:line="77" pos:column="23">&gt;<pos:position pos:line="77" pos:column="27"/></operator> <literal type="number" pos:line="77" pos:column="25">0<pos:position pos:line="77" pos:column="26"/></literal></expr></argument>)<pos:position pos:line="77" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="28"/></expr_stmt>

  <comment type="block" pos:line="79" pos:column="3">/* Decrypt the packet in-place */</comment>
  <expr_stmt><expr><name pos:line="80" pos:column="3">err<pos:position pos:line="80" pos:column="6"/></name> <operator pos:line="80" pos:column="7">=<pos:position pos:line="80" pos:column="8"/></operator> <call><name pos:line="80" pos:column="9">gcry_cipher_decrypt<pos:position pos:line="80" pos:column="28"/></name> <argument_list pos:line="80" pos:column="29">(<argument><expr><name pos:line="80" pos:column="30">cypher<pos:position pos:line="80" pos:column="36"/></name></expr></argument>,
      <argument><expr><name pos:line="81" pos:column="7">buffer<pos:position pos:line="81" pos:column="13"/></name>    <operator pos:line="81" pos:column="17">+<pos:position pos:line="81" pos:column="18"/></operator> <name pos:line="81" pos:column="19">buffer_offset<pos:position pos:line="81" pos:column="32"/></name></expr></argument>,
      <argument><expr><name pos:line="82" pos:column="7">part_size<pos:position pos:line="82" pos:column="16"/></name> <operator pos:line="82" pos:column="17">-<pos:position pos:line="82" pos:column="18"/></operator> <name pos:line="82" pos:column="19">buffer_offset<pos:position pos:line="82" pos:column="32"/></name></expr></argument>,
      <comment type="block" pos:line="83" pos:column="7">/* in = */</comment> <argument><expr><name pos:line="83" pos:column="18">NULL<pos:position pos:line="83" pos:column="22"/></name></expr></argument>, <comment type="block" pos:line="83" pos:column="24">/* in len = */</comment> <argument><expr><literal type="number" pos:line="83" pos:column="39">0<pos:position pos:line="83" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="83" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="42"/></expr_stmt>
  <if pos:line="84" pos:column="3">if <condition pos:line="84" pos:column="6">(<expr><name pos:line="84" pos:column="7">err<pos:position pos:line="84" pos:column="10"/></name> <operator pos:line="84" pos:column="11">!=<pos:position pos:line="84" pos:column="13"/></operator> <literal type="number" pos:line="84" pos:column="14">0<pos:position pos:line="84" pos:column="15"/></literal></expr>)<pos:position pos:line="84" pos:column="16"/></condition><then pos:line="84" pos:column="16">
  <block pos:line="85" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="86" pos:column="5">sfree<pos:position pos:line="86" pos:column="10"/></name> <argument_list pos:line="86" pos:column="11">(<argument><expr><name><name pos:line="86" pos:column="12">pea<pos:position pos:line="86" pos:column="15"/></name><operator pos:line="86" pos:column="15">.<pos:position pos:line="86" pos:column="16"/></operator><name pos:line="86" pos:column="16">username<pos:position pos:line="86" pos:column="24"/></name></name></expr></argument>)<pos:position pos:line="86" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="87" pos:column="5">ERROR<pos:position pos:line="87" pos:column="10"/></name> <argument_list pos:line="87" pos:column="11">(<argument><expr><literal type="string" pos:line="87" pos:column="12">"network plugin: gcry_cipher_decrypt returned: %s. Username: %s"<pos:position pos:line="87" pos:column="76"/></literal></expr></argument>,
        <argument><expr><call><name pos:line="88" pos:column="9">gcry_strerror<pos:position pos:line="88" pos:column="22"/></name> <argument_list pos:line="88" pos:column="23">(<argument><expr><name pos:line="88" pos:column="24">err<pos:position pos:line="88" pos:column="27"/></name></expr></argument>)<pos:position pos:line="88" pos:column="28"/></argument_list></call></expr></argument>, <argument><expr><name><name pos:line="88" pos:column="30">pea<pos:position pos:line="88" pos:column="33"/></name><operator pos:line="88" pos:column="33">.<pos:position pos:line="88" pos:column="34"/></operator><name pos:line="88" pos:column="34">username<pos:position pos:line="88" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="88" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="44"/></expr_stmt>
    <return pos:line="89" pos:column="5">return <expr><operator pos:line="89" pos:column="12">(<pos:position pos:line="89" pos:column="13"/></operator><operator pos:line="89" pos:column="13">-<pos:position pos:line="89" pos:column="14"/></operator><literal type="number" pos:line="89" pos:column="14">1<pos:position pos:line="89" pos:column="15"/></literal><operator pos:line="89" pos:column="15">)<pos:position pos:line="89" pos:column="16"/></operator></expr>;<pos:position pos:line="89" pos:column="17"/></return>
  }<pos:position pos:line="90" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="92" pos:column="3">/* Read the hash */</comment>
  <expr_stmt><expr><call><name pos:line="93" pos:column="3">BUFFER_READ<pos:position pos:line="93" pos:column="14"/></name> <argument_list pos:line="93" pos:column="15">(<argument><expr><name><name pos:line="93" pos:column="16">pea<pos:position pos:line="93" pos:column="19"/></name><operator pos:line="93" pos:column="19">.<pos:position pos:line="93" pos:column="20"/></operator><name pos:line="93" pos:column="20">hash<pos:position pos:line="93" pos:column="24"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="93" pos:column="26">sizeof <argument_list pos:line="93" pos:column="33">(<argument><expr><name><name pos:line="93" pos:column="34">pea<pos:position pos:line="93" pos:column="37"/></name><operator pos:line="93" pos:column="37">.<pos:position pos:line="93" pos:column="38"/></operator><name pos:line="93" pos:column="38">hash<pos:position pos:line="93" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="93" pos:column="43"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="93" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="45"/></expr_stmt>

  <comment type="block" pos:line="95" pos:column="3">/* Make sure we're at the right position - again */</comment>
  <expr_stmt><expr><call><name pos:line="96" pos:column="3">assert<pos:position pos:line="96" pos:column="9"/></name> <argument_list pos:line="96" pos:column="10">(<argument><expr><name pos:line="96" pos:column="11">buffer_offset<pos:position pos:line="96" pos:column="24"/></name> <operator pos:line="96" pos:column="25">==<pos:position pos:line="96" pos:column="27"/></operator> <operator pos:line="96" pos:column="28">(<pos:position pos:line="96" pos:column="29"/></operator><name pos:line="96" pos:column="29">username_len<pos:position pos:line="96" pos:column="41"/></name> <operator pos:line="96" pos:column="42">+<pos:position pos:line="96" pos:column="43"/></operator> <name pos:line="96" pos:column="44">PART_ENCRYPTION_AES256_SIZE<pos:position pos:line="96" pos:column="71"/></name><operator pos:line="96" pos:column="71">)<pos:position pos:line="96" pos:column="72"/></operator></expr></argument>)<pos:position pos:line="96" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="96" pos:column="74"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="97" pos:column="3">assert<pos:position pos:line="97" pos:column="9"/></name> <argument_list pos:line="97" pos:column="10">(<argument><expr><name pos:line="97" pos:column="11">buffer_offset<pos:position pos:line="97" pos:column="24"/></name> <operator pos:line="97" pos:column="25">==<pos:position pos:line="97" pos:column="27"/></operator> <operator pos:line="97" pos:column="28">(<pos:position pos:line="97" pos:column="29"/></operator><name pos:line="97" pos:column="29">part_size<pos:position pos:line="97" pos:column="38"/></name> <operator pos:line="97" pos:column="39">-<pos:position pos:line="97" pos:column="40"/></operator> <name pos:line="97" pos:column="41">payload_len<pos:position pos:line="97" pos:column="52"/></name><operator pos:line="97" pos:column="52">)<pos:position pos:line="97" pos:column="53"/></operator></expr></argument>)<pos:position pos:line="97" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="55"/></expr_stmt>

  <comment type="block" pos:line="99" pos:column="3">/* Check hash sum */</comment>
  <expr_stmt><expr><call><name pos:line="100" pos:column="3">gcry_md_hash_buffer<pos:position pos:line="100" pos:column="22"/></name> <argument_list pos:line="100" pos:column="23">(<argument><expr><name pos:line="100" pos:column="24">GCRY_MD_SHA1<pos:position pos:line="100" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="100" pos:column="38">hash<pos:position pos:line="100" pos:column="42"/></name></expr></argument>,
      <argument><expr><name pos:line="101" pos:column="7">buffer<pos:position pos:line="101" pos:column="13"/></name> <operator pos:line="101" pos:column="14">+<pos:position pos:line="101" pos:column="15"/></operator> <name pos:line="101" pos:column="16">buffer_offset<pos:position pos:line="101" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="101" pos:column="31">payload_len<pos:position pos:line="101" pos:column="42"/></name></expr></argument>)<pos:position pos:line="101" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="101" pos:column="44"/></expr_stmt>
  <if pos:line="102" pos:column="3">if <condition pos:line="102" pos:column="6">(<expr><call><name pos:line="102" pos:column="7">memcmp<pos:position pos:line="102" pos:column="13"/></name> <argument_list pos:line="102" pos:column="14">(<argument><expr><name pos:line="102" pos:column="15">hash<pos:position pos:line="102" pos:column="19"/></name></expr></argument>, <argument><expr><name><name pos:line="102" pos:column="21">pea<pos:position pos:line="102" pos:column="24"/></name><operator pos:line="102" pos:column="24">.<pos:position pos:line="102" pos:column="25"/></operator><name pos:line="102" pos:column="25">hash<pos:position pos:line="102" pos:column="29"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="102" pos:column="31">sizeof <argument_list pos:line="102" pos:column="38">(<argument><expr><name pos:line="102" pos:column="39">hash<pos:position pos:line="102" pos:column="43"/></name></expr></argument>)<pos:position pos:line="102" pos:column="44"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="102" pos:column="45"/></argument_list></call> <operator pos:line="102" pos:column="46">!=<pos:position pos:line="102" pos:column="48"/></operator> <literal type="number" pos:line="102" pos:column="49">0<pos:position pos:line="102" pos:column="50"/></literal></expr>)<pos:position pos:line="102" pos:column="51"/></condition><then pos:line="102" pos:column="51">
  <block pos:line="103" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="104" pos:column="5">ERROR<pos:position pos:line="104" pos:column="10"/></name> <argument_list pos:line="104" pos:column="11">(<argument><expr><literal type="string" pos:line="104" pos:column="12">"network plugin: Checksum mismatch. Username: %s"<pos:position pos:line="104" pos:column="61"/></literal></expr></argument>, <argument><expr><name><name pos:line="104" pos:column="63">pea<pos:position pos:line="104" pos:column="66"/></name><operator pos:line="104" pos:column="66">.<pos:position pos:line="104" pos:column="67"/></operator><name pos:line="104" pos:column="67">username<pos:position pos:line="104" pos:column="75"/></name></name></expr></argument>)<pos:position pos:line="104" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="104" pos:column="77"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="105" pos:column="5">sfree<pos:position pos:line="105" pos:column="10"/></name> <argument_list pos:line="105" pos:column="11">(<argument><expr><name><name pos:line="105" pos:column="12">pea<pos:position pos:line="105" pos:column="15"/></name><operator pos:line="105" pos:column="15">.<pos:position pos:line="105" pos:column="16"/></operator><name pos:line="105" pos:column="16">username<pos:position pos:line="105" pos:column="24"/></name></name></expr></argument>)<pos:position pos:line="105" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="105" pos:column="26"/></expr_stmt>
    <return pos:line="106" pos:column="5">return <expr><operator pos:line="106" pos:column="12">(<pos:position pos:line="106" pos:column="13"/></operator><operator pos:line="106" pos:column="13">-<pos:position pos:line="106" pos:column="14"/></operator><literal type="number" pos:line="106" pos:column="14">1<pos:position pos:line="106" pos:column="15"/></literal><operator pos:line="106" pos:column="15">)<pos:position pos:line="106" pos:column="16"/></operator></expr>;<pos:position pos:line="106" pos:column="17"/></return>
  }<pos:position pos:line="107" pos:column="4"/></block></then></if>

  <expr_stmt><expr><call><name pos:line="109" pos:column="3">parse_packet<pos:position pos:line="109" pos:column="15"/></name> <argument_list pos:line="109" pos:column="16">(<argument><expr><name pos:line="109" pos:column="17">se<pos:position pos:line="109" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="109" pos:column="21">buffer<pos:position pos:line="109" pos:column="27"/></name> <operator pos:line="109" pos:column="28">+<pos:position pos:line="109" pos:column="29"/></operator> <name pos:line="109" pos:column="30">buffer_offset<pos:position pos:line="109" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="109" pos:column="45">payload_len<pos:position pos:line="109" pos:column="56"/></name></expr></argument>,
      <argument><expr><name pos:line="110" pos:column="7">flags<pos:position pos:line="110" pos:column="12"/></name> <operator pos:line="110" pos:column="13">|<pos:position pos:line="110" pos:column="14"/></operator> <name pos:line="110" pos:column="15">PP_ENCRYPTED<pos:position pos:line="110" pos:column="27"/></name></expr></argument>, <argument><expr><name><name pos:line="110" pos:column="29">pea<pos:position pos:line="110" pos:column="32"/></name><operator pos:line="110" pos:column="32">.<pos:position pos:line="110" pos:column="33"/></operator><name pos:line="110" pos:column="33">username<pos:position pos:line="110" pos:column="41"/></name></name></expr></argument>)<pos:position pos:line="110" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="110" pos:column="43"/></expr_stmt>

  <comment type="block" pos:line="112" pos:column="3">/* XXX: Free pea.username?!? */</comment>

  <comment type="block" pos:line="114" pos:column="3">/* Update return values */</comment>
  <expr_stmt><expr><operator pos:line="115" pos:column="3">*<pos:position pos:line="115" pos:column="4"/></operator><name pos:line="115" pos:column="4">ret_buffer<pos:position pos:line="115" pos:column="14"/></name> <operator pos:line="115" pos:column="15">=<pos:position pos:line="115" pos:column="16"/></operator>     <name pos:line="115" pos:column="21">buffer<pos:position pos:line="115" pos:column="27"/></name>     <operator pos:line="115" pos:column="32">+<pos:position pos:line="115" pos:column="33"/></operator> <name pos:line="115" pos:column="34">part_size<pos:position pos:line="115" pos:column="43"/></name></expr>;<pos:position pos:line="115" pos:column="44"/></expr_stmt>
  <expr_stmt><expr><operator pos:line="116" pos:column="3">*<pos:position pos:line="116" pos:column="4"/></operator><name pos:line="116" pos:column="4">ret_buffer_len<pos:position pos:line="116" pos:column="18"/></name> <operator pos:line="116" pos:column="19">=<pos:position pos:line="116" pos:column="20"/></operator> <name pos:line="116" pos:column="21">buffer_len<pos:position pos:line="116" pos:column="31"/></name> <operator pos:line="116" pos:column="32">-<pos:position pos:line="116" pos:column="33"/></operator> <name pos:line="116" pos:column="34">part_size<pos:position pos:line="116" pos:column="43"/></name></expr>;<pos:position pos:line="116" pos:column="44"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="118" pos:column="3">sfree<pos:position pos:line="118" pos:column="8"/></name> <argument_list pos:line="118" pos:column="9">(<argument><expr><name><name pos:line="118" pos:column="10">pea<pos:position pos:line="118" pos:column="13"/></name><operator pos:line="118" pos:column="13">.<pos:position pos:line="118" pos:column="14"/></operator><name pos:line="118" pos:column="14">username<pos:position pos:line="118" pos:column="22"/></name></name></expr></argument>)<pos:position pos:line="118" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="118" pos:column="24"/></expr_stmt>

  <return pos:line="120" pos:column="3">return <expr><operator pos:line="120" pos:column="10">(<pos:position pos:line="120" pos:column="11"/></operator><literal type="number" pos:line="120" pos:column="11">0<pos:position pos:line="120" pos:column="12"/></literal><operator pos:line="120" pos:column="12">)<pos:position pos:line="120" pos:column="13"/></operator></expr>;<pos:position pos:line="120" pos:column="14"/></return>
}<pos:position pos:line="121" pos:column="2"/></block></function></unit>
