<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_235_collectd-5.1.0.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">irq_read<pos:position pos:line="1" pos:column="20"/></name> <parameter_list pos:line="1" pos:column="21">(<parameter><decl><type><name pos:line="1" pos:column="22">void<pos:position pos:line="1" pos:column="26"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="27"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">FILE<pos:position pos:line="3" pos:column="13"/></name> <modifier pos:line="3" pos:column="14">*<pos:position pos:line="3" pos:column="15"/></modifier></type><name pos:line="3" pos:column="15">fh<pos:position pos:line="3" pos:column="17"/></name></decl>;<pos:position pos:line="3" pos:column="18"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">char<pos:position pos:line="4" pos:column="13"/></name></type> <name><name pos:line="4" pos:column="14">buffer<pos:position pos:line="4" pos:column="20"/></name><index pos:line="4" pos:column="20">[<expr><literal type="number" pos:line="4" pos:column="21">1024<pos:position pos:line="4" pos:column="25"/></literal></expr>]<pos:position pos:line="4" pos:column="26"/></index></name></decl>;<pos:position pos:line="4" pos:column="27"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type>  <name pos:line="5" pos:column="14">cpu_count<pos:position pos:line="5" pos:column="23"/></name></decl>;<pos:position pos:line="5" pos:column="24"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">char<pos:position pos:line="6" pos:column="13"/></name> <modifier pos:line="6" pos:column="14">*<pos:position pos:line="6" pos:column="15"/></modifier></type><name><name pos:line="6" pos:column="15">fields<pos:position pos:line="6" pos:column="21"/></name><index pos:line="6" pos:column="21">[<expr><literal type="number" pos:line="6" pos:column="22">256<pos:position pos:line="6" pos:column="25"/></literal></expr>]<pos:position pos:line="6" pos:column="26"/></index></name></decl>;<pos:position pos:line="6" pos:column="27"/></decl_stmt>

	<comment type="block" pos:line="8" pos:column="9">/*
	 * Example content:
	 *         CPU0       CPU1       CPU2       CPU3
	 * 0:       2574          1          3          2   IO-APIC-edge      timer
	 * 1:     102553     158669     218062      70587   IO-APIC-edge      i8042
	 * 8:          0          0          0          1   IO-APIC-edge      rtc0
	 */</comment>
	<expr_stmt><expr><name pos:line="15" pos:column="9">fh<pos:position pos:line="15" pos:column="11"/></name> <operator pos:line="15" pos:column="12">=<pos:position pos:line="15" pos:column="13"/></operator> <call><name pos:line="15" pos:column="14">fopen<pos:position pos:line="15" pos:column="19"/></name> <argument_list pos:line="15" pos:column="20">(<argument><expr><literal type="string" pos:line="15" pos:column="21">"/proc/interrupts"<pos:position pos:line="15" pos:column="39"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="15" pos:column="41">"r"<pos:position pos:line="15" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="46"/></expr_stmt>
	<if pos:line="16" pos:column="9">if <condition pos:line="16" pos:column="12">(<expr><name pos:line="16" pos:column="13">fh<pos:position pos:line="16" pos:column="15"/></name> <operator pos:line="16" pos:column="16">==<pos:position pos:line="16" pos:column="18"/></operator> <name pos:line="16" pos:column="19">NULL<pos:position pos:line="16" pos:column="23"/></name></expr>)<pos:position pos:line="16" pos:column="24"/></condition><then pos:line="16" pos:column="24">
	<block pos:line="17" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="18" pos:column="17">char<pos:position pos:line="18" pos:column="21"/></name></type> <name><name pos:line="18" pos:column="22">errbuf<pos:position pos:line="18" pos:column="28"/></name><index pos:line="18" pos:column="28">[<expr><literal type="number" pos:line="18" pos:column="29">1024<pos:position pos:line="18" pos:column="33"/></literal></expr>]<pos:position pos:line="18" pos:column="34"/></index></name></decl>;<pos:position pos:line="18" pos:column="35"/></decl_stmt>
		<expr_stmt><expr><call><name pos:line="19" pos:column="17">ERROR<pos:position pos:line="19" pos:column="22"/></name> <argument_list pos:line="19" pos:column="23">(<argument><expr><literal type="string" pos:line="19" pos:column="24">"irq plugin: fopen (/proc/interrupts): %s"<pos:position pos:line="19" pos:column="66"/></literal></expr></argument>,
				<argument><expr><call><name pos:line="20" pos:column="33">sstrerror<pos:position pos:line="20" pos:column="42"/></name> <argument_list pos:line="20" pos:column="43">(<argument><expr><name pos:line="20" pos:column="44">errno<pos:position pos:line="20" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="51">errbuf<pos:position pos:line="20" pos:column="57"/></name></expr></argument>, <argument><expr><sizeof pos:line="20" pos:column="59">sizeof <argument_list pos:line="20" pos:column="66">(<argument><expr><name pos:line="20" pos:column="67">errbuf<pos:position pos:line="20" pos:column="73"/></name></expr></argument>)<pos:position pos:line="20" pos:column="74"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="20" pos:column="75"/></argument_list></call></expr></argument>)<pos:position pos:line="20" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="77"/></expr_stmt>
		<return pos:line="21" pos:column="17">return <expr><operator pos:line="21" pos:column="24">(<pos:position pos:line="21" pos:column="25"/></operator><operator pos:line="21" pos:column="25">-<pos:position pos:line="21" pos:column="26"/></operator><literal type="number" pos:line="21" pos:column="26">1<pos:position pos:line="21" pos:column="27"/></literal><operator pos:line="21" pos:column="27">)<pos:position pos:line="21" pos:column="28"/></operator></expr>;<pos:position pos:line="21" pos:column="29"/></return>
	}<pos:position pos:line="22" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="24" pos:column="9">/* Get CPU count from the first line */</comment>
	<if pos:line="25" pos:column="9">if<condition pos:line="25" pos:column="11">(<expr><call><name pos:line="25" pos:column="12">fgets<pos:position pos:line="25" pos:column="17"/></name> <argument_list pos:line="25" pos:column="18">(<argument><expr><name pos:line="25" pos:column="19">buffer<pos:position pos:line="25" pos:column="25"/></name></expr></argument>, <argument><expr><sizeof pos:line="25" pos:column="27">sizeof <argument_list pos:line="25" pos:column="34">(<argument><expr><name pos:line="25" pos:column="35">buffer<pos:position pos:line="25" pos:column="41"/></name></expr></argument>)<pos:position pos:line="25" pos:column="42"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="25" pos:column="44">fh<pos:position pos:line="25" pos:column="46"/></name></expr></argument>)<pos:position pos:line="25" pos:column="47"/></argument_list></call> <operator pos:line="25" pos:column="48">!=<pos:position pos:line="25" pos:column="50"/></operator> <name pos:line="25" pos:column="51">NULL<pos:position pos:line="25" pos:column="55"/></name></expr>)<pos:position pos:line="25" pos:column="56"/></condition><then pos:line="25" pos:column="56"> <block pos:line="25" pos:column="57">{
		<expr_stmt><expr><name pos:line="26" pos:column="17">cpu_count<pos:position pos:line="26" pos:column="26"/></name> <operator pos:line="26" pos:column="27">=<pos:position pos:line="26" pos:column="28"/></operator> <call><name pos:line="26" pos:column="29">strsplit<pos:position pos:line="26" pos:column="37"/></name> <argument_list pos:line="26" pos:column="38">(<argument><expr><name pos:line="26" pos:column="39">buffer<pos:position pos:line="26" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="47">fields<pos:position pos:line="26" pos:column="53"/></name></expr></argument>,
				<argument><expr><call><name pos:line="27" pos:column="33">STATIC_ARRAY_SIZE<pos:position pos:line="27" pos:column="50"/></name> <argument_list pos:line="27" pos:column="51">(<argument><expr><name pos:line="27" pos:column="52">fields<pos:position pos:line="27" pos:column="58"/></name></expr></argument>)<pos:position pos:line="27" pos:column="59"/></argument_list></call></expr></argument>)<pos:position pos:line="27" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="61"/></expr_stmt>
	}<pos:position pos:line="28" pos:column="10"/></block></then> <else pos:line="28" pos:column="11">else <block pos:line="28" pos:column="16">{
		<expr_stmt><expr><call><name pos:line="29" pos:column="17">ERROR<pos:position pos:line="29" pos:column="22"/></name> <argument_list pos:line="29" pos:column="23">(<argument><expr><literal type="string" pos:line="29" pos:column="24">"irq plugin: unable to get CPU count from first line "<pos:position pos:line="29" pos:column="78"/></literal>
				<literal type="string" pos:line="30" pos:column="33">"of /proc/interrupts"<pos:position pos:line="30" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="56"/></expr_stmt>
		<return pos:line="31" pos:column="17">return <expr><operator pos:line="31" pos:column="24">(<pos:position pos:line="31" pos:column="25"/></operator><operator pos:line="31" pos:column="25">-<pos:position pos:line="31" pos:column="26"/></operator><literal type="number" pos:line="31" pos:column="26">1<pos:position pos:line="31" pos:column="27"/></literal><operator pos:line="31" pos:column="27">)<pos:position pos:line="31" pos:column="28"/></operator></expr>;<pos:position pos:line="31" pos:column="29"/></return>
	}<pos:position pos:line="32" pos:column="10"/></block></else></if>

	<while pos:line="34" pos:column="9">while <condition pos:line="34" pos:column="15">(<expr><call><name pos:line="34" pos:column="16">fgets<pos:position pos:line="34" pos:column="21"/></name> <argument_list pos:line="34" pos:column="22">(<argument><expr><name pos:line="34" pos:column="23">buffer<pos:position pos:line="34" pos:column="29"/></name></expr></argument>, <argument><expr><sizeof pos:line="34" pos:column="31">sizeof <argument_list pos:line="34" pos:column="38">(<argument><expr><name pos:line="34" pos:column="39">buffer<pos:position pos:line="34" pos:column="45"/></name></expr></argument>)<pos:position pos:line="34" pos:column="46"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="34" pos:column="48">fh<pos:position pos:line="34" pos:column="50"/></name></expr></argument>)<pos:position pos:line="34" pos:column="51"/></argument_list></call> <operator pos:line="34" pos:column="52">!=<pos:position pos:line="34" pos:column="54"/></operator> <name pos:line="34" pos:column="55">NULL<pos:position pos:line="34" pos:column="59"/></name></expr>)<pos:position pos:line="34" pos:column="60"/></condition>
	<block pos:line="35" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="36" pos:column="17">char<pos:position pos:line="36" pos:column="21"/></name> <modifier pos:line="36" pos:column="22">*<pos:position pos:line="36" pos:column="23"/></modifier></type><name pos:line="36" pos:column="23">irq_name<pos:position pos:line="36" pos:column="31"/></name></decl>;<pos:position pos:line="36" pos:column="32"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="37" pos:column="17">size_t<pos:position pos:line="37" pos:column="23"/></name></type> <name pos:line="37" pos:column="24">irq_name_len<pos:position pos:line="37" pos:column="36"/></name></decl>;<pos:position pos:line="37" pos:column="37"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="38" pos:column="17">derive_t<pos:position pos:line="38" pos:column="25"/></name></type> <name pos:line="38" pos:column="26">irq_value<pos:position pos:line="38" pos:column="35"/></name></decl>;<pos:position pos:line="38" pos:column="36"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="39" pos:column="17">int<pos:position pos:line="39" pos:column="20"/></name></type> <name pos:line="39" pos:column="21">i<pos:position pos:line="39" pos:column="22"/></name></decl>;<pos:position pos:line="39" pos:column="23"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="40" pos:column="17">int<pos:position pos:line="40" pos:column="20"/></name></type> <name pos:line="40" pos:column="21">fields_num<pos:position pos:line="40" pos:column="31"/></name></decl>;<pos:position pos:line="40" pos:column="32"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="41" pos:column="17">int<pos:position pos:line="41" pos:column="20"/></name></type> <name pos:line="41" pos:column="21">irq_values_to_parse<pos:position pos:line="41" pos:column="40"/></name></decl>;<pos:position pos:line="41" pos:column="41"/></decl_stmt>

		<expr_stmt><expr><name pos:line="43" pos:column="17">fields_num<pos:position pos:line="43" pos:column="27"/></name> <operator pos:line="43" pos:column="28">=<pos:position pos:line="43" pos:column="29"/></operator> <call><name pos:line="43" pos:column="30">strsplit<pos:position pos:line="43" pos:column="38"/></name> <argument_list pos:line="43" pos:column="39">(<argument><expr><name pos:line="43" pos:column="40">buffer<pos:position pos:line="43" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="48">fields<pos:position pos:line="43" pos:column="54"/></name></expr></argument>,
				<argument><expr><call><name pos:line="44" pos:column="33">STATIC_ARRAY_SIZE<pos:position pos:line="44" pos:column="50"/></name> <argument_list pos:line="44" pos:column="51">(<argument><expr><name pos:line="44" pos:column="52">fields<pos:position pos:line="44" pos:column="58"/></name></expr></argument>)<pos:position pos:line="44" pos:column="59"/></argument_list></call></expr></argument>)<pos:position pos:line="44" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="61"/></expr_stmt>
		<if pos:line="45" pos:column="17">if <condition pos:line="45" pos:column="20">(<expr><name pos:line="45" pos:column="21">fields_num<pos:position pos:line="45" pos:column="31"/></name> <operator pos:line="45" pos:column="32">&lt;<pos:position pos:line="45" pos:column="36"/></operator> <literal type="number" pos:line="45" pos:column="34">2<pos:position pos:line="45" pos:column="35"/></literal></expr>)<pos:position pos:line="45" pos:column="36"/></condition><then pos:line="45" pos:column="36">
			<block type="pseudo"><continue pos:line="46" pos:column="25">continue;<pos:position pos:line="46" pos:column="34"/></continue></block></then></if>

		<comment type="block" pos:line="48" pos:column="17">/* Parse this many numeric fields, skip the rest
		 * (+1 because first there is a name of irq in each line) */</comment>
		<if pos:line="50" pos:column="17">if <condition pos:line="50" pos:column="20">(<expr><name pos:line="50" pos:column="21">fields_num<pos:position pos:line="50" pos:column="31"/></name> <operator pos:line="50" pos:column="32">&gt;=<pos:position pos:line="50" pos:column="37"/></operator> <name pos:line="50" pos:column="35">cpu_count<pos:position pos:line="50" pos:column="44"/></name> <operator pos:line="50" pos:column="45">+<pos:position pos:line="50" pos:column="46"/></operator> <literal type="number" pos:line="50" pos:column="47">1<pos:position pos:line="50" pos:column="48"/></literal></expr>)<pos:position pos:line="50" pos:column="49"/></condition><then pos:line="50" pos:column="49">
			<block type="pseudo"><expr_stmt><expr><name pos:line="51" pos:column="25">irq_values_to_parse<pos:position pos:line="51" pos:column="44"/></name> <operator pos:line="51" pos:column="45">=<pos:position pos:line="51" pos:column="46"/></operator> <name pos:line="51" pos:column="47">cpu_count<pos:position pos:line="51" pos:column="56"/></name></expr>;<pos:position pos:line="51" pos:column="57"/></expr_stmt></block></then>
		<else pos:line="52" pos:column="17">else
			<block type="pseudo"><expr_stmt><expr><name pos:line="53" pos:column="25">irq_values_to_parse<pos:position pos:line="53" pos:column="44"/></name> <operator pos:line="53" pos:column="45">=<pos:position pos:line="53" pos:column="46"/></operator> <name pos:line="53" pos:column="47">fields_num<pos:position pos:line="53" pos:column="57"/></name> <operator pos:line="53" pos:column="58">-<pos:position pos:line="53" pos:column="59"/></operator> <literal type="number" pos:line="53" pos:column="60">1<pos:position pos:line="53" pos:column="61"/></literal></expr>;<pos:position pos:line="53" pos:column="62"/></expr_stmt></block></else></if>

		<comment type="block" pos:line="55" pos:column="17">/* First field is irq name and colon */</comment>
		<expr_stmt><expr><name pos:line="56" pos:column="17">irq_name<pos:position pos:line="56" pos:column="25"/></name> <operator pos:line="56" pos:column="26">=<pos:position pos:line="56" pos:column="27"/></operator> <name><name pos:line="56" pos:column="28">fields<pos:position pos:line="56" pos:column="34"/></name><index pos:line="56" pos:column="34">[<expr><literal type="number" pos:line="56" pos:column="35">0<pos:position pos:line="56" pos:column="36"/></literal></expr>]<pos:position pos:line="56" pos:column="37"/></index></name></expr>;<pos:position pos:line="56" pos:column="38"/></expr_stmt>
		<expr_stmt><expr><name pos:line="57" pos:column="17">irq_name_len<pos:position pos:line="57" pos:column="29"/></name> <operator pos:line="57" pos:column="30">=<pos:position pos:line="57" pos:column="31"/></operator> <call><name pos:line="57" pos:column="32">strlen<pos:position pos:line="57" pos:column="38"/></name> <argument_list pos:line="57" pos:column="39">(<argument><expr><name pos:line="57" pos:column="40">irq_name<pos:position pos:line="57" pos:column="48"/></name></expr></argument>)<pos:position pos:line="57" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="50"/></expr_stmt>
		<if pos:line="58" pos:column="17">if <condition pos:line="58" pos:column="20">(<expr><name pos:line="58" pos:column="21">irq_name_len<pos:position pos:line="58" pos:column="33"/></name> <operator pos:line="58" pos:column="34">&lt;<pos:position pos:line="58" pos:column="38"/></operator> <literal type="number" pos:line="58" pos:column="36">2<pos:position pos:line="58" pos:column="37"/></literal></expr>)<pos:position pos:line="58" pos:column="38"/></condition><then pos:line="58" pos:column="38">
			<block type="pseudo"><continue pos:line="59" pos:column="25">continue;<pos:position pos:line="59" pos:column="34"/></continue></block></then></if>

		<comment type="block" pos:line="61" pos:column="17">/* Check if irq name ends with colon.
		 * Otherwise it's a header. */</comment>
		<if pos:line="63" pos:column="17">if <condition pos:line="63" pos:column="20">(<expr><name><name pos:line="63" pos:column="21">irq_name<pos:position pos:line="63" pos:column="29"/></name><index pos:line="63" pos:column="29">[<expr><name pos:line="63" pos:column="30">irq_name_len<pos:position pos:line="63" pos:column="42"/></name> <operator pos:line="63" pos:column="43">-<pos:position pos:line="63" pos:column="44"/></operator> <literal type="number" pos:line="63" pos:column="45">1<pos:position pos:line="63" pos:column="46"/></literal></expr>]<pos:position pos:line="63" pos:column="47"/></index></name> <operator pos:line="63" pos:column="48">!=<pos:position pos:line="63" pos:column="50"/></operator> <literal type="char" pos:line="63" pos:column="51">':'<pos:position pos:line="63" pos:column="54"/></literal></expr>)<pos:position pos:line="63" pos:column="55"/></condition><then pos:line="63" pos:column="55">
			<block type="pseudo"><continue pos:line="64" pos:column="25">continue;<pos:position pos:line="64" pos:column="34"/></continue></block></then></if>

		<expr_stmt><expr><name><name pos:line="66" pos:column="17">irq_name<pos:position pos:line="66" pos:column="25"/></name><index pos:line="66" pos:column="25">[<expr><name pos:line="66" pos:column="26">irq_name_len<pos:position pos:line="66" pos:column="38"/></name> <operator pos:line="66" pos:column="39">-<pos:position pos:line="66" pos:column="40"/></operator> <literal type="number" pos:line="66" pos:column="41">1<pos:position pos:line="66" pos:column="42"/></literal></expr>]<pos:position pos:line="66" pos:column="43"/></index></name> <operator pos:line="66" pos:column="44">=<pos:position pos:line="66" pos:column="45"/></operator> <literal type="number" pos:line="66" pos:column="46">0<pos:position pos:line="66" pos:column="47"/></literal></expr>;<pos:position pos:line="66" pos:column="48"/></expr_stmt>
		<expr_stmt><expr><name pos:line="67" pos:column="17">irq_name_len<pos:position pos:line="67" pos:column="29"/></name><operator pos:line="67" pos:column="29">--<pos:position pos:line="67" pos:column="31"/></operator></expr>;<pos:position pos:line="67" pos:column="32"/></expr_stmt>

		<expr_stmt><expr><name pos:line="69" pos:column="17">irq_value<pos:position pos:line="69" pos:column="26"/></name> <operator pos:line="69" pos:column="27">=<pos:position pos:line="69" pos:column="28"/></operator> <literal type="number" pos:line="69" pos:column="29">0<pos:position pos:line="69" pos:column="30"/></literal></expr>;<pos:position pos:line="69" pos:column="31"/></expr_stmt>
		<for pos:line="70" pos:column="17">for <control pos:line="70" pos:column="21">(<init><expr><name pos:line="70" pos:column="22">i<pos:position pos:line="70" pos:column="23"/></name> <operator pos:line="70" pos:column="24">=<pos:position pos:line="70" pos:column="25"/></operator> <literal type="number" pos:line="70" pos:column="26">1<pos:position pos:line="70" pos:column="27"/></literal></expr>;<pos:position pos:line="70" pos:column="28"/></init> <condition><expr><name pos:line="70" pos:column="29">i<pos:position pos:line="70" pos:column="30"/></name> <operator pos:line="70" pos:column="31">&lt;=<pos:position pos:line="70" pos:column="36"/></operator> <name pos:line="70" pos:column="34">irq_values_to_parse<pos:position pos:line="70" pos:column="53"/></name></expr>;<pos:position pos:line="70" pos:column="54"/></condition> <incr><expr><name pos:line="70" pos:column="55">i<pos:position pos:line="70" pos:column="56"/></name><operator pos:line="70" pos:column="56">++<pos:position pos:line="70" pos:column="58"/></operator></expr></incr>)<pos:position pos:line="70" pos:column="59"/></control>
		<block pos:line="71" pos:column="17">{
			<comment type="block" pos:line="72" pos:column="25">/* Per-CPU value */</comment>
			<decl_stmt><decl><type><name pos:line="73" pos:column="25">value_t<pos:position pos:line="73" pos:column="32"/></name></type> <name pos:line="73" pos:column="33">v<pos:position pos:line="73" pos:column="34"/></name></decl>;<pos:position pos:line="73" pos:column="35"/></decl_stmt>
			<decl_stmt><decl><type><name pos:line="74" pos:column="25">int<pos:position pos:line="74" pos:column="28"/></name></type> <name pos:line="74" pos:column="29">status<pos:position pos:line="74" pos:column="35"/></name></decl>;<pos:position pos:line="74" pos:column="36"/></decl_stmt>

			<expr_stmt><expr><name pos:line="76" pos:column="25">status<pos:position pos:line="76" pos:column="31"/></name> <operator pos:line="76" pos:column="32">=<pos:position pos:line="76" pos:column="33"/></operator> <call><name pos:line="76" pos:column="34">parse_value<pos:position pos:line="76" pos:column="45"/></name> <argument_list pos:line="76" pos:column="46">(<argument><expr><name><name pos:line="76" pos:column="47">fields<pos:position pos:line="76" pos:column="53"/></name><index pos:line="76" pos:column="53">[<expr><name pos:line="76" pos:column="54">i<pos:position pos:line="76" pos:column="55"/></name></expr>]<pos:position pos:line="76" pos:column="56"/></index></name></expr></argument>, <argument><expr><operator pos:line="76" pos:column="58">&amp;<pos:position pos:line="76" pos:column="63"/></operator><name pos:line="76" pos:column="59">v<pos:position pos:line="76" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="76" pos:column="62">DS_TYPE_DERIVE<pos:position pos:line="76" pos:column="76"/></name></expr></argument>)<pos:position pos:line="76" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="78"/></expr_stmt>
			<if pos:line="77" pos:column="25">if <condition pos:line="77" pos:column="28">(<expr><name pos:line="77" pos:column="29">status<pos:position pos:line="77" pos:column="35"/></name> <operator pos:line="77" pos:column="36">!=<pos:position pos:line="77" pos:column="38"/></operator> <literal type="number" pos:line="77" pos:column="39">0<pos:position pos:line="77" pos:column="40"/></literal></expr>)<pos:position pos:line="77" pos:column="41"/></condition><then pos:line="77" pos:column="41">
				<block type="pseudo"><break pos:line="78" pos:column="33">break;<pos:position pos:line="78" pos:column="39"/></break></block></then></if>

			<expr_stmt><expr><name pos:line="80" pos:column="25">irq_value<pos:position pos:line="80" pos:column="34"/></name> <operator pos:line="80" pos:column="35">+=<pos:position pos:line="80" pos:column="37"/></operator> <name><name pos:line="80" pos:column="38">v<pos:position pos:line="80" pos:column="39"/></name><operator pos:line="80" pos:column="39">.<pos:position pos:line="80" pos:column="40"/></operator><name pos:line="80" pos:column="40">derive<pos:position pos:line="80" pos:column="46"/></name></name></expr>;<pos:position pos:line="80" pos:column="47"/></expr_stmt>
		}<pos:position pos:line="81" pos:column="18"/></block></for> <comment type="block" pos:line="81" pos:column="19">/* for (i) */</comment>

		<comment type="block" pos:line="83" pos:column="17">/* No valid fields -&gt; do not submit anything. */</comment>
		<if pos:line="84" pos:column="17">if <condition pos:line="84" pos:column="20">(<expr><name pos:line="84" pos:column="21">i<pos:position pos:line="84" pos:column="22"/></name> <operator pos:line="84" pos:column="23">&lt;=<pos:position pos:line="84" pos:column="28"/></operator> <literal type="number" pos:line="84" pos:column="26">1<pos:position pos:line="84" pos:column="27"/></literal></expr>)<pos:position pos:line="84" pos:column="28"/></condition><then pos:line="84" pos:column="28">
			<block type="pseudo"><continue pos:line="85" pos:column="25">continue;<pos:position pos:line="85" pos:column="34"/></continue></block></then></if>

		<expr_stmt><expr><call><name pos:line="87" pos:column="17">irq_submit<pos:position pos:line="87" pos:column="27"/></name> <argument_list pos:line="87" pos:column="28">(<argument><expr><name pos:line="87" pos:column="29">irq_name<pos:position pos:line="87" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="87" pos:column="39">irq_value<pos:position pos:line="87" pos:column="48"/></name></expr></argument>)<pos:position pos:line="87" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="50"/></expr_stmt>
	}<pos:position pos:line="88" pos:column="10"/></block></while>

	<expr_stmt><expr><call><name pos:line="90" pos:column="9">fclose<pos:position pos:line="90" pos:column="15"/></name> <argument_list pos:line="90" pos:column="16">(<argument><expr><name pos:line="90" pos:column="17">fh<pos:position pos:line="90" pos:column="19"/></name></expr></argument>)<pos:position pos:line="90" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="90" pos:column="21"/></expr_stmt>

	<return pos:line="92" pos:column="9">return <expr><operator pos:line="92" pos:column="16">(<pos:position pos:line="92" pos:column="17"/></operator><literal type="number" pos:line="92" pos:column="17">0<pos:position pos:line="92" pos:column="18"/></literal><operator pos:line="92" pos:column="18">)<pos:position pos:line="92" pos:column="19"/></operator></expr>;<pos:position pos:line="92" pos:column="20"/></return>
}<pos:position pos:line="93" pos:column="2"/></block></function></unit>
