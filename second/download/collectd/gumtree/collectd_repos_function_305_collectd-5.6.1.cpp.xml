<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_305_collectd-5.6.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">cpu_states_alloc<pos:position pos:line="1" pos:column="28"/></name> <parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name pos:line="1" pos:column="30">size_t<pos:position pos:line="1" pos:column="36"/></name></type> <name pos:line="1" pos:column="37">cpu_num<pos:position pos:line="1" pos:column="44"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="45"/></parameter_list> <comment type="block" pos:line="1" pos:column="46">/* {{{ */</comment>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">cpu_state_t<pos:position pos:line="3" pos:column="20"/></name> <modifier pos:line="3" pos:column="21">*<pos:position pos:line="3" pos:column="22"/></modifier></type><name pos:line="3" pos:column="22">tmp<pos:position pos:line="3" pos:column="25"/></name></decl>;<pos:position pos:line="3" pos:column="26"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">size_t<pos:position pos:line="4" pos:column="15"/></name></type> <name pos:line="4" pos:column="16">sz<pos:position pos:line="4" pos:column="18"/></name></decl>;<pos:position pos:line="4" pos:column="19"/></decl_stmt>

	<expr_stmt><expr><name pos:line="6" pos:column="9">sz<pos:position pos:line="6" pos:column="11"/></name> <operator pos:line="6" pos:column="12">=<pos:position pos:line="6" pos:column="13"/></operator> <operator pos:line="6" pos:column="14">(<pos:position pos:line="6" pos:column="15"/></operator><operator pos:line="6" pos:column="15">(<pos:position pos:line="6" pos:column="16"/></operator><operator pos:line="6" pos:column="16">(<pos:position pos:line="6" pos:column="17"/></operator><name pos:line="6" pos:column="17">size_t<pos:position pos:line="6" pos:column="23"/></name><operator pos:line="6" pos:column="23">)<pos:position pos:line="6" pos:column="24"/></operator> <name pos:line="6" pos:column="25">cpu_num<pos:position pos:line="6" pos:column="32"/></name><operator pos:line="6" pos:column="32">)<pos:position pos:line="6" pos:column="33"/></operator> <operator pos:line="6" pos:column="34">+<pos:position pos:line="6" pos:column="35"/></operator> <literal type="number" pos:line="6" pos:column="36">1<pos:position pos:line="6" pos:column="37"/></literal><operator pos:line="6" pos:column="37">)<pos:position pos:line="6" pos:column="38"/></operator> <operator pos:line="6" pos:column="39">*<pos:position pos:line="6" pos:column="40"/></operator> <name pos:line="6" pos:column="41">COLLECTD_CPU_STATE_MAX<pos:position pos:line="6" pos:column="63"/></name></expr>;<pos:position pos:line="6" pos:column="64"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="7" pos:column="9">assert<pos:position pos:line="7" pos:column="15"/></name> <argument_list pos:line="7" pos:column="16">(<argument><expr><name pos:line="7" pos:column="17">sz<pos:position pos:line="7" pos:column="19"/></name> <operator pos:line="7" pos:column="20">&gt;<pos:position pos:line="7" pos:column="24"/></operator> <literal type="number" pos:line="7" pos:column="22">0<pos:position pos:line="7" pos:column="23"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="25"/></expr_stmt>

	<comment type="block" pos:line="9" pos:column="9">/* We already have enough space. */</comment>
	<if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><name pos:line="10" pos:column="13">cpu_states_num<pos:position pos:line="10" pos:column="27"/></name> <operator pos:line="10" pos:column="28">&gt;=<pos:position pos:line="10" pos:column="33"/></operator> <name pos:line="10" pos:column="31">sz<pos:position pos:line="10" pos:column="33"/></name></expr>)<pos:position pos:line="10" pos:column="34"/></condition><then pos:line="10" pos:column="34">
		<block type="pseudo"><return pos:line="11" pos:column="17">return <expr><literal type="number" pos:line="11" pos:column="24">0<pos:position pos:line="11" pos:column="25"/></literal></expr>;<pos:position pos:line="11" pos:column="26"/></return></block></then></if>

	<expr_stmt><expr><name pos:line="13" pos:column="9">tmp<pos:position pos:line="13" pos:column="12"/></name> <operator pos:line="13" pos:column="13">=<pos:position pos:line="13" pos:column="14"/></operator> <call><name pos:line="13" pos:column="15">realloc<pos:position pos:line="13" pos:column="22"/></name> <argument_list pos:line="13" pos:column="23">(<argument><expr><name pos:line="13" pos:column="24">cpu_states<pos:position pos:line="13" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="36">sz<pos:position pos:line="13" pos:column="38"/></name> <operator pos:line="13" pos:column="39">*<pos:position pos:line="13" pos:column="40"/></operator> <sizeof pos:line="13" pos:column="41">sizeof <argument_list pos:line="13" pos:column="48">(<argument><expr><operator pos:line="13" pos:column="49">*<pos:position pos:line="13" pos:column="50"/></operator><name pos:line="13" pos:column="50">cpu_states<pos:position pos:line="13" pos:column="60"/></name></expr></argument>)<pos:position pos:line="13" pos:column="61"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="13" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="63"/></expr_stmt>
	<if pos:line="14" pos:column="9">if <condition pos:line="14" pos:column="12">(<expr><name pos:line="14" pos:column="13">tmp<pos:position pos:line="14" pos:column="16"/></name> <operator pos:line="14" pos:column="17">==<pos:position pos:line="14" pos:column="19"/></operator> <name pos:line="14" pos:column="20">NULL<pos:position pos:line="14" pos:column="24"/></name></expr>)<pos:position pos:line="14" pos:column="25"/></condition><then pos:line="14" pos:column="25">
	<block pos:line="15" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="16" pos:column="17">ERROR<pos:position pos:line="16" pos:column="22"/></name> <argument_list pos:line="16" pos:column="23">(<argument><expr><literal type="string" pos:line="16" pos:column="24">"cpu plugin: realloc failed."<pos:position pos:line="16" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="55"/></expr_stmt>
		<return pos:line="17" pos:column="17">return <expr><operator pos:line="17" pos:column="24">(<pos:position pos:line="17" pos:column="25"/></operator><name pos:line="17" pos:column="25">ENOMEM<pos:position pos:line="17" pos:column="31"/></name><operator pos:line="17" pos:column="31">)<pos:position pos:line="17" pos:column="32"/></operator></expr>;<pos:position pos:line="17" pos:column="33"/></return>
	}<pos:position pos:line="18" pos:column="10"/></block></then></if>
	<expr_stmt><expr><name pos:line="19" pos:column="9">cpu_states<pos:position pos:line="19" pos:column="19"/></name> <operator pos:line="19" pos:column="20">=<pos:position pos:line="19" pos:column="21"/></operator> <name pos:line="19" pos:column="22">tmp<pos:position pos:line="19" pos:column="25"/></name></expr>;<pos:position pos:line="19" pos:column="26"/></expr_stmt>
	<expr_stmt><expr><name pos:line="20" pos:column="9">tmp<pos:position pos:line="20" pos:column="12"/></name> <operator pos:line="20" pos:column="13">=<pos:position pos:line="20" pos:column="14"/></operator> <name pos:line="20" pos:column="15">cpu_states<pos:position pos:line="20" pos:column="25"/></name> <operator pos:line="20" pos:column="26">+<pos:position pos:line="20" pos:column="27"/></operator> <name pos:line="20" pos:column="28">cpu_states_num<pos:position pos:line="20" pos:column="42"/></name></expr>;<pos:position pos:line="20" pos:column="43"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="22" pos:column="9">memset<pos:position pos:line="22" pos:column="15"/></name> <argument_list pos:line="22" pos:column="16">(<argument><expr><name pos:line="22" pos:column="17">tmp<pos:position pos:line="22" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="22" pos:column="22">0<pos:position pos:line="22" pos:column="23"/></literal></expr></argument>, <argument><expr><operator pos:line="22" pos:column="25">(<pos:position pos:line="22" pos:column="26"/></operator><name pos:line="22" pos:column="26">sz<pos:position pos:line="22" pos:column="28"/></name> <operator pos:line="22" pos:column="29">-<pos:position pos:line="22" pos:column="30"/></operator> <name pos:line="22" pos:column="31">cpu_states_num<pos:position pos:line="22" pos:column="45"/></name><operator pos:line="22" pos:column="45">)<pos:position pos:line="22" pos:column="46"/></operator> <operator pos:line="22" pos:column="47">*<pos:position pos:line="22" pos:column="48"/></operator> <sizeof pos:line="22" pos:column="49">sizeof <argument_list pos:line="22" pos:column="56">(<argument><expr><operator pos:line="22" pos:column="57">*<pos:position pos:line="22" pos:column="58"/></operator><name pos:line="22" pos:column="58">cpu_states<pos:position pos:line="22" pos:column="68"/></name></expr></argument>)<pos:position pos:line="22" pos:column="69"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="22" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="71"/></expr_stmt>
	<expr_stmt><expr><name pos:line="23" pos:column="9">cpu_states_num<pos:position pos:line="23" pos:column="23"/></name> <operator pos:line="23" pos:column="24">=<pos:position pos:line="23" pos:column="25"/></operator> <name pos:line="23" pos:column="26">sz<pos:position pos:line="23" pos:column="28"/></name></expr>;<pos:position pos:line="23" pos:column="29"/></expr_stmt>
	<return pos:line="24" pos:column="9">return <expr><literal type="number" pos:line="24" pos:column="16">0<pos:position pos:line="24" pos:column="17"/></literal></expr>;<pos:position pos:line="24" pos:column="18"/></return>
}<pos:position pos:line="25" pos:column="2"/></block></function></unit>
