<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_156_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">irq_read<pos:position pos:line="1" pos:column="20"/></name><parameter_list pos:line="1" pos:column="20">(<parameter><decl><type><name pos:line="1" pos:column="21">void<pos:position pos:line="1" pos:column="25"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="26"/></parameter_list> <block pos:line="1" pos:column="27">{
  <decl_stmt><decl><type><name pos:line="2" pos:column="3">FILE<pos:position pos:line="2" pos:column="7"/></name> <modifier pos:line="2" pos:column="8">*<pos:position pos:line="2" pos:column="9"/></modifier></type><name pos:line="2" pos:column="9">fh<pos:position pos:line="2" pos:column="11"/></name></decl>;<pos:position pos:line="2" pos:column="12"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">char<pos:position pos:line="3" pos:column="7"/></name></type> <name><name pos:line="3" pos:column="8">buffer<pos:position pos:line="3" pos:column="14"/></name><index pos:line="3" pos:column="14">[<expr><literal type="number" pos:line="3" pos:column="15">1024<pos:position pos:line="3" pos:column="19"/></literal></expr>]<pos:position pos:line="3" pos:column="20"/></index></name></decl>;<pos:position pos:line="3" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">int<pos:position pos:line="4" pos:column="6"/></name></type> <name pos:line="4" pos:column="7">cpu_count<pos:position pos:line="4" pos:column="16"/></name></decl>;<pos:position pos:line="4" pos:column="17"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">char<pos:position pos:line="5" pos:column="7"/></name> <modifier pos:line="5" pos:column="8">*<pos:position pos:line="5" pos:column="9"/></modifier></type><name><name pos:line="5" pos:column="9">fields<pos:position pos:line="5" pos:column="15"/></name><index pos:line="5" pos:column="15">[<expr><literal type="number" pos:line="5" pos:column="16">256<pos:position pos:line="5" pos:column="19"/></literal></expr>]<pos:position pos:line="5" pos:column="20"/></index></name></decl>;<pos:position pos:line="5" pos:column="21"/></decl_stmt>

  <comment type="block" pos:line="7" pos:column="3">/*
   * Example content:
   *         CPU0       CPU1       CPU2       CPU3
   * 0:       2574          1          3          2   IO-APIC-edge      timer
   * 1:     102553     158669     218062      70587   IO-APIC-edge      i8042
   * 8:          0          0          0          1   IO-APIC-edge      rtc0
   */</comment>
  <expr_stmt><expr><name pos:line="14" pos:column="3">fh<pos:position pos:line="14" pos:column="5"/></name> <operator pos:line="14" pos:column="6">=<pos:position pos:line="14" pos:column="7"/></operator> <call><name pos:line="14" pos:column="8">fopen<pos:position pos:line="14" pos:column="13"/></name><argument_list pos:line="14" pos:column="13">(<argument><expr><literal type="string" pos:line="14" pos:column="14">"/proc/interrupts"<pos:position pos:line="14" pos:column="32"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="14" pos:column="34">"r"<pos:position pos:line="14" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="39"/></expr_stmt>
  <if pos:line="15" pos:column="3">if <condition pos:line="15" pos:column="6">(<expr><name pos:line="15" pos:column="7">fh<pos:position pos:line="15" pos:column="9"/></name> <operator pos:line="15" pos:column="10">==<pos:position pos:line="15" pos:column="12"/></operator> <name pos:line="15" pos:column="13">NULL<pos:position pos:line="15" pos:column="17"/></name></expr>)<pos:position pos:line="15" pos:column="18"/></condition><then pos:line="15" pos:column="18"> <block pos:line="15" pos:column="19">{
    <decl_stmt><decl><type><name pos:line="16" pos:column="5">char<pos:position pos:line="16" pos:column="9"/></name></type> <name><name pos:line="16" pos:column="10">errbuf<pos:position pos:line="16" pos:column="16"/></name><index pos:line="16" pos:column="16">[<expr><literal type="number" pos:line="16" pos:column="17">1024<pos:position pos:line="16" pos:column="21"/></literal></expr>]<pos:position pos:line="16" pos:column="22"/></index></name></decl>;<pos:position pos:line="16" pos:column="23"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="17" pos:column="5">ERROR<pos:position pos:line="17" pos:column="10"/></name><argument_list pos:line="17" pos:column="10">(<argument><expr><literal type="string" pos:line="17" pos:column="11">"irq plugin: fopen (/proc/interrupts): %s"<pos:position pos:line="17" pos:column="53"/></literal></expr></argument>,
          <argument><expr><call><name pos:line="18" pos:column="11">sstrerror<pos:position pos:line="18" pos:column="20"/></name><argument_list pos:line="18" pos:column="20">(<argument><expr><name pos:line="18" pos:column="21">errno<pos:position pos:line="18" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="28">errbuf<pos:position pos:line="18" pos:column="34"/></name></expr></argument>, <argument><expr><sizeof pos:line="18" pos:column="36">sizeof<argument_list pos:line="18" pos:column="42">(<argument><expr><name pos:line="18" pos:column="43">errbuf<pos:position pos:line="18" pos:column="49"/></name></expr></argument>)<pos:position pos:line="18" pos:column="50"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="18" pos:column="51"/></argument_list></call></expr></argument>)<pos:position pos:line="18" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="53"/></expr_stmt>
    <return pos:line="19" pos:column="5">return <expr><operator pos:line="19" pos:column="12">-<pos:position pos:line="19" pos:column="13"/></operator><literal type="number" pos:line="19" pos:column="13">1<pos:position pos:line="19" pos:column="14"/></literal></expr>;<pos:position pos:line="19" pos:column="15"/></return>
  }<pos:position pos:line="20" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="22" pos:column="3">/* Get CPU count from the first line */</comment>
  <if pos:line="23" pos:column="3">if <condition pos:line="23" pos:column="6">(<expr><call><name pos:line="23" pos:column="7">fgets<pos:position pos:line="23" pos:column="12"/></name><argument_list pos:line="23" pos:column="12">(<argument><expr><name pos:line="23" pos:column="13">buffer<pos:position pos:line="23" pos:column="19"/></name></expr></argument>, <argument><expr><sizeof pos:line="23" pos:column="21">sizeof<argument_list pos:line="23" pos:column="27">(<argument><expr><name pos:line="23" pos:column="28">buffer<pos:position pos:line="23" pos:column="34"/></name></expr></argument>)<pos:position pos:line="23" pos:column="35"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="23" pos:column="37">fh<pos:position pos:line="23" pos:column="39"/></name></expr></argument>)<pos:position pos:line="23" pos:column="40"/></argument_list></call> <operator pos:line="23" pos:column="41">!=<pos:position pos:line="23" pos:column="43"/></operator> <name pos:line="23" pos:column="44">NULL<pos:position pos:line="23" pos:column="48"/></name></expr>)<pos:position pos:line="23" pos:column="49"/></condition><then pos:line="23" pos:column="49"> <block pos:line="23" pos:column="50">{
    <expr_stmt><expr><name pos:line="24" pos:column="5">cpu_count<pos:position pos:line="24" pos:column="14"/></name> <operator pos:line="24" pos:column="15">=<pos:position pos:line="24" pos:column="16"/></operator> <call><name pos:line="24" pos:column="17">strsplit<pos:position pos:line="24" pos:column="25"/></name><argument_list pos:line="24" pos:column="25">(<argument><expr><name pos:line="24" pos:column="26">buffer<pos:position pos:line="24" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="34">fields<pos:position pos:line="24" pos:column="40"/></name></expr></argument>, <argument><expr><call><name pos:line="24" pos:column="42">STATIC_ARRAY_SIZE<pos:position pos:line="24" pos:column="59"/></name><argument_list pos:line="24" pos:column="59">(<argument><expr><name pos:line="24" pos:column="60">fields<pos:position pos:line="24" pos:column="66"/></name></expr></argument>)<pos:position pos:line="24" pos:column="67"/></argument_list></call></expr></argument>)<pos:position pos:line="24" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="69"/></expr_stmt>
  }<pos:position pos:line="25" pos:column="4"/></block></then> <else pos:line="25" pos:column="5">else <block pos:line="25" pos:column="10">{
    <expr_stmt><expr><call><name pos:line="26" pos:column="5">ERROR<pos:position pos:line="26" pos:column="10"/></name><argument_list pos:line="26" pos:column="10">(<argument><expr><literal type="string" pos:line="26" pos:column="11">"irq plugin: unable to get CPU count from first line "<pos:position pos:line="26" pos:column="65"/></literal>
          <literal type="string" pos:line="27" pos:column="11">"of /proc/interrupts"<pos:position pos:line="27" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="34"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="28" pos:column="5">fclose<pos:position pos:line="28" pos:column="11"/></name><argument_list pos:line="28" pos:column="11">(<argument><expr><name pos:line="28" pos:column="12">fh<pos:position pos:line="28" pos:column="14"/></name></expr></argument>)<pos:position pos:line="28" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="16"/></expr_stmt>
    <return pos:line="29" pos:column="5">return <expr><operator pos:line="29" pos:column="12">-<pos:position pos:line="29" pos:column="13"/></operator><literal type="number" pos:line="29" pos:column="13">1<pos:position pos:line="29" pos:column="14"/></literal></expr>;<pos:position pos:line="29" pos:column="15"/></return>
  }<pos:position pos:line="30" pos:column="4"/></block></else></if>

  <while pos:line="32" pos:column="3">while <condition pos:line="32" pos:column="9">(<expr><call><name pos:line="32" pos:column="10">fgets<pos:position pos:line="32" pos:column="15"/></name><argument_list pos:line="32" pos:column="15">(<argument><expr><name pos:line="32" pos:column="16">buffer<pos:position pos:line="32" pos:column="22"/></name></expr></argument>, <argument><expr><sizeof pos:line="32" pos:column="24">sizeof<argument_list pos:line="32" pos:column="30">(<argument><expr><name pos:line="32" pos:column="31">buffer<pos:position pos:line="32" pos:column="37"/></name></expr></argument>)<pos:position pos:line="32" pos:column="38"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="32" pos:column="40">fh<pos:position pos:line="32" pos:column="42"/></name></expr></argument>)<pos:position pos:line="32" pos:column="43"/></argument_list></call> <operator pos:line="32" pos:column="44">!=<pos:position pos:line="32" pos:column="46"/></operator> <name pos:line="32" pos:column="47">NULL<pos:position pos:line="32" pos:column="51"/></name></expr>)<pos:position pos:line="32" pos:column="52"/></condition> <block pos:line="32" pos:column="53">{
    <decl_stmt><decl><type><name pos:line="33" pos:column="5">char<pos:position pos:line="33" pos:column="9"/></name> <modifier pos:line="33" pos:column="10">*<pos:position pos:line="33" pos:column="11"/></modifier></type><name pos:line="33" pos:column="11">irq_name<pos:position pos:line="33" pos:column="19"/></name></decl>;<pos:position pos:line="33" pos:column="20"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="34" pos:column="5">size_t<pos:position pos:line="34" pos:column="11"/></name></type> <name pos:line="34" pos:column="12">irq_name_len<pos:position pos:line="34" pos:column="24"/></name></decl>;<pos:position pos:line="34" pos:column="25"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="35" pos:column="5">derive_t<pos:position pos:line="35" pos:column="13"/></name></type> <name pos:line="35" pos:column="14">irq_value<pos:position pos:line="35" pos:column="23"/></name></decl>;<pos:position pos:line="35" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="36" pos:column="5">int<pos:position pos:line="36" pos:column="8"/></name></type> <name pos:line="36" pos:column="9">i<pos:position pos:line="36" pos:column="10"/></name></decl>;<pos:position pos:line="36" pos:column="11"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="37" pos:column="5">int<pos:position pos:line="37" pos:column="8"/></name></type> <name pos:line="37" pos:column="9">fields_num<pos:position pos:line="37" pos:column="19"/></name></decl>;<pos:position pos:line="37" pos:column="20"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="38" pos:column="5">int<pos:position pos:line="38" pos:column="8"/></name></type> <name pos:line="38" pos:column="9">irq_values_to_parse<pos:position pos:line="38" pos:column="28"/></name></decl>;<pos:position pos:line="38" pos:column="29"/></decl_stmt>

    <expr_stmt><expr><name pos:line="40" pos:column="5">fields_num<pos:position pos:line="40" pos:column="15"/></name> <operator pos:line="40" pos:column="16">=<pos:position pos:line="40" pos:column="17"/></operator> <call><name pos:line="40" pos:column="18">strsplit<pos:position pos:line="40" pos:column="26"/></name><argument_list pos:line="40" pos:column="26">(<argument><expr><name pos:line="40" pos:column="27">buffer<pos:position pos:line="40" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="35">fields<pos:position pos:line="40" pos:column="41"/></name></expr></argument>, <argument><expr><call><name pos:line="40" pos:column="43">STATIC_ARRAY_SIZE<pos:position pos:line="40" pos:column="60"/></name><argument_list pos:line="40" pos:column="60">(<argument><expr><name pos:line="40" pos:column="61">fields<pos:position pos:line="40" pos:column="67"/></name></expr></argument>)<pos:position pos:line="40" pos:column="68"/></argument_list></call></expr></argument>)<pos:position pos:line="40" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="70"/></expr_stmt>
    <if pos:line="41" pos:column="5">if <condition pos:line="41" pos:column="8">(<expr><name pos:line="41" pos:column="9">fields_num<pos:position pos:line="41" pos:column="19"/></name> <operator pos:line="41" pos:column="20">&lt;<pos:position pos:line="41" pos:column="24"/></operator> <literal type="number" pos:line="41" pos:column="22">2<pos:position pos:line="41" pos:column="23"/></literal></expr>)<pos:position pos:line="41" pos:column="24"/></condition><then pos:line="41" pos:column="24">
      <block type="pseudo"><continue pos:line="42" pos:column="7">continue;<pos:position pos:line="42" pos:column="16"/></continue></block></then></if>

    <comment type="block" pos:line="44" pos:column="5">/* Parse this many numeric fields, skip the rest
     * (+1 because first there is a name of irq in each line) */</comment>
    <if pos:line="46" pos:column="5">if <condition pos:line="46" pos:column="8">(<expr><name pos:line="46" pos:column="9">fields_num<pos:position pos:line="46" pos:column="19"/></name> <operator pos:line="46" pos:column="20">&gt;=<pos:position pos:line="46" pos:column="25"/></operator> <name pos:line="46" pos:column="23">cpu_count<pos:position pos:line="46" pos:column="32"/></name> <operator pos:line="46" pos:column="33">+<pos:position pos:line="46" pos:column="34"/></operator> <literal type="number" pos:line="46" pos:column="35">1<pos:position pos:line="46" pos:column="36"/></literal></expr>)<pos:position pos:line="46" pos:column="37"/></condition><then pos:line="46" pos:column="37">
      <block type="pseudo"><expr_stmt><expr><name pos:line="47" pos:column="7">irq_values_to_parse<pos:position pos:line="47" pos:column="26"/></name> <operator pos:line="47" pos:column="27">=<pos:position pos:line="47" pos:column="28"/></operator> <name pos:line="47" pos:column="29">cpu_count<pos:position pos:line="47" pos:column="38"/></name></expr>;<pos:position pos:line="47" pos:column="39"/></expr_stmt></block></then>
    <else pos:line="48" pos:column="5">else
      <block type="pseudo"><expr_stmt><expr><name pos:line="49" pos:column="7">irq_values_to_parse<pos:position pos:line="49" pos:column="26"/></name> <operator pos:line="49" pos:column="27">=<pos:position pos:line="49" pos:column="28"/></operator> <name pos:line="49" pos:column="29">fields_num<pos:position pos:line="49" pos:column="39"/></name> <operator pos:line="49" pos:column="40">-<pos:position pos:line="49" pos:column="41"/></operator> <literal type="number" pos:line="49" pos:column="42">1<pos:position pos:line="49" pos:column="43"/></literal></expr>;<pos:position pos:line="49" pos:column="44"/></expr_stmt></block></else></if>

    <comment type="block" pos:line="51" pos:column="5">/* First field is irq name and colon */</comment>
    <expr_stmt><expr><name pos:line="52" pos:column="5">irq_name<pos:position pos:line="52" pos:column="13"/></name> <operator pos:line="52" pos:column="14">=<pos:position pos:line="52" pos:column="15"/></operator> <name><name pos:line="52" pos:column="16">fields<pos:position pos:line="52" pos:column="22"/></name><index pos:line="52" pos:column="22">[<expr><literal type="number" pos:line="52" pos:column="23">0<pos:position pos:line="52" pos:column="24"/></literal></expr>]<pos:position pos:line="52" pos:column="25"/></index></name></expr>;<pos:position pos:line="52" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><name pos:line="53" pos:column="5">irq_name_len<pos:position pos:line="53" pos:column="17"/></name> <operator pos:line="53" pos:column="18">=<pos:position pos:line="53" pos:column="19"/></operator> <call><name pos:line="53" pos:column="20">strlen<pos:position pos:line="53" pos:column="26"/></name><argument_list pos:line="53" pos:column="26">(<argument><expr><name pos:line="53" pos:column="27">irq_name<pos:position pos:line="53" pos:column="35"/></name></expr></argument>)<pos:position pos:line="53" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="37"/></expr_stmt>
    <if pos:line="54" pos:column="5">if <condition pos:line="54" pos:column="8">(<expr><name pos:line="54" pos:column="9">irq_name_len<pos:position pos:line="54" pos:column="21"/></name> <operator pos:line="54" pos:column="22">&lt;<pos:position pos:line="54" pos:column="26"/></operator> <literal type="number" pos:line="54" pos:column="24">2<pos:position pos:line="54" pos:column="25"/></literal></expr>)<pos:position pos:line="54" pos:column="26"/></condition><then pos:line="54" pos:column="26">
      <block type="pseudo"><continue pos:line="55" pos:column="7">continue;<pos:position pos:line="55" pos:column="16"/></continue></block></then></if>

    <comment type="block" pos:line="57" pos:column="5">/* Check if irq name ends with colon.
     * Otherwise it's a header. */</comment>
    <if pos:line="59" pos:column="5">if <condition pos:line="59" pos:column="8">(<expr><name><name pos:line="59" pos:column="9">irq_name<pos:position pos:line="59" pos:column="17"/></name><index pos:line="59" pos:column="17">[<expr><name pos:line="59" pos:column="18">irq_name_len<pos:position pos:line="59" pos:column="30"/></name> <operator pos:line="59" pos:column="31">-<pos:position pos:line="59" pos:column="32"/></operator> <literal type="number" pos:line="59" pos:column="33">1<pos:position pos:line="59" pos:column="34"/></literal></expr>]<pos:position pos:line="59" pos:column="35"/></index></name> <operator pos:line="59" pos:column="36">!=<pos:position pos:line="59" pos:column="38"/></operator> <literal type="char" pos:line="59" pos:column="39">':'<pos:position pos:line="59" pos:column="42"/></literal></expr>)<pos:position pos:line="59" pos:column="43"/></condition><then pos:line="59" pos:column="43">
      <block type="pseudo"><continue pos:line="60" pos:column="7">continue;<pos:position pos:line="60" pos:column="16"/></continue></block></then></if>

    <comment type="block" pos:line="62" pos:column="5">/* Is it the the ARM fast interrupt (FIQ)? */</comment>
    <if pos:line="63" pos:column="5">if <condition pos:line="63" pos:column="8">(<expr><name pos:line="63" pos:column="9">irq_name_len<pos:position pos:line="63" pos:column="21"/></name> <operator pos:line="63" pos:column="22">==<pos:position pos:line="63" pos:column="24"/></operator> <literal type="number" pos:line="63" pos:column="25">4<pos:position pos:line="63" pos:column="26"/></literal> <operator pos:line="63" pos:column="27">&amp;&amp;<pos:position pos:line="63" pos:column="37"/></operator> <operator pos:line="63" pos:column="30">(<pos:position pos:line="63" pos:column="31"/></operator><call><name pos:line="63" pos:column="31">strncmp<pos:position pos:line="63" pos:column="38"/></name><argument_list pos:line="63" pos:column="38">(<argument><expr><name pos:line="63" pos:column="39">irq_name<pos:position pos:line="63" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="63" pos:column="49">"FIQ:"<pos:position pos:line="63" pos:column="55"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="63" pos:column="57">4<pos:position pos:line="63" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="63" pos:column="59"/></argument_list></call> <operator pos:line="63" pos:column="60">==<pos:position pos:line="63" pos:column="62"/></operator> <literal type="number" pos:line="63" pos:column="63">0<pos:position pos:line="63" pos:column="64"/></literal><operator pos:line="63" pos:column="64">)<pos:position pos:line="63" pos:column="65"/></operator></expr>)<pos:position pos:line="63" pos:column="66"/></condition><then pos:line="63" pos:column="66">
      <block type="pseudo"><continue pos:line="64" pos:column="7">continue;<pos:position pos:line="64" pos:column="16"/></continue></block></then></if>

    <expr_stmt><expr><name><name pos:line="66" pos:column="5">irq_name<pos:position pos:line="66" pos:column="13"/></name><index pos:line="66" pos:column="13">[<expr><name pos:line="66" pos:column="14">irq_name_len<pos:position pos:line="66" pos:column="26"/></name> <operator pos:line="66" pos:column="27">-<pos:position pos:line="66" pos:column="28"/></operator> <literal type="number" pos:line="66" pos:column="29">1<pos:position pos:line="66" pos:column="30"/></literal></expr>]<pos:position pos:line="66" pos:column="31"/></index></name> <operator pos:line="66" pos:column="32">=<pos:position pos:line="66" pos:column="33"/></operator> <literal type="number" pos:line="66" pos:column="34">0<pos:position pos:line="66" pos:column="35"/></literal></expr>;<pos:position pos:line="66" pos:column="36"/></expr_stmt>
    <expr_stmt><expr><name pos:line="67" pos:column="5">irq_name_len<pos:position pos:line="67" pos:column="17"/></name><operator pos:line="67" pos:column="17">--<pos:position pos:line="67" pos:column="19"/></operator></expr>;<pos:position pos:line="67" pos:column="20"/></expr_stmt>

    <expr_stmt><expr><name pos:line="69" pos:column="5">irq_value<pos:position pos:line="69" pos:column="14"/></name> <operator pos:line="69" pos:column="15">=<pos:position pos:line="69" pos:column="16"/></operator> <literal type="number" pos:line="69" pos:column="17">0<pos:position pos:line="69" pos:column="18"/></literal></expr>;<pos:position pos:line="69" pos:column="19"/></expr_stmt>
    <for pos:line="70" pos:column="5">for <control pos:line="70" pos:column="9">(<init><expr><name pos:line="70" pos:column="10">i<pos:position pos:line="70" pos:column="11"/></name> <operator pos:line="70" pos:column="12">=<pos:position pos:line="70" pos:column="13"/></operator> <literal type="number" pos:line="70" pos:column="14">1<pos:position pos:line="70" pos:column="15"/></literal></expr>;<pos:position pos:line="70" pos:column="16"/></init> <condition><expr><name pos:line="70" pos:column="17">i<pos:position pos:line="70" pos:column="18"/></name> <operator pos:line="70" pos:column="19">&lt;=<pos:position pos:line="70" pos:column="24"/></operator> <name pos:line="70" pos:column="22">irq_values_to_parse<pos:position pos:line="70" pos:column="41"/></name></expr>;<pos:position pos:line="70" pos:column="42"/></condition> <incr><expr><name pos:line="70" pos:column="43">i<pos:position pos:line="70" pos:column="44"/></name><operator pos:line="70" pos:column="44">++<pos:position pos:line="70" pos:column="46"/></operator></expr></incr>)<pos:position pos:line="70" pos:column="47"/></control> <block pos:line="70" pos:column="48">{
      <comment type="block" pos:line="71" pos:column="7">/* Per-CPU value */</comment>
      <decl_stmt><decl><type><name pos:line="72" pos:column="7">value_t<pos:position pos:line="72" pos:column="14"/></name></type> <name pos:line="72" pos:column="15">v<pos:position pos:line="72" pos:column="16"/></name></decl>;<pos:position pos:line="72" pos:column="17"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="73" pos:column="7">int<pos:position pos:line="73" pos:column="10"/></name></type> <name pos:line="73" pos:column="11">status<pos:position pos:line="73" pos:column="17"/></name></decl>;<pos:position pos:line="73" pos:column="18"/></decl_stmt>

      <expr_stmt><expr><name pos:line="75" pos:column="7">status<pos:position pos:line="75" pos:column="13"/></name> <operator pos:line="75" pos:column="14">=<pos:position pos:line="75" pos:column="15"/></operator> <call><name pos:line="75" pos:column="16">parse_value<pos:position pos:line="75" pos:column="27"/></name><argument_list pos:line="75" pos:column="27">(<argument><expr><name><name pos:line="75" pos:column="28">fields<pos:position pos:line="75" pos:column="34"/></name><index pos:line="75" pos:column="34">[<expr><name pos:line="75" pos:column="35">i<pos:position pos:line="75" pos:column="36"/></name></expr>]<pos:position pos:line="75" pos:column="37"/></index></name></expr></argument>, <argument><expr><operator pos:line="75" pos:column="39">&amp;<pos:position pos:line="75" pos:column="44"/></operator><name pos:line="75" pos:column="40">v<pos:position pos:line="75" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="75" pos:column="43">DS_TYPE_DERIVE<pos:position pos:line="75" pos:column="57"/></name></expr></argument>)<pos:position pos:line="75" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="59"/></expr_stmt>
      <if pos:line="76" pos:column="7">if <condition pos:line="76" pos:column="10">(<expr><name pos:line="76" pos:column="11">status<pos:position pos:line="76" pos:column="17"/></name> <operator pos:line="76" pos:column="18">!=<pos:position pos:line="76" pos:column="20"/></operator> <literal type="number" pos:line="76" pos:column="21">0<pos:position pos:line="76" pos:column="22"/></literal></expr>)<pos:position pos:line="76" pos:column="23"/></condition><then pos:line="76" pos:column="23">
        <block type="pseudo"><break pos:line="77" pos:column="9">break;<pos:position pos:line="77" pos:column="15"/></break></block></then></if>

      <expr_stmt><expr><name pos:line="79" pos:column="7">irq_value<pos:position pos:line="79" pos:column="16"/></name> <operator pos:line="79" pos:column="17">+=<pos:position pos:line="79" pos:column="19"/></operator> <name><name pos:line="79" pos:column="20">v<pos:position pos:line="79" pos:column="21"/></name><operator pos:line="79" pos:column="21">.<pos:position pos:line="79" pos:column="22"/></operator><name pos:line="79" pos:column="22">derive<pos:position pos:line="79" pos:column="28"/></name></name></expr>;<pos:position pos:line="79" pos:column="29"/></expr_stmt>
    }<pos:position pos:line="80" pos:column="6"/></block></for> <comment type="block" pos:line="80" pos:column="7">/* for (i) */</comment>

    <comment type="block" pos:line="82" pos:column="5">/* No valid fields -&gt; do not submit anything. */</comment>
    <if pos:line="83" pos:column="5">if <condition pos:line="83" pos:column="8">(<expr><name pos:line="83" pos:column="9">i<pos:position pos:line="83" pos:column="10"/></name> <operator pos:line="83" pos:column="11">&lt;=<pos:position pos:line="83" pos:column="16"/></operator> <literal type="number" pos:line="83" pos:column="14">1<pos:position pos:line="83" pos:column="15"/></literal></expr>)<pos:position pos:line="83" pos:column="16"/></condition><then pos:line="83" pos:column="16">
      <block type="pseudo"><continue pos:line="84" pos:column="7">continue;<pos:position pos:line="84" pos:column="16"/></continue></block></then></if>

    <expr_stmt><expr><call><name pos:line="86" pos:column="5">irq_submit<pos:position pos:line="86" pos:column="15"/></name><argument_list pos:line="86" pos:column="15">(<argument><expr><name pos:line="86" pos:column="16">irq_name<pos:position pos:line="86" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="86" pos:column="26">irq_value<pos:position pos:line="86" pos:column="35"/></name></expr></argument>)<pos:position pos:line="86" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="37"/></expr_stmt>
  }<pos:position pos:line="87" pos:column="4"/></block></while>

  <expr_stmt><expr><call><name pos:line="89" pos:column="3">fclose<pos:position pos:line="89" pos:column="9"/></name><argument_list pos:line="89" pos:column="9">(<argument><expr><name pos:line="89" pos:column="10">fh<pos:position pos:line="89" pos:column="12"/></name></expr></argument>)<pos:position pos:line="89" pos:column="13"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="14"/></expr_stmt>

  <return pos:line="91" pos:column="3">return <expr><literal type="number" pos:line="91" pos:column="10">0<pos:position pos:line="91" pos:column="11"/></literal></expr>;<pos:position pos:line="91" pos:column="12"/></return>
}<pos:position pos:line="92" pos:column="2"/></block></function></unit>
