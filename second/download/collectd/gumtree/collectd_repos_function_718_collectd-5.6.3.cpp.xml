<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_718_collectd-5.6.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">cow_load_config<pos:position pos:line="1" pos:column="27"/></name><parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><specifier pos:line="1" pos:column="28">const<pos:position pos:line="1" pos:column="33"/></specifier> <name pos:line="1" pos:column="34">char<pos:position pos:line="1" pos:column="38"/></name> <modifier pos:line="1" pos:column="39">*<pos:position pos:line="1" pos:column="40"/></modifier></type><name pos:line="1" pos:column="40">key<pos:position pos:line="1" pos:column="43"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="45">const<pos:position pos:line="1" pos:column="50"/></specifier> <name pos:line="1" pos:column="51">char<pos:position pos:line="1" pos:column="55"/></name> <modifier pos:line="1" pos:column="56">*<pos:position pos:line="1" pos:column="57"/></modifier></type><name pos:line="1" pos:column="57">value<pos:position pos:line="1" pos:column="62"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="63"/></parameter_list> <block pos:line="1" pos:column="64">{
  <if pos:line="2" pos:column="3">if <condition pos:line="2" pos:column="6">(<expr><name pos:line="2" pos:column="7">sensor_list<pos:position pos:line="2" pos:column="18"/></name> <operator pos:line="2" pos:column="19">==<pos:position pos:line="2" pos:column="21"/></operator> <name pos:line="2" pos:column="22">NULL<pos:position pos:line="2" pos:column="26"/></name></expr>)<pos:position pos:line="2" pos:column="27"/></condition><then pos:line="2" pos:column="27">
    <block type="pseudo"><expr_stmt><expr><name pos:line="3" pos:column="5">sensor_list<pos:position pos:line="3" pos:column="16"/></name> <operator pos:line="3" pos:column="17">=<pos:position pos:line="3" pos:column="18"/></operator> <call><name pos:line="3" pos:column="19">ignorelist_create<pos:position pos:line="3" pos:column="36"/></name><argument_list pos:line="3" pos:column="36">(<argument><expr><literal type="number" pos:line="3" pos:column="37">1<pos:position pos:line="3" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="3" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="3" pos:column="40"/></expr_stmt></block></then></if>

  <if pos:line="5" pos:column="3">if <condition pos:line="5" pos:column="6">(<expr><call><name pos:line="5" pos:column="7">strcasecmp<pos:position pos:line="5" pos:column="17"/></name><argument_list pos:line="5" pos:column="17">(<argument><expr><name pos:line="5" pos:column="18">key<pos:position pos:line="5" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="5" pos:column="23">"Sensor"<pos:position pos:line="5" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="5" pos:column="32"/></argument_list></call> <operator pos:line="5" pos:column="33">==<pos:position pos:line="5" pos:column="35"/></operator> <literal type="number" pos:line="5" pos:column="36">0<pos:position pos:line="5" pos:column="37"/></literal></expr>)<pos:position pos:line="5" pos:column="38"/></condition><then pos:line="5" pos:column="38"> <block pos:line="5" pos:column="39">{
    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><call><name pos:line="6" pos:column="9">direct_list_insert<pos:position pos:line="6" pos:column="27"/></name><argument_list pos:line="6" pos:column="27">(<argument><expr><name pos:line="6" pos:column="28">value<pos:position pos:line="6" pos:column="33"/></name></expr></argument>)<pos:position pos:line="6" pos:column="34"/></argument_list></call></expr>)<pos:position pos:line="6" pos:column="35"/></condition><then pos:line="6" pos:column="35"> <block pos:line="6" pos:column="36">{
      <expr_stmt><expr><call><name pos:line="7" pos:column="7">DEBUG<pos:position pos:line="7" pos:column="12"/></name><argument_list pos:line="7" pos:column="12">(<argument><expr><literal type="string" pos:line="7" pos:column="13">"onewire plugin: Cannot add %s to direct_list_insert."<pos:position pos:line="7" pos:column="67"/></literal></expr></argument>, <argument><expr><name pos:line="7" pos:column="69">value<pos:position pos:line="7" pos:column="74"/></name></expr></argument>)<pos:position pos:line="7" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="76"/></expr_stmt>

      <if pos:line="9" pos:column="7">if <condition pos:line="9" pos:column="10">(<expr><call><name pos:line="9" pos:column="11">ignorelist_add<pos:position pos:line="9" pos:column="25"/></name><argument_list pos:line="9" pos:column="25">(<argument><expr><name pos:line="9" pos:column="26">sensor_list<pos:position pos:line="9" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="39">value<pos:position pos:line="9" pos:column="44"/></name></expr></argument>)<pos:position pos:line="9" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="9" pos:column="46"/></condition><then pos:line="9" pos:column="46"> <block pos:line="9" pos:column="47">{
        <expr_stmt><expr><call><name pos:line="10" pos:column="9">ERROR<pos:position pos:line="10" pos:column="14"/></name><argument_list pos:line="10" pos:column="14">(<argument><expr><literal type="string" pos:line="10" pos:column="15">"onewire plugin: Cannot add value to ignorelist."<pos:position pos:line="10" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="66"/></expr_stmt>
        <return pos:line="11" pos:column="9">return <expr><operator pos:line="11" pos:column="16">(<pos:position pos:line="11" pos:column="17"/></operator><literal type="number" pos:line="11" pos:column="17">1<pos:position pos:line="11" pos:column="18"/></literal><operator pos:line="11" pos:column="18">)<pos:position pos:line="11" pos:column="19"/></operator></expr>;<pos:position pos:line="11" pos:column="20"/></return>
      }<pos:position pos:line="12" pos:column="8"/></block></then></if>
    }<pos:position pos:line="13" pos:column="6"/></block></then> <else pos:line="13" pos:column="7">else <block pos:line="13" pos:column="12">{
      <expr_stmt><expr><call><name pos:line="14" pos:column="7">DEBUG<pos:position pos:line="14" pos:column="12"/></name><argument_list pos:line="14" pos:column="12">(<argument><expr><literal type="string" pos:line="14" pos:column="13">"onewire plugin: %s is a direct access"<pos:position pos:line="14" pos:column="52"/></literal></expr></argument>, <argument><expr><name pos:line="14" pos:column="54">value<pos:position pos:line="14" pos:column="59"/></name></expr></argument>)<pos:position pos:line="14" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="61"/></expr_stmt>
      <expr_stmt><expr><name pos:line="15" pos:column="7">direct_access<pos:position pos:line="15" pos:column="20"/></name> <operator pos:line="15" pos:column="21">=<pos:position pos:line="15" pos:column="22"/></operator> <literal type="number" pos:line="15" pos:column="23">1<pos:position pos:line="15" pos:column="24"/></literal></expr>;<pos:position pos:line="15" pos:column="25"/></expr_stmt>
    }<pos:position pos:line="16" pos:column="6"/></block></else></if>
  }<pos:position pos:line="17" pos:column="4"/></block></then> <elseif pos:line="17" pos:column="5">else <if pos:line="17" pos:column="10">if <condition pos:line="17" pos:column="13">(<expr><call><name pos:line="17" pos:column="14">strcasecmp<pos:position pos:line="17" pos:column="24"/></name><argument_list pos:line="17" pos:column="24">(<argument><expr><name pos:line="17" pos:column="25">key<pos:position pos:line="17" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="17" pos:column="30">"IgnoreSelected"<pos:position pos:line="17" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="47"/></argument_list></call> <operator pos:line="17" pos:column="48">==<pos:position pos:line="17" pos:column="50"/></operator> <literal type="number" pos:line="17" pos:column="51">0<pos:position pos:line="17" pos:column="52"/></literal></expr>)<pos:position pos:line="17" pos:column="53"/></condition><then pos:line="17" pos:column="53"> <block pos:line="17" pos:column="54">{
    <expr_stmt><expr><call><name pos:line="18" pos:column="5">ignorelist_set_invert<pos:position pos:line="18" pos:column="26"/></name><argument_list pos:line="18" pos:column="26">(<argument><expr><name pos:line="18" pos:column="27">sensor_list<pos:position pos:line="18" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="18" pos:column="40">1<pos:position pos:line="18" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="43"/></expr_stmt>
    <if pos:line="19" pos:column="5">if <condition pos:line="19" pos:column="8">(<expr><call><name pos:line="19" pos:column="9">IS_TRUE<pos:position pos:line="19" pos:column="16"/></name><argument_list pos:line="19" pos:column="16">(<argument><expr><name pos:line="19" pos:column="17">value<pos:position pos:line="19" pos:column="22"/></name></expr></argument>)<pos:position pos:line="19" pos:column="23"/></argument_list></call></expr>)<pos:position pos:line="19" pos:column="24"/></condition><then pos:line="19" pos:column="24">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="20" pos:column="7">ignorelist_set_invert<pos:position pos:line="20" pos:column="28"/></name><argument_list pos:line="20" pos:column="28">(<argument><expr><name pos:line="20" pos:column="29">sensor_list<pos:position pos:line="20" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="20" pos:column="42">0<pos:position pos:line="20" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="45"/></expr_stmt></block></then></if>
  }<pos:position pos:line="21" pos:column="4"/></block></then></if></elseif> <elseif pos:line="21" pos:column="5">else <if pos:line="21" pos:column="10">if <condition pos:line="21" pos:column="13">(<expr><call><name pos:line="21" pos:column="14">strcasecmp<pos:position pos:line="21" pos:column="24"/></name><argument_list pos:line="21" pos:column="24">(<argument><expr><name pos:line="21" pos:column="25">key<pos:position pos:line="21" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="21" pos:column="30">"Device"<pos:position pos:line="21" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="39"/></argument_list></call> <operator pos:line="21" pos:column="40">==<pos:position pos:line="21" pos:column="42"/></operator> <literal type="number" pos:line="21" pos:column="43">0<pos:position pos:line="21" pos:column="44"/></literal></expr>)<pos:position pos:line="21" pos:column="45"/></condition><then pos:line="21" pos:column="45"> <block pos:line="21" pos:column="46">{
    <decl_stmt><decl><type><name pos:line="22" pos:column="5">char<pos:position pos:line="22" pos:column="9"/></name> <modifier pos:line="22" pos:column="10">*<pos:position pos:line="22" pos:column="11"/></modifier></type><name pos:line="22" pos:column="11">temp<pos:position pos:line="22" pos:column="15"/></name></decl>;<pos:position pos:line="22" pos:column="16"/></decl_stmt>
    <expr_stmt><expr><name pos:line="23" pos:column="5">temp<pos:position pos:line="23" pos:column="9"/></name> <operator pos:line="23" pos:column="10">=<pos:position pos:line="23" pos:column="11"/></operator> <call><name pos:line="23" pos:column="12">strdup<pos:position pos:line="23" pos:column="18"/></name><argument_list pos:line="23" pos:column="18">(<argument><expr><name pos:line="23" pos:column="19">value<pos:position pos:line="23" pos:column="24"/></name></expr></argument>)<pos:position pos:line="23" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="26"/></expr_stmt>
    <if pos:line="24" pos:column="5">if <condition pos:line="24" pos:column="8">(<expr><name pos:line="24" pos:column="9">temp<pos:position pos:line="24" pos:column="13"/></name> <operator pos:line="24" pos:column="14">==<pos:position pos:line="24" pos:column="16"/></operator> <name pos:line="24" pos:column="17">NULL<pos:position pos:line="24" pos:column="21"/></name></expr>)<pos:position pos:line="24" pos:column="22"/></condition><then pos:line="24" pos:column="22"> <block pos:line="24" pos:column="23">{
      <expr_stmt><expr><call><name pos:line="25" pos:column="7">ERROR<pos:position pos:line="25" pos:column="12"/></name><argument_list pos:line="25" pos:column="12">(<argument><expr><literal type="string" pos:line="25" pos:column="13">"onewire plugin: strdup failed."<pos:position pos:line="25" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="47"/></expr_stmt>
      <return pos:line="26" pos:column="7">return <expr><operator pos:line="26" pos:column="14">(<pos:position pos:line="26" pos:column="15"/></operator><literal type="number" pos:line="26" pos:column="15">1<pos:position pos:line="26" pos:column="16"/></literal><operator pos:line="26" pos:column="16">)<pos:position pos:line="26" pos:column="17"/></operator></expr>;<pos:position pos:line="26" pos:column="18"/></return>
    }<pos:position pos:line="27" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="28" pos:column="5">sfree<pos:position pos:line="28" pos:column="10"/></name><argument_list pos:line="28" pos:column="10">(<argument><expr><name pos:line="28" pos:column="11">device_g<pos:position pos:line="28" pos:column="19"/></name></expr></argument>)<pos:position pos:line="28" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="21"/></expr_stmt>
    <expr_stmt><expr><name pos:line="29" pos:column="5">device_g<pos:position pos:line="29" pos:column="13"/></name> <operator pos:line="29" pos:column="14">=<pos:position pos:line="29" pos:column="15"/></operator> <name pos:line="29" pos:column="16">temp<pos:position pos:line="29" pos:column="20"/></name></expr>;<pos:position pos:line="29" pos:column="21"/></expr_stmt>
  }<pos:position pos:line="30" pos:column="4"/></block></then></if></elseif> <elseif pos:line="30" pos:column="5">else <if pos:line="30" pos:column="10">if <condition pos:line="30" pos:column="13">(<expr><call><name pos:line="30" pos:column="14">strcasecmp<pos:position pos:line="30" pos:column="24"/></name><argument_list pos:line="30" pos:column="24">(<argument><expr><literal type="string" pos:line="30" pos:column="25">"Interval"<pos:position pos:line="30" pos:column="35"/></literal></expr></argument>, <argument><expr><name pos:line="30" pos:column="37">key<pos:position pos:line="30" pos:column="40"/></name></expr></argument>)<pos:position pos:line="30" pos:column="41"/></argument_list></call> <operator pos:line="30" pos:column="42">==<pos:position pos:line="30" pos:column="44"/></operator> <literal type="number" pos:line="30" pos:column="45">0<pos:position pos:line="30" pos:column="46"/></literal></expr>)<pos:position pos:line="30" pos:column="47"/></condition><then pos:line="30" pos:column="47"> <block pos:line="30" pos:column="48">{
    <decl_stmt><decl><type><name pos:line="31" pos:column="5">double<pos:position pos:line="31" pos:column="11"/></name></type> <name pos:line="31" pos:column="12">tmp<pos:position pos:line="31" pos:column="15"/></name></decl>;<pos:position pos:line="31" pos:column="16"/></decl_stmt>
    <expr_stmt><expr><name pos:line="32" pos:column="5">tmp<pos:position pos:line="32" pos:column="8"/></name> <operator pos:line="32" pos:column="9">=<pos:position pos:line="32" pos:column="10"/></operator> <call><name pos:line="32" pos:column="11">atof<pos:position pos:line="32" pos:column="15"/></name><argument_list pos:line="32" pos:column="15">(<argument><expr><name pos:line="32" pos:column="16">value<pos:position pos:line="32" pos:column="21"/></name></expr></argument>)<pos:position pos:line="32" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="23"/></expr_stmt>
    <if pos:line="33" pos:column="5">if <condition pos:line="33" pos:column="8">(<expr><name pos:line="33" pos:column="9">tmp<pos:position pos:line="33" pos:column="12"/></name> <operator pos:line="33" pos:column="13">&gt;<pos:position pos:line="33" pos:column="17"/></operator> <literal type="number" pos:line="33" pos:column="15">0.0<pos:position pos:line="33" pos:column="18"/></literal></expr>)<pos:position pos:line="33" pos:column="19"/></condition><then pos:line="33" pos:column="19">
      <block type="pseudo"><expr_stmt><expr><name pos:line="34" pos:column="7">ow_interval<pos:position pos:line="34" pos:column="18"/></name> <operator pos:line="34" pos:column="19">=<pos:position pos:line="34" pos:column="20"/></operator> <call><name pos:line="34" pos:column="21">DOUBLE_TO_CDTIME_T<pos:position pos:line="34" pos:column="39"/></name><argument_list pos:line="34" pos:column="39">(<argument><expr><name pos:line="34" pos:column="40">tmp<pos:position pos:line="34" pos:column="43"/></name></expr></argument>)<pos:position pos:line="34" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="45"/></expr_stmt></block></then>
    <else pos:line="35" pos:column="5">else
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="36" pos:column="7">ERROR<pos:position pos:line="36" pos:column="12"/></name><argument_list pos:line="36" pos:column="12">(<argument><expr><literal type="string" pos:line="36" pos:column="13">"onewire plugin: Invalid `Interval' setting: %s"<pos:position pos:line="36" pos:column="61"/></literal></expr></argument>, <argument><expr><name pos:line="36" pos:column="63">value<pos:position pos:line="36" pos:column="68"/></name></expr></argument>)<pos:position pos:line="36" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="70"/></expr_stmt></block></else></if>
  }<pos:position pos:line="37" pos:column="4"/></block></then></if></elseif> <else pos:line="37" pos:column="5">else <block pos:line="37" pos:column="10">{
    <return pos:line="38" pos:column="5">return <expr><operator pos:line="38" pos:column="12">(<pos:position pos:line="38" pos:column="13"/></operator><operator pos:line="38" pos:column="13">-<pos:position pos:line="38" pos:column="14"/></operator><literal type="number" pos:line="38" pos:column="14">1<pos:position pos:line="38" pos:column="15"/></literal><operator pos:line="38" pos:column="15">)<pos:position pos:line="38" pos:column="16"/></operator></expr>;<pos:position pos:line="38" pos:column="17"/></return>
  }<pos:position pos:line="39" pos:column="4"/></block></else></if>

  <return pos:line="41" pos:column="3">return <expr><operator pos:line="41" pos:column="10">(<pos:position pos:line="41" pos:column="11"/></operator><literal type="number" pos:line="41" pos:column="11">0<pos:position pos:line="41" pos:column="12"/></literal><operator pos:line="41" pos:column="12">)<pos:position pos:line="41" pos:column="13"/></operator></expr>;<pos:position pos:line="41" pos:column="14"/></return>
}<pos:position pos:line="42" pos:column="2"/></block></function></unit>
