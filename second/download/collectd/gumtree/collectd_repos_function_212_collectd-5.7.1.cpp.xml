<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_212_collectd-5.7.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">listval<pos:position pos:line="1" pos:column="19"/></name><parameter_list pos:line="1" pos:column="19">(<parameter><decl><type><name pos:line="1" pos:column="20">lcc_connection_t<pos:position pos:line="1" pos:column="36"/></name> <modifier pos:line="1" pos:column="37">*<pos:position pos:line="1" pos:column="38"/></modifier></type><name pos:line="1" pos:column="38">c<pos:position pos:line="1" pos:column="39"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="41">int<pos:position pos:line="1" pos:column="44"/></name></type> <name pos:line="1" pos:column="45">argc<pos:position pos:line="1" pos:column="49"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="51">char<pos:position pos:line="1" pos:column="55"/></name> <modifier pos:line="1" pos:column="56">*<pos:position pos:line="1" pos:column="57"/></modifier><modifier pos:line="1" pos:column="57">*<pos:position pos:line="1" pos:column="58"/></modifier></type><name pos:line="1" pos:column="58">argv<pos:position pos:line="1" pos:column="62"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="63"/></parameter_list> <block pos:line="1" pos:column="64">{
  <decl_stmt><decl><type><name pos:line="2" pos:column="3">lcc_identifier_t<pos:position pos:line="2" pos:column="19"/></name> <modifier pos:line="2" pos:column="20">*<pos:position pos:line="2" pos:column="21"/></modifier></type><name pos:line="2" pos:column="21">ret_ident<pos:position pos:line="2" pos:column="30"/></name> <init pos:line="2" pos:column="31">= <expr><name pos:line="2" pos:column="33">NULL<pos:position pos:line="2" pos:column="37"/></name></expr></init></decl>;<pos:position pos:line="2" pos:column="38"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">size_t<pos:position pos:line="3" pos:column="9"/></name></type> <name pos:line="3" pos:column="10">ret_ident_num<pos:position pos:line="3" pos:column="23"/></name> <init pos:line="3" pos:column="24">= <expr><literal type="number" pos:line="3" pos:column="26">0<pos:position pos:line="3" pos:column="27"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="28"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="5" pos:column="3">int<pos:position pos:line="5" pos:column="6"/></name></type> <name pos:line="5" pos:column="7">status<pos:position pos:line="5" pos:column="13"/></name></decl>;<pos:position pos:line="5" pos:column="14"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="7" pos:column="3">assert<pos:position pos:line="7" pos:column="9"/></name><argument_list pos:line="7" pos:column="9">(<argument><expr><call><name pos:line="7" pos:column="10">strcasecmp<pos:position pos:line="7" pos:column="20"/></name><argument_list pos:line="7" pos:column="20">(<argument><expr><name><name pos:line="7" pos:column="21">argv<pos:position pos:line="7" pos:column="25"/></name><index pos:line="7" pos:column="25">[<expr><literal type="number" pos:line="7" pos:column="26">0<pos:position pos:line="7" pos:column="27"/></literal></expr>]<pos:position pos:line="7" pos:column="28"/></index></name></expr></argument>, <argument><expr><literal type="string" pos:line="7" pos:column="30">"listval"<pos:position pos:line="7" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="40"/></argument_list></call> <operator pos:line="7" pos:column="41">==<pos:position pos:line="7" pos:column="43"/></operator> <literal type="number" pos:line="7" pos:column="44">0<pos:position pos:line="7" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="47"/></expr_stmt>

  <if pos:line="9" pos:column="3">if <condition pos:line="9" pos:column="6">(<expr><name pos:line="9" pos:column="7">argc<pos:position pos:line="9" pos:column="11"/></name> <operator pos:line="9" pos:column="12">!=<pos:position pos:line="9" pos:column="14"/></operator> <literal type="number" pos:line="9" pos:column="15">1<pos:position pos:line="9" pos:column="16"/></literal></expr>)<pos:position pos:line="9" pos:column="17"/></condition><then pos:line="9" pos:column="17"> <block pos:line="9" pos:column="18">{
    <expr_stmt><expr><call><name pos:line="10" pos:column="5">fprintf<pos:position pos:line="10" pos:column="12"/></name><argument_list pos:line="10" pos:column="12">(<argument><expr><name pos:line="10" pos:column="13">stderr<pos:position pos:line="10" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="10" pos:column="21">"ERROR: listval: Does not accept any arguments.\n"<pos:position pos:line="10" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="73"/></expr_stmt>
    <return pos:line="11" pos:column="5">return <expr><operator pos:line="11" pos:column="12">(<pos:position pos:line="11" pos:column="13"/></operator><operator pos:line="11" pos:column="13">-<pos:position pos:line="11" pos:column="14"/></operator><literal type="number" pos:line="11" pos:column="14">1<pos:position pos:line="11" pos:column="15"/></literal><operator pos:line="11" pos:column="15">)<pos:position pos:line="11" pos:column="16"/></operator></expr>;<pos:position pos:line="11" pos:column="17"/></return>
  }<pos:position pos:line="12" pos:column="4"/></block></then></if>

<cpp:define pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">define<pos:position pos:line="14" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="14" pos:column="9">BAIL_OUT<pos:position pos:line="14" pos:column="17"/></name><parameter_list pos:line="14" pos:column="17">(<parameter><type><name pos:line="14" pos:column="18">s<pos:position pos:line="14" pos:column="19"/></name></type></parameter>)<pos:position pos:line="14" pos:column="20"/></parameter_list></cpp:macro>                                                            \
  <cpp:value pos:line="15" pos:column="3">do {                                                                         \
    if (ret_ident != NULL)                                                     \
      free(ret_ident);                                                         \
    ret_ident_num = 0;                                                         \
    return (s);                                                                \
  } while (0)<pos:position pos:line="20" pos:column="14"/></cpp:value></cpp:define>

  <expr_stmt><expr><name pos:line="22" pos:column="3">status<pos:position pos:line="22" pos:column="9"/></name> <operator pos:line="22" pos:column="10">=<pos:position pos:line="22" pos:column="11"/></operator> <call><name pos:line="22" pos:column="12">lcc_listval<pos:position pos:line="22" pos:column="23"/></name><argument_list pos:line="22" pos:column="23">(<argument><expr><name pos:line="22" pos:column="24">c<pos:position pos:line="22" pos:column="25"/></name></expr></argument>, <argument><expr><operator pos:line="22" pos:column="27">&amp;<pos:position pos:line="22" pos:column="32"/></operator><name pos:line="22" pos:column="28">ret_ident<pos:position pos:line="22" pos:column="37"/></name></expr></argument>, <argument><expr><operator pos:line="22" pos:column="39">&amp;<pos:position pos:line="22" pos:column="44"/></operator><name pos:line="22" pos:column="40">ret_ident_num<pos:position pos:line="22" pos:column="53"/></name></expr></argument>)<pos:position pos:line="22" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="55"/></expr_stmt>
  <if pos:line="23" pos:column="3">if <condition pos:line="23" pos:column="6">(<expr><name pos:line="23" pos:column="7">status<pos:position pos:line="23" pos:column="13"/></name> <operator pos:line="23" pos:column="14">!=<pos:position pos:line="23" pos:column="16"/></operator> <literal type="number" pos:line="23" pos:column="17">0<pos:position pos:line="23" pos:column="18"/></literal></expr>)<pos:position pos:line="23" pos:column="19"/></condition><then pos:line="23" pos:column="19"> <block pos:line="23" pos:column="20">{
    <expr_stmt><expr><call><name pos:line="24" pos:column="5">fprintf<pos:position pos:line="24" pos:column="12"/></name><argument_list pos:line="24" pos:column="12">(<argument><expr><name pos:line="24" pos:column="13">stderr<pos:position pos:line="24" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="24" pos:column="21">"ERROR: %s\n"<pos:position pos:line="24" pos:column="34"/></literal></expr></argument>, <argument><expr><call><name pos:line="24" pos:column="36">lcc_strerror<pos:position pos:line="24" pos:column="48"/></name><argument_list pos:line="24" pos:column="48">(<argument><expr><name pos:line="24" pos:column="49">c<pos:position pos:line="24" pos:column="50"/></name></expr></argument>)<pos:position pos:line="24" pos:column="51"/></argument_list></call></expr></argument>)<pos:position pos:line="24" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="53"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="25" pos:column="5">BAIL_OUT<pos:position pos:line="25" pos:column="13"/></name><argument_list pos:line="25" pos:column="13">(<argument><expr><name pos:line="25" pos:column="14">status<pos:position pos:line="25" pos:column="20"/></name></expr></argument>)<pos:position pos:line="25" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="22"/></expr_stmt>
  }<pos:position pos:line="26" pos:column="4"/></block></then></if>

  <for pos:line="28" pos:column="3">for <control pos:line="28" pos:column="7">(<init><decl><type><name pos:line="28" pos:column="8">size_t<pos:position pos:line="28" pos:column="14"/></name></type> <name pos:line="28" pos:column="15">i<pos:position pos:line="28" pos:column="16"/></name> <init pos:line="28" pos:column="17">= <expr><literal type="number" pos:line="28" pos:column="19">0<pos:position pos:line="28" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="28" pos:column="21"/></init> <condition><expr><name pos:line="28" pos:column="22">i<pos:position pos:line="28" pos:column="23"/></name> <operator pos:line="28" pos:column="24">&lt;<pos:position pos:line="28" pos:column="28"/></operator> <name pos:line="28" pos:column="26">ret_ident_num<pos:position pos:line="28" pos:column="39"/></name></expr>;<pos:position pos:line="28" pos:column="40"/></condition> <incr><expr><operator pos:line="28" pos:column="41">++<pos:position pos:line="28" pos:column="43"/></operator><name pos:line="28" pos:column="43">i<pos:position pos:line="28" pos:column="44"/></name></expr></incr>)<pos:position pos:line="28" pos:column="45"/></control> <block pos:line="28" pos:column="46">{
    <decl_stmt><decl><type><name pos:line="29" pos:column="5">char<pos:position pos:line="29" pos:column="9"/></name></type> <name><name pos:line="29" pos:column="10">id<pos:position pos:line="29" pos:column="12"/></name><index pos:line="29" pos:column="12">[<expr><literal type="number" pos:line="29" pos:column="13">1024<pos:position pos:line="29" pos:column="17"/></literal></expr>]<pos:position pos:line="29" pos:column="18"/></index></name></decl>;<pos:position pos:line="29" pos:column="19"/></decl_stmt>

    <expr_stmt><expr><name pos:line="31" pos:column="5">status<pos:position pos:line="31" pos:column="11"/></name> <operator pos:line="31" pos:column="12">=<pos:position pos:line="31" pos:column="13"/></operator> <call><name pos:line="31" pos:column="14">lcc_identifier_to_string<pos:position pos:line="31" pos:column="38"/></name><argument_list pos:line="31" pos:column="38">(<argument><expr><name pos:line="31" pos:column="39">c<pos:position pos:line="31" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="42">id<pos:position pos:line="31" pos:column="44"/></name></expr></argument>, <argument><expr><sizeof pos:line="31" pos:column="46">sizeof<argument_list pos:line="31" pos:column="52">(<argument><expr><name pos:line="31" pos:column="53">id<pos:position pos:line="31" pos:column="55"/></name></expr></argument>)<pos:position pos:line="31" pos:column="56"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="31" pos:column="58">ret_ident<pos:position pos:line="31" pos:column="67"/></name> <operator pos:line="31" pos:column="68">+<pos:position pos:line="31" pos:column="69"/></operator> <name pos:line="31" pos:column="70">i<pos:position pos:line="31" pos:column="71"/></name></expr></argument>)<pos:position pos:line="31" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="73"/></expr_stmt>
    <if pos:line="32" pos:column="5">if <condition pos:line="32" pos:column="8">(<expr><name pos:line="32" pos:column="9">status<pos:position pos:line="32" pos:column="15"/></name> <operator pos:line="32" pos:column="16">!=<pos:position pos:line="32" pos:column="18"/></operator> <literal type="number" pos:line="32" pos:column="19">0<pos:position pos:line="32" pos:column="20"/></literal></expr>)<pos:position pos:line="32" pos:column="21"/></condition><then pos:line="32" pos:column="21"> <block pos:line="32" pos:column="22">{
      <expr_stmt><expr><call><name pos:line="33" pos:column="7">fprintf<pos:position pos:line="33" pos:column="14"/></name><argument_list pos:line="33" pos:column="14">(<argument><expr><name pos:line="33" pos:column="15">stderr<pos:position pos:line="33" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="33" pos:column="23">"ERROR: listval: Failed to convert returned "<pos:position pos:line="33" pos:column="68"/></literal>
                      <literal type="string" pos:line="34" pos:column="23">"identifier to a string: %s\n"<pos:position pos:line="34" pos:column="53"/></literal></expr></argument>,
              <argument><expr><call><name pos:line="35" pos:column="15">lcc_strerror<pos:position pos:line="35" pos:column="27"/></name><argument_list pos:line="35" pos:column="27">(<argument><expr><name pos:line="35" pos:column="28">c<pos:position pos:line="35" pos:column="29"/></name></expr></argument>)<pos:position pos:line="35" pos:column="30"/></argument_list></call></expr></argument>)<pos:position pos:line="35" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="32"/></expr_stmt>
      <continue pos:line="36" pos:column="7">continue;<pos:position pos:line="36" pos:column="16"/></continue>
    }<pos:position pos:line="37" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="39" pos:column="5">printf<pos:position pos:line="39" pos:column="11"/></name><argument_list pos:line="39" pos:column="11">(<argument><expr><literal type="string" pos:line="39" pos:column="12">"%s\n"<pos:position pos:line="39" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="39" pos:column="20">id<pos:position pos:line="39" pos:column="22"/></name></expr></argument>)<pos:position pos:line="39" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="24"/></expr_stmt>
  }<pos:position pos:line="40" pos:column="4"/></block></for>
  <expr_stmt><expr><call><name pos:line="41" pos:column="3">BAIL_OUT<pos:position pos:line="41" pos:column="11"/></name><argument_list pos:line="41" pos:column="11">(<argument><expr><literal type="number" pos:line="41" pos:column="12">0<pos:position pos:line="41" pos:column="13"/></literal></expr></argument>)<pos:position pos:line="41" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="15"/></expr_stmt>
<cpp:undef pos:line="42" pos:column="1">#<cpp:directive pos:line="42" pos:column="2">undef<pos:position pos:line="42" pos:column="7"/></cpp:directive> <name pos:line="42" pos:column="8">BAIL_OUT<pos:position pos:line="42" pos:column="16"/></name></cpp:undef>
}<pos:position pos:line="43" pos:column="2"/></block></function></unit>
