<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1451_collectd-5.1.0.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">ted_config<pos:position pos:line="1" pos:column="22"/></name> <parameter_list pos:line="1" pos:column="23">(<parameter><decl><type><specifier pos:line="1" pos:column="24">const<pos:position pos:line="1" pos:column="29"/></specifier> <name pos:line="1" pos:column="30">char<pos:position pos:line="1" pos:column="34"/></name> <modifier pos:line="1" pos:column="35">*<pos:position pos:line="1" pos:column="36"/></modifier></type><name pos:line="1" pos:column="36">key<pos:position pos:line="1" pos:column="39"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="41">const<pos:position pos:line="1" pos:column="46"/></specifier> <name pos:line="1" pos:column="47">char<pos:position pos:line="1" pos:column="51"/></name> <modifier pos:line="1" pos:column="52">*<pos:position pos:line="1" pos:column="53"/></modifier></type><name pos:line="1" pos:column="53">value<pos:position pos:line="1" pos:column="58"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="59"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <if pos:line="3" pos:column="5">if <condition pos:line="3" pos:column="8">(<expr><call><name pos:line="3" pos:column="9">strcasecmp<pos:position pos:line="3" pos:column="19"/></name> <argument_list pos:line="3" pos:column="20">(<argument><expr><literal type="string" pos:line="3" pos:column="21">"Device"<pos:position pos:line="3" pos:column="29"/></literal></expr></argument>, <argument><expr><name pos:line="3" pos:column="31">key<pos:position pos:line="3" pos:column="34"/></name></expr></argument>)<pos:position pos:line="3" pos:column="35"/></argument_list></call> <operator pos:line="3" pos:column="36">==<pos:position pos:line="3" pos:column="38"/></operator> <literal type="number" pos:line="3" pos:column="39">0<pos:position pos:line="3" pos:column="40"/></literal></expr>)<pos:position pos:line="3" pos:column="41"/></condition><then pos:line="3" pos:column="41">
    <block pos:line="4" pos:column="5">{
        <expr_stmt><expr><call><name pos:line="5" pos:column="9">sfree<pos:position pos:line="5" pos:column="14"/></name> <argument_list pos:line="5" pos:column="15">(<argument><expr><name pos:line="5" pos:column="16">conf_device<pos:position pos:line="5" pos:column="27"/></name></expr></argument>)<pos:position pos:line="5" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="29"/></expr_stmt>
        <expr_stmt><expr><name pos:line="6" pos:column="9">conf_device<pos:position pos:line="6" pos:column="20"/></name> <operator pos:line="6" pos:column="21">=<pos:position pos:line="6" pos:column="22"/></operator> <call><name pos:line="6" pos:column="23">sstrdup<pos:position pos:line="6" pos:column="30"/></name> <argument_list pos:line="6" pos:column="31">(<argument><expr><name pos:line="6" pos:column="32">value<pos:position pos:line="6" pos:column="37"/></name></expr></argument>)<pos:position pos:line="6" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="39"/></expr_stmt>
    }<pos:position pos:line="7" pos:column="6"/></block></then>
    <elseif pos:line="8" pos:column="5">else <if pos:line="8" pos:column="10">if <condition pos:line="8" pos:column="13">(<expr><call><name pos:line="8" pos:column="14">strcasecmp<pos:position pos:line="8" pos:column="24"/></name> <argument_list pos:line="8" pos:column="25">(<argument><expr><literal type="string" pos:line="8" pos:column="26">"Retries"<pos:position pos:line="8" pos:column="35"/></literal></expr></argument>, <argument><expr><name pos:line="8" pos:column="37">key<pos:position pos:line="8" pos:column="40"/></name></expr></argument>)<pos:position pos:line="8" pos:column="41"/></argument_list></call> <operator pos:line="8" pos:column="42">==<pos:position pos:line="8" pos:column="44"/></operator> <literal type="number" pos:line="8" pos:column="45">0<pos:position pos:line="8" pos:column="46"/></literal></expr>)<pos:position pos:line="8" pos:column="47"/></condition><then pos:line="8" pos:column="47">
    <block pos:line="9" pos:column="5">{
        <decl_stmt><decl><type><name pos:line="10" pos:column="9">int<pos:position pos:line="10" pos:column="12"/></name></type> <name pos:line="10" pos:column="13">tmp<pos:position pos:line="10" pos:column="16"/></name></decl>;<pos:position pos:line="10" pos:column="17"/></decl_stmt>

        <expr_stmt><expr><name pos:line="12" pos:column="9">tmp<pos:position pos:line="12" pos:column="12"/></name> <operator pos:line="12" pos:column="13">=<pos:position pos:line="12" pos:column="14"/></operator> <call><name pos:line="12" pos:column="15">atoi<pos:position pos:line="12" pos:column="19"/></name> <argument_list pos:line="12" pos:column="20">(<argument><expr><name pos:line="12" pos:column="21">value<pos:position pos:line="12" pos:column="26"/></name></expr></argument>)<pos:position pos:line="12" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="28"/></expr_stmt>
        <if pos:line="13" pos:column="9">if <condition pos:line="13" pos:column="12">(<expr><name pos:line="13" pos:column="13">tmp<pos:position pos:line="13" pos:column="16"/></name> <operator pos:line="13" pos:column="17">&lt;<pos:position pos:line="13" pos:column="21"/></operator> <literal type="number" pos:line="13" pos:column="19">0<pos:position pos:line="13" pos:column="20"/></literal></expr>)<pos:position pos:line="13" pos:column="21"/></condition><then pos:line="13" pos:column="21">
        <block pos:line="14" pos:column="9">{
            <expr_stmt><expr><call><name pos:line="15" pos:column="13">WARNING<pos:position pos:line="15" pos:column="20"/></name> <argument_list pos:line="15" pos:column="21">(<argument><expr><literal type="string" pos:line="15" pos:column="22">"ted plugin: Invalid retry count: %i"<pos:position pos:line="15" pos:column="59"/></literal></expr></argument>, <argument><expr><name pos:line="15" pos:column="61">tmp<pos:position pos:line="15" pos:column="64"/></name></expr></argument>)<pos:position pos:line="15" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="66"/></expr_stmt>
            <return pos:line="16" pos:column="13">return <expr><operator pos:line="16" pos:column="20">(<pos:position pos:line="16" pos:column="21"/></operator><literal type="number" pos:line="16" pos:column="21">1<pos:position pos:line="16" pos:column="22"/></literal><operator pos:line="16" pos:column="22">)<pos:position pos:line="16" pos:column="23"/></operator></expr>;<pos:position pos:line="16" pos:column="24"/></return>
        }<pos:position pos:line="17" pos:column="10"/></block></then></if>
        <expr_stmt><expr><name pos:line="18" pos:column="9">conf_retries<pos:position pos:line="18" pos:column="21"/></name> <operator pos:line="18" pos:column="22">=<pos:position pos:line="18" pos:column="23"/></operator> <name pos:line="18" pos:column="24">tmp<pos:position pos:line="18" pos:column="27"/></name></expr>;<pos:position pos:line="18" pos:column="28"/></expr_stmt>
    }<pos:position pos:line="19" pos:column="6"/></block></then></if></elseif>
    <else pos:line="20" pos:column="5">else
    <block pos:line="21" pos:column="5">{
        <expr_stmt><expr><call><name pos:line="22" pos:column="9">ERROR<pos:position pos:line="22" pos:column="14"/></name> <argument_list pos:line="22" pos:column="15">(<argument><expr><literal type="string" pos:line="22" pos:column="16">"ted plugin: Unknown config option: %s"<pos:position pos:line="22" pos:column="55"/></literal></expr></argument>, <argument><expr><name pos:line="22" pos:column="57">key<pos:position pos:line="22" pos:column="60"/></name></expr></argument>)<pos:position pos:line="22" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="62"/></expr_stmt>
        <return pos:line="23" pos:column="9">return <expr><operator pos:line="23" pos:column="16">(<pos:position pos:line="23" pos:column="17"/></operator><operator pos:line="23" pos:column="17">-<pos:position pos:line="23" pos:column="18"/></operator><literal type="number" pos:line="23" pos:column="18">1<pos:position pos:line="23" pos:column="19"/></literal><operator pos:line="23" pos:column="19">)<pos:position pos:line="23" pos:column="20"/></operator></expr>;<pos:position pos:line="23" pos:column="21"/></return>
    }<pos:position pos:line="24" pos:column="6"/></block></else></if>

    <return pos:line="26" pos:column="5">return <expr><operator pos:line="26" pos:column="12">(<pos:position pos:line="26" pos:column="13"/></operator><literal type="number" pos:line="26" pos:column="13">0<pos:position pos:line="26" pos:column="14"/></literal><operator pos:line="26" pos:column="14">)<pos:position pos:line="26" pos:column="15"/></operator></expr>;<pos:position pos:line="26" pos:column="16"/></return>
}<pos:position pos:line="27" pos:column="2"/></block></function></unit>
