<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_237_collectd-5.7.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">dpdk_shm_init<pos:position pos:line="1" pos:column="25"/></name><parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><name pos:line="1" pos:column="26">size_t<pos:position pos:line="1" pos:column="32"/></name></type> <name pos:line="1" pos:column="33">size<pos:position pos:line="1" pos:column="37"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="38"/></parameter_list> <block pos:line="1" pos:column="39">{
  <comment type="block" pos:line="2" pos:column="3">/*
   * Check if SHM is already configured: when config items are provided, the
   * config function initializes SHM. If there is no config, then init() will
   * just return.
   */</comment>
  <if pos:line="7" pos:column="3">if <condition pos:line="7" pos:column="6">(<expr><name pos:line="7" pos:column="7">g_configuration<pos:position pos:line="7" pos:column="22"/></name></expr>)<pos:position pos:line="7" pos:column="23"/></condition><then pos:line="7" pos:column="23">
    <block type="pseudo"><return pos:line="8" pos:column="5">return <expr><literal type="number" pos:line="8" pos:column="12">0<pos:position pos:line="8" pos:column="13"/></literal></expr>;<pos:position pos:line="8" pos:column="14"/></return></block></then></if>

  <decl_stmt><decl><type><name pos:line="10" pos:column="3">char<pos:position pos:line="10" pos:column="7"/></name></type> <name><name pos:line="10" pos:column="8">errbuf<pos:position pos:line="10" pos:column="14"/></name><index pos:line="10" pos:column="14">[<expr><name pos:line="10" pos:column="15">ERR_BUF_SIZE<pos:position pos:line="10" pos:column="27"/></name></expr>]<pos:position pos:line="10" pos:column="28"/></index></name></decl>;<pos:position pos:line="10" pos:column="29"/></decl_stmt>

  <comment type="block" pos:line="12" pos:column="3">/* Create and open a new object, or open an existing object. */</comment>
  <decl_stmt><decl><type><name pos:line="13" pos:column="3">int<pos:position pos:line="13" pos:column="6"/></name></type> <name pos:line="13" pos:column="7">fd<pos:position pos:line="13" pos:column="9"/></name> <init pos:line="13" pos:column="10">= <expr><call><name pos:line="13" pos:column="12">shm_open<pos:position pos:line="13" pos:column="20"/></name><argument_list pos:line="13" pos:column="20">(<argument><expr><name pos:line="13" pos:column="21">DPDK_SHM_NAME<pos:position pos:line="13" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="36">O_CREAT<pos:position pos:line="13" pos:column="43"/></name> <operator pos:line="13" pos:column="44">|<pos:position pos:line="13" pos:column="45"/></operator> <name pos:line="13" pos:column="46">O_TRUNC<pos:position pos:line="13" pos:column="53"/></name> <operator pos:line="13" pos:column="54">|<pos:position pos:line="13" pos:column="55"/></operator> <name pos:line="13" pos:column="56">O_RDWR<pos:position pos:line="13" pos:column="62"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="13" pos:column="64">0666<pos:position pos:line="13" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="69"/></argument_list></call></expr></init></decl>;<pos:position pos:line="13" pos:column="70"/></decl_stmt>
  <if pos:line="14" pos:column="3">if <condition pos:line="14" pos:column="6">(<expr><name pos:line="14" pos:column="7">fd<pos:position pos:line="14" pos:column="9"/></name> <operator pos:line="14" pos:column="10">&lt;<pos:position pos:line="14" pos:column="14"/></operator> <literal type="number" pos:line="14" pos:column="12">0<pos:position pos:line="14" pos:column="13"/></literal></expr>)<pos:position pos:line="14" pos:column="14"/></condition><then pos:line="14" pos:column="14"> <block pos:line="14" pos:column="15">{
    <expr_stmt><expr><call><name pos:line="15" pos:column="5">WARNING<pos:position pos:line="15" pos:column="12"/></name><argument_list pos:line="15" pos:column="12">(<argument><expr><literal type="string" pos:line="15" pos:column="13">"dpdkstat:Failed to open %s as SHM:%s"<pos:position pos:line="15" pos:column="51"/></literal></expr></argument>, <argument><expr><name pos:line="15" pos:column="53">DPDK_SHM_NAME<pos:position pos:line="15" pos:column="66"/></name></expr></argument>,
            <argument><expr><call><name pos:line="16" pos:column="13">sstrerror<pos:position pos:line="16" pos:column="22"/></name><argument_list pos:line="16" pos:column="22">(<argument><expr><name pos:line="16" pos:column="23">errno<pos:position pos:line="16" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="30">errbuf<pos:position pos:line="16" pos:column="36"/></name></expr></argument>, <argument><expr><sizeof pos:line="16" pos:column="38">sizeof<argument_list pos:line="16" pos:column="44">(<argument><expr><name pos:line="16" pos:column="45">errbuf<pos:position pos:line="16" pos:column="51"/></name></expr></argument>)<pos:position pos:line="16" pos:column="52"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="16" pos:column="53"/></argument_list></call></expr></argument>)<pos:position pos:line="16" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="55"/></expr_stmt>
    <goto pos:line="17" pos:column="5">goto <name pos:line="17" pos:column="10">fail<pos:position pos:line="17" pos:column="14"/></name>;<pos:position pos:line="17" pos:column="15"/></goto>
  }<pos:position pos:line="18" pos:column="4"/></block></then></if>
  <comment type="block" pos:line="19" pos:column="3">/* Set the size of the shared memory object. */</comment>
  <decl_stmt><decl><type><name pos:line="20" pos:column="3">int<pos:position pos:line="20" pos:column="6"/></name></type> <name pos:line="20" pos:column="7">ret<pos:position pos:line="20" pos:column="10"/></name> <init pos:line="20" pos:column="11">= <expr><call><name pos:line="20" pos:column="13">ftruncate<pos:position pos:line="20" pos:column="22"/></name><argument_list pos:line="20" pos:column="22">(<argument><expr><name pos:line="20" pos:column="23">fd<pos:position pos:line="20" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="27">size<pos:position pos:line="20" pos:column="31"/></name></expr></argument>)<pos:position pos:line="20" pos:column="32"/></argument_list></call></expr></init></decl>;<pos:position pos:line="20" pos:column="33"/></decl_stmt>
  <if pos:line="21" pos:column="3">if <condition pos:line="21" pos:column="6">(<expr><name pos:line="21" pos:column="7">ret<pos:position pos:line="21" pos:column="10"/></name> <operator pos:line="21" pos:column="11">!=<pos:position pos:line="21" pos:column="13"/></operator> <literal type="number" pos:line="21" pos:column="14">0<pos:position pos:line="21" pos:column="15"/></literal></expr>)<pos:position pos:line="21" pos:column="16"/></condition><then pos:line="21" pos:column="16"> <block pos:line="21" pos:column="17">{
    <expr_stmt><expr><call><name pos:line="22" pos:column="5">WARNING<pos:position pos:line="22" pos:column="12"/></name><argument_list pos:line="22" pos:column="12">(<argument><expr><literal type="string" pos:line="22" pos:column="13">"dpdkstat:Failed to resize SHM:%s"<pos:position pos:line="22" pos:column="47"/></literal></expr></argument>,
            <argument><expr><call><name pos:line="23" pos:column="13">sstrerror<pos:position pos:line="23" pos:column="22"/></name><argument_list pos:line="23" pos:column="22">(<argument><expr><name pos:line="23" pos:column="23">errno<pos:position pos:line="23" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="30">errbuf<pos:position pos:line="23" pos:column="36"/></name></expr></argument>, <argument><expr><sizeof pos:line="23" pos:column="38">sizeof<argument_list pos:line="23" pos:column="44">(<argument><expr><name pos:line="23" pos:column="45">errbuf<pos:position pos:line="23" pos:column="51"/></name></expr></argument>)<pos:position pos:line="23" pos:column="52"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="23" pos:column="53"/></argument_list></call></expr></argument>)<pos:position pos:line="23" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="55"/></expr_stmt>
    <goto pos:line="24" pos:column="5">goto <name pos:line="24" pos:column="10">fail_close<pos:position pos:line="24" pos:column="20"/></name>;<pos:position pos:line="24" pos:column="21"/></goto>
  }<pos:position pos:line="25" pos:column="4"/></block></then></if>
  <comment type="block" pos:line="26" pos:column="3">/* Map the shared memory object into this process' virtual address space. */</comment>
  <expr_stmt><expr><name pos:line="27" pos:column="3">g_configuration<pos:position pos:line="27" pos:column="18"/></name> <operator pos:line="27" pos:column="19">=<pos:position pos:line="27" pos:column="20"/></operator> <call><name pos:line="27" pos:column="21">mmap<pos:position pos:line="27" pos:column="25"/></name><argument_list pos:line="27" pos:column="25">(<argument><expr><literal type="number" pos:line="27" pos:column="26">0<pos:position pos:line="27" pos:column="27"/></literal></expr></argument>, <argument><expr><name pos:line="27" pos:column="29">size<pos:position pos:line="27" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="35">PROT_READ<pos:position pos:line="27" pos:column="44"/></name> <operator pos:line="27" pos:column="45">|<pos:position pos:line="27" pos:column="46"/></operator> <name pos:line="27" pos:column="47">PROT_WRITE<pos:position pos:line="27" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="59">MAP_SHARED<pos:position pos:line="27" pos:column="69"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="71">fd<pos:position pos:line="27" pos:column="73"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="27" pos:column="75">0<pos:position pos:line="27" pos:column="76"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="78"/></expr_stmt>
  <if pos:line="28" pos:column="3">if <condition pos:line="28" pos:column="6">(<expr><name pos:line="28" pos:column="7">g_configuration<pos:position pos:line="28" pos:column="22"/></name> <operator pos:line="28" pos:column="23">==<pos:position pos:line="28" pos:column="25"/></operator> <name pos:line="28" pos:column="26">MAP_FAILED<pos:position pos:line="28" pos:column="36"/></name></expr>)<pos:position pos:line="28" pos:column="37"/></condition><then pos:line="28" pos:column="37"> <block pos:line="28" pos:column="38">{
    <expr_stmt><expr><call><name pos:line="29" pos:column="5">WARNING<pos:position pos:line="29" pos:column="12"/></name><argument_list pos:line="29" pos:column="12">(<argument><expr><literal type="string" pos:line="29" pos:column="13">"dpdkstat:Failed to mmap SHM:%s"<pos:position pos:line="29" pos:column="45"/></literal></expr></argument>,
            <argument><expr><call><name pos:line="30" pos:column="13">sstrerror<pos:position pos:line="30" pos:column="22"/></name><argument_list pos:line="30" pos:column="22">(<argument><expr><name pos:line="30" pos:column="23">errno<pos:position pos:line="30" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="30">errbuf<pos:position pos:line="30" pos:column="36"/></name></expr></argument>, <argument><expr><sizeof pos:line="30" pos:column="38">sizeof<argument_list pos:line="30" pos:column="44">(<argument><expr><name pos:line="30" pos:column="45">errbuf<pos:position pos:line="30" pos:column="51"/></name></expr></argument>)<pos:position pos:line="30" pos:column="52"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="30" pos:column="53"/></argument_list></call></expr></argument>)<pos:position pos:line="30" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="55"/></expr_stmt>
    <goto pos:line="31" pos:column="5">goto <name pos:line="31" pos:column="10">fail_close<pos:position pos:line="31" pos:column="20"/></name>;<pos:position pos:line="31" pos:column="21"/></goto>
  }<pos:position pos:line="32" pos:column="4"/></block></then></if>
  <comment type="block" pos:line="33" pos:column="3">/*
   * Close the file descriptor, the shared memory object still exists
   * and can only be removed by calling shm_unlink().
   */</comment>
  <expr_stmt><expr><call><name pos:line="37" pos:column="3">close<pos:position pos:line="37" pos:column="8"/></name><argument_list pos:line="37" pos:column="8">(<argument><expr><name pos:line="37" pos:column="9">fd<pos:position pos:line="37" pos:column="11"/></name></expr></argument>)<pos:position pos:line="37" pos:column="12"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="13"/></expr_stmt>

  <comment type="block" pos:line="39" pos:column="3">/* Initialize g_configuration. */</comment>
  <expr_stmt><expr><call><name pos:line="40" pos:column="3">memset<pos:position pos:line="40" pos:column="9"/></name><argument_list pos:line="40" pos:column="9">(<argument><expr><name pos:line="40" pos:column="10">g_configuration<pos:position pos:line="40" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="40" pos:column="27">0<pos:position pos:line="40" pos:column="28"/></literal></expr></argument>, <argument><expr><name pos:line="40" pos:column="30">size<pos:position pos:line="40" pos:column="34"/></name></expr></argument>)<pos:position pos:line="40" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="36"/></expr_stmt>

  <comment type="block" pos:line="42" pos:column="3">/* Initialize the semaphores for SHM use */</comment>
  <decl_stmt><decl><type><name pos:line="43" pos:column="3">int<pos:position pos:line="43" pos:column="6"/></name></type> <name pos:line="43" pos:column="7">err<pos:position pos:line="43" pos:column="10"/></name> <init pos:line="43" pos:column="11">= <expr><call><name pos:line="43" pos:column="13">sem_init<pos:position pos:line="43" pos:column="21"/></name><argument_list pos:line="43" pos:column="21">(<argument><expr><operator pos:line="43" pos:column="22">&amp;<pos:position pos:line="43" pos:column="27"/></operator><name><name pos:line="43" pos:column="23">g_configuration<pos:position pos:line="43" pos:column="38"/></name><operator pos:line="43" pos:column="38">-&gt;<pos:position pos:line="43" pos:column="43"/></operator><name pos:line="43" pos:column="40">sema_helper_get_stats<pos:position pos:line="43" pos:column="61"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="43" pos:column="63">1<pos:position pos:line="43" pos:column="64"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="43" pos:column="66">0<pos:position pos:line="43" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="43" pos:column="68"/></argument_list></call></expr></init></decl>;<pos:position pos:line="43" pos:column="69"/></decl_stmt>
  <if pos:line="44" pos:column="3">if <condition pos:line="44" pos:column="6">(<expr><name pos:line="44" pos:column="7">err<pos:position pos:line="44" pos:column="10"/></name></expr>)<pos:position pos:line="44" pos:column="11"/></condition><then pos:line="44" pos:column="11"> <block pos:line="44" pos:column="12">{
    <expr_stmt><expr><call><name pos:line="45" pos:column="5">ERROR<pos:position pos:line="45" pos:column="10"/></name><argument_list pos:line="45" pos:column="10">(<argument><expr><literal type="string" pos:line="45" pos:column="11">"dpdkstat semaphore init failed: %s"<pos:position pos:line="45" pos:column="47"/></literal></expr></argument>,
          <argument><expr><call><name pos:line="46" pos:column="11">sstrerror<pos:position pos:line="46" pos:column="20"/></name><argument_list pos:line="46" pos:column="20">(<argument><expr><name pos:line="46" pos:column="21">errno<pos:position pos:line="46" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="28">errbuf<pos:position pos:line="46" pos:column="34"/></name></expr></argument>, <argument><expr><sizeof pos:line="46" pos:column="36">sizeof<argument_list pos:line="46" pos:column="42">(<argument><expr><name pos:line="46" pos:column="43">errbuf<pos:position pos:line="46" pos:column="49"/></name></expr></argument>)<pos:position pos:line="46" pos:column="50"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="46" pos:column="51"/></argument_list></call></expr></argument>)<pos:position pos:line="46" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="53"/></expr_stmt>
    <goto pos:line="47" pos:column="5">goto <name pos:line="47" pos:column="10">close<pos:position pos:line="47" pos:column="15"/></name>;<pos:position pos:line="47" pos:column="16"/></goto>
  }<pos:position pos:line="48" pos:column="4"/></block></then></if>
  <expr_stmt><expr><name pos:line="49" pos:column="3">err<pos:position pos:line="49" pos:column="6"/></name> <operator pos:line="49" pos:column="7">=<pos:position pos:line="49" pos:column="8"/></operator> <call><name pos:line="49" pos:column="9">sem_init<pos:position pos:line="49" pos:column="17"/></name><argument_list pos:line="49" pos:column="17">(<argument><expr><operator pos:line="49" pos:column="18">&amp;<pos:position pos:line="49" pos:column="23"/></operator><name><name pos:line="49" pos:column="19">g_configuration<pos:position pos:line="49" pos:column="34"/></name><operator pos:line="49" pos:column="34">-&gt;<pos:position pos:line="49" pos:column="39"/></operator><name pos:line="49" pos:column="36">sema_stats_in_shm<pos:position pos:line="49" pos:column="53"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="49" pos:column="55">1<pos:position pos:line="49" pos:column="56"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="49" pos:column="58">0<pos:position pos:line="49" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="49" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="61"/></expr_stmt>
  <if pos:line="50" pos:column="3">if <condition pos:line="50" pos:column="6">(<expr><name pos:line="50" pos:column="7">err<pos:position pos:line="50" pos:column="10"/></name></expr>)<pos:position pos:line="50" pos:column="11"/></condition><then pos:line="50" pos:column="11"> <block pos:line="50" pos:column="12">{
    <expr_stmt><expr><call><name pos:line="51" pos:column="5">ERROR<pos:position pos:line="51" pos:column="10"/></name><argument_list pos:line="51" pos:column="10">(<argument><expr><literal type="string" pos:line="51" pos:column="11">"dpdkstat semaphore init failed: %s"<pos:position pos:line="51" pos:column="47"/></literal></expr></argument>,
          <argument><expr><call><name pos:line="52" pos:column="11">sstrerror<pos:position pos:line="52" pos:column="20"/></name><argument_list pos:line="52" pos:column="20">(<argument><expr><name pos:line="52" pos:column="21">errno<pos:position pos:line="52" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="28">errbuf<pos:position pos:line="52" pos:column="34"/></name></expr></argument>, <argument><expr><sizeof pos:line="52" pos:column="36">sizeof<argument_list pos:line="52" pos:column="42">(<argument><expr><name pos:line="52" pos:column="43">errbuf<pos:position pos:line="52" pos:column="49"/></name></expr></argument>)<pos:position pos:line="52" pos:column="50"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="52" pos:column="51"/></argument_list></call></expr></argument>)<pos:position pos:line="52" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="53"/></expr_stmt>
    <goto pos:line="53" pos:column="5">goto <name pos:line="53" pos:column="10">close<pos:position pos:line="53" pos:column="15"/></name>;<pos:position pos:line="53" pos:column="16"/></goto>
  }<pos:position pos:line="54" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name><name pos:line="56" pos:column="3">g_configuration<pos:position pos:line="56" pos:column="18"/></name><operator pos:line="56" pos:column="18">-&gt;<pos:position pos:line="56" pos:column="23"/></operator><name pos:line="56" pos:column="20">xstats<pos:position pos:line="56" pos:column="26"/></name></name> <operator pos:line="56" pos:column="27">=<pos:position pos:line="56" pos:column="28"/></operator> <name pos:line="56" pos:column="29">NULL<pos:position pos:line="56" pos:column="33"/></name></expr>;<pos:position pos:line="56" pos:column="34"/></expr_stmt>

  <return pos:line="58" pos:column="3">return <expr><literal type="number" pos:line="58" pos:column="10">0<pos:position pos:line="58" pos:column="11"/></literal></expr>;<pos:position pos:line="58" pos:column="12"/></return>

<label><name pos:line="60" pos:column="1">fail_close<pos:position pos:line="60" pos:column="11"/></name>:<pos:position pos:line="60" pos:column="12"/></label>
  <expr_stmt><expr><call><name pos:line="61" pos:column="3">close<pos:position pos:line="61" pos:column="8"/></name><argument_list pos:line="61" pos:column="8">(<argument><expr><name pos:line="61" pos:column="9">fd<pos:position pos:line="61" pos:column="11"/></name></expr></argument>)<pos:position pos:line="61" pos:column="12"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="13"/></expr_stmt>
<label><name pos:line="62" pos:column="1">fail<pos:position pos:line="62" pos:column="5"/></name>:<pos:position pos:line="62" pos:column="6"/></label>
  <comment type="block" pos:line="63" pos:column="3">/* Reset to zero, as it was set to MAP_FAILED aka: (void *)-1. Avoid
   * an issue if collectd attempts to run this plugin failure.
   */</comment>
  <expr_stmt><expr><name pos:line="66" pos:column="3">g_configuration<pos:position pos:line="66" pos:column="18"/></name> <operator pos:line="66" pos:column="19">=<pos:position pos:line="66" pos:column="20"/></operator> <literal type="number" pos:line="66" pos:column="21">0<pos:position pos:line="66" pos:column="22"/></literal></expr>;<pos:position pos:line="66" pos:column="23"/></expr_stmt>
  <return pos:line="67" pos:column="3">return <expr><operator pos:line="67" pos:column="10">-<pos:position pos:line="67" pos:column="11"/></operator><literal type="number" pos:line="67" pos:column="11">1<pos:position pos:line="67" pos:column="12"/></literal></expr>;<pos:position pos:line="67" pos:column="13"/></return>
}<pos:position pos:line="68" pos:column="2"/></block></function></unit>
