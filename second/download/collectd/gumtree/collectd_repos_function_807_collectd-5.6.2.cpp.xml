<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_807_collectd-5.6.2.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">email_init<pos:position pos:line="1" pos:column="22"/></name><parameter_list pos:line="1" pos:column="22">(<parameter><decl><type><name pos:line="1" pos:column="23">void<pos:position pos:line="1" pos:column="27"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="28"/></parameter_list> <block pos:line="1" pos:column="29">{
  <if pos:line="2" pos:column="3">if <condition pos:line="2" pos:column="6">(<expr><call><name pos:line="2" pos:column="7">plugin_thread_create<pos:position pos:line="2" pos:column="27"/></name><argument_list pos:line="2" pos:column="27">(<argument><expr><operator pos:line="2" pos:column="28">&amp;<pos:position pos:line="2" pos:column="33"/></operator><name pos:line="2" pos:column="29">connector<pos:position pos:line="2" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="2" pos:column="40">NULL<pos:position pos:line="2" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="2" pos:column="46">open_connection<pos:position pos:line="2" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="2" pos:column="63">NULL<pos:position pos:line="2" pos:column="67"/></name></expr></argument>)<pos:position pos:line="2" pos:column="68"/></argument_list></call> <operator pos:line="2" pos:column="69">!=<pos:position pos:line="2" pos:column="71"/></operator> <literal type="number" pos:line="2" pos:column="72">0<pos:position pos:line="2" pos:column="73"/></literal></expr>)<pos:position pos:line="2" pos:column="74"/></condition><then pos:line="2" pos:column="74"> <block pos:line="2" pos:column="75">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">char<pos:position pos:line="3" pos:column="9"/></name></type> <name><name pos:line="3" pos:column="10">errbuf<pos:position pos:line="3" pos:column="16"/></name><index pos:line="3" pos:column="16">[<expr><literal type="number" pos:line="3" pos:column="17">1024<pos:position pos:line="3" pos:column="21"/></literal></expr>]<pos:position pos:line="3" pos:column="22"/></index></name></decl>;<pos:position pos:line="3" pos:column="23"/></decl_stmt>
    <expr_stmt><expr><name pos:line="4" pos:column="5">disabled<pos:position pos:line="4" pos:column="13"/></name> <operator pos:line="4" pos:column="14">=<pos:position pos:line="4" pos:column="15"/></operator> <literal type="number" pos:line="4" pos:column="16">1<pos:position pos:line="4" pos:column="17"/></literal></expr>;<pos:position pos:line="4" pos:column="18"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="5" pos:column="5">log_err<pos:position pos:line="5" pos:column="12"/></name><argument_list pos:line="5" pos:column="12">(<argument><expr><literal type="string" pos:line="5" pos:column="13">"plugin_thread_create() failed: %s"<pos:position pos:line="5" pos:column="48"/></literal></expr></argument>,
            <argument><expr><call><name pos:line="6" pos:column="13">sstrerror<pos:position pos:line="6" pos:column="22"/></name><argument_list pos:line="6" pos:column="22">(<argument><expr><name pos:line="6" pos:column="23">errno<pos:position pos:line="6" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="6" pos:column="30">errbuf<pos:position pos:line="6" pos:column="36"/></name></expr></argument>, <argument><expr><sizeof pos:line="6" pos:column="38">sizeof<argument_list pos:line="6" pos:column="44">(<argument><expr><name pos:line="6" pos:column="45">errbuf<pos:position pos:line="6" pos:column="51"/></name></expr></argument>)<pos:position pos:line="6" pos:column="52"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="6" pos:column="53"/></argument_list></call></expr></argument>)<pos:position pos:line="6" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="55"/></expr_stmt>
    <return pos:line="7" pos:column="5">return <expr><operator pos:line="7" pos:column="12">(<pos:position pos:line="7" pos:column="13"/></operator><operator pos:line="7" pos:column="13">-<pos:position pos:line="7" pos:column="14"/></operator><literal type="number" pos:line="7" pos:column="14">1<pos:position pos:line="7" pos:column="15"/></literal><operator pos:line="7" pos:column="15">)<pos:position pos:line="7" pos:column="16"/></operator></expr>;<pos:position pos:line="7" pos:column="17"/></return>
  }<pos:position pos:line="8" pos:column="4"/></block></then></if>

  <return pos:line="10" pos:column="3">return <expr><operator pos:line="10" pos:column="10">(<pos:position pos:line="10" pos:column="11"/></operator><literal type="number" pos:line="10" pos:column="11">0<pos:position pos:line="10" pos:column="12"/></literal><operator pos:line="10" pos:column="12">)<pos:position pos:line="10" pos:column="13"/></operator></expr>;<pos:position pos:line="10" pos:column="14"/></return>
}<pos:position pos:line="11" pos:column="2"/></block></function></unit>
