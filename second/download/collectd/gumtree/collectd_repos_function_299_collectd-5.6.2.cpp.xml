<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_299_collectd-5.6.2.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">kafka_config<pos:position pos:line="1" pos:column="24"/></name><parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><name pos:line="1" pos:column="25">oconfig_item_t<pos:position pos:line="1" pos:column="39"/></name> <modifier pos:line="1" pos:column="40">*<pos:position pos:line="1" pos:column="41"/></modifier></type><name pos:line="1" pos:column="41">ci<pos:position pos:line="1" pos:column="43"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="44"/></parameter_list> <comment type="block" pos:line="1" pos:column="45">/* {{{ */</comment>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">oconfig_item_t<pos:position pos:line="3" pos:column="17"/></name> <modifier pos:line="3" pos:column="18">*<pos:position pos:line="3" pos:column="19"/></modifier></type><name pos:line="3" pos:column="19">child<pos:position pos:line="3" pos:column="24"/></name></decl>;<pos:position pos:line="3" pos:column="25"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">rd_kafka_conf_t<pos:position pos:line="4" pos:column="18"/></name> <modifier pos:line="4" pos:column="19">*<pos:position pos:line="4" pos:column="20"/></modifier></type><name pos:line="4" pos:column="20">conf<pos:position pos:line="4" pos:column="24"/></name></decl>;<pos:position pos:line="4" pos:column="25"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">rd_kafka_conf_res_t<pos:position pos:line="5" pos:column="22"/></name></type> <name pos:line="5" pos:column="23">ret<pos:position pos:line="5" pos:column="26"/></name></decl>;<pos:position pos:line="5" pos:column="27"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">char<pos:position pos:line="6" pos:column="7"/></name></type> <name><name pos:line="6" pos:column="8">errbuf<pos:position pos:line="6" pos:column="14"/></name><index pos:line="6" pos:column="14">[<expr><literal type="number" pos:line="6" pos:column="15">1024<pos:position pos:line="6" pos:column="19"/></literal></expr>]<pos:position pos:line="6" pos:column="20"/></index></name></decl>;<pos:position pos:line="6" pos:column="21"/></decl_stmt>

  <if pos:line="8" pos:column="3">if <condition pos:line="8" pos:column="6">(<expr><operator pos:line="8" pos:column="7">(<pos:position pos:line="8" pos:column="8"/></operator><name pos:line="8" pos:column="8">conf<pos:position pos:line="8" pos:column="12"/></name> <operator pos:line="8" pos:column="13">=<pos:position pos:line="8" pos:column="14"/></operator> <call><name pos:line="8" pos:column="15">rd_kafka_conf_new<pos:position pos:line="8" pos:column="32"/></name><argument_list pos:line="8" pos:column="32">()<pos:position pos:line="8" pos:column="34"/></argument_list></call><operator pos:line="8" pos:column="34">)<pos:position pos:line="8" pos:column="35"/></operator> <operator pos:line="8" pos:column="36">==<pos:position pos:line="8" pos:column="38"/></operator> <name pos:line="8" pos:column="39">NULL<pos:position pos:line="8" pos:column="43"/></name></expr>)<pos:position pos:line="8" pos:column="44"/></condition><then pos:line="8" pos:column="44"> <block pos:line="8" pos:column="45">{
    <expr_stmt><expr><call><name pos:line="9" pos:column="5">WARNING<pos:position pos:line="9" pos:column="12"/></name><argument_list pos:line="9" pos:column="12">(<argument><expr><literal type="string" pos:line="9" pos:column="13">"cannot allocate kafka configuration."<pos:position pos:line="9" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="53"/></expr_stmt>
    <return pos:line="10" pos:column="5">return <expr><operator pos:line="10" pos:column="12">-<pos:position pos:line="10" pos:column="13"/></operator><literal type="number" pos:line="10" pos:column="13">1<pos:position pos:line="10" pos:column="14"/></literal></expr>;<pos:position pos:line="10" pos:column="15"/></return>
  }<pos:position pos:line="11" pos:column="4"/></block></then></if>
  <for pos:line="12" pos:column="3">for <control pos:line="12" pos:column="7">(<init><decl><type><name pos:line="12" pos:column="8">int<pos:position pos:line="12" pos:column="11"/></name></type> <name pos:line="12" pos:column="12">i<pos:position pos:line="12" pos:column="13"/></name> <init pos:line="12" pos:column="14">= <expr><literal type="number" pos:line="12" pos:column="16">0<pos:position pos:line="12" pos:column="17"/></literal></expr></init></decl>;<pos:position pos:line="12" pos:column="18"/></init> <condition><expr><name pos:line="12" pos:column="19">i<pos:position pos:line="12" pos:column="20"/></name> <operator pos:line="12" pos:column="21">&lt;<pos:position pos:line="12" pos:column="25"/></operator> <name><name pos:line="12" pos:column="23">ci<pos:position pos:line="12" pos:column="25"/></name><operator pos:line="12" pos:column="25">-&gt;<pos:position pos:line="12" pos:column="30"/></operator><name pos:line="12" pos:column="27">children_num<pos:position pos:line="12" pos:column="39"/></name></name></expr>;<pos:position pos:line="12" pos:column="40"/></condition> <incr><expr><name pos:line="12" pos:column="41">i<pos:position pos:line="12" pos:column="42"/></name><operator pos:line="12" pos:column="42">++<pos:position pos:line="12" pos:column="44"/></operator></expr></incr>)<pos:position pos:line="12" pos:column="45"/></control> <block pos:line="12" pos:column="46">{
    <expr_stmt><expr><name pos:line="13" pos:column="5">child<pos:position pos:line="13" pos:column="10"/></name> <operator pos:line="13" pos:column="11">=<pos:position pos:line="13" pos:column="12"/></operator> <operator pos:line="13" pos:column="13">&amp;<pos:position pos:line="13" pos:column="18"/></operator><name><name pos:line="13" pos:column="14">ci<pos:position pos:line="13" pos:column="16"/></name><operator pos:line="13" pos:column="16">-&gt;<pos:position pos:line="13" pos:column="21"/></operator><name pos:line="13" pos:column="18">children<pos:position pos:line="13" pos:column="26"/></name><index pos:line="13" pos:column="26">[<expr><name pos:line="13" pos:column="27">i<pos:position pos:line="13" pos:column="28"/></name></expr>]<pos:position pos:line="13" pos:column="29"/></index></name></expr>;<pos:position pos:line="13" pos:column="30"/></expr_stmt>

    <if pos:line="15" pos:column="5">if <condition pos:line="15" pos:column="8">(<expr><call><name pos:line="15" pos:column="9">strcasecmp<pos:position pos:line="15" pos:column="19"/></name><argument_list pos:line="15" pos:column="19">(<argument><expr><literal type="string" pos:line="15" pos:column="20">"Topic"<pos:position pos:line="15" pos:column="27"/></literal></expr></argument>, <argument><expr><name><name pos:line="15" pos:column="29">child<pos:position pos:line="15" pos:column="34"/></name><operator pos:line="15" pos:column="34">-&gt;<pos:position pos:line="15" pos:column="39"/></operator><name pos:line="15" pos:column="36">key<pos:position pos:line="15" pos:column="39"/></name></name></expr></argument>)<pos:position pos:line="15" pos:column="40"/></argument_list></call> <operator pos:line="15" pos:column="41">==<pos:position pos:line="15" pos:column="43"/></operator> <literal type="number" pos:line="15" pos:column="44">0<pos:position pos:line="15" pos:column="45"/></literal></expr>)<pos:position pos:line="15" pos:column="46"/></condition><then pos:line="15" pos:column="46"> <block pos:line="15" pos:column="47">{
      <expr_stmt><expr><call><name pos:line="16" pos:column="7">kafka_config_topic<pos:position pos:line="16" pos:column="25"/></name><argument_list pos:line="16" pos:column="25">(<argument><expr><name pos:line="16" pos:column="26">conf<pos:position pos:line="16" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="32">child<pos:position pos:line="16" pos:column="37"/></name></expr></argument>)<pos:position pos:line="16" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="39"/></expr_stmt>
    }<pos:position pos:line="17" pos:column="6"/></block></then> <elseif pos:line="17" pos:column="7">else <if pos:line="17" pos:column="12">if <condition pos:line="17" pos:column="15">(<expr><call><name pos:line="17" pos:column="16">strcasecmp<pos:position pos:line="17" pos:column="26"/></name><argument_list pos:line="17" pos:column="26">(<argument><expr><name><name pos:line="17" pos:column="27">child<pos:position pos:line="17" pos:column="32"/></name><operator pos:line="17" pos:column="32">-&gt;<pos:position pos:line="17" pos:column="37"/></operator><name pos:line="17" pos:column="34">key<pos:position pos:line="17" pos:column="37"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="17" pos:column="39">"Property"<pos:position pos:line="17" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="50"/></argument_list></call> <operator pos:line="17" pos:column="51">==<pos:position pos:line="17" pos:column="53"/></operator> <literal type="number" pos:line="17" pos:column="54">0<pos:position pos:line="17" pos:column="55"/></literal></expr>)<pos:position pos:line="17" pos:column="56"/></condition><then pos:line="17" pos:column="56"> <block pos:line="17" pos:column="57">{
      <decl_stmt><decl><type><name pos:line="18" pos:column="7">char<pos:position pos:line="18" pos:column="11"/></name> <modifier pos:line="18" pos:column="12">*<pos:position pos:line="18" pos:column="13"/></modifier></type><name pos:line="18" pos:column="13">key<pos:position pos:line="18" pos:column="16"/></name> <init pos:line="18" pos:column="17">= <expr><name pos:line="18" pos:column="19">NULL<pos:position pos:line="18" pos:column="23"/></name></expr></init></decl>;<pos:position pos:line="18" pos:column="24"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="19" pos:column="7">char<pos:position pos:line="19" pos:column="11"/></name> <modifier pos:line="19" pos:column="12">*<pos:position pos:line="19" pos:column="13"/></modifier></type><name pos:line="19" pos:column="13">val<pos:position pos:line="19" pos:column="16"/></name> <init pos:line="19" pos:column="17">= <expr><name pos:line="19" pos:column="19">NULL<pos:position pos:line="19" pos:column="23"/></name></expr></init></decl>;<pos:position pos:line="19" pos:column="24"/></decl_stmt>

      <if pos:line="21" pos:column="7">if <condition pos:line="21" pos:column="10">(<expr><name><name pos:line="21" pos:column="11">child<pos:position pos:line="21" pos:column="16"/></name><operator pos:line="21" pos:column="16">-&gt;<pos:position pos:line="21" pos:column="21"/></operator><name pos:line="21" pos:column="18">values_num<pos:position pos:line="21" pos:column="28"/></name></name> <operator pos:line="21" pos:column="29">!=<pos:position pos:line="21" pos:column="31"/></operator> <literal type="number" pos:line="21" pos:column="32">2<pos:position pos:line="21" pos:column="33"/></literal></expr>)<pos:position pos:line="21" pos:column="34"/></condition><then pos:line="21" pos:column="34"> <block pos:line="21" pos:column="35">{
        <expr_stmt><expr><call><name pos:line="22" pos:column="9">WARNING<pos:position pos:line="22" pos:column="16"/></name><argument_list pos:line="22" pos:column="16">(<argument><expr><literal type="string" pos:line="22" pos:column="17">"kafka properties need both a key and a value."<pos:position pos:line="22" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="66"/></expr_stmt>
        <goto pos:line="23" pos:column="9">goto <name pos:line="23" pos:column="14">errout<pos:position pos:line="23" pos:column="20"/></name>;<pos:position pos:line="23" pos:column="21"/></goto>
      }<pos:position pos:line="24" pos:column="8"/></block></then></if>
      <if pos:line="25" pos:column="7">if <condition pos:line="25" pos:column="10">(<expr><name><name pos:line="25" pos:column="11">child<pos:position pos:line="25" pos:column="16"/></name><operator pos:line="25" pos:column="16">-&gt;<pos:position pos:line="25" pos:column="21"/></operator><name pos:line="25" pos:column="18">values<pos:position pos:line="25" pos:column="24"/></name><index pos:line="25" pos:column="24">[<expr><literal type="number" pos:line="25" pos:column="25">0<pos:position pos:line="25" pos:column="26"/></literal></expr>]<pos:position pos:line="25" pos:column="27"/></index></name><operator pos:line="25" pos:column="27">.<pos:position pos:line="25" pos:column="28"/></operator><name pos:line="25" pos:column="28">type<pos:position pos:line="25" pos:column="32"/></name> <operator pos:line="25" pos:column="33">!=<pos:position pos:line="25" pos:column="35"/></operator> <name pos:line="25" pos:column="36">OCONFIG_TYPE_STRING<pos:position pos:line="25" pos:column="55"/></name> <operator pos:line="25" pos:column="56">||<pos:position pos:line="25" pos:column="58"/></operator>
          <name><name pos:line="26" pos:column="11">child<pos:position pos:line="26" pos:column="16"/></name><operator pos:line="26" pos:column="16">-&gt;<pos:position pos:line="26" pos:column="21"/></operator><name pos:line="26" pos:column="18">values<pos:position pos:line="26" pos:column="24"/></name><index pos:line="26" pos:column="24">[<expr><literal type="number" pos:line="26" pos:column="25">1<pos:position pos:line="26" pos:column="26"/></literal></expr>]<pos:position pos:line="26" pos:column="27"/></index></name><operator pos:line="26" pos:column="27">.<pos:position pos:line="26" pos:column="28"/></operator><name pos:line="26" pos:column="28">type<pos:position pos:line="26" pos:column="32"/></name> <operator pos:line="26" pos:column="33">!=<pos:position pos:line="26" pos:column="35"/></operator> <name pos:line="26" pos:column="36">OCONFIG_TYPE_STRING<pos:position pos:line="26" pos:column="55"/></name></expr>)<pos:position pos:line="26" pos:column="56"/></condition><then pos:line="26" pos:column="56"> <block pos:line="26" pos:column="57">{
        <expr_stmt><expr><call><name pos:line="27" pos:column="9">WARNING<pos:position pos:line="27" pos:column="16"/></name><argument_list pos:line="27" pos:column="16">(<argument><expr><literal type="string" pos:line="27" pos:column="17">"kafka properties needs string arguments."<pos:position pos:line="27" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="61"/></expr_stmt>
        <goto pos:line="28" pos:column="9">goto <name pos:line="28" pos:column="14">errout<pos:position pos:line="28" pos:column="20"/></name>;<pos:position pos:line="28" pos:column="21"/></goto>
      }<pos:position pos:line="29" pos:column="8"/></block></then></if>
      <if pos:line="30" pos:column="7">if <condition pos:line="30" pos:column="10">(<expr><operator pos:line="30" pos:column="11">(<pos:position pos:line="30" pos:column="12"/></operator><name pos:line="30" pos:column="12">key<pos:position pos:line="30" pos:column="15"/></name> <operator pos:line="30" pos:column="16">=<pos:position pos:line="30" pos:column="17"/></operator> <call><name pos:line="30" pos:column="18">strdup<pos:position pos:line="30" pos:column="24"/></name><argument_list pos:line="30" pos:column="24">(<argument><expr><name><name pos:line="30" pos:column="25">child<pos:position pos:line="30" pos:column="30"/></name><operator pos:line="30" pos:column="30">-&gt;<pos:position pos:line="30" pos:column="35"/></operator><name pos:line="30" pos:column="32">values<pos:position pos:line="30" pos:column="38"/></name><index pos:line="30" pos:column="38">[<expr><literal type="number" pos:line="30" pos:column="39">0<pos:position pos:line="30" pos:column="40"/></literal></expr>]<pos:position pos:line="30" pos:column="41"/></index></name><operator pos:line="30" pos:column="41">.<pos:position pos:line="30" pos:column="42"/></operator><name><name pos:line="30" pos:column="42">value<pos:position pos:line="30" pos:column="47"/></name><operator pos:line="30" pos:column="47">.<pos:position pos:line="30" pos:column="48"/></operator><name pos:line="30" pos:column="48">string<pos:position pos:line="30" pos:column="54"/></name></name></expr></argument>)<pos:position pos:line="30" pos:column="55"/></argument_list></call><operator pos:line="30" pos:column="55">)<pos:position pos:line="30" pos:column="56"/></operator> <operator pos:line="30" pos:column="57">==<pos:position pos:line="30" pos:column="59"/></operator> <name pos:line="30" pos:column="60">NULL<pos:position pos:line="30" pos:column="64"/></name></expr>)<pos:position pos:line="30" pos:column="65"/></condition><then pos:line="30" pos:column="65"> <block pos:line="30" pos:column="66">{
        <expr_stmt><expr><call><name pos:line="31" pos:column="9">WARNING<pos:position pos:line="31" pos:column="16"/></name><argument_list pos:line="31" pos:column="16">(<argument><expr><literal type="string" pos:line="31" pos:column="17">"cannot allocate memory for attribute key."<pos:position pos:line="31" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="31" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="62"/></expr_stmt>
        <goto pos:line="32" pos:column="9">goto <name pos:line="32" pos:column="14">errout<pos:position pos:line="32" pos:column="20"/></name>;<pos:position pos:line="32" pos:column="21"/></goto>
      }<pos:position pos:line="33" pos:column="8"/></block></then></if>
      <if pos:line="34" pos:column="7">if <condition pos:line="34" pos:column="10">(<expr><operator pos:line="34" pos:column="11">(<pos:position pos:line="34" pos:column="12"/></operator><name pos:line="34" pos:column="12">val<pos:position pos:line="34" pos:column="15"/></name> <operator pos:line="34" pos:column="16">=<pos:position pos:line="34" pos:column="17"/></operator> <call><name pos:line="34" pos:column="18">strdup<pos:position pos:line="34" pos:column="24"/></name><argument_list pos:line="34" pos:column="24">(<argument><expr><name><name pos:line="34" pos:column="25">child<pos:position pos:line="34" pos:column="30"/></name><operator pos:line="34" pos:column="30">-&gt;<pos:position pos:line="34" pos:column="35"/></operator><name pos:line="34" pos:column="32">values<pos:position pos:line="34" pos:column="38"/></name><index pos:line="34" pos:column="38">[<expr><literal type="number" pos:line="34" pos:column="39">1<pos:position pos:line="34" pos:column="40"/></literal></expr>]<pos:position pos:line="34" pos:column="41"/></index></name><operator pos:line="34" pos:column="41">.<pos:position pos:line="34" pos:column="42"/></operator><name><name pos:line="34" pos:column="42">value<pos:position pos:line="34" pos:column="47"/></name><operator pos:line="34" pos:column="47">.<pos:position pos:line="34" pos:column="48"/></operator><name pos:line="34" pos:column="48">string<pos:position pos:line="34" pos:column="54"/></name></name></expr></argument>)<pos:position pos:line="34" pos:column="55"/></argument_list></call><operator pos:line="34" pos:column="55">)<pos:position pos:line="34" pos:column="56"/></operator> <operator pos:line="34" pos:column="57">==<pos:position pos:line="34" pos:column="59"/></operator> <name pos:line="34" pos:column="60">NULL<pos:position pos:line="34" pos:column="64"/></name></expr>)<pos:position pos:line="34" pos:column="65"/></condition><then pos:line="34" pos:column="65"> <block pos:line="34" pos:column="66">{
        <expr_stmt><expr><call><name pos:line="35" pos:column="9">WARNING<pos:position pos:line="35" pos:column="16"/></name><argument_list pos:line="35" pos:column="16">(<argument><expr><literal type="string" pos:line="35" pos:column="17">"cannot allocate memory for attribute value."<pos:position pos:line="35" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="35" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="64"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="36" pos:column="9">sfree<pos:position pos:line="36" pos:column="14"/></name><argument_list pos:line="36" pos:column="14">(<argument><expr><name pos:line="36" pos:column="15">key<pos:position pos:line="36" pos:column="18"/></name></expr></argument>)<pos:position pos:line="36" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="20"/></expr_stmt>
        <goto pos:line="37" pos:column="9">goto <name pos:line="37" pos:column="14">errout<pos:position pos:line="37" pos:column="20"/></name>;<pos:position pos:line="37" pos:column="21"/></goto>
      }<pos:position pos:line="38" pos:column="8"/></block></then></if>
      <expr_stmt><expr><name pos:line="39" pos:column="7">ret<pos:position pos:line="39" pos:column="10"/></name> <operator pos:line="39" pos:column="11">=<pos:position pos:line="39" pos:column="12"/></operator> <call><name pos:line="39" pos:column="13">rd_kafka_conf_set<pos:position pos:line="39" pos:column="30"/></name><argument_list pos:line="39" pos:column="30">(<argument><expr><name pos:line="39" pos:column="31">conf<pos:position pos:line="39" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="37">key<pos:position pos:line="39" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="42">val<pos:position pos:line="39" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="47">errbuf<pos:position pos:line="39" pos:column="53"/></name></expr></argument>, <argument><expr><sizeof pos:line="39" pos:column="55">sizeof<argument_list pos:line="39" pos:column="61">(<argument><expr><name pos:line="39" pos:column="62">errbuf<pos:position pos:line="39" pos:column="68"/></name></expr></argument>)<pos:position pos:line="39" pos:column="69"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="39" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="71"/></expr_stmt>
      <if pos:line="40" pos:column="7">if <condition pos:line="40" pos:column="10">(<expr><name pos:line="40" pos:column="11">ret<pos:position pos:line="40" pos:column="14"/></name> <operator pos:line="40" pos:column="15">!=<pos:position pos:line="40" pos:column="17"/></operator> <name pos:line="40" pos:column="18">RD_KAFKA_CONF_OK<pos:position pos:line="40" pos:column="34"/></name></expr>)<pos:position pos:line="40" pos:column="35"/></condition><then pos:line="40" pos:column="35"> <block pos:line="40" pos:column="36">{
        <expr_stmt><expr><call><name pos:line="41" pos:column="9">WARNING<pos:position pos:line="41" pos:column="16"/></name><argument_list pos:line="41" pos:column="16">(<argument><expr><literal type="string" pos:line="41" pos:column="17">"cannot set kafka property %s to %s: %s"<pos:position pos:line="41" pos:column="57"/></literal></expr></argument>, <argument><expr><name pos:line="41" pos:column="59">key<pos:position pos:line="41" pos:column="62"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="64">val<pos:position pos:line="41" pos:column="67"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="69">errbuf<pos:position pos:line="41" pos:column="75"/></name></expr></argument>)<pos:position pos:line="41" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="77"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="42" pos:column="9">sfree<pos:position pos:line="42" pos:column="14"/></name><argument_list pos:line="42" pos:column="14">(<argument><expr><name pos:line="42" pos:column="15">key<pos:position pos:line="42" pos:column="18"/></name></expr></argument>)<pos:position pos:line="42" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="20"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="43" pos:column="9">sfree<pos:position pos:line="43" pos:column="14"/></name><argument_list pos:line="43" pos:column="14">(<argument><expr><name pos:line="43" pos:column="15">val<pos:position pos:line="43" pos:column="18"/></name></expr></argument>)<pos:position pos:line="43" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="20"/></expr_stmt>
        <goto pos:line="44" pos:column="9">goto <name pos:line="44" pos:column="14">errout<pos:position pos:line="44" pos:column="20"/></name>;<pos:position pos:line="44" pos:column="21"/></goto>
      }<pos:position pos:line="45" pos:column="8"/></block></then></if>
      <expr_stmt><expr><call><name pos:line="46" pos:column="7">sfree<pos:position pos:line="46" pos:column="12"/></name><argument_list pos:line="46" pos:column="12">(<argument><expr><name pos:line="46" pos:column="13">key<pos:position pos:line="46" pos:column="16"/></name></expr></argument>)<pos:position pos:line="46" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="18"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="47" pos:column="7">sfree<pos:position pos:line="47" pos:column="12"/></name><argument_list pos:line="47" pos:column="12">(<argument><expr><name pos:line="47" pos:column="13">val<pos:position pos:line="47" pos:column="16"/></name></expr></argument>)<pos:position pos:line="47" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="18"/></expr_stmt>
    }<pos:position pos:line="48" pos:column="6"/></block></then></if></elseif> <else pos:line="48" pos:column="7">else <block pos:line="48" pos:column="12">{
      <expr_stmt><expr><call><name pos:line="49" pos:column="7">WARNING<pos:position pos:line="49" pos:column="14"/></name><argument_list pos:line="49" pos:column="14">(<argument><expr><literal type="string" pos:line="49" pos:column="15">"write_kafka plugin: Ignoring unknown "<pos:position pos:line="49" pos:column="54"/></literal>
              <literal type="string" pos:line="50" pos:column="15">"configuration option \"%s\" at top level."<pos:position pos:line="50" pos:column="58"/></literal></expr></argument>,
              <argument><expr><name><name pos:line="51" pos:column="15">child<pos:position pos:line="51" pos:column="20"/></name><operator pos:line="51" pos:column="20">-&gt;<pos:position pos:line="51" pos:column="25"/></operator><name pos:line="51" pos:column="22">key<pos:position pos:line="51" pos:column="25"/></name></name></expr></argument>)<pos:position pos:line="51" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="27"/></expr_stmt>
    }<pos:position pos:line="52" pos:column="6"/></block></else></if>
  }<pos:position pos:line="53" pos:column="4"/></block></for>
  <if pos:line="54" pos:column="3">if <condition pos:line="54" pos:column="6">(<expr><name pos:line="54" pos:column="7">conf<pos:position pos:line="54" pos:column="11"/></name> <operator pos:line="54" pos:column="12">!=<pos:position pos:line="54" pos:column="14"/></operator> <name pos:line="54" pos:column="15">NULL<pos:position pos:line="54" pos:column="19"/></name></expr>)<pos:position pos:line="54" pos:column="20"/></condition><then pos:line="54" pos:column="20">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="55" pos:column="5">rd_kafka_conf_destroy<pos:position pos:line="55" pos:column="26"/></name><argument_list pos:line="55" pos:column="26">(<argument><expr><name pos:line="55" pos:column="27">conf<pos:position pos:line="55" pos:column="31"/></name></expr></argument>)<pos:position pos:line="55" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="33"/></expr_stmt></block></then></if>
  <return pos:line="56" pos:column="3">return <expr><operator pos:line="56" pos:column="10">(<pos:position pos:line="56" pos:column="11"/></operator><literal type="number" pos:line="56" pos:column="11">0<pos:position pos:line="56" pos:column="12"/></literal><operator pos:line="56" pos:column="12">)<pos:position pos:line="56" pos:column="13"/></operator></expr>;<pos:position pos:line="56" pos:column="14"/></return>
<label><name pos:line="57" pos:column="1">errout<pos:position pos:line="57" pos:column="7"/></name>:<pos:position pos:line="57" pos:column="8"/></label>
  <if pos:line="58" pos:column="3">if <condition pos:line="58" pos:column="6">(<expr><name pos:line="58" pos:column="7">conf<pos:position pos:line="58" pos:column="11"/></name> <operator pos:line="58" pos:column="12">!=<pos:position pos:line="58" pos:column="14"/></operator> <name pos:line="58" pos:column="15">NULL<pos:position pos:line="58" pos:column="19"/></name></expr>)<pos:position pos:line="58" pos:column="20"/></condition><then pos:line="58" pos:column="20">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="59" pos:column="5">rd_kafka_conf_destroy<pos:position pos:line="59" pos:column="26"/></name><argument_list pos:line="59" pos:column="26">(<argument><expr><name pos:line="59" pos:column="27">conf<pos:position pos:line="59" pos:column="31"/></name></expr></argument>)<pos:position pos:line="59" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="33"/></expr_stmt></block></then></if>
  <return pos:line="60" pos:column="3">return <expr><operator pos:line="60" pos:column="10">-<pos:position pos:line="60" pos:column="11"/></operator><literal type="number" pos:line="60" pos:column="11">1<pos:position pos:line="60" pos:column="12"/></literal></expr>;<pos:position pos:line="60" pos:column="13"/></return>
}<pos:position pos:line="61" pos:column="2"/></block></function></unit>
