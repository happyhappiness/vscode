<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_582_collectd-5.6.2.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">char<pos:position pos:line="1" pos:column="12"/></name> <modifier pos:line="1" pos:column="13">*<pos:position pos:line="1" pos:column="14"/></modifier></type><name pos:line="1" pos:column="14">sensu_value_to_json<pos:position pos:line="1" pos:column="33"/></name><parameter_list pos:line="1" pos:column="33">(<parameter><decl><type><name><name pos:line="1" pos:column="34">struct<pos:position pos:line="1" pos:column="40"/></name> <name pos:line="1" pos:column="41">sensu_host<pos:position pos:line="1" pos:column="51"/></name></name> <specifier pos:line="1" pos:column="52">const<pos:position pos:line="1" pos:column="57"/></specifier> <modifier pos:line="1" pos:column="58">*<pos:position pos:line="1" pos:column="59"/></modifier></type><name pos:line="1" pos:column="59">host<pos:position pos:line="1" pos:column="63"/></name></decl></parameter>, <comment type="block" pos:line="1" pos:column="65">/* {{{ */</comment>
                                 <parameter><decl><type><name pos:line="2" pos:column="34">data_set_t<pos:position pos:line="2" pos:column="44"/></name> <specifier pos:line="2" pos:column="45">const<pos:position pos:line="2" pos:column="50"/></specifier> <modifier pos:line="2" pos:column="51">*<pos:position pos:line="2" pos:column="52"/></modifier></type><name pos:line="2" pos:column="52">ds<pos:position pos:line="2" pos:column="54"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="56">value_list_t<pos:position pos:line="2" pos:column="68"/></name> <specifier pos:line="2" pos:column="69">const<pos:position pos:line="2" pos:column="74"/></specifier> <modifier pos:line="2" pos:column="75">*<pos:position pos:line="2" pos:column="76"/></modifier></type><name pos:line="2" pos:column="76">vl<pos:position pos:line="2" pos:column="78"/></name></decl></parameter>,
                                 <parameter><decl><type><name pos:line="3" pos:column="34">size_t<pos:position pos:line="3" pos:column="40"/></name></type> <name pos:line="3" pos:column="41">index<pos:position pos:line="3" pos:column="46"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="48">gauge_t<pos:position pos:line="3" pos:column="55"/></name> <specifier pos:line="3" pos:column="56">const<pos:position pos:line="3" pos:column="61"/></specifier> <modifier pos:line="3" pos:column="62">*<pos:position pos:line="3" pos:column="63"/></modifier></type><name pos:line="3" pos:column="63">rates<pos:position pos:line="3" pos:column="68"/></name></decl></parameter>,
                                 <parameter><decl><type><name pos:line="4" pos:column="34">int<pos:position pos:line="4" pos:column="37"/></name></type> <name pos:line="4" pos:column="38">status<pos:position pos:line="4" pos:column="44"/></name></decl></parameter>)<pos:position pos:line="4" pos:column="45"/></parameter_list> <block pos:line="4" pos:column="46">{
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">char<pos:position pos:line="5" pos:column="7"/></name></type> <name><name pos:line="5" pos:column="8">name_buffer<pos:position pos:line="5" pos:column="19"/></name><index pos:line="5" pos:column="19">[<expr><literal type="number" pos:line="5" pos:column="20">5<pos:position pos:line="5" pos:column="21"/></literal> <operator pos:line="5" pos:column="22">*<pos:position pos:line="5" pos:column="23"/></operator> <name pos:line="5" pos:column="24">DATA_MAX_NAME_LEN<pos:position pos:line="5" pos:column="41"/></name></expr>]<pos:position pos:line="5" pos:column="42"/></index></name></decl>;<pos:position pos:line="5" pos:column="43"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">char<pos:position pos:line="6" pos:column="7"/></name></type> <name><name pos:line="6" pos:column="8">service_buffer<pos:position pos:line="6" pos:column="22"/></name><index pos:line="6" pos:column="22">[<expr><literal type="number" pos:line="6" pos:column="23">6<pos:position pos:line="6" pos:column="24"/></literal> <operator pos:line="6" pos:column="25">*<pos:position pos:line="6" pos:column="26"/></operator> <name pos:line="6" pos:column="27">DATA_MAX_NAME_LEN<pos:position pos:line="6" pos:column="44"/></name></expr>]<pos:position pos:line="6" pos:column="45"/></index></name></decl>;<pos:position pos:line="6" pos:column="46"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">char<pos:position pos:line="7" pos:column="7"/></name> <modifier pos:line="7" pos:column="8">*<pos:position pos:line="7" pos:column="9"/></modifier></type><name pos:line="7" pos:column="9">ret_str<pos:position pos:line="7" pos:column="16"/></name></decl>;<pos:position pos:line="7" pos:column="17"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">char<pos:position pos:line="8" pos:column="7"/></name> <modifier pos:line="8" pos:column="8">*<pos:position pos:line="8" pos:column="9"/></modifier></type><name pos:line="8" pos:column="9">temp_str<pos:position pos:line="8" pos:column="17"/></name></decl>;<pos:position pos:line="8" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">char<pos:position pos:line="9" pos:column="7"/></name> <modifier pos:line="9" pos:column="8">*<pos:position pos:line="9" pos:column="9"/></modifier></type><name pos:line="9" pos:column="9">value_str<pos:position pos:line="9" pos:column="18"/></name></decl>;<pos:position pos:line="9" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">int<pos:position pos:line="10" pos:column="6"/></name></type> <name pos:line="10" pos:column="7">res<pos:position pos:line="10" pos:column="10"/></name></decl>;<pos:position pos:line="10" pos:column="11"/></decl_stmt>
  <comment type="line" pos:line="11" pos:column="3">// First part of the JSON string</comment>
  <decl_stmt><decl><type><specifier pos:line="12" pos:column="3">const<pos:position pos:line="12" pos:column="8"/></specifier> <name pos:line="12" pos:column="9">char<pos:position pos:line="12" pos:column="13"/></name> <modifier pos:line="12" pos:column="14">*<pos:position pos:line="12" pos:column="15"/></modifier></type><name pos:line="12" pos:column="15">part1<pos:position pos:line="12" pos:column="20"/></name> <init pos:line="12" pos:column="21">= <expr><literal type="string" pos:line="12" pos:column="23">"{\"name\": \"collectd\", \"type\": \"metric\""<pos:position pos:line="12" pos:column="70"/></literal></expr></init></decl>;<pos:position pos:line="12" pos:column="71"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="14" pos:column="3">char<pos:position pos:line="14" pos:column="7"/></name> <modifier pos:line="14" pos:column="8">*<pos:position pos:line="14" pos:column="9"/></modifier></type><name pos:line="14" pos:column="9">handlers_str<pos:position pos:line="14" pos:column="21"/></name> <init pos:line="14" pos:column="22">=
      <expr><call><name pos:line="15" pos:column="7">build_json_str_list<pos:position pos:line="15" pos:column="26"/></name><argument_list pos:line="15" pos:column="26">(<argument><expr><literal type="string" pos:line="15" pos:column="27">"handlers"<pos:position pos:line="15" pos:column="37"/></literal></expr></argument>, <argument><expr><operator pos:line="15" pos:column="39">&amp;<pos:position pos:line="15" pos:column="44"/></operator><operator pos:line="15" pos:column="40">(<pos:position pos:line="15" pos:column="41"/></operator><name><name pos:line="15" pos:column="41">host<pos:position pos:line="15" pos:column="45"/></name><operator pos:line="15" pos:column="45">-&gt;<pos:position pos:line="15" pos:column="50"/></operator><name pos:line="15" pos:column="47">metric_handlers<pos:position pos:line="15" pos:column="62"/></name></name><operator pos:line="15" pos:column="62">)<pos:position pos:line="15" pos:column="63"/></operator></expr></argument>)<pos:position pos:line="15" pos:column="64"/></argument_list></call></expr></init></decl>;<pos:position pos:line="15" pos:column="65"/></decl_stmt>
  <if pos:line="16" pos:column="3">if <condition pos:line="16" pos:column="6">(<expr><name pos:line="16" pos:column="7">handlers_str<pos:position pos:line="16" pos:column="19"/></name> <operator pos:line="16" pos:column="20">==<pos:position pos:line="16" pos:column="22"/></operator> <name pos:line="16" pos:column="23">NULL<pos:position pos:line="16" pos:column="27"/></name></expr>)<pos:position pos:line="16" pos:column="28"/></condition><then pos:line="16" pos:column="28"> <block pos:line="16" pos:column="29">{
    <expr_stmt><expr><call><name pos:line="17" pos:column="5">ERROR<pos:position pos:line="17" pos:column="10"/></name><argument_list pos:line="17" pos:column="10">(<argument><expr><literal type="string" pos:line="17" pos:column="11">"write_sensu plugin: Unable to alloc memory"<pos:position pos:line="17" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="57"/></expr_stmt>
    <return pos:line="18" pos:column="5">return <expr><name pos:line="18" pos:column="12">NULL<pos:position pos:line="18" pos:column="16"/></name></expr>;<pos:position pos:line="18" pos:column="17"/></return>
  }<pos:position pos:line="19" pos:column="4"/></block></then></if>

  <comment type="line" pos:line="21" pos:column="3">// incorporate the handlers</comment>
  <if pos:line="22" pos:column="3">if <condition pos:line="22" pos:column="6">(<expr><call><name pos:line="22" pos:column="7">strlen<pos:position pos:line="22" pos:column="13"/></name><argument_list pos:line="22" pos:column="13">(<argument><expr><name pos:line="22" pos:column="14">handlers_str<pos:position pos:line="22" pos:column="26"/></name></expr></argument>)<pos:position pos:line="22" pos:column="27"/></argument_list></call> <operator pos:line="22" pos:column="28">==<pos:position pos:line="22" pos:column="30"/></operator> <literal type="number" pos:line="22" pos:column="31">0<pos:position pos:line="22" pos:column="32"/></literal></expr>)<pos:position pos:line="22" pos:column="33"/></condition><then pos:line="22" pos:column="33"> <block pos:line="22" pos:column="34">{
    <expr_stmt><expr><call><name pos:line="23" pos:column="5">free<pos:position pos:line="23" pos:column="9"/></name><argument_list pos:line="23" pos:column="9">(<argument><expr><name pos:line="23" pos:column="10">handlers_str<pos:position pos:line="23" pos:column="22"/></name></expr></argument>)<pos:position pos:line="23" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="24"/></expr_stmt>
    <expr_stmt><expr><name pos:line="24" pos:column="5">ret_str<pos:position pos:line="24" pos:column="12"/></name> <operator pos:line="24" pos:column="13">=<pos:position pos:line="24" pos:column="14"/></operator> <call><name pos:line="24" pos:column="15">strdup<pos:position pos:line="24" pos:column="21"/></name><argument_list pos:line="24" pos:column="21">(<argument><expr><name pos:line="24" pos:column="22">part1<pos:position pos:line="24" pos:column="27"/></name></expr></argument>)<pos:position pos:line="24" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="29"/></expr_stmt>
    <if pos:line="25" pos:column="5">if <condition pos:line="25" pos:column="8">(<expr><name pos:line="25" pos:column="9">ret_str<pos:position pos:line="25" pos:column="16"/></name> <operator pos:line="25" pos:column="17">==<pos:position pos:line="25" pos:column="19"/></operator> <name pos:line="25" pos:column="20">NULL<pos:position pos:line="25" pos:column="24"/></name></expr>)<pos:position pos:line="25" pos:column="25"/></condition><then pos:line="25" pos:column="25"> <block pos:line="25" pos:column="26">{
      <expr_stmt><expr><call><name pos:line="26" pos:column="7">ERROR<pos:position pos:line="26" pos:column="12"/></name><argument_list pos:line="26" pos:column="12">(<argument><expr><literal type="string" pos:line="26" pos:column="13">"write_sensu plugin: Unable to alloc memory"<pos:position pos:line="26" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="59"/></expr_stmt>
      <return pos:line="27" pos:column="7">return <expr><name pos:line="27" pos:column="14">NULL<pos:position pos:line="27" pos:column="18"/></name></expr>;<pos:position pos:line="27" pos:column="19"/></return>
    }<pos:position pos:line="28" pos:column="6"/></block></then></if>
  }<pos:position pos:line="29" pos:column="4"/></block></then> <else pos:line="29" pos:column="5">else <block pos:line="29" pos:column="10">{
    <expr_stmt><expr><name pos:line="30" pos:column="5">res<pos:position pos:line="30" pos:column="8"/></name> <operator pos:line="30" pos:column="9">=<pos:position pos:line="30" pos:column="10"/></operator> <call><name pos:line="30" pos:column="11">my_asprintf<pos:position pos:line="30" pos:column="22"/></name><argument_list pos:line="30" pos:column="22">(<argument><expr><operator pos:line="30" pos:column="23">&amp;<pos:position pos:line="30" pos:column="28"/></operator><name pos:line="30" pos:column="24">ret_str<pos:position pos:line="30" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="30" pos:column="33">"%s, %s"<pos:position pos:line="30" pos:column="41"/></literal></expr></argument>, <argument><expr><name pos:line="30" pos:column="43">part1<pos:position pos:line="30" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="50">handlers_str<pos:position pos:line="30" pos:column="62"/></name></expr></argument>)<pos:position pos:line="30" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="64"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="31" pos:column="5">free<pos:position pos:line="31" pos:column="9"/></name><argument_list pos:line="31" pos:column="9">(<argument><expr><name pos:line="31" pos:column="10">handlers_str<pos:position pos:line="31" pos:column="22"/></name></expr></argument>)<pos:position pos:line="31" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="24"/></expr_stmt>
    <if pos:line="32" pos:column="5">if <condition pos:line="32" pos:column="8">(<expr><name pos:line="32" pos:column="9">res<pos:position pos:line="32" pos:column="12"/></name> <operator pos:line="32" pos:column="13">==<pos:position pos:line="32" pos:column="15"/></operator> <operator pos:line="32" pos:column="16">-<pos:position pos:line="32" pos:column="17"/></operator><literal type="number" pos:line="32" pos:column="17">1<pos:position pos:line="32" pos:column="18"/></literal></expr>)<pos:position pos:line="32" pos:column="19"/></condition><then pos:line="32" pos:column="19"> <block pos:line="32" pos:column="20">{
      <expr_stmt><expr><call><name pos:line="33" pos:column="7">ERROR<pos:position pos:line="33" pos:column="12"/></name><argument_list pos:line="33" pos:column="12">(<argument><expr><literal type="string" pos:line="33" pos:column="13">"write_sensu plugin: Unable to alloc memory"<pos:position pos:line="33" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="59"/></expr_stmt>
      <return pos:line="34" pos:column="7">return <expr><name pos:line="34" pos:column="14">NULL<pos:position pos:line="34" pos:column="18"/></name></expr>;<pos:position pos:line="34" pos:column="19"/></return>
    }<pos:position pos:line="35" pos:column="6"/></block></then></if>
  }<pos:position pos:line="36" pos:column="4"/></block></else></if>

  <comment type="line" pos:line="38" pos:column="3">// incorporate the plugin name information</comment>
  <expr_stmt><expr><name pos:line="39" pos:column="3">res<pos:position pos:line="39" pos:column="6"/></name> <operator pos:line="39" pos:column="7">=<pos:position pos:line="39" pos:column="8"/></operator> <call><name pos:line="39" pos:column="9">my_asprintf<pos:position pos:line="39" pos:column="20"/></name><argument_list pos:line="39" pos:column="20">(<argument><expr><operator pos:line="39" pos:column="21">&amp;<pos:position pos:line="39" pos:column="26"/></operator><name pos:line="39" pos:column="22">temp_str<pos:position pos:line="39" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="39" pos:column="32">"%s, \"collectd_plugin\": \"%s\""<pos:position pos:line="39" pos:column="65"/></literal></expr></argument>, <argument><expr><name pos:line="39" pos:column="67">ret_str<pos:position pos:line="39" pos:column="74"/></name></expr></argument>,
                    <argument><expr><name><name pos:line="40" pos:column="21">vl<pos:position pos:line="40" pos:column="23"/></name><operator pos:line="40" pos:column="23">-&gt;<pos:position pos:line="40" pos:column="28"/></operator><name pos:line="40" pos:column="25">plugin<pos:position pos:line="40" pos:column="31"/></name></name></expr></argument>)<pos:position pos:line="40" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="33"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="41" pos:column="3">free<pos:position pos:line="41" pos:column="7"/></name><argument_list pos:line="41" pos:column="7">(<argument><expr><name pos:line="41" pos:column="8">ret_str<pos:position pos:line="41" pos:column="15"/></name></expr></argument>)<pos:position pos:line="41" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="17"/></expr_stmt>
  <if pos:line="42" pos:column="3">if <condition pos:line="42" pos:column="6">(<expr><name pos:line="42" pos:column="7">res<pos:position pos:line="42" pos:column="10"/></name> <operator pos:line="42" pos:column="11">==<pos:position pos:line="42" pos:column="13"/></operator> <operator pos:line="42" pos:column="14">-<pos:position pos:line="42" pos:column="15"/></operator><literal type="number" pos:line="42" pos:column="15">1<pos:position pos:line="42" pos:column="16"/></literal></expr>)<pos:position pos:line="42" pos:column="17"/></condition><then pos:line="42" pos:column="17"> <block pos:line="42" pos:column="18">{
    <expr_stmt><expr><call><name pos:line="43" pos:column="5">ERROR<pos:position pos:line="43" pos:column="10"/></name><argument_list pos:line="43" pos:column="10">(<argument><expr><literal type="string" pos:line="43" pos:column="11">"write_sensu plugin: Unable to alloc memory"<pos:position pos:line="43" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="43" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="57"/></expr_stmt>
    <return pos:line="44" pos:column="5">return <expr><name pos:line="44" pos:column="12">NULL<pos:position pos:line="44" pos:column="16"/></name></expr>;<pos:position pos:line="44" pos:column="17"/></return>
  }<pos:position pos:line="45" pos:column="4"/></block></then></if>
  <expr_stmt><expr><name pos:line="46" pos:column="3">ret_str<pos:position pos:line="46" pos:column="10"/></name> <operator pos:line="46" pos:column="11">=<pos:position pos:line="46" pos:column="12"/></operator> <name pos:line="46" pos:column="13">temp_str<pos:position pos:line="46" pos:column="21"/></name></expr>;<pos:position pos:line="46" pos:column="22"/></expr_stmt>

  <comment type="line" pos:line="48" pos:column="3">// incorporate the plugin type</comment>
  <expr_stmt><expr><name pos:line="49" pos:column="3">res<pos:position pos:line="49" pos:column="6"/></name> <operator pos:line="49" pos:column="7">=<pos:position pos:line="49" pos:column="8"/></operator> <call><name pos:line="49" pos:column="9">my_asprintf<pos:position pos:line="49" pos:column="20"/></name><argument_list pos:line="49" pos:column="20">(<argument><expr><operator pos:line="49" pos:column="21">&amp;<pos:position pos:line="49" pos:column="26"/></operator><name pos:line="49" pos:column="22">temp_str<pos:position pos:line="49" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="49" pos:column="32">"%s, \"collectd_plugin_type\": \"%s\""<pos:position pos:line="49" pos:column="70"/></literal></expr></argument>, <argument><expr><name pos:line="49" pos:column="72">ret_str<pos:position pos:line="49" pos:column="79"/></name></expr></argument>,
                    <argument><expr><name><name pos:line="50" pos:column="21">vl<pos:position pos:line="50" pos:column="23"/></name><operator pos:line="50" pos:column="23">-&gt;<pos:position pos:line="50" pos:column="28"/></operator><name pos:line="50" pos:column="25">type<pos:position pos:line="50" pos:column="29"/></name></name></expr></argument>)<pos:position pos:line="50" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="31"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="51" pos:column="3">free<pos:position pos:line="51" pos:column="7"/></name><argument_list pos:line="51" pos:column="7">(<argument><expr><name pos:line="51" pos:column="8">ret_str<pos:position pos:line="51" pos:column="15"/></name></expr></argument>)<pos:position pos:line="51" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="17"/></expr_stmt>
  <if pos:line="52" pos:column="3">if <condition pos:line="52" pos:column="6">(<expr><name pos:line="52" pos:column="7">res<pos:position pos:line="52" pos:column="10"/></name> <operator pos:line="52" pos:column="11">==<pos:position pos:line="52" pos:column="13"/></operator> <operator pos:line="52" pos:column="14">-<pos:position pos:line="52" pos:column="15"/></operator><literal type="number" pos:line="52" pos:column="15">1<pos:position pos:line="52" pos:column="16"/></literal></expr>)<pos:position pos:line="52" pos:column="17"/></condition><then pos:line="52" pos:column="17"> <block pos:line="52" pos:column="18">{
    <expr_stmt><expr><call><name pos:line="53" pos:column="5">ERROR<pos:position pos:line="53" pos:column="10"/></name><argument_list pos:line="53" pos:column="10">(<argument><expr><literal type="string" pos:line="53" pos:column="11">"write_sensu plugin: Unable to alloc memory"<pos:position pos:line="53" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="53" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="57"/></expr_stmt>
    <return pos:line="54" pos:column="5">return <expr><name pos:line="54" pos:column="12">NULL<pos:position pos:line="54" pos:column="16"/></name></expr>;<pos:position pos:line="54" pos:column="17"/></return>
  }<pos:position pos:line="55" pos:column="4"/></block></then></if>
  <expr_stmt><expr><name pos:line="56" pos:column="3">ret_str<pos:position pos:line="56" pos:column="10"/></name> <operator pos:line="56" pos:column="11">=<pos:position pos:line="56" pos:column="12"/></operator> <name pos:line="56" pos:column="13">temp_str<pos:position pos:line="56" pos:column="21"/></name></expr>;<pos:position pos:line="56" pos:column="22"/></expr_stmt>

  <comment type="line" pos:line="58" pos:column="3">// incorporate the plugin instance if any</comment>
  <if pos:line="59" pos:column="3">if <condition pos:line="59" pos:column="6">(<expr><name><name pos:line="59" pos:column="7">vl<pos:position pos:line="59" pos:column="9"/></name><operator pos:line="59" pos:column="9">-&gt;<pos:position pos:line="59" pos:column="14"/></operator><name pos:line="59" pos:column="11">plugin_instance<pos:position pos:line="59" pos:column="26"/></name><index pos:line="59" pos:column="26">[<expr><literal type="number" pos:line="59" pos:column="27">0<pos:position pos:line="59" pos:column="28"/></literal></expr>]<pos:position pos:line="59" pos:column="29"/></index></name> <operator pos:line="59" pos:column="30">!=<pos:position pos:line="59" pos:column="32"/></operator> <literal type="number" pos:line="59" pos:column="33">0<pos:position pos:line="59" pos:column="34"/></literal></expr>)<pos:position pos:line="59" pos:column="35"/></condition><then pos:line="59" pos:column="35"> <block pos:line="59" pos:column="36">{
    <expr_stmt><expr><name pos:line="60" pos:column="5">res<pos:position pos:line="60" pos:column="8"/></name> <operator pos:line="60" pos:column="9">=<pos:position pos:line="60" pos:column="10"/></operator> <call><name pos:line="60" pos:column="11">my_asprintf<pos:position pos:line="60" pos:column="22"/></name><argument_list pos:line="60" pos:column="22">(<argument><expr><operator pos:line="60" pos:column="23">&amp;<pos:position pos:line="60" pos:column="28"/></operator><name pos:line="60" pos:column="24">temp_str<pos:position pos:line="60" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="60" pos:column="34">"%s, \"collectd_plugin_instance\": \"%s\""<pos:position pos:line="60" pos:column="76"/></literal></expr></argument>,
                      <argument><expr><name pos:line="61" pos:column="23">ret_str<pos:position pos:line="61" pos:column="30"/></name></expr></argument>, <argument><expr><name><name pos:line="61" pos:column="32">vl<pos:position pos:line="61" pos:column="34"/></name><operator pos:line="61" pos:column="34">-&gt;<pos:position pos:line="61" pos:column="39"/></operator><name pos:line="61" pos:column="36">plugin_instance<pos:position pos:line="61" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="61" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="53"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="62" pos:column="5">free<pos:position pos:line="62" pos:column="9"/></name><argument_list pos:line="62" pos:column="9">(<argument><expr><name pos:line="62" pos:column="10">ret_str<pos:position pos:line="62" pos:column="17"/></name></expr></argument>)<pos:position pos:line="62" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="19"/></expr_stmt>
    <if pos:line="63" pos:column="5">if <condition pos:line="63" pos:column="8">(<expr><name pos:line="63" pos:column="9">res<pos:position pos:line="63" pos:column="12"/></name> <operator pos:line="63" pos:column="13">==<pos:position pos:line="63" pos:column="15"/></operator> <operator pos:line="63" pos:column="16">-<pos:position pos:line="63" pos:column="17"/></operator><literal type="number" pos:line="63" pos:column="17">1<pos:position pos:line="63" pos:column="18"/></literal></expr>)<pos:position pos:line="63" pos:column="19"/></condition><then pos:line="63" pos:column="19"> <block pos:line="63" pos:column="20">{
      <expr_stmt><expr><call><name pos:line="64" pos:column="7">ERROR<pos:position pos:line="64" pos:column="12"/></name><argument_list pos:line="64" pos:column="12">(<argument><expr><literal type="string" pos:line="64" pos:column="13">"write_sensu plugin: Unable to alloc memory"<pos:position pos:line="64" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="64" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="59"/></expr_stmt>
      <return pos:line="65" pos:column="7">return <expr><name pos:line="65" pos:column="14">NULL<pos:position pos:line="65" pos:column="18"/></name></expr>;<pos:position pos:line="65" pos:column="19"/></return>
    }<pos:position pos:line="66" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="67" pos:column="5">ret_str<pos:position pos:line="67" pos:column="12"/></name> <operator pos:line="67" pos:column="13">=<pos:position pos:line="67" pos:column="14"/></operator> <name pos:line="67" pos:column="15">temp_str<pos:position pos:line="67" pos:column="23"/></name></expr>;<pos:position pos:line="67" pos:column="24"/></expr_stmt>
  }<pos:position pos:line="68" pos:column="4"/></block></then></if>

  <comment type="line" pos:line="70" pos:column="3">// incorporate the plugin type instance if any</comment>
  <if pos:line="71" pos:column="3">if <condition pos:line="71" pos:column="6">(<expr><name><name pos:line="71" pos:column="7">vl<pos:position pos:line="71" pos:column="9"/></name><operator pos:line="71" pos:column="9">-&gt;<pos:position pos:line="71" pos:column="14"/></operator><name pos:line="71" pos:column="11">type_instance<pos:position pos:line="71" pos:column="24"/></name><index pos:line="71" pos:column="24">[<expr><literal type="number" pos:line="71" pos:column="25">0<pos:position pos:line="71" pos:column="26"/></literal></expr>]<pos:position pos:line="71" pos:column="27"/></index></name> <operator pos:line="71" pos:column="28">!=<pos:position pos:line="71" pos:column="30"/></operator> <literal type="number" pos:line="71" pos:column="31">0<pos:position pos:line="71" pos:column="32"/></literal></expr>)<pos:position pos:line="71" pos:column="33"/></condition><then pos:line="71" pos:column="33"> <block pos:line="71" pos:column="34">{
    <expr_stmt><expr><name pos:line="72" pos:column="5">res<pos:position pos:line="72" pos:column="8"/></name> <operator pos:line="72" pos:column="9">=<pos:position pos:line="72" pos:column="10"/></operator>
        <call><name pos:line="73" pos:column="9">my_asprintf<pos:position pos:line="73" pos:column="20"/></name><argument_list pos:line="73" pos:column="20">(<argument><expr><operator pos:line="73" pos:column="21">&amp;<pos:position pos:line="73" pos:column="26"/></operator><name pos:line="73" pos:column="22">temp_str<pos:position pos:line="73" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="73" pos:column="32">"%s, \"collectd_plugin_type_instance\": \"%s\""<pos:position pos:line="73" pos:column="79"/></literal></expr></argument>,
                    <argument><expr><name pos:line="74" pos:column="21">ret_str<pos:position pos:line="74" pos:column="28"/></name></expr></argument>, <argument><expr><name><name pos:line="74" pos:column="30">vl<pos:position pos:line="74" pos:column="32"/></name><operator pos:line="74" pos:column="32">-&gt;<pos:position pos:line="74" pos:column="37"/></operator><name pos:line="74" pos:column="34">type_instance<pos:position pos:line="74" pos:column="47"/></name></name></expr></argument>)<pos:position pos:line="74" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="49"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="75" pos:column="5">free<pos:position pos:line="75" pos:column="9"/></name><argument_list pos:line="75" pos:column="9">(<argument><expr><name pos:line="75" pos:column="10">ret_str<pos:position pos:line="75" pos:column="17"/></name></expr></argument>)<pos:position pos:line="75" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="19"/></expr_stmt>
    <if pos:line="76" pos:column="5">if <condition pos:line="76" pos:column="8">(<expr><name pos:line="76" pos:column="9">res<pos:position pos:line="76" pos:column="12"/></name> <operator pos:line="76" pos:column="13">==<pos:position pos:line="76" pos:column="15"/></operator> <operator pos:line="76" pos:column="16">-<pos:position pos:line="76" pos:column="17"/></operator><literal type="number" pos:line="76" pos:column="17">1<pos:position pos:line="76" pos:column="18"/></literal></expr>)<pos:position pos:line="76" pos:column="19"/></condition><then pos:line="76" pos:column="19"> <block pos:line="76" pos:column="20">{
      <expr_stmt><expr><call><name pos:line="77" pos:column="7">ERROR<pos:position pos:line="77" pos:column="12"/></name><argument_list pos:line="77" pos:column="12">(<argument><expr><literal type="string" pos:line="77" pos:column="13">"write_sensu plugin: Unable to alloc memory"<pos:position pos:line="77" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="77" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="59"/></expr_stmt>
      <return pos:line="78" pos:column="7">return <expr><name pos:line="78" pos:column="14">NULL<pos:position pos:line="78" pos:column="18"/></name></expr>;<pos:position pos:line="78" pos:column="19"/></return>
    }<pos:position pos:line="79" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="80" pos:column="5">ret_str<pos:position pos:line="80" pos:column="12"/></name> <operator pos:line="80" pos:column="13">=<pos:position pos:line="80" pos:column="14"/></operator> <name pos:line="80" pos:column="15">temp_str<pos:position pos:line="80" pos:column="23"/></name></expr>;<pos:position pos:line="80" pos:column="24"/></expr_stmt>
  }<pos:position pos:line="81" pos:column="4"/></block></then></if>

  <comment type="line" pos:line="83" pos:column="3">// incorporate the data source type</comment>
  <if pos:line="84" pos:column="3">if <condition pos:line="84" pos:column="6">(<expr><operator pos:line="84" pos:column="7">(<pos:position pos:line="84" pos:column="8"/></operator><name><name pos:line="84" pos:column="8">ds<pos:position pos:line="84" pos:column="10"/></name><operator pos:line="84" pos:column="10">-&gt;<pos:position pos:line="84" pos:column="15"/></operator><name pos:line="84" pos:column="12">ds<pos:position pos:line="84" pos:column="14"/></name><index pos:line="84" pos:column="14">[<expr><name pos:line="84" pos:column="15">index<pos:position pos:line="84" pos:column="20"/></name></expr>]<pos:position pos:line="84" pos:column="21"/></index></name><operator pos:line="84" pos:column="21">.<pos:position pos:line="84" pos:column="22"/></operator><name pos:line="84" pos:column="22">type<pos:position pos:line="84" pos:column="26"/></name> <operator pos:line="84" pos:column="27">!=<pos:position pos:line="84" pos:column="29"/></operator> <name pos:line="84" pos:column="30">DS_TYPE_GAUGE<pos:position pos:line="84" pos:column="43"/></name><operator pos:line="84" pos:column="43">)<pos:position pos:line="84" pos:column="44"/></operator> <operator pos:line="84" pos:column="45">&amp;&amp;<pos:position pos:line="84" pos:column="55"/></operator> <operator pos:line="84" pos:column="48">(<pos:position pos:line="84" pos:column="49"/></operator><name pos:line="84" pos:column="49">rates<pos:position pos:line="84" pos:column="54"/></name> <operator pos:line="84" pos:column="55">!=<pos:position pos:line="84" pos:column="57"/></operator> <name pos:line="84" pos:column="58">NULL<pos:position pos:line="84" pos:column="62"/></name><operator pos:line="84" pos:column="62">)<pos:position pos:line="84" pos:column="63"/></operator></expr>)<pos:position pos:line="84" pos:column="64"/></condition><then pos:line="84" pos:column="64"> <block pos:line="84" pos:column="65">{
    <decl_stmt><decl><type><name pos:line="85" pos:column="5">char<pos:position pos:line="85" pos:column="9"/></name></type> <name><name pos:line="85" pos:column="10">ds_type<pos:position pos:line="85" pos:column="17"/></name><index pos:line="85" pos:column="17">[<expr><name pos:line="85" pos:column="18">DATA_MAX_NAME_LEN<pos:position pos:line="85" pos:column="35"/></name></expr>]<pos:position pos:line="85" pos:column="36"/></index></name></decl>;<pos:position pos:line="85" pos:column="37"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="86" pos:column="5">ssnprintf<pos:position pos:line="86" pos:column="14"/></name><argument_list pos:line="86" pos:column="14">(<argument><expr><name pos:line="86" pos:column="15">ds_type<pos:position pos:line="86" pos:column="22"/></name></expr></argument>, <argument><expr><sizeof pos:line="86" pos:column="24">sizeof<argument_list pos:line="86" pos:column="30">(<argument><expr><name pos:line="86" pos:column="31">ds_type<pos:position pos:line="86" pos:column="38"/></name></expr></argument>)<pos:position pos:line="86" pos:column="39"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="86" pos:column="41">"%s:rate"<pos:position pos:line="86" pos:column="50"/></literal></expr></argument>,
              <argument><expr><call><name pos:line="87" pos:column="15">DS_TYPE_TO_STRING<pos:position pos:line="87" pos:column="32"/></name><argument_list pos:line="87" pos:column="32">(<argument><expr><name><name pos:line="87" pos:column="33">ds<pos:position pos:line="87" pos:column="35"/></name><operator pos:line="87" pos:column="35">-&gt;<pos:position pos:line="87" pos:column="40"/></operator><name pos:line="87" pos:column="37">ds<pos:position pos:line="87" pos:column="39"/></name><index pos:line="87" pos:column="39">[<expr><name pos:line="87" pos:column="40">index<pos:position pos:line="87" pos:column="45"/></name></expr>]<pos:position pos:line="87" pos:column="46"/></index></name><operator pos:line="87" pos:column="46">.<pos:position pos:line="87" pos:column="47"/></operator><name pos:line="87" pos:column="47">type<pos:position pos:line="87" pos:column="51"/></name></expr></argument>)<pos:position pos:line="87" pos:column="52"/></argument_list></call></expr></argument>)<pos:position pos:line="87" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="54"/></expr_stmt>
    <expr_stmt><expr><name pos:line="88" pos:column="5">res<pos:position pos:line="88" pos:column="8"/></name> <operator pos:line="88" pos:column="9">=<pos:position pos:line="88" pos:column="10"/></operator> <call><name pos:line="88" pos:column="11">my_asprintf<pos:position pos:line="88" pos:column="22"/></name><argument_list pos:line="88" pos:column="22">(<argument><expr><operator pos:line="88" pos:column="23">&amp;<pos:position pos:line="88" pos:column="28"/></operator><name pos:line="88" pos:column="24">temp_str<pos:position pos:line="88" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="88" pos:column="34">"%s, \"collectd_data_source_type\": \"%s\""<pos:position pos:line="88" pos:column="77"/></literal></expr></argument>,
                      <argument><expr><name pos:line="89" pos:column="23">ret_str<pos:position pos:line="89" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="89" pos:column="32">ds_type<pos:position pos:line="89" pos:column="39"/></name></expr></argument>)<pos:position pos:line="89" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="41"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="90" pos:column="5">free<pos:position pos:line="90" pos:column="9"/></name><argument_list pos:line="90" pos:column="9">(<argument><expr><name pos:line="90" pos:column="10">ret_str<pos:position pos:line="90" pos:column="17"/></name></expr></argument>)<pos:position pos:line="90" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="90" pos:column="19"/></expr_stmt>
    <if pos:line="91" pos:column="5">if <condition pos:line="91" pos:column="8">(<expr><name pos:line="91" pos:column="9">res<pos:position pos:line="91" pos:column="12"/></name> <operator pos:line="91" pos:column="13">==<pos:position pos:line="91" pos:column="15"/></operator> <operator pos:line="91" pos:column="16">-<pos:position pos:line="91" pos:column="17"/></operator><literal type="number" pos:line="91" pos:column="17">1<pos:position pos:line="91" pos:column="18"/></literal></expr>)<pos:position pos:line="91" pos:column="19"/></condition><then pos:line="91" pos:column="19"> <block pos:line="91" pos:column="20">{
      <expr_stmt><expr><call><name pos:line="92" pos:column="7">ERROR<pos:position pos:line="92" pos:column="12"/></name><argument_list pos:line="92" pos:column="12">(<argument><expr><literal type="string" pos:line="92" pos:column="13">"write_sensu plugin: Unable to alloc memory"<pos:position pos:line="92" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="92" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="59"/></expr_stmt>
      <return pos:line="93" pos:column="7">return <expr><name pos:line="93" pos:column="14">NULL<pos:position pos:line="93" pos:column="18"/></name></expr>;<pos:position pos:line="93" pos:column="19"/></return>
    }<pos:position pos:line="94" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="95" pos:column="5">ret_str<pos:position pos:line="95" pos:column="12"/></name> <operator pos:line="95" pos:column="13">=<pos:position pos:line="95" pos:column="14"/></operator> <name pos:line="95" pos:column="15">temp_str<pos:position pos:line="95" pos:column="23"/></name></expr>;<pos:position pos:line="95" pos:column="24"/></expr_stmt>
  }<pos:position pos:line="96" pos:column="4"/></block></then> <else pos:line="96" pos:column="5">else <block pos:line="96" pos:column="10">{
    <expr_stmt><expr><name pos:line="97" pos:column="5">res<pos:position pos:line="97" pos:column="8"/></name> <operator pos:line="97" pos:column="9">=<pos:position pos:line="97" pos:column="10"/></operator> <call><name pos:line="97" pos:column="11">my_asprintf<pos:position pos:line="97" pos:column="22"/></name><argument_list pos:line="97" pos:column="22">(<argument><expr><operator pos:line="97" pos:column="23">&amp;<pos:position pos:line="97" pos:column="28"/></operator><name pos:line="97" pos:column="24">temp_str<pos:position pos:line="97" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="97" pos:column="34">"%s, \"collectd_data_source_type\": \"%s\""<pos:position pos:line="97" pos:column="77"/></literal></expr></argument>,
                      <argument><expr><name pos:line="98" pos:column="23">ret_str<pos:position pos:line="98" pos:column="30"/></name></expr></argument>, <argument><expr><call><name pos:line="98" pos:column="32">DS_TYPE_TO_STRING<pos:position pos:line="98" pos:column="49"/></name><argument_list pos:line="98" pos:column="49">(<argument><expr><name><name pos:line="98" pos:column="50">ds<pos:position pos:line="98" pos:column="52"/></name><operator pos:line="98" pos:column="52">-&gt;<pos:position pos:line="98" pos:column="57"/></operator><name pos:line="98" pos:column="54">ds<pos:position pos:line="98" pos:column="56"/></name><index pos:line="98" pos:column="56">[<expr><name pos:line="98" pos:column="57">index<pos:position pos:line="98" pos:column="62"/></name></expr>]<pos:position pos:line="98" pos:column="63"/></index></name><operator pos:line="98" pos:column="63">.<pos:position pos:line="98" pos:column="64"/></operator><name pos:line="98" pos:column="64">type<pos:position pos:line="98" pos:column="68"/></name></expr></argument>)<pos:position pos:line="98" pos:column="69"/></argument_list></call></expr></argument>)<pos:position pos:line="98" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="98" pos:column="71"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="99" pos:column="5">free<pos:position pos:line="99" pos:column="9"/></name><argument_list pos:line="99" pos:column="9">(<argument><expr><name pos:line="99" pos:column="10">ret_str<pos:position pos:line="99" pos:column="17"/></name></expr></argument>)<pos:position pos:line="99" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="99" pos:column="19"/></expr_stmt>
    <if pos:line="100" pos:column="5">if <condition pos:line="100" pos:column="8">(<expr><name pos:line="100" pos:column="9">res<pos:position pos:line="100" pos:column="12"/></name> <operator pos:line="100" pos:column="13">==<pos:position pos:line="100" pos:column="15"/></operator> <operator pos:line="100" pos:column="16">-<pos:position pos:line="100" pos:column="17"/></operator><literal type="number" pos:line="100" pos:column="17">1<pos:position pos:line="100" pos:column="18"/></literal></expr>)<pos:position pos:line="100" pos:column="19"/></condition><then pos:line="100" pos:column="19"> <block pos:line="100" pos:column="20">{
      <expr_stmt><expr><call><name pos:line="101" pos:column="7">ERROR<pos:position pos:line="101" pos:column="12"/></name><argument_list pos:line="101" pos:column="12">(<argument><expr><literal type="string" pos:line="101" pos:column="13">"write_sensu plugin: Unable to alloc memory"<pos:position pos:line="101" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="101" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="101" pos:column="59"/></expr_stmt>
      <return pos:line="102" pos:column="7">return <expr><name pos:line="102" pos:column="14">NULL<pos:position pos:line="102" pos:column="18"/></name></expr>;<pos:position pos:line="102" pos:column="19"/></return>
    }<pos:position pos:line="103" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="104" pos:column="5">ret_str<pos:position pos:line="104" pos:column="12"/></name> <operator pos:line="104" pos:column="13">=<pos:position pos:line="104" pos:column="14"/></operator> <name pos:line="104" pos:column="15">temp_str<pos:position pos:line="104" pos:column="23"/></name></expr>;<pos:position pos:line="104" pos:column="24"/></expr_stmt>
  }<pos:position pos:line="105" pos:column="4"/></block></else></if>

  <comment type="line" pos:line="107" pos:column="3">// incorporate the data source name</comment>
  <expr_stmt><expr><name pos:line="108" pos:column="3">res<pos:position pos:line="108" pos:column="6"/></name> <operator pos:line="108" pos:column="7">=<pos:position pos:line="108" pos:column="8"/></operator> <call><name pos:line="108" pos:column="9">my_asprintf<pos:position pos:line="108" pos:column="20"/></name><argument_list pos:line="108" pos:column="20">(<argument><expr><operator pos:line="108" pos:column="21">&amp;<pos:position pos:line="108" pos:column="26"/></operator><name pos:line="108" pos:column="22">temp_str<pos:position pos:line="108" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="108" pos:column="32">"%s, \"collectd_data_source_name\": \"%s\""<pos:position pos:line="108" pos:column="75"/></literal></expr></argument>,
                    <argument><expr><name pos:line="109" pos:column="21">ret_str<pos:position pos:line="109" pos:column="28"/></name></expr></argument>, <argument><expr><name><name pos:line="109" pos:column="30">ds<pos:position pos:line="109" pos:column="32"/></name><operator pos:line="109" pos:column="32">-&gt;<pos:position pos:line="109" pos:column="37"/></operator><name pos:line="109" pos:column="34">ds<pos:position pos:line="109" pos:column="36"/></name><index pos:line="109" pos:column="36">[<expr><name pos:line="109" pos:column="37">index<pos:position pos:line="109" pos:column="42"/></name></expr>]<pos:position pos:line="109" pos:column="43"/></index></name><operator pos:line="109" pos:column="43">.<pos:position pos:line="109" pos:column="44"/></operator><name pos:line="109" pos:column="44">name<pos:position pos:line="109" pos:column="48"/></name></expr></argument>)<pos:position pos:line="109" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="109" pos:column="50"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="110" pos:column="3">free<pos:position pos:line="110" pos:column="7"/></name><argument_list pos:line="110" pos:column="7">(<argument><expr><name pos:line="110" pos:column="8">ret_str<pos:position pos:line="110" pos:column="15"/></name></expr></argument>)<pos:position pos:line="110" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="110" pos:column="17"/></expr_stmt>
  <if pos:line="111" pos:column="3">if <condition pos:line="111" pos:column="6">(<expr><name pos:line="111" pos:column="7">res<pos:position pos:line="111" pos:column="10"/></name> <operator pos:line="111" pos:column="11">==<pos:position pos:line="111" pos:column="13"/></operator> <operator pos:line="111" pos:column="14">-<pos:position pos:line="111" pos:column="15"/></operator><literal type="number" pos:line="111" pos:column="15">1<pos:position pos:line="111" pos:column="16"/></literal></expr>)<pos:position pos:line="111" pos:column="17"/></condition><then pos:line="111" pos:column="17"> <block pos:line="111" pos:column="18">{
    <expr_stmt><expr><call><name pos:line="112" pos:column="5">ERROR<pos:position pos:line="112" pos:column="10"/></name><argument_list pos:line="112" pos:column="10">(<argument><expr><literal type="string" pos:line="112" pos:column="11">"write_sensu plugin: Unable to alloc memory"<pos:position pos:line="112" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="112" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="112" pos:column="57"/></expr_stmt>
    <return pos:line="113" pos:column="5">return <expr><name pos:line="113" pos:column="12">NULL<pos:position pos:line="113" pos:column="16"/></name></expr>;<pos:position pos:line="113" pos:column="17"/></return>
  }<pos:position pos:line="114" pos:column="4"/></block></then></if>
  <expr_stmt><expr><name pos:line="115" pos:column="3">ret_str<pos:position pos:line="115" pos:column="10"/></name> <operator pos:line="115" pos:column="11">=<pos:position pos:line="115" pos:column="12"/></operator> <name pos:line="115" pos:column="13">temp_str<pos:position pos:line="115" pos:column="21"/></name></expr>;<pos:position pos:line="115" pos:column="22"/></expr_stmt>

  <comment type="line" pos:line="117" pos:column="3">// incorporate the data source index</comment>
  <block pos:line="118" pos:column="3">{
    <decl_stmt><decl><type><name pos:line="119" pos:column="5">char<pos:position pos:line="119" pos:column="9"/></name></type> <name><name pos:line="119" pos:column="10">ds_index<pos:position pos:line="119" pos:column="18"/></name><index pos:line="119" pos:column="18">[<expr><name pos:line="119" pos:column="19">DATA_MAX_NAME_LEN<pos:position pos:line="119" pos:column="36"/></name></expr>]<pos:position pos:line="119" pos:column="37"/></index></name></decl>;<pos:position pos:line="119" pos:column="38"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="120" pos:column="5">ssnprintf<pos:position pos:line="120" pos:column="14"/></name><argument_list pos:line="120" pos:column="14">(<argument><expr><name pos:line="120" pos:column="15">ds_index<pos:position pos:line="120" pos:column="23"/></name></expr></argument>, <argument><expr><sizeof pos:line="120" pos:column="25">sizeof<argument_list pos:line="120" pos:column="31">(<argument><expr><name pos:line="120" pos:column="32">ds_index<pos:position pos:line="120" pos:column="40"/></name></expr></argument>)<pos:position pos:line="120" pos:column="41"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="120" pos:column="43">"%zu"<pos:position pos:line="120" pos:column="48"/></literal></expr></argument>, <argument><expr><name pos:line="120" pos:column="50">index<pos:position pos:line="120" pos:column="55"/></name></expr></argument>)<pos:position pos:line="120" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="120" pos:column="57"/></expr_stmt>
    <expr_stmt><expr><name pos:line="121" pos:column="5">res<pos:position pos:line="121" pos:column="8"/></name> <operator pos:line="121" pos:column="9">=<pos:position pos:line="121" pos:column="10"/></operator> <call><name pos:line="121" pos:column="11">my_asprintf<pos:position pos:line="121" pos:column="22"/></name><argument_list pos:line="121" pos:column="22">(<argument><expr><operator pos:line="121" pos:column="23">&amp;<pos:position pos:line="121" pos:column="28"/></operator><name pos:line="121" pos:column="24">temp_str<pos:position pos:line="121" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="121" pos:column="34">"%s, \"collectd_data_source_index\": %s"<pos:position pos:line="121" pos:column="74"/></literal></expr></argument>,
                      <argument><expr><name pos:line="122" pos:column="23">ret_str<pos:position pos:line="122" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="122" pos:column="32">ds_index<pos:position pos:line="122" pos:column="40"/></name></expr></argument>)<pos:position pos:line="122" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="122" pos:column="42"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="123" pos:column="5">free<pos:position pos:line="123" pos:column="9"/></name><argument_list pos:line="123" pos:column="9">(<argument><expr><name pos:line="123" pos:column="10">ret_str<pos:position pos:line="123" pos:column="17"/></name></expr></argument>)<pos:position pos:line="123" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="123" pos:column="19"/></expr_stmt>
    <if pos:line="124" pos:column="5">if <condition pos:line="124" pos:column="8">(<expr><name pos:line="124" pos:column="9">res<pos:position pos:line="124" pos:column="12"/></name> <operator pos:line="124" pos:column="13">==<pos:position pos:line="124" pos:column="15"/></operator> <operator pos:line="124" pos:column="16">-<pos:position pos:line="124" pos:column="17"/></operator><literal type="number" pos:line="124" pos:column="17">1<pos:position pos:line="124" pos:column="18"/></literal></expr>)<pos:position pos:line="124" pos:column="19"/></condition><then pos:line="124" pos:column="19"> <block pos:line="124" pos:column="20">{
      <expr_stmt><expr><call><name pos:line="125" pos:column="7">ERROR<pos:position pos:line="125" pos:column="12"/></name><argument_list pos:line="125" pos:column="12">(<argument><expr><literal type="string" pos:line="125" pos:column="13">"write_sensu plugin: Unable to alloc memory"<pos:position pos:line="125" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="125" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="125" pos:column="59"/></expr_stmt>
      <return pos:line="126" pos:column="7">return <expr><name pos:line="126" pos:column="14">NULL<pos:position pos:line="126" pos:column="18"/></name></expr>;<pos:position pos:line="126" pos:column="19"/></return>
    }<pos:position pos:line="127" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="128" pos:column="5">ret_str<pos:position pos:line="128" pos:column="12"/></name> <operator pos:line="128" pos:column="13">=<pos:position pos:line="128" pos:column="14"/></operator> <name pos:line="128" pos:column="15">temp_str<pos:position pos:line="128" pos:column="23"/></name></expr>;<pos:position pos:line="128" pos:column="24"/></expr_stmt>
  }<pos:position pos:line="129" pos:column="4"/></block>

  <comment type="line" pos:line="131" pos:column="3">// add key value attributes from config if any</comment>
  <for pos:line="132" pos:column="3">for <control pos:line="132" pos:column="7">(<init><decl><type><name pos:line="132" pos:column="8">size_t<pos:position pos:line="132" pos:column="14"/></name></type> <name pos:line="132" pos:column="15">i<pos:position pos:line="132" pos:column="16"/></name> <init pos:line="132" pos:column="17">= <expr><literal type="number" pos:line="132" pos:column="19">0<pos:position pos:line="132" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="132" pos:column="21"/></init> <condition><expr><name pos:line="132" pos:column="22">i<pos:position pos:line="132" pos:column="23"/></name> <operator pos:line="132" pos:column="24">&lt;<pos:position pos:line="132" pos:column="28"/></operator> <name pos:line="132" pos:column="26">sensu_attrs_num<pos:position pos:line="132" pos:column="41"/></name></expr>;<pos:position pos:line="132" pos:column="42"/></condition> <incr><expr><name pos:line="132" pos:column="43">i<pos:position pos:line="132" pos:column="44"/></name> <operator pos:line="132" pos:column="45">+=<pos:position pos:line="132" pos:column="47"/></operator> <literal type="number" pos:line="132" pos:column="48">2<pos:position pos:line="132" pos:column="49"/></literal></expr></incr>)<pos:position pos:line="132" pos:column="50"/></control> <block pos:line="132" pos:column="51">{
    <expr_stmt><expr><name pos:line="133" pos:column="5">res<pos:position pos:line="133" pos:column="8"/></name> <operator pos:line="133" pos:column="9">=<pos:position pos:line="133" pos:column="10"/></operator> <call><name pos:line="133" pos:column="11">my_asprintf<pos:position pos:line="133" pos:column="22"/></name><argument_list pos:line="133" pos:column="22">(<argument><expr><operator pos:line="133" pos:column="23">&amp;<pos:position pos:line="133" pos:column="28"/></operator><name pos:line="133" pos:column="24">temp_str<pos:position pos:line="133" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="133" pos:column="34">"%s, \"%s\": \"%s\""<pos:position pos:line="133" pos:column="54"/></literal></expr></argument>, <argument><expr><name pos:line="133" pos:column="56">ret_str<pos:position pos:line="133" pos:column="63"/></name></expr></argument>, <argument><expr><name><name pos:line="133" pos:column="65">sensu_attrs<pos:position pos:line="133" pos:column="76"/></name><index pos:line="133" pos:column="76">[<expr><name pos:line="133" pos:column="77">i<pos:position pos:line="133" pos:column="78"/></name></expr>]<pos:position pos:line="133" pos:column="79"/></index></name></expr></argument>,
                      <argument><expr><name><name pos:line="134" pos:column="23">sensu_attrs<pos:position pos:line="134" pos:column="34"/></name><index pos:line="134" pos:column="34">[<expr><name pos:line="134" pos:column="35">i<pos:position pos:line="134" pos:column="36"/></name> <operator pos:line="134" pos:column="37">+<pos:position pos:line="134" pos:column="38"/></operator> <literal type="number" pos:line="134" pos:column="39">1<pos:position pos:line="134" pos:column="40"/></literal></expr>]<pos:position pos:line="134" pos:column="41"/></index></name></expr></argument>)<pos:position pos:line="134" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="134" pos:column="43"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="135" pos:column="5">free<pos:position pos:line="135" pos:column="9"/></name><argument_list pos:line="135" pos:column="9">(<argument><expr><name pos:line="135" pos:column="10">ret_str<pos:position pos:line="135" pos:column="17"/></name></expr></argument>)<pos:position pos:line="135" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="135" pos:column="19"/></expr_stmt>
    <if pos:line="136" pos:column="5">if <condition pos:line="136" pos:column="8">(<expr><name pos:line="136" pos:column="9">res<pos:position pos:line="136" pos:column="12"/></name> <operator pos:line="136" pos:column="13">==<pos:position pos:line="136" pos:column="15"/></operator> <operator pos:line="136" pos:column="16">-<pos:position pos:line="136" pos:column="17"/></operator><literal type="number" pos:line="136" pos:column="17">1<pos:position pos:line="136" pos:column="18"/></literal></expr>)<pos:position pos:line="136" pos:column="19"/></condition><then pos:line="136" pos:column="19"> <block pos:line="136" pos:column="20">{
      <expr_stmt><expr><call><name pos:line="137" pos:column="7">ERROR<pos:position pos:line="137" pos:column="12"/></name><argument_list pos:line="137" pos:column="12">(<argument><expr><literal type="string" pos:line="137" pos:column="13">"write_sensu plugin: Unable to alloc memory"<pos:position pos:line="137" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="137" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="137" pos:column="59"/></expr_stmt>
      <return pos:line="138" pos:column="7">return <expr><name pos:line="138" pos:column="14">NULL<pos:position pos:line="138" pos:column="18"/></name></expr>;<pos:position pos:line="138" pos:column="19"/></return>
    }<pos:position pos:line="139" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="140" pos:column="5">ret_str<pos:position pos:line="140" pos:column="12"/></name> <operator pos:line="140" pos:column="13">=<pos:position pos:line="140" pos:column="14"/></operator> <name pos:line="140" pos:column="15">temp_str<pos:position pos:line="140" pos:column="23"/></name></expr>;<pos:position pos:line="140" pos:column="24"/></expr_stmt>
  }<pos:position pos:line="141" pos:column="4"/></block></for>

  <comment type="line" pos:line="143" pos:column="3">// incorporate sensu tags from config if any</comment>
  <if pos:line="144" pos:column="3">if <condition pos:line="144" pos:column="6">(<expr><operator pos:line="144" pos:column="7">(<pos:position pos:line="144" pos:column="8"/></operator><name pos:line="144" pos:column="8">sensu_tags<pos:position pos:line="144" pos:column="18"/></name> <operator pos:line="144" pos:column="19">!=<pos:position pos:line="144" pos:column="21"/></operator> <name pos:line="144" pos:column="22">NULL<pos:position pos:line="144" pos:column="26"/></name><operator pos:line="144" pos:column="26">)<pos:position pos:line="144" pos:column="27"/></operator> <operator pos:line="144" pos:column="28">&amp;&amp;<pos:position pos:line="144" pos:column="38"/></operator> <operator pos:line="144" pos:column="31">(<pos:position pos:line="144" pos:column="32"/></operator><call><name pos:line="144" pos:column="32">strlen<pos:position pos:line="144" pos:column="38"/></name><argument_list pos:line="144" pos:column="38">(<argument><expr><name pos:line="144" pos:column="39">sensu_tags<pos:position pos:line="144" pos:column="49"/></name></expr></argument>)<pos:position pos:line="144" pos:column="50"/></argument_list></call> <operator pos:line="144" pos:column="51">!=<pos:position pos:line="144" pos:column="53"/></operator> <literal type="number" pos:line="144" pos:column="54">0<pos:position pos:line="144" pos:column="55"/></literal><operator pos:line="144" pos:column="55">)<pos:position pos:line="144" pos:column="56"/></operator></expr>)<pos:position pos:line="144" pos:column="57"/></condition><then pos:line="144" pos:column="57"> <block pos:line="144" pos:column="58">{
    <expr_stmt><expr><name pos:line="145" pos:column="5">res<pos:position pos:line="145" pos:column="8"/></name> <operator pos:line="145" pos:column="9">=<pos:position pos:line="145" pos:column="10"/></operator> <call><name pos:line="145" pos:column="11">my_asprintf<pos:position pos:line="145" pos:column="22"/></name><argument_list pos:line="145" pos:column="22">(<argument><expr><operator pos:line="145" pos:column="23">&amp;<pos:position pos:line="145" pos:column="28"/></operator><name pos:line="145" pos:column="24">temp_str<pos:position pos:line="145" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="145" pos:column="34">"%s, %s"<pos:position pos:line="145" pos:column="42"/></literal></expr></argument>, <argument><expr><name pos:line="145" pos:column="44">ret_str<pos:position pos:line="145" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="145" pos:column="53">sensu_tags<pos:position pos:line="145" pos:column="63"/></name></expr></argument>)<pos:position pos:line="145" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="145" pos:column="65"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="146" pos:column="5">free<pos:position pos:line="146" pos:column="9"/></name><argument_list pos:line="146" pos:column="9">(<argument><expr><name pos:line="146" pos:column="10">ret_str<pos:position pos:line="146" pos:column="17"/></name></expr></argument>)<pos:position pos:line="146" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="146" pos:column="19"/></expr_stmt>
    <if pos:line="147" pos:column="5">if <condition pos:line="147" pos:column="8">(<expr><name pos:line="147" pos:column="9">res<pos:position pos:line="147" pos:column="12"/></name> <operator pos:line="147" pos:column="13">==<pos:position pos:line="147" pos:column="15"/></operator> <operator pos:line="147" pos:column="16">-<pos:position pos:line="147" pos:column="17"/></operator><literal type="number" pos:line="147" pos:column="17">1<pos:position pos:line="147" pos:column="18"/></literal></expr>)<pos:position pos:line="147" pos:column="19"/></condition><then pos:line="147" pos:column="19"> <block pos:line="147" pos:column="20">{
      <expr_stmt><expr><call><name pos:line="148" pos:column="7">ERROR<pos:position pos:line="148" pos:column="12"/></name><argument_list pos:line="148" pos:column="12">(<argument><expr><literal type="string" pos:line="148" pos:column="13">"write_sensu plugin: Unable to alloc memory"<pos:position pos:line="148" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="148" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="148" pos:column="59"/></expr_stmt>
      <return pos:line="149" pos:column="7">return <expr><name pos:line="149" pos:column="14">NULL<pos:position pos:line="149" pos:column="18"/></name></expr>;<pos:position pos:line="149" pos:column="19"/></return>
    }<pos:position pos:line="150" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="151" pos:column="5">ret_str<pos:position pos:line="151" pos:column="12"/></name> <operator pos:line="151" pos:column="13">=<pos:position pos:line="151" pos:column="14"/></operator> <name pos:line="151" pos:column="15">temp_str<pos:position pos:line="151" pos:column="23"/></name></expr>;<pos:position pos:line="151" pos:column="24"/></expr_stmt>
  }<pos:position pos:line="152" pos:column="4"/></block></then></if>

  <comment type="line" pos:line="154" pos:column="3">// calculate the value and set to a string</comment>
  <if pos:line="155" pos:column="3">if <condition pos:line="155" pos:column="6">(<expr><name><name pos:line="155" pos:column="7">ds<pos:position pos:line="155" pos:column="9"/></name><operator pos:line="155" pos:column="9">-&gt;<pos:position pos:line="155" pos:column="14"/></operator><name pos:line="155" pos:column="11">ds<pos:position pos:line="155" pos:column="13"/></name><index pos:line="155" pos:column="13">[<expr><name pos:line="155" pos:column="14">index<pos:position pos:line="155" pos:column="19"/></name></expr>]<pos:position pos:line="155" pos:column="20"/></index></name><operator pos:line="155" pos:column="20">.<pos:position pos:line="155" pos:column="21"/></operator><name pos:line="155" pos:column="21">type<pos:position pos:line="155" pos:column="25"/></name> <operator pos:line="155" pos:column="26">==<pos:position pos:line="155" pos:column="28"/></operator> <name pos:line="155" pos:column="29">DS_TYPE_GAUGE<pos:position pos:line="155" pos:column="42"/></name></expr>)<pos:position pos:line="155" pos:column="43"/></condition><then pos:line="155" pos:column="43"> <block pos:line="155" pos:column="44">{
    <expr_stmt><expr><name pos:line="156" pos:column="5">res<pos:position pos:line="156" pos:column="8"/></name> <operator pos:line="156" pos:column="9">=<pos:position pos:line="156" pos:column="10"/></operator> <call><name pos:line="156" pos:column="11">my_asprintf<pos:position pos:line="156" pos:column="22"/></name><argument_list pos:line="156" pos:column="22">(<argument><expr><operator pos:line="156" pos:column="23">&amp;<pos:position pos:line="156" pos:column="28"/></operator><name pos:line="156" pos:column="24">value_str<pos:position pos:line="156" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="156" pos:column="35">GAUGE_FORMAT<pos:position pos:line="156" pos:column="47"/></name></expr></argument>, <argument><expr><name><name pos:line="156" pos:column="49">vl<pos:position pos:line="156" pos:column="51"/></name><operator pos:line="156" pos:column="51">-&gt;<pos:position pos:line="156" pos:column="56"/></operator><name pos:line="156" pos:column="53">values<pos:position pos:line="156" pos:column="59"/></name><index pos:line="156" pos:column="59">[<expr><name pos:line="156" pos:column="60">index<pos:position pos:line="156" pos:column="65"/></name></expr>]<pos:position pos:line="156" pos:column="66"/></index></name><operator pos:line="156" pos:column="66">.<pos:position pos:line="156" pos:column="67"/></operator><name pos:line="156" pos:column="67">gauge<pos:position pos:line="156" pos:column="72"/></name></expr></argument>)<pos:position pos:line="156" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="156" pos:column="74"/></expr_stmt>
    <if pos:line="157" pos:column="5">if <condition pos:line="157" pos:column="8">(<expr><name pos:line="157" pos:column="9">res<pos:position pos:line="157" pos:column="12"/></name> <operator pos:line="157" pos:column="13">==<pos:position pos:line="157" pos:column="15"/></operator> <operator pos:line="157" pos:column="16">-<pos:position pos:line="157" pos:column="17"/></operator><literal type="number" pos:line="157" pos:column="17">1<pos:position pos:line="157" pos:column="18"/></literal></expr>)<pos:position pos:line="157" pos:column="19"/></condition><then pos:line="157" pos:column="19"> <block pos:line="157" pos:column="20">{
      <expr_stmt><expr><call><name pos:line="158" pos:column="7">free<pos:position pos:line="158" pos:column="11"/></name><argument_list pos:line="158" pos:column="11">(<argument><expr><name pos:line="158" pos:column="12">ret_str<pos:position pos:line="158" pos:column="19"/></name></expr></argument>)<pos:position pos:line="158" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="158" pos:column="21"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="159" pos:column="7">ERROR<pos:position pos:line="159" pos:column="12"/></name><argument_list pos:line="159" pos:column="12">(<argument><expr><literal type="string" pos:line="159" pos:column="13">"write_sensu plugin: Unable to alloc memory"<pos:position pos:line="159" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="159" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="159" pos:column="59"/></expr_stmt>
      <return pos:line="160" pos:column="7">return <expr><name pos:line="160" pos:column="14">NULL<pos:position pos:line="160" pos:column="18"/></name></expr>;<pos:position pos:line="160" pos:column="19"/></return>
    }<pos:position pos:line="161" pos:column="6"/></block></then></if>
  }<pos:position pos:line="162" pos:column="4"/></block></then> <elseif pos:line="162" pos:column="5">else <if pos:line="162" pos:column="10">if <condition pos:line="162" pos:column="13">(<expr><name pos:line="162" pos:column="14">rates<pos:position pos:line="162" pos:column="19"/></name> <operator pos:line="162" pos:column="20">!=<pos:position pos:line="162" pos:column="22"/></operator> <name pos:line="162" pos:column="23">NULL<pos:position pos:line="162" pos:column="27"/></name></expr>)<pos:position pos:line="162" pos:column="28"/></condition><then pos:line="162" pos:column="28"> <block pos:line="162" pos:column="29">{
    <expr_stmt><expr><name pos:line="163" pos:column="5">res<pos:position pos:line="163" pos:column="8"/></name> <operator pos:line="163" pos:column="9">=<pos:position pos:line="163" pos:column="10"/></operator> <call><name pos:line="163" pos:column="11">my_asprintf<pos:position pos:line="163" pos:column="22"/></name><argument_list pos:line="163" pos:column="22">(<argument><expr><operator pos:line="163" pos:column="23">&amp;<pos:position pos:line="163" pos:column="28"/></operator><name pos:line="163" pos:column="24">value_str<pos:position pos:line="163" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="163" pos:column="35">GAUGE_FORMAT<pos:position pos:line="163" pos:column="47"/></name></expr></argument>, <argument><expr><name><name pos:line="163" pos:column="49">rates<pos:position pos:line="163" pos:column="54"/></name><index pos:line="163" pos:column="54">[<expr><name pos:line="163" pos:column="55">index<pos:position pos:line="163" pos:column="60"/></name></expr>]<pos:position pos:line="163" pos:column="61"/></index></name></expr></argument>)<pos:position pos:line="163" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="163" pos:column="63"/></expr_stmt>
    <if pos:line="164" pos:column="5">if <condition pos:line="164" pos:column="8">(<expr><name pos:line="164" pos:column="9">res<pos:position pos:line="164" pos:column="12"/></name> <operator pos:line="164" pos:column="13">==<pos:position pos:line="164" pos:column="15"/></operator> <operator pos:line="164" pos:column="16">-<pos:position pos:line="164" pos:column="17"/></operator><literal type="number" pos:line="164" pos:column="17">1<pos:position pos:line="164" pos:column="18"/></literal></expr>)<pos:position pos:line="164" pos:column="19"/></condition><then pos:line="164" pos:column="19"> <block pos:line="164" pos:column="20">{
      <expr_stmt><expr><call><name pos:line="165" pos:column="7">free<pos:position pos:line="165" pos:column="11"/></name><argument_list pos:line="165" pos:column="11">(<argument><expr><name pos:line="165" pos:column="12">ret_str<pos:position pos:line="165" pos:column="19"/></name></expr></argument>)<pos:position pos:line="165" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="165" pos:column="21"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="166" pos:column="7">ERROR<pos:position pos:line="166" pos:column="12"/></name><argument_list pos:line="166" pos:column="12">(<argument><expr><literal type="string" pos:line="166" pos:column="13">"write_sensu plugin: Unable to alloc memory"<pos:position pos:line="166" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="166" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="166" pos:column="59"/></expr_stmt>
      <return pos:line="167" pos:column="7">return <expr><name pos:line="167" pos:column="14">NULL<pos:position pos:line="167" pos:column="18"/></name></expr>;<pos:position pos:line="167" pos:column="19"/></return>
    }<pos:position pos:line="168" pos:column="6"/></block></then></if>
  }<pos:position pos:line="169" pos:column="4"/></block></then></if></elseif> <else pos:line="169" pos:column="5">else <block pos:line="169" pos:column="10">{
    <if pos:line="170" pos:column="5">if <condition pos:line="170" pos:column="8">(<expr><name><name pos:line="170" pos:column="9">ds<pos:position pos:line="170" pos:column="11"/></name><operator pos:line="170" pos:column="11">-&gt;<pos:position pos:line="170" pos:column="16"/></operator><name pos:line="170" pos:column="13">ds<pos:position pos:line="170" pos:column="15"/></name><index pos:line="170" pos:column="15">[<expr><name pos:line="170" pos:column="16">index<pos:position pos:line="170" pos:column="21"/></name></expr>]<pos:position pos:line="170" pos:column="22"/></index></name><operator pos:line="170" pos:column="22">.<pos:position pos:line="170" pos:column="23"/></operator><name pos:line="170" pos:column="23">type<pos:position pos:line="170" pos:column="27"/></name> <operator pos:line="170" pos:column="28">==<pos:position pos:line="170" pos:column="30"/></operator> <name pos:line="170" pos:column="31">DS_TYPE_DERIVE<pos:position pos:line="170" pos:column="45"/></name></expr>)<pos:position pos:line="170" pos:column="46"/></condition><then pos:line="170" pos:column="46"> <block pos:line="170" pos:column="47">{
      <expr_stmt><expr><name pos:line="171" pos:column="7">res<pos:position pos:line="171" pos:column="10"/></name> <operator pos:line="171" pos:column="11">=<pos:position pos:line="171" pos:column="12"/></operator> <call><name pos:line="171" pos:column="13">my_asprintf<pos:position pos:line="171" pos:column="24"/></name><argument_list pos:line="171" pos:column="24">(<argument><expr><operator pos:line="171" pos:column="25">&amp;<pos:position pos:line="171" pos:column="30"/></operator><name pos:line="171" pos:column="26">value_str<pos:position pos:line="171" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="171" pos:column="37">"%"<pos:position pos:line="171" pos:column="40"/></literal> <name pos:line="171" pos:column="41">PRIi64<pos:position pos:line="171" pos:column="47"/></name></expr></argument>, <argument><expr><name><name pos:line="171" pos:column="49">vl<pos:position pos:line="171" pos:column="51"/></name><operator pos:line="171" pos:column="51">-&gt;<pos:position pos:line="171" pos:column="56"/></operator><name pos:line="171" pos:column="53">values<pos:position pos:line="171" pos:column="59"/></name><index pos:line="171" pos:column="59">[<expr><name pos:line="171" pos:column="60">index<pos:position pos:line="171" pos:column="65"/></name></expr>]<pos:position pos:line="171" pos:column="66"/></index></name><operator pos:line="171" pos:column="66">.<pos:position pos:line="171" pos:column="67"/></operator><name pos:line="171" pos:column="67">derive<pos:position pos:line="171" pos:column="73"/></name></expr></argument>)<pos:position pos:line="171" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="171" pos:column="75"/></expr_stmt>
      <if pos:line="172" pos:column="7">if <condition pos:line="172" pos:column="10">(<expr><name pos:line="172" pos:column="11">res<pos:position pos:line="172" pos:column="14"/></name> <operator pos:line="172" pos:column="15">==<pos:position pos:line="172" pos:column="17"/></operator> <operator pos:line="172" pos:column="18">-<pos:position pos:line="172" pos:column="19"/></operator><literal type="number" pos:line="172" pos:column="19">1<pos:position pos:line="172" pos:column="20"/></literal></expr>)<pos:position pos:line="172" pos:column="21"/></condition><then pos:line="172" pos:column="21"> <block pos:line="172" pos:column="22">{
        <expr_stmt><expr><call><name pos:line="173" pos:column="9">free<pos:position pos:line="173" pos:column="13"/></name><argument_list pos:line="173" pos:column="13">(<argument><expr><name pos:line="173" pos:column="14">ret_str<pos:position pos:line="173" pos:column="21"/></name></expr></argument>)<pos:position pos:line="173" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="173" pos:column="23"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="174" pos:column="9">ERROR<pos:position pos:line="174" pos:column="14"/></name><argument_list pos:line="174" pos:column="14">(<argument><expr><literal type="string" pos:line="174" pos:column="15">"write_sensu plugin: Unable to alloc memory"<pos:position pos:line="174" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="174" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="174" pos:column="61"/></expr_stmt>
        <return pos:line="175" pos:column="9">return <expr><name pos:line="175" pos:column="16">NULL<pos:position pos:line="175" pos:column="20"/></name></expr>;<pos:position pos:line="175" pos:column="21"/></return>
      }<pos:position pos:line="176" pos:column="8"/></block></then></if>
    }<pos:position pos:line="177" pos:column="6"/></block></then> <elseif pos:line="177" pos:column="7">else <if pos:line="177" pos:column="12">if <condition pos:line="177" pos:column="15">(<expr><name><name pos:line="177" pos:column="16">ds<pos:position pos:line="177" pos:column="18"/></name><operator pos:line="177" pos:column="18">-&gt;<pos:position pos:line="177" pos:column="23"/></operator><name pos:line="177" pos:column="20">ds<pos:position pos:line="177" pos:column="22"/></name><index pos:line="177" pos:column="22">[<expr><name pos:line="177" pos:column="23">index<pos:position pos:line="177" pos:column="28"/></name></expr>]<pos:position pos:line="177" pos:column="29"/></index></name><operator pos:line="177" pos:column="29">.<pos:position pos:line="177" pos:column="30"/></operator><name pos:line="177" pos:column="30">type<pos:position pos:line="177" pos:column="34"/></name> <operator pos:line="177" pos:column="35">==<pos:position pos:line="177" pos:column="37"/></operator> <name pos:line="177" pos:column="38">DS_TYPE_ABSOLUTE<pos:position pos:line="177" pos:column="54"/></name></expr>)<pos:position pos:line="177" pos:column="55"/></condition><then pos:line="177" pos:column="55"> <block pos:line="177" pos:column="56">{
      <expr_stmt><expr><name pos:line="178" pos:column="7">res<pos:position pos:line="178" pos:column="10"/></name> <operator pos:line="178" pos:column="11">=<pos:position pos:line="178" pos:column="12"/></operator> <call><name pos:line="178" pos:column="13">my_asprintf<pos:position pos:line="178" pos:column="24"/></name><argument_list pos:line="178" pos:column="24">(<argument><expr><operator pos:line="178" pos:column="25">&amp;<pos:position pos:line="178" pos:column="30"/></operator><name pos:line="178" pos:column="26">value_str<pos:position pos:line="178" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="178" pos:column="37">"%"<pos:position pos:line="178" pos:column="40"/></literal> <name pos:line="178" pos:column="41">PRIu64<pos:position pos:line="178" pos:column="47"/></name></expr></argument>, <argument><expr><name><name pos:line="178" pos:column="49">vl<pos:position pos:line="178" pos:column="51"/></name><operator pos:line="178" pos:column="51">-&gt;<pos:position pos:line="178" pos:column="56"/></operator><name pos:line="178" pos:column="53">values<pos:position pos:line="178" pos:column="59"/></name><index pos:line="178" pos:column="59">[<expr><name pos:line="178" pos:column="60">index<pos:position pos:line="178" pos:column="65"/></name></expr>]<pos:position pos:line="178" pos:column="66"/></index></name><operator pos:line="178" pos:column="66">.<pos:position pos:line="178" pos:column="67"/></operator><name pos:line="178" pos:column="67">absolute<pos:position pos:line="178" pos:column="75"/></name></expr></argument>)<pos:position pos:line="178" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="178" pos:column="77"/></expr_stmt>
      <if pos:line="179" pos:column="7">if <condition pos:line="179" pos:column="10">(<expr><name pos:line="179" pos:column="11">res<pos:position pos:line="179" pos:column="14"/></name> <operator pos:line="179" pos:column="15">==<pos:position pos:line="179" pos:column="17"/></operator> <operator pos:line="179" pos:column="18">-<pos:position pos:line="179" pos:column="19"/></operator><literal type="number" pos:line="179" pos:column="19">1<pos:position pos:line="179" pos:column="20"/></literal></expr>)<pos:position pos:line="179" pos:column="21"/></condition><then pos:line="179" pos:column="21"> <block pos:line="179" pos:column="22">{
        <expr_stmt><expr><call><name pos:line="180" pos:column="9">free<pos:position pos:line="180" pos:column="13"/></name><argument_list pos:line="180" pos:column="13">(<argument><expr><name pos:line="180" pos:column="14">ret_str<pos:position pos:line="180" pos:column="21"/></name></expr></argument>)<pos:position pos:line="180" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="180" pos:column="23"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="181" pos:column="9">ERROR<pos:position pos:line="181" pos:column="14"/></name><argument_list pos:line="181" pos:column="14">(<argument><expr><literal type="string" pos:line="181" pos:column="15">"write_sensu plugin: Unable to alloc memory"<pos:position pos:line="181" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="181" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="181" pos:column="61"/></expr_stmt>
        <return pos:line="182" pos:column="9">return <expr><name pos:line="182" pos:column="16">NULL<pos:position pos:line="182" pos:column="20"/></name></expr>;<pos:position pos:line="182" pos:column="21"/></return>
      }<pos:position pos:line="183" pos:column="8"/></block></then></if>
    }<pos:position pos:line="184" pos:column="6"/></block></then></if></elseif> <else pos:line="184" pos:column="7">else <block pos:line="184" pos:column="12">{
      <expr_stmt><expr><name pos:line="185" pos:column="7">res<pos:position pos:line="185" pos:column="10"/></name> <operator pos:line="185" pos:column="11">=<pos:position pos:line="185" pos:column="12"/></operator> <call><name pos:line="185" pos:column="13">my_asprintf<pos:position pos:line="185" pos:column="24"/></name><argument_list pos:line="185" pos:column="24">(<argument><expr><operator pos:line="185" pos:column="25">&amp;<pos:position pos:line="185" pos:column="30"/></operator><name pos:line="185" pos:column="26">value_str<pos:position pos:line="185" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="185" pos:column="37">"%llu"<pos:position pos:line="185" pos:column="43"/></literal></expr></argument>, <argument><expr><name><name pos:line="185" pos:column="45">vl<pos:position pos:line="185" pos:column="47"/></name><operator pos:line="185" pos:column="47">-&gt;<pos:position pos:line="185" pos:column="52"/></operator><name pos:line="185" pos:column="49">values<pos:position pos:line="185" pos:column="55"/></name><index pos:line="185" pos:column="55">[<expr><name pos:line="185" pos:column="56">index<pos:position pos:line="185" pos:column="61"/></name></expr>]<pos:position pos:line="185" pos:column="62"/></index></name><operator pos:line="185" pos:column="62">.<pos:position pos:line="185" pos:column="63"/></operator><name pos:line="185" pos:column="63">counter<pos:position pos:line="185" pos:column="70"/></name></expr></argument>)<pos:position pos:line="185" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="185" pos:column="72"/></expr_stmt>
      <if pos:line="186" pos:column="7">if <condition pos:line="186" pos:column="10">(<expr><name pos:line="186" pos:column="11">res<pos:position pos:line="186" pos:column="14"/></name> <operator pos:line="186" pos:column="15">==<pos:position pos:line="186" pos:column="17"/></operator> <operator pos:line="186" pos:column="18">-<pos:position pos:line="186" pos:column="19"/></operator><literal type="number" pos:line="186" pos:column="19">1<pos:position pos:line="186" pos:column="20"/></literal></expr>)<pos:position pos:line="186" pos:column="21"/></condition><then pos:line="186" pos:column="21"> <block pos:line="186" pos:column="22">{
        <expr_stmt><expr><call><name pos:line="187" pos:column="9">free<pos:position pos:line="187" pos:column="13"/></name><argument_list pos:line="187" pos:column="13">(<argument><expr><name pos:line="187" pos:column="14">ret_str<pos:position pos:line="187" pos:column="21"/></name></expr></argument>)<pos:position pos:line="187" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="187" pos:column="23"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="188" pos:column="9">ERROR<pos:position pos:line="188" pos:column="14"/></name><argument_list pos:line="188" pos:column="14">(<argument><expr><literal type="string" pos:line="188" pos:column="15">"write_sensu plugin: Unable to alloc memory"<pos:position pos:line="188" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="188" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="188" pos:column="61"/></expr_stmt>
        <return pos:line="189" pos:column="9">return <expr><name pos:line="189" pos:column="16">NULL<pos:position pos:line="189" pos:column="20"/></name></expr>;<pos:position pos:line="189" pos:column="21"/></return>
      }<pos:position pos:line="190" pos:column="8"/></block></then></if>
    }<pos:position pos:line="191" pos:column="6"/></block></else></if>
  }<pos:position pos:line="192" pos:column="4"/></block></else></if>

  <comment type="line" pos:line="194" pos:column="3">// Generate the full service name</comment>
  <expr_stmt><expr><call><name pos:line="195" pos:column="3">sensu_format_name2<pos:position pos:line="195" pos:column="21"/></name><argument_list pos:line="195" pos:column="21">(<argument><expr><name pos:line="195" pos:column="22">name_buffer<pos:position pos:line="195" pos:column="33"/></name></expr></argument>, <argument><expr><sizeof pos:line="195" pos:column="35">sizeof<argument_list pos:line="195" pos:column="41">(<argument><expr><name pos:line="195" pos:column="42">name_buffer<pos:position pos:line="195" pos:column="53"/></name></expr></argument>)<pos:position pos:line="195" pos:column="54"/></argument_list></sizeof></expr></argument>, <argument><expr><name><name pos:line="195" pos:column="56">vl<pos:position pos:line="195" pos:column="58"/></name><operator pos:line="195" pos:column="58">-&gt;<pos:position pos:line="195" pos:column="63"/></operator><name pos:line="195" pos:column="60">host<pos:position pos:line="195" pos:column="64"/></name></name></expr></argument>, <argument><expr><name><name pos:line="195" pos:column="66">vl<pos:position pos:line="195" pos:column="68"/></name><operator pos:line="195" pos:column="68">-&gt;<pos:position pos:line="195" pos:column="73"/></operator><name pos:line="195" pos:column="70">plugin<pos:position pos:line="195" pos:column="76"/></name></name></expr></argument>,
                     <argument><expr><name><name pos:line="196" pos:column="22">vl<pos:position pos:line="196" pos:column="24"/></name><operator pos:line="196" pos:column="24">-&gt;<pos:position pos:line="196" pos:column="29"/></operator><name pos:line="196" pos:column="26">plugin_instance<pos:position pos:line="196" pos:column="41"/></name></name></expr></argument>, <argument><expr><name><name pos:line="196" pos:column="43">vl<pos:position pos:line="196" pos:column="45"/></name><operator pos:line="196" pos:column="45">-&gt;<pos:position pos:line="196" pos:column="50"/></operator><name pos:line="196" pos:column="47">type<pos:position pos:line="196" pos:column="51"/></name></name></expr></argument>, <argument><expr><name><name pos:line="196" pos:column="53">vl<pos:position pos:line="196" pos:column="55"/></name><operator pos:line="196" pos:column="55">-&gt;<pos:position pos:line="196" pos:column="60"/></operator><name pos:line="196" pos:column="57">type_instance<pos:position pos:line="196" pos:column="70"/></name></name></expr></argument>,
                     <argument><expr><name><name pos:line="197" pos:column="22">host<pos:position pos:line="197" pos:column="26"/></name><operator pos:line="197" pos:column="26">-&gt;<pos:position pos:line="197" pos:column="31"/></operator><name pos:line="197" pos:column="28">separator<pos:position pos:line="197" pos:column="37"/></name></name></expr></argument>)<pos:position pos:line="197" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="197" pos:column="39"/></expr_stmt>
  <if pos:line="198" pos:column="3">if <condition pos:line="198" pos:column="6">(<expr><name><name pos:line="198" pos:column="7">host<pos:position pos:line="198" pos:column="11"/></name><operator pos:line="198" pos:column="11">-&gt;<pos:position pos:line="198" pos:column="16"/></operator><name pos:line="198" pos:column="13">always_append_ds<pos:position pos:line="198" pos:column="29"/></name></name> <operator pos:line="198" pos:column="30">||<pos:position pos:line="198" pos:column="32"/></operator> <operator pos:line="198" pos:column="33">(<pos:position pos:line="198" pos:column="34"/></operator><name><name pos:line="198" pos:column="34">ds<pos:position pos:line="198" pos:column="36"/></name><operator pos:line="198" pos:column="36">-&gt;<pos:position pos:line="198" pos:column="41"/></operator><name pos:line="198" pos:column="38">ds_num<pos:position pos:line="198" pos:column="44"/></name></name> <operator pos:line="198" pos:column="45">&gt;<pos:position pos:line="198" pos:column="49"/></operator> <literal type="number" pos:line="198" pos:column="47">1<pos:position pos:line="198" pos:column="48"/></literal><operator pos:line="198" pos:column="48">)<pos:position pos:line="198" pos:column="49"/></operator></expr>)<pos:position pos:line="198" pos:column="50"/></condition><then pos:line="198" pos:column="50"> <block pos:line="198" pos:column="51">{
    <if pos:line="199" pos:column="5">if <condition pos:line="199" pos:column="8">(<expr><name><name pos:line="199" pos:column="9">host<pos:position pos:line="199" pos:column="13"/></name><operator pos:line="199" pos:column="13">-&gt;<pos:position pos:line="199" pos:column="18"/></operator><name pos:line="199" pos:column="15">event_service_prefix<pos:position pos:line="199" pos:column="35"/></name></name> <operator pos:line="199" pos:column="36">==<pos:position pos:line="199" pos:column="38"/></operator> <name pos:line="199" pos:column="39">NULL<pos:position pos:line="199" pos:column="43"/></name></expr>)<pos:position pos:line="199" pos:column="44"/></condition><then pos:line="199" pos:column="44">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="200" pos:column="7">ssnprintf<pos:position pos:line="200" pos:column="16"/></name><argument_list pos:line="200" pos:column="16">(<argument><expr><name pos:line="200" pos:column="17">service_buffer<pos:position pos:line="200" pos:column="31"/></name></expr></argument>, <argument><expr><sizeof pos:line="200" pos:column="33">sizeof<argument_list pos:line="200" pos:column="39">(<argument><expr><name pos:line="200" pos:column="40">service_buffer<pos:position pos:line="200" pos:column="54"/></name></expr></argument>)<pos:position pos:line="200" pos:column="55"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="200" pos:column="57">"%s.%s"<pos:position pos:line="200" pos:column="64"/></literal></expr></argument>, <argument><expr><name pos:line="200" pos:column="66">name_buffer<pos:position pos:line="200" pos:column="77"/></name></expr></argument>,
                <argument><expr><name><name pos:line="201" pos:column="17">ds<pos:position pos:line="201" pos:column="19"/></name><operator pos:line="201" pos:column="19">-&gt;<pos:position pos:line="201" pos:column="24"/></operator><name pos:line="201" pos:column="21">ds<pos:position pos:line="201" pos:column="23"/></name><index pos:line="201" pos:column="23">[<expr><name pos:line="201" pos:column="24">index<pos:position pos:line="201" pos:column="29"/></name></expr>]<pos:position pos:line="201" pos:column="30"/></index></name><operator pos:line="201" pos:column="30">.<pos:position pos:line="201" pos:column="31"/></operator><name pos:line="201" pos:column="31">name<pos:position pos:line="201" pos:column="35"/></name></expr></argument>)<pos:position pos:line="201" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="201" pos:column="37"/></expr_stmt></block></then>
    <else pos:line="202" pos:column="5">else
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="203" pos:column="7">ssnprintf<pos:position pos:line="203" pos:column="16"/></name><argument_list pos:line="203" pos:column="16">(<argument><expr><name pos:line="203" pos:column="17">service_buffer<pos:position pos:line="203" pos:column="31"/></name></expr></argument>, <argument><expr><sizeof pos:line="203" pos:column="33">sizeof<argument_list pos:line="203" pos:column="39">(<argument><expr><name pos:line="203" pos:column="40">service_buffer<pos:position pos:line="203" pos:column="54"/></name></expr></argument>)<pos:position pos:line="203" pos:column="55"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="203" pos:column="57">"%s%s.%s"<pos:position pos:line="203" pos:column="66"/></literal></expr></argument>,
                <argument><expr><name><name pos:line="204" pos:column="17">host<pos:position pos:line="204" pos:column="21"/></name><operator pos:line="204" pos:column="21">-&gt;<pos:position pos:line="204" pos:column="26"/></operator><name pos:line="204" pos:column="23">event_service_prefix<pos:position pos:line="204" pos:column="43"/></name></name></expr></argument>, <argument><expr><name pos:line="204" pos:column="45">name_buffer<pos:position pos:line="204" pos:column="56"/></name></expr></argument>, <argument><expr><name><name pos:line="204" pos:column="58">ds<pos:position pos:line="204" pos:column="60"/></name><operator pos:line="204" pos:column="60">-&gt;<pos:position pos:line="204" pos:column="65"/></operator><name pos:line="204" pos:column="62">ds<pos:position pos:line="204" pos:column="64"/></name><index pos:line="204" pos:column="64">[<expr><name pos:line="204" pos:column="65">index<pos:position pos:line="204" pos:column="70"/></name></expr>]<pos:position pos:line="204" pos:column="71"/></index></name><operator pos:line="204" pos:column="71">.<pos:position pos:line="204" pos:column="72"/></operator><name pos:line="204" pos:column="72">name<pos:position pos:line="204" pos:column="76"/></name></expr></argument>)<pos:position pos:line="204" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="204" pos:column="78"/></expr_stmt></block></else></if>
  }<pos:position pos:line="205" pos:column="4"/></block></then> <else pos:line="205" pos:column="5">else <block pos:line="205" pos:column="10">{
    <if pos:line="206" pos:column="5">if <condition pos:line="206" pos:column="8">(<expr><name><name pos:line="206" pos:column="9">host<pos:position pos:line="206" pos:column="13"/></name><operator pos:line="206" pos:column="13">-&gt;<pos:position pos:line="206" pos:column="18"/></operator><name pos:line="206" pos:column="15">event_service_prefix<pos:position pos:line="206" pos:column="35"/></name></name> <operator pos:line="206" pos:column="36">==<pos:position pos:line="206" pos:column="38"/></operator> <name pos:line="206" pos:column="39">NULL<pos:position pos:line="206" pos:column="43"/></name></expr>)<pos:position pos:line="206" pos:column="44"/></condition><then pos:line="206" pos:column="44">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="207" pos:column="7">sstrncpy<pos:position pos:line="207" pos:column="15"/></name><argument_list pos:line="207" pos:column="15">(<argument><expr><name pos:line="207" pos:column="16">service_buffer<pos:position pos:line="207" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="207" pos:column="32">name_buffer<pos:position pos:line="207" pos:column="43"/></name></expr></argument>, <argument><expr><sizeof pos:line="207" pos:column="45">sizeof<argument_list pos:line="207" pos:column="51">(<argument><expr><name pos:line="207" pos:column="52">service_buffer<pos:position pos:line="207" pos:column="66"/></name></expr></argument>)<pos:position pos:line="207" pos:column="67"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="207" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="207" pos:column="69"/></expr_stmt></block></then>
    <else pos:line="208" pos:column="5">else
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="209" pos:column="7">ssnprintf<pos:position pos:line="209" pos:column="16"/></name><argument_list pos:line="209" pos:column="16">(<argument><expr><name pos:line="209" pos:column="17">service_buffer<pos:position pos:line="209" pos:column="31"/></name></expr></argument>, <argument><expr><sizeof pos:line="209" pos:column="33">sizeof<argument_list pos:line="209" pos:column="39">(<argument><expr><name pos:line="209" pos:column="40">service_buffer<pos:position pos:line="209" pos:column="54"/></name></expr></argument>)<pos:position pos:line="209" pos:column="55"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="209" pos:column="57">"%s%s"<pos:position pos:line="209" pos:column="63"/></literal></expr></argument>,
                <argument><expr><name><name pos:line="210" pos:column="17">host<pos:position pos:line="210" pos:column="21"/></name><operator pos:line="210" pos:column="21">-&gt;<pos:position pos:line="210" pos:column="26"/></operator><name pos:line="210" pos:column="23">event_service_prefix<pos:position pos:line="210" pos:column="43"/></name></name></expr></argument>, <argument><expr><name pos:line="210" pos:column="45">name_buffer<pos:position pos:line="210" pos:column="56"/></name></expr></argument>)<pos:position pos:line="210" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="210" pos:column="58"/></expr_stmt></block></else></if>
  }<pos:position pos:line="211" pos:column="4"/></block></else></if>

  <comment type="line" pos:line="213" pos:column="3">// Replace collectd sensor name reserved characters so that time series DB is</comment>
  <comment type="line" pos:line="214" pos:column="3">// happy</comment>
  <expr_stmt><expr><call><name pos:line="215" pos:column="3">in_place_replace_sensu_name_reserved<pos:position pos:line="215" pos:column="39"/></name><argument_list pos:line="215" pos:column="39">(<argument><expr><name pos:line="215" pos:column="40">service_buffer<pos:position pos:line="215" pos:column="54"/></name></expr></argument>)<pos:position pos:line="215" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="215" pos:column="56"/></expr_stmt>

  <comment type="line" pos:line="217" pos:column="3">// finalize the buffer by setting the output and closing curly bracket</comment>
  <expr_stmt><expr><name pos:line="218" pos:column="3">res<pos:position pos:line="218" pos:column="6"/></name> <operator pos:line="218" pos:column="7">=<pos:position pos:line="218" pos:column="8"/></operator> <call><name pos:line="218" pos:column="9">my_asprintf<pos:position pos:line="218" pos:column="20"/></name><argument_list pos:line="218" pos:column="20">(<argument><expr><operator pos:line="218" pos:column="21">&amp;<pos:position pos:line="218" pos:column="26"/></operator><name pos:line="218" pos:column="22">temp_str<pos:position pos:line="218" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="218" pos:column="32">"%s, \"output\": \"%s %s %lld\"}\n"<pos:position pos:line="218" pos:column="67"/></literal></expr></argument>, <argument><expr><name pos:line="218" pos:column="69">ret_str<pos:position pos:line="218" pos:column="76"/></name></expr></argument>,
                    <argument><expr><name pos:line="219" pos:column="21">service_buffer<pos:position pos:line="219" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="219" pos:column="37">value_str<pos:position pos:line="219" pos:column="46"/></name></expr></argument>,
                    <argument><expr><operator pos:line="220" pos:column="21">(<pos:position pos:line="220" pos:column="22"/></operator><name pos:line="220" pos:column="22">long<pos:position pos:line="220" pos:column="26"/></name> <name pos:line="220" pos:column="27">long<pos:position pos:line="220" pos:column="31"/></name><operator pos:line="220" pos:column="31">)<pos:position pos:line="220" pos:column="32"/></operator><call><name pos:line="220" pos:column="32">CDTIME_T_TO_TIME_T<pos:position pos:line="220" pos:column="50"/></name><argument_list pos:line="220" pos:column="50">(<argument><expr><name><name pos:line="220" pos:column="51">vl<pos:position pos:line="220" pos:column="53"/></name><operator pos:line="220" pos:column="53">-&gt;<pos:position pos:line="220" pos:column="58"/></operator><name pos:line="220" pos:column="55">time<pos:position pos:line="220" pos:column="59"/></name></name></expr></argument>)<pos:position pos:line="220" pos:column="60"/></argument_list></call></expr></argument>)<pos:position pos:line="220" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="220" pos:column="62"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="221" pos:column="3">free<pos:position pos:line="221" pos:column="7"/></name><argument_list pos:line="221" pos:column="7">(<argument><expr><name pos:line="221" pos:column="8">ret_str<pos:position pos:line="221" pos:column="15"/></name></expr></argument>)<pos:position pos:line="221" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="221" pos:column="17"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="222" pos:column="3">free<pos:position pos:line="222" pos:column="7"/></name><argument_list pos:line="222" pos:column="7">(<argument><expr><name pos:line="222" pos:column="8">value_str<pos:position pos:line="222" pos:column="17"/></name></expr></argument>)<pos:position pos:line="222" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="222" pos:column="19"/></expr_stmt>
  <if pos:line="223" pos:column="3">if <condition pos:line="223" pos:column="6">(<expr><name pos:line="223" pos:column="7">res<pos:position pos:line="223" pos:column="10"/></name> <operator pos:line="223" pos:column="11">==<pos:position pos:line="223" pos:column="13"/></operator> <operator pos:line="223" pos:column="14">-<pos:position pos:line="223" pos:column="15"/></operator><literal type="number" pos:line="223" pos:column="15">1<pos:position pos:line="223" pos:column="16"/></literal></expr>)<pos:position pos:line="223" pos:column="17"/></condition><then pos:line="223" pos:column="17"> <block pos:line="223" pos:column="18">{
    <expr_stmt><expr><call><name pos:line="224" pos:column="5">ERROR<pos:position pos:line="224" pos:column="10"/></name><argument_list pos:line="224" pos:column="10">(<argument><expr><literal type="string" pos:line="224" pos:column="11">"write_sensu plugin: Unable to alloc memory"<pos:position pos:line="224" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="224" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="224" pos:column="57"/></expr_stmt>
    <return pos:line="225" pos:column="5">return <expr><name pos:line="225" pos:column="12">NULL<pos:position pos:line="225" pos:column="16"/></name></expr>;<pos:position pos:line="225" pos:column="17"/></return>
  }<pos:position pos:line="226" pos:column="4"/></block></then></if>
  <expr_stmt><expr><name pos:line="227" pos:column="3">ret_str<pos:position pos:line="227" pos:column="10"/></name> <operator pos:line="227" pos:column="11">=<pos:position pos:line="227" pos:column="12"/></operator> <name pos:line="227" pos:column="13">temp_str<pos:position pos:line="227" pos:column="21"/></name></expr>;<pos:position pos:line="227" pos:column="22"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="229" pos:column="3">DEBUG<pos:position pos:line="229" pos:column="8"/></name><argument_list pos:line="229" pos:column="8">(<argument><expr><literal type="string" pos:line="229" pos:column="9">"write_sensu plugin: Successfully created json for metric: "<pos:position pos:line="229" pos:column="69"/></literal>
        <literal type="string" pos:line="230" pos:column="9">"host = \"%s\", service = \"%s\""<pos:position pos:line="230" pos:column="42"/></literal></expr></argument>,
        <argument><expr><name><name pos:line="231" pos:column="9">vl<pos:position pos:line="231" pos:column="11"/></name><operator pos:line="231" pos:column="11">-&gt;<pos:position pos:line="231" pos:column="16"/></operator><name pos:line="231" pos:column="13">host<pos:position pos:line="231" pos:column="17"/></name></name></expr></argument>, <argument><expr><name pos:line="231" pos:column="19">service_buffer<pos:position pos:line="231" pos:column="33"/></name></expr></argument>)<pos:position pos:line="231" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="231" pos:column="35"/></expr_stmt>
  <return pos:line="232" pos:column="3">return <expr><name pos:line="232" pos:column="10">ret_str<pos:position pos:line="232" pos:column="17"/></name></expr>;<pos:position pos:line="232" pos:column="18"/></return>
}<pos:position pos:line="233" pos:column="2"/></block></function></unit>
