<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_416_collectd-5.0.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">c_psql_exec_query<pos:position pos:line="1" pos:column="29"/></name> <parameter_list pos:line="1" pos:column="30">(<parameter><decl><type><name pos:line="1" pos:column="31">c_psql_database_t<pos:position pos:line="1" pos:column="48"/></name> <modifier pos:line="1" pos:column="49">*<pos:position pos:line="1" pos:column="50"/></modifier></type><name pos:line="1" pos:column="50">db<pos:position pos:line="1" pos:column="52"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="54">udb_query_t<pos:position pos:line="1" pos:column="65"/></name> <modifier pos:line="1" pos:column="66">*<pos:position pos:line="1" pos:column="67"/></modifier></type><name pos:line="1" pos:column="67">q<pos:position pos:line="1" pos:column="68"/></name></decl></parameter>,
		<parameter><decl><type><name pos:line="2" pos:column="17">udb_query_preparation_area_t<pos:position pos:line="2" pos:column="45"/></name> <modifier pos:line="2" pos:column="46">*<pos:position pos:line="2" pos:column="47"/></modifier></type><name pos:line="2" pos:column="47">prep_area<pos:position pos:line="2" pos:column="56"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="57"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">PGresult<pos:position pos:line="4" pos:column="17"/></name> <modifier pos:line="4" pos:column="18">*<pos:position pos:line="4" pos:column="19"/></modifier></type><name pos:line="4" pos:column="19">res<pos:position pos:line="4" pos:column="22"/></name></decl>;<pos:position pos:line="4" pos:column="23"/></decl_stmt>

	<decl_stmt><decl><type><name pos:line="6" pos:column="9">c_psql_user_data_t<pos:position pos:line="6" pos:column="27"/></name> <modifier pos:line="6" pos:column="28">*<pos:position pos:line="6" pos:column="29"/></modifier></type><name pos:line="6" pos:column="29">data<pos:position pos:line="6" pos:column="33"/></name></decl>;<pos:position pos:line="6" pos:column="34"/></decl_stmt>

	<decl_stmt><decl><type><specifier pos:line="8" pos:column="9">const<pos:position pos:line="8" pos:column="14"/></specifier> <name pos:line="8" pos:column="15">char<pos:position pos:line="8" pos:column="19"/></name> <modifier pos:line="8" pos:column="20">*<pos:position pos:line="8" pos:column="21"/></modifier></type><name pos:line="8" pos:column="21">host<pos:position pos:line="8" pos:column="25"/></name></decl>;<pos:position pos:line="8" pos:column="26"/></decl_stmt>

	<decl_stmt><decl><type><name pos:line="10" pos:column="9">char<pos:position pos:line="10" pos:column="13"/></name> <modifier pos:line="10" pos:column="14">*<pos:position pos:line="10" pos:column="15"/></modifier><modifier pos:line="10" pos:column="15">*<pos:position pos:line="10" pos:column="16"/></modifier></type><name pos:line="10" pos:column="16">column_names<pos:position pos:line="10" pos:column="28"/></name></decl>;<pos:position pos:line="10" pos:column="29"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="11" pos:column="9">char<pos:position pos:line="11" pos:column="13"/></name> <modifier pos:line="11" pos:column="14">*<pos:position pos:line="11" pos:column="15"/></modifier><modifier pos:line="11" pos:column="15">*<pos:position pos:line="11" pos:column="16"/></modifier></type><name pos:line="11" pos:column="16">column_values<pos:position pos:line="11" pos:column="29"/></name></decl>;<pos:position pos:line="11" pos:column="30"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="12" pos:column="9">int<pos:position pos:line="12" pos:column="12"/></name></type>    <name pos:line="12" pos:column="16">column_num<pos:position pos:line="12" pos:column="26"/></name></decl>;<pos:position pos:line="12" pos:column="27"/></decl_stmt>

	<decl_stmt><decl><type><name pos:line="14" pos:column="9">int<pos:position pos:line="14" pos:column="12"/></name></type> <name pos:line="14" pos:column="13">rows_num<pos:position pos:line="14" pos:column="21"/></name></decl>;<pos:position pos:line="14" pos:column="22"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="15" pos:column="9">int<pos:position pos:line="15" pos:column="12"/></name></type> <name pos:line="15" pos:column="13">status<pos:position pos:line="15" pos:column="19"/></name></decl>;<pos:position pos:line="15" pos:column="20"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="16" pos:column="9">int<pos:position pos:line="16" pos:column="12"/></name></type> <name pos:line="16" pos:column="13">row<pos:position pos:line="16" pos:column="16"/></name></decl>, <decl><type ref="prev"/><name pos:line="16" pos:column="18">col<pos:position pos:line="16" pos:column="21"/></name></decl>;<pos:position pos:line="16" pos:column="22"/></decl_stmt>

	<comment type="block" pos:line="18" pos:column="9">/* The user data may hold parameter information, but may be NULL. */</comment>
	<expr_stmt><expr><name pos:line="19" pos:column="9">data<pos:position pos:line="19" pos:column="13"/></name> <operator pos:line="19" pos:column="14">=<pos:position pos:line="19" pos:column="15"/></operator> <call><name pos:line="19" pos:column="16">udb_query_get_user_data<pos:position pos:line="19" pos:column="39"/></name> <argument_list pos:line="19" pos:column="40">(<argument><expr><name pos:line="19" pos:column="41">q<pos:position pos:line="19" pos:column="42"/></name></expr></argument>)<pos:position pos:line="19" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="44"/></expr_stmt>

	<comment type="block" pos:line="21" pos:column="9">/* Versions up to `3' don't know how to handle parameters. */</comment>
	<if pos:line="22" pos:column="9">if <condition pos:line="22" pos:column="12">(<expr><literal type="number" pos:line="22" pos:column="13">3<pos:position pos:line="22" pos:column="14"/></literal> <operator pos:line="22" pos:column="15">&lt;=<pos:position pos:line="22" pos:column="20"/></operator> <name><name pos:line="22" pos:column="18">db<pos:position pos:line="22" pos:column="20"/></name><operator pos:line="22" pos:column="20">-&gt;<pos:position pos:line="22" pos:column="25"/></operator><name pos:line="22" pos:column="22">proto_version<pos:position pos:line="22" pos:column="35"/></name></name></expr>)<pos:position pos:line="22" pos:column="36"/></condition><then pos:line="22" pos:column="36">
		<block type="pseudo"><expr_stmt><expr><name pos:line="23" pos:column="17">res<pos:position pos:line="23" pos:column="20"/></name> <operator pos:line="23" pos:column="21">=<pos:position pos:line="23" pos:column="22"/></operator> <call><name pos:line="23" pos:column="23">c_psql_exec_query_params<pos:position pos:line="23" pos:column="47"/></name> <argument_list pos:line="23" pos:column="48">(<argument><expr><name pos:line="23" pos:column="49">db<pos:position pos:line="23" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="53">q<pos:position pos:line="23" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="56">data<pos:position pos:line="23" pos:column="60"/></name></expr></argument>)<pos:position pos:line="23" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="62"/></expr_stmt></block></then>
	<elseif pos:line="24" pos:column="9">else <if pos:line="24" pos:column="14">if <condition pos:line="24" pos:column="17">(<expr><operator pos:line="24" pos:column="18">(<pos:position pos:line="24" pos:column="19"/></operator><name pos:line="24" pos:column="19">NULL<pos:position pos:line="24" pos:column="23"/></name> <operator pos:line="24" pos:column="24">==<pos:position pos:line="24" pos:column="26"/></operator> <name pos:line="24" pos:column="27">data<pos:position pos:line="24" pos:column="31"/></name><operator pos:line="24" pos:column="31">)<pos:position pos:line="24" pos:column="32"/></operator> <operator pos:line="24" pos:column="33">||<pos:position pos:line="24" pos:column="35"/></operator> <operator pos:line="24" pos:column="36">(<pos:position pos:line="24" pos:column="37"/></operator><literal type="number" pos:line="24" pos:column="37">0<pos:position pos:line="24" pos:column="38"/></literal> <operator pos:line="24" pos:column="39">==<pos:position pos:line="24" pos:column="41"/></operator> <name><name pos:line="24" pos:column="42">data<pos:position pos:line="24" pos:column="46"/></name><operator pos:line="24" pos:column="46">-&gt;<pos:position pos:line="24" pos:column="51"/></operator><name pos:line="24" pos:column="48">params_num<pos:position pos:line="24" pos:column="58"/></name></name><operator pos:line="24" pos:column="58">)<pos:position pos:line="24" pos:column="59"/></operator></expr>)<pos:position pos:line="24" pos:column="60"/></condition><then pos:line="24" pos:column="60">
		<block type="pseudo"><expr_stmt><expr><name pos:line="25" pos:column="17">res<pos:position pos:line="25" pos:column="20"/></name> <operator pos:line="25" pos:column="21">=<pos:position pos:line="25" pos:column="22"/></operator> <call><name pos:line="25" pos:column="23">c_psql_exec_query_noparams<pos:position pos:line="25" pos:column="49"/></name> <argument_list pos:line="25" pos:column="50">(<argument><expr><name pos:line="25" pos:column="51">db<pos:position pos:line="25" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="55">q<pos:position pos:line="25" pos:column="56"/></name></expr></argument>)<pos:position pos:line="25" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="58"/></expr_stmt></block></then></if></elseif>
	<else pos:line="26" pos:column="9">else <block pos:line="26" pos:column="14">{
		<expr_stmt><expr><call><name pos:line="27" pos:column="17">log_err<pos:position pos:line="27" pos:column="24"/></name> <argument_list pos:line="27" pos:column="25">(<argument><expr><literal type="string" pos:line="27" pos:column="26">"Connection to database \"%s\" does not support parameters "<pos:position pos:line="27" pos:column="86"/></literal>
				<literal type="string" pos:line="28" pos:column="33">"(protocol version %d) - cannot execute query \"%s\"."<pos:position pos:line="28" pos:column="87"/></literal></expr></argument>,
				<argument><expr><name><name pos:line="29" pos:column="33">db<pos:position pos:line="29" pos:column="35"/></name><operator pos:line="29" pos:column="35">-&gt;<pos:position pos:line="29" pos:column="40"/></operator><name pos:line="29" pos:column="37">database<pos:position pos:line="29" pos:column="45"/></name></name></expr></argument>, <argument><expr><name><name pos:line="29" pos:column="47">db<pos:position pos:line="29" pos:column="49"/></name><operator pos:line="29" pos:column="49">-&gt;<pos:position pos:line="29" pos:column="54"/></operator><name pos:line="29" pos:column="51">proto_version<pos:position pos:line="29" pos:column="64"/></name></name></expr></argument>,
				<argument><expr><call><name pos:line="30" pos:column="33">udb_query_get_name<pos:position pos:line="30" pos:column="51"/></name> <argument_list pos:line="30" pos:column="52">(<argument><expr><name pos:line="30" pos:column="53">q<pos:position pos:line="30" pos:column="54"/></name></expr></argument>)<pos:position pos:line="30" pos:column="55"/></argument_list></call></expr></argument>)<pos:position pos:line="30" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="57"/></expr_stmt>
		<return pos:line="31" pos:column="17">return <expr><operator pos:line="31" pos:column="24">-<pos:position pos:line="31" pos:column="25"/></operator><literal type="number" pos:line="31" pos:column="25">1<pos:position pos:line="31" pos:column="26"/></literal></expr>;<pos:position pos:line="31" pos:column="27"/></return>
	}<pos:position pos:line="32" pos:column="10"/></block></else></if>

	<expr_stmt><expr><name pos:line="34" pos:column="9">column_names<pos:position pos:line="34" pos:column="21"/></name> <operator pos:line="34" pos:column="22">=<pos:position pos:line="34" pos:column="23"/></operator> <name pos:line="34" pos:column="24">NULL<pos:position pos:line="34" pos:column="28"/></name></expr>;<pos:position pos:line="34" pos:column="29"/></expr_stmt>
	<expr_stmt><expr><name pos:line="35" pos:column="9">column_values<pos:position pos:line="35" pos:column="22"/></name> <operator pos:line="35" pos:column="23">=<pos:position pos:line="35" pos:column="24"/></operator> <name pos:line="35" pos:column="25">NULL<pos:position pos:line="35" pos:column="29"/></name></expr>;<pos:position pos:line="35" pos:column="30"/></expr_stmt>

<cpp:define pos:line="37" pos:column="1">#<cpp:directive pos:line="37" pos:column="2">define<pos:position pos:line="37" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="37" pos:column="9">BAIL_OUT<pos:position pos:line="37" pos:column="17"/></name><parameter_list pos:line="37" pos:column="17">(<parameter><type><name pos:line="37" pos:column="18">status<pos:position pos:line="37" pos:column="24"/></name></type></parameter>)<pos:position pos:line="37" pos:column="25"/></parameter_list></cpp:macro> \
	<cpp:value pos:line="38" pos:column="9">sfree (column_names); \
	sfree (column_values); \
	PQclear (res); \
	return status<pos:position pos:line="41" pos:column="22"/></cpp:value></cpp:define>

	<if pos:line="43" pos:column="9">if <condition pos:line="43" pos:column="12">(<expr><name pos:line="43" pos:column="13">PGRES_TUPLES_OK<pos:position pos:line="43" pos:column="28"/></name> <operator pos:line="43" pos:column="29">!=<pos:position pos:line="43" pos:column="31"/></operator> <call><name pos:line="43" pos:column="32">PQresultStatus<pos:position pos:line="43" pos:column="46"/></name> <argument_list pos:line="43" pos:column="47">(<argument><expr><name pos:line="43" pos:column="48">res<pos:position pos:line="43" pos:column="51"/></name></expr></argument>)<pos:position pos:line="43" pos:column="52"/></argument_list></call></expr>)<pos:position pos:line="43" pos:column="53"/></condition><then pos:line="43" pos:column="53"> <block pos:line="43" pos:column="54">{
		<expr_stmt><expr><call><name pos:line="44" pos:column="17">log_err<pos:position pos:line="44" pos:column="24"/></name> <argument_list pos:line="44" pos:column="25">(<argument><expr><literal type="string" pos:line="44" pos:column="26">"Failed to execute SQL query: %s"<pos:position pos:line="44" pos:column="59"/></literal></expr></argument>,
				<argument><expr><call><name pos:line="45" pos:column="33">PQerrorMessage<pos:position pos:line="45" pos:column="47"/></name> <argument_list pos:line="45" pos:column="48">(<argument><expr><name><name pos:line="45" pos:column="49">db<pos:position pos:line="45" pos:column="51"/></name><operator pos:line="45" pos:column="51">-&gt;<pos:position pos:line="45" pos:column="56"/></operator><name pos:line="45" pos:column="53">conn<pos:position pos:line="45" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="45" pos:column="58"/></argument_list></call></expr></argument>)<pos:position pos:line="45" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="60"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="46" pos:column="17">log_info<pos:position pos:line="46" pos:column="25"/></name> <argument_list pos:line="46" pos:column="26">(<argument><expr><literal type="string" pos:line="46" pos:column="27">"SQL query was: %s"<pos:position pos:line="46" pos:column="46"/></literal></expr></argument>,
				<argument><expr><call><name pos:line="47" pos:column="33">udb_query_get_statement<pos:position pos:line="47" pos:column="56"/></name> <argument_list pos:line="47" pos:column="57">(<argument><expr><name pos:line="47" pos:column="58">q<pos:position pos:line="47" pos:column="59"/></name></expr></argument>)<pos:position pos:line="47" pos:column="60"/></argument_list></call></expr></argument>)<pos:position pos:line="47" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="62"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="48" pos:column="17">BAIL_OUT<pos:position pos:line="48" pos:column="25"/></name> <argument_list pos:line="48" pos:column="26">(<argument><expr><operator pos:line="48" pos:column="27">-<pos:position pos:line="48" pos:column="28"/></operator><literal type="number" pos:line="48" pos:column="28">1<pos:position pos:line="48" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="48" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="31"/></expr_stmt>
	}<pos:position pos:line="49" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="51" pos:column="9">rows_num<pos:position pos:line="51" pos:column="17"/></name> <operator pos:line="51" pos:column="18">=<pos:position pos:line="51" pos:column="19"/></operator> <call><name pos:line="51" pos:column="20">PQntuples<pos:position pos:line="51" pos:column="29"/></name> <argument_list pos:line="51" pos:column="30">(<argument><expr><name pos:line="51" pos:column="31">res<pos:position pos:line="51" pos:column="34"/></name></expr></argument>)<pos:position pos:line="51" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="36"/></expr_stmt>
	<if pos:line="52" pos:column="9">if <condition pos:line="52" pos:column="12">(<expr><literal type="number" pos:line="52" pos:column="13">1<pos:position pos:line="52" pos:column="14"/></literal> <operator pos:line="52" pos:column="15">&gt;<pos:position pos:line="52" pos:column="19"/></operator> <name pos:line="52" pos:column="17">rows_num<pos:position pos:line="52" pos:column="25"/></name></expr>)<pos:position pos:line="52" pos:column="26"/></condition><then pos:line="52" pos:column="26"> <block pos:line="52" pos:column="27">{
		<expr_stmt><expr><call><name pos:line="53" pos:column="17">BAIL_OUT<pos:position pos:line="53" pos:column="25"/></name> <argument_list pos:line="53" pos:column="26">(<argument><expr><literal type="number" pos:line="53" pos:column="27">0<pos:position pos:line="53" pos:column="28"/></literal></expr></argument>)<pos:position pos:line="53" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="30"/></expr_stmt>
	}<pos:position pos:line="54" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="56" pos:column="9">column_num<pos:position pos:line="56" pos:column="19"/></name> <operator pos:line="56" pos:column="20">=<pos:position pos:line="56" pos:column="21"/></operator> <call><name pos:line="56" pos:column="22">PQnfields<pos:position pos:line="56" pos:column="31"/></name> <argument_list pos:line="56" pos:column="32">(<argument><expr><name pos:line="56" pos:column="33">res<pos:position pos:line="56" pos:column="36"/></name></expr></argument>)<pos:position pos:line="56" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="38"/></expr_stmt>
	<expr_stmt><expr><name pos:line="57" pos:column="9">column_names<pos:position pos:line="57" pos:column="21"/></name> <operator pos:line="57" pos:column="22">=<pos:position pos:line="57" pos:column="23"/></operator> <operator pos:line="57" pos:column="24">(<pos:position pos:line="57" pos:column="25"/></operator><name pos:line="57" pos:column="25">char<pos:position pos:line="57" pos:column="29"/></name> <operator pos:line="57" pos:column="30">*<pos:position pos:line="57" pos:column="31"/></operator><operator pos:line="57" pos:column="31">*<pos:position pos:line="57" pos:column="32"/></operator><operator pos:line="57" pos:column="32">)<pos:position pos:line="57" pos:column="33"/></operator> <call><name pos:line="57" pos:column="34">calloc<pos:position pos:line="57" pos:column="40"/></name> <argument_list pos:line="57" pos:column="41">(<argument><expr><name pos:line="57" pos:column="42">column_num<pos:position pos:line="57" pos:column="52"/></name></expr></argument>, <argument><expr><sizeof pos:line="57" pos:column="54">sizeof <argument_list pos:line="57" pos:column="61">(<argument><expr><name pos:line="57" pos:column="62">char<pos:position pos:line="57" pos:column="66"/></name> <operator pos:line="57" pos:column="67">*<pos:position pos:line="57" pos:column="68"/></operator></expr></argument>)<pos:position pos:line="57" pos:column="69"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="57" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="71"/></expr_stmt>
	<if pos:line="58" pos:column="9">if <condition pos:line="58" pos:column="12">(<expr><name pos:line="58" pos:column="13">NULL<pos:position pos:line="58" pos:column="17"/></name> <operator pos:line="58" pos:column="18">==<pos:position pos:line="58" pos:column="20"/></operator> <name pos:line="58" pos:column="21">column_names<pos:position pos:line="58" pos:column="33"/></name></expr>)<pos:position pos:line="58" pos:column="34"/></condition><then pos:line="58" pos:column="34"> <block pos:line="58" pos:column="35">{
		<expr_stmt><expr><call><name pos:line="59" pos:column="17">log_err<pos:position pos:line="59" pos:column="24"/></name> <argument_list pos:line="59" pos:column="25">(<argument><expr><literal type="string" pos:line="59" pos:column="26">"calloc failed."<pos:position pos:line="59" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="59" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="44"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="60" pos:column="17">BAIL_OUT<pos:position pos:line="60" pos:column="25"/></name> <argument_list pos:line="60" pos:column="26">(<argument><expr><operator pos:line="60" pos:column="27">-<pos:position pos:line="60" pos:column="28"/></operator><literal type="number" pos:line="60" pos:column="28">1<pos:position pos:line="60" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="60" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="31"/></expr_stmt>
	}<pos:position pos:line="61" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="63" pos:column="9">column_values<pos:position pos:line="63" pos:column="22"/></name> <operator pos:line="63" pos:column="23">=<pos:position pos:line="63" pos:column="24"/></operator> <operator pos:line="63" pos:column="25">(<pos:position pos:line="63" pos:column="26"/></operator><name pos:line="63" pos:column="26">char<pos:position pos:line="63" pos:column="30"/></name> <operator pos:line="63" pos:column="31">*<pos:position pos:line="63" pos:column="32"/></operator><operator pos:line="63" pos:column="32">*<pos:position pos:line="63" pos:column="33"/></operator><operator pos:line="63" pos:column="33">)<pos:position pos:line="63" pos:column="34"/></operator> <call><name pos:line="63" pos:column="35">calloc<pos:position pos:line="63" pos:column="41"/></name> <argument_list pos:line="63" pos:column="42">(<argument><expr><name pos:line="63" pos:column="43">column_num<pos:position pos:line="63" pos:column="53"/></name></expr></argument>, <argument><expr><sizeof pos:line="63" pos:column="55">sizeof <argument_list pos:line="63" pos:column="62">(<argument><expr><name pos:line="63" pos:column="63">char<pos:position pos:line="63" pos:column="67"/></name> <operator pos:line="63" pos:column="68">*<pos:position pos:line="63" pos:column="69"/></operator></expr></argument>)<pos:position pos:line="63" pos:column="70"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="63" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="72"/></expr_stmt>
	<if pos:line="64" pos:column="9">if <condition pos:line="64" pos:column="12">(<expr><name pos:line="64" pos:column="13">NULL<pos:position pos:line="64" pos:column="17"/></name> <operator pos:line="64" pos:column="18">==<pos:position pos:line="64" pos:column="20"/></operator> <name pos:line="64" pos:column="21">column_values<pos:position pos:line="64" pos:column="34"/></name></expr>)<pos:position pos:line="64" pos:column="35"/></condition><then pos:line="64" pos:column="35"> <block pos:line="64" pos:column="36">{
		<expr_stmt><expr><call><name pos:line="65" pos:column="17">log_err<pos:position pos:line="65" pos:column="24"/></name> <argument_list pos:line="65" pos:column="25">(<argument><expr><literal type="string" pos:line="65" pos:column="26">"calloc failed."<pos:position pos:line="65" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="65" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="44"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="66" pos:column="17">BAIL_OUT<pos:position pos:line="66" pos:column="25"/></name> <argument_list pos:line="66" pos:column="26">(<argument><expr><operator pos:line="66" pos:column="27">-<pos:position pos:line="66" pos:column="28"/></operator><literal type="number" pos:line="66" pos:column="28">1<pos:position pos:line="66" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="66" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="31"/></expr_stmt>
	}<pos:position pos:line="67" pos:column="10"/></block></then></if>
	
	<for pos:line="69" pos:column="9">for <control pos:line="69" pos:column="13">(<init><expr><name pos:line="69" pos:column="14">col<pos:position pos:line="69" pos:column="17"/></name> <operator pos:line="69" pos:column="18">=<pos:position pos:line="69" pos:column="19"/></operator> <literal type="number" pos:line="69" pos:column="20">0<pos:position pos:line="69" pos:column="21"/></literal></expr>;<pos:position pos:line="69" pos:column="22"/></init> <condition><expr><name pos:line="69" pos:column="23">col<pos:position pos:line="69" pos:column="26"/></name> <operator pos:line="69" pos:column="27">&lt;<pos:position pos:line="69" pos:column="31"/></operator> <name pos:line="69" pos:column="29">column_num<pos:position pos:line="69" pos:column="39"/></name></expr>;<pos:position pos:line="69" pos:column="40"/></condition> <incr><expr><operator pos:line="69" pos:column="41">++<pos:position pos:line="69" pos:column="43"/></operator><name pos:line="69" pos:column="43">col<pos:position pos:line="69" pos:column="46"/></name></expr></incr>)<pos:position pos:line="69" pos:column="47"/></control> <block pos:line="69" pos:column="48">{
		<comment type="block" pos:line="70" pos:column="17">/* Pointers returned by `PQfname' are freed by `PQclear' via
		 * `BAIL_OUT'. */</comment>
		<expr_stmt><expr><name><name pos:line="72" pos:column="17">column_names<pos:position pos:line="72" pos:column="29"/></name><index pos:line="72" pos:column="29">[<expr><name pos:line="72" pos:column="30">col<pos:position pos:line="72" pos:column="33"/></name></expr>]<pos:position pos:line="72" pos:column="34"/></index></name> <operator pos:line="72" pos:column="35">=<pos:position pos:line="72" pos:column="36"/></operator> <call><name pos:line="72" pos:column="37">PQfname<pos:position pos:line="72" pos:column="44"/></name> <argument_list pos:line="72" pos:column="45">(<argument><expr><name pos:line="72" pos:column="46">res<pos:position pos:line="72" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="72" pos:column="51">col<pos:position pos:line="72" pos:column="54"/></name></expr></argument>)<pos:position pos:line="72" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="56"/></expr_stmt>
		<if pos:line="73" pos:column="17">if <condition pos:line="73" pos:column="20">(<expr><name pos:line="73" pos:column="21">NULL<pos:position pos:line="73" pos:column="25"/></name> <operator pos:line="73" pos:column="26">==<pos:position pos:line="73" pos:column="28"/></operator> <name><name pos:line="73" pos:column="29">column_names<pos:position pos:line="73" pos:column="41"/></name><index pos:line="73" pos:column="41">[<expr><name pos:line="73" pos:column="42">col<pos:position pos:line="73" pos:column="45"/></name></expr>]<pos:position pos:line="73" pos:column="46"/></index></name></expr>)<pos:position pos:line="73" pos:column="47"/></condition><then pos:line="73" pos:column="47"> <block pos:line="73" pos:column="48">{
			<expr_stmt><expr><call><name pos:line="74" pos:column="25">log_err<pos:position pos:line="74" pos:column="32"/></name> <argument_list pos:line="74" pos:column="33">(<argument><expr><literal type="string" pos:line="74" pos:column="34">"Failed to resolve name of column %i."<pos:position pos:line="74" pos:column="72"/></literal></expr></argument>, <argument><expr><name pos:line="74" pos:column="74">col<pos:position pos:line="74" pos:column="77"/></name></expr></argument>)<pos:position pos:line="74" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="79"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="75" pos:column="25">BAIL_OUT<pos:position pos:line="75" pos:column="33"/></name> <argument_list pos:line="75" pos:column="34">(<argument><expr><operator pos:line="75" pos:column="35">-<pos:position pos:line="75" pos:column="36"/></operator><literal type="number" pos:line="75" pos:column="36">1<pos:position pos:line="75" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="75" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="39"/></expr_stmt>
		}<pos:position pos:line="76" pos:column="18"/></block></then></if>
	}<pos:position pos:line="77" pos:column="10"/></block></for>

	<if pos:line="79" pos:column="9">if <condition pos:line="79" pos:column="12">(<expr><call><name pos:line="79" pos:column="13">C_PSQL_IS_UNIX_DOMAIN_SOCKET<pos:position pos:line="79" pos:column="41"/></name> <argument_list pos:line="79" pos:column="42">(<argument><expr><name><name pos:line="79" pos:column="43">db<pos:position pos:line="79" pos:column="45"/></name><operator pos:line="79" pos:column="45">-&gt;<pos:position pos:line="79" pos:column="50"/></operator><name pos:line="79" pos:column="47">host<pos:position pos:line="79" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="79" pos:column="52"/></argument_list></call>
			<operator pos:line="80" pos:column="25">||<pos:position pos:line="80" pos:column="27"/></operator> <operator pos:line="80" pos:column="28">(<pos:position pos:line="80" pos:column="29"/></operator><literal type="number" pos:line="80" pos:column="29">0<pos:position pos:line="80" pos:column="30"/></literal> <operator pos:line="80" pos:column="31">==<pos:position pos:line="80" pos:column="33"/></operator> <call><name pos:line="80" pos:column="34">strcmp<pos:position pos:line="80" pos:column="40"/></name> <argument_list pos:line="80" pos:column="41">(<argument><expr><name><name pos:line="80" pos:column="42">db<pos:position pos:line="80" pos:column="44"/></name><operator pos:line="80" pos:column="44">-&gt;<pos:position pos:line="80" pos:column="49"/></operator><name pos:line="80" pos:column="46">host<pos:position pos:line="80" pos:column="50"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="80" pos:column="52">"localhost"<pos:position pos:line="80" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="80" pos:column="64"/></argument_list></call><operator pos:line="80" pos:column="64">)<pos:position pos:line="80" pos:column="65"/></operator></expr>)<pos:position pos:line="80" pos:column="66"/></condition><then pos:line="80" pos:column="66">
		<block type="pseudo"><expr_stmt><expr><name pos:line="81" pos:column="17">host<pos:position pos:line="81" pos:column="21"/></name> <operator pos:line="81" pos:column="22">=<pos:position pos:line="81" pos:column="23"/></operator> <name pos:line="81" pos:column="24">hostname_g<pos:position pos:line="81" pos:column="34"/></name></expr>;<pos:position pos:line="81" pos:column="35"/></expr_stmt></block></then>
	<else pos:line="82" pos:column="9">else
		<block type="pseudo"><expr_stmt><expr><name pos:line="83" pos:column="17">host<pos:position pos:line="83" pos:column="21"/></name> <operator pos:line="83" pos:column="22">=<pos:position pos:line="83" pos:column="23"/></operator> <name><name pos:line="83" pos:column="24">db<pos:position pos:line="83" pos:column="26"/></name><operator pos:line="83" pos:column="26">-&gt;<pos:position pos:line="83" pos:column="31"/></operator><name pos:line="83" pos:column="28">host<pos:position pos:line="83" pos:column="32"/></name></name></expr>;<pos:position pos:line="83" pos:column="33"/></expr_stmt></block></else></if>

	<expr_stmt><expr><name pos:line="85" pos:column="9">status<pos:position pos:line="85" pos:column="15"/></name> <operator pos:line="85" pos:column="16">=<pos:position pos:line="85" pos:column="17"/></operator> <call><name pos:line="85" pos:column="18">udb_query_prepare_result<pos:position pos:line="85" pos:column="42"/></name> <argument_list pos:line="85" pos:column="43">(<argument><expr><name pos:line="85" pos:column="44">q<pos:position pos:line="85" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="85" pos:column="47">prep_area<pos:position pos:line="85" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="85" pos:column="58">host<pos:position pos:line="85" pos:column="62"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="85" pos:column="64">"postgresql"<pos:position pos:line="85" pos:column="76"/></literal></expr></argument>,
			<argument><expr><name><name pos:line="86" pos:column="25">db<pos:position pos:line="86" pos:column="27"/></name><operator pos:line="86" pos:column="27">-&gt;<pos:position pos:line="86" pos:column="32"/></operator><name pos:line="86" pos:column="29">database<pos:position pos:line="86" pos:column="37"/></name></name></expr></argument>, <argument><expr><name pos:line="86" pos:column="39">column_names<pos:position pos:line="86" pos:column="51"/></name></expr></argument>, <argument><expr><operator pos:line="86" pos:column="53">(<pos:position pos:line="86" pos:column="54"/></operator><name pos:line="86" pos:column="54">size_t<pos:position pos:line="86" pos:column="60"/></name><operator pos:line="86" pos:column="60">)<pos:position pos:line="86" pos:column="61"/></operator> <name pos:line="86" pos:column="62">column_num<pos:position pos:line="86" pos:column="72"/></name></expr></argument>, <argument><expr><name><name pos:line="86" pos:column="74">db<pos:position pos:line="86" pos:column="76"/></name><operator pos:line="86" pos:column="76">-&gt;<pos:position pos:line="86" pos:column="81"/></operator><name pos:line="86" pos:column="78">interval<pos:position pos:line="86" pos:column="86"/></name></name></expr></argument>)<pos:position pos:line="86" pos:column="87"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="88"/></expr_stmt>
	<if pos:line="87" pos:column="9">if <condition pos:line="87" pos:column="12">(<expr><literal type="number" pos:line="87" pos:column="13">0<pos:position pos:line="87" pos:column="14"/></literal> <operator pos:line="87" pos:column="15">!=<pos:position pos:line="87" pos:column="17"/></operator> <name pos:line="87" pos:column="18">status<pos:position pos:line="87" pos:column="24"/></name></expr>)<pos:position pos:line="87" pos:column="25"/></condition><then pos:line="87" pos:column="25"> <block pos:line="87" pos:column="26">{
		<expr_stmt><expr><call><name pos:line="88" pos:column="17">log_err<pos:position pos:line="88" pos:column="24"/></name> <argument_list pos:line="88" pos:column="25">(<argument><expr><literal type="string" pos:line="88" pos:column="26">"udb_query_prepare_result failed with status %i."<pos:position pos:line="88" pos:column="75"/></literal></expr></argument>,
				<argument><expr><name pos:line="89" pos:column="33">status<pos:position pos:line="89" pos:column="39"/></name></expr></argument>)<pos:position pos:line="89" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="41"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="90" pos:column="17">BAIL_OUT<pos:position pos:line="90" pos:column="25"/></name> <argument_list pos:line="90" pos:column="26">(<argument><expr><operator pos:line="90" pos:column="27">-<pos:position pos:line="90" pos:column="28"/></operator><literal type="number" pos:line="90" pos:column="28">1<pos:position pos:line="90" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="90" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="90" pos:column="31"/></expr_stmt>
	}<pos:position pos:line="91" pos:column="10"/></block></then></if>

	<for pos:line="93" pos:column="9">for <control pos:line="93" pos:column="13">(<init><expr><name pos:line="93" pos:column="14">row<pos:position pos:line="93" pos:column="17"/></name> <operator pos:line="93" pos:column="18">=<pos:position pos:line="93" pos:column="19"/></operator> <literal type="number" pos:line="93" pos:column="20">0<pos:position pos:line="93" pos:column="21"/></literal></expr>;<pos:position pos:line="93" pos:column="22"/></init> <condition><expr><name pos:line="93" pos:column="23">row<pos:position pos:line="93" pos:column="26"/></name> <operator pos:line="93" pos:column="27">&lt;<pos:position pos:line="93" pos:column="31"/></operator> <name pos:line="93" pos:column="29">rows_num<pos:position pos:line="93" pos:column="37"/></name></expr>;<pos:position pos:line="93" pos:column="38"/></condition> <incr><expr><operator pos:line="93" pos:column="39">++<pos:position pos:line="93" pos:column="41"/></operator><name pos:line="93" pos:column="41">row<pos:position pos:line="93" pos:column="44"/></name></expr></incr>)<pos:position pos:line="93" pos:column="45"/></control> <block pos:line="93" pos:column="46">{
		<for pos:line="94" pos:column="17">for <control pos:line="94" pos:column="21">(<init><expr><name pos:line="94" pos:column="22">col<pos:position pos:line="94" pos:column="25"/></name> <operator pos:line="94" pos:column="26">=<pos:position pos:line="94" pos:column="27"/></operator> <literal type="number" pos:line="94" pos:column="28">0<pos:position pos:line="94" pos:column="29"/></literal></expr>;<pos:position pos:line="94" pos:column="30"/></init> <condition><expr><name pos:line="94" pos:column="31">col<pos:position pos:line="94" pos:column="34"/></name> <operator pos:line="94" pos:column="35">&lt;<pos:position pos:line="94" pos:column="39"/></operator> <name pos:line="94" pos:column="37">column_num<pos:position pos:line="94" pos:column="47"/></name></expr>;<pos:position pos:line="94" pos:column="48"/></condition> <incr><expr><operator pos:line="94" pos:column="49">++<pos:position pos:line="94" pos:column="51"/></operator><name pos:line="94" pos:column="51">col<pos:position pos:line="94" pos:column="54"/></name></expr></incr>)<pos:position pos:line="94" pos:column="55"/></control> <block pos:line="94" pos:column="56">{
			<comment type="block" pos:line="95" pos:column="25">/* Pointers returned by `PQgetvalue' are freed by `PQclear' via
			 * `BAIL_OUT'. */</comment>
			<expr_stmt><expr><name><name pos:line="97" pos:column="25">column_values<pos:position pos:line="97" pos:column="38"/></name><index pos:line="97" pos:column="38">[<expr><name pos:line="97" pos:column="39">col<pos:position pos:line="97" pos:column="42"/></name></expr>]<pos:position pos:line="97" pos:column="43"/></index></name> <operator pos:line="97" pos:column="44">=<pos:position pos:line="97" pos:column="45"/></operator> <call><name pos:line="97" pos:column="46">PQgetvalue<pos:position pos:line="97" pos:column="56"/></name> <argument_list pos:line="97" pos:column="57">(<argument><expr><name pos:line="97" pos:column="58">res<pos:position pos:line="97" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="97" pos:column="63">row<pos:position pos:line="97" pos:column="66"/></name></expr></argument>, <argument><expr><name pos:line="97" pos:column="68">col<pos:position pos:line="97" pos:column="71"/></name></expr></argument>)<pos:position pos:line="97" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="73"/></expr_stmt>
			<if pos:line="98" pos:column="25">if <condition pos:line="98" pos:column="28">(<expr><name pos:line="98" pos:column="29">NULL<pos:position pos:line="98" pos:column="33"/></name> <operator pos:line="98" pos:column="34">==<pos:position pos:line="98" pos:column="36"/></operator> <name><name pos:line="98" pos:column="37">column_values<pos:position pos:line="98" pos:column="50"/></name><index pos:line="98" pos:column="50">[<expr><name pos:line="98" pos:column="51">col<pos:position pos:line="98" pos:column="54"/></name></expr>]<pos:position pos:line="98" pos:column="55"/></index></name></expr>)<pos:position pos:line="98" pos:column="56"/></condition><then pos:line="98" pos:column="56"> <block pos:line="98" pos:column="57">{
				<expr_stmt><expr><call><name pos:line="99" pos:column="33">log_err<pos:position pos:line="99" pos:column="40"/></name> <argument_list pos:line="99" pos:column="41">(<argument><expr><literal type="string" pos:line="99" pos:column="42">"Failed to get value at (row = %i, col = %i)."<pos:position pos:line="99" pos:column="88"/></literal></expr></argument>,
						<argument><expr><name pos:line="100" pos:column="49">row<pos:position pos:line="100" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="100" pos:column="54">col<pos:position pos:line="100" pos:column="57"/></name></expr></argument>)<pos:position pos:line="100" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="100" pos:column="59"/></expr_stmt>
				<break pos:line="101" pos:column="33">break;<pos:position pos:line="101" pos:column="39"/></break>
			}<pos:position pos:line="102" pos:column="26"/></block></then></if>
		}<pos:position pos:line="103" pos:column="18"/></block></for>

		<comment type="block" pos:line="105" pos:column="17">/* check for an error */</comment>
		<if pos:line="106" pos:column="17">if <condition pos:line="106" pos:column="20">(<expr><name pos:line="106" pos:column="21">col<pos:position pos:line="106" pos:column="24"/></name> <operator pos:line="106" pos:column="25">&lt;<pos:position pos:line="106" pos:column="29"/></operator> <name pos:line="106" pos:column="27">column_num<pos:position pos:line="106" pos:column="37"/></name></expr>)<pos:position pos:line="106" pos:column="38"/></condition><then pos:line="106" pos:column="38">
			<block type="pseudo"><continue pos:line="107" pos:column="25">continue;<pos:position pos:line="107" pos:column="34"/></continue></block></then></if>

		<expr_stmt><expr><name pos:line="109" pos:column="17">status<pos:position pos:line="109" pos:column="23"/></name> <operator pos:line="109" pos:column="24">=<pos:position pos:line="109" pos:column="25"/></operator> <call><name pos:line="109" pos:column="26">udb_query_handle_result<pos:position pos:line="109" pos:column="49"/></name> <argument_list pos:line="109" pos:column="50">(<argument><expr><name pos:line="109" pos:column="51">q<pos:position pos:line="109" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="109" pos:column="54">prep_area<pos:position pos:line="109" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="109" pos:column="65">column_values<pos:position pos:line="109" pos:column="78"/></name></expr></argument>)<pos:position pos:line="109" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="109" pos:column="80"/></expr_stmt>
		<if pos:line="110" pos:column="17">if <condition pos:line="110" pos:column="20">(<expr><name pos:line="110" pos:column="21">status<pos:position pos:line="110" pos:column="27"/></name> <operator pos:line="110" pos:column="28">!=<pos:position pos:line="110" pos:column="30"/></operator> <literal type="number" pos:line="110" pos:column="31">0<pos:position pos:line="110" pos:column="32"/></literal></expr>)<pos:position pos:line="110" pos:column="33"/></condition><then pos:line="110" pos:column="33"> <block pos:line="110" pos:column="34">{
			<expr_stmt><expr><call><name pos:line="111" pos:column="25">log_err<pos:position pos:line="111" pos:column="32"/></name> <argument_list pos:line="111" pos:column="33">(<argument><expr><literal type="string" pos:line="111" pos:column="34">"udb_query_handle_result failed with status %i."<pos:position pos:line="111" pos:column="82"/></literal></expr></argument>,
					<argument><expr><name pos:line="112" pos:column="41">status<pos:position pos:line="112" pos:column="47"/></name></expr></argument>)<pos:position pos:line="112" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="112" pos:column="49"/></expr_stmt>
		}<pos:position pos:line="113" pos:column="18"/></block></then></if>
	}<pos:position pos:line="114" pos:column="10"/></block></for> <comment type="block" pos:line="114" pos:column="11">/* for (row = 0; row &lt; rows_num; ++row) */</comment>

	<expr_stmt><expr><call><name pos:line="116" pos:column="9">udb_query_finish_result<pos:position pos:line="116" pos:column="32"/></name> <argument_list pos:line="116" pos:column="33">(<argument><expr><name pos:line="116" pos:column="34">q<pos:position pos:line="116" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="116" pos:column="37">prep_area<pos:position pos:line="116" pos:column="46"/></name></expr></argument>)<pos:position pos:line="116" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="116" pos:column="48"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="118" pos:column="9">BAIL_OUT<pos:position pos:line="118" pos:column="17"/></name> <argument_list pos:line="118" pos:column="18">(<argument><expr><literal type="number" pos:line="118" pos:column="19">0<pos:position pos:line="118" pos:column="20"/></literal></expr></argument>)<pos:position pos:line="118" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="118" pos:column="22"/></expr_stmt>
<cpp:undef pos:line="119" pos:column="1">#<cpp:directive pos:line="119" pos:column="2">undef<pos:position pos:line="119" pos:column="7"/></cpp:directive> <name pos:line="119" pos:column="8">BAIL_OUT<pos:position pos:line="119" pos:column="16"/></name></cpp:undef>
}<pos:position pos:line="120" pos:column="2"/></block></function></unit>
