<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1828_collectd-4.10.7.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">iptcc_chain_index_build<pos:position pos:line="1" pos:column="35"/></name><parameter_list pos:line="1" pos:column="35">(<parameter><decl><type><name pos:line="1" pos:column="36">TC_HANDLE_T<pos:position pos:line="1" pos:column="47"/></name></type> <name pos:line="1" pos:column="48">h<pos:position pos:line="1" pos:column="49"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="50"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">unsigned<pos:position pos:line="3" pos:column="17"/></name> <name pos:line="3" pos:column="18">int<pos:position pos:line="3" pos:column="21"/></name></type> <name pos:line="3" pos:column="22">list_length<pos:position pos:line="3" pos:column="33"/></name> <init pos:line="3" pos:column="34">= <expr><name pos:line="3" pos:column="36">CHAIN_INDEX_BUCKET_LEN<pos:position pos:line="3" pos:column="58"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="59"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">unsigned<pos:position pos:line="4" pos:column="17"/></name> <name pos:line="4" pos:column="18">int<pos:position pos:line="4" pos:column="21"/></name></type> <name pos:line="4" pos:column="22">chains<pos:position pos:line="4" pos:column="28"/></name> <init pos:line="4" pos:column="29">= <expr><literal type="number" pos:line="4" pos:column="31">0<pos:position pos:line="4" pos:column="32"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="33"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">unsigned<pos:position pos:line="5" pos:column="17"/></name> <name pos:line="5" pos:column="18">int<pos:position pos:line="5" pos:column="21"/></name></type> <name pos:line="5" pos:column="22">cindex<pos:position pos:line="5" pos:column="28"/></name> <init pos:line="5" pos:column="29">= <expr><literal type="number" pos:line="5" pos:column="31">0<pos:position pos:line="5" pos:column="32"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="33"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="6" pos:column="9">struct<pos:position pos:line="6" pos:column="15"/></name> <name pos:line="6" pos:column="16">chain_head<pos:position pos:line="6" pos:column="26"/></name></name> <modifier pos:line="6" pos:column="27">*<pos:position pos:line="6" pos:column="28"/></modifier></type><name pos:line="6" pos:column="28">c<pos:position pos:line="6" pos:column="29"/></name></decl>;<pos:position pos:line="6" pos:column="30"/></decl_stmt>

	<comment type="block" pos:line="8" pos:column="9">/* Build up the chain index array here */</comment>
	<expr_stmt><expr><call><name pos:line="9" pos:column="9">debug<pos:position pos:line="9" pos:column="14"/></name><argument_list pos:line="9" pos:column="14">(<argument><expr><literal type="string" pos:line="9" pos:column="15">"Building chain index\n"<pos:position pos:line="9" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="41"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="11" pos:column="9">debug<pos:position pos:line="11" pos:column="14"/></name><argument_list pos:line="11" pos:column="14">(<argument><expr><literal type="string" pos:line="11" pos:column="15">"Number of user defined chains:%d bucket_sz:%d array_sz:%d\n"<pos:position pos:line="11" pos:column="76"/></literal></expr></argument>,
		<argument><expr><name><name pos:line="12" pos:column="17">h<pos:position pos:line="12" pos:column="18"/></name><operator pos:line="12" pos:column="18">-&gt;<pos:position pos:line="12" pos:column="23"/></operator><name pos:line="12" pos:column="20">num_chains<pos:position pos:line="12" pos:column="30"/></name></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="32">list_length<pos:position pos:line="12" pos:column="43"/></name></expr></argument>, <argument><expr><name><name pos:line="12" pos:column="45">h<pos:position pos:line="12" pos:column="46"/></name><operator pos:line="12" pos:column="46">-&gt;<pos:position pos:line="12" pos:column="51"/></operator><name pos:line="12" pos:column="48">chain_index_sz<pos:position pos:line="12" pos:column="62"/></name></name></expr></argument>)<pos:position pos:line="12" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="64"/></expr_stmt>

	<if pos:line="14" pos:column="9">if <condition pos:line="14" pos:column="12">(<expr><name><name pos:line="14" pos:column="13">h<pos:position pos:line="14" pos:column="14"/></name><operator pos:line="14" pos:column="14">-&gt;<pos:position pos:line="14" pos:column="19"/></operator><name pos:line="14" pos:column="16">chain_index_sz<pos:position pos:line="14" pos:column="30"/></name></name> <operator pos:line="14" pos:column="31">==<pos:position pos:line="14" pos:column="33"/></operator> <literal type="number" pos:line="14" pos:column="34">0<pos:position pos:line="14" pos:column="35"/></literal></expr>)<pos:position pos:line="14" pos:column="36"/></condition><then pos:line="14" pos:column="36">
		<block type="pseudo"><return pos:line="15" pos:column="17">return <expr><literal type="number" pos:line="15" pos:column="24">0<pos:position pos:line="15" pos:column="25"/></literal></expr>;<pos:position pos:line="15" pos:column="26"/></return></block></then></if>

	<macro><name pos:line="17" pos:column="9">list_for_each_entry<pos:position pos:line="17" pos:column="28"/></name><argument_list pos:line="17" pos:column="28">(<argument pos:line="17" pos:column="29">c<pos:position pos:line="17" pos:column="30"/></argument>, <argument pos:line="17" pos:column="32">&amp;h-&gt;chains<pos:position pos:line="17" pos:column="42"/></argument>, <argument pos:line="17" pos:column="44">list<pos:position pos:line="17" pos:column="48"/></argument>)<pos:position pos:line="17" pos:column="49"/></argument_list></macro> <block pos:line="17" pos:column="50">{

		<comment type="block" pos:line="19" pos:column="17">/* Issue: The index array needs to start after the
		 * builtin chains, as they are not sorted */</comment>
		<if pos:line="21" pos:column="17">if <condition pos:line="21" pos:column="20">(<expr><operator pos:line="21" pos:column="21">!<pos:position pos:line="21" pos:column="22"/></operator><call><name pos:line="21" pos:column="22">iptcc_is_builtin<pos:position pos:line="21" pos:column="38"/></name><argument_list pos:line="21" pos:column="38">(<argument><expr><name pos:line="21" pos:column="39">c<pos:position pos:line="21" pos:column="40"/></name></expr></argument>)<pos:position pos:line="21" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="21" pos:column="42"/></condition><then pos:line="21" pos:column="42"> <block pos:line="21" pos:column="43">{
			<expr_stmt><expr><name pos:line="22" pos:column="25">cindex<pos:position pos:line="22" pos:column="31"/></name><operator pos:line="22" pos:column="31">=<pos:position pos:line="22" pos:column="32"/></operator><name pos:line="22" pos:column="32">chains<pos:position pos:line="22" pos:column="38"/></name> <operator pos:line="22" pos:column="39">/<pos:position pos:line="22" pos:column="40"/></operator> <name pos:line="22" pos:column="41">list_length<pos:position pos:line="22" pos:column="52"/></name></expr>;<pos:position pos:line="22" pos:column="53"/></expr_stmt>

			<comment type="block" pos:line="24" pos:column="25">/* Safe guard, break out on array limit, this
			 * is useful if chains are added and array is
			 * rebuild, without realloc of memory. */</comment>
			<if pos:line="27" pos:column="25">if <condition pos:line="27" pos:column="28">(<expr><name pos:line="27" pos:column="29">cindex<pos:position pos:line="27" pos:column="35"/></name> <operator pos:line="27" pos:column="36">&gt;=<pos:position pos:line="27" pos:column="41"/></operator> <name><name pos:line="27" pos:column="39">h<pos:position pos:line="27" pos:column="40"/></name><operator pos:line="27" pos:column="40">-&gt;<pos:position pos:line="27" pos:column="45"/></operator><name pos:line="27" pos:column="42">chain_index_sz<pos:position pos:line="27" pos:column="56"/></name></name></expr>)<pos:position pos:line="27" pos:column="57"/></condition><then pos:line="27" pos:column="57">
				<block type="pseudo"><break pos:line="28" pos:column="33">break;<pos:position pos:line="28" pos:column="39"/></break></block></then></if>

			<if pos:line="30" pos:column="25">if <condition pos:line="30" pos:column="28">(<expr><operator pos:line="30" pos:column="29">(<pos:position pos:line="30" pos:column="30"/></operator><name pos:line="30" pos:column="30">chains<pos:position pos:line="30" pos:column="36"/></name> <operator pos:line="30" pos:column="37">%<pos:position pos:line="30" pos:column="38"/></operator> <name pos:line="30" pos:column="39">list_length<pos:position pos:line="30" pos:column="50"/></name><operator pos:line="30" pos:column="50">)<pos:position pos:line="30" pos:column="51"/></operator><operator pos:line="30" pos:column="51">==<pos:position pos:line="30" pos:column="53"/></operator> <literal type="number" pos:line="30" pos:column="54">0<pos:position pos:line="30" pos:column="55"/></literal></expr>)<pos:position pos:line="30" pos:column="56"/></condition><then pos:line="30" pos:column="56"> <block pos:line="30" pos:column="57">{
				<expr_stmt><expr><call><name pos:line="31" pos:column="33">debug<pos:position pos:line="31" pos:column="38"/></name><argument_list pos:line="31" pos:column="38">(<argument><expr><literal type="string" pos:line="31" pos:column="39">"\nIndex[%d] Chains:"<pos:position pos:line="31" pos:column="60"/></literal></expr></argument>, <argument><expr><name pos:line="31" pos:column="62">cindex<pos:position pos:line="31" pos:column="68"/></name></expr></argument>)<pos:position pos:line="31" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="70"/></expr_stmt>
				<expr_stmt><expr><name><name pos:line="32" pos:column="33">h<pos:position pos:line="32" pos:column="34"/></name><operator pos:line="32" pos:column="34">-&gt;<pos:position pos:line="32" pos:column="39"/></operator><name pos:line="32" pos:column="36">chain_index<pos:position pos:line="32" pos:column="47"/></name><index pos:line="32" pos:column="47">[<expr><name pos:line="32" pos:column="48">cindex<pos:position pos:line="32" pos:column="54"/></name></expr>]<pos:position pos:line="32" pos:column="55"/></index></name> <operator pos:line="32" pos:column="56">=<pos:position pos:line="32" pos:column="57"/></operator> <name pos:line="32" pos:column="58">c<pos:position pos:line="32" pos:column="59"/></name></expr>;<pos:position pos:line="32" pos:column="60"/></expr_stmt>
			}<pos:position pos:line="33" pos:column="26"/></block></then></if>
			<expr_stmt><expr><name pos:line="34" pos:column="25">chains<pos:position pos:line="34" pos:column="31"/></name><operator pos:line="34" pos:column="31">++<pos:position pos:line="34" pos:column="33"/></operator></expr>;<pos:position pos:line="34" pos:column="34"/></expr_stmt>
		}<pos:position pos:line="35" pos:column="18"/></block></then></if>
		<expr_stmt><expr><call><name pos:line="36" pos:column="17">debug<pos:position pos:line="36" pos:column="22"/></name><argument_list pos:line="36" pos:column="22">(<argument><expr><literal type="string" pos:line="36" pos:column="23">"%s, "<pos:position pos:line="36" pos:column="29"/></literal></expr></argument>, <argument><expr><name><name pos:line="36" pos:column="31">c<pos:position pos:line="36" pos:column="32"/></name><operator pos:line="36" pos:column="32">-&gt;<pos:position pos:line="36" pos:column="37"/></operator><name pos:line="36" pos:column="34">name<pos:position pos:line="36" pos:column="38"/></name></name></expr></argument>)<pos:position pos:line="36" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="40"/></expr_stmt>
	}<pos:position pos:line="37" pos:column="10"/></block>
	<expr_stmt><expr><call><name pos:line="38" pos:column="9">debug<pos:position pos:line="38" pos:column="14"/></name><argument_list pos:line="38" pos:column="14">(<argument><expr><literal type="string" pos:line="38" pos:column="15">"\n"<pos:position pos:line="38" pos:column="19"/></literal></expr></argument>)<pos:position pos:line="38" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="21"/></expr_stmt>

	<return pos:line="40" pos:column="9">return <expr><literal type="number" pos:line="40" pos:column="16">1<pos:position pos:line="40" pos:column="17"/></literal></expr>;<pos:position pos:line="40" pos:column="18"/></return>
}<pos:position pos:line="41" pos:column="2"/></block></function></unit>
