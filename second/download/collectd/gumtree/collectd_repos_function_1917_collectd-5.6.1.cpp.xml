<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1917_collectd-5.6.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">parse_part_number<pos:position pos:line="1" pos:column="29"/></name> <parameter_list pos:line="1" pos:column="30">(<parameter><decl><type><name pos:line="1" pos:column="31">void<pos:position pos:line="1" pos:column="35"/></name> <modifier pos:line="1" pos:column="36">*<pos:position pos:line="1" pos:column="37"/></modifier><modifier pos:line="1" pos:column="37">*<pos:position pos:line="1" pos:column="38"/></modifier></type><name pos:line="1" pos:column="38">ret_buffer<pos:position pos:line="1" pos:column="48"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="50">size_t<pos:position pos:line="1" pos:column="56"/></name> <modifier pos:line="1" pos:column="57">*<pos:position pos:line="1" pos:column="58"/></modifier></type><name pos:line="1" pos:column="58">ret_buffer_len<pos:position pos:line="1" pos:column="72"/></name></decl></parameter>,
		<parameter><decl><type><name pos:line="2" pos:column="17">uint64_t<pos:position pos:line="2" pos:column="25"/></name> <modifier pos:line="2" pos:column="26">*<pos:position pos:line="2" pos:column="27"/></modifier></type><name pos:line="2" pos:column="27">value<pos:position pos:line="2" pos:column="32"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="33"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">char<pos:position pos:line="4" pos:column="13"/></name> <modifier pos:line="4" pos:column="14">*<pos:position pos:line="4" pos:column="15"/></modifier></type><name pos:line="4" pos:column="15">buffer<pos:position pos:line="4" pos:column="21"/></name> <init pos:line="4" pos:column="22">= <expr><operator pos:line="4" pos:column="24">*<pos:position pos:line="4" pos:column="25"/></operator><name pos:line="4" pos:column="25">ret_buffer<pos:position pos:line="4" pos:column="35"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="36"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">size_t<pos:position pos:line="5" pos:column="15"/></name></type> <name pos:line="5" pos:column="16">buffer_len<pos:position pos:line="5" pos:column="26"/></name> <init pos:line="5" pos:column="27">= <expr><operator pos:line="5" pos:column="29">*<pos:position pos:line="5" pos:column="30"/></operator><name pos:line="5" pos:column="30">ret_buffer_len<pos:position pos:line="5" pos:column="44"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="45"/></decl_stmt>

	<decl_stmt><decl><type><name pos:line="7" pos:column="9">uint16_t<pos:position pos:line="7" pos:column="17"/></name></type> <name pos:line="7" pos:column="18">tmp16<pos:position pos:line="7" pos:column="23"/></name></decl>;<pos:position pos:line="7" pos:column="24"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">uint64_t<pos:position pos:line="8" pos:column="17"/></name></type> <name pos:line="8" pos:column="18">tmp64<pos:position pos:line="8" pos:column="23"/></name></decl>;<pos:position pos:line="8" pos:column="24"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="9" pos:column="9">size_t<pos:position pos:line="9" pos:column="15"/></name></type> <name pos:line="9" pos:column="16">exp_size<pos:position pos:line="9" pos:column="24"/></name> <init pos:line="9" pos:column="25">= <expr><literal type="number" pos:line="9" pos:column="27">2<pos:position pos:line="9" pos:column="28"/></literal> <operator pos:line="9" pos:column="29">*<pos:position pos:line="9" pos:column="30"/></operator> <sizeof pos:line="9" pos:column="31">sizeof <argument_list pos:line="9" pos:column="38">(<argument><expr><name pos:line="9" pos:column="39">uint16_t<pos:position pos:line="9" pos:column="47"/></name></expr></argument>)<pos:position pos:line="9" pos:column="48"/></argument_list></sizeof> <operator pos:line="9" pos:column="49">+<pos:position pos:line="9" pos:column="50"/></operator> <sizeof pos:line="9" pos:column="51">sizeof <argument_list pos:line="9" pos:column="58">(<argument><expr><name pos:line="9" pos:column="59">uint64_t<pos:position pos:line="9" pos:column="67"/></name></expr></argument>)<pos:position pos:line="9" pos:column="68"/></argument_list></sizeof></expr></init></decl>;<pos:position pos:line="9" pos:column="69"/></decl_stmt>

	<decl_stmt><decl><type><name pos:line="11" pos:column="9">uint16_t<pos:position pos:line="11" pos:column="17"/></name></type> <name pos:line="11" pos:column="18">pkg_length<pos:position pos:line="11" pos:column="28"/></name></decl>;<pos:position pos:line="11" pos:column="29"/></decl_stmt>

	<if pos:line="13" pos:column="9">if <condition pos:line="13" pos:column="12">(<expr><name pos:line="13" pos:column="13">buffer_len<pos:position pos:line="13" pos:column="23"/></name> <operator pos:line="13" pos:column="24">&lt;<pos:position pos:line="13" pos:column="28"/></operator> <name pos:line="13" pos:column="26">exp_size<pos:position pos:line="13" pos:column="34"/></name></expr>)<pos:position pos:line="13" pos:column="35"/></condition><then pos:line="13" pos:column="35">
	<block pos:line="14" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="15" pos:column="17">WARNING<pos:position pos:line="15" pos:column="24"/></name> <argument_list pos:line="15" pos:column="25">(<argument><expr><literal type="string" pos:line="15" pos:column="26">"network plugin: parse_part_number: "<pos:position pos:line="15" pos:column="63"/></literal>
				<literal type="string" pos:line="16" pos:column="33">"Packet too short: "<pos:position pos:line="16" pos:column="53"/></literal>
				<literal type="string" pos:line="17" pos:column="33">"Chunk of size %zu expected, "<pos:position pos:line="17" pos:column="63"/></literal>
				<literal type="string" pos:line="18" pos:column="33">"but buffer has only %zu bytes left."<pos:position pos:line="18" pos:column="70"/></literal></expr></argument>,
				<argument><expr><name pos:line="19" pos:column="33">exp_size<pos:position pos:line="19" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="43">buffer_len<pos:position pos:line="19" pos:column="53"/></name></expr></argument>)<pos:position pos:line="19" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="55"/></expr_stmt>
		<return pos:line="20" pos:column="17">return <expr><operator pos:line="20" pos:column="24">(<pos:position pos:line="20" pos:column="25"/></operator><operator pos:line="20" pos:column="25">-<pos:position pos:line="20" pos:column="26"/></operator><literal type="number" pos:line="20" pos:column="26">1<pos:position pos:line="20" pos:column="27"/></literal><operator pos:line="20" pos:column="27">)<pos:position pos:line="20" pos:column="28"/></operator></expr>;<pos:position pos:line="20" pos:column="29"/></return>
	}<pos:position pos:line="21" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="23" pos:column="9">memcpy<pos:position pos:line="23" pos:column="15"/></name> <argument_list pos:line="23" pos:column="16">(<argument><expr><operator pos:line="23" pos:column="17">(<pos:position pos:line="23" pos:column="18"/></operator><name pos:line="23" pos:column="18">void<pos:position pos:line="23" pos:column="22"/></name> <operator pos:line="23" pos:column="23">*<pos:position pos:line="23" pos:column="24"/></operator><operator pos:line="23" pos:column="24">)<pos:position pos:line="23" pos:column="25"/></operator> <operator pos:line="23" pos:column="26">&amp;<pos:position pos:line="23" pos:column="31"/></operator><name pos:line="23" pos:column="27">tmp16<pos:position pos:line="23" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="34">buffer<pos:position pos:line="23" pos:column="40"/></name></expr></argument>, <argument><expr><sizeof pos:line="23" pos:column="42">sizeof <argument_list pos:line="23" pos:column="49">(<argument><expr><name pos:line="23" pos:column="50">tmp16<pos:position pos:line="23" pos:column="55"/></name></expr></argument>)<pos:position pos:line="23" pos:column="56"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="23" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="58"/></expr_stmt>
	<expr_stmt><expr><name pos:line="24" pos:column="9">buffer<pos:position pos:line="24" pos:column="15"/></name> <operator pos:line="24" pos:column="16">+=<pos:position pos:line="24" pos:column="18"/></operator> <sizeof pos:line="24" pos:column="19">sizeof <argument_list pos:line="24" pos:column="26">(<argument><expr><name pos:line="24" pos:column="27">tmp16<pos:position pos:line="24" pos:column="32"/></name></expr></argument>)<pos:position pos:line="24" pos:column="33"/></argument_list></sizeof></expr>;<pos:position pos:line="24" pos:column="34"/></expr_stmt>
	<comment type="block" pos:line="25" pos:column="9">/* pkg_type = ntohs (tmp16); */</comment>

	<expr_stmt><expr><call><name pos:line="27" pos:column="9">memcpy<pos:position pos:line="27" pos:column="15"/></name> <argument_list pos:line="27" pos:column="16">(<argument><expr><operator pos:line="27" pos:column="17">(<pos:position pos:line="27" pos:column="18"/></operator><name pos:line="27" pos:column="18">void<pos:position pos:line="27" pos:column="22"/></name> <operator pos:line="27" pos:column="23">*<pos:position pos:line="27" pos:column="24"/></operator><operator pos:line="27" pos:column="24">)<pos:position pos:line="27" pos:column="25"/></operator> <operator pos:line="27" pos:column="26">&amp;<pos:position pos:line="27" pos:column="31"/></operator><name pos:line="27" pos:column="27">tmp16<pos:position pos:line="27" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="34">buffer<pos:position pos:line="27" pos:column="40"/></name></expr></argument>, <argument><expr><sizeof pos:line="27" pos:column="42">sizeof <argument_list pos:line="27" pos:column="49">(<argument><expr><name pos:line="27" pos:column="50">tmp16<pos:position pos:line="27" pos:column="55"/></name></expr></argument>)<pos:position pos:line="27" pos:column="56"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="27" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="58"/></expr_stmt>
	<expr_stmt><expr><name pos:line="28" pos:column="9">buffer<pos:position pos:line="28" pos:column="15"/></name> <operator pos:line="28" pos:column="16">+=<pos:position pos:line="28" pos:column="18"/></operator> <sizeof pos:line="28" pos:column="19">sizeof <argument_list pos:line="28" pos:column="26">(<argument><expr><name pos:line="28" pos:column="27">tmp16<pos:position pos:line="28" pos:column="32"/></name></expr></argument>)<pos:position pos:line="28" pos:column="33"/></argument_list></sizeof></expr>;<pos:position pos:line="28" pos:column="34"/></expr_stmt>
	<expr_stmt><expr><name pos:line="29" pos:column="9">pkg_length<pos:position pos:line="29" pos:column="19"/></name> <operator pos:line="29" pos:column="20">=<pos:position pos:line="29" pos:column="21"/></operator> <call><name pos:line="29" pos:column="22">ntohs<pos:position pos:line="29" pos:column="27"/></name> <argument_list pos:line="29" pos:column="28">(<argument><expr><name pos:line="29" pos:column="29">tmp16<pos:position pos:line="29" pos:column="34"/></name></expr></argument>)<pos:position pos:line="29" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="36"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="31" pos:column="9">memcpy<pos:position pos:line="31" pos:column="15"/></name> <argument_list pos:line="31" pos:column="16">(<argument><expr><operator pos:line="31" pos:column="17">(<pos:position pos:line="31" pos:column="18"/></operator><name pos:line="31" pos:column="18">void<pos:position pos:line="31" pos:column="22"/></name> <operator pos:line="31" pos:column="23">*<pos:position pos:line="31" pos:column="24"/></operator><operator pos:line="31" pos:column="24">)<pos:position pos:line="31" pos:column="25"/></operator> <operator pos:line="31" pos:column="26">&amp;<pos:position pos:line="31" pos:column="31"/></operator><name pos:line="31" pos:column="27">tmp64<pos:position pos:line="31" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="34">buffer<pos:position pos:line="31" pos:column="40"/></name></expr></argument>, <argument><expr><sizeof pos:line="31" pos:column="42">sizeof <argument_list pos:line="31" pos:column="49">(<argument><expr><name pos:line="31" pos:column="50">tmp64<pos:position pos:line="31" pos:column="55"/></name></expr></argument>)<pos:position pos:line="31" pos:column="56"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="31" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="58"/></expr_stmt>
	<expr_stmt><expr><name pos:line="32" pos:column="9">buffer<pos:position pos:line="32" pos:column="15"/></name> <operator pos:line="32" pos:column="16">+=<pos:position pos:line="32" pos:column="18"/></operator> <sizeof pos:line="32" pos:column="19">sizeof <argument_list pos:line="32" pos:column="26">(<argument><expr><name pos:line="32" pos:column="27">tmp64<pos:position pos:line="32" pos:column="32"/></name></expr></argument>)<pos:position pos:line="32" pos:column="33"/></argument_list></sizeof></expr>;<pos:position pos:line="32" pos:column="34"/></expr_stmt>
	<expr_stmt><expr><operator pos:line="33" pos:column="9">*<pos:position pos:line="33" pos:column="10"/></operator><name pos:line="33" pos:column="10">value<pos:position pos:line="33" pos:column="15"/></name> <operator pos:line="33" pos:column="16">=<pos:position pos:line="33" pos:column="17"/></operator> <call><name pos:line="33" pos:column="18">ntohll<pos:position pos:line="33" pos:column="24"/></name> <argument_list pos:line="33" pos:column="25">(<argument><expr><name pos:line="33" pos:column="26">tmp64<pos:position pos:line="33" pos:column="31"/></name></expr></argument>)<pos:position pos:line="33" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="33"/></expr_stmt>

	<expr_stmt><expr><operator pos:line="35" pos:column="9">*<pos:position pos:line="35" pos:column="10"/></operator><name pos:line="35" pos:column="10">ret_buffer<pos:position pos:line="35" pos:column="20"/></name> <operator pos:line="35" pos:column="21">=<pos:position pos:line="35" pos:column="22"/></operator> <name pos:line="35" pos:column="23">buffer<pos:position pos:line="35" pos:column="29"/></name></expr>;<pos:position pos:line="35" pos:column="30"/></expr_stmt>
	<expr_stmt><expr><operator pos:line="36" pos:column="9">*<pos:position pos:line="36" pos:column="10"/></operator><name pos:line="36" pos:column="10">ret_buffer_len<pos:position pos:line="36" pos:column="24"/></name> <operator pos:line="36" pos:column="25">=<pos:position pos:line="36" pos:column="26"/></operator> <name pos:line="36" pos:column="27">buffer_len<pos:position pos:line="36" pos:column="37"/></name> <operator pos:line="36" pos:column="38">-<pos:position pos:line="36" pos:column="39"/></operator> <name pos:line="36" pos:column="40">pkg_length<pos:position pos:line="36" pos:column="50"/></name></expr>;<pos:position pos:line="36" pos:column="51"/></expr_stmt>

	<return pos:line="38" pos:column="9">return <expr><operator pos:line="38" pos:column="16">(<pos:position pos:line="38" pos:column="17"/></operator><literal type="number" pos:line="38" pos:column="17">0<pos:position pos:line="38" pos:column="18"/></literal><operator pos:line="38" pos:column="18">)<pos:position pos:line="38" pos:column="19"/></operator></expr>;<pos:position pos:line="38" pos:column="20"/></return>
}<pos:position pos:line="39" pos:column="2"/></block></function></unit>
