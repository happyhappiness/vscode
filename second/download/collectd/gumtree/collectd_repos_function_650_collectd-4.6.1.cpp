static int openvpn_read (void)
{
	FILE *fh;
	char buffer[1024];
	char *fields[10];
	const int max_fields = STATIC_ARRAY_SIZE (fields);
	int   fields_num;

	counter_t pre_compress_new    = 0;
	counter_t post_compress_new   = 0;
	counter_t pre_decompress_new  = 0;
	counter_t post_decompress_new = 0;

	/* Clear the least significant four bits, just to make sure all four
	 * counters above are considered to be invalid. */
	compression_counter_valid &= ~0x0f;

	fh = fopen ((status_file != NULL)
			? status_file
			: DEFAULT_STATUS_FILE, "r");
	if (fh == NULL)
		return (-1);

        /* status file is generated by openvpn/multi.c:multi_print_status()
	 * this plugin requires server.conf: "status-version 2"
         * http://svn.openvpn.net/projects/openvpn/trunk/openvpn/multi.c
         */
	while (fgets (buffer, sizeof (buffer), fh) != NULL)
	{
		fields_num = openvpn_strsplit (buffer, fields, max_fields);

		/* Expect at least ``key,value''. */
		if (fields_num < 2)
			continue;

		if (strcmp (fields[0], "CLIENT_LIST") == 0)
		{
			char *name;
			counter_t rx;
			counter_t tx;

			/* The line we're expecting has 8 fields. We ignore all lines
			 * with more or less fields. */
			if (fields_num != 8)
				continue;

			name =      fields[1];  /* "Common Name" */
			rx = atoll (fields[4]); /* "Bytes Received */
			tx = atoll (fields[5]); /* "Bytes Sent" */
			openvpn_submit (name, rx, tx);
		}
		else if (strcmp (fields[0], "pre-compress") == 0)
		{
			pre_compress_new = atoll (fields[1]);
			compression_counter_valid |= 0x01;
		}
		else if (strcmp (fields[0], "post-compress") == 0)
		{
			post_compress_new = atoll (fields[1]);
			compression_counter_valid |= 0x02;
		}
		else if (strcmp (fields[0], "pre-decompress") == 0)
		{
			pre_decompress_new = atoll (fields[1]);
			compression_counter_valid |= 0x04;
		}
		else if (strcmp (fields[0], "post-decompress") == 0)
		{
			post_decompress_new = atoll (fields[1]);
			compression_counter_valid |= 0x08;
		}
	}
	fclose (fh);

	/* Check that all four counters are valid, {pre,post}_*_{old,new}. */
	if ((compression_counter_valid & 0x33) == 0x33)
	{
		counter_t pre_diff;
		counter_t post_diff;

		pre_diff = counter_diff (pre_compress_old, pre_compress_new);
		post_diff = counter_diff (post_compress_old, post_compress_new);

		/* If we compress, we're sending. */
		compression_submit ("tx",
				((gauge_t) post_diff) / ((gauge_t) pre_diff));
	}

	/* Now check the other found counters. */
	if ((compression_counter_valid & 0xcc) == 0xcc)
	{
		counter_t pre_diff;
		counter_t post_diff;

		pre_diff = counter_diff (pre_decompress_old, pre_decompress_new);
		post_diff = counter_diff (post_decompress_old, post_decompress_new);

		/* If we decompress, we're receiving. */
		compression_submit ("rx",
				((gauge_t) pre_diff) / ((gauge_t) post_diff));
	}

	/* Now copy all the new counters to the old counters and move the flags
	 * up. */
	pre_compress_old = pre_compress_new;
	post_compress_old = post_compress_new;
	pre_decompress_old = pre_decompress_new;
	post_decompress_old = post_decompress_new;
	compression_counter_valid = (compression_counter_valid & 0x0f) << 4;

	return (0);
}