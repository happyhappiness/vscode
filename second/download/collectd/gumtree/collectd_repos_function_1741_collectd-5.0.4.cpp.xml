<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1741_collectd-5.0.4.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name><name pos:line="1" pos:column="8">struct<pos:position pos:line="1" pos:column="14"/></name> <name pos:line="1" pos:column="15">ip_vs_get_dests<pos:position pos:line="1" pos:column="30"/></name></name> <modifier pos:line="1" pos:column="31">*<pos:position pos:line="1" pos:column="32"/></modifier></type><name pos:line="1" pos:column="32">ipvs_get_dests<pos:position pos:line="1" pos:column="46"/></name> <parameter_list pos:line="1" pos:column="47">(<parameter><decl><type><name><name pos:line="1" pos:column="48">struct<pos:position pos:line="1" pos:column="54"/></name> <name pos:line="1" pos:column="55">ip_vs_service_entry<pos:position pos:line="1" pos:column="74"/></name></name> <modifier pos:line="1" pos:column="75">*<pos:position pos:line="1" pos:column="76"/></modifier></type><name pos:line="1" pos:column="76">se<pos:position pos:line="1" pos:column="78"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="79"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">ip_vs_get_dests<pos:position pos:line="3" pos:column="31"/></name></name> <modifier pos:line="3" pos:column="32">*<pos:position pos:line="3" pos:column="33"/></modifier></type><name pos:line="3" pos:column="33">ret<pos:position pos:line="3" pos:column="36"/></name></decl>;<pos:position pos:line="3" pos:column="37"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">socklen_t<pos:position pos:line="4" pos:column="18"/></name></type> <name pos:line="4" pos:column="19">len<pos:position pos:line="4" pos:column="22"/></name></decl>;<pos:position pos:line="4" pos:column="23"/></decl_stmt>

	<expr_stmt><expr><name pos:line="6" pos:column="9">len<pos:position pos:line="6" pos:column="12"/></name> <operator pos:line="6" pos:column="13">=<pos:position pos:line="6" pos:column="14"/></operator> <sizeof pos:line="6" pos:column="15">sizeof <argument_list pos:line="6" pos:column="22">(<argument><expr><operator pos:line="6" pos:column="23">*<pos:position pos:line="6" pos:column="24"/></operator><name pos:line="6" pos:column="24">ret<pos:position pos:line="6" pos:column="27"/></name></expr></argument>)<pos:position pos:line="6" pos:column="28"/></argument_list></sizeof> <operator pos:line="6" pos:column="29">+<pos:position pos:line="6" pos:column="30"/></operator> <sizeof pos:line="6" pos:column="31">sizeof <argument_list pos:line="6" pos:column="38">(<argument><expr pos:line="6" pos:column="39">struct <name pos:line="6" pos:column="46">ip_vs_dest_entry<pos:position pos:line="6" pos:column="62"/></name></expr></argument>)<pos:position pos:line="6" pos:column="63"/></argument_list></sizeof> <operator pos:line="6" pos:column="64">*<pos:position pos:line="6" pos:column="65"/></operator> <name><name pos:line="6" pos:column="66">se<pos:position pos:line="6" pos:column="68"/></name><operator pos:line="6" pos:column="68">-&gt;<pos:position pos:line="6" pos:column="73"/></operator><name pos:line="6" pos:column="70">num_dests<pos:position pos:line="6" pos:column="79"/></name></name></expr>;<pos:position pos:line="6" pos:column="80"/></expr_stmt>

	<if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><name pos:line="8" pos:column="13">NULL<pos:position pos:line="8" pos:column="17"/></name> <operator pos:line="8" pos:column="18">==<pos:position pos:line="8" pos:column="20"/></operator> <operator pos:line="8" pos:column="21">(<pos:position pos:line="8" pos:column="22"/></operator><name pos:line="8" pos:column="22">ret<pos:position pos:line="8" pos:column="25"/></name> <operator pos:line="8" pos:column="26">=<pos:position pos:line="8" pos:column="27"/></operator> <call><name pos:line="8" pos:column="28">malloc<pos:position pos:line="8" pos:column="34"/></name> <argument_list pos:line="8" pos:column="35">(<argument><expr><name pos:line="8" pos:column="36">len<pos:position pos:line="8" pos:column="39"/></name></expr></argument>)<pos:position pos:line="8" pos:column="40"/></argument_list></call><operator pos:line="8" pos:column="40">)<pos:position pos:line="8" pos:column="41"/></operator></expr>)<pos:position pos:line="8" pos:column="42"/></condition><then pos:line="8" pos:column="42"> <block pos:line="8" pos:column="43">{
		<expr_stmt><expr><call><name pos:line="9" pos:column="17">log_err<pos:position pos:line="9" pos:column="24"/></name> <argument_list pos:line="9" pos:column="25">(<argument><expr><literal type="string" pos:line="9" pos:column="26">"ipvs_get_dests: Out of memory."<pos:position pos:line="9" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="60"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="10" pos:column="17">exit<pos:position pos:line="10" pos:column="21"/></name> <argument_list pos:line="10" pos:column="22">(<argument><expr><literal type="number" pos:line="10" pos:column="23">3<pos:position pos:line="10" pos:column="24"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="26"/></expr_stmt>
	}<pos:position pos:line="11" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name><name pos:line="13" pos:column="9">ret<pos:position pos:line="13" pos:column="12"/></name><operator pos:line="13" pos:column="12">-&gt;<pos:position pos:line="13" pos:column="17"/></operator><name pos:line="13" pos:column="14">fwmark<pos:position pos:line="13" pos:column="20"/></name></name>    <operator pos:line="13" pos:column="24">=<pos:position pos:line="13" pos:column="25"/></operator> <name><name pos:line="13" pos:column="26">se<pos:position pos:line="13" pos:column="28"/></name><operator pos:line="13" pos:column="28">-&gt;<pos:position pos:line="13" pos:column="33"/></operator><name pos:line="13" pos:column="30">fwmark<pos:position pos:line="13" pos:column="36"/></name></name></expr>;<pos:position pos:line="13" pos:column="37"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="14" pos:column="9">ret<pos:position pos:line="14" pos:column="12"/></name><operator pos:line="14" pos:column="12">-&gt;<pos:position pos:line="14" pos:column="17"/></operator><name pos:line="14" pos:column="14">protocol<pos:position pos:line="14" pos:column="22"/></name></name>  <operator pos:line="14" pos:column="24">=<pos:position pos:line="14" pos:column="25"/></operator> <name><name pos:line="14" pos:column="26">se<pos:position pos:line="14" pos:column="28"/></name><operator pos:line="14" pos:column="28">-&gt;<pos:position pos:line="14" pos:column="33"/></operator><name pos:line="14" pos:column="30">protocol<pos:position pos:line="14" pos:column="38"/></name></name></expr>;<pos:position pos:line="14" pos:column="39"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="15" pos:column="9">ret<pos:position pos:line="15" pos:column="12"/></name><operator pos:line="15" pos:column="12">-&gt;<pos:position pos:line="15" pos:column="17"/></operator><name pos:line="15" pos:column="14">addr<pos:position pos:line="15" pos:column="18"/></name></name>      <operator pos:line="15" pos:column="24">=<pos:position pos:line="15" pos:column="25"/></operator> <name><name pos:line="15" pos:column="26">se<pos:position pos:line="15" pos:column="28"/></name><operator pos:line="15" pos:column="28">-&gt;<pos:position pos:line="15" pos:column="33"/></operator><name pos:line="15" pos:column="30">addr<pos:position pos:line="15" pos:column="34"/></name></name></expr>;<pos:position pos:line="15" pos:column="35"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="16" pos:column="9">ret<pos:position pos:line="16" pos:column="12"/></name><operator pos:line="16" pos:column="12">-&gt;<pos:position pos:line="16" pos:column="17"/></operator><name pos:line="16" pos:column="14">port<pos:position pos:line="16" pos:column="18"/></name></name>      <operator pos:line="16" pos:column="24">=<pos:position pos:line="16" pos:column="25"/></operator> <name><name pos:line="16" pos:column="26">se<pos:position pos:line="16" pos:column="28"/></name><operator pos:line="16" pos:column="28">-&gt;<pos:position pos:line="16" pos:column="33"/></operator><name pos:line="16" pos:column="30">port<pos:position pos:line="16" pos:column="34"/></name></name></expr>;<pos:position pos:line="16" pos:column="35"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="17" pos:column="9">ret<pos:position pos:line="17" pos:column="12"/></name><operator pos:line="17" pos:column="12">-&gt;<pos:position pos:line="17" pos:column="17"/></operator><name pos:line="17" pos:column="14">num_dests<pos:position pos:line="17" pos:column="23"/></name></name> <operator pos:line="17" pos:column="24">=<pos:position pos:line="17" pos:column="25"/></operator> <name><name pos:line="17" pos:column="26">se<pos:position pos:line="17" pos:column="28"/></name><operator pos:line="17" pos:column="28">-&gt;<pos:position pos:line="17" pos:column="33"/></operator><name pos:line="17" pos:column="30">num_dests<pos:position pos:line="17" pos:column="39"/></name></name></expr>;<pos:position pos:line="17" pos:column="40"/></expr_stmt>

	<if pos:line="19" pos:column="9">if <condition pos:line="19" pos:column="12">(<expr><literal type="number" pos:line="19" pos:column="13">0<pos:position pos:line="19" pos:column="14"/></literal> <operator pos:line="19" pos:column="15">!=<pos:position pos:line="19" pos:column="17"/></operator> <call><name pos:line="19" pos:column="18">getsockopt<pos:position pos:line="19" pos:column="28"/></name> <argument_list pos:line="19" pos:column="29">(<argument><expr><name pos:line="19" pos:column="30">sockfd<pos:position pos:line="19" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="38">IPPROTO_IP<pos:position pos:line="19" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="50">IP_VS_SO_GET_DESTS<pos:position pos:line="19" pos:column="68"/></name></expr></argument>,
				<argument><expr><operator pos:line="20" pos:column="33">(<pos:position pos:line="20" pos:column="34"/></operator><name pos:line="20" pos:column="34">void<pos:position pos:line="20" pos:column="38"/></name> <operator pos:line="20" pos:column="39">*<pos:position pos:line="20" pos:column="40"/></operator><operator pos:line="20" pos:column="40">)<pos:position pos:line="20" pos:column="41"/></operator><name pos:line="20" pos:column="41">ret<pos:position pos:line="20" pos:column="44"/></name></expr></argument>, <argument><expr><operator pos:line="20" pos:column="46">&amp;<pos:position pos:line="20" pos:column="51"/></operator><name pos:line="20" pos:column="47">len<pos:position pos:line="20" pos:column="50"/></name></expr></argument>)<pos:position pos:line="20" pos:column="51"/></argument_list></call></expr>)<pos:position pos:line="20" pos:column="52"/></condition><then pos:line="20" pos:column="52"> <block pos:line="20" pos:column="53">{
		<decl_stmt><decl><type><name pos:line="21" pos:column="17">char<pos:position pos:line="21" pos:column="21"/></name></type> <name><name pos:line="21" pos:column="22">errbuf<pos:position pos:line="21" pos:column="28"/></name><index pos:line="21" pos:column="28">[<expr><literal type="number" pos:line="21" pos:column="29">1024<pos:position pos:line="21" pos:column="33"/></literal></expr>]<pos:position pos:line="21" pos:column="34"/></index></name></decl>;<pos:position pos:line="21" pos:column="35"/></decl_stmt>
		<expr_stmt><expr><call><name pos:line="22" pos:column="17">log_err<pos:position pos:line="22" pos:column="24"/></name> <argument_list pos:line="22" pos:column="25">(<argument><expr><literal type="string" pos:line="22" pos:column="26">"ipvs_get_dests: getsockopt() failed: %s"<pos:position pos:line="22" pos:column="67"/></literal></expr></argument>,
				<argument><expr><call><name pos:line="23" pos:column="33">sstrerror<pos:position pos:line="23" pos:column="42"/></name> <argument_list pos:line="23" pos:column="43">(<argument><expr><name pos:line="23" pos:column="44">errno<pos:position pos:line="23" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="51">errbuf<pos:position pos:line="23" pos:column="57"/></name></expr></argument>, <argument><expr><sizeof pos:line="23" pos:column="59">sizeof <argument_list pos:line="23" pos:column="66">(<argument><expr><name pos:line="23" pos:column="67">errbuf<pos:position pos:line="23" pos:column="73"/></name></expr></argument>)<pos:position pos:line="23" pos:column="74"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="23" pos:column="75"/></argument_list></call></expr></argument>)<pos:position pos:line="23" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="77"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="24" pos:column="17">free<pos:position pos:line="24" pos:column="21"/></name> <argument_list pos:line="24" pos:column="22">(<argument><expr><name pos:line="24" pos:column="23">ret<pos:position pos:line="24" pos:column="26"/></name></expr></argument>)<pos:position pos:line="24" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="28"/></expr_stmt>
		<return pos:line="25" pos:column="17">return <expr><name pos:line="25" pos:column="24">NULL<pos:position pos:line="25" pos:column="28"/></name></expr>;<pos:position pos:line="25" pos:column="29"/></return>
	}<pos:position pos:line="26" pos:column="10"/></block></then></if>
	<return pos:line="27" pos:column="9">return <expr><name pos:line="27" pos:column="16">ret<pos:position pos:line="27" pos:column="19"/></name></expr>;<pos:position pos:line="27" pos:column="20"/></return>
}<pos:position pos:line="28" pos:column="2"/></block></function></unit>
