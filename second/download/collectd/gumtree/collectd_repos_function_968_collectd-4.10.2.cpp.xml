<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_968_collectd-4.10.2.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">pinba_udp_read_callback_fn<pos:position pos:line="1" pos:column="38"/></name> <parameter_list pos:line="1" pos:column="39">(<parameter><decl><type><name pos:line="1" pos:column="40">int<pos:position pos:line="1" pos:column="43"/></name></type> <name pos:line="1" pos:column="44">sock<pos:position pos:line="1" pos:column="48"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="49"/></parameter_list> <comment type="block" pos:line="1" pos:column="50">/* {{{ */</comment>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">uint8_t<pos:position pos:line="3" pos:column="10"/></name></type> <name><name pos:line="3" pos:column="11">buffer<pos:position pos:line="3" pos:column="17"/></name><index pos:line="3" pos:column="17">[<expr><name pos:line="3" pos:column="18">PINBA_UDP_BUFFER_SIZE<pos:position pos:line="3" pos:column="39"/></name></expr>]<pos:position pos:line="3" pos:column="40"/></index></name></decl>;<pos:position pos:line="3" pos:column="41"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">size_t<pos:position pos:line="4" pos:column="9"/></name></type> <name pos:line="4" pos:column="10">buffer_size<pos:position pos:line="4" pos:column="21"/></name></decl>;<pos:position pos:line="4" pos:column="22"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">int<pos:position pos:line="5" pos:column="6"/></name></type> <name pos:line="5" pos:column="7">status<pos:position pos:line="5" pos:column="13"/></name></decl>;<pos:position pos:line="5" pos:column="14"/></decl_stmt>

  <while pos:line="7" pos:column="3">while <condition pos:line="7" pos:column="9">(<expr><literal type="number" pos:line="7" pos:column="10">42<pos:position pos:line="7" pos:column="12"/></literal></expr>)<pos:position pos:line="7" pos:column="13"/></condition>
  <block pos:line="8" pos:column="3">{
    <expr_stmt><expr><name pos:line="9" pos:column="5">buffer_size<pos:position pos:line="9" pos:column="16"/></name> <operator pos:line="9" pos:column="17">=<pos:position pos:line="9" pos:column="18"/></operator> <sizeof pos:line="9" pos:column="19">sizeof <argument_list pos:line="9" pos:column="26">(<argument><expr><name pos:line="9" pos:column="27">buffer<pos:position pos:line="9" pos:column="33"/></name></expr></argument>)<pos:position pos:line="9" pos:column="34"/></argument_list></sizeof></expr>;<pos:position pos:line="9" pos:column="35"/></expr_stmt>
    <expr_stmt><expr><name pos:line="10" pos:column="5">status<pos:position pos:line="10" pos:column="11"/></name> <operator pos:line="10" pos:column="12">=<pos:position pos:line="10" pos:column="13"/></operator> <call><name pos:line="10" pos:column="14">recvfrom<pos:position pos:line="10" pos:column="22"/></name> <argument_list pos:line="10" pos:column="23">(<argument><expr><name pos:line="10" pos:column="24">sock<pos:position pos:line="10" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="30">buffer<pos:position pos:line="10" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="38">buffer_size<pos:position pos:line="10" pos:column="49"/></name> <operator pos:line="10" pos:column="50">-<pos:position pos:line="10" pos:column="51"/></operator> <literal type="number" pos:line="10" pos:column="52">1<pos:position pos:line="10" pos:column="53"/></literal></expr></argument>, <argument><expr><name pos:line="10" pos:column="55">MSG_DONTWAIT<pos:position pos:line="10" pos:column="67"/></name></expr></argument>, <comment type="block" pos:line="10" pos:column="69">/* from = */</comment> <argument><expr><name pos:line="10" pos:column="82">NULL<pos:position pos:line="10" pos:column="86"/></name></expr></argument>, <comment type="block" pos:line="10" pos:column="88">/* from len = */</comment> <argument><expr><literal type="number" pos:line="10" pos:column="105">0<pos:position pos:line="10" pos:column="106"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="107"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="108"/></expr_stmt>
    <if pos:line="11" pos:column="5">if <condition pos:line="11" pos:column="8">(<expr><name pos:line="11" pos:column="9">status<pos:position pos:line="11" pos:column="15"/></name> <operator pos:line="11" pos:column="16">&lt;<pos:position pos:line="11" pos:column="20"/></operator> <literal type="number" pos:line="11" pos:column="18">0<pos:position pos:line="11" pos:column="19"/></literal></expr>)<pos:position pos:line="11" pos:column="20"/></condition><then pos:line="11" pos:column="20">
    <block pos:line="12" pos:column="5">{
      <decl_stmt><decl><type><name pos:line="13" pos:column="7">char<pos:position pos:line="13" pos:column="11"/></name></type> <name><name pos:line="13" pos:column="12">errbuf<pos:position pos:line="13" pos:column="18"/></name><index pos:line="13" pos:column="18">[<expr><literal type="number" pos:line="13" pos:column="19">1024<pos:position pos:line="13" pos:column="23"/></literal></expr>]<pos:position pos:line="13" pos:column="24"/></index></name></decl>;<pos:position pos:line="13" pos:column="25"/></decl_stmt>

      <if pos:line="15" pos:column="7">if <condition pos:line="15" pos:column="10">(<expr><operator pos:line="15" pos:column="11">(<pos:position pos:line="15" pos:column="12"/></operator><name pos:line="15" pos:column="12">errno<pos:position pos:line="15" pos:column="17"/></name> <operator pos:line="15" pos:column="18">==<pos:position pos:line="15" pos:column="20"/></operator> <name pos:line="15" pos:column="21">EINTR<pos:position pos:line="15" pos:column="26"/></name><operator pos:line="15" pos:column="26">)<pos:position pos:line="15" pos:column="27"/></operator>
<cpp:ifdef pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">ifdef<pos:position pos:line="16" pos:column="7"/></cpp:directive> <name pos:line="16" pos:column="8">EWOULDBLOCK<pos:position pos:line="16" pos:column="19"/></name></cpp:ifdef>
          <operator pos:line="17" pos:column="11">||<pos:position pos:line="17" pos:column="13"/></operator> <operator pos:line="17" pos:column="14">(<pos:position pos:line="17" pos:column="15"/></operator><name pos:line="17" pos:column="15">errno<pos:position pos:line="17" pos:column="20"/></name> <operator pos:line="17" pos:column="21">==<pos:position pos:line="17" pos:column="23"/></operator> <name pos:line="17" pos:column="24">EWOULDBLOCK<pos:position pos:line="17" pos:column="35"/></name><operator pos:line="17" pos:column="35">)<pos:position pos:line="17" pos:column="36"/></operator>
<cpp:endif pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">endif<pos:position pos:line="18" pos:column="7"/></cpp:directive></cpp:endif>
          <operator pos:line="19" pos:column="11">||<pos:position pos:line="19" pos:column="13"/></operator> <operator pos:line="19" pos:column="14">(<pos:position pos:line="19" pos:column="15"/></operator><name pos:line="19" pos:column="15">errno<pos:position pos:line="19" pos:column="20"/></name> <operator pos:line="19" pos:column="21">==<pos:position pos:line="19" pos:column="23"/></operator> <name pos:line="19" pos:column="24">EAGAIN<pos:position pos:line="19" pos:column="30"/></name><operator pos:line="19" pos:column="30">)<pos:position pos:line="19" pos:column="31"/></operator></expr>)<pos:position pos:line="19" pos:column="32"/></condition><then pos:line="19" pos:column="32">
      <block pos:line="20" pos:column="7">{
        <continue pos:line="21" pos:column="9">continue;<pos:position pos:line="21" pos:column="18"/></continue>
      }<pos:position pos:line="22" pos:column="8"/></block></then></if>

      <expr_stmt><expr><call><name pos:line="24" pos:column="7">WARNING<pos:position pos:line="24" pos:column="14"/></name><argument_list pos:line="24" pos:column="14">(<argument><expr><literal type="string" pos:line="24" pos:column="15">"pinba plugin: recvfrom(2) failed: %s"<pos:position pos:line="24" pos:column="53"/></literal></expr></argument>,
          <argument><expr><call><name pos:line="25" pos:column="11">sstrerror<pos:position pos:line="25" pos:column="20"/></name> <argument_list pos:line="25" pos:column="21">(<argument><expr><name pos:line="25" pos:column="22">errno<pos:position pos:line="25" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="29">errbuf<pos:position pos:line="25" pos:column="35"/></name></expr></argument>, <argument><expr><sizeof pos:line="25" pos:column="37">sizeof <argument_list pos:line="25" pos:column="44">(<argument><expr><name pos:line="25" pos:column="45">errbuf<pos:position pos:line="25" pos:column="51"/></name></expr></argument>)<pos:position pos:line="25" pos:column="52"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="25" pos:column="53"/></argument_list></call></expr></argument>)<pos:position pos:line="25" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="55"/></expr_stmt>
      <return pos:line="26" pos:column="7">return <expr><operator pos:line="26" pos:column="14">(<pos:position pos:line="26" pos:column="15"/></operator><operator pos:line="26" pos:column="15">-<pos:position pos:line="26" pos:column="16"/></operator><literal type="number" pos:line="26" pos:column="16">1<pos:position pos:line="26" pos:column="17"/></literal><operator pos:line="26" pos:column="17">)<pos:position pos:line="26" pos:column="18"/></operator></expr>;<pos:position pos:line="26" pos:column="19"/></return>
    }<pos:position pos:line="27" pos:column="6"/></block></then>
    <elseif pos:line="28" pos:column="5">else <if pos:line="28" pos:column="10">if <condition pos:line="28" pos:column="13">(<expr><name pos:line="28" pos:column="14">status<pos:position pos:line="28" pos:column="20"/></name> <operator pos:line="28" pos:column="21">==<pos:position pos:line="28" pos:column="23"/></operator> <literal type="number" pos:line="28" pos:column="24">0<pos:position pos:line="28" pos:column="25"/></literal></expr>)<pos:position pos:line="28" pos:column="26"/></condition><then pos:line="28" pos:column="26">
    <block pos:line="29" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="30" pos:column="7">DEBUG<pos:position pos:line="30" pos:column="12"/></name> <argument_list pos:line="30" pos:column="13">(<argument><expr><literal type="string" pos:line="30" pos:column="14">"pinba plugin: recvfrom(2) returned unexpected status zero."<pos:position pos:line="30" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="76"/></expr_stmt>
      <return pos:line="31" pos:column="7">return <expr><operator pos:line="31" pos:column="14">(<pos:position pos:line="31" pos:column="15"/></operator><operator pos:line="31" pos:column="15">-<pos:position pos:line="31" pos:column="16"/></operator><literal type="number" pos:line="31" pos:column="16">1<pos:position pos:line="31" pos:column="17"/></literal><operator pos:line="31" pos:column="17">)<pos:position pos:line="31" pos:column="18"/></operator></expr>;<pos:position pos:line="31" pos:column="19"/></return>
    }<pos:position pos:line="32" pos:column="6"/></block></then></if></elseif>
    <else pos:line="33" pos:column="5">else <comment type="block" pos:line="33" pos:column="10">/* if (status &gt; 0) */</comment>
    <block pos:line="34" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="35" pos:column="7">assert<pos:position pos:line="35" pos:column="13"/></name> <argument_list pos:line="35" pos:column="14">(<argument><expr><operator pos:line="35" pos:column="15">(<pos:position pos:line="35" pos:column="16"/></operator><operator pos:line="35" pos:column="16">(<pos:position pos:line="35" pos:column="17"/></operator><name pos:line="35" pos:column="17">size_t<pos:position pos:line="35" pos:column="23"/></name><operator pos:line="35" pos:column="23">)<pos:position pos:line="35" pos:column="24"/></operator> <name pos:line="35" pos:column="25">status<pos:position pos:line="35" pos:column="31"/></name><operator pos:line="35" pos:column="31">)<pos:position pos:line="35" pos:column="32"/></operator> <operator pos:line="35" pos:column="33">&lt;<pos:position pos:line="35" pos:column="37"/></operator> <name pos:line="35" pos:column="35">buffer_size<pos:position pos:line="35" pos:column="46"/></name></expr></argument>)<pos:position pos:line="35" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="48"/></expr_stmt>
      <expr_stmt><expr><name pos:line="36" pos:column="7">buffer_size<pos:position pos:line="36" pos:column="18"/></name> <operator pos:line="36" pos:column="19">=<pos:position pos:line="36" pos:column="20"/></operator> <operator pos:line="36" pos:column="21">(<pos:position pos:line="36" pos:column="22"/></operator><name pos:line="36" pos:column="22">size_t<pos:position pos:line="36" pos:column="28"/></name><operator pos:line="36" pos:column="28">)<pos:position pos:line="36" pos:column="29"/></operator> <name pos:line="36" pos:column="30">status<pos:position pos:line="36" pos:column="36"/></name></expr>;<pos:position pos:line="36" pos:column="37"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="37" pos:column="7">buffer<pos:position pos:line="37" pos:column="13"/></name><index pos:line="37" pos:column="13">[<expr><name pos:line="37" pos:column="14">buffer_size<pos:position pos:line="37" pos:column="25"/></name></expr>]<pos:position pos:line="37" pos:column="26"/></index></name> <operator pos:line="37" pos:column="27">=<pos:position pos:line="37" pos:column="28"/></operator> <literal type="number" pos:line="37" pos:column="29">0<pos:position pos:line="37" pos:column="30"/></literal></expr>;<pos:position pos:line="37" pos:column="31"/></expr_stmt>

      <expr_stmt><expr><name pos:line="39" pos:column="7">status<pos:position pos:line="39" pos:column="13"/></name> <operator pos:line="39" pos:column="14">=<pos:position pos:line="39" pos:column="15"/></operator> <call><name pos:line="39" pos:column="16">pinba_process_stats_packet<pos:position pos:line="39" pos:column="42"/></name> <argument_list pos:line="39" pos:column="43">(<argument><expr><name pos:line="39" pos:column="44">buffer<pos:position pos:line="39" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="52">buffer_size<pos:position pos:line="39" pos:column="63"/></name></expr></argument>)<pos:position pos:line="39" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="65"/></expr_stmt>
      <if pos:line="40" pos:column="7">if <condition pos:line="40" pos:column="10">(<expr><name pos:line="40" pos:column="11">status<pos:position pos:line="40" pos:column="17"/></name> <operator pos:line="40" pos:column="18">!=<pos:position pos:line="40" pos:column="20"/></operator> <literal type="number" pos:line="40" pos:column="21">0<pos:position pos:line="40" pos:column="22"/></literal></expr>)<pos:position pos:line="40" pos:column="23"/></condition><then pos:line="40" pos:column="23">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="41" pos:column="9">DEBUG<pos:position pos:line="41" pos:column="14"/></name><argument_list pos:line="41" pos:column="14">(<argument><expr><literal type="string" pos:line="41" pos:column="15">"pinba plugin: Parsing packet failed."<pos:position pos:line="41" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="41" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="55"/></expr_stmt></block></then></if>
      <return pos:line="42" pos:column="7">return <expr><operator pos:line="42" pos:column="14">(<pos:position pos:line="42" pos:column="15"/></operator><name pos:line="42" pos:column="15">status<pos:position pos:line="42" pos:column="21"/></name><operator pos:line="42" pos:column="21">)<pos:position pos:line="42" pos:column="22"/></operator></expr>;<pos:position pos:line="42" pos:column="23"/></return>
    }<pos:position pos:line="43" pos:column="6"/></block></else></if>
  }<pos:position pos:line="44" pos:column="4"/></block></while> <comment type="block" pos:line="44" pos:column="5">/* while (42) */</comment>

  <comment type="block" pos:line="46" pos:column="3">/* not reached */</comment>
  <expr_stmt><expr><call><name pos:line="47" pos:column="3">assert<pos:position pos:line="47" pos:column="9"/></name> <argument_list pos:line="47" pos:column="10">(<argument><expr><literal type="number" pos:line="47" pos:column="11">23<pos:position pos:line="47" pos:column="13"/></literal> <operator pos:line="47" pos:column="14">==<pos:position pos:line="47" pos:column="16"/></operator> <literal type="number" pos:line="47" pos:column="17">42<pos:position pos:line="47" pos:column="19"/></literal></expr></argument>)<pos:position pos:line="47" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="21"/></expr_stmt>
  <return pos:line="48" pos:column="3">return <expr><operator pos:line="48" pos:column="10">(<pos:position pos:line="48" pos:column="11"/></operator><operator pos:line="48" pos:column="11">-<pos:position pos:line="48" pos:column="12"/></operator><literal type="number" pos:line="48" pos:column="12">1<pos:position pos:line="48" pos:column="13"/></literal><operator pos:line="48" pos:column="13">)<pos:position pos:line="48" pos:column="14"/></operator></expr>;<pos:position pos:line="48" pos:column="15"/></return>
}<pos:position pos:line="49" pos:column="2"/></block></function></unit>
