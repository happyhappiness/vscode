<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1033_collectd-5.6.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">do_listval<pos:position pos:line="1" pos:column="22"/></name><parameter_list pos:line="1" pos:column="22">(<parameter><decl><type><name pos:line="1" pos:column="23">lcc_connection_t<pos:position pos:line="1" pos:column="39"/></name> <modifier pos:line="1" pos:column="40">*<pos:position pos:line="1" pos:column="41"/></modifier></type><name pos:line="1" pos:column="41">connection<pos:position pos:line="1" pos:column="51"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="52"/></parameter_list> <block pos:line="1" pos:column="53">{
  <decl_stmt><decl><type><name pos:line="2" pos:column="3">lcc_identifier_t<pos:position pos:line="2" pos:column="19"/></name> <modifier pos:line="2" pos:column="20">*<pos:position pos:line="2" pos:column="21"/></modifier></type><name pos:line="2" pos:column="21">ret_ident<pos:position pos:line="2" pos:column="30"/></name> <init pos:line="2" pos:column="31">= <expr><name pos:line="2" pos:column="33">NULL<pos:position pos:line="2" pos:column="37"/></name></expr></init></decl>;<pos:position pos:line="2" pos:column="38"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">size_t<pos:position pos:line="3" pos:column="9"/></name></type> <name pos:line="3" pos:column="10">ret_ident_num<pos:position pos:line="3" pos:column="23"/></name> <init pos:line="3" pos:column="24">= <expr><literal type="number" pos:line="3" pos:column="26">0<pos:position pos:line="3" pos:column="27"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="28"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="5" pos:column="3">char<pos:position pos:line="5" pos:column="7"/></name> <modifier pos:line="5" pos:column="8">*<pos:position pos:line="5" pos:column="9"/></modifier></type><name pos:line="5" pos:column="9">hostname<pos:position pos:line="5" pos:column="17"/></name> <init pos:line="5" pos:column="18">= <expr><name pos:line="5" pos:column="20">NULL<pos:position pos:line="5" pos:column="24"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="25"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="7" pos:column="3">int<pos:position pos:line="7" pos:column="6"/></name></type> <name pos:line="7" pos:column="7">status<pos:position pos:line="7" pos:column="13"/></name></decl>;<pos:position pos:line="7" pos:column="14"/></decl_stmt>

  <expr_stmt><expr><name pos:line="9" pos:column="3">status<pos:position pos:line="9" pos:column="9"/></name> <operator pos:line="9" pos:column="10">=<pos:position pos:line="9" pos:column="11"/></operator> <call><name pos:line="9" pos:column="12">lcc_listval<pos:position pos:line="9" pos:column="23"/></name><argument_list pos:line="9" pos:column="23">(<argument><expr><name pos:line="9" pos:column="24">connection<pos:position pos:line="9" pos:column="34"/></name></expr></argument>, <argument><expr><operator pos:line="9" pos:column="36">&amp;<pos:position pos:line="9" pos:column="41"/></operator><name pos:line="9" pos:column="37">ret_ident<pos:position pos:line="9" pos:column="46"/></name></expr></argument>, <argument><expr><operator pos:line="9" pos:column="48">&amp;<pos:position pos:line="9" pos:column="53"/></operator><name pos:line="9" pos:column="49">ret_ident_num<pos:position pos:line="9" pos:column="62"/></name></expr></argument>)<pos:position pos:line="9" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="64"/></expr_stmt>
  <if pos:line="10" pos:column="3">if <condition pos:line="10" pos:column="6">(<expr><name pos:line="10" pos:column="7">status<pos:position pos:line="10" pos:column="13"/></name> <operator pos:line="10" pos:column="14">!=<pos:position pos:line="10" pos:column="16"/></operator> <literal type="number" pos:line="10" pos:column="17">0<pos:position pos:line="10" pos:column="18"/></literal></expr>)<pos:position pos:line="10" pos:column="19"/></condition><then pos:line="10" pos:column="19"> <block pos:line="10" pos:column="20">{
    <expr_stmt><expr><call><name pos:line="11" pos:column="5">printf<pos:position pos:line="11" pos:column="11"/></name><argument_list pos:line="11" pos:column="11">(<argument><expr><literal type="string" pos:line="11" pos:column="12">"UNKNOWN: %s\n"<pos:position pos:line="11" pos:column="27"/></literal></expr></argument>, <argument><expr><call><name pos:line="11" pos:column="29">lcc_strerror<pos:position pos:line="11" pos:column="41"/></name><argument_list pos:line="11" pos:column="41">(<argument><expr><name pos:line="11" pos:column="42">connection<pos:position pos:line="11" pos:column="52"/></name></expr></argument>)<pos:position pos:line="11" pos:column="53"/></argument_list></call></expr></argument>)<pos:position pos:line="11" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="55"/></expr_stmt>
    <if pos:line="12" pos:column="5">if <condition pos:line="12" pos:column="8">(<expr><name pos:line="12" pos:column="9">ret_ident<pos:position pos:line="12" pos:column="18"/></name> <operator pos:line="12" pos:column="19">!=<pos:position pos:line="12" pos:column="21"/></operator> <name pos:line="12" pos:column="22">NULL<pos:position pos:line="12" pos:column="26"/></name></expr>)<pos:position pos:line="12" pos:column="27"/></condition><then pos:line="12" pos:column="27">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="13" pos:column="7">free<pos:position pos:line="13" pos:column="11"/></name><argument_list pos:line="13" pos:column="11">(<argument><expr><name pos:line="13" pos:column="12">ret_ident<pos:position pos:line="13" pos:column="21"/></name></expr></argument>)<pos:position pos:line="13" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="23"/></expr_stmt></block></then></if>
    <return pos:line="14" pos:column="5">return <expr><operator pos:line="14" pos:column="12">(<pos:position pos:line="14" pos:column="13"/></operator><name pos:line="14" pos:column="13">RET_UNKNOWN<pos:position pos:line="14" pos:column="24"/></name><operator pos:line="14" pos:column="24">)<pos:position pos:line="14" pos:column="25"/></operator></expr>;<pos:position pos:line="14" pos:column="26"/></return>
  }<pos:position pos:line="15" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="17" pos:column="3">status<pos:position pos:line="17" pos:column="9"/></name> <operator pos:line="17" pos:column="10">=<pos:position pos:line="17" pos:column="11"/></operator> <call><name pos:line="17" pos:column="12">lcc_sort_identifiers<pos:position pos:line="17" pos:column="32"/></name><argument_list pos:line="17" pos:column="32">(<argument><expr><name pos:line="17" pos:column="33">connection<pos:position pos:line="17" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="45">ret_ident<pos:position pos:line="17" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="56">ret_ident_num<pos:position pos:line="17" pos:column="69"/></name></expr></argument>)<pos:position pos:line="17" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="71"/></expr_stmt>
  <if pos:line="18" pos:column="3">if <condition pos:line="18" pos:column="6">(<expr><name pos:line="18" pos:column="7">status<pos:position pos:line="18" pos:column="13"/></name> <operator pos:line="18" pos:column="14">!=<pos:position pos:line="18" pos:column="16"/></operator> <literal type="number" pos:line="18" pos:column="17">0<pos:position pos:line="18" pos:column="18"/></literal></expr>)<pos:position pos:line="18" pos:column="19"/></condition><then pos:line="18" pos:column="19"> <block pos:line="18" pos:column="20">{
    <expr_stmt><expr><call><name pos:line="19" pos:column="5">printf<pos:position pos:line="19" pos:column="11"/></name><argument_list pos:line="19" pos:column="11">(<argument><expr><literal type="string" pos:line="19" pos:column="12">"UNKNOWN: %s\n"<pos:position pos:line="19" pos:column="27"/></literal></expr></argument>, <argument><expr><call><name pos:line="19" pos:column="29">lcc_strerror<pos:position pos:line="19" pos:column="41"/></name><argument_list pos:line="19" pos:column="41">(<argument><expr><name pos:line="19" pos:column="42">connection<pos:position pos:line="19" pos:column="52"/></name></expr></argument>)<pos:position pos:line="19" pos:column="53"/></argument_list></call></expr></argument>)<pos:position pos:line="19" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="55"/></expr_stmt>
    <if pos:line="20" pos:column="5">if <condition pos:line="20" pos:column="8">(<expr><name pos:line="20" pos:column="9">ret_ident<pos:position pos:line="20" pos:column="18"/></name> <operator pos:line="20" pos:column="19">!=<pos:position pos:line="20" pos:column="21"/></operator> <name pos:line="20" pos:column="22">NULL<pos:position pos:line="20" pos:column="26"/></name></expr>)<pos:position pos:line="20" pos:column="27"/></condition><then pos:line="20" pos:column="27">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="21" pos:column="7">free<pos:position pos:line="21" pos:column="11"/></name><argument_list pos:line="21" pos:column="11">(<argument><expr><name pos:line="21" pos:column="12">ret_ident<pos:position pos:line="21" pos:column="21"/></name></expr></argument>)<pos:position pos:line="21" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="23"/></expr_stmt></block></then></if>
    <return pos:line="22" pos:column="5">return <expr><operator pos:line="22" pos:column="12">(<pos:position pos:line="22" pos:column="13"/></operator><name pos:line="22" pos:column="13">RET_UNKNOWN<pos:position pos:line="22" pos:column="24"/></name><operator pos:line="22" pos:column="24">)<pos:position pos:line="22" pos:column="25"/></operator></expr>;<pos:position pos:line="22" pos:column="26"/></return>
  }<pos:position pos:line="23" pos:column="4"/></block></then></if>

  <for pos:line="25" pos:column="3">for <control pos:line="25" pos:column="7">(<init><decl><type><name pos:line="25" pos:column="8">size_t<pos:position pos:line="25" pos:column="14"/></name></type> <name pos:line="25" pos:column="15">i<pos:position pos:line="25" pos:column="16"/></name> <init pos:line="25" pos:column="17">= <expr><literal type="number" pos:line="25" pos:column="19">0<pos:position pos:line="25" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="25" pos:column="21"/></init> <condition><expr><name pos:line="25" pos:column="22">i<pos:position pos:line="25" pos:column="23"/></name> <operator pos:line="25" pos:column="24">&lt;<pos:position pos:line="25" pos:column="28"/></operator> <name pos:line="25" pos:column="26">ret_ident_num<pos:position pos:line="25" pos:column="39"/></name></expr>;<pos:position pos:line="25" pos:column="40"/></condition> <incr><expr><operator pos:line="25" pos:column="41">++<pos:position pos:line="25" pos:column="43"/></operator><name pos:line="25" pos:column="43">i<pos:position pos:line="25" pos:column="44"/></name></expr></incr>)<pos:position pos:line="25" pos:column="45"/></control> <block pos:line="25" pos:column="46">{
    <decl_stmt><decl><type><name pos:line="26" pos:column="5">char<pos:position pos:line="26" pos:column="9"/></name></type> <name><name pos:line="26" pos:column="10">id<pos:position pos:line="26" pos:column="12"/></name><index pos:line="26" pos:column="12">[<expr><literal type="number" pos:line="26" pos:column="13">1024<pos:position pos:line="26" pos:column="17"/></literal></expr>]<pos:position pos:line="26" pos:column="18"/></index></name></decl>;<pos:position pos:line="26" pos:column="19"/></decl_stmt>

    <if pos:line="28" pos:column="5">if <condition pos:line="28" pos:column="8">(<expr><operator pos:line="28" pos:column="9">(<pos:position pos:line="28" pos:column="10"/></operator><name pos:line="28" pos:column="10">hostname_g<pos:position pos:line="28" pos:column="20"/></name> <operator pos:line="28" pos:column="21">!=<pos:position pos:line="28" pos:column="23"/></operator> <name pos:line="28" pos:column="24">NULL<pos:position pos:line="28" pos:column="28"/></name><operator pos:line="28" pos:column="28">)<pos:position pos:line="28" pos:column="29"/></operator> <operator pos:line="28" pos:column="30">&amp;&amp;<pos:position pos:line="28" pos:column="40"/></operator> <operator pos:line="28" pos:column="33">(<pos:position pos:line="28" pos:column="34"/></operator><call><name pos:line="28" pos:column="34">strcasecmp<pos:position pos:line="28" pos:column="44"/></name><argument_list pos:line="28" pos:column="44">(<argument><expr><name pos:line="28" pos:column="45">hostname_g<pos:position pos:line="28" pos:column="55"/></name></expr></argument>, <argument><expr><name><name pos:line="28" pos:column="57">ret_ident<pos:position pos:line="28" pos:column="66"/></name><index pos:line="28" pos:column="66">[<expr><name pos:line="28" pos:column="67">i<pos:position pos:line="28" pos:column="68"/></name></expr>]<pos:position pos:line="28" pos:column="69"/></index></name><operator pos:line="28" pos:column="69">.<pos:position pos:line="28" pos:column="70"/></operator><name pos:line="28" pos:column="70">host<pos:position pos:line="28" pos:column="74"/></name></expr></argument>)<pos:position pos:line="28" pos:column="75"/></argument_list></call><operator pos:line="28" pos:column="75">)<pos:position pos:line="28" pos:column="76"/></operator></expr>)<pos:position pos:line="28" pos:column="77"/></condition><then pos:line="28" pos:column="77">
      <block type="pseudo"><continue pos:line="29" pos:column="7">continue;<pos:position pos:line="29" pos:column="16"/></continue></block></then></if>

    <if pos:line="31" pos:column="5">if <condition pos:line="31" pos:column="8">(<expr><operator pos:line="31" pos:column="9">(<pos:position pos:line="31" pos:column="10"/></operator><name pos:line="31" pos:column="10">hostname<pos:position pos:line="31" pos:column="18"/></name> <operator pos:line="31" pos:column="19">==<pos:position pos:line="31" pos:column="21"/></operator> <name pos:line="31" pos:column="22">NULL<pos:position pos:line="31" pos:column="26"/></name><operator pos:line="31" pos:column="26">)<pos:position pos:line="31" pos:column="27"/></operator> <operator pos:line="31" pos:column="28">||<pos:position pos:line="31" pos:column="30"/></operator> <call><name pos:line="31" pos:column="31">strcasecmp<pos:position pos:line="31" pos:column="41"/></name><argument_list pos:line="31" pos:column="41">(<argument><expr><name pos:line="31" pos:column="42">hostname<pos:position pos:line="31" pos:column="50"/></name></expr></argument>, <argument><expr><name><name pos:line="31" pos:column="52">ret_ident<pos:position pos:line="31" pos:column="61"/></name><index pos:line="31" pos:column="61">[<expr><name pos:line="31" pos:column="62">i<pos:position pos:line="31" pos:column="63"/></name></expr>]<pos:position pos:line="31" pos:column="64"/></index></name><operator pos:line="31" pos:column="64">.<pos:position pos:line="31" pos:column="65"/></operator><name pos:line="31" pos:column="65">host<pos:position pos:line="31" pos:column="69"/></name></expr></argument>)<pos:position pos:line="31" pos:column="70"/></argument_list></call></expr>)<pos:position pos:line="31" pos:column="71"/></condition><then pos:line="31" pos:column="71"> <block pos:line="31" pos:column="72">{
      <expr_stmt><expr><call><name pos:line="32" pos:column="7">free<pos:position pos:line="32" pos:column="11"/></name><argument_list pos:line="32" pos:column="11">(<argument><expr><name pos:line="32" pos:column="12">hostname<pos:position pos:line="32" pos:column="20"/></name></expr></argument>)<pos:position pos:line="32" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="22"/></expr_stmt>
      <expr_stmt><expr><name pos:line="33" pos:column="7">hostname<pos:position pos:line="33" pos:column="15"/></name> <operator pos:line="33" pos:column="16">=<pos:position pos:line="33" pos:column="17"/></operator> <call><name pos:line="33" pos:column="18">strdup<pos:position pos:line="33" pos:column="24"/></name><argument_list pos:line="33" pos:column="24">(<argument><expr><name><name pos:line="33" pos:column="25">ret_ident<pos:position pos:line="33" pos:column="34"/></name><index pos:line="33" pos:column="34">[<expr><name pos:line="33" pos:column="35">i<pos:position pos:line="33" pos:column="36"/></name></expr>]<pos:position pos:line="33" pos:column="37"/></index></name><operator pos:line="33" pos:column="37">.<pos:position pos:line="33" pos:column="38"/></operator><name pos:line="33" pos:column="38">host<pos:position pos:line="33" pos:column="42"/></name></expr></argument>)<pos:position pos:line="33" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="44"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="34" pos:column="7">printf<pos:position pos:line="34" pos:column="13"/></name><argument_list pos:line="34" pos:column="13">(<argument><expr><literal type="string" pos:line="34" pos:column="14">"Host: %s\n"<pos:position pos:line="34" pos:column="26"/></literal></expr></argument>, <argument><expr><name pos:line="34" pos:column="28">hostname<pos:position pos:line="34" pos:column="36"/></name></expr></argument>)<pos:position pos:line="34" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="38"/></expr_stmt>
    }<pos:position pos:line="35" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="37" pos:column="5">/* empty hostname; not to be printed again */</comment>
    <expr_stmt><expr><name><name pos:line="38" pos:column="5">ret_ident<pos:position pos:line="38" pos:column="14"/></name><index pos:line="38" pos:column="14">[<expr><name pos:line="38" pos:column="15">i<pos:position pos:line="38" pos:column="16"/></name></expr>]<pos:position pos:line="38" pos:column="17"/></index></name><operator pos:line="38" pos:column="17">.<pos:position pos:line="38" pos:column="18"/></operator><name><name pos:line="38" pos:column="18">host<pos:position pos:line="38" pos:column="22"/></name><index pos:line="38" pos:column="22">[<expr><literal type="number" pos:line="38" pos:column="23">0<pos:position pos:line="38" pos:column="24"/></literal></expr>]<pos:position pos:line="38" pos:column="25"/></index></name> <operator pos:line="38" pos:column="26">=<pos:position pos:line="38" pos:column="27"/></operator> <literal type="char" pos:line="38" pos:column="28">'\0'<pos:position pos:line="38" pos:column="32"/></literal></expr>;<pos:position pos:line="38" pos:column="33"/></expr_stmt>

    <expr_stmt><expr><name pos:line="40" pos:column="5">status<pos:position pos:line="40" pos:column="11"/></name> <operator pos:line="40" pos:column="12">=<pos:position pos:line="40" pos:column="13"/></operator>
        <call><name pos:line="41" pos:column="9">lcc_identifier_to_string<pos:position pos:line="41" pos:column="33"/></name><argument_list pos:line="41" pos:column="33">(<argument><expr><name pos:line="41" pos:column="34">connection<pos:position pos:line="41" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="46">id<pos:position pos:line="41" pos:column="48"/></name></expr></argument>, <argument><expr><sizeof pos:line="41" pos:column="50">sizeof<argument_list pos:line="41" pos:column="56">(<argument><expr><name pos:line="41" pos:column="57">id<pos:position pos:line="41" pos:column="59"/></name></expr></argument>)<pos:position pos:line="41" pos:column="60"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="41" pos:column="62">ret_ident<pos:position pos:line="41" pos:column="71"/></name> <operator pos:line="41" pos:column="72">+<pos:position pos:line="41" pos:column="73"/></operator> <name pos:line="41" pos:column="74">i<pos:position pos:line="41" pos:column="75"/></name></expr></argument>)<pos:position pos:line="41" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="77"/></expr_stmt>
    <if pos:line="42" pos:column="5">if <condition pos:line="42" pos:column="8">(<expr><name pos:line="42" pos:column="9">status<pos:position pos:line="42" pos:column="15"/></name> <operator pos:line="42" pos:column="16">!=<pos:position pos:line="42" pos:column="18"/></operator> <literal type="number" pos:line="42" pos:column="19">0<pos:position pos:line="42" pos:column="20"/></literal></expr>)<pos:position pos:line="42" pos:column="21"/></condition><then pos:line="42" pos:column="21"> <block pos:line="42" pos:column="22">{
      <expr_stmt><expr><call><name pos:line="43" pos:column="7">printf<pos:position pos:line="43" pos:column="13"/></name><argument_list pos:line="43" pos:column="13">(<argument><expr><literal type="string" pos:line="43" pos:column="14">"ERROR: listval: Failed to convert returned "<pos:position pos:line="43" pos:column="59"/></literal>
             <literal type="string" pos:line="44" pos:column="14">"identifier to a string: %s\n"<pos:position pos:line="44" pos:column="44"/></literal></expr></argument>,
             <argument><expr><call><name pos:line="45" pos:column="14">lcc_strerror<pos:position pos:line="45" pos:column="26"/></name><argument_list pos:line="45" pos:column="26">(<argument><expr><name pos:line="45" pos:column="27">connection<pos:position pos:line="45" pos:column="37"/></name></expr></argument>)<pos:position pos:line="45" pos:column="38"/></argument_list></call></expr></argument>)<pos:position pos:line="45" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="40"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="46" pos:column="7">free<pos:position pos:line="46" pos:column="11"/></name><argument_list pos:line="46" pos:column="11">(<argument><expr><name pos:line="46" pos:column="12">hostname<pos:position pos:line="46" pos:column="20"/></name></expr></argument>)<pos:position pos:line="46" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="22"/></expr_stmt>
      <expr_stmt><expr><name pos:line="47" pos:column="7">hostname<pos:position pos:line="47" pos:column="15"/></name> <operator pos:line="47" pos:column="16">=<pos:position pos:line="47" pos:column="17"/></operator> <name pos:line="47" pos:column="18">NULL<pos:position pos:line="47" pos:column="22"/></name></expr>;<pos:position pos:line="47" pos:column="23"/></expr_stmt>
      <continue pos:line="48" pos:column="7">continue;<pos:position pos:line="48" pos:column="16"/></continue>
    }<pos:position pos:line="49" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="51" pos:column="5">/* skip over the (empty) hostname and following '/' */</comment>
    <expr_stmt><expr><call><name pos:line="52" pos:column="5">printf<pos:position pos:line="52" pos:column="11"/></name><argument_list pos:line="52" pos:column="11">(<argument><expr><literal type="string" pos:line="52" pos:column="12">"\t%s\n"<pos:position pos:line="52" pos:column="20"/></literal></expr></argument>, <argument><expr><name pos:line="52" pos:column="22">id<pos:position pos:line="52" pos:column="24"/></name> <operator pos:line="52" pos:column="25">+<pos:position pos:line="52" pos:column="26"/></operator> <literal type="number" pos:line="52" pos:column="27">1<pos:position pos:line="52" pos:column="28"/></literal></expr></argument>)<pos:position pos:line="52" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="30"/></expr_stmt>
  }<pos:position pos:line="53" pos:column="4"/></block></for>

  <expr_stmt><expr><call><name pos:line="55" pos:column="3">free<pos:position pos:line="55" pos:column="7"/></name><argument_list pos:line="55" pos:column="7">(<argument><expr><name pos:line="55" pos:column="8">ret_ident<pos:position pos:line="55" pos:column="17"/></name></expr></argument>)<pos:position pos:line="55" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="19"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="56" pos:column="3">free<pos:position pos:line="56" pos:column="7"/></name><argument_list pos:line="56" pos:column="7">(<argument><expr><name pos:line="56" pos:column="8">hostname<pos:position pos:line="56" pos:column="16"/></name></expr></argument>)<pos:position pos:line="56" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="18"/></expr_stmt>
  <return pos:line="57" pos:column="3">return <expr><operator pos:line="57" pos:column="10">(<pos:position pos:line="57" pos:column="11"/></operator><name pos:line="57" pos:column="11">RET_OKAY<pos:position pos:line="57" pos:column="19"/></name><operator pos:line="57" pos:column="19">)<pos:position pos:line="57" pos:column="20"/></operator></expr>;<pos:position pos:line="57" pos:column="21"/></return>
}<pos:position pos:line="58" pos:column="2"/></block></function></unit>
