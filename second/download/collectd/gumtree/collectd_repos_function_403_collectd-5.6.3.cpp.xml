<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_403_collectd-5.6.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name> <modifier pos:line="1" pos:column="13">*<pos:position pos:line="1" pos:column="14"/></modifier></type><name pos:line="1" pos:column="14">us_handle_client<pos:position pos:line="1" pos:column="30"/></name><parameter_list pos:line="1" pos:column="30">(<parameter><decl><type><name pos:line="1" pos:column="31">void<pos:position pos:line="1" pos:column="35"/></name> <modifier pos:line="1" pos:column="36">*<pos:position pos:line="1" pos:column="37"/></modifier></type><name pos:line="1" pos:column="37">arg<pos:position pos:line="1" pos:column="40"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="41"/></parameter_list> <block pos:line="1" pos:column="42">{
  <decl_stmt><decl><type><name pos:line="2" pos:column="3">int<pos:position pos:line="2" pos:column="6"/></name></type> <name pos:line="2" pos:column="7">fdin<pos:position pos:line="2" pos:column="11"/></name></decl>;<pos:position pos:line="2" pos:column="12"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">int<pos:position pos:line="3" pos:column="6"/></name></type> <name pos:line="3" pos:column="7">fdout<pos:position pos:line="3" pos:column="12"/></name></decl>;<pos:position pos:line="3" pos:column="13"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">FILE<pos:position pos:line="4" pos:column="7"/></name> <modifier pos:line="4" pos:column="8">*<pos:position pos:line="4" pos:column="9"/></modifier></type><name pos:line="4" pos:column="9">fhin<pos:position pos:line="4" pos:column="13"/></name></decl>, <modifier pos:line="4" pos:column="15">*<pos:position pos:line="4" pos:column="16"/></modifier><decl><type ref="prev"/><name pos:line="4" pos:column="16">fhout<pos:position pos:line="4" pos:column="21"/></name></decl>;<pos:position pos:line="4" pos:column="22"/></decl_stmt>

  <expr_stmt><expr><name pos:line="6" pos:column="3">fdin<pos:position pos:line="6" pos:column="7"/></name> <operator pos:line="6" pos:column="8">=<pos:position pos:line="6" pos:column="9"/></operator> <operator pos:line="6" pos:column="10">*<pos:position pos:line="6" pos:column="11"/></operator><operator pos:line="6" pos:column="11">(<pos:position pos:line="6" pos:column="12"/></operator><operator pos:line="6" pos:column="12">(<pos:position pos:line="6" pos:column="13"/></operator><name pos:line="6" pos:column="13">int<pos:position pos:line="6" pos:column="16"/></name> <operator pos:line="6" pos:column="17">*<pos:position pos:line="6" pos:column="18"/></operator><operator pos:line="6" pos:column="18">)<pos:position pos:line="6" pos:column="19"/></operator><name pos:line="6" pos:column="19">arg<pos:position pos:line="6" pos:column="22"/></name><operator pos:line="6" pos:column="22">)<pos:position pos:line="6" pos:column="23"/></operator></expr>;<pos:position pos:line="6" pos:column="24"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="7" pos:column="3">free<pos:position pos:line="7" pos:column="7"/></name><argument_list pos:line="7" pos:column="7">(<argument><expr><name pos:line="7" pos:column="8">arg<pos:position pos:line="7" pos:column="11"/></name></expr></argument>)<pos:position pos:line="7" pos:column="12"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="13"/></expr_stmt>
  <expr_stmt><expr><name pos:line="8" pos:column="3">arg<pos:position pos:line="8" pos:column="6"/></name> <operator pos:line="8" pos:column="7">=<pos:position pos:line="8" pos:column="8"/></operator> <name pos:line="8" pos:column="9">NULL<pos:position pos:line="8" pos:column="13"/></name></expr>;<pos:position pos:line="8" pos:column="14"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="10" pos:column="3">DEBUG<pos:position pos:line="10" pos:column="8"/></name><argument_list pos:line="10" pos:column="8">(<argument><expr><literal type="string" pos:line="10" pos:column="9">"unixsock plugin: us_handle_client: Reading from fd #%i"<pos:position pos:line="10" pos:column="65"/></literal></expr></argument>, <argument><expr><name pos:line="10" pos:column="67">fdin<pos:position pos:line="10" pos:column="71"/></name></expr></argument>)<pos:position pos:line="10" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="73"/></expr_stmt>

  <expr_stmt><expr><name pos:line="12" pos:column="3">fdout<pos:position pos:line="12" pos:column="8"/></name> <operator pos:line="12" pos:column="9">=<pos:position pos:line="12" pos:column="10"/></operator> <call><name pos:line="12" pos:column="11">dup<pos:position pos:line="12" pos:column="14"/></name><argument_list pos:line="12" pos:column="14">(<argument><expr><name pos:line="12" pos:column="15">fdin<pos:position pos:line="12" pos:column="19"/></name></expr></argument>)<pos:position pos:line="12" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="21"/></expr_stmt>
  <if pos:line="13" pos:column="3">if <condition pos:line="13" pos:column="6">(<expr><name pos:line="13" pos:column="7">fdout<pos:position pos:line="13" pos:column="12"/></name> <operator pos:line="13" pos:column="13">&lt;<pos:position pos:line="13" pos:column="17"/></operator> <literal type="number" pos:line="13" pos:column="15">0<pos:position pos:line="13" pos:column="16"/></literal></expr>)<pos:position pos:line="13" pos:column="17"/></condition><then pos:line="13" pos:column="17"> <block pos:line="13" pos:column="18">{
    <decl_stmt><decl><type><name pos:line="14" pos:column="5">char<pos:position pos:line="14" pos:column="9"/></name></type> <name><name pos:line="14" pos:column="10">errbuf<pos:position pos:line="14" pos:column="16"/></name><index pos:line="14" pos:column="16">[<expr><literal type="number" pos:line="14" pos:column="17">1024<pos:position pos:line="14" pos:column="21"/></literal></expr>]<pos:position pos:line="14" pos:column="22"/></index></name></decl>;<pos:position pos:line="14" pos:column="23"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="15" pos:column="5">ERROR<pos:position pos:line="15" pos:column="10"/></name><argument_list pos:line="15" pos:column="10">(<argument><expr><literal type="string" pos:line="15" pos:column="11">"unixsock plugin: dup failed: %s"<pos:position pos:line="15" pos:column="44"/></literal></expr></argument>,
          <argument><expr><call><name pos:line="16" pos:column="11">sstrerror<pos:position pos:line="16" pos:column="20"/></name><argument_list pos:line="16" pos:column="20">(<argument><expr><name pos:line="16" pos:column="21">errno<pos:position pos:line="16" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="28">errbuf<pos:position pos:line="16" pos:column="34"/></name></expr></argument>, <argument><expr><sizeof pos:line="16" pos:column="36">sizeof<argument_list pos:line="16" pos:column="42">(<argument><expr><name pos:line="16" pos:column="43">errbuf<pos:position pos:line="16" pos:column="49"/></name></expr></argument>)<pos:position pos:line="16" pos:column="50"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="16" pos:column="51"/></argument_list></call></expr></argument>)<pos:position pos:line="16" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="53"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="17" pos:column="5">close<pos:position pos:line="17" pos:column="10"/></name><argument_list pos:line="17" pos:column="10">(<argument><expr><name pos:line="17" pos:column="11">fdin<pos:position pos:line="17" pos:column="15"/></name></expr></argument>)<pos:position pos:line="17" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="17"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="18" pos:column="5">pthread_exit<pos:position pos:line="18" pos:column="17"/></name><argument_list pos:line="18" pos:column="17">(<argument><expr><operator pos:line="18" pos:column="18">(<pos:position pos:line="18" pos:column="19"/></operator><name pos:line="18" pos:column="19">void<pos:position pos:line="18" pos:column="23"/></name> <operator pos:line="18" pos:column="24">*<pos:position pos:line="18" pos:column="25"/></operator><operator pos:line="18" pos:column="25">)<pos:position pos:line="18" pos:column="26"/></operator><literal type="number" pos:line="18" pos:column="26">1<pos:position pos:line="18" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="29"/></expr_stmt>
  }<pos:position pos:line="19" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="21" pos:column="3">fhin<pos:position pos:line="21" pos:column="7"/></name> <operator pos:line="21" pos:column="8">=<pos:position pos:line="21" pos:column="9"/></operator> <call><name pos:line="21" pos:column="10">fdopen<pos:position pos:line="21" pos:column="16"/></name><argument_list pos:line="21" pos:column="16">(<argument><expr><name pos:line="21" pos:column="17">fdin<pos:position pos:line="21" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="21" pos:column="23">"r"<pos:position pos:line="21" pos:column="26"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="28"/></expr_stmt>
  <if pos:line="22" pos:column="3">if <condition pos:line="22" pos:column="6">(<expr><name pos:line="22" pos:column="7">fhin<pos:position pos:line="22" pos:column="11"/></name> <operator pos:line="22" pos:column="12">==<pos:position pos:line="22" pos:column="14"/></operator> <name pos:line="22" pos:column="15">NULL<pos:position pos:line="22" pos:column="19"/></name></expr>)<pos:position pos:line="22" pos:column="20"/></condition><then pos:line="22" pos:column="20"> <block pos:line="22" pos:column="21">{
    <decl_stmt><decl><type><name pos:line="23" pos:column="5">char<pos:position pos:line="23" pos:column="9"/></name></type> <name><name pos:line="23" pos:column="10">errbuf<pos:position pos:line="23" pos:column="16"/></name><index pos:line="23" pos:column="16">[<expr><literal type="number" pos:line="23" pos:column="17">1024<pos:position pos:line="23" pos:column="21"/></literal></expr>]<pos:position pos:line="23" pos:column="22"/></index></name></decl>;<pos:position pos:line="23" pos:column="23"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="24" pos:column="5">ERROR<pos:position pos:line="24" pos:column="10"/></name><argument_list pos:line="24" pos:column="10">(<argument><expr><literal type="string" pos:line="24" pos:column="11">"unixsock plugin: fdopen failed: %s"<pos:position pos:line="24" pos:column="47"/></literal></expr></argument>,
          <argument><expr><call><name pos:line="25" pos:column="11">sstrerror<pos:position pos:line="25" pos:column="20"/></name><argument_list pos:line="25" pos:column="20">(<argument><expr><name pos:line="25" pos:column="21">errno<pos:position pos:line="25" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="28">errbuf<pos:position pos:line="25" pos:column="34"/></name></expr></argument>, <argument><expr><sizeof pos:line="25" pos:column="36">sizeof<argument_list pos:line="25" pos:column="42">(<argument><expr><name pos:line="25" pos:column="43">errbuf<pos:position pos:line="25" pos:column="49"/></name></expr></argument>)<pos:position pos:line="25" pos:column="50"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="25" pos:column="51"/></argument_list></call></expr></argument>)<pos:position pos:line="25" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="53"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="26" pos:column="5">close<pos:position pos:line="26" pos:column="10"/></name><argument_list pos:line="26" pos:column="10">(<argument><expr><name pos:line="26" pos:column="11">fdin<pos:position pos:line="26" pos:column="15"/></name></expr></argument>)<pos:position pos:line="26" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="17"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="27" pos:column="5">close<pos:position pos:line="27" pos:column="10"/></name><argument_list pos:line="27" pos:column="10">(<argument><expr><name pos:line="27" pos:column="11">fdout<pos:position pos:line="27" pos:column="16"/></name></expr></argument>)<pos:position pos:line="27" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="18"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="28" pos:column="5">pthread_exit<pos:position pos:line="28" pos:column="17"/></name><argument_list pos:line="28" pos:column="17">(<argument><expr><operator pos:line="28" pos:column="18">(<pos:position pos:line="28" pos:column="19"/></operator><name pos:line="28" pos:column="19">void<pos:position pos:line="28" pos:column="23"/></name> <operator pos:line="28" pos:column="24">*<pos:position pos:line="28" pos:column="25"/></operator><operator pos:line="28" pos:column="25">)<pos:position pos:line="28" pos:column="26"/></operator><literal type="number" pos:line="28" pos:column="26">1<pos:position pos:line="28" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="29"/></expr_stmt>
    <return pos:line="29" pos:column="5">return <expr><operator pos:line="29" pos:column="12">(<pos:position pos:line="29" pos:column="13"/></operator><operator pos:line="29" pos:column="13">(<pos:position pos:line="29" pos:column="14"/></operator><name pos:line="29" pos:column="14">void<pos:position pos:line="29" pos:column="18"/></name> <operator pos:line="29" pos:column="19">*<pos:position pos:line="29" pos:column="20"/></operator><operator pos:line="29" pos:column="20">)<pos:position pos:line="29" pos:column="21"/></operator><literal type="number" pos:line="29" pos:column="21">1<pos:position pos:line="29" pos:column="22"/></literal><operator pos:line="29" pos:column="22">)<pos:position pos:line="29" pos:column="23"/></operator></expr>;<pos:position pos:line="29" pos:column="24"/></return>
  }<pos:position pos:line="30" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="32" pos:column="3">fhout<pos:position pos:line="32" pos:column="8"/></name> <operator pos:line="32" pos:column="9">=<pos:position pos:line="32" pos:column="10"/></operator> <call><name pos:line="32" pos:column="11">fdopen<pos:position pos:line="32" pos:column="17"/></name><argument_list pos:line="32" pos:column="17">(<argument><expr><name pos:line="32" pos:column="18">fdout<pos:position pos:line="32" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="32" pos:column="25">"w"<pos:position pos:line="32" pos:column="28"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="30"/></expr_stmt>
  <if pos:line="33" pos:column="3">if <condition pos:line="33" pos:column="6">(<expr><name pos:line="33" pos:column="7">fhout<pos:position pos:line="33" pos:column="12"/></name> <operator pos:line="33" pos:column="13">==<pos:position pos:line="33" pos:column="15"/></operator> <name pos:line="33" pos:column="16">NULL<pos:position pos:line="33" pos:column="20"/></name></expr>)<pos:position pos:line="33" pos:column="21"/></condition><then pos:line="33" pos:column="21"> <block pos:line="33" pos:column="22">{
    <decl_stmt><decl><type><name pos:line="34" pos:column="5">char<pos:position pos:line="34" pos:column="9"/></name></type> <name><name pos:line="34" pos:column="10">errbuf<pos:position pos:line="34" pos:column="16"/></name><index pos:line="34" pos:column="16">[<expr><literal type="number" pos:line="34" pos:column="17">1024<pos:position pos:line="34" pos:column="21"/></literal></expr>]<pos:position pos:line="34" pos:column="22"/></index></name></decl>;<pos:position pos:line="34" pos:column="23"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="35" pos:column="5">ERROR<pos:position pos:line="35" pos:column="10"/></name><argument_list pos:line="35" pos:column="10">(<argument><expr><literal type="string" pos:line="35" pos:column="11">"unixsock plugin: fdopen failed: %s"<pos:position pos:line="35" pos:column="47"/></literal></expr></argument>,
          <argument><expr><call><name pos:line="36" pos:column="11">sstrerror<pos:position pos:line="36" pos:column="20"/></name><argument_list pos:line="36" pos:column="20">(<argument><expr><name pos:line="36" pos:column="21">errno<pos:position pos:line="36" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="28">errbuf<pos:position pos:line="36" pos:column="34"/></name></expr></argument>, <argument><expr><sizeof pos:line="36" pos:column="36">sizeof<argument_list pos:line="36" pos:column="42">(<argument><expr><name pos:line="36" pos:column="43">errbuf<pos:position pos:line="36" pos:column="49"/></name></expr></argument>)<pos:position pos:line="36" pos:column="50"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="36" pos:column="51"/></argument_list></call></expr></argument>)<pos:position pos:line="36" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="53"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="37" pos:column="5">fclose<pos:position pos:line="37" pos:column="11"/></name><argument_list pos:line="37" pos:column="11">(<argument><expr><name pos:line="37" pos:column="12">fhin<pos:position pos:line="37" pos:column="16"/></name></expr></argument>)<pos:position pos:line="37" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="18"/></expr_stmt> <comment type="block" pos:line="37" pos:column="19">/* this closes fdin as well */</comment>
    <expr_stmt><expr><call><name pos:line="38" pos:column="5">close<pos:position pos:line="38" pos:column="10"/></name><argument_list pos:line="38" pos:column="10">(<argument><expr><name pos:line="38" pos:column="11">fdout<pos:position pos:line="38" pos:column="16"/></name></expr></argument>)<pos:position pos:line="38" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="18"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="39" pos:column="5">pthread_exit<pos:position pos:line="39" pos:column="17"/></name><argument_list pos:line="39" pos:column="17">(<argument><expr><operator pos:line="39" pos:column="18">(<pos:position pos:line="39" pos:column="19"/></operator><name pos:line="39" pos:column="19">void<pos:position pos:line="39" pos:column="23"/></name> <operator pos:line="39" pos:column="24">*<pos:position pos:line="39" pos:column="25"/></operator><operator pos:line="39" pos:column="25">)<pos:position pos:line="39" pos:column="26"/></operator><literal type="number" pos:line="39" pos:column="26">1<pos:position pos:line="39" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="39" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="29"/></expr_stmt>
    <return pos:line="40" pos:column="5">return <expr><operator pos:line="40" pos:column="12">(<pos:position pos:line="40" pos:column="13"/></operator><operator pos:line="40" pos:column="13">(<pos:position pos:line="40" pos:column="14"/></operator><name pos:line="40" pos:column="14">void<pos:position pos:line="40" pos:column="18"/></name> <operator pos:line="40" pos:column="19">*<pos:position pos:line="40" pos:column="20"/></operator><operator pos:line="40" pos:column="20">)<pos:position pos:line="40" pos:column="21"/></operator><literal type="number" pos:line="40" pos:column="21">1<pos:position pos:line="40" pos:column="22"/></literal><operator pos:line="40" pos:column="22">)<pos:position pos:line="40" pos:column="23"/></operator></expr>;<pos:position pos:line="40" pos:column="24"/></return>
  }<pos:position pos:line="41" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="43" pos:column="3">/* change output buffer to line buffered mode */</comment>
  <if pos:line="44" pos:column="3">if <condition pos:line="44" pos:column="6">(<expr><call><name pos:line="44" pos:column="7">setvbuf<pos:position pos:line="44" pos:column="14"/></name><argument_list pos:line="44" pos:column="14">(<argument><expr><name pos:line="44" pos:column="15">fhout<pos:position pos:line="44" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="22">NULL<pos:position pos:line="44" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="28">_IOLBF<pos:position pos:line="44" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="44" pos:column="36">0<pos:position pos:line="44" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="44" pos:column="38"/></argument_list></call> <operator pos:line="44" pos:column="39">!=<pos:position pos:line="44" pos:column="41"/></operator> <literal type="number" pos:line="44" pos:column="42">0<pos:position pos:line="44" pos:column="43"/></literal></expr>)<pos:position pos:line="44" pos:column="44"/></condition><then pos:line="44" pos:column="44"> <block pos:line="44" pos:column="45">{
    <decl_stmt><decl><type><name pos:line="45" pos:column="5">char<pos:position pos:line="45" pos:column="9"/></name></type> <name><name pos:line="45" pos:column="10">errbuf<pos:position pos:line="45" pos:column="16"/></name><index pos:line="45" pos:column="16">[<expr><literal type="number" pos:line="45" pos:column="17">1024<pos:position pos:line="45" pos:column="21"/></literal></expr>]<pos:position pos:line="45" pos:column="22"/></index></name></decl>;<pos:position pos:line="45" pos:column="23"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="46" pos:column="5">ERROR<pos:position pos:line="46" pos:column="10"/></name><argument_list pos:line="46" pos:column="10">(<argument><expr><literal type="string" pos:line="46" pos:column="11">"unixsock plugin: setvbuf failed: %s"<pos:position pos:line="46" pos:column="48"/></literal></expr></argument>,
          <argument><expr><call><name pos:line="47" pos:column="11">sstrerror<pos:position pos:line="47" pos:column="20"/></name><argument_list pos:line="47" pos:column="20">(<argument><expr><name pos:line="47" pos:column="21">errno<pos:position pos:line="47" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="28">errbuf<pos:position pos:line="47" pos:column="34"/></name></expr></argument>, <argument><expr><sizeof pos:line="47" pos:column="36">sizeof<argument_list pos:line="47" pos:column="42">(<argument><expr><name pos:line="47" pos:column="43">errbuf<pos:position pos:line="47" pos:column="49"/></name></expr></argument>)<pos:position pos:line="47" pos:column="50"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="47" pos:column="51"/></argument_list></call></expr></argument>)<pos:position pos:line="47" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="53"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="48" pos:column="5">fclose<pos:position pos:line="48" pos:column="11"/></name><argument_list pos:line="48" pos:column="11">(<argument><expr><name pos:line="48" pos:column="12">fhin<pos:position pos:line="48" pos:column="16"/></name></expr></argument>)<pos:position pos:line="48" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="18"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="49" pos:column="5">fclose<pos:position pos:line="49" pos:column="11"/></name><argument_list pos:line="49" pos:column="11">(<argument><expr><name pos:line="49" pos:column="12">fhout<pos:position pos:line="49" pos:column="17"/></name></expr></argument>)<pos:position pos:line="49" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="19"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="50" pos:column="5">pthread_exit<pos:position pos:line="50" pos:column="17"/></name><argument_list pos:line="50" pos:column="17">(<argument><expr><operator pos:line="50" pos:column="18">(<pos:position pos:line="50" pos:column="19"/></operator><name pos:line="50" pos:column="19">void<pos:position pos:line="50" pos:column="23"/></name> <operator pos:line="50" pos:column="24">*<pos:position pos:line="50" pos:column="25"/></operator><operator pos:line="50" pos:column="25">)<pos:position pos:line="50" pos:column="26"/></operator><literal type="number" pos:line="50" pos:column="26">1<pos:position pos:line="50" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="50" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="29"/></expr_stmt>
    <return pos:line="51" pos:column="5">return <expr><operator pos:line="51" pos:column="12">(<pos:position pos:line="51" pos:column="13"/></operator><operator pos:line="51" pos:column="13">(<pos:position pos:line="51" pos:column="14"/></operator><name pos:line="51" pos:column="14">void<pos:position pos:line="51" pos:column="18"/></name> <operator pos:line="51" pos:column="19">*<pos:position pos:line="51" pos:column="20"/></operator><operator pos:line="51" pos:column="20">)<pos:position pos:line="51" pos:column="21"/></operator><literal type="number" pos:line="51" pos:column="21">0<pos:position pos:line="51" pos:column="22"/></literal><operator pos:line="51" pos:column="22">)<pos:position pos:line="51" pos:column="23"/></operator></expr>;<pos:position pos:line="51" pos:column="24"/></return>
  }<pos:position pos:line="52" pos:column="4"/></block></then></if>

  <while pos:line="54" pos:column="3">while <condition pos:line="54" pos:column="9">(<expr><literal type="number" pos:line="54" pos:column="10">42<pos:position pos:line="54" pos:column="12"/></literal></expr>)<pos:position pos:line="54" pos:column="13"/></condition> <block pos:line="54" pos:column="14">{
    <decl_stmt><decl><type><name pos:line="55" pos:column="5">char<pos:position pos:line="55" pos:column="9"/></name></type> <name><name pos:line="55" pos:column="10">buffer<pos:position pos:line="55" pos:column="16"/></name><index pos:line="55" pos:column="16">[<expr><literal type="number" pos:line="55" pos:column="17">1024<pos:position pos:line="55" pos:column="21"/></literal></expr>]<pos:position pos:line="55" pos:column="22"/></index></name></decl>;<pos:position pos:line="55" pos:column="23"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="56" pos:column="5">char<pos:position pos:line="56" pos:column="9"/></name></type> <name><name pos:line="56" pos:column="10">buffer_copy<pos:position pos:line="56" pos:column="21"/></name><index pos:line="56" pos:column="21">[<expr><literal type="number" pos:line="56" pos:column="22">1024<pos:position pos:line="56" pos:column="26"/></literal></expr>]<pos:position pos:line="56" pos:column="27"/></index></name></decl>;<pos:position pos:line="56" pos:column="28"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="57" pos:column="5">char<pos:position pos:line="57" pos:column="9"/></name> <modifier pos:line="57" pos:column="10">*<pos:position pos:line="57" pos:column="11"/></modifier></type><name><name pos:line="57" pos:column="11">fields<pos:position pos:line="57" pos:column="17"/></name><index pos:line="57" pos:column="17">[<expr><literal type="number" pos:line="57" pos:column="18">128<pos:position pos:line="57" pos:column="21"/></literal></expr>]<pos:position pos:line="57" pos:column="22"/></index></name></decl>;<pos:position pos:line="57" pos:column="23"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="58" pos:column="5">int<pos:position pos:line="58" pos:column="8"/></name></type> <name pos:line="58" pos:column="9">fields_num<pos:position pos:line="58" pos:column="19"/></name></decl>;<pos:position pos:line="58" pos:column="20"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="59" pos:column="5">int<pos:position pos:line="59" pos:column="8"/></name></type> <name pos:line="59" pos:column="9">len<pos:position pos:line="59" pos:column="12"/></name></decl>;<pos:position pos:line="59" pos:column="13"/></decl_stmt>

    <expr_stmt><expr><name pos:line="61" pos:column="5">errno<pos:position pos:line="61" pos:column="10"/></name> <operator pos:line="61" pos:column="11">=<pos:position pos:line="61" pos:column="12"/></operator> <literal type="number" pos:line="61" pos:column="13">0<pos:position pos:line="61" pos:column="14"/></literal></expr>;<pos:position pos:line="61" pos:column="15"/></expr_stmt>
    <if pos:line="62" pos:column="5">if <condition pos:line="62" pos:column="8">(<expr><call><name pos:line="62" pos:column="9">fgets<pos:position pos:line="62" pos:column="14"/></name><argument_list pos:line="62" pos:column="14">(<argument><expr><name pos:line="62" pos:column="15">buffer<pos:position pos:line="62" pos:column="21"/></name></expr></argument>, <argument><expr><sizeof pos:line="62" pos:column="23">sizeof<argument_list pos:line="62" pos:column="29">(<argument><expr><name pos:line="62" pos:column="30">buffer<pos:position pos:line="62" pos:column="36"/></name></expr></argument>)<pos:position pos:line="62" pos:column="37"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="62" pos:column="39">fhin<pos:position pos:line="62" pos:column="43"/></name></expr></argument>)<pos:position pos:line="62" pos:column="44"/></argument_list></call> <operator pos:line="62" pos:column="45">==<pos:position pos:line="62" pos:column="47"/></operator> <name pos:line="62" pos:column="48">NULL<pos:position pos:line="62" pos:column="52"/></name></expr>)<pos:position pos:line="62" pos:column="53"/></condition><then pos:line="62" pos:column="53"> <block pos:line="62" pos:column="54">{
      <if pos:line="63" pos:column="7">if <condition pos:line="63" pos:column="10">(<expr><operator pos:line="63" pos:column="11">(<pos:position pos:line="63" pos:column="12"/></operator><name pos:line="63" pos:column="12">errno<pos:position pos:line="63" pos:column="17"/></name> <operator pos:line="63" pos:column="18">==<pos:position pos:line="63" pos:column="20"/></operator> <name pos:line="63" pos:column="21">EINTR<pos:position pos:line="63" pos:column="26"/></name><operator pos:line="63" pos:column="26">)<pos:position pos:line="63" pos:column="27"/></operator> <operator pos:line="63" pos:column="28">||<pos:position pos:line="63" pos:column="30"/></operator> <operator pos:line="63" pos:column="31">(<pos:position pos:line="63" pos:column="32"/></operator><name pos:line="63" pos:column="32">errno<pos:position pos:line="63" pos:column="37"/></name> <operator pos:line="63" pos:column="38">==<pos:position pos:line="63" pos:column="40"/></operator> <name pos:line="63" pos:column="41">EAGAIN<pos:position pos:line="63" pos:column="47"/></name><operator pos:line="63" pos:column="47">)<pos:position pos:line="63" pos:column="48"/></operator></expr>)<pos:position pos:line="63" pos:column="49"/></condition><then pos:line="63" pos:column="49">
        <block type="pseudo"><continue pos:line="64" pos:column="9">continue;<pos:position pos:line="64" pos:column="18"/></continue></block></then></if>

      <if pos:line="66" pos:column="7">if <condition pos:line="66" pos:column="10">(<expr><name pos:line="66" pos:column="11">errno<pos:position pos:line="66" pos:column="16"/></name> <operator pos:line="66" pos:column="17">!=<pos:position pos:line="66" pos:column="19"/></operator> <literal type="number" pos:line="66" pos:column="20">0<pos:position pos:line="66" pos:column="21"/></literal></expr>)<pos:position pos:line="66" pos:column="22"/></condition><then pos:line="66" pos:column="22"> <block pos:line="66" pos:column="23">{
        <decl_stmt><decl><type><name pos:line="67" pos:column="9">char<pos:position pos:line="67" pos:column="13"/></name></type> <name><name pos:line="67" pos:column="14">errbuf<pos:position pos:line="67" pos:column="20"/></name><index pos:line="67" pos:column="20">[<expr><literal type="number" pos:line="67" pos:column="21">1024<pos:position pos:line="67" pos:column="25"/></literal></expr>]<pos:position pos:line="67" pos:column="26"/></index></name></decl>;<pos:position pos:line="67" pos:column="27"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="68" pos:column="9">WARNING<pos:position pos:line="68" pos:column="16"/></name><argument_list pos:line="68" pos:column="16">(<argument><expr><literal type="string" pos:line="68" pos:column="17">"unixsock plugin: failed to read from socket #%i: %s"<pos:position pos:line="68" pos:column="70"/></literal></expr></argument>,
                <argument><expr><call><name pos:line="69" pos:column="17">fileno<pos:position pos:line="69" pos:column="23"/></name><argument_list pos:line="69" pos:column="23">(<argument><expr><name pos:line="69" pos:column="24">fhin<pos:position pos:line="69" pos:column="28"/></name></expr></argument>)<pos:position pos:line="69" pos:column="29"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="69" pos:column="31">sstrerror<pos:position pos:line="69" pos:column="40"/></name><argument_list pos:line="69" pos:column="40">(<argument><expr><name pos:line="69" pos:column="41">errno<pos:position pos:line="69" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="69" pos:column="48">errbuf<pos:position pos:line="69" pos:column="54"/></name></expr></argument>, <argument><expr><sizeof pos:line="69" pos:column="56">sizeof<argument_list pos:line="69" pos:column="62">(<argument><expr><name pos:line="69" pos:column="63">errbuf<pos:position pos:line="69" pos:column="69"/></name></expr></argument>)<pos:position pos:line="69" pos:column="70"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="69" pos:column="71"/></argument_list></call></expr></argument>)<pos:position pos:line="69" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="73"/></expr_stmt>
      }<pos:position pos:line="70" pos:column="8"/></block></then></if>
      <break pos:line="71" pos:column="7">break;<pos:position pos:line="71" pos:column="13"/></break>
    }<pos:position pos:line="72" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="74" pos:column="5">len<pos:position pos:line="74" pos:column="8"/></name> <operator pos:line="74" pos:column="9">=<pos:position pos:line="74" pos:column="10"/></operator> <call><name pos:line="74" pos:column="11">strlen<pos:position pos:line="74" pos:column="17"/></name><argument_list pos:line="74" pos:column="17">(<argument><expr><name pos:line="74" pos:column="18">buffer<pos:position pos:line="74" pos:column="24"/></name></expr></argument>)<pos:position pos:line="74" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="26"/></expr_stmt>
    <while pos:line="75" pos:column="5">while <condition pos:line="75" pos:column="11">(<expr><operator pos:line="75" pos:column="12">(<pos:position pos:line="75" pos:column="13"/></operator><name pos:line="75" pos:column="13">len<pos:position pos:line="75" pos:column="16"/></name> <operator pos:line="75" pos:column="17">&gt;<pos:position pos:line="75" pos:column="21"/></operator> <literal type="number" pos:line="75" pos:column="19">0<pos:position pos:line="75" pos:column="20"/></literal><operator pos:line="75" pos:column="20">)<pos:position pos:line="75" pos:column="21"/></operator> <operator pos:line="75" pos:column="22">&amp;&amp;<pos:position pos:line="75" pos:column="32"/></operator>
           <operator pos:line="76" pos:column="12">(<pos:position pos:line="76" pos:column="13"/></operator><operator pos:line="76" pos:column="13">(<pos:position pos:line="76" pos:column="14"/></operator><name><name pos:line="76" pos:column="14">buffer<pos:position pos:line="76" pos:column="20"/></name><index pos:line="76" pos:column="20">[<expr><name pos:line="76" pos:column="21">len<pos:position pos:line="76" pos:column="24"/></name> <operator pos:line="76" pos:column="25">-<pos:position pos:line="76" pos:column="26"/></operator> <literal type="number" pos:line="76" pos:column="27">1<pos:position pos:line="76" pos:column="28"/></literal></expr>]<pos:position pos:line="76" pos:column="29"/></index></name> <operator pos:line="76" pos:column="30">==<pos:position pos:line="76" pos:column="32"/></operator> <literal type="char" pos:line="76" pos:column="33">'\n'<pos:position pos:line="76" pos:column="37"/></literal><operator pos:line="76" pos:column="37">)<pos:position pos:line="76" pos:column="38"/></operator> <operator pos:line="76" pos:column="39">||<pos:position pos:line="76" pos:column="41"/></operator> <operator pos:line="76" pos:column="42">(<pos:position pos:line="76" pos:column="43"/></operator><name><name pos:line="76" pos:column="43">buffer<pos:position pos:line="76" pos:column="49"/></name><index pos:line="76" pos:column="49">[<expr><name pos:line="76" pos:column="50">len<pos:position pos:line="76" pos:column="53"/></name> <operator pos:line="76" pos:column="54">-<pos:position pos:line="76" pos:column="55"/></operator> <literal type="number" pos:line="76" pos:column="56">1<pos:position pos:line="76" pos:column="57"/></literal></expr>]<pos:position pos:line="76" pos:column="58"/></index></name> <operator pos:line="76" pos:column="59">==<pos:position pos:line="76" pos:column="61"/></operator> <literal type="char" pos:line="76" pos:column="62">'\r'<pos:position pos:line="76" pos:column="66"/></literal><operator pos:line="76" pos:column="66">)<pos:position pos:line="76" pos:column="67"/></operator><operator pos:line="76" pos:column="67">)<pos:position pos:line="76" pos:column="68"/></operator></expr>)<pos:position pos:line="76" pos:column="69"/></condition>
      <block type="pseudo"><expr_stmt><expr><name><name pos:line="77" pos:column="7">buffer<pos:position pos:line="77" pos:column="13"/></name><index pos:line="77" pos:column="13">[<expr><operator pos:line="77" pos:column="14">--<pos:position pos:line="77" pos:column="16"/></operator><name pos:line="77" pos:column="16">len<pos:position pos:line="77" pos:column="19"/></name></expr>]<pos:position pos:line="77" pos:column="20"/></index></name> <operator pos:line="77" pos:column="21">=<pos:position pos:line="77" pos:column="22"/></operator> <literal type="char" pos:line="77" pos:column="23">'\0'<pos:position pos:line="77" pos:column="27"/></literal></expr>;<pos:position pos:line="77" pos:column="28"/></expr_stmt></block></while>

    <if pos:line="79" pos:column="5">if <condition pos:line="79" pos:column="8">(<expr><name pos:line="79" pos:column="9">len<pos:position pos:line="79" pos:column="12"/></name> <operator pos:line="79" pos:column="13">==<pos:position pos:line="79" pos:column="15"/></operator> <literal type="number" pos:line="79" pos:column="16">0<pos:position pos:line="79" pos:column="17"/></literal></expr>)<pos:position pos:line="79" pos:column="18"/></condition><then pos:line="79" pos:column="18">
      <block type="pseudo"><continue pos:line="80" pos:column="7">continue;<pos:position pos:line="80" pos:column="16"/></continue></block></then></if>

    <expr_stmt><expr><call><name pos:line="82" pos:column="5">sstrncpy<pos:position pos:line="82" pos:column="13"/></name><argument_list pos:line="82" pos:column="13">(<argument><expr><name pos:line="82" pos:column="14">buffer_copy<pos:position pos:line="82" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="82" pos:column="27">buffer<pos:position pos:line="82" pos:column="33"/></name></expr></argument>, <argument><expr><sizeof pos:line="82" pos:column="35">sizeof<argument_list pos:line="82" pos:column="41">(<argument><expr><name pos:line="82" pos:column="42">buffer_copy<pos:position pos:line="82" pos:column="53"/></name></expr></argument>)<pos:position pos:line="82" pos:column="54"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="82" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="56"/></expr_stmt>

    <expr_stmt><expr><name pos:line="84" pos:column="5">fields_num<pos:position pos:line="84" pos:column="15"/></name> <operator pos:line="84" pos:column="16">=<pos:position pos:line="84" pos:column="17"/></operator>
        <call><name pos:line="85" pos:column="9">strsplit<pos:position pos:line="85" pos:column="17"/></name><argument_list pos:line="85" pos:column="17">(<argument><expr><name pos:line="85" pos:column="18">buffer_copy<pos:position pos:line="85" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="85" pos:column="31">fields<pos:position pos:line="85" pos:column="37"/></name></expr></argument>, <argument><expr><sizeof pos:line="85" pos:column="39">sizeof<argument_list pos:line="85" pos:column="45">(<argument><expr><name pos:line="85" pos:column="46">fields<pos:position pos:line="85" pos:column="52"/></name></expr></argument>)<pos:position pos:line="85" pos:column="53"/></argument_list></sizeof> <operator pos:line="85" pos:column="54">/<pos:position pos:line="85" pos:column="55"/></operator> <sizeof pos:line="85" pos:column="56">sizeof<argument_list pos:line="85" pos:column="62">(<argument><expr><name><name pos:line="85" pos:column="63">fields<pos:position pos:line="85" pos:column="69"/></name><index pos:line="85" pos:column="69">[<expr><literal type="number" pos:line="85" pos:column="70">0<pos:position pos:line="85" pos:column="71"/></literal></expr>]<pos:position pos:line="85" pos:column="72"/></index></name></expr></argument>)<pos:position pos:line="85" pos:column="73"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="85" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="75"/></expr_stmt>
    <if pos:line="86" pos:column="5">if <condition pos:line="86" pos:column="8">(<expr><name pos:line="86" pos:column="9">fields_num<pos:position pos:line="86" pos:column="19"/></name> <operator pos:line="86" pos:column="20">&lt;<pos:position pos:line="86" pos:column="24"/></operator> <literal type="number" pos:line="86" pos:column="22">1<pos:position pos:line="86" pos:column="23"/></literal></expr>)<pos:position pos:line="86" pos:column="24"/></condition><then pos:line="86" pos:column="24"> <block pos:line="86" pos:column="25">{
      <expr_stmt><expr><call><name pos:line="87" pos:column="7">fprintf<pos:position pos:line="87" pos:column="14"/></name><argument_list pos:line="87" pos:column="14">(<argument><expr><name pos:line="87" pos:column="15">fhout<pos:position pos:line="87" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="87" pos:column="22">"-1 Internal error\n"<pos:position pos:line="87" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="87" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="45"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="88" pos:column="7">fclose<pos:position pos:line="88" pos:column="13"/></name><argument_list pos:line="88" pos:column="13">(<argument><expr><name pos:line="88" pos:column="14">fhin<pos:position pos:line="88" pos:column="18"/></name></expr></argument>)<pos:position pos:line="88" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="20"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="89" pos:column="7">fclose<pos:position pos:line="89" pos:column="13"/></name><argument_list pos:line="89" pos:column="13">(<argument><expr><name pos:line="89" pos:column="14">fhout<pos:position pos:line="89" pos:column="19"/></name></expr></argument>)<pos:position pos:line="89" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="21"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="90" pos:column="7">pthread_exit<pos:position pos:line="90" pos:column="19"/></name><argument_list pos:line="90" pos:column="19">(<argument><expr><operator pos:line="90" pos:column="20">(<pos:position pos:line="90" pos:column="21"/></operator><name pos:line="90" pos:column="21">void<pos:position pos:line="90" pos:column="25"/></name> <operator pos:line="90" pos:column="26">*<pos:position pos:line="90" pos:column="27"/></operator><operator pos:line="90" pos:column="27">)<pos:position pos:line="90" pos:column="28"/></operator><literal type="number" pos:line="90" pos:column="28">1<pos:position pos:line="90" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="90" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="90" pos:column="31"/></expr_stmt>
      <return pos:line="91" pos:column="7">return <expr><operator pos:line="91" pos:column="14">(<pos:position pos:line="91" pos:column="15"/></operator><operator pos:line="91" pos:column="15">(<pos:position pos:line="91" pos:column="16"/></operator><name pos:line="91" pos:column="16">void<pos:position pos:line="91" pos:column="20"/></name> <operator pos:line="91" pos:column="21">*<pos:position pos:line="91" pos:column="22"/></operator><operator pos:line="91" pos:column="22">)<pos:position pos:line="91" pos:column="23"/></operator><literal type="number" pos:line="91" pos:column="23">1<pos:position pos:line="91" pos:column="24"/></literal><operator pos:line="91" pos:column="24">)<pos:position pos:line="91" pos:column="25"/></operator></expr>;<pos:position pos:line="91" pos:column="26"/></return>
    }<pos:position pos:line="92" pos:column="6"/></block></then></if>

    <if pos:line="94" pos:column="5">if <condition pos:line="94" pos:column="8">(<expr><call><name pos:line="94" pos:column="9">strcasecmp<pos:position pos:line="94" pos:column="19"/></name><argument_list pos:line="94" pos:column="19">(<argument><expr><name><name pos:line="94" pos:column="20">fields<pos:position pos:line="94" pos:column="26"/></name><index pos:line="94" pos:column="26">[<expr><literal type="number" pos:line="94" pos:column="27">0<pos:position pos:line="94" pos:column="28"/></literal></expr>]<pos:position pos:line="94" pos:column="29"/></index></name></expr></argument>, <argument><expr><literal type="string" pos:line="94" pos:column="31">"getval"<pos:position pos:line="94" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="94" pos:column="40"/></argument_list></call> <operator pos:line="94" pos:column="41">==<pos:position pos:line="94" pos:column="43"/></operator> <literal type="number" pos:line="94" pos:column="44">0<pos:position pos:line="94" pos:column="45"/></literal></expr>)<pos:position pos:line="94" pos:column="46"/></condition><then pos:line="94" pos:column="46"> <block pos:line="94" pos:column="47">{
      <expr_stmt><expr><call><name pos:line="95" pos:column="7">handle_getval<pos:position pos:line="95" pos:column="20"/></name><argument_list pos:line="95" pos:column="20">(<argument><expr><name pos:line="95" pos:column="21">fhout<pos:position pos:line="95" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="95" pos:column="28">buffer<pos:position pos:line="95" pos:column="34"/></name></expr></argument>)<pos:position pos:line="95" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="95" pos:column="36"/></expr_stmt>
    }<pos:position pos:line="96" pos:column="6"/></block></then> <elseif pos:line="96" pos:column="7">else <if pos:line="96" pos:column="12">if <condition pos:line="96" pos:column="15">(<expr><call><name pos:line="96" pos:column="16">strcasecmp<pos:position pos:line="96" pos:column="26"/></name><argument_list pos:line="96" pos:column="26">(<argument><expr><name><name pos:line="96" pos:column="27">fields<pos:position pos:line="96" pos:column="33"/></name><index pos:line="96" pos:column="33">[<expr><literal type="number" pos:line="96" pos:column="34">0<pos:position pos:line="96" pos:column="35"/></literal></expr>]<pos:position pos:line="96" pos:column="36"/></index></name></expr></argument>, <argument><expr><literal type="string" pos:line="96" pos:column="38">"getthreshold"<pos:position pos:line="96" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="96" pos:column="53"/></argument_list></call> <operator pos:line="96" pos:column="54">==<pos:position pos:line="96" pos:column="56"/></operator> <literal type="number" pos:line="96" pos:column="57">0<pos:position pos:line="96" pos:column="58"/></literal></expr>)<pos:position pos:line="96" pos:column="59"/></condition><then pos:line="96" pos:column="59"> <block pos:line="96" pos:column="60">{
      <expr_stmt><expr><call><name pos:line="97" pos:column="7">handle_getthreshold<pos:position pos:line="97" pos:column="26"/></name><argument_list pos:line="97" pos:column="26">(<argument><expr><name pos:line="97" pos:column="27">fhout<pos:position pos:line="97" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="97" pos:column="34">buffer<pos:position pos:line="97" pos:column="40"/></name></expr></argument>)<pos:position pos:line="97" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="42"/></expr_stmt>
    }<pos:position pos:line="98" pos:column="6"/></block></then></if></elseif> <elseif pos:line="98" pos:column="7">else <if pos:line="98" pos:column="12">if <condition pos:line="98" pos:column="15">(<expr><call><name pos:line="98" pos:column="16">strcasecmp<pos:position pos:line="98" pos:column="26"/></name><argument_list pos:line="98" pos:column="26">(<argument><expr><name><name pos:line="98" pos:column="27">fields<pos:position pos:line="98" pos:column="33"/></name><index pos:line="98" pos:column="33">[<expr><literal type="number" pos:line="98" pos:column="34">0<pos:position pos:line="98" pos:column="35"/></literal></expr>]<pos:position pos:line="98" pos:column="36"/></index></name></expr></argument>, <argument><expr><literal type="string" pos:line="98" pos:column="38">"putval"<pos:position pos:line="98" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="98" pos:column="47"/></argument_list></call> <operator pos:line="98" pos:column="48">==<pos:position pos:line="98" pos:column="50"/></operator> <literal type="number" pos:line="98" pos:column="51">0<pos:position pos:line="98" pos:column="52"/></literal></expr>)<pos:position pos:line="98" pos:column="53"/></condition><then pos:line="98" pos:column="53"> <block pos:line="98" pos:column="54">{
      <expr_stmt><expr><call><name pos:line="99" pos:column="7">handle_putval<pos:position pos:line="99" pos:column="20"/></name><argument_list pos:line="99" pos:column="20">(<argument><expr><name pos:line="99" pos:column="21">fhout<pos:position pos:line="99" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="99" pos:column="28">buffer<pos:position pos:line="99" pos:column="34"/></name></expr></argument>)<pos:position pos:line="99" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="99" pos:column="36"/></expr_stmt>
    }<pos:position pos:line="100" pos:column="6"/></block></then></if></elseif> <elseif pos:line="100" pos:column="7">else <if pos:line="100" pos:column="12">if <condition pos:line="100" pos:column="15">(<expr><call><name pos:line="100" pos:column="16">strcasecmp<pos:position pos:line="100" pos:column="26"/></name><argument_list pos:line="100" pos:column="26">(<argument><expr><name><name pos:line="100" pos:column="27">fields<pos:position pos:line="100" pos:column="33"/></name><index pos:line="100" pos:column="33">[<expr><literal type="number" pos:line="100" pos:column="34">0<pos:position pos:line="100" pos:column="35"/></literal></expr>]<pos:position pos:line="100" pos:column="36"/></index></name></expr></argument>, <argument><expr><literal type="string" pos:line="100" pos:column="38">"listval"<pos:position pos:line="100" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="100" pos:column="48"/></argument_list></call> <operator pos:line="100" pos:column="49">==<pos:position pos:line="100" pos:column="51"/></operator> <literal type="number" pos:line="100" pos:column="52">0<pos:position pos:line="100" pos:column="53"/></literal></expr>)<pos:position pos:line="100" pos:column="54"/></condition><then pos:line="100" pos:column="54"> <block pos:line="100" pos:column="55">{
      <expr_stmt><expr><call><name pos:line="101" pos:column="7">handle_listval<pos:position pos:line="101" pos:column="21"/></name><argument_list pos:line="101" pos:column="21">(<argument><expr><name pos:line="101" pos:column="22">fhout<pos:position pos:line="101" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="101" pos:column="29">buffer<pos:position pos:line="101" pos:column="35"/></name></expr></argument>)<pos:position pos:line="101" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="101" pos:column="37"/></expr_stmt>
    }<pos:position pos:line="102" pos:column="6"/></block></then></if></elseif> <elseif pos:line="102" pos:column="7">else <if pos:line="102" pos:column="12">if <condition pos:line="102" pos:column="15">(<expr><call><name pos:line="102" pos:column="16">strcasecmp<pos:position pos:line="102" pos:column="26"/></name><argument_list pos:line="102" pos:column="26">(<argument><expr><name><name pos:line="102" pos:column="27">fields<pos:position pos:line="102" pos:column="33"/></name><index pos:line="102" pos:column="33">[<expr><literal type="number" pos:line="102" pos:column="34">0<pos:position pos:line="102" pos:column="35"/></literal></expr>]<pos:position pos:line="102" pos:column="36"/></index></name></expr></argument>, <argument><expr><literal type="string" pos:line="102" pos:column="38">"putnotif"<pos:position pos:line="102" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="102" pos:column="49"/></argument_list></call> <operator pos:line="102" pos:column="50">==<pos:position pos:line="102" pos:column="52"/></operator> <literal type="number" pos:line="102" pos:column="53">0<pos:position pos:line="102" pos:column="54"/></literal></expr>)<pos:position pos:line="102" pos:column="55"/></condition><then pos:line="102" pos:column="55"> <block pos:line="102" pos:column="56">{
      <expr_stmt><expr><call><name pos:line="103" pos:column="7">handle_putnotif<pos:position pos:line="103" pos:column="22"/></name><argument_list pos:line="103" pos:column="22">(<argument><expr><name pos:line="103" pos:column="23">fhout<pos:position pos:line="103" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="103" pos:column="30">buffer<pos:position pos:line="103" pos:column="36"/></name></expr></argument>)<pos:position pos:line="103" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="103" pos:column="38"/></expr_stmt>
    }<pos:position pos:line="104" pos:column="6"/></block></then></if></elseif> <elseif pos:line="104" pos:column="7">else <if pos:line="104" pos:column="12">if <condition pos:line="104" pos:column="15">(<expr><call><name pos:line="104" pos:column="16">strcasecmp<pos:position pos:line="104" pos:column="26"/></name><argument_list pos:line="104" pos:column="26">(<argument><expr><name><name pos:line="104" pos:column="27">fields<pos:position pos:line="104" pos:column="33"/></name><index pos:line="104" pos:column="33">[<expr><literal type="number" pos:line="104" pos:column="34">0<pos:position pos:line="104" pos:column="35"/></literal></expr>]<pos:position pos:line="104" pos:column="36"/></index></name></expr></argument>, <argument><expr><literal type="string" pos:line="104" pos:column="38">"flush"<pos:position pos:line="104" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="104" pos:column="46"/></argument_list></call> <operator pos:line="104" pos:column="47">==<pos:position pos:line="104" pos:column="49"/></operator> <literal type="number" pos:line="104" pos:column="50">0<pos:position pos:line="104" pos:column="51"/></literal></expr>)<pos:position pos:line="104" pos:column="52"/></condition><then pos:line="104" pos:column="52"> <block pos:line="104" pos:column="53">{
      <expr_stmt><expr><call><name pos:line="105" pos:column="7">handle_flush<pos:position pos:line="105" pos:column="19"/></name><argument_list pos:line="105" pos:column="19">(<argument><expr><name pos:line="105" pos:column="20">fhout<pos:position pos:line="105" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="105" pos:column="27">buffer<pos:position pos:line="105" pos:column="33"/></name></expr></argument>)<pos:position pos:line="105" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="105" pos:column="35"/></expr_stmt>
    }<pos:position pos:line="106" pos:column="6"/></block></then></if></elseif> <else pos:line="106" pos:column="7">else <block pos:line="106" pos:column="12">{
      <if pos:line="107" pos:column="7">if <condition pos:line="107" pos:column="10">(<expr><call><name pos:line="107" pos:column="11">fprintf<pos:position pos:line="107" pos:column="18"/></name><argument_list pos:line="107" pos:column="18">(<argument><expr><name pos:line="107" pos:column="19">fhout<pos:position pos:line="107" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="107" pos:column="26">"-1 Unknown command: %s\n"<pos:position pos:line="107" pos:column="52"/></literal></expr></argument>, <argument><expr><name><name pos:line="107" pos:column="54">fields<pos:position pos:line="107" pos:column="60"/></name><index pos:line="107" pos:column="60">[<expr><literal type="number" pos:line="107" pos:column="61">0<pos:position pos:line="107" pos:column="62"/></literal></expr>]<pos:position pos:line="107" pos:column="63"/></index></name></expr></argument>)<pos:position pos:line="107" pos:column="64"/></argument_list></call> <operator pos:line="107" pos:column="65">&lt;<pos:position pos:line="107" pos:column="69"/></operator> <literal type="number" pos:line="107" pos:column="67">0<pos:position pos:line="107" pos:column="68"/></literal></expr>)<pos:position pos:line="107" pos:column="69"/></condition><then pos:line="107" pos:column="69"> <block pos:line="107" pos:column="70">{
        <decl_stmt><decl><type><name pos:line="108" pos:column="9">char<pos:position pos:line="108" pos:column="13"/></name></type> <name><name pos:line="108" pos:column="14">errbuf<pos:position pos:line="108" pos:column="20"/></name><index pos:line="108" pos:column="20">[<expr><literal type="number" pos:line="108" pos:column="21">1024<pos:position pos:line="108" pos:column="25"/></literal></expr>]<pos:position pos:line="108" pos:column="26"/></index></name></decl>;<pos:position pos:line="108" pos:column="27"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="109" pos:column="9">WARNING<pos:position pos:line="109" pos:column="16"/></name><argument_list pos:line="109" pos:column="16">(<argument><expr><literal type="string" pos:line="109" pos:column="17">"unixsock plugin: failed to write to socket #%i: %s"<pos:position pos:line="109" pos:column="69"/></literal></expr></argument>,
                <argument><expr><call><name pos:line="110" pos:column="17">fileno<pos:position pos:line="110" pos:column="23"/></name><argument_list pos:line="110" pos:column="23">(<argument><expr><name pos:line="110" pos:column="24">fhout<pos:position pos:line="110" pos:column="29"/></name></expr></argument>)<pos:position pos:line="110" pos:column="30"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="110" pos:column="32">sstrerror<pos:position pos:line="110" pos:column="41"/></name><argument_list pos:line="110" pos:column="41">(<argument><expr><name pos:line="110" pos:column="42">errno<pos:position pos:line="110" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="110" pos:column="49">errbuf<pos:position pos:line="110" pos:column="55"/></name></expr></argument>, <argument><expr><sizeof pos:line="110" pos:column="57">sizeof<argument_list pos:line="110" pos:column="63">(<argument><expr><name pos:line="110" pos:column="64">errbuf<pos:position pos:line="110" pos:column="70"/></name></expr></argument>)<pos:position pos:line="110" pos:column="71"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="110" pos:column="72"/></argument_list></call></expr></argument>)<pos:position pos:line="110" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="110" pos:column="74"/></expr_stmt>
        <break pos:line="111" pos:column="9">break;<pos:position pos:line="111" pos:column="15"/></break>
      }<pos:position pos:line="112" pos:column="8"/></block></then></if>
    }<pos:position pos:line="113" pos:column="6"/></block></else></if>
  }<pos:position pos:line="114" pos:column="4"/></block></while> <comment type="block" pos:line="114" pos:column="5">/* while (fgets) */</comment>

  <expr_stmt><expr><call><name pos:line="116" pos:column="3">DEBUG<pos:position pos:line="116" pos:column="8"/></name><argument_list pos:line="116" pos:column="8">(<argument><expr><literal type="string" pos:line="116" pos:column="9">"unixsock plugin: us_handle_client: Exiting.."<pos:position pos:line="116" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="116" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="116" pos:column="57"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="117" pos:column="3">fclose<pos:position pos:line="117" pos:column="9"/></name><argument_list pos:line="117" pos:column="9">(<argument><expr><name pos:line="117" pos:column="10">fhin<pos:position pos:line="117" pos:column="14"/></name></expr></argument>)<pos:position pos:line="117" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="117" pos:column="16"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="118" pos:column="3">fclose<pos:position pos:line="118" pos:column="9"/></name><argument_list pos:line="118" pos:column="9">(<argument><expr><name pos:line="118" pos:column="10">fhout<pos:position pos:line="118" pos:column="15"/></name></expr></argument>)<pos:position pos:line="118" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="118" pos:column="17"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="120" pos:column="3">pthread_exit<pos:position pos:line="120" pos:column="15"/></name><argument_list pos:line="120" pos:column="15">(<argument><expr><operator pos:line="120" pos:column="16">(<pos:position pos:line="120" pos:column="17"/></operator><name pos:line="120" pos:column="17">void<pos:position pos:line="120" pos:column="21"/></name> <operator pos:line="120" pos:column="22">*<pos:position pos:line="120" pos:column="23"/></operator><operator pos:line="120" pos:column="23">)<pos:position pos:line="120" pos:column="24"/></operator><literal type="number" pos:line="120" pos:column="24">0<pos:position pos:line="120" pos:column="25"/></literal></expr></argument>)<pos:position pos:line="120" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="120" pos:column="27"/></expr_stmt>
  <return pos:line="121" pos:column="3">return <expr><operator pos:line="121" pos:column="10">(<pos:position pos:line="121" pos:column="11"/></operator><operator pos:line="121" pos:column="11">(<pos:position pos:line="121" pos:column="12"/></operator><name pos:line="121" pos:column="12">void<pos:position pos:line="121" pos:column="16"/></name> <operator pos:line="121" pos:column="17">*<pos:position pos:line="121" pos:column="18"/></operator><operator pos:line="121" pos:column="18">)<pos:position pos:line="121" pos:column="19"/></operator><literal type="number" pos:line="121" pos:column="19">0<pos:position pos:line="121" pos:column="20"/></literal><operator pos:line="121" pos:column="20">)<pos:position pos:line="121" pos:column="21"/></operator></expr>;<pos:position pos:line="121" pos:column="22"/></return>
}<pos:position pos:line="122" pos:column="2"/></block></function></unit>
