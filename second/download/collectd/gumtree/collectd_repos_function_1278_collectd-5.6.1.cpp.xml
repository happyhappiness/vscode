<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1278_collectd-5.6.1.cpp" pos:tabs="8"><function><type><name><name pos:line="1" pos:column="1">grpc<pos:position pos:line="1" pos:column="5"/></name><operator pos:line="1" pos:column="5">::<pos:position pos:line="1" pos:column="7"/></operator><name pos:line="1" pos:column="7">Status<pos:position pos:line="1" pos:column="13"/></name></name></type> <name pos:line="1" pos:column="14">QueryValues<pos:position pos:line="1" pos:column="25"/></name><parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><name><name pos:line="1" pos:column="26">grpc<pos:position pos:line="1" pos:column="30"/></name><operator pos:line="1" pos:column="30">::<pos:position pos:line="1" pos:column="32"/></operator><name pos:line="1" pos:column="32">ServerContext<pos:position pos:line="1" pos:column="45"/></name></name> <modifier pos:line="1" pos:column="46">*<pos:position pos:line="1" pos:column="47"/></modifier></type><name pos:line="1" pos:column="47">ctx<pos:position pos:line="1" pos:column="50"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="52">QueryValuesRequest<pos:position pos:line="1" pos:column="70"/></name> <specifier pos:line="1" pos:column="71">const<pos:position pos:line="1" pos:column="76"/></specifier> <modifier pos:line="1" pos:column="77">*<pos:position pos:line="1" pos:column="78"/></modifier></type><name pos:line="1" pos:column="78">req<pos:position pos:line="1" pos:column="81"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="83">grpc<pos:position pos:line="1" pos:column="87"/></name><operator pos:line="1" pos:column="87">::<pos:position pos:line="1" pos:column="89"/></operator><name><name pos:line="1" pos:column="89">ServerWriter<pos:position pos:line="1" pos:column="101"/></name><argument_list type="generic" pos:line="1" pos:column="101">&lt;<argument><expr><name pos:line="1" pos:column="102">QueryValuesResponse<pos:position pos:line="1" pos:column="121"/></name></expr></argument>&gt;<pos:position pos:line="1" pos:column="125"/></argument_list></name></name> <modifier pos:line="1" pos:column="123">*<pos:position pos:line="1" pos:column="124"/></modifier></type><name pos:line="1" pos:column="124">writer<pos:position pos:line="1" pos:column="130"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="131"/></parameter_list> <specifier pos:line="1" pos:column="132">override<pos:position pos:line="1" pos:column="140"/></specifier> <block pos:line="1" pos:column="141">{
		<decl_stmt><decl><type><name pos:line="2" pos:column="17">value_list_t<pos:position pos:line="2" pos:column="29"/></name></type> <name pos:line="2" pos:column="30">match<pos:position pos:line="2" pos:column="35"/></name></decl>;<pos:position pos:line="2" pos:column="36"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="3" pos:column="17">auto<pos:position pos:line="3" pos:column="21"/></name></type> <name pos:line="3" pos:column="22">status<pos:position pos:line="3" pos:column="28"/></name> <init pos:line="3" pos:column="29">= <expr><call><name pos:line="3" pos:column="31">unmarshal_ident<pos:position pos:line="3" pos:column="46"/></name><argument_list pos:line="3" pos:column="46">(<argument><expr><call><name><name pos:line="3" pos:column="47">req<pos:position pos:line="3" pos:column="50"/></name><operator pos:line="3" pos:column="50">-&gt;<pos:position pos:line="3" pos:column="55"/></operator><name pos:line="3" pos:column="52">identifier<pos:position pos:line="3" pos:column="62"/></name></name><argument_list pos:line="3" pos:column="62">()<pos:position pos:line="3" pos:column="64"/></argument_list></call></expr></argument>, <argument><expr><operator pos:line="3" pos:column="66">&amp;<pos:position pos:line="3" pos:column="71"/></operator><name pos:line="3" pos:column="67">match<pos:position pos:line="3" pos:column="72"/></name></expr></argument>, <argument><expr><literal type="boolean" pos:line="3" pos:column="74">false<pos:position pos:line="3" pos:column="79"/></literal></expr></argument>)<pos:position pos:line="3" pos:column="80"/></argument_list></call></expr></init></decl>;<pos:position pos:line="3" pos:column="81"/></decl_stmt>
		<if pos:line="4" pos:column="17">if <condition pos:line="4" pos:column="20">(<expr><operator pos:line="4" pos:column="21">!<pos:position pos:line="4" pos:column="22"/></operator><call><name><name pos:line="4" pos:column="22">status<pos:position pos:line="4" pos:column="28"/></name><operator pos:line="4" pos:column="28">.<pos:position pos:line="4" pos:column="29"/></operator><name pos:line="4" pos:column="29">ok<pos:position pos:line="4" pos:column="31"/></name></name><argument_list pos:line="4" pos:column="31">()<pos:position pos:line="4" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="4" pos:column="34"/></condition><then pos:line="4" pos:column="34"> <block pos:line="4" pos:column="35">{
			<return pos:line="5" pos:column="25">return <expr><name pos:line="5" pos:column="32">status<pos:position pos:line="5" pos:column="38"/></name></expr>;<pos:position pos:line="5" pos:column="39"/></return>
		}<pos:position pos:line="6" pos:column="18"/></block></then></if>

		<decl_stmt><decl><type><name><name pos:line="8" pos:column="17">std<pos:position pos:line="8" pos:column="20"/></name><operator pos:line="8" pos:column="20">::<pos:position pos:line="8" pos:column="22"/></operator><name><name pos:line="8" pos:column="22">queue<pos:position pos:line="8" pos:column="27"/></name><argument_list type="generic" pos:line="8" pos:column="27">&lt;<argument><expr><name pos:line="8" pos:column="28">value_list_t<pos:position pos:line="8" pos:column="40"/></name></expr></argument>&gt;<pos:position pos:line="8" pos:column="44"/></argument_list></name></name></type> <name pos:line="8" pos:column="42">value_lists<pos:position pos:line="8" pos:column="53"/></name></decl>;<pos:position pos:line="8" pos:column="54"/></decl_stmt>
		<expr_stmt><expr><name pos:line="9" pos:column="17">status<pos:position pos:line="9" pos:column="23"/></name> <operator pos:line="9" pos:column="24">=<pos:position pos:line="9" pos:column="25"/></operator> <call><name><name pos:line="9" pos:column="26">this<pos:position pos:line="9" pos:column="30"/></name><operator pos:line="9" pos:column="30">-&gt;<pos:position pos:line="9" pos:column="35"/></operator><name pos:line="9" pos:column="32">queryValuesRead<pos:position pos:line="9" pos:column="47"/></name></name><argument_list pos:line="9" pos:column="47">(<argument><expr><operator pos:line="9" pos:column="48">&amp;<pos:position pos:line="9" pos:column="53"/></operator><name pos:line="9" pos:column="49">match<pos:position pos:line="9" pos:column="54"/></name></expr></argument>, <argument><expr><operator pos:line="9" pos:column="56">&amp;<pos:position pos:line="9" pos:column="61"/></operator><name pos:line="9" pos:column="57">value_lists<pos:position pos:line="9" pos:column="68"/></name></expr></argument>)<pos:position pos:line="9" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="70"/></expr_stmt>
		<if pos:line="10" pos:column="17">if <condition pos:line="10" pos:column="20">(<expr><call><name><name pos:line="10" pos:column="21">status<pos:position pos:line="10" pos:column="27"/></name><operator pos:line="10" pos:column="27">.<pos:position pos:line="10" pos:column="28"/></operator><name pos:line="10" pos:column="28">ok<pos:position pos:line="10" pos:column="30"/></name></name><argument_list pos:line="10" pos:column="30">()<pos:position pos:line="10" pos:column="32"/></argument_list></call></expr>)<pos:position pos:line="10" pos:column="33"/></condition><then pos:line="10" pos:column="33"> <block pos:line="10" pos:column="34">{
			<expr_stmt><expr><name pos:line="11" pos:column="25">status<pos:position pos:line="11" pos:column="31"/></name> <operator pos:line="11" pos:column="32">=<pos:position pos:line="11" pos:column="33"/></operator> <call><name><name pos:line="11" pos:column="34">this<pos:position pos:line="11" pos:column="38"/></name><operator pos:line="11" pos:column="38">-&gt;<pos:position pos:line="11" pos:column="43"/></operator><name pos:line="11" pos:column="40">queryValuesWrite<pos:position pos:line="11" pos:column="56"/></name></name><argument_list pos:line="11" pos:column="56">(<argument><expr><name pos:line="11" pos:column="57">ctx<pos:position pos:line="11" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="62">writer<pos:position pos:line="11" pos:column="68"/></name></expr></argument>, <argument><expr><operator pos:line="11" pos:column="70">&amp;<pos:position pos:line="11" pos:column="75"/></operator><name pos:line="11" pos:column="71">value_lists<pos:position pos:line="11" pos:column="82"/></name></expr></argument>)<pos:position pos:line="11" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="84"/></expr_stmt>
		}<pos:position pos:line="12" pos:column="18"/></block></then></if>

		<while pos:line="14" pos:column="17">while <condition pos:line="14" pos:column="23">(<expr><operator pos:line="14" pos:column="24">!<pos:position pos:line="14" pos:column="25"/></operator><call><name><name pos:line="14" pos:column="25">value_lists<pos:position pos:line="14" pos:column="36"/></name><operator pos:line="14" pos:column="36">.<pos:position pos:line="14" pos:column="37"/></operator><name pos:line="14" pos:column="37">empty<pos:position pos:line="14" pos:column="42"/></name></name><argument_list pos:line="14" pos:column="42">()<pos:position pos:line="14" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="14" pos:column="45"/></condition> <block pos:line="14" pos:column="46">{
			<decl_stmt><decl><type><name pos:line="15" pos:column="25">auto<pos:position pos:line="15" pos:column="29"/></name></type> <name pos:line="15" pos:column="30">vl<pos:position pos:line="15" pos:column="32"/></name> <init pos:line="15" pos:column="33">= <expr><call><name><name pos:line="15" pos:column="35">value_lists<pos:position pos:line="15" pos:column="46"/></name><operator pos:line="15" pos:column="46">.<pos:position pos:line="15" pos:column="47"/></operator><name pos:line="15" pos:column="47">front<pos:position pos:line="15" pos:column="52"/></name></name><argument_list pos:line="15" pos:column="52">()<pos:position pos:line="15" pos:column="54"/></argument_list></call></expr></init></decl>;<pos:position pos:line="15" pos:column="55"/></decl_stmt>
			<expr_stmt><expr><call><name><name pos:line="16" pos:column="25">value_lists<pos:position pos:line="16" pos:column="36"/></name><operator pos:line="16" pos:column="36">.<pos:position pos:line="16" pos:column="37"/></operator><name pos:line="16" pos:column="37">pop<pos:position pos:line="16" pos:column="40"/></name></name><argument_list pos:line="16" pos:column="40">()<pos:position pos:line="16" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="43"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="17" pos:column="25">sfree<pos:position pos:line="17" pos:column="30"/></name><argument_list pos:line="17" pos:column="30">(<argument><expr><name><name pos:line="17" pos:column="31">vl<pos:position pos:line="17" pos:column="33"/></name><operator pos:line="17" pos:column="33">.<pos:position pos:line="17" pos:column="34"/></operator><name pos:line="17" pos:column="34">values<pos:position pos:line="17" pos:column="40"/></name></name></expr></argument>)<pos:position pos:line="17" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="42"/></expr_stmt>
		}<pos:position pos:line="18" pos:column="18"/></block></while>

		<return pos:line="20" pos:column="17">return <expr><name pos:line="20" pos:column="24">status<pos:position pos:line="20" pos:column="30"/></name></expr>;<pos:position pos:line="20" pos:column="31"/></return>
	}<pos:position pos:line="21" pos:column="10"/></block></function></unit>
