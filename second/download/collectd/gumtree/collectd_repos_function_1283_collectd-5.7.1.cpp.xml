<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1283_collectd-5.7.1.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">double<pos:position pos:line="1" pos:column="7"/></name></type> <name pos:line="1" pos:column="8">latency_counter_get_rate<pos:position pos:line="1" pos:column="32"/></name><parameter_list pos:line="1" pos:column="32">(<parameter><decl><type><specifier pos:line="1" pos:column="33">const<pos:position pos:line="1" pos:column="38"/></specifier> <name pos:line="1" pos:column="39">latency_counter_t<pos:position pos:line="1" pos:column="56"/></name> <modifier pos:line="1" pos:column="57">*<pos:position pos:line="1" pos:column="58"/></modifier></type><name pos:line="1" pos:column="58">lc<pos:position pos:line="1" pos:column="60"/></name></decl></parameter>, <comment type="block" pos:line="1" pos:column="62">/* {{{ */</comment>
                                <parameter><decl><type><name pos:line="2" pos:column="33">cdtime_t<pos:position pos:line="2" pos:column="41"/></name></type> <name pos:line="2" pos:column="42">lower<pos:position pos:line="2" pos:column="47"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="49">cdtime_t<pos:position pos:line="2" pos:column="57"/></name></type> <name pos:line="2" pos:column="58">upper<pos:position pos:line="2" pos:column="63"/></name></decl></parameter>,
                                <parameter><decl><type><specifier pos:line="3" pos:column="33">const<pos:position pos:line="3" pos:column="38"/></specifier> <name pos:line="3" pos:column="39">cdtime_t<pos:position pos:line="3" pos:column="47"/></name></type> <name pos:line="3" pos:column="48">now<pos:position pos:line="3" pos:column="51"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="52"/></parameter_list> <block pos:line="3" pos:column="53">{
  <if pos:line="4" pos:column="3">if <condition pos:line="4" pos:column="6">(<expr><operator pos:line="4" pos:column="7">(<pos:position pos:line="4" pos:column="8"/></operator><name pos:line="4" pos:column="8">lc<pos:position pos:line="4" pos:column="10"/></name> <operator pos:line="4" pos:column="11">==<pos:position pos:line="4" pos:column="13"/></operator> <name pos:line="4" pos:column="14">NULL<pos:position pos:line="4" pos:column="18"/></name><operator pos:line="4" pos:column="18">)<pos:position pos:line="4" pos:column="19"/></operator> <operator pos:line="4" pos:column="20">||<pos:position pos:line="4" pos:column="22"/></operator> <operator pos:line="4" pos:column="23">(<pos:position pos:line="4" pos:column="24"/></operator><name><name pos:line="4" pos:column="24">lc<pos:position pos:line="4" pos:column="26"/></name><operator pos:line="4" pos:column="26">-&gt;<pos:position pos:line="4" pos:column="31"/></operator><name pos:line="4" pos:column="28">num<pos:position pos:line="4" pos:column="31"/></name></name> <operator pos:line="4" pos:column="32">==<pos:position pos:line="4" pos:column="34"/></operator> <literal type="number" pos:line="4" pos:column="35">0<pos:position pos:line="4" pos:column="36"/></literal><operator pos:line="4" pos:column="36">)<pos:position pos:line="4" pos:column="37"/></operator></expr>)<pos:position pos:line="4" pos:column="38"/></condition><then pos:line="4" pos:column="38">
    <block type="pseudo"><return pos:line="5" pos:column="5">return <expr><operator pos:line="5" pos:column="12">(<pos:position pos:line="5" pos:column="13"/></operator><name pos:line="5" pos:column="13">NAN<pos:position pos:line="5" pos:column="16"/></name><operator pos:line="5" pos:column="16">)<pos:position pos:line="5" pos:column="17"/></operator></expr>;<pos:position pos:line="5" pos:column="18"/></return></block></then></if>

  <if pos:line="7" pos:column="3">if <condition pos:line="7" pos:column="6">(<expr><name pos:line="7" pos:column="7">upper<pos:position pos:line="7" pos:column="12"/></name> <operator pos:line="7" pos:column="13">&amp;&amp;<pos:position pos:line="7" pos:column="23"/></operator> <operator pos:line="7" pos:column="16">(<pos:position pos:line="7" pos:column="17"/></operator><name pos:line="7" pos:column="17">upper<pos:position pos:line="7" pos:column="22"/></name> <operator pos:line="7" pos:column="23">&lt;<pos:position pos:line="7" pos:column="27"/></operator> <name pos:line="7" pos:column="25">lower<pos:position pos:line="7" pos:column="30"/></name><operator pos:line="7" pos:column="30">)<pos:position pos:line="7" pos:column="31"/></operator></expr>)<pos:position pos:line="7" pos:column="32"/></condition><then pos:line="7" pos:column="32">
    <block type="pseudo"><return pos:line="8" pos:column="5">return <expr><operator pos:line="8" pos:column="12">(<pos:position pos:line="8" pos:column="13"/></operator><name pos:line="8" pos:column="13">NAN<pos:position pos:line="8" pos:column="16"/></name><operator pos:line="8" pos:column="16">)<pos:position pos:line="8" pos:column="17"/></operator></expr>;<pos:position pos:line="8" pos:column="18"/></return></block></then></if>
  <if pos:line="9" pos:column="3">if <condition pos:line="9" pos:column="6">(<expr><name pos:line="9" pos:column="7">lower<pos:position pos:line="9" pos:column="12"/></name> <operator pos:line="9" pos:column="13">==<pos:position pos:line="9" pos:column="15"/></operator> <name pos:line="9" pos:column="16">upper<pos:position pos:line="9" pos:column="21"/></name></expr>)<pos:position pos:line="9" pos:column="22"/></condition><then pos:line="9" pos:column="22">
    <block type="pseudo"><return pos:line="10" pos:column="5">return <expr><operator pos:line="10" pos:column="12">(<pos:position pos:line="10" pos:column="13"/></operator><literal type="number" pos:line="10" pos:column="13">0<pos:position pos:line="10" pos:column="14"/></literal><operator pos:line="10" pos:column="14">)<pos:position pos:line="10" pos:column="15"/></operator></expr>;<pos:position pos:line="10" pos:column="16"/></return></block></then></if>

  <comment type="block" pos:line="12" pos:column="3">/* Buckets have an exclusive lower bound and an inclusive upper bound. That
   * means that the first bucket, index 0, represents (0-bin_width]. That means
   * that latency==bin_width needs to result in bin=0, that's why we need to
   * subtract one before dividing by bin_width. */</comment>
  <decl_stmt><decl><type><name pos:line="16" pos:column="3">cdtime_t<pos:position pos:line="16" pos:column="11"/></name></type> <name pos:line="16" pos:column="12">lower_bin<pos:position pos:line="16" pos:column="21"/></name> <init pos:line="16" pos:column="22">= <expr><literal type="number" pos:line="16" pos:column="24">0<pos:position pos:line="16" pos:column="25"/></literal></expr></init></decl>;<pos:position pos:line="16" pos:column="26"/></decl_stmt>
  <if pos:line="17" pos:column="3">if <condition pos:line="17" pos:column="6">(<expr><name pos:line="17" pos:column="7">lower<pos:position pos:line="17" pos:column="12"/></name></expr>)<pos:position pos:line="17" pos:column="13"/></condition><then pos:line="17" pos:column="13">
    <comment type="block" pos:line="18" pos:column="5">/* lower is *exclusive* =&gt; determine bucket for lower+1 */</comment>
    <block type="pseudo"><expr_stmt><expr><name pos:line="19" pos:column="5">lower_bin<pos:position pos:line="19" pos:column="14"/></name> <operator pos:line="19" pos:column="15">=<pos:position pos:line="19" pos:column="16"/></operator> <operator pos:line="19" pos:column="17">(<pos:position pos:line="19" pos:column="18"/></operator><operator pos:line="19" pos:column="18">(<pos:position pos:line="19" pos:column="19"/></operator><name pos:line="19" pos:column="19">lower<pos:position pos:line="19" pos:column="24"/></name> <operator pos:line="19" pos:column="25">+<pos:position pos:line="19" pos:column="26"/></operator> <literal type="number" pos:line="19" pos:column="27">1<pos:position pos:line="19" pos:column="28"/></literal><operator pos:line="19" pos:column="28">)<pos:position pos:line="19" pos:column="29"/></operator> <operator pos:line="19" pos:column="30">-<pos:position pos:line="19" pos:column="31"/></operator> <literal type="number" pos:line="19" pos:column="32">1<pos:position pos:line="19" pos:column="33"/></literal><operator pos:line="19" pos:column="33">)<pos:position pos:line="19" pos:column="34"/></operator> <operator pos:line="19" pos:column="35">/<pos:position pos:line="19" pos:column="36"/></operator> <name><name pos:line="19" pos:column="37">lc<pos:position pos:line="19" pos:column="39"/></name><operator pos:line="19" pos:column="39">-&gt;<pos:position pos:line="19" pos:column="44"/></operator><name pos:line="19" pos:column="41">bin_width<pos:position pos:line="19" pos:column="50"/></name></name></expr>;<pos:position pos:line="19" pos:column="51"/></expr_stmt></block></then></if>

  <comment type="block" pos:line="21" pos:column="3">/* lower is greater than the longest latency observed =&gt; rate is zero. */</comment>
  <if pos:line="22" pos:column="3">if <condition pos:line="22" pos:column="6">(<expr><name pos:line="22" pos:column="7">lower_bin<pos:position pos:line="22" pos:column="16"/></name> <operator pos:line="22" pos:column="17">&gt;=<pos:position pos:line="22" pos:column="22"/></operator> <name pos:line="22" pos:column="20">HISTOGRAM_NUM_BINS<pos:position pos:line="22" pos:column="38"/></name></expr>)<pos:position pos:line="22" pos:column="39"/></condition><then pos:line="22" pos:column="39">
    <block type="pseudo"><return pos:line="23" pos:column="5">return <expr><operator pos:line="23" pos:column="12">(<pos:position pos:line="23" pos:column="13"/></operator><literal type="number" pos:line="23" pos:column="13">0<pos:position pos:line="23" pos:column="14"/></literal><operator pos:line="23" pos:column="14">)<pos:position pos:line="23" pos:column="15"/></operator></expr>;<pos:position pos:line="23" pos:column="16"/></return></block></then></if>

  <decl_stmt><decl><type><name pos:line="25" pos:column="3">cdtime_t<pos:position pos:line="25" pos:column="11"/></name></type> <name pos:line="25" pos:column="12">upper_bin<pos:position pos:line="25" pos:column="21"/></name> <init pos:line="25" pos:column="22">= <expr><name pos:line="25" pos:column="24">HISTOGRAM_NUM_BINS<pos:position pos:line="25" pos:column="42"/></name> <operator pos:line="25" pos:column="43">-<pos:position pos:line="25" pos:column="44"/></operator> <literal type="number" pos:line="25" pos:column="45">1<pos:position pos:line="25" pos:column="46"/></literal></expr></init></decl>;<pos:position pos:line="25" pos:column="47"/></decl_stmt>
  <if pos:line="26" pos:column="3">if <condition pos:line="26" pos:column="6">(<expr><name pos:line="26" pos:column="7">upper<pos:position pos:line="26" pos:column="12"/></name></expr>)<pos:position pos:line="26" pos:column="13"/></condition><then pos:line="26" pos:column="13">
    <block type="pseudo"><expr_stmt><expr><name pos:line="27" pos:column="5">upper_bin<pos:position pos:line="27" pos:column="14"/></name> <operator pos:line="27" pos:column="15">=<pos:position pos:line="27" pos:column="16"/></operator> <operator pos:line="27" pos:column="17">(<pos:position pos:line="27" pos:column="18"/></operator><name pos:line="27" pos:column="18">upper<pos:position pos:line="27" pos:column="23"/></name> <operator pos:line="27" pos:column="24">-<pos:position pos:line="27" pos:column="25"/></operator> <literal type="number" pos:line="27" pos:column="26">1<pos:position pos:line="27" pos:column="27"/></literal><operator pos:line="27" pos:column="27">)<pos:position pos:line="27" pos:column="28"/></operator> <operator pos:line="27" pos:column="29">/<pos:position pos:line="27" pos:column="30"/></operator> <name><name pos:line="27" pos:column="31">lc<pos:position pos:line="27" pos:column="33"/></name><operator pos:line="27" pos:column="33">-&gt;<pos:position pos:line="27" pos:column="38"/></operator><name pos:line="27" pos:column="35">bin_width<pos:position pos:line="27" pos:column="44"/></name></name></expr>;<pos:position pos:line="27" pos:column="45"/></expr_stmt></block></then></if>

  <if pos:line="29" pos:column="3">if <condition pos:line="29" pos:column="6">(<expr><name pos:line="29" pos:column="7">upper_bin<pos:position pos:line="29" pos:column="16"/></name> <operator pos:line="29" pos:column="17">&gt;=<pos:position pos:line="29" pos:column="22"/></operator> <name pos:line="29" pos:column="20">HISTOGRAM_NUM_BINS<pos:position pos:line="29" pos:column="38"/></name></expr>)<pos:position pos:line="29" pos:column="39"/></condition><then pos:line="29" pos:column="39"> <block pos:line="29" pos:column="40">{
    <expr_stmt><expr><name pos:line="30" pos:column="5">upper_bin<pos:position pos:line="30" pos:column="14"/></name> <operator pos:line="30" pos:column="15">=<pos:position pos:line="30" pos:column="16"/></operator> <name pos:line="30" pos:column="17">HISTOGRAM_NUM_BINS<pos:position pos:line="30" pos:column="35"/></name> <operator pos:line="30" pos:column="36">-<pos:position pos:line="30" pos:column="37"/></operator> <literal type="number" pos:line="30" pos:column="38">1<pos:position pos:line="30" pos:column="39"/></literal></expr>;<pos:position pos:line="30" pos:column="40"/></expr_stmt>
    <expr_stmt><expr><name pos:line="31" pos:column="5">upper<pos:position pos:line="31" pos:column="10"/></name> <operator pos:line="31" pos:column="11">=<pos:position pos:line="31" pos:column="12"/></operator> <literal type="number" pos:line="31" pos:column="13">0<pos:position pos:line="31" pos:column="14"/></literal></expr>;<pos:position pos:line="31" pos:column="15"/></expr_stmt>
  }<pos:position pos:line="32" pos:column="4"/></block></then></if>

  <decl_stmt><decl><type><name pos:line="34" pos:column="3">double<pos:position pos:line="34" pos:column="9"/></name></type> <name pos:line="34" pos:column="10">sum<pos:position pos:line="34" pos:column="13"/></name> <init pos:line="34" pos:column="14">= <expr><literal type="number" pos:line="34" pos:column="16">0<pos:position pos:line="34" pos:column="17"/></literal></expr></init></decl>;<pos:position pos:line="34" pos:column="18"/></decl_stmt>
  <for pos:line="35" pos:column="3">for <control pos:line="35" pos:column="7">(<init><decl><type><name pos:line="35" pos:column="8">size_t<pos:position pos:line="35" pos:column="14"/></name></type> <name pos:line="35" pos:column="15">i<pos:position pos:line="35" pos:column="16"/></name> <init pos:line="35" pos:column="17">= <expr><name pos:line="35" pos:column="19">lower_bin<pos:position pos:line="35" pos:column="28"/></name></expr></init></decl>;<pos:position pos:line="35" pos:column="29"/></init> <condition><expr><name pos:line="35" pos:column="30">i<pos:position pos:line="35" pos:column="31"/></name> <operator pos:line="35" pos:column="32">&lt;=<pos:position pos:line="35" pos:column="37"/></operator> <name pos:line="35" pos:column="35">upper_bin<pos:position pos:line="35" pos:column="44"/></name></expr>;<pos:position pos:line="35" pos:column="45"/></condition> <incr><expr><name pos:line="35" pos:column="46">i<pos:position pos:line="35" pos:column="47"/></name><operator pos:line="35" pos:column="47">++<pos:position pos:line="35" pos:column="49"/></operator></expr></incr>)<pos:position pos:line="35" pos:column="50"/></control>
    <block type="pseudo"><expr_stmt><expr><name pos:line="36" pos:column="5">sum<pos:position pos:line="36" pos:column="8"/></name> <operator pos:line="36" pos:column="9">+=<pos:position pos:line="36" pos:column="11"/></operator> <name><name pos:line="36" pos:column="12">lc<pos:position pos:line="36" pos:column="14"/></name><operator pos:line="36" pos:column="14">-&gt;<pos:position pos:line="36" pos:column="19"/></operator><name pos:line="36" pos:column="16">histogram<pos:position pos:line="36" pos:column="25"/></name><index pos:line="36" pos:column="25">[<expr><name pos:line="36" pos:column="26">i<pos:position pos:line="36" pos:column="27"/></name></expr>]<pos:position pos:line="36" pos:column="28"/></index></name></expr>;<pos:position pos:line="36" pos:column="29"/></expr_stmt></block></for>

  <if pos:line="38" pos:column="3">if <condition pos:line="38" pos:column="6">(<expr><name pos:line="38" pos:column="7">lower<pos:position pos:line="38" pos:column="12"/></name></expr>)<pos:position pos:line="38" pos:column="13"/></condition><then pos:line="38" pos:column="13"> <block pos:line="38" pos:column="14">{
    <comment type="block" pos:line="39" pos:column="5">/* Approximate ratio of requests in lower_bin, that fall between
     * lower_bin_boundary and lower. This ratio is then subtracted from sum to
     * increase accuracy. */</comment>
    <decl_stmt><decl><type><name pos:line="42" pos:column="5">cdtime_t<pos:position pos:line="42" pos:column="13"/></name></type> <name pos:line="42" pos:column="14">lower_bin_boundary<pos:position pos:line="42" pos:column="32"/></name> <init pos:line="42" pos:column="33">= <expr><name pos:line="42" pos:column="35">lower_bin<pos:position pos:line="42" pos:column="44"/></name> <operator pos:line="42" pos:column="45">*<pos:position pos:line="42" pos:column="46"/></operator> <name><name pos:line="42" pos:column="47">lc<pos:position pos:line="42" pos:column="49"/></name><operator pos:line="42" pos:column="49">-&gt;<pos:position pos:line="42" pos:column="54"/></operator><name pos:line="42" pos:column="51">bin_width<pos:position pos:line="42" pos:column="60"/></name></name></expr></init></decl>;<pos:position pos:line="42" pos:column="61"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="43" pos:column="5">assert<pos:position pos:line="43" pos:column="11"/></name><argument_list pos:line="43" pos:column="11">(<argument><expr><name pos:line="43" pos:column="12">lower<pos:position pos:line="43" pos:column="17"/></name> <operator pos:line="43" pos:column="18">&gt;=<pos:position pos:line="43" pos:column="23"/></operator> <name pos:line="43" pos:column="21">lower_bin_boundary<pos:position pos:line="43" pos:column="39"/></name></expr></argument>)<pos:position pos:line="43" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="41"/></expr_stmt>
    <decl_stmt><decl><type><name pos:line="44" pos:column="5">double<pos:position pos:line="44" pos:column="11"/></name></type> <name pos:line="44" pos:column="12">lower_ratio<pos:position pos:line="44" pos:column="23"/></name> <init pos:line="44" pos:column="24">=
        <expr><call pos:line="45" pos:column="9">(<name pos:line="45" pos:column="10">double<pos:position pos:line="45" pos:column="16"/></name>)<argument_list pos:line="45" pos:column="17">(<argument><expr><name pos:line="45" pos:column="18">lower<pos:position pos:line="45" pos:column="23"/></name> <operator pos:line="45" pos:column="24">-<pos:position pos:line="45" pos:column="25"/></operator> <name pos:line="45" pos:column="26">lower_bin_boundary<pos:position pos:line="45" pos:column="44"/></name></expr></argument>)<pos:position pos:line="45" pos:column="45"/></argument_list></call> <operator pos:line="45" pos:column="46">/<pos:position pos:line="45" pos:column="47"/></operator> <operator pos:line="45" pos:column="48">(<pos:position pos:line="45" pos:column="49"/></operator><operator pos:line="45" pos:column="49">(<pos:position pos:line="45" pos:column="50"/></operator><name pos:line="45" pos:column="50">double<pos:position pos:line="45" pos:column="56"/></name><operator pos:line="45" pos:column="56">)<pos:position pos:line="45" pos:column="57"/></operator><name><name pos:line="45" pos:column="57">lc<pos:position pos:line="45" pos:column="59"/></name><operator pos:line="45" pos:column="59">-&gt;<pos:position pos:line="45" pos:column="64"/></operator><name pos:line="45" pos:column="61">bin_width<pos:position pos:line="45" pos:column="70"/></name></name><operator pos:line="45" pos:column="70">)<pos:position pos:line="45" pos:column="71"/></operator></expr></init></decl>;<pos:position pos:line="45" pos:column="72"/></decl_stmt>
    <expr_stmt><expr><name pos:line="46" pos:column="5">sum<pos:position pos:line="46" pos:column="8"/></name> <operator pos:line="46" pos:column="9">-=<pos:position pos:line="46" pos:column="11"/></operator> <name pos:line="46" pos:column="12">lower_ratio<pos:position pos:line="46" pos:column="23"/></name> <operator pos:line="46" pos:column="24">*<pos:position pos:line="46" pos:column="25"/></operator> <name><name pos:line="46" pos:column="26">lc<pos:position pos:line="46" pos:column="28"/></name><operator pos:line="46" pos:column="28">-&gt;<pos:position pos:line="46" pos:column="33"/></operator><name pos:line="46" pos:column="30">histogram<pos:position pos:line="46" pos:column="39"/></name><index pos:line="46" pos:column="39">[<expr><name pos:line="46" pos:column="40">lower_bin<pos:position pos:line="46" pos:column="49"/></name></expr>]<pos:position pos:line="46" pos:column="50"/></index></name></expr>;<pos:position pos:line="46" pos:column="51"/></expr_stmt>
  }<pos:position pos:line="47" pos:column="4"/></block></then></if>

  <if pos:line="49" pos:column="3">if <condition pos:line="49" pos:column="6">(<expr><name pos:line="49" pos:column="7">upper<pos:position pos:line="49" pos:column="12"/></name></expr>)<pos:position pos:line="49" pos:column="13"/></condition><then pos:line="49" pos:column="13"> <block pos:line="49" pos:column="14">{
    <comment type="block" pos:line="50" pos:column="5">/* As above: approximate ratio of requests in upper_bin, that fall between
     * upper and upper_bin_boundary. */</comment>
    <decl_stmt><decl><type><name pos:line="52" pos:column="5">cdtime_t<pos:position pos:line="52" pos:column="13"/></name></type> <name pos:line="52" pos:column="14">upper_bin_boundary<pos:position pos:line="52" pos:column="32"/></name> <init pos:line="52" pos:column="33">= <expr><operator pos:line="52" pos:column="35">(<pos:position pos:line="52" pos:column="36"/></operator><name pos:line="52" pos:column="36">upper_bin<pos:position pos:line="52" pos:column="45"/></name> <operator pos:line="52" pos:column="46">+<pos:position pos:line="52" pos:column="47"/></operator> <literal type="number" pos:line="52" pos:column="48">1<pos:position pos:line="52" pos:column="49"/></literal><operator pos:line="52" pos:column="49">)<pos:position pos:line="52" pos:column="50"/></operator> <operator pos:line="52" pos:column="51">*<pos:position pos:line="52" pos:column="52"/></operator> <name><name pos:line="52" pos:column="53">lc<pos:position pos:line="52" pos:column="55"/></name><operator pos:line="52" pos:column="55">-&gt;<pos:position pos:line="52" pos:column="60"/></operator><name pos:line="52" pos:column="57">bin_width<pos:position pos:line="52" pos:column="66"/></name></name></expr></init></decl>;<pos:position pos:line="52" pos:column="67"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="53" pos:column="5">assert<pos:position pos:line="53" pos:column="11"/></name><argument_list pos:line="53" pos:column="11">(<argument><expr><name pos:line="53" pos:column="12">upper<pos:position pos:line="53" pos:column="17"/></name> <operator pos:line="53" pos:column="18">&lt;=<pos:position pos:line="53" pos:column="23"/></operator> <name pos:line="53" pos:column="21">upper_bin_boundary<pos:position pos:line="53" pos:column="39"/></name></expr></argument>)<pos:position pos:line="53" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="41"/></expr_stmt>
    <decl_stmt><decl><type><name pos:line="54" pos:column="5">double<pos:position pos:line="54" pos:column="11"/></name></type> <name pos:line="54" pos:column="12">ratio<pos:position pos:line="54" pos:column="17"/></name> <init pos:line="54" pos:column="18">= <expr><call pos:line="54" pos:column="20">(<name pos:line="54" pos:column="21">double<pos:position pos:line="54" pos:column="27"/></name>)<argument_list pos:line="54" pos:column="28">(<argument><expr><name pos:line="54" pos:column="29">upper_bin_boundary<pos:position pos:line="54" pos:column="47"/></name> <operator pos:line="54" pos:column="48">-<pos:position pos:line="54" pos:column="49"/></operator> <name pos:line="54" pos:column="50">upper<pos:position pos:line="54" pos:column="55"/></name></expr></argument>)<pos:position pos:line="54" pos:column="56"/></argument_list></call> <operator pos:line="54" pos:column="57">/<pos:position pos:line="54" pos:column="58"/></operator> <operator pos:line="54" pos:column="59">(<pos:position pos:line="54" pos:column="60"/></operator><name pos:line="54" pos:column="60">double<pos:position pos:line="54" pos:column="66"/></name><operator pos:line="54" pos:column="66">)<pos:position pos:line="54" pos:column="67"/></operator><name><name pos:line="54" pos:column="67">lc<pos:position pos:line="54" pos:column="69"/></name><operator pos:line="54" pos:column="69">-&gt;<pos:position pos:line="54" pos:column="74"/></operator><name pos:line="54" pos:column="71">bin_width<pos:position pos:line="54" pos:column="80"/></name></name></expr></init></decl>;<pos:position pos:line="54" pos:column="81"/></decl_stmt>
    <expr_stmt><expr><name pos:line="55" pos:column="5">sum<pos:position pos:line="55" pos:column="8"/></name> <operator pos:line="55" pos:column="9">-=<pos:position pos:line="55" pos:column="11"/></operator> <name pos:line="55" pos:column="12">ratio<pos:position pos:line="55" pos:column="17"/></name> <operator pos:line="55" pos:column="18">*<pos:position pos:line="55" pos:column="19"/></operator> <name><name pos:line="55" pos:column="20">lc<pos:position pos:line="55" pos:column="22"/></name><operator pos:line="55" pos:column="22">-&gt;<pos:position pos:line="55" pos:column="27"/></operator><name pos:line="55" pos:column="24">histogram<pos:position pos:line="55" pos:column="33"/></name><index pos:line="55" pos:column="33">[<expr><name pos:line="55" pos:column="34">upper_bin<pos:position pos:line="55" pos:column="43"/></name></expr>]<pos:position pos:line="55" pos:column="44"/></index></name></expr>;<pos:position pos:line="55" pos:column="45"/></expr_stmt>
  }<pos:position pos:line="56" pos:column="4"/></block></then></if>

  <return pos:line="58" pos:column="3">return <expr><name pos:line="58" pos:column="10">sum<pos:position pos:line="58" pos:column="13"/></name> <operator pos:line="58" pos:column="14">/<pos:position pos:line="58" pos:column="15"/></operator> <operator pos:line="58" pos:column="16">(<pos:position pos:line="58" pos:column="17"/></operator><call><name pos:line="58" pos:column="17">CDTIME_T_TO_DOUBLE<pos:position pos:line="58" pos:column="35"/></name><argument_list pos:line="58" pos:column="35">(<argument><expr><name pos:line="58" pos:column="36">now<pos:position pos:line="58" pos:column="39"/></name> <operator pos:line="58" pos:column="40">-<pos:position pos:line="58" pos:column="41"/></operator> <name><name pos:line="58" pos:column="42">lc<pos:position pos:line="58" pos:column="44"/></name><operator pos:line="58" pos:column="44">-&gt;<pos:position pos:line="58" pos:column="49"/></operator><name pos:line="58" pos:column="46">start_time<pos:position pos:line="58" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="58" pos:column="57"/></argument_list></call><operator pos:line="58" pos:column="57">)<pos:position pos:line="58" pos:column="58"/></operator></expr>;<pos:position pos:line="58" pos:column="59"/></return>
}<pos:position pos:line="59" pos:column="2"/></block></function></unit>
