<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_556_collectd-5.0.5.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">mach_get_task_name<pos:position pos:line="1" pos:column="30"/></name> <parameter_list pos:line="1" pos:column="31">(<parameter><decl><type><name pos:line="1" pos:column="32">task_t<pos:position pos:line="1" pos:column="38"/></name></type> <name pos:line="1" pos:column="39">t<pos:position pos:line="1" pos:column="40"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="42">int<pos:position pos:line="1" pos:column="45"/></name> <modifier pos:line="1" pos:column="46">*<pos:position pos:line="1" pos:column="47"/></modifier></type><name pos:line="1" pos:column="47">pid<pos:position pos:line="1" pos:column="50"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="52">char<pos:position pos:line="1" pos:column="56"/></name> <modifier pos:line="1" pos:column="57">*<pos:position pos:line="1" pos:column="58"/></modifier></type><name pos:line="1" pos:column="58">name<pos:position pos:line="1" pos:column="62"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="64">size_t<pos:position pos:line="1" pos:column="70"/></name></type> <name pos:line="1" pos:column="71">name_max_len<pos:position pos:line="1" pos:column="83"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="84"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name><name pos:line="3" pos:column="13">mib<pos:position pos:line="3" pos:column="16"/></name><index pos:line="3" pos:column="16">[<expr><literal type="number" pos:line="3" pos:column="17">4<pos:position pos:line="3" pos:column="18"/></literal></expr>]<pos:position pos:line="3" pos:column="19"/></index></name></decl>;<pos:position pos:line="3" pos:column="20"/></decl_stmt>

	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">kinfo_proc<pos:position pos:line="5" pos:column="26"/></name></name></type> <name pos:line="5" pos:column="27">kp<pos:position pos:line="5" pos:column="29"/></name></decl>;<pos:position pos:line="5" pos:column="30"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">size_t<pos:position pos:line="6" pos:column="15"/></name></type>            <name pos:line="6" pos:column="27">kp_size<pos:position pos:line="6" pos:column="34"/></name></decl>;<pos:position pos:line="6" pos:column="35"/></decl_stmt>

	<expr_stmt><expr><name><name pos:line="8" pos:column="9">mib<pos:position pos:line="8" pos:column="12"/></name><index pos:line="8" pos:column="12">[<expr><literal type="number" pos:line="8" pos:column="13">0<pos:position pos:line="8" pos:column="14"/></literal></expr>]<pos:position pos:line="8" pos:column="15"/></index></name> <operator pos:line="8" pos:column="16">=<pos:position pos:line="8" pos:column="17"/></operator> <name pos:line="8" pos:column="18">CTL_KERN<pos:position pos:line="8" pos:column="26"/></name></expr>;<pos:position pos:line="8" pos:column="27"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="9" pos:column="9">mib<pos:position pos:line="9" pos:column="12"/></name><index pos:line="9" pos:column="12">[<expr><literal type="number" pos:line="9" pos:column="13">1<pos:position pos:line="9" pos:column="14"/></literal></expr>]<pos:position pos:line="9" pos:column="15"/></index></name> <operator pos:line="9" pos:column="16">=<pos:position pos:line="9" pos:column="17"/></operator> <name pos:line="9" pos:column="18">KERN_PROC<pos:position pos:line="9" pos:column="27"/></name></expr>;<pos:position pos:line="9" pos:column="28"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="10" pos:column="9">mib<pos:position pos:line="10" pos:column="12"/></name><index pos:line="10" pos:column="12">[<expr><literal type="number" pos:line="10" pos:column="13">2<pos:position pos:line="10" pos:column="14"/></literal></expr>]<pos:position pos:line="10" pos:column="15"/></index></name> <operator pos:line="10" pos:column="16">=<pos:position pos:line="10" pos:column="17"/></operator> <name pos:line="10" pos:column="18">KERN_PROC_PID<pos:position pos:line="10" pos:column="31"/></name></expr>;<pos:position pos:line="10" pos:column="32"/></expr_stmt>

	<if pos:line="12" pos:column="9">if <condition pos:line="12" pos:column="12">(<expr><call><name pos:line="12" pos:column="13">pid_for_task<pos:position pos:line="12" pos:column="25"/></name> <argument_list pos:line="12" pos:column="26">(<argument><expr><name pos:line="12" pos:column="27">t<pos:position pos:line="12" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="30">pid<pos:position pos:line="12" pos:column="33"/></name></expr></argument>)<pos:position pos:line="12" pos:column="34"/></argument_list></call> <operator pos:line="12" pos:column="35">!=<pos:position pos:line="12" pos:column="37"/></operator> <name pos:line="12" pos:column="38">KERN_SUCCESS<pos:position pos:line="12" pos:column="50"/></name></expr>)<pos:position pos:line="12" pos:column="51"/></condition><then pos:line="12" pos:column="51">
		<block type="pseudo"><return pos:line="13" pos:column="17">return <expr><operator pos:line="13" pos:column="24">(<pos:position pos:line="13" pos:column="25"/></operator><operator pos:line="13" pos:column="25">-<pos:position pos:line="13" pos:column="26"/></operator><literal type="number" pos:line="13" pos:column="26">1<pos:position pos:line="13" pos:column="27"/></literal><operator pos:line="13" pos:column="27">)<pos:position pos:line="13" pos:column="28"/></operator></expr>;<pos:position pos:line="13" pos:column="29"/></return></block></then></if>
	<expr_stmt><expr><name><name pos:line="14" pos:column="9">mib<pos:position pos:line="14" pos:column="12"/></name><index pos:line="14" pos:column="12">[<expr><literal type="number" pos:line="14" pos:column="13">3<pos:position pos:line="14" pos:column="14"/></literal></expr>]<pos:position pos:line="14" pos:column="15"/></index></name> <operator pos:line="14" pos:column="16">=<pos:position pos:line="14" pos:column="17"/></operator> <operator pos:line="14" pos:column="18">*<pos:position pos:line="14" pos:column="19"/></operator><name pos:line="14" pos:column="19">pid<pos:position pos:line="14" pos:column="22"/></name></expr>;<pos:position pos:line="14" pos:column="23"/></expr_stmt>

	<expr_stmt><expr><name pos:line="16" pos:column="9">kp_size<pos:position pos:line="16" pos:column="16"/></name> <operator pos:line="16" pos:column="17">=<pos:position pos:line="16" pos:column="18"/></operator> <sizeof pos:line="16" pos:column="19">sizeof <argument_list pos:line="16" pos:column="26">(<argument><expr><name pos:line="16" pos:column="27">kp<pos:position pos:line="16" pos:column="29"/></name></expr></argument>)<pos:position pos:line="16" pos:column="30"/></argument_list></sizeof></expr>;<pos:position pos:line="16" pos:column="31"/></expr_stmt>
	<if pos:line="17" pos:column="9">if <condition pos:line="17" pos:column="12">(<expr><call><name pos:line="17" pos:column="13">sysctl<pos:position pos:line="17" pos:column="19"/></name> <argument_list pos:line="17" pos:column="20">(<argument><expr><name pos:line="17" pos:column="21">mib<pos:position pos:line="17" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="17" pos:column="26">4<pos:position pos:line="17" pos:column="27"/></literal></expr></argument>, <argument><expr><operator pos:line="17" pos:column="29">&amp;<pos:position pos:line="17" pos:column="34"/></operator><name pos:line="17" pos:column="30">kp<pos:position pos:line="17" pos:column="32"/></name></expr></argument>, <argument><expr><operator pos:line="17" pos:column="34">&amp;<pos:position pos:line="17" pos:column="39"/></operator><name pos:line="17" pos:column="35">kp_size<pos:position pos:line="17" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="44">NULL<pos:position pos:line="17" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="17" pos:column="50">0<pos:position pos:line="17" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="52"/></argument_list></call> <operator pos:line="17" pos:column="53">!=<pos:position pos:line="17" pos:column="55"/></operator> <literal type="number" pos:line="17" pos:column="56">0<pos:position pos:line="17" pos:column="57"/></literal></expr>)<pos:position pos:line="17" pos:column="58"/></condition><then pos:line="17" pos:column="58">
		<block type="pseudo"><return pos:line="18" pos:column="17">return <expr><operator pos:line="18" pos:column="24">(<pos:position pos:line="18" pos:column="25"/></operator><operator pos:line="18" pos:column="25">-<pos:position pos:line="18" pos:column="26"/></operator><literal type="number" pos:line="18" pos:column="26">1<pos:position pos:line="18" pos:column="27"/></literal><operator pos:line="18" pos:column="27">)<pos:position pos:line="18" pos:column="28"/></operator></expr>;<pos:position pos:line="18" pos:column="29"/></return></block></then></if>

	<if pos:line="20" pos:column="9">if <condition pos:line="20" pos:column="12">(<expr><name pos:line="20" pos:column="13">name_max_len<pos:position pos:line="20" pos:column="25"/></name> <operator pos:line="20" pos:column="26">&gt;<pos:position pos:line="20" pos:column="30"/></operator> <operator pos:line="20" pos:column="28">(<pos:position pos:line="20" pos:column="29"/></operator><name pos:line="20" pos:column="29">MAXCOMLEN<pos:position pos:line="20" pos:column="38"/></name> <operator pos:line="20" pos:column="39">+<pos:position pos:line="20" pos:column="40"/></operator> <literal type="number" pos:line="20" pos:column="41">1<pos:position pos:line="20" pos:column="42"/></literal><operator pos:line="20" pos:column="42">)<pos:position pos:line="20" pos:column="43"/></operator></expr>)<pos:position pos:line="20" pos:column="44"/></condition><then pos:line="20" pos:column="44">
		<block type="pseudo"><expr_stmt><expr><name pos:line="21" pos:column="17">name_max_len<pos:position pos:line="21" pos:column="29"/></name> <operator pos:line="21" pos:column="30">=<pos:position pos:line="21" pos:column="31"/></operator> <name pos:line="21" pos:column="32">MAXCOMLEN<pos:position pos:line="21" pos:column="41"/></name> <operator pos:line="21" pos:column="42">+<pos:position pos:line="21" pos:column="43"/></operator> <literal type="number" pos:line="21" pos:column="44">1<pos:position pos:line="21" pos:column="45"/></literal></expr>;<pos:position pos:line="21" pos:column="46"/></expr_stmt></block></then></if>

	<expr_stmt><expr><call><name pos:line="23" pos:column="9">strncpy<pos:position pos:line="23" pos:column="16"/></name> <argument_list pos:line="23" pos:column="17">(<argument><expr><name pos:line="23" pos:column="18">name<pos:position pos:line="23" pos:column="22"/></name></expr></argument>, <argument><expr><name><name pos:line="23" pos:column="24">kp<pos:position pos:line="23" pos:column="26"/></name><operator pos:line="23" pos:column="26">.<pos:position pos:line="23" pos:column="27"/></operator><name pos:line="23" pos:column="27">kp_proc<pos:position pos:line="23" pos:column="34"/></name><operator pos:line="23" pos:column="34">.<pos:position pos:line="23" pos:column="35"/></operator><name pos:line="23" pos:column="35">p_comm<pos:position pos:line="23" pos:column="41"/></name></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="43">name_max_len<pos:position pos:line="23" pos:column="55"/></name> <operator pos:line="23" pos:column="56">-<pos:position pos:line="23" pos:column="57"/></operator> <literal type="number" pos:line="23" pos:column="58">1<pos:position pos:line="23" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="61"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="24" pos:column="9">name<pos:position pos:line="24" pos:column="13"/></name><index pos:line="24" pos:column="13">[<expr><name pos:line="24" pos:column="14">name_max_len<pos:position pos:line="24" pos:column="26"/></name> <operator pos:line="24" pos:column="27">-<pos:position pos:line="24" pos:column="28"/></operator> <literal type="number" pos:line="24" pos:column="29">1<pos:position pos:line="24" pos:column="30"/></literal></expr>]<pos:position pos:line="24" pos:column="31"/></index></name> <operator pos:line="24" pos:column="32">=<pos:position pos:line="24" pos:column="33"/></operator> <literal type="char" pos:line="24" pos:column="34">'\0'<pos:position pos:line="24" pos:column="38"/></literal></expr>;<pos:position pos:line="24" pos:column="39"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="26" pos:column="9">DEBUG<pos:position pos:line="26" pos:column="14"/></name> <argument_list pos:line="26" pos:column="15">(<argument><expr><literal type="string" pos:line="26" pos:column="16">"pid = %i; name = %s;"<pos:position pos:line="26" pos:column="38"/></literal></expr></argument>, <argument><expr><operator pos:line="26" pos:column="40">*<pos:position pos:line="26" pos:column="41"/></operator><name pos:line="26" pos:column="41">pid<pos:position pos:line="26" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="46">name<pos:position pos:line="26" pos:column="50"/></name></expr></argument>)<pos:position pos:line="26" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="52"/></expr_stmt>

	<comment type="block" pos:line="28" pos:column="9">/* We don't do the special handling for `p_comm == "LaunchCFMApp"' as
	 * `top' does it, because it is a lot of work and only used when
	 * debugging. -octo */</comment>

	<return pos:line="32" pos:column="9">return <expr><operator pos:line="32" pos:column="16">(<pos:position pos:line="32" pos:column="17"/></operator><literal type="number" pos:line="32" pos:column="17">0<pos:position pos:line="32" pos:column="18"/></literal><operator pos:line="32" pos:column="18">)<pos:position pos:line="32" pos:column="19"/></operator></expr>;<pos:position pos:line="32" pos:column="20"/></return>
}<pos:position pos:line="33" pos:column="2"/></block></function></unit>
