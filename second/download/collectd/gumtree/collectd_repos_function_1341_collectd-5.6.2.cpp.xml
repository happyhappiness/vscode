<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1341_collectd-5.6.2.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">wr_write<pos:position pos:line="1" pos:column="20"/></name><parameter_list pos:line="1" pos:column="20">(<parameter><decl><type><specifier pos:line="1" pos:column="21">const<pos:position pos:line="1" pos:column="26"/></specifier> <name pos:line="1" pos:column="27">data_set_t<pos:position pos:line="1" pos:column="37"/></name> <modifier pos:line="1" pos:column="38">*<pos:position pos:line="1" pos:column="39"/></modifier></type><name pos:line="1" pos:column="39">ds<pos:position pos:line="1" pos:column="41"/></name></decl></parameter>, <comment type="block" pos:line="1" pos:column="43">/* {{{ */</comment>
                    <parameter><decl><type><specifier pos:line="2" pos:column="21">const<pos:position pos:line="2" pos:column="26"/></specifier> <name pos:line="2" pos:column="27">value_list_t<pos:position pos:line="2" pos:column="39"/></name> <modifier pos:line="2" pos:column="40">*<pos:position pos:line="2" pos:column="41"/></modifier></type><name pos:line="2" pos:column="41">vl<pos:position pos:line="2" pos:column="43"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="45">user_data_t<pos:position pos:line="2" pos:column="56"/></name> <modifier pos:line="2" pos:column="57">*<pos:position pos:line="2" pos:column="58"/></modifier></type><name pos:line="2" pos:column="58">ud<pos:position pos:line="2" pos:column="60"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="61"/></parameter_list> <block pos:line="2" pos:column="62">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">wr_node_t<pos:position pos:line="3" pos:column="12"/></name> <modifier pos:line="3" pos:column="13">*<pos:position pos:line="3" pos:column="14"/></modifier></type><name pos:line="3" pos:column="14">node<pos:position pos:line="3" pos:column="18"/></name> <init pos:line="3" pos:column="19">= <expr><name><name pos:line="3" pos:column="21">ud<pos:position pos:line="3" pos:column="23"/></name><operator pos:line="3" pos:column="23">-&gt;<pos:position pos:line="3" pos:column="28"/></operator><name pos:line="3" pos:column="25">data<pos:position pos:line="3" pos:column="29"/></name></name></expr></init></decl>;<pos:position pos:line="3" pos:column="30"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">char<pos:position pos:line="4" pos:column="7"/></name></type> <name><name pos:line="4" pos:column="8">ident<pos:position pos:line="4" pos:column="13"/></name><index pos:line="4" pos:column="13">[<expr><literal type="number" pos:line="4" pos:column="14">512<pos:position pos:line="4" pos:column="17"/></literal></expr>]<pos:position pos:line="4" pos:column="18"/></index></name></decl>;<pos:position pos:line="4" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">char<pos:position pos:line="5" pos:column="7"/></name></type> <name><name pos:line="5" pos:column="8">key<pos:position pos:line="5" pos:column="11"/></name><index pos:line="5" pos:column="11">[<expr><literal type="number" pos:line="5" pos:column="12">512<pos:position pos:line="5" pos:column="15"/></literal></expr>]<pos:position pos:line="5" pos:column="16"/></index></name></decl>;<pos:position pos:line="5" pos:column="17"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">char<pos:position pos:line="6" pos:column="7"/></name></type> <name><name pos:line="6" pos:column="8">value<pos:position pos:line="6" pos:column="13"/></name><index pos:line="6" pos:column="13">[<expr><literal type="number" pos:line="6" pos:column="14">512<pos:position pos:line="6" pos:column="17"/></literal></expr>]<pos:position pos:line="6" pos:column="18"/></index></name> <init pos:line="6" pos:column="19">= <expr><block pos:line="6" pos:column="21">{<expr><literal type="number" pos:line="6" pos:column="22">0<pos:position pos:line="6" pos:column="23"/></literal></expr>}<pos:position pos:line="6" pos:column="24"/></block></expr></init></decl>;<pos:position pos:line="6" pos:column="25"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">char<pos:position pos:line="7" pos:column="7"/></name></type> <name><name pos:line="7" pos:column="8">time<pos:position pos:line="7" pos:column="12"/></name><index pos:line="7" pos:column="12">[<expr><literal type="number" pos:line="7" pos:column="13">24<pos:position pos:line="7" pos:column="15"/></literal></expr>]<pos:position pos:line="7" pos:column="16"/></index></name></decl>;<pos:position pos:line="7" pos:column="17"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">size_t<pos:position pos:line="8" pos:column="9"/></name></type> <name pos:line="8" pos:column="10">value_size<pos:position pos:line="8" pos:column="20"/></name></decl>;<pos:position pos:line="8" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">char<pos:position pos:line="9" pos:column="7"/></name> <modifier pos:line="9" pos:column="8">*<pos:position pos:line="9" pos:column="9"/></modifier></type><name pos:line="9" pos:column="9">value_ptr<pos:position pos:line="9" pos:column="18"/></name></decl>;<pos:position pos:line="9" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">int<pos:position pos:line="10" pos:column="6"/></name></type> <name pos:line="10" pos:column="7">status<pos:position pos:line="10" pos:column="13"/></name></decl>;<pos:position pos:line="10" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="11" pos:column="3">redisReply<pos:position pos:line="11" pos:column="13"/></name> <modifier pos:line="11" pos:column="14">*<pos:position pos:line="11" pos:column="15"/></modifier></type><name pos:line="11" pos:column="15">rr<pos:position pos:line="11" pos:column="17"/></name></decl>;<pos:position pos:line="11" pos:column="18"/></decl_stmt>

  <expr_stmt><expr><name pos:line="13" pos:column="3">status<pos:position pos:line="13" pos:column="9"/></name> <operator pos:line="13" pos:column="10">=<pos:position pos:line="13" pos:column="11"/></operator> <call><name pos:line="13" pos:column="12">FORMAT_VL<pos:position pos:line="13" pos:column="21"/></name><argument_list pos:line="13" pos:column="21">(<argument><expr><name pos:line="13" pos:column="22">ident<pos:position pos:line="13" pos:column="27"/></name></expr></argument>, <argument><expr><sizeof pos:line="13" pos:column="29">sizeof<argument_list pos:line="13" pos:column="35">(<argument><expr><name pos:line="13" pos:column="36">ident<pos:position pos:line="13" pos:column="41"/></name></expr></argument>)<pos:position pos:line="13" pos:column="42"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="13" pos:column="44">vl<pos:position pos:line="13" pos:column="46"/></name></expr></argument>)<pos:position pos:line="13" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="48"/></expr_stmt>
  <if pos:line="14" pos:column="3">if <condition pos:line="14" pos:column="6">(<expr><name pos:line="14" pos:column="7">status<pos:position pos:line="14" pos:column="13"/></name> <operator pos:line="14" pos:column="14">!=<pos:position pos:line="14" pos:column="16"/></operator> <literal type="number" pos:line="14" pos:column="17">0<pos:position pos:line="14" pos:column="18"/></literal></expr>)<pos:position pos:line="14" pos:column="19"/></condition><then pos:line="14" pos:column="19">
    <block type="pseudo"><return pos:line="15" pos:column="5">return <expr><operator pos:line="15" pos:column="12">(<pos:position pos:line="15" pos:column="13"/></operator><name pos:line="15" pos:column="13">status<pos:position pos:line="15" pos:column="19"/></name><operator pos:line="15" pos:column="19">)<pos:position pos:line="15" pos:column="20"/></operator></expr>;<pos:position pos:line="15" pos:column="21"/></return></block></then></if>
  <expr_stmt><expr><call><name pos:line="16" pos:column="3">ssnprintf<pos:position pos:line="16" pos:column="12"/></name><argument_list pos:line="16" pos:column="12">(<argument><expr><name pos:line="16" pos:column="13">key<pos:position pos:line="16" pos:column="16"/></name></expr></argument>, <argument><expr><sizeof pos:line="16" pos:column="18">sizeof<argument_list pos:line="16" pos:column="24">(<argument><expr><name pos:line="16" pos:column="25">key<pos:position pos:line="16" pos:column="28"/></name></expr></argument>)<pos:position pos:line="16" pos:column="29"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="16" pos:column="31">"%s%s"<pos:position pos:line="16" pos:column="37"/></literal></expr></argument>,
            <argument><expr><ternary><condition><expr><operator pos:line="17" pos:column="13">(<pos:position pos:line="17" pos:column="14"/></operator><name><name pos:line="17" pos:column="14">node<pos:position pos:line="17" pos:column="18"/></name><operator pos:line="17" pos:column="18">-&gt;<pos:position pos:line="17" pos:column="23"/></operator><name pos:line="17" pos:column="20">prefix<pos:position pos:line="17" pos:column="26"/></name></name> <operator pos:line="17" pos:column="27">!=<pos:position pos:line="17" pos:column="29"/></operator> <name pos:line="17" pos:column="30">NULL<pos:position pos:line="17" pos:column="34"/></name><operator pos:line="17" pos:column="34">)<pos:position pos:line="17" pos:column="35"/></operator></expr> ?<pos:position pos:line="17" pos:column="37"/></condition><then pos:line="17" pos:column="37"> <expr><name><name pos:line="17" pos:column="38">node<pos:position pos:line="17" pos:column="42"/></name><operator pos:line="17" pos:column="42">-&gt;<pos:position pos:line="17" pos:column="47"/></operator><name pos:line="17" pos:column="44">prefix<pos:position pos:line="17" pos:column="50"/></name></name></expr> <pos:position pos:line="17" pos:column="51"/></then><else pos:line="17" pos:column="51">: <expr><name pos:line="17" pos:column="53">REDIS_DEFAULT_PREFIX<pos:position pos:line="17" pos:column="73"/></name></expr></else></ternary></expr></argument>,
            <argument><expr><name pos:line="18" pos:column="13">ident<pos:position pos:line="18" pos:column="18"/></name></expr></argument>)<pos:position pos:line="18" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="20"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="19" pos:column="3">ssnprintf<pos:position pos:line="19" pos:column="12"/></name><argument_list pos:line="19" pos:column="12">(<argument><expr><name pos:line="19" pos:column="13">time<pos:position pos:line="19" pos:column="17"/></name></expr></argument>, <argument><expr><sizeof pos:line="19" pos:column="19">sizeof<argument_list pos:line="19" pos:column="25">(<argument><expr><name pos:line="19" pos:column="26">time<pos:position pos:line="19" pos:column="30"/></name></expr></argument>)<pos:position pos:line="19" pos:column="31"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="19" pos:column="33">"%.9f"<pos:position pos:line="19" pos:column="39"/></literal></expr></argument>, <argument><expr><call><name pos:line="19" pos:column="41">CDTIME_T_TO_DOUBLE<pos:position pos:line="19" pos:column="59"/></name><argument_list pos:line="19" pos:column="59">(<argument><expr><name><name pos:line="19" pos:column="60">vl<pos:position pos:line="19" pos:column="62"/></name><operator pos:line="19" pos:column="62">-&gt;<pos:position pos:line="19" pos:column="67"/></operator><name pos:line="19" pos:column="64">time<pos:position pos:line="19" pos:column="68"/></name></name></expr></argument>)<pos:position pos:line="19" pos:column="69"/></argument_list></call></expr></argument>)<pos:position pos:line="19" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="71"/></expr_stmt>

  <expr_stmt><expr><name pos:line="21" pos:column="3">value_size<pos:position pos:line="21" pos:column="13"/></name> <operator pos:line="21" pos:column="14">=<pos:position pos:line="21" pos:column="15"/></operator> <sizeof pos:line="21" pos:column="16">sizeof<argument_list pos:line="21" pos:column="22">(<argument><expr><name pos:line="21" pos:column="23">value<pos:position pos:line="21" pos:column="28"/></name></expr></argument>)<pos:position pos:line="21" pos:column="29"/></argument_list></sizeof></expr>;<pos:position pos:line="21" pos:column="30"/></expr_stmt>
  <expr_stmt><expr><name pos:line="22" pos:column="3">value_ptr<pos:position pos:line="22" pos:column="12"/></name> <operator pos:line="22" pos:column="13">=<pos:position pos:line="22" pos:column="14"/></operator> <operator pos:line="22" pos:column="15">&amp;<pos:position pos:line="22" pos:column="20"/></operator><name><name pos:line="22" pos:column="16">value<pos:position pos:line="22" pos:column="21"/></name><index pos:line="22" pos:column="21">[<expr><literal type="number" pos:line="22" pos:column="22">0<pos:position pos:line="22" pos:column="23"/></literal></expr>]<pos:position pos:line="22" pos:column="24"/></index></name></expr>;<pos:position pos:line="22" pos:column="25"/></expr_stmt>
  <expr_stmt><expr><name pos:line="23" pos:column="3">status<pos:position pos:line="23" pos:column="9"/></name> <operator pos:line="23" pos:column="10">=<pos:position pos:line="23" pos:column="11"/></operator> <call><name pos:line="23" pos:column="12">format_values<pos:position pos:line="23" pos:column="25"/></name><argument_list pos:line="23" pos:column="25">(<argument><expr><name pos:line="23" pos:column="26">value_ptr<pos:position pos:line="23" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="37">value_size<pos:position pos:line="23" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="49">ds<pos:position pos:line="23" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="53">vl<pos:position pos:line="23" pos:column="55"/></name></expr></argument>, <argument><expr><name><name pos:line="23" pos:column="57">node<pos:position pos:line="23" pos:column="61"/></name><operator pos:line="23" pos:column="61">-&gt;<pos:position pos:line="23" pos:column="66"/></operator><name pos:line="23" pos:column="63">store_rates<pos:position pos:line="23" pos:column="74"/></name></name></expr></argument>)<pos:position pos:line="23" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="76"/></expr_stmt>
  <if pos:line="24" pos:column="3">if <condition pos:line="24" pos:column="6">(<expr><name pos:line="24" pos:column="7">status<pos:position pos:line="24" pos:column="13"/></name> <operator pos:line="24" pos:column="14">!=<pos:position pos:line="24" pos:column="16"/></operator> <literal type="number" pos:line="24" pos:column="17">0<pos:position pos:line="24" pos:column="18"/></literal></expr>)<pos:position pos:line="24" pos:column="19"/></condition><then pos:line="24" pos:column="19">
    <block type="pseudo"><return pos:line="25" pos:column="5">return <expr><operator pos:line="25" pos:column="12">(<pos:position pos:line="25" pos:column="13"/></operator><name pos:line="25" pos:column="13">status<pos:position pos:line="25" pos:column="19"/></name><operator pos:line="25" pos:column="19">)<pos:position pos:line="25" pos:column="20"/></operator></expr>;<pos:position pos:line="25" pos:column="21"/></return></block></then></if>

  <expr_stmt><expr><call><name pos:line="27" pos:column="3">pthread_mutex_lock<pos:position pos:line="27" pos:column="21"/></name><argument_list pos:line="27" pos:column="21">(<argument><expr><operator pos:line="27" pos:column="22">&amp;<pos:position pos:line="27" pos:column="27"/></operator><name><name pos:line="27" pos:column="23">node<pos:position pos:line="27" pos:column="27"/></name><operator pos:line="27" pos:column="27">-&gt;<pos:position pos:line="27" pos:column="32"/></operator><name pos:line="27" pos:column="29">lock<pos:position pos:line="27" pos:column="33"/></name></name></expr></argument>)<pos:position pos:line="27" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="35"/></expr_stmt>

  <if pos:line="29" pos:column="3">if <condition pos:line="29" pos:column="6">(<expr><name><name pos:line="29" pos:column="7">node<pos:position pos:line="29" pos:column="11"/></name><operator pos:line="29" pos:column="11">-&gt;<pos:position pos:line="29" pos:column="16"/></operator><name pos:line="29" pos:column="13">conn<pos:position pos:line="29" pos:column="17"/></name></name> <operator pos:line="29" pos:column="18">==<pos:position pos:line="29" pos:column="20"/></operator> <name pos:line="29" pos:column="21">NULL<pos:position pos:line="29" pos:column="25"/></name></expr>)<pos:position pos:line="29" pos:column="26"/></condition><then pos:line="29" pos:column="26"> <block pos:line="29" pos:column="27">{
    <expr_stmt><expr><name><name pos:line="30" pos:column="5">node<pos:position pos:line="30" pos:column="9"/></name><operator pos:line="30" pos:column="9">-&gt;<pos:position pos:line="30" pos:column="14"/></operator><name pos:line="30" pos:column="11">conn<pos:position pos:line="30" pos:column="15"/></name></name> <operator pos:line="30" pos:column="16">=<pos:position pos:line="30" pos:column="17"/></operator>
        <call><name pos:line="31" pos:column="9">redisConnectWithTimeout<pos:position pos:line="31" pos:column="32"/></name><argument_list pos:line="31" pos:column="32">(<argument><expr><operator pos:line="31" pos:column="33">(<pos:position pos:line="31" pos:column="34"/></operator><name pos:line="31" pos:column="34">char<pos:position pos:line="31" pos:column="38"/></name> <operator pos:line="31" pos:column="39">*<pos:position pos:line="31" pos:column="40"/></operator><operator pos:line="31" pos:column="40">)<pos:position pos:line="31" pos:column="41"/></operator><name><name pos:line="31" pos:column="41">node<pos:position pos:line="31" pos:column="45"/></name><operator pos:line="31" pos:column="45">-&gt;<pos:position pos:line="31" pos:column="50"/></operator><name pos:line="31" pos:column="47">host<pos:position pos:line="31" pos:column="51"/></name></name></expr></argument>, <argument><expr><name><name pos:line="31" pos:column="53">node<pos:position pos:line="31" pos:column="57"/></name><operator pos:line="31" pos:column="57">-&gt;<pos:position pos:line="31" pos:column="62"/></operator><name pos:line="31" pos:column="59">port<pos:position pos:line="31" pos:column="63"/></name></name></expr></argument>, <argument><expr><name><name pos:line="31" pos:column="65">node<pos:position pos:line="31" pos:column="69"/></name><operator pos:line="31" pos:column="69">-&gt;<pos:position pos:line="31" pos:column="74"/></operator><name pos:line="31" pos:column="71">timeout<pos:position pos:line="31" pos:column="78"/></name></name></expr></argument>)<pos:position pos:line="31" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="80"/></expr_stmt>
    <if pos:line="32" pos:column="5">if <condition pos:line="32" pos:column="8">(<expr><name><name pos:line="32" pos:column="9">node<pos:position pos:line="32" pos:column="13"/></name><operator pos:line="32" pos:column="13">-&gt;<pos:position pos:line="32" pos:column="18"/></operator><name pos:line="32" pos:column="15">conn<pos:position pos:line="32" pos:column="19"/></name></name> <operator pos:line="32" pos:column="20">==<pos:position pos:line="32" pos:column="22"/></operator> <name pos:line="32" pos:column="23">NULL<pos:position pos:line="32" pos:column="27"/></name></expr>)<pos:position pos:line="32" pos:column="28"/></condition><then pos:line="32" pos:column="28"> <block pos:line="32" pos:column="29">{
      <expr_stmt><expr><call><name pos:line="33" pos:column="7">ERROR<pos:position pos:line="33" pos:column="12"/></name><argument_list pos:line="33" pos:column="12">(<argument><expr><literal type="string" pos:line="33" pos:column="13">"write_redis plugin: Connecting to host \"%s\" (port %i) failed: "<pos:position pos:line="33" pos:column="79"/></literal>
            <literal type="string" pos:line="34" pos:column="13">"Unknown reason"<pos:position pos:line="34" pos:column="29"/></literal></expr></argument>,
            <argument><expr><ternary><condition><expr><operator pos:line="35" pos:column="13">(<pos:position pos:line="35" pos:column="14"/></operator><name><name pos:line="35" pos:column="14">node<pos:position pos:line="35" pos:column="18"/></name><operator pos:line="35" pos:column="18">-&gt;<pos:position pos:line="35" pos:column="23"/></operator><name pos:line="35" pos:column="20">host<pos:position pos:line="35" pos:column="24"/></name></name> <operator pos:line="35" pos:column="25">!=<pos:position pos:line="35" pos:column="27"/></operator> <name pos:line="35" pos:column="28">NULL<pos:position pos:line="35" pos:column="32"/></name><operator pos:line="35" pos:column="32">)<pos:position pos:line="35" pos:column="33"/></operator></expr> ?<pos:position pos:line="35" pos:column="35"/></condition><then pos:line="35" pos:column="35"> <expr><name><name pos:line="35" pos:column="36">node<pos:position pos:line="35" pos:column="40"/></name><operator pos:line="35" pos:column="40">-&gt;<pos:position pos:line="35" pos:column="45"/></operator><name pos:line="35" pos:column="42">host<pos:position pos:line="35" pos:column="46"/></name></name></expr> <pos:position pos:line="35" pos:column="47"/></then><else pos:line="35" pos:column="47">: <expr><literal type="string" pos:line="35" pos:column="49">"localhost"<pos:position pos:line="35" pos:column="60"/></literal></expr></else></ternary></expr></argument>,
            <argument><expr><ternary><condition><expr><operator pos:line="36" pos:column="13">(<pos:position pos:line="36" pos:column="14"/></operator><name><name pos:line="36" pos:column="14">node<pos:position pos:line="36" pos:column="18"/></name><operator pos:line="36" pos:column="18">-&gt;<pos:position pos:line="36" pos:column="23"/></operator><name pos:line="36" pos:column="20">port<pos:position pos:line="36" pos:column="24"/></name></name> <operator pos:line="36" pos:column="25">!=<pos:position pos:line="36" pos:column="27"/></operator> <literal type="number" pos:line="36" pos:column="28">0<pos:position pos:line="36" pos:column="29"/></literal><operator pos:line="36" pos:column="29">)<pos:position pos:line="36" pos:column="30"/></operator></expr> ?<pos:position pos:line="36" pos:column="32"/></condition><then pos:line="36" pos:column="32"> <expr><name><name pos:line="36" pos:column="33">node<pos:position pos:line="36" pos:column="37"/></name><operator pos:line="36" pos:column="37">-&gt;<pos:position pos:line="36" pos:column="42"/></operator><name pos:line="36" pos:column="39">port<pos:position pos:line="36" pos:column="43"/></name></name></expr> <pos:position pos:line="36" pos:column="44"/></then><else pos:line="36" pos:column="44">: <expr><literal type="number" pos:line="36" pos:column="46">6379<pos:position pos:line="36" pos:column="50"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="36" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="52"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="37" pos:column="7">pthread_mutex_unlock<pos:position pos:line="37" pos:column="27"/></name><argument_list pos:line="37" pos:column="27">(<argument><expr><operator pos:line="37" pos:column="28">&amp;<pos:position pos:line="37" pos:column="33"/></operator><name><name pos:line="37" pos:column="29">node<pos:position pos:line="37" pos:column="33"/></name><operator pos:line="37" pos:column="33">-&gt;<pos:position pos:line="37" pos:column="38"/></operator><name pos:line="37" pos:column="35">lock<pos:position pos:line="37" pos:column="39"/></name></name></expr></argument>)<pos:position pos:line="37" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="41"/></expr_stmt>
      <return pos:line="38" pos:column="7">return <expr><operator pos:line="38" pos:column="14">(<pos:position pos:line="38" pos:column="15"/></operator><operator pos:line="38" pos:column="15">-<pos:position pos:line="38" pos:column="16"/></operator><literal type="number" pos:line="38" pos:column="16">1<pos:position pos:line="38" pos:column="17"/></literal><operator pos:line="38" pos:column="17">)<pos:position pos:line="38" pos:column="18"/></operator></expr>;<pos:position pos:line="38" pos:column="19"/></return>
    }<pos:position pos:line="39" pos:column="6"/></block></then> <elseif pos:line="39" pos:column="7">else <if pos:line="39" pos:column="12">if <condition pos:line="39" pos:column="15">(<expr><name><name pos:line="39" pos:column="16">node<pos:position pos:line="39" pos:column="20"/></name><operator pos:line="39" pos:column="20">-&gt;<pos:position pos:line="39" pos:column="25"/></operator><name pos:line="39" pos:column="22">conn<pos:position pos:line="39" pos:column="26"/></name><operator pos:line="39" pos:column="26">-&gt;<pos:position pos:line="39" pos:column="31"/></operator><name pos:line="39" pos:column="28">err<pos:position pos:line="39" pos:column="31"/></name></name></expr>)<pos:position pos:line="39" pos:column="32"/></condition><then pos:line="39" pos:column="32"> <block pos:line="39" pos:column="33">{
      <expr_stmt><expr><call><name pos:line="40" pos:column="7">ERROR<pos:position pos:line="40" pos:column="12"/></name><argument_list pos:line="40" pos:column="12">(
          <argument><expr><literal type="string" pos:line="41" pos:column="11">"write_redis plugin: Connecting to host \"%s\" (port %i) failed: %s"<pos:position pos:line="41" pos:column="79"/></literal></expr></argument>,
          <argument><expr><ternary><condition><expr><operator pos:line="42" pos:column="11">(<pos:position pos:line="42" pos:column="12"/></operator><name><name pos:line="42" pos:column="12">node<pos:position pos:line="42" pos:column="16"/></name><operator pos:line="42" pos:column="16">-&gt;<pos:position pos:line="42" pos:column="21"/></operator><name pos:line="42" pos:column="18">host<pos:position pos:line="42" pos:column="22"/></name></name> <operator pos:line="42" pos:column="23">!=<pos:position pos:line="42" pos:column="25"/></operator> <name pos:line="42" pos:column="26">NULL<pos:position pos:line="42" pos:column="30"/></name><operator pos:line="42" pos:column="30">)<pos:position pos:line="42" pos:column="31"/></operator></expr> ?<pos:position pos:line="42" pos:column="33"/></condition><then pos:line="42" pos:column="33"> <expr><name><name pos:line="42" pos:column="34">node<pos:position pos:line="42" pos:column="38"/></name><operator pos:line="42" pos:column="38">-&gt;<pos:position pos:line="42" pos:column="43"/></operator><name pos:line="42" pos:column="40">host<pos:position pos:line="42" pos:column="44"/></name></name></expr> <pos:position pos:line="42" pos:column="45"/></then><else pos:line="42" pos:column="45">: <expr><literal type="string" pos:line="42" pos:column="47">"localhost"<pos:position pos:line="42" pos:column="58"/></literal></expr></else></ternary></expr></argument>,
          <argument><expr><ternary><condition><expr><operator pos:line="43" pos:column="11">(<pos:position pos:line="43" pos:column="12"/></operator><name><name pos:line="43" pos:column="12">node<pos:position pos:line="43" pos:column="16"/></name><operator pos:line="43" pos:column="16">-&gt;<pos:position pos:line="43" pos:column="21"/></operator><name pos:line="43" pos:column="18">port<pos:position pos:line="43" pos:column="22"/></name></name> <operator pos:line="43" pos:column="23">!=<pos:position pos:line="43" pos:column="25"/></operator> <literal type="number" pos:line="43" pos:column="26">0<pos:position pos:line="43" pos:column="27"/></literal><operator pos:line="43" pos:column="27">)<pos:position pos:line="43" pos:column="28"/></operator></expr> ?<pos:position pos:line="43" pos:column="30"/></condition><then pos:line="43" pos:column="30"> <expr><name><name pos:line="43" pos:column="31">node<pos:position pos:line="43" pos:column="35"/></name><operator pos:line="43" pos:column="35">-&gt;<pos:position pos:line="43" pos:column="40"/></operator><name pos:line="43" pos:column="37">port<pos:position pos:line="43" pos:column="41"/></name></name></expr> <pos:position pos:line="43" pos:column="42"/></then><else pos:line="43" pos:column="42">: <expr><literal type="number" pos:line="43" pos:column="44">6379<pos:position pos:line="43" pos:column="48"/></literal></expr></else></ternary></expr></argument>, <argument><expr><name><name pos:line="43" pos:column="50">node<pos:position pos:line="43" pos:column="54"/></name><operator pos:line="43" pos:column="54">-&gt;<pos:position pos:line="43" pos:column="59"/></operator><name pos:line="43" pos:column="56">conn<pos:position pos:line="43" pos:column="60"/></name><operator pos:line="43" pos:column="60">-&gt;<pos:position pos:line="43" pos:column="65"/></operator><name pos:line="43" pos:column="62">errstr<pos:position pos:line="43" pos:column="68"/></name></name></expr></argument>)<pos:position pos:line="43" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="70"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="44" pos:column="7">pthread_mutex_unlock<pos:position pos:line="44" pos:column="27"/></name><argument_list pos:line="44" pos:column="27">(<argument><expr><operator pos:line="44" pos:column="28">&amp;<pos:position pos:line="44" pos:column="33"/></operator><name><name pos:line="44" pos:column="29">node<pos:position pos:line="44" pos:column="33"/></name><operator pos:line="44" pos:column="33">-&gt;<pos:position pos:line="44" pos:column="38"/></operator><name pos:line="44" pos:column="35">lock<pos:position pos:line="44" pos:column="39"/></name></name></expr></argument>)<pos:position pos:line="44" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="41"/></expr_stmt>
      <return pos:line="45" pos:column="7">return <expr><operator pos:line="45" pos:column="14">(<pos:position pos:line="45" pos:column="15"/></operator><operator pos:line="45" pos:column="15">-<pos:position pos:line="45" pos:column="16"/></operator><literal type="number" pos:line="45" pos:column="16">1<pos:position pos:line="45" pos:column="17"/></literal><operator pos:line="45" pos:column="17">)<pos:position pos:line="45" pos:column="18"/></operator></expr>;<pos:position pos:line="45" pos:column="19"/></return>
    }<pos:position pos:line="46" pos:column="6"/></block></then></if></elseif></if>

    <expr_stmt><expr><name pos:line="48" pos:column="5">rr<pos:position pos:line="48" pos:column="7"/></name> <operator pos:line="48" pos:column="8">=<pos:position pos:line="48" pos:column="9"/></operator> <call><name pos:line="48" pos:column="10">redisCommand<pos:position pos:line="48" pos:column="22"/></name><argument_list pos:line="48" pos:column="22">(<argument><expr><name><name pos:line="48" pos:column="23">node<pos:position pos:line="48" pos:column="27"/></name><operator pos:line="48" pos:column="27">-&gt;<pos:position pos:line="48" pos:column="32"/></operator><name pos:line="48" pos:column="29">conn<pos:position pos:line="48" pos:column="33"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="48" pos:column="35">"SELECT %d"<pos:position pos:line="48" pos:column="46"/></literal></expr></argument>, <argument><expr><name><name pos:line="48" pos:column="48">node<pos:position pos:line="48" pos:column="52"/></name><operator pos:line="48" pos:column="52">-&gt;<pos:position pos:line="48" pos:column="57"/></operator><name pos:line="48" pos:column="54">database<pos:position pos:line="48" pos:column="62"/></name></name></expr></argument>)<pos:position pos:line="48" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="64"/></expr_stmt>
    <if pos:line="49" pos:column="5">if <condition pos:line="49" pos:column="8">(<expr><name pos:line="49" pos:column="9">rr<pos:position pos:line="49" pos:column="11"/></name> <operator pos:line="49" pos:column="12">==<pos:position pos:line="49" pos:column="14"/></operator> <name pos:line="49" pos:column="15">NULL<pos:position pos:line="49" pos:column="19"/></name></expr>)<pos:position pos:line="49" pos:column="20"/></condition><then pos:line="49" pos:column="20">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="50" pos:column="7">WARNING<pos:position pos:line="50" pos:column="14"/></name><argument_list pos:line="50" pos:column="14">(<argument><expr><literal type="string" pos:line="50" pos:column="15">"SELECT command error. database:%d message:%s"<pos:position pos:line="50" pos:column="61"/></literal></expr></argument>, <argument><expr><name><name pos:line="50" pos:column="63">node<pos:position pos:line="50" pos:column="67"/></name><operator pos:line="50" pos:column="67">-&gt;<pos:position pos:line="50" pos:column="72"/></operator><name pos:line="50" pos:column="69">database<pos:position pos:line="50" pos:column="77"/></name></name></expr></argument>,
              <argument><expr><name><name pos:line="51" pos:column="15">node<pos:position pos:line="51" pos:column="19"/></name><operator pos:line="51" pos:column="19">-&gt;<pos:position pos:line="51" pos:column="24"/></operator><name pos:line="51" pos:column="21">conn<pos:position pos:line="51" pos:column="25"/></name><operator pos:line="51" pos:column="25">-&gt;<pos:position pos:line="51" pos:column="30"/></operator><name pos:line="51" pos:column="27">errstr<pos:position pos:line="51" pos:column="33"/></name></name></expr></argument>)<pos:position pos:line="51" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="35"/></expr_stmt></block></then>
    <else pos:line="52" pos:column="5">else
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="53" pos:column="7">freeReplyObject<pos:position pos:line="53" pos:column="22"/></name><argument_list pos:line="53" pos:column="22">(<argument><expr><name pos:line="53" pos:column="23">rr<pos:position pos:line="53" pos:column="25"/></name></expr></argument>)<pos:position pos:line="53" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="27"/></expr_stmt></block></else></if>
  }<pos:position pos:line="54" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="56" pos:column="3">rr<pos:position pos:line="56" pos:column="5"/></name> <operator pos:line="56" pos:column="6">=<pos:position pos:line="56" pos:column="7"/></operator> <call><name pos:line="56" pos:column="8">redisCommand<pos:position pos:line="56" pos:column="20"/></name><argument_list pos:line="56" pos:column="20">(<argument><expr><name><name pos:line="56" pos:column="21">node<pos:position pos:line="56" pos:column="25"/></name><operator pos:line="56" pos:column="25">-&gt;<pos:position pos:line="56" pos:column="30"/></operator><name pos:line="56" pos:column="27">conn<pos:position pos:line="56" pos:column="31"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="56" pos:column="33">"ZADD %s %s %s"<pos:position pos:line="56" pos:column="48"/></literal></expr></argument>, <argument><expr><name pos:line="56" pos:column="50">key<pos:position pos:line="56" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="56" pos:column="55">time<pos:position pos:line="56" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="56" pos:column="61">value<pos:position pos:line="56" pos:column="66"/></name></expr></argument>)<pos:position pos:line="56" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="68"/></expr_stmt>
  <if pos:line="57" pos:column="3">if <condition pos:line="57" pos:column="6">(<expr><name pos:line="57" pos:column="7">rr<pos:position pos:line="57" pos:column="9"/></name> <operator pos:line="57" pos:column="10">==<pos:position pos:line="57" pos:column="12"/></operator> <name pos:line="57" pos:column="13">NULL<pos:position pos:line="57" pos:column="17"/></name></expr>)<pos:position pos:line="57" pos:column="18"/></condition><then pos:line="57" pos:column="18">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="58" pos:column="5">WARNING<pos:position pos:line="58" pos:column="12"/></name><argument_list pos:line="58" pos:column="12">(<argument><expr><literal type="string" pos:line="58" pos:column="13">"ZADD command error. key:%s message:%s"<pos:position pos:line="58" pos:column="52"/></literal></expr></argument>, <argument><expr><name pos:line="58" pos:column="54">key<pos:position pos:line="58" pos:column="57"/></name></expr></argument>, <argument><expr><name><name pos:line="58" pos:column="59">node<pos:position pos:line="58" pos:column="63"/></name><operator pos:line="58" pos:column="63">-&gt;<pos:position pos:line="58" pos:column="68"/></operator><name pos:line="58" pos:column="65">conn<pos:position pos:line="58" pos:column="69"/></name><operator pos:line="58" pos:column="69">-&gt;<pos:position pos:line="58" pos:column="74"/></operator><name pos:line="58" pos:column="71">errstr<pos:position pos:line="58" pos:column="77"/></name></name></expr></argument>)<pos:position pos:line="58" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="79"/></expr_stmt></block></then>
  <else pos:line="59" pos:column="3">else
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="60" pos:column="5">freeReplyObject<pos:position pos:line="60" pos:column="20"/></name><argument_list pos:line="60" pos:column="20">(<argument><expr><name pos:line="60" pos:column="21">rr<pos:position pos:line="60" pos:column="23"/></name></expr></argument>)<pos:position pos:line="60" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="25"/></expr_stmt></block></else></if>

  <if pos:line="62" pos:column="3">if <condition pos:line="62" pos:column="6">(<expr><name><name pos:line="62" pos:column="7">node<pos:position pos:line="62" pos:column="11"/></name><operator pos:line="62" pos:column="11">-&gt;<pos:position pos:line="62" pos:column="16"/></operator><name pos:line="62" pos:column="13">max_set_size<pos:position pos:line="62" pos:column="25"/></name></name> <operator pos:line="62" pos:column="26">&gt;=<pos:position pos:line="62" pos:column="31"/></operator> <literal type="number" pos:line="62" pos:column="29">0<pos:position pos:line="62" pos:column="30"/></literal></expr>)<pos:position pos:line="62" pos:column="31"/></condition><then pos:line="62" pos:column="31"> <block pos:line="62" pos:column="32">{
    <expr_stmt><expr><name pos:line="63" pos:column="5">rr<pos:position pos:line="63" pos:column="7"/></name> <operator pos:line="63" pos:column="8">=<pos:position pos:line="63" pos:column="9"/></operator> <call><name pos:line="63" pos:column="10">redisCommand<pos:position pos:line="63" pos:column="22"/></name><argument_list pos:line="63" pos:column="22">(<argument><expr><name><name pos:line="63" pos:column="23">node<pos:position pos:line="63" pos:column="27"/></name><operator pos:line="63" pos:column="27">-&gt;<pos:position pos:line="63" pos:column="32"/></operator><name pos:line="63" pos:column="29">conn<pos:position pos:line="63" pos:column="33"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="63" pos:column="35">"ZREMRANGEBYRANK %s %d %d"<pos:position pos:line="63" pos:column="61"/></literal></expr></argument>, <argument><expr><name pos:line="63" pos:column="63">key<pos:position pos:line="63" pos:column="66"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="63" pos:column="68">0<pos:position pos:line="63" pos:column="69"/></literal></expr></argument>,
                      <argument><expr><operator pos:line="64" pos:column="23">(<pos:position pos:line="64" pos:column="24"/></operator><operator pos:line="64" pos:column="24">-<pos:position pos:line="64" pos:column="25"/></operator><literal type="number" pos:line="64" pos:column="25">1<pos:position pos:line="64" pos:column="26"/></literal> <operator pos:line="64" pos:column="27">*<pos:position pos:line="64" pos:column="28"/></operator> <name><name pos:line="64" pos:column="29">node<pos:position pos:line="64" pos:column="33"/></name><operator pos:line="64" pos:column="33">-&gt;<pos:position pos:line="64" pos:column="38"/></operator><name pos:line="64" pos:column="35">max_set_size<pos:position pos:line="64" pos:column="47"/></name></name><operator pos:line="64" pos:column="47">)<pos:position pos:line="64" pos:column="48"/></operator> <operator pos:line="64" pos:column="49">-<pos:position pos:line="64" pos:column="50"/></operator> <literal type="number" pos:line="64" pos:column="51">1<pos:position pos:line="64" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="64" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="54"/></expr_stmt>
    <if pos:line="65" pos:column="5">if <condition pos:line="65" pos:column="8">(<expr><name pos:line="65" pos:column="9">rr<pos:position pos:line="65" pos:column="11"/></name> <operator pos:line="65" pos:column="12">==<pos:position pos:line="65" pos:column="14"/></operator> <name pos:line="65" pos:column="15">NULL<pos:position pos:line="65" pos:column="19"/></name></expr>)<pos:position pos:line="65" pos:column="20"/></condition><then pos:line="65" pos:column="20">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="66" pos:column="7">WARNING<pos:position pos:line="66" pos:column="14"/></name><argument_list pos:line="66" pos:column="14">(<argument><expr><literal type="string" pos:line="66" pos:column="15">"ZREMRANGEBYRANK command error. key:%s message:%s"<pos:position pos:line="66" pos:column="65"/></literal></expr></argument>, <argument><expr><name pos:line="66" pos:column="67">key<pos:position pos:line="66" pos:column="70"/></name></expr></argument>,
              <argument><expr><name><name pos:line="67" pos:column="15">node<pos:position pos:line="67" pos:column="19"/></name><operator pos:line="67" pos:column="19">-&gt;<pos:position pos:line="67" pos:column="24"/></operator><name pos:line="67" pos:column="21">conn<pos:position pos:line="67" pos:column="25"/></name><operator pos:line="67" pos:column="25">-&gt;<pos:position pos:line="67" pos:column="30"/></operator><name pos:line="67" pos:column="27">errstr<pos:position pos:line="67" pos:column="33"/></name></name></expr></argument>)<pos:position pos:line="67" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="35"/></expr_stmt></block></then>
    <else pos:line="68" pos:column="5">else
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="69" pos:column="7">freeReplyObject<pos:position pos:line="69" pos:column="22"/></name><argument_list pos:line="69" pos:column="22">(<argument><expr><name pos:line="69" pos:column="23">rr<pos:position pos:line="69" pos:column="25"/></name></expr></argument>)<pos:position pos:line="69" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="27"/></expr_stmt></block></else></if>
  }<pos:position pos:line="70" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="72" pos:column="3">/* TODO(octo): This is more overhead than necessary. Use the cache and
   * metadata to determine if it is a new metric and call SADD only once for
   * each metric. */</comment>
  <expr_stmt><expr><name pos:line="75" pos:column="3">rr<pos:position pos:line="75" pos:column="5"/></name> <operator pos:line="75" pos:column="6">=<pos:position pos:line="75" pos:column="7"/></operator> <call><name pos:line="75" pos:column="8">redisCommand<pos:position pos:line="75" pos:column="20"/></name><argument_list pos:line="75" pos:column="20">(
      <argument><expr><name><name pos:line="76" pos:column="7">node<pos:position pos:line="76" pos:column="11"/></name><operator pos:line="76" pos:column="11">-&gt;<pos:position pos:line="76" pos:column="16"/></operator><name pos:line="76" pos:column="13">conn<pos:position pos:line="76" pos:column="17"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="76" pos:column="19">"SADD %svalues %s"<pos:position pos:line="76" pos:column="37"/></literal></expr></argument>,
      <argument><expr><ternary><condition><expr><operator pos:line="77" pos:column="7">(<pos:position pos:line="77" pos:column="8"/></operator><name><name pos:line="77" pos:column="8">node<pos:position pos:line="77" pos:column="12"/></name><operator pos:line="77" pos:column="12">-&gt;<pos:position pos:line="77" pos:column="17"/></operator><name pos:line="77" pos:column="14">prefix<pos:position pos:line="77" pos:column="20"/></name></name> <operator pos:line="77" pos:column="21">!=<pos:position pos:line="77" pos:column="23"/></operator> <name pos:line="77" pos:column="24">NULL<pos:position pos:line="77" pos:column="28"/></name><operator pos:line="77" pos:column="28">)<pos:position pos:line="77" pos:column="29"/></operator></expr> ?<pos:position pos:line="77" pos:column="31"/></condition><then pos:line="77" pos:column="31"> <expr><name><name pos:line="77" pos:column="32">node<pos:position pos:line="77" pos:column="36"/></name><operator pos:line="77" pos:column="36">-&gt;<pos:position pos:line="77" pos:column="41"/></operator><name pos:line="77" pos:column="38">prefix<pos:position pos:line="77" pos:column="44"/></name></name></expr> <pos:position pos:line="77" pos:column="45"/></then><else pos:line="77" pos:column="45">: <expr><name pos:line="77" pos:column="47">REDIS_DEFAULT_PREFIX<pos:position pos:line="77" pos:column="67"/></name></expr></else></ternary></expr></argument>, <argument><expr><name pos:line="77" pos:column="69">ident<pos:position pos:line="77" pos:column="74"/></name></expr></argument>)<pos:position pos:line="77" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="76"/></expr_stmt>
  <if pos:line="78" pos:column="3">if <condition pos:line="78" pos:column="6">(<expr><name pos:line="78" pos:column="7">rr<pos:position pos:line="78" pos:column="9"/></name> <operator pos:line="78" pos:column="10">==<pos:position pos:line="78" pos:column="12"/></operator> <name pos:line="78" pos:column="13">NULL<pos:position pos:line="78" pos:column="17"/></name></expr>)<pos:position pos:line="78" pos:column="18"/></condition><then pos:line="78" pos:column="18">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="79" pos:column="5">WARNING<pos:position pos:line="79" pos:column="12"/></name><argument_list pos:line="79" pos:column="12">(<argument><expr><literal type="string" pos:line="79" pos:column="13">"SADD command error. ident:%s message:%s"<pos:position pos:line="79" pos:column="54"/></literal></expr></argument>, <argument><expr><name pos:line="79" pos:column="56">ident<pos:position pos:line="79" pos:column="61"/></name></expr></argument>,
            <argument><expr><name><name pos:line="80" pos:column="13">node<pos:position pos:line="80" pos:column="17"/></name><operator pos:line="80" pos:column="17">-&gt;<pos:position pos:line="80" pos:column="22"/></operator><name pos:line="80" pos:column="19">conn<pos:position pos:line="80" pos:column="23"/></name><operator pos:line="80" pos:column="23">-&gt;<pos:position pos:line="80" pos:column="28"/></operator><name pos:line="80" pos:column="25">errstr<pos:position pos:line="80" pos:column="31"/></name></name></expr></argument>)<pos:position pos:line="80" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="33"/></expr_stmt></block></then>
  <else pos:line="81" pos:column="3">else
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="82" pos:column="5">freeReplyObject<pos:position pos:line="82" pos:column="20"/></name><argument_list pos:line="82" pos:column="20">(<argument><expr><name pos:line="82" pos:column="21">rr<pos:position pos:line="82" pos:column="23"/></name></expr></argument>)<pos:position pos:line="82" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="25"/></expr_stmt></block></else></if>

  <expr_stmt><expr><call><name pos:line="84" pos:column="3">pthread_mutex_unlock<pos:position pos:line="84" pos:column="23"/></name><argument_list pos:line="84" pos:column="23">(<argument><expr><operator pos:line="84" pos:column="24">&amp;<pos:position pos:line="84" pos:column="29"/></operator><name><name pos:line="84" pos:column="25">node<pos:position pos:line="84" pos:column="29"/></name><operator pos:line="84" pos:column="29">-&gt;<pos:position pos:line="84" pos:column="34"/></operator><name pos:line="84" pos:column="31">lock<pos:position pos:line="84" pos:column="35"/></name></name></expr></argument>)<pos:position pos:line="84" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="37"/></expr_stmt>

  <return pos:line="86" pos:column="3">return <expr><operator pos:line="86" pos:column="10">(<pos:position pos:line="86" pos:column="11"/></operator><literal type="number" pos:line="86" pos:column="11">0<pos:position pos:line="86" pos:column="12"/></literal><operator pos:line="86" pos:column="12">)<pos:position pos:line="86" pos:column="13"/></operator></expr>;<pos:position pos:line="86" pos:column="14"/></return>
}<pos:position pos:line="87" pos:column="2"/></block></function></unit>
