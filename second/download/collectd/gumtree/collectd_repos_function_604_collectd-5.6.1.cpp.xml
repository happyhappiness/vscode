<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_604_collectd-5.6.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">agg_instance_read<pos:position pos:line="1" pos:column="29"/></name> <parameter_list pos:line="1" pos:column="30">(<parameter><decl><type><name pos:line="1" pos:column="31">agg_instance_t<pos:position pos:line="1" pos:column="45"/></name> <modifier pos:line="1" pos:column="46">*<pos:position pos:line="1" pos:column="47"/></modifier></type><name pos:line="1" pos:column="47">inst<pos:position pos:line="1" pos:column="51"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="53">cdtime_t<pos:position pos:line="1" pos:column="61"/></name></type> <name pos:line="1" pos:column="62">t<pos:position pos:line="1" pos:column="63"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="64"/></parameter_list> <comment type="block" pos:line="1" pos:column="65">/* {{{ */</comment>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">value_list_t<pos:position pos:line="3" pos:column="15"/></name></type> <name pos:line="3" pos:column="16">vl<pos:position pos:line="3" pos:column="18"/></name> <init pos:line="3" pos:column="19">= <expr><name pos:line="3" pos:column="21">VALUE_LIST_INIT<pos:position pos:line="3" pos:column="36"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="37"/></decl_stmt>

  <comment type="block" pos:line="5" pos:column="3">/* Pre-set all the fields in the value list that will not change per
   * aggregation type (sum, average, ...). The struct will be re-used and must
   * therefore be dispatched using the "secure" function. */</comment>

  <expr_stmt><expr><name><name pos:line="9" pos:column="3">vl<pos:position pos:line="9" pos:column="5"/></name><operator pos:line="9" pos:column="5">.<pos:position pos:line="9" pos:column="6"/></operator><name pos:line="9" pos:column="6">time<pos:position pos:line="9" pos:column="10"/></name></name> <operator pos:line="9" pos:column="11">=<pos:position pos:line="9" pos:column="12"/></operator> <name pos:line="9" pos:column="13">t<pos:position pos:line="9" pos:column="14"/></name></expr>;<pos:position pos:line="9" pos:column="15"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="10" pos:column="3">vl<pos:position pos:line="10" pos:column="5"/></name><operator pos:line="10" pos:column="5">.<pos:position pos:line="10" pos:column="6"/></operator><name pos:line="10" pos:column="6">interval<pos:position pos:line="10" pos:column="14"/></name></name> <operator pos:line="10" pos:column="15">=<pos:position pos:line="10" pos:column="16"/></operator> <literal type="number" pos:line="10" pos:column="17">0<pos:position pos:line="10" pos:column="18"/></literal></expr>;<pos:position pos:line="10" pos:column="19"/></expr_stmt>

  <expr_stmt><expr><name><name pos:line="12" pos:column="3">vl<pos:position pos:line="12" pos:column="5"/></name><operator pos:line="12" pos:column="5">.<pos:position pos:line="12" pos:column="6"/></operator><name pos:line="12" pos:column="6">meta<pos:position pos:line="12" pos:column="10"/></name></name> <operator pos:line="12" pos:column="11">=<pos:position pos:line="12" pos:column="12"/></operator> <call><name pos:line="12" pos:column="13">meta_data_create<pos:position pos:line="12" pos:column="29"/></name> <argument_list pos:line="12" pos:column="30">()<pos:position pos:line="12" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="33"/></expr_stmt>
  <if pos:line="13" pos:column="3">if <condition pos:line="13" pos:column="6">(<expr><name><name pos:line="13" pos:column="7">vl<pos:position pos:line="13" pos:column="9"/></name><operator pos:line="13" pos:column="9">.<pos:position pos:line="13" pos:column="10"/></operator><name pos:line="13" pos:column="10">meta<pos:position pos:line="13" pos:column="14"/></name></name> <operator pos:line="13" pos:column="15">==<pos:position pos:line="13" pos:column="17"/></operator> <name pos:line="13" pos:column="18">NULL<pos:position pos:line="13" pos:column="22"/></name></expr>)<pos:position pos:line="13" pos:column="23"/></condition><then pos:line="13" pos:column="23">
  <block pos:line="14" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="15" pos:column="5">ERROR<pos:position pos:line="15" pos:column="10"/></name> <argument_list pos:line="15" pos:column="11">(<argument><expr><literal type="string" pos:line="15" pos:column="12">"aggregation plugin: meta_data_create failed."<pos:position pos:line="15" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="60"/></expr_stmt>
    <return pos:line="16" pos:column="5">return <expr><operator pos:line="16" pos:column="12">(<pos:position pos:line="16" pos:column="13"/></operator><operator pos:line="16" pos:column="13">-<pos:position pos:line="16" pos:column="14"/></operator><literal type="number" pos:line="16" pos:column="14">1<pos:position pos:line="16" pos:column="15"/></literal><operator pos:line="16" pos:column="15">)<pos:position pos:line="16" pos:column="16"/></operator></expr>;<pos:position pos:line="16" pos:column="17"/></return>
  }<pos:position pos:line="17" pos:column="4"/></block></then></if>
  <expr_stmt><expr><call><name pos:line="18" pos:column="3">meta_data_add_boolean<pos:position pos:line="18" pos:column="24"/></name> <argument_list pos:line="18" pos:column="25">(<argument><expr><name><name pos:line="18" pos:column="26">vl<pos:position pos:line="18" pos:column="28"/></name><operator pos:line="18" pos:column="28">.<pos:position pos:line="18" pos:column="29"/></operator><name pos:line="18" pos:column="29">meta<pos:position pos:line="18" pos:column="33"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="18" pos:column="35">"aggregation:created"<pos:position pos:line="18" pos:column="56"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="18" pos:column="58">1<pos:position pos:line="18" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="61"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="20" pos:column="3">sstrncpy<pos:position pos:line="20" pos:column="11"/></name> <argument_list pos:line="20" pos:column="12">(<argument><expr><name><name pos:line="20" pos:column="13">vl<pos:position pos:line="20" pos:column="15"/></name><operator pos:line="20" pos:column="15">.<pos:position pos:line="20" pos:column="16"/></operator><name pos:line="20" pos:column="16">host<pos:position pos:line="20" pos:column="20"/></name></name></expr></argument>, <argument><expr><name><name pos:line="20" pos:column="22">inst<pos:position pos:line="20" pos:column="26"/></name><operator pos:line="20" pos:column="26">-&gt;<pos:position pos:line="20" pos:column="31"/></operator><name pos:line="20" pos:column="28">ident<pos:position pos:line="20" pos:column="33"/></name><operator pos:line="20" pos:column="33">.<pos:position pos:line="20" pos:column="34"/></operator><name pos:line="20" pos:column="34">host<pos:position pos:line="20" pos:column="38"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="20" pos:column="40">sizeof <argument_list pos:line="20" pos:column="47">(<argument><expr><name><name pos:line="20" pos:column="48">vl<pos:position pos:line="20" pos:column="50"/></name><operator pos:line="20" pos:column="50">.<pos:position pos:line="20" pos:column="51"/></operator><name pos:line="20" pos:column="51">host<pos:position pos:line="20" pos:column="55"/></name></name></expr></argument>)<pos:position pos:line="20" pos:column="56"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="20" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="58"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="21" pos:column="3">sstrncpy<pos:position pos:line="21" pos:column="11"/></name> <argument_list pos:line="21" pos:column="12">(<argument><expr><name><name pos:line="21" pos:column="13">vl<pos:position pos:line="21" pos:column="15"/></name><operator pos:line="21" pos:column="15">.<pos:position pos:line="21" pos:column="16"/></operator><name pos:line="21" pos:column="16">plugin<pos:position pos:line="21" pos:column="22"/></name></name></expr></argument>, <argument><expr><name><name pos:line="21" pos:column="24">inst<pos:position pos:line="21" pos:column="28"/></name><operator pos:line="21" pos:column="28">-&gt;<pos:position pos:line="21" pos:column="33"/></operator><name pos:line="21" pos:column="30">ident<pos:position pos:line="21" pos:column="35"/></name><operator pos:line="21" pos:column="35">.<pos:position pos:line="21" pos:column="36"/></operator><name pos:line="21" pos:column="36">plugin<pos:position pos:line="21" pos:column="42"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="21" pos:column="44">sizeof <argument_list pos:line="21" pos:column="51">(<argument><expr><name><name pos:line="21" pos:column="52">vl<pos:position pos:line="21" pos:column="54"/></name><operator pos:line="21" pos:column="54">.<pos:position pos:line="21" pos:column="55"/></operator><name pos:line="21" pos:column="55">plugin<pos:position pos:line="21" pos:column="61"/></name></name></expr></argument>)<pos:position pos:line="21" pos:column="62"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="21" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="64"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="22" pos:column="3">sstrncpy<pos:position pos:line="22" pos:column="11"/></name> <argument_list pos:line="22" pos:column="12">(<argument><expr><name><name pos:line="22" pos:column="13">vl<pos:position pos:line="22" pos:column="15"/></name><operator pos:line="22" pos:column="15">.<pos:position pos:line="22" pos:column="16"/></operator><name pos:line="22" pos:column="16">type<pos:position pos:line="22" pos:column="20"/></name></name></expr></argument>, <argument><expr><name><name pos:line="22" pos:column="22">inst<pos:position pos:line="22" pos:column="26"/></name><operator pos:line="22" pos:column="26">-&gt;<pos:position pos:line="22" pos:column="31"/></operator><name pos:line="22" pos:column="28">ident<pos:position pos:line="22" pos:column="33"/></name><operator pos:line="22" pos:column="33">.<pos:position pos:line="22" pos:column="34"/></operator><name pos:line="22" pos:column="34">type<pos:position pos:line="22" pos:column="38"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="22" pos:column="40">sizeof <argument_list pos:line="22" pos:column="47">(<argument><expr><name><name pos:line="22" pos:column="48">vl<pos:position pos:line="22" pos:column="50"/></name><operator pos:line="22" pos:column="50">.<pos:position pos:line="22" pos:column="51"/></operator><name pos:line="22" pos:column="51">type<pos:position pos:line="22" pos:column="55"/></name></name></expr></argument>)<pos:position pos:line="22" pos:column="56"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="22" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="58"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="23" pos:column="3">sstrncpy<pos:position pos:line="23" pos:column="11"/></name> <argument_list pos:line="23" pos:column="12">(<argument><expr><name><name pos:line="23" pos:column="13">vl<pos:position pos:line="23" pos:column="15"/></name><operator pos:line="23" pos:column="15">.<pos:position pos:line="23" pos:column="16"/></operator><name pos:line="23" pos:column="16">type_instance<pos:position pos:line="23" pos:column="29"/></name></name></expr></argument>, <argument><expr><name><name pos:line="23" pos:column="31">inst<pos:position pos:line="23" pos:column="35"/></name><operator pos:line="23" pos:column="35">-&gt;<pos:position pos:line="23" pos:column="40"/></operator><name pos:line="23" pos:column="37">ident<pos:position pos:line="23" pos:column="42"/></name><operator pos:line="23" pos:column="42">.<pos:position pos:line="23" pos:column="43"/></operator><name pos:line="23" pos:column="43">type_instance<pos:position pos:line="23" pos:column="56"/></name></name></expr></argument>,
      <argument><expr><sizeof pos:line="24" pos:column="7">sizeof <argument_list pos:line="24" pos:column="14">(<argument><expr><name><name pos:line="24" pos:column="15">vl<pos:position pos:line="24" pos:column="17"/></name><operator pos:line="24" pos:column="17">.<pos:position pos:line="24" pos:column="18"/></operator><name pos:line="24" pos:column="18">type_instance<pos:position pos:line="24" pos:column="31"/></name></name></expr></argument>)<pos:position pos:line="24" pos:column="32"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="24" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="34"/></expr_stmt>

<cpp:define pos:line="26" pos:column="1">#<cpp:directive pos:line="26" pos:column="2">define<pos:position pos:line="26" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="26" pos:column="9">READ_FUNC<pos:position pos:line="26" pos:column="18"/></name><parameter_list pos:line="26" pos:column="18">(<parameter><type><name pos:line="26" pos:column="19">func<pos:position pos:line="26" pos:column="23"/></name></type></parameter>, <parameter><type><name pos:line="26" pos:column="25">rate<pos:position pos:line="26" pos:column="29"/></name></type></parameter>)<pos:position pos:line="26" pos:column="30"/></parameter_list></cpp:macro> <cpp:value pos:line="26" pos:column="31">do { \
  if (inst-&gt;state_ ## func != NULL) { \
    agg_instance_read_func (inst, #func, rate, \
        inst-&gt;state_ ## func, &amp;vl, inst-&gt;ident.plugin_instance, t); \
  } \
} while (0)<pos:position pos:line="31" pos:column="12"/></cpp:value></cpp:define>

  <expr_stmt><expr><call><name pos:line="33" pos:column="3">pthread_mutex_lock<pos:position pos:line="33" pos:column="21"/></name> <argument_list pos:line="33" pos:column="22">(<argument><expr><operator pos:line="33" pos:column="23">&amp;<pos:position pos:line="33" pos:column="28"/></operator><name><name pos:line="33" pos:column="24">inst<pos:position pos:line="33" pos:column="28"/></name><operator pos:line="33" pos:column="28">-&gt;<pos:position pos:line="33" pos:column="33"/></operator><name pos:line="33" pos:column="30">lock<pos:position pos:line="33" pos:column="34"/></name></name></expr></argument>)<pos:position pos:line="33" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="36"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="35" pos:column="3">READ_FUNC<pos:position pos:line="35" pos:column="12"/></name> <argument_list pos:line="35" pos:column="13">(<argument><expr><name pos:line="35" pos:column="14">num<pos:position pos:line="35" pos:column="17"/></name></expr></argument>, <argument><expr><operator pos:line="35" pos:column="19">(<pos:position pos:line="35" pos:column="20"/></operator><name pos:line="35" pos:column="20">gauge_t<pos:position pos:line="35" pos:column="27"/></name><operator pos:line="35" pos:column="27">)<pos:position pos:line="35" pos:column="28"/></operator> <name><name pos:line="35" pos:column="29">inst<pos:position pos:line="35" pos:column="33"/></name><operator pos:line="35" pos:column="33">-&gt;<pos:position pos:line="35" pos:column="38"/></operator><name pos:line="35" pos:column="35">num<pos:position pos:line="35" pos:column="38"/></name></name></expr></argument>)<pos:position pos:line="35" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="40"/></expr_stmt>

  <comment type="block" pos:line="37" pos:column="3">/* All other aggregations are only defined when there have been any values
   * at all. */</comment>
  <if pos:line="39" pos:column="3">if <condition pos:line="39" pos:column="6">(<expr><name><name pos:line="39" pos:column="7">inst<pos:position pos:line="39" pos:column="11"/></name><operator pos:line="39" pos:column="11">-&gt;<pos:position pos:line="39" pos:column="16"/></operator><name pos:line="39" pos:column="13">num<pos:position pos:line="39" pos:column="16"/></name></name> <operator pos:line="39" pos:column="17">&gt;<pos:position pos:line="39" pos:column="21"/></operator> <literal type="number" pos:line="39" pos:column="19">0<pos:position pos:line="39" pos:column="20"/></literal></expr>)<pos:position pos:line="39" pos:column="21"/></condition><then pos:line="39" pos:column="21">
  <block pos:line="40" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="41" pos:column="5">READ_FUNC<pos:position pos:line="41" pos:column="14"/></name> <argument_list pos:line="41" pos:column="15">(<argument><expr><name pos:line="41" pos:column="16">sum<pos:position pos:line="41" pos:column="19"/></name></expr></argument>, <argument><expr><name><name pos:line="41" pos:column="21">inst<pos:position pos:line="41" pos:column="25"/></name><operator pos:line="41" pos:column="25">-&gt;<pos:position pos:line="41" pos:column="30"/></operator><name pos:line="41" pos:column="27">sum<pos:position pos:line="41" pos:column="30"/></name></name></expr></argument>)<pos:position pos:line="41" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="32"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="42" pos:column="5">READ_FUNC<pos:position pos:line="42" pos:column="14"/></name> <argument_list pos:line="42" pos:column="15">(<argument><expr><name pos:line="42" pos:column="16">average<pos:position pos:line="42" pos:column="23"/></name></expr></argument>, <argument><expr><operator pos:line="42" pos:column="25">(<pos:position pos:line="42" pos:column="26"/></operator><name><name pos:line="42" pos:column="26">inst<pos:position pos:line="42" pos:column="30"/></name><operator pos:line="42" pos:column="30">-&gt;<pos:position pos:line="42" pos:column="35"/></operator><name pos:line="42" pos:column="32">sum<pos:position pos:line="42" pos:column="35"/></name></name> <operator pos:line="42" pos:column="36">/<pos:position pos:line="42" pos:column="37"/></operator> <operator pos:line="42" pos:column="38">(<pos:position pos:line="42" pos:column="39"/></operator><operator pos:line="42" pos:column="39">(<pos:position pos:line="42" pos:column="40"/></operator><name pos:line="42" pos:column="40">gauge_t<pos:position pos:line="42" pos:column="47"/></name><operator pos:line="42" pos:column="47">)<pos:position pos:line="42" pos:column="48"/></operator> <name><name pos:line="42" pos:column="49">inst<pos:position pos:line="42" pos:column="53"/></name><operator pos:line="42" pos:column="53">-&gt;<pos:position pos:line="42" pos:column="58"/></operator><name pos:line="42" pos:column="55">num<pos:position pos:line="42" pos:column="58"/></name></name><operator pos:line="42" pos:column="58">)<pos:position pos:line="42" pos:column="59"/></operator><operator pos:line="42" pos:column="59">)<pos:position pos:line="42" pos:column="60"/></operator></expr></argument>)<pos:position pos:line="42" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="62"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="43" pos:column="5">READ_FUNC<pos:position pos:line="43" pos:column="14"/></name> <argument_list pos:line="43" pos:column="15">(<argument><expr><name pos:line="43" pos:column="16">min<pos:position pos:line="43" pos:column="19"/></name></expr></argument>, <argument><expr><name><name pos:line="43" pos:column="21">inst<pos:position pos:line="43" pos:column="25"/></name><operator pos:line="43" pos:column="25">-&gt;<pos:position pos:line="43" pos:column="30"/></operator><name pos:line="43" pos:column="27">min<pos:position pos:line="43" pos:column="30"/></name></name></expr></argument>)<pos:position pos:line="43" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="32"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="44" pos:column="5">READ_FUNC<pos:position pos:line="44" pos:column="14"/></name> <argument_list pos:line="44" pos:column="15">(<argument><expr><name pos:line="44" pos:column="16">max<pos:position pos:line="44" pos:column="19"/></name></expr></argument>, <argument><expr><name><name pos:line="44" pos:column="21">inst<pos:position pos:line="44" pos:column="25"/></name><operator pos:line="44" pos:column="25">-&gt;<pos:position pos:line="44" pos:column="30"/></operator><name pos:line="44" pos:column="27">max<pos:position pos:line="44" pos:column="30"/></name></name></expr></argument>)<pos:position pos:line="44" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="32"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="45" pos:column="5">READ_FUNC<pos:position pos:line="45" pos:column="14"/></name> <argument_list pos:line="45" pos:column="15">(<argument><expr><name pos:line="45" pos:column="16">stddev<pos:position pos:line="45" pos:column="22"/></name></expr></argument>, <argument><expr><call><name pos:line="45" pos:column="24">sqrt<pos:position pos:line="45" pos:column="28"/></name><argument_list pos:line="45" pos:column="28">(<argument><expr><operator pos:line="45" pos:column="29">(<pos:position pos:line="45" pos:column="30"/></operator><operator pos:line="45" pos:column="30">(<pos:position pos:line="45" pos:column="31"/></operator><operator pos:line="45" pos:column="31">(<pos:position pos:line="45" pos:column="32"/></operator><name pos:line="45" pos:column="32">gauge_t<pos:position pos:line="45" pos:column="39"/></name><operator pos:line="45" pos:column="39">)<pos:position pos:line="45" pos:column="40"/></operator> <name><name pos:line="45" pos:column="41">inst<pos:position pos:line="45" pos:column="45"/></name><operator pos:line="45" pos:column="45">-&gt;<pos:position pos:line="45" pos:column="50"/></operator><name pos:line="45" pos:column="47">num<pos:position pos:line="45" pos:column="50"/></name></name><operator pos:line="45" pos:column="50">)<pos:position pos:line="45" pos:column="51"/></operator> <operator pos:line="45" pos:column="52">*<pos:position pos:line="45" pos:column="53"/></operator> <name><name pos:line="45" pos:column="54">inst<pos:position pos:line="45" pos:column="58"/></name><operator pos:line="45" pos:column="58">-&gt;<pos:position pos:line="45" pos:column="63"/></operator><name pos:line="45" pos:column="60">squares_sum<pos:position pos:line="45" pos:column="71"/></name></name><operator pos:line="45" pos:column="71">)<pos:position pos:line="45" pos:column="72"/></operator>
          <operator pos:line="46" pos:column="11">-<pos:position pos:line="46" pos:column="12"/></operator> <operator pos:line="46" pos:column="13">(<pos:position pos:line="46" pos:column="14"/></operator><name><name pos:line="46" pos:column="14">inst<pos:position pos:line="46" pos:column="18"/></name><operator pos:line="46" pos:column="18">-&gt;<pos:position pos:line="46" pos:column="23"/></operator><name pos:line="46" pos:column="20">sum<pos:position pos:line="46" pos:column="23"/></name></name> <operator pos:line="46" pos:column="24">*<pos:position pos:line="46" pos:column="25"/></operator> <name><name pos:line="46" pos:column="26">inst<pos:position pos:line="46" pos:column="30"/></name><operator pos:line="46" pos:column="30">-&gt;<pos:position pos:line="46" pos:column="35"/></operator><name pos:line="46" pos:column="32">sum<pos:position pos:line="46" pos:column="35"/></name></name><operator pos:line="46" pos:column="35">)<pos:position pos:line="46" pos:column="36"/></operator></expr></argument>)<pos:position pos:line="46" pos:column="37"/></argument_list></call> <operator pos:line="46" pos:column="38">/<pos:position pos:line="46" pos:column="39"/></operator> <operator pos:line="46" pos:column="40">(<pos:position pos:line="46" pos:column="41"/></operator><operator pos:line="46" pos:column="41">(<pos:position pos:line="46" pos:column="42"/></operator><name pos:line="46" pos:column="42">gauge_t<pos:position pos:line="46" pos:column="49"/></name><operator pos:line="46" pos:column="49">)<pos:position pos:line="46" pos:column="50"/></operator> <name><name pos:line="46" pos:column="51">inst<pos:position pos:line="46" pos:column="55"/></name><operator pos:line="46" pos:column="55">-&gt;<pos:position pos:line="46" pos:column="60"/></operator><name pos:line="46" pos:column="57">num<pos:position pos:line="46" pos:column="60"/></name></name><operator pos:line="46" pos:column="60">)<pos:position pos:line="46" pos:column="61"/></operator></expr></argument>)<pos:position pos:line="46" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="63"/></expr_stmt>
  }<pos:position pos:line="47" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="49" pos:column="3">/* Reset internal state. */</comment>
  <expr_stmt><expr><name><name pos:line="50" pos:column="3">inst<pos:position pos:line="50" pos:column="7"/></name><operator pos:line="50" pos:column="7">-&gt;<pos:position pos:line="50" pos:column="12"/></operator><name pos:line="50" pos:column="9">num<pos:position pos:line="50" pos:column="12"/></name></name> <operator pos:line="50" pos:column="13">=<pos:position pos:line="50" pos:column="14"/></operator> <literal type="number" pos:line="50" pos:column="15">0<pos:position pos:line="50" pos:column="16"/></literal></expr>;<pos:position pos:line="50" pos:column="17"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="51" pos:column="3">inst<pos:position pos:line="51" pos:column="7"/></name><operator pos:line="51" pos:column="7">-&gt;<pos:position pos:line="51" pos:column="12"/></operator><name pos:line="51" pos:column="9">sum<pos:position pos:line="51" pos:column="12"/></name></name> <operator pos:line="51" pos:column="13">=<pos:position pos:line="51" pos:column="14"/></operator> <literal type="number" pos:line="51" pos:column="15">0.0<pos:position pos:line="51" pos:column="18"/></literal></expr>;<pos:position pos:line="51" pos:column="19"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="52" pos:column="3">inst<pos:position pos:line="52" pos:column="7"/></name><operator pos:line="52" pos:column="7">-&gt;<pos:position pos:line="52" pos:column="12"/></operator><name pos:line="52" pos:column="9">squares_sum<pos:position pos:line="52" pos:column="20"/></name></name> <operator pos:line="52" pos:column="21">=<pos:position pos:line="52" pos:column="22"/></operator> <literal type="number" pos:line="52" pos:column="23">0.0<pos:position pos:line="52" pos:column="26"/></literal></expr>;<pos:position pos:line="52" pos:column="27"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="53" pos:column="3">inst<pos:position pos:line="53" pos:column="7"/></name><operator pos:line="53" pos:column="7">-&gt;<pos:position pos:line="53" pos:column="12"/></operator><name pos:line="53" pos:column="9">min<pos:position pos:line="53" pos:column="12"/></name></name> <operator pos:line="53" pos:column="13">=<pos:position pos:line="53" pos:column="14"/></operator> <name pos:line="53" pos:column="15">NAN<pos:position pos:line="53" pos:column="18"/></name></expr>;<pos:position pos:line="53" pos:column="19"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="54" pos:column="3">inst<pos:position pos:line="54" pos:column="7"/></name><operator pos:line="54" pos:column="7">-&gt;<pos:position pos:line="54" pos:column="12"/></operator><name pos:line="54" pos:column="9">max<pos:position pos:line="54" pos:column="12"/></name></name> <operator pos:line="54" pos:column="13">=<pos:position pos:line="54" pos:column="14"/></operator> <name pos:line="54" pos:column="15">NAN<pos:position pos:line="54" pos:column="18"/></name></expr>;<pos:position pos:line="54" pos:column="19"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="56" pos:column="3">pthread_mutex_unlock<pos:position pos:line="56" pos:column="23"/></name> <argument_list pos:line="56" pos:column="24">(<argument><expr><operator pos:line="56" pos:column="25">&amp;<pos:position pos:line="56" pos:column="30"/></operator><name><name pos:line="56" pos:column="26">inst<pos:position pos:line="56" pos:column="30"/></name><operator pos:line="56" pos:column="30">-&gt;<pos:position pos:line="56" pos:column="35"/></operator><name pos:line="56" pos:column="32">lock<pos:position pos:line="56" pos:column="36"/></name></name></expr></argument>)<pos:position pos:line="56" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="38"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="58" pos:column="3">meta_data_destroy<pos:position pos:line="58" pos:column="20"/></name> <argument_list pos:line="58" pos:column="21">(<argument><expr><name><name pos:line="58" pos:column="22">vl<pos:position pos:line="58" pos:column="24"/></name><operator pos:line="58" pos:column="24">.<pos:position pos:line="58" pos:column="25"/></operator><name pos:line="58" pos:column="25">meta<pos:position pos:line="58" pos:column="29"/></name></name></expr></argument>)<pos:position pos:line="58" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="31"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="59" pos:column="3">vl<pos:position pos:line="59" pos:column="5"/></name><operator pos:line="59" pos:column="5">.<pos:position pos:line="59" pos:column="6"/></operator><name pos:line="59" pos:column="6">meta<pos:position pos:line="59" pos:column="10"/></name></name> <operator pos:line="59" pos:column="11">=<pos:position pos:line="59" pos:column="12"/></operator> <name pos:line="59" pos:column="13">NULL<pos:position pos:line="59" pos:column="17"/></name></expr>;<pos:position pos:line="59" pos:column="18"/></expr_stmt>

  <return pos:line="61" pos:column="3">return <expr><operator pos:line="61" pos:column="10">(<pos:position pos:line="61" pos:column="11"/></operator><literal type="number" pos:line="61" pos:column="11">0<pos:position pos:line="61" pos:column="12"/></literal><operator pos:line="61" pos:column="12">)<pos:position pos:line="61" pos:column="13"/></operator></expr>;<pos:position pos:line="61" pos:column="14"/></return>
}<pos:position pos:line="62" pos:column="2"/></block></function></unit>
