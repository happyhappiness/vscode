<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_552_collectd-5.5.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">collectd_barometer_config<pos:position pos:line="1" pos:column="37"/></name> <parameter_list pos:line="1" pos:column="38">(<parameter><decl><type><specifier pos:line="1" pos:column="39">const<pos:position pos:line="1" pos:column="44"/></specifier> <name pos:line="1" pos:column="45">char<pos:position pos:line="1" pos:column="49"/></name> <modifier pos:line="1" pos:column="50">*<pos:position pos:line="1" pos:column="51"/></modifier></type><name pos:line="1" pos:column="51">key<pos:position pos:line="1" pos:column="54"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="56">const<pos:position pos:line="1" pos:column="61"/></specifier> <name pos:line="1" pos:column="62">char<pos:position pos:line="1" pos:column="66"/></name> <modifier pos:line="1" pos:column="67">*<pos:position pos:line="1" pos:column="68"/></modifier></type><name pos:line="1" pos:column="68">value<pos:position pos:line="1" pos:column="73"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="74"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="3" pos:column="5">DEBUG<pos:position pos:line="3" pos:column="10"/></name><argument_list pos:line="3" pos:column="10">(<argument><expr><literal type="string" pos:line="3" pos:column="11">"barometer: collectd_barometer_config"<pos:position pos:line="3" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="3" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="3" pos:column="51"/></expr_stmt>

    <if pos:line="5" pos:column="5">if <condition pos:line="5" pos:column="8">(<expr><call><name pos:line="5" pos:column="9">strcasecmp<pos:position pos:line="5" pos:column="19"/></name> <argument_list pos:line="5" pos:column="20">(<argument><expr><name pos:line="5" pos:column="21">key<pos:position pos:line="5" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="5" pos:column="26">"Device"<pos:position pos:line="5" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="5" pos:column="35"/></argument_list></call> <operator pos:line="5" pos:column="36">==<pos:position pos:line="5" pos:column="38"/></operator> <literal type="number" pos:line="5" pos:column="39">0<pos:position pos:line="5" pos:column="40"/></literal></expr>)<pos:position pos:line="5" pos:column="41"/></condition><then pos:line="5" pos:column="41">
    <block pos:line="6" pos:column="5">{
        <expr_stmt><expr><call><name pos:line="7" pos:column="9">sfree<pos:position pos:line="7" pos:column="14"/></name> <argument_list pos:line="7" pos:column="15">(<argument><expr><name pos:line="7" pos:column="16">config_device<pos:position pos:line="7" pos:column="29"/></name></expr></argument>)<pos:position pos:line="7" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="31"/></expr_stmt>
        <expr_stmt><expr><name pos:line="8" pos:column="9">config_device<pos:position pos:line="8" pos:column="22"/></name> <operator pos:line="8" pos:column="23">=<pos:position pos:line="8" pos:column="24"/></operator> <call><name pos:line="8" pos:column="25">strdup<pos:position pos:line="8" pos:column="31"/></name> <argument_list pos:line="8" pos:column="32">(<argument><expr><name pos:line="8" pos:column="33">value<pos:position pos:line="8" pos:column="38"/></name></expr></argument>)<pos:position pos:line="8" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="40"/></expr_stmt>
    }<pos:position pos:line="9" pos:column="6"/></block></then>
    <elseif pos:line="10" pos:column="5">else <if pos:line="10" pos:column="10">if <condition pos:line="10" pos:column="13">(<expr><call><name pos:line="10" pos:column="14">strcasecmp<pos:position pos:line="10" pos:column="24"/></name> <argument_list pos:line="10" pos:column="25">(<argument><expr><name pos:line="10" pos:column="26">key<pos:position pos:line="10" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="10" pos:column="31">"Oversampling"<pos:position pos:line="10" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="46"/></argument_list></call> <operator pos:line="10" pos:column="47">==<pos:position pos:line="10" pos:column="49"/></operator> <literal type="number" pos:line="10" pos:column="50">0<pos:position pos:line="10" pos:column="51"/></literal></expr>)<pos:position pos:line="10" pos:column="52"/></condition><then pos:line="10" pos:column="52">
    <block pos:line="11" pos:column="5">{
        <decl_stmt><decl><type><name pos:line="12" pos:column="9">int<pos:position pos:line="12" pos:column="12"/></name></type> <name pos:line="12" pos:column="13">oversampling_tmp<pos:position pos:line="12" pos:column="29"/></name> <init pos:line="12" pos:column="30">= <expr><call><name pos:line="12" pos:column="32">atoi<pos:position pos:line="12" pos:column="36"/></name> <argument_list pos:line="12" pos:column="37">(<argument><expr><name pos:line="12" pos:column="38">value<pos:position pos:line="12" pos:column="43"/></name></expr></argument>)<pos:position pos:line="12" pos:column="44"/></argument_list></call></expr></init></decl>;<pos:position pos:line="12" pos:column="45"/></decl_stmt>
        <if pos:line="13" pos:column="9">if <condition pos:line="13" pos:column="12">(<expr><name><name pos:line="13" pos:column="13">oversampling_tmp<pos:position pos:line="13" pos:column="29"/></name> <argument_list type="generic" pos:line="13" pos:column="30">&lt; <argument><expr><literal type="number" pos:line="13" pos:column="32">1<pos:position pos:line="13" pos:column="33"/></literal> <operator pos:line="13" pos:column="34">||<pos:position pos:line="13" pos:column="36"/></operator> <name pos:line="13" pos:column="37">oversampling_tmp<pos:position pos:line="13" pos:column="53"/></name></expr></argument> &gt;<pos:position pos:line="13" pos:column="58"/></argument_list></name> <literal type="number" pos:line="13" pos:column="56">1024<pos:position pos:line="13" pos:column="60"/></literal></expr>)<pos:position pos:line="13" pos:column="61"/></condition><then pos:line="13" pos:column="61">
        <block pos:line="14" pos:column="9">{
            <expr_stmt><expr><call><name pos:line="15" pos:column="13">WARNING<pos:position pos:line="15" pos:column="20"/></name> <argument_list pos:line="15" pos:column="21">(<argument><expr><literal type="string" pos:line="15" pos:column="22">"barometer: collectd_barometer_config: invalid oversampling: %d."<pos:position pos:line="15" pos:column="87"/></literal> \
                     <literal type="string" pos:line="16" pos:column="22">" Allowed values are 1 to 1024 (for MPL115) or 1 to 128 (for MPL3115) or 1 to 8 (for BMP085)."<pos:position pos:line="16" pos:column="116"/></literal></expr></argument>,
                     <argument><expr><name pos:line="17" pos:column="22">oversampling_tmp<pos:position pos:line="17" pos:column="38"/></name></expr></argument>)<pos:position pos:line="17" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="40"/></expr_stmt>
            <return pos:line="18" pos:column="13">return <expr><literal type="number" pos:line="18" pos:column="20">1<pos:position pos:line="18" pos:column="21"/></literal></expr>;<pos:position pos:line="18" pos:column="22"/></return>
        }<pos:position pos:line="19" pos:column="10"/></block></then></if>
        <expr_stmt><expr><name pos:line="20" pos:column="9">config_oversample<pos:position pos:line="20" pos:column="26"/></name> <operator pos:line="20" pos:column="27">=<pos:position pos:line="20" pos:column="28"/></operator> <name pos:line="20" pos:column="29">oversampling_tmp<pos:position pos:line="20" pos:column="45"/></name></expr>;<pos:position pos:line="20" pos:column="46"/></expr_stmt>
    }<pos:position pos:line="21" pos:column="6"/></block></then></if></elseif>
    <elseif pos:line="22" pos:column="5">else <if pos:line="22" pos:column="10">if <condition pos:line="22" pos:column="13">(<expr><call><name pos:line="22" pos:column="14">strcasecmp<pos:position pos:line="22" pos:column="24"/></name> <argument_list pos:line="22" pos:column="25">(<argument><expr><name pos:line="22" pos:column="26">key<pos:position pos:line="22" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="22" pos:column="31">"Altitude"<pos:position pos:line="22" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="42"/></argument_list></call> <operator pos:line="22" pos:column="43">==<pos:position pos:line="22" pos:column="45"/></operator> <literal type="number" pos:line="22" pos:column="46">0<pos:position pos:line="22" pos:column="47"/></literal></expr>)<pos:position pos:line="22" pos:column="48"/></condition><then pos:line="22" pos:column="48">
    <block pos:line="23" pos:column="5">{
        <expr_stmt><expr><name pos:line="24" pos:column="9">config_altitude<pos:position pos:line="24" pos:column="24"/></name> <operator pos:line="24" pos:column="25">=<pos:position pos:line="24" pos:column="26"/></operator> <call><name pos:line="24" pos:column="27">atof<pos:position pos:line="24" pos:column="31"/></name> <argument_list pos:line="24" pos:column="32">(<argument><expr><name pos:line="24" pos:column="33">value<pos:position pos:line="24" pos:column="38"/></name></expr></argument>)<pos:position pos:line="24" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="40"/></expr_stmt>
    }<pos:position pos:line="25" pos:column="6"/></block></then></if></elseif>
    <elseif pos:line="26" pos:column="5">else <if pos:line="26" pos:column="10">if <condition pos:line="26" pos:column="13">(<expr><call><name pos:line="26" pos:column="14">strcasecmp<pos:position pos:line="26" pos:column="24"/></name> <argument_list pos:line="26" pos:column="25">(<argument><expr><name pos:line="26" pos:column="26">key<pos:position pos:line="26" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="26" pos:column="31">"Normalization"<pos:position pos:line="26" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="47"/></argument_list></call> <operator pos:line="26" pos:column="48">==<pos:position pos:line="26" pos:column="50"/></operator> <literal type="number" pos:line="26" pos:column="51">0<pos:position pos:line="26" pos:column="52"/></literal></expr>)<pos:position pos:line="26" pos:column="53"/></condition><then pos:line="26" pos:column="53">
    <block pos:line="27" pos:column="5">{
        <decl_stmt><decl><type><name pos:line="28" pos:column="9">int<pos:position pos:line="28" pos:column="12"/></name></type> <name pos:line="28" pos:column="13">normalize_tmp<pos:position pos:line="28" pos:column="26"/></name> <init pos:line="28" pos:column="27">= <expr><call><name pos:line="28" pos:column="29">atoi<pos:position pos:line="28" pos:column="33"/></name> <argument_list pos:line="28" pos:column="34">(<argument><expr><name pos:line="28" pos:column="35">value<pos:position pos:line="28" pos:column="40"/></name></expr></argument>)<pos:position pos:line="28" pos:column="41"/></argument_list></call></expr></init></decl>;<pos:position pos:line="28" pos:column="42"/></decl_stmt>
        <if pos:line="29" pos:column="9">if <condition pos:line="29" pos:column="12">(<expr><name><name pos:line="29" pos:column="13">normalize_tmp<pos:position pos:line="29" pos:column="26"/></name> <argument_list type="generic" pos:line="29" pos:column="27">&lt; <argument><expr><literal type="number" pos:line="29" pos:column="29">0<pos:position pos:line="29" pos:column="30"/></literal> <operator pos:line="29" pos:column="31">||<pos:position pos:line="29" pos:column="33"/></operator> <name pos:line="29" pos:column="34">normalize_tmp<pos:position pos:line="29" pos:column="47"/></name></expr></argument> &gt;<pos:position pos:line="29" pos:column="52"/></argument_list></name> <literal type="number" pos:line="29" pos:column="50">2<pos:position pos:line="29" pos:column="51"/></literal></expr>)<pos:position pos:line="29" pos:column="52"/></condition><then pos:line="29" pos:column="52">
        <block pos:line="30" pos:column="9">{
            <expr_stmt><expr><call><name pos:line="31" pos:column="13">WARNING<pos:position pos:line="31" pos:column="20"/></name> <argument_list pos:line="31" pos:column="21">(<argument><expr><literal type="string" pos:line="31" pos:column="22">"barometer: collectd_barometer_config: invalid normalization: %d"<pos:position pos:line="31" pos:column="87"/></literal></expr></argument>,
                     <argument><expr><name pos:line="32" pos:column="22">normalize_tmp<pos:position pos:line="32" pos:column="35"/></name></expr></argument>)<pos:position pos:line="32" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="37"/></expr_stmt>
            <return pos:line="33" pos:column="13">return <expr><literal type="number" pos:line="33" pos:column="20">1<pos:position pos:line="33" pos:column="21"/></literal></expr>;<pos:position pos:line="33" pos:column="22"/></return>
        }<pos:position pos:line="34" pos:column="10"/></block></then></if>
        <expr_stmt><expr><name pos:line="35" pos:column="9">config_normalize<pos:position pos:line="35" pos:column="25"/></name> <operator pos:line="35" pos:column="26">=<pos:position pos:line="35" pos:column="27"/></operator> <name pos:line="35" pos:column="28">normalize_tmp<pos:position pos:line="35" pos:column="41"/></name></expr>;<pos:position pos:line="35" pos:column="42"/></expr_stmt>
    }<pos:position pos:line="36" pos:column="6"/></block></then></if></elseif>
    <elseif pos:line="37" pos:column="5">else <if pos:line="37" pos:column="10">if <condition pos:line="37" pos:column="13">(<expr><call><name pos:line="37" pos:column="14">strcasecmp<pos:position pos:line="37" pos:column="24"/></name> <argument_list pos:line="37" pos:column="25">(<argument><expr><name pos:line="37" pos:column="26">key<pos:position pos:line="37" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="37" pos:column="31">"TemperatureSensor"<pos:position pos:line="37" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="37" pos:column="51"/></argument_list></call> <operator pos:line="37" pos:column="52">==<pos:position pos:line="37" pos:column="54"/></operator> <literal type="number" pos:line="37" pos:column="55">0<pos:position pos:line="37" pos:column="56"/></literal></expr>)<pos:position pos:line="37" pos:column="57"/></condition><then pos:line="37" pos:column="57">
    <block pos:line="38" pos:column="5">{
        <if pos:line="39" pos:column="9">if<condition pos:line="39" pos:column="11">(<expr><call><name pos:line="39" pos:column="12">temp_list_add<pos:position pos:line="39" pos:column="25"/></name><argument_list pos:line="39" pos:column="25">(<argument><expr><name pos:line="39" pos:column="26">temp_list<pos:position pos:line="39" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="37">value<pos:position pos:line="39" pos:column="42"/></name></expr></argument>)<pos:position pos:line="39" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="39" pos:column="44"/></condition><then pos:line="39" pos:column="44">
        <block pos:line="40" pos:column="9">{
            <return pos:line="41" pos:column="13">return <expr><operator pos:line="41" pos:column="20">-<pos:position pos:line="41" pos:column="21"/></operator><literal type="number" pos:line="41" pos:column="21">1<pos:position pos:line="41" pos:column="22"/></literal></expr>;<pos:position pos:line="41" pos:column="23"/></return>
        }<pos:position pos:line="42" pos:column="10"/></block></then></if>
    }<pos:position pos:line="43" pos:column="6"/></block></then></if></elseif>
    <elseif pos:line="44" pos:column="5">else <if pos:line="44" pos:column="10">if <condition pos:line="44" pos:column="13">(<expr><call><name pos:line="44" pos:column="14">strcasecmp<pos:position pos:line="44" pos:column="24"/></name> <argument_list pos:line="44" pos:column="25">(<argument><expr><name pos:line="44" pos:column="26">key<pos:position pos:line="44" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="44" pos:column="31">"PressureOffset"<pos:position pos:line="44" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="44" pos:column="48"/></argument_list></call> <operator pos:line="44" pos:column="49">==<pos:position pos:line="44" pos:column="51"/></operator> <literal type="number" pos:line="44" pos:column="52">0<pos:position pos:line="44" pos:column="53"/></literal></expr>)<pos:position pos:line="44" pos:column="54"/></condition><then pos:line="44" pos:column="54">
    <block pos:line="45" pos:column="5">{
        <expr_stmt><expr><name pos:line="46" pos:column="9">config_press_offset<pos:position pos:line="46" pos:column="28"/></name> <operator pos:line="46" pos:column="29">=<pos:position pos:line="46" pos:column="30"/></operator> <call><name pos:line="46" pos:column="31">atof<pos:position pos:line="46" pos:column="35"/></name><argument_list pos:line="46" pos:column="35">(<argument><expr><name pos:line="46" pos:column="36">value<pos:position pos:line="46" pos:column="41"/></name></expr></argument>)<pos:position pos:line="46" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="43"/></expr_stmt>
    }<pos:position pos:line="47" pos:column="6"/></block></then></if></elseif>
    <elseif pos:line="48" pos:column="5">else <if pos:line="48" pos:column="10">if <condition pos:line="48" pos:column="13">(<expr><call><name pos:line="48" pos:column="14">strcasecmp<pos:position pos:line="48" pos:column="24"/></name> <argument_list pos:line="48" pos:column="25">(<argument><expr><name pos:line="48" pos:column="26">key<pos:position pos:line="48" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="48" pos:column="31">"TemperatureOffset"<pos:position pos:line="48" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="48" pos:column="51"/></argument_list></call> <operator pos:line="48" pos:column="52">==<pos:position pos:line="48" pos:column="54"/></operator> <literal type="number" pos:line="48" pos:column="55">0<pos:position pos:line="48" pos:column="56"/></literal></expr>)<pos:position pos:line="48" pos:column="57"/></condition><then pos:line="48" pos:column="57">
    <block pos:line="49" pos:column="5">{
        <expr_stmt><expr><name pos:line="50" pos:column="9">config_temp_offset<pos:position pos:line="50" pos:column="27"/></name> <operator pos:line="50" pos:column="28">=<pos:position pos:line="50" pos:column="29"/></operator> <call><name pos:line="50" pos:column="30">atof<pos:position pos:line="50" pos:column="34"/></name><argument_list pos:line="50" pos:column="34">(<argument><expr><name pos:line="50" pos:column="35">value<pos:position pos:line="50" pos:column="40"/></name></expr></argument>)<pos:position pos:line="50" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="42"/></expr_stmt>
    }<pos:position pos:line="51" pos:column="6"/></block></then></if></elseif>
    <else pos:line="52" pos:column="5">else
    <block pos:line="53" pos:column="5">{
        <return pos:line="54" pos:column="9">return <expr><operator pos:line="54" pos:column="16">-<pos:position pos:line="54" pos:column="17"/></operator><literal type="number" pos:line="54" pos:column="17">1<pos:position pos:line="54" pos:column="18"/></literal></expr>;<pos:position pos:line="54" pos:column="19"/></return>
    }<pos:position pos:line="55" pos:column="6"/></block></else></if>

    <return pos:line="57" pos:column="5">return <expr><literal type="number" pos:line="57" pos:column="12">0<pos:position pos:line="57" pos:column="13"/></literal></expr>;<pos:position pos:line="57" pos:column="14"/></return>
}<pos:position pos:line="58" pos:column="2"/></block></function></unit>
