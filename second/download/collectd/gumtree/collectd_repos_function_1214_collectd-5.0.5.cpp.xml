<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1214_collectd-5.0.5.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">rrd_cache_destroy<pos:position pos:line="1" pos:column="29"/></name> <parameter_list pos:line="1" pos:column="30">(<parameter><decl><type><name pos:line="1" pos:column="31">void<pos:position pos:line="1" pos:column="35"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="36"/></parameter_list> <comment type="block" pos:line="1" pos:column="37">/* {{{ */</comment>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">void<pos:position pos:line="3" pos:column="7"/></name> <modifier pos:line="3" pos:column="8">*<pos:position pos:line="3" pos:column="9"/></modifier></type><name pos:line="3" pos:column="9">key<pos:position pos:line="3" pos:column="12"/></name> <init pos:line="3" pos:column="13">= <expr><name pos:line="3" pos:column="15">NULL<pos:position pos:line="3" pos:column="19"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">void<pos:position pos:line="4" pos:column="7"/></name> <modifier pos:line="4" pos:column="8">*<pos:position pos:line="4" pos:column="9"/></modifier></type><name pos:line="4" pos:column="9">value<pos:position pos:line="4" pos:column="14"/></name> <init pos:line="4" pos:column="15">= <expr><name pos:line="4" pos:column="17">NULL<pos:position pos:line="4" pos:column="21"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="22"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="6" pos:column="3">int<pos:position pos:line="6" pos:column="6"/></name></type> <name pos:line="6" pos:column="7">non_empty<pos:position pos:line="6" pos:column="16"/></name> <init pos:line="6" pos:column="17">= <expr><literal type="number" pos:line="6" pos:column="19">0<pos:position pos:line="6" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="21"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="8" pos:column="3">pthread_mutex_lock<pos:position pos:line="8" pos:column="21"/></name> <argument_list pos:line="8" pos:column="22">(<argument><expr><operator pos:line="8" pos:column="23">&amp;<pos:position pos:line="8" pos:column="28"/></operator><name pos:line="8" pos:column="24">cache_lock<pos:position pos:line="8" pos:column="34"/></name></expr></argument>)<pos:position pos:line="8" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="36"/></expr_stmt>

  <if pos:line="10" pos:column="3">if <condition pos:line="10" pos:column="6">(<expr><name pos:line="10" pos:column="7">cache<pos:position pos:line="10" pos:column="12"/></name> <operator pos:line="10" pos:column="13">==<pos:position pos:line="10" pos:column="15"/></operator> <name pos:line="10" pos:column="16">NULL<pos:position pos:line="10" pos:column="20"/></name></expr>)<pos:position pos:line="10" pos:column="21"/></condition><then pos:line="10" pos:column="21">
  <block pos:line="11" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="12" pos:column="5">pthread_mutex_unlock<pos:position pos:line="12" pos:column="25"/></name> <argument_list pos:line="12" pos:column="26">(<argument><expr><operator pos:line="12" pos:column="27">&amp;<pos:position pos:line="12" pos:column="32"/></operator><name pos:line="12" pos:column="28">cache_lock<pos:position pos:line="12" pos:column="38"/></name></expr></argument>)<pos:position pos:line="12" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="40"/></expr_stmt>
    <return pos:line="13" pos:column="5">return <expr><operator pos:line="13" pos:column="12">(<pos:position pos:line="13" pos:column="13"/></operator><literal type="number" pos:line="13" pos:column="13">0<pos:position pos:line="13" pos:column="14"/></literal><operator pos:line="13" pos:column="14">)<pos:position pos:line="13" pos:column="15"/></operator></expr>;<pos:position pos:line="13" pos:column="16"/></return>
  }<pos:position pos:line="14" pos:column="4"/></block></then></if>

  <while pos:line="16" pos:column="3">while <condition pos:line="16" pos:column="9">(<expr><call><name pos:line="16" pos:column="10">c_avl_pick<pos:position pos:line="16" pos:column="20"/></name> <argument_list pos:line="16" pos:column="21">(<argument><expr><name pos:line="16" pos:column="22">cache<pos:position pos:line="16" pos:column="27"/></name></expr></argument>, <argument><expr><operator pos:line="16" pos:column="29">&amp;<pos:position pos:line="16" pos:column="34"/></operator><name pos:line="16" pos:column="30">key<pos:position pos:line="16" pos:column="33"/></name></expr></argument>, <argument><expr><operator pos:line="16" pos:column="35">&amp;<pos:position pos:line="16" pos:column="40"/></operator><name pos:line="16" pos:column="36">value<pos:position pos:line="16" pos:column="41"/></name></expr></argument>)<pos:position pos:line="16" pos:column="42"/></argument_list></call> <operator pos:line="16" pos:column="43">==<pos:position pos:line="16" pos:column="45"/></operator> <literal type="number" pos:line="16" pos:column="46">0<pos:position pos:line="16" pos:column="47"/></literal></expr>)<pos:position pos:line="16" pos:column="48"/></condition>
  <block pos:line="17" pos:column="3">{
    <decl_stmt><decl><type><name pos:line="18" pos:column="5">rrd_cache_t<pos:position pos:line="18" pos:column="16"/></name> <modifier pos:line="18" pos:column="17">*<pos:position pos:line="18" pos:column="18"/></modifier></type><name pos:line="18" pos:column="18">rc<pos:position pos:line="18" pos:column="20"/></name></decl>;<pos:position pos:line="18" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="19" pos:column="5">int<pos:position pos:line="19" pos:column="8"/></name></type> <name pos:line="19" pos:column="9">i<pos:position pos:line="19" pos:column="10"/></name></decl>;<pos:position pos:line="19" pos:column="11"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="21" pos:column="5">sfree<pos:position pos:line="21" pos:column="10"/></name> <argument_list pos:line="21" pos:column="11">(<argument><expr><name pos:line="21" pos:column="12">key<pos:position pos:line="21" pos:column="15"/></name></expr></argument>)<pos:position pos:line="21" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="17"/></expr_stmt>
    <expr_stmt><expr><name pos:line="22" pos:column="5">key<pos:position pos:line="22" pos:column="8"/></name> <operator pos:line="22" pos:column="9">=<pos:position pos:line="22" pos:column="10"/></operator> <name pos:line="22" pos:column="11">NULL<pos:position pos:line="22" pos:column="15"/></name></expr>;<pos:position pos:line="22" pos:column="16"/></expr_stmt>

    <expr_stmt><expr><name pos:line="24" pos:column="5">rc<pos:position pos:line="24" pos:column="7"/></name> <operator pos:line="24" pos:column="8">=<pos:position pos:line="24" pos:column="9"/></operator> <name pos:line="24" pos:column="10">value<pos:position pos:line="24" pos:column="15"/></name></expr>;<pos:position pos:line="24" pos:column="16"/></expr_stmt>
    <expr_stmt><expr><name pos:line="25" pos:column="5">value<pos:position pos:line="25" pos:column="10"/></name> <operator pos:line="25" pos:column="11">=<pos:position pos:line="25" pos:column="12"/></operator> <name pos:line="25" pos:column="13">NULL<pos:position pos:line="25" pos:column="17"/></name></expr>;<pos:position pos:line="25" pos:column="18"/></expr_stmt>

    <if pos:line="27" pos:column="5">if <condition pos:line="27" pos:column="8">(<expr><name><name pos:line="27" pos:column="9">rc<pos:position pos:line="27" pos:column="11"/></name><operator pos:line="27" pos:column="11">-&gt;<pos:position pos:line="27" pos:column="16"/></operator><name pos:line="27" pos:column="13">values_num<pos:position pos:line="27" pos:column="23"/></name></name> <operator pos:line="27" pos:column="24">&gt;<pos:position pos:line="27" pos:column="28"/></operator> <literal type="number" pos:line="27" pos:column="26">0<pos:position pos:line="27" pos:column="27"/></literal></expr>)<pos:position pos:line="27" pos:column="28"/></condition><then pos:line="27" pos:column="28">
      <block type="pseudo"><expr_stmt><expr><name pos:line="28" pos:column="7">non_empty<pos:position pos:line="28" pos:column="16"/></name><operator pos:line="28" pos:column="16">++<pos:position pos:line="28" pos:column="18"/></operator></expr>;<pos:position pos:line="28" pos:column="19"/></expr_stmt></block></then></if>

    <for pos:line="30" pos:column="5">for <control pos:line="30" pos:column="9">(<init><expr><name pos:line="30" pos:column="10">i<pos:position pos:line="30" pos:column="11"/></name> <operator pos:line="30" pos:column="12">=<pos:position pos:line="30" pos:column="13"/></operator> <literal type="number" pos:line="30" pos:column="14">0<pos:position pos:line="30" pos:column="15"/></literal></expr>;<pos:position pos:line="30" pos:column="16"/></init> <condition><expr><name pos:line="30" pos:column="17">i<pos:position pos:line="30" pos:column="18"/></name> <operator pos:line="30" pos:column="19">&lt;<pos:position pos:line="30" pos:column="23"/></operator> <name><name pos:line="30" pos:column="21">rc<pos:position pos:line="30" pos:column="23"/></name><operator pos:line="30" pos:column="23">-&gt;<pos:position pos:line="30" pos:column="28"/></operator><name pos:line="30" pos:column="25">values_num<pos:position pos:line="30" pos:column="35"/></name></name></expr>;<pos:position pos:line="30" pos:column="36"/></condition> <incr><expr><name pos:line="30" pos:column="37">i<pos:position pos:line="30" pos:column="38"/></name><operator pos:line="30" pos:column="38">++<pos:position pos:line="30" pos:column="40"/></operator></expr></incr>)<pos:position pos:line="30" pos:column="41"/></control>
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="31" pos:column="7">sfree<pos:position pos:line="31" pos:column="12"/></name> <argument_list pos:line="31" pos:column="13">(<argument><expr><name><name pos:line="31" pos:column="14">rc<pos:position pos:line="31" pos:column="16"/></name><operator pos:line="31" pos:column="16">-&gt;<pos:position pos:line="31" pos:column="21"/></operator><name pos:line="31" pos:column="18">values<pos:position pos:line="31" pos:column="24"/></name><index pos:line="31" pos:column="24">[<expr><name pos:line="31" pos:column="25">i<pos:position pos:line="31" pos:column="26"/></name></expr>]<pos:position pos:line="31" pos:column="27"/></index></name></expr></argument>)<pos:position pos:line="31" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="29"/></expr_stmt></block></for>
    <expr_stmt><expr><call><name pos:line="32" pos:column="5">sfree<pos:position pos:line="32" pos:column="10"/></name> <argument_list pos:line="32" pos:column="11">(<argument><expr><name><name pos:line="32" pos:column="12">rc<pos:position pos:line="32" pos:column="14"/></name><operator pos:line="32" pos:column="14">-&gt;<pos:position pos:line="32" pos:column="19"/></operator><name pos:line="32" pos:column="16">values<pos:position pos:line="32" pos:column="22"/></name></name></expr></argument>)<pos:position pos:line="32" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="24"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="33" pos:column="5">sfree<pos:position pos:line="33" pos:column="10"/></name> <argument_list pos:line="33" pos:column="11">(<argument><expr><name pos:line="33" pos:column="12">rc<pos:position pos:line="33" pos:column="14"/></name></expr></argument>)<pos:position pos:line="33" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="16"/></expr_stmt>
  }<pos:position pos:line="34" pos:column="4"/></block></while>

  <expr_stmt><expr><call><name pos:line="36" pos:column="3">c_avl_destroy<pos:position pos:line="36" pos:column="16"/></name> <argument_list pos:line="36" pos:column="17">(<argument><expr><name pos:line="36" pos:column="18">cache<pos:position pos:line="36" pos:column="23"/></name></expr></argument>)<pos:position pos:line="36" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="25"/></expr_stmt>
  <expr_stmt><expr><name pos:line="37" pos:column="3">cache<pos:position pos:line="37" pos:column="8"/></name> <operator pos:line="37" pos:column="9">=<pos:position pos:line="37" pos:column="10"/></operator> <name pos:line="37" pos:column="11">NULL<pos:position pos:line="37" pos:column="15"/></name></expr>;<pos:position pos:line="37" pos:column="16"/></expr_stmt>

  <if pos:line="39" pos:column="3">if <condition pos:line="39" pos:column="6">(<expr><name pos:line="39" pos:column="7">non_empty<pos:position pos:line="39" pos:column="16"/></name> <operator pos:line="39" pos:column="17">&gt;<pos:position pos:line="39" pos:column="21"/></operator> <literal type="number" pos:line="39" pos:column="19">0<pos:position pos:line="39" pos:column="20"/></literal></expr>)<pos:position pos:line="39" pos:column="21"/></condition><then pos:line="39" pos:column="21">
  <block pos:line="40" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="41" pos:column="5">INFO<pos:position pos:line="41" pos:column="9"/></name> <argument_list pos:line="41" pos:column="10">(<argument><expr><literal type="string" pos:line="41" pos:column="11">"rrdtool plugin: %i cache %s had values when destroying the cache."<pos:position pos:line="41" pos:column="78"/></literal></expr></argument>,
        <argument><expr><name pos:line="42" pos:column="9">non_empty<pos:position pos:line="42" pos:column="18"/></name></expr></argument>, <argument><expr><ternary><condition><expr><operator pos:line="42" pos:column="20">(<pos:position pos:line="42" pos:column="21"/></operator><name pos:line="42" pos:column="21">non_empty<pos:position pos:line="42" pos:column="30"/></name> <operator pos:line="42" pos:column="31">==<pos:position pos:line="42" pos:column="33"/></operator> <literal type="number" pos:line="42" pos:column="34">1<pos:position pos:line="42" pos:column="35"/></literal><operator pos:line="42" pos:column="35">)<pos:position pos:line="42" pos:column="36"/></operator></expr> ?<pos:position pos:line="42" pos:column="38"/></condition><then pos:line="42" pos:column="38"> <expr><literal type="string" pos:line="42" pos:column="39">"entry"<pos:position pos:line="42" pos:column="46"/></literal></expr> <pos:position pos:line="42" pos:column="47"/></then><else pos:line="42" pos:column="47">: <expr><literal type="string" pos:line="42" pos:column="49">"entries"<pos:position pos:line="42" pos:column="58"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="42" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="60"/></expr_stmt>
  }<pos:position pos:line="43" pos:column="4"/></block></then>
  <else pos:line="44" pos:column="3">else
  <block pos:line="45" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="46" pos:column="5">DEBUG<pos:position pos:line="46" pos:column="10"/></name> <argument_list pos:line="46" pos:column="11">(<argument><expr><literal type="string" pos:line="46" pos:column="12">"rrdtool plugin: No values have been lost "<pos:position pos:line="46" pos:column="55"/></literal>
        <literal type="string" pos:line="47" pos:column="9">"when destroying the cache."<pos:position pos:line="47" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="47" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="39"/></expr_stmt>
  }<pos:position pos:line="48" pos:column="4"/></block></else></if>

  <expr_stmt><expr><call><name pos:line="50" pos:column="3">pthread_mutex_unlock<pos:position pos:line="50" pos:column="23"/></name> <argument_list pos:line="50" pos:column="24">(<argument><expr><operator pos:line="50" pos:column="25">&amp;<pos:position pos:line="50" pos:column="30"/></operator><name pos:line="50" pos:column="26">cache_lock<pos:position pos:line="50" pos:column="36"/></name></expr></argument>)<pos:position pos:line="50" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="38"/></expr_stmt>
  <return pos:line="51" pos:column="3">return <expr><operator pos:line="51" pos:column="10">(<pos:position pos:line="51" pos:column="11"/></operator><literal type="number" pos:line="51" pos:column="11">0<pos:position pos:line="51" pos:column="12"/></literal><operator pos:line="51" pos:column="12">)<pos:position pos:line="51" pos:column="13"/></operator></expr>;<pos:position pos:line="51" pos:column="14"/></return>
}<pos:position pos:line="52" pos:column="2"/></block></function></unit>
