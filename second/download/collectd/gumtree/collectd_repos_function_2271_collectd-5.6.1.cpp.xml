<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_2271_collectd-5.6.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">server_send_buffer<pos:position pos:line="1" pos:column="30"/></name> <parameter_list pos:line="1" pos:column="31">(<parameter><decl><type><name pos:line="1" pos:column="32">lcc_server_t<pos:position pos:line="1" pos:column="44"/></name> <modifier pos:line="1" pos:column="45">*<pos:position pos:line="1" pos:column="46"/></modifier></type><name pos:line="1" pos:column="46">srv<pos:position pos:line="1" pos:column="49"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="50"/></parameter_list> <comment type="block" pos:line="1" pos:column="51">/* {{{ */</comment>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">char<pos:position pos:line="3" pos:column="7"/></name></type> <name><name pos:line="3" pos:column="8">buffer<pos:position pos:line="3" pos:column="14"/></name><index pos:line="3" pos:column="14">[<expr><name pos:line="3" pos:column="15">LCC_NETWORK_BUFFER_SIZE_DEFAULT<pos:position pos:line="3" pos:column="46"/></name></expr>]<pos:position pos:line="3" pos:column="47"/></index></name> <init pos:line="3" pos:column="48">= <expr><block pos:line="3" pos:column="50">{ <expr><literal type="number" pos:line="3" pos:column="52">0<pos:position pos:line="3" pos:column="53"/></literal></expr> }<pos:position pos:line="3" pos:column="55"/></block></expr></init></decl>;<pos:position pos:line="3" pos:column="56"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">size_t<pos:position pos:line="4" pos:column="9"/></name></type> <name pos:line="4" pos:column="10">buffer_size<pos:position pos:line="4" pos:column="21"/></name></decl>;<pos:position pos:line="4" pos:column="22"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">int<pos:position pos:line="5" pos:column="6"/></name></type> <name pos:line="5" pos:column="7">status<pos:position pos:line="5" pos:column="13"/></name></decl>;<pos:position pos:line="5" pos:column="14"/></decl_stmt>

  <if pos:line="7" pos:column="3">if <condition pos:line="7" pos:column="6">(<expr><name><name pos:line="7" pos:column="7">srv<pos:position pos:line="7" pos:column="10"/></name><operator pos:line="7" pos:column="10">-&gt;<pos:position pos:line="7" pos:column="15"/></operator><name pos:line="7" pos:column="12">fd<pos:position pos:line="7" pos:column="14"/></name></name> <operator pos:line="7" pos:column="15">&lt;<pos:position pos:line="7" pos:column="19"/></operator> <literal type="number" pos:line="7" pos:column="17">0<pos:position pos:line="7" pos:column="18"/></literal></expr>)<pos:position pos:line="7" pos:column="19"/></condition><then pos:line="7" pos:column="19">
  <block pos:line="8" pos:column="3">{
    <expr_stmt><expr><name pos:line="9" pos:column="5">status<pos:position pos:line="9" pos:column="11"/></name> <operator pos:line="9" pos:column="12">=<pos:position pos:line="9" pos:column="13"/></operator> <call><name pos:line="9" pos:column="14">server_open_socket<pos:position pos:line="9" pos:column="32"/></name> <argument_list pos:line="9" pos:column="33">(<argument><expr><name pos:line="9" pos:column="34">srv<pos:position pos:line="9" pos:column="37"/></name></expr></argument>)<pos:position pos:line="9" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="39"/></expr_stmt>
    <if pos:line="10" pos:column="5">if <condition pos:line="10" pos:column="8">(<expr><name pos:line="10" pos:column="9">status<pos:position pos:line="10" pos:column="15"/></name> <operator pos:line="10" pos:column="16">!=<pos:position pos:line="10" pos:column="18"/></operator> <literal type="number" pos:line="10" pos:column="19">0<pos:position pos:line="10" pos:column="20"/></literal></expr>)<pos:position pos:line="10" pos:column="21"/></condition><then pos:line="10" pos:column="21">
      <block type="pseudo"><return pos:line="11" pos:column="7">return <expr><operator pos:line="11" pos:column="14">(<pos:position pos:line="11" pos:column="15"/></operator><name pos:line="11" pos:column="15">status<pos:position pos:line="11" pos:column="21"/></name><operator pos:line="11" pos:column="21">)<pos:position pos:line="11" pos:column="22"/></operator></expr>;<pos:position pos:line="11" pos:column="23"/></return></block></then></if>
  }<pos:position pos:line="12" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="14" pos:column="3">buffer_size<pos:position pos:line="14" pos:column="14"/></name> <operator pos:line="14" pos:column="15">=<pos:position pos:line="14" pos:column="16"/></operator> <sizeof pos:line="14" pos:column="17">sizeof <argument_list pos:line="14" pos:column="24">(<argument><expr><name pos:line="14" pos:column="25">buffer<pos:position pos:line="14" pos:column="31"/></name></expr></argument>)<pos:position pos:line="14" pos:column="32"/></argument_list></sizeof></expr>;<pos:position pos:line="14" pos:column="33"/></expr_stmt>

  <expr_stmt><expr><name pos:line="16" pos:column="3">status<pos:position pos:line="16" pos:column="9"/></name> <operator pos:line="16" pos:column="10">=<pos:position pos:line="16" pos:column="11"/></operator> <call><name pos:line="16" pos:column="12">lcc_network_buffer_finalize<pos:position pos:line="16" pos:column="39"/></name> <argument_list pos:line="16" pos:column="40">(<argument><expr><name><name pos:line="16" pos:column="41">srv<pos:position pos:line="16" pos:column="44"/></name><operator pos:line="16" pos:column="44">-&gt;<pos:position pos:line="16" pos:column="49"/></operator><name pos:line="16" pos:column="46">buffer<pos:position pos:line="16" pos:column="52"/></name></name></expr></argument>)<pos:position pos:line="16" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="54"/></expr_stmt>
  <if pos:line="17" pos:column="3">if <condition pos:line="17" pos:column="6">(<expr><name pos:line="17" pos:column="7">status<pos:position pos:line="17" pos:column="13"/></name> <operator pos:line="17" pos:column="14">!=<pos:position pos:line="17" pos:column="16"/></operator> <literal type="number" pos:line="17" pos:column="17">0<pos:position pos:line="17" pos:column="18"/></literal></expr>)<pos:position pos:line="17" pos:column="19"/></condition><then pos:line="17" pos:column="19">
  <block pos:line="18" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="19" pos:column="5">lcc_network_buffer_initialize<pos:position pos:line="19" pos:column="34"/></name> <argument_list pos:line="19" pos:column="35">(<argument><expr><name><name pos:line="19" pos:column="36">srv<pos:position pos:line="19" pos:column="39"/></name><operator pos:line="19" pos:column="39">-&gt;<pos:position pos:line="19" pos:column="44"/></operator><name pos:line="19" pos:column="41">buffer<pos:position pos:line="19" pos:column="47"/></name></name></expr></argument>)<pos:position pos:line="19" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="49"/></expr_stmt>
    <return pos:line="20" pos:column="5">return <expr><operator pos:line="20" pos:column="12">(<pos:position pos:line="20" pos:column="13"/></operator><name pos:line="20" pos:column="13">status<pos:position pos:line="20" pos:column="19"/></name><operator pos:line="20" pos:column="19">)<pos:position pos:line="20" pos:column="20"/></operator></expr>;<pos:position pos:line="20" pos:column="21"/></return>
  }<pos:position pos:line="21" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="23" pos:column="3">status<pos:position pos:line="23" pos:column="9"/></name> <operator pos:line="23" pos:column="10">=<pos:position pos:line="23" pos:column="11"/></operator> <call><name pos:line="23" pos:column="12">lcc_network_buffer_get<pos:position pos:line="23" pos:column="34"/></name> <argument_list pos:line="23" pos:column="35">(<argument><expr><name><name pos:line="23" pos:column="36">srv<pos:position pos:line="23" pos:column="39"/></name><operator pos:line="23" pos:column="39">-&gt;<pos:position pos:line="23" pos:column="44"/></operator><name pos:line="23" pos:column="41">buffer<pos:position pos:line="23" pos:column="47"/></name></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="49">buffer<pos:position pos:line="23" pos:column="55"/></name></expr></argument>, <argument><expr><operator pos:line="23" pos:column="57">&amp;<pos:position pos:line="23" pos:column="62"/></operator><name pos:line="23" pos:column="58">buffer_size<pos:position pos:line="23" pos:column="69"/></name></expr></argument>)<pos:position pos:line="23" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="71"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="24" pos:column="3">lcc_network_buffer_initialize<pos:position pos:line="24" pos:column="32"/></name> <argument_list pos:line="24" pos:column="33">(<argument><expr><name><name pos:line="24" pos:column="34">srv<pos:position pos:line="24" pos:column="37"/></name><operator pos:line="24" pos:column="37">-&gt;<pos:position pos:line="24" pos:column="42"/></operator><name pos:line="24" pos:column="39">buffer<pos:position pos:line="24" pos:column="45"/></name></name></expr></argument>)<pos:position pos:line="24" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="47"/></expr_stmt>

  <if pos:line="26" pos:column="3">if <condition pos:line="26" pos:column="6">(<expr><name pos:line="26" pos:column="7">status<pos:position pos:line="26" pos:column="13"/></name> <operator pos:line="26" pos:column="14">!=<pos:position pos:line="26" pos:column="16"/></operator> <literal type="number" pos:line="26" pos:column="17">0<pos:position pos:line="26" pos:column="18"/></literal></expr>)<pos:position pos:line="26" pos:column="19"/></condition><then pos:line="26" pos:column="19">
    <block type="pseudo"><return pos:line="27" pos:column="5">return <expr><operator pos:line="27" pos:column="12">(<pos:position pos:line="27" pos:column="13"/></operator><name pos:line="27" pos:column="13">status<pos:position pos:line="27" pos:column="19"/></name><operator pos:line="27" pos:column="19">)<pos:position pos:line="27" pos:column="20"/></operator></expr>;<pos:position pos:line="27" pos:column="21"/></return></block></then></if>

  <if pos:line="29" pos:column="3">if <condition pos:line="29" pos:column="6">(<expr><name pos:line="29" pos:column="7">buffer_size<pos:position pos:line="29" pos:column="18"/></name> <operator pos:line="29" pos:column="19">&gt;<pos:position pos:line="29" pos:column="23"/></operator> <sizeof pos:line="29" pos:column="21">sizeof <argument_list pos:line="29" pos:column="28">(<argument><expr><name pos:line="29" pos:column="29">buffer<pos:position pos:line="29" pos:column="35"/></name></expr></argument>)<pos:position pos:line="29" pos:column="36"/></argument_list></sizeof></expr>)<pos:position pos:line="29" pos:column="37"/></condition><then pos:line="29" pos:column="37">
    <block type="pseudo"><expr_stmt><expr><name pos:line="30" pos:column="5">buffer_size<pos:position pos:line="30" pos:column="16"/></name> <operator pos:line="30" pos:column="17">=<pos:position pos:line="30" pos:column="18"/></operator> <sizeof pos:line="30" pos:column="19">sizeof <argument_list pos:line="30" pos:column="26">(<argument><expr><name pos:line="30" pos:column="27">buffer<pos:position pos:line="30" pos:column="33"/></name></expr></argument>)<pos:position pos:line="30" pos:column="34"/></argument_list></sizeof></expr>;<pos:position pos:line="30" pos:column="35"/></expr_stmt></block></then></if>

  <while pos:line="32" pos:column="3">while <condition pos:line="32" pos:column="9">(<expr><literal type="number" pos:line="32" pos:column="10">42<pos:position pos:line="32" pos:column="12"/></literal></expr>)<pos:position pos:line="32" pos:column="13"/></condition>
  <block pos:line="33" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="34" pos:column="5">assert<pos:position pos:line="34" pos:column="11"/></name> <argument_list pos:line="34" pos:column="12">(<argument><expr><name><name pos:line="34" pos:column="13">srv<pos:position pos:line="34" pos:column="16"/></name><operator pos:line="34" pos:column="16">-&gt;<pos:position pos:line="34" pos:column="21"/></operator><name pos:line="34" pos:column="18">fd<pos:position pos:line="34" pos:column="20"/></name></name> <operator pos:line="34" pos:column="21">&gt;=<pos:position pos:line="34" pos:column="26"/></operator> <literal type="number" pos:line="34" pos:column="24">0<pos:position pos:line="34" pos:column="25"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="27"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="35" pos:column="5">assert<pos:position pos:line="35" pos:column="11"/></name> <argument_list pos:line="35" pos:column="12">(<argument><expr><name><name pos:line="35" pos:column="13">srv<pos:position pos:line="35" pos:column="16"/></name><operator pos:line="35" pos:column="16">-&gt;<pos:position pos:line="35" pos:column="21"/></operator><name pos:line="35" pos:column="18">sa<pos:position pos:line="35" pos:column="20"/></name></name> <operator pos:line="35" pos:column="21">!=<pos:position pos:line="35" pos:column="23"/></operator> <name pos:line="35" pos:column="24">NULL<pos:position pos:line="35" pos:column="28"/></name></expr></argument>)<pos:position pos:line="35" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="30"/></expr_stmt>
    <expr_stmt><expr><name pos:line="36" pos:column="5">status<pos:position pos:line="36" pos:column="11"/></name> <operator pos:line="36" pos:column="12">=<pos:position pos:line="36" pos:column="13"/></operator> <operator pos:line="36" pos:column="14">(<pos:position pos:line="36" pos:column="15"/></operator><name pos:line="36" pos:column="15">int<pos:position pos:line="36" pos:column="18"/></name><operator pos:line="36" pos:column="18">)<pos:position pos:line="36" pos:column="19"/></operator> <call><name pos:line="36" pos:column="20">sendto<pos:position pos:line="36" pos:column="26"/></name> <argument_list pos:line="36" pos:column="27">(<argument><expr><name><name pos:line="36" pos:column="28">srv<pos:position pos:line="36" pos:column="31"/></name><operator pos:line="36" pos:column="31">-&gt;<pos:position pos:line="36" pos:column="36"/></operator><name pos:line="36" pos:column="33">fd<pos:position pos:line="36" pos:column="35"/></name></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="37">buffer<pos:position pos:line="36" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="45">buffer_size<pos:position pos:line="36" pos:column="56"/></name></expr></argument>, <comment type="block" pos:line="36" pos:column="58">/* flags = */</comment> <argument><expr><literal type="number" pos:line="36" pos:column="72">0<pos:position pos:line="36" pos:column="73"/></literal></expr></argument>,
        <argument><expr><name><name pos:line="37" pos:column="9">srv<pos:position pos:line="37" pos:column="12"/></name><operator pos:line="37" pos:column="12">-&gt;<pos:position pos:line="37" pos:column="17"/></operator><name pos:line="37" pos:column="14">sa<pos:position pos:line="37" pos:column="16"/></name></name></expr></argument>, <argument><expr><name><name pos:line="37" pos:column="18">srv<pos:position pos:line="37" pos:column="21"/></name><operator pos:line="37" pos:column="21">-&gt;<pos:position pos:line="37" pos:column="26"/></operator><name pos:line="37" pos:column="23">sa_len<pos:position pos:line="37" pos:column="29"/></name></name></expr></argument>)<pos:position pos:line="37" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="31"/></expr_stmt>
    <if pos:line="38" pos:column="5">if <condition pos:line="38" pos:column="8">(<expr><operator pos:line="38" pos:column="9">(<pos:position pos:line="38" pos:column="10"/></operator><name pos:line="38" pos:column="10">status<pos:position pos:line="38" pos:column="16"/></name> <operator pos:line="38" pos:column="17">&lt;<pos:position pos:line="38" pos:column="21"/></operator> <literal type="number" pos:line="38" pos:column="19">0<pos:position pos:line="38" pos:column="20"/></literal><operator pos:line="38" pos:column="20">)<pos:position pos:line="38" pos:column="21"/></operator> <operator pos:line="38" pos:column="22">&amp;&amp;<pos:position pos:line="38" pos:column="32"/></operator> <operator pos:line="38" pos:column="25">(<pos:position pos:line="38" pos:column="26"/></operator><operator pos:line="38" pos:column="26">(<pos:position pos:line="38" pos:column="27"/></operator><name pos:line="38" pos:column="27">errno<pos:position pos:line="38" pos:column="32"/></name> <operator pos:line="38" pos:column="33">==<pos:position pos:line="38" pos:column="35"/></operator> <name pos:line="38" pos:column="36">EINTR<pos:position pos:line="38" pos:column="41"/></name><operator pos:line="38" pos:column="41">)<pos:position pos:line="38" pos:column="42"/></operator> <operator pos:line="38" pos:column="43">||<pos:position pos:line="38" pos:column="45"/></operator> <operator pos:line="38" pos:column="46">(<pos:position pos:line="38" pos:column="47"/></operator><name pos:line="38" pos:column="47">errno<pos:position pos:line="38" pos:column="52"/></name> <operator pos:line="38" pos:column="53">==<pos:position pos:line="38" pos:column="55"/></operator> <name pos:line="38" pos:column="56">EAGAIN<pos:position pos:line="38" pos:column="62"/></name><operator pos:line="38" pos:column="62">)<pos:position pos:line="38" pos:column="63"/></operator><operator pos:line="38" pos:column="63">)<pos:position pos:line="38" pos:column="64"/></operator></expr>)<pos:position pos:line="38" pos:column="65"/></condition><then pos:line="38" pos:column="65">
      <block type="pseudo"><continue pos:line="39" pos:column="7">continue;<pos:position pos:line="39" pos:column="16"/></continue></block></then></if>

    <break pos:line="41" pos:column="5">break;<pos:position pos:line="41" pos:column="11"/></break>
  }<pos:position pos:line="42" pos:column="4"/></block></while>

  <if pos:line="44" pos:column="3">if <condition pos:line="44" pos:column="6">(<expr><name pos:line="44" pos:column="7">status<pos:position pos:line="44" pos:column="13"/></name> <operator pos:line="44" pos:column="14">&lt;<pos:position pos:line="44" pos:column="18"/></operator> <literal type="number" pos:line="44" pos:column="16">0<pos:position pos:line="44" pos:column="17"/></literal></expr>)<pos:position pos:line="44" pos:column="18"/></condition><then pos:line="44" pos:column="18">
    <block type="pseudo"><return pos:line="45" pos:column="5">return <expr><operator pos:line="45" pos:column="12">(<pos:position pos:line="45" pos:column="13"/></operator><name pos:line="45" pos:column="13">status<pos:position pos:line="45" pos:column="19"/></name><operator pos:line="45" pos:column="19">)<pos:position pos:line="45" pos:column="20"/></operator></expr>;<pos:position pos:line="45" pos:column="21"/></return></block></then></if>
  <return pos:line="46" pos:column="3">return <expr><operator pos:line="46" pos:column="10">(<pos:position pos:line="46" pos:column="11"/></operator><literal type="number" pos:line="46" pos:column="11">0<pos:position pos:line="46" pos:column="12"/></literal><operator pos:line="46" pos:column="12">)<pos:position pos:line="46" pos:column="13"/></operator></expr>;<pos:position pos:line="46" pos:column="14"/></return>
}<pos:position pos:line="47" pos:column="2"/></block></function></unit>
