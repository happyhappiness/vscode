<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_281_collectd-5.0.5.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">ignorelist_append_regex<pos:position pos:line="1" pos:column="35"/></name><parameter_list pos:line="1" pos:column="35">(<parameter><decl><type><name pos:line="1" pos:column="36">ignorelist_t<pos:position pos:line="1" pos:column="48"/></name> <modifier pos:line="1" pos:column="49">*<pos:position pos:line="1" pos:column="50"/></modifier></type><name pos:line="1" pos:column="50">il<pos:position pos:line="1" pos:column="52"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="54">const<pos:position pos:line="1" pos:column="59"/></specifier> <name pos:line="1" pos:column="60">char<pos:position pos:line="1" pos:column="64"/></name> <modifier pos:line="1" pos:column="65">*<pos:position pos:line="1" pos:column="66"/></modifier></type><name pos:line="1" pos:column="66">entry<pos:position pos:line="1" pos:column="71"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="72"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">rcompile<pos:position pos:line="3" pos:column="21"/></name></decl>;<pos:position pos:line="3" pos:column="22"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">regex_t<pos:position pos:line="4" pos:column="16"/></name> <modifier pos:line="4" pos:column="17">*<pos:position pos:line="4" pos:column="18"/></modifier></type><name pos:line="4" pos:column="18">regtemp<pos:position pos:line="4" pos:column="25"/></name></decl>;<pos:position pos:line="4" pos:column="26"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">errsize<pos:position pos:line="5" pos:column="20"/></name></decl>;<pos:position pos:line="5" pos:column="21"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">char<pos:position pos:line="6" pos:column="13"/></name> <modifier pos:line="6" pos:column="14">*<pos:position pos:line="6" pos:column="15"/></modifier></type><name pos:line="6" pos:column="15">regerr<pos:position pos:line="6" pos:column="21"/></name> <init pos:line="6" pos:column="22">= <expr><name pos:line="6" pos:column="24">NULL<pos:position pos:line="6" pos:column="28"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="29"/></decl_stmt>
	<expr_stmt><expr><name pos:line="7" pos:column="9">ignorelist_item_t<pos:position pos:line="7" pos:column="26"/></name> <operator pos:line="7" pos:column="27">*<pos:position pos:line="7" pos:column="28"/></operator><operator pos:line="7" pos:column="28">new<pos:position pos:line="7" pos:column="31"/></operator></expr>;<pos:position pos:line="7" pos:column="32"/></expr_stmt>

	<comment type="block" pos:line="9" pos:column="9">/* create buffer */</comment>
	<if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><operator pos:line="10" pos:column="13">(<pos:position pos:line="10" pos:column="14"/></operator><name pos:line="10" pos:column="14">regtemp<pos:position pos:line="10" pos:column="21"/></name> <operator pos:line="10" pos:column="22">=<pos:position pos:line="10" pos:column="23"/></operator> <call><name pos:line="10" pos:column="24">malloc<pos:position pos:line="10" pos:column="30"/></name><argument_list pos:line="10" pos:column="30">(<argument><expr><sizeof pos:line="10" pos:column="31">sizeof<argument_list pos:line="10" pos:column="37">(<argument><expr><name pos:line="10" pos:column="38">regex_t<pos:position pos:line="10" pos:column="45"/></name></expr></argument>)<pos:position pos:line="10" pos:column="46"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="10" pos:column="47"/></argument_list></call><operator pos:line="10" pos:column="47">)<pos:position pos:line="10" pos:column="48"/></operator> <operator pos:line="10" pos:column="49">==<pos:position pos:line="10" pos:column="51"/></operator> <name pos:line="10" pos:column="52">NULL<pos:position pos:line="10" pos:column="56"/></name></expr>)<pos:position pos:line="10" pos:column="57"/></condition><then pos:line="10" pos:column="57">
	<block pos:line="11" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="12" pos:column="17">ERROR<pos:position pos:line="12" pos:column="22"/></name> <argument_list pos:line="12" pos:column="23">(<argument><expr><literal type="string" pos:line="12" pos:column="24">"cannot allocate new config entry"<pos:position pos:line="12" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="60"/></expr_stmt>
		<return pos:line="13" pos:column="17">return <expr><operator pos:line="13" pos:column="24">(<pos:position pos:line="13" pos:column="25"/></operator><literal type="number" pos:line="13" pos:column="25">1<pos:position pos:line="13" pos:column="26"/></literal><operator pos:line="13" pos:column="26">)<pos:position pos:line="13" pos:column="27"/></operator></expr>;<pos:position pos:line="13" pos:column="28"/></return>
	}<pos:position pos:line="14" pos:column="10"/></block></then></if>
	<expr_stmt><expr><call><name pos:line="15" pos:column="9">memset<pos:position pos:line="15" pos:column="15"/></name> <argument_list pos:line="15" pos:column="16">(<argument><expr><name pos:line="15" pos:column="17">regtemp<pos:position pos:line="15" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="15" pos:column="26">'\0'<pos:position pos:line="15" pos:column="30"/></literal></expr></argument>, <argument><expr><sizeof pos:line="15" pos:column="32">sizeof<argument_list pos:line="15" pos:column="38">(<argument><expr><name pos:line="15" pos:column="39">regex_t<pos:position pos:line="15" pos:column="46"/></name></expr></argument>)<pos:position pos:line="15" pos:column="47"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="15" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="49"/></expr_stmt>

	<comment type="block" pos:line="17" pos:column="9">/* compile regex */</comment>
	<if pos:line="18" pos:column="9">if <condition pos:line="18" pos:column="12">(<expr><operator pos:line="18" pos:column="13">(<pos:position pos:line="18" pos:column="14"/></operator><name pos:line="18" pos:column="14">rcompile<pos:position pos:line="18" pos:column="22"/></name> <operator pos:line="18" pos:column="23">=<pos:position pos:line="18" pos:column="24"/></operator> <call><name pos:line="18" pos:column="25">regcomp<pos:position pos:line="18" pos:column="32"/></name> <argument_list pos:line="18" pos:column="33">(<argument><expr><name pos:line="18" pos:column="34">regtemp<pos:position pos:line="18" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="43">entry<pos:position pos:line="18" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="50">REG_EXTENDED<pos:position pos:line="18" pos:column="62"/></name></expr></argument>)<pos:position pos:line="18" pos:column="63"/></argument_list></call><operator pos:line="18" pos:column="63">)<pos:position pos:line="18" pos:column="64"/></operator> <operator pos:line="18" pos:column="65">!=<pos:position pos:line="18" pos:column="67"/></operator> <literal type="number" pos:line="18" pos:column="68">0<pos:position pos:line="18" pos:column="69"/></literal></expr>)<pos:position pos:line="18" pos:column="70"/></condition><then pos:line="18" pos:column="70">
	<block pos:line="19" pos:column="9">{
		<comment type="block" pos:line="20" pos:column="17">/* prepare message buffer */</comment>
		<expr_stmt><expr><name pos:line="21" pos:column="17">errsize<pos:position pos:line="21" pos:column="24"/></name> <operator pos:line="21" pos:column="25">=<pos:position pos:line="21" pos:column="26"/></operator> <call><name pos:line="21" pos:column="27">regerror<pos:position pos:line="21" pos:column="35"/></name><argument_list pos:line="21" pos:column="35">(<argument><expr><name pos:line="21" pos:column="36">rcompile<pos:position pos:line="21" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="46">regtemp<pos:position pos:line="21" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="55">NULL<pos:position pos:line="21" pos:column="59"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="21" pos:column="61">0<pos:position pos:line="21" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="64"/></expr_stmt>
		<if pos:line="22" pos:column="17">if <condition pos:line="22" pos:column="20">(<expr><name pos:line="22" pos:column="21">errsize<pos:position pos:line="22" pos:column="28"/></name></expr>)<pos:position pos:line="22" pos:column="29"/></condition><then pos:line="22" pos:column="29">
			<block type="pseudo"><expr_stmt><expr><name pos:line="23" pos:column="25">regerr<pos:position pos:line="23" pos:column="31"/></name> <operator pos:line="23" pos:column="32">=<pos:position pos:line="23" pos:column="33"/></operator> <call><name pos:line="23" pos:column="34">smalloc<pos:position pos:line="23" pos:column="41"/></name><argument_list pos:line="23" pos:column="41">(<argument><expr><name pos:line="23" pos:column="42">errsize<pos:position pos:line="23" pos:column="49"/></name></expr></argument>)<pos:position pos:line="23" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="51"/></expr_stmt></block></then></if>
		<comment type="block" pos:line="24" pos:column="17">/* get error message */</comment>
		<if pos:line="25" pos:column="17">if <condition pos:line="25" pos:column="20">(<expr><call><name pos:line="25" pos:column="21">regerror<pos:position pos:line="25" pos:column="29"/></name> <argument_list pos:line="25" pos:column="30">(<argument><expr><name pos:line="25" pos:column="31">rcompile<pos:position pos:line="25" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="41">regtemp<pos:position pos:line="25" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="50">regerr<pos:position pos:line="25" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="58">errsize<pos:position pos:line="25" pos:column="65"/></name></expr></argument>)<pos:position pos:line="25" pos:column="66"/></argument_list></call></expr>)<pos:position pos:line="25" pos:column="67"/></condition><then pos:line="25" pos:column="67">
		<block pos:line="26" pos:column="17">{
			<expr_stmt><expr><call><name pos:line="27" pos:column="25">fprintf<pos:position pos:line="27" pos:column="32"/></name> <argument_list pos:line="27" pos:column="33">(<argument><expr><name pos:line="27" pos:column="34">stderr<pos:position pos:line="27" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="27" pos:column="42">"Cannot compile regex %s: %i/%s"<pos:position pos:line="27" pos:column="74"/></literal></expr></argument>,
					<argument><expr><name pos:line="28" pos:column="41">entry<pos:position pos:line="28" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="48">rcompile<pos:position pos:line="28" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="58">regerr<pos:position pos:line="28" pos:column="64"/></name></expr></argument>)<pos:position pos:line="28" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="66"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="29" pos:column="25">ERROR<pos:position pos:line="29" pos:column="30"/></name> <argument_list pos:line="29" pos:column="31">(<argument><expr><literal type="string" pos:line="29" pos:column="32">"Cannot compile regex %s: %i/%s"<pos:position pos:line="29" pos:column="64"/></literal></expr></argument>,
					<argument><expr><name pos:line="30" pos:column="41">entry<pos:position pos:line="30" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="48">rcompile<pos:position pos:line="30" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="58">regerr<pos:position pos:line="30" pos:column="64"/></name></expr></argument>)<pos:position pos:line="30" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="66"/></expr_stmt>
		}<pos:position pos:line="31" pos:column="18"/></block></then>
		<else pos:line="32" pos:column="17">else
		<block pos:line="33" pos:column="17">{
			<expr_stmt><expr><call><name pos:line="34" pos:column="25">fprintf<pos:position pos:line="34" pos:column="32"/></name> <argument_list pos:line="34" pos:column="33">(<argument><expr><name pos:line="34" pos:column="34">stderr<pos:position pos:line="34" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="34" pos:column="42">"Cannot compile regex %s: %i"<pos:position pos:line="34" pos:column="71"/></literal></expr></argument>,
					<argument><expr><name pos:line="35" pos:column="41">entry<pos:position pos:line="35" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="48">rcompile<pos:position pos:line="35" pos:column="56"/></name></expr></argument>)<pos:position pos:line="35" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="58"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="36" pos:column="25">ERROR<pos:position pos:line="36" pos:column="30"/></name> <argument_list pos:line="36" pos:column="31">(<argument><expr><literal type="string" pos:line="36" pos:column="32">"Cannot compile regex %s: %i"<pos:position pos:line="36" pos:column="61"/></literal></expr></argument>,
					<argument><expr><name pos:line="37" pos:column="41">entry<pos:position pos:line="37" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="48">rcompile<pos:position pos:line="37" pos:column="56"/></name></expr></argument>)<pos:position pos:line="37" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="58"/></expr_stmt>
		}<pos:position pos:line="38" pos:column="18"/></block></else></if>

		<if pos:line="40" pos:column="17">if <condition pos:line="40" pos:column="20">(<expr><name pos:line="40" pos:column="21">errsize<pos:position pos:line="40" pos:column="28"/></name></expr>)<pos:position pos:line="40" pos:column="29"/></condition><then pos:line="40" pos:column="29">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="41" pos:column="25">sfree<pos:position pos:line="41" pos:column="30"/></name> <argument_list pos:line="41" pos:column="31">(<argument><expr><name pos:line="41" pos:column="32">regerr<pos:position pos:line="41" pos:column="38"/></name></expr></argument>)<pos:position pos:line="41" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="40"/></expr_stmt></block></then></if>
		<expr_stmt><expr><call><name pos:line="42" pos:column="17">regfree<pos:position pos:line="42" pos:column="24"/></name> <argument_list pos:line="42" pos:column="25">(<argument><expr><name pos:line="42" pos:column="26">regtemp<pos:position pos:line="42" pos:column="33"/></name></expr></argument>)<pos:position pos:line="42" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="35"/></expr_stmt>
		<return pos:line="43" pos:column="17">return <expr><operator pos:line="43" pos:column="24">(<pos:position pos:line="43" pos:column="25"/></operator><literal type="number" pos:line="43" pos:column="25">1<pos:position pos:line="43" pos:column="26"/></literal><operator pos:line="43" pos:column="26">)<pos:position pos:line="43" pos:column="27"/></operator></expr>;<pos:position pos:line="43" pos:column="28"/></return>
	}<pos:position pos:line="44" pos:column="10"/></block></then></if>
	<expr_stmt><expr><call><name pos:line="45" pos:column="9">DEBUG<pos:position pos:line="45" pos:column="14"/></name><argument_list pos:line="45" pos:column="14">(<argument><expr><literal type="string" pos:line="45" pos:column="15">"regex compiled: %s - %i"<pos:position pos:line="45" pos:column="40"/></literal></expr></argument>, <argument><expr><name pos:line="45" pos:column="42">entry<pos:position pos:line="45" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="49">rcompile<pos:position pos:line="45" pos:column="57"/></name></expr></argument>)<pos:position pos:line="45" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="59"/></expr_stmt>

	<comment type="block" pos:line="47" pos:column="9">/* create new entry */</comment>
	<if pos:line="48" pos:column="9">if <condition pos:line="48" pos:column="12">(<expr><operator pos:line="48" pos:column="13">(<pos:position pos:line="48" pos:column="14"/></operator><operator pos:line="48" pos:column="14">new<pos:position pos:line="48" pos:column="17"/></operator> <operator pos:line="48" pos:column="18">=<pos:position pos:line="48" pos:column="19"/></operator> <call><name pos:line="48" pos:column="20">malloc<pos:position pos:line="48" pos:column="26"/></name><argument_list pos:line="48" pos:column="26">(<argument><expr><sizeof pos:line="48" pos:column="27">sizeof<argument_list pos:line="48" pos:column="33">(<argument><expr><name pos:line="48" pos:column="34">ignorelist_item_t<pos:position pos:line="48" pos:column="51"/></name></expr></argument>)<pos:position pos:line="48" pos:column="52"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="48" pos:column="53"/></argument_list></call><operator pos:line="48" pos:column="53">)<pos:position pos:line="48" pos:column="54"/></operator> <operator pos:line="48" pos:column="55">==<pos:position pos:line="48" pos:column="57"/></operator> <name pos:line="48" pos:column="58">NULL<pos:position pos:line="48" pos:column="62"/></name></expr>)<pos:position pos:line="48" pos:column="63"/></condition><then pos:line="48" pos:column="63">
	<block pos:line="49" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="50" pos:column="17">ERROR<pos:position pos:line="50" pos:column="22"/></name> <argument_list pos:line="50" pos:column="23">(<argument><expr><literal type="string" pos:line="50" pos:column="24">"cannot allocate new config entry"<pos:position pos:line="50" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="50" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="60"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="51" pos:column="17">regfree<pos:position pos:line="51" pos:column="24"/></name> <argument_list pos:line="51" pos:column="25">(<argument><expr><name pos:line="51" pos:column="26">regtemp<pos:position pos:line="51" pos:column="33"/></name></expr></argument>)<pos:position pos:line="51" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="35"/></expr_stmt>
		<return pos:line="52" pos:column="17">return <expr><operator pos:line="52" pos:column="24">(<pos:position pos:line="52" pos:column="25"/></operator><literal type="number" pos:line="52" pos:column="25">1<pos:position pos:line="52" pos:column="26"/></literal><operator pos:line="52" pos:column="26">)<pos:position pos:line="52" pos:column="27"/></operator></expr>;<pos:position pos:line="52" pos:column="28"/></return>
	}<pos:position pos:line="53" pos:column="10"/></block></then></if>
	<expr_stmt><expr><call><name pos:line="54" pos:column="9">memset<pos:position pos:line="54" pos:column="15"/></name> <argument_list pos:line="54" pos:column="16">(<argument><expr><operator pos:line="54" pos:column="17">new<pos:position pos:line="54" pos:column="20"/></operator></expr></argument>, <argument><expr><literal type="char" pos:line="54" pos:column="22">'\0'<pos:position pos:line="54" pos:column="26"/></literal></expr></argument>, <argument><expr><sizeof pos:line="54" pos:column="28">sizeof<argument_list pos:line="54" pos:column="34">(<argument><expr><name pos:line="54" pos:column="35">ignorelist_item_t<pos:position pos:line="54" pos:column="52"/></name></expr></argument>)<pos:position pos:line="54" pos:column="53"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="54" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="55"/></expr_stmt>
	<expr_stmt><expr><operator pos:line="55" pos:column="9">new<pos:position pos:line="55" pos:column="12"/></operator><operator pos:line="55" pos:column="12">-&gt;<pos:position pos:line="55" pos:column="17"/></operator><name pos:line="55" pos:column="14">rmatch<pos:position pos:line="55" pos:column="20"/></name> <operator pos:line="55" pos:column="21">=<pos:position pos:line="55" pos:column="22"/></operator> <name pos:line="55" pos:column="23">regtemp<pos:position pos:line="55" pos:column="30"/></name></expr>;<pos:position pos:line="55" pos:column="31"/></expr_stmt>

	<comment type="block" pos:line="57" pos:column="9">/* append new entry */</comment>
	<expr_stmt><expr><call><name pos:line="58" pos:column="9">ignorelist_append<pos:position pos:line="58" pos:column="26"/></name> <argument_list pos:line="58" pos:column="27">(<argument><expr><name pos:line="58" pos:column="28">il<pos:position pos:line="58" pos:column="30"/></name></expr></argument>, <argument><expr><operator pos:line="58" pos:column="32">new<pos:position pos:line="58" pos:column="35"/></operator></expr></argument>)<pos:position pos:line="58" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="37"/></expr_stmt>

	<return pos:line="60" pos:column="9">return <expr><operator pos:line="60" pos:column="16">(<pos:position pos:line="60" pos:column="17"/></operator><literal type="number" pos:line="60" pos:column="17">0<pos:position pos:line="60" pos:column="18"/></literal><operator pos:line="60" pos:column="18">)<pos:position pos:line="60" pos:column="19"/></operator></expr>;<pos:position pos:line="60" pos:column="20"/></return>
}<pos:position pos:line="61" pos:column="2"/></block></function></unit>
