<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1744_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">ovs_db_reconnect<pos:position pos:line="1" pos:column="29"/></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name pos:line="1" pos:column="30">ovs_db_t<pos:position pos:line="1" pos:column="38"/></name> <modifier pos:line="1" pos:column="39">*<pos:position pos:line="1" pos:column="40"/></modifier></type><name pos:line="1" pos:column="40">pdb<pos:position pos:line="1" pos:column="43"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="44"/></parameter_list> <block pos:line="1" pos:column="45">{
  <decl_stmt><decl><type><specifier pos:line="2" pos:column="3">const<pos:position pos:line="2" pos:column="8"/></specifier> <name pos:line="2" pos:column="9">char<pos:position pos:line="2" pos:column="13"/></name> <modifier pos:line="2" pos:column="14">*<pos:position pos:line="2" pos:column="15"/></modifier></type><name pos:line="2" pos:column="15">node_info<pos:position pos:line="2" pos:column="24"/></name> <init pos:line="2" pos:column="25">= <expr><name><name pos:line="2" pos:column="27">pdb<pos:position pos:line="2" pos:column="30"/></name><operator pos:line="2" pos:column="30">-&gt;<pos:position pos:line="2" pos:column="35"/></operator><name pos:line="2" pos:column="32">node<pos:position pos:line="2" pos:column="36"/></name></name></expr></init></decl>;<pos:position pos:line="2" pos:column="37"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="3" pos:column="3">struct<pos:position pos:line="3" pos:column="9"/></name> <name pos:line="3" pos:column="10">addrinfo<pos:position pos:line="3" pos:column="18"/></name></name> <modifier pos:line="3" pos:column="19">*<pos:position pos:line="3" pos:column="20"/></modifier></type><name pos:line="3" pos:column="20">result<pos:position pos:line="3" pos:column="26"/></name></decl>;<pos:position pos:line="3" pos:column="27"/></decl_stmt>

  <if pos:line="5" pos:column="3">if <condition pos:line="5" pos:column="6">(<expr><name><name pos:line="5" pos:column="7">pdb<pos:position pos:line="5" pos:column="10"/></name><operator pos:line="5" pos:column="10">-&gt;<pos:position pos:line="5" pos:column="15"/></operator><name pos:line="5" pos:column="12">unix_path<pos:position pos:line="5" pos:column="21"/></name><index pos:line="5" pos:column="21">[<expr><literal type="number" pos:line="5" pos:column="22">0<pos:position pos:line="5" pos:column="23"/></literal></expr>]<pos:position pos:line="5" pos:column="24"/></index></name> <operator pos:line="5" pos:column="25">!=<pos:position pos:line="5" pos:column="27"/></operator> <literal type="char" pos:line="5" pos:column="28">'\0'<pos:position pos:line="5" pos:column="32"/></literal></expr>)<pos:position pos:line="5" pos:column="33"/></condition><then pos:line="5" pos:column="33"> <block pos:line="5" pos:column="34">{
    <comment type="block" pos:line="6" pos:column="5">/* use UNIX socket instead of INET address */</comment>
    <expr_stmt><expr><name pos:line="7" pos:column="5">node_info<pos:position pos:line="7" pos:column="14"/></name> <operator pos:line="7" pos:column="15">=<pos:position pos:line="7" pos:column="16"/></operator> <name><name pos:line="7" pos:column="17">pdb<pos:position pos:line="7" pos:column="20"/></name><operator pos:line="7" pos:column="20">-&gt;<pos:position pos:line="7" pos:column="25"/></operator><name pos:line="7" pos:column="22">unix_path<pos:position pos:line="7" pos:column="31"/></name></name></expr>;<pos:position pos:line="7" pos:column="32"/></expr_stmt>
    <expr_stmt><expr><name pos:line="8" pos:column="5">result<pos:position pos:line="8" pos:column="11"/></name> <operator pos:line="8" pos:column="12">=<pos:position pos:line="8" pos:column="13"/></operator> <call><name pos:line="8" pos:column="14">calloc<pos:position pos:line="8" pos:column="20"/></name><argument_list pos:line="8" pos:column="20">(<argument><expr><literal type="number" pos:line="8" pos:column="21">1<pos:position pos:line="8" pos:column="22"/></literal></expr></argument>, <argument><expr><sizeof pos:line="8" pos:column="24">sizeof<argument_list pos:line="8" pos:column="30">(<argument><expr pos:line="8" pos:column="31">struct <name pos:line="8" pos:column="38">addrinfo<pos:position pos:line="8" pos:column="46"/></name></expr></argument>)<pos:position pos:line="8" pos:column="47"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="8" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="49"/></expr_stmt>
    <decl_stmt><decl><type><name><name pos:line="9" pos:column="5">struct<pos:position pos:line="9" pos:column="11"/></name> <name pos:line="9" pos:column="12">sockaddr_un<pos:position pos:line="9" pos:column="23"/></name></name> <modifier pos:line="9" pos:column="24">*<pos:position pos:line="9" pos:column="25"/></modifier></type><name pos:line="9" pos:column="25">sa_unix<pos:position pos:line="9" pos:column="32"/></name> <init pos:line="9" pos:column="33">= <expr><call><name pos:line="9" pos:column="35">calloc<pos:position pos:line="9" pos:column="41"/></name><argument_list pos:line="9" pos:column="41">(<argument><expr><literal type="number" pos:line="9" pos:column="42">1<pos:position pos:line="9" pos:column="43"/></literal></expr></argument>, <argument><expr><sizeof pos:line="9" pos:column="45">sizeof<argument_list pos:line="9" pos:column="51">(<argument><expr pos:line="9" pos:column="52">struct <name pos:line="9" pos:column="59">sockaddr_un<pos:position pos:line="9" pos:column="70"/></name></expr></argument>)<pos:position pos:line="9" pos:column="71"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="9" pos:column="72"/></argument_list></call></expr></init></decl>;<pos:position pos:line="9" pos:column="73"/></decl_stmt>
    <if pos:line="10" pos:column="5">if <condition pos:line="10" pos:column="8">(<expr><name pos:line="10" pos:column="9">result<pos:position pos:line="10" pos:column="15"/></name> <operator pos:line="10" pos:column="16">==<pos:position pos:line="10" pos:column="18"/></operator> <name pos:line="10" pos:column="19">NULL<pos:position pos:line="10" pos:column="23"/></name> <operator pos:line="10" pos:column="24">||<pos:position pos:line="10" pos:column="26"/></operator> <name pos:line="10" pos:column="27">sa_unix<pos:position pos:line="10" pos:column="34"/></name> <operator pos:line="10" pos:column="35">==<pos:position pos:line="10" pos:column="37"/></operator> <name pos:line="10" pos:column="38">NULL<pos:position pos:line="10" pos:column="42"/></name></expr>)<pos:position pos:line="10" pos:column="43"/></condition><then pos:line="10" pos:column="43"> <block pos:line="10" pos:column="44">{
      <expr_stmt><expr><call><name pos:line="11" pos:column="7">sfree<pos:position pos:line="11" pos:column="12"/></name><argument_list pos:line="11" pos:column="12">(<argument><expr><name pos:line="11" pos:column="13">result<pos:position pos:line="11" pos:column="19"/></name></expr></argument>)<pos:position pos:line="11" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="21"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="12" pos:column="7">sfree<pos:position pos:line="12" pos:column="12"/></name><argument_list pos:line="12" pos:column="12">(<argument><expr><name pos:line="12" pos:column="13">sa_unix<pos:position pos:line="12" pos:column="20"/></name></expr></argument>)<pos:position pos:line="12" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="22"/></expr_stmt>
      <return pos:line="13" pos:column="7">return;<pos:position pos:line="13" pos:column="14"/></return>
    }<pos:position pos:line="14" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name><name pos:line="15" pos:column="5">result<pos:position pos:line="15" pos:column="11"/></name><operator pos:line="15" pos:column="11">-&gt;<pos:position pos:line="15" pos:column="16"/></operator><name pos:line="15" pos:column="13">ai_family<pos:position pos:line="15" pos:column="22"/></name></name> <operator pos:line="15" pos:column="23">=<pos:position pos:line="15" pos:column="24"/></operator> <name pos:line="15" pos:column="25">AF_UNIX<pos:position pos:line="15" pos:column="32"/></name></expr>;<pos:position pos:line="15" pos:column="33"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="16" pos:column="5">result<pos:position pos:line="16" pos:column="11"/></name><operator pos:line="16" pos:column="11">-&gt;<pos:position pos:line="16" pos:column="16"/></operator><name pos:line="16" pos:column="13">ai_socktype<pos:position pos:line="16" pos:column="24"/></name></name> <operator pos:line="16" pos:column="25">=<pos:position pos:line="16" pos:column="26"/></operator> <name pos:line="16" pos:column="27">SOCK_STREAM<pos:position pos:line="16" pos:column="38"/></name></expr>;<pos:position pos:line="16" pos:column="39"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="17" pos:column="5">result<pos:position pos:line="17" pos:column="11"/></name><operator pos:line="17" pos:column="11">-&gt;<pos:position pos:line="17" pos:column="16"/></operator><name pos:line="17" pos:column="13">ai_addrlen<pos:position pos:line="17" pos:column="23"/></name></name> <operator pos:line="17" pos:column="24">=<pos:position pos:line="17" pos:column="25"/></operator> <sizeof pos:line="17" pos:column="26">sizeof<argument_list pos:line="17" pos:column="32">(<argument><expr><operator pos:line="17" pos:column="33">*<pos:position pos:line="17" pos:column="34"/></operator><name pos:line="17" pos:column="34">sa_unix<pos:position pos:line="17" pos:column="41"/></name></expr></argument>)<pos:position pos:line="17" pos:column="42"/></argument_list></sizeof></expr>;<pos:position pos:line="17" pos:column="43"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="18" pos:column="5">result<pos:position pos:line="18" pos:column="11"/></name><operator pos:line="18" pos:column="11">-&gt;<pos:position pos:line="18" pos:column="16"/></operator><name pos:line="18" pos:column="13">ai_addr<pos:position pos:line="18" pos:column="20"/></name></name> <operator pos:line="18" pos:column="21">=<pos:position pos:line="18" pos:column="22"/></operator> <operator pos:line="18" pos:column="23">(<pos:position pos:line="18" pos:column="24"/></operator>struct <name pos:line="18" pos:column="31">sockaddr<pos:position pos:line="18" pos:column="39"/></name> <operator pos:line="18" pos:column="40">*<pos:position pos:line="18" pos:column="41"/></operator><operator pos:line="18" pos:column="41">)<pos:position pos:line="18" pos:column="42"/></operator><name pos:line="18" pos:column="42">sa_unix<pos:position pos:line="18" pos:column="49"/></name></expr>;<pos:position pos:line="18" pos:column="50"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="19" pos:column="5">sa_unix<pos:position pos:line="19" pos:column="12"/></name><operator pos:line="19" pos:column="12">-&gt;<pos:position pos:line="19" pos:column="17"/></operator><name pos:line="19" pos:column="14">sun_family<pos:position pos:line="19" pos:column="24"/></name></name> <operator pos:line="19" pos:column="25">=<pos:position pos:line="19" pos:column="26"/></operator> <name><name pos:line="19" pos:column="27">result<pos:position pos:line="19" pos:column="33"/></name><operator pos:line="19" pos:column="33">-&gt;<pos:position pos:line="19" pos:column="38"/></operator><name pos:line="19" pos:column="35">ai_family<pos:position pos:line="19" pos:column="44"/></name></name></expr>;<pos:position pos:line="19" pos:column="45"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="20" pos:column="5">sstrncpy<pos:position pos:line="20" pos:column="13"/></name><argument_list pos:line="20" pos:column="13">(<argument><expr><name><name pos:line="20" pos:column="14">sa_unix<pos:position pos:line="20" pos:column="21"/></name><operator pos:line="20" pos:column="21">-&gt;<pos:position pos:line="20" pos:column="26"/></operator><name pos:line="20" pos:column="23">sun_path<pos:position pos:line="20" pos:column="31"/></name></name></expr></argument>, <argument><expr><name><name pos:line="20" pos:column="33">pdb<pos:position pos:line="20" pos:column="36"/></name><operator pos:line="20" pos:column="36">-&gt;<pos:position pos:line="20" pos:column="41"/></operator><name pos:line="20" pos:column="38">unix_path<pos:position pos:line="20" pos:column="47"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="20" pos:column="49">sizeof<argument_list pos:line="20" pos:column="55">(<argument><expr><name><name pos:line="20" pos:column="56">sa_unix<pos:position pos:line="20" pos:column="63"/></name><operator pos:line="20" pos:column="63">-&gt;<pos:position pos:line="20" pos:column="68"/></operator><name pos:line="20" pos:column="65">sun_path<pos:position pos:line="20" pos:column="73"/></name></name></expr></argument>)<pos:position pos:line="20" pos:column="74"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="20" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="76"/></expr_stmt>
  }<pos:position pos:line="21" pos:column="4"/></block></then> <else pos:line="21" pos:column="5">else <block pos:line="21" pos:column="10">{
    <comment type="block" pos:line="22" pos:column="5">/* inet socket address */</comment>
    <decl_stmt><decl><type><name><name pos:line="23" pos:column="5">struct<pos:position pos:line="23" pos:column="11"/></name> <name pos:line="23" pos:column="12">addrinfo<pos:position pos:line="23" pos:column="20"/></name></name></type> <name pos:line="23" pos:column="21">hints<pos:position pos:line="23" pos:column="26"/></name></decl>;<pos:position pos:line="23" pos:column="27"/></decl_stmt>

    <comment type="block" pos:line="25" pos:column="5">/* setup criteria for selecting the socket address */</comment>
    <expr_stmt><expr><call><name pos:line="26" pos:column="5">memset<pos:position pos:line="26" pos:column="11"/></name><argument_list pos:line="26" pos:column="11">(<argument><expr><operator pos:line="26" pos:column="12">&amp;<pos:position pos:line="26" pos:column="17"/></operator><name pos:line="26" pos:column="13">hints<pos:position pos:line="26" pos:column="18"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="26" pos:column="20">0<pos:position pos:line="26" pos:column="21"/></literal></expr></argument>, <argument><expr><sizeof pos:line="26" pos:column="23">sizeof<argument_list pos:line="26" pos:column="29">(<argument><expr><name pos:line="26" pos:column="30">hints<pos:position pos:line="26" pos:column="35"/></name></expr></argument>)<pos:position pos:line="26" pos:column="36"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="26" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="38"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="27" pos:column="5">hints<pos:position pos:line="27" pos:column="10"/></name><operator pos:line="27" pos:column="10">.<pos:position pos:line="27" pos:column="11"/></operator><name pos:line="27" pos:column="11">ai_family<pos:position pos:line="27" pos:column="20"/></name></name> <operator pos:line="27" pos:column="21">=<pos:position pos:line="27" pos:column="22"/></operator> <name pos:line="27" pos:column="23">AF_UNSPEC<pos:position pos:line="27" pos:column="32"/></name></expr>;<pos:position pos:line="27" pos:column="33"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="28" pos:column="5">hints<pos:position pos:line="28" pos:column="10"/></name><operator pos:line="28" pos:column="10">.<pos:position pos:line="28" pos:column="11"/></operator><name pos:line="28" pos:column="11">ai_socktype<pos:position pos:line="28" pos:column="22"/></name></name> <operator pos:line="28" pos:column="23">=<pos:position pos:line="28" pos:column="24"/></operator> <name pos:line="28" pos:column="25">SOCK_STREAM<pos:position pos:line="28" pos:column="36"/></name></expr>;<pos:position pos:line="28" pos:column="37"/></expr_stmt>

    <comment type="block" pos:line="30" pos:column="5">/* get socket addresses */</comment>
    <decl_stmt><decl><type><name pos:line="31" pos:column="5">int<pos:position pos:line="31" pos:column="8"/></name></type> <name pos:line="31" pos:column="9">ret<pos:position pos:line="31" pos:column="12"/></name> <init pos:line="31" pos:column="13">= <expr><call><name pos:line="31" pos:column="15">getaddrinfo<pos:position pos:line="31" pos:column="26"/></name><argument_list pos:line="31" pos:column="26">(<argument><expr><name><name pos:line="31" pos:column="27">pdb<pos:position pos:line="31" pos:column="30"/></name><operator pos:line="31" pos:column="30">-&gt;<pos:position pos:line="31" pos:column="35"/></operator><name pos:line="31" pos:column="32">node<pos:position pos:line="31" pos:column="36"/></name></name></expr></argument>, <argument><expr><name><name pos:line="31" pos:column="38">pdb<pos:position pos:line="31" pos:column="41"/></name><operator pos:line="31" pos:column="41">-&gt;<pos:position pos:line="31" pos:column="46"/></operator><name pos:line="31" pos:column="43">service<pos:position pos:line="31" pos:column="50"/></name></name></expr></argument>, <argument><expr><operator pos:line="31" pos:column="52">&amp;<pos:position pos:line="31" pos:column="57"/></operator><name pos:line="31" pos:column="53">hints<pos:position pos:line="31" pos:column="58"/></name></expr></argument>, <argument><expr><operator pos:line="31" pos:column="60">&amp;<pos:position pos:line="31" pos:column="65"/></operator><name pos:line="31" pos:column="61">result<pos:position pos:line="31" pos:column="67"/></name></expr></argument>)<pos:position pos:line="31" pos:column="68"/></argument_list></call></expr></init></decl>;<pos:position pos:line="31" pos:column="69"/></decl_stmt>
    <if pos:line="32" pos:column="5">if <condition pos:line="32" pos:column="8">(<expr><name pos:line="32" pos:column="9">ret<pos:position pos:line="32" pos:column="12"/></name> <operator pos:line="32" pos:column="13">!=<pos:position pos:line="32" pos:column="15"/></operator> <literal type="number" pos:line="32" pos:column="16">0<pos:position pos:line="32" pos:column="17"/></literal></expr>)<pos:position pos:line="32" pos:column="18"/></condition><then pos:line="32" pos:column="18"> <block pos:line="32" pos:column="19">{
      <expr_stmt><expr><call><name pos:line="33" pos:column="7">OVS_ERROR<pos:position pos:line="33" pos:column="16"/></name><argument_list pos:line="33" pos:column="16">(<argument><expr><literal type="string" pos:line="33" pos:column="17">"getaddrinfo(): %s"<pos:position pos:line="33" pos:column="36"/></literal></expr></argument>, <argument><expr><call><name pos:line="33" pos:column="38">gai_strerror<pos:position pos:line="33" pos:column="50"/></name><argument_list pos:line="33" pos:column="50">(<argument><expr><name pos:line="33" pos:column="51">ret<pos:position pos:line="33" pos:column="54"/></name></expr></argument>)<pos:position pos:line="33" pos:column="55"/></argument_list></call></expr></argument>)<pos:position pos:line="33" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="57"/></expr_stmt>
      <return pos:line="34" pos:column="7">return;<pos:position pos:line="34" pos:column="14"/></return>
    }<pos:position pos:line="35" pos:column="6"/></block></then></if>
  }<pos:position pos:line="36" pos:column="4"/></block></else></if>
  <comment type="block" pos:line="37" pos:column="3">/* try to connect to the server */</comment>
  <for pos:line="38" pos:column="3">for <control pos:line="38" pos:column="7">(<init><decl><type><name><name pos:line="38" pos:column="8">struct<pos:position pos:line="38" pos:column="14"/></name> <name pos:line="38" pos:column="15">addrinfo<pos:position pos:line="38" pos:column="23"/></name></name> <modifier pos:line="38" pos:column="24">*<pos:position pos:line="38" pos:column="25"/></modifier><name pos:line="38" pos:column="25">rp<pos:position pos:line="38" pos:column="27"/></name></type> <init pos:line="38" pos:column="28">= <expr><name pos:line="38" pos:column="30">result<pos:position pos:line="38" pos:column="36"/></name></expr></init></decl>;<pos:position pos:line="38" pos:column="37"/></init> <condition><expr><name pos:line="38" pos:column="38">rp<pos:position pos:line="38" pos:column="40"/></name> <operator pos:line="38" pos:column="41">!=<pos:position pos:line="38" pos:column="43"/></operator> <name pos:line="38" pos:column="44">NULL<pos:position pos:line="38" pos:column="48"/></name></expr>;<pos:position pos:line="38" pos:column="49"/></condition> <incr><expr><name pos:line="38" pos:column="50">rp<pos:position pos:line="38" pos:column="52"/></name> <operator pos:line="38" pos:column="53">=<pos:position pos:line="38" pos:column="54"/></operator> <name><name pos:line="38" pos:column="55">rp<pos:position pos:line="38" pos:column="57"/></name><operator pos:line="38" pos:column="57">-&gt;<pos:position pos:line="38" pos:column="62"/></operator><name pos:line="38" pos:column="59">ai_next<pos:position pos:line="38" pos:column="66"/></name></name></expr></incr>)<pos:position pos:line="38" pos:column="67"/></control> <block pos:line="38" pos:column="68">{
    <decl_stmt><decl><type><name pos:line="39" pos:column="5">char<pos:position pos:line="39" pos:column="9"/></name></type> <name><name pos:line="39" pos:column="10">errbuff<pos:position pos:line="39" pos:column="17"/></name><index pos:line="39" pos:column="17">[<expr><name pos:line="39" pos:column="18">OVS_ERROR_BUFF_SIZE<pos:position pos:line="39" pos:column="37"/></name></expr>]<pos:position pos:line="39" pos:column="38"/></index></name></decl>;<pos:position pos:line="39" pos:column="39"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="40" pos:column="5">int<pos:position pos:line="40" pos:column="8"/></name></type> <name pos:line="40" pos:column="9">sock<pos:position pos:line="40" pos:column="13"/></name> <init pos:line="40" pos:column="14">= <expr><call><name pos:line="40" pos:column="16">socket<pos:position pos:line="40" pos:column="22"/></name><argument_list pos:line="40" pos:column="22">(<argument><expr><name><name pos:line="40" pos:column="23">rp<pos:position pos:line="40" pos:column="25"/></name><operator pos:line="40" pos:column="25">-&gt;<pos:position pos:line="40" pos:column="30"/></operator><name pos:line="40" pos:column="27">ai_family<pos:position pos:line="40" pos:column="36"/></name></name></expr></argument>, <argument><expr><name><name pos:line="40" pos:column="38">rp<pos:position pos:line="40" pos:column="40"/></name><operator pos:line="40" pos:column="40">-&gt;<pos:position pos:line="40" pos:column="45"/></operator><name pos:line="40" pos:column="42">ai_socktype<pos:position pos:line="40" pos:column="53"/></name></name></expr></argument>, <argument><expr><name><name pos:line="40" pos:column="55">rp<pos:position pos:line="40" pos:column="57"/></name><operator pos:line="40" pos:column="57">-&gt;<pos:position pos:line="40" pos:column="62"/></operator><name pos:line="40" pos:column="59">ai_protocol<pos:position pos:line="40" pos:column="70"/></name></name></expr></argument>)<pos:position pos:line="40" pos:column="71"/></argument_list></call></expr></init></decl>;<pos:position pos:line="40" pos:column="72"/></decl_stmt>
    <if pos:line="41" pos:column="5">if <condition pos:line="41" pos:column="8">(<expr><name pos:line="41" pos:column="9">sock<pos:position pos:line="41" pos:column="13"/></name> <operator pos:line="41" pos:column="14">&lt;<pos:position pos:line="41" pos:column="18"/></operator> <literal type="number" pos:line="41" pos:column="16">0<pos:position pos:line="41" pos:column="17"/></literal></expr>)<pos:position pos:line="41" pos:column="18"/></condition><then pos:line="41" pos:column="18"> <block pos:line="41" pos:column="19">{
      <expr_stmt><expr><call><name pos:line="42" pos:column="7">sstrerror<pos:position pos:line="42" pos:column="16"/></name><argument_list pos:line="42" pos:column="16">(<argument><expr><name pos:line="42" pos:column="17">errno<pos:position pos:line="42" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="24">errbuff<pos:position pos:line="42" pos:column="31"/></name></expr></argument>, <argument><expr><sizeof pos:line="42" pos:column="33">sizeof<argument_list pos:line="42" pos:column="39">(<argument><expr><name pos:line="42" pos:column="40">errbuff<pos:position pos:line="42" pos:column="47"/></name></expr></argument>)<pos:position pos:line="42" pos:column="48"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="42" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="50"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="43" pos:column="7">OVS_DEBUG<pos:position pos:line="43" pos:column="16"/></name><argument_list pos:line="43" pos:column="16">(<argument><expr><literal type="string" pos:line="43" pos:column="17">"socket(): %s"<pos:position pos:line="43" pos:column="31"/></literal></expr></argument>, <argument><expr><name pos:line="43" pos:column="33">errbuff<pos:position pos:line="43" pos:column="40"/></name></expr></argument>)<pos:position pos:line="43" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="42"/></expr_stmt>
      <continue pos:line="44" pos:column="7">continue;<pos:position pos:line="44" pos:column="16"/></continue>
    }<pos:position pos:line="45" pos:column="6"/></block></then></if>
    <if pos:line="46" pos:column="5">if <condition pos:line="46" pos:column="8">(<expr><call><name pos:line="46" pos:column="9">connect<pos:position pos:line="46" pos:column="16"/></name><argument_list pos:line="46" pos:column="16">(<argument><expr><name pos:line="46" pos:column="17">sock<pos:position pos:line="46" pos:column="21"/></name></expr></argument>, <argument><expr><name><name pos:line="46" pos:column="23">rp<pos:position pos:line="46" pos:column="25"/></name><operator pos:line="46" pos:column="25">-&gt;<pos:position pos:line="46" pos:column="30"/></operator><name pos:line="46" pos:column="27">ai_addr<pos:position pos:line="46" pos:column="34"/></name></name></expr></argument>, <argument><expr><name><name pos:line="46" pos:column="36">rp<pos:position pos:line="46" pos:column="38"/></name><operator pos:line="46" pos:column="38">-&gt;<pos:position pos:line="46" pos:column="43"/></operator><name pos:line="46" pos:column="40">ai_addrlen<pos:position pos:line="46" pos:column="50"/></name></name></expr></argument>)<pos:position pos:line="46" pos:column="51"/></argument_list></call> <operator pos:line="46" pos:column="52">&lt;<pos:position pos:line="46" pos:column="56"/></operator> <literal type="number" pos:line="46" pos:column="54">0<pos:position pos:line="46" pos:column="55"/></literal></expr>)<pos:position pos:line="46" pos:column="56"/></condition><then pos:line="46" pos:column="56"> <block pos:line="46" pos:column="57">{
      <expr_stmt><expr><call><name pos:line="47" pos:column="7">close<pos:position pos:line="47" pos:column="12"/></name><argument_list pos:line="47" pos:column="12">(<argument><expr><name pos:line="47" pos:column="13">sock<pos:position pos:line="47" pos:column="17"/></name></expr></argument>)<pos:position pos:line="47" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="19"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="48" pos:column="7">sstrerror<pos:position pos:line="48" pos:column="16"/></name><argument_list pos:line="48" pos:column="16">(<argument><expr><name pos:line="48" pos:column="17">errno<pos:position pos:line="48" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="24">errbuff<pos:position pos:line="48" pos:column="31"/></name></expr></argument>, <argument><expr><sizeof pos:line="48" pos:column="33">sizeof<argument_list pos:line="48" pos:column="39">(<argument><expr><name pos:line="48" pos:column="40">errbuff<pos:position pos:line="48" pos:column="47"/></name></expr></argument>)<pos:position pos:line="48" pos:column="48"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="48" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="50"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="49" pos:column="7">OVS_DEBUG<pos:position pos:line="49" pos:column="16"/></name><argument_list pos:line="49" pos:column="16">(<argument><expr><literal type="string" pos:line="49" pos:column="17">"connect(): %s [family=%d]"<pos:position pos:line="49" pos:column="44"/></literal></expr></argument>, <argument><expr><name pos:line="49" pos:column="46">errbuff<pos:position pos:line="49" pos:column="53"/></name></expr></argument>, <argument><expr><name><name pos:line="49" pos:column="55">rp<pos:position pos:line="49" pos:column="57"/></name><operator pos:line="49" pos:column="57">-&gt;<pos:position pos:line="49" pos:column="62"/></operator><name pos:line="49" pos:column="59">ai_family<pos:position pos:line="49" pos:column="68"/></name></name></expr></argument>)<pos:position pos:line="49" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="70"/></expr_stmt>
    }<pos:position pos:line="50" pos:column="6"/></block></then> <else pos:line="50" pos:column="7">else <block pos:line="50" pos:column="12">{
      <comment type="block" pos:line="51" pos:column="7">/* send notification to event thread */</comment>
      <expr_stmt><expr><call><name pos:line="52" pos:column="7">ovs_db_event_post<pos:position pos:line="52" pos:column="24"/></name><argument_list pos:line="52" pos:column="24">(<argument><expr><name pos:line="52" pos:column="25">pdb<pos:position pos:line="52" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="30">OVS_DB_EVENT_CONN_ESTABLISHED<pos:position pos:line="52" pos:column="59"/></name></expr></argument>)<pos:position pos:line="52" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="61"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="53" pos:column="7">pdb<pos:position pos:line="53" pos:column="10"/></name><operator pos:line="53" pos:column="10">-&gt;<pos:position pos:line="53" pos:column="15"/></operator><name pos:line="53" pos:column="12">sock<pos:position pos:line="53" pos:column="16"/></name></name> <operator pos:line="53" pos:column="17">=<pos:position pos:line="53" pos:column="18"/></operator> <name pos:line="53" pos:column="19">sock<pos:position pos:line="53" pos:column="23"/></name></expr>;<pos:position pos:line="53" pos:column="24"/></expr_stmt>
      <break pos:line="54" pos:column="7">break;<pos:position pos:line="54" pos:column="13"/></break>
    }<pos:position pos:line="55" pos:column="6"/></block></else></if>
  }<pos:position pos:line="56" pos:column="4"/></block></for>

  <if pos:line="58" pos:column="3">if <condition pos:line="58" pos:column="6">(<expr><name><name pos:line="58" pos:column="7">pdb<pos:position pos:line="58" pos:column="10"/></name><operator pos:line="58" pos:column="10">-&gt;<pos:position pos:line="58" pos:column="15"/></operator><name pos:line="58" pos:column="12">sock<pos:position pos:line="58" pos:column="16"/></name></name> <operator pos:line="58" pos:column="17">&lt;<pos:position pos:line="58" pos:column="21"/></operator> <literal type="number" pos:line="58" pos:column="19">0<pos:position pos:line="58" pos:column="20"/></literal></expr>)<pos:position pos:line="58" pos:column="21"/></condition><then pos:line="58" pos:column="21">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="59" pos:column="5">OVS_ERROR<pos:position pos:line="59" pos:column="14"/></name><argument_list pos:line="59" pos:column="14">(<argument><expr><literal type="string" pos:line="59" pos:column="15">"connect to \"%s\" failed"<pos:position pos:line="59" pos:column="41"/></literal></expr></argument>, <argument><expr><name pos:line="59" pos:column="43">node_info<pos:position pos:line="59" pos:column="52"/></name></expr></argument>)<pos:position pos:line="59" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="54"/></expr_stmt></block></then></if>

  <expr_stmt><expr><call><name pos:line="61" pos:column="3">freeaddrinfo<pos:position pos:line="61" pos:column="15"/></name><argument_list pos:line="61" pos:column="15">(<argument><expr><name pos:line="61" pos:column="16">result<pos:position pos:line="61" pos:column="22"/></name></expr></argument>)<pos:position pos:line="61" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="24"/></expr_stmt>
}<pos:position pos:line="62" pos:column="2"/></block></function></unit>
