<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_431_collectd-5.6.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">mr_config_add_regex<pos:position pos:line="1" pos:column="31"/></name><parameter_list pos:line="1" pos:column="31">(<parameter><decl><type><name pos:line="1" pos:column="32">mr_regex_t<pos:position pos:line="1" pos:column="42"/></name> <modifier pos:line="1" pos:column="43">*<pos:position pos:line="1" pos:column="44"/></modifier><modifier pos:line="1" pos:column="44">*<pos:position pos:line="1" pos:column="45"/></modifier></type><name pos:line="1" pos:column="45">re_head<pos:position pos:line="1" pos:column="52"/></name></decl></parameter>, <comment type="block" pos:line="1" pos:column="54">/* {{{ */</comment>
                               <parameter><decl><type><name pos:line="2" pos:column="32">oconfig_item_t<pos:position pos:line="2" pos:column="46"/></name> <modifier pos:line="2" pos:column="47">*<pos:position pos:line="2" pos:column="48"/></modifier></type><name pos:line="2" pos:column="48">ci<pos:position pos:line="2" pos:column="50"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="51"/></parameter_list> <block pos:line="2" pos:column="52">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">mr_regex_t<pos:position pos:line="3" pos:column="13"/></name> <modifier pos:line="3" pos:column="14">*<pos:position pos:line="3" pos:column="15"/></modifier></type><name pos:line="3" pos:column="15">re<pos:position pos:line="3" pos:column="17"/></name></decl>;<pos:position pos:line="3" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">int<pos:position pos:line="4" pos:column="6"/></name></type> <name pos:line="4" pos:column="7">status<pos:position pos:line="4" pos:column="13"/></name></decl>;<pos:position pos:line="4" pos:column="14"/></decl_stmt>

  <if pos:line="6" pos:column="3">if <condition pos:line="6" pos:column="6">(<expr><operator pos:line="6" pos:column="7">(<pos:position pos:line="6" pos:column="8"/></operator><name><name pos:line="6" pos:column="8">ci<pos:position pos:line="6" pos:column="10"/></name><operator pos:line="6" pos:column="10">-&gt;<pos:position pos:line="6" pos:column="15"/></operator><name pos:line="6" pos:column="12">values_num<pos:position pos:line="6" pos:column="22"/></name></name> <operator pos:line="6" pos:column="23">!=<pos:position pos:line="6" pos:column="25"/></operator> <literal type="number" pos:line="6" pos:column="26">1<pos:position pos:line="6" pos:column="27"/></literal><operator pos:line="6" pos:column="27">)<pos:position pos:line="6" pos:column="28"/></operator> <operator pos:line="6" pos:column="29">||<pos:position pos:line="6" pos:column="31"/></operator> <operator pos:line="6" pos:column="32">(<pos:position pos:line="6" pos:column="33"/></operator><name><name pos:line="6" pos:column="33">ci<pos:position pos:line="6" pos:column="35"/></name><operator pos:line="6" pos:column="35">-&gt;<pos:position pos:line="6" pos:column="40"/></operator><name pos:line="6" pos:column="37">values<pos:position pos:line="6" pos:column="43"/></name><index pos:line="6" pos:column="43">[<expr><literal type="number" pos:line="6" pos:column="44">0<pos:position pos:line="6" pos:column="45"/></literal></expr>]<pos:position pos:line="6" pos:column="46"/></index></name><operator pos:line="6" pos:column="46">.<pos:position pos:line="6" pos:column="47"/></operator><name pos:line="6" pos:column="47">type<pos:position pos:line="6" pos:column="51"/></name> <operator pos:line="6" pos:column="52">!=<pos:position pos:line="6" pos:column="54"/></operator> <name pos:line="6" pos:column="55">OCONFIG_TYPE_STRING<pos:position pos:line="6" pos:column="74"/></name><operator pos:line="6" pos:column="74">)<pos:position pos:line="6" pos:column="75"/></operator></expr>)<pos:position pos:line="6" pos:column="76"/></condition><then pos:line="6" pos:column="76"> <block pos:line="6" pos:column="77">{
    <expr_stmt><expr><call><name pos:line="7" pos:column="5">log_warn<pos:position pos:line="7" pos:column="13"/></name><argument_list pos:line="7" pos:column="13">(<argument><expr><literal type="string" pos:line="7" pos:column="14">"`%s' needs exactly one string argument."<pos:position pos:line="7" pos:column="55"/></literal></expr></argument>, <argument><expr><name><name pos:line="7" pos:column="57">ci<pos:position pos:line="7" pos:column="59"/></name><operator pos:line="7" pos:column="59">-&gt;<pos:position pos:line="7" pos:column="64"/></operator><name pos:line="7" pos:column="61">key<pos:position pos:line="7" pos:column="64"/></name></name></expr></argument>)<pos:position pos:line="7" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="66"/></expr_stmt>
    <return pos:line="8" pos:column="5">return <expr><operator pos:line="8" pos:column="12">(<pos:position pos:line="8" pos:column="13"/></operator><operator pos:line="8" pos:column="13">-<pos:position pos:line="8" pos:column="14"/></operator><literal type="number" pos:line="8" pos:column="14">1<pos:position pos:line="8" pos:column="15"/></literal><operator pos:line="8" pos:column="15">)<pos:position pos:line="8" pos:column="16"/></operator></expr>;<pos:position pos:line="8" pos:column="17"/></return>
  }<pos:position pos:line="9" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="11" pos:column="3">re<pos:position pos:line="11" pos:column="5"/></name> <operator pos:line="11" pos:column="6">=<pos:position pos:line="11" pos:column="7"/></operator> <call><name pos:line="11" pos:column="8">calloc<pos:position pos:line="11" pos:column="14"/></name><argument_list pos:line="11" pos:column="14">(<argument><expr><literal type="number" pos:line="11" pos:column="15">1<pos:position pos:line="11" pos:column="16"/></literal></expr></argument>, <argument><expr><sizeof pos:line="11" pos:column="18">sizeof<argument_list pos:line="11" pos:column="24">(<argument><expr><operator pos:line="11" pos:column="25">*<pos:position pos:line="11" pos:column="26"/></operator><name pos:line="11" pos:column="26">re<pos:position pos:line="11" pos:column="28"/></name></expr></argument>)<pos:position pos:line="11" pos:column="29"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="11" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="31"/></expr_stmt>
  <if pos:line="12" pos:column="3">if <condition pos:line="12" pos:column="6">(<expr><name pos:line="12" pos:column="7">re<pos:position pos:line="12" pos:column="9"/></name> <operator pos:line="12" pos:column="10">==<pos:position pos:line="12" pos:column="12"/></operator> <name pos:line="12" pos:column="13">NULL<pos:position pos:line="12" pos:column="17"/></name></expr>)<pos:position pos:line="12" pos:column="18"/></condition><then pos:line="12" pos:column="18"> <block pos:line="12" pos:column="19">{
    <expr_stmt><expr><call><name pos:line="13" pos:column="5">log_err<pos:position pos:line="13" pos:column="12"/></name><argument_list pos:line="13" pos:column="12">(<argument><expr><literal type="string" pos:line="13" pos:column="13">"mr_config_add_regex: calloc failed."<pos:position pos:line="13" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="52"/></expr_stmt>
    <return pos:line="14" pos:column="5">return <expr><operator pos:line="14" pos:column="12">(<pos:position pos:line="14" pos:column="13"/></operator><operator pos:line="14" pos:column="13">-<pos:position pos:line="14" pos:column="14"/></operator><literal type="number" pos:line="14" pos:column="14">1<pos:position pos:line="14" pos:column="15"/></literal><operator pos:line="14" pos:column="15">)<pos:position pos:line="14" pos:column="16"/></operator></expr>;<pos:position pos:line="14" pos:column="17"/></return>
  }<pos:position pos:line="15" pos:column="4"/></block></then></if>
  <expr_stmt><expr><name><name pos:line="16" pos:column="3">re<pos:position pos:line="16" pos:column="5"/></name><operator pos:line="16" pos:column="5">-&gt;<pos:position pos:line="16" pos:column="10"/></operator><name pos:line="16" pos:column="7">next<pos:position pos:line="16" pos:column="11"/></name></name> <operator pos:line="16" pos:column="12">=<pos:position pos:line="16" pos:column="13"/></operator> <name pos:line="16" pos:column="14">NULL<pos:position pos:line="16" pos:column="18"/></name></expr>;<pos:position pos:line="16" pos:column="19"/></expr_stmt>

  <expr_stmt><expr><name><name pos:line="18" pos:column="3">re<pos:position pos:line="18" pos:column="5"/></name><operator pos:line="18" pos:column="5">-&gt;<pos:position pos:line="18" pos:column="10"/></operator><name pos:line="18" pos:column="7">re_str<pos:position pos:line="18" pos:column="13"/></name></name> <operator pos:line="18" pos:column="14">=<pos:position pos:line="18" pos:column="15"/></operator> <call><name pos:line="18" pos:column="16">strdup<pos:position pos:line="18" pos:column="22"/></name><argument_list pos:line="18" pos:column="22">(<argument><expr><name><name pos:line="18" pos:column="23">ci<pos:position pos:line="18" pos:column="25"/></name><operator pos:line="18" pos:column="25">-&gt;<pos:position pos:line="18" pos:column="30"/></operator><name pos:line="18" pos:column="27">values<pos:position pos:line="18" pos:column="33"/></name><index pos:line="18" pos:column="33">[<expr><literal type="number" pos:line="18" pos:column="34">0<pos:position pos:line="18" pos:column="35"/></literal></expr>]<pos:position pos:line="18" pos:column="36"/></index></name><operator pos:line="18" pos:column="36">.<pos:position pos:line="18" pos:column="37"/></operator><name><name pos:line="18" pos:column="37">value<pos:position pos:line="18" pos:column="42"/></name><operator pos:line="18" pos:column="42">.<pos:position pos:line="18" pos:column="43"/></operator><name pos:line="18" pos:column="43">string<pos:position pos:line="18" pos:column="49"/></name></name></expr></argument>)<pos:position pos:line="18" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="51"/></expr_stmt>
  <if pos:line="19" pos:column="3">if <condition pos:line="19" pos:column="6">(<expr><name><name pos:line="19" pos:column="7">re<pos:position pos:line="19" pos:column="9"/></name><operator pos:line="19" pos:column="9">-&gt;<pos:position pos:line="19" pos:column="14"/></operator><name pos:line="19" pos:column="11">re_str<pos:position pos:line="19" pos:column="17"/></name></name> <operator pos:line="19" pos:column="18">==<pos:position pos:line="19" pos:column="20"/></operator> <name pos:line="19" pos:column="21">NULL<pos:position pos:line="19" pos:column="25"/></name></expr>)<pos:position pos:line="19" pos:column="26"/></condition><then pos:line="19" pos:column="26"> <block pos:line="19" pos:column="27">{
    <expr_stmt><expr><call><name pos:line="20" pos:column="5">free<pos:position pos:line="20" pos:column="9"/></name><argument_list pos:line="20" pos:column="9">(<argument><expr><name pos:line="20" pos:column="10">re<pos:position pos:line="20" pos:column="12"/></name></expr></argument>)<pos:position pos:line="20" pos:column="13"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="14"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="21" pos:column="5">log_err<pos:position pos:line="21" pos:column="12"/></name><argument_list pos:line="21" pos:column="12">(<argument><expr><literal type="string" pos:line="21" pos:column="13">"mr_config_add_regex: strdup failed."<pos:position pos:line="21" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="52"/></expr_stmt>
    <return pos:line="22" pos:column="5">return <expr><operator pos:line="22" pos:column="12">(<pos:position pos:line="22" pos:column="13"/></operator><operator pos:line="22" pos:column="13">-<pos:position pos:line="22" pos:column="14"/></operator><literal type="number" pos:line="22" pos:column="14">1<pos:position pos:line="22" pos:column="15"/></literal><operator pos:line="22" pos:column="15">)<pos:position pos:line="22" pos:column="16"/></operator></expr>;<pos:position pos:line="22" pos:column="17"/></return>
  }<pos:position pos:line="23" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="25" pos:column="3">status<pos:position pos:line="25" pos:column="9"/></name> <operator pos:line="25" pos:column="10">=<pos:position pos:line="25" pos:column="11"/></operator> <call><name pos:line="25" pos:column="12">regcomp<pos:position pos:line="25" pos:column="19"/></name><argument_list pos:line="25" pos:column="19">(<argument><expr><operator pos:line="25" pos:column="20">&amp;<pos:position pos:line="25" pos:column="25"/></operator><name><name pos:line="25" pos:column="21">re<pos:position pos:line="25" pos:column="23"/></name><operator pos:line="25" pos:column="23">-&gt;<pos:position pos:line="25" pos:column="28"/></operator><name pos:line="25" pos:column="25">re<pos:position pos:line="25" pos:column="27"/></name></name></expr></argument>, <argument><expr><name><name pos:line="25" pos:column="29">re<pos:position pos:line="25" pos:column="31"/></name><operator pos:line="25" pos:column="31">-&gt;<pos:position pos:line="25" pos:column="36"/></operator><name pos:line="25" pos:column="33">re_str<pos:position pos:line="25" pos:column="39"/></name></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="41">REG_EXTENDED<pos:position pos:line="25" pos:column="53"/></name> <operator pos:line="25" pos:column="54">|<pos:position pos:line="25" pos:column="55"/></operator> <name pos:line="25" pos:column="56">REG_NOSUB<pos:position pos:line="25" pos:column="65"/></name></expr></argument>)<pos:position pos:line="25" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="67"/></expr_stmt>
  <if pos:line="26" pos:column="3">if <condition pos:line="26" pos:column="6">(<expr><name pos:line="26" pos:column="7">status<pos:position pos:line="26" pos:column="13"/></name> <operator pos:line="26" pos:column="14">!=<pos:position pos:line="26" pos:column="16"/></operator> <literal type="number" pos:line="26" pos:column="17">0<pos:position pos:line="26" pos:column="18"/></literal></expr>)<pos:position pos:line="26" pos:column="19"/></condition><then pos:line="26" pos:column="19"> <block pos:line="26" pos:column="20">{
    <decl_stmt><decl><type><name pos:line="27" pos:column="5">char<pos:position pos:line="27" pos:column="9"/></name></type> <name><name pos:line="27" pos:column="10">errmsg<pos:position pos:line="27" pos:column="16"/></name><index pos:line="27" pos:column="16">[<expr><literal type="number" pos:line="27" pos:column="17">1024<pos:position pos:line="27" pos:column="21"/></literal></expr>]<pos:position pos:line="27" pos:column="22"/></index></name></decl>;<pos:position pos:line="27" pos:column="23"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="28" pos:column="5">regerror<pos:position pos:line="28" pos:column="13"/></name><argument_list pos:line="28" pos:column="13">(<argument><expr><name pos:line="28" pos:column="14">status<pos:position pos:line="28" pos:column="20"/></name></expr></argument>, <argument><expr><operator pos:line="28" pos:column="22">&amp;<pos:position pos:line="28" pos:column="27"/></operator><name><name pos:line="28" pos:column="23">re<pos:position pos:line="28" pos:column="25"/></name><operator pos:line="28" pos:column="25">-&gt;<pos:position pos:line="28" pos:column="30"/></operator><name pos:line="28" pos:column="27">re<pos:position pos:line="28" pos:column="29"/></name></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="31">errmsg<pos:position pos:line="28" pos:column="37"/></name></expr></argument>, <argument><expr><sizeof pos:line="28" pos:column="39">sizeof<argument_list pos:line="28" pos:column="45">(<argument><expr><name pos:line="28" pos:column="46">errmsg<pos:position pos:line="28" pos:column="52"/></name></expr></argument>)<pos:position pos:line="28" pos:column="53"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="28" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="55"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="29" pos:column="5">errmsg<pos:position pos:line="29" pos:column="11"/></name><index pos:line="29" pos:column="11">[<expr><sizeof pos:line="29" pos:column="12">sizeof<argument_list pos:line="29" pos:column="18">(<argument><expr><name pos:line="29" pos:column="19">errmsg<pos:position pos:line="29" pos:column="25"/></name></expr></argument>)<pos:position pos:line="29" pos:column="26"/></argument_list></sizeof> <operator pos:line="29" pos:column="27">-<pos:position pos:line="29" pos:column="28"/></operator> <literal type="number" pos:line="29" pos:column="29">1<pos:position pos:line="29" pos:column="30"/></literal></expr>]<pos:position pos:line="29" pos:column="31"/></index></name> <operator pos:line="29" pos:column="32">=<pos:position pos:line="29" pos:column="33"/></operator> <literal type="number" pos:line="29" pos:column="34">0<pos:position pos:line="29" pos:column="35"/></literal></expr>;<pos:position pos:line="29" pos:column="36"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="30" pos:column="5">log_err<pos:position pos:line="30" pos:column="12"/></name><argument_list pos:line="30" pos:column="12">(<argument><expr><literal type="string" pos:line="30" pos:column="13">"Compiling regex `%s' for `%s' failed: %s."<pos:position pos:line="30" pos:column="56"/></literal></expr></argument>, <argument><expr><name><name pos:line="30" pos:column="58">re<pos:position pos:line="30" pos:column="60"/></name><operator pos:line="30" pos:column="60">-&gt;<pos:position pos:line="30" pos:column="65"/></operator><name pos:line="30" pos:column="62">re_str<pos:position pos:line="30" pos:column="68"/></name></name></expr></argument>, <argument><expr><name><name pos:line="30" pos:column="70">ci<pos:position pos:line="30" pos:column="72"/></name><operator pos:line="30" pos:column="72">-&gt;<pos:position pos:line="30" pos:column="77"/></operator><name pos:line="30" pos:column="74">key<pos:position pos:line="30" pos:column="77"/></name></name></expr></argument>,
            <argument><expr><name pos:line="31" pos:column="13">errmsg<pos:position pos:line="31" pos:column="19"/></name></expr></argument>)<pos:position pos:line="31" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="21"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="32" pos:column="5">free<pos:position pos:line="32" pos:column="9"/></name><argument_list pos:line="32" pos:column="9">(<argument><expr><name><name pos:line="32" pos:column="10">re<pos:position pos:line="32" pos:column="12"/></name><operator pos:line="32" pos:column="12">-&gt;<pos:position pos:line="32" pos:column="17"/></operator><name pos:line="32" pos:column="14">re_str<pos:position pos:line="32" pos:column="20"/></name></name></expr></argument>)<pos:position pos:line="32" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="22"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="33" pos:column="5">free<pos:position pos:line="33" pos:column="9"/></name><argument_list pos:line="33" pos:column="9">(<argument><expr><name pos:line="33" pos:column="10">re<pos:position pos:line="33" pos:column="12"/></name></expr></argument>)<pos:position pos:line="33" pos:column="13"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="14"/></expr_stmt>
    <return pos:line="34" pos:column="5">return <expr><operator pos:line="34" pos:column="12">(<pos:position pos:line="34" pos:column="13"/></operator><operator pos:line="34" pos:column="13">-<pos:position pos:line="34" pos:column="14"/></operator><literal type="number" pos:line="34" pos:column="14">1<pos:position pos:line="34" pos:column="15"/></literal><operator pos:line="34" pos:column="15">)<pos:position pos:line="34" pos:column="16"/></operator></expr>;<pos:position pos:line="34" pos:column="17"/></return>
  }<pos:position pos:line="35" pos:column="4"/></block></then></if>

  <if pos:line="37" pos:column="3">if <condition pos:line="37" pos:column="6">(<expr><operator pos:line="37" pos:column="7">*<pos:position pos:line="37" pos:column="8"/></operator><name pos:line="37" pos:column="8">re_head<pos:position pos:line="37" pos:column="15"/></name> <operator pos:line="37" pos:column="16">==<pos:position pos:line="37" pos:column="18"/></operator> <name pos:line="37" pos:column="19">NULL<pos:position pos:line="37" pos:column="23"/></name></expr>)<pos:position pos:line="37" pos:column="24"/></condition><then pos:line="37" pos:column="24"> <block pos:line="37" pos:column="25">{
    <expr_stmt><expr><operator pos:line="38" pos:column="5">*<pos:position pos:line="38" pos:column="6"/></operator><name pos:line="38" pos:column="6">re_head<pos:position pos:line="38" pos:column="13"/></name> <operator pos:line="38" pos:column="14">=<pos:position pos:line="38" pos:column="15"/></operator> <name pos:line="38" pos:column="16">re<pos:position pos:line="38" pos:column="18"/></name></expr>;<pos:position pos:line="38" pos:column="19"/></expr_stmt>
  }<pos:position pos:line="39" pos:column="4"/></block></then> <else pos:line="39" pos:column="5">else <block pos:line="39" pos:column="10">{
    <decl_stmt><decl><type><name pos:line="40" pos:column="5">mr_regex_t<pos:position pos:line="40" pos:column="15"/></name> <modifier pos:line="40" pos:column="16">*<pos:position pos:line="40" pos:column="17"/></modifier></type><name pos:line="40" pos:column="17">ptr<pos:position pos:line="40" pos:column="20"/></name></decl>;<pos:position pos:line="40" pos:column="21"/></decl_stmt>

    <expr_stmt><expr><name pos:line="42" pos:column="5">ptr<pos:position pos:line="42" pos:column="8"/></name> <operator pos:line="42" pos:column="9">=<pos:position pos:line="42" pos:column="10"/></operator> <operator pos:line="42" pos:column="11">*<pos:position pos:line="42" pos:column="12"/></operator><name pos:line="42" pos:column="12">re_head<pos:position pos:line="42" pos:column="19"/></name></expr>;<pos:position pos:line="42" pos:column="20"/></expr_stmt>
    <while pos:line="43" pos:column="5">while <condition pos:line="43" pos:column="11">(<expr><name><name pos:line="43" pos:column="12">ptr<pos:position pos:line="43" pos:column="15"/></name><operator pos:line="43" pos:column="15">-&gt;<pos:position pos:line="43" pos:column="20"/></operator><name pos:line="43" pos:column="17">next<pos:position pos:line="43" pos:column="21"/></name></name> <operator pos:line="43" pos:column="22">!=<pos:position pos:line="43" pos:column="24"/></operator> <name pos:line="43" pos:column="25">NULL<pos:position pos:line="43" pos:column="29"/></name></expr>)<pos:position pos:line="43" pos:column="30"/></condition>
      <block type="pseudo"><expr_stmt><expr><name pos:line="44" pos:column="7">ptr<pos:position pos:line="44" pos:column="10"/></name> <operator pos:line="44" pos:column="11">=<pos:position pos:line="44" pos:column="12"/></operator> <name><name pos:line="44" pos:column="13">ptr<pos:position pos:line="44" pos:column="16"/></name><operator pos:line="44" pos:column="16">-&gt;<pos:position pos:line="44" pos:column="21"/></operator><name pos:line="44" pos:column="18">next<pos:position pos:line="44" pos:column="22"/></name></name></expr>;<pos:position pos:line="44" pos:column="23"/></expr_stmt></block></while>

    <expr_stmt><expr><name><name pos:line="46" pos:column="5">ptr<pos:position pos:line="46" pos:column="8"/></name><operator pos:line="46" pos:column="8">-&gt;<pos:position pos:line="46" pos:column="13"/></operator><name pos:line="46" pos:column="10">next<pos:position pos:line="46" pos:column="14"/></name></name> <operator pos:line="46" pos:column="15">=<pos:position pos:line="46" pos:column="16"/></operator> <name pos:line="46" pos:column="17">re<pos:position pos:line="46" pos:column="19"/></name></expr>;<pos:position pos:line="46" pos:column="20"/></expr_stmt>
  }<pos:position pos:line="47" pos:column="4"/></block></else></if>

  <return pos:line="49" pos:column="3">return <expr><operator pos:line="49" pos:column="10">(<pos:position pos:line="49" pos:column="11"/></operator><literal type="number" pos:line="49" pos:column="11">0<pos:position pos:line="49" pos:column="12"/></literal><operator pos:line="49" pos:column="12">)<pos:position pos:line="49" pos:column="13"/></operator></expr>;<pos:position pos:line="49" pos:column="14"/></return>
}<pos:position pos:line="50" pos:column="2"/></block></function></unit>
