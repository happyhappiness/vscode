<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_2538_collectd-5.7.1.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">strtoderive<pos:position pos:line="1" pos:column="16"/></name><parameter_list pos:line="1" pos:column="16">(<parameter><decl><type><specifier pos:line="1" pos:column="17">const<pos:position pos:line="1" pos:column="22"/></specifier> <name pos:line="1" pos:column="23">char<pos:position pos:line="1" pos:column="27"/></name> <modifier pos:line="1" pos:column="28">*<pos:position pos:line="1" pos:column="29"/></modifier></type><name pos:line="1" pos:column="29">string<pos:position pos:line="1" pos:column="35"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="37">derive_t<pos:position pos:line="1" pos:column="45"/></name> <modifier pos:line="1" pos:column="46">*<pos:position pos:line="1" pos:column="47"/></modifier></type><name pos:line="1" pos:column="47">ret_value<pos:position pos:line="1" pos:column="56"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="57"/></parameter_list> <comment type="block" pos:line="1" pos:column="58">/* {{{ */</comment>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">derive_t<pos:position pos:line="3" pos:column="11"/></name></type> <name pos:line="3" pos:column="12">tmp<pos:position pos:line="3" pos:column="15"/></name></decl>;<pos:position pos:line="3" pos:column="16"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">char<pos:position pos:line="4" pos:column="7"/></name> <modifier pos:line="4" pos:column="8">*<pos:position pos:line="4" pos:column="9"/></modifier></type><name pos:line="4" pos:column="9">endptr<pos:position pos:line="4" pos:column="15"/></name></decl>;<pos:position pos:line="4" pos:column="16"/></decl_stmt>

  <if pos:line="6" pos:column="3">if <condition pos:line="6" pos:column="6">(<expr><operator pos:line="6" pos:column="7">(<pos:position pos:line="6" pos:column="8"/></operator><name pos:line="6" pos:column="8">string<pos:position pos:line="6" pos:column="14"/></name> <operator pos:line="6" pos:column="15">==<pos:position pos:line="6" pos:column="17"/></operator> <name pos:line="6" pos:column="18">NULL<pos:position pos:line="6" pos:column="22"/></name><operator pos:line="6" pos:column="22">)<pos:position pos:line="6" pos:column="23"/></operator> <operator pos:line="6" pos:column="24">||<pos:position pos:line="6" pos:column="26"/></operator> <operator pos:line="6" pos:column="27">(<pos:position pos:line="6" pos:column="28"/></operator><name pos:line="6" pos:column="28">ret_value<pos:position pos:line="6" pos:column="37"/></name> <operator pos:line="6" pos:column="38">==<pos:position pos:line="6" pos:column="40"/></operator> <name pos:line="6" pos:column="41">NULL<pos:position pos:line="6" pos:column="45"/></name><operator pos:line="6" pos:column="45">)<pos:position pos:line="6" pos:column="46"/></operator></expr>)<pos:position pos:line="6" pos:column="47"/></condition><then pos:line="6" pos:column="47">
    <block type="pseudo"><return pos:line="7" pos:column="5">return <expr><operator pos:line="7" pos:column="12">(<pos:position pos:line="7" pos:column="13"/></operator><name pos:line="7" pos:column="13">EINVAL<pos:position pos:line="7" pos:column="19"/></name><operator pos:line="7" pos:column="19">)<pos:position pos:line="7" pos:column="20"/></operator></expr>;<pos:position pos:line="7" pos:column="21"/></return></block></then></if>

  <expr_stmt><expr><name pos:line="9" pos:column="3">errno<pos:position pos:line="9" pos:column="8"/></name> <operator pos:line="9" pos:column="9">=<pos:position pos:line="9" pos:column="10"/></operator> <literal type="number" pos:line="9" pos:column="11">0<pos:position pos:line="9" pos:column="12"/></literal></expr>;<pos:position pos:line="9" pos:column="13"/></expr_stmt>
  <expr_stmt><expr><name pos:line="10" pos:column="3">endptr<pos:position pos:line="10" pos:column="9"/></name> <operator pos:line="10" pos:column="10">=<pos:position pos:line="10" pos:column="11"/></operator> <name pos:line="10" pos:column="12">NULL<pos:position pos:line="10" pos:column="16"/></name></expr>;<pos:position pos:line="10" pos:column="17"/></expr_stmt>
  <expr_stmt><expr><name pos:line="11" pos:column="3">tmp<pos:position pos:line="11" pos:column="6"/></name> <operator pos:line="11" pos:column="7">=<pos:position pos:line="11" pos:column="8"/></operator> <operator pos:line="11" pos:column="9">(<pos:position pos:line="11" pos:column="10"/></operator><name pos:line="11" pos:column="10">derive_t<pos:position pos:line="11" pos:column="18"/></name><operator pos:line="11" pos:column="18">)<pos:position pos:line="11" pos:column="19"/></operator><call><name pos:line="11" pos:column="19">strtoll<pos:position pos:line="11" pos:column="26"/></name><argument_list pos:line="11" pos:column="26">(<argument><expr><name pos:line="11" pos:column="27">string<pos:position pos:line="11" pos:column="33"/></name></expr></argument>, <argument><expr><operator pos:line="11" pos:column="35">&amp;<pos:position pos:line="11" pos:column="40"/></operator><name pos:line="11" pos:column="36">endptr<pos:position pos:line="11" pos:column="42"/></name></expr></argument>, <comment type="block" pos:line="11" pos:column="44">/* base = */</comment> <argument><expr><literal type="number" pos:line="11" pos:column="57">0<pos:position pos:line="11" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="60"/></expr_stmt>
  <if pos:line="12" pos:column="3">if <condition pos:line="12" pos:column="6">(<expr><operator pos:line="12" pos:column="7">(<pos:position pos:line="12" pos:column="8"/></operator><name pos:line="12" pos:column="8">endptr<pos:position pos:line="12" pos:column="14"/></name> <operator pos:line="12" pos:column="15">==<pos:position pos:line="12" pos:column="17"/></operator> <name pos:line="12" pos:column="18">string<pos:position pos:line="12" pos:column="24"/></name><operator pos:line="12" pos:column="24">)<pos:position pos:line="12" pos:column="25"/></operator> <operator pos:line="12" pos:column="26">||<pos:position pos:line="12" pos:column="28"/></operator> <operator pos:line="12" pos:column="29">(<pos:position pos:line="12" pos:column="30"/></operator><name pos:line="12" pos:column="30">errno<pos:position pos:line="12" pos:column="35"/></name> <operator pos:line="12" pos:column="36">!=<pos:position pos:line="12" pos:column="38"/></operator> <literal type="number" pos:line="12" pos:column="39">0<pos:position pos:line="12" pos:column="40"/></literal><operator pos:line="12" pos:column="40">)<pos:position pos:line="12" pos:column="41"/></operator></expr>)<pos:position pos:line="12" pos:column="42"/></condition><then pos:line="12" pos:column="42">
    <block type="pseudo"><return pos:line="13" pos:column="5">return <expr><operator pos:line="13" pos:column="12">(<pos:position pos:line="13" pos:column="13"/></operator><operator pos:line="13" pos:column="13">-<pos:position pos:line="13" pos:column="14"/></operator><literal type="number" pos:line="13" pos:column="14">1<pos:position pos:line="13" pos:column="15"/></literal><operator pos:line="13" pos:column="15">)<pos:position pos:line="13" pos:column="16"/></operator></expr>;<pos:position pos:line="13" pos:column="17"/></return></block></then></if>

  <expr_stmt><expr><operator pos:line="15" pos:column="3">*<pos:position pos:line="15" pos:column="4"/></operator><name pos:line="15" pos:column="4">ret_value<pos:position pos:line="15" pos:column="13"/></name> <operator pos:line="15" pos:column="14">=<pos:position pos:line="15" pos:column="15"/></operator> <name pos:line="15" pos:column="16">tmp<pos:position pos:line="15" pos:column="19"/></name></expr>;<pos:position pos:line="15" pos:column="20"/></expr_stmt>
  <return pos:line="16" pos:column="3">return <expr><operator pos:line="16" pos:column="10">(<pos:position pos:line="16" pos:column="11"/></operator><literal type="number" pos:line="16" pos:column="11">0<pos:position pos:line="16" pos:column="12"/></literal><operator pos:line="16" pos:column="12">)<pos:position pos:line="16" pos:column="13"/></operator></expr>;<pos:position pos:line="16" pos:column="14"/></return>
}<pos:position pos:line="17" pos:column="2"/></block></function></unit>
