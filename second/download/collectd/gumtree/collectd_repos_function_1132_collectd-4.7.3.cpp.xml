<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1132_collectd-4.7.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">network_init<pos:position pos:line="1" pos:column="24"/></name> <parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><name pos:line="1" pos:column="26">void<pos:position pos:line="1" pos:column="30"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="31"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<comment type="block" pos:line="3" pos:column="9">/* Check if we were already initialized. If so, just return - there's
	 * nothing more to do (for now, that is). */</comment>
	<if pos:line="5" pos:column="9">if <condition pos:line="5" pos:column="12">(<expr><name pos:line="5" pos:column="13">cache_flush_last<pos:position pos:line="5" pos:column="29"/></name> <operator pos:line="5" pos:column="30">!=<pos:position pos:line="5" pos:column="32"/></operator> <literal type="number" pos:line="5" pos:column="33">0<pos:position pos:line="5" pos:column="34"/></literal></expr>)<pos:position pos:line="5" pos:column="35"/></condition><then pos:line="5" pos:column="35">
		<block type="pseudo"><return pos:line="6" pos:column="17">return <expr><operator pos:line="6" pos:column="24">(<pos:position pos:line="6" pos:column="25"/></operator><literal type="number" pos:line="6" pos:column="25">0<pos:position pos:line="6" pos:column="26"/></literal><operator pos:line="6" pos:column="26">)<pos:position pos:line="6" pos:column="27"/></operator></expr>;<pos:position pos:line="6" pos:column="28"/></return></block></then></if>

<cpp:if pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">if<pos:position pos:line="8" pos:column="4"/></cpp:directive> <expr><name pos:line="8" pos:column="5">HAVE_LIBGCRYPT<pos:position pos:line="8" pos:column="19"/></name></expr></cpp:if>
	<expr_stmt><expr><call><name pos:line="9" pos:column="9">gcry_control<pos:position pos:line="9" pos:column="21"/></name> <argument_list pos:line="9" pos:column="22">(<argument><expr><name pos:line="9" pos:column="23">GCRYCTL_SET_THREAD_CBS<pos:position pos:line="9" pos:column="45"/></name></expr></argument>, <argument><expr><operator pos:line="9" pos:column="47">&amp;<pos:position pos:line="9" pos:column="52"/></operator><name pos:line="9" pos:column="48">gcry_threads_pthread<pos:position pos:line="9" pos:column="68"/></name></expr></argument>)<pos:position pos:line="9" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="70"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="10" pos:column="9">gcry_control<pos:position pos:line="10" pos:column="21"/></name> <argument_list pos:line="10" pos:column="22">(<argument><expr><name pos:line="10" pos:column="23">GCRYCTL_INIT_SECMEM<pos:position pos:line="10" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="10" pos:column="44">32768<pos:position pos:line="10" pos:column="49"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="10" pos:column="51">0<pos:position pos:line="10" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="54"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="11" pos:column="9">gcry_control<pos:position pos:line="11" pos:column="21"/></name> <argument_list pos:line="11" pos:column="22">(<argument><expr><name pos:line="11" pos:column="23">GCRYCTL_INITIALIZATION_FINISHED<pos:position pos:line="11" pos:column="54"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="11" pos:column="56">0<pos:position pos:line="11" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="59"/></expr_stmt>
<cpp:endif pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">endif<pos:position pos:line="12" pos:column="7"/></cpp:directive></cpp:endif>

	<expr_stmt><expr><call><name pos:line="14" pos:column="9">plugin_register_shutdown<pos:position pos:line="14" pos:column="33"/></name> <argument_list pos:line="14" pos:column="34">(<argument><expr><literal type="string" pos:line="14" pos:column="35">"network"<pos:position pos:line="14" pos:column="44"/></literal></expr></argument>, <argument><expr><name pos:line="14" pos:column="46">network_shutdown<pos:position pos:line="14" pos:column="62"/></name></expr></argument>)<pos:position pos:line="14" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="64"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="16" pos:column="9">network_init_buffer<pos:position pos:line="16" pos:column="28"/></name> <argument_list pos:line="16" pos:column="29">()<pos:position pos:line="16" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="32"/></expr_stmt>

	<expr_stmt><expr><name pos:line="18" pos:column="9">cache_tree<pos:position pos:line="18" pos:column="19"/></name> <operator pos:line="18" pos:column="20">=<pos:position pos:line="18" pos:column="21"/></operator> <call><name pos:line="18" pos:column="22">c_avl_create<pos:position pos:line="18" pos:column="34"/></name> <argument_list pos:line="18" pos:column="35">(<argument><expr><operator pos:line="18" pos:column="36">(<pos:position pos:line="18" pos:column="37"/></operator><call><call><name pos:line="18" pos:column="37">int<pos:position pos:line="18" pos:column="40"/></name> <argument_list pos:line="18" pos:column="41">(<argument><expr><operator pos:line="18" pos:column="42">*<pos:position pos:line="18" pos:column="43"/></operator></expr></argument>)<pos:position pos:line="18" pos:column="44"/></argument_list></call> <argument_list pos:line="18" pos:column="45">(<argument><expr><specifier pos:line="18" pos:column="46">const<pos:position pos:line="18" pos:column="51"/></specifier> <name pos:line="18" pos:column="52">void<pos:position pos:line="18" pos:column="56"/></name> <operator pos:line="18" pos:column="57">*<pos:position pos:line="18" pos:column="58"/></operator></expr></argument>, <argument><expr><specifier pos:line="18" pos:column="60">const<pos:position pos:line="18" pos:column="65"/></specifier> <name pos:line="18" pos:column="66">void<pos:position pos:line="18" pos:column="70"/></name> <operator pos:line="18" pos:column="71">*<pos:position pos:line="18" pos:column="72"/></operator></expr></argument>)<pos:position pos:line="18" pos:column="73"/></argument_list></call><operator pos:line="18" pos:column="73">)<pos:position pos:line="18" pos:column="74"/></operator> <name pos:line="18" pos:column="75">strcmp<pos:position pos:line="18" pos:column="81"/></name></expr></argument>)<pos:position pos:line="18" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="83"/></expr_stmt>
	<expr_stmt><expr><name pos:line="19" pos:column="9">cache_flush_last<pos:position pos:line="19" pos:column="25"/></name> <operator pos:line="19" pos:column="26">=<pos:position pos:line="19" pos:column="27"/></operator> <call><name pos:line="19" pos:column="28">time<pos:position pos:line="19" pos:column="32"/></name> <argument_list pos:line="19" pos:column="33">(<argument><expr><name pos:line="19" pos:column="34">NULL<pos:position pos:line="19" pos:column="38"/></name></expr></argument>)<pos:position pos:line="19" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="40"/></expr_stmt>

	<comment type="block" pos:line="21" pos:column="9">/* setup socket(s) and so on */</comment>
	<if pos:line="22" pos:column="9">if <condition pos:line="22" pos:column="12">(<expr><name pos:line="22" pos:column="13">sending_sockets<pos:position pos:line="22" pos:column="28"/></name> <operator pos:line="22" pos:column="29">!=<pos:position pos:line="22" pos:column="31"/></operator> <name pos:line="22" pos:column="32">NULL<pos:position pos:line="22" pos:column="36"/></name></expr>)<pos:position pos:line="22" pos:column="37"/></condition><then pos:line="22" pos:column="37">
	<block pos:line="23" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="24" pos:column="17">plugin_register_write<pos:position pos:line="24" pos:column="38"/></name> <argument_list pos:line="24" pos:column="39">(<argument><expr><literal type="string" pos:line="24" pos:column="40">"network"<pos:position pos:line="24" pos:column="49"/></literal></expr></argument>, <argument><expr><name pos:line="24" pos:column="51">network_write<pos:position pos:line="24" pos:column="64"/></name></expr></argument>,
				<comment type="block" pos:line="25" pos:column="33">/* user_data = */</comment> <argument><expr><name pos:line="25" pos:column="51">NULL<pos:position pos:line="25" pos:column="55"/></name></expr></argument>)<pos:position pos:line="25" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="57"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="26" pos:column="17">plugin_register_notification<pos:position pos:line="26" pos:column="45"/></name> <argument_list pos:line="26" pos:column="46">(<argument><expr><literal type="string" pos:line="26" pos:column="47">"network"<pos:position pos:line="26" pos:column="56"/></literal></expr></argument>, <argument><expr><name pos:line="26" pos:column="58">network_notification<pos:position pos:line="26" pos:column="78"/></name></expr></argument>,
				<comment type="block" pos:line="27" pos:column="33">/* user_data = */</comment> <argument><expr><name pos:line="27" pos:column="51">NULL<pos:position pos:line="27" pos:column="55"/></name></expr></argument>)<pos:position pos:line="27" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="57"/></expr_stmt>
	}<pos:position pos:line="28" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="30" pos:column="9">/* If no threads need to be started, return here. */</comment>
	<if pos:line="31" pos:column="9">if <condition pos:line="31" pos:column="12">(<expr><operator pos:line="31" pos:column="13">(<pos:position pos:line="31" pos:column="14"/></operator><name pos:line="31" pos:column="14">listen_sockets_num<pos:position pos:line="31" pos:column="32"/></name> <operator pos:line="31" pos:column="33">==<pos:position pos:line="31" pos:column="35"/></operator> <literal type="number" pos:line="31" pos:column="36">0<pos:position pos:line="31" pos:column="37"/></literal><operator pos:line="31" pos:column="37">)<pos:position pos:line="31" pos:column="38"/></operator>
			<operator pos:line="32" pos:column="25">||<pos:position pos:line="32" pos:column="27"/></operator> <operator pos:line="32" pos:column="28">(<pos:position pos:line="32" pos:column="29"/></operator><operator pos:line="32" pos:column="29">(<pos:position pos:line="32" pos:column="30"/></operator><name pos:line="32" pos:column="30">dispatch_thread_running<pos:position pos:line="32" pos:column="53"/></name> <operator pos:line="32" pos:column="54">!=<pos:position pos:line="32" pos:column="56"/></operator> <literal type="number" pos:line="32" pos:column="57">0<pos:position pos:line="32" pos:column="58"/></literal><operator pos:line="32" pos:column="58">)<pos:position pos:line="32" pos:column="59"/></operator>
				<operator pos:line="33" pos:column="33">&amp;&amp;<pos:position pos:line="33" pos:column="43"/></operator> <operator pos:line="33" pos:column="36">(<pos:position pos:line="33" pos:column="37"/></operator><name pos:line="33" pos:column="37">receive_thread_running<pos:position pos:line="33" pos:column="59"/></name> <operator pos:line="33" pos:column="60">!=<pos:position pos:line="33" pos:column="62"/></operator> <literal type="number" pos:line="33" pos:column="63">0<pos:position pos:line="33" pos:column="64"/></literal><operator pos:line="33" pos:column="64">)<pos:position pos:line="33" pos:column="65"/></operator><operator pos:line="33" pos:column="65">)<pos:position pos:line="33" pos:column="66"/></operator></expr>)<pos:position pos:line="33" pos:column="67"/></condition><then pos:line="33" pos:column="67">
		<block type="pseudo"><return pos:line="34" pos:column="17">return <expr><operator pos:line="34" pos:column="24">(<pos:position pos:line="34" pos:column="25"/></operator><literal type="number" pos:line="34" pos:column="25">0<pos:position pos:line="34" pos:column="26"/></literal><operator pos:line="34" pos:column="26">)<pos:position pos:line="34" pos:column="27"/></operator></expr>;<pos:position pos:line="34" pos:column="28"/></return></block></then></if>

	<if pos:line="36" pos:column="9">if <condition pos:line="36" pos:column="12">(<expr><name pos:line="36" pos:column="13">dispatch_thread_running<pos:position pos:line="36" pos:column="36"/></name> <operator pos:line="36" pos:column="37">==<pos:position pos:line="36" pos:column="39"/></operator> <literal type="number" pos:line="36" pos:column="40">0<pos:position pos:line="36" pos:column="41"/></literal></expr>)<pos:position pos:line="36" pos:column="42"/></condition><then pos:line="36" pos:column="42">
	<block pos:line="37" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="38" pos:column="17">int<pos:position pos:line="38" pos:column="20"/></name></type> <name pos:line="38" pos:column="21">status<pos:position pos:line="38" pos:column="27"/></name></decl>;<pos:position pos:line="38" pos:column="28"/></decl_stmt>
		<expr_stmt><expr><name pos:line="39" pos:column="17">status<pos:position pos:line="39" pos:column="23"/></name> <operator pos:line="39" pos:column="24">=<pos:position pos:line="39" pos:column="25"/></operator> <call><name pos:line="39" pos:column="26">pthread_create<pos:position pos:line="39" pos:column="40"/></name> <argument_list pos:line="39" pos:column="41">(<argument><expr><operator pos:line="39" pos:column="42">&amp;<pos:position pos:line="39" pos:column="47"/></operator><name pos:line="39" pos:column="43">dispatch_thread_id<pos:position pos:line="39" pos:column="61"/></name></expr></argument>,
				<argument><expr><name pos:line="40" pos:column="33">NULL<pos:position pos:line="40" pos:column="37"/></name></expr></argument> <comment type="block" pos:line="40" pos:column="38">/* no attributes */</comment>,
				<argument><expr><name pos:line="41" pos:column="33">dispatch_thread<pos:position pos:line="41" pos:column="48"/></name></expr></argument>,
				<argument><expr><name pos:line="42" pos:column="33">NULL<pos:position pos:line="42" pos:column="37"/></name></expr></argument> <comment type="block" pos:line="42" pos:column="38">/* no argument */</comment>)<pos:position pos:line="42" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="57"/></expr_stmt>
		<if pos:line="43" pos:column="17">if <condition pos:line="43" pos:column="20">(<expr><name pos:line="43" pos:column="21">status<pos:position pos:line="43" pos:column="27"/></name> <operator pos:line="43" pos:column="28">!=<pos:position pos:line="43" pos:column="30"/></operator> <literal type="number" pos:line="43" pos:column="31">0<pos:position pos:line="43" pos:column="32"/></literal></expr>)<pos:position pos:line="43" pos:column="33"/></condition><then pos:line="43" pos:column="33">
		<block pos:line="44" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="45" pos:column="25">char<pos:position pos:line="45" pos:column="29"/></name></type> <name><name pos:line="45" pos:column="30">errbuf<pos:position pos:line="45" pos:column="36"/></name><index pos:line="45" pos:column="36">[<expr><literal type="number" pos:line="45" pos:column="37">1024<pos:position pos:line="45" pos:column="41"/></literal></expr>]<pos:position pos:line="45" pos:column="42"/></index></name></decl>;<pos:position pos:line="45" pos:column="43"/></decl_stmt>
			<expr_stmt><expr><call><name pos:line="46" pos:column="25">ERROR<pos:position pos:line="46" pos:column="30"/></name> <argument_list pos:line="46" pos:column="31">(<argument><expr><literal type="string" pos:line="46" pos:column="32">"network: pthread_create failed: %s"<pos:position pos:line="46" pos:column="68"/></literal></expr></argument>,
					<argument><expr><call><name pos:line="47" pos:column="41">sstrerror<pos:position pos:line="47" pos:column="50"/></name> <argument_list pos:line="47" pos:column="51">(<argument><expr><name pos:line="47" pos:column="52">errno<pos:position pos:line="47" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="59">errbuf<pos:position pos:line="47" pos:column="65"/></name></expr></argument>,
						<argument><expr><sizeof pos:line="48" pos:column="49">sizeof <argument_list pos:line="48" pos:column="56">(<argument><expr><name pos:line="48" pos:column="57">errbuf<pos:position pos:line="48" pos:column="63"/></name></expr></argument>)<pos:position pos:line="48" pos:column="64"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="48" pos:column="65"/></argument_list></call></expr></argument>)<pos:position pos:line="48" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="67"/></expr_stmt>
		}<pos:position pos:line="49" pos:column="18"/></block></then>
		<else pos:line="50" pos:column="17">else
		<block pos:line="51" pos:column="17">{
			<expr_stmt><expr><name pos:line="52" pos:column="25">dispatch_thread_running<pos:position pos:line="52" pos:column="48"/></name> <operator pos:line="52" pos:column="49">=<pos:position pos:line="52" pos:column="50"/></operator> <literal type="number" pos:line="52" pos:column="51">1<pos:position pos:line="52" pos:column="52"/></literal></expr>;<pos:position pos:line="52" pos:column="53"/></expr_stmt>
		}<pos:position pos:line="53" pos:column="18"/></block></else></if>
	}<pos:position pos:line="54" pos:column="10"/></block></then></if>

	<if pos:line="56" pos:column="9">if <condition pos:line="56" pos:column="12">(<expr><name pos:line="56" pos:column="13">receive_thread_running<pos:position pos:line="56" pos:column="35"/></name> <operator pos:line="56" pos:column="36">==<pos:position pos:line="56" pos:column="38"/></operator> <literal type="number" pos:line="56" pos:column="39">0<pos:position pos:line="56" pos:column="40"/></literal></expr>)<pos:position pos:line="56" pos:column="41"/></condition><then pos:line="56" pos:column="41">
	<block pos:line="57" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="58" pos:column="17">int<pos:position pos:line="58" pos:column="20"/></name></type> <name pos:line="58" pos:column="21">status<pos:position pos:line="58" pos:column="27"/></name></decl>;<pos:position pos:line="58" pos:column="28"/></decl_stmt>
		<expr_stmt><expr><name pos:line="59" pos:column="17">status<pos:position pos:line="59" pos:column="23"/></name> <operator pos:line="59" pos:column="24">=<pos:position pos:line="59" pos:column="25"/></operator> <call><name pos:line="59" pos:column="26">pthread_create<pos:position pos:line="59" pos:column="40"/></name> <argument_list pos:line="59" pos:column="41">(<argument><expr><operator pos:line="59" pos:column="42">&amp;<pos:position pos:line="59" pos:column="47"/></operator><name pos:line="59" pos:column="43">receive_thread_id<pos:position pos:line="59" pos:column="60"/></name></expr></argument>,
				<argument><expr><name pos:line="60" pos:column="33">NULL<pos:position pos:line="60" pos:column="37"/></name></expr></argument> <comment type="block" pos:line="60" pos:column="38">/* no attributes */</comment>,
				<argument><expr><name pos:line="61" pos:column="33">receive_thread<pos:position pos:line="61" pos:column="47"/></name></expr></argument>,
				<argument><expr><name pos:line="62" pos:column="33">NULL<pos:position pos:line="62" pos:column="37"/></name></expr></argument> <comment type="block" pos:line="62" pos:column="38">/* no argument */</comment>)<pos:position pos:line="62" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="57"/></expr_stmt>
		<if pos:line="63" pos:column="17">if <condition pos:line="63" pos:column="20">(<expr><name pos:line="63" pos:column="21">status<pos:position pos:line="63" pos:column="27"/></name> <operator pos:line="63" pos:column="28">!=<pos:position pos:line="63" pos:column="30"/></operator> <literal type="number" pos:line="63" pos:column="31">0<pos:position pos:line="63" pos:column="32"/></literal></expr>)<pos:position pos:line="63" pos:column="33"/></condition><then pos:line="63" pos:column="33">
		<block pos:line="64" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="65" pos:column="25">char<pos:position pos:line="65" pos:column="29"/></name></type> <name><name pos:line="65" pos:column="30">errbuf<pos:position pos:line="65" pos:column="36"/></name><index pos:line="65" pos:column="36">[<expr><literal type="number" pos:line="65" pos:column="37">1024<pos:position pos:line="65" pos:column="41"/></literal></expr>]<pos:position pos:line="65" pos:column="42"/></index></name></decl>;<pos:position pos:line="65" pos:column="43"/></decl_stmt>
			<expr_stmt><expr><call><name pos:line="66" pos:column="25">ERROR<pos:position pos:line="66" pos:column="30"/></name> <argument_list pos:line="66" pos:column="31">(<argument><expr><literal type="string" pos:line="66" pos:column="32">"network: pthread_create failed: %s"<pos:position pos:line="66" pos:column="68"/></literal></expr></argument>,
					<argument><expr><call><name pos:line="67" pos:column="41">sstrerror<pos:position pos:line="67" pos:column="50"/></name> <argument_list pos:line="67" pos:column="51">(<argument><expr><name pos:line="67" pos:column="52">errno<pos:position pos:line="67" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="67" pos:column="59">errbuf<pos:position pos:line="67" pos:column="65"/></name></expr></argument>,
						<argument><expr><sizeof pos:line="68" pos:column="49">sizeof <argument_list pos:line="68" pos:column="56">(<argument><expr><name pos:line="68" pos:column="57">errbuf<pos:position pos:line="68" pos:column="63"/></name></expr></argument>)<pos:position pos:line="68" pos:column="64"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="68" pos:column="65"/></argument_list></call></expr></argument>)<pos:position pos:line="68" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="67"/></expr_stmt>
		}<pos:position pos:line="69" pos:column="18"/></block></then>
		<else pos:line="70" pos:column="17">else
		<block pos:line="71" pos:column="17">{
			<expr_stmt><expr><name pos:line="72" pos:column="25">receive_thread_running<pos:position pos:line="72" pos:column="47"/></name> <operator pos:line="72" pos:column="48">=<pos:position pos:line="72" pos:column="49"/></operator> <literal type="number" pos:line="72" pos:column="50">1<pos:position pos:line="72" pos:column="51"/></literal></expr>;<pos:position pos:line="72" pos:column="52"/></expr_stmt>
		}<pos:position pos:line="73" pos:column="18"/></block></else></if>
	}<pos:position pos:line="74" pos:column="10"/></block></then></if>

	<return pos:line="76" pos:column="9">return <expr><operator pos:line="76" pos:column="16">(<pos:position pos:line="76" pos:column="17"/></operator><literal type="number" pos:line="76" pos:column="17">0<pos:position pos:line="76" pos:column="18"/></literal><operator pos:line="76" pos:column="18">)<pos:position pos:line="76" pos:column="19"/></operator></expr>;<pos:position pos:line="76" pos:column="20"/></return>
}<pos:position pos:line="77" pos:column="2"/></block></function></unit>
