<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1397_collectd-5.6.2.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">handle_getval<pos:position pos:line="1" pos:column="18"/></name><parameter_list pos:line="1" pos:column="18">(<parameter><decl><type><name pos:line="1" pos:column="19">FILE<pos:position pos:line="1" pos:column="23"/></name> <modifier pos:line="1" pos:column="24">*<pos:position pos:line="1" pos:column="25"/></modifier></type><name pos:line="1" pos:column="25">fh<pos:position pos:line="1" pos:column="27"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="29">char<pos:position pos:line="1" pos:column="33"/></name> <modifier pos:line="1" pos:column="34">*<pos:position pos:line="1" pos:column="35"/></modifier></type><name pos:line="1" pos:column="35">buffer<pos:position pos:line="1" pos:column="41"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="42"/></parameter_list> <block pos:line="1" pos:column="43">{
  <decl_stmt><decl><type><name pos:line="2" pos:column="3">char<pos:position pos:line="2" pos:column="7"/></name> <modifier pos:line="2" pos:column="8">*<pos:position pos:line="2" pos:column="9"/></modifier></type><name pos:line="2" pos:column="9">command<pos:position pos:line="2" pos:column="16"/></name></decl>;<pos:position pos:line="2" pos:column="17"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">char<pos:position pos:line="3" pos:column="7"/></name> <modifier pos:line="3" pos:column="8">*<pos:position pos:line="3" pos:column="9"/></modifier></type><name pos:line="3" pos:column="9">identifier<pos:position pos:line="3" pos:column="19"/></name></decl>;<pos:position pos:line="3" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">char<pos:position pos:line="4" pos:column="7"/></name> <modifier pos:line="4" pos:column="8">*<pos:position pos:line="4" pos:column="9"/></modifier></type><name pos:line="4" pos:column="9">identifier_copy<pos:position pos:line="4" pos:column="24"/></name></decl>;<pos:position pos:line="4" pos:column="25"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="6" pos:column="3">char<pos:position pos:line="6" pos:column="7"/></name> <modifier pos:line="6" pos:column="8">*<pos:position pos:line="6" pos:column="9"/></modifier></type><name pos:line="6" pos:column="9">hostname<pos:position pos:line="6" pos:column="17"/></name></decl>;<pos:position pos:line="6" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">char<pos:position pos:line="7" pos:column="7"/></name> <modifier pos:line="7" pos:column="8">*<pos:position pos:line="7" pos:column="9"/></modifier></type><name pos:line="7" pos:column="9">plugin<pos:position pos:line="7" pos:column="15"/></name></decl>;<pos:position pos:line="7" pos:column="16"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">char<pos:position pos:line="8" pos:column="7"/></name> <modifier pos:line="8" pos:column="8">*<pos:position pos:line="8" pos:column="9"/></modifier></type><name pos:line="8" pos:column="9">plugin_instance<pos:position pos:line="8" pos:column="24"/></name></decl>;<pos:position pos:line="8" pos:column="25"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">char<pos:position pos:line="9" pos:column="7"/></name> <modifier pos:line="9" pos:column="8">*<pos:position pos:line="9" pos:column="9"/></modifier></type><name pos:line="9" pos:column="9">type<pos:position pos:line="9" pos:column="13"/></name></decl>;<pos:position pos:line="9" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">char<pos:position pos:line="10" pos:column="7"/></name> <modifier pos:line="10" pos:column="8">*<pos:position pos:line="10" pos:column="9"/></modifier></type><name pos:line="10" pos:column="9">type_instance<pos:position pos:line="10" pos:column="22"/></name></decl>;<pos:position pos:line="10" pos:column="23"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="11" pos:column="3">gauge_t<pos:position pos:line="11" pos:column="10"/></name> <modifier pos:line="11" pos:column="11">*<pos:position pos:line="11" pos:column="12"/></modifier></type><name pos:line="11" pos:column="12">values<pos:position pos:line="11" pos:column="18"/></name></decl>;<pos:position pos:line="11" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="12" pos:column="3">size_t<pos:position pos:line="12" pos:column="9"/></name></type> <name pos:line="12" pos:column="10">values_num<pos:position pos:line="12" pos:column="20"/></name></decl>;<pos:position pos:line="12" pos:column="21"/></decl_stmt>

  <decl_stmt><decl><type><specifier pos:line="14" pos:column="3">const<pos:position pos:line="14" pos:column="8"/></specifier> <name pos:line="14" pos:column="9">data_set_t<pos:position pos:line="14" pos:column="19"/></name> <modifier pos:line="14" pos:column="20">*<pos:position pos:line="14" pos:column="21"/></modifier></type><name pos:line="14" pos:column="21">ds<pos:position pos:line="14" pos:column="23"/></name></decl>;<pos:position pos:line="14" pos:column="24"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="16" pos:column="3">int<pos:position pos:line="16" pos:column="6"/></name></type> <name pos:line="16" pos:column="7">status<pos:position pos:line="16" pos:column="13"/></name></decl>;<pos:position pos:line="16" pos:column="14"/></decl_stmt>

  <if pos:line="18" pos:column="3">if <condition pos:line="18" pos:column="6">(<expr><operator pos:line="18" pos:column="7">(<pos:position pos:line="18" pos:column="8"/></operator><name pos:line="18" pos:column="8">fh<pos:position pos:line="18" pos:column="10"/></name> <operator pos:line="18" pos:column="11">==<pos:position pos:line="18" pos:column="13"/></operator> <name pos:line="18" pos:column="14">NULL<pos:position pos:line="18" pos:column="18"/></name><operator pos:line="18" pos:column="18">)<pos:position pos:line="18" pos:column="19"/></operator> <operator pos:line="18" pos:column="20">||<pos:position pos:line="18" pos:column="22"/></operator> <operator pos:line="18" pos:column="23">(<pos:position pos:line="18" pos:column="24"/></operator><name pos:line="18" pos:column="24">buffer<pos:position pos:line="18" pos:column="30"/></name> <operator pos:line="18" pos:column="31">==<pos:position pos:line="18" pos:column="33"/></operator> <name pos:line="18" pos:column="34">NULL<pos:position pos:line="18" pos:column="38"/></name><operator pos:line="18" pos:column="38">)<pos:position pos:line="18" pos:column="39"/></operator></expr>)<pos:position pos:line="18" pos:column="40"/></condition><then pos:line="18" pos:column="40">
    <block type="pseudo"><return pos:line="19" pos:column="5">return <expr><operator pos:line="19" pos:column="12">(<pos:position pos:line="19" pos:column="13"/></operator><operator pos:line="19" pos:column="13">-<pos:position pos:line="19" pos:column="14"/></operator><literal type="number" pos:line="19" pos:column="14">1<pos:position pos:line="19" pos:column="15"/></literal><operator pos:line="19" pos:column="15">)<pos:position pos:line="19" pos:column="16"/></operator></expr>;<pos:position pos:line="19" pos:column="17"/></return></block></then></if>

  <expr_stmt><expr><call><name pos:line="21" pos:column="3">DEBUG<pos:position pos:line="21" pos:column="8"/></name><argument_list pos:line="21" pos:column="8">(<argument><expr><literal type="string" pos:line="21" pos:column="9">"utils_cmd_getval: handle_getval (fh = %p, buffer = %s);"<pos:position pos:line="21" pos:column="66"/></literal></expr></argument>, <argument><expr><operator pos:line="21" pos:column="68">(<pos:position pos:line="21" pos:column="69"/></operator><name pos:line="21" pos:column="69">void<pos:position pos:line="21" pos:column="73"/></name> <operator pos:line="21" pos:column="74">*<pos:position pos:line="21" pos:column="75"/></operator><operator pos:line="21" pos:column="75">)<pos:position pos:line="21" pos:column="76"/></operator><name pos:line="21" pos:column="76">fh<pos:position pos:line="21" pos:column="78"/></name></expr></argument>,
        <argument><expr><name pos:line="22" pos:column="9">buffer<pos:position pos:line="22" pos:column="15"/></name></expr></argument>)<pos:position pos:line="22" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="17"/></expr_stmt>

  <expr_stmt><expr><name pos:line="24" pos:column="3">command<pos:position pos:line="24" pos:column="10"/></name> <operator pos:line="24" pos:column="11">=<pos:position pos:line="24" pos:column="12"/></operator> <name pos:line="24" pos:column="13">NULL<pos:position pos:line="24" pos:column="17"/></name></expr>;<pos:position pos:line="24" pos:column="18"/></expr_stmt>
  <expr_stmt><expr><name pos:line="25" pos:column="3">status<pos:position pos:line="25" pos:column="9"/></name> <operator pos:line="25" pos:column="10">=<pos:position pos:line="25" pos:column="11"/></operator> <call><name pos:line="25" pos:column="12">parse_string<pos:position pos:line="25" pos:column="24"/></name><argument_list pos:line="25" pos:column="24">(<argument><expr><operator pos:line="25" pos:column="25">&amp;<pos:position pos:line="25" pos:column="30"/></operator><name pos:line="25" pos:column="26">buffer<pos:position pos:line="25" pos:column="32"/></name></expr></argument>, <argument><expr><operator pos:line="25" pos:column="34">&amp;<pos:position pos:line="25" pos:column="39"/></operator><name pos:line="25" pos:column="35">command<pos:position pos:line="25" pos:column="42"/></name></expr></argument>)<pos:position pos:line="25" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="44"/></expr_stmt>
  <if pos:line="26" pos:column="3">if <condition pos:line="26" pos:column="6">(<expr><name pos:line="26" pos:column="7">status<pos:position pos:line="26" pos:column="13"/></name> <operator pos:line="26" pos:column="14">!=<pos:position pos:line="26" pos:column="16"/></operator> <literal type="number" pos:line="26" pos:column="17">0<pos:position pos:line="26" pos:column="18"/></literal></expr>)<pos:position pos:line="26" pos:column="19"/></condition><then pos:line="26" pos:column="19"> <block pos:line="26" pos:column="20">{
    <expr_stmt><expr><call><name pos:line="27" pos:column="5">print_to_socket<pos:position pos:line="27" pos:column="20"/></name><argument_list pos:line="27" pos:column="20">(<argument><expr><name pos:line="27" pos:column="21">fh<pos:position pos:line="27" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="27" pos:column="25">"-1 Cannot parse command.\n"<pos:position pos:line="27" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="55"/></expr_stmt>
    <return pos:line="28" pos:column="5">return <expr><operator pos:line="28" pos:column="12">(<pos:position pos:line="28" pos:column="13"/></operator><operator pos:line="28" pos:column="13">-<pos:position pos:line="28" pos:column="14"/></operator><literal type="number" pos:line="28" pos:column="14">1<pos:position pos:line="28" pos:column="15"/></literal><operator pos:line="28" pos:column="15">)<pos:position pos:line="28" pos:column="16"/></operator></expr>;<pos:position pos:line="28" pos:column="17"/></return>
  }<pos:position pos:line="29" pos:column="4"/></block></then></if>
  <expr_stmt><expr><call><name pos:line="30" pos:column="3">assert<pos:position pos:line="30" pos:column="9"/></name><argument_list pos:line="30" pos:column="9">(<argument><expr><name pos:line="30" pos:column="10">command<pos:position pos:line="30" pos:column="17"/></name> <operator pos:line="30" pos:column="18">!=<pos:position pos:line="30" pos:column="20"/></operator> <name pos:line="30" pos:column="21">NULL<pos:position pos:line="30" pos:column="25"/></name></expr></argument>)<pos:position pos:line="30" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="27"/></expr_stmt>

  <if pos:line="32" pos:column="3">if <condition pos:line="32" pos:column="6">(<expr><call><name pos:line="32" pos:column="7">strcasecmp<pos:position pos:line="32" pos:column="17"/></name><argument_list pos:line="32" pos:column="17">(<argument><expr><literal type="string" pos:line="32" pos:column="18">"GETVAL"<pos:position pos:line="32" pos:column="26"/></literal></expr></argument>, <argument><expr><name pos:line="32" pos:column="28">command<pos:position pos:line="32" pos:column="35"/></name></expr></argument>)<pos:position pos:line="32" pos:column="36"/></argument_list></call> <operator pos:line="32" pos:column="37">!=<pos:position pos:line="32" pos:column="39"/></operator> <literal type="number" pos:line="32" pos:column="40">0<pos:position pos:line="32" pos:column="41"/></literal></expr>)<pos:position pos:line="32" pos:column="42"/></condition><then pos:line="32" pos:column="42"> <block pos:line="32" pos:column="43">{
    <expr_stmt><expr><call><name pos:line="33" pos:column="5">print_to_socket<pos:position pos:line="33" pos:column="20"/></name><argument_list pos:line="33" pos:column="20">(<argument><expr><name pos:line="33" pos:column="21">fh<pos:position pos:line="33" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="33" pos:column="25">"-1 Unexpected command: `%s'.\n"<pos:position pos:line="33" pos:column="57"/></literal></expr></argument>, <argument><expr><name pos:line="33" pos:column="59">command<pos:position pos:line="33" pos:column="66"/></name></expr></argument>)<pos:position pos:line="33" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="68"/></expr_stmt>
    <return pos:line="34" pos:column="5">return <expr><operator pos:line="34" pos:column="12">(<pos:position pos:line="34" pos:column="13"/></operator><operator pos:line="34" pos:column="13">-<pos:position pos:line="34" pos:column="14"/></operator><literal type="number" pos:line="34" pos:column="14">1<pos:position pos:line="34" pos:column="15"/></literal><operator pos:line="34" pos:column="15">)<pos:position pos:line="34" pos:column="16"/></operator></expr>;<pos:position pos:line="34" pos:column="17"/></return>
  }<pos:position pos:line="35" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="37" pos:column="3">identifier<pos:position pos:line="37" pos:column="13"/></name> <operator pos:line="37" pos:column="14">=<pos:position pos:line="37" pos:column="15"/></operator> <name pos:line="37" pos:column="16">NULL<pos:position pos:line="37" pos:column="20"/></name></expr>;<pos:position pos:line="37" pos:column="21"/></expr_stmt>
  <expr_stmt><expr><name pos:line="38" pos:column="3">status<pos:position pos:line="38" pos:column="9"/></name> <operator pos:line="38" pos:column="10">=<pos:position pos:line="38" pos:column="11"/></operator> <call><name pos:line="38" pos:column="12">parse_string<pos:position pos:line="38" pos:column="24"/></name><argument_list pos:line="38" pos:column="24">(<argument><expr><operator pos:line="38" pos:column="25">&amp;<pos:position pos:line="38" pos:column="30"/></operator><name pos:line="38" pos:column="26">buffer<pos:position pos:line="38" pos:column="32"/></name></expr></argument>, <argument><expr><operator pos:line="38" pos:column="34">&amp;<pos:position pos:line="38" pos:column="39"/></operator><name pos:line="38" pos:column="35">identifier<pos:position pos:line="38" pos:column="45"/></name></expr></argument>)<pos:position pos:line="38" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="47"/></expr_stmt>
  <if pos:line="39" pos:column="3">if <condition pos:line="39" pos:column="6">(<expr><name pos:line="39" pos:column="7">status<pos:position pos:line="39" pos:column="13"/></name> <operator pos:line="39" pos:column="14">!=<pos:position pos:line="39" pos:column="16"/></operator> <literal type="number" pos:line="39" pos:column="17">0<pos:position pos:line="39" pos:column="18"/></literal></expr>)<pos:position pos:line="39" pos:column="19"/></condition><then pos:line="39" pos:column="19"> <block pos:line="39" pos:column="20">{
    <expr_stmt><expr><call><name pos:line="40" pos:column="5">print_to_socket<pos:position pos:line="40" pos:column="20"/></name><argument_list pos:line="40" pos:column="20">(<argument><expr><name pos:line="40" pos:column="21">fh<pos:position pos:line="40" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="40" pos:column="25">"-1 Cannot parse identifier.\n"<pos:position pos:line="40" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="40" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="58"/></expr_stmt>
    <return pos:line="41" pos:column="5">return <expr><operator pos:line="41" pos:column="12">(<pos:position pos:line="41" pos:column="13"/></operator><operator pos:line="41" pos:column="13">-<pos:position pos:line="41" pos:column="14"/></operator><literal type="number" pos:line="41" pos:column="14">1<pos:position pos:line="41" pos:column="15"/></literal><operator pos:line="41" pos:column="15">)<pos:position pos:line="41" pos:column="16"/></operator></expr>;<pos:position pos:line="41" pos:column="17"/></return>
  }<pos:position pos:line="42" pos:column="4"/></block></then></if>
  <expr_stmt><expr><call><name pos:line="43" pos:column="3">assert<pos:position pos:line="43" pos:column="9"/></name><argument_list pos:line="43" pos:column="9">(<argument><expr><name pos:line="43" pos:column="10">identifier<pos:position pos:line="43" pos:column="20"/></name> <operator pos:line="43" pos:column="21">!=<pos:position pos:line="43" pos:column="23"/></operator> <name pos:line="43" pos:column="24">NULL<pos:position pos:line="43" pos:column="28"/></name></expr></argument>)<pos:position pos:line="43" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="30"/></expr_stmt>

  <if pos:line="45" pos:column="3">if <condition pos:line="45" pos:column="6">(<expr><operator pos:line="45" pos:column="7">*<pos:position pos:line="45" pos:column="8"/></operator><name pos:line="45" pos:column="8">buffer<pos:position pos:line="45" pos:column="14"/></name> <operator pos:line="45" pos:column="15">!=<pos:position pos:line="45" pos:column="17"/></operator> <literal type="number" pos:line="45" pos:column="18">0<pos:position pos:line="45" pos:column="19"/></literal></expr>)<pos:position pos:line="45" pos:column="20"/></condition><then pos:line="45" pos:column="20"> <block pos:line="45" pos:column="21">{
    <expr_stmt><expr><call><name pos:line="46" pos:column="5">print_to_socket<pos:position pos:line="46" pos:column="20"/></name><argument_list pos:line="46" pos:column="20">(<argument><expr><name pos:line="46" pos:column="21">fh<pos:position pos:line="46" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="46" pos:column="25">"-1 Garbage after end of command: %s\n"<pos:position pos:line="46" pos:column="64"/></literal></expr></argument>, <argument><expr><name pos:line="46" pos:column="66">buffer<pos:position pos:line="46" pos:column="72"/></name></expr></argument>)<pos:position pos:line="46" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="74"/></expr_stmt>
    <return pos:line="47" pos:column="5">return <expr><operator pos:line="47" pos:column="12">(<pos:position pos:line="47" pos:column="13"/></operator><operator pos:line="47" pos:column="13">-<pos:position pos:line="47" pos:column="14"/></operator><literal type="number" pos:line="47" pos:column="14">1<pos:position pos:line="47" pos:column="15"/></literal><operator pos:line="47" pos:column="15">)<pos:position pos:line="47" pos:column="16"/></operator></expr>;<pos:position pos:line="47" pos:column="17"/></return>
  }<pos:position pos:line="48" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="50" pos:column="3">/* parse_identifier() modifies its first argument,
   * returning pointers into it */</comment>
  <expr_stmt><expr><name pos:line="52" pos:column="3">identifier_copy<pos:position pos:line="52" pos:column="18"/></name> <operator pos:line="52" pos:column="19">=<pos:position pos:line="52" pos:column="20"/></operator> <call><name pos:line="52" pos:column="21">sstrdup<pos:position pos:line="52" pos:column="28"/></name><argument_list pos:line="52" pos:column="28">(<argument><expr><name pos:line="52" pos:column="29">identifier<pos:position pos:line="52" pos:column="39"/></name></expr></argument>)<pos:position pos:line="52" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="41"/></expr_stmt>

  <expr_stmt><expr><name pos:line="54" pos:column="3">status<pos:position pos:line="54" pos:column="9"/></name> <operator pos:line="54" pos:column="10">=<pos:position pos:line="54" pos:column="11"/></operator> <call><name pos:line="54" pos:column="12">parse_identifier<pos:position pos:line="54" pos:column="28"/></name><argument_list pos:line="54" pos:column="28">(<argument><expr><name pos:line="54" pos:column="29">identifier_copy<pos:position pos:line="54" pos:column="44"/></name></expr></argument>, <argument><expr><operator pos:line="54" pos:column="46">&amp;<pos:position pos:line="54" pos:column="51"/></operator><name pos:line="54" pos:column="47">hostname<pos:position pos:line="54" pos:column="55"/></name></expr></argument>, <argument><expr><operator pos:line="54" pos:column="57">&amp;<pos:position pos:line="54" pos:column="62"/></operator><name pos:line="54" pos:column="58">plugin<pos:position pos:line="54" pos:column="64"/></name></expr></argument>,
                            <argument><expr><operator pos:line="55" pos:column="29">&amp;<pos:position pos:line="55" pos:column="34"/></operator><name pos:line="55" pos:column="30">plugin_instance<pos:position pos:line="55" pos:column="45"/></name></expr></argument>, <argument><expr><operator pos:line="55" pos:column="47">&amp;<pos:position pos:line="55" pos:column="52"/></operator><name pos:line="55" pos:column="48">type<pos:position pos:line="55" pos:column="52"/></name></expr></argument>, <argument><expr><operator pos:line="55" pos:column="54">&amp;<pos:position pos:line="55" pos:column="59"/></operator><name pos:line="55" pos:column="55">type_instance<pos:position pos:line="55" pos:column="68"/></name></expr></argument>)<pos:position pos:line="55" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="70"/></expr_stmt>
  <if pos:line="56" pos:column="3">if <condition pos:line="56" pos:column="6">(<expr><name pos:line="56" pos:column="7">status<pos:position pos:line="56" pos:column="13"/></name> <operator pos:line="56" pos:column="14">!=<pos:position pos:line="56" pos:column="16"/></operator> <literal type="number" pos:line="56" pos:column="17">0<pos:position pos:line="56" pos:column="18"/></literal></expr>)<pos:position pos:line="56" pos:column="19"/></condition><then pos:line="56" pos:column="19"> <block pos:line="56" pos:column="20">{
    <expr_stmt><expr><call><name pos:line="57" pos:column="5">DEBUG<pos:position pos:line="57" pos:column="10"/></name><argument_list pos:line="57" pos:column="10">(<argument><expr><literal type="string" pos:line="57" pos:column="11">"handle_getval: Cannot parse identifier `%s'."<pos:position pos:line="57" pos:column="57"/></literal></expr></argument>, <argument><expr><name pos:line="57" pos:column="59">identifier<pos:position pos:line="57" pos:column="69"/></name></expr></argument>)<pos:position pos:line="57" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="71"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="58" pos:column="5">print_to_socket<pos:position pos:line="58" pos:column="20"/></name><argument_list pos:line="58" pos:column="20">(<argument><expr><name pos:line="58" pos:column="21">fh<pos:position pos:line="58" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="58" pos:column="25">"-1 Cannot parse identifier `%s'.\n"<pos:position pos:line="58" pos:column="61"/></literal></expr></argument>, <argument><expr><name pos:line="58" pos:column="63">identifier<pos:position pos:line="58" pos:column="73"/></name></expr></argument>)<pos:position pos:line="58" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="75"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="59" pos:column="5">sfree<pos:position pos:line="59" pos:column="10"/></name><argument_list pos:line="59" pos:column="10">(<argument><expr><name pos:line="59" pos:column="11">identifier_copy<pos:position pos:line="59" pos:column="26"/></name></expr></argument>)<pos:position pos:line="59" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="28"/></expr_stmt>
    <return pos:line="60" pos:column="5">return <expr><operator pos:line="60" pos:column="12">(<pos:position pos:line="60" pos:column="13"/></operator><operator pos:line="60" pos:column="13">-<pos:position pos:line="60" pos:column="14"/></operator><literal type="number" pos:line="60" pos:column="14">1<pos:position pos:line="60" pos:column="15"/></literal><operator pos:line="60" pos:column="15">)<pos:position pos:line="60" pos:column="16"/></operator></expr>;<pos:position pos:line="60" pos:column="17"/></return>
  }<pos:position pos:line="61" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="63" pos:column="3">ds<pos:position pos:line="63" pos:column="5"/></name> <operator pos:line="63" pos:column="6">=<pos:position pos:line="63" pos:column="7"/></operator> <call><name pos:line="63" pos:column="8">plugin_get_ds<pos:position pos:line="63" pos:column="21"/></name><argument_list pos:line="63" pos:column="21">(<argument><expr><name pos:line="63" pos:column="22">type<pos:position pos:line="63" pos:column="26"/></name></expr></argument>)<pos:position pos:line="63" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="28"/></expr_stmt>
  <if pos:line="64" pos:column="3">if <condition pos:line="64" pos:column="6">(<expr><name pos:line="64" pos:column="7">ds<pos:position pos:line="64" pos:column="9"/></name> <operator pos:line="64" pos:column="10">==<pos:position pos:line="64" pos:column="12"/></operator> <name pos:line="64" pos:column="13">NULL<pos:position pos:line="64" pos:column="17"/></name></expr>)<pos:position pos:line="64" pos:column="18"/></condition><then pos:line="64" pos:column="18"> <block pos:line="64" pos:column="19">{
    <expr_stmt><expr><call><name pos:line="65" pos:column="5">DEBUG<pos:position pos:line="65" pos:column="10"/></name><argument_list pos:line="65" pos:column="10">(<argument><expr><literal type="string" pos:line="65" pos:column="11">"handle_getval: plugin_get_ds (%s) == NULL;"<pos:position pos:line="65" pos:column="55"/></literal></expr></argument>, <argument><expr><name pos:line="65" pos:column="57">type<pos:position pos:line="65" pos:column="61"/></name></expr></argument>)<pos:position pos:line="65" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="63"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="66" pos:column="5">print_to_socket<pos:position pos:line="66" pos:column="20"/></name><argument_list pos:line="66" pos:column="20">(<argument><expr><name pos:line="66" pos:column="21">fh<pos:position pos:line="66" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="66" pos:column="25">"-1 Type `%s' is unknown.\n"<pos:position pos:line="66" pos:column="53"/></literal></expr></argument>, <argument><expr><name pos:line="66" pos:column="55">type<pos:position pos:line="66" pos:column="59"/></name></expr></argument>)<pos:position pos:line="66" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="61"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="67" pos:column="5">sfree<pos:position pos:line="67" pos:column="10"/></name><argument_list pos:line="67" pos:column="10">(<argument><expr><name pos:line="67" pos:column="11">identifier_copy<pos:position pos:line="67" pos:column="26"/></name></expr></argument>)<pos:position pos:line="67" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="28"/></expr_stmt>
    <return pos:line="68" pos:column="5">return <expr><operator pos:line="68" pos:column="12">(<pos:position pos:line="68" pos:column="13"/></operator><operator pos:line="68" pos:column="13">-<pos:position pos:line="68" pos:column="14"/></operator><literal type="number" pos:line="68" pos:column="14">1<pos:position pos:line="68" pos:column="15"/></literal><operator pos:line="68" pos:column="15">)<pos:position pos:line="68" pos:column="16"/></operator></expr>;<pos:position pos:line="68" pos:column="17"/></return>
  }<pos:position pos:line="69" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="71" pos:column="3">values<pos:position pos:line="71" pos:column="9"/></name> <operator pos:line="71" pos:column="10">=<pos:position pos:line="71" pos:column="11"/></operator> <name pos:line="71" pos:column="12">NULL<pos:position pos:line="71" pos:column="16"/></name></expr>;<pos:position pos:line="71" pos:column="17"/></expr_stmt>
  <expr_stmt><expr><name pos:line="72" pos:column="3">values_num<pos:position pos:line="72" pos:column="13"/></name> <operator pos:line="72" pos:column="14">=<pos:position pos:line="72" pos:column="15"/></operator> <literal type="number" pos:line="72" pos:column="16">0<pos:position pos:line="72" pos:column="17"/></literal></expr>;<pos:position pos:line="72" pos:column="18"/></expr_stmt>
  <expr_stmt><expr><name pos:line="73" pos:column="3">status<pos:position pos:line="73" pos:column="9"/></name> <operator pos:line="73" pos:column="10">=<pos:position pos:line="73" pos:column="11"/></operator> <call><name pos:line="73" pos:column="12">uc_get_rate_by_name<pos:position pos:line="73" pos:column="31"/></name><argument_list pos:line="73" pos:column="31">(<argument><expr><name pos:line="73" pos:column="32">identifier<pos:position pos:line="73" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="73" pos:column="44">&amp;<pos:position pos:line="73" pos:column="49"/></operator><name pos:line="73" pos:column="45">values<pos:position pos:line="73" pos:column="51"/></name></expr></argument>, <argument><expr><operator pos:line="73" pos:column="53">&amp;<pos:position pos:line="73" pos:column="58"/></operator><name pos:line="73" pos:column="54">values_num<pos:position pos:line="73" pos:column="64"/></name></expr></argument>)<pos:position pos:line="73" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="66"/></expr_stmt>
  <if pos:line="74" pos:column="3">if <condition pos:line="74" pos:column="6">(<expr><name pos:line="74" pos:column="7">status<pos:position pos:line="74" pos:column="13"/></name> <operator pos:line="74" pos:column="14">!=<pos:position pos:line="74" pos:column="16"/></operator> <literal type="number" pos:line="74" pos:column="17">0<pos:position pos:line="74" pos:column="18"/></literal></expr>)<pos:position pos:line="74" pos:column="19"/></condition><then pos:line="74" pos:column="19"> <block pos:line="74" pos:column="20">{
    <expr_stmt><expr><call><name pos:line="75" pos:column="5">print_to_socket<pos:position pos:line="75" pos:column="20"/></name><argument_list pos:line="75" pos:column="20">(<argument><expr><name pos:line="75" pos:column="21">fh<pos:position pos:line="75" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="75" pos:column="25">"-1 No such value\n"<pos:position pos:line="75" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="75" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="47"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="76" pos:column="5">sfree<pos:position pos:line="76" pos:column="10"/></name><argument_list pos:line="76" pos:column="10">(<argument><expr><name pos:line="76" pos:column="11">identifier_copy<pos:position pos:line="76" pos:column="26"/></name></expr></argument>)<pos:position pos:line="76" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="28"/></expr_stmt>
    <return pos:line="77" pos:column="5">return <expr><operator pos:line="77" pos:column="12">(<pos:position pos:line="77" pos:column="13"/></operator><operator pos:line="77" pos:column="13">-<pos:position pos:line="77" pos:column="14"/></operator><literal type="number" pos:line="77" pos:column="14">1<pos:position pos:line="77" pos:column="15"/></literal><operator pos:line="77" pos:column="15">)<pos:position pos:line="77" pos:column="16"/></operator></expr>;<pos:position pos:line="77" pos:column="17"/></return>
  }<pos:position pos:line="78" pos:column="4"/></block></then></if>

  <if pos:line="80" pos:column="3">if <condition pos:line="80" pos:column="6">(<expr><name><name pos:line="80" pos:column="7">ds<pos:position pos:line="80" pos:column="9"/></name><operator pos:line="80" pos:column="9">-&gt;<pos:position pos:line="80" pos:column="14"/></operator><name pos:line="80" pos:column="11">ds_num<pos:position pos:line="80" pos:column="17"/></name></name> <operator pos:line="80" pos:column="18">!=<pos:position pos:line="80" pos:column="20"/></operator> <name pos:line="80" pos:column="21">values_num<pos:position pos:line="80" pos:column="31"/></name></expr>)<pos:position pos:line="80" pos:column="32"/></condition><then pos:line="80" pos:column="32"> <block pos:line="80" pos:column="33">{
    <expr_stmt><expr><call><name pos:line="81" pos:column="5">ERROR<pos:position pos:line="81" pos:column="10"/></name><argument_list pos:line="81" pos:column="10">(<argument><expr><literal type="string" pos:line="81" pos:column="11">"ds[%s]-&gt;ds_num = %zu, "<pos:position pos:line="81" pos:column="38"/></literal>
          <literal type="string" pos:line="82" pos:column="11">"but uc_get_rate_by_name returned %zu values."<pos:position pos:line="82" pos:column="57"/></literal></expr></argument>,
          <argument><expr><name><name pos:line="83" pos:column="11">ds<pos:position pos:line="83" pos:column="13"/></name><operator pos:line="83" pos:column="13">-&gt;<pos:position pos:line="83" pos:column="18"/></operator><name pos:line="83" pos:column="15">type<pos:position pos:line="83" pos:column="19"/></name></name></expr></argument>, <argument><expr><name><name pos:line="83" pos:column="21">ds<pos:position pos:line="83" pos:column="23"/></name><operator pos:line="83" pos:column="23">-&gt;<pos:position pos:line="83" pos:column="28"/></operator><name pos:line="83" pos:column="25">ds_num<pos:position pos:line="83" pos:column="31"/></name></name></expr></argument>, <argument><expr><name pos:line="83" pos:column="33">values_num<pos:position pos:line="83" pos:column="43"/></name></expr></argument>)<pos:position pos:line="83" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="45"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="84" pos:column="5">print_to_socket<pos:position pos:line="84" pos:column="20"/></name><argument_list pos:line="84" pos:column="20">(<argument><expr><name pos:line="84" pos:column="21">fh<pos:position pos:line="84" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="84" pos:column="25">"-1 Error reading value from cache.\n"<pos:position pos:line="84" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="84" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="65"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="85" pos:column="5">sfree<pos:position pos:line="85" pos:column="10"/></name><argument_list pos:line="85" pos:column="10">(<argument><expr><name pos:line="85" pos:column="11">values<pos:position pos:line="85" pos:column="17"/></name></expr></argument>)<pos:position pos:line="85" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="19"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="86" pos:column="5">sfree<pos:position pos:line="86" pos:column="10"/></name><argument_list pos:line="86" pos:column="10">(<argument><expr><name pos:line="86" pos:column="11">identifier_copy<pos:position pos:line="86" pos:column="26"/></name></expr></argument>)<pos:position pos:line="86" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="28"/></expr_stmt>
    <return pos:line="87" pos:column="5">return <expr><operator pos:line="87" pos:column="12">(<pos:position pos:line="87" pos:column="13"/></operator><operator pos:line="87" pos:column="13">-<pos:position pos:line="87" pos:column="14"/></operator><literal type="number" pos:line="87" pos:column="14">1<pos:position pos:line="87" pos:column="15"/></literal><operator pos:line="87" pos:column="15">)<pos:position pos:line="87" pos:column="16"/></operator></expr>;<pos:position pos:line="87" pos:column="17"/></return>
  }<pos:position pos:line="88" pos:column="4"/></block></then></if>

  <expr_stmt><expr><call><name pos:line="90" pos:column="3">print_to_socket<pos:position pos:line="90" pos:column="18"/></name><argument_list pos:line="90" pos:column="18">(<argument><expr><name pos:line="90" pos:column="19">fh<pos:position pos:line="90" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="90" pos:column="23">"%zu Value%s found\n"<pos:position pos:line="90" pos:column="44"/></literal></expr></argument>, <argument><expr><name pos:line="90" pos:column="46">values_num<pos:position pos:line="90" pos:column="56"/></name></expr></argument>,
                  <argument><expr><ternary><condition><expr><operator pos:line="91" pos:column="19">(<pos:position pos:line="91" pos:column="20"/></operator><name pos:line="91" pos:column="20">values_num<pos:position pos:line="91" pos:column="30"/></name> <operator pos:line="91" pos:column="31">==<pos:position pos:line="91" pos:column="33"/></operator> <literal type="number" pos:line="91" pos:column="34">1<pos:position pos:line="91" pos:column="35"/></literal><operator pos:line="91" pos:column="35">)<pos:position pos:line="91" pos:column="36"/></operator></expr> ?<pos:position pos:line="91" pos:column="38"/></condition><then pos:line="91" pos:column="38"> <expr><literal type="string" pos:line="91" pos:column="39">""<pos:position pos:line="91" pos:column="41"/></literal></expr> <pos:position pos:line="91" pos:column="42"/></then><else pos:line="91" pos:column="42">: <expr><literal type="string" pos:line="91" pos:column="44">"s"<pos:position pos:line="91" pos:column="47"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="91" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="91" pos:column="49"/></expr_stmt>
  <for pos:line="92" pos:column="3">for <control pos:line="92" pos:column="7">(<init><decl><type><name pos:line="92" pos:column="8">size_t<pos:position pos:line="92" pos:column="14"/></name></type> <name pos:line="92" pos:column="15">i<pos:position pos:line="92" pos:column="16"/></name> <init pos:line="92" pos:column="17">= <expr><literal type="number" pos:line="92" pos:column="19">0<pos:position pos:line="92" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="92" pos:column="21"/></init> <condition><expr><name pos:line="92" pos:column="22">i<pos:position pos:line="92" pos:column="23"/></name> <operator pos:line="92" pos:column="24">&lt;<pos:position pos:line="92" pos:column="28"/></operator> <name pos:line="92" pos:column="26">values_num<pos:position pos:line="92" pos:column="36"/></name></expr>;<pos:position pos:line="92" pos:column="37"/></condition> <incr><expr><name pos:line="92" pos:column="38">i<pos:position pos:line="92" pos:column="39"/></name><operator pos:line="92" pos:column="39">++<pos:position pos:line="92" pos:column="41"/></operator></expr></incr>)<pos:position pos:line="92" pos:column="42"/></control> <block pos:line="92" pos:column="43">{
    <expr_stmt><expr><call><name pos:line="93" pos:column="5">print_to_socket<pos:position pos:line="93" pos:column="20"/></name><argument_list pos:line="93" pos:column="20">(<argument><expr><name pos:line="93" pos:column="21">fh<pos:position pos:line="93" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="93" pos:column="25">"%s="<pos:position pos:line="93" pos:column="30"/></literal></expr></argument>, <argument><expr><name><name pos:line="93" pos:column="32">ds<pos:position pos:line="93" pos:column="34"/></name><operator pos:line="93" pos:column="34">-&gt;<pos:position pos:line="93" pos:column="39"/></operator><name pos:line="93" pos:column="36">ds<pos:position pos:line="93" pos:column="38"/></name><index pos:line="93" pos:column="38">[<expr><name pos:line="93" pos:column="39">i<pos:position pos:line="93" pos:column="40"/></name></expr>]<pos:position pos:line="93" pos:column="41"/></index></name><operator pos:line="93" pos:column="41">.<pos:position pos:line="93" pos:column="42"/></operator><name pos:line="93" pos:column="42">name<pos:position pos:line="93" pos:column="46"/></name></expr></argument>)<pos:position pos:line="93" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="48"/></expr_stmt>
    <if pos:line="94" pos:column="5">if <condition pos:line="94" pos:column="8">(<expr><call><name pos:line="94" pos:column="9">isnan<pos:position pos:line="94" pos:column="14"/></name><argument_list pos:line="94" pos:column="14">(<argument><expr><name><name pos:line="94" pos:column="15">values<pos:position pos:line="94" pos:column="21"/></name><index pos:line="94" pos:column="21">[<expr><name pos:line="94" pos:column="22">i<pos:position pos:line="94" pos:column="23"/></name></expr>]<pos:position pos:line="94" pos:column="24"/></index></name></expr></argument>)<pos:position pos:line="94" pos:column="25"/></argument_list></call></expr>)<pos:position pos:line="94" pos:column="26"/></condition><then pos:line="94" pos:column="26"> <block pos:line="94" pos:column="27">{
      <expr_stmt><expr><call><name pos:line="95" pos:column="7">print_to_socket<pos:position pos:line="95" pos:column="22"/></name><argument_list pos:line="95" pos:column="22">(<argument><expr><name pos:line="95" pos:column="23">fh<pos:position pos:line="95" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="95" pos:column="27">"NaN\n"<pos:position pos:line="95" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="95" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="95" pos:column="36"/></expr_stmt>
    }<pos:position pos:line="96" pos:column="6"/></block></then> <else pos:line="96" pos:column="7">else <block pos:line="96" pos:column="12">{
      <expr_stmt><expr><call><name pos:line="97" pos:column="7">print_to_socket<pos:position pos:line="97" pos:column="22"/></name><argument_list pos:line="97" pos:column="22">(<argument><expr><name pos:line="97" pos:column="23">fh<pos:position pos:line="97" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="97" pos:column="27">"%12e\n"<pos:position pos:line="97" pos:column="35"/></literal></expr></argument>, <argument><expr><name><name pos:line="97" pos:column="37">values<pos:position pos:line="97" pos:column="43"/></name><index pos:line="97" pos:column="43">[<expr><name pos:line="97" pos:column="44">i<pos:position pos:line="97" pos:column="45"/></name></expr>]<pos:position pos:line="97" pos:column="46"/></index></name></expr></argument>)<pos:position pos:line="97" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="48"/></expr_stmt>
    }<pos:position pos:line="98" pos:column="6"/></block></else></if>
  }<pos:position pos:line="99" pos:column="4"/></block></for>

  <expr_stmt><expr><call><name pos:line="101" pos:column="3">sfree<pos:position pos:line="101" pos:column="8"/></name><argument_list pos:line="101" pos:column="8">(<argument><expr><name pos:line="101" pos:column="9">values<pos:position pos:line="101" pos:column="15"/></name></expr></argument>)<pos:position pos:line="101" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="101" pos:column="17"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="102" pos:column="3">sfree<pos:position pos:line="102" pos:column="8"/></name><argument_list pos:line="102" pos:column="8">(<argument><expr><name pos:line="102" pos:column="9">identifier_copy<pos:position pos:line="102" pos:column="24"/></name></expr></argument>)<pos:position pos:line="102" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="102" pos:column="26"/></expr_stmt>

  <return pos:line="104" pos:column="3">return <expr><operator pos:line="104" pos:column="10">(<pos:position pos:line="104" pos:column="11"/></operator><literal type="number" pos:line="104" pos:column="11">0<pos:position pos:line="104" pos:column="12"/></literal><operator pos:line="104" pos:column="12">)<pos:position pos:line="104" pos:column="13"/></operator></expr>;<pos:position pos:line="104" pos:column="14"/></return>
}<pos:position pos:line="105" pos:column="2"/></block></function></unit>
