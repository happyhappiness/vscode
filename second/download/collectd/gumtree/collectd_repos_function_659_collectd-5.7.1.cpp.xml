<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_659_collectd-5.7.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">agg_read<pos:position pos:line="1" pos:column="20"/></name><parameter_list pos:line="1" pos:column="20">(<parameter><decl><type><name pos:line="1" pos:column="21">void<pos:position pos:line="1" pos:column="25"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="26"/></parameter_list> <comment type="block" pos:line="1" pos:column="27">/* {{{ */</comment>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">cdtime_t<pos:position pos:line="3" pos:column="11"/></name></type> <name pos:line="3" pos:column="12">t<pos:position pos:line="3" pos:column="13"/></name></decl>;<pos:position pos:line="3" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">int<pos:position pos:line="4" pos:column="6"/></name></type> <name pos:line="4" pos:column="7">success<pos:position pos:line="4" pos:column="14"/></name></decl>;<pos:position pos:line="4" pos:column="15"/></decl_stmt>

  <expr_stmt><expr><name pos:line="6" pos:column="3">t<pos:position pos:line="6" pos:column="4"/></name> <operator pos:line="6" pos:column="5">=<pos:position pos:line="6" pos:column="6"/></operator> <call><name pos:line="6" pos:column="7">cdtime<pos:position pos:line="6" pos:column="13"/></name><argument_list pos:line="6" pos:column="13">()<pos:position pos:line="6" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="16"/></expr_stmt>
  <expr_stmt><expr><name pos:line="7" pos:column="3">success<pos:position pos:line="7" pos:column="10"/></name> <operator pos:line="7" pos:column="11">=<pos:position pos:line="7" pos:column="12"/></operator> <literal type="number" pos:line="7" pos:column="13">0<pos:position pos:line="7" pos:column="14"/></literal></expr>;<pos:position pos:line="7" pos:column="15"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="9" pos:column="3">pthread_mutex_lock<pos:position pos:line="9" pos:column="21"/></name><argument_list pos:line="9" pos:column="21">(<argument><expr><operator pos:line="9" pos:column="22">&amp;<pos:position pos:line="9" pos:column="27"/></operator><name pos:line="9" pos:column="23">agg_instance_list_lock<pos:position pos:line="9" pos:column="45"/></name></expr></argument>)<pos:position pos:line="9" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="47"/></expr_stmt>

  <comment type="block" pos:line="11" pos:column="3">/* agg_instance_list_head only holds data, after the "write" callback has
   * been called with a matching value list at least once. So on startup,
   * there's a race between the aggregations read() and write() callback. If
   * the read() callback is called first, agg_instance_list_head is NULL and
   * "success" may be zero. This is expected and should not result in an error.
   * Therefore we need to handle this case separately. */</comment>
  <if pos:line="17" pos:column="3">if <condition pos:line="17" pos:column="6">(<expr><name pos:line="17" pos:column="7">agg_instance_list_head<pos:position pos:line="17" pos:column="29"/></name> <operator pos:line="17" pos:column="30">==<pos:position pos:line="17" pos:column="32"/></operator> <name pos:line="17" pos:column="33">NULL<pos:position pos:line="17" pos:column="37"/></name></expr>)<pos:position pos:line="17" pos:column="38"/></condition><then pos:line="17" pos:column="38"> <block pos:line="17" pos:column="39">{
    <expr_stmt><expr><call><name pos:line="18" pos:column="5">pthread_mutex_unlock<pos:position pos:line="18" pos:column="25"/></name><argument_list pos:line="18" pos:column="25">(<argument><expr><operator pos:line="18" pos:column="26">&amp;<pos:position pos:line="18" pos:column="31"/></operator><name pos:line="18" pos:column="27">agg_instance_list_lock<pos:position pos:line="18" pos:column="49"/></name></expr></argument>)<pos:position pos:line="18" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="51"/></expr_stmt>
    <return pos:line="19" pos:column="5">return <expr><operator pos:line="19" pos:column="12">(<pos:position pos:line="19" pos:column="13"/></operator><literal type="number" pos:line="19" pos:column="13">0<pos:position pos:line="19" pos:column="14"/></literal><operator pos:line="19" pos:column="14">)<pos:position pos:line="19" pos:column="15"/></operator></expr>;<pos:position pos:line="19" pos:column="16"/></return>
  }<pos:position pos:line="20" pos:column="4"/></block></then></if>

  <for pos:line="22" pos:column="3">for <control pos:line="22" pos:column="7">(<init><decl><type><name pos:line="22" pos:column="8">agg_instance_t<pos:position pos:line="22" pos:column="22"/></name> <modifier pos:line="22" pos:column="23">*<pos:position pos:line="22" pos:column="24"/></modifier></type><name pos:line="22" pos:column="24">this<pos:position pos:line="22" pos:column="28"/></name> <init pos:line="22" pos:column="29">= <expr><name pos:line="22" pos:column="31">agg_instance_list_head<pos:position pos:line="22" pos:column="53"/></name></expr></init></decl>;<pos:position pos:line="22" pos:column="54"/></init> <condition><expr><name pos:line="22" pos:column="55">this<pos:position pos:line="22" pos:column="59"/></name> <operator pos:line="22" pos:column="60">!=<pos:position pos:line="22" pos:column="62"/></operator> <name pos:line="22" pos:column="63">NULL<pos:position pos:line="22" pos:column="67"/></name></expr>;<pos:position pos:line="22" pos:column="68"/></condition>
       <incr><expr><name pos:line="23" pos:column="8">this<pos:position pos:line="23" pos:column="12"/></name> <operator pos:line="23" pos:column="13">=<pos:position pos:line="23" pos:column="14"/></operator> <name><name pos:line="23" pos:column="15">this<pos:position pos:line="23" pos:column="19"/></name><operator pos:line="23" pos:column="19">-&gt;<pos:position pos:line="23" pos:column="24"/></operator><name pos:line="23" pos:column="21">next<pos:position pos:line="23" pos:column="25"/></name></name></expr></incr>)<pos:position pos:line="23" pos:column="26"/></control> <block pos:line="23" pos:column="27">{
    <decl_stmt><decl><type><name pos:line="24" pos:column="5">int<pos:position pos:line="24" pos:column="8"/></name></type> <name pos:line="24" pos:column="9">status<pos:position pos:line="24" pos:column="15"/></name></decl>;<pos:position pos:line="24" pos:column="16"/></decl_stmt>

    <expr_stmt><expr><name pos:line="26" pos:column="5">status<pos:position pos:line="26" pos:column="11"/></name> <operator pos:line="26" pos:column="12">=<pos:position pos:line="26" pos:column="13"/></operator> <call><name pos:line="26" pos:column="14">agg_instance_read<pos:position pos:line="26" pos:column="31"/></name><argument_list pos:line="26" pos:column="31">(<argument><expr><name pos:line="26" pos:column="32">this<pos:position pos:line="26" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="38">t<pos:position pos:line="26" pos:column="39"/></name></expr></argument>)<pos:position pos:line="26" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="41"/></expr_stmt>
    <if pos:line="27" pos:column="5">if <condition pos:line="27" pos:column="8">(<expr><name pos:line="27" pos:column="9">status<pos:position pos:line="27" pos:column="15"/></name> <operator pos:line="27" pos:column="16">!=<pos:position pos:line="27" pos:column="18"/></operator> <literal type="number" pos:line="27" pos:column="19">0<pos:position pos:line="27" pos:column="20"/></literal></expr>)<pos:position pos:line="27" pos:column="21"/></condition><then pos:line="27" pos:column="21">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="28" pos:column="7">WARNING<pos:position pos:line="28" pos:column="14"/></name><argument_list pos:line="28" pos:column="14">(<argument><expr><literal type="string" pos:line="28" pos:column="15">"aggregation plugin: Reading an aggregation instance "<pos:position pos:line="28" pos:column="69"/></literal>
              <literal type="string" pos:line="29" pos:column="15">"failed with status %i."<pos:position pos:line="29" pos:column="39"/></literal></expr></argument>,
              <argument><expr><name pos:line="30" pos:column="15">status<pos:position pos:line="30" pos:column="21"/></name></expr></argument>)<pos:position pos:line="30" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="23"/></expr_stmt></block></then>
    <else pos:line="31" pos:column="5">else
      <block type="pseudo"><expr_stmt><expr><name pos:line="32" pos:column="7">success<pos:position pos:line="32" pos:column="14"/></name><operator pos:line="32" pos:column="14">++<pos:position pos:line="32" pos:column="16"/></operator></expr>;<pos:position pos:line="32" pos:column="17"/></expr_stmt></block></else></if>
  }<pos:position pos:line="33" pos:column="4"/></block></for>

  <expr_stmt><expr><call><name pos:line="35" pos:column="3">pthread_mutex_unlock<pos:position pos:line="35" pos:column="23"/></name><argument_list pos:line="35" pos:column="23">(<argument><expr><operator pos:line="35" pos:column="24">&amp;<pos:position pos:line="35" pos:column="29"/></operator><name pos:line="35" pos:column="25">agg_instance_list_lock<pos:position pos:line="35" pos:column="47"/></name></expr></argument>)<pos:position pos:line="35" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="49"/></expr_stmt>

  <return pos:line="37" pos:column="3">return <expr><operator pos:line="37" pos:column="10">(<pos:position pos:line="37" pos:column="11"/></operator><ternary><condition><expr><operator pos:line="37" pos:column="11">(<pos:position pos:line="37" pos:column="12"/></operator><name pos:line="37" pos:column="12">success<pos:position pos:line="37" pos:column="19"/></name> <operator pos:line="37" pos:column="20">&gt;<pos:position pos:line="37" pos:column="24"/></operator> <literal type="number" pos:line="37" pos:column="22">0<pos:position pos:line="37" pos:column="23"/></literal><operator pos:line="37" pos:column="23">)<pos:position pos:line="37" pos:column="24"/></operator></expr> ?<pos:position pos:line="37" pos:column="26"/></condition><then pos:line="37" pos:column="26"> <expr><literal type="number" pos:line="37" pos:column="27">0<pos:position pos:line="37" pos:column="28"/></literal></expr> <pos:position pos:line="37" pos:column="29"/></then><else pos:line="37" pos:column="29">: <expr><operator pos:line="37" pos:column="31">-<pos:position pos:line="37" pos:column="32"/></operator><literal type="number" pos:line="37" pos:column="32">1<pos:position pos:line="37" pos:column="33"/></literal></expr></else></ternary><operator pos:line="37" pos:column="33">)<pos:position pos:line="37" pos:column="34"/></operator></expr>;<pos:position pos:line="37" pos:column="35"/></return>
}<pos:position pos:line="38" pos:column="2"/></block></function></unit>
