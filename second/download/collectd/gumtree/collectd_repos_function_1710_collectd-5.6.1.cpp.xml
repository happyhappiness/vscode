<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1710_collectd-5.6.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">wh_notify<pos:position pos:line="1" pos:column="21"/></name> <parameter_list pos:line="1" pos:column="22">(<parameter><decl><type><name pos:line="1" pos:column="23">notification_t<pos:position pos:line="1" pos:column="37"/></name> <specifier pos:line="1" pos:column="38">const<pos:position pos:line="1" pos:column="43"/></specifier> <modifier pos:line="1" pos:column="44">*<pos:position pos:line="1" pos:column="45"/></modifier></type><name pos:line="1" pos:column="45">n<pos:position pos:line="1" pos:column="46"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="48">user_data_t<pos:position pos:line="1" pos:column="59"/></name> <modifier pos:line="1" pos:column="60">*<pos:position pos:line="1" pos:column="61"/></modifier></type><name pos:line="1" pos:column="61">ud<pos:position pos:line="1" pos:column="63"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="64"/></parameter_list> <comment type="block" pos:line="1" pos:column="65">/* {{{ */</comment>
<block pos:line="2" pos:column="1">{
        <decl_stmt><decl><type><name pos:line="3" pos:column="9">wh_callback_t<pos:position pos:line="3" pos:column="22"/></name> <modifier pos:line="3" pos:column="23">*<pos:position pos:line="3" pos:column="24"/></modifier></type><name pos:line="3" pos:column="24">cb<pos:position pos:line="3" pos:column="26"/></name></decl>;<pos:position pos:line="3" pos:column="27"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="4" pos:column="9">char<pos:position pos:line="4" pos:column="13"/></name></type> <name><name pos:line="4" pos:column="14">alert<pos:position pos:line="4" pos:column="19"/></name><index pos:line="4" pos:column="19">[<expr><literal type="number" pos:line="4" pos:column="20">4096<pos:position pos:line="4" pos:column="24"/></literal></expr>]<pos:position pos:line="4" pos:column="25"/></index></name></decl>;<pos:position pos:line="4" pos:column="26"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">status<pos:position pos:line="5" pos:column="19"/></name></decl>;<pos:position pos:line="5" pos:column="20"/></decl_stmt>

        <if pos:line="7" pos:column="9">if <condition pos:line="7" pos:column="12">(<expr><operator pos:line="7" pos:column="13">(<pos:position pos:line="7" pos:column="14"/></operator><name pos:line="7" pos:column="14">ud<pos:position pos:line="7" pos:column="16"/></name> <operator pos:line="7" pos:column="17">==<pos:position pos:line="7" pos:column="19"/></operator> <name pos:line="7" pos:column="20">NULL<pos:position pos:line="7" pos:column="24"/></name><operator pos:line="7" pos:column="24">)<pos:position pos:line="7" pos:column="25"/></operator> <operator pos:line="7" pos:column="26">||<pos:position pos:line="7" pos:column="28"/></operator> <operator pos:line="7" pos:column="29">(<pos:position pos:line="7" pos:column="30"/></operator><name><name pos:line="7" pos:column="30">ud<pos:position pos:line="7" pos:column="32"/></name><operator pos:line="7" pos:column="32">-&gt;<pos:position pos:line="7" pos:column="37"/></operator><name pos:line="7" pos:column="34">data<pos:position pos:line="7" pos:column="38"/></name></name> <operator pos:line="7" pos:column="39">==<pos:position pos:line="7" pos:column="41"/></operator> <name pos:line="7" pos:column="42">NULL<pos:position pos:line="7" pos:column="46"/></name><operator pos:line="7" pos:column="46">)<pos:position pos:line="7" pos:column="47"/></operator></expr>)<pos:position pos:line="7" pos:column="48"/></condition><then pos:line="7" pos:column="48">
                <block type="pseudo"><return pos:line="8" pos:column="17">return <expr><operator pos:line="8" pos:column="24">(<pos:position pos:line="8" pos:column="25"/></operator><name pos:line="8" pos:column="25">EINVAL<pos:position pos:line="8" pos:column="31"/></name><operator pos:line="8" pos:column="31">)<pos:position pos:line="8" pos:column="32"/></operator></expr>;<pos:position pos:line="8" pos:column="33"/></return></block></then></if>

        <expr_stmt><expr><name pos:line="10" pos:column="9">cb<pos:position pos:line="10" pos:column="11"/></name> <operator pos:line="10" pos:column="12">=<pos:position pos:line="10" pos:column="13"/></operator> <name><name pos:line="10" pos:column="14">ud<pos:position pos:line="10" pos:column="16"/></name><operator pos:line="10" pos:column="16">-&gt;<pos:position pos:line="10" pos:column="21"/></operator><name pos:line="10" pos:column="18">data<pos:position pos:line="10" pos:column="22"/></name></name></expr>;<pos:position pos:line="10" pos:column="23"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="11" pos:column="9">assert<pos:position pos:line="11" pos:column="15"/></name> <argument_list pos:line="11" pos:column="16">(<argument><expr><name><name pos:line="11" pos:column="17">cb<pos:position pos:line="11" pos:column="19"/></name><operator pos:line="11" pos:column="19">-&gt;<pos:position pos:line="11" pos:column="24"/></operator><name pos:line="11" pos:column="21">send_notifications<pos:position pos:line="11" pos:column="39"/></name></name></expr></argument>)<pos:position pos:line="11" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="41"/></expr_stmt>

        <expr_stmt><expr><name pos:line="13" pos:column="9">status<pos:position pos:line="13" pos:column="15"/></name> <operator pos:line="13" pos:column="16">=<pos:position pos:line="13" pos:column="17"/></operator> <call><name pos:line="13" pos:column="18">format_json_notification<pos:position pos:line="13" pos:column="42"/></name> <argument_list pos:line="13" pos:column="43">(<argument><expr><name pos:line="13" pos:column="44">alert<pos:position pos:line="13" pos:column="49"/></name></expr></argument>, <argument><expr><sizeof pos:line="13" pos:column="51">sizeof <argument_list pos:line="13" pos:column="58">(<argument><expr><name pos:line="13" pos:column="59">alert<pos:position pos:line="13" pos:column="64"/></name></expr></argument>)<pos:position pos:line="13" pos:column="65"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="13" pos:column="67">n<pos:position pos:line="13" pos:column="68"/></name></expr></argument>)<pos:position pos:line="13" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="70"/></expr_stmt>
        <if pos:line="14" pos:column="9">if <condition pos:line="14" pos:column="12">(<expr><name pos:line="14" pos:column="13">status<pos:position pos:line="14" pos:column="19"/></name> <operator pos:line="14" pos:column="20">!=<pos:position pos:line="14" pos:column="22"/></operator> <literal type="number" pos:line="14" pos:column="23">0<pos:position pos:line="14" pos:column="24"/></literal></expr>)<pos:position pos:line="14" pos:column="25"/></condition><then pos:line="14" pos:column="25">
        <block pos:line="15" pos:column="9">{
                <expr_stmt><expr><call><name pos:line="16" pos:column="17">ERROR<pos:position pos:line="16" pos:column="22"/></name> <argument_list pos:line="16" pos:column="23">(<argument><expr><literal type="string" pos:line="16" pos:column="24">"write_http plugin: formatting notification failed"<pos:position pos:line="16" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="77"/></expr_stmt>
                <return pos:line="17" pos:column="17">return <expr><name pos:line="17" pos:column="24">status<pos:position pos:line="17" pos:column="30"/></name></expr>;<pos:position pos:line="17" pos:column="31"/></return>
        }<pos:position pos:line="18" pos:column="10"/></block></then></if>

        <expr_stmt><expr><call><name pos:line="20" pos:column="9">pthread_mutex_lock<pos:position pos:line="20" pos:column="27"/></name> <argument_list pos:line="20" pos:column="28">(<argument><expr><operator pos:line="20" pos:column="29">&amp;<pos:position pos:line="20" pos:column="34"/></operator><name><name pos:line="20" pos:column="30">cb<pos:position pos:line="20" pos:column="32"/></name><operator pos:line="20" pos:column="32">-&gt;<pos:position pos:line="20" pos:column="37"/></operator><name pos:line="20" pos:column="34">send_lock<pos:position pos:line="20" pos:column="43"/></name></name></expr></argument>)<pos:position pos:line="20" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="45"/></expr_stmt>
        <if pos:line="21" pos:column="9">if <condition pos:line="21" pos:column="12">(<expr><call><name pos:line="21" pos:column="13">wh_callback_init<pos:position pos:line="21" pos:column="29"/></name> <argument_list pos:line="21" pos:column="30">(<argument><expr><name pos:line="21" pos:column="31">cb<pos:position pos:line="21" pos:column="33"/></name></expr></argument>)<pos:position pos:line="21" pos:column="34"/></argument_list></call> <operator pos:line="21" pos:column="35">!=<pos:position pos:line="21" pos:column="37"/></operator> <literal type="number" pos:line="21" pos:column="38">0<pos:position pos:line="21" pos:column="39"/></literal></expr>)<pos:position pos:line="21" pos:column="40"/></condition><then pos:line="21" pos:column="40">
        <block pos:line="22" pos:column="9">{
                <expr_stmt><expr><call><name pos:line="23" pos:column="17">ERROR<pos:position pos:line="23" pos:column="22"/></name> <argument_list pos:line="23" pos:column="23">(<argument><expr><literal type="string" pos:line="23" pos:column="24">"write_http plugin: wh_callback_init failed."<pos:position pos:line="23" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="71"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="24" pos:column="17">pthread_mutex_unlock<pos:position pos:line="24" pos:column="37"/></name> <argument_list pos:line="24" pos:column="38">(<argument><expr><operator pos:line="24" pos:column="39">&amp;<pos:position pos:line="24" pos:column="44"/></operator><name><name pos:line="24" pos:column="40">cb<pos:position pos:line="24" pos:column="42"/></name><operator pos:line="24" pos:column="42">-&gt;<pos:position pos:line="24" pos:column="47"/></operator><name pos:line="24" pos:column="44">send_lock<pos:position pos:line="24" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="24" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="55"/></expr_stmt>
                <return pos:line="25" pos:column="17">return <expr><operator pos:line="25" pos:column="24">(<pos:position pos:line="25" pos:column="25"/></operator><operator pos:line="25" pos:column="25">-<pos:position pos:line="25" pos:column="26"/></operator><literal type="number" pos:line="25" pos:column="26">1<pos:position pos:line="25" pos:column="27"/></literal><operator pos:line="25" pos:column="27">)<pos:position pos:line="25" pos:column="28"/></operator></expr>;<pos:position pos:line="25" pos:column="29"/></return>
        }<pos:position pos:line="26" pos:column="10"/></block></then></if>

        <expr_stmt><expr><name pos:line="28" pos:column="9">status<pos:position pos:line="28" pos:column="15"/></name> <operator pos:line="28" pos:column="16">=<pos:position pos:line="28" pos:column="17"/></operator> <call><name pos:line="28" pos:column="18">wh_post_nolock<pos:position pos:line="28" pos:column="32"/></name> <argument_list pos:line="28" pos:column="33">(<argument><expr><name pos:line="28" pos:column="34">cb<pos:position pos:line="28" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="38">alert<pos:position pos:line="28" pos:column="43"/></name></expr></argument>)<pos:position pos:line="28" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="45"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="29" pos:column="9">pthread_mutex_unlock<pos:position pos:line="29" pos:column="29"/></name> <argument_list pos:line="29" pos:column="30">(<argument><expr><operator pos:line="29" pos:column="31">&amp;<pos:position pos:line="29" pos:column="36"/></operator><name><name pos:line="29" pos:column="32">cb<pos:position pos:line="29" pos:column="34"/></name><operator pos:line="29" pos:column="34">-&gt;<pos:position pos:line="29" pos:column="39"/></operator><name pos:line="29" pos:column="36">send_lock<pos:position pos:line="29" pos:column="45"/></name></name></expr></argument>)<pos:position pos:line="29" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="47"/></expr_stmt>

        <return pos:line="31" pos:column="9">return <expr><operator pos:line="31" pos:column="16">(<pos:position pos:line="31" pos:column="17"/></operator><name pos:line="31" pos:column="17">status<pos:position pos:line="31" pos:column="23"/></name><operator pos:line="31" pos:column="23">)<pos:position pos:line="31" pos:column="24"/></operator></expr>;<pos:position pos:line="31" pos:column="25"/></return>
}<pos:position pos:line="32" pos:column="2"/></block></function></unit>
