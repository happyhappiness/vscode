<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_2542_collectd-5.7.1.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">check_capability<pos:position pos:line="1" pos:column="21"/></name><parameter_list pos:line="1" pos:column="21">(<parameter><decl><type><name pos:line="1" pos:column="22">int<pos:position pos:line="1" pos:column="25"/></name></type> <name pos:line="1" pos:column="26">arg<pos:position pos:line="1" pos:column="29"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="30"/></parameter_list> <comment type="block" pos:line="1" pos:column="31">/* {{{ */</comment>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">cap_value_t<pos:position pos:line="3" pos:column="14"/></name></type> <name pos:line="3" pos:column="15">cap<pos:position pos:line="3" pos:column="18"/></name> <init pos:line="3" pos:column="19">= <expr><operator pos:line="3" pos:column="21">(<pos:position pos:line="3" pos:column="22"/></operator><name pos:line="3" pos:column="22">cap_value_t<pos:position pos:line="3" pos:column="33"/></name><operator pos:line="3" pos:column="33">)<pos:position pos:line="3" pos:column="34"/></operator><name pos:line="3" pos:column="34">arg<pos:position pos:line="3" pos:column="37"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="38"/></decl_stmt>

  <if pos:line="5" pos:column="3">if <condition pos:line="5" pos:column="6">(<expr><operator pos:line="5" pos:column="7">!<pos:position pos:line="5" pos:column="8"/></operator><call><name pos:line="5" pos:column="8">CAP_IS_SUPPORTED<pos:position pos:line="5" pos:column="24"/></name><argument_list pos:line="5" pos:column="24">(<argument><expr><name pos:line="5" pos:column="25">cap<pos:position pos:line="5" pos:column="28"/></name></expr></argument>)<pos:position pos:line="5" pos:column="29"/></argument_list></call></expr>)<pos:position pos:line="5" pos:column="30"/></condition><then pos:line="5" pos:column="30">
    <block type="pseudo"><return pos:line="6" pos:column="5">return <expr><operator pos:line="6" pos:column="12">(<pos:position pos:line="6" pos:column="13"/></operator><operator pos:line="6" pos:column="13">-<pos:position pos:line="6" pos:column="14"/></operator><literal type="number" pos:line="6" pos:column="14">1<pos:position pos:line="6" pos:column="15"/></literal><operator pos:line="6" pos:column="15">)<pos:position pos:line="6" pos:column="16"/></operator></expr>;<pos:position pos:line="6" pos:column="17"/></return></block></then></if>

  <decl_stmt><decl><type><name pos:line="8" pos:column="3">int<pos:position pos:line="8" pos:column="6"/></name></type> <name pos:line="8" pos:column="7">have_cap<pos:position pos:line="8" pos:column="15"/></name> <init pos:line="8" pos:column="16">= <expr><call><name pos:line="8" pos:column="18">cap_get_bound<pos:position pos:line="8" pos:column="31"/></name><argument_list pos:line="8" pos:column="31">(<argument><expr><name pos:line="8" pos:column="32">cap<pos:position pos:line="8" pos:column="35"/></name></expr></argument>)<pos:position pos:line="8" pos:column="36"/></argument_list></call></expr></init></decl>;<pos:position pos:line="8" pos:column="37"/></decl_stmt>
  <if pos:line="9" pos:column="3">if <condition pos:line="9" pos:column="6">(<expr><name pos:line="9" pos:column="7">have_cap<pos:position pos:line="9" pos:column="15"/></name> <operator pos:line="9" pos:column="16">!=<pos:position pos:line="9" pos:column="18"/></operator> <literal type="number" pos:line="9" pos:column="19">1<pos:position pos:line="9" pos:column="20"/></literal></expr>)<pos:position pos:line="9" pos:column="21"/></condition><then pos:line="9" pos:column="21">
    <block type="pseudo"><return pos:line="10" pos:column="5">return <expr><operator pos:line="10" pos:column="12">(<pos:position pos:line="10" pos:column="13"/></operator><operator pos:line="10" pos:column="13">-<pos:position pos:line="10" pos:column="14"/></operator><literal type="number" pos:line="10" pos:column="14">1<pos:position pos:line="10" pos:column="15"/></literal><operator pos:line="10" pos:column="15">)<pos:position pos:line="10" pos:column="16"/></operator></expr>;<pos:position pos:line="10" pos:column="17"/></return></block></then></if>

  <return pos:line="12" pos:column="3">return <expr><operator pos:line="12" pos:column="10">(<pos:position pos:line="12" pos:column="11"/></operator><literal type="number" pos:line="12" pos:column="11">0<pos:position pos:line="12" pos:column="12"/></literal><operator pos:line="12" pos:column="12">)<pos:position pos:line="12" pos:column="13"/></operator></expr>;<pos:position pos:line="12" pos:column="14"/></return>
}<pos:position pos:line="13" pos:column="2"/></block></function></unit>
