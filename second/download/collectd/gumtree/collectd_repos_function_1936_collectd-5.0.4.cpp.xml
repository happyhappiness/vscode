<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1936_collectd-5.0.4.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name pos:line="2" pos:column="1">TC_DELETE_ENTRY<pos:position pos:line="2" pos:column="16"/></name><parameter_list pos:line="2" pos:column="16">(<parameter><decl><type><specifier pos:line="2" pos:column="17">const<pos:position pos:line="2" pos:column="22"/></specifier> <name pos:line="2" pos:column="23">IPT_CHAINLABEL<pos:position pos:line="2" pos:column="37"/></name></type> <name pos:line="2" pos:column="38">chain<pos:position pos:line="2" pos:column="43"/></name></decl></parameter>,
		<parameter><decl><type><specifier pos:line="3" pos:column="17">const<pos:position pos:line="3" pos:column="22"/></specifier> <name pos:line="3" pos:column="23">STRUCT_ENTRY<pos:position pos:line="3" pos:column="35"/></name> <modifier pos:line="3" pos:column="36">*<pos:position pos:line="3" pos:column="37"/></modifier></type><name pos:line="3" pos:column="37">origfw<pos:position pos:line="3" pos:column="43"/></name></decl></parameter>,
		<parameter><decl><type><name pos:line="4" pos:column="17">unsigned<pos:position pos:line="4" pos:column="25"/></name> <name pos:line="4" pos:column="26">char<pos:position pos:line="4" pos:column="30"/></name> <modifier pos:line="4" pos:column="31">*<pos:position pos:line="4" pos:column="32"/></modifier></type><name pos:line="4" pos:column="32">matchmask<pos:position pos:line="4" pos:column="41"/></name></decl></parameter>,
		<parameter><decl><type><name pos:line="5" pos:column="17">TC_HANDLE_T<pos:position pos:line="5" pos:column="28"/></name> <modifier pos:line="5" pos:column="29">*<pos:position pos:line="5" pos:column="30"/></modifier></type><name pos:line="5" pos:column="30">handle<pos:position pos:line="5" pos:column="36"/></name></decl></parameter>)<pos:position pos:line="5" pos:column="37"/></parameter_list>
<block pos:line="6" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="7" pos:column="9">struct<pos:position pos:line="7" pos:column="15"/></name> <name pos:line="7" pos:column="16">chain_head<pos:position pos:line="7" pos:column="26"/></name></name> <modifier pos:line="7" pos:column="27">*<pos:position pos:line="7" pos:column="28"/></modifier></type><name pos:line="7" pos:column="28">c<pos:position pos:line="7" pos:column="29"/></name></decl>;<pos:position pos:line="7" pos:column="30"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="8" pos:column="9">struct<pos:position pos:line="8" pos:column="15"/></name> <name pos:line="8" pos:column="16">rule_head<pos:position pos:line="8" pos:column="25"/></name></name> <modifier pos:line="8" pos:column="26">*<pos:position pos:line="8" pos:column="27"/></modifier></type><name pos:line="8" pos:column="27">r<pos:position pos:line="8" pos:column="28"/></name></decl>, <modifier pos:line="8" pos:column="30">*<pos:position pos:line="8" pos:column="31"/></modifier><decl><type ref="prev"/><name pos:line="8" pos:column="31">i<pos:position pos:line="8" pos:column="32"/></name></decl>;<pos:position pos:line="8" pos:column="33"/></decl_stmt>

	<expr_stmt><expr><name pos:line="10" pos:column="9">iptc_fn<pos:position pos:line="10" pos:column="16"/></name> <operator pos:line="10" pos:column="17">=<pos:position pos:line="10" pos:column="18"/></operator> <name pos:line="10" pos:column="19">TC_DELETE_ENTRY<pos:position pos:line="10" pos:column="34"/></name></expr>;<pos:position pos:line="10" pos:column="35"/></expr_stmt>
	<if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><operator pos:line="11" pos:column="13">!<pos:position pos:line="11" pos:column="14"/></operator><operator pos:line="11" pos:column="14">(<pos:position pos:line="11" pos:column="15"/></operator><name pos:line="11" pos:column="15">c<pos:position pos:line="11" pos:column="16"/></name> <operator pos:line="11" pos:column="17">=<pos:position pos:line="11" pos:column="18"/></operator> <call><name pos:line="11" pos:column="19">iptcc_find_label<pos:position pos:line="11" pos:column="35"/></name><argument_list pos:line="11" pos:column="35">(<argument><expr><name pos:line="11" pos:column="36">chain<pos:position pos:line="11" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="11" pos:column="43">*<pos:position pos:line="11" pos:column="44"/></operator><name pos:line="11" pos:column="44">handle<pos:position pos:line="11" pos:column="50"/></name></expr></argument>)<pos:position pos:line="11" pos:column="51"/></argument_list></call><operator pos:line="11" pos:column="51">)<pos:position pos:line="11" pos:column="52"/></operator></expr>)<pos:position pos:line="11" pos:column="53"/></condition><then pos:line="11" pos:column="53"> <block pos:line="11" pos:column="54">{
		<expr_stmt><expr><name pos:line="12" pos:column="17">errno<pos:position pos:line="12" pos:column="22"/></name> <operator pos:line="12" pos:column="23">=<pos:position pos:line="12" pos:column="24"/></operator> <name pos:line="12" pos:column="25">ENOENT<pos:position pos:line="12" pos:column="31"/></name></expr>;<pos:position pos:line="12" pos:column="32"/></expr_stmt>
		<return pos:line="13" pos:column="17">return <expr><literal type="number" pos:line="13" pos:column="24">0<pos:position pos:line="13" pos:column="25"/></literal></expr>;<pos:position pos:line="13" pos:column="26"/></return>
	}<pos:position pos:line="14" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="16" pos:column="9">/* Create a rule_head from origfw. */</comment>
	<expr_stmt><expr><name pos:line="17" pos:column="9">r<pos:position pos:line="17" pos:column="10"/></name> <operator pos:line="17" pos:column="11">=<pos:position pos:line="17" pos:column="12"/></operator> <call><name pos:line="17" pos:column="13">iptcc_alloc_rule<pos:position pos:line="17" pos:column="29"/></name><argument_list pos:line="17" pos:column="29">(<argument><expr><name pos:line="17" pos:column="30">c<pos:position pos:line="17" pos:column="31"/></name></expr></argument>, <argument><expr><name><name pos:line="17" pos:column="33">origfw<pos:position pos:line="17" pos:column="39"/></name><operator pos:line="17" pos:column="39">-&gt;<pos:position pos:line="17" pos:column="44"/></operator><name pos:line="17" pos:column="41">next_offset<pos:position pos:line="17" pos:column="52"/></name></name></expr></argument>)<pos:position pos:line="17" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="54"/></expr_stmt>
	<if pos:line="18" pos:column="9">if <condition pos:line="18" pos:column="12">(<expr><operator pos:line="18" pos:column="13">!<pos:position pos:line="18" pos:column="14"/></operator><name pos:line="18" pos:column="14">r<pos:position pos:line="18" pos:column="15"/></name></expr>)<pos:position pos:line="18" pos:column="16"/></condition><then pos:line="18" pos:column="16"> <block pos:line="18" pos:column="17">{
		<expr_stmt><expr><name pos:line="19" pos:column="17">errno<pos:position pos:line="19" pos:column="22"/></name> <operator pos:line="19" pos:column="23">=<pos:position pos:line="19" pos:column="24"/></operator> <name pos:line="19" pos:column="25">ENOMEM<pos:position pos:line="19" pos:column="31"/></name></expr>;<pos:position pos:line="19" pos:column="32"/></expr_stmt>
		<return pos:line="20" pos:column="17">return <expr><literal type="number" pos:line="20" pos:column="24">0<pos:position pos:line="20" pos:column="25"/></literal></expr>;<pos:position pos:line="20" pos:column="26"/></return>
	}<pos:position pos:line="21" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="23" pos:column="9">memcpy<pos:position pos:line="23" pos:column="15"/></name><argument_list pos:line="23" pos:column="15">(<argument><expr><name><name pos:line="23" pos:column="16">r<pos:position pos:line="23" pos:column="17"/></name><operator pos:line="23" pos:column="17">-&gt;<pos:position pos:line="23" pos:column="22"/></operator><name pos:line="23" pos:column="19">entry<pos:position pos:line="23" pos:column="24"/></name></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="26">origfw<pos:position pos:line="23" pos:column="32"/></name></expr></argument>, <argument><expr><name><name pos:line="23" pos:column="34">origfw<pos:position pos:line="23" pos:column="40"/></name><operator pos:line="23" pos:column="40">-&gt;<pos:position pos:line="23" pos:column="45"/></operator><name pos:line="23" pos:column="42">next_offset<pos:position pos:line="23" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="23" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="55"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="24" pos:column="9">r<pos:position pos:line="24" pos:column="10"/></name><operator pos:line="24" pos:column="10">-&gt;<pos:position pos:line="24" pos:column="15"/></operator><name pos:line="24" pos:column="12">counter_map<pos:position pos:line="24" pos:column="23"/></name><operator pos:line="24" pos:column="23">.<pos:position pos:line="24" pos:column="24"/></operator><name pos:line="24" pos:column="24">maptype<pos:position pos:line="24" pos:column="31"/></name></name> <operator pos:line="24" pos:column="32">=<pos:position pos:line="24" pos:column="33"/></operator> <name pos:line="24" pos:column="34">COUNTER_MAP_NOMAP<pos:position pos:line="24" pos:column="51"/></name></expr>;<pos:position pos:line="24" pos:column="52"/></expr_stmt>
	<if pos:line="25" pos:column="9">if <condition pos:line="25" pos:column="12">(<expr><operator pos:line="25" pos:column="13">!<pos:position pos:line="25" pos:column="14"/></operator><call><name pos:line="25" pos:column="14">iptcc_map_target<pos:position pos:line="25" pos:column="30"/></name><argument_list pos:line="25" pos:column="30">(<argument><expr><operator pos:line="25" pos:column="31">*<pos:position pos:line="25" pos:column="32"/></operator><name pos:line="25" pos:column="32">handle<pos:position pos:line="25" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="40">r<pos:position pos:line="25" pos:column="41"/></name></expr></argument>)<pos:position pos:line="25" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="25" pos:column="43"/></condition><then pos:line="25" pos:column="43"> <block pos:line="25" pos:column="44">{
		<expr_stmt><expr><call><name pos:line="26" pos:column="17">DEBUGP<pos:position pos:line="26" pos:column="23"/></name><argument_list pos:line="26" pos:column="23">(<argument><expr><literal type="string" pos:line="26" pos:column="24">"unable to map target of rule for chain `%s'\n"<pos:position pos:line="26" pos:column="71"/></literal></expr></argument>, <argument><expr><name pos:line="26" pos:column="73">chain<pos:position pos:line="26" pos:column="78"/></name></expr></argument>)<pos:position pos:line="26" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="80"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="27" pos:column="17">free<pos:position pos:line="27" pos:column="21"/></name><argument_list pos:line="27" pos:column="21">(<argument><expr><name pos:line="27" pos:column="22">r<pos:position pos:line="27" pos:column="23"/></name></expr></argument>)<pos:position pos:line="27" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="25"/></expr_stmt>
		<return pos:line="28" pos:column="17">return <expr><literal type="number" pos:line="28" pos:column="24">0<pos:position pos:line="28" pos:column="25"/></literal></expr>;<pos:position pos:line="28" pos:column="26"/></return>
	}<pos:position pos:line="29" pos:column="10"/></block></then> <else pos:line="29" pos:column="11">else <block pos:line="29" pos:column="16">{
		<comment type="block" pos:line="30" pos:column="17">/* iptcc_map_target increment target chain references
		 * since this is a fake rule only used for matching
		 * the chain references count is decremented again. 
		 */</comment>
		<if pos:line="34" pos:column="17">if <condition pos:line="34" pos:column="20">(<expr><name><name pos:line="34" pos:column="21">r<pos:position pos:line="34" pos:column="22"/></name><operator pos:line="34" pos:column="22">-&gt;<pos:position pos:line="34" pos:column="27"/></operator><name pos:line="34" pos:column="24">type<pos:position pos:line="34" pos:column="28"/></name></name> <operator pos:line="34" pos:column="29">==<pos:position pos:line="34" pos:column="31"/></operator> <name pos:line="34" pos:column="32">IPTCC_R_JUMP<pos:position pos:line="34" pos:column="44"/></name>
		    <operator pos:line="35" pos:column="21">&amp;&amp;<pos:position pos:line="35" pos:column="31"/></operator> <name><name pos:line="35" pos:column="24">r<pos:position pos:line="35" pos:column="25"/></name><operator pos:line="35" pos:column="25">-&gt;<pos:position pos:line="35" pos:column="30"/></operator><name pos:line="35" pos:column="27">jump<pos:position pos:line="35" pos:column="31"/></name></name></expr>)<pos:position pos:line="35" pos:column="32"/></condition><then pos:line="35" pos:column="32">
			<block type="pseudo"><expr_stmt><expr><name><name pos:line="36" pos:column="25">r<pos:position pos:line="36" pos:column="26"/></name><operator pos:line="36" pos:column="26">-&gt;<pos:position pos:line="36" pos:column="31"/></operator><name pos:line="36" pos:column="28">jump<pos:position pos:line="36" pos:column="32"/></name><operator pos:line="36" pos:column="32">-&gt;<pos:position pos:line="36" pos:column="37"/></operator><name pos:line="36" pos:column="34">references<pos:position pos:line="36" pos:column="44"/></name></name><operator pos:line="36" pos:column="44">--<pos:position pos:line="36" pos:column="46"/></operator></expr>;<pos:position pos:line="36" pos:column="47"/></expr_stmt></block></then></if>
	}<pos:position pos:line="37" pos:column="10"/></block></else></if>

	<macro><name pos:line="39" pos:column="9">list_for_each_entry<pos:position pos:line="39" pos:column="28"/></name><argument_list pos:line="39" pos:column="28">(<argument pos:line="39" pos:column="29">i<pos:position pos:line="39" pos:column="30"/></argument>, <argument pos:line="39" pos:column="32">&amp;c-&gt;rules<pos:position pos:line="39" pos:column="41"/></argument>, <argument pos:line="39" pos:column="43">list<pos:position pos:line="39" pos:column="47"/></argument>)<pos:position pos:line="39" pos:column="48"/></argument_list></macro> <block pos:line="39" pos:column="49">{
		<decl_stmt><decl><type><name pos:line="40" pos:column="17">unsigned<pos:position pos:line="40" pos:column="25"/></name> <name pos:line="40" pos:column="26">char<pos:position pos:line="40" pos:column="30"/></name> <modifier pos:line="40" pos:column="31">*<pos:position pos:line="40" pos:column="32"/></modifier></type><name pos:line="40" pos:column="32">mask<pos:position pos:line="40" pos:column="36"/></name></decl>;<pos:position pos:line="40" pos:column="37"/></decl_stmt>

		<expr_stmt><expr><name pos:line="42" pos:column="17">mask<pos:position pos:line="42" pos:column="21"/></name> <operator pos:line="42" pos:column="22">=<pos:position pos:line="42" pos:column="23"/></operator> <call><name pos:line="42" pos:column="24">is_same<pos:position pos:line="42" pos:column="31"/></name><argument_list pos:line="42" pos:column="31">(<argument><expr><name><name pos:line="42" pos:column="32">r<pos:position pos:line="42" pos:column="33"/></name><operator pos:line="42" pos:column="33">-&gt;<pos:position pos:line="42" pos:column="38"/></operator><name pos:line="42" pos:column="35">entry<pos:position pos:line="42" pos:column="40"/></name></name></expr></argument>, <argument><expr><name><name pos:line="42" pos:column="42">i<pos:position pos:line="42" pos:column="43"/></name><operator pos:line="42" pos:column="43">-&gt;<pos:position pos:line="42" pos:column="48"/></operator><name pos:line="42" pos:column="45">entry<pos:position pos:line="42" pos:column="50"/></name></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="52">matchmask<pos:position pos:line="42" pos:column="61"/></name></expr></argument>)<pos:position pos:line="42" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="63"/></expr_stmt>
		<if pos:line="43" pos:column="17">if <condition pos:line="43" pos:column="20">(<expr><operator pos:line="43" pos:column="21">!<pos:position pos:line="43" pos:column="22"/></operator><name pos:line="43" pos:column="22">mask<pos:position pos:line="43" pos:column="26"/></name></expr>)<pos:position pos:line="43" pos:column="27"/></condition><then pos:line="43" pos:column="27">
			<block type="pseudo"><continue pos:line="44" pos:column="25">continue;<pos:position pos:line="44" pos:column="34"/></continue></block></then></if>

		<if pos:line="46" pos:column="17">if <condition pos:line="46" pos:column="20">(<expr><operator pos:line="46" pos:column="21">!<pos:position pos:line="46" pos:column="22"/></operator><call><name pos:line="46" pos:column="22">target_same<pos:position pos:line="46" pos:column="33"/></name><argument_list pos:line="46" pos:column="33">(<argument><expr><name pos:line="46" pos:column="34">r<pos:position pos:line="46" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="37">i<pos:position pos:line="46" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="40">mask<pos:position pos:line="46" pos:column="44"/></name></expr></argument>)<pos:position pos:line="46" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="46" pos:column="46"/></condition><then pos:line="46" pos:column="46">
			<block type="pseudo"><continue pos:line="47" pos:column="25">continue;<pos:position pos:line="47" pos:column="34"/></continue></block></then></if>

		<comment type="block" pos:line="49" pos:column="17">/* If we are about to delete the rule that is the
		 * current iterator, move rule iterator back.  next
		 * pointer will then point to real next node */</comment>
		<if pos:line="52" pos:column="17">if <condition pos:line="52" pos:column="20">(<expr><name pos:line="52" pos:column="21">i<pos:position pos:line="52" pos:column="22"/></name> <operator pos:line="52" pos:column="23">==<pos:position pos:line="52" pos:column="25"/></operator> <name><operator pos:line="52" pos:column="26">(<pos:position pos:line="52" pos:column="27"/></operator><operator pos:line="52" pos:column="27">*<pos:position pos:line="52" pos:column="28"/></operator><name pos:line="52" pos:column="28">handle<pos:position pos:line="52" pos:column="34"/></name><operator pos:line="52" pos:column="34">)<pos:position pos:line="52" pos:column="35"/></operator><operator pos:line="52" pos:column="35">-&gt;<pos:position pos:line="52" pos:column="40"/></operator><name pos:line="52" pos:column="37">rule_iterator_cur<pos:position pos:line="52" pos:column="54"/></name></name></expr>)<pos:position pos:line="52" pos:column="55"/></condition><then pos:line="52" pos:column="55"> <block pos:line="52" pos:column="56">{
			<expr_stmt><expr><name><operator pos:line="53" pos:column="25">(<pos:position pos:line="53" pos:column="26"/></operator><operator pos:line="53" pos:column="26">*<pos:position pos:line="53" pos:column="27"/></operator><name pos:line="53" pos:column="27">handle<pos:position pos:line="53" pos:column="33"/></name><operator pos:line="53" pos:column="33">)<pos:position pos:line="53" pos:column="34"/></operator><operator pos:line="53" pos:column="34">-&gt;<pos:position pos:line="53" pos:column="39"/></operator><name pos:line="53" pos:column="36">rule_iterator_cur<pos:position pos:line="53" pos:column="53"/></name></name> <operator pos:line="53" pos:column="54">=<pos:position pos:line="53" pos:column="55"/></operator> 
				<call><name pos:line="54" pos:column="33">list_entry<pos:position pos:line="54" pos:column="43"/></name><argument_list pos:line="54" pos:column="43">(<argument><expr><name><operator pos:line="54" pos:column="44">(<pos:position pos:line="54" pos:column="45"/></operator><operator pos:line="54" pos:column="45">*<pos:position pos:line="54" pos:column="46"/></operator><name pos:line="54" pos:column="46">handle<pos:position pos:line="54" pos:column="52"/></name><operator pos:line="54" pos:column="52">)<pos:position pos:line="54" pos:column="53"/></operator><operator pos:line="54" pos:column="53">-&gt;<pos:position pos:line="54" pos:column="58"/></operator><name><name pos:line="54" pos:column="55">rule_iterator_cur<pos:position pos:line="54" pos:column="72"/></name><operator pos:line="54" pos:column="72">-&gt;<pos:position pos:line="54" pos:column="77"/></operator><name pos:line="54" pos:column="74">list<pos:position pos:line="54" pos:column="78"/></name><operator pos:line="54" pos:column="78">.<pos:position pos:line="54" pos:column="79"/></operator><name pos:line="54" pos:column="79">prev<pos:position pos:line="54" pos:column="83"/></name></name></name></expr></argument>,
					   <argument><expr pos:line="55" pos:column="44">struct <name pos:line="55" pos:column="51">rule_head<pos:position pos:line="55" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="55" pos:column="62">list<pos:position pos:line="55" pos:column="66"/></name></expr></argument>)<pos:position pos:line="55" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="68"/></expr_stmt>
		}<pos:position pos:line="56" pos:column="18"/></block></then></if>

		<expr_stmt><expr><name><name pos:line="58" pos:column="17">c<pos:position pos:line="58" pos:column="18"/></name><operator pos:line="58" pos:column="18">-&gt;<pos:position pos:line="58" pos:column="23"/></operator><name pos:line="58" pos:column="20">num_rules<pos:position pos:line="58" pos:column="29"/></name></name><operator pos:line="58" pos:column="29">--<pos:position pos:line="58" pos:column="31"/></operator></expr>;<pos:position pos:line="58" pos:column="32"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="59" pos:column="17">iptcc_delete_rule<pos:position pos:line="59" pos:column="34"/></name><argument_list pos:line="59" pos:column="34">(<argument><expr><name pos:line="59" pos:column="35">i<pos:position pos:line="59" pos:column="36"/></name></expr></argument>)<pos:position pos:line="59" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="38"/></expr_stmt>

		<expr_stmt><expr><call><name pos:line="61" pos:column="17">set_changed<pos:position pos:line="61" pos:column="28"/></name><argument_list pos:line="61" pos:column="28">(<argument><expr><operator pos:line="61" pos:column="29">*<pos:position pos:line="61" pos:column="30"/></operator><name pos:line="61" pos:column="30">handle<pos:position pos:line="61" pos:column="36"/></name></expr></argument>)<pos:position pos:line="61" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="38"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="62" pos:column="17">free<pos:position pos:line="62" pos:column="21"/></name><argument_list pos:line="62" pos:column="21">(<argument><expr><name pos:line="62" pos:column="22">r<pos:position pos:line="62" pos:column="23"/></name></expr></argument>)<pos:position pos:line="62" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="25"/></expr_stmt>
		<return pos:line="63" pos:column="17">return <expr><literal type="number" pos:line="63" pos:column="24">1<pos:position pos:line="63" pos:column="25"/></literal></expr>;<pos:position pos:line="63" pos:column="26"/></return>
	}<pos:position pos:line="64" pos:column="10"/></block>

	<expr_stmt><expr><call><name pos:line="66" pos:column="9">free<pos:position pos:line="66" pos:column="13"/></name><argument_list pos:line="66" pos:column="13">(<argument><expr><name pos:line="66" pos:column="14">r<pos:position pos:line="66" pos:column="15"/></name></expr></argument>)<pos:position pos:line="66" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="17"/></expr_stmt>
	<expr_stmt><expr><name pos:line="67" pos:column="9">errno<pos:position pos:line="67" pos:column="14"/></name> <operator pos:line="67" pos:column="15">=<pos:position pos:line="67" pos:column="16"/></operator> <name pos:line="67" pos:column="17">ENOENT<pos:position pos:line="67" pos:column="23"/></name></expr>;<pos:position pos:line="67" pos:column="24"/></expr_stmt>
	<return pos:line="68" pos:column="9">return <expr><literal type="number" pos:line="68" pos:column="16">0<pos:position pos:line="68" pos:column="17"/></literal></expr>;<pos:position pos:line="68" pos:column="18"/></return>
}<pos:position pos:line="69" pos:column="2"/></block></function></unit>
