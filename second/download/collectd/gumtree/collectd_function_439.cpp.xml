<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_function_439.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">cmd_status_t<pos:position pos:line="1" pos:column="13"/></name></type> <name pos:line="1" pos:column="14">cmd_parse_flush<pos:position pos:line="1" pos:column="29"/></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name pos:line="1" pos:column="30">size_t<pos:position pos:line="1" pos:column="36"/></name></type> <name pos:line="1" pos:column="37">argc<pos:position pos:line="1" pos:column="41"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="43">char<pos:position pos:line="1" pos:column="47"/></name> <modifier pos:line="1" pos:column="48">*<pos:position pos:line="1" pos:column="49"/></modifier><modifier pos:line="1" pos:column="49">*<pos:position pos:line="1" pos:column="50"/></modifier></type><name pos:line="1" pos:column="50">argv<pos:position pos:line="1" pos:column="54"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="56">cmd_flush_t<pos:position pos:line="1" pos:column="67"/></name> <modifier pos:line="1" pos:column="68">*<pos:position pos:line="1" pos:column="69"/></modifier></type><name pos:line="1" pos:column="69">ret_flush<pos:position pos:line="1" pos:column="78"/></name></decl></parameter>,
                             <parameter><decl><type><specifier pos:line="2" pos:column="30">const<pos:position pos:line="2" pos:column="35"/></specifier> <name pos:line="2" pos:column="36">cmd_options_t<pos:position pos:line="2" pos:column="49"/></name> <modifier pos:line="2" pos:column="50">*<pos:position pos:line="2" pos:column="51"/></modifier></type><name pos:line="2" pos:column="51">opts<pos:position pos:line="2" pos:column="55"/></name></decl></parameter>,
                             <parameter><decl><type><name pos:line="3" pos:column="30">cmd_error_handler_t<pos:position pos:line="3" pos:column="49"/></name> <modifier pos:line="3" pos:column="50">*<pos:position pos:line="3" pos:column="51"/></modifier></type><name pos:line="3" pos:column="51">err<pos:position pos:line="3" pos:column="54"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="55"/></parameter_list> <block pos:line="3" pos:column="56">{

  <if pos:line="5" pos:column="3">if <condition pos:line="5" pos:column="6">(<expr><operator pos:line="5" pos:column="7">(<pos:position pos:line="5" pos:column="8"/></operator><name pos:line="5" pos:column="8">ret_flush<pos:position pos:line="5" pos:column="17"/></name> <operator pos:line="5" pos:column="18">==<pos:position pos:line="5" pos:column="20"/></operator> <name pos:line="5" pos:column="21">NULL<pos:position pos:line="5" pos:column="25"/></name><operator pos:line="5" pos:column="25">)<pos:position pos:line="5" pos:column="26"/></operator> <operator pos:line="5" pos:column="27">||<pos:position pos:line="5" pos:column="29"/></operator> <operator pos:line="5" pos:column="30">(<pos:position pos:line="5" pos:column="31"/></operator><name pos:line="5" pos:column="31">opts<pos:position pos:line="5" pos:column="35"/></name> <operator pos:line="5" pos:column="36">==<pos:position pos:line="5" pos:column="38"/></operator> <name pos:line="5" pos:column="39">NULL<pos:position pos:line="5" pos:column="43"/></name><operator pos:line="5" pos:column="43">)<pos:position pos:line="5" pos:column="44"/></operator></expr>)<pos:position pos:line="5" pos:column="45"/></condition><then pos:line="5" pos:column="45"> <block pos:line="5" pos:column="46">{
    <expr_stmt><expr><name pos:line="6" pos:column="5">errno<pos:position pos:line="6" pos:column="10"/></name> <operator pos:line="6" pos:column="11">=<pos:position pos:line="6" pos:column="12"/></operator> <name pos:line="6" pos:column="13">EINVAL<pos:position pos:line="6" pos:column="19"/></name></expr>;<pos:position pos:line="6" pos:column="20"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="7" pos:column="5">cmd_error<pos:position pos:line="7" pos:column="14"/></name><argument_list pos:line="7" pos:column="14">(<argument><expr><name pos:line="7" pos:column="15">CMD_ERROR<pos:position pos:line="7" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="26">err<pos:position pos:line="7" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="7" pos:column="31">"Invalid arguments to cmd_parse_flush."<pos:position pos:line="7" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="72"/></expr_stmt>
    <return pos:line="8" pos:column="5">return <expr><operator pos:line="8" pos:column="12">(<pos:position pos:line="8" pos:column="13"/></operator><name pos:line="8" pos:column="13">CMD_ERROR<pos:position pos:line="8" pos:column="22"/></name><operator pos:line="8" pos:column="22">)<pos:position pos:line="8" pos:column="23"/></operator></expr>;<pos:position pos:line="8" pos:column="24"/></return>
  }<pos:position pos:line="9" pos:column="4"/></block></then></if>

  <for pos:line="11" pos:column="3">for <control pos:line="11" pos:column="7">(<init><decl><type><name pos:line="11" pos:column="8">size_t<pos:position pos:line="11" pos:column="14"/></name></type> <name pos:line="11" pos:column="15">i<pos:position pos:line="11" pos:column="16"/></name> <init pos:line="11" pos:column="17">= <expr><literal type="number" pos:line="11" pos:column="19">0<pos:position pos:line="11" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="11" pos:column="21"/></init> <condition><expr><name pos:line="11" pos:column="22">i<pos:position pos:line="11" pos:column="23"/></name> <operator pos:line="11" pos:column="24">&lt;<pos:position pos:line="11" pos:column="28"/></operator> <name pos:line="11" pos:column="26">argc<pos:position pos:line="11" pos:column="30"/></name></expr>;<pos:position pos:line="11" pos:column="31"/></condition> <incr><expr><name pos:line="11" pos:column="32">i<pos:position pos:line="11" pos:column="33"/></name><operator pos:line="11" pos:column="33">++<pos:position pos:line="11" pos:column="35"/></operator></expr></incr>)<pos:position pos:line="11" pos:column="36"/></control> <block pos:line="11" pos:column="37">{
    <decl_stmt><decl><type><name pos:line="12" pos:column="5">char<pos:position pos:line="12" pos:column="9"/></name> <modifier pos:line="12" pos:column="10">*<pos:position pos:line="12" pos:column="11"/></modifier></type><name pos:line="12" pos:column="11">opt_key<pos:position pos:line="12" pos:column="18"/></name></decl>;<pos:position pos:line="12" pos:column="19"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="13" pos:column="5">char<pos:position pos:line="13" pos:column="9"/></name> <modifier pos:line="13" pos:column="10">*<pos:position pos:line="13" pos:column="11"/></modifier></type><name pos:line="13" pos:column="11">opt_value<pos:position pos:line="13" pos:column="20"/></name></decl>;<pos:position pos:line="13" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="14" pos:column="5">int<pos:position pos:line="14" pos:column="8"/></name></type> <name pos:line="14" pos:column="9">status<pos:position pos:line="14" pos:column="15"/></name></decl>;<pos:position pos:line="14" pos:column="16"/></decl_stmt>

    <expr_stmt><expr><name pos:line="16" pos:column="5">opt_key<pos:position pos:line="16" pos:column="12"/></name> <operator pos:line="16" pos:column="13">=<pos:position pos:line="16" pos:column="14"/></operator> <name pos:line="16" pos:column="15">NULL<pos:position pos:line="16" pos:column="19"/></name></expr>;<pos:position pos:line="16" pos:column="20"/></expr_stmt>
    <expr_stmt><expr><name pos:line="17" pos:column="5">opt_value<pos:position pos:line="17" pos:column="14"/></name> <operator pos:line="17" pos:column="15">=<pos:position pos:line="17" pos:column="16"/></operator> <name pos:line="17" pos:column="17">NULL<pos:position pos:line="17" pos:column="21"/></name></expr>;<pos:position pos:line="17" pos:column="22"/></expr_stmt>
    <expr_stmt><expr><name pos:line="18" pos:column="5">status<pos:position pos:line="18" pos:column="11"/></name> <operator pos:line="18" pos:column="12">=<pos:position pos:line="18" pos:column="13"/></operator> <call><name pos:line="18" pos:column="14">cmd_parse_option<pos:position pos:line="18" pos:column="30"/></name><argument_list pos:line="18" pos:column="30">(<argument><expr><name><name pos:line="18" pos:column="31">argv<pos:position pos:line="18" pos:column="35"/></name><index pos:line="18" pos:column="35">[<expr><name pos:line="18" pos:column="36">i<pos:position pos:line="18" pos:column="37"/></name></expr>]<pos:position pos:line="18" pos:column="38"/></index></name></expr></argument>, <argument><expr><operator pos:line="18" pos:column="40">&amp;<pos:position pos:line="18" pos:column="45"/></operator><name pos:line="18" pos:column="41">opt_key<pos:position pos:line="18" pos:column="48"/></name></expr></argument>, <argument><expr><operator pos:line="18" pos:column="50">&amp;<pos:position pos:line="18" pos:column="55"/></operator><name pos:line="18" pos:column="51">opt_value<pos:position pos:line="18" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="62">err<pos:position pos:line="18" pos:column="65"/></name></expr></argument>)<pos:position pos:line="18" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="67"/></expr_stmt>
    <if pos:line="19" pos:column="5">if <condition pos:line="19" pos:column="8">(<expr><name pos:line="19" pos:column="9">status<pos:position pos:line="19" pos:column="15"/></name> <operator pos:line="19" pos:column="16">!=<pos:position pos:line="19" pos:column="18"/></operator> <literal type="number" pos:line="19" pos:column="19">0<pos:position pos:line="19" pos:column="20"/></literal></expr>)<pos:position pos:line="19" pos:column="21"/></condition><then pos:line="19" pos:column="21"> <block pos:line="19" pos:column="22">{
      <if pos:line="20" pos:column="7">if <condition pos:line="20" pos:column="10">(<expr><name pos:line="20" pos:column="11">status<pos:position pos:line="20" pos:column="17"/></name> <operator pos:line="20" pos:column="18">==<pos:position pos:line="20" pos:column="20"/></operator> <name pos:line="20" pos:column="21">CMD_NO_OPTION<pos:position pos:line="20" pos:column="34"/></name></expr>)<pos:position pos:line="20" pos:column="35"/></condition><then pos:line="20" pos:column="35">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="21" pos:column="9">cmd_error<pos:position pos:line="21" pos:column="18"/></name><argument_list pos:line="21" pos:column="18">(<argument><expr><name pos:line="21" pos:column="19">CMD_PARSE_ERROR<pos:position pos:line="21" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="36">err<pos:position pos:line="21" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="21" pos:column="41">"Invalid option string `%s'."<pos:position pos:line="21" pos:column="70"/></literal></expr></argument>, <argument><expr><name><name pos:line="21" pos:column="72">argv<pos:position pos:line="21" pos:column="76"/></name><index pos:line="21" pos:column="76">[<expr><name pos:line="21" pos:column="77">i<pos:position pos:line="21" pos:column="78"/></name></expr>]<pos:position pos:line="21" pos:column="79"/></index></name></expr></argument>)<pos:position pos:line="21" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="81"/></expr_stmt></block></then></if>
      <expr_stmt><expr><call><name pos:line="22" pos:column="7">cmd_destroy_flush<pos:position pos:line="22" pos:column="24"/></name><argument_list pos:line="22" pos:column="24">(<argument><expr><name pos:line="22" pos:column="25">ret_flush<pos:position pos:line="22" pos:column="34"/></name></expr></argument>)<pos:position pos:line="22" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="36"/></expr_stmt>
      <return pos:line="23" pos:column="7">return <expr><operator pos:line="23" pos:column="14">(<pos:position pos:line="23" pos:column="15"/></operator><name pos:line="23" pos:column="15">CMD_PARSE_ERROR<pos:position pos:line="23" pos:column="30"/></name><operator pos:line="23" pos:column="30">)<pos:position pos:line="23" pos:column="31"/></operator></expr>;<pos:position pos:line="23" pos:column="32"/></return>
    }<pos:position pos:line="24" pos:column="6"/></block></then></if>

    <if pos:line="26" pos:column="5">if <condition pos:line="26" pos:column="8">(<expr><call><name pos:line="26" pos:column="9">strcasecmp<pos:position pos:line="26" pos:column="19"/></name><argument_list pos:line="26" pos:column="19">(<argument><expr><literal type="string" pos:line="26" pos:column="20">"plugin"<pos:position pos:line="26" pos:column="28"/></literal></expr></argument>, <argument><expr><name pos:line="26" pos:column="30">opt_key<pos:position pos:line="26" pos:column="37"/></name></expr></argument>)<pos:position pos:line="26" pos:column="38"/></argument_list></call> <operator pos:line="26" pos:column="39">==<pos:position pos:line="26" pos:column="41"/></operator> <literal type="number" pos:line="26" pos:column="42">0<pos:position pos:line="26" pos:column="43"/></literal></expr>)<pos:position pos:line="26" pos:column="44"/></condition><then pos:line="26" pos:column="44"> <block pos:line="26" pos:column="45">{
      <expr_stmt><expr><call><name pos:line="27" pos:column="7">strarray_add<pos:position pos:line="27" pos:column="19"/></name><argument_list pos:line="27" pos:column="19">(<argument><expr><operator pos:line="27" pos:column="20">&amp;<pos:position pos:line="27" pos:column="25"/></operator><name><name pos:line="27" pos:column="21">ret_flush<pos:position pos:line="27" pos:column="30"/></name><operator pos:line="27" pos:column="30">-&gt;<pos:position pos:line="27" pos:column="35"/></operator><name pos:line="27" pos:column="32">plugins<pos:position pos:line="27" pos:column="39"/></name></name></expr></argument>, <argument><expr><operator pos:line="27" pos:column="41">&amp;<pos:position pos:line="27" pos:column="46"/></operator><name><name pos:line="27" pos:column="42">ret_flush<pos:position pos:line="27" pos:column="51"/></name><operator pos:line="27" pos:column="51">-&gt;<pos:position pos:line="27" pos:column="56"/></operator><name pos:line="27" pos:column="53">plugins_num<pos:position pos:line="27" pos:column="64"/></name></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="66">opt_value<pos:position pos:line="27" pos:column="75"/></name></expr></argument>)<pos:position pos:line="27" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="77"/></expr_stmt>
    }<pos:position pos:line="28" pos:column="6"/></block></then> <elseif pos:line="28" pos:column="7">else <if pos:line="28" pos:column="12">if <condition pos:line="28" pos:column="15">(<expr><call><name pos:line="28" pos:column="16">strcasecmp<pos:position pos:line="28" pos:column="26"/></name><argument_list pos:line="28" pos:column="26">(<argument><expr><literal type="string" pos:line="28" pos:column="27">"identifier"<pos:position pos:line="28" pos:column="39"/></literal></expr></argument>, <argument><expr><name pos:line="28" pos:column="41">opt_key<pos:position pos:line="28" pos:column="48"/></name></expr></argument>)<pos:position pos:line="28" pos:column="49"/></argument_list></call> <operator pos:line="28" pos:column="50">==<pos:position pos:line="28" pos:column="52"/></operator> <literal type="number" pos:line="28" pos:column="53">0<pos:position pos:line="28" pos:column="54"/></literal></expr>)<pos:position pos:line="28" pos:column="55"/></condition><then pos:line="28" pos:column="55"> <block pos:line="28" pos:column="56">{
      <decl_stmt><decl><type><name pos:line="29" pos:column="7">identifier_t<pos:position pos:line="29" pos:column="19"/></name> <modifier pos:line="29" pos:column="20">*<pos:position pos:line="29" pos:column="21"/></modifier></type><name pos:line="29" pos:column="21">id<pos:position pos:line="29" pos:column="23"/></name> <init pos:line="29" pos:column="24">=
          <expr><call><name pos:line="30" pos:column="11">realloc<pos:position pos:line="30" pos:column="18"/></name><argument_list pos:line="30" pos:column="18">(<argument><expr><name><name pos:line="30" pos:column="19">ret_flush<pos:position pos:line="30" pos:column="28"/></name><operator pos:line="30" pos:column="28">-&gt;<pos:position pos:line="30" pos:column="33"/></operator><name pos:line="30" pos:column="30">identifiers<pos:position pos:line="30" pos:column="41"/></name></name></expr></argument>,
                  <argument><expr><operator pos:line="31" pos:column="19">(<pos:position pos:line="31" pos:column="20"/></operator><name><name pos:line="31" pos:column="20">ret_flush<pos:position pos:line="31" pos:column="29"/></name><operator pos:line="31" pos:column="29">-&gt;<pos:position pos:line="31" pos:column="34"/></operator><name pos:line="31" pos:column="31">identifiers_num<pos:position pos:line="31" pos:column="46"/></name></name> <operator pos:line="31" pos:column="47">+<pos:position pos:line="31" pos:column="48"/></operator> <literal type="number" pos:line="31" pos:column="49">1<pos:position pos:line="31" pos:column="50"/></literal><operator pos:line="31" pos:column="50">)<pos:position pos:line="31" pos:column="51"/></operator> <operator pos:line="31" pos:column="52">*<pos:position pos:line="31" pos:column="53"/></operator> <sizeof pos:line="31" pos:column="54">sizeof<argument_list pos:line="31" pos:column="60">(<argument><expr><operator pos:line="31" pos:column="61">*<pos:position pos:line="31" pos:column="62"/></operator><name pos:line="31" pos:column="62">id<pos:position pos:line="31" pos:column="64"/></name></expr></argument>)<pos:position pos:line="31" pos:column="65"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="31" pos:column="66"/></argument_list></call></expr></init></decl>;<pos:position pos:line="31" pos:column="67"/></decl_stmt>
      <if pos:line="32" pos:column="7">if <condition pos:line="32" pos:column="10">(<expr><name pos:line="32" pos:column="11">id<pos:position pos:line="32" pos:column="13"/></name> <operator pos:line="32" pos:column="14">==<pos:position pos:line="32" pos:column="16"/></operator> <name pos:line="32" pos:column="17">NULL<pos:position pos:line="32" pos:column="21"/></name></expr>)<pos:position pos:line="32" pos:column="22"/></condition><then pos:line="32" pos:column="22"> <block pos:line="32" pos:column="23">{
        <expr_stmt><expr><call><name pos:line="33" pos:column="9">cmd_error<pos:position pos:line="33" pos:column="18"/></name><argument_list pos:line="33" pos:column="18">(<argument><expr><name pos:line="33" pos:column="19">CMD_ERROR<pos:position pos:line="33" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="30">err<pos:position pos:line="33" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="33" pos:column="35">"realloc failed."<pos:position pos:line="33" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="54"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="34" pos:column="9">cmd_destroy_flush<pos:position pos:line="34" pos:column="26"/></name><argument_list pos:line="34" pos:column="26">(<argument><expr><name pos:line="34" pos:column="27">ret_flush<pos:position pos:line="34" pos:column="36"/></name></expr></argument>)<pos:position pos:line="34" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="38"/></expr_stmt>
        <return pos:line="35" pos:column="9">return <expr><operator pos:line="35" pos:column="16">(<pos:position pos:line="35" pos:column="17"/></operator><name pos:line="35" pos:column="17">CMD_ERROR<pos:position pos:line="35" pos:column="26"/></name><operator pos:line="35" pos:column="26">)<pos:position pos:line="35" pos:column="27"/></operator></expr>;<pos:position pos:line="35" pos:column="28"/></return>
      }<pos:position pos:line="36" pos:column="8"/></block></then></if>

      <expr_stmt><expr><name><name pos:line="38" pos:column="7">ret_flush<pos:position pos:line="38" pos:column="16"/></name><operator pos:line="38" pos:column="16">-&gt;<pos:position pos:line="38" pos:column="21"/></operator><name pos:line="38" pos:column="18">identifiers<pos:position pos:line="38" pos:column="29"/></name></name> <operator pos:line="38" pos:column="30">=<pos:position pos:line="38" pos:column="31"/></operator> <name pos:line="38" pos:column="32">id<pos:position pos:line="38" pos:column="34"/></name></expr>;<pos:position pos:line="38" pos:column="35"/></expr_stmt>
      <expr_stmt><expr><name pos:line="39" pos:column="7">id<pos:position pos:line="39" pos:column="9"/></name> <operator pos:line="39" pos:column="10">=<pos:position pos:line="39" pos:column="11"/></operator> <name><name pos:line="39" pos:column="12">ret_flush<pos:position pos:line="39" pos:column="21"/></name><operator pos:line="39" pos:column="21">-&gt;<pos:position pos:line="39" pos:column="26"/></operator><name pos:line="39" pos:column="23">identifiers<pos:position pos:line="39" pos:column="34"/></name></name> <operator pos:line="39" pos:column="35">+<pos:position pos:line="39" pos:column="36"/></operator> <name><name pos:line="39" pos:column="37">ret_flush<pos:position pos:line="39" pos:column="46"/></name><operator pos:line="39" pos:column="46">-&gt;<pos:position pos:line="39" pos:column="51"/></operator><name pos:line="39" pos:column="48">identifiers_num<pos:position pos:line="39" pos:column="63"/></name></name></expr>;<pos:position pos:line="39" pos:column="64"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="40" pos:column="7">ret_flush<pos:position pos:line="40" pos:column="16"/></name><operator pos:line="40" pos:column="16">-&gt;<pos:position pos:line="40" pos:column="21"/></operator><name pos:line="40" pos:column="18">identifiers_num<pos:position pos:line="40" pos:column="33"/></name></name><operator pos:line="40" pos:column="33">++<pos:position pos:line="40" pos:column="35"/></operator></expr>;<pos:position pos:line="40" pos:column="36"/></expr_stmt>
      <if pos:line="41" pos:column="7">if <condition pos:line="41" pos:column="10">(<expr><call><name pos:line="41" pos:column="11">parse_identifier<pos:position pos:line="41" pos:column="27"/></name><argument_list pos:line="41" pos:column="27">(<argument><expr><name pos:line="41" pos:column="28">opt_value<pos:position pos:line="41" pos:column="37"/></name></expr></argument>, <argument><expr><operator pos:line="41" pos:column="39">&amp;<pos:position pos:line="41" pos:column="44"/></operator><name><name pos:line="41" pos:column="40">id<pos:position pos:line="41" pos:column="42"/></name><operator pos:line="41" pos:column="42">-&gt;<pos:position pos:line="41" pos:column="47"/></operator><name pos:line="41" pos:column="44">host<pos:position pos:line="41" pos:column="48"/></name></name></expr></argument>, <argument><expr><operator pos:line="41" pos:column="50">&amp;<pos:position pos:line="41" pos:column="55"/></operator><name><name pos:line="41" pos:column="51">id<pos:position pos:line="41" pos:column="53"/></name><operator pos:line="41" pos:column="53">-&gt;<pos:position pos:line="41" pos:column="58"/></operator><name pos:line="41" pos:column="55">plugin<pos:position pos:line="41" pos:column="61"/></name></name></expr></argument>,
                           <argument><expr><operator pos:line="42" pos:column="28">&amp;<pos:position pos:line="42" pos:column="33"/></operator><name><name pos:line="42" pos:column="29">id<pos:position pos:line="42" pos:column="31"/></name><operator pos:line="42" pos:column="31">-&gt;<pos:position pos:line="42" pos:column="36"/></operator><name pos:line="42" pos:column="33">plugin_instance<pos:position pos:line="42" pos:column="48"/></name></name></expr></argument>, <argument><expr><operator pos:line="42" pos:column="50">&amp;<pos:position pos:line="42" pos:column="55"/></operator><name><name pos:line="42" pos:column="51">id<pos:position pos:line="42" pos:column="53"/></name><operator pos:line="42" pos:column="53">-&gt;<pos:position pos:line="42" pos:column="58"/></operator><name pos:line="42" pos:column="55">type<pos:position pos:line="42" pos:column="59"/></name></name></expr></argument>, <argument><expr><operator pos:line="42" pos:column="61">&amp;<pos:position pos:line="42" pos:column="66"/></operator><name><name pos:line="42" pos:column="62">id<pos:position pos:line="42" pos:column="64"/></name><operator pos:line="42" pos:column="64">-&gt;<pos:position pos:line="42" pos:column="69"/></operator><name pos:line="42" pos:column="66">type_instance<pos:position pos:line="42" pos:column="79"/></name></name></expr></argument>,
                           <argument><expr><name><name pos:line="43" pos:column="28">opts<pos:position pos:line="43" pos:column="32"/></name><operator pos:line="43" pos:column="32">-&gt;<pos:position pos:line="43" pos:column="37"/></operator><name pos:line="43" pos:column="34">identifier_default_host<pos:position pos:line="43" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="43" pos:column="58"/></argument_list></call> <operator pos:line="43" pos:column="59">!=<pos:position pos:line="43" pos:column="61"/></operator> <literal type="number" pos:line="43" pos:column="62">0<pos:position pos:line="43" pos:column="63"/></literal></expr>)<pos:position pos:line="43" pos:column="64"/></condition><then pos:line="43" pos:column="64"> <block pos:line="43" pos:column="65">{
        <expr_stmt><expr><call><name pos:line="44" pos:column="9">cmd_error<pos:position pos:line="44" pos:column="18"/></name><argument_list pos:line="44" pos:column="18">(<argument><expr><name pos:line="44" pos:column="19">CMD_PARSE_ERROR<pos:position pos:line="44" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="36">err<pos:position pos:line="44" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="44" pos:column="41">"Invalid identifier `%s'."<pos:position pos:line="44" pos:column="67"/></literal></expr></argument>, <argument><expr><name pos:line="44" pos:column="69">opt_value<pos:position pos:line="44" pos:column="78"/></name></expr></argument>)<pos:position pos:line="44" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="80"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="45" pos:column="9">cmd_destroy_flush<pos:position pos:line="45" pos:column="26"/></name><argument_list pos:line="45" pos:column="26">(<argument><expr><name pos:line="45" pos:column="27">ret_flush<pos:position pos:line="45" pos:column="36"/></name></expr></argument>)<pos:position pos:line="45" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="38"/></expr_stmt>
        <return pos:line="46" pos:column="9">return <expr><operator pos:line="46" pos:column="16">(<pos:position pos:line="46" pos:column="17"/></operator><name pos:line="46" pos:column="17">CMD_PARSE_ERROR<pos:position pos:line="46" pos:column="32"/></name><operator pos:line="46" pos:column="32">)<pos:position pos:line="46" pos:column="33"/></operator></expr>;<pos:position pos:line="46" pos:column="34"/></return>
      }<pos:position pos:line="47" pos:column="8"/></block></then></if>
    }<pos:position pos:line="48" pos:column="6"/></block></then></if></elseif> <elseif pos:line="48" pos:column="7">else <if pos:line="48" pos:column="12">if <condition pos:line="48" pos:column="15">(<expr><call><name pos:line="48" pos:column="16">strcasecmp<pos:position pos:line="48" pos:column="26"/></name><argument_list pos:line="48" pos:column="26">(<argument><expr><literal type="string" pos:line="48" pos:column="27">"timeout"<pos:position pos:line="48" pos:column="36"/></literal></expr></argument>, <argument><expr><name pos:line="48" pos:column="38">opt_key<pos:position pos:line="48" pos:column="45"/></name></expr></argument>)<pos:position pos:line="48" pos:column="46"/></argument_list></call> <operator pos:line="48" pos:column="47">==<pos:position pos:line="48" pos:column="49"/></operator> <literal type="number" pos:line="48" pos:column="50">0<pos:position pos:line="48" pos:column="51"/></literal></expr>)<pos:position pos:line="48" pos:column="52"/></condition><then pos:line="48" pos:column="52"> <block pos:line="48" pos:column="53">{
      <decl_stmt><decl><type><name pos:line="49" pos:column="7">char<pos:position pos:line="49" pos:column="11"/></name> <modifier pos:line="49" pos:column="12">*<pos:position pos:line="49" pos:column="13"/></modifier></type><name pos:line="49" pos:column="13">endptr<pos:position pos:line="49" pos:column="19"/></name></decl>;<pos:position pos:line="49" pos:column="20"/></decl_stmt>

      <expr_stmt><expr><name pos:line="51" pos:column="7">errno<pos:position pos:line="51" pos:column="12"/></name> <operator pos:line="51" pos:column="13">=<pos:position pos:line="51" pos:column="14"/></operator> <literal type="number" pos:line="51" pos:column="15">0<pos:position pos:line="51" pos:column="16"/></literal></expr>;<pos:position pos:line="51" pos:column="17"/></expr_stmt>
      <expr_stmt><expr><name pos:line="52" pos:column="7">endptr<pos:position pos:line="52" pos:column="13"/></name> <operator pos:line="52" pos:column="14">=<pos:position pos:line="52" pos:column="15"/></operator> <name pos:line="52" pos:column="16">NULL<pos:position pos:line="52" pos:column="20"/></name></expr>;<pos:position pos:line="52" pos:column="21"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="53" pos:column="7">ret_flush<pos:position pos:line="53" pos:column="16"/></name><operator pos:line="53" pos:column="16">-&gt;<pos:position pos:line="53" pos:column="21"/></operator><name pos:line="53" pos:column="18">timeout<pos:position pos:line="53" pos:column="25"/></name></name> <operator pos:line="53" pos:column="26">=<pos:position pos:line="53" pos:column="27"/></operator> <call><name pos:line="53" pos:column="28">strtod<pos:position pos:line="53" pos:column="34"/></name><argument_list pos:line="53" pos:column="34">(<argument><expr><name pos:line="53" pos:column="35">opt_value<pos:position pos:line="53" pos:column="44"/></name></expr></argument>, <argument><expr><operator pos:line="53" pos:column="46">&amp;<pos:position pos:line="53" pos:column="51"/></operator><name pos:line="53" pos:column="47">endptr<pos:position pos:line="53" pos:column="53"/></name></expr></argument>)<pos:position pos:line="53" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="55"/></expr_stmt>

      <if pos:line="55" pos:column="7">if <condition pos:line="55" pos:column="10">(<expr><operator pos:line="55" pos:column="11">(<pos:position pos:line="55" pos:column="12"/></operator><name pos:line="55" pos:column="12">endptr<pos:position pos:line="55" pos:column="18"/></name> <operator pos:line="55" pos:column="19">==<pos:position pos:line="55" pos:column="21"/></operator> <name pos:line="55" pos:column="22">opt_value<pos:position pos:line="55" pos:column="31"/></name><operator pos:line="55" pos:column="31">)<pos:position pos:line="55" pos:column="32"/></operator> <operator pos:line="55" pos:column="33">||<pos:position pos:line="55" pos:column="35"/></operator> <operator pos:line="55" pos:column="36">(<pos:position pos:line="55" pos:column="37"/></operator><name pos:line="55" pos:column="37">errno<pos:position pos:line="55" pos:column="42"/></name> <operator pos:line="55" pos:column="43">!=<pos:position pos:line="55" pos:column="45"/></operator> <literal type="number" pos:line="55" pos:column="46">0<pos:position pos:line="55" pos:column="47"/></literal><operator pos:line="55" pos:column="47">)<pos:position pos:line="55" pos:column="48"/></operator> <operator pos:line="55" pos:column="49">||<pos:position pos:line="55" pos:column="51"/></operator>
          <operator pos:line="56" pos:column="11">(<pos:position pos:line="56" pos:column="12"/></operator><operator pos:line="56" pos:column="12">!<pos:position pos:line="56" pos:column="13"/></operator><call><name pos:line="56" pos:column="13">isfinite<pos:position pos:line="56" pos:column="21"/></name><argument_list pos:line="56" pos:column="21">(<argument><expr><name><name pos:line="56" pos:column="22">ret_flush<pos:position pos:line="56" pos:column="31"/></name><operator pos:line="56" pos:column="31">-&gt;<pos:position pos:line="56" pos:column="36"/></operator><name pos:line="56" pos:column="33">timeout<pos:position pos:line="56" pos:column="40"/></name></name></expr></argument>)<pos:position pos:line="56" pos:column="41"/></argument_list></call><operator pos:line="56" pos:column="41">)<pos:position pos:line="56" pos:column="42"/></operator></expr>)<pos:position pos:line="56" pos:column="43"/></condition><then pos:line="56" pos:column="43"> <block pos:line="56" pos:column="44">{
        <expr_stmt><expr><call><name pos:line="57" pos:column="9">cmd_error<pos:position pos:line="57" pos:column="18"/></name><argument_list pos:line="57" pos:column="18">(<argument><expr><name pos:line="57" pos:column="19">CMD_PARSE_ERROR<pos:position pos:line="57" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="57" pos:column="36">err<pos:position pos:line="57" pos:column="39"/></name></expr></argument>,
                  <argument><expr><literal type="string" pos:line="58" pos:column="19">"Invalid value for option `timeout': %s"<pos:position pos:line="58" pos:column="59"/></literal></expr></argument>, <argument><expr><name pos:line="58" pos:column="61">opt_value<pos:position pos:line="58" pos:column="70"/></name></expr></argument>)<pos:position pos:line="58" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="72"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="59" pos:column="9">cmd_destroy_flush<pos:position pos:line="59" pos:column="26"/></name><argument_list pos:line="59" pos:column="26">(<argument><expr><name pos:line="59" pos:column="27">ret_flush<pos:position pos:line="59" pos:column="36"/></name></expr></argument>)<pos:position pos:line="59" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="38"/></expr_stmt>
        <return pos:line="60" pos:column="9">return <expr><operator pos:line="60" pos:column="16">(<pos:position pos:line="60" pos:column="17"/></operator><name pos:line="60" pos:column="17">CMD_PARSE_ERROR<pos:position pos:line="60" pos:column="32"/></name><operator pos:line="60" pos:column="32">)<pos:position pos:line="60" pos:column="33"/></operator></expr>;<pos:position pos:line="60" pos:column="34"/></return>
      }<pos:position pos:line="61" pos:column="8"/></block></then> <elseif pos:line="61" pos:column="9">else <if pos:line="61" pos:column="14">if <condition pos:line="61" pos:column="17">(<expr><name><name pos:line="61" pos:column="18">ret_flush<pos:position pos:line="61" pos:column="27"/></name><operator pos:line="61" pos:column="27">-&gt;<pos:position pos:line="61" pos:column="32"/></operator><name pos:line="61" pos:column="29">timeout<pos:position pos:line="61" pos:column="36"/></name></name> <operator pos:line="61" pos:column="37">&lt;<pos:position pos:line="61" pos:column="41"/></operator> <literal type="number" pos:line="61" pos:column="39">0.0<pos:position pos:line="61" pos:column="42"/></literal></expr>)<pos:position pos:line="61" pos:column="43"/></condition><then pos:line="61" pos:column="43"> <block pos:line="61" pos:column="44">{
        <expr_stmt><expr><name><name pos:line="62" pos:column="9">ret_flush<pos:position pos:line="62" pos:column="18"/></name><operator pos:line="62" pos:column="18">-&gt;<pos:position pos:line="62" pos:column="23"/></operator><name pos:line="62" pos:column="20">timeout<pos:position pos:line="62" pos:column="27"/></name></name> <operator pos:line="62" pos:column="28">=<pos:position pos:line="62" pos:column="29"/></operator> <literal type="number" pos:line="62" pos:column="30">0.0<pos:position pos:line="62" pos:column="33"/></literal></expr>;<pos:position pos:line="62" pos:column="34"/></expr_stmt>
      }<pos:position pos:line="63" pos:column="8"/></block></then></if></elseif></if>
    }<pos:position pos:line="64" pos:column="6"/></block></then></if></elseif> <else pos:line="64" pos:column="7">else <block pos:line="64" pos:column="12">{
      <expr_stmt><expr><call><name pos:line="65" pos:column="7">cmd_error<pos:position pos:line="65" pos:column="16"/></name><argument_list pos:line="65" pos:column="16">(<argument><expr><name pos:line="65" pos:column="17">CMD_PARSE_ERROR<pos:position pos:line="65" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="65" pos:column="34">err<pos:position pos:line="65" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="65" pos:column="39">"Cannot parse option `%s'."<pos:position pos:line="65" pos:column="66"/></literal></expr></argument>, <argument><expr><name pos:line="65" pos:column="68">opt_key<pos:position pos:line="65" pos:column="75"/></name></expr></argument>)<pos:position pos:line="65" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="77"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="66" pos:column="7">cmd_destroy_flush<pos:position pos:line="66" pos:column="24"/></name><argument_list pos:line="66" pos:column="24">(<argument><expr><name pos:line="66" pos:column="25">ret_flush<pos:position pos:line="66" pos:column="34"/></name></expr></argument>)<pos:position pos:line="66" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="36"/></expr_stmt>
      <return pos:line="67" pos:column="7">return <expr><operator pos:line="67" pos:column="14">(<pos:position pos:line="67" pos:column="15"/></operator><name pos:line="67" pos:column="15">CMD_PARSE_ERROR<pos:position pos:line="67" pos:column="30"/></name><operator pos:line="67" pos:column="30">)<pos:position pos:line="67" pos:column="31"/></operator></expr>;<pos:position pos:line="67" pos:column="32"/></return>
    }<pos:position pos:line="68" pos:column="6"/></block></else></if>
  }<pos:position pos:line="69" pos:column="4"/></block></for>

  <return pos:line="71" pos:column="3">return <expr><operator pos:line="71" pos:column="10">(<pos:position pos:line="71" pos:column="11"/></operator><name pos:line="71" pos:column="11">CMD_OK<pos:position pos:line="71" pos:column="17"/></name><operator pos:line="71" pos:column="17">)<pos:position pos:line="71" pos:column="18"/></operator></expr>;<pos:position pos:line="71" pos:column="19"/></return>
}<pos:position pos:line="72" pos:column="2"/></block></function></unit>
