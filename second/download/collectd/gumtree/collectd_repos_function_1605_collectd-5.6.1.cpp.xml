<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1605_collectd-5.6.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">statsd_shutdown<pos:position pos:line="1" pos:column="27"/></name> <parameter_list pos:line="1" pos:column="28">(<parameter><decl><type><name pos:line="1" pos:column="29">void<pos:position pos:line="1" pos:column="33"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="34"/></parameter_list> <comment type="block" pos:line="1" pos:column="35">/* {{{ */</comment>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">void<pos:position pos:line="3" pos:column="7"/></name> <modifier pos:line="3" pos:column="8">*<pos:position pos:line="3" pos:column="9"/></modifier></type><name pos:line="3" pos:column="9">key<pos:position pos:line="3" pos:column="12"/></name></decl>;<pos:position pos:line="3" pos:column="13"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">void<pos:position pos:line="4" pos:column="7"/></name> <modifier pos:line="4" pos:column="8">*<pos:position pos:line="4" pos:column="9"/></modifier></type><name pos:line="4" pos:column="9">value<pos:position pos:line="4" pos:column="14"/></name></decl>;<pos:position pos:line="4" pos:column="15"/></decl_stmt>

  <if pos:line="6" pos:column="3">if <condition pos:line="6" pos:column="6">(<expr><name pos:line="6" pos:column="7">network_thread_running<pos:position pos:line="6" pos:column="29"/></name></expr>)<pos:position pos:line="6" pos:column="30"/></condition><then pos:line="6" pos:column="30">
  <block pos:line="7" pos:column="3">{
    <expr_stmt><expr><name pos:line="8" pos:column="5">network_thread_shutdown<pos:position pos:line="8" pos:column="28"/></name> <operator pos:line="8" pos:column="29">=<pos:position pos:line="8" pos:column="30"/></operator> <literal type="number" pos:line="8" pos:column="31">1<pos:position pos:line="8" pos:column="32"/></literal></expr>;<pos:position pos:line="8" pos:column="33"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="9" pos:column="5">pthread_kill<pos:position pos:line="9" pos:column="17"/></name> <argument_list pos:line="9" pos:column="18">(<argument><expr><name pos:line="9" pos:column="19">network_thread<pos:position pos:line="9" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="35">SIGTERM<pos:position pos:line="9" pos:column="42"/></name></expr></argument>)<pos:position pos:line="9" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="44"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="10" pos:column="5">pthread_join<pos:position pos:line="10" pos:column="17"/></name> <argument_list pos:line="10" pos:column="18">(<argument><expr><name pos:line="10" pos:column="19">network_thread<pos:position pos:line="10" pos:column="33"/></name></expr></argument>, <comment type="block" pos:line="10" pos:column="35">/* retval = */</comment> <argument><expr><name pos:line="10" pos:column="50">NULL<pos:position pos:line="10" pos:column="54"/></name></expr></argument>)<pos:position pos:line="10" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="56"/></expr_stmt>
  }<pos:position pos:line="11" pos:column="4"/></block></then></if>
  <expr_stmt><expr><name pos:line="12" pos:column="3">network_thread_running<pos:position pos:line="12" pos:column="25"/></name> <operator pos:line="12" pos:column="26">=<pos:position pos:line="12" pos:column="27"/></operator> <literal type="number" pos:line="12" pos:column="28">0<pos:position pos:line="12" pos:column="29"/></literal></expr>;<pos:position pos:line="12" pos:column="30"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="14" pos:column="3">pthread_mutex_lock<pos:position pos:line="14" pos:column="21"/></name> <argument_list pos:line="14" pos:column="22">(<argument><expr><operator pos:line="14" pos:column="23">&amp;<pos:position pos:line="14" pos:column="28"/></operator><name pos:line="14" pos:column="24">metrics_lock<pos:position pos:line="14" pos:column="36"/></name></expr></argument>)<pos:position pos:line="14" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="38"/></expr_stmt>

  <while pos:line="16" pos:column="3">while <condition pos:line="16" pos:column="9">(<expr><call><name pos:line="16" pos:column="10">c_avl_pick<pos:position pos:line="16" pos:column="20"/></name> <argument_list pos:line="16" pos:column="21">(<argument><expr><name pos:line="16" pos:column="22">metrics_tree<pos:position pos:line="16" pos:column="34"/></name></expr></argument>, <argument><expr><operator pos:line="16" pos:column="36">&amp;<pos:position pos:line="16" pos:column="41"/></operator><name pos:line="16" pos:column="37">key<pos:position pos:line="16" pos:column="40"/></name></expr></argument>, <argument><expr><operator pos:line="16" pos:column="42">&amp;<pos:position pos:line="16" pos:column="47"/></operator><name pos:line="16" pos:column="43">value<pos:position pos:line="16" pos:column="48"/></name></expr></argument>)<pos:position pos:line="16" pos:column="49"/></argument_list></call> <operator pos:line="16" pos:column="50">==<pos:position pos:line="16" pos:column="52"/></operator> <literal type="number" pos:line="16" pos:column="53">0<pos:position pos:line="16" pos:column="54"/></literal></expr>)<pos:position pos:line="16" pos:column="55"/></condition>
  <block pos:line="17" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="18" pos:column="5">sfree<pos:position pos:line="18" pos:column="10"/></name> <argument_list pos:line="18" pos:column="11">(<argument><expr><name pos:line="18" pos:column="12">key<pos:position pos:line="18" pos:column="15"/></name></expr></argument>)<pos:position pos:line="18" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="17"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="19" pos:column="5">statsd_metric_free<pos:position pos:line="19" pos:column="23"/></name> <argument_list pos:line="19" pos:column="24">(<argument><expr><name pos:line="19" pos:column="25">value<pos:position pos:line="19" pos:column="30"/></name></expr></argument>)<pos:position pos:line="19" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="32"/></expr_stmt>
  }<pos:position pos:line="20" pos:column="4"/></block></while>
  <expr_stmt><expr><call><name pos:line="21" pos:column="3">c_avl_destroy<pos:position pos:line="21" pos:column="16"/></name> <argument_list pos:line="21" pos:column="17">(<argument><expr><name pos:line="21" pos:column="18">metrics_tree<pos:position pos:line="21" pos:column="30"/></name></expr></argument>)<pos:position pos:line="21" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="32"/></expr_stmt>
  <expr_stmt><expr><name pos:line="22" pos:column="3">metrics_tree<pos:position pos:line="22" pos:column="15"/></name> <operator pos:line="22" pos:column="16">=<pos:position pos:line="22" pos:column="17"/></operator> <name pos:line="22" pos:column="18">NULL<pos:position pos:line="22" pos:column="22"/></name></expr>;<pos:position pos:line="22" pos:column="23"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="24" pos:column="3">sfree<pos:position pos:line="24" pos:column="8"/></name> <argument_list pos:line="24" pos:column="9">(<argument><expr><name pos:line="24" pos:column="10">conf_node<pos:position pos:line="24" pos:column="19"/></name></expr></argument>)<pos:position pos:line="24" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="21"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="25" pos:column="3">sfree<pos:position pos:line="25" pos:column="8"/></name> <argument_list pos:line="25" pos:column="9">(<argument><expr><name pos:line="25" pos:column="10">conf_service<pos:position pos:line="25" pos:column="22"/></name></expr></argument>)<pos:position pos:line="25" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="24"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="27" pos:column="3">pthread_mutex_unlock<pos:position pos:line="27" pos:column="23"/></name> <argument_list pos:line="27" pos:column="24">(<argument><expr><operator pos:line="27" pos:column="25">&amp;<pos:position pos:line="27" pos:column="30"/></operator><name pos:line="27" pos:column="26">metrics_lock<pos:position pos:line="27" pos:column="38"/></name></expr></argument>)<pos:position pos:line="27" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="40"/></expr_stmt>

  <return pos:line="29" pos:column="3">return <expr><operator pos:line="29" pos:column="10">(<pos:position pos:line="29" pos:column="11"/></operator><literal type="number" pos:line="29" pos:column="11">0<pos:position pos:line="29" pos:column="12"/></literal><operator pos:line="29" pos:column="12">)<pos:position pos:line="29" pos:column="13"/></operator></expr>;<pos:position pos:line="29" pos:column="14"/></return>
}<pos:position pos:line="30" pos:column="2"/></block></function></unit>
