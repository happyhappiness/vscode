<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_765_collectd-4.4.3.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">cu_tail_read<pos:position pos:line="1" pos:column="17"/></name> <parameter_list pos:line="1" pos:column="18">(<parameter><decl><type><name pos:line="1" pos:column="19">cu_tail_t<pos:position pos:line="1" pos:column="28"/></name> <modifier pos:line="1" pos:column="29">*<pos:position pos:line="1" pos:column="30"/></modifier></type><name pos:line="1" pos:column="30">obj<pos:position pos:line="1" pos:column="33"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="35">char<pos:position pos:line="1" pos:column="39"/></name> <modifier pos:line="1" pos:column="40">*<pos:position pos:line="1" pos:column="41"/></modifier></type><name pos:line="1" pos:column="41">buf<pos:position pos:line="1" pos:column="44"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="46">int<pos:position pos:line="1" pos:column="49"/></name></type> <name pos:line="1" pos:column="50">buflen<pos:position pos:line="1" pos:column="56"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="58">tailfunc_t<pos:position pos:line="1" pos:column="68"/></name> <modifier pos:line="1" pos:column="69">*<pos:position pos:line="1" pos:column="70"/></modifier></type><name pos:line="1" pos:column="70">callback<pos:position pos:line="1" pos:column="78"/></name></decl></parameter>,
		<parameter><decl><type><name pos:line="2" pos:column="17">void<pos:position pos:line="2" pos:column="21"/></name> <modifier pos:line="2" pos:column="22">*<pos:position pos:line="2" pos:column="23"/></modifier></type><name pos:line="2" pos:column="23">data<pos:position pos:line="2" pos:column="27"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="28"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">status<pos:position pos:line="4" pos:column="19"/></name></decl>;<pos:position pos:line="4" pos:column="20"/></decl_stmt>

	<while pos:line="6" pos:column="9">while <condition pos:line="6" pos:column="15">(<expr><literal type="number" pos:line="6" pos:column="16">42<pos:position pos:line="6" pos:column="18"/></literal></expr>)<pos:position pos:line="6" pos:column="19"/></condition>
	<block pos:line="7" pos:column="9">{
		<expr_stmt><expr><name pos:line="8" pos:column="17">status<pos:position pos:line="8" pos:column="23"/></name> <operator pos:line="8" pos:column="24">=<pos:position pos:line="8" pos:column="25"/></operator> <call><name pos:line="8" pos:column="26">cu_tail_readline<pos:position pos:line="8" pos:column="42"/></name> <argument_list pos:line="8" pos:column="43">(<argument><expr><name pos:line="8" pos:column="44">obj<pos:position pos:line="8" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="49">buf<pos:position pos:line="8" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="54">buflen<pos:position pos:line="8" pos:column="60"/></name></expr></argument>)<pos:position pos:line="8" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="62"/></expr_stmt>
		<if pos:line="9" pos:column="17">if <condition pos:line="9" pos:column="20">(<expr><name pos:line="9" pos:column="21">status<pos:position pos:line="9" pos:column="27"/></name> <operator pos:line="9" pos:column="28">!=<pos:position pos:line="9" pos:column="30"/></operator> <literal type="number" pos:line="9" pos:column="31">0<pos:position pos:line="9" pos:column="32"/></literal></expr>)<pos:position pos:line="9" pos:column="33"/></condition><then pos:line="9" pos:column="33">
		<block pos:line="10" pos:column="17">{
			<expr_stmt><expr><call><name pos:line="11" pos:column="25">ERROR<pos:position pos:line="11" pos:column="30"/></name> <argument_list pos:line="11" pos:column="31">(<argument><expr><literal type="string" pos:line="11" pos:column="32">"utils_tail: cu_tail_read: cu_tail_readline "<pos:position pos:line="11" pos:column="77"/></literal>
					<literal type="string" pos:line="12" pos:column="41">"failed."<pos:position pos:line="12" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="52"/></expr_stmt>
			<break pos:line="13" pos:column="25">break;<pos:position pos:line="13" pos:column="31"/></break>
		}<pos:position pos:line="14" pos:column="18"/></block></then></if>

		<comment type="block" pos:line="16" pos:column="17">/* check for EOF */</comment>
		<if pos:line="17" pos:column="17">if <condition pos:line="17" pos:column="20">(<expr><name><name pos:line="17" pos:column="21">buf<pos:position pos:line="17" pos:column="24"/></name><index pos:line="17" pos:column="24">[<expr><literal type="number" pos:line="17" pos:column="25">0<pos:position pos:line="17" pos:column="26"/></literal></expr>]<pos:position pos:line="17" pos:column="27"/></index></name> <operator pos:line="17" pos:column="28">==<pos:position pos:line="17" pos:column="30"/></operator> <literal type="number" pos:line="17" pos:column="31">0<pos:position pos:line="17" pos:column="32"/></literal></expr>)<pos:position pos:line="17" pos:column="33"/></condition><then pos:line="17" pos:column="33">
			<block type="pseudo"><break pos:line="18" pos:column="25">break;<pos:position pos:line="18" pos:column="31"/></break></block></then></if>

		<expr_stmt><expr><name pos:line="20" pos:column="17">status<pos:position pos:line="20" pos:column="23"/></name> <operator pos:line="20" pos:column="24">=<pos:position pos:line="20" pos:column="25"/></operator> <call><name pos:line="20" pos:column="26">callback<pos:position pos:line="20" pos:column="34"/></name> <argument_list pos:line="20" pos:column="35">(<argument><expr><name pos:line="20" pos:column="36">data<pos:position pos:line="20" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="42">buf<pos:position pos:line="20" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="47">buflen<pos:position pos:line="20" pos:column="53"/></name></expr></argument>)<pos:position pos:line="20" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="55"/></expr_stmt>
		<if pos:line="21" pos:column="17">if <condition pos:line="21" pos:column="20">(<expr><name pos:line="21" pos:column="21">status<pos:position pos:line="21" pos:column="27"/></name> <operator pos:line="21" pos:column="28">!=<pos:position pos:line="21" pos:column="30"/></operator> <literal type="number" pos:line="21" pos:column="31">0<pos:position pos:line="21" pos:column="32"/></literal></expr>)<pos:position pos:line="21" pos:column="33"/></condition><then pos:line="21" pos:column="33">
		<block pos:line="22" pos:column="17">{
			<expr_stmt><expr><call><name pos:line="23" pos:column="25">ERROR<pos:position pos:line="23" pos:column="30"/></name> <argument_list pos:line="23" pos:column="31">(<argument><expr><literal type="string" pos:line="23" pos:column="32">"utils_tail: cu_tail_read: callback returned "<pos:position pos:line="23" pos:column="78"/></literal>
					<literal type="string" pos:line="24" pos:column="41">"status %i."<pos:position pos:line="24" pos:column="53"/></literal></expr></argument>, <argument><expr><name pos:line="24" pos:column="55">status<pos:position pos:line="24" pos:column="61"/></name></expr></argument>)<pos:position pos:line="24" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="63"/></expr_stmt>
			<break pos:line="25" pos:column="25">break;<pos:position pos:line="25" pos:column="31"/></break>
		}<pos:position pos:line="26" pos:column="18"/></block></then></if>
	}<pos:position pos:line="27" pos:column="10"/></block></while>

	<return pos:line="29" pos:column="9">return <expr><name pos:line="29" pos:column="16">status<pos:position pos:line="29" pos:column="22"/></name></expr>;<pos:position pos:line="29" pos:column="23"/></return>
}<pos:position pos:line="30" pos:column="2"/></block></function></unit>
