<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1309_collectd-4.6.1.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">ping_iterator_get_info<pos:position pos:line="1" pos:column="27"/></name> <parameter_list pos:line="1" pos:column="28">(<parameter><decl><type><name pos:line="1" pos:column="29">pingobj_iter_t<pos:position pos:line="1" pos:column="43"/></name> <modifier pos:line="1" pos:column="44">*<pos:position pos:line="1" pos:column="45"/></modifier></type><name pos:line="1" pos:column="45">iter<pos:position pos:line="1" pos:column="49"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="51">int<pos:position pos:line="1" pos:column="54"/></name></type> <name pos:line="1" pos:column="55">info<pos:position pos:line="1" pos:column="59"/></name></decl></parameter>,
		<parameter><decl><type><name pos:line="2" pos:column="17">void<pos:position pos:line="2" pos:column="21"/></name> <modifier pos:line="2" pos:column="22">*<pos:position pos:line="2" pos:column="23"/></modifier></type><name pos:line="2" pos:column="23">buffer<pos:position pos:line="2" pos:column="29"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="31">size_t<pos:position pos:line="2" pos:column="37"/></name> <modifier pos:line="2" pos:column="38">*<pos:position pos:line="2" pos:column="39"/></modifier></type><name pos:line="2" pos:column="39">buffer_len<pos:position pos:line="2" pos:column="49"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="50"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">ret<pos:position pos:line="4" pos:column="16"/></name> <init pos:line="4" pos:column="17">= <expr><name pos:line="4" pos:column="19">EINVAL<pos:position pos:line="4" pos:column="25"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="26"/></decl_stmt>

	<decl_stmt><decl><type><name pos:line="6" pos:column="9">size_t<pos:position pos:line="6" pos:column="15"/></name></type> <name pos:line="6" pos:column="16">orig_buffer_len<pos:position pos:line="6" pos:column="31"/></name> <init pos:line="6" pos:column="32">= <expr><operator pos:line="6" pos:column="34">*<pos:position pos:line="6" pos:column="35"/></operator><name pos:line="6" pos:column="35">buffer_len<pos:position pos:line="6" pos:column="45"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="46"/></decl_stmt>

	<switch pos:line="8" pos:column="9">switch <condition pos:line="8" pos:column="16">(<expr><name pos:line="8" pos:column="17">info<pos:position pos:line="8" pos:column="21"/></name></expr>)<pos:position pos:line="8" pos:column="22"/></condition>
	<block pos:line="9" pos:column="9">{
		<case pos:line="10" pos:column="17">case <expr><name pos:line="10" pos:column="22">PING_INFO_HOSTNAME<pos:position pos:line="10" pos:column="40"/></name></expr>:<pos:position pos:line="10" pos:column="41"/></case>
			<expr_stmt><expr><name pos:line="11" pos:column="25">ret<pos:position pos:line="11" pos:column="28"/></name> <operator pos:line="11" pos:column="29">=<pos:position pos:line="11" pos:column="30"/></operator> <name pos:line="11" pos:column="31">ENOMEM<pos:position pos:line="11" pos:column="37"/></name></expr>;<pos:position pos:line="11" pos:column="38"/></expr_stmt>
			<expr_stmt><expr><operator pos:line="12" pos:column="25">*<pos:position pos:line="12" pos:column="26"/></operator><name pos:line="12" pos:column="26">buffer_len<pos:position pos:line="12" pos:column="36"/></name> <operator pos:line="12" pos:column="37">=<pos:position pos:line="12" pos:column="38"/></operator> <call><name pos:line="12" pos:column="39">strlen<pos:position pos:line="12" pos:column="45"/></name> <argument_list pos:line="12" pos:column="46">(<argument><expr><name><name pos:line="12" pos:column="47">iter<pos:position pos:line="12" pos:column="51"/></name><operator pos:line="12" pos:column="51">-&gt;<pos:position pos:line="12" pos:column="56"/></operator><name pos:line="12" pos:column="53">hostname<pos:position pos:line="12" pos:column="61"/></name></name></expr></argument>)<pos:position pos:line="12" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="63"/></expr_stmt>
			<if pos:line="13" pos:column="25">if <condition pos:line="13" pos:column="28">(<expr><name pos:line="13" pos:column="29">orig_buffer_len<pos:position pos:line="13" pos:column="44"/></name> <operator pos:line="13" pos:column="45">&lt;=<pos:position pos:line="13" pos:column="50"/></operator> <operator pos:line="13" pos:column="48">*<pos:position pos:line="13" pos:column="49"/></operator><name pos:line="13" pos:column="49">buffer_len<pos:position pos:line="13" pos:column="59"/></name></expr>)<pos:position pos:line="13" pos:column="60"/></condition><then pos:line="13" pos:column="60">
				<block type="pseudo"><break pos:line="14" pos:column="33">break;<pos:position pos:line="14" pos:column="39"/></break></block></then></if>
			<comment type="block" pos:line="15" pos:column="25">/* Since (orig_buffer_len &gt; *buffer_len) `strncpy'
			 * will copy `*buffer_len' and pad the rest of
			 * `buffer' with null-bytes */</comment>
			<expr_stmt><expr><call><name pos:line="18" pos:column="25">strncpy<pos:position pos:line="18" pos:column="32"/></name> <argument_list pos:line="18" pos:column="33">(<argument><expr><name pos:line="18" pos:column="34">buffer<pos:position pos:line="18" pos:column="40"/></name></expr></argument>, <argument><expr><name><name pos:line="18" pos:column="42">iter<pos:position pos:line="18" pos:column="46"/></name><operator pos:line="18" pos:column="46">-&gt;<pos:position pos:line="18" pos:column="51"/></operator><name pos:line="18" pos:column="48">hostname<pos:position pos:line="18" pos:column="56"/></name></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="58">orig_buffer_len<pos:position pos:line="18" pos:column="73"/></name></expr></argument>)<pos:position pos:line="18" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="75"/></expr_stmt>
			<expr_stmt><expr><name pos:line="19" pos:column="25">ret<pos:position pos:line="19" pos:column="28"/></name> <operator pos:line="19" pos:column="29">=<pos:position pos:line="19" pos:column="30"/></operator> <literal type="number" pos:line="19" pos:column="31">0<pos:position pos:line="19" pos:column="32"/></literal></expr>;<pos:position pos:line="19" pos:column="33"/></expr_stmt>
			<break pos:line="20" pos:column="25">break;<pos:position pos:line="20" pos:column="31"/></break>

		<case pos:line="22" pos:column="17">case <expr><name pos:line="22" pos:column="22">PING_INFO_ADDRESS<pos:position pos:line="22" pos:column="39"/></name></expr>:<pos:position pos:line="22" pos:column="40"/></case>
			<expr_stmt><expr><name pos:line="23" pos:column="25">ret<pos:position pos:line="23" pos:column="28"/></name> <operator pos:line="23" pos:column="29">=<pos:position pos:line="23" pos:column="30"/></operator> <call><name pos:line="23" pos:column="31">getnameinfo<pos:position pos:line="23" pos:column="42"/></name> <argument_list pos:line="23" pos:column="43">(<argument><expr><operator pos:line="23" pos:column="44">(<pos:position pos:line="23" pos:column="45"/></operator>struct <name pos:line="23" pos:column="52">sockaddr<pos:position pos:line="23" pos:column="60"/></name> <operator pos:line="23" pos:column="61">*<pos:position pos:line="23" pos:column="62"/></operator><operator pos:line="23" pos:column="62">)<pos:position pos:line="23" pos:column="63"/></operator> <name><name pos:line="23" pos:column="64">iter<pos:position pos:line="23" pos:column="68"/></name><operator pos:line="23" pos:column="68">-&gt;<pos:position pos:line="23" pos:column="73"/></operator><name pos:line="23" pos:column="70">addr<pos:position pos:line="23" pos:column="74"/></name></name></expr></argument>,
					<argument><expr><name><name pos:line="24" pos:column="41">iter<pos:position pos:line="24" pos:column="45"/></name><operator pos:line="24" pos:column="45">-&gt;<pos:position pos:line="24" pos:column="50"/></operator><name pos:line="24" pos:column="47">addrlen<pos:position pos:line="24" pos:column="54"/></name></name></expr></argument>,
					<argument><expr><operator pos:line="25" pos:column="41">(<pos:position pos:line="25" pos:column="42"/></operator><name pos:line="25" pos:column="42">char<pos:position pos:line="25" pos:column="46"/></name> <operator pos:line="25" pos:column="47">*<pos:position pos:line="25" pos:column="48"/></operator><operator pos:line="25" pos:column="48">)<pos:position pos:line="25" pos:column="49"/></operator> <name pos:line="25" pos:column="50">buffer<pos:position pos:line="25" pos:column="56"/></name></expr></argument>,
					<argument><expr><operator pos:line="26" pos:column="41">*<pos:position pos:line="26" pos:column="42"/></operator><name pos:line="26" pos:column="42">buffer_len<pos:position pos:line="26" pos:column="52"/></name></expr></argument>,
					<argument><expr><name pos:line="27" pos:column="41">NULL<pos:position pos:line="27" pos:column="45"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="27" pos:column="47">0<pos:position pos:line="27" pos:column="48"/></literal></expr></argument>,
					<argument><expr><name pos:line="28" pos:column="41">NI_NUMERICHOST<pos:position pos:line="28" pos:column="55"/></name></expr></argument>)<pos:position pos:line="28" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="57"/></expr_stmt>
			<if pos:line="29" pos:column="25">if <condition pos:line="29" pos:column="28">(<expr><name pos:line="29" pos:column="29">ret<pos:position pos:line="29" pos:column="32"/></name> <operator pos:line="29" pos:column="33">!=<pos:position pos:line="29" pos:column="35"/></operator> <literal type="number" pos:line="29" pos:column="36">0<pos:position pos:line="29" pos:column="37"/></literal></expr>)<pos:position pos:line="29" pos:column="38"/></condition><then pos:line="29" pos:column="38">
			<block pos:line="30" pos:column="25">{
				<if pos:line="31" pos:column="33">if <condition pos:line="31" pos:column="36">(<expr><operator pos:line="31" pos:column="37">(<pos:position pos:line="31" pos:column="38"/></operator><name pos:line="31" pos:column="38">ret<pos:position pos:line="31" pos:column="41"/></name> <operator pos:line="31" pos:column="42">==<pos:position pos:line="31" pos:column="44"/></operator> <name pos:line="31" pos:column="45">EAI_MEMORY<pos:position pos:line="31" pos:column="55"/></name><operator pos:line="31" pos:column="55">)<pos:position pos:line="31" pos:column="56"/></operator>
<cpp:ifdef pos:line="32" pos:column="1">#<cpp:directive pos:line="32" pos:column="2">ifdef<pos:position pos:line="32" pos:column="7"/></cpp:directive> <name pos:line="32" pos:column="8">EAI_OVERFLOW<pos:position pos:line="32" pos:column="20"/></name></cpp:ifdef>
						<operator pos:line="33" pos:column="49">||<pos:position pos:line="33" pos:column="51"/></operator> <operator pos:line="33" pos:column="52">(<pos:position pos:line="33" pos:column="53"/></operator><name pos:line="33" pos:column="53">ret<pos:position pos:line="33" pos:column="56"/></name> <operator pos:line="33" pos:column="57">==<pos:position pos:line="33" pos:column="59"/></operator> <name pos:line="33" pos:column="60">EAI_OVERFLOW<pos:position pos:line="33" pos:column="72"/></name><operator pos:line="33" pos:column="72">)<pos:position pos:line="33" pos:column="73"/></operator></expr>
<cpp:endif pos:line="34" pos:column="1">#<cpp:directive pos:line="34" pos:column="2">endif<pos:position pos:line="34" pos:column="7"/></cpp:directive></cpp:endif>
				   )<pos:position pos:line="35" pos:column="37"/></condition><then pos:line="35" pos:column="37">
					<block type="pseudo"><expr_stmt><expr><name pos:line="36" pos:column="41">ret<pos:position pos:line="36" pos:column="44"/></name> <operator pos:line="36" pos:column="45">=<pos:position pos:line="36" pos:column="46"/></operator> <name pos:line="36" pos:column="47">ENOMEM<pos:position pos:line="36" pos:column="53"/></name></expr>;<pos:position pos:line="36" pos:column="54"/></expr_stmt></block></then>
				<elseif pos:line="37" pos:column="33">else <if pos:line="37" pos:column="38">if <condition pos:line="37" pos:column="41">(<expr><name pos:line="37" pos:column="42">ret<pos:position pos:line="37" pos:column="45"/></name> <operator pos:line="37" pos:column="46">==<pos:position pos:line="37" pos:column="48"/></operator> <name pos:line="37" pos:column="49">EAI_SYSTEM<pos:position pos:line="37" pos:column="59"/></name></expr>)<pos:position pos:line="37" pos:column="60"/></condition><then pos:line="37" pos:column="60">
					<comment type="block" pos:line="38" pos:column="41">/* XXX: Not thread-safe! */</comment>
					<block type="pseudo"><expr_stmt><expr><name pos:line="39" pos:column="41">ret<pos:position pos:line="39" pos:column="44"/></name> <operator pos:line="39" pos:column="45">=<pos:position pos:line="39" pos:column="46"/></operator> <name pos:line="39" pos:column="47">errno<pos:position pos:line="39" pos:column="52"/></name></expr>;<pos:position pos:line="39" pos:column="53"/></expr_stmt></block></then></if></elseif>
				<else pos:line="40" pos:column="33">else
					<block type="pseudo"><expr_stmt><expr><name pos:line="41" pos:column="41">ret<pos:position pos:line="41" pos:column="44"/></name> <operator pos:line="41" pos:column="45">=<pos:position pos:line="41" pos:column="46"/></operator> <name pos:line="41" pos:column="47">EINVAL<pos:position pos:line="41" pos:column="53"/></name></expr>;<pos:position pos:line="41" pos:column="54"/></expr_stmt></block></else></if>
			}<pos:position pos:line="42" pos:column="26"/></block></then></if>
			<break pos:line="43" pos:column="25">break;<pos:position pos:line="43" pos:column="31"/></break>

		<case pos:line="45" pos:column="17">case <expr><name pos:line="45" pos:column="22">PING_INFO_FAMILY<pos:position pos:line="45" pos:column="38"/></name></expr>:<pos:position pos:line="45" pos:column="39"/></case>
			<expr_stmt><expr><name pos:line="46" pos:column="25">ret<pos:position pos:line="46" pos:column="28"/></name> <operator pos:line="46" pos:column="29">=<pos:position pos:line="46" pos:column="30"/></operator> <name pos:line="46" pos:column="31">ENOMEM<pos:position pos:line="46" pos:column="37"/></name></expr>;<pos:position pos:line="46" pos:column="38"/></expr_stmt>
			<expr_stmt><expr><operator pos:line="47" pos:column="25">*<pos:position pos:line="47" pos:column="26"/></operator><name pos:line="47" pos:column="26">buffer_len<pos:position pos:line="47" pos:column="36"/></name> <operator pos:line="47" pos:column="37">=<pos:position pos:line="47" pos:column="38"/></operator> <sizeof pos:line="47" pos:column="39">sizeof <argument_list pos:line="47" pos:column="46">(<argument><expr><name pos:line="47" pos:column="47">int<pos:position pos:line="47" pos:column="50"/></name></expr></argument>)<pos:position pos:line="47" pos:column="51"/></argument_list></sizeof></expr>;<pos:position pos:line="47" pos:column="52"/></expr_stmt>
			<if pos:line="48" pos:column="25">if <condition pos:line="48" pos:column="28">(<expr><name pos:line="48" pos:column="29">orig_buffer_len<pos:position pos:line="48" pos:column="44"/></name> <operator pos:line="48" pos:column="45">&lt;<pos:position pos:line="48" pos:column="49"/></operator> <sizeof pos:line="48" pos:column="47">sizeof <argument_list pos:line="48" pos:column="54">(<argument><expr><name pos:line="48" pos:column="55">int<pos:position pos:line="48" pos:column="58"/></name></expr></argument>)<pos:position pos:line="48" pos:column="59"/></argument_list></sizeof></expr>)<pos:position pos:line="48" pos:column="60"/></condition><then pos:line="48" pos:column="60">
				<block type="pseudo"><break pos:line="49" pos:column="33">break;<pos:position pos:line="49" pos:column="39"/></break></block></then></if>
			<expr_stmt><expr><operator pos:line="50" pos:column="25">*<pos:position pos:line="50" pos:column="26"/></operator><operator pos:line="50" pos:column="26">(<pos:position pos:line="50" pos:column="27"/></operator><operator pos:line="50" pos:column="27">(<pos:position pos:line="50" pos:column="28"/></operator><name pos:line="50" pos:column="28">int<pos:position pos:line="50" pos:column="31"/></name> <operator pos:line="50" pos:column="32">*<pos:position pos:line="50" pos:column="33"/></operator><operator pos:line="50" pos:column="33">)<pos:position pos:line="50" pos:column="34"/></operator> <name pos:line="50" pos:column="35">buffer<pos:position pos:line="50" pos:column="41"/></name><operator pos:line="50" pos:column="41">)<pos:position pos:line="50" pos:column="42"/></operator> <operator pos:line="50" pos:column="43">=<pos:position pos:line="50" pos:column="44"/></operator> <name><name pos:line="50" pos:column="45">iter<pos:position pos:line="50" pos:column="49"/></name><operator pos:line="50" pos:column="49">-&gt;<pos:position pos:line="50" pos:column="54"/></operator><name pos:line="50" pos:column="51">addrfamily<pos:position pos:line="50" pos:column="61"/></name></name></expr>;<pos:position pos:line="50" pos:column="62"/></expr_stmt>
			<expr_stmt><expr><name pos:line="51" pos:column="25">ret<pos:position pos:line="51" pos:column="28"/></name> <operator pos:line="51" pos:column="29">=<pos:position pos:line="51" pos:column="30"/></operator> <literal type="number" pos:line="51" pos:column="31">0<pos:position pos:line="51" pos:column="32"/></literal></expr>;<pos:position pos:line="51" pos:column="33"/></expr_stmt>
			<break pos:line="52" pos:column="25">break;<pos:position pos:line="52" pos:column="31"/></break>

		<case pos:line="54" pos:column="17">case <expr><name pos:line="54" pos:column="22">PING_INFO_LATENCY<pos:position pos:line="54" pos:column="39"/></name></expr>:<pos:position pos:line="54" pos:column="40"/></case>
			<expr_stmt><expr><name pos:line="55" pos:column="25">ret<pos:position pos:line="55" pos:column="28"/></name> <operator pos:line="55" pos:column="29">=<pos:position pos:line="55" pos:column="30"/></operator> <name pos:line="55" pos:column="31">ENOMEM<pos:position pos:line="55" pos:column="37"/></name></expr>;<pos:position pos:line="55" pos:column="38"/></expr_stmt>
			<expr_stmt><expr><operator pos:line="56" pos:column="25">*<pos:position pos:line="56" pos:column="26"/></operator><name pos:line="56" pos:column="26">buffer_len<pos:position pos:line="56" pos:column="36"/></name> <operator pos:line="56" pos:column="37">=<pos:position pos:line="56" pos:column="38"/></operator> <sizeof pos:line="56" pos:column="39">sizeof <argument_list pos:line="56" pos:column="46">(<argument><expr><name pos:line="56" pos:column="47">double<pos:position pos:line="56" pos:column="53"/></name></expr></argument>)<pos:position pos:line="56" pos:column="54"/></argument_list></sizeof></expr>;<pos:position pos:line="56" pos:column="55"/></expr_stmt>
			<if pos:line="57" pos:column="25">if <condition pos:line="57" pos:column="28">(<expr><name pos:line="57" pos:column="29">orig_buffer_len<pos:position pos:line="57" pos:column="44"/></name> <operator pos:line="57" pos:column="45">&lt;<pos:position pos:line="57" pos:column="49"/></operator> <sizeof pos:line="57" pos:column="47">sizeof <argument_list pos:line="57" pos:column="54">(<argument><expr><name pos:line="57" pos:column="55">double<pos:position pos:line="57" pos:column="61"/></name></expr></argument>)<pos:position pos:line="57" pos:column="62"/></argument_list></sizeof></expr>)<pos:position pos:line="57" pos:column="63"/></condition><then pos:line="57" pos:column="63">
				<block type="pseudo"><break pos:line="58" pos:column="33">break;<pos:position pos:line="58" pos:column="39"/></break></block></then></if>
			<expr_stmt><expr><operator pos:line="59" pos:column="25">*<pos:position pos:line="59" pos:column="26"/></operator><operator pos:line="59" pos:column="26">(<pos:position pos:line="59" pos:column="27"/></operator><operator pos:line="59" pos:column="27">(<pos:position pos:line="59" pos:column="28"/></operator><name pos:line="59" pos:column="28">double<pos:position pos:line="59" pos:column="34"/></name> <operator pos:line="59" pos:column="35">*<pos:position pos:line="59" pos:column="36"/></operator><operator pos:line="59" pos:column="36">)<pos:position pos:line="59" pos:column="37"/></operator> <name pos:line="59" pos:column="38">buffer<pos:position pos:line="59" pos:column="44"/></name><operator pos:line="59" pos:column="44">)<pos:position pos:line="59" pos:column="45"/></operator> <operator pos:line="59" pos:column="46">=<pos:position pos:line="59" pos:column="47"/></operator> <name><name pos:line="59" pos:column="48">iter<pos:position pos:line="59" pos:column="52"/></name><operator pos:line="59" pos:column="52">-&gt;<pos:position pos:line="59" pos:column="57"/></operator><name pos:line="59" pos:column="54">latency<pos:position pos:line="59" pos:column="61"/></name></name></expr>;<pos:position pos:line="59" pos:column="62"/></expr_stmt>
			<expr_stmt><expr><name pos:line="60" pos:column="25">ret<pos:position pos:line="60" pos:column="28"/></name> <operator pos:line="60" pos:column="29">=<pos:position pos:line="60" pos:column="30"/></operator> <literal type="number" pos:line="60" pos:column="31">0<pos:position pos:line="60" pos:column="32"/></literal></expr>;<pos:position pos:line="60" pos:column="33"/></expr_stmt>
			<break pos:line="61" pos:column="25">break;<pos:position pos:line="61" pos:column="31"/></break>

		<case pos:line="63" pos:column="17">case <expr><name pos:line="63" pos:column="22">PING_INFO_SEQUENCE<pos:position pos:line="63" pos:column="40"/></name></expr>:<pos:position pos:line="63" pos:column="41"/></case>
			<expr_stmt><expr><name pos:line="64" pos:column="25">ret<pos:position pos:line="64" pos:column="28"/></name> <operator pos:line="64" pos:column="29">=<pos:position pos:line="64" pos:column="30"/></operator> <name pos:line="64" pos:column="31">ENOMEM<pos:position pos:line="64" pos:column="37"/></name></expr>;<pos:position pos:line="64" pos:column="38"/></expr_stmt>
			<expr_stmt><expr><operator pos:line="65" pos:column="25">*<pos:position pos:line="65" pos:column="26"/></operator><name pos:line="65" pos:column="26">buffer_len<pos:position pos:line="65" pos:column="36"/></name> <operator pos:line="65" pos:column="37">=<pos:position pos:line="65" pos:column="38"/></operator> sizeof <operator pos:line="65" pos:column="46">(<pos:position pos:line="65" pos:column="47"/></operator><name pos:line="65" pos:column="47">unsigned<pos:position pos:line="65" pos:column="55"/></name> <name pos:line="65" pos:column="56">int<pos:position pos:line="65" pos:column="59"/></name><operator pos:line="65" pos:column="59">)<pos:position pos:line="65" pos:column="60"/></operator></expr>;<pos:position pos:line="65" pos:column="61"/></expr_stmt>
			<if pos:line="66" pos:column="25">if <condition pos:line="66" pos:column="28">(<expr><name pos:line="66" pos:column="29">orig_buffer_len<pos:position pos:line="66" pos:column="44"/></name> <operator pos:line="66" pos:column="45">&lt;<pos:position pos:line="66" pos:column="49"/></operator> sizeof <operator pos:line="66" pos:column="54">(<pos:position pos:line="66" pos:column="55"/></operator><name pos:line="66" pos:column="55">unsigned<pos:position pos:line="66" pos:column="63"/></name> <name pos:line="66" pos:column="64">int<pos:position pos:line="66" pos:column="67"/></name><operator pos:line="66" pos:column="67">)<pos:position pos:line="66" pos:column="68"/></operator></expr>)<pos:position pos:line="66" pos:column="69"/></condition><then pos:line="66" pos:column="69">
				<block type="pseudo"><break pos:line="67" pos:column="33">break;<pos:position pos:line="67" pos:column="39"/></break></block></then></if>
			<expr_stmt><expr><operator pos:line="68" pos:column="25">*<pos:position pos:line="68" pos:column="26"/></operator><operator pos:line="68" pos:column="26">(<pos:position pos:line="68" pos:column="27"/></operator><operator pos:line="68" pos:column="27">(<pos:position pos:line="68" pos:column="28"/></operator><name pos:line="68" pos:column="28">unsigned<pos:position pos:line="68" pos:column="36"/></name> <name pos:line="68" pos:column="37">int<pos:position pos:line="68" pos:column="40"/></name> <operator pos:line="68" pos:column="41">*<pos:position pos:line="68" pos:column="42"/></operator><operator pos:line="68" pos:column="42">)<pos:position pos:line="68" pos:column="43"/></operator> <name pos:line="68" pos:column="44">buffer<pos:position pos:line="68" pos:column="50"/></name><operator pos:line="68" pos:column="50">)<pos:position pos:line="68" pos:column="51"/></operator> <operator pos:line="68" pos:column="52">=<pos:position pos:line="68" pos:column="53"/></operator> <operator pos:line="68" pos:column="54">(<pos:position pos:line="68" pos:column="55"/></operator><name pos:line="68" pos:column="55">unsigned<pos:position pos:line="68" pos:column="63"/></name> <name pos:line="68" pos:column="64">int<pos:position pos:line="68" pos:column="67"/></name><operator pos:line="68" pos:column="67">)<pos:position pos:line="68" pos:column="68"/></operator> <name><name pos:line="68" pos:column="69">iter<pos:position pos:line="68" pos:column="73"/></name><operator pos:line="68" pos:column="73">-&gt;<pos:position pos:line="68" pos:column="78"/></operator><name pos:line="68" pos:column="75">sequence<pos:position pos:line="68" pos:column="83"/></name></name></expr>;<pos:position pos:line="68" pos:column="84"/></expr_stmt>
			<expr_stmt><expr><name pos:line="69" pos:column="25">ret<pos:position pos:line="69" pos:column="28"/></name> <operator pos:line="69" pos:column="29">=<pos:position pos:line="69" pos:column="30"/></operator> <literal type="number" pos:line="69" pos:column="31">0<pos:position pos:line="69" pos:column="32"/></literal></expr>;<pos:position pos:line="69" pos:column="33"/></expr_stmt>
			<break pos:line="70" pos:column="25">break;<pos:position pos:line="70" pos:column="31"/></break>

		<case pos:line="72" pos:column="17">case <expr><name pos:line="72" pos:column="22">PING_INFO_IDENT<pos:position pos:line="72" pos:column="37"/></name></expr>:<pos:position pos:line="72" pos:column="38"/></case>
			<expr_stmt><expr><name pos:line="73" pos:column="25">ret<pos:position pos:line="73" pos:column="28"/></name> <operator pos:line="73" pos:column="29">=<pos:position pos:line="73" pos:column="30"/></operator> <name pos:line="73" pos:column="31">ENOMEM<pos:position pos:line="73" pos:column="37"/></name></expr>;<pos:position pos:line="73" pos:column="38"/></expr_stmt>
			<expr_stmt><expr><operator pos:line="74" pos:column="25">*<pos:position pos:line="74" pos:column="26"/></operator><name pos:line="74" pos:column="26">buffer_len<pos:position pos:line="74" pos:column="36"/></name> <operator pos:line="74" pos:column="37">=<pos:position pos:line="74" pos:column="38"/></operator> <sizeof pos:line="74" pos:column="39">sizeof <argument_list pos:line="74" pos:column="46">(<argument><expr><name pos:line="74" pos:column="47">uint16_t<pos:position pos:line="74" pos:column="55"/></name></expr></argument>)<pos:position pos:line="74" pos:column="56"/></argument_list></sizeof></expr>;<pos:position pos:line="74" pos:column="57"/></expr_stmt>
			<if pos:line="75" pos:column="25">if <condition pos:line="75" pos:column="28">(<expr><name pos:line="75" pos:column="29">orig_buffer_len<pos:position pos:line="75" pos:column="44"/></name> <operator pos:line="75" pos:column="45">&lt;<pos:position pos:line="75" pos:column="49"/></operator> <sizeof pos:line="75" pos:column="47">sizeof <argument_list pos:line="75" pos:column="54">(<argument><expr><name pos:line="75" pos:column="55">uint16_t<pos:position pos:line="75" pos:column="63"/></name></expr></argument>)<pos:position pos:line="75" pos:column="64"/></argument_list></sizeof></expr>)<pos:position pos:line="75" pos:column="65"/></condition><then pos:line="75" pos:column="65">
				<block type="pseudo"><break pos:line="76" pos:column="33">break;<pos:position pos:line="76" pos:column="39"/></break></block></then></if>
			<expr_stmt><expr><operator pos:line="77" pos:column="25">*<pos:position pos:line="77" pos:column="26"/></operator><operator pos:line="77" pos:column="26">(<pos:position pos:line="77" pos:column="27"/></operator><operator pos:line="77" pos:column="27">(<pos:position pos:line="77" pos:column="28"/></operator><name pos:line="77" pos:column="28">uint16_t<pos:position pos:line="77" pos:column="36"/></name> <operator pos:line="77" pos:column="37">*<pos:position pos:line="77" pos:column="38"/></operator><operator pos:line="77" pos:column="38">)<pos:position pos:line="77" pos:column="39"/></operator> <name pos:line="77" pos:column="40">buffer<pos:position pos:line="77" pos:column="46"/></name><operator pos:line="77" pos:column="46">)<pos:position pos:line="77" pos:column="47"/></operator> <operator pos:line="77" pos:column="48">=<pos:position pos:line="77" pos:column="49"/></operator> <operator pos:line="77" pos:column="50">(<pos:position pos:line="77" pos:column="51"/></operator><name pos:line="77" pos:column="51">uint16_t<pos:position pos:line="77" pos:column="59"/></name><operator pos:line="77" pos:column="59">)<pos:position pos:line="77" pos:column="60"/></operator> <name><name pos:line="77" pos:column="61">iter<pos:position pos:line="77" pos:column="65"/></name><operator pos:line="77" pos:column="65">-&gt;<pos:position pos:line="77" pos:column="70"/></operator><name pos:line="77" pos:column="67">ident<pos:position pos:line="77" pos:column="72"/></name></name></expr>;<pos:position pos:line="77" pos:column="73"/></expr_stmt>
			<expr_stmt><expr><name pos:line="78" pos:column="25">ret<pos:position pos:line="78" pos:column="28"/></name> <operator pos:line="78" pos:column="29">=<pos:position pos:line="78" pos:column="30"/></operator> <literal type="number" pos:line="78" pos:column="31">0<pos:position pos:line="78" pos:column="32"/></literal></expr>;<pos:position pos:line="78" pos:column="33"/></expr_stmt>
			<break pos:line="79" pos:column="25">break;<pos:position pos:line="79" pos:column="31"/></break>

		<case pos:line="81" pos:column="17">case <expr><name pos:line="81" pos:column="22">PING_INFO_DATA<pos:position pos:line="81" pos:column="36"/></name></expr>:<pos:position pos:line="81" pos:column="37"/></case>
			<expr_stmt><expr><name pos:line="82" pos:column="25">ret<pos:position pos:line="82" pos:column="28"/></name> <operator pos:line="82" pos:column="29">=<pos:position pos:line="82" pos:column="30"/></operator> <name pos:line="82" pos:column="31">ENOMEM<pos:position pos:line="82" pos:column="37"/></name></expr>;<pos:position pos:line="82" pos:column="38"/></expr_stmt>
			<expr_stmt><expr><operator pos:line="83" pos:column="25">*<pos:position pos:line="83" pos:column="26"/></operator><name pos:line="83" pos:column="26">buffer_len<pos:position pos:line="83" pos:column="36"/></name> <operator pos:line="83" pos:column="37">=<pos:position pos:line="83" pos:column="38"/></operator> <call><name pos:line="83" pos:column="39">strlen<pos:position pos:line="83" pos:column="45"/></name> <argument_list pos:line="83" pos:column="46">(<argument><expr><name><name pos:line="83" pos:column="47">iter<pos:position pos:line="83" pos:column="51"/></name><operator pos:line="83" pos:column="51">-&gt;<pos:position pos:line="83" pos:column="56"/></operator><name pos:line="83" pos:column="53">data<pos:position pos:line="83" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="83" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="59"/></expr_stmt>
			<if pos:line="84" pos:column="25">if <condition pos:line="84" pos:column="28">(<expr><name pos:line="84" pos:column="29">orig_buffer_len<pos:position pos:line="84" pos:column="44"/></name> <operator pos:line="84" pos:column="45">&lt;<pos:position pos:line="84" pos:column="49"/></operator> <operator pos:line="84" pos:column="47">*<pos:position pos:line="84" pos:column="48"/></operator><name pos:line="84" pos:column="48">buffer_len<pos:position pos:line="84" pos:column="58"/></name></expr>)<pos:position pos:line="84" pos:column="59"/></condition><then pos:line="84" pos:column="59">
				<block type="pseudo"><break pos:line="85" pos:column="33">break;<pos:position pos:line="85" pos:column="39"/></break></block></then></if>
			<expr_stmt><expr><call><name pos:line="86" pos:column="25">strncpy<pos:position pos:line="86" pos:column="32"/></name> <argument_list pos:line="86" pos:column="33">(<argument><expr><operator pos:line="86" pos:column="34">(<pos:position pos:line="86" pos:column="35"/></operator><name pos:line="86" pos:column="35">char<pos:position pos:line="86" pos:column="39"/></name> <operator pos:line="86" pos:column="40">*<pos:position pos:line="86" pos:column="41"/></operator><operator pos:line="86" pos:column="41">)<pos:position pos:line="86" pos:column="42"/></operator> <name pos:line="86" pos:column="43">buffer<pos:position pos:line="86" pos:column="49"/></name></expr></argument>, <argument><expr><name><name pos:line="86" pos:column="51">iter<pos:position pos:line="86" pos:column="55"/></name><operator pos:line="86" pos:column="55">-&gt;<pos:position pos:line="86" pos:column="60"/></operator><name pos:line="86" pos:column="57">data<pos:position pos:line="86" pos:column="61"/></name></name></expr></argument>, <argument><expr><name pos:line="86" pos:column="63">orig_buffer_len<pos:position pos:line="86" pos:column="78"/></name></expr></argument>)<pos:position pos:line="86" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="80"/></expr_stmt>
			<expr_stmt><expr><name pos:line="87" pos:column="25">ret<pos:position pos:line="87" pos:column="28"/></name> <operator pos:line="87" pos:column="29">=<pos:position pos:line="87" pos:column="30"/></operator> <literal type="number" pos:line="87" pos:column="31">0<pos:position pos:line="87" pos:column="32"/></literal></expr>;<pos:position pos:line="87" pos:column="33"/></expr_stmt>
			<break pos:line="88" pos:column="25">break;<pos:position pos:line="88" pos:column="31"/></break>
	}<pos:position pos:line="89" pos:column="10"/></block></switch>

	<return pos:line="91" pos:column="9">return <expr><operator pos:line="91" pos:column="16">(<pos:position pos:line="91" pos:column="17"/></operator><name pos:line="91" pos:column="17">ret<pos:position pos:line="91" pos:column="20"/></name><operator pos:line="91" pos:column="20">)<pos:position pos:line="91" pos:column="21"/></operator></expr>;<pos:position pos:line="91" pos:column="22"/></return>
}<pos:position pos:line="92" pos:column="2"/></block></function></unit>
