<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_213_collectd-5.6.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">putval<pos:position pos:line="1" pos:column="18"/></name> <parameter_list pos:line="1" pos:column="19">(<parameter><decl><type><name pos:line="1" pos:column="20">lcc_connection_t<pos:position pos:line="1" pos:column="36"/></name> <modifier pos:line="1" pos:column="37">*<pos:position pos:line="1" pos:column="38"/></modifier></type><name pos:line="1" pos:column="38">c<pos:position pos:line="1" pos:column="39"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="41">int<pos:position pos:line="1" pos:column="44"/></name></type> <name pos:line="1" pos:column="45">argc<pos:position pos:line="1" pos:column="49"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="51">char<pos:position pos:line="1" pos:column="55"/></name> <modifier pos:line="1" pos:column="56">*<pos:position pos:line="1" pos:column="57"/></modifier><modifier pos:line="1" pos:column="57">*<pos:position pos:line="1" pos:column="58"/></modifier></type><name pos:line="1" pos:column="58">argv<pos:position pos:line="1" pos:column="62"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="63"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">lcc_value_list_t<pos:position pos:line="3" pos:column="19"/></name></type> <name pos:line="3" pos:column="20">vl<pos:position pos:line="3" pos:column="22"/></name> <init pos:line="3" pos:column="23">= <expr><name pos:line="3" pos:column="25">LCC_VALUE_LIST_INIT<pos:position pos:line="3" pos:column="44"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="45"/></decl_stmt>

  <comment type="block" pos:line="5" pos:column="3">/* 64 ought to be enough for anybody ;-) */</comment>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">value_t<pos:position pos:line="6" pos:column="10"/></name></type> <name><name pos:line="6" pos:column="11">values<pos:position pos:line="6" pos:column="17"/></name><index pos:line="6" pos:column="17">[<expr><literal type="number" pos:line="6" pos:column="18">64<pos:position pos:line="6" pos:column="20"/></literal></expr>]<pos:position pos:line="6" pos:column="21"/></index></name></decl>;<pos:position pos:line="6" pos:column="22"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">int<pos:position pos:line="7" pos:column="6"/></name></type>     <name><name pos:line="7" pos:column="11">values_types<pos:position pos:line="7" pos:column="23"/></name><index pos:line="7" pos:column="23">[<expr><literal type="number" pos:line="7" pos:column="24">64<pos:position pos:line="7" pos:column="26"/></literal></expr>]<pos:position pos:line="7" pos:column="27"/></index></name></decl>;<pos:position pos:line="7" pos:column="28"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">size_t<pos:position pos:line="8" pos:column="9"/></name></type>  <name pos:line="8" pos:column="11">values_len<pos:position pos:line="8" pos:column="21"/></name> <init pos:line="8" pos:column="22">= <expr><literal type="number" pos:line="8" pos:column="24">0<pos:position pos:line="8" pos:column="25"/></literal></expr></init></decl>;<pos:position pos:line="8" pos:column="26"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="10" pos:column="3">int<pos:position pos:line="10" pos:column="6"/></name></type> <name pos:line="10" pos:column="7">status<pos:position pos:line="10" pos:column="13"/></name></decl>;<pos:position pos:line="10" pos:column="14"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="12" pos:column="3">assert<pos:position pos:line="12" pos:column="9"/></name> <argument_list pos:line="12" pos:column="10">(<argument><expr><call><name pos:line="12" pos:column="11">strcasecmp<pos:position pos:line="12" pos:column="21"/></name> <argument_list pos:line="12" pos:column="22">(<argument><expr><name><name pos:line="12" pos:column="23">argv<pos:position pos:line="12" pos:column="27"/></name><index pos:line="12" pos:column="27">[<expr><literal type="number" pos:line="12" pos:column="28">0<pos:position pos:line="12" pos:column="29"/></literal></expr>]<pos:position pos:line="12" pos:column="30"/></index></name></expr></argument>, <argument><expr><literal type="string" pos:line="12" pos:column="32">"putval"<pos:position pos:line="12" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="41"/></argument_list></call> <operator pos:line="12" pos:column="42">==<pos:position pos:line="12" pos:column="44"/></operator> <literal type="number" pos:line="12" pos:column="45">0<pos:position pos:line="12" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="48"/></expr_stmt>

  <if pos:line="14" pos:column="3">if <condition pos:line="14" pos:column="6">(<expr><name pos:line="14" pos:column="7">argc<pos:position pos:line="14" pos:column="11"/></name> <operator pos:line="14" pos:column="12">&lt;<pos:position pos:line="14" pos:column="16"/></operator> <literal type="number" pos:line="14" pos:column="14">3<pos:position pos:line="14" pos:column="15"/></literal></expr>)<pos:position pos:line="14" pos:column="16"/></condition><then pos:line="14" pos:column="16"> <block pos:line="14" pos:column="17">{
    <expr_stmt><expr><call><name pos:line="15" pos:column="5">fprintf<pos:position pos:line="15" pos:column="12"/></name> <argument_list pos:line="15" pos:column="13">(<argument><expr><name pos:line="15" pos:column="14">stderr<pos:position pos:line="15" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="15" pos:column="22">"ERROR: putval: Missing identifier "<pos:position pos:line="15" pos:column="58"/></literal>
        <literal type="string" pos:line="16" pos:column="9">"and/or value list.\n"<pos:position pos:line="16" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="33"/></expr_stmt>
    <return pos:line="17" pos:column="5">return <expr><operator pos:line="17" pos:column="12">(<pos:position pos:line="17" pos:column="13"/></operator><operator pos:line="17" pos:column="13">-<pos:position pos:line="17" pos:column="14"/></operator><literal type="number" pos:line="17" pos:column="14">1<pos:position pos:line="17" pos:column="15"/></literal><operator pos:line="17" pos:column="15">)<pos:position pos:line="17" pos:column="16"/></operator></expr>;<pos:position pos:line="17" pos:column="17"/></return>
  }<pos:position pos:line="18" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name><name pos:line="20" pos:column="3">vl<pos:position pos:line="20" pos:column="5"/></name><operator pos:line="20" pos:column="5">.<pos:position pos:line="20" pos:column="6"/></operator><name pos:line="20" pos:column="6">values<pos:position pos:line="20" pos:column="12"/></name></name>       <operator pos:line="20" pos:column="19">=<pos:position pos:line="20" pos:column="20"/></operator> <name pos:line="20" pos:column="21">values<pos:position pos:line="20" pos:column="27"/></name></expr>;<pos:position pos:line="20" pos:column="28"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="21" pos:column="3">vl<pos:position pos:line="21" pos:column="5"/></name><operator pos:line="21" pos:column="5">.<pos:position pos:line="21" pos:column="6"/></operator><name pos:line="21" pos:column="6">values_types<pos:position pos:line="21" pos:column="18"/></name></name> <operator pos:line="21" pos:column="19">=<pos:position pos:line="21" pos:column="20"/></operator> <name pos:line="21" pos:column="21">values_types<pos:position pos:line="21" pos:column="33"/></name></expr>;<pos:position pos:line="21" pos:column="34"/></expr_stmt>

  <expr_stmt><expr><name pos:line="23" pos:column="3">status<pos:position pos:line="23" pos:column="9"/></name> <operator pos:line="23" pos:column="10">=<pos:position pos:line="23" pos:column="11"/></operator> <call><name pos:line="23" pos:column="12">parse_identifier<pos:position pos:line="23" pos:column="28"/></name> <argument_list pos:line="23" pos:column="29">(<argument><expr><name pos:line="23" pos:column="30">c<pos:position pos:line="23" pos:column="31"/></name></expr></argument>, <argument><expr><name><name pos:line="23" pos:column="33">argv<pos:position pos:line="23" pos:column="37"/></name><index pos:line="23" pos:column="37">[<expr><literal type="number" pos:line="23" pos:column="38">1<pos:position pos:line="23" pos:column="39"/></literal></expr>]<pos:position pos:line="23" pos:column="40"/></index></name></expr></argument>, <argument><expr><operator pos:line="23" pos:column="42">&amp;<pos:position pos:line="23" pos:column="47"/></operator><name><name pos:line="23" pos:column="43">vl<pos:position pos:line="23" pos:column="45"/></name><operator pos:line="23" pos:column="45">.<pos:position pos:line="23" pos:column="46"/></operator><name pos:line="23" pos:column="46">identifier<pos:position pos:line="23" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="23" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="58"/></expr_stmt>
  <if pos:line="24" pos:column="3">if <condition pos:line="24" pos:column="6">(<expr><name pos:line="24" pos:column="7">status<pos:position pos:line="24" pos:column="13"/></name> <operator pos:line="24" pos:column="14">!=<pos:position pos:line="24" pos:column="16"/></operator> <literal type="number" pos:line="24" pos:column="17">0<pos:position pos:line="24" pos:column="18"/></literal></expr>)<pos:position pos:line="24" pos:column="19"/></condition><then pos:line="24" pos:column="19">
    <block type="pseudo"><return pos:line="25" pos:column="5">return <expr><operator pos:line="25" pos:column="12">(<pos:position pos:line="25" pos:column="13"/></operator><name pos:line="25" pos:column="13">status<pos:position pos:line="25" pos:column="19"/></name><operator pos:line="25" pos:column="19">)<pos:position pos:line="25" pos:column="20"/></operator></expr>;<pos:position pos:line="25" pos:column="21"/></return></block></then></if>

  <for pos:line="27" pos:column="3">for <control pos:line="27" pos:column="7">(<init><decl><type><name pos:line="27" pos:column="8">int<pos:position pos:line="27" pos:column="11"/></name></type> <name pos:line="27" pos:column="12">i<pos:position pos:line="27" pos:column="13"/></name> <init pos:line="27" pos:column="14">= <expr><literal type="number" pos:line="27" pos:column="16">2<pos:position pos:line="27" pos:column="17"/></literal></expr></init></decl>;<pos:position pos:line="27" pos:column="18"/></init> <condition><expr><name pos:line="27" pos:column="19">i<pos:position pos:line="27" pos:column="20"/></name> <operator pos:line="27" pos:column="21">&lt;<pos:position pos:line="27" pos:column="25"/></operator> <name pos:line="27" pos:column="23">argc<pos:position pos:line="27" pos:column="27"/></name></expr>;<pos:position pos:line="27" pos:column="28"/></condition> <incr><expr><operator pos:line="27" pos:column="29">++<pos:position pos:line="27" pos:column="31"/></operator><name pos:line="27" pos:column="31">i<pos:position pos:line="27" pos:column="32"/></name></expr></incr>)<pos:position pos:line="27" pos:column="33"/></control> <block pos:line="27" pos:column="34">{
    <decl_stmt><decl><type><name pos:line="28" pos:column="5">char<pos:position pos:line="28" pos:column="9"/></name> <modifier pos:line="28" pos:column="10">*<pos:position pos:line="28" pos:column="11"/></modifier></type><name pos:line="28" pos:column="11">tmp<pos:position pos:line="28" pos:column="14"/></name></decl>;<pos:position pos:line="28" pos:column="15"/></decl_stmt>

    <expr_stmt><expr><name pos:line="30" pos:column="5">tmp<pos:position pos:line="30" pos:column="8"/></name> <operator pos:line="30" pos:column="9">=<pos:position pos:line="30" pos:column="10"/></operator> <call><name pos:line="30" pos:column="11">strchr<pos:position pos:line="30" pos:column="17"/></name> <argument_list pos:line="30" pos:column="18">(<argument><expr><name><name pos:line="30" pos:column="19">argv<pos:position pos:line="30" pos:column="23"/></name><index pos:line="30" pos:column="23">[<expr><name pos:line="30" pos:column="24">i<pos:position pos:line="30" pos:column="25"/></name></expr>]<pos:position pos:line="30" pos:column="26"/></index></name></expr></argument>, <argument><expr><operator pos:line="30" pos:column="28">(<pos:position pos:line="30" pos:column="29"/></operator><name pos:line="30" pos:column="29">int<pos:position pos:line="30" pos:column="32"/></name><operator pos:line="30" pos:column="32">)<pos:position pos:line="30" pos:column="33"/></operator><literal type="char" pos:line="30" pos:column="33">'='<pos:position pos:line="30" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="38"/></expr_stmt>

    <if pos:line="32" pos:column="5">if <condition pos:line="32" pos:column="8">(<expr><name pos:line="32" pos:column="9">tmp<pos:position pos:line="32" pos:column="12"/></name> <operator pos:line="32" pos:column="13">!=<pos:position pos:line="32" pos:column="15"/></operator> <name pos:line="32" pos:column="16">NULL<pos:position pos:line="32" pos:column="20"/></name></expr>)<pos:position pos:line="32" pos:column="21"/></condition><then pos:line="32" pos:column="21"> <block pos:line="32" pos:column="22">{ <comment type="block" pos:line="32" pos:column="24">/* option */</comment>
      <decl_stmt><decl><type><name pos:line="33" pos:column="7">char<pos:position pos:line="33" pos:column="11"/></name> <modifier pos:line="33" pos:column="12">*<pos:position pos:line="33" pos:column="13"/></modifier></type><name pos:line="33" pos:column="13">key<pos:position pos:line="33" pos:column="16"/></name>   <init pos:line="33" pos:column="19">= <expr><name><name pos:line="33" pos:column="21">argv<pos:position pos:line="33" pos:column="25"/></name><index pos:line="33" pos:column="25">[<expr><name pos:line="33" pos:column="26">i<pos:position pos:line="33" pos:column="27"/></name></expr>]<pos:position pos:line="33" pos:column="28"/></index></name></expr></init></decl>;<pos:position pos:line="33" pos:column="29"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="34" pos:column="7">char<pos:position pos:line="34" pos:column="11"/></name> <modifier pos:line="34" pos:column="12">*<pos:position pos:line="34" pos:column="13"/></modifier></type><name pos:line="34" pos:column="13">value<pos:position pos:line="34" pos:column="18"/></name> <init pos:line="34" pos:column="19">= <expr><name pos:line="34" pos:column="21">tmp<pos:position pos:line="34" pos:column="24"/></name></expr></init></decl>;<pos:position pos:line="34" pos:column="25"/></decl_stmt>

      <expr_stmt><expr><operator pos:line="36" pos:column="7">*<pos:position pos:line="36" pos:column="8"/></operator><name pos:line="36" pos:column="8">value<pos:position pos:line="36" pos:column="13"/></name> <operator pos:line="36" pos:column="14">=<pos:position pos:line="36" pos:column="15"/></operator> <literal type="char" pos:line="36" pos:column="16">'\0'<pos:position pos:line="36" pos:column="20"/></literal></expr>;<pos:position pos:line="36" pos:column="21"/></expr_stmt>
      <expr_stmt><expr><operator pos:line="37" pos:column="7">++<pos:position pos:line="37" pos:column="9"/></operator><name pos:line="37" pos:column="9">value<pos:position pos:line="37" pos:column="14"/></name></expr>;<pos:position pos:line="37" pos:column="15"/></expr_stmt>

      <if pos:line="39" pos:column="7">if <condition pos:line="39" pos:column="10">(<expr><call><name pos:line="39" pos:column="11">strcasecmp<pos:position pos:line="39" pos:column="21"/></name> <argument_list pos:line="39" pos:column="22">(<argument><expr><name pos:line="39" pos:column="23">key<pos:position pos:line="39" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="39" pos:column="28">"interval"<pos:position pos:line="39" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="39" pos:column="39"/></argument_list></call> <operator pos:line="39" pos:column="40">==<pos:position pos:line="39" pos:column="42"/></operator> <literal type="number" pos:line="39" pos:column="43">0<pos:position pos:line="39" pos:column="44"/></literal></expr>)<pos:position pos:line="39" pos:column="45"/></condition><then pos:line="39" pos:column="45"> <block pos:line="39" pos:column="46">{
        <decl_stmt><decl><type><name pos:line="40" pos:column="9">char<pos:position pos:line="40" pos:column="13"/></name> <modifier pos:line="40" pos:column="14">*<pos:position pos:line="40" pos:column="15"/></modifier></type><name pos:line="40" pos:column="15">endptr<pos:position pos:line="40" pos:column="21"/></name></decl>;<pos:position pos:line="40" pos:column="22"/></decl_stmt>

        <expr_stmt><expr><name><name pos:line="42" pos:column="9">vl<pos:position pos:line="42" pos:column="11"/></name><operator pos:line="42" pos:column="11">.<pos:position pos:line="42" pos:column="12"/></operator><name pos:line="42" pos:column="12">interval<pos:position pos:line="42" pos:column="20"/></name></name> <operator pos:line="42" pos:column="21">=<pos:position pos:line="42" pos:column="22"/></operator> <call><name pos:line="42" pos:column="23">strtol<pos:position pos:line="42" pos:column="29"/></name> <argument_list pos:line="42" pos:column="30">(<argument><expr><name pos:line="42" pos:column="31">value<pos:position pos:line="42" pos:column="36"/></name></expr></argument>, <argument><expr><operator pos:line="42" pos:column="38">&amp;<pos:position pos:line="42" pos:column="43"/></operator><name pos:line="42" pos:column="39">endptr<pos:position pos:line="42" pos:column="45"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="42" pos:column="47">0<pos:position pos:line="42" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="42" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="50"/></expr_stmt>

        <if pos:line="44" pos:column="9">if <condition pos:line="44" pos:column="12">(<expr><name pos:line="44" pos:column="13">endptr<pos:position pos:line="44" pos:column="19"/></name> <operator pos:line="44" pos:column="20">==<pos:position pos:line="44" pos:column="22"/></operator> <name pos:line="44" pos:column="23">value<pos:position pos:line="44" pos:column="28"/></name></expr>)<pos:position pos:line="44" pos:column="29"/></condition><then pos:line="44" pos:column="29"> <block pos:line="44" pos:column="30">{
          <expr_stmt><expr><call><name pos:line="45" pos:column="11">fprintf<pos:position pos:line="45" pos:column="18"/></name> <argument_list pos:line="45" pos:column="19">(<argument><expr><name pos:line="45" pos:column="20">stderr<pos:position pos:line="45" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="45" pos:column="28">"ERROR: Failed to parse interval as number: %s.\n"<pos:position pos:line="45" pos:column="78"/></literal></expr></argument>,
              <argument><expr><name pos:line="46" pos:column="15">value<pos:position pos:line="46" pos:column="20"/></name></expr></argument>)<pos:position pos:line="46" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="22"/></expr_stmt>
          <return pos:line="47" pos:column="11">return <expr><operator pos:line="47" pos:column="18">(<pos:position pos:line="47" pos:column="19"/></operator><operator pos:line="47" pos:column="19">-<pos:position pos:line="47" pos:column="20"/></operator><literal type="number" pos:line="47" pos:column="20">1<pos:position pos:line="47" pos:column="21"/></literal><operator pos:line="47" pos:column="21">)<pos:position pos:line="47" pos:column="22"/></operator></expr>;<pos:position pos:line="47" pos:column="23"/></return>
        }<pos:position pos:line="48" pos:column="10"/></block></then>
        <elseif pos:line="49" pos:column="9">else <if pos:line="49" pos:column="14">if <condition pos:line="49" pos:column="17">(<expr><operator pos:line="49" pos:column="18">(<pos:position pos:line="49" pos:column="19"/></operator><name pos:line="49" pos:column="19">endptr<pos:position pos:line="49" pos:column="25"/></name> <operator pos:line="49" pos:column="26">!=<pos:position pos:line="49" pos:column="28"/></operator> <name pos:line="49" pos:column="29">NULL<pos:position pos:line="49" pos:column="33"/></name><operator pos:line="49" pos:column="33">)<pos:position pos:line="49" pos:column="34"/></operator> <operator pos:line="49" pos:column="35">&amp;&amp;<pos:position pos:line="49" pos:column="45"/></operator> <operator pos:line="49" pos:column="38">(<pos:position pos:line="49" pos:column="39"/></operator><operator pos:line="49" pos:column="39">*<pos:position pos:line="49" pos:column="40"/></operator><name pos:line="49" pos:column="40">endptr<pos:position pos:line="49" pos:column="46"/></name> <operator pos:line="49" pos:column="47">!=<pos:position pos:line="49" pos:column="49"/></operator> <literal type="char" pos:line="49" pos:column="50">'\0'<pos:position pos:line="49" pos:column="54"/></literal><operator pos:line="49" pos:column="54">)<pos:position pos:line="49" pos:column="55"/></operator></expr>)<pos:position pos:line="49" pos:column="56"/></condition><then pos:line="49" pos:column="56"> <block pos:line="49" pos:column="57">{
          <expr_stmt><expr><call><name pos:line="50" pos:column="11">fprintf<pos:position pos:line="50" pos:column="18"/></name> <argument_list pos:line="50" pos:column="19">(<argument><expr><name pos:line="50" pos:column="20">stderr<pos:position pos:line="50" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="50" pos:column="28">"WARNING: Ignoring trailing garbage after "<pos:position pos:line="50" pos:column="71"/></literal>
              <literal type="string" pos:line="51" pos:column="15">"interval: %s.\n"<pos:position pos:line="51" pos:column="32"/></literal></expr></argument>, <argument><expr><name pos:line="51" pos:column="34">endptr<pos:position pos:line="51" pos:column="40"/></name></expr></argument>)<pos:position pos:line="51" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="42"/></expr_stmt>
        }<pos:position pos:line="52" pos:column="10"/></block></then></if></elseif></if>
      }<pos:position pos:line="53" pos:column="8"/></block></then>
      <else pos:line="54" pos:column="7">else <block pos:line="54" pos:column="12">{
        <expr_stmt><expr><call><name pos:line="55" pos:column="9">fprintf<pos:position pos:line="55" pos:column="16"/></name> <argument_list pos:line="55" pos:column="17">(<argument><expr><name pos:line="55" pos:column="18">stderr<pos:position pos:line="55" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="55" pos:column="26">"ERROR: putval: Unknown option `%s'.\n"<pos:position pos:line="55" pos:column="65"/></literal></expr></argument>, <argument><expr><name pos:line="55" pos:column="67">key<pos:position pos:line="55" pos:column="70"/></name></expr></argument>)<pos:position pos:line="55" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="72"/></expr_stmt>
        <return pos:line="56" pos:column="9">return <expr><operator pos:line="56" pos:column="16">(<pos:position pos:line="56" pos:column="17"/></operator><operator pos:line="56" pos:column="17">-<pos:position pos:line="56" pos:column="18"/></operator><literal type="number" pos:line="56" pos:column="18">1<pos:position pos:line="56" pos:column="19"/></literal><operator pos:line="56" pos:column="19">)<pos:position pos:line="56" pos:column="20"/></operator></expr>;<pos:position pos:line="56" pos:column="21"/></return>
      }<pos:position pos:line="57" pos:column="8"/></block></else></if>
    }<pos:position pos:line="58" pos:column="6"/></block></then>
    <else pos:line="59" pos:column="5">else <block pos:line="59" pos:column="10">{ <comment type="block" pos:line="59" pos:column="12">/* value list */</comment>
      <decl_stmt><decl><type><name pos:line="60" pos:column="7">char<pos:position pos:line="60" pos:column="11"/></name> <modifier pos:line="60" pos:column="12">*<pos:position pos:line="60" pos:column="13"/></modifier></type><name pos:line="60" pos:column="13">value<pos:position pos:line="60" pos:column="18"/></name></decl>;<pos:position pos:line="60" pos:column="19"/></decl_stmt>

      <expr_stmt><expr><name pos:line="62" pos:column="7">tmp<pos:position pos:line="62" pos:column="10"/></name> <operator pos:line="62" pos:column="11">=<pos:position pos:line="62" pos:column="12"/></operator> <call><name pos:line="62" pos:column="13">strchr<pos:position pos:line="62" pos:column="19"/></name> <argument_list pos:line="62" pos:column="20">(<argument><expr><name><name pos:line="62" pos:column="21">argv<pos:position pos:line="62" pos:column="25"/></name><index pos:line="62" pos:column="25">[<expr><name pos:line="62" pos:column="26">i<pos:position pos:line="62" pos:column="27"/></name></expr>]<pos:position pos:line="62" pos:column="28"/></index></name></expr></argument>, <argument><expr><operator pos:line="62" pos:column="30">(<pos:position pos:line="62" pos:column="31"/></operator><name pos:line="62" pos:column="31">int<pos:position pos:line="62" pos:column="34"/></name><operator pos:line="62" pos:column="34">)<pos:position pos:line="62" pos:column="35"/></operator><literal type="char" pos:line="62" pos:column="35">':'<pos:position pos:line="62" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="62" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="40"/></expr_stmt>

      <if pos:line="64" pos:column="7">if <condition pos:line="64" pos:column="10">(<expr><name pos:line="64" pos:column="11">tmp<pos:position pos:line="64" pos:column="14"/></name> <operator pos:line="64" pos:column="15">==<pos:position pos:line="64" pos:column="17"/></operator> <name pos:line="64" pos:column="18">NULL<pos:position pos:line="64" pos:column="22"/></name></expr>)<pos:position pos:line="64" pos:column="23"/></condition><then pos:line="64" pos:column="23"> <block pos:line="64" pos:column="24">{
        <expr_stmt><expr><call><name pos:line="65" pos:column="9">fprintf<pos:position pos:line="65" pos:column="16"/></name> <argument_list pos:line="65" pos:column="17">(<argument><expr><name pos:line="65" pos:column="18">stderr<pos:position pos:line="65" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="65" pos:column="26">"ERROR: putval: Invalid value list: %s.\n"<pos:position pos:line="65" pos:column="68"/></literal></expr></argument>,
            <argument><expr><name><name pos:line="66" pos:column="13">argv<pos:position pos:line="66" pos:column="17"/></name><index pos:line="66" pos:column="17">[<expr><name pos:line="66" pos:column="18">i<pos:position pos:line="66" pos:column="19"/></name></expr>]<pos:position pos:line="66" pos:column="20"/></index></name></expr></argument>)<pos:position pos:line="66" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="22"/></expr_stmt>
        <return pos:line="67" pos:column="9">return <expr><operator pos:line="67" pos:column="16">(<pos:position pos:line="67" pos:column="17"/></operator><operator pos:line="67" pos:column="17">-<pos:position pos:line="67" pos:column="18"/></operator><literal type="number" pos:line="67" pos:column="18">1<pos:position pos:line="67" pos:column="19"/></literal><operator pos:line="67" pos:column="19">)<pos:position pos:line="67" pos:column="20"/></operator></expr>;<pos:position pos:line="67" pos:column="21"/></return>
      }<pos:position pos:line="68" pos:column="8"/></block></then></if>

      <expr_stmt><expr><operator pos:line="70" pos:column="7">*<pos:position pos:line="70" pos:column="8"/></operator><name pos:line="70" pos:column="8">tmp<pos:position pos:line="70" pos:column="11"/></name> <operator pos:line="70" pos:column="12">=<pos:position pos:line="70" pos:column="13"/></operator> <literal type="char" pos:line="70" pos:column="14">'\0'<pos:position pos:line="70" pos:column="18"/></literal></expr>;<pos:position pos:line="70" pos:column="19"/></expr_stmt>
      <expr_stmt><expr><operator pos:line="71" pos:column="7">++<pos:position pos:line="71" pos:column="9"/></operator><name pos:line="71" pos:column="9">tmp<pos:position pos:line="71" pos:column="12"/></name></expr>;<pos:position pos:line="71" pos:column="13"/></expr_stmt>

      <if pos:line="73" pos:column="7">if <condition pos:line="73" pos:column="10">(<expr><call><name pos:line="73" pos:column="11">strcasecmp<pos:position pos:line="73" pos:column="21"/></name> <argument_list pos:line="73" pos:column="22">(<argument><expr><name><name pos:line="73" pos:column="23">argv<pos:position pos:line="73" pos:column="27"/></name><index pos:line="73" pos:column="27">[<expr><name pos:line="73" pos:column="28">i<pos:position pos:line="73" pos:column="29"/></name></expr>]<pos:position pos:line="73" pos:column="30"/></index></name></expr></argument>, <argument><expr><literal type="string" pos:line="73" pos:column="32">"N"<pos:position pos:line="73" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="73" pos:column="36"/></argument_list></call> <operator pos:line="73" pos:column="37">==<pos:position pos:line="73" pos:column="39"/></operator> <literal type="number" pos:line="73" pos:column="40">0<pos:position pos:line="73" pos:column="41"/></literal></expr>)<pos:position pos:line="73" pos:column="42"/></condition><then pos:line="73" pos:column="42"> <block pos:line="73" pos:column="43">{
        <expr_stmt><expr><name><name pos:line="74" pos:column="9">vl<pos:position pos:line="74" pos:column="11"/></name><operator pos:line="74" pos:column="11">.<pos:position pos:line="74" pos:column="12"/></operator><name pos:line="74" pos:column="12">time<pos:position pos:line="74" pos:column="16"/></name></name> <operator pos:line="74" pos:column="17">=<pos:position pos:line="74" pos:column="18"/></operator> <literal type="number" pos:line="74" pos:column="19">0<pos:position pos:line="74" pos:column="20"/></literal></expr>;<pos:position pos:line="74" pos:column="21"/></expr_stmt>
      }<pos:position pos:line="75" pos:column="8"/></block></then>
      <else pos:line="76" pos:column="7">else <block pos:line="76" pos:column="12">{
        <decl_stmt><decl><type><name pos:line="77" pos:column="9">char<pos:position pos:line="77" pos:column="13"/></name> <modifier pos:line="77" pos:column="14">*<pos:position pos:line="77" pos:column="15"/></modifier></type><name pos:line="77" pos:column="15">endptr<pos:position pos:line="77" pos:column="21"/></name></decl>;<pos:position pos:line="77" pos:column="22"/></decl_stmt>

        <expr_stmt><expr><name><name pos:line="79" pos:column="9">vl<pos:position pos:line="79" pos:column="11"/></name><operator pos:line="79" pos:column="11">.<pos:position pos:line="79" pos:column="12"/></operator><name pos:line="79" pos:column="12">time<pos:position pos:line="79" pos:column="16"/></name></name> <operator pos:line="79" pos:column="17">=<pos:position pos:line="79" pos:column="18"/></operator> <call><name pos:line="79" pos:column="19">strtol<pos:position pos:line="79" pos:column="25"/></name> <argument_list pos:line="79" pos:column="26">(<argument><expr><name><name pos:line="79" pos:column="27">argv<pos:position pos:line="79" pos:column="31"/></name><index pos:line="79" pos:column="31">[<expr><name pos:line="79" pos:column="32">i<pos:position pos:line="79" pos:column="33"/></name></expr>]<pos:position pos:line="79" pos:column="34"/></index></name></expr></argument>, <argument><expr><operator pos:line="79" pos:column="36">&amp;<pos:position pos:line="79" pos:column="41"/></operator><name pos:line="79" pos:column="37">endptr<pos:position pos:line="79" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="79" pos:column="45">0<pos:position pos:line="79" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="79" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="48"/></expr_stmt>

        <if pos:line="81" pos:column="9">if <condition pos:line="81" pos:column="12">(<expr><name pos:line="81" pos:column="13">endptr<pos:position pos:line="81" pos:column="19"/></name> <operator pos:line="81" pos:column="20">==<pos:position pos:line="81" pos:column="22"/></operator> <name><name pos:line="81" pos:column="23">argv<pos:position pos:line="81" pos:column="27"/></name><index pos:line="81" pos:column="27">[<expr><name pos:line="81" pos:column="28">i<pos:position pos:line="81" pos:column="29"/></name></expr>]<pos:position pos:line="81" pos:column="30"/></index></name></expr>)<pos:position pos:line="81" pos:column="31"/></condition><then pos:line="81" pos:column="31"> <block pos:line="81" pos:column="32">{
          <expr_stmt><expr><call><name pos:line="82" pos:column="11">fprintf<pos:position pos:line="82" pos:column="18"/></name> <argument_list pos:line="82" pos:column="19">(<argument><expr><name pos:line="82" pos:column="20">stderr<pos:position pos:line="82" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="82" pos:column="28">"ERROR: Failed to parse time as number: %s.\n"<pos:position pos:line="82" pos:column="74"/></literal></expr></argument>,
              <argument><expr><name><name pos:line="83" pos:column="15">argv<pos:position pos:line="83" pos:column="19"/></name><index pos:line="83" pos:column="19">[<expr><name pos:line="83" pos:column="20">i<pos:position pos:line="83" pos:column="21"/></name></expr>]<pos:position pos:line="83" pos:column="22"/></index></name></expr></argument>)<pos:position pos:line="83" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="24"/></expr_stmt>
          <return pos:line="84" pos:column="11">return <expr><operator pos:line="84" pos:column="18">(<pos:position pos:line="84" pos:column="19"/></operator><operator pos:line="84" pos:column="19">-<pos:position pos:line="84" pos:column="20"/></operator><literal type="number" pos:line="84" pos:column="20">1<pos:position pos:line="84" pos:column="21"/></literal><operator pos:line="84" pos:column="21">)<pos:position pos:line="84" pos:column="22"/></operator></expr>;<pos:position pos:line="84" pos:column="23"/></return>
        }<pos:position pos:line="85" pos:column="10"/></block></then>
        <elseif pos:line="86" pos:column="9">else <if pos:line="86" pos:column="14">if <condition pos:line="86" pos:column="17">(<expr><operator pos:line="86" pos:column="18">(<pos:position pos:line="86" pos:column="19"/></operator><name pos:line="86" pos:column="19">endptr<pos:position pos:line="86" pos:column="25"/></name> <operator pos:line="86" pos:column="26">!=<pos:position pos:line="86" pos:column="28"/></operator> <name pos:line="86" pos:column="29">NULL<pos:position pos:line="86" pos:column="33"/></name><operator pos:line="86" pos:column="33">)<pos:position pos:line="86" pos:column="34"/></operator> <operator pos:line="86" pos:column="35">&amp;&amp;<pos:position pos:line="86" pos:column="45"/></operator> <operator pos:line="86" pos:column="38">(<pos:position pos:line="86" pos:column="39"/></operator><operator pos:line="86" pos:column="39">*<pos:position pos:line="86" pos:column="40"/></operator><name pos:line="86" pos:column="40">endptr<pos:position pos:line="86" pos:column="46"/></name> <operator pos:line="86" pos:column="47">!=<pos:position pos:line="86" pos:column="49"/></operator> <literal type="char" pos:line="86" pos:column="50">'\0'<pos:position pos:line="86" pos:column="54"/></literal><operator pos:line="86" pos:column="54">)<pos:position pos:line="86" pos:column="55"/></operator></expr>)<pos:position pos:line="86" pos:column="56"/></condition><then pos:line="86" pos:column="56"> <block pos:line="86" pos:column="57">{
          <expr_stmt><expr><call><name pos:line="87" pos:column="11">fprintf<pos:position pos:line="87" pos:column="18"/></name> <argument_list pos:line="87" pos:column="19">(<argument><expr><name pos:line="87" pos:column="20">stderr<pos:position pos:line="87" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="87" pos:column="28">"ERROR: Garbage after time: %s.\n"<pos:position pos:line="87" pos:column="62"/></literal></expr></argument>, <argument><expr><name pos:line="87" pos:column="64">endptr<pos:position pos:line="87" pos:column="70"/></name></expr></argument>)<pos:position pos:line="87" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="72"/></expr_stmt>
          <return pos:line="88" pos:column="11">return <expr><operator pos:line="88" pos:column="18">(<pos:position pos:line="88" pos:column="19"/></operator><operator pos:line="88" pos:column="19">-<pos:position pos:line="88" pos:column="20"/></operator><literal type="number" pos:line="88" pos:column="20">1<pos:position pos:line="88" pos:column="21"/></literal><operator pos:line="88" pos:column="21">)<pos:position pos:line="88" pos:column="22"/></operator></expr>;<pos:position pos:line="88" pos:column="23"/></return>
        }<pos:position pos:line="89" pos:column="10"/></block></then></if></elseif></if>
      }<pos:position pos:line="90" pos:column="8"/></block></else></if>

      <expr_stmt><expr><name pos:line="92" pos:column="7">values_len<pos:position pos:line="92" pos:column="17"/></name> <operator pos:line="92" pos:column="18">=<pos:position pos:line="92" pos:column="19"/></operator> <literal type="number" pos:line="92" pos:column="20">0<pos:position pos:line="92" pos:column="21"/></literal></expr>;<pos:position pos:line="92" pos:column="22"/></expr_stmt>
      <expr_stmt><expr><name pos:line="93" pos:column="7">value<pos:position pos:line="93" pos:column="12"/></name> <operator pos:line="93" pos:column="13">=<pos:position pos:line="93" pos:column="14"/></operator> <name pos:line="93" pos:column="15">tmp<pos:position pos:line="93" pos:column="18"/></name></expr>;<pos:position pos:line="93" pos:column="19"/></expr_stmt>
      <while pos:line="94" pos:column="7">while <condition pos:line="94" pos:column="13">(<expr><name pos:line="94" pos:column="14">value<pos:position pos:line="94" pos:column="19"/></name> <operator pos:line="94" pos:column="20">!=<pos:position pos:line="94" pos:column="22"/></operator> <name pos:line="94" pos:column="23">NULL<pos:position pos:line="94" pos:column="27"/></name></expr>)<pos:position pos:line="94" pos:column="28"/></condition> <block pos:line="94" pos:column="29">{
        <decl_stmt><decl><type><name pos:line="95" pos:column="9">char<pos:position pos:line="95" pos:column="13"/></name> <modifier pos:line="95" pos:column="14">*<pos:position pos:line="95" pos:column="15"/></modifier></type><name pos:line="95" pos:column="15">dot<pos:position pos:line="95" pos:column="18"/></name></decl>, <modifier pos:line="95" pos:column="20">*<pos:position pos:line="95" pos:column="21"/></modifier><decl><type ref="prev"/><name pos:line="95" pos:column="21">endptr<pos:position pos:line="95" pos:column="27"/></name></decl>;<pos:position pos:line="95" pos:column="28"/></decl_stmt>

        <expr_stmt><expr><name pos:line="97" pos:column="9">tmp<pos:position pos:line="97" pos:column="12"/></name> <operator pos:line="97" pos:column="13">=<pos:position pos:line="97" pos:column="14"/></operator> <call><name pos:line="97" pos:column="15">strchr<pos:position pos:line="97" pos:column="21"/></name> <argument_list pos:line="97" pos:column="22">(<argument><expr><name pos:line="97" pos:column="23">value<pos:position pos:line="97" pos:column="28"/></name></expr></argument>, <argument><expr><operator pos:line="97" pos:column="30">(<pos:position pos:line="97" pos:column="31"/></operator><name pos:line="97" pos:column="31">int<pos:position pos:line="97" pos:column="34"/></name><operator pos:line="97" pos:column="34">)<pos:position pos:line="97" pos:column="35"/></operator><literal type="char" pos:line="97" pos:column="35">':'<pos:position pos:line="97" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="97" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="40"/></expr_stmt>

        <if pos:line="99" pos:column="9">if <condition pos:line="99" pos:column="12">(<expr><name pos:line="99" pos:column="13">tmp<pos:position pos:line="99" pos:column="16"/></name> <operator pos:line="99" pos:column="17">!=<pos:position pos:line="99" pos:column="19"/></operator> <name pos:line="99" pos:column="20">NULL<pos:position pos:line="99" pos:column="24"/></name></expr>)<pos:position pos:line="99" pos:column="25"/></condition><then pos:line="99" pos:column="25"> <block pos:line="99" pos:column="26">{
          <expr_stmt><expr><operator pos:line="100" pos:column="11">*<pos:position pos:line="100" pos:column="12"/></operator><name pos:line="100" pos:column="12">tmp<pos:position pos:line="100" pos:column="15"/></name> <operator pos:line="100" pos:column="16">=<pos:position pos:line="100" pos:column="17"/></operator> <literal type="char" pos:line="100" pos:column="18">'\0'<pos:position pos:line="100" pos:column="22"/></literal></expr>;<pos:position pos:line="100" pos:column="23"/></expr_stmt>
          <expr_stmt><expr><operator pos:line="101" pos:column="11">++<pos:position pos:line="101" pos:column="13"/></operator><name pos:line="101" pos:column="13">tmp<pos:position pos:line="101" pos:column="16"/></name></expr>;<pos:position pos:line="101" pos:column="17"/></expr_stmt>
        }<pos:position pos:line="102" pos:column="10"/></block></then></if>

        <comment type="block" pos:line="104" pos:column="9">/* This is a bit of a hack, but parsing types.db just does not make
         * much sense imho -- the server might have different types defined
         * anyway. Also, lcc uses the type information for formatting the
         * number only, so the real meaning does not matter. -tokkee */</comment>
        <expr_stmt><expr><name pos:line="108" pos:column="9">dot<pos:position pos:line="108" pos:column="12"/></name> <operator pos:line="108" pos:column="13">=<pos:position pos:line="108" pos:column="14"/></operator> <call><name pos:line="108" pos:column="15">strchr<pos:position pos:line="108" pos:column="21"/></name> <argument_list pos:line="108" pos:column="22">(<argument><expr><name pos:line="108" pos:column="23">value<pos:position pos:line="108" pos:column="28"/></name></expr></argument>, <argument><expr><operator pos:line="108" pos:column="30">(<pos:position pos:line="108" pos:column="31"/></operator><name pos:line="108" pos:column="31">int<pos:position pos:line="108" pos:column="34"/></name><operator pos:line="108" pos:column="34">)<pos:position pos:line="108" pos:column="35"/></operator><literal type="char" pos:line="108" pos:column="35">'.'<pos:position pos:line="108" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="108" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="108" pos:column="40"/></expr_stmt>
        <expr_stmt><expr><name pos:line="109" pos:column="9">endptr<pos:position pos:line="109" pos:column="15"/></name> <operator pos:line="109" pos:column="16">=<pos:position pos:line="109" pos:column="17"/></operator> <name pos:line="109" pos:column="18">NULL<pos:position pos:line="109" pos:column="22"/></name></expr>;<pos:position pos:line="109" pos:column="23"/></expr_stmt>
        <if pos:line="110" pos:column="9">if <condition pos:line="110" pos:column="12">(<expr><call><name pos:line="110" pos:column="13">strcasecmp<pos:position pos:line="110" pos:column="23"/></name> <argument_list pos:line="110" pos:column="24">(<argument><expr><name pos:line="110" pos:column="25">value<pos:position pos:line="110" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="110" pos:column="32">"U"<pos:position pos:line="110" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="110" pos:column="36"/></argument_list></call> <operator pos:line="110" pos:column="37">==<pos:position pos:line="110" pos:column="39"/></operator> <literal type="number" pos:line="110" pos:column="40">0<pos:position pos:line="110" pos:column="41"/></literal></expr>)<pos:position pos:line="110" pos:column="42"/></condition><then pos:line="110" pos:column="42"> <block pos:line="110" pos:column="43">{
          <expr_stmt><expr><name><name pos:line="111" pos:column="11">values<pos:position pos:line="111" pos:column="17"/></name><index pos:line="111" pos:column="17">[<expr><name pos:line="111" pos:column="18">values_len<pos:position pos:line="111" pos:column="28"/></name></expr>]<pos:position pos:line="111" pos:column="29"/></index></name><operator pos:line="111" pos:column="29">.<pos:position pos:line="111" pos:column="30"/></operator><name pos:line="111" pos:column="30">gauge<pos:position pos:line="111" pos:column="35"/></name> <operator pos:line="111" pos:column="36">=<pos:position pos:line="111" pos:column="37"/></operator> <name pos:line="111" pos:column="38">NAN<pos:position pos:line="111" pos:column="41"/></name></expr>;<pos:position pos:line="111" pos:column="42"/></expr_stmt>
          <expr_stmt><expr><name><name pos:line="112" pos:column="11">values_types<pos:position pos:line="112" pos:column="23"/></name><index pos:line="112" pos:column="23">[<expr><name pos:line="112" pos:column="24">values_len<pos:position pos:line="112" pos:column="34"/></name></expr>]<pos:position pos:line="112" pos:column="35"/></index></name> <operator pos:line="112" pos:column="36">=<pos:position pos:line="112" pos:column="37"/></operator> <name pos:line="112" pos:column="38">LCC_TYPE_GAUGE<pos:position pos:line="112" pos:column="52"/></name></expr>;<pos:position pos:line="112" pos:column="53"/></expr_stmt>
        }<pos:position pos:line="113" pos:column="10"/></block></then>
        <elseif pos:line="114" pos:column="9">else <if pos:line="114" pos:column="14">if <condition pos:line="114" pos:column="17">(<expr><name pos:line="114" pos:column="18">dot<pos:position pos:line="114" pos:column="21"/></name></expr>)<pos:position pos:line="114" pos:column="22"/></condition><then pos:line="114" pos:column="22"> <block pos:line="114" pos:column="23">{ <comment type="block" pos:line="114" pos:column="25">/* floating point value */</comment>
          <expr_stmt><expr><name><name pos:line="115" pos:column="11">values<pos:position pos:line="115" pos:column="17"/></name><index pos:line="115" pos:column="17">[<expr><name pos:line="115" pos:column="18">values_len<pos:position pos:line="115" pos:column="28"/></name></expr>]<pos:position pos:line="115" pos:column="29"/></index></name><operator pos:line="115" pos:column="29">.<pos:position pos:line="115" pos:column="30"/></operator><name pos:line="115" pos:column="30">gauge<pos:position pos:line="115" pos:column="35"/></name> <operator pos:line="115" pos:column="36">=<pos:position pos:line="115" pos:column="37"/></operator> <call><name pos:line="115" pos:column="38">strtod<pos:position pos:line="115" pos:column="44"/></name> <argument_list pos:line="115" pos:column="45">(<argument><expr><name pos:line="115" pos:column="46">value<pos:position pos:line="115" pos:column="51"/></name></expr></argument>, <argument><expr><operator pos:line="115" pos:column="53">&amp;<pos:position pos:line="115" pos:column="58"/></operator><name pos:line="115" pos:column="54">endptr<pos:position pos:line="115" pos:column="60"/></name></expr></argument>)<pos:position pos:line="115" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="115" pos:column="62"/></expr_stmt>
          <expr_stmt><expr><name><name pos:line="116" pos:column="11">values_types<pos:position pos:line="116" pos:column="23"/></name><index pos:line="116" pos:column="23">[<expr><name pos:line="116" pos:column="24">values_len<pos:position pos:line="116" pos:column="34"/></name></expr>]<pos:position pos:line="116" pos:column="35"/></index></name> <operator pos:line="116" pos:column="36">=<pos:position pos:line="116" pos:column="37"/></operator> <name pos:line="116" pos:column="38">LCC_TYPE_GAUGE<pos:position pos:line="116" pos:column="52"/></name></expr>;<pos:position pos:line="116" pos:column="53"/></expr_stmt>
        }<pos:position pos:line="117" pos:column="10"/></block></then></if></elseif>
        <else pos:line="118" pos:column="9">else <block pos:line="118" pos:column="14">{ <comment type="block" pos:line="118" pos:column="16">/* integer */</comment>
          <expr_stmt><expr><name><name pos:line="119" pos:column="11">values<pos:position pos:line="119" pos:column="17"/></name><index pos:line="119" pos:column="17">[<expr><name pos:line="119" pos:column="18">values_len<pos:position pos:line="119" pos:column="28"/></name></expr>]<pos:position pos:line="119" pos:column="29"/></index></name><operator pos:line="119" pos:column="29">.<pos:position pos:line="119" pos:column="30"/></operator><name pos:line="119" pos:column="30">counter<pos:position pos:line="119" pos:column="37"/></name> <operator pos:line="119" pos:column="38">=<pos:position pos:line="119" pos:column="39"/></operator> <operator pos:line="119" pos:column="40">(<pos:position pos:line="119" pos:column="41"/></operator><name pos:line="119" pos:column="41">counter_t<pos:position pos:line="119" pos:column="50"/></name><operator pos:line="119" pos:column="50">)<pos:position pos:line="119" pos:column="51"/></operator> <call><name pos:line="119" pos:column="52">strtoull<pos:position pos:line="119" pos:column="60"/></name> <argument_list pos:line="119" pos:column="61">(<argument><expr><name pos:line="119" pos:column="62">value<pos:position pos:line="119" pos:column="67"/></name></expr></argument>, <argument><expr><operator pos:line="119" pos:column="69">&amp;<pos:position pos:line="119" pos:column="74"/></operator><name pos:line="119" pos:column="70">endptr<pos:position pos:line="119" pos:column="76"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="119" pos:column="78">0<pos:position pos:line="119" pos:column="79"/></literal></expr></argument>)<pos:position pos:line="119" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="119" pos:column="81"/></expr_stmt>
          <expr_stmt><expr><name><name pos:line="120" pos:column="11">values_types<pos:position pos:line="120" pos:column="23"/></name><index pos:line="120" pos:column="23">[<expr><name pos:line="120" pos:column="24">values_len<pos:position pos:line="120" pos:column="34"/></name></expr>]<pos:position pos:line="120" pos:column="35"/></index></name> <operator pos:line="120" pos:column="36">=<pos:position pos:line="120" pos:column="37"/></operator> <name pos:line="120" pos:column="38">LCC_TYPE_COUNTER<pos:position pos:line="120" pos:column="54"/></name></expr>;<pos:position pos:line="120" pos:column="55"/></expr_stmt>
        }<pos:position pos:line="121" pos:column="10"/></block></else></if>
        <expr_stmt><expr><operator pos:line="122" pos:column="9">++<pos:position pos:line="122" pos:column="11"/></operator><name pos:line="122" pos:column="11">values_len<pos:position pos:line="122" pos:column="21"/></name></expr>;<pos:position pos:line="122" pos:column="22"/></expr_stmt>

        <if pos:line="124" pos:column="9">if <condition pos:line="124" pos:column="12">(<expr><name pos:line="124" pos:column="13">endptr<pos:position pos:line="124" pos:column="19"/></name> <operator pos:line="124" pos:column="20">==<pos:position pos:line="124" pos:column="22"/></operator> <name pos:line="124" pos:column="23">value<pos:position pos:line="124" pos:column="28"/></name></expr>)<pos:position pos:line="124" pos:column="29"/></condition><then pos:line="124" pos:column="29"> <block pos:line="124" pos:column="30">{
          <expr_stmt><expr><call><name pos:line="125" pos:column="11">fprintf<pos:position pos:line="125" pos:column="18"/></name> <argument_list pos:line="125" pos:column="19">(<argument><expr><name pos:line="125" pos:column="20">stderr<pos:position pos:line="125" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="125" pos:column="28">"ERROR: Failed to parse value as number: %s.\n"<pos:position pos:line="125" pos:column="75"/></literal></expr></argument>,
              <argument><expr><name><name pos:line="126" pos:column="15">argv<pos:position pos:line="126" pos:column="19"/></name><index pos:line="126" pos:column="19">[<expr><name pos:line="126" pos:column="20">i<pos:position pos:line="126" pos:column="21"/></name></expr>]<pos:position pos:line="126" pos:column="22"/></index></name></expr></argument>)<pos:position pos:line="126" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="126" pos:column="24"/></expr_stmt>
          <return pos:line="127" pos:column="11">return <expr><operator pos:line="127" pos:column="18">(<pos:position pos:line="127" pos:column="19"/></operator><operator pos:line="127" pos:column="19">-<pos:position pos:line="127" pos:column="20"/></operator><literal type="number" pos:line="127" pos:column="20">1<pos:position pos:line="127" pos:column="21"/></literal><operator pos:line="127" pos:column="21">)<pos:position pos:line="127" pos:column="22"/></operator></expr>;<pos:position pos:line="127" pos:column="23"/></return>
        }<pos:position pos:line="128" pos:column="10"/></block></then>
        <elseif pos:line="129" pos:column="9">else <if pos:line="129" pos:column="14">if <condition pos:line="129" pos:column="17">(<expr><operator pos:line="129" pos:column="18">(<pos:position pos:line="129" pos:column="19"/></operator><name pos:line="129" pos:column="19">endptr<pos:position pos:line="129" pos:column="25"/></name> <operator pos:line="129" pos:column="26">!=<pos:position pos:line="129" pos:column="28"/></operator> <name pos:line="129" pos:column="29">NULL<pos:position pos:line="129" pos:column="33"/></name><operator pos:line="129" pos:column="33">)<pos:position pos:line="129" pos:column="34"/></operator> <operator pos:line="129" pos:column="35">&amp;&amp;<pos:position pos:line="129" pos:column="45"/></operator> <operator pos:line="129" pos:column="38">(<pos:position pos:line="129" pos:column="39"/></operator><operator pos:line="129" pos:column="39">*<pos:position pos:line="129" pos:column="40"/></operator><name pos:line="129" pos:column="40">endptr<pos:position pos:line="129" pos:column="46"/></name> <operator pos:line="129" pos:column="47">!=<pos:position pos:line="129" pos:column="49"/></operator> <literal type="char" pos:line="129" pos:column="50">'\0'<pos:position pos:line="129" pos:column="54"/></literal><operator pos:line="129" pos:column="54">)<pos:position pos:line="129" pos:column="55"/></operator></expr>)<pos:position pos:line="129" pos:column="56"/></condition><then pos:line="129" pos:column="56"> <block pos:line="129" pos:column="57">{
          <expr_stmt><expr><call><name pos:line="130" pos:column="11">fprintf<pos:position pos:line="130" pos:column="18"/></name> <argument_list pos:line="130" pos:column="19">(<argument><expr><name pos:line="130" pos:column="20">stderr<pos:position pos:line="130" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="130" pos:column="28">"ERROR: Garbage after value: %s.\n"<pos:position pos:line="130" pos:column="63"/></literal></expr></argument>, <argument><expr><name pos:line="130" pos:column="65">endptr<pos:position pos:line="130" pos:column="71"/></name></expr></argument>)<pos:position pos:line="130" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="130" pos:column="73"/></expr_stmt>
          <return pos:line="131" pos:column="11">return <expr><operator pos:line="131" pos:column="18">(<pos:position pos:line="131" pos:column="19"/></operator><operator pos:line="131" pos:column="19">-<pos:position pos:line="131" pos:column="20"/></operator><literal type="number" pos:line="131" pos:column="20">1<pos:position pos:line="131" pos:column="21"/></literal><operator pos:line="131" pos:column="21">)<pos:position pos:line="131" pos:column="22"/></operator></expr>;<pos:position pos:line="131" pos:column="23"/></return>
        }<pos:position pos:line="132" pos:column="10"/></block></then></if></elseif></if>

        <expr_stmt><expr><name pos:line="134" pos:column="9">value<pos:position pos:line="134" pos:column="14"/></name> <operator pos:line="134" pos:column="15">=<pos:position pos:line="134" pos:column="16"/></operator> <name pos:line="134" pos:column="17">tmp<pos:position pos:line="134" pos:column="20"/></name></expr>;<pos:position pos:line="134" pos:column="21"/></expr_stmt>
      }<pos:position pos:line="135" pos:column="8"/></block></while>

      <expr_stmt><expr><call><name pos:line="137" pos:column="7">assert<pos:position pos:line="137" pos:column="13"/></name> <argument_list pos:line="137" pos:column="14">(<argument><expr><name pos:line="137" pos:column="15">values_len<pos:position pos:line="137" pos:column="25"/></name> <operator pos:line="137" pos:column="26">&gt;=<pos:position pos:line="137" pos:column="31"/></operator> <literal type="number" pos:line="137" pos:column="29">1<pos:position pos:line="137" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="137" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="137" pos:column="32"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="138" pos:column="7">vl<pos:position pos:line="138" pos:column="9"/></name><operator pos:line="138" pos:column="9">.<pos:position pos:line="138" pos:column="10"/></operator><name pos:line="138" pos:column="10">values_len<pos:position pos:line="138" pos:column="20"/></name></name> <operator pos:line="138" pos:column="21">=<pos:position pos:line="138" pos:column="22"/></operator> <name pos:line="138" pos:column="23">values_len<pos:position pos:line="138" pos:column="33"/></name></expr>;<pos:position pos:line="138" pos:column="34"/></expr_stmt>

      <expr_stmt><expr><name pos:line="140" pos:column="7">status<pos:position pos:line="140" pos:column="13"/></name> <operator pos:line="140" pos:column="14">=<pos:position pos:line="140" pos:column="15"/></operator> <call><name pos:line="140" pos:column="16">lcc_putval<pos:position pos:line="140" pos:column="26"/></name> <argument_list pos:line="140" pos:column="27">(<argument><expr><name pos:line="140" pos:column="28">c<pos:position pos:line="140" pos:column="29"/></name></expr></argument>, <argument><expr><operator pos:line="140" pos:column="31">&amp;<pos:position pos:line="140" pos:column="36"/></operator><name pos:line="140" pos:column="32">vl<pos:position pos:line="140" pos:column="34"/></name></expr></argument>)<pos:position pos:line="140" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="140" pos:column="36"/></expr_stmt>
      <if pos:line="141" pos:column="7">if <condition pos:line="141" pos:column="10">(<expr><name pos:line="141" pos:column="11">status<pos:position pos:line="141" pos:column="17"/></name> <operator pos:line="141" pos:column="18">!=<pos:position pos:line="141" pos:column="20"/></operator> <literal type="number" pos:line="141" pos:column="21">0<pos:position pos:line="141" pos:column="22"/></literal></expr>)<pos:position pos:line="141" pos:column="23"/></condition><then pos:line="141" pos:column="23"> <block pos:line="141" pos:column="24">{
        <expr_stmt><expr><call><name pos:line="142" pos:column="9">fprintf<pos:position pos:line="142" pos:column="16"/></name> <argument_list pos:line="142" pos:column="17">(<argument><expr><name pos:line="142" pos:column="18">stderr<pos:position pos:line="142" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="142" pos:column="26">"ERROR: %s\n"<pos:position pos:line="142" pos:column="39"/></literal></expr></argument>, <argument><expr><call><name pos:line="142" pos:column="41">lcc_strerror<pos:position pos:line="142" pos:column="53"/></name> <argument_list pos:line="142" pos:column="54">(<argument><expr><name pos:line="142" pos:column="55">c<pos:position pos:line="142" pos:column="56"/></name></expr></argument>)<pos:position pos:line="142" pos:column="57"/></argument_list></call></expr></argument>)<pos:position pos:line="142" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="142" pos:column="59"/></expr_stmt>
        <return pos:line="143" pos:column="9">return <expr><operator pos:line="143" pos:column="16">(<pos:position pos:line="143" pos:column="17"/></operator><operator pos:line="143" pos:column="17">-<pos:position pos:line="143" pos:column="18"/></operator><literal type="number" pos:line="143" pos:column="18">1<pos:position pos:line="143" pos:column="19"/></literal><operator pos:line="143" pos:column="19">)<pos:position pos:line="143" pos:column="20"/></operator></expr>;<pos:position pos:line="143" pos:column="21"/></return>
      }<pos:position pos:line="144" pos:column="8"/></block></then></if>
    }<pos:position pos:line="145" pos:column="6"/></block></else></if>
  }<pos:position pos:line="146" pos:column="4"/></block></for>

  <if pos:line="148" pos:column="3">if <condition pos:line="148" pos:column="6">(<expr><name pos:line="148" pos:column="7">values_len<pos:position pos:line="148" pos:column="17"/></name> <operator pos:line="148" pos:column="18">==<pos:position pos:line="148" pos:column="20"/></operator> <literal type="number" pos:line="148" pos:column="21">0<pos:position pos:line="148" pos:column="22"/></literal></expr>)<pos:position pos:line="148" pos:column="23"/></condition><then pos:line="148" pos:column="23"> <block pos:line="148" pos:column="24">{
    <expr_stmt><expr><call><name pos:line="149" pos:column="5">fprintf<pos:position pos:line="149" pos:column="12"/></name> <argument_list pos:line="149" pos:column="13">(<argument><expr><name pos:line="149" pos:column="14">stderr<pos:position pos:line="149" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="149" pos:column="22">"ERROR: putval: Missing value list(s).\n"<pos:position pos:line="149" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="149" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="149" pos:column="65"/></expr_stmt>
    <return pos:line="150" pos:column="5">return <expr><operator pos:line="150" pos:column="12">(<pos:position pos:line="150" pos:column="13"/></operator><operator pos:line="150" pos:column="13">-<pos:position pos:line="150" pos:column="14"/></operator><literal type="number" pos:line="150" pos:column="14">1<pos:position pos:line="150" pos:column="15"/></literal><operator pos:line="150" pos:column="15">)<pos:position pos:line="150" pos:column="16"/></operator></expr>;<pos:position pos:line="150" pos:column="17"/></return>
  }<pos:position pos:line="151" pos:column="4"/></block></then></if>
  <return pos:line="152" pos:column="3">return <expr><operator pos:line="152" pos:column="10">(<pos:position pos:line="152" pos:column="11"/></operator><literal type="number" pos:line="152" pos:column="11">0<pos:position pos:line="152" pos:column="12"/></literal><operator pos:line="152" pos:column="12">)<pos:position pos:line="152" pos:column="13"/></operator></expr>;<pos:position pos:line="152" pos:column="14"/></return>
}<pos:position pos:line="153" pos:column="2"/></block></function></unit>
