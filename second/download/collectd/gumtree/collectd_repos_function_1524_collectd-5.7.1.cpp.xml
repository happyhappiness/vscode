<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1524_collectd-5.7.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">metric_cmp<pos:position pos:line="1" pos:column="22"/></name><parameter_list pos:line="1" pos:column="22">(<parameter><decl><type><name pos:line="1" pos:column="23">void<pos:position pos:line="1" pos:column="27"/></name> <specifier pos:line="1" pos:column="28">const<pos:position pos:line="1" pos:column="33"/></specifier> <modifier pos:line="1" pos:column="34">*<pos:position pos:line="1" pos:column="35"/></modifier></type><name pos:line="1" pos:column="35">a<pos:position pos:line="1" pos:column="36"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="38">void<pos:position pos:line="1" pos:column="42"/></name> <specifier pos:line="1" pos:column="43">const<pos:position pos:line="1" pos:column="48"/></specifier> <modifier pos:line="1" pos:column="49">*<pos:position pos:line="1" pos:column="50"/></modifier></type><name pos:line="1" pos:column="50">b<pos:position pos:line="1" pos:column="51"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="52"/></parameter_list> <block pos:line="1" pos:column="53">{
  <decl_stmt><decl><type><name pos:line="2" pos:column="3">Io__Prometheus__Client__Metric<pos:position pos:line="2" pos:column="33"/></name> <specifier pos:line="2" pos:column="34">const<pos:position pos:line="2" pos:column="39"/></specifier> <modifier pos:line="2" pos:column="40">*<pos:position pos:line="2" pos:column="41"/></modifier></type><name pos:line="2" pos:column="41">m_a<pos:position pos:line="2" pos:column="44"/></name> <init pos:line="2" pos:column="45">=
      <expr><operator pos:line="3" pos:column="7">*<pos:position pos:line="3" pos:column="8"/></operator><operator pos:line="3" pos:column="8">(<pos:position pos:line="3" pos:column="9"/></operator><operator pos:line="3" pos:column="9">(<pos:position pos:line="3" pos:column="10"/></operator><name pos:line="3" pos:column="10">Io__Prometheus__Client__Metric<pos:position pos:line="3" pos:column="40"/></name> <operator pos:line="3" pos:column="41">*<pos:position pos:line="3" pos:column="42"/></operator><operator pos:line="3" pos:column="42">*<pos:position pos:line="3" pos:column="43"/></operator><operator pos:line="3" pos:column="43">)<pos:position pos:line="3" pos:column="44"/></operator><name pos:line="3" pos:column="44">a<pos:position pos:line="3" pos:column="45"/></name><operator pos:line="3" pos:column="45">)<pos:position pos:line="3" pos:column="46"/></operator></expr></init></decl>;<pos:position pos:line="3" pos:column="47"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">Io__Prometheus__Client__Metric<pos:position pos:line="4" pos:column="33"/></name> <specifier pos:line="4" pos:column="34">const<pos:position pos:line="4" pos:column="39"/></specifier> <modifier pos:line="4" pos:column="40">*<pos:position pos:line="4" pos:column="41"/></modifier></type><name pos:line="4" pos:column="41">m_b<pos:position pos:line="4" pos:column="44"/></name> <init pos:line="4" pos:column="45">=
      <expr><operator pos:line="5" pos:column="7">*<pos:position pos:line="5" pos:column="8"/></operator><operator pos:line="5" pos:column="8">(<pos:position pos:line="5" pos:column="9"/></operator><operator pos:line="5" pos:column="9">(<pos:position pos:line="5" pos:column="10"/></operator><name pos:line="5" pos:column="10">Io__Prometheus__Client__Metric<pos:position pos:line="5" pos:column="40"/></name> <operator pos:line="5" pos:column="41">*<pos:position pos:line="5" pos:column="42"/></operator><operator pos:line="5" pos:column="42">*<pos:position pos:line="5" pos:column="43"/></operator><operator pos:line="5" pos:column="43">)<pos:position pos:line="5" pos:column="44"/></operator><name pos:line="5" pos:column="44">b<pos:position pos:line="5" pos:column="45"/></name><operator pos:line="5" pos:column="45">)<pos:position pos:line="5" pos:column="46"/></operator></expr></init></decl>;<pos:position pos:line="5" pos:column="47"/></decl_stmt>

  <if pos:line="7" pos:column="3">if <condition pos:line="7" pos:column="6">(<expr><name><name pos:line="7" pos:column="7">m_a<pos:position pos:line="7" pos:column="10"/></name><operator pos:line="7" pos:column="10">-&gt;<pos:position pos:line="7" pos:column="15"/></operator><name pos:line="7" pos:column="12">n_label<pos:position pos:line="7" pos:column="19"/></name></name> <operator pos:line="7" pos:column="20">&lt;<pos:position pos:line="7" pos:column="24"/></operator> <name><name pos:line="7" pos:column="22">m_b<pos:position pos:line="7" pos:column="25"/></name><operator pos:line="7" pos:column="25">-&gt;<pos:position pos:line="7" pos:column="30"/></operator><name pos:line="7" pos:column="27">n_label<pos:position pos:line="7" pos:column="34"/></name></name></expr>)<pos:position pos:line="7" pos:column="35"/></condition><then pos:line="7" pos:column="35">
    <block type="pseudo"><return pos:line="8" pos:column="5">return <expr><operator pos:line="8" pos:column="12">-<pos:position pos:line="8" pos:column="13"/></operator><literal type="number" pos:line="8" pos:column="13">1<pos:position pos:line="8" pos:column="14"/></literal></expr>;<pos:position pos:line="8" pos:column="15"/></return></block></then>
  <elseif pos:line="9" pos:column="3">else <if pos:line="9" pos:column="8">if <condition pos:line="9" pos:column="11">(<expr><name><name pos:line="9" pos:column="12">m_a<pos:position pos:line="9" pos:column="15"/></name><operator pos:line="9" pos:column="15">-&gt;<pos:position pos:line="9" pos:column="20"/></operator><name pos:line="9" pos:column="17">n_label<pos:position pos:line="9" pos:column="24"/></name></name> <operator pos:line="9" pos:column="25">&gt;<pos:position pos:line="9" pos:column="29"/></operator> <name><name pos:line="9" pos:column="27">m_b<pos:position pos:line="9" pos:column="30"/></name><operator pos:line="9" pos:column="30">-&gt;<pos:position pos:line="9" pos:column="35"/></operator><name pos:line="9" pos:column="32">n_label<pos:position pos:line="9" pos:column="39"/></name></name></expr>)<pos:position pos:line="9" pos:column="40"/></condition><then pos:line="9" pos:column="40">
    <block type="pseudo"><return pos:line="10" pos:column="5">return <expr><literal type="number" pos:line="10" pos:column="12">1<pos:position pos:line="10" pos:column="13"/></literal></expr>;<pos:position pos:line="10" pos:column="14"/></return></block></then></if></elseif></if>

  <comment type="block" pos:line="12" pos:column="3">/* Prometheus does not care about the order of labels. All labels in this
   * plugin are created by METRIC_ADD_LABELS(), though, and therefore always
   * appear in the same order. We take advantage of this and simplify the check
   * by making sure all labels are the same in each position.
   *
   * We also only need to check the label values, because the label names are
   * the same for all metrics in a metric family.
   *
   * 3 labels:
   * [0] $plugin="$plugin_instance" =&gt; $plugin is the same within a family
   * [1] type="$type_instance"      =&gt; "type" is a static string
   * [2] instance="$host"           =&gt; "instance" is a static string
   *
   * 2 labels, variant 1:
   * [0] $plugin="$plugin_instance" =&gt; $plugin is the same within a family
   * [1] instance="$host"           =&gt; "instance" is a static string
   *
   * 2 labels, variant 2:
   * [0] $plugin="$type_instance"   =&gt; $plugin is the same within a family
   * [1] instance="$host"           =&gt; "instance" is a static string
   *
   * 1 label:
   * [1] instance="$host"           =&gt; "instance" is a static string
   */</comment>
  <for pos:line="36" pos:column="3">for <control pos:line="36" pos:column="7">(<init><decl><type><name pos:line="36" pos:column="8">size_t<pos:position pos:line="36" pos:column="14"/></name></type> <name pos:line="36" pos:column="15">i<pos:position pos:line="36" pos:column="16"/></name> <init pos:line="36" pos:column="17">= <expr><literal type="number" pos:line="36" pos:column="19">0<pos:position pos:line="36" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="36" pos:column="21"/></init> <condition><expr><name pos:line="36" pos:column="22">i<pos:position pos:line="36" pos:column="23"/></name> <operator pos:line="36" pos:column="24">&lt;<pos:position pos:line="36" pos:column="28"/></operator> <name><name pos:line="36" pos:column="26">m_a<pos:position pos:line="36" pos:column="29"/></name><operator pos:line="36" pos:column="29">-&gt;<pos:position pos:line="36" pos:column="34"/></operator><name pos:line="36" pos:column="31">n_label<pos:position pos:line="36" pos:column="38"/></name></name></expr>;<pos:position pos:line="36" pos:column="39"/></condition> <incr><expr><name pos:line="36" pos:column="40">i<pos:position pos:line="36" pos:column="41"/></name><operator pos:line="36" pos:column="41">++<pos:position pos:line="36" pos:column="43"/></operator></expr></incr>)<pos:position pos:line="36" pos:column="44"/></control> <block pos:line="36" pos:column="45">{
    <decl_stmt><decl><type><name pos:line="37" pos:column="5">int<pos:position pos:line="37" pos:column="8"/></name></type> <name pos:line="37" pos:column="9">status<pos:position pos:line="37" pos:column="15"/></name> <init pos:line="37" pos:column="16">= <expr><call><name pos:line="37" pos:column="18">strcmp<pos:position pos:line="37" pos:column="24"/></name><argument_list pos:line="37" pos:column="24">(<argument><expr><name><name pos:line="37" pos:column="25">m_a<pos:position pos:line="37" pos:column="28"/></name><operator pos:line="37" pos:column="28">-&gt;<pos:position pos:line="37" pos:column="33"/></operator><name pos:line="37" pos:column="30">label<pos:position pos:line="37" pos:column="35"/></name><index pos:line="37" pos:column="35">[<expr><name pos:line="37" pos:column="36">i<pos:position pos:line="37" pos:column="37"/></name></expr>]<pos:position pos:line="37" pos:column="38"/></index></name><operator pos:line="37" pos:column="38">-&gt;<pos:position pos:line="37" pos:column="43"/></operator><name pos:line="37" pos:column="40">value<pos:position pos:line="37" pos:column="45"/></name></expr></argument>, <argument><expr><name><name pos:line="37" pos:column="47">m_b<pos:position pos:line="37" pos:column="50"/></name><operator pos:line="37" pos:column="50">-&gt;<pos:position pos:line="37" pos:column="55"/></operator><name pos:line="37" pos:column="52">label<pos:position pos:line="37" pos:column="57"/></name><index pos:line="37" pos:column="57">[<expr><name pos:line="37" pos:column="58">i<pos:position pos:line="37" pos:column="59"/></name></expr>]<pos:position pos:line="37" pos:column="60"/></index></name><operator pos:line="37" pos:column="60">-&gt;<pos:position pos:line="37" pos:column="65"/></operator><name pos:line="37" pos:column="62">value<pos:position pos:line="37" pos:column="67"/></name></expr></argument>)<pos:position pos:line="37" pos:column="68"/></argument_list></call></expr></init></decl>;<pos:position pos:line="37" pos:column="69"/></decl_stmt>
    <if pos:line="38" pos:column="5">if <condition pos:line="38" pos:column="8">(<expr><name pos:line="38" pos:column="9">status<pos:position pos:line="38" pos:column="15"/></name> <operator pos:line="38" pos:column="16">!=<pos:position pos:line="38" pos:column="18"/></operator> <literal type="number" pos:line="38" pos:column="19">0<pos:position pos:line="38" pos:column="20"/></literal></expr>)<pos:position pos:line="38" pos:column="21"/></condition><then pos:line="38" pos:column="21">
      <block type="pseudo"><return pos:line="39" pos:column="7">return <expr><name pos:line="39" pos:column="14">status<pos:position pos:line="39" pos:column="20"/></name></expr>;<pos:position pos:line="39" pos:column="21"/></return></block></then></if>

<cpp:if pos:line="41" pos:column="1">#<cpp:directive pos:line="41" pos:column="2">if<pos:position pos:line="41" pos:column="4"/></cpp:directive> <expr><name pos:line="41" pos:column="5">COLLECT_DEBUG<pos:position pos:line="41" pos:column="18"/></name></expr></cpp:if>
    <expr_stmt><expr><call><name pos:line="42" pos:column="5">assert<pos:position pos:line="42" pos:column="11"/></name><argument_list pos:line="42" pos:column="11">(<argument><expr><call><name pos:line="42" pos:column="12">strcmp<pos:position pos:line="42" pos:column="18"/></name><argument_list pos:line="42" pos:column="18">(<argument><expr><name><name pos:line="42" pos:column="19">m_a<pos:position pos:line="42" pos:column="22"/></name><operator pos:line="42" pos:column="22">-&gt;<pos:position pos:line="42" pos:column="27"/></operator><name pos:line="42" pos:column="24">label<pos:position pos:line="42" pos:column="29"/></name><index pos:line="42" pos:column="29">[<expr><name pos:line="42" pos:column="30">i<pos:position pos:line="42" pos:column="31"/></name></expr>]<pos:position pos:line="42" pos:column="32"/></index></name><operator pos:line="42" pos:column="32">-&gt;<pos:position pos:line="42" pos:column="37"/></operator><name pos:line="42" pos:column="34">name<pos:position pos:line="42" pos:column="38"/></name></expr></argument>, <argument><expr><name><name pos:line="42" pos:column="40">m_b<pos:position pos:line="42" pos:column="43"/></name><operator pos:line="42" pos:column="43">-&gt;<pos:position pos:line="42" pos:column="48"/></operator><name pos:line="42" pos:column="45">label<pos:position pos:line="42" pos:column="50"/></name><index pos:line="42" pos:column="50">[<expr><name pos:line="42" pos:column="51">i<pos:position pos:line="42" pos:column="52"/></name></expr>]<pos:position pos:line="42" pos:column="53"/></index></name><operator pos:line="42" pos:column="53">-&gt;<pos:position pos:line="42" pos:column="58"/></operator><name pos:line="42" pos:column="55">name<pos:position pos:line="42" pos:column="59"/></name></expr></argument>)<pos:position pos:line="42" pos:column="60"/></argument_list></call> <operator pos:line="42" pos:column="61">==<pos:position pos:line="42" pos:column="63"/></operator> <literal type="number" pos:line="42" pos:column="64">0<pos:position pos:line="42" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="42" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="67"/></expr_stmt>
<cpp:endif pos:line="43" pos:column="1">#<cpp:directive pos:line="43" pos:column="2">endif<pos:position pos:line="43" pos:column="7"/></cpp:directive></cpp:endif>
  }<pos:position pos:line="44" pos:column="4"/></block></for>

  <return pos:line="46" pos:column="3">return <expr><literal type="number" pos:line="46" pos:column="10">0<pos:position pos:line="46" pos:column="11"/></literal></expr>;<pos:position pos:line="46" pos:column="12"/></return>
}<pos:position pos:line="47" pos:column="2"/></block></function></unit>
