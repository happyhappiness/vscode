<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_739_collectd-4.3.2.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">plugin_shutdown_all<pos:position pos:line="1" pos:column="25"/></name> <parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><name pos:line="1" pos:column="27">void<pos:position pos:line="1" pos:column="31"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="32"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<function_decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> (<modifier pos:line="3" pos:column="14">*<pos:position pos:line="3" pos:column="15"/></modifier><name pos:line="3" pos:column="15">callback<pos:position pos:line="3" pos:column="23"/></name>) <parameter_list pos:line="3" pos:column="25">(<parameter><decl><type><name pos:line="3" pos:column="26">void<pos:position pos:line="3" pos:column="30"/></name></type></decl></parameter>)<pos:position pos:line="3" pos:column="31"/></parameter_list>;<pos:position pos:line="3" pos:column="32"/></function_decl>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">llentry_t<pos:position pos:line="4" pos:column="18"/></name> <modifier pos:line="4" pos:column="19">*<pos:position pos:line="4" pos:column="20"/></modifier></type><name pos:line="4" pos:column="20">le<pos:position pos:line="4" pos:column="22"/></name></decl>;<pos:position pos:line="4" pos:column="23"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="6" pos:column="9">stop_threads<pos:position pos:line="6" pos:column="21"/></name> <argument_list pos:line="6" pos:column="22">()<pos:position pos:line="6" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="25"/></expr_stmt>

	<if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><name pos:line="8" pos:column="13">list_shutdown<pos:position pos:line="8" pos:column="26"/></name> <operator pos:line="8" pos:column="27">==<pos:position pos:line="8" pos:column="29"/></operator> <name pos:line="8" pos:column="30">NULL<pos:position pos:line="8" pos:column="34"/></name></expr>)<pos:position pos:line="8" pos:column="35"/></condition><then pos:line="8" pos:column="35">
		<block type="pseudo"><return pos:line="9" pos:column="17">return;<pos:position pos:line="9" pos:column="24"/></return></block></then></if>

	<expr_stmt><expr><name pos:line="11" pos:column="9">le<pos:position pos:line="11" pos:column="11"/></name> <operator pos:line="11" pos:column="12">=<pos:position pos:line="11" pos:column="13"/></operator> <call><name pos:line="11" pos:column="14">llist_head<pos:position pos:line="11" pos:column="24"/></name> <argument_list pos:line="11" pos:column="25">(<argument><expr><name pos:line="11" pos:column="26">list_shutdown<pos:position pos:line="11" pos:column="39"/></name></expr></argument>)<pos:position pos:line="11" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="41"/></expr_stmt>
	<while pos:line="12" pos:column="9">while <condition pos:line="12" pos:column="15">(<expr><name pos:line="12" pos:column="16">le<pos:position pos:line="12" pos:column="18"/></name> <operator pos:line="12" pos:column="19">!=<pos:position pos:line="12" pos:column="21"/></operator> <name pos:line="12" pos:column="22">NULL<pos:position pos:line="12" pos:column="26"/></name></expr>)<pos:position pos:line="12" pos:column="27"/></condition>
	<block pos:line="13" pos:column="9">{
		<expr_stmt><expr><name pos:line="14" pos:column="17">callback<pos:position pos:line="14" pos:column="25"/></name> <operator pos:line="14" pos:column="26">=<pos:position pos:line="14" pos:column="27"/></operator> <operator pos:line="14" pos:column="28">(<pos:position pos:line="14" pos:column="29"/></operator><call><call><name pos:line="14" pos:column="29">int<pos:position pos:line="14" pos:column="32"/></name> <argument_list pos:line="14" pos:column="33">(<argument><expr><operator pos:line="14" pos:column="34">*<pos:position pos:line="14" pos:column="35"/></operator></expr></argument>)<pos:position pos:line="14" pos:column="36"/></argument_list></call> <argument_list pos:line="14" pos:column="37">(<argument><expr><name pos:line="14" pos:column="38">void<pos:position pos:line="14" pos:column="42"/></name></expr></argument>)<pos:position pos:line="14" pos:column="43"/></argument_list></call><operator pos:line="14" pos:column="43">)<pos:position pos:line="14" pos:column="44"/></operator> <name><name pos:line="14" pos:column="45">le<pos:position pos:line="14" pos:column="47"/></name><operator pos:line="14" pos:column="47">-&gt;<pos:position pos:line="14" pos:column="52"/></operator><name pos:line="14" pos:column="49">value<pos:position pos:line="14" pos:column="54"/></name></name></expr>;<pos:position pos:line="14" pos:column="55"/></expr_stmt>

		<comment type="block" pos:line="16" pos:column="17">/* Advance the pointer before calling the callback allows
		 * shutdown functions to unregister themselves. If done the
		 * other way around the memory `le' points to will be freed
		 * after callback returns. */</comment>
		<expr_stmt><expr><name pos:line="20" pos:column="17">le<pos:position pos:line="20" pos:column="19"/></name> <operator pos:line="20" pos:column="20">=<pos:position pos:line="20" pos:column="21"/></operator> <name><name pos:line="20" pos:column="22">le<pos:position pos:line="20" pos:column="24"/></name><operator pos:line="20" pos:column="24">-&gt;<pos:position pos:line="20" pos:column="29"/></operator><name pos:line="20" pos:column="26">next<pos:position pos:line="20" pos:column="30"/></name></name></expr>;<pos:position pos:line="20" pos:column="31"/></expr_stmt>

		<expr_stmt><expr><call pos:line="22" pos:column="17">(<modifier pos:line="22" pos:column="18">*<pos:position pos:line="22" pos:column="19"/></modifier><name pos:line="22" pos:column="19">callback<pos:position pos:line="22" pos:column="27"/></name>) <argument_list pos:line="22" pos:column="29">()<pos:position pos:line="22" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="32"/></expr_stmt>
	}<pos:position pos:line="23" pos:column="10"/></block></while>
}<pos:position pos:line="24" pos:column="2"/></block></function></unit>
