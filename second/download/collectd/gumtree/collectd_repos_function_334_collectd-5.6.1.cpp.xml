<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_334_collectd-5.6.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">zone_stats_t<pos:position pos:line="1" pos:column="20"/></name> <modifier pos:line="1" pos:column="21">*<pos:position pos:line="1" pos:column="22"/></modifier></type>
<name pos:line="2" pos:column="1">zone_find_stats<pos:position pos:line="2" pos:column="16"/></name><parameter_list pos:line="2" pos:column="16">(<parameter><decl><type><name pos:line="2" pos:column="17">c_avl_tree_t<pos:position pos:line="2" pos:column="29"/></name> <modifier pos:line="2" pos:column="30">*<pos:position pos:line="2" pos:column="31"/></modifier></type><name pos:line="2" pos:column="31">tree<pos:position pos:line="2" pos:column="35"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="37">zoneid_t<pos:position pos:line="2" pos:column="45"/></name></type> <name pos:line="2" pos:column="46">zoneid<pos:position pos:line="2" pos:column="52"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="53"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">zone_stats_t<pos:position pos:line="4" pos:column="21"/></name> <modifier pos:line="4" pos:column="22">*<pos:position pos:line="4" pos:column="23"/></modifier></type><name pos:line="4" pos:column="23">ret<pos:position pos:line="4" pos:column="26"/></name> <init pos:line="4" pos:column="27">= <expr><name pos:line="4" pos:column="29">NULL<pos:position pos:line="4" pos:column="33"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="34"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">zoneid_t<pos:position pos:line="5" pos:column="17"/></name>     <modifier pos:line="5" pos:column="22">*<pos:position pos:line="5" pos:column="23"/></modifier></type><name pos:line="5" pos:column="23">key<pos:position pos:line="5" pos:column="26"/></name> <init pos:line="5" pos:column="27">= <expr><name pos:line="5" pos:column="29">NULL<pos:position pos:line="5" pos:column="33"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="34"/></decl_stmt>

	<if pos:line="7" pos:column="9">if <condition pos:line="7" pos:column="12">(<expr><call><name pos:line="7" pos:column="13">c_avl_get<pos:position pos:line="7" pos:column="22"/></name><argument_list pos:line="7" pos:column="22">(<argument><expr><name pos:line="7" pos:column="23">tree<pos:position pos:line="7" pos:column="27"/></name></expr></argument>, <argument><expr><operator pos:line="7" pos:column="29">(<pos:position pos:line="7" pos:column="30"/></operator><name pos:line="7" pos:column="30">void<pos:position pos:line="7" pos:column="34"/></name> <operator pos:line="7" pos:column="35">*<pos:position pos:line="7" pos:column="36"/></operator><operator pos:line="7" pos:column="36">*<pos:position pos:line="7" pos:column="37"/></operator><operator pos:line="7" pos:column="37">)<pos:position pos:line="7" pos:column="38"/></operator><operator pos:line="7" pos:column="38">&amp;<pos:position pos:line="7" pos:column="43"/></operator><name pos:line="7" pos:column="39">zoneid<pos:position pos:line="7" pos:column="45"/></name></expr></argument>, <argument><expr><operator pos:line="7" pos:column="47">(<pos:position pos:line="7" pos:column="48"/></operator><name pos:line="7" pos:column="48">void<pos:position pos:line="7" pos:column="52"/></name> <operator pos:line="7" pos:column="53">*<pos:position pos:line="7" pos:column="54"/></operator><operator pos:line="7" pos:column="54">*<pos:position pos:line="7" pos:column="55"/></operator><operator pos:line="7" pos:column="55">)<pos:position pos:line="7" pos:column="56"/></operator><operator pos:line="7" pos:column="56">&amp;<pos:position pos:line="7" pos:column="61"/></operator><name pos:line="7" pos:column="57">ret<pos:position pos:line="7" pos:column="60"/></name></expr></argument>)<pos:position pos:line="7" pos:column="61"/></argument_list></call></expr>)<pos:position pos:line="7" pos:column="62"/></condition><then pos:line="7" pos:column="62"> <block pos:line="7" pos:column="63">{
		<if pos:line="8" pos:column="17">if <condition pos:line="8" pos:column="20">(<expr><operator pos:line="8" pos:column="21">!<pos:position pos:line="8" pos:column="22"/></operator><operator pos:line="8" pos:column="22">(<pos:position pos:line="8" pos:column="23"/></operator><name pos:line="8" pos:column="23">ret<pos:position pos:line="8" pos:column="26"/></name> <operator pos:line="8" pos:column="27">=<pos:position pos:line="8" pos:column="28"/></operator> <call><name pos:line="8" pos:column="29">malloc<pos:position pos:line="8" pos:column="35"/></name><argument_list pos:line="8" pos:column="35">(<argument><expr><sizeof pos:line="8" pos:column="36">sizeof<argument_list pos:line="8" pos:column="42">(<argument><expr><operator pos:line="8" pos:column="43">*<pos:position pos:line="8" pos:column="44"/></operator><name pos:line="8" pos:column="44">ret<pos:position pos:line="8" pos:column="47"/></name></expr></argument>)<pos:position pos:line="8" pos:column="48"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="8" pos:column="49"/></argument_list></call><operator pos:line="8" pos:column="49">)<pos:position pos:line="8" pos:column="50"/></operator></expr>)<pos:position pos:line="8" pos:column="51"/></condition><then pos:line="8" pos:column="51"> <block pos:line="8" pos:column="52">{
			<expr_stmt><expr><call><name pos:line="9" pos:column="25">WARNING<pos:position pos:line="9" pos:column="32"/></name><argument_list pos:line="9" pos:column="32">(<argument><expr><literal type="string" pos:line="9" pos:column="33">"zone plugin: no memory"<pos:position pos:line="9" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="59"/></expr_stmt>
			<return pos:line="10" pos:column="25">return<expr><operator pos:line="10" pos:column="31">(<pos:position pos:line="10" pos:column="32"/></operator><name pos:line="10" pos:column="32">NULL<pos:position pos:line="10" pos:column="36"/></name><operator pos:line="10" pos:column="36">)<pos:position pos:line="10" pos:column="37"/></operator></expr>;<pos:position pos:line="10" pos:column="38"/></return>
		}<pos:position pos:line="11" pos:column="18"/></block></then></if>
		<if pos:line="12" pos:column="17">if <condition pos:line="12" pos:column="20">(<expr><operator pos:line="12" pos:column="21">!<pos:position pos:line="12" pos:column="22"/></operator><operator pos:line="12" pos:column="22">(<pos:position pos:line="12" pos:column="23"/></operator><name pos:line="12" pos:column="23">key<pos:position pos:line="12" pos:column="26"/></name> <operator pos:line="12" pos:column="27">=<pos:position pos:line="12" pos:column="28"/></operator> <call><name pos:line="12" pos:column="29">malloc<pos:position pos:line="12" pos:column="35"/></name><argument_list pos:line="12" pos:column="35">(<argument><expr><sizeof pos:line="12" pos:column="36">sizeof<argument_list pos:line="12" pos:column="42">(<argument><expr><operator pos:line="12" pos:column="43">*<pos:position pos:line="12" pos:column="44"/></operator><name pos:line="12" pos:column="44">key<pos:position pos:line="12" pos:column="47"/></name></expr></argument>)<pos:position pos:line="12" pos:column="48"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="12" pos:column="49"/></argument_list></call><operator pos:line="12" pos:column="49">)<pos:position pos:line="12" pos:column="50"/></operator></expr>)<pos:position pos:line="12" pos:column="51"/></condition><then pos:line="12" pos:column="51"> <block pos:line="12" pos:column="52">{
			<expr_stmt><expr><call><name pos:line="13" pos:column="25">WARNING<pos:position pos:line="13" pos:column="32"/></name><argument_list pos:line="13" pos:column="32">(<argument><expr><literal type="string" pos:line="13" pos:column="33">"zone plugin: no memory"<pos:position pos:line="13" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="59"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="14" pos:column="25">free<pos:position pos:line="14" pos:column="29"/></name><argument_list pos:line="14" pos:column="29">(<argument><expr><name pos:line="14" pos:column="30">ret<pos:position pos:line="14" pos:column="33"/></name></expr></argument>)<pos:position pos:line="14" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="35"/></expr_stmt>
			<return pos:line="15" pos:column="25">return<expr><operator pos:line="15" pos:column="31">(<pos:position pos:line="15" pos:column="32"/></operator><name pos:line="15" pos:column="32">NULL<pos:position pos:line="15" pos:column="36"/></name><operator pos:line="15" pos:column="36">)<pos:position pos:line="15" pos:column="37"/></operator></expr>;<pos:position pos:line="15" pos:column="38"/></return>
		}<pos:position pos:line="16" pos:column="18"/></block></then></if>
		<expr_stmt><expr><operator pos:line="17" pos:column="17">*<pos:position pos:line="17" pos:column="18"/></operator><name pos:line="17" pos:column="18">key<pos:position pos:line="17" pos:column="21"/></name> <operator pos:line="17" pos:column="22">=<pos:position pos:line="17" pos:column="23"/></operator> <name pos:line="17" pos:column="24">zoneid<pos:position pos:line="17" pos:column="30"/></name></expr>;<pos:position pos:line="17" pos:column="31"/></expr_stmt>
		<if pos:line="18" pos:column="17">if <condition pos:line="18" pos:column="20">(<expr><call><name pos:line="18" pos:column="21">c_avl_insert<pos:position pos:line="18" pos:column="33"/></name><argument_list pos:line="18" pos:column="33">(<argument><expr><name pos:line="18" pos:column="34">tree<pos:position pos:line="18" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="40">key<pos:position pos:line="18" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="45">ret<pos:position pos:line="18" pos:column="48"/></name></expr></argument>)<pos:position pos:line="18" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="18" pos:column="50"/></condition><then pos:line="18" pos:column="50"> <block pos:line="18" pos:column="51">{
			<expr_stmt><expr><call><name pos:line="19" pos:column="25">WARNING<pos:position pos:line="19" pos:column="32"/></name><argument_list pos:line="19" pos:column="32">(<argument><expr><literal type="string" pos:line="19" pos:column="33">"zone plugin: error inserting into tree"<pos:position pos:line="19" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="75"/></expr_stmt>
			<return pos:line="20" pos:column="25">return<expr><operator pos:line="20" pos:column="31">(<pos:position pos:line="20" pos:column="32"/></operator><name pos:line="20" pos:column="32">NULL<pos:position pos:line="20" pos:column="36"/></name><operator pos:line="20" pos:column="36">)<pos:position pos:line="20" pos:column="37"/></operator></expr>;<pos:position pos:line="20" pos:column="38"/></return>
		}<pos:position pos:line="21" pos:column="18"/></block></then></if>
	}<pos:position pos:line="22" pos:column="10"/></block></then></if>
	<return pos:line="23" pos:column="9">return<expr><operator pos:line="23" pos:column="15">(<pos:position pos:line="23" pos:column="16"/></operator><name pos:line="23" pos:column="16">ret<pos:position pos:line="23" pos:column="19"/></name><operator pos:line="23" pos:column="19">)<pos:position pos:line="23" pos:column="20"/></operator></expr>;<pos:position pos:line="23" pos:column="21"/></return>
}<pos:position pos:line="24" pos:column="2"/></block></function></unit>
