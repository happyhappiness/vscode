<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_function_184.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">us_handle_listval<pos:position pos:line="1" pos:column="29"/></name> <parameter_list pos:line="1" pos:column="30">(<parameter><decl><type><name pos:line="1" pos:column="31">FILE<pos:position pos:line="1" pos:column="35"/></name> <modifier pos:line="1" pos:column="36">*<pos:position pos:line="1" pos:column="37"/></modifier></type><name pos:line="1" pos:column="37">fh<pos:position pos:line="1" pos:column="39"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="41">char<pos:position pos:line="1" pos:column="45"/></name> <modifier pos:line="1" pos:column="46">*<pos:position pos:line="1" pos:column="47"/></modifier><modifier pos:line="1" pos:column="47">*<pos:position pos:line="1" pos:column="48"/></modifier></type><name pos:line="1" pos:column="48">fields<pos:position pos:line="1" pos:column="54"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="56">int<pos:position pos:line="1" pos:column="59"/></name></type> <name pos:line="1" pos:column="60">fields_num<pos:position pos:line="1" pos:column="70"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="71"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">char<pos:position pos:line="3" pos:column="13"/></name></type> <name><name pos:line="3" pos:column="14">buffer<pos:position pos:line="3" pos:column="20"/></name><index pos:line="3" pos:column="20">[<expr><literal type="number" pos:line="3" pos:column="21">1024<pos:position pos:line="3" pos:column="25"/></literal></expr>]<pos:position pos:line="3" pos:column="26"/></index></name></decl>;<pos:position pos:line="3" pos:column="27"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">char<pos:position pos:line="4" pos:column="13"/></name> <modifier pos:line="4" pos:column="14">*<pos:position pos:line="4" pos:column="15"/></modifier><modifier pos:line="4" pos:column="15">*<pos:position pos:line="4" pos:column="16"/></modifier></type><name pos:line="4" pos:column="16">value_list<pos:position pos:line="4" pos:column="26"/></name> <init pos:line="4" pos:column="27">= <expr><name pos:line="4" pos:column="29">NULL<pos:position pos:line="4" pos:column="33"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="34"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">value_list_len<pos:position pos:line="5" pos:column="27"/></name> <init pos:line="5" pos:column="28">= <expr><literal type="number" pos:line="5" pos:column="30">0<pos:position pos:line="5" pos:column="31"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="32"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">value_cache_t<pos:position pos:line="6" pos:column="22"/></name> <modifier pos:line="6" pos:column="23">*<pos:position pos:line="6" pos:column="24"/></modifier></type><name pos:line="6" pos:column="24">entry<pos:position pos:line="6" pos:column="29"/></name></decl>;<pos:position pos:line="6" pos:column="30"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">int<pos:position pos:line="7" pos:column="12"/></name></type> <name pos:line="7" pos:column="13">i<pos:position pos:line="7" pos:column="14"/></name></decl>;<pos:position pos:line="7" pos:column="15"/></decl_stmt>

	<if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><name pos:line="9" pos:column="13">fields_num<pos:position pos:line="9" pos:column="23"/></name> <operator pos:line="9" pos:column="24">!=<pos:position pos:line="9" pos:column="26"/></operator> <literal type="number" pos:line="9" pos:column="27">1<pos:position pos:line="9" pos:column="28"/></literal></expr>)<pos:position pos:line="9" pos:column="29"/></condition><then pos:line="9" pos:column="29">
	<block pos:line="10" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="11" pos:column="17">DEBUG<pos:position pos:line="11" pos:column="22"/></name> <argument_list pos:line="11" pos:column="23">(<argument><expr><literal type="string" pos:line="11" pos:column="24">"unixsock plugin: us_handle_listval: "<pos:position pos:line="11" pos:column="62"/></literal>
				<literal type="string" pos:line="12" pos:column="33">"Wrong number of fields: %i"<pos:position pos:line="12" pos:column="61"/></literal></expr></argument>, <argument><expr><name pos:line="12" pos:column="63">fields_num<pos:position pos:line="12" pos:column="73"/></name></expr></argument>)<pos:position pos:line="12" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="75"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="13" pos:column="17">fprintf<pos:position pos:line="13" pos:column="24"/></name> <argument_list pos:line="13" pos:column="25">(<argument><expr><name pos:line="13" pos:column="26">fh<pos:position pos:line="13" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="13" pos:column="30">"-1 Wrong number of fields: Got %i, expected 1.\n"<pos:position pos:line="13" pos:column="80"/></literal></expr></argument>,
				<argument><expr><name pos:line="14" pos:column="33">fields_num<pos:position pos:line="14" pos:column="43"/></name></expr></argument>)<pos:position pos:line="14" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="45"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="15" pos:column="17">fflush<pos:position pos:line="15" pos:column="23"/></name> <argument_list pos:line="15" pos:column="24">(<argument><expr><name pos:line="15" pos:column="25">fh<pos:position pos:line="15" pos:column="27"/></name></expr></argument>)<pos:position pos:line="15" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="29"/></expr_stmt>
		<return pos:line="16" pos:column="17">return <expr><operator pos:line="16" pos:column="24">(<pos:position pos:line="16" pos:column="25"/></operator><operator pos:line="16" pos:column="25">-<pos:position pos:line="16" pos:column="26"/></operator><literal type="number" pos:line="16" pos:column="26">1<pos:position pos:line="16" pos:column="27"/></literal><operator pos:line="16" pos:column="27">)<pos:position pos:line="16" pos:column="28"/></operator></expr>;<pos:position pos:line="16" pos:column="29"/></return>
	}<pos:position pos:line="17" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="19" pos:column="9">pthread_mutex_lock<pos:position pos:line="19" pos:column="27"/></name> <argument_list pos:line="19" pos:column="28">(<argument><expr><operator pos:line="19" pos:column="29">&amp;<pos:position pos:line="19" pos:column="34"/></operator><name pos:line="19" pos:column="30">cache_lock<pos:position pos:line="19" pos:column="40"/></name></expr></argument>)<pos:position pos:line="19" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="42"/></expr_stmt>

	<for pos:line="21" pos:column="9">for <control pos:line="21" pos:column="13">(<init><expr><name pos:line="21" pos:column="14">entry<pos:position pos:line="21" pos:column="19"/></name> <operator pos:line="21" pos:column="20">=<pos:position pos:line="21" pos:column="21"/></operator> <name pos:line="21" pos:column="22">cache_head<pos:position pos:line="21" pos:column="32"/></name></expr>;<pos:position pos:line="21" pos:column="33"/></init> <condition><expr><name pos:line="21" pos:column="34">entry<pos:position pos:line="21" pos:column="39"/></name> <operator pos:line="21" pos:column="40">!=<pos:position pos:line="21" pos:column="42"/></operator> <name pos:line="21" pos:column="43">NULL<pos:position pos:line="21" pos:column="47"/></name></expr>;<pos:position pos:line="21" pos:column="48"/></condition> <incr><expr><name pos:line="21" pos:column="49">entry<pos:position pos:line="21" pos:column="54"/></name> <operator pos:line="21" pos:column="55">=<pos:position pos:line="21" pos:column="56"/></operator> <name><name pos:line="21" pos:column="57">entry<pos:position pos:line="21" pos:column="62"/></name><operator pos:line="21" pos:column="62">-&gt;<pos:position pos:line="21" pos:column="67"/></operator><name pos:line="21" pos:column="64">next<pos:position pos:line="21" pos:column="68"/></name></name></expr></incr>)<pos:position pos:line="21" pos:column="69"/></control>
	<block pos:line="22" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="23" pos:column="17">char<pos:position pos:line="23" pos:column="21"/></name> <modifier pos:line="23" pos:column="22">*<pos:position pos:line="23" pos:column="23"/></modifier><modifier pos:line="23" pos:column="23">*<pos:position pos:line="23" pos:column="24"/></modifier></type><name pos:line="23" pos:column="24">tmp<pos:position pos:line="23" pos:column="27"/></name></decl>;<pos:position pos:line="23" pos:column="28"/></decl_stmt>

		<expr_stmt><expr><call><name pos:line="25" pos:column="17">snprintf<pos:position pos:line="25" pos:column="25"/></name> <argument_list pos:line="25" pos:column="26">(<argument><expr><name pos:line="25" pos:column="27">buffer<pos:position pos:line="25" pos:column="33"/></name></expr></argument>, <argument><expr><sizeof pos:line="25" pos:column="35">sizeof <argument_list pos:line="25" pos:column="42">(<argument><expr><name pos:line="25" pos:column="43">buffer<pos:position pos:line="25" pos:column="49"/></name></expr></argument>)<pos:position pos:line="25" pos:column="50"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="25" pos:column="52">"%u %s\n"<pos:position pos:line="25" pos:column="61"/></literal></expr></argument>,
				<argument><expr><operator pos:line="26" pos:column="33">(<pos:position pos:line="26" pos:column="34"/></operator><name pos:line="26" pos:column="34">unsigned<pos:position pos:line="26" pos:column="42"/></name> <name pos:line="26" pos:column="43">int<pos:position pos:line="26" pos:column="46"/></name><operator pos:line="26" pos:column="46">)<pos:position pos:line="26" pos:column="47"/></operator> <name><name pos:line="26" pos:column="48">entry<pos:position pos:line="26" pos:column="53"/></name><operator pos:line="26" pos:column="53">-&gt;<pos:position pos:line="26" pos:column="58"/></operator><name pos:line="26" pos:column="55">time<pos:position pos:line="26" pos:column="59"/></name></name></expr></argument>, <argument><expr><name><name pos:line="26" pos:column="61">entry<pos:position pos:line="26" pos:column="66"/></name><operator pos:line="26" pos:column="66">-&gt;<pos:position pos:line="26" pos:column="71"/></operator><name pos:line="26" pos:column="68">name<pos:position pos:line="26" pos:column="72"/></name></name></expr></argument>)<pos:position pos:line="26" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="74"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="27" pos:column="17">buffer<pos:position pos:line="27" pos:column="23"/></name><index pos:line="27" pos:column="23">[<expr><sizeof pos:line="27" pos:column="24">sizeof <argument_list pos:line="27" pos:column="31">(<argument><expr><name pos:line="27" pos:column="32">buffer<pos:position pos:line="27" pos:column="38"/></name></expr></argument>)<pos:position pos:line="27" pos:column="39"/></argument_list></sizeof> <operator pos:line="27" pos:column="40">-<pos:position pos:line="27" pos:column="41"/></operator> <literal type="number" pos:line="27" pos:column="42">1<pos:position pos:line="27" pos:column="43"/></literal></expr>]<pos:position pos:line="27" pos:column="44"/></index></name> <operator pos:line="27" pos:column="45">=<pos:position pos:line="27" pos:column="46"/></operator> <literal type="char" pos:line="27" pos:column="47">'\0'<pos:position pos:line="27" pos:column="51"/></literal></expr>;<pos:position pos:line="27" pos:column="52"/></expr_stmt>
		
		<expr_stmt><expr><name pos:line="29" pos:column="17">tmp<pos:position pos:line="29" pos:column="20"/></name> <operator pos:line="29" pos:column="21">=<pos:position pos:line="29" pos:column="22"/></operator> <call><name pos:line="29" pos:column="23">realloc<pos:position pos:line="29" pos:column="30"/></name> <argument_list pos:line="29" pos:column="31">(<argument><expr><name pos:line="29" pos:column="32">value_list<pos:position pos:line="29" pos:column="42"/></name></expr></argument>, <argument><expr><sizeof pos:line="29" pos:column="44">sizeof <argument_list pos:line="29" pos:column="51">(<argument><expr><name pos:line="29" pos:column="52">char<pos:position pos:line="29" pos:column="56"/></name> <operator pos:line="29" pos:column="57">*<pos:position pos:line="29" pos:column="58"/></operator></expr></argument>)<pos:position pos:line="29" pos:column="59"/></argument_list></sizeof> <operator pos:line="29" pos:column="60">*<pos:position pos:line="29" pos:column="61"/></operator> <operator pos:line="29" pos:column="62">(<pos:position pos:line="29" pos:column="63"/></operator><name pos:line="29" pos:column="63">value_list_len<pos:position pos:line="29" pos:column="77"/></name> <operator pos:line="29" pos:column="78">+<pos:position pos:line="29" pos:column="79"/></operator> <literal type="number" pos:line="29" pos:column="80">1<pos:position pos:line="29" pos:column="81"/></literal><operator pos:line="29" pos:column="81">)<pos:position pos:line="29" pos:column="82"/></operator></expr></argument>)<pos:position pos:line="29" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="84"/></expr_stmt>
		<if pos:line="30" pos:column="17">if <condition pos:line="30" pos:column="20">(<expr><name pos:line="30" pos:column="21">tmp<pos:position pos:line="30" pos:column="24"/></name> <operator pos:line="30" pos:column="25">==<pos:position pos:line="30" pos:column="27"/></operator> <name pos:line="30" pos:column="28">NULL<pos:position pos:line="30" pos:column="32"/></name></expr>)<pos:position pos:line="30" pos:column="33"/></condition><then pos:line="30" pos:column="33">
			<block type="pseudo"><continue pos:line="31" pos:column="25">continue;<pos:position pos:line="31" pos:column="34"/></continue></block></then></if>
		<expr_stmt><expr><name pos:line="32" pos:column="17">value_list<pos:position pos:line="32" pos:column="27"/></name> <operator pos:line="32" pos:column="28">=<pos:position pos:line="32" pos:column="29"/></operator> <name pos:line="32" pos:column="30">tmp<pos:position pos:line="32" pos:column="33"/></name></expr>;<pos:position pos:line="32" pos:column="34"/></expr_stmt>

		<expr_stmt><expr><name><name pos:line="34" pos:column="17">value_list<pos:position pos:line="34" pos:column="27"/></name><index pos:line="34" pos:column="27">[<expr><name pos:line="34" pos:column="28">value_list_len<pos:position pos:line="34" pos:column="42"/></name></expr>]<pos:position pos:line="34" pos:column="43"/></index></name> <operator pos:line="34" pos:column="44">=<pos:position pos:line="34" pos:column="45"/></operator> <call><name pos:line="34" pos:column="46">strdup<pos:position pos:line="34" pos:column="52"/></name> <argument_list pos:line="34" pos:column="53">(<argument><expr><name pos:line="34" pos:column="54">buffer<pos:position pos:line="34" pos:column="60"/></name></expr></argument>)<pos:position pos:line="34" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="62"/></expr_stmt>

		<if pos:line="36" pos:column="17">if <condition pos:line="36" pos:column="20">(<expr><name><name pos:line="36" pos:column="21">value_list<pos:position pos:line="36" pos:column="31"/></name><index pos:line="36" pos:column="31">[<expr><name pos:line="36" pos:column="32">value_list_len<pos:position pos:line="36" pos:column="46"/></name></expr>]<pos:position pos:line="36" pos:column="47"/></index></name> <operator pos:line="36" pos:column="48">!=<pos:position pos:line="36" pos:column="50"/></operator> <name pos:line="36" pos:column="51">NULL<pos:position pos:line="36" pos:column="55"/></name></expr>)<pos:position pos:line="36" pos:column="56"/></condition><then pos:line="36" pos:column="56">
			<block type="pseudo"><expr_stmt><expr><name pos:line="37" pos:column="25">value_list_len<pos:position pos:line="37" pos:column="39"/></name><operator pos:line="37" pos:column="39">++<pos:position pos:line="37" pos:column="41"/></operator></expr>;<pos:position pos:line="37" pos:column="42"/></expr_stmt></block></then></if>
	}<pos:position pos:line="38" pos:column="10"/></block></for> <comment type="block" pos:line="38" pos:column="11">/* for (entry) */</comment>

	<expr_stmt><expr><call><name pos:line="40" pos:column="9">pthread_mutex_unlock<pos:position pos:line="40" pos:column="29"/></name> <argument_list pos:line="40" pos:column="30">(<argument><expr><operator pos:line="40" pos:column="31">&amp;<pos:position pos:line="40" pos:column="36"/></operator><name pos:line="40" pos:column="32">cache_lock<pos:position pos:line="40" pos:column="42"/></name></expr></argument>)<pos:position pos:line="40" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="44"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="42" pos:column="9">DEBUG<pos:position pos:line="42" pos:column="14"/></name> <argument_list pos:line="42" pos:column="15">(<argument><expr><literal type="string" pos:line="42" pos:column="16">"unixsock plugin: us_handle_listval: value_list_len = %i"<pos:position pos:line="42" pos:column="73"/></literal></expr></argument>, <argument><expr><name pos:line="42" pos:column="75">value_list_len<pos:position pos:line="42" pos:column="89"/></name></expr></argument>)<pos:position pos:line="42" pos:column="90"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="91"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="43" pos:column="9">fprintf<pos:position pos:line="43" pos:column="16"/></name> <argument_list pos:line="43" pos:column="17">(<argument><expr><name pos:line="43" pos:column="18">fh<pos:position pos:line="43" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="43" pos:column="22">"%i Values found\n"<pos:position pos:line="43" pos:column="41"/></literal></expr></argument>, <argument><expr><name pos:line="43" pos:column="43">value_list_len<pos:position pos:line="43" pos:column="57"/></name></expr></argument>)<pos:position pos:line="43" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="59"/></expr_stmt>
	<for pos:line="44" pos:column="9">for <control pos:line="44" pos:column="13">(<init><expr><name pos:line="44" pos:column="14">i<pos:position pos:line="44" pos:column="15"/></name> <operator pos:line="44" pos:column="16">=<pos:position pos:line="44" pos:column="17"/></operator> <literal type="number" pos:line="44" pos:column="18">0<pos:position pos:line="44" pos:column="19"/></literal></expr>;<pos:position pos:line="44" pos:column="20"/></init> <condition><expr><name pos:line="44" pos:column="21">i<pos:position pos:line="44" pos:column="22"/></name> <operator pos:line="44" pos:column="23">&lt;<pos:position pos:line="44" pos:column="27"/></operator> <name pos:line="44" pos:column="25">value_list_len<pos:position pos:line="44" pos:column="39"/></name></expr>;<pos:position pos:line="44" pos:column="40"/></condition> <incr><expr><name pos:line="44" pos:column="41">i<pos:position pos:line="44" pos:column="42"/></name><operator pos:line="44" pos:column="42">++<pos:position pos:line="44" pos:column="44"/></operator></expr></incr>)<pos:position pos:line="44" pos:column="45"/></control>
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="45" pos:column="17">fputs<pos:position pos:line="45" pos:column="22"/></name> <argument_list pos:line="45" pos:column="23">(<argument><expr><name><name pos:line="45" pos:column="24">value_list<pos:position pos:line="45" pos:column="34"/></name><index pos:line="45" pos:column="34">[<expr><name pos:line="45" pos:column="35">i<pos:position pos:line="45" pos:column="36"/></name></expr>]<pos:position pos:line="45" pos:column="37"/></index></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="39">fh<pos:position pos:line="45" pos:column="41"/></name></expr></argument>)<pos:position pos:line="45" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="43"/></expr_stmt></block></for>
	<expr_stmt><expr><call><name pos:line="46" pos:column="9">fflush<pos:position pos:line="46" pos:column="15"/></name> <argument_list pos:line="46" pos:column="16">(<argument><expr><name pos:line="46" pos:column="17">fh<pos:position pos:line="46" pos:column="19"/></name></expr></argument>)<pos:position pos:line="46" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="21"/></expr_stmt>

	<return pos:line="48" pos:column="9">return <expr><operator pos:line="48" pos:column="16">(<pos:position pos:line="48" pos:column="17"/></operator><literal type="number" pos:line="48" pos:column="17">0<pos:position pos:line="48" pos:column="18"/></literal><operator pos:line="48" pos:column="18">)<pos:position pos:line="48" pos:column="19"/></operator></expr>;<pos:position pos:line="48" pos:column="20"/></return>
}<pos:position pos:line="49" pos:column="2"/></block></function></unit>
