<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1210_collectd-5.6.3.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">latency_counter_reset<pos:position pos:line="1" pos:column="27"/></name><parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><name pos:line="1" pos:column="28">latency_counter_t<pos:position pos:line="1" pos:column="45"/></name> <modifier pos:line="1" pos:column="46">*<pos:position pos:line="1" pos:column="47"/></modifier></type><name pos:line="1" pos:column="47">lc<pos:position pos:line="1" pos:column="49"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="50"/></parameter_list> <comment type="block" pos:line="1" pos:column="51">/* {{{ */</comment>
<block pos:line="2" pos:column="1">{
  <if pos:line="3" pos:column="3">if <condition pos:line="3" pos:column="6">(<expr><name pos:line="3" pos:column="7">lc<pos:position pos:line="3" pos:column="9"/></name> <operator pos:line="3" pos:column="10">==<pos:position pos:line="3" pos:column="12"/></operator> <name pos:line="3" pos:column="13">NULL<pos:position pos:line="3" pos:column="17"/></name></expr>)<pos:position pos:line="3" pos:column="18"/></condition><then pos:line="3" pos:column="18">
    <block type="pseudo"><return pos:line="4" pos:column="5">return;<pos:position pos:line="4" pos:column="12"/></return></block></then></if>

  <decl_stmt><decl><type><name pos:line="6" pos:column="3">cdtime_t<pos:position pos:line="6" pos:column="11"/></name></type> <name pos:line="6" pos:column="12">bin_width<pos:position pos:line="6" pos:column="21"/></name> <init pos:line="6" pos:column="22">= <expr><name><name pos:line="6" pos:column="24">lc<pos:position pos:line="6" pos:column="26"/></name><operator pos:line="6" pos:column="26">-&gt;<pos:position pos:line="6" pos:column="31"/></operator><name pos:line="6" pos:column="28">bin_width<pos:position pos:line="6" pos:column="37"/></name></name></expr></init></decl>;<pos:position pos:line="6" pos:column="38"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">cdtime_t<pos:position pos:line="7" pos:column="11"/></name></type> <name pos:line="7" pos:column="12">max_bin<pos:position pos:line="7" pos:column="19"/></name> <init pos:line="7" pos:column="20">= <expr><operator pos:line="7" pos:column="22">(<pos:position pos:line="7" pos:column="23"/></operator><name><name pos:line="7" pos:column="23">lc<pos:position pos:line="7" pos:column="25"/></name><operator pos:line="7" pos:column="25">-&gt;<pos:position pos:line="7" pos:column="30"/></operator><name pos:line="7" pos:column="27">max<pos:position pos:line="7" pos:column="30"/></name></name> <operator pos:line="7" pos:column="31">-<pos:position pos:line="7" pos:column="32"/></operator> <literal type="number" pos:line="7" pos:column="33">1<pos:position pos:line="7" pos:column="34"/></literal><operator pos:line="7" pos:column="34">)<pos:position pos:line="7" pos:column="35"/></operator> <operator pos:line="7" pos:column="36">/<pos:position pos:line="7" pos:column="37"/></operator> <name><name pos:line="7" pos:column="38">lc<pos:position pos:line="7" pos:column="40"/></name><operator pos:line="7" pos:column="40">-&gt;<pos:position pos:line="7" pos:column="45"/></operator><name pos:line="7" pos:column="42">bin_width<pos:position pos:line="7" pos:column="51"/></name></name></expr></init></decl>;<pos:position pos:line="7" pos:column="52"/></decl_stmt>

<comment type="block" pos:line="9" pos:column="1">/*
  If max latency is REDUCE_THRESHOLD times less than histogram's range,
  then cut it in half. REDUCE_THRESHOLD must be &gt;= 2.
  Value of 4 is selected to reduce frequent changes of bin width.
*/</comment>
<cpp:define pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">define<pos:position pos:line="14" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="14" pos:column="9">REDUCE_THRESHOLD<pos:position pos:line="14" pos:column="25"/></name></cpp:macro> <cpp:value pos:line="14" pos:column="26">4<pos:position pos:line="14" pos:column="27"/></cpp:value></cpp:define>
  <if pos:line="15" pos:column="3">if <condition pos:line="15" pos:column="6">(<expr><operator pos:line="15" pos:column="7">(<pos:position pos:line="15" pos:column="8"/></operator><name><name pos:line="15" pos:column="8">lc<pos:position pos:line="15" pos:column="10"/></name><operator pos:line="15" pos:column="10">-&gt;<pos:position pos:line="15" pos:column="15"/></operator><name pos:line="15" pos:column="12">num<pos:position pos:line="15" pos:column="15"/></name></name> <operator pos:line="15" pos:column="16">&gt;<pos:position pos:line="15" pos:column="20"/></operator> <literal type="number" pos:line="15" pos:column="18">0<pos:position pos:line="15" pos:column="19"/></literal><operator pos:line="15" pos:column="19">)<pos:position pos:line="15" pos:column="20"/></operator> <operator pos:line="15" pos:column="21">&amp;&amp;<pos:position pos:line="15" pos:column="31"/></operator> <operator pos:line="15" pos:column="24">(<pos:position pos:line="15" pos:column="25"/></operator><name><name pos:line="15" pos:column="25">lc<pos:position pos:line="15" pos:column="27"/></name><operator pos:line="15" pos:column="27">-&gt;<pos:position pos:line="15" pos:column="32"/></operator><name pos:line="15" pos:column="29">bin_width<pos:position pos:line="15" pos:column="38"/></name></name> <operator pos:line="15" pos:column="39">&gt;=<pos:position pos:line="15" pos:column="44"/></operator> <name pos:line="15" pos:column="42">HISTOGRAM_DEFAULT_BIN_WIDTH<pos:position pos:line="15" pos:column="69"/></name> <operator pos:line="15" pos:column="70">*<pos:position pos:line="15" pos:column="71"/></operator> <literal type="number" pos:line="15" pos:column="72">2<pos:position pos:line="15" pos:column="73"/></literal><operator pos:line="15" pos:column="73">)<pos:position pos:line="15" pos:column="74"/></operator> <operator pos:line="15" pos:column="75">&amp;&amp;<pos:position pos:line="15" pos:column="85"/></operator>
      <operator pos:line="16" pos:column="7">(<pos:position pos:line="16" pos:column="8"/></operator><name pos:line="16" pos:column="8">max_bin<pos:position pos:line="16" pos:column="15"/></name> <operator pos:line="16" pos:column="16">&lt;<pos:position pos:line="16" pos:column="20"/></operator> <name pos:line="16" pos:column="18">HISTOGRAM_NUM_BINS<pos:position pos:line="16" pos:column="36"/></name> <operator pos:line="16" pos:column="37">/<pos:position pos:line="16" pos:column="38"/></operator> <name pos:line="16" pos:column="39">REDUCE_THRESHOLD<pos:position pos:line="16" pos:column="55"/></name><operator pos:line="16" pos:column="55">)<pos:position pos:line="16" pos:column="56"/></operator></expr>)<pos:position pos:line="16" pos:column="57"/></condition><then pos:line="16" pos:column="57"> <block pos:line="16" pos:column="58">{
    <comment type="block" pos:line="17" pos:column="5">/* new bin width will be the previous power of 2 */</comment>
    <expr_stmt><expr><name pos:line="18" pos:column="5">bin_width<pos:position pos:line="18" pos:column="14"/></name> <operator pos:line="18" pos:column="15">=<pos:position pos:line="18" pos:column="16"/></operator> <name pos:line="18" pos:column="17">bin_width<pos:position pos:line="18" pos:column="26"/></name> <operator pos:line="18" pos:column="27">/<pos:position pos:line="18" pos:column="28"/></operator> <literal type="number" pos:line="18" pos:column="29">2<pos:position pos:line="18" pos:column="30"/></literal></expr>;<pos:position pos:line="18" pos:column="31"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="20" pos:column="5">DEBUG<pos:position pos:line="20" pos:column="10"/></name><argument_list pos:line="20" pos:column="10">(<argument><expr><literal type="string" pos:line="20" pos:column="11">"utils_latency: latency_counter_reset: max_latency = %.3f; "<pos:position pos:line="20" pos:column="71"/></literal>
          <literal type="string" pos:line="21" pos:column="11">"max_bin = %"<pos:position pos:line="21" pos:column="24"/></literal> <name pos:line="21" pos:column="25">PRIu64<pos:position pos:line="21" pos:column="31"/></name> <literal type="string" pos:line="21" pos:column="32">"; old_bin_width = %.3f; new_bin_width = %.3f;"<pos:position pos:line="21" pos:column="79"/></literal></expr></argument>,
          <argument><expr><call><name pos:line="22" pos:column="11">CDTIME_T_TO_DOUBLE<pos:position pos:line="22" pos:column="29"/></name><argument_list pos:line="22" pos:column="29">(<argument><expr><name><name pos:line="22" pos:column="30">lc<pos:position pos:line="22" pos:column="32"/></name><operator pos:line="22" pos:column="32">-&gt;<pos:position pos:line="22" pos:column="37"/></operator><name pos:line="22" pos:column="34">max<pos:position pos:line="22" pos:column="37"/></name></name></expr></argument>)<pos:position pos:line="22" pos:column="38"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="22" pos:column="40">max_bin<pos:position pos:line="22" pos:column="47"/></name></expr></argument>,
          <argument><expr><call><name pos:line="23" pos:column="11">CDTIME_T_TO_DOUBLE<pos:position pos:line="23" pos:column="29"/></name><argument_list pos:line="23" pos:column="29">(<argument><expr><name><name pos:line="23" pos:column="30">lc<pos:position pos:line="23" pos:column="32"/></name><operator pos:line="23" pos:column="32">-&gt;<pos:position pos:line="23" pos:column="37"/></operator><name pos:line="23" pos:column="34">bin_width<pos:position pos:line="23" pos:column="43"/></name></name></expr></argument>)<pos:position pos:line="23" pos:column="44"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="23" pos:column="46">CDTIME_T_TO_DOUBLE<pos:position pos:line="23" pos:column="64"/></name><argument_list pos:line="23" pos:column="64">(<argument><expr><name pos:line="23" pos:column="65">bin_width<pos:position pos:line="23" pos:column="74"/></name></expr></argument>)<pos:position pos:line="23" pos:column="75"/></argument_list></call></expr></argument>)<pos:position pos:line="23" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="77"/></expr_stmt>
  }<pos:position pos:line="24" pos:column="4"/></block></then></if>

  <expr_stmt><expr><call><name pos:line="26" pos:column="3">memset<pos:position pos:line="26" pos:column="9"/></name><argument_list pos:line="26" pos:column="9">(<argument><expr><name pos:line="26" pos:column="10">lc<pos:position pos:line="26" pos:column="12"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="26" pos:column="14">0<pos:position pos:line="26" pos:column="15"/></literal></expr></argument>, <argument><expr><sizeof pos:line="26" pos:column="17">sizeof<argument_list pos:line="26" pos:column="23">(<argument><expr><operator pos:line="26" pos:column="24">*<pos:position pos:line="26" pos:column="25"/></operator><name pos:line="26" pos:column="25">lc<pos:position pos:line="26" pos:column="27"/></name></expr></argument>)<pos:position pos:line="26" pos:column="28"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="26" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="30"/></expr_stmt>

  <comment type="block" pos:line="28" pos:column="3">/* preserve bin width */</comment>
  <expr_stmt><expr><name><name pos:line="29" pos:column="3">lc<pos:position pos:line="29" pos:column="5"/></name><operator pos:line="29" pos:column="5">-&gt;<pos:position pos:line="29" pos:column="10"/></operator><name pos:line="29" pos:column="7">bin_width<pos:position pos:line="29" pos:column="16"/></name></name> <operator pos:line="29" pos:column="17">=<pos:position pos:line="29" pos:column="18"/></operator> <name pos:line="29" pos:column="19">bin_width<pos:position pos:line="29" pos:column="28"/></name></expr>;<pos:position pos:line="29" pos:column="29"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="30" pos:column="3">lc<pos:position pos:line="30" pos:column="5"/></name><operator pos:line="30" pos:column="5">-&gt;<pos:position pos:line="30" pos:column="10"/></operator><name pos:line="30" pos:column="7">start_time<pos:position pos:line="30" pos:column="17"/></name></name> <operator pos:line="30" pos:column="18">=<pos:position pos:line="30" pos:column="19"/></operator> <call><name pos:line="30" pos:column="20">cdtime<pos:position pos:line="30" pos:column="26"/></name><argument_list pos:line="30" pos:column="26">()<pos:position pos:line="30" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="29"/></expr_stmt>
}<pos:position pos:line="31" pos:column="2"/></block></function></unit>
