<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_2147_collectd-5.6.2.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">cj_config_add_key<pos:position pos:line="1" pos:column="29"/></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name pos:line="1" pos:column="30">cj_t<pos:position pos:line="1" pos:column="34"/></name> <modifier pos:line="1" pos:column="35">*<pos:position pos:line="1" pos:column="36"/></modifier></type><name pos:line="1" pos:column="36">db<pos:position pos:line="1" pos:column="38"/></name></decl></parameter>, <comment type="block" pos:line="1" pos:column="40">/* {{{ */</comment>
                             <parameter><decl><type><name pos:line="2" pos:column="30">oconfig_item_t<pos:position pos:line="2" pos:column="44"/></name> <modifier pos:line="2" pos:column="45">*<pos:position pos:line="2" pos:column="46"/></modifier></type><name pos:line="2" pos:column="46">ci<pos:position pos:line="2" pos:column="48"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="49"/></parameter_list> <block pos:line="2" pos:column="50">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">cj_key_t<pos:position pos:line="3" pos:column="11"/></name> <modifier pos:line="3" pos:column="12">*<pos:position pos:line="3" pos:column="13"/></modifier></type><name pos:line="3" pos:column="13">key<pos:position pos:line="3" pos:column="16"/></name></decl>;<pos:position pos:line="3" pos:column="17"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">int<pos:position pos:line="4" pos:column="6"/></name></type> <name pos:line="4" pos:column="7">status<pos:position pos:line="4" pos:column="13"/></name></decl>;<pos:position pos:line="4" pos:column="14"/></decl_stmt>

  <if pos:line="6" pos:column="3">if <condition pos:line="6" pos:column="6">(<expr><operator pos:line="6" pos:column="7">(<pos:position pos:line="6" pos:column="8"/></operator><name><name pos:line="6" pos:column="8">ci<pos:position pos:line="6" pos:column="10"/></name><operator pos:line="6" pos:column="10">-&gt;<pos:position pos:line="6" pos:column="15"/></operator><name pos:line="6" pos:column="12">values_num<pos:position pos:line="6" pos:column="22"/></name></name> <operator pos:line="6" pos:column="23">!=<pos:position pos:line="6" pos:column="25"/></operator> <literal type="number" pos:line="6" pos:column="26">1<pos:position pos:line="6" pos:column="27"/></literal><operator pos:line="6" pos:column="27">)<pos:position pos:line="6" pos:column="28"/></operator> <operator pos:line="6" pos:column="29">||<pos:position pos:line="6" pos:column="31"/></operator> <operator pos:line="6" pos:column="32">(<pos:position pos:line="6" pos:column="33"/></operator><name><name pos:line="6" pos:column="33">ci<pos:position pos:line="6" pos:column="35"/></name><operator pos:line="6" pos:column="35">-&gt;<pos:position pos:line="6" pos:column="40"/></operator><name pos:line="6" pos:column="37">values<pos:position pos:line="6" pos:column="43"/></name><index pos:line="6" pos:column="43">[<expr><literal type="number" pos:line="6" pos:column="44">0<pos:position pos:line="6" pos:column="45"/></literal></expr>]<pos:position pos:line="6" pos:column="46"/></index></name><operator pos:line="6" pos:column="46">.<pos:position pos:line="6" pos:column="47"/></operator><name pos:line="6" pos:column="47">type<pos:position pos:line="6" pos:column="51"/></name> <operator pos:line="6" pos:column="52">!=<pos:position pos:line="6" pos:column="54"/></operator> <name pos:line="6" pos:column="55">OCONFIG_TYPE_STRING<pos:position pos:line="6" pos:column="74"/></name><operator pos:line="6" pos:column="74">)<pos:position pos:line="6" pos:column="75"/></operator></expr>)<pos:position pos:line="6" pos:column="76"/></condition><then pos:line="6" pos:column="76"> <block pos:line="6" pos:column="77">{
    <expr_stmt><expr><call><name pos:line="7" pos:column="5">WARNING<pos:position pos:line="7" pos:column="12"/></name><argument_list pos:line="7" pos:column="12">(<argument><expr><literal type="string" pos:line="7" pos:column="13">"curl_json plugin: The `Key' block "<pos:position pos:line="7" pos:column="49"/></literal>
            <literal type="string" pos:line="8" pos:column="13">"needs exactly one string argument."<pos:position pos:line="8" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="51"/></expr_stmt>
    <return pos:line="9" pos:column="5">return <expr><operator pos:line="9" pos:column="12">(<pos:position pos:line="9" pos:column="13"/></operator><operator pos:line="9" pos:column="13">-<pos:position pos:line="9" pos:column="14"/></operator><literal type="number" pos:line="9" pos:column="14">1<pos:position pos:line="9" pos:column="15"/></literal><operator pos:line="9" pos:column="15">)<pos:position pos:line="9" pos:column="16"/></operator></expr>;<pos:position pos:line="9" pos:column="17"/></return>
  }<pos:position pos:line="10" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="12" pos:column="3">key<pos:position pos:line="12" pos:column="6"/></name> <operator pos:line="12" pos:column="7">=<pos:position pos:line="12" pos:column="8"/></operator> <call><name pos:line="12" pos:column="9">calloc<pos:position pos:line="12" pos:column="15"/></name><argument_list pos:line="12" pos:column="15">(<argument><expr><literal type="number" pos:line="12" pos:column="16">1<pos:position pos:line="12" pos:column="17"/></literal></expr></argument>, <argument><expr><sizeof pos:line="12" pos:column="19">sizeof<argument_list pos:line="12" pos:column="25">(<argument><expr><operator pos:line="12" pos:column="26">*<pos:position pos:line="12" pos:column="27"/></operator><name pos:line="12" pos:column="27">key<pos:position pos:line="12" pos:column="30"/></name></expr></argument>)<pos:position pos:line="12" pos:column="31"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="12" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="33"/></expr_stmt>
  <if pos:line="13" pos:column="3">if <condition pos:line="13" pos:column="6">(<expr><name pos:line="13" pos:column="7">key<pos:position pos:line="13" pos:column="10"/></name> <operator pos:line="13" pos:column="11">==<pos:position pos:line="13" pos:column="13"/></operator> <name pos:line="13" pos:column="14">NULL<pos:position pos:line="13" pos:column="18"/></name></expr>)<pos:position pos:line="13" pos:column="19"/></condition><then pos:line="13" pos:column="19"> <block pos:line="13" pos:column="20">{
    <expr_stmt><expr><call><name pos:line="14" pos:column="5">ERROR<pos:position pos:line="14" pos:column="10"/></name><argument_list pos:line="14" pos:column="10">(<argument><expr><literal type="string" pos:line="14" pos:column="11">"curl_json plugin: calloc failed."<pos:position pos:line="14" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="47"/></expr_stmt>
    <return pos:line="15" pos:column="5">return <expr><operator pos:line="15" pos:column="12">(<pos:position pos:line="15" pos:column="13"/></operator><operator pos:line="15" pos:column="13">-<pos:position pos:line="15" pos:column="14"/></operator><literal type="number" pos:line="15" pos:column="14">1<pos:position pos:line="15" pos:column="15"/></literal><operator pos:line="15" pos:column="15">)<pos:position pos:line="15" pos:column="16"/></operator></expr>;<pos:position pos:line="15" pos:column="17"/></return>
  }<pos:position pos:line="16" pos:column="4"/></block></then></if>
  <expr_stmt><expr><name><name pos:line="17" pos:column="3">key<pos:position pos:line="17" pos:column="6"/></name><operator pos:line="17" pos:column="6">-&gt;<pos:position pos:line="17" pos:column="11"/></operator><name pos:line="17" pos:column="8">magic<pos:position pos:line="17" pos:column="13"/></name></name> <operator pos:line="17" pos:column="14">=<pos:position pos:line="17" pos:column="15"/></operator> <name pos:line="17" pos:column="16">CJ_KEY_MAGIC<pos:position pos:line="17" pos:column="28"/></name></expr>;<pos:position pos:line="17" pos:column="29"/></expr_stmt>

  <if pos:line="19" pos:column="3">if <condition pos:line="19" pos:column="6">(<expr><call><name pos:line="19" pos:column="7">strcasecmp<pos:position pos:line="19" pos:column="17"/></name><argument_list pos:line="19" pos:column="17">(<argument><expr><literal type="string" pos:line="19" pos:column="18">"Key"<pos:position pos:line="19" pos:column="23"/></literal></expr></argument>, <argument><expr><name><name pos:line="19" pos:column="25">ci<pos:position pos:line="19" pos:column="27"/></name><operator pos:line="19" pos:column="27">-&gt;<pos:position pos:line="19" pos:column="32"/></operator><name pos:line="19" pos:column="29">key<pos:position pos:line="19" pos:column="32"/></name></name></expr></argument>)<pos:position pos:line="19" pos:column="33"/></argument_list></call> <operator pos:line="19" pos:column="34">==<pos:position pos:line="19" pos:column="36"/></operator> <literal type="number" pos:line="19" pos:column="37">0<pos:position pos:line="19" pos:column="38"/></literal></expr>)<pos:position pos:line="19" pos:column="39"/></condition><then pos:line="19" pos:column="39"> <block pos:line="19" pos:column="40">{
    <expr_stmt><expr><name pos:line="20" pos:column="5">status<pos:position pos:line="20" pos:column="11"/></name> <operator pos:line="20" pos:column="12">=<pos:position pos:line="20" pos:column="13"/></operator> <call><name pos:line="20" pos:column="14">cf_util_get_string<pos:position pos:line="20" pos:column="32"/></name><argument_list pos:line="20" pos:column="32">(<argument><expr><name pos:line="20" pos:column="33">ci<pos:position pos:line="20" pos:column="35"/></name></expr></argument>, <argument><expr><operator pos:line="20" pos:column="37">&amp;<pos:position pos:line="20" pos:column="42"/></operator><name><name pos:line="20" pos:column="38">key<pos:position pos:line="20" pos:column="41"/></name><operator pos:line="20" pos:column="41">-&gt;<pos:position pos:line="20" pos:column="46"/></operator><name pos:line="20" pos:column="43">path<pos:position pos:line="20" pos:column="47"/></name></name></expr></argument>)<pos:position pos:line="20" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="49"/></expr_stmt>
    <if pos:line="21" pos:column="5">if <condition pos:line="21" pos:column="8">(<expr><name pos:line="21" pos:column="9">status<pos:position pos:line="21" pos:column="15"/></name> <operator pos:line="21" pos:column="16">!=<pos:position pos:line="21" pos:column="18"/></operator> <literal type="number" pos:line="21" pos:column="19">0<pos:position pos:line="21" pos:column="20"/></literal></expr>)<pos:position pos:line="21" pos:column="21"/></condition><then pos:line="21" pos:column="21"> <block pos:line="21" pos:column="22">{
      <expr_stmt><expr><call><name pos:line="22" pos:column="7">sfree<pos:position pos:line="22" pos:column="12"/></name><argument_list pos:line="22" pos:column="12">(<argument><expr><name pos:line="22" pos:column="13">key<pos:position pos:line="22" pos:column="16"/></name></expr></argument>)<pos:position pos:line="22" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="18"/></expr_stmt>
      <return pos:line="23" pos:column="7">return <expr><operator pos:line="23" pos:column="14">(<pos:position pos:line="23" pos:column="15"/></operator><name pos:line="23" pos:column="15">status<pos:position pos:line="23" pos:column="21"/></name><operator pos:line="23" pos:column="21">)<pos:position pos:line="23" pos:column="22"/></operator></expr>;<pos:position pos:line="23" pos:column="23"/></return>
    }<pos:position pos:line="24" pos:column="6"/></block></then></if>
  }<pos:position pos:line="25" pos:column="4"/></block></then> <else pos:line="25" pos:column="5">else <block pos:line="25" pos:column="10">{
    <expr_stmt><expr><call><name pos:line="26" pos:column="5">ERROR<pos:position pos:line="26" pos:column="10"/></name><argument_list pos:line="26" pos:column="10">(<argument><expr><literal type="string" pos:line="26" pos:column="11">"curl_json plugin: cj_config: "<pos:position pos:line="26" pos:column="42"/></literal>
          <literal type="string" pos:line="27" pos:column="11">"Invalid key: %s"<pos:position pos:line="27" pos:column="28"/></literal></expr></argument>,
          <argument><expr><name><name pos:line="28" pos:column="11">ci<pos:position pos:line="28" pos:column="13"/></name><operator pos:line="28" pos:column="13">-&gt;<pos:position pos:line="28" pos:column="18"/></operator><name pos:line="28" pos:column="15">key<pos:position pos:line="28" pos:column="18"/></name></name></expr></argument>)<pos:position pos:line="28" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="20"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="29" pos:column="5">cj_key_free<pos:position pos:line="29" pos:column="16"/></name><argument_list pos:line="29" pos:column="16">(<argument><expr><name pos:line="29" pos:column="17">key<pos:position pos:line="29" pos:column="20"/></name></expr></argument>)<pos:position pos:line="29" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="22"/></expr_stmt>
    <return pos:line="30" pos:column="5">return <expr><operator pos:line="30" pos:column="12">(<pos:position pos:line="30" pos:column="13"/></operator><operator pos:line="30" pos:column="13">-<pos:position pos:line="30" pos:column="14"/></operator><literal type="number" pos:line="30" pos:column="14">1<pos:position pos:line="30" pos:column="15"/></literal><operator pos:line="30" pos:column="15">)<pos:position pos:line="30" pos:column="16"/></operator></expr>;<pos:position pos:line="30" pos:column="17"/></return>
  }<pos:position pos:line="31" pos:column="4"/></block></else></if>

  <expr_stmt><expr><name pos:line="33" pos:column="3">status<pos:position pos:line="33" pos:column="9"/></name> <operator pos:line="33" pos:column="10">=<pos:position pos:line="33" pos:column="11"/></operator> <literal type="number" pos:line="33" pos:column="12">0<pos:position pos:line="33" pos:column="13"/></literal></expr>;<pos:position pos:line="33" pos:column="14"/></expr_stmt>
  <for pos:line="34" pos:column="3">for <control pos:line="34" pos:column="7">(<init><decl><type><name pos:line="34" pos:column="8">int<pos:position pos:line="34" pos:column="11"/></name></type> <name pos:line="34" pos:column="12">i<pos:position pos:line="34" pos:column="13"/></name> <init pos:line="34" pos:column="14">= <expr><literal type="number" pos:line="34" pos:column="16">0<pos:position pos:line="34" pos:column="17"/></literal></expr></init></decl>;<pos:position pos:line="34" pos:column="18"/></init> <condition><expr><name pos:line="34" pos:column="19">i<pos:position pos:line="34" pos:column="20"/></name> <operator pos:line="34" pos:column="21">&lt;<pos:position pos:line="34" pos:column="25"/></operator> <name><name pos:line="34" pos:column="23">ci<pos:position pos:line="34" pos:column="25"/></name><operator pos:line="34" pos:column="25">-&gt;<pos:position pos:line="34" pos:column="30"/></operator><name pos:line="34" pos:column="27">children_num<pos:position pos:line="34" pos:column="39"/></name></name></expr>;<pos:position pos:line="34" pos:column="40"/></condition> <incr><expr><name pos:line="34" pos:column="41">i<pos:position pos:line="34" pos:column="42"/></name><operator pos:line="34" pos:column="42">++<pos:position pos:line="34" pos:column="44"/></operator></expr></incr>)<pos:position pos:line="34" pos:column="45"/></control> <block pos:line="34" pos:column="46">{
    <decl_stmt><decl><type><name pos:line="35" pos:column="5">oconfig_item_t<pos:position pos:line="35" pos:column="19"/></name> <modifier pos:line="35" pos:column="20">*<pos:position pos:line="35" pos:column="21"/></modifier></type><name pos:line="35" pos:column="21">child<pos:position pos:line="35" pos:column="26"/></name> <init pos:line="35" pos:column="27">= <expr><name><name pos:line="35" pos:column="29">ci<pos:position pos:line="35" pos:column="31"/></name><operator pos:line="35" pos:column="31">-&gt;<pos:position pos:line="35" pos:column="36"/></operator><name pos:line="35" pos:column="33">children<pos:position pos:line="35" pos:column="41"/></name></name> <operator pos:line="35" pos:column="42">+<pos:position pos:line="35" pos:column="43"/></operator> <name pos:line="35" pos:column="44">i<pos:position pos:line="35" pos:column="45"/></name></expr></init></decl>;<pos:position pos:line="35" pos:column="46"/></decl_stmt>

    <if pos:line="37" pos:column="5">if <condition pos:line="37" pos:column="8">(<expr><call><name pos:line="37" pos:column="9">strcasecmp<pos:position pos:line="37" pos:column="19"/></name><argument_list pos:line="37" pos:column="19">(<argument><expr><literal type="string" pos:line="37" pos:column="20">"Type"<pos:position pos:line="37" pos:column="26"/></literal></expr></argument>, <argument><expr><name><name pos:line="37" pos:column="28">child<pos:position pos:line="37" pos:column="33"/></name><operator pos:line="37" pos:column="33">-&gt;<pos:position pos:line="37" pos:column="38"/></operator><name pos:line="37" pos:column="35">key<pos:position pos:line="37" pos:column="38"/></name></name></expr></argument>)<pos:position pos:line="37" pos:column="39"/></argument_list></call> <operator pos:line="37" pos:column="40">==<pos:position pos:line="37" pos:column="42"/></operator> <literal type="number" pos:line="37" pos:column="43">0<pos:position pos:line="37" pos:column="44"/></literal></expr>)<pos:position pos:line="37" pos:column="45"/></condition><then pos:line="37" pos:column="45">
      <block type="pseudo"><expr_stmt><expr><name pos:line="38" pos:column="7">status<pos:position pos:line="38" pos:column="13"/></name> <operator pos:line="38" pos:column="14">=<pos:position pos:line="38" pos:column="15"/></operator> <call><name pos:line="38" pos:column="16">cf_util_get_string<pos:position pos:line="38" pos:column="34"/></name><argument_list pos:line="38" pos:column="34">(<argument><expr><name pos:line="38" pos:column="35">child<pos:position pos:line="38" pos:column="40"/></name></expr></argument>, <argument><expr><operator pos:line="38" pos:column="42">&amp;<pos:position pos:line="38" pos:column="47"/></operator><name><name pos:line="38" pos:column="43">key<pos:position pos:line="38" pos:column="46"/></name><operator pos:line="38" pos:column="46">-&gt;<pos:position pos:line="38" pos:column="51"/></operator><name pos:line="38" pos:column="48">type<pos:position pos:line="38" pos:column="52"/></name></name></expr></argument>)<pos:position pos:line="38" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="54"/></expr_stmt></block></then>
    <elseif pos:line="39" pos:column="5">else <if pos:line="39" pos:column="10">if <condition pos:line="39" pos:column="13">(<expr><call><name pos:line="39" pos:column="14">strcasecmp<pos:position pos:line="39" pos:column="24"/></name><argument_list pos:line="39" pos:column="24">(<argument><expr><literal type="string" pos:line="39" pos:column="25">"Instance"<pos:position pos:line="39" pos:column="35"/></literal></expr></argument>, <argument><expr><name><name pos:line="39" pos:column="37">child<pos:position pos:line="39" pos:column="42"/></name><operator pos:line="39" pos:column="42">-&gt;<pos:position pos:line="39" pos:column="47"/></operator><name pos:line="39" pos:column="44">key<pos:position pos:line="39" pos:column="47"/></name></name></expr></argument>)<pos:position pos:line="39" pos:column="48"/></argument_list></call> <operator pos:line="39" pos:column="49">==<pos:position pos:line="39" pos:column="51"/></operator> <literal type="number" pos:line="39" pos:column="52">0<pos:position pos:line="39" pos:column="53"/></literal></expr>)<pos:position pos:line="39" pos:column="54"/></condition><then pos:line="39" pos:column="54">
      <block type="pseudo"><expr_stmt><expr><name pos:line="40" pos:column="7">status<pos:position pos:line="40" pos:column="13"/></name> <operator pos:line="40" pos:column="14">=<pos:position pos:line="40" pos:column="15"/></operator> <call><name pos:line="40" pos:column="16">cf_util_get_string<pos:position pos:line="40" pos:column="34"/></name><argument_list pos:line="40" pos:column="34">(<argument><expr><name pos:line="40" pos:column="35">child<pos:position pos:line="40" pos:column="40"/></name></expr></argument>, <argument><expr><operator pos:line="40" pos:column="42">&amp;<pos:position pos:line="40" pos:column="47"/></operator><name><name pos:line="40" pos:column="43">key<pos:position pos:line="40" pos:column="46"/></name><operator pos:line="40" pos:column="46">-&gt;<pos:position pos:line="40" pos:column="51"/></operator><name pos:line="40" pos:column="48">instance<pos:position pos:line="40" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="40" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="58"/></expr_stmt></block></then></if></elseif>
    <else pos:line="41" pos:column="5">else <block pos:line="41" pos:column="10">{
      <expr_stmt><expr><call><name pos:line="42" pos:column="7">WARNING<pos:position pos:line="42" pos:column="14"/></name><argument_list pos:line="42" pos:column="14">(<argument><expr><literal type="string" pos:line="42" pos:column="15">"curl_json plugin: Option `%s' not allowed here."<pos:position pos:line="42" pos:column="64"/></literal></expr></argument>, <argument><expr><name><name pos:line="42" pos:column="66">child<pos:position pos:line="42" pos:column="71"/></name><operator pos:line="42" pos:column="71">-&gt;<pos:position pos:line="42" pos:column="76"/></operator><name pos:line="42" pos:column="73">key<pos:position pos:line="42" pos:column="76"/></name></name></expr></argument>)<pos:position pos:line="42" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="78"/></expr_stmt>
      <expr_stmt><expr><name pos:line="43" pos:column="7">status<pos:position pos:line="43" pos:column="13"/></name> <operator pos:line="43" pos:column="14">=<pos:position pos:line="43" pos:column="15"/></operator> <operator pos:line="43" pos:column="16">-<pos:position pos:line="43" pos:column="17"/></operator><literal type="number" pos:line="43" pos:column="17">1<pos:position pos:line="43" pos:column="18"/></literal></expr>;<pos:position pos:line="43" pos:column="19"/></expr_stmt>
    }<pos:position pos:line="44" pos:column="6"/></block></else></if>

    <if pos:line="46" pos:column="5">if <condition pos:line="46" pos:column="8">(<expr><name pos:line="46" pos:column="9">status<pos:position pos:line="46" pos:column="15"/></name> <operator pos:line="46" pos:column="16">!=<pos:position pos:line="46" pos:column="18"/></operator> <literal type="number" pos:line="46" pos:column="19">0<pos:position pos:line="46" pos:column="20"/></literal></expr>)<pos:position pos:line="46" pos:column="21"/></condition><then pos:line="46" pos:column="21">
      <block type="pseudo"><break pos:line="47" pos:column="7">break;<pos:position pos:line="47" pos:column="13"/></break></block></then></if>
  }<pos:position pos:line="48" pos:column="4"/></block></for> <comment type="block" pos:line="48" pos:column="5">/* for (i = 0; i &lt; ci-&gt;children_num; i++) */</comment>

  <if pos:line="50" pos:column="3">if <condition pos:line="50" pos:column="6">(<expr><name pos:line="50" pos:column="7">status<pos:position pos:line="50" pos:column="13"/></name> <operator pos:line="50" pos:column="14">!=<pos:position pos:line="50" pos:column="16"/></operator> <literal type="number" pos:line="50" pos:column="17">0<pos:position pos:line="50" pos:column="18"/></literal></expr>)<pos:position pos:line="50" pos:column="19"/></condition><then pos:line="50" pos:column="19"> <block pos:line="50" pos:column="20">{
    <expr_stmt><expr><call><name pos:line="51" pos:column="5">cj_key_free<pos:position pos:line="51" pos:column="16"/></name><argument_list pos:line="51" pos:column="16">(<argument><expr><name pos:line="51" pos:column="17">key<pos:position pos:line="51" pos:column="20"/></name></expr></argument>)<pos:position pos:line="51" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="22"/></expr_stmt>
    <return pos:line="52" pos:column="5">return <expr><operator pos:line="52" pos:column="12">(<pos:position pos:line="52" pos:column="13"/></operator><operator pos:line="52" pos:column="13">-<pos:position pos:line="52" pos:column="14"/></operator><literal type="number" pos:line="52" pos:column="14">1<pos:position pos:line="52" pos:column="15"/></literal><operator pos:line="52" pos:column="15">)<pos:position pos:line="52" pos:column="16"/></operator></expr>;<pos:position pos:line="52" pos:column="17"/></return>
  }<pos:position pos:line="53" pos:column="4"/></block></then></if>

  <if pos:line="55" pos:column="3">if <condition pos:line="55" pos:column="6">(<expr><name><name pos:line="55" pos:column="7">key<pos:position pos:line="55" pos:column="10"/></name><operator pos:line="55" pos:column="10">-&gt;<pos:position pos:line="55" pos:column="15"/></operator><name pos:line="55" pos:column="12">type<pos:position pos:line="55" pos:column="16"/></name></name> <operator pos:line="55" pos:column="17">==<pos:position pos:line="55" pos:column="19"/></operator> <name pos:line="55" pos:column="20">NULL<pos:position pos:line="55" pos:column="24"/></name></expr>)<pos:position pos:line="55" pos:column="25"/></condition><then pos:line="55" pos:column="25"> <block pos:line="55" pos:column="26">{
    <expr_stmt><expr><call><name pos:line="56" pos:column="5">WARNING<pos:position pos:line="56" pos:column="12"/></name><argument_list pos:line="56" pos:column="12">(<argument><expr><literal type="string" pos:line="56" pos:column="13">"curl_json plugin: `Type' missing in `Key' block."<pos:position pos:line="56" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="56" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="65"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="57" pos:column="5">cj_key_free<pos:position pos:line="57" pos:column="16"/></name><argument_list pos:line="57" pos:column="16">(<argument><expr><name pos:line="57" pos:column="17">key<pos:position pos:line="57" pos:column="20"/></name></expr></argument>)<pos:position pos:line="57" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="22"/></expr_stmt>
    <return pos:line="58" pos:column="5">return <expr><operator pos:line="58" pos:column="12">(<pos:position pos:line="58" pos:column="13"/></operator><operator pos:line="58" pos:column="13">-<pos:position pos:line="58" pos:column="14"/></operator><literal type="number" pos:line="58" pos:column="14">1<pos:position pos:line="58" pos:column="15"/></literal><operator pos:line="58" pos:column="15">)<pos:position pos:line="58" pos:column="16"/></operator></expr>;<pos:position pos:line="58" pos:column="17"/></return>
  }<pos:position pos:line="59" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="61" pos:column="3">/* store path in a tree that will match the json map structure, example:
   * "httpd/requests/count",
   * "httpd/requests/current" -&gt;
   * { "httpd": { "requests": { "count": $key, "current": $key } } }
   */</comment>
  <decl_stmt><decl><type><name pos:line="66" pos:column="3">char<pos:position pos:line="66" pos:column="7"/></name> <modifier pos:line="66" pos:column="8">*<pos:position pos:line="66" pos:column="9"/></modifier></type><name pos:line="66" pos:column="9">ptr<pos:position pos:line="66" pos:column="12"/></name></decl>;<pos:position pos:line="66" pos:column="13"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="67" pos:column="3">char<pos:position pos:line="67" pos:column="7"/></name> <modifier pos:line="67" pos:column="8">*<pos:position pos:line="67" pos:column="9"/></modifier></type><name pos:line="67" pos:column="9">name<pos:position pos:line="67" pos:column="13"/></name></decl>;<pos:position pos:line="67" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="68" pos:column="3">c_avl_tree_t<pos:position pos:line="68" pos:column="15"/></name> <modifier pos:line="68" pos:column="16">*<pos:position pos:line="68" pos:column="17"/></modifier></type><name pos:line="68" pos:column="17">tree<pos:position pos:line="68" pos:column="21"/></name></decl>;<pos:position pos:line="68" pos:column="22"/></decl_stmt>

  <if pos:line="70" pos:column="3">if <condition pos:line="70" pos:column="6">(<expr><name><name pos:line="70" pos:column="7">db<pos:position pos:line="70" pos:column="9"/></name><operator pos:line="70" pos:column="9">-&gt;<pos:position pos:line="70" pos:column="14"/></operator><name pos:line="70" pos:column="11">tree<pos:position pos:line="70" pos:column="15"/></name></name> <operator pos:line="70" pos:column="16">==<pos:position pos:line="70" pos:column="18"/></operator> <name pos:line="70" pos:column="19">NULL<pos:position pos:line="70" pos:column="23"/></name></expr>)<pos:position pos:line="70" pos:column="24"/></condition><then pos:line="70" pos:column="24">
    <block type="pseudo"><expr_stmt><expr><name><name pos:line="71" pos:column="5">db<pos:position pos:line="71" pos:column="7"/></name><operator pos:line="71" pos:column="7">-&gt;<pos:position pos:line="71" pos:column="12"/></operator><name pos:line="71" pos:column="9">tree<pos:position pos:line="71" pos:column="13"/></name></name> <operator pos:line="71" pos:column="14">=<pos:position pos:line="71" pos:column="15"/></operator> <call><name pos:line="71" pos:column="16">cj_avl_create<pos:position pos:line="71" pos:column="29"/></name><argument_list pos:line="71" pos:column="29">()<pos:position pos:line="71" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="32"/></expr_stmt></block></then></if>

  <expr_stmt><expr><name pos:line="73" pos:column="3">tree<pos:position pos:line="73" pos:column="7"/></name> <operator pos:line="73" pos:column="8">=<pos:position pos:line="73" pos:column="9"/></operator> <name><name pos:line="73" pos:column="10">db<pos:position pos:line="73" pos:column="12"/></name><operator pos:line="73" pos:column="12">-&gt;<pos:position pos:line="73" pos:column="17"/></operator><name pos:line="73" pos:column="14">tree<pos:position pos:line="73" pos:column="18"/></name></name></expr>;<pos:position pos:line="73" pos:column="19"/></expr_stmt>
  <expr_stmt><expr><name pos:line="74" pos:column="3">ptr<pos:position pos:line="74" pos:column="6"/></name> <operator pos:line="74" pos:column="7">=<pos:position pos:line="74" pos:column="8"/></operator> <name><name pos:line="74" pos:column="9">key<pos:position pos:line="74" pos:column="12"/></name><operator pos:line="74" pos:column="12">-&gt;<pos:position pos:line="74" pos:column="17"/></operator><name pos:line="74" pos:column="14">path<pos:position pos:line="74" pos:column="18"/></name></name></expr>;<pos:position pos:line="74" pos:column="19"/></expr_stmt>
  <if pos:line="75" pos:column="3">if <condition pos:line="75" pos:column="6">(<expr><operator pos:line="75" pos:column="7">*<pos:position pos:line="75" pos:column="8"/></operator><name pos:line="75" pos:column="8">ptr<pos:position pos:line="75" pos:column="11"/></name> <operator pos:line="75" pos:column="12">==<pos:position pos:line="75" pos:column="14"/></operator> <literal type="char" pos:line="75" pos:column="15">'/'<pos:position pos:line="75" pos:column="18"/></literal></expr>)<pos:position pos:line="75" pos:column="19"/></condition><then pos:line="75" pos:column="19">
    <block type="pseudo"><expr_stmt><expr><operator pos:line="76" pos:column="5">++<pos:position pos:line="76" pos:column="7"/></operator><name pos:line="76" pos:column="7">ptr<pos:position pos:line="76" pos:column="10"/></name></expr>;<pos:position pos:line="76" pos:column="11"/></expr_stmt></block></then></if>

  <expr_stmt><expr><name pos:line="78" pos:column="3">name<pos:position pos:line="78" pos:column="7"/></name> <operator pos:line="78" pos:column="8">=<pos:position pos:line="78" pos:column="9"/></operator> <name pos:line="78" pos:column="10">ptr<pos:position pos:line="78" pos:column="13"/></name></expr>;<pos:position pos:line="78" pos:column="14"/></expr_stmt>
  <while pos:line="79" pos:column="3">while <condition pos:line="79" pos:column="9">(<expr><operator pos:line="79" pos:column="10">(<pos:position pos:line="79" pos:column="11"/></operator><name pos:line="79" pos:column="11">ptr<pos:position pos:line="79" pos:column="14"/></name> <operator pos:line="79" pos:column="15">=<pos:position pos:line="79" pos:column="16"/></operator> <call><name pos:line="79" pos:column="17">strchr<pos:position pos:line="79" pos:column="23"/></name><argument_list pos:line="79" pos:column="23">(<argument><expr><name pos:line="79" pos:column="24">name<pos:position pos:line="79" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="79" pos:column="30">'/'<pos:position pos:line="79" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="79" pos:column="34"/></argument_list></call><operator pos:line="79" pos:column="34">)<pos:position pos:line="79" pos:column="35"/></operator> <operator pos:line="79" pos:column="36">!=<pos:position pos:line="79" pos:column="38"/></operator> <name pos:line="79" pos:column="39">NULL<pos:position pos:line="79" pos:column="43"/></name></expr>)<pos:position pos:line="79" pos:column="44"/></condition> <block pos:line="79" pos:column="45">{
    <decl_stmt><decl><type><name pos:line="80" pos:column="5">char<pos:position pos:line="80" pos:column="9"/></name></type> <name><name pos:line="80" pos:column="10">ent<pos:position pos:line="80" pos:column="13"/></name><index pos:line="80" pos:column="13">[<expr><name pos:line="80" pos:column="14">PATH_MAX<pos:position pos:line="80" pos:column="22"/></name></expr>]<pos:position pos:line="80" pos:column="23"/></index></name></decl>;<pos:position pos:line="80" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="81" pos:column="5">c_avl_tree_t<pos:position pos:line="81" pos:column="17"/></name> <modifier pos:line="81" pos:column="18">*<pos:position pos:line="81" pos:column="19"/></modifier></type><name pos:line="81" pos:column="19">value<pos:position pos:line="81" pos:column="24"/></name></decl>;<pos:position pos:line="81" pos:column="25"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="82" pos:column="5">size_t<pos:position pos:line="82" pos:column="11"/></name></type> <name pos:line="82" pos:column="12">len<pos:position pos:line="82" pos:column="15"/></name></decl>;<pos:position pos:line="82" pos:column="16"/></decl_stmt>

    <expr_stmt><expr><name pos:line="84" pos:column="5">len<pos:position pos:line="84" pos:column="8"/></name> <operator pos:line="84" pos:column="9">=<pos:position pos:line="84" pos:column="10"/></operator> <name pos:line="84" pos:column="11">ptr<pos:position pos:line="84" pos:column="14"/></name> <operator pos:line="84" pos:column="15">-<pos:position pos:line="84" pos:column="16"/></operator> <name pos:line="84" pos:column="17">name<pos:position pos:line="84" pos:column="21"/></name></expr>;<pos:position pos:line="84" pos:column="22"/></expr_stmt>
    <if pos:line="85" pos:column="5">if <condition pos:line="85" pos:column="8">(<expr><name pos:line="85" pos:column="9">len<pos:position pos:line="85" pos:column="12"/></name> <operator pos:line="85" pos:column="13">==<pos:position pos:line="85" pos:column="15"/></operator> <literal type="number" pos:line="85" pos:column="16">0<pos:position pos:line="85" pos:column="17"/></literal></expr>)<pos:position pos:line="85" pos:column="18"/></condition><then pos:line="85" pos:column="18">
      <block type="pseudo"><break pos:line="86" pos:column="7">break;<pos:position pos:line="86" pos:column="13"/></break></block></then></if>

    <expr_stmt><expr><name pos:line="88" pos:column="5">len<pos:position pos:line="88" pos:column="8"/></name> <operator pos:line="88" pos:column="9">=<pos:position pos:line="88" pos:column="10"/></operator> <call><name pos:line="88" pos:column="11">COUCH_MIN<pos:position pos:line="88" pos:column="20"/></name><argument_list pos:line="88" pos:column="20">(<argument><expr><name pos:line="88" pos:column="21">len<pos:position pos:line="88" pos:column="24"/></name></expr></argument>, <argument><expr><sizeof pos:line="88" pos:column="26">sizeof<argument_list pos:line="88" pos:column="32">(<argument><expr><name pos:line="88" pos:column="33">ent<pos:position pos:line="88" pos:column="36"/></name></expr></argument>)<pos:position pos:line="88" pos:column="37"/></argument_list></sizeof> <operator pos:line="88" pos:column="38">-<pos:position pos:line="88" pos:column="39"/></operator> <literal type="number" pos:line="88" pos:column="40">1<pos:position pos:line="88" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="88" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="43"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="89" pos:column="5">sstrncpy<pos:position pos:line="89" pos:column="13"/></name><argument_list pos:line="89" pos:column="13">(<argument><expr><name pos:line="89" pos:column="14">ent<pos:position pos:line="89" pos:column="17"/></name></expr></argument>, <argument><expr><name pos:line="89" pos:column="19">name<pos:position pos:line="89" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="89" pos:column="25">len<pos:position pos:line="89" pos:column="28"/></name> <operator pos:line="89" pos:column="29">+<pos:position pos:line="89" pos:column="30"/></operator> <literal type="number" pos:line="89" pos:column="31">1<pos:position pos:line="89" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="89" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="34"/></expr_stmt>

    <if pos:line="91" pos:column="5">if <condition pos:line="91" pos:column="8">(<expr><call><name pos:line="91" pos:column="9">c_avl_get<pos:position pos:line="91" pos:column="18"/></name><argument_list pos:line="91" pos:column="18">(<argument><expr><name pos:line="91" pos:column="19">tree<pos:position pos:line="91" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="91" pos:column="25">ent<pos:position pos:line="91" pos:column="28"/></name></expr></argument>, <argument><expr><operator pos:line="91" pos:column="30">(<pos:position pos:line="91" pos:column="31"/></operator><name pos:line="91" pos:column="31">void<pos:position pos:line="91" pos:column="35"/></name> <operator pos:line="91" pos:column="36">*<pos:position pos:line="91" pos:column="37"/></operator><operator pos:line="91" pos:column="37">)<pos:position pos:line="91" pos:column="38"/></operator><operator pos:line="91" pos:column="38">&amp;<pos:position pos:line="91" pos:column="43"/></operator><name pos:line="91" pos:column="39">value<pos:position pos:line="91" pos:column="44"/></name></expr></argument>)<pos:position pos:line="91" pos:column="45"/></argument_list></call> <operator pos:line="91" pos:column="46">!=<pos:position pos:line="91" pos:column="48"/></operator> <literal type="number" pos:line="91" pos:column="49">0<pos:position pos:line="91" pos:column="50"/></literal></expr>)<pos:position pos:line="91" pos:column="51"/></condition><then pos:line="91" pos:column="51"> <block pos:line="91" pos:column="52">{
      <expr_stmt><expr><name pos:line="92" pos:column="7">value<pos:position pos:line="92" pos:column="12"/></name> <operator pos:line="92" pos:column="13">=<pos:position pos:line="92" pos:column="14"/></operator> <call><name pos:line="92" pos:column="15">cj_avl_create<pos:position pos:line="92" pos:column="28"/></name><argument_list pos:line="92" pos:column="28">()<pos:position pos:line="92" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="31"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="93" pos:column="7">c_avl_insert<pos:position pos:line="93" pos:column="19"/></name><argument_list pos:line="93" pos:column="19">(<argument><expr><name pos:line="93" pos:column="20">tree<pos:position pos:line="93" pos:column="24"/></name></expr></argument>, <argument><expr><call><name pos:line="93" pos:column="26">strdup<pos:position pos:line="93" pos:column="32"/></name><argument_list pos:line="93" pos:column="32">(<argument><expr><name pos:line="93" pos:column="33">ent<pos:position pos:line="93" pos:column="36"/></name></expr></argument>)<pos:position pos:line="93" pos:column="37"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="93" pos:column="39">value<pos:position pos:line="93" pos:column="44"/></name></expr></argument>)<pos:position pos:line="93" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="46"/></expr_stmt>
    }<pos:position pos:line="94" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="96" pos:column="5">tree<pos:position pos:line="96" pos:column="9"/></name> <operator pos:line="96" pos:column="10">=<pos:position pos:line="96" pos:column="11"/></operator> <name pos:line="96" pos:column="12">value<pos:position pos:line="96" pos:column="17"/></name></expr>;<pos:position pos:line="96" pos:column="18"/></expr_stmt>
    <expr_stmt><expr><name pos:line="97" pos:column="5">name<pos:position pos:line="97" pos:column="9"/></name> <operator pos:line="97" pos:column="10">=<pos:position pos:line="97" pos:column="11"/></operator> <name pos:line="97" pos:column="12">ptr<pos:position pos:line="97" pos:column="15"/></name> <operator pos:line="97" pos:column="16">+<pos:position pos:line="97" pos:column="17"/></operator> <literal type="number" pos:line="97" pos:column="18">1<pos:position pos:line="97" pos:column="19"/></literal></expr>;<pos:position pos:line="97" pos:column="20"/></expr_stmt>
  }<pos:position pos:line="98" pos:column="4"/></block></while>

  <if pos:line="100" pos:column="3">if <condition pos:line="100" pos:column="6">(<expr><call><name pos:line="100" pos:column="7">strlen<pos:position pos:line="100" pos:column="13"/></name><argument_list pos:line="100" pos:column="13">(<argument><expr><name pos:line="100" pos:column="14">name<pos:position pos:line="100" pos:column="18"/></name></expr></argument>)<pos:position pos:line="100" pos:column="19"/></argument_list></call> <operator pos:line="100" pos:column="20">==<pos:position pos:line="100" pos:column="22"/></operator> <literal type="number" pos:line="100" pos:column="23">0<pos:position pos:line="100" pos:column="24"/></literal></expr>)<pos:position pos:line="100" pos:column="25"/></condition><then pos:line="100" pos:column="25"> <block pos:line="100" pos:column="26">{
    <expr_stmt><expr><call><name pos:line="101" pos:column="5">ERROR<pos:position pos:line="101" pos:column="10"/></name><argument_list pos:line="101" pos:column="10">(<argument><expr><literal type="string" pos:line="101" pos:column="11">"curl_json plugin: invalid key: %s"<pos:position pos:line="101" pos:column="46"/></literal></expr></argument>, <argument><expr><name><name pos:line="101" pos:column="48">key<pos:position pos:line="101" pos:column="51"/></name><operator pos:line="101" pos:column="51">-&gt;<pos:position pos:line="101" pos:column="56"/></operator><name pos:line="101" pos:column="53">path<pos:position pos:line="101" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="101" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="101" pos:column="59"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="102" pos:column="5">cj_key_free<pos:position pos:line="102" pos:column="16"/></name><argument_list pos:line="102" pos:column="16">(<argument><expr><name pos:line="102" pos:column="17">key<pos:position pos:line="102" pos:column="20"/></name></expr></argument>)<pos:position pos:line="102" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="102" pos:column="22"/></expr_stmt>
    <return pos:line="103" pos:column="5">return <expr><operator pos:line="103" pos:column="12">(<pos:position pos:line="103" pos:column="13"/></operator><operator pos:line="103" pos:column="13">-<pos:position pos:line="103" pos:column="14"/></operator><literal type="number" pos:line="103" pos:column="14">1<pos:position pos:line="103" pos:column="15"/></literal><operator pos:line="103" pos:column="15">)<pos:position pos:line="103" pos:column="16"/></operator></expr>;<pos:position pos:line="103" pos:column="17"/></return>
  }<pos:position pos:line="104" pos:column="4"/></block></then></if>

  <expr_stmt><expr><call><name pos:line="106" pos:column="3">c_avl_insert<pos:position pos:line="106" pos:column="15"/></name><argument_list pos:line="106" pos:column="15">(<argument><expr><name pos:line="106" pos:column="16">tree<pos:position pos:line="106" pos:column="20"/></name></expr></argument>, <argument><expr><call><name pos:line="106" pos:column="22">strdup<pos:position pos:line="106" pos:column="28"/></name><argument_list pos:line="106" pos:column="28">(<argument><expr><name pos:line="106" pos:column="29">name<pos:position pos:line="106" pos:column="33"/></name></expr></argument>)<pos:position pos:line="106" pos:column="34"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="106" pos:column="36">key<pos:position pos:line="106" pos:column="39"/></name></expr></argument>)<pos:position pos:line="106" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="106" pos:column="41"/></expr_stmt>
  <return pos:line="107" pos:column="3">return <expr><operator pos:line="107" pos:column="10">(<pos:position pos:line="107" pos:column="11"/></operator><name pos:line="107" pos:column="11">status<pos:position pos:line="107" pos:column="17"/></name><operator pos:line="107" pos:column="17">)<pos:position pos:line="107" pos:column="18"/></operator></expr>;<pos:position pos:line="107" pos:column="19"/></return>
}<pos:position pos:line="108" pos:column="2"/></block></function></unit>
