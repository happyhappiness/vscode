<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_2641_collectd-5.6.3.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name pos:line="2" pos:column="1">plugin_dispatch_multivalue<pos:position pos:line="2" pos:column="27"/></name><parameter_list pos:line="2" pos:column="27">(<parameter><decl><type><name pos:line="2" pos:column="28">value_list_t<pos:position pos:line="2" pos:column="40"/></name> <specifier pos:line="2" pos:column="41">const<pos:position pos:line="2" pos:column="46"/></specifier> <modifier pos:line="2" pos:column="47">*<pos:position pos:line="2" pos:column="48"/></modifier></type><parameter><decl><type><specifier pos:line="2" pos:column="48">template<pos:position pos:line="2" pos:column="56"/></specifier></type></decl></parameter></decl></parameter>, <comment type="block" pos:line="2" pos:column="58">/* {{{ */</comment>
                           <parameter><decl><type><name pos:line="3" pos:column="28">_Bool<pos:position pos:line="3" pos:column="33"/></name></type> <name pos:line="3" pos:column="34">store_percentage<pos:position pos:line="3" pos:column="50"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="52">int<pos:position pos:line="3" pos:column="55"/></name></type> <name pos:line="3" pos:column="56">store_type<pos:position pos:line="3" pos:column="66"/></name></decl></parameter>, <parameter><decl><type><modifier pos:line="3" pos:column="68">...<pos:position pos:line="3" pos:column="71"/></modifier></type></decl></parameter>)<pos:position pos:line="3" pos:column="72"/></parameter_list> <block pos:line="3" pos:column="73">{
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">value_list_t<pos:position pos:line="4" pos:column="15"/></name> <modifier pos:line="4" pos:column="16">*<pos:position pos:line="4" pos:column="17"/></modifier></type><name pos:line="4" pos:column="17">vl<pos:position pos:line="4" pos:column="19"/></name></decl>;<pos:position pos:line="4" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">int<pos:position pos:line="5" pos:column="6"/></name></type> <name pos:line="5" pos:column="7">failed<pos:position pos:line="5" pos:column="13"/></name> <init pos:line="5" pos:column="14">= <expr><literal type="number" pos:line="5" pos:column="16">0<pos:position pos:line="5" pos:column="17"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">gauge_t<pos:position pos:line="6" pos:column="10"/></name></type> <name pos:line="6" pos:column="11">sum<pos:position pos:line="6" pos:column="14"/></name> <init pos:line="6" pos:column="15">= <expr><literal type="number" pos:line="6" pos:column="17">0.0<pos:position pos:line="6" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">va_list<pos:position pos:line="7" pos:column="10"/></name></type> <name pos:line="7" pos:column="11">ap<pos:position pos:line="7" pos:column="13"/></name></decl>;<pos:position pos:line="7" pos:column="14"/></decl_stmt>

  <macro><name pos:line="9" pos:column="3">assert<pos:position pos:line="9" pos:column="9"/></name><argument_list pos:line="9" pos:column="9">(<argument pos:line="9" pos:column="10">template-&gt;values_len == <literal type="number" pos:line="9" pos:column="34">1<pos:position pos:line="9" pos:column="35"/></literal></argument>)<pos:position pos:line="9" pos:column="36"/></argument_list></macro><empty_stmt pos:line="9" pos:column="36">;<pos:position pos:line="9" pos:column="37"/></empty_stmt>

  <comment type="block" pos:line="11" pos:column="3">/* Calculate sum for Gauge to calculate percent if needed */</comment>
  <if pos:line="12" pos:column="3">if <condition pos:line="12" pos:column="6">(<expr><name pos:line="12" pos:column="7">DS_TYPE_GAUGE<pos:position pos:line="12" pos:column="20"/></name> <operator pos:line="12" pos:column="21">==<pos:position pos:line="12" pos:column="23"/></operator> <name pos:line="12" pos:column="24">store_type<pos:position pos:line="12" pos:column="34"/></name></expr>)<pos:position pos:line="12" pos:column="35"/></condition><then pos:line="12" pos:column="35"> <block pos:line="12" pos:column="36">{
    <expr_stmt><expr><call><name pos:line="13" pos:column="5">va_start<pos:position pos:line="13" pos:column="13"/></name><argument_list pos:line="13" pos:column="13">(<argument><expr><name pos:line="13" pos:column="14">ap<pos:position pos:line="13" pos:column="16"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="18">store_type<pos:position pos:line="13" pos:column="28"/></name></expr></argument>)<pos:position pos:line="13" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="30"/></expr_stmt>
    <while pos:line="14" pos:column="5">while <condition pos:line="14" pos:column="11">(<expr><literal type="number" pos:line="14" pos:column="12">42<pos:position pos:line="14" pos:column="14"/></literal></expr>)<pos:position pos:line="14" pos:column="15"/></condition> <block pos:line="14" pos:column="16">{
      <decl_stmt><decl><type><name pos:line="15" pos:column="7">char<pos:position pos:line="15" pos:column="11"/></name> <specifier pos:line="15" pos:column="12">const<pos:position pos:line="15" pos:column="17"/></specifier> <modifier pos:line="15" pos:column="18">*<pos:position pos:line="15" pos:column="19"/></modifier></type><name pos:line="15" pos:column="19">name<pos:position pos:line="15" pos:column="23"/></name></decl>;<pos:position pos:line="15" pos:column="24"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="16" pos:column="7">gauge_t<pos:position pos:line="16" pos:column="14"/></name></type> <name pos:line="16" pos:column="15">value<pos:position pos:line="16" pos:column="20"/></name></decl>;<pos:position pos:line="16" pos:column="21"/></decl_stmt>

      <expr_stmt><expr><name pos:line="18" pos:column="7">name<pos:position pos:line="18" pos:column="11"/></name> <operator pos:line="18" pos:column="12">=<pos:position pos:line="18" pos:column="13"/></operator> <call><name pos:line="18" pos:column="14">va_arg<pos:position pos:line="18" pos:column="20"/></name><argument_list pos:line="18" pos:column="20">(<argument><expr><name pos:line="18" pos:column="21">ap<pos:position pos:line="18" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="25">char<pos:position pos:line="18" pos:column="29"/></name> <specifier pos:line="18" pos:column="30">const<pos:position pos:line="18" pos:column="35"/></specifier> <operator pos:line="18" pos:column="36">*<pos:position pos:line="18" pos:column="37"/></operator></expr></argument>)<pos:position pos:line="18" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="39"/></expr_stmt>
      <if pos:line="19" pos:column="7">if <condition pos:line="19" pos:column="10">(<expr><name pos:line="19" pos:column="11">name<pos:position pos:line="19" pos:column="15"/></name> <operator pos:line="19" pos:column="16">==<pos:position pos:line="19" pos:column="18"/></operator> <name pos:line="19" pos:column="19">NULL<pos:position pos:line="19" pos:column="23"/></name></expr>)<pos:position pos:line="19" pos:column="24"/></condition><then pos:line="19" pos:column="24">
        <block type="pseudo"><break pos:line="20" pos:column="9">break;<pos:position pos:line="20" pos:column="15"/></break></block></then></if>

      <expr_stmt><expr><name pos:line="22" pos:column="7">value<pos:position pos:line="22" pos:column="12"/></name> <operator pos:line="22" pos:column="13">=<pos:position pos:line="22" pos:column="14"/></operator> <call><name pos:line="22" pos:column="15">va_arg<pos:position pos:line="22" pos:column="21"/></name><argument_list pos:line="22" pos:column="21">(<argument><expr><name pos:line="22" pos:column="22">ap<pos:position pos:line="22" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="26">gauge_t<pos:position pos:line="22" pos:column="33"/></name></expr></argument>)<pos:position pos:line="22" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="35"/></expr_stmt>
      <if pos:line="23" pos:column="7">if <condition pos:line="23" pos:column="10">(<expr><operator pos:line="23" pos:column="11">!<pos:position pos:line="23" pos:column="12"/></operator><call><name pos:line="23" pos:column="12">isnan<pos:position pos:line="23" pos:column="17"/></name><argument_list pos:line="23" pos:column="17">(<argument><expr><name pos:line="23" pos:column="18">value<pos:position pos:line="23" pos:column="23"/></name></expr></argument>)<pos:position pos:line="23" pos:column="24"/></argument_list></call></expr>)<pos:position pos:line="23" pos:column="25"/></condition><then pos:line="23" pos:column="25">
        <block type="pseudo"><expr_stmt><expr><name pos:line="24" pos:column="9">sum<pos:position pos:line="24" pos:column="12"/></name> <operator pos:line="24" pos:column="13">+=<pos:position pos:line="24" pos:column="15"/></operator> <name pos:line="24" pos:column="16">value<pos:position pos:line="24" pos:column="21"/></name></expr>;<pos:position pos:line="24" pos:column="22"/></expr_stmt></block></then></if>
    }<pos:position pos:line="25" pos:column="6"/></block></while>
    <expr_stmt><expr><call><name pos:line="26" pos:column="5">va_end<pos:position pos:line="26" pos:column="11"/></name><argument_list pos:line="26" pos:column="11">(<argument><expr><name pos:line="26" pos:column="12">ap<pos:position pos:line="26" pos:column="14"/></name></expr></argument>)<pos:position pos:line="26" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="16"/></expr_stmt>
  }<pos:position pos:line="27" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="29" pos:column="3">vl<pos:position pos:line="29" pos:column="5"/></name> <operator pos:line="29" pos:column="6">=<pos:position pos:line="29" pos:column="7"/></operator> <macro><name pos:line="29" pos:column="8">plugin_value_list_clone<pos:position pos:line="29" pos:column="31"/></name><argument_list pos:line="29" pos:column="31">(<argument pos:line="29" pos:column="32">template<pos:position pos:line="29" pos:column="40"/></argument>)<pos:position pos:line="29" pos:column="41"/></argument_list></macro></expr>;<pos:position pos:line="29" pos:column="42"/></expr_stmt>
  <comment type="block" pos:line="30" pos:column="3">/* plugin_value_list_clone makes sure vl-&gt;time is set to non-zero. */</comment>
  <if pos:line="31" pos:column="3">if <condition pos:line="31" pos:column="6">(<expr><name pos:line="31" pos:column="7">store_percentage<pos:position pos:line="31" pos:column="23"/></name></expr>)<pos:position pos:line="31" pos:column="24"/></condition><then pos:line="31" pos:column="24">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="32" pos:column="5">sstrncpy<pos:position pos:line="32" pos:column="13"/></name><argument_list pos:line="32" pos:column="13">(<argument><expr><name><name pos:line="32" pos:column="14">vl<pos:position pos:line="32" pos:column="16"/></name><operator pos:line="32" pos:column="16">-&gt;<pos:position pos:line="32" pos:column="21"/></operator><name pos:line="32" pos:column="18">type<pos:position pos:line="32" pos:column="22"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="32" pos:column="24">"percent"<pos:position pos:line="32" pos:column="33"/></literal></expr></argument>, <argument><expr><sizeof pos:line="32" pos:column="35">sizeof<argument_list pos:line="32" pos:column="41">(<argument><expr><name><name pos:line="32" pos:column="42">vl<pos:position pos:line="32" pos:column="44"/></name><operator pos:line="32" pos:column="44">-&gt;<pos:position pos:line="32" pos:column="49"/></operator><name pos:line="32" pos:column="46">type<pos:position pos:line="32" pos:column="50"/></name></name></expr></argument>)<pos:position pos:line="32" pos:column="51"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="32" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="53"/></expr_stmt></block></then></if>

  <expr_stmt><expr><call><name pos:line="34" pos:column="3">va_start<pos:position pos:line="34" pos:column="11"/></name><argument_list pos:line="34" pos:column="11">(<argument><expr><name pos:line="34" pos:column="12">ap<pos:position pos:line="34" pos:column="14"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="16">store_type<pos:position pos:line="34" pos:column="26"/></name></expr></argument>)<pos:position pos:line="34" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="28"/></expr_stmt>
  <while pos:line="35" pos:column="3">while <condition pos:line="35" pos:column="9">(<expr><literal type="number" pos:line="35" pos:column="10">42<pos:position pos:line="35" pos:column="12"/></literal></expr>)<pos:position pos:line="35" pos:column="13"/></condition> <block pos:line="35" pos:column="14">{
    <decl_stmt><decl><type><name pos:line="36" pos:column="5">char<pos:position pos:line="36" pos:column="9"/></name> <specifier pos:line="36" pos:column="10">const<pos:position pos:line="36" pos:column="15"/></specifier> <modifier pos:line="36" pos:column="16">*<pos:position pos:line="36" pos:column="17"/></modifier></type><name pos:line="36" pos:column="17">name<pos:position pos:line="36" pos:column="21"/></name></decl>;<pos:position pos:line="36" pos:column="22"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="37" pos:column="5">int<pos:position pos:line="37" pos:column="8"/></name></type> <name pos:line="37" pos:column="9">status<pos:position pos:line="37" pos:column="15"/></name></decl>;<pos:position pos:line="37" pos:column="16"/></decl_stmt>

    <comment type="block" pos:line="39" pos:column="5">/* Set the type instance. */</comment>
    <expr_stmt><expr><name pos:line="40" pos:column="5">name<pos:position pos:line="40" pos:column="9"/></name> <operator pos:line="40" pos:column="10">=<pos:position pos:line="40" pos:column="11"/></operator> <call><name pos:line="40" pos:column="12">va_arg<pos:position pos:line="40" pos:column="18"/></name><argument_list pos:line="40" pos:column="18">(<argument><expr><name pos:line="40" pos:column="19">ap<pos:position pos:line="40" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="23">char<pos:position pos:line="40" pos:column="27"/></name> <specifier pos:line="40" pos:column="28">const<pos:position pos:line="40" pos:column="33"/></specifier> <operator pos:line="40" pos:column="34">*<pos:position pos:line="40" pos:column="35"/></operator></expr></argument>)<pos:position pos:line="40" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="37"/></expr_stmt>
    <if pos:line="41" pos:column="5">if <condition pos:line="41" pos:column="8">(<expr><name pos:line="41" pos:column="9">name<pos:position pos:line="41" pos:column="13"/></name> <operator pos:line="41" pos:column="14">==<pos:position pos:line="41" pos:column="16"/></operator> <name pos:line="41" pos:column="17">NULL<pos:position pos:line="41" pos:column="21"/></name></expr>)<pos:position pos:line="41" pos:column="22"/></condition><then pos:line="41" pos:column="22">
      <block type="pseudo"><break pos:line="42" pos:column="7">break;<pos:position pos:line="42" pos:column="13"/></break></block></then></if>
    <expr_stmt><expr><call><name pos:line="43" pos:column="5">sstrncpy<pos:position pos:line="43" pos:column="13"/></name><argument_list pos:line="43" pos:column="13">(<argument><expr><name><name pos:line="43" pos:column="14">vl<pos:position pos:line="43" pos:column="16"/></name><operator pos:line="43" pos:column="16">-&gt;<pos:position pos:line="43" pos:column="21"/></operator><name pos:line="43" pos:column="18">type_instance<pos:position pos:line="43" pos:column="31"/></name></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="33">name<pos:position pos:line="43" pos:column="37"/></name></expr></argument>, <argument><expr><sizeof pos:line="43" pos:column="39">sizeof<argument_list pos:line="43" pos:column="45">(<argument><expr><name><name pos:line="43" pos:column="46">vl<pos:position pos:line="43" pos:column="48"/></name><operator pos:line="43" pos:column="48">-&gt;<pos:position pos:line="43" pos:column="53"/></operator><name pos:line="43" pos:column="50">type_instance<pos:position pos:line="43" pos:column="63"/></name></name></expr></argument>)<pos:position pos:line="43" pos:column="64"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="43" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="66"/></expr_stmt>

    <comment type="block" pos:line="45" pos:column="5">/* Set the value. */</comment>
    <switch pos:line="46" pos:column="5">switch <condition pos:line="46" pos:column="12">(<expr><name pos:line="46" pos:column="13">store_type<pos:position pos:line="46" pos:column="23"/></name></expr>)<pos:position pos:line="46" pos:column="24"/></condition> <block pos:line="46" pos:column="25">{
    <case pos:line="47" pos:column="5">case <expr><name pos:line="47" pos:column="10">DS_TYPE_GAUGE<pos:position pos:line="47" pos:column="23"/></name></expr>:<pos:position pos:line="47" pos:column="24"/></case>
      <expr_stmt><expr><name><name pos:line="48" pos:column="7">vl<pos:position pos:line="48" pos:column="9"/></name><operator pos:line="48" pos:column="9">-&gt;<pos:position pos:line="48" pos:column="14"/></operator><name pos:line="48" pos:column="11">values<pos:position pos:line="48" pos:column="17"/></name><index pos:line="48" pos:column="17">[<expr><literal type="number" pos:line="48" pos:column="18">0<pos:position pos:line="48" pos:column="19"/></literal></expr>]<pos:position pos:line="48" pos:column="20"/></index></name><operator pos:line="48" pos:column="20">.<pos:position pos:line="48" pos:column="21"/></operator><name pos:line="48" pos:column="21">gauge<pos:position pos:line="48" pos:column="26"/></name> <operator pos:line="48" pos:column="27">=<pos:position pos:line="48" pos:column="28"/></operator> <call><name pos:line="48" pos:column="29">va_arg<pos:position pos:line="48" pos:column="35"/></name><argument_list pos:line="48" pos:column="35">(<argument><expr><name pos:line="48" pos:column="36">ap<pos:position pos:line="48" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="40">gauge_t<pos:position pos:line="48" pos:column="47"/></name></expr></argument>)<pos:position pos:line="48" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="49"/></expr_stmt>
      <if pos:line="49" pos:column="7">if <condition pos:line="49" pos:column="10">(<expr><name pos:line="49" pos:column="11">store_percentage<pos:position pos:line="49" pos:column="27"/></name></expr>)<pos:position pos:line="49" pos:column="28"/></condition><then pos:line="49" pos:column="28">
        <block type="pseudo"><expr_stmt><expr><name><name pos:line="50" pos:column="9">vl<pos:position pos:line="50" pos:column="11"/></name><operator pos:line="50" pos:column="11">-&gt;<pos:position pos:line="50" pos:column="16"/></operator><name pos:line="50" pos:column="13">values<pos:position pos:line="50" pos:column="19"/></name><index pos:line="50" pos:column="19">[<expr><literal type="number" pos:line="50" pos:column="20">0<pos:position pos:line="50" pos:column="21"/></literal></expr>]<pos:position pos:line="50" pos:column="22"/></index></name><operator pos:line="50" pos:column="22">.<pos:position pos:line="50" pos:column="23"/></operator><name pos:line="50" pos:column="23">gauge<pos:position pos:line="50" pos:column="28"/></name> <operator pos:line="50" pos:column="29">*=<pos:position pos:line="50" pos:column="31"/></operator> <ternary><condition><expr><name pos:line="50" pos:column="32">sum<pos:position pos:line="50" pos:column="35"/></name></expr> ?<pos:position pos:line="50" pos:column="37"/></condition><then pos:line="50" pos:column="37"> <expr><operator pos:line="50" pos:column="38">(<pos:position pos:line="50" pos:column="39"/></operator><literal type="number" pos:line="50" pos:column="39">100.0<pos:position pos:line="50" pos:column="44"/></literal> <operator pos:line="50" pos:column="45">/<pos:position pos:line="50" pos:column="46"/></operator> <name pos:line="50" pos:column="47">sum<pos:position pos:line="50" pos:column="50"/></name><operator pos:line="50" pos:column="50">)<pos:position pos:line="50" pos:column="51"/></operator></expr> <pos:position pos:line="50" pos:column="52"/></then><else pos:line="50" pos:column="52">: <expr><name pos:line="50" pos:column="54">NAN<pos:position pos:line="50" pos:column="57"/></name></expr></else></ternary></expr>;<pos:position pos:line="50" pos:column="58"/></expr_stmt></block></then></if>
      <break pos:line="51" pos:column="7">break;<pos:position pos:line="51" pos:column="13"/></break>
    <case pos:line="52" pos:column="5">case <expr><name pos:line="52" pos:column="10">DS_TYPE_ABSOLUTE<pos:position pos:line="52" pos:column="26"/></name></expr>:<pos:position pos:line="52" pos:column="27"/></case>
      <expr_stmt><expr><name><name pos:line="53" pos:column="7">vl<pos:position pos:line="53" pos:column="9"/></name><operator pos:line="53" pos:column="9">-&gt;<pos:position pos:line="53" pos:column="14"/></operator><name pos:line="53" pos:column="11">values<pos:position pos:line="53" pos:column="17"/></name><index pos:line="53" pos:column="17">[<expr><literal type="number" pos:line="53" pos:column="18">0<pos:position pos:line="53" pos:column="19"/></literal></expr>]<pos:position pos:line="53" pos:column="20"/></index></name><operator pos:line="53" pos:column="20">.<pos:position pos:line="53" pos:column="21"/></operator><name pos:line="53" pos:column="21">absolute<pos:position pos:line="53" pos:column="29"/></name> <operator pos:line="53" pos:column="30">=<pos:position pos:line="53" pos:column="31"/></operator> <call><name pos:line="53" pos:column="32">va_arg<pos:position pos:line="53" pos:column="38"/></name><argument_list pos:line="53" pos:column="38">(<argument><expr><name pos:line="53" pos:column="39">ap<pos:position pos:line="53" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="53" pos:column="43">absolute_t<pos:position pos:line="53" pos:column="53"/></name></expr></argument>)<pos:position pos:line="53" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="55"/></expr_stmt>
      <break pos:line="54" pos:column="7">break;<pos:position pos:line="54" pos:column="13"/></break>
    <case pos:line="55" pos:column="5">case <expr><name pos:line="55" pos:column="10">DS_TYPE_COUNTER<pos:position pos:line="55" pos:column="25"/></name></expr>:<pos:position pos:line="55" pos:column="26"/></case>
      <expr_stmt><expr><name><name pos:line="56" pos:column="7">vl<pos:position pos:line="56" pos:column="9"/></name><operator pos:line="56" pos:column="9">-&gt;<pos:position pos:line="56" pos:column="14"/></operator><name pos:line="56" pos:column="11">values<pos:position pos:line="56" pos:column="17"/></name><index pos:line="56" pos:column="17">[<expr><literal type="number" pos:line="56" pos:column="18">0<pos:position pos:line="56" pos:column="19"/></literal></expr>]<pos:position pos:line="56" pos:column="20"/></index></name><operator pos:line="56" pos:column="20">.<pos:position pos:line="56" pos:column="21"/></operator><name pos:line="56" pos:column="21">counter<pos:position pos:line="56" pos:column="28"/></name> <operator pos:line="56" pos:column="29">=<pos:position pos:line="56" pos:column="30"/></operator> <call><name pos:line="56" pos:column="31">va_arg<pos:position pos:line="56" pos:column="37"/></name><argument_list pos:line="56" pos:column="37">(<argument><expr><name pos:line="56" pos:column="38">ap<pos:position pos:line="56" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="56" pos:column="42">counter_t<pos:position pos:line="56" pos:column="51"/></name></expr></argument>)<pos:position pos:line="56" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="53"/></expr_stmt>
      <break pos:line="57" pos:column="7">break;<pos:position pos:line="57" pos:column="13"/></break>
    <case pos:line="58" pos:column="5">case <expr><name pos:line="58" pos:column="10">DS_TYPE_DERIVE<pos:position pos:line="58" pos:column="24"/></name></expr>:<pos:position pos:line="58" pos:column="25"/></case>
      <expr_stmt><expr><name><name pos:line="59" pos:column="7">vl<pos:position pos:line="59" pos:column="9"/></name><operator pos:line="59" pos:column="9">-&gt;<pos:position pos:line="59" pos:column="14"/></operator><name pos:line="59" pos:column="11">values<pos:position pos:line="59" pos:column="17"/></name><index pos:line="59" pos:column="17">[<expr><literal type="number" pos:line="59" pos:column="18">0<pos:position pos:line="59" pos:column="19"/></literal></expr>]<pos:position pos:line="59" pos:column="20"/></index></name><operator pos:line="59" pos:column="20">.<pos:position pos:line="59" pos:column="21"/></operator><name pos:line="59" pos:column="21">derive<pos:position pos:line="59" pos:column="27"/></name> <operator pos:line="59" pos:column="28">=<pos:position pos:line="59" pos:column="29"/></operator> <call><name pos:line="59" pos:column="30">va_arg<pos:position pos:line="59" pos:column="36"/></name><argument_list pos:line="59" pos:column="36">(<argument><expr><name pos:line="59" pos:column="37">ap<pos:position pos:line="59" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="59" pos:column="41">derive_t<pos:position pos:line="59" pos:column="49"/></name></expr></argument>)<pos:position pos:line="59" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="51"/></expr_stmt>
      <break pos:line="60" pos:column="7">break;<pos:position pos:line="60" pos:column="13"/></break>
    <default pos:line="61" pos:column="5">default:<pos:position pos:line="61" pos:column="13"/></default>
      <expr_stmt><expr><call><name pos:line="62" pos:column="7">ERROR<pos:position pos:line="62" pos:column="12"/></name><argument_list pos:line="62" pos:column="12">(<argument><expr><literal type="string" pos:line="62" pos:column="13">"plugin_dispatch_multivalue: given store_type is incorrect."<pos:position pos:line="62" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="62" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="75"/></expr_stmt>
      <expr_stmt><expr><name pos:line="63" pos:column="7">failed<pos:position pos:line="63" pos:column="13"/></name><operator pos:line="63" pos:column="13">++<pos:position pos:line="63" pos:column="15"/></operator></expr>;<pos:position pos:line="63" pos:column="16"/></expr_stmt>
    }<pos:position pos:line="64" pos:column="6"/></block></switch>

    <expr_stmt><expr><name pos:line="66" pos:column="5">status<pos:position pos:line="66" pos:column="11"/></name> <operator pos:line="66" pos:column="12">=<pos:position pos:line="66" pos:column="13"/></operator> <call><name pos:line="66" pos:column="14">plugin_write_enqueue<pos:position pos:line="66" pos:column="34"/></name><argument_list pos:line="66" pos:column="34">(<argument><expr><name pos:line="66" pos:column="35">vl<pos:position pos:line="66" pos:column="37"/></name></expr></argument>)<pos:position pos:line="66" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="39"/></expr_stmt>
    <if pos:line="67" pos:column="5">if <condition pos:line="67" pos:column="8">(<expr><name pos:line="67" pos:column="9">status<pos:position pos:line="67" pos:column="15"/></name> <operator pos:line="67" pos:column="16">!=<pos:position pos:line="67" pos:column="18"/></operator> <literal type="number" pos:line="67" pos:column="19">0<pos:position pos:line="67" pos:column="20"/></literal></expr>)<pos:position pos:line="67" pos:column="21"/></condition><then pos:line="67" pos:column="21">
      <block type="pseudo"><expr_stmt><expr><name pos:line="68" pos:column="7">failed<pos:position pos:line="68" pos:column="13"/></name><operator pos:line="68" pos:column="13">++<pos:position pos:line="68" pos:column="15"/></operator></expr>;<pos:position pos:line="68" pos:column="16"/></expr_stmt></block></then></if>
  }<pos:position pos:line="69" pos:column="4"/></block></while>
  <expr_stmt><expr><call><name pos:line="70" pos:column="3">va_end<pos:position pos:line="70" pos:column="9"/></name><argument_list pos:line="70" pos:column="9">(<argument><expr><name pos:line="70" pos:column="10">ap<pos:position pos:line="70" pos:column="12"/></name></expr></argument>)<pos:position pos:line="70" pos:column="13"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="14"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="72" pos:column="3">plugin_value_list_free<pos:position pos:line="72" pos:column="25"/></name><argument_list pos:line="72" pos:column="25">(<argument><expr><name pos:line="72" pos:column="26">vl<pos:position pos:line="72" pos:column="28"/></name></expr></argument>)<pos:position pos:line="72" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="30"/></expr_stmt>
  <return pos:line="73" pos:column="3">return <expr><operator pos:line="73" pos:column="10">(<pos:position pos:line="73" pos:column="11"/></operator><name pos:line="73" pos:column="11">failed<pos:position pos:line="73" pos:column="17"/></name><operator pos:line="73" pos:column="17">)<pos:position pos:line="73" pos:column="18"/></operator></expr>;<pos:position pos:line="73" pos:column="19"/></return>
}<pos:position pos:line="74" pos:column="2"/></block></function></unit>
