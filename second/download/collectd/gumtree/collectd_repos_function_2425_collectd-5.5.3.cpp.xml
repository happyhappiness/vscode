<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_2425_collectd-5.5.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">stop_write_threads<pos:position pos:line="1" pos:column="31"/></name> <parameter_list pos:line="1" pos:column="32">(<parameter><decl><type><name pos:line="1" pos:column="33">void<pos:position pos:line="1" pos:column="37"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="38"/></parameter_list> <comment type="block" pos:line="1" pos:column="39">/* {{{ */</comment>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">write_queue_t<pos:position pos:line="3" pos:column="22"/></name> <modifier pos:line="3" pos:column="23">*<pos:position pos:line="3" pos:column="24"/></modifier></type><name pos:line="3" pos:column="24">q<pos:position pos:line="3" pos:column="25"/></name></decl>;<pos:position pos:line="3" pos:column="26"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">i<pos:position pos:line="4" pos:column="14"/></name></decl>;<pos:position pos:line="4" pos:column="15"/></decl_stmt>

	<if pos:line="6" pos:column="9">if <condition pos:line="6" pos:column="12">(<expr><name pos:line="6" pos:column="13">write_threads<pos:position pos:line="6" pos:column="26"/></name> <operator pos:line="6" pos:column="27">==<pos:position pos:line="6" pos:column="29"/></operator> <name pos:line="6" pos:column="30">NULL<pos:position pos:line="6" pos:column="34"/></name></expr>)<pos:position pos:line="6" pos:column="35"/></condition><then pos:line="6" pos:column="35">
		<block type="pseudo"><return pos:line="7" pos:column="17">return;<pos:position pos:line="7" pos:column="24"/></return></block></then></if>

	<expr_stmt><expr><call><name pos:line="9" pos:column="9">INFO<pos:position pos:line="9" pos:column="13"/></name> <argument_list pos:line="9" pos:column="14">(<argument><expr><literal type="string" pos:line="9" pos:column="15">"collectd: Stopping %zu write threads."<pos:position pos:line="9" pos:column="54"/></literal></expr></argument>, <argument><expr><name pos:line="9" pos:column="56">write_threads_num<pos:position pos:line="9" pos:column="73"/></name></expr></argument>)<pos:position pos:line="9" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="75"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="11" pos:column="9">pthread_mutex_lock<pos:position pos:line="11" pos:column="27"/></name> <argument_list pos:line="11" pos:column="28">(<argument><expr><operator pos:line="11" pos:column="29">&amp;<pos:position pos:line="11" pos:column="34"/></operator><name pos:line="11" pos:column="30">write_lock<pos:position pos:line="11" pos:column="40"/></name></expr></argument>)<pos:position pos:line="11" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="42"/></expr_stmt>
	<expr_stmt><expr><name pos:line="12" pos:column="9">write_loop<pos:position pos:line="12" pos:column="19"/></name> <operator pos:line="12" pos:column="20">=<pos:position pos:line="12" pos:column="21"/></operator> <literal type="number" pos:line="12" pos:column="22">0<pos:position pos:line="12" pos:column="23"/></literal></expr>;<pos:position pos:line="12" pos:column="24"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="13" pos:column="9">DEBUG<pos:position pos:line="13" pos:column="14"/></name> <argument_list pos:line="13" pos:column="15">(<argument><expr><literal type="string" pos:line="13" pos:column="16">"plugin: stop_write_threads: Signalling `write_cond'"<pos:position pos:line="13" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="71"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="14" pos:column="9">pthread_cond_broadcast<pos:position pos:line="14" pos:column="31"/></name> <argument_list pos:line="14" pos:column="32">(<argument><expr><operator pos:line="14" pos:column="33">&amp;<pos:position pos:line="14" pos:column="38"/></operator><name pos:line="14" pos:column="34">write_cond<pos:position pos:line="14" pos:column="44"/></name></expr></argument>)<pos:position pos:line="14" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="46"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="15" pos:column="9">pthread_mutex_unlock<pos:position pos:line="15" pos:column="29"/></name> <argument_list pos:line="15" pos:column="30">(<argument><expr><operator pos:line="15" pos:column="31">&amp;<pos:position pos:line="15" pos:column="36"/></operator><name pos:line="15" pos:column="32">write_lock<pos:position pos:line="15" pos:column="42"/></name></expr></argument>)<pos:position pos:line="15" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="44"/></expr_stmt>

	<for pos:line="17" pos:column="9">for <control pos:line="17" pos:column="13">(<init><expr><name pos:line="17" pos:column="14">i<pos:position pos:line="17" pos:column="15"/></name> <operator pos:line="17" pos:column="16">=<pos:position pos:line="17" pos:column="17"/></operator> <literal type="number" pos:line="17" pos:column="18">0<pos:position pos:line="17" pos:column="19"/></literal></expr>;<pos:position pos:line="17" pos:column="20"/></init> <condition><expr><name pos:line="17" pos:column="21">i<pos:position pos:line="17" pos:column="22"/></name> <operator pos:line="17" pos:column="23">&lt;<pos:position pos:line="17" pos:column="27"/></operator> <name pos:line="17" pos:column="25">write_threads_num<pos:position pos:line="17" pos:column="42"/></name></expr>;<pos:position pos:line="17" pos:column="43"/></condition> <incr><expr><name pos:line="17" pos:column="44">i<pos:position pos:line="17" pos:column="45"/></name><operator pos:line="17" pos:column="45">++<pos:position pos:line="17" pos:column="47"/></operator></expr></incr>)<pos:position pos:line="17" pos:column="48"/></control>
	<block pos:line="18" pos:column="9">{
		<if pos:line="19" pos:column="17">if <condition pos:line="19" pos:column="20">(<expr><call><name pos:line="19" pos:column="21">pthread_join<pos:position pos:line="19" pos:column="33"/></name> <argument_list pos:line="19" pos:column="34">(<argument><expr><name><name pos:line="19" pos:column="35">write_threads<pos:position pos:line="19" pos:column="48"/></name><index pos:line="19" pos:column="48">[<expr><name pos:line="19" pos:column="49">i<pos:position pos:line="19" pos:column="50"/></name></expr>]<pos:position pos:line="19" pos:column="51"/></index></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="53">NULL<pos:position pos:line="19" pos:column="57"/></name></expr></argument>)<pos:position pos:line="19" pos:column="58"/></argument_list></call> <operator pos:line="19" pos:column="59">!=<pos:position pos:line="19" pos:column="61"/></operator> <literal type="number" pos:line="19" pos:column="62">0<pos:position pos:line="19" pos:column="63"/></literal></expr>)<pos:position pos:line="19" pos:column="64"/></condition><then pos:line="19" pos:column="64">
		<block pos:line="20" pos:column="17">{
			<expr_stmt><expr><call><name pos:line="21" pos:column="25">ERROR<pos:position pos:line="21" pos:column="30"/></name> <argument_list pos:line="21" pos:column="31">(<argument><expr><literal type="string" pos:line="21" pos:column="32">"plugin: stop_write_threads: pthread_join failed."<pos:position pos:line="21" pos:column="82"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="84"/></expr_stmt>
		}<pos:position pos:line="22" pos:column="18"/></block></then></if>
		<expr_stmt><expr><name><name pos:line="23" pos:column="17">write_threads<pos:position pos:line="23" pos:column="30"/></name><index pos:line="23" pos:column="30">[<expr><name pos:line="23" pos:column="31">i<pos:position pos:line="23" pos:column="32"/></name></expr>]<pos:position pos:line="23" pos:column="33"/></index></name> <operator pos:line="23" pos:column="34">=<pos:position pos:line="23" pos:column="35"/></operator> <operator pos:line="23" pos:column="36">(<pos:position pos:line="23" pos:column="37"/></operator><name pos:line="23" pos:column="37">pthread_t<pos:position pos:line="23" pos:column="46"/></name><operator pos:line="23" pos:column="46">)<pos:position pos:line="23" pos:column="47"/></operator> <literal type="number" pos:line="23" pos:column="48">0<pos:position pos:line="23" pos:column="49"/></literal></expr>;<pos:position pos:line="23" pos:column="50"/></expr_stmt>
	}<pos:position pos:line="24" pos:column="10"/></block></for>
	<expr_stmt><expr><call><name pos:line="25" pos:column="9">sfree<pos:position pos:line="25" pos:column="14"/></name> <argument_list pos:line="25" pos:column="15">(<argument><expr><name pos:line="25" pos:column="16">write_threads<pos:position pos:line="25" pos:column="29"/></name></expr></argument>)<pos:position pos:line="25" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="31"/></expr_stmt>
	<expr_stmt><expr><name pos:line="26" pos:column="9">write_threads_num<pos:position pos:line="26" pos:column="26"/></name> <operator pos:line="26" pos:column="27">=<pos:position pos:line="26" pos:column="28"/></operator> <literal type="number" pos:line="26" pos:column="29">0<pos:position pos:line="26" pos:column="30"/></literal></expr>;<pos:position pos:line="26" pos:column="31"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="28" pos:column="9">pthread_mutex_lock<pos:position pos:line="28" pos:column="27"/></name> <argument_list pos:line="28" pos:column="28">(<argument><expr><operator pos:line="28" pos:column="29">&amp;<pos:position pos:line="28" pos:column="34"/></operator><name pos:line="28" pos:column="30">write_lock<pos:position pos:line="28" pos:column="40"/></name></expr></argument>)<pos:position pos:line="28" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="42"/></expr_stmt>
	<expr_stmt><expr><name pos:line="29" pos:column="9">i<pos:position pos:line="29" pos:column="10"/></name> <operator pos:line="29" pos:column="11">=<pos:position pos:line="29" pos:column="12"/></operator> <literal type="number" pos:line="29" pos:column="13">0<pos:position pos:line="29" pos:column="14"/></literal></expr>;<pos:position pos:line="29" pos:column="15"/></expr_stmt>
	<for pos:line="30" pos:column="9">for <control pos:line="30" pos:column="13">(<init><expr><name pos:line="30" pos:column="14">q<pos:position pos:line="30" pos:column="15"/></name> <operator pos:line="30" pos:column="16">=<pos:position pos:line="30" pos:column="17"/></operator> <name pos:line="30" pos:column="18">write_queue_head<pos:position pos:line="30" pos:column="34"/></name></expr>;<pos:position pos:line="30" pos:column="35"/></init> <condition><expr><name pos:line="30" pos:column="36">q<pos:position pos:line="30" pos:column="37"/></name> <operator pos:line="30" pos:column="38">!=<pos:position pos:line="30" pos:column="40"/></operator> <name pos:line="30" pos:column="41">NULL<pos:position pos:line="30" pos:column="45"/></name></expr>;<pos:position pos:line="30" pos:column="46"/></condition> <incr/>)<pos:position pos:line="30" pos:column="48"/></control>
	<block pos:line="31" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="32" pos:column="17">write_queue_t<pos:position pos:line="32" pos:column="30"/></name> <modifier pos:line="32" pos:column="31">*<pos:position pos:line="32" pos:column="32"/></modifier></type><name pos:line="32" pos:column="32">q1<pos:position pos:line="32" pos:column="34"/></name> <init pos:line="32" pos:column="35">= <expr><name pos:line="32" pos:column="37">q<pos:position pos:line="32" pos:column="38"/></name></expr></init></decl>;<pos:position pos:line="32" pos:column="39"/></decl_stmt>
		<expr_stmt><expr><call><name pos:line="33" pos:column="17">plugin_value_list_free<pos:position pos:line="33" pos:column="39"/></name> <argument_list pos:line="33" pos:column="40">(<argument><expr><name><name pos:line="33" pos:column="41">q<pos:position pos:line="33" pos:column="42"/></name><operator pos:line="33" pos:column="42">-&gt;<pos:position pos:line="33" pos:column="47"/></operator><name pos:line="33" pos:column="44">vl<pos:position pos:line="33" pos:column="46"/></name></name></expr></argument>)<pos:position pos:line="33" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="48"/></expr_stmt>
		<expr_stmt><expr><name pos:line="34" pos:column="17">q<pos:position pos:line="34" pos:column="18"/></name> <operator pos:line="34" pos:column="19">=<pos:position pos:line="34" pos:column="20"/></operator> <name><name pos:line="34" pos:column="21">q<pos:position pos:line="34" pos:column="22"/></name><operator pos:line="34" pos:column="22">-&gt;<pos:position pos:line="34" pos:column="27"/></operator><name pos:line="34" pos:column="24">next<pos:position pos:line="34" pos:column="28"/></name></name></expr>;<pos:position pos:line="34" pos:column="29"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="35" pos:column="17">sfree<pos:position pos:line="35" pos:column="22"/></name> <argument_list pos:line="35" pos:column="23">(<argument><expr><name pos:line="35" pos:column="24">q1<pos:position pos:line="35" pos:column="26"/></name></expr></argument>)<pos:position pos:line="35" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="28"/></expr_stmt>
		<expr_stmt><expr><name pos:line="36" pos:column="17">i<pos:position pos:line="36" pos:column="18"/></name><operator pos:line="36" pos:column="18">++<pos:position pos:line="36" pos:column="20"/></operator></expr>;<pos:position pos:line="36" pos:column="21"/></expr_stmt>
	}<pos:position pos:line="37" pos:column="10"/></block></for>
	<expr_stmt><expr><name pos:line="38" pos:column="9">write_queue_head<pos:position pos:line="38" pos:column="25"/></name> <operator pos:line="38" pos:column="26">=<pos:position pos:line="38" pos:column="27"/></operator> <name pos:line="38" pos:column="28">NULL<pos:position pos:line="38" pos:column="32"/></name></expr>;<pos:position pos:line="38" pos:column="33"/></expr_stmt>
	<expr_stmt><expr><name pos:line="39" pos:column="9">write_queue_tail<pos:position pos:line="39" pos:column="25"/></name> <operator pos:line="39" pos:column="26">=<pos:position pos:line="39" pos:column="27"/></operator> <name pos:line="39" pos:column="28">NULL<pos:position pos:line="39" pos:column="32"/></name></expr>;<pos:position pos:line="39" pos:column="33"/></expr_stmt>
	<expr_stmt><expr><name pos:line="40" pos:column="9">write_queue_length<pos:position pos:line="40" pos:column="27"/></name> <operator pos:line="40" pos:column="28">=<pos:position pos:line="40" pos:column="29"/></operator> <literal type="number" pos:line="40" pos:column="30">0<pos:position pos:line="40" pos:column="31"/></literal></expr>;<pos:position pos:line="40" pos:column="32"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="41" pos:column="9">pthread_mutex_unlock<pos:position pos:line="41" pos:column="29"/></name> <argument_list pos:line="41" pos:column="30">(<argument><expr><operator pos:line="41" pos:column="31">&amp;<pos:position pos:line="41" pos:column="36"/></operator><name pos:line="41" pos:column="32">write_lock<pos:position pos:line="41" pos:column="42"/></name></expr></argument>)<pos:position pos:line="41" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="44"/></expr_stmt>

	<if pos:line="43" pos:column="9">if <condition pos:line="43" pos:column="12">(<expr><name pos:line="43" pos:column="13">i<pos:position pos:line="43" pos:column="14"/></name> <operator pos:line="43" pos:column="15">&gt;<pos:position pos:line="43" pos:column="19"/></operator> <literal type="number" pos:line="43" pos:column="17">0<pos:position pos:line="43" pos:column="18"/></literal></expr>)<pos:position pos:line="43" pos:column="19"/></condition><then pos:line="43" pos:column="19">
	<block pos:line="44" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="45" pos:column="17">WARNING<pos:position pos:line="45" pos:column="24"/></name> <argument_list pos:line="45" pos:column="25">(<argument><expr><literal type="string" pos:line="45" pos:column="26">"plugin: %i value list%s left after shutting down "<pos:position pos:line="45" pos:column="77"/></literal>
				<literal type="string" pos:line="46" pos:column="33">"the write threads."<pos:position pos:line="46" pos:column="53"/></literal></expr></argument>,
				<argument><expr><name pos:line="47" pos:column="33">i<pos:position pos:line="47" pos:column="34"/></name></expr></argument>, <argument><expr><ternary><condition><expr><operator pos:line="47" pos:column="36">(<pos:position pos:line="47" pos:column="37"/></operator><name pos:line="47" pos:column="37">i<pos:position pos:line="47" pos:column="38"/></name> <operator pos:line="47" pos:column="39">==<pos:position pos:line="47" pos:column="41"/></operator> <literal type="number" pos:line="47" pos:column="42">1<pos:position pos:line="47" pos:column="43"/></literal><operator pos:line="47" pos:column="43">)<pos:position pos:line="47" pos:column="44"/></operator></expr> ?<pos:position pos:line="47" pos:column="46"/></condition><then pos:line="47" pos:column="46"> <expr><literal type="string" pos:line="47" pos:column="47">" was"<pos:position pos:line="47" pos:column="53"/></literal></expr> <pos:position pos:line="47" pos:column="54"/></then><else pos:line="47" pos:column="54">: <expr><literal type="string" pos:line="47" pos:column="56">"s were"<pos:position pos:line="47" pos:column="64"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="47" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="66"/></expr_stmt>
	}<pos:position pos:line="48" pos:column="10"/></block></then></if>
}<pos:position pos:line="49" pos:column="2"/></block></function></unit>
