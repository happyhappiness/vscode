<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_437_collectd-4.8.0.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">ps_list_register<pos:position pos:line="1" pos:column="29"/></name> <parameter_list pos:line="1" pos:column="30">(<parameter><decl><type><specifier pos:line="1" pos:column="31">const<pos:position pos:line="1" pos:column="36"/></specifier> <name pos:line="1" pos:column="37">char<pos:position pos:line="1" pos:column="41"/></name> <modifier pos:line="1" pos:column="42">*<pos:position pos:line="1" pos:column="43"/></modifier></type><name pos:line="1" pos:column="43">name<pos:position pos:line="1" pos:column="47"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="49">const<pos:position pos:line="1" pos:column="54"/></specifier> <name pos:line="1" pos:column="55">char<pos:position pos:line="1" pos:column="59"/></name> <modifier pos:line="1" pos:column="60">*<pos:position pos:line="1" pos:column="61"/></modifier></type><name pos:line="1" pos:column="61">regexp<pos:position pos:line="1" pos:column="67"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="68"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<expr_stmt><expr><name pos:line="3" pos:column="9">procstat_t<pos:position pos:line="3" pos:column="19"/></name> <operator pos:line="3" pos:column="20">*<pos:position pos:line="3" pos:column="21"/></operator><operator pos:line="3" pos:column="21">new<pos:position pos:line="3" pos:column="24"/></operator></expr>;<pos:position pos:line="3" pos:column="25"/></expr_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">procstat_t<pos:position pos:line="4" pos:column="19"/></name> <modifier pos:line="4" pos:column="20">*<pos:position pos:line="4" pos:column="21"/></modifier></type><name pos:line="4" pos:column="21">ptr<pos:position pos:line="4" pos:column="24"/></name></decl>;<pos:position pos:line="4" pos:column="25"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">status<pos:position pos:line="5" pos:column="19"/></name></decl>;<pos:position pos:line="5" pos:column="20"/></decl_stmt>

	<expr_stmt><expr><operator pos:line="7" pos:column="9">new<pos:position pos:line="7" pos:column="12"/></operator> <operator pos:line="7" pos:column="13">=<pos:position pos:line="7" pos:column="14"/></operator> <operator pos:line="7" pos:column="15">(<pos:position pos:line="7" pos:column="16"/></operator><name pos:line="7" pos:column="16">procstat_t<pos:position pos:line="7" pos:column="26"/></name> <operator pos:line="7" pos:column="27">*<pos:position pos:line="7" pos:column="28"/></operator><operator pos:line="7" pos:column="28">)<pos:position pos:line="7" pos:column="29"/></operator> <call><name pos:line="7" pos:column="30">malloc<pos:position pos:line="7" pos:column="36"/></name> <argument_list pos:line="7" pos:column="37">(<argument><expr><sizeof pos:line="7" pos:column="38">sizeof <argument_list pos:line="7" pos:column="45">(<argument><expr><name pos:line="7" pos:column="46">procstat_t<pos:position pos:line="7" pos:column="56"/></name></expr></argument>)<pos:position pos:line="7" pos:column="57"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="7" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="59"/></expr_stmt>
	<if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><operator pos:line="8" pos:column="13">new<pos:position pos:line="8" pos:column="16"/></operator> <operator pos:line="8" pos:column="17">==<pos:position pos:line="8" pos:column="19"/></operator> <name pos:line="8" pos:column="20">NULL<pos:position pos:line="8" pos:column="24"/></name></expr>)<pos:position pos:line="8" pos:column="25"/></condition><then pos:line="8" pos:column="25">
	<block pos:line="9" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="10" pos:column="17">ERROR<pos:position pos:line="10" pos:column="22"/></name> <argument_list pos:line="10" pos:column="23">(<argument><expr><literal type="string" pos:line="10" pos:column="24">"processes plugin: ps_list_register: malloc failed."<pos:position pos:line="10" pos:column="76"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="78"/></expr_stmt>
		<return pos:line="11" pos:column="17">return;<pos:position pos:line="11" pos:column="24"/></return>
	}<pos:position pos:line="12" pos:column="10"/></block></then></if>
	<expr_stmt><expr><call><name pos:line="13" pos:column="9">memset<pos:position pos:line="13" pos:column="15"/></name> <argument_list pos:line="13" pos:column="16">(<argument><expr><operator pos:line="13" pos:column="17">new<pos:position pos:line="13" pos:column="20"/></operator></expr></argument>, <argument><expr><literal type="number" pos:line="13" pos:column="22">0<pos:position pos:line="13" pos:column="23"/></literal></expr></argument>, <argument><expr><sizeof pos:line="13" pos:column="25">sizeof <argument_list pos:line="13" pos:column="32">(<argument><expr><name pos:line="13" pos:column="33">procstat_t<pos:position pos:line="13" pos:column="43"/></name></expr></argument>)<pos:position pos:line="13" pos:column="44"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="13" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="46"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="14" pos:column="9">sstrncpy<pos:position pos:line="14" pos:column="17"/></name> <argument_list pos:line="14" pos:column="18">(<argument><expr><operator pos:line="14" pos:column="19">new<pos:position pos:line="14" pos:column="22"/></operator><operator pos:line="14" pos:column="22">-&gt;<pos:position pos:line="14" pos:column="27"/></operator><name pos:line="14" pos:column="24">name<pos:position pos:line="14" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="30">name<pos:position pos:line="14" pos:column="34"/></name></expr></argument>, <argument><expr><sizeof pos:line="14" pos:column="36">sizeof <argument_list pos:line="14" pos:column="43">(<argument><expr><operator pos:line="14" pos:column="44">new<pos:position pos:line="14" pos:column="47"/></operator><operator pos:line="14" pos:column="47">-&gt;<pos:position pos:line="14" pos:column="52"/></operator><name pos:line="14" pos:column="49">name<pos:position pos:line="14" pos:column="53"/></name></expr></argument>)<pos:position pos:line="14" pos:column="54"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="14" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="56"/></expr_stmt>

<cpp:if pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">if<pos:position pos:line="16" pos:column="4"/></cpp:directive> <expr><name pos:line="16" pos:column="5">HAVE_REGEX_H<pos:position pos:line="16" pos:column="17"/></name></expr></cpp:if>
	<if pos:line="17" pos:column="9">if <condition pos:line="17" pos:column="12">(<expr><name pos:line="17" pos:column="13">regexp<pos:position pos:line="17" pos:column="19"/></name> <operator pos:line="17" pos:column="20">!=<pos:position pos:line="17" pos:column="22"/></operator> <name pos:line="17" pos:column="23">NULL<pos:position pos:line="17" pos:column="27"/></name></expr>)<pos:position pos:line="17" pos:column="28"/></condition><then pos:line="17" pos:column="28">
	<block pos:line="18" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="19" pos:column="17">DEBUG<pos:position pos:line="19" pos:column="22"/></name> <argument_list pos:line="19" pos:column="23">(<argument><expr><literal type="string" pos:line="19" pos:column="24">"ProcessMatch: adding \"%s\" as criteria to process %s."<pos:position pos:line="19" pos:column="80"/></literal></expr></argument>, <argument><expr><name pos:line="19" pos:column="82">regexp<pos:position pos:line="19" pos:column="88"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="90">name<pos:position pos:line="19" pos:column="94"/></name></expr></argument>)<pos:position pos:line="19" pos:column="95"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="96"/></expr_stmt>
		<expr_stmt><expr><operator pos:line="20" pos:column="17">new<pos:position pos:line="20" pos:column="20"/></operator><operator pos:line="20" pos:column="20">-&gt;<pos:position pos:line="20" pos:column="25"/></operator><name pos:line="20" pos:column="22">re<pos:position pos:line="20" pos:column="24"/></name> <operator pos:line="20" pos:column="25">=<pos:position pos:line="20" pos:column="26"/></operator> <operator pos:line="20" pos:column="27">(<pos:position pos:line="20" pos:column="28"/></operator><name pos:line="20" pos:column="28">regex_t<pos:position pos:line="20" pos:column="35"/></name> <operator pos:line="20" pos:column="36">*<pos:position pos:line="20" pos:column="37"/></operator><operator pos:line="20" pos:column="37">)<pos:position pos:line="20" pos:column="38"/></operator> <call><name pos:line="20" pos:column="39">malloc<pos:position pos:line="20" pos:column="45"/></name> <argument_list pos:line="20" pos:column="46">(<argument><expr><sizeof pos:line="20" pos:column="47">sizeof <argument_list pos:line="20" pos:column="54">(<argument><expr><name pos:line="20" pos:column="55">regex_t<pos:position pos:line="20" pos:column="62"/></name></expr></argument>)<pos:position pos:line="20" pos:column="63"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="20" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="65"/></expr_stmt>
		<if pos:line="21" pos:column="17">if <condition pos:line="21" pos:column="20">(<expr><operator pos:line="21" pos:column="21">new<pos:position pos:line="21" pos:column="24"/></operator><operator pos:line="21" pos:column="24">-&gt;<pos:position pos:line="21" pos:column="29"/></operator><name pos:line="21" pos:column="26">re<pos:position pos:line="21" pos:column="28"/></name> <operator pos:line="21" pos:column="29">==<pos:position pos:line="21" pos:column="31"/></operator> <name pos:line="21" pos:column="32">NULL<pos:position pos:line="21" pos:column="36"/></name></expr>)<pos:position pos:line="21" pos:column="37"/></condition><then pos:line="21" pos:column="37">
		<block pos:line="22" pos:column="17">{
			<expr_stmt><expr><call><name pos:line="23" pos:column="25">ERROR<pos:position pos:line="23" pos:column="30"/></name> <argument_list pos:line="23" pos:column="31">(<argument><expr><literal type="string" pos:line="23" pos:column="32">"processes plugin: ps_list_register: malloc failed."<pos:position pos:line="23" pos:column="84"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="85"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="86"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="24" pos:column="25">sfree<pos:position pos:line="24" pos:column="30"/></name> <argument_list pos:line="24" pos:column="31">(<argument><expr><operator pos:line="24" pos:column="32">new<pos:position pos:line="24" pos:column="35"/></operator></expr></argument>)<pos:position pos:line="24" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="37"/></expr_stmt>
			<return pos:line="25" pos:column="25">return;<pos:position pos:line="25" pos:column="32"/></return>
		}<pos:position pos:line="26" pos:column="18"/></block></then></if>

		<expr_stmt><expr><name pos:line="28" pos:column="17">status<pos:position pos:line="28" pos:column="23"/></name> <operator pos:line="28" pos:column="24">=<pos:position pos:line="28" pos:column="25"/></operator> <call><name pos:line="28" pos:column="26">regcomp<pos:position pos:line="28" pos:column="33"/></name> <argument_list pos:line="28" pos:column="34">(<argument><expr><operator pos:line="28" pos:column="35">new<pos:position pos:line="28" pos:column="38"/></operator><operator pos:line="28" pos:column="38">-&gt;<pos:position pos:line="28" pos:column="43"/></operator><name pos:line="28" pos:column="40">re<pos:position pos:line="28" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="44">regexp<pos:position pos:line="28" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="52">REG_EXTENDED<pos:position pos:line="28" pos:column="64"/></name> <operator pos:line="28" pos:column="65">|<pos:position pos:line="28" pos:column="66"/></operator> <name pos:line="28" pos:column="67">REG_NOSUB<pos:position pos:line="28" pos:column="76"/></name></expr></argument>)<pos:position pos:line="28" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="78"/></expr_stmt>
		<if pos:line="29" pos:column="17">if <condition pos:line="29" pos:column="20">(<expr><name pos:line="29" pos:column="21">status<pos:position pos:line="29" pos:column="27"/></name> <operator pos:line="29" pos:column="28">!=<pos:position pos:line="29" pos:column="30"/></operator> <literal type="number" pos:line="29" pos:column="31">0<pos:position pos:line="29" pos:column="32"/></literal></expr>)<pos:position pos:line="29" pos:column="33"/></condition><then pos:line="29" pos:column="33">
		<block pos:line="30" pos:column="17">{
			<expr_stmt><expr><call><name pos:line="31" pos:column="25">DEBUG<pos:position pos:line="31" pos:column="30"/></name> <argument_list pos:line="31" pos:column="31">(<argument><expr><literal type="string" pos:line="31" pos:column="32">"ProcessMatch: compiling the regular expression \"%s\" failed."<pos:position pos:line="31" pos:column="95"/></literal></expr></argument>, <argument><expr><name pos:line="31" pos:column="97">regexp<pos:position pos:line="31" pos:column="103"/></name></expr></argument>)<pos:position pos:line="31" pos:column="104"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="105"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="32" pos:column="25">sfree<pos:position pos:line="32" pos:column="30"/></name><argument_list pos:line="32" pos:column="30">(<argument><expr><operator pos:line="32" pos:column="31">new<pos:position pos:line="32" pos:column="34"/></operator><operator pos:line="32" pos:column="34">-&gt;<pos:position pos:line="32" pos:column="39"/></operator><name pos:line="32" pos:column="36">re<pos:position pos:line="32" pos:column="38"/></name></expr></argument>)<pos:position pos:line="32" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="40"/></expr_stmt>
			<return pos:line="33" pos:column="25">return;<pos:position pos:line="33" pos:column="32"/></return>
		}<pos:position pos:line="34" pos:column="18"/></block></then></if>
	}<pos:position pos:line="35" pos:column="10"/></block></then></if>
<cpp:else pos:line="36" pos:column="1">#<cpp:directive pos:line="36" pos:column="2">else<pos:position pos:line="36" pos:column="6"/></cpp:directive></cpp:else>
	<if pos:line="37" pos:column="9">if <condition pos:line="37" pos:column="12">(<expr><name pos:line="37" pos:column="13">regexp<pos:position pos:line="37" pos:column="19"/></name> <operator pos:line="37" pos:column="20">!=<pos:position pos:line="37" pos:column="22"/></operator> <name pos:line="37" pos:column="23">NULL<pos:position pos:line="37" pos:column="27"/></name></expr>)<pos:position pos:line="37" pos:column="28"/></condition><then pos:line="37" pos:column="28">
	<block pos:line="38" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="39" pos:column="17">ERROR<pos:position pos:line="39" pos:column="22"/></name> <argument_list pos:line="39" pos:column="23">(<argument><expr><literal type="string" pos:line="39" pos:column="24">"processes plugin: ps_list_register: "<pos:position pos:line="39" pos:column="62"/></literal>
				<literal type="string" pos:line="40" pos:column="33">"Regular expression \"%s\" found in config "<pos:position pos:line="40" pos:column="77"/></literal>
				<literal type="string" pos:line="41" pos:column="33">"file, but support for regular expressions "<pos:position pos:line="41" pos:column="77"/></literal>
				<literal type="string" pos:line="42" pos:column="33">"has been dispabled at compile time."<pos:position pos:line="42" pos:column="70"/></literal></expr></argument>,
				<argument><expr><name pos:line="43" pos:column="33">regexp<pos:position pos:line="43" pos:column="39"/></name></expr></argument>)<pos:position pos:line="43" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="41"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="44" pos:column="17">sfree<pos:position pos:line="44" pos:column="22"/></name> <argument_list pos:line="44" pos:column="23">(<argument><expr><operator pos:line="44" pos:column="24">new<pos:position pos:line="44" pos:column="27"/></operator></expr></argument>)<pos:position pos:line="44" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="29"/></expr_stmt>
		<return pos:line="45" pos:column="17">return;<pos:position pos:line="45" pos:column="24"/></return>
	}<pos:position pos:line="46" pos:column="10"/></block></then></if>
<cpp:endif pos:line="47" pos:column="1">#<cpp:directive pos:line="47" pos:column="2">endif<pos:position pos:line="47" pos:column="7"/></cpp:directive></cpp:endif>
	
	<for pos:line="49" pos:column="9">for <control pos:line="49" pos:column="13">(<init><expr><name pos:line="49" pos:column="14">ptr<pos:position pos:line="49" pos:column="17"/></name> <operator pos:line="49" pos:column="18">=<pos:position pos:line="49" pos:column="19"/></operator> <name pos:line="49" pos:column="20">list_head_g<pos:position pos:line="49" pos:column="31"/></name></expr>;<pos:position pos:line="49" pos:column="32"/></init> <condition><expr><name pos:line="49" pos:column="33">ptr<pos:position pos:line="49" pos:column="36"/></name> <operator pos:line="49" pos:column="37">!=<pos:position pos:line="49" pos:column="39"/></operator> <name pos:line="49" pos:column="40">NULL<pos:position pos:line="49" pos:column="44"/></name></expr>;<pos:position pos:line="49" pos:column="45"/></condition> <incr><expr><name pos:line="49" pos:column="46">ptr<pos:position pos:line="49" pos:column="49"/></name> <operator pos:line="49" pos:column="50">=<pos:position pos:line="49" pos:column="51"/></operator> <name><name pos:line="49" pos:column="52">ptr<pos:position pos:line="49" pos:column="55"/></name><operator pos:line="49" pos:column="55">-&gt;<pos:position pos:line="49" pos:column="60"/></operator><name pos:line="49" pos:column="57">next<pos:position pos:line="49" pos:column="61"/></name></name></expr></incr>)<pos:position pos:line="49" pos:column="62"/></control>
	<block pos:line="50" pos:column="9">{
		<if pos:line="51" pos:column="17">if <condition pos:line="51" pos:column="20">(<expr><call><name pos:line="51" pos:column="21">strcmp<pos:position pos:line="51" pos:column="27"/></name> <argument_list pos:line="51" pos:column="28">(<argument><expr><name><name pos:line="51" pos:column="29">ptr<pos:position pos:line="51" pos:column="32"/></name><operator pos:line="51" pos:column="32">-&gt;<pos:position pos:line="51" pos:column="37"/></operator><name pos:line="51" pos:column="34">name<pos:position pos:line="51" pos:column="38"/></name></name></expr></argument>, <argument><expr><name pos:line="51" pos:column="40">name<pos:position pos:line="51" pos:column="44"/></name></expr></argument>)<pos:position pos:line="51" pos:column="45"/></argument_list></call> <operator pos:line="51" pos:column="46">==<pos:position pos:line="51" pos:column="48"/></operator> <literal type="number" pos:line="51" pos:column="49">0<pos:position pos:line="51" pos:column="50"/></literal></expr>)<pos:position pos:line="51" pos:column="51"/></condition><then pos:line="51" pos:column="51">
		<block pos:line="52" pos:column="17">{
			<expr_stmt><expr><call><name pos:line="53" pos:column="25">WARNING<pos:position pos:line="53" pos:column="32"/></name> <argument_list pos:line="53" pos:column="33">(<argument><expr><literal type="string" pos:line="53" pos:column="34">"processes plugin: You have configured more "<pos:position pos:line="53" pos:column="79"/></literal>
					<literal type="string" pos:line="54" pos:column="41">"than one `Process' or "<pos:position pos:line="54" pos:column="65"/></literal>
					<literal type="string" pos:line="55" pos:column="41">"`ProcessMatch' with the same name. "<pos:position pos:line="55" pos:column="78"/></literal>
					<literal type="string" pos:line="56" pos:column="41">"All but the first setting will be "<pos:position pos:line="56" pos:column="77"/></literal>
					<literal type="string" pos:line="57" pos:column="41">"ignored."<pos:position pos:line="57" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="57" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="53"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="58" pos:column="25">sfree<pos:position pos:line="58" pos:column="30"/></name> <argument_list pos:line="58" pos:column="31">(<argument><expr><operator pos:line="58" pos:column="32">new<pos:position pos:line="58" pos:column="35"/></operator><operator pos:line="58" pos:column="35">-&gt;<pos:position pos:line="58" pos:column="40"/></operator><name pos:line="58" pos:column="37">re<pos:position pos:line="58" pos:column="39"/></name></expr></argument>)<pos:position pos:line="58" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="41"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="59" pos:column="25">sfree<pos:position pos:line="59" pos:column="30"/></name> <argument_list pos:line="59" pos:column="31">(<argument><expr><operator pos:line="59" pos:column="32">new<pos:position pos:line="59" pos:column="35"/></operator></expr></argument>)<pos:position pos:line="59" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="37"/></expr_stmt>
			<return pos:line="60" pos:column="25">return;<pos:position pos:line="60" pos:column="32"/></return>
		}<pos:position pos:line="61" pos:column="18"/></block></then></if>

		<if pos:line="63" pos:column="17">if <condition pos:line="63" pos:column="20">(<expr><name><name pos:line="63" pos:column="21">ptr<pos:position pos:line="63" pos:column="24"/></name><operator pos:line="63" pos:column="24">-&gt;<pos:position pos:line="63" pos:column="29"/></operator><name pos:line="63" pos:column="26">next<pos:position pos:line="63" pos:column="30"/></name></name> <operator pos:line="63" pos:column="31">==<pos:position pos:line="63" pos:column="33"/></operator> <name pos:line="63" pos:column="34">NULL<pos:position pos:line="63" pos:column="38"/></name></expr>)<pos:position pos:line="63" pos:column="39"/></condition><then pos:line="63" pos:column="39">
			<block type="pseudo"><break pos:line="64" pos:column="25">break;<pos:position pos:line="64" pos:column="31"/></break></block></then></if>
	}<pos:position pos:line="65" pos:column="10"/></block></for>

	<if pos:line="67" pos:column="9">if <condition pos:line="67" pos:column="12">(<expr><name pos:line="67" pos:column="13">ptr<pos:position pos:line="67" pos:column="16"/></name> <operator pos:line="67" pos:column="17">==<pos:position pos:line="67" pos:column="19"/></operator> <name pos:line="67" pos:column="20">NULL<pos:position pos:line="67" pos:column="24"/></name></expr>)<pos:position pos:line="67" pos:column="25"/></condition><then pos:line="67" pos:column="25">
		<block type="pseudo"><expr_stmt><expr><name pos:line="68" pos:column="17">list_head_g<pos:position pos:line="68" pos:column="28"/></name> <operator pos:line="68" pos:column="29">=<pos:position pos:line="68" pos:column="30"/></operator> <operator pos:line="68" pos:column="31">new<pos:position pos:line="68" pos:column="34"/></operator></expr>;<pos:position pos:line="68" pos:column="35"/></expr_stmt></block></then>
	<else pos:line="69" pos:column="9">else
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="70" pos:column="17">ptr<pos:position pos:line="70" pos:column="20"/></name><operator pos:line="70" pos:column="20">-&gt;<pos:position pos:line="70" pos:column="25"/></operator><name pos:line="70" pos:column="22">next<pos:position pos:line="70" pos:column="26"/></name></name> <operator pos:line="70" pos:column="27">=<pos:position pos:line="70" pos:column="28"/></operator> <operator pos:line="70" pos:column="29">new<pos:position pos:line="70" pos:column="32"/></operator></expr>;<pos:position pos:line="70" pos:column="33"/></expr_stmt></block></else></if>
}<pos:position pos:line="71" pos:column="2"/></block></function></unit>
