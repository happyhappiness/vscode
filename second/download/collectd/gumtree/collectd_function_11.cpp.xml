<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_function_11.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">multicast_send<pos:position pos:line="1" pos:column="19"/></name> <parameter_list pos:line="1" pos:column="20">(<parameter><decl><type><name pos:line="1" pos:column="21">char<pos:position pos:line="1" pos:column="25"/></name> <modifier pos:line="1" pos:column="26">*<pos:position pos:line="1" pos:column="27"/></modifier></type><name pos:line="1" pos:column="27">type<pos:position pos:line="1" pos:column="31"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="33">char<pos:position pos:line="1" pos:column="37"/></name> <modifier pos:line="1" pos:column="38">*<pos:position pos:line="1" pos:column="39"/></modifier></type><name pos:line="1" pos:column="39">instance<pos:position pos:line="1" pos:column="47"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="49">char<pos:position pos:line="1" pos:column="53"/></name> <modifier pos:line="1" pos:column="54">*<pos:position pos:line="1" pos:column="55"/></modifier></type><name pos:line="1" pos:column="55">value<pos:position pos:line="1" pos:column="60"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="61"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">sd<pos:position pos:line="3" pos:column="15"/></name> <init pos:line="3" pos:column="16">= <expr><call><name pos:line="3" pos:column="18">get_write_socket<pos:position pos:line="3" pos:column="34"/></name> <argument_list pos:line="3" pos:column="35">()<pos:position pos:line="3" pos:column="37"/></argument_list></call></expr></init></decl>;<pos:position pos:line="3" pos:column="38"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">sockaddr_in<pos:position pos:line="4" pos:column="27"/></name></name></type> <name pos:line="4" pos:column="28">addr<pos:position pos:line="4" pos:column="32"/></name></decl>;<pos:position pos:line="4" pos:column="33"/></decl_stmt>

	<decl_stmt><decl><type><name pos:line="6" pos:column="9">char<pos:position pos:line="6" pos:column="13"/></name></type> <name><name pos:line="6" pos:column="14">buf<pos:position pos:line="6" pos:column="17"/></name><index pos:line="6" pos:column="17">[<expr><name pos:line="6" pos:column="18">BUFF_SIZE<pos:position pos:line="6" pos:column="27"/></name></expr>]<pos:position pos:line="6" pos:column="28"/></index></name></decl>;<pos:position pos:line="6" pos:column="29"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">int<pos:position pos:line="7" pos:column="12"/></name></type> <name pos:line="7" pos:column="13">buflen<pos:position pos:line="7" pos:column="19"/></name></decl>;<pos:position pos:line="7" pos:column="20"/></decl_stmt>

	<if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><name pos:line="9" pos:column="13">sd<pos:position pos:line="9" pos:column="15"/></name> <operator pos:line="9" pos:column="16">==<pos:position pos:line="9" pos:column="18"/></operator> <operator pos:line="9" pos:column="19">-<pos:position pos:line="9" pos:column="20"/></operator><literal type="number" pos:line="9" pos:column="20">1<pos:position pos:line="9" pos:column="21"/></literal></expr>)<pos:position pos:line="9" pos:column="22"/></condition><then pos:line="9" pos:column="22">
		<block type="pseudo"><return pos:line="10" pos:column="17">return <expr><operator pos:line="10" pos:column="24">(<pos:position pos:line="10" pos:column="25"/></operator><operator pos:line="10" pos:column="25">-<pos:position pos:line="10" pos:column="26"/></operator><literal type="number" pos:line="10" pos:column="26">1<pos:position pos:line="10" pos:column="27"/></literal><operator pos:line="10" pos:column="27">)<pos:position pos:line="10" pos:column="28"/></operator></expr>;<pos:position pos:line="10" pos:column="29"/></return></block></then></if>

	<if pos:line="12" pos:column="9">if <condition pos:line="12" pos:column="12">(<expr><operator pos:line="12" pos:column="13">(<pos:position pos:line="12" pos:column="14"/></operator><name pos:line="12" pos:column="14">buflen<pos:position pos:line="12" pos:column="20"/></name> <operator pos:line="12" pos:column="21">=<pos:position pos:line="12" pos:column="22"/></operator> <call><name pos:line="12" pos:column="23">snprintf<pos:position pos:line="12" pos:column="31"/></name> <argument_list pos:line="12" pos:column="32">(<argument><expr><name pos:line="12" pos:column="33">buf<pos:position pos:line="12" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="38">BUFF_SIZE<pos:position pos:line="12" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="12" pos:column="49">"%s %s %s"<pos:position pos:line="12" pos:column="59"/></literal></expr></argument>, <argument><expr><name pos:line="12" pos:column="61">type<pos:position pos:line="12" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="67">instance<pos:position pos:line="12" pos:column="75"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="77">value<pos:position pos:line="12" pos:column="82"/></name></expr></argument>)<pos:position pos:line="12" pos:column="83"/></argument_list></call><operator pos:line="12" pos:column="83">)<pos:position pos:line="12" pos:column="84"/></operator> <operator pos:line="12" pos:column="85">&gt;=<pos:position pos:line="12" pos:column="90"/></operator> <name pos:line="12" pos:column="88">BUFF_SIZE<pos:position pos:line="12" pos:column="97"/></name></expr>)<pos:position pos:line="12" pos:column="98"/></condition><then pos:line="12" pos:column="98">
	<block pos:line="13" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="14" pos:column="17">fprintf<pos:position pos:line="14" pos:column="24"/></name> <argument_list pos:line="14" pos:column="25">(<argument><expr><name pos:line="14" pos:column="26">stderr<pos:position pos:line="14" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="14" pos:column="34">"Output truncated.."<pos:position pos:line="14" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="56"/></expr_stmt>
		<return pos:line="15" pos:column="17">return <expr><operator pos:line="15" pos:column="24">(<pos:position pos:line="15" pos:column="25"/></operator><operator pos:line="15" pos:column="25">-<pos:position pos:line="15" pos:column="26"/></operator><literal type="number" pos:line="15" pos:column="26">1<pos:position pos:line="15" pos:column="27"/></literal><operator pos:line="15" pos:column="27">)<pos:position pos:line="15" pos:column="28"/></operator></expr>;<pos:position pos:line="15" pos:column="29"/></return>
	}<pos:position pos:line="16" pos:column="10"/></block></then></if>
	<expr_stmt><expr><name><name pos:line="17" pos:column="9">buf<pos:position pos:line="17" pos:column="12"/></name><index pos:line="17" pos:column="12">[<expr><name pos:line="17" pos:column="13">buflen<pos:position pos:line="17" pos:column="19"/></name><operator pos:line="17" pos:column="19">++<pos:position pos:line="17" pos:column="21"/></operator></expr>]<pos:position pos:line="17" pos:column="22"/></index></name> <operator pos:line="17" pos:column="23">=<pos:position pos:line="17" pos:column="24"/></operator> <literal type="char" pos:line="17" pos:column="25">'\0'<pos:position pos:line="17" pos:column="29"/></literal></expr>;<pos:position pos:line="17" pos:column="30"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="19" pos:column="9">memset<pos:position pos:line="19" pos:column="15"/></name><argument_list pos:line="19" pos:column="15">(<argument><expr><operator pos:line="19" pos:column="16">&amp;<pos:position pos:line="19" pos:column="21"/></operator><name pos:line="19" pos:column="17">addr<pos:position pos:line="19" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="19" pos:column="23">'\0'<pos:position pos:line="19" pos:column="27"/></literal></expr></argument>, <argument><expr><sizeof pos:line="19" pos:column="29">sizeof <argument_list pos:line="19" pos:column="36">(<argument><expr><name pos:line="19" pos:column="37">addr<pos:position pos:line="19" pos:column="41"/></name></expr></argument>)<pos:position pos:line="19" pos:column="42"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="19" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="44"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="20" pos:column="9">addr<pos:position pos:line="20" pos:column="13"/></name><operator pos:line="20" pos:column="13">.<pos:position pos:line="20" pos:column="14"/></operator><name pos:line="20" pos:column="14">sin_family<pos:position pos:line="20" pos:column="24"/></name></name> <operator pos:line="20" pos:column="25">=<pos:position pos:line="20" pos:column="26"/></operator> <name pos:line="20" pos:column="27">AF_INET<pos:position pos:line="20" pos:column="34"/></name></expr>;<pos:position pos:line="20" pos:column="35"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="21" pos:column="9">addr<pos:position pos:line="21" pos:column="13"/></name><operator pos:line="21" pos:column="13">.<pos:position pos:line="21" pos:column="14"/></operator><name pos:line="21" pos:column="14">sin_addr<pos:position pos:line="21" pos:column="22"/></name><operator pos:line="21" pos:column="22">.<pos:position pos:line="21" pos:column="23"/></operator><name pos:line="21" pos:column="23">s_addr<pos:position pos:line="21" pos:column="29"/></name></name> <operator pos:line="21" pos:column="30">=<pos:position pos:line="21" pos:column="31"/></operator> <call><name pos:line="21" pos:column="32">inet_addr<pos:position pos:line="21" pos:column="41"/></name> <argument_list pos:line="21" pos:column="42">(<argument><expr><name pos:line="21" pos:column="43">MCAST_GROUP<pos:position pos:line="21" pos:column="54"/></name></expr></argument>)<pos:position pos:line="21" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="56"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="22" pos:column="9">addr<pos:position pos:line="22" pos:column="13"/></name><operator pos:line="22" pos:column="13">.<pos:position pos:line="22" pos:column="14"/></operator><name pos:line="22" pos:column="14">sin_port<pos:position pos:line="22" pos:column="22"/></name></name> <operator pos:line="22" pos:column="23">=<pos:position pos:line="22" pos:column="24"/></operator> <call><name pos:line="22" pos:column="25">htons<pos:position pos:line="22" pos:column="30"/></name> <argument_list pos:line="22" pos:column="31">(<argument><expr><name pos:line="22" pos:column="32">UDP_PORT<pos:position pos:line="22" pos:column="40"/></name></expr></argument>)<pos:position pos:line="22" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="42"/></expr_stmt>

	<return pos:line="24" pos:column="9">return <expr><operator pos:line="24" pos:column="16">(<pos:position pos:line="24" pos:column="17"/></operator><call><name pos:line="24" pos:column="17">sendto<pos:position pos:line="24" pos:column="23"/></name> <argument_list pos:line="24" pos:column="24">(<argument><expr><name pos:line="24" pos:column="25">sd<pos:position pos:line="24" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="29">buf<pos:position pos:line="24" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="34">buflen<pos:position pos:line="24" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="24" pos:column="42">0<pos:position pos:line="24" pos:column="43"/></literal></expr></argument>, <argument><expr><operator pos:line="24" pos:column="45">(<pos:position pos:line="24" pos:column="46"/></operator>struct <name pos:line="24" pos:column="53">sockaddr<pos:position pos:line="24" pos:column="61"/></name> <operator pos:line="24" pos:column="62">*<pos:position pos:line="24" pos:column="63"/></operator><operator pos:line="24" pos:column="63">)<pos:position pos:line="24" pos:column="64"/></operator> <operator pos:line="24" pos:column="65">&amp;<pos:position pos:line="24" pos:column="70"/></operator><name pos:line="24" pos:column="66">addr<pos:position pos:line="24" pos:column="70"/></name></expr></argument>, <argument><expr><sizeof pos:line="24" pos:column="72">sizeof <argument_list pos:line="24" pos:column="79">(<argument><expr><name pos:line="24" pos:column="80">addr<pos:position pos:line="24" pos:column="84"/></name></expr></argument>)<pos:position pos:line="24" pos:column="85"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="24" pos:column="86"/></argument_list></call><operator pos:line="24" pos:column="86">)<pos:position pos:line="24" pos:column="87"/></operator></expr>;<pos:position pos:line="24" pos:column="88"/></return>
}<pos:position pos:line="25" pos:column="2"/></block></function></unit>
