<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_606_collectd-4.2.6.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">network_send_buffer<pos:position pos:line="1" pos:column="32"/></name> <parameter_list pos:line="1" pos:column="33">(<parameter><decl><type><specifier pos:line="1" pos:column="34">const<pos:position pos:line="1" pos:column="39"/></specifier> <name pos:line="1" pos:column="40">char<pos:position pos:line="1" pos:column="44"/></name> <modifier pos:line="1" pos:column="45">*<pos:position pos:line="1" pos:column="46"/></modifier></type><name pos:line="1" pos:column="46">buffer<pos:position pos:line="1" pos:column="52"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="54">int<pos:position pos:line="1" pos:column="57"/></name></type> <name pos:line="1" pos:column="58">buffer_len<pos:position pos:line="1" pos:column="68"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="69"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">sockent_t<pos:position pos:line="3" pos:column="18"/></name> <modifier pos:line="3" pos:column="19">*<pos:position pos:line="3" pos:column="20"/></modifier></type><name pos:line="3" pos:column="20">se<pos:position pos:line="3" pos:column="22"/></name></decl>;<pos:position pos:line="3" pos:column="23"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">status<pos:position pos:line="4" pos:column="19"/></name></decl>;<pos:position pos:line="4" pos:column="20"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="6" pos:column="9">DEBUG<pos:position pos:line="6" pos:column="14"/></name> <argument_list pos:line="6" pos:column="15">(<argument><expr><literal type="string" pos:line="6" pos:column="16">"network plugin: network_send_buffer: buffer_len = %i"<pos:position pos:line="6" pos:column="70"/></literal></expr></argument>, <argument><expr><name pos:line="6" pos:column="72">buffer_len<pos:position pos:line="6" pos:column="82"/></name></expr></argument>)<pos:position pos:line="6" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="84"/></expr_stmt>

	<for pos:line="8" pos:column="9">for <control pos:line="8" pos:column="13">(<init><expr><name pos:line="8" pos:column="14">se<pos:position pos:line="8" pos:column="16"/></name> <operator pos:line="8" pos:column="17">=<pos:position pos:line="8" pos:column="18"/></operator> <name pos:line="8" pos:column="19">sending_sockets<pos:position pos:line="8" pos:column="34"/></name></expr>;<pos:position pos:line="8" pos:column="35"/></init> <condition><expr><name pos:line="8" pos:column="36">se<pos:position pos:line="8" pos:column="38"/></name> <operator pos:line="8" pos:column="39">!=<pos:position pos:line="8" pos:column="41"/></operator> <name pos:line="8" pos:column="42">NULL<pos:position pos:line="8" pos:column="46"/></name></expr>;<pos:position pos:line="8" pos:column="47"/></condition> <incr><expr><name pos:line="8" pos:column="48">se<pos:position pos:line="8" pos:column="50"/></name> <operator pos:line="8" pos:column="51">=<pos:position pos:line="8" pos:column="52"/></operator> <name><name pos:line="8" pos:column="53">se<pos:position pos:line="8" pos:column="55"/></name><operator pos:line="8" pos:column="55">-&gt;<pos:position pos:line="8" pos:column="60"/></operator><name pos:line="8" pos:column="57">next<pos:position pos:line="8" pos:column="61"/></name></name></expr></incr>)<pos:position pos:line="8" pos:column="62"/></control>
	<block pos:line="9" pos:column="9">{
		<while pos:line="10" pos:column="17">while <condition pos:line="10" pos:column="23">(<expr><literal type="number" pos:line="10" pos:column="24">42<pos:position pos:line="10" pos:column="26"/></literal></expr>)<pos:position pos:line="10" pos:column="27"/></condition>
		<block pos:line="11" pos:column="17">{
			<expr_stmt><expr><name pos:line="12" pos:column="25">status<pos:position pos:line="12" pos:column="31"/></name> <operator pos:line="12" pos:column="32">=<pos:position pos:line="12" pos:column="33"/></operator> <call><name pos:line="12" pos:column="34">sendto<pos:position pos:line="12" pos:column="40"/></name> <argument_list pos:line="12" pos:column="41">(<argument><expr><name><name pos:line="12" pos:column="42">se<pos:position pos:line="12" pos:column="44"/></name><operator pos:line="12" pos:column="44">-&gt;<pos:position pos:line="12" pos:column="49"/></operator><name pos:line="12" pos:column="46">fd<pos:position pos:line="12" pos:column="48"/></name></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="50">buffer<pos:position pos:line="12" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="58">buffer_len<pos:position pos:line="12" pos:column="68"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="12" pos:column="70">0<pos:position pos:line="12" pos:column="71"/></literal></expr></argument> <comment type="block" pos:line="12" pos:column="72">/* no flags */</comment>,
					<argument><expr><operator pos:line="13" pos:column="41">(<pos:position pos:line="13" pos:column="42"/></operator>struct <name pos:line="13" pos:column="49">sockaddr<pos:position pos:line="13" pos:column="57"/></name> <operator pos:line="13" pos:column="58">*<pos:position pos:line="13" pos:column="59"/></operator><operator pos:line="13" pos:column="59">)<pos:position pos:line="13" pos:column="60"/></operator> <name><name pos:line="13" pos:column="61">se<pos:position pos:line="13" pos:column="63"/></name><operator pos:line="13" pos:column="63">-&gt;<pos:position pos:line="13" pos:column="68"/></operator><name pos:line="13" pos:column="65">addr<pos:position pos:line="13" pos:column="69"/></name></name></expr></argument>, <argument><expr><name><name pos:line="13" pos:column="71">se<pos:position pos:line="13" pos:column="73"/></name><operator pos:line="13" pos:column="73">-&gt;<pos:position pos:line="13" pos:column="78"/></operator><name pos:line="13" pos:column="75">addrlen<pos:position pos:line="13" pos:column="82"/></name></name></expr></argument>)<pos:position pos:line="13" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="84"/></expr_stmt>
			<if pos:line="14" pos:column="25">if <condition pos:line="14" pos:column="28">(<expr><name pos:line="14" pos:column="29">status<pos:position pos:line="14" pos:column="35"/></name> <operator pos:line="14" pos:column="36">&lt;<pos:position pos:line="14" pos:column="40"/></operator> <literal type="number" pos:line="14" pos:column="38">0<pos:position pos:line="14" pos:column="39"/></literal></expr>)<pos:position pos:line="14" pos:column="40"/></condition><then pos:line="14" pos:column="40">
			<block pos:line="15" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="16" pos:column="33">char<pos:position pos:line="16" pos:column="37"/></name></type> <name><name pos:line="16" pos:column="38">errbuf<pos:position pos:line="16" pos:column="44"/></name><index pos:line="16" pos:column="44">[<expr><literal type="number" pos:line="16" pos:column="45">1024<pos:position pos:line="16" pos:column="49"/></literal></expr>]<pos:position pos:line="16" pos:column="50"/></index></name></decl>;<pos:position pos:line="16" pos:column="51"/></decl_stmt>
				<if pos:line="17" pos:column="33">if <condition pos:line="17" pos:column="36">(<expr><name pos:line="17" pos:column="37">errno<pos:position pos:line="17" pos:column="42"/></name> <operator pos:line="17" pos:column="43">==<pos:position pos:line="17" pos:column="45"/></operator> <name pos:line="17" pos:column="46">EINTR<pos:position pos:line="17" pos:column="51"/></name></expr>)<pos:position pos:line="17" pos:column="52"/></condition><then pos:line="17" pos:column="52">
					<block type="pseudo"><continue pos:line="18" pos:column="41">continue;<pos:position pos:line="18" pos:column="50"/></continue></block></then></if>
				<expr_stmt><expr><call><name pos:line="19" pos:column="33">ERROR<pos:position pos:line="19" pos:column="38"/></name> <argument_list pos:line="19" pos:column="39">(<argument><expr><literal type="string" pos:line="19" pos:column="40">"network plugin: sendto failed: %s"<pos:position pos:line="19" pos:column="75"/></literal></expr></argument>,
						<argument><expr><call><name pos:line="20" pos:column="49">sstrerror<pos:position pos:line="20" pos:column="58"/></name> <argument_list pos:line="20" pos:column="59">(<argument><expr><name pos:line="20" pos:column="60">errno<pos:position pos:line="20" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="67">errbuf<pos:position pos:line="20" pos:column="73"/></name></expr></argument>,
							<argument><expr><sizeof pos:line="21" pos:column="57">sizeof <argument_list pos:line="21" pos:column="64">(<argument><expr><name pos:line="21" pos:column="65">errbuf<pos:position pos:line="21" pos:column="71"/></name></expr></argument>)<pos:position pos:line="21" pos:column="72"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="21" pos:column="73"/></argument_list></call></expr></argument>)<pos:position pos:line="21" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="75"/></expr_stmt>
				<break pos:line="22" pos:column="33">break;<pos:position pos:line="22" pos:column="39"/></break>
			}<pos:position pos:line="23" pos:column="26"/></block></then></if>

			<break pos:line="25" pos:column="25">break;<pos:position pos:line="25" pos:column="31"/></break>
		}<pos:position pos:line="26" pos:column="18"/></block></while> <comment type="block" pos:line="26" pos:column="19">/* while (42) */</comment>
	}<pos:position pos:line="27" pos:column="10"/></block></for> <comment type="block" pos:line="27" pos:column="11">/* for (sending_sockets) */</comment>
}<pos:position pos:line="28" pos:column="2"/></block></function></unit>
