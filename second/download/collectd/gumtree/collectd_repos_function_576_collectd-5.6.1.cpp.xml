<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_576_collectd-5.6.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">sensu_connect<pos:position pos:line="1" pos:column="25"/></name><parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><name><name pos:line="1" pos:column="26">struct<pos:position pos:line="1" pos:column="32"/></name> <name pos:line="1" pos:column="33">sensu_host<pos:position pos:line="1" pos:column="43"/></name></name> <modifier pos:line="1" pos:column="44">*<pos:position pos:line="1" pos:column="45"/></modifier></type><name pos:line="1" pos:column="45">host<pos:position pos:line="1" pos:column="49"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="50"/></parameter_list> <comment type="block" pos:line="1" pos:column="51">/* {{{ */</comment>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type>			 <name pos:line="3" pos:column="34">e<pos:position pos:line="3" pos:column="35"/></name></decl>;<pos:position pos:line="3" pos:column="36"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">char<pos:position pos:line="4" pos:column="13"/></name> <specifier pos:line="4" pos:column="14">const<pos:position pos:line="4" pos:column="19"/></specifier>		<modifier pos:line="4" pos:column="33">*<pos:position pos:line="4" pos:column="34"/></modifier></type><name pos:line="4" pos:column="34">node<pos:position pos:line="4" pos:column="38"/></name></decl>;<pos:position pos:line="4" pos:column="39"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">char<pos:position pos:line="5" pos:column="13"/></name> <specifier pos:line="5" pos:column="14">const<pos:position pos:line="5" pos:column="19"/></specifier>		<modifier pos:line="5" pos:column="33">*<pos:position pos:line="5" pos:column="34"/></modifier></type><name pos:line="5" pos:column="34">service<pos:position pos:line="5" pos:column="41"/></name></decl>;<pos:position pos:line="5" pos:column="42"/></decl_stmt>

	<comment type="line" pos:line="7" pos:column="9">// Resolve the target if we haven't done already</comment>
	<if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><operator pos:line="8" pos:column="13">!<pos:position pos:line="8" pos:column="14"/></operator><operator pos:line="8" pos:column="14">(<pos:position pos:line="8" pos:column="15"/></operator><name><name pos:line="8" pos:column="15">host<pos:position pos:line="8" pos:column="19"/></name><operator pos:line="8" pos:column="19">-&gt;<pos:position pos:line="8" pos:column="24"/></operator><name pos:line="8" pos:column="21">flags<pos:position pos:line="8" pos:column="26"/></name></name> <operator pos:line="8" pos:column="27">&amp;<pos:position pos:line="8" pos:column="32"/></operator> <name pos:line="8" pos:column="29">F_READY<pos:position pos:line="8" pos:column="36"/></name><operator pos:line="8" pos:column="36">)<pos:position pos:line="8" pos:column="37"/></operator></expr>)<pos:position pos:line="8" pos:column="38"/></condition><then pos:line="8" pos:column="38"> <block pos:line="8" pos:column="39">{
		<expr_stmt><expr><call><name pos:line="9" pos:column="17">memset<pos:position pos:line="9" pos:column="23"/></name><argument_list pos:line="9" pos:column="23">(<argument><expr><operator pos:line="9" pos:column="24">&amp;<pos:position pos:line="9" pos:column="29"/></operator><name pos:line="9" pos:column="25">service<pos:position pos:line="9" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="9" pos:column="34">0<pos:position pos:line="9" pos:column="35"/></literal></expr></argument>, <argument><expr><sizeof pos:line="9" pos:column="37">sizeof<argument_list pos:line="9" pos:column="43">(<argument><expr><name pos:line="9" pos:column="44">service<pos:position pos:line="9" pos:column="51"/></name></expr></argument>)<pos:position pos:line="9" pos:column="52"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="9" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="54"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="10" pos:column="17">host<pos:position pos:line="10" pos:column="21"/></name><operator pos:line="10" pos:column="21">-&gt;<pos:position pos:line="10" pos:column="26"/></operator><name pos:line="10" pos:column="23">res<pos:position pos:line="10" pos:column="26"/></name></name> <operator pos:line="10" pos:column="27">=<pos:position pos:line="10" pos:column="28"/></operator> <name pos:line="10" pos:column="29">NULL<pos:position pos:line="10" pos:column="33"/></name></expr>;<pos:position pos:line="10" pos:column="34"/></expr_stmt>

		<expr_stmt><expr><name pos:line="12" pos:column="17">node<pos:position pos:line="12" pos:column="21"/></name> <operator pos:line="12" pos:column="22">=<pos:position pos:line="12" pos:column="23"/></operator> <ternary><condition><expr><operator pos:line="12" pos:column="24">(<pos:position pos:line="12" pos:column="25"/></operator><name><name pos:line="12" pos:column="25">host<pos:position pos:line="12" pos:column="29"/></name><operator pos:line="12" pos:column="29">-&gt;<pos:position pos:line="12" pos:column="34"/></operator><name pos:line="12" pos:column="31">node<pos:position pos:line="12" pos:column="35"/></name></name> <operator pos:line="12" pos:column="36">!=<pos:position pos:line="12" pos:column="38"/></operator> <name pos:line="12" pos:column="39">NULL<pos:position pos:line="12" pos:column="43"/></name><operator pos:line="12" pos:column="43">)<pos:position pos:line="12" pos:column="44"/></operator></expr> ?<pos:position pos:line="12" pos:column="46"/></condition><then pos:line="12" pos:column="46"> <expr><name><name pos:line="12" pos:column="47">host<pos:position pos:line="12" pos:column="51"/></name><operator pos:line="12" pos:column="51">-&gt;<pos:position pos:line="12" pos:column="56"/></operator><name pos:line="12" pos:column="53">node<pos:position pos:line="12" pos:column="57"/></name></name></expr> <pos:position pos:line="12" pos:column="58"/></then><else pos:line="12" pos:column="58">: <expr><name pos:line="12" pos:column="60">SENSU_HOST<pos:position pos:line="12" pos:column="70"/></name></expr></else></ternary></expr>;<pos:position pos:line="12" pos:column="71"/></expr_stmt>
		<expr_stmt><expr><name pos:line="13" pos:column="17">service<pos:position pos:line="13" pos:column="24"/></name> <operator pos:line="13" pos:column="25">=<pos:position pos:line="13" pos:column="26"/></operator> <ternary><condition><expr><operator pos:line="13" pos:column="27">(<pos:position pos:line="13" pos:column="28"/></operator><name><name pos:line="13" pos:column="28">host<pos:position pos:line="13" pos:column="32"/></name><operator pos:line="13" pos:column="32">-&gt;<pos:position pos:line="13" pos:column="37"/></operator><name pos:line="13" pos:column="34">service<pos:position pos:line="13" pos:column="41"/></name></name> <operator pos:line="13" pos:column="42">!=<pos:position pos:line="13" pos:column="44"/></operator> <name pos:line="13" pos:column="45">NULL<pos:position pos:line="13" pos:column="49"/></name><operator pos:line="13" pos:column="49">)<pos:position pos:line="13" pos:column="50"/></operator></expr> ?<pos:position pos:line="13" pos:column="52"/></condition><then pos:line="13" pos:column="52"> <expr><name><name pos:line="13" pos:column="53">host<pos:position pos:line="13" pos:column="57"/></name><operator pos:line="13" pos:column="57">-&gt;<pos:position pos:line="13" pos:column="62"/></operator><name pos:line="13" pos:column="59">service<pos:position pos:line="13" pos:column="66"/></name></name></expr> <pos:position pos:line="13" pos:column="67"/></then><else pos:line="13" pos:column="67">: <expr><name pos:line="13" pos:column="69">SENSU_PORT<pos:position pos:line="13" pos:column="79"/></name></expr></else></ternary></expr>;<pos:position pos:line="13" pos:column="80"/></expr_stmt>

		<decl_stmt><decl><type><name><name pos:line="15" pos:column="17">struct<pos:position pos:line="15" pos:column="23"/></name> <name pos:line="15" pos:column="24">addrinfo<pos:position pos:line="15" pos:column="32"/></name></name></type> <name pos:line="15" pos:column="33">ai_hints<pos:position pos:line="15" pos:column="41"/></name> <init pos:line="15" pos:column="42">= <expr><block pos:line="15" pos:column="44">{
			<expr><operator pos:line="16" pos:column="25">.<pos:position pos:line="16" pos:column="26"/></operator><name pos:line="16" pos:column="26">ai_family<pos:position pos:line="16" pos:column="35"/></name> <operator pos:line="16" pos:column="36">=<pos:position pos:line="16" pos:column="37"/></operator> <name pos:line="16" pos:column="38">AF_INET<pos:position pos:line="16" pos:column="45"/></name></expr>,
			<expr><operator pos:line="17" pos:column="25">.<pos:position pos:line="17" pos:column="26"/></operator><name pos:line="17" pos:column="26">ai_flags<pos:position pos:line="17" pos:column="34"/></name> <operator pos:line="17" pos:column="35">=<pos:position pos:line="17" pos:column="36"/></operator> <name pos:line="17" pos:column="37">AI_ADDRCONFIG<pos:position pos:line="17" pos:column="50"/></name></expr>,
			<expr><operator pos:line="18" pos:column="25">.<pos:position pos:line="18" pos:column="26"/></operator><name pos:line="18" pos:column="26">ai_socktype<pos:position pos:line="18" pos:column="37"/></name> <operator pos:line="18" pos:column="38">=<pos:position pos:line="18" pos:column="39"/></operator> <name pos:line="18" pos:column="40">SOCK_STREAM<pos:position pos:line="18" pos:column="51"/></name></expr>
		}<pos:position pos:line="19" pos:column="18"/></block></expr></init></decl>;<pos:position pos:line="19" pos:column="19"/></decl_stmt>

		<if pos:line="21" pos:column="17">if <condition pos:line="21" pos:column="20">(<expr><operator pos:line="21" pos:column="21">(<pos:position pos:line="21" pos:column="22"/></operator><name pos:line="21" pos:column="22">e<pos:position pos:line="21" pos:column="23"/></name> <operator pos:line="21" pos:column="24">=<pos:position pos:line="21" pos:column="25"/></operator> <call><name pos:line="21" pos:column="26">getaddrinfo<pos:position pos:line="21" pos:column="37"/></name><argument_list pos:line="21" pos:column="37">(<argument><expr><name pos:line="21" pos:column="38">node<pos:position pos:line="21" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="44">service<pos:position pos:line="21" pos:column="51"/></name></expr></argument>, <argument><expr><operator pos:line="21" pos:column="53">&amp;<pos:position pos:line="21" pos:column="58"/></operator><name pos:line="21" pos:column="54">ai_hints<pos:position pos:line="21" pos:column="62"/></name></expr></argument>, <argument><expr><operator pos:line="21" pos:column="64">&amp;<pos:position pos:line="21" pos:column="69"/></operator><operator pos:line="21" pos:column="65">(<pos:position pos:line="21" pos:column="66"/></operator><name><name pos:line="21" pos:column="66">host<pos:position pos:line="21" pos:column="70"/></name><operator pos:line="21" pos:column="70">-&gt;<pos:position pos:line="21" pos:column="75"/></operator><name pos:line="21" pos:column="72">res<pos:position pos:line="21" pos:column="75"/></name></name><operator pos:line="21" pos:column="75">)<pos:position pos:line="21" pos:column="76"/></operator></expr></argument>)<pos:position pos:line="21" pos:column="77"/></argument_list></call><operator pos:line="21" pos:column="77">)<pos:position pos:line="21" pos:column="78"/></operator> <operator pos:line="21" pos:column="79">!=<pos:position pos:line="21" pos:column="81"/></operator> <literal type="number" pos:line="21" pos:column="82">0<pos:position pos:line="21" pos:column="83"/></literal></expr>)<pos:position pos:line="21" pos:column="84"/></condition><then pos:line="21" pos:column="84"> <block pos:line="21" pos:column="85">{
			<expr_stmt><expr><call><name pos:line="22" pos:column="25">ERROR<pos:position pos:line="22" pos:column="30"/></name><argument_list pos:line="22" pos:column="30">(<argument><expr><literal type="string" pos:line="22" pos:column="31">"write_sensu plugin: Unable to resolve host \"%s\": %s"<pos:position pos:line="22" pos:column="86"/></literal></expr></argument>,
					<argument><expr><name pos:line="23" pos:column="41">node<pos:position pos:line="23" pos:column="45"/></name></expr></argument>, <argument><expr><call><name pos:line="23" pos:column="47">gai_strerror<pos:position pos:line="23" pos:column="59"/></name><argument_list pos:line="23" pos:column="59">(<argument><expr><name pos:line="23" pos:column="60">e<pos:position pos:line="23" pos:column="61"/></name></expr></argument>)<pos:position pos:line="23" pos:column="62"/></argument_list></call></expr></argument>)<pos:position pos:line="23" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="64"/></expr_stmt>
			<return pos:line="24" pos:column="25">return <expr><operator pos:line="24" pos:column="32">-<pos:position pos:line="24" pos:column="33"/></operator><literal type="number" pos:line="24" pos:column="33">1<pos:position pos:line="24" pos:column="34"/></literal></expr>;<pos:position pos:line="24" pos:column="35"/></return>
		}<pos:position pos:line="25" pos:column="18"/></block></then></if>
		<expr_stmt><expr><call><name pos:line="26" pos:column="17">DEBUG<pos:position pos:line="26" pos:column="22"/></name><argument_list pos:line="26" pos:column="22">(<argument><expr><literal type="string" pos:line="26" pos:column="23">"write_sensu plugin: successfully resolved host/port: %s/%s"<pos:position pos:line="26" pos:column="83"/></literal></expr></argument>,
				<argument><expr><name pos:line="27" pos:column="33">node<pos:position pos:line="27" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="39">service<pos:position pos:line="27" pos:column="46"/></name></expr></argument>)<pos:position pos:line="27" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="48"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="28" pos:column="17">host<pos:position pos:line="28" pos:column="21"/></name><operator pos:line="28" pos:column="21">-&gt;<pos:position pos:line="28" pos:column="26"/></operator><name pos:line="28" pos:column="23">flags<pos:position pos:line="28" pos:column="28"/></name></name> <operator pos:line="28" pos:column="29">|=<pos:position pos:line="28" pos:column="31"/></operator> <name pos:line="28" pos:column="32">F_READY<pos:position pos:line="28" pos:column="39"/></name></expr>;<pos:position pos:line="28" pos:column="40"/></expr_stmt>
	}<pos:position pos:line="29" pos:column="10"/></block></then></if>

	<decl_stmt><decl><type><name><name pos:line="31" pos:column="9">struct<pos:position pos:line="31" pos:column="15"/></name> <name pos:line="31" pos:column="16">linger<pos:position pos:line="31" pos:column="22"/></name></name></type> <name pos:line="31" pos:column="23">so_linger<pos:position pos:line="31" pos:column="32"/></name></decl>;<pos:position pos:line="31" pos:column="33"/></decl_stmt>
	<expr_stmt><expr><name><name pos:line="32" pos:column="9">host<pos:position pos:line="32" pos:column="13"/></name><operator pos:line="32" pos:column="13">-&gt;<pos:position pos:line="32" pos:column="18"/></operator><name pos:line="32" pos:column="15">s<pos:position pos:line="32" pos:column="16"/></name></name> <operator pos:line="32" pos:column="17">=<pos:position pos:line="32" pos:column="18"/></operator> <operator pos:line="32" pos:column="19">-<pos:position pos:line="32" pos:column="20"/></operator><literal type="number" pos:line="32" pos:column="20">1<pos:position pos:line="32" pos:column="21"/></literal></expr>;<pos:position pos:line="32" pos:column="22"/></expr_stmt>
	<for pos:line="33" pos:column="9">for <control pos:line="33" pos:column="13">(<init><decl><type><name><name pos:line="33" pos:column="14">struct<pos:position pos:line="33" pos:column="20"/></name> <name pos:line="33" pos:column="21">addrinfo<pos:position pos:line="33" pos:column="29"/></name></name> <modifier pos:line="33" pos:column="30">*<pos:position pos:line="33" pos:column="31"/></modifier><name pos:line="33" pos:column="31">ai<pos:position pos:line="33" pos:column="33"/></name></type> <init pos:line="33" pos:column="34">= <expr><name><name pos:line="33" pos:column="36">host<pos:position pos:line="33" pos:column="40"/></name><operator pos:line="33" pos:column="40">-&gt;<pos:position pos:line="33" pos:column="45"/></operator><name pos:line="33" pos:column="42">res<pos:position pos:line="33" pos:column="45"/></name></name></expr></init></decl>;<pos:position pos:line="33" pos:column="46"/></init> <condition><expr><name pos:line="33" pos:column="47">ai<pos:position pos:line="33" pos:column="49"/></name> <operator pos:line="33" pos:column="50">!=<pos:position pos:line="33" pos:column="52"/></operator> <name pos:line="33" pos:column="53">NULL<pos:position pos:line="33" pos:column="57"/></name></expr>;<pos:position pos:line="33" pos:column="58"/></condition> <incr><expr><name pos:line="33" pos:column="59">ai<pos:position pos:line="33" pos:column="61"/></name> <operator pos:line="33" pos:column="62">=<pos:position pos:line="33" pos:column="63"/></operator> <name><name pos:line="33" pos:column="64">ai<pos:position pos:line="33" pos:column="66"/></name><operator pos:line="33" pos:column="66">-&gt;<pos:position pos:line="33" pos:column="71"/></operator><name pos:line="33" pos:column="68">ai_next<pos:position pos:line="33" pos:column="75"/></name></name></expr></incr>)<pos:position pos:line="33" pos:column="76"/></control> <block pos:line="33" pos:column="77">{
		<comment type="line" pos:line="34" pos:column="17">// create the socket</comment>
		<if pos:line="35" pos:column="17">if <condition pos:line="35" pos:column="20">(<expr><operator pos:line="35" pos:column="21">(<pos:position pos:line="35" pos:column="22"/></operator><name><name pos:line="35" pos:column="22">host<pos:position pos:line="35" pos:column="26"/></name><operator pos:line="35" pos:column="26">-&gt;<pos:position pos:line="35" pos:column="31"/></operator><name pos:line="35" pos:column="28">s<pos:position pos:line="35" pos:column="29"/></name></name> <operator pos:line="35" pos:column="30">=<pos:position pos:line="35" pos:column="31"/></operator> <call><name pos:line="35" pos:column="32">socket<pos:position pos:line="35" pos:column="38"/></name><argument_list pos:line="35" pos:column="38">(<argument><expr><name><name pos:line="35" pos:column="39">ai<pos:position pos:line="35" pos:column="41"/></name><operator pos:line="35" pos:column="41">-&gt;<pos:position pos:line="35" pos:column="46"/></operator><name pos:line="35" pos:column="43">ai_family<pos:position pos:line="35" pos:column="52"/></name></name></expr></argument>,
				      <argument><expr><name><name pos:line="36" pos:column="39">ai<pos:position pos:line="36" pos:column="41"/></name><operator pos:line="36" pos:column="41">-&gt;<pos:position pos:line="36" pos:column="46"/></operator><name pos:line="36" pos:column="43">ai_socktype<pos:position pos:line="36" pos:column="54"/></name></name></expr></argument>,
				      <argument><expr><name><name pos:line="37" pos:column="39">ai<pos:position pos:line="37" pos:column="41"/></name><operator pos:line="37" pos:column="41">-&gt;<pos:position pos:line="37" pos:column="46"/></operator><name pos:line="37" pos:column="43">ai_protocol<pos:position pos:line="37" pos:column="54"/></name></name></expr></argument>)<pos:position pos:line="37" pos:column="55"/></argument_list></call><operator pos:line="37" pos:column="55">)<pos:position pos:line="37" pos:column="56"/></operator> <operator pos:line="37" pos:column="57">==<pos:position pos:line="37" pos:column="59"/></operator> <operator pos:line="37" pos:column="60">-<pos:position pos:line="37" pos:column="61"/></operator><literal type="number" pos:line="37" pos:column="61">1<pos:position pos:line="37" pos:column="62"/></literal></expr>)<pos:position pos:line="37" pos:column="63"/></condition><then pos:line="37" pos:column="63"> <block pos:line="37" pos:column="64">{
			<continue pos:line="38" pos:column="25">continue;<pos:position pos:line="38" pos:column="34"/></continue>
		}<pos:position pos:line="39" pos:column="18"/></block></then></if>

		<comment type="line" pos:line="41" pos:column="17">// Set very low close() lingering</comment>
		<expr_stmt><expr><name><name pos:line="42" pos:column="17">so_linger<pos:position pos:line="42" pos:column="26"/></name><operator pos:line="42" pos:column="26">.<pos:position pos:line="42" pos:column="27"/></operator><name pos:line="42" pos:column="27">l_onoff<pos:position pos:line="42" pos:column="34"/></name></name> <operator pos:line="42" pos:column="35">=<pos:position pos:line="42" pos:column="36"/></operator> <literal type="number" pos:line="42" pos:column="37">1<pos:position pos:line="42" pos:column="38"/></literal></expr>;<pos:position pos:line="42" pos:column="39"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="43" pos:column="17">so_linger<pos:position pos:line="43" pos:column="26"/></name><operator pos:line="43" pos:column="26">.<pos:position pos:line="43" pos:column="27"/></operator><name pos:line="43" pos:column="27">l_linger<pos:position pos:line="43" pos:column="35"/></name></name> <operator pos:line="43" pos:column="36">=<pos:position pos:line="43" pos:column="37"/></operator> <literal type="number" pos:line="43" pos:column="38">3<pos:position pos:line="43" pos:column="39"/></literal></expr>;<pos:position pos:line="43" pos:column="40"/></expr_stmt>
		<if pos:line="44" pos:column="17">if <condition pos:line="44" pos:column="20">(<expr><call><name pos:line="44" pos:column="21">setsockopt<pos:position pos:line="44" pos:column="31"/></name><argument_list pos:line="44" pos:column="31">(<argument><expr><name><name pos:line="44" pos:column="32">host<pos:position pos:line="44" pos:column="36"/></name><operator pos:line="44" pos:column="36">-&gt;<pos:position pos:line="44" pos:column="41"/></operator><name pos:line="44" pos:column="38">s<pos:position pos:line="44" pos:column="39"/></name></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="41">SOL_SOCKET<pos:position pos:line="44" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="53">SO_LINGER<pos:position pos:line="44" pos:column="62"/></name></expr></argument>, <argument><expr><operator pos:line="44" pos:column="64">&amp;<pos:position pos:line="44" pos:column="69"/></operator><name pos:line="44" pos:column="65">so_linger<pos:position pos:line="44" pos:column="74"/></name></expr></argument>, <argument><expr><sizeof pos:line="44" pos:column="76">sizeof <name pos:line="44" pos:column="83">so_linger<pos:position pos:line="44" pos:column="92"/></name></sizeof></expr></argument>)<pos:position pos:line="44" pos:column="93"/></argument_list></call> <operator pos:line="44" pos:column="94">!=<pos:position pos:line="44" pos:column="96"/></operator> <literal type="number" pos:line="44" pos:column="97">0<pos:position pos:line="44" pos:column="98"/></literal></expr>)<pos:position pos:line="44" pos:column="99"/></condition><then pos:line="44" pos:column="99">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="45" pos:column="25">WARNING<pos:position pos:line="45" pos:column="32"/></name><argument_list pos:line="45" pos:column="32">(<argument><expr><literal type="string" pos:line="45" pos:column="33">"write_sensu plugin: failed to set socket close() lingering"<pos:position pos:line="45" pos:column="93"/></literal></expr></argument>)<pos:position pos:line="45" pos:column="94"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="95"/></expr_stmt></block></then></if>

		<expr_stmt><expr><call><name pos:line="47" pos:column="17">set_sock_opts<pos:position pos:line="47" pos:column="30"/></name><argument_list pos:line="47" pos:column="30">(<argument><expr><name><name pos:line="47" pos:column="31">host<pos:position pos:line="47" pos:column="35"/></name><operator pos:line="47" pos:column="35">-&gt;<pos:position pos:line="47" pos:column="40"/></operator><name pos:line="47" pos:column="37">s<pos:position pos:line="47" pos:column="38"/></name></name></expr></argument>)<pos:position pos:line="47" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="40"/></expr_stmt>

		<comment type="line" pos:line="49" pos:column="17">// connect the socket</comment>
		<if pos:line="50" pos:column="17">if <condition pos:line="50" pos:column="20">(<expr><call><name pos:line="50" pos:column="21">connect<pos:position pos:line="50" pos:column="28"/></name><argument_list pos:line="50" pos:column="28">(<argument><expr><name><name pos:line="50" pos:column="29">host<pos:position pos:line="50" pos:column="33"/></name><operator pos:line="50" pos:column="33">-&gt;<pos:position pos:line="50" pos:column="38"/></operator><name pos:line="50" pos:column="35">s<pos:position pos:line="50" pos:column="36"/></name></name></expr></argument>, <argument><expr><name><name pos:line="50" pos:column="38">ai<pos:position pos:line="50" pos:column="40"/></name><operator pos:line="50" pos:column="40">-&gt;<pos:position pos:line="50" pos:column="45"/></operator><name pos:line="50" pos:column="42">ai_addr<pos:position pos:line="50" pos:column="49"/></name></name></expr></argument>, <argument><expr><name><name pos:line="50" pos:column="51">ai<pos:position pos:line="50" pos:column="53"/></name><operator pos:line="50" pos:column="53">-&gt;<pos:position pos:line="50" pos:column="58"/></operator><name pos:line="50" pos:column="55">ai_addrlen<pos:position pos:line="50" pos:column="65"/></name></name></expr></argument>)<pos:position pos:line="50" pos:column="66"/></argument_list></call> <operator pos:line="50" pos:column="67">!=<pos:position pos:line="50" pos:column="69"/></operator> <literal type="number" pos:line="50" pos:column="70">0<pos:position pos:line="50" pos:column="71"/></literal></expr>)<pos:position pos:line="50" pos:column="72"/></condition><then pos:line="50" pos:column="72"> <block pos:line="50" pos:column="73">{
			<expr_stmt><expr><call><name pos:line="51" pos:column="25">close<pos:position pos:line="51" pos:column="30"/></name><argument_list pos:line="51" pos:column="30">(<argument><expr><name><name pos:line="51" pos:column="31">host<pos:position pos:line="51" pos:column="35"/></name><operator pos:line="51" pos:column="35">-&gt;<pos:position pos:line="51" pos:column="40"/></operator><name pos:line="51" pos:column="37">s<pos:position pos:line="51" pos:column="38"/></name></name></expr></argument>)<pos:position pos:line="51" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="40"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="52" pos:column="25">host<pos:position pos:line="52" pos:column="29"/></name><operator pos:line="52" pos:column="29">-&gt;<pos:position pos:line="52" pos:column="34"/></operator><name pos:line="52" pos:column="31">s<pos:position pos:line="52" pos:column="32"/></name></name> <operator pos:line="52" pos:column="33">=<pos:position pos:line="52" pos:column="34"/></operator> <operator pos:line="52" pos:column="35">-<pos:position pos:line="52" pos:column="36"/></operator><literal type="number" pos:line="52" pos:column="36">1<pos:position pos:line="52" pos:column="37"/></literal></expr>;<pos:position pos:line="52" pos:column="38"/></expr_stmt>
			<continue pos:line="53" pos:column="25">continue;<pos:position pos:line="53" pos:column="34"/></continue>
		}<pos:position pos:line="54" pos:column="18"/></block></then></if>
		<expr_stmt><expr><call><name pos:line="55" pos:column="17">DEBUG<pos:position pos:line="55" pos:column="22"/></name><argument_list pos:line="55" pos:column="22">(<argument><expr><literal type="string" pos:line="55" pos:column="23">"write_sensu plugin: connected"<pos:position pos:line="55" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="55" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="56"/></expr_stmt>
		<break pos:line="56" pos:column="17">break;<pos:position pos:line="56" pos:column="23"/></break>
	}<pos:position pos:line="57" pos:column="10"/></block></for>

	<if pos:line="59" pos:column="9">if <condition pos:line="59" pos:column="12">(<expr><name><name pos:line="59" pos:column="13">host<pos:position pos:line="59" pos:column="17"/></name><operator pos:line="59" pos:column="17">-&gt;<pos:position pos:line="59" pos:column="22"/></operator><name pos:line="59" pos:column="19">s<pos:position pos:line="59" pos:column="20"/></name></name> <operator pos:line="59" pos:column="21">&lt;<pos:position pos:line="59" pos:column="25"/></operator> <literal type="number" pos:line="59" pos:column="23">0<pos:position pos:line="59" pos:column="24"/></literal></expr>)<pos:position pos:line="59" pos:column="25"/></condition><then pos:line="59" pos:column="25"> <block pos:line="59" pos:column="26">{
		<expr_stmt><expr><call><name pos:line="60" pos:column="17">WARNING<pos:position pos:line="60" pos:column="24"/></name><argument_list pos:line="60" pos:column="24">(<argument><expr><literal type="string" pos:line="60" pos:column="25">"write_sensu plugin: Unable to connect to sensu client"<pos:position pos:line="60" pos:column="80"/></literal></expr></argument>)<pos:position pos:line="60" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="82"/></expr_stmt>
		<return pos:line="61" pos:column="17">return <expr><operator pos:line="61" pos:column="24">-<pos:position pos:line="61" pos:column="25"/></operator><literal type="number" pos:line="61" pos:column="25">1<pos:position pos:line="61" pos:column="26"/></literal></expr>;<pos:position pos:line="61" pos:column="27"/></return>
	}<pos:position pos:line="62" pos:column="10"/></block></then></if>
	<return pos:line="63" pos:column="9">return <expr><literal type="number" pos:line="63" pos:column="16">0<pos:position pos:line="63" pos:column="17"/></literal></expr>;<pos:position pos:line="63" pos:column="18"/></return>
}<pos:position pos:line="64" pos:column="2"/></block></function></unit>
