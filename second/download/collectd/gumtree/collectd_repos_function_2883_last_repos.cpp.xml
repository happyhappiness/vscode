<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_2883_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">plugin_flush_timeout_callback_free<pos:position pos:line="1" pos:column="47"/></name><parameter_list pos:line="1" pos:column="47">(<parameter><decl><type><name pos:line="1" pos:column="48">void<pos:position pos:line="1" pos:column="52"/></name> <modifier pos:line="1" pos:column="53">*<pos:position pos:line="1" pos:column="54"/></modifier></type><name pos:line="1" pos:column="54">data<pos:position pos:line="1" pos:column="58"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="59"/></parameter_list> <block pos:line="1" pos:column="60">{
  <decl_stmt><decl><type><name pos:line="2" pos:column="3">flush_callback_t<pos:position pos:line="2" pos:column="19"/></name> <modifier pos:line="2" pos:column="20">*<pos:position pos:line="2" pos:column="21"/></modifier></type><name pos:line="2" pos:column="21">cb<pos:position pos:line="2" pos:column="23"/></name> <init pos:line="2" pos:column="24">= <expr><name pos:line="2" pos:column="26">data<pos:position pos:line="2" pos:column="30"/></name></expr></init></decl>;<pos:position pos:line="2" pos:column="31"/></decl_stmt>

  <if pos:line="4" pos:column="3">if <condition pos:line="4" pos:column="6">(<expr><name pos:line="4" pos:column="7">cb<pos:position pos:line="4" pos:column="9"/></name> <operator pos:line="4" pos:column="10">==<pos:position pos:line="4" pos:column="12"/></operator> <name pos:line="4" pos:column="13">NULL<pos:position pos:line="4" pos:column="17"/></name></expr>)<pos:position pos:line="4" pos:column="18"/></condition><then pos:line="4" pos:column="18">
    <block type="pseudo"><return pos:line="5" pos:column="5">return;<pos:position pos:line="5" pos:column="12"/></return></block></then></if>

  <expr_stmt><expr><call><name pos:line="7" pos:column="3">sfree<pos:position pos:line="7" pos:column="8"/></name><argument_list pos:line="7" pos:column="8">(<argument><expr><name><name pos:line="7" pos:column="9">cb<pos:position pos:line="7" pos:column="11"/></name><operator pos:line="7" pos:column="11">-&gt;<pos:position pos:line="7" pos:column="16"/></operator><name pos:line="7" pos:column="13">name<pos:position pos:line="7" pos:column="17"/></name></name></expr></argument>)<pos:position pos:line="7" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="19"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="8" pos:column="3">sfree<pos:position pos:line="8" pos:column="8"/></name><argument_list pos:line="8" pos:column="8">(<argument><expr><name pos:line="8" pos:column="9">cb<pos:position pos:line="8" pos:column="11"/></name></expr></argument>)<pos:position pos:line="8" pos:column="12"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="13"/></expr_stmt>
}<pos:position pos:line="9" pos:column="2"/></block></function></unit>
