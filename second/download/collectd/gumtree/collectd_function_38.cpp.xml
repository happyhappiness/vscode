<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_function_38.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">main<pos:position pos:line="1" pos:column="9"/></name> <parameter_list pos:line="1" pos:column="10">(<parameter><decl><type><name pos:line="1" pos:column="11">int<pos:position pos:line="1" pos:column="14"/></name></type> <name pos:line="1" pos:column="15">argc<pos:position pos:line="1" pos:column="19"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="21">char<pos:position pos:line="1" pos:column="25"/></name> <modifier pos:line="1" pos:column="26">*<pos:position pos:line="1" pos:column="27"/></modifier><modifier pos:line="1" pos:column="27">*<pos:position pos:line="1" pos:column="28"/></modifier></type><name pos:line="1" pos:column="28">argv<pos:position pos:line="1" pos:column="32"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="33"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">sigaction<pos:position pos:line="3" pos:column="25"/></name></name></type> <name pos:line="3" pos:column="26">sigIntAction<pos:position pos:line="3" pos:column="38"/></name></decl>;<pos:position pos:line="3" pos:column="39"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">sigaction<pos:position pos:line="4" pos:column="25"/></name></name></type> <name pos:line="4" pos:column="26">sigTermAction<pos:position pos:line="4" pos:column="39"/></name></decl>;<pos:position pos:line="4" pos:column="40"/></decl_stmt>
<cpp:if pos:line="5" pos:column="1">#<cpp:directive pos:line="5" pos:column="2">if<pos:position pos:line="5" pos:column="4"/></cpp:directive> <expr><name pos:line="5" pos:column="5">COLLECT_DAEMON<pos:position pos:line="5" pos:column="19"/></name></expr></cpp:if>
	<decl_stmt><decl><type><name><name pos:line="6" pos:column="9">struct<pos:position pos:line="6" pos:column="15"/></name> <name pos:line="6" pos:column="16">sigaction<pos:position pos:line="6" pos:column="25"/></name></name></type> <name pos:line="6" pos:column="26">sigChldAction<pos:position pos:line="6" pos:column="39"/></name></decl>;<pos:position pos:line="6" pos:column="40"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">pid_t<pos:position pos:line="7" pos:column="14"/></name></type> <name pos:line="7" pos:column="15">pid<pos:position pos:line="7" pos:column="18"/></name></decl>;<pos:position pos:line="7" pos:column="19"/></decl_stmt>
<cpp:endif pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">endif<pos:position pos:line="8" pos:column="7"/></cpp:directive></cpp:endif>

	<decl_stmt><decl><type><name pos:line="10" pos:column="9">char<pos:position pos:line="10" pos:column="13"/></name> <modifier pos:line="10" pos:column="14">*<pos:position pos:line="10" pos:column="15"/></modifier></type><name pos:line="10" pos:column="15">configfile<pos:position pos:line="10" pos:column="25"/></name> <init pos:line="10" pos:column="26">= <expr><name pos:line="10" pos:column="28">CONFIGFILE<pos:position pos:line="10" pos:column="38"/></name></expr></init></decl>;<pos:position pos:line="10" pos:column="39"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="11" pos:column="9">char<pos:position pos:line="11" pos:column="13"/></name> <modifier pos:line="11" pos:column="14">*<pos:position pos:line="11" pos:column="15"/></modifier></type><name pos:line="11" pos:column="15">pidfile<pos:position pos:line="11" pos:column="22"/></name>    <init pos:line="11" pos:column="26">= <expr><name pos:line="11" pos:column="28">PIDFILE<pos:position pos:line="11" pos:column="35"/></name></expr></init></decl>;<pos:position pos:line="11" pos:column="36"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="12" pos:column="9">char<pos:position pos:line="12" pos:column="13"/></name> <modifier pos:line="12" pos:column="14">*<pos:position pos:line="12" pos:column="15"/></modifier></type><name pos:line="12" pos:column="15">plugindir<pos:position pos:line="12" pos:column="24"/></name>  <init pos:line="12" pos:column="26">= <expr><name pos:line="12" pos:column="28">PLUGINDIR<pos:position pos:line="12" pos:column="37"/></name></expr></init></decl>;<pos:position pos:line="12" pos:column="38"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="13" pos:column="9">char<pos:position pos:line="13" pos:column="13"/></name> <modifier pos:line="13" pos:column="14">*<pos:position pos:line="13" pos:column="15"/></modifier></type><name pos:line="13" pos:column="15">datadir<pos:position pos:line="13" pos:column="22"/></name>    <init pos:line="13" pos:column="26">= <expr><name pos:line="13" pos:column="28">PKGLOCALSTATEDIR<pos:position pos:line="13" pos:column="44"/></name></expr></init></decl>;<pos:position pos:line="13" pos:column="45"/></decl_stmt>

	<decl_stmt><decl><type><name pos:line="15" pos:column="9">int<pos:position pos:line="15" pos:column="12"/></name></type> <name pos:line="15" pos:column="13">daemonize<pos:position pos:line="15" pos:column="22"/></name> <init pos:line="15" pos:column="23">= <expr><literal type="number" pos:line="15" pos:column="25">1<pos:position pos:line="15" pos:column="26"/></literal></expr></init></decl>;<pos:position pos:line="15" pos:column="27"/></decl_stmt>

<cpp:if pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">if<pos:position pos:line="17" pos:column="4"/></cpp:directive> <expr><name pos:line="17" pos:column="5">HAVE_LIBRRD<pos:position pos:line="17" pos:column="16"/></name></expr></cpp:if>
	<expr_stmt><expr><name pos:line="18" pos:column="9">operating_mode<pos:position pos:line="18" pos:column="23"/></name> <operator pos:line="18" pos:column="24">=<pos:position pos:line="18" pos:column="25"/></operator> <name pos:line="18" pos:column="26">MODE_LOCAL<pos:position pos:line="18" pos:column="36"/></name></expr>;<pos:position pos:line="18" pos:column="37"/></expr_stmt>
<cpp:endif pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">endif<pos:position pos:line="19" pos:column="7"/></cpp:directive></cpp:endif>

	<comment type="block" pos:line="21" pos:column="9">/* open syslog */</comment>
	<expr_stmt><expr><call><name pos:line="22" pos:column="9">openlog<pos:position pos:line="22" pos:column="16"/></name> <argument_list pos:line="22" pos:column="17">(<argument><expr><name pos:line="22" pos:column="18">PACKAGE<pos:position pos:line="22" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="27">LOG_CONS<pos:position pos:line="22" pos:column="35"/></name> <operator pos:line="22" pos:column="36">|<pos:position pos:line="22" pos:column="37"/></operator> <name pos:line="22" pos:column="38">LOG_PID<pos:position pos:line="22" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="47">LOG_DAEMON<pos:position pos:line="22" pos:column="57"/></name></expr></argument>)<pos:position pos:line="22" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="59"/></expr_stmt>

	<comment type="block" pos:line="24" pos:column="9">/* read options */</comment>
	<while pos:line="25" pos:column="9">while <condition pos:line="25" pos:column="15">(<expr><literal type="number" pos:line="25" pos:column="16">1<pos:position pos:line="25" pos:column="17"/></literal></expr>)<pos:position pos:line="25" pos:column="18"/></condition>
	<block pos:line="26" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="27" pos:column="17">int<pos:position pos:line="27" pos:column="20"/></name></type> <name pos:line="27" pos:column="21">c<pos:position pos:line="27" pos:column="22"/></name></decl>;<pos:position pos:line="27" pos:column="23"/></decl_stmt>

		<expr_stmt><expr><name pos:line="29" pos:column="17">c<pos:position pos:line="29" pos:column="18"/></name> <operator pos:line="29" pos:column="19">=<pos:position pos:line="29" pos:column="20"/></operator> <call><name pos:line="29" pos:column="21">getopt<pos:position pos:line="29" pos:column="27"/></name> <argument_list pos:line="29" pos:column="28">(<argument><expr><name pos:line="29" pos:column="29">argc<pos:position pos:line="29" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="35">argv<pos:position pos:line="29" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="29" pos:column="41">"C:P:M:D:fh"<pos:position pos:line="29" pos:column="53"/></literal>
<cpp:if pos:line="30" pos:column="1">#<cpp:directive pos:line="30" pos:column="2">if<pos:position pos:line="30" pos:column="4"/></cpp:directive> <expr><name pos:line="30" pos:column="5">HAVE_LIBRRD<pos:position pos:line="30" pos:column="16"/></name></expr></cpp:if>
				<literal type="string" pos:line="31" pos:column="33">"csl"<pos:position pos:line="31" pos:column="38"/></literal>
<cpp:endif pos:line="32" pos:column="1">#<cpp:directive pos:line="32" pos:column="2">endif<pos:position pos:line="32" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="32" pos:column="8">/* HAVE_LIBRRD */</comment>
<cpp:if pos:line="33" pos:column="1">#<cpp:directive pos:line="33" pos:column="2">if<pos:position pos:line="33" pos:column="4"/></cpp:directive> <expr><name pos:line="33" pos:column="5">COLLECT_PING<pos:position pos:line="33" pos:column="17"/></name></expr></cpp:if>
				<literal type="string" pos:line="34" pos:column="33">"p:"<pos:position pos:line="34" pos:column="37"/></literal></expr></argument>
<cpp:endif pos:line="35" pos:column="1">#<cpp:directive pos:line="35" pos:column="2">endif<pos:position pos:line="35" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="35" pos:column="8">/* COLLECT_PING */</comment>
		)<pos:position pos:line="36" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="19"/></expr_stmt>

		<if pos:line="38" pos:column="17">if <condition pos:line="38" pos:column="20">(<expr><name pos:line="38" pos:column="21">c<pos:position pos:line="38" pos:column="22"/></name> <operator pos:line="38" pos:column="23">==<pos:position pos:line="38" pos:column="25"/></operator> <operator pos:line="38" pos:column="26">-<pos:position pos:line="38" pos:column="27"/></operator><literal type="number" pos:line="38" pos:column="27">1<pos:position pos:line="38" pos:column="28"/></literal></expr>)<pos:position pos:line="38" pos:column="29"/></condition><then pos:line="38" pos:column="29">
			<block type="pseudo"><break pos:line="39" pos:column="25">break;<pos:position pos:line="39" pos:column="31"/></break></block></then></if>

		<switch pos:line="41" pos:column="17">switch <condition pos:line="41" pos:column="24">(<expr><name pos:line="41" pos:column="25">c<pos:position pos:line="41" pos:column="26"/></name></expr>)<pos:position pos:line="41" pos:column="27"/></condition>
		<block pos:line="42" pos:column="17">{
<cpp:ifdef pos:line="43" pos:column="1">#<cpp:directive pos:line="43" pos:column="2">ifdef<pos:position pos:line="43" pos:column="7"/></cpp:directive> <name pos:line="43" pos:column="8">HAVE_LIBRRD<pos:position pos:line="43" pos:column="19"/></name></cpp:ifdef>
			<case pos:line="44" pos:column="25">case <expr><literal type="char" pos:line="44" pos:column="30">'c'<pos:position pos:line="44" pos:column="33"/></literal></expr>:<pos:position pos:line="44" pos:column="34"/></case>
				<expr_stmt><expr><name pos:line="45" pos:column="33">operating_mode<pos:position pos:line="45" pos:column="47"/></name> <operator pos:line="45" pos:column="48">=<pos:position pos:line="45" pos:column="49"/></operator> <name pos:line="45" pos:column="50">MODE_CLIENT<pos:position pos:line="45" pos:column="61"/></name></expr>;<pos:position pos:line="45" pos:column="62"/></expr_stmt>
				<break pos:line="46" pos:column="33">break;<pos:position pos:line="46" pos:column="39"/></break>

			<case pos:line="48" pos:column="25">case <expr><literal type="char" pos:line="48" pos:column="30">'s'<pos:position pos:line="48" pos:column="33"/></literal></expr>:<pos:position pos:line="48" pos:column="34"/></case>
				<expr_stmt><expr><name pos:line="49" pos:column="33">operating_mode<pos:position pos:line="49" pos:column="47"/></name> <operator pos:line="49" pos:column="48">=<pos:position pos:line="49" pos:column="49"/></operator> <name pos:line="49" pos:column="50">MODE_SERVER<pos:position pos:line="49" pos:column="61"/></name></expr>;<pos:position pos:line="49" pos:column="62"/></expr_stmt>
				<break pos:line="50" pos:column="33">break;<pos:position pos:line="50" pos:column="39"/></break>

			<case pos:line="52" pos:column="25">case <expr><literal type="char" pos:line="52" pos:column="30">'l'<pos:position pos:line="52" pos:column="33"/></literal></expr>:<pos:position pos:line="52" pos:column="34"/></case>
				<expr_stmt><expr><name pos:line="53" pos:column="33">operating_mode<pos:position pos:line="53" pos:column="47"/></name> <operator pos:line="53" pos:column="48">=<pos:position pos:line="53" pos:column="49"/></operator> <name pos:line="53" pos:column="50">MODE_LOCAL<pos:position pos:line="53" pos:column="60"/></name></expr>;<pos:position pos:line="53" pos:column="61"/></expr_stmt>
				<break pos:line="54" pos:column="33">break;<pos:position pos:line="54" pos:column="39"/></break>
<cpp:endif pos:line="55" pos:column="1">#<cpp:directive pos:line="55" pos:column="2">endif<pos:position pos:line="55" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="55" pos:column="8">/* HAVE_LIBRRD */</comment>
			<case pos:line="56" pos:column="25">case <expr><literal type="char" pos:line="56" pos:column="30">'C'<pos:position pos:line="56" pos:column="33"/></literal></expr>:<pos:position pos:line="56" pos:column="34"/></case>
				<expr_stmt><expr><name pos:line="57" pos:column="33">configfile<pos:position pos:line="57" pos:column="43"/></name> <operator pos:line="57" pos:column="44">=<pos:position pos:line="57" pos:column="45"/></operator> <name pos:line="57" pos:column="46">optarg<pos:position pos:line="57" pos:column="52"/></name></expr>;<pos:position pos:line="57" pos:column="53"/></expr_stmt>
				<break pos:line="58" pos:column="33">break;<pos:position pos:line="58" pos:column="39"/></break>
			<case pos:line="59" pos:column="25">case <expr><literal type="char" pos:line="59" pos:column="30">'P'<pos:position pos:line="59" pos:column="33"/></literal></expr>:<pos:position pos:line="59" pos:column="34"/></case>
				<expr_stmt><expr><name pos:line="60" pos:column="33">pidfile<pos:position pos:line="60" pos:column="40"/></name> <operator pos:line="60" pos:column="41">=<pos:position pos:line="60" pos:column="42"/></operator> <name pos:line="60" pos:column="43">optarg<pos:position pos:line="60" pos:column="49"/></name></expr>;<pos:position pos:line="60" pos:column="50"/></expr_stmt>
				<break pos:line="61" pos:column="33">break;<pos:position pos:line="61" pos:column="39"/></break>
			<case pos:line="62" pos:column="25">case <expr><literal type="char" pos:line="62" pos:column="30">'M'<pos:position pos:line="62" pos:column="33"/></literal></expr>:<pos:position pos:line="62" pos:column="34"/></case>
				<expr_stmt><expr><name pos:line="63" pos:column="33">plugindir<pos:position pos:line="63" pos:column="42"/></name> <operator pos:line="63" pos:column="43">=<pos:position pos:line="63" pos:column="44"/></operator> <name pos:line="63" pos:column="45">optarg<pos:position pos:line="63" pos:column="51"/></name></expr>;<pos:position pos:line="63" pos:column="52"/></expr_stmt>
				<break pos:line="64" pos:column="33">break;<pos:position pos:line="64" pos:column="39"/></break>
			<case pos:line="65" pos:column="25">case <expr><literal type="char" pos:line="65" pos:column="30">'D'<pos:position pos:line="65" pos:column="33"/></literal></expr>:<pos:position pos:line="65" pos:column="34"/></case>
				<expr_stmt><expr><name pos:line="66" pos:column="33">datadir<pos:position pos:line="66" pos:column="40"/></name> <operator pos:line="66" pos:column="41">=<pos:position pos:line="66" pos:column="42"/></operator> <name pos:line="66" pos:column="43">optarg<pos:position pos:line="66" pos:column="49"/></name></expr>;<pos:position pos:line="66" pos:column="50"/></expr_stmt>
				<break pos:line="67" pos:column="33">break;<pos:position pos:line="67" pos:column="39"/></break>
			<case pos:line="68" pos:column="25">case <expr><literal type="char" pos:line="68" pos:column="30">'f'<pos:position pos:line="68" pos:column="33"/></literal></expr>:<pos:position pos:line="68" pos:column="34"/></case>
				<expr_stmt><expr><name pos:line="69" pos:column="33">daemonize<pos:position pos:line="69" pos:column="42"/></name> <operator pos:line="69" pos:column="43">=<pos:position pos:line="69" pos:column="44"/></operator> <literal type="number" pos:line="69" pos:column="45">0<pos:position pos:line="69" pos:column="46"/></literal></expr>;<pos:position pos:line="69" pos:column="47"/></expr_stmt>
				<break pos:line="70" pos:column="33">break;<pos:position pos:line="70" pos:column="39"/></break>
<cpp:if pos:line="71" pos:column="1">#<cpp:directive pos:line="71" pos:column="2">if<pos:position pos:line="71" pos:column="4"/></cpp:directive> <expr><name pos:line="71" pos:column="5">COLLECT_PING<pos:position pos:line="71" pos:column="17"/></name></expr></cpp:if>
			<case pos:line="72" pos:column="25">case <expr><literal type="char" pos:line="72" pos:column="30">'p'<pos:position pos:line="72" pos:column="33"/></literal></expr>:<pos:position pos:line="72" pos:column="34"/></case>
				<if pos:line="73" pos:column="33">if <condition pos:line="73" pos:column="36">(<expr><name pos:line="73" pos:column="37">num_pinghosts<pos:position pos:line="73" pos:column="50"/></name> <operator pos:line="73" pos:column="51">&lt;<pos:position pos:line="73" pos:column="55"/></operator> <name pos:line="73" pos:column="53">MAX_PINGHOSTS<pos:position pos:line="73" pos:column="66"/></name></expr>)<pos:position pos:line="73" pos:column="67"/></condition><then pos:line="73" pos:column="67">
					<block type="pseudo"><expr_stmt><expr><name><name pos:line="74" pos:column="41">pinghosts<pos:position pos:line="74" pos:column="50"/></name><index pos:line="74" pos:column="50">[<expr><name pos:line="74" pos:column="51">num_pinghosts<pos:position pos:line="74" pos:column="64"/></name><operator pos:line="74" pos:column="64">++<pos:position pos:line="74" pos:column="66"/></operator></expr>]<pos:position pos:line="74" pos:column="67"/></index></name> <operator pos:line="74" pos:column="68">=<pos:position pos:line="74" pos:column="69"/></operator> <name pos:line="74" pos:column="70">optarg<pos:position pos:line="74" pos:column="76"/></name></expr>;<pos:position pos:line="74" pos:column="77"/></expr_stmt></block></then>
				<else pos:line="75" pos:column="33">else
					<block type="pseudo"><expr_stmt><expr><call><name pos:line="76" pos:column="41">fprintf<pos:position pos:line="76" pos:column="48"/></name> <argument_list pos:line="76" pos:column="49">(<argument><expr><name pos:line="76" pos:column="50">stderr<pos:position pos:line="76" pos:column="56"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="76" pos:column="58">"Maximum of %i ping hosts reached.\n"<pos:position pos:line="76" pos:column="95"/></literal></expr></argument>, <argument><expr><name pos:line="76" pos:column="97">MAX_PINGHOSTS<pos:position pos:line="76" pos:column="110"/></name></expr></argument>)<pos:position pos:line="76" pos:column="111"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="112"/></expr_stmt></block></else></if>
				<break pos:line="77" pos:column="33">break;<pos:position pos:line="77" pos:column="39"/></break>
<cpp:endif pos:line="78" pos:column="1">#<cpp:directive pos:line="78" pos:column="2">endif<pos:position pos:line="78" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="78" pos:column="8">/* COLLECT_PING */</comment>
			<case pos:line="79" pos:column="25">case <expr><literal type="char" pos:line="79" pos:column="30">'h'<pos:position pos:line="79" pos:column="33"/></literal></expr>:<pos:position pos:line="79" pos:column="34"/></case>
			<default pos:line="80" pos:column="25">default:<pos:position pos:line="80" pos:column="33"/></default>
				<expr_stmt><expr><call><name pos:line="81" pos:column="33">exit_usage<pos:position pos:line="81" pos:column="43"/></name> <argument_list pos:line="81" pos:column="44">(<argument><expr><name><name pos:line="81" pos:column="45">argv<pos:position pos:line="81" pos:column="49"/></name><index pos:line="81" pos:column="49">[<expr><literal type="number" pos:line="81" pos:column="50">0<pos:position pos:line="81" pos:column="51"/></literal></expr>]<pos:position pos:line="81" pos:column="52"/></index></name></expr></argument>)<pos:position pos:line="81" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="54"/></expr_stmt>
		}<pos:position pos:line="82" pos:column="18"/></block></switch>
				
	}<pos:position pos:line="84" pos:column="10"/></block></while>

	<comment type="block" pos:line="86" pos:column="9">/*
	 * Load plugins and change to output directory
	 * Loading plugins is done first so relative paths work as expected..
	 */</comment>
	<if pos:line="90" pos:column="9">if <condition pos:line="90" pos:column="12">(<expr><call><name pos:line="90" pos:column="13">plugin_load_all<pos:position pos:line="90" pos:column="28"/></name> <argument_list pos:line="90" pos:column="29">(<argument><expr><name pos:line="90" pos:column="30">plugindir<pos:position pos:line="90" pos:column="39"/></name></expr></argument>)<pos:position pos:line="90" pos:column="40"/></argument_list></call> <operator pos:line="90" pos:column="41">&lt;<pos:position pos:line="90" pos:column="45"/></operator> <literal type="number" pos:line="90" pos:column="43">1<pos:position pos:line="90" pos:column="44"/></literal></expr>)<pos:position pos:line="90" pos:column="45"/></condition><then pos:line="90" pos:column="45">
	<block pos:line="91" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="92" pos:column="17">fprintf<pos:position pos:line="92" pos:column="24"/></name> <argument_list pos:line="92" pos:column="25">(<argument><expr><name pos:line="92" pos:column="26">stderr<pos:position pos:line="92" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="92" pos:column="34">"Error: No plugins found.\n"<pos:position pos:line="92" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="92" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="64"/></expr_stmt>
		<return pos:line="93" pos:column="17">return <expr><operator pos:line="93" pos:column="24">(<pos:position pos:line="93" pos:column="25"/></operator><literal type="number" pos:line="93" pos:column="25">1<pos:position pos:line="93" pos:column="26"/></literal><operator pos:line="93" pos:column="26">)<pos:position pos:line="93" pos:column="27"/></operator></expr>;<pos:position pos:line="93" pos:column="28"/></return>
	}<pos:position pos:line="94" pos:column="10"/></block></then></if>

	<if pos:line="96" pos:column="9">if <condition pos:line="96" pos:column="12">(<expr><call><name pos:line="96" pos:column="13">change_basedir<pos:position pos:line="96" pos:column="27"/></name> <argument_list pos:line="96" pos:column="28">(<argument><expr><name pos:line="96" pos:column="29">datadir<pos:position pos:line="96" pos:column="36"/></name></expr></argument>)<pos:position pos:line="96" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="96" pos:column="38"/></condition><then pos:line="96" pos:column="38">
	<block pos:line="97" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="98" pos:column="17">fprintf<pos:position pos:line="98" pos:column="24"/></name> <argument_list pos:line="98" pos:column="25">(<argument><expr><name pos:line="98" pos:column="26">stderr<pos:position pos:line="98" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="98" pos:column="34">"Error: Unable to change to directory `%s'.\n"<pos:position pos:line="98" pos:column="80"/></literal></expr></argument>, <argument><expr><name pos:line="98" pos:column="82">datadir<pos:position pos:line="98" pos:column="89"/></name></expr></argument>)<pos:position pos:line="98" pos:column="90"/></argument_list></call></expr>;<pos:position pos:line="98" pos:column="91"/></expr_stmt>
		<return pos:line="99" pos:column="17">return <expr><operator pos:line="99" pos:column="24">(<pos:position pos:line="99" pos:column="25"/></operator><literal type="number" pos:line="99" pos:column="25">1<pos:position pos:line="99" pos:column="26"/></literal><operator pos:line="99" pos:column="26">)<pos:position pos:line="99" pos:column="27"/></operator></expr>;<pos:position pos:line="99" pos:column="28"/></return>
	}<pos:position pos:line="100" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="102" pos:column="9">/*
	 * fork off child
	 */</comment>
<cpp:if pos:line="105" pos:column="1">#<cpp:directive pos:line="105" pos:column="2">if<pos:position pos:line="105" pos:column="4"/></cpp:directive> <expr><name pos:line="105" pos:column="5">COLLECT_DAEMON<pos:position pos:line="105" pos:column="19"/></name></expr></cpp:if>
	<expr_stmt><expr><name><name pos:line="106" pos:column="9">sigChldAction<pos:position pos:line="106" pos:column="22"/></name><operator pos:line="106" pos:column="22">.<pos:position pos:line="106" pos:column="23"/></operator><name pos:line="106" pos:column="23">sa_handler<pos:position pos:line="106" pos:column="33"/></name></name> <operator pos:line="106" pos:column="34">=<pos:position pos:line="106" pos:column="35"/></operator> <name pos:line="106" pos:column="36">SIG_IGN<pos:position pos:line="106" pos:column="43"/></name></expr>;<pos:position pos:line="106" pos:column="44"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="107" pos:column="9">sigaction<pos:position pos:line="107" pos:column="18"/></name> <argument_list pos:line="107" pos:column="19">(<argument><expr><name pos:line="107" pos:column="20">SIGCHLD<pos:position pos:line="107" pos:column="27"/></name></expr></argument>, <argument><expr><operator pos:line="107" pos:column="29">&amp;<pos:position pos:line="107" pos:column="34"/></operator><name pos:line="107" pos:column="30">sigChldAction<pos:position pos:line="107" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="107" pos:column="45">NULL<pos:position pos:line="107" pos:column="49"/></name></expr></argument>)<pos:position pos:line="107" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="107" pos:column="51"/></expr_stmt>

	<if pos:line="109" pos:column="9">if <condition pos:line="109" pos:column="12">(<expr><name pos:line="109" pos:column="13">daemonize<pos:position pos:line="109" pos:column="22"/></name></expr>)<pos:position pos:line="109" pos:column="23"/></condition><then pos:line="109" pos:column="23">
	<block pos:line="110" pos:column="9">{
		<if pos:line="111" pos:column="17">if <condition pos:line="111" pos:column="20">(<expr><operator pos:line="111" pos:column="21">(<pos:position pos:line="111" pos:column="22"/></operator><name pos:line="111" pos:column="22">pid<pos:position pos:line="111" pos:column="25"/></name> <operator pos:line="111" pos:column="26">=<pos:position pos:line="111" pos:column="27"/></operator> <call><name pos:line="111" pos:column="28">fork<pos:position pos:line="111" pos:column="32"/></name> <argument_list pos:line="111" pos:column="33">()<pos:position pos:line="111" pos:column="35"/></argument_list></call><operator pos:line="111" pos:column="35">)<pos:position pos:line="111" pos:column="36"/></operator> <operator pos:line="111" pos:column="37">==<pos:position pos:line="111" pos:column="39"/></operator> <operator pos:line="111" pos:column="40">-<pos:position pos:line="111" pos:column="41"/></operator><literal type="number" pos:line="111" pos:column="41">1<pos:position pos:line="111" pos:column="42"/></literal></expr>)<pos:position pos:line="111" pos:column="43"/></condition><then pos:line="111" pos:column="43">
		<block pos:line="112" pos:column="17">{
			<comment type="block" pos:line="113" pos:column="25">/* error */</comment>
			<expr_stmt><expr><call><name pos:line="114" pos:column="25">fprintf<pos:position pos:line="114" pos:column="32"/></name> <argument_list pos:line="114" pos:column="33">(<argument><expr><name pos:line="114" pos:column="34">stderr<pos:position pos:line="114" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="114" pos:column="42">"fork: %s"<pos:position pos:line="114" pos:column="52"/></literal></expr></argument>, <argument><expr><call><name pos:line="114" pos:column="54">strerror<pos:position pos:line="114" pos:column="62"/></name> <argument_list pos:line="114" pos:column="63">(<argument><expr><name pos:line="114" pos:column="64">errno<pos:position pos:line="114" pos:column="69"/></name></expr></argument>)<pos:position pos:line="114" pos:column="70"/></argument_list></call></expr></argument>)<pos:position pos:line="114" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="114" pos:column="72"/></expr_stmt>
			<return pos:line="115" pos:column="25">return <expr><operator pos:line="115" pos:column="32">(<pos:position pos:line="115" pos:column="33"/></operator><literal type="number" pos:line="115" pos:column="33">1<pos:position pos:line="115" pos:column="34"/></literal><operator pos:line="115" pos:column="34">)<pos:position pos:line="115" pos:column="35"/></operator></expr>;<pos:position pos:line="115" pos:column="36"/></return>
		}<pos:position pos:line="116" pos:column="18"/></block></then>
		<elseif pos:line="117" pos:column="17">else <if pos:line="117" pos:column="22">if <condition pos:line="117" pos:column="25">(<expr><name pos:line="117" pos:column="26">pid<pos:position pos:line="117" pos:column="29"/></name> <operator pos:line="117" pos:column="30">!=<pos:position pos:line="117" pos:column="32"/></operator> <literal type="number" pos:line="117" pos:column="33">0<pos:position pos:line="117" pos:column="34"/></literal></expr>)<pos:position pos:line="117" pos:column="35"/></condition><then pos:line="117" pos:column="35">
		<block pos:line="118" pos:column="17">{
			<comment type="block" pos:line="119" pos:column="25">/* parent */</comment>
			<comment type="block" pos:line="120" pos:column="25">/* printf ("Running (PID %i)\n", pid); */</comment>
			<return pos:line="121" pos:column="25">return <expr><operator pos:line="121" pos:column="32">(<pos:position pos:line="121" pos:column="33"/></operator><literal type="number" pos:line="121" pos:column="33">0<pos:position pos:line="121" pos:column="34"/></literal><operator pos:line="121" pos:column="34">)<pos:position pos:line="121" pos:column="35"/></operator></expr>;<pos:position pos:line="121" pos:column="36"/></return>
		}<pos:position pos:line="122" pos:column="18"/></block></then></if></elseif></if>

		<comment type="block" pos:line="124" pos:column="17">/* Detach from session */</comment>
		<expr_stmt><expr><call><name pos:line="125" pos:column="17">setsid<pos:position pos:line="125" pos:column="23"/></name> <argument_list pos:line="125" pos:column="24">()<pos:position pos:line="125" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="125" pos:column="27"/></expr_stmt>

		<comment type="block" pos:line="127" pos:column="17">/* Write pidfile */</comment>
		<if pos:line="128" pos:column="17">if <condition pos:line="128" pos:column="20">(<expr><call><name pos:line="128" pos:column="21">pidfile_create<pos:position pos:line="128" pos:column="35"/></name> <argument_list pos:line="128" pos:column="36">(<argument><expr><name pos:line="128" pos:column="37">pidfile<pos:position pos:line="128" pos:column="44"/></name></expr></argument>)<pos:position pos:line="128" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="128" pos:column="46"/></condition><then pos:line="128" pos:column="46">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="129" pos:column="25">exit<pos:position pos:line="129" pos:column="29"/></name> <argument_list pos:line="129" pos:column="30">(<argument><expr><literal type="number" pos:line="129" pos:column="31">2<pos:position pos:line="129" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="129" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="129" pos:column="34"/></expr_stmt></block></then></if>

		<comment type="block" pos:line="131" pos:column="17">/* close standard descriptors */</comment>
		<expr_stmt><expr><call><name pos:line="132" pos:column="17">close<pos:position pos:line="132" pos:column="22"/></name> <argument_list pos:line="132" pos:column="23">(<argument><expr><literal type="number" pos:line="132" pos:column="24">2<pos:position pos:line="132" pos:column="25"/></literal></expr></argument>)<pos:position pos:line="132" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="132" pos:column="27"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="133" pos:column="17">close<pos:position pos:line="133" pos:column="22"/></name> <argument_list pos:line="133" pos:column="23">(<argument><expr><literal type="number" pos:line="133" pos:column="24">1<pos:position pos:line="133" pos:column="25"/></literal></expr></argument>)<pos:position pos:line="133" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="133" pos:column="27"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="134" pos:column="17">close<pos:position pos:line="134" pos:column="22"/></name> <argument_list pos:line="134" pos:column="23">(<argument><expr><literal type="number" pos:line="134" pos:column="24">0<pos:position pos:line="134" pos:column="25"/></literal></expr></argument>)<pos:position pos:line="134" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="134" pos:column="27"/></expr_stmt>

		<if pos:line="136" pos:column="17">if <condition pos:line="136" pos:column="20">(<expr><call><name pos:line="136" pos:column="21">open<pos:position pos:line="136" pos:column="25"/></name> <argument_list pos:line="136" pos:column="26">(<argument><expr><literal type="string" pos:line="136" pos:column="27">"/dev/null"<pos:position pos:line="136" pos:column="38"/></literal></expr></argument>, <argument><expr><name pos:line="136" pos:column="40">O_RDWR<pos:position pos:line="136" pos:column="46"/></name></expr></argument>)<pos:position pos:line="136" pos:column="47"/></argument_list></call> <operator pos:line="136" pos:column="48">!=<pos:position pos:line="136" pos:column="50"/></operator> <literal type="number" pos:line="136" pos:column="51">0<pos:position pos:line="136" pos:column="52"/></literal></expr>)<pos:position pos:line="136" pos:column="53"/></condition><then pos:line="136" pos:column="53">
		<block pos:line="137" pos:column="17">{
			<expr_stmt><expr><call><name pos:line="138" pos:column="25">syslog<pos:position pos:line="138" pos:column="31"/></name> <argument_list pos:line="138" pos:column="32">(<argument><expr><name pos:line="138" pos:column="33">LOG_ERR<pos:position pos:line="138" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="138" pos:column="42">"Error: Could not connect `STDIN' to `/dev/null'"<pos:position pos:line="138" pos:column="91"/></literal></expr></argument>)<pos:position pos:line="138" pos:column="92"/></argument_list></call></expr>;<pos:position pos:line="138" pos:column="93"/></expr_stmt>
			<return pos:line="139" pos:column="25">return <expr><operator pos:line="139" pos:column="32">(<pos:position pos:line="139" pos:column="33"/></operator><literal type="number" pos:line="139" pos:column="33">1<pos:position pos:line="139" pos:column="34"/></literal><operator pos:line="139" pos:column="34">)<pos:position pos:line="139" pos:column="35"/></operator></expr>;<pos:position pos:line="139" pos:column="36"/></return>
		}<pos:position pos:line="140" pos:column="18"/></block></then></if>
		<if pos:line="141" pos:column="17">if <condition pos:line="141" pos:column="20">(<expr><call><name pos:line="141" pos:column="21">dup<pos:position pos:line="141" pos:column="24"/></name> <argument_list pos:line="141" pos:column="25">(<argument><expr><literal type="number" pos:line="141" pos:column="26">0<pos:position pos:line="141" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="141" pos:column="28"/></argument_list></call> <operator pos:line="141" pos:column="29">!=<pos:position pos:line="141" pos:column="31"/></operator> <literal type="number" pos:line="141" pos:column="32">1<pos:position pos:line="141" pos:column="33"/></literal></expr>)<pos:position pos:line="141" pos:column="34"/></condition><then pos:line="141" pos:column="34">
		<block pos:line="142" pos:column="17">{
			<expr_stmt><expr><call><name pos:line="143" pos:column="25">syslog<pos:position pos:line="143" pos:column="31"/></name> <argument_list pos:line="143" pos:column="32">(<argument><expr><name pos:line="143" pos:column="33">LOG_ERR<pos:position pos:line="143" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="143" pos:column="42">"Error: Could not connect `STDOUT' to `/dev/null'"<pos:position pos:line="143" pos:column="92"/></literal></expr></argument>)<pos:position pos:line="143" pos:column="93"/></argument_list></call></expr>;<pos:position pos:line="143" pos:column="94"/></expr_stmt>
			<return pos:line="144" pos:column="25">return <expr><operator pos:line="144" pos:column="32">(<pos:position pos:line="144" pos:column="33"/></operator><literal type="number" pos:line="144" pos:column="33">1<pos:position pos:line="144" pos:column="34"/></literal><operator pos:line="144" pos:column="34">)<pos:position pos:line="144" pos:column="35"/></operator></expr>;<pos:position pos:line="144" pos:column="36"/></return>
		}<pos:position pos:line="145" pos:column="18"/></block></then></if>
		<if pos:line="146" pos:column="17">if <condition pos:line="146" pos:column="20">(<expr><call><name pos:line="146" pos:column="21">dup<pos:position pos:line="146" pos:column="24"/></name> <argument_list pos:line="146" pos:column="25">(<argument><expr><literal type="number" pos:line="146" pos:column="26">0<pos:position pos:line="146" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="146" pos:column="28"/></argument_list></call> <operator pos:line="146" pos:column="29">!=<pos:position pos:line="146" pos:column="31"/></operator> <literal type="number" pos:line="146" pos:column="32">2<pos:position pos:line="146" pos:column="33"/></literal></expr>)<pos:position pos:line="146" pos:column="34"/></condition><then pos:line="146" pos:column="34">
		<block pos:line="147" pos:column="17">{
			<expr_stmt><expr><call><name pos:line="148" pos:column="25">syslog<pos:position pos:line="148" pos:column="31"/></name> <argument_list pos:line="148" pos:column="32">(<argument><expr><name pos:line="148" pos:column="33">LOG_ERR<pos:position pos:line="148" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="148" pos:column="42">"Error: Could not connect `STDERR' to `/dev/null'"<pos:position pos:line="148" pos:column="92"/></literal></expr></argument>)<pos:position pos:line="148" pos:column="93"/></argument_list></call></expr>;<pos:position pos:line="148" pos:column="94"/></expr_stmt>
			<return pos:line="149" pos:column="25">return <expr><operator pos:line="149" pos:column="32">(<pos:position pos:line="149" pos:column="33"/></operator><literal type="number" pos:line="149" pos:column="33">1<pos:position pos:line="149" pos:column="34"/></literal><operator pos:line="149" pos:column="34">)<pos:position pos:line="149" pos:column="35"/></operator></expr>;<pos:position pos:line="149" pos:column="36"/></return>
		}<pos:position pos:line="150" pos:column="18"/></block></then></if>
	}<pos:position pos:line="151" pos:column="10"/></block></then></if> <comment type="block" pos:line="151" pos:column="11">/* if (daemonize) */</comment>
<cpp:endif pos:line="152" pos:column="1">#<cpp:directive pos:line="152" pos:column="2">endif<pos:position pos:line="152" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="152" pos:column="8">/* COLLECT_DAEMON */</comment>

	<comment type="block" pos:line="154" pos:column="9">/*
	 * install signal handlers
	 */</comment>
	<expr_stmt><expr><name><name pos:line="157" pos:column="9">sigIntAction<pos:position pos:line="157" pos:column="21"/></name><operator pos:line="157" pos:column="21">.<pos:position pos:line="157" pos:column="22"/></operator><name pos:line="157" pos:column="22">sa_handler<pos:position pos:line="157" pos:column="32"/></name></name> <operator pos:line="157" pos:column="33">=<pos:position pos:line="157" pos:column="34"/></operator> <name pos:line="157" pos:column="35">sigIntHandler<pos:position pos:line="157" pos:column="48"/></name></expr>;<pos:position pos:line="157" pos:column="49"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="158" pos:column="9">sigaction<pos:position pos:line="158" pos:column="18"/></name> <argument_list pos:line="158" pos:column="19">(<argument><expr><name pos:line="158" pos:column="20">SIGINT<pos:position pos:line="158" pos:column="26"/></name></expr></argument>, <argument><expr><operator pos:line="158" pos:column="28">&amp;<pos:position pos:line="158" pos:column="33"/></operator><name pos:line="158" pos:column="29">sigIntAction<pos:position pos:line="158" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="158" pos:column="43">NULL<pos:position pos:line="158" pos:column="47"/></name></expr></argument>)<pos:position pos:line="158" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="158" pos:column="49"/></expr_stmt>

	<expr_stmt><expr><name><name pos:line="160" pos:column="9">sigTermAction<pos:position pos:line="160" pos:column="22"/></name><operator pos:line="160" pos:column="22">.<pos:position pos:line="160" pos:column="23"/></operator><name pos:line="160" pos:column="23">sa_handler<pos:position pos:line="160" pos:column="33"/></name></name> <operator pos:line="160" pos:column="34">=<pos:position pos:line="160" pos:column="35"/></operator> <name pos:line="160" pos:column="36">sigTermHandler<pos:position pos:line="160" pos:column="50"/></name></expr>;<pos:position pos:line="160" pos:column="51"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="161" pos:column="9">sigaction<pos:position pos:line="161" pos:column="18"/></name> <argument_list pos:line="161" pos:column="19">(<argument><expr><name pos:line="161" pos:column="20">SIGTERM<pos:position pos:line="161" pos:column="27"/></name></expr></argument>, <argument><expr><operator pos:line="161" pos:column="29">&amp;<pos:position pos:line="161" pos:column="34"/></operator><name pos:line="161" pos:column="30">sigTermAction<pos:position pos:line="161" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="161" pos:column="45">NULL<pos:position pos:line="161" pos:column="49"/></name></expr></argument>)<pos:position pos:line="161" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="161" pos:column="51"/></expr_stmt>

	<comment type="block" pos:line="163" pos:column="9">/*
	 * run the actual loops
	 */</comment>
<cpp:if pos:line="166" pos:column="1">#<cpp:directive pos:line="166" pos:column="2">if<pos:position pos:line="166" pos:column="4"/></cpp:directive> <expr><name pos:line="166" pos:column="5">HAVE_LIBRRD<pos:position pos:line="166" pos:column="16"/></name></expr></cpp:if>
	<if pos:line="167" pos:column="9">if <condition pos:line="167" pos:column="12">(<expr><name pos:line="167" pos:column="13">operating_mode<pos:position pos:line="167" pos:column="27"/></name> <operator pos:line="167" pos:column="28">==<pos:position pos:line="167" pos:column="30"/></operator> <name pos:line="167" pos:column="31">MODE_SERVER<pos:position pos:line="167" pos:column="42"/></name></expr>)<pos:position pos:line="167" pos:column="43"/></condition><then pos:line="167" pos:column="43">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="168" pos:column="17">start_server<pos:position pos:line="168" pos:column="29"/></name> <argument_list pos:line="168" pos:column="30">()<pos:position pos:line="168" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="168" pos:column="33"/></expr_stmt></block></then>
	<else pos:line="169" pos:column="9">else <comment type="block" pos:line="169" pos:column="14">/* if (operating_mode == MODE_CLIENT || operating_mode == MODE_LOCAL) */</comment>
<cpp:endif pos:line="170" pos:column="1">#<cpp:directive pos:line="170" pos:column="2">endif<pos:position pos:line="170" pos:column="7"/></cpp:directive></cpp:endif>
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="171" pos:column="17">start_client<pos:position pos:line="171" pos:column="29"/></name> <argument_list pos:line="171" pos:column="30">()<pos:position pos:line="171" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="171" pos:column="33"/></expr_stmt></block></else></if>

	<comment type="block" pos:line="173" pos:column="9">/* close syslog */</comment>
	<expr_stmt><expr><call><name pos:line="174" pos:column="9">syslog<pos:position pos:line="174" pos:column="15"/></name> <argument_list pos:line="174" pos:column="16">(<argument><expr><name pos:line="174" pos:column="17">LOG_INFO<pos:position pos:line="174" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="174" pos:column="27">"Exiting normally"<pos:position pos:line="174" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="174" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="174" pos:column="47"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="175" pos:column="9">closelog<pos:position pos:line="175" pos:column="17"/></name> <argument_list pos:line="175" pos:column="18">()<pos:position pos:line="175" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="175" pos:column="21"/></expr_stmt>

<cpp:if pos:line="177" pos:column="1">#<cpp:directive pos:line="177" pos:column="2">if<pos:position pos:line="177" pos:column="4"/></cpp:directive> <expr><name pos:line="177" pos:column="5">COLLECT_DAEMON<pos:position pos:line="177" pos:column="19"/></name></expr></cpp:if>
	<if pos:line="178" pos:column="9">if <condition pos:line="178" pos:column="12">(<expr><name pos:line="178" pos:column="13">daemonize<pos:position pos:line="178" pos:column="22"/></name></expr>)<pos:position pos:line="178" pos:column="23"/></condition><then pos:line="178" pos:column="23">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="179" pos:column="17">pidfile_remove<pos:position pos:line="179" pos:column="31"/></name><argument_list pos:line="179" pos:column="31">(<argument><expr><name pos:line="179" pos:column="32">pidfile<pos:position pos:line="179" pos:column="39"/></name></expr></argument>)<pos:position pos:line="179" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="179" pos:column="41"/></expr_stmt></block></then></if>
<cpp:endif pos:line="180" pos:column="1">#<cpp:directive pos:line="180" pos:column="2">endif<pos:position pos:line="180" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="180" pos:column="8">/* COLLECT_DAEMON */</comment>

	<return pos:line="182" pos:column="9">return <expr><operator pos:line="182" pos:column="16">(<pos:position pos:line="182" pos:column="17"/></operator><literal type="number" pos:line="182" pos:column="17">0<pos:position pos:line="182" pos:column="18"/></literal><operator pos:line="182" pos:column="18">)<pos:position pos:line="182" pos:column="19"/></operator></expr>;<pos:position pos:line="182" pos:column="20"/></return>
}<pos:position pos:line="183" pos:column="2"/></block></function></unit>
