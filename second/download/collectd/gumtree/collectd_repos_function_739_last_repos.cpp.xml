<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_739_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">in6_addr_from_buffer<pos:position pos:line="1" pos:column="33"/></name><parameter_list pos:line="1" pos:column="33">(<parameter><decl><type><name><name pos:line="1" pos:column="34">struct<pos:position pos:line="1" pos:column="40"/></name> <name pos:line="1" pos:column="41">in6_addr<pos:position pos:line="1" pos:column="49"/></name></name> <modifier pos:line="1" pos:column="50">*<pos:position pos:line="1" pos:column="51"/></modifier></type><name pos:line="1" pos:column="51">ia<pos:position pos:line="1" pos:column="53"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="55">const<pos:position pos:line="1" pos:column="60"/></specifier> <name pos:line="1" pos:column="61">void<pos:position pos:line="1" pos:column="65"/></name> <modifier pos:line="1" pos:column="66">*<pos:position pos:line="1" pos:column="67"/></modifier></type><name pos:line="1" pos:column="67">buf<pos:position pos:line="1" pos:column="70"/></name></decl></parameter>,
                                 <parameter><decl><type><name pos:line="2" pos:column="34">size_t<pos:position pos:line="2" pos:column="40"/></name></type> <name pos:line="2" pos:column="41">buf_len<pos:position pos:line="2" pos:column="48"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="50">int<pos:position pos:line="2" pos:column="53"/></name></type> <name pos:line="2" pos:column="54">family<pos:position pos:line="2" pos:column="60"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="61"/></parameter_list> <block pos:line="2" pos:column="62">{
  <expr_stmt><expr><call><name pos:line="3" pos:column="3">memset<pos:position pos:line="3" pos:column="9"/></name><argument_list pos:line="3" pos:column="9">(<argument><expr><name pos:line="3" pos:column="10">ia<pos:position pos:line="3" pos:column="12"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="3" pos:column="14">0<pos:position pos:line="3" pos:column="15"/></literal></expr></argument>, <argument><expr><sizeof pos:line="3" pos:column="17">sizeof<argument_list pos:line="3" pos:column="23">(<argument><expr pos:line="3" pos:column="24">struct <name pos:line="3" pos:column="31">in6_addr<pos:position pos:line="3" pos:column="39"/></name></expr></argument>)<pos:position pos:line="3" pos:column="40"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="3" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="3" pos:column="42"/></expr_stmt>
  <if pos:line="4" pos:column="3">if <condition pos:line="4" pos:column="6">(<expr><operator pos:line="4" pos:column="7">(<pos:position pos:line="4" pos:column="8"/></operator><name pos:line="4" pos:column="8">AF_INET<pos:position pos:line="4" pos:column="15"/></name> <operator pos:line="4" pos:column="16">==<pos:position pos:line="4" pos:column="18"/></operator> <name pos:line="4" pos:column="19">family<pos:position pos:line="4" pos:column="25"/></name><operator pos:line="4" pos:column="25">)<pos:position pos:line="4" pos:column="26"/></operator> <operator pos:line="4" pos:column="27">&amp;&amp;<pos:position pos:line="4" pos:column="37"/></operator> <operator pos:line="4" pos:column="30">(<pos:position pos:line="4" pos:column="31"/></operator><sizeof pos:line="4" pos:column="31">sizeof<argument_list pos:line="4" pos:column="37">(<argument><expr><name pos:line="4" pos:column="38">uint32_t<pos:position pos:line="4" pos:column="46"/></name></expr></argument>)<pos:position pos:line="4" pos:column="47"/></argument_list></sizeof> <operator pos:line="4" pos:column="48">==<pos:position pos:line="4" pos:column="50"/></operator> <name pos:line="4" pos:column="51">buf_len<pos:position pos:line="4" pos:column="58"/></name><operator pos:line="4" pos:column="58">)<pos:position pos:line="4" pos:column="59"/></operator></expr>)<pos:position pos:line="4" pos:column="60"/></condition><then pos:line="4" pos:column="60"> <block pos:line="4" pos:column="61">{
    <expr_stmt><expr><name><name pos:line="5" pos:column="5">ia<pos:position pos:line="5" pos:column="7"/></name><operator pos:line="5" pos:column="7">-&gt;<pos:position pos:line="5" pos:column="12"/></operator><name pos:line="5" pos:column="9">s6_addr<pos:position pos:line="5" pos:column="16"/></name><index pos:line="5" pos:column="16">[<expr><literal type="number" pos:line="5" pos:column="17">10<pos:position pos:line="5" pos:column="19"/></literal></expr>]<pos:position pos:line="5" pos:column="20"/></index></name> <operator pos:line="5" pos:column="21">=<pos:position pos:line="5" pos:column="22"/></operator> <literal type="number" pos:line="5" pos:column="23">0xFF<pos:position pos:line="5" pos:column="27"/></literal></expr>;<pos:position pos:line="5" pos:column="28"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="6" pos:column="5">ia<pos:position pos:line="6" pos:column="7"/></name><operator pos:line="6" pos:column="7">-&gt;<pos:position pos:line="6" pos:column="12"/></operator><name pos:line="6" pos:column="9">s6_addr<pos:position pos:line="6" pos:column="16"/></name><index pos:line="6" pos:column="16">[<expr><literal type="number" pos:line="6" pos:column="17">11<pos:position pos:line="6" pos:column="19"/></literal></expr>]<pos:position pos:line="6" pos:column="20"/></index></name> <operator pos:line="6" pos:column="21">=<pos:position pos:line="6" pos:column="22"/></operator> <literal type="number" pos:line="6" pos:column="23">0xFF<pos:position pos:line="6" pos:column="27"/></literal></expr>;<pos:position pos:line="6" pos:column="28"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="7" pos:column="5">memcpy<pos:position pos:line="7" pos:column="11"/></name><argument_list pos:line="7" pos:column="11">(<argument><expr><name><name pos:line="7" pos:column="12">ia<pos:position pos:line="7" pos:column="14"/></name><operator pos:line="7" pos:column="14">-&gt;<pos:position pos:line="7" pos:column="19"/></operator><name pos:line="7" pos:column="16">s6_addr<pos:position pos:line="7" pos:column="23"/></name></name> <operator pos:line="7" pos:column="24">+<pos:position pos:line="7" pos:column="25"/></operator> <literal type="number" pos:line="7" pos:column="26">12<pos:position pos:line="7" pos:column="28"/></literal></expr></argument>, <argument><expr><name pos:line="7" pos:column="30">buf<pos:position pos:line="7" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="35">buf_len<pos:position pos:line="7" pos:column="42"/></name></expr></argument>)<pos:position pos:line="7" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="44"/></expr_stmt>
  }<pos:position pos:line="8" pos:column="4"/></block></then> <elseif pos:line="8" pos:column="5">else <if pos:line="8" pos:column="10">if <condition pos:line="8" pos:column="13">(<expr><operator pos:line="8" pos:column="14">(<pos:position pos:line="8" pos:column="15"/></operator><name pos:line="8" pos:column="15">AF_INET6<pos:position pos:line="8" pos:column="23"/></name> <operator pos:line="8" pos:column="24">==<pos:position pos:line="8" pos:column="26"/></operator> <name pos:line="8" pos:column="27">family<pos:position pos:line="8" pos:column="33"/></name><operator pos:line="8" pos:column="33">)<pos:position pos:line="8" pos:column="34"/></operator> <operator pos:line="8" pos:column="35">&amp;&amp;<pos:position pos:line="8" pos:column="45"/></operator> <operator pos:line="8" pos:column="38">(<pos:position pos:line="8" pos:column="39"/></operator><sizeof pos:line="8" pos:column="39">sizeof<argument_list pos:line="8" pos:column="45">(<argument><expr pos:line="8" pos:column="46">struct <name pos:line="8" pos:column="53">in6_addr<pos:position pos:line="8" pos:column="61"/></name></expr></argument>)<pos:position pos:line="8" pos:column="62"/></argument_list></sizeof> <operator pos:line="8" pos:column="63">==<pos:position pos:line="8" pos:column="65"/></operator> <name pos:line="8" pos:column="66">buf_len<pos:position pos:line="8" pos:column="73"/></name><operator pos:line="8" pos:column="73">)<pos:position pos:line="8" pos:column="74"/></operator></expr>)<pos:position pos:line="8" pos:column="75"/></condition><then pos:line="8" pos:column="75"> <block pos:line="8" pos:column="76">{
    <expr_stmt><expr><call><name pos:line="9" pos:column="5">memcpy<pos:position pos:line="9" pos:column="11"/></name><argument_list pos:line="9" pos:column="11">(<argument><expr><name pos:line="9" pos:column="12">ia<pos:position pos:line="9" pos:column="14"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="16">buf<pos:position pos:line="9" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="21">buf_len<pos:position pos:line="9" pos:column="28"/></name></expr></argument>)<pos:position pos:line="9" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="30"/></expr_stmt>
  }<pos:position pos:line="10" pos:column="4"/></block></then></if></elseif></if>
}<pos:position pos:line="11" pos:column="2"/></block></function></unit>
