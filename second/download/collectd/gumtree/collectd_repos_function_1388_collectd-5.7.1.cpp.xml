<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1388_collectd-5.7.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name> <modifier pos:line="1" pos:column="13">*<pos:position pos:line="1" pos:column="14"/></modifier></type><name pos:line="1" pos:column="14">collector_thread<pos:position pos:line="1" pos:column="30"/></name><parameter_list pos:line="1" pos:column="30">(<parameter><decl><type><name pos:line="1" pos:column="31">void<pos:position pos:line="1" pos:column="35"/></name> <modifier pos:line="1" pos:column="36">*<pos:position pos:line="1" pos:column="37"/></modifier></type><name pos:line="1" pos:column="37">arg<pos:position pos:line="1" pos:column="40"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="41"/></parameter_list> <comment type="block" pos:line="1" pos:column="42">/* {{{ */</comment>
<block pos:line="2" pos:column="1">{
  <expr_stmt><expr><call><name pos:line="3" pos:column="3">receive_loop<pos:position pos:line="3" pos:column="15"/></name><argument_list pos:line="3" pos:column="15">()<pos:position pos:line="3" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="3" pos:column="18"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="5" pos:column="3">memset<pos:position pos:line="5" pos:column="9"/></name><argument_list pos:line="5" pos:column="9">(<argument><expr><operator pos:line="5" pos:column="10">&amp;<pos:position pos:line="5" pos:column="15"/></operator><name pos:line="5" pos:column="11">collector_thread_id<pos:position pos:line="5" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="5" pos:column="32">0<pos:position pos:line="5" pos:column="33"/></literal></expr></argument>, <argument><expr><sizeof pos:line="5" pos:column="35">sizeof<argument_list pos:line="5" pos:column="41">(<argument><expr><name pos:line="5" pos:column="42">collector_thread_id<pos:position pos:line="5" pos:column="61"/></name></expr></argument>)<pos:position pos:line="5" pos:column="62"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="5" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="64"/></expr_stmt>
  <expr_stmt><expr><name pos:line="6" pos:column="3">collector_thread_running<pos:position pos:line="6" pos:column="27"/></name> <operator pos:line="6" pos:column="28">=<pos:position pos:line="6" pos:column="29"/></operator> <literal type="number" pos:line="6" pos:column="30">0<pos:position pos:line="6" pos:column="31"/></literal></expr>;<pos:position pos:line="6" pos:column="32"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="7" pos:column="3">pthread_exit<pos:position pos:line="7" pos:column="15"/></name><argument_list pos:line="7" pos:column="15">(<argument><expr><name pos:line="7" pos:column="16">NULL<pos:position pos:line="7" pos:column="20"/></name></expr></argument>)<pos:position pos:line="7" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="22"/></expr_stmt>
  <return pos:line="8" pos:column="3">return <expr><operator pos:line="8" pos:column="10">(<pos:position pos:line="8" pos:column="11"/></operator><name pos:line="8" pos:column="11">NULL<pos:position pos:line="8" pos:column="15"/></name><operator pos:line="8" pos:column="15">)<pos:position pos:line="8" pos:column="16"/></operator></expr>;<pos:position pos:line="8" pos:column="17"/></return>
}<pos:position pos:line="9" pos:column="2"/></block></function></unit>
