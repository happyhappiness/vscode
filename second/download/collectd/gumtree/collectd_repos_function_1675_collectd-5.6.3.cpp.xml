<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1675_collectd-5.6.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">cconn_main_loop<pos:position pos:line="1" pos:column="27"/></name><parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><name pos:line="1" pos:column="28">uint32_t<pos:position pos:line="1" pos:column="36"/></name></type> <name pos:line="1" pos:column="37">request_type<pos:position pos:line="1" pos:column="49"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="50"/></parameter_list> <block pos:line="1" pos:column="51">{
  <decl_stmt><decl><type><name pos:line="2" pos:column="3">int<pos:position pos:line="2" pos:column="6"/></name></type> <name pos:line="2" pos:column="7">ret<pos:position pos:line="2" pos:column="10"/></name></decl>, <decl><type ref="prev"/><name pos:line="2" pos:column="12">some_unreachable<pos:position pos:line="2" pos:column="28"/></name> <init pos:line="2" pos:column="29">= <expr><literal type="number" pos:line="2" pos:column="31">0<pos:position pos:line="2" pos:column="32"/></literal></expr></init></decl>;<pos:position pos:line="2" pos:column="33"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="3" pos:column="3">struct<pos:position pos:line="3" pos:column="9"/></name> <name pos:line="3" pos:column="10">timeval<pos:position pos:line="3" pos:column="17"/></name></name></type> <name pos:line="3" pos:column="18">end_tv<pos:position pos:line="3" pos:column="24"/></name></decl>;<pos:position pos:line="3" pos:column="25"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="4" pos:column="3">struct<pos:position pos:line="4" pos:column="9"/></name> <name pos:line="4" pos:column="10">cconn<pos:position pos:line="4" pos:column="15"/></name></name></type> <name><name pos:line="4" pos:column="16">io_array<pos:position pos:line="4" pos:column="24"/></name><index pos:line="4" pos:column="24">[<expr><name pos:line="4" pos:column="25">g_num_daemons<pos:position pos:line="4" pos:column="38"/></name></expr>]<pos:position pos:line="4" pos:column="39"/></index></name></decl>;<pos:position pos:line="4" pos:column="40"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="6" pos:column="3">DEBUG<pos:position pos:line="6" pos:column="8"/></name><argument_list pos:line="6" pos:column="8">(<argument><expr><literal type="string" pos:line="6" pos:column="9">"ceph plugin: entering cconn_main_loop(request_type = %d)"<pos:position pos:line="6" pos:column="67"/></literal></expr></argument>,
        <argument><expr><name pos:line="7" pos:column="9">request_type<pos:position pos:line="7" pos:column="21"/></name></expr></argument>)<pos:position pos:line="7" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="23"/></expr_stmt>

  <comment type="block" pos:line="9" pos:column="3">/* create cconn array */</comment>
  <expr_stmt><expr><call><name pos:line="10" pos:column="3">memset<pos:position pos:line="10" pos:column="9"/></name><argument_list pos:line="10" pos:column="9">(<argument><expr><name pos:line="10" pos:column="10">io_array<pos:position pos:line="10" pos:column="18"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="10" pos:column="20">0<pos:position pos:line="10" pos:column="21"/></literal></expr></argument>, <argument><expr><sizeof pos:line="10" pos:column="23">sizeof<argument_list pos:line="10" pos:column="29">(<argument><expr><name pos:line="10" pos:column="30">io_array<pos:position pos:line="10" pos:column="38"/></name></expr></argument>)<pos:position pos:line="10" pos:column="39"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="10" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="41"/></expr_stmt>
  <for pos:line="11" pos:column="3">for <control pos:line="11" pos:column="7">(<init><decl><type><name pos:line="11" pos:column="8">size_t<pos:position pos:line="11" pos:column="14"/></name></type> <name pos:line="11" pos:column="15">i<pos:position pos:line="11" pos:column="16"/></name> <init pos:line="11" pos:column="17">= <expr><literal type="number" pos:line="11" pos:column="19">0<pos:position pos:line="11" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="11" pos:column="21"/></init> <condition><expr><name pos:line="11" pos:column="22">i<pos:position pos:line="11" pos:column="23"/></name> <operator pos:line="11" pos:column="24">&lt;<pos:position pos:line="11" pos:column="28"/></operator> <name pos:line="11" pos:column="26">g_num_daemons<pos:position pos:line="11" pos:column="39"/></name></expr>;<pos:position pos:line="11" pos:column="40"/></condition> <incr><expr><operator pos:line="11" pos:column="41">++<pos:position pos:line="11" pos:column="43"/></operator><name pos:line="11" pos:column="43">i<pos:position pos:line="11" pos:column="44"/></name></expr></incr>)<pos:position pos:line="11" pos:column="45"/></control> <block pos:line="11" pos:column="46">{
    <expr_stmt><expr><name><name pos:line="12" pos:column="5">io_array<pos:position pos:line="12" pos:column="13"/></name><index pos:line="12" pos:column="13">[<expr><name pos:line="12" pos:column="14">i<pos:position pos:line="12" pos:column="15"/></name></expr>]<pos:position pos:line="12" pos:column="16"/></index></name><operator pos:line="12" pos:column="16">.<pos:position pos:line="12" pos:column="17"/></operator><name pos:line="12" pos:column="17">d<pos:position pos:line="12" pos:column="18"/></name> <operator pos:line="12" pos:column="19">=<pos:position pos:line="12" pos:column="20"/></operator> <name><name pos:line="12" pos:column="21">g_daemons<pos:position pos:line="12" pos:column="30"/></name><index pos:line="12" pos:column="30">[<expr><name pos:line="12" pos:column="31">i<pos:position pos:line="12" pos:column="32"/></name></expr>]<pos:position pos:line="12" pos:column="33"/></index></name></expr>;<pos:position pos:line="12" pos:column="34"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="13" pos:column="5">io_array<pos:position pos:line="13" pos:column="13"/></name><index pos:line="13" pos:column="13">[<expr><name pos:line="13" pos:column="14">i<pos:position pos:line="13" pos:column="15"/></name></expr>]<pos:position pos:line="13" pos:column="16"/></index></name><operator pos:line="13" pos:column="16">.<pos:position pos:line="13" pos:column="17"/></operator><name pos:line="13" pos:column="17">request_type<pos:position pos:line="13" pos:column="29"/></name> <operator pos:line="13" pos:column="30">=<pos:position pos:line="13" pos:column="31"/></operator> <name pos:line="13" pos:column="32">request_type<pos:position pos:line="13" pos:column="44"/></name></expr>;<pos:position pos:line="13" pos:column="45"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="14" pos:column="5">io_array<pos:position pos:line="14" pos:column="13"/></name><index pos:line="14" pos:column="13">[<expr><name pos:line="14" pos:column="14">i<pos:position pos:line="14" pos:column="15"/></name></expr>]<pos:position pos:line="14" pos:column="16"/></index></name><operator pos:line="14" pos:column="16">.<pos:position pos:line="14" pos:column="17"/></operator><name pos:line="14" pos:column="17">state<pos:position pos:line="14" pos:column="22"/></name> <operator pos:line="14" pos:column="23">=<pos:position pos:line="14" pos:column="24"/></operator> <name pos:line="14" pos:column="25">CSTATE_UNCONNECTED<pos:position pos:line="14" pos:column="43"/></name></expr>;<pos:position pos:line="14" pos:column="44"/></expr_stmt>
  }<pos:position pos:line="15" pos:column="4"/></block></for>

  <comment type="block" format="doxygen" pos:line="17" pos:column="3">/** Calculate the time at which we should give up */</comment>
  <expr_stmt><expr><call><name pos:line="18" pos:column="3">gettimeofday<pos:position pos:line="18" pos:column="15"/></name><argument_list pos:line="18" pos:column="15">(<argument><expr><operator pos:line="18" pos:column="16">&amp;<pos:position pos:line="18" pos:column="21"/></operator><name pos:line="18" pos:column="17">end_tv<pos:position pos:line="18" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="25">NULL<pos:position pos:line="18" pos:column="29"/></name></expr></argument>)<pos:position pos:line="18" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="31"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="19" pos:column="3">end_tv<pos:position pos:line="19" pos:column="9"/></name><operator pos:line="19" pos:column="9">.<pos:position pos:line="19" pos:column="10"/></operator><name pos:line="19" pos:column="10">tv_sec<pos:position pos:line="19" pos:column="16"/></name></name> <operator pos:line="19" pos:column="17">+=<pos:position pos:line="19" pos:column="19"/></operator> <name pos:line="19" pos:column="20">CEPH_TIMEOUT_INTERVAL<pos:position pos:line="19" pos:column="41"/></name></expr>;<pos:position pos:line="19" pos:column="42"/></expr_stmt>

  <while pos:line="21" pos:column="3">while <condition pos:line="21" pos:column="9">(<expr><literal type="number" pos:line="21" pos:column="10">1<pos:position pos:line="21" pos:column="11"/></literal></expr>)<pos:position pos:line="21" pos:column="12"/></condition> <block pos:line="21" pos:column="13">{
    <decl_stmt><decl><type><name pos:line="22" pos:column="5">int<pos:position pos:line="22" pos:column="8"/></name></type> <name pos:line="22" pos:column="9">nfds<pos:position pos:line="22" pos:column="13"/></name></decl>, <decl><type ref="prev"/><name pos:line="22" pos:column="15">diff<pos:position pos:line="22" pos:column="19"/></name></decl>;<pos:position pos:line="22" pos:column="20"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="23" pos:column="5">struct<pos:position pos:line="23" pos:column="11"/></name> <name pos:line="23" pos:column="12">timeval<pos:position pos:line="23" pos:column="19"/></name></name></type> <name pos:line="23" pos:column="20">tv<pos:position pos:line="23" pos:column="22"/></name></decl>;<pos:position pos:line="23" pos:column="23"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="24" pos:column="5">struct<pos:position pos:line="24" pos:column="11"/></name> <name pos:line="24" pos:column="12">cconn<pos:position pos:line="24" pos:column="17"/></name></name> <modifier pos:line="24" pos:column="18">*<pos:position pos:line="24" pos:column="19"/></modifier></type><name><name pos:line="24" pos:column="19">polled_io_array<pos:position pos:line="24" pos:column="34"/></name><index pos:line="24" pos:column="34">[<expr><name pos:line="24" pos:column="35">g_num_daemons<pos:position pos:line="24" pos:column="48"/></name></expr>]<pos:position pos:line="24" pos:column="49"/></index></name></decl>;<pos:position pos:line="24" pos:column="50"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="25" pos:column="5">struct<pos:position pos:line="25" pos:column="11"/></name> <name pos:line="25" pos:column="12">pollfd<pos:position pos:line="25" pos:column="18"/></name></name></type> <name><name pos:line="25" pos:column="19">fds<pos:position pos:line="25" pos:column="22"/></name><index pos:line="25" pos:column="22">[<expr><name pos:line="25" pos:column="23">g_num_daemons<pos:position pos:line="25" pos:column="36"/></name></expr>]<pos:position pos:line="25" pos:column="37"/></index></name></decl>;<pos:position pos:line="25" pos:column="38"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="26" pos:column="5">memset<pos:position pos:line="26" pos:column="11"/></name><argument_list pos:line="26" pos:column="11">(<argument><expr><name pos:line="26" pos:column="12">fds<pos:position pos:line="26" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="26" pos:column="17">0<pos:position pos:line="26" pos:column="18"/></literal></expr></argument>, <argument><expr><sizeof pos:line="26" pos:column="20">sizeof<argument_list pos:line="26" pos:column="26">(<argument><expr><name pos:line="26" pos:column="27">fds<pos:position pos:line="26" pos:column="30"/></name></expr></argument>)<pos:position pos:line="26" pos:column="31"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="26" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="33"/></expr_stmt>
    <expr_stmt><expr><name pos:line="27" pos:column="5">nfds<pos:position pos:line="27" pos:column="9"/></name> <operator pos:line="27" pos:column="10">=<pos:position pos:line="27" pos:column="11"/></operator> <literal type="number" pos:line="27" pos:column="12">0<pos:position pos:line="27" pos:column="13"/></literal></expr>;<pos:position pos:line="27" pos:column="14"/></expr_stmt>
    <for pos:line="28" pos:column="5">for <control pos:line="28" pos:column="9">(<init><decl><type><name pos:line="28" pos:column="10">size_t<pos:position pos:line="28" pos:column="16"/></name></type> <name pos:line="28" pos:column="17">i<pos:position pos:line="28" pos:column="18"/></name> <init pos:line="28" pos:column="19">= <expr><literal type="number" pos:line="28" pos:column="21">0<pos:position pos:line="28" pos:column="22"/></literal></expr></init></decl>;<pos:position pos:line="28" pos:column="23"/></init> <condition><expr><name pos:line="28" pos:column="24">i<pos:position pos:line="28" pos:column="25"/></name> <operator pos:line="28" pos:column="26">&lt;<pos:position pos:line="28" pos:column="30"/></operator> <name pos:line="28" pos:column="28">g_num_daemons<pos:position pos:line="28" pos:column="41"/></name></expr>;<pos:position pos:line="28" pos:column="42"/></condition> <incr><expr><operator pos:line="28" pos:column="43">++<pos:position pos:line="28" pos:column="45"/></operator><name pos:line="28" pos:column="45">i<pos:position pos:line="28" pos:column="46"/></name></expr></incr>)<pos:position pos:line="28" pos:column="47"/></control> <block pos:line="28" pos:column="48">{
      <decl_stmt><decl><type><name><name pos:line="29" pos:column="7">struct<pos:position pos:line="29" pos:column="13"/></name> <name pos:line="29" pos:column="14">cconn<pos:position pos:line="29" pos:column="19"/></name></name> <modifier pos:line="29" pos:column="20">*<pos:position pos:line="29" pos:column="21"/></modifier></type><name pos:line="29" pos:column="21">io<pos:position pos:line="29" pos:column="23"/></name> <init pos:line="29" pos:column="24">= <expr><name pos:line="29" pos:column="26">io_array<pos:position pos:line="29" pos:column="34"/></name> <operator pos:line="29" pos:column="35">+<pos:position pos:line="29" pos:column="36"/></operator> <name pos:line="29" pos:column="37">i<pos:position pos:line="29" pos:column="38"/></name></expr></init></decl>;<pos:position pos:line="29" pos:column="39"/></decl_stmt>
      <expr_stmt><expr><name pos:line="30" pos:column="7">ret<pos:position pos:line="30" pos:column="10"/></name> <operator pos:line="30" pos:column="11">=<pos:position pos:line="30" pos:column="12"/></operator> <call><name pos:line="30" pos:column="13">cconn_prepare<pos:position pos:line="30" pos:column="26"/></name><argument_list pos:line="30" pos:column="26">(<argument><expr><name pos:line="30" pos:column="27">io<pos:position pos:line="30" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="31">fds<pos:position pos:line="30" pos:column="34"/></name> <operator pos:line="30" pos:column="35">+<pos:position pos:line="30" pos:column="36"/></operator> <name pos:line="30" pos:column="37">nfds<pos:position pos:line="30" pos:column="41"/></name></expr></argument>)<pos:position pos:line="30" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="43"/></expr_stmt>
      <if pos:line="31" pos:column="7">if <condition pos:line="31" pos:column="10">(<expr><name pos:line="31" pos:column="11">ret<pos:position pos:line="31" pos:column="14"/></name> <operator pos:line="31" pos:column="15">&lt;<pos:position pos:line="31" pos:column="19"/></operator> <literal type="number" pos:line="31" pos:column="17">0<pos:position pos:line="31" pos:column="18"/></literal></expr>)<pos:position pos:line="31" pos:column="19"/></condition><then pos:line="31" pos:column="19"> <block pos:line="31" pos:column="20">{
        <expr_stmt><expr><call><name pos:line="32" pos:column="9">WARNING<pos:position pos:line="32" pos:column="16"/></name><argument_list pos:line="32" pos:column="16">(<argument><expr><literal type="string" pos:line="32" pos:column="17">"ceph plugin: cconn_prepare(name=%s,i=%zu,st=%d)=%d"<pos:position pos:line="32" pos:column="69"/></literal></expr></argument>,
                <argument><expr><name><name pos:line="33" pos:column="17">io<pos:position pos:line="33" pos:column="19"/></name><operator pos:line="33" pos:column="19">-&gt;<pos:position pos:line="33" pos:column="24"/></operator><name pos:line="33" pos:column="21">d<pos:position pos:line="33" pos:column="22"/></name><operator pos:line="33" pos:column="22">-&gt;<pos:position pos:line="33" pos:column="27"/></operator><name pos:line="33" pos:column="24">name<pos:position pos:line="33" pos:column="28"/></name></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="30">i<pos:position pos:line="33" pos:column="31"/></name></expr></argument>, <argument><expr><name><name pos:line="33" pos:column="33">io<pos:position pos:line="33" pos:column="35"/></name><operator pos:line="33" pos:column="35">-&gt;<pos:position pos:line="33" pos:column="40"/></operator><name pos:line="33" pos:column="37">state<pos:position pos:line="33" pos:column="42"/></name></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="44">ret<pos:position pos:line="33" pos:column="47"/></name></expr></argument>)<pos:position pos:line="33" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="49"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="34" pos:column="9">cconn_close<pos:position pos:line="34" pos:column="20"/></name><argument_list pos:line="34" pos:column="20">(<argument><expr><name pos:line="34" pos:column="21">io<pos:position pos:line="34" pos:column="23"/></name></expr></argument>)<pos:position pos:line="34" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="25"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="35" pos:column="9">io<pos:position pos:line="35" pos:column="11"/></name><operator pos:line="35" pos:column="11">-&gt;<pos:position pos:line="35" pos:column="16"/></operator><name pos:line="35" pos:column="13">request_type<pos:position pos:line="35" pos:column="25"/></name></name> <operator pos:line="35" pos:column="26">=<pos:position pos:line="35" pos:column="27"/></operator> <name pos:line="35" pos:column="28">ASOK_REQ_NONE<pos:position pos:line="35" pos:column="41"/></name></expr>;<pos:position pos:line="35" pos:column="42"/></expr_stmt>
        <expr_stmt><expr><name pos:line="36" pos:column="9">some_unreachable<pos:position pos:line="36" pos:column="25"/></name> <operator pos:line="36" pos:column="26">=<pos:position pos:line="36" pos:column="27"/></operator> <literal type="number" pos:line="36" pos:column="28">1<pos:position pos:line="36" pos:column="29"/></literal></expr>;<pos:position pos:line="36" pos:column="30"/></expr_stmt>
      }<pos:position pos:line="37" pos:column="8"/></block></then> <elseif pos:line="37" pos:column="9">else <if pos:line="37" pos:column="14">if <condition pos:line="37" pos:column="17">(<expr><name pos:line="37" pos:column="18">ret<pos:position pos:line="37" pos:column="21"/></name> <operator pos:line="37" pos:column="22">==<pos:position pos:line="37" pos:column="24"/></operator> <literal type="number" pos:line="37" pos:column="25">1<pos:position pos:line="37" pos:column="26"/></literal></expr>)<pos:position pos:line="37" pos:column="27"/></condition><then pos:line="37" pos:column="27"> <block pos:line="37" pos:column="28">{
        <expr_stmt><expr><name><name pos:line="38" pos:column="9">polled_io_array<pos:position pos:line="38" pos:column="24"/></name><index pos:line="38" pos:column="24">[<expr><name pos:line="38" pos:column="25">nfds<pos:position pos:line="38" pos:column="29"/></name><operator pos:line="38" pos:column="29">++<pos:position pos:line="38" pos:column="31"/></operator></expr>]<pos:position pos:line="38" pos:column="32"/></index></name> <operator pos:line="38" pos:column="33">=<pos:position pos:line="38" pos:column="34"/></operator> <name pos:line="38" pos:column="35">io_array<pos:position pos:line="38" pos:column="43"/></name> <operator pos:line="38" pos:column="44">+<pos:position pos:line="38" pos:column="45"/></operator> <name pos:line="38" pos:column="46">i<pos:position pos:line="38" pos:column="47"/></name></expr>;<pos:position pos:line="38" pos:column="48"/></expr_stmt>
      }<pos:position pos:line="39" pos:column="8"/></block></then></if></elseif></if>
    }<pos:position pos:line="40" pos:column="6"/></block></for>
    <if pos:line="41" pos:column="5">if <condition pos:line="41" pos:column="8">(<expr><name pos:line="41" pos:column="9">nfds<pos:position pos:line="41" pos:column="13"/></name> <operator pos:line="41" pos:column="14">==<pos:position pos:line="41" pos:column="16"/></operator> <literal type="number" pos:line="41" pos:column="17">0<pos:position pos:line="41" pos:column="18"/></literal></expr>)<pos:position pos:line="41" pos:column="19"/></condition><then pos:line="41" pos:column="19"> <block pos:line="41" pos:column="20">{
      <comment type="block" pos:line="42" pos:column="7">/* finished */</comment>
      <expr_stmt><expr><name pos:line="43" pos:column="7">ret<pos:position pos:line="43" pos:column="10"/></name> <operator pos:line="43" pos:column="11">=<pos:position pos:line="43" pos:column="12"/></operator> <literal type="number" pos:line="43" pos:column="13">0<pos:position pos:line="43" pos:column="14"/></literal></expr>;<pos:position pos:line="43" pos:column="15"/></expr_stmt>
      <goto pos:line="44" pos:column="7">goto <name pos:line="44" pos:column="12">done<pos:position pos:line="44" pos:column="16"/></name>;<pos:position pos:line="44" pos:column="17"/></goto>
    }<pos:position pos:line="45" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="46" pos:column="5">gettimeofday<pos:position pos:line="46" pos:column="17"/></name><argument_list pos:line="46" pos:column="17">(<argument><expr><operator pos:line="46" pos:column="18">&amp;<pos:position pos:line="46" pos:column="23"/></operator><name pos:line="46" pos:column="19">tv<pos:position pos:line="46" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="23">NULL<pos:position pos:line="46" pos:column="27"/></name></expr></argument>)<pos:position pos:line="46" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="29"/></expr_stmt>
    <expr_stmt><expr><name pos:line="47" pos:column="5">diff<pos:position pos:line="47" pos:column="9"/></name> <operator pos:line="47" pos:column="10">=<pos:position pos:line="47" pos:column="11"/></operator> <call><name pos:line="47" pos:column="12">milli_diff<pos:position pos:line="47" pos:column="22"/></name><argument_list pos:line="47" pos:column="22">(<argument><expr><operator pos:line="47" pos:column="23">&amp;<pos:position pos:line="47" pos:column="28"/></operator><name pos:line="47" pos:column="24">end_tv<pos:position pos:line="47" pos:column="30"/></name></expr></argument>, <argument><expr><operator pos:line="47" pos:column="32">&amp;<pos:position pos:line="47" pos:column="37"/></operator><name pos:line="47" pos:column="33">tv<pos:position pos:line="47" pos:column="35"/></name></expr></argument>)<pos:position pos:line="47" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="37"/></expr_stmt>
    <if pos:line="48" pos:column="5">if <condition pos:line="48" pos:column="8">(<expr><name pos:line="48" pos:column="9">diff<pos:position pos:line="48" pos:column="13"/></name> <operator pos:line="48" pos:column="14">&lt;=<pos:position pos:line="48" pos:column="19"/></operator> <literal type="number" pos:line="48" pos:column="17">0<pos:position pos:line="48" pos:column="18"/></literal></expr>)<pos:position pos:line="48" pos:column="19"/></condition><then pos:line="48" pos:column="19"> <block pos:line="48" pos:column="20">{
      <comment type="block" pos:line="49" pos:column="7">/* Timed out */</comment>
      <expr_stmt><expr><name pos:line="50" pos:column="7">ret<pos:position pos:line="50" pos:column="10"/></name> <operator pos:line="50" pos:column="11">=<pos:position pos:line="50" pos:column="12"/></operator> <operator pos:line="50" pos:column="13">-<pos:position pos:line="50" pos:column="14"/></operator><name pos:line="50" pos:column="14">ETIMEDOUT<pos:position pos:line="50" pos:column="23"/></name></expr>;<pos:position pos:line="50" pos:column="24"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="51" pos:column="7">WARNING<pos:position pos:line="51" pos:column="14"/></name><argument_list pos:line="51" pos:column="14">(<argument><expr><literal type="string" pos:line="51" pos:column="15">"ceph plugin: cconn_main_loop: timed out."<pos:position pos:line="51" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="51" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="59"/></expr_stmt>
      <goto pos:line="52" pos:column="7">goto <name pos:line="52" pos:column="12">done<pos:position pos:line="52" pos:column="16"/></name>;<pos:position pos:line="52" pos:column="17"/></goto>
    }<pos:position pos:line="53" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="54" pos:column="5">RETRY_ON_EINTR<pos:position pos:line="54" pos:column="19"/></name><argument_list pos:line="54" pos:column="19">(<argument><expr><name pos:line="54" pos:column="20">ret<pos:position pos:line="54" pos:column="23"/></name></expr></argument>, <argument><expr><call><name pos:line="54" pos:column="25">poll<pos:position pos:line="54" pos:column="29"/></name><argument_list pos:line="54" pos:column="29">(<argument><expr><name pos:line="54" pos:column="30">fds<pos:position pos:line="54" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="35">nfds<pos:position pos:line="54" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="41">diff<pos:position pos:line="54" pos:column="45"/></name></expr></argument>)<pos:position pos:line="54" pos:column="46"/></argument_list></call></expr></argument>)<pos:position pos:line="54" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="48"/></expr_stmt>
    <if pos:line="55" pos:column="5">if <condition pos:line="55" pos:column="8">(<expr><name pos:line="55" pos:column="9">ret<pos:position pos:line="55" pos:column="12"/></name> <operator pos:line="55" pos:column="13">&lt;<pos:position pos:line="55" pos:column="17"/></operator> <literal type="number" pos:line="55" pos:column="15">0<pos:position pos:line="55" pos:column="16"/></literal></expr>)<pos:position pos:line="55" pos:column="17"/></condition><then pos:line="55" pos:column="17"> <block pos:line="55" pos:column="18">{
      <expr_stmt><expr><call><name pos:line="56" pos:column="7">ERROR<pos:position pos:line="56" pos:column="12"/></name><argument_list pos:line="56" pos:column="12">(<argument><expr><literal type="string" pos:line="56" pos:column="13">"ceph plugin: poll(2) error: %d"<pos:position pos:line="56" pos:column="45"/></literal></expr></argument>, <argument><expr><name pos:line="56" pos:column="47">ret<pos:position pos:line="56" pos:column="50"/></name></expr></argument>)<pos:position pos:line="56" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="52"/></expr_stmt>
      <goto pos:line="57" pos:column="7">goto <name pos:line="57" pos:column="12">done<pos:position pos:line="57" pos:column="16"/></name>;<pos:position pos:line="57" pos:column="17"/></goto>
    }<pos:position pos:line="58" pos:column="6"/></block></then></if>
    <for pos:line="59" pos:column="5">for <control pos:line="59" pos:column="9">(<init><decl><type><name pos:line="59" pos:column="10">int<pos:position pos:line="59" pos:column="13"/></name></type> <name pos:line="59" pos:column="14">i<pos:position pos:line="59" pos:column="15"/></name> <init pos:line="59" pos:column="16">= <expr><literal type="number" pos:line="59" pos:column="18">0<pos:position pos:line="59" pos:column="19"/></literal></expr></init></decl>;<pos:position pos:line="59" pos:column="20"/></init> <condition><expr><name pos:line="59" pos:column="21">i<pos:position pos:line="59" pos:column="22"/></name> <operator pos:line="59" pos:column="23">&lt;<pos:position pos:line="59" pos:column="27"/></operator> <name pos:line="59" pos:column="25">nfds<pos:position pos:line="59" pos:column="29"/></name></expr>;<pos:position pos:line="59" pos:column="30"/></condition> <incr><expr><operator pos:line="59" pos:column="31">++<pos:position pos:line="59" pos:column="33"/></operator><name pos:line="59" pos:column="33">i<pos:position pos:line="59" pos:column="34"/></name></expr></incr>)<pos:position pos:line="59" pos:column="35"/></control> <block pos:line="59" pos:column="36">{
      <decl_stmt><decl><type><name><name pos:line="60" pos:column="7">struct<pos:position pos:line="60" pos:column="13"/></name> <name pos:line="60" pos:column="14">cconn<pos:position pos:line="60" pos:column="19"/></name></name> <modifier pos:line="60" pos:column="20">*<pos:position pos:line="60" pos:column="21"/></modifier></type><name pos:line="60" pos:column="21">io<pos:position pos:line="60" pos:column="23"/></name> <init pos:line="60" pos:column="24">= <expr><name><name pos:line="60" pos:column="26">polled_io_array<pos:position pos:line="60" pos:column="41"/></name><index pos:line="60" pos:column="41">[<expr><name pos:line="60" pos:column="42">i<pos:position pos:line="60" pos:column="43"/></name></expr>]<pos:position pos:line="60" pos:column="44"/></index></name></expr></init></decl>;<pos:position pos:line="60" pos:column="45"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="61" pos:column="7">int<pos:position pos:line="61" pos:column="10"/></name></type> <name pos:line="61" pos:column="11">revents<pos:position pos:line="61" pos:column="18"/></name> <init pos:line="61" pos:column="19">= <expr><name><name pos:line="61" pos:column="21">fds<pos:position pos:line="61" pos:column="24"/></name><index pos:line="61" pos:column="24">[<expr><name pos:line="61" pos:column="25">i<pos:position pos:line="61" pos:column="26"/></name></expr>]<pos:position pos:line="61" pos:column="27"/></index></name><operator pos:line="61" pos:column="27">.<pos:position pos:line="61" pos:column="28"/></operator><name pos:line="61" pos:column="28">revents<pos:position pos:line="61" pos:column="35"/></name></expr></init></decl>;<pos:position pos:line="61" pos:column="36"/></decl_stmt>
      <if pos:line="62" pos:column="7">if <condition pos:line="62" pos:column="10">(<expr><name pos:line="62" pos:column="11">revents<pos:position pos:line="62" pos:column="18"/></name> <operator pos:line="62" pos:column="19">==<pos:position pos:line="62" pos:column="21"/></operator> <literal type="number" pos:line="62" pos:column="22">0<pos:position pos:line="62" pos:column="23"/></literal></expr>)<pos:position pos:line="62" pos:column="24"/></condition><then pos:line="62" pos:column="24"> <block pos:line="62" pos:column="25">{
        <comment type="block" pos:line="63" pos:column="9">/* do nothing */</comment>
        <continue pos:line="64" pos:column="9">continue;<pos:position pos:line="64" pos:column="18"/></continue>
      }<pos:position pos:line="65" pos:column="8"/></block></then> <elseif pos:line="65" pos:column="9">else <if pos:line="65" pos:column="14">if <condition pos:line="65" pos:column="17">(<expr><call><name pos:line="65" pos:column="18">cconn_validate_revents<pos:position pos:line="65" pos:column="40"/></name><argument_list pos:line="65" pos:column="40">(<argument><expr><name pos:line="65" pos:column="41">io<pos:position pos:line="65" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="65" pos:column="45">revents<pos:position pos:line="65" pos:column="52"/></name></expr></argument>)<pos:position pos:line="65" pos:column="53"/></argument_list></call></expr>)<pos:position pos:line="65" pos:column="54"/></condition><then pos:line="65" pos:column="54"> <block pos:line="65" pos:column="55">{
        <expr_stmt><expr><call><name pos:line="66" pos:column="9">WARNING<pos:position pos:line="66" pos:column="16"/></name><argument_list pos:line="66" pos:column="16">(<argument><expr><literal type="string" pos:line="66" pos:column="17">"ceph plugin: cconn(name=%s,i=%d,st=%d): "<pos:position pos:line="66" pos:column="59"/></literal>
                <literal type="string" pos:line="67" pos:column="17">"revents validation error: "<pos:position pos:line="67" pos:column="45"/></literal>
                <literal type="string" pos:line="68" pos:column="17">"revents=0x%08x"<pos:position pos:line="68" pos:column="33"/></literal></expr></argument>,
                <argument><expr><name><name pos:line="69" pos:column="17">io<pos:position pos:line="69" pos:column="19"/></name><operator pos:line="69" pos:column="19">-&gt;<pos:position pos:line="69" pos:column="24"/></operator><name pos:line="69" pos:column="21">d<pos:position pos:line="69" pos:column="22"/></name><operator pos:line="69" pos:column="22">-&gt;<pos:position pos:line="69" pos:column="27"/></operator><name pos:line="69" pos:column="24">name<pos:position pos:line="69" pos:column="28"/></name></name></expr></argument>, <argument><expr><name pos:line="69" pos:column="30">i<pos:position pos:line="69" pos:column="31"/></name></expr></argument>, <argument><expr><name><name pos:line="69" pos:column="33">io<pos:position pos:line="69" pos:column="35"/></name><operator pos:line="69" pos:column="35">-&gt;<pos:position pos:line="69" pos:column="40"/></operator><name pos:line="69" pos:column="37">state<pos:position pos:line="69" pos:column="42"/></name></name></expr></argument>, <argument><expr><name pos:line="69" pos:column="44">revents<pos:position pos:line="69" pos:column="51"/></name></expr></argument>)<pos:position pos:line="69" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="53"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="70" pos:column="9">cconn_close<pos:position pos:line="70" pos:column="20"/></name><argument_list pos:line="70" pos:column="20">(<argument><expr><name pos:line="70" pos:column="21">io<pos:position pos:line="70" pos:column="23"/></name></expr></argument>)<pos:position pos:line="70" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="25"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="71" pos:column="9">io<pos:position pos:line="71" pos:column="11"/></name><operator pos:line="71" pos:column="11">-&gt;<pos:position pos:line="71" pos:column="16"/></operator><name pos:line="71" pos:column="13">request_type<pos:position pos:line="71" pos:column="25"/></name></name> <operator pos:line="71" pos:column="26">=<pos:position pos:line="71" pos:column="27"/></operator> <name pos:line="71" pos:column="28">ASOK_REQ_NONE<pos:position pos:line="71" pos:column="41"/></name></expr>;<pos:position pos:line="71" pos:column="42"/></expr_stmt>
        <expr_stmt><expr><name pos:line="72" pos:column="9">some_unreachable<pos:position pos:line="72" pos:column="25"/></name> <operator pos:line="72" pos:column="26">=<pos:position pos:line="72" pos:column="27"/></operator> <literal type="number" pos:line="72" pos:column="28">1<pos:position pos:line="72" pos:column="29"/></literal></expr>;<pos:position pos:line="72" pos:column="30"/></expr_stmt>
      }<pos:position pos:line="73" pos:column="8"/></block></then></if></elseif> <else pos:line="73" pos:column="9">else <block pos:line="73" pos:column="14">{
        <expr_stmt><expr><name pos:line="74" pos:column="9">ret<pos:position pos:line="74" pos:column="12"/></name> <operator pos:line="74" pos:column="13">=<pos:position pos:line="74" pos:column="14"/></operator> <call><name pos:line="74" pos:column="15">cconn_handle_event<pos:position pos:line="74" pos:column="33"/></name><argument_list pos:line="74" pos:column="33">(<argument><expr><name pos:line="74" pos:column="34">io<pos:position pos:line="74" pos:column="36"/></name></expr></argument>)<pos:position pos:line="74" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="38"/></expr_stmt>
        <if pos:line="75" pos:column="9">if <condition pos:line="75" pos:column="12">(<expr><name pos:line="75" pos:column="13">ret<pos:position pos:line="75" pos:column="16"/></name></expr>)<pos:position pos:line="75" pos:column="17"/></condition><then pos:line="75" pos:column="17"> <block pos:line="75" pos:column="18">{
          <expr_stmt><expr><call><name pos:line="76" pos:column="11">WARNING<pos:position pos:line="76" pos:column="18"/></name><argument_list pos:line="76" pos:column="18">(<argument><expr><literal type="string" pos:line="76" pos:column="19">"ceph plugin: cconn_handle_event(name=%s,"<pos:position pos:line="76" pos:column="61"/></literal>
                  <literal type="string" pos:line="77" pos:column="19">"i=%d,st=%d): error %d"<pos:position pos:line="77" pos:column="42"/></literal></expr></argument>,
                  <argument><expr><name><name pos:line="78" pos:column="19">io<pos:position pos:line="78" pos:column="21"/></name><operator pos:line="78" pos:column="21">-&gt;<pos:position pos:line="78" pos:column="26"/></operator><name pos:line="78" pos:column="23">d<pos:position pos:line="78" pos:column="24"/></name><operator pos:line="78" pos:column="24">-&gt;<pos:position pos:line="78" pos:column="29"/></operator><name pos:line="78" pos:column="26">name<pos:position pos:line="78" pos:column="30"/></name></name></expr></argument>, <argument><expr><name pos:line="78" pos:column="32">i<pos:position pos:line="78" pos:column="33"/></name></expr></argument>, <argument><expr><name><name pos:line="78" pos:column="35">io<pos:position pos:line="78" pos:column="37"/></name><operator pos:line="78" pos:column="37">-&gt;<pos:position pos:line="78" pos:column="42"/></operator><name pos:line="78" pos:column="39">state<pos:position pos:line="78" pos:column="44"/></name></name></expr></argument>, <argument><expr><name pos:line="78" pos:column="46">ret<pos:position pos:line="78" pos:column="49"/></name></expr></argument>)<pos:position pos:line="78" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="51"/></expr_stmt>
          <expr_stmt><expr><call><name pos:line="79" pos:column="11">cconn_close<pos:position pos:line="79" pos:column="22"/></name><argument_list pos:line="79" pos:column="22">(<argument><expr><name pos:line="79" pos:column="23">io<pos:position pos:line="79" pos:column="25"/></name></expr></argument>)<pos:position pos:line="79" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="27"/></expr_stmt>
          <expr_stmt><expr><name><name pos:line="80" pos:column="11">io<pos:position pos:line="80" pos:column="13"/></name><operator pos:line="80" pos:column="13">-&gt;<pos:position pos:line="80" pos:column="18"/></operator><name pos:line="80" pos:column="15">request_type<pos:position pos:line="80" pos:column="27"/></name></name> <operator pos:line="80" pos:column="28">=<pos:position pos:line="80" pos:column="29"/></operator> <name pos:line="80" pos:column="30">ASOK_REQ_NONE<pos:position pos:line="80" pos:column="43"/></name></expr>;<pos:position pos:line="80" pos:column="44"/></expr_stmt>
          <expr_stmt><expr><name pos:line="81" pos:column="11">some_unreachable<pos:position pos:line="81" pos:column="27"/></name> <operator pos:line="81" pos:column="28">=<pos:position pos:line="81" pos:column="29"/></operator> <literal type="number" pos:line="81" pos:column="30">1<pos:position pos:line="81" pos:column="31"/></literal></expr>;<pos:position pos:line="81" pos:column="32"/></expr_stmt>
        }<pos:position pos:line="82" pos:column="10"/></block></then></if>
      }<pos:position pos:line="83" pos:column="8"/></block></else></if>
    }<pos:position pos:line="84" pos:column="6"/></block></for>
  }<pos:position pos:line="85" pos:column="4"/></block></while>
<label><name pos:line="86" pos:column="1">done<pos:position pos:line="86" pos:column="5"/></name>:<pos:position pos:line="86" pos:column="6"/></label>
  <for pos:line="87" pos:column="3">for <control pos:line="87" pos:column="7">(<init><decl><type><name pos:line="87" pos:column="8">size_t<pos:position pos:line="87" pos:column="14"/></name></type> <name pos:line="87" pos:column="15">i<pos:position pos:line="87" pos:column="16"/></name> <init pos:line="87" pos:column="17">= <expr><literal type="number" pos:line="87" pos:column="19">0<pos:position pos:line="87" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="87" pos:column="21"/></init> <condition><expr><name pos:line="87" pos:column="22">i<pos:position pos:line="87" pos:column="23"/></name> <operator pos:line="87" pos:column="24">&lt;<pos:position pos:line="87" pos:column="28"/></operator> <name pos:line="87" pos:column="26">g_num_daemons<pos:position pos:line="87" pos:column="39"/></name></expr>;<pos:position pos:line="87" pos:column="40"/></condition> <incr><expr><operator pos:line="87" pos:column="41">++<pos:position pos:line="87" pos:column="43"/></operator><name pos:line="87" pos:column="43">i<pos:position pos:line="87" pos:column="44"/></name></expr></incr>)<pos:position pos:line="87" pos:column="45"/></control> <block pos:line="87" pos:column="46">{
    <expr_stmt><expr><call><name pos:line="88" pos:column="5">cconn_close<pos:position pos:line="88" pos:column="16"/></name><argument_list pos:line="88" pos:column="16">(<argument><expr><name pos:line="88" pos:column="17">io_array<pos:position pos:line="88" pos:column="25"/></name> <operator pos:line="88" pos:column="26">+<pos:position pos:line="88" pos:column="27"/></operator> <name pos:line="88" pos:column="28">i<pos:position pos:line="88" pos:column="29"/></name></expr></argument>)<pos:position pos:line="88" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="31"/></expr_stmt>
  }<pos:position pos:line="89" pos:column="4"/></block></for>
  <if pos:line="90" pos:column="3">if <condition pos:line="90" pos:column="6">(<expr><name pos:line="90" pos:column="7">some_unreachable<pos:position pos:line="90" pos:column="23"/></name></expr>)<pos:position pos:line="90" pos:column="24"/></condition><then pos:line="90" pos:column="24"> <block pos:line="90" pos:column="25">{
    <expr_stmt><expr><call><name pos:line="91" pos:column="5">DEBUG<pos:position pos:line="91" pos:column="10"/></name><argument_list pos:line="91" pos:column="10">(<argument><expr><literal type="string" pos:line="91" pos:column="11">"ceph plugin: cconn_main_loop: some Ceph daemons were unreachable."<pos:position pos:line="91" pos:column="78"/></literal></expr></argument>)<pos:position pos:line="91" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="91" pos:column="80"/></expr_stmt>
  }<pos:position pos:line="92" pos:column="4"/></block></then> <else pos:line="92" pos:column="5">else <block pos:line="92" pos:column="10">{
    <expr_stmt><expr><call><name pos:line="93" pos:column="5">DEBUG<pos:position pos:line="93" pos:column="10"/></name><argument_list pos:line="93" pos:column="10">(<argument><expr><literal type="string" pos:line="93" pos:column="11">"ceph plugin: cconn_main_loop: reached all Ceph daemons :)"<pos:position pos:line="93" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="93" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="72"/></expr_stmt>
  }<pos:position pos:line="94" pos:column="4"/></block></else></if>
  <return pos:line="95" pos:column="3">return <expr><name pos:line="95" pos:column="10">ret<pos:position pos:line="95" pos:column="13"/></name></expr>;<pos:position pos:line="95" pos:column="14"/></return>
}<pos:position pos:line="96" pos:column="2"/></block></function></unit>
