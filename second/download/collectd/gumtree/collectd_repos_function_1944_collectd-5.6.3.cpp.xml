<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1944_collectd-5.6.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">network_send_buffer<pos:position pos:line="1" pos:column="32"/></name><parameter_list pos:line="1" pos:column="32">(<parameter><decl><type><name pos:line="1" pos:column="33">char<pos:position pos:line="1" pos:column="37"/></name> <modifier pos:line="1" pos:column="38">*<pos:position pos:line="1" pos:column="39"/></modifier></type><name pos:line="1" pos:column="39">buffer<pos:position pos:line="1" pos:column="45"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="47">size_t<pos:position pos:line="1" pos:column="53"/></name></type> <name pos:line="1" pos:column="54">buffer_len<pos:position pos:line="1" pos:column="64"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="65"/></parameter_list> <comment type="block" pos:line="1" pos:column="66">/* {{{ */</comment>
<block pos:line="2" pos:column="1">{
  <expr_stmt><expr><call><name pos:line="3" pos:column="3">DEBUG<pos:position pos:line="3" pos:column="8"/></name><argument_list pos:line="3" pos:column="8">(<argument><expr><literal type="string" pos:line="3" pos:column="9">"network plugin: network_send_buffer: buffer_len = %zu"<pos:position pos:line="3" pos:column="64"/></literal></expr></argument>, <argument><expr><name pos:line="3" pos:column="66">buffer_len<pos:position pos:line="3" pos:column="76"/></name></expr></argument>)<pos:position pos:line="3" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="3" pos:column="78"/></expr_stmt>

  <for pos:line="5" pos:column="3">for <control pos:line="5" pos:column="7">(<init><decl><type><name pos:line="5" pos:column="8">sockent_t<pos:position pos:line="5" pos:column="17"/></name> <modifier pos:line="5" pos:column="18">*<pos:position pos:line="5" pos:column="19"/></modifier></type><name pos:line="5" pos:column="19">se<pos:position pos:line="5" pos:column="21"/></name> <init pos:line="5" pos:column="22">= <expr><name pos:line="5" pos:column="24">sending_sockets<pos:position pos:line="5" pos:column="39"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="40"/></init> <condition><expr><name pos:line="5" pos:column="41">se<pos:position pos:line="5" pos:column="43"/></name> <operator pos:line="5" pos:column="44">!=<pos:position pos:line="5" pos:column="46"/></operator> <name pos:line="5" pos:column="47">NULL<pos:position pos:line="5" pos:column="51"/></name></expr>;<pos:position pos:line="5" pos:column="52"/></condition> <incr><expr><name pos:line="5" pos:column="53">se<pos:position pos:line="5" pos:column="55"/></name> <operator pos:line="5" pos:column="56">=<pos:position pos:line="5" pos:column="57"/></operator> <name><name pos:line="5" pos:column="58">se<pos:position pos:line="5" pos:column="60"/></name><operator pos:line="5" pos:column="60">-&gt;<pos:position pos:line="5" pos:column="65"/></operator><name pos:line="5" pos:column="62">next<pos:position pos:line="5" pos:column="66"/></name></name></expr></incr>)<pos:position pos:line="5" pos:column="67"/></control> <block pos:line="5" pos:column="68">{
<cpp:if pos:line="6" pos:column="1">#<cpp:directive pos:line="6" pos:column="2">if<pos:position pos:line="6" pos:column="4"/></cpp:directive> <expr><name pos:line="6" pos:column="5">HAVE_LIBGCRYPT<pos:position pos:line="6" pos:column="19"/></name></expr></cpp:if>
    <if pos:line="7" pos:column="5">if <condition pos:line="7" pos:column="8">(<expr><name><name pos:line="7" pos:column="9">se<pos:position pos:line="7" pos:column="11"/></name><operator pos:line="7" pos:column="11">-&gt;<pos:position pos:line="7" pos:column="16"/></operator><name pos:line="7" pos:column="13">data<pos:position pos:line="7" pos:column="17"/></name><operator pos:line="7" pos:column="17">.<pos:position pos:line="7" pos:column="18"/></operator><name pos:line="7" pos:column="18">client<pos:position pos:line="7" pos:column="24"/></name><operator pos:line="7" pos:column="24">.<pos:position pos:line="7" pos:column="25"/></operator><name pos:line="7" pos:column="25">security_level<pos:position pos:line="7" pos:column="39"/></name></name> <operator pos:line="7" pos:column="40">==<pos:position pos:line="7" pos:column="42"/></operator> <name pos:line="7" pos:column="43">SECURITY_LEVEL_ENCRYPT<pos:position pos:line="7" pos:column="65"/></name></expr>)<pos:position pos:line="7" pos:column="66"/></condition><then pos:line="7" pos:column="66">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="8" pos:column="7">network_send_buffer_encrypted<pos:position pos:line="8" pos:column="36"/></name><argument_list pos:line="8" pos:column="36">(<argument><expr><name pos:line="8" pos:column="37">se<pos:position pos:line="8" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="41">buffer<pos:position pos:line="8" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="49">buffer_len<pos:position pos:line="8" pos:column="59"/></name></expr></argument>)<pos:position pos:line="8" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="61"/></expr_stmt></block></then>
    <elseif pos:line="9" pos:column="5">else <if pos:line="9" pos:column="10">if <condition pos:line="9" pos:column="13">(<expr><name><name pos:line="9" pos:column="14">se<pos:position pos:line="9" pos:column="16"/></name><operator pos:line="9" pos:column="16">-&gt;<pos:position pos:line="9" pos:column="21"/></operator><name pos:line="9" pos:column="18">data<pos:position pos:line="9" pos:column="22"/></name><operator pos:line="9" pos:column="22">.<pos:position pos:line="9" pos:column="23"/></operator><name pos:line="9" pos:column="23">client<pos:position pos:line="9" pos:column="29"/></name><operator pos:line="9" pos:column="29">.<pos:position pos:line="9" pos:column="30"/></operator><name pos:line="9" pos:column="30">security_level<pos:position pos:line="9" pos:column="44"/></name></name> <operator pos:line="9" pos:column="45">==<pos:position pos:line="9" pos:column="47"/></operator> <name pos:line="9" pos:column="48">SECURITY_LEVEL_SIGN<pos:position pos:line="9" pos:column="67"/></name></expr>)<pos:position pos:line="9" pos:column="68"/></condition><then pos:line="9" pos:column="68">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="10" pos:column="7">network_send_buffer_signed<pos:position pos:line="10" pos:column="33"/></name><argument_list pos:line="10" pos:column="33">(<argument><expr><name pos:line="10" pos:column="34">se<pos:position pos:line="10" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="38">buffer<pos:position pos:line="10" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="46">buffer_len<pos:position pos:line="10" pos:column="56"/></name></expr></argument>)<pos:position pos:line="10" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="58"/></expr_stmt></block></then></if></elseif>
    <else pos:line="11" pos:column="5">else <comment type="block" pos:line="11" pos:column="10">/* if (se-&gt;data.client.security_level == SECURITY_LEVEL_NONE) */</comment>
<cpp:endif pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">endif<pos:position pos:line="12" pos:column="7"/></cpp:directive></cpp:endif>   <comment type="block" pos:line="12" pos:column="10">/* HAVE_LIBGCRYPT */</comment>
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="13" pos:column="7">network_send_buffer_plain<pos:position pos:line="13" pos:column="32"/></name><argument_list pos:line="13" pos:column="32">(<argument><expr><name pos:line="13" pos:column="33">se<pos:position pos:line="13" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="37">buffer<pos:position pos:line="13" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="45">buffer_len<pos:position pos:line="13" pos:column="55"/></name></expr></argument>)<pos:position pos:line="13" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="57"/></expr_stmt></block></else></if>
  }<pos:position pos:line="14" pos:column="4"/></block></for> <comment type="block" pos:line="14" pos:column="5">/* for (sending_sockets) */</comment>
}<pos:position pos:line="15" pos:column="2"/></block></function></unit>
