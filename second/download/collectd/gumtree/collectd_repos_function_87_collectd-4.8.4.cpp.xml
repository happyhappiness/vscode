<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_87_collectd-4.8.4.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name> <modifier pos:line="1" pos:column="6">*<pos:position pos:line="1" pos:column="7"/></modifier></type>
<name pos:line="2" pos:column="1">lt__realloc<pos:position pos:line="2" pos:column="12"/></name> <parameter_list pos:line="2" pos:column="13">(<parameter><decl><type><name pos:line="2" pos:column="14">void<pos:position pos:line="2" pos:column="18"/></name> <modifier pos:line="2" pos:column="19">*<pos:position pos:line="2" pos:column="20"/></modifier></type><name pos:line="2" pos:column="20">mem<pos:position pos:line="2" pos:column="23"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="25">size_t<pos:position pos:line="2" pos:column="31"/></name></type> <name pos:line="2" pos:column="32">n<pos:position pos:line="2" pos:column="33"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="34"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <if pos:line="4" pos:column="3">if <condition pos:line="4" pos:column="6">(<expr><operator pos:line="4" pos:column="7">!<pos:position pos:line="4" pos:column="8"/></operator> <operator pos:line="4" pos:column="9">(<pos:position pos:line="4" pos:column="10"/></operator><name pos:line="4" pos:column="10">mem<pos:position pos:line="4" pos:column="13"/></name> <operator pos:line="4" pos:column="14">=<pos:position pos:line="4" pos:column="15"/></operator> <call><name pos:line="4" pos:column="16">realloc<pos:position pos:line="4" pos:column="23"/></name> <argument_list pos:line="4" pos:column="24">(<argument><expr><name pos:line="4" pos:column="25">mem<pos:position pos:line="4" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="4" pos:column="30">n<pos:position pos:line="4" pos:column="31"/></name></expr></argument>)<pos:position pos:line="4" pos:column="32"/></argument_list></call><operator pos:line="4" pos:column="32">)<pos:position pos:line="4" pos:column="33"/></operator></expr>)<pos:position pos:line="4" pos:column="34"/></condition><then pos:line="4" pos:column="34">
    <block type="pseudo"><expr_stmt><expr><call pos:line="5" pos:column="5">(<modifier pos:line="5" pos:column="6">*<pos:position pos:line="5" pos:column="7"/></modifier><name pos:line="5" pos:column="7">lt__alloc_die<pos:position pos:line="5" pos:column="20"/></name>) <argument_list pos:line="5" pos:column="22">()<pos:position pos:line="5" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="25"/></expr_stmt></block></then></if>

  <return pos:line="7" pos:column="3">return <expr><name pos:line="7" pos:column="10">mem<pos:position pos:line="7" pos:column="13"/></name></expr>;<pos:position pos:line="7" pos:column="14"/></return>
}<pos:position pos:line="8" pos:column="2"/></block></function></unit>
