<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_903_collectd-5.6.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type>
<name pos:line="2" pos:column="1">turbostat_read<pos:position pos:line="2" pos:column="15"/></name><parameter_list pos:line="2" pos:column="15">(<parameter><decl><type><name pos:line="2" pos:column="16">void<pos:position pos:line="2" pos:column="20"/></name></type></decl></parameter>)<pos:position pos:line="2" pos:column="21"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">ret<pos:position pos:line="4" pos:column="16"/></name></decl>;<pos:position pos:line="4" pos:column="17"/></decl_stmt>

	<if pos:line="6" pos:column="9">if <condition pos:line="6" pos:column="12">(<expr><operator pos:line="6" pos:column="13">!<pos:position pos:line="6" pos:column="14"/></operator><name pos:line="6" pos:column="14">allocated<pos:position pos:line="6" pos:column="23"/></name></expr>)<pos:position pos:line="6" pos:column="24"/></condition><then pos:line="6" pos:column="24"> <block pos:line="6" pos:column="25">{
		<if pos:line="7" pos:column="17">if <condition pos:line="7" pos:column="20">(<expr><operator pos:line="7" pos:column="21">(<pos:position pos:line="7" pos:column="22"/></operator><name pos:line="7" pos:column="22">ret<pos:position pos:line="7" pos:column="25"/></name> <operator pos:line="7" pos:column="26">=<pos:position pos:line="7" pos:column="27"/></operator> <call><name pos:line="7" pos:column="28">setup_all_buffers<pos:position pos:line="7" pos:column="45"/></name><argument_list pos:line="7" pos:column="45">()<pos:position pos:line="7" pos:column="47"/></argument_list></call><operator pos:line="7" pos:column="47">)<pos:position pos:line="7" pos:column="48"/></operator> <operator pos:line="7" pos:column="49">&lt;<pos:position pos:line="7" pos:column="53"/></operator> <literal type="number" pos:line="7" pos:column="51">0<pos:position pos:line="7" pos:column="52"/></literal></expr>)<pos:position pos:line="7" pos:column="53"/></condition><then pos:line="7" pos:column="53">
			<block type="pseudo"><return pos:line="8" pos:column="25">return <expr><name pos:line="8" pos:column="32">ret<pos:position pos:line="8" pos:column="35"/></name></expr>;<pos:position pos:line="8" pos:column="36"/></return></block></then></if>
	}<pos:position pos:line="9" pos:column="10"/></block></then></if>

	<if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><call><name pos:line="11" pos:column="13">for_all_proc_cpus<pos:position pos:line="11" pos:column="30"/></name><argument_list pos:line="11" pos:column="30">(<argument><expr><name pos:line="11" pos:column="31">cpu_is_not_present<pos:position pos:line="11" pos:column="49"/></name></expr></argument>)<pos:position pos:line="11" pos:column="50"/></argument_list></call></expr>)<pos:position pos:line="11" pos:column="51"/></condition><then pos:line="11" pos:column="51"> <block pos:line="11" pos:column="52">{
		<expr_stmt><expr><call><name pos:line="12" pos:column="17">free_all_buffers<pos:position pos:line="12" pos:column="33"/></name><argument_list pos:line="12" pos:column="33">()<pos:position pos:line="12" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="36"/></expr_stmt>
		<if pos:line="13" pos:column="17">if <condition pos:line="13" pos:column="20">(<expr><operator pos:line="13" pos:column="21">(<pos:position pos:line="13" pos:column="22"/></operator><name pos:line="13" pos:column="22">ret<pos:position pos:line="13" pos:column="25"/></name> <operator pos:line="13" pos:column="26">=<pos:position pos:line="13" pos:column="27"/></operator> <call><name pos:line="13" pos:column="28">setup_all_buffers<pos:position pos:line="13" pos:column="45"/></name><argument_list pos:line="13" pos:column="45">()<pos:position pos:line="13" pos:column="47"/></argument_list></call><operator pos:line="13" pos:column="47">)<pos:position pos:line="13" pos:column="48"/></operator> <operator pos:line="13" pos:column="49">&lt;<pos:position pos:line="13" pos:column="53"/></operator> <literal type="number" pos:line="13" pos:column="51">0<pos:position pos:line="13" pos:column="52"/></literal></expr>)<pos:position pos:line="13" pos:column="53"/></condition><then pos:line="13" pos:column="53">
			<block type="pseudo"><return pos:line="14" pos:column="25">return <expr><name pos:line="14" pos:column="32">ret<pos:position pos:line="14" pos:column="35"/></name></expr>;<pos:position pos:line="14" pos:column="36"/></return></block></then></if>
		<if pos:line="15" pos:column="17">if <condition pos:line="15" pos:column="20">(<expr><call><name pos:line="15" pos:column="21">for_all_proc_cpus<pos:position pos:line="15" pos:column="38"/></name><argument_list pos:line="15" pos:column="38">(<argument><expr><name pos:line="15" pos:column="39">cpu_is_not_present<pos:position pos:line="15" pos:column="57"/></name></expr></argument>)<pos:position pos:line="15" pos:column="58"/></argument_list></call></expr>)<pos:position pos:line="15" pos:column="59"/></condition><then pos:line="15" pos:column="59"> <block pos:line="15" pos:column="60">{
			<expr_stmt><expr><call><name pos:line="16" pos:column="25">ERROR<pos:position pos:line="16" pos:column="30"/></name><argument_list pos:line="16" pos:column="30">(<argument><expr><literal type="string" pos:line="16" pos:column="31">"turbostat plugin: CPU appeared just after "<pos:position pos:line="16" pos:column="75"/></literal>
			      <literal type="string" pos:line="17" pos:column="31">"initialization"<pos:position pos:line="17" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="49"/></expr_stmt>
			<return pos:line="18" pos:column="25">return <expr><operator pos:line="18" pos:column="32">-<pos:position pos:line="18" pos:column="33"/></operator><literal type="number" pos:line="18" pos:column="33">1<pos:position pos:line="18" pos:column="34"/></literal></expr>;<pos:position pos:line="18" pos:column="35"/></return>
		}<pos:position pos:line="19" pos:column="18"/></block></then></if>
	}<pos:position pos:line="20" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="22" pos:column="9">/* Saving the scheduling affinity, as it will be modified by get_counters */</comment>
	<if pos:line="23" pos:column="9">if <condition pos:line="23" pos:column="12">(<expr><call><name pos:line="23" pos:column="13">sched_getaffinity<pos:position pos:line="23" pos:column="30"/></name><argument_list pos:line="23" pos:column="30">(<argument><expr><literal type="number" pos:line="23" pos:column="31">0<pos:position pos:line="23" pos:column="32"/></literal></expr></argument>, <argument><expr><name pos:line="23" pos:column="34">cpu_saved_affinity_setsize<pos:position pos:line="23" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="62">cpu_saved_affinity_set<pos:position pos:line="23" pos:column="84"/></name></expr></argument>)<pos:position pos:line="23" pos:column="85"/></argument_list></call> <operator pos:line="23" pos:column="86">!=<pos:position pos:line="23" pos:column="88"/></operator> <literal type="number" pos:line="23" pos:column="89">0<pos:position pos:line="23" pos:column="90"/></literal></expr>)<pos:position pos:line="23" pos:column="91"/></condition><then pos:line="23" pos:column="91"> <block pos:line="23" pos:column="92">{
		<expr_stmt><expr><call><name pos:line="24" pos:column="17">ERROR<pos:position pos:line="24" pos:column="22"/></name><argument_list pos:line="24" pos:column="22">(<argument><expr><literal type="string" pos:line="24" pos:column="23">"turbostat plugin: Unable to save the CPU affinity"<pos:position pos:line="24" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="76"/></expr_stmt>
		<return pos:line="25" pos:column="17">return <expr><operator pos:line="25" pos:column="24">-<pos:position pos:line="25" pos:column="25"/></operator><literal type="number" pos:line="25" pos:column="25">1<pos:position pos:line="25" pos:column="26"/></literal></expr>;<pos:position pos:line="25" pos:column="27"/></return>
	}<pos:position pos:line="26" pos:column="10"/></block></then></if>

	<if pos:line="28" pos:column="9">if <condition pos:line="28" pos:column="12">(<expr><operator pos:line="28" pos:column="13">!<pos:position pos:line="28" pos:column="14"/></operator><name pos:line="28" pos:column="14">initialized<pos:position pos:line="28" pos:column="25"/></name></expr>)<pos:position pos:line="28" pos:column="26"/></condition><then pos:line="28" pos:column="26"> <block pos:line="28" pos:column="27">{
		<if pos:line="29" pos:column="17">if <condition pos:line="29" pos:column="20">(<expr><operator pos:line="29" pos:column="21">(<pos:position pos:line="29" pos:column="22"/></operator><name pos:line="29" pos:column="22">ret<pos:position pos:line="29" pos:column="25"/></name> <operator pos:line="29" pos:column="26">=<pos:position pos:line="29" pos:column="27"/></operator> <call><name pos:line="29" pos:column="28">for_all_cpus<pos:position pos:line="29" pos:column="40"/></name><argument_list pos:line="29" pos:column="40">(<argument><expr><name pos:line="29" pos:column="41">get_counters<pos:position pos:line="29" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="55">EVEN_COUNTERS<pos:position pos:line="29" pos:column="68"/></name></expr></argument>)<pos:position pos:line="29" pos:column="69"/></argument_list></call><operator pos:line="29" pos:column="69">)<pos:position pos:line="29" pos:column="70"/></operator> <operator pos:line="29" pos:column="71">&lt;<pos:position pos:line="29" pos:column="75"/></operator> <literal type="number" pos:line="29" pos:column="73">0<pos:position pos:line="29" pos:column="74"/></literal></expr>)<pos:position pos:line="29" pos:column="75"/></condition><then pos:line="29" pos:column="75">
			<block type="pseudo"><goto pos:line="30" pos:column="25">goto <name pos:line="30" pos:column="30">out<pos:position pos:line="30" pos:column="33"/></name>;<pos:position pos:line="30" pos:column="34"/></goto></block></then></if>
		<expr_stmt><expr><name pos:line="31" pos:column="17">time_even<pos:position pos:line="31" pos:column="26"/></name> <operator pos:line="31" pos:column="27">=<pos:position pos:line="31" pos:column="28"/></operator> <call><name pos:line="31" pos:column="29">cdtime<pos:position pos:line="31" pos:column="35"/></name><argument_list pos:line="31" pos:column="35">()<pos:position pos:line="31" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="38"/></expr_stmt>
		<expr_stmt><expr><name pos:line="32" pos:column="17">is_even<pos:position pos:line="32" pos:column="24"/></name> <operator pos:line="32" pos:column="25">=<pos:position pos:line="32" pos:column="26"/></operator> <literal type="number" pos:line="32" pos:column="27">1<pos:position pos:line="32" pos:column="28"/></literal></expr>;<pos:position pos:line="32" pos:column="29"/></expr_stmt>
		<expr_stmt><expr><name pos:line="33" pos:column="17">initialized<pos:position pos:line="33" pos:column="28"/></name> <operator pos:line="33" pos:column="29">=<pos:position pos:line="33" pos:column="30"/></operator> <literal type="number" pos:line="33" pos:column="31">1<pos:position pos:line="33" pos:column="32"/></literal></expr>;<pos:position pos:line="33" pos:column="33"/></expr_stmt>
		<expr_stmt><expr><name pos:line="34" pos:column="17">ret<pos:position pos:line="34" pos:column="20"/></name> <operator pos:line="34" pos:column="21">=<pos:position pos:line="34" pos:column="22"/></operator> <literal type="number" pos:line="34" pos:column="23">0<pos:position pos:line="34" pos:column="24"/></literal></expr>;<pos:position pos:line="34" pos:column="25"/></expr_stmt>
		<goto pos:line="35" pos:column="17">goto <name pos:line="35" pos:column="22">out<pos:position pos:line="35" pos:column="25"/></name>;<pos:position pos:line="35" pos:column="26"/></goto>
	}<pos:position pos:line="36" pos:column="10"/></block></then></if>

	<if pos:line="38" pos:column="9">if <condition pos:line="38" pos:column="12">(<expr><name pos:line="38" pos:column="13">is_even<pos:position pos:line="38" pos:column="20"/></name></expr>)<pos:position pos:line="38" pos:column="21"/></condition><then pos:line="38" pos:column="21"> <block pos:line="38" pos:column="22">{
		<if pos:line="39" pos:column="17">if <condition pos:line="39" pos:column="20">(<expr><operator pos:line="39" pos:column="21">(<pos:position pos:line="39" pos:column="22"/></operator><name pos:line="39" pos:column="22">ret<pos:position pos:line="39" pos:column="25"/></name> <operator pos:line="39" pos:column="26">=<pos:position pos:line="39" pos:column="27"/></operator> <call><name pos:line="39" pos:column="28">for_all_cpus<pos:position pos:line="39" pos:column="40"/></name><argument_list pos:line="39" pos:column="40">(<argument><expr><name pos:line="39" pos:column="41">get_counters<pos:position pos:line="39" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="55">ODD_COUNTERS<pos:position pos:line="39" pos:column="67"/></name></expr></argument>)<pos:position pos:line="39" pos:column="68"/></argument_list></call><operator pos:line="39" pos:column="68">)<pos:position pos:line="39" pos:column="69"/></operator> <operator pos:line="39" pos:column="70">&lt;<pos:position pos:line="39" pos:column="74"/></operator> <literal type="number" pos:line="39" pos:column="72">0<pos:position pos:line="39" pos:column="73"/></literal></expr>)<pos:position pos:line="39" pos:column="74"/></condition><then pos:line="39" pos:column="74">
			<block type="pseudo"><goto pos:line="40" pos:column="25">goto <name pos:line="40" pos:column="30">out<pos:position pos:line="40" pos:column="33"/></name>;<pos:position pos:line="40" pos:column="34"/></goto></block></then></if>
		<expr_stmt><expr><name pos:line="41" pos:column="17">time_odd<pos:position pos:line="41" pos:column="25"/></name> <operator pos:line="41" pos:column="26">=<pos:position pos:line="41" pos:column="27"/></operator> <call><name pos:line="41" pos:column="28">cdtime<pos:position pos:line="41" pos:column="34"/></name><argument_list pos:line="41" pos:column="34">()<pos:position pos:line="41" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="37"/></expr_stmt>
		<expr_stmt><expr><name pos:line="42" pos:column="17">is_even<pos:position pos:line="42" pos:column="24"/></name> <operator pos:line="42" pos:column="25">=<pos:position pos:line="42" pos:column="26"/></operator> <literal type="number" pos:line="42" pos:column="27">0<pos:position pos:line="42" pos:column="28"/></literal></expr>;<pos:position pos:line="42" pos:column="29"/></expr_stmt>
		<expr_stmt><expr><name pos:line="43" pos:column="17">time_delta<pos:position pos:line="43" pos:column="27"/></name> <operator pos:line="43" pos:column="28">=<pos:position pos:line="43" pos:column="29"/></operator> <name pos:line="43" pos:column="30">time_odd<pos:position pos:line="43" pos:column="38"/></name> <operator pos:line="43" pos:column="39">-<pos:position pos:line="43" pos:column="40"/></operator> <name pos:line="43" pos:column="41">time_even<pos:position pos:line="43" pos:column="50"/></name></expr>;<pos:position pos:line="43" pos:column="51"/></expr_stmt>
		<if pos:line="44" pos:column="17">if <condition pos:line="44" pos:column="20">(<expr><operator pos:line="44" pos:column="21">(<pos:position pos:line="44" pos:column="22"/></operator><name pos:line="44" pos:column="22">ret<pos:position pos:line="44" pos:column="25"/></name> <operator pos:line="44" pos:column="26">=<pos:position pos:line="44" pos:column="27"/></operator> <call><name pos:line="44" pos:column="28">for_all_cpus_delta<pos:position pos:line="44" pos:column="46"/></name><argument_list pos:line="44" pos:column="46">(<argument><expr><name pos:line="44" pos:column="47">ODD_COUNTERS<pos:position pos:line="44" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="61">EVEN_COUNTERS<pos:position pos:line="44" pos:column="74"/></name></expr></argument>)<pos:position pos:line="44" pos:column="75"/></argument_list></call><operator pos:line="44" pos:column="75">)<pos:position pos:line="44" pos:column="76"/></operator> <operator pos:line="44" pos:column="77">&lt;<pos:position pos:line="44" pos:column="81"/></operator> <literal type="number" pos:line="44" pos:column="79">0<pos:position pos:line="44" pos:column="80"/></literal></expr>)<pos:position pos:line="44" pos:column="81"/></condition><then pos:line="44" pos:column="81">
			<block type="pseudo"><goto pos:line="45" pos:column="25">goto <name pos:line="45" pos:column="30">out<pos:position pos:line="45" pos:column="33"/></name>;<pos:position pos:line="45" pos:column="34"/></goto></block></then></if>
		<if pos:line="46" pos:column="17">if <condition pos:line="46" pos:column="20">(<expr><operator pos:line="46" pos:column="21">(<pos:position pos:line="46" pos:column="22"/></operator><name pos:line="46" pos:column="22">ret<pos:position pos:line="46" pos:column="25"/></name> <operator pos:line="46" pos:column="26">=<pos:position pos:line="46" pos:column="27"/></operator> <call><name pos:line="46" pos:column="28">for_all_cpus<pos:position pos:line="46" pos:column="40"/></name><argument_list pos:line="46" pos:column="40">(<argument><expr><name pos:line="46" pos:column="41">submit_counters<pos:position pos:line="46" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="58">DELTA_COUNTERS<pos:position pos:line="46" pos:column="72"/></name></expr></argument>)<pos:position pos:line="46" pos:column="73"/></argument_list></call><operator pos:line="46" pos:column="73">)<pos:position pos:line="46" pos:column="74"/></operator> <operator pos:line="46" pos:column="75">&lt;<pos:position pos:line="46" pos:column="79"/></operator> <literal type="number" pos:line="46" pos:column="77">0<pos:position pos:line="46" pos:column="78"/></literal></expr>)<pos:position pos:line="46" pos:column="79"/></condition><then pos:line="46" pos:column="79">
			<block type="pseudo"><goto pos:line="47" pos:column="25">goto <name pos:line="47" pos:column="30">out<pos:position pos:line="47" pos:column="33"/></name>;<pos:position pos:line="47" pos:column="34"/></goto></block></then></if>
	}<pos:position pos:line="48" pos:column="10"/></block></then> <else pos:line="48" pos:column="11">else <block pos:line="48" pos:column="16">{
		<if pos:line="49" pos:column="17">if <condition pos:line="49" pos:column="20">(<expr><operator pos:line="49" pos:column="21">(<pos:position pos:line="49" pos:column="22"/></operator><name pos:line="49" pos:column="22">ret<pos:position pos:line="49" pos:column="25"/></name> <operator pos:line="49" pos:column="26">=<pos:position pos:line="49" pos:column="27"/></operator> <call><name pos:line="49" pos:column="28">for_all_cpus<pos:position pos:line="49" pos:column="40"/></name><argument_list pos:line="49" pos:column="40">(<argument><expr><name pos:line="49" pos:column="41">get_counters<pos:position pos:line="49" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="55">EVEN_COUNTERS<pos:position pos:line="49" pos:column="68"/></name></expr></argument>)<pos:position pos:line="49" pos:column="69"/></argument_list></call><operator pos:line="49" pos:column="69">)<pos:position pos:line="49" pos:column="70"/></operator> <operator pos:line="49" pos:column="71">&lt;<pos:position pos:line="49" pos:column="75"/></operator> <literal type="number" pos:line="49" pos:column="73">0<pos:position pos:line="49" pos:column="74"/></literal></expr>)<pos:position pos:line="49" pos:column="75"/></condition><then pos:line="49" pos:column="75">
			<block type="pseudo"><goto pos:line="50" pos:column="25">goto <name pos:line="50" pos:column="30">out<pos:position pos:line="50" pos:column="33"/></name>;<pos:position pos:line="50" pos:column="34"/></goto></block></then></if>
		<expr_stmt><expr><name pos:line="51" pos:column="17">time_even<pos:position pos:line="51" pos:column="26"/></name> <operator pos:line="51" pos:column="27">=<pos:position pos:line="51" pos:column="28"/></operator> <call><name pos:line="51" pos:column="29">cdtime<pos:position pos:line="51" pos:column="35"/></name><argument_list pos:line="51" pos:column="35">()<pos:position pos:line="51" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="38"/></expr_stmt>
		<expr_stmt><expr><name pos:line="52" pos:column="17">is_even<pos:position pos:line="52" pos:column="24"/></name> <operator pos:line="52" pos:column="25">=<pos:position pos:line="52" pos:column="26"/></operator> <literal type="number" pos:line="52" pos:column="27">1<pos:position pos:line="52" pos:column="28"/></literal></expr>;<pos:position pos:line="52" pos:column="29"/></expr_stmt>
		<expr_stmt><expr><name pos:line="53" pos:column="17">time_delta<pos:position pos:line="53" pos:column="27"/></name> <operator pos:line="53" pos:column="28">=<pos:position pos:line="53" pos:column="29"/></operator> <name pos:line="53" pos:column="30">time_even<pos:position pos:line="53" pos:column="39"/></name> <operator pos:line="53" pos:column="40">-<pos:position pos:line="53" pos:column="41"/></operator> <name pos:line="53" pos:column="42">time_odd<pos:position pos:line="53" pos:column="50"/></name></expr>;<pos:position pos:line="53" pos:column="51"/></expr_stmt>
		<if pos:line="54" pos:column="17">if <condition pos:line="54" pos:column="20">(<expr><operator pos:line="54" pos:column="21">(<pos:position pos:line="54" pos:column="22"/></operator><name pos:line="54" pos:column="22">ret<pos:position pos:line="54" pos:column="25"/></name> <operator pos:line="54" pos:column="26">=<pos:position pos:line="54" pos:column="27"/></operator> <call><name pos:line="54" pos:column="28">for_all_cpus_delta<pos:position pos:line="54" pos:column="46"/></name><argument_list pos:line="54" pos:column="46">(<argument><expr><name pos:line="54" pos:column="47">EVEN_COUNTERS<pos:position pos:line="54" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="62">ODD_COUNTERS<pos:position pos:line="54" pos:column="74"/></name></expr></argument>)<pos:position pos:line="54" pos:column="75"/></argument_list></call><operator pos:line="54" pos:column="75">)<pos:position pos:line="54" pos:column="76"/></operator> <operator pos:line="54" pos:column="77">&lt;<pos:position pos:line="54" pos:column="81"/></operator> <literal type="number" pos:line="54" pos:column="79">0<pos:position pos:line="54" pos:column="80"/></literal></expr>)<pos:position pos:line="54" pos:column="81"/></condition><then pos:line="54" pos:column="81">
			<block type="pseudo"><goto pos:line="55" pos:column="25">goto <name pos:line="55" pos:column="30">out<pos:position pos:line="55" pos:column="33"/></name>;<pos:position pos:line="55" pos:column="34"/></goto></block></then></if>
		<if pos:line="56" pos:column="17">if <condition pos:line="56" pos:column="20">(<expr><operator pos:line="56" pos:column="21">(<pos:position pos:line="56" pos:column="22"/></operator><name pos:line="56" pos:column="22">ret<pos:position pos:line="56" pos:column="25"/></name> <operator pos:line="56" pos:column="26">=<pos:position pos:line="56" pos:column="27"/></operator> <call><name pos:line="56" pos:column="28">for_all_cpus<pos:position pos:line="56" pos:column="40"/></name><argument_list pos:line="56" pos:column="40">(<argument><expr><name pos:line="56" pos:column="41">submit_counters<pos:position pos:line="56" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="56" pos:column="58">DELTA_COUNTERS<pos:position pos:line="56" pos:column="72"/></name></expr></argument>)<pos:position pos:line="56" pos:column="73"/></argument_list></call><operator pos:line="56" pos:column="73">)<pos:position pos:line="56" pos:column="74"/></operator> <operator pos:line="56" pos:column="75">&lt;<pos:position pos:line="56" pos:column="79"/></operator> <literal type="number" pos:line="56" pos:column="77">0<pos:position pos:line="56" pos:column="78"/></literal></expr>)<pos:position pos:line="56" pos:column="79"/></condition><then pos:line="56" pos:column="79">
			<block type="pseudo"><goto pos:line="57" pos:column="25">goto <name pos:line="57" pos:column="30">out<pos:position pos:line="57" pos:column="33"/></name>;<pos:position pos:line="57" pos:column="34"/></goto></block></then></if>
	}<pos:position pos:line="58" pos:column="10"/></block></else></if>
	<expr_stmt><expr><name pos:line="59" pos:column="9">ret<pos:position pos:line="59" pos:column="12"/></name> <operator pos:line="59" pos:column="13">=<pos:position pos:line="59" pos:column="14"/></operator> <literal type="number" pos:line="59" pos:column="15">0<pos:position pos:line="59" pos:column="16"/></literal></expr>;<pos:position pos:line="59" pos:column="17"/></expr_stmt>
<label><name pos:line="60" pos:column="1">out<pos:position pos:line="60" pos:column="4"/></name>:<pos:position pos:line="60" pos:column="5"/></label>
	<comment type="block" pos:line="61" pos:column="9">/*
	 * Let's restore the affinity
	 * This might fail if the number of CPU changed, but we can't do anything in that case..
	 */</comment>
	<expr_stmt><expr><operator pos:line="65" pos:column="9">(<pos:position pos:line="65" pos:column="10"/></operator><name pos:line="65" pos:column="10">void<pos:position pos:line="65" pos:column="14"/></name><operator pos:line="65" pos:column="14">)<pos:position pos:line="65" pos:column="15"/></operator><call><name pos:line="65" pos:column="15">sched_setaffinity<pos:position pos:line="65" pos:column="32"/></name><argument_list pos:line="65" pos:column="32">(<argument><expr><literal type="number" pos:line="65" pos:column="33">0<pos:position pos:line="65" pos:column="34"/></literal></expr></argument>, <argument><expr><name pos:line="65" pos:column="36">cpu_saved_affinity_setsize<pos:position pos:line="65" pos:column="62"/></name></expr></argument>, <argument><expr><name pos:line="65" pos:column="64">cpu_saved_affinity_set<pos:position pos:line="65" pos:column="86"/></name></expr></argument>)<pos:position pos:line="65" pos:column="87"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="88"/></expr_stmt>
	<return pos:line="66" pos:column="9">return <expr><name pos:line="66" pos:column="16">ret<pos:position pos:line="66" pos:column="19"/></name></expr>;<pos:position pos:line="66" pos:column="20"/></return>
}<pos:position pos:line="67" pos:column="2"/></block></function></unit>
