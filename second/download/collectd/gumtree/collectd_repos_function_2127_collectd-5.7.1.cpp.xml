<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_2127_collectd-5.7.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">cpy_init<pos:position pos:line="1" pos:column="20"/></name><parameter_list pos:line="1" pos:column="20">(<parameter><decl><type><name pos:line="1" pos:column="21">void<pos:position pos:line="1" pos:column="25"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="26"/></parameter_list> <block pos:line="1" pos:column="27">{
  <decl_stmt><decl><type><name pos:line="2" pos:column="3">PyObject<pos:position pos:line="2" pos:column="11"/></name> <modifier pos:line="2" pos:column="12">*<pos:position pos:line="2" pos:column="13"/></modifier></type><name pos:line="2" pos:column="13">ret<pos:position pos:line="2" pos:column="16"/></name></decl>;<pos:position pos:line="2" pos:column="17"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">int<pos:position pos:line="3" pos:column="6"/></name></type> <name><name pos:line="3" pos:column="7">pipefd<pos:position pos:line="3" pos:column="13"/></name><index pos:line="3" pos:column="13">[<expr><literal type="number" pos:line="3" pos:column="14">2<pos:position pos:line="3" pos:column="15"/></literal></expr>]<pos:position pos:line="3" pos:column="16"/></index></name></decl>;<pos:position pos:line="3" pos:column="17"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">char<pos:position pos:line="4" pos:column="7"/></name></type> <name pos:line="4" pos:column="8">buf<pos:position pos:line="4" pos:column="11"/></name></decl>;<pos:position pos:line="4" pos:column="12"/></decl_stmt>
  <decl_stmt><decl><specifier pos:line="5" pos:column="3">static<pos:position pos:line="5" pos:column="9"/></specifier> <type><name pos:line="5" pos:column="10">pthread_t<pos:position pos:line="5" pos:column="19"/></name></type> <name pos:line="5" pos:column="20">thread<pos:position pos:line="5" pos:column="26"/></name></decl>;<pos:position pos:line="5" pos:column="27"/></decl_stmt>

  <if pos:line="7" pos:column="3">if <condition pos:line="7" pos:column="6">(<expr><operator pos:line="7" pos:column="7">!<pos:position pos:line="7" pos:column="8"/></operator><call><name pos:line="7" pos:column="8">Py_IsInitialized<pos:position pos:line="7" pos:column="24"/></name><argument_list pos:line="7" pos:column="24">()<pos:position pos:line="7" pos:column="26"/></argument_list></call></expr>)<pos:position pos:line="7" pos:column="27"/></condition><then pos:line="7" pos:column="27"> <block pos:line="7" pos:column="28">{
    <expr_stmt><expr><call><name pos:line="8" pos:column="5">WARNING<pos:position pos:line="8" pos:column="12"/></name><argument_list pos:line="8" pos:column="12">(<argument><expr><literal type="string" pos:line="8" pos:column="13">"python: Plugin loaded but not configured."<pos:position pos:line="8" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="58"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="9" pos:column="5">plugin_unregister_shutdown<pos:position pos:line="9" pos:column="31"/></name><argument_list pos:line="9" pos:column="31">(<argument><expr><literal type="string" pos:line="9" pos:column="32">"python"<pos:position pos:line="9" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="42"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="10" pos:column="5">Py_Finalize<pos:position pos:line="10" pos:column="16"/></name><argument_list pos:line="10" pos:column="16">()<pos:position pos:line="10" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="19"/></expr_stmt>
    <return pos:line="11" pos:column="5">return <expr><literal type="number" pos:line="11" pos:column="12">0<pos:position pos:line="11" pos:column="13"/></literal></expr>;<pos:position pos:line="11" pos:column="14"/></return>
  }<pos:position pos:line="12" pos:column="4"/></block></then></if>
  <expr_stmt><expr><name pos:line="13" pos:column="3">main_thread<pos:position pos:line="13" pos:column="14"/></name> <operator pos:line="13" pos:column="15">=<pos:position pos:line="13" pos:column="16"/></operator> <call><name pos:line="13" pos:column="17">pthread_self<pos:position pos:line="13" pos:column="29"/></name><argument_list pos:line="13" pos:column="29">()<pos:position pos:line="13" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="32"/></expr_stmt>
  <if pos:line="14" pos:column="3">if <condition pos:line="14" pos:column="6">(<expr><name pos:line="14" pos:column="7">do_interactive<pos:position pos:line="14" pos:column="21"/></name></expr>)<pos:position pos:line="14" pos:column="22"/></condition><then pos:line="14" pos:column="22"> <block pos:line="14" pos:column="23">{
    <if pos:line="15" pos:column="5">if <condition pos:line="15" pos:column="8">(<expr><call><name pos:line="15" pos:column="9">pipe<pos:position pos:line="15" pos:column="13"/></name><argument_list pos:line="15" pos:column="13">(<argument><expr><name pos:line="15" pos:column="14">pipefd<pos:position pos:line="15" pos:column="20"/></name></expr></argument>)<pos:position pos:line="15" pos:column="21"/></argument_list></call></expr>)<pos:position pos:line="15" pos:column="22"/></condition><then pos:line="15" pos:column="22"> <block pos:line="15" pos:column="23">{
      <expr_stmt><expr><call><name pos:line="16" pos:column="7">ERROR<pos:position pos:line="16" pos:column="12"/></name><argument_list pos:line="16" pos:column="12">(<argument><expr><literal type="string" pos:line="16" pos:column="13">"python: Unable to create pipe."<pos:position pos:line="16" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="47"/></expr_stmt>
      <return pos:line="17" pos:column="7">return <expr><literal type="number" pos:line="17" pos:column="14">1<pos:position pos:line="17" pos:column="15"/></literal></expr>;<pos:position pos:line="17" pos:column="16"/></return>
    }<pos:position pos:line="18" pos:column="6"/></block></then></if>
    <if pos:line="19" pos:column="5">if <condition pos:line="19" pos:column="8">(<expr><call><name pos:line="19" pos:column="9">plugin_thread_create<pos:position pos:line="19" pos:column="29"/></name><argument_list pos:line="19" pos:column="29">(<argument><expr><operator pos:line="19" pos:column="30">&amp;<pos:position pos:line="19" pos:column="35"/></operator><name pos:line="19" pos:column="31">thread<pos:position pos:line="19" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="39">NULL<pos:position pos:line="19" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="45">cpy_interactive<pos:position pos:line="19" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="62">pipefd<pos:position pos:line="19" pos:column="68"/></name> <operator pos:line="19" pos:column="69">+<pos:position pos:line="19" pos:column="70"/></operator> <literal type="number" pos:line="19" pos:column="71">1<pos:position pos:line="19" pos:column="72"/></literal></expr></argument>,
                             <argument><expr><literal type="string" pos:line="20" pos:column="30">"python interpreter"<pos:position pos:line="20" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="51"/></argument_list></call></expr>)<pos:position pos:line="20" pos:column="52"/></condition><then pos:line="20" pos:column="52"> <block pos:line="20" pos:column="53">{
      <expr_stmt><expr><call><name pos:line="21" pos:column="7">ERROR<pos:position pos:line="21" pos:column="12"/></name><argument_list pos:line="21" pos:column="12">(<argument><expr><literal type="string" pos:line="21" pos:column="13">"python: Error creating thread for interactive interpreter."<pos:position pos:line="21" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="75"/></expr_stmt>
    }<pos:position pos:line="22" pos:column="6"/></block></then></if>
    <if pos:line="23" pos:column="5">if <condition pos:line="23" pos:column="8">(<expr><call><name pos:line="23" pos:column="9">read<pos:position pos:line="23" pos:column="13"/></name><argument_list pos:line="23" pos:column="13">(<argument><expr><name><name pos:line="23" pos:column="14">pipefd<pos:position pos:line="23" pos:column="20"/></name><index pos:line="23" pos:column="20">[<expr><literal type="number" pos:line="23" pos:column="21">0<pos:position pos:line="23" pos:column="22"/></literal></expr>]<pos:position pos:line="23" pos:column="23"/></index></name></expr></argument>, <argument><expr><operator pos:line="23" pos:column="25">&amp;<pos:position pos:line="23" pos:column="30"/></operator><name pos:line="23" pos:column="26">buf<pos:position pos:line="23" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="23" pos:column="31">1<pos:position pos:line="23" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="23" pos:column="34"/></condition><then pos:line="23" pos:column="34">
      <block type="pseudo"><empty_stmt pos:line="24" pos:column="7">;<pos:position pos:line="24" pos:column="8"/></empty_stmt></block></then></if>
    <expr_stmt><expr><operator pos:line="25" pos:column="5">(<pos:position pos:line="25" pos:column="6"/></operator><name pos:line="25" pos:column="6">void<pos:position pos:line="25" pos:column="10"/></name><operator pos:line="25" pos:column="10">)<pos:position pos:line="25" pos:column="11"/></operator><call><name pos:line="25" pos:column="11">close<pos:position pos:line="25" pos:column="16"/></name><argument_list pos:line="25" pos:column="16">(<argument><expr><name><name pos:line="25" pos:column="17">pipefd<pos:position pos:line="25" pos:column="23"/></name><index pos:line="25" pos:column="23">[<expr><literal type="number" pos:line="25" pos:column="24">0<pos:position pos:line="25" pos:column="25"/></literal></expr>]<pos:position pos:line="25" pos:column="26"/></index></name></expr></argument>)<pos:position pos:line="25" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="28"/></expr_stmt>
  }<pos:position pos:line="26" pos:column="4"/></block></then> <else pos:line="26" pos:column="5">else <block pos:line="26" pos:column="10">{
    <expr_stmt><expr><call><name pos:line="27" pos:column="5">PyEval_InitThreads<pos:position pos:line="27" pos:column="23"/></name><argument_list pos:line="27" pos:column="23">()<pos:position pos:line="27" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><name pos:line="28" pos:column="5">state<pos:position pos:line="28" pos:column="10"/></name> <operator pos:line="28" pos:column="11">=<pos:position pos:line="28" pos:column="12"/></operator> <call><name pos:line="28" pos:column="13">PyEval_SaveThread<pos:position pos:line="28" pos:column="30"/></name><argument_list pos:line="28" pos:column="30">()<pos:position pos:line="28" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="33"/></expr_stmt>
  }<pos:position pos:line="29" pos:column="4"/></block></else></if>
  <macro><name pos:line="30" pos:column="3">CPY_LOCK_THREADS<pos:position pos:line="30" pos:column="19"/></name></macro>
  <for pos:line="31" pos:column="3">for <control pos:line="31" pos:column="7">(<init><decl><type><name pos:line="31" pos:column="8">cpy_callback_t<pos:position pos:line="31" pos:column="22"/></name> <modifier pos:line="31" pos:column="23">*<pos:position pos:line="31" pos:column="24"/></modifier></type><name pos:line="31" pos:column="24">c<pos:position pos:line="31" pos:column="25"/></name> <init pos:line="31" pos:column="26">= <expr><name pos:line="31" pos:column="28">cpy_init_callbacks<pos:position pos:line="31" pos:column="46"/></name></expr></init></decl>;<pos:position pos:line="31" pos:column="47"/></init> <condition><expr><name pos:line="31" pos:column="48">c<pos:position pos:line="31" pos:column="49"/></name></expr>;<pos:position pos:line="31" pos:column="50"/></condition> <incr><expr><name pos:line="31" pos:column="51">c<pos:position pos:line="31" pos:column="52"/></name> <operator pos:line="31" pos:column="53">=<pos:position pos:line="31" pos:column="54"/></operator> <name><name pos:line="31" pos:column="55">c<pos:position pos:line="31" pos:column="56"/></name><operator pos:line="31" pos:column="56">-&gt;<pos:position pos:line="31" pos:column="61"/></operator><name pos:line="31" pos:column="58">next<pos:position pos:line="31" pos:column="62"/></name></name></expr></incr>)<pos:position pos:line="31" pos:column="63"/></control> <block pos:line="31" pos:column="64">{
    <expr_stmt><expr><name pos:line="32" pos:column="5">ret<pos:position pos:line="32" pos:column="8"/></name> <operator pos:line="32" pos:column="9">=<pos:position pos:line="32" pos:column="10"/></operator> <call><name pos:line="32" pos:column="11">PyObject_CallFunctionObjArgs<pos:position pos:line="32" pos:column="39"/></name><argument_list pos:line="32" pos:column="39">(<argument><expr><name><name pos:line="32" pos:column="40">c<pos:position pos:line="32" pos:column="41"/></name><operator pos:line="32" pos:column="41">-&gt;<pos:position pos:line="32" pos:column="46"/></operator><name pos:line="32" pos:column="43">callback<pos:position pos:line="32" pos:column="51"/></name></name></expr></argument>, <argument><expr><name><name pos:line="32" pos:column="53">c<pos:position pos:line="32" pos:column="54"/></name><operator pos:line="32" pos:column="54">-&gt;<pos:position pos:line="32" pos:column="59"/></operator><name pos:line="32" pos:column="56">data<pos:position pos:line="32" pos:column="60"/></name></name></expr></argument>,
                                       <argument><expr><operator pos:line="33" pos:column="40">(<pos:position pos:line="33" pos:column="41"/></operator><name pos:line="33" pos:column="41">void<pos:position pos:line="33" pos:column="45"/></name> <operator pos:line="33" pos:column="46">*<pos:position pos:line="33" pos:column="47"/></operator><operator pos:line="33" pos:column="47">)<pos:position pos:line="33" pos:column="48"/></operator><literal type="number" pos:line="33" pos:column="48">0<pos:position pos:line="33" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="51"/></expr_stmt> <comment type="block" pos:line="33" pos:column="52">/* New reference. */</comment>
    <if pos:line="34" pos:column="5">if <condition pos:line="34" pos:column="8">(<expr><name pos:line="34" pos:column="9">ret<pos:position pos:line="34" pos:column="12"/></name> <operator pos:line="34" pos:column="13">==<pos:position pos:line="34" pos:column="15"/></operator> <name pos:line="34" pos:column="16">NULL<pos:position pos:line="34" pos:column="20"/></name></expr>)<pos:position pos:line="34" pos:column="21"/></condition><then pos:line="34" pos:column="21">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="35" pos:column="7">cpy_log_exception<pos:position pos:line="35" pos:column="24"/></name><argument_list pos:line="35" pos:column="24">(<argument><expr><literal type="string" pos:line="35" pos:column="25">"init callback"<pos:position pos:line="35" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="35" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="42"/></expr_stmt></block></then>
    <else pos:line="36" pos:column="5">else
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="37" pos:column="7">Py_DECREF<pos:position pos:line="37" pos:column="16"/></name><argument_list pos:line="37" pos:column="16">(<argument><expr><name pos:line="37" pos:column="17">ret<pos:position pos:line="37" pos:column="20"/></name></expr></argument>)<pos:position pos:line="37" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="22"/></expr_stmt></block></else></if>
  }<pos:position pos:line="38" pos:column="4"/></block></for>
  <macro><name pos:line="39" pos:column="3">CPY_RELEASE_THREADS<pos:position pos:line="39" pos:column="22"/></name></macro>

  <return pos:line="41" pos:column="3">return <expr><literal type="number" pos:line="41" pos:column="10">0<pos:position pos:line="41" pos:column="11"/></literal></expr>;<pos:position pos:line="41" pos:column="12"/></return>
}<pos:position pos:line="42" pos:column="2"/></block></function></unit>
