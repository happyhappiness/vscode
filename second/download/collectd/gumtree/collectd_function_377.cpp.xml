<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_function_377.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">irq_config<pos:position pos:line="1" pos:column="22"/></name> <parameter_list pos:line="1" pos:column="23">(<parameter><decl><type><specifier pos:line="1" pos:column="24">const<pos:position pos:line="1" pos:column="29"/></specifier> <name pos:line="1" pos:column="30">char<pos:position pos:line="1" pos:column="34"/></name> <modifier pos:line="1" pos:column="35">*<pos:position pos:line="1" pos:column="36"/></modifier></type><name pos:line="1" pos:column="36">key<pos:position pos:line="1" pos:column="39"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="41">const<pos:position pos:line="1" pos:column="46"/></specifier> <name pos:line="1" pos:column="47">char<pos:position pos:line="1" pos:column="51"/></name> <modifier pos:line="1" pos:column="52">*<pos:position pos:line="1" pos:column="53"/></modifier></type><name pos:line="1" pos:column="53">value<pos:position pos:line="1" pos:column="58"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="59"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<if pos:line="3" pos:column="9">if <condition pos:line="3" pos:column="12">(<expr><call><name pos:line="3" pos:column="13">strcasecmp<pos:position pos:line="3" pos:column="23"/></name> <argument_list pos:line="3" pos:column="24">(<argument><expr><name pos:line="3" pos:column="25">key<pos:position pos:line="3" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="3" pos:column="30">"Irq"<pos:position pos:line="3" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="3" pos:column="36"/></argument_list></call> <operator pos:line="3" pos:column="37">==<pos:position pos:line="3" pos:column="39"/></operator> <literal type="number" pos:line="3" pos:column="40">0<pos:position pos:line="3" pos:column="41"/></literal></expr>)<pos:position pos:line="3" pos:column="42"/></condition><then pos:line="3" pos:column="42">
	<block pos:line="4" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="5" pos:column="17">char<pos:position pos:line="5" pos:column="21"/></name> <modifier pos:line="5" pos:column="22">*<pos:position pos:line="5" pos:column="23"/></modifier><modifier pos:line="5" pos:column="23">*<pos:position pos:line="5" pos:column="24"/></modifier></type><name pos:line="5" pos:column="24">temp<pos:position pos:line="5" pos:column="28"/></name></decl>;<pos:position pos:line="5" pos:column="29"/></decl_stmt>

		<expr_stmt><expr><name pos:line="7" pos:column="17">temp<pos:position pos:line="7" pos:column="21"/></name> <operator pos:line="7" pos:column="22">=<pos:position pos:line="7" pos:column="23"/></operator> <call><name pos:line="7" pos:column="24">realloc<pos:position pos:line="7" pos:column="31"/></name> <argument_list pos:line="7" pos:column="32">(<argument><expr><name pos:line="7" pos:column="33">irq_list<pos:position pos:line="7" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="7" pos:column="43">(<pos:position pos:line="7" pos:column="44"/></operator><name pos:line="7" pos:column="44">irq_list_num<pos:position pos:line="7" pos:column="56"/></name> <operator pos:line="7" pos:column="57">+<pos:position pos:line="7" pos:column="58"/></operator> <literal type="number" pos:line="7" pos:column="59">1<pos:position pos:line="7" pos:column="60"/></literal><operator pos:line="7" pos:column="60">)<pos:position pos:line="7" pos:column="61"/></operator> <operator pos:line="7" pos:column="62">*<pos:position pos:line="7" pos:column="63"/></operator> <sizeof pos:line="7" pos:column="64">sizeof <argument_list pos:line="7" pos:column="71">(<argument><expr><operator pos:line="7" pos:column="72">*<pos:position pos:line="7" pos:column="73"/></operator><name pos:line="7" pos:column="73">irq_list<pos:position pos:line="7" pos:column="81"/></name></expr></argument>)<pos:position pos:line="7" pos:column="82"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="7" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="84"/></expr_stmt>
		<if pos:line="8" pos:column="17">if <condition pos:line="8" pos:column="20">(<expr><name pos:line="8" pos:column="21">temp<pos:position pos:line="8" pos:column="25"/></name> <operator pos:line="8" pos:column="26">==<pos:position pos:line="8" pos:column="28"/></operator> <name pos:line="8" pos:column="29">NULL<pos:position pos:line="8" pos:column="33"/></name></expr>)<pos:position pos:line="8" pos:column="34"/></condition><then pos:line="8" pos:column="34">
		<block pos:line="9" pos:column="17">{
			<expr_stmt><expr><call><name pos:line="10" pos:column="25">fprintf<pos:position pos:line="10" pos:column="32"/></name> <argument_list pos:line="10" pos:column="33">(<argument><expr><name pos:line="10" pos:column="34">stderr<pos:position pos:line="10" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="10" pos:column="42">"irq plugin: Cannot allocate more memory.\n"<pos:position pos:line="10" pos:column="86"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="87"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="88"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="11" pos:column="25">ERROR<pos:position pos:line="11" pos:column="30"/></name> <argument_list pos:line="11" pos:column="31">(<argument><expr><literal type="string" pos:line="11" pos:column="32">"irq plugin: Cannot allocate more memory."<pos:position pos:line="11" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="76"/></expr_stmt>
			<return pos:line="12" pos:column="25">return <expr><operator pos:line="12" pos:column="32">(<pos:position pos:line="12" pos:column="33"/></operator><literal type="number" pos:line="12" pos:column="33">1<pos:position pos:line="12" pos:column="34"/></literal><operator pos:line="12" pos:column="34">)<pos:position pos:line="12" pos:column="35"/></operator></expr>;<pos:position pos:line="12" pos:column="36"/></return>
		}<pos:position pos:line="13" pos:column="18"/></block></then></if>
		<expr_stmt><expr><name pos:line="14" pos:column="17">irq_list<pos:position pos:line="14" pos:column="25"/></name> <operator pos:line="14" pos:column="26">=<pos:position pos:line="14" pos:column="27"/></operator> <name pos:line="14" pos:column="28">temp<pos:position pos:line="14" pos:column="32"/></name></expr>;<pos:position pos:line="14" pos:column="33"/></expr_stmt>

		<expr_stmt><expr><name><name pos:line="16" pos:column="17">irq_list<pos:position pos:line="16" pos:column="25"/></name><index pos:line="16" pos:column="25">[<expr><name pos:line="16" pos:column="26">irq_list_num<pos:position pos:line="16" pos:column="38"/></name></expr>]<pos:position pos:line="16" pos:column="39"/></index></name> <operator pos:line="16" pos:column="40">=<pos:position pos:line="16" pos:column="41"/></operator> <call><name pos:line="16" pos:column="42">strdup<pos:position pos:line="16" pos:column="48"/></name> <argument_list pos:line="16" pos:column="49">(<argument><expr><name pos:line="16" pos:column="50">value<pos:position pos:line="16" pos:column="55"/></name></expr></argument>)<pos:position pos:line="16" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="57"/></expr_stmt>
		<if pos:line="17" pos:column="17">if <condition pos:line="17" pos:column="20">(<expr><name><name pos:line="17" pos:column="21">irq_list<pos:position pos:line="17" pos:column="29"/></name><index pos:line="17" pos:column="29">[<expr><name pos:line="17" pos:column="30">irq_list_num<pos:position pos:line="17" pos:column="42"/></name></expr>]<pos:position pos:line="17" pos:column="43"/></index></name> <operator pos:line="17" pos:column="44">==<pos:position pos:line="17" pos:column="46"/></operator> <name pos:line="17" pos:column="47">NULL<pos:position pos:line="17" pos:column="51"/></name></expr>)<pos:position pos:line="17" pos:column="52"/></condition><then pos:line="17" pos:column="52">
		<block pos:line="18" pos:column="17">{
			<expr_stmt><expr><call><name pos:line="19" pos:column="25">ERROR<pos:position pos:line="19" pos:column="30"/></name> <argument_list pos:line="19" pos:column="31">(<argument><expr><literal type="string" pos:line="19" pos:column="32">"irq plugin: strdup(3) failed."<pos:position pos:line="19" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="65"/></expr_stmt>
			<return pos:line="20" pos:column="25">return <expr><operator pos:line="20" pos:column="32">(<pos:position pos:line="20" pos:column="33"/></operator><literal type="number" pos:line="20" pos:column="33">1<pos:position pos:line="20" pos:column="34"/></literal><operator pos:line="20" pos:column="34">)<pos:position pos:line="20" pos:column="35"/></operator></expr>;<pos:position pos:line="20" pos:column="36"/></return>
		}<pos:position pos:line="21" pos:column="18"/></block></then></if>

		<expr_stmt><expr><name pos:line="23" pos:column="17">irq_list_num<pos:position pos:line="23" pos:column="29"/></name><operator pos:line="23" pos:column="29">++<pos:position pos:line="23" pos:column="31"/></operator></expr>;<pos:position pos:line="23" pos:column="32"/></expr_stmt>
	}<pos:position pos:line="24" pos:column="10"/></block></then>
	<elseif pos:line="25" pos:column="9">else <if pos:line="25" pos:column="14">if <condition pos:line="25" pos:column="17">(<expr><call><name pos:line="25" pos:column="18">strcasecmp<pos:position pos:line="25" pos:column="28"/></name> <argument_list pos:line="25" pos:column="29">(<argument><expr><name pos:line="25" pos:column="30">key<pos:position pos:line="25" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="25" pos:column="35">"IgnoreSelected"<pos:position pos:line="25" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="52"/></argument_list></call> <operator pos:line="25" pos:column="53">==<pos:position pos:line="25" pos:column="55"/></operator> <literal type="number" pos:line="25" pos:column="56">0<pos:position pos:line="25" pos:column="57"/></literal></expr>)<pos:position pos:line="25" pos:column="58"/></condition><then pos:line="25" pos:column="58">
	<block pos:line="26" pos:column="9">{
		<if pos:line="27" pos:column="17">if <condition pos:line="27" pos:column="20">(<expr><call><name pos:line="27" pos:column="21">IS_TRUE<pos:position pos:line="27" pos:column="28"/></name> <argument_list pos:line="27" pos:column="29">(<argument><expr><name pos:line="27" pos:column="30">value<pos:position pos:line="27" pos:column="35"/></name></expr></argument>)<pos:position pos:line="27" pos:column="36"/></argument_list></call></expr>)<pos:position pos:line="27" pos:column="37"/></condition><then pos:line="27" pos:column="37">
			<block type="pseudo"><expr_stmt><expr><name pos:line="28" pos:column="25">irq_list_action<pos:position pos:line="28" pos:column="40"/></name> <operator pos:line="28" pos:column="41">=<pos:position pos:line="28" pos:column="42"/></operator> <literal type="number" pos:line="28" pos:column="43">1<pos:position pos:line="28" pos:column="44"/></literal></expr>;<pos:position pos:line="28" pos:column="45"/></expr_stmt></block></then>
		<else pos:line="29" pos:column="17">else
			<block type="pseudo"><expr_stmt><expr><name pos:line="30" pos:column="25">irq_list_action<pos:position pos:line="30" pos:column="40"/></name> <operator pos:line="30" pos:column="41">=<pos:position pos:line="30" pos:column="42"/></operator> <literal type="number" pos:line="30" pos:column="43">0<pos:position pos:line="30" pos:column="44"/></literal></expr>;<pos:position pos:line="30" pos:column="45"/></expr_stmt></block></else></if>
	}<pos:position pos:line="31" pos:column="10"/></block></then></if></elseif>
	<else pos:line="32" pos:column="9">else
	<block pos:line="33" pos:column="9">{
		<return pos:line="34" pos:column="17">return <expr><operator pos:line="34" pos:column="24">(<pos:position pos:line="34" pos:column="25"/></operator><operator pos:line="34" pos:column="25">-<pos:position pos:line="34" pos:column="26"/></operator><literal type="number" pos:line="34" pos:column="26">1<pos:position pos:line="34" pos:column="27"/></literal><operator pos:line="34" pos:column="27">)<pos:position pos:line="34" pos:column="28"/></operator></expr>;<pos:position pos:line="34" pos:column="29"/></return>
	}<pos:position pos:line="35" pos:column="10"/></block></else></if>
	<return pos:line="36" pos:column="9">return <expr><operator pos:line="36" pos:column="16">(<pos:position pos:line="36" pos:column="17"/></operator><literal type="number" pos:line="36" pos:column="17">0<pos:position pos:line="36" pos:column="18"/></literal><operator pos:line="36" pos:column="18">)<pos:position pos:line="36" pos:column="19"/></operator></expr>;<pos:position pos:line="36" pos:column="20"/></return>
}<pos:position pos:line="37" pos:column="2"/></block></function></unit>
