<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_2386_collectd-5.6.3.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">escape_slashes<pos:position pos:line="1" pos:column="19"/></name><parameter_list pos:line="1" pos:column="19">(<parameter><decl><type><name pos:line="1" pos:column="20">char<pos:position pos:line="1" pos:column="24"/></name> <modifier pos:line="1" pos:column="25">*<pos:position pos:line="1" pos:column="26"/></modifier></type><name pos:line="1" pos:column="26">buffer<pos:position pos:line="1" pos:column="32"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="34">size_t<pos:position pos:line="1" pos:column="40"/></name></type> <name pos:line="1" pos:column="41">buffer_size<pos:position pos:line="1" pos:column="52"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="53"/></parameter_list> <block pos:line="1" pos:column="54">{
  <decl_stmt><decl><type><name pos:line="2" pos:column="3">size_t<pos:position pos:line="2" pos:column="9"/></name></type> <name pos:line="2" pos:column="10">buffer_len<pos:position pos:line="2" pos:column="20"/></name></decl>;<pos:position pos:line="2" pos:column="21"/></decl_stmt>

  <expr_stmt><expr><name pos:line="4" pos:column="3">buffer_len<pos:position pos:line="4" pos:column="13"/></name> <operator pos:line="4" pos:column="14">=<pos:position pos:line="4" pos:column="15"/></operator> <call><name pos:line="4" pos:column="16">strlen<pos:position pos:line="4" pos:column="22"/></name><argument_list pos:line="4" pos:column="22">(<argument><expr><name pos:line="4" pos:column="23">buffer<pos:position pos:line="4" pos:column="29"/></name></expr></argument>)<pos:position pos:line="4" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="31"/></expr_stmt>

  <if pos:line="6" pos:column="3">if <condition pos:line="6" pos:column="6">(<expr><name pos:line="6" pos:column="7">buffer_len<pos:position pos:line="6" pos:column="17"/></name> <operator pos:line="6" pos:column="18">&lt;=<pos:position pos:line="6" pos:column="23"/></operator> <literal type="number" pos:line="6" pos:column="21">1<pos:position pos:line="6" pos:column="22"/></literal></expr>)<pos:position pos:line="6" pos:column="23"/></condition><then pos:line="6" pos:column="23"> <block pos:line="6" pos:column="24">{
    <if pos:line="7" pos:column="5">if <condition pos:line="7" pos:column="8">(<expr><call><name pos:line="7" pos:column="9">strcmp<pos:position pos:line="7" pos:column="15"/></name><argument_list pos:line="7" pos:column="15">(<argument><expr><literal type="string" pos:line="7" pos:column="16">"/"<pos:position pos:line="7" pos:column="19"/></literal></expr></argument>, <argument><expr><name pos:line="7" pos:column="21">buffer<pos:position pos:line="7" pos:column="27"/></name></expr></argument>)<pos:position pos:line="7" pos:column="28"/></argument_list></call> <operator pos:line="7" pos:column="29">==<pos:position pos:line="7" pos:column="31"/></operator> <literal type="number" pos:line="7" pos:column="32">0<pos:position pos:line="7" pos:column="33"/></literal></expr>)<pos:position pos:line="7" pos:column="34"/></condition><then pos:line="7" pos:column="34"> <block pos:line="7" pos:column="35">{
      <if pos:line="8" pos:column="7">if <condition pos:line="8" pos:column="10">(<expr><name pos:line="8" pos:column="11">buffer_size<pos:position pos:line="8" pos:column="22"/></name> <operator pos:line="8" pos:column="23">&lt;<pos:position pos:line="8" pos:column="27"/></operator> <literal type="number" pos:line="8" pos:column="25">5<pos:position pos:line="8" pos:column="26"/></literal></expr>)<pos:position pos:line="8" pos:column="27"/></condition><then pos:line="8" pos:column="27">
        <block type="pseudo"><return pos:line="9" pos:column="9">return <expr><operator pos:line="9" pos:column="16">(<pos:position pos:line="9" pos:column="17"/></operator><operator pos:line="9" pos:column="17">-<pos:position pos:line="9" pos:column="18"/></operator><literal type="number" pos:line="9" pos:column="18">1<pos:position pos:line="9" pos:column="19"/></literal><operator pos:line="9" pos:column="19">)<pos:position pos:line="9" pos:column="20"/></operator></expr>;<pos:position pos:line="9" pos:column="21"/></return></block></then></if>
      <expr_stmt><expr><call><name pos:line="10" pos:column="7">sstrncpy<pos:position pos:line="10" pos:column="15"/></name><argument_list pos:line="10" pos:column="15">(<argument><expr><name pos:line="10" pos:column="16">buffer<pos:position pos:line="10" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="10" pos:column="24">"root"<pos:position pos:line="10" pos:column="30"/></literal></expr></argument>, <argument><expr><name pos:line="10" pos:column="32">buffer_size<pos:position pos:line="10" pos:column="43"/></name></expr></argument>)<pos:position pos:line="10" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="45"/></expr_stmt>
    }<pos:position pos:line="11" pos:column="6"/></block></then></if>
    <return pos:line="12" pos:column="5">return <expr><operator pos:line="12" pos:column="12">(<pos:position pos:line="12" pos:column="13"/></operator><literal type="number" pos:line="12" pos:column="13">0<pos:position pos:line="12" pos:column="14"/></literal><operator pos:line="12" pos:column="14">)<pos:position pos:line="12" pos:column="15"/></operator></expr>;<pos:position pos:line="12" pos:column="16"/></return>
  }<pos:position pos:line="13" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="15" pos:column="3">/* Move one to the left */</comment>
  <if pos:line="16" pos:column="3">if <condition pos:line="16" pos:column="6">(<expr><name><name pos:line="16" pos:column="7">buffer<pos:position pos:line="16" pos:column="13"/></name><index pos:line="16" pos:column="13">[<expr><literal type="number" pos:line="16" pos:column="14">0<pos:position pos:line="16" pos:column="15"/></literal></expr>]<pos:position pos:line="16" pos:column="16"/></index></name> <operator pos:line="16" pos:column="17">==<pos:position pos:line="16" pos:column="19"/></operator> <literal type="char" pos:line="16" pos:column="20">'/'<pos:position pos:line="16" pos:column="23"/></literal></expr>)<pos:position pos:line="16" pos:column="24"/></condition><then pos:line="16" pos:column="24"> <block pos:line="16" pos:column="25">{
    <expr_stmt><expr><call><name pos:line="17" pos:column="5">memmove<pos:position pos:line="17" pos:column="12"/></name><argument_list pos:line="17" pos:column="12">(<argument><expr><name pos:line="17" pos:column="13">buffer<pos:position pos:line="17" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="21">buffer<pos:position pos:line="17" pos:column="27"/></name> <operator pos:line="17" pos:column="28">+<pos:position pos:line="17" pos:column="29"/></operator> <literal type="number" pos:line="17" pos:column="30">1<pos:position pos:line="17" pos:column="31"/></literal></expr></argument>, <argument><expr><name pos:line="17" pos:column="33">buffer_len<pos:position pos:line="17" pos:column="43"/></name></expr></argument>)<pos:position pos:line="17" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="45"/></expr_stmt>
    <expr_stmt><expr><name pos:line="18" pos:column="5">buffer_len<pos:position pos:line="18" pos:column="15"/></name><operator pos:line="18" pos:column="15">--<pos:position pos:line="18" pos:column="17"/></operator></expr>;<pos:position pos:line="18" pos:column="18"/></expr_stmt>
  }<pos:position pos:line="19" pos:column="4"/></block></then></if>

  <for pos:line="21" pos:column="3">for <control pos:line="21" pos:column="7">(<init><decl><type><name pos:line="21" pos:column="8">size_t<pos:position pos:line="21" pos:column="14"/></name></type> <name pos:line="21" pos:column="15">i<pos:position pos:line="21" pos:column="16"/></name> <init pos:line="21" pos:column="17">= <expr><literal type="number" pos:line="21" pos:column="19">0<pos:position pos:line="21" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="21" pos:column="21"/></init> <condition><expr><name pos:line="21" pos:column="22">i<pos:position pos:line="21" pos:column="23"/></name> <operator pos:line="21" pos:column="24">&lt;<pos:position pos:line="21" pos:column="28"/></operator> <name pos:line="21" pos:column="26">buffer_len<pos:position pos:line="21" pos:column="36"/></name></expr>;<pos:position pos:line="21" pos:column="37"/></condition> <incr><expr><name pos:line="21" pos:column="38">i<pos:position pos:line="21" pos:column="39"/></name><operator pos:line="21" pos:column="39">++<pos:position pos:line="21" pos:column="41"/></operator></expr></incr>)<pos:position pos:line="21" pos:column="42"/></control> <block pos:line="21" pos:column="43">{
    <if pos:line="22" pos:column="5">if <condition pos:line="22" pos:column="8">(<expr><name><name pos:line="22" pos:column="9">buffer<pos:position pos:line="22" pos:column="15"/></name><index pos:line="22" pos:column="15">[<expr><name pos:line="22" pos:column="16">i<pos:position pos:line="22" pos:column="17"/></name></expr>]<pos:position pos:line="22" pos:column="18"/></index></name> <operator pos:line="22" pos:column="19">==<pos:position pos:line="22" pos:column="21"/></operator> <literal type="char" pos:line="22" pos:column="22">'/'<pos:position pos:line="22" pos:column="25"/></literal></expr>)<pos:position pos:line="22" pos:column="26"/></condition><then pos:line="22" pos:column="26">
      <block type="pseudo"><expr_stmt><expr><name><name pos:line="23" pos:column="7">buffer<pos:position pos:line="23" pos:column="13"/></name><index pos:line="23" pos:column="13">[<expr><name pos:line="23" pos:column="14">i<pos:position pos:line="23" pos:column="15"/></name></expr>]<pos:position pos:line="23" pos:column="16"/></index></name> <operator pos:line="23" pos:column="17">=<pos:position pos:line="23" pos:column="18"/></operator> <literal type="char" pos:line="23" pos:column="19">'_'<pos:position pos:line="23" pos:column="22"/></literal></expr>;<pos:position pos:line="23" pos:column="23"/></expr_stmt></block></then></if>
  }<pos:position pos:line="24" pos:column="4"/></block></for>

  <return pos:line="26" pos:column="3">return <expr><operator pos:line="26" pos:column="10">(<pos:position pos:line="26" pos:column="11"/></operator><literal type="number" pos:line="26" pos:column="11">0<pos:position pos:line="26" pos:column="12"/></literal><operator pos:line="26" pos:column="12">)<pos:position pos:line="26" pos:column="13"/></operator></expr>;<pos:position pos:line="26" pos:column="14"/></return>
}<pos:position pos:line="27" pos:column="2"/></block></function></unit>
