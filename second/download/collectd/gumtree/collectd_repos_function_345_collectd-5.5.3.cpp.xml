<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_345_collectd-5.5.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">camqp_shutdown<pos:position pos:line="1" pos:column="26"/></name> <parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><name pos:line="1" pos:column="28">void<pos:position pos:line="1" pos:column="32"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="33"/></parameter_list> <comment type="block" pos:line="1" pos:column="34">/* {{{ */</comment>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">size_t<pos:position pos:line="3" pos:column="11"/></name></type> <name pos:line="3" pos:column="12">i<pos:position pos:line="3" pos:column="13"/></name></decl>;<pos:position pos:line="3" pos:column="14"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="5" pos:column="5">DEBUG<pos:position pos:line="5" pos:column="10"/></name> <argument_list pos:line="5" pos:column="11">(<argument><expr><literal type="string" pos:line="5" pos:column="12">"amqp plugin: Shutting down %zu subscriber threads."<pos:position pos:line="5" pos:column="64"/></literal></expr></argument>,
            <argument><expr><name pos:line="6" pos:column="13">subscriber_threads_num<pos:position pos:line="6" pos:column="35"/></name></expr></argument>)<pos:position pos:line="6" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="37"/></expr_stmt>

    <expr_stmt><expr><name pos:line="8" pos:column="5">subscriber_threads_running<pos:position pos:line="8" pos:column="31"/></name> <operator pos:line="8" pos:column="32">=<pos:position pos:line="8" pos:column="33"/></operator> <literal type="number" pos:line="8" pos:column="34">0<pos:position pos:line="8" pos:column="35"/></literal></expr>;<pos:position pos:line="8" pos:column="36"/></expr_stmt>
    <for pos:line="9" pos:column="5">for <control pos:line="9" pos:column="9">(<init><expr><name pos:line="9" pos:column="10">i<pos:position pos:line="9" pos:column="11"/></name> <operator pos:line="9" pos:column="12">=<pos:position pos:line="9" pos:column="13"/></operator> <literal type="number" pos:line="9" pos:column="14">0<pos:position pos:line="9" pos:column="15"/></literal></expr>;<pos:position pos:line="9" pos:column="16"/></init> <condition><expr><name pos:line="9" pos:column="17">i<pos:position pos:line="9" pos:column="18"/></name> <operator pos:line="9" pos:column="19">&lt;<pos:position pos:line="9" pos:column="23"/></operator> <name pos:line="9" pos:column="21">subscriber_threads_num<pos:position pos:line="9" pos:column="43"/></name></expr>;<pos:position pos:line="9" pos:column="44"/></condition> <incr><expr><name pos:line="9" pos:column="45">i<pos:position pos:line="9" pos:column="46"/></name><operator pos:line="9" pos:column="46">++<pos:position pos:line="9" pos:column="48"/></operator></expr></incr>)<pos:position pos:line="9" pos:column="49"/></control>
    <block pos:line="10" pos:column="5">{
        <comment type="block" pos:line="11" pos:column="9">/* FIXME: Sending a signal is not very elegant here. Maybe find out how
         * to use a timeout in the thread and check for the variable in regular
         * intervals. */</comment>
        <expr_stmt><expr><call><name pos:line="14" pos:column="9">pthread_kill<pos:position pos:line="14" pos:column="21"/></name> <argument_list pos:line="14" pos:column="22">(<argument><expr><name><name pos:line="14" pos:column="23">subscriber_threads<pos:position pos:line="14" pos:column="41"/></name><index pos:line="14" pos:column="41">[<expr><name pos:line="14" pos:column="42">i<pos:position pos:line="14" pos:column="43"/></name></expr>]<pos:position pos:line="14" pos:column="44"/></index></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="46">SIGTERM<pos:position pos:line="14" pos:column="53"/></name></expr></argument>)<pos:position pos:line="14" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="55"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="15" pos:column="9">pthread_join<pos:position pos:line="15" pos:column="21"/></name> <argument_list pos:line="15" pos:column="22">(<argument><expr><name><name pos:line="15" pos:column="23">subscriber_threads<pos:position pos:line="15" pos:column="41"/></name><index pos:line="15" pos:column="41">[<expr><name pos:line="15" pos:column="42">i<pos:position pos:line="15" pos:column="43"/></name></expr>]<pos:position pos:line="15" pos:column="44"/></index></name></expr></argument>, <comment type="block" pos:line="15" pos:column="46">/* retval = */</comment> <argument><expr><name pos:line="15" pos:column="61">NULL<pos:position pos:line="15" pos:column="65"/></name></expr></argument>)<pos:position pos:line="15" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="67"/></expr_stmt>
    }<pos:position pos:line="16" pos:column="6"/></block></for>

    <expr_stmt><expr><name pos:line="18" pos:column="5">subscriber_threads_num<pos:position pos:line="18" pos:column="27"/></name> <operator pos:line="18" pos:column="28">=<pos:position pos:line="18" pos:column="29"/></operator> <literal type="number" pos:line="18" pos:column="30">0<pos:position pos:line="18" pos:column="31"/></literal></expr>;<pos:position pos:line="18" pos:column="32"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="19" pos:column="5">sfree<pos:position pos:line="19" pos:column="10"/></name> <argument_list pos:line="19" pos:column="11">(<argument><expr><name pos:line="19" pos:column="12">subscriber_threads<pos:position pos:line="19" pos:column="30"/></name></expr></argument>)<pos:position pos:line="19" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="32"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="21" pos:column="5">DEBUG<pos:position pos:line="21" pos:column="10"/></name> <argument_list pos:line="21" pos:column="11">(<argument><expr><literal type="string" pos:line="21" pos:column="12">"amqp plugin: All subscriber threads exited."<pos:position pos:line="21" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="59"/></expr_stmt>

    <return pos:line="23" pos:column="5">return <expr><operator pos:line="23" pos:column="12">(<pos:position pos:line="23" pos:column="13"/></operator><literal type="number" pos:line="23" pos:column="13">0<pos:position pos:line="23" pos:column="14"/></literal><operator pos:line="23" pos:column="14">)<pos:position pos:line="23" pos:column="15"/></operator></expr>;<pos:position pos:line="23" pos:column="16"/></return>
}<pos:position pos:line="24" pos:column="2"/></block></function></unit>
