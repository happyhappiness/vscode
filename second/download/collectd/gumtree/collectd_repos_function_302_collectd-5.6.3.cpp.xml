<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_302_collectd-5.6.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">init<pos:position pos:line="1" pos:column="16"/></name><parameter_list pos:line="1" pos:column="16">(<parameter><decl><type><name pos:line="1" pos:column="17">void<pos:position pos:line="1" pos:column="21"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="22"/></parameter_list> <block pos:line="1" pos:column="23">{
<cpp:if pos:line="2" pos:column="1">#<cpp:directive pos:line="2" pos:column="2">if<pos:position pos:line="2" pos:column="4"/></cpp:directive> <expr><name pos:line="2" pos:column="5">PROCESSOR_CPU_LOAD_INFO<pos:position pos:line="2" pos:column="28"/></name></expr></cpp:if>
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">kern_return_t<pos:position pos:line="3" pos:column="16"/></name></type> <name pos:line="3" pos:column="17">status<pos:position pos:line="3" pos:column="23"/></name></decl>;<pos:position pos:line="3" pos:column="24"/></decl_stmt>

  <expr_stmt><expr><name pos:line="5" pos:column="3">port_host<pos:position pos:line="5" pos:column="12"/></name> <operator pos:line="5" pos:column="13">=<pos:position pos:line="5" pos:column="14"/></operator> <call><name pos:line="5" pos:column="15">mach_host_self<pos:position pos:line="5" pos:column="29"/></name><argument_list pos:line="5" pos:column="29">()<pos:position pos:line="5" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="32"/></expr_stmt>

  <expr_stmt><expr><name pos:line="7" pos:column="3">status<pos:position pos:line="7" pos:column="9"/></name> <operator pos:line="7" pos:column="10">=<pos:position pos:line="7" pos:column="11"/></operator> <call><name pos:line="7" pos:column="12">host_processors<pos:position pos:line="7" pos:column="27"/></name><argument_list pos:line="7" pos:column="27">(<argument><expr><name pos:line="7" pos:column="28">port_host<pos:position pos:line="7" pos:column="37"/></name></expr></argument>, <argument><expr><operator pos:line="7" pos:column="39">&amp;<pos:position pos:line="7" pos:column="44"/></operator><name pos:line="7" pos:column="40">cpu_list<pos:position pos:line="7" pos:column="48"/></name></expr></argument>, <argument><expr><operator pos:line="7" pos:column="50">&amp;<pos:position pos:line="7" pos:column="55"/></operator><name pos:line="7" pos:column="51">cpu_list_len<pos:position pos:line="7" pos:column="63"/></name></expr></argument>)<pos:position pos:line="7" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="65"/></expr_stmt>
  <if pos:line="8" pos:column="3">if <condition pos:line="8" pos:column="6">(<expr><name pos:line="8" pos:column="7">status<pos:position pos:line="8" pos:column="13"/></name> <operator pos:line="8" pos:column="14">==<pos:position pos:line="8" pos:column="16"/></operator> <name pos:line="8" pos:column="17">KERN_INVALID_ARGUMENT<pos:position pos:line="8" pos:column="38"/></name></expr>)<pos:position pos:line="8" pos:column="39"/></condition><then pos:line="8" pos:column="39"> <block pos:line="8" pos:column="40">{
    <expr_stmt><expr><call><name pos:line="9" pos:column="5">ERROR<pos:position pos:line="9" pos:column="10"/></name><argument_list pos:line="9" pos:column="10">(<argument><expr><literal type="string" pos:line="9" pos:column="11">"cpu plugin: Don't have a privileged host control port. "<pos:position pos:line="9" pos:column="68"/></literal>
          <literal type="string" pos:line="10" pos:column="11">"The most common cause for this problem is "<pos:position pos:line="10" pos:column="55"/></literal>
          <literal type="string" pos:line="11" pos:column="11">"that collectd is running without root "<pos:position pos:line="11" pos:column="51"/></literal>
          <literal type="string" pos:line="12" pos:column="11">"privileges, which are required to read CPU "<pos:position pos:line="12" pos:column="56"/></literal>
          <literal type="string" pos:line="13" pos:column="11">"load information. "<pos:position pos:line="13" pos:column="31"/></literal>
          <literal type="string" pos:line="14" pos:column="11">"&lt;https://collectd.org/bugs/22&gt;"<pos:position pos:line="14" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="45"/></expr_stmt>
    <expr_stmt><expr><name pos:line="15" pos:column="5">cpu_list_len<pos:position pos:line="15" pos:column="17"/></name> <operator pos:line="15" pos:column="18">=<pos:position pos:line="15" pos:column="19"/></operator> <literal type="number" pos:line="15" pos:column="20">0<pos:position pos:line="15" pos:column="21"/></literal></expr>;<pos:position pos:line="15" pos:column="22"/></expr_stmt>
    <return pos:line="16" pos:column="5">return <expr><operator pos:line="16" pos:column="12">(<pos:position pos:line="16" pos:column="13"/></operator><operator pos:line="16" pos:column="13">-<pos:position pos:line="16" pos:column="14"/></operator><literal type="number" pos:line="16" pos:column="14">1<pos:position pos:line="16" pos:column="15"/></literal><operator pos:line="16" pos:column="15">)<pos:position pos:line="16" pos:column="16"/></operator></expr>;<pos:position pos:line="16" pos:column="17"/></return>
  }<pos:position pos:line="17" pos:column="4"/></block></then></if>
  <if pos:line="18" pos:column="3">if <condition pos:line="18" pos:column="6">(<expr><name pos:line="18" pos:column="7">status<pos:position pos:line="18" pos:column="13"/></name> <operator pos:line="18" pos:column="14">!=<pos:position pos:line="18" pos:column="16"/></operator> <name pos:line="18" pos:column="17">KERN_SUCCESS<pos:position pos:line="18" pos:column="29"/></name></expr>)<pos:position pos:line="18" pos:column="30"/></condition><then pos:line="18" pos:column="30"> <block pos:line="18" pos:column="31">{
    <expr_stmt><expr><call><name pos:line="19" pos:column="5">ERROR<pos:position pos:line="19" pos:column="10"/></name><argument_list pos:line="19" pos:column="10">(<argument><expr><literal type="string" pos:line="19" pos:column="11">"cpu plugin: host_processors() failed with status %d."<pos:position pos:line="19" pos:column="65"/></literal></expr></argument>, <argument><expr><operator pos:line="19" pos:column="67">(<pos:position pos:line="19" pos:column="68"/></operator><name pos:line="19" pos:column="68">int<pos:position pos:line="19" pos:column="71"/></name><operator pos:line="19" pos:column="71">)<pos:position pos:line="19" pos:column="72"/></operator><name pos:line="19" pos:column="72">status<pos:position pos:line="19" pos:column="78"/></name></expr></argument>)<pos:position pos:line="19" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="80"/></expr_stmt>
    <expr_stmt><expr><name pos:line="20" pos:column="5">cpu_list_len<pos:position pos:line="20" pos:column="17"/></name> <operator pos:line="20" pos:column="18">=<pos:position pos:line="20" pos:column="19"/></operator> <literal type="number" pos:line="20" pos:column="20">0<pos:position pos:line="20" pos:column="21"/></literal></expr>;<pos:position pos:line="20" pos:column="22"/></expr_stmt>
    <return pos:line="21" pos:column="5">return <expr><operator pos:line="21" pos:column="12">(<pos:position pos:line="21" pos:column="13"/></operator><operator pos:line="21" pos:column="13">-<pos:position pos:line="21" pos:column="14"/></operator><literal type="number" pos:line="21" pos:column="14">1<pos:position pos:line="21" pos:column="15"/></literal><operator pos:line="21" pos:column="15">)<pos:position pos:line="21" pos:column="16"/></operator></expr>;<pos:position pos:line="21" pos:column="17"/></return>
  }<pos:position pos:line="22" pos:column="4"/></block></then></if>

  <expr_stmt><expr><call><name pos:line="24" pos:column="3">INFO<pos:position pos:line="24" pos:column="7"/></name><argument_list pos:line="24" pos:column="7">(<argument><expr><literal type="string" pos:line="24" pos:column="8">"cpu plugin: Found %i processor%s."<pos:position pos:line="24" pos:column="43"/></literal></expr></argument>, <argument><expr><operator pos:line="24" pos:column="45">(<pos:position pos:line="24" pos:column="46"/></operator><name pos:line="24" pos:column="46">int<pos:position pos:line="24" pos:column="49"/></name><operator pos:line="24" pos:column="49">)<pos:position pos:line="24" pos:column="50"/></operator><name pos:line="24" pos:column="50">cpu_list_len<pos:position pos:line="24" pos:column="62"/></name></expr></argument>,
       <argument><expr><ternary><condition><expr><name pos:line="25" pos:column="8">cpu_list_len<pos:position pos:line="25" pos:column="20"/></name> <operator pos:line="25" pos:column="21">==<pos:position pos:line="25" pos:column="23"/></operator> <literal type="number" pos:line="25" pos:column="24">1<pos:position pos:line="25" pos:column="25"/></literal></expr> ?<pos:position pos:line="25" pos:column="27"/></condition><then pos:line="25" pos:column="27"> <expr><literal type="string" pos:line="25" pos:column="28">""<pos:position pos:line="25" pos:column="30"/></literal></expr> <pos:position pos:line="25" pos:column="31"/></then><else pos:line="25" pos:column="31">: <expr><literal type="string" pos:line="25" pos:column="33">"s"<pos:position pos:line="25" pos:column="36"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="25" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="38"/></expr_stmt>
<comment type="block" pos:line="26" pos:column="1">/* #endif PROCESSOR_CPU_LOAD_INFO */</comment>

<cpp:elif pos:line="28" pos:column="1">#<cpp:directive pos:line="28" pos:column="2">elif<pos:position pos:line="28" pos:column="6"/></cpp:directive> <expr><call><name pos:line="28" pos:column="7">defined<pos:position pos:line="28" pos:column="14"/></name><argument_list pos:line="28" pos:column="14">(<argument><expr><name pos:line="28" pos:column="15">HAVE_LIBKSTAT<pos:position pos:line="28" pos:column="28"/></name></expr></argument>)<pos:position pos:line="28" pos:column="29"/></argument_list></call></expr></cpp:elif>
  <decl_stmt><decl><type><name pos:line="29" pos:column="3">kstat_t<pos:position pos:line="29" pos:column="10"/></name> <modifier pos:line="29" pos:column="11">*<pos:position pos:line="29" pos:column="12"/></modifier></type><name pos:line="29" pos:column="12">ksp_chain<pos:position pos:line="29" pos:column="21"/></name></decl>;<pos:position pos:line="29" pos:column="22"/></decl_stmt>

  <expr_stmt><expr><name pos:line="31" pos:column="3">numcpu<pos:position pos:line="31" pos:column="9"/></name> <operator pos:line="31" pos:column="10">=<pos:position pos:line="31" pos:column="11"/></operator> <literal type="number" pos:line="31" pos:column="12">0<pos:position pos:line="31" pos:column="13"/></literal></expr>;<pos:position pos:line="31" pos:column="14"/></expr_stmt>

  <if pos:line="33" pos:column="3">if <condition pos:line="33" pos:column="6">(<expr><name pos:line="33" pos:column="7">kc<pos:position pos:line="33" pos:column="9"/></name> <operator pos:line="33" pos:column="10">==<pos:position pos:line="33" pos:column="12"/></operator> <name pos:line="33" pos:column="13">NULL<pos:position pos:line="33" pos:column="17"/></name></expr>)<pos:position pos:line="33" pos:column="18"/></condition><then pos:line="33" pos:column="18">
    <block type="pseudo"><return pos:line="34" pos:column="5">return <expr><operator pos:line="34" pos:column="12">(<pos:position pos:line="34" pos:column="13"/></operator><operator pos:line="34" pos:column="13">-<pos:position pos:line="34" pos:column="14"/></operator><literal type="number" pos:line="34" pos:column="14">1<pos:position pos:line="34" pos:column="15"/></literal><operator pos:line="34" pos:column="15">)<pos:position pos:line="34" pos:column="16"/></operator></expr>;<pos:position pos:line="34" pos:column="17"/></return></block></then></if>

  <comment type="block" pos:line="36" pos:column="3">/* Solaris doesn't count linear.. *sigh* */</comment>
  <for pos:line="37" pos:column="3">for <control pos:line="37" pos:column="7">(<init><expr><name pos:line="37" pos:column="8">numcpu<pos:position pos:line="37" pos:column="14"/></name> <operator pos:line="37" pos:column="15">=<pos:position pos:line="37" pos:column="16"/></operator> <literal type="number" pos:line="37" pos:column="17">0<pos:position pos:line="37" pos:column="18"/></literal></expr><operator pos:line="37" pos:column="18">,<pos:position pos:line="37" pos:column="19"/></operator> <expr><name pos:line="37" pos:column="20">ksp_chain<pos:position pos:line="37" pos:column="29"/></name> <operator pos:line="37" pos:column="30">=<pos:position pos:line="37" pos:column="31"/></operator> <name><name pos:line="37" pos:column="32">kc<pos:position pos:line="37" pos:column="34"/></name><operator pos:line="37" pos:column="34">-&gt;<pos:position pos:line="37" pos:column="39"/></operator><name pos:line="37" pos:column="36">kc_chain<pos:position pos:line="37" pos:column="44"/></name></name></expr>;<pos:position pos:line="37" pos:column="45"/></init>
       <condition><expr><operator pos:line="38" pos:column="8">(<pos:position pos:line="38" pos:column="9"/></operator><name pos:line="38" pos:column="9">numcpu<pos:position pos:line="38" pos:column="15"/></name> <operator pos:line="38" pos:column="16">&lt;<pos:position pos:line="38" pos:column="20"/></operator> <name pos:line="38" pos:column="18">MAX_NUMCPU<pos:position pos:line="38" pos:column="28"/></name><operator pos:line="38" pos:column="28">)<pos:position pos:line="38" pos:column="29"/></operator> <operator pos:line="38" pos:column="30">&amp;&amp;<pos:position pos:line="38" pos:column="40"/></operator> <operator pos:line="38" pos:column="33">(<pos:position pos:line="38" pos:column="34"/></operator><name pos:line="38" pos:column="34">ksp_chain<pos:position pos:line="38" pos:column="43"/></name> <operator pos:line="38" pos:column="44">!=<pos:position pos:line="38" pos:column="46"/></operator> <name pos:line="38" pos:column="47">NULL<pos:position pos:line="38" pos:column="51"/></name><operator pos:line="38" pos:column="51">)<pos:position pos:line="38" pos:column="52"/></operator></expr>;<pos:position pos:line="38" pos:column="53"/></condition>
       <incr><expr><name pos:line="39" pos:column="8">ksp_chain<pos:position pos:line="39" pos:column="17"/></name> <operator pos:line="39" pos:column="18">=<pos:position pos:line="39" pos:column="19"/></operator> <name><name pos:line="39" pos:column="20">ksp_chain<pos:position pos:line="39" pos:column="29"/></name><operator pos:line="39" pos:column="29">-&gt;<pos:position pos:line="39" pos:column="34"/></operator><name pos:line="39" pos:column="31">ks_next<pos:position pos:line="39" pos:column="38"/></name></name></expr></incr>)<pos:position pos:line="39" pos:column="39"/></control>
    <block type="pseudo"><if pos:line="40" pos:column="5">if <condition pos:line="40" pos:column="8">(<expr><call><name pos:line="40" pos:column="9">strncmp<pos:position pos:line="40" pos:column="16"/></name><argument_list pos:line="40" pos:column="16">(<argument><expr><name><name pos:line="40" pos:column="17">ksp_chain<pos:position pos:line="40" pos:column="26"/></name><operator pos:line="40" pos:column="26">-&gt;<pos:position pos:line="40" pos:column="31"/></operator><name pos:line="40" pos:column="28">ks_module<pos:position pos:line="40" pos:column="37"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="40" pos:column="39">"cpu_stat"<pos:position pos:line="40" pos:column="49"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="40" pos:column="51">8<pos:position pos:line="40" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="40" pos:column="53"/></argument_list></call> <operator pos:line="40" pos:column="54">==<pos:position pos:line="40" pos:column="56"/></operator> <literal type="number" pos:line="40" pos:column="57">0<pos:position pos:line="40" pos:column="58"/></literal></expr>)<pos:position pos:line="40" pos:column="59"/></condition><then pos:line="40" pos:column="59">
      <block type="pseudo"><expr_stmt><expr><name><name pos:line="41" pos:column="7">ksp<pos:position pos:line="41" pos:column="10"/></name><index pos:line="41" pos:column="10">[<expr><name pos:line="41" pos:column="11">numcpu<pos:position pos:line="41" pos:column="17"/></name><operator pos:line="41" pos:column="17">++<pos:position pos:line="41" pos:column="19"/></operator></expr>]<pos:position pos:line="41" pos:column="20"/></index></name> <operator pos:line="41" pos:column="21">=<pos:position pos:line="41" pos:column="22"/></operator> <name pos:line="41" pos:column="23">ksp_chain<pos:position pos:line="41" pos:column="32"/></name></expr>;<pos:position pos:line="41" pos:column="33"/></expr_stmt></block></then></if></block></for>
<comment type="block" pos:line="42" pos:column="1">/* #endif HAVE_LIBKSTAT */</comment>

<cpp:elif pos:line="44" pos:column="1">#<cpp:directive pos:line="44" pos:column="2">elif<pos:position pos:line="44" pos:column="6"/></cpp:directive> <expr><name pos:line="44" pos:column="7">CAN_USE_SYSCTL<pos:position pos:line="44" pos:column="21"/></name></expr></cpp:elif>
  <decl_stmt><decl><type><name pos:line="45" pos:column="3">size_t<pos:position pos:line="45" pos:column="9"/></name></type> <name pos:line="45" pos:column="10">numcpu_size<pos:position pos:line="45" pos:column="21"/></name></decl>;<pos:position pos:line="45" pos:column="22"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="46" pos:column="3">int<pos:position pos:line="46" pos:column="6"/></name></type> <name><name pos:line="46" pos:column="7">mib<pos:position pos:line="46" pos:column="10"/></name><index pos:line="46" pos:column="10">[<expr><literal type="number" pos:line="46" pos:column="11">2<pos:position pos:line="46" pos:column="12"/></literal></expr>]<pos:position pos:line="46" pos:column="13"/></index></name> <init pos:line="46" pos:column="14">= <expr><block pos:line="46" pos:column="16">{<expr><name pos:line="46" pos:column="17">CTL_HW<pos:position pos:line="46" pos:column="23"/></name></expr>, <expr><name pos:line="46" pos:column="25">HW_NCPU<pos:position pos:line="46" pos:column="32"/></name></expr>}<pos:position pos:line="46" pos:column="33"/></block></expr></init></decl>;<pos:position pos:line="46" pos:column="34"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="47" pos:column="3">int<pos:position pos:line="47" pos:column="6"/></name></type> <name pos:line="47" pos:column="7">status<pos:position pos:line="47" pos:column="13"/></name></decl>;<pos:position pos:line="47" pos:column="14"/></decl_stmt>

  <expr_stmt><expr><name pos:line="49" pos:column="3">numcpu<pos:position pos:line="49" pos:column="9"/></name> <operator pos:line="49" pos:column="10">=<pos:position pos:line="49" pos:column="11"/></operator> <literal type="number" pos:line="49" pos:column="12">0<pos:position pos:line="49" pos:column="13"/></literal></expr>;<pos:position pos:line="49" pos:column="14"/></expr_stmt>
  <expr_stmt><expr><name pos:line="50" pos:column="3">numcpu_size<pos:position pos:line="50" pos:column="14"/></name> <operator pos:line="50" pos:column="15">=<pos:position pos:line="50" pos:column="16"/></operator> <sizeof pos:line="50" pos:column="17">sizeof<argument_list pos:line="50" pos:column="23">(<argument><expr><name pos:line="50" pos:column="24">numcpu<pos:position pos:line="50" pos:column="30"/></name></expr></argument>)<pos:position pos:line="50" pos:column="31"/></argument_list></sizeof></expr>;<pos:position pos:line="50" pos:column="32"/></expr_stmt>

  <expr_stmt><expr><name pos:line="52" pos:column="3">status<pos:position pos:line="52" pos:column="9"/></name> <operator pos:line="52" pos:column="10">=<pos:position pos:line="52" pos:column="11"/></operator> <call><name pos:line="52" pos:column="12">sysctl<pos:position pos:line="52" pos:column="18"/></name><argument_list pos:line="52" pos:column="18">(<argument><expr><name pos:line="52" pos:column="19">mib<pos:position pos:line="52" pos:column="22"/></name></expr></argument>, <argument><expr><call><name pos:line="52" pos:column="24">STATIC_ARRAY_SIZE<pos:position pos:line="52" pos:column="41"/></name><argument_list pos:line="52" pos:column="41">(<argument><expr><name pos:line="52" pos:column="42">mib<pos:position pos:line="52" pos:column="45"/></name></expr></argument>)<pos:position pos:line="52" pos:column="46"/></argument_list></call></expr></argument>, <argument><expr><operator pos:line="52" pos:column="48">&amp;<pos:position pos:line="52" pos:column="53"/></operator><name pos:line="52" pos:column="49">numcpu<pos:position pos:line="52" pos:column="55"/></name></expr></argument>, <argument><expr><operator pos:line="52" pos:column="57">&amp;<pos:position pos:line="52" pos:column="62"/></operator><name pos:line="52" pos:column="58">numcpu_size<pos:position pos:line="52" pos:column="69"/></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="71">NULL<pos:position pos:line="52" pos:column="75"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="52" pos:column="77">0<pos:position pos:line="52" pos:column="78"/></literal></expr></argument>)<pos:position pos:line="52" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="80"/></expr_stmt>
  <if pos:line="53" pos:column="3">if <condition pos:line="53" pos:column="6">(<expr><name pos:line="53" pos:column="7">status<pos:position pos:line="53" pos:column="13"/></name> <operator pos:line="53" pos:column="14">==<pos:position pos:line="53" pos:column="16"/></operator> <operator pos:line="53" pos:column="17">-<pos:position pos:line="53" pos:column="18"/></operator><literal type="number" pos:line="53" pos:column="18">1<pos:position pos:line="53" pos:column="19"/></literal></expr>)<pos:position pos:line="53" pos:column="20"/></condition><then pos:line="53" pos:column="20"> <block pos:line="53" pos:column="21">{
    <decl_stmt><decl><type><name pos:line="54" pos:column="5">char<pos:position pos:line="54" pos:column="9"/></name></type> <name><name pos:line="54" pos:column="10">errbuf<pos:position pos:line="54" pos:column="16"/></name><index pos:line="54" pos:column="16">[<expr><literal type="number" pos:line="54" pos:column="17">1024<pos:position pos:line="54" pos:column="21"/></literal></expr>]<pos:position pos:line="54" pos:column="22"/></index></name></decl>;<pos:position pos:line="54" pos:column="23"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="55" pos:column="5">WARNING<pos:position pos:line="55" pos:column="12"/></name><argument_list pos:line="55" pos:column="12">(<argument><expr><literal type="string" pos:line="55" pos:column="13">"cpu plugin: sysctl: %s"<pos:position pos:line="55" pos:column="37"/></literal></expr></argument>, <argument><expr><call><name pos:line="55" pos:column="39">sstrerror<pos:position pos:line="55" pos:column="48"/></name><argument_list pos:line="55" pos:column="48">(<argument><expr><name pos:line="55" pos:column="49">errno<pos:position pos:line="55" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="55" pos:column="56">errbuf<pos:position pos:line="55" pos:column="62"/></name></expr></argument>, <argument><expr><sizeof pos:line="55" pos:column="64">sizeof<argument_list pos:line="55" pos:column="70">(<argument><expr><name pos:line="55" pos:column="71">errbuf<pos:position pos:line="55" pos:column="77"/></name></expr></argument>)<pos:position pos:line="55" pos:column="78"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="55" pos:column="79"/></argument_list></call></expr></argument>)<pos:position pos:line="55" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="81"/></expr_stmt>
    <return pos:line="56" pos:column="5">return <expr><operator pos:line="56" pos:column="12">(<pos:position pos:line="56" pos:column="13"/></operator><operator pos:line="56" pos:column="13">-<pos:position pos:line="56" pos:column="14"/></operator><literal type="number" pos:line="56" pos:column="14">1<pos:position pos:line="56" pos:column="15"/></literal><operator pos:line="56" pos:column="15">)<pos:position pos:line="56" pos:column="16"/></operator></expr>;<pos:position pos:line="56" pos:column="17"/></return>
  }<pos:position pos:line="57" pos:column="4"/></block></then></if>
<comment type="block" pos:line="58" pos:column="1">/* #endif CAN_USE_SYSCTL */</comment>

<cpp:elif pos:line="60" pos:column="1">#<cpp:directive pos:line="60" pos:column="2">elif<pos:position pos:line="60" pos:column="6"/></cpp:directive> <expr><call><name pos:line="60" pos:column="7">defined<pos:position pos:line="60" pos:column="14"/></name><argument_list pos:line="60" pos:column="14">(<argument><expr><name pos:line="60" pos:column="15">HAVE_SYSCTLBYNAME<pos:position pos:line="60" pos:column="32"/></name></expr></argument>)<pos:position pos:line="60" pos:column="33"/></argument_list></call></expr></cpp:elif>
  <decl_stmt><decl><type><name pos:line="61" pos:column="3">size_t<pos:position pos:line="61" pos:column="9"/></name></type> <name pos:line="61" pos:column="10">numcpu_size<pos:position pos:line="61" pos:column="21"/></name></decl>;<pos:position pos:line="61" pos:column="22"/></decl_stmt>

  <expr_stmt><expr><name pos:line="63" pos:column="3">numcpu_size<pos:position pos:line="63" pos:column="14"/></name> <operator pos:line="63" pos:column="15">=<pos:position pos:line="63" pos:column="16"/></operator> <sizeof pos:line="63" pos:column="17">sizeof<argument_list pos:line="63" pos:column="23">(<argument><expr><name pos:line="63" pos:column="24">numcpu<pos:position pos:line="63" pos:column="30"/></name></expr></argument>)<pos:position pos:line="63" pos:column="31"/></argument_list></sizeof></expr>;<pos:position pos:line="63" pos:column="32"/></expr_stmt>

  <if pos:line="65" pos:column="3">if <condition pos:line="65" pos:column="6">(<expr><call><name pos:line="65" pos:column="7">sysctlbyname<pos:position pos:line="65" pos:column="19"/></name><argument_list pos:line="65" pos:column="19">(<argument><expr><literal type="string" pos:line="65" pos:column="20">"hw.ncpu"<pos:position pos:line="65" pos:column="29"/></literal></expr></argument>, <argument><expr><operator pos:line="65" pos:column="31">&amp;<pos:position pos:line="65" pos:column="36"/></operator><name pos:line="65" pos:column="32">numcpu<pos:position pos:line="65" pos:column="38"/></name></expr></argument>, <argument><expr><operator pos:line="65" pos:column="40">&amp;<pos:position pos:line="65" pos:column="45"/></operator><name pos:line="65" pos:column="41">numcpu_size<pos:position pos:line="65" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="65" pos:column="54">NULL<pos:position pos:line="65" pos:column="58"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="65" pos:column="60">0<pos:position pos:line="65" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="65" pos:column="62"/></argument_list></call> <operator pos:line="65" pos:column="63">&lt;<pos:position pos:line="65" pos:column="67"/></operator> <literal type="number" pos:line="65" pos:column="65">0<pos:position pos:line="65" pos:column="66"/></literal></expr>)<pos:position pos:line="65" pos:column="67"/></condition><then pos:line="65" pos:column="67"> <block pos:line="65" pos:column="68">{
    <decl_stmt><decl><type><name pos:line="66" pos:column="5">char<pos:position pos:line="66" pos:column="9"/></name></type> <name><name pos:line="66" pos:column="10">errbuf<pos:position pos:line="66" pos:column="16"/></name><index pos:line="66" pos:column="16">[<expr><literal type="number" pos:line="66" pos:column="17">1024<pos:position pos:line="66" pos:column="21"/></literal></expr>]<pos:position pos:line="66" pos:column="22"/></index></name></decl>;<pos:position pos:line="66" pos:column="23"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="67" pos:column="5">WARNING<pos:position pos:line="67" pos:column="12"/></name><argument_list pos:line="67" pos:column="12">(<argument><expr><literal type="string" pos:line="67" pos:column="13">"cpu plugin: sysctlbyname(hw.ncpu): %s"<pos:position pos:line="67" pos:column="52"/></literal></expr></argument>,
            <argument><expr><call><name pos:line="68" pos:column="13">sstrerror<pos:position pos:line="68" pos:column="22"/></name><argument_list pos:line="68" pos:column="22">(<argument><expr><name pos:line="68" pos:column="23">errno<pos:position pos:line="68" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="68" pos:column="30">errbuf<pos:position pos:line="68" pos:column="36"/></name></expr></argument>, <argument><expr><sizeof pos:line="68" pos:column="38">sizeof<argument_list pos:line="68" pos:column="44">(<argument><expr><name pos:line="68" pos:column="45">errbuf<pos:position pos:line="68" pos:column="51"/></name></expr></argument>)<pos:position pos:line="68" pos:column="52"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="68" pos:column="53"/></argument_list></call></expr></argument>)<pos:position pos:line="68" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="55"/></expr_stmt>
    <return pos:line="69" pos:column="5">return <expr><operator pos:line="69" pos:column="12">(<pos:position pos:line="69" pos:column="13"/></operator><operator pos:line="69" pos:column="13">-<pos:position pos:line="69" pos:column="14"/></operator><literal type="number" pos:line="69" pos:column="14">1<pos:position pos:line="69" pos:column="15"/></literal><operator pos:line="69" pos:column="15">)<pos:position pos:line="69" pos:column="16"/></operator></expr>;<pos:position pos:line="69" pos:column="17"/></return>
  }<pos:position pos:line="70" pos:column="4"/></block></then></if>

<cpp:ifdef pos:line="72" pos:column="1">#<cpp:directive pos:line="72" pos:column="2">ifdef<pos:position pos:line="72" pos:column="7"/></cpp:directive> <name pos:line="72" pos:column="8">HAVE_SYSCTL_KERN_CP_TIMES<pos:position pos:line="72" pos:column="33"/></name></cpp:ifdef>
  <expr_stmt><expr><name pos:line="73" pos:column="3">numcpu_size<pos:position pos:line="73" pos:column="14"/></name> <operator pos:line="73" pos:column="15">=<pos:position pos:line="73" pos:column="16"/></operator> <sizeof pos:line="73" pos:column="17">sizeof<argument_list pos:line="73" pos:column="23">(<argument><expr><name pos:line="73" pos:column="24">maxcpu<pos:position pos:line="73" pos:column="30"/></name></expr></argument>)<pos:position pos:line="73" pos:column="31"/></argument_list></sizeof></expr>;<pos:position pos:line="73" pos:column="32"/></expr_stmt>

  <if pos:line="75" pos:column="3">if <condition pos:line="75" pos:column="6">(<expr><call><name pos:line="75" pos:column="7">sysctlbyname<pos:position pos:line="75" pos:column="19"/></name><argument_list pos:line="75" pos:column="19">(<argument><expr><literal type="string" pos:line="75" pos:column="20">"kern.smp.maxcpus"<pos:position pos:line="75" pos:column="38"/></literal></expr></argument>, <argument><expr><operator pos:line="75" pos:column="40">&amp;<pos:position pos:line="75" pos:column="45"/></operator><name pos:line="75" pos:column="41">maxcpu<pos:position pos:line="75" pos:column="47"/></name></expr></argument>, <argument><expr><operator pos:line="75" pos:column="49">&amp;<pos:position pos:line="75" pos:column="54"/></operator><name pos:line="75" pos:column="50">numcpu_size<pos:position pos:line="75" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="75" pos:column="63">NULL<pos:position pos:line="75" pos:column="67"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="75" pos:column="69">0<pos:position pos:line="75" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="75" pos:column="71"/></argument_list></call> <operator pos:line="75" pos:column="72">&lt;<pos:position pos:line="75" pos:column="76"/></operator> <literal type="number" pos:line="75" pos:column="74">0<pos:position pos:line="75" pos:column="75"/></literal></expr>)<pos:position pos:line="75" pos:column="76"/></condition><then pos:line="75" pos:column="76"> <block pos:line="75" pos:column="77">{
    <decl_stmt><decl><type><name pos:line="76" pos:column="5">char<pos:position pos:line="76" pos:column="9"/></name></type> <name><name pos:line="76" pos:column="10">errbuf<pos:position pos:line="76" pos:column="16"/></name><index pos:line="76" pos:column="16">[<expr><literal type="number" pos:line="76" pos:column="17">1024<pos:position pos:line="76" pos:column="21"/></literal></expr>]<pos:position pos:line="76" pos:column="22"/></index></name></decl>;<pos:position pos:line="76" pos:column="23"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="77" pos:column="5">WARNING<pos:position pos:line="77" pos:column="12"/></name><argument_list pos:line="77" pos:column="12">(<argument><expr><literal type="string" pos:line="77" pos:column="13">"cpu plugin: sysctlbyname(kern.smp.maxcpus): %s"<pos:position pos:line="77" pos:column="61"/></literal></expr></argument>,
            <argument><expr><call><name pos:line="78" pos:column="13">sstrerror<pos:position pos:line="78" pos:column="22"/></name><argument_list pos:line="78" pos:column="22">(<argument><expr><name pos:line="78" pos:column="23">errno<pos:position pos:line="78" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="78" pos:column="30">errbuf<pos:position pos:line="78" pos:column="36"/></name></expr></argument>, <argument><expr><sizeof pos:line="78" pos:column="38">sizeof<argument_list pos:line="78" pos:column="44">(<argument><expr><name pos:line="78" pos:column="45">errbuf<pos:position pos:line="78" pos:column="51"/></name></expr></argument>)<pos:position pos:line="78" pos:column="52"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="78" pos:column="53"/></argument_list></call></expr></argument>)<pos:position pos:line="78" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="55"/></expr_stmt>
    <return pos:line="79" pos:column="5">return <expr><operator pos:line="79" pos:column="12">(<pos:position pos:line="79" pos:column="13"/></operator><operator pos:line="79" pos:column="13">-<pos:position pos:line="79" pos:column="14"/></operator><literal type="number" pos:line="79" pos:column="14">1<pos:position pos:line="79" pos:column="15"/></literal><operator pos:line="79" pos:column="15">)<pos:position pos:line="79" pos:column="16"/></operator></expr>;<pos:position pos:line="79" pos:column="17"/></return>
  }<pos:position pos:line="80" pos:column="4"/></block></then></if>
<cpp:else pos:line="81" pos:column="1">#<cpp:directive pos:line="81" pos:column="2">else<pos:position pos:line="81" pos:column="6"/></cpp:directive></cpp:else>
  <if pos:line="82" pos:column="3">if <condition pos:line="82" pos:column="6">(<expr><name pos:line="82" pos:column="7">numcpu<pos:position pos:line="82" pos:column="13"/></name> <operator pos:line="82" pos:column="14">!=<pos:position pos:line="82" pos:column="16"/></operator> <literal type="number" pos:line="82" pos:column="17">1<pos:position pos:line="82" pos:column="18"/></literal></expr>)<pos:position pos:line="82" pos:column="19"/></condition><then pos:line="82" pos:column="19">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="83" pos:column="5">NOTICE<pos:position pos:line="83" pos:column="11"/></name><argument_list pos:line="83" pos:column="11">(<argument><expr><literal type="string" pos:line="83" pos:column="12">"cpu: Only one processor supported when using `sysctlbyname' (found "<pos:position pos:line="83" pos:column="81"/></literal>
           <literal type="string" pos:line="84" pos:column="12">"%i)"<pos:position pos:line="84" pos:column="17"/></literal></expr></argument>,
           <argument><expr><name pos:line="85" pos:column="12">numcpu<pos:position pos:line="85" pos:column="18"/></name></expr></argument>)<pos:position pos:line="85" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="20"/></expr_stmt></block></then></if>
<cpp:endif pos:line="86" pos:column="1">#<cpp:directive pos:line="86" pos:column="2">endif<pos:position pos:line="86" pos:column="7"/></cpp:directive></cpp:endif>
<comment type="block" pos:line="87" pos:column="1">/* #endif HAVE_SYSCTLBYNAME */</comment>

<cpp:elif pos:line="89" pos:column="1">#<cpp:directive pos:line="89" pos:column="2">elif<pos:position pos:line="89" pos:column="6"/></cpp:directive> <expr><call><name pos:line="89" pos:column="7">defined<pos:position pos:line="89" pos:column="14"/></name><argument_list pos:line="89" pos:column="14">(<argument><expr><name pos:line="89" pos:column="15">HAVE_LIBSTATGRAB<pos:position pos:line="89" pos:column="31"/></name></expr></argument>)<pos:position pos:line="89" pos:column="32"/></argument_list></call></expr></cpp:elif>
<comment type="block" pos:line="90" pos:column="1">/* nothing to initialize */</comment>
<comment type="block" pos:line="91" pos:column="1">/* #endif HAVE_LIBSTATGRAB */</comment>

<cpp:elif pos:line="93" pos:column="1">#<cpp:directive pos:line="93" pos:column="2">elif<pos:position pos:line="93" pos:column="6"/></cpp:directive> <expr><call><name pos:line="93" pos:column="7">defined<pos:position pos:line="93" pos:column="14"/></name><argument_list pos:line="93" pos:column="14">(<argument><expr><name pos:line="93" pos:column="15">HAVE_PERFSTAT<pos:position pos:line="93" pos:column="28"/></name></expr></argument>)<pos:position pos:line="93" pos:column="29"/></argument_list></call></expr></cpp:elif>
<comment type="block" pos:line="94" pos:column="1">/* nothing to initialize */</comment>
<cpp:endif pos:line="95" pos:column="1">#<cpp:directive pos:line="95" pos:column="2">endif<pos:position pos:line="95" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="95" pos:column="8">/* HAVE_PERFSTAT */</comment>

  <return pos:line="97" pos:column="3">return <expr><operator pos:line="97" pos:column="10">(<pos:position pos:line="97" pos:column="11"/></operator><literal type="number" pos:line="97" pos:column="11">0<pos:position pos:line="97" pos:column="12"/></literal><operator pos:line="97" pos:column="12">)<pos:position pos:line="97" pos:column="13"/></operator></expr>;<pos:position pos:line="97" pos:column="14"/></return>
}<pos:position pos:line="98" pos:column="2"/></block></function></unit>
