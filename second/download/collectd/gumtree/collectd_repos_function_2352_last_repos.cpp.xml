<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_2352_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name><name pos:line="1" pos:column="8">struct<pos:position pos:line="1" pos:column="14"/></name> <name pos:line="1" pos:column="15">ip_vs_get_services<pos:position pos:line="1" pos:column="33"/></name></name> <modifier pos:line="1" pos:column="34">*<pos:position pos:line="1" pos:column="35"/></modifier></type><name pos:line="1" pos:column="35">ipvs_get_services<pos:position pos:line="1" pos:column="52"/></name><parameter_list pos:line="1" pos:column="52">(<parameter><decl><type><name pos:line="1" pos:column="53">void<pos:position pos:line="1" pos:column="57"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="58"/></parameter_list> <block pos:line="1" pos:column="59">{
  <decl_stmt><decl><type><name><name pos:line="2" pos:column="3">struct<pos:position pos:line="2" pos:column="9"/></name> <name pos:line="2" pos:column="10">ip_vs_getinfo<pos:position pos:line="2" pos:column="23"/></name></name></type> <name pos:line="2" pos:column="24">ipvs_info<pos:position pos:line="2" pos:column="33"/></name></decl>;<pos:position pos:line="2" pos:column="34"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="3" pos:column="3">struct<pos:position pos:line="3" pos:column="9"/></name> <name pos:line="3" pos:column="10">ip_vs_get_services<pos:position pos:line="3" pos:column="28"/></name></name> <modifier pos:line="3" pos:column="29">*<pos:position pos:line="3" pos:column="30"/></modifier></type><name pos:line="3" pos:column="30">services<pos:position pos:line="3" pos:column="38"/></name></decl>;<pos:position pos:line="3" pos:column="39"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="5" pos:column="3">socklen_t<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">len<pos:position pos:line="5" pos:column="16"/></name> <init pos:line="5" pos:column="17">= <expr><sizeof pos:line="5" pos:column="19">sizeof<argument_list pos:line="5" pos:column="25">(<argument><expr><name pos:line="5" pos:column="26">ipvs_info<pos:position pos:line="5" pos:column="35"/></name></expr></argument>)<pos:position pos:line="5" pos:column="36"/></argument_list></sizeof></expr></init></decl>;<pos:position pos:line="5" pos:column="37"/></decl_stmt>

  <if pos:line="7" pos:column="3">if <condition pos:line="7" pos:column="6">(<expr><call><name pos:line="7" pos:column="7">getsockopt<pos:position pos:line="7" pos:column="17"/></name><argument_list pos:line="7" pos:column="17">(<argument><expr><name pos:line="7" pos:column="18">sockfd<pos:position pos:line="7" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="26">IPPROTO_IP<pos:position pos:line="7" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="38">IP_VS_SO_GET_INFO<pos:position pos:line="7" pos:column="55"/></name></expr></argument>, <argument><expr><operator pos:line="7" pos:column="57">&amp;<pos:position pos:line="7" pos:column="62"/></operator><name pos:line="7" pos:column="58">ipvs_info<pos:position pos:line="7" pos:column="67"/></name></expr></argument>, <argument><expr><operator pos:line="7" pos:column="69">&amp;<pos:position pos:line="7" pos:column="74"/></operator><name pos:line="7" pos:column="70">len<pos:position pos:line="7" pos:column="73"/></name></expr></argument>)<pos:position pos:line="7" pos:column="74"/></argument_list></call> <operator pos:line="7" pos:column="75">==<pos:position pos:line="7" pos:column="77"/></operator>
      <operator pos:line="8" pos:column="7">-<pos:position pos:line="8" pos:column="8"/></operator><literal type="number" pos:line="8" pos:column="8">1<pos:position pos:line="8" pos:column="9"/></literal></expr>)<pos:position pos:line="8" pos:column="10"/></condition><then pos:line="8" pos:column="10"> <block pos:line="8" pos:column="11">{
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">char<pos:position pos:line="9" pos:column="9"/></name></type> <name><name pos:line="9" pos:column="10">errbuf<pos:position pos:line="9" pos:column="16"/></name><index pos:line="9" pos:column="16">[<expr><literal type="number" pos:line="9" pos:column="17">1024<pos:position pos:line="9" pos:column="21"/></literal></expr>]<pos:position pos:line="9" pos:column="22"/></index></name></decl>;<pos:position pos:line="9" pos:column="23"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="10" pos:column="5">log_err<pos:position pos:line="10" pos:column="12"/></name><argument_list pos:line="10" pos:column="12">(<argument><expr><literal type="string" pos:line="10" pos:column="13">"ip_vs_get_services: getsockopt() failed: %s"<pos:position pos:line="10" pos:column="58"/></literal></expr></argument>,
            <argument><expr><call><name pos:line="11" pos:column="13">sstrerror<pos:position pos:line="11" pos:column="22"/></name><argument_list pos:line="11" pos:column="22">(<argument><expr><name pos:line="11" pos:column="23">errno<pos:position pos:line="11" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="30">errbuf<pos:position pos:line="11" pos:column="36"/></name></expr></argument>, <argument><expr><sizeof pos:line="11" pos:column="38">sizeof<argument_list pos:line="11" pos:column="44">(<argument><expr><name pos:line="11" pos:column="45">errbuf<pos:position pos:line="11" pos:column="51"/></name></expr></argument>)<pos:position pos:line="11" pos:column="52"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="11" pos:column="53"/></argument_list></call></expr></argument>)<pos:position pos:line="11" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="55"/></expr_stmt>
    <return pos:line="12" pos:column="5">return <expr><name pos:line="12" pos:column="12">NULL<pos:position pos:line="12" pos:column="16"/></name></expr>;<pos:position pos:line="12" pos:column="17"/></return>
  }<pos:position pos:line="13" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="15" pos:column="3">len<pos:position pos:line="15" pos:column="6"/></name> <operator pos:line="15" pos:column="7">=<pos:position pos:line="15" pos:column="8"/></operator> <sizeof pos:line="15" pos:column="9">sizeof<argument_list pos:line="15" pos:column="15">(<argument><expr><operator pos:line="15" pos:column="16">*<pos:position pos:line="15" pos:column="17"/></operator><name pos:line="15" pos:column="17">services<pos:position pos:line="15" pos:column="25"/></name></expr></argument>)<pos:position pos:line="15" pos:column="26"/></argument_list></sizeof> <operator pos:line="15" pos:column="27">+<pos:position pos:line="15" pos:column="28"/></operator>
        <sizeof pos:line="16" pos:column="9">sizeof<argument_list pos:line="16" pos:column="15">(<argument><expr pos:line="16" pos:column="16">struct <name pos:line="16" pos:column="23">ip_vs_service_entry<pos:position pos:line="16" pos:column="42"/></name></expr></argument>)<pos:position pos:line="16" pos:column="43"/></argument_list></sizeof> <operator pos:line="16" pos:column="44">*<pos:position pos:line="16" pos:column="45"/></operator> <name><name pos:line="16" pos:column="46">ipvs_info<pos:position pos:line="16" pos:column="55"/></name><operator pos:line="16" pos:column="55">.<pos:position pos:line="16" pos:column="56"/></operator><name pos:line="16" pos:column="56">num_services<pos:position pos:line="16" pos:column="68"/></name></name></expr>;<pos:position pos:line="16" pos:column="69"/></expr_stmt>

  <expr_stmt><expr><name pos:line="18" pos:column="3">services<pos:position pos:line="18" pos:column="11"/></name> <operator pos:line="18" pos:column="12">=<pos:position pos:line="18" pos:column="13"/></operator> <call><name pos:line="18" pos:column="14">malloc<pos:position pos:line="18" pos:column="20"/></name><argument_list pos:line="18" pos:column="20">(<argument><expr><name pos:line="18" pos:column="21">len<pos:position pos:line="18" pos:column="24"/></name></expr></argument>)<pos:position pos:line="18" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="26"/></expr_stmt>
  <if pos:line="19" pos:column="3">if <condition pos:line="19" pos:column="6">(<expr><name pos:line="19" pos:column="7">services<pos:position pos:line="19" pos:column="15"/></name> <operator pos:line="19" pos:column="16">==<pos:position pos:line="19" pos:column="18"/></operator> <name pos:line="19" pos:column="19">NULL<pos:position pos:line="19" pos:column="23"/></name></expr>)<pos:position pos:line="19" pos:column="24"/></condition><then pos:line="19" pos:column="24"> <block pos:line="19" pos:column="25">{
    <expr_stmt><expr><call><name pos:line="20" pos:column="5">log_err<pos:position pos:line="20" pos:column="12"/></name><argument_list pos:line="20" pos:column="12">(<argument><expr><literal type="string" pos:line="20" pos:column="13">"ipvs_get_services: Out of memory."<pos:position pos:line="20" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="50"/></expr_stmt>
    <return pos:line="21" pos:column="5">return <expr><name pos:line="21" pos:column="12">NULL<pos:position pos:line="21" pos:column="16"/></name></expr>;<pos:position pos:line="21" pos:column="17"/></return>
  }<pos:position pos:line="22" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name><name pos:line="24" pos:column="3">services<pos:position pos:line="24" pos:column="11"/></name><operator pos:line="24" pos:column="11">-&gt;<pos:position pos:line="24" pos:column="16"/></operator><name pos:line="24" pos:column="13">num_services<pos:position pos:line="24" pos:column="25"/></name></name> <operator pos:line="24" pos:column="26">=<pos:position pos:line="24" pos:column="27"/></operator> <name><name pos:line="24" pos:column="28">ipvs_info<pos:position pos:line="24" pos:column="37"/></name><operator pos:line="24" pos:column="37">.<pos:position pos:line="24" pos:column="38"/></operator><name pos:line="24" pos:column="38">num_services<pos:position pos:line="24" pos:column="50"/></name></name></expr>;<pos:position pos:line="24" pos:column="51"/></expr_stmt>

  <if pos:line="26" pos:column="3">if <condition pos:line="26" pos:column="6">(<expr><call><name pos:line="26" pos:column="7">getsockopt<pos:position pos:line="26" pos:column="17"/></name><argument_list pos:line="26" pos:column="17">(<argument><expr><name pos:line="26" pos:column="18">sockfd<pos:position pos:line="26" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="26">IPPROTO_IP<pos:position pos:line="26" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="38">IP_VS_SO_GET_SERVICES<pos:position pos:line="26" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="61">services<pos:position pos:line="26" pos:column="69"/></name></expr></argument>, <argument><expr><operator pos:line="26" pos:column="71">&amp;<pos:position pos:line="26" pos:column="76"/></operator><name pos:line="26" pos:column="72">len<pos:position pos:line="26" pos:column="75"/></name></expr></argument>)<pos:position pos:line="26" pos:column="76"/></argument_list></call> <operator pos:line="26" pos:column="77">==<pos:position pos:line="26" pos:column="79"/></operator>
      <operator pos:line="27" pos:column="7">-<pos:position pos:line="27" pos:column="8"/></operator><literal type="number" pos:line="27" pos:column="8">1<pos:position pos:line="27" pos:column="9"/></literal></expr>)<pos:position pos:line="27" pos:column="10"/></condition><then pos:line="27" pos:column="10"> <block pos:line="27" pos:column="11">{
    <decl_stmt><decl><type><name pos:line="28" pos:column="5">char<pos:position pos:line="28" pos:column="9"/></name></type> <name><name pos:line="28" pos:column="10">errbuf<pos:position pos:line="28" pos:column="16"/></name><index pos:line="28" pos:column="16">[<expr><literal type="number" pos:line="28" pos:column="17">1024<pos:position pos:line="28" pos:column="21"/></literal></expr>]<pos:position pos:line="28" pos:column="22"/></index></name></decl>;<pos:position pos:line="28" pos:column="23"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="29" pos:column="5">log_err<pos:position pos:line="29" pos:column="12"/></name><argument_list pos:line="29" pos:column="12">(<argument><expr><literal type="string" pos:line="29" pos:column="13">"ipvs_get_services: getsockopt failed: %s"<pos:position pos:line="29" pos:column="55"/></literal></expr></argument>,
            <argument><expr><call><name pos:line="30" pos:column="13">sstrerror<pos:position pos:line="30" pos:column="22"/></name><argument_list pos:line="30" pos:column="22">(<argument><expr><name pos:line="30" pos:column="23">errno<pos:position pos:line="30" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="30">errbuf<pos:position pos:line="30" pos:column="36"/></name></expr></argument>, <argument><expr><sizeof pos:line="30" pos:column="38">sizeof<argument_list pos:line="30" pos:column="44">(<argument><expr><name pos:line="30" pos:column="45">errbuf<pos:position pos:line="30" pos:column="51"/></name></expr></argument>)<pos:position pos:line="30" pos:column="52"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="30" pos:column="53"/></argument_list></call></expr></argument>)<pos:position pos:line="30" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="55"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="32" pos:column="5">free<pos:position pos:line="32" pos:column="9"/></name><argument_list pos:line="32" pos:column="9">(<argument><expr><name pos:line="32" pos:column="10">services<pos:position pos:line="32" pos:column="18"/></name></expr></argument>)<pos:position pos:line="32" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="20"/></expr_stmt>
    <return pos:line="33" pos:column="5">return <expr><name pos:line="33" pos:column="12">NULL<pos:position pos:line="33" pos:column="16"/></name></expr>;<pos:position pos:line="33" pos:column="17"/></return>
  }<pos:position pos:line="34" pos:column="4"/></block></then></if>
  <return pos:line="35" pos:column="3">return <expr><name pos:line="35" pos:column="10">services<pos:position pos:line="35" pos:column="18"/></name></expr>;<pos:position pos:line="35" pos:column="19"/></return>
}<pos:position pos:line="36" pos:column="2"/></block></function></unit>
