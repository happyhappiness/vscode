<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_2342_collectd-5.6.3.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">ignorelist_add<pos:position pos:line="1" pos:column="19"/></name><parameter_list pos:line="1" pos:column="19">(<parameter><decl><type><name pos:line="1" pos:column="20">ignorelist_t<pos:position pos:line="1" pos:column="32"/></name> <modifier pos:line="1" pos:column="33">*<pos:position pos:line="1" pos:column="34"/></modifier></type><name pos:line="1" pos:column="34">il<pos:position pos:line="1" pos:column="36"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="38">const<pos:position pos:line="1" pos:column="43"/></specifier> <name pos:line="1" pos:column="44">char<pos:position pos:line="1" pos:column="48"/></name> <modifier pos:line="1" pos:column="49">*<pos:position pos:line="1" pos:column="50"/></modifier></type><name pos:line="1" pos:column="50">entry<pos:position pos:line="1" pos:column="55"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="56"/></parameter_list> <block pos:line="1" pos:column="57">{
  <decl_stmt><decl><type><name pos:line="2" pos:column="3">size_t<pos:position pos:line="2" pos:column="9"/></name></type> <name pos:line="2" pos:column="10">len<pos:position pos:line="2" pos:column="13"/></name></decl>;<pos:position pos:line="2" pos:column="14"/></decl_stmt>

  <if pos:line="4" pos:column="3">if <condition pos:line="4" pos:column="6">(<expr><name pos:line="4" pos:column="7">il<pos:position pos:line="4" pos:column="9"/></name> <operator pos:line="4" pos:column="10">==<pos:position pos:line="4" pos:column="12"/></operator> <name pos:line="4" pos:column="13">NULL<pos:position pos:line="4" pos:column="17"/></name></expr>)<pos:position pos:line="4" pos:column="18"/></condition><then pos:line="4" pos:column="18"> <block pos:line="4" pos:column="19">{
    <expr_stmt><expr><call><name pos:line="5" pos:column="5">DEBUG<pos:position pos:line="5" pos:column="10"/></name><argument_list pos:line="5" pos:column="10">(<argument><expr><literal type="string" pos:line="5" pos:column="11">"add called with ignorelist_t == NULL"<pos:position pos:line="5" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="5" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="51"/></expr_stmt>
    <return pos:line="6" pos:column="5">return <expr><operator pos:line="6" pos:column="12">(<pos:position pos:line="6" pos:column="13"/></operator><literal type="number" pos:line="6" pos:column="13">1<pos:position pos:line="6" pos:column="14"/></literal><operator pos:line="6" pos:column="14">)<pos:position pos:line="6" pos:column="15"/></operator></expr>;<pos:position pos:line="6" pos:column="16"/></return>
  }<pos:position pos:line="7" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="9" pos:column="3">len<pos:position pos:line="9" pos:column="6"/></name> <operator pos:line="9" pos:column="7">=<pos:position pos:line="9" pos:column="8"/></operator> <call><name pos:line="9" pos:column="9">strlen<pos:position pos:line="9" pos:column="15"/></name><argument_list pos:line="9" pos:column="15">(<argument><expr><name pos:line="9" pos:column="16">entry<pos:position pos:line="9" pos:column="21"/></name></expr></argument>)<pos:position pos:line="9" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="23"/></expr_stmt>

  <comment type="block" pos:line="11" pos:column="3">/* append nothing */</comment>
  <if pos:line="12" pos:column="3">if <condition pos:line="12" pos:column="6">(<expr><name pos:line="12" pos:column="7">len<pos:position pos:line="12" pos:column="10"/></name> <operator pos:line="12" pos:column="11">==<pos:position pos:line="12" pos:column="13"/></operator> <literal type="number" pos:line="12" pos:column="14">0<pos:position pos:line="12" pos:column="15"/></literal></expr>)<pos:position pos:line="12" pos:column="16"/></condition><then pos:line="12" pos:column="16"> <block pos:line="12" pos:column="17">{
    <expr_stmt><expr><call><name pos:line="13" pos:column="5">DEBUG<pos:position pos:line="13" pos:column="10"/></name><argument_list pos:line="13" pos:column="10">(<argument><expr><literal type="string" pos:line="13" pos:column="11">"not appending: empty entry"<pos:position pos:line="13" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="41"/></expr_stmt>
    <return pos:line="14" pos:column="5">return <expr><operator pos:line="14" pos:column="12">(<pos:position pos:line="14" pos:column="13"/></operator><literal type="number" pos:line="14" pos:column="13">1<pos:position pos:line="14" pos:column="14"/></literal><operator pos:line="14" pos:column="14">)<pos:position pos:line="14" pos:column="15"/></operator></expr>;<pos:position pos:line="14" pos:column="16"/></return>
  }<pos:position pos:line="15" pos:column="4"/></block></then></if>

<cpp:if pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">if<pos:position pos:line="17" pos:column="4"/></cpp:directive> <expr><name pos:line="17" pos:column="5">HAVE_REGEX_H<pos:position pos:line="17" pos:column="17"/></name></expr></cpp:if>
  <comment type="block" pos:line="18" pos:column="3">/* regex string is enclosed in "/.../" */</comment>
  <if pos:line="19" pos:column="3">if <condition pos:line="19" pos:column="6">(<expr><operator pos:line="19" pos:column="7">(<pos:position pos:line="19" pos:column="8"/></operator><name pos:line="19" pos:column="8">len<pos:position pos:line="19" pos:column="11"/></name> <operator pos:line="19" pos:column="12">&gt;<pos:position pos:line="19" pos:column="16"/></operator> <literal type="number" pos:line="19" pos:column="14">2<pos:position pos:line="19" pos:column="15"/></literal><operator pos:line="19" pos:column="15">)<pos:position pos:line="19" pos:column="16"/></operator> <operator pos:line="19" pos:column="17">&amp;&amp;<pos:position pos:line="19" pos:column="27"/></operator> <operator pos:line="19" pos:column="20">(<pos:position pos:line="19" pos:column="21"/></operator><name><name pos:line="19" pos:column="21">entry<pos:position pos:line="19" pos:column="26"/></name><index pos:line="19" pos:column="26">[<expr><literal type="number" pos:line="19" pos:column="27">0<pos:position pos:line="19" pos:column="28"/></literal></expr>]<pos:position pos:line="19" pos:column="29"/></index></name> <operator pos:line="19" pos:column="30">==<pos:position pos:line="19" pos:column="32"/></operator> <literal type="char" pos:line="19" pos:column="33">'/'<pos:position pos:line="19" pos:column="36"/></literal><operator pos:line="19" pos:column="36">)<pos:position pos:line="19" pos:column="37"/></operator> <operator pos:line="19" pos:column="38">&amp;&amp;<pos:position pos:line="19" pos:column="48"/></operator> <name><name pos:line="19" pos:column="41">entry<pos:position pos:line="19" pos:column="46"/></name><index pos:line="19" pos:column="46">[<expr><name pos:line="19" pos:column="47">len<pos:position pos:line="19" pos:column="50"/></name> <operator pos:line="19" pos:column="51">-<pos:position pos:line="19" pos:column="52"/></operator> <literal type="number" pos:line="19" pos:column="53">1<pos:position pos:line="19" pos:column="54"/></literal></expr>]<pos:position pos:line="19" pos:column="55"/></index></name> <operator pos:line="19" pos:column="56">==<pos:position pos:line="19" pos:column="58"/></operator> <literal type="char" pos:line="19" pos:column="59">'/'<pos:position pos:line="19" pos:column="62"/></literal></expr>)<pos:position pos:line="19" pos:column="63"/></condition><then pos:line="19" pos:column="63"> <block pos:line="19" pos:column="64">{
    <decl_stmt><decl><type><name pos:line="20" pos:column="5">char<pos:position pos:line="20" pos:column="9"/></name> <modifier pos:line="20" pos:column="10">*<pos:position pos:line="20" pos:column="11"/></modifier></type><name pos:line="20" pos:column="11">copy<pos:position pos:line="20" pos:column="15"/></name></decl>;<pos:position pos:line="20" pos:column="16"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="21" pos:column="5">int<pos:position pos:line="21" pos:column="8"/></name></type> <name pos:line="21" pos:column="9">status<pos:position pos:line="21" pos:column="15"/></name></decl>;<pos:position pos:line="21" pos:column="16"/></decl_stmt>

    <comment type="block" pos:line="23" pos:column="5">/* skip leading slash */</comment>
    <expr_stmt><expr><name pos:line="24" pos:column="5">copy<pos:position pos:line="24" pos:column="9"/></name> <operator pos:line="24" pos:column="10">=<pos:position pos:line="24" pos:column="11"/></operator> <call><name pos:line="24" pos:column="12">strdup<pos:position pos:line="24" pos:column="18"/></name><argument_list pos:line="24" pos:column="18">(<argument><expr><name pos:line="24" pos:column="19">entry<pos:position pos:line="24" pos:column="24"/></name> <operator pos:line="24" pos:column="25">+<pos:position pos:line="24" pos:column="26"/></operator> <literal type="number" pos:line="24" pos:column="27">1<pos:position pos:line="24" pos:column="28"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="30"/></expr_stmt>
    <if pos:line="25" pos:column="5">if <condition pos:line="25" pos:column="8">(<expr><name pos:line="25" pos:column="9">copy<pos:position pos:line="25" pos:column="13"/></name> <operator pos:line="25" pos:column="14">==<pos:position pos:line="25" pos:column="16"/></operator> <name pos:line="25" pos:column="17">NULL<pos:position pos:line="25" pos:column="21"/></name></expr>)<pos:position pos:line="25" pos:column="22"/></condition><then pos:line="25" pos:column="22">
      <block type="pseudo"><return pos:line="26" pos:column="7">return <expr><name pos:line="26" pos:column="14">ENOMEM<pos:position pos:line="26" pos:column="20"/></name></expr>;<pos:position pos:line="26" pos:column="21"/></return></block></then></if>

    <comment type="block" pos:line="28" pos:column="5">/* trim trailing slash */</comment>
    <expr_stmt><expr><name><name pos:line="29" pos:column="5">copy<pos:position pos:line="29" pos:column="9"/></name><index pos:line="29" pos:column="9">[<expr><call><name pos:line="29" pos:column="10">strlen<pos:position pos:line="29" pos:column="16"/></name><argument_list pos:line="29" pos:column="16">(<argument><expr><name pos:line="29" pos:column="17">copy<pos:position pos:line="29" pos:column="21"/></name></expr></argument>)<pos:position pos:line="29" pos:column="22"/></argument_list></call> <operator pos:line="29" pos:column="23">-<pos:position pos:line="29" pos:column="24"/></operator> <literal type="number" pos:line="29" pos:column="25">1<pos:position pos:line="29" pos:column="26"/></literal></expr>]<pos:position pos:line="29" pos:column="27"/></index></name> <operator pos:line="29" pos:column="28">=<pos:position pos:line="29" pos:column="29"/></operator> <literal type="number" pos:line="29" pos:column="30">0<pos:position pos:line="29" pos:column="31"/></literal></expr>;<pos:position pos:line="29" pos:column="32"/></expr_stmt>

    <expr_stmt><expr><name pos:line="31" pos:column="5">status<pos:position pos:line="31" pos:column="11"/></name> <operator pos:line="31" pos:column="12">=<pos:position pos:line="31" pos:column="13"/></operator> <call><name pos:line="31" pos:column="14">ignorelist_append_regex<pos:position pos:line="31" pos:column="37"/></name><argument_list pos:line="31" pos:column="37">(<argument><expr><name pos:line="31" pos:column="38">il<pos:position pos:line="31" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="42">copy<pos:position pos:line="31" pos:column="46"/></name></expr></argument>)<pos:position pos:line="31" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="48"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="32" pos:column="5">sfree<pos:position pos:line="32" pos:column="10"/></name><argument_list pos:line="32" pos:column="10">(<argument><expr><name pos:line="32" pos:column="11">copy<pos:position pos:line="32" pos:column="15"/></name></expr></argument>)<pos:position pos:line="32" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="17"/></expr_stmt>
    <return pos:line="33" pos:column="5">return <expr><name pos:line="33" pos:column="12">status<pos:position pos:line="33" pos:column="18"/></name></expr>;<pos:position pos:line="33" pos:column="19"/></return>
  }<pos:position pos:line="34" pos:column="4"/></block></then></if>
<cpp:endif pos:line="35" pos:column="1">#<cpp:directive pos:line="35" pos:column="2">endif<pos:position pos:line="35" pos:column="7"/></cpp:directive></cpp:endif>

  <return pos:line="37" pos:column="3">return <expr><call><name pos:line="37" pos:column="10">ignorelist_append_string<pos:position pos:line="37" pos:column="34"/></name><argument_list pos:line="37" pos:column="34">(<argument><expr><name pos:line="37" pos:column="35">il<pos:position pos:line="37" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="39">entry<pos:position pos:line="37" pos:column="44"/></name></expr></argument>)<pos:position pos:line="37" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="46"/></return>
}<pos:position pos:line="38" pos:column="2"/></block></function></unit>
