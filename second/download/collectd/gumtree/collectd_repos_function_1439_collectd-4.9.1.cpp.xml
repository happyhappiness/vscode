<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1439_collectd-4.9.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">PyObject<pos:position pos:line="1" pos:column="16"/></name> <modifier pos:line="1" pos:column="17">*<pos:position pos:line="1" pos:column="18"/></modifier></type><name pos:line="1" pos:column="18">cpy_unregister_generic_userdata<pos:position pos:line="1" pos:column="49"/></name><parameter_list pos:line="1" pos:column="49">(<parameter><decl><type><name pos:line="1" pos:column="50">cpy_unregister_function_t<pos:position pos:line="1" pos:column="75"/></name> <modifier pos:line="1" pos:column="76">*<pos:position pos:line="1" pos:column="77"/></modifier></type><name pos:line="1" pos:column="77">unreg<pos:position pos:line="1" pos:column="82"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="84">PyObject<pos:position pos:line="1" pos:column="92"/></name> <modifier pos:line="1" pos:column="93">*<pos:position pos:line="1" pos:column="94"/></modifier></type><name pos:line="1" pos:column="94">arg<pos:position pos:line="1" pos:column="97"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="99">const<pos:position pos:line="1" pos:column="104"/></specifier> <name pos:line="1" pos:column="105">char<pos:position pos:line="1" pos:column="109"/></name> <modifier pos:line="1" pos:column="110">*<pos:position pos:line="1" pos:column="111"/></modifier></type><name pos:line="1" pos:column="111">desc<pos:position pos:line="1" pos:column="115"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="116"/></parameter_list> <block pos:line="1" pos:column="117">{
	<decl_stmt><decl><type><name pos:line="2" pos:column="9">char<pos:position pos:line="2" pos:column="13"/></name></type> <name><name pos:line="2" pos:column="14">buf<pos:position pos:line="2" pos:column="17"/></name><index pos:line="2" pos:column="17">[<expr><literal type="number" pos:line="2" pos:column="18">512<pos:position pos:line="2" pos:column="21"/></literal></expr>]<pos:position pos:line="2" pos:column="22"/></index></name></decl>;<pos:position pos:line="2" pos:column="23"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="3" pos:column="9">const<pos:position pos:line="3" pos:column="14"/></specifier> <name pos:line="3" pos:column="15">char<pos:position pos:line="3" pos:column="19"/></name> <modifier pos:line="3" pos:column="20">*<pos:position pos:line="3" pos:column="21"/></modifier></type><name pos:line="3" pos:column="21">name<pos:position pos:line="3" pos:column="25"/></name></decl>;<pos:position pos:line="3" pos:column="26"/></decl_stmt>

	<if pos:line="5" pos:column="9">if <condition pos:line="5" pos:column="12">(<expr><call><name pos:line="5" pos:column="13">PyUnicode_Check<pos:position pos:line="5" pos:column="28"/></name><argument_list pos:line="5" pos:column="28">(<argument><expr><name pos:line="5" pos:column="29">arg<pos:position pos:line="5" pos:column="32"/></name></expr></argument>)<pos:position pos:line="5" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="5" pos:column="34"/></condition><then pos:line="5" pos:column="34"> <block pos:line="5" pos:column="35">{
		<expr_stmt><expr><name pos:line="6" pos:column="17">arg<pos:position pos:line="6" pos:column="20"/></name> <operator pos:line="6" pos:column="21">=<pos:position pos:line="6" pos:column="22"/></operator> <call><name pos:line="6" pos:column="23">PyUnicode_AsEncodedString<pos:position pos:line="6" pos:column="48"/></name><argument_list pos:line="6" pos:column="48">(<argument><expr><name pos:line="6" pos:column="49">arg<pos:position pos:line="6" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="6" pos:column="54">NULL<pos:position pos:line="6" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="6" pos:column="60">NULL<pos:position pos:line="6" pos:column="64"/></name></expr></argument>)<pos:position pos:line="6" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="66"/></expr_stmt>
		<if pos:line="7" pos:column="17">if <condition pos:line="7" pos:column="20">(<expr><name pos:line="7" pos:column="21">arg<pos:position pos:line="7" pos:column="24"/></name> <operator pos:line="7" pos:column="25">==<pos:position pos:line="7" pos:column="27"/></operator> <name pos:line="7" pos:column="28">NULL<pos:position pos:line="7" pos:column="32"/></name></expr>)<pos:position pos:line="7" pos:column="33"/></condition><then pos:line="7" pos:column="33">
			<block type="pseudo"><return pos:line="8" pos:column="25">return <expr><name pos:line="8" pos:column="32">NULL<pos:position pos:line="8" pos:column="36"/></name></expr>;<pos:position pos:line="8" pos:column="37"/></return></block></then></if>
		<expr_stmt><expr><name pos:line="9" pos:column="17">name<pos:position pos:line="9" pos:column="21"/></name> <operator pos:line="9" pos:column="22">=<pos:position pos:line="9" pos:column="23"/></operator> <call><name pos:line="9" pos:column="24">PyString_AsString<pos:position pos:line="9" pos:column="41"/></name><argument_list pos:line="9" pos:column="41">(<argument><expr><name pos:line="9" pos:column="42">arg<pos:position pos:line="9" pos:column="45"/></name></expr></argument>)<pos:position pos:line="9" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="47"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="10" pos:column="17">Py_DECREF<pos:position pos:line="10" pos:column="26"/></name><argument_list pos:line="10" pos:column="26">(<argument><expr><name pos:line="10" pos:column="27">arg<pos:position pos:line="10" pos:column="30"/></name></expr></argument>)<pos:position pos:line="10" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="32"/></expr_stmt>
	}<pos:position pos:line="11" pos:column="10"/></block></then> <elseif pos:line="11" pos:column="11">else <if pos:line="11" pos:column="16">if <condition pos:line="11" pos:column="19">(<expr><call><name pos:line="11" pos:column="20">PyString_Check<pos:position pos:line="11" pos:column="34"/></name><argument_list pos:line="11" pos:column="34">(<argument><expr><name pos:line="11" pos:column="35">arg<pos:position pos:line="11" pos:column="38"/></name></expr></argument>)<pos:position pos:line="11" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="11" pos:column="40"/></condition><then pos:line="11" pos:column="40"> <block pos:line="11" pos:column="41">{
		<expr_stmt><expr><name pos:line="12" pos:column="17">name<pos:position pos:line="12" pos:column="21"/></name> <operator pos:line="12" pos:column="22">=<pos:position pos:line="12" pos:column="23"/></operator> <call><name pos:line="12" pos:column="24">PyString_AsString<pos:position pos:line="12" pos:column="41"/></name><argument_list pos:line="12" pos:column="41">(<argument><expr><name pos:line="12" pos:column="42">arg<pos:position pos:line="12" pos:column="45"/></name></expr></argument>)<pos:position pos:line="12" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="47"/></expr_stmt>
	}<pos:position pos:line="13" pos:column="10"/></block></then></if></elseif> <else pos:line="13" pos:column="11">else <block pos:line="13" pos:column="16">{
		<if pos:line="14" pos:column="17">if <condition pos:line="14" pos:column="20">(<expr><operator pos:line="14" pos:column="21">!<pos:position pos:line="14" pos:column="22"/></operator><call><name pos:line="14" pos:column="22">PyCallable_Check<pos:position pos:line="14" pos:column="38"/></name><argument_list pos:line="14" pos:column="38">(<argument><expr><name pos:line="14" pos:column="39">arg<pos:position pos:line="14" pos:column="42"/></name></expr></argument>)<pos:position pos:line="14" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="14" pos:column="44"/></condition><then pos:line="14" pos:column="44"> <block pos:line="14" pos:column="45">{
			<expr_stmt><expr><call><name pos:line="15" pos:column="25">PyErr_SetString<pos:position pos:line="15" pos:column="40"/></name><argument_list pos:line="15" pos:column="40">(<argument><expr><name pos:line="15" pos:column="41">PyExc_TypeError<pos:position pos:line="15" pos:column="56"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="15" pos:column="58">"This function needs a string or a callable object as its only parameter."<pos:position pos:line="15" pos:column="132"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="133"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="134"/></expr_stmt>
			<return pos:line="16" pos:column="25">return <expr><name pos:line="16" pos:column="32">NULL<pos:position pos:line="16" pos:column="36"/></name></expr>;<pos:position pos:line="16" pos:column="37"/></return>
		}<pos:position pos:line="17" pos:column="18"/></block></then></if>
		<expr_stmt><expr><call><name pos:line="18" pos:column="17">cpy_build_name<pos:position pos:line="18" pos:column="31"/></name><argument_list pos:line="18" pos:column="31">(<argument><expr><name pos:line="18" pos:column="32">buf<pos:position pos:line="18" pos:column="35"/></name></expr></argument>, <argument><expr><sizeof pos:line="18" pos:column="37">sizeof<argument_list pos:line="18" pos:column="43">(<argument><expr><name pos:line="18" pos:column="44">buf<pos:position pos:line="18" pos:column="47"/></name></expr></argument>)<pos:position pos:line="18" pos:column="48"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="18" pos:column="50">arg<pos:position pos:line="18" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="55">NULL<pos:position pos:line="18" pos:column="59"/></name></expr></argument>)<pos:position pos:line="18" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="61"/></expr_stmt>
		<expr_stmt><expr><name pos:line="19" pos:column="17">name<pos:position pos:line="19" pos:column="21"/></name> <operator pos:line="19" pos:column="22">=<pos:position pos:line="19" pos:column="23"/></operator> <name pos:line="19" pos:column="24">buf<pos:position pos:line="19" pos:column="27"/></name></expr>;<pos:position pos:line="19" pos:column="28"/></expr_stmt>
	}<pos:position pos:line="20" pos:column="10"/></block></else></if>
	<if pos:line="21" pos:column="9">if <condition pos:line="21" pos:column="12">(<expr><call><name pos:line="21" pos:column="13">unreg<pos:position pos:line="21" pos:column="18"/></name><argument_list pos:line="21" pos:column="18">(<argument><expr><name pos:line="21" pos:column="19">name<pos:position pos:line="21" pos:column="23"/></name></expr></argument>)<pos:position pos:line="21" pos:column="24"/></argument_list></call> <operator pos:line="21" pos:column="25">==<pos:position pos:line="21" pos:column="27"/></operator> <literal type="number" pos:line="21" pos:column="28">0<pos:position pos:line="21" pos:column="29"/></literal></expr>)<pos:position pos:line="21" pos:column="30"/></condition><then pos:line="21" pos:column="30">
		<block type="pseudo"><expr_stmt><expr><name pos:line="22" pos:column="17">Py_RETURN_NONE<pos:position pos:line="22" pos:column="31"/></name></expr>;<pos:position pos:line="22" pos:column="32"/></expr_stmt></block></then></if>
	<expr_stmt><expr><call><name pos:line="23" pos:column="9">PyErr_Format<pos:position pos:line="23" pos:column="21"/></name><argument_list pos:line="23" pos:column="21">(<argument><expr><name pos:line="23" pos:column="22">PyExc_RuntimeError<pos:position pos:line="23" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="23" pos:column="42">"Unable to unregister %s callback '%s'."<pos:position pos:line="23" pos:column="82"/></literal></expr></argument>, <argument><expr><name pos:line="23" pos:column="84">desc<pos:position pos:line="23" pos:column="88"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="90">name<pos:position pos:line="23" pos:column="94"/></name></expr></argument>)<pos:position pos:line="23" pos:column="95"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="96"/></expr_stmt>
	<return pos:line="24" pos:column="9">return <expr><name pos:line="24" pos:column="16">NULL<pos:position pos:line="24" pos:column="20"/></name></expr>;<pos:position pos:line="24" pos:column="21"/></return>
}<pos:position pos:line="25" pos:column="2"/></block></function></unit>
