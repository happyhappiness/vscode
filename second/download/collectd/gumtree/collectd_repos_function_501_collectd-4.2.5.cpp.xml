<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_501_collectd-4.2.5.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name> <modifier pos:line="1" pos:column="13">*<pos:position pos:line="1" pos:column="14"/></modifier></type><name pos:line="1" pos:column="14">rrd_queue_thread<pos:position pos:line="1" pos:column="30"/></name> <parameter_list pos:line="1" pos:column="31">(<parameter><decl><type><name pos:line="1" pos:column="32">void<pos:position pos:line="1" pos:column="36"/></name> <modifier pos:line="1" pos:column="37">*<pos:position pos:line="1" pos:column="38"/></modifier></type><name pos:line="1" pos:column="38">data<pos:position pos:line="1" pos:column="42"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="43"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<while pos:line="3" pos:column="9">while <condition pos:line="3" pos:column="15">(<expr><literal type="number" pos:line="3" pos:column="16">42<pos:position pos:line="3" pos:column="18"/></literal></expr>)<pos:position pos:line="3" pos:column="19"/></condition>
	<block pos:line="4" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="5" pos:column="17">rrd_queue_t<pos:position pos:line="5" pos:column="28"/></name> <modifier pos:line="5" pos:column="29">*<pos:position pos:line="5" pos:column="30"/></modifier></type><name pos:line="5" pos:column="30">queue_entry<pos:position pos:line="5" pos:column="41"/></name></decl>;<pos:position pos:line="5" pos:column="42"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="6" pos:column="17">rrd_cache_t<pos:position pos:line="6" pos:column="28"/></name> <modifier pos:line="6" pos:column="29">*<pos:position pos:line="6" pos:column="30"/></modifier></type><name pos:line="6" pos:column="30">cache_entry<pos:position pos:line="6" pos:column="41"/></name></decl>;<pos:position pos:line="6" pos:column="42"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="7" pos:column="17">char<pos:position pos:line="7" pos:column="21"/></name> <modifier pos:line="7" pos:column="22">*<pos:position pos:line="7" pos:column="23"/></modifier><modifier pos:line="7" pos:column="23">*<pos:position pos:line="7" pos:column="24"/></modifier></type><name pos:line="7" pos:column="24">values<pos:position pos:line="7" pos:column="30"/></name></decl>;<pos:position pos:line="7" pos:column="31"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="8" pos:column="17">int<pos:position pos:line="8" pos:column="20"/></name></type>    <name pos:line="8" pos:column="24">values_num<pos:position pos:line="8" pos:column="34"/></name></decl>;<pos:position pos:line="8" pos:column="35"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="9" pos:column="17">int<pos:position pos:line="9" pos:column="20"/></name></type>    <name pos:line="9" pos:column="24">i<pos:position pos:line="9" pos:column="25"/></name></decl>;<pos:position pos:line="9" pos:column="26"/></decl_stmt>

		<comment type="block" pos:line="11" pos:column="17">/* XXX: If you need to lock both, cache_lock and queue_lock, at
		 * the same time, ALWAYS lock `cache_lock' first! */</comment>

		<comment type="block" pos:line="14" pos:column="17">/* wait until an entry is available */</comment>
		<expr_stmt><expr><call><name pos:line="15" pos:column="17">pthread_mutex_lock<pos:position pos:line="15" pos:column="35"/></name> <argument_list pos:line="15" pos:column="36">(<argument><expr><operator pos:line="15" pos:column="37">&amp;<pos:position pos:line="15" pos:column="42"/></operator><name pos:line="15" pos:column="38">queue_lock<pos:position pos:line="15" pos:column="48"/></name></expr></argument>)<pos:position pos:line="15" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="50"/></expr_stmt>
		<while pos:line="16" pos:column="17">while <condition pos:line="16" pos:column="23">(<expr><operator pos:line="16" pos:column="24">(<pos:position pos:line="16" pos:column="25"/></operator><name pos:line="16" pos:column="25">queue_head<pos:position pos:line="16" pos:column="35"/></name> <operator pos:line="16" pos:column="36">==<pos:position pos:line="16" pos:column="38"/></operator> <name pos:line="16" pos:column="39">NULL<pos:position pos:line="16" pos:column="43"/></name><operator pos:line="16" pos:column="43">)<pos:position pos:line="16" pos:column="44"/></operator> <operator pos:line="16" pos:column="45">&amp;&amp;<pos:position pos:line="16" pos:column="55"/></operator> <operator pos:line="16" pos:column="48">(<pos:position pos:line="16" pos:column="49"/></operator><name pos:line="16" pos:column="49">do_shutdown<pos:position pos:line="16" pos:column="60"/></name> <operator pos:line="16" pos:column="61">==<pos:position pos:line="16" pos:column="63"/></operator> <literal type="number" pos:line="16" pos:column="64">0<pos:position pos:line="16" pos:column="65"/></literal><operator pos:line="16" pos:column="65">)<pos:position pos:line="16" pos:column="66"/></operator></expr>)<pos:position pos:line="16" pos:column="67"/></condition>
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="17" pos:column="25">pthread_cond_wait<pos:position pos:line="17" pos:column="42"/></name> <argument_list pos:line="17" pos:column="43">(<argument><expr><operator pos:line="17" pos:column="44">&amp;<pos:position pos:line="17" pos:column="49"/></operator><name pos:line="17" pos:column="45">queue_cond<pos:position pos:line="17" pos:column="55"/></name></expr></argument>, <argument><expr><operator pos:line="17" pos:column="57">&amp;<pos:position pos:line="17" pos:column="62"/></operator><name pos:line="17" pos:column="58">queue_lock<pos:position pos:line="17" pos:column="68"/></name></expr></argument>)<pos:position pos:line="17" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="70"/></expr_stmt></block></while>

		<comment type="block" pos:line="19" pos:column="17">/* We're in the shutdown phase */</comment>
		<if pos:line="20" pos:column="17">if <condition pos:line="20" pos:column="20">(<expr><name pos:line="20" pos:column="21">queue_head<pos:position pos:line="20" pos:column="31"/></name> <operator pos:line="20" pos:column="32">==<pos:position pos:line="20" pos:column="34"/></operator> <name pos:line="20" pos:column="35">NULL<pos:position pos:line="20" pos:column="39"/></name></expr>)<pos:position pos:line="20" pos:column="40"/></condition><then pos:line="20" pos:column="40">
		<block pos:line="21" pos:column="17">{
			<expr_stmt><expr><call><name pos:line="22" pos:column="25">pthread_mutex_unlock<pos:position pos:line="22" pos:column="45"/></name> <argument_list pos:line="22" pos:column="46">(<argument><expr><operator pos:line="22" pos:column="47">&amp;<pos:position pos:line="22" pos:column="52"/></operator><name pos:line="22" pos:column="48">queue_lock<pos:position pos:line="22" pos:column="58"/></name></expr></argument>)<pos:position pos:line="22" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="60"/></expr_stmt>
			<break pos:line="23" pos:column="25">break;<pos:position pos:line="23" pos:column="31"/></break>
		}<pos:position pos:line="24" pos:column="18"/></block></then></if>

		<comment type="block" pos:line="26" pos:column="17">/* Dequeue the first entry */</comment>
		<expr_stmt><expr><name pos:line="27" pos:column="17">queue_entry<pos:position pos:line="27" pos:column="28"/></name> <operator pos:line="27" pos:column="29">=<pos:position pos:line="27" pos:column="30"/></operator> <name pos:line="27" pos:column="31">queue_head<pos:position pos:line="27" pos:column="41"/></name></expr>;<pos:position pos:line="27" pos:column="42"/></expr_stmt>
		<if pos:line="28" pos:column="17">if <condition pos:line="28" pos:column="20">(<expr><name pos:line="28" pos:column="21">queue_head<pos:position pos:line="28" pos:column="31"/></name> <operator pos:line="28" pos:column="32">==<pos:position pos:line="28" pos:column="34"/></operator> <name pos:line="28" pos:column="35">queue_tail<pos:position pos:line="28" pos:column="45"/></name></expr>)<pos:position pos:line="28" pos:column="46"/></condition><then pos:line="28" pos:column="46">
			<block type="pseudo"><expr_stmt><expr><name pos:line="29" pos:column="25">queue_head<pos:position pos:line="29" pos:column="35"/></name> <operator pos:line="29" pos:column="36">=<pos:position pos:line="29" pos:column="37"/></operator> <name pos:line="29" pos:column="38">queue_tail<pos:position pos:line="29" pos:column="48"/></name> <operator pos:line="29" pos:column="49">=<pos:position pos:line="29" pos:column="50"/></operator> <name pos:line="29" pos:column="51">NULL<pos:position pos:line="29" pos:column="55"/></name></expr>;<pos:position pos:line="29" pos:column="56"/></expr_stmt></block></then>
		<else pos:line="30" pos:column="17">else
			<block type="pseudo"><expr_stmt><expr><name pos:line="31" pos:column="25">queue_head<pos:position pos:line="31" pos:column="35"/></name> <operator pos:line="31" pos:column="36">=<pos:position pos:line="31" pos:column="37"/></operator> <name><name pos:line="31" pos:column="38">queue_head<pos:position pos:line="31" pos:column="48"/></name><operator pos:line="31" pos:column="48">-&gt;<pos:position pos:line="31" pos:column="53"/></operator><name pos:line="31" pos:column="50">next<pos:position pos:line="31" pos:column="54"/></name></name></expr>;<pos:position pos:line="31" pos:column="55"/></expr_stmt></block></else></if>

		<comment type="block" pos:line="33" pos:column="17">/* Unlock the queue again */</comment>
		<expr_stmt><expr><call><name pos:line="34" pos:column="17">pthread_mutex_unlock<pos:position pos:line="34" pos:column="37"/></name> <argument_list pos:line="34" pos:column="38">(<argument><expr><operator pos:line="34" pos:column="39">&amp;<pos:position pos:line="34" pos:column="44"/></operator><name pos:line="34" pos:column="40">queue_lock<pos:position pos:line="34" pos:column="50"/></name></expr></argument>)<pos:position pos:line="34" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="52"/></expr_stmt>

		<comment type="block" pos:line="36" pos:column="17">/* We now need the cache lock so the entry isn't updated while
		 * we make a copy of it's values */</comment>
		<expr_stmt><expr><call><name pos:line="38" pos:column="17">pthread_mutex_lock<pos:position pos:line="38" pos:column="35"/></name> <argument_list pos:line="38" pos:column="36">(<argument><expr><operator pos:line="38" pos:column="37">&amp;<pos:position pos:line="38" pos:column="42"/></operator><name pos:line="38" pos:column="38">cache_lock<pos:position pos:line="38" pos:column="48"/></name></expr></argument>)<pos:position pos:line="38" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="50"/></expr_stmt>

		<expr_stmt><expr><call><name pos:line="40" pos:column="17">c_avl_get<pos:position pos:line="40" pos:column="26"/></name> <argument_list pos:line="40" pos:column="27">(<argument><expr><name pos:line="40" pos:column="28">cache<pos:position pos:line="40" pos:column="33"/></name></expr></argument>, <argument><expr><name><name pos:line="40" pos:column="35">queue_entry<pos:position pos:line="40" pos:column="46"/></name><operator pos:line="40" pos:column="46">-&gt;<pos:position pos:line="40" pos:column="51"/></operator><name pos:line="40" pos:column="48">filename<pos:position pos:line="40" pos:column="56"/></name></name></expr></argument>, <argument><expr><operator pos:line="40" pos:column="58">(<pos:position pos:line="40" pos:column="59"/></operator><name pos:line="40" pos:column="59">void<pos:position pos:line="40" pos:column="63"/></name> <operator pos:line="40" pos:column="64">*<pos:position pos:line="40" pos:column="65"/></operator><operator pos:line="40" pos:column="65">)<pos:position pos:line="40" pos:column="66"/></operator> <operator pos:line="40" pos:column="67">&amp;<pos:position pos:line="40" pos:column="72"/></operator><name pos:line="40" pos:column="68">cache_entry<pos:position pos:line="40" pos:column="79"/></name></expr></argument>)<pos:position pos:line="40" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="81"/></expr_stmt>

		<expr_stmt><expr><name pos:line="42" pos:column="17">values<pos:position pos:line="42" pos:column="23"/></name> <operator pos:line="42" pos:column="24">=<pos:position pos:line="42" pos:column="25"/></operator> <name><name pos:line="42" pos:column="26">cache_entry<pos:position pos:line="42" pos:column="37"/></name><operator pos:line="42" pos:column="37">-&gt;<pos:position pos:line="42" pos:column="42"/></operator><name pos:line="42" pos:column="39">values<pos:position pos:line="42" pos:column="45"/></name></name></expr>;<pos:position pos:line="42" pos:column="46"/></expr_stmt>
		<expr_stmt><expr><name pos:line="43" pos:column="17">values_num<pos:position pos:line="43" pos:column="27"/></name> <operator pos:line="43" pos:column="28">=<pos:position pos:line="43" pos:column="29"/></operator> <name><name pos:line="43" pos:column="30">cache_entry<pos:position pos:line="43" pos:column="41"/></name><operator pos:line="43" pos:column="41">-&gt;<pos:position pos:line="43" pos:column="46"/></operator><name pos:line="43" pos:column="43">values_num<pos:position pos:line="43" pos:column="53"/></name></name></expr>;<pos:position pos:line="43" pos:column="54"/></expr_stmt>

		<expr_stmt><expr><name><name pos:line="45" pos:column="17">cache_entry<pos:position pos:line="45" pos:column="28"/></name><operator pos:line="45" pos:column="28">-&gt;<pos:position pos:line="45" pos:column="33"/></operator><name pos:line="45" pos:column="30">values<pos:position pos:line="45" pos:column="36"/></name></name> <operator pos:line="45" pos:column="37">=<pos:position pos:line="45" pos:column="38"/></operator> <name pos:line="45" pos:column="39">NULL<pos:position pos:line="45" pos:column="43"/></name></expr>;<pos:position pos:line="45" pos:column="44"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="46" pos:column="17">cache_entry<pos:position pos:line="46" pos:column="28"/></name><operator pos:line="46" pos:column="28">-&gt;<pos:position pos:line="46" pos:column="33"/></operator><name pos:line="46" pos:column="30">values_num<pos:position pos:line="46" pos:column="40"/></name></name> <operator pos:line="46" pos:column="41">=<pos:position pos:line="46" pos:column="42"/></operator> <literal type="number" pos:line="46" pos:column="43">0<pos:position pos:line="46" pos:column="44"/></literal></expr>;<pos:position pos:line="46" pos:column="45"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="47" pos:column="17">cache_entry<pos:position pos:line="47" pos:column="28"/></name><operator pos:line="47" pos:column="28">-&gt;<pos:position pos:line="47" pos:column="33"/></operator><name pos:line="47" pos:column="30">flags<pos:position pos:line="47" pos:column="35"/></name></name> <operator pos:line="47" pos:column="36">=<pos:position pos:line="47" pos:column="37"/></operator> <name pos:line="47" pos:column="38">FLAG_NONE<pos:position pos:line="47" pos:column="47"/></name></expr>;<pos:position pos:line="47" pos:column="48"/></expr_stmt>

		<expr_stmt><expr><call><name pos:line="49" pos:column="17">pthread_mutex_unlock<pos:position pos:line="49" pos:column="37"/></name> <argument_list pos:line="49" pos:column="38">(<argument><expr><operator pos:line="49" pos:column="39">&amp;<pos:position pos:line="49" pos:column="44"/></operator><name pos:line="49" pos:column="40">cache_lock<pos:position pos:line="49" pos:column="50"/></name></expr></argument>)<pos:position pos:line="49" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="52"/></expr_stmt>

		<comment type="block" pos:line="51" pos:column="17">/* Write the values to the RRD-file */</comment>
		<expr_stmt><expr><call><name pos:line="52" pos:column="17">srrd_update<pos:position pos:line="52" pos:column="28"/></name> <argument_list pos:line="52" pos:column="29">(<argument><expr><name><name pos:line="52" pos:column="30">queue_entry<pos:position pos:line="52" pos:column="41"/></name><operator pos:line="52" pos:column="41">-&gt;<pos:position pos:line="52" pos:column="46"/></operator><name pos:line="52" pos:column="43">filename<pos:position pos:line="52" pos:column="51"/></name></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="53">NULL<pos:position pos:line="52" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="59">values_num<pos:position pos:line="52" pos:column="69"/></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="71">values<pos:position pos:line="52" pos:column="77"/></name></expr></argument>)<pos:position pos:line="52" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="79"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="53" pos:column="17">DEBUG<pos:position pos:line="53" pos:column="22"/></name> <argument_list pos:line="53" pos:column="23">(<argument><expr><literal type="string" pos:line="53" pos:column="24">"rrdtool plugin: queue thread: Wrote %i values to %s"<pos:position pos:line="53" pos:column="77"/></literal></expr></argument>,
				<argument><expr><name pos:line="54" pos:column="33">values_num<pos:position pos:line="54" pos:column="43"/></name></expr></argument>, <argument><expr><name><name pos:line="54" pos:column="45">queue_entry<pos:position pos:line="54" pos:column="56"/></name><operator pos:line="54" pos:column="56">-&gt;<pos:position pos:line="54" pos:column="61"/></operator><name pos:line="54" pos:column="58">filename<pos:position pos:line="54" pos:column="66"/></name></name></expr></argument>)<pos:position pos:line="54" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="68"/></expr_stmt>

		<for pos:line="56" pos:column="17">for <control pos:line="56" pos:column="21">(<init><expr><name pos:line="56" pos:column="22">i<pos:position pos:line="56" pos:column="23"/></name> <operator pos:line="56" pos:column="24">=<pos:position pos:line="56" pos:column="25"/></operator> <literal type="number" pos:line="56" pos:column="26">0<pos:position pos:line="56" pos:column="27"/></literal></expr>;<pos:position pos:line="56" pos:column="28"/></init> <condition><expr><name pos:line="56" pos:column="29">i<pos:position pos:line="56" pos:column="30"/></name> <operator pos:line="56" pos:column="31">&lt;<pos:position pos:line="56" pos:column="35"/></operator> <name pos:line="56" pos:column="33">values_num<pos:position pos:line="56" pos:column="43"/></name></expr>;<pos:position pos:line="56" pos:column="44"/></condition> <incr><expr><name pos:line="56" pos:column="45">i<pos:position pos:line="56" pos:column="46"/></name><operator pos:line="56" pos:column="46">++<pos:position pos:line="56" pos:column="48"/></operator></expr></incr>)<pos:position pos:line="56" pos:column="49"/></control>
		<block pos:line="57" pos:column="17">{
			<expr_stmt><expr><call><name pos:line="58" pos:column="25">sfree<pos:position pos:line="58" pos:column="30"/></name> <argument_list pos:line="58" pos:column="31">(<argument><expr><name><name pos:line="58" pos:column="32">values<pos:position pos:line="58" pos:column="38"/></name><index pos:line="58" pos:column="38">[<expr><name pos:line="58" pos:column="39">i<pos:position pos:line="58" pos:column="40"/></name></expr>]<pos:position pos:line="58" pos:column="41"/></index></name></expr></argument>)<pos:position pos:line="58" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="43"/></expr_stmt>
		}<pos:position pos:line="59" pos:column="18"/></block></for>
		<expr_stmt><expr><call><name pos:line="60" pos:column="17">sfree<pos:position pos:line="60" pos:column="22"/></name> <argument_list pos:line="60" pos:column="23">(<argument><expr><name pos:line="60" pos:column="24">values<pos:position pos:line="60" pos:column="30"/></name></expr></argument>)<pos:position pos:line="60" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="32"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="61" pos:column="17">sfree<pos:position pos:line="61" pos:column="22"/></name> <argument_list pos:line="61" pos:column="23">(<argument><expr><name><name pos:line="61" pos:column="24">queue_entry<pos:position pos:line="61" pos:column="35"/></name><operator pos:line="61" pos:column="35">-&gt;<pos:position pos:line="61" pos:column="40"/></operator><name pos:line="61" pos:column="37">filename<pos:position pos:line="61" pos:column="45"/></name></name></expr></argument>)<pos:position pos:line="61" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="47"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="62" pos:column="17">sfree<pos:position pos:line="62" pos:column="22"/></name> <argument_list pos:line="62" pos:column="23">(<argument><expr><name pos:line="62" pos:column="24">queue_entry<pos:position pos:line="62" pos:column="35"/></name></expr></argument>)<pos:position pos:line="62" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="37"/></expr_stmt>
	}<pos:position pos:line="63" pos:column="10"/></block></while> <comment type="block" pos:line="63" pos:column="11">/* while (42) */</comment>

	<expr_stmt><expr><call><name pos:line="65" pos:column="9">pthread_mutex_lock<pos:position pos:line="65" pos:column="27"/></name> <argument_list pos:line="65" pos:column="28">(<argument><expr><operator pos:line="65" pos:column="29">&amp;<pos:position pos:line="65" pos:column="34"/></operator><name pos:line="65" pos:column="30">cache_lock<pos:position pos:line="65" pos:column="40"/></name></expr></argument>)<pos:position pos:line="65" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="42"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="66" pos:column="9">c_avl_destroy<pos:position pos:line="66" pos:column="22"/></name> <argument_list pos:line="66" pos:column="23">(<argument><expr><name pos:line="66" pos:column="24">cache<pos:position pos:line="66" pos:column="29"/></name></expr></argument>)<pos:position pos:line="66" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="31"/></expr_stmt>
	<expr_stmt><expr><name pos:line="67" pos:column="9">cache<pos:position pos:line="67" pos:column="14"/></name> <operator pos:line="67" pos:column="15">=<pos:position pos:line="67" pos:column="16"/></operator> <name pos:line="67" pos:column="17">NULL<pos:position pos:line="67" pos:column="21"/></name></expr>;<pos:position pos:line="67" pos:column="22"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="68" pos:column="9">pthread_mutex_unlock<pos:position pos:line="68" pos:column="29"/></name> <argument_list pos:line="68" pos:column="30">(<argument><expr><operator pos:line="68" pos:column="31">&amp;<pos:position pos:line="68" pos:column="36"/></operator><name pos:line="68" pos:column="32">cache_lock<pos:position pos:line="68" pos:column="42"/></name></expr></argument>)<pos:position pos:line="68" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="44"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="70" pos:column="9">pthread_exit<pos:position pos:line="70" pos:column="21"/></name> <argument_list pos:line="70" pos:column="22">(<argument><expr><operator pos:line="70" pos:column="23">(<pos:position pos:line="70" pos:column="24"/></operator><name pos:line="70" pos:column="24">void<pos:position pos:line="70" pos:column="28"/></name> <operator pos:line="70" pos:column="29">*<pos:position pos:line="70" pos:column="30"/></operator><operator pos:line="70" pos:column="30">)<pos:position pos:line="70" pos:column="31"/></operator> <literal type="number" pos:line="70" pos:column="32">0<pos:position pos:line="70" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="70" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="35"/></expr_stmt>
	<return pos:line="71" pos:column="9">return <expr><operator pos:line="71" pos:column="16">(<pos:position pos:line="71" pos:column="17"/></operator><operator pos:line="71" pos:column="17">(<pos:position pos:line="71" pos:column="18"/></operator><name pos:line="71" pos:column="18">void<pos:position pos:line="71" pos:column="22"/></name> <operator pos:line="71" pos:column="23">*<pos:position pos:line="71" pos:column="24"/></operator><operator pos:line="71" pos:column="24">)<pos:position pos:line="71" pos:column="25"/></operator> <literal type="number" pos:line="71" pos:column="26">0<pos:position pos:line="71" pos:column="27"/></literal><operator pos:line="71" pos:column="27">)<pos:position pos:line="71" pos:column="28"/></operator></expr>;<pos:position pos:line="71" pos:column="29"/></return>
}<pos:position pos:line="72" pos:column="2"/></block></function></unit>
