<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1453_collectd-5.5.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">riemann_connect<pos:position pos:line="1" pos:column="27"/></name><parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><name><name pos:line="1" pos:column="28">struct<pos:position pos:line="1" pos:column="34"/></name> <name pos:line="1" pos:column="35">riemann_host<pos:position pos:line="1" pos:column="47"/></name></name> <modifier pos:line="1" pos:column="48">*<pos:position pos:line="1" pos:column="49"/></modifier></type><name pos:line="1" pos:column="49">host<pos:position pos:line="1" pos:column="53"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="54"/></parameter_list> <comment type="block" pos:line="1" pos:column="55">/* {{{ */</comment>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type>			 <name pos:line="3" pos:column="34">e<pos:position pos:line="3" pos:column="35"/></name></decl>;<pos:position pos:line="3" pos:column="36"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">addrinfo<pos:position pos:line="4" pos:column="24"/></name></name>		<modifier pos:line="4" pos:column="33">*<pos:position pos:line="4" pos:column="34"/></modifier></type><name pos:line="4" pos:column="34">ai<pos:position pos:line="4" pos:column="36"/></name></decl>, <modifier pos:line="4" pos:column="38">*<pos:position pos:line="4" pos:column="39"/></modifier><decl><type ref="prev"/><name pos:line="4" pos:column="39">res<pos:position pos:line="4" pos:column="42"/></name></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="44">hints<pos:position pos:line="4" pos:column="49"/></name></decl>;<pos:position pos:line="4" pos:column="50"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">char<pos:position pos:line="5" pos:column="13"/></name> <specifier pos:line="5" pos:column="14">const<pos:position pos:line="5" pos:column="19"/></specifier>		<modifier pos:line="5" pos:column="33">*<pos:position pos:line="5" pos:column="34"/></modifier></type><name pos:line="5" pos:column="34">node<pos:position pos:line="5" pos:column="38"/></name></decl>;<pos:position pos:line="5" pos:column="39"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">char<pos:position pos:line="6" pos:column="13"/></name> <specifier pos:line="6" pos:column="14">const<pos:position pos:line="6" pos:column="19"/></specifier>		<modifier pos:line="6" pos:column="33">*<pos:position pos:line="6" pos:column="34"/></modifier></type><name pos:line="6" pos:column="34">service<pos:position pos:line="6" pos:column="41"/></name></decl>;<pos:position pos:line="6" pos:column="42"/></decl_stmt>

	<if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><name><name pos:line="8" pos:column="13">host<pos:position pos:line="8" pos:column="17"/></name><operator pos:line="8" pos:column="17">-&gt;<pos:position pos:line="8" pos:column="22"/></operator><name pos:line="8" pos:column="19">flags<pos:position pos:line="8" pos:column="24"/></name></name> <operator pos:line="8" pos:column="25">&amp;<pos:position pos:line="8" pos:column="30"/></operator> <name pos:line="8" pos:column="27">F_CONNECT<pos:position pos:line="8" pos:column="36"/></name></expr>)<pos:position pos:line="8" pos:column="37"/></condition><then pos:line="8" pos:column="37">
		<block type="pseudo"><return pos:line="9" pos:column="17">return <expr><literal type="number" pos:line="9" pos:column="24">0<pos:position pos:line="9" pos:column="25"/></literal></expr>;<pos:position pos:line="9" pos:column="26"/></return></block></then></if>

	<expr_stmt><expr><call><name pos:line="11" pos:column="9">memset<pos:position pos:line="11" pos:column="15"/></name><argument_list pos:line="11" pos:column="15">(<argument><expr><operator pos:line="11" pos:column="16">&amp;<pos:position pos:line="11" pos:column="21"/></operator><name pos:line="11" pos:column="17">hints<pos:position pos:line="11" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="11" pos:column="24">0<pos:position pos:line="11" pos:column="25"/></literal></expr></argument>, <argument><expr><sizeof pos:line="11" pos:column="27">sizeof<argument_list pos:line="11" pos:column="33">(<argument><expr><name pos:line="11" pos:column="34">hints<pos:position pos:line="11" pos:column="39"/></name></expr></argument>)<pos:position pos:line="11" pos:column="40"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="11" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="42"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="12" pos:column="9">memset<pos:position pos:line="12" pos:column="15"/></name><argument_list pos:line="12" pos:column="15">(<argument><expr><operator pos:line="12" pos:column="16">&amp;<pos:position pos:line="12" pos:column="21"/></operator><name pos:line="12" pos:column="17">service<pos:position pos:line="12" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="12" pos:column="26">0<pos:position pos:line="12" pos:column="27"/></literal></expr></argument>, <argument><expr><sizeof pos:line="12" pos:column="29">sizeof<argument_list pos:line="12" pos:column="35">(<argument><expr><name pos:line="12" pos:column="36">service<pos:position pos:line="12" pos:column="43"/></name></expr></argument>)<pos:position pos:line="12" pos:column="44"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="12" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="46"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="13" pos:column="9">hints<pos:position pos:line="13" pos:column="14"/></name><operator pos:line="13" pos:column="14">.<pos:position pos:line="13" pos:column="15"/></operator><name pos:line="13" pos:column="15">ai_family<pos:position pos:line="13" pos:column="24"/></name></name> <operator pos:line="13" pos:column="25">=<pos:position pos:line="13" pos:column="26"/></operator> <name pos:line="13" pos:column="27">AF_UNSPEC<pos:position pos:line="13" pos:column="36"/></name></expr>;<pos:position pos:line="13" pos:column="37"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="14" pos:column="9">hints<pos:position pos:line="14" pos:column="14"/></name><operator pos:line="14" pos:column="14">.<pos:position pos:line="14" pos:column="15"/></operator><name pos:line="14" pos:column="15">ai_socktype<pos:position pos:line="14" pos:column="26"/></name></name> <operator pos:line="14" pos:column="27">=<pos:position pos:line="14" pos:column="28"/></operator> <ternary><condition><expr><name><name pos:line="14" pos:column="29">host<pos:position pos:line="14" pos:column="33"/></name><operator pos:line="14" pos:column="33">-&gt;<pos:position pos:line="14" pos:column="38"/></operator><name pos:line="14" pos:column="35">use_tcp<pos:position pos:line="14" pos:column="42"/></name></name></expr> ?<pos:position pos:line="14" pos:column="44"/></condition><then pos:line="14" pos:column="44"> <expr><name pos:line="14" pos:column="45">SOCK_STREAM<pos:position pos:line="14" pos:column="56"/></name></expr> <pos:position pos:line="14" pos:column="57"/></then><else pos:line="14" pos:column="57">: <expr><name pos:line="14" pos:column="59">SOCK_DGRAM<pos:position pos:line="14" pos:column="69"/></name></expr></else></ternary></expr>;<pos:position pos:line="14" pos:column="70"/></expr_stmt>
<cpp:ifdef pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">ifdef<pos:position pos:line="15" pos:column="7"/></cpp:directive> <name pos:line="15" pos:column="8">AI_ADDRCONFIG<pos:position pos:line="15" pos:column="21"/></name></cpp:ifdef>
	<expr_stmt><expr><name><name pos:line="16" pos:column="9">hints<pos:position pos:line="16" pos:column="14"/></name><operator pos:line="16" pos:column="14">.<pos:position pos:line="16" pos:column="15"/></operator><name pos:line="16" pos:column="15">ai_flags<pos:position pos:line="16" pos:column="23"/></name></name> <operator pos:line="16" pos:column="24">|=<pos:position pos:line="16" pos:column="26"/></operator> <name pos:line="16" pos:column="27">AI_ADDRCONFIG<pos:position pos:line="16" pos:column="40"/></name></expr>;<pos:position pos:line="16" pos:column="41"/></expr_stmt>
<cpp:endif pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">endif<pos:position pos:line="17" pos:column="7"/></cpp:directive></cpp:endif>

	<expr_stmt><expr><name pos:line="19" pos:column="9">node<pos:position pos:line="19" pos:column="13"/></name> <operator pos:line="19" pos:column="14">=<pos:position pos:line="19" pos:column="15"/></operator> <ternary><condition><expr><operator pos:line="19" pos:column="16">(<pos:position pos:line="19" pos:column="17"/></operator><name><name pos:line="19" pos:column="17">host<pos:position pos:line="19" pos:column="21"/></name><operator pos:line="19" pos:column="21">-&gt;<pos:position pos:line="19" pos:column="26"/></operator><name pos:line="19" pos:column="23">node<pos:position pos:line="19" pos:column="27"/></name></name> <operator pos:line="19" pos:column="28">!=<pos:position pos:line="19" pos:column="30"/></operator> <name pos:line="19" pos:column="31">NULL<pos:position pos:line="19" pos:column="35"/></name><operator pos:line="19" pos:column="35">)<pos:position pos:line="19" pos:column="36"/></operator></expr> ?<pos:position pos:line="19" pos:column="38"/></condition><then pos:line="19" pos:column="38"> <expr><name><name pos:line="19" pos:column="39">host<pos:position pos:line="19" pos:column="43"/></name><operator pos:line="19" pos:column="43">-&gt;<pos:position pos:line="19" pos:column="48"/></operator><name pos:line="19" pos:column="45">node<pos:position pos:line="19" pos:column="49"/></name></name></expr> <pos:position pos:line="19" pos:column="50"/></then><else pos:line="19" pos:column="50">: <expr><name pos:line="19" pos:column="52">RIEMANN_HOST<pos:position pos:line="19" pos:column="64"/></name></expr></else></ternary></expr>;<pos:position pos:line="19" pos:column="65"/></expr_stmt>
	<expr_stmt><expr><name pos:line="20" pos:column="9">service<pos:position pos:line="20" pos:column="16"/></name> <operator pos:line="20" pos:column="17">=<pos:position pos:line="20" pos:column="18"/></operator> <ternary><condition><expr><operator pos:line="20" pos:column="19">(<pos:position pos:line="20" pos:column="20"/></operator><name><name pos:line="20" pos:column="20">host<pos:position pos:line="20" pos:column="24"/></name><operator pos:line="20" pos:column="24">-&gt;<pos:position pos:line="20" pos:column="29"/></operator><name pos:line="20" pos:column="26">service<pos:position pos:line="20" pos:column="33"/></name></name> <operator pos:line="20" pos:column="34">!=<pos:position pos:line="20" pos:column="36"/></operator> <name pos:line="20" pos:column="37">NULL<pos:position pos:line="20" pos:column="41"/></name><operator pos:line="20" pos:column="41">)<pos:position pos:line="20" pos:column="42"/></operator></expr> ?<pos:position pos:line="20" pos:column="44"/></condition><then pos:line="20" pos:column="44"> <expr><name><name pos:line="20" pos:column="45">host<pos:position pos:line="20" pos:column="49"/></name><operator pos:line="20" pos:column="49">-&gt;<pos:position pos:line="20" pos:column="54"/></operator><name pos:line="20" pos:column="51">service<pos:position pos:line="20" pos:column="58"/></name></name></expr> <pos:position pos:line="20" pos:column="59"/></then><else pos:line="20" pos:column="59">: <expr><name pos:line="20" pos:column="61">RIEMANN_PORT<pos:position pos:line="20" pos:column="73"/></name></expr></else></ternary></expr>;<pos:position pos:line="20" pos:column="74"/></expr_stmt>

	<if pos:line="22" pos:column="9">if <condition pos:line="22" pos:column="12">(<expr><operator pos:line="22" pos:column="13">(<pos:position pos:line="22" pos:column="14"/></operator><name pos:line="22" pos:column="14">e<pos:position pos:line="22" pos:column="15"/></name> <operator pos:line="22" pos:column="16">=<pos:position pos:line="22" pos:column="17"/></operator> <call><name pos:line="22" pos:column="18">getaddrinfo<pos:position pos:line="22" pos:column="29"/></name><argument_list pos:line="22" pos:column="29">(<argument><expr><name pos:line="22" pos:column="30">node<pos:position pos:line="22" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="36">service<pos:position pos:line="22" pos:column="43"/></name></expr></argument>, <argument><expr><operator pos:line="22" pos:column="45">&amp;<pos:position pos:line="22" pos:column="50"/></operator><name pos:line="22" pos:column="46">hints<pos:position pos:line="22" pos:column="51"/></name></expr></argument>, <argument><expr><operator pos:line="22" pos:column="53">&amp;<pos:position pos:line="22" pos:column="58"/></operator><name pos:line="22" pos:column="54">res<pos:position pos:line="22" pos:column="57"/></name></expr></argument>)<pos:position pos:line="22" pos:column="58"/></argument_list></call><operator pos:line="22" pos:column="58">)<pos:position pos:line="22" pos:column="59"/></operator> <operator pos:line="22" pos:column="60">!=<pos:position pos:line="22" pos:column="62"/></operator> <literal type="number" pos:line="22" pos:column="63">0<pos:position pos:line="22" pos:column="64"/></literal></expr>)<pos:position pos:line="22" pos:column="65"/></condition><then pos:line="22" pos:column="65"> <block pos:line="22" pos:column="66">{
		<expr_stmt><expr><call><name pos:line="23" pos:column="17">ERROR<pos:position pos:line="23" pos:column="22"/></name> <argument_list pos:line="23" pos:column="23">(<argument><expr><literal type="string" pos:line="23" pos:column="24">"write_riemann plugin: Unable to resolve host \"%s\": %s"<pos:position pos:line="23" pos:column="81"/></literal></expr></argument>,
			<argument><expr><name pos:line="24" pos:column="25">node<pos:position pos:line="24" pos:column="29"/></name></expr></argument>, <argument><expr><call><name pos:line="24" pos:column="31">gai_strerror<pos:position pos:line="24" pos:column="43"/></name><argument_list pos:line="24" pos:column="43">(<argument><expr><name pos:line="24" pos:column="44">e<pos:position pos:line="24" pos:column="45"/></name></expr></argument>)<pos:position pos:line="24" pos:column="46"/></argument_list></call></expr></argument>)<pos:position pos:line="24" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="48"/></expr_stmt>
		<return pos:line="25" pos:column="17">return <expr><operator pos:line="25" pos:column="24">-<pos:position pos:line="25" pos:column="25"/></operator><literal type="number" pos:line="25" pos:column="25">1<pos:position pos:line="25" pos:column="26"/></literal></expr>;<pos:position pos:line="25" pos:column="27"/></return>
	}<pos:position pos:line="26" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name><name pos:line="28" pos:column="9">host<pos:position pos:line="28" pos:column="13"/></name><operator pos:line="28" pos:column="13">-&gt;<pos:position pos:line="28" pos:column="18"/></operator><name pos:line="28" pos:column="15">s<pos:position pos:line="28" pos:column="16"/></name></name> <operator pos:line="28" pos:column="17">=<pos:position pos:line="28" pos:column="18"/></operator> <operator pos:line="28" pos:column="19">-<pos:position pos:line="28" pos:column="20"/></operator><literal type="number" pos:line="28" pos:column="20">1<pos:position pos:line="28" pos:column="21"/></literal></expr>;<pos:position pos:line="28" pos:column="22"/></expr_stmt>
	<for pos:line="29" pos:column="9">for <control pos:line="29" pos:column="13">(<init><expr><name pos:line="29" pos:column="14">ai<pos:position pos:line="29" pos:column="16"/></name> <operator pos:line="29" pos:column="17">=<pos:position pos:line="29" pos:column="18"/></operator> <name pos:line="29" pos:column="19">res<pos:position pos:line="29" pos:column="22"/></name></expr>;<pos:position pos:line="29" pos:column="23"/></init> <condition><expr><name pos:line="29" pos:column="24">ai<pos:position pos:line="29" pos:column="26"/></name> <operator pos:line="29" pos:column="27">!=<pos:position pos:line="29" pos:column="29"/></operator> <name pos:line="29" pos:column="30">NULL<pos:position pos:line="29" pos:column="34"/></name></expr>;<pos:position pos:line="29" pos:column="35"/></condition> <incr><expr><name pos:line="29" pos:column="36">ai<pos:position pos:line="29" pos:column="38"/></name> <operator pos:line="29" pos:column="39">=<pos:position pos:line="29" pos:column="40"/></operator> <name><name pos:line="29" pos:column="41">ai<pos:position pos:line="29" pos:column="43"/></name><operator pos:line="29" pos:column="43">-&gt;<pos:position pos:line="29" pos:column="48"/></operator><name pos:line="29" pos:column="45">ai_next<pos:position pos:line="29" pos:column="52"/></name></name></expr></incr>)<pos:position pos:line="29" pos:column="53"/></control> <block pos:line="29" pos:column="54">{
		<if pos:line="30" pos:column="17">if <condition pos:line="30" pos:column="20">(<expr><operator pos:line="30" pos:column="21">(<pos:position pos:line="30" pos:column="22"/></operator><name><name pos:line="30" pos:column="22">host<pos:position pos:line="30" pos:column="26"/></name><operator pos:line="30" pos:column="26">-&gt;<pos:position pos:line="30" pos:column="31"/></operator><name pos:line="30" pos:column="28">s<pos:position pos:line="30" pos:column="29"/></name></name> <operator pos:line="30" pos:column="30">=<pos:position pos:line="30" pos:column="31"/></operator> <call><name pos:line="30" pos:column="32">socket<pos:position pos:line="30" pos:column="38"/></name><argument_list pos:line="30" pos:column="38">(<argument><expr><name><name pos:line="30" pos:column="39">ai<pos:position pos:line="30" pos:column="41"/></name><operator pos:line="30" pos:column="41">-&gt;<pos:position pos:line="30" pos:column="46"/></operator><name pos:line="30" pos:column="43">ai_family<pos:position pos:line="30" pos:column="52"/></name></name></expr></argument>,
				      <argument><expr><name><name pos:line="31" pos:column="39">ai<pos:position pos:line="31" pos:column="41"/></name><operator pos:line="31" pos:column="41">-&gt;<pos:position pos:line="31" pos:column="46"/></operator><name pos:line="31" pos:column="43">ai_socktype<pos:position pos:line="31" pos:column="54"/></name></name></expr></argument>,
				      <argument><expr><name><name pos:line="32" pos:column="39">ai<pos:position pos:line="32" pos:column="41"/></name><operator pos:line="32" pos:column="41">-&gt;<pos:position pos:line="32" pos:column="46"/></operator><name pos:line="32" pos:column="43">ai_protocol<pos:position pos:line="32" pos:column="54"/></name></name></expr></argument>)<pos:position pos:line="32" pos:column="55"/></argument_list></call><operator pos:line="32" pos:column="55">)<pos:position pos:line="32" pos:column="56"/></operator> <operator pos:line="32" pos:column="57">==<pos:position pos:line="32" pos:column="59"/></operator> <operator pos:line="32" pos:column="60">-<pos:position pos:line="32" pos:column="61"/></operator><literal type="number" pos:line="32" pos:column="61">1<pos:position pos:line="32" pos:column="62"/></literal></expr>)<pos:position pos:line="32" pos:column="63"/></condition><then pos:line="32" pos:column="63"> <block pos:line="32" pos:column="64">{
			<continue pos:line="33" pos:column="25">continue;<pos:position pos:line="33" pos:column="34"/></continue>
		}<pos:position pos:line="34" pos:column="18"/></block></then></if>

		<if pos:line="36" pos:column="17">if <condition pos:line="36" pos:column="20">(<expr><call><name pos:line="36" pos:column="21">connect<pos:position pos:line="36" pos:column="28"/></name><argument_list pos:line="36" pos:column="28">(<argument><expr><name><name pos:line="36" pos:column="29">host<pos:position pos:line="36" pos:column="33"/></name><operator pos:line="36" pos:column="33">-&gt;<pos:position pos:line="36" pos:column="38"/></operator><name pos:line="36" pos:column="35">s<pos:position pos:line="36" pos:column="36"/></name></name></expr></argument>, <argument><expr><name><name pos:line="36" pos:column="38">ai<pos:position pos:line="36" pos:column="40"/></name><operator pos:line="36" pos:column="40">-&gt;<pos:position pos:line="36" pos:column="45"/></operator><name pos:line="36" pos:column="42">ai_addr<pos:position pos:line="36" pos:column="49"/></name></name></expr></argument>, <argument><expr><name><name pos:line="36" pos:column="51">ai<pos:position pos:line="36" pos:column="53"/></name><operator pos:line="36" pos:column="53">-&gt;<pos:position pos:line="36" pos:column="58"/></operator><name pos:line="36" pos:column="55">ai_addrlen<pos:position pos:line="36" pos:column="65"/></name></name></expr></argument>)<pos:position pos:line="36" pos:column="66"/></argument_list></call> <operator pos:line="36" pos:column="67">!=<pos:position pos:line="36" pos:column="69"/></operator> <literal type="number" pos:line="36" pos:column="70">0<pos:position pos:line="36" pos:column="71"/></literal></expr>)<pos:position pos:line="36" pos:column="72"/></condition><then pos:line="36" pos:column="72"> <block pos:line="36" pos:column="73">{
			<expr_stmt><expr><call><name pos:line="37" pos:column="25">close<pos:position pos:line="37" pos:column="30"/></name><argument_list pos:line="37" pos:column="30">(<argument><expr><name><name pos:line="37" pos:column="31">host<pos:position pos:line="37" pos:column="35"/></name><operator pos:line="37" pos:column="35">-&gt;<pos:position pos:line="37" pos:column="40"/></operator><name pos:line="37" pos:column="37">s<pos:position pos:line="37" pos:column="38"/></name></name></expr></argument>)<pos:position pos:line="37" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="40"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="38" pos:column="25">host<pos:position pos:line="38" pos:column="29"/></name><operator pos:line="38" pos:column="29">-&gt;<pos:position pos:line="38" pos:column="34"/></operator><name pos:line="38" pos:column="31">s<pos:position pos:line="38" pos:column="32"/></name></name> <operator pos:line="38" pos:column="33">=<pos:position pos:line="38" pos:column="34"/></operator> <operator pos:line="38" pos:column="35">-<pos:position pos:line="38" pos:column="36"/></operator><literal type="number" pos:line="38" pos:column="36">1<pos:position pos:line="38" pos:column="37"/></literal></expr>;<pos:position pos:line="38" pos:column="38"/></expr_stmt>
			<continue pos:line="39" pos:column="25">continue;<pos:position pos:line="39" pos:column="34"/></continue>
		}<pos:position pos:line="40" pos:column="18"/></block></then></if>

		<expr_stmt><expr><name><name pos:line="42" pos:column="17">host<pos:position pos:line="42" pos:column="21"/></name><operator pos:line="42" pos:column="21">-&gt;<pos:position pos:line="42" pos:column="26"/></operator><name pos:line="42" pos:column="23">flags<pos:position pos:line="42" pos:column="28"/></name></name> <operator pos:line="42" pos:column="29">|=<pos:position pos:line="42" pos:column="31"/></operator> <name pos:line="42" pos:column="32">F_CONNECT<pos:position pos:line="42" pos:column="41"/></name></expr>;<pos:position pos:line="42" pos:column="42"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="43" pos:column="17">DEBUG<pos:position pos:line="43" pos:column="22"/></name><argument_list pos:line="43" pos:column="22">(<argument><expr><literal type="string" pos:line="43" pos:column="23">"write_riemann plugin: got a successful connection for: %s:%s"<pos:position pos:line="43" pos:column="85"/></literal></expr></argument>,
				<argument><expr><name pos:line="44" pos:column="33">node<pos:position pos:line="44" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="39">service<pos:position pos:line="44" pos:column="46"/></name></expr></argument>)<pos:position pos:line="44" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="48"/></expr_stmt>
		<break pos:line="45" pos:column="17">break;<pos:position pos:line="45" pos:column="23"/></break>
	}<pos:position pos:line="46" pos:column="10"/></block></for>

	<expr_stmt><expr><call><name pos:line="48" pos:column="9">freeaddrinfo<pos:position pos:line="48" pos:column="21"/></name><argument_list pos:line="48" pos:column="21">(<argument><expr><name pos:line="48" pos:column="22">res<pos:position pos:line="48" pos:column="25"/></name></expr></argument>)<pos:position pos:line="48" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="27"/></expr_stmt>

	<if pos:line="50" pos:column="9">if <condition pos:line="50" pos:column="12">(<expr><name><name pos:line="50" pos:column="13">host<pos:position pos:line="50" pos:column="17"/></name><operator pos:line="50" pos:column="17">-&gt;<pos:position pos:line="50" pos:column="22"/></operator><name pos:line="50" pos:column="19">s<pos:position pos:line="50" pos:column="20"/></name></name> <operator pos:line="50" pos:column="21">&lt;<pos:position pos:line="50" pos:column="25"/></operator> <literal type="number" pos:line="50" pos:column="23">0<pos:position pos:line="50" pos:column="24"/></literal></expr>)<pos:position pos:line="50" pos:column="25"/></condition><then pos:line="50" pos:column="25"> <block pos:line="50" pos:column="26">{
		<expr_stmt><expr><call><name pos:line="51" pos:column="17">WARNING<pos:position pos:line="51" pos:column="24"/></name><argument_list pos:line="51" pos:column="24">(<argument><expr><literal type="string" pos:line="51" pos:column="25">"write_riemann plugin: Unable to connect to Riemann at %s:%s"<pos:position pos:line="51" pos:column="86"/></literal></expr></argument>,
				<argument><expr><name pos:line="52" pos:column="33">node<pos:position pos:line="52" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="39">service<pos:position pos:line="52" pos:column="46"/></name></expr></argument>)<pos:position pos:line="52" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="48"/></expr_stmt>
		<return pos:line="53" pos:column="17">return <expr><operator pos:line="53" pos:column="24">-<pos:position pos:line="53" pos:column="25"/></operator><literal type="number" pos:line="53" pos:column="25">1<pos:position pos:line="53" pos:column="26"/></literal></expr>;<pos:position pos:line="53" pos:column="27"/></return>
	}<pos:position pos:line="54" pos:column="10"/></block></then></if>
	<return pos:line="55" pos:column="9">return <expr><literal type="number" pos:line="55" pos:column="16">0<pos:position pos:line="55" pos:column="17"/></literal></expr>;<pos:position pos:line="55" pos:column="18"/></return>
}<pos:position pos:line="56" pos:column="2"/></block></function></unit>
