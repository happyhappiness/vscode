<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_2149_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">xencpu_read<pos:position pos:line="1" pos:column="23"/></name><parameter_list pos:line="1" pos:column="23">(<parameter><decl><type><name pos:line="1" pos:column="24">void<pos:position pos:line="1" pos:column="28"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="29"/></parameter_list> <block pos:line="1" pos:column="30">{
  <decl_stmt><decl><type><name pos:line="2" pos:column="3">cdtime_t<pos:position pos:line="2" pos:column="11"/></name></type> <name pos:line="2" pos:column="12">now<pos:position pos:line="2" pos:column="15"/></name> <init pos:line="2" pos:column="16">= <expr><call><name pos:line="2" pos:column="18">cdtime<pos:position pos:line="2" pos:column="24"/></name><argument_list pos:line="2" pos:column="24">()<pos:position pos:line="2" pos:column="26"/></argument_list></call></expr></init></decl>;<pos:position pos:line="2" pos:column="27"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="4" pos:column="3">int<pos:position pos:line="4" pos:column="6"/></name></type> <name pos:line="4" pos:column="7">rc<pos:position pos:line="4" pos:column="9"/></name></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="11">nr_cpus<pos:position pos:line="4" pos:column="18"/></name></decl>;<pos:position pos:line="4" pos:column="19"/></decl_stmt>

  <expr_stmt><expr><name pos:line="6" pos:column="3">rc<pos:position pos:line="6" pos:column="5"/></name> <operator pos:line="6" pos:column="6">=<pos:position pos:line="6" pos:column="7"/></operator> <call><name pos:line="6" pos:column="8">xc_getcpuinfo<pos:position pos:line="6" pos:column="21"/></name><argument_list pos:line="6" pos:column="21">(<argument><expr><name pos:line="6" pos:column="22">xc_handle<pos:position pos:line="6" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="6" pos:column="33">num_cpus<pos:position pos:line="6" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="6" pos:column="43">cpu_info<pos:position pos:line="6" pos:column="51"/></name></expr></argument>, <argument><expr><operator pos:line="6" pos:column="53">&amp;<pos:position pos:line="6" pos:column="58"/></operator><name pos:line="6" pos:column="54">nr_cpus<pos:position pos:line="6" pos:column="61"/></name></expr></argument>)<pos:position pos:line="6" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="63"/></expr_stmt>
  <if pos:line="7" pos:column="3">if <condition pos:line="7" pos:column="6">(<expr><name pos:line="7" pos:column="7">rc<pos:position pos:line="7" pos:column="9"/></name> <operator pos:line="7" pos:column="10">&lt;<pos:position pos:line="7" pos:column="14"/></operator> <literal type="number" pos:line="7" pos:column="12">0<pos:position pos:line="7" pos:column="13"/></literal></expr>)<pos:position pos:line="7" pos:column="14"/></condition><then pos:line="7" pos:column="14"> <block pos:line="7" pos:column="15">{
    <expr_stmt><expr><call><name pos:line="8" pos:column="5">ERROR<pos:position pos:line="8" pos:column="10"/></name><argument_list pos:line="8" pos:column="10">(<argument><expr><literal type="string" pos:line="8" pos:column="11">"xencpu: xc_getcpuinfo() Failed: %d %s\n"<pos:position pos:line="8" pos:column="52"/></literal></expr></argument>, <argument><expr><name pos:line="8" pos:column="54">rc<pos:position pos:line="8" pos:column="56"/></name></expr></argument>,
          <argument><expr><call><name pos:line="9" pos:column="11">xc_strerror<pos:position pos:line="9" pos:column="22"/></name><argument_list pos:line="9" pos:column="22">(<argument><expr><name pos:line="9" pos:column="23">xc_handle<pos:position pos:line="9" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="34">errno<pos:position pos:line="9" pos:column="39"/></name></expr></argument>)<pos:position pos:line="9" pos:column="40"/></argument_list></call></expr></argument>)<pos:position pos:line="9" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="42"/></expr_stmt>
    <return pos:line="10" pos:column="5">return <expr><operator pos:line="10" pos:column="12">-<pos:position pos:line="10" pos:column="13"/></operator><literal type="number" pos:line="10" pos:column="13">1<pos:position pos:line="10" pos:column="14"/></literal></expr>;<pos:position pos:line="10" pos:column="15"/></return>
  }<pos:position pos:line="11" pos:column="4"/></block></then></if>

  <decl_stmt><decl><type><name pos:line="13" pos:column="3">int<pos:position pos:line="13" pos:column="6"/></name></type> <name pos:line="13" pos:column="7">status<pos:position pos:line="13" pos:column="13"/></name></decl>;<pos:position pos:line="13" pos:column="14"/></decl_stmt>
  <for pos:line="14" pos:column="3">for <control pos:line="14" pos:column="7">(<init><decl><type><name pos:line="14" pos:column="8">int<pos:position pos:line="14" pos:column="11"/></name></type> <name pos:line="14" pos:column="12">cpu<pos:position pos:line="14" pos:column="15"/></name> <init pos:line="14" pos:column="16">= <expr><literal type="number" pos:line="14" pos:column="18">0<pos:position pos:line="14" pos:column="19"/></literal></expr></init></decl>;<pos:position pos:line="14" pos:column="20"/></init> <condition><expr><name pos:line="14" pos:column="21">cpu<pos:position pos:line="14" pos:column="24"/></name> <operator pos:line="14" pos:column="25">&lt;<pos:position pos:line="14" pos:column="29"/></operator> <name pos:line="14" pos:column="27">nr_cpus<pos:position pos:line="14" pos:column="34"/></name></expr>;<pos:position pos:line="14" pos:column="35"/></condition> <incr><expr><name pos:line="14" pos:column="36">cpu<pos:position pos:line="14" pos:column="39"/></name><operator pos:line="14" pos:column="39">++<pos:position pos:line="14" pos:column="41"/></operator></expr></incr>)<pos:position pos:line="14" pos:column="42"/></control> <block pos:line="14" pos:column="43">{
    <decl_stmt><decl><type><name pos:line="15" pos:column="5">gauge_t<pos:position pos:line="15" pos:column="12"/></name></type> <name pos:line="15" pos:column="13">rate<pos:position pos:line="15" pos:column="17"/></name> <init pos:line="15" pos:column="18">= <expr><name pos:line="15" pos:column="20">NAN<pos:position pos:line="15" pos:column="23"/></name></expr></init></decl>;<pos:position pos:line="15" pos:column="24"/></decl_stmt>

    <expr_stmt><expr><name pos:line="17" pos:column="5">status<pos:position pos:line="17" pos:column="11"/></name> <operator pos:line="17" pos:column="12">=<pos:position pos:line="17" pos:column="13"/></operator> <call><name pos:line="17" pos:column="14">value_to_rate<pos:position pos:line="17" pos:column="27"/></name><argument_list pos:line="17" pos:column="27">(<argument><expr><operator pos:line="17" pos:column="28">&amp;<pos:position pos:line="17" pos:column="33"/></operator><name pos:line="17" pos:column="29">rate<pos:position pos:line="17" pos:column="33"/></name></expr></argument>, <argument><expr><operator pos:line="17" pos:column="35">(<pos:position pos:line="17" pos:column="36"/></operator><name pos:line="17" pos:column="36">value_t<pos:position pos:line="17" pos:column="43"/></name><operator pos:line="17" pos:column="43">)<pos:position pos:line="17" pos:column="44"/></operator><block pos:line="17" pos:column="44">{<expr><operator pos:line="17" pos:column="45">.<pos:position pos:line="17" pos:column="46"/></operator><name pos:line="17" pos:column="46">derive<pos:position pos:line="17" pos:column="52"/></name> <operator pos:line="17" pos:column="53">=<pos:position pos:line="17" pos:column="54"/></operator> <name><name pos:line="17" pos:column="55">cpu_info<pos:position pos:line="17" pos:column="63"/></name><index pos:line="17" pos:column="63">[<expr><name pos:line="17" pos:column="64">cpu<pos:position pos:line="17" pos:column="67"/></name></expr>]<pos:position pos:line="17" pos:column="68"/></index></name><operator pos:line="17" pos:column="68">.<pos:position pos:line="17" pos:column="69"/></operator><name pos:line="17" pos:column="69">idletime<pos:position pos:line="17" pos:column="77"/></name></expr>}<pos:position pos:line="17" pos:column="78"/></block></expr></argument>,
                           <argument><expr><name pos:line="18" pos:column="28">DS_TYPE_DERIVE<pos:position pos:line="18" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="44">now<pos:position pos:line="18" pos:column="47"/></name></expr></argument>, <argument><expr><operator pos:line="18" pos:column="49">&amp;<pos:position pos:line="18" pos:column="54"/></operator><name><name pos:line="18" pos:column="50">cpu_states<pos:position pos:line="18" pos:column="60"/></name><index pos:line="18" pos:column="60">[<expr><name pos:line="18" pos:column="61">cpu<pos:position pos:line="18" pos:column="64"/></name></expr>]<pos:position pos:line="18" pos:column="65"/></index></name></expr></argument>)<pos:position pos:line="18" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="67"/></expr_stmt>
    <if pos:line="19" pos:column="5">if <condition pos:line="19" pos:column="8">(<expr><name pos:line="19" pos:column="9">status<pos:position pos:line="19" pos:column="15"/></name> <operator pos:line="19" pos:column="16">==<pos:position pos:line="19" pos:column="18"/></operator> <literal type="number" pos:line="19" pos:column="19">0<pos:position pos:line="19" pos:column="20"/></literal></expr>)<pos:position pos:line="19" pos:column="21"/></condition><then pos:line="19" pos:column="21"> <block pos:line="19" pos:column="22">{
      <expr_stmt><expr><call><name pos:line="20" pos:column="7">submit_value<pos:position pos:line="20" pos:column="19"/></name><argument_list pos:line="20" pos:column="19">(<argument><expr><name pos:line="20" pos:column="20">cpu<pos:position pos:line="20" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="20" pos:column="25">100<pos:position pos:line="20" pos:column="28"/></literal> <operator pos:line="20" pos:column="29">-<pos:position pos:line="20" pos:column="30"/></operator> <name pos:line="20" pos:column="31">rate<pos:position pos:line="20" pos:column="35"/></name> <operator pos:line="20" pos:column="36">/<pos:position pos:line="20" pos:column="37"/></operator> <literal type="number" pos:line="20" pos:column="38">10000000<pos:position pos:line="20" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="48"/></expr_stmt>
    }<pos:position pos:line="21" pos:column="6"/></block></then></if>
  }<pos:position pos:line="22" pos:column="4"/></block></for>

  <return pos:line="24" pos:column="3">return <expr><literal type="number" pos:line="24" pos:column="10">0<pos:position pos:line="24" pos:column="11"/></literal></expr>;<pos:position pos:line="24" pos:column="12"/></return>
}<pos:position pos:line="25" pos:column="2"/></block></function></unit>
