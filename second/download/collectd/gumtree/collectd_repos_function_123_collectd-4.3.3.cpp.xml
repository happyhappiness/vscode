<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_123_collectd-4.3.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">fork_child<pos:position pos:line="1" pos:column="22"/></name> <parameter_list pos:line="1" pos:column="23">(<parameter><decl><type><name pos:line="1" pos:column="24">program_list_t<pos:position pos:line="1" pos:column="38"/></name> <modifier pos:line="1" pos:column="39">*<pos:position pos:line="1" pos:column="40"/></modifier></type><name pos:line="1" pos:column="40">pl<pos:position pos:line="1" pos:column="42"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="44">int<pos:position pos:line="1" pos:column="47"/></name> <modifier pos:line="1" pos:column="48">*<pos:position pos:line="1" pos:column="49"/></modifier></type><name pos:line="1" pos:column="49">fd_in<pos:position pos:line="1" pos:column="54"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="56">int<pos:position pos:line="1" pos:column="59"/></name> <modifier pos:line="1" pos:column="60">*<pos:position pos:line="1" pos:column="61"/></modifier></type><name pos:line="1" pos:column="61">fd_out<pos:position pos:line="1" pos:column="67"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="68"/></parameter_list> <comment type="block" pos:line="1" pos:column="69">/* {{{ */</comment>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">int<pos:position pos:line="3" pos:column="6"/></name></type> <name><name pos:line="3" pos:column="7">fd_pipe_in<pos:position pos:line="3" pos:column="17"/></name><index pos:line="3" pos:column="17">[<expr><literal type="number" pos:line="3" pos:column="18">2<pos:position pos:line="3" pos:column="19"/></literal></expr>]<pos:position pos:line="3" pos:column="20"/></index></name></decl>;<pos:position pos:line="3" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">int<pos:position pos:line="4" pos:column="6"/></name></type> <name><name pos:line="4" pos:column="7">fd_pipe_out<pos:position pos:line="4" pos:column="18"/></name><index pos:line="4" pos:column="18">[<expr><literal type="number" pos:line="4" pos:column="19">2<pos:position pos:line="4" pos:column="20"/></literal></expr>]<pos:position pos:line="4" pos:column="21"/></index></name></decl>;<pos:position pos:line="4" pos:column="22"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">int<pos:position pos:line="5" pos:column="6"/></name></type> <name pos:line="5" pos:column="7">status<pos:position pos:line="5" pos:column="13"/></name></decl>;<pos:position pos:line="5" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">int<pos:position pos:line="6" pos:column="6"/></name></type> <name pos:line="6" pos:column="7">pid<pos:position pos:line="6" pos:column="10"/></name></decl>;<pos:position pos:line="6" pos:column="11"/></decl_stmt>

  <if pos:line="8" pos:column="3">if <condition pos:line="8" pos:column="6">(<expr><name><name pos:line="8" pos:column="7">pl<pos:position pos:line="8" pos:column="9"/></name><operator pos:line="8" pos:column="9">-&gt;<pos:position pos:line="8" pos:column="14"/></operator><name pos:line="8" pos:column="11">pid<pos:position pos:line="8" pos:column="14"/></name></name> <operator pos:line="8" pos:column="15">!=<pos:position pos:line="8" pos:column="17"/></operator> <literal type="number" pos:line="8" pos:column="18">0<pos:position pos:line="8" pos:column="19"/></literal></expr>)<pos:position pos:line="8" pos:column="20"/></condition><then pos:line="8" pos:column="20">
    <block type="pseudo"><return pos:line="9" pos:column="5">return <expr><operator pos:line="9" pos:column="12">(<pos:position pos:line="9" pos:column="13"/></operator><operator pos:line="9" pos:column="13">-<pos:position pos:line="9" pos:column="14"/></operator><literal type="number" pos:line="9" pos:column="14">1<pos:position pos:line="9" pos:column="15"/></literal><operator pos:line="9" pos:column="15">)<pos:position pos:line="9" pos:column="16"/></operator></expr>;<pos:position pos:line="9" pos:column="17"/></return></block></then></if>

  <expr_stmt><expr><name pos:line="11" pos:column="3">status<pos:position pos:line="11" pos:column="9"/></name> <operator pos:line="11" pos:column="10">=<pos:position pos:line="11" pos:column="11"/></operator> <call><name pos:line="11" pos:column="12">pipe<pos:position pos:line="11" pos:column="16"/></name> <argument_list pos:line="11" pos:column="17">(<argument><expr><name pos:line="11" pos:column="18">fd_pipe_in<pos:position pos:line="11" pos:column="28"/></name></expr></argument>)<pos:position pos:line="11" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="30"/></expr_stmt>
  <if pos:line="12" pos:column="3">if <condition pos:line="12" pos:column="6">(<expr><name pos:line="12" pos:column="7">status<pos:position pos:line="12" pos:column="13"/></name> <operator pos:line="12" pos:column="14">!=<pos:position pos:line="12" pos:column="16"/></operator> <literal type="number" pos:line="12" pos:column="17">0<pos:position pos:line="12" pos:column="18"/></literal></expr>)<pos:position pos:line="12" pos:column="19"/></condition><then pos:line="12" pos:column="19">
  <block pos:line="13" pos:column="3">{
    <decl_stmt><decl><type><name pos:line="14" pos:column="5">char<pos:position pos:line="14" pos:column="9"/></name></type> <name><name pos:line="14" pos:column="10">errbuf<pos:position pos:line="14" pos:column="16"/></name><index pos:line="14" pos:column="16">[<expr><literal type="number" pos:line="14" pos:column="17">1024<pos:position pos:line="14" pos:column="21"/></literal></expr>]<pos:position pos:line="14" pos:column="22"/></index></name></decl>;<pos:position pos:line="14" pos:column="23"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="15" pos:column="5">ERROR<pos:position pos:line="15" pos:column="10"/></name> <argument_list pos:line="15" pos:column="11">(<argument><expr><literal type="string" pos:line="15" pos:column="12">"exec plugin: pipe failed: %s"<pos:position pos:line="15" pos:column="42"/></literal></expr></argument>,
	<argument><expr><call><name pos:line="16" pos:column="9">sstrerror<pos:position pos:line="16" pos:column="18"/></name> <argument_list pos:line="16" pos:column="19">(<argument><expr><name pos:line="16" pos:column="20">errno<pos:position pos:line="16" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="27">errbuf<pos:position pos:line="16" pos:column="33"/></name></expr></argument>, <argument><expr><sizeof pos:line="16" pos:column="35">sizeof <argument_list pos:line="16" pos:column="42">(<argument><expr><name pos:line="16" pos:column="43">errbuf<pos:position pos:line="16" pos:column="49"/></name></expr></argument>)<pos:position pos:line="16" pos:column="50"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="16" pos:column="51"/></argument_list></call></expr></argument>)<pos:position pos:line="16" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="53"/></expr_stmt>
    <return pos:line="17" pos:column="5">return <expr><operator pos:line="17" pos:column="12">(<pos:position pos:line="17" pos:column="13"/></operator><operator pos:line="17" pos:column="13">-<pos:position pos:line="17" pos:column="14"/></operator><literal type="number" pos:line="17" pos:column="14">1<pos:position pos:line="17" pos:column="15"/></literal><operator pos:line="17" pos:column="15">)<pos:position pos:line="17" pos:column="16"/></operator></expr>;<pos:position pos:line="17" pos:column="17"/></return>
  }<pos:position pos:line="18" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="20" pos:column="3">status<pos:position pos:line="20" pos:column="9"/></name> <operator pos:line="20" pos:column="10">=<pos:position pos:line="20" pos:column="11"/></operator> <call><name pos:line="20" pos:column="12">pipe<pos:position pos:line="20" pos:column="16"/></name> <argument_list pos:line="20" pos:column="17">(<argument><expr><name pos:line="20" pos:column="18">fd_pipe_out<pos:position pos:line="20" pos:column="29"/></name></expr></argument>)<pos:position pos:line="20" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="31"/></expr_stmt>
  <if pos:line="21" pos:column="3">if <condition pos:line="21" pos:column="6">(<expr><name pos:line="21" pos:column="7">status<pos:position pos:line="21" pos:column="13"/></name> <operator pos:line="21" pos:column="14">!=<pos:position pos:line="21" pos:column="16"/></operator> <literal type="number" pos:line="21" pos:column="17">0<pos:position pos:line="21" pos:column="18"/></literal></expr>)<pos:position pos:line="21" pos:column="19"/></condition><then pos:line="21" pos:column="19">
  <block pos:line="22" pos:column="3">{
    <decl_stmt><decl><type><name pos:line="23" pos:column="5">char<pos:position pos:line="23" pos:column="9"/></name></type> <name><name pos:line="23" pos:column="10">errbuf<pos:position pos:line="23" pos:column="16"/></name><index pos:line="23" pos:column="16">[<expr><literal type="number" pos:line="23" pos:column="17">1024<pos:position pos:line="23" pos:column="21"/></literal></expr>]<pos:position pos:line="23" pos:column="22"/></index></name></decl>;<pos:position pos:line="23" pos:column="23"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="24" pos:column="5">ERROR<pos:position pos:line="24" pos:column="10"/></name> <argument_list pos:line="24" pos:column="11">(<argument><expr><literal type="string" pos:line="24" pos:column="12">"exec plugin: pipe failed: %s"<pos:position pos:line="24" pos:column="42"/></literal></expr></argument>,
	<argument><expr><call><name pos:line="25" pos:column="9">sstrerror<pos:position pos:line="25" pos:column="18"/></name> <argument_list pos:line="25" pos:column="19">(<argument><expr><name pos:line="25" pos:column="20">errno<pos:position pos:line="25" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="27">errbuf<pos:position pos:line="25" pos:column="33"/></name></expr></argument>, <argument><expr><sizeof pos:line="25" pos:column="35">sizeof <argument_list pos:line="25" pos:column="42">(<argument><expr><name pos:line="25" pos:column="43">errbuf<pos:position pos:line="25" pos:column="49"/></name></expr></argument>)<pos:position pos:line="25" pos:column="50"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="25" pos:column="51"/></argument_list></call></expr></argument>)<pos:position pos:line="25" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="53"/></expr_stmt>
    <return pos:line="26" pos:column="5">return <expr><operator pos:line="26" pos:column="12">(<pos:position pos:line="26" pos:column="13"/></operator><operator pos:line="26" pos:column="13">-<pos:position pos:line="26" pos:column="14"/></operator><literal type="number" pos:line="26" pos:column="14">1<pos:position pos:line="26" pos:column="15"/></literal><operator pos:line="26" pos:column="15">)<pos:position pos:line="26" pos:column="16"/></operator></expr>;<pos:position pos:line="26" pos:column="17"/></return>
  }<pos:position pos:line="27" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="29" pos:column="3">pid<pos:position pos:line="29" pos:column="6"/></name> <operator pos:line="29" pos:column="7">=<pos:position pos:line="29" pos:column="8"/></operator> <call><name pos:line="29" pos:column="9">fork<pos:position pos:line="29" pos:column="13"/></name> <argument_list pos:line="29" pos:column="14">()<pos:position pos:line="29" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="17"/></expr_stmt>
  <if pos:line="30" pos:column="3">if <condition pos:line="30" pos:column="6">(<expr><name pos:line="30" pos:column="7">pid<pos:position pos:line="30" pos:column="10"/></name> <operator pos:line="30" pos:column="11">&lt;<pos:position pos:line="30" pos:column="15"/></operator> <literal type="number" pos:line="30" pos:column="13">0<pos:position pos:line="30" pos:column="14"/></literal></expr>)<pos:position pos:line="30" pos:column="15"/></condition><then pos:line="30" pos:column="15">
  <block pos:line="31" pos:column="3">{
    <decl_stmt><decl><type><name pos:line="32" pos:column="5">char<pos:position pos:line="32" pos:column="9"/></name></type> <name><name pos:line="32" pos:column="10">errbuf<pos:position pos:line="32" pos:column="16"/></name><index pos:line="32" pos:column="16">[<expr><literal type="number" pos:line="32" pos:column="17">1024<pos:position pos:line="32" pos:column="21"/></literal></expr>]<pos:position pos:line="32" pos:column="22"/></index></name></decl>;<pos:position pos:line="32" pos:column="23"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="33" pos:column="5">ERROR<pos:position pos:line="33" pos:column="10"/></name> <argument_list pos:line="33" pos:column="11">(<argument><expr><literal type="string" pos:line="33" pos:column="12">"exec plugin: fork failed: %s"<pos:position pos:line="33" pos:column="42"/></literal></expr></argument>,
	<argument><expr><call><name pos:line="34" pos:column="9">sstrerror<pos:position pos:line="34" pos:column="18"/></name> <argument_list pos:line="34" pos:column="19">(<argument><expr><name pos:line="34" pos:column="20">errno<pos:position pos:line="34" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="27">errbuf<pos:position pos:line="34" pos:column="33"/></name></expr></argument>, <argument><expr><sizeof pos:line="34" pos:column="35">sizeof <argument_list pos:line="34" pos:column="42">(<argument><expr><name pos:line="34" pos:column="43">errbuf<pos:position pos:line="34" pos:column="49"/></name></expr></argument>)<pos:position pos:line="34" pos:column="50"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="34" pos:column="51"/></argument_list></call></expr></argument>)<pos:position pos:line="34" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="53"/></expr_stmt>
    <return pos:line="35" pos:column="5">return <expr><operator pos:line="35" pos:column="12">(<pos:position pos:line="35" pos:column="13"/></operator><operator pos:line="35" pos:column="13">-<pos:position pos:line="35" pos:column="14"/></operator><literal type="number" pos:line="35" pos:column="14">1<pos:position pos:line="35" pos:column="15"/></literal><operator pos:line="35" pos:column="15">)<pos:position pos:line="35" pos:column="16"/></operator></expr>;<pos:position pos:line="35" pos:column="17"/></return>
  }<pos:position pos:line="36" pos:column="4"/></block></then>
  <elseif pos:line="37" pos:column="3">else <if pos:line="37" pos:column="8">if <condition pos:line="37" pos:column="11">(<expr><name pos:line="37" pos:column="12">pid<pos:position pos:line="37" pos:column="15"/></name> <operator pos:line="37" pos:column="16">==<pos:position pos:line="37" pos:column="18"/></operator> <literal type="number" pos:line="37" pos:column="19">0<pos:position pos:line="37" pos:column="20"/></literal></expr>)<pos:position pos:line="37" pos:column="21"/></condition><then pos:line="37" pos:column="21">
  <block pos:line="38" pos:column="3">{
    <decl_stmt><decl><type><name pos:line="39" pos:column="5">int<pos:position pos:line="39" pos:column="8"/></name></type> <name pos:line="39" pos:column="9">fd_num<pos:position pos:line="39" pos:column="15"/></name></decl>;<pos:position pos:line="39" pos:column="16"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="40" pos:column="5">int<pos:position pos:line="40" pos:column="8"/></name></type> <name pos:line="40" pos:column="9">fd<pos:position pos:line="40" pos:column="11"/></name></decl>;<pos:position pos:line="40" pos:column="12"/></decl_stmt>

    <comment type="block" pos:line="42" pos:column="5">/* Close all file descriptors but the pipe end we need. */</comment>
    <expr_stmt><expr><name pos:line="43" pos:column="5">fd_num<pos:position pos:line="43" pos:column="11"/></name> <operator pos:line="43" pos:column="12">=<pos:position pos:line="43" pos:column="13"/></operator> <call><name pos:line="43" pos:column="14">getdtablesize<pos:position pos:line="43" pos:column="27"/></name> <argument_list pos:line="43" pos:column="28">()<pos:position pos:line="43" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="31"/></expr_stmt>
    <for pos:line="44" pos:column="5">for <control pos:line="44" pos:column="9">(<init><expr><name pos:line="44" pos:column="10">fd<pos:position pos:line="44" pos:column="12"/></name> <operator pos:line="44" pos:column="13">=<pos:position pos:line="44" pos:column="14"/></operator> <literal type="number" pos:line="44" pos:column="15">0<pos:position pos:line="44" pos:column="16"/></literal></expr>;<pos:position pos:line="44" pos:column="17"/></init> <condition><expr><name pos:line="44" pos:column="18">fd<pos:position pos:line="44" pos:column="20"/></name> <operator pos:line="44" pos:column="21">&lt;<pos:position pos:line="44" pos:column="25"/></operator> <name pos:line="44" pos:column="23">fd_num<pos:position pos:line="44" pos:column="29"/></name></expr>;<pos:position pos:line="44" pos:column="30"/></condition> <incr><expr><name pos:line="44" pos:column="31">fd<pos:position pos:line="44" pos:column="33"/></name><operator pos:line="44" pos:column="33">++<pos:position pos:line="44" pos:column="35"/></operator></expr></incr>)<pos:position pos:line="44" pos:column="36"/></control>
    <block pos:line="45" pos:column="5">{
      <if pos:line="46" pos:column="7">if <condition pos:line="46" pos:column="10">(<expr><operator pos:line="46" pos:column="11">(<pos:position pos:line="46" pos:column="12"/></operator><name pos:line="46" pos:column="12">fd<pos:position pos:line="46" pos:column="14"/></name> <operator pos:line="46" pos:column="15">==<pos:position pos:line="46" pos:column="17"/></operator> <name><name pos:line="46" pos:column="18">fd_pipe_in<pos:position pos:line="46" pos:column="28"/></name><index pos:line="46" pos:column="28">[<expr><literal type="number" pos:line="46" pos:column="29">0<pos:position pos:line="46" pos:column="30"/></literal></expr>]<pos:position pos:line="46" pos:column="31"/></index></name><operator pos:line="46" pos:column="31">)<pos:position pos:line="46" pos:column="32"/></operator> <operator pos:line="46" pos:column="33">||<pos:position pos:line="46" pos:column="35"/></operator> <operator pos:line="46" pos:column="36">(<pos:position pos:line="46" pos:column="37"/></operator><name pos:line="46" pos:column="37">fd<pos:position pos:line="46" pos:column="39"/></name> <operator pos:line="46" pos:column="40">==<pos:position pos:line="46" pos:column="42"/></operator> <name><name pos:line="46" pos:column="43">fd_pipe_out<pos:position pos:line="46" pos:column="54"/></name><index pos:line="46" pos:column="54">[<expr><literal type="number" pos:line="46" pos:column="55">1<pos:position pos:line="46" pos:column="56"/></literal></expr>]<pos:position pos:line="46" pos:column="57"/></index></name><operator pos:line="46" pos:column="57">)<pos:position pos:line="46" pos:column="58"/></operator></expr>)<pos:position pos:line="46" pos:column="59"/></condition><then pos:line="46" pos:column="59">
	<block type="pseudo"><continue pos:line="47" pos:column="9">continue;<pos:position pos:line="47" pos:column="18"/></continue></block></then></if>
      <expr_stmt><expr><call><name pos:line="48" pos:column="7">close<pos:position pos:line="48" pos:column="12"/></name> <argument_list pos:line="48" pos:column="13">(<argument><expr><name pos:line="48" pos:column="14">fd<pos:position pos:line="48" pos:column="16"/></name></expr></argument>)<pos:position pos:line="48" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="18"/></expr_stmt>
    }<pos:position pos:line="49" pos:column="6"/></block></for>

    <comment type="block" pos:line="51" pos:column="5">/* If the `out' pipe has the filedescriptor STDIN we have to be careful
     * with the `dup's below. So, if this is the case we have to handle the
     * `out' pipe first. */</comment>
    <if pos:line="54" pos:column="5">if <condition pos:line="54" pos:column="8">(<expr><name><name pos:line="54" pos:column="9">fd_pipe_out<pos:position pos:line="54" pos:column="20"/></name><index pos:line="54" pos:column="20">[<expr><literal type="number" pos:line="54" pos:column="21">1<pos:position pos:line="54" pos:column="22"/></literal></expr>]<pos:position pos:line="54" pos:column="23"/></index></name> <operator pos:line="54" pos:column="24">==<pos:position pos:line="54" pos:column="26"/></operator> <name pos:line="54" pos:column="27">STDIN_FILENO<pos:position pos:line="54" pos:column="39"/></name></expr>)<pos:position pos:line="54" pos:column="40"/></condition><then pos:line="54" pos:column="40">
    <block pos:line="55" pos:column="5">{
      <decl_stmt><decl><type><name pos:line="56" pos:column="7">int<pos:position pos:line="56" pos:column="10"/></name></type> <name pos:line="56" pos:column="11">new_fileno<pos:position pos:line="56" pos:column="21"/></name> <init pos:line="56" pos:column="22">= <expr><ternary><condition><expr><operator pos:line="56" pos:column="24">(<pos:position pos:line="56" pos:column="25"/></operator><name><name pos:line="56" pos:column="25">fd_pipe_in<pos:position pos:line="56" pos:column="35"/></name><index pos:line="56" pos:column="35">[<expr><literal type="number" pos:line="56" pos:column="36">0<pos:position pos:line="56" pos:column="37"/></literal></expr>]<pos:position pos:line="56" pos:column="38"/></index></name> <operator pos:line="56" pos:column="39">==<pos:position pos:line="56" pos:column="41"/></operator> <name pos:line="56" pos:column="42">STDOUT_FILENO<pos:position pos:line="56" pos:column="55"/></name><operator pos:line="56" pos:column="55">)<pos:position pos:line="56" pos:column="56"/></operator></expr>
	?<pos:position pos:line="57" pos:column="10"/></condition><then pos:line="57" pos:column="10"> <expr><name pos:line="57" pos:column="11">STDERR_FILENO<pos:position pos:line="57" pos:column="24"/></name></expr> <pos:position pos:line="57" pos:column="25"/></then><else pos:line="57" pos:column="25">: <expr><name pos:line="57" pos:column="27">STDOUT_FILENO<pos:position pos:line="57" pos:column="40"/></name></expr></else></ternary></expr></init></decl>;<pos:position pos:line="57" pos:column="41"/></decl_stmt>
      <expr_stmt><expr><call><name pos:line="58" pos:column="7">dup2<pos:position pos:line="58" pos:column="11"/></name> <argument_list pos:line="58" pos:column="12">(<argument><expr><name><name pos:line="58" pos:column="13">fd_pipe_out<pos:position pos:line="58" pos:column="24"/></name><index pos:line="58" pos:column="24">[<expr><literal type="number" pos:line="58" pos:column="25">1<pos:position pos:line="58" pos:column="26"/></literal></expr>]<pos:position pos:line="58" pos:column="27"/></index></name></expr></argument>, <argument><expr><name pos:line="58" pos:column="29">new_fileno<pos:position pos:line="58" pos:column="39"/></name></expr></argument>)<pos:position pos:line="58" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="41"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="59" pos:column="7">close<pos:position pos:line="59" pos:column="12"/></name> <argument_list pos:line="59" pos:column="13">(<argument><expr><name><name pos:line="59" pos:column="14">fd_pipe_out<pos:position pos:line="59" pos:column="25"/></name><index pos:line="59" pos:column="25">[<expr><literal type="number" pos:line="59" pos:column="26">1<pos:position pos:line="59" pos:column="27"/></literal></expr>]<pos:position pos:line="59" pos:column="28"/></index></name></expr></argument>)<pos:position pos:line="59" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="30"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="60" pos:column="7">fd_pipe_out<pos:position pos:line="60" pos:column="18"/></name><index pos:line="60" pos:column="18">[<expr><literal type="number" pos:line="60" pos:column="19">1<pos:position pos:line="60" pos:column="20"/></literal></expr>]<pos:position pos:line="60" pos:column="21"/></index></name> <operator pos:line="60" pos:column="22">=<pos:position pos:line="60" pos:column="23"/></operator> <name pos:line="60" pos:column="24">new_fileno<pos:position pos:line="60" pos:column="34"/></name></expr>;<pos:position pos:line="60" pos:column="35"/></expr_stmt>
    }<pos:position pos:line="61" pos:column="6"/></block></then></if>
    <comment type="block" pos:line="62" pos:column="5">/* Now `fd_pipe_out[1]' is either `STDOUT' or `STDERR', but definitely not
     * `STDIN_FILENO'. */</comment>

    <comment type="block" pos:line="65" pos:column="5">/* Connect the `in' pipe to STDIN */</comment>
    <if pos:line="66" pos:column="5">if <condition pos:line="66" pos:column="8">(<expr><name><name pos:line="66" pos:column="9">fd_pipe_in<pos:position pos:line="66" pos:column="19"/></name><index pos:line="66" pos:column="19">[<expr><literal type="number" pos:line="66" pos:column="20">0<pos:position pos:line="66" pos:column="21"/></literal></expr>]<pos:position pos:line="66" pos:column="22"/></index></name> <operator pos:line="66" pos:column="23">!=<pos:position pos:line="66" pos:column="25"/></operator> <name pos:line="66" pos:column="26">STDIN_FILENO<pos:position pos:line="66" pos:column="38"/></name></expr>)<pos:position pos:line="66" pos:column="39"/></condition><then pos:line="66" pos:column="39">
    <block pos:line="67" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="68" pos:column="7">dup2<pos:position pos:line="68" pos:column="11"/></name> <argument_list pos:line="68" pos:column="12">(<argument><expr><name><name pos:line="68" pos:column="13">fd_pipe_in<pos:position pos:line="68" pos:column="23"/></name><index pos:line="68" pos:column="23">[<expr><literal type="number" pos:line="68" pos:column="24">0<pos:position pos:line="68" pos:column="25"/></literal></expr>]<pos:position pos:line="68" pos:column="26"/></index></name></expr></argument>, <argument><expr><name pos:line="68" pos:column="28">STDIN_FILENO<pos:position pos:line="68" pos:column="40"/></name></expr></argument>)<pos:position pos:line="68" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="42"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="69" pos:column="7">close<pos:position pos:line="69" pos:column="12"/></name> <argument_list pos:line="69" pos:column="13">(<argument><expr><name><name pos:line="69" pos:column="14">fd_pipe_in<pos:position pos:line="69" pos:column="24"/></name><index pos:line="69" pos:column="24">[<expr><literal type="number" pos:line="69" pos:column="25">0<pos:position pos:line="69" pos:column="26"/></literal></expr>]<pos:position pos:line="69" pos:column="27"/></index></name></expr></argument>)<pos:position pos:line="69" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="29"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="70" pos:column="7">fd_pipe_in<pos:position pos:line="70" pos:column="17"/></name><index pos:line="70" pos:column="17">[<expr><literal type="number" pos:line="70" pos:column="18">0<pos:position pos:line="70" pos:column="19"/></literal></expr>]<pos:position pos:line="70" pos:column="20"/></index></name> <operator pos:line="70" pos:column="21">=<pos:position pos:line="70" pos:column="22"/></operator> <name pos:line="70" pos:column="23">STDIN_FILENO<pos:position pos:line="70" pos:column="35"/></name></expr>;<pos:position pos:line="70" pos:column="36"/></expr_stmt>
    }<pos:position pos:line="71" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="73" pos:column="5">/* Now connect the `out' pipe to STDOUT and STDERR */</comment>
    <if pos:line="74" pos:column="5">if <condition pos:line="74" pos:column="8">(<expr><name><name pos:line="74" pos:column="9">fd_pipe_out<pos:position pos:line="74" pos:column="20"/></name><index pos:line="74" pos:column="20">[<expr><literal type="number" pos:line="74" pos:column="21">1<pos:position pos:line="74" pos:column="22"/></literal></expr>]<pos:position pos:line="74" pos:column="23"/></index></name> <operator pos:line="74" pos:column="24">!=<pos:position pos:line="74" pos:column="26"/></operator> <name pos:line="74" pos:column="27">STDOUT_FILENO<pos:position pos:line="74" pos:column="40"/></name></expr>)<pos:position pos:line="74" pos:column="41"/></condition><then pos:line="74" pos:column="41">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="75" pos:column="7">dup2<pos:position pos:line="75" pos:column="11"/></name> <argument_list pos:line="75" pos:column="12">(<argument><expr><name><name pos:line="75" pos:column="13">fd_pipe_out<pos:position pos:line="75" pos:column="24"/></name><index pos:line="75" pos:column="24">[<expr><literal type="number" pos:line="75" pos:column="25">1<pos:position pos:line="75" pos:column="26"/></literal></expr>]<pos:position pos:line="75" pos:column="27"/></index></name></expr></argument>, <argument><expr><name pos:line="75" pos:column="29">STDOUT_FILENO<pos:position pos:line="75" pos:column="42"/></name></expr></argument>)<pos:position pos:line="75" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="44"/></expr_stmt></block></then></if>
    <if pos:line="76" pos:column="5">if <condition pos:line="76" pos:column="8">(<expr><name><name pos:line="76" pos:column="9">fd_pipe_out<pos:position pos:line="76" pos:column="20"/></name><index pos:line="76" pos:column="20">[<expr><literal type="number" pos:line="76" pos:column="21">1<pos:position pos:line="76" pos:column="22"/></literal></expr>]<pos:position pos:line="76" pos:column="23"/></index></name> <operator pos:line="76" pos:column="24">!=<pos:position pos:line="76" pos:column="26"/></operator> <name pos:line="76" pos:column="27">STDERR_FILENO<pos:position pos:line="76" pos:column="40"/></name></expr>)<pos:position pos:line="76" pos:column="41"/></condition><then pos:line="76" pos:column="41">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="77" pos:column="7">dup2<pos:position pos:line="77" pos:column="11"/></name> <argument_list pos:line="77" pos:column="12">(<argument><expr><name><name pos:line="77" pos:column="13">fd_pipe_out<pos:position pos:line="77" pos:column="24"/></name><index pos:line="77" pos:column="24">[<expr><literal type="number" pos:line="77" pos:column="25">1<pos:position pos:line="77" pos:column="26"/></literal></expr>]<pos:position pos:line="77" pos:column="27"/></index></name></expr></argument>, <argument><expr><name pos:line="77" pos:column="29">STDERR_FILENO<pos:position pos:line="77" pos:column="42"/></name></expr></argument>)<pos:position pos:line="77" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="44"/></expr_stmt></block></then></if>

    <comment type="block" pos:line="79" pos:column="5">/* If the pipe has some FD that's something completely different, close it
     * now. */</comment>
    <if pos:line="81" pos:column="5">if <condition pos:line="81" pos:column="8">(<expr><operator pos:line="81" pos:column="9">(<pos:position pos:line="81" pos:column="10"/></operator><name><name pos:line="81" pos:column="10">fd_pipe_out<pos:position pos:line="81" pos:column="21"/></name><index pos:line="81" pos:column="21">[<expr><literal type="number" pos:line="81" pos:column="22">1<pos:position pos:line="81" pos:column="23"/></literal></expr>]<pos:position pos:line="81" pos:column="24"/></index></name> <operator pos:line="81" pos:column="25">!=<pos:position pos:line="81" pos:column="27"/></operator> <name pos:line="81" pos:column="28">STDOUT_FILENO<pos:position pos:line="81" pos:column="41"/></name><operator pos:line="81" pos:column="41">)<pos:position pos:line="81" pos:column="42"/></operator> <operator pos:line="81" pos:column="43">&amp;&amp;<pos:position pos:line="81" pos:column="53"/></operator> <operator pos:line="81" pos:column="46">(<pos:position pos:line="81" pos:column="47"/></operator><name><name pos:line="81" pos:column="47">fd_pipe_out<pos:position pos:line="81" pos:column="58"/></name><index pos:line="81" pos:column="58">[<expr><literal type="number" pos:line="81" pos:column="59">1<pos:position pos:line="81" pos:column="60"/></literal></expr>]<pos:position pos:line="81" pos:column="61"/></index></name> <operator pos:line="81" pos:column="62">!=<pos:position pos:line="81" pos:column="64"/></operator> <name pos:line="81" pos:column="65">STDERR_FILENO<pos:position pos:line="81" pos:column="78"/></name><operator pos:line="81" pos:column="78">)<pos:position pos:line="81" pos:column="79"/></operator></expr>)<pos:position pos:line="81" pos:column="80"/></condition><then pos:line="81" pos:column="80">
    <block pos:line="82" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="83" pos:column="7">close<pos:position pos:line="83" pos:column="12"/></name> <argument_list pos:line="83" pos:column="13">(<argument><expr><name><name pos:line="83" pos:column="14">fd_pipe_out<pos:position pos:line="83" pos:column="25"/></name><index pos:line="83" pos:column="25">[<expr><literal type="number" pos:line="83" pos:column="26">1<pos:position pos:line="83" pos:column="27"/></literal></expr>]<pos:position pos:line="83" pos:column="28"/></index></name></expr></argument>)<pos:position pos:line="83" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="30"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="84" pos:column="7">fd_pipe_out<pos:position pos:line="84" pos:column="18"/></name><index pos:line="84" pos:column="18">[<expr><literal type="number" pos:line="84" pos:column="19">1<pos:position pos:line="84" pos:column="20"/></literal></expr>]<pos:position pos:line="84" pos:column="21"/></index></name> <operator pos:line="84" pos:column="22">=<pos:position pos:line="84" pos:column="23"/></operator> <name pos:line="84" pos:column="24">STDOUT_FILENO<pos:position pos:line="84" pos:column="37"/></name></expr>;<pos:position pos:line="84" pos:column="38"/></expr_stmt>
    }<pos:position pos:line="85" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="87" pos:column="5">exec_child<pos:position pos:line="87" pos:column="15"/></name> <argument_list pos:line="87" pos:column="16">(<argument><expr><name pos:line="87" pos:column="17">pl<pos:position pos:line="87" pos:column="19"/></name></expr></argument>)<pos:position pos:line="87" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="21"/></expr_stmt>
    <comment type="block" pos:line="88" pos:column="5">/* does not return */</comment>
  }<pos:position pos:line="89" pos:column="4"/></block></then></if></elseif></if>

  <expr_stmt><expr><call><name pos:line="91" pos:column="3">close<pos:position pos:line="91" pos:column="8"/></name> <argument_list pos:line="91" pos:column="9">(<argument><expr><name><name pos:line="91" pos:column="10">fd_pipe_in<pos:position pos:line="91" pos:column="20"/></name><index pos:line="91" pos:column="20">[<expr><literal type="number" pos:line="91" pos:column="21">0<pos:position pos:line="91" pos:column="22"/></literal></expr>]<pos:position pos:line="91" pos:column="23"/></index></name></expr></argument>)<pos:position pos:line="91" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="91" pos:column="25"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="92" pos:column="3">close<pos:position pos:line="92" pos:column="8"/></name> <argument_list pos:line="92" pos:column="9">(<argument><expr><name><name pos:line="92" pos:column="10">fd_pipe_out<pos:position pos:line="92" pos:column="21"/></name><index pos:line="92" pos:column="21">[<expr><literal type="number" pos:line="92" pos:column="22">1<pos:position pos:line="92" pos:column="23"/></literal></expr>]<pos:position pos:line="92" pos:column="24"/></index></name></expr></argument>)<pos:position pos:line="92" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="26"/></expr_stmt>

  <if pos:line="94" pos:column="3">if <condition pos:line="94" pos:column="6">(<expr><name pos:line="94" pos:column="7">fd_in<pos:position pos:line="94" pos:column="12"/></name> <operator pos:line="94" pos:column="13">!=<pos:position pos:line="94" pos:column="15"/></operator> <name pos:line="94" pos:column="16">NULL<pos:position pos:line="94" pos:column="20"/></name></expr>)<pos:position pos:line="94" pos:column="21"/></condition><then pos:line="94" pos:column="21">
    <block type="pseudo"><expr_stmt><expr><operator pos:line="95" pos:column="5">*<pos:position pos:line="95" pos:column="6"/></operator><name pos:line="95" pos:column="6">fd_in<pos:position pos:line="95" pos:column="11"/></name> <operator pos:line="95" pos:column="12">=<pos:position pos:line="95" pos:column="13"/></operator> <name><name pos:line="95" pos:column="14">fd_pipe_in<pos:position pos:line="95" pos:column="24"/></name><index pos:line="95" pos:column="24">[<expr><literal type="number" pos:line="95" pos:column="25">1<pos:position pos:line="95" pos:column="26"/></literal></expr>]<pos:position pos:line="95" pos:column="27"/></index></name></expr>;<pos:position pos:line="95" pos:column="28"/></expr_stmt></block></then>
  <else pos:line="96" pos:column="3">else
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="97" pos:column="5">close<pos:position pos:line="97" pos:column="10"/></name> <argument_list pos:line="97" pos:column="11">(<argument><expr><name><name pos:line="97" pos:column="12">fd_pipe_in<pos:position pos:line="97" pos:column="22"/></name><index pos:line="97" pos:column="22">[<expr><literal type="number" pos:line="97" pos:column="23">1<pos:position pos:line="97" pos:column="24"/></literal></expr>]<pos:position pos:line="97" pos:column="25"/></index></name></expr></argument>)<pos:position pos:line="97" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="27"/></expr_stmt></block></else></if>

  <if pos:line="99" pos:column="3">if <condition pos:line="99" pos:column="6">(<expr><name pos:line="99" pos:column="7">fd_out<pos:position pos:line="99" pos:column="13"/></name> <operator pos:line="99" pos:column="14">!=<pos:position pos:line="99" pos:column="16"/></operator> <name pos:line="99" pos:column="17">NULL<pos:position pos:line="99" pos:column="21"/></name></expr>)<pos:position pos:line="99" pos:column="22"/></condition><then pos:line="99" pos:column="22">
    <block type="pseudo"><expr_stmt><expr><operator pos:line="100" pos:column="5">*<pos:position pos:line="100" pos:column="6"/></operator><name pos:line="100" pos:column="6">fd_out<pos:position pos:line="100" pos:column="12"/></name> <operator pos:line="100" pos:column="13">=<pos:position pos:line="100" pos:column="14"/></operator> <name><name pos:line="100" pos:column="15">fd_pipe_out<pos:position pos:line="100" pos:column="26"/></name><index pos:line="100" pos:column="26">[<expr><literal type="number" pos:line="100" pos:column="27">0<pos:position pos:line="100" pos:column="28"/></literal></expr>]<pos:position pos:line="100" pos:column="29"/></index></name></expr>;<pos:position pos:line="100" pos:column="30"/></expr_stmt></block></then>
  <else pos:line="101" pos:column="3">else
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="102" pos:column="5">close<pos:position pos:line="102" pos:column="10"/></name> <argument_list pos:line="102" pos:column="11">(<argument><expr><name><name pos:line="102" pos:column="12">fd_pipe_out<pos:position pos:line="102" pos:column="23"/></name><index pos:line="102" pos:column="23">[<expr><literal type="number" pos:line="102" pos:column="24">0<pos:position pos:line="102" pos:column="25"/></literal></expr>]<pos:position pos:line="102" pos:column="26"/></index></name></expr></argument>)<pos:position pos:line="102" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="102" pos:column="28"/></expr_stmt></block></else></if>

  <return pos:line="104" pos:column="3">return <expr><operator pos:line="104" pos:column="10">(<pos:position pos:line="104" pos:column="11"/></operator><name pos:line="104" pos:column="11">pid<pos:position pos:line="104" pos:column="14"/></name><operator pos:line="104" pos:column="14">)<pos:position pos:line="104" pos:column="15"/></operator></expr>;<pos:position pos:line="104" pos:column="16"/></return>
}<pos:position pos:line="105" pos:column="2"/></block></function></unit>
