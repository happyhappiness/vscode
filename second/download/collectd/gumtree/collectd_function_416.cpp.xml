<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_function_416.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">cpy_shutdown<pos:position pos:line="1" pos:column="24"/></name><parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><name pos:line="1" pos:column="25">void<pos:position pos:line="1" pos:column="29"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="30"/></parameter_list> <block pos:line="1" pos:column="31">{
	<decl_stmt><decl><type><name pos:line="2" pos:column="9">PyObject<pos:position pos:line="2" pos:column="17"/></name> <modifier pos:line="2" pos:column="18">*<pos:position pos:line="2" pos:column="19"/></modifier></type><name pos:line="2" pos:column="19">ret<pos:position pos:line="2" pos:column="22"/></name></decl>;<pos:position pos:line="2" pos:column="23"/></decl_stmt>

	<if pos:line="4" pos:column="9">if <condition pos:line="4" pos:column="12">(<expr><operator pos:line="4" pos:column="13">!<pos:position pos:line="4" pos:column="14"/></operator><name pos:line="4" pos:column="14">state<pos:position pos:line="4" pos:column="19"/></name></expr>)<pos:position pos:line="4" pos:column="20"/></condition><then pos:line="4" pos:column="20"> <block pos:line="4" pos:column="21">{
		<expr_stmt><expr><call><name pos:line="5" pos:column="17">printf<pos:position pos:line="5" pos:column="23"/></name><argument_list pos:line="5" pos:column="23">(<argument><expr><literal type="string" pos:line="5" pos:column="24">"================================================================\n"<pos:position pos:line="5" pos:column="92"/></literal></expr></argument>)<pos:position pos:line="5" pos:column="93"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="94"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="6" pos:column="17">printf<pos:position pos:line="6" pos:column="23"/></name><argument_list pos:line="6" pos:column="23">(<argument><expr><literal type="string" pos:line="6" pos:column="24">"collectd shutdown while running an interactive session. This will\n"<pos:position pos:line="6" pos:column="93"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="94"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="95"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="7" pos:column="17">printf<pos:position pos:line="7" pos:column="23"/></name><argument_list pos:line="7" pos:column="23">(<argument><expr><literal type="string" pos:line="7" pos:column="24">"probably leave your terminal in a mess.\n"<pos:position pos:line="7" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="69"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="8" pos:column="17">printf<pos:position pos:line="8" pos:column="23"/></name><argument_list pos:line="8" pos:column="23">(<argument><expr><literal type="string" pos:line="8" pos:column="24">"Run the command \"reset\" to get it back into a usable state.\n"<pos:position pos:line="8" pos:column="89"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="90"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="91"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="9" pos:column="17">printf<pos:position pos:line="9" pos:column="23"/></name><argument_list pos:line="9" pos:column="23">(<argument><expr><literal type="string" pos:line="9" pos:column="24">"You can press Ctrl+D in the interactive session to\n"<pos:position pos:line="9" pos:column="78"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="80"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="10" pos:column="17">printf<pos:position pos:line="10" pos:column="23"/></name><argument_list pos:line="10" pos:column="23">(<argument><expr><literal type="string" pos:line="10" pos:column="24">"close collectd and avoid this problem in the future.\n"<pos:position pos:line="10" pos:column="80"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="82"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="11" pos:column="17">printf<pos:position pos:line="11" pos:column="23"/></name><argument_list pos:line="11" pos:column="23">(<argument><expr><literal type="string" pos:line="11" pos:column="24">"================================================================\n"<pos:position pos:line="11" pos:column="92"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="93"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="94"/></expr_stmt>
	}<pos:position pos:line="12" pos:column="10"/></block></then></if>

	<macro><name pos:line="14" pos:column="9">CPY_LOCK_THREADS<pos:position pos:line="14" pos:column="25"/></name></macro>

	<for pos:line="16" pos:column="9">for <control pos:line="16" pos:column="13">(<init><decl><type><name pos:line="16" pos:column="14">cpy_callback_t<pos:position pos:line="16" pos:column="28"/></name> <modifier pos:line="16" pos:column="29">*<pos:position pos:line="16" pos:column="30"/></modifier></type><name pos:line="16" pos:column="30">c<pos:position pos:line="16" pos:column="31"/></name> <init pos:line="16" pos:column="32">= <expr><name pos:line="16" pos:column="34">cpy_shutdown_callbacks<pos:position pos:line="16" pos:column="56"/></name></expr></init></decl>;<pos:position pos:line="16" pos:column="57"/></init> <condition><expr><name pos:line="16" pos:column="58">c<pos:position pos:line="16" pos:column="59"/></name></expr>;<pos:position pos:line="16" pos:column="60"/></condition> <incr><expr><name pos:line="16" pos:column="61">c<pos:position pos:line="16" pos:column="62"/></name> <operator pos:line="16" pos:column="63">=<pos:position pos:line="16" pos:column="64"/></operator> <name><name pos:line="16" pos:column="65">c<pos:position pos:line="16" pos:column="66"/></name><operator pos:line="16" pos:column="66">-&gt;<pos:position pos:line="16" pos:column="71"/></operator><name pos:line="16" pos:column="68">next<pos:position pos:line="16" pos:column="72"/></name></name></expr></incr>)<pos:position pos:line="16" pos:column="73"/></control> <block pos:line="16" pos:column="74">{
		<expr_stmt><expr><name pos:line="17" pos:column="17">ret<pos:position pos:line="17" pos:column="20"/></name> <operator pos:line="17" pos:column="21">=<pos:position pos:line="17" pos:column="22"/></operator> <call><name pos:line="17" pos:column="23">PyObject_CallFunctionObjArgs<pos:position pos:line="17" pos:column="51"/></name><argument_list pos:line="17" pos:column="51">(<argument><expr><name><name pos:line="17" pos:column="52">c<pos:position pos:line="17" pos:column="53"/></name><operator pos:line="17" pos:column="53">-&gt;<pos:position pos:line="17" pos:column="58"/></operator><name pos:line="17" pos:column="55">callback<pos:position pos:line="17" pos:column="63"/></name></name></expr></argument>, <argument><expr><name><name pos:line="17" pos:column="65">c<pos:position pos:line="17" pos:column="66"/></name><operator pos:line="17" pos:column="66">-&gt;<pos:position pos:line="17" pos:column="71"/></operator><name pos:line="17" pos:column="68">data<pos:position pos:line="17" pos:column="72"/></name></name></expr></argument>, <argument><expr><operator pos:line="17" pos:column="74">(<pos:position pos:line="17" pos:column="75"/></operator><name pos:line="17" pos:column="75">void<pos:position pos:line="17" pos:column="79"/></name> <operator pos:line="17" pos:column="80">*<pos:position pos:line="17" pos:column="81"/></operator><operator pos:line="17" pos:column="81">)<pos:position pos:line="17" pos:column="82"/></operator> <literal type="number" pos:line="17" pos:column="83">0<pos:position pos:line="17" pos:column="84"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="85"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="86"/></expr_stmt> <comment type="block" pos:line="17" pos:column="87">/* New reference. */</comment>
		<if pos:line="18" pos:column="17">if <condition pos:line="18" pos:column="20">(<expr><name pos:line="18" pos:column="21">ret<pos:position pos:line="18" pos:column="24"/></name> <operator pos:line="18" pos:column="25">==<pos:position pos:line="18" pos:column="27"/></operator> <name pos:line="18" pos:column="28">NULL<pos:position pos:line="18" pos:column="32"/></name></expr>)<pos:position pos:line="18" pos:column="33"/></condition><then pos:line="18" pos:column="33">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="19" pos:column="25">cpy_log_exception<pos:position pos:line="19" pos:column="42"/></name><argument_list pos:line="19" pos:column="42">(<argument><expr><literal type="string" pos:line="19" pos:column="43">"shutdown callback"<pos:position pos:line="19" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="64"/></expr_stmt></block></then>
		<else pos:line="20" pos:column="17">else
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="21" pos:column="25">Py_DECREF<pos:position pos:line="21" pos:column="34"/></name><argument_list pos:line="21" pos:column="34">(<argument><expr><name pos:line="21" pos:column="35">ret<pos:position pos:line="21" pos:column="38"/></name></expr></argument>)<pos:position pos:line="21" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="40"/></expr_stmt></block></else></if>
	}<pos:position pos:line="22" pos:column="10"/></block></for>
	<expr_stmt><expr><call><name pos:line="23" pos:column="9">PyErr_Print<pos:position pos:line="23" pos:column="20"/></name><argument_list pos:line="23" pos:column="20">()<pos:position pos:line="23" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="23"/></expr_stmt>

	<decl_stmt><decl><type><name pos:line="25" pos:column="9">Py_BEGIN_ALLOW_THREADS<pos:position pos:line="25" pos:column="31"/></name></type>
	<name pos:line="26" pos:column="9">cpy_unregister_list<pos:position pos:line="26" pos:column="28"/></name><argument_list pos:line="26" pos:column="28">(<argument><expr><operator pos:line="26" pos:column="29">&amp;<pos:position pos:line="26" pos:column="34"/></operator><name pos:line="26" pos:column="30">cpy_config_callbacks<pos:position pos:line="26" pos:column="50"/></name></expr></argument>)<pos:position pos:line="26" pos:column="51"/></argument_list></decl>;<pos:position pos:line="26" pos:column="52"/></decl_stmt>
	<expr_stmt><expr><call><name pos:line="27" pos:column="9">cpy_unregister_list<pos:position pos:line="27" pos:column="28"/></name><argument_list pos:line="27" pos:column="28">(<argument><expr><operator pos:line="27" pos:column="29">&amp;<pos:position pos:line="27" pos:column="34"/></operator><name pos:line="27" pos:column="30">cpy_init_callbacks<pos:position pos:line="27" pos:column="48"/></name></expr></argument>)<pos:position pos:line="27" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="50"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="28" pos:column="9">cpy_unregister_list<pos:position pos:line="28" pos:column="28"/></name><argument_list pos:line="28" pos:column="28">(<argument><expr><operator pos:line="28" pos:column="29">&amp;<pos:position pos:line="28" pos:column="34"/></operator><name pos:line="28" pos:column="30">cpy_shutdown_callbacks<pos:position pos:line="28" pos:column="52"/></name></expr></argument>)<pos:position pos:line="28" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="54"/></expr_stmt>
	<expr_stmt><expr><name pos:line="29" pos:column="9">cpy_shutdown_triggered<pos:position pos:line="29" pos:column="31"/></name> <operator pos:line="29" pos:column="32">=<pos:position pos:line="29" pos:column="33"/></operator> <literal type="number" pos:line="29" pos:column="34">1<pos:position pos:line="29" pos:column="35"/></literal></expr>;<pos:position pos:line="29" pos:column="36"/></expr_stmt>
	<macro><name pos:line="30" pos:column="9">Py_END_ALLOW_THREADS<pos:position pos:line="30" pos:column="29"/></name></macro>

	<if pos:line="32" pos:column="9">if <condition pos:line="32" pos:column="12">(<expr><operator pos:line="32" pos:column="13">!<pos:position pos:line="32" pos:column="14"/></operator><name pos:line="32" pos:column="14">cpy_num_callbacks<pos:position pos:line="32" pos:column="31"/></name></expr>)<pos:position pos:line="32" pos:column="32"/></condition><then pos:line="32" pos:column="32"> <block pos:line="32" pos:column="33">{
		<expr_stmt><expr><call><name pos:line="33" pos:column="17">Py_Finalize<pos:position pos:line="33" pos:column="28"/></name><argument_list pos:line="33" pos:column="28">()<pos:position pos:line="33" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="31"/></expr_stmt>
		<return pos:line="34" pos:column="17">return <expr><literal type="number" pos:line="34" pos:column="24">0<pos:position pos:line="34" pos:column="25"/></literal></expr>;<pos:position pos:line="34" pos:column="26"/></return>
	}<pos:position pos:line="35" pos:column="10"/></block></then></if>

	<macro><name pos:line="37" pos:column="9">CPY_RELEASE_THREADS<pos:position pos:line="37" pos:column="28"/></name></macro>
	<return pos:line="38" pos:column="9">return <expr><literal type="number" pos:line="38" pos:column="16">0<pos:position pos:line="38" pos:column="17"/></literal></expr>;<pos:position pos:line="38" pos:column="18"/></return>
}<pos:position pos:line="39" pos:column="2"/></block></function></unit>
