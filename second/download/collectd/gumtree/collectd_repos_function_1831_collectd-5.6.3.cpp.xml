<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1831_collectd-5.6.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">process_stations<pos:position pos:line="1" pos:column="28"/></name><parameter_list pos:line="1" pos:column="28">(<parameter><decl><type><name pos:line="1" pos:column="29">int<pos:position pos:line="1" pos:column="32"/></name></type> <name pos:line="1" pos:column="33">sk<pos:position pos:line="1" pos:column="35"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="37">const<pos:position pos:line="1" pos:column="42"/></specifier> <name pos:line="1" pos:column="43">char<pos:position pos:line="1" pos:column="47"/></name> <modifier pos:line="1" pos:column="48">*<pos:position pos:line="1" pos:column="49"/></modifier></type><name pos:line="1" pos:column="49">dev<pos:position pos:line="1" pos:column="52"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="53"/></parameter_list> <block pos:line="1" pos:column="54">{
  <decl_stmt><decl><type><name pos:line="2" pos:column="3">uint8_t<pos:position pos:line="2" pos:column="10"/></name></type> <name><name pos:line="2" pos:column="11">buf<pos:position pos:line="2" pos:column="14"/></name><index pos:line="2" pos:column="14">[<expr><literal type="number" pos:line="2" pos:column="15">24<pos:position pos:line="2" pos:column="17"/></literal> <operator pos:line="2" pos:column="18">*<pos:position pos:line="2" pos:column="19"/></operator> <literal type="number" pos:line="2" pos:column="20">1024<pos:position pos:line="2" pos:column="24"/></literal></expr>]<pos:position pos:line="2" pos:column="25"/></index></name> <init pos:line="2" pos:column="26">= <expr><block pos:line="2" pos:column="28">{<expr><literal type="number" pos:line="2" pos:column="29">0<pos:position pos:line="2" pos:column="30"/></literal></expr>}<pos:position pos:line="2" pos:column="31"/></block></expr></init></decl>;<pos:position pos:line="2" pos:column="32"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">uint8_t<pos:position pos:line="3" pos:column="10"/></name> <modifier pos:line="3" pos:column="11">*<pos:position pos:line="3" pos:column="12"/></modifier></type><name pos:line="3" pos:column="12">cp<pos:position pos:line="3" pos:column="14"/></name></decl>;<pos:position pos:line="3" pos:column="15"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">int<pos:position pos:line="4" pos:column="6"/></name></type> <name pos:line="4" pos:column="7">nodes<pos:position pos:line="4" pos:column="12"/></name></decl>;<pos:position pos:line="4" pos:column="13"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">size_t<pos:position pos:line="5" pos:column="9"/></name></type> <name pos:line="5" pos:column="10">len<pos:position pos:line="5" pos:column="13"/></name></decl>;<pos:position pos:line="5" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">int<pos:position pos:line="6" pos:column="6"/></name></type> <name pos:line="6" pos:column="7">status<pos:position pos:line="6" pos:column="13"/></name></decl>;<pos:position pos:line="6" pos:column="14"/></decl_stmt>

  <decl_stmt><decl><type><name><name pos:line="8" pos:column="3">struct<pos:position pos:line="8" pos:column="9"/></name> <name pos:line="8" pos:column="10">iwreq<pos:position pos:line="8" pos:column="15"/></name></name></type> <name pos:line="8" pos:column="16">iwr<pos:position pos:line="8" pos:column="19"/></name> <init pos:line="8" pos:column="20">= <expr><block pos:line="8" pos:column="22">{<expr><operator pos:line="8" pos:column="23">.<pos:position pos:line="8" pos:column="24"/></operator><name><name pos:line="8" pos:column="24">u<pos:position pos:line="8" pos:column="25"/></name><operator pos:line="8" pos:column="25">.<pos:position pos:line="8" pos:column="26"/></operator><name pos:line="8" pos:column="26">data<pos:position pos:line="8" pos:column="30"/></name><operator pos:line="8" pos:column="30">.<pos:position pos:line="8" pos:column="31"/></operator><name pos:line="8" pos:column="31">pointer<pos:position pos:line="8" pos:column="38"/></name></name> <operator pos:line="8" pos:column="39">=<pos:position pos:line="8" pos:column="40"/></operator> <operator pos:line="8" pos:column="41">(<pos:position pos:line="8" pos:column="42"/></operator><name pos:line="8" pos:column="42">void<pos:position pos:line="8" pos:column="46"/></name> <operator pos:line="8" pos:column="47">*<pos:position pos:line="8" pos:column="48"/></operator><operator pos:line="8" pos:column="48">)<pos:position pos:line="8" pos:column="49"/></operator><name pos:line="8" pos:column="49">buf<pos:position pos:line="8" pos:column="52"/></name></expr>,
                      <expr><operator pos:line="9" pos:column="23">.<pos:position pos:line="9" pos:column="24"/></operator><name><name pos:line="9" pos:column="24">u<pos:position pos:line="9" pos:column="25"/></name><operator pos:line="9" pos:column="25">.<pos:position pos:line="9" pos:column="26"/></operator><name pos:line="9" pos:column="26">data<pos:position pos:line="9" pos:column="30"/></name><operator pos:line="9" pos:column="30">.<pos:position pos:line="9" pos:column="31"/></operator><name pos:line="9" pos:column="31">length<pos:position pos:line="9" pos:column="37"/></name></name> <operator pos:line="9" pos:column="38">=<pos:position pos:line="9" pos:column="39"/></operator> sizeof<operator pos:line="9" pos:column="46">(<pos:position pos:line="9" pos:column="47"/></operator><name pos:line="9" pos:column="47">buf<pos:position pos:line="9" pos:column="50"/></name><operator pos:line="9" pos:column="50">)<pos:position pos:line="9" pos:column="51"/></operator></expr>}<pos:position pos:line="9" pos:column="52"/></block></expr></init></decl>;<pos:position pos:line="9" pos:column="53"/></decl_stmt>
  <expr_stmt><expr><call><name pos:line="10" pos:column="3">sstrncpy<pos:position pos:line="10" pos:column="11"/></name><argument_list pos:line="10" pos:column="11">(<argument><expr><name><name pos:line="10" pos:column="12">iwr<pos:position pos:line="10" pos:column="15"/></name><operator pos:line="10" pos:column="15">.<pos:position pos:line="10" pos:column="16"/></operator><name pos:line="10" pos:column="16">ifr_name<pos:position pos:line="10" pos:column="24"/></name></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="26">dev<pos:position pos:line="10" pos:column="29"/></name></expr></argument>, <argument><expr><sizeof pos:line="10" pos:column="31">sizeof<argument_list pos:line="10" pos:column="37">(<argument><expr><name><name pos:line="10" pos:column="38">iwr<pos:position pos:line="10" pos:column="41"/></name><operator pos:line="10" pos:column="41">.<pos:position pos:line="10" pos:column="42"/></operator><name pos:line="10" pos:column="42">ifr_name<pos:position pos:line="10" pos:column="50"/></name></name></expr></argument>)<pos:position pos:line="10" pos:column="51"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="10" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="53"/></expr_stmt>

  <expr_stmt><expr><name pos:line="12" pos:column="3">status<pos:position pos:line="12" pos:column="9"/></name> <operator pos:line="12" pos:column="10">=<pos:position pos:line="12" pos:column="11"/></operator> <call><name pos:line="12" pos:column="12">ioctl<pos:position pos:line="12" pos:column="17"/></name><argument_list pos:line="12" pos:column="17">(<argument><expr><name pos:line="12" pos:column="18">sk<pos:position pos:line="12" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="22">IEEE80211_IOCTL_STA_INFO<pos:position pos:line="12" pos:column="46"/></name></expr></argument>, <argument><expr><operator pos:line="12" pos:column="48">&amp;<pos:position pos:line="12" pos:column="53"/></operator><name pos:line="12" pos:column="49">iwr<pos:position pos:line="12" pos:column="52"/></name></expr></argument>)<pos:position pos:line="12" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="54"/></expr_stmt>
  <if pos:line="13" pos:column="3">if <condition pos:line="13" pos:column="6">(<expr><name pos:line="13" pos:column="7">status<pos:position pos:line="13" pos:column="13"/></name> <operator pos:line="13" pos:column="14">&lt;<pos:position pos:line="13" pos:column="18"/></operator> <literal type="number" pos:line="13" pos:column="16">0<pos:position pos:line="13" pos:column="17"/></literal></expr>)<pos:position pos:line="13" pos:column="18"/></condition><then pos:line="13" pos:column="18"> <block pos:line="13" pos:column="19">{
    <comment type="block" pos:line="14" pos:column="5">/* Silent, because not all interfaces support all ioctls. */</comment>
    <expr_stmt><expr><call><name pos:line="15" pos:column="5">DEBUG<pos:position pos:line="15" pos:column="10"/></name><argument_list pos:line="15" pos:column="10">(<argument><expr><literal type="string" pos:line="15" pos:column="11">"madwifi plugin: Sending IO-control "<pos:position pos:line="15" pos:column="48"/></literal>
          <literal type="string" pos:line="16" pos:column="11">"IEEE80211_IOCTL_STA_INFO to device %s "<pos:position pos:line="16" pos:column="51"/></literal>
          <literal type="string" pos:line="17" pos:column="11">"failed with status %i."<pos:position pos:line="17" pos:column="35"/></literal></expr></argument>,
          <argument><expr><name pos:line="18" pos:column="11">dev<pos:position pos:line="18" pos:column="14"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="16">status<pos:position pos:line="18" pos:column="22"/></name></expr></argument>)<pos:position pos:line="18" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="24"/></expr_stmt>
    <return pos:line="19" pos:column="5">return <expr><operator pos:line="19" pos:column="12">(<pos:position pos:line="19" pos:column="13"/></operator><name pos:line="19" pos:column="13">status<pos:position pos:line="19" pos:column="19"/></name><operator pos:line="19" pos:column="19">)<pos:position pos:line="19" pos:column="20"/></operator></expr>;<pos:position pos:line="19" pos:column="21"/></return>
  }<pos:position pos:line="20" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="22" pos:column="3">len<pos:position pos:line="22" pos:column="6"/></name> <operator pos:line="22" pos:column="7">=<pos:position pos:line="22" pos:column="8"/></operator> <name><name pos:line="22" pos:column="9">iwr<pos:position pos:line="22" pos:column="12"/></name><operator pos:line="22" pos:column="12">.<pos:position pos:line="22" pos:column="13"/></operator><name pos:line="22" pos:column="13">u<pos:position pos:line="22" pos:column="14"/></name><operator pos:line="22" pos:column="14">.<pos:position pos:line="22" pos:column="15"/></operator><name pos:line="22" pos:column="15">data<pos:position pos:line="22" pos:column="19"/></name><operator pos:line="22" pos:column="19">.<pos:position pos:line="22" pos:column="20"/></operator><name pos:line="22" pos:column="20">length<pos:position pos:line="22" pos:column="26"/></name></name></expr>;<pos:position pos:line="22" pos:column="27"/></expr_stmt>

  <expr_stmt><expr><name pos:line="24" pos:column="3">cp<pos:position pos:line="24" pos:column="5"/></name> <operator pos:line="24" pos:column="6">=<pos:position pos:line="24" pos:column="7"/></operator> <name pos:line="24" pos:column="8">buf<pos:position pos:line="24" pos:column="11"/></name></expr>;<pos:position pos:line="24" pos:column="12"/></expr_stmt>
  <expr_stmt><expr><name pos:line="25" pos:column="3">nodes<pos:position pos:line="25" pos:column="8"/></name> <operator pos:line="25" pos:column="9">=<pos:position pos:line="25" pos:column="10"/></operator> <literal type="number" pos:line="25" pos:column="11">0<pos:position pos:line="25" pos:column="12"/></literal></expr>;<pos:position pos:line="25" pos:column="13"/></expr_stmt>
  <while pos:line="26" pos:column="3">while <condition pos:line="26" pos:column="9">(<expr><name pos:line="26" pos:column="10">len<pos:position pos:line="26" pos:column="13"/></name> <operator pos:line="26" pos:column="14">&gt;=<pos:position pos:line="26" pos:column="19"/></operator> <sizeof pos:line="26" pos:column="17">sizeof<argument_list pos:line="26" pos:column="23">(<argument><expr pos:line="26" pos:column="24">struct <name pos:line="26" pos:column="31">ieee80211req_sta_info<pos:position pos:line="26" pos:column="52"/></name></expr></argument>)<pos:position pos:line="26" pos:column="53"/></argument_list></sizeof></expr>)<pos:position pos:line="26" pos:column="54"/></condition> <block pos:line="26" pos:column="55">{
    <decl_stmt><decl><type><name><name pos:line="27" pos:column="5">struct<pos:position pos:line="27" pos:column="11"/></name> <name pos:line="27" pos:column="12">ieee80211req_sta_info<pos:position pos:line="27" pos:column="33"/></name></name> <modifier pos:line="27" pos:column="34">*<pos:position pos:line="27" pos:column="35"/></modifier></type><name pos:line="27" pos:column="35">si<pos:position pos:line="27" pos:column="37"/></name> <init pos:line="27" pos:column="38">= <expr><operator pos:line="27" pos:column="40">(<pos:position pos:line="27" pos:column="41"/></operator><name pos:line="27" pos:column="41">void<pos:position pos:line="27" pos:column="45"/></name> <operator pos:line="27" pos:column="46">*<pos:position pos:line="27" pos:column="47"/></operator><operator pos:line="27" pos:column="47">)<pos:position pos:line="27" pos:column="48"/></operator><name pos:line="27" pos:column="48">cp<pos:position pos:line="27" pos:column="50"/></name></expr></init></decl>;<pos:position pos:line="27" pos:column="51"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="28" pos:column="5">process_station<pos:position pos:line="28" pos:column="20"/></name><argument_list pos:line="28" pos:column="20">(<argument><expr><name pos:line="28" pos:column="21">sk<pos:position pos:line="28" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="25">dev<pos:position pos:line="28" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="30">si<pos:position pos:line="28" pos:column="32"/></name></expr></argument>)<pos:position pos:line="28" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="34"/></expr_stmt>
    <expr_stmt><expr><name pos:line="29" pos:column="5">cp<pos:position pos:line="29" pos:column="7"/></name> <operator pos:line="29" pos:column="8">+=<pos:position pos:line="29" pos:column="10"/></operator> <name><name pos:line="29" pos:column="11">si<pos:position pos:line="29" pos:column="13"/></name><operator pos:line="29" pos:column="13">-&gt;<pos:position pos:line="29" pos:column="18"/></operator><name pos:line="29" pos:column="15">isi_len<pos:position pos:line="29" pos:column="22"/></name></name></expr>;<pos:position pos:line="29" pos:column="23"/></expr_stmt>
    <expr_stmt><expr><name pos:line="30" pos:column="5">len<pos:position pos:line="30" pos:column="8"/></name> <operator pos:line="30" pos:column="9">-=<pos:position pos:line="30" pos:column="11"/></operator> <name><name pos:line="30" pos:column="12">si<pos:position pos:line="30" pos:column="14"/></name><operator pos:line="30" pos:column="14">-&gt;<pos:position pos:line="30" pos:column="19"/></operator><name pos:line="30" pos:column="16">isi_len<pos:position pos:line="30" pos:column="23"/></name></name></expr>;<pos:position pos:line="30" pos:column="24"/></expr_stmt>
    <expr_stmt><expr><name pos:line="31" pos:column="5">nodes<pos:position pos:line="31" pos:column="10"/></name><operator pos:line="31" pos:column="10">++<pos:position pos:line="31" pos:column="12"/></operator></expr>;<pos:position pos:line="31" pos:column="13"/></expr_stmt>
  }<pos:position pos:line="32" pos:column="4"/></block></while>

  <if pos:line="34" pos:column="3">if <condition pos:line="34" pos:column="6">(<expr><call><name pos:line="34" pos:column="7">item_watched<pos:position pos:line="34" pos:column="19"/></name><argument_list pos:line="34" pos:column="19">(<argument><expr><name pos:line="34" pos:column="20">STAT_ATH_NODES<pos:position pos:line="34" pos:column="34"/></name></expr></argument>)<pos:position pos:line="34" pos:column="35"/></argument_list></call></expr>)<pos:position pos:line="34" pos:column="36"/></condition><then pos:line="34" pos:column="36">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="35" pos:column="5">submit_gauge<pos:position pos:line="35" pos:column="17"/></name><argument_list pos:line="35" pos:column="17">(<argument><expr><name pos:line="35" pos:column="18">dev<pos:position pos:line="35" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="35" pos:column="23">"ath_nodes"<pos:position pos:line="35" pos:column="34"/></literal></expr></argument>, <argument><expr><name pos:line="35" pos:column="36">NULL<pos:position pos:line="35" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="42">NULL<pos:position pos:line="35" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="48">nodes<pos:position pos:line="35" pos:column="53"/></name></expr></argument>)<pos:position pos:line="35" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="55"/></expr_stmt></block></then></if>
  <return pos:line="36" pos:column="3">return <expr><operator pos:line="36" pos:column="10">(<pos:position pos:line="36" pos:column="11"/></operator><literal type="number" pos:line="36" pos:column="11">0<pos:position pos:line="36" pos:column="12"/></literal><operator pos:line="36" pos:column="12">)<pos:position pos:line="36" pos:column="13"/></operator></expr>;<pos:position pos:line="36" pos:column="14"/></return>
}<pos:position pos:line="37" pos:column="2"/></block></function></unit>
