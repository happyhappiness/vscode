<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1499_collectd-5.6.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">value_list_to_json<pos:position pos:line="1" pos:column="30"/></name> <parameter_list pos:line="1" pos:column="31">(<parameter><decl><type><name pos:line="1" pos:column="32">char<pos:position pos:line="1" pos:column="36"/></name> <modifier pos:line="1" pos:column="37">*<pos:position pos:line="1" pos:column="38"/></modifier></type><name pos:line="1" pos:column="38">buffer<pos:position pos:line="1" pos:column="44"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="46">size_t<pos:position pos:line="1" pos:column="52"/></name></type> <name pos:line="1" pos:column="53">buffer_size<pos:position pos:line="1" pos:column="64"/></name></decl></parameter>, <comment type="block" pos:line="1" pos:column="66">/* {{{ */</comment>
                <parameter><decl><type><specifier pos:line="2" pos:column="17">const<pos:position pos:line="2" pos:column="22"/></specifier> <name pos:line="2" pos:column="23">data_set_t<pos:position pos:line="2" pos:column="33"/></name> <modifier pos:line="2" pos:column="34">*<pos:position pos:line="2" pos:column="35"/></modifier></type><name pos:line="2" pos:column="35">ds<pos:position pos:line="2" pos:column="37"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="39">const<pos:position pos:line="2" pos:column="44"/></specifier> <name pos:line="2" pos:column="45">value_list_t<pos:position pos:line="2" pos:column="57"/></name> <modifier pos:line="2" pos:column="58">*<pos:position pos:line="2" pos:column="59"/></modifier></type><name pos:line="2" pos:column="59">vl<pos:position pos:line="2" pos:column="61"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="63">int<pos:position pos:line="2" pos:column="66"/></name></type> <name pos:line="2" pos:column="67">store_rates<pos:position pos:line="2" pos:column="78"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="79"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">char<pos:position pos:line="4" pos:column="7"/></name></type> <name><name pos:line="4" pos:column="8">temp<pos:position pos:line="4" pos:column="12"/></name><index pos:line="4" pos:column="12">[<expr><literal type="number" pos:line="4" pos:column="13">512<pos:position pos:line="4" pos:column="16"/></literal></expr>]<pos:position pos:line="4" pos:column="17"/></index></name></decl>;<pos:position pos:line="4" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">size_t<pos:position pos:line="5" pos:column="9"/></name></type> <name pos:line="5" pos:column="10">offset<pos:position pos:line="5" pos:column="16"/></name> <init pos:line="5" pos:column="17">= <expr><literal type="number" pos:line="5" pos:column="19">0<pos:position pos:line="5" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">int<pos:position pos:line="6" pos:column="6"/></name></type> <name pos:line="6" pos:column="7">status<pos:position pos:line="6" pos:column="13"/></name></decl>;<pos:position pos:line="6" pos:column="14"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="8" pos:column="3">memset<pos:position pos:line="8" pos:column="9"/></name> <argument_list pos:line="8" pos:column="10">(<argument><expr><name pos:line="8" pos:column="11">buffer<pos:position pos:line="8" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="8" pos:column="19">0<pos:position pos:line="8" pos:column="20"/></literal></expr></argument>, <argument><expr><name pos:line="8" pos:column="22">buffer_size<pos:position pos:line="8" pos:column="33"/></name></expr></argument>)<pos:position pos:line="8" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="35"/></expr_stmt>

<cpp:define pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">define<pos:position pos:line="10" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="10" pos:column="9">BUFFER_ADD<pos:position pos:line="10" pos:column="19"/></name><parameter_list pos:line="10" pos:column="19">(<parameter><type><modifier pos:line="10" pos:column="20">...<pos:position pos:line="10" pos:column="23"/></modifier></type></parameter>)<pos:position pos:line="10" pos:column="24"/></parameter_list></cpp:macro> <cpp:value pos:line="10" pos:column="25">do { \
  status = ssnprintf (buffer + offset, buffer_size - offset, \
      __VA_ARGS__); \
  if (status &lt; 1) \
    return (-1); \
  else if (((size_t) status) &gt;= (buffer_size - offset)) \
    return (-ENOMEM); \
  else \
    offset += ((size_t) status); \
} while (0)<pos:position pos:line="19" pos:column="12"/></cpp:value></cpp:define>

  <comment type="block" pos:line="21" pos:column="3">/* All value lists have a leading comma. The first one will be replaced with
   * a square bracket in `format_json_finalize'. */</comment>
  <expr_stmt><expr><call><name pos:line="23" pos:column="3">BUFFER_ADD<pos:position pos:line="23" pos:column="13"/></name> <argument_list pos:line="23" pos:column="14">(<argument><expr><literal type="string" pos:line="23" pos:column="15">",{"<pos:position pos:line="23" pos:column="19"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="21"/></expr_stmt>

  <expr_stmt><expr><name pos:line="25" pos:column="3">status<pos:position pos:line="25" pos:column="9"/></name> <operator pos:line="25" pos:column="10">=<pos:position pos:line="25" pos:column="11"/></operator> <call><name pos:line="25" pos:column="12">values_to_json<pos:position pos:line="25" pos:column="26"/></name> <argument_list pos:line="25" pos:column="27">(<argument><expr><name pos:line="25" pos:column="28">temp<pos:position pos:line="25" pos:column="32"/></name></expr></argument>, <argument><expr><sizeof pos:line="25" pos:column="34">sizeof <argument_list pos:line="25" pos:column="41">(<argument><expr><name pos:line="25" pos:column="42">temp<pos:position pos:line="25" pos:column="46"/></name></expr></argument>)<pos:position pos:line="25" pos:column="47"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="25" pos:column="49">ds<pos:position pos:line="25" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="53">vl<pos:position pos:line="25" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="57">store_rates<pos:position pos:line="25" pos:column="68"/></name></expr></argument>)<pos:position pos:line="25" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="70"/></expr_stmt>
  <if pos:line="26" pos:column="3">if <condition pos:line="26" pos:column="6">(<expr><name pos:line="26" pos:column="7">status<pos:position pos:line="26" pos:column="13"/></name> <operator pos:line="26" pos:column="14">!=<pos:position pos:line="26" pos:column="16"/></operator> <literal type="number" pos:line="26" pos:column="17">0<pos:position pos:line="26" pos:column="18"/></literal></expr>)<pos:position pos:line="26" pos:column="19"/></condition><then pos:line="26" pos:column="19">
    <block type="pseudo"><return pos:line="27" pos:column="5">return <expr><operator pos:line="27" pos:column="12">(<pos:position pos:line="27" pos:column="13"/></operator><name pos:line="27" pos:column="13">status<pos:position pos:line="27" pos:column="19"/></name><operator pos:line="27" pos:column="19">)<pos:position pos:line="27" pos:column="20"/></operator></expr>;<pos:position pos:line="27" pos:column="21"/></return></block></then></if>
  <expr_stmt><expr><call><name pos:line="28" pos:column="3">BUFFER_ADD<pos:position pos:line="28" pos:column="13"/></name> <argument_list pos:line="28" pos:column="14">(<argument><expr><literal type="string" pos:line="28" pos:column="15">"\"values\":%s"<pos:position pos:line="28" pos:column="30"/></literal></expr></argument>, <argument><expr><name pos:line="28" pos:column="32">temp<pos:position pos:line="28" pos:column="36"/></name></expr></argument>)<pos:position pos:line="28" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="38"/></expr_stmt>

  <expr_stmt><expr><name pos:line="30" pos:column="3">status<pos:position pos:line="30" pos:column="9"/></name> <operator pos:line="30" pos:column="10">=<pos:position pos:line="30" pos:column="11"/></operator> <call><name pos:line="30" pos:column="12">dstypes_to_json<pos:position pos:line="30" pos:column="27"/></name> <argument_list pos:line="30" pos:column="28">(<argument><expr><name pos:line="30" pos:column="29">temp<pos:position pos:line="30" pos:column="33"/></name></expr></argument>, <argument><expr><sizeof pos:line="30" pos:column="35">sizeof <argument_list pos:line="30" pos:column="42">(<argument><expr><name pos:line="30" pos:column="43">temp<pos:position pos:line="30" pos:column="47"/></name></expr></argument>)<pos:position pos:line="30" pos:column="48"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="30" pos:column="50">ds<pos:position pos:line="30" pos:column="52"/></name></expr></argument>)<pos:position pos:line="30" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="54"/></expr_stmt>
  <if pos:line="31" pos:column="3">if <condition pos:line="31" pos:column="6">(<expr><name pos:line="31" pos:column="7">status<pos:position pos:line="31" pos:column="13"/></name> <operator pos:line="31" pos:column="14">!=<pos:position pos:line="31" pos:column="16"/></operator> <literal type="number" pos:line="31" pos:column="17">0<pos:position pos:line="31" pos:column="18"/></literal></expr>)<pos:position pos:line="31" pos:column="19"/></condition><then pos:line="31" pos:column="19">
    <block type="pseudo"><return pos:line="32" pos:column="5">return <expr><operator pos:line="32" pos:column="12">(<pos:position pos:line="32" pos:column="13"/></operator><name pos:line="32" pos:column="13">status<pos:position pos:line="32" pos:column="19"/></name><operator pos:line="32" pos:column="19">)<pos:position pos:line="32" pos:column="20"/></operator></expr>;<pos:position pos:line="32" pos:column="21"/></return></block></then></if>
  <expr_stmt><expr><call><name pos:line="33" pos:column="3">BUFFER_ADD<pos:position pos:line="33" pos:column="13"/></name> <argument_list pos:line="33" pos:column="14">(<argument><expr><literal type="string" pos:line="33" pos:column="15">",\"dstypes\":%s"<pos:position pos:line="33" pos:column="32"/></literal></expr></argument>, <argument><expr><name pos:line="33" pos:column="34">temp<pos:position pos:line="33" pos:column="38"/></name></expr></argument>)<pos:position pos:line="33" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="40"/></expr_stmt>

  <expr_stmt><expr><name pos:line="35" pos:column="3">status<pos:position pos:line="35" pos:column="9"/></name> <operator pos:line="35" pos:column="10">=<pos:position pos:line="35" pos:column="11"/></operator> <call><name pos:line="35" pos:column="12">dsnames_to_json<pos:position pos:line="35" pos:column="27"/></name> <argument_list pos:line="35" pos:column="28">(<argument><expr><name pos:line="35" pos:column="29">temp<pos:position pos:line="35" pos:column="33"/></name></expr></argument>, <argument><expr><sizeof pos:line="35" pos:column="35">sizeof <argument_list pos:line="35" pos:column="42">(<argument><expr><name pos:line="35" pos:column="43">temp<pos:position pos:line="35" pos:column="47"/></name></expr></argument>)<pos:position pos:line="35" pos:column="48"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="35" pos:column="50">ds<pos:position pos:line="35" pos:column="52"/></name></expr></argument>)<pos:position pos:line="35" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="54"/></expr_stmt>
  <if pos:line="36" pos:column="3">if <condition pos:line="36" pos:column="6">(<expr><name pos:line="36" pos:column="7">status<pos:position pos:line="36" pos:column="13"/></name> <operator pos:line="36" pos:column="14">!=<pos:position pos:line="36" pos:column="16"/></operator> <literal type="number" pos:line="36" pos:column="17">0<pos:position pos:line="36" pos:column="18"/></literal></expr>)<pos:position pos:line="36" pos:column="19"/></condition><then pos:line="36" pos:column="19">
    <block type="pseudo"><return pos:line="37" pos:column="5">return <expr><operator pos:line="37" pos:column="12">(<pos:position pos:line="37" pos:column="13"/></operator><name pos:line="37" pos:column="13">status<pos:position pos:line="37" pos:column="19"/></name><operator pos:line="37" pos:column="19">)<pos:position pos:line="37" pos:column="20"/></operator></expr>;<pos:position pos:line="37" pos:column="21"/></return></block></then></if>
  <expr_stmt><expr><call><name pos:line="38" pos:column="3">BUFFER_ADD<pos:position pos:line="38" pos:column="13"/></name> <argument_list pos:line="38" pos:column="14">(<argument><expr><literal type="string" pos:line="38" pos:column="15">",\"dsnames\":%s"<pos:position pos:line="38" pos:column="32"/></literal></expr></argument>, <argument><expr><name pos:line="38" pos:column="34">temp<pos:position pos:line="38" pos:column="38"/></name></expr></argument>)<pos:position pos:line="38" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="40"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="40" pos:column="3">BUFFER_ADD<pos:position pos:line="40" pos:column="13"/></name> <argument_list pos:line="40" pos:column="14">(<argument><expr><literal type="string" pos:line="40" pos:column="15">",\"time\":%.3f"<pos:position pos:line="40" pos:column="31"/></literal></expr></argument>, <argument><expr><call><name pos:line="40" pos:column="33">CDTIME_T_TO_DOUBLE<pos:position pos:line="40" pos:column="51"/></name> <argument_list pos:line="40" pos:column="52">(<argument><expr><name><name pos:line="40" pos:column="53">vl<pos:position pos:line="40" pos:column="55"/></name><operator pos:line="40" pos:column="55">-&gt;<pos:position pos:line="40" pos:column="60"/></operator><name pos:line="40" pos:column="57">time<pos:position pos:line="40" pos:column="61"/></name></name></expr></argument>)<pos:position pos:line="40" pos:column="62"/></argument_list></call></expr></argument>)<pos:position pos:line="40" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="64"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="41" pos:column="3">BUFFER_ADD<pos:position pos:line="41" pos:column="13"/></name> <argument_list pos:line="41" pos:column="14">(<argument><expr><literal type="string" pos:line="41" pos:column="15">",\"interval\":%.3f"<pos:position pos:line="41" pos:column="35"/></literal></expr></argument>, <argument><expr><call><name pos:line="41" pos:column="37">CDTIME_T_TO_DOUBLE<pos:position pos:line="41" pos:column="55"/></name> <argument_list pos:line="41" pos:column="56">(<argument><expr><name><name pos:line="41" pos:column="57">vl<pos:position pos:line="41" pos:column="59"/></name><operator pos:line="41" pos:column="59">-&gt;<pos:position pos:line="41" pos:column="64"/></operator><name pos:line="41" pos:column="61">interval<pos:position pos:line="41" pos:column="69"/></name></name></expr></argument>)<pos:position pos:line="41" pos:column="70"/></argument_list></call></expr></argument>)<pos:position pos:line="41" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="72"/></expr_stmt>

<cpp:define pos:line="43" pos:column="1">#<cpp:directive pos:line="43" pos:column="2">define<pos:position pos:line="43" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="43" pos:column="9">BUFFER_ADD_KEYVAL<pos:position pos:line="43" pos:column="26"/></name><parameter_list pos:line="43" pos:column="26">(<parameter><type><name pos:line="43" pos:column="27">key<pos:position pos:line="43" pos:column="30"/></name></type></parameter>, <parameter><type><name pos:line="43" pos:column="32">value<pos:position pos:line="43" pos:column="37"/></name></type></parameter>)<pos:position pos:line="43" pos:column="38"/></parameter_list></cpp:macro> <cpp:value pos:line="43" pos:column="39">do { \
  status = json_escape_string (temp, sizeof (temp), (value)); \
  if (status != 0) \
    return (status); \
  BUFFER_ADD (",\"%s\":%s", (key), temp); \
} while (0)<pos:position pos:line="48" pos:column="12"/></cpp:value></cpp:define>

  <expr_stmt><expr><call><name pos:line="50" pos:column="3">BUFFER_ADD_KEYVAL<pos:position pos:line="50" pos:column="20"/></name> <argument_list pos:line="50" pos:column="21">(<argument><expr><literal type="string" pos:line="50" pos:column="22">"host"<pos:position pos:line="50" pos:column="28"/></literal></expr></argument>, <argument><expr><name><name pos:line="50" pos:column="30">vl<pos:position pos:line="50" pos:column="32"/></name><operator pos:line="50" pos:column="32">-&gt;<pos:position pos:line="50" pos:column="37"/></operator><name pos:line="50" pos:column="34">host<pos:position pos:line="50" pos:column="38"/></name></name></expr></argument>)<pos:position pos:line="50" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="40"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="51" pos:column="3">BUFFER_ADD_KEYVAL<pos:position pos:line="51" pos:column="20"/></name> <argument_list pos:line="51" pos:column="21">(<argument><expr><literal type="string" pos:line="51" pos:column="22">"plugin"<pos:position pos:line="51" pos:column="30"/></literal></expr></argument>, <argument><expr><name><name pos:line="51" pos:column="32">vl<pos:position pos:line="51" pos:column="34"/></name><operator pos:line="51" pos:column="34">-&gt;<pos:position pos:line="51" pos:column="39"/></operator><name pos:line="51" pos:column="36">plugin<pos:position pos:line="51" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="51" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="44"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="52" pos:column="3">BUFFER_ADD_KEYVAL<pos:position pos:line="52" pos:column="20"/></name> <argument_list pos:line="52" pos:column="21">(<argument><expr><literal type="string" pos:line="52" pos:column="22">"plugin_instance"<pos:position pos:line="52" pos:column="39"/></literal></expr></argument>, <argument><expr><name><name pos:line="52" pos:column="41">vl<pos:position pos:line="52" pos:column="43"/></name><operator pos:line="52" pos:column="43">-&gt;<pos:position pos:line="52" pos:column="48"/></operator><name pos:line="52" pos:column="45">plugin_instance<pos:position pos:line="52" pos:column="60"/></name></name></expr></argument>)<pos:position pos:line="52" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="62"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="53" pos:column="3">BUFFER_ADD_KEYVAL<pos:position pos:line="53" pos:column="20"/></name> <argument_list pos:line="53" pos:column="21">(<argument><expr><literal type="string" pos:line="53" pos:column="22">"type"<pos:position pos:line="53" pos:column="28"/></literal></expr></argument>, <argument><expr><name><name pos:line="53" pos:column="30">vl<pos:position pos:line="53" pos:column="32"/></name><operator pos:line="53" pos:column="32">-&gt;<pos:position pos:line="53" pos:column="37"/></operator><name pos:line="53" pos:column="34">type<pos:position pos:line="53" pos:column="38"/></name></name></expr></argument>)<pos:position pos:line="53" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="40"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="54" pos:column="3">BUFFER_ADD_KEYVAL<pos:position pos:line="54" pos:column="20"/></name> <argument_list pos:line="54" pos:column="21">(<argument><expr><literal type="string" pos:line="54" pos:column="22">"type_instance"<pos:position pos:line="54" pos:column="37"/></literal></expr></argument>, <argument><expr><name><name pos:line="54" pos:column="39">vl<pos:position pos:line="54" pos:column="41"/></name><operator pos:line="54" pos:column="41">-&gt;<pos:position pos:line="54" pos:column="46"/></operator><name pos:line="54" pos:column="43">type_instance<pos:position pos:line="54" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="54" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="58"/></expr_stmt>

  <if pos:line="56" pos:column="3">if <condition pos:line="56" pos:column="6">(<expr><name><name pos:line="56" pos:column="7">vl<pos:position pos:line="56" pos:column="9"/></name><operator pos:line="56" pos:column="9">-&gt;<pos:position pos:line="56" pos:column="14"/></operator><name pos:line="56" pos:column="11">meta<pos:position pos:line="56" pos:column="15"/></name></name> <operator pos:line="56" pos:column="16">!=<pos:position pos:line="56" pos:column="18"/></operator> <name pos:line="56" pos:column="19">NULL<pos:position pos:line="56" pos:column="23"/></name></expr>)<pos:position pos:line="56" pos:column="24"/></condition><then pos:line="56" pos:column="24">
  <block pos:line="57" pos:column="3">{
    <decl_stmt><decl><type><name pos:line="58" pos:column="5">char<pos:position pos:line="58" pos:column="9"/></name></type> <name><name pos:line="58" pos:column="10">meta_buffer<pos:position pos:line="58" pos:column="21"/></name><index pos:line="58" pos:column="21">[<expr><name pos:line="58" pos:column="22">buffer_size<pos:position pos:line="58" pos:column="33"/></name></expr>]<pos:position pos:line="58" pos:column="34"/></index></name></decl>;<pos:position pos:line="58" pos:column="35"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="59" pos:column="5">memset<pos:position pos:line="59" pos:column="11"/></name> <argument_list pos:line="59" pos:column="12">(<argument><expr><name pos:line="59" pos:column="13">meta_buffer<pos:position pos:line="59" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="59" pos:column="26">0<pos:position pos:line="59" pos:column="27"/></literal></expr></argument>, <argument><expr><sizeof pos:line="59" pos:column="29">sizeof <argument_list pos:line="59" pos:column="36">(<argument><expr><name pos:line="59" pos:column="37">meta_buffer<pos:position pos:line="59" pos:column="48"/></name></expr></argument>)<pos:position pos:line="59" pos:column="49"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="59" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="51"/></expr_stmt>
    <expr_stmt><expr><name pos:line="60" pos:column="5">status<pos:position pos:line="60" pos:column="11"/></name> <operator pos:line="60" pos:column="12">=<pos:position pos:line="60" pos:column="13"/></operator> <call><name pos:line="60" pos:column="14">meta_data_to_json<pos:position pos:line="60" pos:column="31"/></name> <argument_list pos:line="60" pos:column="32">(<argument><expr><name pos:line="60" pos:column="33">meta_buffer<pos:position pos:line="60" pos:column="44"/></name></expr></argument>, <argument><expr><sizeof pos:line="60" pos:column="46">sizeof <argument_list pos:line="60" pos:column="53">(<argument><expr><name pos:line="60" pos:column="54">meta_buffer<pos:position pos:line="60" pos:column="65"/></name></expr></argument>)<pos:position pos:line="60" pos:column="66"/></argument_list></sizeof></expr></argument>, <argument><expr><name><name pos:line="60" pos:column="68">vl<pos:position pos:line="60" pos:column="70"/></name><operator pos:line="60" pos:column="70">-&gt;<pos:position pos:line="60" pos:column="75"/></operator><name pos:line="60" pos:column="72">meta<pos:position pos:line="60" pos:column="76"/></name></name></expr></argument>)<pos:position pos:line="60" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="78"/></expr_stmt>
    <if pos:line="61" pos:column="5">if <condition pos:line="61" pos:column="8">(<expr><name pos:line="61" pos:column="9">status<pos:position pos:line="61" pos:column="15"/></name> <operator pos:line="61" pos:column="16">!=<pos:position pos:line="61" pos:column="18"/></operator> <literal type="number" pos:line="61" pos:column="19">0<pos:position pos:line="61" pos:column="20"/></literal></expr>)<pos:position pos:line="61" pos:column="21"/></condition><then pos:line="61" pos:column="21">
      <block type="pseudo"><return pos:line="62" pos:column="7">return <expr><operator pos:line="62" pos:column="14">(<pos:position pos:line="62" pos:column="15"/></operator><name pos:line="62" pos:column="15">status<pos:position pos:line="62" pos:column="21"/></name><operator pos:line="62" pos:column="21">)<pos:position pos:line="62" pos:column="22"/></operator></expr>;<pos:position pos:line="62" pos:column="23"/></return></block></then></if>

    <expr_stmt><expr><call><name pos:line="64" pos:column="5">BUFFER_ADD<pos:position pos:line="64" pos:column="15"/></name> <argument_list pos:line="64" pos:column="16">(<argument><expr><literal type="string" pos:line="64" pos:column="17">",\"meta\":%s"<pos:position pos:line="64" pos:column="31"/></literal></expr></argument>, <argument><expr><name pos:line="64" pos:column="33">meta_buffer<pos:position pos:line="64" pos:column="44"/></name></expr></argument>)<pos:position pos:line="64" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="46"/></expr_stmt>
  }<pos:position pos:line="65" pos:column="4"/></block></then></if> <comment type="block" pos:line="65" pos:column="5">/* if (vl-&gt;meta != NULL) */</comment>

  <expr_stmt><expr><call><name pos:line="67" pos:column="3">BUFFER_ADD<pos:position pos:line="67" pos:column="13"/></name> <argument_list pos:line="67" pos:column="14">(<argument><expr><literal type="string" pos:line="67" pos:column="15">"}"<pos:position pos:line="67" pos:column="18"/></literal></expr></argument>)<pos:position pos:line="67" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="20"/></expr_stmt>

<cpp:undef pos:line="69" pos:column="1">#<cpp:directive pos:line="69" pos:column="2">undef<pos:position pos:line="69" pos:column="7"/></cpp:directive> <name pos:line="69" pos:column="8">BUFFER_ADD_KEYVAL<pos:position pos:line="69" pos:column="25"/></name></cpp:undef>
<cpp:undef pos:line="70" pos:column="1">#<cpp:directive pos:line="70" pos:column="2">undef<pos:position pos:line="70" pos:column="7"/></cpp:directive> <name pos:line="70" pos:column="8">BUFFER_ADD<pos:position pos:line="70" pos:column="18"/></name></cpp:undef>

  <expr_stmt><expr><call><name pos:line="72" pos:column="3">DEBUG<pos:position pos:line="72" pos:column="8"/></name> <argument_list pos:line="72" pos:column="9">(<argument><expr><literal type="string" pos:line="72" pos:column="10">"format_json: value_list_to_json: buffer = %s;"<pos:position pos:line="72" pos:column="57"/></literal></expr></argument>, <argument><expr><name pos:line="72" pos:column="59">buffer<pos:position pos:line="72" pos:column="65"/></name></expr></argument>)<pos:position pos:line="72" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="67"/></expr_stmt>

  <return pos:line="74" pos:column="3">return <expr><operator pos:line="74" pos:column="10">(<pos:position pos:line="74" pos:column="11"/></operator><literal type="number" pos:line="74" pos:column="11">0<pos:position pos:line="74" pos:column="12"/></literal><operator pos:line="74" pos:column="12">)<pos:position pos:line="74" pos:column="13"/></operator></expr>;<pos:position pos:line="74" pos:column="14"/></return>
}<pos:position pos:line="75" pos:column="2"/></block></function></unit>
