<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1466_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">cmd_status_t<pos:position pos:line="1" pos:column="13"/></name></type> <name pos:line="1" pos:column="14">cmd_handle_getval<pos:position pos:line="1" pos:column="31"/></name><parameter_list pos:line="1" pos:column="31">(<parameter><decl><type><name pos:line="1" pos:column="32">FILE<pos:position pos:line="1" pos:column="36"/></name> <modifier pos:line="1" pos:column="37">*<pos:position pos:line="1" pos:column="38"/></modifier></type><name pos:line="1" pos:column="38">fh<pos:position pos:line="1" pos:column="40"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="42">char<pos:position pos:line="1" pos:column="46"/></name> <modifier pos:line="1" pos:column="47">*<pos:position pos:line="1" pos:column="48"/></modifier></type><name pos:line="1" pos:column="48">buffer<pos:position pos:line="1" pos:column="54"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="55"/></parameter_list> <block pos:line="1" pos:column="56">{
  <decl_stmt><decl><type><name pos:line="2" pos:column="3">cmd_error_handler_t<pos:position pos:line="2" pos:column="22"/></name></type> <name pos:line="2" pos:column="23">err<pos:position pos:line="2" pos:column="26"/></name> <init pos:line="2" pos:column="27">= <expr><block pos:line="2" pos:column="29">{<expr><name pos:line="2" pos:column="30">cmd_error_fh<pos:position pos:line="2" pos:column="42"/></name></expr>, <expr><name pos:line="2" pos:column="44">fh<pos:position pos:line="2" pos:column="46"/></name></expr>}<pos:position pos:line="2" pos:column="47"/></block></expr></init></decl>;<pos:position pos:line="2" pos:column="48"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">cmd_status_t<pos:position pos:line="3" pos:column="15"/></name></type> <name pos:line="3" pos:column="16">status<pos:position pos:line="3" pos:column="22"/></name></decl>;<pos:position pos:line="3" pos:column="23"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">cmd_t<pos:position pos:line="4" pos:column="8"/></name></type> <name pos:line="4" pos:column="9">cmd<pos:position pos:line="4" pos:column="12"/></name></decl>;<pos:position pos:line="4" pos:column="13"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="6" pos:column="3">gauge_t<pos:position pos:line="6" pos:column="10"/></name> <modifier pos:line="6" pos:column="11">*<pos:position pos:line="6" pos:column="12"/></modifier></type><name pos:line="6" pos:column="12">values<pos:position pos:line="6" pos:column="18"/></name></decl>;<pos:position pos:line="6" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">size_t<pos:position pos:line="7" pos:column="9"/></name></type> <name pos:line="7" pos:column="10">values_num<pos:position pos:line="7" pos:column="20"/></name></decl>;<pos:position pos:line="7" pos:column="21"/></decl_stmt>

  <decl_stmt><decl><type><specifier pos:line="9" pos:column="3">const<pos:position pos:line="9" pos:column="8"/></specifier> <name pos:line="9" pos:column="9">data_set_t<pos:position pos:line="9" pos:column="19"/></name> <modifier pos:line="9" pos:column="20">*<pos:position pos:line="9" pos:column="21"/></modifier></type><name pos:line="9" pos:column="21">ds<pos:position pos:line="9" pos:column="23"/></name></decl>;<pos:position pos:line="9" pos:column="24"/></decl_stmt>

  <if pos:line="11" pos:column="3">if <condition pos:line="11" pos:column="6">(<expr><operator pos:line="11" pos:column="7">(<pos:position pos:line="11" pos:column="8"/></operator><name pos:line="11" pos:column="8">fh<pos:position pos:line="11" pos:column="10"/></name> <operator pos:line="11" pos:column="11">==<pos:position pos:line="11" pos:column="13"/></operator> <name pos:line="11" pos:column="14">NULL<pos:position pos:line="11" pos:column="18"/></name><operator pos:line="11" pos:column="18">)<pos:position pos:line="11" pos:column="19"/></operator> <operator pos:line="11" pos:column="20">||<pos:position pos:line="11" pos:column="22"/></operator> <operator pos:line="11" pos:column="23">(<pos:position pos:line="11" pos:column="24"/></operator><name pos:line="11" pos:column="24">buffer<pos:position pos:line="11" pos:column="30"/></name> <operator pos:line="11" pos:column="31">==<pos:position pos:line="11" pos:column="33"/></operator> <name pos:line="11" pos:column="34">NULL<pos:position pos:line="11" pos:column="38"/></name><operator pos:line="11" pos:column="38">)<pos:position pos:line="11" pos:column="39"/></operator></expr>)<pos:position pos:line="11" pos:column="40"/></condition><then pos:line="11" pos:column="40">
    <block type="pseudo"><return pos:line="12" pos:column="5">return <expr><operator pos:line="12" pos:column="12">-<pos:position pos:line="12" pos:column="13"/></operator><literal type="number" pos:line="12" pos:column="13">1<pos:position pos:line="12" pos:column="14"/></literal></expr>;<pos:position pos:line="12" pos:column="15"/></return></block></then></if>

  <expr_stmt><expr><call><name pos:line="14" pos:column="3">DEBUG<pos:position pos:line="14" pos:column="8"/></name><argument_list pos:line="14" pos:column="8">(<argument><expr><literal type="string" pos:line="14" pos:column="9">"utils_cmd_getval: cmd_handle_getval (fh = %p, buffer = %s);"<pos:position pos:line="14" pos:column="70"/></literal></expr></argument>,
        <argument><expr><operator pos:line="15" pos:column="9">(<pos:position pos:line="15" pos:column="10"/></operator><name pos:line="15" pos:column="10">void<pos:position pos:line="15" pos:column="14"/></name> <operator pos:line="15" pos:column="15">*<pos:position pos:line="15" pos:column="16"/></operator><operator pos:line="15" pos:column="16">)<pos:position pos:line="15" pos:column="17"/></operator><name pos:line="15" pos:column="17">fh<pos:position pos:line="15" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="21">buffer<pos:position pos:line="15" pos:column="27"/></name></expr></argument>)<pos:position pos:line="15" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="29"/></expr_stmt>

  <if pos:line="17" pos:column="3">if <condition pos:line="17" pos:column="6">(<expr><operator pos:line="17" pos:column="7">(<pos:position pos:line="17" pos:column="8"/></operator><name pos:line="17" pos:column="8">status<pos:position pos:line="17" pos:column="14"/></name> <operator pos:line="17" pos:column="15">=<pos:position pos:line="17" pos:column="16"/></operator> <call><name pos:line="17" pos:column="17">cmd_parse<pos:position pos:line="17" pos:column="26"/></name><argument_list pos:line="17" pos:column="26">(<argument><expr><name pos:line="17" pos:column="27">buffer<pos:position pos:line="17" pos:column="33"/></name></expr></argument>, <argument><expr><operator pos:line="17" pos:column="35">&amp;<pos:position pos:line="17" pos:column="40"/></operator><name pos:line="17" pos:column="36">cmd<pos:position pos:line="17" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="41">NULL<pos:position pos:line="17" pos:column="45"/></name></expr></argument>, <argument><expr><operator pos:line="17" pos:column="47">&amp;<pos:position pos:line="17" pos:column="52"/></operator><name pos:line="17" pos:column="48">err<pos:position pos:line="17" pos:column="51"/></name></expr></argument>)<pos:position pos:line="17" pos:column="52"/></argument_list></call><operator pos:line="17" pos:column="52">)<pos:position pos:line="17" pos:column="53"/></operator> <operator pos:line="17" pos:column="54">!=<pos:position pos:line="17" pos:column="56"/></operator> <name pos:line="17" pos:column="57">CMD_OK<pos:position pos:line="17" pos:column="63"/></name></expr>)<pos:position pos:line="17" pos:column="64"/></condition><then pos:line="17" pos:column="64">
    <block type="pseudo"><return pos:line="18" pos:column="5">return <expr><name pos:line="18" pos:column="12">status<pos:position pos:line="18" pos:column="18"/></name></expr>;<pos:position pos:line="18" pos:column="19"/></return></block></then></if>
  <if pos:line="19" pos:column="3">if <condition pos:line="19" pos:column="6">(<expr><name><name pos:line="19" pos:column="7">cmd<pos:position pos:line="19" pos:column="10"/></name><operator pos:line="19" pos:column="10">.<pos:position pos:line="19" pos:column="11"/></operator><name pos:line="19" pos:column="11">type<pos:position pos:line="19" pos:column="15"/></name></name> <operator pos:line="19" pos:column="16">!=<pos:position pos:line="19" pos:column="18"/></operator> <name pos:line="19" pos:column="19">CMD_GETVAL<pos:position pos:line="19" pos:column="29"/></name></expr>)<pos:position pos:line="19" pos:column="30"/></condition><then pos:line="19" pos:column="30"> <block pos:line="19" pos:column="31">{
    <expr_stmt><expr><call><name pos:line="20" pos:column="5">cmd_error<pos:position pos:line="20" pos:column="14"/></name><argument_list pos:line="20" pos:column="14">(<argument><expr><name pos:line="20" pos:column="15">CMD_UNKNOWN_COMMAND<pos:position pos:line="20" pos:column="34"/></name></expr></argument>, <argument><expr><operator pos:line="20" pos:column="36">&amp;<pos:position pos:line="20" pos:column="41"/></operator><name pos:line="20" pos:column="37">err<pos:position pos:line="20" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="20" pos:column="42">"Unexpected command: `%s'."<pos:position pos:line="20" pos:column="69"/></literal></expr></argument>,
              <argument><expr><call><name pos:line="21" pos:column="15">CMD_TO_STRING<pos:position pos:line="21" pos:column="28"/></name><argument_list pos:line="21" pos:column="28">(<argument><expr><name><name pos:line="21" pos:column="29">cmd<pos:position pos:line="21" pos:column="32"/></name><operator pos:line="21" pos:column="32">.<pos:position pos:line="21" pos:column="33"/></operator><name pos:line="21" pos:column="33">type<pos:position pos:line="21" pos:column="37"/></name></name></expr></argument>)<pos:position pos:line="21" pos:column="38"/></argument_list></call></expr></argument>)<pos:position pos:line="21" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="40"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="22" pos:column="5">cmd_destroy<pos:position pos:line="22" pos:column="16"/></name><argument_list pos:line="22" pos:column="16">(<argument><expr><operator pos:line="22" pos:column="17">&amp;<pos:position pos:line="22" pos:column="22"/></operator><name pos:line="22" pos:column="18">cmd<pos:position pos:line="22" pos:column="21"/></name></expr></argument>)<pos:position pos:line="22" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="23"/></expr_stmt>
    <return pos:line="23" pos:column="5">return <expr><name pos:line="23" pos:column="12">CMD_UNKNOWN_COMMAND<pos:position pos:line="23" pos:column="31"/></name></expr>;<pos:position pos:line="23" pos:column="32"/></return>
  }<pos:position pos:line="24" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="26" pos:column="3">ds<pos:position pos:line="26" pos:column="5"/></name> <operator pos:line="26" pos:column="6">=<pos:position pos:line="26" pos:column="7"/></operator> <call><name pos:line="26" pos:column="8">plugin_get_ds<pos:position pos:line="26" pos:column="21"/></name><argument_list pos:line="26" pos:column="21">(<argument><expr><name><name pos:line="26" pos:column="22">cmd<pos:position pos:line="26" pos:column="25"/></name><operator pos:line="26" pos:column="25">.<pos:position pos:line="26" pos:column="26"/></operator><name pos:line="26" pos:column="26">cmd<pos:position pos:line="26" pos:column="29"/></name><operator pos:line="26" pos:column="29">.<pos:position pos:line="26" pos:column="30"/></operator><name pos:line="26" pos:column="30">getval<pos:position pos:line="26" pos:column="36"/></name><operator pos:line="26" pos:column="36">.<pos:position pos:line="26" pos:column="37"/></operator><name pos:line="26" pos:column="37">identifier<pos:position pos:line="26" pos:column="47"/></name><operator pos:line="26" pos:column="47">.<pos:position pos:line="26" pos:column="48"/></operator><name pos:line="26" pos:column="48">type<pos:position pos:line="26" pos:column="52"/></name></name></expr></argument>)<pos:position pos:line="26" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="54"/></expr_stmt>
  <if pos:line="27" pos:column="3">if <condition pos:line="27" pos:column="6">(<expr><name pos:line="27" pos:column="7">ds<pos:position pos:line="27" pos:column="9"/></name> <operator pos:line="27" pos:column="10">==<pos:position pos:line="27" pos:column="12"/></operator> <name pos:line="27" pos:column="13">NULL<pos:position pos:line="27" pos:column="17"/></name></expr>)<pos:position pos:line="27" pos:column="18"/></condition><then pos:line="27" pos:column="18"> <block pos:line="27" pos:column="19">{
    <expr_stmt><expr><call><name pos:line="28" pos:column="5">DEBUG<pos:position pos:line="28" pos:column="10"/></name><argument_list pos:line="28" pos:column="10">(<argument><expr><literal type="string" pos:line="28" pos:column="11">"cmd_handle_getval: plugin_get_ds (%s) == NULL;"<pos:position pos:line="28" pos:column="59"/></literal></expr></argument>,
          <argument><expr><name><name pos:line="29" pos:column="11">cmd<pos:position pos:line="29" pos:column="14"/></name><operator pos:line="29" pos:column="14">.<pos:position pos:line="29" pos:column="15"/></operator><name pos:line="29" pos:column="15">cmd<pos:position pos:line="29" pos:column="18"/></name><operator pos:line="29" pos:column="18">.<pos:position pos:line="29" pos:column="19"/></operator><name pos:line="29" pos:column="19">getval<pos:position pos:line="29" pos:column="25"/></name><operator pos:line="29" pos:column="25">.<pos:position pos:line="29" pos:column="26"/></operator><name pos:line="29" pos:column="26">identifier<pos:position pos:line="29" pos:column="36"/></name><operator pos:line="29" pos:column="36">.<pos:position pos:line="29" pos:column="37"/></operator><name pos:line="29" pos:column="37">type<pos:position pos:line="29" pos:column="41"/></name></name></expr></argument>)<pos:position pos:line="29" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="43"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="30" pos:column="5">cmd_error<pos:position pos:line="30" pos:column="14"/></name><argument_list pos:line="30" pos:column="14">(<argument><expr><name pos:line="30" pos:column="15">CMD_ERROR<pos:position pos:line="30" pos:column="24"/></name></expr></argument>, <argument><expr><operator pos:line="30" pos:column="26">&amp;<pos:position pos:line="30" pos:column="31"/></operator><name pos:line="30" pos:column="27">err<pos:position pos:line="30" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="30" pos:column="32">"Type `%s' is unknown.\n"<pos:position pos:line="30" pos:column="57"/></literal></expr></argument>,
              <argument><expr><name><name pos:line="31" pos:column="15">cmd<pos:position pos:line="31" pos:column="18"/></name><operator pos:line="31" pos:column="18">.<pos:position pos:line="31" pos:column="19"/></operator><name pos:line="31" pos:column="19">cmd<pos:position pos:line="31" pos:column="22"/></name><operator pos:line="31" pos:column="22">.<pos:position pos:line="31" pos:column="23"/></operator><name pos:line="31" pos:column="23">getval<pos:position pos:line="31" pos:column="29"/></name><operator pos:line="31" pos:column="29">.<pos:position pos:line="31" pos:column="30"/></operator><name pos:line="31" pos:column="30">identifier<pos:position pos:line="31" pos:column="40"/></name><operator pos:line="31" pos:column="40">.<pos:position pos:line="31" pos:column="41"/></operator><name pos:line="31" pos:column="41">type<pos:position pos:line="31" pos:column="45"/></name></name></expr></argument>)<pos:position pos:line="31" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="47"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="32" pos:column="5">cmd_destroy<pos:position pos:line="32" pos:column="16"/></name><argument_list pos:line="32" pos:column="16">(<argument><expr><operator pos:line="32" pos:column="17">&amp;<pos:position pos:line="32" pos:column="22"/></operator><name pos:line="32" pos:column="18">cmd<pos:position pos:line="32" pos:column="21"/></name></expr></argument>)<pos:position pos:line="32" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="23"/></expr_stmt>
    <return pos:line="33" pos:column="5">return <expr><operator pos:line="33" pos:column="12">-<pos:position pos:line="33" pos:column="13"/></operator><literal type="number" pos:line="33" pos:column="13">1<pos:position pos:line="33" pos:column="14"/></literal></expr>;<pos:position pos:line="33" pos:column="15"/></return>
  }<pos:position pos:line="34" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="36" pos:column="3">values<pos:position pos:line="36" pos:column="9"/></name> <operator pos:line="36" pos:column="10">=<pos:position pos:line="36" pos:column="11"/></operator> <name pos:line="36" pos:column="12">NULL<pos:position pos:line="36" pos:column="16"/></name></expr>;<pos:position pos:line="36" pos:column="17"/></expr_stmt>
  <expr_stmt><expr><name pos:line="37" pos:column="3">values_num<pos:position pos:line="37" pos:column="13"/></name> <operator pos:line="37" pos:column="14">=<pos:position pos:line="37" pos:column="15"/></operator> <literal type="number" pos:line="37" pos:column="16">0<pos:position pos:line="37" pos:column="17"/></literal></expr>;<pos:position pos:line="37" pos:column="18"/></expr_stmt>
  <expr_stmt><expr><name pos:line="38" pos:column="3">status<pos:position pos:line="38" pos:column="9"/></name> <operator pos:line="38" pos:column="10">=<pos:position pos:line="38" pos:column="11"/></operator>
      <call><name pos:line="39" pos:column="7">uc_get_rate_by_name<pos:position pos:line="39" pos:column="26"/></name><argument_list pos:line="39" pos:column="26">(<argument><expr><name><name pos:line="39" pos:column="27">cmd<pos:position pos:line="39" pos:column="30"/></name><operator pos:line="39" pos:column="30">.<pos:position pos:line="39" pos:column="31"/></operator><name pos:line="39" pos:column="31">cmd<pos:position pos:line="39" pos:column="34"/></name><operator pos:line="39" pos:column="34">.<pos:position pos:line="39" pos:column="35"/></operator><name pos:line="39" pos:column="35">getval<pos:position pos:line="39" pos:column="41"/></name><operator pos:line="39" pos:column="41">.<pos:position pos:line="39" pos:column="42"/></operator><name pos:line="39" pos:column="42">raw_identifier<pos:position pos:line="39" pos:column="56"/></name></name></expr></argument>, <argument><expr><operator pos:line="39" pos:column="58">&amp;<pos:position pos:line="39" pos:column="63"/></operator><name pos:line="39" pos:column="59">values<pos:position pos:line="39" pos:column="65"/></name></expr></argument>, <argument><expr><operator pos:line="39" pos:column="67">&amp;<pos:position pos:line="39" pos:column="72"/></operator><name pos:line="39" pos:column="68">values_num<pos:position pos:line="39" pos:column="78"/></name></expr></argument>)<pos:position pos:line="39" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="80"/></expr_stmt>
  <if pos:line="40" pos:column="3">if <condition pos:line="40" pos:column="6">(<expr><name pos:line="40" pos:column="7">status<pos:position pos:line="40" pos:column="13"/></name> <operator pos:line="40" pos:column="14">!=<pos:position pos:line="40" pos:column="16"/></operator> <literal type="number" pos:line="40" pos:column="17">0<pos:position pos:line="40" pos:column="18"/></literal></expr>)<pos:position pos:line="40" pos:column="19"/></condition><then pos:line="40" pos:column="19"> <block pos:line="40" pos:column="20">{
    <expr_stmt><expr><call><name pos:line="41" pos:column="5">cmd_error<pos:position pos:line="41" pos:column="14"/></name><argument_list pos:line="41" pos:column="14">(<argument><expr><name pos:line="41" pos:column="15">CMD_ERROR<pos:position pos:line="41" pos:column="24"/></name></expr></argument>, <argument><expr><operator pos:line="41" pos:column="26">&amp;<pos:position pos:line="41" pos:column="31"/></operator><name pos:line="41" pos:column="27">err<pos:position pos:line="41" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="41" pos:column="32">"No such value."<pos:position pos:line="41" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="41" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="50"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="42" pos:column="5">cmd_destroy<pos:position pos:line="42" pos:column="16"/></name><argument_list pos:line="42" pos:column="16">(<argument><expr><operator pos:line="42" pos:column="17">&amp;<pos:position pos:line="42" pos:column="22"/></operator><name pos:line="42" pos:column="18">cmd<pos:position pos:line="42" pos:column="21"/></name></expr></argument>)<pos:position pos:line="42" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="23"/></expr_stmt>
    <return pos:line="43" pos:column="5">return <expr><name pos:line="43" pos:column="12">CMD_ERROR<pos:position pos:line="43" pos:column="21"/></name></expr>;<pos:position pos:line="43" pos:column="22"/></return>
  }<pos:position pos:line="44" pos:column="4"/></block></then></if>

  <if pos:line="46" pos:column="3">if <condition pos:line="46" pos:column="6">(<expr><name><name pos:line="46" pos:column="7">ds<pos:position pos:line="46" pos:column="9"/></name><operator pos:line="46" pos:column="9">-&gt;<pos:position pos:line="46" pos:column="14"/></operator><name pos:line="46" pos:column="11">ds_num<pos:position pos:line="46" pos:column="17"/></name></name> <operator pos:line="46" pos:column="18">!=<pos:position pos:line="46" pos:column="20"/></operator> <name pos:line="46" pos:column="21">values_num<pos:position pos:line="46" pos:column="31"/></name></expr>)<pos:position pos:line="46" pos:column="32"/></condition><then pos:line="46" pos:column="32"> <block pos:line="46" pos:column="33">{
    <expr_stmt><expr><call><name pos:line="47" pos:column="5">ERROR<pos:position pos:line="47" pos:column="10"/></name><argument_list pos:line="47" pos:column="10">(<argument><expr><literal type="string" pos:line="47" pos:column="11">"ds[%s]-&gt;ds_num = %zu, "<pos:position pos:line="47" pos:column="38"/></literal>
          <literal type="string" pos:line="48" pos:column="11">"but uc_get_rate_by_name returned %zu values."<pos:position pos:line="48" pos:column="57"/></literal></expr></argument>,
          <argument><expr><name><name pos:line="49" pos:column="11">ds<pos:position pos:line="49" pos:column="13"/></name><operator pos:line="49" pos:column="13">-&gt;<pos:position pos:line="49" pos:column="18"/></operator><name pos:line="49" pos:column="15">type<pos:position pos:line="49" pos:column="19"/></name></name></expr></argument>, <argument><expr><name><name pos:line="49" pos:column="21">ds<pos:position pos:line="49" pos:column="23"/></name><operator pos:line="49" pos:column="23">-&gt;<pos:position pos:line="49" pos:column="28"/></operator><name pos:line="49" pos:column="25">ds_num<pos:position pos:line="49" pos:column="31"/></name></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="33">values_num<pos:position pos:line="49" pos:column="43"/></name></expr></argument>)<pos:position pos:line="49" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="45"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="50" pos:column="5">cmd_error<pos:position pos:line="50" pos:column="14"/></name><argument_list pos:line="50" pos:column="14">(<argument><expr><name pos:line="50" pos:column="15">CMD_ERROR<pos:position pos:line="50" pos:column="24"/></name></expr></argument>, <argument><expr><operator pos:line="50" pos:column="26">&amp;<pos:position pos:line="50" pos:column="31"/></operator><name pos:line="50" pos:column="27">err<pos:position pos:line="50" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="50" pos:column="32">"Error reading value from cache."<pos:position pos:line="50" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="50" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="67"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="51" pos:column="5">sfree<pos:position pos:line="51" pos:column="10"/></name><argument_list pos:line="51" pos:column="10">(<argument><expr><name pos:line="51" pos:column="11">values<pos:position pos:line="51" pos:column="17"/></name></expr></argument>)<pos:position pos:line="51" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="19"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="52" pos:column="5">cmd_destroy<pos:position pos:line="52" pos:column="16"/></name><argument_list pos:line="52" pos:column="16">(<argument><expr><operator pos:line="52" pos:column="17">&amp;<pos:position pos:line="52" pos:column="22"/></operator><name pos:line="52" pos:column="18">cmd<pos:position pos:line="52" pos:column="21"/></name></expr></argument>)<pos:position pos:line="52" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="23"/></expr_stmt>
    <return pos:line="53" pos:column="5">return <expr><name pos:line="53" pos:column="12">CMD_ERROR<pos:position pos:line="53" pos:column="21"/></name></expr>;<pos:position pos:line="53" pos:column="22"/></return>
  }<pos:position pos:line="54" pos:column="4"/></block></then></if>

  <expr_stmt><expr><call><name pos:line="56" pos:column="3">print_to_socket<pos:position pos:line="56" pos:column="18"/></name><argument_list pos:line="56" pos:column="18">(<argument><expr><name pos:line="56" pos:column="19">fh<pos:position pos:line="56" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="56" pos:column="23">"%zu Value%s found\n"<pos:position pos:line="56" pos:column="44"/></literal></expr></argument>, <argument><expr><name pos:line="56" pos:column="46">values_num<pos:position pos:line="56" pos:column="56"/></name></expr></argument>,
                  <argument><expr><ternary><condition><expr><operator pos:line="57" pos:column="19">(<pos:position pos:line="57" pos:column="20"/></operator><name pos:line="57" pos:column="20">values_num<pos:position pos:line="57" pos:column="30"/></name> <operator pos:line="57" pos:column="31">==<pos:position pos:line="57" pos:column="33"/></operator> <literal type="number" pos:line="57" pos:column="34">1<pos:position pos:line="57" pos:column="35"/></literal><operator pos:line="57" pos:column="35">)<pos:position pos:line="57" pos:column="36"/></operator></expr> ?<pos:position pos:line="57" pos:column="38"/></condition><then pos:line="57" pos:column="38"> <expr><literal type="string" pos:line="57" pos:column="39">""<pos:position pos:line="57" pos:column="41"/></literal></expr> <pos:position pos:line="57" pos:column="42"/></then><else pos:line="57" pos:column="42">: <expr><literal type="string" pos:line="57" pos:column="44">"s"<pos:position pos:line="57" pos:column="47"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="57" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="49"/></expr_stmt>
  <for pos:line="58" pos:column="3">for <control pos:line="58" pos:column="7">(<init><decl><type><name pos:line="58" pos:column="8">size_t<pos:position pos:line="58" pos:column="14"/></name></type> <name pos:line="58" pos:column="15">i<pos:position pos:line="58" pos:column="16"/></name> <init pos:line="58" pos:column="17">= <expr><literal type="number" pos:line="58" pos:column="19">0<pos:position pos:line="58" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="58" pos:column="21"/></init> <condition><expr><name pos:line="58" pos:column="22">i<pos:position pos:line="58" pos:column="23"/></name> <operator pos:line="58" pos:column="24">&lt;<pos:position pos:line="58" pos:column="28"/></operator> <name pos:line="58" pos:column="26">values_num<pos:position pos:line="58" pos:column="36"/></name></expr>;<pos:position pos:line="58" pos:column="37"/></condition> <incr><expr><name pos:line="58" pos:column="38">i<pos:position pos:line="58" pos:column="39"/></name><operator pos:line="58" pos:column="39">++<pos:position pos:line="58" pos:column="41"/></operator></expr></incr>)<pos:position pos:line="58" pos:column="42"/></control> <block pos:line="58" pos:column="43">{
    <expr_stmt><expr><call><name pos:line="59" pos:column="5">print_to_socket<pos:position pos:line="59" pos:column="20"/></name><argument_list pos:line="59" pos:column="20">(<argument><expr><name pos:line="59" pos:column="21">fh<pos:position pos:line="59" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="59" pos:column="25">"%s="<pos:position pos:line="59" pos:column="30"/></literal></expr></argument>, <argument><expr><name><name pos:line="59" pos:column="32">ds<pos:position pos:line="59" pos:column="34"/></name><operator pos:line="59" pos:column="34">-&gt;<pos:position pos:line="59" pos:column="39"/></operator><name pos:line="59" pos:column="36">ds<pos:position pos:line="59" pos:column="38"/></name><index pos:line="59" pos:column="38">[<expr><name pos:line="59" pos:column="39">i<pos:position pos:line="59" pos:column="40"/></name></expr>]<pos:position pos:line="59" pos:column="41"/></index></name><operator pos:line="59" pos:column="41">.<pos:position pos:line="59" pos:column="42"/></operator><name pos:line="59" pos:column="42">name<pos:position pos:line="59" pos:column="46"/></name></expr></argument>)<pos:position pos:line="59" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="48"/></expr_stmt>
    <if pos:line="60" pos:column="5">if <condition pos:line="60" pos:column="8">(<expr><call><name pos:line="60" pos:column="9">isnan<pos:position pos:line="60" pos:column="14"/></name><argument_list pos:line="60" pos:column="14">(<argument><expr><name><name pos:line="60" pos:column="15">values<pos:position pos:line="60" pos:column="21"/></name><index pos:line="60" pos:column="21">[<expr><name pos:line="60" pos:column="22">i<pos:position pos:line="60" pos:column="23"/></name></expr>]<pos:position pos:line="60" pos:column="24"/></index></name></expr></argument>)<pos:position pos:line="60" pos:column="25"/></argument_list></call></expr>)<pos:position pos:line="60" pos:column="26"/></condition><then pos:line="60" pos:column="26"> <block pos:line="60" pos:column="27">{
      <expr_stmt><expr><call><name pos:line="61" pos:column="7">print_to_socket<pos:position pos:line="61" pos:column="22"/></name><argument_list pos:line="61" pos:column="22">(<argument><expr><name pos:line="61" pos:column="23">fh<pos:position pos:line="61" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="61" pos:column="27">"NaN\n"<pos:position pos:line="61" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="61" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="36"/></expr_stmt>
    }<pos:position pos:line="62" pos:column="6"/></block></then> <else pos:line="62" pos:column="7">else <block pos:line="62" pos:column="12">{
      <expr_stmt><expr><call><name pos:line="63" pos:column="7">print_to_socket<pos:position pos:line="63" pos:column="22"/></name><argument_list pos:line="63" pos:column="22">(<argument><expr><name pos:line="63" pos:column="23">fh<pos:position pos:line="63" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="63" pos:column="27">"%12e\n"<pos:position pos:line="63" pos:column="35"/></literal></expr></argument>, <argument><expr><name><name pos:line="63" pos:column="37">values<pos:position pos:line="63" pos:column="43"/></name><index pos:line="63" pos:column="43">[<expr><name pos:line="63" pos:column="44">i<pos:position pos:line="63" pos:column="45"/></name></expr>]<pos:position pos:line="63" pos:column="46"/></index></name></expr></argument>)<pos:position pos:line="63" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="48"/></expr_stmt>
    }<pos:position pos:line="64" pos:column="6"/></block></else></if>
  }<pos:position pos:line="65" pos:column="4"/></block></for>

  <expr_stmt><expr><call><name pos:line="67" pos:column="3">sfree<pos:position pos:line="67" pos:column="8"/></name><argument_list pos:line="67" pos:column="8">(<argument><expr><name pos:line="67" pos:column="9">values<pos:position pos:line="67" pos:column="15"/></name></expr></argument>)<pos:position pos:line="67" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="17"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="68" pos:column="3">cmd_destroy<pos:position pos:line="68" pos:column="14"/></name><argument_list pos:line="68" pos:column="14">(<argument><expr><operator pos:line="68" pos:column="15">&amp;<pos:position pos:line="68" pos:column="20"/></operator><name pos:line="68" pos:column="16">cmd<pos:position pos:line="68" pos:column="19"/></name></expr></argument>)<pos:position pos:line="68" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="21"/></expr_stmt>

  <return pos:line="70" pos:column="3">return <expr><name pos:line="70" pos:column="10">CMD_OK<pos:position pos:line="70" pos:column="16"/></name></expr>;<pos:position pos:line="70" pos:column="17"/></return>
}<pos:position pos:line="71" pos:column="2"/></block></function></unit>
