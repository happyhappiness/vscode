<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1482_collectd-5.5.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">statsd_metric_add<pos:position pos:line="1" pos:column="29"/></name> <parameter_list pos:line="1" pos:column="30">(<parameter><decl><type><name pos:line="1" pos:column="31">char<pos:position pos:line="1" pos:column="35"/></name> <specifier pos:line="1" pos:column="36">const<pos:position pos:line="1" pos:column="41"/></specifier> <modifier pos:line="1" pos:column="42">*<pos:position pos:line="1" pos:column="43"/></modifier></type><name pos:line="1" pos:column="43">name<pos:position pos:line="1" pos:column="47"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="49">double<pos:position pos:line="1" pos:column="55"/></name></type> <name pos:line="1" pos:column="56">delta<pos:position pos:line="1" pos:column="61"/></name></decl></parameter>, <comment type="block" pos:line="1" pos:column="63">/* {{{ */</comment>
    <parameter><decl><type><name pos:line="2" pos:column="5">metric_type_t<pos:position pos:line="2" pos:column="18"/></name></type> <name pos:line="2" pos:column="19">type<pos:position pos:line="2" pos:column="23"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="24"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">statsd_metric_t<pos:position pos:line="4" pos:column="18"/></name> <modifier pos:line="4" pos:column="19">*<pos:position pos:line="4" pos:column="20"/></modifier></type><name pos:line="4" pos:column="20">metric<pos:position pos:line="4" pos:column="26"/></name></decl>;<pos:position pos:line="4" pos:column="27"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="6" pos:column="3">pthread_mutex_lock<pos:position pos:line="6" pos:column="21"/></name> <argument_list pos:line="6" pos:column="22">(<argument><expr><operator pos:line="6" pos:column="23">&amp;<pos:position pos:line="6" pos:column="28"/></operator><name pos:line="6" pos:column="24">metrics_lock<pos:position pos:line="6" pos:column="36"/></name></expr></argument>)<pos:position pos:line="6" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="38"/></expr_stmt>

  <expr_stmt><expr><name pos:line="8" pos:column="3">metric<pos:position pos:line="8" pos:column="9"/></name> <operator pos:line="8" pos:column="10">=<pos:position pos:line="8" pos:column="11"/></operator> <call><name pos:line="8" pos:column="12">statsd_metric_lookup_unsafe<pos:position pos:line="8" pos:column="39"/></name> <argument_list pos:line="8" pos:column="40">(<argument><expr><name pos:line="8" pos:column="41">name<pos:position pos:line="8" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="47">type<pos:position pos:line="8" pos:column="51"/></name></expr></argument>)<pos:position pos:line="8" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="53"/></expr_stmt>
  <if pos:line="9" pos:column="3">if <condition pos:line="9" pos:column="6">(<expr><name pos:line="9" pos:column="7">metric<pos:position pos:line="9" pos:column="13"/></name> <operator pos:line="9" pos:column="14">==<pos:position pos:line="9" pos:column="16"/></operator> <name pos:line="9" pos:column="17">NULL<pos:position pos:line="9" pos:column="21"/></name></expr>)<pos:position pos:line="9" pos:column="22"/></condition><then pos:line="9" pos:column="22">
  <block pos:line="10" pos:column="3">{
    <expr_stmt><expr><call><name pos:line="11" pos:column="5">pthread_mutex_unlock<pos:position pos:line="11" pos:column="25"/></name> <argument_list pos:line="11" pos:column="26">(<argument><expr><operator pos:line="11" pos:column="27">&amp;<pos:position pos:line="11" pos:column="32"/></operator><name pos:line="11" pos:column="28">metrics_lock<pos:position pos:line="11" pos:column="40"/></name></expr></argument>)<pos:position pos:line="11" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="42"/></expr_stmt>
    <return pos:line="12" pos:column="5">return <expr><operator pos:line="12" pos:column="12">(<pos:position pos:line="12" pos:column="13"/></operator><operator pos:line="12" pos:column="13">-<pos:position pos:line="12" pos:column="14"/></operator><literal type="number" pos:line="12" pos:column="14">1<pos:position pos:line="12" pos:column="15"/></literal><operator pos:line="12" pos:column="15">)<pos:position pos:line="12" pos:column="16"/></operator></expr>;<pos:position pos:line="12" pos:column="17"/></return>
  }<pos:position pos:line="13" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name><name pos:line="15" pos:column="3">metric<pos:position pos:line="15" pos:column="9"/></name><operator pos:line="15" pos:column="9">-&gt;<pos:position pos:line="15" pos:column="14"/></operator><name pos:line="15" pos:column="11">value<pos:position pos:line="15" pos:column="16"/></name></name> <operator pos:line="15" pos:column="17">+=<pos:position pos:line="15" pos:column="19"/></operator> <name pos:line="15" pos:column="20">delta<pos:position pos:line="15" pos:column="25"/></name></expr>;<pos:position pos:line="15" pos:column="26"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="16" pos:column="3">metric<pos:position pos:line="16" pos:column="9"/></name><operator pos:line="16" pos:column="9">-&gt;<pos:position pos:line="16" pos:column="14"/></operator><name pos:line="16" pos:column="11">updates_num<pos:position pos:line="16" pos:column="22"/></name></name><operator pos:line="16" pos:column="22">++<pos:position pos:line="16" pos:column="24"/></operator></expr>;<pos:position pos:line="16" pos:column="25"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="18" pos:column="3">pthread_mutex_unlock<pos:position pos:line="18" pos:column="23"/></name> <argument_list pos:line="18" pos:column="24">(<argument><expr><operator pos:line="18" pos:column="25">&amp;<pos:position pos:line="18" pos:column="30"/></operator><name pos:line="18" pos:column="26">metrics_lock<pos:position pos:line="18" pos:column="38"/></name></expr></argument>)<pos:position pos:line="18" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="40"/></expr_stmt>

  <return pos:line="20" pos:column="3">return <expr><operator pos:line="20" pos:column="10">(<pos:position pos:line="20" pos:column="11"/></operator><literal type="number" pos:line="20" pos:column="11">0<pos:position pos:line="20" pos:column="12"/></literal><operator pos:line="20" pos:column="12">)<pos:position pos:line="20" pos:column="13"/></operator></expr>;<pos:position pos:line="20" pos:column="14"/></return>
}<pos:position pos:line="21" pos:column="2"/></block></function></unit>
