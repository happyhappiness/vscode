<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_683_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">ps_init<pos:position pos:line="1" pos:column="19"/></name><parameter_list pos:line="1" pos:column="19">(<parameter><decl><type><name pos:line="1" pos:column="20">void<pos:position pos:line="1" pos:column="24"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="25"/></parameter_list> <block pos:line="1" pos:column="26">{
<cpp:if pos:line="2" pos:column="1">#<cpp:directive pos:line="2" pos:column="2">if<pos:position pos:line="2" pos:column="4"/></cpp:directive> <expr><name pos:line="2" pos:column="5">HAVE_THREAD_INFO<pos:position pos:line="2" pos:column="21"/></name></expr></cpp:if>
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">kern_return_t<pos:position pos:line="3" pos:column="16"/></name></type> <name pos:line="3" pos:column="17">status<pos:position pos:line="3" pos:column="23"/></name></decl>;<pos:position pos:line="3" pos:column="24"/></decl_stmt>

  <expr_stmt><expr><name pos:line="5" pos:column="3">port_host_self<pos:position pos:line="5" pos:column="17"/></name> <operator pos:line="5" pos:column="18">=<pos:position pos:line="5" pos:column="19"/></operator> <call><name pos:line="5" pos:column="20">mach_host_self<pos:position pos:line="5" pos:column="34"/></name><argument_list pos:line="5" pos:column="34">()<pos:position pos:line="5" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="37"/></expr_stmt>
  <expr_stmt><expr><name pos:line="6" pos:column="3">port_task_self<pos:position pos:line="6" pos:column="17"/></name> <operator pos:line="6" pos:column="18">=<pos:position pos:line="6" pos:column="19"/></operator> <call><name pos:line="6" pos:column="20">mach_task_self<pos:position pos:line="6" pos:column="34"/></name><argument_list pos:line="6" pos:column="34">()<pos:position pos:line="6" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="37"/></expr_stmt>

  <if pos:line="8" pos:column="3">if <condition pos:line="8" pos:column="6">(<expr><name pos:line="8" pos:column="7">pset_list<pos:position pos:line="8" pos:column="16"/></name> <operator pos:line="8" pos:column="17">!=<pos:position pos:line="8" pos:column="19"/></operator> <name pos:line="8" pos:column="20">NULL<pos:position pos:line="8" pos:column="24"/></name></expr>)<pos:position pos:line="8" pos:column="25"/></condition><then pos:line="8" pos:column="25"> <block pos:line="8" pos:column="26">{
    <expr_stmt><expr><call><name pos:line="9" pos:column="5">vm_deallocate<pos:position pos:line="9" pos:column="18"/></name><argument_list pos:line="9" pos:column="18">(<argument><expr><name pos:line="9" pos:column="19">port_task_self<pos:position pos:line="9" pos:column="33"/></name></expr></argument>, <argument><expr><operator pos:line="9" pos:column="35">(<pos:position pos:line="9" pos:column="36"/></operator><name pos:line="9" pos:column="36">vm_address_t<pos:position pos:line="9" pos:column="48"/></name><operator pos:line="9" pos:column="48">)<pos:position pos:line="9" pos:column="49"/></operator><name pos:line="9" pos:column="49">pset_list<pos:position pos:line="9" pos:column="58"/></name></expr></argument>,
                  <argument><expr><name pos:line="10" pos:column="19">pset_list_len<pos:position pos:line="10" pos:column="32"/></name> <operator pos:line="10" pos:column="33">*<pos:position pos:line="10" pos:column="34"/></operator> <sizeof pos:line="10" pos:column="35">sizeof<argument_list pos:line="10" pos:column="41">(<argument><expr><name pos:line="10" pos:column="42">processor_set_t<pos:position pos:line="10" pos:column="57"/></name></expr></argument>)<pos:position pos:line="10" pos:column="58"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="10" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="60"/></expr_stmt>
    <expr_stmt><expr><name pos:line="11" pos:column="5">pset_list<pos:position pos:line="11" pos:column="14"/></name> <operator pos:line="11" pos:column="15">=<pos:position pos:line="11" pos:column="16"/></operator> <name pos:line="11" pos:column="17">NULL<pos:position pos:line="11" pos:column="21"/></name></expr>;<pos:position pos:line="11" pos:column="22"/></expr_stmt>
    <expr_stmt><expr><name pos:line="12" pos:column="5">pset_list_len<pos:position pos:line="12" pos:column="18"/></name> <operator pos:line="12" pos:column="19">=<pos:position pos:line="12" pos:column="20"/></operator> <literal type="number" pos:line="12" pos:column="21">0<pos:position pos:line="12" pos:column="22"/></literal></expr>;<pos:position pos:line="12" pos:column="23"/></expr_stmt>
  }<pos:position pos:line="13" pos:column="4"/></block></then></if>

  <if pos:line="15" pos:column="3">if <condition pos:line="15" pos:column="6">(<expr><operator pos:line="15" pos:column="7">(<pos:position pos:line="15" pos:column="8"/></operator><name pos:line="15" pos:column="8">status<pos:position pos:line="15" pos:column="14"/></name> <operator pos:line="15" pos:column="15">=<pos:position pos:line="15" pos:column="16"/></operator> <call><name pos:line="15" pos:column="17">host_processor_sets<pos:position pos:line="15" pos:column="36"/></name><argument_list pos:line="15" pos:column="36">(<argument><expr><name pos:line="15" pos:column="37">port_host_self<pos:position pos:line="15" pos:column="51"/></name></expr></argument>, <argument><expr><operator pos:line="15" pos:column="53">&amp;<pos:position pos:line="15" pos:column="58"/></operator><name pos:line="15" pos:column="54">pset_list<pos:position pos:line="15" pos:column="63"/></name></expr></argument>,
                                    <argument><expr><operator pos:line="16" pos:column="37">&amp;<pos:position pos:line="16" pos:column="42"/></operator><name pos:line="16" pos:column="38">pset_list_len<pos:position pos:line="16" pos:column="51"/></name></expr></argument>)<pos:position pos:line="16" pos:column="52"/></argument_list></call><operator pos:line="16" pos:column="52">)<pos:position pos:line="16" pos:column="53"/></operator> <operator pos:line="16" pos:column="54">!=<pos:position pos:line="16" pos:column="56"/></operator> <name pos:line="16" pos:column="57">KERN_SUCCESS<pos:position pos:line="16" pos:column="69"/></name></expr>)<pos:position pos:line="16" pos:column="70"/></condition><then pos:line="16" pos:column="70"> <block pos:line="16" pos:column="71">{
    <expr_stmt><expr><call><name pos:line="17" pos:column="5">ERROR<pos:position pos:line="17" pos:column="10"/></name><argument_list pos:line="17" pos:column="10">(<argument><expr><literal type="string" pos:line="17" pos:column="11">"host_processor_sets failed: %s\n"<pos:position pos:line="17" pos:column="45"/></literal></expr></argument>, <argument><expr><call><name pos:line="17" pos:column="47">mach_error_string<pos:position pos:line="17" pos:column="64"/></name><argument_list pos:line="17" pos:column="64">(<argument><expr><name pos:line="17" pos:column="65">status<pos:position pos:line="17" pos:column="71"/></name></expr></argument>)<pos:position pos:line="17" pos:column="72"/></argument_list></call></expr></argument>)<pos:position pos:line="17" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="74"/></expr_stmt>
    <expr_stmt><expr><name pos:line="18" pos:column="5">pset_list<pos:position pos:line="18" pos:column="14"/></name> <operator pos:line="18" pos:column="15">=<pos:position pos:line="18" pos:column="16"/></operator> <name pos:line="18" pos:column="17">NULL<pos:position pos:line="18" pos:column="21"/></name></expr>;<pos:position pos:line="18" pos:column="22"/></expr_stmt>
    <expr_stmt><expr><name pos:line="19" pos:column="5">pset_list_len<pos:position pos:line="19" pos:column="18"/></name> <operator pos:line="19" pos:column="19">=<pos:position pos:line="19" pos:column="20"/></operator> <literal type="number" pos:line="19" pos:column="21">0<pos:position pos:line="19" pos:column="22"/></literal></expr>;<pos:position pos:line="19" pos:column="23"/></expr_stmt>
    <return pos:line="20" pos:column="5">return <expr><operator pos:line="20" pos:column="12">-<pos:position pos:line="20" pos:column="13"/></operator><literal type="number" pos:line="20" pos:column="13">1<pos:position pos:line="20" pos:column="14"/></literal></expr>;<pos:position pos:line="20" pos:column="15"/></return>
  }<pos:position pos:line="21" pos:column="4"/></block></then></if>
<comment type="block" pos:line="22" pos:column="1">/* #endif HAVE_THREAD_INFO */</comment>

<cpp:elif pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">elif<pos:position pos:line="24" pos:column="6"/></cpp:directive> <expr><name pos:line="24" pos:column="7">KERNEL_LINUX<pos:position pos:line="24" pos:column="19"/></name></expr></cpp:elif>
  <expr_stmt><expr><name pos:line="25" pos:column="3">pagesize_g<pos:position pos:line="25" pos:column="13"/></name> <operator pos:line="25" pos:column="14">=<pos:position pos:line="25" pos:column="15"/></operator> <call><name pos:line="25" pos:column="16">sysconf<pos:position pos:line="25" pos:column="23"/></name><argument_list pos:line="25" pos:column="23">(<argument><expr><name pos:line="25" pos:column="24">_SC_PAGESIZE<pos:position pos:line="25" pos:column="36"/></name></expr></argument>)<pos:position pos:line="25" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="38"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="26" pos:column="3">DEBUG<pos:position pos:line="26" pos:column="8"/></name><argument_list pos:line="26" pos:column="8">(<argument><expr><literal type="string" pos:line="26" pos:column="9">"pagesize_g = %li; CONFIG_HZ = %i;"<pos:position pos:line="26" pos:column="44"/></literal></expr></argument>, <argument><expr><name pos:line="26" pos:column="46">pagesize_g<pos:position pos:line="26" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="58">CONFIG_HZ<pos:position pos:line="26" pos:column="67"/></name></expr></argument>)<pos:position pos:line="26" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="69"/></expr_stmt>
<comment type="block" pos:line="27" pos:column="1">/* #endif KERNEL_LINUX */</comment>

<cpp:elif pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">elif<pos:position pos:line="29" pos:column="6"/></cpp:directive> <expr><name pos:line="29" pos:column="7">HAVE_LIBKVM_GETPROCS<pos:position pos:line="29" pos:column="27"/></name> <operator pos:line="29" pos:column="28">&amp;&amp;<pos:position pos:line="29" pos:column="38"/></operator>                                                  \
    <operator pos:line="30" pos:column="5">(<pos:position pos:line="30" pos:column="6"/></operator><name pos:line="30" pos:column="6">HAVE_STRUCT_KINFO_PROC_FREEBSD<pos:position pos:line="30" pos:column="36"/></name> <operator pos:line="30" pos:column="37">||<pos:position pos:line="30" pos:column="39"/></operator> <name pos:line="30" pos:column="40">HAVE_STRUCT_KINFO_PROC_OPENBSD<pos:position pos:line="30" pos:column="70"/></name><operator pos:line="30" pos:column="70">)<pos:position pos:line="30" pos:column="71"/></operator></expr></cpp:elif>
  <expr_stmt><expr><name pos:line="31" pos:column="3">pagesize<pos:position pos:line="31" pos:column="11"/></name> <operator pos:line="31" pos:column="12">=<pos:position pos:line="31" pos:column="13"/></operator> <call><name pos:line="31" pos:column="14">getpagesize<pos:position pos:line="31" pos:column="25"/></name><argument_list pos:line="31" pos:column="25">()<pos:position pos:line="31" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="28"/></expr_stmt>
<comment type="block" pos:line="32" pos:column="1">/* #endif HAVE_LIBKVM_GETPROCS &amp;&amp; (HAVE_STRUCT_KINFO_PROC_FREEBSD ||
 * HAVE_STRUCT_KINFO_PROC_OPENBSD) */</comment>

<cpp:elif pos:line="35" pos:column="1">#<cpp:directive pos:line="35" pos:column="2">elif<pos:position pos:line="35" pos:column="6"/></cpp:directive> <expr><name pos:line="35" pos:column="7">HAVE_PROCINFO_H<pos:position pos:line="35" pos:column="22"/></name></expr></cpp:elif>
  <expr_stmt><expr><name pos:line="36" pos:column="3">pagesize<pos:position pos:line="36" pos:column="11"/></name> <operator pos:line="36" pos:column="12">=<pos:position pos:line="36" pos:column="13"/></operator> <call><name pos:line="36" pos:column="14">getpagesize<pos:position pos:line="36" pos:column="25"/></name><argument_list pos:line="36" pos:column="25">()<pos:position pos:line="36" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="28"/></expr_stmt>
<cpp:endif pos:line="37" pos:column="1">#<cpp:directive pos:line="37" pos:column="2">endif<pos:position pos:line="37" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="37" pos:column="8">/* HAVE_PROCINFO_H */</comment>

  <return pos:line="39" pos:column="3">return <expr><literal type="number" pos:line="39" pos:column="10">0<pos:position pos:line="39" pos:column="11"/></literal></expr>;<pos:position pos:line="39" pos:column="12"/></return>
}<pos:position pos:line="40" pos:column="2"/></block></function></unit>
