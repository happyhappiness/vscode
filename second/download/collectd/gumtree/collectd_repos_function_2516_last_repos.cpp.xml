<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_2516_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">parse_values<pos:position pos:line="1" pos:column="17"/></name><parameter_list pos:line="1" pos:column="17">(<parameter><decl><type><name pos:line="1" pos:column="18">void<pos:position pos:line="1" pos:column="22"/></name> <modifier pos:line="1" pos:column="23">*<pos:position pos:line="1" pos:column="24"/></modifier></type><name pos:line="1" pos:column="24">payload<pos:position pos:line="1" pos:column="31"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="33">size_t<pos:position pos:line="1" pos:column="39"/></name></type> <name pos:line="1" pos:column="40">payload_size<pos:position pos:line="1" pos:column="52"/></name></decl></parameter>,
                        <parameter><decl><type><name pos:line="2" pos:column="25">lcc_value_list_t<pos:position pos:line="2" pos:column="41"/></name> <modifier pos:line="2" pos:column="42">*<pos:position pos:line="2" pos:column="43"/></modifier></type><name pos:line="2" pos:column="43">state<pos:position pos:line="2" pos:column="48"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="49"/></parameter_list> <block pos:line="2" pos:column="50">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">buffer_t<pos:position pos:line="3" pos:column="11"/></name> <modifier pos:line="3" pos:column="12">*<pos:position pos:line="3" pos:column="13"/></modifier></type><name pos:line="3" pos:column="13">b<pos:position pos:line="3" pos:column="14"/></name> <init pos:line="3" pos:column="15">= <expr><operator pos:line="3" pos:column="17">&amp;<pos:position pos:line="3" pos:column="22"/></operator><operator pos:line="3" pos:column="18">(<pos:position pos:line="3" pos:column="19"/></operator><name pos:line="3" pos:column="19">buffer_t<pos:position pos:line="3" pos:column="27"/></name><operator pos:line="3" pos:column="27">)<pos:position pos:line="3" pos:column="28"/></operator><block pos:line="3" pos:column="28">{
      <expr><operator pos:line="4" pos:column="7">.<pos:position pos:line="4" pos:column="8"/></operator><name pos:line="4" pos:column="8">data<pos:position pos:line="4" pos:column="12"/></name> <operator pos:line="4" pos:column="13">=<pos:position pos:line="4" pos:column="14"/></operator> <name pos:line="4" pos:column="15">payload<pos:position pos:line="4" pos:column="22"/></name></expr>, <expr><operator pos:line="4" pos:column="24">.<pos:position pos:line="4" pos:column="25"/></operator><name pos:line="4" pos:column="25">len<pos:position pos:line="4" pos:column="28"/></name> <operator pos:line="4" pos:column="29">=<pos:position pos:line="4" pos:column="30"/></operator> <name pos:line="4" pos:column="31">payload_size<pos:position pos:line="4" pos:column="43"/></name></expr>,
  }<pos:position pos:line="5" pos:column="4"/></block></expr></init></decl>;<pos:position pos:line="5" pos:column="5"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="7" pos:column="3">uint16_t<pos:position pos:line="7" pos:column="11"/></name></type> <name pos:line="7" pos:column="12">n<pos:position pos:line="7" pos:column="13"/></name></decl>;<pos:position pos:line="7" pos:column="14"/></decl_stmt>
  <if pos:line="8" pos:column="3">if <condition pos:line="8" pos:column="6">(<expr><call><name pos:line="8" pos:column="7">buffer_uint16<pos:position pos:line="8" pos:column="20"/></name><argument_list pos:line="8" pos:column="20">(<argument><expr><name pos:line="8" pos:column="21">b<pos:position pos:line="8" pos:column="22"/></name></expr></argument>, <argument><expr><operator pos:line="8" pos:column="24">&amp;<pos:position pos:line="8" pos:column="29"/></operator><name pos:line="8" pos:column="25">n<pos:position pos:line="8" pos:column="26"/></name></expr></argument>)<pos:position pos:line="8" pos:column="27"/></argument_list></call></expr>)<pos:position pos:line="8" pos:column="28"/></condition><then pos:line="8" pos:column="28">
    <block type="pseudo"><return pos:line="9" pos:column="5">return <expr><name pos:line="9" pos:column="12">EINVAL<pos:position pos:line="9" pos:column="18"/></name></expr>;<pos:position pos:line="9" pos:column="19"/></return></block></then></if>

  <if pos:line="11" pos:column="3">if <condition pos:line="11" pos:column="6">(<expr><operator pos:line="11" pos:column="7">(<pos:position pos:line="11" pos:column="8"/></operator><operator pos:line="11" pos:column="8">(<pos:position pos:line="11" pos:column="9"/></operator><name pos:line="11" pos:column="9">size_t<pos:position pos:line="11" pos:column="15"/></name><operator pos:line="11" pos:column="15">)<pos:position pos:line="11" pos:column="16"/></operator><name pos:line="11" pos:column="16">n<pos:position pos:line="11" pos:column="17"/></name> <operator pos:line="11" pos:column="18">*<pos:position pos:line="11" pos:column="19"/></operator> <literal type="number" pos:line="11" pos:column="20">9<pos:position pos:line="11" pos:column="21"/></literal><operator pos:line="11" pos:column="21">)<pos:position pos:line="11" pos:column="22"/></operator> <operator pos:line="11" pos:column="23">!=<pos:position pos:line="11" pos:column="25"/></operator> <name><name pos:line="11" pos:column="26">b<pos:position pos:line="11" pos:column="27"/></name><operator pos:line="11" pos:column="27">-&gt;<pos:position pos:line="11" pos:column="32"/></operator><name pos:line="11" pos:column="29">len<pos:position pos:line="11" pos:column="32"/></name></name></expr>)<pos:position pos:line="11" pos:column="33"/></condition><then pos:line="11" pos:column="33">
    <block type="pseudo"><return pos:line="12" pos:column="5">return <expr><name pos:line="12" pos:column="12">EINVAL<pos:position pos:line="12" pos:column="18"/></name></expr>;<pos:position pos:line="12" pos:column="19"/></return></block></then></if>

  <expr_stmt><expr><name><name pos:line="14" pos:column="3">state<pos:position pos:line="14" pos:column="8"/></name><operator pos:line="14" pos:column="8">-&gt;<pos:position pos:line="14" pos:column="13"/></operator><name pos:line="14" pos:column="10">values_len<pos:position pos:line="14" pos:column="20"/></name></name> <operator pos:line="14" pos:column="21">=<pos:position pos:line="14" pos:column="22"/></operator> <operator pos:line="14" pos:column="23">(<pos:position pos:line="14" pos:column="24"/></operator><name pos:line="14" pos:column="24">size_t<pos:position pos:line="14" pos:column="30"/></name><operator pos:line="14" pos:column="30">)<pos:position pos:line="14" pos:column="31"/></operator><name pos:line="14" pos:column="31">n<pos:position pos:line="14" pos:column="32"/></name></expr>;<pos:position pos:line="14" pos:column="33"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="15" pos:column="3">state<pos:position pos:line="15" pos:column="8"/></name><operator pos:line="15" pos:column="8">-&gt;<pos:position pos:line="15" pos:column="13"/></operator><name pos:line="15" pos:column="10">values<pos:position pos:line="15" pos:column="16"/></name></name> <operator pos:line="15" pos:column="17">=<pos:position pos:line="15" pos:column="18"/></operator> <call><name pos:line="15" pos:column="19">calloc<pos:position pos:line="15" pos:column="25"/></name><argument_list pos:line="15" pos:column="25">(<argument><expr><sizeof pos:line="15" pos:column="26">sizeof<argument_list pos:line="15" pos:column="32">(<argument><expr><operator pos:line="15" pos:column="33">*<pos:position pos:line="15" pos:column="34"/></operator><name><name pos:line="15" pos:column="34">state<pos:position pos:line="15" pos:column="39"/></name><operator pos:line="15" pos:column="39">-&gt;<pos:position pos:line="15" pos:column="44"/></operator><name pos:line="15" pos:column="41">values<pos:position pos:line="15" pos:column="47"/></name></name></expr></argument>)<pos:position pos:line="15" pos:column="48"/></argument_list></sizeof></expr></argument>, <argument><expr><name><name pos:line="15" pos:column="50">state<pos:position pos:line="15" pos:column="55"/></name><operator pos:line="15" pos:column="55">-&gt;<pos:position pos:line="15" pos:column="60"/></operator><name pos:line="15" pos:column="57">values_len<pos:position pos:line="15" pos:column="67"/></name></name></expr></argument>)<pos:position pos:line="15" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="69"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="16" pos:column="3">state<pos:position pos:line="16" pos:column="8"/></name><operator pos:line="16" pos:column="8">-&gt;<pos:position pos:line="16" pos:column="13"/></operator><name pos:line="16" pos:column="10">values_types<pos:position pos:line="16" pos:column="22"/></name></name> <operator pos:line="16" pos:column="23">=<pos:position pos:line="16" pos:column="24"/></operator> <call><name pos:line="16" pos:column="25">calloc<pos:position pos:line="16" pos:column="31"/></name><argument_list pos:line="16" pos:column="31">(<argument><expr><sizeof pos:line="16" pos:column="32">sizeof<argument_list pos:line="16" pos:column="38">(<argument><expr><operator pos:line="16" pos:column="39">*<pos:position pos:line="16" pos:column="40"/></operator><name><name pos:line="16" pos:column="40">state<pos:position pos:line="16" pos:column="45"/></name><operator pos:line="16" pos:column="45">-&gt;<pos:position pos:line="16" pos:column="50"/></operator><name pos:line="16" pos:column="47">values_types<pos:position pos:line="16" pos:column="59"/></name></name></expr></argument>)<pos:position pos:line="16" pos:column="60"/></argument_list></sizeof></expr></argument>, <argument><expr><name><name pos:line="16" pos:column="62">state<pos:position pos:line="16" pos:column="67"/></name><operator pos:line="16" pos:column="67">-&gt;<pos:position pos:line="16" pos:column="72"/></operator><name pos:line="16" pos:column="69">values_len<pos:position pos:line="16" pos:column="79"/></name></name></expr></argument>)<pos:position pos:line="16" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="81"/></expr_stmt>
  <if pos:line="17" pos:column="3">if <condition pos:line="17" pos:column="6">(<expr><operator pos:line="17" pos:column="7">(<pos:position pos:line="17" pos:column="8"/></operator><name><name pos:line="17" pos:column="8">state<pos:position pos:line="17" pos:column="13"/></name><operator pos:line="17" pos:column="13">-&gt;<pos:position pos:line="17" pos:column="18"/></operator><name pos:line="17" pos:column="15">values<pos:position pos:line="17" pos:column="21"/></name></name> <operator pos:line="17" pos:column="22">==<pos:position pos:line="17" pos:column="24"/></operator> <name pos:line="17" pos:column="25">NULL<pos:position pos:line="17" pos:column="29"/></name><operator pos:line="17" pos:column="29">)<pos:position pos:line="17" pos:column="30"/></operator> <operator pos:line="17" pos:column="31">||<pos:position pos:line="17" pos:column="33"/></operator> <operator pos:line="17" pos:column="34">(<pos:position pos:line="17" pos:column="35"/></operator><name><name pos:line="17" pos:column="35">state<pos:position pos:line="17" pos:column="40"/></name><operator pos:line="17" pos:column="40">-&gt;<pos:position pos:line="17" pos:column="45"/></operator><name pos:line="17" pos:column="42">values_types<pos:position pos:line="17" pos:column="54"/></name></name> <operator pos:line="17" pos:column="55">==<pos:position pos:line="17" pos:column="57"/></operator> <name pos:line="17" pos:column="58">NULL<pos:position pos:line="17" pos:column="62"/></name><operator pos:line="17" pos:column="62">)<pos:position pos:line="17" pos:column="63"/></operator></expr>)<pos:position pos:line="17" pos:column="64"/></condition><then pos:line="17" pos:column="64"> <block pos:line="17" pos:column="65">{
    <return pos:line="18" pos:column="5">return <expr><name pos:line="18" pos:column="12">ENOMEM<pos:position pos:line="18" pos:column="18"/></name></expr>;<pos:position pos:line="18" pos:column="19"/></return>
  }<pos:position pos:line="19" pos:column="4"/></block></then></if>

  <for pos:line="21" pos:column="3">for <control pos:line="21" pos:column="7">(<init><decl><type><name pos:line="21" pos:column="8">uint16_t<pos:position pos:line="21" pos:column="16"/></name></type> <name pos:line="21" pos:column="17">i<pos:position pos:line="21" pos:column="18"/></name> <init pos:line="21" pos:column="19">= <expr><literal type="number" pos:line="21" pos:column="21">0<pos:position pos:line="21" pos:column="22"/></literal></expr></init></decl>;<pos:position pos:line="21" pos:column="23"/></init> <condition><expr><name pos:line="21" pos:column="24">i<pos:position pos:line="21" pos:column="25"/></name> <operator pos:line="21" pos:column="26">&lt;<pos:position pos:line="21" pos:column="30"/></operator> <name pos:line="21" pos:column="28">n<pos:position pos:line="21" pos:column="29"/></name></expr>;<pos:position pos:line="21" pos:column="30"/></condition> <incr><expr><name pos:line="21" pos:column="31">i<pos:position pos:line="21" pos:column="32"/></name><operator pos:line="21" pos:column="32">++<pos:position pos:line="21" pos:column="34"/></operator></expr></incr>)<pos:position pos:line="21" pos:column="35"/></control> <block pos:line="21" pos:column="36">{
    <decl_stmt><decl><type><name pos:line="22" pos:column="5">uint8_t<pos:position pos:line="22" pos:column="12"/></name></type> <name pos:line="22" pos:column="13">tmp<pos:position pos:line="22" pos:column="16"/></name></decl>;<pos:position pos:line="22" pos:column="17"/></decl_stmt>
    <if pos:line="23" pos:column="5">if <condition pos:line="23" pos:column="8">(<expr><call><name pos:line="23" pos:column="9">buffer_next<pos:position pos:line="23" pos:column="20"/></name><argument_list pos:line="23" pos:column="20">(<argument><expr><name pos:line="23" pos:column="21">b<pos:position pos:line="23" pos:column="22"/></name></expr></argument>, <argument><expr><operator pos:line="23" pos:column="24">&amp;<pos:position pos:line="23" pos:column="29"/></operator><name pos:line="23" pos:column="25">tmp<pos:position pos:line="23" pos:column="28"/></name></expr></argument>, <argument><expr><sizeof pos:line="23" pos:column="30">sizeof<argument_list pos:line="23" pos:column="36">(<argument><expr><name pos:line="23" pos:column="37">tmp<pos:position pos:line="23" pos:column="40"/></name></expr></argument>)<pos:position pos:line="23" pos:column="41"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="23" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="23" pos:column="43"/></condition><then pos:line="23" pos:column="43">
      <block type="pseudo"><return pos:line="24" pos:column="7">return <expr><name pos:line="24" pos:column="14">EINVAL<pos:position pos:line="24" pos:column="20"/></name></expr>;<pos:position pos:line="24" pos:column="21"/></return></block></then></if>
    <expr_stmt><expr><name><name pos:line="25" pos:column="5">state<pos:position pos:line="25" pos:column="10"/></name><operator pos:line="25" pos:column="10">-&gt;<pos:position pos:line="25" pos:column="15"/></operator><name pos:line="25" pos:column="12">values_types<pos:position pos:line="25" pos:column="24"/></name><index pos:line="25" pos:column="24">[<expr><name pos:line="25" pos:column="25">i<pos:position pos:line="25" pos:column="26"/></name></expr>]<pos:position pos:line="25" pos:column="27"/></index></name> <operator pos:line="25" pos:column="28">=<pos:position pos:line="25" pos:column="29"/></operator> <operator pos:line="25" pos:column="30">(<pos:position pos:line="25" pos:column="31"/></operator><name pos:line="25" pos:column="31">int<pos:position pos:line="25" pos:column="34"/></name><operator pos:line="25" pos:column="34">)<pos:position pos:line="25" pos:column="35"/></operator><name pos:line="25" pos:column="35">tmp<pos:position pos:line="25" pos:column="38"/></name></expr>;<pos:position pos:line="25" pos:column="39"/></expr_stmt>
  }<pos:position pos:line="26" pos:column="4"/></block></for>

  <for pos:line="28" pos:column="3">for <control pos:line="28" pos:column="7">(<init><decl><type><name pos:line="28" pos:column="8">uint16_t<pos:position pos:line="28" pos:column="16"/></name></type> <name pos:line="28" pos:column="17">i<pos:position pos:line="28" pos:column="18"/></name> <init pos:line="28" pos:column="19">= <expr><literal type="number" pos:line="28" pos:column="21">0<pos:position pos:line="28" pos:column="22"/></literal></expr></init></decl>;<pos:position pos:line="28" pos:column="23"/></init> <condition><expr><name pos:line="28" pos:column="24">i<pos:position pos:line="28" pos:column="25"/></name> <operator pos:line="28" pos:column="26">&lt;<pos:position pos:line="28" pos:column="30"/></operator> <name pos:line="28" pos:column="28">n<pos:position pos:line="28" pos:column="29"/></name></expr>;<pos:position pos:line="28" pos:column="30"/></condition> <incr><expr><name pos:line="28" pos:column="31">i<pos:position pos:line="28" pos:column="32"/></name><operator pos:line="28" pos:column="32">++<pos:position pos:line="28" pos:column="34"/></operator></expr></incr>)<pos:position pos:line="28" pos:column="35"/></control> <block pos:line="28" pos:column="36">{
    <decl_stmt><decl><type><name pos:line="29" pos:column="5">uint64_t<pos:position pos:line="29" pos:column="13"/></name></type> <name pos:line="29" pos:column="14">tmp<pos:position pos:line="29" pos:column="17"/></name></decl>;<pos:position pos:line="29" pos:column="18"/></decl_stmt>
    <if pos:line="30" pos:column="5">if <condition pos:line="30" pos:column="8">(<expr><call><name pos:line="30" pos:column="9">buffer_next<pos:position pos:line="30" pos:column="20"/></name><argument_list pos:line="30" pos:column="20">(<argument><expr><name pos:line="30" pos:column="21">b<pos:position pos:line="30" pos:column="22"/></name></expr></argument>, <argument><expr><operator pos:line="30" pos:column="24">&amp;<pos:position pos:line="30" pos:column="29"/></operator><name pos:line="30" pos:column="25">tmp<pos:position pos:line="30" pos:column="28"/></name></expr></argument>, <argument><expr><sizeof pos:line="30" pos:column="30">sizeof<argument_list pos:line="30" pos:column="36">(<argument><expr><name pos:line="30" pos:column="37">tmp<pos:position pos:line="30" pos:column="40"/></name></expr></argument>)<pos:position pos:line="30" pos:column="41"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="30" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="30" pos:column="43"/></condition><then pos:line="30" pos:column="43">
      <block type="pseudo"><return pos:line="31" pos:column="7">return <expr><name pos:line="31" pos:column="14">EINVAL<pos:position pos:line="31" pos:column="20"/></name></expr>;<pos:position pos:line="31" pos:column="21"/></return></block></then></if>

    <if pos:line="33" pos:column="5">if <condition pos:line="33" pos:column="8">(<expr><name><name pos:line="33" pos:column="9">state<pos:position pos:line="33" pos:column="14"/></name><operator pos:line="33" pos:column="14">-&gt;<pos:position pos:line="33" pos:column="19"/></operator><name pos:line="33" pos:column="16">values_types<pos:position pos:line="33" pos:column="28"/></name><index pos:line="33" pos:column="28">[<expr><name pos:line="33" pos:column="29">i<pos:position pos:line="33" pos:column="30"/></name></expr>]<pos:position pos:line="33" pos:column="31"/></index></name> <operator pos:line="33" pos:column="32">==<pos:position pos:line="33" pos:column="34"/></operator> <name pos:line="33" pos:column="35">LCC_TYPE_GAUGE<pos:position pos:line="33" pos:column="49"/></name></expr>)<pos:position pos:line="33" pos:column="50"/></condition><then pos:line="33" pos:column="50"> <block pos:line="33" pos:column="51">{
      <union pos:line="34" pos:column="7">union <block pos:line="34" pos:column="13">{<public type="default" pos:line="34" pos:column="14">
        <decl_stmt><decl><type><name pos:line="35" pos:column="9">uint64_t<pos:position pos:line="35" pos:column="17"/></name></type> <name pos:line="35" pos:column="18">i<pos:position pos:line="35" pos:column="19"/></name></decl>;<pos:position pos:line="35" pos:column="20"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="36" pos:column="9">double<pos:position pos:line="36" pos:column="15"/></name></type> <name pos:line="36" pos:column="16">d<pos:position pos:line="36" pos:column="17"/></name></decl>;<pos:position pos:line="36" pos:column="18"/></decl_stmt>
      <pos:position pos:line="37" pos:column="7"/></public>}<pos:position pos:line="37" pos:column="8"/></block> <decl><name pos:line="37" pos:column="9">conv<pos:position pos:line="37" pos:column="13"/></name> <init pos:line="37" pos:column="14">= <expr><block pos:line="37" pos:column="16">{<expr><operator pos:line="37" pos:column="17">.<pos:position pos:line="37" pos:column="18"/></operator><name pos:line="37" pos:column="18">i<pos:position pos:line="37" pos:column="19"/></name> <operator pos:line="37" pos:column="20">=<pos:position pos:line="37" pos:column="21"/></operator> <name pos:line="37" pos:column="22">tmp<pos:position pos:line="37" pos:column="25"/></name></expr>}<pos:position pos:line="37" pos:column="26"/></block></expr></init></decl>;<pos:position pos:line="37" pos:column="27"/></union>
      <expr_stmt><expr><name><name pos:line="38" pos:column="7">state<pos:position pos:line="38" pos:column="12"/></name><operator pos:line="38" pos:column="12">-&gt;<pos:position pos:line="38" pos:column="17"/></operator><name pos:line="38" pos:column="14">values<pos:position pos:line="38" pos:column="20"/></name><index pos:line="38" pos:column="20">[<expr><name pos:line="38" pos:column="21">i<pos:position pos:line="38" pos:column="22"/></name></expr>]<pos:position pos:line="38" pos:column="23"/></index></name><operator pos:line="38" pos:column="23">.<pos:position pos:line="38" pos:column="24"/></operator><name pos:line="38" pos:column="24">gauge<pos:position pos:line="38" pos:column="29"/></name> <operator pos:line="38" pos:column="30">=<pos:position pos:line="38" pos:column="31"/></operator> <call><name pos:line="38" pos:column="32">ntohd<pos:position pos:line="38" pos:column="37"/></name><argument_list pos:line="38" pos:column="37">(<argument><expr><name><name pos:line="38" pos:column="38">conv<pos:position pos:line="38" pos:column="42"/></name><operator pos:line="38" pos:column="42">.<pos:position pos:line="38" pos:column="43"/></operator><name pos:line="38" pos:column="43">d<pos:position pos:line="38" pos:column="44"/></name></name></expr></argument>)<pos:position pos:line="38" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="46"/></expr_stmt>
      <continue pos:line="39" pos:column="7">continue;<pos:position pos:line="39" pos:column="16"/></continue>
    }<pos:position pos:line="40" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="42" pos:column="5">tmp<pos:position pos:line="42" pos:column="8"/></name> <operator pos:line="42" pos:column="9">=<pos:position pos:line="42" pos:column="10"/></operator> <call><name pos:line="42" pos:column="11">be64toh<pos:position pos:line="42" pos:column="18"/></name><argument_list pos:line="42" pos:column="18">(<argument><expr><name pos:line="42" pos:column="19">tmp<pos:position pos:line="42" pos:column="22"/></name></expr></argument>)<pos:position pos:line="42" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="24"/></expr_stmt>
    <switch pos:line="43" pos:column="5">switch <condition pos:line="43" pos:column="12">(<expr><name><name pos:line="43" pos:column="13">state<pos:position pos:line="43" pos:column="18"/></name><operator pos:line="43" pos:column="18">-&gt;<pos:position pos:line="43" pos:column="23"/></operator><name pos:line="43" pos:column="20">values_types<pos:position pos:line="43" pos:column="32"/></name><index pos:line="43" pos:column="32">[<expr><name pos:line="43" pos:column="33">i<pos:position pos:line="43" pos:column="34"/></name></expr>]<pos:position pos:line="43" pos:column="35"/></index></name></expr>)<pos:position pos:line="43" pos:column="36"/></condition> <block pos:line="43" pos:column="37">{
    <case pos:line="44" pos:column="5">case <expr><name pos:line="44" pos:column="10">LCC_TYPE_COUNTER<pos:position pos:line="44" pos:column="26"/></name></expr>:<pos:position pos:line="44" pos:column="27"/></case>
      <expr_stmt><expr><name><name pos:line="45" pos:column="7">state<pos:position pos:line="45" pos:column="12"/></name><operator pos:line="45" pos:column="12">-&gt;<pos:position pos:line="45" pos:column="17"/></operator><name pos:line="45" pos:column="14">values<pos:position pos:line="45" pos:column="20"/></name><index pos:line="45" pos:column="20">[<expr><name pos:line="45" pos:column="21">i<pos:position pos:line="45" pos:column="22"/></name></expr>]<pos:position pos:line="45" pos:column="23"/></index></name><operator pos:line="45" pos:column="23">.<pos:position pos:line="45" pos:column="24"/></operator><name pos:line="45" pos:column="24">counter<pos:position pos:line="45" pos:column="31"/></name> <operator pos:line="45" pos:column="32">=<pos:position pos:line="45" pos:column="33"/></operator> <operator pos:line="45" pos:column="34">(<pos:position pos:line="45" pos:column="35"/></operator><name pos:line="45" pos:column="35">counter_t<pos:position pos:line="45" pos:column="44"/></name><operator pos:line="45" pos:column="44">)<pos:position pos:line="45" pos:column="45"/></operator><name pos:line="45" pos:column="45">tmp<pos:position pos:line="45" pos:column="48"/></name></expr>;<pos:position pos:line="45" pos:column="49"/></expr_stmt>
      <break pos:line="46" pos:column="7">break;<pos:position pos:line="46" pos:column="13"/></break>
    <case pos:line="47" pos:column="5">case <expr><name pos:line="47" pos:column="10">LCC_TYPE_DERIVE<pos:position pos:line="47" pos:column="25"/></name></expr>:<pos:position pos:line="47" pos:column="26"/></case>
      <expr_stmt><expr><name><name pos:line="48" pos:column="7">state<pos:position pos:line="48" pos:column="12"/></name><operator pos:line="48" pos:column="12">-&gt;<pos:position pos:line="48" pos:column="17"/></operator><name pos:line="48" pos:column="14">values<pos:position pos:line="48" pos:column="20"/></name><index pos:line="48" pos:column="20">[<expr><name pos:line="48" pos:column="21">i<pos:position pos:line="48" pos:column="22"/></name></expr>]<pos:position pos:line="48" pos:column="23"/></index></name><operator pos:line="48" pos:column="23">.<pos:position pos:line="48" pos:column="24"/></operator><name pos:line="48" pos:column="24">derive<pos:position pos:line="48" pos:column="30"/></name> <operator pos:line="48" pos:column="31">=<pos:position pos:line="48" pos:column="32"/></operator> <operator pos:line="48" pos:column="33">(<pos:position pos:line="48" pos:column="34"/></operator><name pos:line="48" pos:column="34">derive_t<pos:position pos:line="48" pos:column="42"/></name><operator pos:line="48" pos:column="42">)<pos:position pos:line="48" pos:column="43"/></operator><name pos:line="48" pos:column="43">tmp<pos:position pos:line="48" pos:column="46"/></name></expr>;<pos:position pos:line="48" pos:column="47"/></expr_stmt>
      <break pos:line="49" pos:column="7">break;<pos:position pos:line="49" pos:column="13"/></break>
    <case pos:line="50" pos:column="5">case <expr><name pos:line="50" pos:column="10">LCC_TYPE_ABSOLUTE<pos:position pos:line="50" pos:column="27"/></name></expr>:<pos:position pos:line="50" pos:column="28"/></case>
      <expr_stmt><expr><name><name pos:line="51" pos:column="7">state<pos:position pos:line="51" pos:column="12"/></name><operator pos:line="51" pos:column="12">-&gt;<pos:position pos:line="51" pos:column="17"/></operator><name pos:line="51" pos:column="14">values<pos:position pos:line="51" pos:column="20"/></name><index pos:line="51" pos:column="20">[<expr><name pos:line="51" pos:column="21">i<pos:position pos:line="51" pos:column="22"/></name></expr>]<pos:position pos:line="51" pos:column="23"/></index></name><operator pos:line="51" pos:column="23">.<pos:position pos:line="51" pos:column="24"/></operator><name pos:line="51" pos:column="24">absolute<pos:position pos:line="51" pos:column="32"/></name> <operator pos:line="51" pos:column="33">=<pos:position pos:line="51" pos:column="34"/></operator> <operator pos:line="51" pos:column="35">(<pos:position pos:line="51" pos:column="36"/></operator><name pos:line="51" pos:column="36">absolute_t<pos:position pos:line="51" pos:column="46"/></name><operator pos:line="51" pos:column="46">)<pos:position pos:line="51" pos:column="47"/></operator><name pos:line="51" pos:column="47">tmp<pos:position pos:line="51" pos:column="50"/></name></expr>;<pos:position pos:line="51" pos:column="51"/></expr_stmt>
      <break pos:line="52" pos:column="7">break;<pos:position pos:line="52" pos:column="13"/></break>
    <default pos:line="53" pos:column="5">default:<pos:position pos:line="53" pos:column="13"/></default>
      <return pos:line="54" pos:column="7">return <expr><name pos:line="54" pos:column="14">EINVAL<pos:position pos:line="54" pos:column="20"/></name></expr>;<pos:position pos:line="54" pos:column="21"/></return>
    }<pos:position pos:line="55" pos:column="6"/></block></switch>
  }<pos:position pos:line="56" pos:column="4"/></block></for>

  <return pos:line="58" pos:column="3">return <expr><literal type="number" pos:line="58" pos:column="10">0<pos:position pos:line="58" pos:column="11"/></literal></expr>;<pos:position pos:line="58" pos:column="12"/></return>
}<pos:position pos:line="59" pos:column="2"/></block></function></unit>
