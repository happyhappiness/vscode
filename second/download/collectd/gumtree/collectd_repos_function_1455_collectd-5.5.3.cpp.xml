<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1455_collectd-5.5.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">riemann_send_msg<pos:position pos:line="1" pos:column="28"/></name> <parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name><name pos:line="1" pos:column="30">struct<pos:position pos:line="1" pos:column="36"/></name> <name pos:line="1" pos:column="37">riemann_host<pos:position pos:line="1" pos:column="49"/></name></name> <modifier pos:line="1" pos:column="50">*<pos:position pos:line="1" pos:column="51"/></modifier></type><name pos:line="1" pos:column="51">host<pos:position pos:line="1" pos:column="55"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="57">const<pos:position pos:line="1" pos:column="62"/></specifier> <name pos:line="1" pos:column="63">Msg<pos:position pos:line="1" pos:column="66"/></name> <modifier pos:line="1" pos:column="67">*<pos:position pos:line="1" pos:column="68"/></modifier></type><name pos:line="1" pos:column="68">msg<pos:position pos:line="1" pos:column="71"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="72"/></parameter_list> <comment type="block" pos:line="1" pos:column="73">/* {{{ */</comment>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">status<pos:position pos:line="3" pos:column="19"/></name> <init pos:line="3" pos:column="20">= <expr><literal type="number" pos:line="3" pos:column="22">0<pos:position pos:line="3" pos:column="23"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="24"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">u_char<pos:position pos:line="4" pos:column="15"/></name> <modifier pos:line="4" pos:column="16">*<pos:position pos:line="4" pos:column="17"/></modifier></type><name pos:line="4" pos:column="17">buffer<pos:position pos:line="4" pos:column="23"/></name> <init pos:line="4" pos:column="24">= <expr><name pos:line="4" pos:column="26">NULL<pos:position pos:line="4" pos:column="30"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="31"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">size_t<pos:position pos:line="5" pos:column="15"/></name></type>  <name pos:line="5" pos:column="17">buffer_len<pos:position pos:line="5" pos:column="27"/></name></decl>;<pos:position pos:line="5" pos:column="28"/></decl_stmt>

	<expr_stmt><expr><name pos:line="7" pos:column="9">status<pos:position pos:line="7" pos:column="15"/></name> <operator pos:line="7" pos:column="16">=<pos:position pos:line="7" pos:column="17"/></operator> <call><name pos:line="7" pos:column="18">riemann_connect<pos:position pos:line="7" pos:column="33"/></name> <argument_list pos:line="7" pos:column="34">(<argument><expr><name pos:line="7" pos:column="35">host<pos:position pos:line="7" pos:column="39"/></name></expr></argument>)<pos:position pos:line="7" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="41"/></expr_stmt>
	<if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><name pos:line="8" pos:column="13">status<pos:position pos:line="8" pos:column="19"/></name> <operator pos:line="8" pos:column="20">!=<pos:position pos:line="8" pos:column="22"/></operator> <literal type="number" pos:line="8" pos:column="23">0<pos:position pos:line="8" pos:column="24"/></literal></expr>)<pos:position pos:line="8" pos:column="25"/></condition><then pos:line="8" pos:column="25">
		<block type="pseudo"><return pos:line="9" pos:column="17">return <expr><name pos:line="9" pos:column="24">status<pos:position pos:line="9" pos:column="30"/></name></expr>;<pos:position pos:line="9" pos:column="31"/></return></block></then></if>

	<expr_stmt><expr><name pos:line="11" pos:column="9">buffer_len<pos:position pos:line="11" pos:column="19"/></name> <operator pos:line="11" pos:column="20">=<pos:position pos:line="11" pos:column="21"/></operator> <call><name pos:line="11" pos:column="22">msg__get_packed_size<pos:position pos:line="11" pos:column="42"/></name><argument_list pos:line="11" pos:column="42">(<argument><expr><name pos:line="11" pos:column="43">msg<pos:position pos:line="11" pos:column="46"/></name></expr></argument>)<pos:position pos:line="11" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="48"/></expr_stmt>

	<if pos:line="13" pos:column="9">if <condition pos:line="13" pos:column="12">(<expr><name><name pos:line="13" pos:column="13">host<pos:position pos:line="13" pos:column="17"/></name><operator pos:line="13" pos:column="17">-&gt;<pos:position pos:line="13" pos:column="22"/></operator><name pos:line="13" pos:column="19">use_tcp<pos:position pos:line="13" pos:column="26"/></name></name></expr>)<pos:position pos:line="13" pos:column="27"/></condition><then pos:line="13" pos:column="27">
		<block type="pseudo"><expr_stmt><expr><name pos:line="14" pos:column="17">buffer_len<pos:position pos:line="14" pos:column="27"/></name> <operator pos:line="14" pos:column="28">+=<pos:position pos:line="14" pos:column="30"/></operator> <literal type="number" pos:line="14" pos:column="31">4<pos:position pos:line="14" pos:column="32"/></literal></expr>;<pos:position pos:line="14" pos:column="33"/></expr_stmt></block></then></if>

	<expr_stmt><expr><name pos:line="16" pos:column="9">buffer<pos:position pos:line="16" pos:column="15"/></name> <operator pos:line="16" pos:column="16">=<pos:position pos:line="16" pos:column="17"/></operator> <call><name pos:line="16" pos:column="18">malloc<pos:position pos:line="16" pos:column="24"/></name> <argument_list pos:line="16" pos:column="25">(<argument><expr><name pos:line="16" pos:column="26">buffer_len<pos:position pos:line="16" pos:column="36"/></name></expr></argument>)<pos:position pos:line="16" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="38"/></expr_stmt>
	<if pos:line="17" pos:column="9">if <condition pos:line="17" pos:column="12">(<expr><name pos:line="17" pos:column="13">buffer<pos:position pos:line="17" pos:column="19"/></name> <operator pos:line="17" pos:column="20">==<pos:position pos:line="17" pos:column="22"/></operator> <name pos:line="17" pos:column="23">NULL<pos:position pos:line="17" pos:column="27"/></name></expr>)<pos:position pos:line="17" pos:column="28"/></condition><then pos:line="17" pos:column="28"> <block pos:line="17" pos:column="29">{
		<expr_stmt><expr><call><name pos:line="18" pos:column="17">ERROR<pos:position pos:line="18" pos:column="22"/></name> <argument_list pos:line="18" pos:column="23">(<argument><expr><literal type="string" pos:line="18" pos:column="24">"write_riemann plugin: malloc failed."<pos:position pos:line="18" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="64"/></expr_stmt>
		<return pos:line="19" pos:column="17">return <expr><name pos:line="19" pos:column="24">ENOMEM<pos:position pos:line="19" pos:column="30"/></name></expr>;<pos:position pos:line="19" pos:column="31"/></return>
	}<pos:position pos:line="20" pos:column="10"/></block></then></if>
	<expr_stmt><expr><call><name pos:line="21" pos:column="9">memset<pos:position pos:line="21" pos:column="15"/></name> <argument_list pos:line="21" pos:column="16">(<argument><expr><name pos:line="21" pos:column="17">buffer<pos:position pos:line="21" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="21" pos:column="25">0<pos:position pos:line="21" pos:column="26"/></literal></expr></argument>, <argument><expr><name pos:line="21" pos:column="28">buffer_len<pos:position pos:line="21" pos:column="38"/></name></expr></argument>)<pos:position pos:line="21" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="40"/></expr_stmt>

	<if pos:line="23" pos:column="9">if <condition pos:line="23" pos:column="12">(<expr><name><name pos:line="23" pos:column="13">host<pos:position pos:line="23" pos:column="17"/></name><operator pos:line="23" pos:column="17">-&gt;<pos:position pos:line="23" pos:column="22"/></operator><name pos:line="23" pos:column="19">use_tcp<pos:position pos:line="23" pos:column="26"/></name></name></expr>)<pos:position pos:line="23" pos:column="27"/></condition><then pos:line="23" pos:column="27">
	<block pos:line="24" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="25" pos:column="17">uint32_t<pos:position pos:line="25" pos:column="25"/></name></type> <name pos:line="25" pos:column="26">length<pos:position pos:line="25" pos:column="32"/></name> <init pos:line="25" pos:column="33">= <expr><call><name pos:line="25" pos:column="35">htonl<pos:position pos:line="25" pos:column="40"/></name> <argument_list pos:line="25" pos:column="41">(<argument><expr><call pos:line="25" pos:column="42">(<name pos:line="25" pos:column="43">uint32_t<pos:position pos:line="25" pos:column="51"/></name>) <argument_list pos:line="25" pos:column="53">(<argument><expr><name pos:line="25" pos:column="54">buffer_len<pos:position pos:line="25" pos:column="64"/></name> <operator pos:line="25" pos:column="65">-<pos:position pos:line="25" pos:column="66"/></operator> <literal type="number" pos:line="25" pos:column="67">4<pos:position pos:line="25" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="69"/></argument_list></call></expr></argument>)<pos:position pos:line="25" pos:column="70"/></argument_list></call></expr></init></decl>;<pos:position pos:line="25" pos:column="71"/></decl_stmt>
		<expr_stmt><expr><call><name pos:line="26" pos:column="17">memcpy<pos:position pos:line="26" pos:column="23"/></name> <argument_list pos:line="26" pos:column="24">(<argument><expr><name pos:line="26" pos:column="25">buffer<pos:position pos:line="26" pos:column="31"/></name></expr></argument>, <argument><expr><operator pos:line="26" pos:column="33">&amp;<pos:position pos:line="26" pos:column="38"/></operator><name pos:line="26" pos:column="34">length<pos:position pos:line="26" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="26" pos:column="42">4<pos:position pos:line="26" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="45"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="27" pos:column="17">msg__pack<pos:position pos:line="27" pos:column="26"/></name><argument_list pos:line="27" pos:column="26">(<argument><expr><name pos:line="27" pos:column="27">msg<pos:position pos:line="27" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="32">buffer<pos:position pos:line="27" pos:column="38"/></name> <operator pos:line="27" pos:column="39">+<pos:position pos:line="27" pos:column="40"/></operator> <literal type="number" pos:line="27" pos:column="41">4<pos:position pos:line="27" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="44"/></expr_stmt>
	}<pos:position pos:line="28" pos:column="10"/></block></then>
	<else pos:line="29" pos:column="9">else
	<block pos:line="30" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="31" pos:column="17">msg__pack<pos:position pos:line="31" pos:column="26"/></name><argument_list pos:line="31" pos:column="26">(<argument><expr><name pos:line="31" pos:column="27">msg<pos:position pos:line="31" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="32">buffer<pos:position pos:line="31" pos:column="38"/></name></expr></argument>)<pos:position pos:line="31" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="40"/></expr_stmt>
	}<pos:position pos:line="32" pos:column="10"/></block></else></if>

	<expr_stmt><expr><name pos:line="34" pos:column="9">status<pos:position pos:line="34" pos:column="15"/></name> <operator pos:line="34" pos:column="16">=<pos:position pos:line="34" pos:column="17"/></operator> <operator pos:line="34" pos:column="18">(<pos:position pos:line="34" pos:column="19"/></operator><name pos:line="34" pos:column="19">int<pos:position pos:line="34" pos:column="22"/></name><operator pos:line="34" pos:column="22">)<pos:position pos:line="34" pos:column="23"/></operator> <call><name pos:line="34" pos:column="24">swrite<pos:position pos:line="34" pos:column="30"/></name> <argument_list pos:line="34" pos:column="31">(<argument><expr><name><name pos:line="34" pos:column="32">host<pos:position pos:line="34" pos:column="36"/></name><operator pos:line="34" pos:column="36">-&gt;<pos:position pos:line="34" pos:column="41"/></operator><name pos:line="34" pos:column="38">s<pos:position pos:line="34" pos:column="39"/></name></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="41">buffer<pos:position pos:line="34" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="49">buffer_len<pos:position pos:line="34" pos:column="59"/></name></expr></argument>)<pos:position pos:line="34" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="61"/></expr_stmt>
	<if pos:line="35" pos:column="9">if <condition pos:line="35" pos:column="12">(<expr><name pos:line="35" pos:column="13">status<pos:position pos:line="35" pos:column="19"/></name> <operator pos:line="35" pos:column="20">!=<pos:position pos:line="35" pos:column="22"/></operator> <literal type="number" pos:line="35" pos:column="23">0<pos:position pos:line="35" pos:column="24"/></literal></expr>)<pos:position pos:line="35" pos:column="25"/></condition><then pos:line="35" pos:column="25">
	<block pos:line="36" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="37" pos:column="17">char<pos:position pos:line="37" pos:column="21"/></name></type> <name><name pos:line="37" pos:column="22">errbuf<pos:position pos:line="37" pos:column="28"/></name><index pos:line="37" pos:column="28">[<expr><literal type="number" pos:line="37" pos:column="29">1024<pos:position pos:line="37" pos:column="33"/></literal></expr>]<pos:position pos:line="37" pos:column="34"/></index></name></decl>;<pos:position pos:line="37" pos:column="35"/></decl_stmt>
		<expr_stmt><expr><call><name pos:line="38" pos:column="17">ERROR<pos:position pos:line="38" pos:column="22"/></name> <argument_list pos:line="38" pos:column="23">(<argument><expr><literal type="string" pos:line="38" pos:column="24">"write_riemann plugin: Sending to Riemann at %s:%s failed: %s"<pos:position pos:line="38" pos:column="86"/></literal></expr></argument>,
				<argument><expr><ternary><condition><expr><operator pos:line="39" pos:column="33">(<pos:position pos:line="39" pos:column="34"/></operator><name><name pos:line="39" pos:column="34">host<pos:position pos:line="39" pos:column="38"/></name><operator pos:line="39" pos:column="38">-&gt;<pos:position pos:line="39" pos:column="43"/></operator><name pos:line="39" pos:column="40">node<pos:position pos:line="39" pos:column="44"/></name></name> <operator pos:line="39" pos:column="45">!=<pos:position pos:line="39" pos:column="47"/></operator> <name pos:line="39" pos:column="48">NULL<pos:position pos:line="39" pos:column="52"/></name><operator pos:line="39" pos:column="52">)<pos:position pos:line="39" pos:column="53"/></operator></expr> ?<pos:position pos:line="39" pos:column="55"/></condition><then pos:line="39" pos:column="55"> <expr><name><name pos:line="39" pos:column="56">host<pos:position pos:line="39" pos:column="60"/></name><operator pos:line="39" pos:column="60">-&gt;<pos:position pos:line="39" pos:column="65"/></operator><name pos:line="39" pos:column="62">node<pos:position pos:line="39" pos:column="66"/></name></name></expr> <pos:position pos:line="39" pos:column="67"/></then><else pos:line="39" pos:column="67">: <expr><name pos:line="39" pos:column="69">RIEMANN_HOST<pos:position pos:line="39" pos:column="81"/></name></expr></else></ternary></expr></argument>,
				<argument><expr><ternary><condition><expr><operator pos:line="40" pos:column="33">(<pos:position pos:line="40" pos:column="34"/></operator><name><name pos:line="40" pos:column="34">host<pos:position pos:line="40" pos:column="38"/></name><operator pos:line="40" pos:column="38">-&gt;<pos:position pos:line="40" pos:column="43"/></operator><name pos:line="40" pos:column="40">service<pos:position pos:line="40" pos:column="47"/></name></name> <operator pos:line="40" pos:column="48">!=<pos:position pos:line="40" pos:column="50"/></operator> <name pos:line="40" pos:column="51">NULL<pos:position pos:line="40" pos:column="55"/></name><operator pos:line="40" pos:column="55">)<pos:position pos:line="40" pos:column="56"/></operator></expr> ?<pos:position pos:line="40" pos:column="58"/></condition><then pos:line="40" pos:column="58"> <expr><name><name pos:line="40" pos:column="59">host<pos:position pos:line="40" pos:column="63"/></name><operator pos:line="40" pos:column="63">-&gt;<pos:position pos:line="40" pos:column="68"/></operator><name pos:line="40" pos:column="65">service<pos:position pos:line="40" pos:column="72"/></name></name></expr> <pos:position pos:line="40" pos:column="73"/></then><else pos:line="40" pos:column="73">: <expr><name pos:line="40" pos:column="75">RIEMANN_PORT<pos:position pos:line="40" pos:column="87"/></name></expr></else></ternary></expr></argument>,
				<argument><expr><call><name pos:line="41" pos:column="33">sstrerror<pos:position pos:line="41" pos:column="42"/></name> <argument_list pos:line="41" pos:column="43">(<argument><expr><name pos:line="41" pos:column="44">errno<pos:position pos:line="41" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="51">errbuf<pos:position pos:line="41" pos:column="57"/></name></expr></argument>, <argument><expr><sizeof pos:line="41" pos:column="59">sizeof <argument_list pos:line="41" pos:column="66">(<argument><expr><name pos:line="41" pos:column="67">errbuf<pos:position pos:line="41" pos:column="73"/></name></expr></argument>)<pos:position pos:line="41" pos:column="74"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="41" pos:column="75"/></argument_list></call></expr></argument>)<pos:position pos:line="41" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="77"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="42" pos:column="17">sfree<pos:position pos:line="42" pos:column="22"/></name> <argument_list pos:line="42" pos:column="23">(<argument><expr><name pos:line="42" pos:column="24">buffer<pos:position pos:line="42" pos:column="30"/></name></expr></argument>)<pos:position pos:line="42" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="32"/></expr_stmt>
		<return pos:line="43" pos:column="17">return <expr><operator pos:line="43" pos:column="24">-<pos:position pos:line="43" pos:column="25"/></operator><literal type="number" pos:line="43" pos:column="25">1<pos:position pos:line="43" pos:column="26"/></literal></expr>;<pos:position pos:line="43" pos:column="27"/></return>
	}<pos:position pos:line="44" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="46" pos:column="9">sfree<pos:position pos:line="46" pos:column="14"/></name> <argument_list pos:line="46" pos:column="15">(<argument><expr><name pos:line="46" pos:column="16">buffer<pos:position pos:line="46" pos:column="22"/></name></expr></argument>)<pos:position pos:line="46" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="24"/></expr_stmt>
	<return pos:line="47" pos:column="9">return <expr><literal type="number" pos:line="47" pos:column="16">0<pos:position pos:line="47" pos:column="17"/></literal></expr>;<pos:position pos:line="47" pos:column="18"/></return>
}<pos:position pos:line="48" pos:column="2"/></block></function></unit>
