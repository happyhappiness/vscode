<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_455_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">ovs_stats_update_bridge<pos:position pos:line="1" pos:column="35"/></name><parameter_list pos:line="1" pos:column="35">(<parameter><decl><type><name pos:line="1" pos:column="36">yajl_val<pos:position pos:line="1" pos:column="44"/></name></type> <name pos:line="1" pos:column="45">bridge<pos:position pos:line="1" pos:column="51"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="52"/></parameter_list> <block pos:line="1" pos:column="53">{
  <expr_stmt><expr><specifier pos:line="2" pos:column="3">const<pos:position pos:line="2" pos:column="8"/></specifier> <name pos:line="2" pos:column="9">char<pos:position pos:line="2" pos:column="13"/></name> <operator pos:line="2" pos:column="14">*<pos:position pos:line="2" pos:column="15"/></operator><operator pos:line="2" pos:column="15">new<pos:position pos:line="2" pos:column="18"/></operator><index pos:line="2" pos:column="18">[]<pos:position pos:line="2" pos:column="20"/></index> <operator pos:line="2" pos:column="21">=<pos:position pos:line="2" pos:column="22"/></operator> <block pos:line="2" pos:column="23">{<expr><literal type="string" pos:line="2" pos:column="24">"new"<pos:position pos:line="2" pos:column="29"/></literal></expr>, <expr><name pos:line="2" pos:column="31">NULL<pos:position pos:line="2" pos:column="35"/></name></expr>}<pos:position pos:line="2" pos:column="36"/></block></expr>;<pos:position pos:line="2" pos:column="37"/></expr_stmt>
  <decl_stmt><decl><type><specifier pos:line="3" pos:column="3">const<pos:position pos:line="3" pos:column="8"/></specifier> <name pos:line="3" pos:column="9">char<pos:position pos:line="3" pos:column="13"/></name> <modifier pos:line="3" pos:column="14">*<pos:position pos:line="3" pos:column="15"/></modifier></type><name><name pos:line="3" pos:column="15">name<pos:position pos:line="3" pos:column="19"/></name><index pos:line="3" pos:column="19">[]<pos:position pos:line="3" pos:column="21"/></index></name> <init pos:line="3" pos:column="22">= <expr><block pos:line="3" pos:column="24">{<expr><literal type="string" pos:line="3" pos:column="25">"name"<pos:position pos:line="3" pos:column="31"/></literal></expr>, <expr><name pos:line="3" pos:column="33">NULL<pos:position pos:line="3" pos:column="37"/></name></expr>}<pos:position pos:line="3" pos:column="38"/></block></expr></init></decl>;<pos:position pos:line="3" pos:column="39"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="4" pos:column="3">const<pos:position pos:line="4" pos:column="8"/></specifier> <name pos:line="4" pos:column="9">char<pos:position pos:line="4" pos:column="13"/></name> <modifier pos:line="4" pos:column="14">*<pos:position pos:line="4" pos:column="15"/></modifier></type><name><name pos:line="4" pos:column="15">ports<pos:position pos:line="4" pos:column="20"/></name><index pos:line="4" pos:column="20">[]<pos:position pos:line="4" pos:column="22"/></index></name> <init pos:line="4" pos:column="23">= <expr><block pos:line="4" pos:column="25">{<expr><literal type="string" pos:line="4" pos:column="26">"ports"<pos:position pos:line="4" pos:column="33"/></literal></expr>, <expr><name pos:line="4" pos:column="35">NULL<pos:position pos:line="4" pos:column="39"/></name></expr>}<pos:position pos:line="4" pos:column="40"/></block></expr></init></decl>;<pos:position pos:line="4" pos:column="41"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">bridge_list_t<pos:position pos:line="5" pos:column="16"/></name> <modifier pos:line="5" pos:column="17">*<pos:position pos:line="5" pos:column="18"/></modifier></type><name pos:line="5" pos:column="18">br<pos:position pos:line="5" pos:column="20"/></name> <init pos:line="5" pos:column="21">= <expr><name pos:line="5" pos:column="23">NULL<pos:position pos:line="5" pos:column="27"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="28"/></decl_stmt>

  <if pos:line="7" pos:column="3">if <condition pos:line="7" pos:column="6">(<expr><name pos:line="7" pos:column="7">bridge<pos:position pos:line="7" pos:column="13"/></name> <operator pos:line="7" pos:column="14">&amp;&amp;<pos:position pos:line="7" pos:column="24"/></operator> <call><name pos:line="7" pos:column="17">YAJL_IS_OBJECT<pos:position pos:line="7" pos:column="31"/></name><argument_list pos:line="7" pos:column="31">(<argument><expr><name pos:line="7" pos:column="32">bridge<pos:position pos:line="7" pos:column="38"/></name></expr></argument>)<pos:position pos:line="7" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="7" pos:column="40"/></condition><then pos:line="7" pos:column="40"> <block pos:line="7" pos:column="41">{
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">yajl_val<pos:position pos:line="8" pos:column="13"/></name></type> <name pos:line="8" pos:column="14">row<pos:position pos:line="8" pos:column="17"/></name> <init pos:line="8" pos:column="18">= <expr><call><name pos:line="8" pos:column="20">yajl_tree_get<pos:position pos:line="8" pos:column="33"/></name><argument_list pos:line="8" pos:column="33">(<argument><expr><name pos:line="8" pos:column="34">bridge<pos:position pos:line="8" pos:column="40"/></name></expr></argument>, <argument><expr><operator pos:line="8" pos:column="42">new<pos:position pos:line="8" pos:column="45"/></operator></expr></argument>, <argument><expr><name pos:line="8" pos:column="47">yajl_t_object<pos:position pos:line="8" pos:column="60"/></name></expr></argument>)<pos:position pos:line="8" pos:column="61"/></argument_list></call></expr></init></decl>;<pos:position pos:line="8" pos:column="62"/></decl_stmt>
    <if pos:line="9" pos:column="5">if <condition pos:line="9" pos:column="8">(<expr><name pos:line="9" pos:column="9">row<pos:position pos:line="9" pos:column="12"/></name> <operator pos:line="9" pos:column="13">&amp;&amp;<pos:position pos:line="9" pos:column="23"/></operator> <call><name pos:line="9" pos:column="16">YAJL_IS_OBJECT<pos:position pos:line="9" pos:column="30"/></name><argument_list pos:line="9" pos:column="30">(<argument><expr><name pos:line="9" pos:column="31">row<pos:position pos:line="9" pos:column="34"/></name></expr></argument>)<pos:position pos:line="9" pos:column="35"/></argument_list></call></expr>)<pos:position pos:line="9" pos:column="36"/></condition><then pos:line="9" pos:column="36"> <block pos:line="9" pos:column="37">{
      <decl_stmt><decl><type><name pos:line="10" pos:column="7">yajl_val<pos:position pos:line="10" pos:column="15"/></name></type> <name pos:line="10" pos:column="16">br_name<pos:position pos:line="10" pos:column="23"/></name> <init pos:line="10" pos:column="24">= <expr><call><name pos:line="10" pos:column="26">yajl_tree_get<pos:position pos:line="10" pos:column="39"/></name><argument_list pos:line="10" pos:column="39">(<argument><expr><name pos:line="10" pos:column="40">row<pos:position pos:line="10" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="45">name<pos:position pos:line="10" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="51">yajl_t_string<pos:position pos:line="10" pos:column="64"/></name></expr></argument>)<pos:position pos:line="10" pos:column="65"/></argument_list></call></expr></init></decl>;<pos:position pos:line="10" pos:column="66"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="11" pos:column="7">yajl_val<pos:position pos:line="11" pos:column="15"/></name></type> <name pos:line="11" pos:column="16">br_ports<pos:position pos:line="11" pos:column="24"/></name> <init pos:line="11" pos:column="25">= <expr><call><name pos:line="11" pos:column="27">yajl_tree_get<pos:position pos:line="11" pos:column="40"/></name><argument_list pos:line="11" pos:column="40">(<argument><expr><name pos:line="11" pos:column="41">row<pos:position pos:line="11" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="46">ports<pos:position pos:line="11" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="53">yajl_t_array<pos:position pos:line="11" pos:column="65"/></name></expr></argument>)<pos:position pos:line="11" pos:column="66"/></argument_list></call></expr></init></decl>;<pos:position pos:line="11" pos:column="67"/></decl_stmt>
      <if pos:line="12" pos:column="7">if <condition pos:line="12" pos:column="10">(<expr><name pos:line="12" pos:column="11">br_name<pos:position pos:line="12" pos:column="18"/></name> <operator pos:line="12" pos:column="19">&amp;&amp;<pos:position pos:line="12" pos:column="29"/></operator> <call><name pos:line="12" pos:column="22">YAJL_IS_STRING<pos:position pos:line="12" pos:column="36"/></name><argument_list pos:line="12" pos:column="36">(<argument><expr><name pos:line="12" pos:column="37">br_name<pos:position pos:line="12" pos:column="44"/></name></expr></argument>)<pos:position pos:line="12" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="12" pos:column="46"/></condition><then pos:line="12" pos:column="46"> <block pos:line="12" pos:column="47">{
        <expr_stmt><expr><name pos:line="13" pos:column="9">br<pos:position pos:line="13" pos:column="11"/></name> <operator pos:line="13" pos:column="12">=<pos:position pos:line="13" pos:column="13"/></operator> <call><name pos:line="13" pos:column="14">ovs_stats_get_bridge<pos:position pos:line="13" pos:column="34"/></name><argument_list pos:line="13" pos:column="34">(<argument><expr><name pos:line="13" pos:column="35">g_bridge_list_head<pos:position pos:line="13" pos:column="53"/></name></expr></argument>, <argument><expr><call><name pos:line="13" pos:column="55">YAJL_GET_STRING<pos:position pos:line="13" pos:column="70"/></name><argument_list pos:line="13" pos:column="70">(<argument><expr><name pos:line="13" pos:column="71">br_name<pos:position pos:line="13" pos:column="78"/></name></expr></argument>)<pos:position pos:line="13" pos:column="79"/></argument_list></call></expr></argument>)<pos:position pos:line="13" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="81"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="14" pos:column="9">pthread_mutex_lock<pos:position pos:line="14" pos:column="27"/></name><argument_list pos:line="14" pos:column="27">(<argument><expr><operator pos:line="14" pos:column="28">&amp;<pos:position pos:line="14" pos:column="33"/></operator><name pos:line="14" pos:column="29">g_stats_lock<pos:position pos:line="14" pos:column="41"/></name></expr></argument>)<pos:position pos:line="14" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="43"/></expr_stmt>
        <if pos:line="15" pos:column="9">if <condition pos:line="15" pos:column="12">(<expr><name pos:line="15" pos:column="13">br<pos:position pos:line="15" pos:column="15"/></name> <operator pos:line="15" pos:column="16">==<pos:position pos:line="15" pos:column="18"/></operator> <name pos:line="15" pos:column="19">NULL<pos:position pos:line="15" pos:column="23"/></name></expr>)<pos:position pos:line="15" pos:column="24"/></condition><then pos:line="15" pos:column="24"> <block pos:line="15" pos:column="25">{
          <expr_stmt><expr><name pos:line="16" pos:column="11">br<pos:position pos:line="16" pos:column="13"/></name> <operator pos:line="16" pos:column="14">=<pos:position pos:line="16" pos:column="15"/></operator> <call><name pos:line="16" pos:column="16">calloc<pos:position pos:line="16" pos:column="22"/></name><argument_list pos:line="16" pos:column="22">(<argument><expr><literal type="number" pos:line="16" pos:column="23">1<pos:position pos:line="16" pos:column="24"/></literal></expr></argument>, <argument><expr><sizeof pos:line="16" pos:column="26">sizeof<argument_list pos:line="16" pos:column="32">(<argument><expr><operator pos:line="16" pos:column="33">*<pos:position pos:line="16" pos:column="34"/></operator><name pos:line="16" pos:column="34">br<pos:position pos:line="16" pos:column="36"/></name></expr></argument>)<pos:position pos:line="16" pos:column="37"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="16" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="39"/></expr_stmt>
          <if pos:line="17" pos:column="11">if <condition pos:line="17" pos:column="14">(<expr><operator pos:line="17" pos:column="15">!<pos:position pos:line="17" pos:column="16"/></operator><name pos:line="17" pos:column="16">br<pos:position pos:line="17" pos:column="18"/></name></expr>)<pos:position pos:line="17" pos:column="19"/></condition><then pos:line="17" pos:column="19"> <block pos:line="17" pos:column="20">{
            <expr_stmt><expr><call><name pos:line="18" pos:column="13">pthread_mutex_unlock<pos:position pos:line="18" pos:column="33"/></name><argument_list pos:line="18" pos:column="33">(<argument><expr><operator pos:line="18" pos:column="34">&amp;<pos:position pos:line="18" pos:column="39"/></operator><name pos:line="18" pos:column="35">g_stats_lock<pos:position pos:line="18" pos:column="47"/></name></expr></argument>)<pos:position pos:line="18" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="49"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="19" pos:column="13">ERROR<pos:position pos:line="19" pos:column="18"/></name><argument_list pos:line="19" pos:column="18">(<argument><expr><literal type="string" pos:line="19" pos:column="19">"%s: calloc(%zu) failed."<pos:position pos:line="19" pos:column="44"/></literal></expr></argument>, <argument><expr><name pos:line="19" pos:column="46">plugin_name<pos:position pos:line="19" pos:column="57"/></name></expr></argument>, <argument><expr><sizeof pos:line="19" pos:column="59">sizeof<argument_list pos:line="19" pos:column="65">(<argument><expr><operator pos:line="19" pos:column="66">*<pos:position pos:line="19" pos:column="67"/></operator><name pos:line="19" pos:column="67">br<pos:position pos:line="19" pos:column="69"/></name></expr></argument>)<pos:position pos:line="19" pos:column="70"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="19" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="72"/></expr_stmt>
            <return pos:line="20" pos:column="13">return <expr><operator pos:line="20" pos:column="20">-<pos:position pos:line="20" pos:column="21"/></operator><literal type="number" pos:line="20" pos:column="21">1<pos:position pos:line="20" pos:column="22"/></literal></expr>;<pos:position pos:line="20" pos:column="23"/></return>
          }<pos:position pos:line="21" pos:column="12"/></block></then></if>
          <decl_stmt><decl><type><name pos:line="22" pos:column="11">char<pos:position pos:line="22" pos:column="15"/></name> <modifier pos:line="22" pos:column="16">*<pos:position pos:line="22" pos:column="17"/></modifier></type><name pos:line="22" pos:column="17">tmp<pos:position pos:line="22" pos:column="20"/></name> <init pos:line="22" pos:column="21">= <expr><call><name pos:line="22" pos:column="23">YAJL_GET_STRING<pos:position pos:line="22" pos:column="38"/></name><argument_list pos:line="22" pos:column="38">(<argument><expr><name pos:line="22" pos:column="39">br_name<pos:position pos:line="22" pos:column="46"/></name></expr></argument>)<pos:position pos:line="22" pos:column="47"/></argument_list></call></expr></init></decl>;<pos:position pos:line="22" pos:column="48"/></decl_stmt>

          <if pos:line="24" pos:column="11">if <condition pos:line="24" pos:column="14">(<expr><name pos:line="24" pos:column="15">tmp<pos:position pos:line="24" pos:column="18"/></name> <operator pos:line="24" pos:column="19">!=<pos:position pos:line="24" pos:column="21"/></operator> <name pos:line="24" pos:column="22">NULL<pos:position pos:line="24" pos:column="26"/></name></expr>)<pos:position pos:line="24" pos:column="27"/></condition><then pos:line="24" pos:column="27">
            <block type="pseudo"><expr_stmt><expr><name><name pos:line="25" pos:column="13">br<pos:position pos:line="25" pos:column="15"/></name><operator pos:line="25" pos:column="15">-&gt;<pos:position pos:line="25" pos:column="20"/></operator><name pos:line="25" pos:column="17">name<pos:position pos:line="25" pos:column="21"/></name></name> <operator pos:line="25" pos:column="22">=<pos:position pos:line="25" pos:column="23"/></operator> <call><name pos:line="25" pos:column="24">strdup<pos:position pos:line="25" pos:column="30"/></name><argument_list pos:line="25" pos:column="30">(<argument><expr><name pos:line="25" pos:column="31">tmp<pos:position pos:line="25" pos:column="34"/></name></expr></argument>)<pos:position pos:line="25" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="36"/></expr_stmt></block></then></if>
          <if pos:line="26" pos:column="11">if <condition pos:line="26" pos:column="14">(<expr><name><name pos:line="26" pos:column="15">br<pos:position pos:line="26" pos:column="17"/></name><operator pos:line="26" pos:column="17">-&gt;<pos:position pos:line="26" pos:column="22"/></operator><name pos:line="26" pos:column="19">name<pos:position pos:line="26" pos:column="23"/></name></name> <operator pos:line="26" pos:column="24">==<pos:position pos:line="26" pos:column="26"/></operator> <name pos:line="26" pos:column="27">NULL<pos:position pos:line="26" pos:column="31"/></name></expr>)<pos:position pos:line="26" pos:column="32"/></condition><then pos:line="26" pos:column="32"> <block pos:line="26" pos:column="33">{
            <expr_stmt><expr><call><name pos:line="27" pos:column="13">sfree<pos:position pos:line="27" pos:column="18"/></name><argument_list pos:line="27" pos:column="18">(<argument><expr><name pos:line="27" pos:column="19">br<pos:position pos:line="27" pos:column="21"/></name></expr></argument>)<pos:position pos:line="27" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="23"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="28" pos:column="13">pthread_mutex_unlock<pos:position pos:line="28" pos:column="33"/></name><argument_list pos:line="28" pos:column="33">(<argument><expr><operator pos:line="28" pos:column="34">&amp;<pos:position pos:line="28" pos:column="39"/></operator><name pos:line="28" pos:column="35">g_stats_lock<pos:position pos:line="28" pos:column="47"/></name></expr></argument>)<pos:position pos:line="28" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="49"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="29" pos:column="13">ERROR<pos:position pos:line="29" pos:column="18"/></name><argument_list pos:line="29" pos:column="18">(<argument><expr><literal type="string" pos:line="29" pos:column="19">"%s: strdup failed."<pos:position pos:line="29" pos:column="39"/></literal></expr></argument>, <argument><expr><name pos:line="29" pos:column="41">plugin_name<pos:position pos:line="29" pos:column="52"/></name></expr></argument>)<pos:position pos:line="29" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="54"/></expr_stmt>
            <return pos:line="30" pos:column="13">return <expr><operator pos:line="30" pos:column="20">-<pos:position pos:line="30" pos:column="21"/></operator><literal type="number" pos:line="30" pos:column="21">1<pos:position pos:line="30" pos:column="22"/></literal></expr>;<pos:position pos:line="30" pos:column="23"/></return>
          }<pos:position pos:line="31" pos:column="12"/></block></then></if>
          <expr_stmt><expr><name><name pos:line="32" pos:column="11">br<pos:position pos:line="32" pos:column="13"/></name><operator pos:line="32" pos:column="13">-&gt;<pos:position pos:line="32" pos:column="18"/></operator><name pos:line="32" pos:column="15">next<pos:position pos:line="32" pos:column="19"/></name></name> <operator pos:line="32" pos:column="20">=<pos:position pos:line="32" pos:column="21"/></operator> <name pos:line="32" pos:column="22">g_bridge_list_head<pos:position pos:line="32" pos:column="40"/></name></expr>;<pos:position pos:line="32" pos:column="41"/></expr_stmt>
          <expr_stmt><expr><name pos:line="33" pos:column="11">g_bridge_list_head<pos:position pos:line="33" pos:column="29"/></name> <operator pos:line="33" pos:column="30">=<pos:position pos:line="33" pos:column="31"/></operator> <name pos:line="33" pos:column="32">br<pos:position pos:line="33" pos:column="34"/></name></expr>;<pos:position pos:line="33" pos:column="35"/></expr_stmt>
        }<pos:position pos:line="34" pos:column="10"/></block></then></if>
        <expr_stmt><expr><call><name pos:line="35" pos:column="9">pthread_mutex_unlock<pos:position pos:line="35" pos:column="29"/></name><argument_list pos:line="35" pos:column="29">(<argument><expr><operator pos:line="35" pos:column="30">&amp;<pos:position pos:line="35" pos:column="35"/></operator><name pos:line="35" pos:column="31">g_stats_lock<pos:position pos:line="35" pos:column="43"/></name></expr></argument>)<pos:position pos:line="35" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="45"/></expr_stmt>
      }<pos:position pos:line="36" pos:column="8"/></block></then></if>
      <if pos:line="37" pos:column="7">if <condition pos:line="37" pos:column="10">(<expr><name pos:line="37" pos:column="11">br_ports<pos:position pos:line="37" pos:column="19"/></name> <operator pos:line="37" pos:column="20">&amp;&amp;<pos:position pos:line="37" pos:column="30"/></operator> <call><name pos:line="37" pos:column="23">YAJL_IS_ARRAY<pos:position pos:line="37" pos:column="36"/></name><argument_list pos:line="37" pos:column="36">(<argument><expr><name pos:line="37" pos:column="37">br_ports<pos:position pos:line="37" pos:column="45"/></name></expr></argument>)<pos:position pos:line="37" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="37" pos:column="47"/></condition><then pos:line="37" pos:column="47"> <block pos:line="37" pos:column="48">{
        <decl_stmt><decl><type><name pos:line="38" pos:column="9">char<pos:position pos:line="38" pos:column="13"/></name> <modifier pos:line="38" pos:column="14">*<pos:position pos:line="38" pos:column="15"/></modifier></type><name pos:line="38" pos:column="15">tmp<pos:position pos:line="38" pos:column="18"/></name> <init pos:line="38" pos:column="19">= <expr><call><name pos:line="38" pos:column="21">YAJL_GET_STRING<pos:position pos:line="38" pos:column="36"/></name><argument_list pos:line="38" pos:column="36">(<argument><expr><name><name pos:line="38" pos:column="37">br_ports<pos:position pos:line="38" pos:column="45"/></name><operator pos:line="38" pos:column="45">-&gt;<pos:position pos:line="38" pos:column="50"/></operator><name pos:line="38" pos:column="47">u<pos:position pos:line="38" pos:column="48"/></name><operator pos:line="38" pos:column="48">.<pos:position pos:line="38" pos:column="49"/></operator><name pos:line="38" pos:column="49">array<pos:position pos:line="38" pos:column="54"/></name><operator pos:line="38" pos:column="54">.<pos:position pos:line="38" pos:column="55"/></operator><name pos:line="38" pos:column="55">values<pos:position pos:line="38" pos:column="61"/></name><index pos:line="38" pos:column="61">[<expr><literal type="number" pos:line="38" pos:column="62">0<pos:position pos:line="38" pos:column="63"/></literal></expr>]<pos:position pos:line="38" pos:column="64"/></index></name></expr></argument>)<pos:position pos:line="38" pos:column="65"/></argument_list></call></expr></init></decl>;<pos:position pos:line="38" pos:column="66"/></decl_stmt>
        <if pos:line="39" pos:column="9">if <condition pos:line="39" pos:column="12">(<expr><name pos:line="39" pos:column="13">tmp<pos:position pos:line="39" pos:column="16"/></name> <operator pos:line="39" pos:column="17">!=<pos:position pos:line="39" pos:column="19"/></operator> <name pos:line="39" pos:column="20">NULL<pos:position pos:line="39" pos:column="24"/></name> <operator pos:line="39" pos:column="25">&amp;&amp;<pos:position pos:line="39" pos:column="35"/></operator> <call><name pos:line="39" pos:column="28">strcmp<pos:position pos:line="39" pos:column="34"/></name><argument_list pos:line="39" pos:column="34">(<argument><expr><literal type="string" pos:line="39" pos:column="35">"set"<pos:position pos:line="39" pos:column="40"/></literal></expr></argument>, <argument><expr><name pos:line="39" pos:column="42">tmp<pos:position pos:line="39" pos:column="45"/></name></expr></argument>)<pos:position pos:line="39" pos:column="46"/></argument_list></call> <operator pos:line="39" pos:column="47">==<pos:position pos:line="39" pos:column="49"/></operator> <literal type="number" pos:line="39" pos:column="50">0<pos:position pos:line="39" pos:column="51"/></literal></expr>)<pos:position pos:line="39" pos:column="52"/></condition><then pos:line="39" pos:column="52"> <block pos:line="39" pos:column="53">{
          <decl_stmt><decl><type><name pos:line="40" pos:column="11">yajl_val<pos:position pos:line="40" pos:column="19"/></name> <modifier pos:line="40" pos:column="20">*<pos:position pos:line="40" pos:column="21"/></modifier></type><name pos:line="40" pos:column="21">array<pos:position pos:line="40" pos:column="26"/></name> <init pos:line="40" pos:column="27">= <expr><call><name pos:line="40" pos:column="29">YAJL_GET_ARRAY<pos:position pos:line="40" pos:column="43"/></name><argument_list pos:line="40" pos:column="43">(<argument><expr><name pos:line="40" pos:column="44">br_ports<pos:position pos:line="40" pos:column="52"/></name></expr></argument>)<pos:position pos:line="40" pos:column="53"/></argument_list></call><operator pos:line="40" pos:column="53">-&gt;<pos:position pos:line="40" pos:column="58"/></operator><name pos:line="40" pos:column="55">values<pos:position pos:line="40" pos:column="61"/></name></expr></init></decl>;<pos:position pos:line="40" pos:column="62"/></decl_stmt>
          <decl_stmt><decl><type><name pos:line="41" pos:column="11">size_t<pos:position pos:line="41" pos:column="17"/></name></type> <name pos:line="41" pos:column="18">array_len<pos:position pos:line="41" pos:column="27"/></name> <init pos:line="41" pos:column="28">= <expr><call><name pos:line="41" pos:column="30">YAJL_GET_ARRAY<pos:position pos:line="41" pos:column="44"/></name><argument_list pos:line="41" pos:column="44">(<argument><expr><name pos:line="41" pos:column="45">br_ports<pos:position pos:line="41" pos:column="53"/></name></expr></argument>)<pos:position pos:line="41" pos:column="54"/></argument_list></call><operator pos:line="41" pos:column="54">-&gt;<pos:position pos:line="41" pos:column="59"/></operator><name pos:line="41" pos:column="56">len<pos:position pos:line="41" pos:column="59"/></name></expr></init></decl>;<pos:position pos:line="41" pos:column="60"/></decl_stmt>
          <if pos:line="42" pos:column="11">if <condition pos:line="42" pos:column="14">(<expr><name pos:line="42" pos:column="15">array<pos:position pos:line="42" pos:column="20"/></name> <operator pos:line="42" pos:column="21">!=<pos:position pos:line="42" pos:column="23"/></operator> <name pos:line="42" pos:column="24">NULL<pos:position pos:line="42" pos:column="28"/></name> <operator pos:line="42" pos:column="29">&amp;&amp;<pos:position pos:line="42" pos:column="39"/></operator> <name pos:line="42" pos:column="32">array_len<pos:position pos:line="42" pos:column="41"/></name> <operator pos:line="42" pos:column="42">&gt;<pos:position pos:line="42" pos:column="46"/></operator> <literal type="number" pos:line="42" pos:column="44">0<pos:position pos:line="42" pos:column="45"/></literal> <operator pos:line="42" pos:column="46">&amp;&amp;<pos:position pos:line="42" pos:column="56"/></operator> <call><name pos:line="42" pos:column="49">YAJL_IS_ARRAY<pos:position pos:line="42" pos:column="62"/></name><argument_list pos:line="42" pos:column="62">(<argument><expr><name><name pos:line="42" pos:column="63">array<pos:position pos:line="42" pos:column="68"/></name><index pos:line="42" pos:column="68">[<expr><literal type="number" pos:line="42" pos:column="69">1<pos:position pos:line="42" pos:column="70"/></literal></expr>]<pos:position pos:line="42" pos:column="71"/></index></name></expr></argument>)<pos:position pos:line="42" pos:column="72"/></argument_list></call></expr>)<pos:position pos:line="42" pos:column="73"/></condition><then pos:line="42" pos:column="73"> <block pos:line="42" pos:column="74">{
            <decl_stmt><decl><type><name pos:line="43" pos:column="13">yajl_val<pos:position pos:line="43" pos:column="21"/></name> <modifier pos:line="43" pos:column="22">*<pos:position pos:line="43" pos:column="23"/></modifier></type><name pos:line="43" pos:column="23">ports_arr<pos:position pos:line="43" pos:column="32"/></name> <init pos:line="43" pos:column="33">= <expr><call><name pos:line="43" pos:column="35">YAJL_GET_ARRAY<pos:position pos:line="43" pos:column="49"/></name><argument_list pos:line="43" pos:column="49">(<argument><expr><name><name pos:line="43" pos:column="50">array<pos:position pos:line="43" pos:column="55"/></name><index pos:line="43" pos:column="55">[<expr><literal type="number" pos:line="43" pos:column="56">1<pos:position pos:line="43" pos:column="57"/></literal></expr>]<pos:position pos:line="43" pos:column="58"/></index></name></expr></argument>)<pos:position pos:line="43" pos:column="59"/></argument_list></call><operator pos:line="43" pos:column="59">-&gt;<pos:position pos:line="43" pos:column="64"/></operator><name pos:line="43" pos:column="61">values<pos:position pos:line="43" pos:column="67"/></name></expr></init></decl>;<pos:position pos:line="43" pos:column="68"/></decl_stmt>
            <decl_stmt><decl><type><name pos:line="44" pos:column="13">size_t<pos:position pos:line="44" pos:column="19"/></name></type> <name pos:line="44" pos:column="20">ports_num<pos:position pos:line="44" pos:column="29"/></name> <init pos:line="44" pos:column="30">= <expr><call><name pos:line="44" pos:column="32">YAJL_GET_ARRAY<pos:position pos:line="44" pos:column="46"/></name><argument_list pos:line="44" pos:column="46">(<argument><expr><name><name pos:line="44" pos:column="47">array<pos:position pos:line="44" pos:column="52"/></name><index pos:line="44" pos:column="52">[<expr><literal type="number" pos:line="44" pos:column="53">1<pos:position pos:line="44" pos:column="54"/></literal></expr>]<pos:position pos:line="44" pos:column="55"/></index></name></expr></argument>)<pos:position pos:line="44" pos:column="56"/></argument_list></call><operator pos:line="44" pos:column="56">-&gt;<pos:position pos:line="44" pos:column="61"/></operator><name pos:line="44" pos:column="58">len<pos:position pos:line="44" pos:column="61"/></name></expr></init></decl>;<pos:position pos:line="44" pos:column="62"/></decl_stmt>
            <for pos:line="45" pos:column="13">for <control pos:line="45" pos:column="17">(<init><decl><type><name pos:line="45" pos:column="18">size_t<pos:position pos:line="45" pos:column="24"/></name></type> <name pos:line="45" pos:column="25">i<pos:position pos:line="45" pos:column="26"/></name> <init pos:line="45" pos:column="27">= <expr><literal type="number" pos:line="45" pos:column="29">0<pos:position pos:line="45" pos:column="30"/></literal></expr></init></decl>;<pos:position pos:line="45" pos:column="31"/></init> <condition><expr><name pos:line="45" pos:column="32">i<pos:position pos:line="45" pos:column="33"/></name> <operator pos:line="45" pos:column="34">&lt;<pos:position pos:line="45" pos:column="38"/></operator> <name pos:line="45" pos:column="36">ports_num<pos:position pos:line="45" pos:column="45"/></name> <operator pos:line="45" pos:column="46">&amp;&amp;<pos:position pos:line="45" pos:column="56"/></operator> <name pos:line="45" pos:column="49">ports_arr<pos:position pos:line="45" pos:column="58"/></name> <operator pos:line="45" pos:column="59">!=<pos:position pos:line="45" pos:column="61"/></operator> <name pos:line="45" pos:column="62">NULL<pos:position pos:line="45" pos:column="66"/></name></expr>;<pos:position pos:line="45" pos:column="67"/></condition> <incr><expr><name pos:line="45" pos:column="68">i<pos:position pos:line="45" pos:column="69"/></name><operator pos:line="45" pos:column="69">++<pos:position pos:line="45" pos:column="71"/></operator></expr></incr>)<pos:position pos:line="45" pos:column="72"/></control>
              <block type="pseudo"><expr_stmt><expr><call><name pos:line="46" pos:column="15">ovs_stats_new_port<pos:position pos:line="46" pos:column="33"/></name><argument_list pos:line="46" pos:column="33">(
                  <argument><expr><name pos:line="47" pos:column="19">br<pos:position pos:line="47" pos:column="21"/></name></expr></argument>, <argument><expr><call><name pos:line="47" pos:column="23">YAJL_GET_STRING<pos:position pos:line="47" pos:column="38"/></name><argument_list pos:line="47" pos:column="38">(<argument><expr><name><name pos:line="47" pos:column="39">ports_arr<pos:position pos:line="47" pos:column="48"/></name><index pos:line="47" pos:column="48">[<expr><name pos:line="47" pos:column="49">i<pos:position pos:line="47" pos:column="50"/></name></expr>]<pos:position pos:line="47" pos:column="51"/></index></name><operator pos:line="47" pos:column="51">-&gt;<pos:position pos:line="47" pos:column="56"/></operator><name><name pos:line="47" pos:column="53">u<pos:position pos:line="47" pos:column="54"/></name><operator pos:line="47" pos:column="54">.<pos:position pos:line="47" pos:column="55"/></operator><name pos:line="47" pos:column="55">array<pos:position pos:line="47" pos:column="60"/></name><operator pos:line="47" pos:column="60">.<pos:position pos:line="47" pos:column="61"/></operator><name pos:line="47" pos:column="61">values<pos:position pos:line="47" pos:column="67"/></name><index pos:line="47" pos:column="67">[<expr><literal type="number" pos:line="47" pos:column="68">1<pos:position pos:line="47" pos:column="69"/></literal></expr>]<pos:position pos:line="47" pos:column="70"/></index></name></expr></argument>)<pos:position pos:line="47" pos:column="71"/></argument_list></call></expr></argument>)<pos:position pos:line="47" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="73"/></expr_stmt></block></for>
          }<pos:position pos:line="48" pos:column="12"/></block></then></if>
        }<pos:position pos:line="49" pos:column="10"/></block></then> <else pos:line="49" pos:column="11">else
          <block type="pseudo"><expr_stmt><expr><call><name pos:line="50" pos:column="11">ovs_stats_new_port<pos:position pos:line="50" pos:column="29"/></name><argument_list pos:line="50" pos:column="29">(<argument><expr><name pos:line="50" pos:column="30">br<pos:position pos:line="50" pos:column="32"/></name></expr></argument>, <argument><expr><call><name pos:line="50" pos:column="34">YAJL_GET_STRING<pos:position pos:line="50" pos:column="49"/></name><argument_list pos:line="50" pos:column="49">(<argument><expr><name><name pos:line="50" pos:column="50">br_ports<pos:position pos:line="50" pos:column="58"/></name><operator pos:line="50" pos:column="58">-&gt;<pos:position pos:line="50" pos:column="63"/></operator><name pos:line="50" pos:column="60">u<pos:position pos:line="50" pos:column="61"/></name><operator pos:line="50" pos:column="61">.<pos:position pos:line="50" pos:column="62"/></operator><name pos:line="50" pos:column="62">array<pos:position pos:line="50" pos:column="67"/></name><operator pos:line="50" pos:column="67">.<pos:position pos:line="50" pos:column="68"/></operator><name pos:line="50" pos:column="68">values<pos:position pos:line="50" pos:column="74"/></name><index pos:line="50" pos:column="74">[<expr><literal type="number" pos:line="50" pos:column="75">1<pos:position pos:line="50" pos:column="76"/></literal></expr>]<pos:position pos:line="50" pos:column="77"/></index></name></expr></argument>)<pos:position pos:line="50" pos:column="78"/></argument_list></call></expr></argument>)<pos:position pos:line="50" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="80"/></expr_stmt></block></else></if>
      }<pos:position pos:line="51" pos:column="8"/></block></then></if>
    }<pos:position pos:line="52" pos:column="6"/></block></then></if>
  }<pos:position pos:line="53" pos:column="4"/></block></then> <else pos:line="53" pos:column="5">else <block pos:line="53" pos:column="10">{
    <expr_stmt><expr><call><name pos:line="54" pos:column="5">ERROR<pos:position pos:line="54" pos:column="10"/></name><argument_list pos:line="54" pos:column="10">(<argument><expr><literal type="string" pos:line="54" pos:column="11">"Incorrect JSON Bridge data"<pos:position pos:line="54" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="54" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="41"/></expr_stmt>
    <return pos:line="55" pos:column="5">return <expr><operator pos:line="55" pos:column="12">-<pos:position pos:line="55" pos:column="13"/></operator><literal type="number" pos:line="55" pos:column="13">1<pos:position pos:line="55" pos:column="14"/></literal></expr>;<pos:position pos:line="55" pos:column="15"/></return>
  }<pos:position pos:line="56" pos:column="4"/></block></else></if>
  <return pos:line="57" pos:column="3">return <expr><literal type="number" pos:line="57" pos:column="10">0<pos:position pos:line="57" pos:column="11"/></literal></expr>;<pos:position pos:line="57" pos:column="12"/></return>
}<pos:position pos:line="58" pos:column="2"/></block></function></unit>
