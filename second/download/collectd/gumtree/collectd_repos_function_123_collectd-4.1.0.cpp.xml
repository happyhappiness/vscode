<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_123_collectd-4.1.0.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">exec_read<pos:position pos:line="1" pos:column="21"/></name> <parameter_list pos:line="1" pos:column="22">(<parameter><decl><type><name pos:line="1" pos:column="23">void<pos:position pos:line="1" pos:column="27"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="28"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">program_list_t<pos:position pos:line="3" pos:column="17"/></name> <modifier pos:line="3" pos:column="18">*<pos:position pos:line="3" pos:column="19"/></modifier></type><name pos:line="3" pos:column="19">pl<pos:position pos:line="3" pos:column="21"/></name></decl>;<pos:position pos:line="3" pos:column="22"/></decl_stmt>

  <for pos:line="5" pos:column="3">for <control pos:line="5" pos:column="7">(<init><expr><name pos:line="5" pos:column="8">pl<pos:position pos:line="5" pos:column="10"/></name> <operator pos:line="5" pos:column="11">=<pos:position pos:line="5" pos:column="12"/></operator> <name pos:line="5" pos:column="13">pl_head<pos:position pos:line="5" pos:column="20"/></name></expr>;<pos:position pos:line="5" pos:column="21"/></init> <condition><expr><name pos:line="5" pos:column="22">pl<pos:position pos:line="5" pos:column="24"/></name> <operator pos:line="5" pos:column="25">!=<pos:position pos:line="5" pos:column="27"/></operator> <name pos:line="5" pos:column="28">NULL<pos:position pos:line="5" pos:column="32"/></name></expr>;<pos:position pos:line="5" pos:column="33"/></condition> <incr><expr><name pos:line="5" pos:column="34">pl<pos:position pos:line="5" pos:column="36"/></name> <operator pos:line="5" pos:column="37">=<pos:position pos:line="5" pos:column="38"/></operator> <name><name pos:line="5" pos:column="39">pl<pos:position pos:line="5" pos:column="41"/></name><operator pos:line="5" pos:column="41">-&gt;<pos:position pos:line="5" pos:column="46"/></operator><name pos:line="5" pos:column="43">next<pos:position pos:line="5" pos:column="47"/></name></name></expr></incr>)<pos:position pos:line="5" pos:column="48"/></control>
  <block pos:line="6" pos:column="3">{
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">pthread_t<pos:position pos:line="7" pos:column="14"/></name></type> <name pos:line="7" pos:column="15">t<pos:position pos:line="7" pos:column="16"/></name></decl>;<pos:position pos:line="7" pos:column="17"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">pthread_attr_t<pos:position pos:line="8" pos:column="19"/></name></type> <name pos:line="8" pos:column="20">attr<pos:position pos:line="8" pos:column="24"/></name></decl>;<pos:position pos:line="8" pos:column="25"/></decl_stmt>

    <if pos:line="10" pos:column="5">if <condition pos:line="10" pos:column="8">(<expr><name><name pos:line="10" pos:column="9">pl<pos:position pos:line="10" pos:column="11"/></name><operator pos:line="10" pos:column="11">-&gt;<pos:position pos:line="10" pos:column="16"/></operator><name pos:line="10" pos:column="13">pid<pos:position pos:line="10" pos:column="16"/></name></name> <operator pos:line="10" pos:column="17">!=<pos:position pos:line="10" pos:column="19"/></operator> <literal type="number" pos:line="10" pos:column="20">0<pos:position pos:line="10" pos:column="21"/></literal></expr>)<pos:position pos:line="10" pos:column="22"/></condition><then pos:line="10" pos:column="22">
      <block type="pseudo"><continue pos:line="11" pos:column="7">continue;<pos:position pos:line="11" pos:column="16"/></continue></block></then></if>

    <expr_stmt><expr><call><name pos:line="13" pos:column="5">pthread_attr_init<pos:position pos:line="13" pos:column="22"/></name> <argument_list pos:line="13" pos:column="23">(<argument><expr><operator pos:line="13" pos:column="24">&amp;<pos:position pos:line="13" pos:column="29"/></operator><name pos:line="13" pos:column="25">attr<pos:position pos:line="13" pos:column="29"/></name></expr></argument>)<pos:position pos:line="13" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="31"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="14" pos:column="5">pthread_attr_setdetachstate<pos:position pos:line="14" pos:column="32"/></name> <argument_list pos:line="14" pos:column="33">(<argument><expr><operator pos:line="14" pos:column="34">&amp;<pos:position pos:line="14" pos:column="39"/></operator><name pos:line="14" pos:column="35">attr<pos:position pos:line="14" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="41">PTHREAD_CREATE_DETACHED<pos:position pos:line="14" pos:column="64"/></name></expr></argument>)<pos:position pos:line="14" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="66"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="15" pos:column="5">pthread_create<pos:position pos:line="15" pos:column="19"/></name> <argument_list pos:line="15" pos:column="20">(<argument><expr><operator pos:line="15" pos:column="21">&amp;<pos:position pos:line="15" pos:column="26"/></operator><name pos:line="15" pos:column="22">t<pos:position pos:line="15" pos:column="23"/></name></expr></argument>, <argument><expr><operator pos:line="15" pos:column="25">&amp;<pos:position pos:line="15" pos:column="30"/></operator><name pos:line="15" pos:column="26">attr<pos:position pos:line="15" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="32">exec_read_one<pos:position pos:line="15" pos:column="45"/></name></expr></argument>, <argument><expr><operator pos:line="15" pos:column="47">(<pos:position pos:line="15" pos:column="48"/></operator><name pos:line="15" pos:column="48">void<pos:position pos:line="15" pos:column="52"/></name> <operator pos:line="15" pos:column="53">*<pos:position pos:line="15" pos:column="54"/></operator><operator pos:line="15" pos:column="54">)<pos:position pos:line="15" pos:column="55"/></operator> <name pos:line="15" pos:column="56">pl<pos:position pos:line="15" pos:column="58"/></name></expr></argument>)<pos:position pos:line="15" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="60"/></expr_stmt>
  }<pos:position pos:line="16" pos:column="4"/></block></for> <comment type="block" pos:line="16" pos:column="5">/* for (pl) */</comment>

  <return pos:line="18" pos:column="3">return <expr><operator pos:line="18" pos:column="10">(<pos:position pos:line="18" pos:column="11"/></operator><literal type="number" pos:line="18" pos:column="11">0<pos:position pos:line="18" pos:column="12"/></literal><operator pos:line="18" pos:column="12">)<pos:position pos:line="18" pos:column="13"/></operator></expr>;<pos:position pos:line="18" pos:column="14"/></return>
}<pos:position pos:line="19" pos:column="2"/></block></function></unit>
