<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1544_collectd-5.5.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">parse_keys<pos:position pos:line="1" pos:column="22"/></name> <parameter_list pos:line="1" pos:column="23">(<parameter><decl><type><name pos:line="1" pos:column="24">char<pos:position pos:line="1" pos:column="28"/></name> <modifier pos:line="1" pos:column="29">*<pos:position pos:line="1" pos:column="30"/></modifier></type><name pos:line="1" pos:column="30">buffer<pos:position pos:line="1" pos:column="36"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="38">size_t<pos:position pos:line="1" pos:column="44"/></name></type> <name pos:line="1" pos:column="45">buffer_size<pos:position pos:line="1" pos:column="56"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="58">const<pos:position pos:line="1" pos:column="63"/></specifier> <name pos:line="1" pos:column="64">char<pos:position pos:line="1" pos:column="68"/></name> <modifier pos:line="1" pos:column="69">*<pos:position pos:line="1" pos:column="70"/></modifier></type><name pos:line="1" pos:column="70">key_str<pos:position pos:line="1" pos:column="77"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="78"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">char<pos:position pos:line="3" pos:column="9"/></name></type> <name><name pos:line="3" pos:column="10">tmp<pos:position pos:line="3" pos:column="13"/></name><index pos:line="3" pos:column="13">[<expr><literal type="number" pos:line="3" pos:column="14">2<pos:position pos:line="3" pos:column="15"/></literal> <operator pos:line="3" pos:column="16">*<pos:position pos:line="3" pos:column="17"/></operator> <name pos:line="3" pos:column="18">buffer_size<pos:position pos:line="3" pos:column="29"/></name></expr>]<pos:position pos:line="3" pos:column="30"/></index></name></decl>;<pos:position pos:line="3" pos:column="31"/></decl_stmt>

    <if pos:line="5" pos:column="5">if <condition pos:line="5" pos:column="8">(<expr><name pos:line="5" pos:column="9">buffer<pos:position pos:line="5" pos:column="15"/></name> <operator pos:line="5" pos:column="16">==<pos:position pos:line="5" pos:column="18"/></operator> <name pos:line="5" pos:column="19">NULL<pos:position pos:line="5" pos:column="23"/></name> <operator pos:line="5" pos:column="24">||<pos:position pos:line="5" pos:column="26"/></operator> <name pos:line="5" pos:column="27">buffer_size<pos:position pos:line="5" pos:column="38"/></name> <operator pos:line="5" pos:column="39">==<pos:position pos:line="5" pos:column="41"/></operator> <literal type="number" pos:line="5" pos:column="42">0<pos:position pos:line="5" pos:column="43"/></literal> <operator pos:line="5" pos:column="44">||<pos:position pos:line="5" pos:column="46"/></operator> <name pos:line="5" pos:column="47">key_str<pos:position pos:line="5" pos:column="54"/></name> <operator pos:line="5" pos:column="55">==<pos:position pos:line="5" pos:column="57"/></operator> <name pos:line="5" pos:column="58">NULL<pos:position pos:line="5" pos:column="62"/></name> <operator pos:line="5" pos:column="63">||<pos:position pos:line="5" pos:column="65"/></operator> <call><name pos:line="5" pos:column="66">strlen<pos:position pos:line="5" pos:column="72"/></name> <argument_list pos:line="5" pos:column="73">(<argument><expr><name pos:line="5" pos:column="74">key_str<pos:position pos:line="5" pos:column="81"/></name></expr></argument>)<pos:position pos:line="5" pos:column="82"/></argument_list></call> <operator pos:line="5" pos:column="83">==<pos:position pos:line="5" pos:column="85"/></operator> <literal type="number" pos:line="5" pos:column="86">0<pos:position pos:line="5" pos:column="87"/></literal></expr>)<pos:position pos:line="5" pos:column="88"/></condition><then pos:line="5" pos:column="88">
        <block type="pseudo"><return pos:line="6" pos:column="9">return <expr><name pos:line="6" pos:column="16">EINVAL<pos:position pos:line="6" pos:column="22"/></name></expr>;<pos:position pos:line="6" pos:column="23"/></return></block></then></if>

    <if pos:line="8" pos:column="5">if <condition pos:line="8" pos:column="8">(<expr><operator pos:line="8" pos:column="9">(<pos:position pos:line="8" pos:column="10"/></operator><call><name pos:line="8" pos:column="10">count_parts<pos:position pos:line="8" pos:column="21"/></name> <argument_list pos:line="8" pos:column="22">(<argument><expr><name pos:line="8" pos:column="23">key_str<pos:position pos:line="8" pos:column="30"/></name></expr></argument>)<pos:position pos:line="8" pos:column="31"/></argument_list></call> <operator pos:line="8" pos:column="32">&gt;<pos:position pos:line="8" pos:column="36"/></operator> <literal type="number" pos:line="8" pos:column="34">2<pos:position pos:line="8" pos:column="35"/></literal><operator pos:line="8" pos:column="35">)<pos:position pos:line="8" pos:column="36"/></operator> <operator pos:line="8" pos:column="37">&amp;&amp;<pos:position pos:line="8" pos:column="47"/></operator> <call><name pos:line="8" pos:column="40">has_suffix<pos:position pos:line="8" pos:column="50"/></name> <argument_list pos:line="8" pos:column="51">(<argument><expr><name pos:line="8" pos:column="52">key_str<pos:position pos:line="8" pos:column="59"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="8" pos:column="61">".type"<pos:position pos:line="8" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="69"/></argument_list></call></expr>)<pos:position pos:line="8" pos:column="70"/></condition><then pos:line="8" pos:column="70">
    <block pos:line="9" pos:column="5">{
        <comment type="block" pos:line="10" pos:column="9">/* strip ".type" suffix iff the key has more than two parts. */</comment>
        <decl_stmt><decl><type><name pos:line="11" pos:column="9">size_t<pos:position pos:line="11" pos:column="15"/></name></type> <name pos:line="11" pos:column="16">sz<pos:position pos:line="11" pos:column="18"/></name> <init pos:line="11" pos:column="19">= <expr><call><name pos:line="11" pos:column="21">strlen<pos:position pos:line="11" pos:column="27"/></name> <argument_list pos:line="11" pos:column="28">(<argument><expr><name pos:line="11" pos:column="29">key_str<pos:position pos:line="11" pos:column="36"/></name></expr></argument>)<pos:position pos:line="11" pos:column="37"/></argument_list></call> <operator pos:line="11" pos:column="38">-<pos:position pos:line="11" pos:column="39"/></operator> <call><name pos:line="11" pos:column="40">strlen<pos:position pos:line="11" pos:column="46"/></name> <argument_list pos:line="11" pos:column="47">(<argument><expr><literal type="string" pos:line="11" pos:column="48">".type"<pos:position pos:line="11" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="56"/></argument_list></call> <operator pos:line="11" pos:column="57">+<pos:position pos:line="11" pos:column="58"/></operator> <literal type="number" pos:line="11" pos:column="59">1<pos:position pos:line="11" pos:column="60"/></literal></expr></init></decl>;<pos:position pos:line="11" pos:column="61"/></decl_stmt>

        <if pos:line="13" pos:column="9">if <condition pos:line="13" pos:column="12">(<expr><name pos:line="13" pos:column="13">sz<pos:position pos:line="13" pos:column="15"/></name> <operator pos:line="13" pos:column="16">&gt;<pos:position pos:line="13" pos:column="20"/></operator> <sizeof pos:line="13" pos:column="18">sizeof <argument_list pos:line="13" pos:column="25">(<argument><expr><name pos:line="13" pos:column="26">tmp<pos:position pos:line="13" pos:column="29"/></name></expr></argument>)<pos:position pos:line="13" pos:column="30"/></argument_list></sizeof></expr>)<pos:position pos:line="13" pos:column="31"/></condition><then pos:line="13" pos:column="31">
            <block type="pseudo"><expr_stmt><expr><name pos:line="14" pos:column="13">sz<pos:position pos:line="14" pos:column="15"/></name> <operator pos:line="14" pos:column="16">=<pos:position pos:line="14" pos:column="17"/></operator> <sizeof pos:line="14" pos:column="18">sizeof <argument_list pos:line="14" pos:column="25">(<argument><expr><name pos:line="14" pos:column="26">tmp<pos:position pos:line="14" pos:column="29"/></name></expr></argument>)<pos:position pos:line="14" pos:column="30"/></argument_list></sizeof></expr>;<pos:position pos:line="14" pos:column="31"/></expr_stmt></block></then></if>
        <expr_stmt><expr><call><name pos:line="15" pos:column="9">sstrncpy<pos:position pos:line="15" pos:column="17"/></name> <argument_list pos:line="15" pos:column="18">(<argument><expr><name pos:line="15" pos:column="19">tmp<pos:position pos:line="15" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="24">key_str<pos:position pos:line="15" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="33">sz<pos:position pos:line="15" pos:column="35"/></name></expr></argument>)<pos:position pos:line="15" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="37"/></expr_stmt>
    }<pos:position pos:line="16" pos:column="6"/></block></then>
    <else pos:line="17" pos:column="5">else
    <block pos:line="18" pos:column="5">{
        <expr_stmt><expr><call><name pos:line="19" pos:column="9">sstrncpy<pos:position pos:line="19" pos:column="17"/></name> <argument_list pos:line="19" pos:column="18">(<argument><expr><name pos:line="19" pos:column="19">tmp<pos:position pos:line="19" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="24">key_str<pos:position pos:line="19" pos:column="31"/></name></expr></argument>, <argument><expr><sizeof pos:line="19" pos:column="33">sizeof <argument_list pos:line="19" pos:column="40">(<argument><expr><name pos:line="19" pos:column="41">tmp<pos:position pos:line="19" pos:column="44"/></name></expr></argument>)<pos:position pos:line="19" pos:column="45"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="19" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="47"/></expr_stmt>
    }<pos:position pos:line="20" pos:column="6"/></block></else></if>

    <return pos:line="22" pos:column="5">return <expr><call><name pos:line="22" pos:column="12">compact_ds_name<pos:position pos:line="22" pos:column="27"/></name> <argument_list pos:line="22" pos:column="28">(<argument><expr><name pos:line="22" pos:column="29">buffer<pos:position pos:line="22" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="37">buffer_size<pos:position pos:line="22" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="50">tmp<pos:position pos:line="22" pos:column="53"/></name></expr></argument>)<pos:position pos:line="22" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="55"/></return>
}<pos:position pos:line="23" pos:column="2"/></block></function></unit>
