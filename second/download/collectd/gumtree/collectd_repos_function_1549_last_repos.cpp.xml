<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1549_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name><name pos:line="1" pos:column="8">struct<pos:position pos:line="1" pos:column="14"/></name> <name pos:line="1" pos:column="15">MHD_Daemon<pos:position pos:line="1" pos:column="25"/></name></name> <modifier pos:line="1" pos:column="26">*<pos:position pos:line="1" pos:column="27"/></modifier></type><name pos:line="1" pos:column="27">prom_start_daemon<pos:position pos:line="1" pos:column="44"/></name><parameter_list pos:line="1" pos:column="44">()<pos:position pos:line="1" pos:column="46"/></parameter_list> <block pos:line="1" pos:column="47">{
  <comment type="block" pos:line="2" pos:column="3">/* {{{ */</comment>
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">int<pos:position pos:line="3" pos:column="6"/></name></type> <name pos:line="3" pos:column="7">fd<pos:position pos:line="3" pos:column="9"/></name> <init pos:line="3" pos:column="10">= <expr><call><name pos:line="3" pos:column="12">prom_open_socket<pos:position pos:line="3" pos:column="28"/></name><argument_list pos:line="3" pos:column="28">(<argument><expr><name pos:line="3" pos:column="29">PF_INET6<pos:position pos:line="3" pos:column="37"/></name></expr></argument>)<pos:position pos:line="3" pos:column="38"/></argument_list></call></expr></init></decl>;<pos:position pos:line="3" pos:column="39"/></decl_stmt>
  <if pos:line="4" pos:column="3">if <condition pos:line="4" pos:column="6">(<expr><name pos:line="4" pos:column="7">fd<pos:position pos:line="4" pos:column="9"/></name> <operator pos:line="4" pos:column="10">==<pos:position pos:line="4" pos:column="12"/></operator> <operator pos:line="4" pos:column="13">-<pos:position pos:line="4" pos:column="14"/></operator><literal type="number" pos:line="4" pos:column="14">1<pos:position pos:line="4" pos:column="15"/></literal></expr>)<pos:position pos:line="4" pos:column="16"/></condition><then pos:line="4" pos:column="16">
    <block type="pseudo"><expr_stmt><expr><name pos:line="5" pos:column="5">fd<pos:position pos:line="5" pos:column="7"/></name> <operator pos:line="5" pos:column="8">=<pos:position pos:line="5" pos:column="9"/></operator> <call><name pos:line="5" pos:column="10">prom_open_socket<pos:position pos:line="5" pos:column="26"/></name><argument_list pos:line="5" pos:column="26">(<argument><expr><name pos:line="5" pos:column="27">PF_INET<pos:position pos:line="5" pos:column="34"/></name></expr></argument>)<pos:position pos:line="5" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="36"/></expr_stmt></block></then></if>
  <if pos:line="6" pos:column="3">if <condition pos:line="6" pos:column="6">(<expr><name pos:line="6" pos:column="7">fd<pos:position pos:line="6" pos:column="9"/></name> <operator pos:line="6" pos:column="10">==<pos:position pos:line="6" pos:column="12"/></operator> <operator pos:line="6" pos:column="13">-<pos:position pos:line="6" pos:column="14"/></operator><literal type="number" pos:line="6" pos:column="14">1<pos:position pos:line="6" pos:column="15"/></literal></expr>)<pos:position pos:line="6" pos:column="16"/></condition><then pos:line="6" pos:column="16"> <block pos:line="6" pos:column="17">{
    <expr_stmt><expr><call><name pos:line="7" pos:column="5">ERROR<pos:position pos:line="7" pos:column="10"/></name><argument_list pos:line="7" pos:column="10">(<argument><expr><literal type="string" pos:line="7" pos:column="11">"write_prometheus plugin: Opening a listening socket failed."<pos:position pos:line="7" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="74"/></expr_stmt>
    <return pos:line="8" pos:column="5">return <expr><name pos:line="8" pos:column="12">NULL<pos:position pos:line="8" pos:column="16"/></name></expr>;<pos:position pos:line="8" pos:column="17"/></return>
  }<pos:position pos:line="9" pos:column="4"/></block></then></if>

  <decl_stmt><decl><type><name><name pos:line="11" pos:column="3">struct<pos:position pos:line="11" pos:column="9"/></name> <name pos:line="11" pos:column="10">MHD_Daemon<pos:position pos:line="11" pos:column="20"/></name></name> <modifier pos:line="11" pos:column="21">*<pos:position pos:line="11" pos:column="22"/></modifier></type><name pos:line="11" pos:column="22">d<pos:position pos:line="11" pos:column="23"/></name> <init pos:line="11" pos:column="24">= <expr><call><name pos:line="11" pos:column="26">MHD_start_daemon<pos:position pos:line="11" pos:column="42"/></name><argument_list pos:line="11" pos:column="42">(
      <argument><expr><name pos:line="12" pos:column="7">MHD_USE_THREAD_PER_CONNECTION<pos:position pos:line="12" pos:column="36"/></name> <operator pos:line="12" pos:column="37">|<pos:position pos:line="12" pos:column="38"/></operator> <name pos:line="12" pos:column="39">MHD_USE_DEBUG<pos:position pos:line="12" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="54">httpd_port<pos:position pos:line="12" pos:column="64"/></name></expr></argument>,
      <comment type="block" pos:line="13" pos:column="7">/* MHD_AcceptPolicyCallback = */</comment> <argument><expr><name pos:line="13" pos:column="40">NULL<pos:position pos:line="13" pos:column="44"/></name></expr></argument>,
      <comment type="block" pos:line="14" pos:column="7">/* MHD_AcceptPolicyCallback arg = */</comment> <argument><expr><name pos:line="14" pos:column="44">NULL<pos:position pos:line="14" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="50">http_handler<pos:position pos:line="14" pos:column="62"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="64">NULL<pos:position pos:line="14" pos:column="68"/></name></expr></argument>,
      <argument><expr><name pos:line="15" pos:column="7">MHD_OPTION_LISTEN_SOCKET<pos:position pos:line="15" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="33">fd<pos:position pos:line="15" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="37">MHD_OPTION_EXTERNAL_LOGGER<pos:position pos:line="15" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="65">prom_logger<pos:position pos:line="15" pos:column="76"/></name></expr></argument>,
      <argument><expr><name pos:line="16" pos:column="7">NULL<pos:position pos:line="16" pos:column="11"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="13">MHD_OPTION_END<pos:position pos:line="16" pos:column="27"/></name></expr></argument>)<pos:position pos:line="16" pos:column="28"/></argument_list></call></expr></init></decl>;<pos:position pos:line="16" pos:column="29"/></decl_stmt>
  <if pos:line="17" pos:column="3">if <condition pos:line="17" pos:column="6">(<expr><name pos:line="17" pos:column="7">d<pos:position pos:line="17" pos:column="8"/></name> <operator pos:line="17" pos:column="9">==<pos:position pos:line="17" pos:column="11"/></operator> <name pos:line="17" pos:column="12">NULL<pos:position pos:line="17" pos:column="16"/></name></expr>)<pos:position pos:line="17" pos:column="17"/></condition><then pos:line="17" pos:column="17"> <block pos:line="17" pos:column="18">{
    <expr_stmt><expr><call><name pos:line="18" pos:column="5">ERROR<pos:position pos:line="18" pos:column="10"/></name><argument_list pos:line="18" pos:column="10">(<argument><expr><literal type="string" pos:line="18" pos:column="11">"write_prometheus plugin: MHD_start_daemon() failed."<pos:position pos:line="18" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="66"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="19" pos:column="5">close<pos:position pos:line="19" pos:column="10"/></name><argument_list pos:line="19" pos:column="10">(<argument><expr><name pos:line="19" pos:column="11">fd<pos:position pos:line="19" pos:column="13"/></name></expr></argument>)<pos:position pos:line="19" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="15"/></expr_stmt>
    <return pos:line="20" pos:column="5">return <expr><name pos:line="20" pos:column="12">NULL<pos:position pos:line="20" pos:column="16"/></name></expr>;<pos:position pos:line="20" pos:column="17"/></return>
  }<pos:position pos:line="21" pos:column="4"/></block></then></if>

  <return pos:line="23" pos:column="3">return <expr><name pos:line="23" pos:column="10">d<pos:position pos:line="23" pos:column="11"/></name></expr>;<pos:position pos:line="23" pos:column="12"/></return>
}<pos:position pos:line="24" pos:column="2"/></block></function></unit>
