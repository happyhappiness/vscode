<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/gumtree/collectd_repos_function_1709_collectd-5.6.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">wh_write_command<pos:position pos:line="1" pos:column="28"/></name><parameter_list pos:line="1" pos:column="28">(<parameter><decl><type><specifier pos:line="1" pos:column="29">const<pos:position pos:line="1" pos:column="34"/></specifier> <name pos:line="1" pos:column="35">data_set_t<pos:position pos:line="1" pos:column="45"/></name> <modifier pos:line="1" pos:column="46">*<pos:position pos:line="1" pos:column="47"/></modifier></type><name pos:line="1" pos:column="47">ds<pos:position pos:line="1" pos:column="49"/></name></decl></parameter>,
                            <parameter><decl><type><specifier pos:line="2" pos:column="29">const<pos:position pos:line="2" pos:column="34"/></specifier> <name pos:line="2" pos:column="35">value_list_t<pos:position pos:line="2" pos:column="47"/></name> <modifier pos:line="2" pos:column="48">*<pos:position pos:line="2" pos:column="49"/></modifier></type><name pos:line="2" pos:column="49">vl<pos:position pos:line="2" pos:column="51"/></name></decl></parameter>, <comment type="block" pos:line="2" pos:column="53">/* {{{ */</comment>
                            <parameter><decl><type><name pos:line="3" pos:column="29">wh_callback_t<pos:position pos:line="3" pos:column="42"/></name> <modifier pos:line="3" pos:column="43">*<pos:position pos:line="3" pos:column="44"/></modifier></type><name pos:line="3" pos:column="44">cb<pos:position pos:line="3" pos:column="46"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="47"/></parameter_list> <block pos:line="3" pos:column="48">{
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">char<pos:position pos:line="4" pos:column="7"/></name></type> <name><name pos:line="4" pos:column="8">key<pos:position pos:line="4" pos:column="11"/></name><index pos:line="4" pos:column="11">[<expr><literal type="number" pos:line="4" pos:column="12">10<pos:position pos:line="4" pos:column="14"/></literal> <operator pos:line="4" pos:column="15">*<pos:position pos:line="4" pos:column="16"/></operator> <name pos:line="4" pos:column="17">DATA_MAX_NAME_LEN<pos:position pos:line="4" pos:column="34"/></name></expr>]<pos:position pos:line="4" pos:column="35"/></index></name></decl>;<pos:position pos:line="4" pos:column="36"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">char<pos:position pos:line="5" pos:column="7"/></name></type> <name><name pos:line="5" pos:column="8">values<pos:position pos:line="5" pos:column="14"/></name><index pos:line="5" pos:column="14">[<expr><literal type="number" pos:line="5" pos:column="15">512<pos:position pos:line="5" pos:column="18"/></literal></expr>]<pos:position pos:line="5" pos:column="19"/></index></name></decl>;<pos:position pos:line="5" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">char<pos:position pos:line="6" pos:column="7"/></name></type> <name><name pos:line="6" pos:column="8">command<pos:position pos:line="6" pos:column="15"/></name><index pos:line="6" pos:column="15">[<expr><literal type="number" pos:line="6" pos:column="16">1024<pos:position pos:line="6" pos:column="20"/></literal></expr>]<pos:position pos:line="6" pos:column="21"/></index></name></decl>;<pos:position pos:line="6" pos:column="22"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">size_t<pos:position pos:line="7" pos:column="9"/></name></type> <name pos:line="7" pos:column="10">command_len<pos:position pos:line="7" pos:column="21"/></name></decl>;<pos:position pos:line="7" pos:column="22"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="9" pos:column="3">int<pos:position pos:line="9" pos:column="6"/></name></type> <name pos:line="9" pos:column="7">status<pos:position pos:line="9" pos:column="13"/></name></decl>;<pos:position pos:line="9" pos:column="14"/></decl_stmt>

  <comment type="block" pos:line="11" pos:column="3">/* sanity checks, primarily to make static analyzers happy. */</comment>
  <if pos:line="12" pos:column="3">if <condition pos:line="12" pos:column="6">(<expr><operator pos:line="12" pos:column="7">(<pos:position pos:line="12" pos:column="8"/></operator><name pos:line="12" pos:column="8">cb<pos:position pos:line="12" pos:column="10"/></name> <operator pos:line="12" pos:column="11">==<pos:position pos:line="12" pos:column="13"/></operator> <name pos:line="12" pos:column="14">NULL<pos:position pos:line="12" pos:column="18"/></name><operator pos:line="12" pos:column="18">)<pos:position pos:line="12" pos:column="19"/></operator> <operator pos:line="12" pos:column="20">||<pos:position pos:line="12" pos:column="22"/></operator> <operator pos:line="12" pos:column="23">(<pos:position pos:line="12" pos:column="24"/></operator><name><name pos:line="12" pos:column="24">cb<pos:position pos:line="12" pos:column="26"/></name><operator pos:line="12" pos:column="26">-&gt;<pos:position pos:line="12" pos:column="31"/></operator><name pos:line="12" pos:column="28">send_buffer<pos:position pos:line="12" pos:column="39"/></name></name> <operator pos:line="12" pos:column="40">==<pos:position pos:line="12" pos:column="42"/></operator> <name pos:line="12" pos:column="43">NULL<pos:position pos:line="12" pos:column="47"/></name><operator pos:line="12" pos:column="47">)<pos:position pos:line="12" pos:column="48"/></operator></expr>)<pos:position pos:line="12" pos:column="49"/></condition><then pos:line="12" pos:column="49">
    <block type="pseudo"><return pos:line="13" pos:column="5">return <expr><operator pos:line="13" pos:column="12">-<pos:position pos:line="13" pos:column="13"/></operator><literal type="number" pos:line="13" pos:column="13">1<pos:position pos:line="13" pos:column="14"/></literal></expr>;<pos:position pos:line="13" pos:column="15"/></return></block></then></if>

  <if pos:line="15" pos:column="3">if <condition pos:line="15" pos:column="6">(<expr><call><name pos:line="15" pos:column="7">strcmp<pos:position pos:line="15" pos:column="13"/></name><argument_list pos:line="15" pos:column="13">(<argument><expr><name><name pos:line="15" pos:column="14">ds<pos:position pos:line="15" pos:column="16"/></name><operator pos:line="15" pos:column="16">-&gt;<pos:position pos:line="15" pos:column="21"/></operator><name pos:line="15" pos:column="18">type<pos:position pos:line="15" pos:column="22"/></name></name></expr></argument>, <argument><expr><name><name pos:line="15" pos:column="24">vl<pos:position pos:line="15" pos:column="26"/></name><operator pos:line="15" pos:column="26">-&gt;<pos:position pos:line="15" pos:column="31"/></operator><name pos:line="15" pos:column="28">type<pos:position pos:line="15" pos:column="32"/></name></name></expr></argument>)<pos:position pos:line="15" pos:column="33"/></argument_list></call> <operator pos:line="15" pos:column="34">!=<pos:position pos:line="15" pos:column="36"/></operator> <literal type="number" pos:line="15" pos:column="37">0<pos:position pos:line="15" pos:column="38"/></literal></expr>)<pos:position pos:line="15" pos:column="39"/></condition><then pos:line="15" pos:column="39"> <block pos:line="15" pos:column="40">{
    <expr_stmt><expr><call><name pos:line="16" pos:column="5">ERROR<pos:position pos:line="16" pos:column="10"/></name><argument_list pos:line="16" pos:column="10">(<argument><expr><literal type="string" pos:line="16" pos:column="11">"write_http plugin: DS type does not match "<pos:position pos:line="16" pos:column="55"/></literal>
          <literal type="string" pos:line="17" pos:column="11">"value list type"<pos:position pos:line="17" pos:column="28"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="30"/></expr_stmt>
    <return pos:line="18" pos:column="5">return <expr><operator pos:line="18" pos:column="12">-<pos:position pos:line="18" pos:column="13"/></operator><literal type="number" pos:line="18" pos:column="13">1<pos:position pos:line="18" pos:column="14"/></literal></expr>;<pos:position pos:line="18" pos:column="15"/></return>
  }<pos:position pos:line="19" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="21" pos:column="3">/* Copy the identifier to `key' and escape it. */</comment>
  <expr_stmt><expr><name pos:line="22" pos:column="3">status<pos:position pos:line="22" pos:column="9"/></name> <operator pos:line="22" pos:column="10">=<pos:position pos:line="22" pos:column="11"/></operator> <call><name pos:line="22" pos:column="12">FORMAT_VL<pos:position pos:line="22" pos:column="21"/></name><argument_list pos:line="22" pos:column="21">(<argument><expr><name pos:line="22" pos:column="22">key<pos:position pos:line="22" pos:column="25"/></name></expr></argument>, <argument><expr><sizeof pos:line="22" pos:column="27">sizeof<argument_list pos:line="22" pos:column="33">(<argument><expr><name pos:line="22" pos:column="34">key<pos:position pos:line="22" pos:column="37"/></name></expr></argument>)<pos:position pos:line="22" pos:column="38"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="22" pos:column="40">vl<pos:position pos:line="22" pos:column="42"/></name></expr></argument>)<pos:position pos:line="22" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="44"/></expr_stmt>
  <if pos:line="23" pos:column="3">if <condition pos:line="23" pos:column="6">(<expr><name pos:line="23" pos:column="7">status<pos:position pos:line="23" pos:column="13"/></name> <operator pos:line="23" pos:column="14">!=<pos:position pos:line="23" pos:column="16"/></operator> <literal type="number" pos:line="23" pos:column="17">0<pos:position pos:line="23" pos:column="18"/></literal></expr>)<pos:position pos:line="23" pos:column="19"/></condition><then pos:line="23" pos:column="19"> <block pos:line="23" pos:column="20">{
    <expr_stmt><expr><call><name pos:line="24" pos:column="5">ERROR<pos:position pos:line="24" pos:column="10"/></name><argument_list pos:line="24" pos:column="10">(<argument><expr><literal type="string" pos:line="24" pos:column="11">"write_http plugin: error with format_name"<pos:position pos:line="24" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="56"/></expr_stmt>
    <return pos:line="25" pos:column="5">return <expr><operator pos:line="25" pos:column="12">(<pos:position pos:line="25" pos:column="13"/></operator><name pos:line="25" pos:column="13">status<pos:position pos:line="25" pos:column="19"/></name><operator pos:line="25" pos:column="19">)<pos:position pos:line="25" pos:column="20"/></operator></expr>;<pos:position pos:line="25" pos:column="21"/></return>
  }<pos:position pos:line="26" pos:column="4"/></block></then></if>
  <expr_stmt><expr><call><name pos:line="27" pos:column="3">escape_string<pos:position pos:line="27" pos:column="16"/></name><argument_list pos:line="27" pos:column="16">(<argument><expr><name pos:line="27" pos:column="17">key<pos:position pos:line="27" pos:column="20"/></name></expr></argument>, <argument><expr><sizeof pos:line="27" pos:column="22">sizeof<argument_list pos:line="27" pos:column="28">(<argument><expr><name pos:line="27" pos:column="29">key<pos:position pos:line="27" pos:column="32"/></name></expr></argument>)<pos:position pos:line="27" pos:column="33"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="27" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="35"/></expr_stmt>

  <comment type="block" pos:line="29" pos:column="3">/* Convert the values to an ASCII representation and put that into
   * `values'. */</comment>
  <expr_stmt><expr><name pos:line="31" pos:column="3">status<pos:position pos:line="31" pos:column="9"/></name> <operator pos:line="31" pos:column="10">=<pos:position pos:line="31" pos:column="11"/></operator> <call><name pos:line="31" pos:column="12">format_values<pos:position pos:line="31" pos:column="25"/></name><argument_list pos:line="31" pos:column="25">(<argument><expr><name pos:line="31" pos:column="26">values<pos:position pos:line="31" pos:column="32"/></name></expr></argument>, <argument><expr><sizeof pos:line="31" pos:column="34">sizeof<argument_list pos:line="31" pos:column="40">(<argument><expr><name pos:line="31" pos:column="41">values<pos:position pos:line="31" pos:column="47"/></name></expr></argument>)<pos:position pos:line="31" pos:column="48"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="31" pos:column="50">ds<pos:position pos:line="31" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="54">vl<pos:position pos:line="31" pos:column="56"/></name></expr></argument>, <argument><expr><name><name pos:line="31" pos:column="58">cb<pos:position pos:line="31" pos:column="60"/></name><operator pos:line="31" pos:column="60">-&gt;<pos:position pos:line="31" pos:column="65"/></operator><name pos:line="31" pos:column="62">store_rates<pos:position pos:line="31" pos:column="73"/></name></name></expr></argument>)<pos:position pos:line="31" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="75"/></expr_stmt>
  <if pos:line="32" pos:column="3">if <condition pos:line="32" pos:column="6">(<expr><name pos:line="32" pos:column="7">status<pos:position pos:line="32" pos:column="13"/></name> <operator pos:line="32" pos:column="14">!=<pos:position pos:line="32" pos:column="16"/></operator> <literal type="number" pos:line="32" pos:column="17">0<pos:position pos:line="32" pos:column="18"/></literal></expr>)<pos:position pos:line="32" pos:column="19"/></condition><then pos:line="32" pos:column="19"> <block pos:line="32" pos:column="20">{
    <expr_stmt><expr><call><name pos:line="33" pos:column="5">ERROR<pos:position pos:line="33" pos:column="10"/></name><argument_list pos:line="33" pos:column="10">(<argument><expr><literal type="string" pos:line="33" pos:column="11">"write_http plugin: error with "<pos:position pos:line="33" pos:column="43"/></literal>
          <literal type="string" pos:line="34" pos:column="11">"wh_value_list_to_string"<pos:position pos:line="34" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="38"/></expr_stmt>
    <return pos:line="35" pos:column="5">return <expr><operator pos:line="35" pos:column="12">(<pos:position pos:line="35" pos:column="13"/></operator><name pos:line="35" pos:column="13">status<pos:position pos:line="35" pos:column="19"/></name><operator pos:line="35" pos:column="19">)<pos:position pos:line="35" pos:column="20"/></operator></expr>;<pos:position pos:line="35" pos:column="21"/></return>
  }<pos:position pos:line="36" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="38" pos:column="3">command_len<pos:position pos:line="38" pos:column="14"/></name> <operator pos:line="38" pos:column="15">=<pos:position pos:line="38" pos:column="16"/></operator> <operator pos:line="38" pos:column="17">(<pos:position pos:line="38" pos:column="18"/></operator><name pos:line="38" pos:column="18">size_t<pos:position pos:line="38" pos:column="24"/></name><operator pos:line="38" pos:column="24">)<pos:position pos:line="38" pos:column="25"/></operator><call><name pos:line="38" pos:column="25">ssnprintf<pos:position pos:line="38" pos:column="34"/></name><argument_list pos:line="38" pos:column="34">(<argument><expr><name pos:line="38" pos:column="35">command<pos:position pos:line="38" pos:column="42"/></name></expr></argument>, <argument><expr><sizeof pos:line="38" pos:column="44">sizeof<argument_list pos:line="38" pos:column="50">(<argument><expr><name pos:line="38" pos:column="51">command<pos:position pos:line="38" pos:column="58"/></name></expr></argument>)<pos:position pos:line="38" pos:column="59"/></argument_list></sizeof></expr></argument>,
                                  <argument><expr><literal type="string" pos:line="39" pos:column="35">"PUTVAL %s interval=%.3f %s\r\n"<pos:position pos:line="39" pos:column="67"/></literal></expr></argument>, <argument><expr><name pos:line="39" pos:column="69">key<pos:position pos:line="39" pos:column="72"/></name></expr></argument>,
                                  <argument><expr><call><name pos:line="40" pos:column="35">CDTIME_T_TO_DOUBLE<pos:position pos:line="40" pos:column="53"/></name><argument_list pos:line="40" pos:column="53">(<argument><expr><name><name pos:line="40" pos:column="54">vl<pos:position pos:line="40" pos:column="56"/></name><operator pos:line="40" pos:column="56">-&gt;<pos:position pos:line="40" pos:column="61"/></operator><name pos:line="40" pos:column="58">interval<pos:position pos:line="40" pos:column="66"/></name></name></expr></argument>)<pos:position pos:line="40" pos:column="67"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="40" pos:column="69">values<pos:position pos:line="40" pos:column="75"/></name></expr></argument>)<pos:position pos:line="40" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="77"/></expr_stmt>
  <if pos:line="41" pos:column="3">if <condition pos:line="41" pos:column="6">(<expr><name pos:line="41" pos:column="7">command_len<pos:position pos:line="41" pos:column="18"/></name> <operator pos:line="41" pos:column="19">&gt;=<pos:position pos:line="41" pos:column="24"/></operator> <sizeof pos:line="41" pos:column="22">sizeof<argument_list pos:line="41" pos:column="28">(<argument><expr><name pos:line="41" pos:column="29">command<pos:position pos:line="41" pos:column="36"/></name></expr></argument>)<pos:position pos:line="41" pos:column="37"/></argument_list></sizeof></expr>)<pos:position pos:line="41" pos:column="38"/></condition><then pos:line="41" pos:column="38"> <block pos:line="41" pos:column="39">{
    <expr_stmt><expr><call><name pos:line="42" pos:column="5">ERROR<pos:position pos:line="42" pos:column="10"/></name><argument_list pos:line="42" pos:column="10">(<argument><expr><literal type="string" pos:line="42" pos:column="11">"write_http plugin: Command buffer too small: "<pos:position pos:line="42" pos:column="58"/></literal>
          <literal type="string" pos:line="43" pos:column="11">"Need %zu bytes."<pos:position pos:line="43" pos:column="28"/></literal></expr></argument>,
          <argument><expr><name pos:line="44" pos:column="11">command_len<pos:position pos:line="44" pos:column="22"/></name> <operator pos:line="44" pos:column="23">+<pos:position pos:line="44" pos:column="24"/></operator> <literal type="number" pos:line="44" pos:column="25">1<pos:position pos:line="44" pos:column="26"/></literal></expr></argument>)<pos:position pos:line="44" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="28"/></expr_stmt>
    <return pos:line="45" pos:column="5">return <expr><operator pos:line="45" pos:column="12">(<pos:position pos:line="45" pos:column="13"/></operator><operator pos:line="45" pos:column="13">-<pos:position pos:line="45" pos:column="14"/></operator><literal type="number" pos:line="45" pos:column="14">1<pos:position pos:line="45" pos:column="15"/></literal><operator pos:line="45" pos:column="15">)<pos:position pos:line="45" pos:column="16"/></operator></expr>;<pos:position pos:line="45" pos:column="17"/></return>
  }<pos:position pos:line="46" pos:column="4"/></block></then></if>

  <expr_stmt><expr><call><name pos:line="48" pos:column="3">pthread_mutex_lock<pos:position pos:line="48" pos:column="21"/></name><argument_list pos:line="48" pos:column="21">(<argument><expr><operator pos:line="48" pos:column="22">&amp;<pos:position pos:line="48" pos:column="27"/></operator><name><name pos:line="48" pos:column="23">cb<pos:position pos:line="48" pos:column="25"/></name><operator pos:line="48" pos:column="25">-&gt;<pos:position pos:line="48" pos:column="30"/></operator><name pos:line="48" pos:column="27">send_lock<pos:position pos:line="48" pos:column="36"/></name></name></expr></argument>)<pos:position pos:line="48" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="38"/></expr_stmt>
  <if pos:line="49" pos:column="3">if <condition pos:line="49" pos:column="6">(<expr><call><name pos:line="49" pos:column="7">wh_callback_init<pos:position pos:line="49" pos:column="23"/></name><argument_list pos:line="49" pos:column="23">(<argument><expr><name pos:line="49" pos:column="24">cb<pos:position pos:line="49" pos:column="26"/></name></expr></argument>)<pos:position pos:line="49" pos:column="27"/></argument_list></call> <operator pos:line="49" pos:column="28">!=<pos:position pos:line="49" pos:column="30"/></operator> <literal type="number" pos:line="49" pos:column="31">0<pos:position pos:line="49" pos:column="32"/></literal></expr>)<pos:position pos:line="49" pos:column="33"/></condition><then pos:line="49" pos:column="33"> <block pos:line="49" pos:column="34">{
    <expr_stmt><expr><call><name pos:line="50" pos:column="5">ERROR<pos:position pos:line="50" pos:column="10"/></name><argument_list pos:line="50" pos:column="10">(<argument><expr><literal type="string" pos:line="50" pos:column="11">"write_http plugin: wh_callback_init failed."<pos:position pos:line="50" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="50" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="58"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="51" pos:column="5">pthread_mutex_unlock<pos:position pos:line="51" pos:column="25"/></name><argument_list pos:line="51" pos:column="25">(<argument><expr><operator pos:line="51" pos:column="26">&amp;<pos:position pos:line="51" pos:column="31"/></operator><name><name pos:line="51" pos:column="27">cb<pos:position pos:line="51" pos:column="29"/></name><operator pos:line="51" pos:column="29">-&gt;<pos:position pos:line="51" pos:column="34"/></operator><name pos:line="51" pos:column="31">send_lock<pos:position pos:line="51" pos:column="40"/></name></name></expr></argument>)<pos:position pos:line="51" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="42"/></expr_stmt>
    <return pos:line="52" pos:column="5">return <expr><operator pos:line="52" pos:column="12">(<pos:position pos:line="52" pos:column="13"/></operator><operator pos:line="52" pos:column="13">-<pos:position pos:line="52" pos:column="14"/></operator><literal type="number" pos:line="52" pos:column="14">1<pos:position pos:line="52" pos:column="15"/></literal><operator pos:line="52" pos:column="15">)<pos:position pos:line="52" pos:column="16"/></operator></expr>;<pos:position pos:line="52" pos:column="17"/></return>
  }<pos:position pos:line="53" pos:column="4"/></block></then></if>

  <if pos:line="55" pos:column="3">if <condition pos:line="55" pos:column="6">(<expr><name pos:line="55" pos:column="7">command_len<pos:position pos:line="55" pos:column="18"/></name> <operator pos:line="55" pos:column="19">&gt;=<pos:position pos:line="55" pos:column="24"/></operator> <name><name pos:line="55" pos:column="22">cb<pos:position pos:line="55" pos:column="24"/></name><operator pos:line="55" pos:column="24">-&gt;<pos:position pos:line="55" pos:column="29"/></operator><name pos:line="55" pos:column="26">send_buffer_free<pos:position pos:line="55" pos:column="42"/></name></name></expr>)<pos:position pos:line="55" pos:column="43"/></condition><then pos:line="55" pos:column="43"> <block pos:line="55" pos:column="44">{
    <expr_stmt><expr><name pos:line="56" pos:column="5">status<pos:position pos:line="56" pos:column="11"/></name> <operator pos:line="56" pos:column="12">=<pos:position pos:line="56" pos:column="13"/></operator> <call><name pos:line="56" pos:column="14">wh_flush_nolock<pos:position pos:line="56" pos:column="29"/></name><argument_list pos:line="56" pos:column="29">(<comment type="block" pos:line="56" pos:column="30">/* timeout = */</comment> <argument><expr><literal type="number" pos:line="56" pos:column="46">0<pos:position pos:line="56" pos:column="47"/></literal></expr></argument>, <argument><expr><name pos:line="56" pos:column="49">cb<pos:position pos:line="56" pos:column="51"/></name></expr></argument>)<pos:position pos:line="56" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="53"/></expr_stmt>
    <if pos:line="57" pos:column="5">if <condition pos:line="57" pos:column="8">(<expr><name pos:line="57" pos:column="9">status<pos:position pos:line="57" pos:column="15"/></name> <operator pos:line="57" pos:column="16">!=<pos:position pos:line="57" pos:column="18"/></operator> <literal type="number" pos:line="57" pos:column="19">0<pos:position pos:line="57" pos:column="20"/></literal></expr>)<pos:position pos:line="57" pos:column="21"/></condition><then pos:line="57" pos:column="21"> <block pos:line="57" pos:column="22">{
      <expr_stmt><expr><call><name pos:line="58" pos:column="7">pthread_mutex_unlock<pos:position pos:line="58" pos:column="27"/></name><argument_list pos:line="58" pos:column="27">(<argument><expr><operator pos:line="58" pos:column="28">&amp;<pos:position pos:line="58" pos:column="33"/></operator><name><name pos:line="58" pos:column="29">cb<pos:position pos:line="58" pos:column="31"/></name><operator pos:line="58" pos:column="31">-&gt;<pos:position pos:line="58" pos:column="36"/></operator><name pos:line="58" pos:column="33">send_lock<pos:position pos:line="58" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="58" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="44"/></expr_stmt>
      <return pos:line="59" pos:column="7">return <expr><operator pos:line="59" pos:column="14">(<pos:position pos:line="59" pos:column="15"/></operator><name pos:line="59" pos:column="15">status<pos:position pos:line="59" pos:column="21"/></name><operator pos:line="59" pos:column="21">)<pos:position pos:line="59" pos:column="22"/></operator></expr>;<pos:position pos:line="59" pos:column="23"/></return>
    }<pos:position pos:line="60" pos:column="6"/></block></then></if>
  }<pos:position pos:line="61" pos:column="4"/></block></then></if>
  <expr_stmt><expr><call><name pos:line="62" pos:column="3">assert<pos:position pos:line="62" pos:column="9"/></name><argument_list pos:line="62" pos:column="9">(<argument><expr><name pos:line="62" pos:column="10">command_len<pos:position pos:line="62" pos:column="21"/></name> <operator pos:line="62" pos:column="22">&lt;<pos:position pos:line="62" pos:column="26"/></operator> <name><name pos:line="62" pos:column="24">cb<pos:position pos:line="62" pos:column="26"/></name><operator pos:line="62" pos:column="26">-&gt;<pos:position pos:line="62" pos:column="31"/></operator><name pos:line="62" pos:column="28">send_buffer_free<pos:position pos:line="62" pos:column="44"/></name></name></expr></argument>)<pos:position pos:line="62" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="46"/></expr_stmt>

  <comment type="block" pos:line="64" pos:column="3">/* `command_len + 1' because `command_len' does not include the
   * trailing null byte. Neither does `send_buffer_fill'. */</comment>
  <expr_stmt><expr><call><name pos:line="66" pos:column="3">memcpy<pos:position pos:line="66" pos:column="9"/></name><argument_list pos:line="66" pos:column="9">(<argument><expr><name><name pos:line="66" pos:column="10">cb<pos:position pos:line="66" pos:column="12"/></name><operator pos:line="66" pos:column="12">-&gt;<pos:position pos:line="66" pos:column="17"/></operator><name pos:line="66" pos:column="14">send_buffer<pos:position pos:line="66" pos:column="25"/></name></name> <operator pos:line="66" pos:column="26">+<pos:position pos:line="66" pos:column="27"/></operator> <name><name pos:line="66" pos:column="28">cb<pos:position pos:line="66" pos:column="30"/></name><operator pos:line="66" pos:column="30">-&gt;<pos:position pos:line="66" pos:column="35"/></operator><name pos:line="66" pos:column="32">send_buffer_fill<pos:position pos:line="66" pos:column="48"/></name></name></expr></argument>, <argument><expr><name pos:line="66" pos:column="50">command<pos:position pos:line="66" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="66" pos:column="59">command_len<pos:position pos:line="66" pos:column="70"/></name> <operator pos:line="66" pos:column="71">+<pos:position pos:line="66" pos:column="72"/></operator> <literal type="number" pos:line="66" pos:column="73">1<pos:position pos:line="66" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="66" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="76"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="67" pos:column="3">cb<pos:position pos:line="67" pos:column="5"/></name><operator pos:line="67" pos:column="5">-&gt;<pos:position pos:line="67" pos:column="10"/></operator><name pos:line="67" pos:column="7">send_buffer_fill<pos:position pos:line="67" pos:column="23"/></name></name> <operator pos:line="67" pos:column="24">+=<pos:position pos:line="67" pos:column="26"/></operator> <name pos:line="67" pos:column="27">command_len<pos:position pos:line="67" pos:column="38"/></name></expr>;<pos:position pos:line="67" pos:column="39"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="68" pos:column="3">cb<pos:position pos:line="68" pos:column="5"/></name><operator pos:line="68" pos:column="5">-&gt;<pos:position pos:line="68" pos:column="10"/></operator><name pos:line="68" pos:column="7">send_buffer_free<pos:position pos:line="68" pos:column="23"/></name></name> <operator pos:line="68" pos:column="24">-=<pos:position pos:line="68" pos:column="26"/></operator> <name pos:line="68" pos:column="27">command_len<pos:position pos:line="68" pos:column="38"/></name></expr>;<pos:position pos:line="68" pos:column="39"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="70" pos:column="3">DEBUG<pos:position pos:line="70" pos:column="8"/></name><argument_list pos:line="70" pos:column="8">(<argument><expr><literal type="string" pos:line="70" pos:column="9">"write_http plugin: &lt;%s&gt; buffer %zu/%zu (%g%%) \"%s\""<pos:position pos:line="70" pos:column="69"/></literal></expr></argument>, <argument><expr><name><name pos:line="70" pos:column="65">cb<pos:position pos:line="70" pos:column="67"/></name><operator pos:line="70" pos:column="67">-&gt;<pos:position pos:line="70" pos:column="72"/></operator><name pos:line="70" pos:column="69">location<pos:position pos:line="70" pos:column="77"/></name></name></expr></argument>,
        <argument><expr><name><name pos:line="71" pos:column="9">cb<pos:position pos:line="71" pos:column="11"/></name><operator pos:line="71" pos:column="11">-&gt;<pos:position pos:line="71" pos:column="16"/></operator><name pos:line="71" pos:column="13">send_buffer_fill<pos:position pos:line="71" pos:column="29"/></name></name></expr></argument>, <argument><expr><name><name pos:line="71" pos:column="31">cb<pos:position pos:line="71" pos:column="33"/></name><operator pos:line="71" pos:column="33">-&gt;<pos:position pos:line="71" pos:column="38"/></operator><name pos:line="71" pos:column="35">send_buffer_size<pos:position pos:line="71" pos:column="51"/></name></name></expr></argument>,
        <argument><expr><literal type="number" pos:line="72" pos:column="9">100.0<pos:position pos:line="72" pos:column="14"/></literal> <operator pos:line="72" pos:column="15">*<pos:position pos:line="72" pos:column="16"/></operator> <operator pos:line="72" pos:column="17">(<pos:position pos:line="72" pos:column="18"/></operator><operator pos:line="72" pos:column="18">(<pos:position pos:line="72" pos:column="19"/></operator><name pos:line="72" pos:column="19">double<pos:position pos:line="72" pos:column="25"/></name><operator pos:line="72" pos:column="25">)<pos:position pos:line="72" pos:column="26"/></operator><name><name pos:line="72" pos:column="26">cb<pos:position pos:line="72" pos:column="28"/></name><operator pos:line="72" pos:column="28">-&gt;<pos:position pos:line="72" pos:column="33"/></operator><name pos:line="72" pos:column="30">send_buffer_fill<pos:position pos:line="72" pos:column="46"/></name></name><operator pos:line="72" pos:column="46">)<pos:position pos:line="72" pos:column="47"/></operator> <operator pos:line="72" pos:column="48">/<pos:position pos:line="72" pos:column="49"/></operator> <operator pos:line="72" pos:column="50">(<pos:position pos:line="72" pos:column="51"/></operator><operator pos:line="72" pos:column="51">(<pos:position pos:line="72" pos:column="52"/></operator><name pos:line="72" pos:column="52">double<pos:position pos:line="72" pos:column="58"/></name><operator pos:line="72" pos:column="58">)<pos:position pos:line="72" pos:column="59"/></operator><name><name pos:line="72" pos:column="59">cb<pos:position pos:line="72" pos:column="61"/></name><operator pos:line="72" pos:column="61">-&gt;<pos:position pos:line="72" pos:column="66"/></operator><name pos:line="72" pos:column="63">send_buffer_size<pos:position pos:line="72" pos:column="79"/></name></name><operator pos:line="72" pos:column="79">)<pos:position pos:line="72" pos:column="80"/></operator></expr></argument>,
        <argument><expr><name pos:line="73" pos:column="9">command<pos:position pos:line="73" pos:column="16"/></name></expr></argument>)<pos:position pos:line="73" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="18"/></expr_stmt>

  <comment type="block" pos:line="75" pos:column="3">/* Check if we have enough space for this command. */</comment>
  <expr_stmt><expr><call><name pos:line="76" pos:column="3">pthread_mutex_unlock<pos:position pos:line="76" pos:column="23"/></name><argument_list pos:line="76" pos:column="23">(<argument><expr><operator pos:line="76" pos:column="24">&amp;<pos:position pos:line="76" pos:column="29"/></operator><name><name pos:line="76" pos:column="25">cb<pos:position pos:line="76" pos:column="27"/></name><operator pos:line="76" pos:column="27">-&gt;<pos:position pos:line="76" pos:column="32"/></operator><name pos:line="76" pos:column="29">send_lock<pos:position pos:line="76" pos:column="38"/></name></name></expr></argument>)<pos:position pos:line="76" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="40"/></expr_stmt>

  <return pos:line="78" pos:column="3">return <expr><operator pos:line="78" pos:column="10">(<pos:position pos:line="78" pos:column="11"/></operator><literal type="number" pos:line="78" pos:column="11">0<pos:position pos:line="78" pos:column="12"/></literal><operator pos:line="78" pos:column="12">)<pos:position pos:line="78" pos:column="13"/></operator></expr>;<pos:position pos:line="78" pos:column="14"/></return>
}<pos:position pos:line="79" pos:column="2"/></block></function></unit>
