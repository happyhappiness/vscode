diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.4/ChangeLog /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.5/ChangeLog
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.4/ChangeLog	2008-10-17 04:07:53.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.5/ChangeLog	2009-01-03 04:05:34.000000000 +0800
@@ -1,6 +1,28 @@
+2009-01-02, Version 4.4.5
+	* build system: Check for `mysql.h' and `mysql/mysql.h', since the
+	  file may be in both locations, especially when the database was
+	  installed in a non-standard path. Thanks to Dusty Doris for
+	  reporting this.
+	* build system: Handle the _POSIX_PTHREAD_SEMANTICS defined, needed by
+	  Solaris, in the configure script automatically.
+	* collectd.conf(5): Various fixes and clarifications.
+	* apcups plugin: Include "collectd.h" before <stdlib.h>. This solves
+	  portability problems, especially for Solaris.
+	* dns plugin: Fix a portability problem with NetBSD.
+	* network plugin: Fix the handling of `type' in the network protocol.
+	  Due to a programming mistake, only 4 or 8 bytes would be copied to a
+	  much larger buffer. This caused the `type' to be transferred much
+	  more often than necessary. In some cases, e. g. the `cpu' and
+	  `cpufreq' plugins being used at the same time, data may be corrupted
+	  in those files. Thanks to Bruno Prémont for debugging and reporting
+	  this issue.
+	* unixsock plugin: Make sure the initialization function is run only
+	  once. This resolves a file descriptor leak under systems which run
+	  the initialization more than once, such as Solaris.
+
 2008-10-16, Version 4.4.4
 	* build system: Change `--enable-<plugin>' to abort with an error if
 	  dependencies are not met. Thanks to Bruno Prémont for the patch.
 	  Also, the poisoning of various string functions has been restricted
 	  to debug builds.
 	* collectd: Fix a memory leak in the global value cache. With every
@@ -10,17 +32,17 @@
 	* collectd: Fix an off-by-one error in the ignorelist functionality.
 	  When using regular expressions, the last character would be missing,
 	  possibly matching differently from what one would expect.
 	* collectdmon: Don't block SIGCHLD. This fixes a potential portability
 	  problem.
 	* collectd-nagios: Fix handling of the `-d' option. Thanks to Fabian
-	  Linzberger for reporting the but.
+	  Linzberger for reporting the bug.
 	* network plugin: Fix a memory leak in the configuration handling
 	  code. Thanks to Niraj Tolia for reporting this issue.
 	* perl plugin: Log an error message if bootstrapping `Collectd' fails.
-	* tail plugin: Call `clearerr' after reading an EOF. This fixes
+	* tail plugin: Call `clearerr(3)' after reading an EOF. This fixes
 	  problems with some `libc's. Thanks to Matthias Lay for reporting the
 	  bug.
 
 2008-09-01, Version 4.4.3
 	* collectd: Fix a memory leak in the threshold checking code.
 	* memcached plugin: Fix a too short timeout and a related file
@@ -51,13 +73,13 @@
 	* collectd: Fixed min/max output in notifications generated by
 	  threshold checking.
 	* collectd-nagios: Fix the protocol used to communicate with the
 	  daemon.
 	* perl plugin: Fail noisily, but don't shutdown the daemon, if
 	  initialization has errors. An issue with Perl 5.10 has been fixed.
-	* teamspeak2 plugin: Fixed an out of bounce array access. Thanks to
+	* teamspeak2 plugin: Fixed an out of bound array access. Thanks to
 	  René Rebe and Siegmund Gorr for reporting this.
 
 2008-05-06, Version 4.4.0
 	* collectd: Internal code cleanups.
 	* collectd: Added support for a `Flush' command in the unixsock and
 	  exec plugins. This command can be used to force a plugin (or all) to
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.4/configure /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.5/configure
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.4/configure	2008-10-17 04:09:05.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.5/configure	2009-01-03 04:10:56.000000000 +0800
@@ -1,9 +1,9 @@
 #! /bin/sh
 # Guess values for system-dependent variables and create Makefiles.
-# Generated by GNU Autoconf 2.61 for collectd 4.4.4.
+# Generated by GNU Autoconf 2.61 for collectd 4.4.5.
 #
 # Copyright (C) 1992, 1993, 1994, 1995, 1996, 1998, 1999, 2000, 2001,
 # 2002, 2003, 2004, 2005, 2006 Free Software Foundation, Inc.
 # This configure script is free software; the Free Software Foundation
 # gives unlimited permission to copy, distribute and modify it.
 ## --------------------- ##
@@ -723,14 +723,14 @@
 MAKEFLAGS=
 SHELL=${CONFIG_SHELL-/bin/sh}
 
 # Identity of this package.
 PACKAGE_NAME='collectd'
 PACKAGE_TARNAME='collectd'
-PACKAGE_VERSION='4.4.4'
-PACKAGE_STRING='collectd 4.4.4'
+PACKAGE_VERSION='4.4.5'
+PACKAGE_STRING='collectd 4.4.5'
 PACKAGE_BUGREPORT=''
 
 ac_unique_file="src/collectd.c"
 ac_default_prefix="/opt/collectd"
 # Factoring default headers for most tests.
 ac_includes_default="\
@@ -1597,13 +1597,13 @@
 # Report the --help message.
 #
 if test "$ac_init_help" = "long"; then
   # Omit some internal or obsolete options to make the list less imposing.
   # This message is too long to be a string in the A/UX 3.1 sh.
   cat <<_ACEOF
-\`configure' configures collectd 4.4.4 to adapt to many kinds of systems.
+\`configure' configures collectd 4.4.5 to adapt to many kinds of systems.
 
 Usage: $0 [OPTION]... [VAR=VALUE]...
 
 To assign environment variables (e.g., CC, CFLAGS...), specify them as
 VAR=VALUE.  See below for descriptions of some of the useful variables.
 
@@ -1667,13 +1667,13 @@
   --host=HOST       cross-compile to build programs to run on HOST [BUILD]
 _ACEOF
 fi
 
 if test -n "$ac_init_help"; then
   case $ac_init_help in
-     short | recursive ) echo "Configuration of collectd 4.4.4:";;
+     short | recursive ) echo "Configuration of collectd 4.4.5:";;
    esac
   cat <<\_ACEOF
 
 Optional Features:
   --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)
   --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]
@@ -1867,13 +1867,13 @@
   done
 fi
 
 test -n "$ac_init_help" && exit $ac_status
 if $ac_init_version; then
   cat <<\_ACEOF
-collectd configure 4.4.4
+collectd configure 4.4.5
 generated by GNU Autoconf 2.61
 
 Copyright (C) 1992, 1993, 1994, 1995, 1996, 1998, 1999, 2000, 2001,
 2002, 2003, 2004, 2005, 2006 Free Software Foundation, Inc.
 This configure script is free software; the Free Software Foundation
 gives unlimited permission to copy, distribute and modify it.
@@ -1881,13 +1881,13 @@
   exit
 fi
 cat >config.log <<_ACEOF
 This file contains any messages produced by compilers while
 running configure, to aid debugging if configure makes a mistake.
 
-It was created by collectd $as_me 4.4.4, which was
+It was created by collectd $as_me 4.4.5, which was
 generated by GNU Autoconf 2.61.  Invocation command line was
 
   $ $0 $@
 
 _ACEOF
 exec 5>>config.log
@@ -2574,13 +2574,13 @@
   fi
 fi
 
 
 # Define the identity of the package.
  PACKAGE='collectd'
- VERSION='4.4.4'
+ VERSION='4.4.5'
 
 
 cat >>confdefs.h <<_ACEOF
 #define PACKAGE "$PACKAGE"
 _ACEOF
 
@@ -21870,12 +21870,17 @@
 	fi
 
 	KERNEL_CFLAGS="-I$KERNEL_DIR/include"
 
 fi
 
+if test "x$ac_system" = "xSolaris"
+then
+	CPPFLAGS="$CPPFLAGS -D_POSIX_PTHREAD_SEMANTICS"
+fi
+
 #
 # Checks for header files.
 #
 { echo "$as_me:$LINENO: checking for ANSI C header files" >&5
 echo $ECHO_N "checking for ANSI C header files... $ECHO_C" >&6; }
 if test "${ac_cv_header_stdc+set}" = set; then
@@ -23878,12 +23883,13 @@
 fi
 
 done
 
 
 # For the swap module
+have_sys_swap_h="yes"
 
 for ac_header in sys/swap.h
 do
 as_ac_Header=`echo "ac_cv_header_$ac_header" | $as_tr_sh`
 { echo "$as_me:$LINENO: checking for $ac_header" >&5
 echo $ECHO_N "checking for $ac_header... $ECHO_C" >&6; }
@@ -23939,17 +23945,25 @@
 echo "${ECHO_T}$ac_res" >&6; }
 if test `eval echo '${'$as_ac_Header'}'` = yes; then
   cat >>confdefs.h <<_ACEOF
 #define `echo "HAVE_$ac_header" | $as_tr_cpp` 1
 _ACEOF
 
+else
+  have_sys_swap_h="no"
 fi
 
 done
 
 
+if test "x$have_sys_swap_h$ac_system" = "xnoSolaris"
+then
+	{ echo "$as_me:$LINENO: Solaris detected and sys/swap.h not found: Try building a 64bit binary." >&5
+echo "$as_me: Solaris detected and sys/swap.h not found: Try building a 64bit binary." >&6;}
+fi
+
 # For load module
 # For the processes plugin
 # For users module
 
 
 
@@ -33457,19 +33471,21 @@
 then
 	with_mysql_cflags=`$with_mysql_config --cflags 2>/dev/null`
 	mysql_config_status=$?
 
 	if test $mysql_config_status -ne 0
 	then
-		with_libmysql="no"
+		with_libmysql="no ($with_mysql_config failed)"
 	else
 		SAVE_CPPFLAGS="$CPPFLAGS"
 		CPPFLAGS="$CPPFLAGS $with_mysql_cflags"
 
+		have_mysql_h="no"
+		have_mysql_mysql_h="no"
 
-for ac_header in mysql/mysql.h
+for ac_header in mysql.h
 do
 as_ac_Header=`echo "ac_cv_header_$ac_header" | $as_tr_sh`
 if { as_var=$as_ac_Header; eval "test \"\${$as_var+set}\" = set"; }; then
   { echo "$as_me:$LINENO: checking for $ac_header" >&5
 echo $ECHO_N "checking for $ac_header... $ECHO_C" >&6; }
 if { as_var=$as_ac_Header; eval "test \"\${$as_var+set}\" = set"; }; then
@@ -33597,31 +33613,178 @@
 
 fi
 if test `eval echo '${'$as_ac_Header'}'` = yes; then
   cat >>confdefs.h <<_ACEOF
 #define `echo "HAVE_$ac_header" | $as_tr_cpp` 1
 _ACEOF
+ have_mysql_h="yes"
+fi
+
+done
+
+
+		if test "x$have_mysql_h" = "xno"
+		then
 
+for ac_header in mysql/mysql.h
+do
+as_ac_Header=`echo "ac_cv_header_$ac_header" | $as_tr_sh`
+if { as_var=$as_ac_Header; eval "test \"\${$as_var+set}\" = set"; }; then
+  { echo "$as_me:$LINENO: checking for $ac_header" >&5
+echo $ECHO_N "checking for $ac_header... $ECHO_C" >&6; }
+if { as_var=$as_ac_Header; eval "test \"\${$as_var+set}\" = set"; }; then
+  echo $ECHO_N "(cached) $ECHO_C" >&6
+fi
+ac_res=`eval echo '${'$as_ac_Header'}'`
+	       { echo "$as_me:$LINENO: result: $ac_res" >&5
+echo "${ECHO_T}$ac_res" >&6; }
+else
+  # Is the header compilable?
+{ echo "$as_me:$LINENO: checking $ac_header usability" >&5
+echo $ECHO_N "checking $ac_header usability... $ECHO_C" >&6; }
+cat >conftest.$ac_ext <<_ACEOF
+/* confdefs.h.  */
+_ACEOF
+cat confdefs.h >>conftest.$ac_ext
+cat >>conftest.$ac_ext <<_ACEOF
+/* end confdefs.h.  */
+$ac_includes_default
+#include <$ac_header>
+_ACEOF
+rm -f conftest.$ac_objext
+if { (ac_try="$ac_compile"
+case "(($ac_try" in
+  *\"* | *\`* | *\\*) ac_try_echo=\$ac_try;;
+  *) ac_try_echo=$ac_try;;
+esac
+eval "echo \"\$as_me:$LINENO: $ac_try_echo\"") >&5
+  (eval "$ac_compile") 2>conftest.er1
+  ac_status=$?
+  grep -v '^ *+' conftest.er1 >conftest.err
+  rm -f conftest.er1
+  cat conftest.err >&5
+  echo "$as_me:$LINENO: \$? = $ac_status" >&5
+  (exit $ac_status); } && {
+	 test -z "$ac_c_werror_flag" ||
+	 test ! -s conftest.err
+       } && test -s conftest.$ac_objext; then
+  ac_header_compiler=yes
 else
-  with_libmysql="no (mysql/mysql.h not found)"
+  echo "$as_me: failed program was:" >&5
+sed 's/^/| /' conftest.$ac_ext >&5
+
+	ac_header_compiler=no
+fi
+
+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
+{ echo "$as_me:$LINENO: result: $ac_header_compiler" >&5
+echo "${ECHO_T}$ac_header_compiler" >&6; }
+
+# Is the header present?
+{ echo "$as_me:$LINENO: checking $ac_header presence" >&5
+echo $ECHO_N "checking $ac_header presence... $ECHO_C" >&6; }
+cat >conftest.$ac_ext <<_ACEOF
+/* confdefs.h.  */
+_ACEOF
+cat confdefs.h >>conftest.$ac_ext
+cat >>conftest.$ac_ext <<_ACEOF
+/* end confdefs.h.  */
+#include <$ac_header>
+_ACEOF
+if { (ac_try="$ac_cpp conftest.$ac_ext"
+case "(($ac_try" in
+  *\"* | *\`* | *\\*) ac_try_echo=\$ac_try;;
+  *) ac_try_echo=$ac_try;;
+esac
+eval "echo \"\$as_me:$LINENO: $ac_try_echo\"") >&5
+  (eval "$ac_cpp conftest.$ac_ext") 2>conftest.er1
+  ac_status=$?
+  grep -v '^ *+' conftest.er1 >conftest.err
+  rm -f conftest.er1
+  cat conftest.err >&5
+  echo "$as_me:$LINENO: \$? = $ac_status" >&5
+  (exit $ac_status); } >/dev/null && {
+	 test -z "$ac_c_preproc_warn_flag$ac_c_werror_flag" ||
+	 test ! -s conftest.err
+       }; then
+  ac_header_preproc=yes
+else
+  echo "$as_me: failed program was:" >&5
+sed 's/^/| /' conftest.$ac_ext >&5
+
+  ac_header_preproc=no
+fi
+
+rm -f conftest.err conftest.$ac_ext
+{ echo "$as_me:$LINENO: result: $ac_header_preproc" >&5
+echo "${ECHO_T}$ac_header_preproc" >&6; }
+
+# So?  What about this header?
+case $ac_header_compiler:$ac_header_preproc:$ac_c_preproc_warn_flag in
+  yes:no: )
+    { echo "$as_me:$LINENO: WARNING: $ac_header: accepted by the compiler, rejected by the preprocessor!" >&5
+echo "$as_me: WARNING: $ac_header: accepted by the compiler, rejected by the preprocessor!" >&2;}
+    { echo "$as_me:$LINENO: WARNING: $ac_header: proceeding with the compiler's result" >&5
+echo "$as_me: WARNING: $ac_header: proceeding with the compiler's result" >&2;}
+    ac_header_preproc=yes
+    ;;
+  no:yes:* )
+    { echo "$as_me:$LINENO: WARNING: $ac_header: present but cannot be compiled" >&5
+echo "$as_me: WARNING: $ac_header: present but cannot be compiled" >&2;}
+    { echo "$as_me:$LINENO: WARNING: $ac_header:     check for missing prerequisite headers?" >&5
+echo "$as_me: WARNING: $ac_header:     check for missing prerequisite headers?" >&2;}
+    { echo "$as_me:$LINENO: WARNING: $ac_header: see the Autoconf documentation" >&5
+echo "$as_me: WARNING: $ac_header: see the Autoconf documentation" >&2;}
+    { echo "$as_me:$LINENO: WARNING: $ac_header:     section \"Present But Cannot Be Compiled\"" >&5
+echo "$as_me: WARNING: $ac_header:     section \"Present But Cannot Be Compiled\"" >&2;}
+    { echo "$as_me:$LINENO: WARNING: $ac_header: proceeding with the preprocessor's result" >&5
+echo "$as_me: WARNING: $ac_header: proceeding with the preprocessor's result" >&2;}
+    { echo "$as_me:$LINENO: WARNING: $ac_header: in the future, the compiler will take precedence" >&5
+echo "$as_me: WARNING: $ac_header: in the future, the compiler will take precedence" >&2;}
+
+    ;;
+esac
+{ echo "$as_me:$LINENO: checking for $ac_header" >&5
+echo $ECHO_N "checking for $ac_header... $ECHO_C" >&6; }
+if { as_var=$as_ac_Header; eval "test \"\${$as_var+set}\" = set"; }; then
+  echo $ECHO_N "(cached) $ECHO_C" >&6
+else
+  eval "$as_ac_Header=\$ac_header_preproc"
+fi
+ac_res=`eval echo '${'$as_ac_Header'}'`
+	       { echo "$as_me:$LINENO: result: $ac_res" >&5
+echo "${ECHO_T}$ac_res" >&6; }
+
+fi
+if test `eval echo '${'$as_ac_Header'}'` = yes; then
+  cat >>confdefs.h <<_ACEOF
+#define `echo "HAVE_$ac_header" | $as_tr_cpp` 1
+_ACEOF
+ have_mysql_mysql_h="yes"
 fi
 
 done
 
+		fi
+
+		if test "x$have_mysql_h$have_mysql_mysql_h" = "xnono"
+		then
+			with_libmysql="no (mysql.h not found)"
+		fi
 
 		CPPFLAGS="$SAVE_CPPFLAGS"
 	fi
 fi
 if test "x$with_libmysql" = "xyes"
 then
 	with_mysql_libs=`$with_mysql_config --libs 2>/dev/null`
 	mysql_config_status=$?
 
 	if test $mysql_config_status -ne 0
 	then
-		with_libmysql="no"
+		with_libmysql="no ($with_mysql_config failed)"
 	else
 		{ echo "$as_me:$LINENO: checking for mysql_init in -lmysqlclient" >&5
 echo $ECHO_N "checking for mysql_init in -lmysqlclient... $ECHO_C" >&6; }
 if test "${ac_cv_lib_mysqlclient_mysql_init+set}" = set; then
   echo $ECHO_N "(cached) $ECHO_C" >&6
 else
@@ -36843,16 +37006,20 @@
 if test "x$with_devinfo$with_kstat" = "xyesyes"
 then
 	plugin_cpu="yes"
 	plugin_disk="yes"
 	plugin_interface="yes"
 	plugin_memory="yes"
-	plugin_swap="yes"
 	plugin_tape="yes"
 fi
 
+if test "x$have_sys_swap_h$with_kstat$ac_system" = "xyesyesSolaris"
+then
+	plugin_swap="yes"
+fi
+
 # libstatgrab
 if test "x$with_libstatgrab" = "xyes"
 then
 	plugin_cpu="yes"
 	plugin_disk="yes"
 	plugin_interface="yes"
@@ -40617,13 +40784,13 @@
 exec 6>&1
 
 # Save the log message, to keep $[0] and so on meaningful, and to
 # report actual input values of CONFIG_FILES etc. instead of their
 # values after options handling.
 ac_log="
-This file was extended by collectd $as_me 4.4.4, which was
+This file was extended by collectd $as_me 4.4.5, which was
 generated by GNU Autoconf 2.61.  Invocation command line was
 
   CONFIG_FILES    = $CONFIG_FILES
   CONFIG_HEADERS  = $CONFIG_HEADERS
   CONFIG_LINKS    = $CONFIG_LINKS
   CONFIG_COMMANDS = $CONFIG_COMMANDS
@@ -40670,13 +40837,13 @@
 
 Report bugs to <bug-autoconf@gnu.org>."
 
 _ACEOF
 cat >>$CONFIG_STATUS <<_ACEOF
 ac_cs_version="\\
-collectd config.status 4.4.4
+collectd config.status 4.4.5
 configured by $0, generated by GNU Autoconf 2.61,
   with options \\"`echo "$ac_configure_args" | sed 's/^ //; s/[\\""\`\$]/\\\\&/g'`\\"
 
 Copyright (C) 2006 Free Software Foundation, Inc.
 This config.status script is free software; the Free Software Foundation
 gives unlimited permission to copy, distribute and modify it."
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.4/configure.in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.5/configure.in
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.4/configure.in	2008-10-17 04:08:49.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.5/configure.in	2009-01-03 04:10:40.000000000 +0800
@@ -59,12 +59,17 @@
 	fi
 
 	KERNEL_CFLAGS="-I$KERNEL_DIR/include"
 	AC_SUBST(KERNEL_CFLAGS)
 fi
 
+if test "x$ac_system" = "xSolaris"
+then
+	CPPFLAGS="$CPPFLAGS -D_POSIX_PTHREAD_SEMANTICS"
+fi
+
 #
 # Checks for header files.
 #
 AC_HEADER_STDC
 AC_HEADER_SYS_WAIT
 AC_HEADER_DIRENT
@@ -234,22 +239,28 @@
 #if HAVE_IOKIT_IOTYPES_H
 #  include <IOKit/IOTypes.h>
 #endif
 ])
 
 # For the swap module
-AC_CHECK_HEADERS(sys/swap.h, [], [],
+have_sys_swap_h="yes"
+AC_CHECK_HEADERS(sys/swap.h, [], [have_sys_swap_h="no"],
 [
 #if HAVE_SYS_TYPES_H
 #  include <sys/types.h>
 #endif
 #if HAVE_SYS_PARAM_H
 # include <sys/param.h>
 #endif
 ])
 
+if test "x$have_sys_swap_h$ac_system" = "xnoSolaris"
+then
+	AC_MSG_NOTICE([Solaris detected and sys/swap.h not found: Try building a 64bit binary.])
+fi
+
 # For load module
 # For the processes plugin
 # For users module
 AC_CHECK_HEADERS(sys/loadavg.h linux/config.h utmp.h utmpx.h)
 
 # For interface plugin
@@ -1335,30 +1346,42 @@
 then
 	with_mysql_cflags=`$with_mysql_config --cflags 2>/dev/null`
 	mysql_config_status=$?
 
 	if test $mysql_config_status -ne 0
 	then
-		with_libmysql="no"
+		with_libmysql="no ($with_mysql_config failed)"
 	else
 		SAVE_CPPFLAGS="$CPPFLAGS"
 		CPPFLAGS="$CPPFLAGS $with_mysql_cflags"
 
-		AC_CHECK_HEADERS(mysql/mysql.h, [], [with_libmysql="no (mysql/mysql.h not found)"], [])
+		have_mysql_h="no"
+		have_mysql_mysql_h="no"
+		AC_CHECK_HEADERS(mysql.h, [have_mysql_h="yes"])
+
+		if test "x$have_mysql_h" = "xno"
+		then
+			AC_CHECK_HEADERS(mysql/mysql.h, [have_mysql_mysql_h="yes"])
+		fi
+
+		if test "x$have_mysql_h$have_mysql_mysql_h" = "xnono"
+		then
+			with_libmysql="no (mysql.h not found)"
+		fi
 
 		CPPFLAGS="$SAVE_CPPFLAGS"
 	fi
 fi
 if test "x$with_libmysql" = "xyes"
 then
 	with_mysql_libs=`$with_mysql_config --libs 2>/dev/null`
 	mysql_config_status=$?
 
 	if test $mysql_config_status -ne 0
 	then
-		with_libmysql="no"
+		with_libmysql="no ($with_mysql_config failed)"
 	else
 		AC_CHECK_LIB(mysqlclient, mysql_init,
 		 [with_libmysql="yes"],
 		 [with_libmysql="no (symbol 'mysql_init' not found)"],
 		 [$with_mysql_libs])
 	fi
@@ -2364,16 +2387,20 @@
 if test "x$with_devinfo$with_kstat" = "xyesyes"
 then
 	plugin_cpu="yes"
 	plugin_disk="yes"
 	plugin_interface="yes"
 	plugin_memory="yes"
-	plugin_swap="yes"
 	plugin_tape="yes"
 fi
 
+if test "x$have_sys_swap_h$with_kstat$ac_system" = "xyesyesSolaris"
+then
+	plugin_swap="yes"
+fi
+
 # libstatgrab
 if test "x$with_libstatgrab" = "xyes"
 then
 	plugin_cpu="yes"
 	plugin_disk="yes"
 	plugin_interface="yes"
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.4/contrib/collection3/bin/graph.cgi /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.5/contrib/collection3/bin/graph.cgi
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.4/contrib/collection3/bin/graph.cgi	2008-09-14 18:42:25.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.5/contrib/collection3/bin/graph.cgi	2008-11-25 21:04:46.000000000 +0800
@@ -17,12 +17,29 @@
 use Collectd::Graph::Type ();
 
 our $Debug = param ('debug');
 our $Begin = param ('begin');
 our $End = param ('end');
 our $GraphWidth = param ('width');
+our $OutputFormat = 'PNG';
+our $ContentType = 'image/png';
+
+if (param ('format'))
+{
+  my $temp = param ('format') || '';
+  $temp = uc ($temp);
+
+  if ($temp =~ m/^(PNG|SVG|EPS|PDF)$/)
+  {
+    $OutputFormat = $temp;
+
+    if ($OutputFormat eq 'SVG') { $ContentType = 'image/svg+xml'; }
+    elsif ($OutputFormat eq 'EPS') { $ContentType = 'image/eps'; }
+    elsif ($OutputFormat eq 'PDF') { $ContentType = 'application/pdf'; }
+  }
+}
 
 if ($Debug)
 {
   print <<HTTP;
 Content-Type: text/plain
 
@@ -138,13 +155,13 @@
 flush_files ($files,
     begin => $Begin,
     end => $End,
     addr => gc_get_scalar ('UnixSockAddr', undef),
     interval => gc_get_scalar ('Interval', 10));
 
-print STDOUT header (-Content_type => 'image/png',
+print STDOUT header (-Content_type => $ContentType,
   -Last_Modified => epoch_to_rfc1123 ($obj->getLastModified ()),
   -Expires => epoch_to_rfc1123 ($expires));
 
 if ($Debug)
 {
   print "\$expires = $expires;\n";
@@ -170,13 +187,13 @@
   else
   {
     @timesel = ('-s', $Begin); # End is implicitely `now'.
   }
 
   $| = 1;
-  RRDs::graph ('-', '-a', 'PNG', '--width', $GraphWidth, @timesel, @$args);
+  RRDs::graph ('-', '-a', $OutputFormat, '--width', $GraphWidth, @timesel, @$args);
   if (my $err = RRDs::error ())
   {
     print STDERR "RRDs::graph failed: $err\n";
     exit (1);
   }
 }
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.4/contrib/collection.cgi /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.5/contrib/collection.cgi
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.4/contrib/collection.cgi	2008-10-17 03:24:20.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.5/contrib/collection.cgi	2009-01-03 04:05:29.000000000 +0800
@@ -2471,17 +2471,87 @@
     "LINE1:avg#$FullBlue:Processes",
     'GPRINT:min:MIN:%5.1lf Min,',
     'GPRINT:avg:AVERAGE:%5.1lf Avg.,',
     'GPRINT:max:MAX:%5.1lf Max,',
     'GPRINT:avg:LAST:%5.1lf Last\l',
     ],
+    vmpage_number => ['-v', 'Pages',
+    'DEF:avg={file}:value:AVERAGE',
+    'DEF:min={file}:value:MIN',
+    'DEF:max={file}:value:MAX',
+    "AREA:max#$HalfBlue",
+    "AREA:min#$Canvas",
+    "LINE1:avg#$FullBlue:Number",
+    'GPRINT:min:MIN:%4.1lf Min,',
+    'GPRINT:avg:AVERAGE:%4.1lf Avg,',
+    'GPRINT:max:MAX:%4.1lf Max,',
+    'GPRINT:avg:LAST:%4.1lf Last\l'
+    ],
+    vmpage_faults => [
+    "DEF:minf_avg={file}:minflt:AVERAGE",
+    "DEF:minf_min={file}:minflt:MIN",
+    "DEF:minf_max={file}:minflt:MAX",
+    "DEF:majf_avg={file}:majflt:AVERAGE",
+    "DEF:majf_min={file}:majflt:MIN",
+    "DEF:majf_max={file}:majflt:MAX",
+    'CDEF:overlap=majf_avg,minf_avg,GT,minf_avg,majf_avg,IF',
+    "AREA:majf_avg#$HalfGreen",
+    "AREA:minf_avg#$HalfBlue",
+    "AREA:overlap#$HalfBlueGreen",
+    "LINE1:majf_avg#$FullGreen:Major",
+    'GPRINT:majf_min:MIN:%5.1lf%s Min,',
+    'GPRINT:majf_avg:AVERAGE:%5.1lf%s Avg,',
+    'GPRINT:majf_max:MAX:%5.1lf%s Max,',
+    'GPRINT:majf_avg:LAST:%5.1lf%s Last\l',
+    "LINE1:minf_avg#$FullBlue:Minor",
+    'GPRINT:minf_min:MIN:%5.1lf%s Min,',
+    'GPRINT:minf_avg:AVERAGE:%5.1lf%s Avg,',
+    'GPRINT:minf_max:MAX:%5.1lf%s Max,',
+    'GPRINT:minf_avg:LAST:%5.1lf%s Last\l'
+    ],
+    vmpage_io => [
+    "DEF:rpag_avg={file}:in:AVERAGE",
+    "DEF:rpag_min={file}:in:MIN",
+    "DEF:rpag_max={file}:in:MAX",
+    "DEF:wpag_avg={file}:out:AVERAGE",
+    "DEF:wpag_min={file}:out:MIN",
+    "DEF:wpag_max={file}:out:MAX",
+    'CDEF:overlap=wpag_avg,rpag_avg,GT,rpag_avg,wpag_avg,IF',
+    "AREA:wpag_avg#$HalfGreen",
+    "AREA:rpag_avg#$HalfBlue",
+    "AREA:overlap#$HalfBlueGreen",
+    "LINE1:wpag_avg#$FullGreen:OUT",
+    'GPRINT:wpag_min:MIN:%5.1lf%s Min,',
+    'GPRINT:wpag_avg:AVERAGE:%5.1lf%s Avg,',
+    'GPRINT:wpag_max:MAX:%5.1lf%s Max,',
+    'GPRINT:wpag_avg:LAST:%5.1lf%s Last\l',
+    "LINE1:rpag_avg#$FullBlue:IN ",
+    'GPRINT:rpag_min:MIN:%5.1lf%s Min,',
+    'GPRINT:rpag_avg:AVERAGE:%5.1lf%s Avg,',
+    'GPRINT:rpag_max:MAX:%5.1lf%s Max,',
+    'GPRINT:rpag_avg:LAST:%5.1lf%s Last\l'
+    ],
+    vmpage_action => ['-v', 'Pages',
+    'DEF:avg={file}:value:AVERAGE',
+    'DEF:min={file}:value:MIN',
+    'DEF:max={file}:value:MAX',
+    "AREA:max#$HalfBlue",
+    "AREA:min#$Canvas",
+    "LINE1:avg#$FullBlue:Number",
+    'GPRINT:min:MIN:%4.1lf Min,',
+    'GPRINT:avg:AVERAGE:%4.1lf Avg,',
+    'GPRINT:max:MAX:%4.1lf Max,',
+    'GPRINT:avg:LAST:%4.1lf Last\l'
+    ],
   };
   $GraphDefs->{'if_multicast'} = $GraphDefs->{'ipt_packets'};
   $GraphDefs->{'if_tx_errors'} = $GraphDefs->{'if_rx_errors'};
   $GraphDefs->{'dns_qtype'} = $GraphDefs->{'dns_opcode'};
   $GraphDefs->{'dns_rcode'} = $GraphDefs->{'dns_opcode'};
+  $GraphDefs->{'vmpage_io-memory'} = $GraphDefs->{'vmpage_io'};
+  $GraphDefs->{'vmpage_io-swap'} = $GraphDefs->{'vmpage_io'};
 
   $MetaGraphDefs->{'cpu'} = \&meta_graph_cpu;
   $MetaGraphDefs->{'dns_qtype'} = \&meta_graph_dns;
   $MetaGraphDefs->{'dns_rcode'} = \&meta_graph_dns;
   $MetaGraphDefs->{'if_rx_errors'} = \&meta_graph_if_rx_errors;
   $MetaGraphDefs->{'if_tx_errors'} = \&meta_graph_if_rx_errors;
@@ -2489,12 +2559,14 @@
   $MetaGraphDefs->{'nfs_procedure'} = \&meta_graph_nfs_procedure;
   $MetaGraphDefs->{'ps_state'} = \&meta_graph_ps_state;
   $MetaGraphDefs->{'swap'} = \&meta_graph_swap;
   $MetaGraphDefs->{'mysql_commands'} = \&meta_graph_mysql_commands;
   $MetaGraphDefs->{'mysql_handler'} = \&meta_graph_mysql_commands;
   $MetaGraphDefs->{'tcp_connections'} = \&meta_graph_tcp_connections;
+  $MetaGraphDefs->{'vmpage_number'} = \&meta_graph_vmpage_number;
+  $MetaGraphDefs->{'vmpage_action'} = \&meta_graph_vmpage_action;
 } # load_graph_definitions
 
 sub meta_graph_generic_stack
 {
   confess ("Wrong number of arguments") if (@_ != 2);
 
@@ -3090,7 +3162,134 @@
       }
     );
   } # for (@$type_instances)
 
   return (meta_graph_generic_stack ($opts, $sources));
 } # meta_graph_tcp_connections
+
+sub meta_graph_vmpage_number
+{
+  confess ("Wrong number of arguments") if (@_ != 5);
+
+  my $host = shift;
+  my $plugin = shift;
+  my $plugin_instance = shift;
+  my $type = shift;
+  my $type_instances = shift;
+
+  my $opts = {};
+  my $sources = [];
+
+  $opts->{'title'} = "$host/$plugin"
+  . (defined ($plugin_instance) ? "-$plugin_instance" : '') . "/$type";
+  $opts->{'number_format'} = '%6.2lf';
+
+  $opts->{'rrd_opts'} = ['-v', 'Pages'];
+
+  my @files = ();
+
+  $opts->{'colors'} =
+  {
+    anon_pages	  => '00e000',
+    bounce	  => '00e0ff',
+    dirty	  => '00e0a0',
+    file_pages	  => 'f000f0',
+    mapped	  => 'f000a0',
+    page_table_pages	  => 'ffb000',
+    slab	  => '0000f0',
+    unstable	  => '0000a0',
+    writeback	  => 'ff0000',
+  };
+
+  _custom_sort_arrayref ($type_instances,
+    [reverse qw(anon_pages bounce dirty file_pages mapped page_table_pages slab unstable writeback)]);
+
+  for (@$type_instances)
+  {
+    my $inst = $_;
+    my $file = '';
+    my $title = $opts->{'title'};
+
+    for (@DataDirs)
+    {
+      if (-e "$_/$title-$inst.rrd")
+      {
+	$file = "$_/$title-$inst.rrd";
+	last;
+      }
+    }
+    confess ("No file found for $title") if ($file eq '');
+
+    push (@$sources,
+      {
+	name => $inst,
+	file => $file
+      }
+    );
+  } # for (@$type_instances)
+
+  return (meta_graph_generic_stack ($opts, $sources));
+} # meta_graph_vmpage_number
+
+sub meta_graph_vmpage_action
+{
+  confess ("Wrong number of arguments") if (@_ != 5);
+
+  my $host = shift;
+  my $plugin = shift;
+  my $plugin_instance = shift;
+  my $type = shift;
+  my $type_instances = shift;
+
+  my $opts = {};
+  my $sources = [];
+
+  $opts->{'title'} = "$host/$plugin"
+  . (defined ($plugin_instance) ? "-$plugin_instance" : '') . "/$type";
+  $opts->{'number_format'} = '%6.2lf';
+
+  $opts->{'rrd_opts'} = ['-v', 'Pages'];
+
+  my @files = ();
+
+  $opts->{'colors'} =
+  {
+    activate	  => '00e000',
+    deactivate	  => '00e0ff',
+    free	  => '00e0a0',
+    alloc	  => 'f000f0',
+    refill	  => 'f000a0',
+    scan_direct	  => 'ffb000',
+    scan_kswapd	  => '0000f0',
+    steal	  => '0000a0',
+  };
+
+  _custom_sort_arrayref ($type_instances,
+    [reverse qw(activate deactivate alloc free refill scan_direct scan_kswapd steal)]);
+
+  for (@$type_instances)
+  {
+    my $inst = $_;
+    my $file = '';
+    my $title = $opts->{'title'};
+
+    for (@DataDirs)
+    {
+      if (-e "$_/$title-$inst.rrd")
+      {
+	$file = "$_/$title-$inst.rrd";
+	last;
+      }
+    }
+    confess ("No file found for $title") if ($file eq '');
+
+    push (@$sources,
+      {
+	name => $inst,
+	file => $file
+      }
+    );
+  } # for (@$type_instances)
+
+  return (meta_graph_generic_stack ($opts, $sources));
+} # meta_graph_vmpage_action
 # vim: shiftwidth=2:softtabstop=2:tabstop=8
Only in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.5/contrib: ds_to_color.px
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.4/src/apcups.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.5/src/apcups.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.4/src/apcups.c	2008-10-17 03:24:20.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.5/src/apcups.c	2009-01-03 04:05:29.000000000 +0800
@@ -21,19 +21,12 @@
  * MA 02111-1307, USA.
  *
  * Authors:
  *   Anthony Gialluca <tonyabg at charter.net>
  **/
 
-/*
- * FIXME: Don't know why but without this here atof() was not returning
- * correct values for me. This is behavior that I don't understand and
- * should be examined in closer detail.
- */
-#include <stdlib.h>
-
 #include "collectd.h"
 #include "common.h"      /* rrd_update_file */
 #include "plugin.h"      /* plugin_register, plugin_submit */
 #include "configfile.h"  /* cf_register */
 
 #if HAVE_SYS_TYPES_H
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.4/src/collectd.1 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.5/src/collectd.1
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.4/src/collectd.1	2008-10-17 04:10:06.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.5/src/collectd.1	2008-12-03 06:27:02.000000000 +0800
@@ -1,7 +1,7 @@
-.\" Automatically generated by Pod::Man 2.18 (Pod::Simple 3.05)
+.\" Automatically generated by Pod::Man 2.1801 (Pod::Simple 3.05)
 .\"
 .\" Standard preamble:
 .\" ========================================================================
 .de Sp \" Vertical space (when we can't use .PP)
 .if t .sp .5v
 .if n .sp
@@ -120,1394 +120,115 @@
 .    ds ae ae
 .    ds Ae AE
 .\}
 .rm #[ #] #H #V #F C
 .\" ========================================================================
 .\"
-.IX Title "COLLECTD.CONF 5"
-.TH COLLECTD.CONF 5 "2008-10-16" "4.4.4" "collectd"
+.IX Title "COLLECTD 1"
+.TH COLLECTD 1 "2008-11-25" "4.5.1.18.g68ab7da" "collectd"
 .\" For nroff, turn off justification.  Always turn off hyphenation; it makes
 .\" way too many mistakes in technical documents.
 .if n .ad l
 .nh
 .SH "NAME"
-collectd.conf \- Configuration for the system statistics collection daemon \fBcollectd\fR
+collectd \- System statistics collection daemon
 .SH "SYNOPSIS"
 .IX Header "SYNOPSIS"
-.Vb 3
-\&  BaseDir "/path/to/data/"
-\&  PIDFile "/path/to/pidfile/collectd.pid"
-\&  Server  "123.123.123.123" 12345
-\&
-\&  LoadPlugin cpu
-\&  LoadPlugin load
-\&  LoadPlugin ping
-\&
-\&  <Plugin ping>
-\&    Host "example.org"
-\&    Host "provider.net"
-\&  </Plugin>
-.Ve
+collectd \fI[options]\fR
 .SH "DESCRIPTION"
 .IX Header "DESCRIPTION"
-This config file controls how the system statistics collection daemon
-\&\fBcollectd\fR behaves. The most significant option is \fBLoadPlugin\fR, which
-controls which plugins to load. These plugins ultimately define collectd's
-behavior.
+collectd is a daemon that receives system statistics and makes them available
+in a number of ways. The main daemon itself doesn't have any real functionality
+apart from loading, querying and submitting to plugins. For a description of
+available plugins please see \*(L"\s-1PLUGINS\s0\*(R" below.
+.SH "OPTIONS"
+.IX Header "OPTIONS"
+Most of collectd's configuration is done using using a configfile. See
+\&\fIcollectd.conf\fR\|(5) for an in-depth description of all options.
+.IP "\fB\-C\fR \fI<config\-file>\fR" 4
+.IX Item "-C <config-file>"
+Specify an alternative config file. This is the place to go when you wish to
+change \fBcollectd\fR's behavior. The path may be relative to the current working
+directory.
+.IP "\fB\-t\fR" 4
+.IX Item "-t"
+Test the configuration only. The program immediately exits after parsing the
+config file. A return code not equal to zero indicates an error.
+.IP "\fB\-P\fR \fI<pid\-file>\fR" 4
+.IX Item "-P <pid-file>"
+Specify an alternative pid file. This overwrites any settings in the config 
+file. This is thought for init-scripts that require the PID-file in a certain
+directory to work correctly. For everyday-usage use the \fBPIDFile\fR
+config-option.
+.IP "\fB\-f\fR" 4
+.IX Item "-f"
+Don't fork to the background. \fIcollectd\fR will also \fBnot\fR close standard file
+descriptors, detach from the session nor write a pid file. This is mainly
+thought for 'supervising' init replacements such as \fIrunit\fR.
+.IP "\fB\-h\fR" 4
+.IX Item "-h"
+Output usage information and exit.
+.SH "PLUGINS"
+.IX Header "PLUGINS"
+As noted above, the real power of collectd lies within it's plugins. A
+(hopefully complete) list of plugins and short descriptions can be found in the
+\&\fI\s-1README\s0\fR file that is distributed with the sourcecode. If you're using a
+package it's a good bet to search somewhere near \fI/usr/share/doc/collectd\fR.
 .PP
-The syntax of this config file is similar to the config file of the famous
-\&\fBApache Webserver\fR. Each line contains either a key-value-pair or a
-section-start or \-end. Empty lines and everything after the hash-symbol `#' is
-ignored. Values are either string, enclosed in double-quotes,
-(floating\-point\-)numbers or a boolean expression, i.\ e. either \fBtrue\fR or
-\&\fBfalse\fR. String containing of only alphanumeric characters and underscores do
-not need to be quoted.
-.PP
-The configuration is read and processed in order, i.\ e. from top to
-bottom. So the plugins are loaded in the order listed in this config file. It
-is a good idea to load any logging plugins first in order to catch messages
-from plugins during configuration. Also, the \f(CW\*(C`LoadPlugin\*(C'\fR option \fBmust\fR occur
-\&\fBbefore\fR the \f(CW\*(C`<Plugin ...>\*(C'\fR block.
-.SH "GLOBAL OPTIONS"
-.IX Header "GLOBAL OPTIONS"
-.IP "\fBBaseDir\fR \fIDirectory\fR" 4
-.IX Item "BaseDir Directory"
-Sets the base directory. This is the directory beneath all RRD-files are
-created. Possibly more subdirectories are created. This is also the working
-directory for the daemon.
-.IP "\fBLoadPlugin\fR \fIPlugin\fR" 4
-.IX Item "LoadPlugin Plugin"
-Loads the plugin \fIPlugin\fR. There must be at least one such line or \fBcollectd\fR
-will be mostly useless.
-.IP "\fBInclude\fR \fIPath\fR" 4
-.IX Item "Include Path"
-If \fIPath\fR points to a file, includes that file. If \fIPath\fR points to a
-directory, recursively includes all files within that directory and its
-subdirectories. If the \f(CW\*(C`wordexp\*(C'\fR function is available on your system,
-shell-like wildcards are expanded before files are included. This means you can
-use statements like the following:
-.Sp
-.Vb 1
-\&  Include "/etc/collectd.d/*.conf"
-.Ve
-.Sp
-If more than one files are included by a single \fBInclude\fR option, the files
-will be included in lexicographical order (as defined by the \f(CW\*(C`strcmp\*(C'\fR
-function). Thus, you can e.\ g. use numbered prefixes to specify the
-order in which the files are loaded.
-.Sp
-To prevent loops and shooting yourself in the foot in interesting ways the
-nesting is limited to a depth of 8\ levels, which should be sufficient for
-most uses. Since symlinks are followed it is still possible to crash the daemon
-by looping symlinks. In our opinion significant stupidity should result in an
-appropriate amount of pain.
-.Sp
-It is no problem to have a block like \f(CW\*(C`<Plugin foo>\*(C'\fR in more than one
-file, but you cannot include files from within blocks.
-.IP "\fBPIDFile\fR \fIFile\fR" 4
-.IX Item "PIDFile File"
-Sets where to write the \s-1PID\s0 file to. This file is overwritten when it exists
-and deleted when the program is stopped. Some init-scripts might override this
-setting using the \fB\-P\fR command-line option.
-.IP "\fBPluginDir\fR \fIDirectory\fR" 4
-.IX Item "PluginDir Directory"
-Path to the plugins (shared objects) of collectd.
-.IP "\fBTypesDB\fR \fIFile\fR [\fIFile\fR ...]" 4
-.IX Item "TypesDB File [File ...]"
-Set one or more files that contain the data-set descriptions. See
-\&\fItypes.db\fR\|(5) for a description of the format of this file.
-.IP "\fBInterval\fR \fISeconds\fR" 4
-.IX Item "Interval Seconds"
-Configures the interval in which to query the read plugins. Obviously smaller
-values lead to a higher system load produced by collectd, while higher values
-lead to more coarse statistics.
-.IP "\fBReadThreads\fR \fINum\fR" 4
-.IX Item "ReadThreads Num"
-Number of threads to start for reading plugins. The default value is \fB5\fR, but
-you may want to increase this if you have more than five plugins that take a
-long time to read. Mostly those are plugin that do network-IO. Setting this to
-a value higher than the number of plugins you've loaded is totally useless.
-.IP "\fBHostname\fR \fIName\fR" 4
-.IX Item "Hostname Name"
-Sets the hostname that identifies a host. If you omit this setting, the
-hostname will be determinded using the \fIgethostname\fR\|(2) system call.
-.IP "\fBFQDNLookup\fR \fBtrue|false\fR" 4
-.IX Item "FQDNLookup true|false"
-If \fBHostname\fR is determined automatically this setting controls whether or not
-the daemon should try to figure out the \*(L"fully qualified domain name\*(R", \s-1FQDN\s0.
-This is done using a lookup of the name returned by \f(CW\*(C`gethostname\*(C'\fR.
-.Sp
-Using this feature (i.\ e. setting this option to \fBtrue\fR) is recommended.
-However, to preserve backwards compatibility the default is set to \fBfalse\fR.
-The sample config file that is installed with \f(CW\*(C`make\ install\*(C'\fR includes a
-line which sets this option, though, so that default installations will have
-this setting enabled.
-.SH "PLUGIN OPTIONS"
-.IX Header "PLUGIN OPTIONS"
-Some plugins may register own options. These options must be enclosed in a
-\&\f(CW\*(C`Plugin\*(C'\fR\-Section. Which options exist depends on the plugin used. Some plugins
-require external configuration, too. The \f(CW\*(C`apache plugin\*(C'\fR, for example,
-required \f(CW\*(C`mod_status\*(C'\fR to be configured in the webserver you're going to
-collect data from. These plugins are listed below as well, even if they don't
-require any configuration within collectd's configfile.
-.PP
-A list of all plugins and a short summary for each plugin can be found in the
-\&\fI\s-1README\s0\fR file shipped with the sourcecode and hopefully binary packets as
-well.
-.ie n .SS "Plugin ""apache"""
-.el .SS "Plugin \f(CWapache\fP"
-.IX Subsection "Plugin apache"
-To configure the \f(CW\*(C`apache\*(C'\fR\-plugin you first need to configure the Apache
-webserver correctly. The Apache-plugin \f(CW\*(C`mod_status\*(C'\fR needs to be loaded and
-working and the \f(CW\*(C`ExtendedStatus\*(C'\fR directive needs to be \fBenabled\fR. You can use
-the following snipped to base your Apache config upon:
-.PP
-.Vb 6
-\&  ExtendedStatus on
-\&  <IfModule mod_status.c>
-\&    <Location /mod_status>
-\&      SetHandler server\-status
-\&    </Location>
-\&  </IfModule>
-.Ve
-.PP
-Since its \f(CW\*(C`mod_status\*(C'\fR module is very similar to Apache's, \fBlighttpd\fR is
-also supported. It introduces a new field, called \f(CW\*(C`BusyServers\*(C'\fR, to count the
-number of currently connected clients. This field is also supported.
-.PP
-The following options are accepted by the \f(CW\*(C`apache\*(C'\fR\-plugin:
-.IP "\fB\s-1URL\s0\fR \fIhttp://host/mod_status?auto\fR" 4
-.IX Item "URL http://host/mod_status?auto"
-Sets the \s-1URL\s0 of the \f(CW\*(C`mod_status\*(C'\fR output. This needs to be the output generated
-by \f(CW\*(C`ExtendedStatus on\*(C'\fR and it needs to be the machine readable output
-generated by appending the \f(CW\*(C`?auto\*(C'\fR argument.
-.IP "\fBUser\fR \fIUsername\fR" 4
-.IX Item "User Username"
-Optional user name needed for authentication.
-.IP "\fBPassword\fR \fIPassword\fR" 4
-.IX Item "Password Password"
-Optional password needed for authentication.
-.IP "\fBVerifyPeer\fR \fBtrue|false\fR" 4
-.IX Item "VerifyPeer true|false"
-Enable or disable peer \s-1SSL\s0 certificate verification. See
-<http://curl.haxx.se/docs/sslcerts.html> for details. Enabled by default.
-.IP "\fBVerifyHost\fR \fBtrue|false\fR" 4
-.IX Item "VerifyHost true|false"
-Enable or disable peer host name verification. If enabled, the plugin checks
-if the \f(CW\*(C`Common Name\*(C'\fR or a \f(CW\*(C`Subject Alternate Name\*(C'\fR field of the \s-1SSL\s0
-certificate matches the host name provided by the \fB\s-1URL\s0\fR option. If this
-identity check fails, the connection is aborted. Obviously, only works when
-connecting to a \s-1SSL\s0 enabled server. Enabled by default.
-.IP "\fBCACert\fR \fIFile\fR" 4
-.IX Item "CACert File"
-File that holds one or more \s-1SSL\s0 certificates. If you want to use \s-1HTTPS\s0 you will
-possibly need this option. What \s-1CA\s0 certificates come bundled with \f(CW\*(C`libcurl\*(C'\fR
-and are checked by default depends on the distribution you use.
-.ie n .SS "Plugin ""apcups"""
-.el .SS "Plugin \f(CWapcups\fP"
-.IX Subsection "Plugin apcups"
-.IP "\fBHost\fR \fIHostname\fR" 4
-.IX Item "Host Hostname"
-Hostname of the host running \fBapcupsd\fR. Defaults to \fBlocalhost\fR. Please note
-that IPv6 support has been disabled unless someone can confirm or decline that
-\&\fBapcupsd\fR can handle it.
-.IP "\fBPort\fR \fIPort\fR" 4
-.IX Item "Port Port"
-TCP-Port to connect to. Defaults to \fB3551\fR.
-.ie n .SS "Plugin ""ascent"""
-.el .SS "Plugin \f(CWascent\fP"
-.IX Subsection "Plugin ascent"
-This plugin collects information about an Ascent server, a free server for the
-\&\*(L"World of Warcraft\*(R" game. This plugin gathers the information by fetching the
-\&\s-1XML\s0 status page using \f(CW\*(C`libcurl\*(C'\fR and parses it using \f(CW\*(C`libxml2\*(C'\fR.
-.PP
-The configuration options are the same as for the \f(CW\*(C`apache\*(C'\fR plugin above:
-.IP "\fB\s-1URL\s0\fR \fIhttp://localhost/ascent/status/\fR" 4
-.IX Item "URL http://localhost/ascent/status/"
-Sets the \s-1URL\s0 of the \s-1XML\s0 status output.
-.IP "\fBUser\fR \fIUsername\fR" 4
-.IX Item "User Username"
-Optional user name needed for authentication.
-.IP "\fBPassword\fR \fIPassword\fR" 4
-.IX Item "Password Password"
-Optional password needed for authentication.
-.IP "\fBCACert\fR \fIFile\fR" 4
-.IX Item "CACert File"
-File that holds one or more \s-1SSL\s0 certificates. If you want to use \s-1HTTPS\s0 you will
-possibly need this option. What \s-1CA\s0 certificates come bundled with \f(CW\*(C`libcurl\*(C'\fR
-and are checked by default depends on the distribution you use.
-.ie n .SS "Plugin ""cpufreq"""
-.el .SS "Plugin \f(CWcpufreq\fP"
-.IX Subsection "Plugin cpufreq"
-This plugin doesn't have any options. It reads
-\&\fI/sys/devices/system/cpu/cpu0/cpufreq/scaling_cur_freq\fR (for the first \s-1CPU\s0
-installed) to get the current \s-1CPU\s0 frequency. If this file does not exist make
-sure \fBcpufreqd\fR (<http://cpufreqd.sourceforge.net/>) or a similar tool is
-installed and an \*(L"cpu governor\*(R" (that's a kernel module) is loaded.
-.ie n .SS "Plugin ""csv"""
-.el .SS "Plugin \f(CWcsv\fP"
-.IX Subsection "Plugin csv"
-.IP "\fBDataDir\fR \fIDirectory\fR" 4
-.IX Item "DataDir Directory"
-Set the directory to store CSV-files under. Per default CSV-files are generated
-beneath the daemon's working directory, i.\ e. the \fBBaseDir\fR.
-.IP "\fBStoreRates\fR \fBtrue|false\fR" 4
-.IX Item "StoreRates true|false"
-If set to \fBtrue\fR, convert counter values to rates. If set to \fBfalse\fR (the
-default) counter values are stored as is, i.\ e. as an increasing integer
-number.
-.ie n .SS "Plugin ""df"""
-.el .SS "Plugin \f(CWdf\fP"
-.IX Subsection "Plugin df"
-.IP "\fBDevice\fR \fIDevice\fR" 4
-.IX Item "Device Device"
-Select partitions based on the devicename.
-.IP "\fBMountPoint\fR \fIDirectory\fR" 4
-.IX Item "MountPoint Directory"
-Select partitions based on the mountpoint.
-.IP "\fBFSType\fR \fIFSType\fR" 4
-.IX Item "FSType FSType"
-Select partitions based on the filesystem type.
-.IP "\fBIgnoreSelected\fR \fItrue\fR|\fIfalse\fR" 4
-.IX Item "IgnoreSelected true|false"
-Invert the selection: If set to true, all partitions \fBexcept\fR the ones that
-match any one of the criteria are collected. By default only selected
-partitions are collected if a selection is made. If no selection is configured
-at all, \fBall\fR partitions are selected.
-.ie n .SS "Plugin ""disk"""
-.el .SS "Plugin \f(CWdisk\fP"
-.IX Subsection "Plugin disk"
-The \f(CW\*(C`disk\*(C'\fR plugin collects information about the usage of physical disks and
-logical disks (partitions). Values collected are the number of octets written
-to and read from a disk or partition, the number of read/write operations
-issued to the disk and a rather complex \*(L"time\*(R" it took for these commands to be
-issued.
-.PP
-Using the following two options you can ignore some disks or configure the
-collection only of specific disks.
-.IP "\fBDisk\fR \fIName\fR" 4
-.IX Item "Disk Name"
-Select the disk \fIName\fR. Whether it is collected or ignored depends on the
-\&\fBIgnoreSelected\fR setting, see below. As with other plugins that use the
-daemon's ignorelist functionality, a string that starts and ends with a slash
-is interpreted as a regular expression. Examples:
-.Sp
-.Vb 2
-\&  Disk "sdd"
-\&  Disk "/hda[34]/"
-.Ve
-.IP "\fBIgnoreSelected\fR \fBtrue\fR|\fBfalse\fR" 4
-.IX Item "IgnoreSelected true|false"
-Sets whether selected disks, i.\ e. the ones matches by any of the \fBDisk\fR
-statements, are ignored or if all other disks are ignored. The behavior
-(hopefully) is intuitive: If no \fBDisk\fR option is configured, all disks are
-collected. If at least one \fBDisk\fR option is given and no \fBIgnoreSelected\fR or
-set to \fBfalse\fR, \fBonly\fR matching disks will be collected. If \fBIgnoreSelected\fR
-is set to \fBtrue\fR, all disks are collected \fBexcept\fR the ones matched.
-.ie n .SS "Plugin ""dns"""
-.el .SS "Plugin \f(CWdns\fP"
-.IX Subsection "Plugin dns"
-.IP "\fBInterface\fR \fIInterface\fR" 4
-.IX Item "Interface Interface"
-The dns plugin uses \fBlibpcap\fR to capture dns traffic and analyses it. This
-option sets the interface that should be used. If this option is not set, or
-set to \*(L"any\*(R", the plugin will try to get packets from \fBall\fR interfaces. This
-may not work on certain platforms, such as Mac\ \s-1OS\s0\ X.
-.IP "\fBIgnoreSource\fR \fIIP-address\fR" 4
-.IX Item "IgnoreSource IP-address"
-Ignore packets that originate from this address.
-.ie n .SS "Plugin ""email"""
-.el .SS "Plugin \f(CWemail\fP"
-.IX Subsection "Plugin email"
-.IP "\fBSocketFile\fR \fIPath\fR" 4
-.IX Item "SocketFile Path"
-Sets the socket-file which is to be created.
-.IP "\fBSocketGroup\fR \fIGroup\fR" 4
-.IX Item "SocketGroup Group"
-If running as root change the group of the UNIX-socket after it has been
-created. Defaults to \fBcollectd\fR.
-.IP "\fBSocketPerms\fR \fIPermissions\fR" 4
-.IX Item "SocketPerms Permissions"
-Change the file permissions of the UNIX-socket after it has been created. The
-permissions must be given as a numeric, octal value as you would pass to
-\&\fIchmod\fR\|(1). Defaults to \fB0770\fR.
-.IP "\fBMaxConns\fR \fINumber\fR" 4
-.IX Item "MaxConns Number"
-Sets the maximum number of connections that can be handled in parallel. Since
-this many threads will be started immediately setting this to a very high
-value will waste valuable resources. Defaults to \fB5\fR and will be forced to be
-at most \fB16384\fR to prevent typos and dumb mistakes.
-.ie n .SS "Plugin ""exec"""
-.el .SS "Plugin \f(CWexec\fP"
-.IX Subsection "Plugin exec"
-Please make sure to read \fIcollectd\-exec\fR\|(5) before using this plugin. It
-contains valuable information on when the executable is executed and the
-output that is expected from it.
-.IP "\fBExec\fR \fIUser\fR[:[\fIGroup\fR]] \fIExecutable\fR [\fI<arg>\fR [\fI<arg>\fR ...]]" 4
-.IX Item "Exec User[:[Group]] Executable [<arg> [<arg> ...]]"
-.PD 0
-.IP "\fBNotificationExec\fR \fIUser\fR[:[\fIGroup\fR]] \fIExecutable\fR [\fI<arg>\fR [\fI<arg>\fR ...]]" 4
-.IX Item "NotificationExec User[:[Group]] Executable [<arg> [<arg> ...]]"
-.PD
-Execute the executable \fIExecutable\fR as user \fIUser\fR. If the user name is
-followed by a colon and a group name, the effective group is set to that group.
-The real group and saved-set group will be set to the default group of that
-user. If no group is given the effective group \s-1ID\s0 will be the same as the real
-group \s-1ID\s0.
-.Sp
-Please note that in order to change the user and/or group the daemon needs
-superuser privileges. If the daemon is run as an unprivileged user you must
-specify the same user/group here. If the daemon is run with superuser
-privileges, you must supply a non-root user here.
-.Sp
-The executable may be followed by optional arguments that are passed to the
-program. Please note that due to the configuration parsing numbers and boolean
-values may be changed. If you want to be absolutely sure that something is
-passed as-is please enclose it in quotes.
-.Sp
-The \fBExec\fR and \fBNotificationExec\fR statements change the semantics of the
-programs executed, i.\ e. the data passed to them and the response
-expected from them. This is documented in great detail in \fIcollectd\-exec\fR\|(5).
-.ie n .SS "Plugin ""hddtemp"""
-.el .SS "Plugin \f(CWhddtemp\fP"
-.IX Subsection "Plugin hddtemp"
-To get values from \fBhddtemp\fR collectd connects to \fBlocalhost\fR (127.0.0.1),
-port \fB7634/tcp\fR. The \fBHost\fR and \fBPort\fR options can be used to change these
-default values, see below. \f(CW\*(C`hddtemp\*(C'\fR has to be running to work correctly. If
-\&\f(CW\*(C`hddtemp\*(C'\fR is not running timeouts may appear which may interfere with other
-statistics..
-.PP
-The \fBhddtemp\fR homepage can be found at
-<http://www.guzu.net/linux/hddtemp.php>.
-.IP "\fBHost\fR \fIHostname\fR" 4
-.IX Item "Host Hostname"
-Hostname to connect to. Defaults to \fB127.0.0.1\fR.
-.IP "\fBPort\fR \fIPort\fR" 4
-.IX Item "Port Port"
-TCP-Port to connect to. Defaults to \fB7634\fR.
-.IP "\fBTranslateDevicename\fR \fItrue\fR|\fIfalse\fR" 4
-.IX Item "TranslateDevicename true|false"
-If enabled, translate the disk names to major/minor device numbers
-(e.\ g. \*(L"8\-0\*(R" for /dev/sda). For backwards compatibility this defaults to
-\&\fItrue\fR but it's recommended to disable it as it will probably be removed in
-the next major version.
-.ie n .SS "Plugin ""interface"""
-.el .SS "Plugin \f(CWinterface\fP"
-.IX Subsection "Plugin interface"
-.IP "\fBInterface\fR \fIInterface\fR" 4
-.IX Item "Interface Interface"
-Select this interface. By default these interfaces will then be collected. For
-a more detailed description see \fBIgnoreSelected\fR below.
-.IP "\fBIgnoreSelected\fR \fItrue\fR|\fIfalse\fR" 4
-.IX Item "IgnoreSelected true|false"
-If no configuration if given, the \fBtraffic\fR\-plugin will collect data from
-all interfaces. This may not be practical, especially for loopback\- and
-similar interfaces. Thus, you can use the \fBInterface\fR\-option to pick the
-interfaces you're interested in. Sometimes, however, it's easier/preferred
-to collect all interfaces \fIexcept\fR a few ones. This option enables you to
-do that: By setting \fBIgnoreSelected\fR to \fItrue\fR the effect of
-\&\fBInterface\fR is inversed: All selected interfaces are ignored and all
-other interfaces are collected.
-.ie n .SS "Plugin ""ipmi"""
-.el .SS "Plugin \f(CWipmi\fP"
-.IX Subsection "Plugin ipmi"
-.IP "\fBSensor\fR \fISensor\fR" 4
-.IX Item "Sensor Sensor"
-Selects sensors to collect or to ignore, depending on \fBIgnoreSelected\fR.
-.IP "\fBIgnoreSelected\fR \fItrue\fR|\fIfalse\fR" 4
-.IX Item "IgnoreSelected true|false"
-If no configuration if given, the \fBipmi\fR plugin will collect data from all
-sensors found of type \*(L"temperature\*(R", \*(L"voltage\*(R", \*(L"current\*(R" and \*(L"fanspeed\*(R".
-This option enables you to do that: By setting \fBIgnoreSelected\fR to \fItrue\fR
-the effect of \fBSensor\fR is inverted: All selected sensors are ignored and
-all other sensors are collected.
-.ie n .SS "Plugin ""iptables"""
-.el .SS "Plugin \f(CWiptables\fP"
-.IX Subsection "Plugin iptables"
-.IP "\fBChain\fR \fITable\fR \fIChain\fR [\fIComment|Number\fR [\fIName\fR]]" 4
-.IX Item "Chain Table Chain [Comment|Number [Name]]"
-Select the rules to count. If only \fITable\fR and \fIChain\fR are given, this plugin
-will collect the counters of all rules which have a comment-match. The comment
-is then used as type-instance.
-.Sp
-If \fIComment\fR or \fINumber\fR is given, only the rule with the matching comment or
-the \fIn\fRth rule will be collected. Again, the comment (or the number) will be
-used as the type-instance.
-.Sp
-If \fIName\fR is supplied, it will be used as the type-instance instead of the
-comment or the number.
-.ie n .SS "Plugin ""irq"""
-.el .SS "Plugin \f(CWirq\fP"
-.IX Subsection "Plugin irq"
-.IP "\fBIrq\fR \fIIrq\fR" 4
-.IX Item "Irq Irq"
-Select this irq. By default these irqs will then be collected. For a more
-detailed description see \fBIgnoreSelected\fR below.
-.IP "\fBIgnoreSelected\fR \fItrue\fR|\fIfalse\fR" 4
-.IX Item "IgnoreSelected true|false"
-If no configuration if given, the \fBirq\fR\-plugin will collect data from all
-irqs. This may not be practical, especially if no interrupts happen. Thus, you
-can use the \fBIrq\fR\-option to pick the interrupt you're interested in.
-Sometimes, however, it's easier/preferred to collect all interrupts \fIexcept\fR a
-few ones. This option enables you to do that: By setting \fBIgnoreSelected\fR to
-\&\fItrue\fR the effect of \fBIrq\fR is inversed: All selected interrupts are ignored
-and all other interrupts are collected.
-.ie n .SS "Plugin ""libvirt"""
-.el .SS "Plugin \f(CWlibvirt\fP"
-.IX Subsection "Plugin libvirt"
-This plugin allows \s-1CPU\s0, disk and network load to be collected for virtualized
-guests on the machine. This means that these characteristics can be collected
-for guest systems without installing any software on them \- collectd only runs
-on the hosting system. The statistics are collected through libvirt
-(<http://libvirt.org/>).
-.PP
-Only \fIConnection\fR is required.
-.IP "\fBConnection\fR \fIuri\fR" 4
-.IX Item "Connection uri"
-Connect to the hypervisor given by \fIuri\fR. For example if using Xen use:
-.Sp
-.Vb 1
-\& Connection "xen:///"
-.Ve
-.Sp
-Details which URIs allowed are given at <http://libvirt.org/uri.html>.
-.IP "\fBRefreshInterval\fR \fIseconds\fR" 4
-.IX Item "RefreshInterval seconds"
-Refresh the list of domains and devices every \fIseconds\fR. The default is 60
-seconds. Setting this to be the same or smaller than the \fIInterval\fR will cause
-the list of domains and devices to be refreshed on every iteration.
-.Sp
-Refreshing the devices in particular is quite a costly operation, so if your
-virtualization setup is static you might consider increasing this. If this
-option is set to 0, refreshing is disabled completely.
-.IP "\fBDomain\fR \fIname\fR" 4
-.IX Item "Domain name"
-.PD 0
-.IP "\fBBlockDevice\fR \fIname:dev\fR" 4
-.IX Item "BlockDevice name:dev"
-.IP "\fBInterfaceDevice\fR \fIname:dev\fR" 4
-.IX Item "InterfaceDevice name:dev"
-.IP "\fBIgnoreSelected\fR \fItrue\fR|\fIfalse\fR" 4
-.IX Item "IgnoreSelected true|false"
-.PD
-Select which domains and devices are collected.
-.Sp
-If \fIIgnoreSelected\fR is not given or \fIfalse\fR then only the listed domains and
-disk/network devices are collected.
-.Sp
-If \fIIgnoreSelected\fR is \fItrue\fR then the test is reversed and the listed
-domains and disk/network devices are ignored, while the rest are collected.
-.Sp
-The domain name and device names may use a regular expression, if the name is
-surrounded by \fI/.../\fR and collectd was compiled with support for regexps.
-.Sp
-The default is to collect statistics for all domains and all their devices.
-.Sp
-Example:
-.Sp
-.Vb 2
-\& BlockDevice "/:hdb/"
-\& IgnoreSelected "true"
-.Ve
-.Sp
-Ignore all \fIhdb\fR devices on any domain, but other block devices (eg. \fIhda\fR)
-will be collected.
-.IP "\fBHostnameFormat\fR \fBname|uuid|hostname|...\fR" 4
-.IX Item "HostnameFormat name|uuid|hostname|..."
-When the libvirt plugin logs data, it sets the hostname of the collected data
-according to this setting. The default is to use the guest name as provided by
-the hypervisor, which is equal to setting \fBname\fR.
-.Sp
-\&\fBuuid\fR means use the guest's \s-1UUID\s0. This is useful if you want to track the
-same guest across migrations.
-.Sp
-\&\fBhostname\fR means to use the global \fBHostname\fR setting, which is probably not
-useful on its own because all guests will appear to have the same name.
-.Sp
-You can also specify combinations of these fields. For example \fBname uuid\fR
-means to concatenate the guest name and \s-1UUID\s0 (with a literal colon character
-between, thus \fI\*(L"foo:1234\-1234\-1234\-1234\*(R"\fR).
-.ie n .SS "Plugin ""logfile"""
-.el .SS "Plugin \f(CWlogfile\fP"
-.IX Subsection "Plugin logfile"
-.IP "\fBLogLevel\fR \fBdebug|info|notice|warning|err\fR" 4
-.IX Item "LogLevel debug|info|notice|warning|err"
-Sets the log-level. If, for example, set to \fBnotice\fR, then all events with
-severity \fBnotice\fR, \fBwarning\fR, or \fBerr\fR will be written to the logfile.
-.Sp
-Please note that \fBdebug\fR is only available if collectd has been compiled with
-debugging support.
-.IP "\fBFile\fR \fIFile\fR" 4
-.IX Item "File File"
-Sets the file to write log messages to. The special strings \fBstdout\fR and
-\&\fBstderr\fR can be used to write to the standard output and standard error
-channels, respectively. This, of course, only makes much sense when collectd is
-running in foreground\- or non-daemon-mode.
-.IP "\fBTimestamp\fR \fBtrue\fR|\fBfalse\fR" 4
-.IX Item "Timestamp true|false"
-Prefix all lines printed by the current time. Defaults to \fBtrue\fR.
-.ie n .SS "Plugin ""mbmon"""
-.el .SS "Plugin \f(CWmbmon\fP"
-.IX Subsection "Plugin mbmon"
-The \f(CW\*(C`mbmon plugin\*(C'\fR uses mbmon to retrieve temperature, voltage, etc.
-.PP
-Be default collectd connects to \fBlocalhost\fR (127.0.0.1), port \fB411/tcp\fR. The
-\&\fBHost\fR and \fBPort\fR options can be used to change these values, see below.
-\&\f(CW\*(C`mbmon\*(C'\fR has to be running to work correctly. If \f(CW\*(C`mbmon\*(C'\fR is not running
-timeouts may appear which may interfere with other statistics..
-.PP
-\&\f(CW\*(C`mbmon\*(C'\fR must be run with the \-r option (\*(L"print \s-1TAG\s0 and Value format\*(R");
-Debian's \fI/etc/init.d/mbmon\fR script already does this, other people
-will need to ensure that this is the case.
-.IP "\fBHost\fR \fIHostname\fR" 4
-.IX Item "Host Hostname"
-Hostname to connect to. Defaults to \fB127.0.0.1\fR.
-.IP "\fBPort\fR \fIPort\fR" 4
-.IX Item "Port Port"
-TCP-Port to connect to. Defaults to \fB411\fR.
-.ie n .SS "Plugin ""memcached"""
-.el .SS "Plugin \f(CWmemcached\fP"
-.IX Subsection "Plugin memcached"
-The \f(CW\*(C`memcached plugin\*(C'\fR connects to a memcached server and queries statistics
-about cache utilization, memory and bandwidth used.
-<http://www.danga.com/memcached/>
-.IP "\fBHost\fR \fIHostname\fR" 4
-.IX Item "Host Hostname"
-Hostname to connect to. Defaults to \fB127.0.0.1\fR.
-.IP "\fBPort\fR \fIPort\fR" 4
-.IX Item "Port Port"
-TCP-Port to connect to. Defaults to \fB11211\fR.
-.ie n .SS "Plugin ""mysql"""
-.el .SS "Plugin \f(CWmysql\fP"
-.IX Subsection "Plugin mysql"
-The \f(CW\*(C`mysql plugin\*(C'\fR requires \fBmysqlclient\fR to be installed. It connects to the
-database when started and keeps the connection up as long as possible. When the
-connection is interrupted for whatever reason it will try to re-connect. The
-plugin will complaint loudly in case anything goes wrong.
-.PP
-This plugin issues \f(CW\*(C`SHOW STATUS\*(C'\fR and evaluates \f(CW\*(C`Bytes_{received,sent}\*(C'\fR,
-\&\f(CW\*(C`Com_*\*(C'\fR and \f(CW\*(C`Handler_*\*(C'\fR which correspond to \fImysql_octets.rrd\fR,
-\&\fImysql_commands\-*.rrd\fR and \fImysql_handler\-*.rrd\fR. Also, the values of
-\&\f(CW\*(C`Qcache_*\*(C'\fR are put in \fImysql_qcache.rrd\fR and values of \f(CW\*(C`Threads_*\*(C'\fR are put
-in \fImysql_threads.rrd\fR. Please refer to the \fBMySQL reference manual\fR,
-\&\fI5.2.4. Server Status Variables\fR for an explanation of these values.
-.PP
-Use the following options to configure the plugin:
-.IP "\fBHost\fR \fIHostname\fR" 4
-.IX Item "Host Hostname"
-Hostname of the database server. Defaults to \fBlocalhost\fR.
-.IP "\fBUser\fR \fIUsername\fR" 4
-.IX Item "User Username"
-Username to use when connecting to the database.
-.IP "\fBPassword\fR \fIPassword\fR" 4
-.IX Item "Password Password"
-Password needed to log into the database.
-.IP "\fBDatabase\fR \fIDatabase\fR" 4
-.IX Item "Database Database"
-Select this database. Defaults to \fIno database\fR which is a perfectly reasonable
-option for what this plugin does.
-.ie n .SS "Plugin ""netlink"""
-.el .SS "Plugin \f(CWnetlink\fP"
-.IX Subsection "Plugin netlink"
-The \f(CW\*(C`netlink\*(C'\fR plugin uses a netlink socket to query the Linux kernel about
-statistics of various interface and routing aspects.
-.IP "\fBInterface\fR \fIInterface\fR" 4
-.IX Item "Interface Interface"
-.PD 0
-.IP "\fBVerboseInterface\fR \fIInterface\fR" 4
-.IX Item "VerboseInterface Interface"
-.PD
-Instruct the plugin to collect interface statistics. This is basically the same
-as the statistics provided by the \f(CW\*(C`interface\*(C'\fR plugin (see above) but
-potentially much more detailed.
-.Sp
-When configuring with \fBInterface\fR only the basic statistics will be collected,
-namely octets, packets, and errors. These statistics are collected by
-the \f(CW\*(C`interface\*(C'\fR plugin, too, so using both at the same time is no benefit.
-.Sp
-When configured with \fBVerboseInterface\fR all counters \fBexcept\fR the basic ones,
-so that no data needs to be collected twice if you use the \f(CW\*(C`interface\*(C'\fR plugin.
-This includes dropped packets, received multicast packets, collisions and a
-whole zoo of differentiated \s-1RX\s0 and \s-1TX\s0 errors. You can try the following command
-to get an idea of what awaits you:
-.Sp
-.Vb 1
-\&  ip \-s \-s link list
-.Ve
-.Sp
-If \fIInterface\fR is \fBAll\fR, all interfaces will be selected.
-.IP "\fBQDisc\fR \fIInterface\fR [\fIQDisc\fR]" 4
-.IX Item "QDisc Interface [QDisc]"
-.PD 0
-.IP "\fBClass\fR \fIInterface\fR [\fIClass\fR]" 4
-.IX Item "Class Interface [Class]"
-.IP "\fBFilter\fR \fIInterface\fR [\fIFilter\fR]" 4
-.IX Item "Filter Interface [Filter]"
-.PD
-Collect the octets and packets that pass a certain qdisc, class or filter.
-.Sp
-QDiscs and classes are identified by their type and handle (or classid).
-Filters don't necessarily have a handle, therefore the parent's handle is used.
-The notation used in collectd differs from that used in \fItc\fR\|(1) in that it
-doesn't skip the major or minor number if it's zero and doesn't print special
-ids by their name. So, for example, a qdisc may be identified by
-\&\f(CW\*(C`pfifo_fast\-1:0\*(C'\fR even though the minor number of \fBall\fR qdiscs is zero and
-thus not displayed by \fItc\fR\|(1).
-.Sp
-If \fBQDisc\fR, \fBClass\fR, or \fBFilter\fR is given without the second argument,
-i.\ .e. without an identifier, all qdiscs, classes, or filters that are
-associated with that interface will be collected.
-.Sp
-Since a filter itself doesn't necessarily have a handle, the parent's handle is
-used. This may lead to problems when more than one filter is attached to a
-qdisc or class. This isn't nice, but we don't know how this could be done any
-better. If you have a idea, please don't hesitate to tell us.
-.Sp
-As with the \fBInterface\fR option you can specify \fBAll\fR as the interface,
-meaning all interfaces.
-.Sp
-Here are some examples to help you understand the above text more easily:
-.Sp
-.Vb 7
-\&  <Plugin netlink>
-\&    VerboseInterface "All"
-\&    QDisc "eth0" "pfifo_fast\-1:0"
-\&    QDisc "ppp0"
-\&    Class "ppp0" "htb\-1:10"
-\&    Filter "ppp0" "u32\-1:0"
-\&  </Plugin>
-.Ve
-.IP "\fBIgnoreSelected\fR" 4
-.IX Item "IgnoreSelected"
-The behaviour is the same as with all other similar plugins: If nothing is
-selected at all, everything is collected. If some things are selected using the
-options described above, only these statistics are collected. If you set
-\&\fBIgnoreSelected\fR to \fBtrue\fR, this behavior is inversed, i.\ e. the
-specified statistics will not be collected.
-.ie n .SS "Plugin ""network"""
-.el .SS "Plugin \f(CWnetwork\fP"
-.IX Subsection "Plugin network"
-.IP "\fBListen\fR \fIHost\fR [\fIPort\fR]" 4
-.IX Item "Listen Host [Port]"
-.PD 0
-.IP "\fBServer\fR \fIHost\fR [\fIPort\fR]" 4
-.IX Item "Server Host [Port]"
-.PD
-The \fBServer\fR statement sets the server to send datagrams \fBto\fR.  The statement
-may occur multiple times to send each datagram to multiple destinations.
-.Sp
-The \fBListen\fR statement sets the interfaces to bind to. When multiple
-statements are found the daemon will bind to multiple interfaces.
-.Sp
-The argument \fIHost\fR may be a hostname, an IPv4 address or an IPv6 address. If
-the argument is a multicast address the daemon will join that multicast group.
-.Sp
-If no \fBListen\fR statement is found the server tries join both, the default IPv6
-multicast group and the default IPv4 multicast group. If no \fBServer\fR statement
-is found the client will try to send data to the IPv6 multicast group first. If
-that fails the client will try the IPv4 multicast group.
-.Sp
-The default IPv6 multicast group is \f(CW\*(C`ff18::efc0:4a42\*(C'\fR. The default IPv4
-multicast group is \f(CW239.192.74.66\fR.
-.Sp
-The optional \fIPort\fR argument sets the port to use. It can either be given
-using a numeric port number or a service name. If the argument is omitted the
-default port \fB25826\fR is assumed.
-.IP "\fBTimeToLive\fR \fI1\-255\fR" 4
-.IX Item "TimeToLive 1-255"
-Set the time-to-live of sent packets. This applies to all, unicast and
-multicast, and IPv4 and IPv6 packets. The default is to not change this value.
-That means that multicast packets will be sent with a \s-1TTL\s0 of \f(CW1\fR (one) on most
-operating systems.
-.IP "\fBForward\fR \fItrue|false\fR" 4
-.IX Item "Forward true|false"
-If set to \fItrue\fR, write packets that were received via the network plugin to
-the sending sockets. This should only be activated when the \fBListen\fR\- and
-\&\fBServer\fR\-statements differ. Otherwise packets may be send multiple times to
-the same multicast group. While this results in more network traffic than
-necessary it's not a huge problem since the plugin has a duplicate detection,
-so the values will not loop.
-.IP "\fBCacheFlush\fR \fISeconds\fR" 4
-.IX Item "CacheFlush Seconds"
-For each host/plugin/type combination the \f(CW\*(C`network plugin\*(C'\fR caches the time of
-the last value being sent or received. Every \fISeconds\fR seconds the plugin
-searches and removes all entries that are older than \fISeconds\fR seconds, thus
-freeing the unused memory again. Since this process is somewhat expensive and
-normally doesn't do much, this value should not be too small. The default is
-1800 seconds, but setting this to 86400 seconds (one day) will not do much harm
-either.
-.ie n .SS "Plugin ""nginx"""
-.el .SS "Plugin \f(CWnginx\fP"
-.IX Subsection "Plugin nginx"
-This plugin collects the number of connections and requests handled by the
-\&\f(CW\*(C`nginx daemon\*(C'\fR (speak: engine\ X), a \s-1HTTP\s0 and mail server/proxy. It
-queries the page provided by the \f(CW\*(C`ngx_http_stub_status_module\*(C'\fR module, which
-isn't compiled by default. Please refer to
-<http://wiki.codemongers.com/NginxStubStatusModule> for more information on
-how to compile and configure nginx and this module.
-.PP
-The following options are accepted by the \f(CW\*(C`nginx plugin\*(C'\fR:
-.IP "\fB\s-1URL\s0\fR \fIhttp://host/nginx_status\fR" 4
-.IX Item "URL http://host/nginx_status"
-Sets the \s-1URL\s0 of the \f(CW\*(C`ngx_http_stub_status_module\*(C'\fR output.
-.IP "\fBUser\fR \fIUsername\fR" 4
-.IX Item "User Username"
-Optional user name needed for authentication.
-.IP "\fBPassword\fR \fIPassword\fR" 4
-.IX Item "Password Password"
-Optional password needed for authentication.
-.IP "\fBVerifyPeer\fR \fBtrue|false\fR" 4
-.IX Item "VerifyPeer true|false"
-Enable or disable peer \s-1SSL\s0 certificate verification. See
-<http://curl.haxx.se/docs/sslcerts.html> for details. Enabled by default.
-.IP "\fBVerifyHost\fR \fBtrue|false\fR" 4
-.IX Item "VerifyHost true|false"
-Enable or disable peer host name verification. If enabled, the plugin checks
-if the \f(CW\*(C`Common Name\*(C'\fR or a \f(CW\*(C`Subject Alternate Name\*(C'\fR field of the \s-1SSL\s0
-certificate matches the host name provided by the \fB\s-1URL\s0\fR option. If this
-identity check fails, the connection is aborted. Obviously, only works when
-connecting to a \s-1SSL\s0 enabled server. Enabled by default.
-.IP "\fBCACert\fR \fIFile\fR" 4
-.IX Item "CACert File"
-File that holds one or more \s-1SSL\s0 certificates. If you want to use \s-1HTTPS\s0 you will
-possibly need this option. What \s-1CA\s0 certificates come bundled with \f(CW\*(C`libcurl\*(C'\fR
-and are checked by default depends on the distribution you use.
-.ie n .SS "Plugin ""ntpd"""
-.el .SS "Plugin \f(CWntpd\fP"
-.IX Subsection "Plugin ntpd"
-.IP "\fBHost\fR \fIHostname\fR" 4
-.IX Item "Host Hostname"
-Hostname of the host running \fBntpd\fR. Defaults to \fBlocalhost\fR.
-.IP "\fBPort\fR \fIPort\fR" 4
-.IX Item "Port Port"
-UDP-Port to connect to. Defaults to \fB123\fR.
-.IP "\fBReverseLookups\fR \fBtrue\fR|\fBfalse\fR" 4
-.IX Item "ReverseLookups true|false"
-Sets wether or not to perform reverse lookups on peers. Since the name or
-IP-address may be used in a filename it is recommended to disable reverse
-lookups. The default is to do reverse lookups to preserve backwards
-compatibility, though.
-.ie n .SS "Plugin ""nut"""
-.el .SS "Plugin \f(CWnut\fP"
-.IX Subsection "Plugin nut"
-.IP "\fB\s-1UPS\s0\fR \fIupsname\fR\fB@\fR\fIhostname\fR[\fB:\fR\fIport\fR]" 4
-.IX Item "UPS upsname@hostname[:port]"
-Add a \s-1UPS\s0 to collect data from. The format is identical to the one accepted by
-\&\fIupsc\fR\|(8).
-.ie n .SS "Plugin ""perl"""
-.el .SS "Plugin \f(CWperl\fP"
-.IX Subsection "Plugin perl"
-This plugin embeds a Perl-interpreter into collectd and provides an interface
-to collectd's plugin system. See \fIcollectd\-perl\fR\|(5) for its documentation.
-.ie n .SS "Plugin ""ping"""
-.el .SS "Plugin \f(CWping\fP"
-.IX Subsection "Plugin ping"
-.IP "\fBHost\fR \fIIP-address\fR" 4
-.IX Item "Host IP-address"
-Host to ping periodically. This option may be repeated several times to ping
-multiple hosts.
-.IP "\fB\s-1TTL\s0\fR \fI0\-255\fR" 4
-.IX Item "TTL 0-255"
-Sets the Time-To-Live of generated \s-1ICMP\s0 packets.
-.ie n .SS "Plugin ""powerdns"""
-.el .SS "Plugin \f(CWpowerdns\fP"
-.IX Subsection "Plugin powerdns"
-The \f(CW\*(C`powerdns\*(C'\fR plugin queries statistics from an authoritative PowerDNS
-nameserver and/or a PowerDNS recursor. Since both offer a wide variety of
-values, many of which are probably meaningless to most users, but may be useful
-for some. So you may chose which values to collect, but if you don't, some
-reasonable defaults will be collected.
-.PP
-.Vb 10
-\&  <Plugin "powerdns">
-\&    <Server "server_name">
-\&      Collect "latency"
-\&      Collect "udp\-answers" "udp\-queries"
-\&      Socket "/var/run/pdns.controlsocket"
-\&    </Server>
-\&    <Recursor "recursor_name">
-\&      Collect "questions"
-\&      Collect "cache\-hits" "cache\-misses"
-\&      Socket "/var/run/pdns_recursor.controlsocket"
-\&    </Recursor>
-\&    LocalSocket "/opt/collectd/var/run/collectd\-powerdns"
-\&  </Plugin>
-.Ve
-.IP "\fBServer\fR and \fBRecursor\fR block" 4
-.IX Item "Server and Recursor block"
-The \fBServer\fR block defines one authoritative server to query, the \fBRecursor\fR
-does the same for an recursing server. The possible options in both blocks are
-the same, though. The argument defines a name for the server\ / recursor
-and is required.
-.RS 4
-.IP "\fBCollect\fR \fIField\fR" 4
-.IX Item "Collect Field"
-Using the \fBCollect\fR statement you can select which values to collect. Here,
-you specify the name of the values as used by the PowerDNS servers, e.\ g.
-\&\f(CW\*(C`dlg\-only\-drops\*(C'\fR, \f(CW\*(C`answers10\-100\*(C'\fR.
-.Sp
-The method of getting the values differs for \fBServer\fR and \fBRecursor\fR blocks:
-When querying the server a \f(CW\*(C`SHOW *\*(C'\fR command is issued in any case, because
-that's the only way of getting multiple values out of the server at once.
-collectd then picks out the values you have selected. When querying the
-recursor, a command is generated to query exactly these values. So if you
-specify invalid fields when querying the recursor, a syntax error may be
-returned by the daemon and collectd may not collect any values at all.
-.Sp
-If no \fBCollect\fR statement is given, the following \fBServer\fR values will be
-collected:
-.RS 4
-.IP "latency" 4
-.IX Item "latency"
-.PD 0
-.IP "packetcache-hit" 4
-.IX Item "packetcache-hit"
-.IP "packetcache-miss" 4
-.IX Item "packetcache-miss"
-.IP "packetcache-size" 4
-.IX Item "packetcache-size"
-.IP "query-cache-hit" 4
-.IX Item "query-cache-hit"
-.IP "query-cache-miss" 4
-.IX Item "query-cache-miss"
-.IP "recursing-answers" 4
-.IX Item "recursing-answers"
-.IP "recursing-questions" 4
-.IX Item "recursing-questions"
-.IP "tcp-answers" 4
-.IX Item "tcp-answers"
-.IP "tcp-queries" 4
-.IX Item "tcp-queries"
-.IP "udp-answers" 4
-.IX Item "udp-answers"
-.IP "udp-queries" 4
-.IX Item "udp-queries"
-.RE
-.RS 4
-.PD
-.Sp
-The following \fBRecursor\fR values will be collected by default:
-.IP "noerror-answers" 4
-.IX Item "noerror-answers"
-.PD 0
-.IP "nxdomain-answers" 4
-.IX Item "nxdomain-answers"
-.IP "servfail-answers" 4
-.IX Item "servfail-answers"
-.IP "sys-msec" 4
-.IX Item "sys-msec"
-.IP "user-msec" 4
-.IX Item "user-msec"
-.IP "qa-latency" 4
-.IX Item "qa-latency"
-.IP "cache-entries" 4
-.IX Item "cache-entries"
-.IP "cache-hits" 4
-.IX Item "cache-hits"
-.IP "cache-misses" 4
-.IX Item "cache-misses"
-.IP "questions" 4
-.IX Item "questions"
-.RE
-.RS 4
-.PD
-.Sp
-Please note that up to that point collectd doesn't know what values are
-available on the server and values that are added do not need a change of the
-mechanism so far. However, the values must be mapped to collectd's naming
-scheme, which is done using a lookup table that lists all known values. If
-values are added in the future and collectd does not know about them, you will
-get an error much like this:
-.Sp
-.Vb 1
-\&  powerdns plugin: submit: Not found in lookup table: foobar = 42
-.Ve
-.Sp
-In this case please file a bug report with the collectd team.
-.RE
-.IP "\fBSocket\fR \fIPath\fR" 4
-.IX Item "Socket Path"
-Configures the path to the \s-1UNIX\s0 domain socket to be used when connecting to the
-daemon. By default \f(CW\*(C`${localstatedir}/run/pdns.controlsocket\*(C'\fR will be used for
-an authoritative server and \f(CW\*(C`${localstatedir}/run/pdns_recursor.controlsocket\*(C'\fR
-will be used for the recursor.
-.RE
-.RS 4
-.RE
-.IP "\fBLocalSocket\fR \fIPath\fR" 4
-.IX Item "LocalSocket Path"
-Querying the recursor is done using \s-1UDP\s0. When using \s-1UDP\s0 over \s-1UNIX\s0 domain
-sockets, the client socket needs a name in the file system, too. You can set
-this local name to \fIPath\fR using the \fBLocalSocket\fR option. The default is
-\&\f(CW\*(C`\f(CIprefix\f(CW/var/run/collectd\-powerdns\*(C'\fR.
-.ie n .SS "Plugin ""processes"""
-.el .SS "Plugin \f(CWprocesses\fP"
-.IX Subsection "Plugin processes"
-.IP "\fBProcess\fR \fIName\fR" 4
-.IX Item "Process Name"
-Select more detailed statistics of processes matching this name. The statistics
-collected for these selected processes are size of the resident segment size
-(\s-1RSS\s0), user\- and system-time used, number of processes and number of threads,
-and minor and major pagefaults.
-.ie n .SS "Plugin ""rrdtool"""
-.el .SS "Plugin \f(CWrrdtool\fP"
-.IX Subsection "Plugin rrdtool"
-You can use the settings \fBStepSize\fR, \fBHeartBeat\fR, \fBRRARows\fR, and \fB\s-1XFF\s0\fR to
-fine-tune your RRD-files. Please read \fIrrdcreate\fR\|(1) if you encounter problems
-using these settings. If you don't want to dive into the depths of RRDTool, you
-can safely ignore these settings.
-.IP "\fBDataDir\fR \fIDirectory\fR" 4
-.IX Item "DataDir Directory"
-Set the directory to store RRD-files under. Per default RRD-files are generated
-beneath the daemon's working directory, i.\ e. the \fBBaseDir\fR.
-.IP "\fBStepSize\fR \fISeconds\fR" 4
-.IX Item "StepSize Seconds"
-\&\fBForce\fR the stepsize of newly created RRD-files. Ideally (and per default)
-this setting is unset and the stepsize is set to the interval in which the data
-is collected. Do not use this option unless you absolutely have to for some
-reason. Setting this option may cause problems with the \f(CW\*(C`snmp plugin\*(C'\fR, the
-\&\f(CW\*(C`exec plugin\*(C'\fR or when the daemon is set up to receive data from other hosts.
-.IP "\fBHeartBeat\fR \fISeconds\fR" 4
-.IX Item "HeartBeat Seconds"
-\&\fBForce\fR the heartbeat of newly created RRD-files. This setting should be unset
-in which case the heartbeat is set to twice the \fBStepSize\fR which should equal
-the interval in which data is collected. Do not set this option unless you have
-a very good reason to do so.
-.IP "\fBRRARows\fR \fINumRows\fR" 4
-.IX Item "RRARows NumRows"
-The \f(CW\*(C`rrdtool plugin\*(C'\fR calculates the number of PDPs per \s-1CDP\s0 based on the
-\&\fBStepSize\fR, this setting and a timespan. This plugin creates RRD-files with
-three times five RRAs, i. e. five RRAs with the CFs \fB\s-1MIN\s0\fR, \fB\s-1AVERAGE\s0\fR, and
-\&\fB\s-1MAX\s0\fR. The five RRAs are optimized for graphs covering one hour, one day, one
-week, one month, and one year.
-.Sp
-So for each timespan, it calculates how many PDPs need to be consolidated into
-one \s-1CDP\s0 by calculating:
-  number of PDPs = timespan / (stepsize * rrarows)
-.Sp
-Bottom line is, set this no smaller than the width of you graphs in pixels. The
-default is 1200.
-.IP "\fBRRATimespan\fR \fISeconds\fR" 4
-.IX Item "RRATimespan Seconds"
-Adds an RRA-timespan, given in seconds. Use this option multiple times to have
-more then one \s-1RRA\s0. If this option is never used, the built-in default of (3600,
-86400, 604800, 2678400, 31622400) is used.
-.Sp
-For more information on how RRA-sizes are calculated see \fBRRARows\fR above.
-.IP "\fB\s-1XFF\s0\fR \fIFactor\fR" 4
-.IX Item "XFF Factor"
-Set the \*(L"XFiles Factor\*(R". The default is 0.1. If unsure, don't set this option.
-.IP "\fBCacheFlush\fR \fISeconds\fR" 4
-.IX Item "CacheFlush Seconds"
-When the \f(CW\*(C`rrdtool plugin\*(C'\fR uses a cache (by setting \fBCacheTimeout\fR, see below)
-it writes all values for a certain RRD-file if the oldest value is older than
-(or equal to) the number of seconds specified. If some RRD-file is not updated
-anymore for some reason (the computer was shut down, the network is broken,
-etc.) some values may still be in the cache. If \fBCacheFlush\fR is set, then the
-entire cache is searched for entries older than \fBCacheTimeout\fR seconds and
-written to disk every \fISeconds\fR seconds. Since this is kind of expensive and
-does nothing under normal circumstances, this value should not be too small.
-900 seconds might be a good value, though setting this to 7200 seconds doesn't
-normally do much harm either.
-.IP "\fBCacheTimeout\fR \fISeconds\fR" 4
-.IX Item "CacheTimeout Seconds"
-If this option is set to a value greater than zero, the \f(CW\*(C`rrdtool plugin\*(C'\fR will
-save values in a cache, as described above. Writing multiple values at once
-reduces IO-operations and thus lessens the load produced by updating the files.
-The trade off is that the graphs kind of \*(L"drag behind\*(R" and that more memory is
-used.
-.ie n .SS "Plugin ""sensors"""
-.el .SS "Plugin \f(CWsensors\fP"
-.IX Subsection "Plugin sensors"
-The \f(CW\*(C`sensors plugin\*(C'\fR uses \fBlm_sensors\fR to retrieve sensor-values. This means
-that all the needed modules have to be loaded and lm_sensors has to be
-configured (most likely by editing \fI/etc/sensors.conf\fR. Read
-\&\fIsensors.conf\fR\|(5) for details.
-.PP
-The \fBlm_sensors\fR homepage can be found at
-<http://secure.netroedge.com/~lm78/>.
-.IP "\fBSensor\fR \fIchip\-bus\-address/type\-feature\fR" 4
-.IX Item "Sensor chip-bus-address/type-feature"
-Selects the name of the sensor which you want to collect or ignore, depending
-on the \fBIgnoreSelected\fR below. For example, the option "\fBSensor\fR
-\&\fIit8712\-isa\-0290/voltage\-in1\fR" will cause collectd to gather data for the
-voltage sensor \fIin1\fR of the \fIit8712\fR on the isa bus at the address 0290.
-.IP "\fBIgnoreSelected\fR \fItrue\fR|\fIfalse\fR" 4
-.IX Item "IgnoreSelected true|false"
-If no configuration if given, the \fBsensors\fR\-plugin will collect data from all
-sensors. This may not be practical, especially for uninteresting sensors.
-Thus, you can use the \fBSensor\fR\-option to pick the sensors you're interested
-in. Sometimes, however, it's easier/preferred to collect all sensors \fIexcept\fR a
-few ones. This option enables you to do that: By setting \fBIgnoreSelected\fR to
-\&\fItrue\fR the effect of \fBSensor\fR is inversed: All selected sensors are ignored
-and all other sensors are collected.
-.ie n .SS "Plugin ""snmp"""
-.el .SS "Plugin \f(CWsnmp\fP"
-.IX Subsection "Plugin snmp"
-Since the configuration of the \f(CW\*(C`snmp plugin\*(C'\fR is a little more complicated than
-other plugins, its documentation has been moved to an own manpage,
-\&\fIcollectd\-snmp\fR\|(5). Please see there for details.
-.ie n .SS "Plugin ""syslog"""
-.el .SS "Plugin \f(CWsyslog\fP"
-.IX Subsection "Plugin syslog"
-.IP "\fBLogLevel\fR \fBdebug|info|notice|warning|err\fR" 4
-.IX Item "LogLevel debug|info|notice|warning|err"
-Sets the log-level. If, for example, set to \fBnotice\fR, then all events with
-severity \fBnotice\fR, \fBwarning\fR, or \fBerr\fR will be submitted to the
-syslog-daemon.
-.Sp
-Please note that \fBdebug\fR is only available if collectd has been compiled with
-debugging support.
-.ie n .SS "Plugin ""tail"""
-.el .SS "Plugin \f(CWtail\fP"
-.IX Subsection "Plugin tail"
-The \f(CW\*(C`tail plugin\*(C'\fR plugins follows logfiles, just like \fItail\fR\|(1) does, parses
-each line and dispatches found values. What is matched can be configured by the
-user using (extended) regular expressions, as described in \fIregex\fR\|(7).
-.PP
-.Vb 10
-\&  <Plugin "tail">
-\&    <File "/var/log/exim4/mainlog">
-\&      Instance "exim"
-\&      <Match>
-\&        Regex "S=([1\-9][0\-9]*)"
-\&        DSType "CounterAdd"
-\&        Type "ipt_bytes"
-\&        Instance "total"
-\&      </Match>
-\&      <Match>
-\&        Regex "\e\e<R=local_user\e\e>"
-\&        DSType "CounterInc"
-\&        Type "counter"
-\&        Instance "local_user"
-\&      </Match>
-\&    </File>
-\&  </Plugin>
-.Ve
-.PP
-The config consists of one or more \fBFile\fR blocks, each of which configures one
-logfile to parse. Within each \fBFile\fR block, there are one or more \fBMatch\fR
-blocks, which configure a regular expression to search for.
-.PP
-The \fBInstance\fR option in the \fBFile\fR block may be used to set the plugin
-instance. So in the above example the plugin name \f(CW\*(C`tail\-foo\*(C'\fR would be used.
-This plugin instance is for all \fBMatch\fR blocks that \fBfollow\fR it, until the
-next \fBInstance\fR option. This way you can extract several plugin instances from
-one logfile, handy when parsing syslog and the like.
-.PP
-Each \fBMatch\fR block has the following options to describe how the match should
-be performed:
-.IP "\fBRegex\fR \fIregex\fR" 4
-.IX Item "Regex regex"
-Sets the regular expression to use for matching against a line. The first
-subexpression has to match something that can be turned into a number by
-\&\fIstrtoll\fR\|(3) or \fIstrtod\fR\|(3), depending on the value of \f(CW\*(C`CounterAdd\*(C'\fR, see
-below. Because \fBextended\fR regular expressions are used, you do not need to use
-backslashes for subexpressions! If in doubt, please consult \fIregex\fR\|(7). Due to
-collectd's config parsing you need to escape backslashes, though. So if you
-want to match literal parentheses you need to do the following:
-.Sp
-.Vb 1
-\&  Regex "SPAM \e\e(Score: (\-?[0\-9]+\e\e.[0\-9]+)\e\e)"
-.Ve
-.IP "\fBDSType\fR \fIType\fR" 4
-.IX Item "DSType Type"
-Sets how the values are cumulated. \fIType\fR is one of:
-.RS 4
-.IP "\fBGaugeAverage\fR" 4
-.IX Item "GaugeAverage"
-Calculate the average.
-.IP "\fBGaugeMin\fR" 4
-.IX Item "GaugeMin"
-Use the smallest number only.
-.IP "\fBGaugeMax\fR" 4
-.IX Item "GaugeMax"
-Use the greatest number only.
-.IP "\fBGaugeLast\fR" 4
-.IX Item "GaugeLast"
-Use the last number found.
-.IP "\fBCounterSet\fR" 4
-.IX Item "CounterSet"
-The matched number is a counter. Simply sets the internal counter to this
-value.
-.IP "\fBCounterAdd\fR" 4
-.IX Item "CounterAdd"
-Add the matched value to the internal counter.
-.IP "\fBCounterInc\fR" 4
-.IX Item "CounterInc"
-Increase the internal counter by one. This \fBDSType\fR is the only one that does
-not use the matched subexpression, but simply counts the number of matched
-lines. Thus, you may use a regular expression without submatch in this case.
-.RE
-.RS 4
-.Sp
-As you'd expect the \fBGauge*\fR types interpret the submatch as a floating point
-number, using \fIstrtod\fR\|(3). The \fBCounterSet\fR and \fBCounterAdd\fR interpret the
-submatch as an integer using \fIstrtoll\fR\|(3). \fBCounterInc\fR does not use the
-submatch at all and it may be omitted in this case.
-.RE
-.IP "\fBType\fR \fIType\fR" 4
-.IX Item "Type Type"
-Sets the type used to dispatch this value. Detailed information about types and
-their configuration can be found in \fItypes.db\fR\|(5).
-.IP "\fBInstance\fR \fITypeInstance\fR" 4
-.IX Item "Instance TypeInstance"
-This optional setting sets the type instance to use.
-.ie n .SS "Plugin ""teamspeak2"""
-.el .SS "Plugin \f(CWteamspeak2\fP"
-.IX Subsection "Plugin teamspeak2"
-The \f(CW\*(C`teamspeak2 plugin\*(C'\fR connects to the query port of a teamspeak2 server and
-polls interesting global and virtual server data. The plugin can query only one
-physical server but unlimited virtual servers. You can use the following
-options to configure it:
-.IP "\fBHost\fR \fIhostname/ip\fR" 4
-.IX Item "Host hostname/ip"
-The hostname or ip which identifies the physical server.
-Default: 127.0.0.1
-.IP "\fBPort\fR \fIport\fR" 4
-.IX Item "Port port"
-The query port of the physical server. This needs to be a string.
-Default: \*(L"51234\*(R"
-.IP "\fBServer\fR \fIport\fR" 4
-.IX Item "Server port"
-This option has to be added once for every virtual server the plugin should
-query. If you want to query the virtual server on port 8767 this is what the
-option would look like:
-.Sp
-.Vb 1
-\&  Server "8767"
-.Ve
-.Sp
-This option, although numeric, needs to be a string, i.\ e. you \fBmust\fR
-use quotes around it! If no such statement is given only global information
-will be collected.
-.ie n .SS "Plugin ""tcpconns"""
-.el .SS "Plugin \f(CWtcpconns\fP"
-.IX Subsection "Plugin tcpconns"
-The \f(CW\*(C`tcpconns plugin\*(C'\fR counts the number of currently established \s-1TCP\s0
-connections based on the local port and/or the remote port. Since there may be
-a lot of connections the default if to count all connections with a local port,
-for which a listening socket is opened. You can use the following options to
-fine-tune the ports you are interested in:
-.IP "\fBListeningPorts\fR \fItrue\fR|\fIfalse\fR" 4
-.IX Item "ListeningPorts true|false"
-If this option is set to \fItrue\fR, statistics for all local ports for which a
-listening socket exists are collected. The default depends on \fBLocalPort\fR and
-\&\fBRemotePort\fR (see below): If no port at all is specifically selected, the
-default is to collect listening ports. If specific ports (no matter if local or
-remote ports) are selected, this option defaults to \fIfalse\fR, i.\ e. only
-the selected ports will be collected unless this option is set to \fItrue\fR
-specifically.
-.IP "\fBLocalPort\fR \fIPort\fR" 4
-.IX Item "LocalPort Port"
-Count the connections to a specific local port. This can be used to see how
-many connections are handled by a specific daemon, e.\ g. the mailserver.
-You have to specify the port in numeric form, so for the mailserver example
-you'd need to set \fB25\fR.
-.IP "\fBRemotePort\fR \fIPort\fR" 4
-.IX Item "RemotePort Port"
-Count the connections to a specific remote port. This is useful to see how
-much a remote service is used. This is most useful if you want to know how many
-connections a local service has opened to remote services, e.\ g. how many
-connections a mail server or news server has to other mail or news servers, or
-how many connections a web proxy holds to web servers. You have to give the
-port in numeric form.
-.ie n .SS "Plugin ""unixsock"""
-.el .SS "Plugin \f(CWunixsock\fP"
-.IX Subsection "Plugin unixsock"
-.IP "\fBSocketFile\fR \fIPath\fR" 4
-.IX Item "SocketFile Path"
-Sets the socket-file which is to be created.
-.IP "\fBSocketGroup\fR \fIGroup\fR" 4
-.IX Item "SocketGroup Group"
-If running as root change the group of the UNIX-socket after it has been
-created. Defaults to \fBcollectd\fR.
-.IP "\fBSocketPerms\fR \fIPermissions\fR" 4
-.IX Item "SocketPerms Permissions"
-Change the file permissions of the UNIX-socket after it has been created. The
-permissions must be given as a numeric, octal value as you would pass to
-\&\fIchmod\fR\|(1). Defaults to \fB0770\fR.
-.ie n .SS "Plugin ""uuid"""
-.el .SS "Plugin \f(CWuuid\fP"
-.IX Subsection "Plugin uuid"
-This plugin, if loaded, causes the Hostname to be taken from the machine's
-\&\s-1UUID\s0. The \s-1UUID\s0 is a universally unique designation for the machine, usually
-taken from the machine's \s-1BIOS\s0. This is most useful if the machine is running in
-a virtual environment such as Xen, in which case the \s-1UUID\s0 is preserved across
-shutdowns and migration.
-.PP
-The following methods are used to find the machine's \s-1UUID\s0, in order:
+There are two big groups of plugins, \fBinput\fR and \fBoutput\fR plugins:
 .IP "\(bu" 4
-Check \fI/etc/uuid\fR (or \fIUUIDFile\fR).
+Input plugins are queried periodically. They somehow acquire the current value
+of whatever they where designed to work with and submit these values back to
+the daemon, i. e. they \*(L"dispatch\*(R" the values. As an example, the \f(CW\*(C`cpu plugin\*(C'\fR
+reads the current cpu-counters of time spent in the various modes (user,
+system, nice, ...) and dispatches these counters to the daemon.
 .IP "\(bu" 4
-Check for \s-1UUID\s0 from \s-1HAL\s0 (<http://www.freedesktop.org/wiki/Software/hal>) if
-present.
-.IP "\(bu" 4
-Check for \s-1UUID\s0 from \f(CW\*(C`dmidecode\*(C'\fR / \s-1SMBIOS\s0.
-.IP "\(bu" 4
-Check for \s-1UUID\s0 from Xen hypervisor.
-.PP
-If no \s-1UUID\s0 can be found then the hostname is not modified.
-.IP "\fBUUIDFile\fR \fIPath\fR" 4
-.IX Item "UUIDFile Path"
-Take the \s-1UUID\s0 from the given file (default \fI/etc/uuid\fR).
-.ie n .SS "Plugin ""vmem"""
-.el .SS "Plugin \f(CWvmem\fP"
-.IX Subsection "Plugin vmem"
-The \f(CW\*(C`vmem\*(C'\fR plugin collects information about the usage of virtual memory.
-Since the statistics provided by the Linux kernel are very detailed, they are
-collected very detailed. However, to get all the details, you have to switch
-them on manually. Most people just want an overview over, such as the number of
-pages read from swap space.
-.IP "\fBVerbose\fR \fBtrue\fR|\fBfalse\fR" 4
-.IX Item "Verbose true|false"
-Enables verbose collection of information. This will start collecting page
-\&\*(L"actions\*(R", e.\ g. page allocations, (de)activations, steals and so on.
-Part of these statistics are collected on a \*(L"per zone\*(R" basis.
-.ie n .SS "Plugin ""vserver"""
-.el .SS "Plugin \f(CWvserver\fP"
-.IX Subsection "Plugin vserver"
-This plugin doesn't have any options. \fBVServer\fR support is only available for
-Linux. It cannot yet be found in a vanilla kernel, though. To make use of this
-plugin you need a kernel that has \fBVServer\fR support built in, i.\ e. you
-need to apply the patches and compile your own kernel, which will then provide
-the \fI/proc/virtual\fR filesystem that is required by this plugin.
-.PP
-The \fBVServer\fR homepage can be found at <http://linux\-vserver.org/>.
-.SH "THRESHOLD CONFIGURATION"
-.IX Header "THRESHOLD CONFIGURATION"
-Starting with version \f(CW4.3.0\fR collectd has support for \fBmonitoring\fR. By that
-we mean that the values are not only stored or sent somewhere, but that they
-are judged and, if a problem is recognized, acted upon. The only action
-collectd takes itself is to generate and dispatch a \*(L"notification\*(R". Plugins can
-register to receive notifications and perform appropriate further actions.
-.PP
-Since systems and what you expect them to do differ a lot, you can configure
-\&\fBthresholds\fR for your values freely. This gives you a lot of flexibility but
-also a lot of responsibility.
-.PP
-Every time a value is out of range a notification is dispatched. This means
-that the idle percentage of your \s-1CPU\s0 needs to be less then the configured
-threshold only once for a notification to be generated. There's no such thing
-as a moving average or similar \- at least not now.
-.PP
-Also, all values that match a threshold are considered to be relevant or
-\&\*(L"interesting\*(R". As a consequence collectd will issue a notification if they are
-not received for twice the last timeout of the values. If, for example, some
-hosts sends it's \s-1CPU\s0 statistics to the server every 60 seconds, a notification
-will be dispatched after about 120 seconds. It may take a little longer because
-the timeout is checked only once each \fBInterval\fR on the server.
-.PP
-When a value comes within range again or is received after it was missing, an
-\&\*(L"OKAY-notification\*(R" is dispatched.
-.PP
-Here is a configuration example to get you started. Read below for more
-information.
-.PP
-.Vb 9
-\& <Threshold>
-\&   <Type "foo">
-\&     WarningMin    0.00
-\&     WarningMax 1000.00
-\&     FailureMin    0.00
-\&     FailureMax 1200.00
-\&     Invert false
-\&     Instance "bar"
-\&   </Type>
-\&
-\&   <Plugin "interface">
-\&     Instance "eth0"
-\&     <Type "if_octets">
-\&       FailureMax 10000000
-\&       DataSource "rx"
-\&     </Type>
-\&   </Plugin>
-\&
-\&   <Host "hostname">
-\&     <Type "cpu">
-\&       Instance "idle"
-\&       FailureMin 10
-\&     </Type>
-\&
-\&     <Plugin "memory">
-\&       <Type "memory">
-\&         Instance "cached"
-\&         WarningMin 100000000
-\&       </Type>
-\&     </Plugin>
-\&   </Host>
-\& </Threshold>
-.Ve
-.PP
-There are basically two types of configuration statements: The \f(CW\*(C`Host\*(C'\fR,
-\&\f(CW\*(C`Plugin\*(C'\fR, and \f(CW\*(C`Type\*(C'\fR blocks select the value for which a threshold should be
-configured. The \f(CW\*(C`Plugin\*(C'\fR and \f(CW\*(C`Type\*(C'\fR blocks may be specified further using the
-\&\f(CW\*(C`Instance\*(C'\fR option. You can combine the block by nesting the blocks, though
-they must be nested in the above order, i.\ e. \f(CW\*(C`Host\*(C'\fR may contain either
-\&\f(CW\*(C`Plugin\*(C'\fR and \f(CW\*(C`Type\*(C'\fR blocks, \f(CW\*(C`Plugin\*(C'\fR may only contain \f(CW\*(C`Type\*(C'\fR blocks and
-\&\f(CW\*(C`Type\*(C'\fR may not contain other blocks. If multiple blocks apply to the same
-value the most specific block is used.
-.PP
-The other statements specify the threshold to configure. They \fBmust\fR be
-included in a \f(CW\*(C`Type\*(C'\fR block. Currently the following statements are recognized:
-.IP "\fBFailureMax\fR \fIValue\fR" 4
-.IX Item "FailureMax Value"
-.PD 0
-.IP "\fBWarningMax\fR \fIValue\fR" 4
-.IX Item "WarningMax Value"
-.PD
-Sets the upper bound of acceptable values. If unset defaults to positive
-infinity. If a value is greater than \fBFailureMax\fR a \fB\s-1FAILURE\s0\fR notification
-will be created. If the value is greater than \fBWarningMax\fR but less than (or
-equal to) \fBFailureMax\fR a \fB\s-1WARNING\s0\fR notification will be created.
-.IP "\fBFailureMin\fR \fIValue\fR" 4
-.IX Item "FailureMin Value"
-.PD 0
-.IP "\fBWarningMin\fR \fIValue\fR" 4
-.IX Item "WarningMin Value"
-.PD
-Sets the lower bound of acceptable values. If unset defaults to negative
-infinity. If a value is less than \fBFailureMin\fR a \fB\s-1FAILURE\s0\fR notification will
-be created. If the value is less than \fBWarningMin\fR but greater than (or equal
-to) \fBFailureMin\fR a \fB\s-1WARNING\s0\fR notification will be created.
-.IP "\fBDataSource\fR \fIDSName\fR" 4
-.IX Item "DataSource DSName"
-Some data sets have more than one \*(L"data source\*(R". Interesting examples are the
-\&\f(CW\*(C`if_octets\*(C'\fR data set, which has received (\f(CW\*(C`rx\*(C'\fR) and sent (\f(CW\*(C`tx\*(C'\fR) bytes and
-the \f(CW\*(C`disk_ops\*(C'\fR data set, which holds \f(CW\*(C`read\*(C'\fR and \f(CW\*(C`write\*(C'\fR operations. The
-system load data set, \f(CW\*(C`load\*(C'\fR, even has three data sources: \f(CW\*(C`shortterm\*(C'\fR,
-\&\f(CW\*(C`midterm\*(C'\fR, and \f(CW\*(C`longterm\*(C'\fR.
-.Sp
-Normally, all data sources are checked against a configured threshold. If this
-is undesirable, or if you want to specify different limits for each data
-source, you can use the \fBDataSource\fR option to have a threshold apply only to
-one data source.
-.IP "\fBInvert\fR \fBtrue\fR|\fBfalse\fR" 4
-.IX Item "Invert true|false"
-If set to \fBtrue\fR the range of acceptable values is inverted, i.\ e.
-values between \fBFailureMin\fR and \fBFailureMax\fR (\fBWarningMin\fR and
-\&\fBWarningMax\fR) are not okay. Defaults to \fBfalse\fR.
-.IP "\fBPersist\fR \fBtrue\fR|\fBfalse\fR" 4
-.IX Item "Persist true|false"
-Sets how often notifications are generated. If set to \fBtrue\fR one notification
-will be generated for each value that is out of the acceptable range. If set to
-\&\fBfalse\fR (the default) then a notification is only generated if a value is out
-of range but the previous value was okay.
-.Sp
-This applies to missing values, too: If set to \fBtrue\fR a notification about a
-missing value is generated once every \fBInterval\fR seconds. If set to \fBfalse\fR
-only one such notification is generated until the value appears again.
+Output plugins get the dispatched values from the daemon and does something
+with them. Common applications are writing to RRD-files, CSV-files or sending
+the data over a network link to a remote box.
+.PP
+Of course not all plugins fit neatly into one of the two above categories. The
+\&\f(CW\*(C`network plugin\*(C'\fR, for example, is able to send (i.\ e. \*(L"write\*(R") \fBand\fR
+receive (i.\ e. \*(L"dispatch\*(R") values. Also, it opens a socket upon
+initialization and dispatches the values when it receives them and isn't
+triggered at the same time the input plugins are being read. You can think of
+the network receive part as working asynchronous if it helps.
+.PP
+In addition to the above, there are \*(L"logging plugins\*(R". Right now those are the
+\&\f(CW\*(C`logfile plugin\*(C'\fR and the \f(CW\*(C`syslog plugin\*(C'\fR. With these plugins collectd can
+provide information about issues and significant situations to the user.
+Several loglevels let you suppress uninteresting messages.
+.PP
+Starting with version \f(CW4.3.0\fR collectd has support for \fBmonitoring\fR. This is
+done by checking thresholds defined by the user. If a value is out of range, a
+notification will be dispatched to \*(L"notification plugins\*(R". See
+\&\fIcollectd.conf\fR\|(5) for more detailed information about threshold checking.
+.PP
+Please note that some plugins, that provide other means of communicating with
+the daemon, have manpages of their own to describe their functionality in more
+detail. In particular those are \fIcollectd\-email\fR\|(5), \fIcollectd\-exec\fR\|(5),
+\&\fIcollectd\-perl\fR\|(5), \fIcollectd\-snmp\fR\|(5), and \fIcollectd\-unixsock\fR\|(5)
+.SH "SIGNALS"
+.IX Header "SIGNALS"
+\&\fBcollectd\fR accepts the following signals:
+.IP "\fB\s-1SIGINT\s0\fR, \fB\s-1SIGTERM\s0\fR" 4
+.IX Item "SIGINT, SIGTERM"
+These signals cause \fBcollectd\fR to shut down all plugins and terminate.
+.IP "\fB\s-1SIGUSR1\s0\fR" 4
+.IX Item "SIGUSR1"
+This signal causes \fBcollectd\fR to signal all plugins to flush data from
+internal caches. E.\ g. the \f(CW\*(C`rrdtool plugin\*(C'\fR will write all pending data
+to the \s-1RRD\s0 files. This is the same as using the \f(CW\*(C`FLUSH \-1\*(C'\fR command of the
+\&\f(CW\*(C`unixsock plugin\*(C'\fR.
 .SH "SEE ALSO"
 .IX Header "SEE ALSO"
-\&\fIcollectd\fR\|(1),
+\&\fIcollectd.conf\fR\|(5),
+\&\fIcollectd\-email\fR\|(5),
 \&\fIcollectd\-exec\fR\|(5),
 \&\fIcollectd\-perl\fR\|(5),
+\&\fIcollectd\-snmp\fR\|(5),
 \&\fIcollectd\-unixsock\fR\|(5),
 \&\fItypes.db\fR\|(5),
-\&\fIhddtemp\fR\|(8),
-kstat(3KSTAT),
-\&\fImbmon\fR\|(1),
-\&\fIrrdtool\fR\|(1),
-\&\fIsensors\fR\|(1)
+<http://collectd.org/>
 .SH "AUTHOR"
 .IX Header "AUTHOR"
 Florian Forster <octo@verplant.org>
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.4/src/collectd.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.5/src/collectd.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.4/src/collectd.c	2008-10-17 03:24:20.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.5/src/collectd.c	2009-01-03 04:05:29.000000000 +0800
@@ -243,13 +243,13 @@
 } /* static void update_kstat (void) */
 #endif /* HAVE_LIBKSTAT */
 
 /* TODO
  * Remove all settings but `-f' and `-C'
  */
-static void exit_usage (void)
+static void exit_usage (int status)
 {
 	printf ("Usage: "PACKAGE" [OPTIONS]\n\n"
 			
 			"Available options:\n"
 			"  General:\n"
 			"    -C <file>       Configuration file.\n"
@@ -265,14 +265,14 @@
 			"  Config-File       "CONFIGFILE"\n"
 			"  PID-File          "PIDFILE"\n"
 			"  Data-Directory    "PKGLOCALSTATEDIR"\n"
 			"\n"PACKAGE" "VERSION", http://collectd.org/\n"
 			"by Florian octo Forster <octo@verplant.org>\n"
 			"for contributions see `AUTHORS'\n");
-	exit (0);
-} /* static void exit_usage (char *name) */
+	exit (status);
+} /* static void exit_usage (int status) */
 
 static int do_init (void)
 {
 #if HAVE_LIBKSTAT
 	kc = NULL;
 	update_kstat ();
@@ -435,17 +435,22 @@
 				break;
 			case 'f':
 				daemonize = 0;
 				break;
 #endif /* COLLECT_DAEMON */
 			case 'h':
+				exit_usage (0);
+				break;
 			default:
-				exit_usage ();
+				exit_usage (1);
 		} /* switch (c) */
 	} /* while (1) */
 
+	if (optind < argc)
+		exit_usage (1);
+
 	/*
 	 * Read options from the config file, the environment and the command
 	 * line (in that order, with later options overwriting previous ones in
 	 * general).
 	 * Also, this will automatically load modules.
 	 */
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.4/src/collectd.conf.5 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.5/src/collectd.conf.5
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.4/src/collectd.conf.5	2008-10-17 04:10:06.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.5/src/collectd.conf.5	2009-01-03 05:21:18.000000000 +0800
@@ -1,7 +1,7 @@
-.\" Automatically generated by Pod::Man 2.18 (Pod::Simple 3.05)
+.\" Automatically generated by Pod::Man 2.1801 (Pod::Simple 3.05)
 .\"
 .\" Standard preamble:
 .\" ========================================================================
 .de Sp \" Vertical space (when we can't use .PP)
 .if t .sp .5v
 .if n .sp
@@ -120,56 +120,1396 @@
 .    ds ae ae
 .    ds Ae AE
 .\}
 .rm #[ #] #H #V #F C
 .\" ========================================================================
 .\"
-.IX Title "TYPES.DB 5"
-.TH TYPES.DB 5 "2008-05-06" "4.4.4" "collectd"
+.IX Title "COLLECTD.CONF 5"
+.TH COLLECTD.CONF 5 "2009-01-02" "4.4.5" "collectd"
 .\" For nroff, turn off justification.  Always turn off hyphenation; it makes
 .\" way too many mistakes in technical documents.
 .if n .ad l
 .nh
 .SH "NAME"
-types.db \- Data\-set specifications for the system statistics collection daemon
-\&\fBcollectd\fR
+collectd.conf \- Configuration for the system statistics collection daemon \fBcollectd\fR
 .SH "SYNOPSIS"
 .IX Header "SYNOPSIS"
 .Vb 3
-\&  bitrate    value:GAUGE:0:4294967295
-\&  counter    value:COUNTER:U:U
-\&  if_octets  rx:COUNTER:0:4294967295, tx:COUNTER:0:4294967295
+\&  BaseDir "/path/to/data/"
+\&  PIDFile "/path/to/pidfile/collectd.pid"
+\&  Server  "123.123.123.123" 12345
+\&
+\&  LoadPlugin cpu
+\&  LoadPlugin load
+\&  LoadPlugin ping
+\&
+\&  <Plugin ping>
+\&    Host "example.org"
+\&    Host "provider.net"
+\&  </Plugin>
 .Ve
 .SH "DESCRIPTION"
 .IX Header "DESCRIPTION"
-The types.db file contains one line for each data-set specification. Each line
-consists of two fields delimited by spaces and/or horizontal tabs. The first
-field defines the name of the data-set, while the second field defines a list
-of data-source specifications, delimited by spaces and, optionally, a comma
-(\*(L",\*(R") right after each list-entry.
-.PP
-The format of the data-source specification has been inspired by RRDtool's
-data-source specification. Each data-source is defined by a quadruple made up
-of the data-source name, type, minimal and maximal values, delimited by colons
-(\*(L":\*(R"): \fIds-name\fR:\fIds-type\fR:\fImin\fR:\fImax\fR. \fIds-type\fR may be either
-\&\fB\s-1COUNTER\s0\fR or \fB\s-1GAUGE\s0\fR. \fImin\fR and \fImax\fR define the range of valid values for
-data stored for this data-source. If \fBU\fR is specified for either the min or
-max value, it will be set to unknown, meaning that no range checks will
-happen. See \fIrrdcreate\fR\|(1) for more details.
-.SH "FILES"
-.IX Header "FILES"
-The location of the types.db file is defined by the \fBTypesDB\fR configuration
-option (see \fIcollectd.conf\fR\|(5)). If you want to specify custom data-sets, you
-should do so by using a custom file specified as an additional argument to the
-\&\fBTypesDB\fR option.
+This config file controls how the system statistics collection daemon
+\&\fBcollectd\fR behaves. The most significant option is \fBLoadPlugin\fR, which
+controls which plugins to load. These plugins ultimately define collectd's
+behavior.
+.PP
+The syntax of this config file is similar to the config file of the famous
+\&\fBApache Webserver\fR. Each line contains either a key-value-pair or a
+section-start or \-end. Empty lines and everything after the hash-symbol `#' is
+ignored. Values are either string, enclosed in double-quotes,
+(floating\-point\-)numbers or a boolean expression, i.\ e. either \fBtrue\fR or
+\&\fBfalse\fR. String containing of only alphanumeric characters and underscores do
+not need to be quoted.
+.PP
+The configuration is read and processed in order, i.\ e. from top to
+bottom. So the plugins are loaded in the order listed in this config file. It
+is a good idea to load any logging plugins first in order to catch messages
+from plugins during configuration. Also, the \f(CW\*(C`LoadPlugin\*(C'\fR option \fBmust\fR occur
+\&\fBbefore\fR the \f(CW\*(C`<Plugin ...>\*(C'\fR block.
+.SH "GLOBAL OPTIONS"
+.IX Header "GLOBAL OPTIONS"
+.IP "\fBBaseDir\fR \fIDirectory\fR" 4
+.IX Item "BaseDir Directory"
+Sets the base directory. This is the directory beneath all RRD-files are
+created. Possibly more subdirectories are created. This is also the working
+directory for the daemon.
+.IP "\fBLoadPlugin\fR \fIPlugin\fR" 4
+.IX Item "LoadPlugin Plugin"
+Loads the plugin \fIPlugin\fR. There must be at least one such line or \fBcollectd\fR
+will be mostly useless.
+.IP "\fBInclude\fR \fIPath\fR" 4
+.IX Item "Include Path"
+If \fIPath\fR points to a file, includes that file. If \fIPath\fR points to a
+directory, recursively includes all files within that directory and its
+subdirectories. If the \f(CW\*(C`wordexp\*(C'\fR function is available on your system,
+shell-like wildcards are expanded before files are included. This means you can
+use statements like the following:
+.Sp
+.Vb 1
+\&  Include "/etc/collectd.d/*.conf"
+.Ve
+.Sp
+If more than one files are included by a single \fBInclude\fR option, the files
+will be included in lexicographical order (as defined by the \f(CW\*(C`strcmp\*(C'\fR
+function). Thus, you can e.\ g. use numbered prefixes to specify the
+order in which the files are loaded.
+.Sp
+To prevent loops and shooting yourself in the foot in interesting ways the
+nesting is limited to a depth of 8\ levels, which should be sufficient for
+most uses. Since symlinks are followed it is still possible to crash the daemon
+by looping symlinks. In our opinion significant stupidity should result in an
+appropriate amount of pain.
+.Sp
+It is no problem to have a block like \f(CW\*(C`<Plugin foo>\*(C'\fR in more than one
+file, but you cannot include files from within blocks.
+.IP "\fBPIDFile\fR \fIFile\fR" 4
+.IX Item "PIDFile File"
+Sets where to write the \s-1PID\s0 file to. This file is overwritten when it exists
+and deleted when the program is stopped. Some init-scripts might override this
+setting using the \fB\-P\fR command-line option.
+.IP "\fBPluginDir\fR \fIDirectory\fR" 4
+.IX Item "PluginDir Directory"
+Path to the plugins (shared objects) of collectd.
+.IP "\fBTypesDB\fR \fIFile\fR [\fIFile\fR ...]" 4
+.IX Item "TypesDB File [File ...]"
+Set one or more files that contain the data-set descriptions. See
+\&\fItypes.db\fR\|(5) for a description of the format of this file.
+.IP "\fBInterval\fR \fISeconds\fR" 4
+.IX Item "Interval Seconds"
+Configures the interval in which to query the read plugins. Obviously smaller
+values lead to a higher system load produced by collectd, while higher values
+lead to more coarse statistics.
+.IP "\fBReadThreads\fR \fINum\fR" 4
+.IX Item "ReadThreads Num"
+Number of threads to start for reading plugins. The default value is \fB5\fR, but
+you may want to increase this if you have more than five plugins that take a
+long time to read. Mostly those are plugin that do network-IO. Setting this to
+a value higher than the number of plugins you've loaded is totally useless.
+.IP "\fBHostname\fR \fIName\fR" 4
+.IX Item "Hostname Name"
+Sets the hostname that identifies a host. If you omit this setting, the
+hostname will be determinded using the \fIgethostname\fR\|(2) system call.
+.IP "\fBFQDNLookup\fR \fBtrue|false\fR" 4
+.IX Item "FQDNLookup true|false"
+If \fBHostname\fR is determined automatically this setting controls whether or not
+the daemon should try to figure out the \*(L"fully qualified domain name\*(R", \s-1FQDN\s0.
+This is done using a lookup of the name returned by \f(CW\*(C`gethostname\*(C'\fR.
+.Sp
+Using this feature (i.\ e. setting this option to \fBtrue\fR) is recommended.
+However, to preserve backwards compatibility the default is set to \fBfalse\fR.
+The sample config file that is installed with \f(CW\*(C`make\ install\*(C'\fR includes a
+line which sets this option, though, so that default installations will have
+this setting enabled.
+.SH "PLUGIN OPTIONS"
+.IX Header "PLUGIN OPTIONS"
+Some plugins may register own options. These options must be enclosed in a
+\&\f(CW\*(C`Plugin\*(C'\fR\-Section. Which options exist depends on the plugin used. Some plugins
+require external configuration, too. The \f(CW\*(C`apache plugin\*(C'\fR, for example,
+required \f(CW\*(C`mod_status\*(C'\fR to be configured in the webserver you're going to
+collect data from. These plugins are listed below as well, even if they don't
+require any configuration within collectd's configfile.
+.PP
+A list of all plugins and a short summary for each plugin can be found in the
+\&\fI\s-1README\s0\fR file shipped with the sourcecode and hopefully binary packets as
+well.
+.ie n .SS "Plugin ""apache"""
+.el .SS "Plugin \f(CWapache\fP"
+.IX Subsection "Plugin apache"
+To configure the \f(CW\*(C`apache\*(C'\fR\-plugin you first need to configure the Apache
+webserver correctly. The Apache-plugin \f(CW\*(C`mod_status\*(C'\fR needs to be loaded and
+working and the \f(CW\*(C`ExtendedStatus\*(C'\fR directive needs to be \fBenabled\fR. You can use
+the following snipped to base your Apache config upon:
+.PP
+.Vb 6
+\&  ExtendedStatus on
+\&  <IfModule mod_status.c>
+\&    <Location /mod_status>
+\&      SetHandler server\-status
+\&    </Location>
+\&  </IfModule>
+.Ve
+.PP
+Since its \f(CW\*(C`mod_status\*(C'\fR module is very similar to Apache's, \fBlighttpd\fR is
+also supported. It introduces a new field, called \f(CW\*(C`BusyServers\*(C'\fR, to count the
+number of currently connected clients. This field is also supported.
+.PP
+The following options are accepted by the \f(CW\*(C`apache\*(C'\fR\-plugin:
+.IP "\fB\s-1URL\s0\fR \fIhttp://host/mod_status?auto\fR" 4
+.IX Item "URL http://host/mod_status?auto"
+Sets the \s-1URL\s0 of the \f(CW\*(C`mod_status\*(C'\fR output. This needs to be the output generated
+by \f(CW\*(C`ExtendedStatus on\*(C'\fR and it needs to be the machine readable output
+generated by appending the \f(CW\*(C`?auto\*(C'\fR argument.
+.IP "\fBUser\fR \fIUsername\fR" 4
+.IX Item "User Username"
+Optional user name needed for authentication.
+.IP "\fBPassword\fR \fIPassword\fR" 4
+.IX Item "Password Password"
+Optional password needed for authentication.
+.IP "\fBVerifyPeer\fR \fBtrue|false\fR" 4
+.IX Item "VerifyPeer true|false"
+Enable or disable peer \s-1SSL\s0 certificate verification. See
+<http://curl.haxx.se/docs/sslcerts.html> for details. Enabled by default.
+.IP "\fBVerifyHost\fR \fBtrue|false\fR" 4
+.IX Item "VerifyHost true|false"
+Enable or disable peer host name verification. If enabled, the plugin checks
+if the \f(CW\*(C`Common Name\*(C'\fR or a \f(CW\*(C`Subject Alternate Name\*(C'\fR field of the \s-1SSL\s0
+certificate matches the host name provided by the \fB\s-1URL\s0\fR option. If this
+identity check fails, the connection is aborted. Obviously, only works when
+connecting to a \s-1SSL\s0 enabled server. Enabled by default.
+.IP "\fBCACert\fR \fIFile\fR" 4
+.IX Item "CACert File"
+File that holds one or more \s-1SSL\s0 certificates. If you want to use \s-1HTTPS\s0 you will
+possibly need this option. What \s-1CA\s0 certificates come bundled with \f(CW\*(C`libcurl\*(C'\fR
+and are checked by default depends on the distribution you use.
+.ie n .SS "Plugin ""apcups"""
+.el .SS "Plugin \f(CWapcups\fP"
+.IX Subsection "Plugin apcups"
+.IP "\fBHost\fR \fIHostname\fR" 4
+.IX Item "Host Hostname"
+Hostname of the host running \fBapcupsd\fR. Defaults to \fBlocalhost\fR. Please note
+that IPv6 support has been disabled unless someone can confirm or decline that
+\&\fBapcupsd\fR can handle it.
+.IP "\fBPort\fR \fIPort\fR" 4
+.IX Item "Port Port"
+TCP-Port to connect to. Defaults to \fB3551\fR.
+.ie n .SS "Plugin ""ascent"""
+.el .SS "Plugin \f(CWascent\fP"
+.IX Subsection "Plugin ascent"
+This plugin collects information about an Ascent server, a free server for the
+\&\*(L"World of Warcraft\*(R" game. This plugin gathers the information by fetching the
+\&\s-1XML\s0 status page using \f(CW\*(C`libcurl\*(C'\fR and parses it using \f(CW\*(C`libxml2\*(C'\fR.
+.PP
+The configuration options are the same as for the \f(CW\*(C`apache\*(C'\fR plugin above:
+.IP "\fB\s-1URL\s0\fR \fIhttp://localhost/ascent/status/\fR" 4
+.IX Item "URL http://localhost/ascent/status/"
+Sets the \s-1URL\s0 of the \s-1XML\s0 status output.
+.IP "\fBUser\fR \fIUsername\fR" 4
+.IX Item "User Username"
+Optional user name needed for authentication.
+.IP "\fBPassword\fR \fIPassword\fR" 4
+.IX Item "Password Password"
+Optional password needed for authentication.
+.IP "\fBCACert\fR \fIFile\fR" 4
+.IX Item "CACert File"
+File that holds one or more \s-1SSL\s0 certificates. If you want to use \s-1HTTPS\s0 you will
+possibly need this option. What \s-1CA\s0 certificates come bundled with \f(CW\*(C`libcurl\*(C'\fR
+and are checked by default depends on the distribution you use.
+.ie n .SS "Plugin ""cpufreq"""
+.el .SS "Plugin \f(CWcpufreq\fP"
+.IX Subsection "Plugin cpufreq"
+This plugin doesn't have any options. It reads
+\&\fI/sys/devices/system/cpu/cpu0/cpufreq/scaling_cur_freq\fR (for the first \s-1CPU\s0
+installed) to get the current \s-1CPU\s0 frequency. If this file does not exist make
+sure \fBcpufreqd\fR (<http://cpufreqd.sourceforge.net/>) or a similar tool is
+installed and an \*(L"cpu governor\*(R" (that's a kernel module) is loaded.
+.ie n .SS "Plugin ""csv"""
+.el .SS "Plugin \f(CWcsv\fP"
+.IX Subsection "Plugin csv"
+.IP "\fBDataDir\fR \fIDirectory\fR" 4
+.IX Item "DataDir Directory"
+Set the directory to store CSV-files under. Per default CSV-files are generated
+beneath the daemon's working directory, i.\ e. the \fBBaseDir\fR.
+.IP "\fBStoreRates\fR \fBtrue|false\fR" 4
+.IX Item "StoreRates true|false"
+If set to \fBtrue\fR, convert counter values to rates. If set to \fBfalse\fR (the
+default) counter values are stored as is, i.\ e. as an increasing integer
+number.
+.ie n .SS "Plugin ""df"""
+.el .SS "Plugin \f(CWdf\fP"
+.IX Subsection "Plugin df"
+.IP "\fBDevice\fR \fIDevice\fR" 4
+.IX Item "Device Device"
+Select partitions based on the devicename.
+.IP "\fBMountPoint\fR \fIDirectory\fR" 4
+.IX Item "MountPoint Directory"
+Select partitions based on the mountpoint.
+.IP "\fBFSType\fR \fIFSType\fR" 4
+.IX Item "FSType FSType"
+Select partitions based on the filesystem type.
+.IP "\fBIgnoreSelected\fR \fItrue\fR|\fIfalse\fR" 4
+.IX Item "IgnoreSelected true|false"
+Invert the selection: If set to true, all partitions \fBexcept\fR the ones that
+match any one of the criteria are collected. By default only selected
+partitions are collected if a selection is made. If no selection is configured
+at all, \fBall\fR partitions are selected.
+.ie n .SS "Plugin ""disk"""
+.el .SS "Plugin \f(CWdisk\fP"
+.IX Subsection "Plugin disk"
+The \f(CW\*(C`disk\*(C'\fR plugin collects information about the usage of physical disks and
+logical disks (partitions). Values collected are the number of octets written
+to and read from a disk or partition, the number of read/write operations
+issued to the disk and a rather complex \*(L"time\*(R" it took for these commands to be
+issued.
+.PP
+Using the following two options you can ignore some disks or configure the
+collection only of specific disks.
+.IP "\fBDisk\fR \fIName\fR" 4
+.IX Item "Disk Name"
+Select the disk \fIName\fR. Whether it is collected or ignored depends on the
+\&\fBIgnoreSelected\fR setting, see below. As with other plugins that use the
+daemon's ignorelist functionality, a string that starts and ends with a slash
+is interpreted as a regular expression. Examples:
+.Sp
+.Vb 2
+\&  Disk "sdd"
+\&  Disk "/hda[34]/"
+.Ve
+.IP "\fBIgnoreSelected\fR \fBtrue\fR|\fBfalse\fR" 4
+.IX Item "IgnoreSelected true|false"
+Sets whether selected disks, i.\ e. the ones matches by any of the \fBDisk\fR
+statements, are ignored or if all other disks are ignored. The behavior
+(hopefully) is intuitive: If no \fBDisk\fR option is configured, all disks are
+collected. If at least one \fBDisk\fR option is given and no \fBIgnoreSelected\fR or
+set to \fBfalse\fR, \fBonly\fR matching disks will be collected. If \fBIgnoreSelected\fR
+is set to \fBtrue\fR, all disks are collected \fBexcept\fR the ones matched.
+.ie n .SS "Plugin ""dns"""
+.el .SS "Plugin \f(CWdns\fP"
+.IX Subsection "Plugin dns"
+.IP "\fBInterface\fR \fIInterface\fR" 4
+.IX Item "Interface Interface"
+The dns plugin uses \fBlibpcap\fR to capture dns traffic and analyses it. This
+option sets the interface that should be used. If this option is not set, or
+set to \*(L"any\*(R", the plugin will try to get packets from \fBall\fR interfaces. This
+may not work on certain platforms, such as Mac\ \s-1OS\s0\ X.
+.IP "\fBIgnoreSource\fR \fIIP-address\fR" 4
+.IX Item "IgnoreSource IP-address"
+Ignore packets that originate from this address.
+.ie n .SS "Plugin ""email"""
+.el .SS "Plugin \f(CWemail\fP"
+.IX Subsection "Plugin email"
+.IP "\fBSocketFile\fR \fIPath\fR" 4
+.IX Item "SocketFile Path"
+Sets the socket-file which is to be created.
+.IP "\fBSocketGroup\fR \fIGroup\fR" 4
+.IX Item "SocketGroup Group"
+If running as root change the group of the UNIX-socket after it has been
+created. Defaults to \fBcollectd\fR.
+.IP "\fBSocketPerms\fR \fIPermissions\fR" 4
+.IX Item "SocketPerms Permissions"
+Change the file permissions of the UNIX-socket after it has been created. The
+permissions must be given as a numeric, octal value as you would pass to
+\&\fIchmod\fR\|(1). Defaults to \fB0770\fR.
+.IP "\fBMaxConns\fR \fINumber\fR" 4
+.IX Item "MaxConns Number"
+Sets the maximum number of connections that can be handled in parallel. Since
+this many threads will be started immediately setting this to a very high
+value will waste valuable resources. Defaults to \fB5\fR and will be forced to be
+at most \fB16384\fR to prevent typos and dumb mistakes.
+.ie n .SS "Plugin ""exec"""
+.el .SS "Plugin \f(CWexec\fP"
+.IX Subsection "Plugin exec"
+Please make sure to read \fIcollectd\-exec\fR\|(5) before using this plugin. It
+contains valuable information on when the executable is executed and the
+output that is expected from it.
+.IP "\fBExec\fR \fIUser\fR[:[\fIGroup\fR]] \fIExecutable\fR [\fI<arg>\fR [\fI<arg>\fR ...]]" 4
+.IX Item "Exec User[:[Group]] Executable [<arg> [<arg> ...]]"
+.PD 0
+.IP "\fBNotificationExec\fR \fIUser\fR[:[\fIGroup\fR]] \fIExecutable\fR [\fI<arg>\fR [\fI<arg>\fR ...]]" 4
+.IX Item "NotificationExec User[:[Group]] Executable [<arg> [<arg> ...]]"
+.PD
+Execute the executable \fIExecutable\fR as user \fIUser\fR. If the user name is
+followed by a colon and a group name, the effective group is set to that group.
+The real group and saved-set group will be set to the default group of that
+user. If no group is given the effective group \s-1ID\s0 will be the same as the real
+group \s-1ID\s0.
+.Sp
+Please note that in order to change the user and/or group the daemon needs
+superuser privileges. If the daemon is run as an unprivileged user you must
+specify the same user/group here. If the daemon is run with superuser
+privileges, you must supply a non-root user here.
+.Sp
+The executable may be followed by optional arguments that are passed to the
+program. Please note that due to the configuration parsing numbers and boolean
+values may be changed. If you want to be absolutely sure that something is
+passed as-is please enclose it in quotes.
+.Sp
+The \fBExec\fR and \fBNotificationExec\fR statements change the semantics of the
+programs executed, i.\ e. the data passed to them and the response
+expected from them. This is documented in great detail in \fIcollectd\-exec\fR\|(5).
+.ie n .SS "Plugin ""hddtemp"""
+.el .SS "Plugin \f(CWhddtemp\fP"
+.IX Subsection "Plugin hddtemp"
+To get values from \fBhddtemp\fR collectd connects to \fBlocalhost\fR (127.0.0.1),
+port \fB7634/tcp\fR. The \fBHost\fR and \fBPort\fR options can be used to change these
+default values, see below. \f(CW\*(C`hddtemp\*(C'\fR has to be running to work correctly. If
+\&\f(CW\*(C`hddtemp\*(C'\fR is not running timeouts may appear which may interfere with other
+statistics..
+.PP
+The \fBhddtemp\fR homepage can be found at
+<http://www.guzu.net/linux/hddtemp.php>.
+.IP "\fBHost\fR \fIHostname\fR" 4
+.IX Item "Host Hostname"
+Hostname to connect to. Defaults to \fB127.0.0.1\fR.
+.IP "\fBPort\fR \fIPort\fR" 4
+.IX Item "Port Port"
+TCP-Port to connect to. Defaults to \fB7634\fR.
+.IP "\fBTranslateDevicename\fR \fItrue\fR|\fIfalse\fR" 4
+.IX Item "TranslateDevicename true|false"
+If enabled, translate the disk names to major/minor device numbers
+(e.\ g. \*(L"8\-0\*(R" for /dev/sda). For backwards compatibility this defaults to
+\&\fItrue\fR but it's recommended to disable it as it will probably be removed in
+the next major version.
+.ie n .SS "Plugin ""interface"""
+.el .SS "Plugin \f(CWinterface\fP"
+.IX Subsection "Plugin interface"
+.IP "\fBInterface\fR \fIInterface\fR" 4
+.IX Item "Interface Interface"
+Select this interface. By default these interfaces will then be collected. For
+a more detailed description see \fBIgnoreSelected\fR below.
+.IP "\fBIgnoreSelected\fR \fItrue\fR|\fIfalse\fR" 4
+.IX Item "IgnoreSelected true|false"
+If no configuration if given, the \fBtraffic\fR\-plugin will collect data from
+all interfaces. This may not be practical, especially for loopback\- and
+similar interfaces. Thus, you can use the \fBInterface\fR\-option to pick the
+interfaces you're interested in. Sometimes, however, it's easier/preferred
+to collect all interfaces \fIexcept\fR a few ones. This option enables you to
+do that: By setting \fBIgnoreSelected\fR to \fItrue\fR the effect of
+\&\fBInterface\fR is inversed: All selected interfaces are ignored and all
+other interfaces are collected.
+.ie n .SS "Plugin ""ipmi"""
+.el .SS "Plugin \f(CWipmi\fP"
+.IX Subsection "Plugin ipmi"
+.IP "\fBSensor\fR \fISensor\fR" 4
+.IX Item "Sensor Sensor"
+Selects sensors to collect or to ignore, depending on \fBIgnoreSelected\fR.
+.IP "\fBIgnoreSelected\fR \fItrue\fR|\fIfalse\fR" 4
+.IX Item "IgnoreSelected true|false"
+If no configuration if given, the \fBipmi\fR plugin will collect data from all
+sensors found of type \*(L"temperature\*(R", \*(L"voltage\*(R", \*(L"current\*(R" and \*(L"fanspeed\*(R".
+This option enables you to do that: By setting \fBIgnoreSelected\fR to \fItrue\fR
+the effect of \fBSensor\fR is inverted: All selected sensors are ignored and
+all other sensors are collected.
+.ie n .SS "Plugin ""iptables"""
+.el .SS "Plugin \f(CWiptables\fP"
+.IX Subsection "Plugin iptables"
+.IP "\fBChain\fR \fITable\fR \fIChain\fR [\fIComment|Number\fR [\fIName\fR]]" 4
+.IX Item "Chain Table Chain [Comment|Number [Name]]"
+Select the rules to count. If only \fITable\fR and \fIChain\fR are given, this plugin
+will collect the counters of all rules which have a comment-match. The comment
+is then used as type-instance.
+.Sp
+If \fIComment\fR or \fINumber\fR is given, only the rule with the matching comment or
+the \fIn\fRth rule will be collected. Again, the comment (or the number) will be
+used as the type-instance.
+.Sp
+If \fIName\fR is supplied, it will be used as the type-instance instead of the
+comment or the number.
+.ie n .SS "Plugin ""irq"""
+.el .SS "Plugin \f(CWirq\fP"
+.IX Subsection "Plugin irq"
+.IP "\fBIrq\fR \fIIrq\fR" 4
+.IX Item "Irq Irq"
+Select this irq. By default these irqs will then be collected. For a more
+detailed description see \fBIgnoreSelected\fR below.
+.IP "\fBIgnoreSelected\fR \fItrue\fR|\fIfalse\fR" 4
+.IX Item "IgnoreSelected true|false"
+If no configuration if given, the \fBirq\fR\-plugin will collect data from all
+irqs. This may not be practical, especially if no interrupts happen. Thus, you
+can use the \fBIrq\fR\-option to pick the interrupt you're interested in.
+Sometimes, however, it's easier/preferred to collect all interrupts \fIexcept\fR a
+few ones. This option enables you to do that: By setting \fBIgnoreSelected\fR to
+\&\fItrue\fR the effect of \fBIrq\fR is inversed: All selected interrupts are ignored
+and all other interrupts are collected.
+.ie n .SS "Plugin ""libvirt"""
+.el .SS "Plugin \f(CWlibvirt\fP"
+.IX Subsection "Plugin libvirt"
+This plugin allows \s-1CPU\s0, disk and network load to be collected for virtualized
+guests on the machine. This means that these characteristics can be collected
+for guest systems without installing any software on them \- collectd only runs
+on the hosting system. The statistics are collected through libvirt
+(<http://libvirt.org/>).
+.PP
+Only \fIConnection\fR is required.
+.IP "\fBConnection\fR \fIuri\fR" 4
+.IX Item "Connection uri"
+Connect to the hypervisor given by \fIuri\fR. For example if using Xen use:
+.Sp
+.Vb 1
+\& Connection "xen:///"
+.Ve
+.Sp
+Details which URIs allowed are given at <http://libvirt.org/uri.html>.
+.IP "\fBRefreshInterval\fR \fIseconds\fR" 4
+.IX Item "RefreshInterval seconds"
+Refresh the list of domains and devices every \fIseconds\fR. The default is 60
+seconds. Setting this to be the same or smaller than the \fIInterval\fR will cause
+the list of domains and devices to be refreshed on every iteration.
+.Sp
+Refreshing the devices in particular is quite a costly operation, so if your
+virtualization setup is static you might consider increasing this. If this
+option is set to 0, refreshing is disabled completely.
+.IP "\fBDomain\fR \fIname\fR" 4
+.IX Item "Domain name"
+.PD 0
+.IP "\fBBlockDevice\fR \fIname:dev\fR" 4
+.IX Item "BlockDevice name:dev"
+.IP "\fBInterfaceDevice\fR \fIname:dev\fR" 4
+.IX Item "InterfaceDevice name:dev"
+.IP "\fBIgnoreSelected\fR \fItrue\fR|\fIfalse\fR" 4
+.IX Item "IgnoreSelected true|false"
+.PD
+Select which domains and devices are collected.
+.Sp
+If \fIIgnoreSelected\fR is not given or \fIfalse\fR then only the listed domains and
+disk/network devices are collected.
+.Sp
+If \fIIgnoreSelected\fR is \fItrue\fR then the test is reversed and the listed
+domains and disk/network devices are ignored, while the rest are collected.
+.Sp
+The domain name and device names may use a regular expression, if the name is
+surrounded by \fI/.../\fR and collectd was compiled with support for regexps.
+.Sp
+The default is to collect statistics for all domains and all their devices.
+.Sp
+Example:
+.Sp
+.Vb 2
+\& BlockDevice "/:hdb/"
+\& IgnoreSelected "true"
+.Ve
+.Sp
+Ignore all \fIhdb\fR devices on any domain, but other block devices (eg. \fIhda\fR)
+will be collected.
+.IP "\fBHostnameFormat\fR \fBname|uuid|hostname|...\fR" 4
+.IX Item "HostnameFormat name|uuid|hostname|..."
+When the libvirt plugin logs data, it sets the hostname of the collected data
+according to this setting. The default is to use the guest name as provided by
+the hypervisor, which is equal to setting \fBname\fR.
+.Sp
+\&\fBuuid\fR means use the guest's \s-1UUID\s0. This is useful if you want to track the
+same guest across migrations.
+.Sp
+\&\fBhostname\fR means to use the global \fBHostname\fR setting, which is probably not
+useful on its own because all guests will appear to have the same name.
+.Sp
+You can also specify combinations of these fields. For example \fBname uuid\fR
+means to concatenate the guest name and \s-1UUID\s0 (with a literal colon character
+between, thus \fI\*(L"foo:1234\-1234\-1234\-1234\*(R"\fR).
+.ie n .SS "Plugin ""logfile"""
+.el .SS "Plugin \f(CWlogfile\fP"
+.IX Subsection "Plugin logfile"
+.IP "\fBLogLevel\fR \fBdebug|info|notice|warning|err\fR" 4
+.IX Item "LogLevel debug|info|notice|warning|err"
+Sets the log-level. If, for example, set to \fBnotice\fR, then all events with
+severity \fBnotice\fR, \fBwarning\fR, or \fBerr\fR will be written to the logfile.
+.Sp
+Please note that \fBdebug\fR is only available if collectd has been compiled with
+debugging support.
+.IP "\fBFile\fR \fIFile\fR" 4
+.IX Item "File File"
+Sets the file to write log messages to. The special strings \fBstdout\fR and
+\&\fBstderr\fR can be used to write to the standard output and standard error
+channels, respectively. This, of course, only makes much sense when collectd is
+running in foreground\- or non-daemon-mode.
+.IP "\fBTimestamp\fR \fBtrue\fR|\fBfalse\fR" 4
+.IX Item "Timestamp true|false"
+Prefix all lines printed by the current time. Defaults to \fBtrue\fR.
+.ie n .SS "Plugin ""mbmon"""
+.el .SS "Plugin \f(CWmbmon\fP"
+.IX Subsection "Plugin mbmon"
+The \f(CW\*(C`mbmon plugin\*(C'\fR uses mbmon to retrieve temperature, voltage, etc.
+.PP
+Be default collectd connects to \fBlocalhost\fR (127.0.0.1), port \fB411/tcp\fR. The
+\&\fBHost\fR and \fBPort\fR options can be used to change these values, see below.
+\&\f(CW\*(C`mbmon\*(C'\fR has to be running to work correctly. If \f(CW\*(C`mbmon\*(C'\fR is not running
+timeouts may appear which may interfere with other statistics..
+.PP
+\&\f(CW\*(C`mbmon\*(C'\fR must be run with the \-r option (\*(L"print \s-1TAG\s0 and Value format\*(R");
+Debian's \fI/etc/init.d/mbmon\fR script already does this, other people
+will need to ensure that this is the case.
+.IP "\fBHost\fR \fIHostname\fR" 4
+.IX Item "Host Hostname"
+Hostname to connect to. Defaults to \fB127.0.0.1\fR.
+.IP "\fBPort\fR \fIPort\fR" 4
+.IX Item "Port Port"
+TCP-Port to connect to. Defaults to \fB411\fR.
+.ie n .SS "Plugin ""memcached"""
+.el .SS "Plugin \f(CWmemcached\fP"
+.IX Subsection "Plugin memcached"
+The \f(CW\*(C`memcached plugin\*(C'\fR connects to a memcached server and queries statistics
+about cache utilization, memory and bandwidth used.
+<http://www.danga.com/memcached/>
+.IP "\fBHost\fR \fIHostname\fR" 4
+.IX Item "Host Hostname"
+Hostname to connect to. Defaults to \fB127.0.0.1\fR.
+.IP "\fBPort\fR \fIPort\fR" 4
+.IX Item "Port Port"
+TCP-Port to connect to. Defaults to \fB11211\fR.
+.ie n .SS "Plugin ""mysql"""
+.el .SS "Plugin \f(CWmysql\fP"
+.IX Subsection "Plugin mysql"
+The \f(CW\*(C`mysql plugin\*(C'\fR requires \fBmysqlclient\fR to be installed. It connects to the
+database when started and keeps the connection up as long as possible. When the
+connection is interrupted for whatever reason it will try to re-connect. The
+plugin will complaint loudly in case anything goes wrong.
+.PP
+This plugin issues the MySQL \f(CW\*(C`SHOW STATUS\*(C'\fR command and collects information
+about MySQL network traffic, executed statements, requests, the query cache
+and threads by evaluating the \f(CW\*(C`Bytes_{received,sent}\*(C'\fR, \f(CW\*(C`Com_*\*(C'\fR,
+\&\f(CW\*(C`Handler_*\*(C'\fR, \f(CW\*(C`Qcache_*\*(C'\fR and \f(CW\*(C`Threads_*\*(C'\fR return values. Please refer to the
+\&\fBMySQL reference manual\fR, \fI5.1.6. Server Status Variables\fR for an
+explanation of these values.
+.PP
+Use the following options to configure the plugin:
+.IP "\fBHost\fR \fIHostname\fR" 4
+.IX Item "Host Hostname"
+Hostname of the database server. Defaults to \fBlocalhost\fR.
+.IP "\fBUser\fR \fIUsername\fR" 4
+.IX Item "User Username"
+Username to use when connecting to the database. The user does not have to be
+granted any privileges (which is synonym to granting the \f(CW\*(C`USAGE\*(C'\fR privilege).
+Any existing MySQL user will do.
+.IP "\fBPassword\fR \fIPassword\fR" 4
+.IX Item "Password Password"
+Password needed to log into the database.
+.IP "\fBDatabase\fR \fIDatabase\fR" 4
+.IX Item "Database Database"
+Select this database. Defaults to \fIno database\fR which is a perfectly reasonable
+option for what this plugin does.
+.ie n .SS "Plugin ""netlink"""
+.el .SS "Plugin \f(CWnetlink\fP"
+.IX Subsection "Plugin netlink"
+The \f(CW\*(C`netlink\*(C'\fR plugin uses a netlink socket to query the Linux kernel about
+statistics of various interface and routing aspects.
+.IP "\fBInterface\fR \fIInterface\fR" 4
+.IX Item "Interface Interface"
+.PD 0
+.IP "\fBVerboseInterface\fR \fIInterface\fR" 4
+.IX Item "VerboseInterface Interface"
+.PD
+Instruct the plugin to collect interface statistics. This is basically the same
+as the statistics provided by the \f(CW\*(C`interface\*(C'\fR plugin (see above) but
+potentially much more detailed.
+.Sp
+When configuring with \fBInterface\fR only the basic statistics will be collected,
+namely octets, packets, and errors. These statistics are collected by
+the \f(CW\*(C`interface\*(C'\fR plugin, too, so using both at the same time is no benefit.
+.Sp
+When configured with \fBVerboseInterface\fR all counters \fBexcept\fR the basic ones,
+so that no data needs to be collected twice if you use the \f(CW\*(C`interface\*(C'\fR plugin.
+This includes dropped packets, received multicast packets, collisions and a
+whole zoo of differentiated \s-1RX\s0 and \s-1TX\s0 errors. You can try the following command
+to get an idea of what awaits you:
+.Sp
+.Vb 1
+\&  ip \-s \-s link list
+.Ve
+.Sp
+If \fIInterface\fR is \fBAll\fR, all interfaces will be selected.
+.IP "\fBQDisc\fR \fIInterface\fR [\fIQDisc\fR]" 4
+.IX Item "QDisc Interface [QDisc]"
+.PD 0
+.IP "\fBClass\fR \fIInterface\fR [\fIClass\fR]" 4
+.IX Item "Class Interface [Class]"
+.IP "\fBFilter\fR \fIInterface\fR [\fIFilter\fR]" 4
+.IX Item "Filter Interface [Filter]"
+.PD
+Collect the octets and packets that pass a certain qdisc, class or filter.
+.Sp
+QDiscs and classes are identified by their type and handle (or classid).
+Filters don't necessarily have a handle, therefore the parent's handle is used.
+The notation used in collectd differs from that used in \fItc\fR\|(1) in that it
+doesn't skip the major or minor number if it's zero and doesn't print special
+ids by their name. So, for example, a qdisc may be identified by
+\&\f(CW\*(C`pfifo_fast\-1:0\*(C'\fR even though the minor number of \fBall\fR qdiscs is zero and
+thus not displayed by \fItc\fR\|(1).
+.Sp
+If \fBQDisc\fR, \fBClass\fR, or \fBFilter\fR is given without the second argument,
+i.\ .e. without an identifier, all qdiscs, classes, or filters that are
+associated with that interface will be collected.
+.Sp
+Since a filter itself doesn't necessarily have a handle, the parent's handle is
+used. This may lead to problems when more than one filter is attached to a
+qdisc or class. This isn't nice, but we don't know how this could be done any
+better. If you have a idea, please don't hesitate to tell us.
+.Sp
+As with the \fBInterface\fR option you can specify \fBAll\fR as the interface,
+meaning all interfaces.
+.Sp
+Here are some examples to help you understand the above text more easily:
+.Sp
+.Vb 7
+\&  <Plugin netlink>
+\&    VerboseInterface "All"
+\&    QDisc "eth0" "pfifo_fast\-1:0"
+\&    QDisc "ppp0"
+\&    Class "ppp0" "htb\-1:10"
+\&    Filter "ppp0" "u32\-1:0"
+\&  </Plugin>
+.Ve
+.IP "\fBIgnoreSelected\fR" 4
+.IX Item "IgnoreSelected"
+The behaviour is the same as with all other similar plugins: If nothing is
+selected at all, everything is collected. If some things are selected using the
+options described above, only these statistics are collected. If you set
+\&\fBIgnoreSelected\fR to \fBtrue\fR, this behavior is inversed, i.\ e. the
+specified statistics will not be collected.
+.ie n .SS "Plugin ""network"""
+.el .SS "Plugin \f(CWnetwork\fP"
+.IX Subsection "Plugin network"
+.IP "\fBListen\fR \fIHost\fR [\fIPort\fR]" 4
+.IX Item "Listen Host [Port]"
+.PD 0
+.IP "\fBServer\fR \fIHost\fR [\fIPort\fR]" 4
+.IX Item "Server Host [Port]"
+.PD
+The \fBServer\fR statement sets the server to send datagrams \fBto\fR.  The statement
+may occur multiple times to send each datagram to multiple destinations.
+.Sp
+The \fBListen\fR statement sets the interfaces to bind to. When multiple
+statements are found the daemon will bind to multiple interfaces.
+.Sp
+The argument \fIHost\fR may be a hostname, an IPv4 address or an IPv6 address. If
+the argument is a multicast address the daemon will join that multicast group.
+.Sp
+If no \fBListen\fR statement is found the server tries join both, the default IPv6
+multicast group and the default IPv4 multicast group. If no \fBServer\fR statement
+is found the client will try to send data to the IPv6 multicast group first. If
+that fails the client will try the IPv4 multicast group.
+.Sp
+The default IPv6 multicast group is \f(CW\*(C`ff18::efc0:4a42\*(C'\fR. The default IPv4
+multicast group is \f(CW239.192.74.66\fR.
+.Sp
+The optional \fIPort\fR argument sets the port to use. It can either be given
+using a numeric port number or a service name. If the argument is omitted the
+default port \fB25826\fR is assumed.
+.IP "\fBTimeToLive\fR \fI1\-255\fR" 4
+.IX Item "TimeToLive 1-255"
+Set the time-to-live of sent packets. This applies to all, unicast and
+multicast, and IPv4 and IPv6 packets. The default is to not change this value.
+That means that multicast packets will be sent with a \s-1TTL\s0 of \f(CW1\fR (one) on most
+operating systems.
+.IP "\fBForward\fR \fItrue|false\fR" 4
+.IX Item "Forward true|false"
+If set to \fItrue\fR, write packets that were received via the network plugin to
+the sending sockets. This should only be activated when the \fBListen\fR\- and
+\&\fBServer\fR\-statements differ. Otherwise packets may be send multiple times to
+the same multicast group. While this results in more network traffic than
+necessary it's not a huge problem since the plugin has a duplicate detection,
+so the values will not loop.
+.IP "\fBCacheFlush\fR \fISeconds\fR" 4
+.IX Item "CacheFlush Seconds"
+For each host/plugin/type combination the \f(CW\*(C`network plugin\*(C'\fR caches the time of
+the last value being sent or received. Every \fISeconds\fR seconds the plugin
+searches and removes all entries that are older than \fISeconds\fR seconds, thus
+freeing the unused memory again. Since this process is somewhat expensive and
+normally doesn't do much, this value should not be too small. The default is
+1800 seconds, but setting this to 86400 seconds (one day) will not do much harm
+either.
+.ie n .SS "Plugin ""nginx"""
+.el .SS "Plugin \f(CWnginx\fP"
+.IX Subsection "Plugin nginx"
+This plugin collects the number of connections and requests handled by the
+\&\f(CW\*(C`nginx daemon\*(C'\fR (speak: engine\ X), a \s-1HTTP\s0 and mail server/proxy. It
+queries the page provided by the \f(CW\*(C`ngx_http_stub_status_module\*(C'\fR module, which
+isn't compiled by default. Please refer to
+<http://wiki.codemongers.com/NginxStubStatusModule> for more information on
+how to compile and configure nginx and this module.
+.PP
+The following options are accepted by the \f(CW\*(C`nginx plugin\*(C'\fR:
+.IP "\fB\s-1URL\s0\fR \fIhttp://host/nginx_status\fR" 4
+.IX Item "URL http://host/nginx_status"
+Sets the \s-1URL\s0 of the \f(CW\*(C`ngx_http_stub_status_module\*(C'\fR output.
+.IP "\fBUser\fR \fIUsername\fR" 4
+.IX Item "User Username"
+Optional user name needed for authentication.
+.IP "\fBPassword\fR \fIPassword\fR" 4
+.IX Item "Password Password"
+Optional password needed for authentication.
+.IP "\fBVerifyPeer\fR \fBtrue|false\fR" 4
+.IX Item "VerifyPeer true|false"
+Enable or disable peer \s-1SSL\s0 certificate verification. See
+<http://curl.haxx.se/docs/sslcerts.html> for details. Enabled by default.
+.IP "\fBVerifyHost\fR \fBtrue|false\fR" 4
+.IX Item "VerifyHost true|false"
+Enable or disable peer host name verification. If enabled, the plugin checks
+if the \f(CW\*(C`Common Name\*(C'\fR or a \f(CW\*(C`Subject Alternate Name\*(C'\fR field of the \s-1SSL\s0
+certificate matches the host name provided by the \fB\s-1URL\s0\fR option. If this
+identity check fails, the connection is aborted. Obviously, only works when
+connecting to a \s-1SSL\s0 enabled server. Enabled by default.
+.IP "\fBCACert\fR \fIFile\fR" 4
+.IX Item "CACert File"
+File that holds one or more \s-1SSL\s0 certificates. If you want to use \s-1HTTPS\s0 you will
+possibly need this option. What \s-1CA\s0 certificates come bundled with \f(CW\*(C`libcurl\*(C'\fR
+and are checked by default depends on the distribution you use.
+.ie n .SS "Plugin ""ntpd"""
+.el .SS "Plugin \f(CWntpd\fP"
+.IX Subsection "Plugin ntpd"
+.IP "\fBHost\fR \fIHostname\fR" 4
+.IX Item "Host Hostname"
+Hostname of the host running \fBntpd\fR. Defaults to \fBlocalhost\fR.
+.IP "\fBPort\fR \fIPort\fR" 4
+.IX Item "Port Port"
+UDP-Port to connect to. Defaults to \fB123\fR.
+.IP "\fBReverseLookups\fR \fBtrue\fR|\fBfalse\fR" 4
+.IX Item "ReverseLookups true|false"
+Sets wether or not to perform reverse lookups on peers. Since the name or
+IP-address may be used in a filename it is recommended to disable reverse
+lookups. The default is to do reverse lookups to preserve backwards
+compatibility, though.
+.ie n .SS "Plugin ""nut"""
+.el .SS "Plugin \f(CWnut\fP"
+.IX Subsection "Plugin nut"
+.IP "\fB\s-1UPS\s0\fR \fIupsname\fR\fB@\fR\fIhostname\fR[\fB:\fR\fIport\fR]" 4
+.IX Item "UPS upsname@hostname[:port]"
+Add a \s-1UPS\s0 to collect data from. The format is identical to the one accepted by
+\&\fIupsc\fR\|(8).
+.ie n .SS "Plugin ""perl"""
+.el .SS "Plugin \f(CWperl\fP"
+.IX Subsection "Plugin perl"
+This plugin embeds a Perl-interpreter into collectd and provides an interface
+to collectd's plugin system. See \fIcollectd\-perl\fR\|(5) for its documentation.
+.ie n .SS "Plugin ""ping"""
+.el .SS "Plugin \f(CWping\fP"
+.IX Subsection "Plugin ping"
+.IP "\fBHost\fR \fIIP-address\fR" 4
+.IX Item "Host IP-address"
+Host to ping periodically. This option may be repeated several times to ping
+multiple hosts.
+.IP "\fB\s-1TTL\s0\fR \fI0\-255\fR" 4
+.IX Item "TTL 0-255"
+Sets the Time-To-Live of generated \s-1ICMP\s0 packets.
+.ie n .SS "Plugin ""powerdns"""
+.el .SS "Plugin \f(CWpowerdns\fP"
+.IX Subsection "Plugin powerdns"
+The \f(CW\*(C`powerdns\*(C'\fR plugin queries statistics from an authoritative PowerDNS
+nameserver and/or a PowerDNS recursor. Since both offer a wide variety of
+values, many of which are probably meaningless to most users, but may be useful
+for some. So you may chose which values to collect, but if you don't, some
+reasonable defaults will be collected.
+.PP
+.Vb 10
+\&  <Plugin "powerdns">
+\&    <Server "server_name">
+\&      Collect "latency"
+\&      Collect "udp\-answers" "udp\-queries"
+\&      Socket "/var/run/pdns.controlsocket"
+\&    </Server>
+\&    <Recursor "recursor_name">
+\&      Collect "questions"
+\&      Collect "cache\-hits" "cache\-misses"
+\&      Socket "/var/run/pdns_recursor.controlsocket"
+\&    </Recursor>
+\&    LocalSocket "/opt/collectd/var/run/collectd\-powerdns"
+\&  </Plugin>
+.Ve
+.IP "\fBServer\fR and \fBRecursor\fR block" 4
+.IX Item "Server and Recursor block"
+The \fBServer\fR block defines one authoritative server to query, the \fBRecursor\fR
+does the same for an recursing server. The possible options in both blocks are
+the same, though. The argument defines a name for the server\ / recursor
+and is required.
+.RS 4
+.IP "\fBCollect\fR \fIField\fR" 4
+.IX Item "Collect Field"
+Using the \fBCollect\fR statement you can select which values to collect. Here,
+you specify the name of the values as used by the PowerDNS servers, e.\ g.
+\&\f(CW\*(C`dlg\-only\-drops\*(C'\fR, \f(CW\*(C`answers10\-100\*(C'\fR.
+.Sp
+The method of getting the values differs for \fBServer\fR and \fBRecursor\fR blocks:
+When querying the server a \f(CW\*(C`SHOW *\*(C'\fR command is issued in any case, because
+that's the only way of getting multiple values out of the server at once.
+collectd then picks out the values you have selected. When querying the
+recursor, a command is generated to query exactly these values. So if you
+specify invalid fields when querying the recursor, a syntax error may be
+returned by the daemon and collectd may not collect any values at all.
+.Sp
+If no \fBCollect\fR statement is given, the following \fBServer\fR values will be
+collected:
+.RS 4
+.IP "latency" 4
+.IX Item "latency"
+.PD 0
+.IP "packetcache-hit" 4
+.IX Item "packetcache-hit"
+.IP "packetcache-miss" 4
+.IX Item "packetcache-miss"
+.IP "packetcache-size" 4
+.IX Item "packetcache-size"
+.IP "query-cache-hit" 4
+.IX Item "query-cache-hit"
+.IP "query-cache-miss" 4
+.IX Item "query-cache-miss"
+.IP "recursing-answers" 4
+.IX Item "recursing-answers"
+.IP "recursing-questions" 4
+.IX Item "recursing-questions"
+.IP "tcp-answers" 4
+.IX Item "tcp-answers"
+.IP "tcp-queries" 4
+.IX Item "tcp-queries"
+.IP "udp-answers" 4
+.IX Item "udp-answers"
+.IP "udp-queries" 4
+.IX Item "udp-queries"
+.RE
+.RS 4
+.PD
+.Sp
+The following \fBRecursor\fR values will be collected by default:
+.IP "noerror-answers" 4
+.IX Item "noerror-answers"
+.PD 0
+.IP "nxdomain-answers" 4
+.IX Item "nxdomain-answers"
+.IP "servfail-answers" 4
+.IX Item "servfail-answers"
+.IP "sys-msec" 4
+.IX Item "sys-msec"
+.IP "user-msec" 4
+.IX Item "user-msec"
+.IP "qa-latency" 4
+.IX Item "qa-latency"
+.IP "cache-entries" 4
+.IX Item "cache-entries"
+.IP "cache-hits" 4
+.IX Item "cache-hits"
+.IP "cache-misses" 4
+.IX Item "cache-misses"
+.IP "questions" 4
+.IX Item "questions"
+.RE
+.RS 4
+.PD
+.Sp
+Please note that up to that point collectd doesn't know what values are
+available on the server and values that are added do not need a change of the
+mechanism so far. However, the values must be mapped to collectd's naming
+scheme, which is done using a lookup table that lists all known values. If
+values are added in the future and collectd does not know about them, you will
+get an error much like this:
+.Sp
+.Vb 1
+\&  powerdns plugin: submit: Not found in lookup table: foobar = 42
+.Ve
+.Sp
+In this case please file a bug report with the collectd team.
+.RE
+.IP "\fBSocket\fR \fIPath\fR" 4
+.IX Item "Socket Path"
+Configures the path to the \s-1UNIX\s0 domain socket to be used when connecting to the
+daemon. By default \f(CW\*(C`${localstatedir}/run/pdns.controlsocket\*(C'\fR will be used for
+an authoritative server and \f(CW\*(C`${localstatedir}/run/pdns_recursor.controlsocket\*(C'\fR
+will be used for the recursor.
+.RE
+.RS 4
+.RE
+.IP "\fBLocalSocket\fR \fIPath\fR" 4
+.IX Item "LocalSocket Path"
+Querying the recursor is done using \s-1UDP\s0. When using \s-1UDP\s0 over \s-1UNIX\s0 domain
+sockets, the client socket needs a name in the file system, too. You can set
+this local name to \fIPath\fR using the \fBLocalSocket\fR option. The default is
+\&\f(CW\*(C`\f(CIprefix\f(CW/var/run/collectd\-powerdns\*(C'\fR.
+.ie n .SS "Plugin ""processes"""
+.el .SS "Plugin \f(CWprocesses\fP"
+.IX Subsection "Plugin processes"
+.IP "\fBProcess\fR \fIName\fR" 4
+.IX Item "Process Name"
+Select more detailed statistics of processes matching this name. The statistics
+collected for these selected processes are size of the resident segment size
+(\s-1RSS\s0), user\- and system-time used, number of processes and number of threads,
+and minor and major pagefaults.
+.ie n .SS "Plugin ""rrdtool"""
+.el .SS "Plugin \f(CWrrdtool\fP"
+.IX Subsection "Plugin rrdtool"
+You can use the settings \fBStepSize\fR, \fBHeartBeat\fR, \fBRRARows\fR, and \fB\s-1XFF\s0\fR to
+fine-tune your RRD-files. Please read \fIrrdcreate\fR\|(1) if you encounter problems
+using these settings. If you don't want to dive into the depths of RRDTool, you
+can safely ignore these settings.
+.IP "\fBDataDir\fR \fIDirectory\fR" 4
+.IX Item "DataDir Directory"
+Set the directory to store RRD-files under. Per default RRD-files are generated
+beneath the daemon's working directory, i.\ e. the \fBBaseDir\fR.
+.IP "\fBStepSize\fR \fISeconds\fR" 4
+.IX Item "StepSize Seconds"
+\&\fBForce\fR the stepsize of newly created RRD-files. Ideally (and per default)
+this setting is unset and the stepsize is set to the interval in which the data
+is collected. Do not use this option unless you absolutely have to for some
+reason. Setting this option may cause problems with the \f(CW\*(C`snmp plugin\*(C'\fR, the
+\&\f(CW\*(C`exec plugin\*(C'\fR or when the daemon is set up to receive data from other hosts.
+.IP "\fBHeartBeat\fR \fISeconds\fR" 4
+.IX Item "HeartBeat Seconds"
+\&\fBForce\fR the heartbeat of newly created RRD-files. This setting should be unset
+in which case the heartbeat is set to twice the \fBStepSize\fR which should equal
+the interval in which data is collected. Do not set this option unless you have
+a very good reason to do so.
+.IP "\fBRRARows\fR \fINumRows\fR" 4
+.IX Item "RRARows NumRows"
+The \f(CW\*(C`rrdtool plugin\*(C'\fR calculates the number of PDPs per \s-1CDP\s0 based on the
+\&\fBStepSize\fR, this setting and a timespan. This plugin creates RRD-files with
+three times five RRAs, i. e. five RRAs with the CFs \fB\s-1MIN\s0\fR, \fB\s-1AVERAGE\s0\fR, and
+\&\fB\s-1MAX\s0\fR. The five RRAs are optimized for graphs covering one hour, one day, one
+week, one month, and one year.
+.Sp
+So for each timespan, it calculates how many PDPs need to be consolidated into
+one \s-1CDP\s0 by calculating:
+  number of PDPs = timespan / (stepsize * rrarows)
+.Sp
+Bottom line is, set this no smaller than the width of you graphs in pixels. The
+default is 1200.
+.IP "\fBRRATimespan\fR \fISeconds\fR" 4
+.IX Item "RRATimespan Seconds"
+Adds an RRA-timespan, given in seconds. Use this option multiple times to have
+more then one \s-1RRA\s0. If this option is never used, the built-in default of (3600,
+86400, 604800, 2678400, 31622400) is used.
+.Sp
+For more information on how RRA-sizes are calculated see \fBRRARows\fR above.
+.IP "\fB\s-1XFF\s0\fR \fIFactor\fR" 4
+.IX Item "XFF Factor"
+Set the \*(L"XFiles Factor\*(R". The default is 0.1. If unsure, don't set this option.
+.IP "\fBCacheFlush\fR \fISeconds\fR" 4
+.IX Item "CacheFlush Seconds"
+When the \f(CW\*(C`rrdtool plugin\*(C'\fR uses a cache (by setting \fBCacheTimeout\fR, see below)
+it writes all values for a certain RRD-file if the oldest value is older than
+(or equal to) the number of seconds specified. If some RRD-file is not updated
+anymore for some reason (the computer was shut down, the network is broken,
+etc.) some values may still be in the cache. If \fBCacheFlush\fR is set, then the
+entire cache is searched for entries older than \fBCacheTimeout\fR seconds and
+written to disk every \fISeconds\fR seconds. Since this is kind of expensive and
+does nothing under normal circumstances, this value should not be too small.
+900 seconds might be a good value, though setting this to 7200 seconds doesn't
+normally do much harm either.
+.IP "\fBCacheTimeout\fR \fISeconds\fR" 4
+.IX Item "CacheTimeout Seconds"
+If this option is set to a value greater than zero, the \f(CW\*(C`rrdtool plugin\*(C'\fR will
+save values in a cache, as described above. Writing multiple values at once
+reduces IO-operations and thus lessens the load produced by updating the files.
+The trade off is that the graphs kind of \*(L"drag behind\*(R" and that more memory is
+used.
+.ie n .SS "Plugin ""sensors"""
+.el .SS "Plugin \f(CWsensors\fP"
+.IX Subsection "Plugin sensors"
+The \f(CW\*(C`sensors plugin\*(C'\fR uses \fBlm_sensors\fR to retrieve sensor-values. This means
+that all the needed modules have to be loaded and lm_sensors has to be
+configured (most likely by editing \fI/etc/sensors.conf\fR. Read
+\&\fIsensors.conf\fR\|(5) for details.
+.PP
+The \fBlm_sensors\fR homepage can be found at
+<http://secure.netroedge.com/~lm78/>.
+.IP "\fBSensor\fR \fIchip\-bus\-address/type\-feature\fR" 4
+.IX Item "Sensor chip-bus-address/type-feature"
+Selects the name of the sensor which you want to collect or ignore, depending
+on the \fBIgnoreSelected\fR below. For example, the option "\fBSensor\fR
+\&\fIit8712\-isa\-0290/voltage\-in1\fR" will cause collectd to gather data for the
+voltage sensor \fIin1\fR of the \fIit8712\fR on the isa bus at the address 0290.
+.IP "\fBIgnoreSelected\fR \fItrue\fR|\fIfalse\fR" 4
+.IX Item "IgnoreSelected true|false"
+If no configuration if given, the \fBsensors\fR\-plugin will collect data from all
+sensors. This may not be practical, especially for uninteresting sensors.
+Thus, you can use the \fBSensor\fR\-option to pick the sensors you're interested
+in. Sometimes, however, it's easier/preferred to collect all sensors \fIexcept\fR a
+few ones. This option enables you to do that: By setting \fBIgnoreSelected\fR to
+\&\fItrue\fR the effect of \fBSensor\fR is inversed: All selected sensors are ignored
+and all other sensors are collected.
+.ie n .SS "Plugin ""snmp"""
+.el .SS "Plugin \f(CWsnmp\fP"
+.IX Subsection "Plugin snmp"
+Since the configuration of the \f(CW\*(C`snmp plugin\*(C'\fR is a little more complicated than
+other plugins, its documentation has been moved to an own manpage,
+\&\fIcollectd\-snmp\fR\|(5). Please see there for details.
+.ie n .SS "Plugin ""syslog"""
+.el .SS "Plugin \f(CWsyslog\fP"
+.IX Subsection "Plugin syslog"
+.IP "\fBLogLevel\fR \fBdebug|info|notice|warning|err\fR" 4
+.IX Item "LogLevel debug|info|notice|warning|err"
+Sets the log-level. If, for example, set to \fBnotice\fR, then all events with
+severity \fBnotice\fR, \fBwarning\fR, or \fBerr\fR will be submitted to the
+syslog-daemon.
+.Sp
+Please note that \fBdebug\fR is only available if collectd has been compiled with
+debugging support.
+.ie n .SS "Plugin ""tail"""
+.el .SS "Plugin \f(CWtail\fP"
+.IX Subsection "Plugin tail"
+The \f(CW\*(C`tail plugin\*(C'\fR plugins follows logfiles, just like \fItail\fR\|(1) does, parses
+each line and dispatches found values. What is matched can be configured by the
+user using (extended) regular expressions, as described in \fIregex\fR\|(7).
+.PP
+.Vb 10
+\&  <Plugin "tail">
+\&    <File "/var/log/exim4/mainlog">
+\&      Instance "exim"
+\&      <Match>
+\&        Regex "S=([1\-9][0\-9]*)"
+\&        DSType "CounterAdd"
+\&        Type "ipt_bytes"
+\&        Instance "total"
+\&      </Match>
+\&      <Match>
+\&        Regex "\e\e<R=local_user\e\e>"
+\&        DSType "CounterInc"
+\&        Type "counter"
+\&        Instance "local_user"
+\&      </Match>
+\&    </File>
+\&  </Plugin>
+.Ve
+.PP
+The config consists of one or more \fBFile\fR blocks, each of which configures one
+logfile to parse. Within each \fBFile\fR block, there are one or more \fBMatch\fR
+blocks, which configure a regular expression to search for.
+.PP
+The \fBInstance\fR option in the \fBFile\fR block may be used to set the plugin
+instance. So in the above example the plugin name \f(CW\*(C`tail\-foo\*(C'\fR would be used.
+This plugin instance is for all \fBMatch\fR blocks that \fBfollow\fR it, until the
+next \fBInstance\fR option. This way you can extract several plugin instances from
+one logfile, handy when parsing syslog and the like.
+.PP
+Each \fBMatch\fR block has the following options to describe how the match should
+be performed:
+.IP "\fBRegex\fR \fIregex\fR" 4
+.IX Item "Regex regex"
+Sets the regular expression to use for matching against a line. The first
+subexpression has to match something that can be turned into a number by
+\&\fIstrtoll\fR\|(3) or \fIstrtod\fR\|(3), depending on the value of \f(CW\*(C`CounterAdd\*(C'\fR, see
+below. Because \fBextended\fR regular expressions are used, you do not need to use
+backslashes for subexpressions! If in doubt, please consult \fIregex\fR\|(7). Due to
+collectd's config parsing you need to escape backslashes, though. So if you
+want to match literal parentheses you need to do the following:
+.Sp
+.Vb 1
+\&  Regex "SPAM \e\e(Score: (\-?[0\-9]+\e\e.[0\-9]+)\e\e)"
+.Ve
+.IP "\fBDSType\fR \fIType\fR" 4
+.IX Item "DSType Type"
+Sets how the values are cumulated. \fIType\fR is one of:
+.RS 4
+.IP "\fBGaugeAverage\fR" 4
+.IX Item "GaugeAverage"
+Calculate the average.
+.IP "\fBGaugeMin\fR" 4
+.IX Item "GaugeMin"
+Use the smallest number only.
+.IP "\fBGaugeMax\fR" 4
+.IX Item "GaugeMax"
+Use the greatest number only.
+.IP "\fBGaugeLast\fR" 4
+.IX Item "GaugeLast"
+Use the last number found.
+.IP "\fBCounterSet\fR" 4
+.IX Item "CounterSet"
+The matched number is a counter. Simply sets the internal counter to this
+value.
+.IP "\fBCounterAdd\fR" 4
+.IX Item "CounterAdd"
+Add the matched value to the internal counter.
+.IP "\fBCounterInc\fR" 4
+.IX Item "CounterInc"
+Increase the internal counter by one. This \fBDSType\fR is the only one that does
+not use the matched subexpression, but simply counts the number of matched
+lines. Thus, you may use a regular expression without submatch in this case.
+.RE
+.RS 4
+.Sp
+As you'd expect the \fBGauge*\fR types interpret the submatch as a floating point
+number, using \fIstrtod\fR\|(3). The \fBCounterSet\fR and \fBCounterAdd\fR interpret the
+submatch as an integer using \fIstrtoll\fR\|(3). \fBCounterInc\fR does not use the
+submatch at all and it may be omitted in this case.
+.RE
+.IP "\fBType\fR \fIType\fR" 4
+.IX Item "Type Type"
+Sets the type used to dispatch this value. Detailed information about types and
+their configuration can be found in \fItypes.db\fR\|(5).
+.IP "\fBInstance\fR \fITypeInstance\fR" 4
+.IX Item "Instance TypeInstance"
+This optional setting sets the type instance to use.
+.ie n .SS "Plugin ""teamspeak2"""
+.el .SS "Plugin \f(CWteamspeak2\fP"
+.IX Subsection "Plugin teamspeak2"
+The \f(CW\*(C`teamspeak2 plugin\*(C'\fR connects to the query port of a teamspeak2 server and
+polls interesting global and virtual server data. The plugin can query only one
+physical server but unlimited virtual servers. You can use the following
+options to configure it:
+.IP "\fBHost\fR \fIhostname/ip\fR" 4
+.IX Item "Host hostname/ip"
+The hostname or ip which identifies the physical server.
+Default: 127.0.0.1
+.IP "\fBPort\fR \fIport\fR" 4
+.IX Item "Port port"
+The query port of the physical server. This needs to be a string.
+Default: \*(L"51234\*(R"
+.IP "\fBServer\fR \fIport\fR" 4
+.IX Item "Server port"
+This option has to be added once for every virtual server the plugin should
+query. If you want to query the virtual server on port 8767 this is what the
+option would look like:
+.Sp
+.Vb 1
+\&  Server "8767"
+.Ve
+.Sp
+This option, although numeric, needs to be a string, i.\ e. you \fBmust\fR
+use quotes around it! If no such statement is given only global information
+will be collected.
+.ie n .SS "Plugin ""tcpconns"""
+.el .SS "Plugin \f(CWtcpconns\fP"
+.IX Subsection "Plugin tcpconns"
+The \f(CW\*(C`tcpconns plugin\*(C'\fR counts the number of currently established \s-1TCP\s0
+connections based on the local port and/or the remote port. Since there may be
+a lot of connections the default if to count all connections with a local port,
+for which a listening socket is opened. You can use the following options to
+fine-tune the ports you are interested in:
+.IP "\fBListeningPorts\fR \fItrue\fR|\fIfalse\fR" 4
+.IX Item "ListeningPorts true|false"
+If this option is set to \fItrue\fR, statistics for all local ports for which a
+listening socket exists are collected. The default depends on \fBLocalPort\fR and
+\&\fBRemotePort\fR (see below): If no port at all is specifically selected, the
+default is to collect listening ports. If specific ports (no matter if local or
+remote ports) are selected, this option defaults to \fIfalse\fR, i.\ e. only
+the selected ports will be collected unless this option is set to \fItrue\fR
+specifically.
+.IP "\fBLocalPort\fR \fIPort\fR" 4
+.IX Item "LocalPort Port"
+Count the connections to a specific local port. This can be used to see how
+many connections are handled by a specific daemon, e.\ g. the mailserver.
+You have to specify the port in numeric form, so for the mailserver example
+you'd need to set \fB25\fR.
+.IP "\fBRemotePort\fR \fIPort\fR" 4
+.IX Item "RemotePort Port"
+Count the connections to a specific remote port. This is useful to see how
+much a remote service is used. This is most useful if you want to know how many
+connections a local service has opened to remote services, e.\ g. how many
+connections a mail server or news server has to other mail or news servers, or
+how many connections a web proxy holds to web servers. You have to give the
+port in numeric form.
+.ie n .SS "Plugin ""unixsock"""
+.el .SS "Plugin \f(CWunixsock\fP"
+.IX Subsection "Plugin unixsock"
+.IP "\fBSocketFile\fR \fIPath\fR" 4
+.IX Item "SocketFile Path"
+Sets the socket-file which is to be created.
+.IP "\fBSocketGroup\fR \fIGroup\fR" 4
+.IX Item "SocketGroup Group"
+If running as root change the group of the UNIX-socket after it has been
+created. Defaults to \fBcollectd\fR.
+.IP "\fBSocketPerms\fR \fIPermissions\fR" 4
+.IX Item "SocketPerms Permissions"
+Change the file permissions of the UNIX-socket after it has been created. The
+permissions must be given as a numeric, octal value as you would pass to
+\&\fIchmod\fR\|(1). Defaults to \fB0770\fR.
+.ie n .SS "Plugin ""uuid"""
+.el .SS "Plugin \f(CWuuid\fP"
+.IX Subsection "Plugin uuid"
+This plugin, if loaded, causes the Hostname to be taken from the machine's
+\&\s-1UUID\s0. The \s-1UUID\s0 is a universally unique designation for the machine, usually
+taken from the machine's \s-1BIOS\s0. This is most useful if the machine is running in
+a virtual environment such as Xen, in which case the \s-1UUID\s0 is preserved across
+shutdowns and migration.
+.PP
+The following methods are used to find the machine's \s-1UUID\s0, in order:
+.IP "\(bu" 4
+Check \fI/etc/uuid\fR (or \fIUUIDFile\fR).
+.IP "\(bu" 4
+Check for \s-1UUID\s0 from \s-1HAL\s0 (<http://www.freedesktop.org/wiki/Software/hal>) if
+present.
+.IP "\(bu" 4
+Check for \s-1UUID\s0 from \f(CW\*(C`dmidecode\*(C'\fR / \s-1SMBIOS\s0.
+.IP "\(bu" 4
+Check for \s-1UUID\s0 from Xen hypervisor.
+.PP
+If no \s-1UUID\s0 can be found then the hostname is not modified.
+.IP "\fBUUIDFile\fR \fIPath\fR" 4
+.IX Item "UUIDFile Path"
+Take the \s-1UUID\s0 from the given file (default \fI/etc/uuid\fR).
+.ie n .SS "Plugin ""vmem"""
+.el .SS "Plugin \f(CWvmem\fP"
+.IX Subsection "Plugin vmem"
+The \f(CW\*(C`vmem\*(C'\fR plugin collects information about the usage of virtual memory.
+Since the statistics provided by the Linux kernel are very detailed, they are
+collected very detailed. However, to get all the details, you have to switch
+them on manually. Most people just want an overview over, such as the number of
+pages read from swap space.
+.IP "\fBVerbose\fR \fBtrue\fR|\fBfalse\fR" 4
+.IX Item "Verbose true|false"
+Enables verbose collection of information. This will start collecting page
+\&\*(L"actions\*(R", e.\ g. page allocations, (de)activations, steals and so on.
+Part of these statistics are collected on a \*(L"per zone\*(R" basis.
+.ie n .SS "Plugin ""vserver"""
+.el .SS "Plugin \f(CWvserver\fP"
+.IX Subsection "Plugin vserver"
+This plugin doesn't have any options. \fBVServer\fR support is only available for
+Linux. It cannot yet be found in a vanilla kernel, though. To make use of this
+plugin you need a kernel that has \fBVServer\fR support built in, i.\ e. you
+need to apply the patches and compile your own kernel, which will then provide
+the \fI/proc/virtual\fR filesystem that is required by this plugin.
+.PP
+The \fBVServer\fR homepage can be found at <http://linux\-vserver.org/>.
+.SH "THRESHOLD CONFIGURATION"
+.IX Header "THRESHOLD CONFIGURATION"
+Starting with version \f(CW4.3.0\fR collectd has support for \fBmonitoring\fR. By that
+we mean that the values are not only stored or sent somewhere, but that they
+are judged and, if a problem is recognized, acted upon. The only action
+collectd takes itself is to generate and dispatch a \*(L"notification\*(R". Plugins can
+register to receive notifications and perform appropriate further actions.
+.PP
+Since systems and what you expect them to do differ a lot, you can configure
+\&\fBthresholds\fR for your values freely. This gives you a lot of flexibility but
+also a lot of responsibility.
+.PP
+Every time a value is out of range a notification is dispatched. This means
+that the idle percentage of your \s-1CPU\s0 needs to be less then the configured
+threshold only once for a notification to be generated. There's no such thing
+as a moving average or similar \- at least not now.
+.PP
+Also, all values that match a threshold are considered to be relevant or
+\&\*(L"interesting\*(R". As a consequence collectd will issue a notification if they are
+not received for twice the last timeout of the values. If, for example, some
+hosts sends it's \s-1CPU\s0 statistics to the server every 60 seconds, a notification
+will be dispatched after about 120 seconds. It may take a little longer because
+the timeout is checked only once each \fBInterval\fR on the server.
+.PP
+When a value comes within range again or is received after it was missing, an
+\&\*(L"OKAY-notification\*(R" is dispatched.
+.PP
+Here is a configuration example to get you started. Read below for more
+information.
+.PP
+.Vb 9
+\& <Threshold>
+\&   <Type "foo">
+\&     WarningMin    0.00
+\&     WarningMax 1000.00
+\&     FailureMin    0.00
+\&     FailureMax 1200.00
+\&     Invert false
+\&     Instance "bar"
+\&   </Type>
+\&
+\&   <Plugin "interface">
+\&     Instance "eth0"
+\&     <Type "if_octets">
+\&       FailureMax 10000000
+\&       DataSource "rx"
+\&     </Type>
+\&   </Plugin>
+\&
+\&   <Host "hostname">
+\&     <Type "cpu">
+\&       Instance "idle"
+\&       FailureMin 10
+\&     </Type>
+\&
+\&     <Plugin "memory">
+\&       <Type "memory">
+\&         Instance "cached"
+\&         WarningMin 100000000
+\&       </Type>
+\&     </Plugin>
+\&   </Host>
+\& </Threshold>
+.Ve
+.PP
+There are basically two types of configuration statements: The \f(CW\*(C`Host\*(C'\fR,
+\&\f(CW\*(C`Plugin\*(C'\fR, and \f(CW\*(C`Type\*(C'\fR blocks select the value for which a threshold should be
+configured. The \f(CW\*(C`Plugin\*(C'\fR and \f(CW\*(C`Type\*(C'\fR blocks may be specified further using the
+\&\f(CW\*(C`Instance\*(C'\fR option. You can combine the block by nesting the blocks, though
+they must be nested in the above order, i.\ e. \f(CW\*(C`Host\*(C'\fR may contain either
+\&\f(CW\*(C`Plugin\*(C'\fR and \f(CW\*(C`Type\*(C'\fR blocks, \f(CW\*(C`Plugin\*(C'\fR may only contain \f(CW\*(C`Type\*(C'\fR blocks and
+\&\f(CW\*(C`Type\*(C'\fR may not contain other blocks. If multiple blocks apply to the same
+value the most specific block is used.
+.PP
+The other statements specify the threshold to configure. They \fBmust\fR be
+included in a \f(CW\*(C`Type\*(C'\fR block. Currently the following statements are recognized:
+.IP "\fBFailureMax\fR \fIValue\fR" 4
+.IX Item "FailureMax Value"
+.PD 0
+.IP "\fBWarningMax\fR \fIValue\fR" 4
+.IX Item "WarningMax Value"
+.PD
+Sets the upper bound of acceptable values. If unset defaults to positive
+infinity. If a value is greater than \fBFailureMax\fR a \fB\s-1FAILURE\s0\fR notification
+will be created. If the value is greater than \fBWarningMax\fR but less than (or
+equal to) \fBFailureMax\fR a \fB\s-1WARNING\s0\fR notification will be created.
+.IP "\fBFailureMin\fR \fIValue\fR" 4
+.IX Item "FailureMin Value"
+.PD 0
+.IP "\fBWarningMin\fR \fIValue\fR" 4
+.IX Item "WarningMin Value"
+.PD
+Sets the lower bound of acceptable values. If unset defaults to negative
+infinity. If a value is less than \fBFailureMin\fR a \fB\s-1FAILURE\s0\fR notification will
+be created. If the value is less than \fBWarningMin\fR but greater than (or equal
+to) \fBFailureMin\fR a \fB\s-1WARNING\s0\fR notification will be created.
+.IP "\fBDataSource\fR \fIDSName\fR" 4
+.IX Item "DataSource DSName"
+Some data sets have more than one \*(L"data source\*(R". Interesting examples are the
+\&\f(CW\*(C`if_octets\*(C'\fR data set, which has received (\f(CW\*(C`rx\*(C'\fR) and sent (\f(CW\*(C`tx\*(C'\fR) bytes and
+the \f(CW\*(C`disk_ops\*(C'\fR data set, which holds \f(CW\*(C`read\*(C'\fR and \f(CW\*(C`write\*(C'\fR operations. The
+system load data set, \f(CW\*(C`load\*(C'\fR, even has three data sources: \f(CW\*(C`shortterm\*(C'\fR,
+\&\f(CW\*(C`midterm\*(C'\fR, and \f(CW\*(C`longterm\*(C'\fR.
+.Sp
+Normally, all data sources are checked against a configured threshold. If this
+is undesirable, or if you want to specify different limits for each data
+source, you can use the \fBDataSource\fR option to have a threshold apply only to
+one data source.
+.IP "\fBInvert\fR \fBtrue\fR|\fBfalse\fR" 4
+.IX Item "Invert true|false"
+If set to \fBtrue\fR the range of acceptable values is inverted, i.\ e.
+values between \fBFailureMin\fR and \fBFailureMax\fR (\fBWarningMin\fR and
+\&\fBWarningMax\fR) are not okay. Defaults to \fBfalse\fR.
+.IP "\fBPersist\fR \fBtrue\fR|\fBfalse\fR" 4
+.IX Item "Persist true|false"
+Sets how often notifications are generated. If set to \fBtrue\fR one notification
+will be generated for each value that is out of the acceptable range. If set to
+\&\fBfalse\fR (the default) then a notification is only generated if a value is out
+of range but the previous value was okay.
+.Sp
+This applies to missing values, too: If set to \fBtrue\fR a notification about a
+missing value is generated once every \fBInterval\fR seconds. If set to \fBfalse\fR
+only one such notification is generated until the value appears again.
 .SH "SEE ALSO"
 .IX Header "SEE ALSO"
 \&\fIcollectd\fR\|(1),
-\&\fIcollectd.conf\fR\|(5),
-\&\fIrrdcreate\fR\|(1)
+\&\fIcollectd\-exec\fR\|(5),
+\&\fIcollectd\-perl\fR\|(5),
+\&\fIcollectd\-unixsock\fR\|(5),
+\&\fItypes.db\fR\|(5),
+\&\fIhddtemp\fR\|(8),
+kstat(3KSTAT),
+\&\fImbmon\fR\|(1),
+\&\fIrrdtool\fR\|(1),
+\&\fIsensors\fR\|(1)
 .SH "AUTHOR"
 .IX Header "AUTHOR"
-\&\fBcollectd\fR has been written by Florian Forster
-<octo\ at\ verplant.org>.
-.PP
-This manpage has been written by Sebastian Harl
-<sh\ at\ tokkee.org>.
+Florian Forster <octo@verplant.org>
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.4/src/collectd.conf.in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.5/src/collectd.conf.in
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.4/src/collectd.conf.in	2008-10-17 03:24:20.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.5/src/collectd.conf.in	2009-01-03 04:05:29.000000000 +0800
@@ -313,13 +313,13 @@
 #      Type "ipt_bytes"
 #      Instance "total"
 #    </Match>
 #    <Match>
 #      Regex "\\<R=local_user\\>"
 #      DSType "CounterInc"
-#      Type "email_count"
+#      Type "counter"
 #      Instance "local_user"
 #    </Match>
 #  </File>
 #</Plugin>
 
 #<Plugin tcpconns>
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.4/src/collectd.conf.pod /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.5/src/collectd.conf.pod
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.4/src/collectd.conf.pod	2008-10-17 03:24:20.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.5/src/collectd.conf.pod	2009-01-03 04:05:29.000000000 +0800
@@ -662,30 +662,32 @@
 
 The C<mysql plugin> requires B<mysqlclient> to be installed. It connects to the
 database when started and keeps the connection up as long as possible. When the
 connection is interrupted for whatever reason it will try to re-connect. The
 plugin will complaint loudly in case anything goes wrong.
 
-This plugin issues C<SHOW STATUS> and evaluates C<Bytes_{received,sent}>,
-C<Com_*> and C<Handler_*> which correspond to F<mysql_octets.rrd>,
-F<mysql_commands-*.rrd> and F<mysql_handler-*.rrd>. Also, the values of
-C<Qcache_*> are put in F<mysql_qcache.rrd> and values of C<Threads_*> are put
-in F<mysql_threads.rrd>. Please refer to the B<MySQL reference manual>,
-I<5.2.4. Server Status Variables> for an explanation of these values.
+This plugin issues the MySQL C<SHOW STATUS> command and collects information
+about MySQL network traffic, executed statements, requests, the query cache
+and threads by evaluating the C<Bytes_{received,sent}>, C<Com_*>,
+C<Handler_*>, C<Qcache_*> and C<Threads_*> return values. Please refer to the
+B<MySQL reference manual>, I<5.1.6. Server Status Variables> for an
+explanation of these values.
 
 Use the following options to configure the plugin:
 
 =over 4
 
 =item B<Host> I<Hostname>
 
 Hostname of the database server. Defaults to B<localhost>.
 
 =item B<User> I<Username>
 
-Username to use when connecting to the database.
+Username to use when connecting to the database. The user does not have to be
+granted any privileges (which is synonym to granting the C<USAGE> privilege).
+Any existing MySQL user will do.
 
 =item B<Password> I<Password>
 
 Password needed to log into the database.
 
 =item B<Database> I<Database>
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.4/src/collectd-email.5 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.5/src/collectd-email.5
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.4/src/collectd-email.5	2008-10-17 04:10:06.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.5/src/collectd-email.5	2008-10-17 04:46:20.000000000 +0800
@@ -120,490 +120,74 @@
 .    ds ae ae
 .    ds Ae AE
 .\}
 .rm #[ #] #H #V #F C
 .\" ========================================================================
 .\"
-.IX Title "COLLECTD-EXEC 5"
-.TH COLLECTD-EXEC 5 "2008-10-16" "4.4.4" "collectd"
+.IX Title "COLLECTD-EMAIL 5"
+.TH COLLECTD-EMAIL 5 "2007-10-24" "4.5.1" "collectd"
 .\" For nroff, turn off justification.  Always turn off hyphenation; it makes
 .\" way too many mistakes in technical documents.
 .if n .ad l
 .nh
 .SH "NAME"
-collectd\-exec \- Documentation of collectd's \f(CW\*(C`exec plugin\*(C'\fR
+collectd\-email \- Documentation of collectd's \f(CW\*(C`email plugin\*(C'\fR
 .SH "SYNOPSIS"
 .IX Header "SYNOPSIS"
 .Vb 8
 \&  # See collectd.conf(5)
-\&  LoadPlugin exec
+\&  LoadPlugin email
 \&  # ...
-\&  <Plugin exec>
-\&    Exec "myuser:mygroup" "myprog"
-\&    Exec "otheruser" "/path/to/another/binary" "arg0" "arg1"
-\&    NotificationExec "user" "/usr/lib/collectd/exec/handle_notification"
+\&  <Plugin email>
+\&    SocketGroup "collectd"
+\&    SocketPerms "0770"
+\&    MaxConns 5
 \&  </Plugin>
 .Ve
 .SH "DESCRIPTION"
 .IX Header "DESCRIPTION"
-The \f(CW\*(C`exec plugin\*(C'\fR forks of an executable either to receive values or to
-dispatch notifications to the outside world. The syntax of the configuration is
-explained in \fIcollectd.conf\fR\|(5) but summarized in the above synopsis.
-.PP
-If you want/need better performance or more functionality you should take a
-long look at the \f(CW\*(C`perl plugin\*(C'\fR, \fIcollectd\-perl\fR\|(5).
-.SH "EXECUTABLE TYPES"
-.IX Header "EXECUTABLE TYPES"
-There are currently two types of executables that can be executed by the
-\&\f(CW\*(C`exec plugin\*(C'\fR:
-.ie n .IP """Exec""" 4
-.el .IP "\f(CWExec\fR" 4
-.IX Item "Exec"
-These programs are forked and values that it writes to \f(CW\*(C`STDOUT\*(C'\fR are read back.
-The executable is forked in a fashion similar to init: It is forked once and
-not again until it exits. If it exited, it will be forked again after at most
-\&\fIInterval\fR seconds. It is perfectly legal for the executable to run for a long
-time and continuously write values to \f(CW\*(C`STDOUT\*(C'\fR.
-.Sp
-See \*(L"\s-1EXEC\s0 \s-1DATA\s0 \s-1FORMAT\s0\*(R" below for a description of the output format expected
-from these programs.
-.Sp
-\&\fBWarning:\fR If the executable only writes one value and then exits I will be
-executed every \fIInterval\fR seconds. If \fIInterval\fR is short (the default is 10
-seconds) this may result in serious system load.
-.ie n .IP """NotificationExec""" 4
-.el .IP "\f(CWNotificationExec\fR" 4
-.IX Item "NotificationExec"
-The program is forked once for each notification that is handled by the daemon.
-The notification is passed to the program on \f(CW\*(C`STDIN\*(C'\fR in a fashion similar to
-HTTP-headers. In contrast to programs specified with \f(CW\*(C`Exec\*(C'\fR the execution of
-this program is not serialized, so that several instances of this program may
-run at once if multiple notifications are received.
-.Sp
-See \*(L"\s-1NOTIFICATION\s0 \s-1DATA\s0 \s-1FORMAT\s0\*(R" below for a description of the data passed to
-these programs.
-.SH "EXEC DATA FORMAT"
-.IX Header "EXEC DATA FORMAT"
-The forked executable is expected to print values to \f(CW\*(C`STDOUT\*(C'\fR. The expected
-format is as follows:
-.IP "Comments" 4
-.IX Item "Comments"
-Each line beginning with a \f(CW\*(C`#\*(C'\fR (hash mark) is ignored.
-.IP "\fB\s-1PUTVAL\s0\fR \fIIdentifier\fR [\fIOptionList\fR] \fIValuelist\fR" 4
-.IX Item "PUTVAL Identifier [OptionList] Valuelist"
-Submits one or more values (identified by \fIIdentifier\fR, see below) to the
-daemon which will dispatch it to all it's write-plugins.
-.Sp
-An \fIIdentifier\fR is of the form
-\&\f(CW\*(C`\f(CIhost\f(CW\f(CB/\f(CW\f(CIplugin\f(CW\f(CB\-\f(CW\f(CIinstance\f(CW\f(CB/\f(CW\f(CItype\f(CW\f(CB\-\f(CW\f(CIinstance\f(CW\*(C'\fR with both
-\&\fIinstance\fR\-parts being optional. If they're omitted the hyphen must be
-omitted, too. \fIplugin\fR and each \fIinstance\fR\-part may be chosen freely as long
-as the tuple (plugin, plugin instance, type instance) uniquely identifies the
-plugin within collectd. \fItype\fR identifies the type and number of values
-(i.\ e. data-set) passed to collectd. A large list of predefined
-data-sets is available in the \fBtypes.db\fR file. See \fItypes.db\fR\|(5) for a
-description of the format of this file.
-.Sp
-The \fIOptionList\fR is an optional list of \fIOptions\fR, where each option if a
-key-value-pair. A list of currently understood options can be found below, all
-other options will be ignored.
-.Sp
-\&\fIValuelist\fR is a colon-separated list of the time and the values, each either
-an integer if the data-source is a counter, or a double if the data-source is
-of type \*(L"gauge\*(R". You can submit an undefined gauge-value by using \fBU\fR. When
-submitting \fBU\fR to a counter the behavior is undefined. The time is given as
-epoch (i.\ e. standard \s-1UNIX\s0 time).
-.Sp
-You can mix options and values, but the order is important: Options only
-effect following values, so specifying an option as last field is allowed, but
-useless. Also, an option applies to \fBall\fR following values, so you don't need
-to re-set an option over and over again.
-.Sp
-The currently defined \fBOptions\fR are:
-.RS 4
-.IP "\fBinterval=\fR\fIseconds\fR" 4
-.IX Item "interval=seconds"
-Gives the interval in which the data identified by \fIIdentifier\fR is being
-collected.
-.RE
-.RS 4
-.Sp
-Please note that this is the same format as used in the \fBunixsock plugin\fR, see
-\&\fIcollectd\-unixsock\fR\|(5). There's also a bit more information on identifiers in
-case you're confused.
-.Sp
-Since examples usually let one understand a lot better, here are some:
+The \f(CW\*(C`email plugin\*(C'\fR opens an UNIX-socket over which one can submit email
+statistics, such as the number of \*(L"ham\*(R", \*(L"spam\*(R", \*(L"virus\*(R", etc. mails
+received/handled, spam scores and matched spam checks.
+.PP
+This plugin is intended to be used with the
+Mail::SpamAssassin::Plugin::Collectd SpamAssassin-plugin which is included
+in \fIcontrib/\fR, but is of course not limited to that use.
+.SH "OPERATION"
+.IX Header "OPERATION"
+This plugin collects data indirectly by providing a UNIX-socket that external
+programs can connect to. A simple line based protocol is used to communicate
+with the plugin:
+.IP "\(bu" 4
+E\-Mail type (e.g. \*(L"ham\*(R", \*(L"spam\*(R", \*(L"virus\*(R", ...) and size (bytes):
 .Sp
-.Vb 2
-\&  leeloo/cpu\-0/cpu\-idle N:2299366
-\&  alice/interface/if_octets\-eth0 interval=10 1180647081:421465:479194
+.Vb 1
+\&  e:<type>:<size>
 .Ve
 .Sp
-Since this action was the only one supported with older versions of the \f(CW\*(C`exec
-plugin\*(C'\fR all lines were treated as if they were prefixed with \fB\s-1PUTVAL\s0\fR. This is
-still the case to maintain backwards compatibility but deprecated.
-.RE
-.IP "\fB\s-1PUTNOTIF\s0\fR [\fIOptionList\fR] \fBmessage=\fR\fIMessage\fR" 4
-.IX Item "PUTNOTIF [OptionList] message=Message"
-Submits a notification to the daemon which will then dispatch it to all plugins
-which have registered for receiving notifications.
-.Sp
-The \fB\s-1PUTNOTIF\s0\fR if followed by a list of options which further describe the
-notification. The \fBmessage\fR option is special in that it will consume the rest
-of the line as its value. The \fBmessage\fR, \fBseverity\fR, and \fBtime\fR options are
-mandatory.
+If \f(CW\*(C`size\*(C'\fR is less than or equal to zero, \f(CW\*(C`size\*(C'\fR is ignored.
+.IP "\(bu" 4
+Spam score:
 .Sp
-Valid options are:
-.RS 4
-.IP "\fBmessage=\fR\fIMessage\fR (\fB\s-1REQUIRED\s0\fR)" 4
-.IX Item "message=Message (REQUIRED)"
-Sets the message of the notification. This is the message that will be made
-accessible to the user, so it should contain some useful information. This
-option must be the last option because the rest of the line will be its value,
-even if there are spaces and equal-signs following it! This option is
-mandatory.
-.IP "\fBseverity=failure\fR|\fBwarning\fR|\fBokay\fR (\fB\s-1REQUIRED\s0\fR)" 4
-.IX Item "severity=failure|warning|okay (REQUIRED)"
-Sets the severity of the notification. This option is mandatory.
-.IP "\fBtime=\fR\fITime\fR (\fB\s-1REQUIRED\s0\fR)" 4
-.IX Item "time=Time (REQUIRED)"
-Sets the time of the notification. The time is given as \*(L"epoch\*(R", i.\ e. as
-seconds since January 1st, 1970, 00:00:00. This option is mandatory.
-.IP "\fBhost=\fR\fIHostname\fR" 4
-.IX Item "host=Hostname"
-.PD 0
-.IP "\fBplugin=\fR\fIPlugin\fR" 4
-.IX Item "plugin=Plugin"
-.IP "\fBplugin_instance=\fR\fIPlugin-Instance\fR" 4
-.IX Item "plugin_instance=Plugin-Instance"
-.IP "\fBtype=\fR\fIType\fR" 4
-.IX Item "type=Type"
-.IP "\fBtype_instance=\fR\fIType-Instance\fR" 4
-.IX Item "type_instance=Type-Instance"
-.PD
-These \*(L"associative\*(R" options establish a relation between this notification and
-collected performance data. This connection is purely informal, i.\ e. the
-daemon itself doesn't do anything with this information. However, websites or
-GUIs may use this information to place notifications near the affected graph or
-table. All the options are optional, but \fBplugin_instance\fR without \fBplugin\fR
-or \fBtype_instance\fR without \fBtype\fR doesn't make much sense and should be
-avoided.
-.RE
-.RS 4
-.RE
-.PP
-Please note that this is the same format as used in the \fBunixsock plugin\fR, see
-\&\fIcollectd\-unixsock\fR\|(5).
-.PP
-When collectd exits it sends a \fB\s-1SIGTERM\s0\fR to all still running
-child-processes upon which they have to quit.
-.SH "NOTIFICATION DATA FORMAT"
-.IX Header "NOTIFICATION DATA FORMAT"
-The notification executables receive values rather than providing them. In
-fact, after the program is started \f(CW\*(C`STDOUT\*(C'\fR is connected to \f(CW\*(C`/dev/null\*(C'\fR.
-.PP
-The data is passed to the executables over \f(CW\*(C`STDIN\*(C'\fR in a format very similar to
-\&\s-1HTTP:\s0 At first there is a \*(L"header\*(R" with one line per field. Every line consists
-of a field name, ended by a colon, and the associated value until end-of-line.
-The \*(L"header\*(R" is ended by two newlines immediately following another,
-i.\ e. an empty line. The rest, basically the \*(L"body\*(R", is the message of
-the notification.
-.PP
-The following is an example notification passed to a program:
-.PP
-.Vb 5
-\&  Severity: FAILURE
-\&  Time: 1200928930
-\&  Host: myhost.mydomain.org
-\&  \en
-\&  This is a test notification to demonstrate the format
-.Ve
-.PP
-The following header files are currently used. Please note, however, that you
-should ignore unknown header files to be as forward-compatible as possible.
-.IP "\fBSeverity\fR" 4
-.IX Item "Severity"
-Severity of the notification. May either be \fB\s-1FAILURE\s0\fR, \fB\s-1WARNING\s0\fR, or \fB\s-1OKAY\s0\fR.
-.IP "\fBTime\fR" 4
-.IX Item "Time"
-The time in epoch, i.\ e. as seconds since 1970\-01\-01 00:00:00 \s-1UTC\s0.
-.IP "\fBHost\fR" 4
-.IX Item "Host"
-.PD 0
-.IP "\fBPlugin\fR" 4
-.IX Item "Plugin"
-.IP "\fBPluginInstance\fR" 4
-.IX Item "PluginInstance"
-.IP "\fBType\fR" 4
-.IX Item "Type"
-.IP "\fBTypeInstance\fR" 4
-.IX Item "TypeInstance"
-.PD
-Identification of the performance data this notification is associated with.
-All of these fields are optional because notifications do not \fBneed\fR to be
-associated with a certain value.
-.SH "USING NAGIOS PLUGINS"
-.IX Header "USING NAGIOS PLUGINS"
-Though the interface is far from perfect, there are tons of plugins for Nagios.
-You can use these plugins with collectd by using a simple transition layer,
-\&\f(CW\*(C`exec\-nagios.px\*(C'\fR, which is shipped with the collectd distribution in the
-\&\f(CW\*(C`contrib/\*(C'\fR directory. It is a simple Perl script that comes with embedded
-documentation. To see it, run the following command:
-.PP
 .Vb 1
-\&  perldoc exec\-nagios.px
+\&  s:<value>
 .Ve
-.PP
-This script expects a configuration file, \f(CW\*(C`exec\-nagios.conf\*(C'\fR. You can find an
-example in the \f(CW\*(C`contrib/\*(C'\fR directory, too.
-.PP
-Even a simple mechanism to submit \*(L"performance data\*(R" to collectd is
-implemented. If you need a more sophisticated setup, please rewrite the plugin
-to make use of collectd's more powerful interface.
-.SH "CAVEATS"
-.IX Header "CAVEATS"
 .IP "\(bu" 4
-The user, the binary is executed as, may not have root privileges, i.\ e.
-must have an \s-1UID\s0 that is non-zero. This is for your own good.
-.SH "SEE ALSO"
-.IX Header "SEE ALSO"
-\&\fIcollectd\fR\|(1),
-\&\fIcollectd.conf\fR\|(5),
-\&\fIcollectd\-perl\fR\|(5),
-\&\fIcollectd\-unixsock\fR\|(5),
-\&\fIfork\fR\|(2), \fIexec\fR\|(3)
-.SH "AUTHOR"
-.IX Header "AUTHOR"
-Florian Forster <octo@verplant.org>
-                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         log (log-level, message)"
-Submits a \fImessage\fR of level \fIlog-level\fR to collectd's logging mechanism.
-The message is passed to all log-callbacks that are registered with collectd.
-.IP "\fB\s-1ERROR\s0\fR, \fB\s-1WARNING\s0\fR, \fB\s-1NOTICE\s0\fR, \fB\s-1INFO\s0\fR, \fB\s-1DEBUG\s0\fR (\fImessage\fR)" 4
-.IX Item "ERROR, WARNING, NOTICE, INFO, DEBUG (message)"
-Wrappers around \fBplugin_log\fR, using \fB\s-1LOG_ERR\s0\fR, \fB\s-1LOG_WARNING\s0\fR,
-\&\fB\s-1LOG_NOTICE\s0\fR, \fB\s-1LOG_INFO\s0\fR and \fB\s-1LOG_DEBUG\s0\fR respectively as \fIlog-level\fR.
-.SH "GLOBAL VARIABLES"
-.IX Header "GLOBAL VARIABLES"
-.ie n .IP "\fB\fB$hostname_g\fB\fR" 4
-.el .IP "\fB\f(CB$hostname_g\fB\fR" 4
-.IX Item "$hostname_g"
-As the name suggests this variable keeps the hostname of the system collectd
-is running on. The value might be influenced by the \fBHostname\fR or
-\&\fBFQDNLookup\fR configuration options (see \fIcollectd.conf\fR\|(5) for details).
-.ie n .IP "\fB\fB$interval_g\fB\fR" 4
-.el .IP "\fB\f(CB$interval_g\fB\fR" 4
-.IX Item "$interval_g"
-This variable keeps the interval in seconds in which the read functions are
-queried (see the \fBInterval\fR configuration option).
-.PP
-Any changes to these variables will be globally visible in collectd.
-.SH "EXPORTS"
-.IX Header "EXPORTS"
-By default no symbols are exported. However, the following export tags are
-available (\fB:all\fR will export all of them):
-.IP "\fB:plugin\fR" 4
-.IX Item ":plugin"
-.RS 4
-.PD 0
-.IP "\fBplugin_register\fR ()" 4
-.IX Item "plugin_register ()"
-.IP "\fBplugin_unregister\fR ()" 4
-.IX Item "plugin_unregister ()"
-.IP "\fBplugin_dispatch_values\fR ()" 4
-.IX Item "plugin_dispatch_values ()"
-.IP "\fBplugin_flush\fR ()" 4
-.IX Item "plugin_flush ()"
-.IP "\fBplugin_flush_one\fR ()" 4
-.IX Item "plugin_flush_one ()"
-.IP "\fBplugin_flush_all\fR ()" 4
-.IX Item "plugin_flush_all ()"
-.IP "\fBplugin_dispatch_notification\fR ()" 4
-.IX Item "plugin_dispatch_notification ()"
-.IP "\fBplugin_log\fR ()" 4
-.IX Item "plugin_log ()"
-.RE
-.RS 4
-.RE
-.IP "\fB:types\fR" 4
-.IX Item ":types"
-.RS 4
-.IP "\fB\s-1TYPE_INIT\s0\fR" 4
-.IX Item "TYPE_INIT"
-.IP "\fB\s-1TYPE_READ\s0\fR" 4
-.IX Item "TYPE_READ"
-.IP "\fB\s-1TYPE_WRITE\s0\fR" 4
-.IX Item "TYPE_WRITE"
-.IP "\fB\s-1TYPE_FLUSH\s0\fR" 4
-.IX Item "TYPE_FLUSH"
-.IP "\fB\s-1TYPE_SHUTDOWN\s0\fR" 4
-.IX Item "TYPE_SHUTDOWN"
-.IP "\fB\s-1TYPE_LOG\s0\fR" 4
-.IX Item "TYPE_LOG"
-.RE
-.RS 4
-.RE
-.IP "\fB:ds_types\fR" 4
-.IX Item ":ds_types"
-.RS 4
-.IP "\fB\s-1DS_TYPE_COUNTER\s0\fR" 4
-.IX Item "DS_TYPE_COUNTER"
-.IP "\fB\s-1DS_TYPE_GAUGE\s0\fR" 4
-.IX Item "DS_TYPE_GAUGE"
-.RE
-.RS 4
-.RE
-.IP "\fB:log\fR" 4
-.IX Item ":log"
-.RS 4
-.IP "\fB\s-1ERROR\s0\fR ()" 4
-.IX Item "ERROR ()"
-.IP "\fB\s-1WARNING\s0\fR ()" 4
-.IX Item "WARNING ()"
-.IP "\fB\s-1NOTICE\s0\fR ()" 4
-.IX Item "NOTICE ()"
-.IP "\fB\s-1INFO\s0\fR ()" 4
-.IX Item "INFO ()"
-.IP "\fB\s-1DEBUG\s0\fR ()" 4
-.IX Item "DEBUG ()"
-.IP "\fB\s-1LOG_ERR\s0\fR" 4
-.IX Item "LOG_ERR"
-.IP "\fB\s-1LOG_WARNING\s0\fR" 4
-.IX Item "LOG_WARNING"
-.IP "\fB\s-1LOG_NOTICE\s0\fR" 4
-.IX Item "LOG_NOTICE"
-.IP "\fB\s-1LOG_INFO\s0\fR" 4
-.IX Item "LOG_INFO"
-.IP "\fB\s-1LOG_DEBUG\s0\fR" 4
-.IX Item "LOG_DEBUG"
-.RE
-.RS 4
-.RE
-.IP "\fB:notif\fR" 4
-.IX Item ":notif"
-.RS 4
-.IP "\fB\s-1NOTIF_FAILURE\s0\fR" 4
-.IX Item "NOTIF_FAILURE"
-.IP "\fB\s-1NOTIF_WARNING\s0\fR" 4
-.IX Item "NOTIF_WARNING"
-.IP "\fB\s-1NOTIF_OKAY\s0\fR" 4
-.IX Item "NOTIF_OKAY"
-.RE
-.RS 4
-.RE
-.IP "\fB:globals\fR" 4
-.IX Item ":globals"
-.RS 4
-.ie n .IP "\fB\fB$hostname_g\fB\fR" 4
-.el .IP "\fB\f(CB$hostname_g\fB\fR" 4
-.IX Item "$hostname_g"
-.ie n .IP "\fB\fB$interval_g\fB\fR" 4
-.el .IP "\fB\f(CB$interval_g\fB\fR" 4
-.IX Item "$interval_g"
-.RE
-.RS 4
-.RE
-.PD
-.SH "EXAMPLES"
-.IX Header "EXAMPLES"
-Any Perl plugin will start similar to:
-.PP
+Successful spam checks (e.g. \*(L"\s-1BAYES_99\s0\*(R", \*(L"\s-1SUBJECT_DRUG_GAP_C\s0\*(R", ...):
+.Sp
 .Vb 1
-\&  package Collectd::Plugins::FooBar;
-\&
-\&  use strict;
-\&  use warnings;
-\&
-\&  use Collectd qw( :all );
+\&  c:<type1>[,<type2>,...]
 .Ve
-.PP
-A very simple read function will look like:
-.PP
-.Vb 7
-\&  sub foobar_read
-\&  {
-\&    my $vl = { plugin => \*(Aqfoobar\*(Aq };
-\&    $vl\->{\*(Aqvalues\*(Aq} = [ rand(42) ];
-\&    plugin_dispatch_values (\*(Aqgauge\*(Aq, $vl);
-\&    return 1;
-\&  }
-.Ve
-.PP
-A very simple write function will look like:
-.PP
-.Vb 8
-\&  sub foobar_write
-\&  {
-\&    my ($type, $ds, $vl) = @_;
-\&    for (my $i = 0; $i < scalar (@$ds); ++$i) {
-\&      print "$vl\->{\*(Aqplugin\*(Aq} ($vl\->{\*(Aqtype\*(Aq}): $vl\->{\*(Aqvalues\*(Aq}\->[$i]\en";
-\&    }
-\&    return 1;
-\&  }
-.Ve
-.PP
-To register those functions with collectd:
-.PP
-.Vb 2
-\&  plugin_register (TYPE_READ, "foobar", "foobar_read");
-\&  plugin_register (TYPE_WRITE, "foobar", "foobar_write");
-.Ve
-.PP
-See the section \*(L"\s-1DATA\s0 \s-1TYPES\s0\*(R" above for a complete documentation of the data
-types used by the read and write functions.
-.SH "NOTES"
-.IX Header "NOTES"
-.IP "\(bu" 4
-Please feel free to send in new plugins to collectd's mailinglist at
-<collectd\ at\ verplant.org> for review and, possibly,
-inclusion in the main distribution. In the latter case, we will take care of
-keeping the plugin up to date and adapting it to new versions of collectd.
 .Sp
-Before submitting your plugin, please take a look at
-<http://collectd.org/dev\-info.shtml>.
-.SH "CAVEATS"
-.IX Header "CAVEATS"
-.IP "\(bu" 4
-collectd is heavily multi-threaded. Each collectd thread accessing the perl
-plugin will be mapped to a Perl interpreter thread (see \fIthreads\fR\|(3perl)).
-Any such thread will be created and destroyed transparently and on-the-fly.
-.Sp
-Hence, any plugin has to be thread-safe if it provides several entry points
-from collectd (i.\ e. if it registers more than one callback or if a
-registered callback may be called more than once in parallel). Please note
-that no data is shared between threads by default. You have to use the
-\&\fBthreads::shared\fR module to do so.
-.IP "\(bu" 4
-Each function name registered with collectd has to be available before the
-first thread has been created (i.\ e. basically at compile time). This
-basically means that hacks (yes, I really consider this to be a hack) like
-\&\f(CW\*(C`*foo = \e&bar; plugin_register (TYPE_READ, "plugin", "foo");\*(C'\fR most likely
-will not work. This is due to the fact that the symbol table is not shared
-across different threads.
-.IP "\(bu" 4
-Each plugin is usually only loaded once and kept in memory for performance
-reasons. Therefore, \s-1END\s0 blocks are only executed once when collectd shuts
-down. You should not rely on \s-1END\s0 blocks anyway \- use \fBshutdown functions\fR
-instead.
-.SH "KNOWN BUGS"
-.IX Header "KNOWN BUGS"
-.IP "\(bu" 4
-Currently, it is not possible to flush a single Perl plugin only. You can
-either flush all Perl plugins or none at all and you have to use \f(CW\*(C`perl\*(C'\fR as
-plugin name when doing so.
+Each line is limited to 256 characters (including the newline character). 
+Longer lines will be ignored.
 .SH "SEE ALSO"
 .IX Header "SEE ALSO"
 \&\fIcollectd\fR\|(1),
-\&\fIcollectd.conf\fR\|(5),
-\&\fIcollectd\-exec\fR\|(5),
-\&\fItypes.db\fR\|(5),
-\&\fIperl\fR\|(1),
-\&\fIthreads\fR\|(3perl),
-\&\fIthreads::shared\fR\|(3perl),
-\&\fIperldebug\fR\|(1)
+\&\fIcollectd.conf\fR\|(5)
 .SH "AUTHOR"
 .IX Header "AUTHOR"
-The \f(CW\*(C`perl plugin\*(C'\fR has been written by Sebastian Harl
-<sh\ at\ tokkee.org>.
+The \f(CW\*(C`email plugin\*(C'\fR has been written by Sebastian Harl <sh\ at\ tokkee.org>.
+.PP
+The SpamAssassin-plugin has been written by Alexander Wirt <formorer\ at\ formorer.de>.
 .PP
-This manpage has been written by Florian Forster
-<octo\ at\ verplant.org> and Sebastian Harl
-<sh\ at\ tokkee.org>.
+This manpage has been written by Florian Forster <octo\ at\ verplant.org>.
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.4/src/collectd-exec.5 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.5/src/collectd-exec.5
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.4/src/collectd-exec.5	2008-10-17 04:10:26.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.5/src/collectd-exec.5	2009-01-03 05:21:18.000000000 +0800
@@ -1,7 +1,7 @@
-.\" Automatically generated by Pod::Man 2.18 (Pod::Simple 3.05)
+.\" Automatically generated by Pod::Man 2.1801 (Pod::Simple 3.05)
 .\"
 .\" Standard preamble:
 .\" ========================================================================
 .de Sp \" Vertical space (when we can't use .PP)
 .if t .sp .5v
 .if n .sp
@@ -121,13 +121,13 @@
 .    ds Ae AE
 .\}
 .rm #[ #] #H #V #F C
 .\" ========================================================================
 .\"
 .IX Title "COLLECTD-EXEC 5"
-.TH COLLECTD-EXEC 5 "2008-10-16" "4.4.4" "collectd"
+.TH COLLECTD-EXEC 5 "2009-01-02" "4.4.5" "collectd"
 .\" For nroff, turn off justification.  Always turn off hyphenation; it makes
 .\" way too many mistakes in technical documents.
 .if n .ad l
 .nh
 .SH "NAME"
 collectd\-exec \- Documentation of collectd's \f(CW\*(C`exec plugin\*(C'\fR
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.4/src/collectdmon.1 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.5/src/collectdmon.1
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.4/src/collectdmon.1	2008-10-17 04:10:26.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.5/src/collectdmon.1	2008-10-17 04:46:21.000000000 +0800
@@ -121,13 +121,13 @@
 .    ds Ae AE
 .\}
 .rm #[ #] #H #V #F C
 .\" ========================================================================
 .\"
 .IX Title "COLLECTDMON 1"
-.TH COLLECTDMON 1 "2008-05-06" "4.4.4" "collectd"
+.TH COLLECTDMON 1 "2008-05-06" "4.5.1" "collectd"
 .\" For nroff, turn off justification.  Always turn off hyphenation; it makes
 .\" way too many mistakes in technical documents.
 .if n .ad l
 .nh
 .SH "NAME"
 collectdmon \- Monitoring daemon for collectd
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.4/src/collectd-nagios.1 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.5/src/collectd-nagios.1
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.4/src/collectd-nagios.1	2008-10-17 04:10:26.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.5/src/collectd-nagios.1	2009-01-03 05:21:18.000000000 +0800
@@ -1,7 +1,7 @@
-.\" Automatically generated by Pod::Man 2.18 (Pod::Simple 3.05)
+.\" Automatically generated by Pod::Man 2.1801 (Pod::Simple 3.05)
 .\"
 .\" Standard preamble:
 .\" ========================================================================
 .de Sp \" Vertical space (when we can't use .PP)
 .if t .sp .5v
 .if n .sp
@@ -121,13 +121,13 @@
 .    ds Ae AE
 .\}
 .rm #[ #] #H #V #F C
 .\" ========================================================================
 .\"
 .IX Title "COLLECTD-NAGIOS 1"
-.TH COLLECTD-NAGIOS 1 "2008-10-16" "4.4.4" "collectd"
+.TH COLLECTD-NAGIOS 1 "2009-01-02" "4.4.5" "collectd"
 .\" For nroff, turn off justification.  Always turn off hyphenation; it makes
 .\" way too many mistakes in technical documents.
 .if n .ad l
 .nh
 .SH "NAME"
 collectd\-nagios \- Nagios plugin for querying collectd
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.4/src/collectd-perl.5 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.5/src/collectd-perl.5
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.4/src/collectd-perl.5	2008-10-17 04:10:06.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.5/src/collectd-perl.5	2009-01-03 05:21:19.000000000 +0800
@@ -1,7 +1,7 @@
-.\" Automatically generated by Pod::Man 2.18 (Pod::Simple 3.05)
+.\" Automatically generated by Pod::Man 2.1801 (Pod::Simple 3.05)
 .\"
 .\" Standard preamble:
 .\" ========================================================================
 .de Sp \" Vertical space (when we can't use .PP)
 .if t .sp .5v
 .if n .sp
@@ -120,234 +120,524 @@
 .    ds ae ae
 .    ds Ae AE
 .\}
 .rm #[ #] #H #V #F C
 .\" ========================================================================
 .\"
-.IX Title "COLLECTD-SNMP 5"
-.TH COLLECTD-SNMP 5 "2008-05-06" "4.4.4" "collectd"
+.IX Title "COLLECTD-PERL 5"
+.TH COLLECTD-PERL 5 "2009-01-02" "4.4.5" "collectd"
 .\" For nroff, turn off justification.  Always turn off hyphenation; it makes
 .\" way too many mistakes in technical documents.
 .if n .ad l
 .nh
 .SH "NAME"
-collectd\-snmp \- Documentation of collectd's \f(CW\*(C`snmp plugin\*(C'\fR
+collectd\-perl \- Documentation of collectd's \f(CW\*(C`perl plugin\*(C'\fR
 .SH "SYNOPSIS"
 .IX Header "SYNOPSIS"
-.Vb 10
-\&  LoadPlugin snmp
+.Vb 8
+\&  LoadPlugin perl
 \&  # ...
-\&  <Plugin snmp>
-\&    <Data "powerplus_voltge_input">
-\&      Type "voltage"
-\&      Table false
-\&      Instance "input_line1"
-\&      Scale 0.1
-\&      Values "SNMPv2\-SMI::enterprises.6050.5.4.1.1.2.1"
-\&    </Data>
-\&    <Data "hr_users">
-\&      Type "users"
-\&      Table false
-\&      Instance ""
-\&      Shift \-1
-\&      Values "HOST\-RESOURCES\-MIB::hrSystemNumUsers.0"
-\&    </Data>
-\&    <Data "std_traffic">
-\&      Type "if_octets"
-\&      Table true
-\&      Instance "IF\-MIB::ifDescr"
-\&      Values "IF\-MIB::ifInOctets" "IF\-MIB::ifOutOctets"
-\&    </Data>
-\&
-\&    <Host "some.switch.mydomain.org">
-\&      Address "192.168.0.2"
-\&      Version 1
-\&      Community "community_string"
-\&      Collect "std_traffic"
-\&      Interval 120
-\&    </Host>
-\&    <Host "some.server.mydomain.org">
-\&      Address "192.168.0.42"
-\&      Version 2
-\&      Community "another_string"
-\&      Collect "std_traffic" "hr_users"
-\&    </Host>
-\&    <Host "some.ups.mydomain.org">
-\&      Address "192.168.0.3"
-\&      Version 1
-\&      Community "more_communities"
-\&      Collect "powerplus_voltge_input"
-\&      Interval 300
-\&    </Host>
+\&  <Plugin perl>
+\&    IncludeDir "/path/to/perl/plugins"
+\&    BaseName "Collectd::Plugin"
+\&    EnableDebugger ""
+\&    LoadPlugin "FooBar"
 \&  </Plugin>
 .Ve
 .SH "DESCRIPTION"
 .IX Header "DESCRIPTION"
-The \f(CW\*(C`snmp plugin\*(C'\fR queries other hosts using \s-1SNMP\s0, the simple network
-management protocol, and translates the value it receives to collectd's
-internal format and dispatches them. Depending on the write plugins you have
-loaded they may be written to disk or submitted to another instance or
-whatever you configured.
-.PP
-Because querying a host via \s-1SNMP\s0 may produce a timeout multiple threads are
-used to query hosts in parallel. Depending on the number of hosts between one
-and ten threads are used.
+The \f(CW\*(C`perl plugin\*(C'\fR embeds a Perl-interpreter into collectd and provides an
+interface to collectd's plugin system. This makes it possible to write plugins
+for collectd in Perl. This is a lot more efficient than executing a
+Perl-script every time you want to read a value with the \f(CW\*(C`exec plugin\*(C'\fR (see
+\&\fIcollectd\-exec\fR\|(5)) and provides a lot more functionality, too.
 .SH "CONFIGURATION"
 .IX Header "CONFIGURATION"
-Since the aim of the \f(CW\*(C`snmp plugin\*(C'\fR is to provide a generic interface to \s-1SNMP\s0,
-it's configuration is not trivial and may take some time.
+.IP "\fBLoadPlugin\fR \fIPlugin\fR" 4
+.IX Item "LoadPlugin Plugin"
+Loads the Perl plugin \fIPlugin\fR. This does basically the same as \fBuse\fR would
+do in a Perl program. As a side effect, the first occurrence of this option
+causes the Perl-interpreter to be initialized.
+.IP "\fBBaseName\fR \fIName\fR" 4
+.IX Item "BaseName Name"
+Prepends \fIName\fR\fB::\fR to all plugin names loaded after this option. This is
+provided for convenience to keep plugin names short.
+.IP "\fBEnableDebugger\fR \fIPackage\fR[=\fIoption\fR,...]" 4
+.IX Item "EnableDebugger Package[=option,...]"
+Run collectd under the control of the Perl source debugger. If \fIPackage\fR is
+not the empty string, control is passed to the debugging, profiling, or
+tracing module installed as Devel::\fIPackage\fR. A comma-separated list of
+options may be specified after the \*(L"=\*(R" character. Please note that you may not
+leave out the \fIPackage\fR option even if you specify \fB""\fR. This is the same as
+using the \fB\-d:Package\fR command line option.
+.Sp
+See perldebug for detailed documentation about debugging Perl.
+.Sp
+This option does not prevent collectd from daemonizing, so you should start
+collectd with the \fB\-f\fR command line option. Else you will not be able to use
+the command line driven interface of the debugger.
+.IP "\fBIncludeDir\fR \fIDir\fR" 4
+.IX Item "IncludeDir Dir"
+Adds \fIDir\fR to the \fB\f(CB@INC\fB\fR array. This is the same as using the \fB\-IDir\fR
+command line option or \fBuse lib Dir\fR in the source code. Please note that it
+only has effect on plugins loaded after this option.
+.SH "WRITING YOUR OWN PLUGINS"
+.IX Header "WRITING YOUR OWN PLUGINS"
+Writing your own plugins is quite simple. collectd manages plugins by means of
+\&\fBdispatch functions\fR which call the appropriate \fBcallback functions\fR
+registered by the plugins. Any plugin basically consists of the implementation
+of these callback functions and initializing code which registers the
+functions with collectd. See the section \*(L"\s-1EXAMPLES\s0\*(R" below for a really basic
+example. The following types of \fBcallback functions\fR are known to collectd
+(all of them are optional):
+.IP "init functions" 4
+.IX Item "init functions"
+This type of functions is called once after loading the module and before any
+calls to the read and write functions. It should be used to initialize the
+internal state of the plugin (e.\ g. open sockets, ...). If the return
+value evaluates to \fBfalse\fR, the plugin will be disabled.
+.IP "read functions" 4
+.IX Item "read functions"
+This type of function is used to collect the actual data. It is called once
+per interval (see the \fBInterval\fR configuration option of collectd). Usually
+it will call \fBplugin_dispatch_values\fR to dispatch the values to collectd
+which will pass them on to all registered \fBwrite functions\fR. If the return
+value evaluates to \fBfalse\fR the plugin will be skipped for an increasing
+amount of time until it returns \fBtrue\fR again.
+.IP "write functions" 4
+.IX Item "write functions"
+This type of function is used to write the dispatched values. It is called
+once for each call to \fBplugin_dispatch_values\fR.
+.IP "flush functions" 4
+.IX Item "flush functions"
+This type of function is used to flush internal caches of plugins. It is
+usually triggered by the user only. Any plugin which caches data before
+writing it to disk should provide this kind of callback function.
+.IP "log functions" 4
+.IX Item "log functions"
+This type of function is used to pass messages of plugins or the daemon itself
+to the user.
+.IP "notification function" 4
+.IX Item "notification function"
+This type of function is used to act upon notifications. In general, a
+notification is a status message that may be associated with a data instance.
+Usually, a notification is generated by the daemon if a configured threshold
+has been exceeded (see the section \*(L"\s-1THRESHOLD\s0 \s-1CONFIGURATION\s0\*(R" in
+\&\fIcollectd.conf\fR\|(5) for more details), but any plugin may dispatch
+notifications as well.
+.IP "shutdown functions" 4
+.IX Item "shutdown functions"
+This type of function is called once before the daemon shuts down. It should
+be used to clean up the plugin (e.g. close sockets, ...).
+.PP
+Any function (except log functions) may set the \fB$@\fR variable to describe
+errors in more detail. The message will be passed on to the user using
+collectd's logging mechanism.
+.PP
+See the documentation of the \fBplugin_register\fR method in the section
+\&\*(L"\s-1METHODS\s0\*(R" below for the number and types of arguments passed to each
+\&\fBcallback function\fR. This section also explains how to register \fBcallback
+functions\fR with collectd.
+.PP
+To enable a plugin, copy it to a place where Perl can find it (i.\ e. a
+directory listed in the \fB\f(CB@INC\fB\fR array) just as any other Perl plugin and add
+an appropriate \fBLoadPlugin\fR option to the configuration file. After
+restarting collectd you're done.
+.SH "DATA TYPES"
+.IX Header "DATA TYPES"
+The following complex types are used to pass values between the Perl plugin
+and collectd:
+.IP "Data-Set" 4
+.IX Item "Data-Set"
+A data-set is a list of one or more data-sources. Each data-source defines a
+name, type, min\- and max-value and the data-set wraps them up into one
+structure. The general layout looks like this:
+.Sp
+.Vb 6
+\&  [{
+\&    name => \*(Aqdata_source_name\*(Aq,
+\&    type => DS_TYPE_COUNTER || DS_TYPE_GAUGE,
+\&    min  => value || undef,
+\&    max  => value || undef
+\&  }, ...]
+.Ve
+.IP "Value-List" 4
+.IX Item "Value-List"
+A value-list is one structure which features an array of values and fields to
+identify the values, i.\ e. time and host, plugin name and
+plugin-instance as well as a type and type-instance. Since the \*(L"type\*(R" is not
+included in the value-list but is passed as an extra argument, the general
+layout looks like this:
+.Sp
+.Vb 8
+\&  {
+\&    values => [123, 0.5],
+\&    time   => time (),
+\&    host   => $hostname_g,
+\&    plugin => \*(Aqmyplugin\*(Aq,
+\&    plugin_instance => \*(Aq\*(Aq,
+\&    type_instance   => \*(Aq\*(Aq
+\&  }
+.Ve
+.IP "Notification" 4
+.IX Item "Notification"
+A notification is one structure defining the severity, time and message of the
+status message as well as an identification of a data instance:
+.Sp
+.Vb 10
+\&  {
+\&    severity => NOTIF_FAILURE || NOTIF_WARNING || NOTIF_OKAY,
+\&    time     => time (),
+\&    message  => \*(Aqstatus message\*(Aq,
+\&    host     => $hostname_g,
+\&    plugin   => \*(Aqmyplugin\*(Aq,
+\&    type     => \*(Aqmytype\*(Aq,
+\&    plugin_instance => \*(Aq\*(Aq,
+\&    type_instance   => \*(Aq\*(Aq
+\&  }
+.Ve
+.SH "METHODS"
+.IX Header "METHODS"
+The following functions provide the C\-interface to Perl-modules. They are
+exported by the \*(L":plugin\*(R" export tag (see the section \*(L"\s-1EXPORTS\s0\*(R" below).
+.IP "\fBplugin_register\fR (\fItype\fR, \fIname\fR, \fIdata\fR)" 4
+.IX Item "plugin_register (type, name, data)"
+Registers a callback-function or data-set.
+.Sp
+\&\fItype\fR can be one of:
+.RS 4
+.IP "\s-1TYPE_INIT\s0" 4
+.IX Item "TYPE_INIT"
+.PD 0
+.IP "\s-1TYPE_READ\s0" 4
+.IX Item "TYPE_READ"
+.IP "\s-1TYPE_WRITE\s0" 4
+.IX Item "TYPE_WRITE"
+.IP "\s-1TYPE_FLUSH\s0" 4
+.IX Item "TYPE_FLUSH"
+.IP "\s-1TYPE_LOG\s0" 4
+.IX Item "TYPE_LOG"
+.IP "\s-1TYPE_NOTIF\s0" 4
+.IX Item "TYPE_NOTIF"
+.IP "\s-1TYPE_SHUTDOWN\s0" 4
+.IX Item "TYPE_SHUTDOWN"
+.IP "\s-1TYPE_DATASET\s0" 4
+.IX Item "TYPE_DATASET"
+.RE
+.RS 4
+.PD
+.Sp
+\&\fIname\fR is the name of the callback-function or the type of the data-set,
+depending on the value of \fItype\fR. (Please note that the type of the data-set
+is the value passed as \fIname\fR here and has nothing to do with the \fItype\fR
+argument which simply tells \fBplugin_register\fR what is being registered.)
+.Sp
+The last argument, \fIdata\fR, is either a function name or an array-reference.
+If \fItype\fR is \fB\s-1TYPE_DATASET\s0\fR, then the \fIdata\fR argument must be an
+array-reference which points to an array of hashes. Each hash describes one
+data-set. For the exact layout see \fBData-Set\fR above. Please note that
+there is a large number of predefined data-sets available in the \fBtypes.db\fR
+file which are automatically registered with collectd \- see \fItypes.db\fR\|(5) for
+a description of the format of this file.
+.Sp
+If the \fItype\fR argument is any of the other types (\fB\s-1TYPE_INIT\s0\fR, \fB\s-1TYPE_READ\s0\fR,
+\&...) then \fIdata\fR is expected to be a function name. If the name is not
+prefixed with the plugin's package name collectd will add it automatically.
+The interface slightly differs from the C interface (which expects a function
+pointer instead) because Perl does not support to share references to
+subroutines between threads.
+.Sp
+These functions are called in the various stages of the daemon (see the
+section \*(L"\s-1WRITING\s0 \s-1YOUR\s0 \s-1OWN\s0 \s-1PLUGINS\s0\*(R" above) and are passed the following
+arguments:
+.IP "\s-1TYPE_INIT\s0" 4
+.IX Item "TYPE_INIT"
+.PD 0
+.IP "\s-1TYPE_READ\s0" 4
+.IX Item "TYPE_READ"
+.IP "\s-1TYPE_SHUTDOWN\s0" 4
+.IX Item "TYPE_SHUTDOWN"
+.PD
+No arguments are passed.
+.IP "\s-1TYPE_WRITE\s0" 4
+.IX Item "TYPE_WRITE"
+The arguments passed are \fItype\fR, \fIdata-set\fR, and \fIvalue-list\fR. \fItype\fR is a
+string. For the layout of \fIdata-set\fR and \fIvalue-list\fR see above.
+.IP "\s-1TYPE_FLUSH\s0" 4
+.IX Item "TYPE_FLUSH"
+The only argument passed is \fItimeout\fR which indicates that only data older
+than \fItimeout\fR seconds is to be flushed.
+.IP "\s-1TYPE_LOG\s0" 4
+.IX Item "TYPE_LOG"
+The arguments are \fIlog-level\fR and \fImessage\fR. The log level is small for
+important messages and high for less important messages. The least important
+level is \fB\s-1LOG_DEBUG\s0\fR, the most important level is \fB\s-1LOG_ERR\s0\fR. In between there
+are (from least to most important): \fB\s-1LOG_INFO\s0\fR, \fB\s-1LOG_NOTICE\s0\fR, and
+\&\fB\s-1LOG_WARNING\s0\fR. \fImessage\fR is simply a string \fBwithout\fR a newline at the end.
+.IP "\s-1TYPE_NOTIF\s0" 4
+.IX Item "TYPE_NOTIF"
+The only argument passed is \fInotification\fR. See above for the layout of this
+data type.
+.RE
+.RS 4
+.RE
+.IP "\fBplugin_unregister\fR (\fItype\fR, \fIplugin\fR)" 4
+.IX Item "plugin_unregister (type, plugin)"
+Removes a callback or data-set from collectd's internal list of
+functions\ / datasets.
+.IP "\fBplugin_dispatch_values\fR (\fItype\fR, \fIvalue-list\fR)" 4
+.IX Item "plugin_dispatch_values (type, value-list)"
+Submits a \fIvalue-list\fR of type \fItype\fR to the daemon. If the data-set \fItype\fR
+is found (and the number of values matches the number of data-sources) then the
+type, data-set and value-list is passed to all write-callbacks that are
+registered with the daemon.
+.IP "\fBplugin_flush\fR ([\fBtimeout\fR => \fItimeout\fR,] [\fBplugins\fR => \fI...\fR])" 4
+.IX Item "plugin_flush ([timeout => timeout,] [plugins => ...])"
+Flush one or more plugins. \fItimeout\fR is passed on to the registered
+flush-callbacks. If omitted, \f(CW\*(C`\-1\*(C'\fR is used. If the \fIplugins\fR argument has
+been specified, only named plugins will be flushed. The argument's value may
+either be a string or a reference to an array of strings.
+.IP "\fBplugin_flush_one\fR (\fItimeout\fR, \fIplugin\fR)" 4
+.IX Item "plugin_flush_one (timeout, plugin)"
+This is identical to using "plugin_flush (timeout => \fItimeout\fR, plugins
+=> \fIplugin\fR".
+.IP "\fBplugin_flush_all\fR (\fItimeout\fR)" 4
+.IX Item "plugin_flush_all (timeout)"
+This is identical to using "plugin_flush (timeout => \fItimeout\fR)".
+.IP "\fBplugin_dispatch_notification\fR (\fInotification\fR)" 4
+.IX Item "plugin_dispatch_notification (notification)"
+Submits a \fInotification\fR to the daemon which will then pass it to all
+notification-callbacks that are registered.
+.IP "\fBplugin_log\fR (\fIlog-level\fR, \fImessage\fR)" 4
+.IX Item "plugin_log (log-level, message)"
+Submits a \fImessage\fR of level \fIlog-level\fR to collectd's logging mechanism.
+The message is passed to all log-callbacks that are registered with collectd.
+.IP "\fB\s-1ERROR\s0\fR, \fB\s-1WARNING\s0\fR, \fB\s-1NOTICE\s0\fR, \fB\s-1INFO\s0\fR, \fB\s-1DEBUG\s0\fR (\fImessage\fR)" 4
+.IX Item "ERROR, WARNING, NOTICE, INFO, DEBUG (message)"
+Wrappers around \fBplugin_log\fR, using \fB\s-1LOG_ERR\s0\fR, \fB\s-1LOG_WARNING\s0\fR,
+\&\fB\s-1LOG_NOTICE\s0\fR, \fB\s-1LOG_INFO\s0\fR and \fB\s-1LOG_DEBUG\s0\fR respectively as \fIlog-level\fR.
+.SH "GLOBAL VARIABLES"
+.IX Header "GLOBAL VARIABLES"
+.ie n .IP "\fB\fB$hostname_g\fB\fR" 4
+.el .IP "\fB\f(CB$hostname_g\fB\fR" 4
+.IX Item "$hostname_g"
+As the name suggests this variable keeps the hostname of the system collectd
+is running on. The value might be influenced by the \fBHostname\fR or
+\&\fBFQDNLookup\fR configuration options (see \fIcollectd.conf\fR\|(5) for details).
+.ie n .IP "\fB\fB$interval_g\fB\fR" 4
+.el .IP "\fB\f(CB$interval_g\fB\fR" 4
+.IX Item "$interval_g"
+This variable keeps the interval in seconds in which the read functions are
+queried (see the \fBInterval\fR configuration option).
+.PP
+Any changes to these variables will be globally visible in collectd.
+.SH "EXPORTS"
+.IX Header "EXPORTS"
+By default no symbols are exported. However, the following export tags are
+available (\fB:all\fR will export all of them):
+.IP "\fB:plugin\fR" 4
+.IX Item ":plugin"
+.RS 4
+.PD 0
+.IP "\fBplugin_register\fR ()" 4
+.IX Item "plugin_register ()"
+.IP "\fBplugin_unregister\fR ()" 4
+.IX Item "plugin_unregister ()"
+.IP "\fBplugin_dispatch_values\fR ()" 4
+.IX Item "plugin_dispatch_values ()"
+.IP "\fBplugin_flush\fR ()" 4
+.IX Item "plugin_flush ()"
+.IP "\fBplugin_flush_one\fR ()" 4
+.IX Item "plugin_flush_one ()"
+.IP "\fBplugin_flush_all\fR ()" 4
+.IX Item "plugin_flush_all ()"
+.IP "\fBplugin_dispatch_notification\fR ()" 4
+.IX Item "plugin_dispatch_notification ()"
+.IP "\fBplugin_log\fR ()" 4
+.IX Item "plugin_log ()"
+.RE
+.RS 4
+.RE
+.IP "\fB:types\fR" 4
+.IX Item ":types"
+.RS 4
+.IP "\fB\s-1TYPE_INIT\s0\fR" 4
+.IX Item "TYPE_INIT"
+.IP "\fB\s-1TYPE_READ\s0\fR" 4
+.IX Item "TYPE_READ"
+.IP "\fB\s-1TYPE_WRITE\s0\fR" 4
+.IX Item "TYPE_WRITE"
+.IP "\fB\s-1TYPE_FLUSH\s0\fR" 4
+.IX Item "TYPE_FLUSH"
+.IP "\fB\s-1TYPE_SHUTDOWN\s0\fR" 4
+.IX Item "TYPE_SHUTDOWN"
+.IP "\fB\s-1TYPE_LOG\s0\fR" 4
+.IX Item "TYPE_LOG"
+.RE
+.RS 4
+.RE
+.IP "\fB:ds_types\fR" 4
+.IX Item ":ds_types"
+.RS 4
+.IP "\fB\s-1DS_TYPE_COUNTER\s0\fR" 4
+.IX Item "DS_TYPE_COUNTER"
+.IP "\fB\s-1DS_TYPE_GAUGE\s0\fR" 4
+.IX Item "DS_TYPE_GAUGE"
+.RE
+.RS 4
+.RE
+.IP "\fB:log\fR" 4
+.IX Item ":log"
+.RS 4
+.IP "\fB\s-1ERROR\s0\fR ()" 4
+.IX Item "ERROR ()"
+.IP "\fB\s-1WARNING\s0\fR ()" 4
+.IX Item "WARNING ()"
+.IP "\fB\s-1NOTICE\s0\fR ()" 4
+.IX Item "NOTICE ()"
+.IP "\fB\s-1INFO\s0\fR ()" 4
+.IX Item "INFO ()"
+.IP "\fB\s-1DEBUG\s0\fR ()" 4
+.IX Item "DEBUG ()"
+.IP "\fB\s-1LOG_ERR\s0\fR" 4
+.IX Item "LOG_ERR"
+.IP "\fB\s-1LOG_WARNING\s0\fR" 4
+.IX Item "LOG_WARNING"
+.IP "\fB\s-1LOG_NOTICE\s0\fR" 4
+.IX Item "LOG_NOTICE"
+.IP "\fB\s-1LOG_INFO\s0\fR" 4
+.IX Item "LOG_INFO"
+.IP "\fB\s-1LOG_DEBUG\s0\fR" 4
+.IX Item "LOG_DEBUG"
+.RE
+.RS 4
+.RE
+.IP "\fB:notif\fR" 4
+.IX Item ":notif"
+.RS 4
+.IP "\fB\s-1NOTIF_FAILURE\s0\fR" 4
+.IX Item "NOTIF_FAILURE"
+.IP "\fB\s-1NOTIF_WARNING\s0\fR" 4
+.IX Item "NOTIF_WARNING"
+.IP "\fB\s-1NOTIF_OKAY\s0\fR" 4
+.IX Item "NOTIF_OKAY"
+.RE
+.RS 4
+.RE
+.IP "\fB:globals\fR" 4
+.IX Item ":globals"
+.RS 4
+.ie n .IP "\fB\fB$hostname_g\fB\fR" 4
+.el .IP "\fB\f(CB$hostname_g\fB\fR" 4
+.IX Item "$hostname_g"
+.ie n .IP "\fB\fB$interval_g\fB\fR" 4
+.el .IP "\fB\f(CB$interval_g\fB\fR" 4
+.IX Item "$interval_g"
+.RE
+.RS 4
+.RE
+.PD
+.SH "EXAMPLES"
+.IX Header "EXAMPLES"
+Any Perl plugin will start similar to:
+.PP
+.Vb 1
+\&  package Collectd::Plugins::FooBar;
+\&
+\&  use strict;
+\&  use warnings;
+\&
+\&  use Collectd qw( :all );
+.Ve
+.PP
+A very simple read function will look like:
+.PP
+.Vb 7
+\&  sub foobar_read
+\&  {
+\&    my $vl = { plugin => \*(Aqfoobar\*(Aq };
+\&    $vl\->{\*(Aqvalues\*(Aq} = [ rand(42) ];
+\&    plugin_dispatch_values (\*(Aqgauge\*(Aq, $vl);
+\&    return 1;
+\&  }
+.Ve
 .PP
-Since the \f(CW\*(C`Net\-SNMP\*(C'\fR library is used you can use all the environment variables
-that are interpreted by that package. See \fIsnmpcmd\fR\|(1) for more details.
+A very simple write function will look like:
 .PP
-There are two types of blocks that can be contained in the
-\&\f(CW\*(C`<Plugin\ snmp>\*(C'\fR block: \fBData\fR and \fBHost\fR:
-.SS "The \fBData\fP block"
-.IX Subsection "The Data block"
-The \fBData\fR block defines a list of values or a table of values that are to be
-queried. The following options can be set:
-.IP "\fBType\fR \fItype\fR" 4
-.IX Item "Type type"
-collectd's type that is to be used, e.\ g. \*(L"if_octets\*(R" for interface
-traffic or \*(L"users\*(R" for a user count. The types are read from the \fBTypesDB\fR
-(see \fIcollectd.conf\fR\|(5)), so you may want to check for which types are
-defined. See \fItypes.db\fR\|(5) for a description of the format of this file.
-.IP "\fBTable\fR \fItrue|false\fR" 4
-.IX Item "Table true|false"
-Define if this is a single list of values or a table of values. The difference
-is the following:
-.Sp
-When \fBTable\fR is set to \fBfalse\fR, the OIDs given to \fBValues\fR (see below) are
-queried using the \f(CW\*(C`GET\*(C'\fR \s-1SNMP\s0 command (see \fIsnmpget\fR\|(1)) and transmitted to
-collectd. \fBOne\fR value list is dispatched and, eventually, one file will be
-written.
-.Sp
-When \fBTable\fR is set to \fBtrue\fR, the OIDs given to \fBValues\fR (see below) are
-queried using the \f(CW\*(C`GETNEXT\*(C'\fR \s-1SNMP\s0 command until the subtree is left. After all
-the lists (think: all columns of the table) have been read \fBseveral\fR values
-sets will be dispatches and, eventually, several files will be written. If you
-configure a \fBType\fR (see above) which needs more than one data source (for
-example \f(CW\*(C`if_octets\*(C'\fR which needs \f(CW\*(C`rx\*(C'\fR and \f(CW\*(C`tx\*(C'\fR) you will need to specify more
-than one (two, in the example case) OIDs with the \fBValues\fR option. This has
-nothing to do with the \fBTable\fR setting.
-.Sp
-For example, if you want to query the number of users on a system, you can use
-\&\f(CW\*(C`HOST\-RESOURCES\-MIB::hrSystemNumUsers.0\*(C'\fR. This is one value and belongs to one
-value list, therefore \fBTable\fR must be set to \fBfalse\fR. Please note that, in
-this case, you have to include the sequence number (zero in this case) in the
-\&\s-1OID\s0.
-.Sp
-Counter example: If you want to query the interface table provided by the
-\&\f(CW\*(C`IF\-MIB\*(C'\fR, e.\ g. the bytes transmitted. There are potentially many
-interfaces, so you will want to set \fBTable\fR to \fBtrue\fR. Because the
-\&\f(CW\*(C`if_octets\*(C'\fR type needs two values, received and transmitted bytes, you need to
-specify two OIDs in the \fBValues\fR setting, in this case likely
-\&\f(CW\*(C`IF\-MIB::ifHCInOctets\*(C'\fR and \f(CW\*(C`IF\-MIB::ifHCOutOctets\*(C'\fR. But, this is because of
-the \fBType\fR setting, not the \fBTable\fR setting.
-.Sp
-Since the semantic of \fBInstance\fR and \fBValues\fR depends on this setting you
-need to set it before setting them. Doing vice verse will result in undefined
-behavior.
-.IP "\fBInstance\fR \fIInstance\fR" 4
-.IX Item "Instance Instance"
-Sets the type-instance of the values that are dispatched. The meaning of this
-setting depends on whether \fBTable\fR is set to \fItrue\fR or \fIfalse\fR:
-.Sp
-If \fBTable\fR is set to \fItrue\fR, \fIInstance\fR is interpreted as an SNMP-prefix
-that will return a list of values. Those values are then used as the actual
-type-instance. An example would be the \f(CW\*(C`IF\-MIB::ifDescr\*(C'\fR subtree.
-\&\fIvariables\fR\|(5) from the \s-1SNMP\s0 distribution describes the format of OIDs.
-.Sp
-If \fBTable\fR is set to \fItrue\fR and \fBInstance\fR is omitted, then \*(L"\s-1SUBID\s0\*(R" will be
-used as the instance.
-.Sp
-If \fBTable\fR is set to \fIfalse\fR the actual string configured for \fIInstance\fR is
-copied into the value-list. In this case \fIInstance\fR may be empty, i.\ e.
-"".
-.IP "\fBInstancePrefix\fR \fIString\fR" 4
-.IX Item "InstancePrefix String"
-If \fBTable\fR is set to \fItrue\fR, you may feel the need to add something to the
-instance of the files. If set, \fIString\fR is prepended to the instance as
-determined by querying the agent. When \fBTable\fR is set to \fIfalse\fR this option
-has no effect.
-.Sp
-The \f(CW\*(C`UPS\-MIB\*(C'\fR is an example where you need this setting: It has voltages of
-the inlets, outlets and the battery of an \s-1UPS\s0. However, it doesn't provide a
-descriptive column for these voltages. In this case having 1, 2,\ ... as
-instances is not enough, because the inlet voltages and outlet voltages may
-both have the subids 1, 2,\ ... You can use this setting to distinguish
-between the different voltages.
-.IP "\fBValues\fR \fI\s-1OID\s0\fR [\fI\s-1OID\s0\fR ...]" 4
-.IX Item "Values OID [OID ...]"
-Configures the values to be queried from the \s-1SNMP\s0 host. The meaning slightly
-changes with the \fBTable\fR setting. \fIvariables\fR\|(5) from the \s-1SNMP\s0 distribution
-describes the format of OIDs.
-.Sp
-If \fBTable\fR is set to \fItrue\fR, each \fI\s-1OID\s0\fR must be the prefix of all the
-values to query, e.\ g. \f(CW\*(C`IF\-MIB::ifInOctets\*(C'\fR for all the counters of
-incoming traffic. This subtree is walked (using \f(CW\*(C`GETNEXT\*(C'\fR) until a value from
-outside the subtree is returned.
-.Sp
-If \fBTable\fR is set to \fIfalse\fR, each \fI\s-1OID\s0\fR must be the \s-1OID\s0 of exactly one
-value, e.\ g. \f(CW\*(C`IF\-MIB::ifInOctets.3\*(C'\fR for the third counter of incoming
-traffic.
-.IP "\fBScale\fR \fIValue\fR" 4
-.IX Item "Scale Value"
-The gauge-values returned by the SNMP-agent are multiplied by \fIValue\fR.  This
-is useful when values are transfered as a fixed point real number. For example,
-thermometers may transfer \fB243\fR but actually mean \fB24.3\fR, so you can specify
-a scale value of \fB0.1\fR to correct this. The default value is of course \fB1.0\fR.
-.Sp
-This value is not applied to counter-values.
-.IP "\fBShift\fR \fIValue\fR" 4
-.IX Item "Shift Value"
-\&\fIValue\fR is added to gauge-values returned by the SNMP-agent after they have
-been multiplied by any \fBScale\fR value. If, for example, a thermometer returns
-degrees Kelvin you could specify a shift of \fB273.15\fR here to store values in
-degrees Celsius. The default value is is course \fB0.0\fR.
-.Sp
-This value is not applied to counter-values.
-.SS "The Host block"
-.IX Subsection "The Host block"
-The \fBHost\fR block defines which hosts to query, which \s-1SNMP\s0 community and
-version to use and which of the defined \fBData\fR to query.
-.PP
-The argument passed to the \fBHost\fR block is used as the hostname in the data
-stored by collectd.
-.IP "\fBAddress\fR \fIIP-Address\fR|\fIHostname\fR" 4
-.IX Item "Address IP-Address|Hostname"
-Set the address to connect to.
-.IP "\fBVersion\fR \fB1\fR|\fB2\fR" 4
-.IX Item "Version 1|2"
-Set the \s-1SNMP\s0 version to use. When giving \fB2\fR version \f(CW\*(C`2c\*(C'\fR is actually used.
-Version 3 is not supported by this plugin.
-.IP "\fBCommunity\fR \fICommunity\fR" 4
-.IX Item "Community Community"
-Pass \fICommunity\fR to the host.
-.IP "\fBCollect\fR \fIData\fR [\fIData\fR ...]" 4
-.IX Item "Collect Data [Data ...]"
-Defines which values to collect. \fIData\fR refers to one of the \fBData\fR block
-above. Since the config file is read top-down you need to define the data
-before using it here.
-.IP "\fBInterval\fR \fISeconds\fR" 4
-.IX Item "Interval Seconds"
-Collect data from this host every \fISeconds\fR seconds. This value needs to be a
-multiple of the global \fBInterval\fR setting and, if it is not, will be rounded
-\&\fBdown\fR to one and a warning is logged in this case. So if your global
-\&\fBInterval\fR is set to \fI10\fR and you configure \fI25\fR here, it's rounded down to
-\&\fI20\fR. By default the global \fBInterval\fR setting will be used.
-.Sp
-This option is meant for devices with not much \s-1CPU\s0 power, e.\ g. network
-equipment such as switches, embedded devices, rack monitoring systems and so
-on. Since the \fBStep\fR of generated \s-1RRD\s0 files depends on this setting it's
-wise to select a reasonable value once and never change it.
+.Vb 8
+\&  sub foobar_write
+\&  {
+\&    my ($type, $ds, $vl) = @_;
+\&    for (my $i = 0; $i < scalar (@$ds); ++$i) {
+\&      print "$vl\->{\*(Aqplugin\*(Aq} ($vl\->{\*(Aqtype\*(Aq}): $vl\->{\*(Aqvalues\*(Aq}\->[$i]\en";
+\&    }
+\&    return 1;
+\&  }
+.Ve
+.PP
+To register those functions with collectd:
+.PP
+.Vb 2
+\&  plugin_register (TYPE_READ, "foobar", "foobar_read");
+\&  plugin_register (TYPE_WRITE, "foobar", "foobar_write");
+.Ve
+.PP
+See the section \*(L"\s-1DATA\s0 \s-1TYPES\s0\*(R" above for a complete documentation of the data
+types used by the read and write functions.
+.SH "NOTES"
+.IX Header "NOTES"
+.IP "\(bu" 4
+Please feel free to send in new plugins to collectd's mailinglist at
+<collectd\ at\ verplant.org> for review and, possibly,
+inclusion in the main distribution. In the latter case, we will take care of
+keeping the plugin up to date and adapting it to new versions of collectd.
+.Sp
+Before submitting your plugin, please take a look at
+<http://collectd.org/dev\-info.shtml>.
+.SH "CAVEATS"
+.IX Header "CAVEATS"
+.IP "\(bu" 4
+collectd is heavily multi-threaded. Each collectd thread accessing the perl
+plugin will be mapped to a Perl interpreter thread (see \fIthreads\fR\|(3perl)).
+Any such thread will be created and destroyed transparently and on-the-fly.
+.Sp
+Hence, any plugin has to be thread-safe if it provides several entry points
+from collectd (i.\ e. if it registers more than one callback or if a
+registered callback may be called more than once in parallel). Please note
+that no data is shared between threads by default. You have to use the
+\&\fBthreads::shared\fR module to do so.
+.IP "\(bu" 4
+Each function name registered with collectd has to be available before the
+first thread has been created (i.\ e. basically at compile time). This
+basically means that hacks (yes, I really consider this to be a hack) like
+\&\f(CW\*(C`*foo = \e&bar; plugin_register (TYPE_READ, "plugin", "foo");\*(C'\fR most likely
+will not work. This is due to the fact that the symbol table is not shared
+across different threads.
+.IP "\(bu" 4
+Each plugin is usually only loaded once and kept in memory for performance
+reasons. Therefore, \s-1END\s0 blocks are only executed once when collectd shuts
+down. You should not rely on \s-1END\s0 blocks anyway \- use \fBshutdown functions\fR
+instead.
+.SH "KNOWN BUGS"
+.IX Header "KNOWN BUGS"
+.IP "\(bu" 4
+Currently, it is not possible to flush a single Perl plugin only. You can
+either flush all Perl plugins or none at all and you have to use \f(CW\*(C`perl\*(C'\fR as
+plugin name when doing so.
 .SH "SEE ALSO"
 .IX Header "SEE ALSO"
 \&\fIcollectd\fR\|(1),
 \&\fIcollectd.conf\fR\|(5),
-\&\fIsnmpget\fR\|(1),
-\&\fIsnmpgetnext\fR\|(1),
-\&\fIvariables\fR\|(5),
-\&\fIunix\fR\|(7)
+\&\fIcollectd\-exec\fR\|(5),
+\&\fItypes.db\fR\|(5),
+\&\fIperl\fR\|(1),
+\&\fIthreads\fR\|(3perl),
+\&\fIthreads::shared\fR\|(3perl),
+\&\fIperldebug\fR\|(1)
 .SH "AUTHOR"
 .IX Header "AUTHOR"
-Florian Forster <octo@verplant.org>
+The \f(CW\*(C`perl plugin\*(C'\fR has been written by Sebastian Harl
+<sh\ at\ tokkee.org>.
+.PP
+This manpage has been written by Florian Forster
+<octo\ at\ verplant.org> and Sebastian Harl
+<sh\ at\ tokkee.org>.
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.4/src/collectd-snmp.5 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.5/src/collectd-snmp.5
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.4/src/collectd-snmp.5	2008-10-17 04:10:06.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.5/src/collectd-snmp.5	2008-10-17 04:46:21.000000000 +0800
@@ -120,231 +120,234 @@
 .    ds ae ae
 .    ds Ae AE
 .\}
 .rm #[ #] #H #V #F C
 .\" ========================================================================
 .\"
-.IX Title "COLLECTD-UNIXSOCK 5"
-.TH COLLECTD-UNIXSOCK 5 "2008-10-16" "4.4.4" "collectd"
+.IX Title "COLLECTD-SNMP 5"
+.TH COLLECTD-SNMP 5 "2008-05-06" "4.5.1" "collectd"
 .\" For nroff, turn off justification.  Always turn off hyphenation; it makes
 .\" way too many mistakes in technical documents.
 .if n .ad l
 .nh
 .SH "NAME"
-collectd\-unixsock \- Documentation of collectd's \f(CW\*(C`unixsock plugin\*(C'\fR
+collectd\-snmp \- Documentation of collectd's \f(CW\*(C`snmp plugin\*(C'\fR
 .SH "SYNOPSIS"
 .IX Header "SYNOPSIS"
-.Vb 8
-\&  # See collectd.conf(5)
-\&  LoadPlugin unixsock
+.Vb 10
+\&  LoadPlugin snmp
 \&  # ...
-\&  <Plugin unixsock>
-\&    SocketFile "/path/to/socket"
-\&    SocketGroup "collectd"
-\&    SocketPerms "0770"
+\&  <Plugin snmp>
+\&    <Data "powerplus_voltge_input">
+\&      Type "voltage"
+\&      Table false
+\&      Instance "input_line1"
+\&      Scale 0.1
+\&      Values "SNMPv2\-SMI::enterprises.6050.5.4.1.1.2.1"
+\&    </Data>
+\&    <Data "hr_users">
+\&      Type "users"
+\&      Table false
+\&      Instance ""
+\&      Shift \-1
+\&      Values "HOST\-RESOURCES\-MIB::hrSystemNumUsers.0"
+\&    </Data>
+\&    <Data "std_traffic">
+\&      Type "if_octets"
+\&      Table true
+\&      Instance "IF\-MIB::ifDescr"
+\&      Values "IF\-MIB::ifInOctets" "IF\-MIB::ifOutOctets"
+\&    </Data>
+\&
+\&    <Host "some.switch.mydomain.org">
+\&      Address "192.168.0.2"
+\&      Version 1
+\&      Community "community_string"
+\&      Collect "std_traffic"
+\&      Interval 120
+\&    </Host>
+\&    <Host "some.server.mydomain.org">
+\&      Address "192.168.0.42"
+\&      Version 2
+\&      Community "another_string"
+\&      Collect "std_traffic" "hr_users"
+\&    </Host>
+\&    <Host "some.ups.mydomain.org">
+\&      Address "192.168.0.3"
+\&      Version 1
+\&      Community "more_communities"
+\&      Collect "powerplus_voltge_input"
+\&      Interval 300
+\&    </Host>
 \&  </Plugin>
 .Ve
 .SH "DESCRIPTION"
 .IX Header "DESCRIPTION"
-The \f(CW\*(C`unixsock plugin\*(C'\fR opens an UNIX-socket over which one can interact with
-the daemon. This can be used to use the values collected by collectd in other
-applications, such as monitoring, or submit externally collected values to
-collectd.
-.PP
-This plugin is used by \fIcollectd\-nagios\fR\|(1) to check if some value is in a
-certain range and exit with a Nagios-compatible exit code.
-.SH "COMMANDS"
-.IX Header "COMMANDS"
-Upon start the \f(CW\*(C`unixsock plugin\*(C'\fR opens a UNIX-socket and waits for
-connections. Once a connection is established the client can send commands to
-the daemon which it will answer, if it understand them.
-.PP
-In general the plugin answers with a status line of the following form:
-.PP
-\&\fIStatus\fR \fIMessage\fR
-.PP
-If \fIStatus\fR is greater than or equal to zero the message indicates success,
-if \fIStatus\fR is less than zero the message indicates failure. \fIMessage\fR is a
-human-readable string that further describes the return value.
-.PP
-On success, \fIStatus\fR furthermore indicates the number of subsequent lines of
-output (not including the status line). Each such lines usually contains a
-single return value. See the description of each command for details.
-.PP
-The following commands are implemented:
-.IP "\fB\s-1GETVAL\s0\fR \fIIdentifier\fR" 4
-.IX Item "GETVAL Identifier"
-If the value identified by \fIIdentifier\fR (see below) is found the complete
-value-list is returned. The response is a list of name-value-pairs, each pair
-on its own line (the number of lines is indicated by the status line \- see
-above). Each name-value-pair is of the form \fIname\fR\fB=\fR\fIvalue\fR.
-Counter-values are converted to a rate, e.\ g. bytes per second.
-Undefined values are returned as \fBNaN\fR.
-.Sp
-Example:
-  \-> | \s-1GETVAL\s0 myhost/cpu\-0/cpu\-user
-  <\- | 1 Value found
-  <\- | value=1.260000e+00
-.IP "\fB\s-1LISTVAL\s0\fR" 4
-.IX Item "LISTVAL"
-Returns a list of the values available in the value cache together with the
-time of the last update, so that querying applications can issue a \fB\s-1GETVAL\s0\fR
-command for the values that have changed. Each return value consists of the
-update time as an epoch value and the identifier, separated by a space. The
-update time is the time of the last value, as provided by the collecting
-instance and may be very different from the time the server considers to be
-\&\*(L"now\*(R".
-.Sp
-Example:
-  \-> | \s-1LISTVAL\s0
-  <\- | 69 Values found
-  <\- | 1182204284 myhost/cpu\-0/cpu\-idle
-  <\- | 1182204284 myhost/cpu\-0/cpu\-nice
-  <\- | 1182204284 myhost/cpu\-0/cpu\-system
-  <\- | 1182204284 myhost/cpu\-0/cpu\-user
-  ...
-.IP "\fB\s-1PUTVAL\s0\fR \fIIdentifier\fR [\fIOptionList\fR] \fIValuelist\fR" 4
-.IX Item "PUTVAL Identifier [OptionList] Valuelist"
-Submits one or more values (identified by \fIIdentifier\fR, see below) to the
-daemon which will dispatch it to all it's write-plugins.
-.Sp
-An \fIIdentifier\fR is of the form
-\&\f(CW\*(C`\f(CIhost\f(CW\f(CB/\f(CW\f(CIplugin\f(CW\f(CB\-\f(CW\f(CIinstance\f(CW\f(CB/\f(CW\f(CItype\f(CW\f(CB\-\f(CW\f(CIinstance\f(CW\*(C'\fR with both
-\&\fIinstance\fR\-parts being optional. If they're omitted the hyphen must be
-omitted, too. \fIplugin\fR and each \fIinstance\fR\-part may be chosen freely as long
-as the tuple (plugin, plugin instance, type instance) uniquely identifies the
-plugin within collectd. \fItype\fR identifies the type and number of values
-(i.\ e. data-set) passed to collectd. A large list of predefined
-data-sets is available in the \fBtypes.db\fR file.
-.Sp
-The \fIOptionList\fR is an optional list of \fIOptions\fR, where each option is a
-key-value-pair. A list of currently understood options can be found below, all
-other options will be ignored.
-.Sp
-\&\fIValuelist\fR is a colon-separated list of the time and the values, each either
-an integer if the data-source is a counter, or a double if the data-source is
-of type \*(L"gauge\*(R". You can submit an undefined gauge-value by using \fBU\fR. When
-submitting \fBU\fR to a counter the behavior is undefined. The time is given as
-epoch (i.\ e. standard \s-1UNIX\s0 time).
-.Sp
-You can mix options and values, but the order is important: Options only
-effect following values, so specifying an option as last field is allowed, but
-useless. Also, an option applies to \fBall\fR following values, so you don't need
-to re-set an option over and over again.
-.Sp
-The currently defined \fBOptions\fR are:
-.RS 4
-.IP "\fBinterval=\fR\fIseconds\fR" 4
-.IX Item "interval=seconds"
-Gives the interval in which the data identified by \fIIdentifier\fR is being
-collected.
-.RE
-.RS 4
-.Sp
-Please note that this is the same format as used in the \fBexec plugin\fR, see
-\&\fIcollectd\-exec\fR\|(5).
-.Sp
-Example:
-  \-> | \s-1PUTVAL\s0 testhost/interface/if_octets\-test0 interval=10 1179574444:123:456
-  <\- | 0 Success
-.RE
-.IP "\fB\s-1PUTNOTIF\s0\fR [\fIOptionList\fR] \fBmessage=\fR\fIMessage\fR" 4
-.IX Item "PUTNOTIF [OptionList] message=Message"
-Submits a notification to the daemon which will then dispatch it to all plugins
-which have registered for receiving notifications.
-.Sp
-The \fB\s-1PUTNOTIF\s0\fR if followed by a list of options which further describe the
-notification. The \fBmessage\fR option is special in that it will consume the rest
-of the line as its value. The \fBmessage\fR, \fBseverity\fR, and \fBtime\fR options are
-mandatory.
-.Sp
-Valid options are:
-.RS 4
-.IP "\fBmessage=\fR\fIMessage\fR (\fB\s-1REQUIRED\s0\fR)" 4
-.IX Item "message=Message (REQUIRED)"
-Sets the message of the notification. This is the message that will be made
-accessible to the user, so it should contain some useful information. This
-option must be the last option because the rest of the line will be its value,
-even if there are spaces and equal-signs following it! This option is
-mandatory.
-.IP "\fBseverity=failure\fR|\fBwarning\fR|\fBokay\fR (\fB\s-1REQUIRED\s0\fR)" 4
-.IX Item "severity=failure|warning|okay (REQUIRED)"
-Sets the severity of the notification. This option is mandatory.
-.IP "\fBtime=\fR\fITime\fR (\fB\s-1REQUIRED\s0\fR)" 4
-.IX Item "time=Time (REQUIRED)"
-Sets the time of the notification. The time is given as \*(L"epoch\*(R", i.\ e. as
-seconds since January 1st, 1970, 00:00:00. This option is mandatory.
-.IP "\fBhost=\fR\fIHostname\fR" 4
-.IX Item "host=Hostname"
-.PD 0
-.IP "\fBplugin=\fR\fIPlugin\fR" 4
-.IX Item "plugin=Plugin"
-.IP "\fBplugin_instance=\fR\fIPlugin-Instance\fR" 4
-.IX Item "plugin_instance=Plugin-Instance"
-.IP "\fBtype=\fR\fIType\fR" 4
-.IX Item "type=Type"
-.IP "\fBtype_instance=\fR\fIType-Instance\fR" 4
-.IX Item "type_instance=Type-Instance"
-.PD
-These \*(L"associative\*(R" options establish a relation between this notification and
-collected performance data. This connection is purely informal, i.\ e. the
-daemon itself doesn't do anything with this information. However, websites or
-GUIs may use this information to place notifications near the affected graph or
-table. All the options are optional, but \fBplugin_instance\fR without \fBplugin\fR
-or \fBtype_instance\fR without \fBtype\fR doesn't make much sense and should be
-avoided.
-.Sp
-Please note that this is the same format as used in the \fBexec plugin\fR, see
-\&\fIcollectd\-exec\fR\|(5).
-.RE
-.RS 4
-.Sp
-Example:
-  \-> | \s-1PUTNOTIF\s0 type=temperature severity=warning time=1201094702 message=The roof is on fire!
-  <\- | 0 Success
-.RE
-.IP "\fB\s-1FLUSH\s0\fR [\fBtimeout=\fR\fITimeout\fR] [\fBplugin=\fR\fIPlugin\fR [...]]" 4
-.IX Item "FLUSH [timeout=Timeout] [plugin=Plugin [...]]"
-Flushes all cached data older than \fITimeout\fR seconds. If no timeout has been
-specified, it defaults to \-1 which causes all data to be flushed. \fBtimeout\fR
-may be specified multiple times \- each occurrence applies to plugins listed
-afterwards.
-.Sp
-If specified, only specific plugins are flushed. Otherwise all plugins
-providing a flush callback are flushed.
-.Sp
-Example:
-  \-> | \s-1FLUSH\s0
-  <\- | 0 Done
-.SS "Identifiers"
-.IX Subsection "Identifiers"
-Value or value-lists are identified in a uniform fashion:
-.PP
-\&\fIHostname\fR/\fIPlugin\fR/\fIType\fR
-.PP
-Where \fIPlugin\fR and \fIType\fR are both either of type "\fIName\fR\*(L" or
-\&\*(R"\fIName\fR\-\fIInstance\fR". This sounds more complicated than it is, so here are
-some examples:
-.PP
-.Vb 4
-\&  myhost/cpu\-0/cpu\-user
-\&  myhost/load/load
-\&  myhost/memory/memory\-used
-\&  myhost/disk\-sda/disk_octets
-.Ve
-.SH "ABSTRACTION LAYER"
-.IX Header "ABSTRACTION LAYER"
-\&\fBcollectd\fR ships the Perl-Module Collectd::Unixsock which
-provides an abstraction layer over the actual socket connection. It can be
-found in the directory \fIbindings/perl/\fR in the source distribution or
-(usually) somewhere near \fI/usr/share/perl5/\fR if you're using a package. If
-you want to use Perl to communicate with the daemon, you're encouraged to use
-and expand this module.
+The \f(CW\*(C`snmp plugin\*(C'\fR queries other hosts using \s-1SNMP\s0, the simple network
+management protocol, and translates the value it receives to collectd's
+internal format and dispatches them. Depending on the write plugins you have
+loaded they may be written to disk or submitted to another instance or
+whatever you configured.
+.PP
+Because querying a host via \s-1SNMP\s0 may produce a timeout multiple threads are
+used to query hosts in parallel. Depending on the number of hosts between one
+and ten threads are used.
+.SH "CONFIGURATION"
+.IX Header "CONFIGURATION"
+Since the aim of the \f(CW\*(C`snmp plugin\*(C'\fR is to provide a generic interface to \s-1SNMP\s0,
+it's configuration is not trivial and may take some time.
+.PP
+Since the \f(CW\*(C`Net\-SNMP\*(C'\fR library is used you can use all the environment variables
+that are interpreted by that package. See \fIsnmpcmd\fR\|(1) for more details.
+.PP
+There are two types of blocks that can be contained in the
+\&\f(CW\*(C`<Plugin\ snmp>\*(C'\fR block: \fBData\fR and \fBHost\fR:
+.SS "The \fBData\fP block"
+.IX Subsection "The Data block"
+The \fBData\fR block defines a list of values or a table of values that are to be
+queried. The following options can be set:
+.IP "\fBType\fR \fItype\fR" 4
+.IX Item "Type type"
+collectd's type that is to be used, e.\ g. \*(L"if_octets\*(R" for interface
+traffic or \*(L"users\*(R" for a user count. The types are read from the \fBTypesDB\fR
+(see \fIcollectd.conf\fR\|(5)), so you may want to check for which types are
+defined. See \fItypes.db\fR\|(5) for a description of the format of this file.
+.IP "\fBTable\fR \fItrue|false\fR" 4
+.IX Item "Table true|false"
+Define if this is a single list of values or a table of values. The difference
+is the following:
+.Sp
+When \fBTable\fR is set to \fBfalse\fR, the OIDs given to \fBValues\fR (see below) are
+queried using the \f(CW\*(C`GET\*(C'\fR \s-1SNMP\s0 command (see \fIsnmpget\fR\|(1)) and transmitted to
+collectd. \fBOne\fR value list is dispatched and, eventually, one file will be
+written.
+.Sp
+When \fBTable\fR is set to \fBtrue\fR, the OIDs given to \fBValues\fR (see below) are
+queried using the \f(CW\*(C`GETNEXT\*(C'\fR \s-1SNMP\s0 command until the subtree is left. After all
+the lists (think: all columns of the table) have been read \fBseveral\fR values
+sets will be dispatches and, eventually, several files will be written. If you
+configure a \fBType\fR (see above) which needs more than one data source (for
+example \f(CW\*(C`if_octets\*(C'\fR which needs \f(CW\*(C`rx\*(C'\fR and \f(CW\*(C`tx\*(C'\fR) you will need to specify more
+than one (two, in the example case) OIDs with the \fBValues\fR option. This has
+nothing to do with the \fBTable\fR setting.
+.Sp
+For example, if you want to query the number of users on a system, you can use
+\&\f(CW\*(C`HOST\-RESOURCES\-MIB::hrSystemNumUsers.0\*(C'\fR. This is one value and belongs to one
+value list, therefore \fBTable\fR must be set to \fBfalse\fR. Please note that, in
+this case, you have to include the sequence number (zero in this case) in the
+\&\s-1OID\s0.
+.Sp
+Counter example: If you want to query the interface table provided by the
+\&\f(CW\*(C`IF\-MIB\*(C'\fR, e.\ g. the bytes transmitted. There are potentially many
+interfaces, so you will want to set \fBTable\fR to \fBtrue\fR. Because the
+\&\f(CW\*(C`if_octets\*(C'\fR type needs two values, received and transmitted bytes, you need to
+specify two OIDs in the \fBValues\fR setting, in this case likely
+\&\f(CW\*(C`IF\-MIB::ifHCInOctets\*(C'\fR and \f(CW\*(C`IF\-MIB::ifHCOutOctets\*(C'\fR. But, this is because of
+the \fBType\fR setting, not the \fBTable\fR setting.
+.Sp
+Since the semantic of \fBInstance\fR and \fBValues\fR depends on this setting you
+need to set it before setting them. Doing vice verse will result in undefined
+behavior.
+.IP "\fBInstance\fR \fIInstance\fR" 4
+.IX Item "Instance Instance"
+Sets the type-instance of the values that are dispatched. The meaning of this
+setting depends on whether \fBTable\fR is set to \fItrue\fR or \fIfalse\fR:
+.Sp
+If \fBTable\fR is set to \fItrue\fR, \fIInstance\fR is interpreted as an SNMP-prefix
+that will return a list of values. Those values are then used as the actual
+type-instance. An example would be the \f(CW\*(C`IF\-MIB::ifDescr\*(C'\fR subtree.
+\&\fIvariables\fR\|(5) from the \s-1SNMP\s0 distribution describes the format of OIDs.
+.Sp
+If \fBTable\fR is set to \fItrue\fR and \fBInstance\fR is omitted, then \*(L"\s-1SUBID\s0\*(R" will be
+used as the instance.
+.Sp
+If \fBTable\fR is set to \fIfalse\fR the actual string configured for \fIInstance\fR is
+copied into the value-list. In this case \fIInstance\fR may be empty, i.\ e.
+"".
+.IP "\fBInstancePrefix\fR \fIString\fR" 4
+.IX Item "InstancePrefix String"
+If \fBTable\fR is set to \fItrue\fR, you may feel the need to add something to the
+instance of the files. If set, \fIString\fR is prepended to the instance as
+determined by querying the agent. When \fBTable\fR is set to \fIfalse\fR this option
+has no effect.
+.Sp
+The \f(CW\*(C`UPS\-MIB\*(C'\fR is an example where you need this setting: It has voltages of
+the inlets, outlets and the battery of an \s-1UPS\s0. However, it doesn't provide a
+descriptive column for these voltages. In this case having 1, 2,\ ... as
+instances is not enough, because the inlet voltages and outlet voltages may
+both have the subids 1, 2,\ ... You can use this setting to distinguish
+between the different voltages.
+.IP "\fBValues\fR \fI\s-1OID\s0\fR [\fI\s-1OID\s0\fR ...]" 4
+.IX Item "Values OID [OID ...]"
+Configures the values to be queried from the \s-1SNMP\s0 host. The meaning slightly
+changes with the \fBTable\fR setting. \fIvariables\fR\|(5) from the \s-1SNMP\s0 distribution
+describes the format of OIDs.
+.Sp
+If \fBTable\fR is set to \fItrue\fR, each \fI\s-1OID\s0\fR must be the prefix of all the
+values to query, e.\ g. \f(CW\*(C`IF\-MIB::ifInOctets\*(C'\fR for all the counters of
+incoming traffic. This subtree is walked (using \f(CW\*(C`GETNEXT\*(C'\fR) until a value from
+outside the subtree is returned.
+.Sp
+If \fBTable\fR is set to \fIfalse\fR, each \fI\s-1OID\s0\fR must be the \s-1OID\s0 of exactly one
+value, e.\ g. \f(CW\*(C`IF\-MIB::ifInOctets.3\*(C'\fR for the third counter of incoming
+traffic.
+.IP "\fBScale\fR \fIValue\fR" 4
+.IX Item "Scale Value"
+The gauge-values returned by the SNMP-agent are multiplied by \fIValue\fR.  This
+is useful when values are transfered as a fixed point real number. For example,
+thermometers may transfer \fB243\fR but actually mean \fB24.3\fR, so you can specify
+a scale value of \fB0.1\fR to correct this. The default value is of course \fB1.0\fR.
+.Sp
+This value is not applied to counter-values.
+.IP "\fBShift\fR \fIValue\fR" 4
+.IX Item "Shift Value"
+\&\fIValue\fR is added to gauge-values returned by the SNMP-agent after they have
+been multiplied by any \fBScale\fR value. If, for example, a thermometer returns
+degrees Kelvin you could specify a shift of \fB273.15\fR here to store values in
+degrees Celsius. The default value is is course \fB0.0\fR.
+.Sp
+This value is not applied to counter-values.
+.SS "The Host block"
+.IX Subsection "The Host block"
+The \fBHost\fR block defines which hosts to query, which \s-1SNMP\s0 community and
+version to use and which of the defined \fBData\fR to query.
+.PP
+The argument passed to the \fBHost\fR block is used as the hostname in the data
+stored by collectd.
+.IP "\fBAddress\fR \fIIP-Address\fR|\fIHostname\fR" 4
+.IX Item "Address IP-Address|Hostname"
+Set the address to connect to.
+.IP "\fBVersion\fR \fB1\fR|\fB2\fR" 4
+.IX Item "Version 1|2"
+Set the \s-1SNMP\s0 version to use. When giving \fB2\fR version \f(CW\*(C`2c\*(C'\fR is actually used.
+Version 3 is not supported by this plugin.
+.IP "\fBCommunity\fR \fICommunity\fR" 4
+.IX Item "Community Community"
+Pass \fICommunity\fR to the host.
+.IP "\fBCollect\fR \fIData\fR [\fIData\fR ...]" 4
+.IX Item "Collect Data [Data ...]"
+Defines which values to collect. \fIData\fR refers to one of the \fBData\fR block
+above. Since the config file is read top-down you need to define the data
+before using it here.
+.IP "\fBInterval\fR \fISeconds\fR" 4
+.IX Item "Interval Seconds"
+Collect data from this host every \fISeconds\fR seconds. This value needs to be a
+multiple of the global \fBInterval\fR setting and, if it is not, will be rounded
+\&\fBdown\fR to one and a warning is logged in this case. So if your global
+\&\fBInterval\fR is set to \fI10\fR and you configure \fI25\fR here, it's rounded down to
+\&\fI20\fR. By default the global \fBInterval\fR setting will be used.
+.Sp
+This option is meant for devices with not much \s-1CPU\s0 power, e.\ g. network
+equipment such as switches, embedded devices, rack monitoring systems and so
+on. Since the \fBStep\fR of generated \s-1RRD\s0 files depends on this setting it's
+wise to select a reasonable value once and never change it.
 .SH "SEE ALSO"
 .IX Header "SEE ALSO"
 \&\fIcollectd\fR\|(1),
 \&\fIcollectd.conf\fR\|(5),
-\&\fIcollectd\-nagios\fR\|(1),
+\&\fIsnmpget\fR\|(1),
+\&\fIsnmpgetnext\fR\|(1),
+\&\fIvariables\fR\|(5),
 \&\fIunix\fR\|(7)
 .SH "AUTHOR"
 .IX Header "AUTHOR"
 Florian Forster <octo@verplant.org>
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.4/src/collectd-unixsock.5 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.5/src/collectd-unixsock.5
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.4/src/collectd-unixsock.5	2008-10-17 04:10:06.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.5/src/collectd-unixsock.5	2009-01-03 05:21:19.000000000 +0800
@@ -1,7 +1,7 @@
-.\" Automatically generated by Pod::Man 2.18 (Pod::Simple 3.05)
+.\" Automatically generated by Pod::Man 2.1801 (Pod::Simple 3.05)
 .\"
 .\" Standard preamble:
 .\" ========================================================================
 .de Sp \" Vertical space (when we can't use .PP)
 .if t .sp .5v
 .if n .sp
@@ -120,62 +120,231 @@
 .    ds ae ae
 .    ds Ae AE
 .\}
 .rm #[ #] #H #V #F C
 .\" ========================================================================
 .\"
-.IX Title "COLLECTDMON 1"
-.TH COLLECTDMON 1 "2008-05-06" "4.4.4" "collectd"
+.IX Title "COLLECTD-UNIXSOCK 5"
+.TH COLLECTD-UNIXSOCK 5 "2009-01-02" "4.4.5" "collectd"
 .\" For nroff, turn off justification.  Always turn off hyphenation; it makes
 .\" way too many mistakes in technical documents.
 .if n .ad l
 .nh
 .SH "NAME"
-collectdmon \- Monitoring daemon for collectd
+collectd\-unixsock \- Documentation of collectd's \f(CW\*(C`unixsock plugin\*(C'\fR
 .SH "SYNOPSIS"
 .IX Header "SYNOPSIS"
-collectdmon \fI[options]\fR [\-\- \fIcollectd options\fR]
+.Vb 8
+\&  # See collectd.conf(5)
+\&  LoadPlugin unixsock
+\&  # ...
+\&  <Plugin unixsock>
+\&    SocketFile "/path/to/socket"
+\&    SocketGroup "collectd"
+\&    SocketPerms "0770"
+\&  </Plugin>
+.Ve
 .SH "DESCRIPTION"
 .IX Header "DESCRIPTION"
-collectdmon is a small \*(L"wrapper\*(R" daemon which starts and monitors the collectd
-daemon. If collectd terminates it will automatically be restarted, unless
-collectdmon was told to shut it down.
-.SH "OPTIONS"
-.IX Header "OPTIONS"
-collectdmon supports the following options:
-.IP "\fB\-c\fR \fI<path>\fR" 4
-.IX Item "-c <path>"
-Specify the pathname of the collectd binary. You may either specify an
-absolute path or simply the name of the binary in which case the \fB\s-1PATH\s0\fR
-variable will be searched for it. The default is "\fBcollectd\fR".
-.IP "\fB\-P\fR \fI<pid\-file>\fR" 4
-.IX Item "-P <pid-file>"
-Specify the pid file. The default is "\fI/var/run/collectdmon.pid\fR".
-.IP "\fB\-h\fR" 4
-.IX Item "-h"
-Output usage information and exit.
-.IP "\fIcollectd options\fR" 4
-.IX Item "collectd options"
-Specify options that are passed on to collectd. If it is not already included,
-\&\fB\-f\fR will be added to these options. See \fIcollectd\fR\|(1).
-.SH "SIGNALS"
-.IX Header "SIGNALS"
-\&\fBcollectdmon\fR accepts the following signals:
-.IP "\fB\s-1SIGINT\s0\fR, \fB\s-1SIGTERM\s0\fR" 4
-.IX Item "SIGINT, SIGTERM"
-These signals cause \fBcollectdmon\fR to terminate \fBcollectd\fR, wait for its
-termination and then shut down.
-.IP "\fB\s-1SIGHUP\s0\fR" 4
-.IX Item "SIGHUP"
-This signal causes \fBcollectdmon\fR to terminate \fBcollectd\fR, wait for its
-termination and then restart it.
+The \f(CW\*(C`unixsock plugin\*(C'\fR opens an UNIX-socket over which one can interact with
+the daemon. This can be used to use the values collected by collectd in other
+applications, such as monitoring, or submit externally collected values to
+collectd.
+.PP
+This plugin is used by \fIcollectd\-nagios\fR\|(1) to check if some value is in a
+certain range and exit with a Nagios-compatible exit code.
+.SH "COMMANDS"
+.IX Header "COMMANDS"
+Upon start the \f(CW\*(C`unixsock plugin\*(C'\fR opens a UNIX-socket and waits for
+connections. Once a connection is established the client can send commands to
+the daemon which it will answer, if it understand them.
+.PP
+In general the plugin answers with a status line of the following form:
+.PP
+\&\fIStatus\fR \fIMessage\fR
+.PP
+If \fIStatus\fR is greater than or equal to zero the message indicates success,
+if \fIStatus\fR is less than zero the message indicates failure. \fIMessage\fR is a
+human-readable string that further describes the return value.
+.PP
+On success, \fIStatus\fR furthermore indicates the number of subsequent lines of
+output (not including the status line). Each such lines usually contains a
+single return value. See the description of each command for details.
+.PP
+The following commands are implemented:
+.IP "\fB\s-1GETVAL\s0\fR \fIIdentifier\fR" 4
+.IX Item "GETVAL Identifier"
+If the value identified by \fIIdentifier\fR (see below) is found the complete
+value-list is returned. The response is a list of name-value-pairs, each pair
+on its own line (the number of lines is indicated by the status line \- see
+above). Each name-value-pair is of the form \fIname\fR\fB=\fR\fIvalue\fR.
+Counter-values are converted to a rate, e.\ g. bytes per second.
+Undefined values are returned as \fBNaN\fR.
+.Sp
+Example:
+  \-> | \s-1GETVAL\s0 myhost/cpu\-0/cpu\-user
+  <\- | 1 Value found
+  <\- | value=1.260000e+00
+.IP "\fB\s-1LISTVAL\s0\fR" 4
+.IX Item "LISTVAL"
+Returns a list of the values available in the value cache together with the
+time of the last update, so that querying applications can issue a \fB\s-1GETVAL\s0\fR
+command for the values that have changed. Each return value consists of the
+update time as an epoch value and the identifier, separated by a space. The
+update time is the time of the last value, as provided by the collecting
+instance and may be very different from the time the server considers to be
+\&\*(L"now\*(R".
+.Sp
+Example:
+  \-> | \s-1LISTVAL\s0
+  <\- | 69 Values found
+  <\- | 1182204284 myhost/cpu\-0/cpu\-idle
+  <\- | 1182204284 myhost/cpu\-0/cpu\-nice
+  <\- | 1182204284 myhost/cpu\-0/cpu\-system
+  <\- | 1182204284 myhost/cpu\-0/cpu\-user
+  ...
+.IP "\fB\s-1PUTVAL\s0\fR \fIIdentifier\fR [\fIOptionList\fR] \fIValuelist\fR" 4
+.IX Item "PUTVAL Identifier [OptionList] Valuelist"
+Submits one or more values (identified by \fIIdentifier\fR, see below) to the
+daemon which will dispatch it to all it's write-plugins.
+.Sp
+An \fIIdentifier\fR is of the form
+\&\f(CW\*(C`\f(CIhost\f(CW\f(CB/\f(CW\f(CIplugin\f(CW\f(CB\-\f(CW\f(CIinstance\f(CW\f(CB/\f(CW\f(CItype\f(CW\f(CB\-\f(CW\f(CIinstance\f(CW\*(C'\fR with both
+\&\fIinstance\fR\-parts being optional. If they're omitted the hyphen must be
+omitted, too. \fIplugin\fR and each \fIinstance\fR\-part may be chosen freely as long
+as the tuple (plugin, plugin instance, type instance) uniquely identifies the
+plugin within collectd. \fItype\fR identifies the type and number of values
+(i.\ e. data-set) passed to collectd. A large list of predefined
+data-sets is available in the \fBtypes.db\fR file.
+.Sp
+The \fIOptionList\fR is an optional list of \fIOptions\fR, where each option is a
+key-value-pair. A list of currently understood options can be found below, all
+other options will be ignored.
+.Sp
+\&\fIValuelist\fR is a colon-separated list of the time and the values, each either
+an integer if the data-source is a counter, or a double if the data-source is
+of type \*(L"gauge\*(R". You can submit an undefined gauge-value by using \fBU\fR. When
+submitting \fBU\fR to a counter the behavior is undefined. The time is given as
+epoch (i.\ e. standard \s-1UNIX\s0 time).
+.Sp
+You can mix options and values, but the order is important: Options only
+effect following values, so specifying an option as last field is allowed, but
+useless. Also, an option applies to \fBall\fR following values, so you don't need
+to re-set an option over and over again.
+.Sp
+The currently defined \fBOptions\fR are:
+.RS 4
+.IP "\fBinterval=\fR\fIseconds\fR" 4
+.IX Item "interval=seconds"
+Gives the interval in which the data identified by \fIIdentifier\fR is being
+collected.
+.RE
+.RS 4
+.Sp
+Please note that this is the same format as used in the \fBexec plugin\fR, see
+\&\fIcollectd\-exec\fR\|(5).
+.Sp
+Example:
+  \-> | \s-1PUTVAL\s0 testhost/interface/if_octets\-test0 interval=10 1179574444:123:456
+  <\- | 0 Success
+.RE
+.IP "\fB\s-1PUTNOTIF\s0\fR [\fIOptionList\fR] \fBmessage=\fR\fIMessage\fR" 4
+.IX Item "PUTNOTIF [OptionList] message=Message"
+Submits a notification to the daemon which will then dispatch it to all plugins
+which have registered for receiving notifications.
+.Sp
+The \fB\s-1PUTNOTIF\s0\fR if followed by a list of options which further describe the
+notification. The \fBmessage\fR option is special in that it will consume the rest
+of the line as its value. The \fBmessage\fR, \fBseverity\fR, and \fBtime\fR options are
+mandatory.
+.Sp
+Valid options are:
+.RS 4
+.IP "\fBmessage=\fR\fIMessage\fR (\fB\s-1REQUIRED\s0\fR)" 4
+.IX Item "message=Message (REQUIRED)"
+Sets the message of the notification. This is the message that will be made
+accessible to the user, so it should contain some useful information. This
+option must be the last option because the rest of the line will be its value,
+even if there are spaces and equal-signs following it! This option is
+mandatory.
+.IP "\fBseverity=failure\fR|\fBwarning\fR|\fBokay\fR (\fB\s-1REQUIRED\s0\fR)" 4
+.IX Item "severity=failure|warning|okay (REQUIRED)"
+Sets the severity of the notification. This option is mandatory.
+.IP "\fBtime=\fR\fITime\fR (\fB\s-1REQUIRED\s0\fR)" 4
+.IX Item "time=Time (REQUIRED)"
+Sets the time of the notification. The time is given as \*(L"epoch\*(R", i.\ e. as
+seconds since January 1st, 1970, 00:00:00. This option is mandatory.
+.IP "\fBhost=\fR\fIHostname\fR" 4
+.IX Item "host=Hostname"
+.PD 0
+.IP "\fBplugin=\fR\fIPlugin\fR" 4
+.IX Item "plugin=Plugin"
+.IP "\fBplugin_instance=\fR\fIPlugin-Instance\fR" 4
+.IX Item "plugin_instance=Plugin-Instance"
+.IP "\fBtype=\fR\fIType\fR" 4
+.IX Item "type=Type"
+.IP "\fBtype_instance=\fR\fIType-Instance\fR" 4
+.IX Item "type_instance=Type-Instance"
+.PD
+These \*(L"associative\*(R" options establish a relation between this notification and
+collected performance data. This connection is purely informal, i.\ e. the
+daemon itself doesn't do anything with this information. However, websites or
+GUIs may use this information to place notifications near the affected graph or
+table. All the options are optional, but \fBplugin_instance\fR without \fBplugin\fR
+or \fBtype_instance\fR without \fBtype\fR doesn't make much sense and should be
+avoided.
+.Sp
+Please note that this is the same format as used in the \fBexec plugin\fR, see
+\&\fIcollectd\-exec\fR\|(5).
+.RE
+.RS 4
+.Sp
+Example:
+  \-> | \s-1PUTNOTIF\s0 type=temperature severity=warning time=1201094702 message=The roof is on fire!
+  <\- | 0 Success
+.RE
+.IP "\fB\s-1FLUSH\s0\fR [\fBtimeout=\fR\fITimeout\fR] [\fBplugin=\fR\fIPlugin\fR [...]]" 4
+.IX Item "FLUSH [timeout=Timeout] [plugin=Plugin [...]]"
+Flushes all cached data older than \fITimeout\fR seconds. If no timeout has been
+specified, it defaults to \-1 which causes all data to be flushed. \fBtimeout\fR
+may be specified multiple times \- each occurrence applies to plugins listed
+afterwards.
+.Sp
+If specified, only specific plugins are flushed. Otherwise all plugins
+providing a flush callback are flushed.
+.Sp
+Example:
+  \-> | \s-1FLUSH\s0
+  <\- | 0 Done
+.SS "Identifiers"
+.IX Subsection "Identifiers"
+Value or value-lists are identified in a uniform fashion:
+.PP
+\&\fIHostname\fR/\fIPlugin\fR/\fIType\fR
+.PP
+Where \fIPlugin\fR and \fIType\fR are both either of type "\fIName\fR\*(L" or
+\&\*(R"\fIName\fR\-\fIInstance\fR". This sounds more complicated than it is, so here are
+some examples:
+.PP
+.Vb 4
+\&  myhost/cpu\-0/cpu\-user
+\&  myhost/load/load
+\&  myhost/memory/memory\-used
+\&  myhost/disk\-sda/disk_octets
+.Ve
+.SH "ABSTRACTION LAYER"
+.IX Header "ABSTRACTION LAYER"
+\&\fBcollectd\fR ships the Perl-Module Collectd::Unixsock which
+provides an abstraction layer over the actual socket connection. It can be
+found in the directory \fIbindings/perl/\fR in the source distribution or
+(usually) somewhere near \fI/usr/share/perl5/\fR if you're using a package. If
+you want to use Perl to communicate with the daemon, you're encouraged to use
+and expand this module.
 .SH "SEE ALSO"
 .IX Header "SEE ALSO"
 \&\fIcollectd\fR\|(1),
 \&\fIcollectd.conf\fR\|(5),
-<http://collectd.org/>
+\&\fIcollectd\-nagios\fR\|(1),
+\&\fIunix\fR\|(7)
 .SH "AUTHOR"
 .IX Header "AUTHOR"
-collectd has been written by Florian Forster <octo at verplant.org>
-and many contributors (see `\s-1AUTHORS\s0').
-.PP
-collectdmon has been written by Sebastian Harl <sh@tokkee.org>.
+Florian Forster <octo@verplant.org>
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.4/src/common.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.5/src/common.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.4/src/common.c	2008-10-17 03:24:20.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.5/src/common.c	2009-01-03 04:05:29.000000000 +0800
@@ -524,18 +524,18 @@
 #ifdef assert
 	assert (ksp != NULL);
 	assert (ksp->ks_type == KSTAT_TYPE_NAMED);
 #else
 	if (ksp == NULL)
 	{
-		fprintf (stderr, "ERROR: %s:%i: ksp == NULL\n", __FILE__, __LINE__);
+		ERROR ("ERROR: %s:%i: ksp == NULL\n", __FILE__, __LINE__);
 		return (-1LL);
 	}
 	else if (ksp->ks_type != KSTAT_TYPE_NAMED)
 	{
-		fprintf (stderr, "ERROR: %s:%i: ksp->ks_type != KSTAT_TYPE_NAMED\n", __FILE__, __LINE__);
+		ERROR ("ERROR: %s:%i: ksp->ks_type != KSTAT_TYPE_NAMED\n", __FILE__, __LINE__);
 		return (-1LL);
 	}
 #endif
 
 	if ((kn = (kstat_named_t *) kstat_data_lookup (ksp, name)) == NULL)
 		return (retval);
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.4/src/configfile.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.5/src/configfile.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.4/src/configfile.c	2008-10-17 03:24:20.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.5/src/configfile.c	2009-01-03 04:05:29.000000000 +0800
@@ -274,13 +274,13 @@
 		buffer_ptr  += status;
 	}
 	/* skip the initial space */
 	buffer_ptr = buffer + 1;
 
 	return (cf_dispatch (plugin, ci->key, buffer_ptr));
-} /* int plugin_conf_dispatch */
+} /* int dispatch_value_plugin */
 
 static int dispatch_value (const oconfig_item_t *ci)
 {
 	int ret = -2;
 	int i;
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.4/src/config.h.in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.5/src/config.h.in
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.4/src/config.h.in	2008-10-17 04:10:04.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.5/src/config.h.in	2009-01-03 05:20:49.000000000 +0800
@@ -316,12 +316,15 @@
 /* Define to 1 if you have the <mntent.h> header file. */
 #undef HAVE_MNTENT_H
 
 /* Define to 1 if you have the <mnttab.h> header file. */
 #undef HAVE_MNTTAB_H
 
+/* Define to 1 if you have the <mysql.h> header file. */
+#undef HAVE_MYSQL_H
+
 /* Define to 1 if you have the <mysql/mysql.h> header file. */
 #undef HAVE_MYSQL_MYSQL_H
 
 /* Define to 1 if you have the `nanosleep' function. */
 #undef HAVE_NANOSLEEP
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.4/src/email.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.5/src/email.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.4/src/email.c	2008-10-17 03:24:20.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.5/src/email.c	2009-01-03 04:05:29.000000000 +0800
@@ -184,18 +184,24 @@
 		long int tmp = strtol (value, NULL, 0);
 
 		if (tmp < 1) {
 			fprintf (stderr, "email plugin: `MaxConns' was set to invalid "
 					"value %li, will use default %i.\n",
 					tmp, MAX_CONNS);
+			ERROR ("email plugin: `MaxConns' was set to invalid "
+					"value %li, will use default %i.\n",
+					tmp, MAX_CONNS);
 			max_conns = MAX_CONNS;
 		}
 		else if (tmp > MAX_CONNS_LIMIT) {
 			fprintf (stderr, "email plugin: `MaxConns' was set to invalid "
 					"value %li, will use hardcoded limit %i.\n",
 					tmp, MAX_CONNS_LIMIT);
+			ERROR ("email plugin: `MaxConns' was set to invalid "
+					"value %li, will use hardcoded limit %i.\n",
+					tmp, MAX_CONNS_LIMIT);
 			max_conns = MAX_CONNS_LIMIT;
 		}
 		else {
 			max_conns = (int)tmp;
 		}
 	}
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.4/src/ipmi.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.5/src/ipmi.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.4/src/ipmi.c	2008-10-17 03:24:20.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.5/src/ipmi.c	2009-01-03 04:05:29.000000000 +0800
@@ -382,13 +382,13 @@
     unsigned int port_num,
     int still_connected,
     void *user_data)
 {
   int status;
 
-  printf ("domain_connection_change_handler (domain = %p, err = %i, "
+  DEBUG ("domain_connection_change_handler (domain = %p, err = %i, "
       "conn_num = %u, port_num = %u, still_connected = %i, "
       "user_data = %p);\n",
       (void *) domain, err, conn_num, port_num, still_connected, user_data);
 
   status = ipmi_domain_add_entity_update_handler (domain,
       domain_entity_update_handler, /* user data = */ NULL);
@@ -449,13 +449,13 @@
   int status;
   os_handler_t *os_handler = NULL;
 
   status = thread_init (&os_handler);
   if (status != 0)
   {
-    fprintf (stderr, "ipmi plugin: thread_init failed.\n");
+    ERROR ("ipmi plugin: thread_init failed.\n");
     return ((void *) -1);
   }
 
   while (c_ipmi_active != 0)
   {
     struct timeval tv = { 1, 0 };
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.4/src/libiptc/libip6tc.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.5/src/libiptc/libip6tc.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.4/src/libiptc/libip6tc.c	2008-10-17 03:24:20.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.5/src/libiptc/libip6tc.c	2008-11-25 21:04:47.000000000 +0800
@@ -128,13 +128,13 @@
 #define ALIGN			IP6T_ALIGN
 #define RETURN			IP6T_RETURN
 
 #include "libiptc.c"
 
 #define BIT6(a, l) \
- ((ntohl(a->in6_u.u6_addr32[(l) / 32]) >> (31 - ((l) & 31))) & 1)
+ ((ntohl(a->s6_addr32[(l) / 32]) >> (31 - ((l) & 31))) & 1)
 
 int
 ipv6_prefix_length(const struct in6_addr *a)
 {
 	int l, i;
 	for (l = 0; l < 128; l++) {
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.4/src/liboconfig/parser.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.5/src/liboconfig/parser.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.4/src/liboconfig/parser.c	2008-07-06 20:52:40.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.5/src/liboconfig/parser.c	2008-12-20 20:01:16.000000000 +0800
@@ -117,13 +117,13 @@
 
 /* Enabling verbose error messages.  */
 #ifdef YYERROR_VERBOSE
 # undef YYERROR_VERBOSE
 # define YYERROR_VERBOSE 1
 #else
-# define YYERROR_VERBOSE 1
+# define YYERROR_VERBOSE 0
 #endif
 
 /* Enabling the token table.  */
 #ifndef YYTOKEN_TABLE
 # define YYTOKEN_TABLE 0
 #endif
@@ -440,15 +440,15 @@
       -1,    11,    -1,    22,    21,    -1,    21,    -1,    22,    -1
 };
 
 /* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
 static const yytype_uint8 yyrline[] =
 {
-       0,    73,    73,    74,    78,    79,    80,    81,    85,    92,
-     101,   105,   115,   121,   131,   138,   154,   155,   156,   160,
-     170,   187
+       0,    70,    70,    71,    75,    76,    77,    78,    82,    89,
+      98,   102,   112,   118,   128,   135,   151,   152,   153,   157,
+     167,   184
 };
 #endif
 
 #if YYDEBUG || YYERROR_VERBOSE || YYTOKEN_TABLE
 /* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
    First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
@@ -1366,102 +1366,102 @@
 
 
   YY_REDUCE_PRINT (yyn);
   switch (yyn)
     {
         case 2:
-#line 73 "parser.y"
+#line 70 "parser.y"
     {(yyval.string) = unquote ((yyvsp[(1) - (1)].string));}
     break;
 
   case 3:
-#line 74 "parser.y"
+#line 71 "parser.y"
     {(yyval.string) = strdup ((yyvsp[(1) - (1)].string));}
     break;
 
   case 4:
-#line 78 "parser.y"
+#line 75 "parser.y"
     {(yyval.cv).value.number = (yyvsp[(1) - (1)].number); (yyval.cv).type = OCONFIG_TYPE_NUMBER;}
     break;
 
   case 5:
-#line 79 "parser.y"
+#line 76 "parser.y"
     {(yyval.cv).value.boolean = 1; (yyval.cv).type = OCONFIG_TYPE_BOOLEAN;}
     break;
 
   case 6:
-#line 80 "parser.y"
+#line 77 "parser.y"
     {(yyval.cv).value.boolean = 0; (yyval.cv).type = OCONFIG_TYPE_BOOLEAN;}
     break;
 
   case 7:
-#line 81 "parser.y"
+#line 78 "parser.y"
     {(yyval.cv).value.string = (yyvsp[(1) - (1)].string); (yyval.cv).type = OCONFIG_TYPE_STRING;}
     break;
 
   case 8:
-#line 86 "parser.y"
+#line 83 "parser.y"
     {
 	 (yyval.al) = (yyvsp[(1) - (2)].al);
 	 (yyval.al).argument_num++;
 	 (yyval.al).argument = realloc ((yyval.al).argument, (yyval.al).argument_num * sizeof (oconfig_value_t));
 	 (yyval.al).argument[(yyval.al).argument_num-1] = (yyvsp[(2) - (2)].cv);
 	}
     break;
 
   case 9:
-#line 93 "parser.y"
+#line 90 "parser.y"
     {
 	 (yyval.al).argument = malloc (sizeof (oconfig_value_t));
 	 (yyval.al).argument[0] = (yyvsp[(1) - (1)].cv);
 	 (yyval.al).argument_num = 1;
 	}
     break;
 
   case 10:
-#line 101 "parser.y"
+#line 98 "parser.y"
     {(yyval.string) = strdup ((yyvsp[(1) - (1)].string));}
     break;
 
   case 11:
-#line 106 "parser.y"
+#line 103 "parser.y"
     {
 	 memset (&(yyval.ci), '\0', sizeof ((yyval.ci)));
 	 (yyval.ci).key = (yyvsp[(1) - (3)].string);
 	 (yyval.ci).values = (yyvsp[(2) - (3)].al).argument;
 	 (yyval.ci).values_num = (yyvsp[(2) - (3)].al).argument_num;
 	}
     break;
 
   case 12:
-#line 116 "parser.y"
+#line 113 "parser.y"
     {
 	 memset (&(yyval.ci), '\0', sizeof ((yyval.ci)));
 	 (yyval.ci).key = (yyvsp[(2) - (4)].string);
 	}
     break;
 
   case 13:
-#line 122 "parser.y"
+#line 119 "parser.y"
     {
 	 memset (&(yyval.ci), '\0', sizeof ((yyval.ci)));
 	 (yyval.ci).key = (yyvsp[(2) - (5)].string);
 	 (yyval.ci).values = (yyvsp[(3) - (5)].al).argument;
 	 (yyval.ci).values_num = (yyvsp[(3) - (5)].al).argument_num;
 	}
     break;
 
   case 14:
-#line 132 "parser.y"
+#line 129 "parser.y"
     {
 	 (yyval.string) = (yyvsp[(3) - (5)].string);
 	}
     break;
 
   case 15:
-#line 139 "parser.y"
+#line 136 "parser.y"
     {
 	 if (strcmp ((yyvsp[(1) - (3)].ci).key, (yyvsp[(3) - (3)].string)) != 0)
 	 {
 		printf ("block_begin = %s; block_end = %s;\n", (yyvsp[(1) - (3)].ci).key, (yyvsp[(3) - (3)].string));
 	 	yyerror ("Block not closed..\n");
 		exit (1);
@@ -1471,41 +1471,41 @@
 	 (yyval.ci).children = (yyvsp[(2) - (3)].sl).statement;
 	 (yyval.ci).children_num = (yyvsp[(2) - (3)].sl).statement_num;
 	}
     break;
 
   case 16:
-#line 154 "parser.y"
+#line 151 "parser.y"
     {(yyval.ci) = (yyvsp[(1) - (1)].ci);}
     break;
 
   case 17:
-#line 155 "parser.y"
+#line 152 "parser.y"
     {(yyval.ci) = (yyvsp[(1) - (1)].ci);}
     break;
 
   case 18:
-#line 156 "parser.y"
+#line 153 "parser.y"
     {(yyval.ci).values_num = 0;}
     break;
 
   case 19:
-#line 161 "parser.y"
+#line 158 "parser.y"
     {
 	 (yyval.sl) = (yyvsp[(1) - (2)].sl);
 	 if (((yyvsp[(2) - (2)].ci).values_num > 0) || ((yyvsp[(2) - (2)].ci).children_num > 0))
 	 {
 		 (yyval.sl).statement_num++;
 		 (yyval.sl).statement = realloc ((yyval.sl).statement, (yyval.sl).statement_num * sizeof (oconfig_item_t));
 		 (yyval.sl).statement[(yyval.sl).statement_num-1] = (yyvsp[(2) - (2)].ci);
 	 }
 	}
     break;
 
   case 20:
-#line 171 "parser.y"
+#line 168 "parser.y"
     {
 	 if (((yyvsp[(1) - (1)].ci).values_num > 0) || ((yyvsp[(1) - (1)].ci).children_num > 0))
 	 {
 		 (yyval.sl).statement = malloc (sizeof (oconfig_item_t));
 		 (yyval.sl).statement[0] = (yyvsp[(1) - (1)].ci);
 		 (yyval.sl).statement_num = 1;
@@ -1516,13 +1516,13 @@
 		(yyval.sl).statement_num = 0;
 	 }
 	}
     break;
 
   case 21:
-#line 188 "parser.y"
+#line 185 "parser.y"
     {
 	 ci_root = malloc (sizeof (oconfig_item_t));
 	 memset (ci_root, '\0', sizeof (oconfig_item_t));
 	 ci_root->children = (yyvsp[(1) - (1)].sl).statement;
 	 ci_root->children_num = (yyvsp[(1) - (1)].sl).statement_num;
 	}
@@ -1741,13 +1741,13 @@
 #endif
   /* Make sure YYID is used.  */
   return YYID (yyresult);
 }
 
 
-#line 196 "parser.y"
+#line 193 "parser.y"
 
 static int yyerror (const char *s)
 {
 	char *text;
 
 	if (*yytext == '\n')
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.4/src/liboconfig/parser.y /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.5/src/liboconfig/parser.y
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.4/src/liboconfig/parser.y	2008-05-06 20:30:12.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.5/src/liboconfig/parser.y	2008-12-20 18:15:37.000000000 +0800
@@ -62,15 +62,12 @@
 /* statements */
 %type <ci> option
 %type <ci> statement
 %type <sl> statement_list
 %type <ci> entire_file
 
-/* pass an verbose, specific error message to yyerror() */
-%error-verbose
-
 %%
 string:
 	QUOTED_STRING		{$$ = unquote ($1);}
 	| UNQUOTED_STRING	{$$ = strdup ($1);}
 	;
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.4/src/multimeter.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.5/src/multimeter.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.4/src/multimeter.c	2008-10-17 03:24:20.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.5/src/multimeter.c	2009-01-03 04:05:30.000000000 +0800
@@ -83,13 +83,18 @@
 			char *range;
 			int status;
 			fd_set rfds;
     			struct timeval timeout;
     			struct timeval time_now;
 
-			write(fd, "D", 1);
+			status = swrite (fd, "D", 1);
+			if (status < 0)
+			{
+				ERROR ("multimeter plugin: swrite failed.");
+				return (-1);
+			}
 
 			FD_ZERO(&rfds);
 			FD_SET(fd, &rfds);
 
 			if (gettimeofday (&time_now, NULL) < 0)
 	                {
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.4/src/mysql.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.5/src/mysql.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.4/src/mysql.c	2008-10-17 03:24:20.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.5/src/mysql.c	2009-01-03 04:05:30.000000000 +0800
@@ -21,13 +21,15 @@
 
 #include "collectd.h"
 #include "common.h"
 #include "plugin.h"
 #include "configfile.h"
 
-#ifdef HAVE_MYSQL_MYSQL_H
+#ifdef HAVE_MYSQL_H
+#include <mysql.h>
+#elif defined(HAVE_MYSQL_MYSQL_H)
 #include <mysql/mysql.h>
 #endif
 
 /* TODO: Understand `Select_*' and possibly do that stuff as well.. */
 
 static const char *config_keys[] =
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.4/src/network.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.5/src/network.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.4/src/network.c	2008-10-17 03:24:20.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.5/src/network.c	2009-01-03 04:05:34.000000000 +0800
@@ -1392,13 +1392,13 @@
 			break;
 		} /* while (42) */
 	} /* for (sending_sockets) */
 } /* void network_send_buffer */
 
 static int add_to_buffer (char *buffer, int buffer_size,
-		value_list_t *vl_def, char *type_def,
+		value_list_t *vl_def, char *type_def, size_t type_def_size,
 		const data_set_t *ds, const value_list_t *vl)
 {
 	char *buffer_orig = buffer;
 
 	if (strcmp (vl_def->host, vl->host) != 0)
 	{
@@ -1443,13 +1443,13 @@
 
 	if (strcmp (type_def, ds->type) != 0)
 	{
 		if (write_part_string (&buffer, &buffer_size, TYPE_TYPE,
 					ds->type, strlen (ds->type)) != 0)
 			return (-1);
-		sstrncpy (type_def, ds->type, sizeof (type_def));
+		sstrncpy (type_def, ds->type, type_def_size);
 	}
 
 	if (strcmp (vl_def->type_instance, vl->type_instance) != 0)
 	{
 		if (write_part_string (&buffer, &buffer_size, TYPE_TYPE_INSTANCE,
 					vl->type_instance,
@@ -1489,13 +1489,14 @@
 		return (0);
 
 	pthread_mutex_lock (&send_buffer_lock);
 
 	status = add_to_buffer (send_buffer_ptr,
 			sizeof (send_buffer) - send_buffer_fill,
-			&send_buffer_vl, send_buffer_type,
+			&send_buffer_vl,
+		       	send_buffer_type, sizeof (send_buffer_type),
 			ds, vl);
 	if (status >= 0)
 	{
 		/* status == bytes added to the buffer */
 		send_buffer_fill += status;
 		send_buffer_ptr  += status;
@@ -1503,13 +1504,14 @@
 	else
 	{
 		flush_buffer ();
 
 		status = add_to_buffer (send_buffer_ptr,
 				sizeof (send_buffer) - send_buffer_fill,
-				&send_buffer_vl, send_buffer_type,
+				&send_buffer_vl,
+			       	send_buffer_type, sizeof (send_buffer_type),
 				ds, vl);
 
 		if (status >= 0)
 		{
 			send_buffer_fill += status;
 			send_buffer_ptr  += status;
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.4/src/rrdtool.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.5/src/rrdtool.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.4/src/rrdtool.c	2008-10-17 03:24:20.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.5/src/rrdtool.c	2009-01-03 04:05:30.000000000 +0800
@@ -967,23 +967,27 @@
 	{
 		int tmp = atoi (value);
 		if (tmp < 0)
 		{
 			fprintf (stderr, "rrdtool: `CacheTimeout' must "
 					"be greater than 0.\n");
+			ERROR ("rrdtool: `CacheTimeout' must "
+					"be greater than 0.\n");
 			return (1);
 		}
 		cache_timeout = tmp;
 	}
 	else if (strcasecmp ("CacheFlush", key) == 0)
 	{
 		int tmp = atoi (value);
 		if (tmp < 0)
 		{
 			fprintf (stderr, "rrdtool: `CacheFlush' must "
 					"be greater than 0.\n");
+			ERROR ("rrdtool: `CacheFlush' must "
+					"be greater than 0.\n");
 			return (1);
 		}
 		cache_flush_timeout = tmp;
 	}
 	else if (strcasecmp ("DataDir", key) == 0)
 	{
@@ -1021,12 +1025,14 @@
 	{
 		int tmp = atoi (value);
 		if (tmp <= 0)
 		{
 			fprintf (stderr, "rrdtool: `RRARows' must "
 					"be greater than 0.\n");
+			ERROR ("rrdtool: `RRARows' must "
+					"be greater than 0.\n");
 			return (1);
 		}
 		rrarows = tmp;
 	}
 	else if (strcasecmp ("RRATimespan", key) == 0)
 	{
@@ -1047,12 +1053,13 @@
 			
 			tmp_alloc = realloc (rra_timespans_custom,
 					sizeof (int) * (rra_timespans_custom_num + 1));
 			if (tmp_alloc == NULL)
 			{
 				fprintf (stderr, "rrdtool: realloc failed.\n");
+				ERROR ("rrdtool: realloc failed.\n");
 				free (value_copy);
 				return (1);
 			}
 			rra_timespans_custom = tmp_alloc;
 			rra_timespans_custom[rra_timespans_custom_num] = atoi (ptr);
 			if (rra_timespans_custom[rra_timespans_custom_num] != 0)
@@ -1070,12 +1077,14 @@
 	{
 		double tmp = atof (value);
 		if ((tmp < 0.0) || (tmp >= 1.0))
 		{
 			fprintf (stderr, "rrdtool: `XFF' must "
 					"be in the range 0 to 1 (exclusive).");
+			ERROR ("rrdtool: `XFF' must "
+					"be in the range 0 to 1 (exclusive).");
 			return (1);
 		}
 		xff = tmp;
 	}
 	else
 	{
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.4/src/types.db.5 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.5/src/types.db.5
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.4/src/types.db.5	2008-10-17 04:10:27.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.5/src/types.db.5	2009-01-03 05:21:19.000000000 +0800
@@ -1,7 +1,7 @@
-.\" Automatically generated by Pod::Man 2.18 (Pod::Simple 3.05)
+.\" Automatically generated by Pod::Man 2.1801 (Pod::Simple 3.05)
 .\"
 .\" Standard preamble:
 .\" ========================================================================
 .de Sp \" Vertical space (when we can't use .PP)
 .if t .sp .5v
 .if n .sp
@@ -121,13 +121,13 @@
 .    ds Ae AE
 .\}
 .rm #[ #] #H #V #F C
 .\" ========================================================================
 .\"
 .IX Title "TYPES.DB 5"
-.TH TYPES.DB 5 "2008-05-06" "4.4.4" "collectd"
+.TH TYPES.DB 5 "2009-01-02" "4.4.5" "collectd"
 .\" For nroff, turn off justification.  Always turn off hyphenation; it makes
 .\" way too many mistakes in technical documents.
 .if n .ad l
 .nh
 .SH "NAME"
 types.db \- Data\-set specifications for the system statistics collection daemon
@@ -155,15 +155,26 @@
 data stored for this data-source. If \fBU\fR is specified for either the min or
 max value, it will be set to unknown, meaning that no range checks will
 happen. See \fIrrdcreate\fR\|(1) for more details.
 .SH "FILES"
 .IX Header "FILES"
 The location of the types.db file is defined by the \fBTypesDB\fR configuration
-option (see \fIcollectd.conf\fR\|(5)). If you want to specify custom data-sets, you
-should do so by using a custom file specified as an additional argument to the
-\&\fBTypesDB\fR option.
+option (see \fIcollectd.conf\fR\|(5)).
+.SH "CUSTOM TYPES"
+.IX Header "CUSTOM TYPES"
+If you want to specify custom types, you should do so by specifying a custom
+file in addition to the default one (see \s-1FILES\s0) above. You can do that by
+having multiple \fBTypesDB\fR statements in your configuration file or by
+specifying more than one file in one line.
+.PP
+For example:
+.PP
+.Vb 2
+\& TypesDB "/opt/collectd/share/collectd/types.db"
+\& TypesDB "/opt/collectd/etc/types.db.custom"
+.Ve
 .SH "SEE ALSO"
 .IX Header "SEE ALSO"
 \&\fIcollectd\fR\|(1),
 \&\fIcollectd.conf\fR\|(5),
 \&\fIrrdcreate\fR\|(1)
 .SH "AUTHOR"
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.4/src/types.db.pod /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.5/src/types.db.pod
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.4/src/types.db.pod	2008-05-06 20:30:13.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.5/src/types.db.pod	2009-01-03 04:05:30.000000000 +0800
@@ -26,15 +26,25 @@
 max value, it will be set to unknown, meaning that no range checks will
 happen. See L<rrdcreate(1)> for more details.
 
 =head1 FILES
 
 The location of the types.db file is defined by the B<TypesDB> configuration
-option (see L<collectd.conf(5)>). If you want to specify custom data-sets, you
-should do so by using a custom file specified as an additional argument to the
-B<TypesDB> option.
+option (see L<collectd.conf(5)>).
+
+=head1 CUSTOM TYPES
+
+If you want to specify custom types, you should do so by specifying a custom
+file in addition to the default one (see L<FILES>) above. You can do that by
+having multiple B<TypesDB> statements in your configuration file or by
+specifying more than one file in one line.
+
+For example:
+
+ TypesDB "/opt/collectd/share/collectd/types.db"
+ TypesDB "/opt/collectd/etc/types.db.custom"
 
 =head1 SEE ALSO
 
 L<collectd(1)>,
 L<collectd.conf(5)>,
 L<rrdcreate(1)>
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.4/src/unixsock.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.5/src/unixsock.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.4/src/unixsock.c	2008-10-17 03:24:20.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.5/src/unixsock.c	2009-01-03 04:05:30.000000000 +0800
@@ -379,14 +379,21 @@
 
 	return (0);
 } /* int us_config */
 
 static int us_init (void)
 {
+	static int have_init = 0;
+
 	int status;
 
+	/* Initialize only once. */
+	if (have_init != 0)
+		return (0);
+	have_init = 1;
+
 	loop = 1;
 
 	status = pthread_create (&listen_thread, NULL, us_server_thread, NULL);
 	if (status != 0)
 	{
 		char errbuf[1024];
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.4/src/utils_dns.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.5/src/utils_dns.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.4/src/utils_dns.c	2008-10-17 03:24:20.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.5/src/utils_dns.c	2009-01-03 04:05:30.000000000 +0800
@@ -31,12 +31,13 @@
  * Authors:
  *   The Measurement Factory, Inc. <http://www.measurement-factory.com/>
  *   Florian octo Forster <octo at verplant.org>
  */
 
 #include "collectd.h"
+#include "plugin.h"
 
 #if HAVE_NETINET_IN_SYSTM_H
 # include <netinet/in_systm.h>
 #endif
 #if HAVE_NETINET_IN_H
 # include <netinet/in.h>
@@ -351,13 +352,12 @@
 
     memcpy(&us, buf + 0, 2);
     qh.id = ntohs(us);
 
     memcpy(&us, buf + 2, 2);
     us = ntohs(us);
-    fprintf (stderr, "Bytes 0, 1: 0x%04hx\n", us);
     qh.qr = (us >> 15) & 0x01;
     qh.opcode = (us >> 11) & 0x0F;
     qh.aa = (us >> 10) & 0x01;
     qh.tc = (us >> 9) & 0x01;
     qh.rd = (us >> 8) & 0x01;
     qh.ra = (us >> 7) & 0x01;
@@ -387,13 +387,13 @@
 	strncpy (qh.qname, ".", sizeof (qh.qname));
     while ((t = strchr(qh.qname, '\n')))
 	*t = ' ';
     while ((t = strchr(qh.qname, '\r')))
 	*t = ' ';
     for (t = qh.qname; *t; t++)
-	*t = tolower(*t);
+	*t = tolower((int) *t);
 
     memcpy(&us, buf + offset, 2);
     qh.qtype = ntohs(us);
     memcpy(&us, buf + offset + 2, 2);
     qh.qclass = ntohs(us);
 
@@ -645,13 +645,13 @@
 
 /* public function */
 void handle_pcap(u_char *udata, const struct pcap_pkthdr *hdr, const u_char *pkt)
 {
     int status;
 
-    fprintf (stderr, "handle_pcap (udata = %p, hdr = %p, pkt = %p): hdr->caplen = %i\n",
+    DEBUG ("handle_pcap (udata = %p, hdr = %p, pkt = %p): hdr->caplen = %i\n",
 		    (void *) udata, (void *) hdr, (void *) pkt,
 		    hdr->caplen);
 
     if (hdr->caplen < ETHER_HDR_LEN)
 	return;
 
@@ -682,13 +682,13 @@
 #endif
 	case DLT_NULL:
 	    status = handle_null (pkt, hdr->caplen);
 	    break;
 
 	default:
-	    fprintf (stderr, "unsupported data link type %d\n",
+	    ERROR ("handle_pcap: unsupported data link type %d\n",
 		    pcap_datalink(pcap_obj));
 	    status = 0;
 	    break;
     } /* switch (pcap_datalink(pcap_obj)) */
 
     if (0 == status)
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.4/version-gen.sh /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.5/version-gen.sh
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.4/version-gen.sh	2008-10-17 03:41:48.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/collectd/repos/collectd-4.4.5/version-gen.sh	2009-01-03 04:05:34.000000000 +0800
@@ -1,9 +1,9 @@
 #!/bin/sh
 
-DEFAULT_VERSION="4.4.4.git"
+DEFAULT_VERSION="4.4.5.git"
 
 VERSION="$( git describe 2> /dev/null | sed -e 's/^collectd-//' )"
 
 if test -z "$VERSION"; then
 	VERSION="$DEFAULT_VERSION"
 fi
