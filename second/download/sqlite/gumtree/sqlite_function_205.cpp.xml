<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/sqlite/gumtree/sqlite_function_205.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">vdbeSafety<pos:position pos:line="1" pos:column="22"/></name><parameter_list pos:line="1" pos:column="22">(<parameter><decl><type><name pos:line="1" pos:column="23">Vdbe<pos:position pos:line="1" pos:column="27"/></name> <modifier pos:line="1" pos:column="28">*<pos:position pos:line="1" pos:column="29"/></modifier></type><name pos:line="1" pos:column="29">p<pos:position pos:line="1" pos:column="30"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="31"/></parameter_list><block pos:line="1" pos:column="31">{
  <if pos:line="2" pos:column="3">if<condition pos:line="2" pos:column="5">( <expr><name><name pos:line="2" pos:column="7">p<pos:position pos:line="2" pos:column="8"/></name><operator pos:line="2" pos:column="8">-&gt;<pos:position pos:line="2" pos:column="13"/></operator><name pos:line="2" pos:column="10">db<pos:position pos:line="2" pos:column="12"/></name></name><operator pos:line="2" pos:column="12">==<pos:position pos:line="2" pos:column="14"/></operator><literal type="number" pos:line="2" pos:column="14">0<pos:position pos:line="2" pos:column="15"/></literal></expr> )<pos:position pos:line="2" pos:column="17"/></condition><then><block pos:line="2" pos:column="17">{
    <expr_stmt><expr><call><name pos:line="3" pos:column="5">sqlite3_log<pos:position pos:line="3" pos:column="16"/></name><argument_list pos:line="3" pos:column="16">(<argument><expr><name pos:line="3" pos:column="17">SQLITE_MISUSE<pos:position pos:line="3" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="3" pos:column="32">"API called with finalized prepared statement"<pos:position pos:line="3" pos:column="78"/></literal></expr></argument>)<pos:position pos:line="3" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="3" pos:column="80"/></expr_stmt>
    <return pos:line="4" pos:column="5">return <expr><literal type="number" pos:line="4" pos:column="12">1<pos:position pos:line="4" pos:column="13"/></literal></expr>;<pos:position pos:line="4" pos:column="14"/></return>
  }<pos:position pos:line="5" pos:column="4"/></block></then><else pos:line="5" pos:column="4">else<block pos:line="5" pos:column="8">{
    <return pos:line="6" pos:column="5">return <expr><literal type="number" pos:line="6" pos:column="12">0<pos:position pos:line="6" pos:column="13"/></literal></expr>;<pos:position pos:line="6" pos:column="14"/></return>
  }<pos:position pos:line="7" pos:column="4"/></block></else></if>
}<pos:position pos:line="8" pos:column="2"/></block></function></unit>
