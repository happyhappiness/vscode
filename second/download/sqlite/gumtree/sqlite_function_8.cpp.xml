<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/sqlite/gumtree/sqlite_function_8.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">fts3Appendf<pos:position pos:line="1" pos:column="24"/></name><parameter_list pos:line="1" pos:column="24">(
  <parameter><decl><type><name pos:line="2" pos:column="3">int<pos:position pos:line="2" pos:column="6"/></name> <modifier pos:line="2" pos:column="7">*<pos:position pos:line="2" pos:column="8"/></modifier></type><name pos:line="2" pos:column="8">pRc<pos:position pos:line="2" pos:column="11"/></name></decl></parameter>,                       <comment type="block" pos:line="2" pos:column="35">/* IN/OUT: Error code */</comment>
  <parameter><decl><type><name pos:line="3" pos:column="3">char<pos:position pos:line="3" pos:column="7"/></name> <modifier pos:line="3" pos:column="8">*<pos:position pos:line="3" pos:column="9"/></modifier><modifier pos:line="3" pos:column="9">*<pos:position pos:line="3" pos:column="10"/></modifier></type><name pos:line="3" pos:column="10">pz<pos:position pos:line="3" pos:column="12"/></name></decl></parameter>,                      <comment type="block" pos:line="3" pos:column="35">/* IN/OUT: Pointer to string buffer */</comment>
  <parameter><decl><type><specifier pos:line="4" pos:column="3">const<pos:position pos:line="4" pos:column="8"/></specifier> <name pos:line="4" pos:column="9">char<pos:position pos:line="4" pos:column="13"/></name> <modifier pos:line="4" pos:column="14">*<pos:position pos:line="4" pos:column="15"/></modifier></type><name pos:line="4" pos:column="15">zFormat<pos:position pos:line="4" pos:column="22"/></name></decl></parameter>,            <comment type="block" pos:line="4" pos:column="35">/* Printf format string to append */</comment>
  <parameter><decl><type><modifier pos:line="5" pos:column="3">...<pos:position pos:line="5" pos:column="6"/></modifier></type></decl></parameter>                             <comment type="block" pos:line="5" pos:column="35">/* Arguments for printf format string */</comment>
)<pos:position pos:line="6" pos:column="2"/></parameter_list><block pos:line="6" pos:column="2">{
  <if pos:line="7" pos:column="3">if<condition pos:line="7" pos:column="5">( <expr><operator pos:line="7" pos:column="7">*<pos:position pos:line="7" pos:column="8"/></operator><name pos:line="7" pos:column="8">pRc<pos:position pos:line="7" pos:column="11"/></name><operator pos:line="7" pos:column="11">==<pos:position pos:line="7" pos:column="13"/></operator><name pos:line="7" pos:column="13">SQLITE_OK<pos:position pos:line="7" pos:column="22"/></name></expr> )<pos:position pos:line="7" pos:column="24"/></condition><then><block pos:line="7" pos:column="24">{
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">va_list<pos:position pos:line="8" pos:column="12"/></name></type> <name pos:line="8" pos:column="13">ap<pos:position pos:line="8" pos:column="15"/></name></decl>;<pos:position pos:line="8" pos:column="16"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">char<pos:position pos:line="9" pos:column="9"/></name> <modifier pos:line="9" pos:column="10">*<pos:position pos:line="9" pos:column="11"/></modifier></type><name pos:line="9" pos:column="11">z<pos:position pos:line="9" pos:column="12"/></name></decl>;<pos:position pos:line="9" pos:column="13"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="10" pos:column="5">va_start<pos:position pos:line="10" pos:column="13"/></name><argument_list pos:line="10" pos:column="13">(<argument><expr><name pos:line="10" pos:column="14">ap<pos:position pos:line="10" pos:column="16"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="18">zFormat<pos:position pos:line="10" pos:column="25"/></name></expr></argument>)<pos:position pos:line="10" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="27"/></expr_stmt>
    <expr_stmt><expr><name pos:line="11" pos:column="5">z<pos:position pos:line="11" pos:column="6"/></name> <operator pos:line="11" pos:column="7">=<pos:position pos:line="11" pos:column="8"/></operator> <call><name pos:line="11" pos:column="9">sqlite3_vmprintf<pos:position pos:line="11" pos:column="25"/></name><argument_list pos:line="11" pos:column="25">(<argument><expr><name pos:line="11" pos:column="26">zFormat<pos:position pos:line="11" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="35">ap<pos:position pos:line="11" pos:column="37"/></name></expr></argument>)<pos:position pos:line="11" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="39"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="12" pos:column="5">va_end<pos:position pos:line="12" pos:column="11"/></name><argument_list pos:line="12" pos:column="11">(<argument><expr><name pos:line="12" pos:column="12">ap<pos:position pos:line="12" pos:column="14"/></name></expr></argument>)<pos:position pos:line="12" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="16"/></expr_stmt>
    <if pos:line="13" pos:column="5">if<condition pos:line="13" pos:column="7">( <expr><name pos:line="13" pos:column="9">z<pos:position pos:line="13" pos:column="10"/></name> <operator pos:line="13" pos:column="11">&amp;&amp;<pos:position pos:line="13" pos:column="21"/></operator> <operator pos:line="13" pos:column="14">*<pos:position pos:line="13" pos:column="15"/></operator><name pos:line="13" pos:column="15">pz<pos:position pos:line="13" pos:column="17"/></name></expr> )<pos:position pos:line="13" pos:column="19"/></condition><then><block pos:line="13" pos:column="19">{
      <decl_stmt><decl><type><name pos:line="14" pos:column="7">char<pos:position pos:line="14" pos:column="11"/></name> <modifier pos:line="14" pos:column="12">*<pos:position pos:line="14" pos:column="13"/></modifier></type><name pos:line="14" pos:column="13">z2<pos:position pos:line="14" pos:column="15"/></name> <init pos:line="14" pos:column="16">= <expr><call><name pos:line="14" pos:column="18">sqlite3_mprintf<pos:position pos:line="14" pos:column="33"/></name><argument_list pos:line="14" pos:column="33">(<argument><expr><literal type="string" pos:line="14" pos:column="34">"%s%s"<pos:position pos:line="14" pos:column="40"/></literal></expr></argument>, <argument><expr><operator pos:line="14" pos:column="42">*<pos:position pos:line="14" pos:column="43"/></operator><name pos:line="14" pos:column="43">pz<pos:position pos:line="14" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="47">z<pos:position pos:line="14" pos:column="48"/></name></expr></argument>)<pos:position pos:line="14" pos:column="49"/></argument_list></call></expr></init></decl>;<pos:position pos:line="14" pos:column="50"/></decl_stmt>
      <expr_stmt><expr><call><name pos:line="15" pos:column="7">sqlite3_free<pos:position pos:line="15" pos:column="19"/></name><argument_list pos:line="15" pos:column="19">(<argument><expr><name pos:line="15" pos:column="20">z<pos:position pos:line="15" pos:column="21"/></name></expr></argument>)<pos:position pos:line="15" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="23"/></expr_stmt>
      <expr_stmt><expr><name pos:line="16" pos:column="7">z<pos:position pos:line="16" pos:column="8"/></name> <operator pos:line="16" pos:column="9">=<pos:position pos:line="16" pos:column="10"/></operator> <name pos:line="16" pos:column="11">z2<pos:position pos:line="16" pos:column="13"/></name></expr>;<pos:position pos:line="16" pos:column="14"/></expr_stmt>
    }<pos:position pos:line="17" pos:column="6"/></block></then></if>
    <if pos:line="18" pos:column="5">if<condition pos:line="18" pos:column="7">( <expr><name pos:line="18" pos:column="9">z<pos:position pos:line="18" pos:column="10"/></name><operator pos:line="18" pos:column="10">==<pos:position pos:line="18" pos:column="12"/></operator><literal type="number" pos:line="18" pos:column="12">0<pos:position pos:line="18" pos:column="13"/></literal></expr> )<pos:position pos:line="18" pos:column="15"/></condition><then pos:line="18" pos:column="15"> <block type="pseudo"><expr_stmt><expr><operator pos:line="18" pos:column="16">*<pos:position pos:line="18" pos:column="17"/></operator><name pos:line="18" pos:column="17">pRc<pos:position pos:line="18" pos:column="20"/></name> <operator pos:line="18" pos:column="21">=<pos:position pos:line="18" pos:column="22"/></operator> <name pos:line="18" pos:column="23">SQLITE_NOMEM<pos:position pos:line="18" pos:column="35"/></name></expr>;<pos:position pos:line="18" pos:column="36"/></expr_stmt></block></then></if>
    <expr_stmt><expr><call><name pos:line="19" pos:column="5">sqlite3_free<pos:position pos:line="19" pos:column="17"/></name><argument_list pos:line="19" pos:column="17">(<argument><expr><operator pos:line="19" pos:column="18">*<pos:position pos:line="19" pos:column="19"/></operator><name pos:line="19" pos:column="19">pz<pos:position pos:line="19" pos:column="21"/></name></expr></argument>)<pos:position pos:line="19" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="23"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="20" pos:column="5">*<pos:position pos:line="20" pos:column="6"/></operator><name pos:line="20" pos:column="6">pz<pos:position pos:line="20" pos:column="8"/></name> <operator pos:line="20" pos:column="9">=<pos:position pos:line="20" pos:column="10"/></operator> <name pos:line="20" pos:column="11">z<pos:position pos:line="20" pos:column="12"/></name></expr>;<pos:position pos:line="20" pos:column="13"/></expr_stmt>
  }<pos:position pos:line="21" pos:column="4"/></block></then></if>
}<pos:position pos:line="22" pos:column="2"/></block></function></unit>
