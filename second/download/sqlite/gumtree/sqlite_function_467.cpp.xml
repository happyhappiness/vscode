<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/sqlite/gumtree/sqlite_function_467.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">sqlite3VdbeReset<pos:position pos:line="1" pos:column="21"/></name><parameter_list pos:line="1" pos:column="21">(<parameter><decl><type><name pos:line="1" pos:column="22">Vdbe<pos:position pos:line="1" pos:column="26"/></name> <modifier pos:line="1" pos:column="27">*<pos:position pos:line="1" pos:column="28"/></modifier></type><name pos:line="1" pos:column="28">p<pos:position pos:line="1" pos:column="29"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="30"/></parameter_list><block pos:line="1" pos:column="30">{
<cpp:if pos:line="2" pos:column="1">#<cpp:directive pos:line="2" pos:column="2">if<pos:position pos:line="2" pos:column="4"/></cpp:directive> <expr><call><name pos:line="2" pos:column="5">defined<pos:position pos:line="2" pos:column="12"/></name><argument_list pos:line="2" pos:column="12">(<argument><expr><name pos:line="2" pos:column="13">SQLITE_DEBUG<pos:position pos:line="2" pos:column="25"/></name></expr></argument>)<pos:position pos:line="2" pos:column="26"/></argument_list></call> <operator pos:line="2" pos:column="27">||<pos:position pos:line="2" pos:column="29"/></operator> <call><name pos:line="2" pos:column="30">defined<pos:position pos:line="2" pos:column="37"/></name><argument_list pos:line="2" pos:column="37">(<argument><expr><name pos:line="2" pos:column="38">VDBE_PROFILE<pos:position pos:line="2" pos:column="50"/></name></expr></argument>)<pos:position pos:line="2" pos:column="51"/></argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">int<pos:position pos:line="3" pos:column="6"/></name></type> <name pos:line="3" pos:column="7">i<pos:position pos:line="3" pos:column="8"/></name></decl>;<pos:position pos:line="3" pos:column="9"/></decl_stmt>
<cpp:endif pos:line="4" pos:column="1">#<cpp:directive pos:line="4" pos:column="2">endif<pos:position pos:line="4" pos:column="7"/></cpp:directive></cpp:endif>

  <decl_stmt><decl><type><name pos:line="6" pos:column="3">sqlite3<pos:position pos:line="6" pos:column="10"/></name> <modifier pos:line="6" pos:column="11">*<pos:position pos:line="6" pos:column="12"/></modifier></type><name pos:line="6" pos:column="12">db<pos:position pos:line="6" pos:column="14"/></name></decl>;<pos:position pos:line="6" pos:column="15"/></decl_stmt>
  <expr_stmt><expr><name pos:line="7" pos:column="3">db<pos:position pos:line="7" pos:column="5"/></name> <operator pos:line="7" pos:column="6">=<pos:position pos:line="7" pos:column="7"/></operator> <name><name pos:line="7" pos:column="8">p<pos:position pos:line="7" pos:column="9"/></name><operator pos:line="7" pos:column="9">-&gt;<pos:position pos:line="7" pos:column="14"/></operator><name pos:line="7" pos:column="11">db<pos:position pos:line="7" pos:column="13"/></name></name></expr>;<pos:position pos:line="7" pos:column="14"/></expr_stmt>

  <comment type="block" pos:line="9" pos:column="3">/* If the VM did not run to completion or if it encountered an
  ** error, then it might not have been halted properly.  So halt
  ** it now.
  */</comment>
  <expr_stmt><expr><call><name pos:line="13" pos:column="3">sqlite3VdbeHalt<pos:position pos:line="13" pos:column="18"/></name><argument_list pos:line="13" pos:column="18">(<argument><expr><name pos:line="13" pos:column="19">p<pos:position pos:line="13" pos:column="20"/></name></expr></argument>)<pos:position pos:line="13" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="22"/></expr_stmt>

  <comment type="block" pos:line="15" pos:column="3">/* If the VDBE has be run even partially, then transfer the error code
  ** and error message from the VDBE into the main database structure.  But
  ** if the VDBE has just been set to run but has not actually executed any
  ** instructions yet, leave the main database error information unchanged.
  */</comment>
  <if pos:line="20" pos:column="3">if<condition pos:line="20" pos:column="5">( <expr><name><name pos:line="20" pos:column="7">p<pos:position pos:line="20" pos:column="8"/></name><operator pos:line="20" pos:column="8">-&gt;<pos:position pos:line="20" pos:column="13"/></operator><name pos:line="20" pos:column="10">pc<pos:position pos:line="20" pos:column="12"/></name></name><operator pos:line="20" pos:column="12">&gt;=<pos:position pos:line="20" pos:column="17"/></operator><literal type="number" pos:line="20" pos:column="14">0<pos:position pos:line="20" pos:column="15"/></literal></expr> )<pos:position pos:line="20" pos:column="17"/></condition><then><block pos:line="20" pos:column="17">{
    <expr_stmt><expr><call><name pos:line="21" pos:column="5">vdbeInvokeSqllog<pos:position pos:line="21" pos:column="21"/></name><argument_list pos:line="21" pos:column="21">(<argument><expr><name pos:line="21" pos:column="22">p<pos:position pos:line="21" pos:column="23"/></name></expr></argument>)<pos:position pos:line="21" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="25"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="22" pos:column="5">sqlite3VdbeTransferError<pos:position pos:line="22" pos:column="29"/></name><argument_list pos:line="22" pos:column="29">(<argument><expr><name pos:line="22" pos:column="30">p<pos:position pos:line="22" pos:column="31"/></name></expr></argument>)<pos:position pos:line="22" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="33"/></expr_stmt>
    <if pos:line="23" pos:column="5">if<condition pos:line="23" pos:column="7">( <expr><name><name pos:line="23" pos:column="9">p<pos:position pos:line="23" pos:column="10"/></name><operator pos:line="23" pos:column="10">-&gt;<pos:position pos:line="23" pos:column="15"/></operator><name pos:line="23" pos:column="12">runOnlyOnce<pos:position pos:line="23" pos:column="23"/></name></name></expr> )<pos:position pos:line="23" pos:column="25"/></condition><then pos:line="23" pos:column="25"> <block type="pseudo"><expr_stmt><expr><name><name pos:line="23" pos:column="26">p<pos:position pos:line="23" pos:column="27"/></name><operator pos:line="23" pos:column="27">-&gt;<pos:position pos:line="23" pos:column="32"/></operator><name pos:line="23" pos:column="29">expired<pos:position pos:line="23" pos:column="36"/></name></name> <operator pos:line="23" pos:column="37">=<pos:position pos:line="23" pos:column="38"/></operator> <literal type="number" pos:line="23" pos:column="39">1<pos:position pos:line="23" pos:column="40"/></literal></expr>;<pos:position pos:line="23" pos:column="41"/></expr_stmt></block></then></if>
  }<pos:position pos:line="24" pos:column="4"/></block></then><elseif pos:line="24" pos:column="4">else <if pos:line="24" pos:column="9">if<condition pos:line="24" pos:column="11">( <expr><name><name pos:line="24" pos:column="13">p<pos:position pos:line="24" pos:column="14"/></name><operator pos:line="24" pos:column="14">-&gt;<pos:position pos:line="24" pos:column="19"/></operator><name pos:line="24" pos:column="16">rc<pos:position pos:line="24" pos:column="18"/></name></name> <operator pos:line="24" pos:column="19">&amp;&amp;<pos:position pos:line="24" pos:column="29"/></operator> <name><name pos:line="24" pos:column="22">p<pos:position pos:line="24" pos:column="23"/></name><operator pos:line="24" pos:column="23">-&gt;<pos:position pos:line="24" pos:column="28"/></operator><name pos:line="24" pos:column="25">expired<pos:position pos:line="24" pos:column="32"/></name></name></expr> )<pos:position pos:line="24" pos:column="34"/></condition><then><block pos:line="24" pos:column="34">{
    <comment type="block" pos:line="25" pos:column="5">/* The expired flag was set on the VDBE before the first call
    ** to sqlite3_step(). For consistency (since sqlite3_step() was
    ** called), set the database error in this case as well.
    */</comment>
    <expr_stmt><expr><call><name pos:line="29" pos:column="5">sqlite3ErrorWithMsg<pos:position pos:line="29" pos:column="24"/></name><argument_list pos:line="29" pos:column="24">(<argument><expr><name pos:line="29" pos:column="25">db<pos:position pos:line="29" pos:column="27"/></name></expr></argument>, <argument><expr><name><name pos:line="29" pos:column="29">p<pos:position pos:line="29" pos:column="30"/></name><operator pos:line="29" pos:column="30">-&gt;<pos:position pos:line="29" pos:column="35"/></operator><name pos:line="29" pos:column="32">rc<pos:position pos:line="29" pos:column="34"/></name></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name pos:line="29" pos:column="36">p<pos:position pos:line="29" pos:column="37"/></name><operator pos:line="29" pos:column="37">-&gt;<pos:position pos:line="29" pos:column="42"/></operator><name pos:line="29" pos:column="39">zErrMsg<pos:position pos:line="29" pos:column="46"/></name></name></expr> ?<pos:position pos:line="29" pos:column="48"/></condition><then pos:line="29" pos:column="48"> <expr><literal type="string" pos:line="29" pos:column="49">"%s"<pos:position pos:line="29" pos:column="53"/></literal></expr> <pos:position pos:line="29" pos:column="54"/></then><else pos:line="29" pos:column="54">: <expr><literal type="number" pos:line="29" pos:column="56">0<pos:position pos:line="29" pos:column="57"/></literal></expr></else></ternary></expr></argument>, <argument><expr><name><name pos:line="29" pos:column="59">p<pos:position pos:line="29" pos:column="60"/></name><operator pos:line="29" pos:column="60">-&gt;<pos:position pos:line="29" pos:column="65"/></operator><name pos:line="29" pos:column="62">zErrMsg<pos:position pos:line="29" pos:column="69"/></name></name></expr></argument>)<pos:position pos:line="29" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="71"/></expr_stmt>
  }<pos:position pos:line="30" pos:column="4"/></block></then></if></elseif></if>

  <comment type="block" pos:line="32" pos:column="3">/* Reset register contents and reclaim error message memory.
  */</comment>
<cpp:ifdef pos:line="34" pos:column="1">#<cpp:directive pos:line="34" pos:column="2">ifdef<pos:position pos:line="34" pos:column="7"/></cpp:directive> <name pos:line="34" pos:column="8">SQLITE_DEBUG<pos:position pos:line="34" pos:column="20"/></name></cpp:ifdef>
  <comment type="block" pos:line="35" pos:column="3">/* Execute assert() statements to ensure that the Vdbe.apCsr[] and 
  ** Vdbe.aMem[] arrays have already been cleaned up.  */</comment>
  <if pos:line="37" pos:column="3">if<condition pos:line="37" pos:column="5">( <expr><name><name pos:line="37" pos:column="7">p<pos:position pos:line="37" pos:column="8"/></name><operator pos:line="37" pos:column="8">-&gt;<pos:position pos:line="37" pos:column="13"/></operator><name pos:line="37" pos:column="10">apCsr<pos:position pos:line="37" pos:column="15"/></name></name></expr> )<pos:position pos:line="37" pos:column="17"/></condition><then pos:line="37" pos:column="17"> <block type="pseudo"><for pos:line="37" pos:column="18">for<control pos:line="37" pos:column="21">(<init><expr><name pos:line="37" pos:column="22">i<pos:position pos:line="37" pos:column="23"/></name><operator pos:line="37" pos:column="23">=<pos:position pos:line="37" pos:column="24"/></operator><literal type="number" pos:line="37" pos:column="24">0<pos:position pos:line="37" pos:column="25"/></literal></expr>;<pos:position pos:line="37" pos:column="26"/></init> <condition><expr><name pos:line="37" pos:column="27">i<pos:position pos:line="37" pos:column="28"/></name><operator pos:line="37" pos:column="28">&lt;<pos:position pos:line="37" pos:column="32"/></operator><name><name pos:line="37" pos:column="29">p<pos:position pos:line="37" pos:column="30"/></name><operator pos:line="37" pos:column="30">-&gt;<pos:position pos:line="37" pos:column="35"/></operator><name pos:line="37" pos:column="32">nCursor<pos:position pos:line="37" pos:column="39"/></name></name></expr>;<pos:position pos:line="37" pos:column="40"/></condition> <incr><expr><name pos:line="37" pos:column="41">i<pos:position pos:line="37" pos:column="42"/></name><operator pos:line="37" pos:column="42">++<pos:position pos:line="37" pos:column="44"/></operator></expr></incr>)<pos:position pos:line="37" pos:column="45"/></control> <block type="pseudo"><expr_stmt><expr><call><name pos:line="37" pos:column="46">assert<pos:position pos:line="37" pos:column="52"/></name><argument_list pos:line="37" pos:column="52">( <argument><expr><name><name pos:line="37" pos:column="54">p<pos:position pos:line="37" pos:column="55"/></name><operator pos:line="37" pos:column="55">-&gt;<pos:position pos:line="37" pos:column="60"/></operator><name pos:line="37" pos:column="57">apCsr<pos:position pos:line="37" pos:column="62"/></name><index pos:line="37" pos:column="62">[<expr><name pos:line="37" pos:column="63">i<pos:position pos:line="37" pos:column="64"/></name></expr>]<pos:position pos:line="37" pos:column="65"/></index></name><operator pos:line="37" pos:column="65">==<pos:position pos:line="37" pos:column="67"/></operator><literal type="number" pos:line="37" pos:column="67">0<pos:position pos:line="37" pos:column="68"/></literal></expr></argument> )<pos:position pos:line="37" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="71"/></expr_stmt></block></for></block></then></if>
  <if pos:line="38" pos:column="3">if<condition pos:line="38" pos:column="5">( <expr><name><name pos:line="38" pos:column="7">p<pos:position pos:line="38" pos:column="8"/></name><operator pos:line="38" pos:column="8">-&gt;<pos:position pos:line="38" pos:column="13"/></operator><name pos:line="38" pos:column="10">aMem<pos:position pos:line="38" pos:column="14"/></name></name></expr> )<pos:position pos:line="38" pos:column="16"/></condition><then><block pos:line="38" pos:column="16">{
    <for pos:line="39" pos:column="5">for<control pos:line="39" pos:column="8">(<init><expr><name pos:line="39" pos:column="9">i<pos:position pos:line="39" pos:column="10"/></name><operator pos:line="39" pos:column="10">=<pos:position pos:line="39" pos:column="11"/></operator><literal type="number" pos:line="39" pos:column="11">0<pos:position pos:line="39" pos:column="12"/></literal></expr>;<pos:position pos:line="39" pos:column="13"/></init> <condition><expr><name pos:line="39" pos:column="14">i<pos:position pos:line="39" pos:column="15"/></name><operator pos:line="39" pos:column="15">&lt;<pos:position pos:line="39" pos:column="19"/></operator><name><name pos:line="39" pos:column="16">p<pos:position pos:line="39" pos:column="17"/></name><operator pos:line="39" pos:column="17">-&gt;<pos:position pos:line="39" pos:column="22"/></operator><name pos:line="39" pos:column="19">nMem<pos:position pos:line="39" pos:column="23"/></name></name></expr>;<pos:position pos:line="39" pos:column="24"/></condition> <incr><expr><name pos:line="39" pos:column="25">i<pos:position pos:line="39" pos:column="26"/></name><operator pos:line="39" pos:column="26">++<pos:position pos:line="39" pos:column="28"/></operator></expr></incr>)<pos:position pos:line="39" pos:column="29"/></control> <block type="pseudo"><expr_stmt><expr><call><name pos:line="39" pos:column="30">assert<pos:position pos:line="39" pos:column="36"/></name><argument_list pos:line="39" pos:column="36">( <argument><expr><name><name pos:line="39" pos:column="38">p<pos:position pos:line="39" pos:column="39"/></name><operator pos:line="39" pos:column="39">-&gt;<pos:position pos:line="39" pos:column="44"/></operator><name pos:line="39" pos:column="41">aMem<pos:position pos:line="39" pos:column="45"/></name><index pos:line="39" pos:column="45">[<expr><name pos:line="39" pos:column="46">i<pos:position pos:line="39" pos:column="47"/></name></expr>]<pos:position pos:line="39" pos:column="48"/></index></name><operator pos:line="39" pos:column="48">.<pos:position pos:line="39" pos:column="49"/></operator><name pos:line="39" pos:column="49">flags<pos:position pos:line="39" pos:column="54"/></name><operator pos:line="39" pos:column="54">==<pos:position pos:line="39" pos:column="56"/></operator><name pos:line="39" pos:column="56">MEM_Undefined<pos:position pos:line="39" pos:column="69"/></name></expr></argument> )<pos:position pos:line="39" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="72"/></expr_stmt></block></for>
  }<pos:position pos:line="40" pos:column="4"/></block></then></if>
<cpp:endif pos:line="41" pos:column="1">#<cpp:directive pos:line="41" pos:column="2">endif<pos:position pos:line="41" pos:column="7"/></cpp:directive></cpp:endif>
  <expr_stmt><expr><call><name pos:line="42" pos:column="3">sqlite3DbFree<pos:position pos:line="42" pos:column="16"/></name><argument_list pos:line="42" pos:column="16">(<argument><expr><name pos:line="42" pos:column="17">db<pos:position pos:line="42" pos:column="19"/></name></expr></argument>, <argument><expr><name><name pos:line="42" pos:column="21">p<pos:position pos:line="42" pos:column="22"/></name><operator pos:line="42" pos:column="22">-&gt;<pos:position pos:line="42" pos:column="27"/></operator><name pos:line="42" pos:column="24">zErrMsg<pos:position pos:line="42" pos:column="31"/></name></name></expr></argument>)<pos:position pos:line="42" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="33"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="43" pos:column="3">p<pos:position pos:line="43" pos:column="4"/></name><operator pos:line="43" pos:column="4">-&gt;<pos:position pos:line="43" pos:column="9"/></operator><name pos:line="43" pos:column="6">zErrMsg<pos:position pos:line="43" pos:column="13"/></name></name> <operator pos:line="43" pos:column="14">=<pos:position pos:line="43" pos:column="15"/></operator> <literal type="number" pos:line="43" pos:column="16">0<pos:position pos:line="43" pos:column="17"/></literal></expr>;<pos:position pos:line="43" pos:column="18"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="44" pos:column="3">p<pos:position pos:line="44" pos:column="4"/></name><operator pos:line="44" pos:column="4">-&gt;<pos:position pos:line="44" pos:column="9"/></operator><name pos:line="44" pos:column="6">pResultSet<pos:position pos:line="44" pos:column="16"/></name></name> <operator pos:line="44" pos:column="17">=<pos:position pos:line="44" pos:column="18"/></operator> <literal type="number" pos:line="44" pos:column="19">0<pos:position pos:line="44" pos:column="20"/></literal></expr>;<pos:position pos:line="44" pos:column="21"/></expr_stmt>

  <comment type="block" pos:line="46" pos:column="3">/* Save profiling information from this VDBE run.
  */</comment>
<cpp:ifdef pos:line="48" pos:column="1">#<cpp:directive pos:line="48" pos:column="2">ifdef<pos:position pos:line="48" pos:column="7"/></cpp:directive> <name pos:line="48" pos:column="8">VDBE_PROFILE<pos:position pos:line="48" pos:column="20"/></name></cpp:ifdef>
  <block pos:line="49" pos:column="3">{
    <decl_stmt><decl><type><name pos:line="50" pos:column="5">FILE<pos:position pos:line="50" pos:column="9"/></name> <modifier pos:line="50" pos:column="10">*<pos:position pos:line="50" pos:column="11"/></modifier></type><name pos:line="50" pos:column="11">out<pos:position pos:line="50" pos:column="14"/></name> <init pos:line="50" pos:column="15">= <expr><call><name pos:line="50" pos:column="17">fopen<pos:position pos:line="50" pos:column="22"/></name><argument_list pos:line="50" pos:column="22">(<argument><expr><literal type="string" pos:line="50" pos:column="23">"vdbe_profile.out"<pos:position pos:line="50" pos:column="41"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="50" pos:column="43">"a"<pos:position pos:line="50" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="50" pos:column="47"/></argument_list></call></expr></init></decl>;<pos:position pos:line="50" pos:column="48"/></decl_stmt>
    <if pos:line="51" pos:column="5">if<condition pos:line="51" pos:column="7">( <expr><name pos:line="51" pos:column="9">out<pos:position pos:line="51" pos:column="12"/></name></expr> )<pos:position pos:line="51" pos:column="14"/></condition><then><block pos:line="51" pos:column="14">{
      <expr_stmt><expr><call><name pos:line="52" pos:column="7">fprintf<pos:position pos:line="52" pos:column="14"/></name><argument_list pos:line="52" pos:column="14">(<argument><expr><name pos:line="52" pos:column="15">out<pos:position pos:line="52" pos:column="18"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="52" pos:column="20">"---- "<pos:position pos:line="52" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="52" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="29"/></expr_stmt>
      <for pos:line="53" pos:column="7">for<control pos:line="53" pos:column="10">(<init><expr><name pos:line="53" pos:column="11">i<pos:position pos:line="53" pos:column="12"/></name><operator pos:line="53" pos:column="12">=<pos:position pos:line="53" pos:column="13"/></operator><literal type="number" pos:line="53" pos:column="13">0<pos:position pos:line="53" pos:column="14"/></literal></expr>;<pos:position pos:line="53" pos:column="15"/></init> <condition><expr><name pos:line="53" pos:column="16">i<pos:position pos:line="53" pos:column="17"/></name><operator pos:line="53" pos:column="17">&lt;<pos:position pos:line="53" pos:column="21"/></operator><name><name pos:line="53" pos:column="18">p<pos:position pos:line="53" pos:column="19"/></name><operator pos:line="53" pos:column="19">-&gt;<pos:position pos:line="53" pos:column="24"/></operator><name pos:line="53" pos:column="21">nOp<pos:position pos:line="53" pos:column="24"/></name></name></expr>;<pos:position pos:line="53" pos:column="25"/></condition> <incr><expr><name pos:line="53" pos:column="26">i<pos:position pos:line="53" pos:column="27"/></name><operator pos:line="53" pos:column="27">++<pos:position pos:line="53" pos:column="29"/></operator></expr></incr>)<pos:position pos:line="53" pos:column="30"/></control><block pos:line="53" pos:column="30">{
        <expr_stmt><expr><call><name pos:line="54" pos:column="9">fprintf<pos:position pos:line="54" pos:column="16"/></name><argument_list pos:line="54" pos:column="16">(<argument><expr><name pos:line="54" pos:column="17">out<pos:position pos:line="54" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="54" pos:column="22">"%02x"<pos:position pos:line="54" pos:column="28"/></literal></expr></argument>, <argument><expr><name><name pos:line="54" pos:column="30">p<pos:position pos:line="54" pos:column="31"/></name><operator pos:line="54" pos:column="31">-&gt;<pos:position pos:line="54" pos:column="36"/></operator><name pos:line="54" pos:column="33">aOp<pos:position pos:line="54" pos:column="36"/></name><index pos:line="54" pos:column="36">[<expr><name pos:line="54" pos:column="37">i<pos:position pos:line="54" pos:column="38"/></name></expr>]<pos:position pos:line="54" pos:column="39"/></index></name><operator pos:line="54" pos:column="39">.<pos:position pos:line="54" pos:column="40"/></operator><name pos:line="54" pos:column="40">opcode<pos:position pos:line="54" pos:column="46"/></name></expr></argument>)<pos:position pos:line="54" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="48"/></expr_stmt>
      }<pos:position pos:line="55" pos:column="8"/></block></for>
      <expr_stmt><expr><call><name pos:line="56" pos:column="7">fprintf<pos:position pos:line="56" pos:column="14"/></name><argument_list pos:line="56" pos:column="14">(<argument><expr><name pos:line="56" pos:column="15">out<pos:position pos:line="56" pos:column="18"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="56" pos:column="20">"\n"<pos:position pos:line="56" pos:column="24"/></literal></expr></argument>)<pos:position pos:line="56" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="26"/></expr_stmt>
      <if pos:line="57" pos:column="7">if<condition pos:line="57" pos:column="9">( <expr><name><name pos:line="57" pos:column="11">p<pos:position pos:line="57" pos:column="12"/></name><operator pos:line="57" pos:column="12">-&gt;<pos:position pos:line="57" pos:column="17"/></operator><name pos:line="57" pos:column="14">zSql<pos:position pos:line="57" pos:column="18"/></name></name></expr> )<pos:position pos:line="57" pos:column="20"/></condition><then><block pos:line="57" pos:column="20">{
        <decl_stmt><decl><type><name pos:line="58" pos:column="9">char<pos:position pos:line="58" pos:column="13"/></name></type> <name pos:line="58" pos:column="14">c<pos:position pos:line="58" pos:column="15"/></name></decl>, <decl><type ref="prev"/><name pos:line="58" pos:column="17">pc<pos:position pos:line="58" pos:column="19"/></name> <init pos:line="58" pos:column="20">= <expr><literal type="number" pos:line="58" pos:column="22">0<pos:position pos:line="58" pos:column="23"/></literal></expr></init></decl>;<pos:position pos:line="58" pos:column="24"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="59" pos:column="9">fprintf<pos:position pos:line="59" pos:column="16"/></name><argument_list pos:line="59" pos:column="16">(<argument><expr><name pos:line="59" pos:column="17">out<pos:position pos:line="59" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="59" pos:column="22">"-- "<pos:position pos:line="59" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="59" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="29"/></expr_stmt>
        <for pos:line="60" pos:column="9">for<control pos:line="60" pos:column="12">(<init><expr><name pos:line="60" pos:column="13">i<pos:position pos:line="60" pos:column="14"/></name><operator pos:line="60" pos:column="14">=<pos:position pos:line="60" pos:column="15"/></operator><literal type="number" pos:line="60" pos:column="15">0<pos:position pos:line="60" pos:column="16"/></literal></expr>;<pos:position pos:line="60" pos:column="17"/></init> <condition><expr><operator pos:line="60" pos:column="18">(<pos:position pos:line="60" pos:column="19"/></operator><name pos:line="60" pos:column="19">c<pos:position pos:line="60" pos:column="20"/></name> <operator pos:line="60" pos:column="21">=<pos:position pos:line="60" pos:column="22"/></operator> <name><name pos:line="60" pos:column="23">p<pos:position pos:line="60" pos:column="24"/></name><operator pos:line="60" pos:column="24">-&gt;<pos:position pos:line="60" pos:column="29"/></operator><name pos:line="60" pos:column="26">zSql<pos:position pos:line="60" pos:column="30"/></name><index pos:line="60" pos:column="30">[<expr><name pos:line="60" pos:column="31">i<pos:position pos:line="60" pos:column="32"/></name></expr>]<pos:position pos:line="60" pos:column="33"/></index></name><operator pos:line="60" pos:column="33">)<pos:position pos:line="60" pos:column="34"/></operator><operator pos:line="60" pos:column="34">!=<pos:position pos:line="60" pos:column="36"/></operator><literal type="number" pos:line="60" pos:column="36">0<pos:position pos:line="60" pos:column="37"/></literal></expr>;<pos:position pos:line="60" pos:column="38"/></condition> <incr><expr><name pos:line="60" pos:column="39">i<pos:position pos:line="60" pos:column="40"/></name><operator pos:line="60" pos:column="40">++<pos:position pos:line="60" pos:column="42"/></operator></expr></incr>)<pos:position pos:line="60" pos:column="43"/></control><block pos:line="60" pos:column="43">{
          <if pos:line="61" pos:column="11">if<condition pos:line="61" pos:column="13">( <expr><name pos:line="61" pos:column="15">pc<pos:position pos:line="61" pos:column="17"/></name><operator pos:line="61" pos:column="17">==<pos:position pos:line="61" pos:column="19"/></operator><literal type="char" pos:line="61" pos:column="19">'\n'<pos:position pos:line="61" pos:column="23"/></literal></expr> )<pos:position pos:line="61" pos:column="25"/></condition><then pos:line="61" pos:column="25"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="61" pos:column="26">fprintf<pos:position pos:line="61" pos:column="33"/></name><argument_list pos:line="61" pos:column="33">(<argument><expr><name pos:line="61" pos:column="34">out<pos:position pos:line="61" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="61" pos:column="39">"-- "<pos:position pos:line="61" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="61" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="46"/></expr_stmt></block></then></if>
          <expr_stmt><expr><call><name pos:line="62" pos:column="11">putc<pos:position pos:line="62" pos:column="15"/></name><argument_list pos:line="62" pos:column="15">(<argument><expr><name pos:line="62" pos:column="16">c<pos:position pos:line="62" pos:column="17"/></name></expr></argument>, <argument><expr><name pos:line="62" pos:column="19">out<pos:position pos:line="62" pos:column="22"/></name></expr></argument>)<pos:position pos:line="62" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="24"/></expr_stmt>
          <expr_stmt><expr><name pos:line="63" pos:column="11">pc<pos:position pos:line="63" pos:column="13"/></name> <operator pos:line="63" pos:column="14">=<pos:position pos:line="63" pos:column="15"/></operator> <name pos:line="63" pos:column="16">c<pos:position pos:line="63" pos:column="17"/></name></expr>;<pos:position pos:line="63" pos:column="18"/></expr_stmt>
        }<pos:position pos:line="64" pos:column="10"/></block></for>
        <if pos:line="65" pos:column="9">if<condition pos:line="65" pos:column="11">( <expr><name pos:line="65" pos:column="13">pc<pos:position pos:line="65" pos:column="15"/></name><operator pos:line="65" pos:column="15">!=<pos:position pos:line="65" pos:column="17"/></operator><literal type="char" pos:line="65" pos:column="17">'\n'<pos:position pos:line="65" pos:column="21"/></literal></expr> )<pos:position pos:line="65" pos:column="23"/></condition><then pos:line="65" pos:column="23"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="65" pos:column="24">fprintf<pos:position pos:line="65" pos:column="31"/></name><argument_list pos:line="65" pos:column="31">(<argument><expr><name pos:line="65" pos:column="32">out<pos:position pos:line="65" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="65" pos:column="37">"\n"<pos:position pos:line="65" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="65" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="43"/></expr_stmt></block></then></if>
      }<pos:position pos:line="66" pos:column="8"/></block></then></if>
      <for pos:line="67" pos:column="7">for<control pos:line="67" pos:column="10">(<init><expr><name pos:line="67" pos:column="11">i<pos:position pos:line="67" pos:column="12"/></name><operator pos:line="67" pos:column="12">=<pos:position pos:line="67" pos:column="13"/></operator><literal type="number" pos:line="67" pos:column="13">0<pos:position pos:line="67" pos:column="14"/></literal></expr>;<pos:position pos:line="67" pos:column="15"/></init> <condition><expr><name pos:line="67" pos:column="16">i<pos:position pos:line="67" pos:column="17"/></name><operator pos:line="67" pos:column="17">&lt;<pos:position pos:line="67" pos:column="21"/></operator><name><name pos:line="67" pos:column="18">p<pos:position pos:line="67" pos:column="19"/></name><operator pos:line="67" pos:column="19">-&gt;<pos:position pos:line="67" pos:column="24"/></operator><name pos:line="67" pos:column="21">nOp<pos:position pos:line="67" pos:column="24"/></name></name></expr>;<pos:position pos:line="67" pos:column="25"/></condition> <incr><expr><name pos:line="67" pos:column="26">i<pos:position pos:line="67" pos:column="27"/></name><operator pos:line="67" pos:column="27">++<pos:position pos:line="67" pos:column="29"/></operator></expr></incr>)<pos:position pos:line="67" pos:column="30"/></control><block pos:line="67" pos:column="30">{
        <decl_stmt><decl><type><name pos:line="68" pos:column="9">char<pos:position pos:line="68" pos:column="13"/></name></type> <name><name pos:line="68" pos:column="14">zHdr<pos:position pos:line="68" pos:column="18"/></name><index pos:line="68" pos:column="18">[<expr><literal type="number" pos:line="68" pos:column="19">100<pos:position pos:line="68" pos:column="22"/></literal></expr>]<pos:position pos:line="68" pos:column="23"/></index></name></decl>;<pos:position pos:line="68" pos:column="24"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="69" pos:column="9">sqlite3_snprintf<pos:position pos:line="69" pos:column="25"/></name><argument_list pos:line="69" pos:column="25">(<argument><expr><sizeof pos:line="69" pos:column="26">sizeof<argument_list pos:line="69" pos:column="32">(<argument><expr><name pos:line="69" pos:column="33">zHdr<pos:position pos:line="69" pos:column="37"/></name></expr></argument>)<pos:position pos:line="69" pos:column="38"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="69" pos:column="40">zHdr<pos:position pos:line="69" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="69" pos:column="46">"%6u %12llu %8llu "<pos:position pos:line="69" pos:column="65"/></literal></expr></argument>,
           <argument><expr><name><name pos:line="70" pos:column="12">p<pos:position pos:line="70" pos:column="13"/></name><operator pos:line="70" pos:column="13">-&gt;<pos:position pos:line="70" pos:column="18"/></operator><name pos:line="70" pos:column="15">aOp<pos:position pos:line="70" pos:column="18"/></name><index pos:line="70" pos:column="18">[<expr><name pos:line="70" pos:column="19">i<pos:position pos:line="70" pos:column="20"/></name></expr>]<pos:position pos:line="70" pos:column="21"/></index></name><operator pos:line="70" pos:column="21">.<pos:position pos:line="70" pos:column="22"/></operator><name pos:line="70" pos:column="22">cnt<pos:position pos:line="70" pos:column="25"/></name></expr></argument>,
           <argument><expr><name><name pos:line="71" pos:column="12">p<pos:position pos:line="71" pos:column="13"/></name><operator pos:line="71" pos:column="13">-&gt;<pos:position pos:line="71" pos:column="18"/></operator><name pos:line="71" pos:column="15">aOp<pos:position pos:line="71" pos:column="18"/></name><index pos:line="71" pos:column="18">[<expr><name pos:line="71" pos:column="19">i<pos:position pos:line="71" pos:column="20"/></name></expr>]<pos:position pos:line="71" pos:column="21"/></index></name><operator pos:line="71" pos:column="21">.<pos:position pos:line="71" pos:column="22"/></operator><name pos:line="71" pos:column="22">cycles<pos:position pos:line="71" pos:column="28"/></name></expr></argument>,
           <argument><expr><ternary><condition><expr><name><name pos:line="72" pos:column="12">p<pos:position pos:line="72" pos:column="13"/></name><operator pos:line="72" pos:column="13">-&gt;<pos:position pos:line="72" pos:column="18"/></operator><name pos:line="72" pos:column="15">aOp<pos:position pos:line="72" pos:column="18"/></name><index pos:line="72" pos:column="18">[<expr><name pos:line="72" pos:column="19">i<pos:position pos:line="72" pos:column="20"/></name></expr>]<pos:position pos:line="72" pos:column="21"/></index></name><operator pos:line="72" pos:column="21">.<pos:position pos:line="72" pos:column="22"/></operator><name pos:line="72" pos:column="22">cnt<pos:position pos:line="72" pos:column="25"/></name><operator pos:line="72" pos:column="25">&gt;<pos:position pos:line="72" pos:column="29"/></operator><literal type="number" pos:line="72" pos:column="26">0<pos:position pos:line="72" pos:column="27"/></literal></expr> ?<pos:position pos:line="72" pos:column="29"/></condition><then pos:line="72" pos:column="29"> <expr><name><name pos:line="72" pos:column="30">p<pos:position pos:line="72" pos:column="31"/></name><operator pos:line="72" pos:column="31">-&gt;<pos:position pos:line="72" pos:column="36"/></operator><name pos:line="72" pos:column="33">aOp<pos:position pos:line="72" pos:column="36"/></name><index pos:line="72" pos:column="36">[<expr><name pos:line="72" pos:column="37">i<pos:position pos:line="72" pos:column="38"/></name></expr>]<pos:position pos:line="72" pos:column="39"/></index></name><operator pos:line="72" pos:column="39">.<pos:position pos:line="72" pos:column="40"/></operator><name pos:line="72" pos:column="40">cycles<pos:position pos:line="72" pos:column="46"/></name><operator pos:line="72" pos:column="46">/<pos:position pos:line="72" pos:column="47"/></operator><name><name pos:line="72" pos:column="47">p<pos:position pos:line="72" pos:column="48"/></name><operator pos:line="72" pos:column="48">-&gt;<pos:position pos:line="72" pos:column="53"/></operator><name pos:line="72" pos:column="50">aOp<pos:position pos:line="72" pos:column="53"/></name><index pos:line="72" pos:column="53">[<expr><name pos:line="72" pos:column="54">i<pos:position pos:line="72" pos:column="55"/></name></expr>]<pos:position pos:line="72" pos:column="56"/></index></name><operator pos:line="72" pos:column="56">.<pos:position pos:line="72" pos:column="57"/></operator><name pos:line="72" pos:column="57">cnt<pos:position pos:line="72" pos:column="60"/></name></expr> <pos:position pos:line="72" pos:column="61"/></then><else pos:line="72" pos:column="61">: <expr><literal type="number" pos:line="72" pos:column="63">0<pos:position pos:line="72" pos:column="64"/></literal></expr></else></ternary></expr></argument>
        )<pos:position pos:line="73" pos:column="10"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="11"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="74" pos:column="9">fprintf<pos:position pos:line="74" pos:column="16"/></name><argument_list pos:line="74" pos:column="16">(<argument><expr><name pos:line="74" pos:column="17">out<pos:position pos:line="74" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="74" pos:column="22">"%s"<pos:position pos:line="74" pos:column="26"/></literal></expr></argument>, <argument><expr><name pos:line="74" pos:column="28">zHdr<pos:position pos:line="74" pos:column="32"/></name></expr></argument>)<pos:position pos:line="74" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="34"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="75" pos:column="9">sqlite3VdbePrintOp<pos:position pos:line="75" pos:column="27"/></name><argument_list pos:line="75" pos:column="27">(<argument><expr><name pos:line="75" pos:column="28">out<pos:position pos:line="75" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="75" pos:column="33">i<pos:position pos:line="75" pos:column="34"/></name></expr></argument>, <argument><expr><operator pos:line="75" pos:column="36">&amp;<pos:position pos:line="75" pos:column="41"/></operator><name><name pos:line="75" pos:column="37">p<pos:position pos:line="75" pos:column="38"/></name><operator pos:line="75" pos:column="38">-&gt;<pos:position pos:line="75" pos:column="43"/></operator><name pos:line="75" pos:column="40">aOp<pos:position pos:line="75" pos:column="43"/></name><index pos:line="75" pos:column="43">[<expr><name pos:line="75" pos:column="44">i<pos:position pos:line="75" pos:column="45"/></name></expr>]<pos:position pos:line="75" pos:column="46"/></index></name></expr></argument>)<pos:position pos:line="75" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="48"/></expr_stmt>
      }<pos:position pos:line="76" pos:column="8"/></block></for>
      <expr_stmt><expr><call><name pos:line="77" pos:column="7">fclose<pos:position pos:line="77" pos:column="13"/></name><argument_list pos:line="77" pos:column="13">(<argument><expr><name pos:line="77" pos:column="14">out<pos:position pos:line="77" pos:column="17"/></name></expr></argument>)<pos:position pos:line="77" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="19"/></expr_stmt>
    }<pos:position pos:line="78" pos:column="6"/></block></then></if>
  }<pos:position pos:line="79" pos:column="4"/></block>
<cpp:endif pos:line="80" pos:column="1">#<cpp:directive pos:line="80" pos:column="2">endif<pos:position pos:line="80" pos:column="7"/></cpp:directive></cpp:endif>
  <expr_stmt><expr><name><name pos:line="81" pos:column="3">p<pos:position pos:line="81" pos:column="4"/></name><operator pos:line="81" pos:column="4">-&gt;<pos:position pos:line="81" pos:column="9"/></operator><name pos:line="81" pos:column="6">magic<pos:position pos:line="81" pos:column="11"/></name></name> <operator pos:line="81" pos:column="12">=<pos:position pos:line="81" pos:column="13"/></operator> <name pos:line="81" pos:column="14">VDBE_MAGIC_RESET<pos:position pos:line="81" pos:column="30"/></name></expr>;<pos:position pos:line="81" pos:column="31"/></expr_stmt>
  <return pos:line="82" pos:column="3">return <expr><name><name pos:line="82" pos:column="10">p<pos:position pos:line="82" pos:column="11"/></name><operator pos:line="82" pos:column="11">-&gt;<pos:position pos:line="82" pos:column="16"/></operator><name pos:line="82" pos:column="13">rc<pos:position pos:line="82" pos:column="15"/></name></name> <operator pos:line="82" pos:column="16">&amp;<pos:position pos:line="82" pos:column="21"/></operator> <name><name pos:line="82" pos:column="18">db<pos:position pos:line="82" pos:column="20"/></name><operator pos:line="82" pos:column="20">-&gt;<pos:position pos:line="82" pos:column="25"/></operator><name pos:line="82" pos:column="22">errMask<pos:position pos:line="82" pos:column="29"/></name></name></expr>;<pos:position pos:line="82" pos:column="30"/></return>
}<pos:position pos:line="83" pos:column="2"/></block></function></unit>
