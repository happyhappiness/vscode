<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/sqlite/gumtree/sqlite_function_486.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">sqlite3VdbeExec<pos:position pos:line="1" pos:column="20"/></name><parameter_list pos:line="1" pos:column="20">(
  <parameter><decl><type><name pos:line="2" pos:column="3">Vdbe<pos:position pos:line="2" pos:column="7"/></name> <modifier pos:line="2" pos:column="8">*<pos:position pos:line="2" pos:column="9"/></modifier></type><name pos:line="2" pos:column="9">p<pos:position pos:line="2" pos:column="10"/></name></decl></parameter>                    <comment type="block" pos:line="2" pos:column="30">/* The VDBE */</comment>
)<pos:position pos:line="3" pos:column="2"/></parameter_list><block pos:line="3" pos:column="2">{
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">int<pos:position pos:line="4" pos:column="6"/></name></type> <name pos:line="4" pos:column="7">pc<pos:position pos:line="4" pos:column="9"/></name></decl>;<pos:position pos:line="4" pos:column="10"/></decl_stmt>                    <comment type="block" pos:line="4" pos:column="30">/* The program counter */</comment>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">Op<pos:position pos:line="5" pos:column="5"/></name> <modifier pos:line="5" pos:column="6">*<pos:position pos:line="5" pos:column="7"/></modifier></type><name pos:line="5" pos:column="7">pOp<pos:position pos:line="5" pos:column="10"/></name></decl>;<pos:position pos:line="5" pos:column="11"/></decl_stmt>                   <comment type="block" pos:line="5" pos:column="30">/* Current operation */</comment>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">int<pos:position pos:line="6" pos:column="6"/></name></type> <name pos:line="6" pos:column="7">rc<pos:position pos:line="6" pos:column="9"/></name> <init pos:line="6" pos:column="10">= <expr><name pos:line="6" pos:column="12">SQLITE_OK<pos:position pos:line="6" pos:column="21"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="22"/></decl_stmt>        <comment type="block" pos:line="6" pos:column="30">/* Value to return */</comment>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">sqlite3<pos:position pos:line="7" pos:column="10"/></name> <modifier pos:line="7" pos:column="11">*<pos:position pos:line="7" pos:column="12"/></modifier></type><name pos:line="7" pos:column="12">db<pos:position pos:line="7" pos:column="14"/></name> <init pos:line="7" pos:column="15">= <expr><name><name pos:line="7" pos:column="17">p<pos:position pos:line="7" pos:column="18"/></name><operator pos:line="7" pos:column="18">-&gt;<pos:position pos:line="7" pos:column="23"/></operator><name pos:line="7" pos:column="20">db<pos:position pos:line="7" pos:column="22"/></name></name></expr></init></decl>;<pos:position pos:line="7" pos:column="23"/></decl_stmt>       <comment type="block" pos:line="7" pos:column="30">/* The database */</comment>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">u8<pos:position pos:line="8" pos:column="5"/></name></type> <name pos:line="8" pos:column="6">encoding<pos:position pos:line="8" pos:column="14"/></name> <init pos:line="8" pos:column="15">= <expr><call><name pos:line="8" pos:column="17">ENC<pos:position pos:line="8" pos:column="20"/></name><argument_list pos:line="8" pos:column="20">(<argument><expr><name pos:line="8" pos:column="21">db<pos:position pos:line="8" pos:column="23"/></name></expr></argument>)<pos:position pos:line="8" pos:column="24"/></argument_list></call></expr></init></decl>;<pos:position pos:line="8" pos:column="25"/></decl_stmt>     <comment type="block" pos:line="8" pos:column="30">/* The database encoding */</comment>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">Mem<pos:position pos:line="9" pos:column="6"/></name> <modifier pos:line="9" pos:column="7">*<pos:position pos:line="9" pos:column="8"/></modifier></type><name pos:line="9" pos:column="8">pIn1<pos:position pos:line="9" pos:column="12"/></name> <init pos:line="9" pos:column="13">= <expr><literal type="number" pos:line="9" pos:column="15">0<pos:position pos:line="9" pos:column="16"/></literal></expr></init></decl>;<pos:position pos:line="9" pos:column="17"/></decl_stmt>             <comment type="block" pos:line="9" pos:column="30">/* 1st input operand */</comment>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">Mem<pos:position pos:line="10" pos:column="6"/></name> <modifier pos:line="10" pos:column="7">*<pos:position pos:line="10" pos:column="8"/></modifier></type><name pos:line="10" pos:column="8">pIn2<pos:position pos:line="10" pos:column="12"/></name> <init pos:line="10" pos:column="13">= <expr><literal type="number" pos:line="10" pos:column="15">0<pos:position pos:line="10" pos:column="16"/></literal></expr></init></decl>;<pos:position pos:line="10" pos:column="17"/></decl_stmt>             <comment type="block" pos:line="10" pos:column="30">/* 2nd input operand */</comment>
  <decl_stmt><decl><type><name pos:line="11" pos:column="3">Mem<pos:position pos:line="11" pos:column="6"/></name> <modifier pos:line="11" pos:column="7">*<pos:position pos:line="11" pos:column="8"/></modifier></type><name pos:line="11" pos:column="8">pIn3<pos:position pos:line="11" pos:column="12"/></name> <init pos:line="11" pos:column="13">= <expr><literal type="number" pos:line="11" pos:column="15">0<pos:position pos:line="11" pos:column="16"/></literal></expr></init></decl>;<pos:position pos:line="11" pos:column="17"/></decl_stmt>             <comment type="block" pos:line="11" pos:column="30">/* 3rd input operand */</comment>
  <decl_stmt><decl><type><name pos:line="12" pos:column="3">Mem<pos:position pos:line="12" pos:column="6"/></name> <modifier pos:line="12" pos:column="7">*<pos:position pos:line="12" pos:column="8"/></modifier></type><name pos:line="12" pos:column="8">pOut<pos:position pos:line="12" pos:column="12"/></name> <init pos:line="12" pos:column="13">= <expr><literal type="number" pos:line="12" pos:column="15">0<pos:position pos:line="12" pos:column="16"/></literal></expr></init></decl>;<pos:position pos:line="12" pos:column="17"/></decl_stmt>             <comment type="block" pos:line="12" pos:column="30">/* Output operand */</comment>
  <decl_stmt><decl><type><name pos:line="13" pos:column="3">u8<pos:position pos:line="13" pos:column="5"/></name></type> <name pos:line="13" pos:column="6">opProperty<pos:position pos:line="13" pos:column="16"/></name></decl>;<pos:position pos:line="13" pos:column="17"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="14" pos:column="3">int<pos:position pos:line="14" pos:column="6"/></name></type> <name pos:line="14" pos:column="7">iCompare<pos:position pos:line="14" pos:column="15"/></name> <init pos:line="14" pos:column="16">= <expr><literal type="number" pos:line="14" pos:column="18">0<pos:position pos:line="14" pos:column="19"/></literal></expr></init></decl>;<pos:position pos:line="14" pos:column="20"/></decl_stmt>          <comment type="block" pos:line="14" pos:column="30">/* Result of last OP_Compare operation */</comment>
  <decl_stmt><decl><type><name pos:line="15" pos:column="3">int<pos:position pos:line="15" pos:column="6"/></name> <modifier pos:line="15" pos:column="7">*<pos:position pos:line="15" pos:column="8"/></modifier></type><name pos:line="15" pos:column="8">aPermute<pos:position pos:line="15" pos:column="16"/></name> <init pos:line="15" pos:column="17">= <expr><literal type="number" pos:line="15" pos:column="19">0<pos:position pos:line="15" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="15" pos:column="21"/></decl_stmt>         <comment type="block" pos:line="15" pos:column="30">/* Permutation of columns for OP_Compare */</comment>
<cpp:ifdef pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">ifdef<pos:position pos:line="16" pos:column="7"/></cpp:directive> <name pos:line="16" pos:column="8">VDBE_PROFILE<pos:position pos:line="16" pos:column="20"/></name></cpp:ifdef>
  <decl_stmt><decl><type><name pos:line="17" pos:column="3">u64<pos:position pos:line="17" pos:column="6"/></name></type> <name pos:line="17" pos:column="7">start<pos:position pos:line="17" pos:column="12"/></name></decl>;<pos:position pos:line="17" pos:column="13"/></decl_stmt>                 <comment type="block" pos:line="17" pos:column="30">/* CPU clock count at start of opcode */</comment>
  <decl_stmt><decl><type><name pos:line="18" pos:column="3">int<pos:position pos:line="18" pos:column="6"/></name></type> <name pos:line="18" pos:column="7">origPc<pos:position pos:line="18" pos:column="13"/></name></decl>;<pos:position pos:line="18" pos:column="14"/></decl_stmt>                <comment type="block" pos:line="18" pos:column="30">/* Program counter at start of opcode */</comment>
<cpp:endif pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">endif<pos:position pos:line="19" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:ifndef pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">ifndef<pos:position pos:line="20" pos:column="8"/></cpp:directive> <name pos:line="20" pos:column="9">SQLITE_OMIT_PROGRESS_CALLBACK<pos:position pos:line="20" pos:column="38"/></name></cpp:ifndef>
  <decl_stmt><decl><type><name pos:line="21" pos:column="3">int<pos:position pos:line="21" pos:column="6"/></name></type> <name pos:line="21" pos:column="7">nProgressOps<pos:position pos:line="21" pos:column="19"/></name> <init pos:line="21" pos:column="20">= <expr><literal type="number" pos:line="21" pos:column="22">0<pos:position pos:line="21" pos:column="23"/></literal></expr></init></decl>;<pos:position pos:line="21" pos:column="24"/></decl_stmt>      <comment type="block" pos:line="21" pos:column="30">/* Opcodes executed since progress callback. */</comment>
<cpp:endif pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">endif<pos:position pos:line="22" pos:column="7"/></cpp:directive></cpp:endif>
  <comment type="block" format="doxygen" pos:line="23" pos:column="3">/*** INSERT STACK UNION HERE ***/</comment>

  <expr_stmt><expr><call><name pos:line="25" pos:column="3">assert<pos:position pos:line="25" pos:column="9"/></name><argument_list pos:line="25" pos:column="9">( <argument><expr><name><name pos:line="25" pos:column="11">p<pos:position pos:line="25" pos:column="12"/></name><operator pos:line="25" pos:column="12">-&gt;<pos:position pos:line="25" pos:column="17"/></operator><name pos:line="25" pos:column="14">magic<pos:position pos:line="25" pos:column="19"/></name></name><operator pos:line="25" pos:column="19">==<pos:position pos:line="25" pos:column="21"/></operator><name pos:line="25" pos:column="21">VDBE_MAGIC_RUN<pos:position pos:line="25" pos:column="35"/></name></expr></argument> )<pos:position pos:line="25" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="38"/></expr_stmt>  <comment type="block" pos:line="25" pos:column="40">/* sqlite3_step() verifies this */</comment>
  <expr_stmt><expr><call><name pos:line="26" pos:column="3">assert<pos:position pos:line="26" pos:column="9"/></name><argument_list pos:line="26" pos:column="9">( <argument><expr><name><name pos:line="26" pos:column="11">db<pos:position pos:line="26" pos:column="13"/></name><operator pos:line="26" pos:column="13">-&gt;<pos:position pos:line="26" pos:column="18"/></operator><name pos:line="26" pos:column="15">magic<pos:position pos:line="26" pos:column="20"/></name></name><operator pos:line="26" pos:column="20">==<pos:position pos:line="26" pos:column="22"/></operator><name pos:line="26" pos:column="22">SQLITE_MAGIC_BUSY<pos:position pos:line="26" pos:column="39"/></name></expr></argument> )<pos:position pos:line="26" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="42"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="27" pos:column="3">sqlite3VdbeMutexArrayEnter<pos:position pos:line="27" pos:column="29"/></name><argument_list pos:line="27" pos:column="29">(<argument><expr><name pos:line="27" pos:column="30">p<pos:position pos:line="27" pos:column="31"/></name></expr></argument>)<pos:position pos:line="27" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="33"/></expr_stmt>
  <if pos:line="28" pos:column="3">if<condition pos:line="28" pos:column="5">( <expr><name><name pos:line="28" pos:column="7">p<pos:position pos:line="28" pos:column="8"/></name><operator pos:line="28" pos:column="8">-&gt;<pos:position pos:line="28" pos:column="13"/></operator><name pos:line="28" pos:column="10">rc<pos:position pos:line="28" pos:column="12"/></name></name><operator pos:line="28" pos:column="12">==<pos:position pos:line="28" pos:column="14"/></operator><name pos:line="28" pos:column="14">SQLITE_NOMEM<pos:position pos:line="28" pos:column="26"/></name></expr> )<pos:position pos:line="28" pos:column="28"/></condition><then><block pos:line="28" pos:column="28">{
    <comment type="block" pos:line="29" pos:column="5">/* This happens if a malloc() inside a call to sqlite3_column_text() or
    ** sqlite3_column_text16() failed.  */</comment>
    <goto pos:line="31" pos:column="5">goto <name pos:line="31" pos:column="10">no_mem<pos:position pos:line="31" pos:column="16"/></name>;<pos:position pos:line="31" pos:column="17"/></goto>
  }<pos:position pos:line="32" pos:column="4"/></block></then></if>
  <expr_stmt><expr><call><name pos:line="33" pos:column="3">assert<pos:position pos:line="33" pos:column="9"/></name><argument_list pos:line="33" pos:column="9">( <argument><expr><name><name pos:line="33" pos:column="11">p<pos:position pos:line="33" pos:column="12"/></name><operator pos:line="33" pos:column="12">-&gt;<pos:position pos:line="33" pos:column="17"/></operator><name pos:line="33" pos:column="14">rc<pos:position pos:line="33" pos:column="16"/></name></name><operator pos:line="33" pos:column="16">==<pos:position pos:line="33" pos:column="18"/></operator><name pos:line="33" pos:column="18">SQLITE_OK<pos:position pos:line="33" pos:column="27"/></name> <operator pos:line="33" pos:column="28">||<pos:position pos:line="33" pos:column="30"/></operator> <name><name pos:line="33" pos:column="31">p<pos:position pos:line="33" pos:column="32"/></name><operator pos:line="33" pos:column="32">-&gt;<pos:position pos:line="33" pos:column="37"/></operator><name pos:line="33" pos:column="34">rc<pos:position pos:line="33" pos:column="36"/></name></name><operator pos:line="33" pos:column="36">==<pos:position pos:line="33" pos:column="38"/></operator><name pos:line="33" pos:column="38">SQLITE_BUSY<pos:position pos:line="33" pos:column="49"/></name></expr></argument> )<pos:position pos:line="33" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="52"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="34" pos:column="3">p<pos:position pos:line="34" pos:column="4"/></name><operator pos:line="34" pos:column="4">-&gt;<pos:position pos:line="34" pos:column="9"/></operator><name pos:line="34" pos:column="6">rc<pos:position pos:line="34" pos:column="8"/></name></name> <operator pos:line="34" pos:column="9">=<pos:position pos:line="34" pos:column="10"/></operator> <name pos:line="34" pos:column="11">SQLITE_OK<pos:position pos:line="34" pos:column="20"/></name></expr>;<pos:position pos:line="34" pos:column="21"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="35" pos:column="3">assert<pos:position pos:line="35" pos:column="9"/></name><argument_list pos:line="35" pos:column="9">( <argument><expr><name><name pos:line="35" pos:column="11">p<pos:position pos:line="35" pos:column="12"/></name><operator pos:line="35" pos:column="12">-&gt;<pos:position pos:line="35" pos:column="17"/></operator><name pos:line="35" pos:column="14">explain<pos:position pos:line="35" pos:column="21"/></name></name><operator pos:line="35" pos:column="21">==<pos:position pos:line="35" pos:column="23"/></operator><literal type="number" pos:line="35" pos:column="23">0<pos:position pos:line="35" pos:column="24"/></literal></expr></argument> )<pos:position pos:line="35" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="27"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="36" pos:column="3">p<pos:position pos:line="36" pos:column="4"/></name><operator pos:line="36" pos:column="4">-&gt;<pos:position pos:line="36" pos:column="9"/></operator><name pos:line="36" pos:column="6">pResultSet<pos:position pos:line="36" pos:column="16"/></name></name> <operator pos:line="36" pos:column="17">=<pos:position pos:line="36" pos:column="18"/></operator> <literal type="number" pos:line="36" pos:column="19">0<pos:position pos:line="36" pos:column="20"/></literal></expr>;<pos:position pos:line="36" pos:column="21"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="37" pos:column="3">db<pos:position pos:line="37" pos:column="5"/></name><operator pos:line="37" pos:column="5">-&gt;<pos:position pos:line="37" pos:column="10"/></operator><name pos:line="37" pos:column="7">busyHandler<pos:position pos:line="37" pos:column="18"/></name><operator pos:line="37" pos:column="18">.<pos:position pos:line="37" pos:column="19"/></operator><name pos:line="37" pos:column="19">nBusy<pos:position pos:line="37" pos:column="24"/></name></name> <operator pos:line="37" pos:column="25">=<pos:position pos:line="37" pos:column="26"/></operator> <literal type="number" pos:line="37" pos:column="27">0<pos:position pos:line="37" pos:column="28"/></literal></expr>;<pos:position pos:line="37" pos:column="29"/></expr_stmt>
  <expr_stmt><expr><name pos:line="38" pos:column="3">CHECK_FOR_INTERRUPT<pos:position pos:line="38" pos:column="22"/></name></expr>;<pos:position pos:line="38" pos:column="23"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="39" pos:column="3">sqlite3VdbeIOTraceSql<pos:position pos:line="39" pos:column="24"/></name><argument_list pos:line="39" pos:column="24">(<argument><expr><name pos:line="39" pos:column="25">p<pos:position pos:line="39" pos:column="26"/></name></expr></argument>)<pos:position pos:line="39" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="28"/></expr_stmt>
<cpp:ifdef pos:line="40" pos:column="1">#<cpp:directive pos:line="40" pos:column="2">ifdef<pos:position pos:line="40" pos:column="7"/></cpp:directive> <name pos:line="40" pos:column="8">SQLITE_DEBUG<pos:position pos:line="40" pos:column="20"/></name></cpp:ifdef>
  <expr_stmt><expr><call><name pos:line="41" pos:column="3">sqlite3BeginBenignMalloc<pos:position pos:line="41" pos:column="27"/></name><argument_list pos:line="41" pos:column="27">()<pos:position pos:line="41" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="30"/></expr_stmt>
  <if pos:line="42" pos:column="3">if<condition pos:line="42" pos:column="5">( <expr><name><name pos:line="42" pos:column="7">p<pos:position pos:line="42" pos:column="8"/></name><operator pos:line="42" pos:column="8">-&gt;<pos:position pos:line="42" pos:column="13"/></operator><name pos:line="42" pos:column="10">pc<pos:position pos:line="42" pos:column="12"/></name></name><operator pos:line="42" pos:column="12">==<pos:position pos:line="42" pos:column="14"/></operator><literal type="number" pos:line="42" pos:column="14">0<pos:position pos:line="42" pos:column="15"/></literal> 
   <operator pos:line="43" pos:column="4">&amp;&amp;<pos:position pos:line="43" pos:column="14"/></operator> <operator pos:line="43" pos:column="7">(<pos:position pos:line="43" pos:column="8"/></operator><operator pos:line="43" pos:column="8">(<pos:position pos:line="43" pos:column="9"/></operator><name><name pos:line="43" pos:column="9">p<pos:position pos:line="43" pos:column="10"/></name><operator pos:line="43" pos:column="10">-&gt;<pos:position pos:line="43" pos:column="15"/></operator><name pos:line="43" pos:column="12">db<pos:position pos:line="43" pos:column="14"/></name><operator pos:line="43" pos:column="14">-&gt;<pos:position pos:line="43" pos:column="19"/></operator><name pos:line="43" pos:column="16">flags<pos:position pos:line="43" pos:column="21"/></name></name> <operator pos:line="43" pos:column="22">&amp;<pos:position pos:line="43" pos:column="27"/></operator> <name pos:line="43" pos:column="24">SQLITE_VdbeListing<pos:position pos:line="43" pos:column="42"/></name><operator pos:line="43" pos:column="42">)<pos:position pos:line="43" pos:column="43"/></operator> <operator pos:line="43" pos:column="44">||<pos:position pos:line="43" pos:column="46"/></operator> <call><name pos:line="43" pos:column="47">fileExists<pos:position pos:line="43" pos:column="57"/></name><argument_list pos:line="43" pos:column="57">(<argument><expr><name pos:line="43" pos:column="58">db<pos:position pos:line="43" pos:column="60"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="43" pos:column="62">"vdbe_explain"<pos:position pos:line="43" pos:column="76"/></literal></expr></argument>)<pos:position pos:line="43" pos:column="77"/></argument_list></call><operator pos:line="43" pos:column="77">)<pos:position pos:line="43" pos:column="78"/></operator></expr>
  )<pos:position pos:line="44" pos:column="4"/></condition><then><block pos:line="44" pos:column="4">{
    <decl_stmt><decl><type><name pos:line="45" pos:column="5">int<pos:position pos:line="45" pos:column="8"/></name></type> <name pos:line="45" pos:column="9">i<pos:position pos:line="45" pos:column="10"/></name></decl>;<pos:position pos:line="45" pos:column="11"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="46" pos:column="5">printf<pos:position pos:line="46" pos:column="11"/></name><argument_list pos:line="46" pos:column="11">(<argument><expr><literal type="string" pos:line="46" pos:column="12">"VDBE Program Listing:\n"<pos:position pos:line="46" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="46" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="39"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="47" pos:column="5">sqlite3VdbePrintSql<pos:position pos:line="47" pos:column="24"/></name><argument_list pos:line="47" pos:column="24">(<argument><expr><name pos:line="47" pos:column="25">p<pos:position pos:line="47" pos:column="26"/></name></expr></argument>)<pos:position pos:line="47" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="28"/></expr_stmt>
    <for pos:line="48" pos:column="5">for<control pos:line="48" pos:column="8">(<init><expr><name pos:line="48" pos:column="9">i<pos:position pos:line="48" pos:column="10"/></name><operator pos:line="48" pos:column="10">=<pos:position pos:line="48" pos:column="11"/></operator><literal type="number" pos:line="48" pos:column="11">0<pos:position pos:line="48" pos:column="12"/></literal></expr>;<pos:position pos:line="48" pos:column="13"/></init> <condition><expr><name pos:line="48" pos:column="14">i<pos:position pos:line="48" pos:column="15"/></name><operator pos:line="48" pos:column="15">&lt;<pos:position pos:line="48" pos:column="19"/></operator><name><name pos:line="48" pos:column="16">p<pos:position pos:line="48" pos:column="17"/></name><operator pos:line="48" pos:column="17">-&gt;<pos:position pos:line="48" pos:column="22"/></operator><name pos:line="48" pos:column="19">nOp<pos:position pos:line="48" pos:column="22"/></name></name></expr>;<pos:position pos:line="48" pos:column="23"/></condition> <incr><expr><name pos:line="48" pos:column="24">i<pos:position pos:line="48" pos:column="25"/></name><operator pos:line="48" pos:column="25">++<pos:position pos:line="48" pos:column="27"/></operator></expr></incr>)<pos:position pos:line="48" pos:column="28"/></control><block pos:line="48" pos:column="28">{
      <expr_stmt><expr><call><name pos:line="49" pos:column="7">sqlite3VdbePrintOp<pos:position pos:line="49" pos:column="25"/></name><argument_list pos:line="49" pos:column="25">(<argument><expr><name pos:line="49" pos:column="26">stdout<pos:position pos:line="49" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="34">i<pos:position pos:line="49" pos:column="35"/></name></expr></argument>, <argument><expr><operator pos:line="49" pos:column="37">&amp;<pos:position pos:line="49" pos:column="42"/></operator><name><name pos:line="49" pos:column="38">p<pos:position pos:line="49" pos:column="39"/></name><operator pos:line="49" pos:column="39">-&gt;<pos:position pos:line="49" pos:column="44"/></operator><name pos:line="49" pos:column="41">aOp<pos:position pos:line="49" pos:column="44"/></name><index pos:line="49" pos:column="44">[<expr><name pos:line="49" pos:column="45">i<pos:position pos:line="49" pos:column="46"/></name></expr>]<pos:position pos:line="49" pos:column="47"/></index></name></expr></argument>)<pos:position pos:line="49" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="49"/></expr_stmt>
    }<pos:position pos:line="50" pos:column="6"/></block></for>
  }<pos:position pos:line="51" pos:column="4"/></block></then></if>
  <if pos:line="52" pos:column="3">if<condition pos:line="52" pos:column="5">( <expr><call><name pos:line="52" pos:column="7">fileExists<pos:position pos:line="52" pos:column="17"/></name><argument_list pos:line="52" pos:column="17">(<argument><expr><name pos:line="52" pos:column="18">db<pos:position pos:line="52" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="52" pos:column="22">"vdbe_trace"<pos:position pos:line="52" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="52" pos:column="35"/></argument_list></call></expr> )<pos:position pos:line="52" pos:column="37"/></condition><then><block pos:line="52" pos:column="37">{
    <expr_stmt><expr><name><name pos:line="53" pos:column="5">p<pos:position pos:line="53" pos:column="6"/></name><operator pos:line="53" pos:column="6">-&gt;<pos:position pos:line="53" pos:column="11"/></operator><name pos:line="53" pos:column="8">trace<pos:position pos:line="53" pos:column="13"/></name></name> <operator pos:line="53" pos:column="14">=<pos:position pos:line="53" pos:column="15"/></operator> <name pos:line="53" pos:column="16">stdout<pos:position pos:line="53" pos:column="22"/></name></expr>;<pos:position pos:line="53" pos:column="23"/></expr_stmt>
  }<pos:position pos:line="54" pos:column="4"/></block></then></if>
  <expr_stmt><expr><call><name pos:line="55" pos:column="3">sqlite3EndBenignMalloc<pos:position pos:line="55" pos:column="25"/></name><argument_list pos:line="55" pos:column="25">()<pos:position pos:line="55" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="28"/></expr_stmt>
<cpp:endif pos:line="56" pos:column="1">#<cpp:directive pos:line="56" pos:column="2">endif<pos:position pos:line="56" pos:column="7"/></cpp:directive></cpp:endif>
  <for pos:line="57" pos:column="3">for<control pos:line="57" pos:column="6">(<init><expr><name pos:line="57" pos:column="7">pc<pos:position pos:line="57" pos:column="9"/></name><operator pos:line="57" pos:column="9">=<pos:position pos:line="57" pos:column="10"/></operator><name><name pos:line="57" pos:column="10">p<pos:position pos:line="57" pos:column="11"/></name><operator pos:line="57" pos:column="11">-&gt;<pos:position pos:line="57" pos:column="16"/></operator><name pos:line="57" pos:column="13">pc<pos:position pos:line="57" pos:column="15"/></name></name></expr>;<pos:position pos:line="57" pos:column="16"/></init> <condition><expr><name pos:line="57" pos:column="17">rc<pos:position pos:line="57" pos:column="19"/></name><operator pos:line="57" pos:column="19">==<pos:position pos:line="57" pos:column="21"/></operator><name pos:line="57" pos:column="21">SQLITE_OK<pos:position pos:line="57" pos:column="30"/></name></expr>;<pos:position pos:line="57" pos:column="31"/></condition> <incr><expr><name pos:line="57" pos:column="32">pc<pos:position pos:line="57" pos:column="34"/></name><operator pos:line="57" pos:column="34">++<pos:position pos:line="57" pos:column="36"/></operator></expr></incr>)<pos:position pos:line="57" pos:column="37"/></control><block pos:line="57" pos:column="37">{
    <expr_stmt><expr><call><name pos:line="58" pos:column="5">assert<pos:position pos:line="58" pos:column="11"/></name><argument_list pos:line="58" pos:column="11">( <argument><expr><name pos:line="58" pos:column="13">pc<pos:position pos:line="58" pos:column="15"/></name><operator pos:line="58" pos:column="15">&gt;=<pos:position pos:line="58" pos:column="20"/></operator><literal type="number" pos:line="58" pos:column="17">0<pos:position pos:line="58" pos:column="18"/></literal> <operator pos:line="58" pos:column="19">&amp;&amp;<pos:position pos:line="58" pos:column="29"/></operator> <name pos:line="58" pos:column="22">pc<pos:position pos:line="58" pos:column="24"/></name><operator pos:line="58" pos:column="24">&lt;<pos:position pos:line="58" pos:column="28"/></operator><name><name pos:line="58" pos:column="25">p<pos:position pos:line="58" pos:column="26"/></name><operator pos:line="58" pos:column="26">-&gt;<pos:position pos:line="58" pos:column="31"/></operator><name pos:line="58" pos:column="28">nOp<pos:position pos:line="58" pos:column="31"/></name></name></expr></argument> )<pos:position pos:line="58" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="34"/></expr_stmt>
    <if pos:line="59" pos:column="5">if<condition pos:line="59" pos:column="7">( <expr><name><name pos:line="59" pos:column="9">db<pos:position pos:line="59" pos:column="11"/></name><operator pos:line="59" pos:column="11">-&gt;<pos:position pos:line="59" pos:column="16"/></operator><name pos:line="59" pos:column="13">mallocFailed<pos:position pos:line="59" pos:column="25"/></name></name></expr> )<pos:position pos:line="59" pos:column="27"/></condition><then pos:line="59" pos:column="27"> <block type="pseudo"><goto pos:line="59" pos:column="28">goto <name pos:line="59" pos:column="33">no_mem<pos:position pos:line="59" pos:column="39"/></name>;<pos:position pos:line="59" pos:column="40"/></goto></block></then></if>
<cpp:ifdef pos:line="60" pos:column="1">#<cpp:directive pos:line="60" pos:column="2">ifdef<pos:position pos:line="60" pos:column="7"/></cpp:directive> <name pos:line="60" pos:column="8">VDBE_PROFILE<pos:position pos:line="60" pos:column="20"/></name></cpp:ifdef>
    <expr_stmt><expr><name pos:line="61" pos:column="5">origPc<pos:position pos:line="61" pos:column="11"/></name> <operator pos:line="61" pos:column="12">=<pos:position pos:line="61" pos:column="13"/></operator> <name pos:line="61" pos:column="14">pc<pos:position pos:line="61" pos:column="16"/></name></expr>;<pos:position pos:line="61" pos:column="17"/></expr_stmt>
    <expr_stmt><expr><name pos:line="62" pos:column="5">start<pos:position pos:line="62" pos:column="10"/></name> <operator pos:line="62" pos:column="11">=<pos:position pos:line="62" pos:column="12"/></operator> <call><name pos:line="62" pos:column="13">sqlite3Hwtime<pos:position pos:line="62" pos:column="26"/></name><argument_list pos:line="62" pos:column="26">()<pos:position pos:line="62" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="29"/></expr_stmt>
<cpp:endif pos:line="63" pos:column="1">#<cpp:directive pos:line="63" pos:column="2">endif<pos:position pos:line="63" pos:column="7"/></cpp:directive></cpp:endif>
    <expr_stmt><expr><name pos:line="64" pos:column="5">pOp<pos:position pos:line="64" pos:column="8"/></name> <operator pos:line="64" pos:column="9">=<pos:position pos:line="64" pos:column="10"/></operator> <operator pos:line="64" pos:column="11">&amp;<pos:position pos:line="64" pos:column="16"/></operator><name><name pos:line="64" pos:column="12">p<pos:position pos:line="64" pos:column="13"/></name><operator pos:line="64" pos:column="13">-&gt;<pos:position pos:line="64" pos:column="18"/></operator><name pos:line="64" pos:column="15">aOp<pos:position pos:line="64" pos:column="18"/></name><index pos:line="64" pos:column="18">[<expr><name pos:line="64" pos:column="19">pc<pos:position pos:line="64" pos:column="21"/></name></expr>]<pos:position pos:line="64" pos:column="22"/></index></name></expr>;<pos:position pos:line="64" pos:column="23"/></expr_stmt>

    <comment type="block" pos:line="66" pos:column="5">/* Only allow tracing if SQLITE_DEBUG is defined.
    */</comment>
<cpp:ifdef pos:line="68" pos:column="1">#<cpp:directive pos:line="68" pos:column="2">ifdef<pos:position pos:line="68" pos:column="7"/></cpp:directive> <name pos:line="68" pos:column="8">SQLITE_DEBUG<pos:position pos:line="68" pos:column="20"/></name></cpp:ifdef>
    <if pos:line="69" pos:column="5">if<condition pos:line="69" pos:column="7">( <expr><name><name pos:line="69" pos:column="9">p<pos:position pos:line="69" pos:column="10"/></name><operator pos:line="69" pos:column="10">-&gt;<pos:position pos:line="69" pos:column="15"/></operator><name pos:line="69" pos:column="12">trace<pos:position pos:line="69" pos:column="17"/></name></name></expr> )<pos:position pos:line="69" pos:column="19"/></condition><then><block pos:line="69" pos:column="19">{
      <if pos:line="70" pos:column="7">if<condition pos:line="70" pos:column="9">( <expr><name pos:line="70" pos:column="11">pc<pos:position pos:line="70" pos:column="13"/></name><operator pos:line="70" pos:column="13">==<pos:position pos:line="70" pos:column="15"/></operator><literal type="number" pos:line="70" pos:column="15">0<pos:position pos:line="70" pos:column="16"/></literal></expr> )<pos:position pos:line="70" pos:column="18"/></condition><then><block pos:line="70" pos:column="18">{
        <expr_stmt><expr><call><name pos:line="71" pos:column="9">printf<pos:position pos:line="71" pos:column="15"/></name><argument_list pos:line="71" pos:column="15">(<argument><expr><literal type="string" pos:line="71" pos:column="16">"VDBE Execution Trace:\n"<pos:position pos:line="71" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="71" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="43"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="72" pos:column="9">sqlite3VdbePrintSql<pos:position pos:line="72" pos:column="28"/></name><argument_list pos:line="72" pos:column="28">(<argument><expr><name pos:line="72" pos:column="29">p<pos:position pos:line="72" pos:column="30"/></name></expr></argument>)<pos:position pos:line="72" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="32"/></expr_stmt>
      }<pos:position pos:line="73" pos:column="8"/></block></then></if>
      <expr_stmt><expr><call><name pos:line="74" pos:column="7">sqlite3VdbePrintOp<pos:position pos:line="74" pos:column="25"/></name><argument_list pos:line="74" pos:column="25">(<argument><expr><name><name pos:line="74" pos:column="26">p<pos:position pos:line="74" pos:column="27"/></name><operator pos:line="74" pos:column="27">-&gt;<pos:position pos:line="74" pos:column="32"/></operator><name pos:line="74" pos:column="29">trace<pos:position pos:line="74" pos:column="34"/></name></name></expr></argument>, <argument><expr><name pos:line="74" pos:column="36">pc<pos:position pos:line="74" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="74" pos:column="40">pOp<pos:position pos:line="74" pos:column="43"/></name></expr></argument>)<pos:position pos:line="74" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="45"/></expr_stmt>
    }<pos:position pos:line="75" pos:column="6"/></block></then></if>
    <if pos:line="76" pos:column="5">if<condition pos:line="76" pos:column="7">( <expr><name><name pos:line="76" pos:column="9">p<pos:position pos:line="76" pos:column="10"/></name><operator pos:line="76" pos:column="10">-&gt;<pos:position pos:line="76" pos:column="15"/></operator><name pos:line="76" pos:column="12">trace<pos:position pos:line="76" pos:column="17"/></name></name><operator pos:line="76" pos:column="17">==<pos:position pos:line="76" pos:column="19"/></operator><literal type="number" pos:line="76" pos:column="19">0<pos:position pos:line="76" pos:column="20"/></literal> <operator pos:line="76" pos:column="21">&amp;&amp;<pos:position pos:line="76" pos:column="31"/></operator> <name pos:line="76" pos:column="24">pc<pos:position pos:line="76" pos:column="26"/></name><operator pos:line="76" pos:column="26">==<pos:position pos:line="76" pos:column="28"/></operator><literal type="number" pos:line="76" pos:column="28">0<pos:position pos:line="76" pos:column="29"/></literal></expr> )<pos:position pos:line="76" pos:column="31"/></condition><then><block pos:line="76" pos:column="31">{
      <expr_stmt><expr><call><name pos:line="77" pos:column="7">sqlite3BeginBenignMalloc<pos:position pos:line="77" pos:column="31"/></name><argument_list pos:line="77" pos:column="31">()<pos:position pos:line="77" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="34"/></expr_stmt>
      <if pos:line="78" pos:column="7">if<condition pos:line="78" pos:column="9">( <expr><call><name pos:line="78" pos:column="11">fileExists<pos:position pos:line="78" pos:column="21"/></name><argument_list pos:line="78" pos:column="21">(<argument><expr><name pos:line="78" pos:column="22">db<pos:position pos:line="78" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="78" pos:column="26">"vdbe_sqltrace"<pos:position pos:line="78" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="78" pos:column="42"/></argument_list></call></expr> )<pos:position pos:line="78" pos:column="44"/></condition><then><block pos:line="78" pos:column="44">{
        <expr_stmt><expr><call><name pos:line="79" pos:column="9">sqlite3VdbePrintSql<pos:position pos:line="79" pos:column="28"/></name><argument_list pos:line="79" pos:column="28">(<argument><expr><name pos:line="79" pos:column="29">p<pos:position pos:line="79" pos:column="30"/></name></expr></argument>)<pos:position pos:line="79" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="32"/></expr_stmt>
      }<pos:position pos:line="80" pos:column="8"/></block></then></if>
      <expr_stmt><expr><call><name pos:line="81" pos:column="7">sqlite3EndBenignMalloc<pos:position pos:line="81" pos:column="29"/></name><argument_list pos:line="81" pos:column="29">()<pos:position pos:line="81" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="32"/></expr_stmt>
    }<pos:position pos:line="82" pos:column="6"/></block></then></if>
<cpp:endif pos:line="83" pos:column="1">#<cpp:directive pos:line="83" pos:column="2">endif<pos:position pos:line="83" pos:column="7"/></cpp:directive></cpp:endif>
      

    <comment type="block" pos:line="86" pos:column="5">/* Check to see if we need to simulate an interrupt.  This only happens
    ** if we have a special test build.
    */</comment>
<cpp:ifdef pos:line="89" pos:column="1">#<cpp:directive pos:line="89" pos:column="2">ifdef<pos:position pos:line="89" pos:column="7"/></cpp:directive> <name pos:line="89" pos:column="8">SQLITE_TEST<pos:position pos:line="89" pos:column="19"/></name></cpp:ifdef>
    <if pos:line="90" pos:column="5">if<condition pos:line="90" pos:column="7">( <expr><name pos:line="90" pos:column="9">sqlite3_interrupt_count<pos:position pos:line="90" pos:column="32"/></name><operator pos:line="90" pos:column="32">&gt;<pos:position pos:line="90" pos:column="36"/></operator><literal type="number" pos:line="90" pos:column="33">0<pos:position pos:line="90" pos:column="34"/></literal></expr> )<pos:position pos:line="90" pos:column="36"/></condition><then><block pos:line="90" pos:column="36">{
      <expr_stmt><expr><name pos:line="91" pos:column="7">sqlite3_interrupt_count<pos:position pos:line="91" pos:column="30"/></name><operator pos:line="91" pos:column="30">--<pos:position pos:line="91" pos:column="32"/></operator></expr>;<pos:position pos:line="91" pos:column="33"/></expr_stmt>
      <if pos:line="92" pos:column="7">if<condition pos:line="92" pos:column="9">( <expr><name pos:line="92" pos:column="11">sqlite3_interrupt_count<pos:position pos:line="92" pos:column="34"/></name><operator pos:line="92" pos:column="34">==<pos:position pos:line="92" pos:column="36"/></operator><literal type="number" pos:line="92" pos:column="36">0<pos:position pos:line="92" pos:column="37"/></literal></expr> )<pos:position pos:line="92" pos:column="39"/></condition><then><block pos:line="92" pos:column="39">{
        <expr_stmt><expr><call><name pos:line="93" pos:column="9">sqlite3_interrupt<pos:position pos:line="93" pos:column="26"/></name><argument_list pos:line="93" pos:column="26">(<argument><expr><name pos:line="93" pos:column="27">db<pos:position pos:line="93" pos:column="29"/></name></expr></argument>)<pos:position pos:line="93" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="31"/></expr_stmt>
      }<pos:position pos:line="94" pos:column="8"/></block></then></if>
    }<pos:position pos:line="95" pos:column="6"/></block></then></if>
<cpp:endif pos:line="96" pos:column="1">#<cpp:directive pos:line="96" pos:column="2">endif<pos:position pos:line="96" pos:column="7"/></cpp:directive></cpp:endif>

<cpp:ifndef pos:line="98" pos:column="1">#<cpp:directive pos:line="98" pos:column="2">ifndef<pos:position pos:line="98" pos:column="8"/></cpp:directive> <name pos:line="98" pos:column="9">SQLITE_OMIT_PROGRESS_CALLBACK<pos:position pos:line="98" pos:column="38"/></name></cpp:ifndef>
    <comment type="block" pos:line="99" pos:column="5">/* Call the progress callback if it is configured and the required number
    ** of VDBE ops have been executed (either since this invocation of
    ** sqlite3VdbeExec() or since last time the progress callback was called).
    ** If the progress callback returns non-zero, exit the virtual machine with
    ** a return code SQLITE_ABORT.
    */</comment>
    <if pos:line="105" pos:column="5">if<condition pos:line="105" pos:column="7">( <expr><name><name pos:line="105" pos:column="9">db<pos:position pos:line="105" pos:column="11"/></name><operator pos:line="105" pos:column="11">-&gt;<pos:position pos:line="105" pos:column="16"/></operator><name pos:line="105" pos:column="13">xProgress<pos:position pos:line="105" pos:column="22"/></name></name></expr> )<pos:position pos:line="105" pos:column="24"/></condition><then><block pos:line="105" pos:column="24">{
      <if pos:line="106" pos:column="7">if<condition pos:line="106" pos:column="9">( <expr><name><name pos:line="106" pos:column="11">db<pos:position pos:line="106" pos:column="13"/></name><operator pos:line="106" pos:column="13">-&gt;<pos:position pos:line="106" pos:column="18"/></operator><name pos:line="106" pos:column="15">nProgressOps<pos:position pos:line="106" pos:column="27"/></name></name><operator pos:line="106" pos:column="27">==<pos:position pos:line="106" pos:column="29"/></operator><name pos:line="106" pos:column="29">nProgressOps<pos:position pos:line="106" pos:column="41"/></name></expr> )<pos:position pos:line="106" pos:column="43"/></condition><then><block pos:line="106" pos:column="43">{
        <decl_stmt><decl><type><name pos:line="107" pos:column="9">int<pos:position pos:line="107" pos:column="12"/></name></type> <name pos:line="107" pos:column="13">prc<pos:position pos:line="107" pos:column="16"/></name></decl>;<pos:position pos:line="107" pos:column="17"/></decl_stmt>
        <if pos:line="108" pos:column="9">if<condition pos:line="108" pos:column="11">( <expr><call><name pos:line="108" pos:column="13">sqlite3SafetyOff<pos:position pos:line="108" pos:column="29"/></name><argument_list pos:line="108" pos:column="29">(<argument><expr><name pos:line="108" pos:column="30">db<pos:position pos:line="108" pos:column="32"/></name></expr></argument>)<pos:position pos:line="108" pos:column="33"/></argument_list></call></expr> )<pos:position pos:line="108" pos:column="35"/></condition><then pos:line="108" pos:column="35"> <block type="pseudo"><goto pos:line="108" pos:column="36">goto <name pos:line="108" pos:column="41">abort_due_to_misuse<pos:position pos:line="108" pos:column="60"/></name>;<pos:position pos:line="108" pos:column="61"/></goto></block></then></if>
        <expr_stmt><expr><name pos:line="109" pos:column="9">prc<pos:position pos:line="109" pos:column="12"/></name> <operator pos:line="109" pos:column="13">=<pos:position pos:line="109" pos:column="14"/></operator><call><name><name pos:line="109" pos:column="14">db<pos:position pos:line="109" pos:column="16"/></name><operator pos:line="109" pos:column="16">-&gt;<pos:position pos:line="109" pos:column="21"/></operator><name pos:line="109" pos:column="18">xProgress<pos:position pos:line="109" pos:column="27"/></name></name><argument_list pos:line="109" pos:column="27">(<argument><expr><name><name pos:line="109" pos:column="28">db<pos:position pos:line="109" pos:column="30"/></name><operator pos:line="109" pos:column="30">-&gt;<pos:position pos:line="109" pos:column="35"/></operator><name pos:line="109" pos:column="32">pProgressArg<pos:position pos:line="109" pos:column="44"/></name></name></expr></argument>)<pos:position pos:line="109" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="109" pos:column="46"/></expr_stmt>
        <if pos:line="110" pos:column="9">if<condition pos:line="110" pos:column="11">( <expr><call><name pos:line="110" pos:column="13">sqlite3SafetyOn<pos:position pos:line="110" pos:column="28"/></name><argument_list pos:line="110" pos:column="28">(<argument><expr><name pos:line="110" pos:column="29">db<pos:position pos:line="110" pos:column="31"/></name></expr></argument>)<pos:position pos:line="110" pos:column="32"/></argument_list></call></expr> )<pos:position pos:line="110" pos:column="34"/></condition><then pos:line="110" pos:column="34"> <block type="pseudo"><goto pos:line="110" pos:column="35">goto <name pos:line="110" pos:column="40">abort_due_to_misuse<pos:position pos:line="110" pos:column="59"/></name>;<pos:position pos:line="110" pos:column="60"/></goto></block></then></if>
        <if pos:line="111" pos:column="9">if<condition pos:line="111" pos:column="11">( <expr><name pos:line="111" pos:column="13">prc<pos:position pos:line="111" pos:column="16"/></name><operator pos:line="111" pos:column="16">!=<pos:position pos:line="111" pos:column="18"/></operator><literal type="number" pos:line="111" pos:column="18">0<pos:position pos:line="111" pos:column="19"/></literal></expr> )<pos:position pos:line="111" pos:column="21"/></condition><then><block pos:line="111" pos:column="21">{
          <expr_stmt><expr><name pos:line="112" pos:column="11">rc<pos:position pos:line="112" pos:column="13"/></name> <operator pos:line="112" pos:column="14">=<pos:position pos:line="112" pos:column="15"/></operator> <name pos:line="112" pos:column="16">SQLITE_INTERRUPT<pos:position pos:line="112" pos:column="32"/></name></expr>;<pos:position pos:line="112" pos:column="33"/></expr_stmt>
          <goto pos:line="113" pos:column="11">goto <name pos:line="113" pos:column="16">vdbe_error_halt<pos:position pos:line="113" pos:column="31"/></name>;<pos:position pos:line="113" pos:column="32"/></goto>
        }<pos:position pos:line="114" pos:column="10"/></block></then></if>
        <expr_stmt><expr><name pos:line="115" pos:column="9">nProgressOps<pos:position pos:line="115" pos:column="21"/></name> <operator pos:line="115" pos:column="22">=<pos:position pos:line="115" pos:column="23"/></operator> <literal type="number" pos:line="115" pos:column="24">0<pos:position pos:line="115" pos:column="25"/></literal></expr>;<pos:position pos:line="115" pos:column="26"/></expr_stmt>
      }<pos:position pos:line="116" pos:column="8"/></block></then></if>
      <expr_stmt><expr><name pos:line="117" pos:column="7">nProgressOps<pos:position pos:line="117" pos:column="19"/></name><operator pos:line="117" pos:column="19">++<pos:position pos:line="117" pos:column="21"/></operator></expr>;<pos:position pos:line="117" pos:column="22"/></expr_stmt>
    }<pos:position pos:line="118" pos:column="6"/></block></then></if>
<cpp:endif pos:line="119" pos:column="1">#<cpp:directive pos:line="119" pos:column="2">endif<pos:position pos:line="119" pos:column="7"/></cpp:directive></cpp:endif>

    <comment type="block" pos:line="121" pos:column="5">/* Do common setup processing for any opcode that is marked
    ** with the "out2-prerelease" tag.  Such opcodes have a single
    ** output which is specified by the P2 parameter.  The P2 register
    ** is initialized to a NULL.
    */</comment>
    <expr_stmt><expr><name pos:line="126" pos:column="5">opProperty<pos:position pos:line="126" pos:column="15"/></name> <operator pos:line="126" pos:column="16">=<pos:position pos:line="126" pos:column="17"/></operator> <name><name pos:line="126" pos:column="18">opcodeProperty<pos:position pos:line="126" pos:column="32"/></name><index pos:line="126" pos:column="32">[<expr><name><name pos:line="126" pos:column="33">pOp<pos:position pos:line="126" pos:column="36"/></name><operator pos:line="126" pos:column="36">-&gt;<pos:position pos:line="126" pos:column="41"/></operator><name pos:line="126" pos:column="38">opcode<pos:position pos:line="126" pos:column="44"/></name></name></expr>]<pos:position pos:line="126" pos:column="45"/></index></name></expr>;<pos:position pos:line="126" pos:column="46"/></expr_stmt>
    <if pos:line="127" pos:column="5">if<condition pos:line="127" pos:column="7">( <expr><operator pos:line="127" pos:column="9">(<pos:position pos:line="127" pos:column="10"/></operator><name pos:line="127" pos:column="10">opProperty<pos:position pos:line="127" pos:column="20"/></name> <operator pos:line="127" pos:column="21">&amp;<pos:position pos:line="127" pos:column="26"/></operator> <name pos:line="127" pos:column="23">OPFLG_OUT2_PRERELEASE<pos:position pos:line="127" pos:column="44"/></name><operator pos:line="127" pos:column="44">)<pos:position pos:line="127" pos:column="45"/></operator><operator pos:line="127" pos:column="45">!=<pos:position pos:line="127" pos:column="47"/></operator><literal type="number" pos:line="127" pos:column="47">0<pos:position pos:line="127" pos:column="48"/></literal></expr> )<pos:position pos:line="127" pos:column="50"/></condition><then><block pos:line="127" pos:column="50">{
      <expr_stmt><expr><call><name pos:line="128" pos:column="7">assert<pos:position pos:line="128" pos:column="13"/></name><argument_list pos:line="128" pos:column="13">( <argument><expr><name><name pos:line="128" pos:column="15">pOp<pos:position pos:line="128" pos:column="18"/></name><operator pos:line="128" pos:column="18">-&gt;<pos:position pos:line="128" pos:column="23"/></operator><name pos:line="128" pos:column="20">p2<pos:position pos:line="128" pos:column="22"/></name></name><operator pos:line="128" pos:column="22">&gt;<pos:position pos:line="128" pos:column="26"/></operator><literal type="number" pos:line="128" pos:column="23">0<pos:position pos:line="128" pos:column="24"/></literal></expr></argument> )<pos:position pos:line="128" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="128" pos:column="27"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="129" pos:column="7">assert<pos:position pos:line="129" pos:column="13"/></name><argument_list pos:line="129" pos:column="13">( <argument><expr><name><name pos:line="129" pos:column="15">pOp<pos:position pos:line="129" pos:column="18"/></name><operator pos:line="129" pos:column="18">-&gt;<pos:position pos:line="129" pos:column="23"/></operator><name pos:line="129" pos:column="20">p2<pos:position pos:line="129" pos:column="22"/></name></name><operator pos:line="129" pos:column="22">&lt;=<pos:position pos:line="129" pos:column="27"/></operator><name><name pos:line="129" pos:column="24">p<pos:position pos:line="129" pos:column="25"/></name><operator pos:line="129" pos:column="25">-&gt;<pos:position pos:line="129" pos:column="30"/></operator><name pos:line="129" pos:column="27">nMem<pos:position pos:line="129" pos:column="31"/></name></name></expr></argument> )<pos:position pos:line="129" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="129" pos:column="34"/></expr_stmt>
      <expr_stmt><expr><name pos:line="130" pos:column="7">pOut<pos:position pos:line="130" pos:column="11"/></name> <operator pos:line="130" pos:column="12">=<pos:position pos:line="130" pos:column="13"/></operator> <operator pos:line="130" pos:column="14">&amp;<pos:position pos:line="130" pos:column="19"/></operator><name><name pos:line="130" pos:column="15">p<pos:position pos:line="130" pos:column="16"/></name><operator pos:line="130" pos:column="16">-&gt;<pos:position pos:line="130" pos:column="21"/></operator><name pos:line="130" pos:column="18">aMem<pos:position pos:line="130" pos:column="22"/></name><index pos:line="130" pos:column="22">[<expr><name><name pos:line="130" pos:column="23">pOp<pos:position pos:line="130" pos:column="26"/></name><operator pos:line="130" pos:column="26">-&gt;<pos:position pos:line="130" pos:column="31"/></operator><name pos:line="130" pos:column="28">p2<pos:position pos:line="130" pos:column="30"/></name></name></expr>]<pos:position pos:line="130" pos:column="31"/></index></name></expr>;<pos:position pos:line="130" pos:column="32"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="131" pos:column="7">sqlite3VdbeMemReleaseExternal<pos:position pos:line="131" pos:column="36"/></name><argument_list pos:line="131" pos:column="36">(<argument><expr><name pos:line="131" pos:column="37">pOut<pos:position pos:line="131" pos:column="41"/></name></expr></argument>)<pos:position pos:line="131" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="131" pos:column="43"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="132" pos:column="7">pOut<pos:position pos:line="132" pos:column="11"/></name><operator pos:line="132" pos:column="11">-&gt;<pos:position pos:line="132" pos:column="16"/></operator><name pos:line="132" pos:column="13">flags<pos:position pos:line="132" pos:column="18"/></name></name> <operator pos:line="132" pos:column="19">=<pos:position pos:line="132" pos:column="20"/></operator> <name pos:line="132" pos:column="21">MEM_Null<pos:position pos:line="132" pos:column="29"/></name></expr>;<pos:position pos:line="132" pos:column="30"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="133" pos:column="7">pOut<pos:position pos:line="133" pos:column="11"/></name><operator pos:line="133" pos:column="11">-&gt;<pos:position pos:line="133" pos:column="16"/></operator><name pos:line="133" pos:column="13">n<pos:position pos:line="133" pos:column="14"/></name></name> <operator pos:line="133" pos:column="15">=<pos:position pos:line="133" pos:column="16"/></operator> <literal type="number" pos:line="133" pos:column="17">0<pos:position pos:line="133" pos:column="18"/></literal></expr>;<pos:position pos:line="133" pos:column="19"/></expr_stmt>
    }<pos:position pos:line="134" pos:column="6"/></block></then><elseif pos:line="134" pos:column="6">else
 
    <comment type="block" pos:line="136" pos:column="5">/* Do common setup for opcodes marked with one of the following
    ** combinations of properties.
    **
    **           in1
    **           in1 in2
    **           in1 in2 out3
    **           in1 in3
    **
    ** Variables pIn1, pIn2, and pIn3 are made to point to appropriate
    ** registers for inputs.  Variable pOut points to the output register.
    */</comment>
    <if pos:line="147" pos:column="5">if<condition pos:line="147" pos:column="7">( <expr><operator pos:line="147" pos:column="9">(<pos:position pos:line="147" pos:column="10"/></operator><name pos:line="147" pos:column="10">opProperty<pos:position pos:line="147" pos:column="20"/></name> <operator pos:line="147" pos:column="21">&amp;<pos:position pos:line="147" pos:column="26"/></operator> <name pos:line="147" pos:column="23">OPFLG_IN1<pos:position pos:line="147" pos:column="32"/></name><operator pos:line="147" pos:column="32">)<pos:position pos:line="147" pos:column="33"/></operator><operator pos:line="147" pos:column="33">!=<pos:position pos:line="147" pos:column="35"/></operator><literal type="number" pos:line="147" pos:column="35">0<pos:position pos:line="147" pos:column="36"/></literal></expr> )<pos:position pos:line="147" pos:column="38"/></condition><then><block pos:line="147" pos:column="38">{
      <expr_stmt><expr><call><name pos:line="148" pos:column="7">assert<pos:position pos:line="148" pos:column="13"/></name><argument_list pos:line="148" pos:column="13">( <argument><expr><name><name pos:line="148" pos:column="15">pOp<pos:position pos:line="148" pos:column="18"/></name><operator pos:line="148" pos:column="18">-&gt;<pos:position pos:line="148" pos:column="23"/></operator><name pos:line="148" pos:column="20">p1<pos:position pos:line="148" pos:column="22"/></name></name><operator pos:line="148" pos:column="22">&gt;<pos:position pos:line="148" pos:column="26"/></operator><literal type="number" pos:line="148" pos:column="23">0<pos:position pos:line="148" pos:column="24"/></literal></expr></argument> )<pos:position pos:line="148" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="148" pos:column="27"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="149" pos:column="7">assert<pos:position pos:line="149" pos:column="13"/></name><argument_list pos:line="149" pos:column="13">( <argument><expr><name><name pos:line="149" pos:column="15">pOp<pos:position pos:line="149" pos:column="18"/></name><operator pos:line="149" pos:column="18">-&gt;<pos:position pos:line="149" pos:column="23"/></operator><name pos:line="149" pos:column="20">p1<pos:position pos:line="149" pos:column="22"/></name></name><operator pos:line="149" pos:column="22">&lt;=<pos:position pos:line="149" pos:column="27"/></operator><name><name pos:line="149" pos:column="24">p<pos:position pos:line="149" pos:column="25"/></name><operator pos:line="149" pos:column="25">-&gt;<pos:position pos:line="149" pos:column="30"/></operator><name pos:line="149" pos:column="27">nMem<pos:position pos:line="149" pos:column="31"/></name></name></expr></argument> )<pos:position pos:line="149" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="149" pos:column="34"/></expr_stmt>
      <expr_stmt><expr><name pos:line="150" pos:column="7">pIn1<pos:position pos:line="150" pos:column="11"/></name> <operator pos:line="150" pos:column="12">=<pos:position pos:line="150" pos:column="13"/></operator> <operator pos:line="150" pos:column="14">&amp;<pos:position pos:line="150" pos:column="19"/></operator><name><name pos:line="150" pos:column="15">p<pos:position pos:line="150" pos:column="16"/></name><operator pos:line="150" pos:column="16">-&gt;<pos:position pos:line="150" pos:column="21"/></operator><name pos:line="150" pos:column="18">aMem<pos:position pos:line="150" pos:column="22"/></name><index pos:line="150" pos:column="22">[<expr><name><name pos:line="150" pos:column="23">pOp<pos:position pos:line="150" pos:column="26"/></name><operator pos:line="150" pos:column="26">-&gt;<pos:position pos:line="150" pos:column="31"/></operator><name pos:line="150" pos:column="28">p1<pos:position pos:line="150" pos:column="30"/></name></name></expr>]<pos:position pos:line="150" pos:column="31"/></index></name></expr>;<pos:position pos:line="150" pos:column="32"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="151" pos:column="7">REGISTER_TRACE<pos:position pos:line="151" pos:column="21"/></name><argument_list pos:line="151" pos:column="21">(<argument><expr><name><name pos:line="151" pos:column="22">pOp<pos:position pos:line="151" pos:column="25"/></name><operator pos:line="151" pos:column="25">-&gt;<pos:position pos:line="151" pos:column="30"/></operator><name pos:line="151" pos:column="27">p1<pos:position pos:line="151" pos:column="29"/></name></name></expr></argument>, <argument><expr><name pos:line="151" pos:column="31">pIn1<pos:position pos:line="151" pos:column="35"/></name></expr></argument>)<pos:position pos:line="151" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="151" pos:column="37"/></expr_stmt>
      <if pos:line="152" pos:column="7">if<condition pos:line="152" pos:column="9">( <expr><operator pos:line="152" pos:column="11">(<pos:position pos:line="152" pos:column="12"/></operator><name pos:line="152" pos:column="12">opProperty<pos:position pos:line="152" pos:column="22"/></name> <operator pos:line="152" pos:column="23">&amp;<pos:position pos:line="152" pos:column="28"/></operator> <name pos:line="152" pos:column="25">OPFLG_IN2<pos:position pos:line="152" pos:column="34"/></name><operator pos:line="152" pos:column="34">)<pos:position pos:line="152" pos:column="35"/></operator><operator pos:line="152" pos:column="35">!=<pos:position pos:line="152" pos:column="37"/></operator><literal type="number" pos:line="152" pos:column="37">0<pos:position pos:line="152" pos:column="38"/></literal></expr> )<pos:position pos:line="152" pos:column="40"/></condition><then><block pos:line="152" pos:column="40">{
        <expr_stmt><expr><call><name pos:line="153" pos:column="9">assert<pos:position pos:line="153" pos:column="15"/></name><argument_list pos:line="153" pos:column="15">( <argument><expr><name><name pos:line="153" pos:column="17">pOp<pos:position pos:line="153" pos:column="20"/></name><operator pos:line="153" pos:column="20">-&gt;<pos:position pos:line="153" pos:column="25"/></operator><name pos:line="153" pos:column="22">p2<pos:position pos:line="153" pos:column="24"/></name></name><operator pos:line="153" pos:column="24">&gt;<pos:position pos:line="153" pos:column="28"/></operator><literal type="number" pos:line="153" pos:column="25">0<pos:position pos:line="153" pos:column="26"/></literal></expr></argument> )<pos:position pos:line="153" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="153" pos:column="29"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="154" pos:column="9">assert<pos:position pos:line="154" pos:column="15"/></name><argument_list pos:line="154" pos:column="15">( <argument><expr><name><name pos:line="154" pos:column="17">pOp<pos:position pos:line="154" pos:column="20"/></name><operator pos:line="154" pos:column="20">-&gt;<pos:position pos:line="154" pos:column="25"/></operator><name pos:line="154" pos:column="22">p2<pos:position pos:line="154" pos:column="24"/></name></name><operator pos:line="154" pos:column="24">&lt;=<pos:position pos:line="154" pos:column="29"/></operator><name><name pos:line="154" pos:column="26">p<pos:position pos:line="154" pos:column="27"/></name><operator pos:line="154" pos:column="27">-&gt;<pos:position pos:line="154" pos:column="32"/></operator><name pos:line="154" pos:column="29">nMem<pos:position pos:line="154" pos:column="33"/></name></name></expr></argument> )<pos:position pos:line="154" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="154" pos:column="36"/></expr_stmt>
        <expr_stmt><expr><name pos:line="155" pos:column="9">pIn2<pos:position pos:line="155" pos:column="13"/></name> <operator pos:line="155" pos:column="14">=<pos:position pos:line="155" pos:column="15"/></operator> <operator pos:line="155" pos:column="16">&amp;<pos:position pos:line="155" pos:column="21"/></operator><name><name pos:line="155" pos:column="17">p<pos:position pos:line="155" pos:column="18"/></name><operator pos:line="155" pos:column="18">-&gt;<pos:position pos:line="155" pos:column="23"/></operator><name pos:line="155" pos:column="20">aMem<pos:position pos:line="155" pos:column="24"/></name><index pos:line="155" pos:column="24">[<expr><name><name pos:line="155" pos:column="25">pOp<pos:position pos:line="155" pos:column="28"/></name><operator pos:line="155" pos:column="28">-&gt;<pos:position pos:line="155" pos:column="33"/></operator><name pos:line="155" pos:column="30">p2<pos:position pos:line="155" pos:column="32"/></name></name></expr>]<pos:position pos:line="155" pos:column="33"/></index></name></expr>;<pos:position pos:line="155" pos:column="34"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="156" pos:column="9">REGISTER_TRACE<pos:position pos:line="156" pos:column="23"/></name><argument_list pos:line="156" pos:column="23">(<argument><expr><name><name pos:line="156" pos:column="24">pOp<pos:position pos:line="156" pos:column="27"/></name><operator pos:line="156" pos:column="27">-&gt;<pos:position pos:line="156" pos:column="32"/></operator><name pos:line="156" pos:column="29">p2<pos:position pos:line="156" pos:column="31"/></name></name></expr></argument>, <argument><expr><name pos:line="156" pos:column="33">pIn2<pos:position pos:line="156" pos:column="37"/></name></expr></argument>)<pos:position pos:line="156" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="156" pos:column="39"/></expr_stmt>
        <if pos:line="157" pos:column="9">if<condition pos:line="157" pos:column="11">( <expr><operator pos:line="157" pos:column="13">(<pos:position pos:line="157" pos:column="14"/></operator><name pos:line="157" pos:column="14">opProperty<pos:position pos:line="157" pos:column="24"/></name> <operator pos:line="157" pos:column="25">&amp;<pos:position pos:line="157" pos:column="30"/></operator> <name pos:line="157" pos:column="27">OPFLG_OUT3<pos:position pos:line="157" pos:column="37"/></name><operator pos:line="157" pos:column="37">)<pos:position pos:line="157" pos:column="38"/></operator><operator pos:line="157" pos:column="38">!=<pos:position pos:line="157" pos:column="40"/></operator><literal type="number" pos:line="157" pos:column="40">0<pos:position pos:line="157" pos:column="41"/></literal></expr> )<pos:position pos:line="157" pos:column="43"/></condition><then><block pos:line="157" pos:column="43">{
          <expr_stmt><expr><call><name pos:line="158" pos:column="11">assert<pos:position pos:line="158" pos:column="17"/></name><argument_list pos:line="158" pos:column="17">( <argument><expr><name><name pos:line="158" pos:column="19">pOp<pos:position pos:line="158" pos:column="22"/></name><operator pos:line="158" pos:column="22">-&gt;<pos:position pos:line="158" pos:column="27"/></operator><name pos:line="158" pos:column="24">p3<pos:position pos:line="158" pos:column="26"/></name></name><operator pos:line="158" pos:column="26">&gt;<pos:position pos:line="158" pos:column="30"/></operator><literal type="number" pos:line="158" pos:column="27">0<pos:position pos:line="158" pos:column="28"/></literal></expr></argument> )<pos:position pos:line="158" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="158" pos:column="31"/></expr_stmt>
          <expr_stmt><expr><call><name pos:line="159" pos:column="11">assert<pos:position pos:line="159" pos:column="17"/></name><argument_list pos:line="159" pos:column="17">( <argument><expr><name><name pos:line="159" pos:column="19">pOp<pos:position pos:line="159" pos:column="22"/></name><operator pos:line="159" pos:column="22">-&gt;<pos:position pos:line="159" pos:column="27"/></operator><name pos:line="159" pos:column="24">p3<pos:position pos:line="159" pos:column="26"/></name></name><operator pos:line="159" pos:column="26">&lt;=<pos:position pos:line="159" pos:column="31"/></operator><name><name pos:line="159" pos:column="28">p<pos:position pos:line="159" pos:column="29"/></name><operator pos:line="159" pos:column="29">-&gt;<pos:position pos:line="159" pos:column="34"/></operator><name pos:line="159" pos:column="31">nMem<pos:position pos:line="159" pos:column="35"/></name></name></expr></argument> )<pos:position pos:line="159" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="159" pos:column="38"/></expr_stmt>
          <expr_stmt><expr><name pos:line="160" pos:column="11">pOut<pos:position pos:line="160" pos:column="15"/></name> <operator pos:line="160" pos:column="16">=<pos:position pos:line="160" pos:column="17"/></operator> <operator pos:line="160" pos:column="18">&amp;<pos:position pos:line="160" pos:column="23"/></operator><name><name pos:line="160" pos:column="19">p<pos:position pos:line="160" pos:column="20"/></name><operator pos:line="160" pos:column="20">-&gt;<pos:position pos:line="160" pos:column="25"/></operator><name pos:line="160" pos:column="22">aMem<pos:position pos:line="160" pos:column="26"/></name><index pos:line="160" pos:column="26">[<expr><name><name pos:line="160" pos:column="27">pOp<pos:position pos:line="160" pos:column="30"/></name><operator pos:line="160" pos:column="30">-&gt;<pos:position pos:line="160" pos:column="35"/></operator><name pos:line="160" pos:column="32">p3<pos:position pos:line="160" pos:column="34"/></name></name></expr>]<pos:position pos:line="160" pos:column="35"/></index></name></expr>;<pos:position pos:line="160" pos:column="36"/></expr_stmt>
        }<pos:position pos:line="161" pos:column="10"/></block></then></if>
      }<pos:position pos:line="162" pos:column="8"/></block></then><elseif pos:line="162" pos:column="8">else <if pos:line="162" pos:column="13">if<condition pos:line="162" pos:column="15">( <expr><operator pos:line="162" pos:column="17">(<pos:position pos:line="162" pos:column="18"/></operator><name pos:line="162" pos:column="18">opProperty<pos:position pos:line="162" pos:column="28"/></name> <operator pos:line="162" pos:column="29">&amp;<pos:position pos:line="162" pos:column="34"/></operator> <name pos:line="162" pos:column="31">OPFLG_IN3<pos:position pos:line="162" pos:column="40"/></name><operator pos:line="162" pos:column="40">)<pos:position pos:line="162" pos:column="41"/></operator><operator pos:line="162" pos:column="41">!=<pos:position pos:line="162" pos:column="43"/></operator><literal type="number" pos:line="162" pos:column="43">0<pos:position pos:line="162" pos:column="44"/></literal></expr> )<pos:position pos:line="162" pos:column="46"/></condition><then><block pos:line="162" pos:column="46">{
        <expr_stmt><expr><call><name pos:line="163" pos:column="9">assert<pos:position pos:line="163" pos:column="15"/></name><argument_list pos:line="163" pos:column="15">( <argument><expr><name><name pos:line="163" pos:column="17">pOp<pos:position pos:line="163" pos:column="20"/></name><operator pos:line="163" pos:column="20">-&gt;<pos:position pos:line="163" pos:column="25"/></operator><name pos:line="163" pos:column="22">p3<pos:position pos:line="163" pos:column="24"/></name></name><operator pos:line="163" pos:column="24">&gt;<pos:position pos:line="163" pos:column="28"/></operator><literal type="number" pos:line="163" pos:column="25">0<pos:position pos:line="163" pos:column="26"/></literal></expr></argument> )<pos:position pos:line="163" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="163" pos:column="29"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="164" pos:column="9">assert<pos:position pos:line="164" pos:column="15"/></name><argument_list pos:line="164" pos:column="15">( <argument><expr><name><name pos:line="164" pos:column="17">pOp<pos:position pos:line="164" pos:column="20"/></name><operator pos:line="164" pos:column="20">-&gt;<pos:position pos:line="164" pos:column="25"/></operator><name pos:line="164" pos:column="22">p3<pos:position pos:line="164" pos:column="24"/></name></name><operator pos:line="164" pos:column="24">&lt;=<pos:position pos:line="164" pos:column="29"/></operator><name><name pos:line="164" pos:column="26">p<pos:position pos:line="164" pos:column="27"/></name><operator pos:line="164" pos:column="27">-&gt;<pos:position pos:line="164" pos:column="32"/></operator><name pos:line="164" pos:column="29">nMem<pos:position pos:line="164" pos:column="33"/></name></name></expr></argument> )<pos:position pos:line="164" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="164" pos:column="36"/></expr_stmt>
        <expr_stmt><expr><name pos:line="165" pos:column="9">pIn3<pos:position pos:line="165" pos:column="13"/></name> <operator pos:line="165" pos:column="14">=<pos:position pos:line="165" pos:column="15"/></operator> <operator pos:line="165" pos:column="16">&amp;<pos:position pos:line="165" pos:column="21"/></operator><name><name pos:line="165" pos:column="17">p<pos:position pos:line="165" pos:column="18"/></name><operator pos:line="165" pos:column="18">-&gt;<pos:position pos:line="165" pos:column="23"/></operator><name pos:line="165" pos:column="20">aMem<pos:position pos:line="165" pos:column="24"/></name><index pos:line="165" pos:column="24">[<expr><name><name pos:line="165" pos:column="25">pOp<pos:position pos:line="165" pos:column="28"/></name><operator pos:line="165" pos:column="28">-&gt;<pos:position pos:line="165" pos:column="33"/></operator><name pos:line="165" pos:column="30">p3<pos:position pos:line="165" pos:column="32"/></name></name></expr>]<pos:position pos:line="165" pos:column="33"/></index></name></expr>;<pos:position pos:line="165" pos:column="34"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="166" pos:column="9">REGISTER_TRACE<pos:position pos:line="166" pos:column="23"/></name><argument_list pos:line="166" pos:column="23">(<argument><expr><name><name pos:line="166" pos:column="24">pOp<pos:position pos:line="166" pos:column="27"/></name><operator pos:line="166" pos:column="27">-&gt;<pos:position pos:line="166" pos:column="32"/></operator><name pos:line="166" pos:column="29">p3<pos:position pos:line="166" pos:column="31"/></name></name></expr></argument>, <argument><expr><name pos:line="166" pos:column="33">pIn3<pos:position pos:line="166" pos:column="37"/></name></expr></argument>)<pos:position pos:line="166" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="166" pos:column="39"/></expr_stmt>
      }<pos:position pos:line="167" pos:column="8"/></block></then></if></elseif></if>
    }<pos:position pos:line="168" pos:column="6"/></block></then></if></elseif><elseif pos:line="168" pos:column="6">else <if pos:line="168" pos:column="11">if<condition pos:line="168" pos:column="13">( <expr><operator pos:line="168" pos:column="15">(<pos:position pos:line="168" pos:column="16"/></operator><name pos:line="168" pos:column="16">opProperty<pos:position pos:line="168" pos:column="26"/></name> <operator pos:line="168" pos:column="27">&amp;<pos:position pos:line="168" pos:column="32"/></operator> <name pos:line="168" pos:column="29">OPFLG_IN2<pos:position pos:line="168" pos:column="38"/></name><operator pos:line="168" pos:column="38">)<pos:position pos:line="168" pos:column="39"/></operator><operator pos:line="168" pos:column="39">!=<pos:position pos:line="168" pos:column="41"/></operator><literal type="number" pos:line="168" pos:column="41">0<pos:position pos:line="168" pos:column="42"/></literal></expr> )<pos:position pos:line="168" pos:column="44"/></condition><then><block pos:line="168" pos:column="44">{
      <expr_stmt><expr><call><name pos:line="169" pos:column="7">assert<pos:position pos:line="169" pos:column="13"/></name><argument_list pos:line="169" pos:column="13">( <argument><expr><name><name pos:line="169" pos:column="15">pOp<pos:position pos:line="169" pos:column="18"/></name><operator pos:line="169" pos:column="18">-&gt;<pos:position pos:line="169" pos:column="23"/></operator><name pos:line="169" pos:column="20">p2<pos:position pos:line="169" pos:column="22"/></name></name><operator pos:line="169" pos:column="22">&gt;<pos:position pos:line="169" pos:column="26"/></operator><literal type="number" pos:line="169" pos:column="23">0<pos:position pos:line="169" pos:column="24"/></literal></expr></argument> )<pos:position pos:line="169" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="169" pos:column="27"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="170" pos:column="7">assert<pos:position pos:line="170" pos:column="13"/></name><argument_list pos:line="170" pos:column="13">( <argument><expr><name><name pos:line="170" pos:column="15">pOp<pos:position pos:line="170" pos:column="18"/></name><operator pos:line="170" pos:column="18">-&gt;<pos:position pos:line="170" pos:column="23"/></operator><name pos:line="170" pos:column="20">p2<pos:position pos:line="170" pos:column="22"/></name></name><operator pos:line="170" pos:column="22">&lt;=<pos:position pos:line="170" pos:column="27"/></operator><name><name pos:line="170" pos:column="24">p<pos:position pos:line="170" pos:column="25"/></name><operator pos:line="170" pos:column="25">-&gt;<pos:position pos:line="170" pos:column="30"/></operator><name pos:line="170" pos:column="27">nMem<pos:position pos:line="170" pos:column="31"/></name></name></expr></argument> )<pos:position pos:line="170" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="170" pos:column="34"/></expr_stmt>
      <expr_stmt><expr><name pos:line="171" pos:column="7">pIn2<pos:position pos:line="171" pos:column="11"/></name> <operator pos:line="171" pos:column="12">=<pos:position pos:line="171" pos:column="13"/></operator> <operator pos:line="171" pos:column="14">&amp;<pos:position pos:line="171" pos:column="19"/></operator><name><name pos:line="171" pos:column="15">p<pos:position pos:line="171" pos:column="16"/></name><operator pos:line="171" pos:column="16">-&gt;<pos:position pos:line="171" pos:column="21"/></operator><name pos:line="171" pos:column="18">aMem<pos:position pos:line="171" pos:column="22"/></name><index pos:line="171" pos:column="22">[<expr><name><name pos:line="171" pos:column="23">pOp<pos:position pos:line="171" pos:column="26"/></name><operator pos:line="171" pos:column="26">-&gt;<pos:position pos:line="171" pos:column="31"/></operator><name pos:line="171" pos:column="28">p2<pos:position pos:line="171" pos:column="30"/></name></name></expr>]<pos:position pos:line="171" pos:column="31"/></index></name></expr>;<pos:position pos:line="171" pos:column="32"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="172" pos:column="7">REGISTER_TRACE<pos:position pos:line="172" pos:column="21"/></name><argument_list pos:line="172" pos:column="21">(<argument><expr><name><name pos:line="172" pos:column="22">pOp<pos:position pos:line="172" pos:column="25"/></name><operator pos:line="172" pos:column="25">-&gt;<pos:position pos:line="172" pos:column="30"/></operator><name pos:line="172" pos:column="27">p2<pos:position pos:line="172" pos:column="29"/></name></name></expr></argument>, <argument><expr><name pos:line="172" pos:column="31">pIn2<pos:position pos:line="172" pos:column="35"/></name></expr></argument>)<pos:position pos:line="172" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="172" pos:column="37"/></expr_stmt>
    }<pos:position pos:line="173" pos:column="6"/></block></then></if></elseif><elseif pos:line="173" pos:column="6">else <if pos:line="173" pos:column="11">if<condition pos:line="173" pos:column="13">( <expr><operator pos:line="173" pos:column="15">(<pos:position pos:line="173" pos:column="16"/></operator><name pos:line="173" pos:column="16">opProperty<pos:position pos:line="173" pos:column="26"/></name> <operator pos:line="173" pos:column="27">&amp;<pos:position pos:line="173" pos:column="32"/></operator> <name pos:line="173" pos:column="29">OPFLG_IN3<pos:position pos:line="173" pos:column="38"/></name><operator pos:line="173" pos:column="38">)<pos:position pos:line="173" pos:column="39"/></operator><operator pos:line="173" pos:column="39">!=<pos:position pos:line="173" pos:column="41"/></operator><literal type="number" pos:line="173" pos:column="41">0<pos:position pos:line="173" pos:column="42"/></literal></expr> )<pos:position pos:line="173" pos:column="44"/></condition><then><block pos:line="173" pos:column="44">{
      <expr_stmt><expr><call><name pos:line="174" pos:column="7">assert<pos:position pos:line="174" pos:column="13"/></name><argument_list pos:line="174" pos:column="13">( <argument><expr><name><name pos:line="174" pos:column="15">pOp<pos:position pos:line="174" pos:column="18"/></name><operator pos:line="174" pos:column="18">-&gt;<pos:position pos:line="174" pos:column="23"/></operator><name pos:line="174" pos:column="20">p3<pos:position pos:line="174" pos:column="22"/></name></name><operator pos:line="174" pos:column="22">&gt;<pos:position pos:line="174" pos:column="26"/></operator><literal type="number" pos:line="174" pos:column="23">0<pos:position pos:line="174" pos:column="24"/></literal></expr></argument> )<pos:position pos:line="174" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="174" pos:column="27"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="175" pos:column="7">assert<pos:position pos:line="175" pos:column="13"/></name><argument_list pos:line="175" pos:column="13">( <argument><expr><name><name pos:line="175" pos:column="15">pOp<pos:position pos:line="175" pos:column="18"/></name><operator pos:line="175" pos:column="18">-&gt;<pos:position pos:line="175" pos:column="23"/></operator><name pos:line="175" pos:column="20">p3<pos:position pos:line="175" pos:column="22"/></name></name><operator pos:line="175" pos:column="22">&lt;=<pos:position pos:line="175" pos:column="27"/></operator><name><name pos:line="175" pos:column="24">p<pos:position pos:line="175" pos:column="25"/></name><operator pos:line="175" pos:column="25">-&gt;<pos:position pos:line="175" pos:column="30"/></operator><name pos:line="175" pos:column="27">nMem<pos:position pos:line="175" pos:column="31"/></name></name></expr></argument> )<pos:position pos:line="175" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="175" pos:column="34"/></expr_stmt>
      <expr_stmt><expr><name pos:line="176" pos:column="7">pIn3<pos:position pos:line="176" pos:column="11"/></name> <operator pos:line="176" pos:column="12">=<pos:position pos:line="176" pos:column="13"/></operator> <operator pos:line="176" pos:column="14">&amp;<pos:position pos:line="176" pos:column="19"/></operator><name><name pos:line="176" pos:column="15">p<pos:position pos:line="176" pos:column="16"/></name><operator pos:line="176" pos:column="16">-&gt;<pos:position pos:line="176" pos:column="21"/></operator><name pos:line="176" pos:column="18">aMem<pos:position pos:line="176" pos:column="22"/></name><index pos:line="176" pos:column="22">[<expr><name><name pos:line="176" pos:column="23">pOp<pos:position pos:line="176" pos:column="26"/></name><operator pos:line="176" pos:column="26">-&gt;<pos:position pos:line="176" pos:column="31"/></operator><name pos:line="176" pos:column="28">p3<pos:position pos:line="176" pos:column="30"/></name></name></expr>]<pos:position pos:line="176" pos:column="31"/></index></name></expr>;<pos:position pos:line="176" pos:column="32"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="177" pos:column="7">REGISTER_TRACE<pos:position pos:line="177" pos:column="21"/></name><argument_list pos:line="177" pos:column="21">(<argument><expr><name><name pos:line="177" pos:column="22">pOp<pos:position pos:line="177" pos:column="25"/></name><operator pos:line="177" pos:column="25">-&gt;<pos:position pos:line="177" pos:column="30"/></operator><name pos:line="177" pos:column="27">p3<pos:position pos:line="177" pos:column="29"/></name></name></expr></argument>, <argument><expr><name pos:line="177" pos:column="31">pIn3<pos:position pos:line="177" pos:column="35"/></name></expr></argument>)<pos:position pos:line="177" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="177" pos:column="37"/></expr_stmt>
    }<pos:position pos:line="178" pos:column="6"/></block></then></if></elseif></if>

    <switch pos:line="180" pos:column="5">switch<condition pos:line="180" pos:column="11">( <expr><name><name pos:line="180" pos:column="13">pOp<pos:position pos:line="180" pos:column="16"/></name><operator pos:line="180" pos:column="16">-&gt;<pos:position pos:line="180" pos:column="21"/></operator><name pos:line="180" pos:column="18">opcode<pos:position pos:line="180" pos:column="24"/></name></name></expr> )<pos:position pos:line="180" pos:column="26"/></condition><block pos:line="180" pos:column="26">{

<comment type="block" format="doxygen" pos:line="182" pos:column="1">/*****************************************************************************
** What follows is a massive switch statement where each case implements a
** separate instruction in the virtual machine.  If we follow the usual
** indentation conventions, each case should be indented by 6 spaces.  But
** that is a lot of wasted space on the left margin.  So the code within
** the switch statement will break with convention and be flush-left. Another
** big comment (similar to this one) will mark the point in the code where
** we transition back to normal indentation.
**
** The formatting of each case is important.  The makefile for SQLite
** generates two C files "opcodes.h" and "opcodes.c" by scanning this
** file looking for lines that begin with "case OP_".  The opcodes.h files
** will be filled with #defines that give unique integer values to each
** opcode and the opcodes.c file is filled with an array of strings where
** each string is the symbolic name for the corresponding opcode.  If the
** case statement is followed by a comment of the form "/# same as ... #/"
** that comment is used to determine the particular value of the opcode.
**
** Other keywords in the comment that follows each case are used to
** construct the OPFLG_INITIALIZER value that initializes opcodeProperty[].
** Keywords include: in1, in2, in3, out2_prerelease, out2, out3.  See
** the mkopcodeh.awk script for additional information.
**
** Documentation about VDBE opcodes is generated by scanning this file
** for lines of that contain "Opcode:".  That line and all subsequent
** comment lines are used in the generation of the opcode.html documentation
** file.
**
** SUMMARY:
**
**     Formatting is important to scripts that scan this file.
**     Do not deviate from the formatting style currently in use.
**
*****************************************************************************/</comment>

<comment type="block" pos:line="217" pos:column="1">/* Opcode:  Goto * P2 * * *
**
** An unconditional jump to address P2.
** The next instruction executed will be 
** the one at index P2 from the beginning of
** the program.
*/</comment>
<case pos:line="224" pos:column="1">case <expr><name pos:line="224" pos:column="6">OP_Goto<pos:position pos:line="224" pos:column="13"/></name></expr>:<pos:position pos:line="224" pos:column="14"/></case> <block pos:line="224" pos:column="15">{             <comment type="block" pos:line="224" pos:column="29">/* jump */</comment>
  <expr_stmt><expr><name pos:line="225" pos:column="3">CHECK_FOR_INTERRUPT<pos:position pos:line="225" pos:column="22"/></name></expr>;<pos:position pos:line="225" pos:column="23"/></expr_stmt>
  <expr_stmt><expr><name pos:line="226" pos:column="3">pc<pos:position pos:line="226" pos:column="5"/></name> <operator pos:line="226" pos:column="6">=<pos:position pos:line="226" pos:column="7"/></operator> <name><name pos:line="226" pos:column="8">pOp<pos:position pos:line="226" pos:column="11"/></name><operator pos:line="226" pos:column="11">-&gt;<pos:position pos:line="226" pos:column="16"/></operator><name pos:line="226" pos:column="13">p2<pos:position pos:line="226" pos:column="15"/></name></name> <operator pos:line="226" pos:column="16">-<pos:position pos:line="226" pos:column="17"/></operator> <literal type="number" pos:line="226" pos:column="18">1<pos:position pos:line="226" pos:column="19"/></literal></expr>;<pos:position pos:line="226" pos:column="20"/></expr_stmt>
  <break pos:line="227" pos:column="3">break;<pos:position pos:line="227" pos:column="9"/></break>
}<pos:position pos:line="228" pos:column="2"/></block>

<comment type="block" pos:line="230" pos:column="1">/* Opcode:  Gosub P1 P2 * * *
**
** Write the current address onto register P1
** and then jump to address P2.
*/</comment>
<case pos:line="235" pos:column="1">case <expr><name pos:line="235" pos:column="6">OP_Gosub<pos:position pos:line="235" pos:column="14"/></name></expr>:<pos:position pos:line="235" pos:column="15"/></case> <block pos:line="235" pos:column="16">{            <comment type="block" pos:line="235" pos:column="29">/* jump */</comment>
  <expr_stmt><expr><call><name pos:line="236" pos:column="3">assert<pos:position pos:line="236" pos:column="9"/></name><argument_list pos:line="236" pos:column="9">( <argument><expr><name><name pos:line="236" pos:column="11">pOp<pos:position pos:line="236" pos:column="14"/></name><operator pos:line="236" pos:column="14">-&gt;<pos:position pos:line="236" pos:column="19"/></operator><name pos:line="236" pos:column="16">p1<pos:position pos:line="236" pos:column="18"/></name></name><operator pos:line="236" pos:column="18">&gt;<pos:position pos:line="236" pos:column="22"/></operator><literal type="number" pos:line="236" pos:column="19">0<pos:position pos:line="236" pos:column="20"/></literal></expr></argument> )<pos:position pos:line="236" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="236" pos:column="23"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="237" pos:column="3">assert<pos:position pos:line="237" pos:column="9"/></name><argument_list pos:line="237" pos:column="9">( <argument><expr><name><name pos:line="237" pos:column="11">pOp<pos:position pos:line="237" pos:column="14"/></name><operator pos:line="237" pos:column="14">-&gt;<pos:position pos:line="237" pos:column="19"/></operator><name pos:line="237" pos:column="16">p1<pos:position pos:line="237" pos:column="18"/></name></name><operator pos:line="237" pos:column="18">&lt;=<pos:position pos:line="237" pos:column="23"/></operator><name><name pos:line="237" pos:column="20">p<pos:position pos:line="237" pos:column="21"/></name><operator pos:line="237" pos:column="21">-&gt;<pos:position pos:line="237" pos:column="26"/></operator><name pos:line="237" pos:column="23">nMem<pos:position pos:line="237" pos:column="27"/></name></name></expr></argument> )<pos:position pos:line="237" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="237" pos:column="30"/></expr_stmt>
  <expr_stmt><expr><name pos:line="238" pos:column="3">pIn1<pos:position pos:line="238" pos:column="7"/></name> <operator pos:line="238" pos:column="8">=<pos:position pos:line="238" pos:column="9"/></operator> <operator pos:line="238" pos:column="10">&amp;<pos:position pos:line="238" pos:column="15"/></operator><name><name pos:line="238" pos:column="11">p<pos:position pos:line="238" pos:column="12"/></name><operator pos:line="238" pos:column="12">-&gt;<pos:position pos:line="238" pos:column="17"/></operator><name pos:line="238" pos:column="14">aMem<pos:position pos:line="238" pos:column="18"/></name><index pos:line="238" pos:column="18">[<expr><name><name pos:line="238" pos:column="19">pOp<pos:position pos:line="238" pos:column="22"/></name><operator pos:line="238" pos:column="22">-&gt;<pos:position pos:line="238" pos:column="27"/></operator><name pos:line="238" pos:column="24">p1<pos:position pos:line="238" pos:column="26"/></name></name></expr>]<pos:position pos:line="238" pos:column="27"/></index></name></expr>;<pos:position pos:line="238" pos:column="28"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="239" pos:column="3">assert<pos:position pos:line="239" pos:column="9"/></name><argument_list pos:line="239" pos:column="9">( <argument><expr><operator pos:line="239" pos:column="11">(<pos:position pos:line="239" pos:column="12"/></operator><name><name pos:line="239" pos:column="12">pIn1<pos:position pos:line="239" pos:column="16"/></name><operator pos:line="239" pos:column="16">-&gt;<pos:position pos:line="239" pos:column="21"/></operator><name pos:line="239" pos:column="18">flags<pos:position pos:line="239" pos:column="23"/></name></name> <operator pos:line="239" pos:column="24">&amp;<pos:position pos:line="239" pos:column="29"/></operator> <name pos:line="239" pos:column="26">MEM_Dyn<pos:position pos:line="239" pos:column="33"/></name><operator pos:line="239" pos:column="33">)<pos:position pos:line="239" pos:column="34"/></operator><operator pos:line="239" pos:column="34">==<pos:position pos:line="239" pos:column="36"/></operator><literal type="number" pos:line="239" pos:column="36">0<pos:position pos:line="239" pos:column="37"/></literal></expr></argument> )<pos:position pos:line="239" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="239" pos:column="40"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="240" pos:column="3">pIn1<pos:position pos:line="240" pos:column="7"/></name><operator pos:line="240" pos:column="7">-&gt;<pos:position pos:line="240" pos:column="12"/></operator><name pos:line="240" pos:column="9">flags<pos:position pos:line="240" pos:column="14"/></name></name> <operator pos:line="240" pos:column="15">=<pos:position pos:line="240" pos:column="16"/></operator> <name pos:line="240" pos:column="17">MEM_Int<pos:position pos:line="240" pos:column="24"/></name></expr>;<pos:position pos:line="240" pos:column="25"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="241" pos:column="3">pIn1<pos:position pos:line="241" pos:column="7"/></name><operator pos:line="241" pos:column="7">-&gt;<pos:position pos:line="241" pos:column="12"/></operator><name pos:line="241" pos:column="9">u<pos:position pos:line="241" pos:column="10"/></name><operator pos:line="241" pos:column="10">.<pos:position pos:line="241" pos:column="11"/></operator><name pos:line="241" pos:column="11">i<pos:position pos:line="241" pos:column="12"/></name></name> <operator pos:line="241" pos:column="13">=<pos:position pos:line="241" pos:column="14"/></operator> <name pos:line="241" pos:column="15">pc<pos:position pos:line="241" pos:column="17"/></name></expr>;<pos:position pos:line="241" pos:column="18"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="242" pos:column="3">REGISTER_TRACE<pos:position pos:line="242" pos:column="17"/></name><argument_list pos:line="242" pos:column="17">(<argument><expr><name><name pos:line="242" pos:column="18">pOp<pos:position pos:line="242" pos:column="21"/></name><operator pos:line="242" pos:column="21">-&gt;<pos:position pos:line="242" pos:column="26"/></operator><name pos:line="242" pos:column="23">p1<pos:position pos:line="242" pos:column="25"/></name></name></expr></argument>, <argument><expr><name pos:line="242" pos:column="27">pIn1<pos:position pos:line="242" pos:column="31"/></name></expr></argument>)<pos:position pos:line="242" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="242" pos:column="33"/></expr_stmt>
  <expr_stmt><expr><name pos:line="243" pos:column="3">pc<pos:position pos:line="243" pos:column="5"/></name> <operator pos:line="243" pos:column="6">=<pos:position pos:line="243" pos:column="7"/></operator> <name><name pos:line="243" pos:column="8">pOp<pos:position pos:line="243" pos:column="11"/></name><operator pos:line="243" pos:column="11">-&gt;<pos:position pos:line="243" pos:column="16"/></operator><name pos:line="243" pos:column="13">p2<pos:position pos:line="243" pos:column="15"/></name></name> <operator pos:line="243" pos:column="16">-<pos:position pos:line="243" pos:column="17"/></operator> <literal type="number" pos:line="243" pos:column="18">1<pos:position pos:line="243" pos:column="19"/></literal></expr>;<pos:position pos:line="243" pos:column="20"/></expr_stmt>
  <break pos:line="244" pos:column="3">break;<pos:position pos:line="244" pos:column="9"/></break>
}<pos:position pos:line="245" pos:column="2"/></block>

<comment type="block" pos:line="247" pos:column="1">/* Opcode:  Return P1 * * * *
**
** Jump to the next instruction after the address in register P1.
*/</comment>
<case pos:line="251" pos:column="1">case <expr><name pos:line="251" pos:column="6">OP_Return<pos:position pos:line="251" pos:column="15"/></name></expr>:<pos:position pos:line="251" pos:column="16"/></case> <block pos:line="251" pos:column="17">{           <comment type="block" pos:line="251" pos:column="29">/* in1 */</comment>
  <expr_stmt><expr><call><name pos:line="252" pos:column="3">assert<pos:position pos:line="252" pos:column="9"/></name><argument_list pos:line="252" pos:column="9">( <argument><expr><name><name pos:line="252" pos:column="11">pIn1<pos:position pos:line="252" pos:column="15"/></name><operator pos:line="252" pos:column="15">-&gt;<pos:position pos:line="252" pos:column="20"/></operator><name pos:line="252" pos:column="17">flags<pos:position pos:line="252" pos:column="22"/></name></name> <operator pos:line="252" pos:column="23">&amp;<pos:position pos:line="252" pos:column="28"/></operator> <name pos:line="252" pos:column="25">MEM_Int<pos:position pos:line="252" pos:column="32"/></name></expr></argument> )<pos:position pos:line="252" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="252" pos:column="35"/></expr_stmt>
  <expr_stmt><expr><name pos:line="253" pos:column="3">pc<pos:position pos:line="253" pos:column="5"/></name> <operator pos:line="253" pos:column="6">=<pos:position pos:line="253" pos:column="7"/></operator> <operator pos:line="253" pos:column="8">(<pos:position pos:line="253" pos:column="9"/></operator><name pos:line="253" pos:column="9">int<pos:position pos:line="253" pos:column="12"/></name><operator pos:line="253" pos:column="12">)<pos:position pos:line="253" pos:column="13"/></operator><name><name pos:line="253" pos:column="13">pIn1<pos:position pos:line="253" pos:column="17"/></name><operator pos:line="253" pos:column="17">-&gt;<pos:position pos:line="253" pos:column="22"/></operator><name pos:line="253" pos:column="19">u<pos:position pos:line="253" pos:column="20"/></name><operator pos:line="253" pos:column="20">.<pos:position pos:line="253" pos:column="21"/></operator><name pos:line="253" pos:column="21">i<pos:position pos:line="253" pos:column="22"/></name></name></expr>;<pos:position pos:line="253" pos:column="23"/></expr_stmt>
  <break pos:line="254" pos:column="3">break;<pos:position pos:line="254" pos:column="9"/></break>
}<pos:position pos:line="255" pos:column="2"/></block>

<comment type="block" pos:line="257" pos:column="1">/* Opcode:  Yield P1 * * * *
**
** Swap the program counter with the value in register P1.
*/</comment>
<case pos:line="261" pos:column="1">case <expr><name pos:line="261" pos:column="6">OP_Yield<pos:position pos:line="261" pos:column="14"/></name></expr>:<pos:position pos:line="261" pos:column="15"/></case> <block pos:line="261" pos:column="16">{            <comment type="block" pos:line="261" pos:column="29">/* in1 */</comment>
  <decl_stmt><decl><type><name pos:line="262" pos:column="3">int<pos:position pos:line="262" pos:column="6"/></name></type> <name pos:line="262" pos:column="7">pcDest<pos:position pos:line="262" pos:column="13"/></name></decl>;<pos:position pos:line="262" pos:column="14"/></decl_stmt>
  <expr_stmt><expr><call><name pos:line="263" pos:column="3">assert<pos:position pos:line="263" pos:column="9"/></name><argument_list pos:line="263" pos:column="9">( <argument><expr><operator pos:line="263" pos:column="11">(<pos:position pos:line="263" pos:column="12"/></operator><name><name pos:line="263" pos:column="12">pIn1<pos:position pos:line="263" pos:column="16"/></name><operator pos:line="263" pos:column="16">-&gt;<pos:position pos:line="263" pos:column="21"/></operator><name pos:line="263" pos:column="18">flags<pos:position pos:line="263" pos:column="23"/></name></name> <operator pos:line="263" pos:column="24">&amp;<pos:position pos:line="263" pos:column="29"/></operator> <name pos:line="263" pos:column="26">MEM_Dyn<pos:position pos:line="263" pos:column="33"/></name><operator pos:line="263" pos:column="33">)<pos:position pos:line="263" pos:column="34"/></operator><operator pos:line="263" pos:column="34">==<pos:position pos:line="263" pos:column="36"/></operator><literal type="number" pos:line="263" pos:column="36">0<pos:position pos:line="263" pos:column="37"/></literal></expr></argument> )<pos:position pos:line="263" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="263" pos:column="40"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="264" pos:column="3">pIn1<pos:position pos:line="264" pos:column="7"/></name><operator pos:line="264" pos:column="7">-&gt;<pos:position pos:line="264" pos:column="12"/></operator><name pos:line="264" pos:column="9">flags<pos:position pos:line="264" pos:column="14"/></name></name> <operator pos:line="264" pos:column="15">=<pos:position pos:line="264" pos:column="16"/></operator> <name pos:line="264" pos:column="17">MEM_Int<pos:position pos:line="264" pos:column="24"/></name></expr>;<pos:position pos:line="264" pos:column="25"/></expr_stmt>
  <expr_stmt><expr><name pos:line="265" pos:column="3">pcDest<pos:position pos:line="265" pos:column="9"/></name> <operator pos:line="265" pos:column="10">=<pos:position pos:line="265" pos:column="11"/></operator> <operator pos:line="265" pos:column="12">(<pos:position pos:line="265" pos:column="13"/></operator><name pos:line="265" pos:column="13">int<pos:position pos:line="265" pos:column="16"/></name><operator pos:line="265" pos:column="16">)<pos:position pos:line="265" pos:column="17"/></operator><name><name pos:line="265" pos:column="17">pIn1<pos:position pos:line="265" pos:column="21"/></name><operator pos:line="265" pos:column="21">-&gt;<pos:position pos:line="265" pos:column="26"/></operator><name pos:line="265" pos:column="23">u<pos:position pos:line="265" pos:column="24"/></name><operator pos:line="265" pos:column="24">.<pos:position pos:line="265" pos:column="25"/></operator><name pos:line="265" pos:column="25">i<pos:position pos:line="265" pos:column="26"/></name></name></expr>;<pos:position pos:line="265" pos:column="27"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="266" pos:column="3">pIn1<pos:position pos:line="266" pos:column="7"/></name><operator pos:line="266" pos:column="7">-&gt;<pos:position pos:line="266" pos:column="12"/></operator><name pos:line="266" pos:column="9">u<pos:position pos:line="266" pos:column="10"/></name><operator pos:line="266" pos:column="10">.<pos:position pos:line="266" pos:column="11"/></operator><name pos:line="266" pos:column="11">i<pos:position pos:line="266" pos:column="12"/></name></name> <operator pos:line="266" pos:column="13">=<pos:position pos:line="266" pos:column="14"/></operator> <name pos:line="266" pos:column="15">pc<pos:position pos:line="266" pos:column="17"/></name></expr>;<pos:position pos:line="266" pos:column="18"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="267" pos:column="3">REGISTER_TRACE<pos:position pos:line="267" pos:column="17"/></name><argument_list pos:line="267" pos:column="17">(<argument><expr><name><name pos:line="267" pos:column="18">pOp<pos:position pos:line="267" pos:column="21"/></name><operator pos:line="267" pos:column="21">-&gt;<pos:position pos:line="267" pos:column="26"/></operator><name pos:line="267" pos:column="23">p1<pos:position pos:line="267" pos:column="25"/></name></name></expr></argument>, <argument><expr><name pos:line="267" pos:column="27">pIn1<pos:position pos:line="267" pos:column="31"/></name></expr></argument>)<pos:position pos:line="267" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="267" pos:column="33"/></expr_stmt>
  <expr_stmt><expr><name pos:line="268" pos:column="3">pc<pos:position pos:line="268" pos:column="5"/></name> <operator pos:line="268" pos:column="6">=<pos:position pos:line="268" pos:column="7"/></operator> <name pos:line="268" pos:column="8">pcDest<pos:position pos:line="268" pos:column="14"/></name></expr>;<pos:position pos:line="268" pos:column="15"/></expr_stmt>
  <break pos:line="269" pos:column="3">break;<pos:position pos:line="269" pos:column="9"/></break>
}<pos:position pos:line="270" pos:column="2"/></block>

<comment type="block" pos:line="272" pos:column="1">/* Opcode:  HaltIfNull  P1 P2 P3 P4 *
**
** Check the value in register P3.  If is is NULL then Halt using
** parameter P1, P2, and P4 as if this were a Halt instruction.  If the
** value in register P3 is not NULL, then this routine is a no-op.
*/</comment>
<case pos:line="278" pos:column="1">case <expr><name pos:line="278" pos:column="6">OP_HaltIfNull<pos:position pos:line="278" pos:column="19"/></name></expr>:<pos:position pos:line="278" pos:column="20"/></case> <block pos:line="278" pos:column="21">{      <comment type="block" pos:line="278" pos:column="28">/* in3 */</comment>
  <if pos:line="279" pos:column="3">if<condition pos:line="279" pos:column="5">( <expr><operator pos:line="279" pos:column="7">(<pos:position pos:line="279" pos:column="8"/></operator><name><name pos:line="279" pos:column="8">pIn3<pos:position pos:line="279" pos:column="12"/></name><operator pos:line="279" pos:column="12">-&gt;<pos:position pos:line="279" pos:column="17"/></operator><name pos:line="279" pos:column="14">flags<pos:position pos:line="279" pos:column="19"/></name></name> <operator pos:line="279" pos:column="20">&amp;<pos:position pos:line="279" pos:column="25"/></operator> <name pos:line="279" pos:column="22">MEM_Null<pos:position pos:line="279" pos:column="30"/></name><operator pos:line="279" pos:column="30">)<pos:position pos:line="279" pos:column="31"/></operator><operator pos:line="279" pos:column="31">==<pos:position pos:line="279" pos:column="33"/></operator><literal type="number" pos:line="279" pos:column="33">0<pos:position pos:line="279" pos:column="34"/></literal></expr> )<pos:position pos:line="279" pos:column="36"/></condition><then pos:line="279" pos:column="36"> <block type="pseudo"><break pos:line="279" pos:column="37">break;<pos:position pos:line="279" pos:column="43"/></break></block></then></if>
  <comment type="block" pos:line="280" pos:column="3">/* Fall through into OP_Halt */</comment>
}<pos:position pos:line="281" pos:column="2"/></block>

<comment type="block" pos:line="283" pos:column="1">/* Opcode:  Halt P1 P2 * P4 *
**
** Exit immediately.  All open cursors, etc are closed
** automatically.
**
** P1 is the result code returned by sqlite3_exec(), sqlite3_reset(),
** or sqlite3_finalize().  For a normal halt, this should be SQLITE_OK (0).
** For errors, it can be some other value.  If P1!=0 then P2 will determine
** whether or not to rollback the current transaction.  Do not rollback
** if P2==OE_Fail. Do the rollback if P2==OE_Rollback.  If P2==OE_Abort,
** then back out all changes that have occurred during this execution of the
** VDBE, but do not rollback the transaction. 
**
** If P4 is not null then it is an error message string.
**
** There is an implied "Halt 0 0 0" instruction inserted at the very end of
** every program.  So a jump past the last instruction of the program
** is the same as executing Halt.
*/</comment>
<case pos:line="302" pos:column="1">case <expr><name pos:line="302" pos:column="6">OP_Halt<pos:position pos:line="302" pos:column="13"/></name></expr>:<pos:position pos:line="302" pos:column="14"/></case> <block pos:line="302" pos:column="15">{
  <expr_stmt><expr><name><name pos:line="303" pos:column="3">p<pos:position pos:line="303" pos:column="4"/></name><operator pos:line="303" pos:column="4">-&gt;<pos:position pos:line="303" pos:column="9"/></operator><name pos:line="303" pos:column="6">rc<pos:position pos:line="303" pos:column="8"/></name></name> <operator pos:line="303" pos:column="9">=<pos:position pos:line="303" pos:column="10"/></operator> <name><name pos:line="303" pos:column="11">pOp<pos:position pos:line="303" pos:column="14"/></name><operator pos:line="303" pos:column="14">-&gt;<pos:position pos:line="303" pos:column="19"/></operator><name pos:line="303" pos:column="16">p1<pos:position pos:line="303" pos:column="18"/></name></name></expr>;<pos:position pos:line="303" pos:column="19"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="304" pos:column="3">p<pos:position pos:line="304" pos:column="4"/></name><operator pos:line="304" pos:column="4">-&gt;<pos:position pos:line="304" pos:column="9"/></operator><name pos:line="304" pos:column="6">pc<pos:position pos:line="304" pos:column="8"/></name></name> <operator pos:line="304" pos:column="9">=<pos:position pos:line="304" pos:column="10"/></operator> <name pos:line="304" pos:column="11">pc<pos:position pos:line="304" pos:column="13"/></name></expr>;<pos:position pos:line="304" pos:column="14"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="305" pos:column="3">p<pos:position pos:line="305" pos:column="4"/></name><operator pos:line="305" pos:column="4">-&gt;<pos:position pos:line="305" pos:column="9"/></operator><name pos:line="305" pos:column="6">errorAction<pos:position pos:line="305" pos:column="17"/></name></name> <operator pos:line="305" pos:column="18">=<pos:position pos:line="305" pos:column="19"/></operator> <name><name pos:line="305" pos:column="20">pOp<pos:position pos:line="305" pos:column="23"/></name><operator pos:line="305" pos:column="23">-&gt;<pos:position pos:line="305" pos:column="28"/></operator><name pos:line="305" pos:column="25">p2<pos:position pos:line="305" pos:column="27"/></name></name></expr>;<pos:position pos:line="305" pos:column="28"/></expr_stmt>
  <if pos:line="306" pos:column="3">if<condition pos:line="306" pos:column="5">( <expr><name><name pos:line="306" pos:column="7">pOp<pos:position pos:line="306" pos:column="10"/></name><operator pos:line="306" pos:column="10">-&gt;<pos:position pos:line="306" pos:column="15"/></operator><name pos:line="306" pos:column="12">p4<pos:position pos:line="306" pos:column="14"/></name><operator pos:line="306" pos:column="14">.<pos:position pos:line="306" pos:column="15"/></operator><name pos:line="306" pos:column="15">z<pos:position pos:line="306" pos:column="16"/></name></name></expr> )<pos:position pos:line="306" pos:column="18"/></condition><then><block pos:line="306" pos:column="18">{
    <expr_stmt><expr><call><name pos:line="307" pos:column="5">sqlite3SetString<pos:position pos:line="307" pos:column="21"/></name><argument_list pos:line="307" pos:column="21">(<argument><expr><operator pos:line="307" pos:column="22">&amp;<pos:position pos:line="307" pos:column="27"/></operator><name><name pos:line="307" pos:column="23">p<pos:position pos:line="307" pos:column="24"/></name><operator pos:line="307" pos:column="24">-&gt;<pos:position pos:line="307" pos:column="29"/></operator><name pos:line="307" pos:column="26">zErrMsg<pos:position pos:line="307" pos:column="33"/></name></name></expr></argument>, <argument><expr><name pos:line="307" pos:column="35">db<pos:position pos:line="307" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="307" pos:column="39">"%s"<pos:position pos:line="307" pos:column="43"/></literal></expr></argument>, <argument><expr><name><name pos:line="307" pos:column="45">pOp<pos:position pos:line="307" pos:column="48"/></name><operator pos:line="307" pos:column="48">-&gt;<pos:position pos:line="307" pos:column="53"/></operator><name pos:line="307" pos:column="50">p4<pos:position pos:line="307" pos:column="52"/></name><operator pos:line="307" pos:column="52">.<pos:position pos:line="307" pos:column="53"/></operator><name pos:line="307" pos:column="53">z<pos:position pos:line="307" pos:column="54"/></name></name></expr></argument>)<pos:position pos:line="307" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="307" pos:column="56"/></expr_stmt>
  }<pos:position pos:line="308" pos:column="4"/></block></then></if>
  <expr_stmt><expr><name pos:line="309" pos:column="3">rc<pos:position pos:line="309" pos:column="5"/></name> <operator pos:line="309" pos:column="6">=<pos:position pos:line="309" pos:column="7"/></operator> <call><name pos:line="309" pos:column="8">sqlite3VdbeHalt<pos:position pos:line="309" pos:column="23"/></name><argument_list pos:line="309" pos:column="23">(<argument><expr><name pos:line="309" pos:column="24">p<pos:position pos:line="309" pos:column="25"/></name></expr></argument>)<pos:position pos:line="309" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="309" pos:column="27"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="310" pos:column="3">assert<pos:position pos:line="310" pos:column="9"/></name><argument_list pos:line="310" pos:column="9">( <argument><expr><name pos:line="310" pos:column="11">rc<pos:position pos:line="310" pos:column="13"/></name><operator pos:line="310" pos:column="13">==<pos:position pos:line="310" pos:column="15"/></operator><name pos:line="310" pos:column="15">SQLITE_BUSY<pos:position pos:line="310" pos:column="26"/></name> <operator pos:line="310" pos:column="27">||<pos:position pos:line="310" pos:column="29"/></operator> <name pos:line="310" pos:column="30">rc<pos:position pos:line="310" pos:column="32"/></name><operator pos:line="310" pos:column="32">==<pos:position pos:line="310" pos:column="34"/></operator><name pos:line="310" pos:column="34">SQLITE_OK<pos:position pos:line="310" pos:column="43"/></name></expr></argument> )<pos:position pos:line="310" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="310" pos:column="46"/></expr_stmt>
  <if pos:line="311" pos:column="3">if<condition pos:line="311" pos:column="5">( <expr><name pos:line="311" pos:column="7">rc<pos:position pos:line="311" pos:column="9"/></name><operator pos:line="311" pos:column="9">==<pos:position pos:line="311" pos:column="11"/></operator><name pos:line="311" pos:column="11">SQLITE_BUSY<pos:position pos:line="311" pos:column="22"/></name></expr> )<pos:position pos:line="311" pos:column="24"/></condition><then><block pos:line="311" pos:column="24">{
    <expr_stmt><expr><name><name pos:line="312" pos:column="5">p<pos:position pos:line="312" pos:column="6"/></name><operator pos:line="312" pos:column="6">-&gt;<pos:position pos:line="312" pos:column="11"/></operator><name pos:line="312" pos:column="8">rc<pos:position pos:line="312" pos:column="10"/></name></name> <operator pos:line="312" pos:column="11">=<pos:position pos:line="312" pos:column="12"/></operator> <name pos:line="312" pos:column="13">rc<pos:position pos:line="312" pos:column="15"/></name> <operator pos:line="312" pos:column="16">=<pos:position pos:line="312" pos:column="17"/></operator> <name pos:line="312" pos:column="18">SQLITE_BUSY<pos:position pos:line="312" pos:column="29"/></name></expr>;<pos:position pos:line="312" pos:column="30"/></expr_stmt>
  }<pos:position pos:line="313" pos:column="4"/></block></then><else pos:line="313" pos:column="4">else<block pos:line="313" pos:column="8">{
    <expr_stmt><expr><name pos:line="314" pos:column="5">rc<pos:position pos:line="314" pos:column="7"/></name> <operator pos:line="314" pos:column="8">=<pos:position pos:line="314" pos:column="9"/></operator> <ternary><condition><expr><name><name pos:line="314" pos:column="10">p<pos:position pos:line="314" pos:column="11"/></name><operator pos:line="314" pos:column="11">-&gt;<pos:position pos:line="314" pos:column="16"/></operator><name pos:line="314" pos:column="13">rc<pos:position pos:line="314" pos:column="15"/></name></name></expr> ?<pos:position pos:line="314" pos:column="17"/></condition><then pos:line="314" pos:column="17"> <expr><name pos:line="314" pos:column="18">SQLITE_ERROR<pos:position pos:line="314" pos:column="30"/></name></expr> <pos:position pos:line="314" pos:column="31"/></then><else pos:line="314" pos:column="31">: <expr><name pos:line="314" pos:column="33">SQLITE_DONE<pos:position pos:line="314" pos:column="44"/></name></expr></else></ternary></expr>;<pos:position pos:line="314" pos:column="45"/></expr_stmt>
  }<pos:position pos:line="315" pos:column="4"/></block></else></if>
  <goto pos:line="316" pos:column="3">goto <name pos:line="316" pos:column="8">vdbe_return<pos:position pos:line="316" pos:column="19"/></name>;<pos:position pos:line="316" pos:column="20"/></goto>
}<pos:position pos:line="317" pos:column="2"/></block>

<comment type="block" pos:line="319" pos:column="1">/* Opcode: Integer P1 P2 * * *
**
** The 32-bit integer value P1 is written into register P2.
*/</comment>
<case pos:line="323" pos:column="1">case <expr><name pos:line="323" pos:column="6">OP_Integer<pos:position pos:line="323" pos:column="16"/></name></expr>:<pos:position pos:line="323" pos:column="17"/></case> <block pos:line="323" pos:column="18">{         <comment type="block" pos:line="323" pos:column="28">/* out2-prerelease */</comment>
  <expr_stmt><expr><name><name pos:line="324" pos:column="3">pOut<pos:position pos:line="324" pos:column="7"/></name><operator pos:line="324" pos:column="7">-&gt;<pos:position pos:line="324" pos:column="12"/></operator><name pos:line="324" pos:column="9">flags<pos:position pos:line="324" pos:column="14"/></name></name> <operator pos:line="324" pos:column="15">=<pos:position pos:line="324" pos:column="16"/></operator> <name pos:line="324" pos:column="17">MEM_Int<pos:position pos:line="324" pos:column="24"/></name></expr>;<pos:position pos:line="324" pos:column="25"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="325" pos:column="3">pOut<pos:position pos:line="325" pos:column="7"/></name><operator pos:line="325" pos:column="7">-&gt;<pos:position pos:line="325" pos:column="12"/></operator><name pos:line="325" pos:column="9">u<pos:position pos:line="325" pos:column="10"/></name><operator pos:line="325" pos:column="10">.<pos:position pos:line="325" pos:column="11"/></operator><name pos:line="325" pos:column="11">i<pos:position pos:line="325" pos:column="12"/></name></name> <operator pos:line="325" pos:column="13">=<pos:position pos:line="325" pos:column="14"/></operator> <name><name pos:line="325" pos:column="15">pOp<pos:position pos:line="325" pos:column="18"/></name><operator pos:line="325" pos:column="18">-&gt;<pos:position pos:line="325" pos:column="23"/></operator><name pos:line="325" pos:column="20">p1<pos:position pos:line="325" pos:column="22"/></name></name></expr>;<pos:position pos:line="325" pos:column="23"/></expr_stmt>
  <break pos:line="326" pos:column="3">break;<pos:position pos:line="326" pos:column="9"/></break>
}<pos:position pos:line="327" pos:column="2"/></block>

<comment type="block" pos:line="329" pos:column="1">/* Opcode: Int64 * P2 * P4 *
**
** P4 is a pointer to a 64-bit integer value.
** Write that value into register P2.
*/</comment>
<case pos:line="334" pos:column="1">case <expr><name pos:line="334" pos:column="6">OP_Int64<pos:position pos:line="334" pos:column="14"/></name></expr>:<pos:position pos:line="334" pos:column="15"/></case> <block pos:line="334" pos:column="16">{           <comment type="block" pos:line="334" pos:column="28">/* out2-prerelease */</comment>
  <expr_stmt><expr><call><name pos:line="335" pos:column="3">assert<pos:position pos:line="335" pos:column="9"/></name><argument_list pos:line="335" pos:column="9">( <argument><expr><name><name pos:line="335" pos:column="11">pOp<pos:position pos:line="335" pos:column="14"/></name><operator pos:line="335" pos:column="14">-&gt;<pos:position pos:line="335" pos:column="19"/></operator><name pos:line="335" pos:column="16">p4<pos:position pos:line="335" pos:column="18"/></name><operator pos:line="335" pos:column="18">.<pos:position pos:line="335" pos:column="19"/></operator><name pos:line="335" pos:column="19">pI64<pos:position pos:line="335" pos:column="23"/></name></name><operator pos:line="335" pos:column="23">!=<pos:position pos:line="335" pos:column="25"/></operator><literal type="number" pos:line="335" pos:column="25">0<pos:position pos:line="335" pos:column="26"/></literal></expr></argument> )<pos:position pos:line="335" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="335" pos:column="29"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="336" pos:column="3">pOut<pos:position pos:line="336" pos:column="7"/></name><operator pos:line="336" pos:column="7">-&gt;<pos:position pos:line="336" pos:column="12"/></operator><name pos:line="336" pos:column="9">flags<pos:position pos:line="336" pos:column="14"/></name></name> <operator pos:line="336" pos:column="15">=<pos:position pos:line="336" pos:column="16"/></operator> <name pos:line="336" pos:column="17">MEM_Int<pos:position pos:line="336" pos:column="24"/></name></expr>;<pos:position pos:line="336" pos:column="25"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="337" pos:column="3">pOut<pos:position pos:line="337" pos:column="7"/></name><operator pos:line="337" pos:column="7">-&gt;<pos:position pos:line="337" pos:column="12"/></operator><name pos:line="337" pos:column="9">u<pos:position pos:line="337" pos:column="10"/></name><operator pos:line="337" pos:column="10">.<pos:position pos:line="337" pos:column="11"/></operator><name pos:line="337" pos:column="11">i<pos:position pos:line="337" pos:column="12"/></name></name> <operator pos:line="337" pos:column="13">=<pos:position pos:line="337" pos:column="14"/></operator> <operator pos:line="337" pos:column="15">*<pos:position pos:line="337" pos:column="16"/></operator><name><name pos:line="337" pos:column="16">pOp<pos:position pos:line="337" pos:column="19"/></name><operator pos:line="337" pos:column="19">-&gt;<pos:position pos:line="337" pos:column="24"/></operator><name pos:line="337" pos:column="21">p4<pos:position pos:line="337" pos:column="23"/></name><operator pos:line="337" pos:column="23">.<pos:position pos:line="337" pos:column="24"/></operator><name pos:line="337" pos:column="24">pI64<pos:position pos:line="337" pos:column="28"/></name></name></expr>;<pos:position pos:line="337" pos:column="29"/></expr_stmt>
  <break pos:line="338" pos:column="3">break;<pos:position pos:line="338" pos:column="9"/></break>
}<pos:position pos:line="339" pos:column="2"/></block>

<comment type="block" pos:line="341" pos:column="1">/* Opcode: Real * P2 * P4 *
**
** P4 is a pointer to a 64-bit floating point value.
** Write that value into register P2.
*/</comment>
<case pos:line="346" pos:column="1">case <expr><name pos:line="346" pos:column="6">OP_Real<pos:position pos:line="346" pos:column="13"/></name></expr>:<pos:position pos:line="346" pos:column="14"/></case> <block pos:line="346" pos:column="15">{            <comment type="block" pos:line="346" pos:column="28">/* same as TK_FLOAT, out2-prerelease */</comment>
  <expr_stmt><expr><name><name pos:line="347" pos:column="3">pOut<pos:position pos:line="347" pos:column="7"/></name><operator pos:line="347" pos:column="7">-&gt;<pos:position pos:line="347" pos:column="12"/></operator><name pos:line="347" pos:column="9">flags<pos:position pos:line="347" pos:column="14"/></name></name> <operator pos:line="347" pos:column="15">=<pos:position pos:line="347" pos:column="16"/></operator> <name pos:line="347" pos:column="17">MEM_Real<pos:position pos:line="347" pos:column="25"/></name></expr>;<pos:position pos:line="347" pos:column="26"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="348" pos:column="3">assert<pos:position pos:line="348" pos:column="9"/></name><argument_list pos:line="348" pos:column="9">( <argument><expr><operator pos:line="348" pos:column="11">!<pos:position pos:line="348" pos:column="12"/></operator><call><name pos:line="348" pos:column="12">sqlite3IsNaN<pos:position pos:line="348" pos:column="24"/></name><argument_list pos:line="348" pos:column="24">(<argument><expr><operator pos:line="348" pos:column="25">*<pos:position pos:line="348" pos:column="26"/></operator><name><name pos:line="348" pos:column="26">pOp<pos:position pos:line="348" pos:column="29"/></name><operator pos:line="348" pos:column="29">-&gt;<pos:position pos:line="348" pos:column="34"/></operator><name pos:line="348" pos:column="31">p4<pos:position pos:line="348" pos:column="33"/></name><operator pos:line="348" pos:column="33">.<pos:position pos:line="348" pos:column="34"/></operator><name pos:line="348" pos:column="34">pReal<pos:position pos:line="348" pos:column="39"/></name></name></expr></argument>)<pos:position pos:line="348" pos:column="40"/></argument_list></call></expr></argument> )<pos:position pos:line="348" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="348" pos:column="43"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="349" pos:column="3">pOut<pos:position pos:line="349" pos:column="7"/></name><operator pos:line="349" pos:column="7">-&gt;<pos:position pos:line="349" pos:column="12"/></operator><name pos:line="349" pos:column="9">r<pos:position pos:line="349" pos:column="10"/></name></name> <operator pos:line="349" pos:column="11">=<pos:position pos:line="349" pos:column="12"/></operator> <operator pos:line="349" pos:column="13">*<pos:position pos:line="349" pos:column="14"/></operator><name><name pos:line="349" pos:column="14">pOp<pos:position pos:line="349" pos:column="17"/></name><operator pos:line="349" pos:column="17">-&gt;<pos:position pos:line="349" pos:column="22"/></operator><name pos:line="349" pos:column="19">p4<pos:position pos:line="349" pos:column="21"/></name><operator pos:line="349" pos:column="21">.<pos:position pos:line="349" pos:column="22"/></operator><name pos:line="349" pos:column="22">pReal<pos:position pos:line="349" pos:column="27"/></name></name></expr>;<pos:position pos:line="349" pos:column="28"/></expr_stmt>
  <break pos:line="350" pos:column="3">break;<pos:position pos:line="350" pos:column="9"/></break>
}<pos:position pos:line="351" pos:column="2"/></block>

<comment type="block" pos:line="353" pos:column="1">/* Opcode: String8 * P2 * P4 *
**
** P4 points to a nul terminated UTF-8 string. This opcode is transformed 
** into an OP_String before it is executed for the first time.
*/</comment>
<case pos:line="358" pos:column="1">case <expr><name pos:line="358" pos:column="6">OP_String8<pos:position pos:line="358" pos:column="16"/></name></expr>:<pos:position pos:line="358" pos:column="17"/></case> <block pos:line="358" pos:column="18">{         <comment type="block" pos:line="358" pos:column="28">/* same as TK_STRING, out2-prerelease */</comment>
  <expr_stmt><expr><call><name pos:line="359" pos:column="3">assert<pos:position pos:line="359" pos:column="9"/></name><argument_list pos:line="359" pos:column="9">( <argument><expr><name><name pos:line="359" pos:column="11">pOp<pos:position pos:line="359" pos:column="14"/></name><operator pos:line="359" pos:column="14">-&gt;<pos:position pos:line="359" pos:column="19"/></operator><name pos:line="359" pos:column="16">p4<pos:position pos:line="359" pos:column="18"/></name><operator pos:line="359" pos:column="18">.<pos:position pos:line="359" pos:column="19"/></operator><name pos:line="359" pos:column="19">z<pos:position pos:line="359" pos:column="20"/></name></name><operator pos:line="359" pos:column="20">!=<pos:position pos:line="359" pos:column="22"/></operator><literal type="number" pos:line="359" pos:column="22">0<pos:position pos:line="359" pos:column="23"/></literal></expr></argument> )<pos:position pos:line="359" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="359" pos:column="26"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="360" pos:column="3">pOp<pos:position pos:line="360" pos:column="6"/></name><operator pos:line="360" pos:column="6">-&gt;<pos:position pos:line="360" pos:column="11"/></operator><name pos:line="360" pos:column="8">opcode<pos:position pos:line="360" pos:column="14"/></name></name> <operator pos:line="360" pos:column="15">=<pos:position pos:line="360" pos:column="16"/></operator> <name pos:line="360" pos:column="17">OP_String<pos:position pos:line="360" pos:column="26"/></name></expr>;<pos:position pos:line="360" pos:column="27"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="361" pos:column="3">pOp<pos:position pos:line="361" pos:column="6"/></name><operator pos:line="361" pos:column="6">-&gt;<pos:position pos:line="361" pos:column="11"/></operator><name pos:line="361" pos:column="8">p1<pos:position pos:line="361" pos:column="10"/></name></name> <operator pos:line="361" pos:column="11">=<pos:position pos:line="361" pos:column="12"/></operator> <call><name pos:line="361" pos:column="13">sqlite3Strlen30<pos:position pos:line="361" pos:column="28"/></name><argument_list pos:line="361" pos:column="28">(<argument><expr><name><name pos:line="361" pos:column="29">pOp<pos:position pos:line="361" pos:column="32"/></name><operator pos:line="361" pos:column="32">-&gt;<pos:position pos:line="361" pos:column="37"/></operator><name pos:line="361" pos:column="34">p4<pos:position pos:line="361" pos:column="36"/></name><operator pos:line="361" pos:column="36">.<pos:position pos:line="361" pos:column="37"/></operator><name pos:line="361" pos:column="37">z<pos:position pos:line="361" pos:column="38"/></name></name></expr></argument>)<pos:position pos:line="361" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="361" pos:column="40"/></expr_stmt>

<cpp:ifndef pos:line="363" pos:column="1">#<cpp:directive pos:line="363" pos:column="2">ifndef<pos:position pos:line="363" pos:column="8"/></cpp:directive> <name pos:line="363" pos:column="9">SQLITE_OMIT_UTF16<pos:position pos:line="363" pos:column="26"/></name></cpp:ifndef>
  <if pos:line="364" pos:column="3">if<condition pos:line="364" pos:column="5">( <expr><name pos:line="364" pos:column="7">encoding<pos:position pos:line="364" pos:column="15"/></name><operator pos:line="364" pos:column="15">!=<pos:position pos:line="364" pos:column="17"/></operator><name pos:line="364" pos:column="17">SQLITE_UTF8<pos:position pos:line="364" pos:column="28"/></name></expr> )<pos:position pos:line="364" pos:column="30"/></condition><then><block pos:line="364" pos:column="30">{
    <expr_stmt><expr><call><name pos:line="365" pos:column="5">sqlite3VdbeMemSetStr<pos:position pos:line="365" pos:column="25"/></name><argument_list pos:line="365" pos:column="25">(<argument><expr><name pos:line="365" pos:column="26">pOut<pos:position pos:line="365" pos:column="30"/></name></expr></argument>, <argument><expr><name><name pos:line="365" pos:column="32">pOp<pos:position pos:line="365" pos:column="35"/></name><operator pos:line="365" pos:column="35">-&gt;<pos:position pos:line="365" pos:column="40"/></operator><name pos:line="365" pos:column="37">p4<pos:position pos:line="365" pos:column="39"/></name><operator pos:line="365" pos:column="39">.<pos:position pos:line="365" pos:column="40"/></operator><name pos:line="365" pos:column="40">z<pos:position pos:line="365" pos:column="41"/></name></name></expr></argument>, <argument><expr><operator pos:line="365" pos:column="43">-<pos:position pos:line="365" pos:column="44"/></operator><literal type="number" pos:line="365" pos:column="44">1<pos:position pos:line="365" pos:column="45"/></literal></expr></argument>, <argument><expr><name pos:line="365" pos:column="47">SQLITE_UTF8<pos:position pos:line="365" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="365" pos:column="60">SQLITE_STATIC<pos:position pos:line="365" pos:column="73"/></name></expr></argument>)<pos:position pos:line="365" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="365" pos:column="75"/></expr_stmt>
    <if pos:line="366" pos:column="5">if<condition pos:line="366" pos:column="7">( <expr><name pos:line="366" pos:column="9">SQLITE_OK<pos:position pos:line="366" pos:column="18"/></name><operator pos:line="366" pos:column="18">!=<pos:position pos:line="366" pos:column="20"/></operator><call><name pos:line="366" pos:column="20">sqlite3VdbeChangeEncoding<pos:position pos:line="366" pos:column="45"/></name><argument_list pos:line="366" pos:column="45">(<argument><expr><name pos:line="366" pos:column="46">pOut<pos:position pos:line="366" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="366" pos:column="52">encoding<pos:position pos:line="366" pos:column="60"/></name></expr></argument>)<pos:position pos:line="366" pos:column="61"/></argument_list></call></expr> )<pos:position pos:line="366" pos:column="63"/></condition><then pos:line="366" pos:column="63"> <block type="pseudo"><goto pos:line="366" pos:column="64">goto <name pos:line="366" pos:column="69">no_mem<pos:position pos:line="366" pos:column="75"/></name>;<pos:position pos:line="366" pos:column="76"/></goto></block></then></if>
    <if pos:line="367" pos:column="5">if<condition pos:line="367" pos:column="7">( <expr><name pos:line="367" pos:column="9">SQLITE_OK<pos:position pos:line="367" pos:column="18"/></name><operator pos:line="367" pos:column="18">!=<pos:position pos:line="367" pos:column="20"/></operator><call><name pos:line="367" pos:column="20">sqlite3VdbeMemMakeWriteable<pos:position pos:line="367" pos:column="47"/></name><argument_list pos:line="367" pos:column="47">(<argument><expr><name pos:line="367" pos:column="48">pOut<pos:position pos:line="367" pos:column="52"/></name></expr></argument>)<pos:position pos:line="367" pos:column="53"/></argument_list></call></expr> )<pos:position pos:line="367" pos:column="55"/></condition><then pos:line="367" pos:column="55"> <block type="pseudo"><goto pos:line="367" pos:column="56">goto <name pos:line="367" pos:column="61">no_mem<pos:position pos:line="367" pos:column="67"/></name>;<pos:position pos:line="367" pos:column="68"/></goto></block></then></if>
    <expr_stmt><expr><name><name pos:line="368" pos:column="5">pOut<pos:position pos:line="368" pos:column="9"/></name><operator pos:line="368" pos:column="9">-&gt;<pos:position pos:line="368" pos:column="14"/></operator><name pos:line="368" pos:column="11">zMalloc<pos:position pos:line="368" pos:column="18"/></name></name> <operator pos:line="368" pos:column="19">=<pos:position pos:line="368" pos:column="20"/></operator> <literal type="number" pos:line="368" pos:column="21">0<pos:position pos:line="368" pos:column="22"/></literal></expr>;<pos:position pos:line="368" pos:column="23"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="369" pos:column="5">pOut<pos:position pos:line="369" pos:column="9"/></name><operator pos:line="369" pos:column="9">-&gt;<pos:position pos:line="369" pos:column="14"/></operator><name pos:line="369" pos:column="11">flags<pos:position pos:line="369" pos:column="16"/></name></name> <operator pos:line="369" pos:column="17">|=<pos:position pos:line="369" pos:column="19"/></operator> <name pos:line="369" pos:column="20">MEM_Static<pos:position pos:line="369" pos:column="30"/></name></expr>;<pos:position pos:line="369" pos:column="31"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="370" pos:column="5">pOut<pos:position pos:line="370" pos:column="9"/></name><operator pos:line="370" pos:column="9">-&gt;<pos:position pos:line="370" pos:column="14"/></operator><name pos:line="370" pos:column="11">flags<pos:position pos:line="370" pos:column="16"/></name></name> <operator pos:line="370" pos:column="17">&amp;=<pos:position pos:line="370" pos:column="23"/></operator> <operator pos:line="370" pos:column="20">~<pos:position pos:line="370" pos:column="21"/></operator><name pos:line="370" pos:column="21">MEM_Dyn<pos:position pos:line="370" pos:column="28"/></name></expr>;<pos:position pos:line="370" pos:column="29"/></expr_stmt>
    <if pos:line="371" pos:column="5">if<condition pos:line="371" pos:column="7">( <expr><name><name pos:line="371" pos:column="9">pOp<pos:position pos:line="371" pos:column="12"/></name><operator pos:line="371" pos:column="12">-&gt;<pos:position pos:line="371" pos:column="17"/></operator><name pos:line="371" pos:column="14">p4type<pos:position pos:line="371" pos:column="20"/></name></name><operator pos:line="371" pos:column="20">==<pos:position pos:line="371" pos:column="22"/></operator><name pos:line="371" pos:column="22">P4_DYNAMIC<pos:position pos:line="371" pos:column="32"/></name></expr> )<pos:position pos:line="371" pos:column="34"/></condition><then><block pos:line="371" pos:column="34">{
      <expr_stmt><expr><call><name pos:line="372" pos:column="7">sqlite3DbFree<pos:position pos:line="372" pos:column="20"/></name><argument_list pos:line="372" pos:column="20">(<argument><expr><name pos:line="372" pos:column="21">db<pos:position pos:line="372" pos:column="23"/></name></expr></argument>, <argument><expr><name><name pos:line="372" pos:column="25">pOp<pos:position pos:line="372" pos:column="28"/></name><operator pos:line="372" pos:column="28">-&gt;<pos:position pos:line="372" pos:column="33"/></operator><name pos:line="372" pos:column="30">p4<pos:position pos:line="372" pos:column="32"/></name><operator pos:line="372" pos:column="32">.<pos:position pos:line="372" pos:column="33"/></operator><name pos:line="372" pos:column="33">z<pos:position pos:line="372" pos:column="34"/></name></name></expr></argument>)<pos:position pos:line="372" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="372" pos:column="36"/></expr_stmt>
    }<pos:position pos:line="373" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name><name pos:line="374" pos:column="5">pOp<pos:position pos:line="374" pos:column="8"/></name><operator pos:line="374" pos:column="8">-&gt;<pos:position pos:line="374" pos:column="13"/></operator><name pos:line="374" pos:column="10">p4type<pos:position pos:line="374" pos:column="16"/></name></name> <operator pos:line="374" pos:column="17">=<pos:position pos:line="374" pos:column="18"/></operator> <name pos:line="374" pos:column="19">P4_DYNAMIC<pos:position pos:line="374" pos:column="29"/></name></expr>;<pos:position pos:line="374" pos:column="30"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="375" pos:column="5">pOp<pos:position pos:line="375" pos:column="8"/></name><operator pos:line="375" pos:column="8">-&gt;<pos:position pos:line="375" pos:column="13"/></operator><name pos:line="375" pos:column="10">p4<pos:position pos:line="375" pos:column="12"/></name><operator pos:line="375" pos:column="12">.<pos:position pos:line="375" pos:column="13"/></operator><name pos:line="375" pos:column="13">z<pos:position pos:line="375" pos:column="14"/></name></name> <operator pos:line="375" pos:column="15">=<pos:position pos:line="375" pos:column="16"/></operator> <name><name pos:line="375" pos:column="17">pOut<pos:position pos:line="375" pos:column="21"/></name><operator pos:line="375" pos:column="21">-&gt;<pos:position pos:line="375" pos:column="26"/></operator><name pos:line="375" pos:column="23">z<pos:position pos:line="375" pos:column="24"/></name></name></expr>;<pos:position pos:line="375" pos:column="25"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="376" pos:column="5">pOp<pos:position pos:line="376" pos:column="8"/></name><operator pos:line="376" pos:column="8">-&gt;<pos:position pos:line="376" pos:column="13"/></operator><name pos:line="376" pos:column="10">p1<pos:position pos:line="376" pos:column="12"/></name></name> <operator pos:line="376" pos:column="13">=<pos:position pos:line="376" pos:column="14"/></operator> <name><name pos:line="376" pos:column="15">pOut<pos:position pos:line="376" pos:column="19"/></name><operator pos:line="376" pos:column="19">-&gt;<pos:position pos:line="376" pos:column="24"/></operator><name pos:line="376" pos:column="21">n<pos:position pos:line="376" pos:column="22"/></name></name></expr>;<pos:position pos:line="376" pos:column="23"/></expr_stmt>
    <if pos:line="377" pos:column="5">if<condition pos:line="377" pos:column="7">( <expr><name><name pos:line="377" pos:column="9">pOp<pos:position pos:line="377" pos:column="12"/></name><operator pos:line="377" pos:column="12">-&gt;<pos:position pos:line="377" pos:column="17"/></operator><name pos:line="377" pos:column="14">p1<pos:position pos:line="377" pos:column="16"/></name></name><operator pos:line="377" pos:column="16">&gt;<pos:position pos:line="377" pos:column="20"/></operator><name><name pos:line="377" pos:column="17">db<pos:position pos:line="377" pos:column="19"/></name><operator pos:line="377" pos:column="19">-&gt;<pos:position pos:line="377" pos:column="24"/></operator><name pos:line="377" pos:column="21">aLimit<pos:position pos:line="377" pos:column="27"/></name><index pos:line="377" pos:column="27">[<expr><name pos:line="377" pos:column="28">SQLITE_LIMIT_LENGTH<pos:position pos:line="377" pos:column="47"/></name></expr>]<pos:position pos:line="377" pos:column="48"/></index></name></expr> )<pos:position pos:line="377" pos:column="50"/></condition><then><block pos:line="377" pos:column="50">{
      <goto pos:line="378" pos:column="7">goto <name pos:line="378" pos:column="12">too_big<pos:position pos:line="378" pos:column="19"/></name>;<pos:position pos:line="378" pos:column="20"/></goto>
    }<pos:position pos:line="379" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="380" pos:column="5">UPDATE_MAX_BLOBSIZE<pos:position pos:line="380" pos:column="24"/></name><argument_list pos:line="380" pos:column="24">(<argument><expr><name pos:line="380" pos:column="25">pOut<pos:position pos:line="380" pos:column="29"/></name></expr></argument>)<pos:position pos:line="380" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="380" pos:column="31"/></expr_stmt>
    <break pos:line="381" pos:column="5">break;<pos:position pos:line="381" pos:column="11"/></break>
  }<pos:position pos:line="382" pos:column="4"/></block></then></if>
<cpp:endif pos:line="383" pos:column="1">#<cpp:directive pos:line="383" pos:column="2">endif<pos:position pos:line="383" pos:column="7"/></cpp:directive></cpp:endif>
  <if pos:line="384" pos:column="3">if<condition pos:line="384" pos:column="5">( <expr><name><name pos:line="384" pos:column="7">pOp<pos:position pos:line="384" pos:column="10"/></name><operator pos:line="384" pos:column="10">-&gt;<pos:position pos:line="384" pos:column="15"/></operator><name pos:line="384" pos:column="12">p1<pos:position pos:line="384" pos:column="14"/></name></name><operator pos:line="384" pos:column="14">&gt;<pos:position pos:line="384" pos:column="18"/></operator><name><name pos:line="384" pos:column="15">db<pos:position pos:line="384" pos:column="17"/></name><operator pos:line="384" pos:column="17">-&gt;<pos:position pos:line="384" pos:column="22"/></operator><name pos:line="384" pos:column="19">aLimit<pos:position pos:line="384" pos:column="25"/></name><index pos:line="384" pos:column="25">[<expr><name pos:line="384" pos:column="26">SQLITE_LIMIT_LENGTH<pos:position pos:line="384" pos:column="45"/></name></expr>]<pos:position pos:line="384" pos:column="46"/></index></name></expr> )<pos:position pos:line="384" pos:column="48"/></condition><then><block pos:line="384" pos:column="48">{
    <goto pos:line="385" pos:column="5">goto <name pos:line="385" pos:column="10">too_big<pos:position pos:line="385" pos:column="17"/></name>;<pos:position pos:line="385" pos:column="18"/></goto>
  }<pos:position pos:line="386" pos:column="4"/></block></then></if>
  <comment type="block" pos:line="387" pos:column="3">/* Fall through to the next case, OP_String */</comment>
}<pos:position pos:line="388" pos:column="2"/></block>
  
<comment type="block" pos:line="390" pos:column="1">/* Opcode: String P1 P2 * P4 *
**
** The string value P4 of length P1 (bytes) is stored in register P2.
*/</comment>
<case pos:line="394" pos:column="1">case <expr><name pos:line="394" pos:column="6">OP_String<pos:position pos:line="394" pos:column="15"/></name></expr>:<pos:position pos:line="394" pos:column="16"/></case> <block pos:line="394" pos:column="17">{          <comment type="block" pos:line="394" pos:column="28">/* out2-prerelease */</comment>
  <expr_stmt><expr><call><name pos:line="395" pos:column="3">assert<pos:position pos:line="395" pos:column="9"/></name><argument_list pos:line="395" pos:column="9">( <argument><expr><name><name pos:line="395" pos:column="11">pOp<pos:position pos:line="395" pos:column="14"/></name><operator pos:line="395" pos:column="14">-&gt;<pos:position pos:line="395" pos:column="19"/></operator><name pos:line="395" pos:column="16">p4<pos:position pos:line="395" pos:column="18"/></name><operator pos:line="395" pos:column="18">.<pos:position pos:line="395" pos:column="19"/></operator><name pos:line="395" pos:column="19">z<pos:position pos:line="395" pos:column="20"/></name></name><operator pos:line="395" pos:column="20">!=<pos:position pos:line="395" pos:column="22"/></operator><literal type="number" pos:line="395" pos:column="22">0<pos:position pos:line="395" pos:column="23"/></literal></expr></argument> )<pos:position pos:line="395" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="395" pos:column="26"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="396" pos:column="3">pOut<pos:position pos:line="396" pos:column="7"/></name><operator pos:line="396" pos:column="7">-&gt;<pos:position pos:line="396" pos:column="12"/></operator><name pos:line="396" pos:column="9">flags<pos:position pos:line="396" pos:column="14"/></name></name> <operator pos:line="396" pos:column="15">=<pos:position pos:line="396" pos:column="16"/></operator> <name pos:line="396" pos:column="17">MEM_Str<pos:position pos:line="396" pos:column="24"/></name><operator pos:line="396" pos:column="24">|<pos:position pos:line="396" pos:column="25"/></operator><name pos:line="396" pos:column="25">MEM_Static<pos:position pos:line="396" pos:column="35"/></name><operator pos:line="396" pos:column="35">|<pos:position pos:line="396" pos:column="36"/></operator><name pos:line="396" pos:column="36">MEM_Term<pos:position pos:line="396" pos:column="44"/></name></expr>;<pos:position pos:line="396" pos:column="45"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="397" pos:column="3">pOut<pos:position pos:line="397" pos:column="7"/></name><operator pos:line="397" pos:column="7">-&gt;<pos:position pos:line="397" pos:column="12"/></operator><name pos:line="397" pos:column="9">z<pos:position pos:line="397" pos:column="10"/></name></name> <operator pos:line="397" pos:column="11">=<pos:position pos:line="397" pos:column="12"/></operator> <name><name pos:line="397" pos:column="13">pOp<pos:position pos:line="397" pos:column="16"/></name><operator pos:line="397" pos:column="16">-&gt;<pos:position pos:line="397" pos:column="21"/></operator><name pos:line="397" pos:column="18">p4<pos:position pos:line="397" pos:column="20"/></name><operator pos:line="397" pos:column="20">.<pos:position pos:line="397" pos:column="21"/></operator><name pos:line="397" pos:column="21">z<pos:position pos:line="397" pos:column="22"/></name></name></expr>;<pos:position pos:line="397" pos:column="23"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="398" pos:column="3">pOut<pos:position pos:line="398" pos:column="7"/></name><operator pos:line="398" pos:column="7">-&gt;<pos:position pos:line="398" pos:column="12"/></operator><name pos:line="398" pos:column="9">n<pos:position pos:line="398" pos:column="10"/></name></name> <operator pos:line="398" pos:column="11">=<pos:position pos:line="398" pos:column="12"/></operator> <name><name pos:line="398" pos:column="13">pOp<pos:position pos:line="398" pos:column="16"/></name><operator pos:line="398" pos:column="16">-&gt;<pos:position pos:line="398" pos:column="21"/></operator><name pos:line="398" pos:column="18">p1<pos:position pos:line="398" pos:column="20"/></name></name></expr>;<pos:position pos:line="398" pos:column="21"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="399" pos:column="3">pOut<pos:position pos:line="399" pos:column="7"/></name><operator pos:line="399" pos:column="7">-&gt;<pos:position pos:line="399" pos:column="12"/></operator><name pos:line="399" pos:column="9">enc<pos:position pos:line="399" pos:column="12"/></name></name> <operator pos:line="399" pos:column="13">=<pos:position pos:line="399" pos:column="14"/></operator> <name pos:line="399" pos:column="15">encoding<pos:position pos:line="399" pos:column="23"/></name></expr>;<pos:position pos:line="399" pos:column="24"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="400" pos:column="3">UPDATE_MAX_BLOBSIZE<pos:position pos:line="400" pos:column="22"/></name><argument_list pos:line="400" pos:column="22">(<argument><expr><name pos:line="400" pos:column="23">pOut<pos:position pos:line="400" pos:column="27"/></name></expr></argument>)<pos:position pos:line="400" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="400" pos:column="29"/></expr_stmt>
  <break pos:line="401" pos:column="3">break;<pos:position pos:line="401" pos:column="9"/></break>
}<pos:position pos:line="402" pos:column="2"/></block>

<comment type="block" pos:line="404" pos:column="1">/* Opcode: Null * P2 * * *
**
** Write a NULL into register P2.
*/</comment>
<case pos:line="408" pos:column="1">case <expr><name pos:line="408" pos:column="6">OP_Null<pos:position pos:line="408" pos:column="13"/></name></expr>:<pos:position pos:line="408" pos:column="14"/></case> <block pos:line="408" pos:column="15">{           <comment type="block" pos:line="408" pos:column="27">/* out2-prerelease */</comment>
  <break pos:line="409" pos:column="3">break;<pos:position pos:line="409" pos:column="9"/></break>
}<pos:position pos:line="410" pos:column="2"/></block>


<comment type="block" pos:line="413" pos:column="1">/* Opcode: Blob P1 P2 * P4
**
** P4 points to a blob of data P1 bytes long.  Store this
** blob in register P2. This instruction is not coded directly
** by the compiler. Instead, the compiler layer specifies
** an OP_HexBlob opcode, with the hex string representation of
** the blob as P4. This opcode is transformed to an OP_Blob
** the first time it is executed.
*/</comment>
<case pos:line="422" pos:column="1">case <expr><name pos:line="422" pos:column="6">OP_Blob<pos:position pos:line="422" pos:column="13"/></name></expr>:<pos:position pos:line="422" pos:column="14"/></case> <block pos:line="422" pos:column="15">{                <comment type="block" pos:line="422" pos:column="32">/* out2-prerelease */</comment>
  <expr_stmt><expr><call><name pos:line="423" pos:column="3">assert<pos:position pos:line="423" pos:column="9"/></name><argument_list pos:line="423" pos:column="9">( <argument><expr><name><name pos:line="423" pos:column="11">pOp<pos:position pos:line="423" pos:column="14"/></name><operator pos:line="423" pos:column="14">-&gt;<pos:position pos:line="423" pos:column="19"/></operator><name pos:line="423" pos:column="16">p1<pos:position pos:line="423" pos:column="18"/></name></name> <operator pos:line="423" pos:column="19">&lt;=<pos:position pos:line="423" pos:column="24"/></operator> <name pos:line="423" pos:column="22">SQLITE_MAX_LENGTH<pos:position pos:line="423" pos:column="39"/></name></expr></argument> )<pos:position pos:line="423" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="423" pos:column="42"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="424" pos:column="3">sqlite3VdbeMemSetStr<pos:position pos:line="424" pos:column="23"/></name><argument_list pos:line="424" pos:column="23">(<argument><expr><name pos:line="424" pos:column="24">pOut<pos:position pos:line="424" pos:column="28"/></name></expr></argument>, <argument><expr><name><name pos:line="424" pos:column="30">pOp<pos:position pos:line="424" pos:column="33"/></name><operator pos:line="424" pos:column="33">-&gt;<pos:position pos:line="424" pos:column="38"/></operator><name pos:line="424" pos:column="35">p4<pos:position pos:line="424" pos:column="37"/></name><operator pos:line="424" pos:column="37">.<pos:position pos:line="424" pos:column="38"/></operator><name pos:line="424" pos:column="38">z<pos:position pos:line="424" pos:column="39"/></name></name></expr></argument>, <argument><expr><name><name pos:line="424" pos:column="41">pOp<pos:position pos:line="424" pos:column="44"/></name><operator pos:line="424" pos:column="44">-&gt;<pos:position pos:line="424" pos:column="49"/></operator><name pos:line="424" pos:column="46">p1<pos:position pos:line="424" pos:column="48"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="424" pos:column="50">0<pos:position pos:line="424" pos:column="51"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="424" pos:column="53">0<pos:position pos:line="424" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="424" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="424" pos:column="56"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="425" pos:column="3">pOut<pos:position pos:line="425" pos:column="7"/></name><operator pos:line="425" pos:column="7">-&gt;<pos:position pos:line="425" pos:column="12"/></operator><name pos:line="425" pos:column="9">enc<pos:position pos:line="425" pos:column="12"/></name></name> <operator pos:line="425" pos:column="13">=<pos:position pos:line="425" pos:column="14"/></operator> <name pos:line="425" pos:column="15">encoding<pos:position pos:line="425" pos:column="23"/></name></expr>;<pos:position pos:line="425" pos:column="24"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="426" pos:column="3">UPDATE_MAX_BLOBSIZE<pos:position pos:line="426" pos:column="22"/></name><argument_list pos:line="426" pos:column="22">(<argument><expr><name pos:line="426" pos:column="23">pOut<pos:position pos:line="426" pos:column="27"/></name></expr></argument>)<pos:position pos:line="426" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="426" pos:column="29"/></expr_stmt>
  <break pos:line="427" pos:column="3">break;<pos:position pos:line="427" pos:column="9"/></break>
}<pos:position pos:line="428" pos:column="2"/></block>

<comment type="block" pos:line="430" pos:column="1">/* Opcode: Variable P1 P2 P3 P4 *
**
** Transfer the values of bound parameters P1..P1+P3-1 into registers
** P2..P2+P3-1.
**
** If the parameter is named, then its name appears in P4 and P3==1.
** The P4 value is used by sqlite3_bind_parameter_name().
*/</comment>
<case pos:line="438" pos:column="1">case <expr><name pos:line="438" pos:column="6">OP_Variable<pos:position pos:line="438" pos:column="17"/></name></expr>:<pos:position pos:line="438" pos:column="18"/></case> <block pos:line="438" pos:column="19">{
  <decl_stmt><decl><type><name pos:line="439" pos:column="3">int<pos:position pos:line="439" pos:column="6"/></name></type> <name pos:line="439" pos:column="7">p1<pos:position pos:line="439" pos:column="9"/></name></decl>;<pos:position pos:line="439" pos:column="10"/></decl_stmt>          <comment type="block" pos:line="439" pos:column="20">/* Variable to copy from */</comment>
  <decl_stmt><decl><type><name pos:line="440" pos:column="3">int<pos:position pos:line="440" pos:column="6"/></name></type> <name pos:line="440" pos:column="7">p2<pos:position pos:line="440" pos:column="9"/></name></decl>;<pos:position pos:line="440" pos:column="10"/></decl_stmt>          <comment type="block" pos:line="440" pos:column="20">/* Register to copy to */</comment>
  <decl_stmt><decl><type><name pos:line="441" pos:column="3">int<pos:position pos:line="441" pos:column="6"/></name></type> <name pos:line="441" pos:column="7">n<pos:position pos:line="441" pos:column="8"/></name></decl>;<pos:position pos:line="441" pos:column="9"/></decl_stmt>           <comment type="block" pos:line="441" pos:column="20">/* Number of values left to copy */</comment>
  <decl_stmt><decl><type><name pos:line="442" pos:column="3">Mem<pos:position pos:line="442" pos:column="6"/></name> <modifier pos:line="442" pos:column="7">*<pos:position pos:line="442" pos:column="8"/></modifier></type><name pos:line="442" pos:column="8">pVar<pos:position pos:line="442" pos:column="12"/></name></decl>;<pos:position pos:line="442" pos:column="13"/></decl_stmt>       <comment type="block" pos:line="442" pos:column="20">/* Value being transferred */</comment>

  <expr_stmt><expr><name pos:line="444" pos:column="3">p1<pos:position pos:line="444" pos:column="5"/></name> <operator pos:line="444" pos:column="6">=<pos:position pos:line="444" pos:column="7"/></operator> <name><name pos:line="444" pos:column="8">pOp<pos:position pos:line="444" pos:column="11"/></name><operator pos:line="444" pos:column="11">-&gt;<pos:position pos:line="444" pos:column="16"/></operator><name pos:line="444" pos:column="13">p1<pos:position pos:line="444" pos:column="15"/></name></name> <operator pos:line="444" pos:column="16">-<pos:position pos:line="444" pos:column="17"/></operator> <literal type="number" pos:line="444" pos:column="18">1<pos:position pos:line="444" pos:column="19"/></literal></expr>;<pos:position pos:line="444" pos:column="20"/></expr_stmt>
  <expr_stmt><expr><name pos:line="445" pos:column="3">p2<pos:position pos:line="445" pos:column="5"/></name> <operator pos:line="445" pos:column="6">=<pos:position pos:line="445" pos:column="7"/></operator> <name><name pos:line="445" pos:column="8">pOp<pos:position pos:line="445" pos:column="11"/></name><operator pos:line="445" pos:column="11">-&gt;<pos:position pos:line="445" pos:column="16"/></operator><name pos:line="445" pos:column="13">p2<pos:position pos:line="445" pos:column="15"/></name></name></expr>;<pos:position pos:line="445" pos:column="16"/></expr_stmt>
  <expr_stmt><expr><name pos:line="446" pos:column="3">n<pos:position pos:line="446" pos:column="4"/></name> <operator pos:line="446" pos:column="5">=<pos:position pos:line="446" pos:column="6"/></operator> <name><name pos:line="446" pos:column="7">pOp<pos:position pos:line="446" pos:column="10"/></name><operator pos:line="446" pos:column="10">-&gt;<pos:position pos:line="446" pos:column="15"/></operator><name pos:line="446" pos:column="12">p3<pos:position pos:line="446" pos:column="14"/></name></name></expr>;<pos:position pos:line="446" pos:column="15"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="447" pos:column="3">assert<pos:position pos:line="447" pos:column="9"/></name><argument_list pos:line="447" pos:column="9">( <argument><expr><name pos:line="447" pos:column="11">p1<pos:position pos:line="447" pos:column="13"/></name><operator pos:line="447" pos:column="13">&gt;=<pos:position pos:line="447" pos:column="18"/></operator><literal type="number" pos:line="447" pos:column="15">0<pos:position pos:line="447" pos:column="16"/></literal> <operator pos:line="447" pos:column="17">&amp;&amp;<pos:position pos:line="447" pos:column="27"/></operator> <name pos:line="447" pos:column="20">p1<pos:position pos:line="447" pos:column="22"/></name><operator pos:line="447" pos:column="22">+<pos:position pos:line="447" pos:column="23"/></operator><name pos:line="447" pos:column="23">n<pos:position pos:line="447" pos:column="24"/></name><operator pos:line="447" pos:column="24">&lt;=<pos:position pos:line="447" pos:column="29"/></operator><name><name pos:line="447" pos:column="26">p<pos:position pos:line="447" pos:column="27"/></name><operator pos:line="447" pos:column="27">-&gt;<pos:position pos:line="447" pos:column="32"/></operator><name pos:line="447" pos:column="29">nVar<pos:position pos:line="447" pos:column="33"/></name></name></expr></argument> )<pos:position pos:line="447" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="447" pos:column="36"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="448" pos:column="3">assert<pos:position pos:line="448" pos:column="9"/></name><argument_list pos:line="448" pos:column="9">( <argument><expr><name pos:line="448" pos:column="11">p2<pos:position pos:line="448" pos:column="13"/></name><operator pos:line="448" pos:column="13">&gt;=<pos:position pos:line="448" pos:column="18"/></operator><literal type="number" pos:line="448" pos:column="15">1<pos:position pos:line="448" pos:column="16"/></literal> <operator pos:line="448" pos:column="17">&amp;&amp;<pos:position pos:line="448" pos:column="27"/></operator> <name pos:line="448" pos:column="20">p2<pos:position pos:line="448" pos:column="22"/></name><operator pos:line="448" pos:column="22">+<pos:position pos:line="448" pos:column="23"/></operator><name pos:line="448" pos:column="23">n<pos:position pos:line="448" pos:column="24"/></name><operator pos:line="448" pos:column="24">-<pos:position pos:line="448" pos:column="25"/></operator><literal type="number" pos:line="448" pos:column="25">1<pos:position pos:line="448" pos:column="26"/></literal><operator pos:line="448" pos:column="26">&lt;=<pos:position pos:line="448" pos:column="31"/></operator><name><name pos:line="448" pos:column="28">p<pos:position pos:line="448" pos:column="29"/></name><operator pos:line="448" pos:column="29">-&gt;<pos:position pos:line="448" pos:column="34"/></operator><name pos:line="448" pos:column="31">nMem<pos:position pos:line="448" pos:column="35"/></name></name></expr></argument> )<pos:position pos:line="448" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="448" pos:column="38"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="449" pos:column="3">assert<pos:position pos:line="449" pos:column="9"/></name><argument_list pos:line="449" pos:column="9">( <argument><expr><name><name pos:line="449" pos:column="11">pOp<pos:position pos:line="449" pos:column="14"/></name><operator pos:line="449" pos:column="14">-&gt;<pos:position pos:line="449" pos:column="19"/></operator><name pos:line="449" pos:column="16">p4<pos:position pos:line="449" pos:column="18"/></name><operator pos:line="449" pos:column="18">.<pos:position pos:line="449" pos:column="19"/></operator><name pos:line="449" pos:column="19">z<pos:position pos:line="449" pos:column="20"/></name></name><operator pos:line="449" pos:column="20">==<pos:position pos:line="449" pos:column="22"/></operator><literal type="number" pos:line="449" pos:column="22">0<pos:position pos:line="449" pos:column="23"/></literal> <operator pos:line="449" pos:column="24">||<pos:position pos:line="449" pos:column="26"/></operator> <name><name pos:line="449" pos:column="27">pOp<pos:position pos:line="449" pos:column="30"/></name><operator pos:line="449" pos:column="30">-&gt;<pos:position pos:line="449" pos:column="35"/></operator><name pos:line="449" pos:column="32">p3<pos:position pos:line="449" pos:column="34"/></name></name><operator pos:line="449" pos:column="34">==<pos:position pos:line="449" pos:column="36"/></operator><literal type="number" pos:line="449" pos:column="36">1<pos:position pos:line="449" pos:column="37"/></literal></expr></argument> )<pos:position pos:line="449" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="449" pos:column="40"/></expr_stmt>

  <while pos:line="451" pos:column="3">while<condition pos:line="451" pos:column="8">( <expr><name pos:line="451" pos:column="10">n<pos:position pos:line="451" pos:column="11"/></name><operator pos:line="451" pos:column="11">--<pos:position pos:line="451" pos:column="13"/></operator> <operator pos:line="451" pos:column="14">&gt;<pos:position pos:line="451" pos:column="18"/></operator> <literal type="number" pos:line="451" pos:column="16">0<pos:position pos:line="451" pos:column="17"/></literal></expr> )<pos:position pos:line="451" pos:column="19"/></condition><block pos:line="451" pos:column="19">{
    <expr_stmt><expr><name pos:line="452" pos:column="5">pVar<pos:position pos:line="452" pos:column="9"/></name> <operator pos:line="452" pos:column="10">=<pos:position pos:line="452" pos:column="11"/></operator> <operator pos:line="452" pos:column="12">&amp;<pos:position pos:line="452" pos:column="17"/></operator><name><name pos:line="452" pos:column="13">p<pos:position pos:line="452" pos:column="14"/></name><operator pos:line="452" pos:column="14">-&gt;<pos:position pos:line="452" pos:column="19"/></operator><name pos:line="452" pos:column="16">aVar<pos:position pos:line="452" pos:column="20"/></name><index pos:line="452" pos:column="20">[<expr><name pos:line="452" pos:column="21">p1<pos:position pos:line="452" pos:column="23"/></name><operator pos:line="452" pos:column="23">++<pos:position pos:line="452" pos:column="25"/></operator></expr>]<pos:position pos:line="452" pos:column="26"/></index></name></expr>;<pos:position pos:line="452" pos:column="27"/></expr_stmt>
    <if pos:line="453" pos:column="5">if<condition pos:line="453" pos:column="7">( <expr><call><name pos:line="453" pos:column="9">sqlite3VdbeMemTooBig<pos:position pos:line="453" pos:column="29"/></name><argument_list pos:line="453" pos:column="29">(<argument><expr><name pos:line="453" pos:column="30">pVar<pos:position pos:line="453" pos:column="34"/></name></expr></argument>)<pos:position pos:line="453" pos:column="35"/></argument_list></call></expr> )<pos:position pos:line="453" pos:column="37"/></condition><then><block pos:line="453" pos:column="37">{
      <goto pos:line="454" pos:column="7">goto <name pos:line="454" pos:column="12">too_big<pos:position pos:line="454" pos:column="19"/></name>;<pos:position pos:line="454" pos:column="20"/></goto>
    }<pos:position pos:line="455" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="456" pos:column="5">pOut<pos:position pos:line="456" pos:column="9"/></name> <operator pos:line="456" pos:column="10">=<pos:position pos:line="456" pos:column="11"/></operator> <operator pos:line="456" pos:column="12">&amp;<pos:position pos:line="456" pos:column="17"/></operator><name><name pos:line="456" pos:column="13">p<pos:position pos:line="456" pos:column="14"/></name><operator pos:line="456" pos:column="14">-&gt;<pos:position pos:line="456" pos:column="19"/></operator><name pos:line="456" pos:column="16">aMem<pos:position pos:line="456" pos:column="20"/></name><index pos:line="456" pos:column="20">[<expr><name pos:line="456" pos:column="21">p2<pos:position pos:line="456" pos:column="23"/></name><operator pos:line="456" pos:column="23">++<pos:position pos:line="456" pos:column="25"/></operator></expr>]<pos:position pos:line="456" pos:column="26"/></index></name></expr>;<pos:position pos:line="456" pos:column="27"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="457" pos:column="5">sqlite3VdbeMemReleaseExternal<pos:position pos:line="457" pos:column="34"/></name><argument_list pos:line="457" pos:column="34">(<argument><expr><name pos:line="457" pos:column="35">pOut<pos:position pos:line="457" pos:column="39"/></name></expr></argument>)<pos:position pos:line="457" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="457" pos:column="41"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="458" pos:column="5">pOut<pos:position pos:line="458" pos:column="9"/></name><operator pos:line="458" pos:column="9">-&gt;<pos:position pos:line="458" pos:column="14"/></operator><name pos:line="458" pos:column="11">flags<pos:position pos:line="458" pos:column="16"/></name></name> <operator pos:line="458" pos:column="17">=<pos:position pos:line="458" pos:column="18"/></operator> <name pos:line="458" pos:column="19">MEM_Null<pos:position pos:line="458" pos:column="27"/></name></expr>;<pos:position pos:line="458" pos:column="28"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="459" pos:column="5">sqlite3VdbeMemShallowCopy<pos:position pos:line="459" pos:column="30"/></name><argument_list pos:line="459" pos:column="30">(<argument><expr><name pos:line="459" pos:column="31">pOut<pos:position pos:line="459" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="459" pos:column="37">pVar<pos:position pos:line="459" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="459" pos:column="43">MEM_Static<pos:position pos:line="459" pos:column="53"/></name></expr></argument>)<pos:position pos:line="459" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="459" pos:column="55"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="460" pos:column="5">UPDATE_MAX_BLOBSIZE<pos:position pos:line="460" pos:column="24"/></name><argument_list pos:line="460" pos:column="24">(<argument><expr><name pos:line="460" pos:column="25">pOut<pos:position pos:line="460" pos:column="29"/></name></expr></argument>)<pos:position pos:line="460" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="460" pos:column="31"/></expr_stmt>
  }<pos:position pos:line="461" pos:column="4"/></block></while>
  <break pos:line="462" pos:column="3">break;<pos:position pos:line="462" pos:column="9"/></break>
}<pos:position pos:line="463" pos:column="2"/></block>

<comment type="block" pos:line="465" pos:column="1">/* Opcode: Move P1 P2 P3 * *
**
** Move the values in register P1..P1+P3-1 over into
** registers P2..P2+P3-1.  Registers P1..P1+P1-1 are
** left holding a NULL.  It is an error for register ranges
** P1..P1+P3-1 and P2..P2+P3-1 to overlap.
*/</comment>
<case pos:line="472" pos:column="1">case <expr><name pos:line="472" pos:column="6">OP_Move<pos:position pos:line="472" pos:column="13"/></name></expr>:<pos:position pos:line="472" pos:column="14"/></case> <block pos:line="472" pos:column="15">{
  <decl_stmt><decl><type><name pos:line="473" pos:column="3">char<pos:position pos:line="473" pos:column="7"/></name> <modifier pos:line="473" pos:column="8">*<pos:position pos:line="473" pos:column="9"/></modifier></type><name pos:line="473" pos:column="9">zMalloc<pos:position pos:line="473" pos:column="16"/></name></decl>;<pos:position pos:line="473" pos:column="17"/></decl_stmt>   <comment type="block" pos:line="473" pos:column="20">/* Holding variable for allocated memory */</comment>
  <decl_stmt><decl><type><name pos:line="474" pos:column="3">int<pos:position pos:line="474" pos:column="6"/></name></type> <name pos:line="474" pos:column="7">n<pos:position pos:line="474" pos:column="8"/></name></decl>;<pos:position pos:line="474" pos:column="9"/></decl_stmt>           <comment type="block" pos:line="474" pos:column="20">/* Number of registers left to copy */</comment>
  <decl_stmt><decl><type><name pos:line="475" pos:column="3">int<pos:position pos:line="475" pos:column="6"/></name></type> <name pos:line="475" pos:column="7">p1<pos:position pos:line="475" pos:column="9"/></name></decl>;<pos:position pos:line="475" pos:column="10"/></decl_stmt>          <comment type="block" pos:line="475" pos:column="20">/* Register to copy from */</comment>
  <decl_stmt><decl><type><name pos:line="476" pos:column="3">int<pos:position pos:line="476" pos:column="6"/></name></type> <name pos:line="476" pos:column="7">p2<pos:position pos:line="476" pos:column="9"/></name></decl>;<pos:position pos:line="476" pos:column="10"/></decl_stmt>          <comment type="block" pos:line="476" pos:column="20">/* Register to copy to */</comment>

  <expr_stmt><expr><name pos:line="478" pos:column="3">n<pos:position pos:line="478" pos:column="4"/></name> <operator pos:line="478" pos:column="5">=<pos:position pos:line="478" pos:column="6"/></operator> <name><name pos:line="478" pos:column="7">pOp<pos:position pos:line="478" pos:column="10"/></name><operator pos:line="478" pos:column="10">-&gt;<pos:position pos:line="478" pos:column="15"/></operator><name pos:line="478" pos:column="12">p3<pos:position pos:line="478" pos:column="14"/></name></name></expr>;<pos:position pos:line="478" pos:column="15"/></expr_stmt>
  <expr_stmt><expr><name pos:line="479" pos:column="3">p1<pos:position pos:line="479" pos:column="5"/></name> <operator pos:line="479" pos:column="6">=<pos:position pos:line="479" pos:column="7"/></operator> <name><name pos:line="479" pos:column="8">pOp<pos:position pos:line="479" pos:column="11"/></name><operator pos:line="479" pos:column="11">-&gt;<pos:position pos:line="479" pos:column="16"/></operator><name pos:line="479" pos:column="13">p1<pos:position pos:line="479" pos:column="15"/></name></name></expr>;<pos:position pos:line="479" pos:column="16"/></expr_stmt>
  <expr_stmt><expr><name pos:line="480" pos:column="3">p2<pos:position pos:line="480" pos:column="5"/></name> <operator pos:line="480" pos:column="6">=<pos:position pos:line="480" pos:column="7"/></operator> <name><name pos:line="480" pos:column="8">pOp<pos:position pos:line="480" pos:column="11"/></name><operator pos:line="480" pos:column="11">-&gt;<pos:position pos:line="480" pos:column="16"/></operator><name pos:line="480" pos:column="13">p2<pos:position pos:line="480" pos:column="15"/></name></name></expr>;<pos:position pos:line="480" pos:column="16"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="481" pos:column="3">assert<pos:position pos:line="481" pos:column="9"/></name><argument_list pos:line="481" pos:column="9">( <argument><expr><name pos:line="481" pos:column="11">n<pos:position pos:line="481" pos:column="12"/></name><operator pos:line="481" pos:column="12">&gt;<pos:position pos:line="481" pos:column="16"/></operator><literal type="number" pos:line="481" pos:column="13">0<pos:position pos:line="481" pos:column="14"/></literal> <operator pos:line="481" pos:column="15">&amp;&amp;<pos:position pos:line="481" pos:column="25"/></operator> <name pos:line="481" pos:column="18">p1<pos:position pos:line="481" pos:column="20"/></name><operator pos:line="481" pos:column="20">&gt;<pos:position pos:line="481" pos:column="24"/></operator><literal type="number" pos:line="481" pos:column="21">0<pos:position pos:line="481" pos:column="22"/></literal> <operator pos:line="481" pos:column="23">&amp;&amp;<pos:position pos:line="481" pos:column="33"/></operator> <name pos:line="481" pos:column="26">p2<pos:position pos:line="481" pos:column="28"/></name><operator pos:line="481" pos:column="28">&gt;<pos:position pos:line="481" pos:column="32"/></operator><literal type="number" pos:line="481" pos:column="29">0<pos:position pos:line="481" pos:column="30"/></literal></expr></argument> )<pos:position pos:line="481" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="481" pos:column="33"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="482" pos:column="3">assert<pos:position pos:line="482" pos:column="9"/></name><argument_list pos:line="482" pos:column="9">( <argument><expr><name pos:line="482" pos:column="11">p1<pos:position pos:line="482" pos:column="13"/></name><operator pos:line="482" pos:column="13">+<pos:position pos:line="482" pos:column="14"/></operator><name pos:line="482" pos:column="14">n<pos:position pos:line="482" pos:column="15"/></name><operator pos:line="482" pos:column="15">&lt;=<pos:position pos:line="482" pos:column="20"/></operator><name pos:line="482" pos:column="17">p2<pos:position pos:line="482" pos:column="19"/></name> <operator pos:line="482" pos:column="20">||<pos:position pos:line="482" pos:column="22"/></operator> <name pos:line="482" pos:column="23">p2<pos:position pos:line="482" pos:column="25"/></name><operator pos:line="482" pos:column="25">+<pos:position pos:line="482" pos:column="26"/></operator><name pos:line="482" pos:column="26">n<pos:position pos:line="482" pos:column="27"/></name><operator pos:line="482" pos:column="27">&lt;=<pos:position pos:line="482" pos:column="32"/></operator><name pos:line="482" pos:column="29">p1<pos:position pos:line="482" pos:column="31"/></name></expr></argument> )<pos:position pos:line="482" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="482" pos:column="34"/></expr_stmt>

  <expr_stmt><expr><name pos:line="484" pos:column="3">pIn1<pos:position pos:line="484" pos:column="7"/></name> <operator pos:line="484" pos:column="8">=<pos:position pos:line="484" pos:column="9"/></operator> <operator pos:line="484" pos:column="10">&amp;<pos:position pos:line="484" pos:column="15"/></operator><name><name pos:line="484" pos:column="11">p<pos:position pos:line="484" pos:column="12"/></name><operator pos:line="484" pos:column="12">-&gt;<pos:position pos:line="484" pos:column="17"/></operator><name pos:line="484" pos:column="14">aMem<pos:position pos:line="484" pos:column="18"/></name><index pos:line="484" pos:column="18">[<expr><name pos:line="484" pos:column="19">p1<pos:position pos:line="484" pos:column="21"/></name></expr>]<pos:position pos:line="484" pos:column="22"/></index></name></expr>;<pos:position pos:line="484" pos:column="23"/></expr_stmt>
  <expr_stmt><expr><name pos:line="485" pos:column="3">pOut<pos:position pos:line="485" pos:column="7"/></name> <operator pos:line="485" pos:column="8">=<pos:position pos:line="485" pos:column="9"/></operator> <operator pos:line="485" pos:column="10">&amp;<pos:position pos:line="485" pos:column="15"/></operator><name><name pos:line="485" pos:column="11">p<pos:position pos:line="485" pos:column="12"/></name><operator pos:line="485" pos:column="12">-&gt;<pos:position pos:line="485" pos:column="17"/></operator><name pos:line="485" pos:column="14">aMem<pos:position pos:line="485" pos:column="18"/></name><index pos:line="485" pos:column="18">[<expr><name pos:line="485" pos:column="19">p2<pos:position pos:line="485" pos:column="21"/></name></expr>]<pos:position pos:line="485" pos:column="22"/></index></name></expr>;<pos:position pos:line="485" pos:column="23"/></expr_stmt>
  <while pos:line="486" pos:column="3">while<condition pos:line="486" pos:column="8">( <expr><name pos:line="486" pos:column="10">n<pos:position pos:line="486" pos:column="11"/></name><operator pos:line="486" pos:column="11">--<pos:position pos:line="486" pos:column="13"/></operator></expr> )<pos:position pos:line="486" pos:column="15"/></condition><block pos:line="486" pos:column="15">{
    <expr_stmt><expr><call><name pos:line="487" pos:column="5">assert<pos:position pos:line="487" pos:column="11"/></name><argument_list pos:line="487" pos:column="11">( <argument><expr><name pos:line="487" pos:column="13">pOut<pos:position pos:line="487" pos:column="17"/></name><operator pos:line="487" pos:column="17">&lt;=<pos:position pos:line="487" pos:column="22"/></operator><operator pos:line="487" pos:column="19">&amp;<pos:position pos:line="487" pos:column="24"/></operator><name><name pos:line="487" pos:column="20">p<pos:position pos:line="487" pos:column="21"/></name><operator pos:line="487" pos:column="21">-&gt;<pos:position pos:line="487" pos:column="26"/></operator><name pos:line="487" pos:column="23">aMem<pos:position pos:line="487" pos:column="27"/></name><index pos:line="487" pos:column="27">[<expr><name><name pos:line="487" pos:column="28">p<pos:position pos:line="487" pos:column="29"/></name><operator pos:line="487" pos:column="29">-&gt;<pos:position pos:line="487" pos:column="34"/></operator><name pos:line="487" pos:column="31">nMem<pos:position pos:line="487" pos:column="35"/></name></name></expr>]<pos:position pos:line="487" pos:column="36"/></index></name></expr></argument> )<pos:position pos:line="487" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="487" pos:column="39"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="488" pos:column="5">assert<pos:position pos:line="488" pos:column="11"/></name><argument_list pos:line="488" pos:column="11">( <argument><expr><name pos:line="488" pos:column="13">pIn1<pos:position pos:line="488" pos:column="17"/></name><operator pos:line="488" pos:column="17">&lt;=<pos:position pos:line="488" pos:column="22"/></operator><operator pos:line="488" pos:column="19">&amp;<pos:position pos:line="488" pos:column="24"/></operator><name><name pos:line="488" pos:column="20">p<pos:position pos:line="488" pos:column="21"/></name><operator pos:line="488" pos:column="21">-&gt;<pos:position pos:line="488" pos:column="26"/></operator><name pos:line="488" pos:column="23">aMem<pos:position pos:line="488" pos:column="27"/></name><index pos:line="488" pos:column="27">[<expr><name><name pos:line="488" pos:column="28">p<pos:position pos:line="488" pos:column="29"/></name><operator pos:line="488" pos:column="29">-&gt;<pos:position pos:line="488" pos:column="34"/></operator><name pos:line="488" pos:column="31">nMem<pos:position pos:line="488" pos:column="35"/></name></name></expr>]<pos:position pos:line="488" pos:column="36"/></index></name></expr></argument> )<pos:position pos:line="488" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="488" pos:column="39"/></expr_stmt>
    <expr_stmt><expr><name pos:line="489" pos:column="5">zMalloc<pos:position pos:line="489" pos:column="12"/></name> <operator pos:line="489" pos:column="13">=<pos:position pos:line="489" pos:column="14"/></operator> <name><name pos:line="489" pos:column="15">pOut<pos:position pos:line="489" pos:column="19"/></name><operator pos:line="489" pos:column="19">-&gt;<pos:position pos:line="489" pos:column="24"/></operator><name pos:line="489" pos:column="21">zMalloc<pos:position pos:line="489" pos:column="28"/></name></name></expr>;<pos:position pos:line="489" pos:column="29"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="490" pos:column="5">pOut<pos:position pos:line="490" pos:column="9"/></name><operator pos:line="490" pos:column="9">-&gt;<pos:position pos:line="490" pos:column="14"/></operator><name pos:line="490" pos:column="11">zMalloc<pos:position pos:line="490" pos:column="18"/></name></name> <operator pos:line="490" pos:column="19">=<pos:position pos:line="490" pos:column="20"/></operator> <literal type="number" pos:line="490" pos:column="21">0<pos:position pos:line="490" pos:column="22"/></literal></expr>;<pos:position pos:line="490" pos:column="23"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="491" pos:column="5">sqlite3VdbeMemMove<pos:position pos:line="491" pos:column="23"/></name><argument_list pos:line="491" pos:column="23">(<argument><expr><name pos:line="491" pos:column="24">pOut<pos:position pos:line="491" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="491" pos:column="30">pIn1<pos:position pos:line="491" pos:column="34"/></name></expr></argument>)<pos:position pos:line="491" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="491" pos:column="36"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="492" pos:column="5">pIn1<pos:position pos:line="492" pos:column="9"/></name><operator pos:line="492" pos:column="9">-&gt;<pos:position pos:line="492" pos:column="14"/></operator><name pos:line="492" pos:column="11">zMalloc<pos:position pos:line="492" pos:column="18"/></name></name> <operator pos:line="492" pos:column="19">=<pos:position pos:line="492" pos:column="20"/></operator> <name pos:line="492" pos:column="21">zMalloc<pos:position pos:line="492" pos:column="28"/></name></expr>;<pos:position pos:line="492" pos:column="29"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="493" pos:column="5">REGISTER_TRACE<pos:position pos:line="493" pos:column="19"/></name><argument_list pos:line="493" pos:column="19">(<argument><expr><name pos:line="493" pos:column="20">p2<pos:position pos:line="493" pos:column="22"/></name><operator pos:line="493" pos:column="22">++<pos:position pos:line="493" pos:column="24"/></operator></expr></argument>, <argument><expr><name pos:line="493" pos:column="26">pOut<pos:position pos:line="493" pos:column="30"/></name></expr></argument>)<pos:position pos:line="493" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="493" pos:column="32"/></expr_stmt>
    <expr_stmt><expr><name pos:line="494" pos:column="5">pIn1<pos:position pos:line="494" pos:column="9"/></name><operator pos:line="494" pos:column="9">++<pos:position pos:line="494" pos:column="11"/></operator></expr>;<pos:position pos:line="494" pos:column="12"/></expr_stmt>
    <expr_stmt><expr><name pos:line="495" pos:column="5">pOut<pos:position pos:line="495" pos:column="9"/></name><operator pos:line="495" pos:column="9">++<pos:position pos:line="495" pos:column="11"/></operator></expr>;<pos:position pos:line="495" pos:column="12"/></expr_stmt>
  }<pos:position pos:line="496" pos:column="4"/></block></while>
  <break pos:line="497" pos:column="3">break;<pos:position pos:line="497" pos:column="9"/></break>
}<pos:position pos:line="498" pos:column="2"/></block>

<comment type="block" pos:line="500" pos:column="1">/* Opcode: Copy P1 P2 * * *
**
** Make a copy of register P1 into register P2.
**
** This instruction makes a deep copy of the value.  A duplicate
** is made of any string or blob constant.  See also OP_SCopy.
*/</comment>
<case pos:line="507" pos:column="1">case <expr><name pos:line="507" pos:column="6">OP_Copy<pos:position pos:line="507" pos:column="13"/></name></expr>:<pos:position pos:line="507" pos:column="14"/></case> <block pos:line="507" pos:column="15">{             <comment type="block" pos:line="507" pos:column="29">/* in1 */</comment>
  <expr_stmt><expr><call><name pos:line="508" pos:column="3">assert<pos:position pos:line="508" pos:column="9"/></name><argument_list pos:line="508" pos:column="9">( <argument><expr><name><name pos:line="508" pos:column="11">pOp<pos:position pos:line="508" pos:column="14"/></name><operator pos:line="508" pos:column="14">-&gt;<pos:position pos:line="508" pos:column="19"/></operator><name pos:line="508" pos:column="16">p2<pos:position pos:line="508" pos:column="18"/></name></name><operator pos:line="508" pos:column="18">&gt;<pos:position pos:line="508" pos:column="22"/></operator><literal type="number" pos:line="508" pos:column="19">0<pos:position pos:line="508" pos:column="20"/></literal></expr></argument> )<pos:position pos:line="508" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="508" pos:column="23"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="509" pos:column="3">assert<pos:position pos:line="509" pos:column="9"/></name><argument_list pos:line="509" pos:column="9">( <argument><expr><name><name pos:line="509" pos:column="11">pOp<pos:position pos:line="509" pos:column="14"/></name><operator pos:line="509" pos:column="14">-&gt;<pos:position pos:line="509" pos:column="19"/></operator><name pos:line="509" pos:column="16">p2<pos:position pos:line="509" pos:column="18"/></name></name><operator pos:line="509" pos:column="18">&lt;=<pos:position pos:line="509" pos:column="23"/></operator><name><name pos:line="509" pos:column="20">p<pos:position pos:line="509" pos:column="21"/></name><operator pos:line="509" pos:column="21">-&gt;<pos:position pos:line="509" pos:column="26"/></operator><name pos:line="509" pos:column="23">nMem<pos:position pos:line="509" pos:column="27"/></name></name></expr></argument> )<pos:position pos:line="509" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="509" pos:column="30"/></expr_stmt>
  <expr_stmt><expr><name pos:line="510" pos:column="3">pOut<pos:position pos:line="510" pos:column="7"/></name> <operator pos:line="510" pos:column="8">=<pos:position pos:line="510" pos:column="9"/></operator> <operator pos:line="510" pos:column="10">&amp;<pos:position pos:line="510" pos:column="15"/></operator><name><name pos:line="510" pos:column="11">p<pos:position pos:line="510" pos:column="12"/></name><operator pos:line="510" pos:column="12">-&gt;<pos:position pos:line="510" pos:column="17"/></operator><name pos:line="510" pos:column="14">aMem<pos:position pos:line="510" pos:column="18"/></name><index pos:line="510" pos:column="18">[<expr><name><name pos:line="510" pos:column="19">pOp<pos:position pos:line="510" pos:column="22"/></name><operator pos:line="510" pos:column="22">-&gt;<pos:position pos:line="510" pos:column="27"/></operator><name pos:line="510" pos:column="24">p2<pos:position pos:line="510" pos:column="26"/></name></name></expr>]<pos:position pos:line="510" pos:column="27"/></index></name></expr>;<pos:position pos:line="510" pos:column="28"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="511" pos:column="3">assert<pos:position pos:line="511" pos:column="9"/></name><argument_list pos:line="511" pos:column="9">( <argument><expr><name pos:line="511" pos:column="11">pOut<pos:position pos:line="511" pos:column="15"/></name><operator pos:line="511" pos:column="15">!=<pos:position pos:line="511" pos:column="17"/></operator><name pos:line="511" pos:column="17">pIn1<pos:position pos:line="511" pos:column="21"/></name></expr></argument> )<pos:position pos:line="511" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="511" pos:column="24"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="512" pos:column="3">sqlite3VdbeMemShallowCopy<pos:position pos:line="512" pos:column="28"/></name><argument_list pos:line="512" pos:column="28">(<argument><expr><name pos:line="512" pos:column="29">pOut<pos:position pos:line="512" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="512" pos:column="35">pIn1<pos:position pos:line="512" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="512" pos:column="41">MEM_Ephem<pos:position pos:line="512" pos:column="50"/></name></expr></argument>)<pos:position pos:line="512" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="512" pos:column="52"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="513" pos:column="3">Deephemeralize<pos:position pos:line="513" pos:column="17"/></name><argument_list pos:line="513" pos:column="17">(<argument><expr><name pos:line="513" pos:column="18">pOut<pos:position pos:line="513" pos:column="22"/></name></expr></argument>)<pos:position pos:line="513" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="513" pos:column="24"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="514" pos:column="3">REGISTER_TRACE<pos:position pos:line="514" pos:column="17"/></name><argument_list pos:line="514" pos:column="17">(<argument><expr><name><name pos:line="514" pos:column="18">pOp<pos:position pos:line="514" pos:column="21"/></name><operator pos:line="514" pos:column="21">-&gt;<pos:position pos:line="514" pos:column="26"/></operator><name pos:line="514" pos:column="23">p2<pos:position pos:line="514" pos:column="25"/></name></name></expr></argument>, <argument><expr><name pos:line="514" pos:column="27">pOut<pos:position pos:line="514" pos:column="31"/></name></expr></argument>)<pos:position pos:line="514" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="514" pos:column="33"/></expr_stmt>
  <break pos:line="515" pos:column="3">break;<pos:position pos:line="515" pos:column="9"/></break>
}<pos:position pos:line="516" pos:column="2"/></block>

<comment type="block" pos:line="518" pos:column="1">/* Opcode: SCopy P1 P2 * * *
**
** Make a shallow copy of register P1 into register P2.
**
** This instruction makes a shallow copy of the value.  If the value
** is a string or blob, then the copy is only a pointer to the
** original and hence if the original changes so will the copy.
** Worse, if the original is deallocated, the copy becomes invalid.
** Thus the program must guarantee that the original will not change
** during the lifetime of the copy.  Use OP_Copy to make a complete
** copy.
*/</comment>
<case pos:line="530" pos:column="1">case <expr><name pos:line="530" pos:column="6">OP_SCopy<pos:position pos:line="530" pos:column="14"/></name></expr>:<pos:position pos:line="530" pos:column="15"/></case> <block pos:line="530" pos:column="16">{            <comment type="block" pos:line="530" pos:column="29">/* in1 */</comment>
  <expr_stmt><expr><call><name pos:line="531" pos:column="3">REGISTER_TRACE<pos:position pos:line="531" pos:column="17"/></name><argument_list pos:line="531" pos:column="17">(<argument><expr><name><name pos:line="531" pos:column="18">pOp<pos:position pos:line="531" pos:column="21"/></name><operator pos:line="531" pos:column="21">-&gt;<pos:position pos:line="531" pos:column="26"/></operator><name pos:line="531" pos:column="23">p1<pos:position pos:line="531" pos:column="25"/></name></name></expr></argument>, <argument><expr><name pos:line="531" pos:column="27">pIn1<pos:position pos:line="531" pos:column="31"/></name></expr></argument>)<pos:position pos:line="531" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="531" pos:column="33"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="532" pos:column="3">assert<pos:position pos:line="532" pos:column="9"/></name><argument_list pos:line="532" pos:column="9">( <argument><expr><name><name pos:line="532" pos:column="11">pOp<pos:position pos:line="532" pos:column="14"/></name><operator pos:line="532" pos:column="14">-&gt;<pos:position pos:line="532" pos:column="19"/></operator><name pos:line="532" pos:column="16">p2<pos:position pos:line="532" pos:column="18"/></name></name><operator pos:line="532" pos:column="18">&gt;<pos:position pos:line="532" pos:column="22"/></operator><literal type="number" pos:line="532" pos:column="19">0<pos:position pos:line="532" pos:column="20"/></literal></expr></argument> )<pos:position pos:line="532" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="532" pos:column="23"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="533" pos:column="3">assert<pos:position pos:line="533" pos:column="9"/></name><argument_list pos:line="533" pos:column="9">( <argument><expr><name><name pos:line="533" pos:column="11">pOp<pos:position pos:line="533" pos:column="14"/></name><operator pos:line="533" pos:column="14">-&gt;<pos:position pos:line="533" pos:column="19"/></operator><name pos:line="533" pos:column="16">p2<pos:position pos:line="533" pos:column="18"/></name></name><operator pos:line="533" pos:column="18">&lt;=<pos:position pos:line="533" pos:column="23"/></operator><name><name pos:line="533" pos:column="20">p<pos:position pos:line="533" pos:column="21"/></name><operator pos:line="533" pos:column="21">-&gt;<pos:position pos:line="533" pos:column="26"/></operator><name pos:line="533" pos:column="23">nMem<pos:position pos:line="533" pos:column="27"/></name></name></expr></argument> )<pos:position pos:line="533" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="533" pos:column="30"/></expr_stmt>
  <expr_stmt><expr><name pos:line="534" pos:column="3">pOut<pos:position pos:line="534" pos:column="7"/></name> <operator pos:line="534" pos:column="8">=<pos:position pos:line="534" pos:column="9"/></operator> <operator pos:line="534" pos:column="10">&amp;<pos:position pos:line="534" pos:column="15"/></operator><name><name pos:line="534" pos:column="11">p<pos:position pos:line="534" pos:column="12"/></name><operator pos:line="534" pos:column="12">-&gt;<pos:position pos:line="534" pos:column="17"/></operator><name pos:line="534" pos:column="14">aMem<pos:position pos:line="534" pos:column="18"/></name><index pos:line="534" pos:column="18">[<expr><name><name pos:line="534" pos:column="19">pOp<pos:position pos:line="534" pos:column="22"/></name><operator pos:line="534" pos:column="22">-&gt;<pos:position pos:line="534" pos:column="27"/></operator><name pos:line="534" pos:column="24">p2<pos:position pos:line="534" pos:column="26"/></name></name></expr>]<pos:position pos:line="534" pos:column="27"/></index></name></expr>;<pos:position pos:line="534" pos:column="28"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="535" pos:column="3">assert<pos:position pos:line="535" pos:column="9"/></name><argument_list pos:line="535" pos:column="9">( <argument><expr><name pos:line="535" pos:column="11">pOut<pos:position pos:line="535" pos:column="15"/></name><operator pos:line="535" pos:column="15">!=<pos:position pos:line="535" pos:column="17"/></operator><name pos:line="535" pos:column="17">pIn1<pos:position pos:line="535" pos:column="21"/></name></expr></argument> )<pos:position pos:line="535" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="535" pos:column="24"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="536" pos:column="3">sqlite3VdbeMemShallowCopy<pos:position pos:line="536" pos:column="28"/></name><argument_list pos:line="536" pos:column="28">(<argument><expr><name pos:line="536" pos:column="29">pOut<pos:position pos:line="536" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="536" pos:column="35">pIn1<pos:position pos:line="536" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="536" pos:column="41">MEM_Ephem<pos:position pos:line="536" pos:column="50"/></name></expr></argument>)<pos:position pos:line="536" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="536" pos:column="52"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="537" pos:column="3">REGISTER_TRACE<pos:position pos:line="537" pos:column="17"/></name><argument_list pos:line="537" pos:column="17">(<argument><expr><name><name pos:line="537" pos:column="18">pOp<pos:position pos:line="537" pos:column="21"/></name><operator pos:line="537" pos:column="21">-&gt;<pos:position pos:line="537" pos:column="26"/></operator><name pos:line="537" pos:column="23">p2<pos:position pos:line="537" pos:column="25"/></name></name></expr></argument>, <argument><expr><name pos:line="537" pos:column="27">pOut<pos:position pos:line="537" pos:column="31"/></name></expr></argument>)<pos:position pos:line="537" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="537" pos:column="33"/></expr_stmt>
  <break pos:line="538" pos:column="3">break;<pos:position pos:line="538" pos:column="9"/></break>
}<pos:position pos:line="539" pos:column="2"/></block>

<comment type="block" pos:line="541" pos:column="1">/* Opcode: ResultRow P1 P2 * * *
**
** The registers P1 through P1+P2-1 contain a single row of
** results. This opcode causes the sqlite3_step() call to terminate
** with an SQLITE_ROW return code and it sets up the sqlite3_stmt
** structure to provide access to the top P1 values as the result
** row.
*/</comment>
<case pos:line="549" pos:column="1">case <expr><name pos:line="549" pos:column="6">OP_ResultRow<pos:position pos:line="549" pos:column="18"/></name></expr>:<pos:position pos:line="549" pos:column="19"/></case> <block pos:line="549" pos:column="20">{
  <decl_stmt><decl><type><name pos:line="550" pos:column="3">Mem<pos:position pos:line="550" pos:column="6"/></name> <modifier pos:line="550" pos:column="7">*<pos:position pos:line="550" pos:column="8"/></modifier></type><name pos:line="550" pos:column="8">pMem<pos:position pos:line="550" pos:column="12"/></name></decl>;<pos:position pos:line="550" pos:column="13"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="551" pos:column="3">int<pos:position pos:line="551" pos:column="6"/></name></type> <name pos:line="551" pos:column="7">i<pos:position pos:line="551" pos:column="8"/></name></decl>;<pos:position pos:line="551" pos:column="9"/></decl_stmt>
  <expr_stmt><expr><call><name pos:line="552" pos:column="3">assert<pos:position pos:line="552" pos:column="9"/></name><argument_list pos:line="552" pos:column="9">( <argument><expr><name><name pos:line="552" pos:column="11">p<pos:position pos:line="552" pos:column="12"/></name><operator pos:line="552" pos:column="12">-&gt;<pos:position pos:line="552" pos:column="17"/></operator><name pos:line="552" pos:column="14">nResColumn<pos:position pos:line="552" pos:column="24"/></name></name><operator pos:line="552" pos:column="24">==<pos:position pos:line="552" pos:column="26"/></operator><name><name pos:line="552" pos:column="26">pOp<pos:position pos:line="552" pos:column="29"/></name><operator pos:line="552" pos:column="29">-&gt;<pos:position pos:line="552" pos:column="34"/></operator><name pos:line="552" pos:column="31">p2<pos:position pos:line="552" pos:column="33"/></name></name></expr></argument> )<pos:position pos:line="552" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="552" pos:column="36"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="553" pos:column="3">assert<pos:position pos:line="553" pos:column="9"/></name><argument_list pos:line="553" pos:column="9">( <argument><expr><name><name pos:line="553" pos:column="11">pOp<pos:position pos:line="553" pos:column="14"/></name><operator pos:line="553" pos:column="14">-&gt;<pos:position pos:line="553" pos:column="19"/></operator><name pos:line="553" pos:column="16">p1<pos:position pos:line="553" pos:column="18"/></name></name><operator pos:line="553" pos:column="18">&gt;<pos:position pos:line="553" pos:column="22"/></operator><literal type="number" pos:line="553" pos:column="19">0<pos:position pos:line="553" pos:column="20"/></literal></expr></argument> )<pos:position pos:line="553" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="553" pos:column="23"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="554" pos:column="3">assert<pos:position pos:line="554" pos:column="9"/></name><argument_list pos:line="554" pos:column="9">( <argument><expr><name><name pos:line="554" pos:column="11">pOp<pos:position pos:line="554" pos:column="14"/></name><operator pos:line="554" pos:column="14">-&gt;<pos:position pos:line="554" pos:column="19"/></operator><name pos:line="554" pos:column="16">p1<pos:position pos:line="554" pos:column="18"/></name></name><operator pos:line="554" pos:column="18">+<pos:position pos:line="554" pos:column="19"/></operator><name><name pos:line="554" pos:column="19">pOp<pos:position pos:line="554" pos:column="22"/></name><operator pos:line="554" pos:column="22">-&gt;<pos:position pos:line="554" pos:column="27"/></operator><name pos:line="554" pos:column="24">p2<pos:position pos:line="554" pos:column="26"/></name></name><operator pos:line="554" pos:column="26">&lt;=<pos:position pos:line="554" pos:column="31"/></operator><name><name pos:line="554" pos:column="28">p<pos:position pos:line="554" pos:column="29"/></name><operator pos:line="554" pos:column="29">-&gt;<pos:position pos:line="554" pos:column="34"/></operator><name pos:line="554" pos:column="31">nMem<pos:position pos:line="554" pos:column="35"/></name></name><operator pos:line="554" pos:column="35">+<pos:position pos:line="554" pos:column="36"/></operator><literal type="number" pos:line="554" pos:column="36">1<pos:position pos:line="554" pos:column="37"/></literal></expr></argument> )<pos:position pos:line="554" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="554" pos:column="40"/></expr_stmt>

  <comment type="block" pos:line="556" pos:column="3">/* If the SQLITE_CountRows flag is set in sqlite3.flags mask, then 
  ** DML statements invoke this opcode to return the number of rows 
  ** modified to the user. This is the only way that a VM that
  ** opens a statement transaction may invoke this opcode.
  **
  ** In case this is such a statement, close any statement transaction
  ** opened by this VM before returning control to the user. This is to
  ** ensure that statement-transactions are always nested, not overlapping.
  ** If the open statement-transaction is not closed here, then the user
  ** may step another VM that opens its own statement transaction. This
  ** may lead to overlapping statement transactions.
  */</comment>
  <expr_stmt><expr><call><name pos:line="568" pos:column="3">assert<pos:position pos:line="568" pos:column="9"/></name><argument_list pos:line="568" pos:column="9">( <argument><expr><name><name pos:line="568" pos:column="11">p<pos:position pos:line="568" pos:column="12"/></name><operator pos:line="568" pos:column="12">-&gt;<pos:position pos:line="568" pos:column="17"/></operator><name pos:line="568" pos:column="14">iStatement<pos:position pos:line="568" pos:column="24"/></name></name><operator pos:line="568" pos:column="24">==<pos:position pos:line="568" pos:column="26"/></operator><literal type="number" pos:line="568" pos:column="26">0<pos:position pos:line="568" pos:column="27"/></literal> <operator pos:line="568" pos:column="28">||<pos:position pos:line="568" pos:column="30"/></operator> <name><name pos:line="568" pos:column="31">db<pos:position pos:line="568" pos:column="33"/></name><operator pos:line="568" pos:column="33">-&gt;<pos:position pos:line="568" pos:column="38"/></operator><name pos:line="568" pos:column="35">flags<pos:position pos:line="568" pos:column="40"/></name></name><operator pos:line="568" pos:column="40">&amp;<pos:position pos:line="568" pos:column="45"/></operator><name pos:line="568" pos:column="41">SQLITE_CountRows<pos:position pos:line="568" pos:column="57"/></name></expr></argument> )<pos:position pos:line="568" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="568" pos:column="60"/></expr_stmt>
  <if pos:line="569" pos:column="3">if<condition pos:line="569" pos:column="5">( <expr><name pos:line="569" pos:column="7">SQLITE_OK<pos:position pos:line="569" pos:column="16"/></name><operator pos:line="569" pos:column="16">!=<pos:position pos:line="569" pos:column="18"/></operator><operator pos:line="569" pos:column="18">(<pos:position pos:line="569" pos:column="19"/></operator><name pos:line="569" pos:column="19">rc<pos:position pos:line="569" pos:column="21"/></name> <operator pos:line="569" pos:column="22">=<pos:position pos:line="569" pos:column="23"/></operator> <call><name pos:line="569" pos:column="24">sqlite3VdbeCloseStatement<pos:position pos:line="569" pos:column="49"/></name><argument_list pos:line="569" pos:column="49">(<argument><expr><name pos:line="569" pos:column="50">p<pos:position pos:line="569" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="569" pos:column="53">SAVEPOINT_RELEASE<pos:position pos:line="569" pos:column="70"/></name></expr></argument>)<pos:position pos:line="569" pos:column="71"/></argument_list></call><operator pos:line="569" pos:column="71">)<pos:position pos:line="569" pos:column="72"/></operator></expr> )<pos:position pos:line="569" pos:column="74"/></condition><then><block pos:line="569" pos:column="74">{
    <break pos:line="570" pos:column="5">break;<pos:position pos:line="570" pos:column="11"/></break>
  }<pos:position pos:line="571" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="573" pos:column="3">/* Invalidate all ephemeral cursor row caches */</comment>
  <expr_stmt><expr><name><name pos:line="574" pos:column="3">p<pos:position pos:line="574" pos:column="4"/></name><operator pos:line="574" pos:column="4">-&gt;<pos:position pos:line="574" pos:column="9"/></operator><name pos:line="574" pos:column="6">cacheCtr<pos:position pos:line="574" pos:column="14"/></name></name> <operator pos:line="574" pos:column="15">=<pos:position pos:line="574" pos:column="16"/></operator> <operator pos:line="574" pos:column="17">(<pos:position pos:line="574" pos:column="18"/></operator><name><name pos:line="574" pos:column="18">p<pos:position pos:line="574" pos:column="19"/></name><operator pos:line="574" pos:column="19">-&gt;<pos:position pos:line="574" pos:column="24"/></operator><name pos:line="574" pos:column="21">cacheCtr<pos:position pos:line="574" pos:column="29"/></name></name> <operator pos:line="574" pos:column="30">+<pos:position pos:line="574" pos:column="31"/></operator> <literal type="number" pos:line="574" pos:column="32">2<pos:position pos:line="574" pos:column="33"/></literal><operator pos:line="574" pos:column="33">)<pos:position pos:line="574" pos:column="34"/></operator><operator pos:line="574" pos:column="34">|<pos:position pos:line="574" pos:column="35"/></operator><literal type="number" pos:line="574" pos:column="35">1<pos:position pos:line="574" pos:column="36"/></literal></expr>;<pos:position pos:line="574" pos:column="37"/></expr_stmt>

  <comment type="block" pos:line="576" pos:column="3">/* Make sure the results of the current row are \000 terminated
  ** and have an assigned type.  The results are de-ephemeralized as
  ** as side effect.
  */</comment>
  <expr_stmt><expr><name pos:line="580" pos:column="3">pMem<pos:position pos:line="580" pos:column="7"/></name> <operator pos:line="580" pos:column="8">=<pos:position pos:line="580" pos:column="9"/></operator> <name><name pos:line="580" pos:column="10">p<pos:position pos:line="580" pos:column="11"/></name><operator pos:line="580" pos:column="11">-&gt;<pos:position pos:line="580" pos:column="16"/></operator><name pos:line="580" pos:column="13">pResultSet<pos:position pos:line="580" pos:column="23"/></name></name> <operator pos:line="580" pos:column="24">=<pos:position pos:line="580" pos:column="25"/></operator> <operator pos:line="580" pos:column="26">&amp;<pos:position pos:line="580" pos:column="31"/></operator><name><name pos:line="580" pos:column="27">p<pos:position pos:line="580" pos:column="28"/></name><operator pos:line="580" pos:column="28">-&gt;<pos:position pos:line="580" pos:column="33"/></operator><name pos:line="580" pos:column="30">aMem<pos:position pos:line="580" pos:column="34"/></name><index pos:line="580" pos:column="34">[<expr><name><name pos:line="580" pos:column="35">pOp<pos:position pos:line="580" pos:column="38"/></name><operator pos:line="580" pos:column="38">-&gt;<pos:position pos:line="580" pos:column="43"/></operator><name pos:line="580" pos:column="40">p1<pos:position pos:line="580" pos:column="42"/></name></name></expr>]<pos:position pos:line="580" pos:column="43"/></index></name></expr>;<pos:position pos:line="580" pos:column="44"/></expr_stmt>
  <for pos:line="581" pos:column="3">for<control pos:line="581" pos:column="6">(<init><expr><name pos:line="581" pos:column="7">i<pos:position pos:line="581" pos:column="8"/></name><operator pos:line="581" pos:column="8">=<pos:position pos:line="581" pos:column="9"/></operator><literal type="number" pos:line="581" pos:column="9">0<pos:position pos:line="581" pos:column="10"/></literal></expr>;<pos:position pos:line="581" pos:column="11"/></init> <condition><expr><name pos:line="581" pos:column="12">i<pos:position pos:line="581" pos:column="13"/></name><operator pos:line="581" pos:column="13">&lt;<pos:position pos:line="581" pos:column="17"/></operator><name><name pos:line="581" pos:column="14">pOp<pos:position pos:line="581" pos:column="17"/></name><operator pos:line="581" pos:column="17">-&gt;<pos:position pos:line="581" pos:column="22"/></operator><name pos:line="581" pos:column="19">p2<pos:position pos:line="581" pos:column="21"/></name></name></expr>;<pos:position pos:line="581" pos:column="22"/></condition> <incr><expr><name pos:line="581" pos:column="23">i<pos:position pos:line="581" pos:column="24"/></name><operator pos:line="581" pos:column="24">++<pos:position pos:line="581" pos:column="26"/></operator></expr></incr>)<pos:position pos:line="581" pos:column="27"/></control><block pos:line="581" pos:column="27">{
    <expr_stmt><expr><call><name pos:line="582" pos:column="5">sqlite3VdbeMemNulTerminate<pos:position pos:line="582" pos:column="31"/></name><argument_list pos:line="582" pos:column="31">(<argument><expr><operator pos:line="582" pos:column="32">&amp;<pos:position pos:line="582" pos:column="37"/></operator><name><name pos:line="582" pos:column="33">pMem<pos:position pos:line="582" pos:column="37"/></name><index pos:line="582" pos:column="37">[<expr><name pos:line="582" pos:column="38">i<pos:position pos:line="582" pos:column="39"/></name></expr>]<pos:position pos:line="582" pos:column="40"/></index></name></expr></argument>)<pos:position pos:line="582" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="582" pos:column="42"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="583" pos:column="5">storeTypeInfo<pos:position pos:line="583" pos:column="18"/></name><argument_list pos:line="583" pos:column="18">(<argument><expr><operator pos:line="583" pos:column="19">&amp;<pos:position pos:line="583" pos:column="24"/></operator><name><name pos:line="583" pos:column="20">pMem<pos:position pos:line="583" pos:column="24"/></name><index pos:line="583" pos:column="24">[<expr><name pos:line="583" pos:column="25">i<pos:position pos:line="583" pos:column="26"/></name></expr>]<pos:position pos:line="583" pos:column="27"/></index></name></expr></argument>, <argument><expr><name pos:line="583" pos:column="29">encoding<pos:position pos:line="583" pos:column="37"/></name></expr></argument>)<pos:position pos:line="583" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="583" pos:column="39"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="584" pos:column="5">REGISTER_TRACE<pos:position pos:line="584" pos:column="19"/></name><argument_list pos:line="584" pos:column="19">(<argument><expr><name><name pos:line="584" pos:column="20">pOp<pos:position pos:line="584" pos:column="23"/></name><operator pos:line="584" pos:column="23">-&gt;<pos:position pos:line="584" pos:column="28"/></operator><name pos:line="584" pos:column="25">p1<pos:position pos:line="584" pos:column="27"/></name></name><operator pos:line="584" pos:column="27">+<pos:position pos:line="584" pos:column="28"/></operator><name pos:line="584" pos:column="28">i<pos:position pos:line="584" pos:column="29"/></name></expr></argument>, <argument><expr><operator pos:line="584" pos:column="31">&amp;<pos:position pos:line="584" pos:column="36"/></operator><name><name pos:line="584" pos:column="32">pMem<pos:position pos:line="584" pos:column="36"/></name><index pos:line="584" pos:column="36">[<expr><name pos:line="584" pos:column="37">i<pos:position pos:line="584" pos:column="38"/></name></expr>]<pos:position pos:line="584" pos:column="39"/></index></name></expr></argument>)<pos:position pos:line="584" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="584" pos:column="41"/></expr_stmt>
  }<pos:position pos:line="585" pos:column="4"/></block></for>
  <if pos:line="586" pos:column="3">if<condition pos:line="586" pos:column="5">( <expr><name><name pos:line="586" pos:column="7">db<pos:position pos:line="586" pos:column="9"/></name><operator pos:line="586" pos:column="9">-&gt;<pos:position pos:line="586" pos:column="14"/></operator><name pos:line="586" pos:column="11">mallocFailed<pos:position pos:line="586" pos:column="23"/></name></name></expr> )<pos:position pos:line="586" pos:column="25"/></condition><then pos:line="586" pos:column="25"> <block type="pseudo"><goto pos:line="586" pos:column="26">goto <name pos:line="586" pos:column="31">no_mem<pos:position pos:line="586" pos:column="37"/></name>;<pos:position pos:line="586" pos:column="38"/></goto></block></then></if>

  <comment type="block" pos:line="588" pos:column="3">/* Return SQLITE_ROW
  */</comment>
  <expr_stmt><expr><name><name pos:line="590" pos:column="3">p<pos:position pos:line="590" pos:column="4"/></name><operator pos:line="590" pos:column="4">-&gt;<pos:position pos:line="590" pos:column="9"/></operator><name pos:line="590" pos:column="6">pc<pos:position pos:line="590" pos:column="8"/></name></name> <operator pos:line="590" pos:column="9">=<pos:position pos:line="590" pos:column="10"/></operator> <name pos:line="590" pos:column="11">pc<pos:position pos:line="590" pos:column="13"/></name> <operator pos:line="590" pos:column="14">+<pos:position pos:line="590" pos:column="15"/></operator> <literal type="number" pos:line="590" pos:column="16">1<pos:position pos:line="590" pos:column="17"/></literal></expr>;<pos:position pos:line="590" pos:column="18"/></expr_stmt>
  <expr_stmt><expr><name pos:line="591" pos:column="3">rc<pos:position pos:line="591" pos:column="5"/></name> <operator pos:line="591" pos:column="6">=<pos:position pos:line="591" pos:column="7"/></operator> <name pos:line="591" pos:column="8">SQLITE_ROW<pos:position pos:line="591" pos:column="18"/></name></expr>;<pos:position pos:line="591" pos:column="19"/></expr_stmt>
  <goto pos:line="592" pos:column="3">goto <name pos:line="592" pos:column="8">vdbe_return<pos:position pos:line="592" pos:column="19"/></name>;<pos:position pos:line="592" pos:column="20"/></goto>
}<pos:position pos:line="593" pos:column="2"/></block>

<comment type="block" pos:line="595" pos:column="1">/* Opcode: Concat P1 P2 P3 * *
**
** Add the text in register P1 onto the end of the text in
** register P2 and store the result in register P3.
** If either the P1 or P2 text are NULL then store NULL in P3.
**
**   P3 = P2 || P1
**
** It is illegal for P1 and P3 to be the same register. Sometimes,
** if P3 is the same register as P2, the implementation is able
** to avoid a memcpy().
*/</comment>
<case pos:line="607" pos:column="1">case <expr><name pos:line="607" pos:column="6">OP_Concat<pos:position pos:line="607" pos:column="15"/></name></expr>:<pos:position pos:line="607" pos:column="16"/></case> <block pos:line="607" pos:column="17">{           <comment type="block" pos:line="607" pos:column="29">/* same as TK_CONCAT, in1, in2, out3 */</comment>
  <decl_stmt><decl><type><name pos:line="608" pos:column="3">i64<pos:position pos:line="608" pos:column="6"/></name></type> <name pos:line="608" pos:column="7">nByte<pos:position pos:line="608" pos:column="12"/></name></decl>;<pos:position pos:line="608" pos:column="13"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="610" pos:column="3">assert<pos:position pos:line="610" pos:column="9"/></name><argument_list pos:line="610" pos:column="9">( <argument><expr><name pos:line="610" pos:column="11">pIn1<pos:position pos:line="610" pos:column="15"/></name><operator pos:line="610" pos:column="15">!=<pos:position pos:line="610" pos:column="17"/></operator><name pos:line="610" pos:column="17">pOut<pos:position pos:line="610" pos:column="21"/></name></expr></argument> )<pos:position pos:line="610" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="610" pos:column="24"/></expr_stmt>
  <if pos:line="611" pos:column="3">if<condition pos:line="611" pos:column="5">( <expr><operator pos:line="611" pos:column="7">(<pos:position pos:line="611" pos:column="8"/></operator><name><name pos:line="611" pos:column="8">pIn1<pos:position pos:line="611" pos:column="12"/></name><operator pos:line="611" pos:column="12">-&gt;<pos:position pos:line="611" pos:column="17"/></operator><name pos:line="611" pos:column="14">flags<pos:position pos:line="611" pos:column="19"/></name></name> <operator pos:line="611" pos:column="20">|<pos:position pos:line="611" pos:column="21"/></operator> <name><name pos:line="611" pos:column="22">pIn2<pos:position pos:line="611" pos:column="26"/></name><operator pos:line="611" pos:column="26">-&gt;<pos:position pos:line="611" pos:column="31"/></operator><name pos:line="611" pos:column="28">flags<pos:position pos:line="611" pos:column="33"/></name></name><operator pos:line="611" pos:column="33">)<pos:position pos:line="611" pos:column="34"/></operator> <operator pos:line="611" pos:column="35">&amp;<pos:position pos:line="611" pos:column="40"/></operator> <name pos:line="611" pos:column="37">MEM_Null<pos:position pos:line="611" pos:column="45"/></name></expr> )<pos:position pos:line="611" pos:column="47"/></condition><then><block pos:line="611" pos:column="47">{
    <expr_stmt><expr><call><name pos:line="612" pos:column="5">sqlite3VdbeMemSetNull<pos:position pos:line="612" pos:column="26"/></name><argument_list pos:line="612" pos:column="26">(<argument><expr><name pos:line="612" pos:column="27">pOut<pos:position pos:line="612" pos:column="31"/></name></expr></argument>)<pos:position pos:line="612" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="612" pos:column="33"/></expr_stmt>
    <break pos:line="613" pos:column="5">break;<pos:position pos:line="613" pos:column="11"/></break>
  }<pos:position pos:line="614" pos:column="4"/></block></then></if>
  <expr_stmt><expr><call><name pos:line="615" pos:column="3">ExpandBlob<pos:position pos:line="615" pos:column="13"/></name><argument_list pos:line="615" pos:column="13">(<argument><expr><name pos:line="615" pos:column="14">pIn1<pos:position pos:line="615" pos:column="18"/></name></expr></argument>)<pos:position pos:line="615" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="615" pos:column="20"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="616" pos:column="3">Stringify<pos:position pos:line="616" pos:column="12"/></name><argument_list pos:line="616" pos:column="12">(<argument><expr><name pos:line="616" pos:column="13">pIn1<pos:position pos:line="616" pos:column="17"/></name></expr></argument>, <argument><expr><name pos:line="616" pos:column="19">encoding<pos:position pos:line="616" pos:column="27"/></name></expr></argument>)<pos:position pos:line="616" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="616" pos:column="29"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="617" pos:column="3">ExpandBlob<pos:position pos:line="617" pos:column="13"/></name><argument_list pos:line="617" pos:column="13">(<argument><expr><name pos:line="617" pos:column="14">pIn2<pos:position pos:line="617" pos:column="18"/></name></expr></argument>)<pos:position pos:line="617" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="617" pos:column="20"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="618" pos:column="3">Stringify<pos:position pos:line="618" pos:column="12"/></name><argument_list pos:line="618" pos:column="12">(<argument><expr><name pos:line="618" pos:column="13">pIn2<pos:position pos:line="618" pos:column="17"/></name></expr></argument>, <argument><expr><name pos:line="618" pos:column="19">encoding<pos:position pos:line="618" pos:column="27"/></name></expr></argument>)<pos:position pos:line="618" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="618" pos:column="29"/></expr_stmt>
  <expr_stmt><expr><name pos:line="619" pos:column="3">nByte<pos:position pos:line="619" pos:column="8"/></name> <operator pos:line="619" pos:column="9">=<pos:position pos:line="619" pos:column="10"/></operator> <name><name pos:line="619" pos:column="11">pIn1<pos:position pos:line="619" pos:column="15"/></name><operator pos:line="619" pos:column="15">-&gt;<pos:position pos:line="619" pos:column="20"/></operator><name pos:line="619" pos:column="17">n<pos:position pos:line="619" pos:column="18"/></name></name> <operator pos:line="619" pos:column="19">+<pos:position pos:line="619" pos:column="20"/></operator> <name><name pos:line="619" pos:column="21">pIn2<pos:position pos:line="619" pos:column="25"/></name><operator pos:line="619" pos:column="25">-&gt;<pos:position pos:line="619" pos:column="30"/></operator><name pos:line="619" pos:column="27">n<pos:position pos:line="619" pos:column="28"/></name></name></expr>;<pos:position pos:line="619" pos:column="29"/></expr_stmt>
  <if pos:line="620" pos:column="3">if<condition pos:line="620" pos:column="5">( <expr><name pos:line="620" pos:column="7">nByte<pos:position pos:line="620" pos:column="12"/></name><operator pos:line="620" pos:column="12">&gt;<pos:position pos:line="620" pos:column="16"/></operator><name><name pos:line="620" pos:column="13">db<pos:position pos:line="620" pos:column="15"/></name><operator pos:line="620" pos:column="15">-&gt;<pos:position pos:line="620" pos:column="20"/></operator><name pos:line="620" pos:column="17">aLimit<pos:position pos:line="620" pos:column="23"/></name><index pos:line="620" pos:column="23">[<expr><name pos:line="620" pos:column="24">SQLITE_LIMIT_LENGTH<pos:position pos:line="620" pos:column="43"/></name></expr>]<pos:position pos:line="620" pos:column="44"/></index></name></expr> )<pos:position pos:line="620" pos:column="46"/></condition><then><block pos:line="620" pos:column="46">{
    <goto pos:line="621" pos:column="5">goto <name pos:line="621" pos:column="10">too_big<pos:position pos:line="621" pos:column="17"/></name>;<pos:position pos:line="621" pos:column="18"/></goto>
  }<pos:position pos:line="622" pos:column="4"/></block></then></if>
  <expr_stmt><expr><call><name pos:line="623" pos:column="3">MemSetTypeFlag<pos:position pos:line="623" pos:column="17"/></name><argument_list pos:line="623" pos:column="17">(<argument><expr><name pos:line="623" pos:column="18">pOut<pos:position pos:line="623" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="623" pos:column="24">MEM_Str<pos:position pos:line="623" pos:column="31"/></name></expr></argument>)<pos:position pos:line="623" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="623" pos:column="33"/></expr_stmt>
  <if pos:line="624" pos:column="3">if<condition pos:line="624" pos:column="5">( <expr><call><name pos:line="624" pos:column="7">sqlite3VdbeMemGrow<pos:position pos:line="624" pos:column="25"/></name><argument_list pos:line="624" pos:column="25">(<argument><expr><name pos:line="624" pos:column="26">pOut<pos:position pos:line="624" pos:column="30"/></name></expr></argument>, <argument><expr><operator pos:line="624" pos:column="32">(<pos:position pos:line="624" pos:column="33"/></operator><name pos:line="624" pos:column="33">int<pos:position pos:line="624" pos:column="36"/></name><operator pos:line="624" pos:column="36">)<pos:position pos:line="624" pos:column="37"/></operator><name pos:line="624" pos:column="37">nByte<pos:position pos:line="624" pos:column="42"/></name><operator pos:line="624" pos:column="42">+<pos:position pos:line="624" pos:column="43"/></operator><literal type="number" pos:line="624" pos:column="43">2<pos:position pos:line="624" pos:column="44"/></literal></expr></argument>, <argument><expr><name pos:line="624" pos:column="46">pOut<pos:position pos:line="624" pos:column="50"/></name><operator pos:line="624" pos:column="50">==<pos:position pos:line="624" pos:column="52"/></operator><name pos:line="624" pos:column="52">pIn2<pos:position pos:line="624" pos:column="56"/></name></expr></argument>)<pos:position pos:line="624" pos:column="57"/></argument_list></call></expr> )<pos:position pos:line="624" pos:column="59"/></condition><then><block pos:line="624" pos:column="59">{
    <goto pos:line="625" pos:column="5">goto <name pos:line="625" pos:column="10">no_mem<pos:position pos:line="625" pos:column="16"/></name>;<pos:position pos:line="625" pos:column="17"/></goto>
  }<pos:position pos:line="626" pos:column="4"/></block></then></if>
  <if pos:line="627" pos:column="3">if<condition pos:line="627" pos:column="5">( <expr><name pos:line="627" pos:column="7">pOut<pos:position pos:line="627" pos:column="11"/></name><operator pos:line="627" pos:column="11">!=<pos:position pos:line="627" pos:column="13"/></operator><name pos:line="627" pos:column="13">pIn2<pos:position pos:line="627" pos:column="17"/></name></expr> )<pos:position pos:line="627" pos:column="19"/></condition><then><block pos:line="627" pos:column="19">{
    <expr_stmt><expr><call><name pos:line="628" pos:column="5">memcpy<pos:position pos:line="628" pos:column="11"/></name><argument_list pos:line="628" pos:column="11">(<argument><expr><name><name pos:line="628" pos:column="12">pOut<pos:position pos:line="628" pos:column="16"/></name><operator pos:line="628" pos:column="16">-&gt;<pos:position pos:line="628" pos:column="21"/></operator><name pos:line="628" pos:column="18">z<pos:position pos:line="628" pos:column="19"/></name></name></expr></argument>, <argument><expr><name><name pos:line="628" pos:column="21">pIn2<pos:position pos:line="628" pos:column="25"/></name><operator pos:line="628" pos:column="25">-&gt;<pos:position pos:line="628" pos:column="30"/></operator><name pos:line="628" pos:column="27">z<pos:position pos:line="628" pos:column="28"/></name></name></expr></argument>, <argument><expr><name><name pos:line="628" pos:column="30">pIn2<pos:position pos:line="628" pos:column="34"/></name><operator pos:line="628" pos:column="34">-&gt;<pos:position pos:line="628" pos:column="39"/></operator><name pos:line="628" pos:column="36">n<pos:position pos:line="628" pos:column="37"/></name></name></expr></argument>)<pos:position pos:line="628" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="628" pos:column="39"/></expr_stmt>
  }<pos:position pos:line="629" pos:column="4"/></block></then></if>
  <expr_stmt><expr><call><name pos:line="630" pos:column="3">memcpy<pos:position pos:line="630" pos:column="9"/></name><argument_list pos:line="630" pos:column="9">(<argument><expr><operator pos:line="630" pos:column="10">&amp;<pos:position pos:line="630" pos:column="15"/></operator><name><name pos:line="630" pos:column="11">pOut<pos:position pos:line="630" pos:column="15"/></name><operator pos:line="630" pos:column="15">-&gt;<pos:position pos:line="630" pos:column="20"/></operator><name pos:line="630" pos:column="17">z<pos:position pos:line="630" pos:column="18"/></name><index pos:line="630" pos:column="18">[<expr><name><name pos:line="630" pos:column="19">pIn2<pos:position pos:line="630" pos:column="23"/></name><operator pos:line="630" pos:column="23">-&gt;<pos:position pos:line="630" pos:column="28"/></operator><name pos:line="630" pos:column="25">n<pos:position pos:line="630" pos:column="26"/></name></name></expr>]<pos:position pos:line="630" pos:column="27"/></index></name></expr></argument>, <argument><expr><name><name pos:line="630" pos:column="29">pIn1<pos:position pos:line="630" pos:column="33"/></name><operator pos:line="630" pos:column="33">-&gt;<pos:position pos:line="630" pos:column="38"/></operator><name pos:line="630" pos:column="35">z<pos:position pos:line="630" pos:column="36"/></name></name></expr></argument>, <argument><expr><name><name pos:line="630" pos:column="38">pIn1<pos:position pos:line="630" pos:column="42"/></name><operator pos:line="630" pos:column="42">-&gt;<pos:position pos:line="630" pos:column="47"/></operator><name pos:line="630" pos:column="44">n<pos:position pos:line="630" pos:column="45"/></name></name></expr></argument>)<pos:position pos:line="630" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="630" pos:column="47"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="631" pos:column="3">pOut<pos:position pos:line="631" pos:column="7"/></name><operator pos:line="631" pos:column="7">-&gt;<pos:position pos:line="631" pos:column="12"/></operator><name pos:line="631" pos:column="9">z<pos:position pos:line="631" pos:column="10"/></name><index pos:line="631" pos:column="10">[<expr><name pos:line="631" pos:column="11">nByte<pos:position pos:line="631" pos:column="16"/></name></expr>]<pos:position pos:line="631" pos:column="17"/></index></name> <operator pos:line="631" pos:column="18">=<pos:position pos:line="631" pos:column="19"/></operator> <literal type="number" pos:line="631" pos:column="20">0<pos:position pos:line="631" pos:column="21"/></literal></expr>;<pos:position pos:line="631" pos:column="22"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="632" pos:column="3">pOut<pos:position pos:line="632" pos:column="7"/></name><operator pos:line="632" pos:column="7">-&gt;<pos:position pos:line="632" pos:column="12"/></operator><name pos:line="632" pos:column="9">z<pos:position pos:line="632" pos:column="10"/></name><index pos:line="632" pos:column="10">[<expr><name pos:line="632" pos:column="11">nByte<pos:position pos:line="632" pos:column="16"/></name><operator pos:line="632" pos:column="16">+<pos:position pos:line="632" pos:column="17"/></operator><literal type="number" pos:line="632" pos:column="17">1<pos:position pos:line="632" pos:column="18"/></literal></expr>]<pos:position pos:line="632" pos:column="19"/></index></name> <operator pos:line="632" pos:column="20">=<pos:position pos:line="632" pos:column="21"/></operator> <literal type="number" pos:line="632" pos:column="22">0<pos:position pos:line="632" pos:column="23"/></literal></expr>;<pos:position pos:line="632" pos:column="24"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="633" pos:column="3">pOut<pos:position pos:line="633" pos:column="7"/></name><operator pos:line="633" pos:column="7">-&gt;<pos:position pos:line="633" pos:column="12"/></operator><name pos:line="633" pos:column="9">flags<pos:position pos:line="633" pos:column="14"/></name></name> <operator pos:line="633" pos:column="15">|=<pos:position pos:line="633" pos:column="17"/></operator> <name pos:line="633" pos:column="18">MEM_Term<pos:position pos:line="633" pos:column="26"/></name></expr>;<pos:position pos:line="633" pos:column="27"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="634" pos:column="3">pOut<pos:position pos:line="634" pos:column="7"/></name><operator pos:line="634" pos:column="7">-&gt;<pos:position pos:line="634" pos:column="12"/></operator><name pos:line="634" pos:column="9">n<pos:position pos:line="634" pos:column="10"/></name></name> <operator pos:line="634" pos:column="11">=<pos:position pos:line="634" pos:column="12"/></operator> <operator pos:line="634" pos:column="13">(<pos:position pos:line="634" pos:column="14"/></operator><name pos:line="634" pos:column="14">int<pos:position pos:line="634" pos:column="17"/></name><operator pos:line="634" pos:column="17">)<pos:position pos:line="634" pos:column="18"/></operator><name pos:line="634" pos:column="18">nByte<pos:position pos:line="634" pos:column="23"/></name></expr>;<pos:position pos:line="634" pos:column="24"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="635" pos:column="3">pOut<pos:position pos:line="635" pos:column="7"/></name><operator pos:line="635" pos:column="7">-&gt;<pos:position pos:line="635" pos:column="12"/></operator><name pos:line="635" pos:column="9">enc<pos:position pos:line="635" pos:column="12"/></name></name> <operator pos:line="635" pos:column="13">=<pos:position pos:line="635" pos:column="14"/></operator> <name pos:line="635" pos:column="15">encoding<pos:position pos:line="635" pos:column="23"/></name></expr>;<pos:position pos:line="635" pos:column="24"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="636" pos:column="3">UPDATE_MAX_BLOBSIZE<pos:position pos:line="636" pos:column="22"/></name><argument_list pos:line="636" pos:column="22">(<argument><expr><name pos:line="636" pos:column="23">pOut<pos:position pos:line="636" pos:column="27"/></name></expr></argument>)<pos:position pos:line="636" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="636" pos:column="29"/></expr_stmt>
  <break pos:line="637" pos:column="3">break;<pos:position pos:line="637" pos:column="9"/></break>
}<pos:position pos:line="638" pos:column="2"/></block>

<comment type="block" pos:line="640" pos:column="1">/* Opcode: Add P1 P2 P3 * *
**
** Add the value in register P1 to the value in register P2
** and store the result in register P3.
** If either input is NULL, the result is NULL.
*/</comment>
<comment type="block" pos:line="646" pos:column="1">/* Opcode: Multiply P1 P2 P3 * *
**
**
** Multiply the value in register P1 by the value in register P2
** and store the result in register P3.
** If either input is NULL, the result is NULL.
*/</comment>
<comment type="block" pos:line="653" pos:column="1">/* Opcode: Subtract P1 P2 P3 * *
**
** Subtract the value in register P1 from the value in register P2
** and store the result in register P3.
** If either input is NULL, the result is NULL.
*/</comment>
<comment type="block" pos:line="659" pos:column="1">/* Opcode: Divide P1 P2 P3 * *
**
** Divide the value in register P1 by the value in register P2
** and store the result in register P3.  If the value in register P2
** is zero, then the result is NULL.
** If either input is NULL, the result is NULL.
*/</comment>
<comment type="block" pos:line="666" pos:column="1">/* Opcode: Remainder P1 P2 P3 * *
**
** Compute the remainder after integer division of the value in
** register P1 by the value in register P2 and store the result in P3. 
** If the value in register P2 is zero the result is NULL.
** If either operand is NULL, the result is NULL.
*/</comment>
<case pos:line="673" pos:column="1">case <expr><name pos:line="673" pos:column="6">OP_Add<pos:position pos:line="673" pos:column="12"/></name></expr>:<pos:position pos:line="673" pos:column="13"/></case>                   <comment type="block" pos:line="673" pos:column="32">/* same as TK_PLUS, in1, in2, out3 */</comment>
<case pos:line="674" pos:column="1">case <expr><name pos:line="674" pos:column="6">OP_Subtract<pos:position pos:line="674" pos:column="17"/></name></expr>:<pos:position pos:line="674" pos:column="18"/></case>              <comment type="block" pos:line="674" pos:column="32">/* same as TK_MINUS, in1, in2, out3 */</comment>
<case pos:line="675" pos:column="1">case <expr><name pos:line="675" pos:column="6">OP_Multiply<pos:position pos:line="675" pos:column="17"/></name></expr>:<pos:position pos:line="675" pos:column="18"/></case>              <comment type="block" pos:line="675" pos:column="32">/* same as TK_STAR, in1, in2, out3 */</comment>
<case pos:line="676" pos:column="1">case <expr><name pos:line="676" pos:column="6">OP_Divide<pos:position pos:line="676" pos:column="15"/></name></expr>:<pos:position pos:line="676" pos:column="16"/></case>                <comment type="block" pos:line="676" pos:column="32">/* same as TK_SLASH, in1, in2, out3 */</comment>
<case pos:line="677" pos:column="1">case <expr><name pos:line="677" pos:column="6">OP_Remainder<pos:position pos:line="677" pos:column="18"/></name></expr>:<pos:position pos:line="677" pos:column="19"/></case> <block pos:line="677" pos:column="20">{           <comment type="block" pos:line="677" pos:column="32">/* same as TK_REM, in1, in2, out3 */</comment>
  <decl_stmt><decl><type><name pos:line="678" pos:column="3">int<pos:position pos:line="678" pos:column="6"/></name></type> <name pos:line="678" pos:column="7">flags<pos:position pos:line="678" pos:column="12"/></name></decl>;<pos:position pos:line="678" pos:column="13"/></decl_stmt>      <comment type="block" pos:line="678" pos:column="19">/* Combined MEM_* flags from both inputs */</comment>
  <decl_stmt><decl><type><name pos:line="679" pos:column="3">i64<pos:position pos:line="679" pos:column="6"/></name></type> <name pos:line="679" pos:column="7">iA<pos:position pos:line="679" pos:column="9"/></name></decl>;<pos:position pos:line="679" pos:column="10"/></decl_stmt>         <comment type="block" pos:line="679" pos:column="19">/* Integer value of left operand */</comment>
  <decl_stmt><decl><type><name pos:line="680" pos:column="3">i64<pos:position pos:line="680" pos:column="6"/></name></type> <name pos:line="680" pos:column="7">iB<pos:position pos:line="680" pos:column="9"/></name></decl>;<pos:position pos:line="680" pos:column="10"/></decl_stmt>         <comment type="block" pos:line="680" pos:column="19">/* Integer value of right operand */</comment>
  <decl_stmt><decl><type><name pos:line="681" pos:column="3">double<pos:position pos:line="681" pos:column="9"/></name></type> <name pos:line="681" pos:column="10">rA<pos:position pos:line="681" pos:column="12"/></name></decl>;<pos:position pos:line="681" pos:column="13"/></decl_stmt>      <comment type="block" pos:line="681" pos:column="19">/* Real value of left operand */</comment>
  <decl_stmt><decl><type><name pos:line="682" pos:column="3">double<pos:position pos:line="682" pos:column="9"/></name></type> <name pos:line="682" pos:column="10">rB<pos:position pos:line="682" pos:column="12"/></name></decl>;<pos:position pos:line="682" pos:column="13"/></decl_stmt>      <comment type="block" pos:line="682" pos:column="19">/* Real value of right operand */</comment>

  <expr_stmt><expr><call><name pos:line="684" pos:column="3">applyNumericAffinity<pos:position pos:line="684" pos:column="23"/></name><argument_list pos:line="684" pos:column="23">(<argument><expr><name pos:line="684" pos:column="24">pIn1<pos:position pos:line="684" pos:column="28"/></name></expr></argument>)<pos:position pos:line="684" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="684" pos:column="30"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="685" pos:column="3">applyNumericAffinity<pos:position pos:line="685" pos:column="23"/></name><argument_list pos:line="685" pos:column="23">(<argument><expr><name pos:line="685" pos:column="24">pIn2<pos:position pos:line="685" pos:column="28"/></name></expr></argument>)<pos:position pos:line="685" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="685" pos:column="30"/></expr_stmt>
  <expr_stmt><expr><name pos:line="686" pos:column="3">flags<pos:position pos:line="686" pos:column="8"/></name> <operator pos:line="686" pos:column="9">=<pos:position pos:line="686" pos:column="10"/></operator> <name><name pos:line="686" pos:column="11">pIn1<pos:position pos:line="686" pos:column="15"/></name><operator pos:line="686" pos:column="15">-&gt;<pos:position pos:line="686" pos:column="20"/></operator><name pos:line="686" pos:column="17">flags<pos:position pos:line="686" pos:column="22"/></name></name> <operator pos:line="686" pos:column="23">|<pos:position pos:line="686" pos:column="24"/></operator> <name><name pos:line="686" pos:column="25">pIn2<pos:position pos:line="686" pos:column="29"/></name><operator pos:line="686" pos:column="29">-&gt;<pos:position pos:line="686" pos:column="34"/></operator><name pos:line="686" pos:column="31">flags<pos:position pos:line="686" pos:column="36"/></name></name></expr>;<pos:position pos:line="686" pos:column="37"/></expr_stmt>
  <if pos:line="687" pos:column="3">if<condition pos:line="687" pos:column="5">( <expr><operator pos:line="687" pos:column="7">(<pos:position pos:line="687" pos:column="8"/></operator><name pos:line="687" pos:column="8">flags<pos:position pos:line="687" pos:column="13"/></name> <operator pos:line="687" pos:column="14">&amp;<pos:position pos:line="687" pos:column="19"/></operator> <name pos:line="687" pos:column="16">MEM_Null<pos:position pos:line="687" pos:column="24"/></name><operator pos:line="687" pos:column="24">)<pos:position pos:line="687" pos:column="25"/></operator><operator pos:line="687" pos:column="25">!=<pos:position pos:line="687" pos:column="27"/></operator><literal type="number" pos:line="687" pos:column="27">0<pos:position pos:line="687" pos:column="28"/></literal></expr> )<pos:position pos:line="687" pos:column="30"/></condition><then pos:line="687" pos:column="30"> <block type="pseudo"><goto pos:line="687" pos:column="31">goto <name pos:line="687" pos:column="36">arithmetic_result_is_null<pos:position pos:line="687" pos:column="61"/></name>;<pos:position pos:line="687" pos:column="62"/></goto></block></then></if>
  <if pos:line="688" pos:column="3">if<condition pos:line="688" pos:column="5">( <expr><operator pos:line="688" pos:column="7">(<pos:position pos:line="688" pos:column="8"/></operator><name><name pos:line="688" pos:column="8">pIn1<pos:position pos:line="688" pos:column="12"/></name><operator pos:line="688" pos:column="12">-&gt;<pos:position pos:line="688" pos:column="17"/></operator><name pos:line="688" pos:column="14">flags<pos:position pos:line="688" pos:column="19"/></name></name> <operator pos:line="688" pos:column="20">&amp;<pos:position pos:line="688" pos:column="25"/></operator> <name><name pos:line="688" pos:column="22">pIn2<pos:position pos:line="688" pos:column="26"/></name><operator pos:line="688" pos:column="26">-&gt;<pos:position pos:line="688" pos:column="31"/></operator><name pos:line="688" pos:column="28">flags<pos:position pos:line="688" pos:column="33"/></name></name> <operator pos:line="688" pos:column="34">&amp;<pos:position pos:line="688" pos:column="39"/></operator> <name pos:line="688" pos:column="36">MEM_Int<pos:position pos:line="688" pos:column="43"/></name><operator pos:line="688" pos:column="43">)<pos:position pos:line="688" pos:column="44"/></operator><operator pos:line="688" pos:column="44">==<pos:position pos:line="688" pos:column="46"/></operator><name pos:line="688" pos:column="46">MEM_Int<pos:position pos:line="688" pos:column="53"/></name></expr> )<pos:position pos:line="688" pos:column="55"/></condition><then><block pos:line="688" pos:column="55">{
    <expr_stmt><expr><name pos:line="689" pos:column="5">iA<pos:position pos:line="689" pos:column="7"/></name> <operator pos:line="689" pos:column="8">=<pos:position pos:line="689" pos:column="9"/></operator> <name><name pos:line="689" pos:column="10">pIn1<pos:position pos:line="689" pos:column="14"/></name><operator pos:line="689" pos:column="14">-&gt;<pos:position pos:line="689" pos:column="19"/></operator><name pos:line="689" pos:column="16">u<pos:position pos:line="689" pos:column="17"/></name><operator pos:line="689" pos:column="17">.<pos:position pos:line="689" pos:column="18"/></operator><name pos:line="689" pos:column="18">i<pos:position pos:line="689" pos:column="19"/></name></name></expr>;<pos:position pos:line="689" pos:column="20"/></expr_stmt>
    <expr_stmt><expr><name pos:line="690" pos:column="5">iB<pos:position pos:line="690" pos:column="7"/></name> <operator pos:line="690" pos:column="8">=<pos:position pos:line="690" pos:column="9"/></operator> <name><name pos:line="690" pos:column="10">pIn2<pos:position pos:line="690" pos:column="14"/></name><operator pos:line="690" pos:column="14">-&gt;<pos:position pos:line="690" pos:column="19"/></operator><name pos:line="690" pos:column="16">u<pos:position pos:line="690" pos:column="17"/></name><operator pos:line="690" pos:column="17">.<pos:position pos:line="690" pos:column="18"/></operator><name pos:line="690" pos:column="18">i<pos:position pos:line="690" pos:column="19"/></name></name></expr>;<pos:position pos:line="690" pos:column="20"/></expr_stmt>
    <switch pos:line="691" pos:column="5">switch<condition pos:line="691" pos:column="11">( <expr><name><name pos:line="691" pos:column="13">pOp<pos:position pos:line="691" pos:column="16"/></name><operator pos:line="691" pos:column="16">-&gt;<pos:position pos:line="691" pos:column="21"/></operator><name pos:line="691" pos:column="18">opcode<pos:position pos:line="691" pos:column="24"/></name></name></expr> )<pos:position pos:line="691" pos:column="26"/></condition><block pos:line="691" pos:column="26">{
      <case pos:line="692" pos:column="7">case <expr><name pos:line="692" pos:column="12">OP_Add<pos:position pos:line="692" pos:column="18"/></name></expr>:<pos:position pos:line="692" pos:column="19"/></case>         <expr_stmt><expr><name pos:line="692" pos:column="28">iB<pos:position pos:line="692" pos:column="30"/></name> <operator pos:line="692" pos:column="31">+=<pos:position pos:line="692" pos:column="33"/></operator> <name pos:line="692" pos:column="34">iA<pos:position pos:line="692" pos:column="36"/></name></expr>;<pos:position pos:line="692" pos:column="37"/></expr_stmt>       <break pos:line="692" pos:column="44">break;<pos:position pos:line="692" pos:column="50"/></break>
      <case pos:line="693" pos:column="7">case <expr><name pos:line="693" pos:column="12">OP_Subtract<pos:position pos:line="693" pos:column="23"/></name></expr>:<pos:position pos:line="693" pos:column="24"/></case>    <expr_stmt><expr><name pos:line="693" pos:column="28">iB<pos:position pos:line="693" pos:column="30"/></name> <operator pos:line="693" pos:column="31">-=<pos:position pos:line="693" pos:column="33"/></operator> <name pos:line="693" pos:column="34">iA<pos:position pos:line="693" pos:column="36"/></name></expr>;<pos:position pos:line="693" pos:column="37"/></expr_stmt>       <break pos:line="693" pos:column="44">break;<pos:position pos:line="693" pos:column="50"/></break>
      <case pos:line="694" pos:column="7">case <expr><name pos:line="694" pos:column="12">OP_Multiply<pos:position pos:line="694" pos:column="23"/></name></expr>:<pos:position pos:line="694" pos:column="24"/></case>    <expr_stmt><expr><name pos:line="694" pos:column="28">iB<pos:position pos:line="694" pos:column="30"/></name> <operator pos:line="694" pos:column="31">*=<pos:position pos:line="694" pos:column="33"/></operator> <name pos:line="694" pos:column="34">iA<pos:position pos:line="694" pos:column="36"/></name></expr>;<pos:position pos:line="694" pos:column="37"/></expr_stmt>       <break pos:line="694" pos:column="44">break;<pos:position pos:line="694" pos:column="50"/></break>
      <case pos:line="695" pos:column="7">case <expr><name pos:line="695" pos:column="12">OP_Divide<pos:position pos:line="695" pos:column="21"/></name></expr>:<pos:position pos:line="695" pos:column="22"/></case> <block pos:line="695" pos:column="23">{
        <if pos:line="696" pos:column="9">if<condition pos:line="696" pos:column="11">( <expr><name pos:line="696" pos:column="13">iA<pos:position pos:line="696" pos:column="15"/></name><operator pos:line="696" pos:column="15">==<pos:position pos:line="696" pos:column="17"/></operator><literal type="number" pos:line="696" pos:column="17">0<pos:position pos:line="696" pos:column="18"/></literal></expr> )<pos:position pos:line="696" pos:column="20"/></condition><then pos:line="696" pos:column="20"> <block type="pseudo"><goto pos:line="696" pos:column="21">goto <name pos:line="696" pos:column="26">arithmetic_result_is_null<pos:position pos:line="696" pos:column="51"/></name>;<pos:position pos:line="696" pos:column="52"/></goto></block></then></if>
        <comment type="block" pos:line="697" pos:column="9">/* Dividing the largest possible negative 64-bit integer (1&lt;&lt;63) by 
        ** -1 returns an integer too large to store in a 64-bit data-type. On
        ** some architectures, the value overflows to (1&lt;&lt;63). On others,
        ** a SIGFPE is issued. The following statement normalizes this
        ** behavior so that all architectures behave as if integer 
        ** overflow occurred.
        */</comment>
        <if pos:line="704" pos:column="9">if<condition pos:line="704" pos:column="11">( <expr><name pos:line="704" pos:column="13">iA<pos:position pos:line="704" pos:column="15"/></name><operator pos:line="704" pos:column="15">==<pos:position pos:line="704" pos:column="17"/></operator><operator pos:line="704" pos:column="17">-<pos:position pos:line="704" pos:column="18"/></operator><literal type="number" pos:line="704" pos:column="18">1<pos:position pos:line="704" pos:column="19"/></literal> <operator pos:line="704" pos:column="20">&amp;&amp;<pos:position pos:line="704" pos:column="30"/></operator> <name pos:line="704" pos:column="23">iB<pos:position pos:line="704" pos:column="25"/></name><operator pos:line="704" pos:column="25">==<pos:position pos:line="704" pos:column="27"/></operator><name pos:line="704" pos:column="27">SMALLEST_INT64<pos:position pos:line="704" pos:column="41"/></name></expr> )<pos:position pos:line="704" pos:column="43"/></condition><then pos:line="704" pos:column="43"> <block type="pseudo"><expr_stmt><expr><name pos:line="704" pos:column="44">iA<pos:position pos:line="704" pos:column="46"/></name> <operator pos:line="704" pos:column="47">=<pos:position pos:line="704" pos:column="48"/></operator> <literal type="number" pos:line="704" pos:column="49">1<pos:position pos:line="704" pos:column="50"/></literal></expr>;<pos:position pos:line="704" pos:column="51"/></expr_stmt></block></then></if>
        <expr_stmt><expr><name pos:line="705" pos:column="9">iB<pos:position pos:line="705" pos:column="11"/></name> <operator pos:line="705" pos:column="12">/=<pos:position pos:line="705" pos:column="14"/></operator> <name pos:line="705" pos:column="15">iA<pos:position pos:line="705" pos:column="17"/></name></expr>;<pos:position pos:line="705" pos:column="18"/></expr_stmt>
        <break pos:line="706" pos:column="9">break;<pos:position pos:line="706" pos:column="15"/></break>
      }<pos:position pos:line="707" pos:column="8"/></block>
      <default pos:line="708" pos:column="7">default:<pos:position pos:line="708" pos:column="15"/></default> <block pos:line="708" pos:column="16">{
        <if pos:line="709" pos:column="9">if<condition pos:line="709" pos:column="11">( <expr><name pos:line="709" pos:column="13">iA<pos:position pos:line="709" pos:column="15"/></name><operator pos:line="709" pos:column="15">==<pos:position pos:line="709" pos:column="17"/></operator><literal type="number" pos:line="709" pos:column="17">0<pos:position pos:line="709" pos:column="18"/></literal></expr> )<pos:position pos:line="709" pos:column="20"/></condition><then pos:line="709" pos:column="20"> <block type="pseudo"><goto pos:line="709" pos:column="21">goto <name pos:line="709" pos:column="26">arithmetic_result_is_null<pos:position pos:line="709" pos:column="51"/></name>;<pos:position pos:line="709" pos:column="52"/></goto></block></then></if>
        <if pos:line="710" pos:column="9">if<condition pos:line="710" pos:column="11">( <expr><name pos:line="710" pos:column="13">iA<pos:position pos:line="710" pos:column="15"/></name><operator pos:line="710" pos:column="15">==<pos:position pos:line="710" pos:column="17"/></operator><operator pos:line="710" pos:column="17">-<pos:position pos:line="710" pos:column="18"/></operator><literal type="number" pos:line="710" pos:column="18">1<pos:position pos:line="710" pos:column="19"/></literal></expr> )<pos:position pos:line="710" pos:column="21"/></condition><then pos:line="710" pos:column="21"> <block type="pseudo"><expr_stmt><expr><name pos:line="710" pos:column="22">iA<pos:position pos:line="710" pos:column="24"/></name> <operator pos:line="710" pos:column="25">=<pos:position pos:line="710" pos:column="26"/></operator> <literal type="number" pos:line="710" pos:column="27">1<pos:position pos:line="710" pos:column="28"/></literal></expr>;<pos:position pos:line="710" pos:column="29"/></expr_stmt></block></then></if>
        <expr_stmt><expr><name pos:line="711" pos:column="9">iB<pos:position pos:line="711" pos:column="11"/></name> <operator pos:line="711" pos:column="12">%=<pos:position pos:line="711" pos:column="14"/></operator> <name pos:line="711" pos:column="15">iA<pos:position pos:line="711" pos:column="17"/></name></expr>;<pos:position pos:line="711" pos:column="18"/></expr_stmt>
        <break pos:line="712" pos:column="9">break;<pos:position pos:line="712" pos:column="15"/></break>
      }<pos:position pos:line="713" pos:column="8"/></block>
    }<pos:position pos:line="714" pos:column="6"/></block></switch>
    <expr_stmt><expr><name><name pos:line="715" pos:column="5">pOut<pos:position pos:line="715" pos:column="9"/></name><operator pos:line="715" pos:column="9">-&gt;<pos:position pos:line="715" pos:column="14"/></operator><name pos:line="715" pos:column="11">u<pos:position pos:line="715" pos:column="12"/></name><operator pos:line="715" pos:column="12">.<pos:position pos:line="715" pos:column="13"/></operator><name pos:line="715" pos:column="13">i<pos:position pos:line="715" pos:column="14"/></name></name> <operator pos:line="715" pos:column="15">=<pos:position pos:line="715" pos:column="16"/></operator> <name pos:line="715" pos:column="17">iB<pos:position pos:line="715" pos:column="19"/></name></expr>;<pos:position pos:line="715" pos:column="20"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="716" pos:column="5">MemSetTypeFlag<pos:position pos:line="716" pos:column="19"/></name><argument_list pos:line="716" pos:column="19">(<argument><expr><name pos:line="716" pos:column="20">pOut<pos:position pos:line="716" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="716" pos:column="26">MEM_Int<pos:position pos:line="716" pos:column="33"/></name></expr></argument>)<pos:position pos:line="716" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="716" pos:column="35"/></expr_stmt>
  }<pos:position pos:line="717" pos:column="4"/></block></then><else pos:line="717" pos:column="4">else<block pos:line="717" pos:column="8">{
    <expr_stmt><expr><name pos:line="718" pos:column="5">rA<pos:position pos:line="718" pos:column="7"/></name> <operator pos:line="718" pos:column="8">=<pos:position pos:line="718" pos:column="9"/></operator> <call><name pos:line="718" pos:column="10">sqlite3VdbeRealValue<pos:position pos:line="718" pos:column="30"/></name><argument_list pos:line="718" pos:column="30">(<argument><expr><name pos:line="718" pos:column="31">pIn1<pos:position pos:line="718" pos:column="35"/></name></expr></argument>)<pos:position pos:line="718" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="718" pos:column="37"/></expr_stmt>
    <expr_stmt><expr><name pos:line="719" pos:column="5">rB<pos:position pos:line="719" pos:column="7"/></name> <operator pos:line="719" pos:column="8">=<pos:position pos:line="719" pos:column="9"/></operator> <call><name pos:line="719" pos:column="10">sqlite3VdbeRealValue<pos:position pos:line="719" pos:column="30"/></name><argument_list pos:line="719" pos:column="30">(<argument><expr><name pos:line="719" pos:column="31">pIn2<pos:position pos:line="719" pos:column="35"/></name></expr></argument>)<pos:position pos:line="719" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="719" pos:column="37"/></expr_stmt>
    <switch pos:line="720" pos:column="5">switch<condition pos:line="720" pos:column="11">( <expr><name><name pos:line="720" pos:column="13">pOp<pos:position pos:line="720" pos:column="16"/></name><operator pos:line="720" pos:column="16">-&gt;<pos:position pos:line="720" pos:column="21"/></operator><name pos:line="720" pos:column="18">opcode<pos:position pos:line="720" pos:column="24"/></name></name></expr> )<pos:position pos:line="720" pos:column="26"/></condition><block pos:line="720" pos:column="26">{
      <case pos:line="721" pos:column="7">case <expr><name pos:line="721" pos:column="12">OP_Add<pos:position pos:line="721" pos:column="18"/></name></expr>:<pos:position pos:line="721" pos:column="19"/></case>         <expr_stmt><expr><name pos:line="721" pos:column="28">rB<pos:position pos:line="721" pos:column="30"/></name> <operator pos:line="721" pos:column="31">+=<pos:position pos:line="721" pos:column="33"/></operator> <name pos:line="721" pos:column="34">rA<pos:position pos:line="721" pos:column="36"/></name></expr>;<pos:position pos:line="721" pos:column="37"/></expr_stmt>       <break pos:line="721" pos:column="44">break;<pos:position pos:line="721" pos:column="50"/></break>
      <case pos:line="722" pos:column="7">case <expr><name pos:line="722" pos:column="12">OP_Subtract<pos:position pos:line="722" pos:column="23"/></name></expr>:<pos:position pos:line="722" pos:column="24"/></case>    <expr_stmt><expr><name pos:line="722" pos:column="28">rB<pos:position pos:line="722" pos:column="30"/></name> <operator pos:line="722" pos:column="31">-=<pos:position pos:line="722" pos:column="33"/></operator> <name pos:line="722" pos:column="34">rA<pos:position pos:line="722" pos:column="36"/></name></expr>;<pos:position pos:line="722" pos:column="37"/></expr_stmt>       <break pos:line="722" pos:column="44">break;<pos:position pos:line="722" pos:column="50"/></break>
      <case pos:line="723" pos:column="7">case <expr><name pos:line="723" pos:column="12">OP_Multiply<pos:position pos:line="723" pos:column="23"/></name></expr>:<pos:position pos:line="723" pos:column="24"/></case>    <expr_stmt><expr><name pos:line="723" pos:column="28">rB<pos:position pos:line="723" pos:column="30"/></name> <operator pos:line="723" pos:column="31">*=<pos:position pos:line="723" pos:column="33"/></operator> <name pos:line="723" pos:column="34">rA<pos:position pos:line="723" pos:column="36"/></name></expr>;<pos:position pos:line="723" pos:column="37"/></expr_stmt>       <break pos:line="723" pos:column="44">break;<pos:position pos:line="723" pos:column="50"/></break>
      <case pos:line="724" pos:column="7">case <expr><name pos:line="724" pos:column="12">OP_Divide<pos:position pos:line="724" pos:column="21"/></name></expr>:<pos:position pos:line="724" pos:column="22"/></case> <block pos:line="724" pos:column="23">{
        <comment type="block" pos:line="725" pos:column="9">/* (double)0 In case of SQLITE_OMIT_FLOATING_POINT... */</comment>
        <if pos:line="726" pos:column="9">if<condition pos:line="726" pos:column="11">( <expr><name pos:line="726" pos:column="13">rA<pos:position pos:line="726" pos:column="15"/></name><operator pos:line="726" pos:column="15">==<pos:position pos:line="726" pos:column="17"/></operator><operator pos:line="726" pos:column="17">(<pos:position pos:line="726" pos:column="18"/></operator><name pos:line="726" pos:column="18">double<pos:position pos:line="726" pos:column="24"/></name><operator pos:line="726" pos:column="24">)<pos:position pos:line="726" pos:column="25"/></operator><literal type="number" pos:line="726" pos:column="25">0<pos:position pos:line="726" pos:column="26"/></literal></expr> )<pos:position pos:line="726" pos:column="28"/></condition><then pos:line="726" pos:column="28"> <block type="pseudo"><goto pos:line="726" pos:column="29">goto <name pos:line="726" pos:column="34">arithmetic_result_is_null<pos:position pos:line="726" pos:column="59"/></name>;<pos:position pos:line="726" pos:column="60"/></goto></block></then></if>
        <expr_stmt><expr><name pos:line="727" pos:column="9">rB<pos:position pos:line="727" pos:column="11"/></name> <operator pos:line="727" pos:column="12">/=<pos:position pos:line="727" pos:column="14"/></operator> <name pos:line="727" pos:column="15">rA<pos:position pos:line="727" pos:column="17"/></name></expr>;<pos:position pos:line="727" pos:column="18"/></expr_stmt>
        <break pos:line="728" pos:column="9">break;<pos:position pos:line="728" pos:column="15"/></break>
      }<pos:position pos:line="729" pos:column="8"/></block>
      <default pos:line="730" pos:column="7">default:<pos:position pos:line="730" pos:column="15"/></default> <block pos:line="730" pos:column="16">{
        <expr_stmt><expr><name pos:line="731" pos:column="9">iA<pos:position pos:line="731" pos:column="11"/></name> <operator pos:line="731" pos:column="12">=<pos:position pos:line="731" pos:column="13"/></operator> <operator pos:line="731" pos:column="14">(<pos:position pos:line="731" pos:column="15"/></operator><name pos:line="731" pos:column="15">i64<pos:position pos:line="731" pos:column="18"/></name><operator pos:line="731" pos:column="18">)<pos:position pos:line="731" pos:column="19"/></operator><name pos:line="731" pos:column="19">rA<pos:position pos:line="731" pos:column="21"/></name></expr>;<pos:position pos:line="731" pos:column="22"/></expr_stmt>
        <expr_stmt><expr><name pos:line="732" pos:column="9">iB<pos:position pos:line="732" pos:column="11"/></name> <operator pos:line="732" pos:column="12">=<pos:position pos:line="732" pos:column="13"/></operator> <operator pos:line="732" pos:column="14">(<pos:position pos:line="732" pos:column="15"/></operator><name pos:line="732" pos:column="15">i64<pos:position pos:line="732" pos:column="18"/></name><operator pos:line="732" pos:column="18">)<pos:position pos:line="732" pos:column="19"/></operator><name pos:line="732" pos:column="19">rB<pos:position pos:line="732" pos:column="21"/></name></expr>;<pos:position pos:line="732" pos:column="22"/></expr_stmt>
        <if pos:line="733" pos:column="9">if<condition pos:line="733" pos:column="11">( <expr><name pos:line="733" pos:column="13">iA<pos:position pos:line="733" pos:column="15"/></name><operator pos:line="733" pos:column="15">==<pos:position pos:line="733" pos:column="17"/></operator><literal type="number" pos:line="733" pos:column="17">0<pos:position pos:line="733" pos:column="18"/></literal></expr> )<pos:position pos:line="733" pos:column="20"/></condition><then pos:line="733" pos:column="20"> <block type="pseudo"><goto pos:line="733" pos:column="21">goto <name pos:line="733" pos:column="26">arithmetic_result_is_null<pos:position pos:line="733" pos:column="51"/></name>;<pos:position pos:line="733" pos:column="52"/></goto></block></then></if>
        <if pos:line="734" pos:column="9">if<condition pos:line="734" pos:column="11">( <expr><name pos:line="734" pos:column="13">iA<pos:position pos:line="734" pos:column="15"/></name><operator pos:line="734" pos:column="15">==<pos:position pos:line="734" pos:column="17"/></operator><operator pos:line="734" pos:column="17">-<pos:position pos:line="734" pos:column="18"/></operator><literal type="number" pos:line="734" pos:column="18">1<pos:position pos:line="734" pos:column="19"/></literal></expr> )<pos:position pos:line="734" pos:column="21"/></condition><then pos:line="734" pos:column="21"> <block type="pseudo"><expr_stmt><expr><name pos:line="734" pos:column="22">iA<pos:position pos:line="734" pos:column="24"/></name> <operator pos:line="734" pos:column="25">=<pos:position pos:line="734" pos:column="26"/></operator> <literal type="number" pos:line="734" pos:column="27">1<pos:position pos:line="734" pos:column="28"/></literal></expr>;<pos:position pos:line="734" pos:column="29"/></expr_stmt></block></then></if>
        <expr_stmt><expr><name pos:line="735" pos:column="9">rB<pos:position pos:line="735" pos:column="11"/></name> <operator pos:line="735" pos:column="12">=<pos:position pos:line="735" pos:column="13"/></operator> <call pos:line="735" pos:column="14">(<name pos:line="735" pos:column="15">double<pos:position pos:line="735" pos:column="21"/></name>)<argument_list pos:line="735" pos:column="22">(<argument><expr><name pos:line="735" pos:column="23">iB<pos:position pos:line="735" pos:column="25"/></name> <operator pos:line="735" pos:column="26">%<pos:position pos:line="735" pos:column="27"/></operator> <name pos:line="735" pos:column="28">iA<pos:position pos:line="735" pos:column="30"/></name></expr></argument>)<pos:position pos:line="735" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="735" pos:column="32"/></expr_stmt>
        <break pos:line="736" pos:column="9">break;<pos:position pos:line="736" pos:column="15"/></break>
      }<pos:position pos:line="737" pos:column="8"/></block>
    }<pos:position pos:line="738" pos:column="6"/></block></switch>
    <if pos:line="739" pos:column="5">if<condition pos:line="739" pos:column="7">( <expr><call><name pos:line="739" pos:column="9">sqlite3IsNaN<pos:position pos:line="739" pos:column="21"/></name><argument_list pos:line="739" pos:column="21">(<argument><expr><name pos:line="739" pos:column="22">rB<pos:position pos:line="739" pos:column="24"/></name></expr></argument>)<pos:position pos:line="739" pos:column="25"/></argument_list></call></expr> )<pos:position pos:line="739" pos:column="27"/></condition><then><block pos:line="739" pos:column="27">{
      <goto pos:line="740" pos:column="7">goto <name pos:line="740" pos:column="12">arithmetic_result_is_null<pos:position pos:line="740" pos:column="37"/></name>;<pos:position pos:line="740" pos:column="38"/></goto>
    }<pos:position pos:line="741" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name><name pos:line="742" pos:column="5">pOut<pos:position pos:line="742" pos:column="9"/></name><operator pos:line="742" pos:column="9">-&gt;<pos:position pos:line="742" pos:column="14"/></operator><name pos:line="742" pos:column="11">r<pos:position pos:line="742" pos:column="12"/></name></name> <operator pos:line="742" pos:column="13">=<pos:position pos:line="742" pos:column="14"/></operator> <name pos:line="742" pos:column="15">rB<pos:position pos:line="742" pos:column="17"/></name></expr>;<pos:position pos:line="742" pos:column="18"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="743" pos:column="5">MemSetTypeFlag<pos:position pos:line="743" pos:column="19"/></name><argument_list pos:line="743" pos:column="19">(<argument><expr><name pos:line="743" pos:column="20">pOut<pos:position pos:line="743" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="743" pos:column="26">MEM_Real<pos:position pos:line="743" pos:column="34"/></name></expr></argument>)<pos:position pos:line="743" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="743" pos:column="36"/></expr_stmt>
    <if pos:line="744" pos:column="5">if<condition pos:line="744" pos:column="7">( <expr><operator pos:line="744" pos:column="9">(<pos:position pos:line="744" pos:column="10"/></operator><name pos:line="744" pos:column="10">flags<pos:position pos:line="744" pos:column="15"/></name> <operator pos:line="744" pos:column="16">&amp;<pos:position pos:line="744" pos:column="21"/></operator> <name pos:line="744" pos:column="18">MEM_Real<pos:position pos:line="744" pos:column="26"/></name><operator pos:line="744" pos:column="26">)<pos:position pos:line="744" pos:column="27"/></operator><operator pos:line="744" pos:column="27">==<pos:position pos:line="744" pos:column="29"/></operator><literal type="number" pos:line="744" pos:column="29">0<pos:position pos:line="744" pos:column="30"/></literal></expr> )<pos:position pos:line="744" pos:column="32"/></condition><then><block pos:line="744" pos:column="32">{
      <expr_stmt><expr><call><name pos:line="745" pos:column="7">sqlite3VdbeIntegerAffinity<pos:position pos:line="745" pos:column="33"/></name><argument_list pos:line="745" pos:column="33">(<argument><expr><name pos:line="745" pos:column="34">pOut<pos:position pos:line="745" pos:column="38"/></name></expr></argument>)<pos:position pos:line="745" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="745" pos:column="40"/></expr_stmt>
    }<pos:position pos:line="746" pos:column="6"/></block></then></if>
  }<pos:position pos:line="747" pos:column="4"/></block></else></if>
  <break pos:line="748" pos:column="3">break;<pos:position pos:line="748" pos:column="9"/></break>

<label><name pos:line="750" pos:column="1">arithmetic_result_is_null<pos:position pos:line="750" pos:column="26"/></name>:<pos:position pos:line="750" pos:column="27"/></label>
  <expr_stmt><expr><call><name pos:line="751" pos:column="3">sqlite3VdbeMemSetNull<pos:position pos:line="751" pos:column="24"/></name><argument_list pos:line="751" pos:column="24">(<argument><expr><name pos:line="751" pos:column="25">pOut<pos:position pos:line="751" pos:column="29"/></name></expr></argument>)<pos:position pos:line="751" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="751" pos:column="31"/></expr_stmt>
  <break pos:line="752" pos:column="3">break;<pos:position pos:line="752" pos:column="9"/></break>
}<pos:position pos:line="753" pos:column="2"/></block>

<comment type="block" pos:line="755" pos:column="1">/* Opcode: CollSeq * * P4
**
** P4 is a pointer to a CollSeq struct. If the next call to a user function
** or aggregate calls sqlite3GetFuncCollSeq(), this collation sequence will
** be returned. This is used by the built-in min(), max() and nullif()
** functions.
**
** The interface used by the implementation of the aforementioned functions
** to retrieve the collation sequence set by this opcode is not available
** publicly, only to user functions defined in func.c.
*/</comment>
<case pos:line="766" pos:column="1">case <expr><name pos:line="766" pos:column="6">OP_CollSeq<pos:position pos:line="766" pos:column="16"/></name></expr>:<pos:position pos:line="766" pos:column="17"/></case> <block pos:line="766" pos:column="18">{
  <expr_stmt><expr><call><name pos:line="767" pos:column="3">assert<pos:position pos:line="767" pos:column="9"/></name><argument_list pos:line="767" pos:column="9">( <argument><expr><name><name pos:line="767" pos:column="11">pOp<pos:position pos:line="767" pos:column="14"/></name><operator pos:line="767" pos:column="14">-&gt;<pos:position pos:line="767" pos:column="19"/></operator><name pos:line="767" pos:column="16">p4type<pos:position pos:line="767" pos:column="22"/></name></name><operator pos:line="767" pos:column="22">==<pos:position pos:line="767" pos:column="24"/></operator><name pos:line="767" pos:column="24">P4_COLLSEQ<pos:position pos:line="767" pos:column="34"/></name></expr></argument> )<pos:position pos:line="767" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="767" pos:column="37"/></expr_stmt>
  <break pos:line="768" pos:column="3">break;<pos:position pos:line="768" pos:column="9"/></break>
}<pos:position pos:line="769" pos:column="2"/></block>

<comment type="block" pos:line="771" pos:column="1">/* Opcode: Function P1 P2 P3 P4 P5
**
** Invoke a user function (P4 is a pointer to a Function structure that
** defines the function) with P5 arguments taken from register P2 and
** successors.  The result of the function is stored in register P3.
** Register P3 must not be one of the function inputs.
**
** P1 is a 32-bit bitmask indicating whether or not each argument to the 
** function was determined to be constant at compile time. If the first
** argument was constant then bit 0 of P1 is set. This is used to determine
** whether meta data associated with a user function argument using the
** sqlite3_set_auxdata() API may be safely retained until the next
** invocation of this opcode.
**
** See also: AggStep and AggFinal
*/</comment>
<case pos:line="787" pos:column="1">case <expr><name pos:line="787" pos:column="6">OP_Function<pos:position pos:line="787" pos:column="17"/></name></expr>:<pos:position pos:line="787" pos:column="18"/></case> <block pos:line="787" pos:column="19">{
  <decl_stmt><decl><type><name pos:line="788" pos:column="3">int<pos:position pos:line="788" pos:column="6"/></name></type> <name pos:line="788" pos:column="7">i<pos:position pos:line="788" pos:column="8"/></name></decl>;<pos:position pos:line="788" pos:column="9"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="789" pos:column="3">Mem<pos:position pos:line="789" pos:column="6"/></name> <modifier pos:line="789" pos:column="7">*<pos:position pos:line="789" pos:column="8"/></modifier></type><name pos:line="789" pos:column="8">pArg<pos:position pos:line="789" pos:column="12"/></name></decl>;<pos:position pos:line="789" pos:column="13"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="790" pos:column="3">sqlite3_context<pos:position pos:line="790" pos:column="18"/></name></type> <name pos:line="790" pos:column="19">ctx<pos:position pos:line="790" pos:column="22"/></name></decl>;<pos:position pos:line="790" pos:column="23"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="791" pos:column="3">sqlite3_value<pos:position pos:line="791" pos:column="16"/></name> <modifier pos:line="791" pos:column="17">*<pos:position pos:line="791" pos:column="18"/></modifier><modifier pos:line="791" pos:column="18">*<pos:position pos:line="791" pos:column="19"/></modifier></type><name pos:line="791" pos:column="19">apVal<pos:position pos:line="791" pos:column="24"/></name></decl>;<pos:position pos:line="791" pos:column="25"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="792" pos:column="3">int<pos:position pos:line="792" pos:column="6"/></name></type> <name pos:line="792" pos:column="7">n<pos:position pos:line="792" pos:column="8"/></name></decl>;<pos:position pos:line="792" pos:column="9"/></decl_stmt>

  <expr_stmt><expr><name pos:line="794" pos:column="3">n<pos:position pos:line="794" pos:column="4"/></name> <operator pos:line="794" pos:column="5">=<pos:position pos:line="794" pos:column="6"/></operator> <name><name pos:line="794" pos:column="7">pOp<pos:position pos:line="794" pos:column="10"/></name><operator pos:line="794" pos:column="10">-&gt;<pos:position pos:line="794" pos:column="15"/></operator><name pos:line="794" pos:column="12">p5<pos:position pos:line="794" pos:column="14"/></name></name></expr>;<pos:position pos:line="794" pos:column="15"/></expr_stmt>
  <expr_stmt><expr><name pos:line="795" pos:column="3">apVal<pos:position pos:line="795" pos:column="8"/></name> <operator pos:line="795" pos:column="9">=<pos:position pos:line="795" pos:column="10"/></operator> <name><name pos:line="795" pos:column="11">p<pos:position pos:line="795" pos:column="12"/></name><operator pos:line="795" pos:column="12">-&gt;<pos:position pos:line="795" pos:column="17"/></operator><name pos:line="795" pos:column="14">apArg<pos:position pos:line="795" pos:column="19"/></name></name></expr>;<pos:position pos:line="795" pos:column="20"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="796" pos:column="3">assert<pos:position pos:line="796" pos:column="9"/></name><argument_list pos:line="796" pos:column="9">( <argument><expr><name pos:line="796" pos:column="11">apVal<pos:position pos:line="796" pos:column="16"/></name> <operator pos:line="796" pos:column="17">||<pos:position pos:line="796" pos:column="19"/></operator> <name pos:line="796" pos:column="20">n<pos:position pos:line="796" pos:column="21"/></name><operator pos:line="796" pos:column="21">==<pos:position pos:line="796" pos:column="23"/></operator><literal type="number" pos:line="796" pos:column="23">0<pos:position pos:line="796" pos:column="24"/></literal></expr></argument> )<pos:position pos:line="796" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="796" pos:column="27"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="798" pos:column="3">assert<pos:position pos:line="798" pos:column="9"/></name><argument_list pos:line="798" pos:column="9">( <argument><expr><name pos:line="798" pos:column="11">n<pos:position pos:line="798" pos:column="12"/></name><operator pos:line="798" pos:column="12">==<pos:position pos:line="798" pos:column="14"/></operator><literal type="number" pos:line="798" pos:column="14">0<pos:position pos:line="798" pos:column="15"/></literal> <operator pos:line="798" pos:column="16">||<pos:position pos:line="798" pos:column="18"/></operator> <operator pos:line="798" pos:column="19">(<pos:position pos:line="798" pos:column="20"/></operator><name><name pos:line="798" pos:column="20">pOp<pos:position pos:line="798" pos:column="23"/></name><operator pos:line="798" pos:column="23">-&gt;<pos:position pos:line="798" pos:column="28"/></operator><name pos:line="798" pos:column="25">p2<pos:position pos:line="798" pos:column="27"/></name></name><operator pos:line="798" pos:column="27">&gt;<pos:position pos:line="798" pos:column="31"/></operator><literal type="number" pos:line="798" pos:column="28">0<pos:position pos:line="798" pos:column="29"/></literal> <operator pos:line="798" pos:column="30">&amp;&amp;<pos:position pos:line="798" pos:column="40"/></operator> <name><name pos:line="798" pos:column="33">pOp<pos:position pos:line="798" pos:column="36"/></name><operator pos:line="798" pos:column="36">-&gt;<pos:position pos:line="798" pos:column="41"/></operator><name pos:line="798" pos:column="38">p2<pos:position pos:line="798" pos:column="40"/></name></name><operator pos:line="798" pos:column="40">+<pos:position pos:line="798" pos:column="41"/></operator><name pos:line="798" pos:column="41">n<pos:position pos:line="798" pos:column="42"/></name><operator pos:line="798" pos:column="42">&lt;=<pos:position pos:line="798" pos:column="47"/></operator><name><name pos:line="798" pos:column="44">p<pos:position pos:line="798" pos:column="45"/></name><operator pos:line="798" pos:column="45">-&gt;<pos:position pos:line="798" pos:column="50"/></operator><name pos:line="798" pos:column="47">nMem<pos:position pos:line="798" pos:column="51"/></name></name><operator pos:line="798" pos:column="51">+<pos:position pos:line="798" pos:column="52"/></operator><literal type="number" pos:line="798" pos:column="52">1<pos:position pos:line="798" pos:column="53"/></literal><operator pos:line="798" pos:column="53">)<pos:position pos:line="798" pos:column="54"/></operator></expr></argument> )<pos:position pos:line="798" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="798" pos:column="57"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="799" pos:column="3">assert<pos:position pos:line="799" pos:column="9"/></name><argument_list pos:line="799" pos:column="9">( <argument><expr><name><name pos:line="799" pos:column="11">pOp<pos:position pos:line="799" pos:column="14"/></name><operator pos:line="799" pos:column="14">-&gt;<pos:position pos:line="799" pos:column="19"/></operator><name pos:line="799" pos:column="16">p3<pos:position pos:line="799" pos:column="18"/></name></name><operator pos:line="799" pos:column="18">&lt;<pos:position pos:line="799" pos:column="22"/></operator><name><name pos:line="799" pos:column="19">pOp<pos:position pos:line="799" pos:column="22"/></name><operator pos:line="799" pos:column="22">-&gt;<pos:position pos:line="799" pos:column="27"/></operator><name pos:line="799" pos:column="24">p2<pos:position pos:line="799" pos:column="26"/></name></name> <operator pos:line="799" pos:column="27">||<pos:position pos:line="799" pos:column="29"/></operator> <name><name pos:line="799" pos:column="30">pOp<pos:position pos:line="799" pos:column="33"/></name><operator pos:line="799" pos:column="33">-&gt;<pos:position pos:line="799" pos:column="38"/></operator><name pos:line="799" pos:column="35">p3<pos:position pos:line="799" pos:column="37"/></name></name><operator pos:line="799" pos:column="37">&gt;=<pos:position pos:line="799" pos:column="42"/></operator><name><name pos:line="799" pos:column="39">pOp<pos:position pos:line="799" pos:column="42"/></name><operator pos:line="799" pos:column="42">-&gt;<pos:position pos:line="799" pos:column="47"/></operator><name pos:line="799" pos:column="44">p2<pos:position pos:line="799" pos:column="46"/></name></name><operator pos:line="799" pos:column="46">+<pos:position pos:line="799" pos:column="47"/></operator><name pos:line="799" pos:column="47">n<pos:position pos:line="799" pos:column="48"/></name></expr></argument> )<pos:position pos:line="799" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="799" pos:column="51"/></expr_stmt>
  <expr_stmt><expr><name pos:line="800" pos:column="3">pArg<pos:position pos:line="800" pos:column="7"/></name> <operator pos:line="800" pos:column="8">=<pos:position pos:line="800" pos:column="9"/></operator> <operator pos:line="800" pos:column="10">&amp;<pos:position pos:line="800" pos:column="15"/></operator><name><name pos:line="800" pos:column="11">p<pos:position pos:line="800" pos:column="12"/></name><operator pos:line="800" pos:column="12">-&gt;<pos:position pos:line="800" pos:column="17"/></operator><name pos:line="800" pos:column="14">aMem<pos:position pos:line="800" pos:column="18"/></name><index pos:line="800" pos:column="18">[<expr><name><name pos:line="800" pos:column="19">pOp<pos:position pos:line="800" pos:column="22"/></name><operator pos:line="800" pos:column="22">-&gt;<pos:position pos:line="800" pos:column="27"/></operator><name pos:line="800" pos:column="24">p2<pos:position pos:line="800" pos:column="26"/></name></name></expr>]<pos:position pos:line="800" pos:column="27"/></index></name></expr>;<pos:position pos:line="800" pos:column="28"/></expr_stmt>
  <for pos:line="801" pos:column="3">for<control pos:line="801" pos:column="6">(<init><expr><name pos:line="801" pos:column="7">i<pos:position pos:line="801" pos:column="8"/></name><operator pos:line="801" pos:column="8">=<pos:position pos:line="801" pos:column="9"/></operator><literal type="number" pos:line="801" pos:column="9">0<pos:position pos:line="801" pos:column="10"/></literal></expr>;<pos:position pos:line="801" pos:column="11"/></init> <condition><expr><name pos:line="801" pos:column="12">i<pos:position pos:line="801" pos:column="13"/></name><operator pos:line="801" pos:column="13">&lt;<pos:position pos:line="801" pos:column="17"/></operator><name pos:line="801" pos:column="14">n<pos:position pos:line="801" pos:column="15"/></name></expr>;<pos:position pos:line="801" pos:column="16"/></condition> <incr><expr><name pos:line="801" pos:column="17">i<pos:position pos:line="801" pos:column="18"/></name><operator pos:line="801" pos:column="18">++<pos:position pos:line="801" pos:column="20"/></operator></expr><operator pos:line="801" pos:column="20">,<pos:position pos:line="801" pos:column="21"/></operator> <expr><name pos:line="801" pos:column="22">pArg<pos:position pos:line="801" pos:column="26"/></name><operator pos:line="801" pos:column="26">++<pos:position pos:line="801" pos:column="28"/></operator></expr></incr>)<pos:position pos:line="801" pos:column="29"/></control><block pos:line="801" pos:column="29">{
    <expr_stmt><expr><name><name pos:line="802" pos:column="5">apVal<pos:position pos:line="802" pos:column="10"/></name><index pos:line="802" pos:column="10">[<expr><name pos:line="802" pos:column="11">i<pos:position pos:line="802" pos:column="12"/></name></expr>]<pos:position pos:line="802" pos:column="13"/></index></name> <operator pos:line="802" pos:column="14">=<pos:position pos:line="802" pos:column="15"/></operator> <name pos:line="802" pos:column="16">pArg<pos:position pos:line="802" pos:column="20"/></name></expr>;<pos:position pos:line="802" pos:column="21"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="803" pos:column="5">storeTypeInfo<pos:position pos:line="803" pos:column="18"/></name><argument_list pos:line="803" pos:column="18">(<argument><expr><name pos:line="803" pos:column="19">pArg<pos:position pos:line="803" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="803" pos:column="25">encoding<pos:position pos:line="803" pos:column="33"/></name></expr></argument>)<pos:position pos:line="803" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="803" pos:column="35"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="804" pos:column="5">REGISTER_TRACE<pos:position pos:line="804" pos:column="19"/></name><argument_list pos:line="804" pos:column="19">(<argument><expr><name><name pos:line="804" pos:column="20">pOp<pos:position pos:line="804" pos:column="23"/></name><operator pos:line="804" pos:column="23">-&gt;<pos:position pos:line="804" pos:column="28"/></operator><name pos:line="804" pos:column="25">p2<pos:position pos:line="804" pos:column="27"/></name></name></expr></argument>, <argument><expr><name pos:line="804" pos:column="29">pArg<pos:position pos:line="804" pos:column="33"/></name></expr></argument>)<pos:position pos:line="804" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="804" pos:column="35"/></expr_stmt>
  }<pos:position pos:line="805" pos:column="4"/></block></for>

  <expr_stmt><expr><call><name pos:line="807" pos:column="3">assert<pos:position pos:line="807" pos:column="9"/></name><argument_list pos:line="807" pos:column="9">( <argument><expr><name><name pos:line="807" pos:column="11">pOp<pos:position pos:line="807" pos:column="14"/></name><operator pos:line="807" pos:column="14">-&gt;<pos:position pos:line="807" pos:column="19"/></operator><name pos:line="807" pos:column="16">p4type<pos:position pos:line="807" pos:column="22"/></name></name><operator pos:line="807" pos:column="22">==<pos:position pos:line="807" pos:column="24"/></operator><name pos:line="807" pos:column="24">P4_FUNCDEF<pos:position pos:line="807" pos:column="34"/></name> <operator pos:line="807" pos:column="35">||<pos:position pos:line="807" pos:column="37"/></operator> <name><name pos:line="807" pos:column="38">pOp<pos:position pos:line="807" pos:column="41"/></name><operator pos:line="807" pos:column="41">-&gt;<pos:position pos:line="807" pos:column="46"/></operator><name pos:line="807" pos:column="43">p4type<pos:position pos:line="807" pos:column="49"/></name></name><operator pos:line="807" pos:column="49">==<pos:position pos:line="807" pos:column="51"/></operator><name pos:line="807" pos:column="51">P4_VDBEFUNC<pos:position pos:line="807" pos:column="62"/></name></expr></argument> )<pos:position pos:line="807" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="807" pos:column="65"/></expr_stmt>
  <if pos:line="808" pos:column="3">if<condition pos:line="808" pos:column="5">( <expr><name><name pos:line="808" pos:column="7">pOp<pos:position pos:line="808" pos:column="10"/></name><operator pos:line="808" pos:column="10">-&gt;<pos:position pos:line="808" pos:column="15"/></operator><name pos:line="808" pos:column="12">p4type<pos:position pos:line="808" pos:column="18"/></name></name><operator pos:line="808" pos:column="18">==<pos:position pos:line="808" pos:column="20"/></operator><name pos:line="808" pos:column="20">P4_FUNCDEF<pos:position pos:line="808" pos:column="30"/></name></expr> )<pos:position pos:line="808" pos:column="32"/></condition><then><block pos:line="808" pos:column="32">{
    <expr_stmt><expr><name><name pos:line="809" pos:column="5">ctx<pos:position pos:line="809" pos:column="8"/></name><operator pos:line="809" pos:column="8">.<pos:position pos:line="809" pos:column="9"/></operator><name pos:line="809" pos:column="9">pFunc<pos:position pos:line="809" pos:column="14"/></name></name> <operator pos:line="809" pos:column="15">=<pos:position pos:line="809" pos:column="16"/></operator> <name><name pos:line="809" pos:column="17">pOp<pos:position pos:line="809" pos:column="20"/></name><operator pos:line="809" pos:column="20">-&gt;<pos:position pos:line="809" pos:column="25"/></operator><name pos:line="809" pos:column="22">p4<pos:position pos:line="809" pos:column="24"/></name><operator pos:line="809" pos:column="24">.<pos:position pos:line="809" pos:column="25"/></operator><name pos:line="809" pos:column="25">pFunc<pos:position pos:line="809" pos:column="30"/></name></name></expr>;<pos:position pos:line="809" pos:column="31"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="810" pos:column="5">ctx<pos:position pos:line="810" pos:column="8"/></name><operator pos:line="810" pos:column="8">.<pos:position pos:line="810" pos:column="9"/></operator><name pos:line="810" pos:column="9">pVdbeFunc<pos:position pos:line="810" pos:column="18"/></name></name> <operator pos:line="810" pos:column="19">=<pos:position pos:line="810" pos:column="20"/></operator> <literal type="number" pos:line="810" pos:column="21">0<pos:position pos:line="810" pos:column="22"/></literal></expr>;<pos:position pos:line="810" pos:column="23"/></expr_stmt>
  }<pos:position pos:line="811" pos:column="4"/></block></then><else pos:line="811" pos:column="4">else<block pos:line="811" pos:column="8">{
    <expr_stmt><expr><name><name pos:line="812" pos:column="5">ctx<pos:position pos:line="812" pos:column="8"/></name><operator pos:line="812" pos:column="8">.<pos:position pos:line="812" pos:column="9"/></operator><name pos:line="812" pos:column="9">pVdbeFunc<pos:position pos:line="812" pos:column="18"/></name></name> <operator pos:line="812" pos:column="19">=<pos:position pos:line="812" pos:column="20"/></operator> <operator pos:line="812" pos:column="21">(<pos:position pos:line="812" pos:column="22"/></operator><name pos:line="812" pos:column="22">VdbeFunc<pos:position pos:line="812" pos:column="30"/></name><operator pos:line="812" pos:column="30">*<pos:position pos:line="812" pos:column="31"/></operator><operator pos:line="812" pos:column="31">)<pos:position pos:line="812" pos:column="32"/></operator><name><name pos:line="812" pos:column="32">pOp<pos:position pos:line="812" pos:column="35"/></name><operator pos:line="812" pos:column="35">-&gt;<pos:position pos:line="812" pos:column="40"/></operator><name pos:line="812" pos:column="37">p4<pos:position pos:line="812" pos:column="39"/></name><operator pos:line="812" pos:column="39">.<pos:position pos:line="812" pos:column="40"/></operator><name pos:line="812" pos:column="40">pVdbeFunc<pos:position pos:line="812" pos:column="49"/></name></name></expr>;<pos:position pos:line="812" pos:column="50"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="813" pos:column="5">ctx<pos:position pos:line="813" pos:column="8"/></name><operator pos:line="813" pos:column="8">.<pos:position pos:line="813" pos:column="9"/></operator><name pos:line="813" pos:column="9">pFunc<pos:position pos:line="813" pos:column="14"/></name></name> <operator pos:line="813" pos:column="15">=<pos:position pos:line="813" pos:column="16"/></operator> <name><name pos:line="813" pos:column="17">ctx<pos:position pos:line="813" pos:column="20"/></name><operator pos:line="813" pos:column="20">.<pos:position pos:line="813" pos:column="21"/></operator><name pos:line="813" pos:column="21">pVdbeFunc<pos:position pos:line="813" pos:column="30"/></name><operator pos:line="813" pos:column="30">-&gt;<pos:position pos:line="813" pos:column="35"/></operator><name pos:line="813" pos:column="32">pFunc<pos:position pos:line="813" pos:column="37"/></name></name></expr>;<pos:position pos:line="813" pos:column="38"/></expr_stmt>
  }<pos:position pos:line="814" pos:column="4"/></block></else></if>

  <expr_stmt><expr><call><name pos:line="816" pos:column="3">assert<pos:position pos:line="816" pos:column="9"/></name><argument_list pos:line="816" pos:column="9">( <argument><expr><name><name pos:line="816" pos:column="11">pOp<pos:position pos:line="816" pos:column="14"/></name><operator pos:line="816" pos:column="14">-&gt;<pos:position pos:line="816" pos:column="19"/></operator><name pos:line="816" pos:column="16">p3<pos:position pos:line="816" pos:column="18"/></name></name><operator pos:line="816" pos:column="18">&gt;<pos:position pos:line="816" pos:column="22"/></operator><literal type="number" pos:line="816" pos:column="19">0<pos:position pos:line="816" pos:column="20"/></literal> <operator pos:line="816" pos:column="21">&amp;&amp;<pos:position pos:line="816" pos:column="31"/></operator> <name><name pos:line="816" pos:column="24">pOp<pos:position pos:line="816" pos:column="27"/></name><operator pos:line="816" pos:column="27">-&gt;<pos:position pos:line="816" pos:column="32"/></operator><name pos:line="816" pos:column="29">p3<pos:position pos:line="816" pos:column="31"/></name></name><operator pos:line="816" pos:column="31">&lt;=<pos:position pos:line="816" pos:column="36"/></operator><name><name pos:line="816" pos:column="33">p<pos:position pos:line="816" pos:column="34"/></name><operator pos:line="816" pos:column="34">-&gt;<pos:position pos:line="816" pos:column="39"/></operator><name pos:line="816" pos:column="36">nMem<pos:position pos:line="816" pos:column="40"/></name></name></expr></argument> )<pos:position pos:line="816" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="816" pos:column="43"/></expr_stmt>
  <expr_stmt><expr><name pos:line="817" pos:column="3">pOut<pos:position pos:line="817" pos:column="7"/></name> <operator pos:line="817" pos:column="8">=<pos:position pos:line="817" pos:column="9"/></operator> <operator pos:line="817" pos:column="10">&amp;<pos:position pos:line="817" pos:column="15"/></operator><name><name pos:line="817" pos:column="11">p<pos:position pos:line="817" pos:column="12"/></name><operator pos:line="817" pos:column="12">-&gt;<pos:position pos:line="817" pos:column="17"/></operator><name pos:line="817" pos:column="14">aMem<pos:position pos:line="817" pos:column="18"/></name><index pos:line="817" pos:column="18">[<expr><name><name pos:line="817" pos:column="19">pOp<pos:position pos:line="817" pos:column="22"/></name><operator pos:line="817" pos:column="22">-&gt;<pos:position pos:line="817" pos:column="27"/></operator><name pos:line="817" pos:column="24">p3<pos:position pos:line="817" pos:column="26"/></name></name></expr>]<pos:position pos:line="817" pos:column="27"/></index></name></expr>;<pos:position pos:line="817" pos:column="28"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="818" pos:column="3">ctx<pos:position pos:line="818" pos:column="6"/></name><operator pos:line="818" pos:column="6">.<pos:position pos:line="818" pos:column="7"/></operator><name pos:line="818" pos:column="7">s<pos:position pos:line="818" pos:column="8"/></name><operator pos:line="818" pos:column="8">.<pos:position pos:line="818" pos:column="9"/></operator><name pos:line="818" pos:column="9">flags<pos:position pos:line="818" pos:column="14"/></name></name> <operator pos:line="818" pos:column="15">=<pos:position pos:line="818" pos:column="16"/></operator> <name pos:line="818" pos:column="17">MEM_Null<pos:position pos:line="818" pos:column="25"/></name></expr>;<pos:position pos:line="818" pos:column="26"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="819" pos:column="3">ctx<pos:position pos:line="819" pos:column="6"/></name><operator pos:line="819" pos:column="6">.<pos:position pos:line="819" pos:column="7"/></operator><name pos:line="819" pos:column="7">s<pos:position pos:line="819" pos:column="8"/></name><operator pos:line="819" pos:column="8">.<pos:position pos:line="819" pos:column="9"/></operator><name pos:line="819" pos:column="9">db<pos:position pos:line="819" pos:column="11"/></name></name> <operator pos:line="819" pos:column="12">=<pos:position pos:line="819" pos:column="13"/></operator> <name pos:line="819" pos:column="14">db<pos:position pos:line="819" pos:column="16"/></name></expr>;<pos:position pos:line="819" pos:column="17"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="820" pos:column="3">ctx<pos:position pos:line="820" pos:column="6"/></name><operator pos:line="820" pos:column="6">.<pos:position pos:line="820" pos:column="7"/></operator><name pos:line="820" pos:column="7">s<pos:position pos:line="820" pos:column="8"/></name><operator pos:line="820" pos:column="8">.<pos:position pos:line="820" pos:column="9"/></operator><name pos:line="820" pos:column="9">xDel<pos:position pos:line="820" pos:column="13"/></name></name> <operator pos:line="820" pos:column="14">=<pos:position pos:line="820" pos:column="15"/></operator> <literal type="number" pos:line="820" pos:column="16">0<pos:position pos:line="820" pos:column="17"/></literal></expr>;<pos:position pos:line="820" pos:column="18"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="821" pos:column="3">ctx<pos:position pos:line="821" pos:column="6"/></name><operator pos:line="821" pos:column="6">.<pos:position pos:line="821" pos:column="7"/></operator><name pos:line="821" pos:column="7">s<pos:position pos:line="821" pos:column="8"/></name><operator pos:line="821" pos:column="8">.<pos:position pos:line="821" pos:column="9"/></operator><name pos:line="821" pos:column="9">zMalloc<pos:position pos:line="821" pos:column="16"/></name></name> <operator pos:line="821" pos:column="17">=<pos:position pos:line="821" pos:column="18"/></operator> <literal type="number" pos:line="821" pos:column="19">0<pos:position pos:line="821" pos:column="20"/></literal></expr>;<pos:position pos:line="821" pos:column="21"/></expr_stmt>

  <comment type="block" pos:line="823" pos:column="3">/* The output cell may already have a buffer allocated. Move
  ** the pointer to ctx.s so in case the user-function can use
  ** the already allocated buffer instead of allocating a new one.
  */</comment>
  <expr_stmt><expr><call><name pos:line="827" pos:column="3">sqlite3VdbeMemMove<pos:position pos:line="827" pos:column="21"/></name><argument_list pos:line="827" pos:column="21">(<argument><expr><operator pos:line="827" pos:column="22">&amp;<pos:position pos:line="827" pos:column="27"/></operator><name><name pos:line="827" pos:column="23">ctx<pos:position pos:line="827" pos:column="26"/></name><operator pos:line="827" pos:column="26">.<pos:position pos:line="827" pos:column="27"/></operator><name pos:line="827" pos:column="27">s<pos:position pos:line="827" pos:column="28"/></name></name></expr></argument>, <argument><expr><name pos:line="827" pos:column="30">pOut<pos:position pos:line="827" pos:column="34"/></name></expr></argument>)<pos:position pos:line="827" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="827" pos:column="36"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="828" pos:column="3">MemSetTypeFlag<pos:position pos:line="828" pos:column="17"/></name><argument_list pos:line="828" pos:column="17">(<argument><expr><operator pos:line="828" pos:column="18">&amp;<pos:position pos:line="828" pos:column="23"/></operator><name><name pos:line="828" pos:column="19">ctx<pos:position pos:line="828" pos:column="22"/></name><operator pos:line="828" pos:column="22">.<pos:position pos:line="828" pos:column="23"/></operator><name pos:line="828" pos:column="23">s<pos:position pos:line="828" pos:column="24"/></name></name></expr></argument>, <argument><expr><name pos:line="828" pos:column="26">MEM_Null<pos:position pos:line="828" pos:column="34"/></name></expr></argument>)<pos:position pos:line="828" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="828" pos:column="36"/></expr_stmt>

  <expr_stmt><expr><name><name pos:line="830" pos:column="3">ctx<pos:position pos:line="830" pos:column="6"/></name><operator pos:line="830" pos:column="6">.<pos:position pos:line="830" pos:column="7"/></operator><name pos:line="830" pos:column="7">isError<pos:position pos:line="830" pos:column="14"/></name></name> <operator pos:line="830" pos:column="15">=<pos:position pos:line="830" pos:column="16"/></operator> <literal type="number" pos:line="830" pos:column="17">0<pos:position pos:line="830" pos:column="18"/></literal></expr>;<pos:position pos:line="830" pos:column="19"/></expr_stmt>
  <if pos:line="831" pos:column="3">if<condition pos:line="831" pos:column="5">( <expr><name><name pos:line="831" pos:column="7">ctx<pos:position pos:line="831" pos:column="10"/></name><operator pos:line="831" pos:column="10">.<pos:position pos:line="831" pos:column="11"/></operator><name pos:line="831" pos:column="11">pFunc<pos:position pos:line="831" pos:column="16"/></name><operator pos:line="831" pos:column="16">-&gt;<pos:position pos:line="831" pos:column="21"/></operator><name pos:line="831" pos:column="18">flags<pos:position pos:line="831" pos:column="23"/></name></name> <operator pos:line="831" pos:column="24">&amp;<pos:position pos:line="831" pos:column="29"/></operator> <name pos:line="831" pos:column="26">SQLITE_FUNC_NEEDCOLL<pos:position pos:line="831" pos:column="46"/></name></expr> )<pos:position pos:line="831" pos:column="48"/></condition><then><block pos:line="831" pos:column="48">{
    <expr_stmt><expr><call><name pos:line="832" pos:column="5">assert<pos:position pos:line="832" pos:column="11"/></name><argument_list pos:line="832" pos:column="11">( <argument><expr><name pos:line="832" pos:column="13">pOp<pos:position pos:line="832" pos:column="16"/></name><operator pos:line="832" pos:column="16">&gt;<pos:position pos:line="832" pos:column="20"/></operator><name><name pos:line="832" pos:column="17">p<pos:position pos:line="832" pos:column="18"/></name><operator pos:line="832" pos:column="18">-&gt;<pos:position pos:line="832" pos:column="23"/></operator><name pos:line="832" pos:column="20">aOp<pos:position pos:line="832" pos:column="23"/></name></name></expr></argument> )<pos:position pos:line="832" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="832" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="833" pos:column="5">assert<pos:position pos:line="833" pos:column="11"/></name><argument_list pos:line="833" pos:column="11">( <argument><expr><name><name pos:line="833" pos:column="13">pOp<pos:position pos:line="833" pos:column="16"/></name><index pos:line="833" pos:column="16">[<expr><operator pos:line="833" pos:column="17">-<pos:position pos:line="833" pos:column="18"/></operator><literal type="number" pos:line="833" pos:column="18">1<pos:position pos:line="833" pos:column="19"/></literal></expr>]<pos:position pos:line="833" pos:column="20"/></index></name><operator pos:line="833" pos:column="20">.<pos:position pos:line="833" pos:column="21"/></operator><name pos:line="833" pos:column="21">p4type<pos:position pos:line="833" pos:column="27"/></name><operator pos:line="833" pos:column="27">==<pos:position pos:line="833" pos:column="29"/></operator><name pos:line="833" pos:column="29">P4_COLLSEQ<pos:position pos:line="833" pos:column="39"/></name></expr></argument> )<pos:position pos:line="833" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="833" pos:column="42"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="834" pos:column="5">assert<pos:position pos:line="834" pos:column="11"/></name><argument_list pos:line="834" pos:column="11">( <argument><expr><name><name pos:line="834" pos:column="13">pOp<pos:position pos:line="834" pos:column="16"/></name><index pos:line="834" pos:column="16">[<expr><operator pos:line="834" pos:column="17">-<pos:position pos:line="834" pos:column="18"/></operator><literal type="number" pos:line="834" pos:column="18">1<pos:position pos:line="834" pos:column="19"/></literal></expr>]<pos:position pos:line="834" pos:column="20"/></index></name><operator pos:line="834" pos:column="20">.<pos:position pos:line="834" pos:column="21"/></operator><name pos:line="834" pos:column="21">opcode<pos:position pos:line="834" pos:column="27"/></name><operator pos:line="834" pos:column="27">==<pos:position pos:line="834" pos:column="29"/></operator><name pos:line="834" pos:column="29">OP_CollSeq<pos:position pos:line="834" pos:column="39"/></name></expr></argument> )<pos:position pos:line="834" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="834" pos:column="42"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="835" pos:column="5">ctx<pos:position pos:line="835" pos:column="8"/></name><operator pos:line="835" pos:column="8">.<pos:position pos:line="835" pos:column="9"/></operator><name pos:line="835" pos:column="9">pColl<pos:position pos:line="835" pos:column="14"/></name></name> <operator pos:line="835" pos:column="15">=<pos:position pos:line="835" pos:column="16"/></operator> <name><name pos:line="835" pos:column="17">pOp<pos:position pos:line="835" pos:column="20"/></name><index pos:line="835" pos:column="20">[<expr><operator pos:line="835" pos:column="21">-<pos:position pos:line="835" pos:column="22"/></operator><literal type="number" pos:line="835" pos:column="22">1<pos:position pos:line="835" pos:column="23"/></literal></expr>]<pos:position pos:line="835" pos:column="24"/></index></name><operator pos:line="835" pos:column="24">.<pos:position pos:line="835" pos:column="25"/></operator><name><name pos:line="835" pos:column="25">p4<pos:position pos:line="835" pos:column="27"/></name><operator pos:line="835" pos:column="27">.<pos:position pos:line="835" pos:column="28"/></operator><name pos:line="835" pos:column="28">pColl<pos:position pos:line="835" pos:column="33"/></name></name></expr>;<pos:position pos:line="835" pos:column="34"/></expr_stmt>
  }<pos:position pos:line="836" pos:column="4"/></block></then></if>
  <if pos:line="837" pos:column="3">if<condition pos:line="837" pos:column="5">( <expr><call><name pos:line="837" pos:column="7">sqlite3SafetyOff<pos:position pos:line="837" pos:column="23"/></name><argument_list pos:line="837" pos:column="23">(<argument><expr><name pos:line="837" pos:column="24">db<pos:position pos:line="837" pos:column="26"/></name></expr></argument>)<pos:position pos:line="837" pos:column="27"/></argument_list></call></expr> )<pos:position pos:line="837" pos:column="29"/></condition><then pos:line="837" pos:column="29"> <block type="pseudo"><goto pos:line="837" pos:column="30">goto <name pos:line="837" pos:column="35">abort_due_to_misuse<pos:position pos:line="837" pos:column="54"/></name>;<pos:position pos:line="837" pos:column="55"/></goto></block></then></if>
  <expr_stmt><expr><call pos:line="838" pos:column="3">(<modifier pos:line="838" pos:column="4">*<pos:position pos:line="838" pos:column="5"/></modifier><name><name pos:line="838" pos:column="5">ctx<pos:position pos:line="838" pos:column="8"/></name><operator pos:line="838" pos:column="8">.<pos:position pos:line="838" pos:column="9"/></operator><name pos:line="838" pos:column="9">pFunc<pos:position pos:line="838" pos:column="14"/></name><operator pos:line="838" pos:column="14">-&gt;<pos:position pos:line="838" pos:column="19"/></operator><name pos:line="838" pos:column="16">xFunc<pos:position pos:line="838" pos:column="21"/></name></name>)<argument_list pos:line="838" pos:column="22">(<argument><expr><operator pos:line="838" pos:column="23">&amp;<pos:position pos:line="838" pos:column="28"/></operator><name pos:line="838" pos:column="24">ctx<pos:position pos:line="838" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="838" pos:column="29">n<pos:position pos:line="838" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="838" pos:column="32">apVal<pos:position pos:line="838" pos:column="37"/></name></expr></argument>)<pos:position pos:line="838" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="838" pos:column="39"/></expr_stmt>
  <if pos:line="839" pos:column="3">if<condition pos:line="839" pos:column="5">( <expr><call><name pos:line="839" pos:column="7">sqlite3SafetyOn<pos:position pos:line="839" pos:column="22"/></name><argument_list pos:line="839" pos:column="22">(<argument><expr><name pos:line="839" pos:column="23">db<pos:position pos:line="839" pos:column="25"/></name></expr></argument>)<pos:position pos:line="839" pos:column="26"/></argument_list></call></expr> )<pos:position pos:line="839" pos:column="28"/></condition><then><block pos:line="839" pos:column="28">{
    <expr_stmt><expr><call><name pos:line="840" pos:column="5">sqlite3VdbeMemRelease<pos:position pos:line="840" pos:column="26"/></name><argument_list pos:line="840" pos:column="26">(<argument><expr><operator pos:line="840" pos:column="27">&amp;<pos:position pos:line="840" pos:column="32"/></operator><name><name pos:line="840" pos:column="28">ctx<pos:position pos:line="840" pos:column="31"/></name><operator pos:line="840" pos:column="31">.<pos:position pos:line="840" pos:column="32"/></operator><name pos:line="840" pos:column="32">s<pos:position pos:line="840" pos:column="33"/></name></name></expr></argument>)<pos:position pos:line="840" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="840" pos:column="35"/></expr_stmt>
    <goto pos:line="841" pos:column="5">goto <name pos:line="841" pos:column="10">abort_due_to_misuse<pos:position pos:line="841" pos:column="29"/></name>;<pos:position pos:line="841" pos:column="30"/></goto>
  }<pos:position pos:line="842" pos:column="4"/></block></then></if>
  <if pos:line="843" pos:column="3">if<condition pos:line="843" pos:column="5">( <expr><name><name pos:line="843" pos:column="7">db<pos:position pos:line="843" pos:column="9"/></name><operator pos:line="843" pos:column="9">-&gt;<pos:position pos:line="843" pos:column="14"/></operator><name pos:line="843" pos:column="11">mallocFailed<pos:position pos:line="843" pos:column="23"/></name></name></expr> )<pos:position pos:line="843" pos:column="25"/></condition><then><block pos:line="843" pos:column="25">{
    <comment type="block" pos:line="844" pos:column="5">/* Even though a malloc() has failed, the implementation of the
    ** user function may have called an sqlite3_result_XXX() function
    ** to return a value. The following call releases any resources
    ** associated with such a value.
    **
    ** Note: Maybe MemRelease() should be called if sqlite3SafetyOn()
    ** fails also (the if(...) statement above). But if people are
    ** misusing sqlite, they have bigger problems than a leaked value.
    */</comment>
    <expr_stmt><expr><call><name pos:line="853" pos:column="5">sqlite3VdbeMemRelease<pos:position pos:line="853" pos:column="26"/></name><argument_list pos:line="853" pos:column="26">(<argument><expr><operator pos:line="853" pos:column="27">&amp;<pos:position pos:line="853" pos:column="32"/></operator><name><name pos:line="853" pos:column="28">ctx<pos:position pos:line="853" pos:column="31"/></name><operator pos:line="853" pos:column="31">.<pos:position pos:line="853" pos:column="32"/></operator><name pos:line="853" pos:column="32">s<pos:position pos:line="853" pos:column="33"/></name></name></expr></argument>)<pos:position pos:line="853" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="853" pos:column="35"/></expr_stmt>
    <goto pos:line="854" pos:column="5">goto <name pos:line="854" pos:column="10">no_mem<pos:position pos:line="854" pos:column="16"/></name>;<pos:position pos:line="854" pos:column="17"/></goto>
  }<pos:position pos:line="855" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="857" pos:column="3">/* If any auxiliary data functions have been called by this user function,
  ** immediately call the destructor for any non-static values.
  */</comment>
  <if pos:line="860" pos:column="3">if<condition pos:line="860" pos:column="5">( <expr><name><name pos:line="860" pos:column="7">ctx<pos:position pos:line="860" pos:column="10"/></name><operator pos:line="860" pos:column="10">.<pos:position pos:line="860" pos:column="11"/></operator><name pos:line="860" pos:column="11">pVdbeFunc<pos:position pos:line="860" pos:column="20"/></name></name></expr> )<pos:position pos:line="860" pos:column="22"/></condition><then><block pos:line="860" pos:column="22">{
    <expr_stmt><expr><call><name pos:line="861" pos:column="5">sqlite3VdbeDeleteAuxData<pos:position pos:line="861" pos:column="29"/></name><argument_list pos:line="861" pos:column="29">(<argument><expr><name><name pos:line="861" pos:column="30">ctx<pos:position pos:line="861" pos:column="33"/></name><operator pos:line="861" pos:column="33">.<pos:position pos:line="861" pos:column="34"/></operator><name pos:line="861" pos:column="34">pVdbeFunc<pos:position pos:line="861" pos:column="43"/></name></name></expr></argument>, <argument><expr><name><name pos:line="861" pos:column="45">pOp<pos:position pos:line="861" pos:column="48"/></name><operator pos:line="861" pos:column="48">-&gt;<pos:position pos:line="861" pos:column="53"/></operator><name pos:line="861" pos:column="50">p1<pos:position pos:line="861" pos:column="52"/></name></name></expr></argument>)<pos:position pos:line="861" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="861" pos:column="54"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="862" pos:column="5">pOp<pos:position pos:line="862" pos:column="8"/></name><operator pos:line="862" pos:column="8">-&gt;<pos:position pos:line="862" pos:column="13"/></operator><name pos:line="862" pos:column="10">p4<pos:position pos:line="862" pos:column="12"/></name><operator pos:line="862" pos:column="12">.<pos:position pos:line="862" pos:column="13"/></operator><name pos:line="862" pos:column="13">pVdbeFunc<pos:position pos:line="862" pos:column="22"/></name></name> <operator pos:line="862" pos:column="23">=<pos:position pos:line="862" pos:column="24"/></operator> <name><name pos:line="862" pos:column="25">ctx<pos:position pos:line="862" pos:column="28"/></name><operator pos:line="862" pos:column="28">.<pos:position pos:line="862" pos:column="29"/></operator><name pos:line="862" pos:column="29">pVdbeFunc<pos:position pos:line="862" pos:column="38"/></name></name></expr>;<pos:position pos:line="862" pos:column="39"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="863" pos:column="5">pOp<pos:position pos:line="863" pos:column="8"/></name><operator pos:line="863" pos:column="8">-&gt;<pos:position pos:line="863" pos:column="13"/></operator><name pos:line="863" pos:column="10">p4type<pos:position pos:line="863" pos:column="16"/></name></name> <operator pos:line="863" pos:column="17">=<pos:position pos:line="863" pos:column="18"/></operator> <name pos:line="863" pos:column="19">P4_VDBEFUNC<pos:position pos:line="863" pos:column="30"/></name></expr>;<pos:position pos:line="863" pos:column="31"/></expr_stmt>
  }<pos:position pos:line="864" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="866" pos:column="3">/* If the function returned an error, throw an exception */</comment>
  <if pos:line="867" pos:column="3">if<condition pos:line="867" pos:column="5">( <expr><name><name pos:line="867" pos:column="7">ctx<pos:position pos:line="867" pos:column="10"/></name><operator pos:line="867" pos:column="10">.<pos:position pos:line="867" pos:column="11"/></operator><name pos:line="867" pos:column="11">isError<pos:position pos:line="867" pos:column="18"/></name></name></expr> )<pos:position pos:line="867" pos:column="20"/></condition><then><block pos:line="867" pos:column="20">{
    <expr_stmt><expr><call><name pos:line="868" pos:column="5">sqlite3SetString<pos:position pos:line="868" pos:column="21"/></name><argument_list pos:line="868" pos:column="21">(<argument><expr><operator pos:line="868" pos:column="22">&amp;<pos:position pos:line="868" pos:column="27"/></operator><name><name pos:line="868" pos:column="23">p<pos:position pos:line="868" pos:column="24"/></name><operator pos:line="868" pos:column="24">-&gt;<pos:position pos:line="868" pos:column="29"/></operator><name pos:line="868" pos:column="26">zErrMsg<pos:position pos:line="868" pos:column="33"/></name></name></expr></argument>, <argument><expr><name pos:line="868" pos:column="35">db<pos:position pos:line="868" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="868" pos:column="39">"%s"<pos:position pos:line="868" pos:column="43"/></literal></expr></argument>, <argument><expr><call><name pos:line="868" pos:column="45">sqlite3_value_text<pos:position pos:line="868" pos:column="63"/></name><argument_list pos:line="868" pos:column="63">(<argument><expr><operator pos:line="868" pos:column="64">&amp;<pos:position pos:line="868" pos:column="69"/></operator><name><name pos:line="868" pos:column="65">ctx<pos:position pos:line="868" pos:column="68"/></name><operator pos:line="868" pos:column="68">.<pos:position pos:line="868" pos:column="69"/></operator><name pos:line="868" pos:column="69">s<pos:position pos:line="868" pos:column="70"/></name></name></expr></argument>)<pos:position pos:line="868" pos:column="71"/></argument_list></call></expr></argument>)<pos:position pos:line="868" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="868" pos:column="73"/></expr_stmt>
    <expr_stmt><expr><name pos:line="869" pos:column="5">rc<pos:position pos:line="869" pos:column="7"/></name> <operator pos:line="869" pos:column="8">=<pos:position pos:line="869" pos:column="9"/></operator> <name><name pos:line="869" pos:column="10">ctx<pos:position pos:line="869" pos:column="13"/></name><operator pos:line="869" pos:column="13">.<pos:position pos:line="869" pos:column="14"/></operator><name pos:line="869" pos:column="14">isError<pos:position pos:line="869" pos:column="21"/></name></name></expr>;<pos:position pos:line="869" pos:column="22"/></expr_stmt>
  }<pos:position pos:line="870" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="872" pos:column="3">/* Copy the result of the function into register P3 */</comment>
  <expr_stmt><expr><call><name pos:line="873" pos:column="3">sqlite3VdbeChangeEncoding<pos:position pos:line="873" pos:column="28"/></name><argument_list pos:line="873" pos:column="28">(<argument><expr><operator pos:line="873" pos:column="29">&amp;<pos:position pos:line="873" pos:column="34"/></operator><name><name pos:line="873" pos:column="30">ctx<pos:position pos:line="873" pos:column="33"/></name><operator pos:line="873" pos:column="33">.<pos:position pos:line="873" pos:column="34"/></operator><name pos:line="873" pos:column="34">s<pos:position pos:line="873" pos:column="35"/></name></name></expr></argument>, <argument><expr><name pos:line="873" pos:column="37">encoding<pos:position pos:line="873" pos:column="45"/></name></expr></argument>)<pos:position pos:line="873" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="873" pos:column="47"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="874" pos:column="3">sqlite3VdbeMemMove<pos:position pos:line="874" pos:column="21"/></name><argument_list pos:line="874" pos:column="21">(<argument><expr><name pos:line="874" pos:column="22">pOut<pos:position pos:line="874" pos:column="26"/></name></expr></argument>, <argument><expr><operator pos:line="874" pos:column="28">&amp;<pos:position pos:line="874" pos:column="33"/></operator><name><name pos:line="874" pos:column="29">ctx<pos:position pos:line="874" pos:column="32"/></name><operator pos:line="874" pos:column="32">.<pos:position pos:line="874" pos:column="33"/></operator><name pos:line="874" pos:column="33">s<pos:position pos:line="874" pos:column="34"/></name></name></expr></argument>)<pos:position pos:line="874" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="874" pos:column="36"/></expr_stmt>
  <if pos:line="875" pos:column="3">if<condition pos:line="875" pos:column="5">( <expr><call><name pos:line="875" pos:column="7">sqlite3VdbeMemTooBig<pos:position pos:line="875" pos:column="27"/></name><argument_list pos:line="875" pos:column="27">(<argument><expr><name pos:line="875" pos:column="28">pOut<pos:position pos:line="875" pos:column="32"/></name></expr></argument>)<pos:position pos:line="875" pos:column="33"/></argument_list></call></expr> )<pos:position pos:line="875" pos:column="35"/></condition><then><block pos:line="875" pos:column="35">{
    <goto pos:line="876" pos:column="5">goto <name pos:line="876" pos:column="10">too_big<pos:position pos:line="876" pos:column="17"/></name>;<pos:position pos:line="876" pos:column="18"/></goto>
  }<pos:position pos:line="877" pos:column="4"/></block></then></if>
  <expr_stmt><expr><call><name pos:line="878" pos:column="3">REGISTER_TRACE<pos:position pos:line="878" pos:column="17"/></name><argument_list pos:line="878" pos:column="17">(<argument><expr><name><name pos:line="878" pos:column="18">pOp<pos:position pos:line="878" pos:column="21"/></name><operator pos:line="878" pos:column="21">-&gt;<pos:position pos:line="878" pos:column="26"/></operator><name pos:line="878" pos:column="23">p3<pos:position pos:line="878" pos:column="25"/></name></name></expr></argument>, <argument><expr><name pos:line="878" pos:column="27">pOut<pos:position pos:line="878" pos:column="31"/></name></expr></argument>)<pos:position pos:line="878" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="878" pos:column="33"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="879" pos:column="3">UPDATE_MAX_BLOBSIZE<pos:position pos:line="879" pos:column="22"/></name><argument_list pos:line="879" pos:column="22">(<argument><expr><name pos:line="879" pos:column="23">pOut<pos:position pos:line="879" pos:column="27"/></name></expr></argument>)<pos:position pos:line="879" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="879" pos:column="29"/></expr_stmt>
  <break pos:line="880" pos:column="3">break;<pos:position pos:line="880" pos:column="9"/></break>
}<pos:position pos:line="881" pos:column="2"/></block>

<comment type="block" pos:line="883" pos:column="1">/* Opcode: BitAnd P1 P2 P3 * *
**
** Take the bit-wise AND of the values in register P1 and P2 and
** store the result in register P3.
** If either input is NULL, the result is NULL.
*/</comment>
<comment type="block" pos:line="889" pos:column="1">/* Opcode: BitOr P1 P2 P3 * *
**
** Take the bit-wise OR of the values in register P1 and P2 and
** store the result in register P3.
** If either input is NULL, the result is NULL.
*/</comment>
<comment type="block" pos:line="895" pos:column="1">/* Opcode: ShiftLeft P1 P2 P3 * *
**
** Shift the integer value in register P2 to the left by the
** number of bits specified by the integer in regiser P1.
** Store the result in register P3.
** If either input is NULL, the result is NULL.
*/</comment>
<comment type="block" pos:line="902" pos:column="1">/* Opcode: ShiftRight P1 P2 P3 * *
**
** Shift the integer value in register P2 to the right by the
** number of bits specified by the integer in register P1.
** Store the result in register P3.
** If either input is NULL, the result is NULL.
*/</comment>
<case pos:line="909" pos:column="1">case <expr><name pos:line="909" pos:column="6">OP_BitAnd<pos:position pos:line="909" pos:column="15"/></name></expr>:<pos:position pos:line="909" pos:column="16"/></case>                 <comment type="block" pos:line="909" pos:column="33">/* same as TK_BITAND, in1, in2, out3 */</comment>
<case pos:line="910" pos:column="1">case <expr><name pos:line="910" pos:column="6">OP_BitOr<pos:position pos:line="910" pos:column="14"/></name></expr>:<pos:position pos:line="910" pos:column="15"/></case>                  <comment type="block" pos:line="910" pos:column="33">/* same as TK_BITOR, in1, in2, out3 */</comment>
<case pos:line="911" pos:column="1">case <expr><name pos:line="911" pos:column="6">OP_ShiftLeft<pos:position pos:line="911" pos:column="18"/></name></expr>:<pos:position pos:line="911" pos:column="19"/></case>              <comment type="block" pos:line="911" pos:column="33">/* same as TK_LSHIFT, in1, in2, out3 */</comment>
<case pos:line="912" pos:column="1">case <expr><name pos:line="912" pos:column="6">OP_ShiftRight<pos:position pos:line="912" pos:column="19"/></name></expr>:<pos:position pos:line="912" pos:column="20"/></case> <block pos:line="912" pos:column="21">{           <comment type="block" pos:line="912" pos:column="33">/* same as TK_RSHIFT, in1, in2, out3 */</comment>
  <decl_stmt><decl><type><name pos:line="913" pos:column="3">i64<pos:position pos:line="913" pos:column="6"/></name></type> <name pos:line="913" pos:column="7">a<pos:position pos:line="913" pos:column="8"/></name></decl>;<pos:position pos:line="913" pos:column="9"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="914" pos:column="3">i64<pos:position pos:line="914" pos:column="6"/></name></type> <name pos:line="914" pos:column="7">b<pos:position pos:line="914" pos:column="8"/></name></decl>;<pos:position pos:line="914" pos:column="9"/></decl_stmt>

  <if pos:line="916" pos:column="3">if<condition pos:line="916" pos:column="5">( <expr><operator pos:line="916" pos:column="7">(<pos:position pos:line="916" pos:column="8"/></operator><name><name pos:line="916" pos:column="8">pIn1<pos:position pos:line="916" pos:column="12"/></name><operator pos:line="916" pos:column="12">-&gt;<pos:position pos:line="916" pos:column="17"/></operator><name pos:line="916" pos:column="14">flags<pos:position pos:line="916" pos:column="19"/></name></name> <operator pos:line="916" pos:column="20">|<pos:position pos:line="916" pos:column="21"/></operator> <name><name pos:line="916" pos:column="22">pIn2<pos:position pos:line="916" pos:column="26"/></name><operator pos:line="916" pos:column="26">-&gt;<pos:position pos:line="916" pos:column="31"/></operator><name pos:line="916" pos:column="28">flags<pos:position pos:line="916" pos:column="33"/></name></name><operator pos:line="916" pos:column="33">)<pos:position pos:line="916" pos:column="34"/></operator> <operator pos:line="916" pos:column="35">&amp;<pos:position pos:line="916" pos:column="40"/></operator> <name pos:line="916" pos:column="37">MEM_Null<pos:position pos:line="916" pos:column="45"/></name></expr> )<pos:position pos:line="916" pos:column="47"/></condition><then><block pos:line="916" pos:column="47">{
    <expr_stmt><expr><call><name pos:line="917" pos:column="5">sqlite3VdbeMemSetNull<pos:position pos:line="917" pos:column="26"/></name><argument_list pos:line="917" pos:column="26">(<argument><expr><name pos:line="917" pos:column="27">pOut<pos:position pos:line="917" pos:column="31"/></name></expr></argument>)<pos:position pos:line="917" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="917" pos:column="33"/></expr_stmt>
    <break pos:line="918" pos:column="5">break;<pos:position pos:line="918" pos:column="11"/></break>
  }<pos:position pos:line="919" pos:column="4"/></block></then></if>
  <expr_stmt><expr><name pos:line="920" pos:column="3">a<pos:position pos:line="920" pos:column="4"/></name> <operator pos:line="920" pos:column="5">=<pos:position pos:line="920" pos:column="6"/></operator> <call><name pos:line="920" pos:column="7">sqlite3VdbeIntValue<pos:position pos:line="920" pos:column="26"/></name><argument_list pos:line="920" pos:column="26">(<argument><expr><name pos:line="920" pos:column="27">pIn2<pos:position pos:line="920" pos:column="31"/></name></expr></argument>)<pos:position pos:line="920" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="920" pos:column="33"/></expr_stmt>
  <expr_stmt><expr><name pos:line="921" pos:column="3">b<pos:position pos:line="921" pos:column="4"/></name> <operator pos:line="921" pos:column="5">=<pos:position pos:line="921" pos:column="6"/></operator> <call><name pos:line="921" pos:column="7">sqlite3VdbeIntValue<pos:position pos:line="921" pos:column="26"/></name><argument_list pos:line="921" pos:column="26">(<argument><expr><name pos:line="921" pos:column="27">pIn1<pos:position pos:line="921" pos:column="31"/></name></expr></argument>)<pos:position pos:line="921" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="921" pos:column="33"/></expr_stmt>
  <switch pos:line="922" pos:column="3">switch<condition pos:line="922" pos:column="9">( <expr><name><name pos:line="922" pos:column="11">pOp<pos:position pos:line="922" pos:column="14"/></name><operator pos:line="922" pos:column="14">-&gt;<pos:position pos:line="922" pos:column="19"/></operator><name pos:line="922" pos:column="16">opcode<pos:position pos:line="922" pos:column="22"/></name></name></expr> )<pos:position pos:line="922" pos:column="24"/></condition><block pos:line="922" pos:column="24">{
    <case pos:line="923" pos:column="5">case <expr><name pos:line="923" pos:column="10">OP_BitAnd<pos:position pos:line="923" pos:column="19"/></name></expr>:<pos:position pos:line="923" pos:column="20"/></case>      <expr_stmt><expr><name pos:line="923" pos:column="26">a<pos:position pos:line="923" pos:column="27"/></name> <operator pos:line="923" pos:column="28">&amp;=<pos:position pos:line="923" pos:column="34"/></operator> <name pos:line="923" pos:column="31">b<pos:position pos:line="923" pos:column="32"/></name></expr>;<pos:position pos:line="923" pos:column="33"/></expr_stmt>     <break pos:line="923" pos:column="38">break;<pos:position pos:line="923" pos:column="44"/></break>
    <case pos:line="924" pos:column="5">case <expr><name pos:line="924" pos:column="10">OP_BitOr<pos:position pos:line="924" pos:column="18"/></name></expr>:<pos:position pos:line="924" pos:column="19"/></case>       <expr_stmt><expr><name pos:line="924" pos:column="26">a<pos:position pos:line="924" pos:column="27"/></name> <operator pos:line="924" pos:column="28">|=<pos:position pos:line="924" pos:column="30"/></operator> <name pos:line="924" pos:column="31">b<pos:position pos:line="924" pos:column="32"/></name></expr>;<pos:position pos:line="924" pos:column="33"/></expr_stmt>     <break pos:line="924" pos:column="38">break;<pos:position pos:line="924" pos:column="44"/></break>
    <case pos:line="925" pos:column="5">case <expr><name pos:line="925" pos:column="10">OP_ShiftLeft<pos:position pos:line="925" pos:column="22"/></name></expr>:<pos:position pos:line="925" pos:column="23"/></case>   <expr_stmt><expr><name pos:line="925" pos:column="26">a<pos:position pos:line="925" pos:column="27"/></name> <operator pos:line="925" pos:column="28">&lt;&lt;=<pos:position pos:line="925" pos:column="37"/></operator> <name pos:line="925" pos:column="32">b<pos:position pos:line="925" pos:column="33"/></name></expr>;<pos:position pos:line="925" pos:column="34"/></expr_stmt>    <break pos:line="925" pos:column="38">break;<pos:position pos:line="925" pos:column="44"/></break>
    <default pos:line="926" pos:column="5">default:<pos:position pos:line="926" pos:column="13"/></default>  <expr_stmt><expr><call><name pos:line="926" pos:column="15">assert<pos:position pos:line="926" pos:column="21"/></name><argument_list pos:line="926" pos:column="21">( <argument><expr><name><name pos:line="926" pos:column="23">pOp<pos:position pos:line="926" pos:column="26"/></name><operator pos:line="926" pos:column="26">-&gt;<pos:position pos:line="926" pos:column="31"/></operator><name pos:line="926" pos:column="28">opcode<pos:position pos:line="926" pos:column="34"/></name></name><operator pos:line="926" pos:column="34">==<pos:position pos:line="926" pos:column="36"/></operator><name pos:line="926" pos:column="36">OP_ShiftRight<pos:position pos:line="926" pos:column="49"/></name></expr></argument> )<pos:position pos:line="926" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="926" pos:column="52"/></expr_stmt>
                         <expr_stmt><expr><name pos:line="927" pos:column="26">a<pos:position pos:line="927" pos:column="27"/></name> <operator pos:line="927" pos:column="28">&gt;&gt;=<pos:position pos:line="927" pos:column="37"/></operator> <name pos:line="927" pos:column="32">b<pos:position pos:line="927" pos:column="33"/></name></expr>;<pos:position pos:line="927" pos:column="34"/></expr_stmt>    <break pos:line="927" pos:column="38">break;<pos:position pos:line="927" pos:column="44"/></break>
  }<pos:position pos:line="928" pos:column="4"/></block></switch>
  <expr_stmt><expr><name><name pos:line="929" pos:column="3">pOut<pos:position pos:line="929" pos:column="7"/></name><operator pos:line="929" pos:column="7">-&gt;<pos:position pos:line="929" pos:column="12"/></operator><name pos:line="929" pos:column="9">u<pos:position pos:line="929" pos:column="10"/></name><operator pos:line="929" pos:column="10">.<pos:position pos:line="929" pos:column="11"/></operator><name pos:line="929" pos:column="11">i<pos:position pos:line="929" pos:column="12"/></name></name> <operator pos:line="929" pos:column="13">=<pos:position pos:line="929" pos:column="14"/></operator> <name pos:line="929" pos:column="15">a<pos:position pos:line="929" pos:column="16"/></name></expr>;<pos:position pos:line="929" pos:column="17"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="930" pos:column="3">MemSetTypeFlag<pos:position pos:line="930" pos:column="17"/></name><argument_list pos:line="930" pos:column="17">(<argument><expr><name pos:line="930" pos:column="18">pOut<pos:position pos:line="930" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="930" pos:column="24">MEM_Int<pos:position pos:line="930" pos:column="31"/></name></expr></argument>)<pos:position pos:line="930" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="930" pos:column="33"/></expr_stmt>
  <break pos:line="931" pos:column="3">break;<pos:position pos:line="931" pos:column="9"/></break>
}<pos:position pos:line="932" pos:column="2"/></block>

<comment type="block" pos:line="934" pos:column="1">/* Opcode: AddImm  P1 P2 * * *
** 
** Add the constant P2 to the value in register P1.
** The result is always an integer.
**
** To force any register to be an integer, just add 0.
*/</comment>
<case pos:line="941" pos:column="1">case <expr><name pos:line="941" pos:column="6">OP_AddImm<pos:position pos:line="941" pos:column="15"/></name></expr>:<pos:position pos:line="941" pos:column="16"/></case> <block pos:line="941" pos:column="17">{            <comment type="block" pos:line="941" pos:column="30">/* in1 */</comment>
  <expr_stmt><expr><call><name pos:line="942" pos:column="3">sqlite3VdbeMemIntegerify<pos:position pos:line="942" pos:column="27"/></name><argument_list pos:line="942" pos:column="27">(<argument><expr><name pos:line="942" pos:column="28">pIn1<pos:position pos:line="942" pos:column="32"/></name></expr></argument>)<pos:position pos:line="942" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="942" pos:column="34"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="943" pos:column="3">pIn1<pos:position pos:line="943" pos:column="7"/></name><operator pos:line="943" pos:column="7">-&gt;<pos:position pos:line="943" pos:column="12"/></operator><name pos:line="943" pos:column="9">u<pos:position pos:line="943" pos:column="10"/></name><operator pos:line="943" pos:column="10">.<pos:position pos:line="943" pos:column="11"/></operator><name pos:line="943" pos:column="11">i<pos:position pos:line="943" pos:column="12"/></name></name> <operator pos:line="943" pos:column="13">+=<pos:position pos:line="943" pos:column="15"/></operator> <name><name pos:line="943" pos:column="16">pOp<pos:position pos:line="943" pos:column="19"/></name><operator pos:line="943" pos:column="19">-&gt;<pos:position pos:line="943" pos:column="24"/></operator><name pos:line="943" pos:column="21">p2<pos:position pos:line="943" pos:column="23"/></name></name></expr>;<pos:position pos:line="943" pos:column="24"/></expr_stmt>
  <break pos:line="944" pos:column="3">break;<pos:position pos:line="944" pos:column="9"/></break>
}<pos:position pos:line="945" pos:column="2"/></block>

<comment type="block" pos:line="947" pos:column="1">/* Opcode: MustBeInt P1 P2 * * *
** 
** Force the value in register P1 to be an integer.  If the value
** in P1 is not an integer and cannot be converted into an integer
** without data loss, then jump immediately to P2, or if P2==0
** raise an SQLITE_MISMATCH exception.
*/</comment>
<case pos:line="954" pos:column="1">case <expr><name pos:line="954" pos:column="6">OP_MustBeInt<pos:position pos:line="954" pos:column="18"/></name></expr>:<pos:position pos:line="954" pos:column="19"/></case> <block pos:line="954" pos:column="20">{            <comment type="block" pos:line="954" pos:column="33">/* jump, in1 */</comment>
  <expr_stmt><expr><call><name pos:line="955" pos:column="3">applyAffinity<pos:position pos:line="955" pos:column="16"/></name><argument_list pos:line="955" pos:column="16">(<argument><expr><name pos:line="955" pos:column="17">pIn1<pos:position pos:line="955" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="955" pos:column="23">SQLITE_AFF_NUMERIC<pos:position pos:line="955" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="955" pos:column="43">encoding<pos:position pos:line="955" pos:column="51"/></name></expr></argument>)<pos:position pos:line="955" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="955" pos:column="53"/></expr_stmt>
  <if pos:line="956" pos:column="3">if<condition pos:line="956" pos:column="5">( <expr><operator pos:line="956" pos:column="7">(<pos:position pos:line="956" pos:column="8"/></operator><name><name pos:line="956" pos:column="8">pIn1<pos:position pos:line="956" pos:column="12"/></name><operator pos:line="956" pos:column="12">-&gt;<pos:position pos:line="956" pos:column="17"/></operator><name pos:line="956" pos:column="14">flags<pos:position pos:line="956" pos:column="19"/></name></name> <operator pos:line="956" pos:column="20">&amp;<pos:position pos:line="956" pos:column="25"/></operator> <name pos:line="956" pos:column="22">MEM_Int<pos:position pos:line="956" pos:column="29"/></name><operator pos:line="956" pos:column="29">)<pos:position pos:line="956" pos:column="30"/></operator><operator pos:line="956" pos:column="30">==<pos:position pos:line="956" pos:column="32"/></operator><literal type="number" pos:line="956" pos:column="32">0<pos:position pos:line="956" pos:column="33"/></literal></expr> )<pos:position pos:line="956" pos:column="35"/></condition><then><block pos:line="956" pos:column="35">{
    <if pos:line="957" pos:column="5">if<condition pos:line="957" pos:column="7">( <expr><name><name pos:line="957" pos:column="9">pOp<pos:position pos:line="957" pos:column="12"/></name><operator pos:line="957" pos:column="12">-&gt;<pos:position pos:line="957" pos:column="17"/></operator><name pos:line="957" pos:column="14">p2<pos:position pos:line="957" pos:column="16"/></name></name><operator pos:line="957" pos:column="16">==<pos:position pos:line="957" pos:column="18"/></operator><literal type="number" pos:line="957" pos:column="18">0<pos:position pos:line="957" pos:column="19"/></literal></expr> )<pos:position pos:line="957" pos:column="21"/></condition><then><block pos:line="957" pos:column="21">{
      <expr_stmt><expr><name pos:line="958" pos:column="7">rc<pos:position pos:line="958" pos:column="9"/></name> <operator pos:line="958" pos:column="10">=<pos:position pos:line="958" pos:column="11"/></operator> <name pos:line="958" pos:column="12">SQLITE_MISMATCH<pos:position pos:line="958" pos:column="27"/></name></expr>;<pos:position pos:line="958" pos:column="28"/></expr_stmt>
      <goto pos:line="959" pos:column="7">goto <name pos:line="959" pos:column="12">abort_due_to_error<pos:position pos:line="959" pos:column="30"/></name>;<pos:position pos:line="959" pos:column="31"/></goto>
    }<pos:position pos:line="960" pos:column="6"/></block></then><else pos:line="960" pos:column="6">else<block pos:line="960" pos:column="10">{
      <expr_stmt><expr><name pos:line="961" pos:column="7">pc<pos:position pos:line="961" pos:column="9"/></name> <operator pos:line="961" pos:column="10">=<pos:position pos:line="961" pos:column="11"/></operator> <name><name pos:line="961" pos:column="12">pOp<pos:position pos:line="961" pos:column="15"/></name><operator pos:line="961" pos:column="15">-&gt;<pos:position pos:line="961" pos:column="20"/></operator><name pos:line="961" pos:column="17">p2<pos:position pos:line="961" pos:column="19"/></name></name> <operator pos:line="961" pos:column="20">-<pos:position pos:line="961" pos:column="21"/></operator> <literal type="number" pos:line="961" pos:column="22">1<pos:position pos:line="961" pos:column="23"/></literal></expr>;<pos:position pos:line="961" pos:column="24"/></expr_stmt>
    }<pos:position pos:line="962" pos:column="6"/></block></else></if>
  }<pos:position pos:line="963" pos:column="4"/></block></then><else pos:line="963" pos:column="4">else<block pos:line="963" pos:column="8">{
    <expr_stmt><expr><call><name pos:line="964" pos:column="5">MemSetTypeFlag<pos:position pos:line="964" pos:column="19"/></name><argument_list pos:line="964" pos:column="19">(<argument><expr><name pos:line="964" pos:column="20">pIn1<pos:position pos:line="964" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="964" pos:column="26">MEM_Int<pos:position pos:line="964" pos:column="33"/></name></expr></argument>)<pos:position pos:line="964" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="964" pos:column="35"/></expr_stmt>
  }<pos:position pos:line="965" pos:column="4"/></block></else></if>
  <break pos:line="966" pos:column="3">break;<pos:position pos:line="966" pos:column="9"/></break>
}<pos:position pos:line="967" pos:column="2"/></block>

<comment type="block" pos:line="969" pos:column="1">/* Opcode: RealAffinity P1 * * * *
**
** If register P1 holds an integer convert it to a real value.
**
** This opcode is used when extracting information from a column that
** has REAL affinity.  Such column values may still be stored as
** integers, for space efficiency, but after extraction we want them
** to have only a real value.
*/</comment>
<case pos:line="978" pos:column="1">case <expr><name pos:line="978" pos:column="6">OP_RealAffinity<pos:position pos:line="978" pos:column="21"/></name></expr>:<pos:position pos:line="978" pos:column="22"/></case> <block pos:line="978" pos:column="23">{                  <comment type="block" pos:line="978" pos:column="42">/* in1 */</comment>
  <if pos:line="979" pos:column="3">if<condition pos:line="979" pos:column="5">( <expr><name><name pos:line="979" pos:column="7">pIn1<pos:position pos:line="979" pos:column="11"/></name><operator pos:line="979" pos:column="11">-&gt;<pos:position pos:line="979" pos:column="16"/></operator><name pos:line="979" pos:column="13">flags<pos:position pos:line="979" pos:column="18"/></name></name> <operator pos:line="979" pos:column="19">&amp;<pos:position pos:line="979" pos:column="24"/></operator> <name pos:line="979" pos:column="21">MEM_Int<pos:position pos:line="979" pos:column="28"/></name></expr> )<pos:position pos:line="979" pos:column="30"/></condition><then><block pos:line="979" pos:column="30">{
    <expr_stmt><expr><call><name pos:line="980" pos:column="5">sqlite3VdbeMemRealify<pos:position pos:line="980" pos:column="26"/></name><argument_list pos:line="980" pos:column="26">(<argument><expr><name pos:line="980" pos:column="27">pIn1<pos:position pos:line="980" pos:column="31"/></name></expr></argument>)<pos:position pos:line="980" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="980" pos:column="33"/></expr_stmt>
  }<pos:position pos:line="981" pos:column="4"/></block></then></if>
  <break pos:line="982" pos:column="3">break;<pos:position pos:line="982" pos:column="9"/></break>
}<pos:position pos:line="983" pos:column="2"/></block>

<cpp:ifndef pos:line="985" pos:column="1">#<cpp:directive pos:line="985" pos:column="2">ifndef<pos:position pos:line="985" pos:column="8"/></cpp:directive> <name pos:line="985" pos:column="9">SQLITE_OMIT_CAST<pos:position pos:line="985" pos:column="25"/></name></cpp:ifndef>
<comment type="block" pos:line="986" pos:column="1">/* Opcode: ToText P1 * * * *
**
** Force the value in register P1 to be text.
** If the value is numeric, convert it to a string using the
** equivalent of printf().  Blob values are unchanged and
** are afterwards simply interpreted as text.
**
** A NULL value is not changed by this routine.  It remains NULL.
*/</comment>
<case pos:line="995" pos:column="1">case <expr><name pos:line="995" pos:column="6">OP_ToText<pos:position pos:line="995" pos:column="15"/></name></expr>:<pos:position pos:line="995" pos:column="16"/></case> <block pos:line="995" pos:column="17">{                  <comment type="block" pos:line="995" pos:column="36">/* same as TK_TO_TEXT, in1 */</comment>
  <if pos:line="996" pos:column="3">if<condition pos:line="996" pos:column="5">( <expr><name><name pos:line="996" pos:column="7">pIn1<pos:position pos:line="996" pos:column="11"/></name><operator pos:line="996" pos:column="11">-&gt;<pos:position pos:line="996" pos:column="16"/></operator><name pos:line="996" pos:column="13">flags<pos:position pos:line="996" pos:column="18"/></name></name> <operator pos:line="996" pos:column="19">&amp;<pos:position pos:line="996" pos:column="24"/></operator> <name pos:line="996" pos:column="21">MEM_Null<pos:position pos:line="996" pos:column="29"/></name></expr> )<pos:position pos:line="996" pos:column="31"/></condition><then pos:line="996" pos:column="31"> <block type="pseudo"><break pos:line="996" pos:column="32">break;<pos:position pos:line="996" pos:column="38"/></break></block></then></if>
  <expr_stmt><expr><call><name pos:line="997" pos:column="3">assert<pos:position pos:line="997" pos:column="9"/></name><argument_list pos:line="997" pos:column="9">( <argument><expr><name pos:line="997" pos:column="11">MEM_Str<pos:position pos:line="997" pos:column="18"/></name><operator pos:line="997" pos:column="18">==<pos:position pos:line="997" pos:column="20"/></operator><operator pos:line="997" pos:column="20">(<pos:position pos:line="997" pos:column="21"/></operator><name pos:line="997" pos:column="21">MEM_Blob<pos:position pos:line="997" pos:column="29"/></name><operator pos:line="997" pos:column="29">&gt;&gt;<pos:position pos:line="997" pos:column="34"/></operator><literal type="number" pos:line="997" pos:column="31">3<pos:position pos:line="997" pos:column="32"/></literal><operator pos:line="997" pos:column="32">)<pos:position pos:line="997" pos:column="33"/></operator></expr></argument> )<pos:position pos:line="997" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="997" pos:column="36"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="998" pos:column="3">pIn1<pos:position pos:line="998" pos:column="7"/></name><operator pos:line="998" pos:column="7">-&gt;<pos:position pos:line="998" pos:column="12"/></operator><name pos:line="998" pos:column="9">flags<pos:position pos:line="998" pos:column="14"/></name></name> <operator pos:line="998" pos:column="15">|=<pos:position pos:line="998" pos:column="17"/></operator> <operator pos:line="998" pos:column="18">(<pos:position pos:line="998" pos:column="19"/></operator><name><name pos:line="998" pos:column="19">pIn1<pos:position pos:line="998" pos:column="23"/></name><operator pos:line="998" pos:column="23">-&gt;<pos:position pos:line="998" pos:column="28"/></operator><name pos:line="998" pos:column="25">flags<pos:position pos:line="998" pos:column="30"/></name></name><operator pos:line="998" pos:column="30">&amp;<pos:position pos:line="998" pos:column="35"/></operator><name pos:line="998" pos:column="31">MEM_Blob<pos:position pos:line="998" pos:column="39"/></name><operator pos:line="998" pos:column="39">)<pos:position pos:line="998" pos:column="40"/></operator><operator pos:line="998" pos:column="40">&gt;&gt;<pos:position pos:line="998" pos:column="45"/></operator><literal type="number" pos:line="998" pos:column="42">3<pos:position pos:line="998" pos:column="43"/></literal></expr>;<pos:position pos:line="998" pos:column="44"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="999" pos:column="3">applyAffinity<pos:position pos:line="999" pos:column="16"/></name><argument_list pos:line="999" pos:column="16">(<argument><expr><name pos:line="999" pos:column="17">pIn1<pos:position pos:line="999" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="999" pos:column="23">SQLITE_AFF_TEXT<pos:position pos:line="999" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="999" pos:column="40">encoding<pos:position pos:line="999" pos:column="48"/></name></expr></argument>)<pos:position pos:line="999" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="999" pos:column="50"/></expr_stmt>
  <expr_stmt><expr><name pos:line="1000" pos:column="3">rc<pos:position pos:line="1000" pos:column="5"/></name> <operator pos:line="1000" pos:column="6">=<pos:position pos:line="1000" pos:column="7"/></operator> <call><name pos:line="1000" pos:column="8">ExpandBlob<pos:position pos:line="1000" pos:column="18"/></name><argument_list pos:line="1000" pos:column="18">(<argument><expr><name pos:line="1000" pos:column="19">pIn1<pos:position pos:line="1000" pos:column="23"/></name></expr></argument>)<pos:position pos:line="1000" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="1000" pos:column="25"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="1001" pos:column="3">assert<pos:position pos:line="1001" pos:column="9"/></name><argument_list pos:line="1001" pos:column="9">( <argument><expr><name><name pos:line="1001" pos:column="11">pIn1<pos:position pos:line="1001" pos:column="15"/></name><operator pos:line="1001" pos:column="15">-&gt;<pos:position pos:line="1001" pos:column="20"/></operator><name pos:line="1001" pos:column="17">flags<pos:position pos:line="1001" pos:column="22"/></name></name> <operator pos:line="1001" pos:column="23">&amp;<pos:position pos:line="1001" pos:column="28"/></operator> <name pos:line="1001" pos:column="25">MEM_Str<pos:position pos:line="1001" pos:column="32"/></name> <operator pos:line="1001" pos:column="33">||<pos:position pos:line="1001" pos:column="35"/></operator> <name><name pos:line="1001" pos:column="36">db<pos:position pos:line="1001" pos:column="38"/></name><operator pos:line="1001" pos:column="38">-&gt;<pos:position pos:line="1001" pos:column="43"/></operator><name pos:line="1001" pos:column="40">mallocFailed<pos:position pos:line="1001" pos:column="52"/></name></name></expr></argument> )<pos:position pos:line="1001" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="1001" pos:column="55"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="1002" pos:column="3">pIn1<pos:position pos:line="1002" pos:column="7"/></name><operator pos:line="1002" pos:column="7">-&gt;<pos:position pos:line="1002" pos:column="12"/></operator><name pos:line="1002" pos:column="9">flags<pos:position pos:line="1002" pos:column="14"/></name></name> <operator pos:line="1002" pos:column="15">&amp;=<pos:position pos:line="1002" pos:column="21"/></operator> <operator pos:line="1002" pos:column="18">~<pos:position pos:line="1002" pos:column="19"/></operator><operator pos:line="1002" pos:column="19">(<pos:position pos:line="1002" pos:column="20"/></operator><name pos:line="1002" pos:column="20">MEM_Int<pos:position pos:line="1002" pos:column="27"/></name><operator pos:line="1002" pos:column="27">|<pos:position pos:line="1002" pos:column="28"/></operator><name pos:line="1002" pos:column="28">MEM_Real<pos:position pos:line="1002" pos:column="36"/></name><operator pos:line="1002" pos:column="36">|<pos:position pos:line="1002" pos:column="37"/></operator><name pos:line="1002" pos:column="37">MEM_Blob<pos:position pos:line="1002" pos:column="45"/></name><operator pos:line="1002" pos:column="45">|<pos:position pos:line="1002" pos:column="46"/></operator><name pos:line="1002" pos:column="46">MEM_Zero<pos:position pos:line="1002" pos:column="54"/></name><operator pos:line="1002" pos:column="54">)<pos:position pos:line="1002" pos:column="55"/></operator></expr>;<pos:position pos:line="1002" pos:column="56"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="1003" pos:column="3">UPDATE_MAX_BLOBSIZE<pos:position pos:line="1003" pos:column="22"/></name><argument_list pos:line="1003" pos:column="22">(<argument><expr><name pos:line="1003" pos:column="23">pIn1<pos:position pos:line="1003" pos:column="27"/></name></expr></argument>)<pos:position pos:line="1003" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="1003" pos:column="29"/></expr_stmt>
  <break pos:line="1004" pos:column="3">break;<pos:position pos:line="1004" pos:column="9"/></break>
}<pos:position pos:line="1005" pos:column="2"/></block>

<comment type="block" pos:line="1007" pos:column="1">/* Opcode: ToBlob P1 * * * *
**
** Force the value in register P1 to be a BLOB.
** If the value is numeric, convert it to a string first.
** Strings are simply reinterpreted as blobs with no change
** to the underlying data.
**
** A NULL value is not changed by this routine.  It remains NULL.
*/</comment>
<case pos:line="1016" pos:column="1">case <expr><name pos:line="1016" pos:column="6">OP_ToBlob<pos:position pos:line="1016" pos:column="15"/></name></expr>:<pos:position pos:line="1016" pos:column="16"/></case> <block pos:line="1016" pos:column="17">{                  <comment type="block" pos:line="1016" pos:column="36">/* same as TK_TO_BLOB, in1 */</comment>
  <if pos:line="1017" pos:column="3">if<condition pos:line="1017" pos:column="5">( <expr><name><name pos:line="1017" pos:column="7">pIn1<pos:position pos:line="1017" pos:column="11"/></name><operator pos:line="1017" pos:column="11">-&gt;<pos:position pos:line="1017" pos:column="16"/></operator><name pos:line="1017" pos:column="13">flags<pos:position pos:line="1017" pos:column="18"/></name></name> <operator pos:line="1017" pos:column="19">&amp;<pos:position pos:line="1017" pos:column="24"/></operator> <name pos:line="1017" pos:column="21">MEM_Null<pos:position pos:line="1017" pos:column="29"/></name></expr> )<pos:position pos:line="1017" pos:column="31"/></condition><then pos:line="1017" pos:column="31"> <block type="pseudo"><break pos:line="1017" pos:column="32">break;<pos:position pos:line="1017" pos:column="38"/></break></block></then></if>
  <if pos:line="1018" pos:column="3">if<condition pos:line="1018" pos:column="5">( <expr><operator pos:line="1018" pos:column="7">(<pos:position pos:line="1018" pos:column="8"/></operator><name><name pos:line="1018" pos:column="8">pIn1<pos:position pos:line="1018" pos:column="12"/></name><operator pos:line="1018" pos:column="12">-&gt;<pos:position pos:line="1018" pos:column="17"/></operator><name pos:line="1018" pos:column="14">flags<pos:position pos:line="1018" pos:column="19"/></name></name> <operator pos:line="1018" pos:column="20">&amp;<pos:position pos:line="1018" pos:column="25"/></operator> <name pos:line="1018" pos:column="22">MEM_Blob<pos:position pos:line="1018" pos:column="30"/></name><operator pos:line="1018" pos:column="30">)<pos:position pos:line="1018" pos:column="31"/></operator><operator pos:line="1018" pos:column="31">==<pos:position pos:line="1018" pos:column="33"/></operator><literal type="number" pos:line="1018" pos:column="33">0<pos:position pos:line="1018" pos:column="34"/></literal></expr> )<pos:position pos:line="1018" pos:column="36"/></condition><then><block pos:line="1018" pos:column="36">{
    <expr_stmt><expr><call><name pos:line="1019" pos:column="5">applyAffinity<pos:position pos:line="1019" pos:column="18"/></name><argument_list pos:line="1019" pos:column="18">(<argument><expr><name pos:line="1019" pos:column="19">pIn1<pos:position pos:line="1019" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="1019" pos:column="25">SQLITE_AFF_TEXT<pos:position pos:line="1019" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="1019" pos:column="42">encoding<pos:position pos:line="1019" pos:column="50"/></name></expr></argument>)<pos:position pos:line="1019" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="1019" pos:column="52"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="1020" pos:column="5">assert<pos:position pos:line="1020" pos:column="11"/></name><argument_list pos:line="1020" pos:column="11">( <argument><expr><name><name pos:line="1020" pos:column="13">pIn1<pos:position pos:line="1020" pos:column="17"/></name><operator pos:line="1020" pos:column="17">-&gt;<pos:position pos:line="1020" pos:column="22"/></operator><name pos:line="1020" pos:column="19">flags<pos:position pos:line="1020" pos:column="24"/></name></name> <operator pos:line="1020" pos:column="25">&amp;<pos:position pos:line="1020" pos:column="30"/></operator> <name pos:line="1020" pos:column="27">MEM_Str<pos:position pos:line="1020" pos:column="34"/></name> <operator pos:line="1020" pos:column="35">||<pos:position pos:line="1020" pos:column="37"/></operator> <name><name pos:line="1020" pos:column="38">db<pos:position pos:line="1020" pos:column="40"/></name><operator pos:line="1020" pos:column="40">-&gt;<pos:position pos:line="1020" pos:column="45"/></operator><name pos:line="1020" pos:column="42">mallocFailed<pos:position pos:line="1020" pos:column="54"/></name></name></expr></argument> )<pos:position pos:line="1020" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="1020" pos:column="57"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="1021" pos:column="5">MemSetTypeFlag<pos:position pos:line="1021" pos:column="19"/></name><argument_list pos:line="1021" pos:column="19">(<argument><expr><name pos:line="1021" pos:column="20">pIn1<pos:position pos:line="1021" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="1021" pos:column="26">MEM_Blob<pos:position pos:line="1021" pos:column="34"/></name></expr></argument>)<pos:position pos:line="1021" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="1021" pos:column="36"/></expr_stmt>
  }<pos:position pos:line="1022" pos:column="4"/></block></then><else pos:line="1022" pos:column="4">else<block pos:line="1022" pos:column="8">{
    <expr_stmt><expr><name><name pos:line="1023" pos:column="5">pIn1<pos:position pos:line="1023" pos:column="9"/></name><operator pos:line="1023" pos:column="9">-&gt;<pos:position pos:line="1023" pos:column="14"/></operator><name pos:line="1023" pos:column="11">flags<pos:position pos:line="1023" pos:column="16"/></name></name> <operator pos:line="1023" pos:column="17">&amp;=<pos:position pos:line="1023" pos:column="23"/></operator> <operator pos:line="1023" pos:column="20">~<pos:position pos:line="1023" pos:column="21"/></operator><operator pos:line="1023" pos:column="21">(<pos:position pos:line="1023" pos:column="22"/></operator><name pos:line="1023" pos:column="22">MEM_TypeMask<pos:position pos:line="1023" pos:column="34"/></name><operator pos:line="1023" pos:column="34">&amp;<pos:position pos:line="1023" pos:column="39"/></operator><operator pos:line="1023" pos:column="35">~<pos:position pos:line="1023" pos:column="36"/></operator><name pos:line="1023" pos:column="36">MEM_Blob<pos:position pos:line="1023" pos:column="44"/></name><operator pos:line="1023" pos:column="44">)<pos:position pos:line="1023" pos:column="45"/></operator></expr>;<pos:position pos:line="1023" pos:column="46"/></expr_stmt>
  }<pos:position pos:line="1024" pos:column="4"/></block></else></if>
  <expr_stmt><expr><call><name pos:line="1025" pos:column="3">UPDATE_MAX_BLOBSIZE<pos:position pos:line="1025" pos:column="22"/></name><argument_list pos:line="1025" pos:column="22">(<argument><expr><name pos:line="1025" pos:column="23">pIn1<pos:position pos:line="1025" pos:column="27"/></name></expr></argument>)<pos:position pos:line="1025" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="1025" pos:column="29"/></expr_stmt>
  <break pos:line="1026" pos:column="3">break;<pos:position pos:line="1026" pos:column="9"/></break>
}<pos:position pos:line="1027" pos:column="2"/></block>

<comment type="block" pos:line="1029" pos:column="1">/* Opcode: ToNumeric P1 * * * *
**
** Force the value in register P1 to be numeric (either an
** integer or a floating-point number.)
** If the value is text or blob, try to convert it to an using the
** equivalent of atoi() or atof() and store 0 if no such conversion 
** is possible.
**
** A NULL value is not changed by this routine.  It remains NULL.
*/</comment>
<case pos:line="1039" pos:column="1">case <expr><name pos:line="1039" pos:column="6">OP_ToNumeric<pos:position pos:line="1039" pos:column="18"/></name></expr>:<pos:position pos:line="1039" pos:column="19"/></case> <block pos:line="1039" pos:column="20">{                  <comment type="block" pos:line="1039" pos:column="39">/* same as TK_TO_NUMERIC, in1 */</comment>
  <if pos:line="1040" pos:column="3">if<condition pos:line="1040" pos:column="5">( <expr><operator pos:line="1040" pos:column="7">(<pos:position pos:line="1040" pos:column="8"/></operator><name><name pos:line="1040" pos:column="8">pIn1<pos:position pos:line="1040" pos:column="12"/></name><operator pos:line="1040" pos:column="12">-&gt;<pos:position pos:line="1040" pos:column="17"/></operator><name pos:line="1040" pos:column="14">flags<pos:position pos:line="1040" pos:column="19"/></name></name> <operator pos:line="1040" pos:column="20">&amp;<pos:position pos:line="1040" pos:column="25"/></operator> <operator pos:line="1040" pos:column="22">(<pos:position pos:line="1040" pos:column="23"/></operator><name pos:line="1040" pos:column="23">MEM_Null<pos:position pos:line="1040" pos:column="31"/></name><operator pos:line="1040" pos:column="31">|<pos:position pos:line="1040" pos:column="32"/></operator><name pos:line="1040" pos:column="32">MEM_Int<pos:position pos:line="1040" pos:column="39"/></name><operator pos:line="1040" pos:column="39">|<pos:position pos:line="1040" pos:column="40"/></operator><name pos:line="1040" pos:column="40">MEM_Real<pos:position pos:line="1040" pos:column="48"/></name><operator pos:line="1040" pos:column="48">)<pos:position pos:line="1040" pos:column="49"/></operator><operator pos:line="1040" pos:column="49">)<pos:position pos:line="1040" pos:column="50"/></operator><operator pos:line="1040" pos:column="50">==<pos:position pos:line="1040" pos:column="52"/></operator><literal type="number" pos:line="1040" pos:column="52">0<pos:position pos:line="1040" pos:column="53"/></literal></expr> )<pos:position pos:line="1040" pos:column="55"/></condition><then><block pos:line="1040" pos:column="55">{
    <expr_stmt><expr><call><name pos:line="1041" pos:column="5">sqlite3VdbeMemNumerify<pos:position pos:line="1041" pos:column="27"/></name><argument_list pos:line="1041" pos:column="27">(<argument><expr><name pos:line="1041" pos:column="28">pIn1<pos:position pos:line="1041" pos:column="32"/></name></expr></argument>)<pos:position pos:line="1041" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="1041" pos:column="34"/></expr_stmt>
  }<pos:position pos:line="1042" pos:column="4"/></block></then></if>
  <break pos:line="1043" pos:column="3">break;<pos:position pos:line="1043" pos:column="9"/></break>
}<pos:position pos:line="1044" pos:column="2"/></block>
<cpp:endif pos:line="1045" pos:column="1">#<cpp:directive pos:line="1045" pos:column="2">endif<pos:position pos:line="1045" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="1045" pos:column="8">/* SQLITE_OMIT_CAST */</comment>

<comment type="block" pos:line="1047" pos:column="1">/* Opcode: ToInt P1 * * * *
**
** Force the value in register P1 be an integer.  If
** The value is currently a real number, drop its fractional part.
** If the value is text or blob, try to convert it to an integer using the
** equivalent of atoi() and store 0 if no such conversion is possible.
**
** A NULL value is not changed by this routine.  It remains NULL.
*/</comment>
<case pos:line="1056" pos:column="1">case <expr><name pos:line="1056" pos:column="6">OP_ToInt<pos:position pos:line="1056" pos:column="14"/></name></expr>:<pos:position pos:line="1056" pos:column="15"/></case> <block pos:line="1056" pos:column="16">{                  <comment type="block" pos:line="1056" pos:column="35">/* same as TK_TO_INT, in1 */</comment>
  <if pos:line="1057" pos:column="3">if<condition pos:line="1057" pos:column="5">( <expr><operator pos:line="1057" pos:column="7">(<pos:position pos:line="1057" pos:column="8"/></operator><name><name pos:line="1057" pos:column="8">pIn1<pos:position pos:line="1057" pos:column="12"/></name><operator pos:line="1057" pos:column="12">-&gt;<pos:position pos:line="1057" pos:column="17"/></operator><name pos:line="1057" pos:column="14">flags<pos:position pos:line="1057" pos:column="19"/></name></name> <operator pos:line="1057" pos:column="20">&amp;<pos:position pos:line="1057" pos:column="25"/></operator> <name pos:line="1057" pos:column="22">MEM_Null<pos:position pos:line="1057" pos:column="30"/></name><operator pos:line="1057" pos:column="30">)<pos:position pos:line="1057" pos:column="31"/></operator><operator pos:line="1057" pos:column="31">==<pos:position pos:line="1057" pos:column="33"/></operator><literal type="number" pos:line="1057" pos:column="33">0<pos:position pos:line="1057" pos:column="34"/></literal></expr> )<pos:position pos:line="1057" pos:column="36"/></condition><then><block pos:line="1057" pos:column="36">{
    <expr_stmt><expr><call><name pos:line="1058" pos:column="5">sqlite3VdbeMemIntegerify<pos:position pos:line="1058" pos:column="29"/></name><argument_list pos:line="1058" pos:column="29">(<argument><expr><name pos:line="1058" pos:column="30">pIn1<pos:position pos:line="1058" pos:column="34"/></name></expr></argument>)<pos:position pos:line="1058" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="1058" pos:column="36"/></expr_stmt>
  }<pos:position pos:line="1059" pos:column="4"/></block></then></if>
  <break pos:line="1060" pos:column="3">break;<pos:position pos:line="1060" pos:column="9"/></break>
}<pos:position pos:line="1061" pos:column="2"/></block>

<cpp:ifndef pos:line="1063" pos:column="1">#<cpp:directive pos:line="1063" pos:column="2">ifndef<pos:position pos:line="1063" pos:column="8"/></cpp:directive> <name pos:line="1063" pos:column="9">SQLITE_OMIT_CAST<pos:position pos:line="1063" pos:column="25"/></name></cpp:ifndef>
<comment type="block" pos:line="1064" pos:column="1">/* Opcode: ToReal P1 * * * *
**
** Force the value in register P1 to be a floating point number.
** If The value is currently an integer, convert it.
** If the value is text or blob, try to convert it to an integer using the
** equivalent of atoi() and store 0.0 if no such conversion is possible.
**
** A NULL value is not changed by this routine.  It remains NULL.
*/</comment>
<case pos:line="1073" pos:column="1">case <expr><name pos:line="1073" pos:column="6">OP_ToReal<pos:position pos:line="1073" pos:column="15"/></name></expr>:<pos:position pos:line="1073" pos:column="16"/></case> <block pos:line="1073" pos:column="17">{                  <comment type="block" pos:line="1073" pos:column="36">/* same as TK_TO_REAL, in1 */</comment>
  <if pos:line="1074" pos:column="3">if<condition pos:line="1074" pos:column="5">( <expr><operator pos:line="1074" pos:column="7">(<pos:position pos:line="1074" pos:column="8"/></operator><name><name pos:line="1074" pos:column="8">pIn1<pos:position pos:line="1074" pos:column="12"/></name><operator pos:line="1074" pos:column="12">-&gt;<pos:position pos:line="1074" pos:column="17"/></operator><name pos:line="1074" pos:column="14">flags<pos:position pos:line="1074" pos:column="19"/></name></name> <operator pos:line="1074" pos:column="20">&amp;<pos:position pos:line="1074" pos:column="25"/></operator> <name pos:line="1074" pos:column="22">MEM_Null<pos:position pos:line="1074" pos:column="30"/></name><operator pos:line="1074" pos:column="30">)<pos:position pos:line="1074" pos:column="31"/></operator><operator pos:line="1074" pos:column="31">==<pos:position pos:line="1074" pos:column="33"/></operator><literal type="number" pos:line="1074" pos:column="33">0<pos:position pos:line="1074" pos:column="34"/></literal></expr> )<pos:position pos:line="1074" pos:column="36"/></condition><then><block pos:line="1074" pos:column="36">{
    <expr_stmt><expr><call><name pos:line="1075" pos:column="5">sqlite3VdbeMemRealify<pos:position pos:line="1075" pos:column="26"/></name><argument_list pos:line="1075" pos:column="26">(<argument><expr><name pos:line="1075" pos:column="27">pIn1<pos:position pos:line="1075" pos:column="31"/></name></expr></argument>)<pos:position pos:line="1075" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="1075" pos:column="33"/></expr_stmt>
  }<pos:position pos:line="1076" pos:column="4"/></block></then></if>
  <break pos:line="1077" pos:column="3">break;<pos:position pos:line="1077" pos:column="9"/></break>
}<pos:position pos:line="1078" pos:column="2"/></block>
<cpp:endif pos:line="1079" pos:column="1">#<cpp:directive pos:line="1079" pos:column="2">endif<pos:position pos:line="1079" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="1079" pos:column="8">/* SQLITE_OMIT_CAST */</comment>

<comment type="block" pos:line="1081" pos:column="1">/* Opcode: Lt P1 P2 P3 P4 P5
**
** Compare the values in register P1 and P3.  If reg(P3)&lt;reg(P1) then
** jump to address P2.  
**
** If the SQLITE_JUMPIFNULL bit of P5 is set and either reg(P1) or
** reg(P3) is NULL then take the jump.  If the SQLITE_JUMPIFNULL 
** bit is clear then fall thru if either operand is NULL.
**
** The SQLITE_AFF_MASK portion of P5 must be an affinity character -
** SQLITE_AFF_TEXT, SQLITE_AFF_INTEGER, and so forth. An attempt is made 
** to coerce both inputs according to this affinity before the
** comparison is made. If the SQLITE_AFF_MASK is 0x00, then numeric
** affinity is used. Note that the affinity conversions are stored
** back into the input registers P1 and P3.  So this opcode can cause
** persistent changes to registers P1 and P3.
**
** Once any conversions have taken place, and neither value is NULL, 
** the values are compared. If both values are blobs then memcmp() is
** used to determine the results of the comparison.  If both values
** are text, then the appropriate collating function specified in
** P4 is  used to do the comparison.  If P4 is not specified then
** memcmp() is used to compare text string.  If both values are
** numeric, then a numeric comparison is used. If the two values
** are of different types, then numbers are considered less than
** strings and strings are considered less than blobs.
**
** If the SQLITE_STOREP2 bit of P5 is set, then do not jump.  Instead,
** store a boolean result (either 0, or 1, or NULL) in register P2.
*/</comment>
<comment type="block" pos:line="1111" pos:column="1">/* Opcode: Ne P1 P2 P3 P4 P5
**
** This works just like the Lt opcode except that the jump is taken if
** the operands in registers P1 and P3 are not equal.  See the Lt opcode for
** additional information.
*/</comment>
<comment type="block" pos:line="1117" pos:column="1">/* Opcode: Eq P1 P2 P3 P4 P5
**
** This works just like the Lt opcode except that the jump is taken if
** the operands in registers P1 and P3 are equal.
** See the Lt opcode for additional information.
*/</comment>
<comment type="block" pos:line="1123" pos:column="1">/* Opcode: Le P1 P2 P3 P4 P5
**
** This works just like the Lt opcode except that the jump is taken if
** the content of register P3 is less than or equal to the content of
** register P1.  See the Lt opcode for additional information.
*/</comment>
<comment type="block" pos:line="1129" pos:column="1">/* Opcode: Gt P1 P2 P3 P4 P5
**
** This works just like the Lt opcode except that the jump is taken if
** the content of register P3 is greater than the content of
** register P1.  See the Lt opcode for additional information.
*/</comment>
<comment type="block" pos:line="1135" pos:column="1">/* Opcode: Ge P1 P2 P3 P4 P5
**
** This works just like the Lt opcode except that the jump is taken if
** the content of register P3 is greater than or equal to the content of
** register P1.  See the Lt opcode for additional information.
*/</comment>
<case pos:line="1141" pos:column="1">case <expr><name pos:line="1141" pos:column="6">OP_Eq<pos:position pos:line="1141" pos:column="11"/></name></expr>:<pos:position pos:line="1141" pos:column="12"/></case>               <comment type="block" pos:line="1141" pos:column="27">/* same as TK_EQ, jump, in1, in3 */</comment>
<case pos:line="1142" pos:column="1">case <expr><name pos:line="1142" pos:column="6">OP_Ne<pos:position pos:line="1142" pos:column="11"/></name></expr>:<pos:position pos:line="1142" pos:column="12"/></case>               <comment type="block" pos:line="1142" pos:column="27">/* same as TK_NE, jump, in1, in3 */</comment>
<case pos:line="1143" pos:column="1">case <expr><name pos:line="1143" pos:column="6">OP_Lt<pos:position pos:line="1143" pos:column="11"/></name></expr>:<pos:position pos:line="1143" pos:column="12"/></case>               <comment type="block" pos:line="1143" pos:column="27">/* same as TK_LT, jump, in1, in3 */</comment>
<case pos:line="1144" pos:column="1">case <expr><name pos:line="1144" pos:column="6">OP_Le<pos:position pos:line="1144" pos:column="11"/></name></expr>:<pos:position pos:line="1144" pos:column="12"/></case>               <comment type="block" pos:line="1144" pos:column="27">/* same as TK_LE, jump, in1, in3 */</comment>
<case pos:line="1145" pos:column="1">case <expr><name pos:line="1145" pos:column="6">OP_Gt<pos:position pos:line="1145" pos:column="11"/></name></expr>:<pos:position pos:line="1145" pos:column="12"/></case>               <comment type="block" pos:line="1145" pos:column="27">/* same as TK_GT, jump, in1, in3 */</comment>
<case pos:line="1146" pos:column="1">case <expr><name pos:line="1146" pos:column="6">OP_Ge<pos:position pos:line="1146" pos:column="11"/></name></expr>:<pos:position pos:line="1146" pos:column="12"/></case> <block pos:line="1146" pos:column="13">{             <comment type="block" pos:line="1146" pos:column="27">/* same as TK_GE, jump, in1, in3 */</comment>
  <decl_stmt><decl><type><name pos:line="1147" pos:column="3">int<pos:position pos:line="1147" pos:column="6"/></name></type> <name pos:line="1147" pos:column="7">flags<pos:position pos:line="1147" pos:column="12"/></name></decl>;<pos:position pos:line="1147" pos:column="13"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="1148" pos:column="3">int<pos:position pos:line="1148" pos:column="6"/></name></type> <name pos:line="1148" pos:column="7">res<pos:position pos:line="1148" pos:column="10"/></name></decl>;<pos:position pos:line="1148" pos:column="11"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="1149" pos:column="3">char<pos:position pos:line="1149" pos:column="7"/></name></type> <name pos:line="1149" pos:column="8">affinity<pos:position pos:line="1149" pos:column="16"/></name></decl>;<pos:position pos:line="1149" pos:column="17"/></decl_stmt>

  <expr_stmt><expr><name pos:line="1151" pos:column="3">flags<pos:position pos:line="1151" pos:column="8"/></name> <operator pos:line="1151" pos:column="9">=<pos:position pos:line="1151" pos:column="10"/></operator> <name><name pos:line="1151" pos:column="11">pIn1<pos:position pos:line="1151" pos:column="15"/></name><operator pos:line="1151" pos:column="15">-&gt;<pos:position pos:line="1151" pos:column="20"/></operator><name pos:line="1151" pos:column="17">flags<pos:position pos:line="1151" pos:column="22"/></name></name><operator pos:line="1151" pos:column="22">|<pos:position pos:line="1151" pos:column="23"/></operator><name><name pos:line="1151" pos:column="23">pIn3<pos:position pos:line="1151" pos:column="27"/></name><operator pos:line="1151" pos:column="27">-&gt;<pos:position pos:line="1151" pos:column="32"/></operator><name pos:line="1151" pos:column="29">flags<pos:position pos:line="1151" pos:column="34"/></name></name></expr>;<pos:position pos:line="1151" pos:column="35"/></expr_stmt>

  <if pos:line="1153" pos:column="3">if<condition pos:line="1153" pos:column="5">( <expr><name pos:line="1153" pos:column="7">flags<pos:position pos:line="1153" pos:column="12"/></name><operator pos:line="1153" pos:column="12">&amp;<pos:position pos:line="1153" pos:column="17"/></operator><name pos:line="1153" pos:column="13">MEM_Null<pos:position pos:line="1153" pos:column="21"/></name></expr> )<pos:position pos:line="1153" pos:column="23"/></condition><then><block pos:line="1153" pos:column="23">{
    <comment type="block" pos:line="1154" pos:column="5">/* If either operand is NULL then the result is always NULL.
    ** The jump is taken if the SQLITE_JUMPIFNULL bit is set.
    */</comment>
    <if pos:line="1157" pos:column="5">if<condition pos:line="1157" pos:column="7">( <expr><name><name pos:line="1157" pos:column="9">pOp<pos:position pos:line="1157" pos:column="12"/></name><operator pos:line="1157" pos:column="12">-&gt;<pos:position pos:line="1157" pos:column="17"/></operator><name pos:line="1157" pos:column="14">p5<pos:position pos:line="1157" pos:column="16"/></name></name> <operator pos:line="1157" pos:column="17">&amp;<pos:position pos:line="1157" pos:column="22"/></operator> <name pos:line="1157" pos:column="19">SQLITE_STOREP2<pos:position pos:line="1157" pos:column="33"/></name></expr> )<pos:position pos:line="1157" pos:column="35"/></condition><then><block pos:line="1157" pos:column="35">{
      <expr_stmt><expr><name pos:line="1158" pos:column="7">pOut<pos:position pos:line="1158" pos:column="11"/></name> <operator pos:line="1158" pos:column="12">=<pos:position pos:line="1158" pos:column="13"/></operator> <operator pos:line="1158" pos:column="14">&amp;<pos:position pos:line="1158" pos:column="19"/></operator><name><name pos:line="1158" pos:column="15">p<pos:position pos:line="1158" pos:column="16"/></name><operator pos:line="1158" pos:column="16">-&gt;<pos:position pos:line="1158" pos:column="21"/></operator><name pos:line="1158" pos:column="18">aMem<pos:position pos:line="1158" pos:column="22"/></name><index pos:line="1158" pos:column="22">[<expr><name><name pos:line="1158" pos:column="23">pOp<pos:position pos:line="1158" pos:column="26"/></name><operator pos:line="1158" pos:column="26">-&gt;<pos:position pos:line="1158" pos:column="31"/></operator><name pos:line="1158" pos:column="28">p2<pos:position pos:line="1158" pos:column="30"/></name></name></expr>]<pos:position pos:line="1158" pos:column="31"/></index></name></expr>;<pos:position pos:line="1158" pos:column="32"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="1159" pos:column="7">MemSetTypeFlag<pos:position pos:line="1159" pos:column="21"/></name><argument_list pos:line="1159" pos:column="21">(<argument><expr><name pos:line="1159" pos:column="22">pOut<pos:position pos:line="1159" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="1159" pos:column="28">MEM_Null<pos:position pos:line="1159" pos:column="36"/></name></expr></argument>)<pos:position pos:line="1159" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="1159" pos:column="38"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="1160" pos:column="7">REGISTER_TRACE<pos:position pos:line="1160" pos:column="21"/></name><argument_list pos:line="1160" pos:column="21">(<argument><expr><name><name pos:line="1160" pos:column="22">pOp<pos:position pos:line="1160" pos:column="25"/></name><operator pos:line="1160" pos:column="25">-&gt;<pos:position pos:line="1160" pos:column="30"/></operator><name pos:line="1160" pos:column="27">p2<pos:position pos:line="1160" pos:column="29"/></name></name></expr></argument>, <argument><expr><name pos:line="1160" pos:column="31">pOut<pos:position pos:line="1160" pos:column="35"/></name></expr></argument>)<pos:position pos:line="1160" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="1160" pos:column="37"/></expr_stmt>
    }<pos:position pos:line="1161" pos:column="6"/></block></then><elseif pos:line="1161" pos:column="6">else <if pos:line="1161" pos:column="11">if<condition pos:line="1161" pos:column="13">( <expr><name><name pos:line="1161" pos:column="15">pOp<pos:position pos:line="1161" pos:column="18"/></name><operator pos:line="1161" pos:column="18">-&gt;<pos:position pos:line="1161" pos:column="23"/></operator><name pos:line="1161" pos:column="20">p5<pos:position pos:line="1161" pos:column="22"/></name></name> <operator pos:line="1161" pos:column="23">&amp;<pos:position pos:line="1161" pos:column="28"/></operator> <name pos:line="1161" pos:column="25">SQLITE_JUMPIFNULL<pos:position pos:line="1161" pos:column="42"/></name></expr> )<pos:position pos:line="1161" pos:column="44"/></condition><then><block pos:line="1161" pos:column="44">{
      <expr_stmt><expr><name pos:line="1162" pos:column="7">pc<pos:position pos:line="1162" pos:column="9"/></name> <operator pos:line="1162" pos:column="10">=<pos:position pos:line="1162" pos:column="11"/></operator> <name><name pos:line="1162" pos:column="12">pOp<pos:position pos:line="1162" pos:column="15"/></name><operator pos:line="1162" pos:column="15">-&gt;<pos:position pos:line="1162" pos:column="20"/></operator><name pos:line="1162" pos:column="17">p2<pos:position pos:line="1162" pos:column="19"/></name></name><operator pos:line="1162" pos:column="19">-<pos:position pos:line="1162" pos:column="20"/></operator><literal type="number" pos:line="1162" pos:column="20">1<pos:position pos:line="1162" pos:column="21"/></literal></expr>;<pos:position pos:line="1162" pos:column="22"/></expr_stmt>
    }<pos:position pos:line="1163" pos:column="6"/></block></then></if></elseif></if>
    <break pos:line="1164" pos:column="5">break;<pos:position pos:line="1164" pos:column="11"/></break>
  }<pos:position pos:line="1165" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="1167" pos:column="3">affinity<pos:position pos:line="1167" pos:column="11"/></name> <operator pos:line="1167" pos:column="12">=<pos:position pos:line="1167" pos:column="13"/></operator> <name><name pos:line="1167" pos:column="14">pOp<pos:position pos:line="1167" pos:column="17"/></name><operator pos:line="1167" pos:column="17">-&gt;<pos:position pos:line="1167" pos:column="22"/></operator><name pos:line="1167" pos:column="19">p5<pos:position pos:line="1167" pos:column="21"/></name></name> <operator pos:line="1167" pos:column="22">&amp;<pos:position pos:line="1167" pos:column="27"/></operator> <name pos:line="1167" pos:column="24">SQLITE_AFF_MASK<pos:position pos:line="1167" pos:column="39"/></name></expr>;<pos:position pos:line="1167" pos:column="40"/></expr_stmt>
  <if pos:line="1168" pos:column="3">if<condition pos:line="1168" pos:column="5">( <expr><name pos:line="1168" pos:column="7">affinity<pos:position pos:line="1168" pos:column="15"/></name></expr> )<pos:position pos:line="1168" pos:column="17"/></condition><then><block pos:line="1168" pos:column="17">{
    <expr_stmt><expr><call><name pos:line="1169" pos:column="5">applyAffinity<pos:position pos:line="1169" pos:column="18"/></name><argument_list pos:line="1169" pos:column="18">(<argument><expr><name pos:line="1169" pos:column="19">pIn1<pos:position pos:line="1169" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="1169" pos:column="25">affinity<pos:position pos:line="1169" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="1169" pos:column="35">encoding<pos:position pos:line="1169" pos:column="43"/></name></expr></argument>)<pos:position pos:line="1169" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="1169" pos:column="45"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="1170" pos:column="5">applyAffinity<pos:position pos:line="1170" pos:column="18"/></name><argument_list pos:line="1170" pos:column="18">(<argument><expr><name pos:line="1170" pos:column="19">pIn3<pos:position pos:line="1170" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="1170" pos:column="25">affinity<pos:position pos:line="1170" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="1170" pos:column="35">encoding<pos:position pos:line="1170" pos:column="43"/></name></expr></argument>)<pos:position pos:line="1170" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="1170" pos:column="45"/></expr_stmt>
    <if pos:line="1171" pos:column="5">if<condition pos:line="1171" pos:column="7">( <expr><name><name pos:line="1171" pos:column="9">db<pos:position pos:line="1171" pos:column="11"/></name><operator pos:line="1171" pos:column="11">-&gt;<pos:position pos:line="1171" pos:column="16"/></operator><name pos:line="1171" pos:column="13">mallocFailed<pos:position pos:line="1171" pos:column="25"/></name></name></expr> )<pos:position pos:line="1171" pos:column="27"/></condition><then pos:line="1171" pos:column="27"> <block type="pseudo"><goto pos:line="1171" pos:column="28">goto <name pos:line="1171" pos:column="33">no_mem<pos:position pos:line="1171" pos:column="39"/></name>;<pos:position pos:line="1171" pos:column="40"/></goto></block></then></if>
  }<pos:position pos:line="1172" pos:column="4"/></block></then></if>

  <expr_stmt><expr><call><name pos:line="1174" pos:column="3">assert<pos:position pos:line="1174" pos:column="9"/></name><argument_list pos:line="1174" pos:column="9">( <argument><expr><name><name pos:line="1174" pos:column="11">pOp<pos:position pos:line="1174" pos:column="14"/></name><operator pos:line="1174" pos:column="14">-&gt;<pos:position pos:line="1174" pos:column="19"/></operator><name pos:line="1174" pos:column="16">p4type<pos:position pos:line="1174" pos:column="22"/></name></name><operator pos:line="1174" pos:column="22">==<pos:position pos:line="1174" pos:column="24"/></operator><name pos:line="1174" pos:column="24">P4_COLLSEQ<pos:position pos:line="1174" pos:column="34"/></name> <operator pos:line="1174" pos:column="35">||<pos:position pos:line="1174" pos:column="37"/></operator> <name><name pos:line="1174" pos:column="38">pOp<pos:position pos:line="1174" pos:column="41"/></name><operator pos:line="1174" pos:column="41">-&gt;<pos:position pos:line="1174" pos:column="46"/></operator><name pos:line="1174" pos:column="43">p4<pos:position pos:line="1174" pos:column="45"/></name><operator pos:line="1174" pos:column="45">.<pos:position pos:line="1174" pos:column="46"/></operator><name pos:line="1174" pos:column="46">pColl<pos:position pos:line="1174" pos:column="51"/></name></name><operator pos:line="1174" pos:column="51">==<pos:position pos:line="1174" pos:column="53"/></operator><literal type="number" pos:line="1174" pos:column="53">0<pos:position pos:line="1174" pos:column="54"/></literal></expr></argument> )<pos:position pos:line="1174" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="1174" pos:column="57"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="1175" pos:column="3">ExpandBlob<pos:position pos:line="1175" pos:column="13"/></name><argument_list pos:line="1175" pos:column="13">(<argument><expr><name pos:line="1175" pos:column="14">pIn1<pos:position pos:line="1175" pos:column="18"/></name></expr></argument>)<pos:position pos:line="1175" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="1175" pos:column="20"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="1176" pos:column="3">ExpandBlob<pos:position pos:line="1176" pos:column="13"/></name><argument_list pos:line="1176" pos:column="13">(<argument><expr><name pos:line="1176" pos:column="14">pIn3<pos:position pos:line="1176" pos:column="18"/></name></expr></argument>)<pos:position pos:line="1176" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="1176" pos:column="20"/></expr_stmt>
  <expr_stmt><expr><name pos:line="1177" pos:column="3">res<pos:position pos:line="1177" pos:column="6"/></name> <operator pos:line="1177" pos:column="7">=<pos:position pos:line="1177" pos:column="8"/></operator> <call><name pos:line="1177" pos:column="9">sqlite3MemCompare<pos:position pos:line="1177" pos:column="26"/></name><argument_list pos:line="1177" pos:column="26">(<argument><expr><name pos:line="1177" pos:column="27">pIn3<pos:position pos:line="1177" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="1177" pos:column="33">pIn1<pos:position pos:line="1177" pos:column="37"/></name></expr></argument>, <argument><expr><name><name pos:line="1177" pos:column="39">pOp<pos:position pos:line="1177" pos:column="42"/></name><operator pos:line="1177" pos:column="42">-&gt;<pos:position pos:line="1177" pos:column="47"/></operator><name pos:line="1177" pos:column="44">p4<pos:position pos:line="1177" pos:column="46"/></name><operator pos:line="1177" pos:column="46">.<pos:position pos:line="1177" pos:column="47"/></operator><name pos:line="1177" pos:column="47">pColl<pos:position pos:line="1177" pos:column="52"/></name></name></expr></argument>)<pos:position pos:line="1177" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="1177" pos:column="54"/></expr_stmt>
  <switch pos:line="1178" pos:column="3">switch<condition pos:line="1178" pos:column="9">( <expr><name><name pos:line="1178" pos:column="11">pOp<pos:position pos:line="1178" pos:column="14"/></name><operator pos:line="1178" pos:column="14">-&gt;<pos:position pos:line="1178" pos:column="19"/></operator><name pos:line="1178" pos:column="16">opcode<pos:position pos:line="1178" pos:column="22"/></name></name></expr> )<pos:position pos:line="1178" pos:column="24"/></condition><block pos:line="1178" pos:column="24">{
    <case pos:line="1179" pos:column="5">case <expr><name pos:line="1179" pos:column="10">OP_Eq<pos:position pos:line="1179" pos:column="15"/></name></expr>:<pos:position pos:line="1179" pos:column="16"/></case>    <expr_stmt><expr><name pos:line="1179" pos:column="20">res<pos:position pos:line="1179" pos:column="23"/></name> <operator pos:line="1179" pos:column="24">=<pos:position pos:line="1179" pos:column="25"/></operator> <name pos:line="1179" pos:column="26">res<pos:position pos:line="1179" pos:column="29"/></name><operator pos:line="1179" pos:column="29">==<pos:position pos:line="1179" pos:column="31"/></operator><literal type="number" pos:line="1179" pos:column="31">0<pos:position pos:line="1179" pos:column="32"/></literal></expr>;<pos:position pos:line="1179" pos:column="33"/></expr_stmt>     <break pos:line="1179" pos:column="38">break;<pos:position pos:line="1179" pos:column="44"/></break>
    <case pos:line="1180" pos:column="5">case <expr><name pos:line="1180" pos:column="10">OP_Ne<pos:position pos:line="1180" pos:column="15"/></name></expr>:<pos:position pos:line="1180" pos:column="16"/></case>    <expr_stmt><expr><name pos:line="1180" pos:column="20">res<pos:position pos:line="1180" pos:column="23"/></name> <operator pos:line="1180" pos:column="24">=<pos:position pos:line="1180" pos:column="25"/></operator> <name pos:line="1180" pos:column="26">res<pos:position pos:line="1180" pos:column="29"/></name><operator pos:line="1180" pos:column="29">!=<pos:position pos:line="1180" pos:column="31"/></operator><literal type="number" pos:line="1180" pos:column="31">0<pos:position pos:line="1180" pos:column="32"/></literal></expr>;<pos:position pos:line="1180" pos:column="33"/></expr_stmt>     <break pos:line="1180" pos:column="38">break;<pos:position pos:line="1180" pos:column="44"/></break>
    <case pos:line="1181" pos:column="5">case <expr><name pos:line="1181" pos:column="10">OP_Lt<pos:position pos:line="1181" pos:column="15"/></name></expr>:<pos:position pos:line="1181" pos:column="16"/></case>    <expr_stmt><expr><name pos:line="1181" pos:column="20">res<pos:position pos:line="1181" pos:column="23"/></name> <operator pos:line="1181" pos:column="24">=<pos:position pos:line="1181" pos:column="25"/></operator> <name pos:line="1181" pos:column="26">res<pos:position pos:line="1181" pos:column="29"/></name><operator pos:line="1181" pos:column="29">&lt;<pos:position pos:line="1181" pos:column="33"/></operator><literal type="number" pos:line="1181" pos:column="30">0<pos:position pos:line="1181" pos:column="31"/></literal></expr>;<pos:position pos:line="1181" pos:column="32"/></expr_stmt>      <break pos:line="1181" pos:column="38">break;<pos:position pos:line="1181" pos:column="44"/></break>
    <case pos:line="1182" pos:column="5">case <expr><name pos:line="1182" pos:column="10">OP_Le<pos:position pos:line="1182" pos:column="15"/></name></expr>:<pos:position pos:line="1182" pos:column="16"/></case>    <expr_stmt><expr><name pos:line="1182" pos:column="20">res<pos:position pos:line="1182" pos:column="23"/></name> <operator pos:line="1182" pos:column="24">=<pos:position pos:line="1182" pos:column="25"/></operator> <name pos:line="1182" pos:column="26">res<pos:position pos:line="1182" pos:column="29"/></name><operator pos:line="1182" pos:column="29">&lt;=<pos:position pos:line="1182" pos:column="34"/></operator><literal type="number" pos:line="1182" pos:column="31">0<pos:position pos:line="1182" pos:column="32"/></literal></expr>;<pos:position pos:line="1182" pos:column="33"/></expr_stmt>     <break pos:line="1182" pos:column="38">break;<pos:position pos:line="1182" pos:column="44"/></break>
    <case pos:line="1183" pos:column="5">case <expr><name pos:line="1183" pos:column="10">OP_Gt<pos:position pos:line="1183" pos:column="15"/></name></expr>:<pos:position pos:line="1183" pos:column="16"/></case>    <expr_stmt><expr><name pos:line="1183" pos:column="20">res<pos:position pos:line="1183" pos:column="23"/></name> <operator pos:line="1183" pos:column="24">=<pos:position pos:line="1183" pos:column="25"/></operator> <name pos:line="1183" pos:column="26">res<pos:position pos:line="1183" pos:column="29"/></name><operator pos:line="1183" pos:column="29">&gt;<pos:position pos:line="1183" pos:column="33"/></operator><literal type="number" pos:line="1183" pos:column="30">0<pos:position pos:line="1183" pos:column="31"/></literal></expr>;<pos:position pos:line="1183" pos:column="32"/></expr_stmt>      <break pos:line="1183" pos:column="38">break;<pos:position pos:line="1183" pos:column="44"/></break>
    <default pos:line="1184" pos:column="5">default:<pos:position pos:line="1184" pos:column="13"/></default>       <expr_stmt><expr><name pos:line="1184" pos:column="20">res<pos:position pos:line="1184" pos:column="23"/></name> <operator pos:line="1184" pos:column="24">=<pos:position pos:line="1184" pos:column="25"/></operator> <name pos:line="1184" pos:column="26">res<pos:position pos:line="1184" pos:column="29"/></name><operator pos:line="1184" pos:column="29">&gt;=<pos:position pos:line="1184" pos:column="34"/></operator><literal type="number" pos:line="1184" pos:column="31">0<pos:position pos:line="1184" pos:column="32"/></literal></expr>;<pos:position pos:line="1184" pos:column="33"/></expr_stmt>     <break pos:line="1184" pos:column="38">break;<pos:position pos:line="1184" pos:column="44"/></break>
  }<pos:position pos:line="1185" pos:column="4"/></block></switch>

  <if pos:line="1187" pos:column="3">if<condition pos:line="1187" pos:column="5">( <expr><name><name pos:line="1187" pos:column="7">pOp<pos:position pos:line="1187" pos:column="10"/></name><operator pos:line="1187" pos:column="10">-&gt;<pos:position pos:line="1187" pos:column="15"/></operator><name pos:line="1187" pos:column="12">p5<pos:position pos:line="1187" pos:column="14"/></name></name> <operator pos:line="1187" pos:column="15">&amp;<pos:position pos:line="1187" pos:column="20"/></operator> <name pos:line="1187" pos:column="17">SQLITE_STOREP2<pos:position pos:line="1187" pos:column="31"/></name></expr> )<pos:position pos:line="1187" pos:column="33"/></condition><then><block pos:line="1187" pos:column="33">{
    <expr_stmt><expr><name pos:line="1188" pos:column="5">pOut<pos:position pos:line="1188" pos:column="9"/></name> <operator pos:line="1188" pos:column="10">=<pos:position pos:line="1188" pos:column="11"/></operator> <operator pos:line="1188" pos:column="12">&amp;<pos:position pos:line="1188" pos:column="17"/></operator><name><name pos:line="1188" pos:column="13">p<pos:position pos:line="1188" pos:column="14"/></name><operator pos:line="1188" pos:column="14">-&gt;<pos:position pos:line="1188" pos:column="19"/></operator><name pos:line="1188" pos:column="16">aMem<pos:position pos:line="1188" pos:column="20"/></name><index pos:line="1188" pos:column="20">[<expr><name><name pos:line="1188" pos:column="21">pOp<pos:position pos:line="1188" pos:column="24"/></name><operator pos:line="1188" pos:column="24">-&gt;<pos:position pos:line="1188" pos:column="29"/></operator><name pos:line="1188" pos:column="26">p2<pos:position pos:line="1188" pos:column="28"/></name></name></expr>]<pos:position pos:line="1188" pos:column="29"/></index></name></expr>;<pos:position pos:line="1188" pos:column="30"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="1189" pos:column="5">MemSetTypeFlag<pos:position pos:line="1189" pos:column="19"/></name><argument_list pos:line="1189" pos:column="19">(<argument><expr><name pos:line="1189" pos:column="20">pOut<pos:position pos:line="1189" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="1189" pos:column="26">MEM_Int<pos:position pos:line="1189" pos:column="33"/></name></expr></argument>)<pos:position pos:line="1189" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="1189" pos:column="35"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="1190" pos:column="5">pOut<pos:position pos:line="1190" pos:column="9"/></name><operator pos:line="1190" pos:column="9">-&gt;<pos:position pos:line="1190" pos:column="14"/></operator><name pos:line="1190" pos:column="11">u<pos:position pos:line="1190" pos:column="12"/></name><operator pos:line="1190" pos:column="12">.<pos:position pos:line="1190" pos:column="13"/></operator><name pos:line="1190" pos:column="13">i<pos:position pos:line="1190" pos:column="14"/></name></name> <operator pos:line="1190" pos:column="15">=<pos:position pos:line="1190" pos:column="16"/></operator> <name pos:line="1190" pos:column="17">res<pos:position pos:line="1190" pos:column="20"/></name></expr>;<pos:position pos:line="1190" pos:column="21"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="1191" pos:column="5">REGISTER_TRACE<pos:position pos:line="1191" pos:column="19"/></name><argument_list pos:line="1191" pos:column="19">(<argument><expr><name><name pos:line="1191" pos:column="20">pOp<pos:position pos:line="1191" pos:column="23"/></name><operator pos:line="1191" pos:column="23">-&gt;<pos:position pos:line="1191" pos:column="28"/></operator><name pos:line="1191" pos:column="25">p2<pos:position pos:line="1191" pos:column="27"/></name></name></expr></argument>, <argument><expr><name pos:line="1191" pos:column="29">pOut<pos:position pos:line="1191" pos:column="33"/></name></expr></argument>)<pos:position pos:line="1191" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="1191" pos:column="35"/></expr_stmt>
  }<pos:position pos:line="1192" pos:column="4"/></block></then><elseif pos:line="1192" pos:column="4">else <if pos:line="1192" pos:column="9">if<condition pos:line="1192" pos:column="11">( <expr><name pos:line="1192" pos:column="13">res<pos:position pos:line="1192" pos:column="16"/></name></expr> )<pos:position pos:line="1192" pos:column="18"/></condition><then><block pos:line="1192" pos:column="18">{
    <expr_stmt><expr><name pos:line="1193" pos:column="5">pc<pos:position pos:line="1193" pos:column="7"/></name> <operator pos:line="1193" pos:column="8">=<pos:position pos:line="1193" pos:column="9"/></operator> <name><name pos:line="1193" pos:column="10">pOp<pos:position pos:line="1193" pos:column="13"/></name><operator pos:line="1193" pos:column="13">-&gt;<pos:position pos:line="1193" pos:column="18"/></operator><name pos:line="1193" pos:column="15">p2<pos:position pos:line="1193" pos:column="17"/></name></name><operator pos:line="1193" pos:column="17">-<pos:position pos:line="1193" pos:column="18"/></operator><literal type="number" pos:line="1193" pos:column="18">1<pos:position pos:line="1193" pos:column="19"/></literal></expr>;<pos:position pos:line="1193" pos:column="20"/></expr_stmt>
  }<pos:position pos:line="1194" pos:column="4"/></block></then></if></elseif></if>
  <break pos:line="1195" pos:column="3">break;<pos:position pos:line="1195" pos:column="9"/></break>
}<pos:position pos:line="1196" pos:column="2"/></block>

<comment type="block" pos:line="1198" pos:column="1">/* Opcode: Permutation * * * P4 *
**
** Set the permutation used by the OP_Compare operator to be the array
** of integers in P4.
**
** The permutation is only valid until the next OP_Permutation, OP_Compare,
** OP_Halt, or OP_ResultRow.  Typically the OP_Permutation should occur
** immediately prior to the OP_Compare.
*/</comment>
<case pos:line="1207" pos:column="1">case <expr><name pos:line="1207" pos:column="6">OP_Permutation<pos:position pos:line="1207" pos:column="20"/></name></expr>:<pos:position pos:line="1207" pos:column="21"/></case> <block pos:line="1207" pos:column="22">{
  <expr_stmt><expr><call><name pos:line="1208" pos:column="3">assert<pos:position pos:line="1208" pos:column="9"/></name><argument_list pos:line="1208" pos:column="9">( <argument><expr><name><name pos:line="1208" pos:column="11">pOp<pos:position pos:line="1208" pos:column="14"/></name><operator pos:line="1208" pos:column="14">-&gt;<pos:position pos:line="1208" pos:column="19"/></operator><name pos:line="1208" pos:column="16">p4type<pos:position pos:line="1208" pos:column="22"/></name></name><operator pos:line="1208" pos:column="22">==<pos:position pos:line="1208" pos:column="24"/></operator><name pos:line="1208" pos:column="24">P4_INTARRAY<pos:position pos:line="1208" pos:column="35"/></name></expr></argument> )<pos:position pos:line="1208" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="1208" pos:column="38"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="1209" pos:column="3">assert<pos:position pos:line="1209" pos:column="9"/></name><argument_list pos:line="1209" pos:column="9">( <argument><expr><name><name pos:line="1209" pos:column="11">pOp<pos:position pos:line="1209" pos:column="14"/></name><operator pos:line="1209" pos:column="14">-&gt;<pos:position pos:line="1209" pos:column="19"/></operator><name pos:line="1209" pos:column="16">p4<pos:position pos:line="1209" pos:column="18"/></name><operator pos:line="1209" pos:column="18">.<pos:position pos:line="1209" pos:column="19"/></operator><name pos:line="1209" pos:column="19">ai<pos:position pos:line="1209" pos:column="21"/></name></name></expr></argument> )<pos:position pos:line="1209" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="1209" pos:column="24"/></expr_stmt>
  <expr_stmt><expr><name pos:line="1210" pos:column="3">aPermute<pos:position pos:line="1210" pos:column="11"/></name> <operator pos:line="1210" pos:column="12">=<pos:position pos:line="1210" pos:column="13"/></operator> <name><name pos:line="1210" pos:column="14">pOp<pos:position pos:line="1210" pos:column="17"/></name><operator pos:line="1210" pos:column="17">-&gt;<pos:position pos:line="1210" pos:column="22"/></operator><name pos:line="1210" pos:column="19">p4<pos:position pos:line="1210" pos:column="21"/></name><operator pos:line="1210" pos:column="21">.<pos:position pos:line="1210" pos:column="22"/></operator><name pos:line="1210" pos:column="22">ai<pos:position pos:line="1210" pos:column="24"/></name></name></expr>;<pos:position pos:line="1210" pos:column="25"/></expr_stmt>
  <break pos:line="1211" pos:column="3">break;<pos:position pos:line="1211" pos:column="9"/></break>
}<pos:position pos:line="1212" pos:column="2"/></block>

<comment type="block" pos:line="1214" pos:column="1">/* Opcode: Compare P1 P2 P3 P4 *
**
** Compare to vectors of registers in reg(P1)..reg(P1+P3-1) (all this
** one "A") and in reg(P2)..reg(P2+P3-1) ("B").  Save the result of
** the comparison for use by the next OP_Jump instruct.
**
** P4 is a KeyInfo structure that defines collating sequences and sort
** orders for the comparison.  The permutation applies to registers
** only.  The KeyInfo elements are used sequentially.
**
** The comparison is a sort comparison, so NULLs compare equal,
** NULLs are less than numbers, numbers are less than strings,
** and strings are less than blobs.
*/</comment>
<case pos:line="1228" pos:column="1">case <expr><name pos:line="1228" pos:column="6">OP_Compare<pos:position pos:line="1228" pos:column="16"/></name></expr>:<pos:position pos:line="1228" pos:column="17"/></case> <block pos:line="1228" pos:column="18">{
  <decl_stmt><decl><type><name pos:line="1229" pos:column="3">int<pos:position pos:line="1229" pos:column="6"/></name></type> <name pos:line="1229" pos:column="7">n<pos:position pos:line="1229" pos:column="8"/></name></decl>;<pos:position pos:line="1229" pos:column="9"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="1230" pos:column="3">int<pos:position pos:line="1230" pos:column="6"/></name></type> <name pos:line="1230" pos:column="7">i<pos:position pos:line="1230" pos:column="8"/></name></decl>;<pos:position pos:line="1230" pos:column="9"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="1231" pos:column="3">int<pos:position pos:line="1231" pos:column="6"/></name></type> <name pos:line="1231" pos:column="7">p1<pos:position pos:line="1231" pos:column="9"/></name></decl>;<pos:position pos:line="1231" pos:column="10"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="1232" pos:column="3">int<pos:position pos:line="1232" pos:column="6"/></name></type> <name pos:line="1232" pos:column="7">p2<pos:position pos:line="1232" pos:column="9"/></name></decl>;<pos:position pos:line="1232" pos:column="10"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="1233" pos:column="3">const<pos:position pos:line="1233" pos:column="8"/></specifier> <name pos:line="1233" pos:column="9">KeyInfo<pos:position pos:line="1233" pos:column="16"/></name> <modifier pos:line="1233" pos:column="17">*<pos:position pos:line="1233" pos:column="18"/></modifier></type><name pos:line="1233" pos:column="18">pKeyInfo<pos:position pos:line="1233" pos:column="26"/></name></decl>;<pos:position pos:line="1233" pos:column="27"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="1234" pos:column="3">int<pos:position pos:line="1234" pos:column="6"/></name></type> <name pos:line="1234" pos:column="7">idx<pos:position pos:line="1234" pos:column="10"/></name></decl>;<pos:position pos:line="1234" pos:column="11"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="1235" pos:column="3">CollSeq<pos:position pos:line="1235" pos:column="10"/></name> <modifier pos:line="1235" pos:column="11">*<pos:position pos:line="1235" pos:column="12"/></modifier></type><name pos:line="1235" pos:column="12">pColl<pos:position pos:line="1235" pos:column="17"/></name></decl>;<pos:position pos:line="1235" pos:column="18"/></decl_stmt>    <comment type="block" pos:line="1235" pos:column="22">/* Collating sequence to use on this term */</comment>
  <decl_stmt><decl><type><name pos:line="1236" pos:column="3">int<pos:position pos:line="1236" pos:column="6"/></name></type> <name pos:line="1236" pos:column="7">bRev<pos:position pos:line="1236" pos:column="11"/></name></decl>;<pos:position pos:line="1236" pos:column="12"/></decl_stmt>          <comment type="block" pos:line="1236" pos:column="22">/* True for DESCENDING sort order */</comment>

  <expr_stmt><expr><name pos:line="1238" pos:column="3">n<pos:position pos:line="1238" pos:column="4"/></name> <operator pos:line="1238" pos:column="5">=<pos:position pos:line="1238" pos:column="6"/></operator> <name><name pos:line="1238" pos:column="7">pOp<pos:position pos:line="1238" pos:column="10"/></name><operator pos:line="1238" pos:column="10">-&gt;<pos:position pos:line="1238" pos:column="15"/></operator><name pos:line="1238" pos:column="12">p3<pos:position pos:line="1238" pos:column="14"/></name></name></expr>;<pos:position pos:line="1238" pos:column="15"/></expr_stmt>
  <expr_stmt><expr><name pos:line="1239" pos:column="3">pKeyInfo<pos:position pos:line="1239" pos:column="11"/></name> <operator pos:line="1239" pos:column="12">=<pos:position pos:line="1239" pos:column="13"/></operator> <name><name pos:line="1239" pos:column="14">pOp<pos:position pos:line="1239" pos:column="17"/></name><operator pos:line="1239" pos:column="17">-&gt;<pos:position pos:line="1239" pos:column="22"/></operator><name pos:line="1239" pos:column="19">p4<pos:position pos:line="1239" pos:column="21"/></name><operator pos:line="1239" pos:column="21">.<pos:position pos:line="1239" pos:column="22"/></operator><name pos:line="1239" pos:column="22">pKeyInfo<pos:position pos:line="1239" pos:column="30"/></name></name></expr>;<pos:position pos:line="1239" pos:column="31"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="1240" pos:column="3">assert<pos:position pos:line="1240" pos:column="9"/></name><argument_list pos:line="1240" pos:column="9">( <argument><expr><name pos:line="1240" pos:column="11">n<pos:position pos:line="1240" pos:column="12"/></name><operator pos:line="1240" pos:column="12">&gt;<pos:position pos:line="1240" pos:column="16"/></operator><literal type="number" pos:line="1240" pos:column="13">0<pos:position pos:line="1240" pos:column="14"/></literal></expr></argument> )<pos:position pos:line="1240" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="1240" pos:column="17"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="1241" pos:column="3">assert<pos:position pos:line="1241" pos:column="9"/></name><argument_list pos:line="1241" pos:column="9">( <argument><expr><name pos:line="1241" pos:column="11">pKeyInfo<pos:position pos:line="1241" pos:column="19"/></name><operator pos:line="1241" pos:column="19">!=<pos:position pos:line="1241" pos:column="21"/></operator><literal type="number" pos:line="1241" pos:column="21">0<pos:position pos:line="1241" pos:column="22"/></literal></expr></argument> )<pos:position pos:line="1241" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="1241" pos:column="25"/></expr_stmt>
  <expr_stmt><expr><name pos:line="1242" pos:column="3">p1<pos:position pos:line="1242" pos:column="5"/></name> <operator pos:line="1242" pos:column="6">=<pos:position pos:line="1242" pos:column="7"/></operator> <name><name pos:line="1242" pos:column="8">pOp<pos:position pos:line="1242" pos:column="11"/></name><operator pos:line="1242" pos:column="11">-&gt;<pos:position pos:line="1242" pos:column="16"/></operator><name pos:line="1242" pos:column="13">p1<pos:position pos:line="1242" pos:column="15"/></name></name></expr>;<pos:position pos:line="1242" pos:column="16"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="1243" pos:column="3">assert<pos:position pos:line="1243" pos:column="9"/></name><argument_list pos:line="1243" pos:column="9">( <argument><expr><name pos:line="1243" pos:column="11">p1<pos:position pos:line="1243" pos:column="13"/></name><operator pos:line="1243" pos:column="13">&gt;<pos:position pos:line="1243" pos:column="17"/></operator><literal type="number" pos:line="1243" pos:column="14">0<pos:position pos:line="1243" pos:column="15"/></literal> <operator pos:line="1243" pos:column="16">&amp;&amp;<pos:position pos:line="1243" pos:column="26"/></operator> <name pos:line="1243" pos:column="19">p1<pos:position pos:line="1243" pos:column="21"/></name><operator pos:line="1243" pos:column="21">+<pos:position pos:line="1243" pos:column="22"/></operator><name pos:line="1243" pos:column="22">n<pos:position pos:line="1243" pos:column="23"/></name><operator pos:line="1243" pos:column="23">&lt;=<pos:position pos:line="1243" pos:column="28"/></operator><name><name pos:line="1243" pos:column="25">p<pos:position pos:line="1243" pos:column="26"/></name><operator pos:line="1243" pos:column="26">-&gt;<pos:position pos:line="1243" pos:column="31"/></operator><name pos:line="1243" pos:column="28">nMem<pos:position pos:line="1243" pos:column="32"/></name></name><operator pos:line="1243" pos:column="32">+<pos:position pos:line="1243" pos:column="33"/></operator><literal type="number" pos:line="1243" pos:column="33">1<pos:position pos:line="1243" pos:column="34"/></literal></expr></argument> )<pos:position pos:line="1243" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="1243" pos:column="37"/></expr_stmt>
  <expr_stmt><expr><name pos:line="1244" pos:column="3">p2<pos:position pos:line="1244" pos:column="5"/></name> <operator pos:line="1244" pos:column="6">=<pos:position pos:line="1244" pos:column="7"/></operator> <name><name pos:line="1244" pos:column="8">pOp<pos:position pos:line="1244" pos:column="11"/></name><operator pos:line="1244" pos:column="11">-&gt;<pos:position pos:line="1244" pos:column="16"/></operator><name pos:line="1244" pos:column="13">p2<pos:position pos:line="1244" pos:column="15"/></name></name></expr>;<pos:position pos:line="1244" pos:column="16"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="1245" pos:column="3">assert<pos:position pos:line="1245" pos:column="9"/></name><argument_list pos:line="1245" pos:column="9">( <argument><expr><name pos:line="1245" pos:column="11">p2<pos:position pos:line="1245" pos:column="13"/></name><operator pos:line="1245" pos:column="13">&gt;<pos:position pos:line="1245" pos:column="17"/></operator><literal type="number" pos:line="1245" pos:column="14">0<pos:position pos:line="1245" pos:column="15"/></literal> <operator pos:line="1245" pos:column="16">&amp;&amp;<pos:position pos:line="1245" pos:column="26"/></operator> <name pos:line="1245" pos:column="19">p2<pos:position pos:line="1245" pos:column="21"/></name><operator pos:line="1245" pos:column="21">+<pos:position pos:line="1245" pos:column="22"/></operator><name pos:line="1245" pos:column="22">n<pos:position pos:line="1245" pos:column="23"/></name><operator pos:line="1245" pos:column="23">&lt;=<pos:position pos:line="1245" pos:column="28"/></operator><name><name pos:line="1245" pos:column="25">p<pos:position pos:line="1245" pos:column="26"/></name><operator pos:line="1245" pos:column="26">-&gt;<pos:position pos:line="1245" pos:column="31"/></operator><name pos:line="1245" pos:column="28">nMem<pos:position pos:line="1245" pos:column="32"/></name></name><operator pos:line="1245" pos:column="32">+<pos:position pos:line="1245" pos:column="33"/></operator><literal type="number" pos:line="1245" pos:column="33">1<pos:position pos:line="1245" pos:column="34"/></literal></expr></argument> )<pos:position pos:line="1245" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="1245" pos:column="37"/></expr_stmt>
  <for pos:line="1246" pos:column="3">for<control pos:line="1246" pos:column="6">(<init><expr><name pos:line="1246" pos:column="7">i<pos:position pos:line="1246" pos:column="8"/></name><operator pos:line="1246" pos:column="8">=<pos:position pos:line="1246" pos:column="9"/></operator><literal type="number" pos:line="1246" pos:column="9">0<pos:position pos:line="1246" pos:column="10"/></literal></expr>;<pos:position pos:line="1246" pos:column="11"/></init> <condition><expr><name pos:line="1246" pos:column="12">i<pos:position pos:line="1246" pos:column="13"/></name><operator pos:line="1246" pos:column="13">&lt;<pos:position pos:line="1246" pos:column="17"/></operator><name pos:line="1246" pos:column="14">n<pos:position pos:line="1246" pos:column="15"/></name></expr>;<pos:position pos:line="1246" pos:column="16"/></condition> <incr><expr><name pos:line="1246" pos:column="17">i<pos:position pos:line="1246" pos:column="18"/></name><operator pos:line="1246" pos:column="18">++<pos:position pos:line="1246" pos:column="20"/></operator></expr></incr>)<pos:position pos:line="1246" pos:column="21"/></control><block pos:line="1246" pos:column="21">{
    <expr_stmt><expr><name pos:line="1247" pos:column="5">idx<pos:position pos:line="1247" pos:column="8"/></name> <operator pos:line="1247" pos:column="9">=<pos:position pos:line="1247" pos:column="10"/></operator> <ternary><condition><expr><name pos:line="1247" pos:column="11">aPermute<pos:position pos:line="1247" pos:column="19"/></name></expr> ?<pos:position pos:line="1247" pos:column="21"/></condition><then pos:line="1247" pos:column="21"> <expr><name><name pos:line="1247" pos:column="22">aPermute<pos:position pos:line="1247" pos:column="30"/></name><index pos:line="1247" pos:column="30">[<expr><name pos:line="1247" pos:column="31">i<pos:position pos:line="1247" pos:column="32"/></name></expr>]<pos:position pos:line="1247" pos:column="33"/></index></name></expr> <pos:position pos:line="1247" pos:column="34"/></then><else pos:line="1247" pos:column="34">: <expr><name pos:line="1247" pos:column="36">i<pos:position pos:line="1247" pos:column="37"/></name></expr></else></ternary></expr>;<pos:position pos:line="1247" pos:column="38"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="1248" pos:column="5">REGISTER_TRACE<pos:position pos:line="1248" pos:column="19"/></name><argument_list pos:line="1248" pos:column="19">(<argument><expr><name pos:line="1248" pos:column="20">p1<pos:position pos:line="1248" pos:column="22"/></name><operator pos:line="1248" pos:column="22">+<pos:position pos:line="1248" pos:column="23"/></operator><name pos:line="1248" pos:column="23">idx<pos:position pos:line="1248" pos:column="26"/></name></expr></argument>, <argument><expr><operator pos:line="1248" pos:column="28">&amp;<pos:position pos:line="1248" pos:column="33"/></operator><name><name pos:line="1248" pos:column="29">p<pos:position pos:line="1248" pos:column="30"/></name><operator pos:line="1248" pos:column="30">-&gt;<pos:position pos:line="1248" pos:column="35"/></operator><name pos:line="1248" pos:column="32">aMem<pos:position pos:line="1248" pos:column="36"/></name><index pos:line="1248" pos:column="36">[<expr><name pos:line="1248" pos:column="37">p1<pos:position pos:line="1248" pos:column="39"/></name><operator pos:line="1248" pos:column="39">+<pos:position pos:line="1248" pos:column="40"/></operator><name pos:line="1248" pos:column="40">idx<pos:position pos:line="1248" pos:column="43"/></name></expr>]<pos:position pos:line="1248" pos:column="44"/></index></name></expr></argument>)<pos:position pos:line="1248" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="1248" pos:column="46"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="1249" pos:column="5">REGISTER_TRACE<pos:position pos:line="1249" pos:column="19"/></name><argument_list pos:line="1249" pos:column="19">(<argument><expr><name pos:line="1249" pos:column="20">p2<pos:position pos:line="1249" pos:column="22"/></name><operator pos:line="1249" pos:column="22">+<pos:position pos:line="1249" pos:column="23"/></operator><name pos:line="1249" pos:column="23">idx<pos:position pos:line="1249" pos:column="26"/></name></expr></argument>, <argument><expr><operator pos:line="1249" pos:column="28">&amp;<pos:position pos:line="1249" pos:column="33"/></operator><name><name pos:line="1249" pos:column="29">p<pos:position pos:line="1249" pos:column="30"/></name><operator pos:line="1249" pos:column="30">-&gt;<pos:position pos:line="1249" pos:column="35"/></operator><name pos:line="1249" pos:column="32">aMem<pos:position pos:line="1249" pos:column="36"/></name><index pos:line="1249" pos:column="36">[<expr><name pos:line="1249" pos:column="37">p2<pos:position pos:line="1249" pos:column="39"/></name><operator pos:line="1249" pos:column="39">+<pos:position pos:line="1249" pos:column="40"/></operator><name pos:line="1249" pos:column="40">idx<pos:position pos:line="1249" pos:column="43"/></name></expr>]<pos:position pos:line="1249" pos:column="44"/></index></name></expr></argument>)<pos:position pos:line="1249" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="1249" pos:column="46"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="1250" pos:column="5">assert<pos:position pos:line="1250" pos:column="11"/></name><argument_list pos:line="1250" pos:column="11">( <argument><expr><name pos:line="1250" pos:column="13">i<pos:position pos:line="1250" pos:column="14"/></name><operator pos:line="1250" pos:column="14">&lt;<pos:position pos:line="1250" pos:column="18"/></operator><name><name pos:line="1250" pos:column="15">pKeyInfo<pos:position pos:line="1250" pos:column="23"/></name><operator pos:line="1250" pos:column="23">-&gt;<pos:position pos:line="1250" pos:column="28"/></operator><name pos:line="1250" pos:column="25">nField<pos:position pos:line="1250" pos:column="31"/></name></name></expr></argument> )<pos:position pos:line="1250" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="1250" pos:column="34"/></expr_stmt>
    <expr_stmt><expr><name pos:line="1251" pos:column="5">pColl<pos:position pos:line="1251" pos:column="10"/></name> <operator pos:line="1251" pos:column="11">=<pos:position pos:line="1251" pos:column="12"/></operator> <name><name pos:line="1251" pos:column="13">pKeyInfo<pos:position pos:line="1251" pos:column="21"/></name><operator pos:line="1251" pos:column="21">-&gt;<pos:position pos:line="1251" pos:column="26"/></operator><name pos:line="1251" pos:column="23">aColl<pos:position pos:line="1251" pos:column="28"/></name><index pos:line="1251" pos:column="28">[<expr><name pos:line="1251" pos:column="29">i<pos:position pos:line="1251" pos:column="30"/></name></expr>]<pos:position pos:line="1251" pos:column="31"/></index></name></expr>;<pos:position pos:line="1251" pos:column="32"/></expr_stmt>
    <expr_stmt><expr><name pos:line="1252" pos:column="5">bRev<pos:position pos:line="1252" pos:column="9"/></name> <operator pos:line="1252" pos:column="10">=<pos:position pos:line="1252" pos:column="11"/></operator> <name><name pos:line="1252" pos:column="12">pKeyInfo<pos:position pos:line="1252" pos:column="20"/></name><operator pos:line="1252" pos:column="20">-&gt;<pos:position pos:line="1252" pos:column="25"/></operator><name pos:line="1252" pos:column="22">aSortOrder<pos:position pos:line="1252" pos:column="32"/></name><index pos:line="1252" pos:column="32">[<expr><name pos:line="1252" pos:column="33">i<pos:position pos:line="1252" pos:column="34"/></name></expr>]<pos:position pos:line="1252" pos:column="35"/></index></name></expr>;<pos:position pos:line="1252" pos:column="36"/></expr_stmt>
    <expr_stmt><expr><name pos:line="1253" pos:column="5">iCompare<pos:position pos:line="1253" pos:column="13"/></name> <operator pos:line="1253" pos:column="14">=<pos:position pos:line="1253" pos:column="15"/></operator> <call><name pos:line="1253" pos:column="16">sqlite3MemCompare<pos:position pos:line="1253" pos:column="33"/></name><argument_list pos:line="1253" pos:column="33">(<argument><expr><operator pos:line="1253" pos:column="34">&amp;<pos:position pos:line="1253" pos:column="39"/></operator><name><name pos:line="1253" pos:column="35">p<pos:position pos:line="1253" pos:column="36"/></name><operator pos:line="1253" pos:column="36">-&gt;<pos:position pos:line="1253" pos:column="41"/></operator><name pos:line="1253" pos:column="38">aMem<pos:position pos:line="1253" pos:column="42"/></name><index pos:line="1253" pos:column="42">[<expr><name pos:line="1253" pos:column="43">p1<pos:position pos:line="1253" pos:column="45"/></name><operator pos:line="1253" pos:column="45">+<pos:position pos:line="1253" pos:column="46"/></operator><name pos:line="1253" pos:column="46">idx<pos:position pos:line="1253" pos:column="49"/></name></expr>]<pos:position pos:line="1253" pos:column="50"/></index></name></expr></argument>, <argument><expr><operator pos:line="1253" pos:column="52">&amp;<pos:position pos:line="1253" pos:column="57"/></operator><name><name pos:line="1253" pos:column="53">p<pos:position pos:line="1253" pos:column="54"/></name><operator pos:line="1253" pos:column="54">-&gt;<pos:position pos:line="1253" pos:column="59"/></operator><name pos:line="1253" pos:column="56">aMem<pos:position pos:line="1253" pos:column="60"/></name><index pos:line="1253" pos:column="60">[<expr><name pos:line="1253" pos:column="61">p2<pos:position pos:line="1253" pos:column="63"/></name><operator pos:line="1253" pos:column="63">+<pos:position pos:line="1253" pos:column="64"/></operator><name pos:line="1253" pos:column="64">idx<pos:position pos:line="1253" pos:column="67"/></name></expr>]<pos:position pos:line="1253" pos:column="68"/></index></name></expr></argument>, <argument><expr><name pos:line="1253" pos:column="70">pColl<pos:position pos:line="1253" pos:column="75"/></name></expr></argument>)<pos:position pos:line="1253" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="1253" pos:column="77"/></expr_stmt>
    <if pos:line="1254" pos:column="5">if<condition pos:line="1254" pos:column="7">( <expr><name pos:line="1254" pos:column="9">iCompare<pos:position pos:line="1254" pos:column="17"/></name></expr> )<pos:position pos:line="1254" pos:column="19"/></condition><then><block pos:line="1254" pos:column="19">{
      <if pos:line="1255" pos:column="7">if<condition pos:line="1255" pos:column="9">( <expr><name pos:line="1255" pos:column="11">bRev<pos:position pos:line="1255" pos:column="15"/></name></expr> )<pos:position pos:line="1255" pos:column="17"/></condition><then pos:line="1255" pos:column="17"> <block type="pseudo"><expr_stmt><expr><name pos:line="1255" pos:column="18">iCompare<pos:position pos:line="1255" pos:column="26"/></name> <operator pos:line="1255" pos:column="27">=<pos:position pos:line="1255" pos:column="28"/></operator> <operator pos:line="1255" pos:column="29">-<pos:position pos:line="1255" pos:column="30"/></operator><name pos:line="1255" pos:column="30">iCompare<pos:position pos:line="1255" pos:column="38"/></name></expr>;<pos:position pos:line="1255" pos:column="39"/></expr_stmt></block></then></if>
      <break pos:line="1256" pos:column="7">break;<pos:position pos:line="1256" pos:column="13"/></break>
    }<pos:position pos:line="1257" pos:column="6"/></block></then></if>
  }<pos:position pos:line="1258" pos:column="4"/></block></for>
  <expr_stmt><expr><name pos:line="1259" pos:column="3">aPermute<pos:position pos:line="1259" pos:column="11"/></name> <operator pos:line="1259" pos:column="12">=<pos:position pos:line="1259" pos:column="13"/></operator> <literal type="number" pos:line="1259" pos:column="14">0<pos:position pos:line="1259" pos:column="15"/></literal></expr>;<pos:position pos:line="1259" pos:column="16"/></expr_stmt>
  <break pos:line="1260" pos:column="3">break;<pos:position pos:line="1260" pos:column="9"/></break>
}<pos:position pos:line="1261" pos:column="2"/></block>

<comment type="block" pos:line="1263" pos:column="1">/* Opcode: Jump P1 P2 P3 * *
**
** Jump to the instruction at address P1, P2, or P3 depending on whether
** in the most recent OP_Compare instruction the P1 vector was less than
** equal to, or greater than the P2 vector, respectively.
*/</comment>
<case pos:line="1269" pos:column="1">case <expr><name pos:line="1269" pos:column="6">OP_Jump<pos:position pos:line="1269" pos:column="13"/></name></expr>:<pos:position pos:line="1269" pos:column="14"/></case> <block pos:line="1269" pos:column="15">{             <comment type="block" pos:line="1269" pos:column="29">/* jump */</comment>
  <if pos:line="1270" pos:column="3">if<condition pos:line="1270" pos:column="5">( <expr><name pos:line="1270" pos:column="7">iCompare<pos:position pos:line="1270" pos:column="15"/></name><operator pos:line="1270" pos:column="15">&lt;<pos:position pos:line="1270" pos:column="19"/></operator><literal type="number" pos:line="1270" pos:column="16">0<pos:position pos:line="1270" pos:column="17"/></literal></expr> )<pos:position pos:line="1270" pos:column="19"/></condition><then><block pos:line="1270" pos:column="19">{
    <expr_stmt><expr><name pos:line="1271" pos:column="5">pc<pos:position pos:line="1271" pos:column="7"/></name> <operator pos:line="1271" pos:column="8">=<pos:position pos:line="1271" pos:column="9"/></operator> <name><name pos:line="1271" pos:column="10">pOp<pos:position pos:line="1271" pos:column="13"/></name><operator pos:line="1271" pos:column="13">-&gt;<pos:position pos:line="1271" pos:column="18"/></operator><name pos:line="1271" pos:column="15">p1<pos:position pos:line="1271" pos:column="17"/></name></name> <operator pos:line="1271" pos:column="18">-<pos:position pos:line="1271" pos:column="19"/></operator> <literal type="number" pos:line="1271" pos:column="20">1<pos:position pos:line="1271" pos:column="21"/></literal></expr>;<pos:position pos:line="1271" pos:column="22"/></expr_stmt>
  }<pos:position pos:line="1272" pos:column="4"/></block></then><elseif pos:line="1272" pos:column="4">else <if pos:line="1272" pos:column="9">if<condition pos:line="1272" pos:column="11">( <expr><name pos:line="1272" pos:column="13">iCompare<pos:position pos:line="1272" pos:column="21"/></name><operator pos:line="1272" pos:column="21">==<pos:position pos:line="1272" pos:column="23"/></operator><literal type="number" pos:line="1272" pos:column="23">0<pos:position pos:line="1272" pos:column="24"/></literal></expr> )<pos:position pos:line="1272" pos:column="26"/></condition><then><block pos:line="1272" pos:column="26">{
    <expr_stmt><expr><name pos:line="1273" pos:column="5">pc<pos:position pos:line="1273" pos:column="7"/></name> <operator pos:line="1273" pos:column="8">=<pos:position pos:line="1273" pos:column="9"/></operator> <name><name pos:line="1273" pos:column="10">pOp<pos:position pos:line="1273" pos:column="13"/></name><operator pos:line="1273" pos:column="13">-&gt;<pos:position pos:line="1273" pos:column="18"/></operator><name pos:line="1273" pos:column="15">p2<pos:position pos:line="1273" pos:column="17"/></name></name> <operator pos:line="1273" pos:column="18">-<pos:position pos:line="1273" pos:column="19"/></operator> <literal type="number" pos:line="1273" pos:column="20">1<pos:position pos:line="1273" pos:column="21"/></literal></expr>;<pos:position pos:line="1273" pos:column="22"/></expr_stmt>
  }<pos:position pos:line="1274" pos:column="4"/></block></then></if></elseif><else pos:line="1274" pos:column="4">else<block pos:line="1274" pos:column="8">{
    <expr_stmt><expr><name pos:line="1275" pos:column="5">pc<pos:position pos:line="1275" pos:column="7"/></name> <operator pos:line="1275" pos:column="8">=<pos:position pos:line="1275" pos:column="9"/></operator> <name><name pos:line="1275" pos:column="10">pOp<pos:position pos:line="1275" pos:column="13"/></name><operator pos:line="1275" pos:column="13">-&gt;<pos:position pos:line="1275" pos:column="18"/></operator><name pos:line="1275" pos:column="15">p3<pos:position pos:line="1275" pos:column="17"/></name></name> <operator pos:line="1275" pos:column="18">-<pos:position pos:line="1275" pos:column="19"/></operator> <literal type="number" pos:line="1275" pos:column="20">1<pos:position pos:line="1275" pos:column="21"/></literal></expr>;<pos:position pos:line="1275" pos:column="22"/></expr_stmt>
  }<pos:position pos:line="1276" pos:column="4"/></block></else></if>
  <break pos:line="1277" pos:column="3">break;<pos:position pos:line="1277" pos:column="9"/></break>
}<pos:position pos:line="1278" pos:column="2"/></block>

<comment type="block" pos:line="1280" pos:column="1">/* Opcode: And P1 P2 P3 * *
**
** Take the logical AND of the values in registers P1 and P2 and
** write the result into register P3.
**
** If either P1 or P2 is 0 (false) then the result is 0 even if
** the other input is NULL.  A NULL and true or two NULLs give
** a NULL output.
*/</comment>
<comment type="block" pos:line="1289" pos:column="1">/* Opcode: Or P1 P2 P3 * *
**
** Take the logical OR of the values in register P1 and P2 and
** store the answer in register P3.
**
** If either P1 or P2 is nonzero (true) then the result is 1 (true)
** even if the other input is NULL.  A NULL and false or two NULLs
** give a NULL output.
*/</comment>
<case pos:line="1298" pos:column="1">case <expr><name pos:line="1298" pos:column="6">OP_And<pos:position pos:line="1298" pos:column="12"/></name></expr>:<pos:position pos:line="1298" pos:column="13"/></case>              <comment type="block" pos:line="1298" pos:column="27">/* same as TK_AND, in1, in2, out3 */</comment>
<case pos:line="1299" pos:column="1">case <expr><name pos:line="1299" pos:column="6">OP_Or<pos:position pos:line="1299" pos:column="11"/></name></expr>:<pos:position pos:line="1299" pos:column="12"/></case> <block pos:line="1299" pos:column="13">{             <comment type="block" pos:line="1299" pos:column="27">/* same as TK_OR, in1, in2, out3 */</comment>
  <decl_stmt><decl><type><name pos:line="1300" pos:column="3">int<pos:position pos:line="1300" pos:column="6"/></name></type> <name pos:line="1300" pos:column="7">v1<pos:position pos:line="1300" pos:column="9"/></name></decl>;<pos:position pos:line="1300" pos:column="10"/></decl_stmt>    <comment type="block" pos:line="1300" pos:column="14">/* Left operand:  0==FALSE, 1==TRUE, 2==UNKNOWN or NULL */</comment>
  <decl_stmt><decl><type><name pos:line="1301" pos:column="3">int<pos:position pos:line="1301" pos:column="6"/></name></type> <name pos:line="1301" pos:column="7">v2<pos:position pos:line="1301" pos:column="9"/></name></decl>;<pos:position pos:line="1301" pos:column="10"/></decl_stmt>    <comment type="block" pos:line="1301" pos:column="14">/* Right operand: 0==FALSE, 1==TRUE, 2==UNKNOWN or NULL */</comment>

  <if pos:line="1303" pos:column="3">if<condition pos:line="1303" pos:column="5">( <expr><name><name pos:line="1303" pos:column="7">pIn1<pos:position pos:line="1303" pos:column="11"/></name><operator pos:line="1303" pos:column="11">-&gt;<pos:position pos:line="1303" pos:column="16"/></operator><name pos:line="1303" pos:column="13">flags<pos:position pos:line="1303" pos:column="18"/></name></name> <operator pos:line="1303" pos:column="19">&amp;<pos:position pos:line="1303" pos:column="24"/></operator> <name pos:line="1303" pos:column="21">MEM_Null<pos:position pos:line="1303" pos:column="29"/></name></expr> )<pos:position pos:line="1303" pos:column="31"/></condition><then><block pos:line="1303" pos:column="31">{
    <expr_stmt><expr><name pos:line="1304" pos:column="5">v1<pos:position pos:line="1304" pos:column="7"/></name> <operator pos:line="1304" pos:column="8">=<pos:position pos:line="1304" pos:column="9"/></operator> <literal type="number" pos:line="1304" pos:column="10">2<pos:position pos:line="1304" pos:column="11"/></literal></expr>;<pos:position pos:line="1304" pos:column="12"/></expr_stmt>
  }<pos:position pos:line="1305" pos:column="4"/></block></then><else pos:line="1305" pos:column="4">else<block pos:line="1305" pos:column="8">{
    <expr_stmt><expr><name pos:line="1306" pos:column="5">v1<pos:position pos:line="1306" pos:column="7"/></name> <operator pos:line="1306" pos:column="8">=<pos:position pos:line="1306" pos:column="9"/></operator> <call><name pos:line="1306" pos:column="10">sqlite3VdbeIntValue<pos:position pos:line="1306" pos:column="29"/></name><argument_list pos:line="1306" pos:column="29">(<argument><expr><name pos:line="1306" pos:column="30">pIn1<pos:position pos:line="1306" pos:column="34"/></name></expr></argument>)<pos:position pos:line="1306" pos:column="35"/></argument_list></call><operator pos:line="1306" pos:column="35">!=<pos:position pos:line="1306" pos:column="37"/></operator><literal type="number" pos:line="1306" pos:column="37">0<pos:position pos:line="1306" pos:column="38"/></literal></expr>;<pos:position pos:line="1306" pos:column="39"/></expr_stmt>
  }<pos:position pos:line="1307" pos:column="4"/></block></else></if>
  <if pos:line="1308" pos:column="3">if<condition pos:line="1308" pos:column="5">( <expr><name><name pos:line="1308" pos:column="7">pIn2<pos:position pos:line="1308" pos:column="11"/></name><operator pos:line="1308" pos:column="11">-&gt;<pos:position pos:line="1308" pos:column="16"/></operator><name pos:line="1308" pos:column="13">flags<pos:position pos:line="1308" pos:column="18"/></name></name> <operator pos:line="1308" pos:column="19">&amp;<pos:position pos:line="1308" pos:column="24"/></operator> <name pos:line="1308" pos:column="21">MEM_Null<pos:position pos:line="1308" pos:column="29"/></name></expr> )<pos:position pos:line="1308" pos:column="31"/></condition><then><block pos:line="1308" pos:column="31">{
    <expr_stmt><expr><name pos:line="1309" pos:column="5">v2<pos:position pos:line="1309" pos:column="7"/></name> <operator pos:line="1309" pos:column="8">=<pos:position pos:line="1309" pos:column="9"/></operator> <literal type="number" pos:line="1309" pos:column="10">2<pos:position pos:line="1309" pos:column="11"/></literal></expr>;<pos:position pos:line="1309" pos:column="12"/></expr_stmt>
  }<pos:position pos:line="1310" pos:column="4"/></block></then><else pos:line="1310" pos:column="4">else<block pos:line="1310" pos:column="8">{
    <expr_stmt><expr><name pos:line="1311" pos:column="5">v2<pos:position pos:line="1311" pos:column="7"/></name> <operator pos:line="1311" pos:column="8">=<pos:position pos:line="1311" pos:column="9"/></operator> <call><name pos:line="1311" pos:column="10">sqlite3VdbeIntValue<pos:position pos:line="1311" pos:column="29"/></name><argument_list pos:line="1311" pos:column="29">(<argument><expr><name pos:line="1311" pos:column="30">pIn2<pos:position pos:line="1311" pos:column="34"/></name></expr></argument>)<pos:position pos:line="1311" pos:column="35"/></argument_list></call><operator pos:line="1311" pos:column="35">!=<pos:position pos:line="1311" pos:column="37"/></operator><literal type="number" pos:line="1311" pos:column="37">0<pos:position pos:line="1311" pos:column="38"/></literal></expr>;<pos:position pos:line="1311" pos:column="39"/></expr_stmt>
  }<pos:position pos:line="1312" pos:column="4"/></block></else></if>
  <if pos:line="1313" pos:column="3">if<condition pos:line="1313" pos:column="5">( <expr><name><name pos:line="1313" pos:column="7">pOp<pos:position pos:line="1313" pos:column="10"/></name><operator pos:line="1313" pos:column="10">-&gt;<pos:position pos:line="1313" pos:column="15"/></operator><name pos:line="1313" pos:column="12">opcode<pos:position pos:line="1313" pos:column="18"/></name></name><operator pos:line="1313" pos:column="18">==<pos:position pos:line="1313" pos:column="20"/></operator><name pos:line="1313" pos:column="20">OP_And<pos:position pos:line="1313" pos:column="26"/></name></expr> )<pos:position pos:line="1313" pos:column="28"/></condition><then><block pos:line="1313" pos:column="28">{
    <decl_stmt><decl><specifier pos:line="1314" pos:column="5">static<pos:position pos:line="1314" pos:column="11"/></specifier> <type><specifier pos:line="1314" pos:column="12">const<pos:position pos:line="1314" pos:column="17"/></specifier> <name pos:line="1314" pos:column="18">unsigned<pos:position pos:line="1314" pos:column="26"/></name> <name pos:line="1314" pos:column="27">char<pos:position pos:line="1314" pos:column="31"/></name></type> <name><name pos:line="1314" pos:column="32">and_logic<pos:position pos:line="1314" pos:column="41"/></name><index pos:line="1314" pos:column="41">[]<pos:position pos:line="1314" pos:column="43"/></index></name> <init pos:line="1314" pos:column="44">= <expr><block pos:line="1314" pos:column="46">{ <expr><literal type="number" pos:line="1314" pos:column="48">0<pos:position pos:line="1314" pos:column="49"/></literal></expr>, <expr><literal type="number" pos:line="1314" pos:column="51">0<pos:position pos:line="1314" pos:column="52"/></literal></expr>, <expr><literal type="number" pos:line="1314" pos:column="54">0<pos:position pos:line="1314" pos:column="55"/></literal></expr>, <expr><literal type="number" pos:line="1314" pos:column="57">0<pos:position pos:line="1314" pos:column="58"/></literal></expr>, <expr><literal type="number" pos:line="1314" pos:column="60">1<pos:position pos:line="1314" pos:column="61"/></literal></expr>, <expr><literal type="number" pos:line="1314" pos:column="63">2<pos:position pos:line="1314" pos:column="64"/></literal></expr>, <expr><literal type="number" pos:line="1314" pos:column="66">0<pos:position pos:line="1314" pos:column="67"/></literal></expr>, <expr><literal type="number" pos:line="1314" pos:column="69">2<pos:position pos:line="1314" pos:column="70"/></literal></expr>, <expr><literal type="number" pos:line="1314" pos:column="72">2<pos:position pos:line="1314" pos:column="73"/></literal></expr> }<pos:position pos:line="1314" pos:column="75"/></block></expr></init></decl>;<pos:position pos:line="1314" pos:column="76"/></decl_stmt>
    <expr_stmt><expr><name pos:line="1315" pos:column="5">v1<pos:position pos:line="1315" pos:column="7"/></name> <operator pos:line="1315" pos:column="8">=<pos:position pos:line="1315" pos:column="9"/></operator> <name><name pos:line="1315" pos:column="10">and_logic<pos:position pos:line="1315" pos:column="19"/></name><index pos:line="1315" pos:column="19">[<expr><name pos:line="1315" pos:column="20">v1<pos:position pos:line="1315" pos:column="22"/></name><operator pos:line="1315" pos:column="22">*<pos:position pos:line="1315" pos:column="23"/></operator><literal type="number" pos:line="1315" pos:column="23">3<pos:position pos:line="1315" pos:column="24"/></literal><operator pos:line="1315" pos:column="24">+<pos:position pos:line="1315" pos:column="25"/></operator><name pos:line="1315" pos:column="25">v2<pos:position pos:line="1315" pos:column="27"/></name></expr>]<pos:position pos:line="1315" pos:column="28"/></index></name></expr>;<pos:position pos:line="1315" pos:column="29"/></expr_stmt>
  }<pos:position pos:line="1316" pos:column="4"/></block></then><else pos:line="1316" pos:column="4">else<block pos:line="1316" pos:column="8">{
    <decl_stmt><decl><specifier pos:line="1317" pos:column="5">static<pos:position pos:line="1317" pos:column="11"/></specifier> <type><specifier pos:line="1317" pos:column="12">const<pos:position pos:line="1317" pos:column="17"/></specifier> <name pos:line="1317" pos:column="18">unsigned<pos:position pos:line="1317" pos:column="26"/></name> <name pos:line="1317" pos:column="27">char<pos:position pos:line="1317" pos:column="31"/></name></type> <name><name pos:line="1317" pos:column="32">or_logic<pos:position pos:line="1317" pos:column="40"/></name><index pos:line="1317" pos:column="40">[]<pos:position pos:line="1317" pos:column="42"/></index></name> <init pos:line="1317" pos:column="43">= <expr><block pos:line="1317" pos:column="45">{ <expr><literal type="number" pos:line="1317" pos:column="47">0<pos:position pos:line="1317" pos:column="48"/></literal></expr>, <expr><literal type="number" pos:line="1317" pos:column="50">1<pos:position pos:line="1317" pos:column="51"/></literal></expr>, <expr><literal type="number" pos:line="1317" pos:column="53">2<pos:position pos:line="1317" pos:column="54"/></literal></expr>, <expr><literal type="number" pos:line="1317" pos:column="56">1<pos:position pos:line="1317" pos:column="57"/></literal></expr>, <expr><literal type="number" pos:line="1317" pos:column="59">1<pos:position pos:line="1317" pos:column="60"/></literal></expr>, <expr><literal type="number" pos:line="1317" pos:column="62">1<pos:position pos:line="1317" pos:column="63"/></literal></expr>, <expr><literal type="number" pos:line="1317" pos:column="65">2<pos:position pos:line="1317" pos:column="66"/></literal></expr>, <expr><literal type="number" pos:line="1317" pos:column="68">1<pos:position pos:line="1317" pos:column="69"/></literal></expr>, <expr><literal type="number" pos:line="1317" pos:column="71">2<pos:position pos:line="1317" pos:column="72"/></literal></expr> }<pos:position pos:line="1317" pos:column="74"/></block></expr></init></decl>;<pos:position pos:line="1317" pos:column="75"/></decl_stmt>
    <expr_stmt><expr><name pos:line="1318" pos:column="5">v1<pos:position pos:line="1318" pos:column="7"/></name> <operator pos:line="1318" pos:column="8">=<pos:position pos:line="1318" pos:column="9"/></operator> <name><name pos:line="1318" pos:column="10">or_logic<pos:position pos:line="1318" pos:column="18"/></name><index pos:line="1318" pos:column="18">[<expr><name pos:line="1318" pos:column="19">v1<pos:position pos:line="1318" pos:column="21"/></name><operator pos:line="1318" pos:column="21">*<pos:position pos:line="1318" pos:column="22"/></operator><literal type="number" pos:line="1318" pos:column="22">3<pos:position pos:line="1318" pos:column="23"/></literal><operator pos:line="1318" pos:column="23">+<pos:position pos:line="1318" pos:column="24"/></operator><name pos:line="1318" pos:column="24">v2<pos:position pos:line="1318" pos:column="26"/></name></expr>]<pos:position pos:line="1318" pos:column="27"/></index></name></expr>;<pos:position pos:line="1318" pos:column="28"/></expr_stmt>
  }<pos:position pos:line="1319" pos:column="4"/></block></else></if>
  <if pos:line="1320" pos:column="3">if<condition pos:line="1320" pos:column="5">( <expr><name pos:line="1320" pos:column="7">v1<pos:position pos:line="1320" pos:column="9"/></name><operator pos:line="1320" pos:column="9">==<pos:position pos:line="1320" pos:column="11"/></operator><literal type="number" pos:line="1320" pos:column="11">2<pos:position pos:line="1320" pos:column="12"/></literal></expr> )<pos:position pos:line="1320" pos:column="14"/></condition><then><block pos:line="1320" pos:column="14">{
    <expr_stmt><expr><call><name pos:line="1321" pos:column="5">MemSetTypeFlag<pos:position pos:line="1321" pos:column="19"/></name><argument_list pos:line="1321" pos:column="19">(<argument><expr><name pos:line="1321" pos:column="20">pOut<pos:position pos:line="1321" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="1321" pos:column="26">MEM_Null<pos:position pos:line="1321" pos:column="34"/></name></expr></argument>)<pos:position pos:line="1321" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="1321" pos:column="36"/></expr_stmt>
  }<pos:position pos:line="1322" pos:column="4"/></block></then><else pos:line="1322" pos:column="4">else<block pos:line="1322" pos:column="8">{
    <expr_stmt><expr><name><name pos:line="1323" pos:column="5">pOut<pos:position pos:line="1323" pos:column="9"/></name><operator pos:line="1323" pos:column="9">-&gt;<pos:position pos:line="1323" pos:column="14"/></operator><name pos:line="1323" pos:column="11">u<pos:position pos:line="1323" pos:column="12"/></name><operator pos:line="1323" pos:column="12">.<pos:position pos:line="1323" pos:column="13"/></operator><name pos:line="1323" pos:column="13">i<pos:position pos:line="1323" pos:column="14"/></name></name> <operator pos:line="1323" pos:column="15">=<pos:position pos:line="1323" pos:column="16"/></operator> <name pos:line="1323" pos:column="17">v1<pos:position pos:line="1323" pos:column="19"/></name></expr>;<pos:position pos:line="1323" pos:column="20"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="1324" pos:column="5">MemSetTypeFlag<pos:position pos:line="1324" pos:column="19"/></name><argument_list pos:line="1324" pos:column="19">(<argument><expr><name pos:line="1324" pos:column="20">pOut<pos:position pos:line="1324" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="1324" pos:column="26">MEM_Int<pos:position pos:line="1324" pos:column="33"/></name></expr></argument>)<pos:position pos:line="1324" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="1324" pos:column="35"/></expr_stmt>
  }<pos:position pos:line="1325" pos:column="4"/></block></else></if>
  <break pos:line="1326" pos:column="3">break;<pos:position pos:line="1326" pos:column="9"/></break>
}<pos:position pos:line="1327" pos:column="2"/></block>

<comment type="block" pos:line="1329" pos:column="1">/* Opcode: Not P1 P2 * * *
**
** Interpret the value in register P1 as a boolean value.  Store the
** boolean complement in register P2.  If the value in register P1 is 
** NULL, then a NULL is stored in P2.
*/</comment>
<case pos:line="1335" pos:column="1">case <expr><name pos:line="1335" pos:column="6">OP_Not<pos:position pos:line="1335" pos:column="12"/></name></expr>:<pos:position pos:line="1335" pos:column="13"/></case> <block pos:line="1335" pos:column="14">{                <comment type="block" pos:line="1335" pos:column="31">/* same as TK_NOT, in1 */</comment>
  <expr_stmt><expr><name pos:line="1336" pos:column="3">pOut<pos:position pos:line="1336" pos:column="7"/></name> <operator pos:line="1336" pos:column="8">=<pos:position pos:line="1336" pos:column="9"/></operator> <operator pos:line="1336" pos:column="10">&amp;<pos:position pos:line="1336" pos:column="15"/></operator><name><name pos:line="1336" pos:column="11">p<pos:position pos:line="1336" pos:column="12"/></name><operator pos:line="1336" pos:column="12">-&gt;<pos:position pos:line="1336" pos:column="17"/></operator><name pos:line="1336" pos:column="14">aMem<pos:position pos:line="1336" pos:column="18"/></name><index pos:line="1336" pos:column="18">[<expr><name><name pos:line="1336" pos:column="19">pOp<pos:position pos:line="1336" pos:column="22"/></name><operator pos:line="1336" pos:column="22">-&gt;<pos:position pos:line="1336" pos:column="27"/></operator><name pos:line="1336" pos:column="24">p2<pos:position pos:line="1336" pos:column="26"/></name></name></expr>]<pos:position pos:line="1336" pos:column="27"/></index></name></expr>;<pos:position pos:line="1336" pos:column="28"/></expr_stmt>
  <if pos:line="1337" pos:column="3">if<condition pos:line="1337" pos:column="5">( <expr><name><name pos:line="1337" pos:column="7">pIn1<pos:position pos:line="1337" pos:column="11"/></name><operator pos:line="1337" pos:column="11">-&gt;<pos:position pos:line="1337" pos:column="16"/></operator><name pos:line="1337" pos:column="13">flags<pos:position pos:line="1337" pos:column="18"/></name></name> <operator pos:line="1337" pos:column="19">&amp;<pos:position pos:line="1337" pos:column="24"/></operator> <name pos:line="1337" pos:column="21">MEM_Null<pos:position pos:line="1337" pos:column="29"/></name></expr> )<pos:position pos:line="1337" pos:column="31"/></condition><then><block pos:line="1337" pos:column="31">{
    <expr_stmt><expr><call><name pos:line="1338" pos:column="5">sqlite3VdbeMemSetNull<pos:position pos:line="1338" pos:column="26"/></name><argument_list pos:line="1338" pos:column="26">(<argument><expr><name pos:line="1338" pos:column="27">pOut<pos:position pos:line="1338" pos:column="31"/></name></expr></argument>)<pos:position pos:line="1338" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="1338" pos:column="33"/></expr_stmt>
  }<pos:position pos:line="1339" pos:column="4"/></block></then><else pos:line="1339" pos:column="4">else<block pos:line="1339" pos:column="8">{
    <expr_stmt><expr><call><name pos:line="1340" pos:column="5">sqlite3VdbeMemSetInt64<pos:position pos:line="1340" pos:column="27"/></name><argument_list pos:line="1340" pos:column="27">(<argument><expr><name pos:line="1340" pos:column="28">pOut<pos:position pos:line="1340" pos:column="32"/></name></expr></argument>, <argument><expr><operator pos:line="1340" pos:column="34">!<pos:position pos:line="1340" pos:column="35"/></operator><call><name pos:line="1340" pos:column="35">sqlite3VdbeIntValue<pos:position pos:line="1340" pos:column="54"/></name><argument_list pos:line="1340" pos:column="54">(<argument><expr><name pos:line="1340" pos:column="55">pIn1<pos:position pos:line="1340" pos:column="59"/></name></expr></argument>)<pos:position pos:line="1340" pos:column="60"/></argument_list></call></expr></argument>)<pos:position pos:line="1340" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="1340" pos:column="62"/></expr_stmt>
  }<pos:position pos:line="1341" pos:column="4"/></block></else></if>
  <break pos:line="1342" pos:column="3">break;<pos:position pos:line="1342" pos:column="9"/></break>
}<pos:position pos:line="1343" pos:column="2"/></block>

<comment type="block" pos:line="1345" pos:column="1">/* Opcode: BitNot P1 P2 * * *
**
** Interpret the content of register P1 as an integer.  Store the
** ones-complement of the P1 value into register P2.  If P1 holds
** a NULL then store a NULL in P2.
*/</comment>
<case pos:line="1351" pos:column="1">case <expr><name pos:line="1351" pos:column="6">OP_BitNot<pos:position pos:line="1351" pos:column="15"/></name></expr>:<pos:position pos:line="1351" pos:column="16"/></case> <block pos:line="1351" pos:column="17">{             <comment type="block" pos:line="1351" pos:column="31">/* same as TK_BITNOT, in1 */</comment>
  <expr_stmt><expr><name pos:line="1352" pos:column="3">pOut<pos:position pos:line="1352" pos:column="7"/></name> <operator pos:line="1352" pos:column="8">=<pos:position pos:line="1352" pos:column="9"/></operator> <operator pos:line="1352" pos:column="10">&amp;<pos:position pos:line="1352" pos:column="15"/></operator><name><name pos:line="1352" pos:column="11">p<pos:position pos:line="1352" pos:column="12"/></name><operator pos:line="1352" pos:column="12">-&gt;<pos:position pos:line="1352" pos:column="17"/></operator><name pos:line="1352" pos:column="14">aMem<pos:position pos:line="1352" pos:column="18"/></name><index pos:line="1352" pos:column="18">[<expr><name><name pos:line="1352" pos:column="19">pOp<pos:position pos:line="1352" pos:column="22"/></name><operator pos:line="1352" pos:column="22">-&gt;<pos:position pos:line="1352" pos:column="27"/></operator><name pos:line="1352" pos:column="24">p2<pos:position pos:line="1352" pos:column="26"/></name></name></expr>]<pos:position pos:line="1352" pos:column="27"/></index></name></expr>;<pos:position pos:line="1352" pos:column="28"/></expr_stmt>
  <if pos:line="1353" pos:column="3">if<condition pos:line="1353" pos:column="5">( <expr><name><name pos:line="1353" pos:column="7">pIn1<pos:position pos:line="1353" pos:column="11"/></name><operator pos:line="1353" pos:column="11">-&gt;<pos:position pos:line="1353" pos:column="16"/></operator><name pos:line="1353" pos:column="13">flags<pos:position pos:line="1353" pos:column="18"/></name></name> <operator pos:line="1353" pos:column="19">&amp;<pos:position pos:line="1353" pos:column="24"/></operator> <name pos:line="1353" pos:column="21">MEM_Null<pos:position pos:line="1353" pos:column="29"/></name></expr> )<pos:position pos:line="1353" pos:column="31"/></condition><then><block pos:line="1353" pos:column="31">{
    <expr_stmt><expr><call><name pos:line="1354" pos:column="5">sqlite3VdbeMemSetNull<pos:position pos:line="1354" pos:column="26"/></name><argument_list pos:line="1354" pos:column="26">(<argument><expr><name pos:line="1354" pos:column="27">pOut<pos:position pos:line="1354" pos:column="31"/></name></expr></argument>)<pos:position pos:line="1354" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="1354" pos:column="33"/></expr_stmt>
  }<pos:position pos:line="1355" pos:column="4"/></block></then><else pos:line="1355" pos:column="4">else<block pos:line="1355" pos:column="8">{
    <expr_stmt><expr><call><name pos:line="1356" pos:column="5">sqlite3VdbeMemSetInt64<pos:position pos:line="1356" pos:column="27"/></name><argument_list pos:line="1356" pos:column="27">(<argument><expr><name pos:line="1356" pos:column="28">pOut<pos:position pos:line="1356" pos:column="32"/></name></expr></argument>, <argument><expr><call><name pos:line="1356" pos:column="34">~<name pos:line="1356" pos:column="35">sqlite3VdbeIntValue<pos:position pos:line="1356" pos:column="54"/></name></name><argument_list pos:line="1356" pos:column="54">(<argument><expr><name pos:line="1356" pos:column="55">pIn1<pos:position pos:line="1356" pos:column="59"/></name></expr></argument>)<pos:position pos:line="1356" pos:column="60"/></argument_list></call></expr></argument>)<pos:position pos:line="1356" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="1356" pos:column="62"/></expr_stmt>
  }<pos:position pos:line="1357" pos:column="4"/></block></else></if>
  <break pos:line="1358" pos:column="3">break;<pos:position pos:line="1358" pos:column="9"/></break>
}<pos:position pos:line="1359" pos:column="2"/></block>

<comment type="block" pos:line="1361" pos:column="1">/* Opcode: If P1 P2 P3 * *
**
** Jump to P2 if the value in register P1 is true.  The value is
** is considered true if it is numeric and non-zero.  If the value
** in P1 is NULL then take the jump if P3 is true.
*/</comment>
<comment type="block" pos:line="1367" pos:column="1">/* Opcode: IfNot P1 P2 P3 * *
**
** Jump to P2 if the value in register P1 is False.  The value is
** is considered true if it has a numeric value of zero.  If the value
** in P1 is NULL then take the jump if P3 is true.
*/</comment>
<case pos:line="1373" pos:column="1">case <expr><name pos:line="1373" pos:column="6">OP_If<pos:position pos:line="1373" pos:column="11"/></name></expr>:<pos:position pos:line="1373" pos:column="12"/></case>                 <comment type="block" pos:line="1373" pos:column="29">/* jump, in1 */</comment>
<case pos:line="1374" pos:column="1">case <expr><name pos:line="1374" pos:column="6">OP_IfNot<pos:position pos:line="1374" pos:column="14"/></name></expr>:<pos:position pos:line="1374" pos:column="15"/></case> <block pos:line="1374" pos:column="16">{            <comment type="block" pos:line="1374" pos:column="29">/* jump, in1 */</comment>
  <decl_stmt><decl><type><name pos:line="1375" pos:column="3">int<pos:position pos:line="1375" pos:column="6"/></name></type> <name pos:line="1375" pos:column="7">c<pos:position pos:line="1375" pos:column="8"/></name></decl>;<pos:position pos:line="1375" pos:column="9"/></decl_stmt>
  <if pos:line="1376" pos:column="3">if<condition pos:line="1376" pos:column="5">( <expr><name><name pos:line="1376" pos:column="7">pIn1<pos:position pos:line="1376" pos:column="11"/></name><operator pos:line="1376" pos:column="11">-&gt;<pos:position pos:line="1376" pos:column="16"/></operator><name pos:line="1376" pos:column="13">flags<pos:position pos:line="1376" pos:column="18"/></name></name> <operator pos:line="1376" pos:column="19">&amp;<pos:position pos:line="1376" pos:column="24"/></operator> <name pos:line="1376" pos:column="21">MEM_Null<pos:position pos:line="1376" pos:column="29"/></name></expr> )<pos:position pos:line="1376" pos:column="31"/></condition><then><block pos:line="1376" pos:column="31">{
    <expr_stmt><expr><name pos:line="1377" pos:column="5">c<pos:position pos:line="1377" pos:column="6"/></name> <operator pos:line="1377" pos:column="7">=<pos:position pos:line="1377" pos:column="8"/></operator> <name><name pos:line="1377" pos:column="9">pOp<pos:position pos:line="1377" pos:column="12"/></name><operator pos:line="1377" pos:column="12">-&gt;<pos:position pos:line="1377" pos:column="17"/></operator><name pos:line="1377" pos:column="14">p3<pos:position pos:line="1377" pos:column="16"/></name></name></expr>;<pos:position pos:line="1377" pos:column="17"/></expr_stmt>
  }<pos:position pos:line="1378" pos:column="4"/></block></then><else pos:line="1378" pos:column="4">else<block pos:line="1378" pos:column="8">{
<cpp:ifdef pos:line="1379" pos:column="1">#<cpp:directive pos:line="1379" pos:column="2">ifdef<pos:position pos:line="1379" pos:column="7"/></cpp:directive> <name pos:line="1379" pos:column="8">SQLITE_OMIT_FLOATING_POINT<pos:position pos:line="1379" pos:column="34"/></name></cpp:ifdef>
    <expr_stmt><expr><name pos:line="1380" pos:column="5">c<pos:position pos:line="1380" pos:column="6"/></name> <operator pos:line="1380" pos:column="7">=<pos:position pos:line="1380" pos:column="8"/></operator> <call><name pos:line="1380" pos:column="9">sqlite3VdbeIntValue<pos:position pos:line="1380" pos:column="28"/></name><argument_list pos:line="1380" pos:column="28">(<argument><expr><name pos:line="1380" pos:column="29">pIn1<pos:position pos:line="1380" pos:column="33"/></name></expr></argument>)<pos:position pos:line="1380" pos:column="34"/></argument_list></call><operator pos:line="1380" pos:column="34">!=<pos:position pos:line="1380" pos:column="36"/></operator><literal type="number" pos:line="1380" pos:column="36">0<pos:position pos:line="1380" pos:column="37"/></literal></expr>;<pos:position pos:line="1380" pos:column="38"/></expr_stmt>
<cpp:else pos:line="1381" pos:column="1">#<cpp:directive pos:line="1381" pos:column="2">else<pos:position pos:line="1381" pos:column="6"/></cpp:directive></cpp:else>
    <expr_stmt><expr><name pos:line="1382" pos:column="5">c<pos:position pos:line="1382" pos:column="6"/></name> <operator pos:line="1382" pos:column="7">=<pos:position pos:line="1382" pos:column="8"/></operator> <call><name pos:line="1382" pos:column="9">sqlite3VdbeRealValue<pos:position pos:line="1382" pos:column="29"/></name><argument_list pos:line="1382" pos:column="29">(<argument><expr><name pos:line="1382" pos:column="30">pIn1<pos:position pos:line="1382" pos:column="34"/></name></expr></argument>)<pos:position pos:line="1382" pos:column="35"/></argument_list></call><operator pos:line="1382" pos:column="35">!=<pos:position pos:line="1382" pos:column="37"/></operator><literal type="number" pos:line="1382" pos:column="37">0.0<pos:position pos:line="1382" pos:column="40"/></literal></expr>;<pos:position pos:line="1382" pos:column="41"/></expr_stmt>
<cpp:endif pos:line="1383" pos:column="1">#<cpp:directive pos:line="1383" pos:column="2">endif<pos:position pos:line="1383" pos:column="7"/></cpp:directive></cpp:endif>
    <if pos:line="1384" pos:column="5">if<condition pos:line="1384" pos:column="7">( <expr><name><name pos:line="1384" pos:column="9">pOp<pos:position pos:line="1384" pos:column="12"/></name><operator pos:line="1384" pos:column="12">-&gt;<pos:position pos:line="1384" pos:column="17"/></operator><name pos:line="1384" pos:column="14">opcode<pos:position pos:line="1384" pos:column="20"/></name></name><operator pos:line="1384" pos:column="20">==<pos:position pos:line="1384" pos:column="22"/></operator><name pos:line="1384" pos:column="22">OP_IfNot<pos:position pos:line="1384" pos:column="30"/></name></expr> )<pos:position pos:line="1384" pos:column="32"/></condition><then pos:line="1384" pos:column="32"> <block type="pseudo"><expr_stmt><expr><name pos:line="1384" pos:column="33">c<pos:position pos:line="1384" pos:column="34"/></name> <operator pos:line="1384" pos:column="35">=<pos:position pos:line="1384" pos:column="36"/></operator> <operator pos:line="1384" pos:column="37">!<pos:position pos:line="1384" pos:column="38"/></operator><name pos:line="1384" pos:column="38">c<pos:position pos:line="1384" pos:column="39"/></name></expr>;<pos:position pos:line="1384" pos:column="40"/></expr_stmt></block></then></if>
  }<pos:position pos:line="1385" pos:column="4"/></block></else></if>
  <if pos:line="1386" pos:column="3">if<condition pos:line="1386" pos:column="5">( <expr><name pos:line="1386" pos:column="7">c<pos:position pos:line="1386" pos:column="8"/></name></expr> )<pos:position pos:line="1386" pos:column="10"/></condition><then><block pos:line="1386" pos:column="10">{
    <expr_stmt><expr><name pos:line="1387" pos:column="5">pc<pos:position pos:line="1387" pos:column="7"/></name> <operator pos:line="1387" pos:column="8">=<pos:position pos:line="1387" pos:column="9"/></operator> <name><name pos:line="1387" pos:column="10">pOp<pos:position pos:line="1387" pos:column="13"/></name><operator pos:line="1387" pos:column="13">-&gt;<pos:position pos:line="1387" pos:column="18"/></operator><name pos:line="1387" pos:column="15">p2<pos:position pos:line="1387" pos:column="17"/></name></name><operator pos:line="1387" pos:column="17">-<pos:position pos:line="1387" pos:column="18"/></operator><literal type="number" pos:line="1387" pos:column="18">1<pos:position pos:line="1387" pos:column="19"/></literal></expr>;<pos:position pos:line="1387" pos:column="20"/></expr_stmt>
  }<pos:position pos:line="1388" pos:column="4"/></block></then></if>
  <break pos:line="1389" pos:column="3">break;<pos:position pos:line="1389" pos:column="9"/></break>
}<pos:position pos:line="1390" pos:column="2"/></block>

<comment type="block" pos:line="1392" pos:column="1">/* Opcode: IsNull P1 P2 P3 * *
**
** Jump to P2 if the value in register P1 is NULL.  If P3 is greater
** than zero, then check all values reg(P1), reg(P1+1), 
** reg(P1+2), ..., reg(P1+P3-1).
*/</comment>
<case pos:line="1398" pos:column="1">case <expr><name pos:line="1398" pos:column="6">OP_IsNull<pos:position pos:line="1398" pos:column="15"/></name></expr>:<pos:position pos:line="1398" pos:column="16"/></case> <block pos:line="1398" pos:column="17">{            <comment type="block" pos:line="1398" pos:column="30">/* same as TK_ISNULL, jump, in1 */</comment>
  <decl_stmt><decl><type><name pos:line="1399" pos:column="3">int<pos:position pos:line="1399" pos:column="6"/></name></type> <name pos:line="1399" pos:column="7">n<pos:position pos:line="1399" pos:column="8"/></name></decl>;<pos:position pos:line="1399" pos:column="9"/></decl_stmt>

  <expr_stmt><expr><name pos:line="1401" pos:column="3">n<pos:position pos:line="1401" pos:column="4"/></name> <operator pos:line="1401" pos:column="5">=<pos:position pos:line="1401" pos:column="6"/></operator> <name><name pos:line="1401" pos:column="7">pOp<pos:position pos:line="1401" pos:column="10"/></name><operator pos:line="1401" pos:column="10">-&gt;<pos:position pos:line="1401" pos:column="15"/></operator><name pos:line="1401" pos:column="12">p3<pos:position pos:line="1401" pos:column="14"/></name></name></expr>;<pos:position pos:line="1401" pos:column="15"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="1402" pos:column="3">assert<pos:position pos:line="1402" pos:column="9"/></name><argument_list pos:line="1402" pos:column="9">( <argument><expr><name><name pos:line="1402" pos:column="11">pOp<pos:position pos:line="1402" pos:column="14"/></name><operator pos:line="1402" pos:column="14">-&gt;<pos:position pos:line="1402" pos:column="19"/></operator><name pos:line="1402" pos:column="16">p3<pos:position pos:line="1402" pos:column="18"/></name></name><operator pos:line="1402" pos:column="18">==<pos:position pos:line="1402" pos:column="20"/></operator><literal type="number" pos:line="1402" pos:column="20">0<pos:position pos:line="1402" pos:column="21"/></literal> <operator pos:line="1402" pos:column="22">||<pos:position pos:line="1402" pos:column="24"/></operator> <name><name pos:line="1402" pos:column="25">pOp<pos:position pos:line="1402" pos:column="28"/></name><operator pos:line="1402" pos:column="28">-&gt;<pos:position pos:line="1402" pos:column="33"/></operator><name pos:line="1402" pos:column="30">p1<pos:position pos:line="1402" pos:column="32"/></name></name><operator pos:line="1402" pos:column="32">&gt;<pos:position pos:line="1402" pos:column="36"/></operator><literal type="number" pos:line="1402" pos:column="33">0<pos:position pos:line="1402" pos:column="34"/></literal></expr></argument> )<pos:position pos:line="1402" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="1402" pos:column="37"/></expr_stmt>
  <do pos:line="1403" pos:column="3">do<block pos:line="1403" pos:column="5">{
    <if pos:line="1404" pos:column="5">if<condition pos:line="1404" pos:column="7">( <expr><operator pos:line="1404" pos:column="9">(<pos:position pos:line="1404" pos:column="10"/></operator><name><name pos:line="1404" pos:column="10">pIn1<pos:position pos:line="1404" pos:column="14"/></name><operator pos:line="1404" pos:column="14">-&gt;<pos:position pos:line="1404" pos:column="19"/></operator><name pos:line="1404" pos:column="16">flags<pos:position pos:line="1404" pos:column="21"/></name></name> <operator pos:line="1404" pos:column="22">&amp;<pos:position pos:line="1404" pos:column="27"/></operator> <name pos:line="1404" pos:column="24">MEM_Null<pos:position pos:line="1404" pos:column="32"/></name><operator pos:line="1404" pos:column="32">)<pos:position pos:line="1404" pos:column="33"/></operator><operator pos:line="1404" pos:column="33">!=<pos:position pos:line="1404" pos:column="35"/></operator><literal type="number" pos:line="1404" pos:column="35">0<pos:position pos:line="1404" pos:column="36"/></literal></expr> )<pos:position pos:line="1404" pos:column="38"/></condition><then><block pos:line="1404" pos:column="38">{
      <expr_stmt><expr><name pos:line="1405" pos:column="7">pc<pos:position pos:line="1405" pos:column="9"/></name> <operator pos:line="1405" pos:column="10">=<pos:position pos:line="1405" pos:column="11"/></operator> <name><name pos:line="1405" pos:column="12">pOp<pos:position pos:line="1405" pos:column="15"/></name><operator pos:line="1405" pos:column="15">-&gt;<pos:position pos:line="1405" pos:column="20"/></operator><name pos:line="1405" pos:column="17">p2<pos:position pos:line="1405" pos:column="19"/></name></name> <operator pos:line="1405" pos:column="20">-<pos:position pos:line="1405" pos:column="21"/></operator> <literal type="number" pos:line="1405" pos:column="22">1<pos:position pos:line="1405" pos:column="23"/></literal></expr>;<pos:position pos:line="1405" pos:column="24"/></expr_stmt>
      <break pos:line="1406" pos:column="7">break;<pos:position pos:line="1406" pos:column="13"/></break>
    }<pos:position pos:line="1407" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="1408" pos:column="5">pIn1<pos:position pos:line="1408" pos:column="9"/></name><operator pos:line="1408" pos:column="9">++<pos:position pos:line="1408" pos:column="11"/></operator></expr>;<pos:position pos:line="1408" pos:column="12"/></expr_stmt>
  }<pos:position pos:line="1409" pos:column="4"/></block>while<condition pos:line="1409" pos:column="9">( <expr><operator pos:line="1409" pos:column="11">--<pos:position pos:line="1409" pos:column="13"/></operator><name pos:line="1409" pos:column="13">n<pos:position pos:line="1409" pos:column="14"/></name> <operator pos:line="1409" pos:column="15">&gt;<pos:position pos:line="1409" pos:column="19"/></operator> <literal type="number" pos:line="1409" pos:column="17">0<pos:position pos:line="1409" pos:column="18"/></literal></expr> )<pos:position pos:line="1409" pos:column="20"/></condition>;<pos:position pos:line="1409" pos:column="21"/></do>
  <break pos:line="1410" pos:column="3">break;<pos:position pos:line="1410" pos:column="9"/></break>
}<pos:position pos:line="1411" pos:column="2"/></block>

<comment type="block" pos:line="1413" pos:column="1">/* Opcode: NotNull P1 P2 * * *
**
** Jump to P2 if the value in register P1 is not NULL.  
*/</comment>
<case pos:line="1417" pos:column="1">case <expr><name pos:line="1417" pos:column="6">OP_NotNull<pos:position pos:line="1417" pos:column="16"/></name></expr>:<pos:position pos:line="1417" pos:column="17"/></case> <block pos:line="1417" pos:column="18">{            <comment type="block" pos:line="1417" pos:column="31">/* same as TK_NOTNULL, jump, in1 */</comment>
  <if pos:line="1418" pos:column="3">if<condition pos:line="1418" pos:column="5">( <expr><operator pos:line="1418" pos:column="7">(<pos:position pos:line="1418" pos:column="8"/></operator><name><name pos:line="1418" pos:column="8">pIn1<pos:position pos:line="1418" pos:column="12"/></name><operator pos:line="1418" pos:column="12">-&gt;<pos:position pos:line="1418" pos:column="17"/></operator><name pos:line="1418" pos:column="14">flags<pos:position pos:line="1418" pos:column="19"/></name></name> <operator pos:line="1418" pos:column="20">&amp;<pos:position pos:line="1418" pos:column="25"/></operator> <name pos:line="1418" pos:column="22">MEM_Null<pos:position pos:line="1418" pos:column="30"/></name><operator pos:line="1418" pos:column="30">)<pos:position pos:line="1418" pos:column="31"/></operator><operator pos:line="1418" pos:column="31">==<pos:position pos:line="1418" pos:column="33"/></operator><literal type="number" pos:line="1418" pos:column="33">0<pos:position pos:line="1418" pos:column="34"/></literal></expr> )<pos:position pos:line="1418" pos:column="36"/></condition><then><block pos:line="1418" pos:column="36">{
    <expr_stmt><expr><name pos:line="1419" pos:column="5">pc<pos:position pos:line="1419" pos:column="7"/></name> <operator pos:line="1419" pos:column="8">=<pos:position pos:line="1419" pos:column="9"/></operator> <name><name pos:line="1419" pos:column="10">pOp<pos:position pos:line="1419" pos:column="13"/></name><operator pos:line="1419" pos:column="13">-&gt;<pos:position pos:line="1419" pos:column="18"/></operator><name pos:line="1419" pos:column="15">p2<pos:position pos:line="1419" pos:column="17"/></name></name> <operator pos:line="1419" pos:column="18">-<pos:position pos:line="1419" pos:column="19"/></operator> <literal type="number" pos:line="1419" pos:column="20">1<pos:position pos:line="1419" pos:column="21"/></literal></expr>;<pos:position pos:line="1419" pos:column="22"/></expr_stmt>
  }<pos:position pos:line="1420" pos:column="4"/></block></then></if>
  <break pos:line="1421" pos:column="3">break;<pos:position pos:line="1421" pos:column="9"/></break>
}<pos:position pos:line="1422" pos:column="2"/></block>

<comment type="block" pos:line="1424" pos:column="1">/* Opcode: SetNumColumns * P2 * * *
**
** This opcode sets the number of columns for the cursor opened by the
** following instruction to P2.
**
** An OP_SetNumColumns is only useful if it occurs immediately before 
** one of the following opcodes:
**
**     OpenRead
**     OpenWrite
**     OpenPseudo
**
** If the OP_Column opcode is to be executed on a cursor, then
** this opcode must be present immediately before the opcode that
** opens the cursor.
*/</comment>
<cpp:if pos:line="1440" pos:column="1">#<cpp:directive pos:line="1440" pos:column="2">if<pos:position pos:line="1440" pos:column="4"/></cpp:directive> <expr><literal type="number" pos:line="1440" pos:column="5">0<pos:position pos:line="1440" pos:column="6"/></literal></expr></cpp:if>
case OP_SetNumColumns: {
  break;
}
<cpp:endif pos:line="1444" pos:column="1">#<cpp:directive pos:line="1444" pos:column="2">endif<pos:position pos:line="1444" pos:column="7"/></cpp:directive></cpp:endif>

<comment type="block" pos:line="1446" pos:column="1">/* Opcode: Column P1 P2 P3 P4 *
**
** Interpret the data that cursor P1 points to as a structure built using
** the MakeRecord instruction.  (See the MakeRecord opcode for additional
** information about the format of the data.)  Extract the P2-th column
** from this record.  If there are less that (P2+1) 
** values in the record, extract a NULL.
**
** The value extracted is stored in register P3.
**
** If the column contains fewer than P2 fields, then extract a NULL.  Or,
** if the P4 argument is a P4_MEM use the value of the P4 argument as
** the result.
*/</comment>
<case pos:line="1460" pos:column="1">case <expr><name pos:line="1460" pos:column="6">OP_Column<pos:position pos:line="1460" pos:column="15"/></name></expr>:<pos:position pos:line="1460" pos:column="16"/></case> <block pos:line="1460" pos:column="17">{
  <decl_stmt><decl><type><name pos:line="1461" pos:column="3">u32<pos:position pos:line="1461" pos:column="6"/></name></type> <name pos:line="1461" pos:column="7">payloadSize<pos:position pos:line="1461" pos:column="18"/></name></decl>;<pos:position pos:line="1461" pos:column="19"/></decl_stmt>   <comment type="block" pos:line="1461" pos:column="22">/* Number of bytes in the record */</comment>
  <decl_stmt><decl><type><name pos:line="1462" pos:column="3">i64<pos:position pos:line="1462" pos:column="6"/></name></type> <name pos:line="1462" pos:column="7">payloadSize64<pos:position pos:line="1462" pos:column="20"/></name></decl>;<pos:position pos:line="1462" pos:column="21"/></decl_stmt> <comment type="block" pos:line="1462" pos:column="22">/* Number of bytes in the record */</comment>
  <decl_stmt><decl><type><name pos:line="1463" pos:column="3">int<pos:position pos:line="1463" pos:column="6"/></name></type> <name pos:line="1463" pos:column="7">p1<pos:position pos:line="1463" pos:column="9"/></name></decl>;<pos:position pos:line="1463" pos:column="10"/></decl_stmt>            <comment type="block" pos:line="1463" pos:column="22">/* P1 value of the opcode */</comment>
  <decl_stmt><decl><type><name pos:line="1464" pos:column="3">int<pos:position pos:line="1464" pos:column="6"/></name></type> <name pos:line="1464" pos:column="7">p2<pos:position pos:line="1464" pos:column="9"/></name></decl>;<pos:position pos:line="1464" pos:column="10"/></decl_stmt>            <comment type="block" pos:line="1464" pos:column="22">/* column number to retrieve */</comment>
  <decl_stmt><decl><type><name pos:line="1465" pos:column="3">VdbeCursor<pos:position pos:line="1465" pos:column="13"/></name> <modifier pos:line="1465" pos:column="14">*<pos:position pos:line="1465" pos:column="15"/></modifier></type><name pos:line="1465" pos:column="15">pC<pos:position pos:line="1465" pos:column="17"/></name></decl>;<pos:position pos:line="1465" pos:column="18"/></decl_stmt>    <comment type="block" pos:line="1465" pos:column="22">/* The VDBE cursor */</comment>
  <decl_stmt><decl><type><name pos:line="1466" pos:column="3">char<pos:position pos:line="1466" pos:column="7"/></name> <modifier pos:line="1466" pos:column="8">*<pos:position pos:line="1466" pos:column="9"/></modifier></type><name pos:line="1466" pos:column="9">zRec<pos:position pos:line="1466" pos:column="13"/></name></decl>;<pos:position pos:line="1466" pos:column="14"/></decl_stmt>        <comment type="block" pos:line="1466" pos:column="22">/* Pointer to complete record-data */</comment>
  <decl_stmt><decl><type><name pos:line="1467" pos:column="3">BtCursor<pos:position pos:line="1467" pos:column="11"/></name> <modifier pos:line="1467" pos:column="12">*<pos:position pos:line="1467" pos:column="13"/></modifier></type><name pos:line="1467" pos:column="13">pCrsr<pos:position pos:line="1467" pos:column="18"/></name></decl>;<pos:position pos:line="1467" pos:column="19"/></decl_stmt>   <comment type="block" pos:line="1467" pos:column="22">/* The BTree cursor */</comment>
  <decl_stmt><decl><type><name pos:line="1468" pos:column="3">u32<pos:position pos:line="1468" pos:column="6"/></name> <modifier pos:line="1468" pos:column="7">*<pos:position pos:line="1468" pos:column="8"/></modifier></type><name pos:line="1468" pos:column="8">aType<pos:position pos:line="1468" pos:column="13"/></name></decl>;<pos:position pos:line="1468" pos:column="14"/></decl_stmt>        <comment type="block" pos:line="1468" pos:column="22">/* aType[i] holds the numeric type of the i-th column */</comment>
  <decl_stmt><decl><type><name pos:line="1469" pos:column="3">u32<pos:position pos:line="1469" pos:column="6"/></name> <modifier pos:line="1469" pos:column="7">*<pos:position pos:line="1469" pos:column="8"/></modifier></type><name pos:line="1469" pos:column="8">aOffset<pos:position pos:line="1469" pos:column="15"/></name></decl>;<pos:position pos:line="1469" pos:column="16"/></decl_stmt>      <comment type="block" pos:line="1469" pos:column="22">/* aOffset[i] is offset to start of data for i-th column */</comment>
  <decl_stmt><decl><type><name pos:line="1470" pos:column="3">int<pos:position pos:line="1470" pos:column="6"/></name></type> <name pos:line="1470" pos:column="7">nField<pos:position pos:line="1470" pos:column="13"/></name></decl>;<pos:position pos:line="1470" pos:column="14"/></decl_stmt>        <comment type="block" pos:line="1470" pos:column="22">/* number of fields in the record */</comment>
  <decl_stmt><decl><type><name pos:line="1471" pos:column="3">int<pos:position pos:line="1471" pos:column="6"/></name></type> <name pos:line="1471" pos:column="7">len<pos:position pos:line="1471" pos:column="10"/></name></decl>;<pos:position pos:line="1471" pos:column="11"/></decl_stmt>           <comment type="block" pos:line="1471" pos:column="22">/* The length of the serialized data for the column */</comment>
  <decl_stmt><decl><type><name pos:line="1472" pos:column="3">int<pos:position pos:line="1472" pos:column="6"/></name></type> <name pos:line="1472" pos:column="7">i<pos:position pos:line="1472" pos:column="8"/></name></decl>;<pos:position pos:line="1472" pos:column="9"/></decl_stmt>             <comment type="block" pos:line="1472" pos:column="22">/* Loop counter */</comment>
  <decl_stmt><decl><type><name pos:line="1473" pos:column="3">char<pos:position pos:line="1473" pos:column="7"/></name> <modifier pos:line="1473" pos:column="8">*<pos:position pos:line="1473" pos:column="9"/></modifier></type><name pos:line="1473" pos:column="9">zData<pos:position pos:line="1473" pos:column="14"/></name></decl>;<pos:position pos:line="1473" pos:column="15"/></decl_stmt>       <comment type="block" pos:line="1473" pos:column="22">/* Part of the record being decoded */</comment>
  <decl_stmt><decl><type><name pos:line="1474" pos:column="3">Mem<pos:position pos:line="1474" pos:column="6"/></name> <modifier pos:line="1474" pos:column="7">*<pos:position pos:line="1474" pos:column="8"/></modifier></type><name pos:line="1474" pos:column="8">pDest<pos:position pos:line="1474" pos:column="13"/></name></decl>;<pos:position pos:line="1474" pos:column="14"/></decl_stmt>        <comment type="block" pos:line="1474" pos:column="22">/* Where to write the extracted value */</comment>
  <decl_stmt><decl><type><name pos:line="1475" pos:column="3">Mem<pos:position pos:line="1475" pos:column="6"/></name></type> <name pos:line="1475" pos:column="7">sMem<pos:position pos:line="1475" pos:column="11"/></name></decl>;<pos:position pos:line="1475" pos:column="12"/></decl_stmt>          <comment type="block" pos:line="1475" pos:column="22">/* For storing the record being decoded */</comment>
  <decl_stmt><decl><type><name pos:line="1476" pos:column="3">u8<pos:position pos:line="1476" pos:column="5"/></name> <modifier pos:line="1476" pos:column="6">*<pos:position pos:line="1476" pos:column="7"/></modifier></type><name pos:line="1476" pos:column="7">zIdx<pos:position pos:line="1476" pos:column="11"/></name></decl>;<pos:position pos:line="1476" pos:column="12"/></decl_stmt>          <comment type="block" pos:line="1476" pos:column="22">/* Index into header */</comment>
  <decl_stmt><decl><type><name pos:line="1477" pos:column="3">u8<pos:position pos:line="1477" pos:column="5"/></name> <modifier pos:line="1477" pos:column="6">*<pos:position pos:line="1477" pos:column="7"/></modifier></type><name pos:line="1477" pos:column="7">zEndHdr<pos:position pos:line="1477" pos:column="14"/></name></decl>;<pos:position pos:line="1477" pos:column="15"/></decl_stmt>       <comment type="block" pos:line="1477" pos:column="22">/* Pointer to first byte after the header */</comment>
  <decl_stmt><decl><type><name pos:line="1478" pos:column="3">u32<pos:position pos:line="1478" pos:column="6"/></name></type> <name pos:line="1478" pos:column="7">offset<pos:position pos:line="1478" pos:column="13"/></name></decl>;<pos:position pos:line="1478" pos:column="14"/></decl_stmt>        <comment type="block" pos:line="1478" pos:column="22">/* Offset into the data */</comment>
  <decl_stmt><decl><type><name pos:line="1479" pos:column="3">u64<pos:position pos:line="1479" pos:column="6"/></name></type> <name pos:line="1479" pos:column="7">offset64<pos:position pos:line="1479" pos:column="15"/></name></decl>;<pos:position pos:line="1479" pos:column="16"/></decl_stmt>      <comment type="block" pos:line="1479" pos:column="22">/* 64-bit offset.  64 bits needed to catch overflow */</comment>
  <decl_stmt><decl><type><name pos:line="1480" pos:column="3">int<pos:position pos:line="1480" pos:column="6"/></name></type> <name pos:line="1480" pos:column="7">szHdr<pos:position pos:line="1480" pos:column="12"/></name></decl>;<pos:position pos:line="1480" pos:column="13"/></decl_stmt>         <comment type="block" pos:line="1480" pos:column="22">/* Size of the header size field at start of record */</comment>
  <decl_stmt><decl><type><name pos:line="1481" pos:column="3">int<pos:position pos:line="1481" pos:column="6"/></name></type> <name pos:line="1481" pos:column="7">avail<pos:position pos:line="1481" pos:column="12"/></name></decl>;<pos:position pos:line="1481" pos:column="13"/></decl_stmt>         <comment type="block" pos:line="1481" pos:column="22">/* Number of bytes of available data */</comment>


  <expr_stmt><expr><name pos:line="1484" pos:column="3">p1<pos:position pos:line="1484" pos:column="5"/></name> <operator pos:line="1484" pos:column="6">=<pos:position pos:line="1484" pos:column="7"/></operator> <name><name pos:line="1484" pos:column="8">pOp<pos:position pos:line="1484" pos:column="11"/></name><operator pos:line="1484" pos:column="11">-&gt;<pos:position pos:line="1484" pos:column="16"/></operator><name pos:line="1484" pos:column="13">p1<pos:position pos:line="1484" pos:column="15"/></name></name></expr>;<pos:position pos:line="1484" pos:column="16"/></expr_stmt>
  <expr_stmt><expr><name pos:line="1485" pos:column="3">p2<pos:position pos:line="1485" pos:column="5"/></name> <operator pos:line="1485" pos:column="6">=<pos:position pos:line="1485" pos:column="7"/></operator> <name><name pos:line="1485" pos:column="8">pOp<pos:position pos:line="1485" pos:column="11"/></name><operator pos:line="1485" pos:column="11">-&gt;<pos:position pos:line="1485" pos:column="16"/></operator><name pos:line="1485" pos:column="13">p2<pos:position pos:line="1485" pos:column="15"/></name></name></expr>;<pos:position pos:line="1485" pos:column="16"/></expr_stmt>
  <expr_stmt><expr><name pos:line="1486" pos:column="3">pC<pos:position pos:line="1486" pos:column="5"/></name> <operator pos:line="1486" pos:column="6">=<pos:position pos:line="1486" pos:column="7"/></operator> <literal type="number" pos:line="1486" pos:column="8">0<pos:position pos:line="1486" pos:column="9"/></literal></expr>;<pos:position pos:line="1486" pos:column="10"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="1487" pos:column="3">memset<pos:position pos:line="1487" pos:column="9"/></name><argument_list pos:line="1487" pos:column="9">(<argument><expr><operator pos:line="1487" pos:column="10">&amp;<pos:position pos:line="1487" pos:column="15"/></operator><name pos:line="1487" pos:column="11">sMem<pos:position pos:line="1487" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="1487" pos:column="17">0<pos:position pos:line="1487" pos:column="18"/></literal></expr></argument>, <argument><expr><sizeof pos:line="1487" pos:column="20">sizeof<argument_list pos:line="1487" pos:column="26">(<argument><expr><name pos:line="1487" pos:column="27">sMem<pos:position pos:line="1487" pos:column="31"/></name></expr></argument>)<pos:position pos:line="1487" pos:column="32"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="1487" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="1487" pos:column="34"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="1488" pos:column="3">assert<pos:position pos:line="1488" pos:column="9"/></name><argument_list pos:line="1488" pos:column="9">( <argument><expr><name pos:line="1488" pos:column="11">p1<pos:position pos:line="1488" pos:column="13"/></name><operator pos:line="1488" pos:column="13">&lt;<pos:position pos:line="1488" pos:column="17"/></operator><name><name pos:line="1488" pos:column="14">p<pos:position pos:line="1488" pos:column="15"/></name><operator pos:line="1488" pos:column="15">-&gt;<pos:position pos:line="1488" pos:column="20"/></operator><name pos:line="1488" pos:column="17">nCursor<pos:position pos:line="1488" pos:column="24"/></name></name></expr></argument> )<pos:position pos:line="1488" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="1488" pos:column="27"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="1489" pos:column="3">assert<pos:position pos:line="1489" pos:column="9"/></name><argument_list pos:line="1489" pos:column="9">( <argument><expr><name><name pos:line="1489" pos:column="11">pOp<pos:position pos:line="1489" pos:column="14"/></name><operator pos:line="1489" pos:column="14">-&gt;<pos:position pos:line="1489" pos:column="19"/></operator><name pos:line="1489" pos:column="16">p3<pos:position pos:line="1489" pos:column="18"/></name></name><operator pos:line="1489" pos:column="18">&gt;<pos:position pos:line="1489" pos:column="22"/></operator><literal type="number" pos:line="1489" pos:column="19">0<pos:position pos:line="1489" pos:column="20"/></literal> <operator pos:line="1489" pos:column="21">&amp;&amp;<pos:position pos:line="1489" pos:column="31"/></operator> <name><name pos:line="1489" pos:column="24">pOp<pos:position pos:line="1489" pos:column="27"/></name><operator pos:line="1489" pos:column="27">-&gt;<pos:position pos:line="1489" pos:column="32"/></operator><name pos:line="1489" pos:column="29">p3<pos:position pos:line="1489" pos:column="31"/></name></name><operator pos:line="1489" pos:column="31">&lt;=<pos:position pos:line="1489" pos:column="36"/></operator><name><name pos:line="1489" pos:column="33">p<pos:position pos:line="1489" pos:column="34"/></name><operator pos:line="1489" pos:column="34">-&gt;<pos:position pos:line="1489" pos:column="39"/></operator><name pos:line="1489" pos:column="36">nMem<pos:position pos:line="1489" pos:column="40"/></name></name></expr></argument> )<pos:position pos:line="1489" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="1489" pos:column="43"/></expr_stmt>
  <expr_stmt><expr><name pos:line="1490" pos:column="3">pDest<pos:position pos:line="1490" pos:column="8"/></name> <operator pos:line="1490" pos:column="9">=<pos:position pos:line="1490" pos:column="10"/></operator> <operator pos:line="1490" pos:column="11">&amp;<pos:position pos:line="1490" pos:column="16"/></operator><name><name pos:line="1490" pos:column="12">p<pos:position pos:line="1490" pos:column="13"/></name><operator pos:line="1490" pos:column="13">-&gt;<pos:position pos:line="1490" pos:column="18"/></operator><name pos:line="1490" pos:column="15">aMem<pos:position pos:line="1490" pos:column="19"/></name><index pos:line="1490" pos:column="19">[<expr><name><name pos:line="1490" pos:column="20">pOp<pos:position pos:line="1490" pos:column="23"/></name><operator pos:line="1490" pos:column="23">-&gt;<pos:position pos:line="1490" pos:column="28"/></operator><name pos:line="1490" pos:column="25">p3<pos:position pos:line="1490" pos:column="27"/></name></name></expr>]<pos:position pos:line="1490" pos:column="28"/></index></name></expr>;<pos:position pos:line="1490" pos:column="29"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="1491" pos:column="3">MemSetTypeFlag<pos:position pos:line="1491" pos:column="17"/></name><argument_list pos:line="1491" pos:column="17">(<argument><expr><name pos:line="1491" pos:column="18">pDest<pos:position pos:line="1491" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="1491" pos:column="25">MEM_Null<pos:position pos:line="1491" pos:column="33"/></name></expr></argument>)<pos:position pos:line="1491" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="1491" pos:column="35"/></expr_stmt>

  <comment type="block" pos:line="1493" pos:column="3">/* This block sets the variable payloadSize to be the total number of
  ** bytes in the record.
  **
  ** zRec is set to be the complete text of the record if it is available.
  ** The complete record text is always available for pseudo-tables
  ** If the record is stored in a cursor, the complete record text
  ** might be available in the  pC-&gt;aRow cache.  Or it might not be.
  ** If the data is unavailable,  zRec is set to NULL.
  **
  ** We also compute the number of columns in the record.  For cursors,
  ** the number of columns is stored in the VdbeCursor.nField element.
  */</comment>
  <expr_stmt><expr><name pos:line="1505" pos:column="3">pC<pos:position pos:line="1505" pos:column="5"/></name> <operator pos:line="1505" pos:column="6">=<pos:position pos:line="1505" pos:column="7"/></operator> <name><name pos:line="1505" pos:column="8">p<pos:position pos:line="1505" pos:column="9"/></name><operator pos:line="1505" pos:column="9">-&gt;<pos:position pos:line="1505" pos:column="14"/></operator><name pos:line="1505" pos:column="11">apCsr<pos:position pos:line="1505" pos:column="16"/></name><index pos:line="1505" pos:column="16">[<expr><name pos:line="1505" pos:column="17">p1<pos:position pos:line="1505" pos:column="19"/></name></expr>]<pos:position pos:line="1505" pos:column="20"/></index></name></expr>;<pos:position pos:line="1505" pos:column="21"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="1506" pos:column="3">assert<pos:position pos:line="1506" pos:column="9"/></name><argument_list pos:line="1506" pos:column="9">( <argument><expr><name pos:line="1506" pos:column="11">pC<pos:position pos:line="1506" pos:column="13"/></name><operator pos:line="1506" pos:column="13">!=<pos:position pos:line="1506" pos:column="15"/></operator><literal type="number" pos:line="1506" pos:column="15">0<pos:position pos:line="1506" pos:column="16"/></literal></expr></argument> )<pos:position pos:line="1506" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="1506" pos:column="19"/></expr_stmt>
<cpp:ifndef pos:line="1507" pos:column="1">#<cpp:directive pos:line="1507" pos:column="2">ifndef<pos:position pos:line="1507" pos:column="8"/></cpp:directive> <name pos:line="1507" pos:column="9">SQLITE_OMIT_VIRTUALTABLE<pos:position pos:line="1507" pos:column="33"/></name></cpp:ifndef>
  <expr_stmt><expr><call><name pos:line="1508" pos:column="3">assert<pos:position pos:line="1508" pos:column="9"/></name><argument_list pos:line="1508" pos:column="9">( <argument><expr><name><name pos:line="1508" pos:column="11">pC<pos:position pos:line="1508" pos:column="13"/></name><operator pos:line="1508" pos:column="13">-&gt;<pos:position pos:line="1508" pos:column="18"/></operator><name pos:line="1508" pos:column="15">pVtabCursor<pos:position pos:line="1508" pos:column="26"/></name></name><operator pos:line="1508" pos:column="26">==<pos:position pos:line="1508" pos:column="28"/></operator><literal type="number" pos:line="1508" pos:column="28">0<pos:position pos:line="1508" pos:column="29"/></literal></expr></argument> )<pos:position pos:line="1508" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="1508" pos:column="32"/></expr_stmt>
<cpp:endif pos:line="1509" pos:column="1">#<cpp:directive pos:line="1509" pos:column="2">endif<pos:position pos:line="1509" pos:column="7"/></cpp:directive></cpp:endif>
  <if pos:line="1510" pos:column="3">if<condition pos:line="1510" pos:column="5">( <expr><name><name pos:line="1510" pos:column="7">pC<pos:position pos:line="1510" pos:column="9"/></name><operator pos:line="1510" pos:column="9">-&gt;<pos:position pos:line="1510" pos:column="14"/></operator><name pos:line="1510" pos:column="11">pCursor<pos:position pos:line="1510" pos:column="18"/></name></name><operator pos:line="1510" pos:column="18">!=<pos:position pos:line="1510" pos:column="20"/></operator><literal type="number" pos:line="1510" pos:column="20">0<pos:position pos:line="1510" pos:column="21"/></literal></expr> )<pos:position pos:line="1510" pos:column="23"/></condition><then><block pos:line="1510" pos:column="23">{
    <comment type="block" pos:line="1511" pos:column="5">/* The record is stored in a B-Tree */</comment>
    <expr_stmt><expr><name pos:line="1512" pos:column="5">rc<pos:position pos:line="1512" pos:column="7"/></name> <operator pos:line="1512" pos:column="8">=<pos:position pos:line="1512" pos:column="9"/></operator> <call><name pos:line="1512" pos:column="10">sqlite3VdbeCursorMoveto<pos:position pos:line="1512" pos:column="33"/></name><argument_list pos:line="1512" pos:column="33">(<argument><expr><name pos:line="1512" pos:column="34">pC<pos:position pos:line="1512" pos:column="36"/></name></expr></argument>)<pos:position pos:line="1512" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="1512" pos:column="38"/></expr_stmt>
    <if pos:line="1513" pos:column="5">if<condition pos:line="1513" pos:column="7">( <expr><name pos:line="1513" pos:column="9">rc<pos:position pos:line="1513" pos:column="11"/></name></expr> )<pos:position pos:line="1513" pos:column="13"/></condition><then pos:line="1513" pos:column="13"> <block type="pseudo"><goto pos:line="1513" pos:column="14">goto <name pos:line="1513" pos:column="19">abort_due_to_error<pos:position pos:line="1513" pos:column="37"/></name>;<pos:position pos:line="1513" pos:column="38"/></goto></block></then></if>
    <expr_stmt><expr><name pos:line="1514" pos:column="5">zRec<pos:position pos:line="1514" pos:column="9"/></name> <operator pos:line="1514" pos:column="10">=<pos:position pos:line="1514" pos:column="11"/></operator> <literal type="number" pos:line="1514" pos:column="12">0<pos:position pos:line="1514" pos:column="13"/></literal></expr>;<pos:position pos:line="1514" pos:column="14"/></expr_stmt>
    <expr_stmt><expr><name pos:line="1515" pos:column="5">pCrsr<pos:position pos:line="1515" pos:column="10"/></name> <operator pos:line="1515" pos:column="11">=<pos:position pos:line="1515" pos:column="12"/></operator> <name><name pos:line="1515" pos:column="13">pC<pos:position pos:line="1515" pos:column="15"/></name><operator pos:line="1515" pos:column="15">-&gt;<pos:position pos:line="1515" pos:column="20"/></operator><name pos:line="1515" pos:column="17">pCursor<pos:position pos:line="1515" pos:column="24"/></name></name></expr>;<pos:position pos:line="1515" pos:column="25"/></expr_stmt>
    <if pos:line="1516" pos:column="5">if<condition pos:line="1516" pos:column="7">( <expr><name><name pos:line="1516" pos:column="9">pC<pos:position pos:line="1516" pos:column="11"/></name><operator pos:line="1516" pos:column="11">-&gt;<pos:position pos:line="1516" pos:column="16"/></operator><name pos:line="1516" pos:column="13">nullRow<pos:position pos:line="1516" pos:column="20"/></name></name></expr> )<pos:position pos:line="1516" pos:column="22"/></condition><then><block pos:line="1516" pos:column="22">{
      <expr_stmt><expr><name pos:line="1517" pos:column="7">payloadSize<pos:position pos:line="1517" pos:column="18"/></name> <operator pos:line="1517" pos:column="19">=<pos:position pos:line="1517" pos:column="20"/></operator> <literal type="number" pos:line="1517" pos:column="21">0<pos:position pos:line="1517" pos:column="22"/></literal></expr>;<pos:position pos:line="1517" pos:column="23"/></expr_stmt>
    }<pos:position pos:line="1518" pos:column="6"/></block></then><elseif pos:line="1518" pos:column="6">else <if pos:line="1518" pos:column="11">if<condition pos:line="1518" pos:column="13">( <expr><name><name pos:line="1518" pos:column="15">pC<pos:position pos:line="1518" pos:column="17"/></name><operator pos:line="1518" pos:column="17">-&gt;<pos:position pos:line="1518" pos:column="22"/></operator><name pos:line="1518" pos:column="19">cacheStatus<pos:position pos:line="1518" pos:column="30"/></name></name><operator pos:line="1518" pos:column="30">==<pos:position pos:line="1518" pos:column="32"/></operator><name><name pos:line="1518" pos:column="32">p<pos:position pos:line="1518" pos:column="33"/></name><operator pos:line="1518" pos:column="33">-&gt;<pos:position pos:line="1518" pos:column="38"/></operator><name pos:line="1518" pos:column="35">cacheCtr<pos:position pos:line="1518" pos:column="43"/></name></name></expr> )<pos:position pos:line="1518" pos:column="45"/></condition><then><block pos:line="1518" pos:column="45">{
      <expr_stmt><expr><name pos:line="1519" pos:column="7">payloadSize<pos:position pos:line="1519" pos:column="18"/></name> <operator pos:line="1519" pos:column="19">=<pos:position pos:line="1519" pos:column="20"/></operator> <name><name pos:line="1519" pos:column="21">pC<pos:position pos:line="1519" pos:column="23"/></name><operator pos:line="1519" pos:column="23">-&gt;<pos:position pos:line="1519" pos:column="28"/></operator><name pos:line="1519" pos:column="25">payloadSize<pos:position pos:line="1519" pos:column="36"/></name></name></expr>;<pos:position pos:line="1519" pos:column="37"/></expr_stmt>
      <expr_stmt><expr><name pos:line="1520" pos:column="7">zRec<pos:position pos:line="1520" pos:column="11"/></name> <operator pos:line="1520" pos:column="12">=<pos:position pos:line="1520" pos:column="13"/></operator> <operator pos:line="1520" pos:column="14">(<pos:position pos:line="1520" pos:column="15"/></operator><name pos:line="1520" pos:column="15">char<pos:position pos:line="1520" pos:column="19"/></name><operator pos:line="1520" pos:column="19">*<pos:position pos:line="1520" pos:column="20"/></operator><operator pos:line="1520" pos:column="20">)<pos:position pos:line="1520" pos:column="21"/></operator><name><name pos:line="1520" pos:column="21">pC<pos:position pos:line="1520" pos:column="23"/></name><operator pos:line="1520" pos:column="23">-&gt;<pos:position pos:line="1520" pos:column="28"/></operator><name pos:line="1520" pos:column="25">aRow<pos:position pos:line="1520" pos:column="29"/></name></name></expr>;<pos:position pos:line="1520" pos:column="30"/></expr_stmt>
    }<pos:position pos:line="1521" pos:column="6"/></block></then></if></elseif><elseif pos:line="1521" pos:column="6">else <if pos:line="1521" pos:column="11">if<condition pos:line="1521" pos:column="13">( <expr><name><name pos:line="1521" pos:column="15">pC<pos:position pos:line="1521" pos:column="17"/></name><operator pos:line="1521" pos:column="17">-&gt;<pos:position pos:line="1521" pos:column="22"/></operator><name pos:line="1521" pos:column="19">isIndex<pos:position pos:line="1521" pos:column="26"/></name></name></expr> )<pos:position pos:line="1521" pos:column="28"/></condition><then><block pos:line="1521" pos:column="28">{
      <expr_stmt><expr><call><name pos:line="1522" pos:column="7">sqlite3BtreeKeySize<pos:position pos:line="1522" pos:column="26"/></name><argument_list pos:line="1522" pos:column="26">(<argument><expr><name pos:line="1522" pos:column="27">pCrsr<pos:position pos:line="1522" pos:column="32"/></name></expr></argument>, <argument><expr><operator pos:line="1522" pos:column="34">&amp;<pos:position pos:line="1522" pos:column="39"/></operator><name pos:line="1522" pos:column="35">payloadSize64<pos:position pos:line="1522" pos:column="48"/></name></expr></argument>)<pos:position pos:line="1522" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="1522" pos:column="50"/></expr_stmt>
      <if pos:line="1523" pos:column="7">if<condition pos:line="1523" pos:column="9">( <expr><operator pos:line="1523" pos:column="11">(<pos:position pos:line="1523" pos:column="12"/></operator><name pos:line="1523" pos:column="12">payloadSize64<pos:position pos:line="1523" pos:column="25"/></name> <operator pos:line="1523" pos:column="26">&amp;<pos:position pos:line="1523" pos:column="31"/></operator> <name pos:line="1523" pos:column="28">SQLITE_MAX_U32<pos:position pos:line="1523" pos:column="42"/></name><operator pos:line="1523" pos:column="42">)<pos:position pos:line="1523" pos:column="43"/></operator><operator pos:line="1523" pos:column="43">!=<pos:position pos:line="1523" pos:column="45"/></operator><operator pos:line="1523" pos:column="45">(<pos:position pos:line="1523" pos:column="46"/></operator><name pos:line="1523" pos:column="46">u64<pos:position pos:line="1523" pos:column="49"/></name><operator pos:line="1523" pos:column="49">)<pos:position pos:line="1523" pos:column="50"/></operator><name pos:line="1523" pos:column="50">payloadSize64<pos:position pos:line="1523" pos:column="63"/></name></expr> )<pos:position pos:line="1523" pos:column="65"/></condition><then><block pos:line="1523" pos:column="65">{
        <expr_stmt><expr><name pos:line="1524" pos:column="9">rc<pos:position pos:line="1524" pos:column="11"/></name> <operator pos:line="1524" pos:column="12">=<pos:position pos:line="1524" pos:column="13"/></operator> <name pos:line="1524" pos:column="14">SQLITE_CORRUPT_BKPT<pos:position pos:line="1524" pos:column="33"/></name></expr>;<pos:position pos:line="1524" pos:column="34"/></expr_stmt>
        <goto pos:line="1525" pos:column="9">goto <name pos:line="1525" pos:column="14">abort_due_to_error<pos:position pos:line="1525" pos:column="32"/></name>;<pos:position pos:line="1525" pos:column="33"/></goto>
      }<pos:position pos:line="1526" pos:column="8"/></block></then></if>
      <expr_stmt><expr><name pos:line="1527" pos:column="7">payloadSize<pos:position pos:line="1527" pos:column="18"/></name> <operator pos:line="1527" pos:column="19">=<pos:position pos:line="1527" pos:column="20"/></operator> <operator pos:line="1527" pos:column="21">(<pos:position pos:line="1527" pos:column="22"/></operator><name pos:line="1527" pos:column="22">u32<pos:position pos:line="1527" pos:column="25"/></name><operator pos:line="1527" pos:column="25">)<pos:position pos:line="1527" pos:column="26"/></operator><name pos:line="1527" pos:column="26">payloadSize64<pos:position pos:line="1527" pos:column="39"/></name></expr>;<pos:position pos:line="1527" pos:column="40"/></expr_stmt>
    }<pos:position pos:line="1528" pos:column="6"/></block></then></if></elseif><else pos:line="1528" pos:column="6">else<block pos:line="1528" pos:column="10">{
      <expr_stmt><expr><call><name pos:line="1529" pos:column="7">sqlite3BtreeDataSize<pos:position pos:line="1529" pos:column="27"/></name><argument_list pos:line="1529" pos:column="27">(<argument><expr><name pos:line="1529" pos:column="28">pCrsr<pos:position pos:line="1529" pos:column="33"/></name></expr></argument>, <argument><expr><operator pos:line="1529" pos:column="35">&amp;<pos:position pos:line="1529" pos:column="40"/></operator><name pos:line="1529" pos:column="36">payloadSize<pos:position pos:line="1529" pos:column="47"/></name></expr></argument>)<pos:position pos:line="1529" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="1529" pos:column="49"/></expr_stmt>
    }<pos:position pos:line="1530" pos:column="6"/></block></else></if>
    <expr_stmt><expr><name pos:line="1531" pos:column="5">nField<pos:position pos:line="1531" pos:column="11"/></name> <operator pos:line="1531" pos:column="12">=<pos:position pos:line="1531" pos:column="13"/></operator> <name><name pos:line="1531" pos:column="14">pC<pos:position pos:line="1531" pos:column="16"/></name><operator pos:line="1531" pos:column="16">-&gt;<pos:position pos:line="1531" pos:column="21"/></operator><name pos:line="1531" pos:column="18">nField<pos:position pos:line="1531" pos:column="24"/></name></name></expr>;<pos:position pos:line="1531" pos:column="25"/></expr_stmt>
  }<pos:position pos:line="1532" pos:column="4"/></block></then><else pos:line="1532" pos:column="4">else<block pos:line="1532" pos:column="8">{
    <expr_stmt><expr><call><name pos:line="1533" pos:column="5">assert<pos:position pos:line="1533" pos:column="11"/></name><argument_list pos:line="1533" pos:column="11">( <argument><expr><name><name pos:line="1533" pos:column="13">pC<pos:position pos:line="1533" pos:column="15"/></name><operator pos:line="1533" pos:column="15">-&gt;<pos:position pos:line="1533" pos:column="20"/></operator><name pos:line="1533" pos:column="17">pseudoTable<pos:position pos:line="1533" pos:column="28"/></name></name></expr></argument> )<pos:position pos:line="1533" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="1533" pos:column="31"/></expr_stmt>
    <comment type="block" pos:line="1534" pos:column="5">/* The record is the sole entry of a pseudo-table */</comment>
    <expr_stmt><expr><name pos:line="1535" pos:column="5">payloadSize<pos:position pos:line="1535" pos:column="16"/></name> <operator pos:line="1535" pos:column="17">=<pos:position pos:line="1535" pos:column="18"/></operator> <name><name pos:line="1535" pos:column="19">pC<pos:position pos:line="1535" pos:column="21"/></name><operator pos:line="1535" pos:column="21">-&gt;<pos:position pos:line="1535" pos:column="26"/></operator><name pos:line="1535" pos:column="23">nData<pos:position pos:line="1535" pos:column="28"/></name></name></expr>;<pos:position pos:line="1535" pos:column="29"/></expr_stmt>
    <expr_stmt><expr><name pos:line="1536" pos:column="5">zRec<pos:position pos:line="1536" pos:column="9"/></name> <operator pos:line="1536" pos:column="10">=<pos:position pos:line="1536" pos:column="11"/></operator> <name><name pos:line="1536" pos:column="12">pC<pos:position pos:line="1536" pos:column="14"/></name><operator pos:line="1536" pos:column="14">-&gt;<pos:position pos:line="1536" pos:column="19"/></operator><name pos:line="1536" pos:column="16">pData<pos:position pos:line="1536" pos:column="21"/></name></name></expr>;<pos:position pos:line="1536" pos:column="22"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="1537" pos:column="5">pC<pos:position pos:line="1537" pos:column="7"/></name><operator pos:line="1537" pos:column="7">-&gt;<pos:position pos:line="1537" pos:column="12"/></operator><name pos:line="1537" pos:column="9">cacheStatus<pos:position pos:line="1537" pos:column="20"/></name></name> <operator pos:line="1537" pos:column="21">=<pos:position pos:line="1537" pos:column="22"/></operator> <name pos:line="1537" pos:column="23">CACHE_STALE<pos:position pos:line="1537" pos:column="34"/></name></expr>;<pos:position pos:line="1537" pos:column="35"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="1538" pos:column="5">assert<pos:position pos:line="1538" pos:column="11"/></name><argument_list pos:line="1538" pos:column="11">( <argument><expr><name pos:line="1538" pos:column="13">payloadSize<pos:position pos:line="1538" pos:column="24"/></name><operator pos:line="1538" pos:column="24">==<pos:position pos:line="1538" pos:column="26"/></operator><literal type="number" pos:line="1538" pos:column="26">0<pos:position pos:line="1538" pos:column="27"/></literal> <operator pos:line="1538" pos:column="28">||<pos:position pos:line="1538" pos:column="30"/></operator> <name pos:line="1538" pos:column="31">zRec<pos:position pos:line="1538" pos:column="35"/></name><operator pos:line="1538" pos:column="35">!=<pos:position pos:line="1538" pos:column="37"/></operator><literal type="number" pos:line="1538" pos:column="37">0<pos:position pos:line="1538" pos:column="38"/></literal></expr></argument> )<pos:position pos:line="1538" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="1538" pos:column="41"/></expr_stmt>
    <expr_stmt><expr><name pos:line="1539" pos:column="5">nField<pos:position pos:line="1539" pos:column="11"/></name> <operator pos:line="1539" pos:column="12">=<pos:position pos:line="1539" pos:column="13"/></operator> <name><name pos:line="1539" pos:column="14">pC<pos:position pos:line="1539" pos:column="16"/></name><operator pos:line="1539" pos:column="16">-&gt;<pos:position pos:line="1539" pos:column="21"/></operator><name pos:line="1539" pos:column="18">nField<pos:position pos:line="1539" pos:column="24"/></name></name></expr>;<pos:position pos:line="1539" pos:column="25"/></expr_stmt>
    <expr_stmt><expr><name pos:line="1540" pos:column="5">pCrsr<pos:position pos:line="1540" pos:column="10"/></name> <operator pos:line="1540" pos:column="11">=<pos:position pos:line="1540" pos:column="12"/></operator> <literal type="number" pos:line="1540" pos:column="13">0<pos:position pos:line="1540" pos:column="14"/></literal></expr>;<pos:position pos:line="1540" pos:column="15"/></expr_stmt>
  }<pos:position pos:line="1541" pos:column="4"/></block></else></if>

  <comment type="block" pos:line="1543" pos:column="3">/* If payloadSize is 0, then just store a NULL */</comment>
  <if pos:line="1544" pos:column="3">if<condition pos:line="1544" pos:column="5">( <expr><name pos:line="1544" pos:column="7">payloadSize<pos:position pos:line="1544" pos:column="18"/></name><operator pos:line="1544" pos:column="18">==<pos:position pos:line="1544" pos:column="20"/></operator><literal type="number" pos:line="1544" pos:column="20">0<pos:position pos:line="1544" pos:column="21"/></literal></expr> )<pos:position pos:line="1544" pos:column="23"/></condition><then><block pos:line="1544" pos:column="23">{
    <expr_stmt><expr><call><name pos:line="1545" pos:column="5">assert<pos:position pos:line="1545" pos:column="11"/></name><argument_list pos:line="1545" pos:column="11">( <argument><expr><name><name pos:line="1545" pos:column="13">pDest<pos:position pos:line="1545" pos:column="18"/></name><operator pos:line="1545" pos:column="18">-&gt;<pos:position pos:line="1545" pos:column="23"/></operator><name pos:line="1545" pos:column="20">flags<pos:position pos:line="1545" pos:column="25"/></name></name><operator pos:line="1545" pos:column="25">&amp;<pos:position pos:line="1545" pos:column="30"/></operator><name pos:line="1545" pos:column="26">MEM_Null<pos:position pos:line="1545" pos:column="34"/></name></expr></argument> )<pos:position pos:line="1545" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="1545" pos:column="37"/></expr_stmt>
    <goto pos:line="1546" pos:column="5">goto <name pos:line="1546" pos:column="10">op_column_out<pos:position pos:line="1546" pos:column="23"/></name>;<pos:position pos:line="1546" pos:column="24"/></goto>
  }<pos:position pos:line="1547" pos:column="4"/></block></then></if>
  <expr_stmt><expr><call><name pos:line="1548" pos:column="3">assert<pos:position pos:line="1548" pos:column="9"/></name><argument_list pos:line="1548" pos:column="9">( <argument><expr><name><name pos:line="1548" pos:column="11">db<pos:position pos:line="1548" pos:column="13"/></name><operator pos:line="1548" pos:column="13">-&gt;<pos:position pos:line="1548" pos:column="18"/></operator><name pos:line="1548" pos:column="15">aLimit<pos:position pos:line="1548" pos:column="21"/></name><index pos:line="1548" pos:column="21">[<expr><name pos:line="1548" pos:column="22">SQLITE_LIMIT_LENGTH<pos:position pos:line="1548" pos:column="41"/></name></expr>]<pos:position pos:line="1548" pos:column="42"/></index></name><operator pos:line="1548" pos:column="42">&gt;=<pos:position pos:line="1548" pos:column="47"/></operator><literal type="number" pos:line="1548" pos:column="44">0<pos:position pos:line="1548" pos:column="45"/></literal></expr></argument> )<pos:position pos:line="1548" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="1548" pos:column="48"/></expr_stmt>
  <if pos:line="1549" pos:column="3">if<condition pos:line="1549" pos:column="5">( <expr><name pos:line="1549" pos:column="7">payloadSize<pos:position pos:line="1549" pos:column="18"/></name> <operator pos:line="1549" pos:column="19">&gt;<pos:position pos:line="1549" pos:column="23"/></operator> <operator pos:line="1549" pos:column="21">(<pos:position pos:line="1549" pos:column="22"/></operator><name pos:line="1549" pos:column="22">u32<pos:position pos:line="1549" pos:column="25"/></name><operator pos:line="1549" pos:column="25">)<pos:position pos:line="1549" pos:column="26"/></operator><name><name pos:line="1549" pos:column="26">db<pos:position pos:line="1549" pos:column="28"/></name><operator pos:line="1549" pos:column="28">-&gt;<pos:position pos:line="1549" pos:column="33"/></operator><name pos:line="1549" pos:column="30">aLimit<pos:position pos:line="1549" pos:column="36"/></name><index pos:line="1549" pos:column="36">[<expr><name pos:line="1549" pos:column="37">SQLITE_LIMIT_LENGTH<pos:position pos:line="1549" pos:column="56"/></name></expr>]<pos:position pos:line="1549" pos:column="57"/></index></name></expr> )<pos:position pos:line="1549" pos:column="59"/></condition><then><block pos:line="1549" pos:column="59">{
    <goto pos:line="1550" pos:column="5">goto <name pos:line="1550" pos:column="10">too_big<pos:position pos:line="1550" pos:column="17"/></name>;<pos:position pos:line="1550" pos:column="18"/></goto>
  }<pos:position pos:line="1551" pos:column="4"/></block></then></if>

  <expr_stmt><expr><call><name pos:line="1553" pos:column="3">assert<pos:position pos:line="1553" pos:column="9"/></name><argument_list pos:line="1553" pos:column="9">( <argument><expr><name pos:line="1553" pos:column="11">p2<pos:position pos:line="1553" pos:column="13"/></name><operator pos:line="1553" pos:column="13">&lt;<pos:position pos:line="1553" pos:column="17"/></operator><name pos:line="1553" pos:column="14">nField<pos:position pos:line="1553" pos:column="20"/></name></expr></argument> )<pos:position pos:line="1553" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="1553" pos:column="23"/></expr_stmt>

  <comment type="block" pos:line="1555" pos:column="3">/* Read and parse the table header.  Store the results of the parse
  ** into the record header cache fields of the cursor.
  */</comment>
  <expr_stmt><expr><name pos:line="1558" pos:column="3">aType<pos:position pos:line="1558" pos:column="8"/></name> <operator pos:line="1558" pos:column="9">=<pos:position pos:line="1558" pos:column="10"/></operator> <name><name pos:line="1558" pos:column="11">pC<pos:position pos:line="1558" pos:column="13"/></name><operator pos:line="1558" pos:column="13">-&gt;<pos:position pos:line="1558" pos:column="18"/></operator><name pos:line="1558" pos:column="15">aType<pos:position pos:line="1558" pos:column="20"/></name></name></expr>;<pos:position pos:line="1558" pos:column="21"/></expr_stmt>
  <if pos:line="1559" pos:column="3">if<condition pos:line="1559" pos:column="5">( <expr><name><name pos:line="1559" pos:column="7">pC<pos:position pos:line="1559" pos:column="9"/></name><operator pos:line="1559" pos:column="9">-&gt;<pos:position pos:line="1559" pos:column="14"/></operator><name pos:line="1559" pos:column="11">cacheStatus<pos:position pos:line="1559" pos:column="22"/></name></name><operator pos:line="1559" pos:column="22">==<pos:position pos:line="1559" pos:column="24"/></operator><name><name pos:line="1559" pos:column="24">p<pos:position pos:line="1559" pos:column="25"/></name><operator pos:line="1559" pos:column="25">-&gt;<pos:position pos:line="1559" pos:column="30"/></operator><name pos:line="1559" pos:column="27">cacheCtr<pos:position pos:line="1559" pos:column="35"/></name></name></expr> )<pos:position pos:line="1559" pos:column="37"/></condition><then><block pos:line="1559" pos:column="37">{
    <expr_stmt><expr><name pos:line="1560" pos:column="5">aOffset<pos:position pos:line="1560" pos:column="12"/></name> <operator pos:line="1560" pos:column="13">=<pos:position pos:line="1560" pos:column="14"/></operator> <name><name pos:line="1560" pos:column="15">pC<pos:position pos:line="1560" pos:column="17"/></name><operator pos:line="1560" pos:column="17">-&gt;<pos:position pos:line="1560" pos:column="22"/></operator><name pos:line="1560" pos:column="19">aOffset<pos:position pos:line="1560" pos:column="26"/></name></name></expr>;<pos:position pos:line="1560" pos:column="27"/></expr_stmt>
  }<pos:position pos:line="1561" pos:column="4"/></block></then><else pos:line="1561" pos:column="4">else<block pos:line="1561" pos:column="8">{
    <expr_stmt><expr><call><name pos:line="1562" pos:column="5">assert<pos:position pos:line="1562" pos:column="11"/></name><argument_list pos:line="1562" pos:column="11">(<argument><expr><name pos:line="1562" pos:column="12">aType<pos:position pos:line="1562" pos:column="17"/></name></expr></argument>)<pos:position pos:line="1562" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="1562" pos:column="19"/></expr_stmt>
    <expr_stmt><expr><name pos:line="1563" pos:column="5">avail<pos:position pos:line="1563" pos:column="10"/></name> <operator pos:line="1563" pos:column="11">=<pos:position pos:line="1563" pos:column="12"/></operator> <literal type="number" pos:line="1563" pos:column="13">0<pos:position pos:line="1563" pos:column="14"/></literal></expr>;<pos:position pos:line="1563" pos:column="15"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="1564" pos:column="5">pC<pos:position pos:line="1564" pos:column="7"/></name><operator pos:line="1564" pos:column="7">-&gt;<pos:position pos:line="1564" pos:column="12"/></operator><name pos:line="1564" pos:column="9">aOffset<pos:position pos:line="1564" pos:column="16"/></name></name> <operator pos:line="1564" pos:column="17">=<pos:position pos:line="1564" pos:column="18"/></operator> <name pos:line="1564" pos:column="19">aOffset<pos:position pos:line="1564" pos:column="26"/></name> <operator pos:line="1564" pos:column="27">=<pos:position pos:line="1564" pos:column="28"/></operator> <operator pos:line="1564" pos:column="29">&amp;<pos:position pos:line="1564" pos:column="34"/></operator><name><name pos:line="1564" pos:column="30">aType<pos:position pos:line="1564" pos:column="35"/></name><index pos:line="1564" pos:column="35">[<expr><name pos:line="1564" pos:column="36">nField<pos:position pos:line="1564" pos:column="42"/></name></expr>]<pos:position pos:line="1564" pos:column="43"/></index></name></expr>;<pos:position pos:line="1564" pos:column="44"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="1565" pos:column="5">pC<pos:position pos:line="1565" pos:column="7"/></name><operator pos:line="1565" pos:column="7">-&gt;<pos:position pos:line="1565" pos:column="12"/></operator><name pos:line="1565" pos:column="9">payloadSize<pos:position pos:line="1565" pos:column="20"/></name></name> <operator pos:line="1565" pos:column="21">=<pos:position pos:line="1565" pos:column="22"/></operator> <name pos:line="1565" pos:column="23">payloadSize<pos:position pos:line="1565" pos:column="34"/></name></expr>;<pos:position pos:line="1565" pos:column="35"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="1566" pos:column="5">pC<pos:position pos:line="1566" pos:column="7"/></name><operator pos:line="1566" pos:column="7">-&gt;<pos:position pos:line="1566" pos:column="12"/></operator><name pos:line="1566" pos:column="9">cacheStatus<pos:position pos:line="1566" pos:column="20"/></name></name> <operator pos:line="1566" pos:column="21">=<pos:position pos:line="1566" pos:column="22"/></operator> <name><name pos:line="1566" pos:column="23">p<pos:position pos:line="1566" pos:column="24"/></name><operator pos:line="1566" pos:column="24">-&gt;<pos:position pos:line="1566" pos:column="29"/></operator><name pos:line="1566" pos:column="26">cacheCtr<pos:position pos:line="1566" pos:column="34"/></name></name></expr>;<pos:position pos:line="1566" pos:column="35"/></expr_stmt>

    <comment type="block" pos:line="1568" pos:column="5">/* Figure out how many bytes are in the header */</comment>
    <if pos:line="1569" pos:column="5">if<condition pos:line="1569" pos:column="7">( <expr><name pos:line="1569" pos:column="9">zRec<pos:position pos:line="1569" pos:column="13"/></name></expr> )<pos:position pos:line="1569" pos:column="15"/></condition><then><block pos:line="1569" pos:column="15">{
      <expr_stmt><expr><name pos:line="1570" pos:column="7">zData<pos:position pos:line="1570" pos:column="12"/></name> <operator pos:line="1570" pos:column="13">=<pos:position pos:line="1570" pos:column="14"/></operator> <name pos:line="1570" pos:column="15">zRec<pos:position pos:line="1570" pos:column="19"/></name></expr>;<pos:position pos:line="1570" pos:column="20"/></expr_stmt>
    }<pos:position pos:line="1571" pos:column="6"/></block></then><else pos:line="1571" pos:column="6">else<block pos:line="1571" pos:column="10">{
      <if pos:line="1572" pos:column="7">if<condition pos:line="1572" pos:column="9">( <expr><name><name pos:line="1572" pos:column="11">pC<pos:position pos:line="1572" pos:column="13"/></name><operator pos:line="1572" pos:column="13">-&gt;<pos:position pos:line="1572" pos:column="18"/></operator><name pos:line="1572" pos:column="15">isIndex<pos:position pos:line="1572" pos:column="22"/></name></name></expr> )<pos:position pos:line="1572" pos:column="24"/></condition><then><block pos:line="1572" pos:column="24">{
        <expr_stmt><expr><name pos:line="1573" pos:column="9">zData<pos:position pos:line="1573" pos:column="14"/></name> <operator pos:line="1573" pos:column="15">=<pos:position pos:line="1573" pos:column="16"/></operator> <operator pos:line="1573" pos:column="17">(<pos:position pos:line="1573" pos:column="18"/></operator><name pos:line="1573" pos:column="18">char<pos:position pos:line="1573" pos:column="22"/></name><operator pos:line="1573" pos:column="22">*<pos:position pos:line="1573" pos:column="23"/></operator><operator pos:line="1573" pos:column="23">)<pos:position pos:line="1573" pos:column="24"/></operator><call><name pos:line="1573" pos:column="24">sqlite3BtreeKeyFetch<pos:position pos:line="1573" pos:column="44"/></name><argument_list pos:line="1573" pos:column="44">(<argument><expr><name pos:line="1573" pos:column="45">pCrsr<pos:position pos:line="1573" pos:column="50"/></name></expr></argument>, <argument><expr><operator pos:line="1573" pos:column="52">&amp;<pos:position pos:line="1573" pos:column="57"/></operator><name pos:line="1573" pos:column="53">avail<pos:position pos:line="1573" pos:column="58"/></name></expr></argument>)<pos:position pos:line="1573" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="1573" pos:column="60"/></expr_stmt>
      }<pos:position pos:line="1574" pos:column="8"/></block></then><else pos:line="1574" pos:column="8">else<block pos:line="1574" pos:column="12">{
        <expr_stmt><expr><name pos:line="1575" pos:column="9">zData<pos:position pos:line="1575" pos:column="14"/></name> <operator pos:line="1575" pos:column="15">=<pos:position pos:line="1575" pos:column="16"/></operator> <operator pos:line="1575" pos:column="17">(<pos:position pos:line="1575" pos:column="18"/></operator><name pos:line="1575" pos:column="18">char<pos:position pos:line="1575" pos:column="22"/></name><operator pos:line="1575" pos:column="22">*<pos:position pos:line="1575" pos:column="23"/></operator><operator pos:line="1575" pos:column="23">)<pos:position pos:line="1575" pos:column="24"/></operator><call><name pos:line="1575" pos:column="24">sqlite3BtreeDataFetch<pos:position pos:line="1575" pos:column="45"/></name><argument_list pos:line="1575" pos:column="45">(<argument><expr><name pos:line="1575" pos:column="46">pCrsr<pos:position pos:line="1575" pos:column="51"/></name></expr></argument>, <argument><expr><operator pos:line="1575" pos:column="53">&amp;<pos:position pos:line="1575" pos:column="58"/></operator><name pos:line="1575" pos:column="54">avail<pos:position pos:line="1575" pos:column="59"/></name></expr></argument>)<pos:position pos:line="1575" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="1575" pos:column="61"/></expr_stmt>
      }<pos:position pos:line="1576" pos:column="8"/></block></else></if>
      <comment type="block" pos:line="1577" pos:column="7">/* If KeyFetch()/DataFetch() managed to get the entire payload,
      ** save the payload in the pC-&gt;aRow cache.  That will save us from
      ** having to make additional calls to fetch the content portion of
      ** the record.
      */</comment>
      <expr_stmt><expr><call><name pos:line="1582" pos:column="7">assert<pos:position pos:line="1582" pos:column="13"/></name><argument_list pos:line="1582" pos:column="13">( <argument><expr><name pos:line="1582" pos:column="15">avail<pos:position pos:line="1582" pos:column="20"/></name><operator pos:line="1582" pos:column="20">&gt;=<pos:position pos:line="1582" pos:column="25"/></operator><literal type="number" pos:line="1582" pos:column="22">0<pos:position pos:line="1582" pos:column="23"/></literal></expr></argument> )<pos:position pos:line="1582" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="1582" pos:column="26"/></expr_stmt>
      <if pos:line="1583" pos:column="7">if<condition pos:line="1583" pos:column="9">( <expr><name pos:line="1583" pos:column="11">payloadSize<pos:position pos:line="1583" pos:column="22"/></name> <operator pos:line="1583" pos:column="23">&lt;=<pos:position pos:line="1583" pos:column="28"/></operator> <operator pos:line="1583" pos:column="26">(<pos:position pos:line="1583" pos:column="27"/></operator><name pos:line="1583" pos:column="27">u32<pos:position pos:line="1583" pos:column="30"/></name><operator pos:line="1583" pos:column="30">)<pos:position pos:line="1583" pos:column="31"/></operator><name pos:line="1583" pos:column="31">avail<pos:position pos:line="1583" pos:column="36"/></name></expr> )<pos:position pos:line="1583" pos:column="38"/></condition><then><block pos:line="1583" pos:column="38">{
        <expr_stmt><expr><name pos:line="1584" pos:column="9">zRec<pos:position pos:line="1584" pos:column="13"/></name> <operator pos:line="1584" pos:column="14">=<pos:position pos:line="1584" pos:column="15"/></operator> <name pos:line="1584" pos:column="16">zData<pos:position pos:line="1584" pos:column="21"/></name></expr>;<pos:position pos:line="1584" pos:column="22"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="1585" pos:column="9">pC<pos:position pos:line="1585" pos:column="11"/></name><operator pos:line="1585" pos:column="11">-&gt;<pos:position pos:line="1585" pos:column="16"/></operator><name pos:line="1585" pos:column="13">aRow<pos:position pos:line="1585" pos:column="17"/></name></name> <operator pos:line="1585" pos:column="18">=<pos:position pos:line="1585" pos:column="19"/></operator> <operator pos:line="1585" pos:column="20">(<pos:position pos:line="1585" pos:column="21"/></operator><name pos:line="1585" pos:column="21">u8<pos:position pos:line="1585" pos:column="23"/></name><operator pos:line="1585" pos:column="23">*<pos:position pos:line="1585" pos:column="24"/></operator><operator pos:line="1585" pos:column="24">)<pos:position pos:line="1585" pos:column="25"/></operator><name pos:line="1585" pos:column="25">zData<pos:position pos:line="1585" pos:column="30"/></name></expr>;<pos:position pos:line="1585" pos:column="31"/></expr_stmt>
      }<pos:position pos:line="1586" pos:column="8"/></block></then><else pos:line="1586" pos:column="8">else<block pos:line="1586" pos:column="12">{
        <expr_stmt><expr><name><name pos:line="1587" pos:column="9">pC<pos:position pos:line="1587" pos:column="11"/></name><operator pos:line="1587" pos:column="11">-&gt;<pos:position pos:line="1587" pos:column="16"/></operator><name pos:line="1587" pos:column="13">aRow<pos:position pos:line="1587" pos:column="17"/></name></name> <operator pos:line="1587" pos:column="18">=<pos:position pos:line="1587" pos:column="19"/></operator> <literal type="number" pos:line="1587" pos:column="20">0<pos:position pos:line="1587" pos:column="21"/></literal></expr>;<pos:position pos:line="1587" pos:column="22"/></expr_stmt>
      }<pos:position pos:line="1588" pos:column="8"/></block></else></if>
    }<pos:position pos:line="1589" pos:column="6"/></block></else></if>
    <comment type="block" pos:line="1590" pos:column="5">/* The following assert is true in all cases accept when
    ** the database file has been corrupted externally.
    **    assert( zRec!=0 || avail&gt;=payloadSize || avail&gt;=9 ); */</comment>
    <expr_stmt><expr><name pos:line="1593" pos:column="5">szHdr<pos:position pos:line="1593" pos:column="10"/></name> <operator pos:line="1593" pos:column="11">=<pos:position pos:line="1593" pos:column="12"/></operator> <call><name pos:line="1593" pos:column="13">getVarint32<pos:position pos:line="1593" pos:column="24"/></name><argument_list pos:line="1593" pos:column="24">(<argument><expr><operator pos:line="1593" pos:column="25">(<pos:position pos:line="1593" pos:column="26"/></operator><name pos:line="1593" pos:column="26">u8<pos:position pos:line="1593" pos:column="28"/></name><operator pos:line="1593" pos:column="28">*<pos:position pos:line="1593" pos:column="29"/></operator><operator pos:line="1593" pos:column="29">)<pos:position pos:line="1593" pos:column="30"/></operator><name pos:line="1593" pos:column="30">zData<pos:position pos:line="1593" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="1593" pos:column="37">offset<pos:position pos:line="1593" pos:column="43"/></name></expr></argument>)<pos:position pos:line="1593" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="1593" pos:column="45"/></expr_stmt>

    <comment type="block" pos:line="1595" pos:column="5">/* Make sure a corrupt database has not given us an oversize header.
    ** Do this now to avoid an oversize memory allocation.
    **
    ** Type entries can be between 1 and 5 bytes each.  But 4 and 5 byte
    ** types use so much data space that there can only be 4096 and 32 of
    ** them, respectively.  So the maximum header length results from a
    ** 3-byte type for each of the maximum of 32768 columns plus three
    ** extra bytes for the header length itself.  32768*3 + 3 = 98307.
    */</comment>
    <if pos:line="1604" pos:column="5">if<condition pos:line="1604" pos:column="7">( <expr><name pos:line="1604" pos:column="9">offset<pos:position pos:line="1604" pos:column="15"/></name> <operator pos:line="1604" pos:column="16">&gt;<pos:position pos:line="1604" pos:column="20"/></operator> <literal type="number" pos:line="1604" pos:column="18">98307<pos:position pos:line="1604" pos:column="23"/></literal></expr> )<pos:position pos:line="1604" pos:column="25"/></condition><then><block pos:line="1604" pos:column="25">{
      <expr_stmt><expr><name pos:line="1605" pos:column="7">rc<pos:position pos:line="1605" pos:column="9"/></name> <operator pos:line="1605" pos:column="10">=<pos:position pos:line="1605" pos:column="11"/></operator> <name pos:line="1605" pos:column="12">SQLITE_CORRUPT_BKPT<pos:position pos:line="1605" pos:column="31"/></name></expr>;<pos:position pos:line="1605" pos:column="32"/></expr_stmt>
      <goto pos:line="1606" pos:column="7">goto <name pos:line="1606" pos:column="12">op_column_out<pos:position pos:line="1606" pos:column="25"/></name>;<pos:position pos:line="1606" pos:column="26"/></goto>
    }<pos:position pos:line="1607" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="1609" pos:column="5">/* Compute in len the number of bytes of data we need to read in order
    ** to get nField type values.  offset is an upper bound on this.  But
    ** nField might be significantly less than the true number of columns
    ** in the table, and in that case, 5*nField+3 might be smaller than offset.
    ** We want to minimize len in order to limit the size of the memory
    ** allocation, especially if a corrupt database file has caused offset
    ** to be oversized. Offset is limited to 98307 above.  But 98307 might
    ** still exceed Robson memory allocation limits on some configurations.
    ** On systems that cannot tolerate large memory allocations, nField*5+3
    ** will likely be much smaller since nField will likely be less than
    ** 20 or so.  This insures that Robson memory allocation limits are
    ** not exceeded even for corrupt database files.
    */</comment>
    <expr_stmt><expr><name pos:line="1622" pos:column="5">len<pos:position pos:line="1622" pos:column="8"/></name> <operator pos:line="1622" pos:column="9">=<pos:position pos:line="1622" pos:column="10"/></operator> <name pos:line="1622" pos:column="11">nField<pos:position pos:line="1622" pos:column="17"/></name><operator pos:line="1622" pos:column="17">*<pos:position pos:line="1622" pos:column="18"/></operator><literal type="number" pos:line="1622" pos:column="18">5<pos:position pos:line="1622" pos:column="19"/></literal> <operator pos:line="1622" pos:column="20">+<pos:position pos:line="1622" pos:column="21"/></operator> <literal type="number" pos:line="1622" pos:column="22">3<pos:position pos:line="1622" pos:column="23"/></literal></expr>;<pos:position pos:line="1622" pos:column="24"/></expr_stmt>
    <if pos:line="1623" pos:column="5">if<condition pos:line="1623" pos:column="7">( <expr><name pos:line="1623" pos:column="9">len<pos:position pos:line="1623" pos:column="12"/></name> <operator pos:line="1623" pos:column="13">&gt;<pos:position pos:line="1623" pos:column="17"/></operator> <operator pos:line="1623" pos:column="15">(<pos:position pos:line="1623" pos:column="16"/></operator><name pos:line="1623" pos:column="16">int<pos:position pos:line="1623" pos:column="19"/></name><operator pos:line="1623" pos:column="19">)<pos:position pos:line="1623" pos:column="20"/></operator><name pos:line="1623" pos:column="20">offset<pos:position pos:line="1623" pos:column="26"/></name></expr> )<pos:position pos:line="1623" pos:column="28"/></condition><then pos:line="1623" pos:column="28"> <block type="pseudo"><expr_stmt><expr><name pos:line="1623" pos:column="29">len<pos:position pos:line="1623" pos:column="32"/></name> <operator pos:line="1623" pos:column="33">=<pos:position pos:line="1623" pos:column="34"/></operator> <operator pos:line="1623" pos:column="35">(<pos:position pos:line="1623" pos:column="36"/></operator><name pos:line="1623" pos:column="36">int<pos:position pos:line="1623" pos:column="39"/></name><operator pos:line="1623" pos:column="39">)<pos:position pos:line="1623" pos:column="40"/></operator><name pos:line="1623" pos:column="40">offset<pos:position pos:line="1623" pos:column="46"/></name></expr>;<pos:position pos:line="1623" pos:column="47"/></expr_stmt></block></then></if>

    <comment type="block" pos:line="1625" pos:column="5">/* The KeyFetch() or DataFetch() above are fast and will get the entire
    ** record header in most cases.  But they will fail to get the complete
    ** record header if the record header does not fit on a single page
    ** in the B-Tree.  When that happens, use sqlite3VdbeMemFromBtree() to
    ** acquire the complete header text.
    */</comment>
    <if pos:line="1631" pos:column="5">if<condition pos:line="1631" pos:column="7">( <expr><operator pos:line="1631" pos:column="9">!<pos:position pos:line="1631" pos:column="10"/></operator><name pos:line="1631" pos:column="10">zRec<pos:position pos:line="1631" pos:column="14"/></name> <operator pos:line="1631" pos:column="15">&amp;&amp;<pos:position pos:line="1631" pos:column="25"/></operator> <name pos:line="1631" pos:column="18">avail<pos:position pos:line="1631" pos:column="23"/></name><operator pos:line="1631" pos:column="23">&lt;<pos:position pos:line="1631" pos:column="27"/></operator><name pos:line="1631" pos:column="24">len<pos:position pos:line="1631" pos:column="27"/></name></expr> )<pos:position pos:line="1631" pos:column="29"/></condition><then><block pos:line="1631" pos:column="29">{
      <expr_stmt><expr><name><name pos:line="1632" pos:column="7">sMem<pos:position pos:line="1632" pos:column="11"/></name><operator pos:line="1632" pos:column="11">.<pos:position pos:line="1632" pos:column="12"/></operator><name pos:line="1632" pos:column="12">flags<pos:position pos:line="1632" pos:column="17"/></name></name> <operator pos:line="1632" pos:column="18">=<pos:position pos:line="1632" pos:column="19"/></operator> <literal type="number" pos:line="1632" pos:column="20">0<pos:position pos:line="1632" pos:column="21"/></literal></expr>;<pos:position pos:line="1632" pos:column="22"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="1633" pos:column="7">sMem<pos:position pos:line="1633" pos:column="11"/></name><operator pos:line="1633" pos:column="11">.<pos:position pos:line="1633" pos:column="12"/></operator><name pos:line="1633" pos:column="12">db<pos:position pos:line="1633" pos:column="14"/></name></name> <operator pos:line="1633" pos:column="15">=<pos:position pos:line="1633" pos:column="16"/></operator> <literal type="number" pos:line="1633" pos:column="17">0<pos:position pos:line="1633" pos:column="18"/></literal></expr>;<pos:position pos:line="1633" pos:column="19"/></expr_stmt>
      <expr_stmt><expr><name pos:line="1634" pos:column="7">rc<pos:position pos:line="1634" pos:column="9"/></name> <operator pos:line="1634" pos:column="10">=<pos:position pos:line="1634" pos:column="11"/></operator> <call><name pos:line="1634" pos:column="12">sqlite3VdbeMemFromBtree<pos:position pos:line="1634" pos:column="35"/></name><argument_list pos:line="1634" pos:column="35">(<argument><expr><name pos:line="1634" pos:column="36">pCrsr<pos:position pos:line="1634" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="1634" pos:column="43">0<pos:position pos:line="1634" pos:column="44"/></literal></expr></argument>, <argument><expr><name pos:line="1634" pos:column="46">len<pos:position pos:line="1634" pos:column="49"/></name></expr></argument>, <argument><expr><name><name pos:line="1634" pos:column="51">pC<pos:position pos:line="1634" pos:column="53"/></name><operator pos:line="1634" pos:column="53">-&gt;<pos:position pos:line="1634" pos:column="58"/></operator><name pos:line="1634" pos:column="55">isIndex<pos:position pos:line="1634" pos:column="62"/></name></name></expr></argument>, <argument><expr><operator pos:line="1634" pos:column="64">&amp;<pos:position pos:line="1634" pos:column="69"/></operator><name pos:line="1634" pos:column="65">sMem<pos:position pos:line="1634" pos:column="69"/></name></expr></argument>)<pos:position pos:line="1634" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="1634" pos:column="71"/></expr_stmt>
      <if pos:line="1635" pos:column="7">if<condition pos:line="1635" pos:column="9">( <expr><name pos:line="1635" pos:column="11">rc<pos:position pos:line="1635" pos:column="13"/></name><operator pos:line="1635" pos:column="13">!=<pos:position pos:line="1635" pos:column="15"/></operator><name pos:line="1635" pos:column="15">SQLITE_OK<pos:position pos:line="1635" pos:column="24"/></name></expr> )<pos:position pos:line="1635" pos:column="26"/></condition><then><block pos:line="1635" pos:column="26">{
        <goto pos:line="1636" pos:column="9">goto <name pos:line="1636" pos:column="14">op_column_out<pos:position pos:line="1636" pos:column="27"/></name>;<pos:position pos:line="1636" pos:column="28"/></goto>
      }<pos:position pos:line="1637" pos:column="8"/></block></then></if>
      <expr_stmt><expr><name pos:line="1638" pos:column="7">zData<pos:position pos:line="1638" pos:column="12"/></name> <operator pos:line="1638" pos:column="13">=<pos:position pos:line="1638" pos:column="14"/></operator> <name><name pos:line="1638" pos:column="15">sMem<pos:position pos:line="1638" pos:column="19"/></name><operator pos:line="1638" pos:column="19">.<pos:position pos:line="1638" pos:column="20"/></operator><name pos:line="1638" pos:column="20">z<pos:position pos:line="1638" pos:column="21"/></name></name></expr>;<pos:position pos:line="1638" pos:column="22"/></expr_stmt>
    }<pos:position pos:line="1639" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="1640" pos:column="5">zEndHdr<pos:position pos:line="1640" pos:column="12"/></name> <operator pos:line="1640" pos:column="13">=<pos:position pos:line="1640" pos:column="14"/></operator> <operator pos:line="1640" pos:column="15">(<pos:position pos:line="1640" pos:column="16"/></operator><name pos:line="1640" pos:column="16">u8<pos:position pos:line="1640" pos:column="18"/></name> <operator pos:line="1640" pos:column="19">*<pos:position pos:line="1640" pos:column="20"/></operator><operator pos:line="1640" pos:column="20">)<pos:position pos:line="1640" pos:column="21"/></operator><operator pos:line="1640" pos:column="21">&amp;<pos:position pos:line="1640" pos:column="26"/></operator><name><name pos:line="1640" pos:column="22">zData<pos:position pos:line="1640" pos:column="27"/></name><index pos:line="1640" pos:column="27">[<expr><name pos:line="1640" pos:column="28">len<pos:position pos:line="1640" pos:column="31"/></name></expr>]<pos:position pos:line="1640" pos:column="32"/></index></name></expr>;<pos:position pos:line="1640" pos:column="33"/></expr_stmt>
    <expr_stmt><expr><name pos:line="1641" pos:column="5">zIdx<pos:position pos:line="1641" pos:column="9"/></name> <operator pos:line="1641" pos:column="10">=<pos:position pos:line="1641" pos:column="11"/></operator> <operator pos:line="1641" pos:column="12">(<pos:position pos:line="1641" pos:column="13"/></operator><name pos:line="1641" pos:column="13">u8<pos:position pos:line="1641" pos:column="15"/></name> <operator pos:line="1641" pos:column="16">*<pos:position pos:line="1641" pos:column="17"/></operator><operator pos:line="1641" pos:column="17">)<pos:position pos:line="1641" pos:column="18"/></operator><operator pos:line="1641" pos:column="18">&amp;<pos:position pos:line="1641" pos:column="23"/></operator><name><name pos:line="1641" pos:column="19">zData<pos:position pos:line="1641" pos:column="24"/></name><index pos:line="1641" pos:column="24">[<expr><name pos:line="1641" pos:column="25">szHdr<pos:position pos:line="1641" pos:column="30"/></name></expr>]<pos:position pos:line="1641" pos:column="31"/></index></name></expr>;<pos:position pos:line="1641" pos:column="32"/></expr_stmt>

    <comment type="block" pos:line="1643" pos:column="5">/* Scan the header and use it to fill in the aType[] and aOffset[]
    ** arrays.  aType[i] will contain the type integer for the i-th
    ** column and aOffset[i] will contain the offset from the beginning
    ** of the record to the start of the data for the i-th column
    */</comment>
    <expr_stmt><expr><name pos:line="1648" pos:column="5">offset64<pos:position pos:line="1648" pos:column="13"/></name> <operator pos:line="1648" pos:column="14">=<pos:position pos:line="1648" pos:column="15"/></operator> <name pos:line="1648" pos:column="16">offset<pos:position pos:line="1648" pos:column="22"/></name></expr>;<pos:position pos:line="1648" pos:column="23"/></expr_stmt>
    <for pos:line="1649" pos:column="5">for<control pos:line="1649" pos:column="8">(<init><expr><name pos:line="1649" pos:column="9">i<pos:position pos:line="1649" pos:column="10"/></name><operator pos:line="1649" pos:column="10">=<pos:position pos:line="1649" pos:column="11"/></operator><literal type="number" pos:line="1649" pos:column="11">0<pos:position pos:line="1649" pos:column="12"/></literal></expr>;<pos:position pos:line="1649" pos:column="13"/></init> <condition><expr><name pos:line="1649" pos:column="14">i<pos:position pos:line="1649" pos:column="15"/></name><operator pos:line="1649" pos:column="15">&lt;<pos:position pos:line="1649" pos:column="19"/></operator><name pos:line="1649" pos:column="16">nField<pos:position pos:line="1649" pos:column="22"/></name></expr>;<pos:position pos:line="1649" pos:column="23"/></condition> <incr><expr><name pos:line="1649" pos:column="24">i<pos:position pos:line="1649" pos:column="25"/></name><operator pos:line="1649" pos:column="25">++<pos:position pos:line="1649" pos:column="27"/></operator></expr></incr>)<pos:position pos:line="1649" pos:column="28"/></control><block pos:line="1649" pos:column="28">{
      <if pos:line="1650" pos:column="7">if<condition pos:line="1650" pos:column="9">( <expr><name pos:line="1650" pos:column="11">zIdx<pos:position pos:line="1650" pos:column="15"/></name><operator pos:line="1650" pos:column="15">&lt;<pos:position pos:line="1650" pos:column="19"/></operator><name pos:line="1650" pos:column="16">zEndHdr<pos:position pos:line="1650" pos:column="23"/></name></expr> )<pos:position pos:line="1650" pos:column="25"/></condition><then><block pos:line="1650" pos:column="25">{
        <expr_stmt><expr><name><name pos:line="1651" pos:column="9">aOffset<pos:position pos:line="1651" pos:column="16"/></name><index pos:line="1651" pos:column="16">[<expr><name pos:line="1651" pos:column="17">i<pos:position pos:line="1651" pos:column="18"/></name></expr>]<pos:position pos:line="1651" pos:column="19"/></index></name> <operator pos:line="1651" pos:column="20">=<pos:position pos:line="1651" pos:column="21"/></operator> <operator pos:line="1651" pos:column="22">(<pos:position pos:line="1651" pos:column="23"/></operator><name pos:line="1651" pos:column="23">u32<pos:position pos:line="1651" pos:column="26"/></name><operator pos:line="1651" pos:column="26">)<pos:position pos:line="1651" pos:column="27"/></operator><name pos:line="1651" pos:column="27">offset64<pos:position pos:line="1651" pos:column="35"/></name></expr>;<pos:position pos:line="1651" pos:column="36"/></expr_stmt>
        <expr_stmt><expr><name pos:line="1652" pos:column="9">zIdx<pos:position pos:line="1652" pos:column="13"/></name> <operator pos:line="1652" pos:column="14">+=<pos:position pos:line="1652" pos:column="16"/></operator> <call><name pos:line="1652" pos:column="17">getVarint32<pos:position pos:line="1652" pos:column="28"/></name><argument_list pos:line="1652" pos:column="28">(<argument><expr><name pos:line="1652" pos:column="29">zIdx<pos:position pos:line="1652" pos:column="33"/></name></expr></argument>, <argument><expr><name><name pos:line="1652" pos:column="35">aType<pos:position pos:line="1652" pos:column="40"/></name><index pos:line="1652" pos:column="40">[<expr><name pos:line="1652" pos:column="41">i<pos:position pos:line="1652" pos:column="42"/></name></expr>]<pos:position pos:line="1652" pos:column="43"/></index></name></expr></argument>)<pos:position pos:line="1652" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="1652" pos:column="45"/></expr_stmt>
        <expr_stmt><expr><name pos:line="1653" pos:column="9">offset64<pos:position pos:line="1653" pos:column="17"/></name> <operator pos:line="1653" pos:column="18">+=<pos:position pos:line="1653" pos:column="20"/></operator> <call><name pos:line="1653" pos:column="21">sqlite3VdbeSerialTypeLen<pos:position pos:line="1653" pos:column="45"/></name><argument_list pos:line="1653" pos:column="45">(<argument><expr><name><name pos:line="1653" pos:column="46">aType<pos:position pos:line="1653" pos:column="51"/></name><index pos:line="1653" pos:column="51">[<expr><name pos:line="1653" pos:column="52">i<pos:position pos:line="1653" pos:column="53"/></name></expr>]<pos:position pos:line="1653" pos:column="54"/></index></name></expr></argument>)<pos:position pos:line="1653" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="1653" pos:column="56"/></expr_stmt>
      }<pos:position pos:line="1654" pos:column="8"/></block></then><else pos:line="1654" pos:column="8">else<block pos:line="1654" pos:column="12">{
        <comment type="block" pos:line="1655" pos:column="9">/* If i is less that nField, then there are less fields in this
        ** record than SetNumColumns indicated there are columns in the
        ** table. Set the offset for any extra columns not present in
        ** the record to 0. This tells code below to store a NULL
        ** instead of deserializing a value from the record.
        */</comment>
        <expr_stmt><expr><name><name pos:line="1661" pos:column="9">aOffset<pos:position pos:line="1661" pos:column="16"/></name><index pos:line="1661" pos:column="16">[<expr><name pos:line="1661" pos:column="17">i<pos:position pos:line="1661" pos:column="18"/></name></expr>]<pos:position pos:line="1661" pos:column="19"/></index></name> <operator pos:line="1661" pos:column="20">=<pos:position pos:line="1661" pos:column="21"/></operator> <literal type="number" pos:line="1661" pos:column="22">0<pos:position pos:line="1661" pos:column="23"/></literal></expr>;<pos:position pos:line="1661" pos:column="24"/></expr_stmt>
      }<pos:position pos:line="1662" pos:column="8"/></block></else></if>
    }<pos:position pos:line="1663" pos:column="6"/></block></for>
    <expr_stmt><expr><call><name pos:line="1664" pos:column="5">sqlite3VdbeMemRelease<pos:position pos:line="1664" pos:column="26"/></name><argument_list pos:line="1664" pos:column="26">(<argument><expr><operator pos:line="1664" pos:column="27">&amp;<pos:position pos:line="1664" pos:column="32"/></operator><name pos:line="1664" pos:column="28">sMem<pos:position pos:line="1664" pos:column="32"/></name></expr></argument>)<pos:position pos:line="1664" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="1664" pos:column="34"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="1665" pos:column="5">sMem<pos:position pos:line="1665" pos:column="9"/></name><operator pos:line="1665" pos:column="9">.<pos:position pos:line="1665" pos:column="10"/></operator><name pos:line="1665" pos:column="10">flags<pos:position pos:line="1665" pos:column="15"/></name></name> <operator pos:line="1665" pos:column="16">=<pos:position pos:line="1665" pos:column="17"/></operator> <name pos:line="1665" pos:column="18">MEM_Null<pos:position pos:line="1665" pos:column="26"/></name></expr>;<pos:position pos:line="1665" pos:column="27"/></expr_stmt>

    <comment type="block" pos:line="1667" pos:column="5">/* If we have read more header data than was contained in the header,
    ** or if the end of the last field appears to be past the end of the
    ** record, or if the end of the last field appears to be before the end
    ** of the record (when all fields present), then we must be dealing 
    ** with a corrupt database.
    */</comment>
    <if pos:line="1673" pos:column="5">if<condition pos:line="1673" pos:column="7">( <expr><operator pos:line="1673" pos:column="9">(<pos:position pos:line="1673" pos:column="10"/></operator><name pos:line="1673" pos:column="10">zIdx<pos:position pos:line="1673" pos:column="14"/></name> <operator pos:line="1673" pos:column="15">&gt;<pos:position pos:line="1673" pos:column="19"/></operator> <name pos:line="1673" pos:column="17">zEndHdr<pos:position pos:line="1673" pos:column="24"/></name><operator pos:line="1673" pos:column="24">)<pos:position pos:line="1673" pos:column="25"/></operator><operator pos:line="1673" pos:column="25">||<pos:position pos:line="1673" pos:column="27"/></operator> <operator pos:line="1673" pos:column="28">(<pos:position pos:line="1673" pos:column="29"/></operator><name pos:line="1673" pos:column="29">offset64<pos:position pos:line="1673" pos:column="37"/></name> <operator pos:line="1673" pos:column="38">&gt;<pos:position pos:line="1673" pos:column="42"/></operator> <name pos:line="1673" pos:column="40">payloadSize<pos:position pos:line="1673" pos:column="51"/></name><operator pos:line="1673" pos:column="51">)<pos:position pos:line="1673" pos:column="52"/></operator>
     <operator pos:line="1674" pos:column="6">||<pos:position pos:line="1674" pos:column="8"/></operator> <operator pos:line="1674" pos:column="9">(<pos:position pos:line="1674" pos:column="10"/></operator><name pos:line="1674" pos:column="10">zIdx<pos:position pos:line="1674" pos:column="14"/></name><operator pos:line="1674" pos:column="14">==<pos:position pos:line="1674" pos:column="16"/></operator><name pos:line="1674" pos:column="16">zEndHdr<pos:position pos:line="1674" pos:column="23"/></name> <operator pos:line="1674" pos:column="24">&amp;&amp;<pos:position pos:line="1674" pos:column="34"/></operator> <name pos:line="1674" pos:column="27">offset64<pos:position pos:line="1674" pos:column="35"/></name><operator pos:line="1674" pos:column="35">!=<pos:position pos:line="1674" pos:column="37"/></operator><operator pos:line="1674" pos:column="37">(<pos:position pos:line="1674" pos:column="38"/></operator><name pos:line="1674" pos:column="38">u64<pos:position pos:line="1674" pos:column="41"/></name><operator pos:line="1674" pos:column="41">)<pos:position pos:line="1674" pos:column="42"/></operator><name pos:line="1674" pos:column="42">payloadSize<pos:position pos:line="1674" pos:column="53"/></name><operator pos:line="1674" pos:column="53">)<pos:position pos:line="1674" pos:column="54"/></operator></expr> )<pos:position pos:line="1674" pos:column="56"/></condition><then><block pos:line="1674" pos:column="56">{
      <expr_stmt><expr><name pos:line="1675" pos:column="7">rc<pos:position pos:line="1675" pos:column="9"/></name> <operator pos:line="1675" pos:column="10">=<pos:position pos:line="1675" pos:column="11"/></operator> <name pos:line="1675" pos:column="12">SQLITE_CORRUPT_BKPT<pos:position pos:line="1675" pos:column="31"/></name></expr>;<pos:position pos:line="1675" pos:column="32"/></expr_stmt>
      <goto pos:line="1676" pos:column="7">goto <name pos:line="1676" pos:column="12">op_column_out<pos:position pos:line="1676" pos:column="25"/></name>;<pos:position pos:line="1676" pos:column="26"/></goto>
    }<pos:position pos:line="1677" pos:column="6"/></block></then></if>
  }<pos:position pos:line="1678" pos:column="4"/></block></else></if>

  <comment type="block" pos:line="1680" pos:column="3">/* Get the column information. If aOffset[p2] is non-zero, then 
  ** deserialize the value from the record. If aOffset[p2] is zero,
  ** then there are not enough fields in the record to satisfy the
  ** request.  In this case, set the value NULL or to P4 if P4 is
  ** a pointer to a Mem object.
  */</comment>
  <if pos:line="1686" pos:column="3">if<condition pos:line="1686" pos:column="5">( <expr><name><name pos:line="1686" pos:column="7">aOffset<pos:position pos:line="1686" pos:column="14"/></name><index pos:line="1686" pos:column="14">[<expr><name pos:line="1686" pos:column="15">p2<pos:position pos:line="1686" pos:column="17"/></name></expr>]<pos:position pos:line="1686" pos:column="18"/></index></name></expr> )<pos:position pos:line="1686" pos:column="20"/></condition><then><block pos:line="1686" pos:column="20">{
    <expr_stmt><expr><call><name pos:line="1687" pos:column="5">assert<pos:position pos:line="1687" pos:column="11"/></name><argument_list pos:line="1687" pos:column="11">( <argument><expr><name pos:line="1687" pos:column="13">rc<pos:position pos:line="1687" pos:column="15"/></name><operator pos:line="1687" pos:column="15">==<pos:position pos:line="1687" pos:column="17"/></operator><name pos:line="1687" pos:column="17">SQLITE_OK<pos:position pos:line="1687" pos:column="26"/></name></expr></argument> )<pos:position pos:line="1687" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="1687" pos:column="29"/></expr_stmt>
    <if pos:line="1688" pos:column="5">if<condition pos:line="1688" pos:column="7">( <expr><name pos:line="1688" pos:column="9">zRec<pos:position pos:line="1688" pos:column="13"/></name></expr> )<pos:position pos:line="1688" pos:column="15"/></condition><then><block pos:line="1688" pos:column="15">{
      <expr_stmt><expr><call><name pos:line="1689" pos:column="7">sqlite3VdbeMemReleaseExternal<pos:position pos:line="1689" pos:column="36"/></name><argument_list pos:line="1689" pos:column="36">(<argument><expr><name pos:line="1689" pos:column="37">pDest<pos:position pos:line="1689" pos:column="42"/></name></expr></argument>)<pos:position pos:line="1689" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="1689" pos:column="44"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="1690" pos:column="7">sqlite3VdbeSerialGet<pos:position pos:line="1690" pos:column="27"/></name><argument_list pos:line="1690" pos:column="27">(<argument><expr><operator pos:line="1690" pos:column="28">(<pos:position pos:line="1690" pos:column="29"/></operator><name pos:line="1690" pos:column="29">u8<pos:position pos:line="1690" pos:column="31"/></name> <operator pos:line="1690" pos:column="32">*<pos:position pos:line="1690" pos:column="33"/></operator><operator pos:line="1690" pos:column="33">)<pos:position pos:line="1690" pos:column="34"/></operator><operator pos:line="1690" pos:column="34">&amp;<pos:position pos:line="1690" pos:column="39"/></operator><name><name pos:line="1690" pos:column="35">zRec<pos:position pos:line="1690" pos:column="39"/></name><index pos:line="1690" pos:column="39">[<expr><name><name pos:line="1690" pos:column="40">aOffset<pos:position pos:line="1690" pos:column="47"/></name><index pos:line="1690" pos:column="47">[<expr><name pos:line="1690" pos:column="48">p2<pos:position pos:line="1690" pos:column="50"/></name></expr>]<pos:position pos:line="1690" pos:column="51"/></index></name></expr>]<pos:position pos:line="1690" pos:column="52"/></index></name></expr></argument>, <argument><expr><name><name pos:line="1690" pos:column="54">aType<pos:position pos:line="1690" pos:column="59"/></name><index pos:line="1690" pos:column="59">[<expr><name pos:line="1690" pos:column="60">p2<pos:position pos:line="1690" pos:column="62"/></name></expr>]<pos:position pos:line="1690" pos:column="63"/></index></name></expr></argument>, <argument><expr><name pos:line="1690" pos:column="65">pDest<pos:position pos:line="1690" pos:column="70"/></name></expr></argument>)<pos:position pos:line="1690" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="1690" pos:column="72"/></expr_stmt>
    }<pos:position pos:line="1691" pos:column="6"/></block></then><else pos:line="1691" pos:column="6">else<block pos:line="1691" pos:column="10">{
      <expr_stmt><expr><name pos:line="1692" pos:column="7">len<pos:position pos:line="1692" pos:column="10"/></name> <operator pos:line="1692" pos:column="11">=<pos:position pos:line="1692" pos:column="12"/></operator> <call><name pos:line="1692" pos:column="13">sqlite3VdbeSerialTypeLen<pos:position pos:line="1692" pos:column="37"/></name><argument_list pos:line="1692" pos:column="37">(<argument><expr><name><name pos:line="1692" pos:column="38">aType<pos:position pos:line="1692" pos:column="43"/></name><index pos:line="1692" pos:column="43">[<expr><name pos:line="1692" pos:column="44">p2<pos:position pos:line="1692" pos:column="46"/></name></expr>]<pos:position pos:line="1692" pos:column="47"/></index></name></expr></argument>)<pos:position pos:line="1692" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="1692" pos:column="49"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="1693" pos:column="7">sqlite3VdbeMemMove<pos:position pos:line="1693" pos:column="25"/></name><argument_list pos:line="1693" pos:column="25">(<argument><expr><operator pos:line="1693" pos:column="26">&amp;<pos:position pos:line="1693" pos:column="31"/></operator><name pos:line="1693" pos:column="27">sMem<pos:position pos:line="1693" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="1693" pos:column="33">pDest<pos:position pos:line="1693" pos:column="38"/></name></expr></argument>)<pos:position pos:line="1693" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="1693" pos:column="40"/></expr_stmt>
      <expr_stmt><expr><name pos:line="1694" pos:column="7">rc<pos:position pos:line="1694" pos:column="9"/></name> <operator pos:line="1694" pos:column="10">=<pos:position pos:line="1694" pos:column="11"/></operator> <call><name pos:line="1694" pos:column="12">sqlite3VdbeMemFromBtree<pos:position pos:line="1694" pos:column="35"/></name><argument_list pos:line="1694" pos:column="35">(<argument><expr><name pos:line="1694" pos:column="36">pCrsr<pos:position pos:line="1694" pos:column="41"/></name></expr></argument>, <argument><expr><name><name pos:line="1694" pos:column="43">aOffset<pos:position pos:line="1694" pos:column="50"/></name><index pos:line="1694" pos:column="50">[<expr><name pos:line="1694" pos:column="51">p2<pos:position pos:line="1694" pos:column="53"/></name></expr>]<pos:position pos:line="1694" pos:column="54"/></index></name></expr></argument>, <argument><expr><name pos:line="1694" pos:column="56">len<pos:position pos:line="1694" pos:column="59"/></name></expr></argument>, <argument><expr><name><name pos:line="1694" pos:column="61">pC<pos:position pos:line="1694" pos:column="63"/></name><operator pos:line="1694" pos:column="63">-&gt;<pos:position pos:line="1694" pos:column="68"/></operator><name pos:line="1694" pos:column="65">isIndex<pos:position pos:line="1694" pos:column="72"/></name></name></expr></argument>, <argument><expr><operator pos:line="1694" pos:column="74">&amp;<pos:position pos:line="1694" pos:column="79"/></operator><name pos:line="1694" pos:column="75">sMem<pos:position pos:line="1694" pos:column="79"/></name></expr></argument>)<pos:position pos:line="1694" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="1694" pos:column="81"/></expr_stmt>
      <if pos:line="1695" pos:column="7">if<condition pos:line="1695" pos:column="9">( <expr><name pos:line="1695" pos:column="11">rc<pos:position pos:line="1695" pos:column="13"/></name><operator pos:line="1695" pos:column="13">!=<pos:position pos:line="1695" pos:column="15"/></operator><name pos:line="1695" pos:column="15">SQLITE_OK<pos:position pos:line="1695" pos:column="24"/></name></expr> )<pos:position pos:line="1695" pos:column="26"/></condition><then><block pos:line="1695" pos:column="26">{
        <goto pos:line="1696" pos:column="9">goto <name pos:line="1696" pos:column="14">op_column_out<pos:position pos:line="1696" pos:column="27"/></name>;<pos:position pos:line="1696" pos:column="28"/></goto>
      }<pos:position pos:line="1697" pos:column="8"/></block></then></if>
      <expr_stmt><expr><name pos:line="1698" pos:column="7">zData<pos:position pos:line="1698" pos:column="12"/></name> <operator pos:line="1698" pos:column="13">=<pos:position pos:line="1698" pos:column="14"/></operator> <name><name pos:line="1698" pos:column="15">sMem<pos:position pos:line="1698" pos:column="19"/></name><operator pos:line="1698" pos:column="19">.<pos:position pos:line="1698" pos:column="20"/></operator><name pos:line="1698" pos:column="20">z<pos:position pos:line="1698" pos:column="21"/></name></name></expr>;<pos:position pos:line="1698" pos:column="22"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="1699" pos:column="7">sqlite3VdbeSerialGet<pos:position pos:line="1699" pos:column="27"/></name><argument_list pos:line="1699" pos:column="27">(<argument><expr><operator pos:line="1699" pos:column="28">(<pos:position pos:line="1699" pos:column="29"/></operator><name pos:line="1699" pos:column="29">u8<pos:position pos:line="1699" pos:column="31"/></name><operator pos:line="1699" pos:column="31">*<pos:position pos:line="1699" pos:column="32"/></operator><operator pos:line="1699" pos:column="32">)<pos:position pos:line="1699" pos:column="33"/></operator><name pos:line="1699" pos:column="33">zData<pos:position pos:line="1699" pos:column="38"/></name></expr></argument>, <argument><expr><name><name pos:line="1699" pos:column="40">aType<pos:position pos:line="1699" pos:column="45"/></name><index pos:line="1699" pos:column="45">[<expr><name pos:line="1699" pos:column="46">p2<pos:position pos:line="1699" pos:column="48"/></name></expr>]<pos:position pos:line="1699" pos:column="49"/></index></name></expr></argument>, <argument><expr><name pos:line="1699" pos:column="51">pDest<pos:position pos:line="1699" pos:column="56"/></name></expr></argument>)<pos:position pos:line="1699" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="1699" pos:column="58"/></expr_stmt>
    }<pos:position pos:line="1700" pos:column="6"/></block></else></if>
    <expr_stmt><expr><name><name pos:line="1701" pos:column="5">pDest<pos:position pos:line="1701" pos:column="10"/></name><operator pos:line="1701" pos:column="10">-&gt;<pos:position pos:line="1701" pos:column="15"/></operator><name pos:line="1701" pos:column="12">enc<pos:position pos:line="1701" pos:column="15"/></name></name> <operator pos:line="1701" pos:column="16">=<pos:position pos:line="1701" pos:column="17"/></operator> <name pos:line="1701" pos:column="18">encoding<pos:position pos:line="1701" pos:column="26"/></name></expr>;<pos:position pos:line="1701" pos:column="27"/></expr_stmt>
  }<pos:position pos:line="1702" pos:column="4"/></block></then><else pos:line="1702" pos:column="4">else<block pos:line="1702" pos:column="8">{
    <if pos:line="1703" pos:column="5">if<condition pos:line="1703" pos:column="7">( <expr><name><name pos:line="1703" pos:column="9">pOp<pos:position pos:line="1703" pos:column="12"/></name><operator pos:line="1703" pos:column="12">-&gt;<pos:position pos:line="1703" pos:column="17"/></operator><name pos:line="1703" pos:column="14">p4type<pos:position pos:line="1703" pos:column="20"/></name></name><operator pos:line="1703" pos:column="20">==<pos:position pos:line="1703" pos:column="22"/></operator><name pos:line="1703" pos:column="22">P4_MEM<pos:position pos:line="1703" pos:column="28"/></name></expr> )<pos:position pos:line="1703" pos:column="30"/></condition><then><block pos:line="1703" pos:column="30">{
      <expr_stmt><expr><call><name pos:line="1704" pos:column="7">sqlite3VdbeMemShallowCopy<pos:position pos:line="1704" pos:column="32"/></name><argument_list pos:line="1704" pos:column="32">(<argument><expr><name pos:line="1704" pos:column="33">pDest<pos:position pos:line="1704" pos:column="38"/></name></expr></argument>, <argument><expr><name><name pos:line="1704" pos:column="40">pOp<pos:position pos:line="1704" pos:column="43"/></name><operator pos:line="1704" pos:column="43">-&gt;<pos:position pos:line="1704" pos:column="48"/></operator><name pos:line="1704" pos:column="45">p4<pos:position pos:line="1704" pos:column="47"/></name><operator pos:line="1704" pos:column="47">.<pos:position pos:line="1704" pos:column="48"/></operator><name pos:line="1704" pos:column="48">pMem<pos:position pos:line="1704" pos:column="52"/></name></name></expr></argument>, <argument><expr><name pos:line="1704" pos:column="54">MEM_Static<pos:position pos:line="1704" pos:column="64"/></name></expr></argument>)<pos:position pos:line="1704" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="1704" pos:column="66"/></expr_stmt>
    }<pos:position pos:line="1705" pos:column="6"/></block></then><else pos:line="1705" pos:column="6">else<block pos:line="1705" pos:column="10">{
      <expr_stmt><expr><call><name pos:line="1706" pos:column="7">assert<pos:position pos:line="1706" pos:column="13"/></name><argument_list pos:line="1706" pos:column="13">( <argument><expr><name><name pos:line="1706" pos:column="15">pDest<pos:position pos:line="1706" pos:column="20"/></name><operator pos:line="1706" pos:column="20">-&gt;<pos:position pos:line="1706" pos:column="25"/></operator><name pos:line="1706" pos:column="22">flags<pos:position pos:line="1706" pos:column="27"/></name></name><operator pos:line="1706" pos:column="27">&amp;<pos:position pos:line="1706" pos:column="32"/></operator><name pos:line="1706" pos:column="28">MEM_Null<pos:position pos:line="1706" pos:column="36"/></name></expr></argument> )<pos:position pos:line="1706" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="1706" pos:column="39"/></expr_stmt>
    }<pos:position pos:line="1707" pos:column="6"/></block></else></if>
  }<pos:position pos:line="1708" pos:column="4"/></block></else></if>

  <comment type="block" pos:line="1710" pos:column="3">/* If we dynamically allocated space to hold the data (in the
  ** sqlite3VdbeMemFromBtree() call above) then transfer control of that
  ** dynamically allocated space over to the pDest structure.
  ** This prevents a memory copy.
  */</comment>
  <if pos:line="1715" pos:column="3">if<condition pos:line="1715" pos:column="5">( <expr><name><name pos:line="1715" pos:column="7">sMem<pos:position pos:line="1715" pos:column="11"/></name><operator pos:line="1715" pos:column="11">.<pos:position pos:line="1715" pos:column="12"/></operator><name pos:line="1715" pos:column="12">zMalloc<pos:position pos:line="1715" pos:column="19"/></name></name></expr> )<pos:position pos:line="1715" pos:column="21"/></condition><then><block pos:line="1715" pos:column="21">{
    <expr_stmt><expr><call><name pos:line="1716" pos:column="5">assert<pos:position pos:line="1716" pos:column="11"/></name><argument_list pos:line="1716" pos:column="11">( <argument><expr><name><name pos:line="1716" pos:column="13">sMem<pos:position pos:line="1716" pos:column="17"/></name><operator pos:line="1716" pos:column="17">.<pos:position pos:line="1716" pos:column="18"/></operator><name pos:line="1716" pos:column="18">z<pos:position pos:line="1716" pos:column="19"/></name></name><operator pos:line="1716" pos:column="19">==<pos:position pos:line="1716" pos:column="21"/></operator><name><name pos:line="1716" pos:column="21">sMem<pos:position pos:line="1716" pos:column="25"/></name><operator pos:line="1716" pos:column="25">.<pos:position pos:line="1716" pos:column="26"/></operator><name pos:line="1716" pos:column="26">zMalloc<pos:position pos:line="1716" pos:column="33"/></name></name></expr></argument> )<pos:position pos:line="1716" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="1716" pos:column="36"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="1717" pos:column="5">assert<pos:position pos:line="1717" pos:column="11"/></name><argument_list pos:line="1717" pos:column="11">( <argument><expr><operator pos:line="1717" pos:column="13">!<pos:position pos:line="1717" pos:column="14"/></operator><operator pos:line="1717" pos:column="14">(<pos:position pos:line="1717" pos:column="15"/></operator><name><name pos:line="1717" pos:column="15">pDest<pos:position pos:line="1717" pos:column="20"/></name><operator pos:line="1717" pos:column="20">-&gt;<pos:position pos:line="1717" pos:column="25"/></operator><name pos:line="1717" pos:column="22">flags<pos:position pos:line="1717" pos:column="27"/></name></name> <operator pos:line="1717" pos:column="28">&amp;<pos:position pos:line="1717" pos:column="33"/></operator> <name pos:line="1717" pos:column="30">MEM_Dyn<pos:position pos:line="1717" pos:column="37"/></name><operator pos:line="1717" pos:column="37">)<pos:position pos:line="1717" pos:column="38"/></operator></expr></argument> )<pos:position pos:line="1717" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="1717" pos:column="41"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="1718" pos:column="5">assert<pos:position pos:line="1718" pos:column="11"/></name><argument_list pos:line="1718" pos:column="11">( <argument><expr><operator pos:line="1718" pos:column="13">!<pos:position pos:line="1718" pos:column="14"/></operator><operator pos:line="1718" pos:column="14">(<pos:position pos:line="1718" pos:column="15"/></operator><name><name pos:line="1718" pos:column="15">pDest<pos:position pos:line="1718" pos:column="20"/></name><operator pos:line="1718" pos:column="20">-&gt;<pos:position pos:line="1718" pos:column="25"/></operator><name pos:line="1718" pos:column="22">flags<pos:position pos:line="1718" pos:column="27"/></name></name> <operator pos:line="1718" pos:column="28">&amp;<pos:position pos:line="1718" pos:column="33"/></operator> <operator pos:line="1718" pos:column="30">(<pos:position pos:line="1718" pos:column="31"/></operator><name pos:line="1718" pos:column="31">MEM_Blob<pos:position pos:line="1718" pos:column="39"/></name><operator pos:line="1718" pos:column="39">|<pos:position pos:line="1718" pos:column="40"/></operator><name pos:line="1718" pos:column="40">MEM_Str<pos:position pos:line="1718" pos:column="47"/></name><operator pos:line="1718" pos:column="47">)<pos:position pos:line="1718" pos:column="48"/></operator><operator pos:line="1718" pos:column="48">)<pos:position pos:line="1718" pos:column="49"/></operator> <operator pos:line="1718" pos:column="50">||<pos:position pos:line="1718" pos:column="52"/></operator> <name><name pos:line="1718" pos:column="53">pDest<pos:position pos:line="1718" pos:column="58"/></name><operator pos:line="1718" pos:column="58">-&gt;<pos:position pos:line="1718" pos:column="63"/></operator><name pos:line="1718" pos:column="60">z<pos:position pos:line="1718" pos:column="61"/></name></name><operator pos:line="1718" pos:column="61">==<pos:position pos:line="1718" pos:column="63"/></operator><name><name pos:line="1718" pos:column="63">sMem<pos:position pos:line="1718" pos:column="67"/></name><operator pos:line="1718" pos:column="67">.<pos:position pos:line="1718" pos:column="68"/></operator><name pos:line="1718" pos:column="68">z<pos:position pos:line="1718" pos:column="69"/></name></name></expr></argument> )<pos:position pos:line="1718" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="1718" pos:column="72"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="1719" pos:column="5">pDest<pos:position pos:line="1719" pos:column="10"/></name><operator pos:line="1719" pos:column="10">-&gt;<pos:position pos:line="1719" pos:column="15"/></operator><name pos:line="1719" pos:column="12">flags<pos:position pos:line="1719" pos:column="17"/></name></name> <operator pos:line="1719" pos:column="18">&amp;=<pos:position pos:line="1719" pos:column="24"/></operator> <operator pos:line="1719" pos:column="21">~<pos:position pos:line="1719" pos:column="22"/></operator><operator pos:line="1719" pos:column="22">(<pos:position pos:line="1719" pos:column="23"/></operator><name pos:line="1719" pos:column="23">MEM_Ephem<pos:position pos:line="1719" pos:column="32"/></name><operator pos:line="1719" pos:column="32">|<pos:position pos:line="1719" pos:column="33"/></operator><name pos:line="1719" pos:column="33">MEM_Static<pos:position pos:line="1719" pos:column="43"/></name><operator pos:line="1719" pos:column="43">)<pos:position pos:line="1719" pos:column="44"/></operator></expr>;<pos:position pos:line="1719" pos:column="45"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="1720" pos:column="5">pDest<pos:position pos:line="1720" pos:column="10"/></name><operator pos:line="1720" pos:column="10">-&gt;<pos:position pos:line="1720" pos:column="15"/></operator><name pos:line="1720" pos:column="12">flags<pos:position pos:line="1720" pos:column="17"/></name></name> <operator pos:line="1720" pos:column="18">|=<pos:position pos:line="1720" pos:column="20"/></operator> <name pos:line="1720" pos:column="21">MEM_Term<pos:position pos:line="1720" pos:column="29"/></name></expr>;<pos:position pos:line="1720" pos:column="30"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="1721" pos:column="5">pDest<pos:position pos:line="1721" pos:column="10"/></name><operator pos:line="1721" pos:column="10">-&gt;<pos:position pos:line="1721" pos:column="15"/></operator><name pos:line="1721" pos:column="12">z<pos:position pos:line="1721" pos:column="13"/></name></name> <operator pos:line="1721" pos:column="14">=<pos:position pos:line="1721" pos:column="15"/></operator> <name><name pos:line="1721" pos:column="16">sMem<pos:position pos:line="1721" pos:column="20"/></name><operator pos:line="1721" pos:column="20">.<pos:position pos:line="1721" pos:column="21"/></operator><name pos:line="1721" pos:column="21">z<pos:position pos:line="1721" pos:column="22"/></name></name></expr>;<pos:position pos:line="1721" pos:column="23"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="1722" pos:column="5">pDest<pos:position pos:line="1722" pos:column="10"/></name><operator pos:line="1722" pos:column="10">-&gt;<pos:position pos:line="1722" pos:column="15"/></operator><name pos:line="1722" pos:column="12">zMalloc<pos:position pos:line="1722" pos:column="19"/></name></name> <operator pos:line="1722" pos:column="20">=<pos:position pos:line="1722" pos:column="21"/></operator> <name><name pos:line="1722" pos:column="22">sMem<pos:position pos:line="1722" pos:column="26"/></name><operator pos:line="1722" pos:column="26">.<pos:position pos:line="1722" pos:column="27"/></operator><name pos:line="1722" pos:column="27">zMalloc<pos:position pos:line="1722" pos:column="34"/></name></name></expr>;<pos:position pos:line="1722" pos:column="35"/></expr_stmt>
  }<pos:position pos:line="1723" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="1725" pos:column="3">rc<pos:position pos:line="1725" pos:column="5"/></name> <operator pos:line="1725" pos:column="6">=<pos:position pos:line="1725" pos:column="7"/></operator> <call><name pos:line="1725" pos:column="8">sqlite3VdbeMemMakeWriteable<pos:position pos:line="1725" pos:column="35"/></name><argument_list pos:line="1725" pos:column="35">(<argument><expr><name pos:line="1725" pos:column="36">pDest<pos:position pos:line="1725" pos:column="41"/></name></expr></argument>)<pos:position pos:line="1725" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="1725" pos:column="43"/></expr_stmt>

<label><name pos:line="1727" pos:column="1">op_column_out<pos:position pos:line="1727" pos:column="14"/></name>:<pos:position pos:line="1727" pos:column="15"/></label>
  <expr_stmt><expr><call><name pos:line="1728" pos:column="3">UPDATE_MAX_BLOBSIZE<pos:position pos:line="1728" pos:column="22"/></name><argument_list pos:line="1728" pos:column="22">(<argument><expr><name pos:line="1728" pos:column="23">pDest<pos:position pos:line="1728" pos:column="28"/></name></expr></argument>)<pos:position pos:line="1728" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="1728" pos:column="30"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="1729" pos:column="3">REGISTER_TRACE<pos:position pos:line="1729" pos:column="17"/></name><argument_list pos:line="1729" pos:column="17">(<argument><expr><name><name pos:line="1729" pos:column="18">pOp<pos:position pos:line="1729" pos:column="21"/></name><operator pos:line="1729" pos:column="21">-&gt;<pos:position pos:line="1729" pos:column="26"/></operator><name pos:line="1729" pos:column="23">p3<pos:position pos:line="1729" pos:column="25"/></name></name></expr></argument>, <argument><expr><name pos:line="1729" pos:column="27">pDest<pos:position pos:line="1729" pos:column="32"/></name></expr></argument>)<pos:position pos:line="1729" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="1729" pos:column="34"/></expr_stmt>
  <break pos:line="1730" pos:column="3">break;<pos:position pos:line="1730" pos:column="9"/></break>
}<pos:position pos:line="1731" pos:column="2"/></block>

<comment type="block" pos:line="1733" pos:column="1">/* Opcode: Affinity P1 P2 * P4 *
**
** Apply affinities to a range of P2 registers starting with P1.
**
** P4 is a string that is P2 characters long. The nth character of the
** string indicates the column affinity that should be used for the nth
** memory cell in the range.
*/</comment>
<case pos:line="1741" pos:column="1">case <expr><name pos:line="1741" pos:column="6">OP_Affinity<pos:position pos:line="1741" pos:column="17"/></name></expr>:<pos:position pos:line="1741" pos:column="18"/></case> <block pos:line="1741" pos:column="19">{
  <decl_stmt><decl><type><name pos:line="1742" pos:column="3">char<pos:position pos:line="1742" pos:column="7"/></name> <modifier pos:line="1742" pos:column="8">*<pos:position pos:line="1742" pos:column="9"/></modifier></type><name pos:line="1742" pos:column="9">zAffinity<pos:position pos:line="1742" pos:column="18"/></name></decl>;<pos:position pos:line="1742" pos:column="19"/></decl_stmt>   <comment type="block" pos:line="1742" pos:column="22">/* The affinity to be applied */</comment>
  <decl_stmt><decl><type><name pos:line="1743" pos:column="3">Mem<pos:position pos:line="1743" pos:column="6"/></name> <modifier pos:line="1743" pos:column="7">*<pos:position pos:line="1743" pos:column="8"/></modifier></type><name pos:line="1743" pos:column="8">pData0<pos:position pos:line="1743" pos:column="14"/></name></decl>;<pos:position pos:line="1743" pos:column="15"/></decl_stmt>       <comment type="block" pos:line="1743" pos:column="22">/* First register to which to apply affinity */</comment>
  <decl_stmt><decl><type><name pos:line="1744" pos:column="3">Mem<pos:position pos:line="1744" pos:column="6"/></name> <modifier pos:line="1744" pos:column="7">*<pos:position pos:line="1744" pos:column="8"/></modifier></type><name pos:line="1744" pos:column="8">pLast<pos:position pos:line="1744" pos:column="13"/></name></decl>;<pos:position pos:line="1744" pos:column="14"/></decl_stmt>        <comment type="block" pos:line="1744" pos:column="22">/* Last register to which to apply affinity */</comment>
  <decl_stmt><decl><type><name pos:line="1745" pos:column="3">Mem<pos:position pos:line="1745" pos:column="6"/></name> <modifier pos:line="1745" pos:column="7">*<pos:position pos:line="1745" pos:column="8"/></modifier></type><name pos:line="1745" pos:column="8">pRec<pos:position pos:line="1745" pos:column="12"/></name></decl>;<pos:position pos:line="1745" pos:column="13"/></decl_stmt>         <comment type="block" pos:line="1745" pos:column="22">/* Current register */</comment>

  <expr_stmt><expr><name pos:line="1747" pos:column="3">zAffinity<pos:position pos:line="1747" pos:column="12"/></name> <operator pos:line="1747" pos:column="13">=<pos:position pos:line="1747" pos:column="14"/></operator> <name><name pos:line="1747" pos:column="15">pOp<pos:position pos:line="1747" pos:column="18"/></name><operator pos:line="1747" pos:column="18">-&gt;<pos:position pos:line="1747" pos:column="23"/></operator><name pos:line="1747" pos:column="20">p4<pos:position pos:line="1747" pos:column="22"/></name><operator pos:line="1747" pos:column="22">.<pos:position pos:line="1747" pos:column="23"/></operator><name pos:line="1747" pos:column="23">z<pos:position pos:line="1747" pos:column="24"/></name></name></expr>;<pos:position pos:line="1747" pos:column="25"/></expr_stmt>
  <expr_stmt><expr><name pos:line="1748" pos:column="3">pData0<pos:position pos:line="1748" pos:column="9"/></name> <operator pos:line="1748" pos:column="10">=<pos:position pos:line="1748" pos:column="11"/></operator> <operator pos:line="1748" pos:column="12">&amp;<pos:position pos:line="1748" pos:column="17"/></operator><name><name pos:line="1748" pos:column="13">p<pos:position pos:line="1748" pos:column="14"/></name><operator pos:line="1748" pos:column="14">-&gt;<pos:position pos:line="1748" pos:column="19"/></operator><name pos:line="1748" pos:column="16">aMem<pos:position pos:line="1748" pos:column="20"/></name><index pos:line="1748" pos:column="20">[<expr><name><name pos:line="1748" pos:column="21">pOp<pos:position pos:line="1748" pos:column="24"/></name><operator pos:line="1748" pos:column="24">-&gt;<pos:position pos:line="1748" pos:column="29"/></operator><name pos:line="1748" pos:column="26">p1<pos:position pos:line="1748" pos:column="28"/></name></name></expr>]<pos:position pos:line="1748" pos:column="29"/></index></name></expr>;<pos:position pos:line="1748" pos:column="30"/></expr_stmt>
  <expr_stmt><expr><name pos:line="1749" pos:column="3">pLast<pos:position pos:line="1749" pos:column="8"/></name> <operator pos:line="1749" pos:column="9">=<pos:position pos:line="1749" pos:column="10"/></operator> <operator pos:line="1749" pos:column="11">&amp;<pos:position pos:line="1749" pos:column="16"/></operator><name><name pos:line="1749" pos:column="12">pData0<pos:position pos:line="1749" pos:column="18"/></name><index pos:line="1749" pos:column="18">[<expr><name><name pos:line="1749" pos:column="19">pOp<pos:position pos:line="1749" pos:column="22"/></name><operator pos:line="1749" pos:column="22">-&gt;<pos:position pos:line="1749" pos:column="27"/></operator><name pos:line="1749" pos:column="24">p2<pos:position pos:line="1749" pos:column="26"/></name></name><operator pos:line="1749" pos:column="26">-<pos:position pos:line="1749" pos:column="27"/></operator><literal type="number" pos:line="1749" pos:column="27">1<pos:position pos:line="1749" pos:column="28"/></literal></expr>]<pos:position pos:line="1749" pos:column="29"/></index></name></expr>;<pos:position pos:line="1749" pos:column="30"/></expr_stmt>
  <for pos:line="1750" pos:column="3">for<control pos:line="1750" pos:column="6">(<init><expr><name pos:line="1750" pos:column="7">pRec<pos:position pos:line="1750" pos:column="11"/></name><operator pos:line="1750" pos:column="11">=<pos:position pos:line="1750" pos:column="12"/></operator><name pos:line="1750" pos:column="12">pData0<pos:position pos:line="1750" pos:column="18"/></name></expr>;<pos:position pos:line="1750" pos:column="19"/></init> <condition><expr><name pos:line="1750" pos:column="20">pRec<pos:position pos:line="1750" pos:column="24"/></name><operator pos:line="1750" pos:column="24">&lt;=<pos:position pos:line="1750" pos:column="29"/></operator><name pos:line="1750" pos:column="26">pLast<pos:position pos:line="1750" pos:column="31"/></name></expr>;<pos:position pos:line="1750" pos:column="32"/></condition> <incr><expr><name pos:line="1750" pos:column="33">pRec<pos:position pos:line="1750" pos:column="37"/></name><operator pos:line="1750" pos:column="37">++<pos:position pos:line="1750" pos:column="39"/></operator></expr></incr>)<pos:position pos:line="1750" pos:column="40"/></control><block pos:line="1750" pos:column="40">{
    <expr_stmt><expr><call><name pos:line="1751" pos:column="5">ExpandBlob<pos:position pos:line="1751" pos:column="15"/></name><argument_list pos:line="1751" pos:column="15">(<argument><expr><name pos:line="1751" pos:column="16">pRec<pos:position pos:line="1751" pos:column="20"/></name></expr></argument>)<pos:position pos:line="1751" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="1751" pos:column="22"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="1752" pos:column="5">applyAffinity<pos:position pos:line="1752" pos:column="18"/></name><argument_list pos:line="1752" pos:column="18">(<argument><expr><name pos:line="1752" pos:column="19">pRec<pos:position pos:line="1752" pos:column="23"/></name></expr></argument>, <argument><expr><name><name pos:line="1752" pos:column="25">zAffinity<pos:position pos:line="1752" pos:column="34"/></name><index pos:line="1752" pos:column="34">[<expr><name pos:line="1752" pos:column="35">pRec<pos:position pos:line="1752" pos:column="39"/></name><operator pos:line="1752" pos:column="39">-<pos:position pos:line="1752" pos:column="40"/></operator><name pos:line="1752" pos:column="40">pData0<pos:position pos:line="1752" pos:column="46"/></name></expr>]<pos:position pos:line="1752" pos:column="47"/></index></name></expr></argument>, <argument><expr><name pos:line="1752" pos:column="49">encoding<pos:position pos:line="1752" pos:column="57"/></name></expr></argument>)<pos:position pos:line="1752" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="1752" pos:column="59"/></expr_stmt>
  }<pos:position pos:line="1753" pos:column="4"/></block></for>
  <break pos:line="1754" pos:column="3">break;<pos:position pos:line="1754" pos:column="9"/></break>
}<pos:position pos:line="1755" pos:column="2"/></block>

<comment type="block" pos:line="1757" pos:column="1">/* Opcode: MakeRecord P1 P2 P3 P4 *
**
** Convert P2 registers beginning with P1 into a single entry
** suitable for use as a data record in a database table or as a key
** in an index.  The details of the format are irrelevant as long as
** the OP_Column opcode can decode the record later.
** Refer to source code comments for the details of the record
** format.
**
** P4 may be a string that is P2 characters long.  The nth character of the
** string indicates the column affinity that should be used for the nth
** field of the index key.
**
** The mapping from character to affinity is given by the SQLITE_AFF_
** macros defined in sqliteInt.h.
**
** If P4 is NULL then all index fields have the affinity NONE.
*/</comment>
<case pos:line="1775" pos:column="1">case <expr><name pos:line="1775" pos:column="6">OP_MakeRecord<pos:position pos:line="1775" pos:column="19"/></name></expr>:<pos:position pos:line="1775" pos:column="20"/></case> <block pos:line="1775" pos:column="21">{
  <decl_stmt><decl><type><name pos:line="1776" pos:column="3">u8<pos:position pos:line="1776" pos:column="5"/></name> <modifier pos:line="1776" pos:column="6">*<pos:position pos:line="1776" pos:column="7"/></modifier></type><name pos:line="1776" pos:column="7">zNewRecord<pos:position pos:line="1776" pos:column="17"/></name></decl>;<pos:position pos:line="1776" pos:column="18"/></decl_stmt>        <comment type="block" pos:line="1776" pos:column="26">/* A buffer to hold the data for the new record */</comment>
  <decl_stmt><decl><type><name pos:line="1777" pos:column="3">Mem<pos:position pos:line="1777" pos:column="6"/></name> <modifier pos:line="1777" pos:column="7">*<pos:position pos:line="1777" pos:column="8"/></modifier></type><name pos:line="1777" pos:column="8">pRec<pos:position pos:line="1777" pos:column="12"/></name></decl>;<pos:position pos:line="1777" pos:column="13"/></decl_stmt>             <comment type="block" pos:line="1777" pos:column="26">/* The new record */</comment>
  <decl_stmt><decl><type><name pos:line="1778" pos:column="3">u64<pos:position pos:line="1778" pos:column="6"/></name></type> <name pos:line="1778" pos:column="7">nData<pos:position pos:line="1778" pos:column="12"/></name></decl>;<pos:position pos:line="1778" pos:column="13"/></decl_stmt>             <comment type="block" pos:line="1778" pos:column="26">/* Number of bytes of data space */</comment>
  <decl_stmt><decl><type><name pos:line="1779" pos:column="3">int<pos:position pos:line="1779" pos:column="6"/></name></type> <name pos:line="1779" pos:column="7">nHdr<pos:position pos:line="1779" pos:column="11"/></name></decl>;<pos:position pos:line="1779" pos:column="12"/></decl_stmt>              <comment type="block" pos:line="1779" pos:column="26">/* Number of bytes of header space */</comment>
  <decl_stmt><decl><type><name pos:line="1780" pos:column="3">i64<pos:position pos:line="1780" pos:column="6"/></name></type> <name pos:line="1780" pos:column="7">nByte<pos:position pos:line="1780" pos:column="12"/></name></decl>;<pos:position pos:line="1780" pos:column="13"/></decl_stmt>             <comment type="block" pos:line="1780" pos:column="26">/* Data space required for this record */</comment>
  <decl_stmt><decl><type><name pos:line="1781" pos:column="3">int<pos:position pos:line="1781" pos:column="6"/></name></type> <name pos:line="1781" pos:column="7">nZero<pos:position pos:line="1781" pos:column="12"/></name></decl>;<pos:position pos:line="1781" pos:column="13"/></decl_stmt>             <comment type="block" pos:line="1781" pos:column="26">/* Number of zero bytes at the end of the record */</comment>
  <decl_stmt><decl><type><name pos:line="1782" pos:column="3">int<pos:position pos:line="1782" pos:column="6"/></name></type> <name pos:line="1782" pos:column="7">nVarint<pos:position pos:line="1782" pos:column="14"/></name></decl>;<pos:position pos:line="1782" pos:column="15"/></decl_stmt>           <comment type="block" pos:line="1782" pos:column="26">/* Number of bytes in a varint */</comment>
  <decl_stmt><decl><type><name pos:line="1783" pos:column="3">u32<pos:position pos:line="1783" pos:column="6"/></name></type> <name pos:line="1783" pos:column="7">serial_type<pos:position pos:line="1783" pos:column="18"/></name></decl>;<pos:position pos:line="1783" pos:column="19"/></decl_stmt>       <comment type="block" pos:line="1783" pos:column="26">/* Type field */</comment>
  <decl_stmt><decl><type><name pos:line="1784" pos:column="3">Mem<pos:position pos:line="1784" pos:column="6"/></name> <modifier pos:line="1784" pos:column="7">*<pos:position pos:line="1784" pos:column="8"/></modifier></type><name pos:line="1784" pos:column="8">pData0<pos:position pos:line="1784" pos:column="14"/></name></decl>;<pos:position pos:line="1784" pos:column="15"/></decl_stmt>           <comment type="block" pos:line="1784" pos:column="26">/* First field to be combined into the record */</comment>
  <decl_stmt><decl><type><name pos:line="1785" pos:column="3">Mem<pos:position pos:line="1785" pos:column="6"/></name> <modifier pos:line="1785" pos:column="7">*<pos:position pos:line="1785" pos:column="8"/></modifier></type><name pos:line="1785" pos:column="8">pLast<pos:position pos:line="1785" pos:column="13"/></name></decl>;<pos:position pos:line="1785" pos:column="14"/></decl_stmt>            <comment type="block" pos:line="1785" pos:column="26">/* Last field of the record */</comment>
  <decl_stmt><decl><type><name pos:line="1786" pos:column="3">int<pos:position pos:line="1786" pos:column="6"/></name></type> <name pos:line="1786" pos:column="7">nField<pos:position pos:line="1786" pos:column="13"/></name></decl>;<pos:position pos:line="1786" pos:column="14"/></decl_stmt>            <comment type="block" pos:line="1786" pos:column="26">/* Number of fields in the record */</comment>
  <decl_stmt><decl><type><name pos:line="1787" pos:column="3">char<pos:position pos:line="1787" pos:column="7"/></name> <modifier pos:line="1787" pos:column="8">*<pos:position pos:line="1787" pos:column="9"/></modifier></type><name pos:line="1787" pos:column="9">zAffinity<pos:position pos:line="1787" pos:column="18"/></name></decl>;<pos:position pos:line="1787" pos:column="19"/></decl_stmt>       <comment type="block" pos:line="1787" pos:column="26">/* The affinity string for the record */</comment>
  <decl_stmt><decl><type><name pos:line="1788" pos:column="3">int<pos:position pos:line="1788" pos:column="6"/></name></type> <name pos:line="1788" pos:column="7">file_format<pos:position pos:line="1788" pos:column="18"/></name></decl>;<pos:position pos:line="1788" pos:column="19"/></decl_stmt>       <comment type="block" pos:line="1788" pos:column="26">/* File format to use for encoding */</comment>
  <decl_stmt><decl><type><name pos:line="1789" pos:column="3">int<pos:position pos:line="1789" pos:column="6"/></name></type> <name pos:line="1789" pos:column="7">i<pos:position pos:line="1789" pos:column="8"/></name></decl>;<pos:position pos:line="1789" pos:column="9"/></decl_stmt>                 <comment type="block" pos:line="1789" pos:column="26">/* Space used in zNewRecord[] */</comment>
  <decl_stmt><decl><type><name pos:line="1790" pos:column="3">int<pos:position pos:line="1790" pos:column="6"/></name></type> <name pos:line="1790" pos:column="7">len<pos:position pos:line="1790" pos:column="10"/></name></decl>;<pos:position pos:line="1790" pos:column="11"/></decl_stmt>               <comment type="block" pos:line="1790" pos:column="26">/* Length of a field */</comment>

  <comment type="block" pos:line="1792" pos:column="3">/* Assuming the record contains N fields, the record format looks
  ** like this:
  **
  ** ------------------------------------------------------------------------
  ** | hdr-size | type 0 | type 1 | ... | type N-1 | data0 | ... | data N-1 | 
  ** ------------------------------------------------------------------------
  **
  ** Data(0) is taken from register P1.  Data(1) comes from register P1+1
  ** and so froth.
  **
  ** Each type field is a varint representing the serial type of the 
  ** corresponding data element (see sqlite3VdbeSerialType()). The
  ** hdr-size field is also a varint which is the offset from the beginning
  ** of the record to data0.
  */</comment>
  <expr_stmt><expr><name pos:line="1807" pos:column="3">nData<pos:position pos:line="1807" pos:column="8"/></name> <operator pos:line="1807" pos:column="9">=<pos:position pos:line="1807" pos:column="10"/></operator> <literal type="number" pos:line="1807" pos:column="11">0<pos:position pos:line="1807" pos:column="12"/></literal></expr>;<pos:position pos:line="1807" pos:column="13"/></expr_stmt>         <comment type="block" pos:line="1807" pos:column="22">/* Number of bytes of data space */</comment>
  <expr_stmt><expr><name pos:line="1808" pos:column="3">nHdr<pos:position pos:line="1808" pos:column="7"/></name> <operator pos:line="1808" pos:column="8">=<pos:position pos:line="1808" pos:column="9"/></operator> <literal type="number" pos:line="1808" pos:column="10">0<pos:position pos:line="1808" pos:column="11"/></literal></expr>;<pos:position pos:line="1808" pos:column="12"/></expr_stmt>          <comment type="block" pos:line="1808" pos:column="22">/* Number of bytes of header space */</comment>
  <expr_stmt><expr><name pos:line="1809" pos:column="3">nByte<pos:position pos:line="1809" pos:column="8"/></name> <operator pos:line="1809" pos:column="9">=<pos:position pos:line="1809" pos:column="10"/></operator> <literal type="number" pos:line="1809" pos:column="11">0<pos:position pos:line="1809" pos:column="12"/></literal></expr>;<pos:position pos:line="1809" pos:column="13"/></expr_stmt>         <comment type="block" pos:line="1809" pos:column="22">/* Data space required for this record */</comment>
  <expr_stmt><expr><name pos:line="1810" pos:column="3">nZero<pos:position pos:line="1810" pos:column="8"/></name> <operator pos:line="1810" pos:column="9">=<pos:position pos:line="1810" pos:column="10"/></operator> <literal type="number" pos:line="1810" pos:column="11">0<pos:position pos:line="1810" pos:column="12"/></literal></expr>;<pos:position pos:line="1810" pos:column="13"/></expr_stmt>         <comment type="block" pos:line="1810" pos:column="22">/* Number of zero bytes at the end of the record */</comment>
  <expr_stmt><expr><name pos:line="1811" pos:column="3">nField<pos:position pos:line="1811" pos:column="9"/></name> <operator pos:line="1811" pos:column="10">=<pos:position pos:line="1811" pos:column="11"/></operator> <name><name pos:line="1811" pos:column="12">pOp<pos:position pos:line="1811" pos:column="15"/></name><operator pos:line="1811" pos:column="15">-&gt;<pos:position pos:line="1811" pos:column="20"/></operator><name pos:line="1811" pos:column="17">p1<pos:position pos:line="1811" pos:column="19"/></name></name></expr>;<pos:position pos:line="1811" pos:column="20"/></expr_stmt>
  <expr_stmt><expr><name pos:line="1812" pos:column="3">zAffinity<pos:position pos:line="1812" pos:column="12"/></name> <operator pos:line="1812" pos:column="13">=<pos:position pos:line="1812" pos:column="14"/></operator> <name><name pos:line="1812" pos:column="15">pOp<pos:position pos:line="1812" pos:column="18"/></name><operator pos:line="1812" pos:column="18">-&gt;<pos:position pos:line="1812" pos:column="23"/></operator><name pos:line="1812" pos:column="20">p4<pos:position pos:line="1812" pos:column="22"/></name><operator pos:line="1812" pos:column="22">.<pos:position pos:line="1812" pos:column="23"/></operator><name pos:line="1812" pos:column="23">z<pos:position pos:line="1812" pos:column="24"/></name></name></expr>;<pos:position pos:line="1812" pos:column="25"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="1813" pos:column="3">assert<pos:position pos:line="1813" pos:column="9"/></name><argument_list pos:line="1813" pos:column="9">( <argument><expr><name pos:line="1813" pos:column="11">nField<pos:position pos:line="1813" pos:column="17"/></name><operator pos:line="1813" pos:column="17">&gt;<pos:position pos:line="1813" pos:column="21"/></operator><literal type="number" pos:line="1813" pos:column="18">0<pos:position pos:line="1813" pos:column="19"/></literal> <operator pos:line="1813" pos:column="20">&amp;&amp;<pos:position pos:line="1813" pos:column="30"/></operator> <name><name pos:line="1813" pos:column="23">pOp<pos:position pos:line="1813" pos:column="26"/></name><operator pos:line="1813" pos:column="26">-&gt;<pos:position pos:line="1813" pos:column="31"/></operator><name pos:line="1813" pos:column="28">p2<pos:position pos:line="1813" pos:column="30"/></name></name><operator pos:line="1813" pos:column="30">&gt;<pos:position pos:line="1813" pos:column="34"/></operator><literal type="number" pos:line="1813" pos:column="31">0<pos:position pos:line="1813" pos:column="32"/></literal> <operator pos:line="1813" pos:column="33">&amp;&amp;<pos:position pos:line="1813" pos:column="43"/></operator> <name><name pos:line="1813" pos:column="36">pOp<pos:position pos:line="1813" pos:column="39"/></name><operator pos:line="1813" pos:column="39">-&gt;<pos:position pos:line="1813" pos:column="44"/></operator><name pos:line="1813" pos:column="41">p2<pos:position pos:line="1813" pos:column="43"/></name></name><operator pos:line="1813" pos:column="43">+<pos:position pos:line="1813" pos:column="44"/></operator><name pos:line="1813" pos:column="44">nField<pos:position pos:line="1813" pos:column="50"/></name><operator pos:line="1813" pos:column="50">&lt;=<pos:position pos:line="1813" pos:column="55"/></operator><name><name pos:line="1813" pos:column="52">p<pos:position pos:line="1813" pos:column="53"/></name><operator pos:line="1813" pos:column="53">-&gt;<pos:position pos:line="1813" pos:column="58"/></operator><name pos:line="1813" pos:column="55">nMem<pos:position pos:line="1813" pos:column="59"/></name></name><operator pos:line="1813" pos:column="59">+<pos:position pos:line="1813" pos:column="60"/></operator><literal type="number" pos:line="1813" pos:column="60">1<pos:position pos:line="1813" pos:column="61"/></literal></expr></argument> )<pos:position pos:line="1813" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="1813" pos:column="64"/></expr_stmt>
  <expr_stmt><expr><name pos:line="1814" pos:column="3">pData0<pos:position pos:line="1814" pos:column="9"/></name> <operator pos:line="1814" pos:column="10">=<pos:position pos:line="1814" pos:column="11"/></operator> <operator pos:line="1814" pos:column="12">&amp;<pos:position pos:line="1814" pos:column="17"/></operator><name><name pos:line="1814" pos:column="13">p<pos:position pos:line="1814" pos:column="14"/></name><operator pos:line="1814" pos:column="14">-&gt;<pos:position pos:line="1814" pos:column="19"/></operator><name pos:line="1814" pos:column="16">aMem<pos:position pos:line="1814" pos:column="20"/></name><index pos:line="1814" pos:column="20">[<expr><name pos:line="1814" pos:column="21">nField<pos:position pos:line="1814" pos:column="27"/></name></expr>]<pos:position pos:line="1814" pos:column="28"/></index></name></expr>;<pos:position pos:line="1814" pos:column="29"/></expr_stmt>
  <expr_stmt><expr><name pos:line="1815" pos:column="3">nField<pos:position pos:line="1815" pos:column="9"/></name> <operator pos:line="1815" pos:column="10">=<pos:position pos:line="1815" pos:column="11"/></operator> <name><name pos:line="1815" pos:column="12">pOp<pos:position pos:line="1815" pos:column="15"/></name><operator pos:line="1815" pos:column="15">-&gt;<pos:position pos:line="1815" pos:column="20"/></operator><name pos:line="1815" pos:column="17">p2<pos:position pos:line="1815" pos:column="19"/></name></name></expr>;<pos:position pos:line="1815" pos:column="20"/></expr_stmt>
  <expr_stmt><expr><name pos:line="1816" pos:column="3">pLast<pos:position pos:line="1816" pos:column="8"/></name> <operator pos:line="1816" pos:column="9">=<pos:position pos:line="1816" pos:column="10"/></operator> <operator pos:line="1816" pos:column="11">&amp;<pos:position pos:line="1816" pos:column="16"/></operator><name><name pos:line="1816" pos:column="12">pData0<pos:position pos:line="1816" pos:column="18"/></name><index pos:line="1816" pos:column="18">[<expr><name pos:line="1816" pos:column="19">nField<pos:position pos:line="1816" pos:column="25"/></name><operator pos:line="1816" pos:column="25">-<pos:position pos:line="1816" pos:column="26"/></operator><literal type="number" pos:line="1816" pos:column="26">1<pos:position pos:line="1816" pos:column="27"/></literal></expr>]<pos:position pos:line="1816" pos:column="28"/></index></name></expr>;<pos:position pos:line="1816" pos:column="29"/></expr_stmt>
  <expr_stmt><expr><name pos:line="1817" pos:column="3">file_format<pos:position pos:line="1817" pos:column="14"/></name> <operator pos:line="1817" pos:column="15">=<pos:position pos:line="1817" pos:column="16"/></operator> <name><name pos:line="1817" pos:column="17">p<pos:position pos:line="1817" pos:column="18"/></name><operator pos:line="1817" pos:column="18">-&gt;<pos:position pos:line="1817" pos:column="23"/></operator><name pos:line="1817" pos:column="20">minWriteFileFormat<pos:position pos:line="1817" pos:column="38"/></name></name></expr>;<pos:position pos:line="1817" pos:column="39"/></expr_stmt>

  <comment type="block" pos:line="1819" pos:column="3">/* Loop through the elements that will make up the record to figure
  ** out how much space is required for the new record.
  */</comment>
  <for pos:line="1822" pos:column="3">for<control pos:line="1822" pos:column="6">(<init><expr><name pos:line="1822" pos:column="7">pRec<pos:position pos:line="1822" pos:column="11"/></name><operator pos:line="1822" pos:column="11">=<pos:position pos:line="1822" pos:column="12"/></operator><name pos:line="1822" pos:column="12">pData0<pos:position pos:line="1822" pos:column="18"/></name></expr>;<pos:position pos:line="1822" pos:column="19"/></init> <condition><expr><name pos:line="1822" pos:column="20">pRec<pos:position pos:line="1822" pos:column="24"/></name><operator pos:line="1822" pos:column="24">&lt;=<pos:position pos:line="1822" pos:column="29"/></operator><name pos:line="1822" pos:column="26">pLast<pos:position pos:line="1822" pos:column="31"/></name></expr>;<pos:position pos:line="1822" pos:column="32"/></condition> <incr><expr><name pos:line="1822" pos:column="33">pRec<pos:position pos:line="1822" pos:column="37"/></name><operator pos:line="1822" pos:column="37">++<pos:position pos:line="1822" pos:column="39"/></operator></expr></incr>)<pos:position pos:line="1822" pos:column="40"/></control><block pos:line="1822" pos:column="40">{
    <if pos:line="1823" pos:column="5">if<condition pos:line="1823" pos:column="7">( <expr><name pos:line="1823" pos:column="9">zAffinity<pos:position pos:line="1823" pos:column="18"/></name></expr> )<pos:position pos:line="1823" pos:column="20"/></condition><then><block pos:line="1823" pos:column="20">{
      <expr_stmt><expr><call><name pos:line="1824" pos:column="7">applyAffinity<pos:position pos:line="1824" pos:column="20"/></name><argument_list pos:line="1824" pos:column="20">(<argument><expr><name pos:line="1824" pos:column="21">pRec<pos:position pos:line="1824" pos:column="25"/></name></expr></argument>, <argument><expr><name><name pos:line="1824" pos:column="27">zAffinity<pos:position pos:line="1824" pos:column="36"/></name><index pos:line="1824" pos:column="36">[<expr><name pos:line="1824" pos:column="37">pRec<pos:position pos:line="1824" pos:column="41"/></name><operator pos:line="1824" pos:column="41">-<pos:position pos:line="1824" pos:column="42"/></operator><name pos:line="1824" pos:column="42">pData0<pos:position pos:line="1824" pos:column="48"/></name></expr>]<pos:position pos:line="1824" pos:column="49"/></index></name></expr></argument>, <argument><expr><name pos:line="1824" pos:column="51">encoding<pos:position pos:line="1824" pos:column="59"/></name></expr></argument>)<pos:position pos:line="1824" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="1824" pos:column="61"/></expr_stmt>
    }<pos:position pos:line="1825" pos:column="6"/></block></then></if>
    <if pos:line="1826" pos:column="5">if<condition pos:line="1826" pos:column="7">( <expr><name><name pos:line="1826" pos:column="9">pRec<pos:position pos:line="1826" pos:column="13"/></name><operator pos:line="1826" pos:column="13">-&gt;<pos:position pos:line="1826" pos:column="18"/></operator><name pos:line="1826" pos:column="15">flags<pos:position pos:line="1826" pos:column="20"/></name></name><operator pos:line="1826" pos:column="20">&amp;<pos:position pos:line="1826" pos:column="25"/></operator><name pos:line="1826" pos:column="21">MEM_Zero<pos:position pos:line="1826" pos:column="29"/></name> <operator pos:line="1826" pos:column="30">&amp;&amp;<pos:position pos:line="1826" pos:column="40"/></operator> <name><name pos:line="1826" pos:column="33">pRec<pos:position pos:line="1826" pos:column="37"/></name><operator pos:line="1826" pos:column="37">-&gt;<pos:position pos:line="1826" pos:column="42"/></operator><name pos:line="1826" pos:column="39">n<pos:position pos:line="1826" pos:column="40"/></name></name><operator pos:line="1826" pos:column="40">&gt;<pos:position pos:line="1826" pos:column="44"/></operator><literal type="number" pos:line="1826" pos:column="41">0<pos:position pos:line="1826" pos:column="42"/></literal></expr> )<pos:position pos:line="1826" pos:column="44"/></condition><then><block pos:line="1826" pos:column="44">{
      <expr_stmt><expr><call><name pos:line="1827" pos:column="7">sqlite3VdbeMemExpandBlob<pos:position pos:line="1827" pos:column="31"/></name><argument_list pos:line="1827" pos:column="31">(<argument><expr><name pos:line="1827" pos:column="32">pRec<pos:position pos:line="1827" pos:column="36"/></name></expr></argument>)<pos:position pos:line="1827" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="1827" pos:column="38"/></expr_stmt>
    }<pos:position pos:line="1828" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="1829" pos:column="5">serial_type<pos:position pos:line="1829" pos:column="16"/></name> <operator pos:line="1829" pos:column="17">=<pos:position pos:line="1829" pos:column="18"/></operator> <call><name pos:line="1829" pos:column="19">sqlite3VdbeSerialType<pos:position pos:line="1829" pos:column="40"/></name><argument_list pos:line="1829" pos:column="40">(<argument><expr><name pos:line="1829" pos:column="41">pRec<pos:position pos:line="1829" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="1829" pos:column="47">file_format<pos:position pos:line="1829" pos:column="58"/></name></expr></argument>)<pos:position pos:line="1829" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="1829" pos:column="60"/></expr_stmt>
    <expr_stmt><expr><name pos:line="1830" pos:column="5">len<pos:position pos:line="1830" pos:column="8"/></name> <operator pos:line="1830" pos:column="9">=<pos:position pos:line="1830" pos:column="10"/></operator> <call><name pos:line="1830" pos:column="11">sqlite3VdbeSerialTypeLen<pos:position pos:line="1830" pos:column="35"/></name><argument_list pos:line="1830" pos:column="35">(<argument><expr><name pos:line="1830" pos:column="36">serial_type<pos:position pos:line="1830" pos:column="47"/></name></expr></argument>)<pos:position pos:line="1830" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="1830" pos:column="49"/></expr_stmt>
    <expr_stmt><expr><name pos:line="1831" pos:column="5">nData<pos:position pos:line="1831" pos:column="10"/></name> <operator pos:line="1831" pos:column="11">+=<pos:position pos:line="1831" pos:column="13"/></operator> <name pos:line="1831" pos:column="14">len<pos:position pos:line="1831" pos:column="17"/></name></expr>;<pos:position pos:line="1831" pos:column="18"/></expr_stmt>
    <expr_stmt><expr><name pos:line="1832" pos:column="5">nHdr<pos:position pos:line="1832" pos:column="9"/></name> <operator pos:line="1832" pos:column="10">+=<pos:position pos:line="1832" pos:column="12"/></operator> <call><name pos:line="1832" pos:column="13">sqlite3VarintLen<pos:position pos:line="1832" pos:column="29"/></name><argument_list pos:line="1832" pos:column="29">(<argument><expr><name pos:line="1832" pos:column="30">serial_type<pos:position pos:line="1832" pos:column="41"/></name></expr></argument>)<pos:position pos:line="1832" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="1832" pos:column="43"/></expr_stmt>
    <if pos:line="1833" pos:column="5">if<condition pos:line="1833" pos:column="7">( <expr><name><name pos:line="1833" pos:column="9">pRec<pos:position pos:line="1833" pos:column="13"/></name><operator pos:line="1833" pos:column="13">-&gt;<pos:position pos:line="1833" pos:column="18"/></operator><name pos:line="1833" pos:column="15">flags<pos:position pos:line="1833" pos:column="20"/></name></name> <operator pos:line="1833" pos:column="21">&amp;<pos:position pos:line="1833" pos:column="26"/></operator> <name pos:line="1833" pos:column="23">MEM_Zero<pos:position pos:line="1833" pos:column="31"/></name></expr> )<pos:position pos:line="1833" pos:column="33"/></condition><then><block pos:line="1833" pos:column="33">{
      <comment type="block" pos:line="1834" pos:column="7">/* Only pure zero-filled BLOBs can be input to this Opcode.
      ** We do not allow blobs with a prefix and a zero-filled tail. */</comment>
      <expr_stmt><expr><name pos:line="1836" pos:column="7">nZero<pos:position pos:line="1836" pos:column="12"/></name> <operator pos:line="1836" pos:column="13">+=<pos:position pos:line="1836" pos:column="15"/></operator> <name><name pos:line="1836" pos:column="16">pRec<pos:position pos:line="1836" pos:column="20"/></name><operator pos:line="1836" pos:column="20">-&gt;<pos:position pos:line="1836" pos:column="25"/></operator><name pos:line="1836" pos:column="22">u<pos:position pos:line="1836" pos:column="23"/></name><operator pos:line="1836" pos:column="23">.<pos:position pos:line="1836" pos:column="24"/></operator><name pos:line="1836" pos:column="24">nZero<pos:position pos:line="1836" pos:column="29"/></name></name></expr>;<pos:position pos:line="1836" pos:column="30"/></expr_stmt>
    }<pos:position pos:line="1837" pos:column="6"/></block></then><elseif pos:line="1837" pos:column="6">else <if pos:line="1837" pos:column="11">if<condition pos:line="1837" pos:column="13">( <expr><name pos:line="1837" pos:column="15">len<pos:position pos:line="1837" pos:column="18"/></name></expr> )<pos:position pos:line="1837" pos:column="20"/></condition><then><block pos:line="1837" pos:column="20">{
      <expr_stmt><expr><name pos:line="1838" pos:column="7">nZero<pos:position pos:line="1838" pos:column="12"/></name> <operator pos:line="1838" pos:column="13">=<pos:position pos:line="1838" pos:column="14"/></operator> <literal type="number" pos:line="1838" pos:column="15">0<pos:position pos:line="1838" pos:column="16"/></literal></expr>;<pos:position pos:line="1838" pos:column="17"/></expr_stmt>
    }<pos:position pos:line="1839" pos:column="6"/></block></then></if></elseif></if>
  }<pos:position pos:line="1840" pos:column="4"/></block></for>

  <comment type="block" pos:line="1842" pos:column="3">/* Add the initial header varint and total the size */</comment>
  <expr_stmt><expr><name pos:line="1843" pos:column="3">nHdr<pos:position pos:line="1843" pos:column="7"/></name> <operator pos:line="1843" pos:column="8">+=<pos:position pos:line="1843" pos:column="10"/></operator> <name pos:line="1843" pos:column="11">nVarint<pos:position pos:line="1843" pos:column="18"/></name> <operator pos:line="1843" pos:column="19">=<pos:position pos:line="1843" pos:column="20"/></operator> <call><name pos:line="1843" pos:column="21">sqlite3VarintLen<pos:position pos:line="1843" pos:column="37"/></name><argument_list pos:line="1843" pos:column="37">(<argument><expr><name pos:line="1843" pos:column="38">nHdr<pos:position pos:line="1843" pos:column="42"/></name></expr></argument>)<pos:position pos:line="1843" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="1843" pos:column="44"/></expr_stmt>
  <if pos:line="1844" pos:column="3">if<condition pos:line="1844" pos:column="5">( <expr><name pos:line="1844" pos:column="7">nVarint<pos:position pos:line="1844" pos:column="14"/></name><operator pos:line="1844" pos:column="14">&lt;<pos:position pos:line="1844" pos:column="18"/></operator><call><name pos:line="1844" pos:column="15">sqlite3VarintLen<pos:position pos:line="1844" pos:column="31"/></name><argument_list pos:line="1844" pos:column="31">(<argument><expr><name pos:line="1844" pos:column="32">nHdr<pos:position pos:line="1844" pos:column="36"/></name></expr></argument>)<pos:position pos:line="1844" pos:column="37"/></argument_list></call></expr> )<pos:position pos:line="1844" pos:column="39"/></condition><then><block pos:line="1844" pos:column="39">{
    <expr_stmt><expr><name pos:line="1845" pos:column="5">nHdr<pos:position pos:line="1845" pos:column="9"/></name><operator pos:line="1845" pos:column="9">++<pos:position pos:line="1845" pos:column="11"/></operator></expr>;<pos:position pos:line="1845" pos:column="12"/></expr_stmt>
  }<pos:position pos:line="1846" pos:column="4"/></block></then></if>
  <expr_stmt><expr><name pos:line="1847" pos:column="3">nByte<pos:position pos:line="1847" pos:column="8"/></name> <operator pos:line="1847" pos:column="9">=<pos:position pos:line="1847" pos:column="10"/></operator> <name pos:line="1847" pos:column="11">nHdr<pos:position pos:line="1847" pos:column="15"/></name><operator pos:line="1847" pos:column="15">+<pos:position pos:line="1847" pos:column="16"/></operator><name pos:line="1847" pos:column="16">nData<pos:position pos:line="1847" pos:column="21"/></name><operator pos:line="1847" pos:column="21">-<pos:position pos:line="1847" pos:column="22"/></operator><name pos:line="1847" pos:column="22">nZero<pos:position pos:line="1847" pos:column="27"/></name></expr>;<pos:position pos:line="1847" pos:column="28"/></expr_stmt>
  <if pos:line="1848" pos:column="3">if<condition pos:line="1848" pos:column="5">( <expr><name pos:line="1848" pos:column="7">nByte<pos:position pos:line="1848" pos:column="12"/></name><operator pos:line="1848" pos:column="12">&gt;<pos:position pos:line="1848" pos:column="16"/></operator><name><name pos:line="1848" pos:column="13">db<pos:position pos:line="1848" pos:column="15"/></name><operator pos:line="1848" pos:column="15">-&gt;<pos:position pos:line="1848" pos:column="20"/></operator><name pos:line="1848" pos:column="17">aLimit<pos:position pos:line="1848" pos:column="23"/></name><index pos:line="1848" pos:column="23">[<expr><name pos:line="1848" pos:column="24">SQLITE_LIMIT_LENGTH<pos:position pos:line="1848" pos:column="43"/></name></expr>]<pos:position pos:line="1848" pos:column="44"/></index></name></expr> )<pos:position pos:line="1848" pos:column="46"/></condition><then><block pos:line="1848" pos:column="46">{
    <goto pos:line="1849" pos:column="5">goto <name pos:line="1849" pos:column="10">too_big<pos:position pos:line="1849" pos:column="17"/></name>;<pos:position pos:line="1849" pos:column="18"/></goto>
  }<pos:position pos:line="1850" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="1852" pos:column="3">/* Make sure the output register has a buffer large enough to store 
  ** the new record. The output register (pOp-&gt;p3) is not allowed to
  ** be one of the input registers (because the following call to
  ** sqlite3VdbeMemGrow() could clobber the value before it is used).
  */</comment>
  <expr_stmt><expr><call><name pos:line="1857" pos:column="3">assert<pos:position pos:line="1857" pos:column="9"/></name><argument_list pos:line="1857" pos:column="9">( <argument><expr><name><name pos:line="1857" pos:column="11">pOp<pos:position pos:line="1857" pos:column="14"/></name><operator pos:line="1857" pos:column="14">-&gt;<pos:position pos:line="1857" pos:column="19"/></operator><name pos:line="1857" pos:column="16">p3<pos:position pos:line="1857" pos:column="18"/></name></name><operator pos:line="1857" pos:column="18">&lt;<pos:position pos:line="1857" pos:column="22"/></operator><name><name pos:line="1857" pos:column="19">pOp<pos:position pos:line="1857" pos:column="22"/></name><operator pos:line="1857" pos:column="22">-&gt;<pos:position pos:line="1857" pos:column="27"/></operator><name pos:line="1857" pos:column="24">p1<pos:position pos:line="1857" pos:column="26"/></name></name> <operator pos:line="1857" pos:column="27">||<pos:position pos:line="1857" pos:column="29"/></operator> <name><name pos:line="1857" pos:column="30">pOp<pos:position pos:line="1857" pos:column="33"/></name><operator pos:line="1857" pos:column="33">-&gt;<pos:position pos:line="1857" pos:column="38"/></operator><name pos:line="1857" pos:column="35">p3<pos:position pos:line="1857" pos:column="37"/></name></name><operator pos:line="1857" pos:column="37">&gt;=<pos:position pos:line="1857" pos:column="42"/></operator><name><name pos:line="1857" pos:column="39">pOp<pos:position pos:line="1857" pos:column="42"/></name><operator pos:line="1857" pos:column="42">-&gt;<pos:position pos:line="1857" pos:column="47"/></operator><name pos:line="1857" pos:column="44">p1<pos:position pos:line="1857" pos:column="46"/></name></name><operator pos:line="1857" pos:column="46">+<pos:position pos:line="1857" pos:column="47"/></operator><name><name pos:line="1857" pos:column="47">pOp<pos:position pos:line="1857" pos:column="50"/></name><operator pos:line="1857" pos:column="50">-&gt;<pos:position pos:line="1857" pos:column="55"/></operator><name pos:line="1857" pos:column="52">p2<pos:position pos:line="1857" pos:column="54"/></name></name></expr></argument> )<pos:position pos:line="1857" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="1857" pos:column="57"/></expr_stmt>
  <expr_stmt><expr><name pos:line="1858" pos:column="3">pOut<pos:position pos:line="1858" pos:column="7"/></name> <operator pos:line="1858" pos:column="8">=<pos:position pos:line="1858" pos:column="9"/></operator> <operator pos:line="1858" pos:column="10">&amp;<pos:position pos:line="1858" pos:column="15"/></operator><name><name pos:line="1858" pos:column="11">p<pos:position pos:line="1858" pos:column="12"/></name><operator pos:line="1858" pos:column="12">-&gt;<pos:position pos:line="1858" pos:column="17"/></operator><name pos:line="1858" pos:column="14">aMem<pos:position pos:line="1858" pos:column="18"/></name><index pos:line="1858" pos:column="18">[<expr><name><name pos:line="1858" pos:column="19">pOp<pos:position pos:line="1858" pos:column="22"/></name><operator pos:line="1858" pos:column="22">-&gt;<pos:position pos:line="1858" pos:column="27"/></operator><name pos:line="1858" pos:column="24">p3<pos:position pos:line="1858" pos:column="26"/></name></name></expr>]<pos:position pos:line="1858" pos:column="27"/></index></name></expr>;<pos:position pos:line="1858" pos:column="28"/></expr_stmt>
  <if pos:line="1859" pos:column="3">if<condition pos:line="1859" pos:column="5">( <expr><call><name pos:line="1859" pos:column="7">sqlite3VdbeMemGrow<pos:position pos:line="1859" pos:column="25"/></name><argument_list pos:line="1859" pos:column="25">(<argument><expr><name pos:line="1859" pos:column="26">pOut<pos:position pos:line="1859" pos:column="30"/></name></expr></argument>, <argument><expr><operator pos:line="1859" pos:column="32">(<pos:position pos:line="1859" pos:column="33"/></operator><name pos:line="1859" pos:column="33">int<pos:position pos:line="1859" pos:column="36"/></name><operator pos:line="1859" pos:column="36">)<pos:position pos:line="1859" pos:column="37"/></operator><name pos:line="1859" pos:column="37">nByte<pos:position pos:line="1859" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="1859" pos:column="44">0<pos:position pos:line="1859" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="1859" pos:column="46"/></argument_list></call></expr> )<pos:position pos:line="1859" pos:column="48"/></condition><then><block pos:line="1859" pos:column="48">{
    <goto pos:line="1860" pos:column="5">goto <name pos:line="1860" pos:column="10">no_mem<pos:position pos:line="1860" pos:column="16"/></name>;<pos:position pos:line="1860" pos:column="17"/></goto>
  }<pos:position pos:line="1861" pos:column="4"/></block></then></if>
  <expr_stmt><expr><name pos:line="1862" pos:column="3">zNewRecord<pos:position pos:line="1862" pos:column="13"/></name> <operator pos:line="1862" pos:column="14">=<pos:position pos:line="1862" pos:column="15"/></operator> <operator pos:line="1862" pos:column="16">(<pos:position pos:line="1862" pos:column="17"/></operator><name pos:line="1862" pos:column="17">u8<pos:position pos:line="1862" pos:column="19"/></name> <operator pos:line="1862" pos:column="20">*<pos:position pos:line="1862" pos:column="21"/></operator><operator pos:line="1862" pos:column="21">)<pos:position pos:line="1862" pos:column="22"/></operator><name><name pos:line="1862" pos:column="22">pOut<pos:position pos:line="1862" pos:column="26"/></name><operator pos:line="1862" pos:column="26">-&gt;<pos:position pos:line="1862" pos:column="31"/></operator><name pos:line="1862" pos:column="28">z<pos:position pos:line="1862" pos:column="29"/></name></name></expr>;<pos:position pos:line="1862" pos:column="30"/></expr_stmt>

  <comment type="block" pos:line="1864" pos:column="3">/* Write the record */</comment>
  <expr_stmt><expr><name pos:line="1865" pos:column="3">i<pos:position pos:line="1865" pos:column="4"/></name> <operator pos:line="1865" pos:column="5">=<pos:position pos:line="1865" pos:column="6"/></operator> <call><name pos:line="1865" pos:column="7">putVarint32<pos:position pos:line="1865" pos:column="18"/></name><argument_list pos:line="1865" pos:column="18">(<argument><expr><name pos:line="1865" pos:column="19">zNewRecord<pos:position pos:line="1865" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="1865" pos:column="31">nHdr<pos:position pos:line="1865" pos:column="35"/></name></expr></argument>)<pos:position pos:line="1865" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="1865" pos:column="37"/></expr_stmt>
  <for pos:line="1866" pos:column="3">for<control pos:line="1866" pos:column="6">(<init><expr><name pos:line="1866" pos:column="7">pRec<pos:position pos:line="1866" pos:column="11"/></name><operator pos:line="1866" pos:column="11">=<pos:position pos:line="1866" pos:column="12"/></operator><name pos:line="1866" pos:column="12">pData0<pos:position pos:line="1866" pos:column="18"/></name></expr>;<pos:position pos:line="1866" pos:column="19"/></init> <condition><expr><name pos:line="1866" pos:column="20">pRec<pos:position pos:line="1866" pos:column="24"/></name><operator pos:line="1866" pos:column="24">&lt;=<pos:position pos:line="1866" pos:column="29"/></operator><name pos:line="1866" pos:column="26">pLast<pos:position pos:line="1866" pos:column="31"/></name></expr>;<pos:position pos:line="1866" pos:column="32"/></condition> <incr><expr><name pos:line="1866" pos:column="33">pRec<pos:position pos:line="1866" pos:column="37"/></name><operator pos:line="1866" pos:column="37">++<pos:position pos:line="1866" pos:column="39"/></operator></expr></incr>)<pos:position pos:line="1866" pos:column="40"/></control><block pos:line="1866" pos:column="40">{
    <expr_stmt><expr><name pos:line="1867" pos:column="5">serial_type<pos:position pos:line="1867" pos:column="16"/></name> <operator pos:line="1867" pos:column="17">=<pos:position pos:line="1867" pos:column="18"/></operator> <call><name pos:line="1867" pos:column="19">sqlite3VdbeSerialType<pos:position pos:line="1867" pos:column="40"/></name><argument_list pos:line="1867" pos:column="40">(<argument><expr><name pos:line="1867" pos:column="41">pRec<pos:position pos:line="1867" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="1867" pos:column="47">file_format<pos:position pos:line="1867" pos:column="58"/></name></expr></argument>)<pos:position pos:line="1867" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="1867" pos:column="60"/></expr_stmt>
    <expr_stmt><expr><name pos:line="1868" pos:column="5">i<pos:position pos:line="1868" pos:column="6"/></name> <operator pos:line="1868" pos:column="7">+=<pos:position pos:line="1868" pos:column="9"/></operator> <call><name pos:line="1868" pos:column="10">putVarint32<pos:position pos:line="1868" pos:column="21"/></name><argument_list pos:line="1868" pos:column="21">(<argument><expr><operator pos:line="1868" pos:column="22">&amp;<pos:position pos:line="1868" pos:column="27"/></operator><name><name pos:line="1868" pos:column="23">zNewRecord<pos:position pos:line="1868" pos:column="33"/></name><index pos:line="1868" pos:column="33">[<expr><name pos:line="1868" pos:column="34">i<pos:position pos:line="1868" pos:column="35"/></name></expr>]<pos:position pos:line="1868" pos:column="36"/></index></name></expr></argument>, <argument><expr><name pos:line="1868" pos:column="38">serial_type<pos:position pos:line="1868" pos:column="49"/></name></expr></argument>)<pos:position pos:line="1868" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="1868" pos:column="51"/></expr_stmt>      <comment type="block" pos:line="1868" pos:column="57">/* serial type */</comment>
  }<pos:position pos:line="1869" pos:column="4"/></block></for>
  <for pos:line="1870" pos:column="3">for<control pos:line="1870" pos:column="6">(<init><expr><name pos:line="1870" pos:column="7">pRec<pos:position pos:line="1870" pos:column="11"/></name><operator pos:line="1870" pos:column="11">=<pos:position pos:line="1870" pos:column="12"/></operator><name pos:line="1870" pos:column="12">pData0<pos:position pos:line="1870" pos:column="18"/></name></expr>;<pos:position pos:line="1870" pos:column="19"/></init> <condition><expr><name pos:line="1870" pos:column="20">pRec<pos:position pos:line="1870" pos:column="24"/></name><operator pos:line="1870" pos:column="24">&lt;=<pos:position pos:line="1870" pos:column="29"/></operator><name pos:line="1870" pos:column="26">pLast<pos:position pos:line="1870" pos:column="31"/></name></expr>;<pos:position pos:line="1870" pos:column="32"/></condition> <incr><expr><name pos:line="1870" pos:column="33">pRec<pos:position pos:line="1870" pos:column="37"/></name><operator pos:line="1870" pos:column="37">++<pos:position pos:line="1870" pos:column="39"/></operator></expr></incr>)<pos:position pos:line="1870" pos:column="40"/></control><block pos:line="1870" pos:column="40">{  <comment type="block" pos:line="1870" pos:column="43">/* serial data */</comment>
    <expr_stmt><expr><name pos:line="1871" pos:column="5">i<pos:position pos:line="1871" pos:column="6"/></name> <operator pos:line="1871" pos:column="7">+=<pos:position pos:line="1871" pos:column="9"/></operator> <call><name pos:line="1871" pos:column="10">sqlite3VdbeSerialPut<pos:position pos:line="1871" pos:column="30"/></name><argument_list pos:line="1871" pos:column="30">(<argument><expr><operator pos:line="1871" pos:column="31">&amp;<pos:position pos:line="1871" pos:column="36"/></operator><name><name pos:line="1871" pos:column="32">zNewRecord<pos:position pos:line="1871" pos:column="42"/></name><index pos:line="1871" pos:column="42">[<expr><name pos:line="1871" pos:column="43">i<pos:position pos:line="1871" pos:column="44"/></name></expr>]<pos:position pos:line="1871" pos:column="45"/></index></name></expr></argument>, <argument><expr><call pos:line="1871" pos:column="47">(<name pos:line="1871" pos:column="48">int<pos:position pos:line="1871" pos:column="51"/></name>)<argument_list pos:line="1871" pos:column="52">(<argument><expr><name pos:line="1871" pos:column="53">nByte<pos:position pos:line="1871" pos:column="58"/></name><operator pos:line="1871" pos:column="58">-<pos:position pos:line="1871" pos:column="59"/></operator><name pos:line="1871" pos:column="59">i<pos:position pos:line="1871" pos:column="60"/></name></expr></argument>)<pos:position pos:line="1871" pos:column="61"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="1871" pos:column="63">pRec<pos:position pos:line="1871" pos:column="67"/></name></expr></argument>,<argument><expr><name pos:line="1871" pos:column="68">file_format<pos:position pos:line="1871" pos:column="79"/></name></expr></argument>)<pos:position pos:line="1871" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="1871" pos:column="81"/></expr_stmt>
  }<pos:position pos:line="1872" pos:column="4"/></block></for>
  <expr_stmt><expr><call><name pos:line="1873" pos:column="3">assert<pos:position pos:line="1873" pos:column="9"/></name><argument_list pos:line="1873" pos:column="9">( <argument><expr><name pos:line="1873" pos:column="11">i<pos:position pos:line="1873" pos:column="12"/></name><operator pos:line="1873" pos:column="12">==<pos:position pos:line="1873" pos:column="14"/></operator><name pos:line="1873" pos:column="14">nByte<pos:position pos:line="1873" pos:column="19"/></name></expr></argument> )<pos:position pos:line="1873" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="1873" pos:column="22"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="1875" pos:column="3">assert<pos:position pos:line="1875" pos:column="9"/></name><argument_list pos:line="1875" pos:column="9">( <argument><expr><name><name pos:line="1875" pos:column="11">pOp<pos:position pos:line="1875" pos:column="14"/></name><operator pos:line="1875" pos:column="14">-&gt;<pos:position pos:line="1875" pos:column="19"/></operator><name pos:line="1875" pos:column="16">p3<pos:position pos:line="1875" pos:column="18"/></name></name><operator pos:line="1875" pos:column="18">&gt;<pos:position pos:line="1875" pos:column="22"/></operator><literal type="number" pos:line="1875" pos:column="19">0<pos:position pos:line="1875" pos:column="20"/></literal> <operator pos:line="1875" pos:column="21">&amp;&amp;<pos:position pos:line="1875" pos:column="31"/></operator> <name><name pos:line="1875" pos:column="24">pOp<pos:position pos:line="1875" pos:column="27"/></name><operator pos:line="1875" pos:column="27">-&gt;<pos:position pos:line="1875" pos:column="32"/></operator><name pos:line="1875" pos:column="29">p3<pos:position pos:line="1875" pos:column="31"/></name></name><operator pos:line="1875" pos:column="31">&lt;=<pos:position pos:line="1875" pos:column="36"/></operator><name><name pos:line="1875" pos:column="33">p<pos:position pos:line="1875" pos:column="34"/></name><operator pos:line="1875" pos:column="34">-&gt;<pos:position pos:line="1875" pos:column="39"/></operator><name pos:line="1875" pos:column="36">nMem<pos:position pos:line="1875" pos:column="40"/></name></name></expr></argument> )<pos:position pos:line="1875" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="1875" pos:column="43"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="1876" pos:column="3">pOut<pos:position pos:line="1876" pos:column="7"/></name><operator pos:line="1876" pos:column="7">-&gt;<pos:position pos:line="1876" pos:column="12"/></operator><name pos:line="1876" pos:column="9">n<pos:position pos:line="1876" pos:column="10"/></name></name> <operator pos:line="1876" pos:column="11">=<pos:position pos:line="1876" pos:column="12"/></operator> <operator pos:line="1876" pos:column="13">(<pos:position pos:line="1876" pos:column="14"/></operator><name pos:line="1876" pos:column="14">int<pos:position pos:line="1876" pos:column="17"/></name><operator pos:line="1876" pos:column="17">)<pos:position pos:line="1876" pos:column="18"/></operator><name pos:line="1876" pos:column="18">nByte<pos:position pos:line="1876" pos:column="23"/></name></expr>;<pos:position pos:line="1876" pos:column="24"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="1877" pos:column="3">pOut<pos:position pos:line="1877" pos:column="7"/></name><operator pos:line="1877" pos:column="7">-&gt;<pos:position pos:line="1877" pos:column="12"/></operator><name pos:line="1877" pos:column="9">flags<pos:position pos:line="1877" pos:column="14"/></name></name> <operator pos:line="1877" pos:column="15">=<pos:position pos:line="1877" pos:column="16"/></operator> <name pos:line="1877" pos:column="17">MEM_Blob<pos:position pos:line="1877" pos:column="25"/></name> <operator pos:line="1877" pos:column="26">|<pos:position pos:line="1877" pos:column="27"/></operator> <name pos:line="1877" pos:column="28">MEM_Dyn<pos:position pos:line="1877" pos:column="35"/></name></expr>;<pos:position pos:line="1877" pos:column="36"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="1878" pos:column="3">pOut<pos:position pos:line="1878" pos:column="7"/></name><operator pos:line="1878" pos:column="7">-&gt;<pos:position pos:line="1878" pos:column="12"/></operator><name pos:line="1878" pos:column="9">xDel<pos:position pos:line="1878" pos:column="13"/></name></name> <operator pos:line="1878" pos:column="14">=<pos:position pos:line="1878" pos:column="15"/></operator> <literal type="number" pos:line="1878" pos:column="16">0<pos:position pos:line="1878" pos:column="17"/></literal></expr>;<pos:position pos:line="1878" pos:column="18"/></expr_stmt>
  <if pos:line="1879" pos:column="3">if<condition pos:line="1879" pos:column="5">( <expr><name pos:line="1879" pos:column="7">nZero<pos:position pos:line="1879" pos:column="12"/></name></expr> )<pos:position pos:line="1879" pos:column="14"/></condition><then><block pos:line="1879" pos:column="14">{
    <expr_stmt><expr><name><name pos:line="1880" pos:column="5">pOut<pos:position pos:line="1880" pos:column="9"/></name><operator pos:line="1880" pos:column="9">-&gt;<pos:position pos:line="1880" pos:column="14"/></operator><name pos:line="1880" pos:column="11">u<pos:position pos:line="1880" pos:column="12"/></name><operator pos:line="1880" pos:column="12">.<pos:position pos:line="1880" pos:column="13"/></operator><name pos:line="1880" pos:column="13">nZero<pos:position pos:line="1880" pos:column="18"/></name></name> <operator pos:line="1880" pos:column="19">=<pos:position pos:line="1880" pos:column="20"/></operator> <name pos:line="1880" pos:column="21">nZero<pos:position pos:line="1880" pos:column="26"/></name></expr>;<pos:position pos:line="1880" pos:column="27"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="1881" pos:column="5">pOut<pos:position pos:line="1881" pos:column="9"/></name><operator pos:line="1881" pos:column="9">-&gt;<pos:position pos:line="1881" pos:column="14"/></operator><name pos:line="1881" pos:column="11">flags<pos:position pos:line="1881" pos:column="16"/></name></name> <operator pos:line="1881" pos:column="17">|=<pos:position pos:line="1881" pos:column="19"/></operator> <name pos:line="1881" pos:column="20">MEM_Zero<pos:position pos:line="1881" pos:column="28"/></name></expr>;<pos:position pos:line="1881" pos:column="29"/></expr_stmt>
  }<pos:position pos:line="1882" pos:column="4"/></block></then></if>
  <expr_stmt><expr><name><name pos:line="1883" pos:column="3">pOut<pos:position pos:line="1883" pos:column="7"/></name><operator pos:line="1883" pos:column="7">-&gt;<pos:position pos:line="1883" pos:column="12"/></operator><name pos:line="1883" pos:column="9">enc<pos:position pos:line="1883" pos:column="12"/></name></name> <operator pos:line="1883" pos:column="13">=<pos:position pos:line="1883" pos:column="14"/></operator> <name pos:line="1883" pos:column="15">SQLITE_UTF8<pos:position pos:line="1883" pos:column="26"/></name></expr>;<pos:position pos:line="1883" pos:column="27"/></expr_stmt>  <comment type="block" pos:line="1883" pos:column="29">/* In case the blob is ever converted to text */</comment>
  <expr_stmt><expr><call><name pos:line="1884" pos:column="3">REGISTER_TRACE<pos:position pos:line="1884" pos:column="17"/></name><argument_list pos:line="1884" pos:column="17">(<argument><expr><name><name pos:line="1884" pos:column="18">pOp<pos:position pos:line="1884" pos:column="21"/></name><operator pos:line="1884" pos:column="21">-&gt;<pos:position pos:line="1884" pos:column="26"/></operator><name pos:line="1884" pos:column="23">p3<pos:position pos:line="1884" pos:column="25"/></name></name></expr></argument>, <argument><expr><name pos:line="1884" pos:column="27">pOut<pos:position pos:line="1884" pos:column="31"/></name></expr></argument>)<pos:position pos:line="1884" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="1884" pos:column="33"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="1885" pos:column="3">UPDATE_MAX_BLOBSIZE<pos:position pos:line="1885" pos:column="22"/></name><argument_list pos:line="1885" pos:column="22">(<argument><expr><name pos:line="1885" pos:column="23">pOut<pos:position pos:line="1885" pos:column="27"/></name></expr></argument>)<pos:position pos:line="1885" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="1885" pos:column="29"/></expr_stmt>
  <break pos:line="1886" pos:column="3">break;<pos:position pos:line="1886" pos:column="9"/></break>
}<pos:position pos:line="1887" pos:column="2"/></block>

<comment type="block" pos:line="1889" pos:column="1">/* Opcode: Count P1 P2 * * *
**
** Store the number of entries (an integer value) in the table or index 
** opened by cursor P1 in register P2
*/</comment>
<cpp:ifndef pos:line="1894" pos:column="1">#<cpp:directive pos:line="1894" pos:column="2">ifndef<pos:position pos:line="1894" pos:column="8"/></cpp:directive> <name pos:line="1894" pos:column="9">SQLITE_OMIT_BTREECOUNT<pos:position pos:line="1894" pos:column="31"/></name></cpp:ifndef>
<case pos:line="1895" pos:column="1">case <expr><name pos:line="1895" pos:column="6">OP_Count<pos:position pos:line="1895" pos:column="14"/></name></expr>:<pos:position pos:line="1895" pos:column="15"/></case> <block pos:line="1895" pos:column="16">{         <comment type="block" pos:line="1895" pos:column="26">/* out2-prerelease */</comment>
  <decl_stmt><decl><type><name pos:line="1896" pos:column="3">i64<pos:position pos:line="1896" pos:column="6"/></name></type> <name pos:line="1896" pos:column="7">nEntry<pos:position pos:line="1896" pos:column="13"/></name></decl>;<pos:position pos:line="1896" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="1897" pos:column="3">BtCursor<pos:position pos:line="1897" pos:column="11"/></name> <modifier pos:line="1897" pos:column="12">*<pos:position pos:line="1897" pos:column="13"/></modifier></type><name pos:line="1897" pos:column="13">pCrsr<pos:position pos:line="1897" pos:column="18"/></name></decl>;<pos:position pos:line="1897" pos:column="19"/></decl_stmt>

  <expr_stmt><expr><name pos:line="1899" pos:column="3">pCrsr<pos:position pos:line="1899" pos:column="8"/></name> <operator pos:line="1899" pos:column="9">=<pos:position pos:line="1899" pos:column="10"/></operator> <name><name pos:line="1899" pos:column="11">p<pos:position pos:line="1899" pos:column="12"/></name><operator pos:line="1899" pos:column="12">-&gt;<pos:position pos:line="1899" pos:column="17"/></operator><name pos:line="1899" pos:column="14">apCsr<pos:position pos:line="1899" pos:column="19"/></name><index pos:line="1899" pos:column="19">[<expr><name><name pos:line="1899" pos:column="20">pOp<pos:position pos:line="1899" pos:column="23"/></name><operator pos:line="1899" pos:column="23">-&gt;<pos:position pos:line="1899" pos:column="28"/></operator><name pos:line="1899" pos:column="25">p1<pos:position pos:line="1899" pos:column="27"/></name></name></expr>]<pos:position pos:line="1899" pos:column="28"/></index></name><operator pos:line="1899" pos:column="28">-&gt;<pos:position pos:line="1899" pos:column="33"/></operator><name pos:line="1899" pos:column="30">pCursor<pos:position pos:line="1899" pos:column="37"/></name></expr>;<pos:position pos:line="1899" pos:column="38"/></expr_stmt>
  <if pos:line="1900" pos:column="3">if<condition pos:line="1900" pos:column="5">( <expr><name pos:line="1900" pos:column="7">pCrsr<pos:position pos:line="1900" pos:column="12"/></name></expr> )<pos:position pos:line="1900" pos:column="14"/></condition><then><block pos:line="1900" pos:column="14">{
    <expr_stmt><expr><name pos:line="1901" pos:column="5">rc<pos:position pos:line="1901" pos:column="7"/></name> <operator pos:line="1901" pos:column="8">=<pos:position pos:line="1901" pos:column="9"/></operator> <call><name pos:line="1901" pos:column="10">sqlite3BtreeCount<pos:position pos:line="1901" pos:column="27"/></name><argument_list pos:line="1901" pos:column="27">(<argument><expr><name pos:line="1901" pos:column="28">pCrsr<pos:position pos:line="1901" pos:column="33"/></name></expr></argument>, <argument><expr><operator pos:line="1901" pos:column="35">&amp;<pos:position pos:line="1901" pos:column="40"/></operator><name pos:line="1901" pos:column="36">nEntry<pos:position pos:line="1901" pos:column="42"/></name></expr></argument>)<pos:position pos:line="1901" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="1901" pos:column="44"/></expr_stmt>
  }<pos:position pos:line="1902" pos:column="4"/></block></then><else pos:line="1902" pos:column="4">else<block pos:line="1902" pos:column="8">{
    <expr_stmt><expr><name pos:line="1903" pos:column="5">nEntry<pos:position pos:line="1903" pos:column="11"/></name> <operator pos:line="1903" pos:column="12">=<pos:position pos:line="1903" pos:column="13"/></operator> <literal type="number" pos:line="1903" pos:column="14">0<pos:position pos:line="1903" pos:column="15"/></literal></expr>;<pos:position pos:line="1903" pos:column="16"/></expr_stmt>
  }<pos:position pos:line="1904" pos:column="4"/></block></else></if>
  <expr_stmt><expr><name><name pos:line="1905" pos:column="3">pOut<pos:position pos:line="1905" pos:column="7"/></name><operator pos:line="1905" pos:column="7">-&gt;<pos:position pos:line="1905" pos:column="12"/></operator><name pos:line="1905" pos:column="9">flags<pos:position pos:line="1905" pos:column="14"/></name></name> <operator pos:line="1905" pos:column="15">=<pos:position pos:line="1905" pos:column="16"/></operator> <name pos:line="1905" pos:column="17">MEM_Int<pos:position pos:line="1905" pos:column="24"/></name></expr>;<pos:position pos:line="1905" pos:column="25"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="1906" pos:column="3">pOut<pos:position pos:line="1906" pos:column="7"/></name><operator pos:line="1906" pos:column="7">-&gt;<pos:position pos:line="1906" pos:column="12"/></operator><name pos:line="1906" pos:column="9">u<pos:position pos:line="1906" pos:column="10"/></name><operator pos:line="1906" pos:column="10">.<pos:position pos:line="1906" pos:column="11"/></operator><name pos:line="1906" pos:column="11">i<pos:position pos:line="1906" pos:column="12"/></name></name> <operator pos:line="1906" pos:column="13">=<pos:position pos:line="1906" pos:column="14"/></operator> <name pos:line="1906" pos:column="15">nEntry<pos:position pos:line="1906" pos:column="21"/></name></expr>;<pos:position pos:line="1906" pos:column="22"/></expr_stmt>
  <break pos:line="1907" pos:column="3">break;<pos:position pos:line="1907" pos:column="9"/></break>
}<pos:position pos:line="1908" pos:column="2"/></block>
<cpp:endif pos:line="1909" pos:column="1">#<cpp:directive pos:line="1909" pos:column="2">endif<pos:position pos:line="1909" pos:column="7"/></cpp:directive></cpp:endif>

<comment type="block" pos:line="1911" pos:column="1">/* Opcode: Statement P1 * * * *
**
** Begin an individual statement transaction which is part of a larger
** transaction.  This is needed so that the statement
** can be rolled back after an error without having to roll back the
** entire transaction.  The statement transaction will automatically
** commit when the VDBE halts.
**
** If the database connection is currently in autocommit mode (that 
** is to say, if it is in between BEGIN and COMMIT)
** and if there are no other active statements on the same database
** connection, then this operation is a no-op.  No statement transaction
** is needed since any error can use the normal ROLLBACK process to
** undo changes.
**
** If a statement transaction is started, then a statement journal file
** will be allocated and initialized.
**
** The statement is begun on the database file with index P1.  The main
** database file has an index of 0 and the file used for temporary tables
** has an index of 1.
*/</comment>
<case pos:line="1933" pos:column="1">case <expr><name pos:line="1933" pos:column="6">OP_Statement<pos:position pos:line="1933" pos:column="18"/></name></expr>:<pos:position pos:line="1933" pos:column="19"/></case> <block pos:line="1933" pos:column="20">{
  <decl_stmt><decl><type><name pos:line="1934" pos:column="3">int<pos:position pos:line="1934" pos:column="6"/></name></type> <name pos:line="1934" pos:column="7">i<pos:position pos:line="1934" pos:column="8"/></name></decl>;<pos:position pos:line="1934" pos:column="9"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="1935" pos:column="3">Btree<pos:position pos:line="1935" pos:column="8"/></name> <modifier pos:line="1935" pos:column="9">*<pos:position pos:line="1935" pos:column="10"/></modifier></type><name pos:line="1935" pos:column="10">pBt<pos:position pos:line="1935" pos:column="13"/></name></decl>;<pos:position pos:line="1935" pos:column="14"/></decl_stmt>
  <if pos:line="1936" pos:column="3">if<condition pos:line="1936" pos:column="5">( <expr><name><name pos:line="1936" pos:column="7">db<pos:position pos:line="1936" pos:column="9"/></name><operator pos:line="1936" pos:column="9">-&gt;<pos:position pos:line="1936" pos:column="14"/></operator><name pos:line="1936" pos:column="11">autoCommit<pos:position pos:line="1936" pos:column="21"/></name></name><operator pos:line="1936" pos:column="21">==<pos:position pos:line="1936" pos:column="23"/></operator><literal type="number" pos:line="1936" pos:column="23">0<pos:position pos:line="1936" pos:column="24"/></literal> <operator pos:line="1936" pos:column="25">||<pos:position pos:line="1936" pos:column="27"/></operator> <name><name pos:line="1936" pos:column="28">db<pos:position pos:line="1936" pos:column="30"/></name><operator pos:line="1936" pos:column="30">-&gt;<pos:position pos:line="1936" pos:column="35"/></operator><name pos:line="1936" pos:column="32">activeVdbeCnt<pos:position pos:line="1936" pos:column="45"/></name></name><operator pos:line="1936" pos:column="45">&gt;<pos:position pos:line="1936" pos:column="49"/></operator><literal type="number" pos:line="1936" pos:column="46">1<pos:position pos:line="1936" pos:column="47"/></literal></expr> )<pos:position pos:line="1936" pos:column="49"/></condition><then><block pos:line="1936" pos:column="49">{
    <expr_stmt><expr><name pos:line="1937" pos:column="5">i<pos:position pos:line="1937" pos:column="6"/></name> <operator pos:line="1937" pos:column="7">=<pos:position pos:line="1937" pos:column="8"/></operator> <name><name pos:line="1937" pos:column="9">pOp<pos:position pos:line="1937" pos:column="12"/></name><operator pos:line="1937" pos:column="12">-&gt;<pos:position pos:line="1937" pos:column="17"/></operator><name pos:line="1937" pos:column="14">p1<pos:position pos:line="1937" pos:column="16"/></name></name></expr>;<pos:position pos:line="1937" pos:column="17"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="1938" pos:column="5">assert<pos:position pos:line="1938" pos:column="11"/></name><argument_list pos:line="1938" pos:column="11">( <argument><expr><name pos:line="1938" pos:column="13">i<pos:position pos:line="1938" pos:column="14"/></name><operator pos:line="1938" pos:column="14">&gt;=<pos:position pos:line="1938" pos:column="19"/></operator><literal type="number" pos:line="1938" pos:column="16">0<pos:position pos:line="1938" pos:column="17"/></literal> <operator pos:line="1938" pos:column="18">&amp;&amp;<pos:position pos:line="1938" pos:column="28"/></operator> <name pos:line="1938" pos:column="21">i<pos:position pos:line="1938" pos:column="22"/></name><operator pos:line="1938" pos:column="22">&lt;<pos:position pos:line="1938" pos:column="26"/></operator><name><name pos:line="1938" pos:column="23">db<pos:position pos:line="1938" pos:column="25"/></name><operator pos:line="1938" pos:column="25">-&gt;<pos:position pos:line="1938" pos:column="30"/></operator><name pos:line="1938" pos:column="27">nDb<pos:position pos:line="1938" pos:column="30"/></name></name></expr></argument> )<pos:position pos:line="1938" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="1938" pos:column="33"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="1939" pos:column="5">assert<pos:position pos:line="1939" pos:column="11"/></name><argument_list pos:line="1939" pos:column="11">( <argument><expr><name><name pos:line="1939" pos:column="13">db<pos:position pos:line="1939" pos:column="15"/></name><operator pos:line="1939" pos:column="15">-&gt;<pos:position pos:line="1939" pos:column="20"/></operator><name pos:line="1939" pos:column="17">aDb<pos:position pos:line="1939" pos:column="20"/></name><index pos:line="1939" pos:column="20">[<expr><name pos:line="1939" pos:column="21">i<pos:position pos:line="1939" pos:column="22"/></name></expr>]<pos:position pos:line="1939" pos:column="23"/></index></name><operator pos:line="1939" pos:column="23">.<pos:position pos:line="1939" pos:column="24"/></operator><name pos:line="1939" pos:column="24">pBt<pos:position pos:line="1939" pos:column="27"/></name><operator pos:line="1939" pos:column="27">!=<pos:position pos:line="1939" pos:column="29"/></operator><literal type="number" pos:line="1939" pos:column="29">0<pos:position pos:line="1939" pos:column="30"/></literal></expr></argument> )<pos:position pos:line="1939" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="1939" pos:column="33"/></expr_stmt>
    <expr_stmt><expr><name pos:line="1940" pos:column="5">pBt<pos:position pos:line="1940" pos:column="8"/></name> <operator pos:line="1940" pos:column="9">=<pos:position pos:line="1940" pos:column="10"/></operator> <name><name pos:line="1940" pos:column="11">db<pos:position pos:line="1940" pos:column="13"/></name><operator pos:line="1940" pos:column="13">-&gt;<pos:position pos:line="1940" pos:column="18"/></operator><name pos:line="1940" pos:column="15">aDb<pos:position pos:line="1940" pos:column="18"/></name><index pos:line="1940" pos:column="18">[<expr><name pos:line="1940" pos:column="19">i<pos:position pos:line="1940" pos:column="20"/></name></expr>]<pos:position pos:line="1940" pos:column="21"/></index></name><operator pos:line="1940" pos:column="21">.<pos:position pos:line="1940" pos:column="22"/></operator><name pos:line="1940" pos:column="22">pBt<pos:position pos:line="1940" pos:column="25"/></name></expr>;<pos:position pos:line="1940" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="1941" pos:column="5">assert<pos:position pos:line="1941" pos:column="11"/></name><argument_list pos:line="1941" pos:column="11">( <argument><expr><call><name pos:line="1941" pos:column="13">sqlite3BtreeIsInTrans<pos:position pos:line="1941" pos:column="34"/></name><argument_list pos:line="1941" pos:column="34">(<argument><expr><name pos:line="1941" pos:column="35">pBt<pos:position pos:line="1941" pos:column="38"/></name></expr></argument>)<pos:position pos:line="1941" pos:column="39"/></argument_list></call></expr></argument> )<pos:position pos:line="1941" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="1941" pos:column="42"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="1942" pos:column="5">assert<pos:position pos:line="1942" pos:column="11"/></name><argument_list pos:line="1942" pos:column="11">( <argument><expr><operator pos:line="1942" pos:column="13">(<pos:position pos:line="1942" pos:column="14"/></operator><name><name pos:line="1942" pos:column="14">p<pos:position pos:line="1942" pos:column="15"/></name><operator pos:line="1942" pos:column="15">-&gt;<pos:position pos:line="1942" pos:column="20"/></operator><name pos:line="1942" pos:column="17">btreeMask<pos:position pos:line="1942" pos:column="26"/></name></name> <operator pos:line="1942" pos:column="27">&amp;<pos:position pos:line="1942" pos:column="32"/></operator> <operator pos:line="1942" pos:column="29">(<pos:position pos:line="1942" pos:column="30"/></operator><literal type="number" pos:line="1942" pos:column="30">1<pos:position pos:line="1942" pos:column="31"/></literal><operator pos:line="1942" pos:column="31">&lt;&lt;<pos:position pos:line="1942" pos:column="39"/></operator><name pos:line="1942" pos:column="33">i<pos:position pos:line="1942" pos:column="34"/></name><operator pos:line="1942" pos:column="34">)<pos:position pos:line="1942" pos:column="35"/></operator><operator pos:line="1942" pos:column="35">)<pos:position pos:line="1942" pos:column="36"/></operator><operator pos:line="1942" pos:column="36">!=<pos:position pos:line="1942" pos:column="38"/></operator><literal type="number" pos:line="1942" pos:column="38">0<pos:position pos:line="1942" pos:column="39"/></literal></expr></argument> )<pos:position pos:line="1942" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="1942" pos:column="42"/></expr_stmt>
    <if pos:line="1943" pos:column="5">if<condition pos:line="1943" pos:column="7">( <expr><name><name pos:line="1943" pos:column="9">p<pos:position pos:line="1943" pos:column="10"/></name><operator pos:line="1943" pos:column="10">-&gt;<pos:position pos:line="1943" pos:column="15"/></operator><name pos:line="1943" pos:column="12">iStatement<pos:position pos:line="1943" pos:column="22"/></name></name><operator pos:line="1943" pos:column="22">==<pos:position pos:line="1943" pos:column="24"/></operator><literal type="number" pos:line="1943" pos:column="24">0<pos:position pos:line="1943" pos:column="25"/></literal></expr> )<pos:position pos:line="1943" pos:column="27"/></condition><then><block pos:line="1943" pos:column="27">{
      <expr_stmt><expr><call><name pos:line="1944" pos:column="7">assert<pos:position pos:line="1944" pos:column="13"/></name><argument_list pos:line="1944" pos:column="13">( <argument><expr><name><name pos:line="1944" pos:column="15">db<pos:position pos:line="1944" pos:column="17"/></name><operator pos:line="1944" pos:column="17">-&gt;<pos:position pos:line="1944" pos:column="22"/></operator><name pos:line="1944" pos:column="19">nStatement<pos:position pos:line="1944" pos:column="29"/></name></name><operator pos:line="1944" pos:column="29">&gt;=<pos:position pos:line="1944" pos:column="34"/></operator><literal type="number" pos:line="1944" pos:column="31">0<pos:position pos:line="1944" pos:column="32"/></literal> <operator pos:line="1944" pos:column="33">&amp;&amp;<pos:position pos:line="1944" pos:column="43"/></operator> <name><name pos:line="1944" pos:column="36">db<pos:position pos:line="1944" pos:column="38"/></name><operator pos:line="1944" pos:column="38">-&gt;<pos:position pos:line="1944" pos:column="43"/></operator><name pos:line="1944" pos:column="40">nSavepoint<pos:position pos:line="1944" pos:column="50"/></name></name><operator pos:line="1944" pos:column="50">&gt;=<pos:position pos:line="1944" pos:column="55"/></operator><literal type="number" pos:line="1944" pos:column="52">0<pos:position pos:line="1944" pos:column="53"/></literal></expr></argument> )<pos:position pos:line="1944" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="1944" pos:column="56"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="1945" pos:column="7">db<pos:position pos:line="1945" pos:column="9"/></name><operator pos:line="1945" pos:column="9">-&gt;<pos:position pos:line="1945" pos:column="14"/></operator><name pos:line="1945" pos:column="11">nStatement<pos:position pos:line="1945" pos:column="21"/></name></name><operator pos:line="1945" pos:column="21">++<pos:position pos:line="1945" pos:column="23"/></operator></expr>;<pos:position pos:line="1945" pos:column="24"/></expr_stmt> 
      <expr_stmt><expr><name><name pos:line="1946" pos:column="7">p<pos:position pos:line="1946" pos:column="8"/></name><operator pos:line="1946" pos:column="8">-&gt;<pos:position pos:line="1946" pos:column="13"/></operator><name pos:line="1946" pos:column="10">iStatement<pos:position pos:line="1946" pos:column="20"/></name></name> <operator pos:line="1946" pos:column="21">=<pos:position pos:line="1946" pos:column="22"/></operator> <name><name pos:line="1946" pos:column="23">db<pos:position pos:line="1946" pos:column="25"/></name><operator pos:line="1946" pos:column="25">-&gt;<pos:position pos:line="1946" pos:column="30"/></operator><name pos:line="1946" pos:column="27">nSavepoint<pos:position pos:line="1946" pos:column="37"/></name></name> <operator pos:line="1946" pos:column="38">+<pos:position pos:line="1946" pos:column="39"/></operator> <name><name pos:line="1946" pos:column="40">db<pos:position pos:line="1946" pos:column="42"/></name><operator pos:line="1946" pos:column="42">-&gt;<pos:position pos:line="1946" pos:column="47"/></operator><name pos:line="1946" pos:column="44">nStatement<pos:position pos:line="1946" pos:column="54"/></name></name></expr>;<pos:position pos:line="1946" pos:column="55"/></expr_stmt>
    }<pos:position pos:line="1947" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="1948" pos:column="5">rc<pos:position pos:line="1948" pos:column="7"/></name> <operator pos:line="1948" pos:column="8">=<pos:position pos:line="1948" pos:column="9"/></operator> <call><name pos:line="1948" pos:column="10">sqlite3BtreeBeginStmt<pos:position pos:line="1948" pos:column="31"/></name><argument_list pos:line="1948" pos:column="31">(<argument><expr><name pos:line="1948" pos:column="32">pBt<pos:position pos:line="1948" pos:column="35"/></name></expr></argument>, <argument><expr><name><name pos:line="1948" pos:column="37">p<pos:position pos:line="1948" pos:column="38"/></name><operator pos:line="1948" pos:column="38">-&gt;<pos:position pos:line="1948" pos:column="43"/></operator><name pos:line="1948" pos:column="40">iStatement<pos:position pos:line="1948" pos:column="50"/></name></name></expr></argument>)<pos:position pos:line="1948" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="1948" pos:column="52"/></expr_stmt>
  }<pos:position pos:line="1949" pos:column="4"/></block></then></if>
  <break pos:line="1950" pos:column="3">break;<pos:position pos:line="1950" pos:column="9"/></break>
}<pos:position pos:line="1951" pos:column="2"/></block>

<comment type="block" pos:line="1953" pos:column="1">/* Opcode: Savepoint P1 * * P4 *
**
** Open, release or rollback the savepoint named by parameter P4, depending
** on the value of P1. To open a new savepoint, P1==0. To release (commit) an
** existing savepoint, P1==1, or to rollback an existing savepoint P1==2.
*/</comment>
<case pos:line="1959" pos:column="1">case <expr><name pos:line="1959" pos:column="6">OP_Savepoint<pos:position pos:line="1959" pos:column="18"/></name></expr>:<pos:position pos:line="1959" pos:column="19"/></case> <block pos:line="1959" pos:column="20">{
  <decl_stmt><decl><type><name pos:line="1960" pos:column="3">int<pos:position pos:line="1960" pos:column="6"/></name></type> <name pos:line="1960" pos:column="7">p1<pos:position pos:line="1960" pos:column="9"/></name></decl>;<pos:position pos:line="1960" pos:column="10"/></decl_stmt>                         <comment type="block" pos:line="1960" pos:column="35">/* Value of P1 operand */</comment>
  <decl_stmt><decl><type><name pos:line="1961" pos:column="3">char<pos:position pos:line="1961" pos:column="7"/></name> <modifier pos:line="1961" pos:column="8">*<pos:position pos:line="1961" pos:column="9"/></modifier></type><name pos:line="1961" pos:column="9">zName<pos:position pos:line="1961" pos:column="14"/></name></decl>;<pos:position pos:line="1961" pos:column="15"/></decl_stmt>                    <comment type="block" pos:line="1961" pos:column="35">/* Name of savepoint */</comment>
  <decl_stmt><decl><type><name pos:line="1962" pos:column="3">int<pos:position pos:line="1962" pos:column="6"/></name></type> <name pos:line="1962" pos:column="7">nName<pos:position pos:line="1962" pos:column="12"/></name></decl>;<pos:position pos:line="1962" pos:column="13"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="1963" pos:column="3">Savepoint<pos:position pos:line="1963" pos:column="12"/></name> <modifier pos:line="1963" pos:column="13">*<pos:position pos:line="1963" pos:column="14"/></modifier></type><name pos:line="1963" pos:column="14">pNew<pos:position pos:line="1963" pos:column="18"/></name></decl>;<pos:position pos:line="1963" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="1964" pos:column="3">Savepoint<pos:position pos:line="1964" pos:column="12"/></name> <modifier pos:line="1964" pos:column="13">*<pos:position pos:line="1964" pos:column="14"/></modifier></type><name pos:line="1964" pos:column="14">pSavepoint<pos:position pos:line="1964" pos:column="24"/></name></decl>;<pos:position pos:line="1964" pos:column="25"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="1965" pos:column="3">Savepoint<pos:position pos:line="1965" pos:column="12"/></name> <modifier pos:line="1965" pos:column="13">*<pos:position pos:line="1965" pos:column="14"/></modifier></type><name pos:line="1965" pos:column="14">pTmp<pos:position pos:line="1965" pos:column="18"/></name></decl>;<pos:position pos:line="1965" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="1966" pos:column="3">int<pos:position pos:line="1966" pos:column="6"/></name></type> <name pos:line="1966" pos:column="7">iSavepoint<pos:position pos:line="1966" pos:column="17"/></name></decl>;<pos:position pos:line="1966" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="1967" pos:column="3">int<pos:position pos:line="1967" pos:column="6"/></name></type> <name pos:line="1967" pos:column="7">ii<pos:position pos:line="1967" pos:column="9"/></name></decl>;<pos:position pos:line="1967" pos:column="10"/></decl_stmt>

  <expr_stmt><expr><name pos:line="1969" pos:column="3">p1<pos:position pos:line="1969" pos:column="5"/></name> <operator pos:line="1969" pos:column="6">=<pos:position pos:line="1969" pos:column="7"/></operator> <name><name pos:line="1969" pos:column="8">pOp<pos:position pos:line="1969" pos:column="11"/></name><operator pos:line="1969" pos:column="11">-&gt;<pos:position pos:line="1969" pos:column="16"/></operator><name pos:line="1969" pos:column="13">p1<pos:position pos:line="1969" pos:column="15"/></name></name></expr>;<pos:position pos:line="1969" pos:column="16"/></expr_stmt>
  <expr_stmt><expr><name pos:line="1970" pos:column="3">zName<pos:position pos:line="1970" pos:column="8"/></name> <operator pos:line="1970" pos:column="9">=<pos:position pos:line="1970" pos:column="10"/></operator> <name><name pos:line="1970" pos:column="11">pOp<pos:position pos:line="1970" pos:column="14"/></name><operator pos:line="1970" pos:column="14">-&gt;<pos:position pos:line="1970" pos:column="19"/></operator><name pos:line="1970" pos:column="16">p4<pos:position pos:line="1970" pos:column="18"/></name><operator pos:line="1970" pos:column="18">.<pos:position pos:line="1970" pos:column="19"/></operator><name pos:line="1970" pos:column="19">z<pos:position pos:line="1970" pos:column="20"/></name></name></expr>;<pos:position pos:line="1970" pos:column="21"/></expr_stmt>

  <comment type="block" pos:line="1972" pos:column="3">/* Assert that the p1 parameter is valid. Also that if there is no open
  ** transaction, then there cannot be any savepoints. 
  */</comment>
  <expr_stmt><expr><call><name pos:line="1975" pos:column="3">assert<pos:position pos:line="1975" pos:column="9"/></name><argument_list pos:line="1975" pos:column="9">( <argument><expr><name><name pos:line="1975" pos:column="11">db<pos:position pos:line="1975" pos:column="13"/></name><operator pos:line="1975" pos:column="13">-&gt;<pos:position pos:line="1975" pos:column="18"/></operator><name pos:line="1975" pos:column="15">pSavepoint<pos:position pos:line="1975" pos:column="25"/></name></name><operator pos:line="1975" pos:column="25">==<pos:position pos:line="1975" pos:column="27"/></operator><literal type="number" pos:line="1975" pos:column="27">0<pos:position pos:line="1975" pos:column="28"/></literal> <operator pos:line="1975" pos:column="29">||<pos:position pos:line="1975" pos:column="31"/></operator> <name><name pos:line="1975" pos:column="32">db<pos:position pos:line="1975" pos:column="34"/></name><operator pos:line="1975" pos:column="34">-&gt;<pos:position pos:line="1975" pos:column="39"/></operator><name pos:line="1975" pos:column="36">autoCommit<pos:position pos:line="1975" pos:column="46"/></name></name><operator pos:line="1975" pos:column="46">==<pos:position pos:line="1975" pos:column="48"/></operator><literal type="number" pos:line="1975" pos:column="48">0<pos:position pos:line="1975" pos:column="49"/></literal></expr></argument> )<pos:position pos:line="1975" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="1975" pos:column="52"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="1976" pos:column="3">assert<pos:position pos:line="1976" pos:column="9"/></name><argument_list pos:line="1976" pos:column="9">( <argument><expr><name pos:line="1976" pos:column="11">p1<pos:position pos:line="1976" pos:column="13"/></name><operator pos:line="1976" pos:column="13">==<pos:position pos:line="1976" pos:column="15"/></operator><name pos:line="1976" pos:column="15">SAVEPOINT_BEGIN<pos:position pos:line="1976" pos:column="30"/></name><operator pos:line="1976" pos:column="30">||<pos:position pos:line="1976" pos:column="32"/></operator><name pos:line="1976" pos:column="32">p1<pos:position pos:line="1976" pos:column="34"/></name><operator pos:line="1976" pos:column="34">==<pos:position pos:line="1976" pos:column="36"/></operator><name pos:line="1976" pos:column="36">SAVEPOINT_RELEASE<pos:position pos:line="1976" pos:column="53"/></name><operator pos:line="1976" pos:column="53">||<pos:position pos:line="1976" pos:column="55"/></operator><name pos:line="1976" pos:column="55">p1<pos:position pos:line="1976" pos:column="57"/></name><operator pos:line="1976" pos:column="57">==<pos:position pos:line="1976" pos:column="59"/></operator><name pos:line="1976" pos:column="59">SAVEPOINT_ROLLBACK<pos:position pos:line="1976" pos:column="77"/></name></expr></argument> )<pos:position pos:line="1976" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="1976" pos:column="80"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="1977" pos:column="3">assert<pos:position pos:line="1977" pos:column="9"/></name><argument_list pos:line="1977" pos:column="9">( <argument><expr><name><name pos:line="1977" pos:column="11">db<pos:position pos:line="1977" pos:column="13"/></name><operator pos:line="1977" pos:column="13">-&gt;<pos:position pos:line="1977" pos:column="18"/></operator><name pos:line="1977" pos:column="15">pSavepoint<pos:position pos:line="1977" pos:column="25"/></name></name> <operator pos:line="1977" pos:column="26">||<pos:position pos:line="1977" pos:column="28"/></operator> <name><name pos:line="1977" pos:column="29">db<pos:position pos:line="1977" pos:column="31"/></name><operator pos:line="1977" pos:column="31">-&gt;<pos:position pos:line="1977" pos:column="36"/></operator><name pos:line="1977" pos:column="33">isTransactionSavepoint<pos:position pos:line="1977" pos:column="55"/></name></name><operator pos:line="1977" pos:column="55">==<pos:position pos:line="1977" pos:column="57"/></operator><literal type="number" pos:line="1977" pos:column="57">0<pos:position pos:line="1977" pos:column="58"/></literal></expr></argument> )<pos:position pos:line="1977" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="1977" pos:column="61"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="1978" pos:column="3">assert<pos:position pos:line="1978" pos:column="9"/></name><argument_list pos:line="1978" pos:column="9">( <argument><expr><call><name pos:line="1978" pos:column="11">checkSavepointCount<pos:position pos:line="1978" pos:column="30"/></name><argument_list pos:line="1978" pos:column="30">(<argument><expr><name pos:line="1978" pos:column="31">db<pos:position pos:line="1978" pos:column="33"/></name></expr></argument>)<pos:position pos:line="1978" pos:column="34"/></argument_list></call></expr></argument> )<pos:position pos:line="1978" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="1978" pos:column="37"/></expr_stmt>

  <if pos:line="1980" pos:column="3">if<condition pos:line="1980" pos:column="5">( <expr><name pos:line="1980" pos:column="7">p1<pos:position pos:line="1980" pos:column="9"/></name><operator pos:line="1980" pos:column="9">==<pos:position pos:line="1980" pos:column="11"/></operator><name pos:line="1980" pos:column="11">SAVEPOINT_BEGIN<pos:position pos:line="1980" pos:column="26"/></name></expr> )<pos:position pos:line="1980" pos:column="28"/></condition><then><block pos:line="1980" pos:column="28">{
    <if pos:line="1981" pos:column="5">if<condition pos:line="1981" pos:column="7">( <expr><name><name pos:line="1981" pos:column="9">db<pos:position pos:line="1981" pos:column="11"/></name><operator pos:line="1981" pos:column="11">-&gt;<pos:position pos:line="1981" pos:column="16"/></operator><name pos:line="1981" pos:column="13">writeVdbeCnt<pos:position pos:line="1981" pos:column="25"/></name></name><operator pos:line="1981" pos:column="25">&gt;<pos:position pos:line="1981" pos:column="29"/></operator><literal type="number" pos:line="1981" pos:column="26">0<pos:position pos:line="1981" pos:column="27"/></literal></expr> )<pos:position pos:line="1981" pos:column="29"/></condition><then><block pos:line="1981" pos:column="29">{
      <comment type="block" pos:line="1982" pos:column="7">/* A new savepoint cannot be created if there are active write 
      ** statements (i.e. open read/write incremental blob handles).
      */</comment>
      <expr_stmt><expr><call><name pos:line="1985" pos:column="7">sqlite3SetString<pos:position pos:line="1985" pos:column="23"/></name><argument_list pos:line="1985" pos:column="23">(<argument><expr><operator pos:line="1985" pos:column="24">&amp;<pos:position pos:line="1985" pos:column="29"/></operator><name><name pos:line="1985" pos:column="25">p<pos:position pos:line="1985" pos:column="26"/></name><operator pos:line="1985" pos:column="26">-&gt;<pos:position pos:line="1985" pos:column="31"/></operator><name pos:line="1985" pos:column="28">zErrMsg<pos:position pos:line="1985" pos:column="35"/></name></name></expr></argument>, <argument><expr><name pos:line="1985" pos:column="37">db<pos:position pos:line="1985" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="1985" pos:column="41">"cannot open savepoint - "<pos:position pos:line="1985" pos:column="67"/></literal>
        <literal type="string" pos:line="1986" pos:column="9">"SQL statements in progress"<pos:position pos:line="1986" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="1986" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="1986" pos:column="39"/></expr_stmt>
      <expr_stmt><expr><name pos:line="1987" pos:column="7">rc<pos:position pos:line="1987" pos:column="9"/></name> <operator pos:line="1987" pos:column="10">=<pos:position pos:line="1987" pos:column="11"/></operator> <name pos:line="1987" pos:column="12">SQLITE_BUSY<pos:position pos:line="1987" pos:column="23"/></name></expr>;<pos:position pos:line="1987" pos:column="24"/></expr_stmt>
    }<pos:position pos:line="1988" pos:column="6"/></block></then><else pos:line="1988" pos:column="6">else<block pos:line="1988" pos:column="10">{
      <expr_stmt><expr><name pos:line="1989" pos:column="7">nName<pos:position pos:line="1989" pos:column="12"/></name> <operator pos:line="1989" pos:column="13">=<pos:position pos:line="1989" pos:column="14"/></operator> <call><name pos:line="1989" pos:column="15">sqlite3Strlen30<pos:position pos:line="1989" pos:column="30"/></name><argument_list pos:line="1989" pos:column="30">(<argument><expr><name pos:line="1989" pos:column="31">zName<pos:position pos:line="1989" pos:column="36"/></name></expr></argument>)<pos:position pos:line="1989" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="1989" pos:column="38"/></expr_stmt>

      <comment type="block" pos:line="1991" pos:column="7">/* Create a new savepoint structure. */</comment>
      <expr_stmt><expr><name pos:line="1992" pos:column="7">pNew<pos:position pos:line="1992" pos:column="11"/></name> <operator pos:line="1992" pos:column="12">=<pos:position pos:line="1992" pos:column="13"/></operator> <call><name pos:line="1992" pos:column="14">sqlite3DbMallocRaw<pos:position pos:line="1992" pos:column="32"/></name><argument_list pos:line="1992" pos:column="32">(<argument><expr><name pos:line="1992" pos:column="33">db<pos:position pos:line="1992" pos:column="35"/></name></expr></argument>, <argument><expr><sizeof pos:line="1992" pos:column="37">sizeof<argument_list pos:line="1992" pos:column="43">(<argument><expr><name pos:line="1992" pos:column="44">Savepoint<pos:position pos:line="1992" pos:column="53"/></name></expr></argument>)<pos:position pos:line="1992" pos:column="54"/></argument_list></sizeof><operator pos:line="1992" pos:column="54">+<pos:position pos:line="1992" pos:column="55"/></operator><name pos:line="1992" pos:column="55">nName<pos:position pos:line="1992" pos:column="60"/></name><operator pos:line="1992" pos:column="60">+<pos:position pos:line="1992" pos:column="61"/></operator><literal type="number" pos:line="1992" pos:column="61">1<pos:position pos:line="1992" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="1992" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="1992" pos:column="64"/></expr_stmt>
      <if pos:line="1993" pos:column="7">if<condition pos:line="1993" pos:column="9">( <expr><name pos:line="1993" pos:column="11">pNew<pos:position pos:line="1993" pos:column="15"/></name></expr> )<pos:position pos:line="1993" pos:column="17"/></condition><then><block pos:line="1993" pos:column="17">{
        <expr_stmt><expr><name><name pos:line="1994" pos:column="9">pNew<pos:position pos:line="1994" pos:column="13"/></name><operator pos:line="1994" pos:column="13">-&gt;<pos:position pos:line="1994" pos:column="18"/></operator><name pos:line="1994" pos:column="15">zName<pos:position pos:line="1994" pos:column="20"/></name></name> <operator pos:line="1994" pos:column="21">=<pos:position pos:line="1994" pos:column="22"/></operator> <operator pos:line="1994" pos:column="23">(<pos:position pos:line="1994" pos:column="24"/></operator><name pos:line="1994" pos:column="24">char<pos:position pos:line="1994" pos:column="28"/></name> <operator pos:line="1994" pos:column="29">*<pos:position pos:line="1994" pos:column="30"/></operator><operator pos:line="1994" pos:column="30">)<pos:position pos:line="1994" pos:column="31"/></operator><operator pos:line="1994" pos:column="31">&amp;<pos:position pos:line="1994" pos:column="36"/></operator><name><name pos:line="1994" pos:column="32">pNew<pos:position pos:line="1994" pos:column="36"/></name><index pos:line="1994" pos:column="36">[<expr><literal type="number" pos:line="1994" pos:column="37">1<pos:position pos:line="1994" pos:column="38"/></literal></expr>]<pos:position pos:line="1994" pos:column="39"/></index></name></expr>;<pos:position pos:line="1994" pos:column="40"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="1995" pos:column="9">memcpy<pos:position pos:line="1995" pos:column="15"/></name><argument_list pos:line="1995" pos:column="15">(<argument><expr><name><name pos:line="1995" pos:column="16">pNew<pos:position pos:line="1995" pos:column="20"/></name><operator pos:line="1995" pos:column="20">-&gt;<pos:position pos:line="1995" pos:column="25"/></operator><name pos:line="1995" pos:column="22">zName<pos:position pos:line="1995" pos:column="27"/></name></name></expr></argument>, <argument><expr><name pos:line="1995" pos:column="29">zName<pos:position pos:line="1995" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="1995" pos:column="36">nName<pos:position pos:line="1995" pos:column="41"/></name><operator pos:line="1995" pos:column="41">+<pos:position pos:line="1995" pos:column="42"/></operator><literal type="number" pos:line="1995" pos:column="42">1<pos:position pos:line="1995" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="1995" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="1995" pos:column="45"/></expr_stmt>
    
        <comment type="block" pos:line="1997" pos:column="9">/* If there is no open transaction, then mark this as a special
        ** "transaction savepoint". */</comment>
        <if pos:line="1999" pos:column="9">if<condition pos:line="1999" pos:column="11">( <expr><name><name pos:line="1999" pos:column="13">db<pos:position pos:line="1999" pos:column="15"/></name><operator pos:line="1999" pos:column="15">-&gt;<pos:position pos:line="1999" pos:column="20"/></operator><name pos:line="1999" pos:column="17">autoCommit<pos:position pos:line="1999" pos:column="27"/></name></name></expr> )<pos:position pos:line="1999" pos:column="29"/></condition><then><block pos:line="1999" pos:column="29">{
          <expr_stmt><expr><name><name pos:line="2000" pos:column="11">db<pos:position pos:line="2000" pos:column="13"/></name><operator pos:line="2000" pos:column="13">-&gt;<pos:position pos:line="2000" pos:column="18"/></operator><name pos:line="2000" pos:column="15">autoCommit<pos:position pos:line="2000" pos:column="25"/></name></name> <operator pos:line="2000" pos:column="26">=<pos:position pos:line="2000" pos:column="27"/></operator> <literal type="number" pos:line="2000" pos:column="28">0<pos:position pos:line="2000" pos:column="29"/></literal></expr>;<pos:position pos:line="2000" pos:column="30"/></expr_stmt>
          <expr_stmt><expr><name><name pos:line="2001" pos:column="11">db<pos:position pos:line="2001" pos:column="13"/></name><operator pos:line="2001" pos:column="13">-&gt;<pos:position pos:line="2001" pos:column="18"/></operator><name pos:line="2001" pos:column="15">isTransactionSavepoint<pos:position pos:line="2001" pos:column="37"/></name></name> <operator pos:line="2001" pos:column="38">=<pos:position pos:line="2001" pos:column="39"/></operator> <literal type="number" pos:line="2001" pos:column="40">1<pos:position pos:line="2001" pos:column="41"/></literal></expr>;<pos:position pos:line="2001" pos:column="42"/></expr_stmt>
        }<pos:position pos:line="2002" pos:column="10"/></block></then><else pos:line="2002" pos:column="10">else<block pos:line="2002" pos:column="14">{
          <expr_stmt><expr><name><name pos:line="2003" pos:column="11">db<pos:position pos:line="2003" pos:column="13"/></name><operator pos:line="2003" pos:column="13">-&gt;<pos:position pos:line="2003" pos:column="18"/></operator><name pos:line="2003" pos:column="15">nSavepoint<pos:position pos:line="2003" pos:column="25"/></name></name><operator pos:line="2003" pos:column="25">++<pos:position pos:line="2003" pos:column="27"/></operator></expr>;<pos:position pos:line="2003" pos:column="28"/></expr_stmt>
        }<pos:position pos:line="2004" pos:column="10"/></block></else></if>
    
        <comment type="block" pos:line="2006" pos:column="9">/* Link the new savepoint into the database handle's list. */</comment>
        <expr_stmt><expr><name><name pos:line="2007" pos:column="9">pNew<pos:position pos:line="2007" pos:column="13"/></name><operator pos:line="2007" pos:column="13">-&gt;<pos:position pos:line="2007" pos:column="18"/></operator><name pos:line="2007" pos:column="15">pNext<pos:position pos:line="2007" pos:column="20"/></name></name> <operator pos:line="2007" pos:column="21">=<pos:position pos:line="2007" pos:column="22"/></operator> <name><name pos:line="2007" pos:column="23">db<pos:position pos:line="2007" pos:column="25"/></name><operator pos:line="2007" pos:column="25">-&gt;<pos:position pos:line="2007" pos:column="30"/></operator><name pos:line="2007" pos:column="27">pSavepoint<pos:position pos:line="2007" pos:column="37"/></name></name></expr>;<pos:position pos:line="2007" pos:column="38"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="2008" pos:column="9">db<pos:position pos:line="2008" pos:column="11"/></name><operator pos:line="2008" pos:column="11">-&gt;<pos:position pos:line="2008" pos:column="16"/></operator><name pos:line="2008" pos:column="13">pSavepoint<pos:position pos:line="2008" pos:column="23"/></name></name> <operator pos:line="2008" pos:column="24">=<pos:position pos:line="2008" pos:column="25"/></operator> <name pos:line="2008" pos:column="26">pNew<pos:position pos:line="2008" pos:column="30"/></name></expr>;<pos:position pos:line="2008" pos:column="31"/></expr_stmt>
      }<pos:position pos:line="2009" pos:column="8"/></block></then></if>
    }<pos:position pos:line="2010" pos:column="6"/></block></else></if>
  }<pos:position pos:line="2011" pos:column="4"/></block></then><else pos:line="2011" pos:column="4">else<block pos:line="2011" pos:column="8">{
    <expr_stmt><expr><name pos:line="2012" pos:column="5">iSavepoint<pos:position pos:line="2012" pos:column="15"/></name> <operator pos:line="2012" pos:column="16">=<pos:position pos:line="2012" pos:column="17"/></operator> <literal type="number" pos:line="2012" pos:column="18">0<pos:position pos:line="2012" pos:column="19"/></literal></expr>;<pos:position pos:line="2012" pos:column="20"/></expr_stmt>

    <comment type="block" pos:line="2014" pos:column="5">/* Find the named savepoint. If there is no such savepoint, then an
    ** an error is returned to the user.  */</comment>
    <for pos:line="2016" pos:column="5">for<control pos:line="2016" pos:column="8">(
      <init><expr><name pos:line="2017" pos:column="7">pSavepoint<pos:position pos:line="2017" pos:column="17"/></name> <operator pos:line="2017" pos:column="18">=<pos:position pos:line="2017" pos:column="19"/></operator> <name><name pos:line="2017" pos:column="20">db<pos:position pos:line="2017" pos:column="22"/></name><operator pos:line="2017" pos:column="22">-&gt;<pos:position pos:line="2017" pos:column="27"/></operator><name pos:line="2017" pos:column="24">pSavepoint<pos:position pos:line="2017" pos:column="34"/></name></name></expr>;<pos:position pos:line="2017" pos:column="35"/></init> 
      <condition><expr><name pos:line="2018" pos:column="7">pSavepoint<pos:position pos:line="2018" pos:column="17"/></name> <operator pos:line="2018" pos:column="18">&amp;&amp;<pos:position pos:line="2018" pos:column="28"/></operator> <call><name pos:line="2018" pos:column="21">sqlite3StrICmp<pos:position pos:line="2018" pos:column="35"/></name><argument_list pos:line="2018" pos:column="35">(<argument><expr><name><name pos:line="2018" pos:column="36">pSavepoint<pos:position pos:line="2018" pos:column="46"/></name><operator pos:line="2018" pos:column="46">-&gt;<pos:position pos:line="2018" pos:column="51"/></operator><name pos:line="2018" pos:column="48">zName<pos:position pos:line="2018" pos:column="53"/></name></name></expr></argument>, <argument><expr><name pos:line="2018" pos:column="55">zName<pos:position pos:line="2018" pos:column="60"/></name></expr></argument>)<pos:position pos:line="2018" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="2018" pos:column="62"/></condition>
      <incr><expr><name pos:line="2019" pos:column="7">pSavepoint<pos:position pos:line="2019" pos:column="17"/></name> <operator pos:line="2019" pos:column="18">=<pos:position pos:line="2019" pos:column="19"/></operator> <name><name pos:line="2019" pos:column="20">pSavepoint<pos:position pos:line="2019" pos:column="30"/></name><operator pos:line="2019" pos:column="30">-&gt;<pos:position pos:line="2019" pos:column="35"/></operator><name pos:line="2019" pos:column="32">pNext<pos:position pos:line="2019" pos:column="37"/></name></name></expr></incr>
    )<pos:position pos:line="2020" pos:column="6"/></control><block pos:line="2020" pos:column="6">{
      <expr_stmt><expr><name pos:line="2021" pos:column="7">iSavepoint<pos:position pos:line="2021" pos:column="17"/></name><operator pos:line="2021" pos:column="17">++<pos:position pos:line="2021" pos:column="19"/></operator></expr>;<pos:position pos:line="2021" pos:column="20"/></expr_stmt>
    }<pos:position pos:line="2022" pos:column="6"/></block></for>
    <if pos:line="2023" pos:column="5">if<condition pos:line="2023" pos:column="7">( <expr><operator pos:line="2023" pos:column="9">!<pos:position pos:line="2023" pos:column="10"/></operator><name pos:line="2023" pos:column="10">pSavepoint<pos:position pos:line="2023" pos:column="20"/></name></expr> )<pos:position pos:line="2023" pos:column="22"/></condition><then><block pos:line="2023" pos:column="22">{
      <expr_stmt><expr><call><name pos:line="2024" pos:column="7">sqlite3SetString<pos:position pos:line="2024" pos:column="23"/></name><argument_list pos:line="2024" pos:column="23">(<argument><expr><operator pos:line="2024" pos:column="24">&amp;<pos:position pos:line="2024" pos:column="29"/></operator><name><name pos:line="2024" pos:column="25">p<pos:position pos:line="2024" pos:column="26"/></name><operator pos:line="2024" pos:column="26">-&gt;<pos:position pos:line="2024" pos:column="31"/></operator><name pos:line="2024" pos:column="28">zErrMsg<pos:position pos:line="2024" pos:column="35"/></name></name></expr></argument>, <argument><expr><name pos:line="2024" pos:column="37">db<pos:position pos:line="2024" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="2024" pos:column="41">"no such savepoint: %s"<pos:position pos:line="2024" pos:column="64"/></literal></expr></argument>, <argument><expr><name pos:line="2024" pos:column="66">zName<pos:position pos:line="2024" pos:column="71"/></name></expr></argument>)<pos:position pos:line="2024" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="2024" pos:column="73"/></expr_stmt>
      <expr_stmt><expr><name pos:line="2025" pos:column="7">rc<pos:position pos:line="2025" pos:column="9"/></name> <operator pos:line="2025" pos:column="10">=<pos:position pos:line="2025" pos:column="11"/></operator> <name pos:line="2025" pos:column="12">SQLITE_ERROR<pos:position pos:line="2025" pos:column="24"/></name></expr>;<pos:position pos:line="2025" pos:column="25"/></expr_stmt>
    }<pos:position pos:line="2026" pos:column="6"/></block></then><elseif pos:line="2026" pos:column="6">else <if pos:line="2026" pos:column="11">if<condition pos:line="2026" pos:column="13">( 
        <expr><name><name pos:line="2027" pos:column="9">db<pos:position pos:line="2027" pos:column="11"/></name><operator pos:line="2027" pos:column="11">-&gt;<pos:position pos:line="2027" pos:column="16"/></operator><name pos:line="2027" pos:column="13">writeVdbeCnt<pos:position pos:line="2027" pos:column="25"/></name></name><operator pos:line="2027" pos:column="25">&gt;<pos:position pos:line="2027" pos:column="29"/></operator><literal type="number" pos:line="2027" pos:column="26">0<pos:position pos:line="2027" pos:column="27"/></literal> <operator pos:line="2027" pos:column="28">||<pos:position pos:line="2027" pos:column="30"/></operator> <operator pos:line="2027" pos:column="31">(<pos:position pos:line="2027" pos:column="32"/></operator><name pos:line="2027" pos:column="32">p1<pos:position pos:line="2027" pos:column="34"/></name><operator pos:line="2027" pos:column="34">==<pos:position pos:line="2027" pos:column="36"/></operator><name pos:line="2027" pos:column="36">SAVEPOINT_ROLLBACK<pos:position pos:line="2027" pos:column="54"/></name> <operator pos:line="2027" pos:column="55">&amp;&amp;<pos:position pos:line="2027" pos:column="65"/></operator> <name><name pos:line="2027" pos:column="58">db<pos:position pos:line="2027" pos:column="60"/></name><operator pos:line="2027" pos:column="60">-&gt;<pos:position pos:line="2027" pos:column="65"/></operator><name pos:line="2027" pos:column="62">activeVdbeCnt<pos:position pos:line="2027" pos:column="75"/></name></name><operator pos:line="2027" pos:column="75">&gt;<pos:position pos:line="2027" pos:column="79"/></operator><literal type="number" pos:line="2027" pos:column="76">1<pos:position pos:line="2027" pos:column="77"/></literal><operator pos:line="2027" pos:column="77">)<pos:position pos:line="2027" pos:column="78"/></operator></expr> 
    )<pos:position pos:line="2028" pos:column="6"/></condition><then><block pos:line="2028" pos:column="6">{
      <comment type="block" pos:line="2029" pos:column="7">/* It is not possible to release (commit) a savepoint if there are 
      ** active write statements. It is not possible to rollback a savepoint
      ** if there are any active statements at all.
      */</comment>
      <expr_stmt><expr><call><name pos:line="2033" pos:column="7">sqlite3SetString<pos:position pos:line="2033" pos:column="23"/></name><argument_list pos:line="2033" pos:column="23">(<argument><expr><operator pos:line="2033" pos:column="24">&amp;<pos:position pos:line="2033" pos:column="29"/></operator><name><name pos:line="2033" pos:column="25">p<pos:position pos:line="2033" pos:column="26"/></name><operator pos:line="2033" pos:column="26">-&gt;<pos:position pos:line="2033" pos:column="31"/></operator><name pos:line="2033" pos:column="28">zErrMsg<pos:position pos:line="2033" pos:column="35"/></name></name></expr></argument>, <argument><expr><name pos:line="2033" pos:column="37">db<pos:position pos:line="2033" pos:column="39"/></name></expr></argument>, 
        <argument><expr><literal type="string" pos:line="2034" pos:column="9">"cannot %s savepoint - SQL statements in progress"<pos:position pos:line="2034" pos:column="59"/></literal></expr></argument>,
        <argument><expr><operator pos:line="2035" pos:column="9">(<pos:position pos:line="2035" pos:column="10"/></operator><ternary><condition><expr><name pos:line="2035" pos:column="10">p1<pos:position pos:line="2035" pos:column="12"/></name><operator pos:line="2035" pos:column="12">==<pos:position pos:line="2035" pos:column="14"/></operator><name pos:line="2035" pos:column="14">SAVEPOINT_ROLLBACK<pos:position pos:line="2035" pos:column="32"/></name></expr> ?<pos:position pos:line="2035" pos:column="34"/></condition><then pos:line="2035" pos:column="34"> <expr><literal type="string" pos:line="2035" pos:column="35">"rollback"<pos:position pos:line="2035" pos:column="45"/></literal></expr></then><else pos:line="2035" pos:column="45">: <expr><literal type="string" pos:line="2035" pos:column="47">"release"<pos:position pos:line="2035" pos:column="56"/></literal></expr></else></ternary><operator pos:line="2035" pos:column="56">)<pos:position pos:line="2035" pos:column="57"/></operator></expr></argument>
      )<pos:position pos:line="2036" pos:column="8"/></argument_list></call></expr>;<pos:position pos:line="2036" pos:column="9"/></expr_stmt>
      <expr_stmt><expr><name pos:line="2037" pos:column="7">rc<pos:position pos:line="2037" pos:column="9"/></name> <operator pos:line="2037" pos:column="10">=<pos:position pos:line="2037" pos:column="11"/></operator> <name pos:line="2037" pos:column="12">SQLITE_BUSY<pos:position pos:line="2037" pos:column="23"/></name></expr>;<pos:position pos:line="2037" pos:column="24"/></expr_stmt>
    }<pos:position pos:line="2038" pos:column="6"/></block></then></if></elseif><else pos:line="2038" pos:column="6">else<block pos:line="2038" pos:column="10">{

      <comment type="block" pos:line="2040" pos:column="7">/* Determine whether or not this is a transaction savepoint. If so,
      ** and this is a RELEASE command, then the current transaction 
      ** is committed. 
      */</comment>
      <decl_stmt><decl><type><name pos:line="2044" pos:column="7">int<pos:position pos:line="2044" pos:column="10"/></name></type> <name pos:line="2044" pos:column="11">isTransaction<pos:position pos:line="2044" pos:column="24"/></name> <init pos:line="2044" pos:column="25">= <expr><name><name pos:line="2044" pos:column="27">pSavepoint<pos:position pos:line="2044" pos:column="37"/></name><operator pos:line="2044" pos:column="37">-&gt;<pos:position pos:line="2044" pos:column="42"/></operator><name pos:line="2044" pos:column="39">pNext<pos:position pos:line="2044" pos:column="44"/></name></name><operator pos:line="2044" pos:column="44">==<pos:position pos:line="2044" pos:column="46"/></operator><literal type="number" pos:line="2044" pos:column="46">0<pos:position pos:line="2044" pos:column="47"/></literal> <operator pos:line="2044" pos:column="48">&amp;&amp;<pos:position pos:line="2044" pos:column="58"/></operator> <name><name pos:line="2044" pos:column="51">db<pos:position pos:line="2044" pos:column="53"/></name><operator pos:line="2044" pos:column="53">-&gt;<pos:position pos:line="2044" pos:column="58"/></operator><name pos:line="2044" pos:column="55">isTransactionSavepoint<pos:position pos:line="2044" pos:column="77"/></name></name></expr></init></decl>;<pos:position pos:line="2044" pos:column="78"/></decl_stmt>
      <if pos:line="2045" pos:column="7">if<condition pos:line="2045" pos:column="9">( <expr><name pos:line="2045" pos:column="11">isTransaction<pos:position pos:line="2045" pos:column="24"/></name> <operator pos:line="2045" pos:column="25">&amp;&amp;<pos:position pos:line="2045" pos:column="35"/></operator> <name pos:line="2045" pos:column="28">p1<pos:position pos:line="2045" pos:column="30"/></name><operator pos:line="2045" pos:column="30">==<pos:position pos:line="2045" pos:column="32"/></operator><name pos:line="2045" pos:column="32">SAVEPOINT_RELEASE<pos:position pos:line="2045" pos:column="49"/></name></expr> )<pos:position pos:line="2045" pos:column="51"/></condition><then><block pos:line="2045" pos:column="51">{
        <expr_stmt><expr><name><name pos:line="2046" pos:column="9">db<pos:position pos:line="2046" pos:column="11"/></name><operator pos:line="2046" pos:column="11">-&gt;<pos:position pos:line="2046" pos:column="16"/></operator><name pos:line="2046" pos:column="13">autoCommit<pos:position pos:line="2046" pos:column="23"/></name></name> <operator pos:line="2046" pos:column="24">=<pos:position pos:line="2046" pos:column="25"/></operator> <literal type="number" pos:line="2046" pos:column="26">1<pos:position pos:line="2046" pos:column="27"/></literal></expr>;<pos:position pos:line="2046" pos:column="28"/></expr_stmt>
        <if pos:line="2047" pos:column="9">if<condition pos:line="2047" pos:column="11">( <expr><call><name pos:line="2047" pos:column="13">sqlite3VdbeHalt<pos:position pos:line="2047" pos:column="28"/></name><argument_list pos:line="2047" pos:column="28">(<argument><expr><name pos:line="2047" pos:column="29">p<pos:position pos:line="2047" pos:column="30"/></name></expr></argument>)<pos:position pos:line="2047" pos:column="31"/></argument_list></call><operator pos:line="2047" pos:column="31">==<pos:position pos:line="2047" pos:column="33"/></operator><name pos:line="2047" pos:column="33">SQLITE_BUSY<pos:position pos:line="2047" pos:column="44"/></name></expr> )<pos:position pos:line="2047" pos:column="46"/></condition><then><block pos:line="2047" pos:column="46">{
          <expr_stmt><expr><name><name pos:line="2048" pos:column="11">p<pos:position pos:line="2048" pos:column="12"/></name><operator pos:line="2048" pos:column="12">-&gt;<pos:position pos:line="2048" pos:column="17"/></operator><name pos:line="2048" pos:column="14">pc<pos:position pos:line="2048" pos:column="16"/></name></name> <operator pos:line="2048" pos:column="17">=<pos:position pos:line="2048" pos:column="18"/></operator> <name pos:line="2048" pos:column="19">pc<pos:position pos:line="2048" pos:column="21"/></name></expr>;<pos:position pos:line="2048" pos:column="22"/></expr_stmt>
          <expr_stmt><expr><name><name pos:line="2049" pos:column="11">db<pos:position pos:line="2049" pos:column="13"/></name><operator pos:line="2049" pos:column="13">-&gt;<pos:position pos:line="2049" pos:column="18"/></operator><name pos:line="2049" pos:column="15">autoCommit<pos:position pos:line="2049" pos:column="25"/></name></name> <operator pos:line="2049" pos:column="26">=<pos:position pos:line="2049" pos:column="27"/></operator> <literal type="number" pos:line="2049" pos:column="28">0<pos:position pos:line="2049" pos:column="29"/></literal></expr>;<pos:position pos:line="2049" pos:column="30"/></expr_stmt>
          <expr_stmt><expr><name><name pos:line="2050" pos:column="11">p<pos:position pos:line="2050" pos:column="12"/></name><operator pos:line="2050" pos:column="12">-&gt;<pos:position pos:line="2050" pos:column="17"/></operator><name pos:line="2050" pos:column="14">rc<pos:position pos:line="2050" pos:column="16"/></name></name> <operator pos:line="2050" pos:column="17">=<pos:position pos:line="2050" pos:column="18"/></operator> <name pos:line="2050" pos:column="19">rc<pos:position pos:line="2050" pos:column="21"/></name> <operator pos:line="2050" pos:column="22">=<pos:position pos:line="2050" pos:column="23"/></operator> <name pos:line="2050" pos:column="24">SQLITE_BUSY<pos:position pos:line="2050" pos:column="35"/></name></expr>;<pos:position pos:line="2050" pos:column="36"/></expr_stmt>
          <goto pos:line="2051" pos:column="11">goto <name pos:line="2051" pos:column="16">vdbe_return<pos:position pos:line="2051" pos:column="27"/></name>;<pos:position pos:line="2051" pos:column="28"/></goto>
        }<pos:position pos:line="2052" pos:column="10"/></block></then></if>
        <expr_stmt><expr><name><name pos:line="2053" pos:column="9">db<pos:position pos:line="2053" pos:column="11"/></name><operator pos:line="2053" pos:column="11">-&gt;<pos:position pos:line="2053" pos:column="16"/></operator><name pos:line="2053" pos:column="13">isTransactionSavepoint<pos:position pos:line="2053" pos:column="35"/></name></name> <operator pos:line="2053" pos:column="36">=<pos:position pos:line="2053" pos:column="37"/></operator> <literal type="number" pos:line="2053" pos:column="38">0<pos:position pos:line="2053" pos:column="39"/></literal></expr>;<pos:position pos:line="2053" pos:column="40"/></expr_stmt>
        <expr_stmt><expr><name pos:line="2054" pos:column="9">rc<pos:position pos:line="2054" pos:column="11"/></name> <operator pos:line="2054" pos:column="12">=<pos:position pos:line="2054" pos:column="13"/></operator> <name><name pos:line="2054" pos:column="14">p<pos:position pos:line="2054" pos:column="15"/></name><operator pos:line="2054" pos:column="15">-&gt;<pos:position pos:line="2054" pos:column="20"/></operator><name pos:line="2054" pos:column="17">rc<pos:position pos:line="2054" pos:column="19"/></name></name></expr>;<pos:position pos:line="2054" pos:column="20"/></expr_stmt>
      }<pos:position pos:line="2055" pos:column="8"/></block></then><else pos:line="2055" pos:column="8">else<block pos:line="2055" pos:column="12">{
        <expr_stmt><expr><name pos:line="2056" pos:column="9">iSavepoint<pos:position pos:line="2056" pos:column="19"/></name> <operator pos:line="2056" pos:column="20">=<pos:position pos:line="2056" pos:column="21"/></operator> <name><name pos:line="2056" pos:column="22">db<pos:position pos:line="2056" pos:column="24"/></name><operator pos:line="2056" pos:column="24">-&gt;<pos:position pos:line="2056" pos:column="29"/></operator><name pos:line="2056" pos:column="26">nSavepoint<pos:position pos:line="2056" pos:column="36"/></name></name> <operator pos:line="2056" pos:column="37">-<pos:position pos:line="2056" pos:column="38"/></operator> <name pos:line="2056" pos:column="39">iSavepoint<pos:position pos:line="2056" pos:column="49"/></name> <operator pos:line="2056" pos:column="50">-<pos:position pos:line="2056" pos:column="51"/></operator> <literal type="number" pos:line="2056" pos:column="52">1<pos:position pos:line="2056" pos:column="53"/></literal></expr>;<pos:position pos:line="2056" pos:column="54"/></expr_stmt>
        <for pos:line="2057" pos:column="9">for<control pos:line="2057" pos:column="12">(<init><expr><name pos:line="2057" pos:column="13">ii<pos:position pos:line="2057" pos:column="15"/></name><operator pos:line="2057" pos:column="15">=<pos:position pos:line="2057" pos:column="16"/></operator><literal type="number" pos:line="2057" pos:column="16">0<pos:position pos:line="2057" pos:column="17"/></literal></expr>;<pos:position pos:line="2057" pos:column="18"/></init> <condition><expr><name pos:line="2057" pos:column="19">ii<pos:position pos:line="2057" pos:column="21"/></name><operator pos:line="2057" pos:column="21">&lt;<pos:position pos:line="2057" pos:column="25"/></operator><name><name pos:line="2057" pos:column="22">db<pos:position pos:line="2057" pos:column="24"/></name><operator pos:line="2057" pos:column="24">-&gt;<pos:position pos:line="2057" pos:column="29"/></operator><name pos:line="2057" pos:column="26">nDb<pos:position pos:line="2057" pos:column="29"/></name></name></expr>;<pos:position pos:line="2057" pos:column="30"/></condition> <incr><expr><name pos:line="2057" pos:column="31">ii<pos:position pos:line="2057" pos:column="33"/></name><operator pos:line="2057" pos:column="33">++<pos:position pos:line="2057" pos:column="35"/></operator></expr></incr>)<pos:position pos:line="2057" pos:column="36"/></control><block pos:line="2057" pos:column="36">{
          <expr_stmt><expr><name pos:line="2058" pos:column="11">rc<pos:position pos:line="2058" pos:column="13"/></name> <operator pos:line="2058" pos:column="14">=<pos:position pos:line="2058" pos:column="15"/></operator> <call><name pos:line="2058" pos:column="16">sqlite3BtreeSavepoint<pos:position pos:line="2058" pos:column="37"/></name><argument_list pos:line="2058" pos:column="37">(<argument><expr><name><name pos:line="2058" pos:column="38">db<pos:position pos:line="2058" pos:column="40"/></name><operator pos:line="2058" pos:column="40">-&gt;<pos:position pos:line="2058" pos:column="45"/></operator><name pos:line="2058" pos:column="42">aDb<pos:position pos:line="2058" pos:column="45"/></name><index pos:line="2058" pos:column="45">[<expr><name pos:line="2058" pos:column="46">ii<pos:position pos:line="2058" pos:column="48"/></name></expr>]<pos:position pos:line="2058" pos:column="49"/></index></name><operator pos:line="2058" pos:column="49">.<pos:position pos:line="2058" pos:column="50"/></operator><name pos:line="2058" pos:column="50">pBt<pos:position pos:line="2058" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="2058" pos:column="55">p1<pos:position pos:line="2058" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="2058" pos:column="59">iSavepoint<pos:position pos:line="2058" pos:column="69"/></name></expr></argument>)<pos:position pos:line="2058" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="2058" pos:column="71"/></expr_stmt>
          <if pos:line="2059" pos:column="11">if<condition pos:line="2059" pos:column="13">( <expr><name pos:line="2059" pos:column="15">rc<pos:position pos:line="2059" pos:column="17"/></name><operator pos:line="2059" pos:column="17">!=<pos:position pos:line="2059" pos:column="19"/></operator><name pos:line="2059" pos:column="19">SQLITE_OK<pos:position pos:line="2059" pos:column="28"/></name></expr> )<pos:position pos:line="2059" pos:column="30"/></condition><then><block pos:line="2059" pos:column="30">{
            <goto pos:line="2060" pos:column="13">goto <name pos:line="2060" pos:column="18">abort_due_to_error<pos:position pos:line="2060" pos:column="36"/></name>;<pos:position pos:line="2060" pos:column="37"/></goto>
          }<pos:position pos:line="2061" pos:column="12"/></block></then></if>
        }<pos:position pos:line="2062" pos:column="10"/></block></for>
        <if pos:line="2063" pos:column="9">if<condition pos:line="2063" pos:column="11">( <expr><name pos:line="2063" pos:column="13">p1<pos:position pos:line="2063" pos:column="15"/></name><operator pos:line="2063" pos:column="15">==<pos:position pos:line="2063" pos:column="17"/></operator><name pos:line="2063" pos:column="17">SAVEPOINT_ROLLBACK<pos:position pos:line="2063" pos:column="35"/></name> <operator pos:line="2063" pos:column="36">&amp;&amp;<pos:position pos:line="2063" pos:column="46"/></operator> <operator pos:line="2063" pos:column="39">(<pos:position pos:line="2063" pos:column="40"/></operator><name><name pos:line="2063" pos:column="40">db<pos:position pos:line="2063" pos:column="42"/></name><operator pos:line="2063" pos:column="42">-&gt;<pos:position pos:line="2063" pos:column="47"/></operator><name pos:line="2063" pos:column="44">flags<pos:position pos:line="2063" pos:column="49"/></name></name><operator pos:line="2063" pos:column="49">&amp;<pos:position pos:line="2063" pos:column="54"/></operator><name pos:line="2063" pos:column="50">SQLITE_InternChanges<pos:position pos:line="2063" pos:column="70"/></name><operator pos:line="2063" pos:column="70">)<pos:position pos:line="2063" pos:column="71"/></operator><operator pos:line="2063" pos:column="71">!=<pos:position pos:line="2063" pos:column="73"/></operator><literal type="number" pos:line="2063" pos:column="73">0<pos:position pos:line="2063" pos:column="74"/></literal></expr> )<pos:position pos:line="2063" pos:column="76"/></condition><then><block pos:line="2063" pos:column="76">{
          <expr_stmt><expr><call><name pos:line="2064" pos:column="11">sqlite3ExpirePreparedStatements<pos:position pos:line="2064" pos:column="42"/></name><argument_list pos:line="2064" pos:column="42">(<argument><expr><name pos:line="2064" pos:column="43">db<pos:position pos:line="2064" pos:column="45"/></name></expr></argument>)<pos:position pos:line="2064" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="2064" pos:column="47"/></expr_stmt>
          <expr_stmt><expr><call><name pos:line="2065" pos:column="11">sqlite3ResetInternalSchema<pos:position pos:line="2065" pos:column="37"/></name><argument_list pos:line="2065" pos:column="37">(<argument><expr><name pos:line="2065" pos:column="38">db<pos:position pos:line="2065" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="2065" pos:column="42">0<pos:position pos:line="2065" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="2065" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="2065" pos:column="45"/></expr_stmt>
        }<pos:position pos:line="2066" pos:column="10"/></block></then></if>
      }<pos:position pos:line="2067" pos:column="8"/></block></else></if>
  
      <comment type="block" pos:line="2069" pos:column="7">/* Regardless of whether this is a RELEASE or ROLLBACK, destroy all 
      ** savepoints nested inside of the savepoint being operated on. */</comment>
      <while pos:line="2071" pos:column="7">while<condition pos:line="2071" pos:column="12">( <expr><name><name pos:line="2071" pos:column="14">db<pos:position pos:line="2071" pos:column="16"/></name><operator pos:line="2071" pos:column="16">-&gt;<pos:position pos:line="2071" pos:column="21"/></operator><name pos:line="2071" pos:column="18">pSavepoint<pos:position pos:line="2071" pos:column="28"/></name></name><operator pos:line="2071" pos:column="28">!=<pos:position pos:line="2071" pos:column="30"/></operator><name pos:line="2071" pos:column="30">pSavepoint<pos:position pos:line="2071" pos:column="40"/></name></expr> )<pos:position pos:line="2071" pos:column="42"/></condition><block pos:line="2071" pos:column="42">{
        <expr_stmt><expr><name pos:line="2072" pos:column="9">pTmp<pos:position pos:line="2072" pos:column="13"/></name> <operator pos:line="2072" pos:column="14">=<pos:position pos:line="2072" pos:column="15"/></operator> <name><name pos:line="2072" pos:column="16">db<pos:position pos:line="2072" pos:column="18"/></name><operator pos:line="2072" pos:column="18">-&gt;<pos:position pos:line="2072" pos:column="23"/></operator><name pos:line="2072" pos:column="20">pSavepoint<pos:position pos:line="2072" pos:column="30"/></name></name></expr>;<pos:position pos:line="2072" pos:column="31"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="2073" pos:column="9">db<pos:position pos:line="2073" pos:column="11"/></name><operator pos:line="2073" pos:column="11">-&gt;<pos:position pos:line="2073" pos:column="16"/></operator><name pos:line="2073" pos:column="13">pSavepoint<pos:position pos:line="2073" pos:column="23"/></name></name> <operator pos:line="2073" pos:column="24">=<pos:position pos:line="2073" pos:column="25"/></operator> <name><name pos:line="2073" pos:column="26">pTmp<pos:position pos:line="2073" pos:column="30"/></name><operator pos:line="2073" pos:column="30">-&gt;<pos:position pos:line="2073" pos:column="35"/></operator><name pos:line="2073" pos:column="32">pNext<pos:position pos:line="2073" pos:column="37"/></name></name></expr>;<pos:position pos:line="2073" pos:column="38"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="2074" pos:column="9">sqlite3DbFree<pos:position pos:line="2074" pos:column="22"/></name><argument_list pos:line="2074" pos:column="22">(<argument><expr><name pos:line="2074" pos:column="23">db<pos:position pos:line="2074" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="2074" pos:column="27">pTmp<pos:position pos:line="2074" pos:column="31"/></name></expr></argument>)<pos:position pos:line="2074" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="2074" pos:column="33"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="2075" pos:column="9">db<pos:position pos:line="2075" pos:column="11"/></name><operator pos:line="2075" pos:column="11">-&gt;<pos:position pos:line="2075" pos:column="16"/></operator><name pos:line="2075" pos:column="13">nSavepoint<pos:position pos:line="2075" pos:column="23"/></name></name><operator pos:line="2075" pos:column="23">--<pos:position pos:line="2075" pos:column="25"/></operator></expr>;<pos:position pos:line="2075" pos:column="26"/></expr_stmt>
      }<pos:position pos:line="2076" pos:column="8"/></block></while>

      <comment type="block" pos:line="2078" pos:column="7">/* If it is a RELEASE, then destroy the savepoint being operated on too */</comment>
      <if pos:line="2079" pos:column="7">if<condition pos:line="2079" pos:column="9">( <expr><name pos:line="2079" pos:column="11">p1<pos:position pos:line="2079" pos:column="13"/></name><operator pos:line="2079" pos:column="13">==<pos:position pos:line="2079" pos:column="15"/></operator><name pos:line="2079" pos:column="15">SAVEPOINT_RELEASE<pos:position pos:line="2079" pos:column="32"/></name></expr> )<pos:position pos:line="2079" pos:column="34"/></condition><then><block pos:line="2079" pos:column="34">{
        <expr_stmt><expr><call><name pos:line="2080" pos:column="9">assert<pos:position pos:line="2080" pos:column="15"/></name><argument_list pos:line="2080" pos:column="15">( <argument><expr><name pos:line="2080" pos:column="17">pSavepoint<pos:position pos:line="2080" pos:column="27"/></name><operator pos:line="2080" pos:column="27">==<pos:position pos:line="2080" pos:column="29"/></operator><name><name pos:line="2080" pos:column="29">db<pos:position pos:line="2080" pos:column="31"/></name><operator pos:line="2080" pos:column="31">-&gt;<pos:position pos:line="2080" pos:column="36"/></operator><name pos:line="2080" pos:column="33">pSavepoint<pos:position pos:line="2080" pos:column="43"/></name></name></expr></argument> )<pos:position pos:line="2080" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="2080" pos:column="46"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="2081" pos:column="9">db<pos:position pos:line="2081" pos:column="11"/></name><operator pos:line="2081" pos:column="11">-&gt;<pos:position pos:line="2081" pos:column="16"/></operator><name pos:line="2081" pos:column="13">pSavepoint<pos:position pos:line="2081" pos:column="23"/></name></name> <operator pos:line="2081" pos:column="24">=<pos:position pos:line="2081" pos:column="25"/></operator> <name><name pos:line="2081" pos:column="26">pSavepoint<pos:position pos:line="2081" pos:column="36"/></name><operator pos:line="2081" pos:column="36">-&gt;<pos:position pos:line="2081" pos:column="41"/></operator><name pos:line="2081" pos:column="38">pNext<pos:position pos:line="2081" pos:column="43"/></name></name></expr>;<pos:position pos:line="2081" pos:column="44"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="2082" pos:column="9">sqlite3DbFree<pos:position pos:line="2082" pos:column="22"/></name><argument_list pos:line="2082" pos:column="22">(<argument><expr><name pos:line="2082" pos:column="23">db<pos:position pos:line="2082" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="2082" pos:column="27">pSavepoint<pos:position pos:line="2082" pos:column="37"/></name></expr></argument>)<pos:position pos:line="2082" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="2082" pos:column="39"/></expr_stmt>
        <if pos:line="2083" pos:column="9">if<condition pos:line="2083" pos:column="11">( <expr><operator pos:line="2083" pos:column="13">!<pos:position pos:line="2083" pos:column="14"/></operator><name pos:line="2083" pos:column="14">isTransaction<pos:position pos:line="2083" pos:column="27"/></name></expr> )<pos:position pos:line="2083" pos:column="29"/></condition><then><block pos:line="2083" pos:column="29">{
          <expr_stmt><expr><name><name pos:line="2084" pos:column="11">db<pos:position pos:line="2084" pos:column="13"/></name><operator pos:line="2084" pos:column="13">-&gt;<pos:position pos:line="2084" pos:column="18"/></operator><name pos:line="2084" pos:column="15">nSavepoint<pos:position pos:line="2084" pos:column="25"/></name></name><operator pos:line="2084" pos:column="25">--<pos:position pos:line="2084" pos:column="27"/></operator></expr>;<pos:position pos:line="2084" pos:column="28"/></expr_stmt>
        }<pos:position pos:line="2085" pos:column="10"/></block></then></if>
      }<pos:position pos:line="2086" pos:column="8"/></block></then></if>
    }<pos:position pos:line="2087" pos:column="6"/></block></else></if>
  }<pos:position pos:line="2088" pos:column="4"/></block></else></if>

  <break pos:line="2090" pos:column="3">break;<pos:position pos:line="2090" pos:column="9"/></break>
}<pos:position pos:line="2091" pos:column="2"/></block>

<comment type="block" pos:line="2093" pos:column="1">/* Opcode: AutoCommit P1 P2 * * *
**
** Set the database auto-commit flag to P1 (1 or 0). If P2 is true, roll
** back any currently active btree transactions. If there are any active
** VMs (apart from this one), then a ROLLBACK fails.  A COMMIT fails if
** there are active writing VMs or active VMs that use shared cache.
**
** This instruction causes the VM to halt.
*/</comment>
<case pos:line="2102" pos:column="1">case <expr><name pos:line="2102" pos:column="6">OP_AutoCommit<pos:position pos:line="2102" pos:column="19"/></name></expr>:<pos:position pos:line="2102" pos:column="20"/></case> <block pos:line="2102" pos:column="21">{
  <decl_stmt><decl><type><name pos:line="2103" pos:column="3">int<pos:position pos:line="2103" pos:column="6"/></name></type> <name pos:line="2103" pos:column="7">desiredAutoCommit<pos:position pos:line="2103" pos:column="24"/></name></decl>;<pos:position pos:line="2103" pos:column="25"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="2104" pos:column="3">int<pos:position pos:line="2104" pos:column="6"/></name></type> <name pos:line="2104" pos:column="7">iRollback<pos:position pos:line="2104" pos:column="16"/></name></decl>;<pos:position pos:line="2104" pos:column="17"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="2105" pos:column="3">int<pos:position pos:line="2105" pos:column="6"/></name></type> <name pos:line="2105" pos:column="7">turnOnAC<pos:position pos:line="2105" pos:column="15"/></name></decl>;<pos:position pos:line="2105" pos:column="16"/></decl_stmt>

  <expr_stmt><expr><name pos:line="2107" pos:column="3">desiredAutoCommit<pos:position pos:line="2107" pos:column="20"/></name> <operator pos:line="2107" pos:column="21">=<pos:position pos:line="2107" pos:column="22"/></operator> <name><name pos:line="2107" pos:column="23">pOp<pos:position pos:line="2107" pos:column="26"/></name><operator pos:line="2107" pos:column="26">-&gt;<pos:position pos:line="2107" pos:column="31"/></operator><name pos:line="2107" pos:column="28">p1<pos:position pos:line="2107" pos:column="30"/></name></name></expr>;<pos:position pos:line="2107" pos:column="31"/></expr_stmt>
  <expr_stmt><expr><name pos:line="2108" pos:column="3">iRollback<pos:position pos:line="2108" pos:column="12"/></name> <operator pos:line="2108" pos:column="13">=<pos:position pos:line="2108" pos:column="14"/></operator> <name><name pos:line="2108" pos:column="15">pOp<pos:position pos:line="2108" pos:column="18"/></name><operator pos:line="2108" pos:column="18">-&gt;<pos:position pos:line="2108" pos:column="23"/></operator><name pos:line="2108" pos:column="20">p2<pos:position pos:line="2108" pos:column="22"/></name></name></expr>;<pos:position pos:line="2108" pos:column="23"/></expr_stmt>
  <expr_stmt><expr><name pos:line="2109" pos:column="3">turnOnAC<pos:position pos:line="2109" pos:column="11"/></name> <operator pos:line="2109" pos:column="12">=<pos:position pos:line="2109" pos:column="13"/></operator> <name pos:line="2109" pos:column="14">desiredAutoCommit<pos:position pos:line="2109" pos:column="31"/></name> <operator pos:line="2109" pos:column="32">&amp;&amp;<pos:position pos:line="2109" pos:column="42"/></operator> <operator pos:line="2109" pos:column="35">!<pos:position pos:line="2109" pos:column="36"/></operator><name><name pos:line="2109" pos:column="36">db<pos:position pos:line="2109" pos:column="38"/></name><operator pos:line="2109" pos:column="38">-&gt;<pos:position pos:line="2109" pos:column="43"/></operator><name pos:line="2109" pos:column="40">autoCommit<pos:position pos:line="2109" pos:column="50"/></name></name></expr>;<pos:position pos:line="2109" pos:column="51"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="2110" pos:column="3">assert<pos:position pos:line="2110" pos:column="9"/></name><argument_list pos:line="2110" pos:column="9">( <argument><expr><name pos:line="2110" pos:column="11">desiredAutoCommit<pos:position pos:line="2110" pos:column="28"/></name><operator pos:line="2110" pos:column="28">==<pos:position pos:line="2110" pos:column="30"/></operator><literal type="number" pos:line="2110" pos:column="30">1<pos:position pos:line="2110" pos:column="31"/></literal> <operator pos:line="2110" pos:column="32">||<pos:position pos:line="2110" pos:column="34"/></operator> <name pos:line="2110" pos:column="35">desiredAutoCommit<pos:position pos:line="2110" pos:column="52"/></name><operator pos:line="2110" pos:column="52">==<pos:position pos:line="2110" pos:column="54"/></operator><literal type="number" pos:line="2110" pos:column="54">0<pos:position pos:line="2110" pos:column="55"/></literal></expr></argument> )<pos:position pos:line="2110" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="2110" pos:column="58"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="2111" pos:column="3">assert<pos:position pos:line="2111" pos:column="9"/></name><argument_list pos:line="2111" pos:column="9">( <argument><expr><name pos:line="2111" pos:column="11">desiredAutoCommit<pos:position pos:line="2111" pos:column="28"/></name><operator pos:line="2111" pos:column="28">==<pos:position pos:line="2111" pos:column="30"/></operator><literal type="number" pos:line="2111" pos:column="30">1<pos:position pos:line="2111" pos:column="31"/></literal> <operator pos:line="2111" pos:column="32">||<pos:position pos:line="2111" pos:column="34"/></operator> <name pos:line="2111" pos:column="35">iRollback<pos:position pos:line="2111" pos:column="44"/></name><operator pos:line="2111" pos:column="44">==<pos:position pos:line="2111" pos:column="46"/></operator><literal type="number" pos:line="2111" pos:column="46">0<pos:position pos:line="2111" pos:column="47"/></literal></expr></argument> )<pos:position pos:line="2111" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="2111" pos:column="50"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="2112" pos:column="3">assert<pos:position pos:line="2112" pos:column="9"/></name><argument_list pos:line="2112" pos:column="9">( <argument><expr><name><name pos:line="2112" pos:column="11">db<pos:position pos:line="2112" pos:column="13"/></name><operator pos:line="2112" pos:column="13">-&gt;<pos:position pos:line="2112" pos:column="18"/></operator><name pos:line="2112" pos:column="15">activeVdbeCnt<pos:position pos:line="2112" pos:column="28"/></name></name><operator pos:line="2112" pos:column="28">&gt;<pos:position pos:line="2112" pos:column="32"/></operator><literal type="number" pos:line="2112" pos:column="29">0<pos:position pos:line="2112" pos:column="30"/></literal></expr></argument> )<pos:position pos:line="2112" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="2112" pos:column="33"/></expr_stmt>  <comment type="block" pos:line="2112" pos:column="35">/* At least this one VM is active */</comment>

  <if pos:line="2114" pos:column="3">if<condition pos:line="2114" pos:column="5">( <expr><name pos:line="2114" pos:column="7">turnOnAC<pos:position pos:line="2114" pos:column="15"/></name> <operator pos:line="2114" pos:column="16">&amp;&amp;<pos:position pos:line="2114" pos:column="26"/></operator> <name pos:line="2114" pos:column="19">iRollback<pos:position pos:line="2114" pos:column="28"/></name> <operator pos:line="2114" pos:column="29">&amp;&amp;<pos:position pos:line="2114" pos:column="39"/></operator> <name><name pos:line="2114" pos:column="32">db<pos:position pos:line="2114" pos:column="34"/></name><operator pos:line="2114" pos:column="34">-&gt;<pos:position pos:line="2114" pos:column="39"/></operator><name pos:line="2114" pos:column="36">activeVdbeCnt<pos:position pos:line="2114" pos:column="49"/></name></name><operator pos:line="2114" pos:column="49">&gt;<pos:position pos:line="2114" pos:column="53"/></operator><literal type="number" pos:line="2114" pos:column="50">1<pos:position pos:line="2114" pos:column="51"/></literal></expr> )<pos:position pos:line="2114" pos:column="53"/></condition><then><block pos:line="2114" pos:column="53">{
    <comment type="block" pos:line="2115" pos:column="5">/* If this instruction implements a ROLLBACK and other VMs are
    ** still running, and a transaction is active, return an error indicating
    ** that the other VMs must complete first. 
    */</comment>
    <expr_stmt><expr><call><name pos:line="2119" pos:column="5">sqlite3SetString<pos:position pos:line="2119" pos:column="21"/></name><argument_list pos:line="2119" pos:column="21">(<argument><expr><operator pos:line="2119" pos:column="22">&amp;<pos:position pos:line="2119" pos:column="27"/></operator><name><name pos:line="2119" pos:column="23">p<pos:position pos:line="2119" pos:column="24"/></name><operator pos:line="2119" pos:column="24">-&gt;<pos:position pos:line="2119" pos:column="29"/></operator><name pos:line="2119" pos:column="26">zErrMsg<pos:position pos:line="2119" pos:column="33"/></name></name></expr></argument>, <argument><expr><name pos:line="2119" pos:column="35">db<pos:position pos:line="2119" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="2119" pos:column="39">"cannot rollback transaction - "<pos:position pos:line="2119" pos:column="71"/></literal>
        <literal type="string" pos:line="2120" pos:column="9">"SQL statements in progress"<pos:position pos:line="2120" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="2120" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="2120" pos:column="39"/></expr_stmt>
    <expr_stmt><expr><name pos:line="2121" pos:column="5">rc<pos:position pos:line="2121" pos:column="7"/></name> <operator pos:line="2121" pos:column="8">=<pos:position pos:line="2121" pos:column="9"/></operator> <name pos:line="2121" pos:column="10">SQLITE_BUSY<pos:position pos:line="2121" pos:column="21"/></name></expr>;<pos:position pos:line="2121" pos:column="22"/></expr_stmt>
  }<pos:position pos:line="2122" pos:column="4"/></block></then><elseif pos:line="2122" pos:column="4">else <if pos:line="2122" pos:column="9">if<condition pos:line="2122" pos:column="11">( <expr><name pos:line="2122" pos:column="13">turnOnAC<pos:position pos:line="2122" pos:column="21"/></name> <operator pos:line="2122" pos:column="22">&amp;&amp;<pos:position pos:line="2122" pos:column="32"/></operator> <operator pos:line="2122" pos:column="25">!<pos:position pos:line="2122" pos:column="26"/></operator><name pos:line="2122" pos:column="26">iRollback<pos:position pos:line="2122" pos:column="35"/></name> <operator pos:line="2122" pos:column="36">&amp;&amp;<pos:position pos:line="2122" pos:column="46"/></operator> <name><name pos:line="2122" pos:column="39">db<pos:position pos:line="2122" pos:column="41"/></name><operator pos:line="2122" pos:column="41">-&gt;<pos:position pos:line="2122" pos:column="46"/></operator><name pos:line="2122" pos:column="43">writeVdbeCnt<pos:position pos:line="2122" pos:column="55"/></name></name><operator pos:line="2122" pos:column="55">&gt;<pos:position pos:line="2122" pos:column="59"/></operator><literal type="number" pos:line="2122" pos:column="56">1<pos:position pos:line="2122" pos:column="57"/></literal></expr> )<pos:position pos:line="2122" pos:column="59"/></condition><then><block pos:line="2122" pos:column="59">{
    <comment type="block" pos:line="2123" pos:column="5">/* If this instruction implements a COMMIT and other VMs are writing
    ** return an error indicating that the other VMs must complete first. 
    */</comment>
    <expr_stmt><expr><call><name pos:line="2126" pos:column="5">sqlite3SetString<pos:position pos:line="2126" pos:column="21"/></name><argument_list pos:line="2126" pos:column="21">(<argument><expr><operator pos:line="2126" pos:column="22">&amp;<pos:position pos:line="2126" pos:column="27"/></operator><name><name pos:line="2126" pos:column="23">p<pos:position pos:line="2126" pos:column="24"/></name><operator pos:line="2126" pos:column="24">-&gt;<pos:position pos:line="2126" pos:column="29"/></operator><name pos:line="2126" pos:column="26">zErrMsg<pos:position pos:line="2126" pos:column="33"/></name></name></expr></argument>, <argument><expr><name pos:line="2126" pos:column="35">db<pos:position pos:line="2126" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="2126" pos:column="39">"cannot commit transaction - "<pos:position pos:line="2126" pos:column="69"/></literal>
        <literal type="string" pos:line="2127" pos:column="9">"SQL statements in progress"<pos:position pos:line="2127" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="2127" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="2127" pos:column="39"/></expr_stmt>
    <expr_stmt><expr><name pos:line="2128" pos:column="5">rc<pos:position pos:line="2128" pos:column="7"/></name> <operator pos:line="2128" pos:column="8">=<pos:position pos:line="2128" pos:column="9"/></operator> <name pos:line="2128" pos:column="10">SQLITE_BUSY<pos:position pos:line="2128" pos:column="21"/></name></expr>;<pos:position pos:line="2128" pos:column="22"/></expr_stmt>
  }<pos:position pos:line="2129" pos:column="4"/></block></then></if></elseif><elseif pos:line="2129" pos:column="4">else <if pos:line="2129" pos:column="9">if<condition pos:line="2129" pos:column="11">( <expr><name pos:line="2129" pos:column="13">desiredAutoCommit<pos:position pos:line="2129" pos:column="30"/></name><operator pos:line="2129" pos:column="30">!=<pos:position pos:line="2129" pos:column="32"/></operator><name><name pos:line="2129" pos:column="32">db<pos:position pos:line="2129" pos:column="34"/></name><operator pos:line="2129" pos:column="34">-&gt;<pos:position pos:line="2129" pos:column="39"/></operator><name pos:line="2129" pos:column="36">autoCommit<pos:position pos:line="2129" pos:column="46"/></name></name></expr> )<pos:position pos:line="2129" pos:column="48"/></condition><then><block pos:line="2129" pos:column="48">{
    <if pos:line="2130" pos:column="5">if<condition pos:line="2130" pos:column="7">( <expr><name pos:line="2130" pos:column="9">iRollback<pos:position pos:line="2130" pos:column="18"/></name></expr> )<pos:position pos:line="2130" pos:column="20"/></condition><then><block pos:line="2130" pos:column="20">{
      <expr_stmt><expr><call><name pos:line="2131" pos:column="7">assert<pos:position pos:line="2131" pos:column="13"/></name><argument_list pos:line="2131" pos:column="13">( <argument><expr><name pos:line="2131" pos:column="15">desiredAutoCommit<pos:position pos:line="2131" pos:column="32"/></name><operator pos:line="2131" pos:column="32">==<pos:position pos:line="2131" pos:column="34"/></operator><literal type="number" pos:line="2131" pos:column="34">1<pos:position pos:line="2131" pos:column="35"/></literal></expr></argument> )<pos:position pos:line="2131" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="2131" pos:column="38"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="2132" pos:column="7">sqlite3RollbackAll<pos:position pos:line="2132" pos:column="25"/></name><argument_list pos:line="2132" pos:column="25">(<argument><expr><name pos:line="2132" pos:column="26">db<pos:position pos:line="2132" pos:column="28"/></name></expr></argument>)<pos:position pos:line="2132" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="2132" pos:column="30"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="2133" pos:column="7">db<pos:position pos:line="2133" pos:column="9"/></name><operator pos:line="2133" pos:column="9">-&gt;<pos:position pos:line="2133" pos:column="14"/></operator><name pos:line="2133" pos:column="11">autoCommit<pos:position pos:line="2133" pos:column="21"/></name></name> <operator pos:line="2133" pos:column="22">=<pos:position pos:line="2133" pos:column="23"/></operator> <literal type="number" pos:line="2133" pos:column="24">1<pos:position pos:line="2133" pos:column="25"/></literal></expr>;<pos:position pos:line="2133" pos:column="26"/></expr_stmt>
    }<pos:position pos:line="2134" pos:column="6"/></block></then><else pos:line="2134" pos:column="6">else<block pos:line="2134" pos:column="10">{
      <expr_stmt><expr><name><name pos:line="2135" pos:column="7">db<pos:position pos:line="2135" pos:column="9"/></name><operator pos:line="2135" pos:column="9">-&gt;<pos:position pos:line="2135" pos:column="14"/></operator><name pos:line="2135" pos:column="11">autoCommit<pos:position pos:line="2135" pos:column="21"/></name></name> <operator pos:line="2135" pos:column="22">=<pos:position pos:line="2135" pos:column="23"/></operator> <operator pos:line="2135" pos:column="24">(<pos:position pos:line="2135" pos:column="25"/></operator><name pos:line="2135" pos:column="25">u8<pos:position pos:line="2135" pos:column="27"/></name><operator pos:line="2135" pos:column="27">)<pos:position pos:line="2135" pos:column="28"/></operator><name pos:line="2135" pos:column="28">desiredAutoCommit<pos:position pos:line="2135" pos:column="45"/></name></expr>;<pos:position pos:line="2135" pos:column="46"/></expr_stmt>
      <if pos:line="2136" pos:column="7">if<condition pos:line="2136" pos:column="9">( <expr><call><name pos:line="2136" pos:column="11">sqlite3VdbeHalt<pos:position pos:line="2136" pos:column="26"/></name><argument_list pos:line="2136" pos:column="26">(<argument><expr><name pos:line="2136" pos:column="27">p<pos:position pos:line="2136" pos:column="28"/></name></expr></argument>)<pos:position pos:line="2136" pos:column="29"/></argument_list></call><operator pos:line="2136" pos:column="29">==<pos:position pos:line="2136" pos:column="31"/></operator><name pos:line="2136" pos:column="31">SQLITE_BUSY<pos:position pos:line="2136" pos:column="42"/></name></expr> )<pos:position pos:line="2136" pos:column="44"/></condition><then><block pos:line="2136" pos:column="44">{
        <expr_stmt><expr><name><name pos:line="2137" pos:column="9">p<pos:position pos:line="2137" pos:column="10"/></name><operator pos:line="2137" pos:column="10">-&gt;<pos:position pos:line="2137" pos:column="15"/></operator><name pos:line="2137" pos:column="12">pc<pos:position pos:line="2137" pos:column="14"/></name></name> <operator pos:line="2137" pos:column="15">=<pos:position pos:line="2137" pos:column="16"/></operator> <name pos:line="2137" pos:column="17">pc<pos:position pos:line="2137" pos:column="19"/></name></expr>;<pos:position pos:line="2137" pos:column="20"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="2138" pos:column="9">db<pos:position pos:line="2138" pos:column="11"/></name><operator pos:line="2138" pos:column="11">-&gt;<pos:position pos:line="2138" pos:column="16"/></operator><name pos:line="2138" pos:column="13">autoCommit<pos:position pos:line="2138" pos:column="23"/></name></name> <operator pos:line="2138" pos:column="24">=<pos:position pos:line="2138" pos:column="25"/></operator> <call pos:line="2138" pos:column="26">(<name pos:line="2138" pos:column="27">u8<pos:position pos:line="2138" pos:column="29"/></name>)<argument_list pos:line="2138" pos:column="30">(<argument><expr><literal type="number" pos:line="2138" pos:column="31">1<pos:position pos:line="2138" pos:column="32"/></literal><operator pos:line="2138" pos:column="32">-<pos:position pos:line="2138" pos:column="33"/></operator><name pos:line="2138" pos:column="33">desiredAutoCommit<pos:position pos:line="2138" pos:column="50"/></name></expr></argument>)<pos:position pos:line="2138" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="2138" pos:column="52"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="2139" pos:column="9">p<pos:position pos:line="2139" pos:column="10"/></name><operator pos:line="2139" pos:column="10">-&gt;<pos:position pos:line="2139" pos:column="15"/></operator><name pos:line="2139" pos:column="12">rc<pos:position pos:line="2139" pos:column="14"/></name></name> <operator pos:line="2139" pos:column="15">=<pos:position pos:line="2139" pos:column="16"/></operator> <name pos:line="2139" pos:column="17">rc<pos:position pos:line="2139" pos:column="19"/></name> <operator pos:line="2139" pos:column="20">=<pos:position pos:line="2139" pos:column="21"/></operator> <name pos:line="2139" pos:column="22">SQLITE_BUSY<pos:position pos:line="2139" pos:column="33"/></name></expr>;<pos:position pos:line="2139" pos:column="34"/></expr_stmt>
        <goto pos:line="2140" pos:column="9">goto <name pos:line="2140" pos:column="14">vdbe_return<pos:position pos:line="2140" pos:column="25"/></name>;<pos:position pos:line="2140" pos:column="26"/></goto>
      }<pos:position pos:line="2141" pos:column="8"/></block></then></if>
    }<pos:position pos:line="2142" pos:column="6"/></block></else></if>
    <expr_stmt><expr><call><name pos:line="2143" pos:column="5">assert<pos:position pos:line="2143" pos:column="11"/></name><argument_list pos:line="2143" pos:column="11">( <argument><expr><name><name pos:line="2143" pos:column="13">db<pos:position pos:line="2143" pos:column="15"/></name><operator pos:line="2143" pos:column="15">-&gt;<pos:position pos:line="2143" pos:column="20"/></operator><name pos:line="2143" pos:column="17">nStatement<pos:position pos:line="2143" pos:column="27"/></name></name><operator pos:line="2143" pos:column="27">==<pos:position pos:line="2143" pos:column="29"/></operator><literal type="number" pos:line="2143" pos:column="29">0<pos:position pos:line="2143" pos:column="30"/></literal></expr></argument> )<pos:position pos:line="2143" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="2143" pos:column="33"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="2144" pos:column="5">sqlite3CloseSavepoints<pos:position pos:line="2144" pos:column="27"/></name><argument_list pos:line="2144" pos:column="27">(<argument><expr><name pos:line="2144" pos:column="28">db<pos:position pos:line="2144" pos:column="30"/></name></expr></argument>)<pos:position pos:line="2144" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="2144" pos:column="32"/></expr_stmt>
    <if pos:line="2145" pos:column="5">if<condition pos:line="2145" pos:column="7">( <expr><name><name pos:line="2145" pos:column="9">p<pos:position pos:line="2145" pos:column="10"/></name><operator pos:line="2145" pos:column="10">-&gt;<pos:position pos:line="2145" pos:column="15"/></operator><name pos:line="2145" pos:column="12">rc<pos:position pos:line="2145" pos:column="14"/></name></name><operator pos:line="2145" pos:column="14">==<pos:position pos:line="2145" pos:column="16"/></operator><name pos:line="2145" pos:column="16">SQLITE_OK<pos:position pos:line="2145" pos:column="25"/></name></expr> )<pos:position pos:line="2145" pos:column="27"/></condition><then><block pos:line="2145" pos:column="27">{
      <expr_stmt><expr><name pos:line="2146" pos:column="7">rc<pos:position pos:line="2146" pos:column="9"/></name> <operator pos:line="2146" pos:column="10">=<pos:position pos:line="2146" pos:column="11"/></operator> <name pos:line="2146" pos:column="12">SQLITE_DONE<pos:position pos:line="2146" pos:column="23"/></name></expr>;<pos:position pos:line="2146" pos:column="24"/></expr_stmt>
    }<pos:position pos:line="2147" pos:column="6"/></block></then><else pos:line="2147" pos:column="6">else<block pos:line="2147" pos:column="10">{
      <expr_stmt><expr><name pos:line="2148" pos:column="7">rc<pos:position pos:line="2148" pos:column="9"/></name> <operator pos:line="2148" pos:column="10">=<pos:position pos:line="2148" pos:column="11"/></operator> <name pos:line="2148" pos:column="12">SQLITE_ERROR<pos:position pos:line="2148" pos:column="24"/></name></expr>;<pos:position pos:line="2148" pos:column="25"/></expr_stmt>
    }<pos:position pos:line="2149" pos:column="6"/></block></else></if>
    <goto pos:line="2150" pos:column="5">goto <name pos:line="2150" pos:column="10">vdbe_return<pos:position pos:line="2150" pos:column="21"/></name>;<pos:position pos:line="2150" pos:column="22"/></goto>
  }<pos:position pos:line="2151" pos:column="4"/></block></then></if></elseif><else pos:line="2151" pos:column="4">else<block pos:line="2151" pos:column="8">{
    <expr_stmt><expr><call><name pos:line="2152" pos:column="5">sqlite3SetString<pos:position pos:line="2152" pos:column="21"/></name><argument_list pos:line="2152" pos:column="21">(<argument><expr><operator pos:line="2152" pos:column="22">&amp;<pos:position pos:line="2152" pos:column="27"/></operator><name><name pos:line="2152" pos:column="23">p<pos:position pos:line="2152" pos:column="24"/></name><operator pos:line="2152" pos:column="24">-&gt;<pos:position pos:line="2152" pos:column="29"/></operator><name pos:line="2152" pos:column="26">zErrMsg<pos:position pos:line="2152" pos:column="33"/></name></name></expr></argument>, <argument><expr><name pos:line="2152" pos:column="35">db<pos:position pos:line="2152" pos:column="37"/></name></expr></argument>,
        <argument><expr><ternary><condition><expr><operator pos:line="2153" pos:column="9">(<pos:position pos:line="2153" pos:column="10"/></operator><operator pos:line="2153" pos:column="10">!<pos:position pos:line="2153" pos:column="11"/></operator><name pos:line="2153" pos:column="11">desiredAutoCommit<pos:position pos:line="2153" pos:column="28"/></name><operator pos:line="2153" pos:column="28">)<pos:position pos:line="2153" pos:column="29"/></operator></expr>?<pos:position pos:line="2153" pos:column="30"/></condition><then><expr><literal type="string" pos:line="2153" pos:column="30">"cannot start a transaction within a transaction"<pos:position pos:line="2153" pos:column="79"/></literal></expr></then><else pos:line="2153" pos:column="79">:<expr><operator pos:line="2153" pos:column="80">(<pos:position pos:line="2153" pos:column="81"/></operator>
        <ternary><condition><expr><operator pos:line="2154" pos:column="9">(<pos:position pos:line="2154" pos:column="10"/></operator><name pos:line="2154" pos:column="10">iRollback<pos:position pos:line="2154" pos:column="19"/></name><operator pos:line="2154" pos:column="19">)<pos:position pos:line="2154" pos:column="20"/></operator></expr>?<pos:position pos:line="2154" pos:column="21"/></condition><then><expr><literal type="string" pos:line="2154" pos:column="21">"cannot rollback - no transaction is active"<pos:position pos:line="2154" pos:column="65"/></literal></expr></then><else pos:line="2154" pos:column="65">:
                   <expr><literal type="string" pos:line="2155" pos:column="20">"cannot commit - no transaction is active"<pos:position pos:line="2155" pos:column="62"/></literal></expr></else></ternary><operator pos:line="2155" pos:column="62">)<pos:position pos:line="2155" pos:column="63"/></operator></expr></else></ternary></expr></argument>)<pos:position pos:line="2155" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="2155" pos:column="65"/></expr_stmt>
         
    <expr_stmt><expr><name pos:line="2157" pos:column="5">rc<pos:position pos:line="2157" pos:column="7"/></name> <operator pos:line="2157" pos:column="8">=<pos:position pos:line="2157" pos:column="9"/></operator> <name pos:line="2157" pos:column="10">SQLITE_ERROR<pos:position pos:line="2157" pos:column="22"/></name></expr>;<pos:position pos:line="2157" pos:column="23"/></expr_stmt>
  }<pos:position pos:line="2158" pos:column="4"/></block></else></if>
  <break pos:line="2159" pos:column="3">break;<pos:position pos:line="2159" pos:column="9"/></break>
}<pos:position pos:line="2160" pos:column="2"/></block>

<comment type="block" pos:line="2162" pos:column="1">/* Opcode: Transaction P1 P2 * * *
**
** Begin a transaction.  The transaction ends when a Commit or Rollback
** opcode is encountered.  Depending on the ON CONFLICT setting, the
** transaction might also be rolled back if an error is encountered.
**
** P1 is the index of the database file on which the transaction is
** started.  Index 0 is the main database file and index 1 is the
** file used for temporary tables.  Indices of 2 or more are used for
** attached databases.
**
** If P2 is non-zero, then a write-transaction is started.  A RESERVED lock is
** obtained on the database file when a write-transaction is started.  No
** other process can start another write transaction while this transaction is
** underway.  Starting a write transaction also creates a rollback journal. A
** write transaction must be started before any changes can be made to the
** database.  If P2 is 2 or greater then an EXCLUSIVE lock is also obtained
** on the file.
**
** If P2 is zero, then a read-lock is obtained on the database file.
*/</comment>
<case pos:line="2183" pos:column="1">case <expr><name pos:line="2183" pos:column="6">OP_Transaction<pos:position pos:line="2183" pos:column="20"/></name></expr>:<pos:position pos:line="2183" pos:column="21"/></case> <block pos:line="2183" pos:column="22">{
  <decl_stmt><decl><type><name pos:line="2184" pos:column="3">int<pos:position pos:line="2184" pos:column="6"/></name></type> <name pos:line="2184" pos:column="7">i<pos:position pos:line="2184" pos:column="8"/></name></decl>;<pos:position pos:line="2184" pos:column="9"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="2185" pos:column="3">Btree<pos:position pos:line="2185" pos:column="8"/></name> <modifier pos:line="2185" pos:column="9">*<pos:position pos:line="2185" pos:column="10"/></modifier></type><name pos:line="2185" pos:column="10">pBt<pos:position pos:line="2185" pos:column="13"/></name></decl>;<pos:position pos:line="2185" pos:column="14"/></decl_stmt>

  <expr_stmt><expr><name pos:line="2187" pos:column="3">i<pos:position pos:line="2187" pos:column="4"/></name> <operator pos:line="2187" pos:column="5">=<pos:position pos:line="2187" pos:column="6"/></operator> <name><name pos:line="2187" pos:column="7">pOp<pos:position pos:line="2187" pos:column="10"/></name><operator pos:line="2187" pos:column="10">-&gt;<pos:position pos:line="2187" pos:column="15"/></operator><name pos:line="2187" pos:column="12">p1<pos:position pos:line="2187" pos:column="14"/></name></name></expr>;<pos:position pos:line="2187" pos:column="15"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="2188" pos:column="3">assert<pos:position pos:line="2188" pos:column="9"/></name><argument_list pos:line="2188" pos:column="9">( <argument><expr><name pos:line="2188" pos:column="11">i<pos:position pos:line="2188" pos:column="12"/></name><operator pos:line="2188" pos:column="12">&gt;=<pos:position pos:line="2188" pos:column="17"/></operator><literal type="number" pos:line="2188" pos:column="14">0<pos:position pos:line="2188" pos:column="15"/></literal> <operator pos:line="2188" pos:column="16">&amp;&amp;<pos:position pos:line="2188" pos:column="26"/></operator> <name pos:line="2188" pos:column="19">i<pos:position pos:line="2188" pos:column="20"/></name><operator pos:line="2188" pos:column="20">&lt;<pos:position pos:line="2188" pos:column="24"/></operator><name><name pos:line="2188" pos:column="21">db<pos:position pos:line="2188" pos:column="23"/></name><operator pos:line="2188" pos:column="23">-&gt;<pos:position pos:line="2188" pos:column="28"/></operator><name pos:line="2188" pos:column="25">nDb<pos:position pos:line="2188" pos:column="28"/></name></name></expr></argument> )<pos:position pos:line="2188" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="2188" pos:column="31"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="2189" pos:column="3">assert<pos:position pos:line="2189" pos:column="9"/></name><argument_list pos:line="2189" pos:column="9">( <argument><expr><operator pos:line="2189" pos:column="11">(<pos:position pos:line="2189" pos:column="12"/></operator><name><name pos:line="2189" pos:column="12">p<pos:position pos:line="2189" pos:column="13"/></name><operator pos:line="2189" pos:column="13">-&gt;<pos:position pos:line="2189" pos:column="18"/></operator><name pos:line="2189" pos:column="15">btreeMask<pos:position pos:line="2189" pos:column="24"/></name></name> <operator pos:line="2189" pos:column="25">&amp;<pos:position pos:line="2189" pos:column="30"/></operator> <operator pos:line="2189" pos:column="27">(<pos:position pos:line="2189" pos:column="28"/></operator><literal type="number" pos:line="2189" pos:column="28">1<pos:position pos:line="2189" pos:column="29"/></literal><operator pos:line="2189" pos:column="29">&lt;&lt;<pos:position pos:line="2189" pos:column="37"/></operator><name pos:line="2189" pos:column="31">i<pos:position pos:line="2189" pos:column="32"/></name><operator pos:line="2189" pos:column="32">)<pos:position pos:line="2189" pos:column="33"/></operator><operator pos:line="2189" pos:column="33">)<pos:position pos:line="2189" pos:column="34"/></operator><operator pos:line="2189" pos:column="34">!=<pos:position pos:line="2189" pos:column="36"/></operator><literal type="number" pos:line="2189" pos:column="36">0<pos:position pos:line="2189" pos:column="37"/></literal></expr></argument> )<pos:position pos:line="2189" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="2189" pos:column="40"/></expr_stmt>
  <expr_stmt><expr><name pos:line="2190" pos:column="3">pBt<pos:position pos:line="2190" pos:column="6"/></name> <operator pos:line="2190" pos:column="7">=<pos:position pos:line="2190" pos:column="8"/></operator> <name><name pos:line="2190" pos:column="9">db<pos:position pos:line="2190" pos:column="11"/></name><operator pos:line="2190" pos:column="11">-&gt;<pos:position pos:line="2190" pos:column="16"/></operator><name pos:line="2190" pos:column="13">aDb<pos:position pos:line="2190" pos:column="16"/></name><index pos:line="2190" pos:column="16">[<expr><name pos:line="2190" pos:column="17">i<pos:position pos:line="2190" pos:column="18"/></name></expr>]<pos:position pos:line="2190" pos:column="19"/></index></name><operator pos:line="2190" pos:column="19">.<pos:position pos:line="2190" pos:column="20"/></operator><name pos:line="2190" pos:column="20">pBt<pos:position pos:line="2190" pos:column="23"/></name></expr>;<pos:position pos:line="2190" pos:column="24"/></expr_stmt>

  <if pos:line="2192" pos:column="3">if<condition pos:line="2192" pos:column="5">( <expr><name pos:line="2192" pos:column="7">pBt<pos:position pos:line="2192" pos:column="10"/></name></expr> )<pos:position pos:line="2192" pos:column="12"/></condition><then><block pos:line="2192" pos:column="12">{
    <expr_stmt><expr><name pos:line="2193" pos:column="5">rc<pos:position pos:line="2193" pos:column="7"/></name> <operator pos:line="2193" pos:column="8">=<pos:position pos:line="2193" pos:column="9"/></operator> <call><name pos:line="2193" pos:column="10">sqlite3BtreeBeginTrans<pos:position pos:line="2193" pos:column="32"/></name><argument_list pos:line="2193" pos:column="32">(<argument><expr><name pos:line="2193" pos:column="33">pBt<pos:position pos:line="2193" pos:column="36"/></name></expr></argument>, <argument><expr><name><name pos:line="2193" pos:column="38">pOp<pos:position pos:line="2193" pos:column="41"/></name><operator pos:line="2193" pos:column="41">-&gt;<pos:position pos:line="2193" pos:column="46"/></operator><name pos:line="2193" pos:column="43">p2<pos:position pos:line="2193" pos:column="45"/></name></name></expr></argument>)<pos:position pos:line="2193" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="2193" pos:column="47"/></expr_stmt>
    <if pos:line="2194" pos:column="5">if<condition pos:line="2194" pos:column="7">( <expr><name pos:line="2194" pos:column="9">rc<pos:position pos:line="2194" pos:column="11"/></name><operator pos:line="2194" pos:column="11">==<pos:position pos:line="2194" pos:column="13"/></operator><name pos:line="2194" pos:column="13">SQLITE_BUSY<pos:position pos:line="2194" pos:column="24"/></name></expr> )<pos:position pos:line="2194" pos:column="26"/></condition><then><block pos:line="2194" pos:column="26">{
      <expr_stmt><expr><name><name pos:line="2195" pos:column="7">p<pos:position pos:line="2195" pos:column="8"/></name><operator pos:line="2195" pos:column="8">-&gt;<pos:position pos:line="2195" pos:column="13"/></operator><name pos:line="2195" pos:column="10">pc<pos:position pos:line="2195" pos:column="12"/></name></name> <operator pos:line="2195" pos:column="13">=<pos:position pos:line="2195" pos:column="14"/></operator> <name pos:line="2195" pos:column="15">pc<pos:position pos:line="2195" pos:column="17"/></name></expr>;<pos:position pos:line="2195" pos:column="18"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="2196" pos:column="7">p<pos:position pos:line="2196" pos:column="8"/></name><operator pos:line="2196" pos:column="8">-&gt;<pos:position pos:line="2196" pos:column="13"/></operator><name pos:line="2196" pos:column="10">rc<pos:position pos:line="2196" pos:column="12"/></name></name> <operator pos:line="2196" pos:column="13">=<pos:position pos:line="2196" pos:column="14"/></operator> <name pos:line="2196" pos:column="15">rc<pos:position pos:line="2196" pos:column="17"/></name> <operator pos:line="2196" pos:column="18">=<pos:position pos:line="2196" pos:column="19"/></operator> <name pos:line="2196" pos:column="20">SQLITE_BUSY<pos:position pos:line="2196" pos:column="31"/></name></expr>;<pos:position pos:line="2196" pos:column="32"/></expr_stmt>
      <goto pos:line="2197" pos:column="7">goto <name pos:line="2197" pos:column="12">vdbe_return<pos:position pos:line="2197" pos:column="23"/></name>;<pos:position pos:line="2197" pos:column="24"/></goto>
    }<pos:position pos:line="2198" pos:column="6"/></block></then></if>
    <if pos:line="2199" pos:column="5">if<condition pos:line="2199" pos:column="7">( <expr><name pos:line="2199" pos:column="9">rc<pos:position pos:line="2199" pos:column="11"/></name><operator pos:line="2199" pos:column="11">!=<pos:position pos:line="2199" pos:column="13"/></operator><name pos:line="2199" pos:column="13">SQLITE_OK<pos:position pos:line="2199" pos:column="22"/></name> <operator pos:line="2199" pos:column="23">&amp;&amp;<pos:position pos:line="2199" pos:column="33"/></operator> <name pos:line="2199" pos:column="26">rc<pos:position pos:line="2199" pos:column="28"/></name><operator pos:line="2199" pos:column="28">!=<pos:position pos:line="2199" pos:column="30"/></operator><name pos:line="2199" pos:column="30">SQLITE_READONLY<pos:position pos:line="2199" pos:column="45"/></name></expr> <comment type="block" pos:line="2199" pos:column="46">/* &amp;&amp; rc!=SQLITE_BUSY */</comment> )<pos:position pos:line="2199" pos:column="72"/></condition><then><block pos:line="2199" pos:column="72">{
      <goto pos:line="2200" pos:column="7">goto <name pos:line="2200" pos:column="12">abort_due_to_error<pos:position pos:line="2200" pos:column="30"/></name>;<pos:position pos:line="2200" pos:column="31"/></goto>
    }<pos:position pos:line="2201" pos:column="6"/></block></then></if>
  }<pos:position pos:line="2202" pos:column="4"/></block></then></if>
  <break pos:line="2203" pos:column="3">break;<pos:position pos:line="2203" pos:column="9"/></break>
}<pos:position pos:line="2204" pos:column="2"/></block>

<comment type="block" pos:line="2206" pos:column="1">/* Opcode: ReadCookie P1 P2 P3 * *
**
** Read cookie number P3 from database P1 and write it into register P2.
** P3==1 is the schema version.  P3==2 is the database format.
** P3==3 is the recommended pager cache size, and so forth.  P1==0 is
** the main database file and P1==1 is the database file used to store
** temporary tables.
**
** There must be a read-lock on the database (either a transaction
** must be started or there must be an open cursor) before
** executing this instruction.
*/</comment>
<case pos:line="2218" pos:column="1">case <expr><name pos:line="2218" pos:column="6">OP_ReadCookie<pos:position pos:line="2218" pos:column="19"/></name></expr>:<pos:position pos:line="2218" pos:column="20"/></case> <block pos:line="2218" pos:column="21">{               <comment type="block" pos:line="2218" pos:column="37">/* out2-prerelease */</comment>
  <decl_stmt><decl><type><name pos:line="2219" pos:column="3">int<pos:position pos:line="2219" pos:column="6"/></name></type> <name pos:line="2219" pos:column="7">iMeta<pos:position pos:line="2219" pos:column="12"/></name></decl>;<pos:position pos:line="2219" pos:column="13"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="2220" pos:column="3">int<pos:position pos:line="2220" pos:column="6"/></name></type> <name pos:line="2220" pos:column="7">iDb<pos:position pos:line="2220" pos:column="10"/></name></decl>;<pos:position pos:line="2220" pos:column="11"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="2221" pos:column="3">int<pos:position pos:line="2221" pos:column="6"/></name></type> <name pos:line="2221" pos:column="7">iCookie<pos:position pos:line="2221" pos:column="14"/></name></decl>;<pos:position pos:line="2221" pos:column="15"/></decl_stmt>

  <expr_stmt><expr><name pos:line="2223" pos:column="3">iDb<pos:position pos:line="2223" pos:column="6"/></name> <operator pos:line="2223" pos:column="7">=<pos:position pos:line="2223" pos:column="8"/></operator> <name><name pos:line="2223" pos:column="9">pOp<pos:position pos:line="2223" pos:column="12"/></name><operator pos:line="2223" pos:column="12">-&gt;<pos:position pos:line="2223" pos:column="17"/></operator><name pos:line="2223" pos:column="14">p1<pos:position pos:line="2223" pos:column="16"/></name></name></expr>;<pos:position pos:line="2223" pos:column="17"/></expr_stmt>
  <expr_stmt><expr><name pos:line="2224" pos:column="3">iCookie<pos:position pos:line="2224" pos:column="10"/></name> <operator pos:line="2224" pos:column="11">=<pos:position pos:line="2224" pos:column="12"/></operator> <name><name pos:line="2224" pos:column="13">pOp<pos:position pos:line="2224" pos:column="16"/></name><operator pos:line="2224" pos:column="16">-&gt;<pos:position pos:line="2224" pos:column="21"/></operator><name pos:line="2224" pos:column="18">p3<pos:position pos:line="2224" pos:column="20"/></name></name></expr>;<pos:position pos:line="2224" pos:column="21"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="2225" pos:column="3">assert<pos:position pos:line="2225" pos:column="9"/></name><argument_list pos:line="2225" pos:column="9">( <argument><expr><name><name pos:line="2225" pos:column="11">pOp<pos:position pos:line="2225" pos:column="14"/></name><operator pos:line="2225" pos:column="14">-&gt;<pos:position pos:line="2225" pos:column="19"/></operator><name pos:line="2225" pos:column="16">p3<pos:position pos:line="2225" pos:column="18"/></name></name><operator pos:line="2225" pos:column="18">&lt;<pos:position pos:line="2225" pos:column="22"/></operator><name pos:line="2225" pos:column="19">SQLITE_N_BTREE_META<pos:position pos:line="2225" pos:column="38"/></name></expr></argument> )<pos:position pos:line="2225" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="2225" pos:column="41"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="2226" pos:column="3">assert<pos:position pos:line="2226" pos:column="9"/></name><argument_list pos:line="2226" pos:column="9">( <argument><expr><name pos:line="2226" pos:column="11">iDb<pos:position pos:line="2226" pos:column="14"/></name><operator pos:line="2226" pos:column="14">&gt;=<pos:position pos:line="2226" pos:column="19"/></operator><literal type="number" pos:line="2226" pos:column="16">0<pos:position pos:line="2226" pos:column="17"/></literal> <operator pos:line="2226" pos:column="18">&amp;&amp;<pos:position pos:line="2226" pos:column="28"/></operator> <name pos:line="2226" pos:column="21">iDb<pos:position pos:line="2226" pos:column="24"/></name><operator pos:line="2226" pos:column="24">&lt;<pos:position pos:line="2226" pos:column="28"/></operator><name><name pos:line="2226" pos:column="25">db<pos:position pos:line="2226" pos:column="27"/></name><operator pos:line="2226" pos:column="27">-&gt;<pos:position pos:line="2226" pos:column="32"/></operator><name pos:line="2226" pos:column="29">nDb<pos:position pos:line="2226" pos:column="32"/></name></name></expr></argument> )<pos:position pos:line="2226" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="2226" pos:column="35"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="2227" pos:column="3">assert<pos:position pos:line="2227" pos:column="9"/></name><argument_list pos:line="2227" pos:column="9">( <argument><expr><name><name pos:line="2227" pos:column="11">db<pos:position pos:line="2227" pos:column="13"/></name><operator pos:line="2227" pos:column="13">-&gt;<pos:position pos:line="2227" pos:column="18"/></operator><name pos:line="2227" pos:column="15">aDb<pos:position pos:line="2227" pos:column="18"/></name><index pos:line="2227" pos:column="18">[<expr><name pos:line="2227" pos:column="19">iDb<pos:position pos:line="2227" pos:column="22"/></name></expr>]<pos:position pos:line="2227" pos:column="23"/></index></name><operator pos:line="2227" pos:column="23">.<pos:position pos:line="2227" pos:column="24"/></operator><name pos:line="2227" pos:column="24">pBt<pos:position pos:line="2227" pos:column="27"/></name><operator pos:line="2227" pos:column="27">!=<pos:position pos:line="2227" pos:column="29"/></operator><literal type="number" pos:line="2227" pos:column="29">0<pos:position pos:line="2227" pos:column="30"/></literal></expr></argument> )<pos:position pos:line="2227" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="2227" pos:column="33"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="2228" pos:column="3">assert<pos:position pos:line="2228" pos:column="9"/></name><argument_list pos:line="2228" pos:column="9">( <argument><expr><operator pos:line="2228" pos:column="11">(<pos:position pos:line="2228" pos:column="12"/></operator><name><name pos:line="2228" pos:column="12">p<pos:position pos:line="2228" pos:column="13"/></name><operator pos:line="2228" pos:column="13">-&gt;<pos:position pos:line="2228" pos:column="18"/></operator><name pos:line="2228" pos:column="15">btreeMask<pos:position pos:line="2228" pos:column="24"/></name></name> <operator pos:line="2228" pos:column="25">&amp;<pos:position pos:line="2228" pos:column="30"/></operator> <operator pos:line="2228" pos:column="27">(<pos:position pos:line="2228" pos:column="28"/></operator><literal type="number" pos:line="2228" pos:column="28">1<pos:position pos:line="2228" pos:column="29"/></literal><operator pos:line="2228" pos:column="29">&lt;&lt;<pos:position pos:line="2228" pos:column="37"/></operator><name pos:line="2228" pos:column="31">iDb<pos:position pos:line="2228" pos:column="34"/></name><operator pos:line="2228" pos:column="34">)<pos:position pos:line="2228" pos:column="35"/></operator><operator pos:line="2228" pos:column="35">)<pos:position pos:line="2228" pos:column="36"/></operator><operator pos:line="2228" pos:column="36">!=<pos:position pos:line="2228" pos:column="38"/></operator><literal type="number" pos:line="2228" pos:column="38">0<pos:position pos:line="2228" pos:column="39"/></literal></expr></argument> )<pos:position pos:line="2228" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="2228" pos:column="42"/></expr_stmt>

  <expr_stmt><expr><name pos:line="2230" pos:column="3">rc<pos:position pos:line="2230" pos:column="5"/></name> <operator pos:line="2230" pos:column="6">=<pos:position pos:line="2230" pos:column="7"/></operator> <call><name pos:line="2230" pos:column="8">sqlite3BtreeGetMeta<pos:position pos:line="2230" pos:column="27"/></name><argument_list pos:line="2230" pos:column="27">(<argument><expr><name><name pos:line="2230" pos:column="28">db<pos:position pos:line="2230" pos:column="30"/></name><operator pos:line="2230" pos:column="30">-&gt;<pos:position pos:line="2230" pos:column="35"/></operator><name pos:line="2230" pos:column="32">aDb<pos:position pos:line="2230" pos:column="35"/></name><index pos:line="2230" pos:column="35">[<expr><name pos:line="2230" pos:column="36">iDb<pos:position pos:line="2230" pos:column="39"/></name></expr>]<pos:position pos:line="2230" pos:column="40"/></index></name><operator pos:line="2230" pos:column="40">.<pos:position pos:line="2230" pos:column="41"/></operator><name pos:line="2230" pos:column="41">pBt<pos:position pos:line="2230" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="2230" pos:column="46">iCookie<pos:position pos:line="2230" pos:column="53"/></name></expr></argument>, <argument><expr><operator pos:line="2230" pos:column="55">(<pos:position pos:line="2230" pos:column="56"/></operator><name pos:line="2230" pos:column="56">u32<pos:position pos:line="2230" pos:column="59"/></name> <operator pos:line="2230" pos:column="60">*<pos:position pos:line="2230" pos:column="61"/></operator><operator pos:line="2230" pos:column="61">)<pos:position pos:line="2230" pos:column="62"/></operator><operator pos:line="2230" pos:column="62">&amp;<pos:position pos:line="2230" pos:column="67"/></operator><name pos:line="2230" pos:column="63">iMeta<pos:position pos:line="2230" pos:column="68"/></name></expr></argument>)<pos:position pos:line="2230" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="2230" pos:column="70"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="2231" pos:column="3">pOut<pos:position pos:line="2231" pos:column="7"/></name><operator pos:line="2231" pos:column="7">-&gt;<pos:position pos:line="2231" pos:column="12"/></operator><name pos:line="2231" pos:column="9">u<pos:position pos:line="2231" pos:column="10"/></name><operator pos:line="2231" pos:column="10">.<pos:position pos:line="2231" pos:column="11"/></operator><name pos:line="2231" pos:column="11">i<pos:position pos:line="2231" pos:column="12"/></name></name> <operator pos:line="2231" pos:column="13">=<pos:position pos:line="2231" pos:column="14"/></operator> <name pos:line="2231" pos:column="15">iMeta<pos:position pos:line="2231" pos:column="20"/></name></expr>;<pos:position pos:line="2231" pos:column="21"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="2232" pos:column="3">MemSetTypeFlag<pos:position pos:line="2232" pos:column="17"/></name><argument_list pos:line="2232" pos:column="17">(<argument><expr><name pos:line="2232" pos:column="18">pOut<pos:position pos:line="2232" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="2232" pos:column="24">MEM_Int<pos:position pos:line="2232" pos:column="31"/></name></expr></argument>)<pos:position pos:line="2232" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="2232" pos:column="33"/></expr_stmt>
  <break pos:line="2233" pos:column="3">break;<pos:position pos:line="2233" pos:column="9"/></break>
}<pos:position pos:line="2234" pos:column="2"/></block>

<comment type="block" pos:line="2236" pos:column="1">/* Opcode: SetCookie P1 P2 P3 * *
**
** Write the content of register P3 (interpreted as an integer)
** into cookie number P2 of database P1.  P2==1 is the schema version.  
** P2==2 is the database format. P2==3 is the recommended pager cache 
** size, and so forth.  P1==0 is the main database file and P1==1 is the 
** database file used to store temporary tables.
**
** A transaction must be started before executing this opcode.
*/</comment>
<case pos:line="2246" pos:column="1">case <expr><name pos:line="2246" pos:column="6">OP_SetCookie<pos:position pos:line="2246" pos:column="18"/></name></expr>:<pos:position pos:line="2246" pos:column="19"/></case> <block pos:line="2246" pos:column="20">{       <comment type="block" pos:line="2246" pos:column="28">/* in3 */</comment>
  <decl_stmt><decl><type><name pos:line="2247" pos:column="3">Db<pos:position pos:line="2247" pos:column="5"/></name> <modifier pos:line="2247" pos:column="6">*<pos:position pos:line="2247" pos:column="7"/></modifier></type><name pos:line="2247" pos:column="7">pDb<pos:position pos:line="2247" pos:column="10"/></name></decl>;<pos:position pos:line="2247" pos:column="11"/></decl_stmt>
  <expr_stmt><expr><call><name pos:line="2248" pos:column="3">assert<pos:position pos:line="2248" pos:column="9"/></name><argument_list pos:line="2248" pos:column="9">( <argument><expr><name><name pos:line="2248" pos:column="11">pOp<pos:position pos:line="2248" pos:column="14"/></name><operator pos:line="2248" pos:column="14">-&gt;<pos:position pos:line="2248" pos:column="19"/></operator><name pos:line="2248" pos:column="16">p2<pos:position pos:line="2248" pos:column="18"/></name></name><operator pos:line="2248" pos:column="18">&lt;<pos:position pos:line="2248" pos:column="22"/></operator><name pos:line="2248" pos:column="19">SQLITE_N_BTREE_META<pos:position pos:line="2248" pos:column="38"/></name></expr></argument> )<pos:position pos:line="2248" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="2248" pos:column="41"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="2249" pos:column="3">assert<pos:position pos:line="2249" pos:column="9"/></name><argument_list pos:line="2249" pos:column="9">( <argument><expr><name><name pos:line="2249" pos:column="11">pOp<pos:position pos:line="2249" pos:column="14"/></name><operator pos:line="2249" pos:column="14">-&gt;<pos:position pos:line="2249" pos:column="19"/></operator><name pos:line="2249" pos:column="16">p1<pos:position pos:line="2249" pos:column="18"/></name></name><operator pos:line="2249" pos:column="18">&gt;=<pos:position pos:line="2249" pos:column="23"/></operator><literal type="number" pos:line="2249" pos:column="20">0<pos:position pos:line="2249" pos:column="21"/></literal> <operator pos:line="2249" pos:column="22">&amp;&amp;<pos:position pos:line="2249" pos:column="32"/></operator> <name><name pos:line="2249" pos:column="25">pOp<pos:position pos:line="2249" pos:column="28"/></name><operator pos:line="2249" pos:column="28">-&gt;<pos:position pos:line="2249" pos:column="33"/></operator><name pos:line="2249" pos:column="30">p1<pos:position pos:line="2249" pos:column="32"/></name></name><operator pos:line="2249" pos:column="32">&lt;<pos:position pos:line="2249" pos:column="36"/></operator><name><name pos:line="2249" pos:column="33">db<pos:position pos:line="2249" pos:column="35"/></name><operator pos:line="2249" pos:column="35">-&gt;<pos:position pos:line="2249" pos:column="40"/></operator><name pos:line="2249" pos:column="37">nDb<pos:position pos:line="2249" pos:column="40"/></name></name></expr></argument> )<pos:position pos:line="2249" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="2249" pos:column="43"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="2250" pos:column="3">assert<pos:position pos:line="2250" pos:column="9"/></name><argument_list pos:line="2250" pos:column="9">( <argument><expr><operator pos:line="2250" pos:column="11">(<pos:position pos:line="2250" pos:column="12"/></operator><name><name pos:line="2250" pos:column="12">p<pos:position pos:line="2250" pos:column="13"/></name><operator pos:line="2250" pos:column="13">-&gt;<pos:position pos:line="2250" pos:column="18"/></operator><name pos:line="2250" pos:column="15">btreeMask<pos:position pos:line="2250" pos:column="24"/></name></name> <operator pos:line="2250" pos:column="25">&amp;<pos:position pos:line="2250" pos:column="30"/></operator> <operator pos:line="2250" pos:column="27">(<pos:position pos:line="2250" pos:column="28"/></operator><literal type="number" pos:line="2250" pos:column="28">1<pos:position pos:line="2250" pos:column="29"/></literal><operator pos:line="2250" pos:column="29">&lt;&lt;<pos:position pos:line="2250" pos:column="37"/></operator><name><name pos:line="2250" pos:column="31">pOp<pos:position pos:line="2250" pos:column="34"/></name><operator pos:line="2250" pos:column="34">-&gt;<pos:position pos:line="2250" pos:column="39"/></operator><name pos:line="2250" pos:column="36">p1<pos:position pos:line="2250" pos:column="38"/></name></name><operator pos:line="2250" pos:column="38">)<pos:position pos:line="2250" pos:column="39"/></operator><operator pos:line="2250" pos:column="39">)<pos:position pos:line="2250" pos:column="40"/></operator><operator pos:line="2250" pos:column="40">!=<pos:position pos:line="2250" pos:column="42"/></operator><literal type="number" pos:line="2250" pos:column="42">0<pos:position pos:line="2250" pos:column="43"/></literal></expr></argument> )<pos:position pos:line="2250" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="2250" pos:column="46"/></expr_stmt>
  <expr_stmt><expr><name pos:line="2251" pos:column="3">pDb<pos:position pos:line="2251" pos:column="6"/></name> <operator pos:line="2251" pos:column="7">=<pos:position pos:line="2251" pos:column="8"/></operator> <operator pos:line="2251" pos:column="9">&amp;<pos:position pos:line="2251" pos:column="14"/></operator><name><name pos:line="2251" pos:column="10">db<pos:position pos:line="2251" pos:column="12"/></name><operator pos:line="2251" pos:column="12">-&gt;<pos:position pos:line="2251" pos:column="17"/></operator><name pos:line="2251" pos:column="14">aDb<pos:position pos:line="2251" pos:column="17"/></name><index pos:line="2251" pos:column="17">[<expr><name><name pos:line="2251" pos:column="18">pOp<pos:position pos:line="2251" pos:column="21"/></name><operator pos:line="2251" pos:column="21">-&gt;<pos:position pos:line="2251" pos:column="26"/></operator><name pos:line="2251" pos:column="23">p1<pos:position pos:line="2251" pos:column="25"/></name></name></expr>]<pos:position pos:line="2251" pos:column="26"/></index></name></expr>;<pos:position pos:line="2251" pos:column="27"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="2252" pos:column="3">assert<pos:position pos:line="2252" pos:column="9"/></name><argument_list pos:line="2252" pos:column="9">( <argument><expr><name><name pos:line="2252" pos:column="11">pDb<pos:position pos:line="2252" pos:column="14"/></name><operator pos:line="2252" pos:column="14">-&gt;<pos:position pos:line="2252" pos:column="19"/></operator><name pos:line="2252" pos:column="16">pBt<pos:position pos:line="2252" pos:column="19"/></name></name><operator pos:line="2252" pos:column="19">!=<pos:position pos:line="2252" pos:column="21"/></operator><literal type="number" pos:line="2252" pos:column="21">0<pos:position pos:line="2252" pos:column="22"/></literal></expr></argument> )<pos:position pos:line="2252" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="2252" pos:column="25"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="2253" pos:column="3">sqlite3VdbeMemIntegerify<pos:position pos:line="2253" pos:column="27"/></name><argument_list pos:line="2253" pos:column="27">(<argument><expr><name pos:line="2253" pos:column="28">pIn3<pos:position pos:line="2253" pos:column="32"/></name></expr></argument>)<pos:position pos:line="2253" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="2253" pos:column="34"/></expr_stmt>
  <comment type="block" pos:line="2254" pos:column="3">/* See note about index shifting on OP_ReadCookie */</comment>
  <expr_stmt><expr><name pos:line="2255" pos:column="3">rc<pos:position pos:line="2255" pos:column="5"/></name> <operator pos:line="2255" pos:column="6">=<pos:position pos:line="2255" pos:column="7"/></operator> <call><name pos:line="2255" pos:column="8">sqlite3BtreeUpdateMeta<pos:position pos:line="2255" pos:column="30"/></name><argument_list pos:line="2255" pos:column="30">(<argument><expr><name><name pos:line="2255" pos:column="31">pDb<pos:position pos:line="2255" pos:column="34"/></name><operator pos:line="2255" pos:column="34">-&gt;<pos:position pos:line="2255" pos:column="39"/></operator><name pos:line="2255" pos:column="36">pBt<pos:position pos:line="2255" pos:column="39"/></name></name></expr></argument>, <argument><expr><name><name pos:line="2255" pos:column="41">pOp<pos:position pos:line="2255" pos:column="44"/></name><operator pos:line="2255" pos:column="44">-&gt;<pos:position pos:line="2255" pos:column="49"/></operator><name pos:line="2255" pos:column="46">p2<pos:position pos:line="2255" pos:column="48"/></name></name></expr></argument>, <argument><expr><operator pos:line="2255" pos:column="50">(<pos:position pos:line="2255" pos:column="51"/></operator><name pos:line="2255" pos:column="51">int<pos:position pos:line="2255" pos:column="54"/></name><operator pos:line="2255" pos:column="54">)<pos:position pos:line="2255" pos:column="55"/></operator><name><name pos:line="2255" pos:column="55">pIn3<pos:position pos:line="2255" pos:column="59"/></name><operator pos:line="2255" pos:column="59">-&gt;<pos:position pos:line="2255" pos:column="64"/></operator><name pos:line="2255" pos:column="61">u<pos:position pos:line="2255" pos:column="62"/></name><operator pos:line="2255" pos:column="62">.<pos:position pos:line="2255" pos:column="63"/></operator><name pos:line="2255" pos:column="63">i<pos:position pos:line="2255" pos:column="64"/></name></name></expr></argument>)<pos:position pos:line="2255" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="2255" pos:column="66"/></expr_stmt>
  <if pos:line="2256" pos:column="3">if<condition pos:line="2256" pos:column="5">( <expr><name><name pos:line="2256" pos:column="7">pOp<pos:position pos:line="2256" pos:column="10"/></name><operator pos:line="2256" pos:column="10">-&gt;<pos:position pos:line="2256" pos:column="15"/></operator><name pos:line="2256" pos:column="12">p2<pos:position pos:line="2256" pos:column="14"/></name></name><operator pos:line="2256" pos:column="14">==<pos:position pos:line="2256" pos:column="16"/></operator><name pos:line="2256" pos:column="16">BTREE_SCHEMA_VERSION<pos:position pos:line="2256" pos:column="36"/></name></expr> )<pos:position pos:line="2256" pos:column="38"/></condition><then><block pos:line="2256" pos:column="38">{
    <comment type="block" pos:line="2257" pos:column="5">/* When the schema cookie changes, record the new cookie internally */</comment>
    <expr_stmt><expr><name><name pos:line="2258" pos:column="5">pDb<pos:position pos:line="2258" pos:column="8"/></name><operator pos:line="2258" pos:column="8">-&gt;<pos:position pos:line="2258" pos:column="13"/></operator><name pos:line="2258" pos:column="10">pSchema<pos:position pos:line="2258" pos:column="17"/></name><operator pos:line="2258" pos:column="17">-&gt;<pos:position pos:line="2258" pos:column="22"/></operator><name pos:line="2258" pos:column="19">schema_cookie<pos:position pos:line="2258" pos:column="32"/></name></name> <operator pos:line="2258" pos:column="33">=<pos:position pos:line="2258" pos:column="34"/></operator> <operator pos:line="2258" pos:column="35">(<pos:position pos:line="2258" pos:column="36"/></operator><name pos:line="2258" pos:column="36">int<pos:position pos:line="2258" pos:column="39"/></name><operator pos:line="2258" pos:column="39">)<pos:position pos:line="2258" pos:column="40"/></operator><name><name pos:line="2258" pos:column="40">pIn3<pos:position pos:line="2258" pos:column="44"/></name><operator pos:line="2258" pos:column="44">-&gt;<pos:position pos:line="2258" pos:column="49"/></operator><name pos:line="2258" pos:column="46">u<pos:position pos:line="2258" pos:column="47"/></name><operator pos:line="2258" pos:column="47">.<pos:position pos:line="2258" pos:column="48"/></operator><name pos:line="2258" pos:column="48">i<pos:position pos:line="2258" pos:column="49"/></name></name></expr>;<pos:position pos:line="2258" pos:column="50"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="2259" pos:column="5">db<pos:position pos:line="2259" pos:column="7"/></name><operator pos:line="2259" pos:column="7">-&gt;<pos:position pos:line="2259" pos:column="12"/></operator><name pos:line="2259" pos:column="9">flags<pos:position pos:line="2259" pos:column="14"/></name></name> <operator pos:line="2259" pos:column="15">|=<pos:position pos:line="2259" pos:column="17"/></operator> <name pos:line="2259" pos:column="18">SQLITE_InternChanges<pos:position pos:line="2259" pos:column="38"/></name></expr>;<pos:position pos:line="2259" pos:column="39"/></expr_stmt>
  }<pos:position pos:line="2260" pos:column="4"/></block></then><elseif pos:line="2260" pos:column="4">else <if pos:line="2260" pos:column="9">if<condition pos:line="2260" pos:column="11">( <expr><name><name pos:line="2260" pos:column="13">pOp<pos:position pos:line="2260" pos:column="16"/></name><operator pos:line="2260" pos:column="16">-&gt;<pos:position pos:line="2260" pos:column="21"/></operator><name pos:line="2260" pos:column="18">p2<pos:position pos:line="2260" pos:column="20"/></name></name><operator pos:line="2260" pos:column="20">==<pos:position pos:line="2260" pos:column="22"/></operator><name pos:line="2260" pos:column="22">BTREE_FILE_FORMAT<pos:position pos:line="2260" pos:column="39"/></name></expr> )<pos:position pos:line="2260" pos:column="41"/></condition><then><block pos:line="2260" pos:column="41">{
    <comment type="block" pos:line="2261" pos:column="5">/* Record changes in the file format */</comment>
    <expr_stmt><expr><name><name pos:line="2262" pos:column="5">pDb<pos:position pos:line="2262" pos:column="8"/></name><operator pos:line="2262" pos:column="8">-&gt;<pos:position pos:line="2262" pos:column="13"/></operator><name pos:line="2262" pos:column="10">pSchema<pos:position pos:line="2262" pos:column="17"/></name><operator pos:line="2262" pos:column="17">-&gt;<pos:position pos:line="2262" pos:column="22"/></operator><name pos:line="2262" pos:column="19">file_format<pos:position pos:line="2262" pos:column="30"/></name></name> <operator pos:line="2262" pos:column="31">=<pos:position pos:line="2262" pos:column="32"/></operator> <operator pos:line="2262" pos:column="33">(<pos:position pos:line="2262" pos:column="34"/></operator><name pos:line="2262" pos:column="34">u8<pos:position pos:line="2262" pos:column="36"/></name><operator pos:line="2262" pos:column="36">)<pos:position pos:line="2262" pos:column="37"/></operator><name><name pos:line="2262" pos:column="37">pIn3<pos:position pos:line="2262" pos:column="41"/></name><operator pos:line="2262" pos:column="41">-&gt;<pos:position pos:line="2262" pos:column="46"/></operator><name pos:line="2262" pos:column="43">u<pos:position pos:line="2262" pos:column="44"/></name><operator pos:line="2262" pos:column="44">.<pos:position pos:line="2262" pos:column="45"/></operator><name pos:line="2262" pos:column="45">i<pos:position pos:line="2262" pos:column="46"/></name></name></expr>;<pos:position pos:line="2262" pos:column="47"/></expr_stmt>
  }<pos:position pos:line="2263" pos:column="4"/></block></then></if></elseif></if>
  <if pos:line="2264" pos:column="3">if<condition pos:line="2264" pos:column="5">( <expr><name><name pos:line="2264" pos:column="7">pOp<pos:position pos:line="2264" pos:column="10"/></name><operator pos:line="2264" pos:column="10">-&gt;<pos:position pos:line="2264" pos:column="15"/></operator><name pos:line="2264" pos:column="12">p1<pos:position pos:line="2264" pos:column="14"/></name></name><operator pos:line="2264" pos:column="14">==<pos:position pos:line="2264" pos:column="16"/></operator><literal type="number" pos:line="2264" pos:column="16">1<pos:position pos:line="2264" pos:column="17"/></literal></expr> )<pos:position pos:line="2264" pos:column="19"/></condition><then><block pos:line="2264" pos:column="19">{
    <comment type="block" pos:line="2265" pos:column="5">/* Invalidate all prepared statements whenever the TEMP database
    ** schema is changed.  Ticket #1644 */</comment>
    <expr_stmt><expr><call><name pos:line="2267" pos:column="5">sqlite3ExpirePreparedStatements<pos:position pos:line="2267" pos:column="36"/></name><argument_list pos:line="2267" pos:column="36">(<argument><expr><name pos:line="2267" pos:column="37">db<pos:position pos:line="2267" pos:column="39"/></name></expr></argument>)<pos:position pos:line="2267" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="2267" pos:column="41"/></expr_stmt>
  }<pos:position pos:line="2268" pos:column="4"/></block></then></if>
  <break pos:line="2269" pos:column="3">break;<pos:position pos:line="2269" pos:column="9"/></break>
}<pos:position pos:line="2270" pos:column="2"/></block>

<comment type="block" pos:line="2272" pos:column="1">/* Opcode: VerifyCookie P1 P2 *
**
** Check the value of global database parameter number 0 (the
** schema version) and make sure it is equal to P2.  
** P1 is the database number which is 0 for the main database file
** and 1 for the file holding temporary tables and some higher number
** for auxiliary databases.
**
** The cookie changes its value whenever the database schema changes.
** This operation is used to detect when that the cookie has changed
** and that the current process needs to reread the schema.
**
** Either a transaction needs to have been started or an OP_Open needs
** to be executed (to establish a read lock) before this opcode is
** invoked.
*/</comment>
<case pos:line="2288" pos:column="1">case <expr><name pos:line="2288" pos:column="6">OP_VerifyCookie<pos:position pos:line="2288" pos:column="21"/></name></expr>:<pos:position pos:line="2288" pos:column="22"/></case> <block pos:line="2288" pos:column="23">{
  <decl_stmt><decl><type><name pos:line="2289" pos:column="3">int<pos:position pos:line="2289" pos:column="6"/></name></type> <name pos:line="2289" pos:column="7">iMeta<pos:position pos:line="2289" pos:column="12"/></name></decl>;<pos:position pos:line="2289" pos:column="13"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="2290" pos:column="3">Btree<pos:position pos:line="2290" pos:column="8"/></name> <modifier pos:line="2290" pos:column="9">*<pos:position pos:line="2290" pos:column="10"/></modifier></type><name pos:line="2290" pos:column="10">pBt<pos:position pos:line="2290" pos:column="13"/></name></decl>;<pos:position pos:line="2290" pos:column="14"/></decl_stmt>
  <expr_stmt><expr><call><name pos:line="2291" pos:column="3">assert<pos:position pos:line="2291" pos:column="9"/></name><argument_list pos:line="2291" pos:column="9">( <argument><expr><name><name pos:line="2291" pos:column="11">pOp<pos:position pos:line="2291" pos:column="14"/></name><operator pos:line="2291" pos:column="14">-&gt;<pos:position pos:line="2291" pos:column="19"/></operator><name pos:line="2291" pos:column="16">p1<pos:position pos:line="2291" pos:column="18"/></name></name><operator pos:line="2291" pos:column="18">&gt;=<pos:position pos:line="2291" pos:column="23"/></operator><literal type="number" pos:line="2291" pos:column="20">0<pos:position pos:line="2291" pos:column="21"/></literal> <operator pos:line="2291" pos:column="22">&amp;&amp;<pos:position pos:line="2291" pos:column="32"/></operator> <name><name pos:line="2291" pos:column="25">pOp<pos:position pos:line="2291" pos:column="28"/></name><operator pos:line="2291" pos:column="28">-&gt;<pos:position pos:line="2291" pos:column="33"/></operator><name pos:line="2291" pos:column="30">p1<pos:position pos:line="2291" pos:column="32"/></name></name><operator pos:line="2291" pos:column="32">&lt;<pos:position pos:line="2291" pos:column="36"/></operator><name><name pos:line="2291" pos:column="33">db<pos:position pos:line="2291" pos:column="35"/></name><operator pos:line="2291" pos:column="35">-&gt;<pos:position pos:line="2291" pos:column="40"/></operator><name pos:line="2291" pos:column="37">nDb<pos:position pos:line="2291" pos:column="40"/></name></name></expr></argument> )<pos:position pos:line="2291" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="2291" pos:column="43"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="2292" pos:column="3">assert<pos:position pos:line="2292" pos:column="9"/></name><argument_list pos:line="2292" pos:column="9">( <argument><expr><operator pos:line="2292" pos:column="11">(<pos:position pos:line="2292" pos:column="12"/></operator><name><name pos:line="2292" pos:column="12">p<pos:position pos:line="2292" pos:column="13"/></name><operator pos:line="2292" pos:column="13">-&gt;<pos:position pos:line="2292" pos:column="18"/></operator><name pos:line="2292" pos:column="15">btreeMask<pos:position pos:line="2292" pos:column="24"/></name></name> <operator pos:line="2292" pos:column="25">&amp;<pos:position pos:line="2292" pos:column="30"/></operator> <operator pos:line="2292" pos:column="27">(<pos:position pos:line="2292" pos:column="28"/></operator><literal type="number" pos:line="2292" pos:column="28">1<pos:position pos:line="2292" pos:column="29"/></literal><operator pos:line="2292" pos:column="29">&lt;&lt;<pos:position pos:line="2292" pos:column="37"/></operator><name><name pos:line="2292" pos:column="31">pOp<pos:position pos:line="2292" pos:column="34"/></name><operator pos:line="2292" pos:column="34">-&gt;<pos:position pos:line="2292" pos:column="39"/></operator><name pos:line="2292" pos:column="36">p1<pos:position pos:line="2292" pos:column="38"/></name></name><operator pos:line="2292" pos:column="38">)<pos:position pos:line="2292" pos:column="39"/></operator><operator pos:line="2292" pos:column="39">)<pos:position pos:line="2292" pos:column="40"/></operator><operator pos:line="2292" pos:column="40">!=<pos:position pos:line="2292" pos:column="42"/></operator><literal type="number" pos:line="2292" pos:column="42">0<pos:position pos:line="2292" pos:column="43"/></literal></expr></argument> )<pos:position pos:line="2292" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="2292" pos:column="46"/></expr_stmt>
  <expr_stmt><expr><name pos:line="2293" pos:column="3">pBt<pos:position pos:line="2293" pos:column="6"/></name> <operator pos:line="2293" pos:column="7">=<pos:position pos:line="2293" pos:column="8"/></operator> <name><name pos:line="2293" pos:column="9">db<pos:position pos:line="2293" pos:column="11"/></name><operator pos:line="2293" pos:column="11">-&gt;<pos:position pos:line="2293" pos:column="16"/></operator><name pos:line="2293" pos:column="13">aDb<pos:position pos:line="2293" pos:column="16"/></name><index pos:line="2293" pos:column="16">[<expr><name><name pos:line="2293" pos:column="17">pOp<pos:position pos:line="2293" pos:column="20"/></name><operator pos:line="2293" pos:column="20">-&gt;<pos:position pos:line="2293" pos:column="25"/></operator><name pos:line="2293" pos:column="22">p1<pos:position pos:line="2293" pos:column="24"/></name></name></expr>]<pos:position pos:line="2293" pos:column="25"/></index></name><operator pos:line="2293" pos:column="25">.<pos:position pos:line="2293" pos:column="26"/></operator><name pos:line="2293" pos:column="26">pBt<pos:position pos:line="2293" pos:column="29"/></name></expr>;<pos:position pos:line="2293" pos:column="30"/></expr_stmt>
  <if pos:line="2294" pos:column="3">if<condition pos:line="2294" pos:column="5">( <expr><name pos:line="2294" pos:column="7">pBt<pos:position pos:line="2294" pos:column="10"/></name></expr> )<pos:position pos:line="2294" pos:column="12"/></condition><then><block pos:line="2294" pos:column="12">{
    <expr_stmt><expr><name pos:line="2295" pos:column="5">rc<pos:position pos:line="2295" pos:column="7"/></name> <operator pos:line="2295" pos:column="8">=<pos:position pos:line="2295" pos:column="9"/></operator> <call><name pos:line="2295" pos:column="10">sqlite3BtreeGetMeta<pos:position pos:line="2295" pos:column="29"/></name><argument_list pos:line="2295" pos:column="29">(<argument><expr><name pos:line="2295" pos:column="30">pBt<pos:position pos:line="2295" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="2295" pos:column="35">BTREE_SCHEMA_VERSION<pos:position pos:line="2295" pos:column="55"/></name></expr></argument>, <argument><expr><operator pos:line="2295" pos:column="57">(<pos:position pos:line="2295" pos:column="58"/></operator><name pos:line="2295" pos:column="58">u32<pos:position pos:line="2295" pos:column="61"/></name> <operator pos:line="2295" pos:column="62">*<pos:position pos:line="2295" pos:column="63"/></operator><operator pos:line="2295" pos:column="63">)<pos:position pos:line="2295" pos:column="64"/></operator><operator pos:line="2295" pos:column="64">&amp;<pos:position pos:line="2295" pos:column="69"/></operator><name pos:line="2295" pos:column="65">iMeta<pos:position pos:line="2295" pos:column="70"/></name></expr></argument>)<pos:position pos:line="2295" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="2295" pos:column="72"/></expr_stmt>
  }<pos:position pos:line="2296" pos:column="4"/></block></then><else pos:line="2296" pos:column="4">else<block pos:line="2296" pos:column="8">{
    <expr_stmt><expr><name pos:line="2297" pos:column="5">rc<pos:position pos:line="2297" pos:column="7"/></name> <operator pos:line="2297" pos:column="8">=<pos:position pos:line="2297" pos:column="9"/></operator> <name pos:line="2297" pos:column="10">SQLITE_OK<pos:position pos:line="2297" pos:column="19"/></name></expr>;<pos:position pos:line="2297" pos:column="20"/></expr_stmt>
    <expr_stmt><expr><name pos:line="2298" pos:column="5">iMeta<pos:position pos:line="2298" pos:column="10"/></name> <operator pos:line="2298" pos:column="11">=<pos:position pos:line="2298" pos:column="12"/></operator> <literal type="number" pos:line="2298" pos:column="13">0<pos:position pos:line="2298" pos:column="14"/></literal></expr>;<pos:position pos:line="2298" pos:column="15"/></expr_stmt>
  }<pos:position pos:line="2299" pos:column="4"/></block></else></if>
  <if pos:line="2300" pos:column="3">if<condition pos:line="2300" pos:column="5">( <expr><name pos:line="2300" pos:column="7">rc<pos:position pos:line="2300" pos:column="9"/></name><operator pos:line="2300" pos:column="9">==<pos:position pos:line="2300" pos:column="11"/></operator><name pos:line="2300" pos:column="11">SQLITE_OK<pos:position pos:line="2300" pos:column="20"/></name> <operator pos:line="2300" pos:column="21">&amp;&amp;<pos:position pos:line="2300" pos:column="31"/></operator> <name pos:line="2300" pos:column="24">iMeta<pos:position pos:line="2300" pos:column="29"/></name><operator pos:line="2300" pos:column="29">!=<pos:position pos:line="2300" pos:column="31"/></operator><name><name pos:line="2300" pos:column="31">pOp<pos:position pos:line="2300" pos:column="34"/></name><operator pos:line="2300" pos:column="34">-&gt;<pos:position pos:line="2300" pos:column="39"/></operator><name pos:line="2300" pos:column="36">p2<pos:position pos:line="2300" pos:column="38"/></name></name></expr> )<pos:position pos:line="2300" pos:column="40"/></condition><then><block pos:line="2300" pos:column="40">{
    <expr_stmt><expr><call><name pos:line="2301" pos:column="5">sqlite3DbFree<pos:position pos:line="2301" pos:column="18"/></name><argument_list pos:line="2301" pos:column="18">(<argument><expr><name pos:line="2301" pos:column="19">db<pos:position pos:line="2301" pos:column="21"/></name></expr></argument>, <argument><expr><name><name pos:line="2301" pos:column="23">p<pos:position pos:line="2301" pos:column="24"/></name><operator pos:line="2301" pos:column="24">-&gt;<pos:position pos:line="2301" pos:column="29"/></operator><name pos:line="2301" pos:column="26">zErrMsg<pos:position pos:line="2301" pos:column="33"/></name></name></expr></argument>)<pos:position pos:line="2301" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="2301" pos:column="35"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="2302" pos:column="5">p<pos:position pos:line="2302" pos:column="6"/></name><operator pos:line="2302" pos:column="6">-&gt;<pos:position pos:line="2302" pos:column="11"/></operator><name pos:line="2302" pos:column="8">zErrMsg<pos:position pos:line="2302" pos:column="15"/></name></name> <operator pos:line="2302" pos:column="16">=<pos:position pos:line="2302" pos:column="17"/></operator> <call><name pos:line="2302" pos:column="18">sqlite3DbStrDup<pos:position pos:line="2302" pos:column="33"/></name><argument_list pos:line="2302" pos:column="33">(<argument><expr><name pos:line="2302" pos:column="34">db<pos:position pos:line="2302" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="2302" pos:column="38">"database schema has changed"<pos:position pos:line="2302" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="2302" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="2302" pos:column="69"/></expr_stmt>
    <comment type="block" pos:line="2303" pos:column="5">/* If the schema-cookie from the database file matches the cookie 
    ** stored with the in-memory representation of the schema, do
    ** not reload the schema from the database file.
    **
    ** If virtual-tables are in use, this is not just an optimization.
    ** Often, v-tables store their data in other SQLite tables, which
    ** are queried from within xNext() and other v-table methods using
    ** prepared queries. If such a query is out-of-date, we do not want to
    ** discard the database schema, as the user code implementing the
    ** v-table would have to be ready for the sqlite3_vtab structure itself
    ** to be invalidated whenever sqlite3_step() is called from within 
    ** a v-table method.
    */</comment>
    <if pos:line="2316" pos:column="5">if<condition pos:line="2316" pos:column="7">( <expr><name><name pos:line="2316" pos:column="9">db<pos:position pos:line="2316" pos:column="11"/></name><operator pos:line="2316" pos:column="11">-&gt;<pos:position pos:line="2316" pos:column="16"/></operator><name pos:line="2316" pos:column="13">aDb<pos:position pos:line="2316" pos:column="16"/></name><index pos:line="2316" pos:column="16">[<expr><name><name pos:line="2316" pos:column="17">pOp<pos:position pos:line="2316" pos:column="20"/></name><operator pos:line="2316" pos:column="20">-&gt;<pos:position pos:line="2316" pos:column="25"/></operator><name pos:line="2316" pos:column="22">p1<pos:position pos:line="2316" pos:column="24"/></name></name></expr>]<pos:position pos:line="2316" pos:column="25"/></index></name><operator pos:line="2316" pos:column="25">.<pos:position pos:line="2316" pos:column="26"/></operator><name><name pos:line="2316" pos:column="26">pSchema<pos:position pos:line="2316" pos:column="33"/></name><operator pos:line="2316" pos:column="33">-&gt;<pos:position pos:line="2316" pos:column="38"/></operator><name pos:line="2316" pos:column="35">schema_cookie<pos:position pos:line="2316" pos:column="48"/></name></name><operator pos:line="2316" pos:column="48">!=<pos:position pos:line="2316" pos:column="50"/></operator><name pos:line="2316" pos:column="50">iMeta<pos:position pos:line="2316" pos:column="55"/></name></expr> )<pos:position pos:line="2316" pos:column="57"/></condition><then><block pos:line="2316" pos:column="57">{
      <expr_stmt><expr><call><name pos:line="2317" pos:column="7">sqlite3ResetInternalSchema<pos:position pos:line="2317" pos:column="33"/></name><argument_list pos:line="2317" pos:column="33">(<argument><expr><name pos:line="2317" pos:column="34">db<pos:position pos:line="2317" pos:column="36"/></name></expr></argument>, <argument><expr><name><name pos:line="2317" pos:column="38">pOp<pos:position pos:line="2317" pos:column="41"/></name><operator pos:line="2317" pos:column="41">-&gt;<pos:position pos:line="2317" pos:column="46"/></operator><name pos:line="2317" pos:column="43">p1<pos:position pos:line="2317" pos:column="45"/></name></name></expr></argument>)<pos:position pos:line="2317" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="2317" pos:column="47"/></expr_stmt>
    }<pos:position pos:line="2318" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="2320" pos:column="5">sqlite3ExpirePreparedStatements<pos:position pos:line="2320" pos:column="36"/></name><argument_list pos:line="2320" pos:column="36">(<argument><expr><name pos:line="2320" pos:column="37">db<pos:position pos:line="2320" pos:column="39"/></name></expr></argument>)<pos:position pos:line="2320" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="2320" pos:column="41"/></expr_stmt>
    <expr_stmt><expr><name pos:line="2321" pos:column="5">rc<pos:position pos:line="2321" pos:column="7"/></name> <operator pos:line="2321" pos:column="8">=<pos:position pos:line="2321" pos:column="9"/></operator> <name pos:line="2321" pos:column="10">SQLITE_SCHEMA<pos:position pos:line="2321" pos:column="23"/></name></expr>;<pos:position pos:line="2321" pos:column="24"/></expr_stmt>
  }<pos:position pos:line="2322" pos:column="4"/></block></then></if>
  <break pos:line="2323" pos:column="3">break;<pos:position pos:line="2323" pos:column="9"/></break>
}<pos:position pos:line="2324" pos:column="2"/></block>

<comment type="block" pos:line="2326" pos:column="1">/* Opcode: OpenRead P1 P2 P3 P4 P5
**
** Open a read-only cursor for the database table whose root page is
** P2 in a database file.  The database file is determined by P3. 
** P3==0 means the main database, P3==1 means the database used for 
** temporary tables, and P3&gt;1 means used the corresponding attached
** database.  Give the new cursor an identifier of P1.  The P1
** values need not be contiguous but all P1 values should be small integers.
** It is an error for P1 to be negative.
**
** If P5!=0 then use the content of register P2 as the root page, not
** the value of P2 itself.
**
** There will be a read lock on the database whenever there is an
** open cursor.  If the database was unlocked prior to this instruction
** then a read lock is acquired as part of this instruction.  A read
** lock allows other processes to read the database but prohibits
** any other process from modifying the database.  The read lock is
** released when all cursors are closed.  If this instruction attempts
** to get a read lock but fails, the script terminates with an
** SQLITE_BUSY error code.
**
** The P4 value may be either an integer (P4_INT32) or a pointer to
** a KeyInfo structure (P4_KEYINFO). If it is a pointer to a KeyInfo 
** structure, then said structure defines the content and collating 
** sequence of the index being opened. Otherwise, if P4 is an integer 
** value, it is set to the number of columns in the table.
**
** See also OpenWrite.
*/</comment>
<comment type="block" pos:line="2356" pos:column="1">/* Opcode: OpenWrite P1 P2 P3 P4 P5
**
** Open a read/write cursor named P1 on the table or index whose root
** page is P2.  Or if P5!=0 use the content of register P2 to find the
** root page.
**
** The P4 value may be either an integer (P4_INT32) or a pointer to
** a KeyInfo structure (P4_KEYINFO). If it is a pointer to a KeyInfo 
** structure, then said structure defines the content and collating 
** sequence of the index being opened. Otherwise, if P4 is an integer 
** value, it is set to the number of columns in the table, or to the
** largest index of any column of the table that is actually used.
**
** This instruction works just like OpenRead except that it opens the cursor
** in read/write mode.  For a given table, there can be one or more read-only
** cursors or a single read/write cursor but not both.
**
** See also OpenRead.
*/</comment>
<case pos:line="2375" pos:column="1">case <expr><name pos:line="2375" pos:column="6">OP_OpenRead<pos:position pos:line="2375" pos:column="17"/></name></expr>:<pos:position pos:line="2375" pos:column="18"/></case>
<case pos:line="2376" pos:column="1">case <expr><name pos:line="2376" pos:column="6">OP_OpenWrite<pos:position pos:line="2376" pos:column="18"/></name></expr>:<pos:position pos:line="2376" pos:column="19"/></case> <block pos:line="2376" pos:column="20">{
  <decl_stmt><decl><type><name pos:line="2377" pos:column="3">int<pos:position pos:line="2377" pos:column="6"/></name></type> <name pos:line="2377" pos:column="7">nField<pos:position pos:line="2377" pos:column="13"/></name></decl>;<pos:position pos:line="2377" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="2378" pos:column="3">KeyInfo<pos:position pos:line="2378" pos:column="10"/></name> <modifier pos:line="2378" pos:column="11">*<pos:position pos:line="2378" pos:column="12"/></modifier></type><name pos:line="2378" pos:column="12">pKeyInfo<pos:position pos:line="2378" pos:column="20"/></name></decl>;<pos:position pos:line="2378" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="2379" pos:column="3">int<pos:position pos:line="2379" pos:column="6"/></name></type> <name pos:line="2379" pos:column="7">i<pos:position pos:line="2379" pos:column="8"/></name></decl>;<pos:position pos:line="2379" pos:column="9"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="2380" pos:column="3">int<pos:position pos:line="2380" pos:column="6"/></name></type> <name pos:line="2380" pos:column="7">p2<pos:position pos:line="2380" pos:column="9"/></name></decl>;<pos:position pos:line="2380" pos:column="10"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="2381" pos:column="3">int<pos:position pos:line="2381" pos:column="6"/></name></type> <name pos:line="2381" pos:column="7">iDb<pos:position pos:line="2381" pos:column="10"/></name></decl>;<pos:position pos:line="2381" pos:column="11"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="2382" pos:column="3">int<pos:position pos:line="2382" pos:column="6"/></name></type> <name pos:line="2382" pos:column="7">wrFlag<pos:position pos:line="2382" pos:column="13"/></name></decl>;<pos:position pos:line="2382" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="2383" pos:column="3">Btree<pos:position pos:line="2383" pos:column="8"/></name> <modifier pos:line="2383" pos:column="9">*<pos:position pos:line="2383" pos:column="10"/></modifier></type><name pos:line="2383" pos:column="10">pX<pos:position pos:line="2383" pos:column="12"/></name></decl>;<pos:position pos:line="2383" pos:column="13"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="2384" pos:column="3">VdbeCursor<pos:position pos:line="2384" pos:column="13"/></name> <modifier pos:line="2384" pos:column="14">*<pos:position pos:line="2384" pos:column="15"/></modifier></type><name pos:line="2384" pos:column="15">pCur<pos:position pos:line="2384" pos:column="19"/></name></decl>;<pos:position pos:line="2384" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="2385" pos:column="3">Db<pos:position pos:line="2385" pos:column="5"/></name> <modifier pos:line="2385" pos:column="6">*<pos:position pos:line="2385" pos:column="7"/></modifier></type><name pos:line="2385" pos:column="7">pDb<pos:position pos:line="2385" pos:column="10"/></name></decl>;<pos:position pos:line="2385" pos:column="11"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="2386" pos:column="3">int<pos:position pos:line="2386" pos:column="6"/></name></type> <name pos:line="2386" pos:column="7">flags<pos:position pos:line="2386" pos:column="12"/></name></decl>;<pos:position pos:line="2386" pos:column="13"/></decl_stmt>

  <expr_stmt><expr><name pos:line="2388" pos:column="3">nField<pos:position pos:line="2388" pos:column="9"/></name> <operator pos:line="2388" pos:column="10">=<pos:position pos:line="2388" pos:column="11"/></operator> <literal type="number" pos:line="2388" pos:column="12">0<pos:position pos:line="2388" pos:column="13"/></literal></expr>;<pos:position pos:line="2388" pos:column="14"/></expr_stmt>
  <expr_stmt><expr><name pos:line="2389" pos:column="3">pKeyInfo<pos:position pos:line="2389" pos:column="11"/></name> <operator pos:line="2389" pos:column="12">=<pos:position pos:line="2389" pos:column="13"/></operator> <literal type="number" pos:line="2389" pos:column="14">0<pos:position pos:line="2389" pos:column="15"/></literal></expr>;<pos:position pos:line="2389" pos:column="16"/></expr_stmt>
  <expr_stmt><expr><name pos:line="2390" pos:column="3">i<pos:position pos:line="2390" pos:column="4"/></name> <operator pos:line="2390" pos:column="5">=<pos:position pos:line="2390" pos:column="6"/></operator> <name><name pos:line="2390" pos:column="7">pOp<pos:position pos:line="2390" pos:column="10"/></name><operator pos:line="2390" pos:column="10">-&gt;<pos:position pos:line="2390" pos:column="15"/></operator><name pos:line="2390" pos:column="12">p1<pos:position pos:line="2390" pos:column="14"/></name></name></expr>;<pos:position pos:line="2390" pos:column="15"/></expr_stmt>
  <expr_stmt><expr><name pos:line="2391" pos:column="3">p2<pos:position pos:line="2391" pos:column="5"/></name> <operator pos:line="2391" pos:column="6">=<pos:position pos:line="2391" pos:column="7"/></operator> <name><name pos:line="2391" pos:column="8">pOp<pos:position pos:line="2391" pos:column="11"/></name><operator pos:line="2391" pos:column="11">-&gt;<pos:position pos:line="2391" pos:column="16"/></operator><name pos:line="2391" pos:column="13">p2<pos:position pos:line="2391" pos:column="15"/></name></name></expr>;<pos:position pos:line="2391" pos:column="16"/></expr_stmt>
  <expr_stmt><expr><name pos:line="2392" pos:column="3">iDb<pos:position pos:line="2392" pos:column="6"/></name> <operator pos:line="2392" pos:column="7">=<pos:position pos:line="2392" pos:column="8"/></operator> <name><name pos:line="2392" pos:column="9">pOp<pos:position pos:line="2392" pos:column="12"/></name><operator pos:line="2392" pos:column="12">-&gt;<pos:position pos:line="2392" pos:column="17"/></operator><name pos:line="2392" pos:column="14">p3<pos:position pos:line="2392" pos:column="16"/></name></name></expr>;<pos:position pos:line="2392" pos:column="17"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="2393" pos:column="3">assert<pos:position pos:line="2393" pos:column="9"/></name><argument_list pos:line="2393" pos:column="9">( <argument><expr><name pos:line="2393" pos:column="11">iDb<pos:position pos:line="2393" pos:column="14"/></name><operator pos:line="2393" pos:column="14">&gt;=<pos:position pos:line="2393" pos:column="19"/></operator><literal type="number" pos:line="2393" pos:column="16">0<pos:position pos:line="2393" pos:column="17"/></literal> <operator pos:line="2393" pos:column="18">&amp;&amp;<pos:position pos:line="2393" pos:column="28"/></operator> <name pos:line="2393" pos:column="21">iDb<pos:position pos:line="2393" pos:column="24"/></name><operator pos:line="2393" pos:column="24">&lt;<pos:position pos:line="2393" pos:column="28"/></operator><name><name pos:line="2393" pos:column="25">db<pos:position pos:line="2393" pos:column="27"/></name><operator pos:line="2393" pos:column="27">-&gt;<pos:position pos:line="2393" pos:column="32"/></operator><name pos:line="2393" pos:column="29">nDb<pos:position pos:line="2393" pos:column="32"/></name></name></expr></argument> )<pos:position pos:line="2393" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="2393" pos:column="35"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="2394" pos:column="3">assert<pos:position pos:line="2394" pos:column="9"/></name><argument_list pos:line="2394" pos:column="9">( <argument><expr><operator pos:line="2394" pos:column="11">(<pos:position pos:line="2394" pos:column="12"/></operator><name><name pos:line="2394" pos:column="12">p<pos:position pos:line="2394" pos:column="13"/></name><operator pos:line="2394" pos:column="13">-&gt;<pos:position pos:line="2394" pos:column="18"/></operator><name pos:line="2394" pos:column="15">btreeMask<pos:position pos:line="2394" pos:column="24"/></name></name> <operator pos:line="2394" pos:column="25">&amp;<pos:position pos:line="2394" pos:column="30"/></operator> <operator pos:line="2394" pos:column="27">(<pos:position pos:line="2394" pos:column="28"/></operator><literal type="number" pos:line="2394" pos:column="28">1<pos:position pos:line="2394" pos:column="29"/></literal><operator pos:line="2394" pos:column="29">&lt;&lt;<pos:position pos:line="2394" pos:column="37"/></operator><name pos:line="2394" pos:column="31">iDb<pos:position pos:line="2394" pos:column="34"/></name><operator pos:line="2394" pos:column="34">)<pos:position pos:line="2394" pos:column="35"/></operator><operator pos:line="2394" pos:column="35">)<pos:position pos:line="2394" pos:column="36"/></operator><operator pos:line="2394" pos:column="36">!=<pos:position pos:line="2394" pos:column="38"/></operator><literal type="number" pos:line="2394" pos:column="38">0<pos:position pos:line="2394" pos:column="39"/></literal></expr></argument> )<pos:position pos:line="2394" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="2394" pos:column="42"/></expr_stmt>
  <expr_stmt><expr><name pos:line="2395" pos:column="3">pDb<pos:position pos:line="2395" pos:column="6"/></name> <operator pos:line="2395" pos:column="7">=<pos:position pos:line="2395" pos:column="8"/></operator> <operator pos:line="2395" pos:column="9">&amp;<pos:position pos:line="2395" pos:column="14"/></operator><name><name pos:line="2395" pos:column="10">db<pos:position pos:line="2395" pos:column="12"/></name><operator pos:line="2395" pos:column="12">-&gt;<pos:position pos:line="2395" pos:column="17"/></operator><name pos:line="2395" pos:column="14">aDb<pos:position pos:line="2395" pos:column="17"/></name><index pos:line="2395" pos:column="17">[<expr><name pos:line="2395" pos:column="18">iDb<pos:position pos:line="2395" pos:column="21"/></name></expr>]<pos:position pos:line="2395" pos:column="22"/></index></name></expr>;<pos:position pos:line="2395" pos:column="23"/></expr_stmt>
  <expr_stmt><expr><name pos:line="2396" pos:column="3">pX<pos:position pos:line="2396" pos:column="5"/></name> <operator pos:line="2396" pos:column="6">=<pos:position pos:line="2396" pos:column="7"/></operator> <name><name pos:line="2396" pos:column="8">pDb<pos:position pos:line="2396" pos:column="11"/></name><operator pos:line="2396" pos:column="11">-&gt;<pos:position pos:line="2396" pos:column="16"/></operator><name pos:line="2396" pos:column="13">pBt<pos:position pos:line="2396" pos:column="16"/></name></name></expr>;<pos:position pos:line="2396" pos:column="17"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="2397" pos:column="3">assert<pos:position pos:line="2397" pos:column="9"/></name><argument_list pos:line="2397" pos:column="9">( <argument><expr><name pos:line="2397" pos:column="11">pX<pos:position pos:line="2397" pos:column="13"/></name><operator pos:line="2397" pos:column="13">!=<pos:position pos:line="2397" pos:column="15"/></operator><literal type="number" pos:line="2397" pos:column="15">0<pos:position pos:line="2397" pos:column="16"/></literal></expr></argument> )<pos:position pos:line="2397" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="2397" pos:column="19"/></expr_stmt>
  <if pos:line="2398" pos:column="3">if<condition pos:line="2398" pos:column="5">( <expr><name><name pos:line="2398" pos:column="7">pOp<pos:position pos:line="2398" pos:column="10"/></name><operator pos:line="2398" pos:column="10">-&gt;<pos:position pos:line="2398" pos:column="15"/></operator><name pos:line="2398" pos:column="12">opcode<pos:position pos:line="2398" pos:column="18"/></name></name><operator pos:line="2398" pos:column="18">==<pos:position pos:line="2398" pos:column="20"/></operator><name pos:line="2398" pos:column="20">OP_OpenWrite<pos:position pos:line="2398" pos:column="32"/></name></expr> )<pos:position pos:line="2398" pos:column="34"/></condition><then><block pos:line="2398" pos:column="34">{
    <expr_stmt><expr><name pos:line="2399" pos:column="5">wrFlag<pos:position pos:line="2399" pos:column="11"/></name> <operator pos:line="2399" pos:column="12">=<pos:position pos:line="2399" pos:column="13"/></operator> <literal type="number" pos:line="2399" pos:column="14">1<pos:position pos:line="2399" pos:column="15"/></literal></expr>;<pos:position pos:line="2399" pos:column="16"/></expr_stmt>
    <if pos:line="2400" pos:column="5">if<condition pos:line="2400" pos:column="7">( <expr><name><name pos:line="2400" pos:column="9">pDb<pos:position pos:line="2400" pos:column="12"/></name><operator pos:line="2400" pos:column="12">-&gt;<pos:position pos:line="2400" pos:column="17"/></operator><name pos:line="2400" pos:column="14">pSchema<pos:position pos:line="2400" pos:column="21"/></name><operator pos:line="2400" pos:column="21">-&gt;<pos:position pos:line="2400" pos:column="26"/></operator><name pos:line="2400" pos:column="23">file_format<pos:position pos:line="2400" pos:column="34"/></name></name> <operator pos:line="2400" pos:column="35">&lt;<pos:position pos:line="2400" pos:column="39"/></operator> <name><name pos:line="2400" pos:column="37">p<pos:position pos:line="2400" pos:column="38"/></name><operator pos:line="2400" pos:column="38">-&gt;<pos:position pos:line="2400" pos:column="43"/></operator><name pos:line="2400" pos:column="40">minWriteFileFormat<pos:position pos:line="2400" pos:column="58"/></name></name></expr> )<pos:position pos:line="2400" pos:column="60"/></condition><then><block pos:line="2400" pos:column="60">{
      <expr_stmt><expr><name><name pos:line="2401" pos:column="7">p<pos:position pos:line="2401" pos:column="8"/></name><operator pos:line="2401" pos:column="8">-&gt;<pos:position pos:line="2401" pos:column="13"/></operator><name pos:line="2401" pos:column="10">minWriteFileFormat<pos:position pos:line="2401" pos:column="28"/></name></name> <operator pos:line="2401" pos:column="29">=<pos:position pos:line="2401" pos:column="30"/></operator> <name><name pos:line="2401" pos:column="31">pDb<pos:position pos:line="2401" pos:column="34"/></name><operator pos:line="2401" pos:column="34">-&gt;<pos:position pos:line="2401" pos:column="39"/></operator><name pos:line="2401" pos:column="36">pSchema<pos:position pos:line="2401" pos:column="43"/></name><operator pos:line="2401" pos:column="43">-&gt;<pos:position pos:line="2401" pos:column="48"/></operator><name pos:line="2401" pos:column="45">file_format<pos:position pos:line="2401" pos:column="56"/></name></name></expr>;<pos:position pos:line="2401" pos:column="57"/></expr_stmt>
    }<pos:position pos:line="2402" pos:column="6"/></block></then></if>
  }<pos:position pos:line="2403" pos:column="4"/></block></then><else pos:line="2403" pos:column="4">else<block pos:line="2403" pos:column="8">{
    <expr_stmt><expr><name pos:line="2404" pos:column="5">wrFlag<pos:position pos:line="2404" pos:column="11"/></name> <operator pos:line="2404" pos:column="12">=<pos:position pos:line="2404" pos:column="13"/></operator> <literal type="number" pos:line="2404" pos:column="14">0<pos:position pos:line="2404" pos:column="15"/></literal></expr>;<pos:position pos:line="2404" pos:column="16"/></expr_stmt>
  }<pos:position pos:line="2405" pos:column="4"/></block></else></if>
  <if pos:line="2406" pos:column="3">if<condition pos:line="2406" pos:column="5">( <expr><name><name pos:line="2406" pos:column="7">pOp<pos:position pos:line="2406" pos:column="10"/></name><operator pos:line="2406" pos:column="10">-&gt;<pos:position pos:line="2406" pos:column="15"/></operator><name pos:line="2406" pos:column="12">p5<pos:position pos:line="2406" pos:column="14"/></name></name></expr> )<pos:position pos:line="2406" pos:column="16"/></condition><then><block pos:line="2406" pos:column="16">{
    <expr_stmt><expr><call><name pos:line="2407" pos:column="5">assert<pos:position pos:line="2407" pos:column="11"/></name><argument_list pos:line="2407" pos:column="11">( <argument><expr><name pos:line="2407" pos:column="13">p2<pos:position pos:line="2407" pos:column="15"/></name><operator pos:line="2407" pos:column="15">&gt;<pos:position pos:line="2407" pos:column="19"/></operator><literal type="number" pos:line="2407" pos:column="16">0<pos:position pos:line="2407" pos:column="17"/></literal></expr></argument> )<pos:position pos:line="2407" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="2407" pos:column="20"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="2408" pos:column="5">assert<pos:position pos:line="2408" pos:column="11"/></name><argument_list pos:line="2408" pos:column="11">( <argument><expr><name pos:line="2408" pos:column="13">p2<pos:position pos:line="2408" pos:column="15"/></name><operator pos:line="2408" pos:column="15">&lt;=<pos:position pos:line="2408" pos:column="20"/></operator><name><name pos:line="2408" pos:column="17">p<pos:position pos:line="2408" pos:column="18"/></name><operator pos:line="2408" pos:column="18">-&gt;<pos:position pos:line="2408" pos:column="23"/></operator><name pos:line="2408" pos:column="20">nMem<pos:position pos:line="2408" pos:column="24"/></name></name></expr></argument> )<pos:position pos:line="2408" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="2408" pos:column="27"/></expr_stmt>
    <expr_stmt><expr><name pos:line="2409" pos:column="5">pIn2<pos:position pos:line="2409" pos:column="9"/></name> <operator pos:line="2409" pos:column="10">=<pos:position pos:line="2409" pos:column="11"/></operator> <operator pos:line="2409" pos:column="12">&amp;<pos:position pos:line="2409" pos:column="17"/></operator><name><name pos:line="2409" pos:column="13">p<pos:position pos:line="2409" pos:column="14"/></name><operator pos:line="2409" pos:column="14">-&gt;<pos:position pos:line="2409" pos:column="19"/></operator><name pos:line="2409" pos:column="16">aMem<pos:position pos:line="2409" pos:column="20"/></name><index pos:line="2409" pos:column="20">[<expr><name pos:line="2409" pos:column="21">p2<pos:position pos:line="2409" pos:column="23"/></name></expr>]<pos:position pos:line="2409" pos:column="24"/></index></name></expr>;<pos:position pos:line="2409" pos:column="25"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="2410" pos:column="5">sqlite3VdbeMemIntegerify<pos:position pos:line="2410" pos:column="29"/></name><argument_list pos:line="2410" pos:column="29">(<argument><expr><name pos:line="2410" pos:column="30">pIn2<pos:position pos:line="2410" pos:column="34"/></name></expr></argument>)<pos:position pos:line="2410" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="2410" pos:column="36"/></expr_stmt>
    <expr_stmt><expr><name pos:line="2411" pos:column="5">p2<pos:position pos:line="2411" pos:column="7"/></name> <operator pos:line="2411" pos:column="8">=<pos:position pos:line="2411" pos:column="9"/></operator> <operator pos:line="2411" pos:column="10">(<pos:position pos:line="2411" pos:column="11"/></operator><name pos:line="2411" pos:column="11">int<pos:position pos:line="2411" pos:column="14"/></name><operator pos:line="2411" pos:column="14">)<pos:position pos:line="2411" pos:column="15"/></operator><name><name pos:line="2411" pos:column="15">pIn2<pos:position pos:line="2411" pos:column="19"/></name><operator pos:line="2411" pos:column="19">-&gt;<pos:position pos:line="2411" pos:column="24"/></operator><name pos:line="2411" pos:column="21">u<pos:position pos:line="2411" pos:column="22"/></name><operator pos:line="2411" pos:column="22">.<pos:position pos:line="2411" pos:column="23"/></operator><name pos:line="2411" pos:column="23">i<pos:position pos:line="2411" pos:column="24"/></name></name></expr>;<pos:position pos:line="2411" pos:column="25"/></expr_stmt>
    <if pos:line="2412" pos:column="5">if<condition pos:line="2412" pos:column="7">( <expr><name pos:line="2412" pos:column="9">p2<pos:position pos:line="2412" pos:column="11"/></name><operator pos:line="2412" pos:column="11">&lt;<pos:position pos:line="2412" pos:column="15"/></operator><literal type="number" pos:line="2412" pos:column="12">2<pos:position pos:line="2412" pos:column="13"/></literal></expr> )<pos:position pos:line="2412" pos:column="15"/></condition><then pos:line="2412" pos:column="15"> <block pos:line="2412" pos:column="16">{
      <expr_stmt><expr><name pos:line="2413" pos:column="7">rc<pos:position pos:line="2413" pos:column="9"/></name> <operator pos:line="2413" pos:column="10">=<pos:position pos:line="2413" pos:column="11"/></operator> <name pos:line="2413" pos:column="12">SQLITE_CORRUPT_BKPT<pos:position pos:line="2413" pos:column="31"/></name></expr>;<pos:position pos:line="2413" pos:column="32"/></expr_stmt>
      <goto pos:line="2414" pos:column="7">goto <name pos:line="2414" pos:column="12">abort_due_to_error<pos:position pos:line="2414" pos:column="30"/></name>;<pos:position pos:line="2414" pos:column="31"/></goto>
    }<pos:position pos:line="2415" pos:column="6"/></block></then></if>
  }<pos:position pos:line="2416" pos:column="4"/></block></then></if>
  <expr_stmt><expr><call><name pos:line="2417" pos:column="3">assert<pos:position pos:line="2417" pos:column="9"/></name><argument_list pos:line="2417" pos:column="9">( <argument><expr><name pos:line="2417" pos:column="11">i<pos:position pos:line="2417" pos:column="12"/></name><operator pos:line="2417" pos:column="12">&gt;=<pos:position pos:line="2417" pos:column="17"/></operator><literal type="number" pos:line="2417" pos:column="14">0<pos:position pos:line="2417" pos:column="15"/></literal></expr></argument> )<pos:position pos:line="2417" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="2417" pos:column="18"/></expr_stmt>
  <if pos:line="2418" pos:column="3">if<condition pos:line="2418" pos:column="5">( <expr><name><name pos:line="2418" pos:column="7">pOp<pos:position pos:line="2418" pos:column="10"/></name><operator pos:line="2418" pos:column="10">-&gt;<pos:position pos:line="2418" pos:column="15"/></operator><name pos:line="2418" pos:column="12">p4type<pos:position pos:line="2418" pos:column="18"/></name></name><operator pos:line="2418" pos:column="18">==<pos:position pos:line="2418" pos:column="20"/></operator><name pos:line="2418" pos:column="20">P4_KEYINFO<pos:position pos:line="2418" pos:column="30"/></name></expr> )<pos:position pos:line="2418" pos:column="32"/></condition><then><block pos:line="2418" pos:column="32">{
    <expr_stmt><expr><name pos:line="2419" pos:column="5">pKeyInfo<pos:position pos:line="2419" pos:column="13"/></name> <operator pos:line="2419" pos:column="14">=<pos:position pos:line="2419" pos:column="15"/></operator> <name><name pos:line="2419" pos:column="16">pOp<pos:position pos:line="2419" pos:column="19"/></name><operator pos:line="2419" pos:column="19">-&gt;<pos:position pos:line="2419" pos:column="24"/></operator><name pos:line="2419" pos:column="21">p4<pos:position pos:line="2419" pos:column="23"/></name><operator pos:line="2419" pos:column="23">.<pos:position pos:line="2419" pos:column="24"/></operator><name pos:line="2419" pos:column="24">pKeyInfo<pos:position pos:line="2419" pos:column="32"/></name></name></expr>;<pos:position pos:line="2419" pos:column="33"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="2420" pos:column="5">pKeyInfo<pos:position pos:line="2420" pos:column="13"/></name><operator pos:line="2420" pos:column="13">-&gt;<pos:position pos:line="2420" pos:column="18"/></operator><name pos:line="2420" pos:column="15">enc<pos:position pos:line="2420" pos:column="18"/></name></name> <operator pos:line="2420" pos:column="19">=<pos:position pos:line="2420" pos:column="20"/></operator> <call><name pos:line="2420" pos:column="21">ENC<pos:position pos:line="2420" pos:column="24"/></name><argument_list pos:line="2420" pos:column="24">(<argument><expr><name><name pos:line="2420" pos:column="25">p<pos:position pos:line="2420" pos:column="26"/></name><operator pos:line="2420" pos:column="26">-&gt;<pos:position pos:line="2420" pos:column="31"/></operator><name pos:line="2420" pos:column="28">db<pos:position pos:line="2420" pos:column="30"/></name></name></expr></argument>)<pos:position pos:line="2420" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="2420" pos:column="32"/></expr_stmt>
    <expr_stmt><expr><name pos:line="2421" pos:column="5">nField<pos:position pos:line="2421" pos:column="11"/></name> <operator pos:line="2421" pos:column="12">=<pos:position pos:line="2421" pos:column="13"/></operator> <name><name pos:line="2421" pos:column="14">pKeyInfo<pos:position pos:line="2421" pos:column="22"/></name><operator pos:line="2421" pos:column="22">-&gt;<pos:position pos:line="2421" pos:column="27"/></operator><name pos:line="2421" pos:column="24">nField<pos:position pos:line="2421" pos:column="30"/></name></name><operator pos:line="2421" pos:column="30">+<pos:position pos:line="2421" pos:column="31"/></operator><literal type="number" pos:line="2421" pos:column="31">1<pos:position pos:line="2421" pos:column="32"/></literal></expr>;<pos:position pos:line="2421" pos:column="33"/></expr_stmt>
  }<pos:position pos:line="2422" pos:column="4"/></block></then><elseif pos:line="2422" pos:column="4">else <if pos:line="2422" pos:column="9">if<condition pos:line="2422" pos:column="11">( <expr><name><name pos:line="2422" pos:column="13">pOp<pos:position pos:line="2422" pos:column="16"/></name><operator pos:line="2422" pos:column="16">-&gt;<pos:position pos:line="2422" pos:column="21"/></operator><name pos:line="2422" pos:column="18">p4type<pos:position pos:line="2422" pos:column="24"/></name></name><operator pos:line="2422" pos:column="24">==<pos:position pos:line="2422" pos:column="26"/></operator><name pos:line="2422" pos:column="26">P4_INT32<pos:position pos:line="2422" pos:column="34"/></name></expr> )<pos:position pos:line="2422" pos:column="36"/></condition><then><block pos:line="2422" pos:column="36">{
    <expr_stmt><expr><name pos:line="2423" pos:column="5">nField<pos:position pos:line="2423" pos:column="11"/></name> <operator pos:line="2423" pos:column="12">=<pos:position pos:line="2423" pos:column="13"/></operator> <name><name pos:line="2423" pos:column="14">pOp<pos:position pos:line="2423" pos:column="17"/></name><operator pos:line="2423" pos:column="17">-&gt;<pos:position pos:line="2423" pos:column="22"/></operator><name pos:line="2423" pos:column="19">p4<pos:position pos:line="2423" pos:column="21"/></name><operator pos:line="2423" pos:column="21">.<pos:position pos:line="2423" pos:column="22"/></operator><name pos:line="2423" pos:column="22">i<pos:position pos:line="2423" pos:column="23"/></name></name></expr>;<pos:position pos:line="2423" pos:column="24"/></expr_stmt>
  }<pos:position pos:line="2424" pos:column="4"/></block></then></if></elseif></if>
  <expr_stmt><expr><name pos:line="2425" pos:column="3">pCur<pos:position pos:line="2425" pos:column="7"/></name> <operator pos:line="2425" pos:column="8">=<pos:position pos:line="2425" pos:column="9"/></operator> <call><name pos:line="2425" pos:column="10">allocateCursor<pos:position pos:line="2425" pos:column="24"/></name><argument_list pos:line="2425" pos:column="24">(<argument><expr><name pos:line="2425" pos:column="25">p<pos:position pos:line="2425" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="2425" pos:column="28">i<pos:position pos:line="2425" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="2425" pos:column="31">nField<pos:position pos:line="2425" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="2425" pos:column="39">iDb<pos:position pos:line="2425" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="2425" pos:column="44">1<pos:position pos:line="2425" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="2425" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="2425" pos:column="47"/></expr_stmt>
  <if pos:line="2426" pos:column="3">if<condition pos:line="2426" pos:column="5">( <expr><name pos:line="2426" pos:column="7">pCur<pos:position pos:line="2426" pos:column="11"/></name><operator pos:line="2426" pos:column="11">==<pos:position pos:line="2426" pos:column="13"/></operator><literal type="number" pos:line="2426" pos:column="13">0<pos:position pos:line="2426" pos:column="14"/></literal></expr> )<pos:position pos:line="2426" pos:column="16"/></condition><then pos:line="2426" pos:column="16"> <block type="pseudo"><goto pos:line="2426" pos:column="17">goto <name pos:line="2426" pos:column="22">no_mem<pos:position pos:line="2426" pos:column="28"/></name>;<pos:position pos:line="2426" pos:column="29"/></goto></block></then></if>
  <expr_stmt><expr><name><name pos:line="2427" pos:column="3">pCur<pos:position pos:line="2427" pos:column="7"/></name><operator pos:line="2427" pos:column="7">-&gt;<pos:position pos:line="2427" pos:column="12"/></operator><name pos:line="2427" pos:column="9">nullRow<pos:position pos:line="2427" pos:column="16"/></name></name> <operator pos:line="2427" pos:column="17">=<pos:position pos:line="2427" pos:column="18"/></operator> <literal type="number" pos:line="2427" pos:column="19">1<pos:position pos:line="2427" pos:column="20"/></literal></expr>;<pos:position pos:line="2427" pos:column="21"/></expr_stmt>
  <expr_stmt><expr><name pos:line="2428" pos:column="3">rc<pos:position pos:line="2428" pos:column="5"/></name> <operator pos:line="2428" pos:column="6">=<pos:position pos:line="2428" pos:column="7"/></operator> <call><name pos:line="2428" pos:column="8">sqlite3BtreeCursor<pos:position pos:line="2428" pos:column="26"/></name><argument_list pos:line="2428" pos:column="26">(<argument><expr><name pos:line="2428" pos:column="27">pX<pos:position pos:line="2428" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="2428" pos:column="31">p2<pos:position pos:line="2428" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="2428" pos:column="35">wrFlag<pos:position pos:line="2428" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="2428" pos:column="43">pKeyInfo<pos:position pos:line="2428" pos:column="51"/></name></expr></argument>, <argument><expr><name><name pos:line="2428" pos:column="53">pCur<pos:position pos:line="2428" pos:column="57"/></name><operator pos:line="2428" pos:column="57">-&gt;<pos:position pos:line="2428" pos:column="62"/></operator><name pos:line="2428" pos:column="59">pCursor<pos:position pos:line="2428" pos:column="66"/></name></name></expr></argument>)<pos:position pos:line="2428" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="2428" pos:column="68"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="2429" pos:column="3">pCur<pos:position pos:line="2429" pos:column="7"/></name><operator pos:line="2429" pos:column="7">-&gt;<pos:position pos:line="2429" pos:column="12"/></operator><name pos:line="2429" pos:column="9">pKeyInfo<pos:position pos:line="2429" pos:column="17"/></name></name> <operator pos:line="2429" pos:column="18">=<pos:position pos:line="2429" pos:column="19"/></operator> <name pos:line="2429" pos:column="20">pKeyInfo<pos:position pos:line="2429" pos:column="28"/></name></expr>;<pos:position pos:line="2429" pos:column="29"/></expr_stmt>

  <switch pos:line="2431" pos:column="3">switch<condition pos:line="2431" pos:column="9">( <expr><name pos:line="2431" pos:column="11">rc<pos:position pos:line="2431" pos:column="13"/></name></expr> )<pos:position pos:line="2431" pos:column="15"/></condition><block pos:line="2431" pos:column="15">{
    <case pos:line="2432" pos:column="5">case <expr><name pos:line="2432" pos:column="10">SQLITE_BUSY<pos:position pos:line="2432" pos:column="21"/></name></expr>:<pos:position pos:line="2432" pos:column="22"/></case> <block pos:line="2432" pos:column="23">{
      <expr_stmt><expr><name><name pos:line="2433" pos:column="7">p<pos:position pos:line="2433" pos:column="8"/></name><operator pos:line="2433" pos:column="8">-&gt;<pos:position pos:line="2433" pos:column="13"/></operator><name pos:line="2433" pos:column="10">pc<pos:position pos:line="2433" pos:column="12"/></name></name> <operator pos:line="2433" pos:column="13">=<pos:position pos:line="2433" pos:column="14"/></operator> <name pos:line="2433" pos:column="15">pc<pos:position pos:line="2433" pos:column="17"/></name></expr>;<pos:position pos:line="2433" pos:column="18"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="2434" pos:column="7">p<pos:position pos:line="2434" pos:column="8"/></name><operator pos:line="2434" pos:column="8">-&gt;<pos:position pos:line="2434" pos:column="13"/></operator><name pos:line="2434" pos:column="10">rc<pos:position pos:line="2434" pos:column="12"/></name></name> <operator pos:line="2434" pos:column="13">=<pos:position pos:line="2434" pos:column="14"/></operator> <name pos:line="2434" pos:column="15">rc<pos:position pos:line="2434" pos:column="17"/></name> <operator pos:line="2434" pos:column="18">=<pos:position pos:line="2434" pos:column="19"/></operator> <name pos:line="2434" pos:column="20">SQLITE_BUSY<pos:position pos:line="2434" pos:column="31"/></name></expr>;<pos:position pos:line="2434" pos:column="32"/></expr_stmt>
      <goto pos:line="2435" pos:column="7">goto <name pos:line="2435" pos:column="12">vdbe_return<pos:position pos:line="2435" pos:column="23"/></name>;<pos:position pos:line="2435" pos:column="24"/></goto>
    }<pos:position pos:line="2436" pos:column="6"/></block>
    <case pos:line="2437" pos:column="5">case <expr><name pos:line="2437" pos:column="10">SQLITE_OK<pos:position pos:line="2437" pos:column="19"/></name></expr>:<pos:position pos:line="2437" pos:column="20"/></case> <block pos:line="2437" pos:column="21">{
      <expr_stmt><expr><name pos:line="2438" pos:column="7">flags<pos:position pos:line="2438" pos:column="12"/></name> <operator pos:line="2438" pos:column="13">=<pos:position pos:line="2438" pos:column="14"/></operator> <call><name pos:line="2438" pos:column="15">sqlite3BtreeFlags<pos:position pos:line="2438" pos:column="32"/></name><argument_list pos:line="2438" pos:column="32">(<argument><expr><name><name pos:line="2438" pos:column="33">pCur<pos:position pos:line="2438" pos:column="37"/></name><operator pos:line="2438" pos:column="37">-&gt;<pos:position pos:line="2438" pos:column="42"/></operator><name pos:line="2438" pos:column="39">pCursor<pos:position pos:line="2438" pos:column="46"/></name></name></expr></argument>)<pos:position pos:line="2438" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="2438" pos:column="48"/></expr_stmt>
      <comment type="block" pos:line="2439" pos:column="7">/* Sanity checking.  Only the lower four bits of the flags byte should
      ** be used.  Bit 3 (mask 0x08) is unpredictable.  The lower 3 bits
      ** (mask 0x07) should be either 5 (intkey+leafdata for tables) or
      ** 2 (zerodata for indices).  If these conditions are not met it can
      ** only mean that we are dealing with a corrupt database file
      */</comment>
      <if pos:line="2445" pos:column="7">if<condition pos:line="2445" pos:column="9">( <expr><operator pos:line="2445" pos:column="11">(<pos:position pos:line="2445" pos:column="12"/></operator><name pos:line="2445" pos:column="12">flags<pos:position pos:line="2445" pos:column="17"/></name> <operator pos:line="2445" pos:column="18">&amp;<pos:position pos:line="2445" pos:column="23"/></operator> <literal type="number" pos:line="2445" pos:column="20">0xf0<pos:position pos:line="2445" pos:column="24"/></literal><operator pos:line="2445" pos:column="24">)<pos:position pos:line="2445" pos:column="25"/></operator><operator pos:line="2445" pos:column="25">!=<pos:position pos:line="2445" pos:column="27"/></operator><literal type="number" pos:line="2445" pos:column="27">0<pos:position pos:line="2445" pos:column="28"/></literal> <operator pos:line="2445" pos:column="29">||<pos:position pos:line="2445" pos:column="31"/></operator> <operator pos:line="2445" pos:column="32">(<pos:position pos:line="2445" pos:column="33"/></operator><operator pos:line="2445" pos:column="33">(<pos:position pos:line="2445" pos:column="34"/></operator><name pos:line="2445" pos:column="34">flags<pos:position pos:line="2445" pos:column="39"/></name> <operator pos:line="2445" pos:column="40">&amp;<pos:position pos:line="2445" pos:column="45"/></operator> <literal type="number" pos:line="2445" pos:column="42">0x07<pos:position pos:line="2445" pos:column="46"/></literal><operator pos:line="2445" pos:column="46">)<pos:position pos:line="2445" pos:column="47"/></operator><operator pos:line="2445" pos:column="47">!=<pos:position pos:line="2445" pos:column="49"/></operator><literal type="number" pos:line="2445" pos:column="49">5<pos:position pos:line="2445" pos:column="50"/></literal> <operator pos:line="2445" pos:column="51">&amp;&amp;<pos:position pos:line="2445" pos:column="61"/></operator> <operator pos:line="2445" pos:column="54">(<pos:position pos:line="2445" pos:column="55"/></operator><name pos:line="2445" pos:column="55">flags<pos:position pos:line="2445" pos:column="60"/></name> <operator pos:line="2445" pos:column="61">&amp;<pos:position pos:line="2445" pos:column="66"/></operator> <literal type="number" pos:line="2445" pos:column="63">0x07<pos:position pos:line="2445" pos:column="67"/></literal><operator pos:line="2445" pos:column="67">)<pos:position pos:line="2445" pos:column="68"/></operator><operator pos:line="2445" pos:column="68">!=<pos:position pos:line="2445" pos:column="70"/></operator><literal type="number" pos:line="2445" pos:column="70">2<pos:position pos:line="2445" pos:column="71"/></literal><operator pos:line="2445" pos:column="71">)<pos:position pos:line="2445" pos:column="72"/></operator></expr> )<pos:position pos:line="2445" pos:column="74"/></condition><then><block pos:line="2445" pos:column="74">{
        <expr_stmt><expr><name pos:line="2446" pos:column="9">rc<pos:position pos:line="2446" pos:column="11"/></name> <operator pos:line="2446" pos:column="12">=<pos:position pos:line="2446" pos:column="13"/></operator> <name pos:line="2446" pos:column="14">SQLITE_CORRUPT_BKPT<pos:position pos:line="2446" pos:column="33"/></name></expr>;<pos:position pos:line="2446" pos:column="34"/></expr_stmt>
        <goto pos:line="2447" pos:column="9">goto <name pos:line="2447" pos:column="14">abort_due_to_error<pos:position pos:line="2447" pos:column="32"/></name>;<pos:position pos:line="2447" pos:column="33"/></goto>
      }<pos:position pos:line="2448" pos:column="8"/></block></then></if>
      <expr_stmt><expr><name><name pos:line="2449" pos:column="7">pCur<pos:position pos:line="2449" pos:column="11"/></name><operator pos:line="2449" pos:column="11">-&gt;<pos:position pos:line="2449" pos:column="16"/></operator><name pos:line="2449" pos:column="13">isTable<pos:position pos:line="2449" pos:column="20"/></name></name> <operator pos:line="2449" pos:column="21">=<pos:position pos:line="2449" pos:column="22"/></operator> <ternary><condition><expr><operator pos:line="2449" pos:column="23">(<pos:position pos:line="2449" pos:column="24"/></operator><name pos:line="2449" pos:column="24">flags<pos:position pos:line="2449" pos:column="29"/></name> <operator pos:line="2449" pos:column="30">&amp;<pos:position pos:line="2449" pos:column="35"/></operator> <name pos:line="2449" pos:column="32">BTREE_INTKEY<pos:position pos:line="2449" pos:column="44"/></name><operator pos:line="2449" pos:column="44">)<pos:position pos:line="2449" pos:column="45"/></operator><operator pos:line="2449" pos:column="45">!=<pos:position pos:line="2449" pos:column="47"/></operator><literal type="number" pos:line="2449" pos:column="47">0<pos:position pos:line="2449" pos:column="48"/></literal></expr> ?<pos:position pos:line="2449" pos:column="50"/></condition><then><expr><literal type="number" pos:line="2449" pos:column="50">1<pos:position pos:line="2449" pos:column="51"/></literal></expr></then><else pos:line="2449" pos:column="51">:<expr><literal type="number" pos:line="2449" pos:column="52">0<pos:position pos:line="2449" pos:column="53"/></literal></expr></else></ternary></expr>;<pos:position pos:line="2449" pos:column="54"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="2450" pos:column="7">pCur<pos:position pos:line="2450" pos:column="11"/></name><operator pos:line="2450" pos:column="11">-&gt;<pos:position pos:line="2450" pos:column="16"/></operator><name pos:line="2450" pos:column="13">isIndex<pos:position pos:line="2450" pos:column="20"/></name></name> <operator pos:line="2450" pos:column="21">=<pos:position pos:line="2450" pos:column="22"/></operator> <ternary><condition><expr><operator pos:line="2450" pos:column="23">(<pos:position pos:line="2450" pos:column="24"/></operator><name pos:line="2450" pos:column="24">flags<pos:position pos:line="2450" pos:column="29"/></name> <operator pos:line="2450" pos:column="30">&amp;<pos:position pos:line="2450" pos:column="35"/></operator> <name pos:line="2450" pos:column="32">BTREE_ZERODATA<pos:position pos:line="2450" pos:column="46"/></name><operator pos:line="2450" pos:column="46">)<pos:position pos:line="2450" pos:column="47"/></operator><operator pos:line="2450" pos:column="47">!=<pos:position pos:line="2450" pos:column="49"/></operator><literal type="number" pos:line="2450" pos:column="49">0<pos:position pos:line="2450" pos:column="50"/></literal></expr> ?<pos:position pos:line="2450" pos:column="52"/></condition><then><expr><literal type="number" pos:line="2450" pos:column="52">1<pos:position pos:line="2450" pos:column="53"/></literal></expr></then><else pos:line="2450" pos:column="53">:<expr><literal type="number" pos:line="2450" pos:column="54">0<pos:position pos:line="2450" pos:column="55"/></literal></expr></else></ternary></expr>;<pos:position pos:line="2450" pos:column="56"/></expr_stmt>
      <comment type="block" pos:line="2451" pos:column="7">/* If P4==0 it means we are expected to open a table.  If P4!=0 then
      ** we expect to be opening an index.  If this is not what happened,
      ** then the database is corrupt
      */</comment>
      <if pos:line="2455" pos:column="7">if<condition pos:line="2455" pos:column="9">( <expr><operator pos:line="2455" pos:column="11">(<pos:position pos:line="2455" pos:column="12"/></operator><name><name pos:line="2455" pos:column="12">pCur<pos:position pos:line="2455" pos:column="16"/></name><operator pos:line="2455" pos:column="16">-&gt;<pos:position pos:line="2455" pos:column="21"/></operator><name pos:line="2455" pos:column="18">isTable<pos:position pos:line="2455" pos:column="25"/></name></name> <operator pos:line="2455" pos:column="26">&amp;&amp;<pos:position pos:line="2455" pos:column="36"/></operator> <name><name pos:line="2455" pos:column="29">pOp<pos:position pos:line="2455" pos:column="32"/></name><operator pos:line="2455" pos:column="32">-&gt;<pos:position pos:line="2455" pos:column="37"/></operator><name pos:line="2455" pos:column="34">p4type<pos:position pos:line="2455" pos:column="40"/></name></name><operator pos:line="2455" pos:column="40">==<pos:position pos:line="2455" pos:column="42"/></operator><name pos:line="2455" pos:column="42">P4_KEYINFO<pos:position pos:line="2455" pos:column="52"/></name><operator pos:line="2455" pos:column="52">)<pos:position pos:line="2455" pos:column="53"/></operator>
       <operator pos:line="2456" pos:column="8">||<pos:position pos:line="2456" pos:column="10"/></operator> <operator pos:line="2456" pos:column="11">(<pos:position pos:line="2456" pos:column="12"/></operator><name><name pos:line="2456" pos:column="12">pCur<pos:position pos:line="2456" pos:column="16"/></name><operator pos:line="2456" pos:column="16">-&gt;<pos:position pos:line="2456" pos:column="21"/></operator><name pos:line="2456" pos:column="18">isIndex<pos:position pos:line="2456" pos:column="25"/></name></name> <operator pos:line="2456" pos:column="26">&amp;&amp;<pos:position pos:line="2456" pos:column="36"/></operator> <name><name pos:line="2456" pos:column="29">pOp<pos:position pos:line="2456" pos:column="32"/></name><operator pos:line="2456" pos:column="32">-&gt;<pos:position pos:line="2456" pos:column="37"/></operator><name pos:line="2456" pos:column="34">p4type<pos:position pos:line="2456" pos:column="40"/></name></name><operator pos:line="2456" pos:column="40">!=<pos:position pos:line="2456" pos:column="42"/></operator><name pos:line="2456" pos:column="42">P4_KEYINFO<pos:position pos:line="2456" pos:column="52"/></name><operator pos:line="2456" pos:column="52">)<pos:position pos:line="2456" pos:column="53"/></operator></expr> )<pos:position pos:line="2456" pos:column="55"/></condition><then><block pos:line="2456" pos:column="55">{
        <expr_stmt><expr><name pos:line="2457" pos:column="9">rc<pos:position pos:line="2457" pos:column="11"/></name> <operator pos:line="2457" pos:column="12">=<pos:position pos:line="2457" pos:column="13"/></operator> <name pos:line="2457" pos:column="14">SQLITE_CORRUPT_BKPT<pos:position pos:line="2457" pos:column="33"/></name></expr>;<pos:position pos:line="2457" pos:column="34"/></expr_stmt>
        <goto pos:line="2458" pos:column="9">goto <name pos:line="2458" pos:column="14">abort_due_to_error<pos:position pos:line="2458" pos:column="32"/></name>;<pos:position pos:line="2458" pos:column="33"/></goto>
      }<pos:position pos:line="2459" pos:column="8"/></block></then></if>
      <break pos:line="2460" pos:column="7">break;<pos:position pos:line="2460" pos:column="13"/></break>
    }<pos:position pos:line="2461" pos:column="6"/></block>
    <case pos:line="2462" pos:column="5">case <expr><name pos:line="2462" pos:column="10">SQLITE_EMPTY<pos:position pos:line="2462" pos:column="22"/></name></expr>:<pos:position pos:line="2462" pos:column="23"/></case> <block pos:line="2462" pos:column="24">{
      <expr_stmt><expr><name><name pos:line="2463" pos:column="7">pCur<pos:position pos:line="2463" pos:column="11"/></name><operator pos:line="2463" pos:column="11">-&gt;<pos:position pos:line="2463" pos:column="16"/></operator><name pos:line="2463" pos:column="13">isTable<pos:position pos:line="2463" pos:column="20"/></name></name> <operator pos:line="2463" pos:column="21">=<pos:position pos:line="2463" pos:column="22"/></operator> <name><name pos:line="2463" pos:column="23">pOp<pos:position pos:line="2463" pos:column="26"/></name><operator pos:line="2463" pos:column="26">-&gt;<pos:position pos:line="2463" pos:column="31"/></operator><name pos:line="2463" pos:column="28">p4type<pos:position pos:line="2463" pos:column="34"/></name></name><operator pos:line="2463" pos:column="34">!=<pos:position pos:line="2463" pos:column="36"/></operator><name pos:line="2463" pos:column="36">P4_KEYINFO<pos:position pos:line="2463" pos:column="46"/></name></expr>;<pos:position pos:line="2463" pos:column="47"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="2464" pos:column="7">pCur<pos:position pos:line="2464" pos:column="11"/></name><operator pos:line="2464" pos:column="11">-&gt;<pos:position pos:line="2464" pos:column="16"/></operator><name pos:line="2464" pos:column="13">isIndex<pos:position pos:line="2464" pos:column="20"/></name></name> <operator pos:line="2464" pos:column="21">=<pos:position pos:line="2464" pos:column="22"/></operator> <operator pos:line="2464" pos:column="23">!<pos:position pos:line="2464" pos:column="24"/></operator><name><name pos:line="2464" pos:column="24">pCur<pos:position pos:line="2464" pos:column="28"/></name><operator pos:line="2464" pos:column="28">-&gt;<pos:position pos:line="2464" pos:column="33"/></operator><name pos:line="2464" pos:column="30">isTable<pos:position pos:line="2464" pos:column="37"/></name></name></expr>;<pos:position pos:line="2464" pos:column="38"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="2465" pos:column="7">pCur<pos:position pos:line="2465" pos:column="11"/></name><operator pos:line="2465" pos:column="11">-&gt;<pos:position pos:line="2465" pos:column="16"/></operator><name pos:line="2465" pos:column="13">pCursor<pos:position pos:line="2465" pos:column="20"/></name></name> <operator pos:line="2465" pos:column="21">=<pos:position pos:line="2465" pos:column="22"/></operator> <literal type="number" pos:line="2465" pos:column="23">0<pos:position pos:line="2465" pos:column="24"/></literal></expr>;<pos:position pos:line="2465" pos:column="25"/></expr_stmt>
      <expr_stmt><expr><name pos:line="2466" pos:column="7">rc<pos:position pos:line="2466" pos:column="9"/></name> <operator pos:line="2466" pos:column="10">=<pos:position pos:line="2466" pos:column="11"/></operator> <name pos:line="2466" pos:column="12">SQLITE_OK<pos:position pos:line="2466" pos:column="21"/></name></expr>;<pos:position pos:line="2466" pos:column="22"/></expr_stmt>
      <break pos:line="2467" pos:column="7">break;<pos:position pos:line="2467" pos:column="13"/></break>
    }<pos:position pos:line="2468" pos:column="6"/></block>
    <default pos:line="2469" pos:column="5">default:<pos:position pos:line="2469" pos:column="13"/></default> <block pos:line="2469" pos:column="14">{
      <goto pos:line="2470" pos:column="7">goto <name pos:line="2470" pos:column="12">abort_due_to_error<pos:position pos:line="2470" pos:column="30"/></name>;<pos:position pos:line="2470" pos:column="31"/></goto>
    }<pos:position pos:line="2471" pos:column="6"/></block>
  }<pos:position pos:line="2472" pos:column="4"/></block></switch>
  <break pos:line="2473" pos:column="3">break;<pos:position pos:line="2473" pos:column="9"/></break>
}<pos:position pos:line="2474" pos:column="2"/></block>

<comment type="block" pos:line="2476" pos:column="1">/* Opcode: OpenEphemeral P1 P2 * P4 *
**
** Open a new cursor P1 to a transient table.
** The cursor is always opened read/write even if 
** the main database is read-only.  The transient or virtual
** table is deleted automatically when the cursor is closed.
**
** P2 is the number of columns in the virtual table.
** The cursor points to a BTree table if P4==0 and to a BTree index
** if P4 is not 0.  If P4 is not NULL, it points to a KeyInfo structure
** that defines the format of keys in the index.
**
** This opcode was once called OpenTemp.  But that created
** confusion because the term "temp table", might refer either
** to a TEMP table at the SQL level, or to a table opened by
** this opcode.  Then this opcode was call OpenVirtual.  But
** that created confusion with the whole virtual-table idea.
*/</comment>
<case pos:line="2494" pos:column="1">case <expr><name pos:line="2494" pos:column="6">OP_OpenEphemeral<pos:position pos:line="2494" pos:column="22"/></name></expr>:<pos:position pos:line="2494" pos:column="23"/></case> <block pos:line="2494" pos:column="24">{
  <decl_stmt><decl><type><name pos:line="2495" pos:column="3">int<pos:position pos:line="2495" pos:column="6"/></name></type> <name pos:line="2495" pos:column="7">i<pos:position pos:line="2495" pos:column="8"/></name></decl>;<pos:position pos:line="2495" pos:column="9"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="2496" pos:column="3">VdbeCursor<pos:position pos:line="2496" pos:column="13"/></name> <modifier pos:line="2496" pos:column="14">*<pos:position pos:line="2496" pos:column="15"/></modifier></type><name pos:line="2496" pos:column="15">pCx<pos:position pos:line="2496" pos:column="18"/></name></decl>;<pos:position pos:line="2496" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><specifier pos:line="2497" pos:column="3">static<pos:position pos:line="2497" pos:column="9"/></specifier> <type><specifier pos:line="2497" pos:column="10">const<pos:position pos:line="2497" pos:column="15"/></specifier> <name pos:line="2497" pos:column="16">int<pos:position pos:line="2497" pos:column="19"/></name></type> <name pos:line="2497" pos:column="20">openFlags<pos:position pos:line="2497" pos:column="29"/></name> <init pos:line="2497" pos:column="30">= 
      <expr><name pos:line="2498" pos:column="7">SQLITE_OPEN_READWRITE<pos:position pos:line="2498" pos:column="28"/></name> <operator pos:line="2498" pos:column="29">|<pos:position pos:line="2498" pos:column="30"/></operator>
      <name pos:line="2499" pos:column="7">SQLITE_OPEN_CREATE<pos:position pos:line="2499" pos:column="25"/></name> <operator pos:line="2499" pos:column="26">|<pos:position pos:line="2499" pos:column="27"/></operator>
      <name pos:line="2500" pos:column="7">SQLITE_OPEN_EXCLUSIVE<pos:position pos:line="2500" pos:column="28"/></name> <operator pos:line="2500" pos:column="29">|<pos:position pos:line="2500" pos:column="30"/></operator>
      <name pos:line="2501" pos:column="7">SQLITE_OPEN_DELETEONCLOSE<pos:position pos:line="2501" pos:column="32"/></name> <operator pos:line="2501" pos:column="33">|<pos:position pos:line="2501" pos:column="34"/></operator>
      <name pos:line="2502" pos:column="7">SQLITE_OPEN_TRANSIENT_DB<pos:position pos:line="2502" pos:column="31"/></name></expr></init></decl>;<pos:position pos:line="2502" pos:column="32"/></decl_stmt>

  <expr_stmt><expr><name pos:line="2504" pos:column="3">i<pos:position pos:line="2504" pos:column="4"/></name> <operator pos:line="2504" pos:column="5">=<pos:position pos:line="2504" pos:column="6"/></operator> <name><name pos:line="2504" pos:column="7">pOp<pos:position pos:line="2504" pos:column="10"/></name><operator pos:line="2504" pos:column="10">-&gt;<pos:position pos:line="2504" pos:column="15"/></operator><name pos:line="2504" pos:column="12">p1<pos:position pos:line="2504" pos:column="14"/></name></name></expr>;<pos:position pos:line="2504" pos:column="15"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="2505" pos:column="3">assert<pos:position pos:line="2505" pos:column="9"/></name><argument_list pos:line="2505" pos:column="9">( <argument><expr><name pos:line="2505" pos:column="11">i<pos:position pos:line="2505" pos:column="12"/></name><operator pos:line="2505" pos:column="12">&gt;=<pos:position pos:line="2505" pos:column="17"/></operator><literal type="number" pos:line="2505" pos:column="14">0<pos:position pos:line="2505" pos:column="15"/></literal></expr></argument> )<pos:position pos:line="2505" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="2505" pos:column="18"/></expr_stmt>
  <expr_stmt><expr><name pos:line="2506" pos:column="3">pCx<pos:position pos:line="2506" pos:column="6"/></name> <operator pos:line="2506" pos:column="7">=<pos:position pos:line="2506" pos:column="8"/></operator> <call><name pos:line="2506" pos:column="9">allocateCursor<pos:position pos:line="2506" pos:column="23"/></name><argument_list pos:line="2506" pos:column="23">(<argument><expr><name pos:line="2506" pos:column="24">p<pos:position pos:line="2506" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="2506" pos:column="27">i<pos:position pos:line="2506" pos:column="28"/></name></expr></argument>, <argument><expr><name><name pos:line="2506" pos:column="30">pOp<pos:position pos:line="2506" pos:column="33"/></name><operator pos:line="2506" pos:column="33">-&gt;<pos:position pos:line="2506" pos:column="38"/></operator><name pos:line="2506" pos:column="35">p2<pos:position pos:line="2506" pos:column="37"/></name></name></expr></argument>, <argument><expr><operator pos:line="2506" pos:column="39">-<pos:position pos:line="2506" pos:column="40"/></operator><literal type="number" pos:line="2506" pos:column="40">1<pos:position pos:line="2506" pos:column="41"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="2506" pos:column="43">1<pos:position pos:line="2506" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="2506" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="2506" pos:column="46"/></expr_stmt>
  <if pos:line="2507" pos:column="3">if<condition pos:line="2507" pos:column="5">( <expr><name pos:line="2507" pos:column="7">pCx<pos:position pos:line="2507" pos:column="10"/></name><operator pos:line="2507" pos:column="10">==<pos:position pos:line="2507" pos:column="12"/></operator><literal type="number" pos:line="2507" pos:column="12">0<pos:position pos:line="2507" pos:column="13"/></literal></expr> )<pos:position pos:line="2507" pos:column="15"/></condition><then pos:line="2507" pos:column="15"> <block type="pseudo"><goto pos:line="2507" pos:column="16">goto <name pos:line="2507" pos:column="21">no_mem<pos:position pos:line="2507" pos:column="27"/></name>;<pos:position pos:line="2507" pos:column="28"/></goto></block></then></if>
  <expr_stmt><expr><name><name pos:line="2508" pos:column="3">pCx<pos:position pos:line="2508" pos:column="6"/></name><operator pos:line="2508" pos:column="6">-&gt;<pos:position pos:line="2508" pos:column="11"/></operator><name pos:line="2508" pos:column="8">nullRow<pos:position pos:line="2508" pos:column="15"/></name></name> <operator pos:line="2508" pos:column="16">=<pos:position pos:line="2508" pos:column="17"/></operator> <literal type="number" pos:line="2508" pos:column="18">1<pos:position pos:line="2508" pos:column="19"/></literal></expr>;<pos:position pos:line="2508" pos:column="20"/></expr_stmt>
  <expr_stmt><expr><name pos:line="2509" pos:column="3">rc<pos:position pos:line="2509" pos:column="5"/></name> <operator pos:line="2509" pos:column="6">=<pos:position pos:line="2509" pos:column="7"/></operator> <call><name pos:line="2509" pos:column="8">sqlite3BtreeFactory<pos:position pos:line="2509" pos:column="27"/></name><argument_list pos:line="2509" pos:column="27">(<argument><expr><name pos:line="2509" pos:column="28">db<pos:position pos:line="2509" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="2509" pos:column="32">0<pos:position pos:line="2509" pos:column="33"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="2509" pos:column="35">1<pos:position pos:line="2509" pos:column="36"/></literal></expr></argument>, <argument><expr><name pos:line="2509" pos:column="38">SQLITE_DEFAULT_TEMP_CACHE_SIZE<pos:position pos:line="2509" pos:column="68"/></name></expr></argument>, <argument><expr><name pos:line="2509" pos:column="70">openFlags<pos:position pos:line="2509" pos:column="79"/></name></expr></argument>,
                           <argument><expr><operator pos:line="2510" pos:column="28">&amp;<pos:position pos:line="2510" pos:column="33"/></operator><name><name pos:line="2510" pos:column="29">pCx<pos:position pos:line="2510" pos:column="32"/></name><operator pos:line="2510" pos:column="32">-&gt;<pos:position pos:line="2510" pos:column="37"/></operator><name pos:line="2510" pos:column="34">pBt<pos:position pos:line="2510" pos:column="37"/></name></name></expr></argument>)<pos:position pos:line="2510" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="2510" pos:column="39"/></expr_stmt>
  <if pos:line="2511" pos:column="3">if<condition pos:line="2511" pos:column="5">( <expr><name pos:line="2511" pos:column="7">rc<pos:position pos:line="2511" pos:column="9"/></name><operator pos:line="2511" pos:column="9">==<pos:position pos:line="2511" pos:column="11"/></operator><name pos:line="2511" pos:column="11">SQLITE_OK<pos:position pos:line="2511" pos:column="20"/></name></expr> )<pos:position pos:line="2511" pos:column="22"/></condition><then><block pos:line="2511" pos:column="22">{
    <expr_stmt><expr><name pos:line="2512" pos:column="5">rc<pos:position pos:line="2512" pos:column="7"/></name> <operator pos:line="2512" pos:column="8">=<pos:position pos:line="2512" pos:column="9"/></operator> <call><name pos:line="2512" pos:column="10">sqlite3BtreeBeginTrans<pos:position pos:line="2512" pos:column="32"/></name><argument_list pos:line="2512" pos:column="32">(<argument><expr><name><name pos:line="2512" pos:column="33">pCx<pos:position pos:line="2512" pos:column="36"/></name><operator pos:line="2512" pos:column="36">-&gt;<pos:position pos:line="2512" pos:column="41"/></operator><name pos:line="2512" pos:column="38">pBt<pos:position pos:line="2512" pos:column="41"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="2512" pos:column="43">1<pos:position pos:line="2512" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="2512" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="2512" pos:column="46"/></expr_stmt>
  }<pos:position pos:line="2513" pos:column="4"/></block></then></if>
  <if pos:line="2514" pos:column="3">if<condition pos:line="2514" pos:column="5">( <expr><name pos:line="2514" pos:column="7">rc<pos:position pos:line="2514" pos:column="9"/></name><operator pos:line="2514" pos:column="9">==<pos:position pos:line="2514" pos:column="11"/></operator><name pos:line="2514" pos:column="11">SQLITE_OK<pos:position pos:line="2514" pos:column="20"/></name></expr> )<pos:position pos:line="2514" pos:column="22"/></condition><then><block pos:line="2514" pos:column="22">{
    <comment type="block" pos:line="2515" pos:column="5">/* If a transient index is required, create it by calling
    ** sqlite3BtreeCreateTable() with the BTREE_ZERODATA flag before
    ** opening it. If a transient table is required, just use the
    ** automatically created table with root-page 1 (an INTKEY table).
    */</comment>
    <if pos:line="2520" pos:column="5">if<condition pos:line="2520" pos:column="7">( <expr><name><name pos:line="2520" pos:column="9">pOp<pos:position pos:line="2520" pos:column="12"/></name><operator pos:line="2520" pos:column="12">-&gt;<pos:position pos:line="2520" pos:column="17"/></operator><name pos:line="2520" pos:column="14">p4<pos:position pos:line="2520" pos:column="16"/></name><operator pos:line="2520" pos:column="16">.<pos:position pos:line="2520" pos:column="17"/></operator><name pos:line="2520" pos:column="17">pKeyInfo<pos:position pos:line="2520" pos:column="25"/></name></name></expr> )<pos:position pos:line="2520" pos:column="27"/></condition><then><block pos:line="2520" pos:column="27">{
      <decl_stmt><decl><type><name pos:line="2521" pos:column="7">int<pos:position pos:line="2521" pos:column="10"/></name></type> <name pos:line="2521" pos:column="11">pgno<pos:position pos:line="2521" pos:column="15"/></name></decl>;<pos:position pos:line="2521" pos:column="16"/></decl_stmt>
      <expr_stmt><expr><call><name pos:line="2522" pos:column="7">assert<pos:position pos:line="2522" pos:column="13"/></name><argument_list pos:line="2522" pos:column="13">( <argument><expr><name><name pos:line="2522" pos:column="15">pOp<pos:position pos:line="2522" pos:column="18"/></name><operator pos:line="2522" pos:column="18">-&gt;<pos:position pos:line="2522" pos:column="23"/></operator><name pos:line="2522" pos:column="20">p4type<pos:position pos:line="2522" pos:column="26"/></name></name><operator pos:line="2522" pos:column="26">==<pos:position pos:line="2522" pos:column="28"/></operator><name pos:line="2522" pos:column="28">P4_KEYINFO<pos:position pos:line="2522" pos:column="38"/></name></expr></argument> )<pos:position pos:line="2522" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="2522" pos:column="41"/></expr_stmt>
      <expr_stmt><expr><name pos:line="2523" pos:column="7">rc<pos:position pos:line="2523" pos:column="9"/></name> <operator pos:line="2523" pos:column="10">=<pos:position pos:line="2523" pos:column="11"/></operator> <call><name pos:line="2523" pos:column="12">sqlite3BtreeCreateTable<pos:position pos:line="2523" pos:column="35"/></name><argument_list pos:line="2523" pos:column="35">(<argument><expr><name><name pos:line="2523" pos:column="36">pCx<pos:position pos:line="2523" pos:column="39"/></name><operator pos:line="2523" pos:column="39">-&gt;<pos:position pos:line="2523" pos:column="44"/></operator><name pos:line="2523" pos:column="41">pBt<pos:position pos:line="2523" pos:column="44"/></name></name></expr></argument>, <argument><expr><operator pos:line="2523" pos:column="46">&amp;<pos:position pos:line="2523" pos:column="51"/></operator><name pos:line="2523" pos:column="47">pgno<pos:position pos:line="2523" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="2523" pos:column="53">BTREE_ZERODATA<pos:position pos:line="2523" pos:column="67"/></name></expr></argument>)<pos:position pos:line="2523" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="2523" pos:column="69"/></expr_stmt> 
      <if pos:line="2524" pos:column="7">if<condition pos:line="2524" pos:column="9">( <expr><name pos:line="2524" pos:column="11">rc<pos:position pos:line="2524" pos:column="13"/></name><operator pos:line="2524" pos:column="13">==<pos:position pos:line="2524" pos:column="15"/></operator><name pos:line="2524" pos:column="15">SQLITE_OK<pos:position pos:line="2524" pos:column="24"/></name></expr> )<pos:position pos:line="2524" pos:column="26"/></condition><then><block pos:line="2524" pos:column="26">{
        <expr_stmt><expr><call><name pos:line="2525" pos:column="9">assert<pos:position pos:line="2525" pos:column="15"/></name><argument_list pos:line="2525" pos:column="15">( <argument><expr><name pos:line="2525" pos:column="17">pgno<pos:position pos:line="2525" pos:column="21"/></name><operator pos:line="2525" pos:column="21">==<pos:position pos:line="2525" pos:column="23"/></operator><name pos:line="2525" pos:column="23">MASTER_ROOT<pos:position pos:line="2525" pos:column="34"/></name><operator pos:line="2525" pos:column="34">+<pos:position pos:line="2525" pos:column="35"/></operator><literal type="number" pos:line="2525" pos:column="35">1<pos:position pos:line="2525" pos:column="36"/></literal></expr></argument> )<pos:position pos:line="2525" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="2525" pos:column="39"/></expr_stmt>
        <expr_stmt><expr><name pos:line="2526" pos:column="9">rc<pos:position pos:line="2526" pos:column="11"/></name> <operator pos:line="2526" pos:column="12">=<pos:position pos:line="2526" pos:column="13"/></operator> <call><name pos:line="2526" pos:column="14">sqlite3BtreeCursor<pos:position pos:line="2526" pos:column="32"/></name><argument_list pos:line="2526" pos:column="32">(<argument><expr><name><name pos:line="2526" pos:column="33">pCx<pos:position pos:line="2526" pos:column="36"/></name><operator pos:line="2526" pos:column="36">-&gt;<pos:position pos:line="2526" pos:column="41"/></operator><name pos:line="2526" pos:column="38">pBt<pos:position pos:line="2526" pos:column="41"/></name></name></expr></argument>, <argument><expr><name pos:line="2526" pos:column="43">pgno<pos:position pos:line="2526" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="2526" pos:column="49">1<pos:position pos:line="2526" pos:column="50"/></literal></expr></argument>, 
                                <argument><expr><operator pos:line="2527" pos:column="33">(<pos:position pos:line="2527" pos:column="34"/></operator><name pos:line="2527" pos:column="34">KeyInfo<pos:position pos:line="2527" pos:column="41"/></name><operator pos:line="2527" pos:column="41">*<pos:position pos:line="2527" pos:column="42"/></operator><operator pos:line="2527" pos:column="42">)<pos:position pos:line="2527" pos:column="43"/></operator><name><name pos:line="2527" pos:column="43">pOp<pos:position pos:line="2527" pos:column="46"/></name><operator pos:line="2527" pos:column="46">-&gt;<pos:position pos:line="2527" pos:column="51"/></operator><name pos:line="2527" pos:column="48">p4<pos:position pos:line="2527" pos:column="50"/></name><operator pos:line="2527" pos:column="50">.<pos:position pos:line="2527" pos:column="51"/></operator><name pos:line="2527" pos:column="51">z<pos:position pos:line="2527" pos:column="52"/></name></name></expr></argument>, <argument><expr><name><name pos:line="2527" pos:column="54">pCx<pos:position pos:line="2527" pos:column="57"/></name><operator pos:line="2527" pos:column="57">-&gt;<pos:position pos:line="2527" pos:column="62"/></operator><name pos:line="2527" pos:column="59">pCursor<pos:position pos:line="2527" pos:column="66"/></name></name></expr></argument>)<pos:position pos:line="2527" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="2527" pos:column="68"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="2528" pos:column="9">pCx<pos:position pos:line="2528" pos:column="12"/></name><operator pos:line="2528" pos:column="12">-&gt;<pos:position pos:line="2528" pos:column="17"/></operator><name pos:line="2528" pos:column="14">pKeyInfo<pos:position pos:line="2528" pos:column="22"/></name></name> <operator pos:line="2528" pos:column="23">=<pos:position pos:line="2528" pos:column="24"/></operator> <name><name pos:line="2528" pos:column="25">pOp<pos:position pos:line="2528" pos:column="28"/></name><operator pos:line="2528" pos:column="28">-&gt;<pos:position pos:line="2528" pos:column="33"/></operator><name pos:line="2528" pos:column="30">p4<pos:position pos:line="2528" pos:column="32"/></name><operator pos:line="2528" pos:column="32">.<pos:position pos:line="2528" pos:column="33"/></operator><name pos:line="2528" pos:column="33">pKeyInfo<pos:position pos:line="2528" pos:column="41"/></name></name></expr>;<pos:position pos:line="2528" pos:column="42"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="2529" pos:column="9">pCx<pos:position pos:line="2529" pos:column="12"/></name><operator pos:line="2529" pos:column="12">-&gt;<pos:position pos:line="2529" pos:column="17"/></operator><name pos:line="2529" pos:column="14">pKeyInfo<pos:position pos:line="2529" pos:column="22"/></name><operator pos:line="2529" pos:column="22">-&gt;<pos:position pos:line="2529" pos:column="27"/></operator><name pos:line="2529" pos:column="24">enc<pos:position pos:line="2529" pos:column="27"/></name></name> <operator pos:line="2529" pos:column="28">=<pos:position pos:line="2529" pos:column="29"/></operator> <call><name pos:line="2529" pos:column="30">ENC<pos:position pos:line="2529" pos:column="33"/></name><argument_list pos:line="2529" pos:column="33">(<argument><expr><name><name pos:line="2529" pos:column="34">p<pos:position pos:line="2529" pos:column="35"/></name><operator pos:line="2529" pos:column="35">-&gt;<pos:position pos:line="2529" pos:column="40"/></operator><name pos:line="2529" pos:column="37">db<pos:position pos:line="2529" pos:column="39"/></name></name></expr></argument>)<pos:position pos:line="2529" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="2529" pos:column="41"/></expr_stmt>
      }<pos:position pos:line="2530" pos:column="8"/></block></then></if>
      <expr_stmt><expr><name><name pos:line="2531" pos:column="7">pCx<pos:position pos:line="2531" pos:column="10"/></name><operator pos:line="2531" pos:column="10">-&gt;<pos:position pos:line="2531" pos:column="15"/></operator><name pos:line="2531" pos:column="12">isTable<pos:position pos:line="2531" pos:column="19"/></name></name> <operator pos:line="2531" pos:column="20">=<pos:position pos:line="2531" pos:column="21"/></operator> <literal type="number" pos:line="2531" pos:column="22">0<pos:position pos:line="2531" pos:column="23"/></literal></expr>;<pos:position pos:line="2531" pos:column="24"/></expr_stmt>
    }<pos:position pos:line="2532" pos:column="6"/></block></then><else pos:line="2532" pos:column="6">else<block pos:line="2532" pos:column="10">{
      <expr_stmt><expr><name pos:line="2533" pos:column="7">rc<pos:position pos:line="2533" pos:column="9"/></name> <operator pos:line="2533" pos:column="10">=<pos:position pos:line="2533" pos:column="11"/></operator> <call><name pos:line="2533" pos:column="12">sqlite3BtreeCursor<pos:position pos:line="2533" pos:column="30"/></name><argument_list pos:line="2533" pos:column="30">(<argument><expr><name><name pos:line="2533" pos:column="31">pCx<pos:position pos:line="2533" pos:column="34"/></name><operator pos:line="2533" pos:column="34">-&gt;<pos:position pos:line="2533" pos:column="39"/></operator><name pos:line="2533" pos:column="36">pBt<pos:position pos:line="2533" pos:column="39"/></name></name></expr></argument>, <argument><expr><name pos:line="2533" pos:column="41">MASTER_ROOT<pos:position pos:line="2533" pos:column="52"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="2533" pos:column="54">1<pos:position pos:line="2533" pos:column="55"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="2533" pos:column="57">0<pos:position pos:line="2533" pos:column="58"/></literal></expr></argument>, <argument><expr><name><name pos:line="2533" pos:column="60">pCx<pos:position pos:line="2533" pos:column="63"/></name><operator pos:line="2533" pos:column="63">-&gt;<pos:position pos:line="2533" pos:column="68"/></operator><name pos:line="2533" pos:column="65">pCursor<pos:position pos:line="2533" pos:column="72"/></name></name></expr></argument>)<pos:position pos:line="2533" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="2533" pos:column="74"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="2534" pos:column="7">pCx<pos:position pos:line="2534" pos:column="10"/></name><operator pos:line="2534" pos:column="10">-&gt;<pos:position pos:line="2534" pos:column="15"/></operator><name pos:line="2534" pos:column="12">isTable<pos:position pos:line="2534" pos:column="19"/></name></name> <operator pos:line="2534" pos:column="20">=<pos:position pos:line="2534" pos:column="21"/></operator> <literal type="number" pos:line="2534" pos:column="22">1<pos:position pos:line="2534" pos:column="23"/></literal></expr>;<pos:position pos:line="2534" pos:column="24"/></expr_stmt>
    }<pos:position pos:line="2535" pos:column="6"/></block></else></if>
  }<pos:position pos:line="2536" pos:column="4"/></block></then></if>
  <expr_stmt><expr><name><name pos:line="2537" pos:column="3">pCx<pos:position pos:line="2537" pos:column="6"/></name><operator pos:line="2537" pos:column="6">-&gt;<pos:position pos:line="2537" pos:column="11"/></operator><name pos:line="2537" pos:column="8">isIndex<pos:position pos:line="2537" pos:column="15"/></name></name> <operator pos:line="2537" pos:column="16">=<pos:position pos:line="2537" pos:column="17"/></operator> <operator pos:line="2537" pos:column="18">!<pos:position pos:line="2537" pos:column="19"/></operator><name><name pos:line="2537" pos:column="19">pCx<pos:position pos:line="2537" pos:column="22"/></name><operator pos:line="2537" pos:column="22">-&gt;<pos:position pos:line="2537" pos:column="27"/></operator><name pos:line="2537" pos:column="24">isTable<pos:position pos:line="2537" pos:column="31"/></name></name></expr>;<pos:position pos:line="2537" pos:column="32"/></expr_stmt>
  <break pos:line="2538" pos:column="3">break;<pos:position pos:line="2538" pos:column="9"/></break>
}<pos:position pos:line="2539" pos:column="2"/></block>

<comment type="block" pos:line="2541" pos:column="1">/* Opcode: OpenPseudo P1 P2 P3 * *
**
** Open a new cursor that points to a fake table that contains a single
** row of data.  Any attempt to write a second row of data causes the
** first row to be deleted.  All data is deleted when the cursor is
** closed.
**
** A pseudo-table created by this opcode is useful for holding the
** NEW or OLD tables in a trigger.  Also used to hold the a single
** row output from the sorter so that the row can be decomposed into
** individual columns using the OP_Column opcode.
**
** When OP_Insert is executed to insert a row in to the pseudo table,
** the pseudo-table cursor may or may not make it's own copy of the
** original row data. If P2 is 0, then the pseudo-table will copy the
** original row data. Otherwise, a pointer to the original memory cell
** is stored. In this case, the vdbe program must ensure that the 
** memory cell containing the row data is not overwritten until the
** pseudo table is closed (or a new row is inserted into it).
**
** P3 is the number of fields in the records that will be stored by
** the pseudo-table.
*/</comment>
<case pos:line="2564" pos:column="1">case <expr><name pos:line="2564" pos:column="6">OP_OpenPseudo<pos:position pos:line="2564" pos:column="19"/></name></expr>:<pos:position pos:line="2564" pos:column="20"/></case> <block pos:line="2564" pos:column="21">{
  <decl_stmt><decl><type><name pos:line="2565" pos:column="3">int<pos:position pos:line="2565" pos:column="6"/></name></type> <name pos:line="2565" pos:column="7">i<pos:position pos:line="2565" pos:column="8"/></name></decl>;<pos:position pos:line="2565" pos:column="9"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="2566" pos:column="3">VdbeCursor<pos:position pos:line="2566" pos:column="13"/></name> <modifier pos:line="2566" pos:column="14">*<pos:position pos:line="2566" pos:column="15"/></modifier></type><name pos:line="2566" pos:column="15">pCx<pos:position pos:line="2566" pos:column="18"/></name></decl>;<pos:position pos:line="2566" pos:column="19"/></decl_stmt>

  <expr_stmt><expr><name pos:line="2568" pos:column="3">i<pos:position pos:line="2568" pos:column="4"/></name> <operator pos:line="2568" pos:column="5">=<pos:position pos:line="2568" pos:column="6"/></operator> <name><name pos:line="2568" pos:column="7">pOp<pos:position pos:line="2568" pos:column="10"/></name><operator pos:line="2568" pos:column="10">-&gt;<pos:position pos:line="2568" pos:column="15"/></operator><name pos:line="2568" pos:column="12">p1<pos:position pos:line="2568" pos:column="14"/></name></name></expr>;<pos:position pos:line="2568" pos:column="15"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="2569" pos:column="3">assert<pos:position pos:line="2569" pos:column="9"/></name><argument_list pos:line="2569" pos:column="9">( <argument><expr><name pos:line="2569" pos:column="11">i<pos:position pos:line="2569" pos:column="12"/></name><operator pos:line="2569" pos:column="12">&gt;=<pos:position pos:line="2569" pos:column="17"/></operator><literal type="number" pos:line="2569" pos:column="14">0<pos:position pos:line="2569" pos:column="15"/></literal></expr></argument> )<pos:position pos:line="2569" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="2569" pos:column="18"/></expr_stmt>
  <expr_stmt><expr><name pos:line="2570" pos:column="3">pCx<pos:position pos:line="2570" pos:column="6"/></name> <operator pos:line="2570" pos:column="7">=<pos:position pos:line="2570" pos:column="8"/></operator> <call><name pos:line="2570" pos:column="9">allocateCursor<pos:position pos:line="2570" pos:column="23"/></name><argument_list pos:line="2570" pos:column="23">(<argument><expr><name pos:line="2570" pos:column="24">p<pos:position pos:line="2570" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="2570" pos:column="27">i<pos:position pos:line="2570" pos:column="28"/></name></expr></argument>, <argument><expr><name><name pos:line="2570" pos:column="30">pOp<pos:position pos:line="2570" pos:column="33"/></name><operator pos:line="2570" pos:column="33">-&gt;<pos:position pos:line="2570" pos:column="38"/></operator><name pos:line="2570" pos:column="35">p3<pos:position pos:line="2570" pos:column="37"/></name></name></expr></argument>, <argument><expr><operator pos:line="2570" pos:column="39">-<pos:position pos:line="2570" pos:column="40"/></operator><literal type="number" pos:line="2570" pos:column="40">1<pos:position pos:line="2570" pos:column="41"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="2570" pos:column="43">0<pos:position pos:line="2570" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="2570" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="2570" pos:column="46"/></expr_stmt>
  <if pos:line="2571" pos:column="3">if<condition pos:line="2571" pos:column="5">( <expr><name pos:line="2571" pos:column="7">pCx<pos:position pos:line="2571" pos:column="10"/></name><operator pos:line="2571" pos:column="10">==<pos:position pos:line="2571" pos:column="12"/></operator><literal type="number" pos:line="2571" pos:column="12">0<pos:position pos:line="2571" pos:column="13"/></literal></expr> )<pos:position pos:line="2571" pos:column="15"/></condition><then pos:line="2571" pos:column="15"> <block type="pseudo"><goto pos:line="2571" pos:column="16">goto <name pos:line="2571" pos:column="21">no_mem<pos:position pos:line="2571" pos:column="27"/></name>;<pos:position pos:line="2571" pos:column="28"/></goto></block></then></if>
  <expr_stmt><expr><name><name pos:line="2572" pos:column="3">pCx<pos:position pos:line="2572" pos:column="6"/></name><operator pos:line="2572" pos:column="6">-&gt;<pos:position pos:line="2572" pos:column="11"/></operator><name pos:line="2572" pos:column="8">nullRow<pos:position pos:line="2572" pos:column="15"/></name></name> <operator pos:line="2572" pos:column="16">=<pos:position pos:line="2572" pos:column="17"/></operator> <literal type="number" pos:line="2572" pos:column="18">1<pos:position pos:line="2572" pos:column="19"/></literal></expr>;<pos:position pos:line="2572" pos:column="20"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="2573" pos:column="3">pCx<pos:position pos:line="2573" pos:column="6"/></name><operator pos:line="2573" pos:column="6">-&gt;<pos:position pos:line="2573" pos:column="11"/></operator><name pos:line="2573" pos:column="8">pseudoTable<pos:position pos:line="2573" pos:column="19"/></name></name> <operator pos:line="2573" pos:column="20">=<pos:position pos:line="2573" pos:column="21"/></operator> <literal type="number" pos:line="2573" pos:column="22">1<pos:position pos:line="2573" pos:column="23"/></literal></expr>;<pos:position pos:line="2573" pos:column="24"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="2574" pos:column="3">pCx<pos:position pos:line="2574" pos:column="6"/></name><operator pos:line="2574" pos:column="6">-&gt;<pos:position pos:line="2574" pos:column="11"/></operator><name pos:line="2574" pos:column="8">ephemPseudoTable<pos:position pos:line="2574" pos:column="24"/></name></name> <operator pos:line="2574" pos:column="25">=<pos:position pos:line="2574" pos:column="26"/></operator> <operator pos:line="2574" pos:column="27">(<pos:position pos:line="2574" pos:column="28"/></operator><name pos:line="2574" pos:column="28">u8<pos:position pos:line="2574" pos:column="30"/></name><operator pos:line="2574" pos:column="30">)<pos:position pos:line="2574" pos:column="31"/></operator><name><name pos:line="2574" pos:column="31">pOp<pos:position pos:line="2574" pos:column="34"/></name><operator pos:line="2574" pos:column="34">-&gt;<pos:position pos:line="2574" pos:column="39"/></operator><name pos:line="2574" pos:column="36">p2<pos:position pos:line="2574" pos:column="38"/></name></name></expr>;<pos:position pos:line="2574" pos:column="39"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="2575" pos:column="3">pCx<pos:position pos:line="2575" pos:column="6"/></name><operator pos:line="2575" pos:column="6">-&gt;<pos:position pos:line="2575" pos:column="11"/></operator><name pos:line="2575" pos:column="8">isTable<pos:position pos:line="2575" pos:column="15"/></name></name> <operator pos:line="2575" pos:column="16">=<pos:position pos:line="2575" pos:column="17"/></operator> <literal type="number" pos:line="2575" pos:column="18">1<pos:position pos:line="2575" pos:column="19"/></literal></expr>;<pos:position pos:line="2575" pos:column="20"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="2576" pos:column="3">pCx<pos:position pos:line="2576" pos:column="6"/></name><operator pos:line="2576" pos:column="6">-&gt;<pos:position pos:line="2576" pos:column="11"/></operator><name pos:line="2576" pos:column="8">isIndex<pos:position pos:line="2576" pos:column="15"/></name></name> <operator pos:line="2576" pos:column="16">=<pos:position pos:line="2576" pos:column="17"/></operator> <literal type="number" pos:line="2576" pos:column="18">0<pos:position pos:line="2576" pos:column="19"/></literal></expr>;<pos:position pos:line="2576" pos:column="20"/></expr_stmt>
  <break pos:line="2577" pos:column="3">break;<pos:position pos:line="2577" pos:column="9"/></break>
}<pos:position pos:line="2578" pos:column="2"/></block>

<comment type="block" pos:line="2580" pos:column="1">/* Opcode: Close P1 * * * *
**
** Close a cursor previously opened as P1.  If P1 is not
** currently open, this instruction is a no-op.
*/</comment>
<case pos:line="2585" pos:column="1">case <expr><name pos:line="2585" pos:column="6">OP_Close<pos:position pos:line="2585" pos:column="14"/></name></expr>:<pos:position pos:line="2585" pos:column="15"/></case> <block pos:line="2585" pos:column="16">{
  <decl_stmt><decl><type><name pos:line="2586" pos:column="3">int<pos:position pos:line="2586" pos:column="6"/></name></type> <name pos:line="2586" pos:column="7">i<pos:position pos:line="2586" pos:column="8"/></name></decl>;<pos:position pos:line="2586" pos:column="9"/></decl_stmt>
  <expr_stmt><expr><name pos:line="2587" pos:column="3">i<pos:position pos:line="2587" pos:column="4"/></name> <operator pos:line="2587" pos:column="5">=<pos:position pos:line="2587" pos:column="6"/></operator> <name><name pos:line="2587" pos:column="7">pOp<pos:position pos:line="2587" pos:column="10"/></name><operator pos:line="2587" pos:column="10">-&gt;<pos:position pos:line="2587" pos:column="15"/></operator><name pos:line="2587" pos:column="12">p1<pos:position pos:line="2587" pos:column="14"/></name></name></expr>;<pos:position pos:line="2587" pos:column="15"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="2588" pos:column="3">assert<pos:position pos:line="2588" pos:column="9"/></name><argument_list pos:line="2588" pos:column="9">( <argument><expr><name pos:line="2588" pos:column="11">i<pos:position pos:line="2588" pos:column="12"/></name><operator pos:line="2588" pos:column="12">&gt;=<pos:position pos:line="2588" pos:column="17"/></operator><literal type="number" pos:line="2588" pos:column="14">0<pos:position pos:line="2588" pos:column="15"/></literal> <operator pos:line="2588" pos:column="16">&amp;&amp;<pos:position pos:line="2588" pos:column="26"/></operator> <name pos:line="2588" pos:column="19">i<pos:position pos:line="2588" pos:column="20"/></name><operator pos:line="2588" pos:column="20">&lt;<pos:position pos:line="2588" pos:column="24"/></operator><name><name pos:line="2588" pos:column="21">p<pos:position pos:line="2588" pos:column="22"/></name><operator pos:line="2588" pos:column="22">-&gt;<pos:position pos:line="2588" pos:column="27"/></operator><name pos:line="2588" pos:column="24">nCursor<pos:position pos:line="2588" pos:column="31"/></name></name></expr></argument> )<pos:position pos:line="2588" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="2588" pos:column="34"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="2589" pos:column="3">sqlite3VdbeFreeCursor<pos:position pos:line="2589" pos:column="24"/></name><argument_list pos:line="2589" pos:column="24">(<argument><expr><name pos:line="2589" pos:column="25">p<pos:position pos:line="2589" pos:column="26"/></name></expr></argument>, <argument><expr><name><name pos:line="2589" pos:column="28">p<pos:position pos:line="2589" pos:column="29"/></name><operator pos:line="2589" pos:column="29">-&gt;<pos:position pos:line="2589" pos:column="34"/></operator><name pos:line="2589" pos:column="31">apCsr<pos:position pos:line="2589" pos:column="36"/></name><index pos:line="2589" pos:column="36">[<expr><name pos:line="2589" pos:column="37">i<pos:position pos:line="2589" pos:column="38"/></name></expr>]<pos:position pos:line="2589" pos:column="39"/></index></name></expr></argument>)<pos:position pos:line="2589" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="2589" pos:column="41"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="2590" pos:column="3">p<pos:position pos:line="2590" pos:column="4"/></name><operator pos:line="2590" pos:column="4">-&gt;<pos:position pos:line="2590" pos:column="9"/></operator><name pos:line="2590" pos:column="6">apCsr<pos:position pos:line="2590" pos:column="11"/></name><index pos:line="2590" pos:column="11">[<expr><name pos:line="2590" pos:column="12">i<pos:position pos:line="2590" pos:column="13"/></name></expr>]<pos:position pos:line="2590" pos:column="14"/></index></name> <operator pos:line="2590" pos:column="15">=<pos:position pos:line="2590" pos:column="16"/></operator> <literal type="number" pos:line="2590" pos:column="17">0<pos:position pos:line="2590" pos:column="18"/></literal></expr>;<pos:position pos:line="2590" pos:column="19"/></expr_stmt>
  <break pos:line="2591" pos:column="3">break;<pos:position pos:line="2591" pos:column="9"/></break>
}<pos:position pos:line="2592" pos:column="2"/></block>

<comment type="block" pos:line="2594" pos:column="1">/* Opcode: SeekGe P1 P2 P3 P4 *
**
** If cursor P1 refers to an SQL table (B-Tree that uses integer keys), 
** use the value in register P3 as the key.  If cursor P1 refers 
** to an SQL index, then P3 is the first in an array of P4 registers 
** that are used as an unpacked index key. 
**
** Reposition cursor P1 so that  it points to the smallest entry that 
** is greater than or equal to the key value. If there are no records 
** greater than or equal to the key and P2 is not zero, then jump to P2.
**
** See also: Found, NotFound, Distinct, SeekLt, SeekGt, SeekLe
*/</comment>
<comment type="block" pos:line="2607" pos:column="1">/* Opcode: SeekGt P1 P2 P3 P4 *
**
** If cursor P1 refers to an SQL table (B-Tree that uses integer keys), 
** use the value in register P3 as a key. If cursor P1 refers 
** to an SQL index, then P3 is the first in an array of P4 registers 
** that are used as an unpacked index key. 
**
** Reposition cursor P1 so that  it points to the smallest entry that 
** is greater than the key value. If there are no records greater than 
** the key and P2 is not zero, then jump to P2.
**
** See also: Found, NotFound, Distinct, SeekLt, SeekGe, SeekLe
*/</comment>
<comment type="block" pos:line="2620" pos:column="1">/* Opcode: SeekLt P1 P2 P3 P4 * 
**
** If cursor P1 refers to an SQL table (B-Tree that uses integer keys), 
** use the value in register P3 as a key. If cursor P1 refers 
** to an SQL index, then P3 is the first in an array of P4 registers 
** that are used as an unpacked index key. 
**
** Reposition cursor P1 so that  it points to the largest entry that 
** is less than the key value. If there are no records less than 
** the key and P2 is not zero, then jump to P2.
**
** See also: Found, NotFound, Distinct, SeekGt, SeekGe, SeekLe
*/</comment>
<comment type="block" pos:line="2633" pos:column="1">/* Opcode: SeekLe P1 P2 P3 P4 *
**
** If cursor P1 refers to an SQL table (B-Tree that uses integer keys), 
** use the value in register P3 as a key. If cursor P1 refers 
** to an SQL index, then P3 is the first in an array of P4 registers 
** that are used as an unpacked index key. 
**
** Reposition cursor P1 so that it points to the largest entry that 
** is less than or equal to the key value. If there are no records 
** less than or equal to the key and P2 is not zero, then jump to P2.
**
** See also: Found, NotFound, Distinct, SeekGt, SeekGe, SeekLt
*/</comment>
<case pos:line="2646" pos:column="1">case <expr><name pos:line="2646" pos:column="6">OP_SeekLt<pos:position pos:line="2646" pos:column="15"/></name></expr>:<pos:position pos:line="2646" pos:column="16"/></case>         <comment type="block" pos:line="2646" pos:column="25">/* jump, in3 */</comment>
<case pos:line="2647" pos:column="1">case <expr><name pos:line="2647" pos:column="6">OP_SeekLe<pos:position pos:line="2647" pos:column="15"/></name></expr>:<pos:position pos:line="2647" pos:column="16"/></case>         <comment type="block" pos:line="2647" pos:column="25">/* jump, in3 */</comment>
<case pos:line="2648" pos:column="1">case <expr><name pos:line="2648" pos:column="6">OP_SeekGe<pos:position pos:line="2648" pos:column="15"/></name></expr>:<pos:position pos:line="2648" pos:column="16"/></case>         <comment type="block" pos:line="2648" pos:column="25">/* jump, in3 */</comment>
<case pos:line="2649" pos:column="1">case <expr><name pos:line="2649" pos:column="6">OP_SeekGt<pos:position pos:line="2649" pos:column="15"/></name></expr>:<pos:position pos:line="2649" pos:column="16"/></case> <block pos:line="2649" pos:column="17">{       <comment type="block" pos:line="2649" pos:column="25">/* jump, in3 */</comment>
  <decl_stmt><decl><type><name pos:line="2650" pos:column="3">int<pos:position pos:line="2650" pos:column="6"/></name></type> <name pos:line="2650" pos:column="7">i<pos:position pos:line="2650" pos:column="8"/></name></decl>;<pos:position pos:line="2650" pos:column="9"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="2651" pos:column="3">int<pos:position pos:line="2651" pos:column="6"/></name></type> <name pos:line="2651" pos:column="7">res<pos:position pos:line="2651" pos:column="10"/></name></decl>;<pos:position pos:line="2651" pos:column="11"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="2652" pos:column="3">int<pos:position pos:line="2652" pos:column="6"/></name></type> <name pos:line="2652" pos:column="7">oc<pos:position pos:line="2652" pos:column="9"/></name></decl>;<pos:position pos:line="2652" pos:column="10"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="2653" pos:column="3">VdbeCursor<pos:position pos:line="2653" pos:column="13"/></name> <modifier pos:line="2653" pos:column="14">*<pos:position pos:line="2653" pos:column="15"/></modifier></type><name pos:line="2653" pos:column="15">pC<pos:position pos:line="2653" pos:column="17"/></name></decl>;<pos:position pos:line="2653" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="2654" pos:column="3">UnpackedRecord<pos:position pos:line="2654" pos:column="17"/></name></type> <name pos:line="2654" pos:column="18">r<pos:position pos:line="2654" pos:column="19"/></name></decl>;<pos:position pos:line="2654" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="2655" pos:column="3">int<pos:position pos:line="2655" pos:column="6"/></name></type> <name pos:line="2655" pos:column="7">nField<pos:position pos:line="2655" pos:column="13"/></name></decl>;<pos:position pos:line="2655" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="2656" pos:column="3">i64<pos:position pos:line="2656" pos:column="6"/></name></type> <name pos:line="2656" pos:column="7">iKey<pos:position pos:line="2656" pos:column="11"/></name></decl>;<pos:position pos:line="2656" pos:column="12"/></decl_stmt>      <comment type="block" pos:line="2656" pos:column="18">/* The rowid we are to seek to */</comment>

  <expr_stmt><expr><name pos:line="2658" pos:column="3">i<pos:position pos:line="2658" pos:column="4"/></name> <operator pos:line="2658" pos:column="5">=<pos:position pos:line="2658" pos:column="6"/></operator> <name><name pos:line="2658" pos:column="7">pOp<pos:position pos:line="2658" pos:column="10"/></name><operator pos:line="2658" pos:column="10">-&gt;<pos:position pos:line="2658" pos:column="15"/></operator><name pos:line="2658" pos:column="12">p1<pos:position pos:line="2658" pos:column="14"/></name></name></expr>;<pos:position pos:line="2658" pos:column="15"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="2659" pos:column="3">assert<pos:position pos:line="2659" pos:column="9"/></name><argument_list pos:line="2659" pos:column="9">( <argument><expr><name pos:line="2659" pos:column="11">i<pos:position pos:line="2659" pos:column="12"/></name><operator pos:line="2659" pos:column="12">&gt;=<pos:position pos:line="2659" pos:column="17"/></operator><literal type="number" pos:line="2659" pos:column="14">0<pos:position pos:line="2659" pos:column="15"/></literal> <operator pos:line="2659" pos:column="16">&amp;&amp;<pos:position pos:line="2659" pos:column="26"/></operator> <name pos:line="2659" pos:column="19">i<pos:position pos:line="2659" pos:column="20"/></name><operator pos:line="2659" pos:column="20">&lt;<pos:position pos:line="2659" pos:column="24"/></operator><name><name pos:line="2659" pos:column="21">p<pos:position pos:line="2659" pos:column="22"/></name><operator pos:line="2659" pos:column="22">-&gt;<pos:position pos:line="2659" pos:column="27"/></operator><name pos:line="2659" pos:column="24">nCursor<pos:position pos:line="2659" pos:column="31"/></name></name></expr></argument> )<pos:position pos:line="2659" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="2659" pos:column="34"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="2660" pos:column="3">assert<pos:position pos:line="2660" pos:column="9"/></name><argument_list pos:line="2660" pos:column="9">( <argument><expr><name><name pos:line="2660" pos:column="11">pOp<pos:position pos:line="2660" pos:column="14"/></name><operator pos:line="2660" pos:column="14">-&gt;<pos:position pos:line="2660" pos:column="19"/></operator><name pos:line="2660" pos:column="16">p2<pos:position pos:line="2660" pos:column="18"/></name></name><operator pos:line="2660" pos:column="18">!=<pos:position pos:line="2660" pos:column="20"/></operator><literal type="number" pos:line="2660" pos:column="20">0<pos:position pos:line="2660" pos:column="21"/></literal></expr></argument> )<pos:position pos:line="2660" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="2660" pos:column="24"/></expr_stmt>
  <expr_stmt><expr><name pos:line="2661" pos:column="3">pC<pos:position pos:line="2661" pos:column="5"/></name> <operator pos:line="2661" pos:column="6">=<pos:position pos:line="2661" pos:column="7"/></operator> <name><name pos:line="2661" pos:column="8">p<pos:position pos:line="2661" pos:column="9"/></name><operator pos:line="2661" pos:column="9">-&gt;<pos:position pos:line="2661" pos:column="14"/></operator><name pos:line="2661" pos:column="11">apCsr<pos:position pos:line="2661" pos:column="16"/></name><index pos:line="2661" pos:column="16">[<expr><name pos:line="2661" pos:column="17">i<pos:position pos:line="2661" pos:column="18"/></name></expr>]<pos:position pos:line="2661" pos:column="19"/></index></name></expr>;<pos:position pos:line="2661" pos:column="20"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="2662" pos:column="3">assert<pos:position pos:line="2662" pos:column="9"/></name><argument_list pos:line="2662" pos:column="9">( <argument><expr><name pos:line="2662" pos:column="11">pC<pos:position pos:line="2662" pos:column="13"/></name><operator pos:line="2662" pos:column="13">!=<pos:position pos:line="2662" pos:column="15"/></operator><literal type="number" pos:line="2662" pos:column="15">0<pos:position pos:line="2662" pos:column="16"/></literal></expr></argument> )<pos:position pos:line="2662" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="2662" pos:column="19"/></expr_stmt>
  <if pos:line="2663" pos:column="3">if<condition pos:line="2663" pos:column="5">( <expr><name><name pos:line="2663" pos:column="7">pC<pos:position pos:line="2663" pos:column="9"/></name><operator pos:line="2663" pos:column="9">-&gt;<pos:position pos:line="2663" pos:column="14"/></operator><name pos:line="2663" pos:column="11">pCursor<pos:position pos:line="2663" pos:column="18"/></name></name><operator pos:line="2663" pos:column="18">!=<pos:position pos:line="2663" pos:column="20"/></operator><literal type="number" pos:line="2663" pos:column="20">0<pos:position pos:line="2663" pos:column="21"/></literal></expr> )<pos:position pos:line="2663" pos:column="23"/></condition><then><block pos:line="2663" pos:column="23">{
    <expr_stmt><expr><name pos:line="2664" pos:column="5">oc<pos:position pos:line="2664" pos:column="7"/></name> <operator pos:line="2664" pos:column="8">=<pos:position pos:line="2664" pos:column="9"/></operator> <name><name pos:line="2664" pos:column="10">pOp<pos:position pos:line="2664" pos:column="13"/></name><operator pos:line="2664" pos:column="13">-&gt;<pos:position pos:line="2664" pos:column="18"/></operator><name pos:line="2664" pos:column="15">opcode<pos:position pos:line="2664" pos:column="21"/></name></name></expr>;<pos:position pos:line="2664" pos:column="22"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="2665" pos:column="5">pC<pos:position pos:line="2665" pos:column="7"/></name><operator pos:line="2665" pos:column="7">-&gt;<pos:position pos:line="2665" pos:column="12"/></operator><name pos:line="2665" pos:column="9">nullRow<pos:position pos:line="2665" pos:column="16"/></name></name> <operator pos:line="2665" pos:column="17">=<pos:position pos:line="2665" pos:column="18"/></operator> <literal type="number" pos:line="2665" pos:column="19">0<pos:position pos:line="2665" pos:column="20"/></literal></expr>;<pos:position pos:line="2665" pos:column="21"/></expr_stmt>
    <if pos:line="2666" pos:column="5">if<condition pos:line="2666" pos:column="7">( <expr><name><name pos:line="2666" pos:column="9">pC<pos:position pos:line="2666" pos:column="11"/></name><operator pos:line="2666" pos:column="11">-&gt;<pos:position pos:line="2666" pos:column="16"/></operator><name pos:line="2666" pos:column="13">isTable<pos:position pos:line="2666" pos:column="20"/></name></name></expr> )<pos:position pos:line="2666" pos:column="22"/></condition><then><block pos:line="2666" pos:column="22">{
      <comment type="block" pos:line="2667" pos:column="7">/* The input value in P3 might be of any type: integer, real, string,
      ** blob, or NULL.  But it needs to be an integer before we can do
      ** the seek, so covert it. */</comment>
      <expr_stmt><expr><call><name pos:line="2670" pos:column="7">applyNumericAffinity<pos:position pos:line="2670" pos:column="27"/></name><argument_list pos:line="2670" pos:column="27">(<argument><expr><name pos:line="2670" pos:column="28">pIn3<pos:position pos:line="2670" pos:column="32"/></name></expr></argument>)<pos:position pos:line="2670" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="2670" pos:column="34"/></expr_stmt>
      <expr_stmt><expr><name pos:line="2671" pos:column="7">iKey<pos:position pos:line="2671" pos:column="11"/></name> <operator pos:line="2671" pos:column="12">=<pos:position pos:line="2671" pos:column="13"/></operator> <call><name pos:line="2671" pos:column="14">sqlite3VdbeIntValue<pos:position pos:line="2671" pos:column="33"/></name><argument_list pos:line="2671" pos:column="33">(<argument><expr><name pos:line="2671" pos:column="34">pIn3<pos:position pos:line="2671" pos:column="38"/></name></expr></argument>)<pos:position pos:line="2671" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="2671" pos:column="40"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="2672" pos:column="7">pC<pos:position pos:line="2672" pos:column="9"/></name><operator pos:line="2672" pos:column="9">-&gt;<pos:position pos:line="2672" pos:column="14"/></operator><name pos:line="2672" pos:column="11">rowidIsValid<pos:position pos:line="2672" pos:column="23"/></name></name> <operator pos:line="2672" pos:column="24">=<pos:position pos:line="2672" pos:column="25"/></operator> <literal type="number" pos:line="2672" pos:column="26">0<pos:position pos:line="2672" pos:column="27"/></literal></expr>;<pos:position pos:line="2672" pos:column="28"/></expr_stmt>

      <comment type="block" pos:line="2674" pos:column="7">/* If the P3 value could not be converted into an integer without
      ** loss of information, then special processing is required... */</comment>
      <if pos:line="2676" pos:column="7">if<condition pos:line="2676" pos:column="9">( <expr><operator pos:line="2676" pos:column="11">(<pos:position pos:line="2676" pos:column="12"/></operator><name><name pos:line="2676" pos:column="12">pIn3<pos:position pos:line="2676" pos:column="16"/></name><operator pos:line="2676" pos:column="16">-&gt;<pos:position pos:line="2676" pos:column="21"/></operator><name pos:line="2676" pos:column="18">flags<pos:position pos:line="2676" pos:column="23"/></name></name> <operator pos:line="2676" pos:column="24">&amp;<pos:position pos:line="2676" pos:column="29"/></operator> <name pos:line="2676" pos:column="26">MEM_Int<pos:position pos:line="2676" pos:column="33"/></name><operator pos:line="2676" pos:column="33">)<pos:position pos:line="2676" pos:column="34"/></operator><operator pos:line="2676" pos:column="34">==<pos:position pos:line="2676" pos:column="36"/></operator><literal type="number" pos:line="2676" pos:column="36">0<pos:position pos:line="2676" pos:column="37"/></literal></expr> )<pos:position pos:line="2676" pos:column="39"/></condition><then><block pos:line="2676" pos:column="39">{
        <if pos:line="2677" pos:column="9">if<condition pos:line="2677" pos:column="11">( <expr><operator pos:line="2677" pos:column="13">(<pos:position pos:line="2677" pos:column="14"/></operator><name><name pos:line="2677" pos:column="14">pIn3<pos:position pos:line="2677" pos:column="18"/></name><operator pos:line="2677" pos:column="18">-&gt;<pos:position pos:line="2677" pos:column="23"/></operator><name pos:line="2677" pos:column="20">flags<pos:position pos:line="2677" pos:column="25"/></name></name> <operator pos:line="2677" pos:column="26">&amp;<pos:position pos:line="2677" pos:column="31"/></operator> <name pos:line="2677" pos:column="28">MEM_Real<pos:position pos:line="2677" pos:column="36"/></name><operator pos:line="2677" pos:column="36">)<pos:position pos:line="2677" pos:column="37"/></operator><operator pos:line="2677" pos:column="37">==<pos:position pos:line="2677" pos:column="39"/></operator><literal type="number" pos:line="2677" pos:column="39">0<pos:position pos:line="2677" pos:column="40"/></literal></expr> )<pos:position pos:line="2677" pos:column="42"/></condition><then><block pos:line="2677" pos:column="42">{
          <comment type="block" pos:line="2678" pos:column="11">/* If the P3 value cannot be converted into any kind of a number,
          ** then the seek is not possible, so jump to P2 */</comment>
          <expr_stmt><expr><name pos:line="2680" pos:column="11">pc<pos:position pos:line="2680" pos:column="13"/></name> <operator pos:line="2680" pos:column="14">=<pos:position pos:line="2680" pos:column="15"/></operator> <name><name pos:line="2680" pos:column="16">pOp<pos:position pos:line="2680" pos:column="19"/></name><operator pos:line="2680" pos:column="19">-&gt;<pos:position pos:line="2680" pos:column="24"/></operator><name pos:line="2680" pos:column="21">p2<pos:position pos:line="2680" pos:column="23"/></name></name> <operator pos:line="2680" pos:column="24">-<pos:position pos:line="2680" pos:column="25"/></operator> <literal type="number" pos:line="2680" pos:column="26">1<pos:position pos:line="2680" pos:column="27"/></literal></expr>;<pos:position pos:line="2680" pos:column="28"/></expr_stmt>
          <break pos:line="2681" pos:column="11">break;<pos:position pos:line="2681" pos:column="17"/></break>
        }<pos:position pos:line="2682" pos:column="10"/></block></then></if>
        <comment type="block" pos:line="2683" pos:column="9">/* If we reach this point, then the P3 value must be a floating
        ** point number. */</comment>
        <expr_stmt><expr><call><name pos:line="2685" pos:column="9">assert<pos:position pos:line="2685" pos:column="15"/></name><argument_list pos:line="2685" pos:column="15">( <argument><expr><operator pos:line="2685" pos:column="17">(<pos:position pos:line="2685" pos:column="18"/></operator><name><name pos:line="2685" pos:column="18">pIn3<pos:position pos:line="2685" pos:column="22"/></name><operator pos:line="2685" pos:column="22">-&gt;<pos:position pos:line="2685" pos:column="27"/></operator><name pos:line="2685" pos:column="24">flags<pos:position pos:line="2685" pos:column="29"/></name></name> <operator pos:line="2685" pos:column="30">&amp;<pos:position pos:line="2685" pos:column="35"/></operator> <name pos:line="2685" pos:column="32">MEM_Real<pos:position pos:line="2685" pos:column="40"/></name><operator pos:line="2685" pos:column="40">)<pos:position pos:line="2685" pos:column="41"/></operator><operator pos:line="2685" pos:column="41">!=<pos:position pos:line="2685" pos:column="43"/></operator><literal type="number" pos:line="2685" pos:column="43">0<pos:position pos:line="2685" pos:column="44"/></literal></expr></argument> )<pos:position pos:line="2685" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="2685" pos:column="47"/></expr_stmt>

        <if pos:line="2687" pos:column="9">if<condition pos:line="2687" pos:column="11">( <expr><name pos:line="2687" pos:column="13">iKey<pos:position pos:line="2687" pos:column="17"/></name><operator pos:line="2687" pos:column="17">==<pos:position pos:line="2687" pos:column="19"/></operator><name pos:line="2687" pos:column="19">SMALLEST_INT64<pos:position pos:line="2687" pos:column="33"/></name> <operator pos:line="2687" pos:column="34">&amp;&amp;<pos:position pos:line="2687" pos:column="44"/></operator> <operator pos:line="2687" pos:column="37">(<pos:position pos:line="2687" pos:column="38"/></operator><name><name pos:line="2687" pos:column="38">pIn3<pos:position pos:line="2687" pos:column="42"/></name><operator pos:line="2687" pos:column="42">-&gt;<pos:position pos:line="2687" pos:column="47"/></operator><name><name pos:line="2687" pos:column="44">r<pos:position pos:line="2687" pos:column="45"/></name><argument_list type="generic" pos:line="2687" pos:column="45">&lt;<argument><expr><operator pos:line="2687" pos:column="46">(<pos:position pos:line="2687" pos:column="47"/></operator><name pos:line="2687" pos:column="47">double<pos:position pos:line="2687" pos:column="53"/></name><operator pos:line="2687" pos:column="53">)<pos:position pos:line="2687" pos:column="54"/></operator><name pos:line="2687" pos:column="54">iKey<pos:position pos:line="2687" pos:column="58"/></name> <operator pos:line="2687" pos:column="59">||<pos:position pos:line="2687" pos:column="61"/></operator> <name><name pos:line="2687" pos:column="62">pIn3<pos:position pos:line="2687" pos:column="66"/></name><operator pos:line="2687" pos:column="66">-&gt;<pos:position pos:line="2687" pos:column="71"/></operator><name pos:line="2687" pos:column="68">r<pos:position pos:line="2687" pos:column="69"/></name></name></expr></argument>&gt;<pos:position pos:line="2687" pos:column="73"/></argument_list></name></name><literal type="number" pos:line="2687" pos:column="70">0<pos:position pos:line="2687" pos:column="71"/></literal><operator pos:line="2687" pos:column="71">)<pos:position pos:line="2687" pos:column="72"/></operator></expr> )<pos:position pos:line="2687" pos:column="74"/></condition><then><block pos:line="2687" pos:column="74">{
          <comment type="block" pos:line="2688" pos:column="11">/* The P3 value is to large in magnitude to be expressed as an
          ** integer. */</comment>
          <expr_stmt><expr><name pos:line="2690" pos:column="11">res<pos:position pos:line="2690" pos:column="14"/></name> <operator pos:line="2690" pos:column="15">=<pos:position pos:line="2690" pos:column="16"/></operator> <literal type="number" pos:line="2690" pos:column="17">1<pos:position pos:line="2690" pos:column="18"/></literal></expr>;<pos:position pos:line="2690" pos:column="19"/></expr_stmt>
          <if pos:line="2691" pos:column="11">if<condition pos:line="2691" pos:column="13">( <expr><name><name pos:line="2691" pos:column="15">pIn3<pos:position pos:line="2691" pos:column="19"/></name><operator pos:line="2691" pos:column="19">-&gt;<pos:position pos:line="2691" pos:column="24"/></operator><name pos:line="2691" pos:column="21">r<pos:position pos:line="2691" pos:column="22"/></name></name><operator pos:line="2691" pos:column="22">&lt;<pos:position pos:line="2691" pos:column="26"/></operator><literal type="number" pos:line="2691" pos:column="23">0<pos:position pos:line="2691" pos:column="24"/></literal></expr> )<pos:position pos:line="2691" pos:column="26"/></condition><then><block pos:line="2691" pos:column="26">{
            <if pos:line="2692" pos:column="13">if<condition pos:line="2692" pos:column="15">( <expr><name pos:line="2692" pos:column="17">oc<pos:position pos:line="2692" pos:column="19"/></name><operator pos:line="2692" pos:column="19">==<pos:position pos:line="2692" pos:column="21"/></operator><name pos:line="2692" pos:column="21">OP_SeekGt<pos:position pos:line="2692" pos:column="30"/></name> <operator pos:line="2692" pos:column="31">||<pos:position pos:line="2692" pos:column="33"/></operator> <name pos:line="2692" pos:column="34">oc<pos:position pos:line="2692" pos:column="36"/></name><operator pos:line="2692" pos:column="36">==<pos:position pos:line="2692" pos:column="38"/></operator><name pos:line="2692" pos:column="38">OP_SeekGe<pos:position pos:line="2692" pos:column="47"/></name></expr> )<pos:position pos:line="2692" pos:column="49"/></condition><then><block pos:line="2692" pos:column="49">{
              <expr_stmt><expr><name pos:line="2693" pos:column="15">rc<pos:position pos:line="2693" pos:column="17"/></name> <operator pos:line="2693" pos:column="18">=<pos:position pos:line="2693" pos:column="19"/></operator> <call><name pos:line="2693" pos:column="20">sqlite3BtreeFirst<pos:position pos:line="2693" pos:column="37"/></name><argument_list pos:line="2693" pos:column="37">(<argument><expr><name><name pos:line="2693" pos:column="38">pC<pos:position pos:line="2693" pos:column="40"/></name><operator pos:line="2693" pos:column="40">-&gt;<pos:position pos:line="2693" pos:column="45"/></operator><name pos:line="2693" pos:column="42">pCursor<pos:position pos:line="2693" pos:column="49"/></name></name></expr></argument>, <argument><expr><operator pos:line="2693" pos:column="51">&amp;<pos:position pos:line="2693" pos:column="56"/></operator><name pos:line="2693" pos:column="52">res<pos:position pos:line="2693" pos:column="55"/></name></expr></argument>)<pos:position pos:line="2693" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="2693" pos:column="57"/></expr_stmt>
              <if pos:line="2694" pos:column="15">if<condition pos:line="2694" pos:column="17">( <expr><name pos:line="2694" pos:column="19">rc<pos:position pos:line="2694" pos:column="21"/></name><operator pos:line="2694" pos:column="21">!=<pos:position pos:line="2694" pos:column="23"/></operator><name pos:line="2694" pos:column="23">SQLITE_OK<pos:position pos:line="2694" pos:column="32"/></name></expr> )<pos:position pos:line="2694" pos:column="34"/></condition><then pos:line="2694" pos:column="34"> <block type="pseudo"><goto pos:line="2694" pos:column="35">goto <name pos:line="2694" pos:column="40">abort_due_to_error<pos:position pos:line="2694" pos:column="58"/></name>;<pos:position pos:line="2694" pos:column="59"/></goto></block></then></if>
            }<pos:position pos:line="2695" pos:column="14"/></block></then></if>
          }<pos:position pos:line="2696" pos:column="12"/></block></then><else pos:line="2696" pos:column="12">else<block pos:line="2696" pos:column="16">{
            <if pos:line="2697" pos:column="13">if<condition pos:line="2697" pos:column="15">( <expr><name pos:line="2697" pos:column="17">oc<pos:position pos:line="2697" pos:column="19"/></name><operator pos:line="2697" pos:column="19">==<pos:position pos:line="2697" pos:column="21"/></operator><name pos:line="2697" pos:column="21">OP_SeekLt<pos:position pos:line="2697" pos:column="30"/></name> <operator pos:line="2697" pos:column="31">||<pos:position pos:line="2697" pos:column="33"/></operator> <name pos:line="2697" pos:column="34">oc<pos:position pos:line="2697" pos:column="36"/></name><operator pos:line="2697" pos:column="36">==<pos:position pos:line="2697" pos:column="38"/></operator><name pos:line="2697" pos:column="38">OP_SeekLe<pos:position pos:line="2697" pos:column="47"/></name></expr> )<pos:position pos:line="2697" pos:column="49"/></condition><then><block pos:line="2697" pos:column="49">{
              <expr_stmt><expr><name pos:line="2698" pos:column="15">rc<pos:position pos:line="2698" pos:column="17"/></name> <operator pos:line="2698" pos:column="18">=<pos:position pos:line="2698" pos:column="19"/></operator> <call><name pos:line="2698" pos:column="20">sqlite3BtreeLast<pos:position pos:line="2698" pos:column="36"/></name><argument_list pos:line="2698" pos:column="36">(<argument><expr><name><name pos:line="2698" pos:column="37">pC<pos:position pos:line="2698" pos:column="39"/></name><operator pos:line="2698" pos:column="39">-&gt;<pos:position pos:line="2698" pos:column="44"/></operator><name pos:line="2698" pos:column="41">pCursor<pos:position pos:line="2698" pos:column="48"/></name></name></expr></argument>, <argument><expr><operator pos:line="2698" pos:column="50">&amp;<pos:position pos:line="2698" pos:column="55"/></operator><name pos:line="2698" pos:column="51">res<pos:position pos:line="2698" pos:column="54"/></name></expr></argument>)<pos:position pos:line="2698" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="2698" pos:column="56"/></expr_stmt>
              <if pos:line="2699" pos:column="15">if<condition pos:line="2699" pos:column="17">( <expr><name pos:line="2699" pos:column="19">rc<pos:position pos:line="2699" pos:column="21"/></name><operator pos:line="2699" pos:column="21">!=<pos:position pos:line="2699" pos:column="23"/></operator><name pos:line="2699" pos:column="23">SQLITE_OK<pos:position pos:line="2699" pos:column="32"/></name></expr> )<pos:position pos:line="2699" pos:column="34"/></condition><then pos:line="2699" pos:column="34"> <block type="pseudo"><goto pos:line="2699" pos:column="35">goto <name pos:line="2699" pos:column="40">abort_due_to_error<pos:position pos:line="2699" pos:column="58"/></name>;<pos:position pos:line="2699" pos:column="59"/></goto></block></then></if>
            }<pos:position pos:line="2700" pos:column="14"/></block></then></if>
          }<pos:position pos:line="2701" pos:column="12"/></block></else></if>
          <if pos:line="2702" pos:column="11">if<condition pos:line="2702" pos:column="13">( <expr><name pos:line="2702" pos:column="15">res<pos:position pos:line="2702" pos:column="18"/></name></expr> )<pos:position pos:line="2702" pos:column="20"/></condition><then><block pos:line="2702" pos:column="20">{
            <expr_stmt><expr><name pos:line="2703" pos:column="13">pc<pos:position pos:line="2703" pos:column="15"/></name> <operator pos:line="2703" pos:column="16">=<pos:position pos:line="2703" pos:column="17"/></operator> <name><name pos:line="2703" pos:column="18">pOp<pos:position pos:line="2703" pos:column="21"/></name><operator pos:line="2703" pos:column="21">-&gt;<pos:position pos:line="2703" pos:column="26"/></operator><name pos:line="2703" pos:column="23">p2<pos:position pos:line="2703" pos:column="25"/></name></name> <operator pos:line="2703" pos:column="26">-<pos:position pos:line="2703" pos:column="27"/></operator> <literal type="number" pos:line="2703" pos:column="28">1<pos:position pos:line="2703" pos:column="29"/></literal></expr>;<pos:position pos:line="2703" pos:column="30"/></expr_stmt>
          }<pos:position pos:line="2704" pos:column="12"/></block></then></if>
          <break pos:line="2705" pos:column="11">break;<pos:position pos:line="2705" pos:column="17"/></break>
        }<pos:position pos:line="2706" pos:column="10"/></block></then><elseif pos:line="2706" pos:column="10">else <if pos:line="2706" pos:column="15">if<condition pos:line="2706" pos:column="17">( <expr><name pos:line="2706" pos:column="19">oc<pos:position pos:line="2706" pos:column="21"/></name><operator pos:line="2706" pos:column="21">==<pos:position pos:line="2706" pos:column="23"/></operator><name pos:line="2706" pos:column="23">OP_SeekLt<pos:position pos:line="2706" pos:column="32"/></name> <operator pos:line="2706" pos:column="33">||<pos:position pos:line="2706" pos:column="35"/></operator> <name pos:line="2706" pos:column="36">oc<pos:position pos:line="2706" pos:column="38"/></name><operator pos:line="2706" pos:column="38">==<pos:position pos:line="2706" pos:column="40"/></operator><name pos:line="2706" pos:column="40">OP_SeekGe<pos:position pos:line="2706" pos:column="49"/></name></expr> )<pos:position pos:line="2706" pos:column="51"/></condition><then><block pos:line="2706" pos:column="51">{
          <comment type="block" pos:line="2707" pos:column="11">/* Use the ceiling() function to convert real-&gt;int */</comment>
          <if pos:line="2708" pos:column="11">if<condition pos:line="2708" pos:column="13">( <expr><name><name pos:line="2708" pos:column="15">pIn3<pos:position pos:line="2708" pos:column="19"/></name><operator pos:line="2708" pos:column="19">-&gt;<pos:position pos:line="2708" pos:column="24"/></operator><name pos:line="2708" pos:column="21">r<pos:position pos:line="2708" pos:column="22"/></name></name> <operator pos:line="2708" pos:column="23">&gt;<pos:position pos:line="2708" pos:column="27"/></operator> <operator pos:line="2708" pos:column="25">(<pos:position pos:line="2708" pos:column="26"/></operator><name pos:line="2708" pos:column="26">double<pos:position pos:line="2708" pos:column="32"/></name><operator pos:line="2708" pos:column="32">)<pos:position pos:line="2708" pos:column="33"/></operator><name pos:line="2708" pos:column="33">iKey<pos:position pos:line="2708" pos:column="37"/></name></expr> )<pos:position pos:line="2708" pos:column="39"/></condition><then pos:line="2708" pos:column="39"> <block type="pseudo"><expr_stmt><expr><name pos:line="2708" pos:column="40">iKey<pos:position pos:line="2708" pos:column="44"/></name><operator pos:line="2708" pos:column="44">++<pos:position pos:line="2708" pos:column="46"/></operator></expr>;<pos:position pos:line="2708" pos:column="47"/></expr_stmt></block></then></if>
        }<pos:position pos:line="2709" pos:column="10"/></block></then></if></elseif><else pos:line="2709" pos:column="10">else<block pos:line="2709" pos:column="14">{
          <comment type="block" pos:line="2710" pos:column="11">/* Use the floor() function to convert real-&gt;int */</comment>
          <expr_stmt><expr><call><name pos:line="2711" pos:column="11">assert<pos:position pos:line="2711" pos:column="17"/></name><argument_list pos:line="2711" pos:column="17">( <argument><expr><name pos:line="2711" pos:column="19">oc<pos:position pos:line="2711" pos:column="21"/></name><operator pos:line="2711" pos:column="21">==<pos:position pos:line="2711" pos:column="23"/></operator><name pos:line="2711" pos:column="23">OP_SeekLe<pos:position pos:line="2711" pos:column="32"/></name> <operator pos:line="2711" pos:column="33">||<pos:position pos:line="2711" pos:column="35"/></operator> <name pos:line="2711" pos:column="36">oc<pos:position pos:line="2711" pos:column="38"/></name><operator pos:line="2711" pos:column="38">==<pos:position pos:line="2711" pos:column="40"/></operator><name pos:line="2711" pos:column="40">OP_SeekGt<pos:position pos:line="2711" pos:column="49"/></name></expr></argument> )<pos:position pos:line="2711" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="2711" pos:column="52"/></expr_stmt>
          <if pos:line="2712" pos:column="11">if<condition pos:line="2712" pos:column="13">( <expr><name><name pos:line="2712" pos:column="15">pIn3<pos:position pos:line="2712" pos:column="19"/></name><operator pos:line="2712" pos:column="19">-&gt;<pos:position pos:line="2712" pos:column="24"/></operator><name pos:line="2712" pos:column="21">r<pos:position pos:line="2712" pos:column="22"/></name></name> <operator pos:line="2712" pos:column="23">&lt;<pos:position pos:line="2712" pos:column="27"/></operator> <operator pos:line="2712" pos:column="25">(<pos:position pos:line="2712" pos:column="26"/></operator><name pos:line="2712" pos:column="26">double<pos:position pos:line="2712" pos:column="32"/></name><operator pos:line="2712" pos:column="32">)<pos:position pos:line="2712" pos:column="33"/></operator><name pos:line="2712" pos:column="33">iKey<pos:position pos:line="2712" pos:column="37"/></name></expr> )<pos:position pos:line="2712" pos:column="39"/></condition><then pos:line="2712" pos:column="39"> <block type="pseudo"><expr_stmt><expr><name pos:line="2712" pos:column="40">iKey<pos:position pos:line="2712" pos:column="44"/></name><operator pos:line="2712" pos:column="44">--<pos:position pos:line="2712" pos:column="46"/></operator></expr>;<pos:position pos:line="2712" pos:column="47"/></expr_stmt></block></then></if>
        }<pos:position pos:line="2713" pos:column="10"/></block></else></if>
      }<pos:position pos:line="2714" pos:column="8"/></block></then></if> 
      <expr_stmt><expr><name pos:line="2715" pos:column="7">rc<pos:position pos:line="2715" pos:column="9"/></name> <operator pos:line="2715" pos:column="10">=<pos:position pos:line="2715" pos:column="11"/></operator> <call><name pos:line="2715" pos:column="12">sqlite3BtreeMovetoUnpacked<pos:position pos:line="2715" pos:column="38"/></name><argument_list pos:line="2715" pos:column="38">(<argument><expr><name><name pos:line="2715" pos:column="39">pC<pos:position pos:line="2715" pos:column="41"/></name><operator pos:line="2715" pos:column="41">-&gt;<pos:position pos:line="2715" pos:column="46"/></operator><name pos:line="2715" pos:column="43">pCursor<pos:position pos:line="2715" pos:column="50"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="2715" pos:column="52">0<pos:position pos:line="2715" pos:column="53"/></literal></expr></argument>, <argument><expr><operator pos:line="2715" pos:column="55">(<pos:position pos:line="2715" pos:column="56"/></operator><name pos:line="2715" pos:column="56">u64<pos:position pos:line="2715" pos:column="59"/></name><operator pos:line="2715" pos:column="59">)<pos:position pos:line="2715" pos:column="60"/></operator><name pos:line="2715" pos:column="60">iKey<pos:position pos:line="2715" pos:column="64"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="2715" pos:column="66">0<pos:position pos:line="2715" pos:column="67"/></literal></expr></argument>, <argument><expr><operator pos:line="2715" pos:column="69">&amp;<pos:position pos:line="2715" pos:column="74"/></operator><name pos:line="2715" pos:column="70">res<pos:position pos:line="2715" pos:column="73"/></name></expr></argument>)<pos:position pos:line="2715" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="2715" pos:column="75"/></expr_stmt>
      <if pos:line="2716" pos:column="7">if<condition pos:line="2716" pos:column="9">( <expr><name pos:line="2716" pos:column="11">rc<pos:position pos:line="2716" pos:column="13"/></name><operator pos:line="2716" pos:column="13">!=<pos:position pos:line="2716" pos:column="15"/></operator><name pos:line="2716" pos:column="15">SQLITE_OK<pos:position pos:line="2716" pos:column="24"/></name></expr> )<pos:position pos:line="2716" pos:column="26"/></condition><then><block pos:line="2716" pos:column="26">{
        <goto pos:line="2717" pos:column="9">goto <name pos:line="2717" pos:column="14">abort_due_to_error<pos:position pos:line="2717" pos:column="32"/></name>;<pos:position pos:line="2717" pos:column="33"/></goto>
      }<pos:position pos:line="2718" pos:column="8"/></block></then></if>
      <if pos:line="2719" pos:column="7">if<condition pos:line="2719" pos:column="9">( <expr><name pos:line="2719" pos:column="11">res<pos:position pos:line="2719" pos:column="14"/></name><operator pos:line="2719" pos:column="14">==<pos:position pos:line="2719" pos:column="16"/></operator><literal type="number" pos:line="2719" pos:column="16">0<pos:position pos:line="2719" pos:column="17"/></literal></expr> )<pos:position pos:line="2719" pos:column="19"/></condition><then><block pos:line="2719" pos:column="19">{
        <expr_stmt><expr><name><name pos:line="2720" pos:column="9">pC<pos:position pos:line="2720" pos:column="11"/></name><operator pos:line="2720" pos:column="11">-&gt;<pos:position pos:line="2720" pos:column="16"/></operator><name pos:line="2720" pos:column="13">rowidIsValid<pos:position pos:line="2720" pos:column="25"/></name></name> <operator pos:line="2720" pos:column="26">=<pos:position pos:line="2720" pos:column="27"/></operator> <literal type="number" pos:line="2720" pos:column="28">1<pos:position pos:line="2720" pos:column="29"/></literal></expr>;<pos:position pos:line="2720" pos:column="30"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="2721" pos:column="9">pC<pos:position pos:line="2721" pos:column="11"/></name><operator pos:line="2721" pos:column="11">-&gt;<pos:position pos:line="2721" pos:column="16"/></operator><name pos:line="2721" pos:column="13">lastRowid<pos:position pos:line="2721" pos:column="22"/></name></name> <operator pos:line="2721" pos:column="23">=<pos:position pos:line="2721" pos:column="24"/></operator> <name pos:line="2721" pos:column="25">iKey<pos:position pos:line="2721" pos:column="29"/></name></expr>;<pos:position pos:line="2721" pos:column="30"/></expr_stmt>
      }<pos:position pos:line="2722" pos:column="8"/></block></then></if>
    }<pos:position pos:line="2723" pos:column="6"/></block></then><else pos:line="2723" pos:column="6">else<block pos:line="2723" pos:column="10">{
      <expr_stmt><expr><name pos:line="2724" pos:column="7">nField<pos:position pos:line="2724" pos:column="13"/></name> <operator pos:line="2724" pos:column="14">=<pos:position pos:line="2724" pos:column="15"/></operator> <name><name pos:line="2724" pos:column="16">pOp<pos:position pos:line="2724" pos:column="19"/></name><operator pos:line="2724" pos:column="19">-&gt;<pos:position pos:line="2724" pos:column="24"/></operator><name pos:line="2724" pos:column="21">p4<pos:position pos:line="2724" pos:column="23"/></name><operator pos:line="2724" pos:column="23">.<pos:position pos:line="2724" pos:column="24"/></operator><name pos:line="2724" pos:column="24">i<pos:position pos:line="2724" pos:column="25"/></name></name></expr>;<pos:position pos:line="2724" pos:column="26"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="2725" pos:column="7">assert<pos:position pos:line="2725" pos:column="13"/></name><argument_list pos:line="2725" pos:column="13">( <argument><expr><name><name pos:line="2725" pos:column="15">pOp<pos:position pos:line="2725" pos:column="18"/></name><operator pos:line="2725" pos:column="18">-&gt;<pos:position pos:line="2725" pos:column="23"/></operator><name pos:line="2725" pos:column="20">p4type<pos:position pos:line="2725" pos:column="26"/></name></name><operator pos:line="2725" pos:column="26">==<pos:position pos:line="2725" pos:column="28"/></operator><name pos:line="2725" pos:column="28">P4_INT32<pos:position pos:line="2725" pos:column="36"/></name></expr></argument> )<pos:position pos:line="2725" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="2725" pos:column="39"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="2726" pos:column="7">assert<pos:position pos:line="2726" pos:column="13"/></name><argument_list pos:line="2726" pos:column="13">( <argument><expr><name pos:line="2726" pos:column="15">nField<pos:position pos:line="2726" pos:column="21"/></name><operator pos:line="2726" pos:column="21">&gt;<pos:position pos:line="2726" pos:column="25"/></operator><literal type="number" pos:line="2726" pos:column="22">0<pos:position pos:line="2726" pos:column="23"/></literal></expr></argument> )<pos:position pos:line="2726" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="2726" pos:column="26"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="2727" pos:column="7">r<pos:position pos:line="2727" pos:column="8"/></name><operator pos:line="2727" pos:column="8">.<pos:position pos:line="2727" pos:column="9"/></operator><name pos:line="2727" pos:column="9">pKeyInfo<pos:position pos:line="2727" pos:column="17"/></name></name> <operator pos:line="2727" pos:column="18">=<pos:position pos:line="2727" pos:column="19"/></operator> <name><name pos:line="2727" pos:column="20">pC<pos:position pos:line="2727" pos:column="22"/></name><operator pos:line="2727" pos:column="22">-&gt;<pos:position pos:line="2727" pos:column="27"/></operator><name pos:line="2727" pos:column="24">pKeyInfo<pos:position pos:line="2727" pos:column="32"/></name></name></expr>;<pos:position pos:line="2727" pos:column="33"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="2728" pos:column="7">r<pos:position pos:line="2728" pos:column="8"/></name><operator pos:line="2728" pos:column="8">.<pos:position pos:line="2728" pos:column="9"/></operator><name pos:line="2728" pos:column="9">nField<pos:position pos:line="2728" pos:column="15"/></name></name> <operator pos:line="2728" pos:column="16">=<pos:position pos:line="2728" pos:column="17"/></operator> <operator pos:line="2728" pos:column="18">(<pos:position pos:line="2728" pos:column="19"/></operator><name pos:line="2728" pos:column="19">u16<pos:position pos:line="2728" pos:column="22"/></name><operator pos:line="2728" pos:column="22">)<pos:position pos:line="2728" pos:column="23"/></operator><name pos:line="2728" pos:column="23">nField<pos:position pos:line="2728" pos:column="29"/></name></expr>;<pos:position pos:line="2728" pos:column="30"/></expr_stmt>
      <if pos:line="2729" pos:column="7">if<condition pos:line="2729" pos:column="9">( <expr><name pos:line="2729" pos:column="11">oc<pos:position pos:line="2729" pos:column="13"/></name><operator pos:line="2729" pos:column="13">==<pos:position pos:line="2729" pos:column="15"/></operator><name pos:line="2729" pos:column="15">OP_SeekGt<pos:position pos:line="2729" pos:column="24"/></name> <operator pos:line="2729" pos:column="25">||<pos:position pos:line="2729" pos:column="27"/></operator> <name pos:line="2729" pos:column="28">oc<pos:position pos:line="2729" pos:column="30"/></name><operator pos:line="2729" pos:column="30">==<pos:position pos:line="2729" pos:column="32"/></operator><name pos:line="2729" pos:column="32">OP_SeekLe<pos:position pos:line="2729" pos:column="41"/></name></expr> )<pos:position pos:line="2729" pos:column="43"/></condition><then><block pos:line="2729" pos:column="43">{
        <expr_stmt><expr><name><name pos:line="2730" pos:column="9">r<pos:position pos:line="2730" pos:column="10"/></name><operator pos:line="2730" pos:column="10">.<pos:position pos:line="2730" pos:column="11"/></operator><name pos:line="2730" pos:column="11">flags<pos:position pos:line="2730" pos:column="16"/></name></name> <operator pos:line="2730" pos:column="17">=<pos:position pos:line="2730" pos:column="18"/></operator> <name pos:line="2730" pos:column="19">UNPACKED_INCRKEY<pos:position pos:line="2730" pos:column="35"/></name></expr>;<pos:position pos:line="2730" pos:column="36"/></expr_stmt>
      }<pos:position pos:line="2731" pos:column="8"/></block></then><else pos:line="2731" pos:column="8">else<block pos:line="2731" pos:column="12">{
        <expr_stmt><expr><name><name pos:line="2732" pos:column="9">r<pos:position pos:line="2732" pos:column="10"/></name><operator pos:line="2732" pos:column="10">.<pos:position pos:line="2732" pos:column="11"/></operator><name pos:line="2732" pos:column="11">flags<pos:position pos:line="2732" pos:column="16"/></name></name> <operator pos:line="2732" pos:column="17">=<pos:position pos:line="2732" pos:column="18"/></operator> <literal type="number" pos:line="2732" pos:column="19">0<pos:position pos:line="2732" pos:column="20"/></literal></expr>;<pos:position pos:line="2732" pos:column="21"/></expr_stmt>
      }<pos:position pos:line="2733" pos:column="8"/></block></else></if>
      <expr_stmt><expr><name><name pos:line="2734" pos:column="7">r<pos:position pos:line="2734" pos:column="8"/></name><operator pos:line="2734" pos:column="8">.<pos:position pos:line="2734" pos:column="9"/></operator><name pos:line="2734" pos:column="9">aMem<pos:position pos:line="2734" pos:column="13"/></name></name> <operator pos:line="2734" pos:column="14">=<pos:position pos:line="2734" pos:column="15"/></operator> <operator pos:line="2734" pos:column="16">&amp;<pos:position pos:line="2734" pos:column="21"/></operator><name><name pos:line="2734" pos:column="17">p<pos:position pos:line="2734" pos:column="18"/></name><operator pos:line="2734" pos:column="18">-&gt;<pos:position pos:line="2734" pos:column="23"/></operator><name pos:line="2734" pos:column="20">aMem<pos:position pos:line="2734" pos:column="24"/></name><index pos:line="2734" pos:column="24">[<expr><name><name pos:line="2734" pos:column="25">pOp<pos:position pos:line="2734" pos:column="28"/></name><operator pos:line="2734" pos:column="28">-&gt;<pos:position pos:line="2734" pos:column="33"/></operator><name pos:line="2734" pos:column="30">p3<pos:position pos:line="2734" pos:column="32"/></name></name></expr>]<pos:position pos:line="2734" pos:column="33"/></index></name></expr>;<pos:position pos:line="2734" pos:column="34"/></expr_stmt>
      <expr_stmt><expr><name pos:line="2735" pos:column="7">rc<pos:position pos:line="2735" pos:column="9"/></name> <operator pos:line="2735" pos:column="10">=<pos:position pos:line="2735" pos:column="11"/></operator> <call><name pos:line="2735" pos:column="12">sqlite3BtreeMovetoUnpacked<pos:position pos:line="2735" pos:column="38"/></name><argument_list pos:line="2735" pos:column="38">(<argument><expr><name><name pos:line="2735" pos:column="39">pC<pos:position pos:line="2735" pos:column="41"/></name><operator pos:line="2735" pos:column="41">-&gt;<pos:position pos:line="2735" pos:column="46"/></operator><name pos:line="2735" pos:column="43">pCursor<pos:position pos:line="2735" pos:column="50"/></name></name></expr></argument>, <argument><expr><operator pos:line="2735" pos:column="52">&amp;<pos:position pos:line="2735" pos:column="57"/></operator><name pos:line="2735" pos:column="53">r<pos:position pos:line="2735" pos:column="54"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="2735" pos:column="56">0<pos:position pos:line="2735" pos:column="57"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="2735" pos:column="59">0<pos:position pos:line="2735" pos:column="60"/></literal></expr></argument>, <argument><expr><operator pos:line="2735" pos:column="62">&amp;<pos:position pos:line="2735" pos:column="67"/></operator><name pos:line="2735" pos:column="63">res<pos:position pos:line="2735" pos:column="66"/></name></expr></argument>)<pos:position pos:line="2735" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="2735" pos:column="68"/></expr_stmt>
      <if pos:line="2736" pos:column="7">if<condition pos:line="2736" pos:column="9">( <expr><name pos:line="2736" pos:column="11">rc<pos:position pos:line="2736" pos:column="13"/></name><operator pos:line="2736" pos:column="13">!=<pos:position pos:line="2736" pos:column="15"/></operator><name pos:line="2736" pos:column="15">SQLITE_OK<pos:position pos:line="2736" pos:column="24"/></name></expr> )<pos:position pos:line="2736" pos:column="26"/></condition><then><block pos:line="2736" pos:column="26">{
        <goto pos:line="2737" pos:column="9">goto <name pos:line="2737" pos:column="14">abort_due_to_error<pos:position pos:line="2737" pos:column="32"/></name>;<pos:position pos:line="2737" pos:column="33"/></goto>
      }<pos:position pos:line="2738" pos:column="8"/></block></then></if>
      <expr_stmt><expr><name><name pos:line="2739" pos:column="7">pC<pos:position pos:line="2739" pos:column="9"/></name><operator pos:line="2739" pos:column="9">-&gt;<pos:position pos:line="2739" pos:column="14"/></operator><name pos:line="2739" pos:column="11">rowidIsValid<pos:position pos:line="2739" pos:column="23"/></name></name> <operator pos:line="2739" pos:column="24">=<pos:position pos:line="2739" pos:column="25"/></operator> <literal type="number" pos:line="2739" pos:column="26">0<pos:position pos:line="2739" pos:column="27"/></literal></expr>;<pos:position pos:line="2739" pos:column="28"/></expr_stmt>
    }<pos:position pos:line="2740" pos:column="6"/></block></else></if>
    <expr_stmt><expr><name><name pos:line="2741" pos:column="5">pC<pos:position pos:line="2741" pos:column="7"/></name><operator pos:line="2741" pos:column="7">-&gt;<pos:position pos:line="2741" pos:column="12"/></operator><name pos:line="2741" pos:column="9">deferredMoveto<pos:position pos:line="2741" pos:column="23"/></name></name> <operator pos:line="2741" pos:column="24">=<pos:position pos:line="2741" pos:column="25"/></operator> <literal type="number" pos:line="2741" pos:column="26">0<pos:position pos:line="2741" pos:column="27"/></literal></expr>;<pos:position pos:line="2741" pos:column="28"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="2742" pos:column="5">pC<pos:position pos:line="2742" pos:column="7"/></name><operator pos:line="2742" pos:column="7">-&gt;<pos:position pos:line="2742" pos:column="12"/></operator><name pos:line="2742" pos:column="9">cacheStatus<pos:position pos:line="2742" pos:column="20"/></name></name> <operator pos:line="2742" pos:column="21">=<pos:position pos:line="2742" pos:column="22"/></operator> <name pos:line="2742" pos:column="23">CACHE_STALE<pos:position pos:line="2742" pos:column="34"/></name></expr>;<pos:position pos:line="2742" pos:column="35"/></expr_stmt>
<cpp:ifdef pos:line="2743" pos:column="1">#<cpp:directive pos:line="2743" pos:column="2">ifdef<pos:position pos:line="2743" pos:column="7"/></cpp:directive> <name pos:line="2743" pos:column="8">SQLITE_TEST<pos:position pos:line="2743" pos:column="19"/></name></cpp:ifdef>
    <expr_stmt><expr><name pos:line="2744" pos:column="5">sqlite3_search_count<pos:position pos:line="2744" pos:column="25"/></name><operator pos:line="2744" pos:column="25">++<pos:position pos:line="2744" pos:column="27"/></operator></expr>;<pos:position pos:line="2744" pos:column="28"/></expr_stmt>
<cpp:endif pos:line="2745" pos:column="1">#<cpp:directive pos:line="2745" pos:column="2">endif<pos:position pos:line="2745" pos:column="7"/></cpp:directive></cpp:endif>
    <if pos:line="2746" pos:column="5">if<condition pos:line="2746" pos:column="7">( <expr><name pos:line="2746" pos:column="9">oc<pos:position pos:line="2746" pos:column="11"/></name><operator pos:line="2746" pos:column="11">==<pos:position pos:line="2746" pos:column="13"/></operator><name pos:line="2746" pos:column="13">OP_SeekGe<pos:position pos:line="2746" pos:column="22"/></name> <operator pos:line="2746" pos:column="23">||<pos:position pos:line="2746" pos:column="25"/></operator> <name pos:line="2746" pos:column="26">oc<pos:position pos:line="2746" pos:column="28"/></name><operator pos:line="2746" pos:column="28">==<pos:position pos:line="2746" pos:column="30"/></operator><name pos:line="2746" pos:column="30">OP_SeekGt<pos:position pos:line="2746" pos:column="39"/></name></expr> )<pos:position pos:line="2746" pos:column="41"/></condition><then><block pos:line="2746" pos:column="41">{
      <if pos:line="2747" pos:column="7">if<condition pos:line="2747" pos:column="9">( <expr><name pos:line="2747" pos:column="11">res<pos:position pos:line="2747" pos:column="14"/></name><operator pos:line="2747" pos:column="14">&lt;<pos:position pos:line="2747" pos:column="18"/></operator><literal type="number" pos:line="2747" pos:column="15">0<pos:position pos:line="2747" pos:column="16"/></literal> <operator pos:line="2747" pos:column="17">||<pos:position pos:line="2747" pos:column="19"/></operator> <operator pos:line="2747" pos:column="20">(<pos:position pos:line="2747" pos:column="21"/></operator><name pos:line="2747" pos:column="21">res<pos:position pos:line="2747" pos:column="24"/></name><operator pos:line="2747" pos:column="24">==<pos:position pos:line="2747" pos:column="26"/></operator><literal type="number" pos:line="2747" pos:column="26">0<pos:position pos:line="2747" pos:column="27"/></literal> <operator pos:line="2747" pos:column="28">&amp;&amp;<pos:position pos:line="2747" pos:column="38"/></operator> <name pos:line="2747" pos:column="31">oc<pos:position pos:line="2747" pos:column="33"/></name><operator pos:line="2747" pos:column="33">==<pos:position pos:line="2747" pos:column="35"/></operator><name pos:line="2747" pos:column="35">OP_SeekGt<pos:position pos:line="2747" pos:column="44"/></name><operator pos:line="2747" pos:column="44">)<pos:position pos:line="2747" pos:column="45"/></operator></expr> )<pos:position pos:line="2747" pos:column="47"/></condition><then><block pos:line="2747" pos:column="47">{
        <expr_stmt><expr><name pos:line="2748" pos:column="9">rc<pos:position pos:line="2748" pos:column="11"/></name> <operator pos:line="2748" pos:column="12">=<pos:position pos:line="2748" pos:column="13"/></operator> <call><name pos:line="2748" pos:column="14">sqlite3BtreeNext<pos:position pos:line="2748" pos:column="30"/></name><argument_list pos:line="2748" pos:column="30">(<argument><expr><name><name pos:line="2748" pos:column="31">pC<pos:position pos:line="2748" pos:column="33"/></name><operator pos:line="2748" pos:column="33">-&gt;<pos:position pos:line="2748" pos:column="38"/></operator><name pos:line="2748" pos:column="35">pCursor<pos:position pos:line="2748" pos:column="42"/></name></name></expr></argument>, <argument><expr><operator pos:line="2748" pos:column="44">&amp;<pos:position pos:line="2748" pos:column="49"/></operator><name pos:line="2748" pos:column="45">res<pos:position pos:line="2748" pos:column="48"/></name></expr></argument>)<pos:position pos:line="2748" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="2748" pos:column="50"/></expr_stmt>
        <if pos:line="2749" pos:column="9">if<condition pos:line="2749" pos:column="11">( <expr><name pos:line="2749" pos:column="13">rc<pos:position pos:line="2749" pos:column="15"/></name><operator pos:line="2749" pos:column="15">!=<pos:position pos:line="2749" pos:column="17"/></operator><name pos:line="2749" pos:column="17">SQLITE_OK<pos:position pos:line="2749" pos:column="26"/></name></expr> )<pos:position pos:line="2749" pos:column="28"/></condition><then pos:line="2749" pos:column="28"> <block type="pseudo"><goto pos:line="2749" pos:column="29">goto <name pos:line="2749" pos:column="34">abort_due_to_error<pos:position pos:line="2749" pos:column="52"/></name>;<pos:position pos:line="2749" pos:column="53"/></goto></block></then></if>
        <expr_stmt><expr><name><name pos:line="2750" pos:column="9">pC<pos:position pos:line="2750" pos:column="11"/></name><operator pos:line="2750" pos:column="11">-&gt;<pos:position pos:line="2750" pos:column="16"/></operator><name pos:line="2750" pos:column="13">rowidIsValid<pos:position pos:line="2750" pos:column="25"/></name></name> <operator pos:line="2750" pos:column="26">=<pos:position pos:line="2750" pos:column="27"/></operator> <literal type="number" pos:line="2750" pos:column="28">0<pos:position pos:line="2750" pos:column="29"/></literal></expr>;<pos:position pos:line="2750" pos:column="30"/></expr_stmt>
      }<pos:position pos:line="2751" pos:column="8"/></block></then><else pos:line="2751" pos:column="8">else<block pos:line="2751" pos:column="12">{
        <expr_stmt><expr><name pos:line="2752" pos:column="9">res<pos:position pos:line="2752" pos:column="12"/></name> <operator pos:line="2752" pos:column="13">=<pos:position pos:line="2752" pos:column="14"/></operator> <literal type="number" pos:line="2752" pos:column="15">0<pos:position pos:line="2752" pos:column="16"/></literal></expr>;<pos:position pos:line="2752" pos:column="17"/></expr_stmt>
      }<pos:position pos:line="2753" pos:column="8"/></block></else></if>
    }<pos:position pos:line="2754" pos:column="6"/></block></then><else pos:line="2754" pos:column="6">else<block pos:line="2754" pos:column="10">{
      <expr_stmt><expr><call><name pos:line="2755" pos:column="7">assert<pos:position pos:line="2755" pos:column="13"/></name><argument_list pos:line="2755" pos:column="13">( <argument><expr><name pos:line="2755" pos:column="15">oc<pos:position pos:line="2755" pos:column="17"/></name><operator pos:line="2755" pos:column="17">==<pos:position pos:line="2755" pos:column="19"/></operator><name pos:line="2755" pos:column="19">OP_SeekLt<pos:position pos:line="2755" pos:column="28"/></name> <operator pos:line="2755" pos:column="29">||<pos:position pos:line="2755" pos:column="31"/></operator> <name pos:line="2755" pos:column="32">oc<pos:position pos:line="2755" pos:column="34"/></name><operator pos:line="2755" pos:column="34">==<pos:position pos:line="2755" pos:column="36"/></operator><name pos:line="2755" pos:column="36">OP_SeekLe<pos:position pos:line="2755" pos:column="45"/></name></expr></argument> )<pos:position pos:line="2755" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="2755" pos:column="48"/></expr_stmt>
      <if pos:line="2756" pos:column="7">if<condition pos:line="2756" pos:column="9">( <expr><name pos:line="2756" pos:column="11">res<pos:position pos:line="2756" pos:column="14"/></name><operator pos:line="2756" pos:column="14">&gt;<pos:position pos:line="2756" pos:column="18"/></operator><literal type="number" pos:line="2756" pos:column="15">0<pos:position pos:line="2756" pos:column="16"/></literal> <operator pos:line="2756" pos:column="17">||<pos:position pos:line="2756" pos:column="19"/></operator> <operator pos:line="2756" pos:column="20">(<pos:position pos:line="2756" pos:column="21"/></operator><name pos:line="2756" pos:column="21">res<pos:position pos:line="2756" pos:column="24"/></name><operator pos:line="2756" pos:column="24">==<pos:position pos:line="2756" pos:column="26"/></operator><literal type="number" pos:line="2756" pos:column="26">0<pos:position pos:line="2756" pos:column="27"/></literal> <operator pos:line="2756" pos:column="28">&amp;&amp;<pos:position pos:line="2756" pos:column="38"/></operator> <name pos:line="2756" pos:column="31">oc<pos:position pos:line="2756" pos:column="33"/></name><operator pos:line="2756" pos:column="33">==<pos:position pos:line="2756" pos:column="35"/></operator><name pos:line="2756" pos:column="35">OP_SeekLt<pos:position pos:line="2756" pos:column="44"/></name><operator pos:line="2756" pos:column="44">)<pos:position pos:line="2756" pos:column="45"/></operator></expr> )<pos:position pos:line="2756" pos:column="47"/></condition><then><block pos:line="2756" pos:column="47">{
        <expr_stmt><expr><name pos:line="2757" pos:column="9">rc<pos:position pos:line="2757" pos:column="11"/></name> <operator pos:line="2757" pos:column="12">=<pos:position pos:line="2757" pos:column="13"/></operator> <call><name pos:line="2757" pos:column="14">sqlite3BtreePrevious<pos:position pos:line="2757" pos:column="34"/></name><argument_list pos:line="2757" pos:column="34">(<argument><expr><name><name pos:line="2757" pos:column="35">pC<pos:position pos:line="2757" pos:column="37"/></name><operator pos:line="2757" pos:column="37">-&gt;<pos:position pos:line="2757" pos:column="42"/></operator><name pos:line="2757" pos:column="39">pCursor<pos:position pos:line="2757" pos:column="46"/></name></name></expr></argument>, <argument><expr><operator pos:line="2757" pos:column="48">&amp;<pos:position pos:line="2757" pos:column="53"/></operator><name pos:line="2757" pos:column="49">res<pos:position pos:line="2757" pos:column="52"/></name></expr></argument>)<pos:position pos:line="2757" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="2757" pos:column="54"/></expr_stmt>
        <if pos:line="2758" pos:column="9">if<condition pos:line="2758" pos:column="11">( <expr><name pos:line="2758" pos:column="13">rc<pos:position pos:line="2758" pos:column="15"/></name><operator pos:line="2758" pos:column="15">!=<pos:position pos:line="2758" pos:column="17"/></operator><name pos:line="2758" pos:column="17">SQLITE_OK<pos:position pos:line="2758" pos:column="26"/></name></expr> )<pos:position pos:line="2758" pos:column="28"/></condition><then pos:line="2758" pos:column="28"> <block type="pseudo"><goto pos:line="2758" pos:column="29">goto <name pos:line="2758" pos:column="34">abort_due_to_error<pos:position pos:line="2758" pos:column="52"/></name>;<pos:position pos:line="2758" pos:column="53"/></goto></block></then></if>
        <expr_stmt><expr><name><name pos:line="2759" pos:column="9">pC<pos:position pos:line="2759" pos:column="11"/></name><operator pos:line="2759" pos:column="11">-&gt;<pos:position pos:line="2759" pos:column="16"/></operator><name pos:line="2759" pos:column="13">rowidIsValid<pos:position pos:line="2759" pos:column="25"/></name></name> <operator pos:line="2759" pos:column="26">=<pos:position pos:line="2759" pos:column="27"/></operator> <literal type="number" pos:line="2759" pos:column="28">0<pos:position pos:line="2759" pos:column="29"/></literal></expr>;<pos:position pos:line="2759" pos:column="30"/></expr_stmt>
      }<pos:position pos:line="2760" pos:column="8"/></block></then><else pos:line="2760" pos:column="8">else<block pos:line="2760" pos:column="12">{
        <comment type="block" pos:line="2761" pos:column="9">/* res might be negative because the table is empty.  Check to
        ** see if this is the case.
        */</comment>
        <expr_stmt><expr><name pos:line="2764" pos:column="9">res<pos:position pos:line="2764" pos:column="12"/></name> <operator pos:line="2764" pos:column="13">=<pos:position pos:line="2764" pos:column="14"/></operator> <call><name pos:line="2764" pos:column="15">sqlite3BtreeEof<pos:position pos:line="2764" pos:column="30"/></name><argument_list pos:line="2764" pos:column="30">(<argument><expr><name><name pos:line="2764" pos:column="31">pC<pos:position pos:line="2764" pos:column="33"/></name><operator pos:line="2764" pos:column="33">-&gt;<pos:position pos:line="2764" pos:column="38"/></operator><name pos:line="2764" pos:column="35">pCursor<pos:position pos:line="2764" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="2764" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="2764" pos:column="44"/></expr_stmt>
      }<pos:position pos:line="2765" pos:column="8"/></block></else></if>
    }<pos:position pos:line="2766" pos:column="6"/></block></else></if>
    <expr_stmt><expr><call><name pos:line="2767" pos:column="5">assert<pos:position pos:line="2767" pos:column="11"/></name><argument_list pos:line="2767" pos:column="11">( <argument><expr><name><name pos:line="2767" pos:column="13">pOp<pos:position pos:line="2767" pos:column="16"/></name><operator pos:line="2767" pos:column="16">-&gt;<pos:position pos:line="2767" pos:column="21"/></operator><name pos:line="2767" pos:column="18">p2<pos:position pos:line="2767" pos:column="20"/></name></name><operator pos:line="2767" pos:column="20">&gt;<pos:position pos:line="2767" pos:column="24"/></operator><literal type="number" pos:line="2767" pos:column="21">0<pos:position pos:line="2767" pos:column="22"/></literal></expr></argument> )<pos:position pos:line="2767" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="2767" pos:column="25"/></expr_stmt>
    <if pos:line="2768" pos:column="5">if<condition pos:line="2768" pos:column="7">( <expr><name pos:line="2768" pos:column="9">res<pos:position pos:line="2768" pos:column="12"/></name></expr> )<pos:position pos:line="2768" pos:column="14"/></condition><then><block pos:line="2768" pos:column="14">{
      <expr_stmt><expr><name pos:line="2769" pos:column="7">pc<pos:position pos:line="2769" pos:column="9"/></name> <operator pos:line="2769" pos:column="10">=<pos:position pos:line="2769" pos:column="11"/></operator> <name><name pos:line="2769" pos:column="12">pOp<pos:position pos:line="2769" pos:column="15"/></name><operator pos:line="2769" pos:column="15">-&gt;<pos:position pos:line="2769" pos:column="20"/></operator><name pos:line="2769" pos:column="17">p2<pos:position pos:line="2769" pos:column="19"/></name></name> <operator pos:line="2769" pos:column="20">-<pos:position pos:line="2769" pos:column="21"/></operator> <literal type="number" pos:line="2769" pos:column="22">1<pos:position pos:line="2769" pos:column="23"/></literal></expr>;<pos:position pos:line="2769" pos:column="24"/></expr_stmt>
    }<pos:position pos:line="2770" pos:column="6"/></block></then></if>
  }<pos:position pos:line="2771" pos:column="4"/></block></then><elseif pos:line="2771" pos:column="4">else <if pos:line="2771" pos:column="9">if<condition pos:line="2771" pos:column="11">( <expr><operator pos:line="2771" pos:column="13">!<pos:position pos:line="2771" pos:column="14"/></operator><name><name pos:line="2771" pos:column="14">pC<pos:position pos:line="2771" pos:column="16"/></name><operator pos:line="2771" pos:column="16">-&gt;<pos:position pos:line="2771" pos:column="21"/></operator><name pos:line="2771" pos:column="18">pseudoTable<pos:position pos:line="2771" pos:column="29"/></name></name></expr> )<pos:position pos:line="2771" pos:column="31"/></condition><then><block pos:line="2771" pos:column="31">{
    <comment type="block" pos:line="2772" pos:column="5">/* This happens when attempting to open the sqlite3_master table
    ** for read access returns SQLITE_EMPTY. In this case always
    ** take the jump (since there are no records in the table).
    */</comment>
    <expr_stmt><expr><name pos:line="2776" pos:column="5">pc<pos:position pos:line="2776" pos:column="7"/></name> <operator pos:line="2776" pos:column="8">=<pos:position pos:line="2776" pos:column="9"/></operator> <name><name pos:line="2776" pos:column="10">pOp<pos:position pos:line="2776" pos:column="13"/></name><operator pos:line="2776" pos:column="13">-&gt;<pos:position pos:line="2776" pos:column="18"/></operator><name pos:line="2776" pos:column="15">p2<pos:position pos:line="2776" pos:column="17"/></name></name> <operator pos:line="2776" pos:column="18">-<pos:position pos:line="2776" pos:column="19"/></operator> <literal type="number" pos:line="2776" pos:column="20">1<pos:position pos:line="2776" pos:column="21"/></literal></expr>;<pos:position pos:line="2776" pos:column="22"/></expr_stmt>
  }<pos:position pos:line="2777" pos:column="4"/></block></then></if></elseif></if>
  <break pos:line="2778" pos:column="3">break;<pos:position pos:line="2778" pos:column="9"/></break>
}<pos:position pos:line="2779" pos:column="2"/></block>

<comment type="block" pos:line="2781" pos:column="1">/* Opcode: Seek P1 P2 * * *
**
** P1 is an open table cursor and P2 is a rowid integer.  Arrange
** for P1 to move so that it points to the rowid given by P2.
**
** This is actually a deferred seek.  Nothing actually happens until
** the cursor is used to read a record.  That way, if no reads
** occur, no unnecessary I/O happens.
*/</comment>
<case pos:line="2790" pos:column="1">case <expr><name pos:line="2790" pos:column="6">OP_Seek<pos:position pos:line="2790" pos:column="13"/></name></expr>:<pos:position pos:line="2790" pos:column="14"/></case> <block pos:line="2790" pos:column="15">{    <comment type="block" pos:line="2790" pos:column="20">/* in2 */</comment>
  <decl_stmt><decl><type><name pos:line="2791" pos:column="3">int<pos:position pos:line="2791" pos:column="6"/></name></type> <name pos:line="2791" pos:column="7">i<pos:position pos:line="2791" pos:column="8"/></name></decl>;<pos:position pos:line="2791" pos:column="9"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="2792" pos:column="3">VdbeCursor<pos:position pos:line="2792" pos:column="13"/></name> <modifier pos:line="2792" pos:column="14">*<pos:position pos:line="2792" pos:column="15"/></modifier></type><name pos:line="2792" pos:column="15">pC<pos:position pos:line="2792" pos:column="17"/></name></decl>;<pos:position pos:line="2792" pos:column="18"/></decl_stmt>

  <expr_stmt><expr><name pos:line="2794" pos:column="3">i<pos:position pos:line="2794" pos:column="4"/></name> <operator pos:line="2794" pos:column="5">=<pos:position pos:line="2794" pos:column="6"/></operator> <name><name pos:line="2794" pos:column="7">pOp<pos:position pos:line="2794" pos:column="10"/></name><operator pos:line="2794" pos:column="10">-&gt;<pos:position pos:line="2794" pos:column="15"/></operator><name pos:line="2794" pos:column="12">p1<pos:position pos:line="2794" pos:column="14"/></name></name></expr>;<pos:position pos:line="2794" pos:column="15"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="2795" pos:column="3">assert<pos:position pos:line="2795" pos:column="9"/></name><argument_list pos:line="2795" pos:column="9">( <argument><expr><name pos:line="2795" pos:column="11">i<pos:position pos:line="2795" pos:column="12"/></name><operator pos:line="2795" pos:column="12">&gt;=<pos:position pos:line="2795" pos:column="17"/></operator><literal type="number" pos:line="2795" pos:column="14">0<pos:position pos:line="2795" pos:column="15"/></literal> <operator pos:line="2795" pos:column="16">&amp;&amp;<pos:position pos:line="2795" pos:column="26"/></operator> <name pos:line="2795" pos:column="19">i<pos:position pos:line="2795" pos:column="20"/></name><operator pos:line="2795" pos:column="20">&lt;<pos:position pos:line="2795" pos:column="24"/></operator><name><name pos:line="2795" pos:column="21">p<pos:position pos:line="2795" pos:column="22"/></name><operator pos:line="2795" pos:column="22">-&gt;<pos:position pos:line="2795" pos:column="27"/></operator><name pos:line="2795" pos:column="24">nCursor<pos:position pos:line="2795" pos:column="31"/></name></name></expr></argument> )<pos:position pos:line="2795" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="2795" pos:column="34"/></expr_stmt>
  <expr_stmt><expr><name pos:line="2796" pos:column="3">pC<pos:position pos:line="2796" pos:column="5"/></name> <operator pos:line="2796" pos:column="6">=<pos:position pos:line="2796" pos:column="7"/></operator> <name><name pos:line="2796" pos:column="8">p<pos:position pos:line="2796" pos:column="9"/></name><operator pos:line="2796" pos:column="9">-&gt;<pos:position pos:line="2796" pos:column="14"/></operator><name pos:line="2796" pos:column="11">apCsr<pos:position pos:line="2796" pos:column="16"/></name><index pos:line="2796" pos:column="16">[<expr><name pos:line="2796" pos:column="17">i<pos:position pos:line="2796" pos:column="18"/></name></expr>]<pos:position pos:line="2796" pos:column="19"/></index></name></expr>;<pos:position pos:line="2796" pos:column="20"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="2797" pos:column="3">assert<pos:position pos:line="2797" pos:column="9"/></name><argument_list pos:line="2797" pos:column="9">( <argument><expr><name pos:line="2797" pos:column="11">pC<pos:position pos:line="2797" pos:column="13"/></name><operator pos:line="2797" pos:column="13">!=<pos:position pos:line="2797" pos:column="15"/></operator><literal type="number" pos:line="2797" pos:column="15">0<pos:position pos:line="2797" pos:column="16"/></literal></expr></argument> )<pos:position pos:line="2797" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="2797" pos:column="19"/></expr_stmt>
  <if pos:line="2798" pos:column="3">if<condition pos:line="2798" pos:column="5">( <expr><name><name pos:line="2798" pos:column="7">pC<pos:position pos:line="2798" pos:column="9"/></name><operator pos:line="2798" pos:column="9">-&gt;<pos:position pos:line="2798" pos:column="14"/></operator><name pos:line="2798" pos:column="11">pCursor<pos:position pos:line="2798" pos:column="18"/></name></name><operator pos:line="2798" pos:column="18">!=<pos:position pos:line="2798" pos:column="20"/></operator><literal type="number" pos:line="2798" pos:column="20">0<pos:position pos:line="2798" pos:column="21"/></literal></expr> )<pos:position pos:line="2798" pos:column="23"/></condition><then><block pos:line="2798" pos:column="23">{
    <expr_stmt><expr><call><name pos:line="2799" pos:column="5">assert<pos:position pos:line="2799" pos:column="11"/></name><argument_list pos:line="2799" pos:column="11">( <argument><expr><name><name pos:line="2799" pos:column="13">pC<pos:position pos:line="2799" pos:column="15"/></name><operator pos:line="2799" pos:column="15">-&gt;<pos:position pos:line="2799" pos:column="20"/></operator><name pos:line="2799" pos:column="17">isTable<pos:position pos:line="2799" pos:column="24"/></name></name></expr></argument> )<pos:position pos:line="2799" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="2799" pos:column="27"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="2800" pos:column="5">pC<pos:position pos:line="2800" pos:column="7"/></name><operator pos:line="2800" pos:column="7">-&gt;<pos:position pos:line="2800" pos:column="12"/></operator><name pos:line="2800" pos:column="9">nullRow<pos:position pos:line="2800" pos:column="16"/></name></name> <operator pos:line="2800" pos:column="17">=<pos:position pos:line="2800" pos:column="18"/></operator> <literal type="number" pos:line="2800" pos:column="19">0<pos:position pos:line="2800" pos:column="20"/></literal></expr>;<pos:position pos:line="2800" pos:column="21"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="2801" pos:column="5">pC<pos:position pos:line="2801" pos:column="7"/></name><operator pos:line="2801" pos:column="7">-&gt;<pos:position pos:line="2801" pos:column="12"/></operator><name pos:line="2801" pos:column="9">movetoTarget<pos:position pos:line="2801" pos:column="21"/></name></name> <operator pos:line="2801" pos:column="22">=<pos:position pos:line="2801" pos:column="23"/></operator> <call><name pos:line="2801" pos:column="24">sqlite3VdbeIntValue<pos:position pos:line="2801" pos:column="43"/></name><argument_list pos:line="2801" pos:column="43">(<argument><expr><name pos:line="2801" pos:column="44">pIn2<pos:position pos:line="2801" pos:column="48"/></name></expr></argument>)<pos:position pos:line="2801" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="2801" pos:column="50"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="2802" pos:column="5">pC<pos:position pos:line="2802" pos:column="7"/></name><operator pos:line="2802" pos:column="7">-&gt;<pos:position pos:line="2802" pos:column="12"/></operator><name pos:line="2802" pos:column="9">rowidIsValid<pos:position pos:line="2802" pos:column="21"/></name></name> <operator pos:line="2802" pos:column="22">=<pos:position pos:line="2802" pos:column="23"/></operator> <literal type="number" pos:line="2802" pos:column="24">0<pos:position pos:line="2802" pos:column="25"/></literal></expr>;<pos:position pos:line="2802" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="2803" pos:column="5">pC<pos:position pos:line="2803" pos:column="7"/></name><operator pos:line="2803" pos:column="7">-&gt;<pos:position pos:line="2803" pos:column="12"/></operator><name pos:line="2803" pos:column="9">deferredMoveto<pos:position pos:line="2803" pos:column="23"/></name></name> <operator pos:line="2803" pos:column="24">=<pos:position pos:line="2803" pos:column="25"/></operator> <literal type="number" pos:line="2803" pos:column="26">1<pos:position pos:line="2803" pos:column="27"/></literal></expr>;<pos:position pos:line="2803" pos:column="28"/></expr_stmt>
  }<pos:position pos:line="2804" pos:column="4"/></block></then></if>
  <break pos:line="2805" pos:column="3">break;<pos:position pos:line="2805" pos:column="9"/></break>
}<pos:position pos:line="2806" pos:column="2"/></block>
  

<comment type="block" pos:line="2809" pos:column="1">/* Opcode: Found P1 P2 P3 * *
**
** Register P3 holds a blob constructed by MakeRecord.  P1 is an index.
** If an entry that matches the value in register p3 exists in P1 then
** jump to P2.  If the P3 value does not match any entry in P1
** then fall thru.  The P1 cursor is left pointing at the matching entry
** if it exists.
**
** This instruction is used to implement the IN operator where the
** left-hand side is a SELECT statement.  P1 may be a true index, or it
** may be a temporary index that holds the results of the SELECT
** statement.   This instruction is also used to implement the
** DISTINCT keyword in SELECT statements.
**
** This instruction checks if index P1 contains a record for which 
** the first N serialized values exactly match the N serialized values
** in the record in register P3, where N is the total number of values in
** the P3 record (the P3 record is a prefix of the P1 record). 
**
** See also: NotFound, IsUnique, NotExists
*/</comment>
<comment type="block" pos:line="2830" pos:column="1">/* Opcode: NotFound P1 P2 P3 * *
**
** Register P3 holds a blob constructed by MakeRecord.  P1 is
** an index.  If no entry exists in P1 that matches the blob then jump
** to P2.  If an entry does existing, fall through.  The cursor is left
** pointing to the entry that matches.
**
** See also: Found, NotExists, IsUnique
*/</comment>
<case pos:line="2839" pos:column="1">case <expr><name pos:line="2839" pos:column="6">OP_NotFound<pos:position pos:line="2839" pos:column="17"/></name></expr>:<pos:position pos:line="2839" pos:column="18"/></case>       <comment type="block" pos:line="2839" pos:column="25">/* jump, in3 */</comment>
<case pos:line="2840" pos:column="1">case <expr><name pos:line="2840" pos:column="6">OP_Found<pos:position pos:line="2840" pos:column="14"/></name></expr>:<pos:position pos:line="2840" pos:column="15"/></case> <block pos:line="2840" pos:column="16">{        <comment type="block" pos:line="2840" pos:column="25">/* jump, in3 */</comment>
  <decl_stmt><decl><type><name pos:line="2841" pos:column="3">int<pos:position pos:line="2841" pos:column="6"/></name></type> <name pos:line="2841" pos:column="7">i<pos:position pos:line="2841" pos:column="8"/></name></decl>;<pos:position pos:line="2841" pos:column="9"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="2842" pos:column="3">int<pos:position pos:line="2842" pos:column="6"/></name></type> <name pos:line="2842" pos:column="7">alreadyExists<pos:position pos:line="2842" pos:column="20"/></name></decl>;<pos:position pos:line="2842" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="2843" pos:column="3">VdbeCursor<pos:position pos:line="2843" pos:column="13"/></name> <modifier pos:line="2843" pos:column="14">*<pos:position pos:line="2843" pos:column="15"/></modifier></type><name pos:line="2843" pos:column="15">pC<pos:position pos:line="2843" pos:column="17"/></name></decl>;<pos:position pos:line="2843" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="2844" pos:column="3">int<pos:position pos:line="2844" pos:column="6"/></name></type> <name pos:line="2844" pos:column="7">res<pos:position pos:line="2844" pos:column="10"/></name></decl>;<pos:position pos:line="2844" pos:column="11"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="2845" pos:column="3">UnpackedRecord<pos:position pos:line="2845" pos:column="17"/></name> <modifier pos:line="2845" pos:column="18">*<pos:position pos:line="2845" pos:column="19"/></modifier></type><name pos:line="2845" pos:column="19">pIdxKey<pos:position pos:line="2845" pos:column="26"/></name></decl>;<pos:position pos:line="2845" pos:column="27"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="2846" pos:column="3">char<pos:position pos:line="2846" pos:column="7"/></name></type> <name><name pos:line="2846" pos:column="8">aTempRec<pos:position pos:line="2846" pos:column="16"/></name><index pos:line="2846" pos:column="16">[<expr><call><name pos:line="2846" pos:column="17">ROUND8<pos:position pos:line="2846" pos:column="23"/></name><argument_list pos:line="2846" pos:column="23">(<argument><expr><sizeof pos:line="2846" pos:column="24">sizeof<argument_list pos:line="2846" pos:column="30">(<argument><expr><name pos:line="2846" pos:column="31">UnpackedRecord<pos:position pos:line="2846" pos:column="45"/></name></expr></argument>)<pos:position pos:line="2846" pos:column="46"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="2846" pos:column="47"/></argument_list></call> <operator pos:line="2846" pos:column="48">+<pos:position pos:line="2846" pos:column="49"/></operator> <sizeof pos:line="2846" pos:column="50">sizeof<argument_list pos:line="2846" pos:column="56">(<argument><expr><name pos:line="2846" pos:column="57">Mem<pos:position pos:line="2846" pos:column="60"/></name></expr></argument>)<pos:position pos:line="2846" pos:column="61"/></argument_list></sizeof><operator pos:line="2846" pos:column="61">*<pos:position pos:line="2846" pos:column="62"/></operator><literal type="number" pos:line="2846" pos:column="62">3<pos:position pos:line="2846" pos:column="63"/></literal> <operator pos:line="2846" pos:column="64">+<pos:position pos:line="2846" pos:column="65"/></operator> <literal type="number" pos:line="2846" pos:column="66">7<pos:position pos:line="2846" pos:column="67"/></literal></expr>]<pos:position pos:line="2846" pos:column="68"/></index></name></decl>;<pos:position pos:line="2846" pos:column="69"/></decl_stmt>

  <expr_stmt><expr><name pos:line="2848" pos:column="3">i<pos:position pos:line="2848" pos:column="4"/></name> <operator pos:line="2848" pos:column="5">=<pos:position pos:line="2848" pos:column="6"/></operator> <name><name pos:line="2848" pos:column="7">pOp<pos:position pos:line="2848" pos:column="10"/></name><operator pos:line="2848" pos:column="10">-&gt;<pos:position pos:line="2848" pos:column="15"/></operator><name pos:line="2848" pos:column="12">p1<pos:position pos:line="2848" pos:column="14"/></name></name></expr>;<pos:position pos:line="2848" pos:column="15"/></expr_stmt>
  <expr_stmt><expr><name pos:line="2849" pos:column="3">alreadyExists<pos:position pos:line="2849" pos:column="16"/></name> <operator pos:line="2849" pos:column="17">=<pos:position pos:line="2849" pos:column="18"/></operator> <literal type="number" pos:line="2849" pos:column="19">0<pos:position pos:line="2849" pos:column="20"/></literal></expr>;<pos:position pos:line="2849" pos:column="21"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="2850" pos:column="3">assert<pos:position pos:line="2850" pos:column="9"/></name><argument_list pos:line="2850" pos:column="9">( <argument><expr><name pos:line="2850" pos:column="11">i<pos:position pos:line="2850" pos:column="12"/></name><operator pos:line="2850" pos:column="12">&gt;=<pos:position pos:line="2850" pos:column="17"/></operator><literal type="number" pos:line="2850" pos:column="14">0<pos:position pos:line="2850" pos:column="15"/></literal> <operator pos:line="2850" pos:column="16">&amp;&amp;<pos:position pos:line="2850" pos:column="26"/></operator> <name pos:line="2850" pos:column="19">i<pos:position pos:line="2850" pos:column="20"/></name><operator pos:line="2850" pos:column="20">&lt;<pos:position pos:line="2850" pos:column="24"/></operator><name><name pos:line="2850" pos:column="21">p<pos:position pos:line="2850" pos:column="22"/></name><operator pos:line="2850" pos:column="22">-&gt;<pos:position pos:line="2850" pos:column="27"/></operator><name pos:line="2850" pos:column="24">nCursor<pos:position pos:line="2850" pos:column="31"/></name></name></expr></argument> )<pos:position pos:line="2850" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="2850" pos:column="34"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="2851" pos:column="3">assert<pos:position pos:line="2851" pos:column="9"/></name><argument_list pos:line="2851" pos:column="9">( <argument><expr><name><name pos:line="2851" pos:column="11">p<pos:position pos:line="2851" pos:column="12"/></name><operator pos:line="2851" pos:column="12">-&gt;<pos:position pos:line="2851" pos:column="17"/></operator><name pos:line="2851" pos:column="14">apCsr<pos:position pos:line="2851" pos:column="19"/></name><index pos:line="2851" pos:column="19">[<expr><name pos:line="2851" pos:column="20">i<pos:position pos:line="2851" pos:column="21"/></name></expr>]<pos:position pos:line="2851" pos:column="22"/></index></name><operator pos:line="2851" pos:column="22">!=<pos:position pos:line="2851" pos:column="24"/></operator><literal type="number" pos:line="2851" pos:column="24">0<pos:position pos:line="2851" pos:column="25"/></literal></expr></argument> )<pos:position pos:line="2851" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="2851" pos:column="28"/></expr_stmt>
  <if pos:line="2852" pos:column="3">if<condition pos:line="2852" pos:column="5">( <expr><operator pos:line="2852" pos:column="7">(<pos:position pos:line="2852" pos:column="8"/></operator><name pos:line="2852" pos:column="8">pC<pos:position pos:line="2852" pos:column="10"/></name> <operator pos:line="2852" pos:column="11">=<pos:position pos:line="2852" pos:column="12"/></operator> <name><name pos:line="2852" pos:column="13">p<pos:position pos:line="2852" pos:column="14"/></name><operator pos:line="2852" pos:column="14">-&gt;<pos:position pos:line="2852" pos:column="19"/></operator><name pos:line="2852" pos:column="16">apCsr<pos:position pos:line="2852" pos:column="21"/></name><index pos:line="2852" pos:column="21">[<expr><name pos:line="2852" pos:column="22">i<pos:position pos:line="2852" pos:column="23"/></name></expr>]<pos:position pos:line="2852" pos:column="24"/></index></name><operator pos:line="2852" pos:column="24">)<pos:position pos:line="2852" pos:column="25"/></operator><operator pos:line="2852" pos:column="25">-&gt;<pos:position pos:line="2852" pos:column="30"/></operator><name pos:line="2852" pos:column="27">pCursor<pos:position pos:line="2852" pos:column="34"/></name><operator pos:line="2852" pos:column="34">!=<pos:position pos:line="2852" pos:column="36"/></operator><literal type="number" pos:line="2852" pos:column="36">0<pos:position pos:line="2852" pos:column="37"/></literal></expr> )<pos:position pos:line="2852" pos:column="39"/></condition><then><block pos:line="2852" pos:column="39">{

    <expr_stmt><expr><call><name pos:line="2854" pos:column="5">assert<pos:position pos:line="2854" pos:column="11"/></name><argument_list pos:line="2854" pos:column="11">( <argument><expr><name><name pos:line="2854" pos:column="13">pC<pos:position pos:line="2854" pos:column="15"/></name><operator pos:line="2854" pos:column="15">-&gt;<pos:position pos:line="2854" pos:column="20"/></operator><name pos:line="2854" pos:column="17">isTable<pos:position pos:line="2854" pos:column="24"/></name></name><operator pos:line="2854" pos:column="24">==<pos:position pos:line="2854" pos:column="26"/></operator><literal type="number" pos:line="2854" pos:column="26">0<pos:position pos:line="2854" pos:column="27"/></literal></expr></argument> )<pos:position pos:line="2854" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="2854" pos:column="30"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="2855" pos:column="5">assert<pos:position pos:line="2855" pos:column="11"/></name><argument_list pos:line="2855" pos:column="11">( <argument><expr><name><name pos:line="2855" pos:column="13">pIn3<pos:position pos:line="2855" pos:column="17"/></name><operator pos:line="2855" pos:column="17">-&gt;<pos:position pos:line="2855" pos:column="22"/></operator><name pos:line="2855" pos:column="19">flags<pos:position pos:line="2855" pos:column="24"/></name></name> <operator pos:line="2855" pos:column="25">&amp;<pos:position pos:line="2855" pos:column="30"/></operator> <name pos:line="2855" pos:column="27">MEM_Blob<pos:position pos:line="2855" pos:column="35"/></name></expr></argument> )<pos:position pos:line="2855" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="2855" pos:column="38"/></expr_stmt>
    <expr_stmt><expr><name pos:line="2856" pos:column="5">pIdxKey<pos:position pos:line="2856" pos:column="12"/></name> <operator pos:line="2856" pos:column="13">=<pos:position pos:line="2856" pos:column="14"/></operator> <call><name pos:line="2856" pos:column="15">sqlite3VdbeRecordUnpack<pos:position pos:line="2856" pos:column="38"/></name><argument_list pos:line="2856" pos:column="38">(<argument><expr><name><name pos:line="2856" pos:column="39">pC<pos:position pos:line="2856" pos:column="41"/></name><operator pos:line="2856" pos:column="41">-&gt;<pos:position pos:line="2856" pos:column="46"/></operator><name pos:line="2856" pos:column="43">pKeyInfo<pos:position pos:line="2856" pos:column="51"/></name></name></expr></argument>, <argument><expr><name><name pos:line="2856" pos:column="53">pIn3<pos:position pos:line="2856" pos:column="57"/></name><operator pos:line="2856" pos:column="57">-&gt;<pos:position pos:line="2856" pos:column="62"/></operator><name pos:line="2856" pos:column="59">n<pos:position pos:line="2856" pos:column="60"/></name></name></expr></argument>, <argument><expr><name><name pos:line="2856" pos:column="62">pIn3<pos:position pos:line="2856" pos:column="66"/></name><operator pos:line="2856" pos:column="66">-&gt;<pos:position pos:line="2856" pos:column="71"/></operator><name pos:line="2856" pos:column="68">z<pos:position pos:line="2856" pos:column="69"/></name></name></expr></argument>,
                                      <argument><expr><name pos:line="2857" pos:column="39">aTempRec<pos:position pos:line="2857" pos:column="47"/></name></expr></argument>, <argument><expr><sizeof pos:line="2857" pos:column="49">sizeof<argument_list pos:line="2857" pos:column="55">(<argument><expr><name pos:line="2857" pos:column="56">aTempRec<pos:position pos:line="2857" pos:column="64"/></name></expr></argument>)<pos:position pos:line="2857" pos:column="65"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="2857" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="2857" pos:column="67"/></expr_stmt>
    <if pos:line="2858" pos:column="5">if<condition pos:line="2858" pos:column="7">( <expr><name pos:line="2858" pos:column="9">pIdxKey<pos:position pos:line="2858" pos:column="16"/></name><operator pos:line="2858" pos:column="16">==<pos:position pos:line="2858" pos:column="18"/></operator><literal type="number" pos:line="2858" pos:column="18">0<pos:position pos:line="2858" pos:column="19"/></literal></expr> )<pos:position pos:line="2858" pos:column="21"/></condition><then><block pos:line="2858" pos:column="21">{
      <goto pos:line="2859" pos:column="7">goto <name pos:line="2859" pos:column="12">no_mem<pos:position pos:line="2859" pos:column="18"/></name>;<pos:position pos:line="2859" pos:column="19"/></goto>
    }<pos:position pos:line="2860" pos:column="6"/></block></then></if>
    <if pos:line="2861" pos:column="5">if<condition pos:line="2861" pos:column="7">( <expr><name><name pos:line="2861" pos:column="9">pOp<pos:position pos:line="2861" pos:column="12"/></name><operator pos:line="2861" pos:column="12">-&gt;<pos:position pos:line="2861" pos:column="17"/></operator><name pos:line="2861" pos:column="14">opcode<pos:position pos:line="2861" pos:column="20"/></name></name><operator pos:line="2861" pos:column="20">==<pos:position pos:line="2861" pos:column="22"/></operator><name pos:line="2861" pos:column="22">OP_Found<pos:position pos:line="2861" pos:column="30"/></name></expr> )<pos:position pos:line="2861" pos:column="32"/></condition><then><block pos:line="2861" pos:column="32">{
      <expr_stmt><expr><name><name pos:line="2862" pos:column="7">pIdxKey<pos:position pos:line="2862" pos:column="14"/></name><operator pos:line="2862" pos:column="14">-&gt;<pos:position pos:line="2862" pos:column="19"/></operator><name pos:line="2862" pos:column="16">flags<pos:position pos:line="2862" pos:column="21"/></name></name> <operator pos:line="2862" pos:column="22">|=<pos:position pos:line="2862" pos:column="24"/></operator> <name pos:line="2862" pos:column="25">UNPACKED_PREFIX_MATCH<pos:position pos:line="2862" pos:column="46"/></name></expr>;<pos:position pos:line="2862" pos:column="47"/></expr_stmt>
    }<pos:position pos:line="2863" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="2864" pos:column="5">rc<pos:position pos:line="2864" pos:column="7"/></name> <operator pos:line="2864" pos:column="8">=<pos:position pos:line="2864" pos:column="9"/></operator> <call><name pos:line="2864" pos:column="10">sqlite3BtreeMovetoUnpacked<pos:position pos:line="2864" pos:column="36"/></name><argument_list pos:line="2864" pos:column="36">(<argument><expr><name><name pos:line="2864" pos:column="37">pC<pos:position pos:line="2864" pos:column="39"/></name><operator pos:line="2864" pos:column="39">-&gt;<pos:position pos:line="2864" pos:column="44"/></operator><name pos:line="2864" pos:column="41">pCursor<pos:position pos:line="2864" pos:column="48"/></name></name></expr></argument>, <argument><expr><name pos:line="2864" pos:column="50">pIdxKey<pos:position pos:line="2864" pos:column="57"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="2864" pos:column="59">0<pos:position pos:line="2864" pos:column="60"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="2864" pos:column="62">0<pos:position pos:line="2864" pos:column="63"/></literal></expr></argument>, <argument><expr><operator pos:line="2864" pos:column="65">&amp;<pos:position pos:line="2864" pos:column="70"/></operator><name pos:line="2864" pos:column="66">res<pos:position pos:line="2864" pos:column="69"/></name></expr></argument>)<pos:position pos:line="2864" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="2864" pos:column="71"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="2865" pos:column="5">sqlite3VdbeDeleteUnpackedRecord<pos:position pos:line="2865" pos:column="36"/></name><argument_list pos:line="2865" pos:column="36">(<argument><expr><name pos:line="2865" pos:column="37">pIdxKey<pos:position pos:line="2865" pos:column="44"/></name></expr></argument>)<pos:position pos:line="2865" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="2865" pos:column="46"/></expr_stmt>
    <if pos:line="2866" pos:column="5">if<condition pos:line="2866" pos:column="7">( <expr><name pos:line="2866" pos:column="9">rc<pos:position pos:line="2866" pos:column="11"/></name><operator pos:line="2866" pos:column="11">!=<pos:position pos:line="2866" pos:column="13"/></operator><name pos:line="2866" pos:column="13">SQLITE_OK<pos:position pos:line="2866" pos:column="22"/></name></expr> )<pos:position pos:line="2866" pos:column="24"/></condition><then><block pos:line="2866" pos:column="24">{
      <break pos:line="2867" pos:column="7">break;<pos:position pos:line="2867" pos:column="13"/></break>
    }<pos:position pos:line="2868" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="2869" pos:column="5">alreadyExists<pos:position pos:line="2869" pos:column="18"/></name> <operator pos:line="2869" pos:column="19">=<pos:position pos:line="2869" pos:column="20"/></operator> <operator pos:line="2869" pos:column="21">(<pos:position pos:line="2869" pos:column="22"/></operator><name pos:line="2869" pos:column="22">res<pos:position pos:line="2869" pos:column="25"/></name><operator pos:line="2869" pos:column="25">==<pos:position pos:line="2869" pos:column="27"/></operator><literal type="number" pos:line="2869" pos:column="27">0<pos:position pos:line="2869" pos:column="28"/></literal><operator pos:line="2869" pos:column="28">)<pos:position pos:line="2869" pos:column="29"/></operator></expr>;<pos:position pos:line="2869" pos:column="30"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="2870" pos:column="5">pC<pos:position pos:line="2870" pos:column="7"/></name><operator pos:line="2870" pos:column="7">-&gt;<pos:position pos:line="2870" pos:column="12"/></operator><name pos:line="2870" pos:column="9">deferredMoveto<pos:position pos:line="2870" pos:column="23"/></name></name> <operator pos:line="2870" pos:column="24">=<pos:position pos:line="2870" pos:column="25"/></operator> <literal type="number" pos:line="2870" pos:column="26">0<pos:position pos:line="2870" pos:column="27"/></literal></expr>;<pos:position pos:line="2870" pos:column="28"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="2871" pos:column="5">pC<pos:position pos:line="2871" pos:column="7"/></name><operator pos:line="2871" pos:column="7">-&gt;<pos:position pos:line="2871" pos:column="12"/></operator><name pos:line="2871" pos:column="9">cacheStatus<pos:position pos:line="2871" pos:column="20"/></name></name> <operator pos:line="2871" pos:column="21">=<pos:position pos:line="2871" pos:column="22"/></operator> <name pos:line="2871" pos:column="23">CACHE_STALE<pos:position pos:line="2871" pos:column="34"/></name></expr>;<pos:position pos:line="2871" pos:column="35"/></expr_stmt>
  }<pos:position pos:line="2872" pos:column="4"/></block></then></if>
  <if pos:line="2873" pos:column="3">if<condition pos:line="2873" pos:column="5">( <expr><name><name pos:line="2873" pos:column="7">pOp<pos:position pos:line="2873" pos:column="10"/></name><operator pos:line="2873" pos:column="10">-&gt;<pos:position pos:line="2873" pos:column="15"/></operator><name pos:line="2873" pos:column="12">opcode<pos:position pos:line="2873" pos:column="18"/></name></name><operator pos:line="2873" pos:column="18">==<pos:position pos:line="2873" pos:column="20"/></operator><name pos:line="2873" pos:column="20">OP_Found<pos:position pos:line="2873" pos:column="28"/></name></expr> )<pos:position pos:line="2873" pos:column="30"/></condition><then><block pos:line="2873" pos:column="30">{
    <if pos:line="2874" pos:column="5">if<condition pos:line="2874" pos:column="7">( <expr><name pos:line="2874" pos:column="9">alreadyExists<pos:position pos:line="2874" pos:column="22"/></name></expr> )<pos:position pos:line="2874" pos:column="24"/></condition><then pos:line="2874" pos:column="24"> <block type="pseudo"><expr_stmt><expr><name pos:line="2874" pos:column="25">pc<pos:position pos:line="2874" pos:column="27"/></name> <operator pos:line="2874" pos:column="28">=<pos:position pos:line="2874" pos:column="29"/></operator> <name><name pos:line="2874" pos:column="30">pOp<pos:position pos:line="2874" pos:column="33"/></name><operator pos:line="2874" pos:column="33">-&gt;<pos:position pos:line="2874" pos:column="38"/></operator><name pos:line="2874" pos:column="35">p2<pos:position pos:line="2874" pos:column="37"/></name></name> <operator pos:line="2874" pos:column="38">-<pos:position pos:line="2874" pos:column="39"/></operator> <literal type="number" pos:line="2874" pos:column="40">1<pos:position pos:line="2874" pos:column="41"/></literal></expr>;<pos:position pos:line="2874" pos:column="42"/></expr_stmt></block></then></if>
  }<pos:position pos:line="2875" pos:column="4"/></block></then><else pos:line="2875" pos:column="4">else<block pos:line="2875" pos:column="8">{
    <if pos:line="2876" pos:column="5">if<condition pos:line="2876" pos:column="7">( <expr><operator pos:line="2876" pos:column="9">!<pos:position pos:line="2876" pos:column="10"/></operator><name pos:line="2876" pos:column="10">alreadyExists<pos:position pos:line="2876" pos:column="23"/></name></expr> )<pos:position pos:line="2876" pos:column="25"/></condition><then pos:line="2876" pos:column="25"> <block type="pseudo"><expr_stmt><expr><name pos:line="2876" pos:column="26">pc<pos:position pos:line="2876" pos:column="28"/></name> <operator pos:line="2876" pos:column="29">=<pos:position pos:line="2876" pos:column="30"/></operator> <name><name pos:line="2876" pos:column="31">pOp<pos:position pos:line="2876" pos:column="34"/></name><operator pos:line="2876" pos:column="34">-&gt;<pos:position pos:line="2876" pos:column="39"/></operator><name pos:line="2876" pos:column="36">p2<pos:position pos:line="2876" pos:column="38"/></name></name> <operator pos:line="2876" pos:column="39">-<pos:position pos:line="2876" pos:column="40"/></operator> <literal type="number" pos:line="2876" pos:column="41">1<pos:position pos:line="2876" pos:column="42"/></literal></expr>;<pos:position pos:line="2876" pos:column="43"/></expr_stmt></block></then></if>
  }<pos:position pos:line="2877" pos:column="4"/></block></else></if>
  <break pos:line="2878" pos:column="3">break;<pos:position pos:line="2878" pos:column="9"/></break>
}<pos:position pos:line="2879" pos:column="2"/></block>

<comment type="block" pos:line="2881" pos:column="1">/* Opcode: IsUnique P1 P2 P3 P4 *
**
** Cursor P1 is open on an index.  So it has no data and its key consists 
** of a record generated by OP_MakeRecord where the last field is the 
** rowid of the entry that the index refers to.
**
** The P3 register contains an integer record number. Call this record 
** number R. Register P4 is the first in a set of N contiguous registers
** that make up an unpacked index key that can be used with cursor P1.
** The value of N can be inferred from the cursor. N includes the rowid
** value appended to the end of the index record. This rowid value may
** or may not be the same as R.
**
** If any of the N registers beginning with register P4 contains a NULL
** value, jump immediately to P2.
**
** Otherwise, this instruction checks if cursor P1 contains an entry
** where the first (N-1) fields match but the rowid value at the end
** of the index entry is not R. If there is no such entry, control jumps
** to instruction P2. Otherwise, the rowid of the conflicting index
** entry is copied to register P3 and control falls through to the next
** instruction.
**
** See also: NotFound, NotExists, Found
*/</comment>
<case pos:line="2906" pos:column="1">case <expr><name pos:line="2906" pos:column="6">OP_IsUnique<pos:position pos:line="2906" pos:column="17"/></name></expr>:<pos:position pos:line="2906" pos:column="18"/></case> <block pos:line="2906" pos:column="19">{        <comment type="block" pos:line="2906" pos:column="28">/* jump, in3 */</comment>
  <decl_stmt><decl><type><name pos:line="2907" pos:column="3">u16<pos:position pos:line="2907" pos:column="6"/></name></type> <name pos:line="2907" pos:column="7">ii<pos:position pos:line="2907" pos:column="9"/></name></decl>;<pos:position pos:line="2907" pos:column="10"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="2908" pos:column="3">VdbeCursor<pos:position pos:line="2908" pos:column="13"/></name> <modifier pos:line="2908" pos:column="14">*<pos:position pos:line="2908" pos:column="15"/></modifier></type><name pos:line="2908" pos:column="15">pCx<pos:position pos:line="2908" pos:column="18"/></name></decl>;<pos:position pos:line="2908" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="2909" pos:column="3">BtCursor<pos:position pos:line="2909" pos:column="11"/></name> <modifier pos:line="2909" pos:column="12">*<pos:position pos:line="2909" pos:column="13"/></modifier></type><name pos:line="2909" pos:column="13">pCrsr<pos:position pos:line="2909" pos:column="18"/></name></decl>;<pos:position pos:line="2909" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="2910" pos:column="3">u16<pos:position pos:line="2910" pos:column="6"/></name></type> <name pos:line="2910" pos:column="7">nField<pos:position pos:line="2910" pos:column="13"/></name></decl>;<pos:position pos:line="2910" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="2911" pos:column="3">Mem<pos:position pos:line="2911" pos:column="6"/></name> <modifier pos:line="2911" pos:column="7">*<pos:position pos:line="2911" pos:column="8"/></modifier></type><name pos:line="2911" pos:column="8">aMem<pos:position pos:line="2911" pos:column="12"/></name></decl>;<pos:position pos:line="2911" pos:column="13"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="2912" pos:column="3">UnpackedRecord<pos:position pos:line="2912" pos:column="17"/></name></type> <name pos:line="2912" pos:column="18">r<pos:position pos:line="2912" pos:column="19"/></name></decl>;<pos:position pos:line="2912" pos:column="20"/></decl_stmt>                  <comment type="block" pos:line="2912" pos:column="38">/* B-Tree index search key */</comment>
  <decl_stmt><decl><type><name pos:line="2913" pos:column="3">i64<pos:position pos:line="2913" pos:column="6"/></name></type> <name pos:line="2913" pos:column="7">R<pos:position pos:line="2913" pos:column="8"/></name></decl>;<pos:position pos:line="2913" pos:column="9"/></decl_stmt>                             <comment type="block" pos:line="2913" pos:column="38">/* Rowid stored in register P3 */</comment>

  <expr_stmt><expr><name pos:line="2915" pos:column="3">aMem<pos:position pos:line="2915" pos:column="7"/></name> <operator pos:line="2915" pos:column="8">=<pos:position pos:line="2915" pos:column="9"/></operator> <operator pos:line="2915" pos:column="10">&amp;<pos:position pos:line="2915" pos:column="15"/></operator><name><name pos:line="2915" pos:column="11">p<pos:position pos:line="2915" pos:column="12"/></name><operator pos:line="2915" pos:column="12">-&gt;<pos:position pos:line="2915" pos:column="17"/></operator><name pos:line="2915" pos:column="14">aMem<pos:position pos:line="2915" pos:column="18"/></name><index pos:line="2915" pos:column="18">[<expr><name><name pos:line="2915" pos:column="19">pOp<pos:position pos:line="2915" pos:column="22"/></name><operator pos:line="2915" pos:column="22">-&gt;<pos:position pos:line="2915" pos:column="27"/></operator><name pos:line="2915" pos:column="24">p4<pos:position pos:line="2915" pos:column="26"/></name><operator pos:line="2915" pos:column="26">.<pos:position pos:line="2915" pos:column="27"/></operator><name pos:line="2915" pos:column="27">i<pos:position pos:line="2915" pos:column="28"/></name></name></expr>]<pos:position pos:line="2915" pos:column="29"/></index></name></expr>;<pos:position pos:line="2915" pos:column="30"/></expr_stmt>
  <comment type="block" pos:line="2916" pos:column="3">/* Assert that the values of parameters P1 and P4 are in range. */</comment>
  <expr_stmt><expr><call><name pos:line="2917" pos:column="3">assert<pos:position pos:line="2917" pos:column="9"/></name><argument_list pos:line="2917" pos:column="9">( <argument><expr><name><name pos:line="2917" pos:column="11">pOp<pos:position pos:line="2917" pos:column="14"/></name><operator pos:line="2917" pos:column="14">-&gt;<pos:position pos:line="2917" pos:column="19"/></operator><name pos:line="2917" pos:column="16">p4type<pos:position pos:line="2917" pos:column="22"/></name></name><operator pos:line="2917" pos:column="22">==<pos:position pos:line="2917" pos:column="24"/></operator><name pos:line="2917" pos:column="24">P4_INT32<pos:position pos:line="2917" pos:column="32"/></name></expr></argument> )<pos:position pos:line="2917" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="2917" pos:column="35"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="2918" pos:column="3">assert<pos:position pos:line="2918" pos:column="9"/></name><argument_list pos:line="2918" pos:column="9">( <argument><expr><name><name pos:line="2918" pos:column="11">pOp<pos:position pos:line="2918" pos:column="14"/></name><operator pos:line="2918" pos:column="14">-&gt;<pos:position pos:line="2918" pos:column="19"/></operator><name pos:line="2918" pos:column="16">p4<pos:position pos:line="2918" pos:column="18"/></name><operator pos:line="2918" pos:column="18">.<pos:position pos:line="2918" pos:column="19"/></operator><name pos:line="2918" pos:column="19">i<pos:position pos:line="2918" pos:column="20"/></name></name><operator pos:line="2918" pos:column="20">&gt;<pos:position pos:line="2918" pos:column="24"/></operator><literal type="number" pos:line="2918" pos:column="21">0<pos:position pos:line="2918" pos:column="22"/></literal> <operator pos:line="2918" pos:column="23">&amp;&amp;<pos:position pos:line="2918" pos:column="33"/></operator> <name><name pos:line="2918" pos:column="26">pOp<pos:position pos:line="2918" pos:column="29"/></name><operator pos:line="2918" pos:column="29">-&gt;<pos:position pos:line="2918" pos:column="34"/></operator><name pos:line="2918" pos:column="31">p4<pos:position pos:line="2918" pos:column="33"/></name><operator pos:line="2918" pos:column="33">.<pos:position pos:line="2918" pos:column="34"/></operator><name pos:line="2918" pos:column="34">i<pos:position pos:line="2918" pos:column="35"/></name></name><operator pos:line="2918" pos:column="35">&lt;=<pos:position pos:line="2918" pos:column="40"/></operator><name><name pos:line="2918" pos:column="37">p<pos:position pos:line="2918" pos:column="38"/></name><operator pos:line="2918" pos:column="38">-&gt;<pos:position pos:line="2918" pos:column="43"/></operator><name pos:line="2918" pos:column="40">nMem<pos:position pos:line="2918" pos:column="44"/></name></name></expr></argument> )<pos:position pos:line="2918" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="2918" pos:column="47"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="2919" pos:column="3">assert<pos:position pos:line="2919" pos:column="9"/></name><argument_list pos:line="2919" pos:column="9">( <argument><expr><name><name pos:line="2919" pos:column="11">pOp<pos:position pos:line="2919" pos:column="14"/></name><operator pos:line="2919" pos:column="14">-&gt;<pos:position pos:line="2919" pos:column="19"/></operator><name pos:line="2919" pos:column="16">p1<pos:position pos:line="2919" pos:column="18"/></name></name><operator pos:line="2919" pos:column="18">&gt;=<pos:position pos:line="2919" pos:column="23"/></operator><literal type="number" pos:line="2919" pos:column="20">0<pos:position pos:line="2919" pos:column="21"/></literal> <operator pos:line="2919" pos:column="22">&amp;&amp;<pos:position pos:line="2919" pos:column="32"/></operator> <name><name pos:line="2919" pos:column="25">pOp<pos:position pos:line="2919" pos:column="28"/></name><operator pos:line="2919" pos:column="28">-&gt;<pos:position pos:line="2919" pos:column="33"/></operator><name pos:line="2919" pos:column="30">p1<pos:position pos:line="2919" pos:column="32"/></name></name><operator pos:line="2919" pos:column="32">&lt;<pos:position pos:line="2919" pos:column="36"/></operator><name><name pos:line="2919" pos:column="33">p<pos:position pos:line="2919" pos:column="34"/></name><operator pos:line="2919" pos:column="34">-&gt;<pos:position pos:line="2919" pos:column="39"/></operator><name pos:line="2919" pos:column="36">nCursor<pos:position pos:line="2919" pos:column="43"/></name></name></expr></argument> )<pos:position pos:line="2919" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="2919" pos:column="46"/></expr_stmt>

  <comment type="block" pos:line="2921" pos:column="3">/* Find the index cursor. */</comment>
  <expr_stmt><expr><name pos:line="2922" pos:column="3">pCx<pos:position pos:line="2922" pos:column="6"/></name> <operator pos:line="2922" pos:column="7">=<pos:position pos:line="2922" pos:column="8"/></operator> <name><name pos:line="2922" pos:column="9">p<pos:position pos:line="2922" pos:column="10"/></name><operator pos:line="2922" pos:column="10">-&gt;<pos:position pos:line="2922" pos:column="15"/></operator><name pos:line="2922" pos:column="12">apCsr<pos:position pos:line="2922" pos:column="17"/></name><index pos:line="2922" pos:column="17">[<expr><name><name pos:line="2922" pos:column="18">pOp<pos:position pos:line="2922" pos:column="21"/></name><operator pos:line="2922" pos:column="21">-&gt;<pos:position pos:line="2922" pos:column="26"/></operator><name pos:line="2922" pos:column="23">p1<pos:position pos:line="2922" pos:column="25"/></name></name></expr>]<pos:position pos:line="2922" pos:column="26"/></index></name></expr>;<pos:position pos:line="2922" pos:column="27"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="2923" pos:column="3">assert<pos:position pos:line="2923" pos:column="9"/></name><argument_list pos:line="2923" pos:column="9">( <argument><expr><name><name pos:line="2923" pos:column="11">pCx<pos:position pos:line="2923" pos:column="14"/></name><operator pos:line="2923" pos:column="14">-&gt;<pos:position pos:line="2923" pos:column="19"/></operator><name pos:line="2923" pos:column="16">deferredMoveto<pos:position pos:line="2923" pos:column="30"/></name></name><operator pos:line="2923" pos:column="30">==<pos:position pos:line="2923" pos:column="32"/></operator><literal type="number" pos:line="2923" pos:column="32">0<pos:position pos:line="2923" pos:column="33"/></literal></expr></argument> )<pos:position pos:line="2923" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="2923" pos:column="36"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="2924" pos:column="3">pCx<pos:position pos:line="2924" pos:column="6"/></name><operator pos:line="2924" pos:column="6">-&gt;<pos:position pos:line="2924" pos:column="11"/></operator><name pos:line="2924" pos:column="8">seekResult<pos:position pos:line="2924" pos:column="18"/></name></name> <operator pos:line="2924" pos:column="19">=<pos:position pos:line="2924" pos:column="20"/></operator> <literal type="number" pos:line="2924" pos:column="21">0<pos:position pos:line="2924" pos:column="22"/></literal></expr>;<pos:position pos:line="2924" pos:column="23"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="2925" pos:column="3">pCx<pos:position pos:line="2925" pos:column="6"/></name><operator pos:line="2925" pos:column="6">-&gt;<pos:position pos:line="2925" pos:column="11"/></operator><name pos:line="2925" pos:column="8">cacheStatus<pos:position pos:line="2925" pos:column="19"/></name></name> <operator pos:line="2925" pos:column="20">=<pos:position pos:line="2925" pos:column="21"/></operator> <name pos:line="2925" pos:column="22">CACHE_STALE<pos:position pos:line="2925" pos:column="33"/></name></expr>;<pos:position pos:line="2925" pos:column="34"/></expr_stmt>
  <expr_stmt><expr><name pos:line="2926" pos:column="3">pCrsr<pos:position pos:line="2926" pos:column="8"/></name> <operator pos:line="2926" pos:column="9">=<pos:position pos:line="2926" pos:column="10"/></operator> <name><name pos:line="2926" pos:column="11">pCx<pos:position pos:line="2926" pos:column="14"/></name><operator pos:line="2926" pos:column="14">-&gt;<pos:position pos:line="2926" pos:column="19"/></operator><name pos:line="2926" pos:column="16">pCursor<pos:position pos:line="2926" pos:column="23"/></name></name></expr>;<pos:position pos:line="2926" pos:column="24"/></expr_stmt>

  <comment type="block" pos:line="2928" pos:column="3">/* If any of the values are NULL, take the jump. */</comment>
  <expr_stmt><expr><name pos:line="2929" pos:column="3">nField<pos:position pos:line="2929" pos:column="9"/></name> <operator pos:line="2929" pos:column="10">=<pos:position pos:line="2929" pos:column="11"/></operator> <name><name pos:line="2929" pos:column="12">pCx<pos:position pos:line="2929" pos:column="15"/></name><operator pos:line="2929" pos:column="15">-&gt;<pos:position pos:line="2929" pos:column="20"/></operator><name pos:line="2929" pos:column="17">pKeyInfo<pos:position pos:line="2929" pos:column="25"/></name><operator pos:line="2929" pos:column="25">-&gt;<pos:position pos:line="2929" pos:column="30"/></operator><name pos:line="2929" pos:column="27">nField<pos:position pos:line="2929" pos:column="33"/></name></name></expr>;<pos:position pos:line="2929" pos:column="34"/></expr_stmt>
  <for pos:line="2930" pos:column="3">for<control pos:line="2930" pos:column="6">(<init><expr><name pos:line="2930" pos:column="7">ii<pos:position pos:line="2930" pos:column="9"/></name><operator pos:line="2930" pos:column="9">=<pos:position pos:line="2930" pos:column="10"/></operator><literal type="number" pos:line="2930" pos:column="10">0<pos:position pos:line="2930" pos:column="11"/></literal></expr>;<pos:position pos:line="2930" pos:column="12"/></init> <condition><expr><name pos:line="2930" pos:column="13">ii<pos:position pos:line="2930" pos:column="15"/></name><operator pos:line="2930" pos:column="15">&lt;<pos:position pos:line="2930" pos:column="19"/></operator><name pos:line="2930" pos:column="16">nField<pos:position pos:line="2930" pos:column="22"/></name></expr>;<pos:position pos:line="2930" pos:column="23"/></condition> <incr><expr><name pos:line="2930" pos:column="24">ii<pos:position pos:line="2930" pos:column="26"/></name><operator pos:line="2930" pos:column="26">++<pos:position pos:line="2930" pos:column="28"/></operator></expr></incr>)<pos:position pos:line="2930" pos:column="29"/></control><block pos:line="2930" pos:column="29">{
    <if pos:line="2931" pos:column="5">if<condition pos:line="2931" pos:column="7">( <expr><name><name pos:line="2931" pos:column="9">aMem<pos:position pos:line="2931" pos:column="13"/></name><index pos:line="2931" pos:column="13">[<expr><name pos:line="2931" pos:column="14">ii<pos:position pos:line="2931" pos:column="16"/></name></expr>]<pos:position pos:line="2931" pos:column="17"/></index></name><operator pos:line="2931" pos:column="17">.<pos:position pos:line="2931" pos:column="18"/></operator><name pos:line="2931" pos:column="18">flags<pos:position pos:line="2931" pos:column="23"/></name> <operator pos:line="2931" pos:column="24">&amp;<pos:position pos:line="2931" pos:column="29"/></operator> <name pos:line="2931" pos:column="26">MEM_Null<pos:position pos:line="2931" pos:column="34"/></name></expr> )<pos:position pos:line="2931" pos:column="36"/></condition><then><block pos:line="2931" pos:column="36">{
      <expr_stmt><expr><name pos:line="2932" pos:column="7">pc<pos:position pos:line="2932" pos:column="9"/></name> <operator pos:line="2932" pos:column="10">=<pos:position pos:line="2932" pos:column="11"/></operator> <name><name pos:line="2932" pos:column="12">pOp<pos:position pos:line="2932" pos:column="15"/></name><operator pos:line="2932" pos:column="15">-&gt;<pos:position pos:line="2932" pos:column="20"/></operator><name pos:line="2932" pos:column="17">p2<pos:position pos:line="2932" pos:column="19"/></name></name> <operator pos:line="2932" pos:column="20">-<pos:position pos:line="2932" pos:column="21"/></operator> <literal type="number" pos:line="2932" pos:column="22">1<pos:position pos:line="2932" pos:column="23"/></literal></expr>;<pos:position pos:line="2932" pos:column="24"/></expr_stmt>
      <expr_stmt><expr><name pos:line="2933" pos:column="7">pCrsr<pos:position pos:line="2933" pos:column="12"/></name> <operator pos:line="2933" pos:column="13">=<pos:position pos:line="2933" pos:column="14"/></operator> <literal type="number" pos:line="2933" pos:column="15">0<pos:position pos:line="2933" pos:column="16"/></literal></expr>;<pos:position pos:line="2933" pos:column="17"/></expr_stmt>
      <break pos:line="2934" pos:column="7">break;<pos:position pos:line="2934" pos:column="13"/></break>
    }<pos:position pos:line="2935" pos:column="6"/></block></then></if>
  }<pos:position pos:line="2936" pos:column="4"/></block></for>
  <expr_stmt><expr><call><name pos:line="2937" pos:column="3">assert<pos:position pos:line="2937" pos:column="9"/></name><argument_list pos:line="2937" pos:column="9">( <argument><expr><operator pos:line="2937" pos:column="11">(<pos:position pos:line="2937" pos:column="12"/></operator><name><name pos:line="2937" pos:column="12">aMem<pos:position pos:line="2937" pos:column="16"/></name><index pos:line="2937" pos:column="16">[<expr><name pos:line="2937" pos:column="17">nField<pos:position pos:line="2937" pos:column="23"/></name></expr>]<pos:position pos:line="2937" pos:column="24"/></index></name><operator pos:line="2937" pos:column="24">.<pos:position pos:line="2937" pos:column="25"/></operator><name pos:line="2937" pos:column="25">flags<pos:position pos:line="2937" pos:column="30"/></name> <operator pos:line="2937" pos:column="31">&amp;<pos:position pos:line="2937" pos:column="36"/></operator> <name pos:line="2937" pos:column="33">MEM_Null<pos:position pos:line="2937" pos:column="41"/></name><operator pos:line="2937" pos:column="41">)<pos:position pos:line="2937" pos:column="42"/></operator><operator pos:line="2937" pos:column="42">==<pos:position pos:line="2937" pos:column="44"/></operator><literal type="number" pos:line="2937" pos:column="44">0<pos:position pos:line="2937" pos:column="45"/></literal></expr></argument> )<pos:position pos:line="2937" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="2937" pos:column="48"/></expr_stmt>

  <if pos:line="2939" pos:column="3">if<condition pos:line="2939" pos:column="5">( <expr><name pos:line="2939" pos:column="7">pCrsr<pos:position pos:line="2939" pos:column="12"/></name><operator pos:line="2939" pos:column="12">!=<pos:position pos:line="2939" pos:column="14"/></operator><literal type="number" pos:line="2939" pos:column="14">0<pos:position pos:line="2939" pos:column="15"/></literal></expr> )<pos:position pos:line="2939" pos:column="17"/></condition><then><block pos:line="2939" pos:column="17">{
    <comment type="block" pos:line="2940" pos:column="5">/* Populate the index search key. */</comment>
    <expr_stmt><expr><name><name pos:line="2941" pos:column="5">r<pos:position pos:line="2941" pos:column="6"/></name><operator pos:line="2941" pos:column="6">.<pos:position pos:line="2941" pos:column="7"/></operator><name pos:line="2941" pos:column="7">pKeyInfo<pos:position pos:line="2941" pos:column="15"/></name></name> <operator pos:line="2941" pos:column="16">=<pos:position pos:line="2941" pos:column="17"/></operator> <name><name pos:line="2941" pos:column="18">pCx<pos:position pos:line="2941" pos:column="21"/></name><operator pos:line="2941" pos:column="21">-&gt;<pos:position pos:line="2941" pos:column="26"/></operator><name pos:line="2941" pos:column="23">pKeyInfo<pos:position pos:line="2941" pos:column="31"/></name></name></expr>;<pos:position pos:line="2941" pos:column="32"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="2942" pos:column="5">r<pos:position pos:line="2942" pos:column="6"/></name><operator pos:line="2942" pos:column="6">.<pos:position pos:line="2942" pos:column="7"/></operator><name pos:line="2942" pos:column="7">nField<pos:position pos:line="2942" pos:column="13"/></name></name> <operator pos:line="2942" pos:column="14">=<pos:position pos:line="2942" pos:column="15"/></operator> <name pos:line="2942" pos:column="16">nField<pos:position pos:line="2942" pos:column="22"/></name> <operator pos:line="2942" pos:column="23">+<pos:position pos:line="2942" pos:column="24"/></operator> <literal type="number" pos:line="2942" pos:column="25">1<pos:position pos:line="2942" pos:column="26"/></literal></expr>;<pos:position pos:line="2942" pos:column="27"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="2943" pos:column="5">r<pos:position pos:line="2943" pos:column="6"/></name><operator pos:line="2943" pos:column="6">.<pos:position pos:line="2943" pos:column="7"/></operator><name pos:line="2943" pos:column="7">flags<pos:position pos:line="2943" pos:column="12"/></name></name> <operator pos:line="2943" pos:column="13">=<pos:position pos:line="2943" pos:column="14"/></operator> <name pos:line="2943" pos:column="15">UNPACKED_PREFIX_SEARCH<pos:position pos:line="2943" pos:column="37"/></name></expr>;<pos:position pos:line="2943" pos:column="38"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="2944" pos:column="5">r<pos:position pos:line="2944" pos:column="6"/></name><operator pos:line="2944" pos:column="6">.<pos:position pos:line="2944" pos:column="7"/></operator><name pos:line="2944" pos:column="7">aMem<pos:position pos:line="2944" pos:column="11"/></name></name> <operator pos:line="2944" pos:column="12">=<pos:position pos:line="2944" pos:column="13"/></operator> <name pos:line="2944" pos:column="14">aMem<pos:position pos:line="2944" pos:column="18"/></name></expr>;<pos:position pos:line="2944" pos:column="19"/></expr_stmt>

    <comment type="block" pos:line="2946" pos:column="5">/* Extract the value of R from register P3. */</comment>
    <expr_stmt><expr><call><name pos:line="2947" pos:column="5">sqlite3VdbeMemIntegerify<pos:position pos:line="2947" pos:column="29"/></name><argument_list pos:line="2947" pos:column="29">(<argument><expr><name pos:line="2947" pos:column="30">pIn3<pos:position pos:line="2947" pos:column="34"/></name></expr></argument>)<pos:position pos:line="2947" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="2947" pos:column="36"/></expr_stmt>
    <expr_stmt><expr><name pos:line="2948" pos:column="5">R<pos:position pos:line="2948" pos:column="6"/></name> <operator pos:line="2948" pos:column="7">=<pos:position pos:line="2948" pos:column="8"/></operator> <name><name pos:line="2948" pos:column="9">pIn3<pos:position pos:line="2948" pos:column="13"/></name><operator pos:line="2948" pos:column="13">-&gt;<pos:position pos:line="2948" pos:column="18"/></operator><name pos:line="2948" pos:column="15">u<pos:position pos:line="2948" pos:column="16"/></name><operator pos:line="2948" pos:column="16">.<pos:position pos:line="2948" pos:column="17"/></operator><name pos:line="2948" pos:column="17">i<pos:position pos:line="2948" pos:column="18"/></name></name></expr>;<pos:position pos:line="2948" pos:column="19"/></expr_stmt>

    <comment type="block" pos:line="2950" pos:column="5">/* Search the B-Tree index. If no conflicting record is found, jump
    ** to P2. Otherwise, copy the rowid of the conflicting record to
    ** register P3 and fall through to the next instruction.  */</comment>
    <expr_stmt><expr><name pos:line="2953" pos:column="5">rc<pos:position pos:line="2953" pos:column="7"/></name> <operator pos:line="2953" pos:column="8">=<pos:position pos:line="2953" pos:column="9"/></operator> <call><name pos:line="2953" pos:column="10">sqlite3BtreeMovetoUnpacked<pos:position pos:line="2953" pos:column="36"/></name><argument_list pos:line="2953" pos:column="36">(<argument><expr><name pos:line="2953" pos:column="37">pCrsr<pos:position pos:line="2953" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="2953" pos:column="44">&amp;<pos:position pos:line="2953" pos:column="49"/></operator><name pos:line="2953" pos:column="45">r<pos:position pos:line="2953" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="2953" pos:column="48">0<pos:position pos:line="2953" pos:column="49"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="2953" pos:column="51">0<pos:position pos:line="2953" pos:column="52"/></literal></expr></argument>, <argument><expr><operator pos:line="2953" pos:column="54">&amp;<pos:position pos:line="2953" pos:column="59"/></operator><name><name pos:line="2953" pos:column="55">pCx<pos:position pos:line="2953" pos:column="58"/></name><operator pos:line="2953" pos:column="58">-&gt;<pos:position pos:line="2953" pos:column="63"/></operator><name pos:line="2953" pos:column="60">seekResult<pos:position pos:line="2953" pos:column="70"/></name></name></expr></argument>)<pos:position pos:line="2953" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="2953" pos:column="72"/></expr_stmt>
    <if pos:line="2954" pos:column="5">if<condition pos:line="2954" pos:column="7">( <expr><operator pos:line="2954" pos:column="9">(<pos:position pos:line="2954" pos:column="10"/></operator><name><name pos:line="2954" pos:column="10">r<pos:position pos:line="2954" pos:column="11"/></name><operator pos:line="2954" pos:column="11">.<pos:position pos:line="2954" pos:column="12"/></operator><name pos:line="2954" pos:column="12">flags<pos:position pos:line="2954" pos:column="17"/></name></name> <operator pos:line="2954" pos:column="18">&amp;<pos:position pos:line="2954" pos:column="23"/></operator> <name pos:line="2954" pos:column="20">UNPACKED_PREFIX_SEARCH<pos:position pos:line="2954" pos:column="42"/></name><operator pos:line="2954" pos:column="42">)<pos:position pos:line="2954" pos:column="43"/></operator> <operator pos:line="2954" pos:column="44">||<pos:position pos:line="2954" pos:column="46"/></operator> <name><name pos:line="2954" pos:column="47">r<pos:position pos:line="2954" pos:column="48"/></name><operator pos:line="2954" pos:column="48">.<pos:position pos:line="2954" pos:column="49"/></operator><name pos:line="2954" pos:column="49">rowid<pos:position pos:line="2954" pos:column="54"/></name></name><operator pos:line="2954" pos:column="54">==<pos:position pos:line="2954" pos:column="56"/></operator><name pos:line="2954" pos:column="56">R<pos:position pos:line="2954" pos:column="57"/></name></expr> )<pos:position pos:line="2954" pos:column="59"/></condition><then><block pos:line="2954" pos:column="59">{
      <expr_stmt><expr><name pos:line="2955" pos:column="7">pc<pos:position pos:line="2955" pos:column="9"/></name> <operator pos:line="2955" pos:column="10">=<pos:position pos:line="2955" pos:column="11"/></operator> <name><name pos:line="2955" pos:column="12">pOp<pos:position pos:line="2955" pos:column="15"/></name><operator pos:line="2955" pos:column="15">-&gt;<pos:position pos:line="2955" pos:column="20"/></operator><name pos:line="2955" pos:column="17">p2<pos:position pos:line="2955" pos:column="19"/></name></name> <operator pos:line="2955" pos:column="20">-<pos:position pos:line="2955" pos:column="21"/></operator> <literal type="number" pos:line="2955" pos:column="22">1<pos:position pos:line="2955" pos:column="23"/></literal></expr>;<pos:position pos:line="2955" pos:column="24"/></expr_stmt>
    }<pos:position pos:line="2956" pos:column="6"/></block></then><else pos:line="2956" pos:column="6">else<block pos:line="2956" pos:column="10">{
      <expr_stmt><expr><name><name pos:line="2957" pos:column="7">pIn3<pos:position pos:line="2957" pos:column="11"/></name><operator pos:line="2957" pos:column="11">-&gt;<pos:position pos:line="2957" pos:column="16"/></operator><name pos:line="2957" pos:column="13">u<pos:position pos:line="2957" pos:column="14"/></name><operator pos:line="2957" pos:column="14">.<pos:position pos:line="2957" pos:column="15"/></operator><name pos:line="2957" pos:column="15">i<pos:position pos:line="2957" pos:column="16"/></name></name> <operator pos:line="2957" pos:column="17">=<pos:position pos:line="2957" pos:column="18"/></operator> <name><name pos:line="2957" pos:column="19">r<pos:position pos:line="2957" pos:column="20"/></name><operator pos:line="2957" pos:column="20">.<pos:position pos:line="2957" pos:column="21"/></operator><name pos:line="2957" pos:column="21">rowid<pos:position pos:line="2957" pos:column="26"/></name></name></expr>;<pos:position pos:line="2957" pos:column="27"/></expr_stmt>
    }<pos:position pos:line="2958" pos:column="6"/></block></else></if>
  }<pos:position pos:line="2959" pos:column="4"/></block></then></if>
  <break pos:line="2960" pos:column="3">break;<pos:position pos:line="2960" pos:column="9"/></break>
}<pos:position pos:line="2961" pos:column="2"/></block>

<comment type="block" pos:line="2963" pos:column="1">/* Opcode: NotExists P1 P2 P3 * *
**
** Use the content of register P3 as a integer key.  If a record 
** with that key does not exist in table of P1, then jump to P2. 
** If the record does exist, then fall thru.  The cursor is left 
** pointing to the record if it exists.
**
** The difference between this operation and NotFound is that this
** operation assumes the key is an integer and that P1 is a table whereas
** NotFound assumes key is a blob constructed from MakeRecord and
** P1 is an index.
**
** See also: Found, NotFound, IsUnique
*/</comment>
<case pos:line="2977" pos:column="1">case <expr><name pos:line="2977" pos:column="6">OP_NotExists<pos:position pos:line="2977" pos:column="18"/></name></expr>:<pos:position pos:line="2977" pos:column="19"/></case> <block pos:line="2977" pos:column="20">{        <comment type="block" pos:line="2977" pos:column="29">/* jump, in3 */</comment>
  <decl_stmt><decl><type><name pos:line="2978" pos:column="3">int<pos:position pos:line="2978" pos:column="6"/></name></type> <name pos:line="2978" pos:column="7">i<pos:position pos:line="2978" pos:column="8"/></name></decl>;<pos:position pos:line="2978" pos:column="9"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="2979" pos:column="3">VdbeCursor<pos:position pos:line="2979" pos:column="13"/></name> <modifier pos:line="2979" pos:column="14">*<pos:position pos:line="2979" pos:column="15"/></modifier></type><name pos:line="2979" pos:column="15">pC<pos:position pos:line="2979" pos:column="17"/></name></decl>;<pos:position pos:line="2979" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="2980" pos:column="3">BtCursor<pos:position pos:line="2980" pos:column="11"/></name> <modifier pos:line="2980" pos:column="12">*<pos:position pos:line="2980" pos:column="13"/></modifier></type><name pos:line="2980" pos:column="13">pCrsr<pos:position pos:line="2980" pos:column="18"/></name></decl>;<pos:position pos:line="2980" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="2981" pos:column="3">int<pos:position pos:line="2981" pos:column="6"/></name></type> <name pos:line="2981" pos:column="7">res<pos:position pos:line="2981" pos:column="10"/></name></decl>;<pos:position pos:line="2981" pos:column="11"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="2982" pos:column="3">u64<pos:position pos:line="2982" pos:column="6"/></name></type> <name pos:line="2982" pos:column="7">iKey<pos:position pos:line="2982" pos:column="11"/></name></decl>;<pos:position pos:line="2982" pos:column="12"/></decl_stmt>

  <expr_stmt><expr><name pos:line="2984" pos:column="3">i<pos:position pos:line="2984" pos:column="4"/></name> <operator pos:line="2984" pos:column="5">=<pos:position pos:line="2984" pos:column="6"/></operator> <name><name pos:line="2984" pos:column="7">pOp<pos:position pos:line="2984" pos:column="10"/></name><operator pos:line="2984" pos:column="10">-&gt;<pos:position pos:line="2984" pos:column="15"/></operator><name pos:line="2984" pos:column="12">p1<pos:position pos:line="2984" pos:column="14"/></name></name></expr>;<pos:position pos:line="2984" pos:column="15"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="2985" pos:column="3">assert<pos:position pos:line="2985" pos:column="9"/></name><argument_list pos:line="2985" pos:column="9">( <argument><expr><name pos:line="2985" pos:column="11">i<pos:position pos:line="2985" pos:column="12"/></name><operator pos:line="2985" pos:column="12">&gt;=<pos:position pos:line="2985" pos:column="17"/></operator><literal type="number" pos:line="2985" pos:column="14">0<pos:position pos:line="2985" pos:column="15"/></literal> <operator pos:line="2985" pos:column="16">&amp;&amp;<pos:position pos:line="2985" pos:column="26"/></operator> <name pos:line="2985" pos:column="19">i<pos:position pos:line="2985" pos:column="20"/></name><operator pos:line="2985" pos:column="20">&lt;<pos:position pos:line="2985" pos:column="24"/></operator><name><name pos:line="2985" pos:column="21">p<pos:position pos:line="2985" pos:column="22"/></name><operator pos:line="2985" pos:column="22">-&gt;<pos:position pos:line="2985" pos:column="27"/></operator><name pos:line="2985" pos:column="24">nCursor<pos:position pos:line="2985" pos:column="31"/></name></name></expr></argument> )<pos:position pos:line="2985" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="2985" pos:column="34"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="2986" pos:column="3">assert<pos:position pos:line="2986" pos:column="9"/></name><argument_list pos:line="2986" pos:column="9">( <argument><expr><name><name pos:line="2986" pos:column="11">p<pos:position pos:line="2986" pos:column="12"/></name><operator pos:line="2986" pos:column="12">-&gt;<pos:position pos:line="2986" pos:column="17"/></operator><name pos:line="2986" pos:column="14">apCsr<pos:position pos:line="2986" pos:column="19"/></name><index pos:line="2986" pos:column="19">[<expr><name pos:line="2986" pos:column="20">i<pos:position pos:line="2986" pos:column="21"/></name></expr>]<pos:position pos:line="2986" pos:column="22"/></index></name><operator pos:line="2986" pos:column="22">!=<pos:position pos:line="2986" pos:column="24"/></operator><literal type="number" pos:line="2986" pos:column="24">0<pos:position pos:line="2986" pos:column="25"/></literal></expr></argument> )<pos:position pos:line="2986" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="2986" pos:column="28"/></expr_stmt>
  <if pos:line="2987" pos:column="3">if<condition pos:line="2987" pos:column="5">( <expr><operator pos:line="2987" pos:column="7">(<pos:position pos:line="2987" pos:column="8"/></operator><name pos:line="2987" pos:column="8">pCrsr<pos:position pos:line="2987" pos:column="13"/></name> <operator pos:line="2987" pos:column="14">=<pos:position pos:line="2987" pos:column="15"/></operator> <operator pos:line="2987" pos:column="16">(<pos:position pos:line="2987" pos:column="17"/></operator><name pos:line="2987" pos:column="17">pC<pos:position pos:line="2987" pos:column="19"/></name> <operator pos:line="2987" pos:column="20">=<pos:position pos:line="2987" pos:column="21"/></operator> <name><name pos:line="2987" pos:column="22">p<pos:position pos:line="2987" pos:column="23"/></name><operator pos:line="2987" pos:column="23">-&gt;<pos:position pos:line="2987" pos:column="28"/></operator><name pos:line="2987" pos:column="25">apCsr<pos:position pos:line="2987" pos:column="30"/></name><index pos:line="2987" pos:column="30">[<expr><name pos:line="2987" pos:column="31">i<pos:position pos:line="2987" pos:column="32"/></name></expr>]<pos:position pos:line="2987" pos:column="33"/></index></name><operator pos:line="2987" pos:column="33">)<pos:position pos:line="2987" pos:column="34"/></operator><operator pos:line="2987" pos:column="34">-&gt;<pos:position pos:line="2987" pos:column="39"/></operator><name pos:line="2987" pos:column="36">pCursor<pos:position pos:line="2987" pos:column="43"/></name><operator pos:line="2987" pos:column="43">)<pos:position pos:line="2987" pos:column="44"/></operator><operator pos:line="2987" pos:column="44">!=<pos:position pos:line="2987" pos:column="46"/></operator><literal type="number" pos:line="2987" pos:column="46">0<pos:position pos:line="2987" pos:column="47"/></literal></expr> )<pos:position pos:line="2987" pos:column="49"/></condition><then><block pos:line="2987" pos:column="49">{
    <expr_stmt><expr><name pos:line="2988" pos:column="5">res<pos:position pos:line="2988" pos:column="8"/></name> <operator pos:line="2988" pos:column="9">=<pos:position pos:line="2988" pos:column="10"/></operator> <literal type="number" pos:line="2988" pos:column="11">0<pos:position pos:line="2988" pos:column="12"/></literal></expr>;<pos:position pos:line="2988" pos:column="13"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="2989" pos:column="5">assert<pos:position pos:line="2989" pos:column="11"/></name><argument_list pos:line="2989" pos:column="11">( <argument><expr><name><name pos:line="2989" pos:column="13">pIn3<pos:position pos:line="2989" pos:column="17"/></name><operator pos:line="2989" pos:column="17">-&gt;<pos:position pos:line="2989" pos:column="22"/></operator><name pos:line="2989" pos:column="19">flags<pos:position pos:line="2989" pos:column="24"/></name></name> <operator pos:line="2989" pos:column="25">&amp;<pos:position pos:line="2989" pos:column="30"/></operator> <name pos:line="2989" pos:column="27">MEM_Int<pos:position pos:line="2989" pos:column="34"/></name></expr></argument> )<pos:position pos:line="2989" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="2989" pos:column="37"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="2990" pos:column="5">assert<pos:position pos:line="2990" pos:column="11"/></name><argument_list pos:line="2990" pos:column="11">( <argument><expr><name><name pos:line="2990" pos:column="13">p<pos:position pos:line="2990" pos:column="14"/></name><operator pos:line="2990" pos:column="14">-&gt;<pos:position pos:line="2990" pos:column="19"/></operator><name pos:line="2990" pos:column="16">apCsr<pos:position pos:line="2990" pos:column="21"/></name><index pos:line="2990" pos:column="21">[<expr><name pos:line="2990" pos:column="22">i<pos:position pos:line="2990" pos:column="23"/></name></expr>]<pos:position pos:line="2990" pos:column="24"/></index></name><operator pos:line="2990" pos:column="24">-&gt;<pos:position pos:line="2990" pos:column="29"/></operator><name pos:line="2990" pos:column="26">isTable<pos:position pos:line="2990" pos:column="33"/></name></expr></argument> )<pos:position pos:line="2990" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="2990" pos:column="36"/></expr_stmt>
    <expr_stmt><expr><name pos:line="2991" pos:column="5">iKey<pos:position pos:line="2991" pos:column="9"/></name> <operator pos:line="2991" pos:column="10">=<pos:position pos:line="2991" pos:column="11"/></operator> <call><name pos:line="2991" pos:column="12">intToKey<pos:position pos:line="2991" pos:column="20"/></name><argument_list pos:line="2991" pos:column="20">(<argument><expr><name><name pos:line="2991" pos:column="21">pIn3<pos:position pos:line="2991" pos:column="25"/></name><operator pos:line="2991" pos:column="25">-&gt;<pos:position pos:line="2991" pos:column="30"/></operator><name pos:line="2991" pos:column="27">u<pos:position pos:line="2991" pos:column="28"/></name><operator pos:line="2991" pos:column="28">.<pos:position pos:line="2991" pos:column="29"/></operator><name pos:line="2991" pos:column="29">i<pos:position pos:line="2991" pos:column="30"/></name></name></expr></argument>)<pos:position pos:line="2991" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="2991" pos:column="32"/></expr_stmt>
    <expr_stmt><expr><name pos:line="2992" pos:column="5">rc<pos:position pos:line="2992" pos:column="7"/></name> <operator pos:line="2992" pos:column="8">=<pos:position pos:line="2992" pos:column="9"/></operator> <call><name pos:line="2992" pos:column="10">sqlite3BtreeMovetoUnpacked<pos:position pos:line="2992" pos:column="36"/></name><argument_list pos:line="2992" pos:column="36">(<argument><expr><name pos:line="2992" pos:column="37">pCrsr<pos:position pos:line="2992" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="2992" pos:column="44">0<pos:position pos:line="2992" pos:column="45"/></literal></expr></argument>, <argument><expr><name pos:line="2992" pos:column="47">iKey<pos:position pos:line="2992" pos:column="51"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="2992" pos:column="53">0<pos:position pos:line="2992" pos:column="54"/></literal></expr></argument>, <argument><expr><operator pos:line="2992" pos:column="56">&amp;<pos:position pos:line="2992" pos:column="61"/></operator><name pos:line="2992" pos:column="57">res<pos:position pos:line="2992" pos:column="60"/></name></expr></argument>)<pos:position pos:line="2992" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="2992" pos:column="62"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="2993" pos:column="5">pC<pos:position pos:line="2993" pos:column="7"/></name><operator pos:line="2993" pos:column="7">-&gt;<pos:position pos:line="2993" pos:column="12"/></operator><name pos:line="2993" pos:column="9">lastRowid<pos:position pos:line="2993" pos:column="18"/></name></name> <operator pos:line="2993" pos:column="19">=<pos:position pos:line="2993" pos:column="20"/></operator> <name><name pos:line="2993" pos:column="21">pIn3<pos:position pos:line="2993" pos:column="25"/></name><operator pos:line="2993" pos:column="25">-&gt;<pos:position pos:line="2993" pos:column="30"/></operator><name pos:line="2993" pos:column="27">u<pos:position pos:line="2993" pos:column="28"/></name><operator pos:line="2993" pos:column="28">.<pos:position pos:line="2993" pos:column="29"/></operator><name pos:line="2993" pos:column="29">i<pos:position pos:line="2993" pos:column="30"/></name></name></expr>;<pos:position pos:line="2993" pos:column="31"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="2994" pos:column="5">pC<pos:position pos:line="2994" pos:column="7"/></name><operator pos:line="2994" pos:column="7">-&gt;<pos:position pos:line="2994" pos:column="12"/></operator><name pos:line="2994" pos:column="9">rowidIsValid<pos:position pos:line="2994" pos:column="21"/></name></name> <operator pos:line="2994" pos:column="22">=<pos:position pos:line="2994" pos:column="23"/></operator> <ternary><condition><expr><name pos:line="2994" pos:column="24">res<pos:position pos:line="2994" pos:column="27"/></name><operator pos:line="2994" pos:column="27">==<pos:position pos:line="2994" pos:column="29"/></operator><literal type="number" pos:line="2994" pos:column="29">0<pos:position pos:line="2994" pos:column="30"/></literal></expr> ?<pos:position pos:line="2994" pos:column="32"/></condition><then><expr><literal type="number" pos:line="2994" pos:column="32">1<pos:position pos:line="2994" pos:column="33"/></literal></expr></then><else pos:line="2994" pos:column="33">:<expr><literal type="number" pos:line="2994" pos:column="34">0<pos:position pos:line="2994" pos:column="35"/></literal></expr></else></ternary></expr>;<pos:position pos:line="2994" pos:column="36"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="2995" pos:column="5">pC<pos:position pos:line="2995" pos:column="7"/></name><operator pos:line="2995" pos:column="7">-&gt;<pos:position pos:line="2995" pos:column="12"/></operator><name pos:line="2995" pos:column="9">nullRow<pos:position pos:line="2995" pos:column="16"/></name></name> <operator pos:line="2995" pos:column="17">=<pos:position pos:line="2995" pos:column="18"/></operator> <literal type="number" pos:line="2995" pos:column="19">0<pos:position pos:line="2995" pos:column="20"/></literal></expr>;<pos:position pos:line="2995" pos:column="21"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="2996" pos:column="5">pC<pos:position pos:line="2996" pos:column="7"/></name><operator pos:line="2996" pos:column="7">-&gt;<pos:position pos:line="2996" pos:column="12"/></operator><name pos:line="2996" pos:column="9">cacheStatus<pos:position pos:line="2996" pos:column="20"/></name></name> <operator pos:line="2996" pos:column="21">=<pos:position pos:line="2996" pos:column="22"/></operator> <name pos:line="2996" pos:column="23">CACHE_STALE<pos:position pos:line="2996" pos:column="34"/></name></expr>;<pos:position pos:line="2996" pos:column="35"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="2997" pos:column="5">pC<pos:position pos:line="2997" pos:column="7"/></name><operator pos:line="2997" pos:column="7">-&gt;<pos:position pos:line="2997" pos:column="12"/></operator><name pos:line="2997" pos:column="9">deferredMoveto<pos:position pos:line="2997" pos:column="23"/></name></name> <operator pos:line="2997" pos:column="24">=<pos:position pos:line="2997" pos:column="25"/></operator> <literal type="number" pos:line="2997" pos:column="26">0<pos:position pos:line="2997" pos:column="27"/></literal></expr>;<pos:position pos:line="2997" pos:column="28"/></expr_stmt>
    <if pos:line="2998" pos:column="5">if<condition pos:line="2998" pos:column="7">( <expr><name pos:line="2998" pos:column="9">res<pos:position pos:line="2998" pos:column="12"/></name><operator pos:line="2998" pos:column="12">!=<pos:position pos:line="2998" pos:column="14"/></operator><literal type="number" pos:line="2998" pos:column="14">0<pos:position pos:line="2998" pos:column="15"/></literal></expr> )<pos:position pos:line="2998" pos:column="17"/></condition><then><block pos:line="2998" pos:column="17">{
      <expr_stmt><expr><name pos:line="2999" pos:column="7">pc<pos:position pos:line="2999" pos:column="9"/></name> <operator pos:line="2999" pos:column="10">=<pos:position pos:line="2999" pos:column="11"/></operator> <name><name pos:line="2999" pos:column="12">pOp<pos:position pos:line="2999" pos:column="15"/></name><operator pos:line="2999" pos:column="15">-&gt;<pos:position pos:line="2999" pos:column="20"/></operator><name pos:line="2999" pos:column="17">p2<pos:position pos:line="2999" pos:column="19"/></name></name> <operator pos:line="2999" pos:column="20">-<pos:position pos:line="2999" pos:column="21"/></operator> <literal type="number" pos:line="2999" pos:column="22">1<pos:position pos:line="2999" pos:column="23"/></literal></expr>;<pos:position pos:line="2999" pos:column="24"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="3000" pos:column="7">assert<pos:position pos:line="3000" pos:column="13"/></name><argument_list pos:line="3000" pos:column="13">( <argument><expr><name><name pos:line="3000" pos:column="15">pC<pos:position pos:line="3000" pos:column="17"/></name><operator pos:line="3000" pos:column="17">-&gt;<pos:position pos:line="3000" pos:column="22"/></operator><name pos:line="3000" pos:column="19">rowidIsValid<pos:position pos:line="3000" pos:column="31"/></name></name><operator pos:line="3000" pos:column="31">==<pos:position pos:line="3000" pos:column="33"/></operator><literal type="number" pos:line="3000" pos:column="33">0<pos:position pos:line="3000" pos:column="34"/></literal></expr></argument> )<pos:position pos:line="3000" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="3000" pos:column="37"/></expr_stmt>
    }<pos:position pos:line="3001" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name><name pos:line="3002" pos:column="5">pC<pos:position pos:line="3002" pos:column="7"/></name><operator pos:line="3002" pos:column="7">-&gt;<pos:position pos:line="3002" pos:column="12"/></operator><name pos:line="3002" pos:column="9">seekResult<pos:position pos:line="3002" pos:column="19"/></name></name> <operator pos:line="3002" pos:column="20">=<pos:position pos:line="3002" pos:column="21"/></operator> <name pos:line="3002" pos:column="22">res<pos:position pos:line="3002" pos:column="25"/></name></expr>;<pos:position pos:line="3002" pos:column="26"/></expr_stmt>
  }<pos:position pos:line="3003" pos:column="4"/></block></then><elseif pos:line="3003" pos:column="4">else <if pos:line="3003" pos:column="9">if<condition pos:line="3003" pos:column="11">( <expr><operator pos:line="3003" pos:column="13">!<pos:position pos:line="3003" pos:column="14"/></operator><name><name pos:line="3003" pos:column="14">pC<pos:position pos:line="3003" pos:column="16"/></name><operator pos:line="3003" pos:column="16">-&gt;<pos:position pos:line="3003" pos:column="21"/></operator><name pos:line="3003" pos:column="18">pseudoTable<pos:position pos:line="3003" pos:column="29"/></name></name></expr> )<pos:position pos:line="3003" pos:column="31"/></condition><then><block pos:line="3003" pos:column="31">{
    <comment type="block" pos:line="3004" pos:column="5">/* This happens when an attempt to open a read cursor on the 
    ** sqlite_master table returns SQLITE_EMPTY.
    */</comment>
    <expr_stmt><expr><call><name pos:line="3007" pos:column="5">assert<pos:position pos:line="3007" pos:column="11"/></name><argument_list pos:line="3007" pos:column="11">( <argument><expr><name><name pos:line="3007" pos:column="13">pC<pos:position pos:line="3007" pos:column="15"/></name><operator pos:line="3007" pos:column="15">-&gt;<pos:position pos:line="3007" pos:column="20"/></operator><name pos:line="3007" pos:column="17">isTable<pos:position pos:line="3007" pos:column="24"/></name></name></expr></argument> )<pos:position pos:line="3007" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="3007" pos:column="27"/></expr_stmt>
    <expr_stmt><expr><name pos:line="3008" pos:column="5">pc<pos:position pos:line="3008" pos:column="7"/></name> <operator pos:line="3008" pos:column="8">=<pos:position pos:line="3008" pos:column="9"/></operator> <name><name pos:line="3008" pos:column="10">pOp<pos:position pos:line="3008" pos:column="13"/></name><operator pos:line="3008" pos:column="13">-&gt;<pos:position pos:line="3008" pos:column="18"/></operator><name pos:line="3008" pos:column="15">p2<pos:position pos:line="3008" pos:column="17"/></name></name> <operator pos:line="3008" pos:column="18">-<pos:position pos:line="3008" pos:column="19"/></operator> <literal type="number" pos:line="3008" pos:column="20">1<pos:position pos:line="3008" pos:column="21"/></literal></expr>;<pos:position pos:line="3008" pos:column="22"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="3009" pos:column="5">assert<pos:position pos:line="3009" pos:column="11"/></name><argument_list pos:line="3009" pos:column="11">( <argument><expr><name><name pos:line="3009" pos:column="13">pC<pos:position pos:line="3009" pos:column="15"/></name><operator pos:line="3009" pos:column="15">-&gt;<pos:position pos:line="3009" pos:column="20"/></operator><name pos:line="3009" pos:column="17">rowidIsValid<pos:position pos:line="3009" pos:column="29"/></name></name><operator pos:line="3009" pos:column="29">==<pos:position pos:line="3009" pos:column="31"/></operator><literal type="number" pos:line="3009" pos:column="31">0<pos:position pos:line="3009" pos:column="32"/></literal></expr></argument> )<pos:position pos:line="3009" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="3009" pos:column="35"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="3010" pos:column="5">pC<pos:position pos:line="3010" pos:column="7"/></name><operator pos:line="3010" pos:column="7">-&gt;<pos:position pos:line="3010" pos:column="12"/></operator><name pos:line="3010" pos:column="9">seekResult<pos:position pos:line="3010" pos:column="19"/></name></name> <operator pos:line="3010" pos:column="20">=<pos:position pos:line="3010" pos:column="21"/></operator> <literal type="number" pos:line="3010" pos:column="22">0<pos:position pos:line="3010" pos:column="23"/></literal></expr>;<pos:position pos:line="3010" pos:column="24"/></expr_stmt>
  }<pos:position pos:line="3011" pos:column="4"/></block></then></if></elseif></if>
  <break pos:line="3012" pos:column="3">break;<pos:position pos:line="3012" pos:column="9"/></break>
}<pos:position pos:line="3013" pos:column="2"/></block>

<comment type="block" pos:line="3015" pos:column="1">/* Opcode: Sequence P1 P2 * * *
**
** Find the next available sequence number for cursor P1.
** Write the sequence number into register P2.
** The sequence number on the cursor is incremented after this
** instruction.  
*/</comment>
<case pos:line="3022" pos:column="1">case <expr><name pos:line="3022" pos:column="6">OP_Sequence<pos:position pos:line="3022" pos:column="17"/></name></expr>:<pos:position pos:line="3022" pos:column="18"/></case> <block pos:line="3022" pos:column="19">{           <comment type="block" pos:line="3022" pos:column="31">/* out2-prerelease */</comment>
  <decl_stmt><decl><type><name pos:line="3023" pos:column="3">int<pos:position pos:line="3023" pos:column="6"/></name></type> <name pos:line="3023" pos:column="7">i<pos:position pos:line="3023" pos:column="8"/></name> <init pos:line="3023" pos:column="9">= <expr><name><name pos:line="3023" pos:column="11">pOp<pos:position pos:line="3023" pos:column="14"/></name><operator pos:line="3023" pos:column="14">-&gt;<pos:position pos:line="3023" pos:column="19"/></operator><name pos:line="3023" pos:column="16">p1<pos:position pos:line="3023" pos:column="18"/></name></name></expr></init></decl>;<pos:position pos:line="3023" pos:column="19"/></decl_stmt>
  <expr_stmt><expr><call><name pos:line="3024" pos:column="3">assert<pos:position pos:line="3024" pos:column="9"/></name><argument_list pos:line="3024" pos:column="9">( <argument><expr><name pos:line="3024" pos:column="11">i<pos:position pos:line="3024" pos:column="12"/></name><operator pos:line="3024" pos:column="12">&gt;=<pos:position pos:line="3024" pos:column="17"/></operator><literal type="number" pos:line="3024" pos:column="14">0<pos:position pos:line="3024" pos:column="15"/></literal> <operator pos:line="3024" pos:column="16">&amp;&amp;<pos:position pos:line="3024" pos:column="26"/></operator> <name pos:line="3024" pos:column="19">i<pos:position pos:line="3024" pos:column="20"/></name><operator pos:line="3024" pos:column="20">&lt;<pos:position pos:line="3024" pos:column="24"/></operator><name><name pos:line="3024" pos:column="21">p<pos:position pos:line="3024" pos:column="22"/></name><operator pos:line="3024" pos:column="22">-&gt;<pos:position pos:line="3024" pos:column="27"/></operator><name pos:line="3024" pos:column="24">nCursor<pos:position pos:line="3024" pos:column="31"/></name></name></expr></argument> )<pos:position pos:line="3024" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="3024" pos:column="34"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="3025" pos:column="3">assert<pos:position pos:line="3025" pos:column="9"/></name><argument_list pos:line="3025" pos:column="9">( <argument><expr><name><name pos:line="3025" pos:column="11">p<pos:position pos:line="3025" pos:column="12"/></name><operator pos:line="3025" pos:column="12">-&gt;<pos:position pos:line="3025" pos:column="17"/></operator><name pos:line="3025" pos:column="14">apCsr<pos:position pos:line="3025" pos:column="19"/></name><index pos:line="3025" pos:column="19">[<expr><name pos:line="3025" pos:column="20">i<pos:position pos:line="3025" pos:column="21"/></name></expr>]<pos:position pos:line="3025" pos:column="22"/></index></name><operator pos:line="3025" pos:column="22">!=<pos:position pos:line="3025" pos:column="24"/></operator><literal type="number" pos:line="3025" pos:column="24">0<pos:position pos:line="3025" pos:column="25"/></literal></expr></argument> )<pos:position pos:line="3025" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="3025" pos:column="28"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="3026" pos:column="3">pOut<pos:position pos:line="3026" pos:column="7"/></name><operator pos:line="3026" pos:column="7">-&gt;<pos:position pos:line="3026" pos:column="12"/></operator><name pos:line="3026" pos:column="9">u<pos:position pos:line="3026" pos:column="10"/></name><operator pos:line="3026" pos:column="10">.<pos:position pos:line="3026" pos:column="11"/></operator><name pos:line="3026" pos:column="11">i<pos:position pos:line="3026" pos:column="12"/></name></name> <operator pos:line="3026" pos:column="13">=<pos:position pos:line="3026" pos:column="14"/></operator> <name><name pos:line="3026" pos:column="15">p<pos:position pos:line="3026" pos:column="16"/></name><operator pos:line="3026" pos:column="16">-&gt;<pos:position pos:line="3026" pos:column="21"/></operator><name pos:line="3026" pos:column="18">apCsr<pos:position pos:line="3026" pos:column="23"/></name><index pos:line="3026" pos:column="23">[<expr><name pos:line="3026" pos:column="24">i<pos:position pos:line="3026" pos:column="25"/></name></expr>]<pos:position pos:line="3026" pos:column="26"/></index></name><operator pos:line="3026" pos:column="26">-&gt;<pos:position pos:line="3026" pos:column="31"/></operator><name pos:line="3026" pos:column="28">seqCount<pos:position pos:line="3026" pos:column="36"/></name><operator pos:line="3026" pos:column="36">++<pos:position pos:line="3026" pos:column="38"/></operator></expr>;<pos:position pos:line="3026" pos:column="39"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="3027" pos:column="3">MemSetTypeFlag<pos:position pos:line="3027" pos:column="17"/></name><argument_list pos:line="3027" pos:column="17">(<argument><expr><name pos:line="3027" pos:column="18">pOut<pos:position pos:line="3027" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="3027" pos:column="24">MEM_Int<pos:position pos:line="3027" pos:column="31"/></name></expr></argument>)<pos:position pos:line="3027" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="3027" pos:column="33"/></expr_stmt>
  <break pos:line="3028" pos:column="3">break;<pos:position pos:line="3028" pos:column="9"/></break>
}<pos:position pos:line="3029" pos:column="2"/></block>


<comment type="block" pos:line="3032" pos:column="1">/* Opcode: NewRowid P1 P2 P3 * *
**
** Get a new integer record number (a.k.a "rowid") used as the key to a table.
** The record number is not previously used as a key in the database
** table that cursor P1 points to.  The new record number is written
** written to register P2.
**
** If P3&gt;0 then P3 is a register that holds the largest previously
** generated record number.  No new record numbers are allowed to be less
** than this value.  When this value reaches its maximum, a SQLITE_FULL
** error is generated.  The P3 register is updated with the generated
** record number.  This P3 mechanism is used to help implement the
** AUTOINCREMENT feature.
*/</comment>
<case pos:line="3046" pos:column="1">case <expr><name pos:line="3046" pos:column="6">OP_NewRowid<pos:position pos:line="3046" pos:column="17"/></name></expr>:<pos:position pos:line="3046" pos:column="18"/></case> <block pos:line="3046" pos:column="19">{           <comment type="block" pos:line="3046" pos:column="31">/* out2-prerelease */</comment>
  <decl_stmt><decl><type><name pos:line="3047" pos:column="3">int<pos:position pos:line="3047" pos:column="6"/></name></type> <name pos:line="3047" pos:column="7">i<pos:position pos:line="3047" pos:column="8"/></name></decl>;<pos:position pos:line="3047" pos:column="9"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="3048" pos:column="3">i64<pos:position pos:line="3048" pos:column="6"/></name></type> <name pos:line="3048" pos:column="7">v<pos:position pos:line="3048" pos:column="8"/></name></decl>;<pos:position pos:line="3048" pos:column="9"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="3049" pos:column="3">VdbeCursor<pos:position pos:line="3049" pos:column="13"/></name> <modifier pos:line="3049" pos:column="14">*<pos:position pos:line="3049" pos:column="15"/></modifier></type><name pos:line="3049" pos:column="15">pC<pos:position pos:line="3049" pos:column="17"/></name></decl>;<pos:position pos:line="3049" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="3050" pos:column="3">int<pos:position pos:line="3050" pos:column="6"/></name></type> <name pos:line="3050" pos:column="7">res<pos:position pos:line="3050" pos:column="10"/></name></decl>;<pos:position pos:line="3050" pos:column="11"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="3051" pos:column="3">int<pos:position pos:line="3051" pos:column="6"/></name></type> <name pos:line="3051" pos:column="7">rx<pos:position pos:line="3051" pos:column="9"/></name></decl>;<pos:position pos:line="3051" pos:column="10"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="3052" pos:column="3">int<pos:position pos:line="3052" pos:column="6"/></name></type> <name pos:line="3052" pos:column="7">cnt<pos:position pos:line="3052" pos:column="10"/></name></decl>;<pos:position pos:line="3052" pos:column="11"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="3053" pos:column="3">i64<pos:position pos:line="3053" pos:column="6"/></name></type> <name pos:line="3053" pos:column="7">x<pos:position pos:line="3053" pos:column="8"/></name></decl>;<pos:position pos:line="3053" pos:column="9"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="3054" pos:column="3">Mem<pos:position pos:line="3054" pos:column="6"/></name> <modifier pos:line="3054" pos:column="7">*<pos:position pos:line="3054" pos:column="8"/></modifier></type><name pos:line="3054" pos:column="8">pMem<pos:position pos:line="3054" pos:column="12"/></name></decl>;<pos:position pos:line="3054" pos:column="13"/></decl_stmt>

  <expr_stmt><expr><name pos:line="3056" pos:column="3">i<pos:position pos:line="3056" pos:column="4"/></name> <operator pos:line="3056" pos:column="5">=<pos:position pos:line="3056" pos:column="6"/></operator> <name><name pos:line="3056" pos:column="7">pOp<pos:position pos:line="3056" pos:column="10"/></name><operator pos:line="3056" pos:column="10">-&gt;<pos:position pos:line="3056" pos:column="15"/></operator><name pos:line="3056" pos:column="12">p1<pos:position pos:line="3056" pos:column="14"/></name></name></expr>;<pos:position pos:line="3056" pos:column="15"/></expr_stmt>
  <expr_stmt><expr><name pos:line="3057" pos:column="3">v<pos:position pos:line="3057" pos:column="4"/></name> <operator pos:line="3057" pos:column="5">=<pos:position pos:line="3057" pos:column="6"/></operator> <literal type="number" pos:line="3057" pos:column="7">0<pos:position pos:line="3057" pos:column="8"/></literal></expr>;<pos:position pos:line="3057" pos:column="9"/></expr_stmt>
  <expr_stmt><expr><name pos:line="3058" pos:column="3">res<pos:position pos:line="3058" pos:column="6"/></name> <operator pos:line="3058" pos:column="7">=<pos:position pos:line="3058" pos:column="8"/></operator> <literal type="number" pos:line="3058" pos:column="9">0<pos:position pos:line="3058" pos:column="10"/></literal></expr>;<pos:position pos:line="3058" pos:column="11"/></expr_stmt>
  <expr_stmt><expr><name pos:line="3059" pos:column="3">rx<pos:position pos:line="3059" pos:column="5"/></name> <operator pos:line="3059" pos:column="6">=<pos:position pos:line="3059" pos:column="7"/></operator> <name pos:line="3059" pos:column="8">SQLITE_OK<pos:position pos:line="3059" pos:column="17"/></name></expr>;<pos:position pos:line="3059" pos:column="18"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="3060" pos:column="3">assert<pos:position pos:line="3060" pos:column="9"/></name><argument_list pos:line="3060" pos:column="9">( <argument><expr><name pos:line="3060" pos:column="11">i<pos:position pos:line="3060" pos:column="12"/></name><operator pos:line="3060" pos:column="12">&gt;=<pos:position pos:line="3060" pos:column="17"/></operator><literal type="number" pos:line="3060" pos:column="14">0<pos:position pos:line="3060" pos:column="15"/></literal> <operator pos:line="3060" pos:column="16">&amp;&amp;<pos:position pos:line="3060" pos:column="26"/></operator> <name pos:line="3060" pos:column="19">i<pos:position pos:line="3060" pos:column="20"/></name><operator pos:line="3060" pos:column="20">&lt;<pos:position pos:line="3060" pos:column="24"/></operator><name><name pos:line="3060" pos:column="21">p<pos:position pos:line="3060" pos:column="22"/></name><operator pos:line="3060" pos:column="22">-&gt;<pos:position pos:line="3060" pos:column="27"/></operator><name pos:line="3060" pos:column="24">nCursor<pos:position pos:line="3060" pos:column="31"/></name></name></expr></argument> )<pos:position pos:line="3060" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="3060" pos:column="34"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="3061" pos:column="3">assert<pos:position pos:line="3061" pos:column="9"/></name><argument_list pos:line="3061" pos:column="9">( <argument><expr><name><name pos:line="3061" pos:column="11">p<pos:position pos:line="3061" pos:column="12"/></name><operator pos:line="3061" pos:column="12">-&gt;<pos:position pos:line="3061" pos:column="17"/></operator><name pos:line="3061" pos:column="14">apCsr<pos:position pos:line="3061" pos:column="19"/></name><index pos:line="3061" pos:column="19">[<expr><name pos:line="3061" pos:column="20">i<pos:position pos:line="3061" pos:column="21"/></name></expr>]<pos:position pos:line="3061" pos:column="22"/></index></name><operator pos:line="3061" pos:column="22">!=<pos:position pos:line="3061" pos:column="24"/></operator><literal type="number" pos:line="3061" pos:column="24">0<pos:position pos:line="3061" pos:column="25"/></literal></expr></argument> )<pos:position pos:line="3061" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="3061" pos:column="28"/></expr_stmt>
  <if pos:line="3062" pos:column="3">if<condition pos:line="3062" pos:column="5">( <expr><operator pos:line="3062" pos:column="7">(<pos:position pos:line="3062" pos:column="8"/></operator><name pos:line="3062" pos:column="8">pC<pos:position pos:line="3062" pos:column="10"/></name> <operator pos:line="3062" pos:column="11">=<pos:position pos:line="3062" pos:column="12"/></operator> <name><name pos:line="3062" pos:column="13">p<pos:position pos:line="3062" pos:column="14"/></name><operator pos:line="3062" pos:column="14">-&gt;<pos:position pos:line="3062" pos:column="19"/></operator><name pos:line="3062" pos:column="16">apCsr<pos:position pos:line="3062" pos:column="21"/></name><index pos:line="3062" pos:column="21">[<expr><name pos:line="3062" pos:column="22">i<pos:position pos:line="3062" pos:column="23"/></name></expr>]<pos:position pos:line="3062" pos:column="24"/></index></name><operator pos:line="3062" pos:column="24">)<pos:position pos:line="3062" pos:column="25"/></operator><operator pos:line="3062" pos:column="25">-&gt;<pos:position pos:line="3062" pos:column="30"/></operator><name pos:line="3062" pos:column="27">pCursor<pos:position pos:line="3062" pos:column="34"/></name><operator pos:line="3062" pos:column="34">==<pos:position pos:line="3062" pos:column="36"/></operator><literal type="number" pos:line="3062" pos:column="36">0<pos:position pos:line="3062" pos:column="37"/></literal></expr> )<pos:position pos:line="3062" pos:column="39"/></condition><then><block pos:line="3062" pos:column="39">{
    <comment type="block" pos:line="3063" pos:column="5">/* The zero initialization above is all that is needed */</comment>
  }<pos:position pos:line="3064" pos:column="4"/></block></then><else pos:line="3064" pos:column="4">else<block pos:line="3064" pos:column="8">{
    <comment type="block" pos:line="3065" pos:column="5">/* The next rowid or record number (different terms for the same
    ** thing) is obtained in a two-step algorithm.
    **
    ** First we attempt to find the largest existing rowid and add one
    ** to that.  But if the largest existing rowid is already the maximum
    ** positive integer, we have to fall through to the second
    ** probabilistic algorithm
    **
    ** The second algorithm is to select a rowid at random and see if
    ** it already exists in the table.  If it does not exist, we have
    ** succeeded.  If the random rowid does exist, we select a new one
    ** and try again, up to 1000 times.
    **
    ** For a table with less than 2 billion entries, the probability
    ** of not finding a unused rowid is about 1.0e-300.  This is a 
    ** non-zero probability, but it is still vanishingly small and should
    ** never cause a problem.  You are much, much more likely to have a
    ** hardware failure than for this algorithm to fail.
    **
    ** The analysis in the previous paragraph assumes that you have a good
    ** source of random numbers.  Is a library function like lrand48()
    ** good enough?  Maybe. Maybe not. It's hard to know whether there
    ** might be subtle bugs is some implementations of lrand48() that
    ** could cause problems. To avoid uncertainty, SQLite uses its own 
    ** random number generator based on the RC4 algorithm.
    **
    ** To promote locality of reference for repetitive inserts, the
    ** first few attempts at choosing a random rowid pick values just a little
    ** larger than the previous rowid.  This has been shown experimentally
    ** to double the speed of the COPY operation.
    */</comment>
    <expr_stmt><expr><name pos:line="3096" pos:column="5">cnt<pos:position pos:line="3096" pos:column="8"/></name> <operator pos:line="3096" pos:column="9">=<pos:position pos:line="3096" pos:column="10"/></operator> <literal type="number" pos:line="3096" pos:column="11">0<pos:position pos:line="3096" pos:column="12"/></literal></expr>;<pos:position pos:line="3096" pos:column="13"/></expr_stmt>
    <if pos:line="3097" pos:column="5">if<condition pos:line="3097" pos:column="7">( <expr><operator pos:line="3097" pos:column="9">(<pos:position pos:line="3097" pos:column="10"/></operator><call><name pos:line="3097" pos:column="10">sqlite3BtreeFlags<pos:position pos:line="3097" pos:column="27"/></name><argument_list pos:line="3097" pos:column="27">(<argument><expr><name><name pos:line="3097" pos:column="28">pC<pos:position pos:line="3097" pos:column="30"/></name><operator pos:line="3097" pos:column="30">-&gt;<pos:position pos:line="3097" pos:column="35"/></operator><name pos:line="3097" pos:column="32">pCursor<pos:position pos:line="3097" pos:column="39"/></name></name></expr></argument>)<pos:position pos:line="3097" pos:column="40"/></argument_list></call><operator pos:line="3097" pos:column="40">&amp;<pos:position pos:line="3097" pos:column="45"/></operator><operator pos:line="3097" pos:column="41">(<pos:position pos:line="3097" pos:column="42"/></operator><name pos:line="3097" pos:column="42">BTREE_INTKEY<pos:position pos:line="3097" pos:column="54"/></name><operator pos:line="3097" pos:column="54">|<pos:position pos:line="3097" pos:column="55"/></operator><name pos:line="3097" pos:column="55">BTREE_ZERODATA<pos:position pos:line="3097" pos:column="69"/></name><operator pos:line="3097" pos:column="69">)<pos:position pos:line="3097" pos:column="70"/></operator><operator pos:line="3097" pos:column="70">)<pos:position pos:line="3097" pos:column="71"/></operator> <operator pos:line="3097" pos:column="72">!=<pos:position pos:line="3097" pos:column="74"/></operator>
          <name pos:line="3098" pos:column="11">BTREE_INTKEY<pos:position pos:line="3098" pos:column="23"/></name></expr> )<pos:position pos:line="3098" pos:column="25"/></condition><then><block pos:line="3098" pos:column="25">{
      <expr_stmt><expr><name pos:line="3099" pos:column="7">rc<pos:position pos:line="3099" pos:column="9"/></name> <operator pos:line="3099" pos:column="10">=<pos:position pos:line="3099" pos:column="11"/></operator> <name pos:line="3099" pos:column="12">SQLITE_CORRUPT_BKPT<pos:position pos:line="3099" pos:column="31"/></name></expr>;<pos:position pos:line="3099" pos:column="32"/></expr_stmt>
      <goto pos:line="3100" pos:column="7">goto <name pos:line="3100" pos:column="12">abort_due_to_error<pos:position pos:line="3100" pos:column="30"/></name>;<pos:position pos:line="3100" pos:column="31"/></goto>
    }<pos:position pos:line="3101" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="3102" pos:column="5">assert<pos:position pos:line="3102" pos:column="11"/></name><argument_list pos:line="3102" pos:column="11">( <argument><expr><operator pos:line="3102" pos:column="13">(<pos:position pos:line="3102" pos:column="14"/></operator><call><name pos:line="3102" pos:column="14">sqlite3BtreeFlags<pos:position pos:line="3102" pos:column="31"/></name><argument_list pos:line="3102" pos:column="31">(<argument><expr><name><name pos:line="3102" pos:column="32">pC<pos:position pos:line="3102" pos:column="34"/></name><operator pos:line="3102" pos:column="34">-&gt;<pos:position pos:line="3102" pos:column="39"/></operator><name pos:line="3102" pos:column="36">pCursor<pos:position pos:line="3102" pos:column="43"/></name></name></expr></argument>)<pos:position pos:line="3102" pos:column="44"/></argument_list></call> <operator pos:line="3102" pos:column="45">&amp;<pos:position pos:line="3102" pos:column="50"/></operator> <name pos:line="3102" pos:column="47">BTREE_INTKEY<pos:position pos:line="3102" pos:column="59"/></name><operator pos:line="3102" pos:column="59">)<pos:position pos:line="3102" pos:column="60"/></operator><operator pos:line="3102" pos:column="60">!=<pos:position pos:line="3102" pos:column="62"/></operator><literal type="number" pos:line="3102" pos:column="62">0<pos:position pos:line="3102" pos:column="63"/></literal></expr></argument> )<pos:position pos:line="3102" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="3102" pos:column="66"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="3103" pos:column="5">assert<pos:position pos:line="3103" pos:column="11"/></name><argument_list pos:line="3103" pos:column="11">( <argument><expr><operator pos:line="3103" pos:column="13">(<pos:position pos:line="3103" pos:column="14"/></operator><call><name pos:line="3103" pos:column="14">sqlite3BtreeFlags<pos:position pos:line="3103" pos:column="31"/></name><argument_list pos:line="3103" pos:column="31">(<argument><expr><name><name pos:line="3103" pos:column="32">pC<pos:position pos:line="3103" pos:column="34"/></name><operator pos:line="3103" pos:column="34">-&gt;<pos:position pos:line="3103" pos:column="39"/></operator><name pos:line="3103" pos:column="36">pCursor<pos:position pos:line="3103" pos:column="43"/></name></name></expr></argument>)<pos:position pos:line="3103" pos:column="44"/></argument_list></call> <operator pos:line="3103" pos:column="45">&amp;<pos:position pos:line="3103" pos:column="50"/></operator> <name pos:line="3103" pos:column="47">BTREE_ZERODATA<pos:position pos:line="3103" pos:column="61"/></name><operator pos:line="3103" pos:column="61">)<pos:position pos:line="3103" pos:column="62"/></operator><operator pos:line="3103" pos:column="62">==<pos:position pos:line="3103" pos:column="64"/></operator><literal type="number" pos:line="3103" pos:column="64">0<pos:position pos:line="3103" pos:column="65"/></literal></expr></argument> )<pos:position pos:line="3103" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="3103" pos:column="68"/></expr_stmt>

<cpp:ifdef pos:line="3105" pos:column="1">#<cpp:directive pos:line="3105" pos:column="2">ifdef<pos:position pos:line="3105" pos:column="7"/></cpp:directive> <name pos:line="3105" pos:column="8">SQLITE_32BIT_ROWID<pos:position pos:line="3105" pos:column="26"/></name></cpp:ifdef>
<cpp:define pos:line="3106" pos:column="1">#   <cpp:directive pos:line="3106" pos:column="5">define<pos:position pos:line="3106" pos:column="11"/></cpp:directive> <cpp:macro><name pos:line="3106" pos:column="12">MAX_ROWID<pos:position pos:line="3106" pos:column="21"/></name></cpp:macro> <cpp:value pos:line="3106" pos:column="22">0x7fffffff<pos:position pos:line="3106" pos:column="32"/></cpp:value></cpp:define>
<cpp:else pos:line="3107" pos:column="1">#<cpp:directive pos:line="3107" pos:column="2">else<pos:position pos:line="3107" pos:column="6"/></cpp:directive></cpp:else>
    <comment type="block" pos:line="3108" pos:column="5">/* Some compilers complain about constants of the form 0x7fffffffffffffff.
    ** Others complain about 0x7ffffffffffffffffLL.  The following macro seems
    ** to provide the constant while making all compilers happy.
    */</comment>
<cpp:define pos:line="3112" pos:column="1">#   <cpp:directive pos:line="3112" pos:column="5">define<pos:position pos:line="3112" pos:column="11"/></cpp:directive> <cpp:macro><name pos:line="3112" pos:column="12">MAX_ROWID<pos:position pos:line="3112" pos:column="21"/></name></cpp:macro>  <cpp:value pos:line="3112" pos:column="23">(i64)( (((u64)0x7fffffff)&lt;&lt;32) | (u64)0xffffffff )<pos:position pos:line="3112" pos:column="73"/></cpp:value></cpp:define>
<cpp:endif pos:line="3113" pos:column="1">#<cpp:directive pos:line="3113" pos:column="2">endif<pos:position pos:line="3113" pos:column="7"/></cpp:directive></cpp:endif>

    <if pos:line="3115" pos:column="5">if<condition pos:line="3115" pos:column="7">( <expr><operator pos:line="3115" pos:column="9">!<pos:position pos:line="3115" pos:column="10"/></operator><name><name pos:line="3115" pos:column="10">pC<pos:position pos:line="3115" pos:column="12"/></name><operator pos:line="3115" pos:column="12">-&gt;<pos:position pos:line="3115" pos:column="17"/></operator><name pos:line="3115" pos:column="14">useRandomRowid<pos:position pos:line="3115" pos:column="28"/></name></name></expr> )<pos:position pos:line="3115" pos:column="30"/></condition><then><block pos:line="3115" pos:column="30">{
      <expr_stmt><expr><name pos:line="3116" pos:column="7">v<pos:position pos:line="3116" pos:column="8"/></name> <operator pos:line="3116" pos:column="9">=<pos:position pos:line="3116" pos:column="10"/></operator> <call><name pos:line="3116" pos:column="11">sqlite3BtreeGetCachedRowid<pos:position pos:line="3116" pos:column="37"/></name><argument_list pos:line="3116" pos:column="37">(<argument><expr><name><name pos:line="3116" pos:column="38">pC<pos:position pos:line="3116" pos:column="40"/></name><operator pos:line="3116" pos:column="40">-&gt;<pos:position pos:line="3116" pos:column="45"/></operator><name pos:line="3116" pos:column="42">pCursor<pos:position pos:line="3116" pos:column="49"/></name></name></expr></argument>)<pos:position pos:line="3116" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="3116" pos:column="51"/></expr_stmt>
      <if pos:line="3117" pos:column="7">if<condition pos:line="3117" pos:column="9">( <expr><name pos:line="3117" pos:column="11">v<pos:position pos:line="3117" pos:column="12"/></name><operator pos:line="3117" pos:column="12">==<pos:position pos:line="3117" pos:column="14"/></operator><literal type="number" pos:line="3117" pos:column="14">0<pos:position pos:line="3117" pos:column="15"/></literal></expr> )<pos:position pos:line="3117" pos:column="17"/></condition><then><block pos:line="3117" pos:column="17">{
        <expr_stmt><expr><name pos:line="3118" pos:column="9">rc<pos:position pos:line="3118" pos:column="11"/></name> <operator pos:line="3118" pos:column="12">=<pos:position pos:line="3118" pos:column="13"/></operator> <call><name pos:line="3118" pos:column="14">sqlite3BtreeLast<pos:position pos:line="3118" pos:column="30"/></name><argument_list pos:line="3118" pos:column="30">(<argument><expr><name><name pos:line="3118" pos:column="31">pC<pos:position pos:line="3118" pos:column="33"/></name><operator pos:line="3118" pos:column="33">-&gt;<pos:position pos:line="3118" pos:column="38"/></operator><name pos:line="3118" pos:column="35">pCursor<pos:position pos:line="3118" pos:column="42"/></name></name></expr></argument>, <argument><expr><operator pos:line="3118" pos:column="44">&amp;<pos:position pos:line="3118" pos:column="49"/></operator><name pos:line="3118" pos:column="45">res<pos:position pos:line="3118" pos:column="48"/></name></expr></argument>)<pos:position pos:line="3118" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="3118" pos:column="50"/></expr_stmt>
        <if pos:line="3119" pos:column="9">if<condition pos:line="3119" pos:column="11">( <expr><name pos:line="3119" pos:column="13">rc<pos:position pos:line="3119" pos:column="15"/></name><operator pos:line="3119" pos:column="15">!=<pos:position pos:line="3119" pos:column="17"/></operator><name pos:line="3119" pos:column="17">SQLITE_OK<pos:position pos:line="3119" pos:column="26"/></name></expr> )<pos:position pos:line="3119" pos:column="28"/></condition><then><block pos:line="3119" pos:column="28">{
          <goto pos:line="3120" pos:column="11">goto <name pos:line="3120" pos:column="16">abort_due_to_error<pos:position pos:line="3120" pos:column="34"/></name>;<pos:position pos:line="3120" pos:column="35"/></goto>
        }<pos:position pos:line="3121" pos:column="10"/></block></then></if>
        <if pos:line="3122" pos:column="9">if<condition pos:line="3122" pos:column="11">( <expr><name pos:line="3122" pos:column="13">res<pos:position pos:line="3122" pos:column="16"/></name></expr> )<pos:position pos:line="3122" pos:column="18"/></condition><then><block pos:line="3122" pos:column="18">{
          <expr_stmt><expr><name pos:line="3123" pos:column="11">v<pos:position pos:line="3123" pos:column="12"/></name> <operator pos:line="3123" pos:column="13">=<pos:position pos:line="3123" pos:column="14"/></operator> <literal type="number" pos:line="3123" pos:column="15">1<pos:position pos:line="3123" pos:column="16"/></literal></expr>;<pos:position pos:line="3123" pos:column="17"/></expr_stmt>
        }<pos:position pos:line="3124" pos:column="10"/></block></then><else pos:line="3124" pos:column="10">else<block pos:line="3124" pos:column="14">{
          <expr_stmt><expr><call><name pos:line="3125" pos:column="11">sqlite3BtreeKeySize<pos:position pos:line="3125" pos:column="30"/></name><argument_list pos:line="3125" pos:column="30">(<argument><expr><name><name pos:line="3125" pos:column="31">pC<pos:position pos:line="3125" pos:column="33"/></name><operator pos:line="3125" pos:column="33">-&gt;<pos:position pos:line="3125" pos:column="38"/></operator><name pos:line="3125" pos:column="35">pCursor<pos:position pos:line="3125" pos:column="42"/></name></name></expr></argument>, <argument><expr><operator pos:line="3125" pos:column="44">&amp;<pos:position pos:line="3125" pos:column="49"/></operator><name pos:line="3125" pos:column="45">v<pos:position pos:line="3125" pos:column="46"/></name></expr></argument>)<pos:position pos:line="3125" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="3125" pos:column="48"/></expr_stmt>
          <expr_stmt><expr><name pos:line="3126" pos:column="11">v<pos:position pos:line="3126" pos:column="12"/></name> <operator pos:line="3126" pos:column="13">=<pos:position pos:line="3126" pos:column="14"/></operator> <call><name pos:line="3126" pos:column="15">keyToInt<pos:position pos:line="3126" pos:column="23"/></name><argument_list pos:line="3126" pos:column="23">(<argument><expr><name pos:line="3126" pos:column="24">v<pos:position pos:line="3126" pos:column="25"/></name></expr></argument>)<pos:position pos:line="3126" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="3126" pos:column="27"/></expr_stmt>
          <if pos:line="3127" pos:column="11">if<condition pos:line="3127" pos:column="13">( <expr><name pos:line="3127" pos:column="15">v<pos:position pos:line="3127" pos:column="16"/></name><operator pos:line="3127" pos:column="16">==<pos:position pos:line="3127" pos:column="18"/></operator><name pos:line="3127" pos:column="18">MAX_ROWID<pos:position pos:line="3127" pos:column="27"/></name></expr> )<pos:position pos:line="3127" pos:column="29"/></condition><then><block pos:line="3127" pos:column="29">{
            <expr_stmt><expr><name><name pos:line="3128" pos:column="13">pC<pos:position pos:line="3128" pos:column="15"/></name><operator pos:line="3128" pos:column="15">-&gt;<pos:position pos:line="3128" pos:column="20"/></operator><name pos:line="3128" pos:column="17">useRandomRowid<pos:position pos:line="3128" pos:column="31"/></name></name> <operator pos:line="3128" pos:column="32">=<pos:position pos:line="3128" pos:column="33"/></operator> <literal type="number" pos:line="3128" pos:column="34">1<pos:position pos:line="3128" pos:column="35"/></literal></expr>;<pos:position pos:line="3128" pos:column="36"/></expr_stmt>
          }<pos:position pos:line="3129" pos:column="12"/></block></then><else pos:line="3129" pos:column="12">else<block pos:line="3129" pos:column="16">{
            <expr_stmt><expr><name pos:line="3130" pos:column="13">v<pos:position pos:line="3130" pos:column="14"/></name><operator pos:line="3130" pos:column="14">++<pos:position pos:line="3130" pos:column="16"/></operator></expr>;<pos:position pos:line="3130" pos:column="17"/></expr_stmt>
          }<pos:position pos:line="3131" pos:column="12"/></block></else></if>
        }<pos:position pos:line="3132" pos:column="10"/></block></else></if>
      }<pos:position pos:line="3133" pos:column="8"/></block></then></if>

<cpp:ifndef pos:line="3135" pos:column="1">#<cpp:directive pos:line="3135" pos:column="2">ifndef<pos:position pos:line="3135" pos:column="8"/></cpp:directive> <name pos:line="3135" pos:column="9">SQLITE_OMIT_AUTOINCREMENT<pos:position pos:line="3135" pos:column="34"/></name></cpp:ifndef>
      <if pos:line="3136" pos:column="7">if<condition pos:line="3136" pos:column="9">( <expr><name><name pos:line="3136" pos:column="11">pOp<pos:position pos:line="3136" pos:column="14"/></name><operator pos:line="3136" pos:column="14">-&gt;<pos:position pos:line="3136" pos:column="19"/></operator><name pos:line="3136" pos:column="16">p3<pos:position pos:line="3136" pos:column="18"/></name></name></expr> )<pos:position pos:line="3136" pos:column="20"/></condition><then><block pos:line="3136" pos:column="20">{
        <expr_stmt><expr><call><name pos:line="3137" pos:column="9">assert<pos:position pos:line="3137" pos:column="15"/></name><argument_list pos:line="3137" pos:column="15">( <argument><expr><name><name pos:line="3137" pos:column="17">pOp<pos:position pos:line="3137" pos:column="20"/></name><operator pos:line="3137" pos:column="20">-&gt;<pos:position pos:line="3137" pos:column="25"/></operator><name pos:line="3137" pos:column="22">p3<pos:position pos:line="3137" pos:column="24"/></name></name><operator pos:line="3137" pos:column="24">&gt;<pos:position pos:line="3137" pos:column="28"/></operator><literal type="number" pos:line="3137" pos:column="25">0<pos:position pos:line="3137" pos:column="26"/></literal> <operator pos:line="3137" pos:column="27">&amp;&amp;<pos:position pos:line="3137" pos:column="37"/></operator> <name><name pos:line="3137" pos:column="30">pOp<pos:position pos:line="3137" pos:column="33"/></name><operator pos:line="3137" pos:column="33">-&gt;<pos:position pos:line="3137" pos:column="38"/></operator><name pos:line="3137" pos:column="35">p3<pos:position pos:line="3137" pos:column="37"/></name></name><operator pos:line="3137" pos:column="37">&lt;=<pos:position pos:line="3137" pos:column="42"/></operator><name><name pos:line="3137" pos:column="39">p<pos:position pos:line="3137" pos:column="40"/></name><operator pos:line="3137" pos:column="40">-&gt;<pos:position pos:line="3137" pos:column="45"/></operator><name pos:line="3137" pos:column="42">nMem<pos:position pos:line="3137" pos:column="46"/></name></name></expr></argument> )<pos:position pos:line="3137" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="3137" pos:column="49"/></expr_stmt> <comment type="block" pos:line="3137" pos:column="50">/* P3 is a valid memory cell */</comment>
        <expr_stmt><expr><name pos:line="3138" pos:column="9">pMem<pos:position pos:line="3138" pos:column="13"/></name> <operator pos:line="3138" pos:column="14">=<pos:position pos:line="3138" pos:column="15"/></operator> <operator pos:line="3138" pos:column="16">&amp;<pos:position pos:line="3138" pos:column="21"/></operator><name><name pos:line="3138" pos:column="17">p<pos:position pos:line="3138" pos:column="18"/></name><operator pos:line="3138" pos:column="18">-&gt;<pos:position pos:line="3138" pos:column="23"/></operator><name pos:line="3138" pos:column="20">aMem<pos:position pos:line="3138" pos:column="24"/></name><index pos:line="3138" pos:column="24">[<expr><name><name pos:line="3138" pos:column="25">pOp<pos:position pos:line="3138" pos:column="28"/></name><operator pos:line="3138" pos:column="28">-&gt;<pos:position pos:line="3138" pos:column="33"/></operator><name pos:line="3138" pos:column="30">p3<pos:position pos:line="3138" pos:column="32"/></name></name></expr>]<pos:position pos:line="3138" pos:column="33"/></index></name></expr>;<pos:position pos:line="3138" pos:column="34"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="3139" pos:column="9">REGISTER_TRACE<pos:position pos:line="3139" pos:column="23"/></name><argument_list pos:line="3139" pos:column="23">(<argument><expr><name><name pos:line="3139" pos:column="24">pOp<pos:position pos:line="3139" pos:column="27"/></name><operator pos:line="3139" pos:column="27">-&gt;<pos:position pos:line="3139" pos:column="32"/></operator><name pos:line="3139" pos:column="29">p3<pos:position pos:line="3139" pos:column="31"/></name></name></expr></argument>, <argument><expr><name pos:line="3139" pos:column="33">pMem<pos:position pos:line="3139" pos:column="37"/></name></expr></argument>)<pos:position pos:line="3139" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="3139" pos:column="39"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="3140" pos:column="9">sqlite3VdbeMemIntegerify<pos:position pos:line="3140" pos:column="33"/></name><argument_list pos:line="3140" pos:column="33">(<argument><expr><name pos:line="3140" pos:column="34">pMem<pos:position pos:line="3140" pos:column="38"/></name></expr></argument>)<pos:position pos:line="3140" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="3140" pos:column="40"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="3141" pos:column="9">assert<pos:position pos:line="3141" pos:column="15"/></name><argument_list pos:line="3141" pos:column="15">( <argument><expr><operator pos:line="3141" pos:column="17">(<pos:position pos:line="3141" pos:column="18"/></operator><name><name pos:line="3141" pos:column="18">pMem<pos:position pos:line="3141" pos:column="22"/></name><operator pos:line="3141" pos:column="22">-&gt;<pos:position pos:line="3141" pos:column="27"/></operator><name pos:line="3141" pos:column="24">flags<pos:position pos:line="3141" pos:column="29"/></name></name> <operator pos:line="3141" pos:column="30">&amp;<pos:position pos:line="3141" pos:column="35"/></operator> <name pos:line="3141" pos:column="32">MEM_Int<pos:position pos:line="3141" pos:column="39"/></name><operator pos:line="3141" pos:column="39">)<pos:position pos:line="3141" pos:column="40"/></operator><operator pos:line="3141" pos:column="40">!=<pos:position pos:line="3141" pos:column="42"/></operator><literal type="number" pos:line="3141" pos:column="42">0<pos:position pos:line="3141" pos:column="43"/></literal></expr></argument> )<pos:position pos:line="3141" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="3141" pos:column="46"/></expr_stmt>  <comment type="block" pos:line="3141" pos:column="48">/* mem(P3) holds an integer */</comment>
        <if pos:line="3142" pos:column="9">if<condition pos:line="3142" pos:column="11">( <expr><name><name pos:line="3142" pos:column="13">pMem<pos:position pos:line="3142" pos:column="17"/></name><operator pos:line="3142" pos:column="17">-&gt;<pos:position pos:line="3142" pos:column="22"/></operator><name pos:line="3142" pos:column="19">u<pos:position pos:line="3142" pos:column="20"/></name><operator pos:line="3142" pos:column="20">.<pos:position pos:line="3142" pos:column="21"/></operator><name pos:line="3142" pos:column="21">i<pos:position pos:line="3142" pos:column="22"/></name></name><operator pos:line="3142" pos:column="22">==<pos:position pos:line="3142" pos:column="24"/></operator><name pos:line="3142" pos:column="24">MAX_ROWID<pos:position pos:line="3142" pos:column="33"/></name> <operator pos:line="3142" pos:column="34">||<pos:position pos:line="3142" pos:column="36"/></operator> <name><name pos:line="3142" pos:column="37">pC<pos:position pos:line="3142" pos:column="39"/></name><operator pos:line="3142" pos:column="39">-&gt;<pos:position pos:line="3142" pos:column="44"/></operator><name pos:line="3142" pos:column="41">useRandomRowid<pos:position pos:line="3142" pos:column="55"/></name></name></expr> )<pos:position pos:line="3142" pos:column="57"/></condition><then><block pos:line="3142" pos:column="57">{
          <expr_stmt><expr><name pos:line="3143" pos:column="11">rc<pos:position pos:line="3143" pos:column="13"/></name> <operator pos:line="3143" pos:column="14">=<pos:position pos:line="3143" pos:column="15"/></operator> <name pos:line="3143" pos:column="16">SQLITE_FULL<pos:position pos:line="3143" pos:column="27"/></name></expr>;<pos:position pos:line="3143" pos:column="28"/></expr_stmt>
          <goto pos:line="3144" pos:column="11">goto <name pos:line="3144" pos:column="16">abort_due_to_error<pos:position pos:line="3144" pos:column="34"/></name>;<pos:position pos:line="3144" pos:column="35"/></goto>
        }<pos:position pos:line="3145" pos:column="10"/></block></then></if>
        <if pos:line="3146" pos:column="9">if<condition pos:line="3146" pos:column="11">( <expr><name pos:line="3146" pos:column="13">v<pos:position pos:line="3146" pos:column="14"/></name><operator pos:line="3146" pos:column="14">&lt;<pos:position pos:line="3146" pos:column="18"/></operator><name><name pos:line="3146" pos:column="15">pMem<pos:position pos:line="3146" pos:column="19"/></name><operator pos:line="3146" pos:column="19">-&gt;<pos:position pos:line="3146" pos:column="24"/></operator><name pos:line="3146" pos:column="21">u<pos:position pos:line="3146" pos:column="22"/></name><operator pos:line="3146" pos:column="22">.<pos:position pos:line="3146" pos:column="23"/></operator><name pos:line="3146" pos:column="23">i<pos:position pos:line="3146" pos:column="24"/></name></name><operator pos:line="3146" pos:column="24">+<pos:position pos:line="3146" pos:column="25"/></operator><literal type="number" pos:line="3146" pos:column="25">1<pos:position pos:line="3146" pos:column="26"/></literal></expr> )<pos:position pos:line="3146" pos:column="28"/></condition><then><block pos:line="3146" pos:column="28">{
          <expr_stmt><expr><name pos:line="3147" pos:column="11">v<pos:position pos:line="3147" pos:column="12"/></name> <operator pos:line="3147" pos:column="13">=<pos:position pos:line="3147" pos:column="14"/></operator> <name><name pos:line="3147" pos:column="15">pMem<pos:position pos:line="3147" pos:column="19"/></name><operator pos:line="3147" pos:column="19">-&gt;<pos:position pos:line="3147" pos:column="24"/></operator><name pos:line="3147" pos:column="21">u<pos:position pos:line="3147" pos:column="22"/></name><operator pos:line="3147" pos:column="22">.<pos:position pos:line="3147" pos:column="23"/></operator><name pos:line="3147" pos:column="23">i<pos:position pos:line="3147" pos:column="24"/></name></name> <operator pos:line="3147" pos:column="25">+<pos:position pos:line="3147" pos:column="26"/></operator> <literal type="number" pos:line="3147" pos:column="27">1<pos:position pos:line="3147" pos:column="28"/></literal></expr>;<pos:position pos:line="3147" pos:column="29"/></expr_stmt>
        }<pos:position pos:line="3148" pos:column="10"/></block></then></if>
        <expr_stmt><expr><name><name pos:line="3149" pos:column="9">pMem<pos:position pos:line="3149" pos:column="13"/></name><operator pos:line="3149" pos:column="13">-&gt;<pos:position pos:line="3149" pos:column="18"/></operator><name pos:line="3149" pos:column="15">u<pos:position pos:line="3149" pos:column="16"/></name><operator pos:line="3149" pos:column="16">.<pos:position pos:line="3149" pos:column="17"/></operator><name pos:line="3149" pos:column="17">i<pos:position pos:line="3149" pos:column="18"/></name></name> <operator pos:line="3149" pos:column="19">=<pos:position pos:line="3149" pos:column="20"/></operator> <name pos:line="3149" pos:column="21">v<pos:position pos:line="3149" pos:column="22"/></name></expr>;<pos:position pos:line="3149" pos:column="23"/></expr_stmt>
      }<pos:position pos:line="3150" pos:column="8"/></block></then></if>
<cpp:endif pos:line="3151" pos:column="1">#<cpp:directive pos:line="3151" pos:column="2">endif<pos:position pos:line="3151" pos:column="7"/></cpp:directive></cpp:endif>

      <expr_stmt><expr><call><name pos:line="3153" pos:column="7">sqlite3BtreeSetCachedRowid<pos:position pos:line="3153" pos:column="33"/></name><argument_list pos:line="3153" pos:column="33">(<argument><expr><name><name pos:line="3153" pos:column="34">pC<pos:position pos:line="3153" pos:column="36"/></name><operator pos:line="3153" pos:column="36">-&gt;<pos:position pos:line="3153" pos:column="41"/></operator><name pos:line="3153" pos:column="38">pCursor<pos:position pos:line="3153" pos:column="45"/></name></name></expr></argument>, <argument><expr><ternary><condition><expr><name pos:line="3153" pos:column="47">v<pos:position pos:line="3153" pos:column="48"/></name><operator pos:line="3153" pos:column="48">&lt;<pos:position pos:line="3153" pos:column="52"/></operator><name pos:line="3153" pos:column="49">MAX_ROWID<pos:position pos:line="3153" pos:column="58"/></name></expr> ?<pos:position pos:line="3153" pos:column="60"/></condition><then pos:line="3153" pos:column="60"> <expr><name pos:line="3153" pos:column="61">v<pos:position pos:line="3153" pos:column="62"/></name><operator pos:line="3153" pos:column="62">+<pos:position pos:line="3153" pos:column="63"/></operator><literal type="number" pos:line="3153" pos:column="63">1<pos:position pos:line="3153" pos:column="64"/></literal></expr> <pos:position pos:line="3153" pos:column="65"/></then><else pos:line="3153" pos:column="65">: <expr><literal type="number" pos:line="3153" pos:column="67">0<pos:position pos:line="3153" pos:column="68"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="3153" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="3153" pos:column="70"/></expr_stmt>
    }<pos:position pos:line="3154" pos:column="6"/></block></then></if>
    <if pos:line="3155" pos:column="5">if<condition pos:line="3155" pos:column="7">( <expr><name><name pos:line="3155" pos:column="9">pC<pos:position pos:line="3155" pos:column="11"/></name><operator pos:line="3155" pos:column="11">-&gt;<pos:position pos:line="3155" pos:column="16"/></operator><name pos:line="3155" pos:column="13">useRandomRowid<pos:position pos:line="3155" pos:column="27"/></name></name></expr> )<pos:position pos:line="3155" pos:column="29"/></condition><then><block pos:line="3155" pos:column="29">{
      <expr_stmt><expr><call><name pos:line="3156" pos:column="7">assert<pos:position pos:line="3156" pos:column="13"/></name><argument_list pos:line="3156" pos:column="13">( <argument><expr><name><name pos:line="3156" pos:column="15">pOp<pos:position pos:line="3156" pos:column="18"/></name><operator pos:line="3156" pos:column="18">-&gt;<pos:position pos:line="3156" pos:column="23"/></operator><name pos:line="3156" pos:column="20">p3<pos:position pos:line="3156" pos:column="22"/></name></name><operator pos:line="3156" pos:column="22">==<pos:position pos:line="3156" pos:column="24"/></operator><literal type="number" pos:line="3156" pos:column="24">0<pos:position pos:line="3156" pos:column="25"/></literal></expr></argument> )<pos:position pos:line="3156" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="3156" pos:column="28"/></expr_stmt>  <comment type="block" pos:line="3156" pos:column="30">/* SQLITE_FULL must have occurred prior to this */</comment>
      <expr_stmt><expr><name pos:line="3157" pos:column="7">v<pos:position pos:line="3157" pos:column="8"/></name> <operator pos:line="3157" pos:column="9">=<pos:position pos:line="3157" pos:column="10"/></operator> <name><name pos:line="3157" pos:column="11">db<pos:position pos:line="3157" pos:column="13"/></name><operator pos:line="3157" pos:column="13">-&gt;<pos:position pos:line="3157" pos:column="18"/></operator><name pos:line="3157" pos:column="15">priorNewRowid<pos:position pos:line="3157" pos:column="28"/></name></name></expr>;<pos:position pos:line="3157" pos:column="29"/></expr_stmt>
      <expr_stmt><expr><name pos:line="3158" pos:column="7">cnt<pos:position pos:line="3158" pos:column="10"/></name> <operator pos:line="3158" pos:column="11">=<pos:position pos:line="3158" pos:column="12"/></operator> <literal type="number" pos:line="3158" pos:column="13">0<pos:position pos:line="3158" pos:column="14"/></literal></expr>;<pos:position pos:line="3158" pos:column="15"/></expr_stmt>
      <do pos:line="3159" pos:column="7">do<block pos:line="3159" pos:column="9">{
        <if pos:line="3160" pos:column="9">if<condition pos:line="3160" pos:column="11">( <expr><name pos:line="3160" pos:column="13">cnt<pos:position pos:line="3160" pos:column="16"/></name><operator pos:line="3160" pos:column="16">==<pos:position pos:line="3160" pos:column="18"/></operator><literal type="number" pos:line="3160" pos:column="18">0<pos:position pos:line="3160" pos:column="19"/></literal> <operator pos:line="3160" pos:column="20">&amp;&amp;<pos:position pos:line="3160" pos:column="30"/></operator> <operator pos:line="3160" pos:column="23">(<pos:position pos:line="3160" pos:column="24"/></operator><name pos:line="3160" pos:column="24">v<pos:position pos:line="3160" pos:column="25"/></name><operator pos:line="3160" pos:column="25">&amp;<pos:position pos:line="3160" pos:column="30"/></operator><literal type="number" pos:line="3160" pos:column="26">0xffffff<pos:position pos:line="3160" pos:column="34"/></literal><operator pos:line="3160" pos:column="34">)<pos:position pos:line="3160" pos:column="35"/></operator><operator pos:line="3160" pos:column="35">==<pos:position pos:line="3160" pos:column="37"/></operator><name pos:line="3160" pos:column="37">v<pos:position pos:line="3160" pos:column="38"/></name></expr> )<pos:position pos:line="3160" pos:column="40"/></condition><then><block pos:line="3160" pos:column="40">{
          <expr_stmt><expr><name pos:line="3161" pos:column="11">v<pos:position pos:line="3161" pos:column="12"/></name><operator pos:line="3161" pos:column="12">++<pos:position pos:line="3161" pos:column="14"/></operator></expr>;<pos:position pos:line="3161" pos:column="15"/></expr_stmt>
        }<pos:position pos:line="3162" pos:column="10"/></block></then><else pos:line="3162" pos:column="10">else<block pos:line="3162" pos:column="14">{
          <expr_stmt><expr><call><name pos:line="3163" pos:column="11">sqlite3_randomness<pos:position pos:line="3163" pos:column="29"/></name><argument_list pos:line="3163" pos:column="29">(<argument><expr><sizeof pos:line="3163" pos:column="30">sizeof<argument_list pos:line="3163" pos:column="36">(<argument><expr><name pos:line="3163" pos:column="37">v<pos:position pos:line="3163" pos:column="38"/></name></expr></argument>)<pos:position pos:line="3163" pos:column="39"/></argument_list></sizeof></expr></argument>, <argument><expr><operator pos:line="3163" pos:column="41">&amp;<pos:position pos:line="3163" pos:column="46"/></operator><name pos:line="3163" pos:column="42">v<pos:position pos:line="3163" pos:column="43"/></name></expr></argument>)<pos:position pos:line="3163" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="3163" pos:column="45"/></expr_stmt>
          <if pos:line="3164" pos:column="11">if<condition pos:line="3164" pos:column="13">( <expr><name pos:line="3164" pos:column="15">cnt<pos:position pos:line="3164" pos:column="18"/></name><operator pos:line="3164" pos:column="18">&lt;<pos:position pos:line="3164" pos:column="22"/></operator><literal type="number" pos:line="3164" pos:column="19">5<pos:position pos:line="3164" pos:column="20"/></literal></expr> )<pos:position pos:line="3164" pos:column="22"/></condition><then pos:line="3164" pos:column="22"> <block type="pseudo"><expr_stmt><expr><name pos:line="3164" pos:column="23">v<pos:position pos:line="3164" pos:column="24"/></name> <operator pos:line="3164" pos:column="25">&amp;=<pos:position pos:line="3164" pos:column="31"/></operator> <literal type="number" pos:line="3164" pos:column="28">0xffffff<pos:position pos:line="3164" pos:column="36"/></literal></expr>;<pos:position pos:line="3164" pos:column="37"/></expr_stmt></block></then></if>
        }<pos:position pos:line="3165" pos:column="10"/></block></else></if>
        <if pos:line="3166" pos:column="9">if<condition pos:line="3166" pos:column="11">( <expr><name pos:line="3166" pos:column="13">v<pos:position pos:line="3166" pos:column="14"/></name><operator pos:line="3166" pos:column="14">==<pos:position pos:line="3166" pos:column="16"/></operator><literal type="number" pos:line="3166" pos:column="16">0<pos:position pos:line="3166" pos:column="17"/></literal></expr> )<pos:position pos:line="3166" pos:column="19"/></condition><then pos:line="3166" pos:column="19"> <block type="pseudo"><continue pos:line="3166" pos:column="20">continue;<pos:position pos:line="3166" pos:column="29"/></continue></block></then></if>
        <expr_stmt><expr><name pos:line="3167" pos:column="9">x<pos:position pos:line="3167" pos:column="10"/></name> <operator pos:line="3167" pos:column="11">=<pos:position pos:line="3167" pos:column="12"/></operator> <call><name pos:line="3167" pos:column="13">intToKey<pos:position pos:line="3167" pos:column="21"/></name><argument_list pos:line="3167" pos:column="21">(<argument><expr><name pos:line="3167" pos:column="22">v<pos:position pos:line="3167" pos:column="23"/></name></expr></argument>)<pos:position pos:line="3167" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="3167" pos:column="25"/></expr_stmt>
        <expr_stmt><expr><name pos:line="3168" pos:column="9">rx<pos:position pos:line="3168" pos:column="11"/></name> <operator pos:line="3168" pos:column="12">=<pos:position pos:line="3168" pos:column="13"/></operator> <call><name pos:line="3168" pos:column="14">sqlite3BtreeMovetoUnpacked<pos:position pos:line="3168" pos:column="40"/></name><argument_list pos:line="3168" pos:column="40">(<argument><expr><name><name pos:line="3168" pos:column="41">pC<pos:position pos:line="3168" pos:column="43"/></name><operator pos:line="3168" pos:column="43">-&gt;<pos:position pos:line="3168" pos:column="48"/></operator><name pos:line="3168" pos:column="45">pCursor<pos:position pos:line="3168" pos:column="52"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="3168" pos:column="54">0<pos:position pos:line="3168" pos:column="55"/></literal></expr></argument>, <argument><expr><operator pos:line="3168" pos:column="57">(<pos:position pos:line="3168" pos:column="58"/></operator><name pos:line="3168" pos:column="58">u64<pos:position pos:line="3168" pos:column="61"/></name><operator pos:line="3168" pos:column="61">)<pos:position pos:line="3168" pos:column="62"/></operator><name pos:line="3168" pos:column="62">x<pos:position pos:line="3168" pos:column="63"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="3168" pos:column="65">0<pos:position pos:line="3168" pos:column="66"/></literal></expr></argument>, <argument><expr><operator pos:line="3168" pos:column="68">&amp;<pos:position pos:line="3168" pos:column="73"/></operator><name pos:line="3168" pos:column="69">res<pos:position pos:line="3168" pos:column="72"/></name></expr></argument>)<pos:position pos:line="3168" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="3168" pos:column="74"/></expr_stmt>
        <expr_stmt><expr><name pos:line="3169" pos:column="9">cnt<pos:position pos:line="3169" pos:column="12"/></name><operator pos:line="3169" pos:column="12">++<pos:position pos:line="3169" pos:column="14"/></operator></expr>;<pos:position pos:line="3169" pos:column="15"/></expr_stmt>
      }<pos:position pos:line="3170" pos:column="8"/></block>while<condition pos:line="3170" pos:column="13">( <expr><name pos:line="3170" pos:column="15">cnt<pos:position pos:line="3170" pos:column="18"/></name><operator pos:line="3170" pos:column="18">&lt;<pos:position pos:line="3170" pos:column="22"/></operator><literal type="number" pos:line="3170" pos:column="19">100<pos:position pos:line="3170" pos:column="22"/></literal> <operator pos:line="3170" pos:column="23">&amp;&amp;<pos:position pos:line="3170" pos:column="33"/></operator> <name pos:line="3170" pos:column="26">rx<pos:position pos:line="3170" pos:column="28"/></name><operator pos:line="3170" pos:column="28">==<pos:position pos:line="3170" pos:column="30"/></operator><name pos:line="3170" pos:column="30">SQLITE_OK<pos:position pos:line="3170" pos:column="39"/></name> <operator pos:line="3170" pos:column="40">&amp;&amp;<pos:position pos:line="3170" pos:column="50"/></operator> <name pos:line="3170" pos:column="43">res<pos:position pos:line="3170" pos:column="46"/></name><operator pos:line="3170" pos:column="46">==<pos:position pos:line="3170" pos:column="48"/></operator><literal type="number" pos:line="3170" pos:column="48">0<pos:position pos:line="3170" pos:column="49"/></literal></expr> )<pos:position pos:line="3170" pos:column="51"/></condition>;<pos:position pos:line="3170" pos:column="52"/></do>
      <expr_stmt><expr><name><name pos:line="3171" pos:column="7">db<pos:position pos:line="3171" pos:column="9"/></name><operator pos:line="3171" pos:column="9">-&gt;<pos:position pos:line="3171" pos:column="14"/></operator><name pos:line="3171" pos:column="11">priorNewRowid<pos:position pos:line="3171" pos:column="24"/></name></name> <operator pos:line="3171" pos:column="25">=<pos:position pos:line="3171" pos:column="26"/></operator> <name pos:line="3171" pos:column="27">v<pos:position pos:line="3171" pos:column="28"/></name></expr>;<pos:position pos:line="3171" pos:column="29"/></expr_stmt>
      <if pos:line="3172" pos:column="7">if<condition pos:line="3172" pos:column="9">( <expr><name pos:line="3172" pos:column="11">rx<pos:position pos:line="3172" pos:column="13"/></name><operator pos:line="3172" pos:column="13">==<pos:position pos:line="3172" pos:column="15"/></operator><name pos:line="3172" pos:column="15">SQLITE_OK<pos:position pos:line="3172" pos:column="24"/></name> <operator pos:line="3172" pos:column="25">&amp;&amp;<pos:position pos:line="3172" pos:column="35"/></operator> <name pos:line="3172" pos:column="28">res<pos:position pos:line="3172" pos:column="31"/></name><operator pos:line="3172" pos:column="31">==<pos:position pos:line="3172" pos:column="33"/></operator><literal type="number" pos:line="3172" pos:column="33">0<pos:position pos:line="3172" pos:column="34"/></literal></expr> )<pos:position pos:line="3172" pos:column="36"/></condition><then><block pos:line="3172" pos:column="36">{
        <expr_stmt><expr><name pos:line="3173" pos:column="9">rc<pos:position pos:line="3173" pos:column="11"/></name> <operator pos:line="3173" pos:column="12">=<pos:position pos:line="3173" pos:column="13"/></operator> <name pos:line="3173" pos:column="14">SQLITE_FULL<pos:position pos:line="3173" pos:column="25"/></name></expr>;<pos:position pos:line="3173" pos:column="26"/></expr_stmt>
        <goto pos:line="3174" pos:column="9">goto <name pos:line="3174" pos:column="14">abort_due_to_error<pos:position pos:line="3174" pos:column="32"/></name>;<pos:position pos:line="3174" pos:column="33"/></goto>
      }<pos:position pos:line="3175" pos:column="8"/></block></then></if>
    }<pos:position pos:line="3176" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name><name pos:line="3177" pos:column="5">pC<pos:position pos:line="3177" pos:column="7"/></name><operator pos:line="3177" pos:column="7">-&gt;<pos:position pos:line="3177" pos:column="12"/></operator><name pos:line="3177" pos:column="9">rowidIsValid<pos:position pos:line="3177" pos:column="21"/></name></name> <operator pos:line="3177" pos:column="22">=<pos:position pos:line="3177" pos:column="23"/></operator> <literal type="number" pos:line="3177" pos:column="24">0<pos:position pos:line="3177" pos:column="25"/></literal></expr>;<pos:position pos:line="3177" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="3178" pos:column="5">pC<pos:position pos:line="3178" pos:column="7"/></name><operator pos:line="3178" pos:column="7">-&gt;<pos:position pos:line="3178" pos:column="12"/></operator><name pos:line="3178" pos:column="9">deferredMoveto<pos:position pos:line="3178" pos:column="23"/></name></name> <operator pos:line="3178" pos:column="24">=<pos:position pos:line="3178" pos:column="25"/></operator> <literal type="number" pos:line="3178" pos:column="26">0<pos:position pos:line="3178" pos:column="27"/></literal></expr>;<pos:position pos:line="3178" pos:column="28"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="3179" pos:column="5">pC<pos:position pos:line="3179" pos:column="7"/></name><operator pos:line="3179" pos:column="7">-&gt;<pos:position pos:line="3179" pos:column="12"/></operator><name pos:line="3179" pos:column="9">cacheStatus<pos:position pos:line="3179" pos:column="20"/></name></name> <operator pos:line="3179" pos:column="21">=<pos:position pos:line="3179" pos:column="22"/></operator> <name pos:line="3179" pos:column="23">CACHE_STALE<pos:position pos:line="3179" pos:column="34"/></name></expr>;<pos:position pos:line="3179" pos:column="35"/></expr_stmt>
  }<pos:position pos:line="3180" pos:column="4"/></block></else></if>
  <expr_stmt><expr><call><name pos:line="3181" pos:column="3">MemSetTypeFlag<pos:position pos:line="3181" pos:column="17"/></name><argument_list pos:line="3181" pos:column="17">(<argument><expr><name pos:line="3181" pos:column="18">pOut<pos:position pos:line="3181" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="3181" pos:column="24">MEM_Int<pos:position pos:line="3181" pos:column="31"/></name></expr></argument>)<pos:position pos:line="3181" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="3181" pos:column="33"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="3182" pos:column="3">pOut<pos:position pos:line="3182" pos:column="7"/></name><operator pos:line="3182" pos:column="7">-&gt;<pos:position pos:line="3182" pos:column="12"/></operator><name pos:line="3182" pos:column="9">u<pos:position pos:line="3182" pos:column="10"/></name><operator pos:line="3182" pos:column="10">.<pos:position pos:line="3182" pos:column="11"/></operator><name pos:line="3182" pos:column="11">i<pos:position pos:line="3182" pos:column="12"/></name></name> <operator pos:line="3182" pos:column="13">=<pos:position pos:line="3182" pos:column="14"/></operator> <name pos:line="3182" pos:column="15">v<pos:position pos:line="3182" pos:column="16"/></name></expr>;<pos:position pos:line="3182" pos:column="17"/></expr_stmt>
  <break pos:line="3183" pos:column="3">break;<pos:position pos:line="3183" pos:column="9"/></break>
}<pos:position pos:line="3184" pos:column="2"/></block>

<comment type="block" pos:line="3186" pos:column="1">/* Opcode: Insert P1 P2 P3 P4 P5
**
** Write an entry into the table of cursor P1.  A new entry is
** created if it doesn't already exist or the data for an existing
** entry is overwritten.  The data is the value stored register
** number P2. The key is stored in register P3. The key must
** be an integer.
**
** If the OPFLAG_NCHANGE flag of P5 is set, then the row change count is
** incremented (otherwise not).  If the OPFLAG_LASTROWID flag of P5 is set,
** then rowid is stored for subsequent return by the
** sqlite3_last_insert_rowid() function (otherwise it is unmodified).
**
** Parameter P4 may point to a string containing the table-name, or
** may be NULL. If it is not NULL, then the update-hook 
** (sqlite3.xUpdateCallback) is invoked following a successful insert.
**
** (WARNING/TODO: If P1 is a pseudo-cursor and P2 is dynamically
** allocated, then ownership of P2 is transferred to the pseudo-cursor
** and register P2 becomes ephemeral.  If the cursor is changed, the
** value of register P2 will then change.  Make sure this does not
** cause any problems.)
**
** This instruction only works on tables.  The equivalent instruction
** for indices is OP_IdxInsert.
*/</comment>
<case pos:line="3212" pos:column="1">case <expr><name pos:line="3212" pos:column="6">OP_Insert<pos:position pos:line="3212" pos:column="15"/></name></expr>:<pos:position pos:line="3212" pos:column="16"/></case> <block pos:line="3212" pos:column="17">{
  <decl_stmt><decl><type><name pos:line="3213" pos:column="3">Mem<pos:position pos:line="3213" pos:column="6"/></name> <modifier pos:line="3213" pos:column="7">*<pos:position pos:line="3213" pos:column="8"/></modifier></type><name pos:line="3213" pos:column="8">pData<pos:position pos:line="3213" pos:column="13"/></name></decl>;<pos:position pos:line="3213" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="3214" pos:column="3">Mem<pos:position pos:line="3214" pos:column="6"/></name> <modifier pos:line="3214" pos:column="7">*<pos:position pos:line="3214" pos:column="8"/></modifier></type><name pos:line="3214" pos:column="8">pKey<pos:position pos:line="3214" pos:column="12"/></name></decl>;<pos:position pos:line="3214" pos:column="13"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="3215" pos:column="3">i64<pos:position pos:line="3215" pos:column="6"/></name></type> <name pos:line="3215" pos:column="7">iKey<pos:position pos:line="3215" pos:column="11"/></name></decl>;<pos:position pos:line="3215" pos:column="12"/></decl_stmt>   <comment type="block" pos:line="3215" pos:column="15">/* The integer ROWID or key for the record to be inserted */</comment>
  <decl_stmt><decl><type><name pos:line="3216" pos:column="3">int<pos:position pos:line="3216" pos:column="6"/></name></type> <name pos:line="3216" pos:column="7">i<pos:position pos:line="3216" pos:column="8"/></name></decl>;<pos:position pos:line="3216" pos:column="9"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="3217" pos:column="3">VdbeCursor<pos:position pos:line="3217" pos:column="13"/></name> <modifier pos:line="3217" pos:column="14">*<pos:position pos:line="3217" pos:column="15"/></modifier></type><name pos:line="3217" pos:column="15">pC<pos:position pos:line="3217" pos:column="17"/></name></decl>;<pos:position pos:line="3217" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="3218" pos:column="3">int<pos:position pos:line="3218" pos:column="6"/></name></type> <name pos:line="3218" pos:column="7">nZero<pos:position pos:line="3218" pos:column="12"/></name></decl>;<pos:position pos:line="3218" pos:column="13"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="3219" pos:column="3">int<pos:position pos:line="3219" pos:column="6"/></name></type> <name pos:line="3219" pos:column="7">seekResult<pos:position pos:line="3219" pos:column="17"/></name></decl>;<pos:position pos:line="3219" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="3220" pos:column="3">const<pos:position pos:line="3220" pos:column="8"/></specifier> <name pos:line="3220" pos:column="9">char<pos:position pos:line="3220" pos:column="13"/></name> <modifier pos:line="3220" pos:column="14">*<pos:position pos:line="3220" pos:column="15"/></modifier></type><name pos:line="3220" pos:column="15">zDb<pos:position pos:line="3220" pos:column="18"/></name></decl>;<pos:position pos:line="3220" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="3221" pos:column="3">const<pos:position pos:line="3221" pos:column="8"/></specifier> <name pos:line="3221" pos:column="9">char<pos:position pos:line="3221" pos:column="13"/></name> <modifier pos:line="3221" pos:column="14">*<pos:position pos:line="3221" pos:column="15"/></modifier></type><name pos:line="3221" pos:column="15">zTbl<pos:position pos:line="3221" pos:column="19"/></name></decl>;<pos:position pos:line="3221" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="3222" pos:column="3">int<pos:position pos:line="3222" pos:column="6"/></name></type> <name pos:line="3222" pos:column="7">op<pos:position pos:line="3222" pos:column="9"/></name></decl>;<pos:position pos:line="3222" pos:column="10"/></decl_stmt>

  <expr_stmt><expr><name pos:line="3224" pos:column="3">pData<pos:position pos:line="3224" pos:column="8"/></name> <operator pos:line="3224" pos:column="9">=<pos:position pos:line="3224" pos:column="10"/></operator> <operator pos:line="3224" pos:column="11">&amp;<pos:position pos:line="3224" pos:column="16"/></operator><name><name pos:line="3224" pos:column="12">p<pos:position pos:line="3224" pos:column="13"/></name><operator pos:line="3224" pos:column="13">-&gt;<pos:position pos:line="3224" pos:column="18"/></operator><name pos:line="3224" pos:column="15">aMem<pos:position pos:line="3224" pos:column="19"/></name><index pos:line="3224" pos:column="19">[<expr><name><name pos:line="3224" pos:column="20">pOp<pos:position pos:line="3224" pos:column="23"/></name><operator pos:line="3224" pos:column="23">-&gt;<pos:position pos:line="3224" pos:column="28"/></operator><name pos:line="3224" pos:column="25">p2<pos:position pos:line="3224" pos:column="27"/></name></name></expr>]<pos:position pos:line="3224" pos:column="28"/></index></name></expr>;<pos:position pos:line="3224" pos:column="29"/></expr_stmt>
  <expr_stmt><expr><name pos:line="3225" pos:column="3">pKey<pos:position pos:line="3225" pos:column="7"/></name> <operator pos:line="3225" pos:column="8">=<pos:position pos:line="3225" pos:column="9"/></operator> <operator pos:line="3225" pos:column="10">&amp;<pos:position pos:line="3225" pos:column="15"/></operator><name><name pos:line="3225" pos:column="11">p<pos:position pos:line="3225" pos:column="12"/></name><operator pos:line="3225" pos:column="12">-&gt;<pos:position pos:line="3225" pos:column="17"/></operator><name pos:line="3225" pos:column="14">aMem<pos:position pos:line="3225" pos:column="18"/></name><index pos:line="3225" pos:column="18">[<expr><name><name pos:line="3225" pos:column="19">pOp<pos:position pos:line="3225" pos:column="22"/></name><operator pos:line="3225" pos:column="22">-&gt;<pos:position pos:line="3225" pos:column="27"/></operator><name pos:line="3225" pos:column="24">p3<pos:position pos:line="3225" pos:column="26"/></name></name></expr>]<pos:position pos:line="3225" pos:column="27"/></index></name></expr>;<pos:position pos:line="3225" pos:column="28"/></expr_stmt>
  <expr_stmt><expr><name pos:line="3226" pos:column="3">i<pos:position pos:line="3226" pos:column="4"/></name> <operator pos:line="3226" pos:column="5">=<pos:position pos:line="3226" pos:column="6"/></operator> <name><name pos:line="3226" pos:column="7">pOp<pos:position pos:line="3226" pos:column="10"/></name><operator pos:line="3226" pos:column="10">-&gt;<pos:position pos:line="3226" pos:column="15"/></operator><name pos:line="3226" pos:column="12">p1<pos:position pos:line="3226" pos:column="14"/></name></name></expr>;<pos:position pos:line="3226" pos:column="15"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="3227" pos:column="3">assert<pos:position pos:line="3227" pos:column="9"/></name><argument_list pos:line="3227" pos:column="9">( <argument><expr><name pos:line="3227" pos:column="11">i<pos:position pos:line="3227" pos:column="12"/></name><operator pos:line="3227" pos:column="12">&gt;=<pos:position pos:line="3227" pos:column="17"/></operator><literal type="number" pos:line="3227" pos:column="14">0<pos:position pos:line="3227" pos:column="15"/></literal> <operator pos:line="3227" pos:column="16">&amp;&amp;<pos:position pos:line="3227" pos:column="26"/></operator> <name pos:line="3227" pos:column="19">i<pos:position pos:line="3227" pos:column="20"/></name><operator pos:line="3227" pos:column="20">&lt;<pos:position pos:line="3227" pos:column="24"/></operator><name><name pos:line="3227" pos:column="21">p<pos:position pos:line="3227" pos:column="22"/></name><operator pos:line="3227" pos:column="22">-&gt;<pos:position pos:line="3227" pos:column="27"/></operator><name pos:line="3227" pos:column="24">nCursor<pos:position pos:line="3227" pos:column="31"/></name></name></expr></argument> )<pos:position pos:line="3227" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="3227" pos:column="34"/></expr_stmt>
  <expr_stmt><expr><name pos:line="3228" pos:column="3">pC<pos:position pos:line="3228" pos:column="5"/></name> <operator pos:line="3228" pos:column="6">=<pos:position pos:line="3228" pos:column="7"/></operator> <name><name pos:line="3228" pos:column="8">p<pos:position pos:line="3228" pos:column="9"/></name><operator pos:line="3228" pos:column="9">-&gt;<pos:position pos:line="3228" pos:column="14"/></operator><name pos:line="3228" pos:column="11">apCsr<pos:position pos:line="3228" pos:column="16"/></name><index pos:line="3228" pos:column="16">[<expr><name pos:line="3228" pos:column="17">i<pos:position pos:line="3228" pos:column="18"/></name></expr>]<pos:position pos:line="3228" pos:column="19"/></index></name></expr>;<pos:position pos:line="3228" pos:column="20"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="3229" pos:column="3">assert<pos:position pos:line="3229" pos:column="9"/></name><argument_list pos:line="3229" pos:column="9">( <argument><expr><name pos:line="3229" pos:column="11">pC<pos:position pos:line="3229" pos:column="13"/></name><operator pos:line="3229" pos:column="13">!=<pos:position pos:line="3229" pos:column="15"/></operator><literal type="number" pos:line="3229" pos:column="15">0<pos:position pos:line="3229" pos:column="16"/></literal></expr></argument> )<pos:position pos:line="3229" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="3229" pos:column="19"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="3230" pos:column="3">assert<pos:position pos:line="3230" pos:column="9"/></name><argument_list pos:line="3230" pos:column="9">( <argument><expr><name><name pos:line="3230" pos:column="11">pC<pos:position pos:line="3230" pos:column="13"/></name><operator pos:line="3230" pos:column="13">-&gt;<pos:position pos:line="3230" pos:column="18"/></operator><name pos:line="3230" pos:column="15">pCursor<pos:position pos:line="3230" pos:column="22"/></name></name><operator pos:line="3230" pos:column="22">!=<pos:position pos:line="3230" pos:column="24"/></operator><literal type="number" pos:line="3230" pos:column="24">0<pos:position pos:line="3230" pos:column="25"/></literal> <operator pos:line="3230" pos:column="26">||<pos:position pos:line="3230" pos:column="28"/></operator> <name><name pos:line="3230" pos:column="29">pC<pos:position pos:line="3230" pos:column="31"/></name><operator pos:line="3230" pos:column="31">-&gt;<pos:position pos:line="3230" pos:column="36"/></operator><name pos:line="3230" pos:column="33">pseudoTable<pos:position pos:line="3230" pos:column="44"/></name></name></expr></argument> )<pos:position pos:line="3230" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="3230" pos:column="47"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="3231" pos:column="3">assert<pos:position pos:line="3231" pos:column="9"/></name><argument_list pos:line="3231" pos:column="9">( <argument><expr><name><name pos:line="3231" pos:column="11">pKey<pos:position pos:line="3231" pos:column="15"/></name><operator pos:line="3231" pos:column="15">-&gt;<pos:position pos:line="3231" pos:column="20"/></operator><name pos:line="3231" pos:column="17">flags<pos:position pos:line="3231" pos:column="22"/></name></name> <operator pos:line="3231" pos:column="23">&amp;<pos:position pos:line="3231" pos:column="28"/></operator> <name pos:line="3231" pos:column="25">MEM_Int<pos:position pos:line="3231" pos:column="32"/></name></expr></argument> )<pos:position pos:line="3231" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="3231" pos:column="35"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="3232" pos:column="3">assert<pos:position pos:line="3232" pos:column="9"/></name><argument_list pos:line="3232" pos:column="9">( <argument><expr><name><name pos:line="3232" pos:column="11">pC<pos:position pos:line="3232" pos:column="13"/></name><operator pos:line="3232" pos:column="13">-&gt;<pos:position pos:line="3232" pos:column="18"/></operator><name pos:line="3232" pos:column="15">isTable<pos:position pos:line="3232" pos:column="22"/></name></name></expr></argument> )<pos:position pos:line="3232" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="3232" pos:column="25"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="3233" pos:column="3">REGISTER_TRACE<pos:position pos:line="3233" pos:column="17"/></name><argument_list pos:line="3233" pos:column="17">(<argument><expr><name><name pos:line="3233" pos:column="18">pOp<pos:position pos:line="3233" pos:column="21"/></name><operator pos:line="3233" pos:column="21">-&gt;<pos:position pos:line="3233" pos:column="26"/></operator><name pos:line="3233" pos:column="23">p2<pos:position pos:line="3233" pos:column="25"/></name></name></expr></argument>, <argument><expr><name pos:line="3233" pos:column="27">pData<pos:position pos:line="3233" pos:column="32"/></name></expr></argument>)<pos:position pos:line="3233" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="3233" pos:column="34"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="3234" pos:column="3">REGISTER_TRACE<pos:position pos:line="3234" pos:column="17"/></name><argument_list pos:line="3234" pos:column="17">(<argument><expr><name><name pos:line="3234" pos:column="18">pOp<pos:position pos:line="3234" pos:column="21"/></name><operator pos:line="3234" pos:column="21">-&gt;<pos:position pos:line="3234" pos:column="26"/></operator><name pos:line="3234" pos:column="23">p3<pos:position pos:line="3234" pos:column="25"/></name></name></expr></argument>, <argument><expr><name pos:line="3234" pos:column="27">pKey<pos:position pos:line="3234" pos:column="31"/></name></expr></argument>)<pos:position pos:line="3234" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="3234" pos:column="33"/></expr_stmt>

  <expr_stmt><expr><name pos:line="3236" pos:column="3">iKey<pos:position pos:line="3236" pos:column="7"/></name> <operator pos:line="3236" pos:column="8">=<pos:position pos:line="3236" pos:column="9"/></operator> <call><name pos:line="3236" pos:column="10">intToKey<pos:position pos:line="3236" pos:column="18"/></name><argument_list pos:line="3236" pos:column="18">(<argument><expr><name><name pos:line="3236" pos:column="19">pKey<pos:position pos:line="3236" pos:column="23"/></name><operator pos:line="3236" pos:column="23">-&gt;<pos:position pos:line="3236" pos:column="28"/></operator><name pos:line="3236" pos:column="25">u<pos:position pos:line="3236" pos:column="26"/></name><operator pos:line="3236" pos:column="26">.<pos:position pos:line="3236" pos:column="27"/></operator><name pos:line="3236" pos:column="27">i<pos:position pos:line="3236" pos:column="28"/></name></name></expr></argument>)<pos:position pos:line="3236" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="3236" pos:column="30"/></expr_stmt>
  <if pos:line="3237" pos:column="3">if<condition pos:line="3237" pos:column="5">( <expr><name><name pos:line="3237" pos:column="7">pOp<pos:position pos:line="3237" pos:column="10"/></name><operator pos:line="3237" pos:column="10">-&gt;<pos:position pos:line="3237" pos:column="15"/></operator><name pos:line="3237" pos:column="12">p5<pos:position pos:line="3237" pos:column="14"/></name></name> <operator pos:line="3237" pos:column="15">&amp;<pos:position pos:line="3237" pos:column="20"/></operator> <name pos:line="3237" pos:column="17">OPFLAG_NCHANGE<pos:position pos:line="3237" pos:column="31"/></name></expr> )<pos:position pos:line="3237" pos:column="33"/></condition><then pos:line="3237" pos:column="33"> <block type="pseudo"><expr_stmt><expr><name><name pos:line="3237" pos:column="34">p<pos:position pos:line="3237" pos:column="35"/></name><operator pos:line="3237" pos:column="35">-&gt;<pos:position pos:line="3237" pos:column="40"/></operator><name pos:line="3237" pos:column="37">nChange<pos:position pos:line="3237" pos:column="44"/></name></name><operator pos:line="3237" pos:column="44">++<pos:position pos:line="3237" pos:column="46"/></operator></expr>;<pos:position pos:line="3237" pos:column="47"/></expr_stmt></block></then></if>
  <if pos:line="3238" pos:column="3">if<condition pos:line="3238" pos:column="5">( <expr><name><name pos:line="3238" pos:column="7">pOp<pos:position pos:line="3238" pos:column="10"/></name><operator pos:line="3238" pos:column="10">-&gt;<pos:position pos:line="3238" pos:column="15"/></operator><name pos:line="3238" pos:column="12">p5<pos:position pos:line="3238" pos:column="14"/></name></name> <operator pos:line="3238" pos:column="15">&amp;<pos:position pos:line="3238" pos:column="20"/></operator> <name pos:line="3238" pos:column="17">OPFLAG_LASTROWID<pos:position pos:line="3238" pos:column="33"/></name></expr> )<pos:position pos:line="3238" pos:column="35"/></condition><then pos:line="3238" pos:column="35"> <block type="pseudo"><expr_stmt><expr><name><name pos:line="3238" pos:column="36">db<pos:position pos:line="3238" pos:column="38"/></name><operator pos:line="3238" pos:column="38">-&gt;<pos:position pos:line="3238" pos:column="43"/></operator><name pos:line="3238" pos:column="40">lastRowid<pos:position pos:line="3238" pos:column="49"/></name></name> <operator pos:line="3238" pos:column="50">=<pos:position pos:line="3238" pos:column="51"/></operator> <name><name pos:line="3238" pos:column="52">pKey<pos:position pos:line="3238" pos:column="56"/></name><operator pos:line="3238" pos:column="56">-&gt;<pos:position pos:line="3238" pos:column="61"/></operator><name pos:line="3238" pos:column="58">u<pos:position pos:line="3238" pos:column="59"/></name><operator pos:line="3238" pos:column="59">.<pos:position pos:line="3238" pos:column="60"/></operator><name pos:line="3238" pos:column="60">i<pos:position pos:line="3238" pos:column="61"/></name></name></expr>;<pos:position pos:line="3238" pos:column="62"/></expr_stmt></block></then></if>
  <if pos:line="3239" pos:column="3">if<condition pos:line="3239" pos:column="5">( <expr><name><name pos:line="3239" pos:column="7">pData<pos:position pos:line="3239" pos:column="12"/></name><operator pos:line="3239" pos:column="12">-&gt;<pos:position pos:line="3239" pos:column="17"/></operator><name pos:line="3239" pos:column="14">flags<pos:position pos:line="3239" pos:column="19"/></name></name> <operator pos:line="3239" pos:column="20">&amp;<pos:position pos:line="3239" pos:column="25"/></operator> <name pos:line="3239" pos:column="22">MEM_Null<pos:position pos:line="3239" pos:column="30"/></name></expr> )<pos:position pos:line="3239" pos:column="32"/></condition><then><block pos:line="3239" pos:column="32">{
    <expr_stmt><expr><name><name pos:line="3240" pos:column="5">pData<pos:position pos:line="3240" pos:column="10"/></name><operator pos:line="3240" pos:column="10">-&gt;<pos:position pos:line="3240" pos:column="15"/></operator><name pos:line="3240" pos:column="12">z<pos:position pos:line="3240" pos:column="13"/></name></name> <operator pos:line="3240" pos:column="14">=<pos:position pos:line="3240" pos:column="15"/></operator> <literal type="number" pos:line="3240" pos:column="16">0<pos:position pos:line="3240" pos:column="17"/></literal></expr>;<pos:position pos:line="3240" pos:column="18"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="3241" pos:column="5">pData<pos:position pos:line="3241" pos:column="10"/></name><operator pos:line="3241" pos:column="10">-&gt;<pos:position pos:line="3241" pos:column="15"/></operator><name pos:line="3241" pos:column="12">n<pos:position pos:line="3241" pos:column="13"/></name></name> <operator pos:line="3241" pos:column="14">=<pos:position pos:line="3241" pos:column="15"/></operator> <literal type="number" pos:line="3241" pos:column="16">0<pos:position pos:line="3241" pos:column="17"/></literal></expr>;<pos:position pos:line="3241" pos:column="18"/></expr_stmt>
  }<pos:position pos:line="3242" pos:column="4"/></block></then><else pos:line="3242" pos:column="4">else<block pos:line="3242" pos:column="8">{
    <expr_stmt><expr><call><name pos:line="3243" pos:column="5">assert<pos:position pos:line="3243" pos:column="11"/></name><argument_list pos:line="3243" pos:column="11">( <argument><expr><name><name pos:line="3243" pos:column="13">pData<pos:position pos:line="3243" pos:column="18"/></name><operator pos:line="3243" pos:column="18">-&gt;<pos:position pos:line="3243" pos:column="23"/></operator><name pos:line="3243" pos:column="20">flags<pos:position pos:line="3243" pos:column="25"/></name></name> <operator pos:line="3243" pos:column="26">&amp;<pos:position pos:line="3243" pos:column="31"/></operator> <operator pos:line="3243" pos:column="28">(<pos:position pos:line="3243" pos:column="29"/></operator><name pos:line="3243" pos:column="29">MEM_Blob<pos:position pos:line="3243" pos:column="37"/></name><operator pos:line="3243" pos:column="37">|<pos:position pos:line="3243" pos:column="38"/></operator><name pos:line="3243" pos:column="38">MEM_Str<pos:position pos:line="3243" pos:column="45"/></name><operator pos:line="3243" pos:column="45">)<pos:position pos:line="3243" pos:column="46"/></operator></expr></argument> )<pos:position pos:line="3243" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="3243" pos:column="49"/></expr_stmt>
  }<pos:position pos:line="3244" pos:column="4"/></block></else></if>
  <if pos:line="3245" pos:column="3">if<condition pos:line="3245" pos:column="5">( <expr><name><name pos:line="3245" pos:column="7">pC<pos:position pos:line="3245" pos:column="9"/></name><operator pos:line="3245" pos:column="9">-&gt;<pos:position pos:line="3245" pos:column="14"/></operator><name pos:line="3245" pos:column="11">pseudoTable<pos:position pos:line="3245" pos:column="22"/></name></name></expr> )<pos:position pos:line="3245" pos:column="24"/></condition><then><block pos:line="3245" pos:column="24">{
    <if pos:line="3246" pos:column="5">if<condition pos:line="3246" pos:column="7">( <expr><operator pos:line="3246" pos:column="9">!<pos:position pos:line="3246" pos:column="10"/></operator><name><name pos:line="3246" pos:column="10">pC<pos:position pos:line="3246" pos:column="12"/></name><operator pos:line="3246" pos:column="12">-&gt;<pos:position pos:line="3246" pos:column="17"/></operator><name pos:line="3246" pos:column="14">ephemPseudoTable<pos:position pos:line="3246" pos:column="30"/></name></name></expr> )<pos:position pos:line="3246" pos:column="32"/></condition><then><block pos:line="3246" pos:column="32">{
      <expr_stmt><expr><call><name pos:line="3247" pos:column="7">sqlite3DbFree<pos:position pos:line="3247" pos:column="20"/></name><argument_list pos:line="3247" pos:column="20">(<argument><expr><name pos:line="3247" pos:column="21">db<pos:position pos:line="3247" pos:column="23"/></name></expr></argument>, <argument><expr><name><name pos:line="3247" pos:column="25">pC<pos:position pos:line="3247" pos:column="27"/></name><operator pos:line="3247" pos:column="27">-&gt;<pos:position pos:line="3247" pos:column="32"/></operator><name pos:line="3247" pos:column="29">pData<pos:position pos:line="3247" pos:column="34"/></name></name></expr></argument>)<pos:position pos:line="3247" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="3247" pos:column="36"/></expr_stmt>
    }<pos:position pos:line="3248" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name><name pos:line="3249" pos:column="5">pC<pos:position pos:line="3249" pos:column="7"/></name><operator pos:line="3249" pos:column="7">-&gt;<pos:position pos:line="3249" pos:column="12"/></operator><name pos:line="3249" pos:column="9">iKey<pos:position pos:line="3249" pos:column="13"/></name></name> <operator pos:line="3249" pos:column="14">=<pos:position pos:line="3249" pos:column="15"/></operator> <name pos:line="3249" pos:column="16">iKey<pos:position pos:line="3249" pos:column="20"/></name></expr>;<pos:position pos:line="3249" pos:column="21"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="3250" pos:column="5">pC<pos:position pos:line="3250" pos:column="7"/></name><operator pos:line="3250" pos:column="7">-&gt;<pos:position pos:line="3250" pos:column="12"/></operator><name pos:line="3250" pos:column="9">nData<pos:position pos:line="3250" pos:column="14"/></name></name> <operator pos:line="3250" pos:column="15">=<pos:position pos:line="3250" pos:column="16"/></operator> <name><name pos:line="3250" pos:column="17">pData<pos:position pos:line="3250" pos:column="22"/></name><operator pos:line="3250" pos:column="22">-&gt;<pos:position pos:line="3250" pos:column="27"/></operator><name pos:line="3250" pos:column="24">n<pos:position pos:line="3250" pos:column="25"/></name></name></expr>;<pos:position pos:line="3250" pos:column="26"/></expr_stmt>
    <if pos:line="3251" pos:column="5">if<condition pos:line="3251" pos:column="7">( <expr><name><name pos:line="3251" pos:column="9">pData<pos:position pos:line="3251" pos:column="14"/></name><operator pos:line="3251" pos:column="14">-&gt;<pos:position pos:line="3251" pos:column="19"/></operator><name pos:line="3251" pos:column="16">z<pos:position pos:line="3251" pos:column="17"/></name></name><operator pos:line="3251" pos:column="17">==<pos:position pos:line="3251" pos:column="19"/></operator><name><name pos:line="3251" pos:column="19">pData<pos:position pos:line="3251" pos:column="24"/></name><operator pos:line="3251" pos:column="24">-&gt;<pos:position pos:line="3251" pos:column="29"/></operator><name pos:line="3251" pos:column="26">zMalloc<pos:position pos:line="3251" pos:column="33"/></name></name> <operator pos:line="3251" pos:column="34">||<pos:position pos:line="3251" pos:column="36"/></operator> <name><name pos:line="3251" pos:column="37">pC<pos:position pos:line="3251" pos:column="39"/></name><operator pos:line="3251" pos:column="39">-&gt;<pos:position pos:line="3251" pos:column="44"/></operator><name pos:line="3251" pos:column="41">ephemPseudoTable<pos:position pos:line="3251" pos:column="57"/></name></name></expr> )<pos:position pos:line="3251" pos:column="59"/></condition><then><block pos:line="3251" pos:column="59">{
      <expr_stmt><expr><name><name pos:line="3252" pos:column="7">pC<pos:position pos:line="3252" pos:column="9"/></name><operator pos:line="3252" pos:column="9">-&gt;<pos:position pos:line="3252" pos:column="14"/></operator><name pos:line="3252" pos:column="11">pData<pos:position pos:line="3252" pos:column="16"/></name></name> <operator pos:line="3252" pos:column="17">=<pos:position pos:line="3252" pos:column="18"/></operator> <name><name pos:line="3252" pos:column="19">pData<pos:position pos:line="3252" pos:column="24"/></name><operator pos:line="3252" pos:column="24">-&gt;<pos:position pos:line="3252" pos:column="29"/></operator><name pos:line="3252" pos:column="26">z<pos:position pos:line="3252" pos:column="27"/></name></name></expr>;<pos:position pos:line="3252" pos:column="28"/></expr_stmt>
      <if pos:line="3253" pos:column="7">if<condition pos:line="3253" pos:column="9">( <expr><operator pos:line="3253" pos:column="11">!<pos:position pos:line="3253" pos:column="12"/></operator><name><name pos:line="3253" pos:column="12">pC<pos:position pos:line="3253" pos:column="14"/></name><operator pos:line="3253" pos:column="14">-&gt;<pos:position pos:line="3253" pos:column="19"/></operator><name pos:line="3253" pos:column="16">ephemPseudoTable<pos:position pos:line="3253" pos:column="32"/></name></name></expr> )<pos:position pos:line="3253" pos:column="34"/></condition><then><block pos:line="3253" pos:column="34">{
        <expr_stmt><expr><name><name pos:line="3254" pos:column="9">pData<pos:position pos:line="3254" pos:column="14"/></name><operator pos:line="3254" pos:column="14">-&gt;<pos:position pos:line="3254" pos:column="19"/></operator><name pos:line="3254" pos:column="16">flags<pos:position pos:line="3254" pos:column="21"/></name></name> <operator pos:line="3254" pos:column="22">&amp;=<pos:position pos:line="3254" pos:column="28"/></operator> <operator pos:line="3254" pos:column="25">~<pos:position pos:line="3254" pos:column="26"/></operator><name pos:line="3254" pos:column="26">MEM_Dyn<pos:position pos:line="3254" pos:column="33"/></name></expr>;<pos:position pos:line="3254" pos:column="34"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="3255" pos:column="9">pData<pos:position pos:line="3255" pos:column="14"/></name><operator pos:line="3255" pos:column="14">-&gt;<pos:position pos:line="3255" pos:column="19"/></operator><name pos:line="3255" pos:column="16">flags<pos:position pos:line="3255" pos:column="21"/></name></name> <operator pos:line="3255" pos:column="22">|=<pos:position pos:line="3255" pos:column="24"/></operator> <name pos:line="3255" pos:column="25">MEM_Ephem<pos:position pos:line="3255" pos:column="34"/></name></expr>;<pos:position pos:line="3255" pos:column="35"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="3256" pos:column="9">pData<pos:position pos:line="3256" pos:column="14"/></name><operator pos:line="3256" pos:column="14">-&gt;<pos:position pos:line="3256" pos:column="19"/></operator><name pos:line="3256" pos:column="16">zMalloc<pos:position pos:line="3256" pos:column="23"/></name></name> <operator pos:line="3256" pos:column="24">=<pos:position pos:line="3256" pos:column="25"/></operator> <literal type="number" pos:line="3256" pos:column="26">0<pos:position pos:line="3256" pos:column="27"/></literal></expr>;<pos:position pos:line="3256" pos:column="28"/></expr_stmt>
      }<pos:position pos:line="3257" pos:column="8"/></block></then></if>
    }<pos:position pos:line="3258" pos:column="6"/></block></then><else pos:line="3258" pos:column="6">else<block pos:line="3258" pos:column="10">{
      <expr_stmt><expr><name><name pos:line="3259" pos:column="7">pC<pos:position pos:line="3259" pos:column="9"/></name><operator pos:line="3259" pos:column="9">-&gt;<pos:position pos:line="3259" pos:column="14"/></operator><name pos:line="3259" pos:column="11">pData<pos:position pos:line="3259" pos:column="16"/></name></name> <operator pos:line="3259" pos:column="17">=<pos:position pos:line="3259" pos:column="18"/></operator> <call><name pos:line="3259" pos:column="19">sqlite3Malloc<pos:position pos:line="3259" pos:column="32"/></name><argument_list pos:line="3259" pos:column="32">( <argument><expr><name><name pos:line="3259" pos:column="34">pC<pos:position pos:line="3259" pos:column="36"/></name><operator pos:line="3259" pos:column="36">-&gt;<pos:position pos:line="3259" pos:column="41"/></operator><name pos:line="3259" pos:column="38">nData<pos:position pos:line="3259" pos:column="43"/></name></name><operator pos:line="3259" pos:column="43">+<pos:position pos:line="3259" pos:column="44"/></operator><literal type="number" pos:line="3259" pos:column="44">2<pos:position pos:line="3259" pos:column="45"/></literal></expr></argument> )<pos:position pos:line="3259" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="3259" pos:column="48"/></expr_stmt>
      <if pos:line="3260" pos:column="7">if<condition pos:line="3260" pos:column="9">( <expr><operator pos:line="3260" pos:column="11">!<pos:position pos:line="3260" pos:column="12"/></operator><name><name pos:line="3260" pos:column="12">pC<pos:position pos:line="3260" pos:column="14"/></name><operator pos:line="3260" pos:column="14">-&gt;<pos:position pos:line="3260" pos:column="19"/></operator><name pos:line="3260" pos:column="16">pData<pos:position pos:line="3260" pos:column="21"/></name></name></expr> )<pos:position pos:line="3260" pos:column="23"/></condition><then pos:line="3260" pos:column="23"> <block type="pseudo"><goto pos:line="3260" pos:column="24">goto <name pos:line="3260" pos:column="29">no_mem<pos:position pos:line="3260" pos:column="35"/></name>;<pos:position pos:line="3260" pos:column="36"/></goto></block></then></if>
      <expr_stmt><expr><call><name pos:line="3261" pos:column="7">memcpy<pos:position pos:line="3261" pos:column="13"/></name><argument_list pos:line="3261" pos:column="13">(<argument><expr><name><name pos:line="3261" pos:column="14">pC<pos:position pos:line="3261" pos:column="16"/></name><operator pos:line="3261" pos:column="16">-&gt;<pos:position pos:line="3261" pos:column="21"/></operator><name pos:line="3261" pos:column="18">pData<pos:position pos:line="3261" pos:column="23"/></name></name></expr></argument>, <argument><expr><name><name pos:line="3261" pos:column="25">pData<pos:position pos:line="3261" pos:column="30"/></name><operator pos:line="3261" pos:column="30">-&gt;<pos:position pos:line="3261" pos:column="35"/></operator><name pos:line="3261" pos:column="32">z<pos:position pos:line="3261" pos:column="33"/></name></name></expr></argument>, <argument><expr><name><name pos:line="3261" pos:column="35">pC<pos:position pos:line="3261" pos:column="37"/></name><operator pos:line="3261" pos:column="37">-&gt;<pos:position pos:line="3261" pos:column="42"/></operator><name pos:line="3261" pos:column="39">nData<pos:position pos:line="3261" pos:column="44"/></name></name></expr></argument>)<pos:position pos:line="3261" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="3261" pos:column="46"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="3262" pos:column="7">pC<pos:position pos:line="3262" pos:column="9"/></name><operator pos:line="3262" pos:column="9">-&gt;<pos:position pos:line="3262" pos:column="14"/></operator><name pos:line="3262" pos:column="11">pData<pos:position pos:line="3262" pos:column="16"/></name><index pos:line="3262" pos:column="16">[<expr><name><name pos:line="3262" pos:column="17">pC<pos:position pos:line="3262" pos:column="19"/></name><operator pos:line="3262" pos:column="19">-&gt;<pos:position pos:line="3262" pos:column="24"/></operator><name pos:line="3262" pos:column="21">nData<pos:position pos:line="3262" pos:column="26"/></name></name></expr>]<pos:position pos:line="3262" pos:column="27"/></index></name> <operator pos:line="3262" pos:column="28">=<pos:position pos:line="3262" pos:column="29"/></operator> <literal type="number" pos:line="3262" pos:column="30">0<pos:position pos:line="3262" pos:column="31"/></literal></expr>;<pos:position pos:line="3262" pos:column="32"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="3263" pos:column="7">pC<pos:position pos:line="3263" pos:column="9"/></name><operator pos:line="3263" pos:column="9">-&gt;<pos:position pos:line="3263" pos:column="14"/></operator><name pos:line="3263" pos:column="11">pData<pos:position pos:line="3263" pos:column="16"/></name><index pos:line="3263" pos:column="16">[<expr><name><name pos:line="3263" pos:column="17">pC<pos:position pos:line="3263" pos:column="19"/></name><operator pos:line="3263" pos:column="19">-&gt;<pos:position pos:line="3263" pos:column="24"/></operator><name pos:line="3263" pos:column="21">nData<pos:position pos:line="3263" pos:column="26"/></name></name><operator pos:line="3263" pos:column="26">+<pos:position pos:line="3263" pos:column="27"/></operator><literal type="number" pos:line="3263" pos:column="27">1<pos:position pos:line="3263" pos:column="28"/></literal></expr>]<pos:position pos:line="3263" pos:column="29"/></index></name> <operator pos:line="3263" pos:column="30">=<pos:position pos:line="3263" pos:column="31"/></operator> <literal type="number" pos:line="3263" pos:column="32">0<pos:position pos:line="3263" pos:column="33"/></literal></expr>;<pos:position pos:line="3263" pos:column="34"/></expr_stmt>
    }<pos:position pos:line="3264" pos:column="6"/></block></else></if>
    <expr_stmt><expr><name><name pos:line="3265" pos:column="5">pC<pos:position pos:line="3265" pos:column="7"/></name><operator pos:line="3265" pos:column="7">-&gt;<pos:position pos:line="3265" pos:column="12"/></operator><name pos:line="3265" pos:column="9">nullRow<pos:position pos:line="3265" pos:column="16"/></name></name> <operator pos:line="3265" pos:column="17">=<pos:position pos:line="3265" pos:column="18"/></operator> <literal type="number" pos:line="3265" pos:column="19">0<pos:position pos:line="3265" pos:column="20"/></literal></expr>;<pos:position pos:line="3265" pos:column="21"/></expr_stmt>
  }<pos:position pos:line="3266" pos:column="4"/></block></then><else pos:line="3266" pos:column="4">else<block pos:line="3266" pos:column="8">{
    <expr_stmt><expr><name pos:line="3267" pos:column="5">seekResult<pos:position pos:line="3267" pos:column="15"/></name> <operator pos:line="3267" pos:column="16">=<pos:position pos:line="3267" pos:column="17"/></operator> <operator pos:line="3267" pos:column="18">(<pos:position pos:line="3267" pos:column="19"/></operator><ternary><condition><expr><operator pos:line="3267" pos:column="19">(<pos:position pos:line="3267" pos:column="20"/></operator><name><name pos:line="3267" pos:column="20">pOp<pos:position pos:line="3267" pos:column="23"/></name><operator pos:line="3267" pos:column="23">-&gt;<pos:position pos:line="3267" pos:column="28"/></operator><name pos:line="3267" pos:column="25">p5<pos:position pos:line="3267" pos:column="27"/></name></name> <operator pos:line="3267" pos:column="28">&amp;<pos:position pos:line="3267" pos:column="33"/></operator> <name pos:line="3267" pos:column="30">OPFLAG_USESEEKRESULT<pos:position pos:line="3267" pos:column="50"/></name><operator pos:line="3267" pos:column="50">)<pos:position pos:line="3267" pos:column="51"/></operator></expr> ?<pos:position pos:line="3267" pos:column="53"/></condition><then pos:line="3267" pos:column="53"> <expr><name><name pos:line="3267" pos:column="54">pC<pos:position pos:line="3267" pos:column="56"/></name><operator pos:line="3267" pos:column="56">-&gt;<pos:position pos:line="3267" pos:column="61"/></operator><name pos:line="3267" pos:column="58">seekResult<pos:position pos:line="3267" pos:column="68"/></name></name></expr> <pos:position pos:line="3267" pos:column="69"/></then><else pos:line="3267" pos:column="69">: <expr><literal type="number" pos:line="3267" pos:column="71">0<pos:position pos:line="3267" pos:column="72"/></literal></expr></else></ternary><operator pos:line="3267" pos:column="72">)<pos:position pos:line="3267" pos:column="73"/></operator></expr>;<pos:position pos:line="3267" pos:column="74"/></expr_stmt>
    <if pos:line="3268" pos:column="5">if<condition pos:line="3268" pos:column="7">( <expr><name><name pos:line="3268" pos:column="9">pData<pos:position pos:line="3268" pos:column="14"/></name><operator pos:line="3268" pos:column="14">-&gt;<pos:position pos:line="3268" pos:column="19"/></operator><name pos:line="3268" pos:column="16">flags<pos:position pos:line="3268" pos:column="21"/></name></name> <operator pos:line="3268" pos:column="22">&amp;<pos:position pos:line="3268" pos:column="27"/></operator> <name pos:line="3268" pos:column="24">MEM_Zero<pos:position pos:line="3268" pos:column="32"/></name></expr> )<pos:position pos:line="3268" pos:column="34"/></condition><then><block pos:line="3268" pos:column="34">{
      <expr_stmt><expr><name pos:line="3269" pos:column="7">nZero<pos:position pos:line="3269" pos:column="12"/></name> <operator pos:line="3269" pos:column="13">=<pos:position pos:line="3269" pos:column="14"/></operator> <name><name pos:line="3269" pos:column="15">pData<pos:position pos:line="3269" pos:column="20"/></name><operator pos:line="3269" pos:column="20">-&gt;<pos:position pos:line="3269" pos:column="25"/></operator><name pos:line="3269" pos:column="22">u<pos:position pos:line="3269" pos:column="23"/></name><operator pos:line="3269" pos:column="23">.<pos:position pos:line="3269" pos:column="24"/></operator><name pos:line="3269" pos:column="24">nZero<pos:position pos:line="3269" pos:column="29"/></name></name></expr>;<pos:position pos:line="3269" pos:column="30"/></expr_stmt>
    }<pos:position pos:line="3270" pos:column="6"/></block></then><else pos:line="3270" pos:column="6">else<block pos:line="3270" pos:column="10">{
      <expr_stmt><expr><name pos:line="3271" pos:column="7">nZero<pos:position pos:line="3271" pos:column="12"/></name> <operator pos:line="3271" pos:column="13">=<pos:position pos:line="3271" pos:column="14"/></operator> <literal type="number" pos:line="3271" pos:column="15">0<pos:position pos:line="3271" pos:column="16"/></literal></expr>;<pos:position pos:line="3271" pos:column="17"/></expr_stmt>
    }<pos:position pos:line="3272" pos:column="6"/></block></else></if>
    <expr_stmt><expr><call><name pos:line="3273" pos:column="5">sqlite3BtreeSetCachedRowid<pos:position pos:line="3273" pos:column="31"/></name><argument_list pos:line="3273" pos:column="31">(<argument><expr><name><name pos:line="3273" pos:column="32">pC<pos:position pos:line="3273" pos:column="34"/></name><operator pos:line="3273" pos:column="34">-&gt;<pos:position pos:line="3273" pos:column="39"/></operator><name pos:line="3273" pos:column="36">pCursor<pos:position pos:line="3273" pos:column="43"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="3273" pos:column="45">0<pos:position pos:line="3273" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="3273" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="3273" pos:column="48"/></expr_stmt>
    <expr_stmt><expr><name pos:line="3274" pos:column="5">rc<pos:position pos:line="3274" pos:column="7"/></name> <operator pos:line="3274" pos:column="8">=<pos:position pos:line="3274" pos:column="9"/></operator> <call><name pos:line="3274" pos:column="10">sqlite3BtreeInsert<pos:position pos:line="3274" pos:column="28"/></name><argument_list pos:line="3274" pos:column="28">(<argument><expr><name><name pos:line="3274" pos:column="29">pC<pos:position pos:line="3274" pos:column="31"/></name><operator pos:line="3274" pos:column="31">-&gt;<pos:position pos:line="3274" pos:column="36"/></operator><name pos:line="3274" pos:column="33">pCursor<pos:position pos:line="3274" pos:column="40"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="3274" pos:column="42">0<pos:position pos:line="3274" pos:column="43"/></literal></expr></argument>, <argument><expr><name pos:line="3274" pos:column="45">iKey<pos:position pos:line="3274" pos:column="49"/></name></expr></argument>,
                            <argument><expr><name><name pos:line="3275" pos:column="29">pData<pos:position pos:line="3275" pos:column="34"/></name><operator pos:line="3275" pos:column="34">-&gt;<pos:position pos:line="3275" pos:column="39"/></operator><name pos:line="3275" pos:column="36">z<pos:position pos:line="3275" pos:column="37"/></name></name></expr></argument>, <argument><expr><name><name pos:line="3275" pos:column="39">pData<pos:position pos:line="3275" pos:column="44"/></name><operator pos:line="3275" pos:column="44">-&gt;<pos:position pos:line="3275" pos:column="49"/></operator><name pos:line="3275" pos:column="46">n<pos:position pos:line="3275" pos:column="47"/></name></name></expr></argument>, <argument><expr><name pos:line="3275" pos:column="49">nZero<pos:position pos:line="3275" pos:column="54"/></name></expr></argument>,
                            <argument><expr><name><name pos:line="3276" pos:column="29">pOp<pos:position pos:line="3276" pos:column="32"/></name><operator pos:line="3276" pos:column="32">-&gt;<pos:position pos:line="3276" pos:column="37"/></operator><name pos:line="3276" pos:column="34">p5<pos:position pos:line="3276" pos:column="36"/></name></name> <operator pos:line="3276" pos:column="37">&amp;<pos:position pos:line="3276" pos:column="42"/></operator> <name pos:line="3276" pos:column="39">OPFLAG_APPEND<pos:position pos:line="3276" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="3276" pos:column="54">seekResult<pos:position pos:line="3276" pos:column="64"/></name></expr></argument>
    )<pos:position pos:line="3277" pos:column="6"/></argument_list></call></expr>;<pos:position pos:line="3277" pos:column="7"/></expr_stmt>
  }<pos:position pos:line="3278" pos:column="4"/></block></else></if>
  
  <expr_stmt><expr><name><name pos:line="3280" pos:column="3">pC<pos:position pos:line="3280" pos:column="5"/></name><operator pos:line="3280" pos:column="5">-&gt;<pos:position pos:line="3280" pos:column="10"/></operator><name pos:line="3280" pos:column="7">rowidIsValid<pos:position pos:line="3280" pos:column="19"/></name></name> <operator pos:line="3280" pos:column="20">=<pos:position pos:line="3280" pos:column="21"/></operator> <literal type="number" pos:line="3280" pos:column="22">0<pos:position pos:line="3280" pos:column="23"/></literal></expr>;<pos:position pos:line="3280" pos:column="24"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="3281" pos:column="3">pC<pos:position pos:line="3281" pos:column="5"/></name><operator pos:line="3281" pos:column="5">-&gt;<pos:position pos:line="3281" pos:column="10"/></operator><name pos:line="3281" pos:column="7">deferredMoveto<pos:position pos:line="3281" pos:column="21"/></name></name> <operator pos:line="3281" pos:column="22">=<pos:position pos:line="3281" pos:column="23"/></operator> <literal type="number" pos:line="3281" pos:column="24">0<pos:position pos:line="3281" pos:column="25"/></literal></expr>;<pos:position pos:line="3281" pos:column="26"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="3282" pos:column="3">pC<pos:position pos:line="3282" pos:column="5"/></name><operator pos:line="3282" pos:column="5">-&gt;<pos:position pos:line="3282" pos:column="10"/></operator><name pos:line="3282" pos:column="7">cacheStatus<pos:position pos:line="3282" pos:column="18"/></name></name> <operator pos:line="3282" pos:column="19">=<pos:position pos:line="3282" pos:column="20"/></operator> <name pos:line="3282" pos:column="21">CACHE_STALE<pos:position pos:line="3282" pos:column="32"/></name></expr>;<pos:position pos:line="3282" pos:column="33"/></expr_stmt>

  <comment type="block" pos:line="3284" pos:column="3">/* Invoke the update-hook if required. */</comment>
  <if pos:line="3285" pos:column="3">if<condition pos:line="3285" pos:column="5">( <expr><name pos:line="3285" pos:column="7">rc<pos:position pos:line="3285" pos:column="9"/></name><operator pos:line="3285" pos:column="9">==<pos:position pos:line="3285" pos:column="11"/></operator><name pos:line="3285" pos:column="11">SQLITE_OK<pos:position pos:line="3285" pos:column="20"/></name> <operator pos:line="3285" pos:column="21">&amp;&amp;<pos:position pos:line="3285" pos:column="31"/></operator> <name><name pos:line="3285" pos:column="24">db<pos:position pos:line="3285" pos:column="26"/></name><operator pos:line="3285" pos:column="26">-&gt;<pos:position pos:line="3285" pos:column="31"/></operator><name pos:line="3285" pos:column="28">xUpdateCallback<pos:position pos:line="3285" pos:column="43"/></name></name> <operator pos:line="3285" pos:column="44">&amp;&amp;<pos:position pos:line="3285" pos:column="54"/></operator> <name><name pos:line="3285" pos:column="47">pOp<pos:position pos:line="3285" pos:column="50"/></name><operator pos:line="3285" pos:column="50">-&gt;<pos:position pos:line="3285" pos:column="55"/></operator><name pos:line="3285" pos:column="52">p4<pos:position pos:line="3285" pos:column="54"/></name><operator pos:line="3285" pos:column="54">.<pos:position pos:line="3285" pos:column="55"/></operator><name pos:line="3285" pos:column="55">z<pos:position pos:line="3285" pos:column="56"/></name></name></expr> )<pos:position pos:line="3285" pos:column="58"/></condition><then><block pos:line="3285" pos:column="58">{
    <expr_stmt><expr><name pos:line="3286" pos:column="5">zDb<pos:position pos:line="3286" pos:column="8"/></name> <operator pos:line="3286" pos:column="9">=<pos:position pos:line="3286" pos:column="10"/></operator> <name><name pos:line="3286" pos:column="11">db<pos:position pos:line="3286" pos:column="13"/></name><operator pos:line="3286" pos:column="13">-&gt;<pos:position pos:line="3286" pos:column="18"/></operator><name pos:line="3286" pos:column="15">aDb<pos:position pos:line="3286" pos:column="18"/></name><index pos:line="3286" pos:column="18">[<expr><name><name pos:line="3286" pos:column="19">pC<pos:position pos:line="3286" pos:column="21"/></name><operator pos:line="3286" pos:column="21">-&gt;<pos:position pos:line="3286" pos:column="26"/></operator><name pos:line="3286" pos:column="23">iDb<pos:position pos:line="3286" pos:column="26"/></name></name></expr>]<pos:position pos:line="3286" pos:column="27"/></index></name><operator pos:line="3286" pos:column="27">.<pos:position pos:line="3286" pos:column="28"/></operator><name pos:line="3286" pos:column="28">zName<pos:position pos:line="3286" pos:column="33"/></name></expr>;<pos:position pos:line="3286" pos:column="34"/></expr_stmt>
    <expr_stmt><expr><name pos:line="3287" pos:column="5">zTbl<pos:position pos:line="3287" pos:column="9"/></name> <operator pos:line="3287" pos:column="10">=<pos:position pos:line="3287" pos:column="11"/></operator> <name><name pos:line="3287" pos:column="12">pOp<pos:position pos:line="3287" pos:column="15"/></name><operator pos:line="3287" pos:column="15">-&gt;<pos:position pos:line="3287" pos:column="20"/></operator><name pos:line="3287" pos:column="17">p4<pos:position pos:line="3287" pos:column="19"/></name><operator pos:line="3287" pos:column="19">.<pos:position pos:line="3287" pos:column="20"/></operator><name pos:line="3287" pos:column="20">z<pos:position pos:line="3287" pos:column="21"/></name></name></expr>;<pos:position pos:line="3287" pos:column="22"/></expr_stmt>
    <expr_stmt><expr><name pos:line="3288" pos:column="5">op<pos:position pos:line="3288" pos:column="7"/></name> <operator pos:line="3288" pos:column="8">=<pos:position pos:line="3288" pos:column="9"/></operator> <operator pos:line="3288" pos:column="10">(<pos:position pos:line="3288" pos:column="11"/></operator><ternary><condition><expr><operator pos:line="3288" pos:column="11">(<pos:position pos:line="3288" pos:column="12"/></operator><name><name pos:line="3288" pos:column="12">pOp<pos:position pos:line="3288" pos:column="15"/></name><operator pos:line="3288" pos:column="15">-&gt;<pos:position pos:line="3288" pos:column="20"/></operator><name pos:line="3288" pos:column="17">p5<pos:position pos:line="3288" pos:column="19"/></name></name> <operator pos:line="3288" pos:column="20">&amp;<pos:position pos:line="3288" pos:column="25"/></operator> <name pos:line="3288" pos:column="22">OPFLAG_ISUPDATE<pos:position pos:line="3288" pos:column="37"/></name><operator pos:line="3288" pos:column="37">)<pos:position pos:line="3288" pos:column="38"/></operator></expr> ?<pos:position pos:line="3288" pos:column="40"/></condition><then pos:line="3288" pos:column="40"> <expr><name pos:line="3288" pos:column="41">SQLITE_UPDATE<pos:position pos:line="3288" pos:column="54"/></name></expr> <pos:position pos:line="3288" pos:column="55"/></then><else pos:line="3288" pos:column="55">: <expr><name pos:line="3288" pos:column="57">SQLITE_INSERT<pos:position pos:line="3288" pos:column="70"/></name></expr></else></ternary><operator pos:line="3288" pos:column="70">)<pos:position pos:line="3288" pos:column="71"/></operator></expr>;<pos:position pos:line="3288" pos:column="72"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="3289" pos:column="5">assert<pos:position pos:line="3289" pos:column="11"/></name><argument_list pos:line="3289" pos:column="11">( <argument><expr><name><name pos:line="3289" pos:column="13">pC<pos:position pos:line="3289" pos:column="15"/></name><operator pos:line="3289" pos:column="15">-&gt;<pos:position pos:line="3289" pos:column="20"/></operator><name pos:line="3289" pos:column="17">isTable<pos:position pos:line="3289" pos:column="24"/></name></name></expr></argument> )<pos:position pos:line="3289" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="3289" pos:column="27"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="3290" pos:column="5">db<pos:position pos:line="3290" pos:column="7"/></name><operator pos:line="3290" pos:column="7">-&gt;<pos:position pos:line="3290" pos:column="12"/></operator><name pos:line="3290" pos:column="9">xUpdateCallback<pos:position pos:line="3290" pos:column="24"/></name></name><argument_list pos:line="3290" pos:column="24">(<argument><expr><name><name pos:line="3290" pos:column="25">db<pos:position pos:line="3290" pos:column="27"/></name><operator pos:line="3290" pos:column="27">-&gt;<pos:position pos:line="3290" pos:column="32"/></operator><name pos:line="3290" pos:column="29">pUpdateArg<pos:position pos:line="3290" pos:column="39"/></name></name></expr></argument>, <argument><expr><name pos:line="3290" pos:column="41">op<pos:position pos:line="3290" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="3290" pos:column="45">zDb<pos:position pos:line="3290" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="3290" pos:column="50">zTbl<pos:position pos:line="3290" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="3290" pos:column="56">iKey<pos:position pos:line="3290" pos:column="60"/></name></expr></argument>)<pos:position pos:line="3290" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="3290" pos:column="62"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="3291" pos:column="5">assert<pos:position pos:line="3291" pos:column="11"/></name><argument_list pos:line="3291" pos:column="11">( <argument><expr><name><name pos:line="3291" pos:column="13">pC<pos:position pos:line="3291" pos:column="15"/></name><operator pos:line="3291" pos:column="15">-&gt;<pos:position pos:line="3291" pos:column="20"/></operator><name pos:line="3291" pos:column="17">iDb<pos:position pos:line="3291" pos:column="20"/></name></name><operator pos:line="3291" pos:column="20">&gt;=<pos:position pos:line="3291" pos:column="25"/></operator><literal type="number" pos:line="3291" pos:column="22">0<pos:position pos:line="3291" pos:column="23"/></literal></expr></argument> )<pos:position pos:line="3291" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="3291" pos:column="26"/></expr_stmt>
  }<pos:position pos:line="3292" pos:column="4"/></block></then></if>
  <break pos:line="3293" pos:column="3">break;<pos:position pos:line="3293" pos:column="9"/></break>
}<pos:position pos:line="3294" pos:column="2"/></block>

<comment type="block" pos:line="3296" pos:column="1">/* Opcode: Delete P1 P2 * P4 *
**
** Delete the record at which the P1 cursor is currently pointing.
**
** The cursor will be left pointing at either the next or the previous
** record in the table. If it is left pointing at the next record, then
** the next Next instruction will be a no-op.  Hence it is OK to delete
** a record from within an Next loop.
**
** If the OPFLAG_NCHANGE flag of P2 is set, then the row change count is
** incremented (otherwise not).
**
** P1 must not be pseudo-table.  It has to be a real table with
** multiple rows.
**
** If P4 is not NULL, then it is the name of the table that P1 is
** pointing to.  The update hook will be invoked, if it exists.
** If P4 is not NULL then the P1 cursor must have been positioned
** using OP_NotFound prior to invoking this opcode.
*/</comment>
<case pos:line="3316" pos:column="1">case <expr><name pos:line="3316" pos:column="6">OP_Delete<pos:position pos:line="3316" pos:column="15"/></name></expr>:<pos:position pos:line="3316" pos:column="16"/></case> <block pos:line="3316" pos:column="17">{
  <decl_stmt><decl><type><name pos:line="3317" pos:column="3">int<pos:position pos:line="3317" pos:column="6"/></name></type> <name pos:line="3317" pos:column="7">i<pos:position pos:line="3317" pos:column="8"/></name></decl>;<pos:position pos:line="3317" pos:column="9"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="3318" pos:column="3">i64<pos:position pos:line="3318" pos:column="6"/></name></type> <name pos:line="3318" pos:column="7">iKey<pos:position pos:line="3318" pos:column="11"/></name></decl>;<pos:position pos:line="3318" pos:column="12"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="3319" pos:column="3">VdbeCursor<pos:position pos:line="3319" pos:column="13"/></name> <modifier pos:line="3319" pos:column="14">*<pos:position pos:line="3319" pos:column="15"/></modifier></type><name pos:line="3319" pos:column="15">pC<pos:position pos:line="3319" pos:column="17"/></name></decl>;<pos:position pos:line="3319" pos:column="18"/></decl_stmt>

  <expr_stmt><expr><name pos:line="3321" pos:column="3">i<pos:position pos:line="3321" pos:column="4"/></name> <operator pos:line="3321" pos:column="5">=<pos:position pos:line="3321" pos:column="6"/></operator> <name><name pos:line="3321" pos:column="7">pOp<pos:position pos:line="3321" pos:column="10"/></name><operator pos:line="3321" pos:column="10">-&gt;<pos:position pos:line="3321" pos:column="15"/></operator><name pos:line="3321" pos:column="12">p1<pos:position pos:line="3321" pos:column="14"/></name></name></expr>;<pos:position pos:line="3321" pos:column="15"/></expr_stmt>
  <expr_stmt><expr><name pos:line="3322" pos:column="3">iKey<pos:position pos:line="3322" pos:column="7"/></name> <operator pos:line="3322" pos:column="8">=<pos:position pos:line="3322" pos:column="9"/></operator> <literal type="number" pos:line="3322" pos:column="10">0<pos:position pos:line="3322" pos:column="11"/></literal></expr>;<pos:position pos:line="3322" pos:column="12"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="3323" pos:column="3">assert<pos:position pos:line="3323" pos:column="9"/></name><argument_list pos:line="3323" pos:column="9">( <argument><expr><name pos:line="3323" pos:column="11">i<pos:position pos:line="3323" pos:column="12"/></name><operator pos:line="3323" pos:column="12">&gt;=<pos:position pos:line="3323" pos:column="17"/></operator><literal type="number" pos:line="3323" pos:column="14">0<pos:position pos:line="3323" pos:column="15"/></literal> <operator pos:line="3323" pos:column="16">&amp;&amp;<pos:position pos:line="3323" pos:column="26"/></operator> <name pos:line="3323" pos:column="19">i<pos:position pos:line="3323" pos:column="20"/></name><operator pos:line="3323" pos:column="20">&lt;<pos:position pos:line="3323" pos:column="24"/></operator><name><name pos:line="3323" pos:column="21">p<pos:position pos:line="3323" pos:column="22"/></name><operator pos:line="3323" pos:column="22">-&gt;<pos:position pos:line="3323" pos:column="27"/></operator><name pos:line="3323" pos:column="24">nCursor<pos:position pos:line="3323" pos:column="31"/></name></name></expr></argument> )<pos:position pos:line="3323" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="3323" pos:column="34"/></expr_stmt>
  <expr_stmt><expr><name pos:line="3324" pos:column="3">pC<pos:position pos:line="3324" pos:column="5"/></name> <operator pos:line="3324" pos:column="6">=<pos:position pos:line="3324" pos:column="7"/></operator> <name><name pos:line="3324" pos:column="8">p<pos:position pos:line="3324" pos:column="9"/></name><operator pos:line="3324" pos:column="9">-&gt;<pos:position pos:line="3324" pos:column="14"/></operator><name pos:line="3324" pos:column="11">apCsr<pos:position pos:line="3324" pos:column="16"/></name><index pos:line="3324" pos:column="16">[<expr><name pos:line="3324" pos:column="17">i<pos:position pos:line="3324" pos:column="18"/></name></expr>]<pos:position pos:line="3324" pos:column="19"/></index></name></expr>;<pos:position pos:line="3324" pos:column="20"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="3325" pos:column="3">assert<pos:position pos:line="3325" pos:column="9"/></name><argument_list pos:line="3325" pos:column="9">( <argument><expr><name pos:line="3325" pos:column="11">pC<pos:position pos:line="3325" pos:column="13"/></name><operator pos:line="3325" pos:column="13">!=<pos:position pos:line="3325" pos:column="15"/></operator><literal type="number" pos:line="3325" pos:column="15">0<pos:position pos:line="3325" pos:column="16"/></literal></expr></argument> )<pos:position pos:line="3325" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="3325" pos:column="19"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="3326" pos:column="3">assert<pos:position pos:line="3326" pos:column="9"/></name><argument_list pos:line="3326" pos:column="9">( <argument><expr><name><name pos:line="3326" pos:column="11">pC<pos:position pos:line="3326" pos:column="13"/></name><operator pos:line="3326" pos:column="13">-&gt;<pos:position pos:line="3326" pos:column="18"/></operator><name pos:line="3326" pos:column="15">pCursor<pos:position pos:line="3326" pos:column="22"/></name></name><operator pos:line="3326" pos:column="22">!=<pos:position pos:line="3326" pos:column="24"/></operator><literal type="number" pos:line="3326" pos:column="24">0<pos:position pos:line="3326" pos:column="25"/></literal></expr></argument> )<pos:position pos:line="3326" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="3326" pos:column="28"/></expr_stmt>  <comment type="block" pos:line="3326" pos:column="30">/* Only valid for real tables, no pseudotables */</comment>

  <comment type="block" pos:line="3328" pos:column="3">/* If the update-hook will be invoked, set iKey to the rowid of the
  ** row being deleted.
  */</comment>
  <if pos:line="3331" pos:column="3">if<condition pos:line="3331" pos:column="5">( <expr><name><name pos:line="3331" pos:column="7">db<pos:position pos:line="3331" pos:column="9"/></name><operator pos:line="3331" pos:column="9">-&gt;<pos:position pos:line="3331" pos:column="14"/></operator><name pos:line="3331" pos:column="11">xUpdateCallback<pos:position pos:line="3331" pos:column="26"/></name></name> <operator pos:line="3331" pos:column="27">&amp;&amp;<pos:position pos:line="3331" pos:column="37"/></operator> <name><name pos:line="3331" pos:column="30">pOp<pos:position pos:line="3331" pos:column="33"/></name><operator pos:line="3331" pos:column="33">-&gt;<pos:position pos:line="3331" pos:column="38"/></operator><name pos:line="3331" pos:column="35">p4<pos:position pos:line="3331" pos:column="37"/></name><operator pos:line="3331" pos:column="37">.<pos:position pos:line="3331" pos:column="38"/></operator><name pos:line="3331" pos:column="38">z<pos:position pos:line="3331" pos:column="39"/></name></name></expr> )<pos:position pos:line="3331" pos:column="41"/></condition><then><block pos:line="3331" pos:column="41">{
    <expr_stmt><expr><call><name pos:line="3332" pos:column="5">assert<pos:position pos:line="3332" pos:column="11"/></name><argument_list pos:line="3332" pos:column="11">( <argument><expr><name><name pos:line="3332" pos:column="13">pC<pos:position pos:line="3332" pos:column="15"/></name><operator pos:line="3332" pos:column="15">-&gt;<pos:position pos:line="3332" pos:column="20"/></operator><name pos:line="3332" pos:column="17">isTable<pos:position pos:line="3332" pos:column="24"/></name></name></expr></argument> )<pos:position pos:line="3332" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="3332" pos:column="27"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="3333" pos:column="5">assert<pos:position pos:line="3333" pos:column="11"/></name><argument_list pos:line="3333" pos:column="11">( <argument><expr><name><name pos:line="3333" pos:column="13">pC<pos:position pos:line="3333" pos:column="15"/></name><operator pos:line="3333" pos:column="15">-&gt;<pos:position pos:line="3333" pos:column="20"/></operator><name pos:line="3333" pos:column="17">rowidIsValid<pos:position pos:line="3333" pos:column="29"/></name></name></expr></argument> )<pos:position pos:line="3333" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="3333" pos:column="32"/></expr_stmt>  <comment type="block" pos:line="3333" pos:column="34">/* lastRowid set by previous OP_NotFound */</comment>
    <expr_stmt><expr><name pos:line="3334" pos:column="5">iKey<pos:position pos:line="3334" pos:column="9"/></name> <operator pos:line="3334" pos:column="10">=<pos:position pos:line="3334" pos:column="11"/></operator> <name><name pos:line="3334" pos:column="12">pC<pos:position pos:line="3334" pos:column="14"/></name><operator pos:line="3334" pos:column="14">-&gt;<pos:position pos:line="3334" pos:column="19"/></operator><name pos:line="3334" pos:column="16">lastRowid<pos:position pos:line="3334" pos:column="25"/></name></name></expr>;<pos:position pos:line="3334" pos:column="26"/></expr_stmt>
  }<pos:position pos:line="3335" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="3337" pos:column="3">rc<pos:position pos:line="3337" pos:column="5"/></name> <operator pos:line="3337" pos:column="6">=<pos:position pos:line="3337" pos:column="7"/></operator> <call><name pos:line="3337" pos:column="8">sqlite3VdbeCursorMoveto<pos:position pos:line="3337" pos:column="31"/></name><argument_list pos:line="3337" pos:column="31">(<argument><expr><name pos:line="3337" pos:column="32">pC<pos:position pos:line="3337" pos:column="34"/></name></expr></argument>)<pos:position pos:line="3337" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="3337" pos:column="36"/></expr_stmt>
  <if pos:line="3338" pos:column="3">if<condition pos:line="3338" pos:column="5">( <expr><name pos:line="3338" pos:column="7">rc<pos:position pos:line="3338" pos:column="9"/></name></expr> )<pos:position pos:line="3338" pos:column="11"/></condition><then pos:line="3338" pos:column="11"> <block type="pseudo"><goto pos:line="3338" pos:column="12">goto <name pos:line="3338" pos:column="17">abort_due_to_error<pos:position pos:line="3338" pos:column="35"/></name>;<pos:position pos:line="3338" pos:column="36"/></goto></block></then></if>
  <expr_stmt><expr><call><name pos:line="3339" pos:column="3">sqlite3BtreeSetCachedRowid<pos:position pos:line="3339" pos:column="29"/></name><argument_list pos:line="3339" pos:column="29">(<argument><expr><name><name pos:line="3339" pos:column="30">pC<pos:position pos:line="3339" pos:column="32"/></name><operator pos:line="3339" pos:column="32">-&gt;<pos:position pos:line="3339" pos:column="37"/></operator><name pos:line="3339" pos:column="34">pCursor<pos:position pos:line="3339" pos:column="41"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="3339" pos:column="43">0<pos:position pos:line="3339" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="3339" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="3339" pos:column="46"/></expr_stmt>
  <expr_stmt><expr><name pos:line="3340" pos:column="3">rc<pos:position pos:line="3340" pos:column="5"/></name> <operator pos:line="3340" pos:column="6">=<pos:position pos:line="3340" pos:column="7"/></operator> <call><name pos:line="3340" pos:column="8">sqlite3BtreeDelete<pos:position pos:line="3340" pos:column="26"/></name><argument_list pos:line="3340" pos:column="26">(<argument><expr><name><name pos:line="3340" pos:column="27">pC<pos:position pos:line="3340" pos:column="29"/></name><operator pos:line="3340" pos:column="29">-&gt;<pos:position pos:line="3340" pos:column="34"/></operator><name pos:line="3340" pos:column="31">pCursor<pos:position pos:line="3340" pos:column="38"/></name></name></expr></argument>)<pos:position pos:line="3340" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="3340" pos:column="40"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="3341" pos:column="3">pC<pos:position pos:line="3341" pos:column="5"/></name><operator pos:line="3341" pos:column="5">-&gt;<pos:position pos:line="3341" pos:column="10"/></operator><name pos:line="3341" pos:column="7">cacheStatus<pos:position pos:line="3341" pos:column="18"/></name></name> <operator pos:line="3341" pos:column="19">=<pos:position pos:line="3341" pos:column="20"/></operator> <name pos:line="3341" pos:column="21">CACHE_STALE<pos:position pos:line="3341" pos:column="32"/></name></expr>;<pos:position pos:line="3341" pos:column="33"/></expr_stmt>

  <comment type="block" pos:line="3343" pos:column="3">/* Invoke the update-hook if required. */</comment>
  <if pos:line="3344" pos:column="3">if<condition pos:line="3344" pos:column="5">( <expr><name pos:line="3344" pos:column="7">rc<pos:position pos:line="3344" pos:column="9"/></name><operator pos:line="3344" pos:column="9">==<pos:position pos:line="3344" pos:column="11"/></operator><name pos:line="3344" pos:column="11">SQLITE_OK<pos:position pos:line="3344" pos:column="20"/></name> <operator pos:line="3344" pos:column="21">&amp;&amp;<pos:position pos:line="3344" pos:column="31"/></operator> <name><name pos:line="3344" pos:column="24">db<pos:position pos:line="3344" pos:column="26"/></name><operator pos:line="3344" pos:column="26">-&gt;<pos:position pos:line="3344" pos:column="31"/></operator><name pos:line="3344" pos:column="28">xUpdateCallback<pos:position pos:line="3344" pos:column="43"/></name></name> <operator pos:line="3344" pos:column="44">&amp;&amp;<pos:position pos:line="3344" pos:column="54"/></operator> <name><name pos:line="3344" pos:column="47">pOp<pos:position pos:line="3344" pos:column="50"/></name><operator pos:line="3344" pos:column="50">-&gt;<pos:position pos:line="3344" pos:column="55"/></operator><name pos:line="3344" pos:column="52">p4<pos:position pos:line="3344" pos:column="54"/></name><operator pos:line="3344" pos:column="54">.<pos:position pos:line="3344" pos:column="55"/></operator><name pos:line="3344" pos:column="55">z<pos:position pos:line="3344" pos:column="56"/></name></name></expr> )<pos:position pos:line="3344" pos:column="58"/></condition><then><block pos:line="3344" pos:column="58">{
    <decl_stmt><decl><type><specifier pos:line="3345" pos:column="5">const<pos:position pos:line="3345" pos:column="10"/></specifier> <name pos:line="3345" pos:column="11">char<pos:position pos:line="3345" pos:column="15"/></name> <modifier pos:line="3345" pos:column="16">*<pos:position pos:line="3345" pos:column="17"/></modifier></type><name pos:line="3345" pos:column="17">zDb<pos:position pos:line="3345" pos:column="20"/></name> <init pos:line="3345" pos:column="21">= <expr><name><name pos:line="3345" pos:column="23">db<pos:position pos:line="3345" pos:column="25"/></name><operator pos:line="3345" pos:column="25">-&gt;<pos:position pos:line="3345" pos:column="30"/></operator><name pos:line="3345" pos:column="27">aDb<pos:position pos:line="3345" pos:column="30"/></name><index pos:line="3345" pos:column="30">[<expr><name><name pos:line="3345" pos:column="31">pC<pos:position pos:line="3345" pos:column="33"/></name><operator pos:line="3345" pos:column="33">-&gt;<pos:position pos:line="3345" pos:column="38"/></operator><name pos:line="3345" pos:column="35">iDb<pos:position pos:line="3345" pos:column="38"/></name></name></expr>]<pos:position pos:line="3345" pos:column="39"/></index></name><operator pos:line="3345" pos:column="39">.<pos:position pos:line="3345" pos:column="40"/></operator><name pos:line="3345" pos:column="40">zName<pos:position pos:line="3345" pos:column="45"/></name></expr></init></decl>;<pos:position pos:line="3345" pos:column="46"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="3346" pos:column="5">const<pos:position pos:line="3346" pos:column="10"/></specifier> <name pos:line="3346" pos:column="11">char<pos:position pos:line="3346" pos:column="15"/></name> <modifier pos:line="3346" pos:column="16">*<pos:position pos:line="3346" pos:column="17"/></modifier></type><name pos:line="3346" pos:column="17">zTbl<pos:position pos:line="3346" pos:column="21"/></name> <init pos:line="3346" pos:column="22">= <expr><name><name pos:line="3346" pos:column="24">pOp<pos:position pos:line="3346" pos:column="27"/></name><operator pos:line="3346" pos:column="27">-&gt;<pos:position pos:line="3346" pos:column="32"/></operator><name pos:line="3346" pos:column="29">p4<pos:position pos:line="3346" pos:column="31"/></name><operator pos:line="3346" pos:column="31">.<pos:position pos:line="3346" pos:column="32"/></operator><name pos:line="3346" pos:column="32">z<pos:position pos:line="3346" pos:column="33"/></name></name></expr></init></decl>;<pos:position pos:line="3346" pos:column="34"/></decl_stmt>
    <expr_stmt><expr><call><name><name pos:line="3347" pos:column="5">db<pos:position pos:line="3347" pos:column="7"/></name><operator pos:line="3347" pos:column="7">-&gt;<pos:position pos:line="3347" pos:column="12"/></operator><name pos:line="3347" pos:column="9">xUpdateCallback<pos:position pos:line="3347" pos:column="24"/></name></name><argument_list pos:line="3347" pos:column="24">(<argument><expr><name><name pos:line="3347" pos:column="25">db<pos:position pos:line="3347" pos:column="27"/></name><operator pos:line="3347" pos:column="27">-&gt;<pos:position pos:line="3347" pos:column="32"/></operator><name pos:line="3347" pos:column="29">pUpdateArg<pos:position pos:line="3347" pos:column="39"/></name></name></expr></argument>, <argument><expr><name pos:line="3347" pos:column="41">SQLITE_DELETE<pos:position pos:line="3347" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="3347" pos:column="56">zDb<pos:position pos:line="3347" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="3347" pos:column="61">zTbl<pos:position pos:line="3347" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="3347" pos:column="67">iKey<pos:position pos:line="3347" pos:column="71"/></name></expr></argument>)<pos:position pos:line="3347" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="3347" pos:column="73"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="3348" pos:column="5">assert<pos:position pos:line="3348" pos:column="11"/></name><argument_list pos:line="3348" pos:column="11">( <argument><expr><name><name pos:line="3348" pos:column="13">pC<pos:position pos:line="3348" pos:column="15"/></name><operator pos:line="3348" pos:column="15">-&gt;<pos:position pos:line="3348" pos:column="20"/></operator><name pos:line="3348" pos:column="17">iDb<pos:position pos:line="3348" pos:column="20"/></name></name><operator pos:line="3348" pos:column="20">&gt;=<pos:position pos:line="3348" pos:column="25"/></operator><literal type="number" pos:line="3348" pos:column="22">0<pos:position pos:line="3348" pos:column="23"/></literal></expr></argument> )<pos:position pos:line="3348" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="3348" pos:column="26"/></expr_stmt>
  }<pos:position pos:line="3349" pos:column="4"/></block></then></if>
  <if pos:line="3350" pos:column="3">if<condition pos:line="3350" pos:column="5">( <expr><name><name pos:line="3350" pos:column="7">pOp<pos:position pos:line="3350" pos:column="10"/></name><operator pos:line="3350" pos:column="10">-&gt;<pos:position pos:line="3350" pos:column="15"/></operator><name pos:line="3350" pos:column="12">p2<pos:position pos:line="3350" pos:column="14"/></name></name> <operator pos:line="3350" pos:column="15">&amp;<pos:position pos:line="3350" pos:column="20"/></operator> <name pos:line="3350" pos:column="17">OPFLAG_NCHANGE<pos:position pos:line="3350" pos:column="31"/></name></expr> )<pos:position pos:line="3350" pos:column="33"/></condition><then pos:line="3350" pos:column="33"> <block type="pseudo"><expr_stmt><expr><name><name pos:line="3350" pos:column="34">p<pos:position pos:line="3350" pos:column="35"/></name><operator pos:line="3350" pos:column="35">-&gt;<pos:position pos:line="3350" pos:column="40"/></operator><name pos:line="3350" pos:column="37">nChange<pos:position pos:line="3350" pos:column="44"/></name></name><operator pos:line="3350" pos:column="44">++<pos:position pos:line="3350" pos:column="46"/></operator></expr>;<pos:position pos:line="3350" pos:column="47"/></expr_stmt></block></then></if>
  <break pos:line="3351" pos:column="3">break;<pos:position pos:line="3351" pos:column="9"/></break>
}<pos:position pos:line="3352" pos:column="2"/></block>

<comment type="block" pos:line="3354" pos:column="1">/* Opcode: ResetCount P1 * *
**
** This opcode resets the VMs internal change counter to 0. If P1 is true,
** then the value of the change counter is copied to the database handle
** change counter (returned by subsequent calls to sqlite3_changes())
** before it is reset. This is used by trigger programs.
*/</comment>
<case pos:line="3361" pos:column="1">case <expr><name pos:line="3361" pos:column="6">OP_ResetCount<pos:position pos:line="3361" pos:column="19"/></name></expr>:<pos:position pos:line="3361" pos:column="20"/></case> <block pos:line="3361" pos:column="21">{
  <if pos:line="3362" pos:column="3">if<condition pos:line="3362" pos:column="5">( <expr><name><name pos:line="3362" pos:column="7">pOp<pos:position pos:line="3362" pos:column="10"/></name><operator pos:line="3362" pos:column="10">-&gt;<pos:position pos:line="3362" pos:column="15"/></operator><name pos:line="3362" pos:column="12">p1<pos:position pos:line="3362" pos:column="14"/></name></name></expr> )<pos:position pos:line="3362" pos:column="16"/></condition><then><block pos:line="3362" pos:column="16">{
    <expr_stmt><expr><call><name pos:line="3363" pos:column="5">sqlite3VdbeSetChanges<pos:position pos:line="3363" pos:column="26"/></name><argument_list pos:line="3363" pos:column="26">(<argument><expr><name pos:line="3363" pos:column="27">db<pos:position pos:line="3363" pos:column="29"/></name></expr></argument>, <argument><expr><name><name pos:line="3363" pos:column="31">p<pos:position pos:line="3363" pos:column="32"/></name><operator pos:line="3363" pos:column="32">-&gt;<pos:position pos:line="3363" pos:column="37"/></operator><name pos:line="3363" pos:column="34">nChange<pos:position pos:line="3363" pos:column="41"/></name></name></expr></argument>)<pos:position pos:line="3363" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="3363" pos:column="43"/></expr_stmt>
  }<pos:position pos:line="3364" pos:column="4"/></block></then></if>
  <expr_stmt><expr><name><name pos:line="3365" pos:column="3">p<pos:position pos:line="3365" pos:column="4"/></name><operator pos:line="3365" pos:column="4">-&gt;<pos:position pos:line="3365" pos:column="9"/></operator><name pos:line="3365" pos:column="6">nChange<pos:position pos:line="3365" pos:column="13"/></name></name> <operator pos:line="3365" pos:column="14">=<pos:position pos:line="3365" pos:column="15"/></operator> <literal type="number" pos:line="3365" pos:column="16">0<pos:position pos:line="3365" pos:column="17"/></literal></expr>;<pos:position pos:line="3365" pos:column="18"/></expr_stmt>
  <break pos:line="3366" pos:column="3">break;<pos:position pos:line="3366" pos:column="9"/></break>
}<pos:position pos:line="3367" pos:column="2"/></block>

<comment type="block" pos:line="3369" pos:column="1">/* Opcode: RowData P1 P2 * * *
**
** Write into register P2 the complete row data for cursor P1.
** There is no interpretation of the data.  
** It is just copied onto the P2 register exactly as 
** it is found in the database file.
**
** If the P1 cursor must be pointing to a valid row (not a NULL row)
** of a real table, not a pseudo-table.
*/</comment>
<comment type="block" pos:line="3379" pos:column="1">/* Opcode: RowKey P1 P2 * * *
**
** Write into register P2 the complete row key for cursor P1.
** There is no interpretation of the data.  
** The key is copied onto the P3 register exactly as 
** it is found in the database file.
**
** If the P1 cursor must be pointing to a valid row (not a NULL row)
** of a real table, not a pseudo-table.
*/</comment>
<case pos:line="3389" pos:column="1">case <expr><name pos:line="3389" pos:column="6">OP_RowKey<pos:position pos:line="3389" pos:column="15"/></name></expr>:<pos:position pos:line="3389" pos:column="16"/></case>
<case pos:line="3390" pos:column="1">case <expr><name pos:line="3390" pos:column="6">OP_RowData<pos:position pos:line="3390" pos:column="16"/></name></expr>:<pos:position pos:line="3390" pos:column="17"/></case> <block pos:line="3390" pos:column="18">{
  <decl_stmt><decl><type><name pos:line="3391" pos:column="3">int<pos:position pos:line="3391" pos:column="6"/></name></type> <name pos:line="3391" pos:column="7">i<pos:position pos:line="3391" pos:column="8"/></name></decl>;<pos:position pos:line="3391" pos:column="9"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="3392" pos:column="3">VdbeCursor<pos:position pos:line="3392" pos:column="13"/></name> <modifier pos:line="3392" pos:column="14">*<pos:position pos:line="3392" pos:column="15"/></modifier></type><name pos:line="3392" pos:column="15">pC<pos:position pos:line="3392" pos:column="17"/></name></decl>;<pos:position pos:line="3392" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="3393" pos:column="3">BtCursor<pos:position pos:line="3393" pos:column="11"/></name> <modifier pos:line="3393" pos:column="12">*<pos:position pos:line="3393" pos:column="13"/></modifier></type><name pos:line="3393" pos:column="13">pCrsr<pos:position pos:line="3393" pos:column="18"/></name></decl>;<pos:position pos:line="3393" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="3394" pos:column="3">u32<pos:position pos:line="3394" pos:column="6"/></name></type> <name pos:line="3394" pos:column="7">n<pos:position pos:line="3394" pos:column="8"/></name></decl>;<pos:position pos:line="3394" pos:column="9"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="3395" pos:column="3">i64<pos:position pos:line="3395" pos:column="6"/></name></type> <name pos:line="3395" pos:column="7">n64<pos:position pos:line="3395" pos:column="10"/></name></decl>;<pos:position pos:line="3395" pos:column="11"/></decl_stmt>

  <expr_stmt><expr><name pos:line="3397" pos:column="3">i<pos:position pos:line="3397" pos:column="4"/></name> <operator pos:line="3397" pos:column="5">=<pos:position pos:line="3397" pos:column="6"/></operator> <name><name pos:line="3397" pos:column="7">pOp<pos:position pos:line="3397" pos:column="10"/></name><operator pos:line="3397" pos:column="10">-&gt;<pos:position pos:line="3397" pos:column="15"/></operator><name pos:line="3397" pos:column="12">p1<pos:position pos:line="3397" pos:column="14"/></name></name></expr>;<pos:position pos:line="3397" pos:column="15"/></expr_stmt>
  <expr_stmt><expr><name pos:line="3398" pos:column="3">pOut<pos:position pos:line="3398" pos:column="7"/></name> <operator pos:line="3398" pos:column="8">=<pos:position pos:line="3398" pos:column="9"/></operator> <operator pos:line="3398" pos:column="10">&amp;<pos:position pos:line="3398" pos:column="15"/></operator><name><name pos:line="3398" pos:column="11">p<pos:position pos:line="3398" pos:column="12"/></name><operator pos:line="3398" pos:column="12">-&gt;<pos:position pos:line="3398" pos:column="17"/></operator><name pos:line="3398" pos:column="14">aMem<pos:position pos:line="3398" pos:column="18"/></name><index pos:line="3398" pos:column="18">[<expr><name><name pos:line="3398" pos:column="19">pOp<pos:position pos:line="3398" pos:column="22"/></name><operator pos:line="3398" pos:column="22">-&gt;<pos:position pos:line="3398" pos:column="27"/></operator><name pos:line="3398" pos:column="24">p2<pos:position pos:line="3398" pos:column="26"/></name></name></expr>]<pos:position pos:line="3398" pos:column="27"/></index></name></expr>;<pos:position pos:line="3398" pos:column="28"/></expr_stmt>

  <comment type="block" pos:line="3400" pos:column="3">/* Note that RowKey and RowData are really exactly the same instruction */</comment>
  <expr_stmt><expr><call><name pos:line="3401" pos:column="3">assert<pos:position pos:line="3401" pos:column="9"/></name><argument_list pos:line="3401" pos:column="9">( <argument><expr><name pos:line="3401" pos:column="11">i<pos:position pos:line="3401" pos:column="12"/></name><operator pos:line="3401" pos:column="12">&gt;=<pos:position pos:line="3401" pos:column="17"/></operator><literal type="number" pos:line="3401" pos:column="14">0<pos:position pos:line="3401" pos:column="15"/></literal> <operator pos:line="3401" pos:column="16">&amp;&amp;<pos:position pos:line="3401" pos:column="26"/></operator> <name pos:line="3401" pos:column="19">i<pos:position pos:line="3401" pos:column="20"/></name><operator pos:line="3401" pos:column="20">&lt;<pos:position pos:line="3401" pos:column="24"/></operator><name><name pos:line="3401" pos:column="21">p<pos:position pos:line="3401" pos:column="22"/></name><operator pos:line="3401" pos:column="22">-&gt;<pos:position pos:line="3401" pos:column="27"/></operator><name pos:line="3401" pos:column="24">nCursor<pos:position pos:line="3401" pos:column="31"/></name></name></expr></argument> )<pos:position pos:line="3401" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="3401" pos:column="34"/></expr_stmt>
  <expr_stmt><expr><name pos:line="3402" pos:column="3">pC<pos:position pos:line="3402" pos:column="5"/></name> <operator pos:line="3402" pos:column="6">=<pos:position pos:line="3402" pos:column="7"/></operator> <name><name pos:line="3402" pos:column="8">p<pos:position pos:line="3402" pos:column="9"/></name><operator pos:line="3402" pos:column="9">-&gt;<pos:position pos:line="3402" pos:column="14"/></operator><name pos:line="3402" pos:column="11">apCsr<pos:position pos:line="3402" pos:column="16"/></name><index pos:line="3402" pos:column="16">[<expr><name pos:line="3402" pos:column="17">i<pos:position pos:line="3402" pos:column="18"/></name></expr>]<pos:position pos:line="3402" pos:column="19"/></index></name></expr>;<pos:position pos:line="3402" pos:column="20"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="3403" pos:column="3">assert<pos:position pos:line="3403" pos:column="9"/></name><argument_list pos:line="3403" pos:column="9">( <argument><expr><name><name pos:line="3403" pos:column="11">pC<pos:position pos:line="3403" pos:column="13"/></name><operator pos:line="3403" pos:column="13">-&gt;<pos:position pos:line="3403" pos:column="18"/></operator><name pos:line="3403" pos:column="15">isTable<pos:position pos:line="3403" pos:column="22"/></name></name> <operator pos:line="3403" pos:column="23">||<pos:position pos:line="3403" pos:column="25"/></operator> <name><name pos:line="3403" pos:column="26">pOp<pos:position pos:line="3403" pos:column="29"/></name><operator pos:line="3403" pos:column="29">-&gt;<pos:position pos:line="3403" pos:column="34"/></operator><name pos:line="3403" pos:column="31">opcode<pos:position pos:line="3403" pos:column="37"/></name></name><operator pos:line="3403" pos:column="37">==<pos:position pos:line="3403" pos:column="39"/></operator><name pos:line="3403" pos:column="39">OP_RowKey<pos:position pos:line="3403" pos:column="48"/></name></expr></argument> )<pos:position pos:line="3403" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="3403" pos:column="51"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="3404" pos:column="3">assert<pos:position pos:line="3404" pos:column="9"/></name><argument_list pos:line="3404" pos:column="9">( <argument><expr><name><name pos:line="3404" pos:column="11">pC<pos:position pos:line="3404" pos:column="13"/></name><operator pos:line="3404" pos:column="13">-&gt;<pos:position pos:line="3404" pos:column="18"/></operator><name pos:line="3404" pos:column="15">isIndex<pos:position pos:line="3404" pos:column="22"/></name></name> <operator pos:line="3404" pos:column="23">||<pos:position pos:line="3404" pos:column="25"/></operator> <name><name pos:line="3404" pos:column="26">pOp<pos:position pos:line="3404" pos:column="29"/></name><operator pos:line="3404" pos:column="29">-&gt;<pos:position pos:line="3404" pos:column="34"/></operator><name pos:line="3404" pos:column="31">opcode<pos:position pos:line="3404" pos:column="37"/></name></name><operator pos:line="3404" pos:column="37">==<pos:position pos:line="3404" pos:column="39"/></operator><name pos:line="3404" pos:column="39">OP_RowData<pos:position pos:line="3404" pos:column="49"/></name></expr></argument> )<pos:position pos:line="3404" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="3404" pos:column="52"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="3405" pos:column="3">assert<pos:position pos:line="3405" pos:column="9"/></name><argument_list pos:line="3405" pos:column="9">( <argument><expr><name pos:line="3405" pos:column="11">pC<pos:position pos:line="3405" pos:column="13"/></name><operator pos:line="3405" pos:column="13">!=<pos:position pos:line="3405" pos:column="15"/></operator><literal type="number" pos:line="3405" pos:column="15">0<pos:position pos:line="3405" pos:column="16"/></literal></expr></argument> )<pos:position pos:line="3405" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="3405" pos:column="19"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="3406" pos:column="3">assert<pos:position pos:line="3406" pos:column="9"/></name><argument_list pos:line="3406" pos:column="9">( <argument><expr><name><name pos:line="3406" pos:column="11">pC<pos:position pos:line="3406" pos:column="13"/></name><operator pos:line="3406" pos:column="13">-&gt;<pos:position pos:line="3406" pos:column="18"/></operator><name pos:line="3406" pos:column="15">nullRow<pos:position pos:line="3406" pos:column="22"/></name></name><operator pos:line="3406" pos:column="22">==<pos:position pos:line="3406" pos:column="24"/></operator><literal type="number" pos:line="3406" pos:column="24">0<pos:position pos:line="3406" pos:column="25"/></literal></expr></argument> )<pos:position pos:line="3406" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="3406" pos:column="28"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="3407" pos:column="3">assert<pos:position pos:line="3407" pos:column="9"/></name><argument_list pos:line="3407" pos:column="9">( <argument><expr><name><name pos:line="3407" pos:column="11">pC<pos:position pos:line="3407" pos:column="13"/></name><operator pos:line="3407" pos:column="13">-&gt;<pos:position pos:line="3407" pos:column="18"/></operator><name pos:line="3407" pos:column="15">pseudoTable<pos:position pos:line="3407" pos:column="26"/></name></name><operator pos:line="3407" pos:column="26">==<pos:position pos:line="3407" pos:column="28"/></operator><literal type="number" pos:line="3407" pos:column="28">0<pos:position pos:line="3407" pos:column="29"/></literal></expr></argument> )<pos:position pos:line="3407" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="3407" pos:column="32"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="3408" pos:column="3">assert<pos:position pos:line="3408" pos:column="9"/></name><argument_list pos:line="3408" pos:column="9">( <argument><expr><name><name pos:line="3408" pos:column="11">pC<pos:position pos:line="3408" pos:column="13"/></name><operator pos:line="3408" pos:column="13">-&gt;<pos:position pos:line="3408" pos:column="18"/></operator><name pos:line="3408" pos:column="15">pCursor<pos:position pos:line="3408" pos:column="22"/></name></name><operator pos:line="3408" pos:column="22">!=<pos:position pos:line="3408" pos:column="24"/></operator><literal type="number" pos:line="3408" pos:column="24">0<pos:position pos:line="3408" pos:column="25"/></literal></expr></argument> )<pos:position pos:line="3408" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="3408" pos:column="28"/></expr_stmt>
  <expr_stmt><expr><name pos:line="3409" pos:column="3">pCrsr<pos:position pos:line="3409" pos:column="8"/></name> <operator pos:line="3409" pos:column="9">=<pos:position pos:line="3409" pos:column="10"/></operator> <name><name pos:line="3409" pos:column="11">pC<pos:position pos:line="3409" pos:column="13"/></name><operator pos:line="3409" pos:column="13">-&gt;<pos:position pos:line="3409" pos:column="18"/></operator><name pos:line="3409" pos:column="15">pCursor<pos:position pos:line="3409" pos:column="22"/></name></name></expr>;<pos:position pos:line="3409" pos:column="23"/></expr_stmt>
  <expr_stmt><expr><name pos:line="3410" pos:column="3">rc<pos:position pos:line="3410" pos:column="5"/></name> <operator pos:line="3410" pos:column="6">=<pos:position pos:line="3410" pos:column="7"/></operator> <call><name pos:line="3410" pos:column="8">sqlite3VdbeCursorMoveto<pos:position pos:line="3410" pos:column="31"/></name><argument_list pos:line="3410" pos:column="31">(<argument><expr><name pos:line="3410" pos:column="32">pC<pos:position pos:line="3410" pos:column="34"/></name></expr></argument>)<pos:position pos:line="3410" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="3410" pos:column="36"/></expr_stmt>
  <if pos:line="3411" pos:column="3">if<condition pos:line="3411" pos:column="5">( <expr><name pos:line="3411" pos:column="7">rc<pos:position pos:line="3411" pos:column="9"/></name></expr> )<pos:position pos:line="3411" pos:column="11"/></condition><then pos:line="3411" pos:column="11"> <block type="pseudo"><goto pos:line="3411" pos:column="12">goto <name pos:line="3411" pos:column="17">abort_due_to_error<pos:position pos:line="3411" pos:column="35"/></name>;<pos:position pos:line="3411" pos:column="36"/></goto></block></then></if>
  <if pos:line="3412" pos:column="3">if<condition pos:line="3412" pos:column="5">( <expr><name><name pos:line="3412" pos:column="7">pC<pos:position pos:line="3412" pos:column="9"/></name><operator pos:line="3412" pos:column="9">-&gt;<pos:position pos:line="3412" pos:column="14"/></operator><name pos:line="3412" pos:column="11">isIndex<pos:position pos:line="3412" pos:column="18"/></name></name></expr> )<pos:position pos:line="3412" pos:column="20"/></condition><then><block pos:line="3412" pos:column="20">{
    <expr_stmt><expr><call><name pos:line="3413" pos:column="5">assert<pos:position pos:line="3413" pos:column="11"/></name><argument_list pos:line="3413" pos:column="11">( <argument><expr><operator pos:line="3413" pos:column="13">!<pos:position pos:line="3413" pos:column="14"/></operator><name><name pos:line="3413" pos:column="14">pC<pos:position pos:line="3413" pos:column="16"/></name><operator pos:line="3413" pos:column="16">-&gt;<pos:position pos:line="3413" pos:column="21"/></operator><name pos:line="3413" pos:column="18">isTable<pos:position pos:line="3413" pos:column="25"/></name></name></expr></argument> )<pos:position pos:line="3413" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="3413" pos:column="28"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="3414" pos:column="5">sqlite3BtreeKeySize<pos:position pos:line="3414" pos:column="24"/></name><argument_list pos:line="3414" pos:column="24">(<argument><expr><name pos:line="3414" pos:column="25">pCrsr<pos:position pos:line="3414" pos:column="30"/></name></expr></argument>, <argument><expr><operator pos:line="3414" pos:column="32">&amp;<pos:position pos:line="3414" pos:column="37"/></operator><name pos:line="3414" pos:column="33">n64<pos:position pos:line="3414" pos:column="36"/></name></expr></argument>)<pos:position pos:line="3414" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="3414" pos:column="38"/></expr_stmt>
    <if pos:line="3415" pos:column="5">if<condition pos:line="3415" pos:column="7">( <expr><name pos:line="3415" pos:column="9">n64<pos:position pos:line="3415" pos:column="12"/></name><operator pos:line="3415" pos:column="12">&gt;<pos:position pos:line="3415" pos:column="16"/></operator><name><name pos:line="3415" pos:column="13">db<pos:position pos:line="3415" pos:column="15"/></name><operator pos:line="3415" pos:column="15">-&gt;<pos:position pos:line="3415" pos:column="20"/></operator><name pos:line="3415" pos:column="17">aLimit<pos:position pos:line="3415" pos:column="23"/></name><index pos:line="3415" pos:column="23">[<expr><name pos:line="3415" pos:column="24">SQLITE_LIMIT_LENGTH<pos:position pos:line="3415" pos:column="43"/></name></expr>]<pos:position pos:line="3415" pos:column="44"/></index></name></expr> )<pos:position pos:line="3415" pos:column="46"/></condition><then><block pos:line="3415" pos:column="46">{
      <goto pos:line="3416" pos:column="7">goto <name pos:line="3416" pos:column="12">too_big<pos:position pos:line="3416" pos:column="19"/></name>;<pos:position pos:line="3416" pos:column="20"/></goto>
    }<pos:position pos:line="3417" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="3418" pos:column="5">n<pos:position pos:line="3418" pos:column="6"/></name> <operator pos:line="3418" pos:column="7">=<pos:position pos:line="3418" pos:column="8"/></operator> <operator pos:line="3418" pos:column="9">(<pos:position pos:line="3418" pos:column="10"/></operator><name pos:line="3418" pos:column="10">u32<pos:position pos:line="3418" pos:column="13"/></name><operator pos:line="3418" pos:column="13">)<pos:position pos:line="3418" pos:column="14"/></operator><name pos:line="3418" pos:column="14">n64<pos:position pos:line="3418" pos:column="17"/></name></expr>;<pos:position pos:line="3418" pos:column="18"/></expr_stmt>
  }<pos:position pos:line="3419" pos:column="4"/></block></then><else pos:line="3419" pos:column="4">else<block pos:line="3419" pos:column="8">{
    <expr_stmt><expr><call><name pos:line="3420" pos:column="5">sqlite3BtreeDataSize<pos:position pos:line="3420" pos:column="25"/></name><argument_list pos:line="3420" pos:column="25">(<argument><expr><name pos:line="3420" pos:column="26">pCrsr<pos:position pos:line="3420" pos:column="31"/></name></expr></argument>, <argument><expr><operator pos:line="3420" pos:column="33">&amp;<pos:position pos:line="3420" pos:column="38"/></operator><name pos:line="3420" pos:column="34">n<pos:position pos:line="3420" pos:column="35"/></name></expr></argument>)<pos:position pos:line="3420" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="3420" pos:column="37"/></expr_stmt>
    <if pos:line="3421" pos:column="5">if<condition pos:line="3421" pos:column="7">( <expr><name pos:line="3421" pos:column="9">n<pos:position pos:line="3421" pos:column="10"/></name><operator pos:line="3421" pos:column="10">&gt;<pos:position pos:line="3421" pos:column="14"/></operator><operator pos:line="3421" pos:column="11">(<pos:position pos:line="3421" pos:column="12"/></operator><name pos:line="3421" pos:column="12">u32<pos:position pos:line="3421" pos:column="15"/></name><operator pos:line="3421" pos:column="15">)<pos:position pos:line="3421" pos:column="16"/></operator><name><name pos:line="3421" pos:column="16">db<pos:position pos:line="3421" pos:column="18"/></name><operator pos:line="3421" pos:column="18">-&gt;<pos:position pos:line="3421" pos:column="23"/></operator><name pos:line="3421" pos:column="20">aLimit<pos:position pos:line="3421" pos:column="26"/></name><index pos:line="3421" pos:column="26">[<expr><name pos:line="3421" pos:column="27">SQLITE_LIMIT_LENGTH<pos:position pos:line="3421" pos:column="46"/></name></expr>]<pos:position pos:line="3421" pos:column="47"/></index></name></expr> )<pos:position pos:line="3421" pos:column="49"/></condition><then><block pos:line="3421" pos:column="49">{
      <goto pos:line="3422" pos:column="7">goto <name pos:line="3422" pos:column="12">too_big<pos:position pos:line="3422" pos:column="19"/></name>;<pos:position pos:line="3422" pos:column="20"/></goto>
    }<pos:position pos:line="3423" pos:column="6"/></block></then></if>
  }<pos:position pos:line="3424" pos:column="4"/></block></else></if>
  <if pos:line="3425" pos:column="3">if<condition pos:line="3425" pos:column="5">( <expr><call><name pos:line="3425" pos:column="7">sqlite3VdbeMemGrow<pos:position pos:line="3425" pos:column="25"/></name><argument_list pos:line="3425" pos:column="25">(<argument><expr><name pos:line="3425" pos:column="26">pOut<pos:position pos:line="3425" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="3425" pos:column="32">n<pos:position pos:line="3425" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="3425" pos:column="35">0<pos:position pos:line="3425" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="3425" pos:column="37"/></argument_list></call></expr> )<pos:position pos:line="3425" pos:column="39"/></condition><then><block pos:line="3425" pos:column="39">{
    <goto pos:line="3426" pos:column="5">goto <name pos:line="3426" pos:column="10">no_mem<pos:position pos:line="3426" pos:column="16"/></name>;<pos:position pos:line="3426" pos:column="17"/></goto>
  }<pos:position pos:line="3427" pos:column="4"/></block></then></if>
  <expr_stmt><expr><name><name pos:line="3428" pos:column="3">pOut<pos:position pos:line="3428" pos:column="7"/></name><operator pos:line="3428" pos:column="7">-&gt;<pos:position pos:line="3428" pos:column="12"/></operator><name pos:line="3428" pos:column="9">n<pos:position pos:line="3428" pos:column="10"/></name></name> <operator pos:line="3428" pos:column="11">=<pos:position pos:line="3428" pos:column="12"/></operator> <name pos:line="3428" pos:column="13">n<pos:position pos:line="3428" pos:column="14"/></name></expr>;<pos:position pos:line="3428" pos:column="15"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="3429" pos:column="3">MemSetTypeFlag<pos:position pos:line="3429" pos:column="17"/></name><argument_list pos:line="3429" pos:column="17">(<argument><expr><name pos:line="3429" pos:column="18">pOut<pos:position pos:line="3429" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="3429" pos:column="24">MEM_Blob<pos:position pos:line="3429" pos:column="32"/></name></expr></argument>)<pos:position pos:line="3429" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="3429" pos:column="34"/></expr_stmt>
  <if pos:line="3430" pos:column="3">if<condition pos:line="3430" pos:column="5">( <expr><name><name pos:line="3430" pos:column="7">pC<pos:position pos:line="3430" pos:column="9"/></name><operator pos:line="3430" pos:column="9">-&gt;<pos:position pos:line="3430" pos:column="14"/></operator><name pos:line="3430" pos:column="11">isIndex<pos:position pos:line="3430" pos:column="18"/></name></name></expr> )<pos:position pos:line="3430" pos:column="20"/></condition><then><block pos:line="3430" pos:column="20">{
    <expr_stmt><expr><name pos:line="3431" pos:column="5">rc<pos:position pos:line="3431" pos:column="7"/></name> <operator pos:line="3431" pos:column="8">=<pos:position pos:line="3431" pos:column="9"/></operator> <call><name pos:line="3431" pos:column="10">sqlite3BtreeKey<pos:position pos:line="3431" pos:column="25"/></name><argument_list pos:line="3431" pos:column="25">(<argument><expr><name pos:line="3431" pos:column="26">pCrsr<pos:position pos:line="3431" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="3431" pos:column="33">0<pos:position pos:line="3431" pos:column="34"/></literal></expr></argument>, <argument><expr><name pos:line="3431" pos:column="36">n<pos:position pos:line="3431" pos:column="37"/></name></expr></argument>, <argument><expr><name><name pos:line="3431" pos:column="39">pOut<pos:position pos:line="3431" pos:column="43"/></name><operator pos:line="3431" pos:column="43">-&gt;<pos:position pos:line="3431" pos:column="48"/></operator><name pos:line="3431" pos:column="45">z<pos:position pos:line="3431" pos:column="46"/></name></name></expr></argument>)<pos:position pos:line="3431" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="3431" pos:column="48"/></expr_stmt>
  }<pos:position pos:line="3432" pos:column="4"/></block></then><else pos:line="3432" pos:column="4">else<block pos:line="3432" pos:column="8">{
    <expr_stmt><expr><name pos:line="3433" pos:column="5">rc<pos:position pos:line="3433" pos:column="7"/></name> <operator pos:line="3433" pos:column="8">=<pos:position pos:line="3433" pos:column="9"/></operator> <call><name pos:line="3433" pos:column="10">sqlite3BtreeData<pos:position pos:line="3433" pos:column="26"/></name><argument_list pos:line="3433" pos:column="26">(<argument><expr><name pos:line="3433" pos:column="27">pCrsr<pos:position pos:line="3433" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="3433" pos:column="34">0<pos:position pos:line="3433" pos:column="35"/></literal></expr></argument>, <argument><expr><name pos:line="3433" pos:column="37">n<pos:position pos:line="3433" pos:column="38"/></name></expr></argument>, <argument><expr><name><name pos:line="3433" pos:column="40">pOut<pos:position pos:line="3433" pos:column="44"/></name><operator pos:line="3433" pos:column="44">-&gt;<pos:position pos:line="3433" pos:column="49"/></operator><name pos:line="3433" pos:column="46">z<pos:position pos:line="3433" pos:column="47"/></name></name></expr></argument>)<pos:position pos:line="3433" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="3433" pos:column="49"/></expr_stmt>
  }<pos:position pos:line="3434" pos:column="4"/></block></else></if>
  <expr_stmt><expr><name><name pos:line="3435" pos:column="3">pOut<pos:position pos:line="3435" pos:column="7"/></name><operator pos:line="3435" pos:column="7">-&gt;<pos:position pos:line="3435" pos:column="12"/></operator><name pos:line="3435" pos:column="9">enc<pos:position pos:line="3435" pos:column="12"/></name></name> <operator pos:line="3435" pos:column="13">=<pos:position pos:line="3435" pos:column="14"/></operator> <name pos:line="3435" pos:column="15">SQLITE_UTF8<pos:position pos:line="3435" pos:column="26"/></name></expr>;<pos:position pos:line="3435" pos:column="27"/></expr_stmt>  <comment type="block" pos:line="3435" pos:column="29">/* In case the blob is ever cast to text */</comment>
  <expr_stmt><expr><call><name pos:line="3436" pos:column="3">UPDATE_MAX_BLOBSIZE<pos:position pos:line="3436" pos:column="22"/></name><argument_list pos:line="3436" pos:column="22">(<argument><expr><name pos:line="3436" pos:column="23">pOut<pos:position pos:line="3436" pos:column="27"/></name></expr></argument>)<pos:position pos:line="3436" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="3436" pos:column="29"/></expr_stmt>
  <break pos:line="3437" pos:column="3">break;<pos:position pos:line="3437" pos:column="9"/></break>
}<pos:position pos:line="3438" pos:column="2"/></block>

<comment type="block" pos:line="3440" pos:column="1">/* Opcode: Rowid P1 P2 * * *
**
** Store in register P2 an integer which is the key of the table entry that
** P1 is currently point to.
**
** P1 can be either an ordinary table or a virtual table.  There used to
** be a separate OP_VRowid opcode for use with virtual tables, but this
** one opcode now works for both table types.
*/</comment>
<case pos:line="3449" pos:column="1">case <expr><name pos:line="3449" pos:column="6">OP_Rowid<pos:position pos:line="3449" pos:column="14"/></name></expr>:<pos:position pos:line="3449" pos:column="15"/></case> <block pos:line="3449" pos:column="16">{                 <comment type="block" pos:line="3449" pos:column="34">/* out2-prerelease */</comment>
  <decl_stmt><decl><type><name pos:line="3450" pos:column="3">int<pos:position pos:line="3450" pos:column="6"/></name></type> <name pos:line="3450" pos:column="7">i<pos:position pos:line="3450" pos:column="8"/></name></decl>;<pos:position pos:line="3450" pos:column="9"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="3451" pos:column="3">VdbeCursor<pos:position pos:line="3451" pos:column="13"/></name> <modifier pos:line="3451" pos:column="14">*<pos:position pos:line="3451" pos:column="15"/></modifier></type><name pos:line="3451" pos:column="15">pC<pos:position pos:line="3451" pos:column="17"/></name></decl>;<pos:position pos:line="3451" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="3452" pos:column="3">i64<pos:position pos:line="3452" pos:column="6"/></name></type> <name pos:line="3452" pos:column="7">v<pos:position pos:line="3452" pos:column="8"/></name></decl>;<pos:position pos:line="3452" pos:column="9"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="3453" pos:column="3">sqlite3_vtab<pos:position pos:line="3453" pos:column="15"/></name> <modifier pos:line="3453" pos:column="16">*<pos:position pos:line="3453" pos:column="17"/></modifier></type><name pos:line="3453" pos:column="17">pVtab<pos:position pos:line="3453" pos:column="22"/></name></decl>;<pos:position pos:line="3453" pos:column="23"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="3454" pos:column="3">const<pos:position pos:line="3454" pos:column="8"/></specifier> <name pos:line="3454" pos:column="9">sqlite3_module<pos:position pos:line="3454" pos:column="23"/></name> <modifier pos:line="3454" pos:column="24">*<pos:position pos:line="3454" pos:column="25"/></modifier></type><name pos:line="3454" pos:column="25">pModule<pos:position pos:line="3454" pos:column="32"/></name></decl>;<pos:position pos:line="3454" pos:column="33"/></decl_stmt>

  <expr_stmt><expr><name pos:line="3456" pos:column="3">i<pos:position pos:line="3456" pos:column="4"/></name> <operator pos:line="3456" pos:column="5">=<pos:position pos:line="3456" pos:column="6"/></operator> <name><name pos:line="3456" pos:column="7">pOp<pos:position pos:line="3456" pos:column="10"/></name><operator pos:line="3456" pos:column="10">-&gt;<pos:position pos:line="3456" pos:column="15"/></operator><name pos:line="3456" pos:column="12">p1<pos:position pos:line="3456" pos:column="14"/></name></name></expr>;<pos:position pos:line="3456" pos:column="15"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="3457" pos:column="3">assert<pos:position pos:line="3457" pos:column="9"/></name><argument_list pos:line="3457" pos:column="9">( <argument><expr><name pos:line="3457" pos:column="11">i<pos:position pos:line="3457" pos:column="12"/></name><operator pos:line="3457" pos:column="12">&gt;=<pos:position pos:line="3457" pos:column="17"/></operator><literal type="number" pos:line="3457" pos:column="14">0<pos:position pos:line="3457" pos:column="15"/></literal> <operator pos:line="3457" pos:column="16">&amp;&amp;<pos:position pos:line="3457" pos:column="26"/></operator> <name pos:line="3457" pos:column="19">i<pos:position pos:line="3457" pos:column="20"/></name><operator pos:line="3457" pos:column="20">&lt;<pos:position pos:line="3457" pos:column="24"/></operator><name><name pos:line="3457" pos:column="21">p<pos:position pos:line="3457" pos:column="22"/></name><operator pos:line="3457" pos:column="22">-&gt;<pos:position pos:line="3457" pos:column="27"/></operator><name pos:line="3457" pos:column="24">nCursor<pos:position pos:line="3457" pos:column="31"/></name></name></expr></argument> )<pos:position pos:line="3457" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="3457" pos:column="34"/></expr_stmt>
  <expr_stmt><expr><name pos:line="3458" pos:column="3">pC<pos:position pos:line="3458" pos:column="5"/></name> <operator pos:line="3458" pos:column="6">=<pos:position pos:line="3458" pos:column="7"/></operator> <name><name pos:line="3458" pos:column="8">p<pos:position pos:line="3458" pos:column="9"/></name><operator pos:line="3458" pos:column="9">-&gt;<pos:position pos:line="3458" pos:column="14"/></operator><name pos:line="3458" pos:column="11">apCsr<pos:position pos:line="3458" pos:column="16"/></name><index pos:line="3458" pos:column="16">[<expr><name pos:line="3458" pos:column="17">i<pos:position pos:line="3458" pos:column="18"/></name></expr>]<pos:position pos:line="3458" pos:column="19"/></index></name></expr>;<pos:position pos:line="3458" pos:column="20"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="3459" pos:column="3">assert<pos:position pos:line="3459" pos:column="9"/></name><argument_list pos:line="3459" pos:column="9">( <argument><expr><name pos:line="3459" pos:column="11">pC<pos:position pos:line="3459" pos:column="13"/></name><operator pos:line="3459" pos:column="13">!=<pos:position pos:line="3459" pos:column="15"/></operator><literal type="number" pos:line="3459" pos:column="15">0<pos:position pos:line="3459" pos:column="16"/></literal></expr></argument> )<pos:position pos:line="3459" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="3459" pos:column="19"/></expr_stmt>
  <if pos:line="3460" pos:column="3">if<condition pos:line="3460" pos:column="5">( <expr><name><name pos:line="3460" pos:column="7">pC<pos:position pos:line="3460" pos:column="9"/></name><operator pos:line="3460" pos:column="9">-&gt;<pos:position pos:line="3460" pos:column="14"/></operator><name pos:line="3460" pos:column="11">nullRow<pos:position pos:line="3460" pos:column="18"/></name></name></expr> )<pos:position pos:line="3460" pos:column="20"/></condition><then><block pos:line="3460" pos:column="20">{
    <comment type="block" pos:line="3461" pos:column="5">/* Do nothing so that reg[P2] remains NULL */</comment>
    <break pos:line="3462" pos:column="5">break;<pos:position pos:line="3462" pos:column="11"/></break>
  }<pos:position pos:line="3463" pos:column="4"/></block></then><elseif pos:line="3463" pos:column="4">else <if pos:line="3463" pos:column="9">if<condition pos:line="3463" pos:column="11">( <expr><name><name pos:line="3463" pos:column="13">pC<pos:position pos:line="3463" pos:column="15"/></name><operator pos:line="3463" pos:column="15">-&gt;<pos:position pos:line="3463" pos:column="20"/></operator><name pos:line="3463" pos:column="17">deferredMoveto<pos:position pos:line="3463" pos:column="31"/></name></name></expr> )<pos:position pos:line="3463" pos:column="33"/></condition><then><block pos:line="3463" pos:column="33">{
    <expr_stmt><expr><name pos:line="3464" pos:column="5">v<pos:position pos:line="3464" pos:column="6"/></name> <operator pos:line="3464" pos:column="7">=<pos:position pos:line="3464" pos:column="8"/></operator> <name><name pos:line="3464" pos:column="9">pC<pos:position pos:line="3464" pos:column="11"/></name><operator pos:line="3464" pos:column="11">-&gt;<pos:position pos:line="3464" pos:column="16"/></operator><name pos:line="3464" pos:column="13">movetoTarget<pos:position pos:line="3464" pos:column="25"/></name></name></expr>;<pos:position pos:line="3464" pos:column="26"/></expr_stmt>
  }<pos:position pos:line="3465" pos:column="4"/></block></then></if></elseif><elseif pos:line="3465" pos:column="4">else <if pos:line="3465" pos:column="9">if<condition pos:line="3465" pos:column="11">( <expr><name><name pos:line="3465" pos:column="13">pC<pos:position pos:line="3465" pos:column="15"/></name><operator pos:line="3465" pos:column="15">-&gt;<pos:position pos:line="3465" pos:column="20"/></operator><name pos:line="3465" pos:column="17">pseudoTable<pos:position pos:line="3465" pos:column="28"/></name></name></expr> )<pos:position pos:line="3465" pos:column="30"/></condition><then><block pos:line="3465" pos:column="30">{
    <expr_stmt><expr><name pos:line="3466" pos:column="5">v<pos:position pos:line="3466" pos:column="6"/></name> <operator pos:line="3466" pos:column="7">=<pos:position pos:line="3466" pos:column="8"/></operator> <call><name pos:line="3466" pos:column="9">keyToInt<pos:position pos:line="3466" pos:column="17"/></name><argument_list pos:line="3466" pos:column="17">(<argument><expr><name><name pos:line="3466" pos:column="18">pC<pos:position pos:line="3466" pos:column="20"/></name><operator pos:line="3466" pos:column="20">-&gt;<pos:position pos:line="3466" pos:column="25"/></operator><name pos:line="3466" pos:column="22">iKey<pos:position pos:line="3466" pos:column="26"/></name></name></expr></argument>)<pos:position pos:line="3466" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="3466" pos:column="28"/></expr_stmt>
<cpp:ifndef pos:line="3467" pos:column="1">#<cpp:directive pos:line="3467" pos:column="2">ifndef<pos:position pos:line="3467" pos:column="8"/></cpp:directive> <name pos:line="3467" pos:column="9">SQLITE_OMIT_VIRTUALTABLE<pos:position pos:line="3467" pos:column="33"/></name></cpp:ifndef>
  }<pos:position pos:line="3468" pos:column="4"/></block></then></if></elseif><elseif pos:line="3468" pos:column="4">else <if pos:line="3468" pos:column="9">if<condition pos:line="3468" pos:column="11">( <expr><name><name pos:line="3468" pos:column="13">pC<pos:position pos:line="3468" pos:column="15"/></name><operator pos:line="3468" pos:column="15">-&gt;<pos:position pos:line="3468" pos:column="20"/></operator><name pos:line="3468" pos:column="17">pVtabCursor<pos:position pos:line="3468" pos:column="28"/></name></name></expr> )<pos:position pos:line="3468" pos:column="30"/></condition><then><block pos:line="3468" pos:column="30">{
    <expr_stmt><expr><name pos:line="3469" pos:column="5">pVtab<pos:position pos:line="3469" pos:column="10"/></name> <operator pos:line="3469" pos:column="11">=<pos:position pos:line="3469" pos:column="12"/></operator> <name><name pos:line="3469" pos:column="13">pC<pos:position pos:line="3469" pos:column="15"/></name><operator pos:line="3469" pos:column="15">-&gt;<pos:position pos:line="3469" pos:column="20"/></operator><name pos:line="3469" pos:column="17">pVtabCursor<pos:position pos:line="3469" pos:column="28"/></name><operator pos:line="3469" pos:column="28">-&gt;<pos:position pos:line="3469" pos:column="33"/></operator><name pos:line="3469" pos:column="30">pVtab<pos:position pos:line="3469" pos:column="35"/></name></name></expr>;<pos:position pos:line="3469" pos:column="36"/></expr_stmt>
    <expr_stmt><expr><name pos:line="3470" pos:column="5">pModule<pos:position pos:line="3470" pos:column="12"/></name> <operator pos:line="3470" pos:column="13">=<pos:position pos:line="3470" pos:column="14"/></operator> <name><name pos:line="3470" pos:column="15">pVtab<pos:position pos:line="3470" pos:column="20"/></name><operator pos:line="3470" pos:column="20">-&gt;<pos:position pos:line="3470" pos:column="25"/></operator><name pos:line="3470" pos:column="22">pModule<pos:position pos:line="3470" pos:column="29"/></name></name></expr>;<pos:position pos:line="3470" pos:column="30"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="3471" pos:column="5">assert<pos:position pos:line="3471" pos:column="11"/></name><argument_list pos:line="3471" pos:column="11">( <argument><expr><name><name pos:line="3471" pos:column="13">pModule<pos:position pos:line="3471" pos:column="20"/></name><operator pos:line="3471" pos:column="20">-&gt;<pos:position pos:line="3471" pos:column="25"/></operator><name pos:line="3471" pos:column="22">xRowid<pos:position pos:line="3471" pos:column="28"/></name></name></expr></argument> )<pos:position pos:line="3471" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="3471" pos:column="31"/></expr_stmt>
    <if pos:line="3472" pos:column="5">if<condition pos:line="3472" pos:column="7">( <expr><call><name pos:line="3472" pos:column="9">sqlite3SafetyOff<pos:position pos:line="3472" pos:column="25"/></name><argument_list pos:line="3472" pos:column="25">(<argument><expr><name pos:line="3472" pos:column="26">db<pos:position pos:line="3472" pos:column="28"/></name></expr></argument>)<pos:position pos:line="3472" pos:column="29"/></argument_list></call></expr> )<pos:position pos:line="3472" pos:column="31"/></condition><then pos:line="3472" pos:column="31"> <block type="pseudo"><goto pos:line="3472" pos:column="32">goto <name pos:line="3472" pos:column="37">abort_due_to_misuse<pos:position pos:line="3472" pos:column="56"/></name>;<pos:position pos:line="3472" pos:column="57"/></goto></block></then></if>
    <expr_stmt><expr><name pos:line="3473" pos:column="5">rc<pos:position pos:line="3473" pos:column="7"/></name> <operator pos:line="3473" pos:column="8">=<pos:position pos:line="3473" pos:column="9"/></operator> <call><name><name pos:line="3473" pos:column="10">pModule<pos:position pos:line="3473" pos:column="17"/></name><operator pos:line="3473" pos:column="17">-&gt;<pos:position pos:line="3473" pos:column="22"/></operator><name pos:line="3473" pos:column="19">xRowid<pos:position pos:line="3473" pos:column="25"/></name></name><argument_list pos:line="3473" pos:column="25">(<argument><expr><name><name pos:line="3473" pos:column="26">pC<pos:position pos:line="3473" pos:column="28"/></name><operator pos:line="3473" pos:column="28">-&gt;<pos:position pos:line="3473" pos:column="33"/></operator><name pos:line="3473" pos:column="30">pVtabCursor<pos:position pos:line="3473" pos:column="41"/></name></name></expr></argument>, <argument><expr><operator pos:line="3473" pos:column="43">&amp;<pos:position pos:line="3473" pos:column="48"/></operator><name pos:line="3473" pos:column="44">v<pos:position pos:line="3473" pos:column="45"/></name></expr></argument>)<pos:position pos:line="3473" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="3473" pos:column="47"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="3474" pos:column="5">sqlite3DbFree<pos:position pos:line="3474" pos:column="18"/></name><argument_list pos:line="3474" pos:column="18">(<argument><expr><name pos:line="3474" pos:column="19">db<pos:position pos:line="3474" pos:column="21"/></name></expr></argument>, <argument><expr><name><name pos:line="3474" pos:column="23">p<pos:position pos:line="3474" pos:column="24"/></name><operator pos:line="3474" pos:column="24">-&gt;<pos:position pos:line="3474" pos:column="29"/></operator><name pos:line="3474" pos:column="26">zErrMsg<pos:position pos:line="3474" pos:column="33"/></name></name></expr></argument>)<pos:position pos:line="3474" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="3474" pos:column="35"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="3475" pos:column="5">p<pos:position pos:line="3475" pos:column="6"/></name><operator pos:line="3475" pos:column="6">-&gt;<pos:position pos:line="3475" pos:column="11"/></operator><name pos:line="3475" pos:column="8">zErrMsg<pos:position pos:line="3475" pos:column="15"/></name></name> <operator pos:line="3475" pos:column="16">=<pos:position pos:line="3475" pos:column="17"/></operator> <name><name pos:line="3475" pos:column="18">pVtab<pos:position pos:line="3475" pos:column="23"/></name><operator pos:line="3475" pos:column="23">-&gt;<pos:position pos:line="3475" pos:column="28"/></operator><name pos:line="3475" pos:column="25">zErrMsg<pos:position pos:line="3475" pos:column="32"/></name></name></expr>;<pos:position pos:line="3475" pos:column="33"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="3476" pos:column="5">pVtab<pos:position pos:line="3476" pos:column="10"/></name><operator pos:line="3476" pos:column="10">-&gt;<pos:position pos:line="3476" pos:column="15"/></operator><name pos:line="3476" pos:column="12">zErrMsg<pos:position pos:line="3476" pos:column="19"/></name></name> <operator pos:line="3476" pos:column="20">=<pos:position pos:line="3476" pos:column="21"/></operator> <literal type="number" pos:line="3476" pos:column="22">0<pos:position pos:line="3476" pos:column="23"/></literal></expr>;<pos:position pos:line="3476" pos:column="24"/></expr_stmt>
    <if pos:line="3477" pos:column="5">if<condition pos:line="3477" pos:column="7">( <expr><call><name pos:line="3477" pos:column="9">sqlite3SafetyOn<pos:position pos:line="3477" pos:column="24"/></name><argument_list pos:line="3477" pos:column="24">(<argument><expr><name pos:line="3477" pos:column="25">db<pos:position pos:line="3477" pos:column="27"/></name></expr></argument>)<pos:position pos:line="3477" pos:column="28"/></argument_list></call></expr> )<pos:position pos:line="3477" pos:column="30"/></condition><then pos:line="3477" pos:column="30"> <block type="pseudo"><goto pos:line="3477" pos:column="31">goto <name pos:line="3477" pos:column="36">abort_due_to_misuse<pos:position pos:line="3477" pos:column="55"/></name>;<pos:position pos:line="3477" pos:column="56"/></goto></block></then></if>
<cpp:endif pos:line="3478" pos:column="1">#<cpp:directive pos:line="3478" pos:column="2">endif<pos:position pos:line="3478" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="3478" pos:column="8">/* SQLITE_OMIT_VIRTUALTABLE */</comment>
  }<pos:position pos:line="3479" pos:column="4"/></block></then></if></elseif><else pos:line="3479" pos:column="4">else<block pos:line="3479" pos:column="8">{
    <expr_stmt><expr><name pos:line="3480" pos:column="5">rc<pos:position pos:line="3480" pos:column="7"/></name> <operator pos:line="3480" pos:column="8">=<pos:position pos:line="3480" pos:column="9"/></operator> <call><name pos:line="3480" pos:column="10">sqlite3VdbeCursorMoveto<pos:position pos:line="3480" pos:column="33"/></name><argument_list pos:line="3480" pos:column="33">(<argument><expr><name pos:line="3480" pos:column="34">pC<pos:position pos:line="3480" pos:column="36"/></name></expr></argument>)<pos:position pos:line="3480" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="3480" pos:column="38"/></expr_stmt>
    <if pos:line="3481" pos:column="5">if<condition pos:line="3481" pos:column="7">( <expr><name pos:line="3481" pos:column="9">rc<pos:position pos:line="3481" pos:column="11"/></name></expr> )<pos:position pos:line="3481" pos:column="13"/></condition><then pos:line="3481" pos:column="13"> <block type="pseudo"><goto pos:line="3481" pos:column="14">goto <name pos:line="3481" pos:column="19">abort_due_to_error<pos:position pos:line="3481" pos:column="37"/></name>;<pos:position pos:line="3481" pos:column="38"/></goto></block></then></if>
    <if pos:line="3482" pos:column="5">if<condition pos:line="3482" pos:column="7">( <expr><name><name pos:line="3482" pos:column="9">pC<pos:position pos:line="3482" pos:column="11"/></name><operator pos:line="3482" pos:column="11">-&gt;<pos:position pos:line="3482" pos:column="16"/></operator><name pos:line="3482" pos:column="13">rowidIsValid<pos:position pos:line="3482" pos:column="25"/></name></name></expr> )<pos:position pos:line="3482" pos:column="27"/></condition><then><block pos:line="3482" pos:column="27">{
      <expr_stmt><expr><name pos:line="3483" pos:column="7">v<pos:position pos:line="3483" pos:column="8"/></name> <operator pos:line="3483" pos:column="9">=<pos:position pos:line="3483" pos:column="10"/></operator> <name><name pos:line="3483" pos:column="11">pC<pos:position pos:line="3483" pos:column="13"/></name><operator pos:line="3483" pos:column="13">-&gt;<pos:position pos:line="3483" pos:column="18"/></operator><name pos:line="3483" pos:column="15">lastRowid<pos:position pos:line="3483" pos:column="24"/></name></name></expr>;<pos:position pos:line="3483" pos:column="25"/></expr_stmt>
    }<pos:position pos:line="3484" pos:column="6"/></block></then><else pos:line="3484" pos:column="6">else<block pos:line="3484" pos:column="10">{
      <expr_stmt><expr><call><name pos:line="3485" pos:column="7">assert<pos:position pos:line="3485" pos:column="13"/></name><argument_list pos:line="3485" pos:column="13">( <argument><expr><name><name pos:line="3485" pos:column="15">pC<pos:position pos:line="3485" pos:column="17"/></name><operator pos:line="3485" pos:column="17">-&gt;<pos:position pos:line="3485" pos:column="22"/></operator><name pos:line="3485" pos:column="19">pCursor<pos:position pos:line="3485" pos:column="26"/></name></name><operator pos:line="3485" pos:column="26">!=<pos:position pos:line="3485" pos:column="28"/></operator><literal type="number" pos:line="3485" pos:column="28">0<pos:position pos:line="3485" pos:column="29"/></literal></expr></argument> )<pos:position pos:line="3485" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="3485" pos:column="32"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="3486" pos:column="7">sqlite3BtreeKeySize<pos:position pos:line="3486" pos:column="26"/></name><argument_list pos:line="3486" pos:column="26">(<argument><expr><name><name pos:line="3486" pos:column="27">pC<pos:position pos:line="3486" pos:column="29"/></name><operator pos:line="3486" pos:column="29">-&gt;<pos:position pos:line="3486" pos:column="34"/></operator><name pos:line="3486" pos:column="31">pCursor<pos:position pos:line="3486" pos:column="38"/></name></name></expr></argument>, <argument><expr><operator pos:line="3486" pos:column="40">&amp;<pos:position pos:line="3486" pos:column="45"/></operator><name pos:line="3486" pos:column="41">v<pos:position pos:line="3486" pos:column="42"/></name></expr></argument>)<pos:position pos:line="3486" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="3486" pos:column="44"/></expr_stmt>
      <expr_stmt><expr><name pos:line="3487" pos:column="7">v<pos:position pos:line="3487" pos:column="8"/></name> <operator pos:line="3487" pos:column="9">=<pos:position pos:line="3487" pos:column="10"/></operator> <call><name pos:line="3487" pos:column="11">keyToInt<pos:position pos:line="3487" pos:column="19"/></name><argument_list pos:line="3487" pos:column="19">(<argument><expr><name pos:line="3487" pos:column="20">v<pos:position pos:line="3487" pos:column="21"/></name></expr></argument>)<pos:position pos:line="3487" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="3487" pos:column="23"/></expr_stmt>
    }<pos:position pos:line="3488" pos:column="6"/></block></else></if>
  }<pos:position pos:line="3489" pos:column="4"/></block></else></if>
  <expr_stmt><expr><name><name pos:line="3490" pos:column="3">pOut<pos:position pos:line="3490" pos:column="7"/></name><operator pos:line="3490" pos:column="7">-&gt;<pos:position pos:line="3490" pos:column="12"/></operator><name pos:line="3490" pos:column="9">u<pos:position pos:line="3490" pos:column="10"/></name><operator pos:line="3490" pos:column="10">.<pos:position pos:line="3490" pos:column="11"/></operator><name pos:line="3490" pos:column="11">i<pos:position pos:line="3490" pos:column="12"/></name></name> <operator pos:line="3490" pos:column="13">=<pos:position pos:line="3490" pos:column="14"/></operator> <name pos:line="3490" pos:column="15">v<pos:position pos:line="3490" pos:column="16"/></name></expr>;<pos:position pos:line="3490" pos:column="17"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="3491" pos:column="3">MemSetTypeFlag<pos:position pos:line="3491" pos:column="17"/></name><argument_list pos:line="3491" pos:column="17">(<argument><expr><name pos:line="3491" pos:column="18">pOut<pos:position pos:line="3491" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="3491" pos:column="24">MEM_Int<pos:position pos:line="3491" pos:column="31"/></name></expr></argument>)<pos:position pos:line="3491" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="3491" pos:column="33"/></expr_stmt>
  <break pos:line="3492" pos:column="3">break;<pos:position pos:line="3492" pos:column="9"/></break>
}<pos:position pos:line="3493" pos:column="2"/></block>

<comment type="block" pos:line="3495" pos:column="1">/* Opcode: NullRow P1 * * * *
**
** Move the cursor P1 to a null row.  Any OP_Column operations
** that occur while the cursor is on the null row will always
** write a NULL.
*/</comment>
<case pos:line="3501" pos:column="1">case <expr><name pos:line="3501" pos:column="6">OP_NullRow<pos:position pos:line="3501" pos:column="16"/></name></expr>:<pos:position pos:line="3501" pos:column="17"/></case> <block pos:line="3501" pos:column="18">{
  <decl_stmt><decl><type><name pos:line="3502" pos:column="3">int<pos:position pos:line="3502" pos:column="6"/></name></type> <name pos:line="3502" pos:column="7">i<pos:position pos:line="3502" pos:column="8"/></name></decl>;<pos:position pos:line="3502" pos:column="9"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="3503" pos:column="3">VdbeCursor<pos:position pos:line="3503" pos:column="13"/></name> <modifier pos:line="3503" pos:column="14">*<pos:position pos:line="3503" pos:column="15"/></modifier></type><name pos:line="3503" pos:column="15">pC<pos:position pos:line="3503" pos:column="17"/></name></decl>;<pos:position pos:line="3503" pos:column="18"/></decl_stmt>

  <expr_stmt><expr><name pos:line="3505" pos:column="3">i<pos:position pos:line="3505" pos:column="4"/></name> <operator pos:line="3505" pos:column="5">=<pos:position pos:line="3505" pos:column="6"/></operator> <name><name pos:line="3505" pos:column="7">pOp<pos:position pos:line="3505" pos:column="10"/></name><operator pos:line="3505" pos:column="10">-&gt;<pos:position pos:line="3505" pos:column="15"/></operator><name pos:line="3505" pos:column="12">p1<pos:position pos:line="3505" pos:column="14"/></name></name></expr>;<pos:position pos:line="3505" pos:column="15"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="3506" pos:column="3">assert<pos:position pos:line="3506" pos:column="9"/></name><argument_list pos:line="3506" pos:column="9">( <argument><expr><name pos:line="3506" pos:column="11">i<pos:position pos:line="3506" pos:column="12"/></name><operator pos:line="3506" pos:column="12">&gt;=<pos:position pos:line="3506" pos:column="17"/></operator><literal type="number" pos:line="3506" pos:column="14">0<pos:position pos:line="3506" pos:column="15"/></literal> <operator pos:line="3506" pos:column="16">&amp;&amp;<pos:position pos:line="3506" pos:column="26"/></operator> <name pos:line="3506" pos:column="19">i<pos:position pos:line="3506" pos:column="20"/></name><operator pos:line="3506" pos:column="20">&lt;<pos:position pos:line="3506" pos:column="24"/></operator><name><name pos:line="3506" pos:column="21">p<pos:position pos:line="3506" pos:column="22"/></name><operator pos:line="3506" pos:column="22">-&gt;<pos:position pos:line="3506" pos:column="27"/></operator><name pos:line="3506" pos:column="24">nCursor<pos:position pos:line="3506" pos:column="31"/></name></name></expr></argument> )<pos:position pos:line="3506" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="3506" pos:column="34"/></expr_stmt>
  <expr_stmt><expr><name pos:line="3507" pos:column="3">pC<pos:position pos:line="3507" pos:column="5"/></name> <operator pos:line="3507" pos:column="6">=<pos:position pos:line="3507" pos:column="7"/></operator> <name><name pos:line="3507" pos:column="8">p<pos:position pos:line="3507" pos:column="9"/></name><operator pos:line="3507" pos:column="9">-&gt;<pos:position pos:line="3507" pos:column="14"/></operator><name pos:line="3507" pos:column="11">apCsr<pos:position pos:line="3507" pos:column="16"/></name><index pos:line="3507" pos:column="16">[<expr><name pos:line="3507" pos:column="17">i<pos:position pos:line="3507" pos:column="18"/></name></expr>]<pos:position pos:line="3507" pos:column="19"/></index></name></expr>;<pos:position pos:line="3507" pos:column="20"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="3508" pos:column="3">assert<pos:position pos:line="3508" pos:column="9"/></name><argument_list pos:line="3508" pos:column="9">( <argument><expr><name pos:line="3508" pos:column="11">pC<pos:position pos:line="3508" pos:column="13"/></name><operator pos:line="3508" pos:column="13">!=<pos:position pos:line="3508" pos:column="15"/></operator><literal type="number" pos:line="3508" pos:column="15">0<pos:position pos:line="3508" pos:column="16"/></literal></expr></argument> )<pos:position pos:line="3508" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="3508" pos:column="19"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="3509" pos:column="3">pC<pos:position pos:line="3509" pos:column="5"/></name><operator pos:line="3509" pos:column="5">-&gt;<pos:position pos:line="3509" pos:column="10"/></operator><name pos:line="3509" pos:column="7">nullRow<pos:position pos:line="3509" pos:column="14"/></name></name> <operator pos:line="3509" pos:column="15">=<pos:position pos:line="3509" pos:column="16"/></operator> <literal type="number" pos:line="3509" pos:column="17">1<pos:position pos:line="3509" pos:column="18"/></literal></expr>;<pos:position pos:line="3509" pos:column="19"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="3510" pos:column="3">pC<pos:position pos:line="3510" pos:column="5"/></name><operator pos:line="3510" pos:column="5">-&gt;<pos:position pos:line="3510" pos:column="10"/></operator><name pos:line="3510" pos:column="7">rowidIsValid<pos:position pos:line="3510" pos:column="19"/></name></name> <operator pos:line="3510" pos:column="20">=<pos:position pos:line="3510" pos:column="21"/></operator> <literal type="number" pos:line="3510" pos:column="22">0<pos:position pos:line="3510" pos:column="23"/></literal></expr>;<pos:position pos:line="3510" pos:column="24"/></expr_stmt>
  <if pos:line="3511" pos:column="3">if<condition pos:line="3511" pos:column="5">( <expr><name><name pos:line="3511" pos:column="7">pC<pos:position pos:line="3511" pos:column="9"/></name><operator pos:line="3511" pos:column="9">-&gt;<pos:position pos:line="3511" pos:column="14"/></operator><name pos:line="3511" pos:column="11">pCursor<pos:position pos:line="3511" pos:column="18"/></name></name></expr> )<pos:position pos:line="3511" pos:column="20"/></condition><then><block pos:line="3511" pos:column="20">{
    <expr_stmt><expr><call><name pos:line="3512" pos:column="5">sqlite3BtreeClearCursor<pos:position pos:line="3512" pos:column="28"/></name><argument_list pos:line="3512" pos:column="28">(<argument><expr><name><name pos:line="3512" pos:column="29">pC<pos:position pos:line="3512" pos:column="31"/></name><operator pos:line="3512" pos:column="31">-&gt;<pos:position pos:line="3512" pos:column="36"/></operator><name pos:line="3512" pos:column="33">pCursor<pos:position pos:line="3512" pos:column="40"/></name></name></expr></argument>)<pos:position pos:line="3512" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="3512" pos:column="42"/></expr_stmt>
  }<pos:position pos:line="3513" pos:column="4"/></block></then></if>
  <break pos:line="3514" pos:column="3">break;<pos:position pos:line="3514" pos:column="9"/></break>
}<pos:position pos:line="3515" pos:column="2"/></block>

<comment type="block" pos:line="3517" pos:column="1">/* Opcode: Last P1 P2 * * *
**
** The next use of the Rowid or Column or Next instruction for P1 
** will refer to the last entry in the database table or index.
** If the table or index is empty and P2&gt;0, then jump immediately to P2.
** If P2 is 0 or if the table or index is not empty, fall through
** to the following instruction.
*/</comment>
<case pos:line="3525" pos:column="1">case <expr><name pos:line="3525" pos:column="6">OP_Last<pos:position pos:line="3525" pos:column="13"/></name></expr>:<pos:position pos:line="3525" pos:column="14"/></case> <block pos:line="3525" pos:column="15">{        <comment type="block" pos:line="3525" pos:column="24">/* jump */</comment>
  <decl_stmt><decl><type><name pos:line="3526" pos:column="3">int<pos:position pos:line="3526" pos:column="6"/></name></type> <name pos:line="3526" pos:column="7">i<pos:position pos:line="3526" pos:column="8"/></name></decl>;<pos:position pos:line="3526" pos:column="9"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="3527" pos:column="3">VdbeCursor<pos:position pos:line="3527" pos:column="13"/></name> <modifier pos:line="3527" pos:column="14">*<pos:position pos:line="3527" pos:column="15"/></modifier></type><name pos:line="3527" pos:column="15">pC<pos:position pos:line="3527" pos:column="17"/></name></decl>;<pos:position pos:line="3527" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="3528" pos:column="3">BtCursor<pos:position pos:line="3528" pos:column="11"/></name> <modifier pos:line="3528" pos:column="12">*<pos:position pos:line="3528" pos:column="13"/></modifier></type><name pos:line="3528" pos:column="13">pCrsr<pos:position pos:line="3528" pos:column="18"/></name></decl>;<pos:position pos:line="3528" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="3529" pos:column="3">int<pos:position pos:line="3529" pos:column="6"/></name></type> <name pos:line="3529" pos:column="7">res<pos:position pos:line="3529" pos:column="10"/></name></decl>;<pos:position pos:line="3529" pos:column="11"/></decl_stmt>

  <expr_stmt><expr><name pos:line="3531" pos:column="3">i<pos:position pos:line="3531" pos:column="4"/></name> <operator pos:line="3531" pos:column="5">=<pos:position pos:line="3531" pos:column="6"/></operator> <name><name pos:line="3531" pos:column="7">pOp<pos:position pos:line="3531" pos:column="10"/></name><operator pos:line="3531" pos:column="10">-&gt;<pos:position pos:line="3531" pos:column="15"/></operator><name pos:line="3531" pos:column="12">p1<pos:position pos:line="3531" pos:column="14"/></name></name></expr>;<pos:position pos:line="3531" pos:column="15"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="3532" pos:column="3">assert<pos:position pos:line="3532" pos:column="9"/></name><argument_list pos:line="3532" pos:column="9">( <argument><expr><name pos:line="3532" pos:column="11">i<pos:position pos:line="3532" pos:column="12"/></name><operator pos:line="3532" pos:column="12">&gt;=<pos:position pos:line="3532" pos:column="17"/></operator><literal type="number" pos:line="3532" pos:column="14">0<pos:position pos:line="3532" pos:column="15"/></literal> <operator pos:line="3532" pos:column="16">&amp;&amp;<pos:position pos:line="3532" pos:column="26"/></operator> <name pos:line="3532" pos:column="19">i<pos:position pos:line="3532" pos:column="20"/></name><operator pos:line="3532" pos:column="20">&lt;<pos:position pos:line="3532" pos:column="24"/></operator><name><name pos:line="3532" pos:column="21">p<pos:position pos:line="3532" pos:column="22"/></name><operator pos:line="3532" pos:column="22">-&gt;<pos:position pos:line="3532" pos:column="27"/></operator><name pos:line="3532" pos:column="24">nCursor<pos:position pos:line="3532" pos:column="31"/></name></name></expr></argument> )<pos:position pos:line="3532" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="3532" pos:column="34"/></expr_stmt>
  <expr_stmt><expr><name pos:line="3533" pos:column="3">pC<pos:position pos:line="3533" pos:column="5"/></name> <operator pos:line="3533" pos:column="6">=<pos:position pos:line="3533" pos:column="7"/></operator> <name><name pos:line="3533" pos:column="8">p<pos:position pos:line="3533" pos:column="9"/></name><operator pos:line="3533" pos:column="9">-&gt;<pos:position pos:line="3533" pos:column="14"/></operator><name pos:line="3533" pos:column="11">apCsr<pos:position pos:line="3533" pos:column="16"/></name><index pos:line="3533" pos:column="16">[<expr><name pos:line="3533" pos:column="17">i<pos:position pos:line="3533" pos:column="18"/></name></expr>]<pos:position pos:line="3533" pos:column="19"/></index></name></expr>;<pos:position pos:line="3533" pos:column="20"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="3534" pos:column="3">assert<pos:position pos:line="3534" pos:column="9"/></name><argument_list pos:line="3534" pos:column="9">( <argument><expr><name pos:line="3534" pos:column="11">pC<pos:position pos:line="3534" pos:column="13"/></name><operator pos:line="3534" pos:column="13">!=<pos:position pos:line="3534" pos:column="15"/></operator><literal type="number" pos:line="3534" pos:column="15">0<pos:position pos:line="3534" pos:column="16"/></literal></expr></argument> )<pos:position pos:line="3534" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="3534" pos:column="19"/></expr_stmt>
  <expr_stmt><expr><name pos:line="3535" pos:column="3">pCrsr<pos:position pos:line="3535" pos:column="8"/></name> <operator pos:line="3535" pos:column="9">=<pos:position pos:line="3535" pos:column="10"/></operator> <name><name pos:line="3535" pos:column="11">pC<pos:position pos:line="3535" pos:column="13"/></name><operator pos:line="3535" pos:column="13">-&gt;<pos:position pos:line="3535" pos:column="18"/></operator><name pos:line="3535" pos:column="15">pCursor<pos:position pos:line="3535" pos:column="22"/></name></name></expr>;<pos:position pos:line="3535" pos:column="23"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="3536" pos:column="3">assert<pos:position pos:line="3536" pos:column="9"/></name><argument_list pos:line="3536" pos:column="9">( <argument><expr><name pos:line="3536" pos:column="11">pCrsr<pos:position pos:line="3536" pos:column="16"/></name><operator pos:line="3536" pos:column="16">!=<pos:position pos:line="3536" pos:column="18"/></operator><literal type="number" pos:line="3536" pos:column="18">0<pos:position pos:line="3536" pos:column="19"/></literal></expr></argument> )<pos:position pos:line="3536" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="3536" pos:column="22"/></expr_stmt>
  <expr_stmt><expr><name pos:line="3537" pos:column="3">rc<pos:position pos:line="3537" pos:column="5"/></name> <operator pos:line="3537" pos:column="6">=<pos:position pos:line="3537" pos:column="7"/></operator> <call><name pos:line="3537" pos:column="8">sqlite3BtreeLast<pos:position pos:line="3537" pos:column="24"/></name><argument_list pos:line="3537" pos:column="24">(<argument><expr><name pos:line="3537" pos:column="25">pCrsr<pos:position pos:line="3537" pos:column="30"/></name></expr></argument>, <argument><expr><operator pos:line="3537" pos:column="32">&amp;<pos:position pos:line="3537" pos:column="37"/></operator><name pos:line="3537" pos:column="33">res<pos:position pos:line="3537" pos:column="36"/></name></expr></argument>)<pos:position pos:line="3537" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="3537" pos:column="38"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="3538" pos:column="3">pC<pos:position pos:line="3538" pos:column="5"/></name><operator pos:line="3538" pos:column="5">-&gt;<pos:position pos:line="3538" pos:column="10"/></operator><name pos:line="3538" pos:column="7">nullRow<pos:position pos:line="3538" pos:column="14"/></name></name> <operator pos:line="3538" pos:column="15">=<pos:position pos:line="3538" pos:column="16"/></operator> <operator pos:line="3538" pos:column="17">(<pos:position pos:line="3538" pos:column="18"/></operator><name pos:line="3538" pos:column="18">u8<pos:position pos:line="3538" pos:column="20"/></name><operator pos:line="3538" pos:column="20">)<pos:position pos:line="3538" pos:column="21"/></operator><name pos:line="3538" pos:column="21">res<pos:position pos:line="3538" pos:column="24"/></name></expr>;<pos:position pos:line="3538" pos:column="25"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="3539" pos:column="3">pC<pos:position pos:line="3539" pos:column="5"/></name><operator pos:line="3539" pos:column="5">-&gt;<pos:position pos:line="3539" pos:column="10"/></operator><name pos:line="3539" pos:column="7">deferredMoveto<pos:position pos:line="3539" pos:column="21"/></name></name> <operator pos:line="3539" pos:column="22">=<pos:position pos:line="3539" pos:column="23"/></operator> <literal type="number" pos:line="3539" pos:column="24">0<pos:position pos:line="3539" pos:column="25"/></literal></expr>;<pos:position pos:line="3539" pos:column="26"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="3540" pos:column="3">pC<pos:position pos:line="3540" pos:column="5"/></name><operator pos:line="3540" pos:column="5">-&gt;<pos:position pos:line="3540" pos:column="10"/></operator><name pos:line="3540" pos:column="7">rowidIsValid<pos:position pos:line="3540" pos:column="19"/></name></name> <operator pos:line="3540" pos:column="20">=<pos:position pos:line="3540" pos:column="21"/></operator> <literal type="number" pos:line="3540" pos:column="22">0<pos:position pos:line="3540" pos:column="23"/></literal></expr>;<pos:position pos:line="3540" pos:column="24"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="3541" pos:column="3">pC<pos:position pos:line="3541" pos:column="5"/></name><operator pos:line="3541" pos:column="5">-&gt;<pos:position pos:line="3541" pos:column="10"/></operator><name pos:line="3541" pos:column="7">cacheStatus<pos:position pos:line="3541" pos:column="18"/></name></name> <operator pos:line="3541" pos:column="19">=<pos:position pos:line="3541" pos:column="20"/></operator> <name pos:line="3541" pos:column="21">CACHE_STALE<pos:position pos:line="3541" pos:column="32"/></name></expr>;<pos:position pos:line="3541" pos:column="33"/></expr_stmt>
  <if pos:line="3542" pos:column="3">if<condition pos:line="3542" pos:column="5">( <expr><name pos:line="3542" pos:column="7">res<pos:position pos:line="3542" pos:column="10"/></name> <operator pos:line="3542" pos:column="11">&amp;&amp;<pos:position pos:line="3542" pos:column="21"/></operator> <name><name pos:line="3542" pos:column="14">pOp<pos:position pos:line="3542" pos:column="17"/></name><operator pos:line="3542" pos:column="17">-&gt;<pos:position pos:line="3542" pos:column="22"/></operator><name pos:line="3542" pos:column="19">p2<pos:position pos:line="3542" pos:column="21"/></name></name><operator pos:line="3542" pos:column="21">&gt;<pos:position pos:line="3542" pos:column="25"/></operator><literal type="number" pos:line="3542" pos:column="22">0<pos:position pos:line="3542" pos:column="23"/></literal></expr> )<pos:position pos:line="3542" pos:column="25"/></condition><then><block pos:line="3542" pos:column="25">{
    <expr_stmt><expr><name pos:line="3543" pos:column="5">pc<pos:position pos:line="3543" pos:column="7"/></name> <operator pos:line="3543" pos:column="8">=<pos:position pos:line="3543" pos:column="9"/></operator> <name><name pos:line="3543" pos:column="10">pOp<pos:position pos:line="3543" pos:column="13"/></name><operator pos:line="3543" pos:column="13">-&gt;<pos:position pos:line="3543" pos:column="18"/></operator><name pos:line="3543" pos:column="15">p2<pos:position pos:line="3543" pos:column="17"/></name></name> <operator pos:line="3543" pos:column="18">-<pos:position pos:line="3543" pos:column="19"/></operator> <literal type="number" pos:line="3543" pos:column="20">1<pos:position pos:line="3543" pos:column="21"/></literal></expr>;<pos:position pos:line="3543" pos:column="22"/></expr_stmt>
  }<pos:position pos:line="3544" pos:column="4"/></block></then></if>
  <break pos:line="3545" pos:column="3">break;<pos:position pos:line="3545" pos:column="9"/></break>
}<pos:position pos:line="3546" pos:column="2"/></block>


<comment type="block" pos:line="3549" pos:column="1">/* Opcode: Sort P1 P2 * * *
**
** This opcode does exactly the same thing as OP_Rewind except that
** it increments an undocumented global variable used for testing.
**
** Sorting is accomplished by writing records into a sorting index,
** then rewinding that index and playing it back from beginning to
** end.  We use the OP_Sort opcode instead of OP_Rewind to do the
** rewinding so that the global variable will be incremented and
** regression tests can determine whether or not the optimizer is
** correctly optimizing out sorts.
*/</comment>
<case pos:line="3561" pos:column="1">case <expr><name pos:line="3561" pos:column="6">OP_Sort<pos:position pos:line="3561" pos:column="13"/></name></expr>:<pos:position pos:line="3561" pos:column="14"/></case> <block pos:line="3561" pos:column="15">{        <comment type="block" pos:line="3561" pos:column="24">/* jump */</comment>
<cpp:ifdef pos:line="3562" pos:column="1">#<cpp:directive pos:line="3562" pos:column="2">ifdef<pos:position pos:line="3562" pos:column="7"/></cpp:directive> <name pos:line="3562" pos:column="8">SQLITE_TEST<pos:position pos:line="3562" pos:column="19"/></name></cpp:ifdef>
  <expr_stmt><expr><name pos:line="3563" pos:column="3">sqlite3_sort_count<pos:position pos:line="3563" pos:column="21"/></name><operator pos:line="3563" pos:column="21">++<pos:position pos:line="3563" pos:column="23"/></operator></expr>;<pos:position pos:line="3563" pos:column="24"/></expr_stmt>
  <expr_stmt><expr><name pos:line="3564" pos:column="3">sqlite3_search_count<pos:position pos:line="3564" pos:column="23"/></name><operator pos:line="3564" pos:column="23">--<pos:position pos:line="3564" pos:column="25"/></operator></expr>;<pos:position pos:line="3564" pos:column="26"/></expr_stmt>
<cpp:endif pos:line="3565" pos:column="1">#<cpp:directive pos:line="3565" pos:column="2">endif<pos:position pos:line="3565" pos:column="7"/></cpp:directive></cpp:endif>
  <expr_stmt><expr><name><name pos:line="3566" pos:column="3">p<pos:position pos:line="3566" pos:column="4"/></name><operator pos:line="3566" pos:column="4">-&gt;<pos:position pos:line="3566" pos:column="9"/></operator><name pos:line="3566" pos:column="6">aCounter<pos:position pos:line="3566" pos:column="14"/></name><index pos:line="3566" pos:column="14">[<expr><name pos:line="3566" pos:column="15">SQLITE_STMTSTATUS_SORT<pos:position pos:line="3566" pos:column="37"/></name><operator pos:line="3566" pos:column="37">-<pos:position pos:line="3566" pos:column="38"/></operator><literal type="number" pos:line="3566" pos:column="38">1<pos:position pos:line="3566" pos:column="39"/></literal></expr>]<pos:position pos:line="3566" pos:column="40"/></index></name><operator pos:line="3566" pos:column="40">++<pos:position pos:line="3566" pos:column="42"/></operator></expr>;<pos:position pos:line="3566" pos:column="43"/></expr_stmt>
  <comment type="block" pos:line="3567" pos:column="3">/* Fall through into OP_Rewind */</comment>
}<pos:position pos:line="3568" pos:column="2"/></block>
<comment type="block" pos:line="3569" pos:column="1">/* Opcode: Rewind P1 P2 * * *
**
** The next use of the Rowid or Column or Next instruction for P1 
** will refer to the first entry in the database table or index.
** If the table or index is empty and P2&gt;0, then jump immediately to P2.
** If P2 is 0 or if the table or index is not empty, fall through
** to the following instruction.
*/</comment>
<case pos:line="3577" pos:column="1">case <expr><name pos:line="3577" pos:column="6">OP_Rewind<pos:position pos:line="3577" pos:column="15"/></name></expr>:<pos:position pos:line="3577" pos:column="16"/></case> <block pos:line="3577" pos:column="17">{        <comment type="block" pos:line="3577" pos:column="26">/* jump */</comment>
  <decl_stmt><decl><type><name pos:line="3578" pos:column="3">int<pos:position pos:line="3578" pos:column="6"/></name></type> <name pos:line="3578" pos:column="7">i<pos:position pos:line="3578" pos:column="8"/></name></decl>;<pos:position pos:line="3578" pos:column="9"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="3579" pos:column="3">VdbeCursor<pos:position pos:line="3579" pos:column="13"/></name> <modifier pos:line="3579" pos:column="14">*<pos:position pos:line="3579" pos:column="15"/></modifier></type><name pos:line="3579" pos:column="15">pC<pos:position pos:line="3579" pos:column="17"/></name></decl>;<pos:position pos:line="3579" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="3580" pos:column="3">BtCursor<pos:position pos:line="3580" pos:column="11"/></name> <modifier pos:line="3580" pos:column="12">*<pos:position pos:line="3580" pos:column="13"/></modifier></type><name pos:line="3580" pos:column="13">pCrsr<pos:position pos:line="3580" pos:column="18"/></name></decl>;<pos:position pos:line="3580" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="3581" pos:column="3">int<pos:position pos:line="3581" pos:column="6"/></name></type> <name pos:line="3581" pos:column="7">res<pos:position pos:line="3581" pos:column="10"/></name></decl>;<pos:position pos:line="3581" pos:column="11"/></decl_stmt>

  <expr_stmt><expr><name pos:line="3583" pos:column="3">i<pos:position pos:line="3583" pos:column="4"/></name> <operator pos:line="3583" pos:column="5">=<pos:position pos:line="3583" pos:column="6"/></operator> <name><name pos:line="3583" pos:column="7">pOp<pos:position pos:line="3583" pos:column="10"/></name><operator pos:line="3583" pos:column="10">-&gt;<pos:position pos:line="3583" pos:column="15"/></operator><name pos:line="3583" pos:column="12">p1<pos:position pos:line="3583" pos:column="14"/></name></name></expr>;<pos:position pos:line="3583" pos:column="15"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="3584" pos:column="3">assert<pos:position pos:line="3584" pos:column="9"/></name><argument_list pos:line="3584" pos:column="9">( <argument><expr><name pos:line="3584" pos:column="11">i<pos:position pos:line="3584" pos:column="12"/></name><operator pos:line="3584" pos:column="12">&gt;=<pos:position pos:line="3584" pos:column="17"/></operator><literal type="number" pos:line="3584" pos:column="14">0<pos:position pos:line="3584" pos:column="15"/></literal> <operator pos:line="3584" pos:column="16">&amp;&amp;<pos:position pos:line="3584" pos:column="26"/></operator> <name pos:line="3584" pos:column="19">i<pos:position pos:line="3584" pos:column="20"/></name><operator pos:line="3584" pos:column="20">&lt;<pos:position pos:line="3584" pos:column="24"/></operator><name><name pos:line="3584" pos:column="21">p<pos:position pos:line="3584" pos:column="22"/></name><operator pos:line="3584" pos:column="22">-&gt;<pos:position pos:line="3584" pos:column="27"/></operator><name pos:line="3584" pos:column="24">nCursor<pos:position pos:line="3584" pos:column="31"/></name></name></expr></argument> )<pos:position pos:line="3584" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="3584" pos:column="34"/></expr_stmt>
  <expr_stmt><expr><name pos:line="3585" pos:column="3">pC<pos:position pos:line="3585" pos:column="5"/></name> <operator pos:line="3585" pos:column="6">=<pos:position pos:line="3585" pos:column="7"/></operator> <name><name pos:line="3585" pos:column="8">p<pos:position pos:line="3585" pos:column="9"/></name><operator pos:line="3585" pos:column="9">-&gt;<pos:position pos:line="3585" pos:column="14"/></operator><name pos:line="3585" pos:column="11">apCsr<pos:position pos:line="3585" pos:column="16"/></name><index pos:line="3585" pos:column="16">[<expr><name pos:line="3585" pos:column="17">i<pos:position pos:line="3585" pos:column="18"/></name></expr>]<pos:position pos:line="3585" pos:column="19"/></index></name></expr>;<pos:position pos:line="3585" pos:column="20"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="3586" pos:column="3">assert<pos:position pos:line="3586" pos:column="9"/></name><argument_list pos:line="3586" pos:column="9">( <argument><expr><name pos:line="3586" pos:column="11">pC<pos:position pos:line="3586" pos:column="13"/></name><operator pos:line="3586" pos:column="13">!=<pos:position pos:line="3586" pos:column="15"/></operator><literal type="number" pos:line="3586" pos:column="15">0<pos:position pos:line="3586" pos:column="16"/></literal></expr></argument> )<pos:position pos:line="3586" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="3586" pos:column="19"/></expr_stmt>
  <if pos:line="3587" pos:column="3">if<condition pos:line="3587" pos:column="5">( <expr><operator pos:line="3587" pos:column="7">(<pos:position pos:line="3587" pos:column="8"/></operator><name pos:line="3587" pos:column="8">pCrsr<pos:position pos:line="3587" pos:column="13"/></name> <operator pos:line="3587" pos:column="14">=<pos:position pos:line="3587" pos:column="15"/></operator> <name><name pos:line="3587" pos:column="16">pC<pos:position pos:line="3587" pos:column="18"/></name><operator pos:line="3587" pos:column="18">-&gt;<pos:position pos:line="3587" pos:column="23"/></operator><name pos:line="3587" pos:column="20">pCursor<pos:position pos:line="3587" pos:column="27"/></name></name><operator pos:line="3587" pos:column="27">)<pos:position pos:line="3587" pos:column="28"/></operator><operator pos:line="3587" pos:column="28">!=<pos:position pos:line="3587" pos:column="30"/></operator><literal type="number" pos:line="3587" pos:column="30">0<pos:position pos:line="3587" pos:column="31"/></literal></expr> )<pos:position pos:line="3587" pos:column="33"/></condition><then><block pos:line="3587" pos:column="33">{
    <expr_stmt><expr><name pos:line="3588" pos:column="5">rc<pos:position pos:line="3588" pos:column="7"/></name> <operator pos:line="3588" pos:column="8">=<pos:position pos:line="3588" pos:column="9"/></operator> <call><name pos:line="3588" pos:column="10">sqlite3BtreeFirst<pos:position pos:line="3588" pos:column="27"/></name><argument_list pos:line="3588" pos:column="27">(<argument><expr><name pos:line="3588" pos:column="28">pCrsr<pos:position pos:line="3588" pos:column="33"/></name></expr></argument>, <argument><expr><operator pos:line="3588" pos:column="35">&amp;<pos:position pos:line="3588" pos:column="40"/></operator><name pos:line="3588" pos:column="36">res<pos:position pos:line="3588" pos:column="39"/></name></expr></argument>)<pos:position pos:line="3588" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="3588" pos:column="41"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="3589" pos:column="5">pC<pos:position pos:line="3589" pos:column="7"/></name><operator pos:line="3589" pos:column="7">-&gt;<pos:position pos:line="3589" pos:column="12"/></operator><name pos:line="3589" pos:column="9">atFirst<pos:position pos:line="3589" pos:column="16"/></name></name> <operator pos:line="3589" pos:column="17">=<pos:position pos:line="3589" pos:column="18"/></operator> <ternary><condition><expr><name pos:line="3589" pos:column="19">res<pos:position pos:line="3589" pos:column="22"/></name><operator pos:line="3589" pos:column="22">==<pos:position pos:line="3589" pos:column="24"/></operator><literal type="number" pos:line="3589" pos:column="24">0<pos:position pos:line="3589" pos:column="25"/></literal></expr> ?<pos:position pos:line="3589" pos:column="27"/></condition><then><expr><literal type="number" pos:line="3589" pos:column="27">1<pos:position pos:line="3589" pos:column="28"/></literal></expr></then><else pos:line="3589" pos:column="28">:<expr><literal type="number" pos:line="3589" pos:column="29">0<pos:position pos:line="3589" pos:column="30"/></literal></expr></else></ternary></expr>;<pos:position pos:line="3589" pos:column="31"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="3590" pos:column="5">pC<pos:position pos:line="3590" pos:column="7"/></name><operator pos:line="3590" pos:column="7">-&gt;<pos:position pos:line="3590" pos:column="12"/></operator><name pos:line="3590" pos:column="9">deferredMoveto<pos:position pos:line="3590" pos:column="23"/></name></name> <operator pos:line="3590" pos:column="24">=<pos:position pos:line="3590" pos:column="25"/></operator> <literal type="number" pos:line="3590" pos:column="26">0<pos:position pos:line="3590" pos:column="27"/></literal></expr>;<pos:position pos:line="3590" pos:column="28"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="3591" pos:column="5">pC<pos:position pos:line="3591" pos:column="7"/></name><operator pos:line="3591" pos:column="7">-&gt;<pos:position pos:line="3591" pos:column="12"/></operator><name pos:line="3591" pos:column="9">cacheStatus<pos:position pos:line="3591" pos:column="20"/></name></name> <operator pos:line="3591" pos:column="21">=<pos:position pos:line="3591" pos:column="22"/></operator> <name pos:line="3591" pos:column="23">CACHE_STALE<pos:position pos:line="3591" pos:column="34"/></name></expr>;<pos:position pos:line="3591" pos:column="35"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="3592" pos:column="5">pC<pos:position pos:line="3592" pos:column="7"/></name><operator pos:line="3592" pos:column="7">-&gt;<pos:position pos:line="3592" pos:column="12"/></operator><name pos:line="3592" pos:column="9">rowidIsValid<pos:position pos:line="3592" pos:column="21"/></name></name> <operator pos:line="3592" pos:column="22">=<pos:position pos:line="3592" pos:column="23"/></operator> <literal type="number" pos:line="3592" pos:column="24">0<pos:position pos:line="3592" pos:column="25"/></literal></expr>;<pos:position pos:line="3592" pos:column="26"/></expr_stmt>
  }<pos:position pos:line="3593" pos:column="4"/></block></then><else pos:line="3593" pos:column="4">else<block pos:line="3593" pos:column="8">{
    <expr_stmt><expr><name pos:line="3594" pos:column="5">res<pos:position pos:line="3594" pos:column="8"/></name> <operator pos:line="3594" pos:column="9">=<pos:position pos:line="3594" pos:column="10"/></operator> <literal type="number" pos:line="3594" pos:column="11">1<pos:position pos:line="3594" pos:column="12"/></literal></expr>;<pos:position pos:line="3594" pos:column="13"/></expr_stmt>
  }<pos:position pos:line="3595" pos:column="4"/></block></else></if>
  <expr_stmt><expr><name><name pos:line="3596" pos:column="3">pC<pos:position pos:line="3596" pos:column="5"/></name><operator pos:line="3596" pos:column="5">-&gt;<pos:position pos:line="3596" pos:column="10"/></operator><name pos:line="3596" pos:column="7">nullRow<pos:position pos:line="3596" pos:column="14"/></name></name> <operator pos:line="3596" pos:column="15">=<pos:position pos:line="3596" pos:column="16"/></operator> <operator pos:line="3596" pos:column="17">(<pos:position pos:line="3596" pos:column="18"/></operator><name pos:line="3596" pos:column="18">u8<pos:position pos:line="3596" pos:column="20"/></name><operator pos:line="3596" pos:column="20">)<pos:position pos:line="3596" pos:column="21"/></operator><name pos:line="3596" pos:column="21">res<pos:position pos:line="3596" pos:column="24"/></name></expr>;<pos:position pos:line="3596" pos:column="25"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="3597" pos:column="3">assert<pos:position pos:line="3597" pos:column="9"/></name><argument_list pos:line="3597" pos:column="9">( <argument><expr><name><name pos:line="3597" pos:column="11">pOp<pos:position pos:line="3597" pos:column="14"/></name><operator pos:line="3597" pos:column="14">-&gt;<pos:position pos:line="3597" pos:column="19"/></operator><name pos:line="3597" pos:column="16">p2<pos:position pos:line="3597" pos:column="18"/></name></name><operator pos:line="3597" pos:column="18">&gt;<pos:position pos:line="3597" pos:column="22"/></operator><literal type="number" pos:line="3597" pos:column="19">0<pos:position pos:line="3597" pos:column="20"/></literal> <operator pos:line="3597" pos:column="21">&amp;&amp;<pos:position pos:line="3597" pos:column="31"/></operator> <name><name pos:line="3597" pos:column="24">pOp<pos:position pos:line="3597" pos:column="27"/></name><operator pos:line="3597" pos:column="27">-&gt;<pos:position pos:line="3597" pos:column="32"/></operator><name pos:line="3597" pos:column="29">p2<pos:position pos:line="3597" pos:column="31"/></name></name><operator pos:line="3597" pos:column="31">&lt;<pos:position pos:line="3597" pos:column="35"/></operator><name><name pos:line="3597" pos:column="32">p<pos:position pos:line="3597" pos:column="33"/></name><operator pos:line="3597" pos:column="33">-&gt;<pos:position pos:line="3597" pos:column="38"/></operator><name pos:line="3597" pos:column="35">nOp<pos:position pos:line="3597" pos:column="38"/></name></name></expr></argument> )<pos:position pos:line="3597" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="3597" pos:column="41"/></expr_stmt>
  <if pos:line="3598" pos:column="3">if<condition pos:line="3598" pos:column="5">( <expr><name pos:line="3598" pos:column="7">res<pos:position pos:line="3598" pos:column="10"/></name></expr> )<pos:position pos:line="3598" pos:column="12"/></condition><then><block pos:line="3598" pos:column="12">{
    <expr_stmt><expr><name pos:line="3599" pos:column="5">pc<pos:position pos:line="3599" pos:column="7"/></name> <operator pos:line="3599" pos:column="8">=<pos:position pos:line="3599" pos:column="9"/></operator> <name><name pos:line="3599" pos:column="10">pOp<pos:position pos:line="3599" pos:column="13"/></name><operator pos:line="3599" pos:column="13">-&gt;<pos:position pos:line="3599" pos:column="18"/></operator><name pos:line="3599" pos:column="15">p2<pos:position pos:line="3599" pos:column="17"/></name></name> <operator pos:line="3599" pos:column="18">-<pos:position pos:line="3599" pos:column="19"/></operator> <literal type="number" pos:line="3599" pos:column="20">1<pos:position pos:line="3599" pos:column="21"/></literal></expr>;<pos:position pos:line="3599" pos:column="22"/></expr_stmt>
  }<pos:position pos:line="3600" pos:column="4"/></block></then></if>
  <break pos:line="3601" pos:column="3">break;<pos:position pos:line="3601" pos:column="9"/></break>
}<pos:position pos:line="3602" pos:column="2"/></block>

<comment type="block" pos:line="3604" pos:column="1">/* Opcode: Next P1 P2 * * *
**
** Advance cursor P1 so that it points to the next key/data pair in its
** table or index.  If there are no more key/value pairs then fall through
** to the following instruction.  But if the cursor advance was successful,
** jump immediately to P2.
**
** The P1 cursor must be for a real table, not a pseudo-table.
**
** See also: Prev
*/</comment>
<comment type="block" pos:line="3615" pos:column="1">/* Opcode: Prev P1 P2 * * *
**
** Back up cursor P1 so that it points to the previous key/data pair in its
** table or index.  If there is no previous key/value pairs then fall through
** to the following instruction.  But if the cursor backup was successful,
** jump immediately to P2.
**
** The P1 cursor must be for a real table, not a pseudo-table.
*/</comment>
<case pos:line="3624" pos:column="1">case <expr><name pos:line="3624" pos:column="6">OP_Prev<pos:position pos:line="3624" pos:column="13"/></name></expr>:<pos:position pos:line="3624" pos:column="14"/></case>          <comment type="block" pos:line="3624" pos:column="24">/* jump */</comment>
<case pos:line="3625" pos:column="1">case <expr><name pos:line="3625" pos:column="6">OP_Next<pos:position pos:line="3625" pos:column="13"/></name></expr>:<pos:position pos:line="3625" pos:column="14"/></case> <block pos:line="3625" pos:column="15">{        <comment type="block" pos:line="3625" pos:column="24">/* jump */</comment>
  <decl_stmt><decl><type><name pos:line="3626" pos:column="3">VdbeCursor<pos:position pos:line="3626" pos:column="13"/></name> <modifier pos:line="3626" pos:column="14">*<pos:position pos:line="3626" pos:column="15"/></modifier></type><name pos:line="3626" pos:column="15">pC<pos:position pos:line="3626" pos:column="17"/></name></decl>;<pos:position pos:line="3626" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="3627" pos:column="3">BtCursor<pos:position pos:line="3627" pos:column="11"/></name> <modifier pos:line="3627" pos:column="12">*<pos:position pos:line="3627" pos:column="13"/></modifier></type><name pos:line="3627" pos:column="13">pCrsr<pos:position pos:line="3627" pos:column="18"/></name></decl>;<pos:position pos:line="3627" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="3628" pos:column="3">int<pos:position pos:line="3628" pos:column="6"/></name></type> <name pos:line="3628" pos:column="7">res<pos:position pos:line="3628" pos:column="10"/></name></decl>;<pos:position pos:line="3628" pos:column="11"/></decl_stmt>

  <expr_stmt><expr><name pos:line="3630" pos:column="3">CHECK_FOR_INTERRUPT<pos:position pos:line="3630" pos:column="22"/></name></expr>;<pos:position pos:line="3630" pos:column="23"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="3631" pos:column="3">assert<pos:position pos:line="3631" pos:column="9"/></name><argument_list pos:line="3631" pos:column="9">( <argument><expr><name><name pos:line="3631" pos:column="11">pOp<pos:position pos:line="3631" pos:column="14"/></name><operator pos:line="3631" pos:column="14">-&gt;<pos:position pos:line="3631" pos:column="19"/></operator><name pos:line="3631" pos:column="16">p1<pos:position pos:line="3631" pos:column="18"/></name></name><operator pos:line="3631" pos:column="18">&gt;=<pos:position pos:line="3631" pos:column="23"/></operator><literal type="number" pos:line="3631" pos:column="20">0<pos:position pos:line="3631" pos:column="21"/></literal> <operator pos:line="3631" pos:column="22">&amp;&amp;<pos:position pos:line="3631" pos:column="32"/></operator> <name><name pos:line="3631" pos:column="25">pOp<pos:position pos:line="3631" pos:column="28"/></name><operator pos:line="3631" pos:column="28">-&gt;<pos:position pos:line="3631" pos:column="33"/></operator><name pos:line="3631" pos:column="30">p1<pos:position pos:line="3631" pos:column="32"/></name></name><operator pos:line="3631" pos:column="32">&lt;<pos:position pos:line="3631" pos:column="36"/></operator><name><name pos:line="3631" pos:column="33">p<pos:position pos:line="3631" pos:column="34"/></name><operator pos:line="3631" pos:column="34">-&gt;<pos:position pos:line="3631" pos:column="39"/></operator><name pos:line="3631" pos:column="36">nCursor<pos:position pos:line="3631" pos:column="43"/></name></name></expr></argument> )<pos:position pos:line="3631" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="3631" pos:column="46"/></expr_stmt>
  <expr_stmt><expr><name pos:line="3632" pos:column="3">pC<pos:position pos:line="3632" pos:column="5"/></name> <operator pos:line="3632" pos:column="6">=<pos:position pos:line="3632" pos:column="7"/></operator> <name><name pos:line="3632" pos:column="8">p<pos:position pos:line="3632" pos:column="9"/></name><operator pos:line="3632" pos:column="9">-&gt;<pos:position pos:line="3632" pos:column="14"/></operator><name pos:line="3632" pos:column="11">apCsr<pos:position pos:line="3632" pos:column="16"/></name><index pos:line="3632" pos:column="16">[<expr><name><name pos:line="3632" pos:column="17">pOp<pos:position pos:line="3632" pos:column="20"/></name><operator pos:line="3632" pos:column="20">-&gt;<pos:position pos:line="3632" pos:column="25"/></operator><name pos:line="3632" pos:column="22">p1<pos:position pos:line="3632" pos:column="24"/></name></name></expr>]<pos:position pos:line="3632" pos:column="25"/></index></name></expr>;<pos:position pos:line="3632" pos:column="26"/></expr_stmt>
  <if pos:line="3633" pos:column="3">if<condition pos:line="3633" pos:column="5">( <expr><name pos:line="3633" pos:column="7">pC<pos:position pos:line="3633" pos:column="9"/></name><operator pos:line="3633" pos:column="9">==<pos:position pos:line="3633" pos:column="11"/></operator><literal type="number" pos:line="3633" pos:column="11">0<pos:position pos:line="3633" pos:column="12"/></literal></expr> )<pos:position pos:line="3633" pos:column="14"/></condition><then><block pos:line="3633" pos:column="14">{
    <break pos:line="3634" pos:column="5">break;<pos:position pos:line="3634" pos:column="11"/></break>  <comment type="block" pos:line="3634" pos:column="13">/* See ticket #2273 */</comment>
  }<pos:position pos:line="3635" pos:column="4"/></block></then></if>
  <expr_stmt><expr><name pos:line="3636" pos:column="3">pCrsr<pos:position pos:line="3636" pos:column="8"/></name> <operator pos:line="3636" pos:column="9">=<pos:position pos:line="3636" pos:column="10"/></operator> <name><name pos:line="3636" pos:column="11">pC<pos:position pos:line="3636" pos:column="13"/></name><operator pos:line="3636" pos:column="13">-&gt;<pos:position pos:line="3636" pos:column="18"/></operator><name pos:line="3636" pos:column="15">pCursor<pos:position pos:line="3636" pos:column="22"/></name></name></expr>;<pos:position pos:line="3636" pos:column="23"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="3637" pos:column="3">assert<pos:position pos:line="3637" pos:column="9"/></name><argument_list pos:line="3637" pos:column="9">( <argument><expr><name pos:line="3637" pos:column="11">pCrsr<pos:position pos:line="3637" pos:column="16"/></name></expr></argument> )<pos:position pos:line="3637" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="3637" pos:column="19"/></expr_stmt>
  <expr_stmt><expr><name pos:line="3638" pos:column="3">res<pos:position pos:line="3638" pos:column="6"/></name> <operator pos:line="3638" pos:column="7">=<pos:position pos:line="3638" pos:column="8"/></operator> <literal type="number" pos:line="3638" pos:column="9">1<pos:position pos:line="3638" pos:column="10"/></literal></expr>;<pos:position pos:line="3638" pos:column="11"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="3639" pos:column="3">assert<pos:position pos:line="3639" pos:column="9"/></name><argument_list pos:line="3639" pos:column="9">( <argument><expr><name><name pos:line="3639" pos:column="11">pC<pos:position pos:line="3639" pos:column="13"/></name><operator pos:line="3639" pos:column="13">-&gt;<pos:position pos:line="3639" pos:column="18"/></operator><name pos:line="3639" pos:column="15">deferredMoveto<pos:position pos:line="3639" pos:column="29"/></name></name><operator pos:line="3639" pos:column="29">==<pos:position pos:line="3639" pos:column="31"/></operator><literal type="number" pos:line="3639" pos:column="31">0<pos:position pos:line="3639" pos:column="32"/></literal></expr></argument> )<pos:position pos:line="3639" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="3639" pos:column="35"/></expr_stmt>
  <expr_stmt><expr><name pos:line="3640" pos:column="3">rc<pos:position pos:line="3640" pos:column="5"/></name> <operator pos:line="3640" pos:column="6">=<pos:position pos:line="3640" pos:column="7"/></operator> <ternary><condition><expr><name><name pos:line="3640" pos:column="8">pOp<pos:position pos:line="3640" pos:column="11"/></name><operator pos:line="3640" pos:column="11">-&gt;<pos:position pos:line="3640" pos:column="16"/></operator><name pos:line="3640" pos:column="13">opcode<pos:position pos:line="3640" pos:column="19"/></name></name><operator pos:line="3640" pos:column="19">==<pos:position pos:line="3640" pos:column="21"/></operator><name pos:line="3640" pos:column="21">OP_Next<pos:position pos:line="3640" pos:column="28"/></name></expr> ?<pos:position pos:line="3640" pos:column="30"/></condition><then pos:line="3640" pos:column="30"> <expr><call><name pos:line="3640" pos:column="31">sqlite3BtreeNext<pos:position pos:line="3640" pos:column="47"/></name><argument_list pos:line="3640" pos:column="47">(<argument><expr><name pos:line="3640" pos:column="48">pCrsr<pos:position pos:line="3640" pos:column="53"/></name></expr></argument>, <argument><expr><operator pos:line="3640" pos:column="55">&amp;<pos:position pos:line="3640" pos:column="60"/></operator><name pos:line="3640" pos:column="56">res<pos:position pos:line="3640" pos:column="59"/></name></expr></argument>)<pos:position pos:line="3640" pos:column="60"/></argument_list></call></expr> <pos:position pos:line="3640" pos:column="61"/></then><else pos:line="3640" pos:column="61">:
                              <expr><call><name pos:line="3641" pos:column="31">sqlite3BtreePrevious<pos:position pos:line="3641" pos:column="51"/></name><argument_list pos:line="3641" pos:column="51">(<argument><expr><name pos:line="3641" pos:column="52">pCrsr<pos:position pos:line="3641" pos:column="57"/></name></expr></argument>, <argument><expr><operator pos:line="3641" pos:column="59">&amp;<pos:position pos:line="3641" pos:column="64"/></operator><name pos:line="3641" pos:column="60">res<pos:position pos:line="3641" pos:column="63"/></name></expr></argument>)<pos:position pos:line="3641" pos:column="64"/></argument_list></call></expr></else></ternary></expr>;<pos:position pos:line="3641" pos:column="65"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="3642" pos:column="3">pC<pos:position pos:line="3642" pos:column="5"/></name><operator pos:line="3642" pos:column="5">-&gt;<pos:position pos:line="3642" pos:column="10"/></operator><name pos:line="3642" pos:column="7">nullRow<pos:position pos:line="3642" pos:column="14"/></name></name> <operator pos:line="3642" pos:column="15">=<pos:position pos:line="3642" pos:column="16"/></operator> <operator pos:line="3642" pos:column="17">(<pos:position pos:line="3642" pos:column="18"/></operator><name pos:line="3642" pos:column="18">u8<pos:position pos:line="3642" pos:column="20"/></name><operator pos:line="3642" pos:column="20">)<pos:position pos:line="3642" pos:column="21"/></operator><name pos:line="3642" pos:column="21">res<pos:position pos:line="3642" pos:column="24"/></name></expr>;<pos:position pos:line="3642" pos:column="25"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="3643" pos:column="3">pC<pos:position pos:line="3643" pos:column="5"/></name><operator pos:line="3643" pos:column="5">-&gt;<pos:position pos:line="3643" pos:column="10"/></operator><name pos:line="3643" pos:column="7">cacheStatus<pos:position pos:line="3643" pos:column="18"/></name></name> <operator pos:line="3643" pos:column="19">=<pos:position pos:line="3643" pos:column="20"/></operator> <name pos:line="3643" pos:column="21">CACHE_STALE<pos:position pos:line="3643" pos:column="32"/></name></expr>;<pos:position pos:line="3643" pos:column="33"/></expr_stmt>
  <if pos:line="3644" pos:column="3">if<condition pos:line="3644" pos:column="5">( <expr><name pos:line="3644" pos:column="7">res<pos:position pos:line="3644" pos:column="10"/></name><operator pos:line="3644" pos:column="10">==<pos:position pos:line="3644" pos:column="12"/></operator><literal type="number" pos:line="3644" pos:column="12">0<pos:position pos:line="3644" pos:column="13"/></literal></expr> )<pos:position pos:line="3644" pos:column="15"/></condition><then><block pos:line="3644" pos:column="15">{
    <expr_stmt><expr><name pos:line="3645" pos:column="5">pc<pos:position pos:line="3645" pos:column="7"/></name> <operator pos:line="3645" pos:column="8">=<pos:position pos:line="3645" pos:column="9"/></operator> <name><name pos:line="3645" pos:column="10">pOp<pos:position pos:line="3645" pos:column="13"/></name><operator pos:line="3645" pos:column="13">-&gt;<pos:position pos:line="3645" pos:column="18"/></operator><name pos:line="3645" pos:column="15">p2<pos:position pos:line="3645" pos:column="17"/></name></name> <operator pos:line="3645" pos:column="18">-<pos:position pos:line="3645" pos:column="19"/></operator> <literal type="number" pos:line="3645" pos:column="20">1<pos:position pos:line="3645" pos:column="21"/></literal></expr>;<pos:position pos:line="3645" pos:column="22"/></expr_stmt>
    <if pos:line="3646" pos:column="5">if<condition pos:line="3646" pos:column="7">( <expr><name><name pos:line="3646" pos:column="9">pOp<pos:position pos:line="3646" pos:column="12"/></name><operator pos:line="3646" pos:column="12">-&gt;<pos:position pos:line="3646" pos:column="17"/></operator><name pos:line="3646" pos:column="14">p5<pos:position pos:line="3646" pos:column="16"/></name></name></expr> )<pos:position pos:line="3646" pos:column="18"/></condition><then pos:line="3646" pos:column="18"> <block type="pseudo"><expr_stmt><expr><name><name pos:line="3646" pos:column="19">p<pos:position pos:line="3646" pos:column="20"/></name><operator pos:line="3646" pos:column="20">-&gt;<pos:position pos:line="3646" pos:column="25"/></operator><name pos:line="3646" pos:column="22">aCounter<pos:position pos:line="3646" pos:column="30"/></name><index pos:line="3646" pos:column="30">[<expr><name><name pos:line="3646" pos:column="31">pOp<pos:position pos:line="3646" pos:column="34"/></name><operator pos:line="3646" pos:column="34">-&gt;<pos:position pos:line="3646" pos:column="39"/></operator><name pos:line="3646" pos:column="36">p5<pos:position pos:line="3646" pos:column="38"/></name></name><operator pos:line="3646" pos:column="38">-<pos:position pos:line="3646" pos:column="39"/></operator><literal type="number" pos:line="3646" pos:column="39">1<pos:position pos:line="3646" pos:column="40"/></literal></expr>]<pos:position pos:line="3646" pos:column="41"/></index></name><operator pos:line="3646" pos:column="41">++<pos:position pos:line="3646" pos:column="43"/></operator></expr>;<pos:position pos:line="3646" pos:column="44"/></expr_stmt></block></then></if>
<cpp:ifdef pos:line="3647" pos:column="1">#<cpp:directive pos:line="3647" pos:column="2">ifdef<pos:position pos:line="3647" pos:column="7"/></cpp:directive> <name pos:line="3647" pos:column="8">SQLITE_TEST<pos:position pos:line="3647" pos:column="19"/></name></cpp:ifdef>
    <expr_stmt><expr><name pos:line="3648" pos:column="5">sqlite3_search_count<pos:position pos:line="3648" pos:column="25"/></name><operator pos:line="3648" pos:column="25">++<pos:position pos:line="3648" pos:column="27"/></operator></expr>;<pos:position pos:line="3648" pos:column="28"/></expr_stmt>
<cpp:endif pos:line="3649" pos:column="1">#<cpp:directive pos:line="3649" pos:column="2">endif<pos:position pos:line="3649" pos:column="7"/></cpp:directive></cpp:endif>
  }<pos:position pos:line="3650" pos:column="4"/></block></then></if>
  <expr_stmt><expr><name><name pos:line="3651" pos:column="3">pC<pos:position pos:line="3651" pos:column="5"/></name><operator pos:line="3651" pos:column="5">-&gt;<pos:position pos:line="3651" pos:column="10"/></operator><name pos:line="3651" pos:column="7">rowidIsValid<pos:position pos:line="3651" pos:column="19"/></name></name> <operator pos:line="3651" pos:column="20">=<pos:position pos:line="3651" pos:column="21"/></operator> <literal type="number" pos:line="3651" pos:column="22">0<pos:position pos:line="3651" pos:column="23"/></literal></expr>;<pos:position pos:line="3651" pos:column="24"/></expr_stmt>
  <break pos:line="3652" pos:column="3">break;<pos:position pos:line="3652" pos:column="9"/></break>
}<pos:position pos:line="3653" pos:column="2"/></block>

<comment type="block" pos:line="3655" pos:column="1">/* Opcode: IdxInsert P1 P2 P3 * P5
**
** Register P2 holds a SQL index key made using the
** MakeRecord instructions.  This opcode writes that key
** into the index P1.  Data for the entry is nil.
**
** P3 is a flag that provides a hint to the b-tree layer that this
** insert is likely to be an append.
**
** This instruction only works for indices.  The equivalent instruction
** for tables is OP_Insert.
*/</comment>
<case pos:line="3667" pos:column="1">case <expr><name pos:line="3667" pos:column="6">OP_IdxInsert<pos:position pos:line="3667" pos:column="18"/></name></expr>:<pos:position pos:line="3667" pos:column="19"/></case> <block pos:line="3667" pos:column="20">{        <comment type="block" pos:line="3667" pos:column="29">/* in2 */</comment>
  <decl_stmt><decl><type><name pos:line="3668" pos:column="3">int<pos:position pos:line="3668" pos:column="6"/></name></type> <name pos:line="3668" pos:column="7">i<pos:position pos:line="3668" pos:column="8"/></name></decl>;<pos:position pos:line="3668" pos:column="9"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="3669" pos:column="3">VdbeCursor<pos:position pos:line="3669" pos:column="13"/></name> <modifier pos:line="3669" pos:column="14">*<pos:position pos:line="3669" pos:column="15"/></modifier></type><name pos:line="3669" pos:column="15">pC<pos:position pos:line="3669" pos:column="17"/></name></decl>;<pos:position pos:line="3669" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="3670" pos:column="3">BtCursor<pos:position pos:line="3670" pos:column="11"/></name> <modifier pos:line="3670" pos:column="12">*<pos:position pos:line="3670" pos:column="13"/></modifier></type><name pos:line="3670" pos:column="13">pCrsr<pos:position pos:line="3670" pos:column="18"/></name></decl>;<pos:position pos:line="3670" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="3671" pos:column="3">int<pos:position pos:line="3671" pos:column="6"/></name></type> <name pos:line="3671" pos:column="7">nKey<pos:position pos:line="3671" pos:column="11"/></name></decl>;<pos:position pos:line="3671" pos:column="12"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="3672" pos:column="3">const<pos:position pos:line="3672" pos:column="8"/></specifier> <name pos:line="3672" pos:column="9">char<pos:position pos:line="3672" pos:column="13"/></name> <modifier pos:line="3672" pos:column="14">*<pos:position pos:line="3672" pos:column="15"/></modifier></type><name pos:line="3672" pos:column="15">zKey<pos:position pos:line="3672" pos:column="19"/></name></decl>;<pos:position pos:line="3672" pos:column="20"/></decl_stmt>

  <expr_stmt><expr><name pos:line="3674" pos:column="3">i<pos:position pos:line="3674" pos:column="4"/></name> <operator pos:line="3674" pos:column="5">=<pos:position pos:line="3674" pos:column="6"/></operator> <name><name pos:line="3674" pos:column="7">pOp<pos:position pos:line="3674" pos:column="10"/></name><operator pos:line="3674" pos:column="10">-&gt;<pos:position pos:line="3674" pos:column="15"/></operator><name pos:line="3674" pos:column="12">p1<pos:position pos:line="3674" pos:column="14"/></name></name></expr>;<pos:position pos:line="3674" pos:column="15"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="3675" pos:column="3">assert<pos:position pos:line="3675" pos:column="9"/></name><argument_list pos:line="3675" pos:column="9">( <argument><expr><name pos:line="3675" pos:column="11">i<pos:position pos:line="3675" pos:column="12"/></name><operator pos:line="3675" pos:column="12">&gt;=<pos:position pos:line="3675" pos:column="17"/></operator><literal type="number" pos:line="3675" pos:column="14">0<pos:position pos:line="3675" pos:column="15"/></literal> <operator pos:line="3675" pos:column="16">&amp;&amp;<pos:position pos:line="3675" pos:column="26"/></operator> <name pos:line="3675" pos:column="19">i<pos:position pos:line="3675" pos:column="20"/></name><operator pos:line="3675" pos:column="20">&lt;<pos:position pos:line="3675" pos:column="24"/></operator><name><name pos:line="3675" pos:column="21">p<pos:position pos:line="3675" pos:column="22"/></name><operator pos:line="3675" pos:column="22">-&gt;<pos:position pos:line="3675" pos:column="27"/></operator><name pos:line="3675" pos:column="24">nCursor<pos:position pos:line="3675" pos:column="31"/></name></name></expr></argument> )<pos:position pos:line="3675" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="3675" pos:column="34"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="3676" pos:column="3">assert<pos:position pos:line="3676" pos:column="9"/></name><argument_list pos:line="3676" pos:column="9">( <argument><expr><name><name pos:line="3676" pos:column="11">p<pos:position pos:line="3676" pos:column="12"/></name><operator pos:line="3676" pos:column="12">-&gt;<pos:position pos:line="3676" pos:column="17"/></operator><name pos:line="3676" pos:column="14">apCsr<pos:position pos:line="3676" pos:column="19"/></name><index pos:line="3676" pos:column="19">[<expr><name pos:line="3676" pos:column="20">i<pos:position pos:line="3676" pos:column="21"/></name></expr>]<pos:position pos:line="3676" pos:column="22"/></index></name><operator pos:line="3676" pos:column="22">!=<pos:position pos:line="3676" pos:column="24"/></operator><literal type="number" pos:line="3676" pos:column="24">0<pos:position pos:line="3676" pos:column="25"/></literal></expr></argument> )<pos:position pos:line="3676" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="3676" pos:column="28"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="3677" pos:column="3">assert<pos:position pos:line="3677" pos:column="9"/></name><argument_list pos:line="3677" pos:column="9">( <argument><expr><name><name pos:line="3677" pos:column="11">pIn2<pos:position pos:line="3677" pos:column="15"/></name><operator pos:line="3677" pos:column="15">-&gt;<pos:position pos:line="3677" pos:column="20"/></operator><name pos:line="3677" pos:column="17">flags<pos:position pos:line="3677" pos:column="22"/></name></name> <operator pos:line="3677" pos:column="23">&amp;<pos:position pos:line="3677" pos:column="28"/></operator> <name pos:line="3677" pos:column="25">MEM_Blob<pos:position pos:line="3677" pos:column="33"/></name></expr></argument> )<pos:position pos:line="3677" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="3677" pos:column="36"/></expr_stmt>
  <if pos:line="3678" pos:column="3">if<condition pos:line="3678" pos:column="5">( <expr><operator pos:line="3678" pos:column="7">(<pos:position pos:line="3678" pos:column="8"/></operator><name pos:line="3678" pos:column="8">pCrsr<pos:position pos:line="3678" pos:column="13"/></name> <operator pos:line="3678" pos:column="14">=<pos:position pos:line="3678" pos:column="15"/></operator> <operator pos:line="3678" pos:column="16">(<pos:position pos:line="3678" pos:column="17"/></operator><name pos:line="3678" pos:column="17">pC<pos:position pos:line="3678" pos:column="19"/></name> <operator pos:line="3678" pos:column="20">=<pos:position pos:line="3678" pos:column="21"/></operator> <name><name pos:line="3678" pos:column="22">p<pos:position pos:line="3678" pos:column="23"/></name><operator pos:line="3678" pos:column="23">-&gt;<pos:position pos:line="3678" pos:column="28"/></operator><name pos:line="3678" pos:column="25">apCsr<pos:position pos:line="3678" pos:column="30"/></name><index pos:line="3678" pos:column="30">[<expr><name pos:line="3678" pos:column="31">i<pos:position pos:line="3678" pos:column="32"/></name></expr>]<pos:position pos:line="3678" pos:column="33"/></index></name><operator pos:line="3678" pos:column="33">)<pos:position pos:line="3678" pos:column="34"/></operator><operator pos:line="3678" pos:column="34">-&gt;<pos:position pos:line="3678" pos:column="39"/></operator><name pos:line="3678" pos:column="36">pCursor<pos:position pos:line="3678" pos:column="43"/></name><operator pos:line="3678" pos:column="43">)<pos:position pos:line="3678" pos:column="44"/></operator><operator pos:line="3678" pos:column="44">!=<pos:position pos:line="3678" pos:column="46"/></operator><literal type="number" pos:line="3678" pos:column="46">0<pos:position pos:line="3678" pos:column="47"/></literal></expr> )<pos:position pos:line="3678" pos:column="49"/></condition><then><block pos:line="3678" pos:column="49">{
    <expr_stmt><expr><call><name pos:line="3679" pos:column="5">assert<pos:position pos:line="3679" pos:column="11"/></name><argument_list pos:line="3679" pos:column="11">( <argument><expr><name><name pos:line="3679" pos:column="13">pC<pos:position pos:line="3679" pos:column="15"/></name><operator pos:line="3679" pos:column="15">-&gt;<pos:position pos:line="3679" pos:column="20"/></operator><name pos:line="3679" pos:column="17">isTable<pos:position pos:line="3679" pos:column="24"/></name></name><operator pos:line="3679" pos:column="24">==<pos:position pos:line="3679" pos:column="26"/></operator><literal type="number" pos:line="3679" pos:column="26">0<pos:position pos:line="3679" pos:column="27"/></literal></expr></argument> )<pos:position pos:line="3679" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="3679" pos:column="30"/></expr_stmt>
    <expr_stmt><expr><name pos:line="3680" pos:column="5">rc<pos:position pos:line="3680" pos:column="7"/></name> <operator pos:line="3680" pos:column="8">=<pos:position pos:line="3680" pos:column="9"/></operator> <call><name pos:line="3680" pos:column="10">ExpandBlob<pos:position pos:line="3680" pos:column="20"/></name><argument_list pos:line="3680" pos:column="20">(<argument><expr><name pos:line="3680" pos:column="21">pIn2<pos:position pos:line="3680" pos:column="25"/></name></expr></argument>)<pos:position pos:line="3680" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="3680" pos:column="27"/></expr_stmt>
    <if pos:line="3681" pos:column="5">if<condition pos:line="3681" pos:column="7">( <expr><name pos:line="3681" pos:column="9">rc<pos:position pos:line="3681" pos:column="11"/></name><operator pos:line="3681" pos:column="11">==<pos:position pos:line="3681" pos:column="13"/></operator><name pos:line="3681" pos:column="13">SQLITE_OK<pos:position pos:line="3681" pos:column="22"/></name></expr> )<pos:position pos:line="3681" pos:column="24"/></condition><then><block pos:line="3681" pos:column="24">{
      <expr_stmt><expr><name pos:line="3682" pos:column="7">nKey<pos:position pos:line="3682" pos:column="11"/></name> <operator pos:line="3682" pos:column="12">=<pos:position pos:line="3682" pos:column="13"/></operator> <name><name pos:line="3682" pos:column="14">pIn2<pos:position pos:line="3682" pos:column="18"/></name><operator pos:line="3682" pos:column="18">-&gt;<pos:position pos:line="3682" pos:column="23"/></operator><name pos:line="3682" pos:column="20">n<pos:position pos:line="3682" pos:column="21"/></name></name></expr>;<pos:position pos:line="3682" pos:column="22"/></expr_stmt>
      <expr_stmt><expr><name pos:line="3683" pos:column="7">zKey<pos:position pos:line="3683" pos:column="11"/></name> <operator pos:line="3683" pos:column="12">=<pos:position pos:line="3683" pos:column="13"/></operator> <name><name pos:line="3683" pos:column="14">pIn2<pos:position pos:line="3683" pos:column="18"/></name><operator pos:line="3683" pos:column="18">-&gt;<pos:position pos:line="3683" pos:column="23"/></operator><name pos:line="3683" pos:column="20">z<pos:position pos:line="3683" pos:column="21"/></name></name></expr>;<pos:position pos:line="3683" pos:column="22"/></expr_stmt>
      <expr_stmt><expr><name pos:line="3684" pos:column="7">rc<pos:position pos:line="3684" pos:column="9"/></name> <operator pos:line="3684" pos:column="10">=<pos:position pos:line="3684" pos:column="11"/></operator> <call><name pos:line="3684" pos:column="12">sqlite3BtreeInsert<pos:position pos:line="3684" pos:column="30"/></name><argument_list pos:line="3684" pos:column="30">(<argument><expr><name pos:line="3684" pos:column="31">pCrsr<pos:position pos:line="3684" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="3684" pos:column="38">zKey<pos:position pos:line="3684" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="3684" pos:column="44">nKey<pos:position pos:line="3684" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="3684" pos:column="50">""<pos:position pos:line="3684" pos:column="52"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="3684" pos:column="54">0<pos:position pos:line="3684" pos:column="55"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="3684" pos:column="57">0<pos:position pos:line="3684" pos:column="58"/></literal></expr></argument>, <argument><expr><name><name pos:line="3684" pos:column="60">pOp<pos:position pos:line="3684" pos:column="63"/></name><operator pos:line="3684" pos:column="63">-&gt;<pos:position pos:line="3684" pos:column="68"/></operator><name pos:line="3684" pos:column="65">p3<pos:position pos:line="3684" pos:column="67"/></name></name></expr></argument>, 
          <argument><expr><operator pos:line="3685" pos:column="11">(<pos:position pos:line="3685" pos:column="12"/></operator><ternary><condition><expr><operator pos:line="3685" pos:column="12">(<pos:position pos:line="3685" pos:column="13"/></operator><name><name pos:line="3685" pos:column="13">pOp<pos:position pos:line="3685" pos:column="16"/></name><operator pos:line="3685" pos:column="16">-&gt;<pos:position pos:line="3685" pos:column="21"/></operator><name pos:line="3685" pos:column="18">p5<pos:position pos:line="3685" pos:column="20"/></name></name> <operator pos:line="3685" pos:column="21">&amp;<pos:position pos:line="3685" pos:column="26"/></operator> <name pos:line="3685" pos:column="23">OPFLAG_USESEEKRESULT<pos:position pos:line="3685" pos:column="43"/></name><operator pos:line="3685" pos:column="43">)<pos:position pos:line="3685" pos:column="44"/></operator></expr> ?<pos:position pos:line="3685" pos:column="46"/></condition><then pos:line="3685" pos:column="46"> <expr><name><name pos:line="3685" pos:column="47">pC<pos:position pos:line="3685" pos:column="49"/></name><operator pos:line="3685" pos:column="49">-&gt;<pos:position pos:line="3685" pos:column="54"/></operator><name pos:line="3685" pos:column="51">seekResult<pos:position pos:line="3685" pos:column="61"/></name></name></expr> <pos:position pos:line="3685" pos:column="62"/></then><else pos:line="3685" pos:column="62">: <expr><literal type="number" pos:line="3685" pos:column="64">0<pos:position pos:line="3685" pos:column="65"/></literal></expr></else></ternary><operator pos:line="3685" pos:column="65">)<pos:position pos:line="3685" pos:column="66"/></operator></expr></argument>
      )<pos:position pos:line="3686" pos:column="8"/></argument_list></call></expr>;<pos:position pos:line="3686" pos:column="9"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="3687" pos:column="7">assert<pos:position pos:line="3687" pos:column="13"/></name><argument_list pos:line="3687" pos:column="13">( <argument><expr><name><name pos:line="3687" pos:column="15">pC<pos:position pos:line="3687" pos:column="17"/></name><operator pos:line="3687" pos:column="17">-&gt;<pos:position pos:line="3687" pos:column="22"/></operator><name pos:line="3687" pos:column="19">deferredMoveto<pos:position pos:line="3687" pos:column="33"/></name></name><operator pos:line="3687" pos:column="33">==<pos:position pos:line="3687" pos:column="35"/></operator><literal type="number" pos:line="3687" pos:column="35">0<pos:position pos:line="3687" pos:column="36"/></literal></expr></argument> )<pos:position pos:line="3687" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="3687" pos:column="39"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="3688" pos:column="7">pC<pos:position pos:line="3688" pos:column="9"/></name><operator pos:line="3688" pos:column="9">-&gt;<pos:position pos:line="3688" pos:column="14"/></operator><name pos:line="3688" pos:column="11">cacheStatus<pos:position pos:line="3688" pos:column="22"/></name></name> <operator pos:line="3688" pos:column="23">=<pos:position pos:line="3688" pos:column="24"/></operator> <name pos:line="3688" pos:column="25">CACHE_STALE<pos:position pos:line="3688" pos:column="36"/></name></expr>;<pos:position pos:line="3688" pos:column="37"/></expr_stmt>
    }<pos:position pos:line="3689" pos:column="6"/></block></then></if>
  }<pos:position pos:line="3690" pos:column="4"/></block></then></if>
  <break pos:line="3691" pos:column="3">break;<pos:position pos:line="3691" pos:column="9"/></break>
}<pos:position pos:line="3692" pos:column="2"/></block>

<comment type="block" pos:line="3694" pos:column="1">/* Opcode: IdxDelete P1 P2 P3 * *
**
** The content of P3 registers starting at register P2 form
** an unpacked index key. This opcode removes that entry from the 
** index opened by cursor P1.
*/</comment>
<case pos:line="3700" pos:column="1">case <expr><name pos:line="3700" pos:column="6">OP_IdxDelete<pos:position pos:line="3700" pos:column="18"/></name></expr>:<pos:position pos:line="3700" pos:column="19"/></case> <block pos:line="3700" pos:column="20">{
  <decl_stmt><decl><type><name pos:line="3701" pos:column="3">int<pos:position pos:line="3701" pos:column="6"/></name></type> <name pos:line="3701" pos:column="7">i<pos:position pos:line="3701" pos:column="8"/></name></decl>;<pos:position pos:line="3701" pos:column="9"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="3702" pos:column="3">VdbeCursor<pos:position pos:line="3702" pos:column="13"/></name> <modifier pos:line="3702" pos:column="14">*<pos:position pos:line="3702" pos:column="15"/></modifier></type><name pos:line="3702" pos:column="15">pC<pos:position pos:line="3702" pos:column="17"/></name></decl>;<pos:position pos:line="3702" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="3703" pos:column="3">BtCursor<pos:position pos:line="3703" pos:column="11"/></name> <modifier pos:line="3703" pos:column="12">*<pos:position pos:line="3703" pos:column="13"/></modifier></type><name pos:line="3703" pos:column="13">pCrsr<pos:position pos:line="3703" pos:column="18"/></name></decl>;<pos:position pos:line="3703" pos:column="19"/></decl_stmt>

  <expr_stmt><expr><name pos:line="3705" pos:column="3">i<pos:position pos:line="3705" pos:column="4"/></name> <operator pos:line="3705" pos:column="5">=<pos:position pos:line="3705" pos:column="6"/></operator> <name><name pos:line="3705" pos:column="7">pOp<pos:position pos:line="3705" pos:column="10"/></name><operator pos:line="3705" pos:column="10">-&gt;<pos:position pos:line="3705" pos:column="15"/></operator><name pos:line="3705" pos:column="12">p1<pos:position pos:line="3705" pos:column="14"/></name></name></expr>;<pos:position pos:line="3705" pos:column="15"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="3706" pos:column="3">assert<pos:position pos:line="3706" pos:column="9"/></name><argument_list pos:line="3706" pos:column="9">( <argument><expr><name><name pos:line="3706" pos:column="11">pOp<pos:position pos:line="3706" pos:column="14"/></name><operator pos:line="3706" pos:column="14">-&gt;<pos:position pos:line="3706" pos:column="19"/></operator><name pos:line="3706" pos:column="16">p3<pos:position pos:line="3706" pos:column="18"/></name></name><operator pos:line="3706" pos:column="18">&gt;<pos:position pos:line="3706" pos:column="22"/></operator><literal type="number" pos:line="3706" pos:column="19">0<pos:position pos:line="3706" pos:column="20"/></literal></expr></argument> )<pos:position pos:line="3706" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="3706" pos:column="23"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="3707" pos:column="3">assert<pos:position pos:line="3707" pos:column="9"/></name><argument_list pos:line="3707" pos:column="9">( <argument><expr><name><name pos:line="3707" pos:column="11">pOp<pos:position pos:line="3707" pos:column="14"/></name><operator pos:line="3707" pos:column="14">-&gt;<pos:position pos:line="3707" pos:column="19"/></operator><name pos:line="3707" pos:column="16">p2<pos:position pos:line="3707" pos:column="18"/></name></name><operator pos:line="3707" pos:column="18">&gt;<pos:position pos:line="3707" pos:column="22"/></operator><literal type="number" pos:line="3707" pos:column="19">0<pos:position pos:line="3707" pos:column="20"/></literal> <operator pos:line="3707" pos:column="21">&amp;&amp;<pos:position pos:line="3707" pos:column="31"/></operator> <name><name pos:line="3707" pos:column="24">pOp<pos:position pos:line="3707" pos:column="27"/></name><operator pos:line="3707" pos:column="27">-&gt;<pos:position pos:line="3707" pos:column="32"/></operator><name pos:line="3707" pos:column="29">p2<pos:position pos:line="3707" pos:column="31"/></name></name><operator pos:line="3707" pos:column="31">+<pos:position pos:line="3707" pos:column="32"/></operator><name><name pos:line="3707" pos:column="32">pOp<pos:position pos:line="3707" pos:column="35"/></name><operator pos:line="3707" pos:column="35">-&gt;<pos:position pos:line="3707" pos:column="40"/></operator><name pos:line="3707" pos:column="37">p3<pos:position pos:line="3707" pos:column="39"/></name></name><operator pos:line="3707" pos:column="39">&lt;=<pos:position pos:line="3707" pos:column="44"/></operator><name><name pos:line="3707" pos:column="41">p<pos:position pos:line="3707" pos:column="42"/></name><operator pos:line="3707" pos:column="42">-&gt;<pos:position pos:line="3707" pos:column="47"/></operator><name pos:line="3707" pos:column="44">nMem<pos:position pos:line="3707" pos:column="48"/></name></name><operator pos:line="3707" pos:column="48">+<pos:position pos:line="3707" pos:column="49"/></operator><literal type="number" pos:line="3707" pos:column="49">1<pos:position pos:line="3707" pos:column="50"/></literal></expr></argument> )<pos:position pos:line="3707" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="3707" pos:column="53"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="3708" pos:column="3">assert<pos:position pos:line="3708" pos:column="9"/></name><argument_list pos:line="3708" pos:column="9">( <argument><expr><name pos:line="3708" pos:column="11">i<pos:position pos:line="3708" pos:column="12"/></name><operator pos:line="3708" pos:column="12">&gt;=<pos:position pos:line="3708" pos:column="17"/></operator><literal type="number" pos:line="3708" pos:column="14">0<pos:position pos:line="3708" pos:column="15"/></literal> <operator pos:line="3708" pos:column="16">&amp;&amp;<pos:position pos:line="3708" pos:column="26"/></operator> <name pos:line="3708" pos:column="19">i<pos:position pos:line="3708" pos:column="20"/></name><operator pos:line="3708" pos:column="20">&lt;<pos:position pos:line="3708" pos:column="24"/></operator><name><name pos:line="3708" pos:column="21">p<pos:position pos:line="3708" pos:column="22"/></name><operator pos:line="3708" pos:column="22">-&gt;<pos:position pos:line="3708" pos:column="27"/></operator><name pos:line="3708" pos:column="24">nCursor<pos:position pos:line="3708" pos:column="31"/></name></name></expr></argument> )<pos:position pos:line="3708" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="3708" pos:column="34"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="3709" pos:column="3">assert<pos:position pos:line="3709" pos:column="9"/></name><argument_list pos:line="3709" pos:column="9">( <argument><expr><name><name pos:line="3709" pos:column="11">p<pos:position pos:line="3709" pos:column="12"/></name><operator pos:line="3709" pos:column="12">-&gt;<pos:position pos:line="3709" pos:column="17"/></operator><name pos:line="3709" pos:column="14">apCsr<pos:position pos:line="3709" pos:column="19"/></name><index pos:line="3709" pos:column="19">[<expr><name pos:line="3709" pos:column="20">i<pos:position pos:line="3709" pos:column="21"/></name></expr>]<pos:position pos:line="3709" pos:column="22"/></index></name><operator pos:line="3709" pos:column="22">!=<pos:position pos:line="3709" pos:column="24"/></operator><literal type="number" pos:line="3709" pos:column="24">0<pos:position pos:line="3709" pos:column="25"/></literal></expr></argument> )<pos:position pos:line="3709" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="3709" pos:column="28"/></expr_stmt>
  <if pos:line="3710" pos:column="3">if<condition pos:line="3710" pos:column="5">( <expr><operator pos:line="3710" pos:column="7">(<pos:position pos:line="3710" pos:column="8"/></operator><name pos:line="3710" pos:column="8">pCrsr<pos:position pos:line="3710" pos:column="13"/></name> <operator pos:line="3710" pos:column="14">=<pos:position pos:line="3710" pos:column="15"/></operator> <operator pos:line="3710" pos:column="16">(<pos:position pos:line="3710" pos:column="17"/></operator><name pos:line="3710" pos:column="17">pC<pos:position pos:line="3710" pos:column="19"/></name> <operator pos:line="3710" pos:column="20">=<pos:position pos:line="3710" pos:column="21"/></operator> <name><name pos:line="3710" pos:column="22">p<pos:position pos:line="3710" pos:column="23"/></name><operator pos:line="3710" pos:column="23">-&gt;<pos:position pos:line="3710" pos:column="28"/></operator><name pos:line="3710" pos:column="25">apCsr<pos:position pos:line="3710" pos:column="30"/></name><index pos:line="3710" pos:column="30">[<expr><name pos:line="3710" pos:column="31">i<pos:position pos:line="3710" pos:column="32"/></name></expr>]<pos:position pos:line="3710" pos:column="33"/></index></name><operator pos:line="3710" pos:column="33">)<pos:position pos:line="3710" pos:column="34"/></operator><operator pos:line="3710" pos:column="34">-&gt;<pos:position pos:line="3710" pos:column="39"/></operator><name pos:line="3710" pos:column="36">pCursor<pos:position pos:line="3710" pos:column="43"/></name><operator pos:line="3710" pos:column="43">)<pos:position pos:line="3710" pos:column="44"/></operator><operator pos:line="3710" pos:column="44">!=<pos:position pos:line="3710" pos:column="46"/></operator><literal type="number" pos:line="3710" pos:column="46">0<pos:position pos:line="3710" pos:column="47"/></literal></expr> )<pos:position pos:line="3710" pos:column="49"/></condition><then><block pos:line="3710" pos:column="49">{
    <decl_stmt><decl><type><name pos:line="3711" pos:column="5">int<pos:position pos:line="3711" pos:column="8"/></name></type> <name pos:line="3711" pos:column="9">res<pos:position pos:line="3711" pos:column="12"/></name></decl>;<pos:position pos:line="3711" pos:column="13"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="3712" pos:column="5">UnpackedRecord<pos:position pos:line="3712" pos:column="19"/></name></type> <name pos:line="3712" pos:column="20">r<pos:position pos:line="3712" pos:column="21"/></name></decl>;<pos:position pos:line="3712" pos:column="22"/></decl_stmt>
    <expr_stmt><expr><name><name pos:line="3713" pos:column="5">r<pos:position pos:line="3713" pos:column="6"/></name><operator pos:line="3713" pos:column="6">.<pos:position pos:line="3713" pos:column="7"/></operator><name pos:line="3713" pos:column="7">pKeyInfo<pos:position pos:line="3713" pos:column="15"/></name></name> <operator pos:line="3713" pos:column="16">=<pos:position pos:line="3713" pos:column="17"/></operator> <name><name pos:line="3713" pos:column="18">pC<pos:position pos:line="3713" pos:column="20"/></name><operator pos:line="3713" pos:column="20">-&gt;<pos:position pos:line="3713" pos:column="25"/></operator><name pos:line="3713" pos:column="22">pKeyInfo<pos:position pos:line="3713" pos:column="30"/></name></name></expr>;<pos:position pos:line="3713" pos:column="31"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="3714" pos:column="5">r<pos:position pos:line="3714" pos:column="6"/></name><operator pos:line="3714" pos:column="6">.<pos:position pos:line="3714" pos:column="7"/></operator><name pos:line="3714" pos:column="7">nField<pos:position pos:line="3714" pos:column="13"/></name></name> <operator pos:line="3714" pos:column="14">=<pos:position pos:line="3714" pos:column="15"/></operator> <operator pos:line="3714" pos:column="16">(<pos:position pos:line="3714" pos:column="17"/></operator><name pos:line="3714" pos:column="17">u16<pos:position pos:line="3714" pos:column="20"/></name><operator pos:line="3714" pos:column="20">)<pos:position pos:line="3714" pos:column="21"/></operator><name><name pos:line="3714" pos:column="21">pOp<pos:position pos:line="3714" pos:column="24"/></name><operator pos:line="3714" pos:column="24">-&gt;<pos:position pos:line="3714" pos:column="29"/></operator><name pos:line="3714" pos:column="26">p3<pos:position pos:line="3714" pos:column="28"/></name></name></expr>;<pos:position pos:line="3714" pos:column="29"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="3715" pos:column="5">r<pos:position pos:line="3715" pos:column="6"/></name><operator pos:line="3715" pos:column="6">.<pos:position pos:line="3715" pos:column="7"/></operator><name pos:line="3715" pos:column="7">flags<pos:position pos:line="3715" pos:column="12"/></name></name> <operator pos:line="3715" pos:column="13">=<pos:position pos:line="3715" pos:column="14"/></operator> <literal type="number" pos:line="3715" pos:column="15">0<pos:position pos:line="3715" pos:column="16"/></literal></expr>;<pos:position pos:line="3715" pos:column="17"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="3716" pos:column="5">r<pos:position pos:line="3716" pos:column="6"/></name><operator pos:line="3716" pos:column="6">.<pos:position pos:line="3716" pos:column="7"/></operator><name pos:line="3716" pos:column="7">aMem<pos:position pos:line="3716" pos:column="11"/></name></name> <operator pos:line="3716" pos:column="12">=<pos:position pos:line="3716" pos:column="13"/></operator> <operator pos:line="3716" pos:column="14">&amp;<pos:position pos:line="3716" pos:column="19"/></operator><name><name pos:line="3716" pos:column="15">p<pos:position pos:line="3716" pos:column="16"/></name><operator pos:line="3716" pos:column="16">-&gt;<pos:position pos:line="3716" pos:column="21"/></operator><name pos:line="3716" pos:column="18">aMem<pos:position pos:line="3716" pos:column="22"/></name><index pos:line="3716" pos:column="22">[<expr><name><name pos:line="3716" pos:column="23">pOp<pos:position pos:line="3716" pos:column="26"/></name><operator pos:line="3716" pos:column="26">-&gt;<pos:position pos:line="3716" pos:column="31"/></operator><name pos:line="3716" pos:column="28">p2<pos:position pos:line="3716" pos:column="30"/></name></name></expr>]<pos:position pos:line="3716" pos:column="31"/></index></name></expr>;<pos:position pos:line="3716" pos:column="32"/></expr_stmt>
    <expr_stmt><expr><name pos:line="3717" pos:column="5">rc<pos:position pos:line="3717" pos:column="7"/></name> <operator pos:line="3717" pos:column="8">=<pos:position pos:line="3717" pos:column="9"/></operator> <call><name pos:line="3717" pos:column="10">sqlite3BtreeMovetoUnpacked<pos:position pos:line="3717" pos:column="36"/></name><argument_list pos:line="3717" pos:column="36">(<argument><expr><name pos:line="3717" pos:column="37">pCrsr<pos:position pos:line="3717" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="3717" pos:column="44">&amp;<pos:position pos:line="3717" pos:column="49"/></operator><name pos:line="3717" pos:column="45">r<pos:position pos:line="3717" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="3717" pos:column="48">0<pos:position pos:line="3717" pos:column="49"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="3717" pos:column="51">0<pos:position pos:line="3717" pos:column="52"/></literal></expr></argument>, <argument><expr><operator pos:line="3717" pos:column="54">&amp;<pos:position pos:line="3717" pos:column="59"/></operator><name pos:line="3717" pos:column="55">res<pos:position pos:line="3717" pos:column="58"/></name></expr></argument>)<pos:position pos:line="3717" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="3717" pos:column="60"/></expr_stmt>
    <if pos:line="3718" pos:column="5">if<condition pos:line="3718" pos:column="7">( <expr><name pos:line="3718" pos:column="9">rc<pos:position pos:line="3718" pos:column="11"/></name><operator pos:line="3718" pos:column="11">==<pos:position pos:line="3718" pos:column="13"/></operator><name pos:line="3718" pos:column="13">SQLITE_OK<pos:position pos:line="3718" pos:column="22"/></name> <operator pos:line="3718" pos:column="23">&amp;&amp;<pos:position pos:line="3718" pos:column="33"/></operator> <name pos:line="3718" pos:column="26">res<pos:position pos:line="3718" pos:column="29"/></name><operator pos:line="3718" pos:column="29">==<pos:position pos:line="3718" pos:column="31"/></operator><literal type="number" pos:line="3718" pos:column="31">0<pos:position pos:line="3718" pos:column="32"/></literal></expr> )<pos:position pos:line="3718" pos:column="34"/></condition><then><block pos:line="3718" pos:column="34">{
      <expr_stmt><expr><name pos:line="3719" pos:column="7">rc<pos:position pos:line="3719" pos:column="9"/></name> <operator pos:line="3719" pos:column="10">=<pos:position pos:line="3719" pos:column="11"/></operator> <call><name pos:line="3719" pos:column="12">sqlite3BtreeDelete<pos:position pos:line="3719" pos:column="30"/></name><argument_list pos:line="3719" pos:column="30">(<argument><expr><name pos:line="3719" pos:column="31">pCrsr<pos:position pos:line="3719" pos:column="36"/></name></expr></argument>)<pos:position pos:line="3719" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="3719" pos:column="38"/></expr_stmt>
    }<pos:position pos:line="3720" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="3721" pos:column="5">assert<pos:position pos:line="3721" pos:column="11"/></name><argument_list pos:line="3721" pos:column="11">( <argument><expr><name><name pos:line="3721" pos:column="13">pC<pos:position pos:line="3721" pos:column="15"/></name><operator pos:line="3721" pos:column="15">-&gt;<pos:position pos:line="3721" pos:column="20"/></operator><name pos:line="3721" pos:column="17">deferredMoveto<pos:position pos:line="3721" pos:column="31"/></name></name><operator pos:line="3721" pos:column="31">==<pos:position pos:line="3721" pos:column="33"/></operator><literal type="number" pos:line="3721" pos:column="33">0<pos:position pos:line="3721" pos:column="34"/></literal></expr></argument> )<pos:position pos:line="3721" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="3721" pos:column="37"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="3722" pos:column="5">pC<pos:position pos:line="3722" pos:column="7"/></name><operator pos:line="3722" pos:column="7">-&gt;<pos:position pos:line="3722" pos:column="12"/></operator><name pos:line="3722" pos:column="9">cacheStatus<pos:position pos:line="3722" pos:column="20"/></name></name> <operator pos:line="3722" pos:column="21">=<pos:position pos:line="3722" pos:column="22"/></operator> <name pos:line="3722" pos:column="23">CACHE_STALE<pos:position pos:line="3722" pos:column="34"/></name></expr>;<pos:position pos:line="3722" pos:column="35"/></expr_stmt>
  }<pos:position pos:line="3723" pos:column="4"/></block></then></if>
  <break pos:line="3724" pos:column="3">break;<pos:position pos:line="3724" pos:column="9"/></break>
}<pos:position pos:line="3725" pos:column="2"/></block>

<comment type="block" pos:line="3727" pos:column="1">/* Opcode: IdxRowid P1 P2 * * *
**
** Write into register P2 an integer which is the last entry in the record at
** the end of the index key pointed to by cursor P1.  This integer should be
** the rowid of the table entry to which this index entry points.
**
** See also: Rowid, MakeRecord.
*/</comment>
<case pos:line="3735" pos:column="1">case <expr><name pos:line="3735" pos:column="6">OP_IdxRowid<pos:position pos:line="3735" pos:column="17"/></name></expr>:<pos:position pos:line="3735" pos:column="18"/></case> <block pos:line="3735" pos:column="19">{              <comment type="block" pos:line="3735" pos:column="34">/* out2-prerelease */</comment>
  <decl_stmt><decl><type><name pos:line="3736" pos:column="3">int<pos:position pos:line="3736" pos:column="6"/></name></type> <name pos:line="3736" pos:column="7">i<pos:position pos:line="3736" pos:column="8"/></name></decl>;<pos:position pos:line="3736" pos:column="9"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="3737" pos:column="3">BtCursor<pos:position pos:line="3737" pos:column="11"/></name> <modifier pos:line="3737" pos:column="12">*<pos:position pos:line="3737" pos:column="13"/></modifier></type><name pos:line="3737" pos:column="13">pCrsr<pos:position pos:line="3737" pos:column="18"/></name></decl>;<pos:position pos:line="3737" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="3738" pos:column="3">VdbeCursor<pos:position pos:line="3738" pos:column="13"/></name> <modifier pos:line="3738" pos:column="14">*<pos:position pos:line="3738" pos:column="15"/></modifier></type><name pos:line="3738" pos:column="15">pC<pos:position pos:line="3738" pos:column="17"/></name></decl>;<pos:position pos:line="3738" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="3739" pos:column="3">i64<pos:position pos:line="3739" pos:column="6"/></name></type> <name pos:line="3739" pos:column="7">rowid<pos:position pos:line="3739" pos:column="12"/></name></decl>;<pos:position pos:line="3739" pos:column="13"/></decl_stmt>

  <expr_stmt><expr><name pos:line="3741" pos:column="3">i<pos:position pos:line="3741" pos:column="4"/></name> <operator pos:line="3741" pos:column="5">=<pos:position pos:line="3741" pos:column="6"/></operator> <name><name pos:line="3741" pos:column="7">pOp<pos:position pos:line="3741" pos:column="10"/></name><operator pos:line="3741" pos:column="10">-&gt;<pos:position pos:line="3741" pos:column="15"/></operator><name pos:line="3741" pos:column="12">p1<pos:position pos:line="3741" pos:column="14"/></name></name></expr>;<pos:position pos:line="3741" pos:column="15"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="3742" pos:column="3">assert<pos:position pos:line="3742" pos:column="9"/></name><argument_list pos:line="3742" pos:column="9">( <argument><expr><name pos:line="3742" pos:column="11">i<pos:position pos:line="3742" pos:column="12"/></name><operator pos:line="3742" pos:column="12">&gt;=<pos:position pos:line="3742" pos:column="17"/></operator><literal type="number" pos:line="3742" pos:column="14">0<pos:position pos:line="3742" pos:column="15"/></literal> <operator pos:line="3742" pos:column="16">&amp;&amp;<pos:position pos:line="3742" pos:column="26"/></operator> <name pos:line="3742" pos:column="19">i<pos:position pos:line="3742" pos:column="20"/></name><operator pos:line="3742" pos:column="20">&lt;<pos:position pos:line="3742" pos:column="24"/></operator><name><name pos:line="3742" pos:column="21">p<pos:position pos:line="3742" pos:column="22"/></name><operator pos:line="3742" pos:column="22">-&gt;<pos:position pos:line="3742" pos:column="27"/></operator><name pos:line="3742" pos:column="24">nCursor<pos:position pos:line="3742" pos:column="31"/></name></name></expr></argument> )<pos:position pos:line="3742" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="3742" pos:column="34"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="3743" pos:column="3">assert<pos:position pos:line="3743" pos:column="9"/></name><argument_list pos:line="3743" pos:column="9">( <argument><expr><name><name pos:line="3743" pos:column="11">p<pos:position pos:line="3743" pos:column="12"/></name><operator pos:line="3743" pos:column="12">-&gt;<pos:position pos:line="3743" pos:column="17"/></operator><name pos:line="3743" pos:column="14">apCsr<pos:position pos:line="3743" pos:column="19"/></name><index pos:line="3743" pos:column="19">[<expr><name pos:line="3743" pos:column="20">i<pos:position pos:line="3743" pos:column="21"/></name></expr>]<pos:position pos:line="3743" pos:column="22"/></index></name><operator pos:line="3743" pos:column="22">!=<pos:position pos:line="3743" pos:column="24"/></operator><literal type="number" pos:line="3743" pos:column="24">0<pos:position pos:line="3743" pos:column="25"/></literal></expr></argument> )<pos:position pos:line="3743" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="3743" pos:column="28"/></expr_stmt>
  <if pos:line="3744" pos:column="3">if<condition pos:line="3744" pos:column="5">( <expr><operator pos:line="3744" pos:column="7">(<pos:position pos:line="3744" pos:column="8"/></operator><name pos:line="3744" pos:column="8">pCrsr<pos:position pos:line="3744" pos:column="13"/></name> <operator pos:line="3744" pos:column="14">=<pos:position pos:line="3744" pos:column="15"/></operator> <operator pos:line="3744" pos:column="16">(<pos:position pos:line="3744" pos:column="17"/></operator><name pos:line="3744" pos:column="17">pC<pos:position pos:line="3744" pos:column="19"/></name> <operator pos:line="3744" pos:column="20">=<pos:position pos:line="3744" pos:column="21"/></operator> <name><name pos:line="3744" pos:column="22">p<pos:position pos:line="3744" pos:column="23"/></name><operator pos:line="3744" pos:column="23">-&gt;<pos:position pos:line="3744" pos:column="28"/></operator><name pos:line="3744" pos:column="25">apCsr<pos:position pos:line="3744" pos:column="30"/></name><index pos:line="3744" pos:column="30">[<expr><name pos:line="3744" pos:column="31">i<pos:position pos:line="3744" pos:column="32"/></name></expr>]<pos:position pos:line="3744" pos:column="33"/></index></name><operator pos:line="3744" pos:column="33">)<pos:position pos:line="3744" pos:column="34"/></operator><operator pos:line="3744" pos:column="34">-&gt;<pos:position pos:line="3744" pos:column="39"/></operator><name pos:line="3744" pos:column="36">pCursor<pos:position pos:line="3744" pos:column="43"/></name><operator pos:line="3744" pos:column="43">)<pos:position pos:line="3744" pos:column="44"/></operator><operator pos:line="3744" pos:column="44">!=<pos:position pos:line="3744" pos:column="46"/></operator><literal type="number" pos:line="3744" pos:column="46">0<pos:position pos:line="3744" pos:column="47"/></literal></expr> )<pos:position pos:line="3744" pos:column="49"/></condition><then><block pos:line="3744" pos:column="49">{
    <expr_stmt><expr><name pos:line="3745" pos:column="5">rc<pos:position pos:line="3745" pos:column="7"/></name> <operator pos:line="3745" pos:column="8">=<pos:position pos:line="3745" pos:column="9"/></operator> <call><name pos:line="3745" pos:column="10">sqlite3VdbeCursorMoveto<pos:position pos:line="3745" pos:column="33"/></name><argument_list pos:line="3745" pos:column="33">(<argument><expr><name pos:line="3745" pos:column="34">pC<pos:position pos:line="3745" pos:column="36"/></name></expr></argument>)<pos:position pos:line="3745" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="3745" pos:column="38"/></expr_stmt>
    <if pos:line="3746" pos:column="5">if<condition pos:line="3746" pos:column="7">( <expr><name pos:line="3746" pos:column="9">rc<pos:position pos:line="3746" pos:column="11"/></name></expr> )<pos:position pos:line="3746" pos:column="13"/></condition><then pos:line="3746" pos:column="13"> <block type="pseudo"><goto pos:line="3746" pos:column="14">goto <name pos:line="3746" pos:column="19">abort_due_to_error<pos:position pos:line="3746" pos:column="37"/></name>;<pos:position pos:line="3746" pos:column="38"/></goto></block></then></if>
    <expr_stmt><expr><call><name pos:line="3747" pos:column="5">assert<pos:position pos:line="3747" pos:column="11"/></name><argument_list pos:line="3747" pos:column="11">( <argument><expr><name><name pos:line="3747" pos:column="13">pC<pos:position pos:line="3747" pos:column="15"/></name><operator pos:line="3747" pos:column="15">-&gt;<pos:position pos:line="3747" pos:column="20"/></operator><name pos:line="3747" pos:column="17">deferredMoveto<pos:position pos:line="3747" pos:column="31"/></name></name><operator pos:line="3747" pos:column="31">==<pos:position pos:line="3747" pos:column="33"/></operator><literal type="number" pos:line="3747" pos:column="33">0<pos:position pos:line="3747" pos:column="34"/></literal></expr></argument> )<pos:position pos:line="3747" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="3747" pos:column="37"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="3748" pos:column="5">assert<pos:position pos:line="3748" pos:column="11"/></name><argument_list pos:line="3748" pos:column="11">( <argument><expr><name><name pos:line="3748" pos:column="13">pC<pos:position pos:line="3748" pos:column="15"/></name><operator pos:line="3748" pos:column="15">-&gt;<pos:position pos:line="3748" pos:column="20"/></operator><name pos:line="3748" pos:column="17">isTable<pos:position pos:line="3748" pos:column="24"/></name></name><operator pos:line="3748" pos:column="24">==<pos:position pos:line="3748" pos:column="26"/></operator><literal type="number" pos:line="3748" pos:column="26">0<pos:position pos:line="3748" pos:column="27"/></literal></expr></argument> )<pos:position pos:line="3748" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="3748" pos:column="30"/></expr_stmt>
    <if pos:line="3749" pos:column="5">if<condition pos:line="3749" pos:column="7">( <expr><operator pos:line="3749" pos:column="9">!<pos:position pos:line="3749" pos:column="10"/></operator><name><name pos:line="3749" pos:column="10">pC<pos:position pos:line="3749" pos:column="12"/></name><operator pos:line="3749" pos:column="12">-&gt;<pos:position pos:line="3749" pos:column="17"/></operator><name pos:line="3749" pos:column="14">nullRow<pos:position pos:line="3749" pos:column="21"/></name></name></expr> )<pos:position pos:line="3749" pos:column="23"/></condition><then><block pos:line="3749" pos:column="23">{
      <expr_stmt><expr><name pos:line="3750" pos:column="7">rc<pos:position pos:line="3750" pos:column="9"/></name> <operator pos:line="3750" pos:column="10">=<pos:position pos:line="3750" pos:column="11"/></operator> <call><name pos:line="3750" pos:column="12">sqlite3VdbeIdxRowid<pos:position pos:line="3750" pos:column="31"/></name><argument_list pos:line="3750" pos:column="31">(<argument><expr><name pos:line="3750" pos:column="32">pCrsr<pos:position pos:line="3750" pos:column="37"/></name></expr></argument>, <argument><expr><operator pos:line="3750" pos:column="39">&amp;<pos:position pos:line="3750" pos:column="44"/></operator><name pos:line="3750" pos:column="40">rowid<pos:position pos:line="3750" pos:column="45"/></name></expr></argument>)<pos:position pos:line="3750" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="3750" pos:column="47"/></expr_stmt>
      <if pos:line="3751" pos:column="7">if<condition pos:line="3751" pos:column="9">( <expr><name pos:line="3751" pos:column="11">rc<pos:position pos:line="3751" pos:column="13"/></name><operator pos:line="3751" pos:column="13">!=<pos:position pos:line="3751" pos:column="15"/></operator><name pos:line="3751" pos:column="15">SQLITE_OK<pos:position pos:line="3751" pos:column="24"/></name></expr> )<pos:position pos:line="3751" pos:column="26"/></condition><then><block pos:line="3751" pos:column="26">{
        <goto pos:line="3752" pos:column="9">goto <name pos:line="3752" pos:column="14">abort_due_to_error<pos:position pos:line="3752" pos:column="32"/></name>;<pos:position pos:line="3752" pos:column="33"/></goto>
      }<pos:position pos:line="3753" pos:column="8"/></block></then></if>
      <expr_stmt><expr><call><name pos:line="3754" pos:column="7">MemSetTypeFlag<pos:position pos:line="3754" pos:column="21"/></name><argument_list pos:line="3754" pos:column="21">(<argument><expr><name pos:line="3754" pos:column="22">pOut<pos:position pos:line="3754" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="3754" pos:column="28">MEM_Int<pos:position pos:line="3754" pos:column="35"/></name></expr></argument>)<pos:position pos:line="3754" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="3754" pos:column="37"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="3755" pos:column="7">pOut<pos:position pos:line="3755" pos:column="11"/></name><operator pos:line="3755" pos:column="11">-&gt;<pos:position pos:line="3755" pos:column="16"/></operator><name pos:line="3755" pos:column="13">u<pos:position pos:line="3755" pos:column="14"/></name><operator pos:line="3755" pos:column="14">.<pos:position pos:line="3755" pos:column="15"/></operator><name pos:line="3755" pos:column="15">i<pos:position pos:line="3755" pos:column="16"/></name></name> <operator pos:line="3755" pos:column="17">=<pos:position pos:line="3755" pos:column="18"/></operator> <name pos:line="3755" pos:column="19">rowid<pos:position pos:line="3755" pos:column="24"/></name></expr>;<pos:position pos:line="3755" pos:column="25"/></expr_stmt>
    }<pos:position pos:line="3756" pos:column="6"/></block></then></if>
  }<pos:position pos:line="3757" pos:column="4"/></block></then></if>
  <break pos:line="3758" pos:column="3">break;<pos:position pos:line="3758" pos:column="9"/></break>
}<pos:position pos:line="3759" pos:column="2"/></block>

<comment type="block" pos:line="3761" pos:column="1">/* Opcode: IdxGE P1 P2 P3 P4 P5
**
** The P4 register values beginning with P3 form an unpacked index 
** key that omits the ROWID.  Compare this key value against the index 
** that P1 is currently pointing to, ignoring the ROWID on the P1 index.
**
** If the P1 index entry is greater than or equal to the key value
** then jump to P2.  Otherwise fall through to the next instruction.
**
** If P5 is non-zero then the key value is increased by an epsilon 
** prior to the comparison.  This make the opcode work like IdxGT except
** that if the key from register P3 is a prefix of the key in the cursor,
** the result is false whereas it would be true with IdxGT.
*/</comment>
<comment type="block" pos:line="3775" pos:column="1">/* Opcode: IdxLT P1 P2 P3 * P5
**
** The P4 register values beginning with P3 form an unpacked index 
** key that omits the ROWID.  Compare this key value against the index 
** that P1 is currently pointing to, ignoring the ROWID on the P1 index.
**
** If the P1 index entry is less than the key value then jump to P2.
** Otherwise fall through to the next instruction.
**
** If P5 is non-zero then the key value is increased by an epsilon prior 
** to the comparison.  This makes the opcode work like IdxLE.
*/</comment>
<case pos:line="3787" pos:column="1">case <expr><name pos:line="3787" pos:column="6">OP_IdxLT<pos:position pos:line="3787" pos:column="14"/></name></expr>:<pos:position pos:line="3787" pos:column="15"/></case>          <comment type="block" pos:line="3787" pos:column="25">/* jump, in3 */</comment>
<case pos:line="3788" pos:column="1">case <expr><name pos:line="3788" pos:column="6">OP_IdxGE<pos:position pos:line="3788" pos:column="14"/></name></expr>:<pos:position pos:line="3788" pos:column="15"/></case> <block pos:line="3788" pos:column="16">{        <comment type="block" pos:line="3788" pos:column="25">/* jump, in3 */</comment>
  <decl_stmt><decl><type><name pos:line="3789" pos:column="3">int<pos:position pos:line="3789" pos:column="6"/></name></type> <name pos:line="3789" pos:column="7">i<pos:position pos:line="3789" pos:column="8"/></name></decl>;<pos:position pos:line="3789" pos:column="9"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="3790" pos:column="3">VdbeCursor<pos:position pos:line="3790" pos:column="13"/></name> <modifier pos:line="3790" pos:column="14">*<pos:position pos:line="3790" pos:column="15"/></modifier></type><name pos:line="3790" pos:column="15">pC<pos:position pos:line="3790" pos:column="17"/></name></decl>;<pos:position pos:line="3790" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="3791" pos:column="3">int<pos:position pos:line="3791" pos:column="6"/></name></type> <name pos:line="3791" pos:column="7">res<pos:position pos:line="3791" pos:column="10"/></name></decl>;<pos:position pos:line="3791" pos:column="11"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="3792" pos:column="3">UnpackedRecord<pos:position pos:line="3792" pos:column="17"/></name></type> <name pos:line="3792" pos:column="18">r<pos:position pos:line="3792" pos:column="19"/></name></decl>;<pos:position pos:line="3792" pos:column="20"/></decl_stmt>

  <expr_stmt><expr><name pos:line="3794" pos:column="3">i<pos:position pos:line="3794" pos:column="4"/></name> <operator pos:line="3794" pos:column="5">=<pos:position pos:line="3794" pos:column="6"/></operator> <name><name pos:line="3794" pos:column="7">pOp<pos:position pos:line="3794" pos:column="10"/></name><operator pos:line="3794" pos:column="10">-&gt;<pos:position pos:line="3794" pos:column="15"/></operator><name pos:line="3794" pos:column="12">p1<pos:position pos:line="3794" pos:column="14"/></name></name></expr>;<pos:position pos:line="3794" pos:column="15"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="3795" pos:column="3">assert<pos:position pos:line="3795" pos:column="9"/></name><argument_list pos:line="3795" pos:column="9">( <argument><expr><name pos:line="3795" pos:column="11">i<pos:position pos:line="3795" pos:column="12"/></name><operator pos:line="3795" pos:column="12">&gt;=<pos:position pos:line="3795" pos:column="17"/></operator><literal type="number" pos:line="3795" pos:column="14">0<pos:position pos:line="3795" pos:column="15"/></literal> <operator pos:line="3795" pos:column="16">&amp;&amp;<pos:position pos:line="3795" pos:column="26"/></operator> <name pos:line="3795" pos:column="19">i<pos:position pos:line="3795" pos:column="20"/></name><operator pos:line="3795" pos:column="20">&lt;<pos:position pos:line="3795" pos:column="24"/></operator><name><name pos:line="3795" pos:column="21">p<pos:position pos:line="3795" pos:column="22"/></name><operator pos:line="3795" pos:column="22">-&gt;<pos:position pos:line="3795" pos:column="27"/></operator><name pos:line="3795" pos:column="24">nCursor<pos:position pos:line="3795" pos:column="31"/></name></name></expr></argument> )<pos:position pos:line="3795" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="3795" pos:column="34"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="3796" pos:column="3">assert<pos:position pos:line="3796" pos:column="9"/></name><argument_list pos:line="3796" pos:column="9">( <argument><expr><name><name pos:line="3796" pos:column="11">p<pos:position pos:line="3796" pos:column="12"/></name><operator pos:line="3796" pos:column="12">-&gt;<pos:position pos:line="3796" pos:column="17"/></operator><name pos:line="3796" pos:column="14">apCsr<pos:position pos:line="3796" pos:column="19"/></name><index pos:line="3796" pos:column="19">[<expr><name pos:line="3796" pos:column="20">i<pos:position pos:line="3796" pos:column="21"/></name></expr>]<pos:position pos:line="3796" pos:column="22"/></index></name><operator pos:line="3796" pos:column="22">!=<pos:position pos:line="3796" pos:column="24"/></operator><literal type="number" pos:line="3796" pos:column="24">0<pos:position pos:line="3796" pos:column="25"/></literal></expr></argument> )<pos:position pos:line="3796" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="3796" pos:column="28"/></expr_stmt>
  <if pos:line="3797" pos:column="3">if<condition pos:line="3797" pos:column="5">( <expr><operator pos:line="3797" pos:column="7">(<pos:position pos:line="3797" pos:column="8"/></operator><name pos:line="3797" pos:column="8">pC<pos:position pos:line="3797" pos:column="10"/></name> <operator pos:line="3797" pos:column="11">=<pos:position pos:line="3797" pos:column="12"/></operator> <name><name pos:line="3797" pos:column="13">p<pos:position pos:line="3797" pos:column="14"/></name><operator pos:line="3797" pos:column="14">-&gt;<pos:position pos:line="3797" pos:column="19"/></operator><name pos:line="3797" pos:column="16">apCsr<pos:position pos:line="3797" pos:column="21"/></name><index pos:line="3797" pos:column="21">[<expr><name pos:line="3797" pos:column="22">i<pos:position pos:line="3797" pos:column="23"/></name></expr>]<pos:position pos:line="3797" pos:column="24"/></index></name><operator pos:line="3797" pos:column="24">)<pos:position pos:line="3797" pos:column="25"/></operator><operator pos:line="3797" pos:column="25">-&gt;<pos:position pos:line="3797" pos:column="30"/></operator><name pos:line="3797" pos:column="27">pCursor<pos:position pos:line="3797" pos:column="34"/></name><operator pos:line="3797" pos:column="34">!=<pos:position pos:line="3797" pos:column="36"/></operator><literal type="number" pos:line="3797" pos:column="36">0<pos:position pos:line="3797" pos:column="37"/></literal></expr> )<pos:position pos:line="3797" pos:column="39"/></condition><then><block pos:line="3797" pos:column="39">{
    <expr_stmt><expr><call><name pos:line="3798" pos:column="5">assert<pos:position pos:line="3798" pos:column="11"/></name><argument_list pos:line="3798" pos:column="11">( <argument><expr><name><name pos:line="3798" pos:column="13">pC<pos:position pos:line="3798" pos:column="15"/></name><operator pos:line="3798" pos:column="15">-&gt;<pos:position pos:line="3798" pos:column="20"/></operator><name pos:line="3798" pos:column="17">deferredMoveto<pos:position pos:line="3798" pos:column="31"/></name></name><operator pos:line="3798" pos:column="31">==<pos:position pos:line="3798" pos:column="33"/></operator><literal type="number" pos:line="3798" pos:column="33">0<pos:position pos:line="3798" pos:column="34"/></literal></expr></argument> )<pos:position pos:line="3798" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="3798" pos:column="37"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="3799" pos:column="5">assert<pos:position pos:line="3799" pos:column="11"/></name><argument_list pos:line="3799" pos:column="11">( <argument><expr><name><name pos:line="3799" pos:column="13">pOp<pos:position pos:line="3799" pos:column="16"/></name><operator pos:line="3799" pos:column="16">-&gt;<pos:position pos:line="3799" pos:column="21"/></operator><name pos:line="3799" pos:column="18">p5<pos:position pos:line="3799" pos:column="20"/></name></name><operator pos:line="3799" pos:column="20">==<pos:position pos:line="3799" pos:column="22"/></operator><literal type="number" pos:line="3799" pos:column="22">0<pos:position pos:line="3799" pos:column="23"/></literal> <operator pos:line="3799" pos:column="24">||<pos:position pos:line="3799" pos:column="26"/></operator> <name><name pos:line="3799" pos:column="27">pOp<pos:position pos:line="3799" pos:column="30"/></name><operator pos:line="3799" pos:column="30">-&gt;<pos:position pos:line="3799" pos:column="35"/></operator><name pos:line="3799" pos:column="32">p5<pos:position pos:line="3799" pos:column="34"/></name></name><operator pos:line="3799" pos:column="34">==<pos:position pos:line="3799" pos:column="36"/></operator><literal type="number" pos:line="3799" pos:column="36">1<pos:position pos:line="3799" pos:column="37"/></literal></expr></argument> )<pos:position pos:line="3799" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="3799" pos:column="40"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="3800" pos:column="5">assert<pos:position pos:line="3800" pos:column="11"/></name><argument_list pos:line="3800" pos:column="11">( <argument><expr><name><name pos:line="3800" pos:column="13">pOp<pos:position pos:line="3800" pos:column="16"/></name><operator pos:line="3800" pos:column="16">-&gt;<pos:position pos:line="3800" pos:column="21"/></operator><name pos:line="3800" pos:column="18">p4type<pos:position pos:line="3800" pos:column="24"/></name></name><operator pos:line="3800" pos:column="24">==<pos:position pos:line="3800" pos:column="26"/></operator><name pos:line="3800" pos:column="26">P4_INT32<pos:position pos:line="3800" pos:column="34"/></name></expr></argument> )<pos:position pos:line="3800" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="3800" pos:column="37"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="3801" pos:column="5">r<pos:position pos:line="3801" pos:column="6"/></name><operator pos:line="3801" pos:column="6">.<pos:position pos:line="3801" pos:column="7"/></operator><name pos:line="3801" pos:column="7">pKeyInfo<pos:position pos:line="3801" pos:column="15"/></name></name> <operator pos:line="3801" pos:column="16">=<pos:position pos:line="3801" pos:column="17"/></operator> <name><name pos:line="3801" pos:column="18">pC<pos:position pos:line="3801" pos:column="20"/></name><operator pos:line="3801" pos:column="20">-&gt;<pos:position pos:line="3801" pos:column="25"/></operator><name pos:line="3801" pos:column="22">pKeyInfo<pos:position pos:line="3801" pos:column="30"/></name></name></expr>;<pos:position pos:line="3801" pos:column="31"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="3802" pos:column="5">r<pos:position pos:line="3802" pos:column="6"/></name><operator pos:line="3802" pos:column="6">.<pos:position pos:line="3802" pos:column="7"/></operator><name pos:line="3802" pos:column="7">nField<pos:position pos:line="3802" pos:column="13"/></name></name> <operator pos:line="3802" pos:column="14">=<pos:position pos:line="3802" pos:column="15"/></operator> <operator pos:line="3802" pos:column="16">(<pos:position pos:line="3802" pos:column="17"/></operator><name pos:line="3802" pos:column="17">u16<pos:position pos:line="3802" pos:column="20"/></name><operator pos:line="3802" pos:column="20">)<pos:position pos:line="3802" pos:column="21"/></operator><name><name pos:line="3802" pos:column="21">pOp<pos:position pos:line="3802" pos:column="24"/></name><operator pos:line="3802" pos:column="24">-&gt;<pos:position pos:line="3802" pos:column="29"/></operator><name pos:line="3802" pos:column="26">p4<pos:position pos:line="3802" pos:column="28"/></name><operator pos:line="3802" pos:column="28">.<pos:position pos:line="3802" pos:column="29"/></operator><name pos:line="3802" pos:column="29">i<pos:position pos:line="3802" pos:column="30"/></name></name></expr>;<pos:position pos:line="3802" pos:column="31"/></expr_stmt>
    <if pos:line="3803" pos:column="5">if<condition pos:line="3803" pos:column="7">( <expr><name><name pos:line="3803" pos:column="9">pOp<pos:position pos:line="3803" pos:column="12"/></name><operator pos:line="3803" pos:column="12">-&gt;<pos:position pos:line="3803" pos:column="17"/></operator><name pos:line="3803" pos:column="14">p5<pos:position pos:line="3803" pos:column="16"/></name></name></expr> )<pos:position pos:line="3803" pos:column="18"/></condition><then><block pos:line="3803" pos:column="18">{
      <expr_stmt><expr><name><name pos:line="3804" pos:column="7">r<pos:position pos:line="3804" pos:column="8"/></name><operator pos:line="3804" pos:column="8">.<pos:position pos:line="3804" pos:column="9"/></operator><name pos:line="3804" pos:column="9">flags<pos:position pos:line="3804" pos:column="14"/></name></name> <operator pos:line="3804" pos:column="15">=<pos:position pos:line="3804" pos:column="16"/></operator> <name pos:line="3804" pos:column="17">UNPACKED_INCRKEY<pos:position pos:line="3804" pos:column="33"/></name> <operator pos:line="3804" pos:column="34">|<pos:position pos:line="3804" pos:column="35"/></operator> <name pos:line="3804" pos:column="36">UNPACKED_IGNORE_ROWID<pos:position pos:line="3804" pos:column="57"/></name></expr>;<pos:position pos:line="3804" pos:column="58"/></expr_stmt>
    }<pos:position pos:line="3805" pos:column="6"/></block></then><else pos:line="3805" pos:column="6">else<block pos:line="3805" pos:column="10">{
      <expr_stmt><expr><name><name pos:line="3806" pos:column="7">r<pos:position pos:line="3806" pos:column="8"/></name><operator pos:line="3806" pos:column="8">.<pos:position pos:line="3806" pos:column="9"/></operator><name pos:line="3806" pos:column="9">flags<pos:position pos:line="3806" pos:column="14"/></name></name> <operator pos:line="3806" pos:column="15">=<pos:position pos:line="3806" pos:column="16"/></operator> <name pos:line="3806" pos:column="17">UNPACKED_IGNORE_ROWID<pos:position pos:line="3806" pos:column="38"/></name></expr>;<pos:position pos:line="3806" pos:column="39"/></expr_stmt>
    }<pos:position pos:line="3807" pos:column="6"/></block></else></if>
    <expr_stmt><expr><name><name pos:line="3808" pos:column="5">r<pos:position pos:line="3808" pos:column="6"/></name><operator pos:line="3808" pos:column="6">.<pos:position pos:line="3808" pos:column="7"/></operator><name pos:line="3808" pos:column="7">aMem<pos:position pos:line="3808" pos:column="11"/></name></name> <operator pos:line="3808" pos:column="12">=<pos:position pos:line="3808" pos:column="13"/></operator> <operator pos:line="3808" pos:column="14">&amp;<pos:position pos:line="3808" pos:column="19"/></operator><name><name pos:line="3808" pos:column="15">p<pos:position pos:line="3808" pos:column="16"/></name><operator pos:line="3808" pos:column="16">-&gt;<pos:position pos:line="3808" pos:column="21"/></operator><name pos:line="3808" pos:column="18">aMem<pos:position pos:line="3808" pos:column="22"/></name><index pos:line="3808" pos:column="22">[<expr><name><name pos:line="3808" pos:column="23">pOp<pos:position pos:line="3808" pos:column="26"/></name><operator pos:line="3808" pos:column="26">-&gt;<pos:position pos:line="3808" pos:column="31"/></operator><name pos:line="3808" pos:column="28">p3<pos:position pos:line="3808" pos:column="30"/></name></name></expr>]<pos:position pos:line="3808" pos:column="31"/></index></name></expr>;<pos:position pos:line="3808" pos:column="32"/></expr_stmt>
    <expr_stmt><expr><name pos:line="3809" pos:column="5">rc<pos:position pos:line="3809" pos:column="7"/></name> <operator pos:line="3809" pos:column="8">=<pos:position pos:line="3809" pos:column="9"/></operator> <call><name pos:line="3809" pos:column="10">sqlite3VdbeIdxKeyCompare<pos:position pos:line="3809" pos:column="34"/></name><argument_list pos:line="3809" pos:column="34">(<argument><expr><name pos:line="3809" pos:column="35">pC<pos:position pos:line="3809" pos:column="37"/></name></expr></argument>, <argument><expr><operator pos:line="3809" pos:column="39">&amp;<pos:position pos:line="3809" pos:column="44"/></operator><name pos:line="3809" pos:column="40">r<pos:position pos:line="3809" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="3809" pos:column="43">&amp;<pos:position pos:line="3809" pos:column="48"/></operator><name pos:line="3809" pos:column="44">res<pos:position pos:line="3809" pos:column="47"/></name></expr></argument>)<pos:position pos:line="3809" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="3809" pos:column="49"/></expr_stmt>
    <if pos:line="3810" pos:column="5">if<condition pos:line="3810" pos:column="7">( <expr><name><name pos:line="3810" pos:column="9">pOp<pos:position pos:line="3810" pos:column="12"/></name><operator pos:line="3810" pos:column="12">-&gt;<pos:position pos:line="3810" pos:column="17"/></operator><name pos:line="3810" pos:column="14">opcode<pos:position pos:line="3810" pos:column="20"/></name></name><operator pos:line="3810" pos:column="20">==<pos:position pos:line="3810" pos:column="22"/></operator><name pos:line="3810" pos:column="22">OP_IdxLT<pos:position pos:line="3810" pos:column="30"/></name></expr> )<pos:position pos:line="3810" pos:column="32"/></condition><then><block pos:line="3810" pos:column="32">{
      <expr_stmt><expr><name pos:line="3811" pos:column="7">res<pos:position pos:line="3811" pos:column="10"/></name> <operator pos:line="3811" pos:column="11">=<pos:position pos:line="3811" pos:column="12"/></operator> <operator pos:line="3811" pos:column="13">-<pos:position pos:line="3811" pos:column="14"/></operator><name pos:line="3811" pos:column="14">res<pos:position pos:line="3811" pos:column="17"/></name></expr>;<pos:position pos:line="3811" pos:column="18"/></expr_stmt>
    }<pos:position pos:line="3812" pos:column="6"/></block></then><else pos:line="3812" pos:column="6">else<block pos:line="3812" pos:column="10">{
      <expr_stmt><expr><call><name pos:line="3813" pos:column="7">assert<pos:position pos:line="3813" pos:column="13"/></name><argument_list pos:line="3813" pos:column="13">( <argument><expr><name><name pos:line="3813" pos:column="15">pOp<pos:position pos:line="3813" pos:column="18"/></name><operator pos:line="3813" pos:column="18">-&gt;<pos:position pos:line="3813" pos:column="23"/></operator><name pos:line="3813" pos:column="20">opcode<pos:position pos:line="3813" pos:column="26"/></name></name><operator pos:line="3813" pos:column="26">==<pos:position pos:line="3813" pos:column="28"/></operator><name pos:line="3813" pos:column="28">OP_IdxGE<pos:position pos:line="3813" pos:column="36"/></name></expr></argument> )<pos:position pos:line="3813" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="3813" pos:column="39"/></expr_stmt>
      <expr_stmt><expr><name pos:line="3814" pos:column="7">res<pos:position pos:line="3814" pos:column="10"/></name><operator pos:line="3814" pos:column="10">++<pos:position pos:line="3814" pos:column="12"/></operator></expr>;<pos:position pos:line="3814" pos:column="13"/></expr_stmt>
    }<pos:position pos:line="3815" pos:column="6"/></block></else></if>
    <if pos:line="3816" pos:column="5">if<condition pos:line="3816" pos:column="7">( <expr><name pos:line="3816" pos:column="9">res<pos:position pos:line="3816" pos:column="12"/></name><operator pos:line="3816" pos:column="12">&gt;<pos:position pos:line="3816" pos:column="16"/></operator><literal type="number" pos:line="3816" pos:column="13">0<pos:position pos:line="3816" pos:column="14"/></literal></expr> )<pos:position pos:line="3816" pos:column="16"/></condition><then><block pos:line="3816" pos:column="16">{
      <expr_stmt><expr><name pos:line="3817" pos:column="7">pc<pos:position pos:line="3817" pos:column="9"/></name> <operator pos:line="3817" pos:column="10">=<pos:position pos:line="3817" pos:column="11"/></operator> <name><name pos:line="3817" pos:column="12">pOp<pos:position pos:line="3817" pos:column="15"/></name><operator pos:line="3817" pos:column="15">-&gt;<pos:position pos:line="3817" pos:column="20"/></operator><name pos:line="3817" pos:column="17">p2<pos:position pos:line="3817" pos:column="19"/></name></name> <operator pos:line="3817" pos:column="20">-<pos:position pos:line="3817" pos:column="21"/></operator> <literal type="number" pos:line="3817" pos:column="22">1<pos:position pos:line="3817" pos:column="23"/></literal></expr> ;<pos:position pos:line="3817" pos:column="25"/></expr_stmt>
    }<pos:position pos:line="3818" pos:column="6"/></block></then></if>
  }<pos:position pos:line="3819" pos:column="4"/></block></then></if>
  <break pos:line="3820" pos:column="3">break;<pos:position pos:line="3820" pos:column="9"/></break>
}<pos:position pos:line="3821" pos:column="2"/></block>

<comment type="block" pos:line="3823" pos:column="1">/* Opcode: Destroy P1 P2 P3 * *
**
** Delete an entire database table or index whose root page in the database
** file is given by P1.
**
** The table being destroyed is in the main database file if P3==0.  If
** P3==1 then the table to be clear is in the auxiliary database file
** that is used to store tables create using CREATE TEMPORARY TABLE.
**
** If AUTOVACUUM is enabled then it is possible that another root page
** might be moved into the newly deleted root page in order to keep all
** root pages contiguous at the beginning of the database.  The former
** value of the root page that moved - its value before the move occurred -
** is stored in register P2.  If no page 
** movement was required (because the table being dropped was already 
** the last one in the database) then a zero is stored in register P2.
** If AUTOVACUUM is disabled then a zero is stored in register P2.
**
** See also: Clear
*/</comment>
<case pos:line="3843" pos:column="1">case <expr><name pos:line="3843" pos:column="6">OP_Destroy<pos:position pos:line="3843" pos:column="16"/></name></expr>:<pos:position pos:line="3843" pos:column="17"/></case> <block pos:line="3843" pos:column="18">{     <comment type="block" pos:line="3843" pos:column="24">/* out2-prerelease */</comment>
  <decl_stmt><decl><type><name pos:line="3844" pos:column="3">int<pos:position pos:line="3844" pos:column="6"/></name></type> <name pos:line="3844" pos:column="7">iMoved<pos:position pos:line="3844" pos:column="13"/></name></decl>;<pos:position pos:line="3844" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="3845" pos:column="3">int<pos:position pos:line="3845" pos:column="6"/></name></type> <name pos:line="3845" pos:column="7">iCnt<pos:position pos:line="3845" pos:column="11"/></name></decl>;<pos:position pos:line="3845" pos:column="12"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="3846" pos:column="3">Vdbe<pos:position pos:line="3846" pos:column="7"/></name> <modifier pos:line="3846" pos:column="8">*<pos:position pos:line="3846" pos:column="9"/></modifier></type><name pos:line="3846" pos:column="9">pVdbe<pos:position pos:line="3846" pos:column="14"/></name></decl>;<pos:position pos:line="3846" pos:column="15"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="3847" pos:column="3">int<pos:position pos:line="3847" pos:column="6"/></name></type> <name pos:line="3847" pos:column="7">iDb<pos:position pos:line="3847" pos:column="10"/></name></decl>;<pos:position pos:line="3847" pos:column="11"/></decl_stmt>
<cpp:ifndef pos:line="3848" pos:column="1">#<cpp:directive pos:line="3848" pos:column="2">ifndef<pos:position pos:line="3848" pos:column="8"/></cpp:directive> <name pos:line="3848" pos:column="9">SQLITE_OMIT_VIRTUALTABLE<pos:position pos:line="3848" pos:column="33"/></name></cpp:ifndef>
  <expr_stmt><expr><name pos:line="3849" pos:column="3">iCnt<pos:position pos:line="3849" pos:column="7"/></name> <operator pos:line="3849" pos:column="8">=<pos:position pos:line="3849" pos:column="9"/></operator> <literal type="number" pos:line="3849" pos:column="10">0<pos:position pos:line="3849" pos:column="11"/></literal></expr>;<pos:position pos:line="3849" pos:column="12"/></expr_stmt>
  <for pos:line="3850" pos:column="3">for<control pos:line="3850" pos:column="6">(<init><expr><name pos:line="3850" pos:column="7">pVdbe<pos:position pos:line="3850" pos:column="12"/></name><operator pos:line="3850" pos:column="12">=<pos:position pos:line="3850" pos:column="13"/></operator><name><name pos:line="3850" pos:column="13">db<pos:position pos:line="3850" pos:column="15"/></name><operator pos:line="3850" pos:column="15">-&gt;<pos:position pos:line="3850" pos:column="20"/></operator><name pos:line="3850" pos:column="17">pVdbe<pos:position pos:line="3850" pos:column="22"/></name></name></expr>;<pos:position pos:line="3850" pos:column="23"/></init> <condition><expr><name pos:line="3850" pos:column="24">pVdbe<pos:position pos:line="3850" pos:column="29"/></name></expr>;<pos:position pos:line="3850" pos:column="30"/></condition> <incr><expr><name pos:line="3850" pos:column="31">pVdbe<pos:position pos:line="3850" pos:column="36"/></name> <operator pos:line="3850" pos:column="37">=<pos:position pos:line="3850" pos:column="38"/></operator> <name><name pos:line="3850" pos:column="39">pVdbe<pos:position pos:line="3850" pos:column="44"/></name><operator pos:line="3850" pos:column="44">-&gt;<pos:position pos:line="3850" pos:column="49"/></operator><name pos:line="3850" pos:column="46">pNext<pos:position pos:line="3850" pos:column="51"/></name></name></expr></incr>)<pos:position pos:line="3850" pos:column="52"/></control><block pos:line="3850" pos:column="52">{
    <if pos:line="3851" pos:column="5">if<condition pos:line="3851" pos:column="7">( <expr><name><name pos:line="3851" pos:column="9">pVdbe<pos:position pos:line="3851" pos:column="14"/></name><operator pos:line="3851" pos:column="14">-&gt;<pos:position pos:line="3851" pos:column="19"/></operator><name pos:line="3851" pos:column="16">magic<pos:position pos:line="3851" pos:column="21"/></name></name><operator pos:line="3851" pos:column="21">==<pos:position pos:line="3851" pos:column="23"/></operator><name pos:line="3851" pos:column="23">VDBE_MAGIC_RUN<pos:position pos:line="3851" pos:column="37"/></name> <operator pos:line="3851" pos:column="38">&amp;&amp;<pos:position pos:line="3851" pos:column="48"/></operator> <name><name pos:line="3851" pos:column="41">pVdbe<pos:position pos:line="3851" pos:column="46"/></name><operator pos:line="3851" pos:column="46">-&gt;<pos:position pos:line="3851" pos:column="51"/></operator><name pos:line="3851" pos:column="48">inVtabMethod<pos:position pos:line="3851" pos:column="60"/></name></name><operator pos:line="3851" pos:column="60">&lt;<pos:position pos:line="3851" pos:column="64"/></operator><literal type="number" pos:line="3851" pos:column="61">2<pos:position pos:line="3851" pos:column="62"/></literal> <operator pos:line="3851" pos:column="63">&amp;&amp;<pos:position pos:line="3851" pos:column="73"/></operator> <name><name pos:line="3851" pos:column="66">pVdbe<pos:position pos:line="3851" pos:column="71"/></name><operator pos:line="3851" pos:column="71">-&gt;<pos:position pos:line="3851" pos:column="76"/></operator><name pos:line="3851" pos:column="73">pc<pos:position pos:line="3851" pos:column="75"/></name></name><operator pos:line="3851" pos:column="75">&gt;=<pos:position pos:line="3851" pos:column="80"/></operator><literal type="number" pos:line="3851" pos:column="77">0<pos:position pos:line="3851" pos:column="78"/></literal></expr> )<pos:position pos:line="3851" pos:column="80"/></condition><then><block pos:line="3851" pos:column="80">{
      <expr_stmt><expr><name pos:line="3852" pos:column="7">iCnt<pos:position pos:line="3852" pos:column="11"/></name><operator pos:line="3852" pos:column="11">++<pos:position pos:line="3852" pos:column="13"/></operator></expr>;<pos:position pos:line="3852" pos:column="14"/></expr_stmt>
    }<pos:position pos:line="3853" pos:column="6"/></block></then></if>
  }<pos:position pos:line="3854" pos:column="4"/></block></for>
<cpp:else pos:line="3855" pos:column="1">#<cpp:directive pos:line="3855" pos:column="2">else<pos:position pos:line="3855" pos:column="6"/></cpp:directive></cpp:else>
  <expr_stmt><expr><name pos:line="3856" pos:column="3">iCnt<pos:position pos:line="3856" pos:column="7"/></name> <operator pos:line="3856" pos:column="8">=<pos:position pos:line="3856" pos:column="9"/></operator> <name><name pos:line="3856" pos:column="10">db<pos:position pos:line="3856" pos:column="12"/></name><operator pos:line="3856" pos:column="12">-&gt;<pos:position pos:line="3856" pos:column="17"/></operator><name pos:line="3856" pos:column="14">activeVdbeCnt<pos:position pos:line="3856" pos:column="27"/></name></name></expr>;<pos:position pos:line="3856" pos:column="28"/></expr_stmt>
<cpp:endif pos:line="3857" pos:column="1">#<cpp:directive pos:line="3857" pos:column="2">endif<pos:position pos:line="3857" pos:column="7"/></cpp:directive></cpp:endif>
  <if pos:line="3858" pos:column="3">if<condition pos:line="3858" pos:column="5">( <expr><name pos:line="3858" pos:column="7">iCnt<pos:position pos:line="3858" pos:column="11"/></name><operator pos:line="3858" pos:column="11">&gt;<pos:position pos:line="3858" pos:column="15"/></operator><literal type="number" pos:line="3858" pos:column="12">1<pos:position pos:line="3858" pos:column="13"/></literal></expr> )<pos:position pos:line="3858" pos:column="15"/></condition><then><block pos:line="3858" pos:column="15">{
    <expr_stmt><expr><name pos:line="3859" pos:column="5">rc<pos:position pos:line="3859" pos:column="7"/></name> <operator pos:line="3859" pos:column="8">=<pos:position pos:line="3859" pos:column="9"/></operator> <name pos:line="3859" pos:column="10">SQLITE_LOCKED<pos:position pos:line="3859" pos:column="23"/></name></expr>;<pos:position pos:line="3859" pos:column="24"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="3860" pos:column="5">p<pos:position pos:line="3860" pos:column="6"/></name><operator pos:line="3860" pos:column="6">-&gt;<pos:position pos:line="3860" pos:column="11"/></operator><name pos:line="3860" pos:column="8">errorAction<pos:position pos:line="3860" pos:column="19"/></name></name> <operator pos:line="3860" pos:column="20">=<pos:position pos:line="3860" pos:column="21"/></operator> <name pos:line="3860" pos:column="22">OE_Abort<pos:position pos:line="3860" pos:column="30"/></name></expr>;<pos:position pos:line="3860" pos:column="31"/></expr_stmt>
  }<pos:position pos:line="3861" pos:column="4"/></block></then><else pos:line="3861" pos:column="4">else<block pos:line="3861" pos:column="8">{
    <expr_stmt><expr><name pos:line="3862" pos:column="5">iDb<pos:position pos:line="3862" pos:column="8"/></name> <operator pos:line="3862" pos:column="9">=<pos:position pos:line="3862" pos:column="10"/></operator> <name><name pos:line="3862" pos:column="11">pOp<pos:position pos:line="3862" pos:column="14"/></name><operator pos:line="3862" pos:column="14">-&gt;<pos:position pos:line="3862" pos:column="19"/></operator><name pos:line="3862" pos:column="16">p3<pos:position pos:line="3862" pos:column="18"/></name></name></expr>;<pos:position pos:line="3862" pos:column="19"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="3863" pos:column="5">assert<pos:position pos:line="3863" pos:column="11"/></name><argument_list pos:line="3863" pos:column="11">( <argument><expr><name pos:line="3863" pos:column="13">iCnt<pos:position pos:line="3863" pos:column="17"/></name><operator pos:line="3863" pos:column="17">==<pos:position pos:line="3863" pos:column="19"/></operator><literal type="number" pos:line="3863" pos:column="19">1<pos:position pos:line="3863" pos:column="20"/></literal></expr></argument> )<pos:position pos:line="3863" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="3863" pos:column="23"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="3864" pos:column="5">assert<pos:position pos:line="3864" pos:column="11"/></name><argument_list pos:line="3864" pos:column="11">( <argument><expr><operator pos:line="3864" pos:column="13">(<pos:position pos:line="3864" pos:column="14"/></operator><name><name pos:line="3864" pos:column="14">p<pos:position pos:line="3864" pos:column="15"/></name><operator pos:line="3864" pos:column="15">-&gt;<pos:position pos:line="3864" pos:column="20"/></operator><name pos:line="3864" pos:column="17">btreeMask<pos:position pos:line="3864" pos:column="26"/></name></name> <operator pos:line="3864" pos:column="27">&amp;<pos:position pos:line="3864" pos:column="32"/></operator> <operator pos:line="3864" pos:column="29">(<pos:position pos:line="3864" pos:column="30"/></operator><literal type="number" pos:line="3864" pos:column="30">1<pos:position pos:line="3864" pos:column="31"/></literal><operator pos:line="3864" pos:column="31">&lt;&lt;<pos:position pos:line="3864" pos:column="39"/></operator><name pos:line="3864" pos:column="33">iDb<pos:position pos:line="3864" pos:column="36"/></name><operator pos:line="3864" pos:column="36">)<pos:position pos:line="3864" pos:column="37"/></operator><operator pos:line="3864" pos:column="37">)<pos:position pos:line="3864" pos:column="38"/></operator><operator pos:line="3864" pos:column="38">!=<pos:position pos:line="3864" pos:column="40"/></operator><literal type="number" pos:line="3864" pos:column="40">0<pos:position pos:line="3864" pos:column="41"/></literal></expr></argument> )<pos:position pos:line="3864" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="3864" pos:column="44"/></expr_stmt>
    <expr_stmt><expr><name pos:line="3865" pos:column="5">rc<pos:position pos:line="3865" pos:column="7"/></name> <operator pos:line="3865" pos:column="8">=<pos:position pos:line="3865" pos:column="9"/></operator> <call><name pos:line="3865" pos:column="10">sqlite3BtreeDropTable<pos:position pos:line="3865" pos:column="31"/></name><argument_list pos:line="3865" pos:column="31">(<argument><expr><name><name pos:line="3865" pos:column="32">db<pos:position pos:line="3865" pos:column="34"/></name><operator pos:line="3865" pos:column="34">-&gt;<pos:position pos:line="3865" pos:column="39"/></operator><name pos:line="3865" pos:column="36">aDb<pos:position pos:line="3865" pos:column="39"/></name><index pos:line="3865" pos:column="39">[<expr><name pos:line="3865" pos:column="40">iDb<pos:position pos:line="3865" pos:column="43"/></name></expr>]<pos:position pos:line="3865" pos:column="44"/></index></name><operator pos:line="3865" pos:column="44">.<pos:position pos:line="3865" pos:column="45"/></operator><name pos:line="3865" pos:column="45">pBt<pos:position pos:line="3865" pos:column="48"/></name></expr></argument>, <argument><expr><name><name pos:line="3865" pos:column="50">pOp<pos:position pos:line="3865" pos:column="53"/></name><operator pos:line="3865" pos:column="53">-&gt;<pos:position pos:line="3865" pos:column="58"/></operator><name pos:line="3865" pos:column="55">p1<pos:position pos:line="3865" pos:column="57"/></name></name></expr></argument>, <argument><expr><operator pos:line="3865" pos:column="59">&amp;<pos:position pos:line="3865" pos:column="64"/></operator><name pos:line="3865" pos:column="60">iMoved<pos:position pos:line="3865" pos:column="66"/></name></expr></argument>)<pos:position pos:line="3865" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="3865" pos:column="68"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="3866" pos:column="5">MemSetTypeFlag<pos:position pos:line="3866" pos:column="19"/></name><argument_list pos:line="3866" pos:column="19">(<argument><expr><name pos:line="3866" pos:column="20">pOut<pos:position pos:line="3866" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="3866" pos:column="26">MEM_Int<pos:position pos:line="3866" pos:column="33"/></name></expr></argument>)<pos:position pos:line="3866" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="3866" pos:column="35"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="3867" pos:column="5">pOut<pos:position pos:line="3867" pos:column="9"/></name><operator pos:line="3867" pos:column="9">-&gt;<pos:position pos:line="3867" pos:column="14"/></operator><name pos:line="3867" pos:column="11">u<pos:position pos:line="3867" pos:column="12"/></name><operator pos:line="3867" pos:column="12">.<pos:position pos:line="3867" pos:column="13"/></operator><name pos:line="3867" pos:column="13">i<pos:position pos:line="3867" pos:column="14"/></name></name> <operator pos:line="3867" pos:column="15">=<pos:position pos:line="3867" pos:column="16"/></operator> <name pos:line="3867" pos:column="17">iMoved<pos:position pos:line="3867" pos:column="23"/></name></expr>;<pos:position pos:line="3867" pos:column="24"/></expr_stmt>
<cpp:ifndef pos:line="3868" pos:column="1">#<cpp:directive pos:line="3868" pos:column="2">ifndef<pos:position pos:line="3868" pos:column="8"/></cpp:directive> <name pos:line="3868" pos:column="9">SQLITE_OMIT_AUTOVACUUM<pos:position pos:line="3868" pos:column="31"/></name></cpp:ifndef>
    <if pos:line="3869" pos:column="5">if<condition pos:line="3869" pos:column="7">( <expr><name pos:line="3869" pos:column="9">rc<pos:position pos:line="3869" pos:column="11"/></name><operator pos:line="3869" pos:column="11">==<pos:position pos:line="3869" pos:column="13"/></operator><name pos:line="3869" pos:column="13">SQLITE_OK<pos:position pos:line="3869" pos:column="22"/></name> <operator pos:line="3869" pos:column="23">&amp;&amp;<pos:position pos:line="3869" pos:column="33"/></operator> <name pos:line="3869" pos:column="26">iMoved<pos:position pos:line="3869" pos:column="32"/></name><operator pos:line="3869" pos:column="32">!=<pos:position pos:line="3869" pos:column="34"/></operator><literal type="number" pos:line="3869" pos:column="34">0<pos:position pos:line="3869" pos:column="35"/></literal></expr> )<pos:position pos:line="3869" pos:column="37"/></condition><then><block pos:line="3869" pos:column="37">{
      <expr_stmt><expr><call><name pos:line="3870" pos:column="7">sqlite3RootPageMoved<pos:position pos:line="3870" pos:column="27"/></name><argument_list pos:line="3870" pos:column="27">(<argument><expr><operator pos:line="3870" pos:column="28">&amp;<pos:position pos:line="3870" pos:column="33"/></operator><name><name pos:line="3870" pos:column="29">db<pos:position pos:line="3870" pos:column="31"/></name><operator pos:line="3870" pos:column="31">-&gt;<pos:position pos:line="3870" pos:column="36"/></operator><name pos:line="3870" pos:column="33">aDb<pos:position pos:line="3870" pos:column="36"/></name><index pos:line="3870" pos:column="36">[<expr><name pos:line="3870" pos:column="37">iDb<pos:position pos:line="3870" pos:column="40"/></name></expr>]<pos:position pos:line="3870" pos:column="41"/></index></name></expr></argument>, <argument><expr><name pos:line="3870" pos:column="43">iMoved<pos:position pos:line="3870" pos:column="49"/></name></expr></argument>, <argument><expr><name><name pos:line="3870" pos:column="51">pOp<pos:position pos:line="3870" pos:column="54"/></name><operator pos:line="3870" pos:column="54">-&gt;<pos:position pos:line="3870" pos:column="59"/></operator><name pos:line="3870" pos:column="56">p1<pos:position pos:line="3870" pos:column="58"/></name></name></expr></argument>)<pos:position pos:line="3870" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="3870" pos:column="60"/></expr_stmt>
    }<pos:position pos:line="3871" pos:column="6"/></block></then></if>
<cpp:endif pos:line="3872" pos:column="1">#<cpp:directive pos:line="3872" pos:column="2">endif<pos:position pos:line="3872" pos:column="7"/></cpp:directive></cpp:endif>
  }<pos:position pos:line="3873" pos:column="4"/></block></else></if>
  <break pos:line="3874" pos:column="3">break;<pos:position pos:line="3874" pos:column="9"/></break>
}<pos:position pos:line="3875" pos:column="2"/></block>

<comment type="block" pos:line="3877" pos:column="1">/* Opcode: Clear P1 P2 P3
**
** Delete all contents of the database table or index whose root page
** in the database file is given by P1.  But, unlike Destroy, do not
** remove the table or index from the database file.
**
** The table being clear is in the main database file if P2==0.  If
** P2==1 then the table to be clear is in the auxiliary database file
** that is used to store tables create using CREATE TEMPORARY TABLE.
**
** If the P3 value is non-zero, then the table referred to must be an
** intkey table (an SQL table, not an index). In this case the row change 
** count is incremented by the number of rows in the table being cleared. 
** If P3 is greater than zero, then the value stored in register P3 is
** also incremented by the number of rows in the table being cleared.
**
** See also: Destroy
*/</comment>
<case pos:line="3895" pos:column="1">case <expr><name pos:line="3895" pos:column="6">OP_Clear<pos:position pos:line="3895" pos:column="14"/></name></expr>:<pos:position pos:line="3895" pos:column="15"/></case> <block pos:line="3895" pos:column="16">{
  <decl_stmt><decl><type><name pos:line="3896" pos:column="3">int<pos:position pos:line="3896" pos:column="6"/></name></type> <name pos:line="3896" pos:column="7">nChange<pos:position pos:line="3896" pos:column="14"/></name></decl>;<pos:position pos:line="3896" pos:column="15"/></decl_stmt>
 
  <expr_stmt><expr><name pos:line="3898" pos:column="3">nChange<pos:position pos:line="3898" pos:column="10"/></name> <operator pos:line="3898" pos:column="11">=<pos:position pos:line="3898" pos:column="12"/></operator> <literal type="number" pos:line="3898" pos:column="13">0<pos:position pos:line="3898" pos:column="14"/></literal></expr>;<pos:position pos:line="3898" pos:column="15"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="3899" pos:column="3">assert<pos:position pos:line="3899" pos:column="9"/></name><argument_list pos:line="3899" pos:column="9">( <argument><expr><operator pos:line="3899" pos:column="11">(<pos:position pos:line="3899" pos:column="12"/></operator><name><name pos:line="3899" pos:column="12">p<pos:position pos:line="3899" pos:column="13"/></name><operator pos:line="3899" pos:column="13">-&gt;<pos:position pos:line="3899" pos:column="18"/></operator><name pos:line="3899" pos:column="15">btreeMask<pos:position pos:line="3899" pos:column="24"/></name></name> <operator pos:line="3899" pos:column="25">&amp;<pos:position pos:line="3899" pos:column="30"/></operator> <operator pos:line="3899" pos:column="27">(<pos:position pos:line="3899" pos:column="28"/></operator><literal type="number" pos:line="3899" pos:column="28">1<pos:position pos:line="3899" pos:column="29"/></literal><operator pos:line="3899" pos:column="29">&lt;&lt;<pos:position pos:line="3899" pos:column="37"/></operator><name><name pos:line="3899" pos:column="31">pOp<pos:position pos:line="3899" pos:column="34"/></name><operator pos:line="3899" pos:column="34">-&gt;<pos:position pos:line="3899" pos:column="39"/></operator><name pos:line="3899" pos:column="36">p2<pos:position pos:line="3899" pos:column="38"/></name></name><operator pos:line="3899" pos:column="38">)<pos:position pos:line="3899" pos:column="39"/></operator><operator pos:line="3899" pos:column="39">)<pos:position pos:line="3899" pos:column="40"/></operator><operator pos:line="3899" pos:column="40">!=<pos:position pos:line="3899" pos:column="42"/></operator><literal type="number" pos:line="3899" pos:column="42">0<pos:position pos:line="3899" pos:column="43"/></literal></expr></argument> )<pos:position pos:line="3899" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="3899" pos:column="46"/></expr_stmt>
  <expr_stmt><expr><name pos:line="3900" pos:column="3">rc<pos:position pos:line="3900" pos:column="5"/></name> <operator pos:line="3900" pos:column="6">=<pos:position pos:line="3900" pos:column="7"/></operator> <call><name pos:line="3900" pos:column="8">sqlite3BtreeClearTable<pos:position pos:line="3900" pos:column="30"/></name><argument_list pos:line="3900" pos:column="30">(
      <argument><expr><name><name pos:line="3901" pos:column="7">db<pos:position pos:line="3901" pos:column="9"/></name><operator pos:line="3901" pos:column="9">-&gt;<pos:position pos:line="3901" pos:column="14"/></operator><name pos:line="3901" pos:column="11">aDb<pos:position pos:line="3901" pos:column="14"/></name><index pos:line="3901" pos:column="14">[<expr><name><name pos:line="3901" pos:column="15">pOp<pos:position pos:line="3901" pos:column="18"/></name><operator pos:line="3901" pos:column="18">-&gt;<pos:position pos:line="3901" pos:column="23"/></operator><name pos:line="3901" pos:column="20">p2<pos:position pos:line="3901" pos:column="22"/></name></name></expr>]<pos:position pos:line="3901" pos:column="23"/></index></name><operator pos:line="3901" pos:column="23">.<pos:position pos:line="3901" pos:column="24"/></operator><name pos:line="3901" pos:column="24">pBt<pos:position pos:line="3901" pos:column="27"/></name></expr></argument>, <argument><expr><name><name pos:line="3901" pos:column="29">pOp<pos:position pos:line="3901" pos:column="32"/></name><operator pos:line="3901" pos:column="32">-&gt;<pos:position pos:line="3901" pos:column="37"/></operator><name pos:line="3901" pos:column="34">p1<pos:position pos:line="3901" pos:column="36"/></name></name></expr></argument>, <argument><expr><operator pos:line="3901" pos:column="38">(<pos:position pos:line="3901" pos:column="39"/></operator><ternary><condition><expr><name><name pos:line="3901" pos:column="39">pOp<pos:position pos:line="3901" pos:column="42"/></name><operator pos:line="3901" pos:column="42">-&gt;<pos:position pos:line="3901" pos:column="47"/></operator><name pos:line="3901" pos:column="44">p3<pos:position pos:line="3901" pos:column="46"/></name></name></expr> ?<pos:position pos:line="3901" pos:column="48"/></condition><then pos:line="3901" pos:column="48"> <expr><operator pos:line="3901" pos:column="49">&amp;<pos:position pos:line="3901" pos:column="54"/></operator><name pos:line="3901" pos:column="50">nChange<pos:position pos:line="3901" pos:column="57"/></name></expr> <pos:position pos:line="3901" pos:column="58"/></then><else pos:line="3901" pos:column="58">: <expr><literal type="number" pos:line="3901" pos:column="60">0<pos:position pos:line="3901" pos:column="61"/></literal></expr></else></ternary><operator pos:line="3901" pos:column="61">)<pos:position pos:line="3901" pos:column="62"/></operator></expr></argument>
  )<pos:position pos:line="3902" pos:column="4"/></argument_list></call></expr>;<pos:position pos:line="3902" pos:column="5"/></expr_stmt>
  <if pos:line="3903" pos:column="3">if<condition pos:line="3903" pos:column="5">( <expr><name><name pos:line="3903" pos:column="7">pOp<pos:position pos:line="3903" pos:column="10"/></name><operator pos:line="3903" pos:column="10">-&gt;<pos:position pos:line="3903" pos:column="15"/></operator><name pos:line="3903" pos:column="12">p3<pos:position pos:line="3903" pos:column="14"/></name></name></expr> )<pos:position pos:line="3903" pos:column="16"/></condition><then><block pos:line="3903" pos:column="16">{
    <expr_stmt><expr><name><name pos:line="3904" pos:column="5">p<pos:position pos:line="3904" pos:column="6"/></name><operator pos:line="3904" pos:column="6">-&gt;<pos:position pos:line="3904" pos:column="11"/></operator><name pos:line="3904" pos:column="8">nChange<pos:position pos:line="3904" pos:column="15"/></name></name> <operator pos:line="3904" pos:column="16">+=<pos:position pos:line="3904" pos:column="18"/></operator> <name pos:line="3904" pos:column="19">nChange<pos:position pos:line="3904" pos:column="26"/></name></expr>;<pos:position pos:line="3904" pos:column="27"/></expr_stmt>
    <if pos:line="3905" pos:column="5">if<condition pos:line="3905" pos:column="7">( <expr><name><name pos:line="3905" pos:column="9">pOp<pos:position pos:line="3905" pos:column="12"/></name><operator pos:line="3905" pos:column="12">-&gt;<pos:position pos:line="3905" pos:column="17"/></operator><name pos:line="3905" pos:column="14">p3<pos:position pos:line="3905" pos:column="16"/></name></name><operator pos:line="3905" pos:column="16">&gt;<pos:position pos:line="3905" pos:column="20"/></operator><literal type="number" pos:line="3905" pos:column="17">0<pos:position pos:line="3905" pos:column="18"/></literal></expr> )<pos:position pos:line="3905" pos:column="20"/></condition><then><block pos:line="3905" pos:column="20">{
      <expr_stmt><expr><name><name pos:line="3906" pos:column="7">p<pos:position pos:line="3906" pos:column="8"/></name><operator pos:line="3906" pos:column="8">-&gt;<pos:position pos:line="3906" pos:column="13"/></operator><name pos:line="3906" pos:column="10">aMem<pos:position pos:line="3906" pos:column="14"/></name><index pos:line="3906" pos:column="14">[<expr><name><name pos:line="3906" pos:column="15">pOp<pos:position pos:line="3906" pos:column="18"/></name><operator pos:line="3906" pos:column="18">-&gt;<pos:position pos:line="3906" pos:column="23"/></operator><name pos:line="3906" pos:column="20">p3<pos:position pos:line="3906" pos:column="22"/></name></name></expr>]<pos:position pos:line="3906" pos:column="23"/></index></name><operator pos:line="3906" pos:column="23">.<pos:position pos:line="3906" pos:column="24"/></operator><name><name pos:line="3906" pos:column="24">u<pos:position pos:line="3906" pos:column="25"/></name><operator pos:line="3906" pos:column="25">.<pos:position pos:line="3906" pos:column="26"/></operator><name pos:line="3906" pos:column="26">i<pos:position pos:line="3906" pos:column="27"/></name></name> <operator pos:line="3906" pos:column="28">+=<pos:position pos:line="3906" pos:column="30"/></operator> <name pos:line="3906" pos:column="31">nChange<pos:position pos:line="3906" pos:column="38"/></name></expr>;<pos:position pos:line="3906" pos:column="39"/></expr_stmt>
    }<pos:position pos:line="3907" pos:column="6"/></block></then></if>
  }<pos:position pos:line="3908" pos:column="4"/></block></then></if>
  <break pos:line="3909" pos:column="3">break;<pos:position pos:line="3909" pos:column="9"/></break>
}<pos:position pos:line="3910" pos:column="2"/></block>

<comment type="block" pos:line="3912" pos:column="1">/* Opcode: CreateTable P1 P2 * * *
**
** Allocate a new table in the main database file if P1==0 or in the
** auxiliary database file if P1==1 or in an attached database if
** P1&gt;1.  Write the root page number of the new table into
** register P2
**
** The difference between a table and an index is this:  A table must
** have a 4-byte integer key and can have arbitrary data.  An index
** has an arbitrary key but no data.
**
** See also: CreateIndex
*/</comment>
<comment type="block" pos:line="3925" pos:column="1">/* Opcode: CreateIndex P1 P2 * * *
**
** Allocate a new index in the main database file if P1==0 or in the
** auxiliary database file if P1==1 or in an attached database if
** P1&gt;1.  Write the root page number of the new table into
** register P2.
**
** See documentation on OP_CreateTable for additional information.
*/</comment>
<case pos:line="3934" pos:column="1">case <expr><name pos:line="3934" pos:column="6">OP_CreateIndex<pos:position pos:line="3934" pos:column="20"/></name></expr>:<pos:position pos:line="3934" pos:column="21"/></case>            <comment type="block" pos:line="3934" pos:column="33">/* out2-prerelease */</comment>
<case pos:line="3935" pos:column="1">case <expr><name pos:line="3935" pos:column="6">OP_CreateTable<pos:position pos:line="3935" pos:column="20"/></name></expr>:<pos:position pos:line="3935" pos:column="21"/></case> <block pos:line="3935" pos:column="22">{          <comment type="block" pos:line="3935" pos:column="33">/* out2-prerelease */</comment>
  <decl_stmt><decl><type><name pos:line="3936" pos:column="3">int<pos:position pos:line="3936" pos:column="6"/></name></type> <name pos:line="3936" pos:column="7">pgno<pos:position pos:line="3936" pos:column="11"/></name></decl>;<pos:position pos:line="3936" pos:column="12"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="3937" pos:column="3">int<pos:position pos:line="3937" pos:column="6"/></name></type> <name pos:line="3937" pos:column="7">flags<pos:position pos:line="3937" pos:column="12"/></name></decl>;<pos:position pos:line="3937" pos:column="13"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="3938" pos:column="3">Db<pos:position pos:line="3938" pos:column="5"/></name> <modifier pos:line="3938" pos:column="6">*<pos:position pos:line="3938" pos:column="7"/></modifier></type><name pos:line="3938" pos:column="7">pDb<pos:position pos:line="3938" pos:column="10"/></name></decl>;<pos:position pos:line="3938" pos:column="11"/></decl_stmt>

  <expr_stmt><expr><name pos:line="3940" pos:column="3">pgno<pos:position pos:line="3940" pos:column="7"/></name> <operator pos:line="3940" pos:column="8">=<pos:position pos:line="3940" pos:column="9"/></operator> <literal type="number" pos:line="3940" pos:column="10">0<pos:position pos:line="3940" pos:column="11"/></literal></expr>;<pos:position pos:line="3940" pos:column="12"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="3941" pos:column="3">assert<pos:position pos:line="3941" pos:column="9"/></name><argument_list pos:line="3941" pos:column="9">( <argument><expr><name><name pos:line="3941" pos:column="11">pOp<pos:position pos:line="3941" pos:column="14"/></name><operator pos:line="3941" pos:column="14">-&gt;<pos:position pos:line="3941" pos:column="19"/></operator><name pos:line="3941" pos:column="16">p1<pos:position pos:line="3941" pos:column="18"/></name></name><operator pos:line="3941" pos:column="18">&gt;=<pos:position pos:line="3941" pos:column="23"/></operator><literal type="number" pos:line="3941" pos:column="20">0<pos:position pos:line="3941" pos:column="21"/></literal> <operator pos:line="3941" pos:column="22">&amp;&amp;<pos:position pos:line="3941" pos:column="32"/></operator> <name><name pos:line="3941" pos:column="25">pOp<pos:position pos:line="3941" pos:column="28"/></name><operator pos:line="3941" pos:column="28">-&gt;<pos:position pos:line="3941" pos:column="33"/></operator><name pos:line="3941" pos:column="30">p1<pos:position pos:line="3941" pos:column="32"/></name></name><operator pos:line="3941" pos:column="32">&lt;<pos:position pos:line="3941" pos:column="36"/></operator><name><name pos:line="3941" pos:column="33">db<pos:position pos:line="3941" pos:column="35"/></name><operator pos:line="3941" pos:column="35">-&gt;<pos:position pos:line="3941" pos:column="40"/></operator><name pos:line="3941" pos:column="37">nDb<pos:position pos:line="3941" pos:column="40"/></name></name></expr></argument> )<pos:position pos:line="3941" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="3941" pos:column="43"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="3942" pos:column="3">assert<pos:position pos:line="3942" pos:column="9"/></name><argument_list pos:line="3942" pos:column="9">( <argument><expr><operator pos:line="3942" pos:column="11">(<pos:position pos:line="3942" pos:column="12"/></operator><name><name pos:line="3942" pos:column="12">p<pos:position pos:line="3942" pos:column="13"/></name><operator pos:line="3942" pos:column="13">-&gt;<pos:position pos:line="3942" pos:column="18"/></operator><name pos:line="3942" pos:column="15">btreeMask<pos:position pos:line="3942" pos:column="24"/></name></name> <operator pos:line="3942" pos:column="25">&amp;<pos:position pos:line="3942" pos:column="30"/></operator> <operator pos:line="3942" pos:column="27">(<pos:position pos:line="3942" pos:column="28"/></operator><literal type="number" pos:line="3942" pos:column="28">1<pos:position pos:line="3942" pos:column="29"/></literal><operator pos:line="3942" pos:column="29">&lt;&lt;<pos:position pos:line="3942" pos:column="37"/></operator><name><name pos:line="3942" pos:column="31">pOp<pos:position pos:line="3942" pos:column="34"/></name><operator pos:line="3942" pos:column="34">-&gt;<pos:position pos:line="3942" pos:column="39"/></operator><name pos:line="3942" pos:column="36">p1<pos:position pos:line="3942" pos:column="38"/></name></name><operator pos:line="3942" pos:column="38">)<pos:position pos:line="3942" pos:column="39"/></operator><operator pos:line="3942" pos:column="39">)<pos:position pos:line="3942" pos:column="40"/></operator><operator pos:line="3942" pos:column="40">!=<pos:position pos:line="3942" pos:column="42"/></operator><literal type="number" pos:line="3942" pos:column="42">0<pos:position pos:line="3942" pos:column="43"/></literal></expr></argument> )<pos:position pos:line="3942" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="3942" pos:column="46"/></expr_stmt>
  <expr_stmt><expr><name pos:line="3943" pos:column="3">pDb<pos:position pos:line="3943" pos:column="6"/></name> <operator pos:line="3943" pos:column="7">=<pos:position pos:line="3943" pos:column="8"/></operator> <operator pos:line="3943" pos:column="9">&amp;<pos:position pos:line="3943" pos:column="14"/></operator><name><name pos:line="3943" pos:column="10">db<pos:position pos:line="3943" pos:column="12"/></name><operator pos:line="3943" pos:column="12">-&gt;<pos:position pos:line="3943" pos:column="17"/></operator><name pos:line="3943" pos:column="14">aDb<pos:position pos:line="3943" pos:column="17"/></name><index pos:line="3943" pos:column="17">[<expr><name><name pos:line="3943" pos:column="18">pOp<pos:position pos:line="3943" pos:column="21"/></name><operator pos:line="3943" pos:column="21">-&gt;<pos:position pos:line="3943" pos:column="26"/></operator><name pos:line="3943" pos:column="23">p1<pos:position pos:line="3943" pos:column="25"/></name></name></expr>]<pos:position pos:line="3943" pos:column="26"/></index></name></expr>;<pos:position pos:line="3943" pos:column="27"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="3944" pos:column="3">assert<pos:position pos:line="3944" pos:column="9"/></name><argument_list pos:line="3944" pos:column="9">( <argument><expr><name><name pos:line="3944" pos:column="11">pDb<pos:position pos:line="3944" pos:column="14"/></name><operator pos:line="3944" pos:column="14">-&gt;<pos:position pos:line="3944" pos:column="19"/></operator><name pos:line="3944" pos:column="16">pBt<pos:position pos:line="3944" pos:column="19"/></name></name><operator pos:line="3944" pos:column="19">!=<pos:position pos:line="3944" pos:column="21"/></operator><literal type="number" pos:line="3944" pos:column="21">0<pos:position pos:line="3944" pos:column="22"/></literal></expr></argument> )<pos:position pos:line="3944" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="3944" pos:column="25"/></expr_stmt>
  <if pos:line="3945" pos:column="3">if<condition pos:line="3945" pos:column="5">( <expr><name><name pos:line="3945" pos:column="7">pOp<pos:position pos:line="3945" pos:column="10"/></name><operator pos:line="3945" pos:column="10">-&gt;<pos:position pos:line="3945" pos:column="15"/></operator><name pos:line="3945" pos:column="12">opcode<pos:position pos:line="3945" pos:column="18"/></name></name><operator pos:line="3945" pos:column="18">==<pos:position pos:line="3945" pos:column="20"/></operator><name pos:line="3945" pos:column="20">OP_CreateTable<pos:position pos:line="3945" pos:column="34"/></name></expr> )<pos:position pos:line="3945" pos:column="36"/></condition><then><block pos:line="3945" pos:column="36">{
    <comment type="block" pos:line="3946" pos:column="5">/* flags = BTREE_INTKEY; */</comment>
    <expr_stmt><expr><name pos:line="3947" pos:column="5">flags<pos:position pos:line="3947" pos:column="10"/></name> <operator pos:line="3947" pos:column="11">=<pos:position pos:line="3947" pos:column="12"/></operator> <name pos:line="3947" pos:column="13">BTREE_LEAFDATA<pos:position pos:line="3947" pos:column="27"/></name><operator pos:line="3947" pos:column="27">|<pos:position pos:line="3947" pos:column="28"/></operator><name pos:line="3947" pos:column="28">BTREE_INTKEY<pos:position pos:line="3947" pos:column="40"/></name></expr>;<pos:position pos:line="3947" pos:column="41"/></expr_stmt>
  }<pos:position pos:line="3948" pos:column="4"/></block></then><else pos:line="3948" pos:column="4">else<block pos:line="3948" pos:column="8">{
    <expr_stmt><expr><name pos:line="3949" pos:column="5">flags<pos:position pos:line="3949" pos:column="10"/></name> <operator pos:line="3949" pos:column="11">=<pos:position pos:line="3949" pos:column="12"/></operator> <name pos:line="3949" pos:column="13">BTREE_ZERODATA<pos:position pos:line="3949" pos:column="27"/></name></expr>;<pos:position pos:line="3949" pos:column="28"/></expr_stmt>
  }<pos:position pos:line="3950" pos:column="4"/></block></else></if>
  <expr_stmt><expr><name pos:line="3951" pos:column="3">rc<pos:position pos:line="3951" pos:column="5"/></name> <operator pos:line="3951" pos:column="6">=<pos:position pos:line="3951" pos:column="7"/></operator> <call><name pos:line="3951" pos:column="8">sqlite3BtreeCreateTable<pos:position pos:line="3951" pos:column="31"/></name><argument_list pos:line="3951" pos:column="31">(<argument><expr><name><name pos:line="3951" pos:column="32">pDb<pos:position pos:line="3951" pos:column="35"/></name><operator pos:line="3951" pos:column="35">-&gt;<pos:position pos:line="3951" pos:column="40"/></operator><name pos:line="3951" pos:column="37">pBt<pos:position pos:line="3951" pos:column="40"/></name></name></expr></argument>, <argument><expr><operator pos:line="3951" pos:column="42">&amp;<pos:position pos:line="3951" pos:column="47"/></operator><name pos:line="3951" pos:column="43">pgno<pos:position pos:line="3951" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="3951" pos:column="49">flags<pos:position pos:line="3951" pos:column="54"/></name></expr></argument>)<pos:position pos:line="3951" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="3951" pos:column="56"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="3952" pos:column="3">pOut<pos:position pos:line="3952" pos:column="7"/></name><operator pos:line="3952" pos:column="7">-&gt;<pos:position pos:line="3952" pos:column="12"/></operator><name pos:line="3952" pos:column="9">u<pos:position pos:line="3952" pos:column="10"/></name><operator pos:line="3952" pos:column="10">.<pos:position pos:line="3952" pos:column="11"/></operator><name pos:line="3952" pos:column="11">i<pos:position pos:line="3952" pos:column="12"/></name></name> <operator pos:line="3952" pos:column="13">=<pos:position pos:line="3952" pos:column="14"/></operator> <name pos:line="3952" pos:column="15">pgno<pos:position pos:line="3952" pos:column="19"/></name></expr>;<pos:position pos:line="3952" pos:column="20"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="3953" pos:column="3">MemSetTypeFlag<pos:position pos:line="3953" pos:column="17"/></name><argument_list pos:line="3953" pos:column="17">(<argument><expr><name pos:line="3953" pos:column="18">pOut<pos:position pos:line="3953" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="3953" pos:column="24">MEM_Int<pos:position pos:line="3953" pos:column="31"/></name></expr></argument>)<pos:position pos:line="3953" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="3953" pos:column="33"/></expr_stmt>
  <break pos:line="3954" pos:column="3">break;<pos:position pos:line="3954" pos:column="9"/></break>
}<pos:position pos:line="3955" pos:column="2"/></block>

<comment type="block" pos:line="3957" pos:column="1">/* Opcode: ParseSchema P1 P2 * P4 *
**
** Read and parse all entries from the SQLITE_MASTER table of database P1
** that match the WHERE clause P4.  P2 is the "force" flag.   Always do
** the parsing if P2 is true.  If P2 is false, then this routine is a
** no-op if the schema is not currently loaded.  In other words, if P2
** is false, the SQLITE_MASTER table is only parsed if the rest of the
** schema is already loaded into the symbol table.
**
** This opcode invokes the parser to create a new virtual machine,
** then runs the new virtual machine.  It is thus a re-entrant opcode.
*/</comment>
<case pos:line="3969" pos:column="1">case <expr><name pos:line="3969" pos:column="6">OP_ParseSchema<pos:position pos:line="3969" pos:column="20"/></name></expr>:<pos:position pos:line="3969" pos:column="21"/></case> <block pos:line="3969" pos:column="22">{
  <decl_stmt><decl><type><name pos:line="3970" pos:column="3">int<pos:position pos:line="3970" pos:column="6"/></name></type> <name pos:line="3970" pos:column="7">iDb<pos:position pos:line="3970" pos:column="10"/></name></decl>;<pos:position pos:line="3970" pos:column="11"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="3971" pos:column="3">const<pos:position pos:line="3971" pos:column="8"/></specifier> <name pos:line="3971" pos:column="9">char<pos:position pos:line="3971" pos:column="13"/></name> <modifier pos:line="3971" pos:column="14">*<pos:position pos:line="3971" pos:column="15"/></modifier></type><name pos:line="3971" pos:column="15">zMaster<pos:position pos:line="3971" pos:column="22"/></name></decl>;<pos:position pos:line="3971" pos:column="23"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="3972" pos:column="3">char<pos:position pos:line="3972" pos:column="7"/></name> <modifier pos:line="3972" pos:column="8">*<pos:position pos:line="3972" pos:column="9"/></modifier></type><name pos:line="3972" pos:column="9">zSql<pos:position pos:line="3972" pos:column="13"/></name></decl>;<pos:position pos:line="3972" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="3973" pos:column="3">InitData<pos:position pos:line="3973" pos:column="11"/></name></type> <name pos:line="3973" pos:column="12">initData<pos:position pos:line="3973" pos:column="20"/></name></decl>;<pos:position pos:line="3973" pos:column="21"/></decl_stmt>

  <expr_stmt><expr><name pos:line="3975" pos:column="3">iDb<pos:position pos:line="3975" pos:column="6"/></name> <operator pos:line="3975" pos:column="7">=<pos:position pos:line="3975" pos:column="8"/></operator> <name><name pos:line="3975" pos:column="9">pOp<pos:position pos:line="3975" pos:column="12"/></name><operator pos:line="3975" pos:column="12">-&gt;<pos:position pos:line="3975" pos:column="17"/></operator><name pos:line="3975" pos:column="14">p1<pos:position pos:line="3975" pos:column="16"/></name></name></expr>;<pos:position pos:line="3975" pos:column="17"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="3976" pos:column="3">assert<pos:position pos:line="3976" pos:column="9"/></name><argument_list pos:line="3976" pos:column="9">( <argument><expr><name pos:line="3976" pos:column="11">iDb<pos:position pos:line="3976" pos:column="14"/></name><operator pos:line="3976" pos:column="14">&gt;=<pos:position pos:line="3976" pos:column="19"/></operator><literal type="number" pos:line="3976" pos:column="16">0<pos:position pos:line="3976" pos:column="17"/></literal> <operator pos:line="3976" pos:column="18">&amp;&amp;<pos:position pos:line="3976" pos:column="28"/></operator> <name pos:line="3976" pos:column="21">iDb<pos:position pos:line="3976" pos:column="24"/></name><operator pos:line="3976" pos:column="24">&lt;<pos:position pos:line="3976" pos:column="28"/></operator><name><name pos:line="3976" pos:column="25">db<pos:position pos:line="3976" pos:column="27"/></name><operator pos:line="3976" pos:column="27">-&gt;<pos:position pos:line="3976" pos:column="32"/></operator><name pos:line="3976" pos:column="29">nDb<pos:position pos:line="3976" pos:column="32"/></name></name></expr></argument> )<pos:position pos:line="3976" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="3976" pos:column="35"/></expr_stmt>

  <comment type="block" pos:line="3978" pos:column="3">/* If pOp-&gt;p2 is 0, then this opcode is being executed to read a
  ** single row, for example the row corresponding to a new index
  ** created by this VDBE, from the sqlite_master table. It only
  ** does this if the corresponding in-memory schema is currently
  ** loaded. Otherwise, the new index definition can be loaded along
  ** with the rest of the schema when it is required.
  **
  ** Although the mutex on the BtShared object that corresponds to
  ** database iDb (the database containing the sqlite_master table
  ** read by this instruction) is currently held, it is necessary to
  ** obtain the mutexes on all attached databases before checking if
  ** the schema of iDb is loaded. This is because, at the start of
  ** the sqlite3_exec() call below, SQLite will invoke 
  ** sqlite3BtreeEnterAll(). If all mutexes are not already held, the
  ** iDb mutex may be temporarily released to avoid deadlock. If 
  ** this happens, then some other thread may delete the in-memory 
  ** schema of database iDb before the SQL statement runs. The schema
  ** will not be reloaded becuase the db-&gt;init.busy flag is set. This
  ** can result in a "no such table: sqlite_master" or "malformed
  ** database schema" error being returned to the user.
  */</comment>
  <expr_stmt><expr><call><name pos:line="3999" pos:column="3">assert<pos:position pos:line="3999" pos:column="9"/></name><argument_list pos:line="3999" pos:column="9">( <argument><expr><call><name pos:line="3999" pos:column="11">sqlite3BtreeHoldsMutex<pos:position pos:line="3999" pos:column="33"/></name><argument_list pos:line="3999" pos:column="33">(<argument><expr><name><name pos:line="3999" pos:column="34">db<pos:position pos:line="3999" pos:column="36"/></name><operator pos:line="3999" pos:column="36">-&gt;<pos:position pos:line="3999" pos:column="41"/></operator><name pos:line="3999" pos:column="38">aDb<pos:position pos:line="3999" pos:column="41"/></name><index pos:line="3999" pos:column="41">[<expr><name pos:line="3999" pos:column="42">iDb<pos:position pos:line="3999" pos:column="45"/></name></expr>]<pos:position pos:line="3999" pos:column="46"/></index></name><operator pos:line="3999" pos:column="46">.<pos:position pos:line="3999" pos:column="47"/></operator><name pos:line="3999" pos:column="47">pBt<pos:position pos:line="3999" pos:column="50"/></name></expr></argument>)<pos:position pos:line="3999" pos:column="51"/></argument_list></call></expr></argument> )<pos:position pos:line="3999" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="3999" pos:column="54"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="4000" pos:column="3">sqlite3BtreeEnterAll<pos:position pos:line="4000" pos:column="23"/></name><argument_list pos:line="4000" pos:column="23">(<argument><expr><name pos:line="4000" pos:column="24">db<pos:position pos:line="4000" pos:column="26"/></name></expr></argument>)<pos:position pos:line="4000" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="4000" pos:column="28"/></expr_stmt>
  <if pos:line="4001" pos:column="3">if<condition pos:line="4001" pos:column="5">( <expr><name><name pos:line="4001" pos:column="7">pOp<pos:position pos:line="4001" pos:column="10"/></name><operator pos:line="4001" pos:column="10">-&gt;<pos:position pos:line="4001" pos:column="15"/></operator><name pos:line="4001" pos:column="12">p2<pos:position pos:line="4001" pos:column="14"/></name></name> <operator pos:line="4001" pos:column="15">||<pos:position pos:line="4001" pos:column="17"/></operator> <call><name pos:line="4001" pos:column="18">DbHasProperty<pos:position pos:line="4001" pos:column="31"/></name><argument_list pos:line="4001" pos:column="31">(<argument><expr><name pos:line="4001" pos:column="32">db<pos:position pos:line="4001" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="4001" pos:column="36">iDb<pos:position pos:line="4001" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="4001" pos:column="41">DB_SchemaLoaded<pos:position pos:line="4001" pos:column="56"/></name></expr></argument>)<pos:position pos:line="4001" pos:column="57"/></argument_list></call></expr> )<pos:position pos:line="4001" pos:column="59"/></condition><then><block pos:line="4001" pos:column="59">{
    <expr_stmt><expr><name pos:line="4002" pos:column="5">zMaster<pos:position pos:line="4002" pos:column="12"/></name> <operator pos:line="4002" pos:column="13">=<pos:position pos:line="4002" pos:column="14"/></operator> <call><name pos:line="4002" pos:column="15">SCHEMA_TABLE<pos:position pos:line="4002" pos:column="27"/></name><argument_list pos:line="4002" pos:column="27">(<argument><expr><name pos:line="4002" pos:column="28">iDb<pos:position pos:line="4002" pos:column="31"/></name></expr></argument>)<pos:position pos:line="4002" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="4002" pos:column="33"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="4003" pos:column="5">initData<pos:position pos:line="4003" pos:column="13"/></name><operator pos:line="4003" pos:column="13">.<pos:position pos:line="4003" pos:column="14"/></operator><name pos:line="4003" pos:column="14">db<pos:position pos:line="4003" pos:column="16"/></name></name> <operator pos:line="4003" pos:column="17">=<pos:position pos:line="4003" pos:column="18"/></operator> <name pos:line="4003" pos:column="19">db<pos:position pos:line="4003" pos:column="21"/></name></expr>;<pos:position pos:line="4003" pos:column="22"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="4004" pos:column="5">initData<pos:position pos:line="4004" pos:column="13"/></name><operator pos:line="4004" pos:column="13">.<pos:position pos:line="4004" pos:column="14"/></operator><name pos:line="4004" pos:column="14">iDb<pos:position pos:line="4004" pos:column="17"/></name></name> <operator pos:line="4004" pos:column="18">=<pos:position pos:line="4004" pos:column="19"/></operator> <name><name pos:line="4004" pos:column="20">pOp<pos:position pos:line="4004" pos:column="23"/></name><operator pos:line="4004" pos:column="23">-&gt;<pos:position pos:line="4004" pos:column="28"/></operator><name pos:line="4004" pos:column="25">p1<pos:position pos:line="4004" pos:column="27"/></name></name></expr>;<pos:position pos:line="4004" pos:column="28"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="4005" pos:column="5">initData<pos:position pos:line="4005" pos:column="13"/></name><operator pos:line="4005" pos:column="13">.<pos:position pos:line="4005" pos:column="14"/></operator><name pos:line="4005" pos:column="14">pzErrMsg<pos:position pos:line="4005" pos:column="22"/></name></name> <operator pos:line="4005" pos:column="23">=<pos:position pos:line="4005" pos:column="24"/></operator> <operator pos:line="4005" pos:column="25">&amp;<pos:position pos:line="4005" pos:column="30"/></operator><name><name pos:line="4005" pos:column="26">p<pos:position pos:line="4005" pos:column="27"/></name><operator pos:line="4005" pos:column="27">-&gt;<pos:position pos:line="4005" pos:column="32"/></operator><name pos:line="4005" pos:column="29">zErrMsg<pos:position pos:line="4005" pos:column="36"/></name></name></expr>;<pos:position pos:line="4005" pos:column="37"/></expr_stmt>
    <expr_stmt><expr><name pos:line="4006" pos:column="5">zSql<pos:position pos:line="4006" pos:column="9"/></name> <operator pos:line="4006" pos:column="10">=<pos:position pos:line="4006" pos:column="11"/></operator> <call><name pos:line="4006" pos:column="12">sqlite3MPrintf<pos:position pos:line="4006" pos:column="26"/></name><argument_list pos:line="4006" pos:column="26">(<argument><expr><name pos:line="4006" pos:column="27">db<pos:position pos:line="4006" pos:column="29"/></name></expr></argument>,
       <argument><expr><literal type="string" pos:line="4007" pos:column="8">"SELECT name, rootpage, sql FROM '%q'.%s WHERE %s"<pos:position pos:line="4007" pos:column="58"/></literal></expr></argument>,
       <argument><expr><name><name pos:line="4008" pos:column="8">db<pos:position pos:line="4008" pos:column="10"/></name><operator pos:line="4008" pos:column="10">-&gt;<pos:position pos:line="4008" pos:column="15"/></operator><name pos:line="4008" pos:column="12">aDb<pos:position pos:line="4008" pos:column="15"/></name><index pos:line="4008" pos:column="15">[<expr><name pos:line="4008" pos:column="16">iDb<pos:position pos:line="4008" pos:column="19"/></name></expr>]<pos:position pos:line="4008" pos:column="20"/></index></name><operator pos:line="4008" pos:column="20">.<pos:position pos:line="4008" pos:column="21"/></operator><name pos:line="4008" pos:column="21">zName<pos:position pos:line="4008" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="4008" pos:column="28">zMaster<pos:position pos:line="4008" pos:column="35"/></name></expr></argument>, <argument><expr><name><name pos:line="4008" pos:column="37">pOp<pos:position pos:line="4008" pos:column="40"/></name><operator pos:line="4008" pos:column="40">-&gt;<pos:position pos:line="4008" pos:column="45"/></operator><name pos:line="4008" pos:column="42">p4<pos:position pos:line="4008" pos:column="44"/></name><operator pos:line="4008" pos:column="44">.<pos:position pos:line="4008" pos:column="45"/></operator><name pos:line="4008" pos:column="45">z<pos:position pos:line="4008" pos:column="46"/></name></name></expr></argument>)<pos:position pos:line="4008" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="4008" pos:column="48"/></expr_stmt>
    <if pos:line="4009" pos:column="5">if<condition pos:line="4009" pos:column="7">( <expr><name pos:line="4009" pos:column="9">zSql<pos:position pos:line="4009" pos:column="13"/></name><operator pos:line="4009" pos:column="13">==<pos:position pos:line="4009" pos:column="15"/></operator><literal type="number" pos:line="4009" pos:column="15">0<pos:position pos:line="4009" pos:column="16"/></literal></expr> )<pos:position pos:line="4009" pos:column="18"/></condition><then><block pos:line="4009" pos:column="18">{
      <expr_stmt><expr><name pos:line="4010" pos:column="7">rc<pos:position pos:line="4010" pos:column="9"/></name> <operator pos:line="4010" pos:column="10">=<pos:position pos:line="4010" pos:column="11"/></operator> <name pos:line="4010" pos:column="12">SQLITE_NOMEM<pos:position pos:line="4010" pos:column="24"/></name></expr>;<pos:position pos:line="4010" pos:column="25"/></expr_stmt>
    }<pos:position pos:line="4011" pos:column="6"/></block></then><else pos:line="4011" pos:column="6">else<block pos:line="4011" pos:column="10">{
      <expr_stmt><expr><operator pos:line="4012" pos:column="7">(<pos:position pos:line="4012" pos:column="8"/></operator><name pos:line="4012" pos:column="8">void<pos:position pos:line="4012" pos:column="12"/></name><operator pos:line="4012" pos:column="12">)<pos:position pos:line="4012" pos:column="13"/></operator><call><name pos:line="4012" pos:column="13">sqlite3SafetyOff<pos:position pos:line="4012" pos:column="29"/></name><argument_list pos:line="4012" pos:column="29">(<argument><expr><name pos:line="4012" pos:column="30">db<pos:position pos:line="4012" pos:column="32"/></name></expr></argument>)<pos:position pos:line="4012" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="4012" pos:column="34"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="4013" pos:column="7">assert<pos:position pos:line="4013" pos:column="13"/></name><argument_list pos:line="4013" pos:column="13">( <argument><expr><name><name pos:line="4013" pos:column="15">db<pos:position pos:line="4013" pos:column="17"/></name><operator pos:line="4013" pos:column="17">-&gt;<pos:position pos:line="4013" pos:column="22"/></operator><name pos:line="4013" pos:column="19">init<pos:position pos:line="4013" pos:column="23"/></name><operator pos:line="4013" pos:column="23">.<pos:position pos:line="4013" pos:column="24"/></operator><name pos:line="4013" pos:column="24">busy<pos:position pos:line="4013" pos:column="28"/></name></name><operator pos:line="4013" pos:column="28">==<pos:position pos:line="4013" pos:column="30"/></operator><literal type="number" pos:line="4013" pos:column="30">0<pos:position pos:line="4013" pos:column="31"/></literal></expr></argument> )<pos:position pos:line="4013" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="4013" pos:column="34"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="4014" pos:column="7">db<pos:position pos:line="4014" pos:column="9"/></name><operator pos:line="4014" pos:column="9">-&gt;<pos:position pos:line="4014" pos:column="14"/></operator><name pos:line="4014" pos:column="11">init<pos:position pos:line="4014" pos:column="15"/></name><operator pos:line="4014" pos:column="15">.<pos:position pos:line="4014" pos:column="16"/></operator><name pos:line="4014" pos:column="16">busy<pos:position pos:line="4014" pos:column="20"/></name></name> <operator pos:line="4014" pos:column="21">=<pos:position pos:line="4014" pos:column="22"/></operator> <literal type="number" pos:line="4014" pos:column="23">1<pos:position pos:line="4014" pos:column="24"/></literal></expr>;<pos:position pos:line="4014" pos:column="25"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="4015" pos:column="7">initData<pos:position pos:line="4015" pos:column="15"/></name><operator pos:line="4015" pos:column="15">.<pos:position pos:line="4015" pos:column="16"/></operator><name pos:line="4015" pos:column="16">rc<pos:position pos:line="4015" pos:column="18"/></name></name> <operator pos:line="4015" pos:column="19">=<pos:position pos:line="4015" pos:column="20"/></operator> <name pos:line="4015" pos:column="21">SQLITE_OK<pos:position pos:line="4015" pos:column="30"/></name></expr>;<pos:position pos:line="4015" pos:column="31"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="4016" pos:column="7">assert<pos:position pos:line="4016" pos:column="13"/></name><argument_list pos:line="4016" pos:column="13">( <argument><expr><operator pos:line="4016" pos:column="15">!<pos:position pos:line="4016" pos:column="16"/></operator><name><name pos:line="4016" pos:column="16">db<pos:position pos:line="4016" pos:column="18"/></name><operator pos:line="4016" pos:column="18">-&gt;<pos:position pos:line="4016" pos:column="23"/></operator><name pos:line="4016" pos:column="20">mallocFailed<pos:position pos:line="4016" pos:column="32"/></name></name></expr></argument> )<pos:position pos:line="4016" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="4016" pos:column="35"/></expr_stmt>
      <expr_stmt><expr><name pos:line="4017" pos:column="7">rc<pos:position pos:line="4017" pos:column="9"/></name> <operator pos:line="4017" pos:column="10">=<pos:position pos:line="4017" pos:column="11"/></operator> <call><name pos:line="4017" pos:column="12">sqlite3_exec<pos:position pos:line="4017" pos:column="24"/></name><argument_list pos:line="4017" pos:column="24">(<argument><expr><name pos:line="4017" pos:column="25">db<pos:position pos:line="4017" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="4017" pos:column="29">zSql<pos:position pos:line="4017" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="4017" pos:column="35">sqlite3InitCallback<pos:position pos:line="4017" pos:column="54"/></name></expr></argument>, <argument><expr><operator pos:line="4017" pos:column="56">&amp;<pos:position pos:line="4017" pos:column="61"/></operator><name pos:line="4017" pos:column="57">initData<pos:position pos:line="4017" pos:column="65"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="4017" pos:column="67">0<pos:position pos:line="4017" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="4017" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="4017" pos:column="70"/></expr_stmt>
      <if pos:line="4018" pos:column="7">if<condition pos:line="4018" pos:column="9">( <expr><name pos:line="4018" pos:column="11">rc<pos:position pos:line="4018" pos:column="13"/></name><operator pos:line="4018" pos:column="13">==<pos:position pos:line="4018" pos:column="15"/></operator><name pos:line="4018" pos:column="15">SQLITE_OK<pos:position pos:line="4018" pos:column="24"/></name></expr> )<pos:position pos:line="4018" pos:column="26"/></condition><then pos:line="4018" pos:column="26"> <block type="pseudo"><expr_stmt><expr><name pos:line="4018" pos:column="27">rc<pos:position pos:line="4018" pos:column="29"/></name> <operator pos:line="4018" pos:column="30">=<pos:position pos:line="4018" pos:column="31"/></operator> <name><name pos:line="4018" pos:column="32">initData<pos:position pos:line="4018" pos:column="40"/></name><operator pos:line="4018" pos:column="40">.<pos:position pos:line="4018" pos:column="41"/></operator><name pos:line="4018" pos:column="41">rc<pos:position pos:line="4018" pos:column="43"/></name></name></expr>;<pos:position pos:line="4018" pos:column="44"/></expr_stmt></block></then></if>
      <expr_stmt><expr><call><name pos:line="4019" pos:column="7">sqlite3DbFree<pos:position pos:line="4019" pos:column="20"/></name><argument_list pos:line="4019" pos:column="20">(<argument><expr><name pos:line="4019" pos:column="21">db<pos:position pos:line="4019" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="4019" pos:column="25">zSql<pos:position pos:line="4019" pos:column="29"/></name></expr></argument>)<pos:position pos:line="4019" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="4019" pos:column="31"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="4020" pos:column="7">db<pos:position pos:line="4020" pos:column="9"/></name><operator pos:line="4020" pos:column="9">-&gt;<pos:position pos:line="4020" pos:column="14"/></operator><name pos:line="4020" pos:column="11">init<pos:position pos:line="4020" pos:column="15"/></name><operator pos:line="4020" pos:column="15">.<pos:position pos:line="4020" pos:column="16"/></operator><name pos:line="4020" pos:column="16">busy<pos:position pos:line="4020" pos:column="20"/></name></name> <operator pos:line="4020" pos:column="21">=<pos:position pos:line="4020" pos:column="22"/></operator> <literal type="number" pos:line="4020" pos:column="23">0<pos:position pos:line="4020" pos:column="24"/></literal></expr>;<pos:position pos:line="4020" pos:column="25"/></expr_stmt>
      <expr_stmt><expr><operator pos:line="4021" pos:column="7">(<pos:position pos:line="4021" pos:column="8"/></operator><name pos:line="4021" pos:column="8">void<pos:position pos:line="4021" pos:column="12"/></name><operator pos:line="4021" pos:column="12">)<pos:position pos:line="4021" pos:column="13"/></operator><call><name pos:line="4021" pos:column="13">sqlite3SafetyOn<pos:position pos:line="4021" pos:column="28"/></name><argument_list pos:line="4021" pos:column="28">(<argument><expr><name pos:line="4021" pos:column="29">db<pos:position pos:line="4021" pos:column="31"/></name></expr></argument>)<pos:position pos:line="4021" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="4021" pos:column="33"/></expr_stmt>
    }<pos:position pos:line="4022" pos:column="6"/></block></else></if>
  }<pos:position pos:line="4023" pos:column="4"/></block></then></if>
  <expr_stmt><expr><call><name pos:line="4024" pos:column="3">sqlite3BtreeLeaveAll<pos:position pos:line="4024" pos:column="23"/></name><argument_list pos:line="4024" pos:column="23">(<argument><expr><name pos:line="4024" pos:column="24">db<pos:position pos:line="4024" pos:column="26"/></name></expr></argument>)<pos:position pos:line="4024" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="4024" pos:column="28"/></expr_stmt>
  <if pos:line="4025" pos:column="3">if<condition pos:line="4025" pos:column="5">( <expr><name pos:line="4025" pos:column="7">rc<pos:position pos:line="4025" pos:column="9"/></name><operator pos:line="4025" pos:column="9">==<pos:position pos:line="4025" pos:column="11"/></operator><name pos:line="4025" pos:column="11">SQLITE_NOMEM<pos:position pos:line="4025" pos:column="23"/></name></expr> )<pos:position pos:line="4025" pos:column="25"/></condition><then><block pos:line="4025" pos:column="25">{
    <goto pos:line="4026" pos:column="5">goto <name pos:line="4026" pos:column="10">no_mem<pos:position pos:line="4026" pos:column="16"/></name>;<pos:position pos:line="4026" pos:column="17"/></goto>
  }<pos:position pos:line="4027" pos:column="4"/></block></then></if>
  <break pos:line="4028" pos:column="3">break;<pos:position pos:line="4028" pos:column="9"/></break>  
}<pos:position pos:line="4029" pos:column="2"/></block>

<cpp:if pos:line="4031" pos:column="1">#<cpp:directive pos:line="4031" pos:column="2">if<pos:position pos:line="4031" pos:column="4"/></cpp:directive> <expr><operator pos:line="4031" pos:column="5">!<pos:position pos:line="4031" pos:column="6"/></operator><call><name pos:line="4031" pos:column="6">defined<pos:position pos:line="4031" pos:column="13"/></name><argument_list pos:line="4031" pos:column="13">(<argument><expr><name pos:line="4031" pos:column="14">SQLITE_OMIT_ANALYZE<pos:position pos:line="4031" pos:column="33"/></name></expr></argument>)<pos:position pos:line="4031" pos:column="34"/></argument_list></call> <operator pos:line="4031" pos:column="35">&amp;&amp;<pos:position pos:line="4031" pos:column="45"/></operator> <operator pos:line="4031" pos:column="38">!<pos:position pos:line="4031" pos:column="39"/></operator><call><name pos:line="4031" pos:column="39">defined<pos:position pos:line="4031" pos:column="46"/></name><argument_list pos:line="4031" pos:column="46">(<argument><expr><name pos:line="4031" pos:column="47">SQLITE_OMIT_PARSER<pos:position pos:line="4031" pos:column="65"/></name></expr></argument>)<pos:position pos:line="4031" pos:column="66"/></argument_list></call></expr></cpp:if>
<comment type="block" pos:line="4032" pos:column="1">/* Opcode: LoadAnalysis P1 * * * *
**
** Read the sqlite_stat1 table for database P1 and load the content
** of that table into the internal index hash table.  This will cause
** the analysis to be used when preparing all subsequent queries.
*/</comment>
<case pos:line="4038" pos:column="1">case <expr><name pos:line="4038" pos:column="6">OP_LoadAnalysis<pos:position pos:line="4038" pos:column="21"/></name></expr>:<pos:position pos:line="4038" pos:column="22"/></case> <block pos:line="4038" pos:column="23">{
  <expr_stmt><expr><call><name pos:line="4039" pos:column="3">assert<pos:position pos:line="4039" pos:column="9"/></name><argument_list pos:line="4039" pos:column="9">( <argument><expr><name><name pos:line="4039" pos:column="11">pOp<pos:position pos:line="4039" pos:column="14"/></name><operator pos:line="4039" pos:column="14">-&gt;<pos:position pos:line="4039" pos:column="19"/></operator><name pos:line="4039" pos:column="16">p1<pos:position pos:line="4039" pos:column="18"/></name></name><operator pos:line="4039" pos:column="18">&gt;=<pos:position pos:line="4039" pos:column="23"/></operator><literal type="number" pos:line="4039" pos:column="20">0<pos:position pos:line="4039" pos:column="21"/></literal> <operator pos:line="4039" pos:column="22">&amp;&amp;<pos:position pos:line="4039" pos:column="32"/></operator> <name><name pos:line="4039" pos:column="25">pOp<pos:position pos:line="4039" pos:column="28"/></name><operator pos:line="4039" pos:column="28">-&gt;<pos:position pos:line="4039" pos:column="33"/></operator><name pos:line="4039" pos:column="30">p1<pos:position pos:line="4039" pos:column="32"/></name></name><operator pos:line="4039" pos:column="32">&lt;<pos:position pos:line="4039" pos:column="36"/></operator><name><name pos:line="4039" pos:column="33">db<pos:position pos:line="4039" pos:column="35"/></name><operator pos:line="4039" pos:column="35">-&gt;<pos:position pos:line="4039" pos:column="40"/></operator><name pos:line="4039" pos:column="37">nDb<pos:position pos:line="4039" pos:column="40"/></name></name></expr></argument> )<pos:position pos:line="4039" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="4039" pos:column="43"/></expr_stmt>
  <expr_stmt><expr><name pos:line="4040" pos:column="3">rc<pos:position pos:line="4040" pos:column="5"/></name> <operator pos:line="4040" pos:column="6">=<pos:position pos:line="4040" pos:column="7"/></operator> <call><name pos:line="4040" pos:column="8">sqlite3AnalysisLoad<pos:position pos:line="4040" pos:column="27"/></name><argument_list pos:line="4040" pos:column="27">(<argument><expr><name pos:line="4040" pos:column="28">db<pos:position pos:line="4040" pos:column="30"/></name></expr></argument>, <argument><expr><name><name pos:line="4040" pos:column="32">pOp<pos:position pos:line="4040" pos:column="35"/></name><operator pos:line="4040" pos:column="35">-&gt;<pos:position pos:line="4040" pos:column="40"/></operator><name pos:line="4040" pos:column="37">p1<pos:position pos:line="4040" pos:column="39"/></name></name></expr></argument>)<pos:position pos:line="4040" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="4040" pos:column="41"/></expr_stmt>
  <break pos:line="4041" pos:column="3">break;<pos:position pos:line="4041" pos:column="9"/></break>  
}<pos:position pos:line="4042" pos:column="2"/></block>
<cpp:endif pos:line="4043" pos:column="1">#<cpp:directive pos:line="4043" pos:column="2">endif<pos:position pos:line="4043" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="4043" pos:column="8">/* !defined(SQLITE_OMIT_ANALYZE) &amp;&amp; !defined(SQLITE_OMIT_PARSER)  */</comment>

<comment type="block" pos:line="4045" pos:column="1">/* Opcode: DropTable P1 * * P4 *
**
** Remove the internal (in-memory) data structures that describe
** the table named P4 in database P1.  This is called after a table
** is dropped in order to keep the internal representation of the
** schema consistent with what is on disk.
*/</comment>
<case pos:line="4052" pos:column="1">case <expr><name pos:line="4052" pos:column="6">OP_DropTable<pos:position pos:line="4052" pos:column="18"/></name></expr>:<pos:position pos:line="4052" pos:column="19"/></case> <block pos:line="4052" pos:column="20">{
  <expr_stmt><expr><call><name pos:line="4053" pos:column="3">sqlite3UnlinkAndDeleteTable<pos:position pos:line="4053" pos:column="30"/></name><argument_list pos:line="4053" pos:column="30">(<argument><expr><name pos:line="4053" pos:column="31">db<pos:position pos:line="4053" pos:column="33"/></name></expr></argument>, <argument><expr><name><name pos:line="4053" pos:column="35">pOp<pos:position pos:line="4053" pos:column="38"/></name><operator pos:line="4053" pos:column="38">-&gt;<pos:position pos:line="4053" pos:column="43"/></operator><name pos:line="4053" pos:column="40">p1<pos:position pos:line="4053" pos:column="42"/></name></name></expr></argument>, <argument><expr><name><name pos:line="4053" pos:column="44">pOp<pos:position pos:line="4053" pos:column="47"/></name><operator pos:line="4053" pos:column="47">-&gt;<pos:position pos:line="4053" pos:column="52"/></operator><name pos:line="4053" pos:column="49">p4<pos:position pos:line="4053" pos:column="51"/></name><operator pos:line="4053" pos:column="51">.<pos:position pos:line="4053" pos:column="52"/></operator><name pos:line="4053" pos:column="52">z<pos:position pos:line="4053" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="4053" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="4053" pos:column="55"/></expr_stmt>
  <break pos:line="4054" pos:column="3">break;<pos:position pos:line="4054" pos:column="9"/></break>
}<pos:position pos:line="4055" pos:column="2"/></block>

<comment type="block" pos:line="4057" pos:column="1">/* Opcode: DropIndex P1 * * P4 *
**
** Remove the internal (in-memory) data structures that describe
** the index named P4 in database P1.  This is called after an index
** is dropped in order to keep the internal representation of the
** schema consistent with what is on disk.
*/</comment>
<case pos:line="4064" pos:column="1">case <expr><name pos:line="4064" pos:column="6">OP_DropIndex<pos:position pos:line="4064" pos:column="18"/></name></expr>:<pos:position pos:line="4064" pos:column="19"/></case> <block pos:line="4064" pos:column="20">{
  <expr_stmt><expr><call><name pos:line="4065" pos:column="3">sqlite3UnlinkAndDeleteIndex<pos:position pos:line="4065" pos:column="30"/></name><argument_list pos:line="4065" pos:column="30">(<argument><expr><name pos:line="4065" pos:column="31">db<pos:position pos:line="4065" pos:column="33"/></name></expr></argument>, <argument><expr><name><name pos:line="4065" pos:column="35">pOp<pos:position pos:line="4065" pos:column="38"/></name><operator pos:line="4065" pos:column="38">-&gt;<pos:position pos:line="4065" pos:column="43"/></operator><name pos:line="4065" pos:column="40">p1<pos:position pos:line="4065" pos:column="42"/></name></name></expr></argument>, <argument><expr><name><name pos:line="4065" pos:column="44">pOp<pos:position pos:line="4065" pos:column="47"/></name><operator pos:line="4065" pos:column="47">-&gt;<pos:position pos:line="4065" pos:column="52"/></operator><name pos:line="4065" pos:column="49">p4<pos:position pos:line="4065" pos:column="51"/></name><operator pos:line="4065" pos:column="51">.<pos:position pos:line="4065" pos:column="52"/></operator><name pos:line="4065" pos:column="52">z<pos:position pos:line="4065" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="4065" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="4065" pos:column="55"/></expr_stmt>
  <break pos:line="4066" pos:column="3">break;<pos:position pos:line="4066" pos:column="9"/></break>
}<pos:position pos:line="4067" pos:column="2"/></block>

<comment type="block" pos:line="4069" pos:column="1">/* Opcode: DropTrigger P1 * * P4 *
**
** Remove the internal (in-memory) data structures that describe
** the trigger named P4 in database P1.  This is called after a trigger
** is dropped in order to keep the internal representation of the
** schema consistent with what is on disk.
*/</comment>
<case pos:line="4076" pos:column="1">case <expr><name pos:line="4076" pos:column="6">OP_DropTrigger<pos:position pos:line="4076" pos:column="20"/></name></expr>:<pos:position pos:line="4076" pos:column="21"/></case> <block pos:line="4076" pos:column="22">{
  <expr_stmt><expr><call><name pos:line="4077" pos:column="3">sqlite3UnlinkAndDeleteTrigger<pos:position pos:line="4077" pos:column="32"/></name><argument_list pos:line="4077" pos:column="32">(<argument><expr><name pos:line="4077" pos:column="33">db<pos:position pos:line="4077" pos:column="35"/></name></expr></argument>, <argument><expr><name><name pos:line="4077" pos:column="37">pOp<pos:position pos:line="4077" pos:column="40"/></name><operator pos:line="4077" pos:column="40">-&gt;<pos:position pos:line="4077" pos:column="45"/></operator><name pos:line="4077" pos:column="42">p1<pos:position pos:line="4077" pos:column="44"/></name></name></expr></argument>, <argument><expr><name><name pos:line="4077" pos:column="46">pOp<pos:position pos:line="4077" pos:column="49"/></name><operator pos:line="4077" pos:column="49">-&gt;<pos:position pos:line="4077" pos:column="54"/></operator><name pos:line="4077" pos:column="51">p4<pos:position pos:line="4077" pos:column="53"/></name><operator pos:line="4077" pos:column="53">.<pos:position pos:line="4077" pos:column="54"/></operator><name pos:line="4077" pos:column="54">z<pos:position pos:line="4077" pos:column="55"/></name></name></expr></argument>)<pos:position pos:line="4077" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="4077" pos:column="57"/></expr_stmt>
  <break pos:line="4078" pos:column="3">break;<pos:position pos:line="4078" pos:column="9"/></break>
}<pos:position pos:line="4079" pos:column="2"/></block>


<cpp:ifndef pos:line="4082" pos:column="1">#<cpp:directive pos:line="4082" pos:column="2">ifndef<pos:position pos:line="4082" pos:column="8"/></cpp:directive> <name pos:line="4082" pos:column="9">SQLITE_OMIT_INTEGRITY_CHECK<pos:position pos:line="4082" pos:column="36"/></name></cpp:ifndef>
<comment type="block" pos:line="4083" pos:column="1">/* Opcode: IntegrityCk P1 P2 P3 * P5
**
** Do an analysis of the currently open database.  Store in
** register P1 the text of an error message describing any problems.
** If no problems are found, store a NULL in register P1.
**
** The register P3 contains the maximum number of allowed errors.
** At most reg(P3) errors will be reported.
** In other words, the analysis stops as soon as reg(P1) errors are 
** seen.  Reg(P1) is updated with the number of errors remaining.
**
** The root page numbers of all tables in the database are integer
** stored in reg(P1), reg(P1+1), reg(P1+2), ....  There are P2 tables
** total.
**
** If P5 is not zero, the check is done on the auxiliary database
** file, not the main database file.
**
** This opcode is used to implement the integrity_check pragma.
*/</comment>
<case pos:line="4103" pos:column="1">case <expr><name pos:line="4103" pos:column="6">OP_IntegrityCk<pos:position pos:line="4103" pos:column="20"/></name></expr>:<pos:position pos:line="4103" pos:column="21"/></case> <block pos:line="4103" pos:column="22">{
  <decl_stmt><decl><type><name pos:line="4104" pos:column="3">int<pos:position pos:line="4104" pos:column="6"/></name></type> <name pos:line="4104" pos:column="7">nRoot<pos:position pos:line="4104" pos:column="12"/></name></decl>;<pos:position pos:line="4104" pos:column="13"/></decl_stmt>      <comment type="block" pos:line="4104" pos:column="19">/* Number of tables to check.  (Number of root pages.) */</comment>
  <decl_stmt><decl><type><name pos:line="4105" pos:column="3">int<pos:position pos:line="4105" pos:column="6"/></name> <modifier pos:line="4105" pos:column="7">*<pos:position pos:line="4105" pos:column="8"/></modifier></type><name pos:line="4105" pos:column="8">aRoot<pos:position pos:line="4105" pos:column="13"/></name></decl>;<pos:position pos:line="4105" pos:column="14"/></decl_stmt>     <comment type="block" pos:line="4105" pos:column="19">/* Array of rootpage numbers for tables to be checked */</comment>
  <decl_stmt><decl><type><name pos:line="4106" pos:column="3">int<pos:position pos:line="4106" pos:column="6"/></name></type> <name pos:line="4106" pos:column="7">j<pos:position pos:line="4106" pos:column="8"/></name></decl>;<pos:position pos:line="4106" pos:column="9"/></decl_stmt>          <comment type="block" pos:line="4106" pos:column="19">/* Loop counter */</comment>
  <decl_stmt><decl><type><name pos:line="4107" pos:column="3">int<pos:position pos:line="4107" pos:column="6"/></name></type> <name pos:line="4107" pos:column="7">nErr<pos:position pos:line="4107" pos:column="11"/></name></decl>;<pos:position pos:line="4107" pos:column="12"/></decl_stmt>       <comment type="block" pos:line="4107" pos:column="19">/* Number of errors reported */</comment>
  <decl_stmt><decl><type><name pos:line="4108" pos:column="3">char<pos:position pos:line="4108" pos:column="7"/></name> <modifier pos:line="4108" pos:column="8">*<pos:position pos:line="4108" pos:column="9"/></modifier></type><name pos:line="4108" pos:column="9">z<pos:position pos:line="4108" pos:column="10"/></name></decl>;<pos:position pos:line="4108" pos:column="11"/></decl_stmt>        <comment type="block" pos:line="4108" pos:column="19">/* Text of the error report */</comment>
  <decl_stmt><decl><type><name pos:line="4109" pos:column="3">Mem<pos:position pos:line="4109" pos:column="6"/></name> <modifier pos:line="4109" pos:column="7">*<pos:position pos:line="4109" pos:column="8"/></modifier></type><name pos:line="4109" pos:column="8">pnErr<pos:position pos:line="4109" pos:column="13"/></name></decl>;<pos:position pos:line="4109" pos:column="14"/></decl_stmt>     <comment type="block" pos:line="4109" pos:column="19">/* Register keeping track of errors remaining */</comment>
  
  <expr_stmt><expr><name pos:line="4111" pos:column="3">nRoot<pos:position pos:line="4111" pos:column="8"/></name> <operator pos:line="4111" pos:column="9">=<pos:position pos:line="4111" pos:column="10"/></operator> <name><name pos:line="4111" pos:column="11">pOp<pos:position pos:line="4111" pos:column="14"/></name><operator pos:line="4111" pos:column="14">-&gt;<pos:position pos:line="4111" pos:column="19"/></operator><name pos:line="4111" pos:column="16">p2<pos:position pos:line="4111" pos:column="18"/></name></name></expr>;<pos:position pos:line="4111" pos:column="19"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="4112" pos:column="3">assert<pos:position pos:line="4112" pos:column="9"/></name><argument_list pos:line="4112" pos:column="9">( <argument><expr><name pos:line="4112" pos:column="11">nRoot<pos:position pos:line="4112" pos:column="16"/></name><operator pos:line="4112" pos:column="16">&gt;<pos:position pos:line="4112" pos:column="20"/></operator><literal type="number" pos:line="4112" pos:column="17">0<pos:position pos:line="4112" pos:column="18"/></literal></expr></argument> )<pos:position pos:line="4112" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="4112" pos:column="21"/></expr_stmt>
  <expr_stmt><expr><name pos:line="4113" pos:column="3">aRoot<pos:position pos:line="4113" pos:column="8"/></name> <operator pos:line="4113" pos:column="9">=<pos:position pos:line="4113" pos:column="10"/></operator> <call><name pos:line="4113" pos:column="11">sqlite3DbMallocRaw<pos:position pos:line="4113" pos:column="29"/></name><argument_list pos:line="4113" pos:column="29">(<argument><expr><name pos:line="4113" pos:column="30">db<pos:position pos:line="4113" pos:column="32"/></name></expr></argument>, <argument><expr><sizeof pos:line="4113" pos:column="34">sizeof<argument_list pos:line="4113" pos:column="40">(<argument><expr><name pos:line="4113" pos:column="41">int<pos:position pos:line="4113" pos:column="44"/></name></expr></argument>)<pos:position pos:line="4113" pos:column="45"/></argument_list></sizeof><operator pos:line="4113" pos:column="45">*<pos:position pos:line="4113" pos:column="46"/></operator><operator pos:line="4113" pos:column="46">(<pos:position pos:line="4113" pos:column="47"/></operator><name pos:line="4113" pos:column="47">nRoot<pos:position pos:line="4113" pos:column="52"/></name><operator pos:line="4113" pos:column="52">+<pos:position pos:line="4113" pos:column="53"/></operator><literal type="number" pos:line="4113" pos:column="53">1<pos:position pos:line="4113" pos:column="54"/></literal><operator pos:line="4113" pos:column="54">)<pos:position pos:line="4113" pos:column="55"/></operator></expr></argument> )<pos:position pos:line="4113" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="4113" pos:column="58"/></expr_stmt>
  <if pos:line="4114" pos:column="3">if<condition pos:line="4114" pos:column="5">( <expr><name pos:line="4114" pos:column="7">aRoot<pos:position pos:line="4114" pos:column="12"/></name><operator pos:line="4114" pos:column="12">==<pos:position pos:line="4114" pos:column="14"/></operator><literal type="number" pos:line="4114" pos:column="14">0<pos:position pos:line="4114" pos:column="15"/></literal></expr> )<pos:position pos:line="4114" pos:column="17"/></condition><then pos:line="4114" pos:column="17"> <block type="pseudo"><goto pos:line="4114" pos:column="18">goto <name pos:line="4114" pos:column="23">no_mem<pos:position pos:line="4114" pos:column="29"/></name>;<pos:position pos:line="4114" pos:column="30"/></goto></block></then></if>
  <expr_stmt><expr><call><name pos:line="4115" pos:column="3">assert<pos:position pos:line="4115" pos:column="9"/></name><argument_list pos:line="4115" pos:column="9">( <argument><expr><name><name pos:line="4115" pos:column="11">pOp<pos:position pos:line="4115" pos:column="14"/></name><operator pos:line="4115" pos:column="14">-&gt;<pos:position pos:line="4115" pos:column="19"/></operator><name pos:line="4115" pos:column="16">p3<pos:position pos:line="4115" pos:column="18"/></name></name><operator pos:line="4115" pos:column="18">&gt;<pos:position pos:line="4115" pos:column="22"/></operator><literal type="number" pos:line="4115" pos:column="19">0<pos:position pos:line="4115" pos:column="20"/></literal> <operator pos:line="4115" pos:column="21">&amp;&amp;<pos:position pos:line="4115" pos:column="31"/></operator> <name><name pos:line="4115" pos:column="24">pOp<pos:position pos:line="4115" pos:column="27"/></name><operator pos:line="4115" pos:column="27">-&gt;<pos:position pos:line="4115" pos:column="32"/></operator><name pos:line="4115" pos:column="29">p3<pos:position pos:line="4115" pos:column="31"/></name></name><operator pos:line="4115" pos:column="31">&lt;=<pos:position pos:line="4115" pos:column="36"/></operator><name><name pos:line="4115" pos:column="33">p<pos:position pos:line="4115" pos:column="34"/></name><operator pos:line="4115" pos:column="34">-&gt;<pos:position pos:line="4115" pos:column="39"/></operator><name pos:line="4115" pos:column="36">nMem<pos:position pos:line="4115" pos:column="40"/></name></name></expr></argument> )<pos:position pos:line="4115" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="4115" pos:column="43"/></expr_stmt>
  <expr_stmt><expr><name pos:line="4116" pos:column="3">pnErr<pos:position pos:line="4116" pos:column="8"/></name> <operator pos:line="4116" pos:column="9">=<pos:position pos:line="4116" pos:column="10"/></operator> <operator pos:line="4116" pos:column="11">&amp;<pos:position pos:line="4116" pos:column="16"/></operator><name><name pos:line="4116" pos:column="12">p<pos:position pos:line="4116" pos:column="13"/></name><operator pos:line="4116" pos:column="13">-&gt;<pos:position pos:line="4116" pos:column="18"/></operator><name pos:line="4116" pos:column="15">aMem<pos:position pos:line="4116" pos:column="19"/></name><index pos:line="4116" pos:column="19">[<expr><name><name pos:line="4116" pos:column="20">pOp<pos:position pos:line="4116" pos:column="23"/></name><operator pos:line="4116" pos:column="23">-&gt;<pos:position pos:line="4116" pos:column="28"/></operator><name pos:line="4116" pos:column="25">p3<pos:position pos:line="4116" pos:column="27"/></name></name></expr>]<pos:position pos:line="4116" pos:column="28"/></index></name></expr>;<pos:position pos:line="4116" pos:column="29"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="4117" pos:column="3">assert<pos:position pos:line="4117" pos:column="9"/></name><argument_list pos:line="4117" pos:column="9">( <argument><expr><operator pos:line="4117" pos:column="11">(<pos:position pos:line="4117" pos:column="12"/></operator><name><name pos:line="4117" pos:column="12">pnErr<pos:position pos:line="4117" pos:column="17"/></name><operator pos:line="4117" pos:column="17">-&gt;<pos:position pos:line="4117" pos:column="22"/></operator><name pos:line="4117" pos:column="19">flags<pos:position pos:line="4117" pos:column="24"/></name></name> <operator pos:line="4117" pos:column="25">&amp;<pos:position pos:line="4117" pos:column="30"/></operator> <name pos:line="4117" pos:column="27">MEM_Int<pos:position pos:line="4117" pos:column="34"/></name><operator pos:line="4117" pos:column="34">)<pos:position pos:line="4117" pos:column="35"/></operator><operator pos:line="4117" pos:column="35">!=<pos:position pos:line="4117" pos:column="37"/></operator><literal type="number" pos:line="4117" pos:column="37">0<pos:position pos:line="4117" pos:column="38"/></literal></expr></argument> )<pos:position pos:line="4117" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="4117" pos:column="41"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="4118" pos:column="3">assert<pos:position pos:line="4118" pos:column="9"/></name><argument_list pos:line="4118" pos:column="9">( <argument><expr><operator pos:line="4118" pos:column="11">(<pos:position pos:line="4118" pos:column="12"/></operator><name><name pos:line="4118" pos:column="12">pnErr<pos:position pos:line="4118" pos:column="17"/></name><operator pos:line="4118" pos:column="17">-&gt;<pos:position pos:line="4118" pos:column="22"/></operator><name pos:line="4118" pos:column="19">flags<pos:position pos:line="4118" pos:column="24"/></name></name> <operator pos:line="4118" pos:column="25">&amp;<pos:position pos:line="4118" pos:column="30"/></operator> <operator pos:line="4118" pos:column="27">(<pos:position pos:line="4118" pos:column="28"/></operator><name pos:line="4118" pos:column="28">MEM_Str<pos:position pos:line="4118" pos:column="35"/></name><operator pos:line="4118" pos:column="35">|<pos:position pos:line="4118" pos:column="36"/></operator><name pos:line="4118" pos:column="36">MEM_Blob<pos:position pos:line="4118" pos:column="44"/></name><operator pos:line="4118" pos:column="44">)<pos:position pos:line="4118" pos:column="45"/></operator><operator pos:line="4118" pos:column="45">)<pos:position pos:line="4118" pos:column="46"/></operator><operator pos:line="4118" pos:column="46">==<pos:position pos:line="4118" pos:column="48"/></operator><literal type="number" pos:line="4118" pos:column="48">0<pos:position pos:line="4118" pos:column="49"/></literal></expr></argument> )<pos:position pos:line="4118" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="4118" pos:column="52"/></expr_stmt>
  <expr_stmt><expr><name pos:line="4119" pos:column="3">pIn1<pos:position pos:line="4119" pos:column="7"/></name> <operator pos:line="4119" pos:column="8">=<pos:position pos:line="4119" pos:column="9"/></operator> <operator pos:line="4119" pos:column="10">&amp;<pos:position pos:line="4119" pos:column="15"/></operator><name><name pos:line="4119" pos:column="11">p<pos:position pos:line="4119" pos:column="12"/></name><operator pos:line="4119" pos:column="12">-&gt;<pos:position pos:line="4119" pos:column="17"/></operator><name pos:line="4119" pos:column="14">aMem<pos:position pos:line="4119" pos:column="18"/></name><index pos:line="4119" pos:column="18">[<expr><name><name pos:line="4119" pos:column="19">pOp<pos:position pos:line="4119" pos:column="22"/></name><operator pos:line="4119" pos:column="22">-&gt;<pos:position pos:line="4119" pos:column="27"/></operator><name pos:line="4119" pos:column="24">p1<pos:position pos:line="4119" pos:column="26"/></name></name></expr>]<pos:position pos:line="4119" pos:column="27"/></index></name></expr>;<pos:position pos:line="4119" pos:column="28"/></expr_stmt>
  <for pos:line="4120" pos:column="3">for<control pos:line="4120" pos:column="6">(<init><expr><name pos:line="4120" pos:column="7">j<pos:position pos:line="4120" pos:column="8"/></name><operator pos:line="4120" pos:column="8">=<pos:position pos:line="4120" pos:column="9"/></operator><literal type="number" pos:line="4120" pos:column="9">0<pos:position pos:line="4120" pos:column="10"/></literal></expr>;<pos:position pos:line="4120" pos:column="11"/></init> <condition><expr><name pos:line="4120" pos:column="12">j<pos:position pos:line="4120" pos:column="13"/></name><operator pos:line="4120" pos:column="13">&lt;<pos:position pos:line="4120" pos:column="17"/></operator><name pos:line="4120" pos:column="14">nRoot<pos:position pos:line="4120" pos:column="19"/></name></expr>;<pos:position pos:line="4120" pos:column="20"/></condition> <incr><expr><name pos:line="4120" pos:column="21">j<pos:position pos:line="4120" pos:column="22"/></name><operator pos:line="4120" pos:column="22">++<pos:position pos:line="4120" pos:column="24"/></operator></expr></incr>)<pos:position pos:line="4120" pos:column="25"/></control><block pos:line="4120" pos:column="25">{
    <expr_stmt><expr><name><name pos:line="4121" pos:column="5">aRoot<pos:position pos:line="4121" pos:column="10"/></name><index pos:line="4121" pos:column="10">[<expr><name pos:line="4121" pos:column="11">j<pos:position pos:line="4121" pos:column="12"/></name></expr>]<pos:position pos:line="4121" pos:column="13"/></index></name> <operator pos:line="4121" pos:column="14">=<pos:position pos:line="4121" pos:column="15"/></operator> <operator pos:line="4121" pos:column="16">(<pos:position pos:line="4121" pos:column="17"/></operator><name pos:line="4121" pos:column="17">int<pos:position pos:line="4121" pos:column="20"/></name><operator pos:line="4121" pos:column="20">)<pos:position pos:line="4121" pos:column="21"/></operator><call><name pos:line="4121" pos:column="21">sqlite3VdbeIntValue<pos:position pos:line="4121" pos:column="40"/></name><argument_list pos:line="4121" pos:column="40">(<argument><expr><operator pos:line="4121" pos:column="41">&amp;<pos:position pos:line="4121" pos:column="46"/></operator><name><name pos:line="4121" pos:column="42">pIn1<pos:position pos:line="4121" pos:column="46"/></name><index pos:line="4121" pos:column="46">[<expr><name pos:line="4121" pos:column="47">j<pos:position pos:line="4121" pos:column="48"/></name></expr>]<pos:position pos:line="4121" pos:column="49"/></index></name></expr></argument>)<pos:position pos:line="4121" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="4121" pos:column="51"/></expr_stmt>
  }<pos:position pos:line="4122" pos:column="4"/></block></for>
  <expr_stmt><expr><name><name pos:line="4123" pos:column="3">aRoot<pos:position pos:line="4123" pos:column="8"/></name><index pos:line="4123" pos:column="8">[<expr><name pos:line="4123" pos:column="9">j<pos:position pos:line="4123" pos:column="10"/></name></expr>]<pos:position pos:line="4123" pos:column="11"/></index></name> <operator pos:line="4123" pos:column="12">=<pos:position pos:line="4123" pos:column="13"/></operator> <literal type="number" pos:line="4123" pos:column="14">0<pos:position pos:line="4123" pos:column="15"/></literal></expr>;<pos:position pos:line="4123" pos:column="16"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="4124" pos:column="3">assert<pos:position pos:line="4124" pos:column="9"/></name><argument_list pos:line="4124" pos:column="9">( <argument><expr><name><name pos:line="4124" pos:column="11">pOp<pos:position pos:line="4124" pos:column="14"/></name><operator pos:line="4124" pos:column="14">-&gt;<pos:position pos:line="4124" pos:column="19"/></operator><name pos:line="4124" pos:column="16">p5<pos:position pos:line="4124" pos:column="18"/></name></name><operator pos:line="4124" pos:column="18">&lt;<pos:position pos:line="4124" pos:column="22"/></operator><name><name pos:line="4124" pos:column="19">db<pos:position pos:line="4124" pos:column="21"/></name><operator pos:line="4124" pos:column="21">-&gt;<pos:position pos:line="4124" pos:column="26"/></operator><name pos:line="4124" pos:column="23">nDb<pos:position pos:line="4124" pos:column="26"/></name></name></expr></argument> )<pos:position pos:line="4124" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="4124" pos:column="29"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="4125" pos:column="3">assert<pos:position pos:line="4125" pos:column="9"/></name><argument_list pos:line="4125" pos:column="9">( <argument><expr><operator pos:line="4125" pos:column="11">(<pos:position pos:line="4125" pos:column="12"/></operator><name><name pos:line="4125" pos:column="12">p<pos:position pos:line="4125" pos:column="13"/></name><operator pos:line="4125" pos:column="13">-&gt;<pos:position pos:line="4125" pos:column="18"/></operator><name pos:line="4125" pos:column="15">btreeMask<pos:position pos:line="4125" pos:column="24"/></name></name> <operator pos:line="4125" pos:column="25">&amp;<pos:position pos:line="4125" pos:column="30"/></operator> <operator pos:line="4125" pos:column="27">(<pos:position pos:line="4125" pos:column="28"/></operator><literal type="number" pos:line="4125" pos:column="28">1<pos:position pos:line="4125" pos:column="29"/></literal><operator pos:line="4125" pos:column="29">&lt;&lt;<pos:position pos:line="4125" pos:column="37"/></operator><name><name pos:line="4125" pos:column="31">pOp<pos:position pos:line="4125" pos:column="34"/></name><operator pos:line="4125" pos:column="34">-&gt;<pos:position pos:line="4125" pos:column="39"/></operator><name pos:line="4125" pos:column="36">p5<pos:position pos:line="4125" pos:column="38"/></name></name><operator pos:line="4125" pos:column="38">)<pos:position pos:line="4125" pos:column="39"/></operator><operator pos:line="4125" pos:column="39">)<pos:position pos:line="4125" pos:column="40"/></operator><operator pos:line="4125" pos:column="40">!=<pos:position pos:line="4125" pos:column="42"/></operator><literal type="number" pos:line="4125" pos:column="42">0<pos:position pos:line="4125" pos:column="43"/></literal></expr></argument> )<pos:position pos:line="4125" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="4125" pos:column="46"/></expr_stmt>
  <expr_stmt><expr><name pos:line="4126" pos:column="3">z<pos:position pos:line="4126" pos:column="4"/></name> <operator pos:line="4126" pos:column="5">=<pos:position pos:line="4126" pos:column="6"/></operator> <call><name pos:line="4126" pos:column="7">sqlite3BtreeIntegrityCheck<pos:position pos:line="4126" pos:column="33"/></name><argument_list pos:line="4126" pos:column="33">(<argument><expr><name><name pos:line="4126" pos:column="34">db<pos:position pos:line="4126" pos:column="36"/></name><operator pos:line="4126" pos:column="36">-&gt;<pos:position pos:line="4126" pos:column="41"/></operator><name pos:line="4126" pos:column="38">aDb<pos:position pos:line="4126" pos:column="41"/></name><index pos:line="4126" pos:column="41">[<expr><name><name pos:line="4126" pos:column="42">pOp<pos:position pos:line="4126" pos:column="45"/></name><operator pos:line="4126" pos:column="45">-&gt;<pos:position pos:line="4126" pos:column="50"/></operator><name pos:line="4126" pos:column="47">p5<pos:position pos:line="4126" pos:column="49"/></name></name></expr>]<pos:position pos:line="4126" pos:column="50"/></index></name><operator pos:line="4126" pos:column="50">.<pos:position pos:line="4126" pos:column="51"/></operator><name pos:line="4126" pos:column="51">pBt<pos:position pos:line="4126" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="4126" pos:column="56">aRoot<pos:position pos:line="4126" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="4126" pos:column="63">nRoot<pos:position pos:line="4126" pos:column="68"/></name></expr></argument>,
                                 <argument><expr><operator pos:line="4127" pos:column="34">(<pos:position pos:line="4127" pos:column="35"/></operator><name pos:line="4127" pos:column="35">int<pos:position pos:line="4127" pos:column="38"/></name><operator pos:line="4127" pos:column="38">)<pos:position pos:line="4127" pos:column="39"/></operator><name><name pos:line="4127" pos:column="39">pnErr<pos:position pos:line="4127" pos:column="44"/></name><operator pos:line="4127" pos:column="44">-&gt;<pos:position pos:line="4127" pos:column="49"/></operator><name pos:line="4127" pos:column="46">u<pos:position pos:line="4127" pos:column="47"/></name><operator pos:line="4127" pos:column="47">.<pos:position pos:line="4127" pos:column="48"/></operator><name pos:line="4127" pos:column="48">i<pos:position pos:line="4127" pos:column="49"/></name></name></expr></argument>, <argument><expr><operator pos:line="4127" pos:column="51">&amp;<pos:position pos:line="4127" pos:column="56"/></operator><name pos:line="4127" pos:column="52">nErr<pos:position pos:line="4127" pos:column="56"/></name></expr></argument>)<pos:position pos:line="4127" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="4127" pos:column="58"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="4128" pos:column="3">sqlite3DbFree<pos:position pos:line="4128" pos:column="16"/></name><argument_list pos:line="4128" pos:column="16">(<argument><expr><name pos:line="4128" pos:column="17">db<pos:position pos:line="4128" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="4128" pos:column="21">aRoot<pos:position pos:line="4128" pos:column="26"/></name></expr></argument>)<pos:position pos:line="4128" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="4128" pos:column="28"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="4129" pos:column="3">pnErr<pos:position pos:line="4129" pos:column="8"/></name><operator pos:line="4129" pos:column="8">-&gt;<pos:position pos:line="4129" pos:column="13"/></operator><name pos:line="4129" pos:column="10">u<pos:position pos:line="4129" pos:column="11"/></name><operator pos:line="4129" pos:column="11">.<pos:position pos:line="4129" pos:column="12"/></operator><name pos:line="4129" pos:column="12">i<pos:position pos:line="4129" pos:column="13"/></name></name> <operator pos:line="4129" pos:column="14">-=<pos:position pos:line="4129" pos:column="16"/></operator> <name pos:line="4129" pos:column="17">nErr<pos:position pos:line="4129" pos:column="21"/></name></expr>;<pos:position pos:line="4129" pos:column="22"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="4130" pos:column="3">sqlite3VdbeMemSetNull<pos:position pos:line="4130" pos:column="24"/></name><argument_list pos:line="4130" pos:column="24">(<argument><expr><name pos:line="4130" pos:column="25">pIn1<pos:position pos:line="4130" pos:column="29"/></name></expr></argument>)<pos:position pos:line="4130" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="4130" pos:column="31"/></expr_stmt>
  <if pos:line="4131" pos:column="3">if<condition pos:line="4131" pos:column="5">( <expr><name pos:line="4131" pos:column="7">nErr<pos:position pos:line="4131" pos:column="11"/></name><operator pos:line="4131" pos:column="11">==<pos:position pos:line="4131" pos:column="13"/></operator><literal type="number" pos:line="4131" pos:column="13">0<pos:position pos:line="4131" pos:column="14"/></literal></expr> )<pos:position pos:line="4131" pos:column="16"/></condition><then><block pos:line="4131" pos:column="16">{
    <expr_stmt><expr><call><name pos:line="4132" pos:column="5">assert<pos:position pos:line="4132" pos:column="11"/></name><argument_list pos:line="4132" pos:column="11">( <argument><expr><name pos:line="4132" pos:column="13">z<pos:position pos:line="4132" pos:column="14"/></name><operator pos:line="4132" pos:column="14">==<pos:position pos:line="4132" pos:column="16"/></operator><literal type="number" pos:line="4132" pos:column="16">0<pos:position pos:line="4132" pos:column="17"/></literal></expr></argument> )<pos:position pos:line="4132" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="4132" pos:column="20"/></expr_stmt>
  }<pos:position pos:line="4133" pos:column="4"/></block></then><elseif pos:line="4133" pos:column="4">else <if pos:line="4133" pos:column="9">if<condition pos:line="4133" pos:column="11">( <expr><name pos:line="4133" pos:column="13">z<pos:position pos:line="4133" pos:column="14"/></name><operator pos:line="4133" pos:column="14">==<pos:position pos:line="4133" pos:column="16"/></operator><literal type="number" pos:line="4133" pos:column="16">0<pos:position pos:line="4133" pos:column="17"/></literal></expr> )<pos:position pos:line="4133" pos:column="19"/></condition><then><block pos:line="4133" pos:column="19">{
    <goto pos:line="4134" pos:column="5">goto <name pos:line="4134" pos:column="10">no_mem<pos:position pos:line="4134" pos:column="16"/></name>;<pos:position pos:line="4134" pos:column="17"/></goto>
  }<pos:position pos:line="4135" pos:column="4"/></block></then></if></elseif><else pos:line="4135" pos:column="4">else<block pos:line="4135" pos:column="8">{
    <expr_stmt><expr><call><name pos:line="4136" pos:column="5">sqlite3VdbeMemSetStr<pos:position pos:line="4136" pos:column="25"/></name><argument_list pos:line="4136" pos:column="25">(<argument><expr><name pos:line="4136" pos:column="26">pIn1<pos:position pos:line="4136" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="4136" pos:column="32">z<pos:position pos:line="4136" pos:column="33"/></name></expr></argument>, <argument><expr><operator pos:line="4136" pos:column="35">-<pos:position pos:line="4136" pos:column="36"/></operator><literal type="number" pos:line="4136" pos:column="36">1<pos:position pos:line="4136" pos:column="37"/></literal></expr></argument>, <argument><expr><name pos:line="4136" pos:column="39">SQLITE_UTF8<pos:position pos:line="4136" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="4136" pos:column="52">sqlite3_free<pos:position pos:line="4136" pos:column="64"/></name></expr></argument>)<pos:position pos:line="4136" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="4136" pos:column="66"/></expr_stmt>
  }<pos:position pos:line="4137" pos:column="4"/></block></else></if>
  <expr_stmt><expr><call><name pos:line="4138" pos:column="3">UPDATE_MAX_BLOBSIZE<pos:position pos:line="4138" pos:column="22"/></name><argument_list pos:line="4138" pos:column="22">(<argument><expr><name pos:line="4138" pos:column="23">pIn1<pos:position pos:line="4138" pos:column="27"/></name></expr></argument>)<pos:position pos:line="4138" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="4138" pos:column="29"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="4139" pos:column="3">sqlite3VdbeChangeEncoding<pos:position pos:line="4139" pos:column="28"/></name><argument_list pos:line="4139" pos:column="28">(<argument><expr><name pos:line="4139" pos:column="29">pIn1<pos:position pos:line="4139" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="4139" pos:column="35">encoding<pos:position pos:line="4139" pos:column="43"/></name></expr></argument>)<pos:position pos:line="4139" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="4139" pos:column="45"/></expr_stmt>
  <break pos:line="4140" pos:column="3">break;<pos:position pos:line="4140" pos:column="9"/></break>
}<pos:position pos:line="4141" pos:column="2"/></block>
<cpp:endif pos:line="4142" pos:column="1">#<cpp:directive pos:line="4142" pos:column="2">endif<pos:position pos:line="4142" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="4142" pos:column="8">/* SQLITE_OMIT_INTEGRITY_CHECK */</comment>

<comment type="block" pos:line="4144" pos:column="1">/* Opcode: RowSetAdd P1 P2 * * *
**
** Insert the integer value held by register P2 into a boolean index
** held in register P1.
**
** An assertion fails if P2 is not an integer.
*/</comment>
<case pos:line="4151" pos:column="1">case <expr><name pos:line="4151" pos:column="6">OP_RowSetAdd<pos:position pos:line="4151" pos:column="18"/></name></expr>:<pos:position pos:line="4151" pos:column="19"/></case> <block pos:line="4151" pos:column="20">{       <comment type="block" pos:line="4151" pos:column="28">/* in2 */</comment>
  <decl_stmt><decl><type><name pos:line="4152" pos:column="3">Mem<pos:position pos:line="4152" pos:column="6"/></name> <modifier pos:line="4152" pos:column="7">*<pos:position pos:line="4152" pos:column="8"/></modifier></type><name pos:line="4152" pos:column="8">pIdx<pos:position pos:line="4152" pos:column="12"/></name></decl>;<pos:position pos:line="4152" pos:column="13"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4153" pos:column="3">Mem<pos:position pos:line="4153" pos:column="6"/></name> <modifier pos:line="4153" pos:column="7">*<pos:position pos:line="4153" pos:column="8"/></modifier></type><name pos:line="4153" pos:column="8">pVal<pos:position pos:line="4153" pos:column="12"/></name></decl>;<pos:position pos:line="4153" pos:column="13"/></decl_stmt>
  <expr_stmt><expr><call><name pos:line="4154" pos:column="3">assert<pos:position pos:line="4154" pos:column="9"/></name><argument_list pos:line="4154" pos:column="9">( <argument><expr><name><name pos:line="4154" pos:column="11">pOp<pos:position pos:line="4154" pos:column="14"/></name><operator pos:line="4154" pos:column="14">-&gt;<pos:position pos:line="4154" pos:column="19"/></operator><name pos:line="4154" pos:column="16">p1<pos:position pos:line="4154" pos:column="18"/></name></name><operator pos:line="4154" pos:column="18">&gt;<pos:position pos:line="4154" pos:column="22"/></operator><literal type="number" pos:line="4154" pos:column="19">0<pos:position pos:line="4154" pos:column="20"/></literal> <operator pos:line="4154" pos:column="21">&amp;&amp;<pos:position pos:line="4154" pos:column="31"/></operator> <name><name pos:line="4154" pos:column="24">pOp<pos:position pos:line="4154" pos:column="27"/></name><operator pos:line="4154" pos:column="27">-&gt;<pos:position pos:line="4154" pos:column="32"/></operator><name pos:line="4154" pos:column="29">p1<pos:position pos:line="4154" pos:column="31"/></name></name><operator pos:line="4154" pos:column="31">&lt;=<pos:position pos:line="4154" pos:column="36"/></operator><name><name pos:line="4154" pos:column="33">p<pos:position pos:line="4154" pos:column="34"/></name><operator pos:line="4154" pos:column="34">-&gt;<pos:position pos:line="4154" pos:column="39"/></operator><name pos:line="4154" pos:column="36">nMem<pos:position pos:line="4154" pos:column="40"/></name></name></expr></argument> )<pos:position pos:line="4154" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="4154" pos:column="43"/></expr_stmt>
  <expr_stmt><expr><name pos:line="4155" pos:column="3">pIdx<pos:position pos:line="4155" pos:column="7"/></name> <operator pos:line="4155" pos:column="8">=<pos:position pos:line="4155" pos:column="9"/></operator> <operator pos:line="4155" pos:column="10">&amp;<pos:position pos:line="4155" pos:column="15"/></operator><name><name pos:line="4155" pos:column="11">p<pos:position pos:line="4155" pos:column="12"/></name><operator pos:line="4155" pos:column="12">-&gt;<pos:position pos:line="4155" pos:column="17"/></operator><name pos:line="4155" pos:column="14">aMem<pos:position pos:line="4155" pos:column="18"/></name><index pos:line="4155" pos:column="18">[<expr><name><name pos:line="4155" pos:column="19">pOp<pos:position pos:line="4155" pos:column="22"/></name><operator pos:line="4155" pos:column="22">-&gt;<pos:position pos:line="4155" pos:column="27"/></operator><name pos:line="4155" pos:column="24">p1<pos:position pos:line="4155" pos:column="26"/></name></name></expr>]<pos:position pos:line="4155" pos:column="27"/></index></name></expr>;<pos:position pos:line="4155" pos:column="28"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="4156" pos:column="3">assert<pos:position pos:line="4156" pos:column="9"/></name><argument_list pos:line="4156" pos:column="9">( <argument><expr><name><name pos:line="4156" pos:column="11">pOp<pos:position pos:line="4156" pos:column="14"/></name><operator pos:line="4156" pos:column="14">-&gt;<pos:position pos:line="4156" pos:column="19"/></operator><name pos:line="4156" pos:column="16">p2<pos:position pos:line="4156" pos:column="18"/></name></name><operator pos:line="4156" pos:column="18">&gt;<pos:position pos:line="4156" pos:column="22"/></operator><literal type="number" pos:line="4156" pos:column="19">0<pos:position pos:line="4156" pos:column="20"/></literal> <operator pos:line="4156" pos:column="21">&amp;&amp;<pos:position pos:line="4156" pos:column="31"/></operator> <name><name pos:line="4156" pos:column="24">pOp<pos:position pos:line="4156" pos:column="27"/></name><operator pos:line="4156" pos:column="27">-&gt;<pos:position pos:line="4156" pos:column="32"/></operator><name pos:line="4156" pos:column="29">p2<pos:position pos:line="4156" pos:column="31"/></name></name><operator pos:line="4156" pos:column="31">&lt;=<pos:position pos:line="4156" pos:column="36"/></operator><name><name pos:line="4156" pos:column="33">p<pos:position pos:line="4156" pos:column="34"/></name><operator pos:line="4156" pos:column="34">-&gt;<pos:position pos:line="4156" pos:column="39"/></operator><name pos:line="4156" pos:column="36">nMem<pos:position pos:line="4156" pos:column="40"/></name></name></expr></argument> )<pos:position pos:line="4156" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="4156" pos:column="43"/></expr_stmt>
  <expr_stmt><expr><name pos:line="4157" pos:column="3">pVal<pos:position pos:line="4157" pos:column="7"/></name> <operator pos:line="4157" pos:column="8">=<pos:position pos:line="4157" pos:column="9"/></operator> <operator pos:line="4157" pos:column="10">&amp;<pos:position pos:line="4157" pos:column="15"/></operator><name><name pos:line="4157" pos:column="11">p<pos:position pos:line="4157" pos:column="12"/></name><operator pos:line="4157" pos:column="12">-&gt;<pos:position pos:line="4157" pos:column="17"/></operator><name pos:line="4157" pos:column="14">aMem<pos:position pos:line="4157" pos:column="18"/></name><index pos:line="4157" pos:column="18">[<expr><name><name pos:line="4157" pos:column="19">pOp<pos:position pos:line="4157" pos:column="22"/></name><operator pos:line="4157" pos:column="22">-&gt;<pos:position pos:line="4157" pos:column="27"/></operator><name pos:line="4157" pos:column="24">p2<pos:position pos:line="4157" pos:column="26"/></name></name></expr>]<pos:position pos:line="4157" pos:column="27"/></index></name></expr>;<pos:position pos:line="4157" pos:column="28"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="4158" pos:column="3">assert<pos:position pos:line="4158" pos:column="9"/></name><argument_list pos:line="4158" pos:column="9">( <argument><expr><operator pos:line="4158" pos:column="11">(<pos:position pos:line="4158" pos:column="12"/></operator><name><name pos:line="4158" pos:column="12">pVal<pos:position pos:line="4158" pos:column="16"/></name><operator pos:line="4158" pos:column="16">-&gt;<pos:position pos:line="4158" pos:column="21"/></operator><name pos:line="4158" pos:column="18">flags<pos:position pos:line="4158" pos:column="23"/></name></name> <operator pos:line="4158" pos:column="24">&amp;<pos:position pos:line="4158" pos:column="29"/></operator> <name pos:line="4158" pos:column="26">MEM_Int<pos:position pos:line="4158" pos:column="33"/></name><operator pos:line="4158" pos:column="33">)<pos:position pos:line="4158" pos:column="34"/></operator><operator pos:line="4158" pos:column="34">!=<pos:position pos:line="4158" pos:column="36"/></operator><literal type="number" pos:line="4158" pos:column="36">0<pos:position pos:line="4158" pos:column="37"/></literal></expr></argument> )<pos:position pos:line="4158" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="4158" pos:column="40"/></expr_stmt>
  <if pos:line="4159" pos:column="3">if<condition pos:line="4159" pos:column="5">( <expr><operator pos:line="4159" pos:column="7">(<pos:position pos:line="4159" pos:column="8"/></operator><name><name pos:line="4159" pos:column="8">pIdx<pos:position pos:line="4159" pos:column="12"/></name><operator pos:line="4159" pos:column="12">-&gt;<pos:position pos:line="4159" pos:column="17"/></operator><name pos:line="4159" pos:column="14">flags<pos:position pos:line="4159" pos:column="19"/></name></name> <operator pos:line="4159" pos:column="20">&amp;<pos:position pos:line="4159" pos:column="25"/></operator> <name pos:line="4159" pos:column="22">MEM_RowSet<pos:position pos:line="4159" pos:column="32"/></name><operator pos:line="4159" pos:column="32">)<pos:position pos:line="4159" pos:column="33"/></operator><operator pos:line="4159" pos:column="33">==<pos:position pos:line="4159" pos:column="35"/></operator><literal type="number" pos:line="4159" pos:column="35">0<pos:position pos:line="4159" pos:column="36"/></literal></expr> )<pos:position pos:line="4159" pos:column="38"/></condition><then><block pos:line="4159" pos:column="38">{
    <expr_stmt><expr><call><name pos:line="4160" pos:column="5">sqlite3VdbeMemSetRowSet<pos:position pos:line="4160" pos:column="28"/></name><argument_list pos:line="4160" pos:column="28">(<argument><expr><name pos:line="4160" pos:column="29">pIdx<pos:position pos:line="4160" pos:column="33"/></name></expr></argument>)<pos:position pos:line="4160" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="4160" pos:column="35"/></expr_stmt>
    <if pos:line="4161" pos:column="5">if<condition pos:line="4161" pos:column="7">( <expr><operator pos:line="4161" pos:column="9">(<pos:position pos:line="4161" pos:column="10"/></operator><name><name pos:line="4161" pos:column="10">pIdx<pos:position pos:line="4161" pos:column="14"/></name><operator pos:line="4161" pos:column="14">-&gt;<pos:position pos:line="4161" pos:column="19"/></operator><name pos:line="4161" pos:column="16">flags<pos:position pos:line="4161" pos:column="21"/></name></name> <operator pos:line="4161" pos:column="22">&amp;<pos:position pos:line="4161" pos:column="27"/></operator> <name pos:line="4161" pos:column="24">MEM_RowSet<pos:position pos:line="4161" pos:column="34"/></name><operator pos:line="4161" pos:column="34">)<pos:position pos:line="4161" pos:column="35"/></operator><operator pos:line="4161" pos:column="35">==<pos:position pos:line="4161" pos:column="37"/></operator><literal type="number" pos:line="4161" pos:column="37">0<pos:position pos:line="4161" pos:column="38"/></literal></expr> )<pos:position pos:line="4161" pos:column="40"/></condition><then pos:line="4161" pos:column="40"> <block type="pseudo"><goto pos:line="4161" pos:column="41">goto <name pos:line="4161" pos:column="46">no_mem<pos:position pos:line="4161" pos:column="52"/></name>;<pos:position pos:line="4161" pos:column="53"/></goto></block></then></if>
  }<pos:position pos:line="4162" pos:column="4"/></block></then></if>
  <expr_stmt><expr><call><name pos:line="4163" pos:column="3">sqlite3RowSetInsert<pos:position pos:line="4163" pos:column="22"/></name><argument_list pos:line="4163" pos:column="22">(<argument><expr><name><name pos:line="4163" pos:column="23">pIdx<pos:position pos:line="4163" pos:column="27"/></name><operator pos:line="4163" pos:column="27">-&gt;<pos:position pos:line="4163" pos:column="32"/></operator><name pos:line="4163" pos:column="29">u<pos:position pos:line="4163" pos:column="30"/></name><operator pos:line="4163" pos:column="30">.<pos:position pos:line="4163" pos:column="31"/></operator><name pos:line="4163" pos:column="31">pRowSet<pos:position pos:line="4163" pos:column="38"/></name></name></expr></argument>, <argument><expr><name><name pos:line="4163" pos:column="40">pVal<pos:position pos:line="4163" pos:column="44"/></name><operator pos:line="4163" pos:column="44">-&gt;<pos:position pos:line="4163" pos:column="49"/></operator><name pos:line="4163" pos:column="46">u<pos:position pos:line="4163" pos:column="47"/></name><operator pos:line="4163" pos:column="47">.<pos:position pos:line="4163" pos:column="48"/></operator><name pos:line="4163" pos:column="48">i<pos:position pos:line="4163" pos:column="49"/></name></name></expr></argument>)<pos:position pos:line="4163" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="4163" pos:column="51"/></expr_stmt>
  <break pos:line="4164" pos:column="3">break;<pos:position pos:line="4164" pos:column="9"/></break>
}<pos:position pos:line="4165" pos:column="2"/></block>

<comment type="block" pos:line="4167" pos:column="1">/* Opcode: RowSetRead P1 P2 P3 * *
**
** Extract the smallest value from boolean index P1 and put that value into
** register P3.  Or, if boolean index P1 is initially empty, leave P3
** unchanged and jump to instruction P2.
*/</comment>
<case pos:line="4173" pos:column="1">case <expr><name pos:line="4173" pos:column="6">OP_RowSetRead<pos:position pos:line="4173" pos:column="19"/></name></expr>:<pos:position pos:line="4173" pos:column="20"/></case> <block pos:line="4173" pos:column="21">{       <comment type="block" pos:line="4173" pos:column="29">/* jump, out3 */</comment>
  <decl_stmt><decl><type><name pos:line="4174" pos:column="3">Mem<pos:position pos:line="4174" pos:column="6"/></name> <modifier pos:line="4174" pos:column="7">*<pos:position pos:line="4174" pos:column="8"/></modifier></type><name pos:line="4174" pos:column="8">pIdx<pos:position pos:line="4174" pos:column="12"/></name></decl>;<pos:position pos:line="4174" pos:column="13"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4175" pos:column="3">i64<pos:position pos:line="4175" pos:column="6"/></name></type> <name pos:line="4175" pos:column="7">val<pos:position pos:line="4175" pos:column="10"/></name></decl>;<pos:position pos:line="4175" pos:column="11"/></decl_stmt>
  <expr_stmt><expr><call><name pos:line="4176" pos:column="3">assert<pos:position pos:line="4176" pos:column="9"/></name><argument_list pos:line="4176" pos:column="9">( <argument><expr><name><name pos:line="4176" pos:column="11">pOp<pos:position pos:line="4176" pos:column="14"/></name><operator pos:line="4176" pos:column="14">-&gt;<pos:position pos:line="4176" pos:column="19"/></operator><name pos:line="4176" pos:column="16">p1<pos:position pos:line="4176" pos:column="18"/></name></name><operator pos:line="4176" pos:column="18">&gt;<pos:position pos:line="4176" pos:column="22"/></operator><literal type="number" pos:line="4176" pos:column="19">0<pos:position pos:line="4176" pos:column="20"/></literal> <operator pos:line="4176" pos:column="21">&amp;&amp;<pos:position pos:line="4176" pos:column="31"/></operator> <name><name pos:line="4176" pos:column="24">pOp<pos:position pos:line="4176" pos:column="27"/></name><operator pos:line="4176" pos:column="27">-&gt;<pos:position pos:line="4176" pos:column="32"/></operator><name pos:line="4176" pos:column="29">p1<pos:position pos:line="4176" pos:column="31"/></name></name><operator pos:line="4176" pos:column="31">&lt;=<pos:position pos:line="4176" pos:column="36"/></operator><name><name pos:line="4176" pos:column="33">p<pos:position pos:line="4176" pos:column="34"/></name><operator pos:line="4176" pos:column="34">-&gt;<pos:position pos:line="4176" pos:column="39"/></operator><name pos:line="4176" pos:column="36">nMem<pos:position pos:line="4176" pos:column="40"/></name></name></expr></argument> )<pos:position pos:line="4176" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="4176" pos:column="43"/></expr_stmt>
  <expr_stmt><expr><name pos:line="4177" pos:column="3">CHECK_FOR_INTERRUPT<pos:position pos:line="4177" pos:column="22"/></name></expr>;<pos:position pos:line="4177" pos:column="23"/></expr_stmt>
  <expr_stmt><expr><name pos:line="4178" pos:column="3">pIdx<pos:position pos:line="4178" pos:column="7"/></name> <operator pos:line="4178" pos:column="8">=<pos:position pos:line="4178" pos:column="9"/></operator> <operator pos:line="4178" pos:column="10">&amp;<pos:position pos:line="4178" pos:column="15"/></operator><name><name pos:line="4178" pos:column="11">p<pos:position pos:line="4178" pos:column="12"/></name><operator pos:line="4178" pos:column="12">-&gt;<pos:position pos:line="4178" pos:column="17"/></operator><name pos:line="4178" pos:column="14">aMem<pos:position pos:line="4178" pos:column="18"/></name><index pos:line="4178" pos:column="18">[<expr><name><name pos:line="4178" pos:column="19">pOp<pos:position pos:line="4178" pos:column="22"/></name><operator pos:line="4178" pos:column="22">-&gt;<pos:position pos:line="4178" pos:column="27"/></operator><name pos:line="4178" pos:column="24">p1<pos:position pos:line="4178" pos:column="26"/></name></name></expr>]<pos:position pos:line="4178" pos:column="27"/></index></name></expr>;<pos:position pos:line="4178" pos:column="28"/></expr_stmt>
  <expr_stmt><expr><name pos:line="4179" pos:column="3">pOut<pos:position pos:line="4179" pos:column="7"/></name> <operator pos:line="4179" pos:column="8">=<pos:position pos:line="4179" pos:column="9"/></operator> <operator pos:line="4179" pos:column="10">&amp;<pos:position pos:line="4179" pos:column="15"/></operator><name><name pos:line="4179" pos:column="11">p<pos:position pos:line="4179" pos:column="12"/></name><operator pos:line="4179" pos:column="12">-&gt;<pos:position pos:line="4179" pos:column="17"/></operator><name pos:line="4179" pos:column="14">aMem<pos:position pos:line="4179" pos:column="18"/></name><index pos:line="4179" pos:column="18">[<expr><name><name pos:line="4179" pos:column="19">pOp<pos:position pos:line="4179" pos:column="22"/></name><operator pos:line="4179" pos:column="22">-&gt;<pos:position pos:line="4179" pos:column="27"/></operator><name pos:line="4179" pos:column="24">p3<pos:position pos:line="4179" pos:column="26"/></name></name></expr>]<pos:position pos:line="4179" pos:column="27"/></index></name></expr>;<pos:position pos:line="4179" pos:column="28"/></expr_stmt>
  <if pos:line="4180" pos:column="3">if<condition pos:line="4180" pos:column="5">( <expr><operator pos:line="4180" pos:column="7">(<pos:position pos:line="4180" pos:column="8"/></operator><name><name pos:line="4180" pos:column="8">pIdx<pos:position pos:line="4180" pos:column="12"/></name><operator pos:line="4180" pos:column="12">-&gt;<pos:position pos:line="4180" pos:column="17"/></operator><name pos:line="4180" pos:column="14">flags<pos:position pos:line="4180" pos:column="19"/></name></name> <operator pos:line="4180" pos:column="20">&amp;<pos:position pos:line="4180" pos:column="25"/></operator> <name pos:line="4180" pos:column="22">MEM_RowSet<pos:position pos:line="4180" pos:column="32"/></name><operator pos:line="4180" pos:column="32">)<pos:position pos:line="4180" pos:column="33"/></operator><operator pos:line="4180" pos:column="33">==<pos:position pos:line="4180" pos:column="35"/></operator><literal type="number" pos:line="4180" pos:column="35">0<pos:position pos:line="4180" pos:column="36"/></literal> 
   <operator pos:line="4181" pos:column="4">||<pos:position pos:line="4181" pos:column="6"/></operator> <call><name pos:line="4181" pos:column="7">sqlite3RowSetNext<pos:position pos:line="4181" pos:column="24"/></name><argument_list pos:line="4181" pos:column="24">(<argument><expr><name><name pos:line="4181" pos:column="25">pIdx<pos:position pos:line="4181" pos:column="29"/></name><operator pos:line="4181" pos:column="29">-&gt;<pos:position pos:line="4181" pos:column="34"/></operator><name pos:line="4181" pos:column="31">u<pos:position pos:line="4181" pos:column="32"/></name><operator pos:line="4181" pos:column="32">.<pos:position pos:line="4181" pos:column="33"/></operator><name pos:line="4181" pos:column="33">pRowSet<pos:position pos:line="4181" pos:column="40"/></name></name></expr></argument>, <argument><expr><operator pos:line="4181" pos:column="42">&amp;<pos:position pos:line="4181" pos:column="47"/></operator><name pos:line="4181" pos:column="43">val<pos:position pos:line="4181" pos:column="46"/></name></expr></argument>)<pos:position pos:line="4181" pos:column="47"/></argument_list></call><operator pos:line="4181" pos:column="47">==<pos:position pos:line="4181" pos:column="49"/></operator><literal type="number" pos:line="4181" pos:column="49">0<pos:position pos:line="4181" pos:column="50"/></literal></expr>
  )<pos:position pos:line="4182" pos:column="4"/></condition><then><block pos:line="4182" pos:column="4">{
    <comment type="block" pos:line="4183" pos:column="5">/* The boolean index is empty */</comment>
    <expr_stmt><expr><call><name pos:line="4184" pos:column="5">sqlite3VdbeMemSetNull<pos:position pos:line="4184" pos:column="26"/></name><argument_list pos:line="4184" pos:column="26">(<argument><expr><name pos:line="4184" pos:column="27">pIdx<pos:position pos:line="4184" pos:column="31"/></name></expr></argument>)<pos:position pos:line="4184" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="4184" pos:column="33"/></expr_stmt>
    <expr_stmt><expr><name pos:line="4185" pos:column="5">pc<pos:position pos:line="4185" pos:column="7"/></name> <operator pos:line="4185" pos:column="8">=<pos:position pos:line="4185" pos:column="9"/></operator> <name><name pos:line="4185" pos:column="10">pOp<pos:position pos:line="4185" pos:column="13"/></name><operator pos:line="4185" pos:column="13">-&gt;<pos:position pos:line="4185" pos:column="18"/></operator><name pos:line="4185" pos:column="15">p2<pos:position pos:line="4185" pos:column="17"/></name></name> <operator pos:line="4185" pos:column="18">-<pos:position pos:line="4185" pos:column="19"/></operator> <literal type="number" pos:line="4185" pos:column="20">1<pos:position pos:line="4185" pos:column="21"/></literal></expr>;<pos:position pos:line="4185" pos:column="22"/></expr_stmt>
  }<pos:position pos:line="4186" pos:column="4"/></block></then><else pos:line="4186" pos:column="4">else<block pos:line="4186" pos:column="8">{
    <comment type="block" pos:line="4187" pos:column="5">/* A value was pulled from the index */</comment>
    <expr_stmt><expr><call><name pos:line="4188" pos:column="5">assert<pos:position pos:line="4188" pos:column="11"/></name><argument_list pos:line="4188" pos:column="11">( <argument><expr><name><name pos:line="4188" pos:column="13">pOp<pos:position pos:line="4188" pos:column="16"/></name><operator pos:line="4188" pos:column="16">-&gt;<pos:position pos:line="4188" pos:column="21"/></operator><name pos:line="4188" pos:column="18">p3<pos:position pos:line="4188" pos:column="20"/></name></name><operator pos:line="4188" pos:column="20">&gt;<pos:position pos:line="4188" pos:column="24"/></operator><literal type="number" pos:line="4188" pos:column="21">0<pos:position pos:line="4188" pos:column="22"/></literal> <operator pos:line="4188" pos:column="23">&amp;&amp;<pos:position pos:line="4188" pos:column="33"/></operator> <name><name pos:line="4188" pos:column="26">pOp<pos:position pos:line="4188" pos:column="29"/></name><operator pos:line="4188" pos:column="29">-&gt;<pos:position pos:line="4188" pos:column="34"/></operator><name pos:line="4188" pos:column="31">p3<pos:position pos:line="4188" pos:column="33"/></name></name><operator pos:line="4188" pos:column="33">&lt;=<pos:position pos:line="4188" pos:column="38"/></operator><name><name pos:line="4188" pos:column="35">p<pos:position pos:line="4188" pos:column="36"/></name><operator pos:line="4188" pos:column="36">-&gt;<pos:position pos:line="4188" pos:column="41"/></operator><name pos:line="4188" pos:column="38">nMem<pos:position pos:line="4188" pos:column="42"/></name></name></expr></argument> )<pos:position pos:line="4188" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="4188" pos:column="45"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="4189" pos:column="5">sqlite3VdbeMemSetInt64<pos:position pos:line="4189" pos:column="27"/></name><argument_list pos:line="4189" pos:column="27">(<argument><expr><name pos:line="4189" pos:column="28">pOut<pos:position pos:line="4189" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="4189" pos:column="34">val<pos:position pos:line="4189" pos:column="37"/></name></expr></argument>)<pos:position pos:line="4189" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="4189" pos:column="39"/></expr_stmt>
  }<pos:position pos:line="4190" pos:column="4"/></block></else></if>
  <break pos:line="4191" pos:column="3">break;<pos:position pos:line="4191" pos:column="9"/></break>
}<pos:position pos:line="4192" pos:column="2"/></block>

<comment type="block" pos:line="4194" pos:column="1">/* Opcode: RowSetTest P1 P2 P3 P4
**
** Register P3 is assumed to hold a 64-bit integer value. If register P1
** contains a RowSet object and that RowSet object contains
** the value held in P3, jump to register P2. Otherwise, insert the
** integer in P3 into the RowSet and continue on to the
** next opcode.
**
** The RowSet object is optimized for the case where successive sets
** of integers, where each set contains no duplicates. Each set
** of values is identified by a unique P4 value. The first set
** must have P4==0, the final set P4=-1.  P4 must be either -1 or
** non-negative.  For non-negative values of P4 only the lower 4
** bits are significant.
**
** This allows optimizations: (a) when P4==0 there is no need to test
** the rowset object for P3, as it is guaranteed not to contain it,
** (b) when P4==-1 there is no need to insert the value, as it will
** never be tested for, and (c) when a value that is part of set X is
** inserted, there is no need to search to see if the same value was
** previously inserted as part of set X (only if it was previously
** inserted as part of some other set).
*/</comment>
<case pos:line="4217" pos:column="1">case <expr><name pos:line="4217" pos:column="6">OP_RowSetTest<pos:position pos:line="4217" pos:column="19"/></name></expr>:<pos:position pos:line="4217" pos:column="20"/></case> <block pos:line="4217" pos:column="21">{                     <comment type="block" pos:line="4217" pos:column="43">/* jump, in1, in3 */</comment>
  <decl_stmt><decl><type><name pos:line="4218" pos:column="3">int<pos:position pos:line="4218" pos:column="6"/></name></type> <name pos:line="4218" pos:column="7">iSet<pos:position pos:line="4218" pos:column="11"/></name></decl>;<pos:position pos:line="4218" pos:column="12"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4219" pos:column="3">int<pos:position pos:line="4219" pos:column="6"/></name></type> <name pos:line="4219" pos:column="7">exists<pos:position pos:line="4219" pos:column="13"/></name></decl>;<pos:position pos:line="4219" pos:column="14"/></decl_stmt>

  <expr_stmt><expr><name pos:line="4221" pos:column="3">iSet<pos:position pos:line="4221" pos:column="7"/></name> <operator pos:line="4221" pos:column="8">=<pos:position pos:line="4221" pos:column="9"/></operator> <name><name pos:line="4221" pos:column="10">pOp<pos:position pos:line="4221" pos:column="13"/></name><operator pos:line="4221" pos:column="13">-&gt;<pos:position pos:line="4221" pos:column="18"/></operator><name pos:line="4221" pos:column="15">p4<pos:position pos:line="4221" pos:column="17"/></name><operator pos:line="4221" pos:column="17">.<pos:position pos:line="4221" pos:column="18"/></operator><name pos:line="4221" pos:column="18">i<pos:position pos:line="4221" pos:column="19"/></name></name></expr>;<pos:position pos:line="4221" pos:column="20"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="4222" pos:column="3">assert<pos:position pos:line="4222" pos:column="9"/></name><argument_list pos:line="4222" pos:column="9">( <argument><expr><name><name pos:line="4222" pos:column="11">pIn3<pos:position pos:line="4222" pos:column="15"/></name><operator pos:line="4222" pos:column="15">-&gt;<pos:position pos:line="4222" pos:column="20"/></operator><name pos:line="4222" pos:column="17">flags<pos:position pos:line="4222" pos:column="22"/></name></name><operator pos:line="4222" pos:column="22">&amp;<pos:position pos:line="4222" pos:column="27"/></operator><name pos:line="4222" pos:column="23">MEM_Int<pos:position pos:line="4222" pos:column="30"/></name></expr></argument> )<pos:position pos:line="4222" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="4222" pos:column="33"/></expr_stmt>

  <comment type="block" pos:line="4224" pos:column="3">/* If there is anything other than a rowset object in memory cell P1,
  ** delete it now and initialize P1 with an empty rowset
  */</comment>
  <if pos:line="4227" pos:column="3">if<condition pos:line="4227" pos:column="5">( <expr><operator pos:line="4227" pos:column="7">(<pos:position pos:line="4227" pos:column="8"/></operator><name><name pos:line="4227" pos:column="8">pIn1<pos:position pos:line="4227" pos:column="12"/></name><operator pos:line="4227" pos:column="12">-&gt;<pos:position pos:line="4227" pos:column="17"/></operator><name pos:line="4227" pos:column="14">flags<pos:position pos:line="4227" pos:column="19"/></name></name> <operator pos:line="4227" pos:column="20">&amp;<pos:position pos:line="4227" pos:column="25"/></operator> <name pos:line="4227" pos:column="22">MEM_RowSet<pos:position pos:line="4227" pos:column="32"/></name><operator pos:line="4227" pos:column="32">)<pos:position pos:line="4227" pos:column="33"/></operator><operator pos:line="4227" pos:column="33">==<pos:position pos:line="4227" pos:column="35"/></operator><literal type="number" pos:line="4227" pos:column="35">0<pos:position pos:line="4227" pos:column="36"/></literal></expr> )<pos:position pos:line="4227" pos:column="38"/></condition><then><block pos:line="4227" pos:column="38">{
    <expr_stmt><expr><call><name pos:line="4228" pos:column="5">sqlite3VdbeMemSetRowSet<pos:position pos:line="4228" pos:column="28"/></name><argument_list pos:line="4228" pos:column="28">(<argument><expr><name pos:line="4228" pos:column="29">pIn1<pos:position pos:line="4228" pos:column="33"/></name></expr></argument>)<pos:position pos:line="4228" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="4228" pos:column="35"/></expr_stmt>
    <if pos:line="4229" pos:column="5">if<condition pos:line="4229" pos:column="7">( <expr><operator pos:line="4229" pos:column="9">(<pos:position pos:line="4229" pos:column="10"/></operator><name><name pos:line="4229" pos:column="10">pIn1<pos:position pos:line="4229" pos:column="14"/></name><operator pos:line="4229" pos:column="14">-&gt;<pos:position pos:line="4229" pos:column="19"/></operator><name pos:line="4229" pos:column="16">flags<pos:position pos:line="4229" pos:column="21"/></name></name> <operator pos:line="4229" pos:column="22">&amp;<pos:position pos:line="4229" pos:column="27"/></operator> <name pos:line="4229" pos:column="24">MEM_RowSet<pos:position pos:line="4229" pos:column="34"/></name><operator pos:line="4229" pos:column="34">)<pos:position pos:line="4229" pos:column="35"/></operator><operator pos:line="4229" pos:column="35">==<pos:position pos:line="4229" pos:column="37"/></operator><literal type="number" pos:line="4229" pos:column="37">0<pos:position pos:line="4229" pos:column="38"/></literal></expr> )<pos:position pos:line="4229" pos:column="40"/></condition><then pos:line="4229" pos:column="40"> <block type="pseudo"><goto pos:line="4229" pos:column="41">goto <name pos:line="4229" pos:column="46">no_mem<pos:position pos:line="4229" pos:column="52"/></name>;<pos:position pos:line="4229" pos:column="53"/></goto></block></then></if>
  }<pos:position pos:line="4230" pos:column="4"/></block></then></if>

  <expr_stmt><expr><call><name pos:line="4232" pos:column="3">assert<pos:position pos:line="4232" pos:column="9"/></name><argument_list pos:line="4232" pos:column="9">( <argument><expr><name><name pos:line="4232" pos:column="11">pOp<pos:position pos:line="4232" pos:column="14"/></name><operator pos:line="4232" pos:column="14">-&gt;<pos:position pos:line="4232" pos:column="19"/></operator><name pos:line="4232" pos:column="16">p4type<pos:position pos:line="4232" pos:column="22"/></name></name><operator pos:line="4232" pos:column="22">==<pos:position pos:line="4232" pos:column="24"/></operator><name pos:line="4232" pos:column="24">P4_INT32<pos:position pos:line="4232" pos:column="32"/></name></expr></argument> )<pos:position pos:line="4232" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="4232" pos:column="35"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="4233" pos:column="3">assert<pos:position pos:line="4233" pos:column="9"/></name><argument_list pos:line="4233" pos:column="9">( <argument><expr><name pos:line="4233" pos:column="11">iSet<pos:position pos:line="4233" pos:column="15"/></name><operator pos:line="4233" pos:column="15">==<pos:position pos:line="4233" pos:column="17"/></operator><operator pos:line="4233" pos:column="17">-<pos:position pos:line="4233" pos:column="18"/></operator><literal type="number" pos:line="4233" pos:column="18">1<pos:position pos:line="4233" pos:column="19"/></literal> <operator pos:line="4233" pos:column="20">||<pos:position pos:line="4233" pos:column="22"/></operator> <name pos:line="4233" pos:column="23">iSet<pos:position pos:line="4233" pos:column="27"/></name><operator pos:line="4233" pos:column="27">&gt;=<pos:position pos:line="4233" pos:column="32"/></operator><literal type="number" pos:line="4233" pos:column="29">0<pos:position pos:line="4233" pos:column="30"/></literal></expr></argument> )<pos:position pos:line="4233" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="4233" pos:column="33"/></expr_stmt>
  <if pos:line="4234" pos:column="3">if<condition pos:line="4234" pos:column="5">( <expr><name pos:line="4234" pos:column="7">iSet<pos:position pos:line="4234" pos:column="11"/></name></expr> )<pos:position pos:line="4234" pos:column="13"/></condition><then><block pos:line="4234" pos:column="13">{
    <expr_stmt><expr><name pos:line="4235" pos:column="5">exists<pos:position pos:line="4235" pos:column="11"/></name> <operator pos:line="4235" pos:column="12">=<pos:position pos:line="4235" pos:column="13"/></operator> <call><name pos:line="4235" pos:column="14">sqlite3RowSetTest<pos:position pos:line="4235" pos:column="31"/></name><argument_list pos:line="4235" pos:column="31">(<argument><expr><name><name pos:line="4235" pos:column="32">pIn1<pos:position pos:line="4235" pos:column="36"/></name><operator pos:line="4235" pos:column="36">-&gt;<pos:position pos:line="4235" pos:column="41"/></operator><name pos:line="4235" pos:column="38">u<pos:position pos:line="4235" pos:column="39"/></name><operator pos:line="4235" pos:column="39">.<pos:position pos:line="4235" pos:column="40"/></operator><name pos:line="4235" pos:column="40">pRowSet<pos:position pos:line="4235" pos:column="47"/></name></name></expr></argument>, 
                               <argument><expr><call pos:line="4236" pos:column="32">(<name pos:line="4236" pos:column="33">u8<pos:position pos:line="4236" pos:column="35"/></name>)<argument_list pos:line="4236" pos:column="36">(<argument><expr><ternary><condition><expr><name pos:line="4236" pos:column="37">iSet<pos:position pos:line="4236" pos:column="41"/></name><operator pos:line="4236" pos:column="41">&gt;=<pos:position pos:line="4236" pos:column="46"/></operator><literal type="number" pos:line="4236" pos:column="43">0<pos:position pos:line="4236" pos:column="44"/></literal></expr> ?<pos:position pos:line="4236" pos:column="46"/></condition><then pos:line="4236" pos:column="46"> <expr><name pos:line="4236" pos:column="47">iSet<pos:position pos:line="4236" pos:column="51"/></name> <operator pos:line="4236" pos:column="52">&amp;<pos:position pos:line="4236" pos:column="57"/></operator> <literal type="number" pos:line="4236" pos:column="54">0xf<pos:position pos:line="4236" pos:column="57"/></literal></expr> <pos:position pos:line="4236" pos:column="58"/></then><else pos:line="4236" pos:column="58">: <expr><literal type="number" pos:line="4236" pos:column="60">0xff<pos:position pos:line="4236" pos:column="64"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="4236" pos:column="65"/></argument_list></call></expr></argument>,
                               <argument><expr><name><name pos:line="4237" pos:column="32">pIn3<pos:position pos:line="4237" pos:column="36"/></name><operator pos:line="4237" pos:column="36">-&gt;<pos:position pos:line="4237" pos:column="41"/></operator><name pos:line="4237" pos:column="38">u<pos:position pos:line="4237" pos:column="39"/></name><operator pos:line="4237" pos:column="39">.<pos:position pos:line="4237" pos:column="40"/></operator><name pos:line="4237" pos:column="40">i<pos:position pos:line="4237" pos:column="41"/></name></name></expr></argument>)<pos:position pos:line="4237" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="4237" pos:column="43"/></expr_stmt>
    <if pos:line="4238" pos:column="5">if<condition pos:line="4238" pos:column="7">( <expr><name pos:line="4238" pos:column="9">exists<pos:position pos:line="4238" pos:column="15"/></name></expr> )<pos:position pos:line="4238" pos:column="17"/></condition><then><block pos:line="4238" pos:column="17">{
      <expr_stmt><expr><name pos:line="4239" pos:column="7">pc<pos:position pos:line="4239" pos:column="9"/></name> <operator pos:line="4239" pos:column="10">=<pos:position pos:line="4239" pos:column="11"/></operator> <name><name pos:line="4239" pos:column="12">pOp<pos:position pos:line="4239" pos:column="15"/></name><operator pos:line="4239" pos:column="15">-&gt;<pos:position pos:line="4239" pos:column="20"/></operator><name pos:line="4239" pos:column="17">p2<pos:position pos:line="4239" pos:column="19"/></name></name> <operator pos:line="4239" pos:column="20">-<pos:position pos:line="4239" pos:column="21"/></operator> <literal type="number" pos:line="4239" pos:column="22">1<pos:position pos:line="4239" pos:column="23"/></literal></expr>;<pos:position pos:line="4239" pos:column="24"/></expr_stmt>
      <break pos:line="4240" pos:column="7">break;<pos:position pos:line="4240" pos:column="13"/></break>
    }<pos:position pos:line="4241" pos:column="6"/></block></then></if>
  }<pos:position pos:line="4242" pos:column="4"/></block></then></if>
  <if pos:line="4243" pos:column="3">if<condition pos:line="4243" pos:column="5">( <expr><name pos:line="4243" pos:column="7">iSet<pos:position pos:line="4243" pos:column="11"/></name><operator pos:line="4243" pos:column="11">&gt;=<pos:position pos:line="4243" pos:column="16"/></operator><literal type="number" pos:line="4243" pos:column="13">0<pos:position pos:line="4243" pos:column="14"/></literal></expr> )<pos:position pos:line="4243" pos:column="16"/></condition><then><block pos:line="4243" pos:column="16">{
    <expr_stmt><expr><call><name pos:line="4244" pos:column="5">sqlite3RowSetInsert<pos:position pos:line="4244" pos:column="24"/></name><argument_list pos:line="4244" pos:column="24">(<argument><expr><name><name pos:line="4244" pos:column="25">pIn1<pos:position pos:line="4244" pos:column="29"/></name><operator pos:line="4244" pos:column="29">-&gt;<pos:position pos:line="4244" pos:column="34"/></operator><name pos:line="4244" pos:column="31">u<pos:position pos:line="4244" pos:column="32"/></name><operator pos:line="4244" pos:column="32">.<pos:position pos:line="4244" pos:column="33"/></operator><name pos:line="4244" pos:column="33">pRowSet<pos:position pos:line="4244" pos:column="40"/></name></name></expr></argument>, <argument><expr><name><name pos:line="4244" pos:column="42">pIn3<pos:position pos:line="4244" pos:column="46"/></name><operator pos:line="4244" pos:column="46">-&gt;<pos:position pos:line="4244" pos:column="51"/></operator><name pos:line="4244" pos:column="48">u<pos:position pos:line="4244" pos:column="49"/></name><operator pos:line="4244" pos:column="49">.<pos:position pos:line="4244" pos:column="50"/></operator><name pos:line="4244" pos:column="50">i<pos:position pos:line="4244" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="4244" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="4244" pos:column="53"/></expr_stmt>
  }<pos:position pos:line="4245" pos:column="4"/></block></then></if>
  <break pos:line="4246" pos:column="3">break;<pos:position pos:line="4246" pos:column="9"/></break>
}<pos:position pos:line="4247" pos:column="2"/></block>


<cpp:ifndef pos:line="4250" pos:column="1">#<cpp:directive pos:line="4250" pos:column="2">ifndef<pos:position pos:line="4250" pos:column="8"/></cpp:directive> <name pos:line="4250" pos:column="9">SQLITE_OMIT_TRIGGER<pos:position pos:line="4250" pos:column="28"/></name></cpp:ifndef>
<comment type="block" pos:line="4251" pos:column="1">/* Opcode: ContextPush * * * 
**
** Save the current Vdbe context such that it can be restored by a ContextPop
** opcode. The context stores the last insert row id, the last statement change
** count, and the current statement change count.
*/</comment>
<case pos:line="4257" pos:column="1">case <expr><name pos:line="4257" pos:column="6">OP_ContextPush<pos:position pos:line="4257" pos:column="20"/></name></expr>:<pos:position pos:line="4257" pos:column="21"/></case> <block pos:line="4257" pos:column="22">{
  <decl_stmt><decl><type><name pos:line="4258" pos:column="3">int<pos:position pos:line="4258" pos:column="6"/></name></type> <name pos:line="4258" pos:column="7">i<pos:position pos:line="4258" pos:column="8"/></name></decl>;<pos:position pos:line="4258" pos:column="9"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4259" pos:column="3">Context<pos:position pos:line="4259" pos:column="10"/></name> <modifier pos:line="4259" pos:column="11">*<pos:position pos:line="4259" pos:column="12"/></modifier></type><name pos:line="4259" pos:column="12">pContext<pos:position pos:line="4259" pos:column="20"/></name></decl>;<pos:position pos:line="4259" pos:column="21"/></decl_stmt>

  <expr_stmt><expr><name pos:line="4261" pos:column="3">i<pos:position pos:line="4261" pos:column="4"/></name> <operator pos:line="4261" pos:column="5">=<pos:position pos:line="4261" pos:column="6"/></operator> <name><name pos:line="4261" pos:column="7">p<pos:position pos:line="4261" pos:column="8"/></name><operator pos:line="4261" pos:column="8">-&gt;<pos:position pos:line="4261" pos:column="13"/></operator><name pos:line="4261" pos:column="10">contextStackTop<pos:position pos:line="4261" pos:column="25"/></name></name><operator pos:line="4261" pos:column="25">++<pos:position pos:line="4261" pos:column="27"/></operator></expr>;<pos:position pos:line="4261" pos:column="28"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="4262" pos:column="3">assert<pos:position pos:line="4262" pos:column="9"/></name><argument_list pos:line="4262" pos:column="9">( <argument><expr><name pos:line="4262" pos:column="11">i<pos:position pos:line="4262" pos:column="12"/></name><operator pos:line="4262" pos:column="12">&gt;=<pos:position pos:line="4262" pos:column="17"/></operator><literal type="number" pos:line="4262" pos:column="14">0<pos:position pos:line="4262" pos:column="15"/></literal></expr></argument> )<pos:position pos:line="4262" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="4262" pos:column="18"/></expr_stmt>
  <comment type="block" pos:line="4263" pos:column="3">/* FIX ME: This should be allocated as part of the vdbe at compile-time */</comment>
  <if pos:line="4264" pos:column="3">if<condition pos:line="4264" pos:column="5">( <expr><name pos:line="4264" pos:column="7">i<pos:position pos:line="4264" pos:column="8"/></name><operator pos:line="4264" pos:column="8">&gt;=<pos:position pos:line="4264" pos:column="13"/></operator><name><name pos:line="4264" pos:column="10">p<pos:position pos:line="4264" pos:column="11"/></name><operator pos:line="4264" pos:column="11">-&gt;<pos:position pos:line="4264" pos:column="16"/></operator><name pos:line="4264" pos:column="13">contextStackDepth<pos:position pos:line="4264" pos:column="30"/></name></name></expr> )<pos:position pos:line="4264" pos:column="32"/></condition><then><block pos:line="4264" pos:column="32">{
    <expr_stmt><expr><name><name pos:line="4265" pos:column="5">p<pos:position pos:line="4265" pos:column="6"/></name><operator pos:line="4265" pos:column="6">-&gt;<pos:position pos:line="4265" pos:column="11"/></operator><name pos:line="4265" pos:column="8">contextStackDepth<pos:position pos:line="4265" pos:column="25"/></name></name> <operator pos:line="4265" pos:column="26">=<pos:position pos:line="4265" pos:column="27"/></operator> <name pos:line="4265" pos:column="28">i<pos:position pos:line="4265" pos:column="29"/></name><operator pos:line="4265" pos:column="29">+<pos:position pos:line="4265" pos:column="30"/></operator><literal type="number" pos:line="4265" pos:column="30">1<pos:position pos:line="4265" pos:column="31"/></literal></expr>;<pos:position pos:line="4265" pos:column="32"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="4266" pos:column="5">p<pos:position pos:line="4266" pos:column="6"/></name><operator pos:line="4266" pos:column="6">-&gt;<pos:position pos:line="4266" pos:column="11"/></operator><name pos:line="4266" pos:column="8">contextStack<pos:position pos:line="4266" pos:column="20"/></name></name> <operator pos:line="4266" pos:column="21">=<pos:position pos:line="4266" pos:column="22"/></operator> <call><name pos:line="4266" pos:column="23">sqlite3DbReallocOrFree<pos:position pos:line="4266" pos:column="45"/></name><argument_list pos:line="4266" pos:column="45">(<argument><expr><name pos:line="4266" pos:column="46">db<pos:position pos:line="4266" pos:column="48"/></name></expr></argument>, <argument><expr><name><name pos:line="4266" pos:column="50">p<pos:position pos:line="4266" pos:column="51"/></name><operator pos:line="4266" pos:column="51">-&gt;<pos:position pos:line="4266" pos:column="56"/></operator><name pos:line="4266" pos:column="53">contextStack<pos:position pos:line="4266" pos:column="65"/></name></name></expr></argument>,
                                          <argument><expr><sizeof pos:line="4267" pos:column="43">sizeof<argument_list pos:line="4267" pos:column="49">(<argument><expr><name pos:line="4267" pos:column="50">Context<pos:position pos:line="4267" pos:column="57"/></name></expr></argument>)<pos:position pos:line="4267" pos:column="58"/></argument_list></sizeof><operator pos:line="4267" pos:column="58">*<pos:position pos:line="4267" pos:column="59"/></operator><operator pos:line="4267" pos:column="59">(<pos:position pos:line="4267" pos:column="60"/></operator><name pos:line="4267" pos:column="60">i<pos:position pos:line="4267" pos:column="61"/></name><operator pos:line="4267" pos:column="61">+<pos:position pos:line="4267" pos:column="62"/></operator><literal type="number" pos:line="4267" pos:column="62">1<pos:position pos:line="4267" pos:column="63"/></literal><operator pos:line="4267" pos:column="63">)<pos:position pos:line="4267" pos:column="64"/></operator></expr></argument>)<pos:position pos:line="4267" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="4267" pos:column="66"/></expr_stmt>
    <if pos:line="4268" pos:column="5">if<condition pos:line="4268" pos:column="7">( <expr><name><name pos:line="4268" pos:column="9">p<pos:position pos:line="4268" pos:column="10"/></name><operator pos:line="4268" pos:column="10">-&gt;<pos:position pos:line="4268" pos:column="15"/></operator><name pos:line="4268" pos:column="12">contextStack<pos:position pos:line="4268" pos:column="24"/></name></name><operator pos:line="4268" pos:column="24">==<pos:position pos:line="4268" pos:column="26"/></operator><literal type="number" pos:line="4268" pos:column="26">0<pos:position pos:line="4268" pos:column="27"/></literal></expr> )<pos:position pos:line="4268" pos:column="29"/></condition><then pos:line="4268" pos:column="29"> <block type="pseudo"><goto pos:line="4268" pos:column="30">goto <name pos:line="4268" pos:column="35">no_mem<pos:position pos:line="4268" pos:column="41"/></name>;<pos:position pos:line="4268" pos:column="42"/></goto></block></then></if>
  }<pos:position pos:line="4269" pos:column="4"/></block></then></if>
  <expr_stmt><expr><name pos:line="4270" pos:column="3">pContext<pos:position pos:line="4270" pos:column="11"/></name> <operator pos:line="4270" pos:column="12">=<pos:position pos:line="4270" pos:column="13"/></operator> <operator pos:line="4270" pos:column="14">&amp;<pos:position pos:line="4270" pos:column="19"/></operator><name><name pos:line="4270" pos:column="15">p<pos:position pos:line="4270" pos:column="16"/></name><operator pos:line="4270" pos:column="16">-&gt;<pos:position pos:line="4270" pos:column="21"/></operator><name pos:line="4270" pos:column="18">contextStack<pos:position pos:line="4270" pos:column="30"/></name><index pos:line="4270" pos:column="30">[<expr><name pos:line="4270" pos:column="31">i<pos:position pos:line="4270" pos:column="32"/></name></expr>]<pos:position pos:line="4270" pos:column="33"/></index></name></expr>;<pos:position pos:line="4270" pos:column="34"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="4271" pos:column="3">pContext<pos:position pos:line="4271" pos:column="11"/></name><operator pos:line="4271" pos:column="11">-&gt;<pos:position pos:line="4271" pos:column="16"/></operator><name pos:line="4271" pos:column="13">lastRowid<pos:position pos:line="4271" pos:column="22"/></name></name> <operator pos:line="4271" pos:column="23">=<pos:position pos:line="4271" pos:column="24"/></operator> <name><name pos:line="4271" pos:column="25">db<pos:position pos:line="4271" pos:column="27"/></name><operator pos:line="4271" pos:column="27">-&gt;<pos:position pos:line="4271" pos:column="32"/></operator><name pos:line="4271" pos:column="29">lastRowid<pos:position pos:line="4271" pos:column="38"/></name></name></expr>;<pos:position pos:line="4271" pos:column="39"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="4272" pos:column="3">pContext<pos:position pos:line="4272" pos:column="11"/></name><operator pos:line="4272" pos:column="11">-&gt;<pos:position pos:line="4272" pos:column="16"/></operator><name pos:line="4272" pos:column="13">nChange<pos:position pos:line="4272" pos:column="20"/></name></name> <operator pos:line="4272" pos:column="21">=<pos:position pos:line="4272" pos:column="22"/></operator> <name><name pos:line="4272" pos:column="23">p<pos:position pos:line="4272" pos:column="24"/></name><operator pos:line="4272" pos:column="24">-&gt;<pos:position pos:line="4272" pos:column="29"/></operator><name pos:line="4272" pos:column="26">nChange<pos:position pos:line="4272" pos:column="33"/></name></name></expr>;<pos:position pos:line="4272" pos:column="34"/></expr_stmt>
  <break pos:line="4273" pos:column="3">break;<pos:position pos:line="4273" pos:column="9"/></break>
}<pos:position pos:line="4274" pos:column="2"/></block>

<comment type="block" pos:line="4276" pos:column="1">/* Opcode: ContextPop * * * 
**
** Restore the Vdbe context to the state it was in when contextPush was last
** executed. The context stores the last insert row id, the last statement
** change count, and the current statement change count.
*/</comment>
<case pos:line="4282" pos:column="1">case <expr><name pos:line="4282" pos:column="6">OP_ContextPop<pos:position pos:line="4282" pos:column="19"/></name></expr>:<pos:position pos:line="4282" pos:column="20"/></case> <block pos:line="4282" pos:column="21">{
  <decl_stmt><decl><type><name pos:line="4283" pos:column="3">Context<pos:position pos:line="4283" pos:column="10"/></name> <modifier pos:line="4283" pos:column="11">*<pos:position pos:line="4283" pos:column="12"/></modifier></type><name pos:line="4283" pos:column="12">pContext<pos:position pos:line="4283" pos:column="20"/></name></decl>;<pos:position pos:line="4283" pos:column="21"/></decl_stmt>
  <expr_stmt><expr><name pos:line="4284" pos:column="3">pContext<pos:position pos:line="4284" pos:column="11"/></name> <operator pos:line="4284" pos:column="12">=<pos:position pos:line="4284" pos:column="13"/></operator> <operator pos:line="4284" pos:column="14">&amp;<pos:position pos:line="4284" pos:column="19"/></operator><name><name pos:line="4284" pos:column="15">p<pos:position pos:line="4284" pos:column="16"/></name><operator pos:line="4284" pos:column="16">-&gt;<pos:position pos:line="4284" pos:column="21"/></operator><name pos:line="4284" pos:column="18">contextStack<pos:position pos:line="4284" pos:column="30"/></name><index pos:line="4284" pos:column="30">[<expr><operator pos:line="4284" pos:column="31">--<pos:position pos:line="4284" pos:column="33"/></operator><name><name pos:line="4284" pos:column="33">p<pos:position pos:line="4284" pos:column="34"/></name><operator pos:line="4284" pos:column="34">-&gt;<pos:position pos:line="4284" pos:column="39"/></operator><name pos:line="4284" pos:column="36">contextStackTop<pos:position pos:line="4284" pos:column="51"/></name></name></expr>]<pos:position pos:line="4284" pos:column="52"/></index></name></expr>;<pos:position pos:line="4284" pos:column="53"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="4285" pos:column="3">assert<pos:position pos:line="4285" pos:column="9"/></name><argument_list pos:line="4285" pos:column="9">( <argument><expr><name><name pos:line="4285" pos:column="11">p<pos:position pos:line="4285" pos:column="12"/></name><operator pos:line="4285" pos:column="12">-&gt;<pos:position pos:line="4285" pos:column="17"/></operator><name pos:line="4285" pos:column="14">contextStackTop<pos:position pos:line="4285" pos:column="29"/></name></name><operator pos:line="4285" pos:column="29">&gt;=<pos:position pos:line="4285" pos:column="34"/></operator><literal type="number" pos:line="4285" pos:column="31">0<pos:position pos:line="4285" pos:column="32"/></literal></expr></argument> )<pos:position pos:line="4285" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="4285" pos:column="35"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="4286" pos:column="3">db<pos:position pos:line="4286" pos:column="5"/></name><operator pos:line="4286" pos:column="5">-&gt;<pos:position pos:line="4286" pos:column="10"/></operator><name pos:line="4286" pos:column="7">lastRowid<pos:position pos:line="4286" pos:column="16"/></name></name> <operator pos:line="4286" pos:column="17">=<pos:position pos:line="4286" pos:column="18"/></operator> <name><name pos:line="4286" pos:column="19">pContext<pos:position pos:line="4286" pos:column="27"/></name><operator pos:line="4286" pos:column="27">-&gt;<pos:position pos:line="4286" pos:column="32"/></operator><name pos:line="4286" pos:column="29">lastRowid<pos:position pos:line="4286" pos:column="38"/></name></name></expr>;<pos:position pos:line="4286" pos:column="39"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="4287" pos:column="3">p<pos:position pos:line="4287" pos:column="4"/></name><operator pos:line="4287" pos:column="4">-&gt;<pos:position pos:line="4287" pos:column="9"/></operator><name pos:line="4287" pos:column="6">nChange<pos:position pos:line="4287" pos:column="13"/></name></name> <operator pos:line="4287" pos:column="14">=<pos:position pos:line="4287" pos:column="15"/></operator> <name><name pos:line="4287" pos:column="16">pContext<pos:position pos:line="4287" pos:column="24"/></name><operator pos:line="4287" pos:column="24">-&gt;<pos:position pos:line="4287" pos:column="29"/></operator><name pos:line="4287" pos:column="26">nChange<pos:position pos:line="4287" pos:column="33"/></name></name></expr>;<pos:position pos:line="4287" pos:column="34"/></expr_stmt>
  <break pos:line="4288" pos:column="3">break;<pos:position pos:line="4288" pos:column="9"/></break>
}<pos:position pos:line="4289" pos:column="2"/></block>
<cpp:endif pos:line="4290" pos:column="1">#<cpp:directive pos:line="4290" pos:column="2">endif<pos:position pos:line="4290" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="4290" pos:column="8">/* #ifndef SQLITE_OMIT_TRIGGER */</comment>

<cpp:ifndef pos:line="4292" pos:column="1">#<cpp:directive pos:line="4292" pos:column="2">ifndef<pos:position pos:line="4292" pos:column="8"/></cpp:directive> <name pos:line="4292" pos:column="9">SQLITE_OMIT_AUTOINCREMENT<pos:position pos:line="4292" pos:column="34"/></name></cpp:ifndef>
<comment type="block" pos:line="4293" pos:column="1">/* Opcode: MemMax P1 P2 * * *
**
** Set the value of register P1 to the maximum of its current value
** and the value in register P2.
**
** This instruction throws an error if the memory cell is not initially
** an integer.
*/</comment>
<case pos:line="4301" pos:column="1">case <expr><name pos:line="4301" pos:column="6">OP_MemMax<pos:position pos:line="4301" pos:column="15"/></name></expr>:<pos:position pos:line="4301" pos:column="16"/></case> <block pos:line="4301" pos:column="17">{        <comment type="block" pos:line="4301" pos:column="26">/* in1, in2 */</comment>
  <expr_stmt><expr><call><name pos:line="4302" pos:column="3">sqlite3VdbeMemIntegerify<pos:position pos:line="4302" pos:column="27"/></name><argument_list pos:line="4302" pos:column="27">(<argument><expr><name pos:line="4302" pos:column="28">pIn1<pos:position pos:line="4302" pos:column="32"/></name></expr></argument>)<pos:position pos:line="4302" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="4302" pos:column="34"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="4303" pos:column="3">sqlite3VdbeMemIntegerify<pos:position pos:line="4303" pos:column="27"/></name><argument_list pos:line="4303" pos:column="27">(<argument><expr><name pos:line="4303" pos:column="28">pIn2<pos:position pos:line="4303" pos:column="32"/></name></expr></argument>)<pos:position pos:line="4303" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="4303" pos:column="34"/></expr_stmt>
  <if pos:line="4304" pos:column="3">if<condition pos:line="4304" pos:column="5">( <expr><name><name pos:line="4304" pos:column="7">pIn1<pos:position pos:line="4304" pos:column="11"/></name><operator pos:line="4304" pos:column="11">-&gt;<pos:position pos:line="4304" pos:column="16"/></operator><name pos:line="4304" pos:column="13">u<pos:position pos:line="4304" pos:column="14"/></name><operator pos:line="4304" pos:column="14">.<pos:position pos:line="4304" pos:column="15"/></operator><name pos:line="4304" pos:column="15">i<pos:position pos:line="4304" pos:column="16"/></name></name><operator pos:line="4304" pos:column="16">&lt;<pos:position pos:line="4304" pos:column="20"/></operator><name><name pos:line="4304" pos:column="17">pIn2<pos:position pos:line="4304" pos:column="21"/></name><operator pos:line="4304" pos:column="21">-&gt;<pos:position pos:line="4304" pos:column="26"/></operator><name pos:line="4304" pos:column="23">u<pos:position pos:line="4304" pos:column="24"/></name><operator pos:line="4304" pos:column="24">.<pos:position pos:line="4304" pos:column="25"/></operator><name pos:line="4304" pos:column="25">i<pos:position pos:line="4304" pos:column="26"/></name></name></expr>)<pos:position pos:line="4304" pos:column="27"/></condition><then><block pos:line="4304" pos:column="27">{
    <expr_stmt><expr><name><name pos:line="4305" pos:column="5">pIn1<pos:position pos:line="4305" pos:column="9"/></name><operator pos:line="4305" pos:column="9">-&gt;<pos:position pos:line="4305" pos:column="14"/></operator><name pos:line="4305" pos:column="11">u<pos:position pos:line="4305" pos:column="12"/></name><operator pos:line="4305" pos:column="12">.<pos:position pos:line="4305" pos:column="13"/></operator><name pos:line="4305" pos:column="13">i<pos:position pos:line="4305" pos:column="14"/></name></name> <operator pos:line="4305" pos:column="15">=<pos:position pos:line="4305" pos:column="16"/></operator> <name><name pos:line="4305" pos:column="17">pIn2<pos:position pos:line="4305" pos:column="21"/></name><operator pos:line="4305" pos:column="21">-&gt;<pos:position pos:line="4305" pos:column="26"/></operator><name pos:line="4305" pos:column="23">u<pos:position pos:line="4305" pos:column="24"/></name><operator pos:line="4305" pos:column="24">.<pos:position pos:line="4305" pos:column="25"/></operator><name pos:line="4305" pos:column="25">i<pos:position pos:line="4305" pos:column="26"/></name></name></expr>;<pos:position pos:line="4305" pos:column="27"/></expr_stmt>
  }<pos:position pos:line="4306" pos:column="4"/></block></then></if>
  <break pos:line="4307" pos:column="3">break;<pos:position pos:line="4307" pos:column="9"/></break>
}<pos:position pos:line="4308" pos:column="2"/></block>
<cpp:endif pos:line="4309" pos:column="1">#<cpp:directive pos:line="4309" pos:column="2">endif<pos:position pos:line="4309" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="4309" pos:column="8">/* SQLITE_OMIT_AUTOINCREMENT */</comment>

<comment type="block" pos:line="4311" pos:column="1">/* Opcode: IfPos P1 P2 * * *
**
** If the value of register P1 is 1 or greater, jump to P2.
**
** It is illegal to use this instruction on a register that does
** not contain an integer.  An assertion fault will result if you try.
*/</comment>
<case pos:line="4318" pos:column="1">case <expr><name pos:line="4318" pos:column="6">OP_IfPos<pos:position pos:line="4318" pos:column="14"/></name></expr>:<pos:position pos:line="4318" pos:column="15"/></case> <block pos:line="4318" pos:column="16">{        <comment type="block" pos:line="4318" pos:column="25">/* jump, in1 */</comment>
  <expr_stmt><expr><call><name pos:line="4319" pos:column="3">assert<pos:position pos:line="4319" pos:column="9"/></name><argument_list pos:line="4319" pos:column="9">( <argument><expr><name><name pos:line="4319" pos:column="11">pIn1<pos:position pos:line="4319" pos:column="15"/></name><operator pos:line="4319" pos:column="15">-&gt;<pos:position pos:line="4319" pos:column="20"/></operator><name pos:line="4319" pos:column="17">flags<pos:position pos:line="4319" pos:column="22"/></name></name><operator pos:line="4319" pos:column="22">&amp;<pos:position pos:line="4319" pos:column="27"/></operator><name pos:line="4319" pos:column="23">MEM_Int<pos:position pos:line="4319" pos:column="30"/></name></expr></argument> )<pos:position pos:line="4319" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="4319" pos:column="33"/></expr_stmt>
  <if pos:line="4320" pos:column="3">if<condition pos:line="4320" pos:column="5">( <expr><name><name pos:line="4320" pos:column="7">pIn1<pos:position pos:line="4320" pos:column="11"/></name><operator pos:line="4320" pos:column="11">-&gt;<pos:position pos:line="4320" pos:column="16"/></operator><name pos:line="4320" pos:column="13">u<pos:position pos:line="4320" pos:column="14"/></name><operator pos:line="4320" pos:column="14">.<pos:position pos:line="4320" pos:column="15"/></operator><name pos:line="4320" pos:column="15">i<pos:position pos:line="4320" pos:column="16"/></name></name><operator pos:line="4320" pos:column="16">&gt;<pos:position pos:line="4320" pos:column="20"/></operator><literal type="number" pos:line="4320" pos:column="17">0<pos:position pos:line="4320" pos:column="18"/></literal></expr> )<pos:position pos:line="4320" pos:column="20"/></condition><then><block pos:line="4320" pos:column="20">{
     <expr_stmt><expr><name pos:line="4321" pos:column="6">pc<pos:position pos:line="4321" pos:column="8"/></name> <operator pos:line="4321" pos:column="9">=<pos:position pos:line="4321" pos:column="10"/></operator> <name><name pos:line="4321" pos:column="11">pOp<pos:position pos:line="4321" pos:column="14"/></name><operator pos:line="4321" pos:column="14">-&gt;<pos:position pos:line="4321" pos:column="19"/></operator><name pos:line="4321" pos:column="16">p2<pos:position pos:line="4321" pos:column="18"/></name></name> <operator pos:line="4321" pos:column="19">-<pos:position pos:line="4321" pos:column="20"/></operator> <literal type="number" pos:line="4321" pos:column="21">1<pos:position pos:line="4321" pos:column="22"/></literal></expr>;<pos:position pos:line="4321" pos:column="23"/></expr_stmt>
  }<pos:position pos:line="4322" pos:column="4"/></block></then></if>
  <break pos:line="4323" pos:column="3">break;<pos:position pos:line="4323" pos:column="9"/></break>
}<pos:position pos:line="4324" pos:column="2"/></block>

<comment type="block" pos:line="4326" pos:column="1">/* Opcode: IfNeg P1 P2 * * *
**
** If the value of register P1 is less than zero, jump to P2. 
**
** It is illegal to use this instruction on a register that does
** not contain an integer.  An assertion fault will result if you try.
*/</comment>
<case pos:line="4333" pos:column="1">case <expr><name pos:line="4333" pos:column="6">OP_IfNeg<pos:position pos:line="4333" pos:column="14"/></name></expr>:<pos:position pos:line="4333" pos:column="15"/></case> <block pos:line="4333" pos:column="16">{        <comment type="block" pos:line="4333" pos:column="25">/* jump, in1 */</comment>
  <expr_stmt><expr><call><name pos:line="4334" pos:column="3">assert<pos:position pos:line="4334" pos:column="9"/></name><argument_list pos:line="4334" pos:column="9">( <argument><expr><name><name pos:line="4334" pos:column="11">pIn1<pos:position pos:line="4334" pos:column="15"/></name><operator pos:line="4334" pos:column="15">-&gt;<pos:position pos:line="4334" pos:column="20"/></operator><name pos:line="4334" pos:column="17">flags<pos:position pos:line="4334" pos:column="22"/></name></name><operator pos:line="4334" pos:column="22">&amp;<pos:position pos:line="4334" pos:column="27"/></operator><name pos:line="4334" pos:column="23">MEM_Int<pos:position pos:line="4334" pos:column="30"/></name></expr></argument> )<pos:position pos:line="4334" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="4334" pos:column="33"/></expr_stmt>
  <if pos:line="4335" pos:column="3">if<condition pos:line="4335" pos:column="5">( <expr><name><name pos:line="4335" pos:column="7">pIn1<pos:position pos:line="4335" pos:column="11"/></name><operator pos:line="4335" pos:column="11">-&gt;<pos:position pos:line="4335" pos:column="16"/></operator><name pos:line="4335" pos:column="13">u<pos:position pos:line="4335" pos:column="14"/></name><operator pos:line="4335" pos:column="14">.<pos:position pos:line="4335" pos:column="15"/></operator><name pos:line="4335" pos:column="15">i<pos:position pos:line="4335" pos:column="16"/></name></name><operator pos:line="4335" pos:column="16">&lt;<pos:position pos:line="4335" pos:column="20"/></operator><literal type="number" pos:line="4335" pos:column="17">0<pos:position pos:line="4335" pos:column="18"/></literal></expr> )<pos:position pos:line="4335" pos:column="20"/></condition><then><block pos:line="4335" pos:column="20">{
     <expr_stmt><expr><name pos:line="4336" pos:column="6">pc<pos:position pos:line="4336" pos:column="8"/></name> <operator pos:line="4336" pos:column="9">=<pos:position pos:line="4336" pos:column="10"/></operator> <name><name pos:line="4336" pos:column="11">pOp<pos:position pos:line="4336" pos:column="14"/></name><operator pos:line="4336" pos:column="14">-&gt;<pos:position pos:line="4336" pos:column="19"/></operator><name pos:line="4336" pos:column="16">p2<pos:position pos:line="4336" pos:column="18"/></name></name> <operator pos:line="4336" pos:column="19">-<pos:position pos:line="4336" pos:column="20"/></operator> <literal type="number" pos:line="4336" pos:column="21">1<pos:position pos:line="4336" pos:column="22"/></literal></expr>;<pos:position pos:line="4336" pos:column="23"/></expr_stmt>
  }<pos:position pos:line="4337" pos:column="4"/></block></then></if>
  <break pos:line="4338" pos:column="3">break;<pos:position pos:line="4338" pos:column="9"/></break>
}<pos:position pos:line="4339" pos:column="2"/></block>

<comment type="block" pos:line="4341" pos:column="1">/* Opcode: IfZero P1 P2 * * *
**
** If the value of register P1 is exactly 0, jump to P2. 
**
** It is illegal to use this instruction on a register that does
** not contain an integer.  An assertion fault will result if you try.
*/</comment>
<case pos:line="4348" pos:column="1">case <expr><name pos:line="4348" pos:column="6">OP_IfZero<pos:position pos:line="4348" pos:column="15"/></name></expr>:<pos:position pos:line="4348" pos:column="16"/></case> <block pos:line="4348" pos:column="17">{        <comment type="block" pos:line="4348" pos:column="26">/* jump, in1 */</comment>
  <expr_stmt><expr><call><name pos:line="4349" pos:column="3">assert<pos:position pos:line="4349" pos:column="9"/></name><argument_list pos:line="4349" pos:column="9">( <argument><expr><name><name pos:line="4349" pos:column="11">pIn1<pos:position pos:line="4349" pos:column="15"/></name><operator pos:line="4349" pos:column="15">-&gt;<pos:position pos:line="4349" pos:column="20"/></operator><name pos:line="4349" pos:column="17">flags<pos:position pos:line="4349" pos:column="22"/></name></name><operator pos:line="4349" pos:column="22">&amp;<pos:position pos:line="4349" pos:column="27"/></operator><name pos:line="4349" pos:column="23">MEM_Int<pos:position pos:line="4349" pos:column="30"/></name></expr></argument> )<pos:position pos:line="4349" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="4349" pos:column="33"/></expr_stmt>
  <if pos:line="4350" pos:column="3">if<condition pos:line="4350" pos:column="5">( <expr><name><name pos:line="4350" pos:column="7">pIn1<pos:position pos:line="4350" pos:column="11"/></name><operator pos:line="4350" pos:column="11">-&gt;<pos:position pos:line="4350" pos:column="16"/></operator><name pos:line="4350" pos:column="13">u<pos:position pos:line="4350" pos:column="14"/></name><operator pos:line="4350" pos:column="14">.<pos:position pos:line="4350" pos:column="15"/></operator><name pos:line="4350" pos:column="15">i<pos:position pos:line="4350" pos:column="16"/></name></name><operator pos:line="4350" pos:column="16">==<pos:position pos:line="4350" pos:column="18"/></operator><literal type="number" pos:line="4350" pos:column="18">0<pos:position pos:line="4350" pos:column="19"/></literal></expr> )<pos:position pos:line="4350" pos:column="21"/></condition><then><block pos:line="4350" pos:column="21">{
     <expr_stmt><expr><name pos:line="4351" pos:column="6">pc<pos:position pos:line="4351" pos:column="8"/></name> <operator pos:line="4351" pos:column="9">=<pos:position pos:line="4351" pos:column="10"/></operator> <name><name pos:line="4351" pos:column="11">pOp<pos:position pos:line="4351" pos:column="14"/></name><operator pos:line="4351" pos:column="14">-&gt;<pos:position pos:line="4351" pos:column="19"/></operator><name pos:line="4351" pos:column="16">p2<pos:position pos:line="4351" pos:column="18"/></name></name> <operator pos:line="4351" pos:column="19">-<pos:position pos:line="4351" pos:column="20"/></operator> <literal type="number" pos:line="4351" pos:column="21">1<pos:position pos:line="4351" pos:column="22"/></literal></expr>;<pos:position pos:line="4351" pos:column="23"/></expr_stmt>
  }<pos:position pos:line="4352" pos:column="4"/></block></then></if>
  <break pos:line="4353" pos:column="3">break;<pos:position pos:line="4353" pos:column="9"/></break>
}<pos:position pos:line="4354" pos:column="2"/></block>

<comment type="block" pos:line="4356" pos:column="1">/* Opcode: AggStep * P2 P3 P4 P5
**
** Execute the step function for an aggregate.  The
** function has P5 arguments.   P4 is a pointer to the FuncDef
** structure that specifies the function.  Use register
** P3 as the accumulator.
**
** The P5 arguments are taken from register P2 and its
** successors.
*/</comment>
<case pos:line="4366" pos:column="1">case <expr><name pos:line="4366" pos:column="6">OP_AggStep<pos:position pos:line="4366" pos:column="16"/></name></expr>:<pos:position pos:line="4366" pos:column="17"/></case> <block pos:line="4366" pos:column="18">{
  <decl_stmt><decl><type><name pos:line="4367" pos:column="3">int<pos:position pos:line="4367" pos:column="6"/></name></type> <name pos:line="4367" pos:column="7">n<pos:position pos:line="4367" pos:column="8"/></name></decl>;<pos:position pos:line="4367" pos:column="9"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4368" pos:column="3">int<pos:position pos:line="4368" pos:column="6"/></name></type> <name pos:line="4368" pos:column="7">i<pos:position pos:line="4368" pos:column="8"/></name></decl>;<pos:position pos:line="4368" pos:column="9"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4369" pos:column="3">Mem<pos:position pos:line="4369" pos:column="6"/></name> <modifier pos:line="4369" pos:column="7">*<pos:position pos:line="4369" pos:column="8"/></modifier></type><name pos:line="4369" pos:column="8">pMem<pos:position pos:line="4369" pos:column="12"/></name></decl>;<pos:position pos:line="4369" pos:column="13"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4370" pos:column="3">Mem<pos:position pos:line="4370" pos:column="6"/></name> <modifier pos:line="4370" pos:column="7">*<pos:position pos:line="4370" pos:column="8"/></modifier></type><name pos:line="4370" pos:column="8">pRec<pos:position pos:line="4370" pos:column="12"/></name></decl>;<pos:position pos:line="4370" pos:column="13"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4371" pos:column="3">sqlite3_context<pos:position pos:line="4371" pos:column="18"/></name></type> <name pos:line="4371" pos:column="19">ctx<pos:position pos:line="4371" pos:column="22"/></name></decl>;<pos:position pos:line="4371" pos:column="23"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4372" pos:column="3">sqlite3_value<pos:position pos:line="4372" pos:column="16"/></name> <modifier pos:line="4372" pos:column="17">*<pos:position pos:line="4372" pos:column="18"/></modifier><modifier pos:line="4372" pos:column="18">*<pos:position pos:line="4372" pos:column="19"/></modifier></type><name pos:line="4372" pos:column="19">apVal<pos:position pos:line="4372" pos:column="24"/></name></decl>;<pos:position pos:line="4372" pos:column="25"/></decl_stmt>

  <expr_stmt><expr><name pos:line="4374" pos:column="3">n<pos:position pos:line="4374" pos:column="4"/></name> <operator pos:line="4374" pos:column="5">=<pos:position pos:line="4374" pos:column="6"/></operator> <name><name pos:line="4374" pos:column="7">pOp<pos:position pos:line="4374" pos:column="10"/></name><operator pos:line="4374" pos:column="10">-&gt;<pos:position pos:line="4374" pos:column="15"/></operator><name pos:line="4374" pos:column="12">p5<pos:position pos:line="4374" pos:column="14"/></name></name></expr>;<pos:position pos:line="4374" pos:column="15"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="4375" pos:column="3">assert<pos:position pos:line="4375" pos:column="9"/></name><argument_list pos:line="4375" pos:column="9">( <argument><expr><name pos:line="4375" pos:column="11">n<pos:position pos:line="4375" pos:column="12"/></name><operator pos:line="4375" pos:column="12">&gt;=<pos:position pos:line="4375" pos:column="17"/></operator><literal type="number" pos:line="4375" pos:column="14">0<pos:position pos:line="4375" pos:column="15"/></literal></expr></argument> )<pos:position pos:line="4375" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="4375" pos:column="18"/></expr_stmt>
  <expr_stmt><expr><name pos:line="4376" pos:column="3">pRec<pos:position pos:line="4376" pos:column="7"/></name> <operator pos:line="4376" pos:column="8">=<pos:position pos:line="4376" pos:column="9"/></operator> <operator pos:line="4376" pos:column="10">&amp;<pos:position pos:line="4376" pos:column="15"/></operator><name><name pos:line="4376" pos:column="11">p<pos:position pos:line="4376" pos:column="12"/></name><operator pos:line="4376" pos:column="12">-&gt;<pos:position pos:line="4376" pos:column="17"/></operator><name pos:line="4376" pos:column="14">aMem<pos:position pos:line="4376" pos:column="18"/></name><index pos:line="4376" pos:column="18">[<expr><name><name pos:line="4376" pos:column="19">pOp<pos:position pos:line="4376" pos:column="22"/></name><operator pos:line="4376" pos:column="22">-&gt;<pos:position pos:line="4376" pos:column="27"/></operator><name pos:line="4376" pos:column="24">p2<pos:position pos:line="4376" pos:column="26"/></name></name></expr>]<pos:position pos:line="4376" pos:column="27"/></index></name></expr>;<pos:position pos:line="4376" pos:column="28"/></expr_stmt>
  <expr_stmt><expr><name pos:line="4377" pos:column="3">apVal<pos:position pos:line="4377" pos:column="8"/></name> <operator pos:line="4377" pos:column="9">=<pos:position pos:line="4377" pos:column="10"/></operator> <name><name pos:line="4377" pos:column="11">p<pos:position pos:line="4377" pos:column="12"/></name><operator pos:line="4377" pos:column="12">-&gt;<pos:position pos:line="4377" pos:column="17"/></operator><name pos:line="4377" pos:column="14">apArg<pos:position pos:line="4377" pos:column="19"/></name></name></expr>;<pos:position pos:line="4377" pos:column="20"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="4378" pos:column="3">assert<pos:position pos:line="4378" pos:column="9"/></name><argument_list pos:line="4378" pos:column="9">( <argument><expr><name pos:line="4378" pos:column="11">apVal<pos:position pos:line="4378" pos:column="16"/></name> <operator pos:line="4378" pos:column="17">||<pos:position pos:line="4378" pos:column="19"/></operator> <name pos:line="4378" pos:column="20">n<pos:position pos:line="4378" pos:column="21"/></name><operator pos:line="4378" pos:column="21">==<pos:position pos:line="4378" pos:column="23"/></operator><literal type="number" pos:line="4378" pos:column="23">0<pos:position pos:line="4378" pos:column="24"/></literal></expr></argument> )<pos:position pos:line="4378" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="4378" pos:column="27"/></expr_stmt>
  <for pos:line="4379" pos:column="3">for<control pos:line="4379" pos:column="6">(<init><expr><name pos:line="4379" pos:column="7">i<pos:position pos:line="4379" pos:column="8"/></name><operator pos:line="4379" pos:column="8">=<pos:position pos:line="4379" pos:column="9"/></operator><literal type="number" pos:line="4379" pos:column="9">0<pos:position pos:line="4379" pos:column="10"/></literal></expr>;<pos:position pos:line="4379" pos:column="11"/></init> <condition><expr><name pos:line="4379" pos:column="12">i<pos:position pos:line="4379" pos:column="13"/></name><operator pos:line="4379" pos:column="13">&lt;<pos:position pos:line="4379" pos:column="17"/></operator><name pos:line="4379" pos:column="14">n<pos:position pos:line="4379" pos:column="15"/></name></expr>;<pos:position pos:line="4379" pos:column="16"/></condition> <incr><expr><name pos:line="4379" pos:column="17">i<pos:position pos:line="4379" pos:column="18"/></name><operator pos:line="4379" pos:column="18">++<pos:position pos:line="4379" pos:column="20"/></operator></expr><operator pos:line="4379" pos:column="20">,<pos:position pos:line="4379" pos:column="21"/></operator> <expr><name pos:line="4379" pos:column="22">pRec<pos:position pos:line="4379" pos:column="26"/></name><operator pos:line="4379" pos:column="26">++<pos:position pos:line="4379" pos:column="28"/></operator></expr></incr>)<pos:position pos:line="4379" pos:column="29"/></control><block pos:line="4379" pos:column="29">{
    <expr_stmt><expr><name><name pos:line="4380" pos:column="5">apVal<pos:position pos:line="4380" pos:column="10"/></name><index pos:line="4380" pos:column="10">[<expr><name pos:line="4380" pos:column="11">i<pos:position pos:line="4380" pos:column="12"/></name></expr>]<pos:position pos:line="4380" pos:column="13"/></index></name> <operator pos:line="4380" pos:column="14">=<pos:position pos:line="4380" pos:column="15"/></operator> <name pos:line="4380" pos:column="16">pRec<pos:position pos:line="4380" pos:column="20"/></name></expr>;<pos:position pos:line="4380" pos:column="21"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="4381" pos:column="5">storeTypeInfo<pos:position pos:line="4381" pos:column="18"/></name><argument_list pos:line="4381" pos:column="18">(<argument><expr><name pos:line="4381" pos:column="19">pRec<pos:position pos:line="4381" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="4381" pos:column="25">encoding<pos:position pos:line="4381" pos:column="33"/></name></expr></argument>)<pos:position pos:line="4381" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="4381" pos:column="35"/></expr_stmt>
  }<pos:position pos:line="4382" pos:column="4"/></block></for>
  <expr_stmt><expr><name><name pos:line="4383" pos:column="3">ctx<pos:position pos:line="4383" pos:column="6"/></name><operator pos:line="4383" pos:column="6">.<pos:position pos:line="4383" pos:column="7"/></operator><name pos:line="4383" pos:column="7">pFunc<pos:position pos:line="4383" pos:column="12"/></name></name> <operator pos:line="4383" pos:column="13">=<pos:position pos:line="4383" pos:column="14"/></operator> <name><name pos:line="4383" pos:column="15">pOp<pos:position pos:line="4383" pos:column="18"/></name><operator pos:line="4383" pos:column="18">-&gt;<pos:position pos:line="4383" pos:column="23"/></operator><name pos:line="4383" pos:column="20">p4<pos:position pos:line="4383" pos:column="22"/></name><operator pos:line="4383" pos:column="22">.<pos:position pos:line="4383" pos:column="23"/></operator><name pos:line="4383" pos:column="23">pFunc<pos:position pos:line="4383" pos:column="28"/></name></name></expr>;<pos:position pos:line="4383" pos:column="29"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="4384" pos:column="3">assert<pos:position pos:line="4384" pos:column="9"/></name><argument_list pos:line="4384" pos:column="9">( <argument><expr><name><name pos:line="4384" pos:column="11">pOp<pos:position pos:line="4384" pos:column="14"/></name><operator pos:line="4384" pos:column="14">-&gt;<pos:position pos:line="4384" pos:column="19"/></operator><name pos:line="4384" pos:column="16">p3<pos:position pos:line="4384" pos:column="18"/></name></name><operator pos:line="4384" pos:column="18">&gt;<pos:position pos:line="4384" pos:column="22"/></operator><literal type="number" pos:line="4384" pos:column="19">0<pos:position pos:line="4384" pos:column="20"/></literal> <operator pos:line="4384" pos:column="21">&amp;&amp;<pos:position pos:line="4384" pos:column="31"/></operator> <name><name pos:line="4384" pos:column="24">pOp<pos:position pos:line="4384" pos:column="27"/></name><operator pos:line="4384" pos:column="27">-&gt;<pos:position pos:line="4384" pos:column="32"/></operator><name pos:line="4384" pos:column="29">p3<pos:position pos:line="4384" pos:column="31"/></name></name><operator pos:line="4384" pos:column="31">&lt;=<pos:position pos:line="4384" pos:column="36"/></operator><name><name pos:line="4384" pos:column="33">p<pos:position pos:line="4384" pos:column="34"/></name><operator pos:line="4384" pos:column="34">-&gt;<pos:position pos:line="4384" pos:column="39"/></operator><name pos:line="4384" pos:column="36">nMem<pos:position pos:line="4384" pos:column="40"/></name></name></expr></argument> )<pos:position pos:line="4384" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="4384" pos:column="43"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="4385" pos:column="3">ctx<pos:position pos:line="4385" pos:column="6"/></name><operator pos:line="4385" pos:column="6">.<pos:position pos:line="4385" pos:column="7"/></operator><name pos:line="4385" pos:column="7">pMem<pos:position pos:line="4385" pos:column="11"/></name></name> <operator pos:line="4385" pos:column="12">=<pos:position pos:line="4385" pos:column="13"/></operator> <name pos:line="4385" pos:column="14">pMem<pos:position pos:line="4385" pos:column="18"/></name> <operator pos:line="4385" pos:column="19">=<pos:position pos:line="4385" pos:column="20"/></operator> <operator pos:line="4385" pos:column="21">&amp;<pos:position pos:line="4385" pos:column="26"/></operator><name><name pos:line="4385" pos:column="22">p<pos:position pos:line="4385" pos:column="23"/></name><operator pos:line="4385" pos:column="23">-&gt;<pos:position pos:line="4385" pos:column="28"/></operator><name pos:line="4385" pos:column="25">aMem<pos:position pos:line="4385" pos:column="29"/></name><index pos:line="4385" pos:column="29">[<expr><name><name pos:line="4385" pos:column="30">pOp<pos:position pos:line="4385" pos:column="33"/></name><operator pos:line="4385" pos:column="33">-&gt;<pos:position pos:line="4385" pos:column="38"/></operator><name pos:line="4385" pos:column="35">p3<pos:position pos:line="4385" pos:column="37"/></name></name></expr>]<pos:position pos:line="4385" pos:column="38"/></index></name></expr>;<pos:position pos:line="4385" pos:column="39"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="4386" pos:column="3">pMem<pos:position pos:line="4386" pos:column="7"/></name><operator pos:line="4386" pos:column="7">-&gt;<pos:position pos:line="4386" pos:column="12"/></operator><name pos:line="4386" pos:column="9">n<pos:position pos:line="4386" pos:column="10"/></name></name><operator pos:line="4386" pos:column="10">++<pos:position pos:line="4386" pos:column="12"/></operator></expr>;<pos:position pos:line="4386" pos:column="13"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="4387" pos:column="3">ctx<pos:position pos:line="4387" pos:column="6"/></name><operator pos:line="4387" pos:column="6">.<pos:position pos:line="4387" pos:column="7"/></operator><name pos:line="4387" pos:column="7">s<pos:position pos:line="4387" pos:column="8"/></name><operator pos:line="4387" pos:column="8">.<pos:position pos:line="4387" pos:column="9"/></operator><name pos:line="4387" pos:column="9">flags<pos:position pos:line="4387" pos:column="14"/></name></name> <operator pos:line="4387" pos:column="15">=<pos:position pos:line="4387" pos:column="16"/></operator> <name pos:line="4387" pos:column="17">MEM_Null<pos:position pos:line="4387" pos:column="25"/></name></expr>;<pos:position pos:line="4387" pos:column="26"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="4388" pos:column="3">ctx<pos:position pos:line="4388" pos:column="6"/></name><operator pos:line="4388" pos:column="6">.<pos:position pos:line="4388" pos:column="7"/></operator><name pos:line="4388" pos:column="7">s<pos:position pos:line="4388" pos:column="8"/></name><operator pos:line="4388" pos:column="8">.<pos:position pos:line="4388" pos:column="9"/></operator><name pos:line="4388" pos:column="9">z<pos:position pos:line="4388" pos:column="10"/></name></name> <operator pos:line="4388" pos:column="11">=<pos:position pos:line="4388" pos:column="12"/></operator> <literal type="number" pos:line="4388" pos:column="13">0<pos:position pos:line="4388" pos:column="14"/></literal></expr>;<pos:position pos:line="4388" pos:column="15"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="4389" pos:column="3">ctx<pos:position pos:line="4389" pos:column="6"/></name><operator pos:line="4389" pos:column="6">.<pos:position pos:line="4389" pos:column="7"/></operator><name pos:line="4389" pos:column="7">s<pos:position pos:line="4389" pos:column="8"/></name><operator pos:line="4389" pos:column="8">.<pos:position pos:line="4389" pos:column="9"/></operator><name pos:line="4389" pos:column="9">zMalloc<pos:position pos:line="4389" pos:column="16"/></name></name> <operator pos:line="4389" pos:column="17">=<pos:position pos:line="4389" pos:column="18"/></operator> <literal type="number" pos:line="4389" pos:column="19">0<pos:position pos:line="4389" pos:column="20"/></literal></expr>;<pos:position pos:line="4389" pos:column="21"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="4390" pos:column="3">ctx<pos:position pos:line="4390" pos:column="6"/></name><operator pos:line="4390" pos:column="6">.<pos:position pos:line="4390" pos:column="7"/></operator><name pos:line="4390" pos:column="7">s<pos:position pos:line="4390" pos:column="8"/></name><operator pos:line="4390" pos:column="8">.<pos:position pos:line="4390" pos:column="9"/></operator><name pos:line="4390" pos:column="9">xDel<pos:position pos:line="4390" pos:column="13"/></name></name> <operator pos:line="4390" pos:column="14">=<pos:position pos:line="4390" pos:column="15"/></operator> <literal type="number" pos:line="4390" pos:column="16">0<pos:position pos:line="4390" pos:column="17"/></literal></expr>;<pos:position pos:line="4390" pos:column="18"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="4391" pos:column="3">ctx<pos:position pos:line="4391" pos:column="6"/></name><operator pos:line="4391" pos:column="6">.<pos:position pos:line="4391" pos:column="7"/></operator><name pos:line="4391" pos:column="7">s<pos:position pos:line="4391" pos:column="8"/></name><operator pos:line="4391" pos:column="8">.<pos:position pos:line="4391" pos:column="9"/></operator><name pos:line="4391" pos:column="9">db<pos:position pos:line="4391" pos:column="11"/></name></name> <operator pos:line="4391" pos:column="12">=<pos:position pos:line="4391" pos:column="13"/></operator> <name pos:line="4391" pos:column="14">db<pos:position pos:line="4391" pos:column="16"/></name></expr>;<pos:position pos:line="4391" pos:column="17"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="4392" pos:column="3">ctx<pos:position pos:line="4392" pos:column="6"/></name><operator pos:line="4392" pos:column="6">.<pos:position pos:line="4392" pos:column="7"/></operator><name pos:line="4392" pos:column="7">isError<pos:position pos:line="4392" pos:column="14"/></name></name> <operator pos:line="4392" pos:column="15">=<pos:position pos:line="4392" pos:column="16"/></operator> <literal type="number" pos:line="4392" pos:column="17">0<pos:position pos:line="4392" pos:column="18"/></literal></expr>;<pos:position pos:line="4392" pos:column="19"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="4393" pos:column="3">ctx<pos:position pos:line="4393" pos:column="6"/></name><operator pos:line="4393" pos:column="6">.<pos:position pos:line="4393" pos:column="7"/></operator><name pos:line="4393" pos:column="7">pColl<pos:position pos:line="4393" pos:column="12"/></name></name> <operator pos:line="4393" pos:column="13">=<pos:position pos:line="4393" pos:column="14"/></operator> <literal type="number" pos:line="4393" pos:column="15">0<pos:position pos:line="4393" pos:column="16"/></literal></expr>;<pos:position pos:line="4393" pos:column="17"/></expr_stmt>
  <if pos:line="4394" pos:column="3">if<condition pos:line="4394" pos:column="5">( <expr><name><name pos:line="4394" pos:column="7">ctx<pos:position pos:line="4394" pos:column="10"/></name><operator pos:line="4394" pos:column="10">.<pos:position pos:line="4394" pos:column="11"/></operator><name pos:line="4394" pos:column="11">pFunc<pos:position pos:line="4394" pos:column="16"/></name><operator pos:line="4394" pos:column="16">-&gt;<pos:position pos:line="4394" pos:column="21"/></operator><name pos:line="4394" pos:column="18">flags<pos:position pos:line="4394" pos:column="23"/></name></name> <operator pos:line="4394" pos:column="24">&amp;<pos:position pos:line="4394" pos:column="29"/></operator> <name pos:line="4394" pos:column="26">SQLITE_FUNC_NEEDCOLL<pos:position pos:line="4394" pos:column="46"/></name></expr> )<pos:position pos:line="4394" pos:column="48"/></condition><then><block pos:line="4394" pos:column="48">{
    <expr_stmt><expr><call><name pos:line="4395" pos:column="5">assert<pos:position pos:line="4395" pos:column="11"/></name><argument_list pos:line="4395" pos:column="11">( <argument><expr><name pos:line="4395" pos:column="13">pOp<pos:position pos:line="4395" pos:column="16"/></name><operator pos:line="4395" pos:column="16">&gt;<pos:position pos:line="4395" pos:column="20"/></operator><name><name pos:line="4395" pos:column="17">p<pos:position pos:line="4395" pos:column="18"/></name><operator pos:line="4395" pos:column="18">-&gt;<pos:position pos:line="4395" pos:column="23"/></operator><name pos:line="4395" pos:column="20">aOp<pos:position pos:line="4395" pos:column="23"/></name></name></expr></argument> )<pos:position pos:line="4395" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="4395" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="4396" pos:column="5">assert<pos:position pos:line="4396" pos:column="11"/></name><argument_list pos:line="4396" pos:column="11">( <argument><expr><name><name pos:line="4396" pos:column="13">pOp<pos:position pos:line="4396" pos:column="16"/></name><index pos:line="4396" pos:column="16">[<expr><operator pos:line="4396" pos:column="17">-<pos:position pos:line="4396" pos:column="18"/></operator><literal type="number" pos:line="4396" pos:column="18">1<pos:position pos:line="4396" pos:column="19"/></literal></expr>]<pos:position pos:line="4396" pos:column="20"/></index></name><operator pos:line="4396" pos:column="20">.<pos:position pos:line="4396" pos:column="21"/></operator><name pos:line="4396" pos:column="21">p4type<pos:position pos:line="4396" pos:column="27"/></name><operator pos:line="4396" pos:column="27">==<pos:position pos:line="4396" pos:column="29"/></operator><name pos:line="4396" pos:column="29">P4_COLLSEQ<pos:position pos:line="4396" pos:column="39"/></name></expr></argument> )<pos:position pos:line="4396" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="4396" pos:column="42"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="4397" pos:column="5">assert<pos:position pos:line="4397" pos:column="11"/></name><argument_list pos:line="4397" pos:column="11">( <argument><expr><name><name pos:line="4397" pos:column="13">pOp<pos:position pos:line="4397" pos:column="16"/></name><index pos:line="4397" pos:column="16">[<expr><operator pos:line="4397" pos:column="17">-<pos:position pos:line="4397" pos:column="18"/></operator><literal type="number" pos:line="4397" pos:column="18">1<pos:position pos:line="4397" pos:column="19"/></literal></expr>]<pos:position pos:line="4397" pos:column="20"/></index></name><operator pos:line="4397" pos:column="20">.<pos:position pos:line="4397" pos:column="21"/></operator><name pos:line="4397" pos:column="21">opcode<pos:position pos:line="4397" pos:column="27"/></name><operator pos:line="4397" pos:column="27">==<pos:position pos:line="4397" pos:column="29"/></operator><name pos:line="4397" pos:column="29">OP_CollSeq<pos:position pos:line="4397" pos:column="39"/></name></expr></argument> )<pos:position pos:line="4397" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="4397" pos:column="42"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="4398" pos:column="5">ctx<pos:position pos:line="4398" pos:column="8"/></name><operator pos:line="4398" pos:column="8">.<pos:position pos:line="4398" pos:column="9"/></operator><name pos:line="4398" pos:column="9">pColl<pos:position pos:line="4398" pos:column="14"/></name></name> <operator pos:line="4398" pos:column="15">=<pos:position pos:line="4398" pos:column="16"/></operator> <name><name pos:line="4398" pos:column="17">pOp<pos:position pos:line="4398" pos:column="20"/></name><index pos:line="4398" pos:column="20">[<expr><operator pos:line="4398" pos:column="21">-<pos:position pos:line="4398" pos:column="22"/></operator><literal type="number" pos:line="4398" pos:column="22">1<pos:position pos:line="4398" pos:column="23"/></literal></expr>]<pos:position pos:line="4398" pos:column="24"/></index></name><operator pos:line="4398" pos:column="24">.<pos:position pos:line="4398" pos:column="25"/></operator><name><name pos:line="4398" pos:column="25">p4<pos:position pos:line="4398" pos:column="27"/></name><operator pos:line="4398" pos:column="27">.<pos:position pos:line="4398" pos:column="28"/></operator><name pos:line="4398" pos:column="28">pColl<pos:position pos:line="4398" pos:column="33"/></name></name></expr>;<pos:position pos:line="4398" pos:column="34"/></expr_stmt>
  }<pos:position pos:line="4399" pos:column="4"/></block></then></if>
  <expr_stmt><expr><call pos:line="4400" pos:column="3">(<name><name pos:line="4400" pos:column="4">ctx<pos:position pos:line="4400" pos:column="7"/></name><operator pos:line="4400" pos:column="7">.<pos:position pos:line="4400" pos:column="8"/></operator><name pos:line="4400" pos:column="8">pFunc<pos:position pos:line="4400" pos:column="13"/></name><operator pos:line="4400" pos:column="13">-&gt;<pos:position pos:line="4400" pos:column="18"/></operator><name pos:line="4400" pos:column="15">xStep<pos:position pos:line="4400" pos:column="20"/></name></name>)<argument_list pos:line="4400" pos:column="21">(<argument><expr><operator pos:line="4400" pos:column="22">&amp;<pos:position pos:line="4400" pos:column="27"/></operator><name pos:line="4400" pos:column="23">ctx<pos:position pos:line="4400" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="4400" pos:column="28">n<pos:position pos:line="4400" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="4400" pos:column="31">apVal<pos:position pos:line="4400" pos:column="36"/></name></expr></argument>)<pos:position pos:line="4400" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="4400" pos:column="38"/></expr_stmt>
  <if pos:line="4401" pos:column="3">if<condition pos:line="4401" pos:column="5">( <expr><name><name pos:line="4401" pos:column="7">ctx<pos:position pos:line="4401" pos:column="10"/></name><operator pos:line="4401" pos:column="10">.<pos:position pos:line="4401" pos:column="11"/></operator><name pos:line="4401" pos:column="11">isError<pos:position pos:line="4401" pos:column="18"/></name></name></expr> )<pos:position pos:line="4401" pos:column="20"/></condition><then><block pos:line="4401" pos:column="20">{
    <expr_stmt><expr><call><name pos:line="4402" pos:column="5">sqlite3SetString<pos:position pos:line="4402" pos:column="21"/></name><argument_list pos:line="4402" pos:column="21">(<argument><expr><operator pos:line="4402" pos:column="22">&amp;<pos:position pos:line="4402" pos:column="27"/></operator><name><name pos:line="4402" pos:column="23">p<pos:position pos:line="4402" pos:column="24"/></name><operator pos:line="4402" pos:column="24">-&gt;<pos:position pos:line="4402" pos:column="29"/></operator><name pos:line="4402" pos:column="26">zErrMsg<pos:position pos:line="4402" pos:column="33"/></name></name></expr></argument>, <argument><expr><name pos:line="4402" pos:column="35">db<pos:position pos:line="4402" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="4402" pos:column="39">"%s"<pos:position pos:line="4402" pos:column="43"/></literal></expr></argument>, <argument><expr><call><name pos:line="4402" pos:column="45">sqlite3_value_text<pos:position pos:line="4402" pos:column="63"/></name><argument_list pos:line="4402" pos:column="63">(<argument><expr><operator pos:line="4402" pos:column="64">&amp;<pos:position pos:line="4402" pos:column="69"/></operator><name><name pos:line="4402" pos:column="65">ctx<pos:position pos:line="4402" pos:column="68"/></name><operator pos:line="4402" pos:column="68">.<pos:position pos:line="4402" pos:column="69"/></operator><name pos:line="4402" pos:column="69">s<pos:position pos:line="4402" pos:column="70"/></name></name></expr></argument>)<pos:position pos:line="4402" pos:column="71"/></argument_list></call></expr></argument>)<pos:position pos:line="4402" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="4402" pos:column="73"/></expr_stmt>
    <expr_stmt><expr><name pos:line="4403" pos:column="5">rc<pos:position pos:line="4403" pos:column="7"/></name> <operator pos:line="4403" pos:column="8">=<pos:position pos:line="4403" pos:column="9"/></operator> <name><name pos:line="4403" pos:column="10">ctx<pos:position pos:line="4403" pos:column="13"/></name><operator pos:line="4403" pos:column="13">.<pos:position pos:line="4403" pos:column="14"/></operator><name pos:line="4403" pos:column="14">isError<pos:position pos:line="4403" pos:column="21"/></name></name></expr>;<pos:position pos:line="4403" pos:column="22"/></expr_stmt>
  }<pos:position pos:line="4404" pos:column="4"/></block></then></if>
  <expr_stmt><expr><call><name pos:line="4405" pos:column="3">sqlite3VdbeMemRelease<pos:position pos:line="4405" pos:column="24"/></name><argument_list pos:line="4405" pos:column="24">(<argument><expr><operator pos:line="4405" pos:column="25">&amp;<pos:position pos:line="4405" pos:column="30"/></operator><name><name pos:line="4405" pos:column="26">ctx<pos:position pos:line="4405" pos:column="29"/></name><operator pos:line="4405" pos:column="29">.<pos:position pos:line="4405" pos:column="30"/></operator><name pos:line="4405" pos:column="30">s<pos:position pos:line="4405" pos:column="31"/></name></name></expr></argument>)<pos:position pos:line="4405" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="4405" pos:column="33"/></expr_stmt>
  <break pos:line="4406" pos:column="3">break;<pos:position pos:line="4406" pos:column="9"/></break>
}<pos:position pos:line="4407" pos:column="2"/></block>

<comment type="block" pos:line="4409" pos:column="1">/* Opcode: AggFinal P1 P2 * P4 *
**
** Execute the finalizer function for an aggregate.  P1 is
** the memory location that is the accumulator for the aggregate.
**
** P2 is the number of arguments that the step function takes and
** P4 is a pointer to the FuncDef for this function.  The P2
** argument is not used by this opcode.  It is only there to disambiguate
** functions that can take varying numbers of arguments.  The
** P4 argument is only needed for the degenerate case where
** the step function was not previously called.
*/</comment>
<case pos:line="4421" pos:column="1">case <expr><name pos:line="4421" pos:column="6">OP_AggFinal<pos:position pos:line="4421" pos:column="17"/></name></expr>:<pos:position pos:line="4421" pos:column="18"/></case> <block pos:line="4421" pos:column="19">{
  <decl_stmt><decl><type><name pos:line="4422" pos:column="3">Mem<pos:position pos:line="4422" pos:column="6"/></name> <modifier pos:line="4422" pos:column="7">*<pos:position pos:line="4422" pos:column="8"/></modifier></type><name pos:line="4422" pos:column="8">pMem<pos:position pos:line="4422" pos:column="12"/></name></decl>;<pos:position pos:line="4422" pos:column="13"/></decl_stmt>
  <expr_stmt><expr><call><name pos:line="4423" pos:column="3">assert<pos:position pos:line="4423" pos:column="9"/></name><argument_list pos:line="4423" pos:column="9">( <argument><expr><name><name pos:line="4423" pos:column="11">pOp<pos:position pos:line="4423" pos:column="14"/></name><operator pos:line="4423" pos:column="14">-&gt;<pos:position pos:line="4423" pos:column="19"/></operator><name pos:line="4423" pos:column="16">p1<pos:position pos:line="4423" pos:column="18"/></name></name><operator pos:line="4423" pos:column="18">&gt;<pos:position pos:line="4423" pos:column="22"/></operator><literal type="number" pos:line="4423" pos:column="19">0<pos:position pos:line="4423" pos:column="20"/></literal> <operator pos:line="4423" pos:column="21">&amp;&amp;<pos:position pos:line="4423" pos:column="31"/></operator> <name><name pos:line="4423" pos:column="24">pOp<pos:position pos:line="4423" pos:column="27"/></name><operator pos:line="4423" pos:column="27">-&gt;<pos:position pos:line="4423" pos:column="32"/></operator><name pos:line="4423" pos:column="29">p1<pos:position pos:line="4423" pos:column="31"/></name></name><operator pos:line="4423" pos:column="31">&lt;=<pos:position pos:line="4423" pos:column="36"/></operator><name><name pos:line="4423" pos:column="33">p<pos:position pos:line="4423" pos:column="34"/></name><operator pos:line="4423" pos:column="34">-&gt;<pos:position pos:line="4423" pos:column="39"/></operator><name pos:line="4423" pos:column="36">nMem<pos:position pos:line="4423" pos:column="40"/></name></name></expr></argument> )<pos:position pos:line="4423" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="4423" pos:column="43"/></expr_stmt>
  <expr_stmt><expr><name pos:line="4424" pos:column="3">pMem<pos:position pos:line="4424" pos:column="7"/></name> <operator pos:line="4424" pos:column="8">=<pos:position pos:line="4424" pos:column="9"/></operator> <operator pos:line="4424" pos:column="10">&amp;<pos:position pos:line="4424" pos:column="15"/></operator><name><name pos:line="4424" pos:column="11">p<pos:position pos:line="4424" pos:column="12"/></name><operator pos:line="4424" pos:column="12">-&gt;<pos:position pos:line="4424" pos:column="17"/></operator><name pos:line="4424" pos:column="14">aMem<pos:position pos:line="4424" pos:column="18"/></name><index pos:line="4424" pos:column="18">[<expr><name><name pos:line="4424" pos:column="19">pOp<pos:position pos:line="4424" pos:column="22"/></name><operator pos:line="4424" pos:column="22">-&gt;<pos:position pos:line="4424" pos:column="27"/></operator><name pos:line="4424" pos:column="24">p1<pos:position pos:line="4424" pos:column="26"/></name></name></expr>]<pos:position pos:line="4424" pos:column="27"/></index></name></expr>;<pos:position pos:line="4424" pos:column="28"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="4425" pos:column="3">assert<pos:position pos:line="4425" pos:column="9"/></name><argument_list pos:line="4425" pos:column="9">( <argument><expr><operator pos:line="4425" pos:column="11">(<pos:position pos:line="4425" pos:column="12"/></operator><name><name pos:line="4425" pos:column="12">pMem<pos:position pos:line="4425" pos:column="16"/></name><operator pos:line="4425" pos:column="16">-&gt;<pos:position pos:line="4425" pos:column="21"/></operator><name pos:line="4425" pos:column="18">flags<pos:position pos:line="4425" pos:column="23"/></name></name> <operator pos:line="4425" pos:column="24">&amp;<pos:position pos:line="4425" pos:column="29"/></operator> <operator pos:line="4425" pos:column="26">~<pos:position pos:line="4425" pos:column="27"/></operator><operator pos:line="4425" pos:column="27">(<pos:position pos:line="4425" pos:column="28"/></operator><name pos:line="4425" pos:column="28">MEM_Null<pos:position pos:line="4425" pos:column="36"/></name><operator pos:line="4425" pos:column="36">|<pos:position pos:line="4425" pos:column="37"/></operator><name pos:line="4425" pos:column="37">MEM_Agg<pos:position pos:line="4425" pos:column="44"/></name><operator pos:line="4425" pos:column="44">)<pos:position pos:line="4425" pos:column="45"/></operator><operator pos:line="4425" pos:column="45">)<pos:position pos:line="4425" pos:column="46"/></operator><operator pos:line="4425" pos:column="46">==<pos:position pos:line="4425" pos:column="48"/></operator><literal type="number" pos:line="4425" pos:column="48">0<pos:position pos:line="4425" pos:column="49"/></literal></expr></argument> )<pos:position pos:line="4425" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="4425" pos:column="52"/></expr_stmt>
  <expr_stmt><expr><name pos:line="4426" pos:column="3">rc<pos:position pos:line="4426" pos:column="5"/></name> <operator pos:line="4426" pos:column="6">=<pos:position pos:line="4426" pos:column="7"/></operator> <call><name pos:line="4426" pos:column="8">sqlite3VdbeMemFinalize<pos:position pos:line="4426" pos:column="30"/></name><argument_list pos:line="4426" pos:column="30">(<argument><expr><name pos:line="4426" pos:column="31">pMem<pos:position pos:line="4426" pos:column="35"/></name></expr></argument>, <argument><expr><name><name pos:line="4426" pos:column="37">pOp<pos:position pos:line="4426" pos:column="40"/></name><operator pos:line="4426" pos:column="40">-&gt;<pos:position pos:line="4426" pos:column="45"/></operator><name pos:line="4426" pos:column="42">p4<pos:position pos:line="4426" pos:column="44"/></name><operator pos:line="4426" pos:column="44">.<pos:position pos:line="4426" pos:column="45"/></operator><name pos:line="4426" pos:column="45">pFunc<pos:position pos:line="4426" pos:column="50"/></name></name></expr></argument>)<pos:position pos:line="4426" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="4426" pos:column="52"/></expr_stmt>
  <if pos:line="4427" pos:column="3">if<condition pos:line="4427" pos:column="5">( <expr><name pos:line="4427" pos:column="7">rc<pos:position pos:line="4427" pos:column="9"/></name><operator pos:line="4427" pos:column="9">==<pos:position pos:line="4427" pos:column="11"/></operator><name pos:line="4427" pos:column="11">SQLITE_ERROR<pos:position pos:line="4427" pos:column="23"/></name></expr> )<pos:position pos:line="4427" pos:column="25"/></condition><then><block pos:line="4427" pos:column="25">{
    <expr_stmt><expr><call><name pos:line="4428" pos:column="5">sqlite3SetString<pos:position pos:line="4428" pos:column="21"/></name><argument_list pos:line="4428" pos:column="21">(<argument><expr><operator pos:line="4428" pos:column="22">&amp;<pos:position pos:line="4428" pos:column="27"/></operator><name><name pos:line="4428" pos:column="23">p<pos:position pos:line="4428" pos:column="24"/></name><operator pos:line="4428" pos:column="24">-&gt;<pos:position pos:line="4428" pos:column="29"/></operator><name pos:line="4428" pos:column="26">zErrMsg<pos:position pos:line="4428" pos:column="33"/></name></name></expr></argument>, <argument><expr><name pos:line="4428" pos:column="35">db<pos:position pos:line="4428" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="4428" pos:column="39">"%s"<pos:position pos:line="4428" pos:column="43"/></literal></expr></argument>, <argument><expr><call><name pos:line="4428" pos:column="45">sqlite3_value_text<pos:position pos:line="4428" pos:column="63"/></name><argument_list pos:line="4428" pos:column="63">(<argument><expr><name pos:line="4428" pos:column="64">pMem<pos:position pos:line="4428" pos:column="68"/></name></expr></argument>)<pos:position pos:line="4428" pos:column="69"/></argument_list></call></expr></argument>)<pos:position pos:line="4428" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="4428" pos:column="71"/></expr_stmt>
  }<pos:position pos:line="4429" pos:column="4"/></block></then></if>
  <expr_stmt><expr><call><name pos:line="4430" pos:column="3">sqlite3VdbeChangeEncoding<pos:position pos:line="4430" pos:column="28"/></name><argument_list pos:line="4430" pos:column="28">(<argument><expr><name pos:line="4430" pos:column="29">pMem<pos:position pos:line="4430" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="4430" pos:column="35">encoding<pos:position pos:line="4430" pos:column="43"/></name></expr></argument>)<pos:position pos:line="4430" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="4430" pos:column="45"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="4431" pos:column="3">UPDATE_MAX_BLOBSIZE<pos:position pos:line="4431" pos:column="22"/></name><argument_list pos:line="4431" pos:column="22">(<argument><expr><name pos:line="4431" pos:column="23">pMem<pos:position pos:line="4431" pos:column="27"/></name></expr></argument>)<pos:position pos:line="4431" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="4431" pos:column="29"/></expr_stmt>
  <if pos:line="4432" pos:column="3">if<condition pos:line="4432" pos:column="5">( <expr><call><name pos:line="4432" pos:column="7">sqlite3VdbeMemTooBig<pos:position pos:line="4432" pos:column="27"/></name><argument_list pos:line="4432" pos:column="27">(<argument><expr><name pos:line="4432" pos:column="28">pMem<pos:position pos:line="4432" pos:column="32"/></name></expr></argument>)<pos:position pos:line="4432" pos:column="33"/></argument_list></call></expr> )<pos:position pos:line="4432" pos:column="35"/></condition><then><block pos:line="4432" pos:column="35">{
    <goto pos:line="4433" pos:column="5">goto <name pos:line="4433" pos:column="10">too_big<pos:position pos:line="4433" pos:column="17"/></name>;<pos:position pos:line="4433" pos:column="18"/></goto>
  }<pos:position pos:line="4434" pos:column="4"/></block></then></if>
  <break pos:line="4435" pos:column="3">break;<pos:position pos:line="4435" pos:column="9"/></break>
}<pos:position pos:line="4436" pos:column="2"/></block>


<cpp:if pos:line="4439" pos:column="1">#<cpp:directive pos:line="4439" pos:column="2">if<pos:position pos:line="4439" pos:column="4"/></cpp:directive> <expr><operator pos:line="4439" pos:column="5">!<pos:position pos:line="4439" pos:column="6"/></operator><call><name pos:line="4439" pos:column="6">defined<pos:position pos:line="4439" pos:column="13"/></name><argument_list pos:line="4439" pos:column="13">(<argument><expr><name pos:line="4439" pos:column="14">SQLITE_OMIT_VACUUM<pos:position pos:line="4439" pos:column="32"/></name></expr></argument>)<pos:position pos:line="4439" pos:column="33"/></argument_list></call> <operator pos:line="4439" pos:column="34">&amp;&amp;<pos:position pos:line="4439" pos:column="44"/></operator> <operator pos:line="4439" pos:column="37">!<pos:position pos:line="4439" pos:column="38"/></operator><call><name pos:line="4439" pos:column="38">defined<pos:position pos:line="4439" pos:column="45"/></name><argument_list pos:line="4439" pos:column="45">(<argument><expr><name pos:line="4439" pos:column="46">SQLITE_OMIT_ATTACH<pos:position pos:line="4439" pos:column="64"/></name></expr></argument>)<pos:position pos:line="4439" pos:column="65"/></argument_list></call></expr></cpp:if>
<comment type="block" pos:line="4440" pos:column="1">/* Opcode: Vacuum * * * * *
**
** Vacuum the entire database.  This opcode will cause other virtual
** machines to be created and run.  It may not be called from within
** a transaction.
*/</comment>
<case pos:line="4446" pos:column="1">case <expr><name pos:line="4446" pos:column="6">OP_Vacuum<pos:position pos:line="4446" pos:column="15"/></name></expr>:<pos:position pos:line="4446" pos:column="16"/></case> <block pos:line="4446" pos:column="17">{
  <if pos:line="4447" pos:column="3">if<condition pos:line="4447" pos:column="5">( <expr><call><name pos:line="4447" pos:column="7">sqlite3SafetyOff<pos:position pos:line="4447" pos:column="23"/></name><argument_list pos:line="4447" pos:column="23">(<argument><expr><name pos:line="4447" pos:column="24">db<pos:position pos:line="4447" pos:column="26"/></name></expr></argument>)<pos:position pos:line="4447" pos:column="27"/></argument_list></call></expr> )<pos:position pos:line="4447" pos:column="29"/></condition><then pos:line="4447" pos:column="29"> <block type="pseudo"><goto pos:line="4447" pos:column="30">goto <name pos:line="4447" pos:column="35">abort_due_to_misuse<pos:position pos:line="4447" pos:column="54"/></name>;<pos:position pos:line="4447" pos:column="55"/></goto></block></then></if> 
  <expr_stmt><expr><name pos:line="4448" pos:column="3">rc<pos:position pos:line="4448" pos:column="5"/></name> <operator pos:line="4448" pos:column="6">=<pos:position pos:line="4448" pos:column="7"/></operator> <call><name pos:line="4448" pos:column="8">sqlite3RunVacuum<pos:position pos:line="4448" pos:column="24"/></name><argument_list pos:line="4448" pos:column="24">(<argument><expr><operator pos:line="4448" pos:column="25">&amp;<pos:position pos:line="4448" pos:column="30"/></operator><name><name pos:line="4448" pos:column="26">p<pos:position pos:line="4448" pos:column="27"/></name><operator pos:line="4448" pos:column="27">-&gt;<pos:position pos:line="4448" pos:column="32"/></operator><name pos:line="4448" pos:column="29">zErrMsg<pos:position pos:line="4448" pos:column="36"/></name></name></expr></argument>, <argument><expr><name pos:line="4448" pos:column="38">db<pos:position pos:line="4448" pos:column="40"/></name></expr></argument>)<pos:position pos:line="4448" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="4448" pos:column="42"/></expr_stmt>
  <if pos:line="4449" pos:column="3">if<condition pos:line="4449" pos:column="5">( <expr><call><name pos:line="4449" pos:column="7">sqlite3SafetyOn<pos:position pos:line="4449" pos:column="22"/></name><argument_list pos:line="4449" pos:column="22">(<argument><expr><name pos:line="4449" pos:column="23">db<pos:position pos:line="4449" pos:column="25"/></name></expr></argument>)<pos:position pos:line="4449" pos:column="26"/></argument_list></call></expr> )<pos:position pos:line="4449" pos:column="28"/></condition><then pos:line="4449" pos:column="28"> <block type="pseudo"><goto pos:line="4449" pos:column="29">goto <name pos:line="4449" pos:column="34">abort_due_to_misuse<pos:position pos:line="4449" pos:column="53"/></name>;<pos:position pos:line="4449" pos:column="54"/></goto></block></then></if>
  <break pos:line="4450" pos:column="3">break;<pos:position pos:line="4450" pos:column="9"/></break>
}<pos:position pos:line="4451" pos:column="2"/></block>
<cpp:endif pos:line="4452" pos:column="1">#<cpp:directive pos:line="4452" pos:column="2">endif<pos:position pos:line="4452" pos:column="7"/></cpp:directive></cpp:endif>

<cpp:if pos:line="4454" pos:column="1">#<cpp:directive pos:line="4454" pos:column="2">if<pos:position pos:line="4454" pos:column="4"/></cpp:directive> <expr><operator pos:line="4454" pos:column="5">!<pos:position pos:line="4454" pos:column="6"/></operator><call><name pos:line="4454" pos:column="6">defined<pos:position pos:line="4454" pos:column="13"/></name><argument_list pos:line="4454" pos:column="13">(<argument><expr><name pos:line="4454" pos:column="14">SQLITE_OMIT_AUTOVACUUM<pos:position pos:line="4454" pos:column="36"/></name></expr></argument>)<pos:position pos:line="4454" pos:column="37"/></argument_list></call></expr></cpp:if>
<comment type="block" pos:line="4455" pos:column="1">/* Opcode: IncrVacuum P1 P2 * * *
**
** Perform a single step of the incremental vacuum procedure on
** the P1 database. If the vacuum has finished, jump to instruction
** P2. Otherwise, fall through to the next instruction.
*/</comment>
<case pos:line="4461" pos:column="1">case <expr><name pos:line="4461" pos:column="6">OP_IncrVacuum<pos:position pos:line="4461" pos:column="19"/></name></expr>:<pos:position pos:line="4461" pos:column="20"/></case> <block pos:line="4461" pos:column="21">{        <comment type="block" pos:line="4461" pos:column="30">/* jump */</comment>
  <decl_stmt><decl><type><name pos:line="4462" pos:column="3">Btree<pos:position pos:line="4462" pos:column="8"/></name> <modifier pos:line="4462" pos:column="9">*<pos:position pos:line="4462" pos:column="10"/></modifier></type><name pos:line="4462" pos:column="10">pBt<pos:position pos:line="4462" pos:column="13"/></name></decl>;<pos:position pos:line="4462" pos:column="14"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="4464" pos:column="3">assert<pos:position pos:line="4464" pos:column="9"/></name><argument_list pos:line="4464" pos:column="9">( <argument><expr><name><name pos:line="4464" pos:column="11">pOp<pos:position pos:line="4464" pos:column="14"/></name><operator pos:line="4464" pos:column="14">-&gt;<pos:position pos:line="4464" pos:column="19"/></operator><name pos:line="4464" pos:column="16">p1<pos:position pos:line="4464" pos:column="18"/></name></name><operator pos:line="4464" pos:column="18">&gt;=<pos:position pos:line="4464" pos:column="23"/></operator><literal type="number" pos:line="4464" pos:column="20">0<pos:position pos:line="4464" pos:column="21"/></literal> <operator pos:line="4464" pos:column="22">&amp;&amp;<pos:position pos:line="4464" pos:column="32"/></operator> <name><name pos:line="4464" pos:column="25">pOp<pos:position pos:line="4464" pos:column="28"/></name><operator pos:line="4464" pos:column="28">-&gt;<pos:position pos:line="4464" pos:column="33"/></operator><name pos:line="4464" pos:column="30">p1<pos:position pos:line="4464" pos:column="32"/></name></name><operator pos:line="4464" pos:column="32">&lt;<pos:position pos:line="4464" pos:column="36"/></operator><name><name pos:line="4464" pos:column="33">db<pos:position pos:line="4464" pos:column="35"/></name><operator pos:line="4464" pos:column="35">-&gt;<pos:position pos:line="4464" pos:column="40"/></operator><name pos:line="4464" pos:column="37">nDb<pos:position pos:line="4464" pos:column="40"/></name></name></expr></argument> )<pos:position pos:line="4464" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="4464" pos:column="43"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="4465" pos:column="3">assert<pos:position pos:line="4465" pos:column="9"/></name><argument_list pos:line="4465" pos:column="9">( <argument><expr><operator pos:line="4465" pos:column="11">(<pos:position pos:line="4465" pos:column="12"/></operator><name><name pos:line="4465" pos:column="12">p<pos:position pos:line="4465" pos:column="13"/></name><operator pos:line="4465" pos:column="13">-&gt;<pos:position pos:line="4465" pos:column="18"/></operator><name pos:line="4465" pos:column="15">btreeMask<pos:position pos:line="4465" pos:column="24"/></name></name> <operator pos:line="4465" pos:column="25">&amp;<pos:position pos:line="4465" pos:column="30"/></operator> <operator pos:line="4465" pos:column="27">(<pos:position pos:line="4465" pos:column="28"/></operator><literal type="number" pos:line="4465" pos:column="28">1<pos:position pos:line="4465" pos:column="29"/></literal><operator pos:line="4465" pos:column="29">&lt;&lt;<pos:position pos:line="4465" pos:column="37"/></operator><name><name pos:line="4465" pos:column="31">pOp<pos:position pos:line="4465" pos:column="34"/></name><operator pos:line="4465" pos:column="34">-&gt;<pos:position pos:line="4465" pos:column="39"/></operator><name pos:line="4465" pos:column="36">p1<pos:position pos:line="4465" pos:column="38"/></name></name><operator pos:line="4465" pos:column="38">)<pos:position pos:line="4465" pos:column="39"/></operator><operator pos:line="4465" pos:column="39">)<pos:position pos:line="4465" pos:column="40"/></operator><operator pos:line="4465" pos:column="40">!=<pos:position pos:line="4465" pos:column="42"/></operator><literal type="number" pos:line="4465" pos:column="42">0<pos:position pos:line="4465" pos:column="43"/></literal></expr></argument> )<pos:position pos:line="4465" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="4465" pos:column="46"/></expr_stmt>
  <expr_stmt><expr><name pos:line="4466" pos:column="3">pBt<pos:position pos:line="4466" pos:column="6"/></name> <operator pos:line="4466" pos:column="7">=<pos:position pos:line="4466" pos:column="8"/></operator> <name><name pos:line="4466" pos:column="9">db<pos:position pos:line="4466" pos:column="11"/></name><operator pos:line="4466" pos:column="11">-&gt;<pos:position pos:line="4466" pos:column="16"/></operator><name pos:line="4466" pos:column="13">aDb<pos:position pos:line="4466" pos:column="16"/></name><index pos:line="4466" pos:column="16">[<expr><name><name pos:line="4466" pos:column="17">pOp<pos:position pos:line="4466" pos:column="20"/></name><operator pos:line="4466" pos:column="20">-&gt;<pos:position pos:line="4466" pos:column="25"/></operator><name pos:line="4466" pos:column="22">p1<pos:position pos:line="4466" pos:column="24"/></name></name></expr>]<pos:position pos:line="4466" pos:column="25"/></index></name><operator pos:line="4466" pos:column="25">.<pos:position pos:line="4466" pos:column="26"/></operator><name pos:line="4466" pos:column="26">pBt<pos:position pos:line="4466" pos:column="29"/></name></expr>;<pos:position pos:line="4466" pos:column="30"/></expr_stmt>
  <expr_stmt><expr><name pos:line="4467" pos:column="3">rc<pos:position pos:line="4467" pos:column="5"/></name> <operator pos:line="4467" pos:column="6">=<pos:position pos:line="4467" pos:column="7"/></operator> <call><name pos:line="4467" pos:column="8">sqlite3BtreeIncrVacuum<pos:position pos:line="4467" pos:column="30"/></name><argument_list pos:line="4467" pos:column="30">(<argument><expr><name pos:line="4467" pos:column="31">pBt<pos:position pos:line="4467" pos:column="34"/></name></expr></argument>)<pos:position pos:line="4467" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="4467" pos:column="36"/></expr_stmt>
  <if pos:line="4468" pos:column="3">if<condition pos:line="4468" pos:column="5">( <expr><name pos:line="4468" pos:column="7">rc<pos:position pos:line="4468" pos:column="9"/></name><operator pos:line="4468" pos:column="9">==<pos:position pos:line="4468" pos:column="11"/></operator><name pos:line="4468" pos:column="11">SQLITE_DONE<pos:position pos:line="4468" pos:column="22"/></name></expr> )<pos:position pos:line="4468" pos:column="24"/></condition><then><block pos:line="4468" pos:column="24">{
    <expr_stmt><expr><name pos:line="4469" pos:column="5">pc<pos:position pos:line="4469" pos:column="7"/></name> <operator pos:line="4469" pos:column="8">=<pos:position pos:line="4469" pos:column="9"/></operator> <name><name pos:line="4469" pos:column="10">pOp<pos:position pos:line="4469" pos:column="13"/></name><operator pos:line="4469" pos:column="13">-&gt;<pos:position pos:line="4469" pos:column="18"/></operator><name pos:line="4469" pos:column="15">p2<pos:position pos:line="4469" pos:column="17"/></name></name> <operator pos:line="4469" pos:column="18">-<pos:position pos:line="4469" pos:column="19"/></operator> <literal type="number" pos:line="4469" pos:column="20">1<pos:position pos:line="4469" pos:column="21"/></literal></expr>;<pos:position pos:line="4469" pos:column="22"/></expr_stmt>
    <expr_stmt><expr><name pos:line="4470" pos:column="5">rc<pos:position pos:line="4470" pos:column="7"/></name> <operator pos:line="4470" pos:column="8">=<pos:position pos:line="4470" pos:column="9"/></operator> <name pos:line="4470" pos:column="10">SQLITE_OK<pos:position pos:line="4470" pos:column="19"/></name></expr>;<pos:position pos:line="4470" pos:column="20"/></expr_stmt>
  }<pos:position pos:line="4471" pos:column="4"/></block></then></if>
  <break pos:line="4472" pos:column="3">break;<pos:position pos:line="4472" pos:column="9"/></break>
}<pos:position pos:line="4473" pos:column="2"/></block>
<cpp:endif pos:line="4474" pos:column="1">#<cpp:directive pos:line="4474" pos:column="2">endif<pos:position pos:line="4474" pos:column="7"/></cpp:directive></cpp:endif>

<comment type="block" pos:line="4476" pos:column="1">/* Opcode: Expire P1 * * * *
**
** Cause precompiled statements to become expired. An expired statement
** fails with an error code of SQLITE_SCHEMA if it is ever executed 
** (via sqlite3_step()).
** 
** If P1 is 0, then all SQL statements become expired. If P1 is non-zero,
** then only the currently executing statement is affected. 
*/</comment>
<case pos:line="4485" pos:column="1">case <expr><name pos:line="4485" pos:column="6">OP_Expire<pos:position pos:line="4485" pos:column="15"/></name></expr>:<pos:position pos:line="4485" pos:column="16"/></case> <block pos:line="4485" pos:column="17">{
  <if pos:line="4486" pos:column="3">if<condition pos:line="4486" pos:column="5">( <expr><operator pos:line="4486" pos:column="7">!<pos:position pos:line="4486" pos:column="8"/></operator><name><name pos:line="4486" pos:column="8">pOp<pos:position pos:line="4486" pos:column="11"/></name><operator pos:line="4486" pos:column="11">-&gt;<pos:position pos:line="4486" pos:column="16"/></operator><name pos:line="4486" pos:column="13">p1<pos:position pos:line="4486" pos:column="15"/></name></name></expr> )<pos:position pos:line="4486" pos:column="17"/></condition><then><block pos:line="4486" pos:column="17">{
    <expr_stmt><expr><call><name pos:line="4487" pos:column="5">sqlite3ExpirePreparedStatements<pos:position pos:line="4487" pos:column="36"/></name><argument_list pos:line="4487" pos:column="36">(<argument><expr><name pos:line="4487" pos:column="37">db<pos:position pos:line="4487" pos:column="39"/></name></expr></argument>)<pos:position pos:line="4487" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="4487" pos:column="41"/></expr_stmt>
  }<pos:position pos:line="4488" pos:column="4"/></block></then><else pos:line="4488" pos:column="4">else<block pos:line="4488" pos:column="8">{
    <expr_stmt><expr><name><name pos:line="4489" pos:column="5">p<pos:position pos:line="4489" pos:column="6"/></name><operator pos:line="4489" pos:column="6">-&gt;<pos:position pos:line="4489" pos:column="11"/></operator><name pos:line="4489" pos:column="8">expired<pos:position pos:line="4489" pos:column="15"/></name></name> <operator pos:line="4489" pos:column="16">=<pos:position pos:line="4489" pos:column="17"/></operator> <literal type="number" pos:line="4489" pos:column="18">1<pos:position pos:line="4489" pos:column="19"/></literal></expr>;<pos:position pos:line="4489" pos:column="20"/></expr_stmt>
  }<pos:position pos:line="4490" pos:column="4"/></block></else></if>
  <break pos:line="4491" pos:column="3">break;<pos:position pos:line="4491" pos:column="9"/></break>
}<pos:position pos:line="4492" pos:column="2"/></block>

<cpp:ifndef pos:line="4494" pos:column="1">#<cpp:directive pos:line="4494" pos:column="2">ifndef<pos:position pos:line="4494" pos:column="8"/></cpp:directive> <name pos:line="4494" pos:column="9">SQLITE_OMIT_SHARED_CACHE<pos:position pos:line="4494" pos:column="33"/></name></cpp:ifndef>
<comment type="block" pos:line="4495" pos:column="1">/* Opcode: TableLock P1 P2 P3 P4 *
**
** Obtain a lock on a particular table. This instruction is only used when
** the shared-cache feature is enabled. 
**
** If P1 is  the index of the database in sqlite3.aDb[] of the database
** on which the lock is acquired.  A readlock is obtained if P3==0 or
** a write lock if P3==1.
**
** P2 contains the root-page of the table to lock.
**
** P4 contains a pointer to the name of the table being locked. This is only
** used to generate an error message if the lock cannot be obtained.
*/</comment>
<case pos:line="4509" pos:column="1">case <expr><name pos:line="4509" pos:column="6">OP_TableLock<pos:position pos:line="4509" pos:column="18"/></name></expr>:<pos:position pos:line="4509" pos:column="19"/></case> <block pos:line="4509" pos:column="20">{
  <decl_stmt><decl><type><name pos:line="4510" pos:column="3">int<pos:position pos:line="4510" pos:column="6"/></name></type> <name pos:line="4510" pos:column="7">p1<pos:position pos:line="4510" pos:column="9"/></name></decl>;<pos:position pos:line="4510" pos:column="10"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4511" pos:column="3">u8<pos:position pos:line="4511" pos:column="5"/></name></type> <name pos:line="4511" pos:column="6">isWriteLock<pos:position pos:line="4511" pos:column="17"/></name></decl>;<pos:position pos:line="4511" pos:column="18"/></decl_stmt>

  <expr_stmt><expr><name pos:line="4513" pos:column="3">p1<pos:position pos:line="4513" pos:column="5"/></name> <operator pos:line="4513" pos:column="6">=<pos:position pos:line="4513" pos:column="7"/></operator> <name><name pos:line="4513" pos:column="8">pOp<pos:position pos:line="4513" pos:column="11"/></name><operator pos:line="4513" pos:column="11">-&gt;<pos:position pos:line="4513" pos:column="16"/></operator><name pos:line="4513" pos:column="13">p1<pos:position pos:line="4513" pos:column="15"/></name></name></expr>;<pos:position pos:line="4513" pos:column="16"/></expr_stmt> 
  <expr_stmt><expr><name pos:line="4514" pos:column="3">isWriteLock<pos:position pos:line="4514" pos:column="14"/></name> <operator pos:line="4514" pos:column="15">=<pos:position pos:line="4514" pos:column="16"/></operator> <operator pos:line="4514" pos:column="17">(<pos:position pos:line="4514" pos:column="18"/></operator><name pos:line="4514" pos:column="18">u8<pos:position pos:line="4514" pos:column="20"/></name><operator pos:line="4514" pos:column="20">)<pos:position pos:line="4514" pos:column="21"/></operator><name><name pos:line="4514" pos:column="21">pOp<pos:position pos:line="4514" pos:column="24"/></name><operator pos:line="4514" pos:column="24">-&gt;<pos:position pos:line="4514" pos:column="29"/></operator><name pos:line="4514" pos:column="26">p3<pos:position pos:line="4514" pos:column="28"/></name></name></expr>;<pos:position pos:line="4514" pos:column="29"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="4515" pos:column="3">assert<pos:position pos:line="4515" pos:column="9"/></name><argument_list pos:line="4515" pos:column="9">( <argument><expr><name pos:line="4515" pos:column="11">p1<pos:position pos:line="4515" pos:column="13"/></name><operator pos:line="4515" pos:column="13">&gt;=<pos:position pos:line="4515" pos:column="18"/></operator><literal type="number" pos:line="4515" pos:column="15">0<pos:position pos:line="4515" pos:column="16"/></literal> <operator pos:line="4515" pos:column="17">&amp;&amp;<pos:position pos:line="4515" pos:column="27"/></operator> <name pos:line="4515" pos:column="20">p1<pos:position pos:line="4515" pos:column="22"/></name><operator pos:line="4515" pos:column="22">&lt;<pos:position pos:line="4515" pos:column="26"/></operator><name><name pos:line="4515" pos:column="23">db<pos:position pos:line="4515" pos:column="25"/></name><operator pos:line="4515" pos:column="25">-&gt;<pos:position pos:line="4515" pos:column="30"/></operator><name pos:line="4515" pos:column="27">nDb<pos:position pos:line="4515" pos:column="30"/></name></name></expr></argument> )<pos:position pos:line="4515" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="4515" pos:column="33"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="4516" pos:column="3">assert<pos:position pos:line="4516" pos:column="9"/></name><argument_list pos:line="4516" pos:column="9">( <argument><expr><operator pos:line="4516" pos:column="11">(<pos:position pos:line="4516" pos:column="12"/></operator><name><name pos:line="4516" pos:column="12">p<pos:position pos:line="4516" pos:column="13"/></name><operator pos:line="4516" pos:column="13">-&gt;<pos:position pos:line="4516" pos:column="18"/></operator><name pos:line="4516" pos:column="15">btreeMask<pos:position pos:line="4516" pos:column="24"/></name></name> <operator pos:line="4516" pos:column="25">&amp;<pos:position pos:line="4516" pos:column="30"/></operator> <operator pos:line="4516" pos:column="27">(<pos:position pos:line="4516" pos:column="28"/></operator><literal type="number" pos:line="4516" pos:column="28">1<pos:position pos:line="4516" pos:column="29"/></literal><operator pos:line="4516" pos:column="29">&lt;&lt;<pos:position pos:line="4516" pos:column="37"/></operator><name pos:line="4516" pos:column="31">p1<pos:position pos:line="4516" pos:column="33"/></name><operator pos:line="4516" pos:column="33">)<pos:position pos:line="4516" pos:column="34"/></operator><operator pos:line="4516" pos:column="34">)<pos:position pos:line="4516" pos:column="35"/></operator><operator pos:line="4516" pos:column="35">!=<pos:position pos:line="4516" pos:column="37"/></operator><literal type="number" pos:line="4516" pos:column="37">0<pos:position pos:line="4516" pos:column="38"/></literal></expr></argument> )<pos:position pos:line="4516" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="4516" pos:column="41"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="4517" pos:column="3">assert<pos:position pos:line="4517" pos:column="9"/></name><argument_list pos:line="4517" pos:column="9">( <argument><expr><name pos:line="4517" pos:column="11">isWriteLock<pos:position pos:line="4517" pos:column="22"/></name><operator pos:line="4517" pos:column="22">==<pos:position pos:line="4517" pos:column="24"/></operator><literal type="number" pos:line="4517" pos:column="24">0<pos:position pos:line="4517" pos:column="25"/></literal> <operator pos:line="4517" pos:column="26">||<pos:position pos:line="4517" pos:column="28"/></operator> <name pos:line="4517" pos:column="29">isWriteLock<pos:position pos:line="4517" pos:column="40"/></name><operator pos:line="4517" pos:column="40">==<pos:position pos:line="4517" pos:column="42"/></operator><literal type="number" pos:line="4517" pos:column="42">1<pos:position pos:line="4517" pos:column="43"/></literal></expr></argument> )<pos:position pos:line="4517" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="4517" pos:column="46"/></expr_stmt>
  <expr_stmt><expr><name pos:line="4518" pos:column="3">rc<pos:position pos:line="4518" pos:column="5"/></name> <operator pos:line="4518" pos:column="6">=<pos:position pos:line="4518" pos:column="7"/></operator> <call><name pos:line="4518" pos:column="8">sqlite3BtreeLockTable<pos:position pos:line="4518" pos:column="29"/></name><argument_list pos:line="4518" pos:column="29">(<argument><expr><name><name pos:line="4518" pos:column="30">db<pos:position pos:line="4518" pos:column="32"/></name><operator pos:line="4518" pos:column="32">-&gt;<pos:position pos:line="4518" pos:column="37"/></operator><name pos:line="4518" pos:column="34">aDb<pos:position pos:line="4518" pos:column="37"/></name><index pos:line="4518" pos:column="37">[<expr><name pos:line="4518" pos:column="38">p1<pos:position pos:line="4518" pos:column="40"/></name></expr>]<pos:position pos:line="4518" pos:column="41"/></index></name><operator pos:line="4518" pos:column="41">.<pos:position pos:line="4518" pos:column="42"/></operator><name pos:line="4518" pos:column="42">pBt<pos:position pos:line="4518" pos:column="45"/></name></expr></argument>, <argument><expr><name><name pos:line="4518" pos:column="47">pOp<pos:position pos:line="4518" pos:column="50"/></name><operator pos:line="4518" pos:column="50">-&gt;<pos:position pos:line="4518" pos:column="55"/></operator><name pos:line="4518" pos:column="52">p2<pos:position pos:line="4518" pos:column="54"/></name></name></expr></argument>, <argument><expr><name pos:line="4518" pos:column="56">isWriteLock<pos:position pos:line="4518" pos:column="67"/></name></expr></argument>)<pos:position pos:line="4518" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="4518" pos:column="69"/></expr_stmt>
  <if pos:line="4519" pos:column="3">if<condition pos:line="4519" pos:column="5">( <expr><operator pos:line="4519" pos:column="7">(<pos:position pos:line="4519" pos:column="8"/></operator><name pos:line="4519" pos:column="8">rc<pos:position pos:line="4519" pos:column="10"/></name><operator pos:line="4519" pos:column="10">&amp;<pos:position pos:line="4519" pos:column="15"/></operator><literal type="number" pos:line="4519" pos:column="11">0xFF<pos:position pos:line="4519" pos:column="15"/></literal><operator pos:line="4519" pos:column="15">)<pos:position pos:line="4519" pos:column="16"/></operator><operator pos:line="4519" pos:column="16">==<pos:position pos:line="4519" pos:column="18"/></operator><name pos:line="4519" pos:column="18">SQLITE_LOCKED<pos:position pos:line="4519" pos:column="31"/></name></expr> )<pos:position pos:line="4519" pos:column="33"/></condition><then><block pos:line="4519" pos:column="33">{
    <decl_stmt><decl><type><specifier pos:line="4520" pos:column="5">const<pos:position pos:line="4520" pos:column="10"/></specifier> <name pos:line="4520" pos:column="11">char<pos:position pos:line="4520" pos:column="15"/></name> <modifier pos:line="4520" pos:column="16">*<pos:position pos:line="4520" pos:column="17"/></modifier></type><name pos:line="4520" pos:column="17">z<pos:position pos:line="4520" pos:column="18"/></name> <init pos:line="4520" pos:column="19">= <expr><name><name pos:line="4520" pos:column="21">pOp<pos:position pos:line="4520" pos:column="24"/></name><operator pos:line="4520" pos:column="24">-&gt;<pos:position pos:line="4520" pos:column="29"/></operator><name pos:line="4520" pos:column="26">p4<pos:position pos:line="4520" pos:column="28"/></name><operator pos:line="4520" pos:column="28">.<pos:position pos:line="4520" pos:column="29"/></operator><name pos:line="4520" pos:column="29">z<pos:position pos:line="4520" pos:column="30"/></name></name></expr></init></decl>;<pos:position pos:line="4520" pos:column="31"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="4521" pos:column="5">sqlite3SetString<pos:position pos:line="4521" pos:column="21"/></name><argument_list pos:line="4521" pos:column="21">(<argument><expr><operator pos:line="4521" pos:column="22">&amp;<pos:position pos:line="4521" pos:column="27"/></operator><name><name pos:line="4521" pos:column="23">p<pos:position pos:line="4521" pos:column="24"/></name><operator pos:line="4521" pos:column="24">-&gt;<pos:position pos:line="4521" pos:column="29"/></operator><name pos:line="4521" pos:column="26">zErrMsg<pos:position pos:line="4521" pos:column="33"/></name></name></expr></argument>, <argument><expr><name pos:line="4521" pos:column="35">db<pos:position pos:line="4521" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="4521" pos:column="39">"database table is locked: %s"<pos:position pos:line="4521" pos:column="69"/></literal></expr></argument>, <argument><expr><name pos:line="4521" pos:column="71">z<pos:position pos:line="4521" pos:column="72"/></name></expr></argument>)<pos:position pos:line="4521" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="4521" pos:column="74"/></expr_stmt>
  }<pos:position pos:line="4522" pos:column="4"/></block></then></if>
  <break pos:line="4523" pos:column="3">break;<pos:position pos:line="4523" pos:column="9"/></break>
}<pos:position pos:line="4524" pos:column="2"/></block>
<cpp:endif pos:line="4525" pos:column="1">#<cpp:directive pos:line="4525" pos:column="2">endif<pos:position pos:line="4525" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="4525" pos:column="8">/* SQLITE_OMIT_SHARED_CACHE */</comment>

<cpp:ifndef pos:line="4527" pos:column="1">#<cpp:directive pos:line="4527" pos:column="2">ifndef<pos:position pos:line="4527" pos:column="8"/></cpp:directive> <name pos:line="4527" pos:column="9">SQLITE_OMIT_VIRTUALTABLE<pos:position pos:line="4527" pos:column="33"/></name></cpp:ifndef>
<comment type="block" pos:line="4528" pos:column="1">/* Opcode: VBegin * * * P4 *
**
** P4 may be a pointer to an sqlite3_vtab structure. If so, call the 
** xBegin method for that table.
**
** Also, whether or not P4 is set, check that this is not being called from
** within a callback to a virtual table xSync() method. If it is, the error
** code will be set to SQLITE_LOCKED.
*/</comment>
<case pos:line="4537" pos:column="1">case <expr><name pos:line="4537" pos:column="6">OP_VBegin<pos:position pos:line="4537" pos:column="15"/></name></expr>:<pos:position pos:line="4537" pos:column="16"/></case> <block pos:line="4537" pos:column="17">{
  <decl_stmt><decl><type><name pos:line="4538" pos:column="3">sqlite3_vtab<pos:position pos:line="4538" pos:column="15"/></name> <modifier pos:line="4538" pos:column="16">*<pos:position pos:line="4538" pos:column="17"/></modifier></type><name pos:line="4538" pos:column="17">pVtab<pos:position pos:line="4538" pos:column="22"/></name></decl>;<pos:position pos:line="4538" pos:column="23"/></decl_stmt>
  <expr_stmt><expr><name pos:line="4539" pos:column="3">pVtab<pos:position pos:line="4539" pos:column="8"/></name> <operator pos:line="4539" pos:column="9">=<pos:position pos:line="4539" pos:column="10"/></operator> <name><name pos:line="4539" pos:column="11">pOp<pos:position pos:line="4539" pos:column="14"/></name><operator pos:line="4539" pos:column="14">-&gt;<pos:position pos:line="4539" pos:column="19"/></operator><name pos:line="4539" pos:column="16">p4<pos:position pos:line="4539" pos:column="18"/></name><operator pos:line="4539" pos:column="18">.<pos:position pos:line="4539" pos:column="19"/></operator><name pos:line="4539" pos:column="19">pVtab<pos:position pos:line="4539" pos:column="24"/></name></name></expr>;<pos:position pos:line="4539" pos:column="25"/></expr_stmt>
  <expr_stmt><expr><name pos:line="4540" pos:column="3">rc<pos:position pos:line="4540" pos:column="5"/></name> <operator pos:line="4540" pos:column="6">=<pos:position pos:line="4540" pos:column="7"/></operator> <call><name pos:line="4540" pos:column="8">sqlite3VtabBegin<pos:position pos:line="4540" pos:column="24"/></name><argument_list pos:line="4540" pos:column="24">(<argument><expr><name pos:line="4540" pos:column="25">db<pos:position pos:line="4540" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="4540" pos:column="29">pVtab<pos:position pos:line="4540" pos:column="34"/></name></expr></argument>)<pos:position pos:line="4540" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="4540" pos:column="36"/></expr_stmt>
  <if pos:line="4541" pos:column="3">if<condition pos:line="4541" pos:column="5">( <expr><name pos:line="4541" pos:column="7">pVtab<pos:position pos:line="4541" pos:column="12"/></name></expr> )<pos:position pos:line="4541" pos:column="14"/></condition><then><block pos:line="4541" pos:column="14">{
    <expr_stmt><expr><call><name pos:line="4542" pos:column="5">sqlite3DbFree<pos:position pos:line="4542" pos:column="18"/></name><argument_list pos:line="4542" pos:column="18">(<argument><expr><name pos:line="4542" pos:column="19">db<pos:position pos:line="4542" pos:column="21"/></name></expr></argument>, <argument><expr><name><name pos:line="4542" pos:column="23">p<pos:position pos:line="4542" pos:column="24"/></name><operator pos:line="4542" pos:column="24">-&gt;<pos:position pos:line="4542" pos:column="29"/></operator><name pos:line="4542" pos:column="26">zErrMsg<pos:position pos:line="4542" pos:column="33"/></name></name></expr></argument>)<pos:position pos:line="4542" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="4542" pos:column="35"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="4543" pos:column="5">p<pos:position pos:line="4543" pos:column="6"/></name><operator pos:line="4543" pos:column="6">-&gt;<pos:position pos:line="4543" pos:column="11"/></operator><name pos:line="4543" pos:column="8">zErrMsg<pos:position pos:line="4543" pos:column="15"/></name></name> <operator pos:line="4543" pos:column="16">=<pos:position pos:line="4543" pos:column="17"/></operator> <name><name pos:line="4543" pos:column="18">pVtab<pos:position pos:line="4543" pos:column="23"/></name><operator pos:line="4543" pos:column="23">-&gt;<pos:position pos:line="4543" pos:column="28"/></operator><name pos:line="4543" pos:column="25">zErrMsg<pos:position pos:line="4543" pos:column="32"/></name></name></expr>;<pos:position pos:line="4543" pos:column="33"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="4544" pos:column="5">pVtab<pos:position pos:line="4544" pos:column="10"/></name><operator pos:line="4544" pos:column="10">-&gt;<pos:position pos:line="4544" pos:column="15"/></operator><name pos:line="4544" pos:column="12">zErrMsg<pos:position pos:line="4544" pos:column="19"/></name></name> <operator pos:line="4544" pos:column="20">=<pos:position pos:line="4544" pos:column="21"/></operator> <literal type="number" pos:line="4544" pos:column="22">0<pos:position pos:line="4544" pos:column="23"/></literal></expr>;<pos:position pos:line="4544" pos:column="24"/></expr_stmt>
  }<pos:position pos:line="4545" pos:column="4"/></block></then></if>
  <break pos:line="4546" pos:column="3">break;<pos:position pos:line="4546" pos:column="9"/></break>
}<pos:position pos:line="4547" pos:column="2"/></block>
<cpp:endif pos:line="4548" pos:column="1">#<cpp:directive pos:line="4548" pos:column="2">endif<pos:position pos:line="4548" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="4548" pos:column="8">/* SQLITE_OMIT_VIRTUALTABLE */</comment>

<cpp:ifndef pos:line="4550" pos:column="1">#<cpp:directive pos:line="4550" pos:column="2">ifndef<pos:position pos:line="4550" pos:column="8"/></cpp:directive> <name pos:line="4550" pos:column="9">SQLITE_OMIT_VIRTUALTABLE<pos:position pos:line="4550" pos:column="33"/></name></cpp:ifndef>
<comment type="block" pos:line="4551" pos:column="1">/* Opcode: VCreate P1 * * P4 *
**
** P4 is the name of a virtual table in database P1. Call the xCreate method
** for that table.
*/</comment>
<case pos:line="4556" pos:column="1">case <expr><name pos:line="4556" pos:column="6">OP_VCreate<pos:position pos:line="4556" pos:column="16"/></name></expr>:<pos:position pos:line="4556" pos:column="17"/></case> <block pos:line="4556" pos:column="18">{
  <expr_stmt><expr><name pos:line="4557" pos:column="3">rc<pos:position pos:line="4557" pos:column="5"/></name> <operator pos:line="4557" pos:column="6">=<pos:position pos:line="4557" pos:column="7"/></operator> <call><name pos:line="4557" pos:column="8">sqlite3VtabCallCreate<pos:position pos:line="4557" pos:column="29"/></name><argument_list pos:line="4557" pos:column="29">(<argument><expr><name pos:line="4557" pos:column="30">db<pos:position pos:line="4557" pos:column="32"/></name></expr></argument>, <argument><expr><name><name pos:line="4557" pos:column="34">pOp<pos:position pos:line="4557" pos:column="37"/></name><operator pos:line="4557" pos:column="37">-&gt;<pos:position pos:line="4557" pos:column="42"/></operator><name pos:line="4557" pos:column="39">p1<pos:position pos:line="4557" pos:column="41"/></name></name></expr></argument>, <argument><expr><name><name pos:line="4557" pos:column="43">pOp<pos:position pos:line="4557" pos:column="46"/></name><operator pos:line="4557" pos:column="46">-&gt;<pos:position pos:line="4557" pos:column="51"/></operator><name pos:line="4557" pos:column="48">p4<pos:position pos:line="4557" pos:column="50"/></name><operator pos:line="4557" pos:column="50">.<pos:position pos:line="4557" pos:column="51"/></operator><name pos:line="4557" pos:column="51">z<pos:position pos:line="4557" pos:column="52"/></name></name></expr></argument>, <argument><expr><operator pos:line="4557" pos:column="54">&amp;<pos:position pos:line="4557" pos:column="59"/></operator><name><name pos:line="4557" pos:column="55">p<pos:position pos:line="4557" pos:column="56"/></name><operator pos:line="4557" pos:column="56">-&gt;<pos:position pos:line="4557" pos:column="61"/></operator><name pos:line="4557" pos:column="58">zErrMsg<pos:position pos:line="4557" pos:column="65"/></name></name></expr></argument>)<pos:position pos:line="4557" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="4557" pos:column="67"/></expr_stmt>
  <break pos:line="4558" pos:column="3">break;<pos:position pos:line="4558" pos:column="9"/></break>
}<pos:position pos:line="4559" pos:column="2"/></block>
<cpp:endif pos:line="4560" pos:column="1">#<cpp:directive pos:line="4560" pos:column="2">endif<pos:position pos:line="4560" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="4560" pos:column="8">/* SQLITE_OMIT_VIRTUALTABLE */</comment>

<cpp:ifndef pos:line="4562" pos:column="1">#<cpp:directive pos:line="4562" pos:column="2">ifndef<pos:position pos:line="4562" pos:column="8"/></cpp:directive> <name pos:line="4562" pos:column="9">SQLITE_OMIT_VIRTUALTABLE<pos:position pos:line="4562" pos:column="33"/></name></cpp:ifndef>
<comment type="block" pos:line="4563" pos:column="1">/* Opcode: VDestroy P1 * * P4 *
**
** P4 is the name of a virtual table in database P1.  Call the xDestroy method
** of that table.
*/</comment>
<case pos:line="4568" pos:column="1">case <expr><name pos:line="4568" pos:column="6">OP_VDestroy<pos:position pos:line="4568" pos:column="17"/></name></expr>:<pos:position pos:line="4568" pos:column="18"/></case> <block pos:line="4568" pos:column="19">{
  <expr_stmt><expr><name><name pos:line="4569" pos:column="3">p<pos:position pos:line="4569" pos:column="4"/></name><operator pos:line="4569" pos:column="4">-&gt;<pos:position pos:line="4569" pos:column="9"/></operator><name pos:line="4569" pos:column="6">inVtabMethod<pos:position pos:line="4569" pos:column="18"/></name></name> <operator pos:line="4569" pos:column="19">=<pos:position pos:line="4569" pos:column="20"/></operator> <literal type="number" pos:line="4569" pos:column="21">2<pos:position pos:line="4569" pos:column="22"/></literal></expr>;<pos:position pos:line="4569" pos:column="23"/></expr_stmt>
  <expr_stmt><expr><name pos:line="4570" pos:column="3">rc<pos:position pos:line="4570" pos:column="5"/></name> <operator pos:line="4570" pos:column="6">=<pos:position pos:line="4570" pos:column="7"/></operator> <call><name pos:line="4570" pos:column="8">sqlite3VtabCallDestroy<pos:position pos:line="4570" pos:column="30"/></name><argument_list pos:line="4570" pos:column="30">(<argument><expr><name pos:line="4570" pos:column="31">db<pos:position pos:line="4570" pos:column="33"/></name></expr></argument>, <argument><expr><name><name pos:line="4570" pos:column="35">pOp<pos:position pos:line="4570" pos:column="38"/></name><operator pos:line="4570" pos:column="38">-&gt;<pos:position pos:line="4570" pos:column="43"/></operator><name pos:line="4570" pos:column="40">p1<pos:position pos:line="4570" pos:column="42"/></name></name></expr></argument>, <argument><expr><name><name pos:line="4570" pos:column="44">pOp<pos:position pos:line="4570" pos:column="47"/></name><operator pos:line="4570" pos:column="47">-&gt;<pos:position pos:line="4570" pos:column="52"/></operator><name pos:line="4570" pos:column="49">p4<pos:position pos:line="4570" pos:column="51"/></name><operator pos:line="4570" pos:column="51">.<pos:position pos:line="4570" pos:column="52"/></operator><name pos:line="4570" pos:column="52">z<pos:position pos:line="4570" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="4570" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="4570" pos:column="55"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="4571" pos:column="3">p<pos:position pos:line="4571" pos:column="4"/></name><operator pos:line="4571" pos:column="4">-&gt;<pos:position pos:line="4571" pos:column="9"/></operator><name pos:line="4571" pos:column="6">inVtabMethod<pos:position pos:line="4571" pos:column="18"/></name></name> <operator pos:line="4571" pos:column="19">=<pos:position pos:line="4571" pos:column="20"/></operator> <literal type="number" pos:line="4571" pos:column="21">0<pos:position pos:line="4571" pos:column="22"/></literal></expr>;<pos:position pos:line="4571" pos:column="23"/></expr_stmt>
  <break pos:line="4572" pos:column="3">break;<pos:position pos:line="4572" pos:column="9"/></break>
}<pos:position pos:line="4573" pos:column="2"/></block>
<cpp:endif pos:line="4574" pos:column="1">#<cpp:directive pos:line="4574" pos:column="2">endif<pos:position pos:line="4574" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="4574" pos:column="8">/* SQLITE_OMIT_VIRTUALTABLE */</comment>

<cpp:ifndef pos:line="4576" pos:column="1">#<cpp:directive pos:line="4576" pos:column="2">ifndef<pos:position pos:line="4576" pos:column="8"/></cpp:directive> <name pos:line="4576" pos:column="9">SQLITE_OMIT_VIRTUALTABLE<pos:position pos:line="4576" pos:column="33"/></name></cpp:ifndef>
<comment type="block" pos:line="4577" pos:column="1">/* Opcode: VOpen P1 * * P4 *
**
** P4 is a pointer to a virtual table object, an sqlite3_vtab structure.
** P1 is a cursor number.  This opcode opens a cursor to the virtual
** table and stores that cursor in P1.
*/</comment>
<case pos:line="4583" pos:column="1">case <expr><name pos:line="4583" pos:column="6">OP_VOpen<pos:position pos:line="4583" pos:column="14"/></name></expr>:<pos:position pos:line="4583" pos:column="15"/></case> <block pos:line="4583" pos:column="16">{
  <decl_stmt><decl><type><name pos:line="4584" pos:column="3">VdbeCursor<pos:position pos:line="4584" pos:column="13"/></name> <modifier pos:line="4584" pos:column="14">*<pos:position pos:line="4584" pos:column="15"/></modifier></type><name pos:line="4584" pos:column="15">pCur<pos:position pos:line="4584" pos:column="19"/></name></decl>;<pos:position pos:line="4584" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4585" pos:column="3">sqlite3_vtab_cursor<pos:position pos:line="4585" pos:column="22"/></name> <modifier pos:line="4585" pos:column="23">*<pos:position pos:line="4585" pos:column="24"/></modifier></type><name pos:line="4585" pos:column="24">pVtabCursor<pos:position pos:line="4585" pos:column="35"/></name></decl>;<pos:position pos:line="4585" pos:column="36"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4586" pos:column="3">sqlite3_vtab<pos:position pos:line="4586" pos:column="15"/></name> <modifier pos:line="4586" pos:column="16">*<pos:position pos:line="4586" pos:column="17"/></modifier></type><name pos:line="4586" pos:column="17">pVtab<pos:position pos:line="4586" pos:column="22"/></name></decl>;<pos:position pos:line="4586" pos:column="23"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4587" pos:column="3">sqlite3_module<pos:position pos:line="4587" pos:column="17"/></name> <modifier pos:line="4587" pos:column="18">*<pos:position pos:line="4587" pos:column="19"/></modifier></type><name pos:line="4587" pos:column="19">pModule<pos:position pos:line="4587" pos:column="26"/></name></decl>;<pos:position pos:line="4587" pos:column="27"/></decl_stmt>

  <expr_stmt><expr><name pos:line="4589" pos:column="3">pCur<pos:position pos:line="4589" pos:column="7"/></name> <operator pos:line="4589" pos:column="8">=<pos:position pos:line="4589" pos:column="9"/></operator> <literal type="number" pos:line="4589" pos:column="10">0<pos:position pos:line="4589" pos:column="11"/></literal></expr>;<pos:position pos:line="4589" pos:column="12"/></expr_stmt>
  <expr_stmt><expr><name pos:line="4590" pos:column="3">pVtabCursor<pos:position pos:line="4590" pos:column="14"/></name> <operator pos:line="4590" pos:column="15">=<pos:position pos:line="4590" pos:column="16"/></operator> <literal type="number" pos:line="4590" pos:column="17">0<pos:position pos:line="4590" pos:column="18"/></literal></expr>;<pos:position pos:line="4590" pos:column="19"/></expr_stmt>
  <expr_stmt><expr><name pos:line="4591" pos:column="3">pVtab<pos:position pos:line="4591" pos:column="8"/></name> <operator pos:line="4591" pos:column="9">=<pos:position pos:line="4591" pos:column="10"/></operator> <name><name pos:line="4591" pos:column="11">pOp<pos:position pos:line="4591" pos:column="14"/></name><operator pos:line="4591" pos:column="14">-&gt;<pos:position pos:line="4591" pos:column="19"/></operator><name pos:line="4591" pos:column="16">p4<pos:position pos:line="4591" pos:column="18"/></name><operator pos:line="4591" pos:column="18">.<pos:position pos:line="4591" pos:column="19"/></operator><name pos:line="4591" pos:column="19">pVtab<pos:position pos:line="4591" pos:column="24"/></name></name></expr>;<pos:position pos:line="4591" pos:column="25"/></expr_stmt>
  <expr_stmt><expr><name pos:line="4592" pos:column="3">pModule<pos:position pos:line="4592" pos:column="10"/></name> <operator pos:line="4592" pos:column="11">=<pos:position pos:line="4592" pos:column="12"/></operator> <operator pos:line="4592" pos:column="13">(<pos:position pos:line="4592" pos:column="14"/></operator><name pos:line="4592" pos:column="14">sqlite3_module<pos:position pos:line="4592" pos:column="28"/></name> <operator pos:line="4592" pos:column="29">*<pos:position pos:line="4592" pos:column="30"/></operator><operator pos:line="4592" pos:column="30">)<pos:position pos:line="4592" pos:column="31"/></operator><name><name pos:line="4592" pos:column="31">pVtab<pos:position pos:line="4592" pos:column="36"/></name><operator pos:line="4592" pos:column="36">-&gt;<pos:position pos:line="4592" pos:column="41"/></operator><name pos:line="4592" pos:column="38">pModule<pos:position pos:line="4592" pos:column="45"/></name></name></expr>;<pos:position pos:line="4592" pos:column="46"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="4593" pos:column="3">assert<pos:position pos:line="4593" pos:column="9"/></name><argument_list pos:line="4593" pos:column="9">(<argument><expr><name pos:line="4593" pos:column="10">pVtab<pos:position pos:line="4593" pos:column="15"/></name> <operator pos:line="4593" pos:column="16">&amp;&amp;<pos:position pos:line="4593" pos:column="26"/></operator> <name pos:line="4593" pos:column="19">pModule<pos:position pos:line="4593" pos:column="26"/></name></expr></argument>)<pos:position pos:line="4593" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="4593" pos:column="28"/></expr_stmt>
  <if pos:line="4594" pos:column="3">if<condition pos:line="4594" pos:column="5">( <expr><call><name pos:line="4594" pos:column="7">sqlite3SafetyOff<pos:position pos:line="4594" pos:column="23"/></name><argument_list pos:line="4594" pos:column="23">(<argument><expr><name pos:line="4594" pos:column="24">db<pos:position pos:line="4594" pos:column="26"/></name></expr></argument>)<pos:position pos:line="4594" pos:column="27"/></argument_list></call></expr> )<pos:position pos:line="4594" pos:column="29"/></condition><then pos:line="4594" pos:column="29"> <block type="pseudo"><goto pos:line="4594" pos:column="30">goto <name pos:line="4594" pos:column="35">abort_due_to_misuse<pos:position pos:line="4594" pos:column="54"/></name>;<pos:position pos:line="4594" pos:column="55"/></goto></block></then></if>
  <expr_stmt><expr><name pos:line="4595" pos:column="3">rc<pos:position pos:line="4595" pos:column="5"/></name> <operator pos:line="4595" pos:column="6">=<pos:position pos:line="4595" pos:column="7"/></operator> <call><name><name pos:line="4595" pos:column="8">pModule<pos:position pos:line="4595" pos:column="15"/></name><operator pos:line="4595" pos:column="15">-&gt;<pos:position pos:line="4595" pos:column="20"/></operator><name pos:line="4595" pos:column="17">xOpen<pos:position pos:line="4595" pos:column="22"/></name></name><argument_list pos:line="4595" pos:column="22">(<argument><expr><name pos:line="4595" pos:column="23">pVtab<pos:position pos:line="4595" pos:column="28"/></name></expr></argument>, <argument><expr><operator pos:line="4595" pos:column="30">&amp;<pos:position pos:line="4595" pos:column="35"/></operator><name pos:line="4595" pos:column="31">pVtabCursor<pos:position pos:line="4595" pos:column="42"/></name></expr></argument>)<pos:position pos:line="4595" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="4595" pos:column="44"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="4596" pos:column="3">sqlite3DbFree<pos:position pos:line="4596" pos:column="16"/></name><argument_list pos:line="4596" pos:column="16">(<argument><expr><name pos:line="4596" pos:column="17">db<pos:position pos:line="4596" pos:column="19"/></name></expr></argument>, <argument><expr><name><name pos:line="4596" pos:column="21">p<pos:position pos:line="4596" pos:column="22"/></name><operator pos:line="4596" pos:column="22">-&gt;<pos:position pos:line="4596" pos:column="27"/></operator><name pos:line="4596" pos:column="24">zErrMsg<pos:position pos:line="4596" pos:column="31"/></name></name></expr></argument>)<pos:position pos:line="4596" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="4596" pos:column="33"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="4597" pos:column="3">p<pos:position pos:line="4597" pos:column="4"/></name><operator pos:line="4597" pos:column="4">-&gt;<pos:position pos:line="4597" pos:column="9"/></operator><name pos:line="4597" pos:column="6">zErrMsg<pos:position pos:line="4597" pos:column="13"/></name></name> <operator pos:line="4597" pos:column="14">=<pos:position pos:line="4597" pos:column="15"/></operator> <name><name pos:line="4597" pos:column="16">pVtab<pos:position pos:line="4597" pos:column="21"/></name><operator pos:line="4597" pos:column="21">-&gt;<pos:position pos:line="4597" pos:column="26"/></operator><name pos:line="4597" pos:column="23">zErrMsg<pos:position pos:line="4597" pos:column="30"/></name></name></expr>;<pos:position pos:line="4597" pos:column="31"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="4598" pos:column="3">pVtab<pos:position pos:line="4598" pos:column="8"/></name><operator pos:line="4598" pos:column="8">-&gt;<pos:position pos:line="4598" pos:column="13"/></operator><name pos:line="4598" pos:column="10">zErrMsg<pos:position pos:line="4598" pos:column="17"/></name></name> <operator pos:line="4598" pos:column="18">=<pos:position pos:line="4598" pos:column="19"/></operator> <literal type="number" pos:line="4598" pos:column="20">0<pos:position pos:line="4598" pos:column="21"/></literal></expr>;<pos:position pos:line="4598" pos:column="22"/></expr_stmt>
  <if pos:line="4599" pos:column="3">if<condition pos:line="4599" pos:column="5">( <expr><call><name pos:line="4599" pos:column="7">sqlite3SafetyOn<pos:position pos:line="4599" pos:column="22"/></name><argument_list pos:line="4599" pos:column="22">(<argument><expr><name pos:line="4599" pos:column="23">db<pos:position pos:line="4599" pos:column="25"/></name></expr></argument>)<pos:position pos:line="4599" pos:column="26"/></argument_list></call></expr> )<pos:position pos:line="4599" pos:column="28"/></condition><then pos:line="4599" pos:column="28"> <block type="pseudo"><goto pos:line="4599" pos:column="29">goto <name pos:line="4599" pos:column="34">abort_due_to_misuse<pos:position pos:line="4599" pos:column="53"/></name>;<pos:position pos:line="4599" pos:column="54"/></goto></block></then></if>
  <if pos:line="4600" pos:column="3">if<condition pos:line="4600" pos:column="5">( <expr><name pos:line="4600" pos:column="7">SQLITE_OK<pos:position pos:line="4600" pos:column="16"/></name><operator pos:line="4600" pos:column="16">==<pos:position pos:line="4600" pos:column="18"/></operator><name pos:line="4600" pos:column="18">rc<pos:position pos:line="4600" pos:column="20"/></name></expr> )<pos:position pos:line="4600" pos:column="22"/></condition><then><block pos:line="4600" pos:column="22">{
    <comment type="block" pos:line="4601" pos:column="5">/* Initialize sqlite3_vtab_cursor base class */</comment>
    <expr_stmt><expr><name><name pos:line="4602" pos:column="5">pVtabCursor<pos:position pos:line="4602" pos:column="16"/></name><operator pos:line="4602" pos:column="16">-&gt;<pos:position pos:line="4602" pos:column="21"/></operator><name pos:line="4602" pos:column="18">pVtab<pos:position pos:line="4602" pos:column="23"/></name></name> <operator pos:line="4602" pos:column="24">=<pos:position pos:line="4602" pos:column="25"/></operator> <name pos:line="4602" pos:column="26">pVtab<pos:position pos:line="4602" pos:column="31"/></name></expr>;<pos:position pos:line="4602" pos:column="32"/></expr_stmt>

    <comment type="block" pos:line="4604" pos:column="5">/* Initialise vdbe cursor object */</comment>
    <expr_stmt><expr><name pos:line="4605" pos:column="5">pCur<pos:position pos:line="4605" pos:column="9"/></name> <operator pos:line="4605" pos:column="10">=<pos:position pos:line="4605" pos:column="11"/></operator> <call><name pos:line="4605" pos:column="12">allocateCursor<pos:position pos:line="4605" pos:column="26"/></name><argument_list pos:line="4605" pos:column="26">(<argument><expr><name pos:line="4605" pos:column="27">p<pos:position pos:line="4605" pos:column="28"/></name></expr></argument>, <argument><expr><name><name pos:line="4605" pos:column="30">pOp<pos:position pos:line="4605" pos:column="33"/></name><operator pos:line="4605" pos:column="33">-&gt;<pos:position pos:line="4605" pos:column="38"/></operator><name pos:line="4605" pos:column="35">p1<pos:position pos:line="4605" pos:column="37"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="4605" pos:column="39">0<pos:position pos:line="4605" pos:column="40"/></literal></expr></argument>, <argument><expr><operator pos:line="4605" pos:column="42">-<pos:position pos:line="4605" pos:column="43"/></operator><literal type="number" pos:line="4605" pos:column="43">1<pos:position pos:line="4605" pos:column="44"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="4605" pos:column="46">0<pos:position pos:line="4605" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="4605" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="4605" pos:column="49"/></expr_stmt>
    <if pos:line="4606" pos:column="5">if<condition pos:line="4606" pos:column="7">( <expr><name pos:line="4606" pos:column="9">pCur<pos:position pos:line="4606" pos:column="13"/></name></expr> )<pos:position pos:line="4606" pos:column="15"/></condition><then><block pos:line="4606" pos:column="15">{
      <expr_stmt><expr><name><name pos:line="4607" pos:column="7">pCur<pos:position pos:line="4607" pos:column="11"/></name><operator pos:line="4607" pos:column="11">-&gt;<pos:position pos:line="4607" pos:column="16"/></operator><name pos:line="4607" pos:column="13">pVtabCursor<pos:position pos:line="4607" pos:column="24"/></name></name> <operator pos:line="4607" pos:column="25">=<pos:position pos:line="4607" pos:column="26"/></operator> <name pos:line="4607" pos:column="27">pVtabCursor<pos:position pos:line="4607" pos:column="38"/></name></expr>;<pos:position pos:line="4607" pos:column="39"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="4608" pos:column="7">pCur<pos:position pos:line="4608" pos:column="11"/></name><operator pos:line="4608" pos:column="11">-&gt;<pos:position pos:line="4608" pos:column="16"/></operator><name pos:line="4608" pos:column="13">pModule<pos:position pos:line="4608" pos:column="20"/></name></name> <operator pos:line="4608" pos:column="21">=<pos:position pos:line="4608" pos:column="22"/></operator> <name><name pos:line="4608" pos:column="23">pVtabCursor<pos:position pos:line="4608" pos:column="34"/></name><operator pos:line="4608" pos:column="34">-&gt;<pos:position pos:line="4608" pos:column="39"/></operator><name pos:line="4608" pos:column="36">pVtab<pos:position pos:line="4608" pos:column="41"/></name><operator pos:line="4608" pos:column="41">-&gt;<pos:position pos:line="4608" pos:column="46"/></operator><name pos:line="4608" pos:column="43">pModule<pos:position pos:line="4608" pos:column="50"/></name></name></expr>;<pos:position pos:line="4608" pos:column="51"/></expr_stmt>
    }<pos:position pos:line="4609" pos:column="6"/></block></then><else pos:line="4609" pos:column="6">else<block pos:line="4609" pos:column="10">{
      <expr_stmt><expr><name><name pos:line="4610" pos:column="7">db<pos:position pos:line="4610" pos:column="9"/></name><operator pos:line="4610" pos:column="9">-&gt;<pos:position pos:line="4610" pos:column="14"/></operator><name pos:line="4610" pos:column="11">mallocFailed<pos:position pos:line="4610" pos:column="23"/></name></name> <operator pos:line="4610" pos:column="24">=<pos:position pos:line="4610" pos:column="25"/></operator> <literal type="number" pos:line="4610" pos:column="26">1<pos:position pos:line="4610" pos:column="27"/></literal></expr>;<pos:position pos:line="4610" pos:column="28"/></expr_stmt>
      <expr_stmt><expr><call><name><name pos:line="4611" pos:column="7">pModule<pos:position pos:line="4611" pos:column="14"/></name><operator pos:line="4611" pos:column="14">-&gt;<pos:position pos:line="4611" pos:column="19"/></operator><name pos:line="4611" pos:column="16">xClose<pos:position pos:line="4611" pos:column="22"/></name></name><argument_list pos:line="4611" pos:column="22">(<argument><expr><name pos:line="4611" pos:column="23">pVtabCursor<pos:position pos:line="4611" pos:column="34"/></name></expr></argument>)<pos:position pos:line="4611" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="4611" pos:column="36"/></expr_stmt>
    }<pos:position pos:line="4612" pos:column="6"/></block></else></if>
  }<pos:position pos:line="4613" pos:column="4"/></block></then></if>
  <break pos:line="4614" pos:column="3">break;<pos:position pos:line="4614" pos:column="9"/></break>
}<pos:position pos:line="4615" pos:column="2"/></block>
<cpp:endif pos:line="4616" pos:column="1">#<cpp:directive pos:line="4616" pos:column="2">endif<pos:position pos:line="4616" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="4616" pos:column="8">/* SQLITE_OMIT_VIRTUALTABLE */</comment>

<cpp:ifndef pos:line="4618" pos:column="1">#<cpp:directive pos:line="4618" pos:column="2">ifndef<pos:position pos:line="4618" pos:column="8"/></cpp:directive> <name pos:line="4618" pos:column="9">SQLITE_OMIT_VIRTUALTABLE<pos:position pos:line="4618" pos:column="33"/></name></cpp:ifndef>
<comment type="block" pos:line="4619" pos:column="1">/* Opcode: VFilter P1 P2 P3 P4 *
**
** P1 is a cursor opened using VOpen.  P2 is an address to jump to if
** the filtered result set is empty.
**
** P4 is either NULL or a string that was generated by the xBestIndex
** method of the module.  The interpretation of the P4 string is left
** to the module implementation.
**
** This opcode invokes the xFilter method on the virtual table specified
** by P1.  The integer query plan parameter to xFilter is stored in register
** P3. Register P3+1 stores the argc parameter to be passed to the
** xFilter method. Registers P3+2..P3+1+argc are the argc
** additional parameters which are passed to
** xFilter as argv. Register P3+2 becomes argv[0] when passed to xFilter.
**
** A jump is made to P2 if the result set after filtering would be empty.
*/</comment>
<case pos:line="4637" pos:column="1">case <expr><name pos:line="4637" pos:column="6">OP_VFilter<pos:position pos:line="4637" pos:column="16"/></name></expr>:<pos:position pos:line="4637" pos:column="17"/></case> <block pos:line="4637" pos:column="18">{   <comment type="block" pos:line="4637" pos:column="22">/* jump */</comment>
  <decl_stmt><decl><type><name pos:line="4638" pos:column="3">int<pos:position pos:line="4638" pos:column="6"/></name></type> <name pos:line="4638" pos:column="7">nArg<pos:position pos:line="4638" pos:column="11"/></name></decl>;<pos:position pos:line="4638" pos:column="12"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4639" pos:column="3">int<pos:position pos:line="4639" pos:column="6"/></name></type> <name pos:line="4639" pos:column="7">iQuery<pos:position pos:line="4639" pos:column="13"/></name></decl>;<pos:position pos:line="4639" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="4640" pos:column="3">const<pos:position pos:line="4640" pos:column="8"/></specifier> <name pos:line="4640" pos:column="9">sqlite3_module<pos:position pos:line="4640" pos:column="23"/></name> <modifier pos:line="4640" pos:column="24">*<pos:position pos:line="4640" pos:column="25"/></modifier></type><name pos:line="4640" pos:column="25">pModule<pos:position pos:line="4640" pos:column="32"/></name></decl>;<pos:position pos:line="4640" pos:column="33"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4641" pos:column="3">Mem<pos:position pos:line="4641" pos:column="6"/></name> <modifier pos:line="4641" pos:column="7">*<pos:position pos:line="4641" pos:column="8"/></modifier></type><name pos:line="4641" pos:column="8">pQuery<pos:position pos:line="4641" pos:column="14"/></name></decl>;<pos:position pos:line="4641" pos:column="15"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4642" pos:column="3">Mem<pos:position pos:line="4642" pos:column="6"/></name> <modifier pos:line="4642" pos:column="7">*<pos:position pos:line="4642" pos:column="8"/></modifier></type><name pos:line="4642" pos:column="8">pArgc<pos:position pos:line="4642" pos:column="13"/></name></decl>;<pos:position pos:line="4642" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4643" pos:column="3">sqlite3_vtab_cursor<pos:position pos:line="4643" pos:column="22"/></name> <modifier pos:line="4643" pos:column="23">*<pos:position pos:line="4643" pos:column="24"/></modifier></type><name pos:line="4643" pos:column="24">pVtabCursor<pos:position pos:line="4643" pos:column="35"/></name></decl>;<pos:position pos:line="4643" pos:column="36"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4644" pos:column="3">sqlite3_vtab<pos:position pos:line="4644" pos:column="15"/></name> <modifier pos:line="4644" pos:column="16">*<pos:position pos:line="4644" pos:column="17"/></modifier></type><name pos:line="4644" pos:column="17">pVtab<pos:position pos:line="4644" pos:column="22"/></name></decl>;<pos:position pos:line="4644" pos:column="23"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4645" pos:column="3">VdbeCursor<pos:position pos:line="4645" pos:column="13"/></name> <modifier pos:line="4645" pos:column="14">*<pos:position pos:line="4645" pos:column="15"/></modifier></type><name pos:line="4645" pos:column="15">pCur<pos:position pos:line="4645" pos:column="19"/></name></decl>;<pos:position pos:line="4645" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4646" pos:column="3">int<pos:position pos:line="4646" pos:column="6"/></name></type> <name pos:line="4646" pos:column="7">res<pos:position pos:line="4646" pos:column="10"/></name></decl>;<pos:position pos:line="4646" pos:column="11"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4647" pos:column="3">int<pos:position pos:line="4647" pos:column="6"/></name></type> <name pos:line="4647" pos:column="7">i<pos:position pos:line="4647" pos:column="8"/></name></decl>;<pos:position pos:line="4647" pos:column="9"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4648" pos:column="3">Mem<pos:position pos:line="4648" pos:column="6"/></name> <modifier pos:line="4648" pos:column="7">*<pos:position pos:line="4648" pos:column="8"/></modifier><modifier pos:line="4648" pos:column="8">*<pos:position pos:line="4648" pos:column="9"/></modifier></type><name pos:line="4648" pos:column="9">apArg<pos:position pos:line="4648" pos:column="14"/></name></decl>;<pos:position pos:line="4648" pos:column="15"/></decl_stmt>

  <expr_stmt><expr><name pos:line="4650" pos:column="3">pQuery<pos:position pos:line="4650" pos:column="9"/></name> <operator pos:line="4650" pos:column="10">=<pos:position pos:line="4650" pos:column="11"/></operator> <operator pos:line="4650" pos:column="12">&amp;<pos:position pos:line="4650" pos:column="17"/></operator><name><name pos:line="4650" pos:column="13">p<pos:position pos:line="4650" pos:column="14"/></name><operator pos:line="4650" pos:column="14">-&gt;<pos:position pos:line="4650" pos:column="19"/></operator><name pos:line="4650" pos:column="16">aMem<pos:position pos:line="4650" pos:column="20"/></name><index pos:line="4650" pos:column="20">[<expr><name><name pos:line="4650" pos:column="21">pOp<pos:position pos:line="4650" pos:column="24"/></name><operator pos:line="4650" pos:column="24">-&gt;<pos:position pos:line="4650" pos:column="29"/></operator><name pos:line="4650" pos:column="26">p3<pos:position pos:line="4650" pos:column="28"/></name></name></expr>]<pos:position pos:line="4650" pos:column="29"/></index></name></expr>;<pos:position pos:line="4650" pos:column="30"/></expr_stmt>
  <expr_stmt><expr><name pos:line="4651" pos:column="3">pArgc<pos:position pos:line="4651" pos:column="8"/></name> <operator pos:line="4651" pos:column="9">=<pos:position pos:line="4651" pos:column="10"/></operator> <operator pos:line="4651" pos:column="11">&amp;<pos:position pos:line="4651" pos:column="16"/></operator><name><name pos:line="4651" pos:column="12">pQuery<pos:position pos:line="4651" pos:column="18"/></name><index pos:line="4651" pos:column="18">[<expr><literal type="number" pos:line="4651" pos:column="19">1<pos:position pos:line="4651" pos:column="20"/></literal></expr>]<pos:position pos:line="4651" pos:column="21"/></index></name></expr>;<pos:position pos:line="4651" pos:column="22"/></expr_stmt>
  <expr_stmt><expr><name pos:line="4652" pos:column="3">pCur<pos:position pos:line="4652" pos:column="7"/></name> <operator pos:line="4652" pos:column="8">=<pos:position pos:line="4652" pos:column="9"/></operator> <name><name pos:line="4652" pos:column="10">p<pos:position pos:line="4652" pos:column="11"/></name><operator pos:line="4652" pos:column="11">-&gt;<pos:position pos:line="4652" pos:column="16"/></operator><name pos:line="4652" pos:column="13">apCsr<pos:position pos:line="4652" pos:column="18"/></name><index pos:line="4652" pos:column="18">[<expr><name><name pos:line="4652" pos:column="19">pOp<pos:position pos:line="4652" pos:column="22"/></name><operator pos:line="4652" pos:column="22">-&gt;<pos:position pos:line="4652" pos:column="27"/></operator><name pos:line="4652" pos:column="24">p1<pos:position pos:line="4652" pos:column="26"/></name></name></expr>]<pos:position pos:line="4652" pos:column="27"/></index></name></expr>;<pos:position pos:line="4652" pos:column="28"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="4653" pos:column="3">REGISTER_TRACE<pos:position pos:line="4653" pos:column="17"/></name><argument_list pos:line="4653" pos:column="17">(<argument><expr><name><name pos:line="4653" pos:column="18">pOp<pos:position pos:line="4653" pos:column="21"/></name><operator pos:line="4653" pos:column="21">-&gt;<pos:position pos:line="4653" pos:column="26"/></operator><name pos:line="4653" pos:column="23">p3<pos:position pos:line="4653" pos:column="25"/></name></name></expr></argument>, <argument><expr><name pos:line="4653" pos:column="27">pQuery<pos:position pos:line="4653" pos:column="33"/></name></expr></argument>)<pos:position pos:line="4653" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="4653" pos:column="35"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="4654" pos:column="3">assert<pos:position pos:line="4654" pos:column="9"/></name><argument_list pos:line="4654" pos:column="9">( <argument><expr><name><name pos:line="4654" pos:column="11">pCur<pos:position pos:line="4654" pos:column="15"/></name><operator pos:line="4654" pos:column="15">-&gt;<pos:position pos:line="4654" pos:column="20"/></operator><name pos:line="4654" pos:column="17">pVtabCursor<pos:position pos:line="4654" pos:column="28"/></name></name></expr></argument> )<pos:position pos:line="4654" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="4654" pos:column="31"/></expr_stmt>
  <expr_stmt><expr><name pos:line="4655" pos:column="3">pVtabCursor<pos:position pos:line="4655" pos:column="14"/></name> <operator pos:line="4655" pos:column="15">=<pos:position pos:line="4655" pos:column="16"/></operator> <name><name pos:line="4655" pos:column="17">pCur<pos:position pos:line="4655" pos:column="21"/></name><operator pos:line="4655" pos:column="21">-&gt;<pos:position pos:line="4655" pos:column="26"/></operator><name pos:line="4655" pos:column="23">pVtabCursor<pos:position pos:line="4655" pos:column="34"/></name></name></expr>;<pos:position pos:line="4655" pos:column="35"/></expr_stmt>
  <expr_stmt><expr><name pos:line="4656" pos:column="3">pVtab<pos:position pos:line="4656" pos:column="8"/></name> <operator pos:line="4656" pos:column="9">=<pos:position pos:line="4656" pos:column="10"/></operator> <name><name pos:line="4656" pos:column="11">pVtabCursor<pos:position pos:line="4656" pos:column="22"/></name><operator pos:line="4656" pos:column="22">-&gt;<pos:position pos:line="4656" pos:column="27"/></operator><name pos:line="4656" pos:column="24">pVtab<pos:position pos:line="4656" pos:column="29"/></name></name></expr>;<pos:position pos:line="4656" pos:column="30"/></expr_stmt>
  <expr_stmt><expr><name pos:line="4657" pos:column="3">pModule<pos:position pos:line="4657" pos:column="10"/></name> <operator pos:line="4657" pos:column="11">=<pos:position pos:line="4657" pos:column="12"/></operator> <name><name pos:line="4657" pos:column="13">pVtab<pos:position pos:line="4657" pos:column="18"/></name><operator pos:line="4657" pos:column="18">-&gt;<pos:position pos:line="4657" pos:column="23"/></operator><name pos:line="4657" pos:column="20">pModule<pos:position pos:line="4657" pos:column="27"/></name></name></expr>;<pos:position pos:line="4657" pos:column="28"/></expr_stmt>

  <comment type="block" pos:line="4659" pos:column="3">/* Grab the index number and argc parameters */</comment>
  <expr_stmt><expr><call><name pos:line="4660" pos:column="3">assert<pos:position pos:line="4660" pos:column="9"/></name><argument_list pos:line="4660" pos:column="9">( <argument><expr><operator pos:line="4660" pos:column="11">(<pos:position pos:line="4660" pos:column="12"/></operator><name><name pos:line="4660" pos:column="12">pQuery<pos:position pos:line="4660" pos:column="18"/></name><operator pos:line="4660" pos:column="18">-&gt;<pos:position pos:line="4660" pos:column="23"/></operator><name pos:line="4660" pos:column="20">flags<pos:position pos:line="4660" pos:column="25"/></name></name><operator pos:line="4660" pos:column="25">&amp;<pos:position pos:line="4660" pos:column="30"/></operator><name pos:line="4660" pos:column="26">MEM_Int<pos:position pos:line="4660" pos:column="33"/></name><operator pos:line="4660" pos:column="33">)<pos:position pos:line="4660" pos:column="34"/></operator><operator pos:line="4660" pos:column="34">!=<pos:position pos:line="4660" pos:column="36"/></operator><literal type="number" pos:line="4660" pos:column="36">0<pos:position pos:line="4660" pos:column="37"/></literal> <operator pos:line="4660" pos:column="38">&amp;&amp;<pos:position pos:line="4660" pos:column="48"/></operator> <name><name pos:line="4660" pos:column="41">pArgc<pos:position pos:line="4660" pos:column="46"/></name><operator pos:line="4660" pos:column="46">-&gt;<pos:position pos:line="4660" pos:column="51"/></operator><name pos:line="4660" pos:column="48">flags<pos:position pos:line="4660" pos:column="53"/></name></name><operator pos:line="4660" pos:column="53">==<pos:position pos:line="4660" pos:column="55"/></operator><name pos:line="4660" pos:column="55">MEM_Int<pos:position pos:line="4660" pos:column="62"/></name></expr></argument> )<pos:position pos:line="4660" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="4660" pos:column="65"/></expr_stmt>
  <expr_stmt><expr><name pos:line="4661" pos:column="3">nArg<pos:position pos:line="4661" pos:column="7"/></name> <operator pos:line="4661" pos:column="8">=<pos:position pos:line="4661" pos:column="9"/></operator> <operator pos:line="4661" pos:column="10">(<pos:position pos:line="4661" pos:column="11"/></operator><name pos:line="4661" pos:column="11">int<pos:position pos:line="4661" pos:column="14"/></name><operator pos:line="4661" pos:column="14">)<pos:position pos:line="4661" pos:column="15"/></operator><name><name pos:line="4661" pos:column="15">pArgc<pos:position pos:line="4661" pos:column="20"/></name><operator pos:line="4661" pos:column="20">-&gt;<pos:position pos:line="4661" pos:column="25"/></operator><name pos:line="4661" pos:column="22">u<pos:position pos:line="4661" pos:column="23"/></name><operator pos:line="4661" pos:column="23">.<pos:position pos:line="4661" pos:column="24"/></operator><name pos:line="4661" pos:column="24">i<pos:position pos:line="4661" pos:column="25"/></name></name></expr>;<pos:position pos:line="4661" pos:column="26"/></expr_stmt>
  <expr_stmt><expr><name pos:line="4662" pos:column="3">iQuery<pos:position pos:line="4662" pos:column="9"/></name> <operator pos:line="4662" pos:column="10">=<pos:position pos:line="4662" pos:column="11"/></operator> <operator pos:line="4662" pos:column="12">(<pos:position pos:line="4662" pos:column="13"/></operator><name pos:line="4662" pos:column="13">int<pos:position pos:line="4662" pos:column="16"/></name><operator pos:line="4662" pos:column="16">)<pos:position pos:line="4662" pos:column="17"/></operator><name><name pos:line="4662" pos:column="17">pQuery<pos:position pos:line="4662" pos:column="23"/></name><operator pos:line="4662" pos:column="23">-&gt;<pos:position pos:line="4662" pos:column="28"/></operator><name pos:line="4662" pos:column="25">u<pos:position pos:line="4662" pos:column="26"/></name><operator pos:line="4662" pos:column="26">.<pos:position pos:line="4662" pos:column="27"/></operator><name pos:line="4662" pos:column="27">i<pos:position pos:line="4662" pos:column="28"/></name></name></expr>;<pos:position pos:line="4662" pos:column="29"/></expr_stmt>

  <comment type="block" pos:line="4664" pos:column="3">/* Invoke the xFilter method */</comment>
  <block pos:line="4665" pos:column="3">{
    <expr_stmt><expr><name pos:line="4666" pos:column="5">res<pos:position pos:line="4666" pos:column="8"/></name> <operator pos:line="4666" pos:column="9">=<pos:position pos:line="4666" pos:column="10"/></operator> <literal type="number" pos:line="4666" pos:column="11">0<pos:position pos:line="4666" pos:column="12"/></literal></expr>;<pos:position pos:line="4666" pos:column="13"/></expr_stmt>
    <expr_stmt><expr><name pos:line="4667" pos:column="5">apArg<pos:position pos:line="4667" pos:column="10"/></name> <operator pos:line="4667" pos:column="11">=<pos:position pos:line="4667" pos:column="12"/></operator> <name><name pos:line="4667" pos:column="13">p<pos:position pos:line="4667" pos:column="14"/></name><operator pos:line="4667" pos:column="14">-&gt;<pos:position pos:line="4667" pos:column="19"/></operator><name pos:line="4667" pos:column="16">apArg<pos:position pos:line="4667" pos:column="21"/></name></name></expr>;<pos:position pos:line="4667" pos:column="22"/></expr_stmt>
    <for pos:line="4668" pos:column="5">for<control pos:line="4668" pos:column="8">(<init><expr><name pos:line="4668" pos:column="9">i<pos:position pos:line="4668" pos:column="10"/></name> <operator pos:line="4668" pos:column="11">=<pos:position pos:line="4668" pos:column="12"/></operator> <literal type="number" pos:line="4668" pos:column="13">0<pos:position pos:line="4668" pos:column="14"/></literal></expr>;<pos:position pos:line="4668" pos:column="15"/></init> <condition><expr><name pos:line="4668" pos:column="16">i<pos:position pos:line="4668" pos:column="17"/></name><operator pos:line="4668" pos:column="17">&lt;<pos:position pos:line="4668" pos:column="21"/></operator><name pos:line="4668" pos:column="18">nArg<pos:position pos:line="4668" pos:column="22"/></name></expr>;<pos:position pos:line="4668" pos:column="23"/></condition> <incr><expr><name pos:line="4668" pos:column="24">i<pos:position pos:line="4668" pos:column="25"/></name><operator pos:line="4668" pos:column="25">++<pos:position pos:line="4668" pos:column="27"/></operator></expr></incr>)<pos:position pos:line="4668" pos:column="28"/></control><block pos:line="4668" pos:column="28">{
      <expr_stmt><expr><name><name pos:line="4669" pos:column="7">apArg<pos:position pos:line="4669" pos:column="12"/></name><index pos:line="4669" pos:column="12">[<expr><name pos:line="4669" pos:column="13">i<pos:position pos:line="4669" pos:column="14"/></name></expr>]<pos:position pos:line="4669" pos:column="15"/></index></name> <operator pos:line="4669" pos:column="16">=<pos:position pos:line="4669" pos:column="17"/></operator> <operator pos:line="4669" pos:column="18">&amp;<pos:position pos:line="4669" pos:column="23"/></operator><name><name pos:line="4669" pos:column="19">pArgc<pos:position pos:line="4669" pos:column="24"/></name><index pos:line="4669" pos:column="24">[<expr><name pos:line="4669" pos:column="25">i<pos:position pos:line="4669" pos:column="26"/></name><operator pos:line="4669" pos:column="26">+<pos:position pos:line="4669" pos:column="27"/></operator><literal type="number" pos:line="4669" pos:column="27">1<pos:position pos:line="4669" pos:column="28"/></literal></expr>]<pos:position pos:line="4669" pos:column="29"/></index></name></expr>;<pos:position pos:line="4669" pos:column="30"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="4670" pos:column="7">storeTypeInfo<pos:position pos:line="4670" pos:column="20"/></name><argument_list pos:line="4670" pos:column="20">(<argument><expr><name><name pos:line="4670" pos:column="21">apArg<pos:position pos:line="4670" pos:column="26"/></name><index pos:line="4670" pos:column="26">[<expr><name pos:line="4670" pos:column="27">i<pos:position pos:line="4670" pos:column="28"/></name></expr>]<pos:position pos:line="4670" pos:column="29"/></index></name></expr></argument>, <argument><expr><literal type="number" pos:line="4670" pos:column="31">0<pos:position pos:line="4670" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="4670" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="4670" pos:column="34"/></expr_stmt>
    }<pos:position pos:line="4671" pos:column="6"/></block></for>

    <if pos:line="4673" pos:column="5">if<condition pos:line="4673" pos:column="7">( <expr><call><name pos:line="4673" pos:column="9">sqlite3SafetyOff<pos:position pos:line="4673" pos:column="25"/></name><argument_list pos:line="4673" pos:column="25">(<argument><expr><name pos:line="4673" pos:column="26">db<pos:position pos:line="4673" pos:column="28"/></name></expr></argument>)<pos:position pos:line="4673" pos:column="29"/></argument_list></call></expr> )<pos:position pos:line="4673" pos:column="31"/></condition><then pos:line="4673" pos:column="31"> <block type="pseudo"><goto pos:line="4673" pos:column="32">goto <name pos:line="4673" pos:column="37">abort_due_to_misuse<pos:position pos:line="4673" pos:column="56"/></name>;<pos:position pos:line="4673" pos:column="57"/></goto></block></then></if>
    <expr_stmt><expr><call><name pos:line="4674" pos:column="5">sqlite3VtabLock<pos:position pos:line="4674" pos:column="20"/></name><argument_list pos:line="4674" pos:column="20">(<argument><expr><name pos:line="4674" pos:column="21">pVtab<pos:position pos:line="4674" pos:column="26"/></name></expr></argument>)<pos:position pos:line="4674" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="4674" pos:column="28"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="4675" pos:column="5">p<pos:position pos:line="4675" pos:column="6"/></name><operator pos:line="4675" pos:column="6">-&gt;<pos:position pos:line="4675" pos:column="11"/></operator><name pos:line="4675" pos:column="8">inVtabMethod<pos:position pos:line="4675" pos:column="20"/></name></name> <operator pos:line="4675" pos:column="21">=<pos:position pos:line="4675" pos:column="22"/></operator> <literal type="number" pos:line="4675" pos:column="23">1<pos:position pos:line="4675" pos:column="24"/></literal></expr>;<pos:position pos:line="4675" pos:column="25"/></expr_stmt>
    <expr_stmt><expr><name pos:line="4676" pos:column="5">rc<pos:position pos:line="4676" pos:column="7"/></name> <operator pos:line="4676" pos:column="8">=<pos:position pos:line="4676" pos:column="9"/></operator> <call><name><name pos:line="4676" pos:column="10">pModule<pos:position pos:line="4676" pos:column="17"/></name><operator pos:line="4676" pos:column="17">-&gt;<pos:position pos:line="4676" pos:column="22"/></operator><name pos:line="4676" pos:column="19">xFilter<pos:position pos:line="4676" pos:column="26"/></name></name><argument_list pos:line="4676" pos:column="26">(<argument><expr><name pos:line="4676" pos:column="27">pVtabCursor<pos:position pos:line="4676" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="4676" pos:column="40">iQuery<pos:position pos:line="4676" pos:column="46"/></name></expr></argument>, <argument><expr><name><name pos:line="4676" pos:column="48">pOp<pos:position pos:line="4676" pos:column="51"/></name><operator pos:line="4676" pos:column="51">-&gt;<pos:position pos:line="4676" pos:column="56"/></operator><name pos:line="4676" pos:column="53">p4<pos:position pos:line="4676" pos:column="55"/></name><operator pos:line="4676" pos:column="55">.<pos:position pos:line="4676" pos:column="56"/></operator><name pos:line="4676" pos:column="56">z<pos:position pos:line="4676" pos:column="57"/></name></name></expr></argument>, <argument><expr><name pos:line="4676" pos:column="59">nArg<pos:position pos:line="4676" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="4676" pos:column="65">apArg<pos:position pos:line="4676" pos:column="70"/></name></expr></argument>)<pos:position pos:line="4676" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="4676" pos:column="72"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="4677" pos:column="5">p<pos:position pos:line="4677" pos:column="6"/></name><operator pos:line="4677" pos:column="6">-&gt;<pos:position pos:line="4677" pos:column="11"/></operator><name pos:line="4677" pos:column="8">inVtabMethod<pos:position pos:line="4677" pos:column="20"/></name></name> <operator pos:line="4677" pos:column="21">=<pos:position pos:line="4677" pos:column="22"/></operator> <literal type="number" pos:line="4677" pos:column="23">0<pos:position pos:line="4677" pos:column="24"/></literal></expr>;<pos:position pos:line="4677" pos:column="25"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="4678" pos:column="5">sqlite3DbFree<pos:position pos:line="4678" pos:column="18"/></name><argument_list pos:line="4678" pos:column="18">(<argument><expr><name pos:line="4678" pos:column="19">db<pos:position pos:line="4678" pos:column="21"/></name></expr></argument>, <argument><expr><name><name pos:line="4678" pos:column="23">p<pos:position pos:line="4678" pos:column="24"/></name><operator pos:line="4678" pos:column="24">-&gt;<pos:position pos:line="4678" pos:column="29"/></operator><name pos:line="4678" pos:column="26">zErrMsg<pos:position pos:line="4678" pos:column="33"/></name></name></expr></argument>)<pos:position pos:line="4678" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="4678" pos:column="35"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="4679" pos:column="5">p<pos:position pos:line="4679" pos:column="6"/></name><operator pos:line="4679" pos:column="6">-&gt;<pos:position pos:line="4679" pos:column="11"/></operator><name pos:line="4679" pos:column="8">zErrMsg<pos:position pos:line="4679" pos:column="15"/></name></name> <operator pos:line="4679" pos:column="16">=<pos:position pos:line="4679" pos:column="17"/></operator> <name><name pos:line="4679" pos:column="18">pVtab<pos:position pos:line="4679" pos:column="23"/></name><operator pos:line="4679" pos:column="23">-&gt;<pos:position pos:line="4679" pos:column="28"/></operator><name pos:line="4679" pos:column="25">zErrMsg<pos:position pos:line="4679" pos:column="32"/></name></name></expr>;<pos:position pos:line="4679" pos:column="33"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="4680" pos:column="5">pVtab<pos:position pos:line="4680" pos:column="10"/></name><operator pos:line="4680" pos:column="10">-&gt;<pos:position pos:line="4680" pos:column="15"/></operator><name pos:line="4680" pos:column="12">zErrMsg<pos:position pos:line="4680" pos:column="19"/></name></name> <operator pos:line="4680" pos:column="20">=<pos:position pos:line="4680" pos:column="21"/></operator> <literal type="number" pos:line="4680" pos:column="22">0<pos:position pos:line="4680" pos:column="23"/></literal></expr>;<pos:position pos:line="4680" pos:column="24"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="4681" pos:column="5">sqlite3VtabUnlock<pos:position pos:line="4681" pos:column="22"/></name><argument_list pos:line="4681" pos:column="22">(<argument><expr><name pos:line="4681" pos:column="23">db<pos:position pos:line="4681" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="4681" pos:column="27">pVtab<pos:position pos:line="4681" pos:column="32"/></name></expr></argument>)<pos:position pos:line="4681" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="4681" pos:column="34"/></expr_stmt>
    <if pos:line="4682" pos:column="5">if<condition pos:line="4682" pos:column="7">( <expr><name pos:line="4682" pos:column="9">rc<pos:position pos:line="4682" pos:column="11"/></name><operator pos:line="4682" pos:column="11">==<pos:position pos:line="4682" pos:column="13"/></operator><name pos:line="4682" pos:column="13">SQLITE_OK<pos:position pos:line="4682" pos:column="22"/></name></expr> )<pos:position pos:line="4682" pos:column="24"/></condition><then><block pos:line="4682" pos:column="24">{
      <expr_stmt><expr><name pos:line="4683" pos:column="7">res<pos:position pos:line="4683" pos:column="10"/></name> <operator pos:line="4683" pos:column="11">=<pos:position pos:line="4683" pos:column="12"/></operator> <call><name><name pos:line="4683" pos:column="13">pModule<pos:position pos:line="4683" pos:column="20"/></name><operator pos:line="4683" pos:column="20">-&gt;<pos:position pos:line="4683" pos:column="25"/></operator><name pos:line="4683" pos:column="22">xEof<pos:position pos:line="4683" pos:column="26"/></name></name><argument_list pos:line="4683" pos:column="26">(<argument><expr><name pos:line="4683" pos:column="27">pVtabCursor<pos:position pos:line="4683" pos:column="38"/></name></expr></argument>)<pos:position pos:line="4683" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="4683" pos:column="40"/></expr_stmt>
    }<pos:position pos:line="4684" pos:column="6"/></block></then></if>
    <if pos:line="4685" pos:column="5">if<condition pos:line="4685" pos:column="7">( <expr><call><name pos:line="4685" pos:column="9">sqlite3SafetyOn<pos:position pos:line="4685" pos:column="24"/></name><argument_list pos:line="4685" pos:column="24">(<argument><expr><name pos:line="4685" pos:column="25">db<pos:position pos:line="4685" pos:column="27"/></name></expr></argument>)<pos:position pos:line="4685" pos:column="28"/></argument_list></call></expr> )<pos:position pos:line="4685" pos:column="30"/></condition><then pos:line="4685" pos:column="30"> <block type="pseudo"><goto pos:line="4685" pos:column="31">goto <name pos:line="4685" pos:column="36">abort_due_to_misuse<pos:position pos:line="4685" pos:column="55"/></name>;<pos:position pos:line="4685" pos:column="56"/></goto></block></then></if>

    <if pos:line="4687" pos:column="5">if<condition pos:line="4687" pos:column="7">( <expr><name pos:line="4687" pos:column="9">res<pos:position pos:line="4687" pos:column="12"/></name></expr> )<pos:position pos:line="4687" pos:column="14"/></condition><then><block pos:line="4687" pos:column="14">{
      <expr_stmt><expr><name pos:line="4688" pos:column="7">pc<pos:position pos:line="4688" pos:column="9"/></name> <operator pos:line="4688" pos:column="10">=<pos:position pos:line="4688" pos:column="11"/></operator> <name><name pos:line="4688" pos:column="12">pOp<pos:position pos:line="4688" pos:column="15"/></name><operator pos:line="4688" pos:column="15">-&gt;<pos:position pos:line="4688" pos:column="20"/></operator><name pos:line="4688" pos:column="17">p2<pos:position pos:line="4688" pos:column="19"/></name></name> <operator pos:line="4688" pos:column="20">-<pos:position pos:line="4688" pos:column="21"/></operator> <literal type="number" pos:line="4688" pos:column="22">1<pos:position pos:line="4688" pos:column="23"/></literal></expr>;<pos:position pos:line="4688" pos:column="24"/></expr_stmt>
    }<pos:position pos:line="4689" pos:column="6"/></block></then></if>
  }<pos:position pos:line="4690" pos:column="4"/></block>
  <expr_stmt><expr><name><name pos:line="4691" pos:column="3">pCur<pos:position pos:line="4691" pos:column="7"/></name><operator pos:line="4691" pos:column="7">-&gt;<pos:position pos:line="4691" pos:column="12"/></operator><name pos:line="4691" pos:column="9">nullRow<pos:position pos:line="4691" pos:column="16"/></name></name> <operator pos:line="4691" pos:column="17">=<pos:position pos:line="4691" pos:column="18"/></operator> <literal type="number" pos:line="4691" pos:column="19">0<pos:position pos:line="4691" pos:column="20"/></literal></expr>;<pos:position pos:line="4691" pos:column="21"/></expr_stmt>

  <break pos:line="4693" pos:column="3">break;<pos:position pos:line="4693" pos:column="9"/></break>
}<pos:position pos:line="4694" pos:column="2"/></block>
<cpp:endif pos:line="4695" pos:column="1">#<cpp:directive pos:line="4695" pos:column="2">endif<pos:position pos:line="4695" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="4695" pos:column="8">/* SQLITE_OMIT_VIRTUALTABLE */</comment>

<cpp:ifndef pos:line="4697" pos:column="1">#<cpp:directive pos:line="4697" pos:column="2">ifndef<pos:position pos:line="4697" pos:column="8"/></cpp:directive> <name pos:line="4697" pos:column="9">SQLITE_OMIT_VIRTUALTABLE<pos:position pos:line="4697" pos:column="33"/></name></cpp:ifndef>
<comment type="block" pos:line="4698" pos:column="1">/* Opcode: VColumn P1 P2 P3 * *
**
** Store the value of the P2-th column of
** the row of the virtual-table that the 
** P1 cursor is pointing to into register P3.
*/</comment>
<case pos:line="4704" pos:column="1">case <expr><name pos:line="4704" pos:column="6">OP_VColumn<pos:position pos:line="4704" pos:column="16"/></name></expr>:<pos:position pos:line="4704" pos:column="17"/></case> <block pos:line="4704" pos:column="18">{
  <decl_stmt><decl><type><name pos:line="4705" pos:column="3">sqlite3_vtab<pos:position pos:line="4705" pos:column="15"/></name> <modifier pos:line="4705" pos:column="16">*<pos:position pos:line="4705" pos:column="17"/></modifier></type><name pos:line="4705" pos:column="17">pVtab<pos:position pos:line="4705" pos:column="22"/></name></decl>;<pos:position pos:line="4705" pos:column="23"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="4706" pos:column="3">const<pos:position pos:line="4706" pos:column="8"/></specifier> <name pos:line="4706" pos:column="9">sqlite3_module<pos:position pos:line="4706" pos:column="23"/></name> <modifier pos:line="4706" pos:column="24">*<pos:position pos:line="4706" pos:column="25"/></modifier></type><name pos:line="4706" pos:column="25">pModule<pos:position pos:line="4706" pos:column="32"/></name></decl>;<pos:position pos:line="4706" pos:column="33"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4707" pos:column="3">Mem<pos:position pos:line="4707" pos:column="6"/></name> <modifier pos:line="4707" pos:column="7">*<pos:position pos:line="4707" pos:column="8"/></modifier></type><name pos:line="4707" pos:column="8">pDest<pos:position pos:line="4707" pos:column="13"/></name></decl>;<pos:position pos:line="4707" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4708" pos:column="3">sqlite3_context<pos:position pos:line="4708" pos:column="18"/></name></type> <name pos:line="4708" pos:column="19">sContext<pos:position pos:line="4708" pos:column="27"/></name></decl>;<pos:position pos:line="4708" pos:column="28"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="4710" pos:column="3">VdbeCursor<pos:position pos:line="4710" pos:column="13"/></name> <modifier pos:line="4710" pos:column="14">*<pos:position pos:line="4710" pos:column="15"/></modifier></type><name pos:line="4710" pos:column="15">pCur<pos:position pos:line="4710" pos:column="19"/></name> <init pos:line="4710" pos:column="20">= <expr><name><name pos:line="4710" pos:column="22">p<pos:position pos:line="4710" pos:column="23"/></name><operator pos:line="4710" pos:column="23">-&gt;<pos:position pos:line="4710" pos:column="28"/></operator><name pos:line="4710" pos:column="25">apCsr<pos:position pos:line="4710" pos:column="30"/></name><index pos:line="4710" pos:column="30">[<expr><name><name pos:line="4710" pos:column="31">pOp<pos:position pos:line="4710" pos:column="34"/></name><operator pos:line="4710" pos:column="34">-&gt;<pos:position pos:line="4710" pos:column="39"/></operator><name pos:line="4710" pos:column="36">p1<pos:position pos:line="4710" pos:column="38"/></name></name></expr>]<pos:position pos:line="4710" pos:column="39"/></index></name></expr></init></decl>;<pos:position pos:line="4710" pos:column="40"/></decl_stmt>
  <expr_stmt><expr><call><name pos:line="4711" pos:column="3">assert<pos:position pos:line="4711" pos:column="9"/></name><argument_list pos:line="4711" pos:column="9">( <argument><expr><name><name pos:line="4711" pos:column="11">pCur<pos:position pos:line="4711" pos:column="15"/></name><operator pos:line="4711" pos:column="15">-&gt;<pos:position pos:line="4711" pos:column="20"/></operator><name pos:line="4711" pos:column="17">pVtabCursor<pos:position pos:line="4711" pos:column="28"/></name></name></expr></argument> )<pos:position pos:line="4711" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="4711" pos:column="31"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="4712" pos:column="3">assert<pos:position pos:line="4712" pos:column="9"/></name><argument_list pos:line="4712" pos:column="9">( <argument><expr><name><name pos:line="4712" pos:column="11">pOp<pos:position pos:line="4712" pos:column="14"/></name><operator pos:line="4712" pos:column="14">-&gt;<pos:position pos:line="4712" pos:column="19"/></operator><name pos:line="4712" pos:column="16">p3<pos:position pos:line="4712" pos:column="18"/></name></name><operator pos:line="4712" pos:column="18">&gt;<pos:position pos:line="4712" pos:column="22"/></operator><literal type="number" pos:line="4712" pos:column="19">0<pos:position pos:line="4712" pos:column="20"/></literal> <operator pos:line="4712" pos:column="21">&amp;&amp;<pos:position pos:line="4712" pos:column="31"/></operator> <name><name pos:line="4712" pos:column="24">pOp<pos:position pos:line="4712" pos:column="27"/></name><operator pos:line="4712" pos:column="27">-&gt;<pos:position pos:line="4712" pos:column="32"/></operator><name pos:line="4712" pos:column="29">p3<pos:position pos:line="4712" pos:column="31"/></name></name><operator pos:line="4712" pos:column="31">&lt;=<pos:position pos:line="4712" pos:column="36"/></operator><name><name pos:line="4712" pos:column="33">p<pos:position pos:line="4712" pos:column="34"/></name><operator pos:line="4712" pos:column="34">-&gt;<pos:position pos:line="4712" pos:column="39"/></operator><name pos:line="4712" pos:column="36">nMem<pos:position pos:line="4712" pos:column="40"/></name></name></expr></argument> )<pos:position pos:line="4712" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="4712" pos:column="43"/></expr_stmt>
  <expr_stmt><expr><name pos:line="4713" pos:column="3">pDest<pos:position pos:line="4713" pos:column="8"/></name> <operator pos:line="4713" pos:column="9">=<pos:position pos:line="4713" pos:column="10"/></operator> <operator pos:line="4713" pos:column="11">&amp;<pos:position pos:line="4713" pos:column="16"/></operator><name><name pos:line="4713" pos:column="12">p<pos:position pos:line="4713" pos:column="13"/></name><operator pos:line="4713" pos:column="13">-&gt;<pos:position pos:line="4713" pos:column="18"/></operator><name pos:line="4713" pos:column="15">aMem<pos:position pos:line="4713" pos:column="19"/></name><index pos:line="4713" pos:column="19">[<expr><name><name pos:line="4713" pos:column="20">pOp<pos:position pos:line="4713" pos:column="23"/></name><operator pos:line="4713" pos:column="23">-&gt;<pos:position pos:line="4713" pos:column="28"/></operator><name pos:line="4713" pos:column="25">p3<pos:position pos:line="4713" pos:column="27"/></name></name></expr>]<pos:position pos:line="4713" pos:column="28"/></index></name></expr>;<pos:position pos:line="4713" pos:column="29"/></expr_stmt>
  <if pos:line="4714" pos:column="3">if<condition pos:line="4714" pos:column="5">( <expr><name><name pos:line="4714" pos:column="7">pCur<pos:position pos:line="4714" pos:column="11"/></name><operator pos:line="4714" pos:column="11">-&gt;<pos:position pos:line="4714" pos:column="16"/></operator><name pos:line="4714" pos:column="13">nullRow<pos:position pos:line="4714" pos:column="20"/></name></name></expr> )<pos:position pos:line="4714" pos:column="22"/></condition><then><block pos:line="4714" pos:column="22">{
    <expr_stmt><expr><call><name pos:line="4715" pos:column="5">sqlite3VdbeMemSetNull<pos:position pos:line="4715" pos:column="26"/></name><argument_list pos:line="4715" pos:column="26">(<argument><expr><name pos:line="4715" pos:column="27">pDest<pos:position pos:line="4715" pos:column="32"/></name></expr></argument>)<pos:position pos:line="4715" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="4715" pos:column="34"/></expr_stmt>
    <break pos:line="4716" pos:column="5">break;<pos:position pos:line="4716" pos:column="11"/></break>
  }<pos:position pos:line="4717" pos:column="4"/></block></then></if>
  <expr_stmt><expr><name pos:line="4718" pos:column="3">pVtab<pos:position pos:line="4718" pos:column="8"/></name> <operator pos:line="4718" pos:column="9">=<pos:position pos:line="4718" pos:column="10"/></operator> <name><name pos:line="4718" pos:column="11">pCur<pos:position pos:line="4718" pos:column="15"/></name><operator pos:line="4718" pos:column="15">-&gt;<pos:position pos:line="4718" pos:column="20"/></operator><name pos:line="4718" pos:column="17">pVtabCursor<pos:position pos:line="4718" pos:column="28"/></name><operator pos:line="4718" pos:column="28">-&gt;<pos:position pos:line="4718" pos:column="33"/></operator><name pos:line="4718" pos:column="30">pVtab<pos:position pos:line="4718" pos:column="35"/></name></name></expr>;<pos:position pos:line="4718" pos:column="36"/></expr_stmt>
  <expr_stmt><expr><name pos:line="4719" pos:column="3">pModule<pos:position pos:line="4719" pos:column="10"/></name> <operator pos:line="4719" pos:column="11">=<pos:position pos:line="4719" pos:column="12"/></operator> <name><name pos:line="4719" pos:column="13">pVtab<pos:position pos:line="4719" pos:column="18"/></name><operator pos:line="4719" pos:column="18">-&gt;<pos:position pos:line="4719" pos:column="23"/></operator><name pos:line="4719" pos:column="20">pModule<pos:position pos:line="4719" pos:column="27"/></name></name></expr>;<pos:position pos:line="4719" pos:column="28"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="4720" pos:column="3">assert<pos:position pos:line="4720" pos:column="9"/></name><argument_list pos:line="4720" pos:column="9">( <argument><expr><name><name pos:line="4720" pos:column="11">pModule<pos:position pos:line="4720" pos:column="18"/></name><operator pos:line="4720" pos:column="18">-&gt;<pos:position pos:line="4720" pos:column="23"/></operator><name pos:line="4720" pos:column="20">xColumn<pos:position pos:line="4720" pos:column="27"/></name></name></expr></argument> )<pos:position pos:line="4720" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="4720" pos:column="30"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="4721" pos:column="3">memset<pos:position pos:line="4721" pos:column="9"/></name><argument_list pos:line="4721" pos:column="9">(<argument><expr><operator pos:line="4721" pos:column="10">&amp;<pos:position pos:line="4721" pos:column="15"/></operator><name pos:line="4721" pos:column="11">sContext<pos:position pos:line="4721" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="4721" pos:column="21">0<pos:position pos:line="4721" pos:column="22"/></literal></expr></argument>, <argument><expr><sizeof pos:line="4721" pos:column="24">sizeof<argument_list pos:line="4721" pos:column="30">(<argument><expr><name pos:line="4721" pos:column="31">sContext<pos:position pos:line="4721" pos:column="39"/></name></expr></argument>)<pos:position pos:line="4721" pos:column="40"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="4721" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="4721" pos:column="42"/></expr_stmt>

  <comment type="block" pos:line="4723" pos:column="3">/* The output cell may already have a buffer allocated. Move
  ** the current contents to sContext.s so in case the user-function 
  ** can use the already allocated buffer instead of allocating a 
  ** new one.
  */</comment>
  <expr_stmt><expr><call><name pos:line="4728" pos:column="3">sqlite3VdbeMemMove<pos:position pos:line="4728" pos:column="21"/></name><argument_list pos:line="4728" pos:column="21">(<argument><expr><operator pos:line="4728" pos:column="22">&amp;<pos:position pos:line="4728" pos:column="27"/></operator><name><name pos:line="4728" pos:column="23">sContext<pos:position pos:line="4728" pos:column="31"/></name><operator pos:line="4728" pos:column="31">.<pos:position pos:line="4728" pos:column="32"/></operator><name pos:line="4728" pos:column="32">s<pos:position pos:line="4728" pos:column="33"/></name></name></expr></argument>, <argument><expr><name pos:line="4728" pos:column="35">pDest<pos:position pos:line="4728" pos:column="40"/></name></expr></argument>)<pos:position pos:line="4728" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="4728" pos:column="42"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="4729" pos:column="3">MemSetTypeFlag<pos:position pos:line="4729" pos:column="17"/></name><argument_list pos:line="4729" pos:column="17">(<argument><expr><operator pos:line="4729" pos:column="18">&amp;<pos:position pos:line="4729" pos:column="23"/></operator><name><name pos:line="4729" pos:column="19">sContext<pos:position pos:line="4729" pos:column="27"/></name><operator pos:line="4729" pos:column="27">.<pos:position pos:line="4729" pos:column="28"/></operator><name pos:line="4729" pos:column="28">s<pos:position pos:line="4729" pos:column="29"/></name></name></expr></argument>, <argument><expr><name pos:line="4729" pos:column="31">MEM_Null<pos:position pos:line="4729" pos:column="39"/></name></expr></argument>)<pos:position pos:line="4729" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="4729" pos:column="41"/></expr_stmt>

  <if pos:line="4731" pos:column="3">if<condition pos:line="4731" pos:column="5">( <expr><call><name pos:line="4731" pos:column="7">sqlite3SafetyOff<pos:position pos:line="4731" pos:column="23"/></name><argument_list pos:line="4731" pos:column="23">(<argument><expr><name pos:line="4731" pos:column="24">db<pos:position pos:line="4731" pos:column="26"/></name></expr></argument>)<pos:position pos:line="4731" pos:column="27"/></argument_list></call></expr> )<pos:position pos:line="4731" pos:column="29"/></condition><then pos:line="4731" pos:column="29"> <block type="pseudo"><goto pos:line="4731" pos:column="30">goto <name pos:line="4731" pos:column="35">abort_due_to_misuse<pos:position pos:line="4731" pos:column="54"/></name>;<pos:position pos:line="4731" pos:column="55"/></goto></block></then></if>
  <expr_stmt><expr><name pos:line="4732" pos:column="3">rc<pos:position pos:line="4732" pos:column="5"/></name> <operator pos:line="4732" pos:column="6">=<pos:position pos:line="4732" pos:column="7"/></operator> <call><name><name pos:line="4732" pos:column="8">pModule<pos:position pos:line="4732" pos:column="15"/></name><operator pos:line="4732" pos:column="15">-&gt;<pos:position pos:line="4732" pos:column="20"/></operator><name pos:line="4732" pos:column="17">xColumn<pos:position pos:line="4732" pos:column="24"/></name></name><argument_list pos:line="4732" pos:column="24">(<argument><expr><name><name pos:line="4732" pos:column="25">pCur<pos:position pos:line="4732" pos:column="29"/></name><operator pos:line="4732" pos:column="29">-&gt;<pos:position pos:line="4732" pos:column="34"/></operator><name pos:line="4732" pos:column="31">pVtabCursor<pos:position pos:line="4732" pos:column="42"/></name></name></expr></argument>, <argument><expr><operator pos:line="4732" pos:column="44">&amp;<pos:position pos:line="4732" pos:column="49"/></operator><name pos:line="4732" pos:column="45">sContext<pos:position pos:line="4732" pos:column="53"/></name></expr></argument>, <argument><expr><name><name pos:line="4732" pos:column="55">pOp<pos:position pos:line="4732" pos:column="58"/></name><operator pos:line="4732" pos:column="58">-&gt;<pos:position pos:line="4732" pos:column="63"/></operator><name pos:line="4732" pos:column="60">p2<pos:position pos:line="4732" pos:column="62"/></name></name></expr></argument>)<pos:position pos:line="4732" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="4732" pos:column="64"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="4733" pos:column="3">sqlite3DbFree<pos:position pos:line="4733" pos:column="16"/></name><argument_list pos:line="4733" pos:column="16">(<argument><expr><name pos:line="4733" pos:column="17">db<pos:position pos:line="4733" pos:column="19"/></name></expr></argument>, <argument><expr><name><name pos:line="4733" pos:column="21">p<pos:position pos:line="4733" pos:column="22"/></name><operator pos:line="4733" pos:column="22">-&gt;<pos:position pos:line="4733" pos:column="27"/></operator><name pos:line="4733" pos:column="24">zErrMsg<pos:position pos:line="4733" pos:column="31"/></name></name></expr></argument>)<pos:position pos:line="4733" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="4733" pos:column="33"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="4734" pos:column="3">p<pos:position pos:line="4734" pos:column="4"/></name><operator pos:line="4734" pos:column="4">-&gt;<pos:position pos:line="4734" pos:column="9"/></operator><name pos:line="4734" pos:column="6">zErrMsg<pos:position pos:line="4734" pos:column="13"/></name></name> <operator pos:line="4734" pos:column="14">=<pos:position pos:line="4734" pos:column="15"/></operator> <name><name pos:line="4734" pos:column="16">pVtab<pos:position pos:line="4734" pos:column="21"/></name><operator pos:line="4734" pos:column="21">-&gt;<pos:position pos:line="4734" pos:column="26"/></operator><name pos:line="4734" pos:column="23">zErrMsg<pos:position pos:line="4734" pos:column="30"/></name></name></expr>;<pos:position pos:line="4734" pos:column="31"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="4735" pos:column="3">pVtab<pos:position pos:line="4735" pos:column="8"/></name><operator pos:line="4735" pos:column="8">-&gt;<pos:position pos:line="4735" pos:column="13"/></operator><name pos:line="4735" pos:column="10">zErrMsg<pos:position pos:line="4735" pos:column="17"/></name></name> <operator pos:line="4735" pos:column="18">=<pos:position pos:line="4735" pos:column="19"/></operator> <literal type="number" pos:line="4735" pos:column="20">0<pos:position pos:line="4735" pos:column="21"/></literal></expr>;<pos:position pos:line="4735" pos:column="22"/></expr_stmt>

  <comment type="block" pos:line="4737" pos:column="3">/* Copy the result of the function to the P3 register. We
  ** do this regardless of whether or not an error occurred to ensure any
  ** dynamic allocation in sContext.s (a Mem struct) is  released.
  */</comment>
  <expr_stmt><expr><call><name pos:line="4741" pos:column="3">sqlite3VdbeChangeEncoding<pos:position pos:line="4741" pos:column="28"/></name><argument_list pos:line="4741" pos:column="28">(<argument><expr><operator pos:line="4741" pos:column="29">&amp;<pos:position pos:line="4741" pos:column="34"/></operator><name><name pos:line="4741" pos:column="30">sContext<pos:position pos:line="4741" pos:column="38"/></name><operator pos:line="4741" pos:column="38">.<pos:position pos:line="4741" pos:column="39"/></operator><name pos:line="4741" pos:column="39">s<pos:position pos:line="4741" pos:column="40"/></name></name></expr></argument>, <argument><expr><name pos:line="4741" pos:column="42">encoding<pos:position pos:line="4741" pos:column="50"/></name></expr></argument>)<pos:position pos:line="4741" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="4741" pos:column="52"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="4742" pos:column="3">REGISTER_TRACE<pos:position pos:line="4742" pos:column="17"/></name><argument_list pos:line="4742" pos:column="17">(<argument><expr><name><name pos:line="4742" pos:column="18">pOp<pos:position pos:line="4742" pos:column="21"/></name><operator pos:line="4742" pos:column="21">-&gt;<pos:position pos:line="4742" pos:column="26"/></operator><name pos:line="4742" pos:column="23">p3<pos:position pos:line="4742" pos:column="25"/></name></name></expr></argument>, <argument><expr><name pos:line="4742" pos:column="27">pDest<pos:position pos:line="4742" pos:column="32"/></name></expr></argument>)<pos:position pos:line="4742" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="4742" pos:column="34"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="4743" pos:column="3">sqlite3VdbeMemMove<pos:position pos:line="4743" pos:column="21"/></name><argument_list pos:line="4743" pos:column="21">(<argument><expr><name pos:line="4743" pos:column="22">pDest<pos:position pos:line="4743" pos:column="27"/></name></expr></argument>, <argument><expr><operator pos:line="4743" pos:column="29">&amp;<pos:position pos:line="4743" pos:column="34"/></operator><name><name pos:line="4743" pos:column="30">sContext<pos:position pos:line="4743" pos:column="38"/></name><operator pos:line="4743" pos:column="38">.<pos:position pos:line="4743" pos:column="39"/></operator><name pos:line="4743" pos:column="39">s<pos:position pos:line="4743" pos:column="40"/></name></name></expr></argument>)<pos:position pos:line="4743" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="4743" pos:column="42"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="4744" pos:column="3">UPDATE_MAX_BLOBSIZE<pos:position pos:line="4744" pos:column="22"/></name><argument_list pos:line="4744" pos:column="22">(<argument><expr><name pos:line="4744" pos:column="23">pDest<pos:position pos:line="4744" pos:column="28"/></name></expr></argument>)<pos:position pos:line="4744" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="4744" pos:column="30"/></expr_stmt>

  <if pos:line="4746" pos:column="3">if<condition pos:line="4746" pos:column="5">( <expr><call><name pos:line="4746" pos:column="7">sqlite3SafetyOn<pos:position pos:line="4746" pos:column="22"/></name><argument_list pos:line="4746" pos:column="22">(<argument><expr><name pos:line="4746" pos:column="23">db<pos:position pos:line="4746" pos:column="25"/></name></expr></argument>)<pos:position pos:line="4746" pos:column="26"/></argument_list></call></expr> )<pos:position pos:line="4746" pos:column="28"/></condition><then><block pos:line="4746" pos:column="28">{
    <goto pos:line="4747" pos:column="5">goto <name pos:line="4747" pos:column="10">abort_due_to_misuse<pos:position pos:line="4747" pos:column="29"/></name>;<pos:position pos:line="4747" pos:column="30"/></goto>
  }<pos:position pos:line="4748" pos:column="4"/></block></then></if>
  <if pos:line="4749" pos:column="3">if<condition pos:line="4749" pos:column="5">( <expr><call><name pos:line="4749" pos:column="7">sqlite3VdbeMemTooBig<pos:position pos:line="4749" pos:column="27"/></name><argument_list pos:line="4749" pos:column="27">(<argument><expr><name pos:line="4749" pos:column="28">pDest<pos:position pos:line="4749" pos:column="33"/></name></expr></argument>)<pos:position pos:line="4749" pos:column="34"/></argument_list></call></expr> )<pos:position pos:line="4749" pos:column="36"/></condition><then><block pos:line="4749" pos:column="36">{
    <goto pos:line="4750" pos:column="5">goto <name pos:line="4750" pos:column="10">too_big<pos:position pos:line="4750" pos:column="17"/></name>;<pos:position pos:line="4750" pos:column="18"/></goto>
  }<pos:position pos:line="4751" pos:column="4"/></block></then></if>
  <break pos:line="4752" pos:column="3">break;<pos:position pos:line="4752" pos:column="9"/></break>
}<pos:position pos:line="4753" pos:column="2"/></block>
<cpp:endif pos:line="4754" pos:column="1">#<cpp:directive pos:line="4754" pos:column="2">endif<pos:position pos:line="4754" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="4754" pos:column="8">/* SQLITE_OMIT_VIRTUALTABLE */</comment>

<cpp:ifndef pos:line="4756" pos:column="1">#<cpp:directive pos:line="4756" pos:column="2">ifndef<pos:position pos:line="4756" pos:column="8"/></cpp:directive> <name pos:line="4756" pos:column="9">SQLITE_OMIT_VIRTUALTABLE<pos:position pos:line="4756" pos:column="33"/></name></cpp:ifndef>
<comment type="block" pos:line="4757" pos:column="1">/* Opcode: VNext P1 P2 * * *
**
** Advance virtual table P1 to the next row in its result set and
** jump to instruction P2.  Or, if the virtual table has reached
** the end of its result set, then fall through to the next instruction.
*/</comment>
<case pos:line="4763" pos:column="1">case <expr><name pos:line="4763" pos:column="6">OP_VNext<pos:position pos:line="4763" pos:column="14"/></name></expr>:<pos:position pos:line="4763" pos:column="15"/></case> <block pos:line="4763" pos:column="16">{   <comment type="block" pos:line="4763" pos:column="20">/* jump */</comment>
  <decl_stmt><decl><type><name pos:line="4764" pos:column="3">sqlite3_vtab<pos:position pos:line="4764" pos:column="15"/></name> <modifier pos:line="4764" pos:column="16">*<pos:position pos:line="4764" pos:column="17"/></modifier></type><name pos:line="4764" pos:column="17">pVtab<pos:position pos:line="4764" pos:column="22"/></name></decl>;<pos:position pos:line="4764" pos:column="23"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="4765" pos:column="3">const<pos:position pos:line="4765" pos:column="8"/></specifier> <name pos:line="4765" pos:column="9">sqlite3_module<pos:position pos:line="4765" pos:column="23"/></name> <modifier pos:line="4765" pos:column="24">*<pos:position pos:line="4765" pos:column="25"/></modifier></type><name pos:line="4765" pos:column="25">pModule<pos:position pos:line="4765" pos:column="32"/></name></decl>;<pos:position pos:line="4765" pos:column="33"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4766" pos:column="3">int<pos:position pos:line="4766" pos:column="6"/></name></type> <name pos:line="4766" pos:column="7">res<pos:position pos:line="4766" pos:column="10"/></name></decl>;<pos:position pos:line="4766" pos:column="11"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4767" pos:column="3">VdbeCursor<pos:position pos:line="4767" pos:column="13"/></name> <modifier pos:line="4767" pos:column="14">*<pos:position pos:line="4767" pos:column="15"/></modifier></type><name pos:line="4767" pos:column="15">pCur<pos:position pos:line="4767" pos:column="19"/></name></decl>;<pos:position pos:line="4767" pos:column="20"/></decl_stmt>

  <expr_stmt><expr><name pos:line="4769" pos:column="3">res<pos:position pos:line="4769" pos:column="6"/></name> <operator pos:line="4769" pos:column="7">=<pos:position pos:line="4769" pos:column="8"/></operator> <literal type="number" pos:line="4769" pos:column="9">0<pos:position pos:line="4769" pos:column="10"/></literal></expr>;<pos:position pos:line="4769" pos:column="11"/></expr_stmt>
  <expr_stmt><expr><name pos:line="4770" pos:column="3">pCur<pos:position pos:line="4770" pos:column="7"/></name> <operator pos:line="4770" pos:column="8">=<pos:position pos:line="4770" pos:column="9"/></operator> <name><name pos:line="4770" pos:column="10">p<pos:position pos:line="4770" pos:column="11"/></name><operator pos:line="4770" pos:column="11">-&gt;<pos:position pos:line="4770" pos:column="16"/></operator><name pos:line="4770" pos:column="13">apCsr<pos:position pos:line="4770" pos:column="18"/></name><index pos:line="4770" pos:column="18">[<expr><name><name pos:line="4770" pos:column="19">pOp<pos:position pos:line="4770" pos:column="22"/></name><operator pos:line="4770" pos:column="22">-&gt;<pos:position pos:line="4770" pos:column="27"/></operator><name pos:line="4770" pos:column="24">p1<pos:position pos:line="4770" pos:column="26"/></name></name></expr>]<pos:position pos:line="4770" pos:column="27"/></index></name></expr>;<pos:position pos:line="4770" pos:column="28"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="4771" pos:column="3">assert<pos:position pos:line="4771" pos:column="9"/></name><argument_list pos:line="4771" pos:column="9">( <argument><expr><name><name pos:line="4771" pos:column="11">pCur<pos:position pos:line="4771" pos:column="15"/></name><operator pos:line="4771" pos:column="15">-&gt;<pos:position pos:line="4771" pos:column="20"/></operator><name pos:line="4771" pos:column="17">pVtabCursor<pos:position pos:line="4771" pos:column="28"/></name></name></expr></argument> )<pos:position pos:line="4771" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="4771" pos:column="31"/></expr_stmt>
  <if pos:line="4772" pos:column="3">if<condition pos:line="4772" pos:column="5">( <expr><name><name pos:line="4772" pos:column="7">pCur<pos:position pos:line="4772" pos:column="11"/></name><operator pos:line="4772" pos:column="11">-&gt;<pos:position pos:line="4772" pos:column="16"/></operator><name pos:line="4772" pos:column="13">nullRow<pos:position pos:line="4772" pos:column="20"/></name></name></expr> )<pos:position pos:line="4772" pos:column="22"/></condition><then><block pos:line="4772" pos:column="22">{
    <break pos:line="4773" pos:column="5">break;<pos:position pos:line="4773" pos:column="11"/></break>
  }<pos:position pos:line="4774" pos:column="4"/></block></then></if>
  <expr_stmt><expr><name pos:line="4775" pos:column="3">pVtab<pos:position pos:line="4775" pos:column="8"/></name> <operator pos:line="4775" pos:column="9">=<pos:position pos:line="4775" pos:column="10"/></operator> <name><name pos:line="4775" pos:column="11">pCur<pos:position pos:line="4775" pos:column="15"/></name><operator pos:line="4775" pos:column="15">-&gt;<pos:position pos:line="4775" pos:column="20"/></operator><name pos:line="4775" pos:column="17">pVtabCursor<pos:position pos:line="4775" pos:column="28"/></name><operator pos:line="4775" pos:column="28">-&gt;<pos:position pos:line="4775" pos:column="33"/></operator><name pos:line="4775" pos:column="30">pVtab<pos:position pos:line="4775" pos:column="35"/></name></name></expr>;<pos:position pos:line="4775" pos:column="36"/></expr_stmt>
  <expr_stmt><expr><name pos:line="4776" pos:column="3">pModule<pos:position pos:line="4776" pos:column="10"/></name> <operator pos:line="4776" pos:column="11">=<pos:position pos:line="4776" pos:column="12"/></operator> <name><name pos:line="4776" pos:column="13">pVtab<pos:position pos:line="4776" pos:column="18"/></name><operator pos:line="4776" pos:column="18">-&gt;<pos:position pos:line="4776" pos:column="23"/></operator><name pos:line="4776" pos:column="20">pModule<pos:position pos:line="4776" pos:column="27"/></name></name></expr>;<pos:position pos:line="4776" pos:column="28"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="4777" pos:column="3">assert<pos:position pos:line="4777" pos:column="9"/></name><argument_list pos:line="4777" pos:column="9">( <argument><expr><name><name pos:line="4777" pos:column="11">pModule<pos:position pos:line="4777" pos:column="18"/></name><operator pos:line="4777" pos:column="18">-&gt;<pos:position pos:line="4777" pos:column="23"/></operator><name pos:line="4777" pos:column="20">xNext<pos:position pos:line="4777" pos:column="25"/></name></name></expr></argument> )<pos:position pos:line="4777" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="4777" pos:column="28"/></expr_stmt>

  <comment type="block" pos:line="4779" pos:column="3">/* Invoke the xNext() method of the module. There is no way for the
  ** underlying implementation to return an error if one occurs during
  ** xNext(). Instead, if an error occurs, true is returned (indicating that 
  ** data is available) and the error code returned when xColumn or
  ** some other method is next invoked on the save virtual table cursor.
  */</comment>
  <if pos:line="4785" pos:column="3">if<condition pos:line="4785" pos:column="5">( <expr><call><name pos:line="4785" pos:column="7">sqlite3SafetyOff<pos:position pos:line="4785" pos:column="23"/></name><argument_list pos:line="4785" pos:column="23">(<argument><expr><name pos:line="4785" pos:column="24">db<pos:position pos:line="4785" pos:column="26"/></name></expr></argument>)<pos:position pos:line="4785" pos:column="27"/></argument_list></call></expr> )<pos:position pos:line="4785" pos:column="29"/></condition><then pos:line="4785" pos:column="29"> <block type="pseudo"><goto pos:line="4785" pos:column="30">goto <name pos:line="4785" pos:column="35">abort_due_to_misuse<pos:position pos:line="4785" pos:column="54"/></name>;<pos:position pos:line="4785" pos:column="55"/></goto></block></then></if>
  <expr_stmt><expr><call><name pos:line="4786" pos:column="3">sqlite3VtabLock<pos:position pos:line="4786" pos:column="18"/></name><argument_list pos:line="4786" pos:column="18">(<argument><expr><name pos:line="4786" pos:column="19">pVtab<pos:position pos:line="4786" pos:column="24"/></name></expr></argument>)<pos:position pos:line="4786" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="4786" pos:column="26"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="4787" pos:column="3">p<pos:position pos:line="4787" pos:column="4"/></name><operator pos:line="4787" pos:column="4">-&gt;<pos:position pos:line="4787" pos:column="9"/></operator><name pos:line="4787" pos:column="6">inVtabMethod<pos:position pos:line="4787" pos:column="18"/></name></name> <operator pos:line="4787" pos:column="19">=<pos:position pos:line="4787" pos:column="20"/></operator> <literal type="number" pos:line="4787" pos:column="21">1<pos:position pos:line="4787" pos:column="22"/></literal></expr>;<pos:position pos:line="4787" pos:column="23"/></expr_stmt>
  <expr_stmt><expr><name pos:line="4788" pos:column="3">rc<pos:position pos:line="4788" pos:column="5"/></name> <operator pos:line="4788" pos:column="6">=<pos:position pos:line="4788" pos:column="7"/></operator> <call><name><name pos:line="4788" pos:column="8">pModule<pos:position pos:line="4788" pos:column="15"/></name><operator pos:line="4788" pos:column="15">-&gt;<pos:position pos:line="4788" pos:column="20"/></operator><name pos:line="4788" pos:column="17">xNext<pos:position pos:line="4788" pos:column="22"/></name></name><argument_list pos:line="4788" pos:column="22">(<argument><expr><name><name pos:line="4788" pos:column="23">pCur<pos:position pos:line="4788" pos:column="27"/></name><operator pos:line="4788" pos:column="27">-&gt;<pos:position pos:line="4788" pos:column="32"/></operator><name pos:line="4788" pos:column="29">pVtabCursor<pos:position pos:line="4788" pos:column="40"/></name></name></expr></argument>)<pos:position pos:line="4788" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="4788" pos:column="42"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="4789" pos:column="3">p<pos:position pos:line="4789" pos:column="4"/></name><operator pos:line="4789" pos:column="4">-&gt;<pos:position pos:line="4789" pos:column="9"/></operator><name pos:line="4789" pos:column="6">inVtabMethod<pos:position pos:line="4789" pos:column="18"/></name></name> <operator pos:line="4789" pos:column="19">=<pos:position pos:line="4789" pos:column="20"/></operator> <literal type="number" pos:line="4789" pos:column="21">0<pos:position pos:line="4789" pos:column="22"/></literal></expr>;<pos:position pos:line="4789" pos:column="23"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="4790" pos:column="3">sqlite3DbFree<pos:position pos:line="4790" pos:column="16"/></name><argument_list pos:line="4790" pos:column="16">(<argument><expr><name pos:line="4790" pos:column="17">db<pos:position pos:line="4790" pos:column="19"/></name></expr></argument>, <argument><expr><name><name pos:line="4790" pos:column="21">p<pos:position pos:line="4790" pos:column="22"/></name><operator pos:line="4790" pos:column="22">-&gt;<pos:position pos:line="4790" pos:column="27"/></operator><name pos:line="4790" pos:column="24">zErrMsg<pos:position pos:line="4790" pos:column="31"/></name></name></expr></argument>)<pos:position pos:line="4790" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="4790" pos:column="33"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="4791" pos:column="3">p<pos:position pos:line="4791" pos:column="4"/></name><operator pos:line="4791" pos:column="4">-&gt;<pos:position pos:line="4791" pos:column="9"/></operator><name pos:line="4791" pos:column="6">zErrMsg<pos:position pos:line="4791" pos:column="13"/></name></name> <operator pos:line="4791" pos:column="14">=<pos:position pos:line="4791" pos:column="15"/></operator> <name><name pos:line="4791" pos:column="16">pVtab<pos:position pos:line="4791" pos:column="21"/></name><operator pos:line="4791" pos:column="21">-&gt;<pos:position pos:line="4791" pos:column="26"/></operator><name pos:line="4791" pos:column="23">zErrMsg<pos:position pos:line="4791" pos:column="30"/></name></name></expr>;<pos:position pos:line="4791" pos:column="31"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="4792" pos:column="3">pVtab<pos:position pos:line="4792" pos:column="8"/></name><operator pos:line="4792" pos:column="8">-&gt;<pos:position pos:line="4792" pos:column="13"/></operator><name pos:line="4792" pos:column="10">zErrMsg<pos:position pos:line="4792" pos:column="17"/></name></name> <operator pos:line="4792" pos:column="18">=<pos:position pos:line="4792" pos:column="19"/></operator> <literal type="number" pos:line="4792" pos:column="20">0<pos:position pos:line="4792" pos:column="21"/></literal></expr>;<pos:position pos:line="4792" pos:column="22"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="4793" pos:column="3">sqlite3VtabUnlock<pos:position pos:line="4793" pos:column="20"/></name><argument_list pos:line="4793" pos:column="20">(<argument><expr><name pos:line="4793" pos:column="21">db<pos:position pos:line="4793" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="4793" pos:column="25">pVtab<pos:position pos:line="4793" pos:column="30"/></name></expr></argument>)<pos:position pos:line="4793" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="4793" pos:column="32"/></expr_stmt>
  <if pos:line="4794" pos:column="3">if<condition pos:line="4794" pos:column="5">( <expr><name pos:line="4794" pos:column="7">rc<pos:position pos:line="4794" pos:column="9"/></name><operator pos:line="4794" pos:column="9">==<pos:position pos:line="4794" pos:column="11"/></operator><name pos:line="4794" pos:column="11">SQLITE_OK<pos:position pos:line="4794" pos:column="20"/></name></expr> )<pos:position pos:line="4794" pos:column="22"/></condition><then><block pos:line="4794" pos:column="22">{
    <expr_stmt><expr><name pos:line="4795" pos:column="5">res<pos:position pos:line="4795" pos:column="8"/></name> <operator pos:line="4795" pos:column="9">=<pos:position pos:line="4795" pos:column="10"/></operator> <call><name><name pos:line="4795" pos:column="11">pModule<pos:position pos:line="4795" pos:column="18"/></name><operator pos:line="4795" pos:column="18">-&gt;<pos:position pos:line="4795" pos:column="23"/></operator><name pos:line="4795" pos:column="20">xEof<pos:position pos:line="4795" pos:column="24"/></name></name><argument_list pos:line="4795" pos:column="24">(<argument><expr><name><name pos:line="4795" pos:column="25">pCur<pos:position pos:line="4795" pos:column="29"/></name><operator pos:line="4795" pos:column="29">-&gt;<pos:position pos:line="4795" pos:column="34"/></operator><name pos:line="4795" pos:column="31">pVtabCursor<pos:position pos:line="4795" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="4795" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="4795" pos:column="44"/></expr_stmt>
  }<pos:position pos:line="4796" pos:column="4"/></block></then></if>
  <if pos:line="4797" pos:column="3">if<condition pos:line="4797" pos:column="5">( <expr><call><name pos:line="4797" pos:column="7">sqlite3SafetyOn<pos:position pos:line="4797" pos:column="22"/></name><argument_list pos:line="4797" pos:column="22">(<argument><expr><name pos:line="4797" pos:column="23">db<pos:position pos:line="4797" pos:column="25"/></name></expr></argument>)<pos:position pos:line="4797" pos:column="26"/></argument_list></call></expr> )<pos:position pos:line="4797" pos:column="28"/></condition><then pos:line="4797" pos:column="28"> <block type="pseudo"><goto pos:line="4797" pos:column="29">goto <name pos:line="4797" pos:column="34">abort_due_to_misuse<pos:position pos:line="4797" pos:column="53"/></name>;<pos:position pos:line="4797" pos:column="54"/></goto></block></then></if>

  <if pos:line="4799" pos:column="3">if<condition pos:line="4799" pos:column="5">( <expr><operator pos:line="4799" pos:column="7">!<pos:position pos:line="4799" pos:column="8"/></operator><name pos:line="4799" pos:column="8">res<pos:position pos:line="4799" pos:column="11"/></name></expr> )<pos:position pos:line="4799" pos:column="13"/></condition><then><block pos:line="4799" pos:column="13">{
    <comment type="block" pos:line="4800" pos:column="5">/* If there is data, jump to P2 */</comment>
    <expr_stmt><expr><name pos:line="4801" pos:column="5">pc<pos:position pos:line="4801" pos:column="7"/></name> <operator pos:line="4801" pos:column="8">=<pos:position pos:line="4801" pos:column="9"/></operator> <name><name pos:line="4801" pos:column="10">pOp<pos:position pos:line="4801" pos:column="13"/></name><operator pos:line="4801" pos:column="13">-&gt;<pos:position pos:line="4801" pos:column="18"/></operator><name pos:line="4801" pos:column="15">p2<pos:position pos:line="4801" pos:column="17"/></name></name> <operator pos:line="4801" pos:column="18">-<pos:position pos:line="4801" pos:column="19"/></operator> <literal type="number" pos:line="4801" pos:column="20">1<pos:position pos:line="4801" pos:column="21"/></literal></expr>;<pos:position pos:line="4801" pos:column="22"/></expr_stmt>
  }<pos:position pos:line="4802" pos:column="4"/></block></then></if>
  <break pos:line="4803" pos:column="3">break;<pos:position pos:line="4803" pos:column="9"/></break>
}<pos:position pos:line="4804" pos:column="2"/></block>
<cpp:endif pos:line="4805" pos:column="1">#<cpp:directive pos:line="4805" pos:column="2">endif<pos:position pos:line="4805" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="4805" pos:column="8">/* SQLITE_OMIT_VIRTUALTABLE */</comment>

<cpp:ifndef pos:line="4807" pos:column="1">#<cpp:directive pos:line="4807" pos:column="2">ifndef<pos:position pos:line="4807" pos:column="8"/></cpp:directive> <name pos:line="4807" pos:column="9">SQLITE_OMIT_VIRTUALTABLE<pos:position pos:line="4807" pos:column="33"/></name></cpp:ifndef>
<comment type="block" pos:line="4808" pos:column="1">/* Opcode: VRename P1 * * P4 *
**
** P4 is a pointer to a virtual table object, an sqlite3_vtab structure.
** This opcode invokes the corresponding xRename method. The value
** in register P1 is passed as the zName argument to the xRename method.
*/</comment>
<case pos:line="4814" pos:column="1">case <expr><name pos:line="4814" pos:column="6">OP_VRename<pos:position pos:line="4814" pos:column="16"/></name></expr>:<pos:position pos:line="4814" pos:column="17"/></case> <block pos:line="4814" pos:column="18">{
  <decl_stmt><decl><type><name pos:line="4815" pos:column="3">sqlite3_vtab<pos:position pos:line="4815" pos:column="15"/></name> <modifier pos:line="4815" pos:column="16">*<pos:position pos:line="4815" pos:column="17"/></modifier></type><name pos:line="4815" pos:column="17">pVtab<pos:position pos:line="4815" pos:column="22"/></name></decl>;<pos:position pos:line="4815" pos:column="23"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4816" pos:column="3">Mem<pos:position pos:line="4816" pos:column="6"/></name> <modifier pos:line="4816" pos:column="7">*<pos:position pos:line="4816" pos:column="8"/></modifier></type><name pos:line="4816" pos:column="8">pName<pos:position pos:line="4816" pos:column="13"/></name></decl>;<pos:position pos:line="4816" pos:column="14"/></decl_stmt>

  <expr_stmt><expr><name pos:line="4818" pos:column="3">pVtab<pos:position pos:line="4818" pos:column="8"/></name> <operator pos:line="4818" pos:column="9">=<pos:position pos:line="4818" pos:column="10"/></operator> <name><name pos:line="4818" pos:column="11">pOp<pos:position pos:line="4818" pos:column="14"/></name><operator pos:line="4818" pos:column="14">-&gt;<pos:position pos:line="4818" pos:column="19"/></operator><name pos:line="4818" pos:column="16">p4<pos:position pos:line="4818" pos:column="18"/></name><operator pos:line="4818" pos:column="18">.<pos:position pos:line="4818" pos:column="19"/></operator><name pos:line="4818" pos:column="19">pVtab<pos:position pos:line="4818" pos:column="24"/></name></name></expr>;<pos:position pos:line="4818" pos:column="25"/></expr_stmt>
  <expr_stmt><expr><name pos:line="4819" pos:column="3">pName<pos:position pos:line="4819" pos:column="8"/></name> <operator pos:line="4819" pos:column="9">=<pos:position pos:line="4819" pos:column="10"/></operator> <operator pos:line="4819" pos:column="11">&amp;<pos:position pos:line="4819" pos:column="16"/></operator><name><name pos:line="4819" pos:column="12">p<pos:position pos:line="4819" pos:column="13"/></name><operator pos:line="4819" pos:column="13">-&gt;<pos:position pos:line="4819" pos:column="18"/></operator><name pos:line="4819" pos:column="15">aMem<pos:position pos:line="4819" pos:column="19"/></name><index pos:line="4819" pos:column="19">[<expr><name><name pos:line="4819" pos:column="20">pOp<pos:position pos:line="4819" pos:column="23"/></name><operator pos:line="4819" pos:column="23">-&gt;<pos:position pos:line="4819" pos:column="28"/></operator><name pos:line="4819" pos:column="25">p1<pos:position pos:line="4819" pos:column="27"/></name></name></expr>]<pos:position pos:line="4819" pos:column="28"/></index></name></expr>;<pos:position pos:line="4819" pos:column="29"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="4820" pos:column="3">assert<pos:position pos:line="4820" pos:column="9"/></name><argument_list pos:line="4820" pos:column="9">( <argument><expr><name><name pos:line="4820" pos:column="11">pVtab<pos:position pos:line="4820" pos:column="16"/></name><operator pos:line="4820" pos:column="16">-&gt;<pos:position pos:line="4820" pos:column="21"/></operator><name pos:line="4820" pos:column="18">pModule<pos:position pos:line="4820" pos:column="25"/></name><operator pos:line="4820" pos:column="25">-&gt;<pos:position pos:line="4820" pos:column="30"/></operator><name pos:line="4820" pos:column="27">xRename<pos:position pos:line="4820" pos:column="34"/></name></name></expr></argument> )<pos:position pos:line="4820" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="4820" pos:column="37"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="4821" pos:column="3">REGISTER_TRACE<pos:position pos:line="4821" pos:column="17"/></name><argument_list pos:line="4821" pos:column="17">(<argument><expr><name><name pos:line="4821" pos:column="18">pOp<pos:position pos:line="4821" pos:column="21"/></name><operator pos:line="4821" pos:column="21">-&gt;<pos:position pos:line="4821" pos:column="26"/></operator><name pos:line="4821" pos:column="23">p1<pos:position pos:line="4821" pos:column="25"/></name></name></expr></argument>, <argument><expr><name pos:line="4821" pos:column="27">pName<pos:position pos:line="4821" pos:column="32"/></name></expr></argument>)<pos:position pos:line="4821" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="4821" pos:column="34"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="4823" pos:column="3">Stringify<pos:position pos:line="4823" pos:column="12"/></name><argument_list pos:line="4823" pos:column="12">(<argument><expr><name pos:line="4823" pos:column="13">pName<pos:position pos:line="4823" pos:column="18"/></name></expr></argument>, <argument><expr><name pos:line="4823" pos:column="20">encoding<pos:position pos:line="4823" pos:column="28"/></name></expr></argument>)<pos:position pos:line="4823" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="4823" pos:column="30"/></expr_stmt>

  <if pos:line="4825" pos:column="3">if<condition pos:line="4825" pos:column="5">( <expr><call><name pos:line="4825" pos:column="7">sqlite3SafetyOff<pos:position pos:line="4825" pos:column="23"/></name><argument_list pos:line="4825" pos:column="23">(<argument><expr><name pos:line="4825" pos:column="24">db<pos:position pos:line="4825" pos:column="26"/></name></expr></argument>)<pos:position pos:line="4825" pos:column="27"/></argument_list></call></expr> )<pos:position pos:line="4825" pos:column="29"/></condition><then pos:line="4825" pos:column="29"> <block type="pseudo"><goto pos:line="4825" pos:column="30">goto <name pos:line="4825" pos:column="35">abort_due_to_misuse<pos:position pos:line="4825" pos:column="54"/></name>;<pos:position pos:line="4825" pos:column="55"/></goto></block></then></if>
  <expr_stmt><expr><call><name pos:line="4826" pos:column="3">sqlite3VtabLock<pos:position pos:line="4826" pos:column="18"/></name><argument_list pos:line="4826" pos:column="18">(<argument><expr><name pos:line="4826" pos:column="19">pVtab<pos:position pos:line="4826" pos:column="24"/></name></expr></argument>)<pos:position pos:line="4826" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="4826" pos:column="26"/></expr_stmt>
  <expr_stmt><expr><name pos:line="4827" pos:column="3">rc<pos:position pos:line="4827" pos:column="5"/></name> <operator pos:line="4827" pos:column="6">=<pos:position pos:line="4827" pos:column="7"/></operator> <call><name><name pos:line="4827" pos:column="8">pVtab<pos:position pos:line="4827" pos:column="13"/></name><operator pos:line="4827" pos:column="13">-&gt;<pos:position pos:line="4827" pos:column="18"/></operator><name pos:line="4827" pos:column="15">pModule<pos:position pos:line="4827" pos:column="22"/></name><operator pos:line="4827" pos:column="22">-&gt;<pos:position pos:line="4827" pos:column="27"/></operator><name pos:line="4827" pos:column="24">xRename<pos:position pos:line="4827" pos:column="31"/></name></name><argument_list pos:line="4827" pos:column="31">(<argument><expr><name pos:line="4827" pos:column="32">pVtab<pos:position pos:line="4827" pos:column="37"/></name></expr></argument>, <argument><expr><name><name pos:line="4827" pos:column="39">pName<pos:position pos:line="4827" pos:column="44"/></name><operator pos:line="4827" pos:column="44">-&gt;<pos:position pos:line="4827" pos:column="49"/></operator><name pos:line="4827" pos:column="46">z<pos:position pos:line="4827" pos:column="47"/></name></name></expr></argument>)<pos:position pos:line="4827" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="4827" pos:column="49"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="4828" pos:column="3">sqlite3DbFree<pos:position pos:line="4828" pos:column="16"/></name><argument_list pos:line="4828" pos:column="16">(<argument><expr><name pos:line="4828" pos:column="17">db<pos:position pos:line="4828" pos:column="19"/></name></expr></argument>, <argument><expr><name><name pos:line="4828" pos:column="21">p<pos:position pos:line="4828" pos:column="22"/></name><operator pos:line="4828" pos:column="22">-&gt;<pos:position pos:line="4828" pos:column="27"/></operator><name pos:line="4828" pos:column="24">zErrMsg<pos:position pos:line="4828" pos:column="31"/></name></name></expr></argument>)<pos:position pos:line="4828" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="4828" pos:column="33"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="4829" pos:column="3">p<pos:position pos:line="4829" pos:column="4"/></name><operator pos:line="4829" pos:column="4">-&gt;<pos:position pos:line="4829" pos:column="9"/></operator><name pos:line="4829" pos:column="6">zErrMsg<pos:position pos:line="4829" pos:column="13"/></name></name> <operator pos:line="4829" pos:column="14">=<pos:position pos:line="4829" pos:column="15"/></operator> <name><name pos:line="4829" pos:column="16">pVtab<pos:position pos:line="4829" pos:column="21"/></name><operator pos:line="4829" pos:column="21">-&gt;<pos:position pos:line="4829" pos:column="26"/></operator><name pos:line="4829" pos:column="23">zErrMsg<pos:position pos:line="4829" pos:column="30"/></name></name></expr>;<pos:position pos:line="4829" pos:column="31"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="4830" pos:column="3">pVtab<pos:position pos:line="4830" pos:column="8"/></name><operator pos:line="4830" pos:column="8">-&gt;<pos:position pos:line="4830" pos:column="13"/></operator><name pos:line="4830" pos:column="10">zErrMsg<pos:position pos:line="4830" pos:column="17"/></name></name> <operator pos:line="4830" pos:column="18">=<pos:position pos:line="4830" pos:column="19"/></operator> <literal type="number" pos:line="4830" pos:column="20">0<pos:position pos:line="4830" pos:column="21"/></literal></expr>;<pos:position pos:line="4830" pos:column="22"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="4831" pos:column="3">sqlite3VtabUnlock<pos:position pos:line="4831" pos:column="20"/></name><argument_list pos:line="4831" pos:column="20">(<argument><expr><name pos:line="4831" pos:column="21">db<pos:position pos:line="4831" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="4831" pos:column="25">pVtab<pos:position pos:line="4831" pos:column="30"/></name></expr></argument>)<pos:position pos:line="4831" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="4831" pos:column="32"/></expr_stmt>
  <if pos:line="4832" pos:column="3">if<condition pos:line="4832" pos:column="5">( <expr><call><name pos:line="4832" pos:column="7">sqlite3SafetyOn<pos:position pos:line="4832" pos:column="22"/></name><argument_list pos:line="4832" pos:column="22">(<argument><expr><name pos:line="4832" pos:column="23">db<pos:position pos:line="4832" pos:column="25"/></name></expr></argument>)<pos:position pos:line="4832" pos:column="26"/></argument_list></call></expr> )<pos:position pos:line="4832" pos:column="28"/></condition><then pos:line="4832" pos:column="28"> <block type="pseudo"><goto pos:line="4832" pos:column="29">goto <name pos:line="4832" pos:column="34">abort_due_to_misuse<pos:position pos:line="4832" pos:column="53"/></name>;<pos:position pos:line="4832" pos:column="54"/></goto></block></then></if>

  <break pos:line="4834" pos:column="3">break;<pos:position pos:line="4834" pos:column="9"/></break>
}<pos:position pos:line="4835" pos:column="2"/></block>
<cpp:endif pos:line="4836" pos:column="1">#<cpp:directive pos:line="4836" pos:column="2">endif<pos:position pos:line="4836" pos:column="7"/></cpp:directive></cpp:endif>

<cpp:ifndef pos:line="4838" pos:column="1">#<cpp:directive pos:line="4838" pos:column="2">ifndef<pos:position pos:line="4838" pos:column="8"/></cpp:directive> <name pos:line="4838" pos:column="9">SQLITE_OMIT_VIRTUALTABLE<pos:position pos:line="4838" pos:column="33"/></name></cpp:ifndef>
<comment type="block" pos:line="4839" pos:column="1">/* Opcode: VUpdate P1 P2 P3 P4 *
**
** P4 is a pointer to a virtual table object, an sqlite3_vtab structure.
** This opcode invokes the corresponding xUpdate method. P2 values
** are contiguous memory cells starting at P3 to pass to the xUpdate 
** invocation. The value in register (P3+P2-1) corresponds to the 
** p2th element of the argv array passed to xUpdate.
**
** The xUpdate method will do a DELETE or an INSERT or both.
** The argv[0] element (which corresponds to memory cell P3)
** is the rowid of a row to delete.  If argv[0] is NULL then no 
** deletion occurs.  The argv[1] element is the rowid of the new 
** row.  This can be NULL to have the virtual table select the new 
** rowid for itself.  The subsequent elements in the array are 
** the values of columns in the new row.
**
** If P2==1 then no insert is performed.  argv[0] is the rowid of
** a row to delete.
**
** P1 is a boolean flag. If it is set to true and the xUpdate call
** is successful, then the value returned by sqlite3_last_insert_rowid() 
** is set to the value of the rowid for the row just inserted.
*/</comment>
<case pos:line="4862" pos:column="1">case <expr><name pos:line="4862" pos:column="6">OP_VUpdate<pos:position pos:line="4862" pos:column="16"/></name></expr>:<pos:position pos:line="4862" pos:column="17"/></case> <block pos:line="4862" pos:column="18">{
  <decl_stmt><decl><type><name pos:line="4863" pos:column="3">sqlite3_vtab<pos:position pos:line="4863" pos:column="15"/></name> <modifier pos:line="4863" pos:column="16">*<pos:position pos:line="4863" pos:column="17"/></modifier></type><name pos:line="4863" pos:column="17">pVtab<pos:position pos:line="4863" pos:column="22"/></name></decl>;<pos:position pos:line="4863" pos:column="23"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4864" pos:column="3">sqlite3_module<pos:position pos:line="4864" pos:column="17"/></name> <modifier pos:line="4864" pos:column="18">*<pos:position pos:line="4864" pos:column="19"/></modifier></type><name pos:line="4864" pos:column="19">pModule<pos:position pos:line="4864" pos:column="26"/></name></decl>;<pos:position pos:line="4864" pos:column="27"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4865" pos:column="3">int<pos:position pos:line="4865" pos:column="6"/></name></type> <name pos:line="4865" pos:column="7">nArg<pos:position pos:line="4865" pos:column="11"/></name></decl>;<pos:position pos:line="4865" pos:column="12"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4866" pos:column="3">int<pos:position pos:line="4866" pos:column="6"/></name></type> <name pos:line="4866" pos:column="7">i<pos:position pos:line="4866" pos:column="8"/></name></decl>;<pos:position pos:line="4866" pos:column="9"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4867" pos:column="3">sqlite_int64<pos:position pos:line="4867" pos:column="15"/></name></type> <name pos:line="4867" pos:column="16">rowid<pos:position pos:line="4867" pos:column="21"/></name></decl>;<pos:position pos:line="4867" pos:column="22"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4868" pos:column="3">Mem<pos:position pos:line="4868" pos:column="6"/></name> <modifier pos:line="4868" pos:column="7">*<pos:position pos:line="4868" pos:column="8"/></modifier><modifier pos:line="4868" pos:column="8">*<pos:position pos:line="4868" pos:column="9"/></modifier></type><name pos:line="4868" pos:column="9">apArg<pos:position pos:line="4868" pos:column="14"/></name></decl>;<pos:position pos:line="4868" pos:column="15"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4869" pos:column="3">Mem<pos:position pos:line="4869" pos:column="6"/></name> <modifier pos:line="4869" pos:column="7">*<pos:position pos:line="4869" pos:column="8"/></modifier></type><name pos:line="4869" pos:column="8">pX<pos:position pos:line="4869" pos:column="10"/></name></decl>;<pos:position pos:line="4869" pos:column="11"/></decl_stmt>

  <expr_stmt><expr><name pos:line="4871" pos:column="3">pVtab<pos:position pos:line="4871" pos:column="8"/></name> <operator pos:line="4871" pos:column="9">=<pos:position pos:line="4871" pos:column="10"/></operator> <name><name pos:line="4871" pos:column="11">pOp<pos:position pos:line="4871" pos:column="14"/></name><operator pos:line="4871" pos:column="14">-&gt;<pos:position pos:line="4871" pos:column="19"/></operator><name pos:line="4871" pos:column="16">p4<pos:position pos:line="4871" pos:column="18"/></name><operator pos:line="4871" pos:column="18">.<pos:position pos:line="4871" pos:column="19"/></operator><name pos:line="4871" pos:column="19">pVtab<pos:position pos:line="4871" pos:column="24"/></name></name></expr>;<pos:position pos:line="4871" pos:column="25"/></expr_stmt>
  <expr_stmt><expr><name pos:line="4872" pos:column="3">pModule<pos:position pos:line="4872" pos:column="10"/></name> <operator pos:line="4872" pos:column="11">=<pos:position pos:line="4872" pos:column="12"/></operator> <operator pos:line="4872" pos:column="13">(<pos:position pos:line="4872" pos:column="14"/></operator><name pos:line="4872" pos:column="14">sqlite3_module<pos:position pos:line="4872" pos:column="28"/></name> <operator pos:line="4872" pos:column="29">*<pos:position pos:line="4872" pos:column="30"/></operator><operator pos:line="4872" pos:column="30">)<pos:position pos:line="4872" pos:column="31"/></operator><name><name pos:line="4872" pos:column="31">pVtab<pos:position pos:line="4872" pos:column="36"/></name><operator pos:line="4872" pos:column="36">-&gt;<pos:position pos:line="4872" pos:column="41"/></operator><name pos:line="4872" pos:column="38">pModule<pos:position pos:line="4872" pos:column="45"/></name></name></expr>;<pos:position pos:line="4872" pos:column="46"/></expr_stmt>
  <expr_stmt><expr><name pos:line="4873" pos:column="3">nArg<pos:position pos:line="4873" pos:column="7"/></name> <operator pos:line="4873" pos:column="8">=<pos:position pos:line="4873" pos:column="9"/></operator> <name><name pos:line="4873" pos:column="10">pOp<pos:position pos:line="4873" pos:column="13"/></name><operator pos:line="4873" pos:column="13">-&gt;<pos:position pos:line="4873" pos:column="18"/></operator><name pos:line="4873" pos:column="15">p2<pos:position pos:line="4873" pos:column="17"/></name></name></expr>;<pos:position pos:line="4873" pos:column="18"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="4874" pos:column="3">assert<pos:position pos:line="4874" pos:column="9"/></name><argument_list pos:line="4874" pos:column="9">( <argument><expr><name><name pos:line="4874" pos:column="11">pOp<pos:position pos:line="4874" pos:column="14"/></name><operator pos:line="4874" pos:column="14">-&gt;<pos:position pos:line="4874" pos:column="19"/></operator><name pos:line="4874" pos:column="16">p4type<pos:position pos:line="4874" pos:column="22"/></name></name><operator pos:line="4874" pos:column="22">==<pos:position pos:line="4874" pos:column="24"/></operator><name pos:line="4874" pos:column="24">P4_VTAB<pos:position pos:line="4874" pos:column="31"/></name></expr></argument> )<pos:position pos:line="4874" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="4874" pos:column="34"/></expr_stmt>
  <if pos:line="4875" pos:column="3">if<condition pos:line="4875" pos:column="5">( <expr><name><name pos:line="4875" pos:column="7">pModule<pos:position pos:line="4875" pos:column="14"/></name><operator pos:line="4875" pos:column="14">-&gt;<pos:position pos:line="4875" pos:column="19"/></operator><name pos:line="4875" pos:column="16">xUpdate<pos:position pos:line="4875" pos:column="23"/></name></name><operator pos:line="4875" pos:column="23">==<pos:position pos:line="4875" pos:column="25"/></operator><literal type="number" pos:line="4875" pos:column="25">0<pos:position pos:line="4875" pos:column="26"/></literal></expr> )<pos:position pos:line="4875" pos:column="28"/></condition><then><block pos:line="4875" pos:column="28">{
    <expr_stmt><expr><call><name pos:line="4876" pos:column="5">sqlite3SetString<pos:position pos:line="4876" pos:column="21"/></name><argument_list pos:line="4876" pos:column="21">(<argument><expr><operator pos:line="4876" pos:column="22">&amp;<pos:position pos:line="4876" pos:column="27"/></operator><name><name pos:line="4876" pos:column="23">p<pos:position pos:line="4876" pos:column="24"/></name><operator pos:line="4876" pos:column="24">-&gt;<pos:position pos:line="4876" pos:column="29"/></operator><name pos:line="4876" pos:column="26">zErrMsg<pos:position pos:line="4876" pos:column="33"/></name></name></expr></argument>, <argument><expr><name pos:line="4876" pos:column="35">db<pos:position pos:line="4876" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="4876" pos:column="39">"read-only table"<pos:position pos:line="4876" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="4876" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="4876" pos:column="58"/></expr_stmt>
    <expr_stmt><expr><name pos:line="4877" pos:column="5">rc<pos:position pos:line="4877" pos:column="7"/></name> <operator pos:line="4877" pos:column="8">=<pos:position pos:line="4877" pos:column="9"/></operator> <name pos:line="4877" pos:column="10">SQLITE_ERROR<pos:position pos:line="4877" pos:column="22"/></name></expr>;<pos:position pos:line="4877" pos:column="23"/></expr_stmt>
  }<pos:position pos:line="4878" pos:column="4"/></block></then><else pos:line="4878" pos:column="4">else<block pos:line="4878" pos:column="8">{
    <expr_stmt><expr><name pos:line="4879" pos:column="5">apArg<pos:position pos:line="4879" pos:column="10"/></name> <operator pos:line="4879" pos:column="11">=<pos:position pos:line="4879" pos:column="12"/></operator> <name><name pos:line="4879" pos:column="13">p<pos:position pos:line="4879" pos:column="14"/></name><operator pos:line="4879" pos:column="14">-&gt;<pos:position pos:line="4879" pos:column="19"/></operator><name pos:line="4879" pos:column="16">apArg<pos:position pos:line="4879" pos:column="21"/></name></name></expr>;<pos:position pos:line="4879" pos:column="22"/></expr_stmt>
    <expr_stmt><expr><name pos:line="4880" pos:column="5">pX<pos:position pos:line="4880" pos:column="7"/></name> <operator pos:line="4880" pos:column="8">=<pos:position pos:line="4880" pos:column="9"/></operator> <operator pos:line="4880" pos:column="10">&amp;<pos:position pos:line="4880" pos:column="15"/></operator><name><name pos:line="4880" pos:column="11">p<pos:position pos:line="4880" pos:column="12"/></name><operator pos:line="4880" pos:column="12">-&gt;<pos:position pos:line="4880" pos:column="17"/></operator><name pos:line="4880" pos:column="14">aMem<pos:position pos:line="4880" pos:column="18"/></name><index pos:line="4880" pos:column="18">[<expr><name><name pos:line="4880" pos:column="19">pOp<pos:position pos:line="4880" pos:column="22"/></name><operator pos:line="4880" pos:column="22">-&gt;<pos:position pos:line="4880" pos:column="27"/></operator><name pos:line="4880" pos:column="24">p3<pos:position pos:line="4880" pos:column="26"/></name></name></expr>]<pos:position pos:line="4880" pos:column="27"/></index></name></expr>;<pos:position pos:line="4880" pos:column="28"/></expr_stmt>
    <for pos:line="4881" pos:column="5">for<control pos:line="4881" pos:column="8">(<init><expr><name pos:line="4881" pos:column="9">i<pos:position pos:line="4881" pos:column="10"/></name><operator pos:line="4881" pos:column="10">=<pos:position pos:line="4881" pos:column="11"/></operator><literal type="number" pos:line="4881" pos:column="11">0<pos:position pos:line="4881" pos:column="12"/></literal></expr>;<pos:position pos:line="4881" pos:column="13"/></init> <condition><expr><name pos:line="4881" pos:column="14">i<pos:position pos:line="4881" pos:column="15"/></name><operator pos:line="4881" pos:column="15">&lt;<pos:position pos:line="4881" pos:column="19"/></operator><name pos:line="4881" pos:column="16">nArg<pos:position pos:line="4881" pos:column="20"/></name></expr>;<pos:position pos:line="4881" pos:column="21"/></condition> <incr><expr><name pos:line="4881" pos:column="22">i<pos:position pos:line="4881" pos:column="23"/></name><operator pos:line="4881" pos:column="23">++<pos:position pos:line="4881" pos:column="25"/></operator></expr></incr>)<pos:position pos:line="4881" pos:column="26"/></control><block pos:line="4881" pos:column="26">{
      <expr_stmt><expr><call><name pos:line="4882" pos:column="7">storeTypeInfo<pos:position pos:line="4882" pos:column="20"/></name><argument_list pos:line="4882" pos:column="20">(<argument><expr><name pos:line="4882" pos:column="21">pX<pos:position pos:line="4882" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="4882" pos:column="25">0<pos:position pos:line="4882" pos:column="26"/></literal></expr></argument>)<pos:position pos:line="4882" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="4882" pos:column="28"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="4883" pos:column="7">apArg<pos:position pos:line="4883" pos:column="12"/></name><index pos:line="4883" pos:column="12">[<expr><name pos:line="4883" pos:column="13">i<pos:position pos:line="4883" pos:column="14"/></name></expr>]<pos:position pos:line="4883" pos:column="15"/></index></name> <operator pos:line="4883" pos:column="16">=<pos:position pos:line="4883" pos:column="17"/></operator> <name pos:line="4883" pos:column="18">pX<pos:position pos:line="4883" pos:column="20"/></name></expr>;<pos:position pos:line="4883" pos:column="21"/></expr_stmt>
      <expr_stmt><expr><name pos:line="4884" pos:column="7">pX<pos:position pos:line="4884" pos:column="9"/></name><operator pos:line="4884" pos:column="9">++<pos:position pos:line="4884" pos:column="11"/></operator></expr>;<pos:position pos:line="4884" pos:column="12"/></expr_stmt>
    }<pos:position pos:line="4885" pos:column="6"/></block></for>
    <if pos:line="4886" pos:column="5">if<condition pos:line="4886" pos:column="7">( <expr><call><name pos:line="4886" pos:column="9">sqlite3SafetyOff<pos:position pos:line="4886" pos:column="25"/></name><argument_list pos:line="4886" pos:column="25">(<argument><expr><name pos:line="4886" pos:column="26">db<pos:position pos:line="4886" pos:column="28"/></name></expr></argument>)<pos:position pos:line="4886" pos:column="29"/></argument_list></call></expr> )<pos:position pos:line="4886" pos:column="31"/></condition><then pos:line="4886" pos:column="31"> <block type="pseudo"><goto pos:line="4886" pos:column="32">goto <name pos:line="4886" pos:column="37">abort_due_to_misuse<pos:position pos:line="4886" pos:column="56"/></name>;<pos:position pos:line="4886" pos:column="57"/></goto></block></then></if>
    <expr_stmt><expr><call><name pos:line="4887" pos:column="5">sqlite3VtabLock<pos:position pos:line="4887" pos:column="20"/></name><argument_list pos:line="4887" pos:column="20">(<argument><expr><name pos:line="4887" pos:column="21">pVtab<pos:position pos:line="4887" pos:column="26"/></name></expr></argument>)<pos:position pos:line="4887" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="4887" pos:column="28"/></expr_stmt>
    <expr_stmt><expr><name pos:line="4888" pos:column="5">rc<pos:position pos:line="4888" pos:column="7"/></name> <operator pos:line="4888" pos:column="8">=<pos:position pos:line="4888" pos:column="9"/></operator> <call><name><name pos:line="4888" pos:column="10">pModule<pos:position pos:line="4888" pos:column="17"/></name><operator pos:line="4888" pos:column="17">-&gt;<pos:position pos:line="4888" pos:column="22"/></operator><name pos:line="4888" pos:column="19">xUpdate<pos:position pos:line="4888" pos:column="26"/></name></name><argument_list pos:line="4888" pos:column="26">(<argument><expr><name pos:line="4888" pos:column="27">pVtab<pos:position pos:line="4888" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="4888" pos:column="34">nArg<pos:position pos:line="4888" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="4888" pos:column="40">apArg<pos:position pos:line="4888" pos:column="45"/></name></expr></argument>, <argument><expr><operator pos:line="4888" pos:column="47">&amp;<pos:position pos:line="4888" pos:column="52"/></operator><name pos:line="4888" pos:column="48">rowid<pos:position pos:line="4888" pos:column="53"/></name></expr></argument>)<pos:position pos:line="4888" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="4888" pos:column="55"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="4889" pos:column="5">sqlite3DbFree<pos:position pos:line="4889" pos:column="18"/></name><argument_list pos:line="4889" pos:column="18">(<argument><expr><name pos:line="4889" pos:column="19">db<pos:position pos:line="4889" pos:column="21"/></name></expr></argument>, <argument><expr><name><name pos:line="4889" pos:column="23">p<pos:position pos:line="4889" pos:column="24"/></name><operator pos:line="4889" pos:column="24">-&gt;<pos:position pos:line="4889" pos:column="29"/></operator><name pos:line="4889" pos:column="26">zErrMsg<pos:position pos:line="4889" pos:column="33"/></name></name></expr></argument>)<pos:position pos:line="4889" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="4889" pos:column="35"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="4890" pos:column="5">p<pos:position pos:line="4890" pos:column="6"/></name><operator pos:line="4890" pos:column="6">-&gt;<pos:position pos:line="4890" pos:column="11"/></operator><name pos:line="4890" pos:column="8">zErrMsg<pos:position pos:line="4890" pos:column="15"/></name></name> <operator pos:line="4890" pos:column="16">=<pos:position pos:line="4890" pos:column="17"/></operator> <name><name pos:line="4890" pos:column="18">pVtab<pos:position pos:line="4890" pos:column="23"/></name><operator pos:line="4890" pos:column="23">-&gt;<pos:position pos:line="4890" pos:column="28"/></operator><name pos:line="4890" pos:column="25">zErrMsg<pos:position pos:line="4890" pos:column="32"/></name></name></expr>;<pos:position pos:line="4890" pos:column="33"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="4891" pos:column="5">pVtab<pos:position pos:line="4891" pos:column="10"/></name><operator pos:line="4891" pos:column="10">-&gt;<pos:position pos:line="4891" pos:column="15"/></operator><name pos:line="4891" pos:column="12">zErrMsg<pos:position pos:line="4891" pos:column="19"/></name></name> <operator pos:line="4891" pos:column="20">=<pos:position pos:line="4891" pos:column="21"/></operator> <literal type="number" pos:line="4891" pos:column="22">0<pos:position pos:line="4891" pos:column="23"/></literal></expr>;<pos:position pos:line="4891" pos:column="24"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="4892" pos:column="5">sqlite3VtabUnlock<pos:position pos:line="4892" pos:column="22"/></name><argument_list pos:line="4892" pos:column="22">(<argument><expr><name pos:line="4892" pos:column="23">db<pos:position pos:line="4892" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="4892" pos:column="27">pVtab<pos:position pos:line="4892" pos:column="32"/></name></expr></argument>)<pos:position pos:line="4892" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="4892" pos:column="34"/></expr_stmt>
    <if pos:line="4893" pos:column="5">if<condition pos:line="4893" pos:column="7">( <expr><call><name pos:line="4893" pos:column="9">sqlite3SafetyOn<pos:position pos:line="4893" pos:column="24"/></name><argument_list pos:line="4893" pos:column="24">(<argument><expr><name pos:line="4893" pos:column="25">db<pos:position pos:line="4893" pos:column="27"/></name></expr></argument>)<pos:position pos:line="4893" pos:column="28"/></argument_list></call></expr> )<pos:position pos:line="4893" pos:column="30"/></condition><then pos:line="4893" pos:column="30"> <block type="pseudo"><goto pos:line="4893" pos:column="31">goto <name pos:line="4893" pos:column="36">abort_due_to_misuse<pos:position pos:line="4893" pos:column="55"/></name>;<pos:position pos:line="4893" pos:column="56"/></goto></block></then></if>
    <if pos:line="4894" pos:column="5">if<condition pos:line="4894" pos:column="7">( <expr><name><name pos:line="4894" pos:column="9">pOp<pos:position pos:line="4894" pos:column="12"/></name><operator pos:line="4894" pos:column="12">-&gt;<pos:position pos:line="4894" pos:column="17"/></operator><name pos:line="4894" pos:column="14">p1<pos:position pos:line="4894" pos:column="16"/></name></name> <operator pos:line="4894" pos:column="17">&amp;&amp;<pos:position pos:line="4894" pos:column="27"/></operator> <name pos:line="4894" pos:column="20">rc<pos:position pos:line="4894" pos:column="22"/></name><operator pos:line="4894" pos:column="22">==<pos:position pos:line="4894" pos:column="24"/></operator><name pos:line="4894" pos:column="24">SQLITE_OK<pos:position pos:line="4894" pos:column="33"/></name></expr> )<pos:position pos:line="4894" pos:column="35"/></condition><then><block pos:line="4894" pos:column="35">{
      <expr_stmt><expr><call><name pos:line="4895" pos:column="7">assert<pos:position pos:line="4895" pos:column="13"/></name><argument_list pos:line="4895" pos:column="13">( <argument><expr><name pos:line="4895" pos:column="15">nArg<pos:position pos:line="4895" pos:column="19"/></name><operator pos:line="4895" pos:column="19">&gt;<pos:position pos:line="4895" pos:column="23"/></operator><literal type="number" pos:line="4895" pos:column="20">1<pos:position pos:line="4895" pos:column="21"/></literal> <operator pos:line="4895" pos:column="22">&amp;&amp;<pos:position pos:line="4895" pos:column="32"/></operator> <name><name pos:line="4895" pos:column="25">apArg<pos:position pos:line="4895" pos:column="30"/></name><index pos:line="4895" pos:column="30">[<expr><literal type="number" pos:line="4895" pos:column="31">0<pos:position pos:line="4895" pos:column="32"/></literal></expr>]<pos:position pos:line="4895" pos:column="33"/></index></name> <operator pos:line="4895" pos:column="34">&amp;&amp;<pos:position pos:line="4895" pos:column="44"/></operator> <operator pos:line="4895" pos:column="37">(<pos:position pos:line="4895" pos:column="38"/></operator><name><name pos:line="4895" pos:column="38">apArg<pos:position pos:line="4895" pos:column="43"/></name><index pos:line="4895" pos:column="43">[<expr><literal type="number" pos:line="4895" pos:column="44">0<pos:position pos:line="4895" pos:column="45"/></literal></expr>]<pos:position pos:line="4895" pos:column="46"/></index></name><operator pos:line="4895" pos:column="46">-&gt;<pos:position pos:line="4895" pos:column="51"/></operator><name pos:line="4895" pos:column="48">flags<pos:position pos:line="4895" pos:column="53"/></name><operator pos:line="4895" pos:column="53">&amp;<pos:position pos:line="4895" pos:column="58"/></operator><name pos:line="4895" pos:column="54">MEM_Null<pos:position pos:line="4895" pos:column="62"/></name><operator pos:line="4895" pos:column="62">)<pos:position pos:line="4895" pos:column="63"/></operator></expr></argument> )<pos:position pos:line="4895" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="4895" pos:column="66"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="4896" pos:column="7">db<pos:position pos:line="4896" pos:column="9"/></name><operator pos:line="4896" pos:column="9">-&gt;<pos:position pos:line="4896" pos:column="14"/></operator><name pos:line="4896" pos:column="11">lastRowid<pos:position pos:line="4896" pos:column="20"/></name></name> <operator pos:line="4896" pos:column="21">=<pos:position pos:line="4896" pos:column="22"/></operator> <name pos:line="4896" pos:column="23">rowid<pos:position pos:line="4896" pos:column="28"/></name></expr>;<pos:position pos:line="4896" pos:column="29"/></expr_stmt>
    }<pos:position pos:line="4897" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name><name pos:line="4898" pos:column="5">p<pos:position pos:line="4898" pos:column="6"/></name><operator pos:line="4898" pos:column="6">-&gt;<pos:position pos:line="4898" pos:column="11"/></operator><name pos:line="4898" pos:column="8">nChange<pos:position pos:line="4898" pos:column="15"/></name></name><operator pos:line="4898" pos:column="15">++<pos:position pos:line="4898" pos:column="17"/></operator></expr>;<pos:position pos:line="4898" pos:column="18"/></expr_stmt>
  }<pos:position pos:line="4899" pos:column="4"/></block></else></if>
  <break pos:line="4900" pos:column="3">break;<pos:position pos:line="4900" pos:column="9"/></break>
}<pos:position pos:line="4901" pos:column="2"/></block>
<cpp:endif pos:line="4902" pos:column="1">#<cpp:directive pos:line="4902" pos:column="2">endif<pos:position pos:line="4902" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="4902" pos:column="8">/* SQLITE_OMIT_VIRTUALTABLE */</comment>

<cpp:ifndef pos:line="4904" pos:column="1">#<cpp:directive pos:line="4904" pos:column="2">ifndef<pos:position pos:line="4904" pos:column="8"/></cpp:directive>  <name pos:line="4904" pos:column="10">SQLITE_OMIT_PAGER_PRAGMAS<pos:position pos:line="4904" pos:column="35"/></name></cpp:ifndef>
<comment type="block" pos:line="4905" pos:column="1">/* Opcode: Pagecount P1 P2 * * *
**
** Write the current number of pages in database P1 to memory cell P2.
*/</comment>
<case pos:line="4909" pos:column="1">case <expr><name pos:line="4909" pos:column="6">OP_Pagecount<pos:position pos:line="4909" pos:column="18"/></name></expr>:<pos:position pos:line="4909" pos:column="19"/></case> <block pos:line="4909" pos:column="20">{            <comment type="block" pos:line="4909" pos:column="33">/* out2-prerelease */</comment>
  <decl_stmt><decl><type><name pos:line="4910" pos:column="3">int<pos:position pos:line="4910" pos:column="6"/></name></type> <name pos:line="4910" pos:column="7">p1<pos:position pos:line="4910" pos:column="9"/></name></decl>;<pos:position pos:line="4910" pos:column="10"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4911" pos:column="3">int<pos:position pos:line="4911" pos:column="6"/></name></type> <name pos:line="4911" pos:column="7">nPage<pos:position pos:line="4911" pos:column="12"/></name></decl>;<pos:position pos:line="4911" pos:column="13"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4912" pos:column="3">Pager<pos:position pos:line="4912" pos:column="8"/></name> <modifier pos:line="4912" pos:column="9">*<pos:position pos:line="4912" pos:column="10"/></modifier></type><name pos:line="4912" pos:column="10">pPager<pos:position pos:line="4912" pos:column="16"/></name></decl>;<pos:position pos:line="4912" pos:column="17"/></decl_stmt>

  <expr_stmt><expr><name pos:line="4914" pos:column="3">p1<pos:position pos:line="4914" pos:column="5"/></name> <operator pos:line="4914" pos:column="6">=<pos:position pos:line="4914" pos:column="7"/></operator> <name><name pos:line="4914" pos:column="8">pOp<pos:position pos:line="4914" pos:column="11"/></name><operator pos:line="4914" pos:column="11">-&gt;<pos:position pos:line="4914" pos:column="16"/></operator><name pos:line="4914" pos:column="13">p1<pos:position pos:line="4914" pos:column="15"/></name></name></expr>;<pos:position pos:line="4914" pos:column="16"/></expr_stmt> 
  <expr_stmt><expr><name pos:line="4915" pos:column="3">pPager<pos:position pos:line="4915" pos:column="9"/></name> <operator pos:line="4915" pos:column="10">=<pos:position pos:line="4915" pos:column="11"/></operator> <call><name pos:line="4915" pos:column="12">sqlite3BtreePager<pos:position pos:line="4915" pos:column="29"/></name><argument_list pos:line="4915" pos:column="29">(<argument><expr><name><name pos:line="4915" pos:column="30">db<pos:position pos:line="4915" pos:column="32"/></name><operator pos:line="4915" pos:column="32">-&gt;<pos:position pos:line="4915" pos:column="37"/></operator><name pos:line="4915" pos:column="34">aDb<pos:position pos:line="4915" pos:column="37"/></name><index pos:line="4915" pos:column="37">[<expr><name pos:line="4915" pos:column="38">p1<pos:position pos:line="4915" pos:column="40"/></name></expr>]<pos:position pos:line="4915" pos:column="41"/></index></name><operator pos:line="4915" pos:column="41">.<pos:position pos:line="4915" pos:column="42"/></operator><name pos:line="4915" pos:column="42">pBt<pos:position pos:line="4915" pos:column="45"/></name></expr></argument>)<pos:position pos:line="4915" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="4915" pos:column="47"/></expr_stmt>
  <expr_stmt><expr><name pos:line="4916" pos:column="3">rc<pos:position pos:line="4916" pos:column="5"/></name> <operator pos:line="4916" pos:column="6">=<pos:position pos:line="4916" pos:column="7"/></operator> <call><name pos:line="4916" pos:column="8">sqlite3PagerPagecount<pos:position pos:line="4916" pos:column="29"/></name><argument_list pos:line="4916" pos:column="29">(<argument><expr><name pos:line="4916" pos:column="30">pPager<pos:position pos:line="4916" pos:column="36"/></name></expr></argument>, <argument><expr><operator pos:line="4916" pos:column="38">&amp;<pos:position pos:line="4916" pos:column="43"/></operator><name pos:line="4916" pos:column="39">nPage<pos:position pos:line="4916" pos:column="44"/></name></expr></argument>)<pos:position pos:line="4916" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="4916" pos:column="46"/></expr_stmt>
  <if pos:line="4917" pos:column="3">if<condition pos:line="4917" pos:column="5">( <expr><name pos:line="4917" pos:column="7">rc<pos:position pos:line="4917" pos:column="9"/></name><operator pos:line="4917" pos:column="9">==<pos:position pos:line="4917" pos:column="11"/></operator><name pos:line="4917" pos:column="11">SQLITE_OK<pos:position pos:line="4917" pos:column="20"/></name></expr> )<pos:position pos:line="4917" pos:column="22"/></condition><then><block pos:line="4917" pos:column="22">{
    <expr_stmt><expr><name><name pos:line="4918" pos:column="5">pOut<pos:position pos:line="4918" pos:column="9"/></name><operator pos:line="4918" pos:column="9">-&gt;<pos:position pos:line="4918" pos:column="14"/></operator><name pos:line="4918" pos:column="11">flags<pos:position pos:line="4918" pos:column="16"/></name></name> <operator pos:line="4918" pos:column="17">=<pos:position pos:line="4918" pos:column="18"/></operator> <name pos:line="4918" pos:column="19">MEM_Int<pos:position pos:line="4918" pos:column="26"/></name></expr>;<pos:position pos:line="4918" pos:column="27"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="4919" pos:column="5">pOut<pos:position pos:line="4919" pos:column="9"/></name><operator pos:line="4919" pos:column="9">-&gt;<pos:position pos:line="4919" pos:column="14"/></operator><name pos:line="4919" pos:column="11">u<pos:position pos:line="4919" pos:column="12"/></name><operator pos:line="4919" pos:column="12">.<pos:position pos:line="4919" pos:column="13"/></operator><name pos:line="4919" pos:column="13">i<pos:position pos:line="4919" pos:column="14"/></name></name> <operator pos:line="4919" pos:column="15">=<pos:position pos:line="4919" pos:column="16"/></operator> <name pos:line="4919" pos:column="17">nPage<pos:position pos:line="4919" pos:column="22"/></name></expr>;<pos:position pos:line="4919" pos:column="23"/></expr_stmt>
  }<pos:position pos:line="4920" pos:column="4"/></block></then></if>
  <break pos:line="4921" pos:column="3">break;<pos:position pos:line="4921" pos:column="9"/></break>
}<pos:position pos:line="4922" pos:column="2"/></block>
<cpp:endif pos:line="4923" pos:column="1">#<cpp:directive pos:line="4923" pos:column="2">endif<pos:position pos:line="4923" pos:column="7"/></cpp:directive></cpp:endif>

<cpp:ifndef pos:line="4925" pos:column="1">#<cpp:directive pos:line="4925" pos:column="2">ifndef<pos:position pos:line="4925" pos:column="8"/></cpp:directive> <name pos:line="4925" pos:column="9">SQLITE_OMIT_TRACE<pos:position pos:line="4925" pos:column="26"/></name></cpp:ifndef>
<comment type="block" pos:line="4926" pos:column="1">/* Opcode: Trace * * * P4 *
**
** If tracing is enabled (by the sqlite3_trace()) interface, then
** the UTF-8 string contained in P4 is emitted on the trace callback.
*/</comment>
<case pos:line="4931" pos:column="1">case <expr><name pos:line="4931" pos:column="6">OP_Trace<pos:position pos:line="4931" pos:column="14"/></name></expr>:<pos:position pos:line="4931" pos:column="15"/></case> <block pos:line="4931" pos:column="16">{
  <decl_stmt><decl><type><name pos:line="4932" pos:column="3">char<pos:position pos:line="4932" pos:column="7"/></name> <modifier pos:line="4932" pos:column="8">*<pos:position pos:line="4932" pos:column="9"/></modifier></type><name pos:line="4932" pos:column="9">zTrace<pos:position pos:line="4932" pos:column="15"/></name></decl>;<pos:position pos:line="4932" pos:column="16"/></decl_stmt>

  <expr_stmt><expr><name pos:line="4934" pos:column="3">zTrace<pos:position pos:line="4934" pos:column="9"/></name> <operator pos:line="4934" pos:column="10">=<pos:position pos:line="4934" pos:column="11"/></operator> <operator pos:line="4934" pos:column="12">(<pos:position pos:line="4934" pos:column="13"/></operator><ternary><condition><expr><name><name pos:line="4934" pos:column="13">pOp<pos:position pos:line="4934" pos:column="16"/></name><operator pos:line="4934" pos:column="16">-&gt;<pos:position pos:line="4934" pos:column="21"/></operator><name pos:line="4934" pos:column="18">p4<pos:position pos:line="4934" pos:column="20"/></name><operator pos:line="4934" pos:column="20">.<pos:position pos:line="4934" pos:column="21"/></operator><name pos:line="4934" pos:column="21">z<pos:position pos:line="4934" pos:column="22"/></name></name></expr> ?<pos:position pos:line="4934" pos:column="24"/></condition><then pos:line="4934" pos:column="24"> <expr><name><name pos:line="4934" pos:column="25">pOp<pos:position pos:line="4934" pos:column="28"/></name><operator pos:line="4934" pos:column="28">-&gt;<pos:position pos:line="4934" pos:column="33"/></operator><name pos:line="4934" pos:column="30">p4<pos:position pos:line="4934" pos:column="32"/></name><operator pos:line="4934" pos:column="32">.<pos:position pos:line="4934" pos:column="33"/></operator><name pos:line="4934" pos:column="33">z<pos:position pos:line="4934" pos:column="34"/></name></name></expr> <pos:position pos:line="4934" pos:column="35"/></then><else pos:line="4934" pos:column="35">: <expr><name><name pos:line="4934" pos:column="37">p<pos:position pos:line="4934" pos:column="38"/></name><operator pos:line="4934" pos:column="38">-&gt;<pos:position pos:line="4934" pos:column="43"/></operator><name pos:line="4934" pos:column="40">zSql<pos:position pos:line="4934" pos:column="44"/></name></name></expr></else></ternary><operator pos:line="4934" pos:column="44">)<pos:position pos:line="4934" pos:column="45"/></operator></expr>;<pos:position pos:line="4934" pos:column="46"/></expr_stmt>
  <if pos:line="4935" pos:column="3">if<condition pos:line="4935" pos:column="5">( <expr><name pos:line="4935" pos:column="7">zTrace<pos:position pos:line="4935" pos:column="13"/></name></expr> )<pos:position pos:line="4935" pos:column="15"/></condition><then><block pos:line="4935" pos:column="15">{
    <if pos:line="4936" pos:column="5">if<condition pos:line="4936" pos:column="7">( <expr><name><name pos:line="4936" pos:column="9">db<pos:position pos:line="4936" pos:column="11"/></name><operator pos:line="4936" pos:column="11">-&gt;<pos:position pos:line="4936" pos:column="16"/></operator><name pos:line="4936" pos:column="13">xTrace<pos:position pos:line="4936" pos:column="19"/></name></name></expr> )<pos:position pos:line="4936" pos:column="21"/></condition><then><block pos:line="4936" pos:column="21">{
      <expr_stmt><expr><call><name><name pos:line="4937" pos:column="7">db<pos:position pos:line="4937" pos:column="9"/></name><operator pos:line="4937" pos:column="9">-&gt;<pos:position pos:line="4937" pos:column="14"/></operator><name pos:line="4937" pos:column="11">xTrace<pos:position pos:line="4937" pos:column="17"/></name></name><argument_list pos:line="4937" pos:column="17">(<argument><expr><name><name pos:line="4937" pos:column="18">db<pos:position pos:line="4937" pos:column="20"/></name><operator pos:line="4937" pos:column="20">-&gt;<pos:position pos:line="4937" pos:column="25"/></operator><name pos:line="4937" pos:column="22">pTraceArg<pos:position pos:line="4937" pos:column="31"/></name></name></expr></argument>, <argument><expr><name pos:line="4937" pos:column="33">zTrace<pos:position pos:line="4937" pos:column="39"/></name></expr></argument>)<pos:position pos:line="4937" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="4937" pos:column="41"/></expr_stmt>
    }<pos:position pos:line="4938" pos:column="6"/></block></then></if>
<cpp:ifdef pos:line="4939" pos:column="1">#<cpp:directive pos:line="4939" pos:column="2">ifdef<pos:position pos:line="4939" pos:column="7"/></cpp:directive> <name pos:line="4939" pos:column="8">SQLITE_DEBUG<pos:position pos:line="4939" pos:column="20"/></name></cpp:ifdef>
    <if pos:line="4940" pos:column="5">if<condition pos:line="4940" pos:column="7">( <expr><operator pos:line="4940" pos:column="9">(<pos:position pos:line="4940" pos:column="10"/></operator><name><name pos:line="4940" pos:column="10">db<pos:position pos:line="4940" pos:column="12"/></name><operator pos:line="4940" pos:column="12">-&gt;<pos:position pos:line="4940" pos:column="17"/></operator><name pos:line="4940" pos:column="14">flags<pos:position pos:line="4940" pos:column="19"/></name></name> <operator pos:line="4940" pos:column="20">&amp;<pos:position pos:line="4940" pos:column="25"/></operator> <name pos:line="4940" pos:column="22">SQLITE_SqlTrace<pos:position pos:line="4940" pos:column="37"/></name><operator pos:line="4940" pos:column="37">)<pos:position pos:line="4940" pos:column="38"/></operator><operator pos:line="4940" pos:column="38">!=<pos:position pos:line="4940" pos:column="40"/></operator><literal type="number" pos:line="4940" pos:column="40">0<pos:position pos:line="4940" pos:column="41"/></literal></expr> )<pos:position pos:line="4940" pos:column="43"/></condition><then><block pos:line="4940" pos:column="43">{
      <expr_stmt><expr><call><name pos:line="4941" pos:column="7">sqlite3DebugPrintf<pos:position pos:line="4941" pos:column="25"/></name><argument_list pos:line="4941" pos:column="25">(<argument><expr><literal type="string" pos:line="4941" pos:column="26">"SQL-trace: %s\n"<pos:position pos:line="4941" pos:column="43"/></literal></expr></argument>, <argument><expr><name pos:line="4941" pos:column="45">zTrace<pos:position pos:line="4941" pos:column="51"/></name></expr></argument>)<pos:position pos:line="4941" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="4941" pos:column="53"/></expr_stmt>
    }<pos:position pos:line="4942" pos:column="6"/></block></then></if>
<cpp:endif pos:line="4943" pos:column="1">#<cpp:directive pos:line="4943" pos:column="2">endif<pos:position pos:line="4943" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="4943" pos:column="8">/* SQLITE_DEBUG */</comment>
  }<pos:position pos:line="4944" pos:column="4"/></block></then></if>
  <break pos:line="4945" pos:column="3">break;<pos:position pos:line="4945" pos:column="9"/></break>
}<pos:position pos:line="4946" pos:column="2"/></block>
<cpp:endif pos:line="4947" pos:column="1">#<cpp:directive pos:line="4947" pos:column="2">endif<pos:position pos:line="4947" pos:column="7"/></cpp:directive></cpp:endif>


<comment type="block" pos:line="4950" pos:column="1">/* Opcode: Noop * * * * *
**
** Do nothing.  This instruction is often useful as a jump
** destination.
*/</comment>
<comment type="block" pos:line="4955" pos:column="1">/*
** The magic Explain opcode are only inserted when explain==2 (which
** is to say when the EXPLAIN QUERY PLAN syntax is used.)
** This opcode records information from the optimizer.  It is the
** the same as a no-op.  This opcodesnever appears in a real VM program.
*/</comment>
<default pos:line="4961" pos:column="1">default:<pos:position pos:line="4961" pos:column="9"/></default> <block pos:line="4961" pos:column="10">{          <comment type="block" pos:line="4961" pos:column="21">/* This is really OP_Noop and OP_Explain */</comment>
  <break pos:line="4962" pos:column="3">break;<pos:position pos:line="4962" pos:column="9"/></break>
}<pos:position pos:line="4963" pos:column="2"/></block>

<comment type="block" format="doxygen" pos:line="4965" pos:column="1">/*****************************************************************************
** The cases of the switch statement above this line should all be indented
** by 6 spaces.  But the left-most 6 spaces have been removed to improve the
** readability.  From this point on down, the normal indentation rules are
** restored.
*****************************************************************************/</comment>
    }<pos:position pos:line="4971" pos:column="6"/></block></switch>

<cpp:ifdef pos:line="4973" pos:column="1">#<cpp:directive pos:line="4973" pos:column="2">ifdef<pos:position pos:line="4973" pos:column="7"/></cpp:directive> <name pos:line="4973" pos:column="8">VDBE_PROFILE<pos:position pos:line="4973" pos:column="20"/></name></cpp:ifdef>
    <block pos:line="4974" pos:column="5">{
      <decl_stmt><decl><type><name pos:line="4975" pos:column="7">u64<pos:position pos:line="4975" pos:column="10"/></name></type> <name pos:line="4975" pos:column="11">elapsed<pos:position pos:line="4975" pos:column="18"/></name> <init pos:line="4975" pos:column="19">= <expr><call><name pos:line="4975" pos:column="21">sqlite3Hwtime<pos:position pos:line="4975" pos:column="34"/></name><argument_list pos:line="4975" pos:column="34">()<pos:position pos:line="4975" pos:column="36"/></argument_list></call> <operator pos:line="4975" pos:column="37">-<pos:position pos:line="4975" pos:column="38"/></operator> <name pos:line="4975" pos:column="39">start<pos:position pos:line="4975" pos:column="44"/></name></expr></init></decl>;<pos:position pos:line="4975" pos:column="45"/></decl_stmt>
      <expr_stmt><expr><name><name pos:line="4976" pos:column="7">pOp<pos:position pos:line="4976" pos:column="10"/></name><operator pos:line="4976" pos:column="10">-&gt;<pos:position pos:line="4976" pos:column="15"/></operator><name pos:line="4976" pos:column="12">cycles<pos:position pos:line="4976" pos:column="18"/></name></name> <operator pos:line="4976" pos:column="19">+=<pos:position pos:line="4976" pos:column="21"/></operator> <name pos:line="4976" pos:column="22">elapsed<pos:position pos:line="4976" pos:column="29"/></name></expr>;<pos:position pos:line="4976" pos:column="30"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="4977" pos:column="7">pOp<pos:position pos:line="4977" pos:column="10"/></name><operator pos:line="4977" pos:column="10">-&gt;<pos:position pos:line="4977" pos:column="15"/></operator><name pos:line="4977" pos:column="12">cnt<pos:position pos:line="4977" pos:column="15"/></name></name><operator pos:line="4977" pos:column="15">++<pos:position pos:line="4977" pos:column="17"/></operator></expr>;<pos:position pos:line="4977" pos:column="18"/></expr_stmt>
<cpp:if pos:line="4978" pos:column="1">#<cpp:directive pos:line="4978" pos:column="2">if<pos:position pos:line="4978" pos:column="4"/></cpp:directive> <expr><literal type="number" pos:line="4978" pos:column="5">0<pos:position pos:line="4978" pos:column="6"/></literal></expr></cpp:if>
        fprintf(stdout, "%10llu ", elapsed);
        sqlite3VdbePrintOp(stdout, origPc, &amp;p-&gt;aOp[origPc]);
<cpp:endif pos:line="4981" pos:column="1">#<cpp:directive pos:line="4981" pos:column="2">endif<pos:position pos:line="4981" pos:column="7"/></cpp:directive></cpp:endif>
    }<pos:position pos:line="4982" pos:column="6"/></block>
<cpp:endif pos:line="4983" pos:column="1">#<cpp:directive pos:line="4983" pos:column="2">endif<pos:position pos:line="4983" pos:column="7"/></cpp:directive></cpp:endif>

    <comment type="block" pos:line="4985" pos:column="5">/* The following code adds nothing to the actual functionality
    ** of the program.  It is only here for testing and debugging.
    ** On the other hand, it does burn CPU cycles every time through
    ** the evaluator loop.  So we can leave it out when NDEBUG is defined.
    */</comment>
<cpp:ifndef pos:line="4990" pos:column="1">#<cpp:directive pos:line="4990" pos:column="2">ifndef<pos:position pos:line="4990" pos:column="8"/></cpp:directive> <name pos:line="4990" pos:column="9">NDEBUG<pos:position pos:line="4990" pos:column="15"/></name></cpp:ifndef>
    <expr_stmt><expr><call><name pos:line="4991" pos:column="5">assert<pos:position pos:line="4991" pos:column="11"/></name><argument_list pos:line="4991" pos:column="11">( <argument><expr><name pos:line="4991" pos:column="13">pc<pos:position pos:line="4991" pos:column="15"/></name><operator pos:line="4991" pos:column="15">&gt;=<pos:position pos:line="4991" pos:column="20"/></operator><operator pos:line="4991" pos:column="17">-<pos:position pos:line="4991" pos:column="18"/></operator><literal type="number" pos:line="4991" pos:column="18">1<pos:position pos:line="4991" pos:column="19"/></literal> <operator pos:line="4991" pos:column="20">&amp;&amp;<pos:position pos:line="4991" pos:column="30"/></operator> <name pos:line="4991" pos:column="23">pc<pos:position pos:line="4991" pos:column="25"/></name><operator pos:line="4991" pos:column="25">&lt;<pos:position pos:line="4991" pos:column="29"/></operator><name><name pos:line="4991" pos:column="26">p<pos:position pos:line="4991" pos:column="27"/></name><operator pos:line="4991" pos:column="27">-&gt;<pos:position pos:line="4991" pos:column="32"/></operator><name pos:line="4991" pos:column="29">nOp<pos:position pos:line="4991" pos:column="32"/></name></name></expr></argument> )<pos:position pos:line="4991" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="4991" pos:column="35"/></expr_stmt>

<cpp:ifdef pos:line="4993" pos:column="1">#<cpp:directive pos:line="4993" pos:column="2">ifdef<pos:position pos:line="4993" pos:column="7"/></cpp:directive> <name pos:line="4993" pos:column="8">SQLITE_DEBUG<pos:position pos:line="4993" pos:column="20"/></name></cpp:ifdef>
    <if pos:line="4994" pos:column="5">if<condition pos:line="4994" pos:column="7">( <expr><name><name pos:line="4994" pos:column="9">p<pos:position pos:line="4994" pos:column="10"/></name><operator pos:line="4994" pos:column="10">-&gt;<pos:position pos:line="4994" pos:column="15"/></operator><name pos:line="4994" pos:column="12">trace<pos:position pos:line="4994" pos:column="17"/></name></name></expr> )<pos:position pos:line="4994" pos:column="19"/></condition><then><block pos:line="4994" pos:column="19">{
      <if pos:line="4995" pos:column="7">if<condition pos:line="4995" pos:column="9">( <expr><name pos:line="4995" pos:column="11">rc<pos:position pos:line="4995" pos:column="13"/></name><operator pos:line="4995" pos:column="13">!=<pos:position pos:line="4995" pos:column="15"/></operator><literal type="number" pos:line="4995" pos:column="15">0<pos:position pos:line="4995" pos:column="16"/></literal></expr> )<pos:position pos:line="4995" pos:column="18"/></condition><then pos:line="4995" pos:column="18"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="4995" pos:column="19">fprintf<pos:position pos:line="4995" pos:column="26"/></name><argument_list pos:line="4995" pos:column="26">(<argument><expr><name><name pos:line="4995" pos:column="27">p<pos:position pos:line="4995" pos:column="28"/></name><operator pos:line="4995" pos:column="28">-&gt;<pos:position pos:line="4995" pos:column="33"/></operator><name pos:line="4995" pos:column="30">trace<pos:position pos:line="4995" pos:column="35"/></name></name></expr></argument>,<argument><expr><literal type="string" pos:line="4995" pos:column="36">"rc=%d\n"<pos:position pos:line="4995" pos:column="45"/></literal></expr></argument>,<argument><expr><name pos:line="4995" pos:column="46">rc<pos:position pos:line="4995" pos:column="48"/></name></expr></argument>)<pos:position pos:line="4995" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="4995" pos:column="50"/></expr_stmt></block></then></if>
      <if pos:line="4996" pos:column="7">if<condition pos:line="4996" pos:column="9">( <expr><name pos:line="4996" pos:column="11">opProperty<pos:position pos:line="4996" pos:column="21"/></name> <operator pos:line="4996" pos:column="22">&amp;<pos:position pos:line="4996" pos:column="27"/></operator> <name pos:line="4996" pos:column="24">OPFLG_OUT2_PRERELEASE<pos:position pos:line="4996" pos:column="45"/></name></expr> )<pos:position pos:line="4996" pos:column="47"/></condition><then><block pos:line="4996" pos:column="47">{
        <expr_stmt><expr><call><name pos:line="4997" pos:column="9">registerTrace<pos:position pos:line="4997" pos:column="22"/></name><argument_list pos:line="4997" pos:column="22">(<argument><expr><name><name pos:line="4997" pos:column="23">p<pos:position pos:line="4997" pos:column="24"/></name><operator pos:line="4997" pos:column="24">-&gt;<pos:position pos:line="4997" pos:column="29"/></operator><name pos:line="4997" pos:column="26">trace<pos:position pos:line="4997" pos:column="31"/></name></name></expr></argument>, <argument><expr><name><name pos:line="4997" pos:column="33">pOp<pos:position pos:line="4997" pos:column="36"/></name><operator pos:line="4997" pos:column="36">-&gt;<pos:position pos:line="4997" pos:column="41"/></operator><name pos:line="4997" pos:column="38">p2<pos:position pos:line="4997" pos:column="40"/></name></name></expr></argument>, <argument><expr><name pos:line="4997" pos:column="42">pOut<pos:position pos:line="4997" pos:column="46"/></name></expr></argument>)<pos:position pos:line="4997" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="4997" pos:column="48"/></expr_stmt>
      }<pos:position pos:line="4998" pos:column="8"/></block></then></if>
      <if pos:line="4999" pos:column="7">if<condition pos:line="4999" pos:column="9">( <expr><name pos:line="4999" pos:column="11">opProperty<pos:position pos:line="4999" pos:column="21"/></name> <operator pos:line="4999" pos:column="22">&amp;<pos:position pos:line="4999" pos:column="27"/></operator> <name pos:line="4999" pos:column="24">OPFLG_OUT3<pos:position pos:line="4999" pos:column="34"/></name></expr> )<pos:position pos:line="4999" pos:column="36"/></condition><then><block pos:line="4999" pos:column="36">{
        <expr_stmt><expr><call><name pos:line="5000" pos:column="9">registerTrace<pos:position pos:line="5000" pos:column="22"/></name><argument_list pos:line="5000" pos:column="22">(<argument><expr><name><name pos:line="5000" pos:column="23">p<pos:position pos:line="5000" pos:column="24"/></name><operator pos:line="5000" pos:column="24">-&gt;<pos:position pos:line="5000" pos:column="29"/></operator><name pos:line="5000" pos:column="26">trace<pos:position pos:line="5000" pos:column="31"/></name></name></expr></argument>, <argument><expr><name><name pos:line="5000" pos:column="33">pOp<pos:position pos:line="5000" pos:column="36"/></name><operator pos:line="5000" pos:column="36">-&gt;<pos:position pos:line="5000" pos:column="41"/></operator><name pos:line="5000" pos:column="38">p3<pos:position pos:line="5000" pos:column="40"/></name></name></expr></argument>, <argument><expr><name pos:line="5000" pos:column="42">pOut<pos:position pos:line="5000" pos:column="46"/></name></expr></argument>)<pos:position pos:line="5000" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="5000" pos:column="48"/></expr_stmt>
      }<pos:position pos:line="5001" pos:column="8"/></block></then></if>
    }<pos:position pos:line="5002" pos:column="6"/></block></then></if>
<cpp:endif pos:line="5003" pos:column="1">#<cpp:directive pos:line="5003" pos:column="2">endif<pos:position pos:line="5003" pos:column="7"/></cpp:directive></cpp:endif>  <comment type="block" pos:line="5003" pos:column="9">/* SQLITE_DEBUG */</comment>
<cpp:endif pos:line="5004" pos:column="1">#<cpp:directive pos:line="5004" pos:column="2">endif<pos:position pos:line="5004" pos:column="7"/></cpp:directive></cpp:endif>  <comment type="block" pos:line="5004" pos:column="9">/* NDEBUG */</comment>
  }<pos:position pos:line="5005" pos:column="4"/></block></for>  <comment type="block" pos:line="5005" pos:column="6">/* The end of the for(;;) loop the loops through opcodes */</comment>

  <comment type="block" pos:line="5007" pos:column="3">/* If we reach this point, it means that execution is finished with
  ** an error of some kind.
  */</comment>
<label><name pos:line="5010" pos:column="1">vdbe_error_halt<pos:position pos:line="5010" pos:column="16"/></name>:<pos:position pos:line="5010" pos:column="17"/></label>
  <expr_stmt><expr><call><name pos:line="5011" pos:column="3">assert<pos:position pos:line="5011" pos:column="9"/></name><argument_list pos:line="5011" pos:column="9">( <argument><expr><name pos:line="5011" pos:column="11">rc<pos:position pos:line="5011" pos:column="13"/></name></expr></argument> )<pos:position pos:line="5011" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="5011" pos:column="16"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="5012" pos:column="3">p<pos:position pos:line="5012" pos:column="4"/></name><operator pos:line="5012" pos:column="4">-&gt;<pos:position pos:line="5012" pos:column="9"/></operator><name pos:line="5012" pos:column="6">rc<pos:position pos:line="5012" pos:column="8"/></name></name> <operator pos:line="5012" pos:column="9">=<pos:position pos:line="5012" pos:column="10"/></operator> <name pos:line="5012" pos:column="11">rc<pos:position pos:line="5012" pos:column="13"/></name></expr>;<pos:position pos:line="5012" pos:column="14"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="5013" pos:column="3">sqlite3VdbeHalt<pos:position pos:line="5013" pos:column="18"/></name><argument_list pos:line="5013" pos:column="18">(<argument><expr><name pos:line="5013" pos:column="19">p<pos:position pos:line="5013" pos:column="20"/></name></expr></argument>)<pos:position pos:line="5013" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="5013" pos:column="22"/></expr_stmt>
  <if pos:line="5014" pos:column="3">if<condition pos:line="5014" pos:column="5">( <expr><name pos:line="5014" pos:column="7">rc<pos:position pos:line="5014" pos:column="9"/></name><operator pos:line="5014" pos:column="9">==<pos:position pos:line="5014" pos:column="11"/></operator><name pos:line="5014" pos:column="11">SQLITE_IOERR_NOMEM<pos:position pos:line="5014" pos:column="29"/></name></expr> )<pos:position pos:line="5014" pos:column="31"/></condition><then pos:line="5014" pos:column="31"> <block type="pseudo"><expr_stmt><expr><name><name pos:line="5014" pos:column="32">db<pos:position pos:line="5014" pos:column="34"/></name><operator pos:line="5014" pos:column="34">-&gt;<pos:position pos:line="5014" pos:column="39"/></operator><name pos:line="5014" pos:column="36">mallocFailed<pos:position pos:line="5014" pos:column="48"/></name></name> <operator pos:line="5014" pos:column="49">=<pos:position pos:line="5014" pos:column="50"/></operator> <literal type="number" pos:line="5014" pos:column="51">1<pos:position pos:line="5014" pos:column="52"/></literal></expr>;<pos:position pos:line="5014" pos:column="53"/></expr_stmt></block></then></if>
  <expr_stmt><expr><name pos:line="5015" pos:column="3">rc<pos:position pos:line="5015" pos:column="5"/></name> <operator pos:line="5015" pos:column="6">=<pos:position pos:line="5015" pos:column="7"/></operator> <name pos:line="5015" pos:column="8">SQLITE_ERROR<pos:position pos:line="5015" pos:column="20"/></name></expr>;<pos:position pos:line="5015" pos:column="21"/></expr_stmt>

  <comment type="block" pos:line="5017" pos:column="3">/* This is the only way out of this procedure.  We have to
  ** release the mutexes on btrees that were acquired at the
  ** top. */</comment>
<label><name pos:line="5020" pos:column="1">vdbe_return<pos:position pos:line="5020" pos:column="12"/></name>:<pos:position pos:line="5020" pos:column="13"/></label>
  <expr_stmt><expr><call><name pos:line="5021" pos:column="3">sqlite3BtreeMutexArrayLeave<pos:position pos:line="5021" pos:column="30"/></name><argument_list pos:line="5021" pos:column="30">(<argument><expr><operator pos:line="5021" pos:column="31">&amp;<pos:position pos:line="5021" pos:column="36"/></operator><name><name pos:line="5021" pos:column="32">p<pos:position pos:line="5021" pos:column="33"/></name><operator pos:line="5021" pos:column="33">-&gt;<pos:position pos:line="5021" pos:column="38"/></operator><name pos:line="5021" pos:column="35">aMutex<pos:position pos:line="5021" pos:column="41"/></name></name></expr></argument>)<pos:position pos:line="5021" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="5021" pos:column="43"/></expr_stmt>
  <return pos:line="5022" pos:column="3">return <expr><name pos:line="5022" pos:column="10">rc<pos:position pos:line="5022" pos:column="12"/></name></expr>;<pos:position pos:line="5022" pos:column="13"/></return>

  <comment type="block" pos:line="5024" pos:column="3">/* Jump to here if a string or blob larger than SQLITE_MAX_LENGTH
  ** is encountered.
  */</comment>
<label><name pos:line="5027" pos:column="1">too_big<pos:position pos:line="5027" pos:column="8"/></name>:<pos:position pos:line="5027" pos:column="9"/></label>
  <expr_stmt><expr><call><name pos:line="5028" pos:column="3">sqlite3SetString<pos:position pos:line="5028" pos:column="19"/></name><argument_list pos:line="5028" pos:column="19">(<argument><expr><operator pos:line="5028" pos:column="20">&amp;<pos:position pos:line="5028" pos:column="25"/></operator><name><name pos:line="5028" pos:column="21">p<pos:position pos:line="5028" pos:column="22"/></name><operator pos:line="5028" pos:column="22">-&gt;<pos:position pos:line="5028" pos:column="27"/></operator><name pos:line="5028" pos:column="24">zErrMsg<pos:position pos:line="5028" pos:column="31"/></name></name></expr></argument>, <argument><expr><name pos:line="5028" pos:column="33">db<pos:position pos:line="5028" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="5028" pos:column="37">"string or blob too big"<pos:position pos:line="5028" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="5028" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="5028" pos:column="63"/></expr_stmt>
  <expr_stmt><expr><name pos:line="5029" pos:column="3">rc<pos:position pos:line="5029" pos:column="5"/></name> <operator pos:line="5029" pos:column="6">=<pos:position pos:line="5029" pos:column="7"/></operator> <name pos:line="5029" pos:column="8">SQLITE_TOOBIG<pos:position pos:line="5029" pos:column="21"/></name></expr>;<pos:position pos:line="5029" pos:column="22"/></expr_stmt>
  <goto pos:line="5030" pos:column="3">goto <name pos:line="5030" pos:column="8">vdbe_error_halt<pos:position pos:line="5030" pos:column="23"/></name>;<pos:position pos:line="5030" pos:column="24"/></goto>

  <comment type="block" pos:line="5032" pos:column="3">/* Jump to here if a malloc() fails.
  */</comment>
<label><name pos:line="5034" pos:column="1">no_mem<pos:position pos:line="5034" pos:column="7"/></name>:<pos:position pos:line="5034" pos:column="8"/></label>
  <expr_stmt><expr><name><name pos:line="5035" pos:column="3">db<pos:position pos:line="5035" pos:column="5"/></name><operator pos:line="5035" pos:column="5">-&gt;<pos:position pos:line="5035" pos:column="10"/></operator><name pos:line="5035" pos:column="7">mallocFailed<pos:position pos:line="5035" pos:column="19"/></name></name> <operator pos:line="5035" pos:column="20">=<pos:position pos:line="5035" pos:column="21"/></operator> <literal type="number" pos:line="5035" pos:column="22">1<pos:position pos:line="5035" pos:column="23"/></literal></expr>;<pos:position pos:line="5035" pos:column="24"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="5036" pos:column="3">sqlite3SetString<pos:position pos:line="5036" pos:column="19"/></name><argument_list pos:line="5036" pos:column="19">(<argument><expr><operator pos:line="5036" pos:column="20">&amp;<pos:position pos:line="5036" pos:column="25"/></operator><name><name pos:line="5036" pos:column="21">p<pos:position pos:line="5036" pos:column="22"/></name><operator pos:line="5036" pos:column="22">-&gt;<pos:position pos:line="5036" pos:column="27"/></operator><name pos:line="5036" pos:column="24">zErrMsg<pos:position pos:line="5036" pos:column="31"/></name></name></expr></argument>, <argument><expr><name pos:line="5036" pos:column="33">db<pos:position pos:line="5036" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="5036" pos:column="37">"out of memory"<pos:position pos:line="5036" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="5036" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="5036" pos:column="54"/></expr_stmt>
  <expr_stmt><expr><name pos:line="5037" pos:column="3">rc<pos:position pos:line="5037" pos:column="5"/></name> <operator pos:line="5037" pos:column="6">=<pos:position pos:line="5037" pos:column="7"/></operator> <name pos:line="5037" pos:column="8">SQLITE_NOMEM<pos:position pos:line="5037" pos:column="20"/></name></expr>;<pos:position pos:line="5037" pos:column="21"/></expr_stmt>
  <goto pos:line="5038" pos:column="3">goto <name pos:line="5038" pos:column="8">vdbe_error_halt<pos:position pos:line="5038" pos:column="23"/></name>;<pos:position pos:line="5038" pos:column="24"/></goto>

  <comment type="block" pos:line="5040" pos:column="3">/* Jump to here for an SQLITE_MISUSE error.
  */</comment>
<label><name pos:line="5042" pos:column="1">abort_due_to_misuse<pos:position pos:line="5042" pos:column="20"/></name>:<pos:position pos:line="5042" pos:column="21"/></label>
  <expr_stmt><expr><name pos:line="5043" pos:column="3">rc<pos:position pos:line="5043" pos:column="5"/></name> <operator pos:line="5043" pos:column="6">=<pos:position pos:line="5043" pos:column="7"/></operator> <name pos:line="5043" pos:column="8">SQLITE_MISUSE<pos:position pos:line="5043" pos:column="21"/></name></expr>;<pos:position pos:line="5043" pos:column="22"/></expr_stmt>
  <comment type="block" pos:line="5044" pos:column="3">/* Fall thru into abort_due_to_error */</comment>

  <comment type="block" pos:line="5046" pos:column="3">/* Jump to here for any other kind of fatal error.  The "rc" variable
  ** should hold the error number.
  */</comment>
<label><name pos:line="5049" pos:column="1">abort_due_to_error<pos:position pos:line="5049" pos:column="19"/></name>:<pos:position pos:line="5049" pos:column="20"/></label>
  <expr_stmt><expr><call><name pos:line="5050" pos:column="3">assert<pos:position pos:line="5050" pos:column="9"/></name><argument_list pos:line="5050" pos:column="9">( <argument><expr><name><name pos:line="5050" pos:column="11">p<pos:position pos:line="5050" pos:column="12"/></name><operator pos:line="5050" pos:column="12">-&gt;<pos:position pos:line="5050" pos:column="17"/></operator><name pos:line="5050" pos:column="14">zErrMsg<pos:position pos:line="5050" pos:column="21"/></name></name><operator pos:line="5050" pos:column="21">==<pos:position pos:line="5050" pos:column="23"/></operator><literal type="number" pos:line="5050" pos:column="23">0<pos:position pos:line="5050" pos:column="24"/></literal></expr></argument> )<pos:position pos:line="5050" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="5050" pos:column="27"/></expr_stmt>
  <if pos:line="5051" pos:column="3">if<condition pos:line="5051" pos:column="5">( <expr><name><name pos:line="5051" pos:column="7">db<pos:position pos:line="5051" pos:column="9"/></name><operator pos:line="5051" pos:column="9">-&gt;<pos:position pos:line="5051" pos:column="14"/></operator><name pos:line="5051" pos:column="11">mallocFailed<pos:position pos:line="5051" pos:column="23"/></name></name></expr> )<pos:position pos:line="5051" pos:column="25"/></condition><then pos:line="5051" pos:column="25"> <block type="pseudo"><expr_stmt><expr><name pos:line="5051" pos:column="26">rc<pos:position pos:line="5051" pos:column="28"/></name> <operator pos:line="5051" pos:column="29">=<pos:position pos:line="5051" pos:column="30"/></operator> <name pos:line="5051" pos:column="31">SQLITE_NOMEM<pos:position pos:line="5051" pos:column="43"/></name></expr>;<pos:position pos:line="5051" pos:column="44"/></expr_stmt></block></then></if>
  <if pos:line="5052" pos:column="3">if<condition pos:line="5052" pos:column="5">( <expr><name pos:line="5052" pos:column="7">rc<pos:position pos:line="5052" pos:column="9"/></name><operator pos:line="5052" pos:column="9">!=<pos:position pos:line="5052" pos:column="11"/></operator><name pos:line="5052" pos:column="11">SQLITE_IOERR_NOMEM<pos:position pos:line="5052" pos:column="29"/></name></expr> )<pos:position pos:line="5052" pos:column="31"/></condition><then><block pos:line="5052" pos:column="31">{
    <expr_stmt><expr><call><name pos:line="5053" pos:column="5">sqlite3SetString<pos:position pos:line="5053" pos:column="21"/></name><argument_list pos:line="5053" pos:column="21">(<argument><expr><operator pos:line="5053" pos:column="22">&amp;<pos:position pos:line="5053" pos:column="27"/></operator><name><name pos:line="5053" pos:column="23">p<pos:position pos:line="5053" pos:column="24"/></name><operator pos:line="5053" pos:column="24">-&gt;<pos:position pos:line="5053" pos:column="29"/></operator><name pos:line="5053" pos:column="26">zErrMsg<pos:position pos:line="5053" pos:column="33"/></name></name></expr></argument>, <argument><expr><name pos:line="5053" pos:column="35">db<pos:position pos:line="5053" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="5053" pos:column="39">"%s"<pos:position pos:line="5053" pos:column="43"/></literal></expr></argument>, <argument><expr><call><name pos:line="5053" pos:column="45">sqlite3ErrStr<pos:position pos:line="5053" pos:column="58"/></name><argument_list pos:line="5053" pos:column="58">(<argument><expr><name pos:line="5053" pos:column="59">rc<pos:position pos:line="5053" pos:column="61"/></name></expr></argument>)<pos:position pos:line="5053" pos:column="62"/></argument_list></call></expr></argument>)<pos:position pos:line="5053" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="5053" pos:column="64"/></expr_stmt>
  }<pos:position pos:line="5054" pos:column="4"/></block></then></if>
  <goto pos:line="5055" pos:column="3">goto <name pos:line="5055" pos:column="8">vdbe_error_halt<pos:position pos:line="5055" pos:column="23"/></name>;<pos:position pos:line="5055" pos:column="24"/></goto>

  <comment type="block" pos:line="5057" pos:column="3">/* Jump to here if the sqlite3_interrupt() API sets the interrupt
  ** flag.
  */</comment>
<label><name pos:line="5060" pos:column="1">abort_due_to_interrupt<pos:position pos:line="5060" pos:column="23"/></name>:<pos:position pos:line="5060" pos:column="24"/></label>
  <expr_stmt><expr><call><name pos:line="5061" pos:column="3">assert<pos:position pos:line="5061" pos:column="9"/></name><argument_list pos:line="5061" pos:column="9">( <argument><expr><name><name pos:line="5061" pos:column="11">db<pos:position pos:line="5061" pos:column="13"/></name><operator pos:line="5061" pos:column="13">-&gt;<pos:position pos:line="5061" pos:column="18"/></operator><name pos:line="5061" pos:column="15">u1<pos:position pos:line="5061" pos:column="17"/></name><operator pos:line="5061" pos:column="17">.<pos:position pos:line="5061" pos:column="18"/></operator><name pos:line="5061" pos:column="18">isInterrupted<pos:position pos:line="5061" pos:column="31"/></name></name></expr></argument> )<pos:position pos:line="5061" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="5061" pos:column="34"/></expr_stmt>
  <expr_stmt><expr><name pos:line="5062" pos:column="3">rc<pos:position pos:line="5062" pos:column="5"/></name> <operator pos:line="5062" pos:column="6">=<pos:position pos:line="5062" pos:column="7"/></operator> <name pos:line="5062" pos:column="8">SQLITE_INTERRUPT<pos:position pos:line="5062" pos:column="24"/></name></expr>;<pos:position pos:line="5062" pos:column="25"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="5063" pos:column="3">p<pos:position pos:line="5063" pos:column="4"/></name><operator pos:line="5063" pos:column="4">-&gt;<pos:position pos:line="5063" pos:column="9"/></operator><name pos:line="5063" pos:column="6">rc<pos:position pos:line="5063" pos:column="8"/></name></name> <operator pos:line="5063" pos:column="9">=<pos:position pos:line="5063" pos:column="10"/></operator> <name pos:line="5063" pos:column="11">rc<pos:position pos:line="5063" pos:column="13"/></name></expr>;<pos:position pos:line="5063" pos:column="14"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="5064" pos:column="3">sqlite3SetString<pos:position pos:line="5064" pos:column="19"/></name><argument_list pos:line="5064" pos:column="19">(<argument><expr><operator pos:line="5064" pos:column="20">&amp;<pos:position pos:line="5064" pos:column="25"/></operator><name><name pos:line="5064" pos:column="21">p<pos:position pos:line="5064" pos:column="22"/></name><operator pos:line="5064" pos:column="22">-&gt;<pos:position pos:line="5064" pos:column="27"/></operator><name pos:line="5064" pos:column="24">zErrMsg<pos:position pos:line="5064" pos:column="31"/></name></name></expr></argument>, <argument><expr><name pos:line="5064" pos:column="33">db<pos:position pos:line="5064" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="5064" pos:column="37">"%s"<pos:position pos:line="5064" pos:column="41"/></literal></expr></argument>, <argument><expr><call><name pos:line="5064" pos:column="43">sqlite3ErrStr<pos:position pos:line="5064" pos:column="56"/></name><argument_list pos:line="5064" pos:column="56">(<argument><expr><name pos:line="5064" pos:column="57">rc<pos:position pos:line="5064" pos:column="59"/></name></expr></argument>)<pos:position pos:line="5064" pos:column="60"/></argument_list></call></expr></argument>)<pos:position pos:line="5064" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="5064" pos:column="62"/></expr_stmt>
  <goto pos:line="5065" pos:column="3">goto <name pos:line="5065" pos:column="8">vdbe_error_halt<pos:position pos:line="5065" pos:column="23"/></name>;<pos:position pos:line="5065" pos:column="24"/></goto>
}<pos:position pos:line="5066" pos:column="2"/></block></function></unit>
