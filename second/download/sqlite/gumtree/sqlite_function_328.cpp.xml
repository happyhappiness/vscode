<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/sqlite/gumtree/sqlite_function_328.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">sqlite3_backup<pos:position pos:line="1" pos:column="15"/></name> <modifier pos:line="1" pos:column="16">*<pos:position pos:line="1" pos:column="17"/></modifier></type><name pos:line="1" pos:column="17">sqlite3_backup_init<pos:position pos:line="1" pos:column="36"/></name><parameter_list pos:line="1" pos:column="36">(
  <parameter><decl><type><name pos:line="2" pos:column="3">sqlite3<pos:position pos:line="2" pos:column="10"/></name><modifier pos:line="2" pos:column="10">*<pos:position pos:line="2" pos:column="11"/></modifier></type> <name pos:line="2" pos:column="12">pDestDb<pos:position pos:line="2" pos:column="19"/></name></decl></parameter>,                     <comment type="block" pos:line="2" pos:column="41">/* Database to write to */</comment>
  <parameter><decl><type><specifier pos:line="3" pos:column="3">const<pos:position pos:line="3" pos:column="8"/></specifier> <name pos:line="3" pos:column="9">char<pos:position pos:line="3" pos:column="13"/></name> <modifier pos:line="3" pos:column="14">*<pos:position pos:line="3" pos:column="15"/></modifier></type><name pos:line="3" pos:column="15">zDestDb<pos:position pos:line="3" pos:column="22"/></name></decl></parameter>,                  <comment type="block" pos:line="3" pos:column="41">/* Name of database within pDestDb */</comment>
  <parameter><decl><type><name pos:line="4" pos:column="3">sqlite3<pos:position pos:line="4" pos:column="10"/></name><modifier pos:line="4" pos:column="10">*<pos:position pos:line="4" pos:column="11"/></modifier></type> <name pos:line="4" pos:column="12">pSrcDb<pos:position pos:line="4" pos:column="18"/></name></decl></parameter>,                      <comment type="block" pos:line="4" pos:column="41">/* Database connection to read from */</comment>
  <parameter><decl><type><specifier pos:line="5" pos:column="3">const<pos:position pos:line="5" pos:column="8"/></specifier> <name pos:line="5" pos:column="9">char<pos:position pos:line="5" pos:column="13"/></name> <modifier pos:line="5" pos:column="14">*<pos:position pos:line="5" pos:column="15"/></modifier></type><name pos:line="5" pos:column="15">zSrcDb<pos:position pos:line="5" pos:column="21"/></name></decl></parameter>                    <comment type="block" pos:line="5" pos:column="41">/* Name of database within pSrcDb */</comment>
)<pos:position pos:line="6" pos:column="2"/></parameter_list><block pos:line="6" pos:column="2">{
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">sqlite3_backup<pos:position pos:line="7" pos:column="17"/></name> <modifier pos:line="7" pos:column="18">*<pos:position pos:line="7" pos:column="19"/></modifier></type><name pos:line="7" pos:column="19">p<pos:position pos:line="7" pos:column="20"/></name></decl>;<pos:position pos:line="7" pos:column="21"/></decl_stmt>                    <comment type="block" pos:line="7" pos:column="41">/* Value to return */</comment>

<cpp:ifdef pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">ifdef<pos:position pos:line="9" pos:column="7"/></cpp:directive> <name pos:line="9" pos:column="8">SQLITE_ENABLE_API_ARMOR<pos:position pos:line="9" pos:column="31"/></name></cpp:ifdef>
  <if pos:line="10" pos:column="3">if<condition pos:line="10" pos:column="5">( <expr><operator pos:line="10" pos:column="7">!<pos:position pos:line="10" pos:column="8"/></operator><call><name pos:line="10" pos:column="8">sqlite3SafetyCheckOk<pos:position pos:line="10" pos:column="28"/></name><argument_list pos:line="10" pos:column="28">(<argument><expr><name pos:line="10" pos:column="29">pSrcDb<pos:position pos:line="10" pos:column="35"/></name></expr></argument>)<pos:position pos:line="10" pos:column="36"/></argument_list></call><operator pos:line="10" pos:column="36">||<pos:position pos:line="10" pos:column="38"/></operator><operator pos:line="10" pos:column="38">!<pos:position pos:line="10" pos:column="39"/></operator><call><name pos:line="10" pos:column="39">sqlite3SafetyCheckOk<pos:position pos:line="10" pos:column="59"/></name><argument_list pos:line="10" pos:column="59">(<argument><expr><name pos:line="10" pos:column="60">pDestDb<pos:position pos:line="10" pos:column="67"/></name></expr></argument>)<pos:position pos:line="10" pos:column="68"/></argument_list></call></expr> )<pos:position pos:line="10" pos:column="70"/></condition><then><block pos:line="10" pos:column="70">{
    <expr_stmt><expr><operator pos:line="11" pos:column="5">(<pos:position pos:line="11" pos:column="6"/></operator><name pos:line="11" pos:column="6">void<pos:position pos:line="11" pos:column="10"/></name><operator pos:line="11" pos:column="10">)<pos:position pos:line="11" pos:column="11"/></operator><name pos:line="11" pos:column="11">SQLITE_MISUSE_BKPT<pos:position pos:line="11" pos:column="29"/></name></expr>;<pos:position pos:line="11" pos:column="30"/></expr_stmt>
    <return pos:line="12" pos:column="5">return <expr><literal type="number" pos:line="12" pos:column="12">0<pos:position pos:line="12" pos:column="13"/></literal></expr>;<pos:position pos:line="12" pos:column="14"/></return>
  }<pos:position pos:line="13" pos:column="4"/></block></then></if>
<cpp:endif pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">endif<pos:position pos:line="14" pos:column="7"/></cpp:directive></cpp:endif>

  <comment type="block" pos:line="16" pos:column="3">/* Lock the source database handle. The destination database
  ** handle is not locked in this routine, but it is locked in
  ** sqlite3_backup_step(). The user is required to ensure that no
  ** other thread accesses the destination handle for the duration
  ** of the backup operation.  Any attempt to use the destination
  ** database connection while a backup is in progress may cause
  ** a malfunction or a deadlock.
  */</comment>
  <expr_stmt><expr><call><name pos:line="24" pos:column="3">sqlite3_mutex_enter<pos:position pos:line="24" pos:column="22"/></name><argument_list pos:line="24" pos:column="22">(<argument><expr><name><name pos:line="24" pos:column="23">pSrcDb<pos:position pos:line="24" pos:column="29"/></name><operator pos:line="24" pos:column="29">-&gt;<pos:position pos:line="24" pos:column="34"/></operator><name pos:line="24" pos:column="31">mutex<pos:position pos:line="24" pos:column="36"/></name></name></expr></argument>)<pos:position pos:line="24" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="38"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="25" pos:column="3">sqlite3_mutex_enter<pos:position pos:line="25" pos:column="22"/></name><argument_list pos:line="25" pos:column="22">(<argument><expr><name><name pos:line="25" pos:column="23">pDestDb<pos:position pos:line="25" pos:column="30"/></name><operator pos:line="25" pos:column="30">-&gt;<pos:position pos:line="25" pos:column="35"/></operator><name pos:line="25" pos:column="32">mutex<pos:position pos:line="25" pos:column="37"/></name></name></expr></argument>)<pos:position pos:line="25" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="39"/></expr_stmt>

  <if pos:line="27" pos:column="3">if<condition pos:line="27" pos:column="5">( <expr><name pos:line="27" pos:column="7">pSrcDb<pos:position pos:line="27" pos:column="13"/></name><operator pos:line="27" pos:column="13">==<pos:position pos:line="27" pos:column="15"/></operator><name pos:line="27" pos:column="15">pDestDb<pos:position pos:line="27" pos:column="22"/></name></expr> )<pos:position pos:line="27" pos:column="24"/></condition><then><block pos:line="27" pos:column="24">{
    <expr_stmt><expr><call><name pos:line="28" pos:column="5">sqlite3ErrorWithMsg<pos:position pos:line="28" pos:column="24"/></name><argument_list pos:line="28" pos:column="24">(
        <argument><expr><name pos:line="29" pos:column="9">pDestDb<pos:position pos:line="29" pos:column="16"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="18">SQLITE_ERROR<pos:position pos:line="29" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="29" pos:column="32">"source and destination must be distinct"<pos:position pos:line="29" pos:column="73"/></literal></expr></argument>
    )<pos:position pos:line="30" pos:column="6"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="7"/></expr_stmt>
    <expr_stmt><expr><name pos:line="31" pos:column="5">p<pos:position pos:line="31" pos:column="6"/></name> <operator pos:line="31" pos:column="7">=<pos:position pos:line="31" pos:column="8"/></operator> <literal type="number" pos:line="31" pos:column="9">0<pos:position pos:line="31" pos:column="10"/></literal></expr>;<pos:position pos:line="31" pos:column="11"/></expr_stmt>
  }<pos:position pos:line="32" pos:column="4"/></block></then><else pos:line="32" pos:column="4">else <block pos:line="32" pos:column="9">{
    <comment type="block" pos:line="33" pos:column="5">/* Allocate space for a new sqlite3_backup object...
    ** EVIDENCE-OF: R-64852-21591 The sqlite3_backup object is created by a
    ** call to sqlite3_backup_init() and is destroyed by a call to
    ** sqlite3_backup_finish(). */</comment>
    <expr_stmt><expr><name pos:line="37" pos:column="5">p<pos:position pos:line="37" pos:column="6"/></name> <operator pos:line="37" pos:column="7">=<pos:position pos:line="37" pos:column="8"/></operator> <operator pos:line="37" pos:column="9">(<pos:position pos:line="37" pos:column="10"/></operator><name pos:line="37" pos:column="10">sqlite3_backup<pos:position pos:line="37" pos:column="24"/></name> <operator pos:line="37" pos:column="25">*<pos:position pos:line="37" pos:column="26"/></operator><operator pos:line="37" pos:column="26">)<pos:position pos:line="37" pos:column="27"/></operator><call><name pos:line="37" pos:column="27">sqlite3MallocZero<pos:position pos:line="37" pos:column="44"/></name><argument_list pos:line="37" pos:column="44">(<argument><expr><sizeof pos:line="37" pos:column="45">sizeof<argument_list pos:line="37" pos:column="51">(<argument><expr><name pos:line="37" pos:column="52">sqlite3_backup<pos:position pos:line="37" pos:column="66"/></name></expr></argument>)<pos:position pos:line="37" pos:column="67"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="37" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="69"/></expr_stmt>
    <if pos:line="38" pos:column="5">if<condition pos:line="38" pos:column="7">( <expr><operator pos:line="38" pos:column="9">!<pos:position pos:line="38" pos:column="10"/></operator><name pos:line="38" pos:column="10">p<pos:position pos:line="38" pos:column="11"/></name></expr> )<pos:position pos:line="38" pos:column="13"/></condition><then><block pos:line="38" pos:column="13">{
      <expr_stmt><expr><call><name pos:line="39" pos:column="7">sqlite3Error<pos:position pos:line="39" pos:column="19"/></name><argument_list pos:line="39" pos:column="19">(<argument><expr><name pos:line="39" pos:column="20">pDestDb<pos:position pos:line="39" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="29">SQLITE_NOMEM_BKPT<pos:position pos:line="39" pos:column="46"/></name></expr></argument>)<pos:position pos:line="39" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="48"/></expr_stmt>
    }<pos:position pos:line="40" pos:column="6"/></block></then></if>
  }<pos:position pos:line="41" pos:column="4"/></block></else></if>

  <comment type="block" pos:line="43" pos:column="3">/* If the allocation succeeded, populate the new object. */</comment>
  <if pos:line="44" pos:column="3">if<condition pos:line="44" pos:column="5">( <expr><name pos:line="44" pos:column="7">p<pos:position pos:line="44" pos:column="8"/></name></expr> )<pos:position pos:line="44" pos:column="10"/></condition><then><block pos:line="44" pos:column="10">{
    <expr_stmt><expr><name><name pos:line="45" pos:column="5">p<pos:position pos:line="45" pos:column="6"/></name><operator pos:line="45" pos:column="6">-&gt;<pos:position pos:line="45" pos:column="11"/></operator><name pos:line="45" pos:column="8">pSrc<pos:position pos:line="45" pos:column="12"/></name></name> <operator pos:line="45" pos:column="13">=<pos:position pos:line="45" pos:column="14"/></operator> <call><name pos:line="45" pos:column="15">findBtree<pos:position pos:line="45" pos:column="24"/></name><argument_list pos:line="45" pos:column="24">(<argument><expr><name pos:line="45" pos:column="25">pDestDb<pos:position pos:line="45" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="34">pSrcDb<pos:position pos:line="45" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="42">zSrcDb<pos:position pos:line="45" pos:column="48"/></name></expr></argument>)<pos:position pos:line="45" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="50"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="46" pos:column="5">p<pos:position pos:line="46" pos:column="6"/></name><operator pos:line="46" pos:column="6">-&gt;<pos:position pos:line="46" pos:column="11"/></operator><name pos:line="46" pos:column="8">pDest<pos:position pos:line="46" pos:column="13"/></name></name> <operator pos:line="46" pos:column="14">=<pos:position pos:line="46" pos:column="15"/></operator> <call><name pos:line="46" pos:column="16">findBtree<pos:position pos:line="46" pos:column="25"/></name><argument_list pos:line="46" pos:column="25">(<argument><expr><name pos:line="46" pos:column="26">pDestDb<pos:position pos:line="46" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="35">pDestDb<pos:position pos:line="46" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="44">zDestDb<pos:position pos:line="46" pos:column="51"/></name></expr></argument>)<pos:position pos:line="46" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="53"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="47" pos:column="5">p<pos:position pos:line="47" pos:column="6"/></name><operator pos:line="47" pos:column="6">-&gt;<pos:position pos:line="47" pos:column="11"/></operator><name pos:line="47" pos:column="8">pDestDb<pos:position pos:line="47" pos:column="15"/></name></name> <operator pos:line="47" pos:column="16">=<pos:position pos:line="47" pos:column="17"/></operator> <name pos:line="47" pos:column="18">pDestDb<pos:position pos:line="47" pos:column="25"/></name></expr>;<pos:position pos:line="47" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="48" pos:column="5">p<pos:position pos:line="48" pos:column="6"/></name><operator pos:line="48" pos:column="6">-&gt;<pos:position pos:line="48" pos:column="11"/></operator><name pos:line="48" pos:column="8">pSrcDb<pos:position pos:line="48" pos:column="14"/></name></name> <operator pos:line="48" pos:column="15">=<pos:position pos:line="48" pos:column="16"/></operator> <name pos:line="48" pos:column="17">pSrcDb<pos:position pos:line="48" pos:column="23"/></name></expr>;<pos:position pos:line="48" pos:column="24"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="49" pos:column="5">p<pos:position pos:line="49" pos:column="6"/></name><operator pos:line="49" pos:column="6">-&gt;<pos:position pos:line="49" pos:column="11"/></operator><name pos:line="49" pos:column="8">iNext<pos:position pos:line="49" pos:column="13"/></name></name> <operator pos:line="49" pos:column="14">=<pos:position pos:line="49" pos:column="15"/></operator> <literal type="number" pos:line="49" pos:column="16">1<pos:position pos:line="49" pos:column="17"/></literal></expr>;<pos:position pos:line="49" pos:column="18"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="50" pos:column="5">p<pos:position pos:line="50" pos:column="6"/></name><operator pos:line="50" pos:column="6">-&gt;<pos:position pos:line="50" pos:column="11"/></operator><name pos:line="50" pos:column="8">isAttached<pos:position pos:line="50" pos:column="18"/></name></name> <operator pos:line="50" pos:column="19">=<pos:position pos:line="50" pos:column="20"/></operator> <literal type="number" pos:line="50" pos:column="21">0<pos:position pos:line="50" pos:column="22"/></literal></expr>;<pos:position pos:line="50" pos:column="23"/></expr_stmt>

    <if pos:line="52" pos:column="5">if<condition pos:line="52" pos:column="7">( <expr><literal type="number" pos:line="52" pos:column="9">0<pos:position pos:line="52" pos:column="10"/></literal><operator pos:line="52" pos:column="10">==<pos:position pos:line="52" pos:column="12"/></operator><name><name pos:line="52" pos:column="12">p<pos:position pos:line="52" pos:column="13"/></name><operator pos:line="52" pos:column="13">-&gt;<pos:position pos:line="52" pos:column="18"/></operator><name pos:line="52" pos:column="15">pSrc<pos:position pos:line="52" pos:column="19"/></name></name> <operator pos:line="52" pos:column="20">||<pos:position pos:line="52" pos:column="22"/></operator> <literal type="number" pos:line="52" pos:column="23">0<pos:position pos:line="52" pos:column="24"/></literal><operator pos:line="52" pos:column="24">==<pos:position pos:line="52" pos:column="26"/></operator><name><name pos:line="52" pos:column="26">p<pos:position pos:line="52" pos:column="27"/></name><operator pos:line="52" pos:column="27">-&gt;<pos:position pos:line="52" pos:column="32"/></operator><name pos:line="52" pos:column="29">pDest<pos:position pos:line="52" pos:column="34"/></name></name> 
     <operator pos:line="53" pos:column="6">||<pos:position pos:line="53" pos:column="8"/></operator> <call><name pos:line="53" pos:column="9">checkReadTransaction<pos:position pos:line="53" pos:column="29"/></name><argument_list pos:line="53" pos:column="29">(<argument><expr><name pos:line="53" pos:column="30">pDestDb<pos:position pos:line="53" pos:column="37"/></name></expr></argument>, <argument><expr><name><name pos:line="53" pos:column="39">p<pos:position pos:line="53" pos:column="40"/></name><operator pos:line="53" pos:column="40">-&gt;<pos:position pos:line="53" pos:column="45"/></operator><name pos:line="53" pos:column="42">pDest<pos:position pos:line="53" pos:column="47"/></name></name></expr></argument>)<pos:position pos:line="53" pos:column="48"/></argument_list></call><operator pos:line="53" pos:column="48">!=<pos:position pos:line="53" pos:column="50"/></operator><name pos:line="53" pos:column="50">SQLITE_OK<pos:position pos:line="53" pos:column="59"/></name></expr> 
     )<pos:position pos:line="54" pos:column="7"/></condition><then><block pos:line="54" pos:column="7">{
      <comment type="block" pos:line="55" pos:column="7">/* One (or both) of the named databases did not exist or an OOM
      ** error was hit. Or there is a transaction open on the destination
      ** database. The error has already been written into the pDestDb 
      ** handle. All that is left to do here is free the sqlite3_backup 
      ** structure.  */</comment>
      <expr_stmt><expr><call><name pos:line="60" pos:column="7">sqlite3_free<pos:position pos:line="60" pos:column="19"/></name><argument_list pos:line="60" pos:column="19">(<argument><expr><name pos:line="60" pos:column="20">p<pos:position pos:line="60" pos:column="21"/></name></expr></argument>)<pos:position pos:line="60" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="23"/></expr_stmt>
      <expr_stmt><expr><name pos:line="61" pos:column="7">p<pos:position pos:line="61" pos:column="8"/></name> <operator pos:line="61" pos:column="9">=<pos:position pos:line="61" pos:column="10"/></operator> <literal type="number" pos:line="61" pos:column="11">0<pos:position pos:line="61" pos:column="12"/></literal></expr>;<pos:position pos:line="61" pos:column="13"/></expr_stmt>
    }<pos:position pos:line="62" pos:column="6"/></block></then></if>
  }<pos:position pos:line="63" pos:column="4"/></block></then></if>
  <if pos:line="64" pos:column="3">if<condition pos:line="64" pos:column="5">( <expr><name pos:line="64" pos:column="7">p<pos:position pos:line="64" pos:column="8"/></name></expr> )<pos:position pos:line="64" pos:column="10"/></condition><then><block pos:line="64" pos:column="10">{
    <expr_stmt><expr><name><name pos:line="65" pos:column="5">p<pos:position pos:line="65" pos:column="6"/></name><operator pos:line="65" pos:column="6">-&gt;<pos:position pos:line="65" pos:column="11"/></operator><name pos:line="65" pos:column="8">pSrc<pos:position pos:line="65" pos:column="12"/></name><operator pos:line="65" pos:column="12">-&gt;<pos:position pos:line="65" pos:column="17"/></operator><name pos:line="65" pos:column="14">nBackup<pos:position pos:line="65" pos:column="21"/></name></name><operator pos:line="65" pos:column="21">++<pos:position pos:line="65" pos:column="23"/></operator></expr>;<pos:position pos:line="65" pos:column="24"/></expr_stmt>
  }<pos:position pos:line="66" pos:column="4"/></block></then></if>

  <expr_stmt><expr><call><name pos:line="68" pos:column="3">sqlite3_mutex_leave<pos:position pos:line="68" pos:column="22"/></name><argument_list pos:line="68" pos:column="22">(<argument><expr><name><name pos:line="68" pos:column="23">pDestDb<pos:position pos:line="68" pos:column="30"/></name><operator pos:line="68" pos:column="30">-&gt;<pos:position pos:line="68" pos:column="35"/></operator><name pos:line="68" pos:column="32">mutex<pos:position pos:line="68" pos:column="37"/></name></name></expr></argument>)<pos:position pos:line="68" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="39"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="69" pos:column="3">sqlite3_mutex_leave<pos:position pos:line="69" pos:column="22"/></name><argument_list pos:line="69" pos:column="22">(<argument><expr><name><name pos:line="69" pos:column="23">pSrcDb<pos:position pos:line="69" pos:column="29"/></name><operator pos:line="69" pos:column="29">-&gt;<pos:position pos:line="69" pos:column="34"/></operator><name pos:line="69" pos:column="31">mutex<pos:position pos:line="69" pos:column="36"/></name></name></expr></argument>)<pos:position pos:line="69" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="38"/></expr_stmt>
  <return pos:line="70" pos:column="3">return <expr><name pos:line="70" pos:column="10">p<pos:position pos:line="70" pos:column="11"/></name></expr>;<pos:position pos:line="70" pos:column="12"/></return>
}<pos:position pos:line="71" pos:column="2"/></block></function></unit>
