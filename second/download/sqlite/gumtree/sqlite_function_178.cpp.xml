<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/sqlite/gumtree/sqlite_function_178.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">sqlite3Prepare<pos:position pos:line="1" pos:column="26"/></name><parameter_list pos:line="1" pos:column="26">(
  <parameter><decl><type><name pos:line="2" pos:column="3">sqlite3<pos:position pos:line="2" pos:column="10"/></name> <modifier pos:line="2" pos:column="11">*<pos:position pos:line="2" pos:column="12"/></modifier></type><name pos:line="2" pos:column="12">db<pos:position pos:line="2" pos:column="14"/></name></decl></parameter>,              <comment type="block" pos:line="2" pos:column="29">/* Database handle. */</comment>
  <parameter><decl><type><specifier pos:line="3" pos:column="3">const<pos:position pos:line="3" pos:column="8"/></specifier> <name pos:line="3" pos:column="9">char<pos:position pos:line="3" pos:column="13"/></name> <modifier pos:line="3" pos:column="14">*<pos:position pos:line="3" pos:column="15"/></modifier></type><name pos:line="3" pos:column="15">zSql<pos:position pos:line="3" pos:column="19"/></name></decl></parameter>,         <comment type="block" pos:line="3" pos:column="29">/* UTF-8 encoded SQL statement. */</comment>
  <parameter><decl><type><name pos:line="4" pos:column="3">int<pos:position pos:line="4" pos:column="6"/></name></type> <name pos:line="4" pos:column="7">nBytes<pos:position pos:line="4" pos:column="13"/></name></decl></parameter>,               <comment type="block" pos:line="4" pos:column="29">/* Length of zSql in bytes. */</comment>
  <parameter><decl><type><name pos:line="5" pos:column="3">u32<pos:position pos:line="5" pos:column="6"/></name></type> <name pos:line="5" pos:column="7">prepFlags<pos:position pos:line="5" pos:column="16"/></name></decl></parameter>,            <comment type="block" pos:line="5" pos:column="29">/* Zero or more SQLITE_PREPARE_* flags */</comment>
  <parameter><decl><type><name pos:line="6" pos:column="3">Vdbe<pos:position pos:line="6" pos:column="7"/></name> <modifier pos:line="6" pos:column="8">*<pos:position pos:line="6" pos:column="9"/></modifier></type><name pos:line="6" pos:column="9">pReprepare<pos:position pos:line="6" pos:column="19"/></name></decl></parameter>,         <comment type="block" pos:line="6" pos:column="29">/* VM being reprepared */</comment>
  <parameter><decl><type><name pos:line="7" pos:column="3">sqlite3_stmt<pos:position pos:line="7" pos:column="15"/></name> <modifier pos:line="7" pos:column="16">*<pos:position pos:line="7" pos:column="17"/></modifier><modifier pos:line="7" pos:column="17">*<pos:position pos:line="7" pos:column="18"/></modifier></type><name pos:line="7" pos:column="18">ppStmt<pos:position pos:line="7" pos:column="24"/></name></decl></parameter>,    <comment type="block" pos:line="7" pos:column="29">/* OUT: A pointer to the prepared statement */</comment>
  <parameter><decl><type><specifier pos:line="8" pos:column="3">const<pos:position pos:line="8" pos:column="8"/></specifier> <name pos:line="8" pos:column="9">char<pos:position pos:line="8" pos:column="13"/></name> <modifier pos:line="8" pos:column="14">*<pos:position pos:line="8" pos:column="15"/></modifier><modifier pos:line="8" pos:column="15">*<pos:position pos:line="8" pos:column="16"/></modifier></type><name pos:line="8" pos:column="16">pzTail<pos:position pos:line="8" pos:column="22"/></name></decl></parameter>       <comment type="block" pos:line="8" pos:column="29">/* OUT: End of parsed string */</comment>
)<pos:position pos:line="9" pos:column="2"/></parameter_list><block pos:line="9" pos:column="2">{
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">char<pos:position pos:line="10" pos:column="7"/></name> <modifier pos:line="10" pos:column="8">*<pos:position pos:line="10" pos:column="9"/></modifier></type><name pos:line="10" pos:column="9">zErrMsg<pos:position pos:line="10" pos:column="16"/></name> <init pos:line="10" pos:column="17">= <expr><literal type="number" pos:line="10" pos:column="19">0<pos:position pos:line="10" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="10" pos:column="21"/></decl_stmt>        <comment type="block" pos:line="10" pos:column="29">/* Error message */</comment>
  <decl_stmt><decl><type><name pos:line="11" pos:column="3">int<pos:position pos:line="11" pos:column="6"/></name></type> <name pos:line="11" pos:column="7">rc<pos:position pos:line="11" pos:column="9"/></name> <init pos:line="11" pos:column="10">= <expr><name pos:line="11" pos:column="12">SQLITE_OK<pos:position pos:line="11" pos:column="21"/></name></expr></init></decl>;<pos:position pos:line="11" pos:column="22"/></decl_stmt>       <comment type="block" pos:line="11" pos:column="29">/* Result code */</comment>
  <decl_stmt><decl><type><name pos:line="12" pos:column="3">int<pos:position pos:line="12" pos:column="6"/></name></type> <name pos:line="12" pos:column="7">i<pos:position pos:line="12" pos:column="8"/></name></decl>;<pos:position pos:line="12" pos:column="9"/></decl_stmt>                    <comment type="block" pos:line="12" pos:column="29">/* Loop counter */</comment>
  <decl_stmt><decl><type><name pos:line="13" pos:column="3">Parse<pos:position pos:line="13" pos:column="8"/></name></type> <name pos:line="13" pos:column="9">sParse<pos:position pos:line="13" pos:column="15"/></name></decl>;<pos:position pos:line="13" pos:column="16"/></decl_stmt>             <comment type="block" pos:line="13" pos:column="29">/* Parsing context */</comment>

  <expr_stmt><expr><call><name pos:line="15" pos:column="3">memset<pos:position pos:line="15" pos:column="9"/></name><argument_list pos:line="15" pos:column="9">(<argument><expr><operator pos:line="15" pos:column="10">&amp;<pos:position pos:line="15" pos:column="15"/></operator><name pos:line="15" pos:column="11">sParse<pos:position pos:line="15" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="15" pos:column="19">0<pos:position pos:line="15" pos:column="20"/></literal></expr></argument>, <argument><expr><name pos:line="15" pos:column="22">PARSE_HDR_SZ<pos:position pos:line="15" pos:column="34"/></name></expr></argument>)<pos:position pos:line="15" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="36"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="16" pos:column="3">memset<pos:position pos:line="16" pos:column="9"/></name><argument_list pos:line="16" pos:column="9">(<argument><expr><call><name pos:line="16" pos:column="10">PARSE_TAIL<pos:position pos:line="16" pos:column="20"/></name><argument_list pos:line="16" pos:column="20">(<argument><expr><operator pos:line="16" pos:column="21">&amp;<pos:position pos:line="16" pos:column="26"/></operator><name pos:line="16" pos:column="22">sParse<pos:position pos:line="16" pos:column="28"/></name></expr></argument>)<pos:position pos:line="16" pos:column="29"/></argument_list></call></expr></argument>, <argument><expr><literal type="number" pos:line="16" pos:column="31">0<pos:position pos:line="16" pos:column="32"/></literal></expr></argument>, <argument><expr><name pos:line="16" pos:column="34">PARSE_TAIL_SZ<pos:position pos:line="16" pos:column="47"/></name></expr></argument>)<pos:position pos:line="16" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="49"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="17" pos:column="3">sParse<pos:position pos:line="17" pos:column="9"/></name><operator pos:line="17" pos:column="9">.<pos:position pos:line="17" pos:column="10"/></operator><name pos:line="17" pos:column="10">pReprepare<pos:position pos:line="17" pos:column="20"/></name></name> <operator pos:line="17" pos:column="21">=<pos:position pos:line="17" pos:column="22"/></operator> <name pos:line="17" pos:column="23">pReprepare<pos:position pos:line="17" pos:column="33"/></name></expr>;<pos:position pos:line="17" pos:column="34"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="18" pos:column="3">assert<pos:position pos:line="18" pos:column="9"/></name><argument_list pos:line="18" pos:column="9">( <argument><expr><name pos:line="18" pos:column="11">ppStmt<pos:position pos:line="18" pos:column="17"/></name> <operator pos:line="18" pos:column="18">&amp;&amp;<pos:position pos:line="18" pos:column="28"/></operator> <operator pos:line="18" pos:column="21">*<pos:position pos:line="18" pos:column="22"/></operator><name pos:line="18" pos:column="22">ppStmt<pos:position pos:line="18" pos:column="28"/></name><operator pos:line="18" pos:column="28">==<pos:position pos:line="18" pos:column="30"/></operator><literal type="number" pos:line="18" pos:column="30">0<pos:position pos:line="18" pos:column="31"/></literal></expr></argument> )<pos:position pos:line="18" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="34"/></expr_stmt>
  <comment type="block" pos:line="19" pos:column="3">/* assert( !db-&gt;mallocFailed ); // not true with SQLITE_USE_ALLOCA */</comment>
  <expr_stmt><expr><call><name pos:line="20" pos:column="3">assert<pos:position pos:line="20" pos:column="9"/></name><argument_list pos:line="20" pos:column="9">( <argument><expr><call><name pos:line="20" pos:column="11">sqlite3_mutex_held<pos:position pos:line="20" pos:column="29"/></name><argument_list pos:line="20" pos:column="29">(<argument><expr><name><name pos:line="20" pos:column="30">db<pos:position pos:line="20" pos:column="32"/></name><operator pos:line="20" pos:column="32">-&gt;<pos:position pos:line="20" pos:column="37"/></operator><name pos:line="20" pos:column="34">mutex<pos:position pos:line="20" pos:column="39"/></name></name></expr></argument>)<pos:position pos:line="20" pos:column="40"/></argument_list></call></expr></argument> )<pos:position pos:line="20" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="43"/></expr_stmt>

  <comment type="block" pos:line="22" pos:column="3">/* For a long-term use prepared statement avoid the use of
  ** lookaside memory.
  */</comment>
  <if pos:line="25" pos:column="3">if<condition pos:line="25" pos:column="5">( <expr><name pos:line="25" pos:column="7">prepFlags<pos:position pos:line="25" pos:column="16"/></name> <operator pos:line="25" pos:column="17">&amp;<pos:position pos:line="25" pos:column="22"/></operator> <name pos:line="25" pos:column="19">SQLITE_PREPARE_PERSISTENT<pos:position pos:line="25" pos:column="44"/></name></expr> )<pos:position pos:line="25" pos:column="46"/></condition><then><block pos:line="25" pos:column="46">{
    <expr_stmt><expr><name><name pos:line="26" pos:column="5">sParse<pos:position pos:line="26" pos:column="11"/></name><operator pos:line="26" pos:column="11">.<pos:position pos:line="26" pos:column="12"/></operator><name pos:line="26" pos:column="12">disableLookaside<pos:position pos:line="26" pos:column="28"/></name></name><operator pos:line="26" pos:column="28">++<pos:position pos:line="26" pos:column="30"/></operator></expr>;<pos:position pos:line="26" pos:column="31"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="27" pos:column="5">db<pos:position pos:line="27" pos:column="7"/></name><operator pos:line="27" pos:column="7">-&gt;<pos:position pos:line="27" pos:column="12"/></operator><name pos:line="27" pos:column="9">lookaside<pos:position pos:line="27" pos:column="18"/></name><operator pos:line="27" pos:column="18">.<pos:position pos:line="27" pos:column="19"/></operator><name pos:line="27" pos:column="19">bDisable<pos:position pos:line="27" pos:column="27"/></name></name><operator pos:line="27" pos:column="27">++<pos:position pos:line="27" pos:column="29"/></operator></expr>;<pos:position pos:line="27" pos:column="30"/></expr_stmt>
  }<pos:position pos:line="28" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="30" pos:column="3">/* Check to verify that it is possible to get a read lock on all
  ** database schemas.  The inability to get a read lock indicates that
  ** some other database connection is holding a write-lock, which in
  ** turn means that the other connection has made uncommitted changes
  ** to the schema.
  **
  ** Were we to proceed and prepare the statement against the uncommitted
  ** schema changes and if those schema changes are subsequently rolled
  ** back and different changes are made in their place, then when this
  ** prepared statement goes to run the schema cookie would fail to detect
  ** the schema change.  Disaster would follow.
  **
  ** This thread is currently holding mutexes on all Btrees (because
  ** of the sqlite3BtreeEnterAll() in sqlite3LockAndPrepare()) so it
  ** is not possible for another thread to start a new schema change
  ** while this routine is running.  Hence, we do not need to hold 
  ** locks on the schema, we just need to make sure nobody else is 
  ** holding them.
  **
  ** Note that setting READ_UNCOMMITTED overrides most lock detection,
  ** but it does *not* override schema lock detection, so this all still
  ** works even if READ_UNCOMMITTED is set.
  */</comment>
  <for pos:line="53" pos:column="3">for<control pos:line="53" pos:column="6">(<init><expr><name pos:line="53" pos:column="7">i<pos:position pos:line="53" pos:column="8"/></name><operator pos:line="53" pos:column="8">=<pos:position pos:line="53" pos:column="9"/></operator><literal type="number" pos:line="53" pos:column="9">0<pos:position pos:line="53" pos:column="10"/></literal></expr>;<pos:position pos:line="53" pos:column="11"/></init> <condition><expr><name pos:line="53" pos:column="12">i<pos:position pos:line="53" pos:column="13"/></name><operator pos:line="53" pos:column="13">&lt;<pos:position pos:line="53" pos:column="17"/></operator><name><name pos:line="53" pos:column="14">db<pos:position pos:line="53" pos:column="16"/></name><operator pos:line="53" pos:column="16">-&gt;<pos:position pos:line="53" pos:column="21"/></operator><name pos:line="53" pos:column="18">nDb<pos:position pos:line="53" pos:column="21"/></name></name></expr>;<pos:position pos:line="53" pos:column="22"/></condition> <incr><expr><name pos:line="53" pos:column="23">i<pos:position pos:line="53" pos:column="24"/></name><operator pos:line="53" pos:column="24">++<pos:position pos:line="53" pos:column="26"/></operator></expr></incr>)<pos:position pos:line="53" pos:column="27"/></control> <block pos:line="53" pos:column="28">{
    <decl_stmt><decl><type><name pos:line="54" pos:column="5">Btree<pos:position pos:line="54" pos:column="10"/></name> <modifier pos:line="54" pos:column="11">*<pos:position pos:line="54" pos:column="12"/></modifier></type><name pos:line="54" pos:column="12">pBt<pos:position pos:line="54" pos:column="15"/></name> <init pos:line="54" pos:column="16">= <expr><name><name pos:line="54" pos:column="18">db<pos:position pos:line="54" pos:column="20"/></name><operator pos:line="54" pos:column="20">-&gt;<pos:position pos:line="54" pos:column="25"/></operator><name pos:line="54" pos:column="22">aDb<pos:position pos:line="54" pos:column="25"/></name><index pos:line="54" pos:column="25">[<expr><name pos:line="54" pos:column="26">i<pos:position pos:line="54" pos:column="27"/></name></expr>]<pos:position pos:line="54" pos:column="28"/></index></name><operator pos:line="54" pos:column="28">.<pos:position pos:line="54" pos:column="29"/></operator><name pos:line="54" pos:column="29">pBt<pos:position pos:line="54" pos:column="32"/></name></expr></init></decl>;<pos:position pos:line="54" pos:column="33"/></decl_stmt>
    <if pos:line="55" pos:column="5">if<condition pos:line="55" pos:column="7">( <expr><name pos:line="55" pos:column="9">pBt<pos:position pos:line="55" pos:column="12"/></name></expr> )<pos:position pos:line="55" pos:column="14"/></condition><then><block pos:line="55" pos:column="14">{
      <expr_stmt><expr><call><name pos:line="56" pos:column="7">assert<pos:position pos:line="56" pos:column="13"/></name><argument_list pos:line="56" pos:column="13">( <argument><expr><call><name pos:line="56" pos:column="15">sqlite3BtreeHoldsMutex<pos:position pos:line="56" pos:column="37"/></name><argument_list pos:line="56" pos:column="37">(<argument><expr><name pos:line="56" pos:column="38">pBt<pos:position pos:line="56" pos:column="41"/></name></expr></argument>)<pos:position pos:line="56" pos:column="42"/></argument_list></call></expr></argument> )<pos:position pos:line="56" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="45"/></expr_stmt>
      <expr_stmt><expr><name pos:line="57" pos:column="7">rc<pos:position pos:line="57" pos:column="9"/></name> <operator pos:line="57" pos:column="10">=<pos:position pos:line="57" pos:column="11"/></operator> <call><name pos:line="57" pos:column="12">sqlite3BtreeSchemaLocked<pos:position pos:line="57" pos:column="36"/></name><argument_list pos:line="57" pos:column="36">(<argument><expr><name pos:line="57" pos:column="37">pBt<pos:position pos:line="57" pos:column="40"/></name></expr></argument>)<pos:position pos:line="57" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="42"/></expr_stmt>
      <if pos:line="58" pos:column="7">if<condition pos:line="58" pos:column="9">( <expr><name pos:line="58" pos:column="11">rc<pos:position pos:line="58" pos:column="13"/></name></expr> )<pos:position pos:line="58" pos:column="15"/></condition><then><block pos:line="58" pos:column="15">{
        <decl_stmt><decl><type><specifier pos:line="59" pos:column="9">const<pos:position pos:line="59" pos:column="14"/></specifier> <name pos:line="59" pos:column="15">char<pos:position pos:line="59" pos:column="19"/></name> <modifier pos:line="59" pos:column="20">*<pos:position pos:line="59" pos:column="21"/></modifier></type><name pos:line="59" pos:column="21">zDb<pos:position pos:line="59" pos:column="24"/></name> <init pos:line="59" pos:column="25">= <expr><name><name pos:line="59" pos:column="27">db<pos:position pos:line="59" pos:column="29"/></name><operator pos:line="59" pos:column="29">-&gt;<pos:position pos:line="59" pos:column="34"/></operator><name pos:line="59" pos:column="31">aDb<pos:position pos:line="59" pos:column="34"/></name><index pos:line="59" pos:column="34">[<expr><name pos:line="59" pos:column="35">i<pos:position pos:line="59" pos:column="36"/></name></expr>]<pos:position pos:line="59" pos:column="37"/></index></name><operator pos:line="59" pos:column="37">.<pos:position pos:line="59" pos:column="38"/></operator><name pos:line="59" pos:column="38">zDbSName<pos:position pos:line="59" pos:column="46"/></name></expr></init></decl>;<pos:position pos:line="59" pos:column="47"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="60" pos:column="9">sqlite3ErrorWithMsg<pos:position pos:line="60" pos:column="28"/></name><argument_list pos:line="60" pos:column="28">(<argument><expr><name pos:line="60" pos:column="29">db<pos:position pos:line="60" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="60" pos:column="33">rc<pos:position pos:line="60" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="60" pos:column="37">"database schema is locked: %s"<pos:position pos:line="60" pos:column="68"/></literal></expr></argument>, <argument><expr><name pos:line="60" pos:column="70">zDb<pos:position pos:line="60" pos:column="73"/></name></expr></argument>)<pos:position pos:line="60" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="75"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="61" pos:column="9">testcase<pos:position pos:line="61" pos:column="17"/></name><argument_list pos:line="61" pos:column="17">( <argument><expr><name><name pos:line="61" pos:column="19">db<pos:position pos:line="61" pos:column="21"/></name><operator pos:line="61" pos:column="21">-&gt;<pos:position pos:line="61" pos:column="26"/></operator><name pos:line="61" pos:column="23">flags<pos:position pos:line="61" pos:column="28"/></name></name> <operator pos:line="61" pos:column="29">&amp;<pos:position pos:line="61" pos:column="34"/></operator> <name pos:line="61" pos:column="31">SQLITE_ReadUncommit<pos:position pos:line="61" pos:column="50"/></name></expr></argument> )<pos:position pos:line="61" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="53"/></expr_stmt>
        <goto pos:line="62" pos:column="9">goto <name pos:line="62" pos:column="14">end_prepare<pos:position pos:line="62" pos:column="25"/></name>;<pos:position pos:line="62" pos:column="26"/></goto>
      }<pos:position pos:line="63" pos:column="8"/></block></then></if>
    }<pos:position pos:line="64" pos:column="6"/></block></then></if>
  }<pos:position pos:line="65" pos:column="4"/></block></for>

  <expr_stmt><expr><call><name pos:line="67" pos:column="3">sqlite3VtabUnlockList<pos:position pos:line="67" pos:column="24"/></name><argument_list pos:line="67" pos:column="24">(<argument><expr><name pos:line="67" pos:column="25">db<pos:position pos:line="67" pos:column="27"/></name></expr></argument>)<pos:position pos:line="67" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="29"/></expr_stmt>

  <expr_stmt><expr><name><name pos:line="69" pos:column="3">sParse<pos:position pos:line="69" pos:column="9"/></name><operator pos:line="69" pos:column="9">.<pos:position pos:line="69" pos:column="10"/></operator><name pos:line="69" pos:column="10">db<pos:position pos:line="69" pos:column="12"/></name></name> <operator pos:line="69" pos:column="13">=<pos:position pos:line="69" pos:column="14"/></operator> <name pos:line="69" pos:column="15">db<pos:position pos:line="69" pos:column="17"/></name></expr>;<pos:position pos:line="69" pos:column="18"/></expr_stmt>
  <if pos:line="70" pos:column="3">if<condition pos:line="70" pos:column="5">( <expr><name pos:line="70" pos:column="7">nBytes<pos:position pos:line="70" pos:column="13"/></name><operator pos:line="70" pos:column="13">&gt;=<pos:position pos:line="70" pos:column="18"/></operator><literal type="number" pos:line="70" pos:column="15">0<pos:position pos:line="70" pos:column="16"/></literal> <operator pos:line="70" pos:column="17">&amp;&amp;<pos:position pos:line="70" pos:column="27"/></operator> <operator pos:line="70" pos:column="20">(<pos:position pos:line="70" pos:column="21"/></operator><name pos:line="70" pos:column="21">nBytes<pos:position pos:line="70" pos:column="27"/></name><operator pos:line="70" pos:column="27">==<pos:position pos:line="70" pos:column="29"/></operator><literal type="number" pos:line="70" pos:column="29">0<pos:position pos:line="70" pos:column="30"/></literal> <operator pos:line="70" pos:column="31">||<pos:position pos:line="70" pos:column="33"/></operator> <name><name pos:line="70" pos:column="34">zSql<pos:position pos:line="70" pos:column="38"/></name><index pos:line="70" pos:column="38">[<expr><name pos:line="70" pos:column="39">nBytes<pos:position pos:line="70" pos:column="45"/></name><operator pos:line="70" pos:column="45">-<pos:position pos:line="70" pos:column="46"/></operator><literal type="number" pos:line="70" pos:column="46">1<pos:position pos:line="70" pos:column="47"/></literal></expr>]<pos:position pos:line="70" pos:column="48"/></index></name><operator pos:line="70" pos:column="48">!=<pos:position pos:line="70" pos:column="50"/></operator><literal type="number" pos:line="70" pos:column="50">0<pos:position pos:line="70" pos:column="51"/></literal><operator pos:line="70" pos:column="51">)<pos:position pos:line="70" pos:column="52"/></operator></expr> )<pos:position pos:line="70" pos:column="54"/></condition><then><block pos:line="70" pos:column="54">{
    <decl_stmt><decl><type><name pos:line="71" pos:column="5">char<pos:position pos:line="71" pos:column="9"/></name> <modifier pos:line="71" pos:column="10">*<pos:position pos:line="71" pos:column="11"/></modifier></type><name pos:line="71" pos:column="11">zSqlCopy<pos:position pos:line="71" pos:column="19"/></name></decl>;<pos:position pos:line="71" pos:column="20"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="72" pos:column="5">int<pos:position pos:line="72" pos:column="8"/></name></type> <name pos:line="72" pos:column="9">mxLen<pos:position pos:line="72" pos:column="14"/></name> <init pos:line="72" pos:column="15">= <expr><name><name pos:line="72" pos:column="17">db<pos:position pos:line="72" pos:column="19"/></name><operator pos:line="72" pos:column="19">-&gt;<pos:position pos:line="72" pos:column="24"/></operator><name pos:line="72" pos:column="21">aLimit<pos:position pos:line="72" pos:column="27"/></name><index pos:line="72" pos:column="27">[<expr><name pos:line="72" pos:column="28">SQLITE_LIMIT_SQL_LENGTH<pos:position pos:line="72" pos:column="51"/></name></expr>]<pos:position pos:line="72" pos:column="52"/></index></name></expr></init></decl>;<pos:position pos:line="72" pos:column="53"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="73" pos:column="5">testcase<pos:position pos:line="73" pos:column="13"/></name><argument_list pos:line="73" pos:column="13">( <argument><expr><name pos:line="73" pos:column="15">nBytes<pos:position pos:line="73" pos:column="21"/></name><operator pos:line="73" pos:column="21">==<pos:position pos:line="73" pos:column="23"/></operator><name pos:line="73" pos:column="23">mxLen<pos:position pos:line="73" pos:column="28"/></name></expr></argument> )<pos:position pos:line="73" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="31"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="74" pos:column="5">testcase<pos:position pos:line="74" pos:column="13"/></name><argument_list pos:line="74" pos:column="13">( <argument><expr><name pos:line="74" pos:column="15">nBytes<pos:position pos:line="74" pos:column="21"/></name><operator pos:line="74" pos:column="21">==<pos:position pos:line="74" pos:column="23"/></operator><name pos:line="74" pos:column="23">mxLen<pos:position pos:line="74" pos:column="28"/></name><operator pos:line="74" pos:column="28">+<pos:position pos:line="74" pos:column="29"/></operator><literal type="number" pos:line="74" pos:column="29">1<pos:position pos:line="74" pos:column="30"/></literal></expr></argument> )<pos:position pos:line="74" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="33"/></expr_stmt>
    <if pos:line="75" pos:column="5">if<condition pos:line="75" pos:column="7">( <expr><name pos:line="75" pos:column="9">nBytes<pos:position pos:line="75" pos:column="15"/></name><operator pos:line="75" pos:column="15">&gt;<pos:position pos:line="75" pos:column="19"/></operator><name pos:line="75" pos:column="16">mxLen<pos:position pos:line="75" pos:column="21"/></name></expr> )<pos:position pos:line="75" pos:column="23"/></condition><then><block pos:line="75" pos:column="23">{
      <expr_stmt><expr><call><name pos:line="76" pos:column="7">sqlite3ErrorWithMsg<pos:position pos:line="76" pos:column="26"/></name><argument_list pos:line="76" pos:column="26">(<argument><expr><name pos:line="76" pos:column="27">db<pos:position pos:line="76" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="76" pos:column="31">SQLITE_TOOBIG<pos:position pos:line="76" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="76" pos:column="46">"statement too long"<pos:position pos:line="76" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="76" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="68"/></expr_stmt>
      <expr_stmt><expr><name pos:line="77" pos:column="7">rc<pos:position pos:line="77" pos:column="9"/></name> <operator pos:line="77" pos:column="10">=<pos:position pos:line="77" pos:column="11"/></operator> <call><name pos:line="77" pos:column="12">sqlite3ApiExit<pos:position pos:line="77" pos:column="26"/></name><argument_list pos:line="77" pos:column="26">(<argument><expr><name pos:line="77" pos:column="27">db<pos:position pos:line="77" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="77" pos:column="31">SQLITE_TOOBIG<pos:position pos:line="77" pos:column="44"/></name></expr></argument>)<pos:position pos:line="77" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="46"/></expr_stmt>
      <goto pos:line="78" pos:column="7">goto <name pos:line="78" pos:column="12">end_prepare<pos:position pos:line="78" pos:column="23"/></name>;<pos:position pos:line="78" pos:column="24"/></goto>
    }<pos:position pos:line="79" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="80" pos:column="5">zSqlCopy<pos:position pos:line="80" pos:column="13"/></name> <operator pos:line="80" pos:column="14">=<pos:position pos:line="80" pos:column="15"/></operator> <call><name pos:line="80" pos:column="16">sqlite3DbStrNDup<pos:position pos:line="80" pos:column="32"/></name><argument_list pos:line="80" pos:column="32">(<argument><expr><name pos:line="80" pos:column="33">db<pos:position pos:line="80" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="80" pos:column="37">zSql<pos:position pos:line="80" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="80" pos:column="43">nBytes<pos:position pos:line="80" pos:column="49"/></name></expr></argument>)<pos:position pos:line="80" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="51"/></expr_stmt>
    <if pos:line="81" pos:column="5">if<condition pos:line="81" pos:column="7">( <expr><name pos:line="81" pos:column="9">zSqlCopy<pos:position pos:line="81" pos:column="17"/></name></expr> )<pos:position pos:line="81" pos:column="19"/></condition><then><block pos:line="81" pos:column="19">{
      <expr_stmt><expr><call><name pos:line="82" pos:column="7">sqlite3RunParser<pos:position pos:line="82" pos:column="23"/></name><argument_list pos:line="82" pos:column="23">(<argument><expr><operator pos:line="82" pos:column="24">&amp;<pos:position pos:line="82" pos:column="29"/></operator><name pos:line="82" pos:column="25">sParse<pos:position pos:line="82" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="82" pos:column="33">zSqlCopy<pos:position pos:line="82" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="82" pos:column="43">&amp;<pos:position pos:line="82" pos:column="48"/></operator><name pos:line="82" pos:column="44">zErrMsg<pos:position pos:line="82" pos:column="51"/></name></expr></argument>)<pos:position pos:line="82" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="53"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="83" pos:column="7">sParse<pos:position pos:line="83" pos:column="13"/></name><operator pos:line="83" pos:column="13">.<pos:position pos:line="83" pos:column="14"/></operator><name pos:line="83" pos:column="14">zTail<pos:position pos:line="83" pos:column="19"/></name></name> <operator pos:line="83" pos:column="20">=<pos:position pos:line="83" pos:column="21"/></operator> <operator pos:line="83" pos:column="22">&amp;<pos:position pos:line="83" pos:column="27"/></operator><name><name pos:line="83" pos:column="23">zSql<pos:position pos:line="83" pos:column="27"/></name><index pos:line="83" pos:column="27">[<expr><name><name pos:line="83" pos:column="28">sParse<pos:position pos:line="83" pos:column="34"/></name><operator pos:line="83" pos:column="34">.<pos:position pos:line="83" pos:column="35"/></operator><name pos:line="83" pos:column="35">zTail<pos:position pos:line="83" pos:column="40"/></name></name><operator pos:line="83" pos:column="40">-<pos:position pos:line="83" pos:column="41"/></operator><name pos:line="83" pos:column="41">zSqlCopy<pos:position pos:line="83" pos:column="49"/></name></expr>]<pos:position pos:line="83" pos:column="50"/></index></name></expr>;<pos:position pos:line="83" pos:column="51"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="84" pos:column="7">sqlite3DbFree<pos:position pos:line="84" pos:column="20"/></name><argument_list pos:line="84" pos:column="20">(<argument><expr><name pos:line="84" pos:column="21">db<pos:position pos:line="84" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="84" pos:column="25">zSqlCopy<pos:position pos:line="84" pos:column="33"/></name></expr></argument>)<pos:position pos:line="84" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="35"/></expr_stmt>
    }<pos:position pos:line="85" pos:column="6"/></block></then><else pos:line="85" pos:column="6">else<block pos:line="85" pos:column="10">{
      <expr_stmt><expr><name><name pos:line="86" pos:column="7">sParse<pos:position pos:line="86" pos:column="13"/></name><operator pos:line="86" pos:column="13">.<pos:position pos:line="86" pos:column="14"/></operator><name pos:line="86" pos:column="14">zTail<pos:position pos:line="86" pos:column="19"/></name></name> <operator pos:line="86" pos:column="20">=<pos:position pos:line="86" pos:column="21"/></operator> <operator pos:line="86" pos:column="22">&amp;<pos:position pos:line="86" pos:column="27"/></operator><name><name pos:line="86" pos:column="23">zSql<pos:position pos:line="86" pos:column="27"/></name><index pos:line="86" pos:column="27">[<expr><name pos:line="86" pos:column="28">nBytes<pos:position pos:line="86" pos:column="34"/></name></expr>]<pos:position pos:line="86" pos:column="35"/></index></name></expr>;<pos:position pos:line="86" pos:column="36"/></expr_stmt>
    }<pos:position pos:line="87" pos:column="6"/></block></else></if>
  }<pos:position pos:line="88" pos:column="4"/></block></then><else pos:line="88" pos:column="4">else<block pos:line="88" pos:column="8">{
    <expr_stmt><expr><call><name pos:line="89" pos:column="5">sqlite3RunParser<pos:position pos:line="89" pos:column="21"/></name><argument_list pos:line="89" pos:column="21">(<argument><expr><operator pos:line="89" pos:column="22">&amp;<pos:position pos:line="89" pos:column="27"/></operator><name pos:line="89" pos:column="23">sParse<pos:position pos:line="89" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="89" pos:column="31">zSql<pos:position pos:line="89" pos:column="35"/></name></expr></argument>, <argument><expr><operator pos:line="89" pos:column="37">&amp;<pos:position pos:line="89" pos:column="42"/></operator><name pos:line="89" pos:column="38">zErrMsg<pos:position pos:line="89" pos:column="45"/></name></expr></argument>)<pos:position pos:line="89" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="47"/></expr_stmt>
  }<pos:position pos:line="90" pos:column="4"/></block></else></if>
  <expr_stmt><expr><call><name pos:line="91" pos:column="3">assert<pos:position pos:line="91" pos:column="9"/></name><argument_list pos:line="91" pos:column="9">( <argument><expr><literal type="number" pos:line="91" pos:column="11">0<pos:position pos:line="91" pos:column="12"/></literal><operator pos:line="91" pos:column="12">==<pos:position pos:line="91" pos:column="14"/></operator><name><name pos:line="91" pos:column="14">sParse<pos:position pos:line="91" pos:column="20"/></name><operator pos:line="91" pos:column="20">.<pos:position pos:line="91" pos:column="21"/></operator><name pos:line="91" pos:column="21">nQueryLoop<pos:position pos:line="91" pos:column="31"/></name></name></expr></argument> )<pos:position pos:line="91" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="91" pos:column="34"/></expr_stmt>

  <if pos:line="93" pos:column="3">if<condition pos:line="93" pos:column="5">( <expr><name><name pos:line="93" pos:column="7">sParse<pos:position pos:line="93" pos:column="13"/></name><operator pos:line="93" pos:column="13">.<pos:position pos:line="93" pos:column="14"/></operator><name pos:line="93" pos:column="14">rc<pos:position pos:line="93" pos:column="16"/></name></name><operator pos:line="93" pos:column="16">==<pos:position pos:line="93" pos:column="18"/></operator><name pos:line="93" pos:column="18">SQLITE_DONE<pos:position pos:line="93" pos:column="29"/></name></expr> )<pos:position pos:line="93" pos:column="31"/></condition><then pos:line="93" pos:column="31"> <block type="pseudo"><expr_stmt><expr><name><name pos:line="93" pos:column="32">sParse<pos:position pos:line="93" pos:column="38"/></name><operator pos:line="93" pos:column="38">.<pos:position pos:line="93" pos:column="39"/></operator><name pos:line="93" pos:column="39">rc<pos:position pos:line="93" pos:column="41"/></name></name> <operator pos:line="93" pos:column="42">=<pos:position pos:line="93" pos:column="43"/></operator> <name pos:line="93" pos:column="44">SQLITE_OK<pos:position pos:line="93" pos:column="53"/></name></expr>;<pos:position pos:line="93" pos:column="54"/></expr_stmt></block></then></if>
  <if pos:line="94" pos:column="3">if<condition pos:line="94" pos:column="5">( <expr><name><name pos:line="94" pos:column="7">sParse<pos:position pos:line="94" pos:column="13"/></name><operator pos:line="94" pos:column="13">.<pos:position pos:line="94" pos:column="14"/></operator><name pos:line="94" pos:column="14">checkSchema<pos:position pos:line="94" pos:column="25"/></name></name></expr> )<pos:position pos:line="94" pos:column="27"/></condition><then><block pos:line="94" pos:column="27">{
    <expr_stmt><expr><call><name pos:line="95" pos:column="5">schemaIsValid<pos:position pos:line="95" pos:column="18"/></name><argument_list pos:line="95" pos:column="18">(<argument><expr><operator pos:line="95" pos:column="19">&amp;<pos:position pos:line="95" pos:column="24"/></operator><name pos:line="95" pos:column="20">sParse<pos:position pos:line="95" pos:column="26"/></name></expr></argument>)<pos:position pos:line="95" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="95" pos:column="28"/></expr_stmt>
  }<pos:position pos:line="96" pos:column="4"/></block></then></if>
  <if pos:line="97" pos:column="3">if<condition pos:line="97" pos:column="5">( <expr><name><name pos:line="97" pos:column="7">db<pos:position pos:line="97" pos:column="9"/></name><operator pos:line="97" pos:column="9">-&gt;<pos:position pos:line="97" pos:column="14"/></operator><name pos:line="97" pos:column="11">mallocFailed<pos:position pos:line="97" pos:column="23"/></name></name></expr> )<pos:position pos:line="97" pos:column="25"/></condition><then><block pos:line="97" pos:column="25">{
    <expr_stmt><expr><name><name pos:line="98" pos:column="5">sParse<pos:position pos:line="98" pos:column="11"/></name><operator pos:line="98" pos:column="11">.<pos:position pos:line="98" pos:column="12"/></operator><name pos:line="98" pos:column="12">rc<pos:position pos:line="98" pos:column="14"/></name></name> <operator pos:line="98" pos:column="15">=<pos:position pos:line="98" pos:column="16"/></operator> <name pos:line="98" pos:column="17">SQLITE_NOMEM_BKPT<pos:position pos:line="98" pos:column="34"/></name></expr>;<pos:position pos:line="98" pos:column="35"/></expr_stmt>
  }<pos:position pos:line="99" pos:column="4"/></block></then></if>
  <if pos:line="100" pos:column="3">if<condition pos:line="100" pos:column="5">( <expr><name pos:line="100" pos:column="7">pzTail<pos:position pos:line="100" pos:column="13"/></name></expr> )<pos:position pos:line="100" pos:column="15"/></condition><then><block pos:line="100" pos:column="15">{
    <expr_stmt><expr><operator pos:line="101" pos:column="5">*<pos:position pos:line="101" pos:column="6"/></operator><name pos:line="101" pos:column="6">pzTail<pos:position pos:line="101" pos:column="12"/></name> <operator pos:line="101" pos:column="13">=<pos:position pos:line="101" pos:column="14"/></operator> <name><name pos:line="101" pos:column="15">sParse<pos:position pos:line="101" pos:column="21"/></name><operator pos:line="101" pos:column="21">.<pos:position pos:line="101" pos:column="22"/></operator><name pos:line="101" pos:column="22">zTail<pos:position pos:line="101" pos:column="27"/></name></name></expr>;<pos:position pos:line="101" pos:column="28"/></expr_stmt>
  }<pos:position pos:line="102" pos:column="4"/></block></then></if>
  <expr_stmt><expr><name pos:line="103" pos:column="3">rc<pos:position pos:line="103" pos:column="5"/></name> <operator pos:line="103" pos:column="6">=<pos:position pos:line="103" pos:column="7"/></operator> <name><name pos:line="103" pos:column="8">sParse<pos:position pos:line="103" pos:column="14"/></name><operator pos:line="103" pos:column="14">.<pos:position pos:line="103" pos:column="15"/></operator><name pos:line="103" pos:column="15">rc<pos:position pos:line="103" pos:column="17"/></name></name></expr>;<pos:position pos:line="103" pos:column="18"/></expr_stmt>

<cpp:ifndef pos:line="105" pos:column="1">#<cpp:directive pos:line="105" pos:column="2">ifndef<pos:position pos:line="105" pos:column="8"/></cpp:directive> <name pos:line="105" pos:column="9">SQLITE_OMIT_EXPLAIN<pos:position pos:line="105" pos:column="28"/></name></cpp:ifndef>
  <if pos:line="106" pos:column="3">if<condition pos:line="106" pos:column="5">( <expr><name pos:line="106" pos:column="7">rc<pos:position pos:line="106" pos:column="9"/></name><operator pos:line="106" pos:column="9">==<pos:position pos:line="106" pos:column="11"/></operator><name pos:line="106" pos:column="11">SQLITE_OK<pos:position pos:line="106" pos:column="20"/></name> <operator pos:line="106" pos:column="21">&amp;&amp;<pos:position pos:line="106" pos:column="31"/></operator> <name><name pos:line="106" pos:column="24">sParse<pos:position pos:line="106" pos:column="30"/></name><operator pos:line="106" pos:column="30">.<pos:position pos:line="106" pos:column="31"/></operator><name pos:line="106" pos:column="31">pVdbe<pos:position pos:line="106" pos:column="36"/></name></name> <operator pos:line="106" pos:column="37">&amp;&amp;<pos:position pos:line="106" pos:column="47"/></operator> <name><name pos:line="106" pos:column="40">sParse<pos:position pos:line="106" pos:column="46"/></name><operator pos:line="106" pos:column="46">.<pos:position pos:line="106" pos:column="47"/></operator><name pos:line="106" pos:column="47">explain<pos:position pos:line="106" pos:column="54"/></name></name></expr> )<pos:position pos:line="106" pos:column="56"/></condition><then><block pos:line="106" pos:column="56">{
    <decl_stmt><decl><specifier pos:line="107" pos:column="5">static<pos:position pos:line="107" pos:column="11"/></specifier> <type><specifier pos:line="107" pos:column="12">const<pos:position pos:line="107" pos:column="17"/></specifier> <name pos:line="107" pos:column="18">char<pos:position pos:line="107" pos:column="22"/></name> <modifier pos:line="107" pos:column="23">*<pos:position pos:line="107" pos:column="24"/></modifier> <specifier pos:line="107" pos:column="25">const<pos:position pos:line="107" pos:column="30"/></specifier></type> <name><name pos:line="107" pos:column="31">azColName<pos:position pos:line="107" pos:column="40"/></name><index pos:line="107" pos:column="40">[]<pos:position pos:line="107" pos:column="42"/></index></name> <init pos:line="107" pos:column="43">= <expr><block pos:line="107" pos:column="45">{
       <expr><literal type="string" pos:line="108" pos:column="8">"addr"<pos:position pos:line="108" pos:column="14"/></literal></expr>, <expr><literal type="string" pos:line="108" pos:column="16">"opcode"<pos:position pos:line="108" pos:column="24"/></literal></expr>, <expr><literal type="string" pos:line="108" pos:column="26">"p1"<pos:position pos:line="108" pos:column="30"/></literal></expr>, <expr><literal type="string" pos:line="108" pos:column="32">"p2"<pos:position pos:line="108" pos:column="36"/></literal></expr>, <expr><literal type="string" pos:line="108" pos:column="38">"p3"<pos:position pos:line="108" pos:column="42"/></literal></expr>, <expr><literal type="string" pos:line="108" pos:column="44">"p4"<pos:position pos:line="108" pos:column="48"/></literal></expr>, <expr><literal type="string" pos:line="108" pos:column="50">"p5"<pos:position pos:line="108" pos:column="54"/></literal></expr>, <expr><literal type="string" pos:line="108" pos:column="56">"comment"<pos:position pos:line="108" pos:column="65"/></literal></expr>,
       <expr><literal type="string" pos:line="109" pos:column="8">"selectid"<pos:position pos:line="109" pos:column="18"/></literal></expr>, <expr><literal type="string" pos:line="109" pos:column="20">"order"<pos:position pos:line="109" pos:column="27"/></literal></expr>, <expr><literal type="string" pos:line="109" pos:column="29">"from"<pos:position pos:line="109" pos:column="35"/></literal></expr>, <expr><literal type="string" pos:line="109" pos:column="37">"detail"<pos:position pos:line="109" pos:column="45"/></literal></expr>
    }<pos:position pos:line="110" pos:column="6"/></block></expr></init></decl>;<pos:position pos:line="110" pos:column="7"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="111" pos:column="5">int<pos:position pos:line="111" pos:column="8"/></name></type> <name pos:line="111" pos:column="9">iFirst<pos:position pos:line="111" pos:column="15"/></name></decl>, <decl><type ref="prev"/><name pos:line="111" pos:column="17">mx<pos:position pos:line="111" pos:column="19"/></name></decl>;<pos:position pos:line="111" pos:column="20"/></decl_stmt>
    <if pos:line="112" pos:column="5">if<condition pos:line="112" pos:column="7">( <expr><name><name pos:line="112" pos:column="9">sParse<pos:position pos:line="112" pos:column="15"/></name><operator pos:line="112" pos:column="15">.<pos:position pos:line="112" pos:column="16"/></operator><name pos:line="112" pos:column="16">explain<pos:position pos:line="112" pos:column="23"/></name></name><operator pos:line="112" pos:column="23">==<pos:position pos:line="112" pos:column="25"/></operator><literal type="number" pos:line="112" pos:column="25">2<pos:position pos:line="112" pos:column="26"/></literal></expr> )<pos:position pos:line="112" pos:column="28"/></condition><then><block pos:line="112" pos:column="28">{
      <expr_stmt><expr><call><name pos:line="113" pos:column="7">sqlite3VdbeSetNumCols<pos:position pos:line="113" pos:column="28"/></name><argument_list pos:line="113" pos:column="28">(<argument><expr><name><name pos:line="113" pos:column="29">sParse<pos:position pos:line="113" pos:column="35"/></name><operator pos:line="113" pos:column="35">.<pos:position pos:line="113" pos:column="36"/></operator><name pos:line="113" pos:column="36">pVdbe<pos:position pos:line="113" pos:column="41"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="113" pos:column="43">4<pos:position pos:line="113" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="113" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="113" pos:column="46"/></expr_stmt>
      <expr_stmt><expr><name pos:line="114" pos:column="7">iFirst<pos:position pos:line="114" pos:column="13"/></name> <operator pos:line="114" pos:column="14">=<pos:position pos:line="114" pos:column="15"/></operator> <literal type="number" pos:line="114" pos:column="16">8<pos:position pos:line="114" pos:column="17"/></literal></expr>;<pos:position pos:line="114" pos:column="18"/></expr_stmt>
      <expr_stmt><expr><name pos:line="115" pos:column="7">mx<pos:position pos:line="115" pos:column="9"/></name> <operator pos:line="115" pos:column="10">=<pos:position pos:line="115" pos:column="11"/></operator> <literal type="number" pos:line="115" pos:column="12">12<pos:position pos:line="115" pos:column="14"/></literal></expr>;<pos:position pos:line="115" pos:column="15"/></expr_stmt>
    }<pos:position pos:line="116" pos:column="6"/></block></then><else pos:line="116" pos:column="6">else<block pos:line="116" pos:column="10">{
      <expr_stmt><expr><call><name pos:line="117" pos:column="7">sqlite3VdbeSetNumCols<pos:position pos:line="117" pos:column="28"/></name><argument_list pos:line="117" pos:column="28">(<argument><expr><name><name pos:line="117" pos:column="29">sParse<pos:position pos:line="117" pos:column="35"/></name><operator pos:line="117" pos:column="35">.<pos:position pos:line="117" pos:column="36"/></operator><name pos:line="117" pos:column="36">pVdbe<pos:position pos:line="117" pos:column="41"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="117" pos:column="43">8<pos:position pos:line="117" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="117" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="117" pos:column="46"/></expr_stmt>
      <expr_stmt><expr><name pos:line="118" pos:column="7">iFirst<pos:position pos:line="118" pos:column="13"/></name> <operator pos:line="118" pos:column="14">=<pos:position pos:line="118" pos:column="15"/></operator> <literal type="number" pos:line="118" pos:column="16">0<pos:position pos:line="118" pos:column="17"/></literal></expr>;<pos:position pos:line="118" pos:column="18"/></expr_stmt>
      <expr_stmt><expr><name pos:line="119" pos:column="7">mx<pos:position pos:line="119" pos:column="9"/></name> <operator pos:line="119" pos:column="10">=<pos:position pos:line="119" pos:column="11"/></operator> <literal type="number" pos:line="119" pos:column="12">8<pos:position pos:line="119" pos:column="13"/></literal></expr>;<pos:position pos:line="119" pos:column="14"/></expr_stmt>
    }<pos:position pos:line="120" pos:column="6"/></block></else></if>
    <for pos:line="121" pos:column="5">for<control pos:line="121" pos:column="8">(<init><expr><name pos:line="121" pos:column="9">i<pos:position pos:line="121" pos:column="10"/></name><operator pos:line="121" pos:column="10">=<pos:position pos:line="121" pos:column="11"/></operator><name pos:line="121" pos:column="11">iFirst<pos:position pos:line="121" pos:column="17"/></name></expr>;<pos:position pos:line="121" pos:column="18"/></init> <condition><expr><name pos:line="121" pos:column="19">i<pos:position pos:line="121" pos:column="20"/></name><operator pos:line="121" pos:column="20">&lt;<pos:position pos:line="121" pos:column="24"/></operator><name pos:line="121" pos:column="21">mx<pos:position pos:line="121" pos:column="23"/></name></expr>;<pos:position pos:line="121" pos:column="24"/></condition> <incr><expr><name pos:line="121" pos:column="25">i<pos:position pos:line="121" pos:column="26"/></name><operator pos:line="121" pos:column="26">++<pos:position pos:line="121" pos:column="28"/></operator></expr></incr>)<pos:position pos:line="121" pos:column="29"/></control><block pos:line="121" pos:column="29">{
      <expr_stmt><expr><call><name pos:line="122" pos:column="7">sqlite3VdbeSetColName<pos:position pos:line="122" pos:column="28"/></name><argument_list pos:line="122" pos:column="28">(<argument><expr><name><name pos:line="122" pos:column="29">sParse<pos:position pos:line="122" pos:column="35"/></name><operator pos:line="122" pos:column="35">.<pos:position pos:line="122" pos:column="36"/></operator><name pos:line="122" pos:column="36">pVdbe<pos:position pos:line="122" pos:column="41"/></name></name></expr></argument>, <argument><expr><name pos:line="122" pos:column="43">i<pos:position pos:line="122" pos:column="44"/></name><operator pos:line="122" pos:column="44">-<pos:position pos:line="122" pos:column="45"/></operator><name pos:line="122" pos:column="45">iFirst<pos:position pos:line="122" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="122" pos:column="53">COLNAME_NAME<pos:position pos:line="122" pos:column="65"/></name></expr></argument>,
                            <argument><expr><name><name pos:line="123" pos:column="29">azColName<pos:position pos:line="123" pos:column="38"/></name><index pos:line="123" pos:column="38">[<expr><name pos:line="123" pos:column="39">i<pos:position pos:line="123" pos:column="40"/></name></expr>]<pos:position pos:line="123" pos:column="41"/></index></name></expr></argument>, <argument><expr><name pos:line="123" pos:column="43">SQLITE_STATIC<pos:position pos:line="123" pos:column="56"/></name></expr></argument>)<pos:position pos:line="123" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="123" pos:column="58"/></expr_stmt>
    }<pos:position pos:line="124" pos:column="6"/></block></for>
  }<pos:position pos:line="125" pos:column="4"/></block></then></if>
<cpp:endif pos:line="126" pos:column="1">#<cpp:directive pos:line="126" pos:column="2">endif<pos:position pos:line="126" pos:column="7"/></cpp:directive></cpp:endif>

  <if pos:line="128" pos:column="3">if<condition pos:line="128" pos:column="5">( <expr><name><name pos:line="128" pos:column="7">db<pos:position pos:line="128" pos:column="9"/></name><operator pos:line="128" pos:column="9">-&gt;<pos:position pos:line="128" pos:column="14"/></operator><name pos:line="128" pos:column="11">init<pos:position pos:line="128" pos:column="15"/></name><operator pos:line="128" pos:column="15">.<pos:position pos:line="128" pos:column="16"/></operator><name pos:line="128" pos:column="16">busy<pos:position pos:line="128" pos:column="20"/></name></name><operator pos:line="128" pos:column="20">==<pos:position pos:line="128" pos:column="22"/></operator><literal type="number" pos:line="128" pos:column="22">0<pos:position pos:line="128" pos:column="23"/></literal></expr> )<pos:position pos:line="128" pos:column="25"/></condition><then><block pos:line="128" pos:column="25">{
    <expr_stmt><expr><call><name pos:line="129" pos:column="5">sqlite3VdbeSetSql<pos:position pos:line="129" pos:column="22"/></name><argument_list pos:line="129" pos:column="22">(<argument><expr><name><name pos:line="129" pos:column="23">sParse<pos:position pos:line="129" pos:column="29"/></name><operator pos:line="129" pos:column="29">.<pos:position pos:line="129" pos:column="30"/></operator><name pos:line="129" pos:column="30">pVdbe<pos:position pos:line="129" pos:column="35"/></name></name></expr></argument>, <argument><expr><name pos:line="129" pos:column="37">zSql<pos:position pos:line="129" pos:column="41"/></name></expr></argument>, <argument><expr><call pos:line="129" pos:column="43">(<name pos:line="129" pos:column="44">int<pos:position pos:line="129" pos:column="47"/></name>)<argument_list pos:line="129" pos:column="48">(<argument><expr><name><name pos:line="129" pos:column="49">sParse<pos:position pos:line="129" pos:column="55"/></name><operator pos:line="129" pos:column="55">.<pos:position pos:line="129" pos:column="56"/></operator><name pos:line="129" pos:column="56">zTail<pos:position pos:line="129" pos:column="61"/></name></name><operator pos:line="129" pos:column="61">-<pos:position pos:line="129" pos:column="62"/></operator><name pos:line="129" pos:column="62">zSql<pos:position pos:line="129" pos:column="66"/></name></expr></argument>)<pos:position pos:line="129" pos:column="67"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="129" pos:column="69">prepFlags<pos:position pos:line="129" pos:column="78"/></name></expr></argument>)<pos:position pos:line="129" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="129" pos:column="80"/></expr_stmt>
  }<pos:position pos:line="130" pos:column="4"/></block></then></if>
  <if pos:line="131" pos:column="3">if<condition pos:line="131" pos:column="5">( <expr><name><name pos:line="131" pos:column="7">sParse<pos:position pos:line="131" pos:column="13"/></name><operator pos:line="131" pos:column="13">.<pos:position pos:line="131" pos:column="14"/></operator><name pos:line="131" pos:column="14">pVdbe<pos:position pos:line="131" pos:column="19"/></name></name> <operator pos:line="131" pos:column="20">&amp;&amp;<pos:position pos:line="131" pos:column="30"/></operator> <operator pos:line="131" pos:column="23">(<pos:position pos:line="131" pos:column="24"/></operator><name pos:line="131" pos:column="24">rc<pos:position pos:line="131" pos:column="26"/></name><operator pos:line="131" pos:column="26">!=<pos:position pos:line="131" pos:column="28"/></operator><name pos:line="131" pos:column="28">SQLITE_OK<pos:position pos:line="131" pos:column="37"/></name> <operator pos:line="131" pos:column="38">||<pos:position pos:line="131" pos:column="40"/></operator> <name><name pos:line="131" pos:column="41">db<pos:position pos:line="131" pos:column="43"/></name><operator pos:line="131" pos:column="43">-&gt;<pos:position pos:line="131" pos:column="48"/></operator><name pos:line="131" pos:column="45">mallocFailed<pos:position pos:line="131" pos:column="57"/></name></name><operator pos:line="131" pos:column="57">)<pos:position pos:line="131" pos:column="58"/></operator></expr> )<pos:position pos:line="131" pos:column="60"/></condition><then><block pos:line="131" pos:column="60">{
    <expr_stmt><expr><call><name pos:line="132" pos:column="5">sqlite3VdbeFinalize<pos:position pos:line="132" pos:column="24"/></name><argument_list pos:line="132" pos:column="24">(<argument><expr><name><name pos:line="132" pos:column="25">sParse<pos:position pos:line="132" pos:column="31"/></name><operator pos:line="132" pos:column="31">.<pos:position pos:line="132" pos:column="32"/></operator><name pos:line="132" pos:column="32">pVdbe<pos:position pos:line="132" pos:column="37"/></name></name></expr></argument>)<pos:position pos:line="132" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="132" pos:column="39"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="133" pos:column="5">assert<pos:position pos:line="133" pos:column="11"/></name><argument_list pos:line="133" pos:column="11">(<argument><expr><operator pos:line="133" pos:column="12">!<pos:position pos:line="133" pos:column="13"/></operator><operator pos:line="133" pos:column="13">(<pos:position pos:line="133" pos:column="14"/></operator><operator pos:line="133" pos:column="14">*<pos:position pos:line="133" pos:column="15"/></operator><name pos:line="133" pos:column="15">ppStmt<pos:position pos:line="133" pos:column="21"/></name><operator pos:line="133" pos:column="21">)<pos:position pos:line="133" pos:column="22"/></operator></expr></argument>)<pos:position pos:line="133" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="133" pos:column="24"/></expr_stmt>
  }<pos:position pos:line="134" pos:column="4"/></block></then><else pos:line="134" pos:column="4">else<block pos:line="134" pos:column="8">{
    <expr_stmt><expr><operator pos:line="135" pos:column="5">*<pos:position pos:line="135" pos:column="6"/></operator><name pos:line="135" pos:column="6">ppStmt<pos:position pos:line="135" pos:column="12"/></name> <operator pos:line="135" pos:column="13">=<pos:position pos:line="135" pos:column="14"/></operator> <operator pos:line="135" pos:column="15">(<pos:position pos:line="135" pos:column="16"/></operator><name pos:line="135" pos:column="16">sqlite3_stmt<pos:position pos:line="135" pos:column="28"/></name><operator pos:line="135" pos:column="28">*<pos:position pos:line="135" pos:column="29"/></operator><operator pos:line="135" pos:column="29">)<pos:position pos:line="135" pos:column="30"/></operator><name><name pos:line="135" pos:column="30">sParse<pos:position pos:line="135" pos:column="36"/></name><operator pos:line="135" pos:column="36">.<pos:position pos:line="135" pos:column="37"/></operator><name pos:line="135" pos:column="37">pVdbe<pos:position pos:line="135" pos:column="42"/></name></name></expr>;<pos:position pos:line="135" pos:column="43"/></expr_stmt>
  }<pos:position pos:line="136" pos:column="4"/></block></else></if>

  <if pos:line="138" pos:column="3">if<condition pos:line="138" pos:column="5">( <expr><name pos:line="138" pos:column="7">zErrMsg<pos:position pos:line="138" pos:column="14"/></name></expr> )<pos:position pos:line="138" pos:column="16"/></condition><then><block pos:line="138" pos:column="16">{
    <expr_stmt><expr><call><name pos:line="139" pos:column="5">sqlite3ErrorWithMsg<pos:position pos:line="139" pos:column="24"/></name><argument_list pos:line="139" pos:column="24">(<argument><expr><name pos:line="139" pos:column="25">db<pos:position pos:line="139" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="139" pos:column="29">rc<pos:position pos:line="139" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="139" pos:column="33">"%s"<pos:position pos:line="139" pos:column="37"/></literal></expr></argument>, <argument><expr><name pos:line="139" pos:column="39">zErrMsg<pos:position pos:line="139" pos:column="46"/></name></expr></argument>)<pos:position pos:line="139" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="139" pos:column="48"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="140" pos:column="5">sqlite3DbFree<pos:position pos:line="140" pos:column="18"/></name><argument_list pos:line="140" pos:column="18">(<argument><expr><name pos:line="140" pos:column="19">db<pos:position pos:line="140" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="140" pos:column="23">zErrMsg<pos:position pos:line="140" pos:column="30"/></name></expr></argument>)<pos:position pos:line="140" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="140" pos:column="32"/></expr_stmt>
  }<pos:position pos:line="141" pos:column="4"/></block></then><else pos:line="141" pos:column="4">else<block pos:line="141" pos:column="8">{
    <expr_stmt><expr><call><name pos:line="142" pos:column="5">sqlite3Error<pos:position pos:line="142" pos:column="17"/></name><argument_list pos:line="142" pos:column="17">(<argument><expr><name pos:line="142" pos:column="18">db<pos:position pos:line="142" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="142" pos:column="22">rc<pos:position pos:line="142" pos:column="24"/></name></expr></argument>)<pos:position pos:line="142" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="142" pos:column="26"/></expr_stmt>
  }<pos:position pos:line="143" pos:column="4"/></block></else></if>

  <comment type="block" pos:line="145" pos:column="3">/* Delete any TriggerPrg structures allocated while parsing this statement. */</comment>
  <while pos:line="146" pos:column="3">while<condition pos:line="146" pos:column="8">( <expr><name><name pos:line="146" pos:column="10">sParse<pos:position pos:line="146" pos:column="16"/></name><operator pos:line="146" pos:column="16">.<pos:position pos:line="146" pos:column="17"/></operator><name pos:line="146" pos:column="17">pTriggerPrg<pos:position pos:line="146" pos:column="28"/></name></name></expr> )<pos:position pos:line="146" pos:column="30"/></condition><block pos:line="146" pos:column="30">{
    <decl_stmt><decl><type><name pos:line="147" pos:column="5">TriggerPrg<pos:position pos:line="147" pos:column="15"/></name> <modifier pos:line="147" pos:column="16">*<pos:position pos:line="147" pos:column="17"/></modifier></type><name pos:line="147" pos:column="17">pT<pos:position pos:line="147" pos:column="19"/></name> <init pos:line="147" pos:column="20">= <expr><name><name pos:line="147" pos:column="22">sParse<pos:position pos:line="147" pos:column="28"/></name><operator pos:line="147" pos:column="28">.<pos:position pos:line="147" pos:column="29"/></operator><name pos:line="147" pos:column="29">pTriggerPrg<pos:position pos:line="147" pos:column="40"/></name></name></expr></init></decl>;<pos:position pos:line="147" pos:column="41"/></decl_stmt>
    <expr_stmt><expr><name><name pos:line="148" pos:column="5">sParse<pos:position pos:line="148" pos:column="11"/></name><operator pos:line="148" pos:column="11">.<pos:position pos:line="148" pos:column="12"/></operator><name pos:line="148" pos:column="12">pTriggerPrg<pos:position pos:line="148" pos:column="23"/></name></name> <operator pos:line="148" pos:column="24">=<pos:position pos:line="148" pos:column="25"/></operator> <name><name pos:line="148" pos:column="26">pT<pos:position pos:line="148" pos:column="28"/></name><operator pos:line="148" pos:column="28">-&gt;<pos:position pos:line="148" pos:column="33"/></operator><name pos:line="148" pos:column="30">pNext<pos:position pos:line="148" pos:column="35"/></name></name></expr>;<pos:position pos:line="148" pos:column="36"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="149" pos:column="5">sqlite3DbFree<pos:position pos:line="149" pos:column="18"/></name><argument_list pos:line="149" pos:column="18">(<argument><expr><name pos:line="149" pos:column="19">db<pos:position pos:line="149" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="149" pos:column="23">pT<pos:position pos:line="149" pos:column="25"/></name></expr></argument>)<pos:position pos:line="149" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="149" pos:column="27"/></expr_stmt>
  }<pos:position pos:line="150" pos:column="4"/></block></while>

<label><name pos:line="152" pos:column="1">end_prepare<pos:position pos:line="152" pos:column="12"/></name>:<pos:position pos:line="152" pos:column="13"/></label>

  <expr_stmt><expr><call><name pos:line="154" pos:column="3">sqlite3ParserReset<pos:position pos:line="154" pos:column="21"/></name><argument_list pos:line="154" pos:column="21">(<argument><expr><operator pos:line="154" pos:column="22">&amp;<pos:position pos:line="154" pos:column="27"/></operator><name pos:line="154" pos:column="23">sParse<pos:position pos:line="154" pos:column="29"/></name></expr></argument>)<pos:position pos:line="154" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="154" pos:column="31"/></expr_stmt>
  <expr_stmt><expr><name pos:line="155" pos:column="3">rc<pos:position pos:line="155" pos:column="5"/></name> <operator pos:line="155" pos:column="6">=<pos:position pos:line="155" pos:column="7"/></operator> <call><name pos:line="155" pos:column="8">sqlite3ApiExit<pos:position pos:line="155" pos:column="22"/></name><argument_list pos:line="155" pos:column="22">(<argument><expr><name pos:line="155" pos:column="23">db<pos:position pos:line="155" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="155" pos:column="27">rc<pos:position pos:line="155" pos:column="29"/></name></expr></argument>)<pos:position pos:line="155" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="155" pos:column="31"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="156" pos:column="3">assert<pos:position pos:line="156" pos:column="9"/></name><argument_list pos:line="156" pos:column="9">( <argument><expr><operator pos:line="156" pos:column="11">(<pos:position pos:line="156" pos:column="12"/></operator><name pos:line="156" pos:column="12">rc<pos:position pos:line="156" pos:column="14"/></name><operator pos:line="156" pos:column="14">&amp;<pos:position pos:line="156" pos:column="19"/></operator><name><name pos:line="156" pos:column="15">db<pos:position pos:line="156" pos:column="17"/></name><operator pos:line="156" pos:column="17">-&gt;<pos:position pos:line="156" pos:column="22"/></operator><name pos:line="156" pos:column="19">errMask<pos:position pos:line="156" pos:column="26"/></name></name><operator pos:line="156" pos:column="26">)<pos:position pos:line="156" pos:column="27"/></operator><operator pos:line="156" pos:column="27">==<pos:position pos:line="156" pos:column="29"/></operator><name pos:line="156" pos:column="29">rc<pos:position pos:line="156" pos:column="31"/></name></expr></argument> )<pos:position pos:line="156" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="156" pos:column="34"/></expr_stmt>
  <return pos:line="157" pos:column="3">return <expr><name pos:line="157" pos:column="10">rc<pos:position pos:line="157" pos:column="12"/></name></expr>;<pos:position pos:line="157" pos:column="13"/></return>
}<pos:position pos:line="158" pos:column="2"/></block></function></unit>
