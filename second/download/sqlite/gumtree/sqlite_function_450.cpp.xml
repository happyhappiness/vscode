<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/sqlite/gumtree/sqlite_function_450.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">sqlite3RunParser<pos:position pos:line="1" pos:column="21"/></name><parameter_list pos:line="1" pos:column="21">(<parameter><decl><type><name pos:line="1" pos:column="22">Parse<pos:position pos:line="1" pos:column="27"/></name> <modifier pos:line="1" pos:column="28">*<pos:position pos:line="1" pos:column="29"/></modifier></type><name pos:line="1" pos:column="29">pParse<pos:position pos:line="1" pos:column="35"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="37">const<pos:position pos:line="1" pos:column="42"/></specifier> <name pos:line="1" pos:column="43">char<pos:position pos:line="1" pos:column="47"/></name> <modifier pos:line="1" pos:column="48">*<pos:position pos:line="1" pos:column="49"/></modifier></type><name pos:line="1" pos:column="49">zSql<pos:position pos:line="1" pos:column="53"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="55">char<pos:position pos:line="1" pos:column="59"/></name> <modifier pos:line="1" pos:column="60">*<pos:position pos:line="1" pos:column="61"/></modifier><modifier pos:line="1" pos:column="61">*<pos:position pos:line="1" pos:column="62"/></modifier></type><name pos:line="1" pos:column="62">pzErrMsg<pos:position pos:line="1" pos:column="70"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="71"/></parameter_list><block pos:line="1" pos:column="71">{
  <decl_stmt><decl><type><name pos:line="2" pos:column="3">int<pos:position pos:line="2" pos:column="6"/></name></type> <name pos:line="2" pos:column="7">nErr<pos:position pos:line="2" pos:column="11"/></name> <init pos:line="2" pos:column="12">= <expr><literal type="number" pos:line="2" pos:column="14">0<pos:position pos:line="2" pos:column="15"/></literal></expr></init></decl>;<pos:position pos:line="2" pos:column="16"/></decl_stmt>                   <comment type="block" pos:line="2" pos:column="35">/* Number of errors encountered */</comment>
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">void<pos:position pos:line="3" pos:column="7"/></name> <modifier pos:line="3" pos:column="8">*<pos:position pos:line="3" pos:column="9"/></modifier></type><name pos:line="3" pos:column="9">pEngine<pos:position pos:line="3" pos:column="16"/></name></decl>;<pos:position pos:line="3" pos:column="17"/></decl_stmt>                  <comment type="block" pos:line="3" pos:column="35">/* The LEMON-generated LALR(1) parser */</comment>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">int<pos:position pos:line="4" pos:column="6"/></name></type> <name pos:line="4" pos:column="7">n<pos:position pos:line="4" pos:column="8"/></name> <init pos:line="4" pos:column="9">= <expr><literal type="number" pos:line="4" pos:column="11">0<pos:position pos:line="4" pos:column="12"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="13"/></decl_stmt>                      <comment type="block" pos:line="4" pos:column="35">/* Length of the next token token */</comment>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">int<pos:position pos:line="5" pos:column="6"/></name></type> <name pos:line="5" pos:column="7">tokenType<pos:position pos:line="5" pos:column="16"/></name></decl>;<pos:position pos:line="5" pos:column="17"/></decl_stmt>                  <comment type="block" pos:line="5" pos:column="35">/* type of the next token */</comment>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">int<pos:position pos:line="6" pos:column="6"/></name></type> <name pos:line="6" pos:column="7">lastTokenParsed<pos:position pos:line="6" pos:column="22"/></name> <init pos:line="6" pos:column="23">= <expr><operator pos:line="6" pos:column="25">-<pos:position pos:line="6" pos:column="26"/></operator><literal type="number" pos:line="6" pos:column="26">1<pos:position pos:line="6" pos:column="27"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="28"/></decl_stmt>       <comment type="block" pos:line="6" pos:column="35">/* type of the previous token */</comment>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">sqlite3<pos:position pos:line="7" pos:column="10"/></name> <modifier pos:line="7" pos:column="11">*<pos:position pos:line="7" pos:column="12"/></modifier></type><name pos:line="7" pos:column="12">db<pos:position pos:line="7" pos:column="14"/></name> <init pos:line="7" pos:column="15">= <expr><name><name pos:line="7" pos:column="17">pParse<pos:position pos:line="7" pos:column="23"/></name><operator pos:line="7" pos:column="23">-&gt;<pos:position pos:line="7" pos:column="28"/></operator><name pos:line="7" pos:column="25">db<pos:position pos:line="7" pos:column="27"/></name></name></expr></init></decl>;<pos:position pos:line="7" pos:column="28"/></decl_stmt>       <comment type="block" pos:line="7" pos:column="35">/* The database connection */</comment>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">int<pos:position pos:line="8" pos:column="6"/></name></type> <name pos:line="8" pos:column="7">mxSqlLen<pos:position pos:line="8" pos:column="15"/></name></decl>;<pos:position pos:line="8" pos:column="16"/></decl_stmt>                   <comment type="block" pos:line="8" pos:column="35">/* Max length of an SQL string */</comment>
<cpp:ifdef pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">ifdef<pos:position pos:line="9" pos:column="7"/></cpp:directive> <name pos:line="9" pos:column="8">sqlite3Parser_ENGINEALWAYSONSTACK<pos:position pos:line="9" pos:column="41"/></name></cpp:ifdef>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">yyParser<pos:position pos:line="10" pos:column="11"/></name></type> <name pos:line="10" pos:column="12">sEngine<pos:position pos:line="10" pos:column="19"/></name></decl>;<pos:position pos:line="10" pos:column="20"/></decl_stmt>    <comment type="block" pos:line="10" pos:column="24">/* Space to hold the Lemon-generated Parser object */</comment>
<cpp:endif pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">endif<pos:position pos:line="11" pos:column="7"/></cpp:directive></cpp:endif>

  <expr_stmt><expr><call><name pos:line="13" pos:column="3">assert<pos:position pos:line="13" pos:column="9"/></name><argument_list pos:line="13" pos:column="9">( <argument><expr><name pos:line="13" pos:column="11">zSql<pos:position pos:line="13" pos:column="15"/></name><operator pos:line="13" pos:column="15">!=<pos:position pos:line="13" pos:column="17"/></operator><literal type="number" pos:line="13" pos:column="17">0<pos:position pos:line="13" pos:column="18"/></literal></expr></argument> )<pos:position pos:line="13" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="21"/></expr_stmt>
  <expr_stmt><expr><name pos:line="14" pos:column="3">mxSqlLen<pos:position pos:line="14" pos:column="11"/></name> <operator pos:line="14" pos:column="12">=<pos:position pos:line="14" pos:column="13"/></operator> <name><name pos:line="14" pos:column="14">db<pos:position pos:line="14" pos:column="16"/></name><operator pos:line="14" pos:column="16">-&gt;<pos:position pos:line="14" pos:column="21"/></operator><name pos:line="14" pos:column="18">aLimit<pos:position pos:line="14" pos:column="24"/></name><index pos:line="14" pos:column="24">[<expr><name pos:line="14" pos:column="25">SQLITE_LIMIT_SQL_LENGTH<pos:position pos:line="14" pos:column="48"/></name></expr>]<pos:position pos:line="14" pos:column="49"/></index></name></expr>;<pos:position pos:line="14" pos:column="50"/></expr_stmt>
  <if pos:line="15" pos:column="3">if<condition pos:line="15" pos:column="5">( <expr><name><name pos:line="15" pos:column="7">db<pos:position pos:line="15" pos:column="9"/></name><operator pos:line="15" pos:column="9">-&gt;<pos:position pos:line="15" pos:column="14"/></operator><name pos:line="15" pos:column="11">nVdbeActive<pos:position pos:line="15" pos:column="22"/></name></name><operator pos:line="15" pos:column="22">==<pos:position pos:line="15" pos:column="24"/></operator><literal type="number" pos:line="15" pos:column="24">0<pos:position pos:line="15" pos:column="25"/></literal></expr> )<pos:position pos:line="15" pos:column="27"/></condition><then><block pos:line="15" pos:column="27">{
    <expr_stmt><expr><name><name pos:line="16" pos:column="5">db<pos:position pos:line="16" pos:column="7"/></name><operator pos:line="16" pos:column="7">-&gt;<pos:position pos:line="16" pos:column="12"/></operator><name pos:line="16" pos:column="9">u1<pos:position pos:line="16" pos:column="11"/></name><operator pos:line="16" pos:column="11">.<pos:position pos:line="16" pos:column="12"/></operator><name pos:line="16" pos:column="12">isInterrupted<pos:position pos:line="16" pos:column="25"/></name></name> <operator pos:line="16" pos:column="26">=<pos:position pos:line="16" pos:column="27"/></operator> <literal type="number" pos:line="16" pos:column="28">0<pos:position pos:line="16" pos:column="29"/></literal></expr>;<pos:position pos:line="16" pos:column="30"/></expr_stmt>
  }<pos:position pos:line="17" pos:column="4"/></block></then></if>
  <expr_stmt><expr><name><name pos:line="18" pos:column="3">pParse<pos:position pos:line="18" pos:column="9"/></name><operator pos:line="18" pos:column="9">-&gt;<pos:position pos:line="18" pos:column="14"/></operator><name pos:line="18" pos:column="11">rc<pos:position pos:line="18" pos:column="13"/></name></name> <operator pos:line="18" pos:column="14">=<pos:position pos:line="18" pos:column="15"/></operator> <name pos:line="18" pos:column="16">SQLITE_OK<pos:position pos:line="18" pos:column="25"/></name></expr>;<pos:position pos:line="18" pos:column="26"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="19" pos:column="3">pParse<pos:position pos:line="19" pos:column="9"/></name><operator pos:line="19" pos:column="9">-&gt;<pos:position pos:line="19" pos:column="14"/></operator><name pos:line="19" pos:column="11">zTail<pos:position pos:line="19" pos:column="16"/></name></name> <operator pos:line="19" pos:column="17">=<pos:position pos:line="19" pos:column="18"/></operator> <name pos:line="19" pos:column="19">zSql<pos:position pos:line="19" pos:column="23"/></name></expr>;<pos:position pos:line="19" pos:column="24"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="20" pos:column="3">assert<pos:position pos:line="20" pos:column="9"/></name><argument_list pos:line="20" pos:column="9">( <argument><expr><name pos:line="20" pos:column="11">pzErrMsg<pos:position pos:line="20" pos:column="19"/></name><operator pos:line="20" pos:column="19">!=<pos:position pos:line="20" pos:column="21"/></operator><literal type="number" pos:line="20" pos:column="21">0<pos:position pos:line="20" pos:column="22"/></literal></expr></argument> )<pos:position pos:line="20" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="25"/></expr_stmt>
  <comment type="block" pos:line="21" pos:column="3">/* sqlite3ParserTrace(stdout, "parser: "); */</comment>
<cpp:ifdef pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">ifdef<pos:position pos:line="22" pos:column="7"/></cpp:directive> <name pos:line="22" pos:column="8">sqlite3Parser_ENGINEALWAYSONSTACK<pos:position pos:line="22" pos:column="41"/></name></cpp:ifdef>
  <expr_stmt><expr><name pos:line="23" pos:column="3">pEngine<pos:position pos:line="23" pos:column="10"/></name> <operator pos:line="23" pos:column="11">=<pos:position pos:line="23" pos:column="12"/></operator> <operator pos:line="23" pos:column="13">&amp;<pos:position pos:line="23" pos:column="18"/></operator><name pos:line="23" pos:column="14">sEngine<pos:position pos:line="23" pos:column="21"/></name></expr>;<pos:position pos:line="23" pos:column="22"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="24" pos:column="3">sqlite3ParserInit<pos:position pos:line="24" pos:column="20"/></name><argument_list pos:line="24" pos:column="20">(<argument><expr><name pos:line="24" pos:column="21">pEngine<pos:position pos:line="24" pos:column="28"/></name></expr></argument>)<pos:position pos:line="24" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="30"/></expr_stmt>
<cpp:else pos:line="25" pos:column="1">#<cpp:directive pos:line="25" pos:column="2">else<pos:position pos:line="25" pos:column="6"/></cpp:directive></cpp:else>
  <expr_stmt><expr><name pos:line="26" pos:column="3">pEngine<pos:position pos:line="26" pos:column="10"/></name> <operator pos:line="26" pos:column="11">=<pos:position pos:line="26" pos:column="12"/></operator> <call><name pos:line="26" pos:column="13">sqlite3ParserAlloc<pos:position pos:line="26" pos:column="31"/></name><argument_list pos:line="26" pos:column="31">(<argument><expr><name pos:line="26" pos:column="32">sqlite3Malloc<pos:position pos:line="26" pos:column="45"/></name></expr></argument>)<pos:position pos:line="26" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="47"/></expr_stmt>
  <if pos:line="27" pos:column="3">if<condition pos:line="27" pos:column="5">( <expr><name pos:line="27" pos:column="7">pEngine<pos:position pos:line="27" pos:column="14"/></name><operator pos:line="27" pos:column="14">==<pos:position pos:line="27" pos:column="16"/></operator><literal type="number" pos:line="27" pos:column="16">0<pos:position pos:line="27" pos:column="17"/></literal></expr> )<pos:position pos:line="27" pos:column="19"/></condition><then><block pos:line="27" pos:column="19">{
    <expr_stmt><expr><call><name pos:line="28" pos:column="5">sqlite3OomFault<pos:position pos:line="28" pos:column="20"/></name><argument_list pos:line="28" pos:column="20">(<argument><expr><name pos:line="28" pos:column="21">db<pos:position pos:line="28" pos:column="23"/></name></expr></argument>)<pos:position pos:line="28" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="25"/></expr_stmt>
    <return pos:line="29" pos:column="5">return <expr><name pos:line="29" pos:column="12">SQLITE_NOMEM_BKPT<pos:position pos:line="29" pos:column="29"/></name></expr>;<pos:position pos:line="29" pos:column="30"/></return>
  }<pos:position pos:line="30" pos:column="4"/></block></then></if>
<cpp:endif pos:line="31" pos:column="1">#<cpp:directive pos:line="31" pos:column="2">endif<pos:position pos:line="31" pos:column="7"/></cpp:directive></cpp:endif>
  <expr_stmt><expr><call><name pos:line="32" pos:column="3">assert<pos:position pos:line="32" pos:column="9"/></name><argument_list pos:line="32" pos:column="9">( <argument><expr><name><name pos:line="32" pos:column="11">pParse<pos:position pos:line="32" pos:column="17"/></name><operator pos:line="32" pos:column="17">-&gt;<pos:position pos:line="32" pos:column="22"/></operator><name pos:line="32" pos:column="19">pNewTable<pos:position pos:line="32" pos:column="28"/></name></name><operator pos:line="32" pos:column="28">==<pos:position pos:line="32" pos:column="30"/></operator><literal type="number" pos:line="32" pos:column="30">0<pos:position pos:line="32" pos:column="31"/></literal></expr></argument> )<pos:position pos:line="32" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="34"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="33" pos:column="3">assert<pos:position pos:line="33" pos:column="9"/></name><argument_list pos:line="33" pos:column="9">( <argument><expr><name><name pos:line="33" pos:column="11">pParse<pos:position pos:line="33" pos:column="17"/></name><operator pos:line="33" pos:column="17">-&gt;<pos:position pos:line="33" pos:column="22"/></operator><name pos:line="33" pos:column="19">pNewTrigger<pos:position pos:line="33" pos:column="30"/></name></name><operator pos:line="33" pos:column="30">==<pos:position pos:line="33" pos:column="32"/></operator><literal type="number" pos:line="33" pos:column="32">0<pos:position pos:line="33" pos:column="33"/></literal></expr></argument> )<pos:position pos:line="33" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="36"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="34" pos:column="3">assert<pos:position pos:line="34" pos:column="9"/></name><argument_list pos:line="34" pos:column="9">( <argument><expr><name><name pos:line="34" pos:column="11">pParse<pos:position pos:line="34" pos:column="17"/></name><operator pos:line="34" pos:column="17">-&gt;<pos:position pos:line="34" pos:column="22"/></operator><name pos:line="34" pos:column="19">nVar<pos:position pos:line="34" pos:column="23"/></name></name><operator pos:line="34" pos:column="23">==<pos:position pos:line="34" pos:column="25"/></operator><literal type="number" pos:line="34" pos:column="25">0<pos:position pos:line="34" pos:column="26"/></literal></expr></argument> )<pos:position pos:line="34" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="29"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="35" pos:column="3">assert<pos:position pos:line="35" pos:column="9"/></name><argument_list pos:line="35" pos:column="9">( <argument><expr><name><name pos:line="35" pos:column="11">pParse<pos:position pos:line="35" pos:column="17"/></name><operator pos:line="35" pos:column="17">-&gt;<pos:position pos:line="35" pos:column="22"/></operator><name pos:line="35" pos:column="19">pVList<pos:position pos:line="35" pos:column="25"/></name></name><operator pos:line="35" pos:column="25">==<pos:position pos:line="35" pos:column="27"/></operator><literal type="number" pos:line="35" pos:column="27">0<pos:position pos:line="35" pos:column="28"/></literal></expr></argument> )<pos:position pos:line="35" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="31"/></expr_stmt>
  <while pos:line="36" pos:column="3">while<condition pos:line="36" pos:column="8">( <expr><literal type="number" pos:line="36" pos:column="10">1<pos:position pos:line="36" pos:column="11"/></literal></expr> )<pos:position pos:line="36" pos:column="13"/></condition><block pos:line="36" pos:column="13">{
    <if pos:line="37" pos:column="5">if<condition pos:line="37" pos:column="7">( <expr><name><name pos:line="37" pos:column="9">zSql<pos:position pos:line="37" pos:column="13"/></name><index pos:line="37" pos:column="13">[<expr><literal type="number" pos:line="37" pos:column="14">0<pos:position pos:line="37" pos:column="15"/></literal></expr>]<pos:position pos:line="37" pos:column="16"/></index></name><operator pos:line="37" pos:column="16">!=<pos:position pos:line="37" pos:column="18"/></operator><literal type="number" pos:line="37" pos:column="18">0<pos:position pos:line="37" pos:column="19"/></literal></expr> )<pos:position pos:line="37" pos:column="21"/></condition><then><block pos:line="37" pos:column="21">{
      <expr_stmt><expr><name pos:line="38" pos:column="7">n<pos:position pos:line="38" pos:column="8"/></name> <operator pos:line="38" pos:column="9">=<pos:position pos:line="38" pos:column="10"/></operator> <call><name pos:line="38" pos:column="11">sqlite3GetToken<pos:position pos:line="38" pos:column="26"/></name><argument_list pos:line="38" pos:column="26">(<argument><expr><operator pos:line="38" pos:column="27">(<pos:position pos:line="38" pos:column="28"/></operator><name pos:line="38" pos:column="28">u8<pos:position pos:line="38" pos:column="30"/></name><operator pos:line="38" pos:column="30">*<pos:position pos:line="38" pos:column="31"/></operator><operator pos:line="38" pos:column="31">)<pos:position pos:line="38" pos:column="32"/></operator><name pos:line="38" pos:column="32">zSql<pos:position pos:line="38" pos:column="36"/></name></expr></argument>, <argument><expr><operator pos:line="38" pos:column="38">&amp;<pos:position pos:line="38" pos:column="43"/></operator><name pos:line="38" pos:column="39">tokenType<pos:position pos:line="38" pos:column="48"/></name></expr></argument>)<pos:position pos:line="38" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="50"/></expr_stmt>
      <expr_stmt><expr><name pos:line="39" pos:column="7">mxSqlLen<pos:position pos:line="39" pos:column="15"/></name> <operator pos:line="39" pos:column="16">-=<pos:position pos:line="39" pos:column="18"/></operator> <name pos:line="39" pos:column="19">n<pos:position pos:line="39" pos:column="20"/></name></expr>;<pos:position pos:line="39" pos:column="21"/></expr_stmt>
      <if pos:line="40" pos:column="7">if<condition pos:line="40" pos:column="9">( <expr><name pos:line="40" pos:column="11">mxSqlLen<pos:position pos:line="40" pos:column="19"/></name><operator pos:line="40" pos:column="19">&lt;<pos:position pos:line="40" pos:column="23"/></operator><literal type="number" pos:line="40" pos:column="20">0<pos:position pos:line="40" pos:column="21"/></literal></expr> )<pos:position pos:line="40" pos:column="23"/></condition><then><block pos:line="40" pos:column="23">{
        <expr_stmt><expr><name><name pos:line="41" pos:column="9">pParse<pos:position pos:line="41" pos:column="15"/></name><operator pos:line="41" pos:column="15">-&gt;<pos:position pos:line="41" pos:column="20"/></operator><name pos:line="41" pos:column="17">rc<pos:position pos:line="41" pos:column="19"/></name></name> <operator pos:line="41" pos:column="20">=<pos:position pos:line="41" pos:column="21"/></operator> <name pos:line="41" pos:column="22">SQLITE_TOOBIG<pos:position pos:line="41" pos:column="35"/></name></expr>;<pos:position pos:line="41" pos:column="36"/></expr_stmt>
        <break pos:line="42" pos:column="9">break;<pos:position pos:line="42" pos:column="15"/></break>
      }<pos:position pos:line="43" pos:column="8"/></block></then></if>
    }<pos:position pos:line="44" pos:column="6"/></block></then><else pos:line="44" pos:column="6">else<block pos:line="44" pos:column="10">{
      <comment type="block" pos:line="45" pos:column="7">/* Upon reaching the end of input, call the parser two more times
      ** with tokens TK_SEMI and 0, in that order. */</comment>
      <if pos:line="47" pos:column="7">if<condition pos:line="47" pos:column="9">( <expr><name pos:line="47" pos:column="11">lastTokenParsed<pos:position pos:line="47" pos:column="26"/></name><operator pos:line="47" pos:column="26">==<pos:position pos:line="47" pos:column="28"/></operator><name pos:line="47" pos:column="28">TK_SEMI<pos:position pos:line="47" pos:column="35"/></name></expr> )<pos:position pos:line="47" pos:column="37"/></condition><then><block pos:line="47" pos:column="37">{
        <expr_stmt><expr><name pos:line="48" pos:column="9">tokenType<pos:position pos:line="48" pos:column="18"/></name> <operator pos:line="48" pos:column="19">=<pos:position pos:line="48" pos:column="20"/></operator> <literal type="number" pos:line="48" pos:column="21">0<pos:position pos:line="48" pos:column="22"/></literal></expr>;<pos:position pos:line="48" pos:column="23"/></expr_stmt>
      }<pos:position pos:line="49" pos:column="8"/></block></then><elseif pos:line="49" pos:column="8">else <if pos:line="49" pos:column="13">if<condition pos:line="49" pos:column="15">( <expr><name pos:line="49" pos:column="17">lastTokenParsed<pos:position pos:line="49" pos:column="32"/></name><operator pos:line="49" pos:column="32">==<pos:position pos:line="49" pos:column="34"/></operator><literal type="number" pos:line="49" pos:column="34">0<pos:position pos:line="49" pos:column="35"/></literal></expr> )<pos:position pos:line="49" pos:column="37"/></condition><then><block pos:line="49" pos:column="37">{
        <break pos:line="50" pos:column="9">break;<pos:position pos:line="50" pos:column="15"/></break>
      }<pos:position pos:line="51" pos:column="8"/></block></then></if></elseif><else pos:line="51" pos:column="8">else<block pos:line="51" pos:column="12">{
        <expr_stmt><expr><name pos:line="52" pos:column="9">tokenType<pos:position pos:line="52" pos:column="18"/></name> <operator pos:line="52" pos:column="19">=<pos:position pos:line="52" pos:column="20"/></operator> <name pos:line="52" pos:column="21">TK_SEMI<pos:position pos:line="52" pos:column="28"/></name></expr>;<pos:position pos:line="52" pos:column="29"/></expr_stmt>
      }<pos:position pos:line="53" pos:column="8"/></block></else></if>
      <expr_stmt><expr><name pos:line="54" pos:column="7">zSql<pos:position pos:line="54" pos:column="11"/></name> <operator pos:line="54" pos:column="12">-=<pos:position pos:line="54" pos:column="14"/></operator> <name pos:line="54" pos:column="15">n<pos:position pos:line="54" pos:column="16"/></name></expr>;<pos:position pos:line="54" pos:column="17"/></expr_stmt>
    }<pos:position pos:line="55" pos:column="6"/></block></else></if>
    <if pos:line="56" pos:column="5">if<condition pos:line="56" pos:column="7">( <expr><name pos:line="56" pos:column="9">tokenType<pos:position pos:line="56" pos:column="18"/></name><operator pos:line="56" pos:column="18">&gt;=<pos:position pos:line="56" pos:column="23"/></operator><name pos:line="56" pos:column="20">TK_SPACE<pos:position pos:line="56" pos:column="28"/></name></expr> )<pos:position pos:line="56" pos:column="30"/></condition><then><block pos:line="56" pos:column="30">{
      <expr_stmt><expr><call><name pos:line="57" pos:column="7">assert<pos:position pos:line="57" pos:column="13"/></name><argument_list pos:line="57" pos:column="13">( <argument><expr><name pos:line="57" pos:column="15">tokenType<pos:position pos:line="57" pos:column="24"/></name><operator pos:line="57" pos:column="24">==<pos:position pos:line="57" pos:column="26"/></operator><name pos:line="57" pos:column="26">TK_SPACE<pos:position pos:line="57" pos:column="34"/></name> <operator pos:line="57" pos:column="35">||<pos:position pos:line="57" pos:column="37"/></operator> <name pos:line="57" pos:column="38">tokenType<pos:position pos:line="57" pos:column="47"/></name><operator pos:line="57" pos:column="47">==<pos:position pos:line="57" pos:column="49"/></operator><name pos:line="57" pos:column="49">TK_ILLEGAL<pos:position pos:line="57" pos:column="59"/></name></expr></argument> )<pos:position pos:line="57" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="62"/></expr_stmt>
      <if pos:line="58" pos:column="7">if<condition pos:line="58" pos:column="9">( <expr><name><name pos:line="58" pos:column="11">db<pos:position pos:line="58" pos:column="13"/></name><operator pos:line="58" pos:column="13">-&gt;<pos:position pos:line="58" pos:column="18"/></operator><name pos:line="58" pos:column="15">u1<pos:position pos:line="58" pos:column="17"/></name><operator pos:line="58" pos:column="17">.<pos:position pos:line="58" pos:column="18"/></operator><name pos:line="58" pos:column="18">isInterrupted<pos:position pos:line="58" pos:column="31"/></name></name></expr> )<pos:position pos:line="58" pos:column="33"/></condition><then><block pos:line="58" pos:column="33">{
        <expr_stmt><expr><name><name pos:line="59" pos:column="9">pParse<pos:position pos:line="59" pos:column="15"/></name><operator pos:line="59" pos:column="15">-&gt;<pos:position pos:line="59" pos:column="20"/></operator><name pos:line="59" pos:column="17">rc<pos:position pos:line="59" pos:column="19"/></name></name> <operator pos:line="59" pos:column="20">=<pos:position pos:line="59" pos:column="21"/></operator> <name pos:line="59" pos:column="22">SQLITE_INTERRUPT<pos:position pos:line="59" pos:column="38"/></name></expr>;<pos:position pos:line="59" pos:column="39"/></expr_stmt>
        <break pos:line="60" pos:column="9">break;<pos:position pos:line="60" pos:column="15"/></break>
      }<pos:position pos:line="61" pos:column="8"/></block></then></if>
      <if pos:line="62" pos:column="7">if<condition pos:line="62" pos:column="9">( <expr><name pos:line="62" pos:column="11">tokenType<pos:position pos:line="62" pos:column="20"/></name><operator pos:line="62" pos:column="20">==<pos:position pos:line="62" pos:column="22"/></operator><name pos:line="62" pos:column="22">TK_ILLEGAL<pos:position pos:line="62" pos:column="32"/></name></expr> )<pos:position pos:line="62" pos:column="34"/></condition><then><block pos:line="62" pos:column="34">{
        <expr_stmt><expr><call><name pos:line="63" pos:column="9">sqlite3ErrorMsg<pos:position pos:line="63" pos:column="24"/></name><argument_list pos:line="63" pos:column="24">(<argument><expr><name pos:line="63" pos:column="25">pParse<pos:position pos:line="63" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="63" pos:column="33">"unrecognized token: \"%.*s\""<pos:position pos:line="63" pos:column="63"/></literal></expr></argument>, <argument><expr><name pos:line="63" pos:column="65">n<pos:position pos:line="63" pos:column="66"/></name></expr></argument>, <argument><expr><name pos:line="63" pos:column="68">zSql<pos:position pos:line="63" pos:column="72"/></name></expr></argument>)<pos:position pos:line="63" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="74"/></expr_stmt>
        <break pos:line="64" pos:column="9">break;<pos:position pos:line="64" pos:column="15"/></break>
      }<pos:position pos:line="65" pos:column="8"/></block></then></if>
      <expr_stmt><expr><name pos:line="66" pos:column="7">zSql<pos:position pos:line="66" pos:column="11"/></name> <operator pos:line="66" pos:column="12">+=<pos:position pos:line="66" pos:column="14"/></operator> <name pos:line="66" pos:column="15">n<pos:position pos:line="66" pos:column="16"/></name></expr>;<pos:position pos:line="66" pos:column="17"/></expr_stmt>
    }<pos:position pos:line="67" pos:column="6"/></block></then><else pos:line="67" pos:column="6">else<block pos:line="67" pos:column="10">{
      <expr_stmt><expr><name><name pos:line="68" pos:column="7">pParse<pos:position pos:line="68" pos:column="13"/></name><operator pos:line="68" pos:column="13">-&gt;<pos:position pos:line="68" pos:column="18"/></operator><name pos:line="68" pos:column="15">sLastToken<pos:position pos:line="68" pos:column="25"/></name><operator pos:line="68" pos:column="25">.<pos:position pos:line="68" pos:column="26"/></operator><name pos:line="68" pos:column="26">z<pos:position pos:line="68" pos:column="27"/></name></name> <operator pos:line="68" pos:column="28">=<pos:position pos:line="68" pos:column="29"/></operator> <name pos:line="68" pos:column="30">zSql<pos:position pos:line="68" pos:column="34"/></name></expr>;<pos:position pos:line="68" pos:column="35"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="69" pos:column="7">pParse<pos:position pos:line="69" pos:column="13"/></name><operator pos:line="69" pos:column="13">-&gt;<pos:position pos:line="69" pos:column="18"/></operator><name pos:line="69" pos:column="15">sLastToken<pos:position pos:line="69" pos:column="25"/></name><operator pos:line="69" pos:column="25">.<pos:position pos:line="69" pos:column="26"/></operator><name pos:line="69" pos:column="26">n<pos:position pos:line="69" pos:column="27"/></name></name> <operator pos:line="69" pos:column="28">=<pos:position pos:line="69" pos:column="29"/></operator> <name pos:line="69" pos:column="30">n<pos:position pos:line="69" pos:column="31"/></name></expr>;<pos:position pos:line="69" pos:column="32"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="70" pos:column="7">sqlite3Parser<pos:position pos:line="70" pos:column="20"/></name><argument_list pos:line="70" pos:column="20">(<argument><expr><name pos:line="70" pos:column="21">pEngine<pos:position pos:line="70" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="70" pos:column="30">tokenType<pos:position pos:line="70" pos:column="39"/></name></expr></argument>, <argument><expr><name><name pos:line="70" pos:column="41">pParse<pos:position pos:line="70" pos:column="47"/></name><operator pos:line="70" pos:column="47">-&gt;<pos:position pos:line="70" pos:column="52"/></operator><name pos:line="70" pos:column="49">sLastToken<pos:position pos:line="70" pos:column="59"/></name></name></expr></argument>, <argument><expr><name pos:line="70" pos:column="61">pParse<pos:position pos:line="70" pos:column="67"/></name></expr></argument>)<pos:position pos:line="70" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="69"/></expr_stmt>
      <expr_stmt><expr><name pos:line="71" pos:column="7">lastTokenParsed<pos:position pos:line="71" pos:column="22"/></name> <operator pos:line="71" pos:column="23">=<pos:position pos:line="71" pos:column="24"/></operator> <name pos:line="71" pos:column="25">tokenType<pos:position pos:line="71" pos:column="34"/></name></expr>;<pos:position pos:line="71" pos:column="35"/></expr_stmt>
      <expr_stmt><expr><name pos:line="72" pos:column="7">zSql<pos:position pos:line="72" pos:column="11"/></name> <operator pos:line="72" pos:column="12">+=<pos:position pos:line="72" pos:column="14"/></operator> <name pos:line="72" pos:column="15">n<pos:position pos:line="72" pos:column="16"/></name></expr>;<pos:position pos:line="72" pos:column="17"/></expr_stmt>
      <if pos:line="73" pos:column="7">if<condition pos:line="73" pos:column="9">( <expr><name><name pos:line="73" pos:column="11">pParse<pos:position pos:line="73" pos:column="17"/></name><operator pos:line="73" pos:column="17">-&gt;<pos:position pos:line="73" pos:column="22"/></operator><name pos:line="73" pos:column="19">rc<pos:position pos:line="73" pos:column="21"/></name></name><operator pos:line="73" pos:column="21">!=<pos:position pos:line="73" pos:column="23"/></operator><name pos:line="73" pos:column="23">SQLITE_OK<pos:position pos:line="73" pos:column="32"/></name> <operator pos:line="73" pos:column="33">||<pos:position pos:line="73" pos:column="35"/></operator> <name><name pos:line="73" pos:column="36">db<pos:position pos:line="73" pos:column="38"/></name><operator pos:line="73" pos:column="38">-&gt;<pos:position pos:line="73" pos:column="43"/></operator><name pos:line="73" pos:column="40">mallocFailed<pos:position pos:line="73" pos:column="52"/></name></name></expr> )<pos:position pos:line="73" pos:column="54"/></condition><then pos:line="73" pos:column="54"> <block type="pseudo"><break pos:line="73" pos:column="55">break;<pos:position pos:line="73" pos:column="61"/></break></block></then></if>
    }<pos:position pos:line="74" pos:column="6"/></block></else></if>
  }<pos:position pos:line="75" pos:column="4"/></block></while>
  <expr_stmt><expr><call><name pos:line="76" pos:column="3">assert<pos:position pos:line="76" pos:column="9"/></name><argument_list pos:line="76" pos:column="9">( <argument><expr><name pos:line="76" pos:column="11">nErr<pos:position pos:line="76" pos:column="15"/></name><operator pos:line="76" pos:column="15">==<pos:position pos:line="76" pos:column="17"/></operator><literal type="number" pos:line="76" pos:column="17">0<pos:position pos:line="76" pos:column="18"/></literal></expr></argument> )<pos:position pos:line="76" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="21"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="77" pos:column="3">pParse<pos:position pos:line="77" pos:column="9"/></name><operator pos:line="77" pos:column="9">-&gt;<pos:position pos:line="77" pos:column="14"/></operator><name pos:line="77" pos:column="11">zTail<pos:position pos:line="77" pos:column="16"/></name></name> <operator pos:line="77" pos:column="17">=<pos:position pos:line="77" pos:column="18"/></operator> <name pos:line="77" pos:column="19">zSql<pos:position pos:line="77" pos:column="23"/></name></expr>;<pos:position pos:line="77" pos:column="24"/></expr_stmt>
<cpp:ifdef pos:line="78" pos:column="1">#<cpp:directive pos:line="78" pos:column="2">ifdef<pos:position pos:line="78" pos:column="7"/></cpp:directive> <name pos:line="78" pos:column="8">YYTRACKMAXSTACKDEPTH<pos:position pos:line="78" pos:column="28"/></name></cpp:ifdef>
  <expr_stmt><expr><call><name pos:line="79" pos:column="3">sqlite3_mutex_enter<pos:position pos:line="79" pos:column="22"/></name><argument_list pos:line="79" pos:column="22">(<argument><expr><call><name pos:line="79" pos:column="23">sqlite3MallocMutex<pos:position pos:line="79" pos:column="41"/></name><argument_list pos:line="79" pos:column="41">()<pos:position pos:line="79" pos:column="43"/></argument_list></call></expr></argument>)<pos:position pos:line="79" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="45"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="80" pos:column="3">sqlite3StatusHighwater<pos:position pos:line="80" pos:column="25"/></name><argument_list pos:line="80" pos:column="25">(<argument><expr><name pos:line="80" pos:column="26">SQLITE_STATUS_PARSER_STACK<pos:position pos:line="80" pos:column="52"/></name></expr></argument>,
      <argument><expr><call><name pos:line="81" pos:column="7">sqlite3ParserStackPeak<pos:position pos:line="81" pos:column="29"/></name><argument_list pos:line="81" pos:column="29">(<argument><expr><name pos:line="81" pos:column="30">pEngine<pos:position pos:line="81" pos:column="37"/></name></expr></argument>)<pos:position pos:line="81" pos:column="38"/></argument_list></call></expr></argument>
  )<pos:position pos:line="82" pos:column="4"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="5"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="83" pos:column="3">sqlite3_mutex_leave<pos:position pos:line="83" pos:column="22"/></name><argument_list pos:line="83" pos:column="22">(<argument><expr><call><name pos:line="83" pos:column="23">sqlite3MallocMutex<pos:position pos:line="83" pos:column="41"/></name><argument_list pos:line="83" pos:column="41">()<pos:position pos:line="83" pos:column="43"/></argument_list></call></expr></argument>)<pos:position pos:line="83" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="45"/></expr_stmt>
<cpp:endif pos:line="84" pos:column="1">#<cpp:directive pos:line="84" pos:column="2">endif<pos:position pos:line="84" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="84" pos:column="8">/* YYDEBUG */</comment>
<cpp:ifdef pos:line="85" pos:column="1">#<cpp:directive pos:line="85" pos:column="2">ifdef<pos:position pos:line="85" pos:column="7"/></cpp:directive> <name pos:line="85" pos:column="8">sqlite3Parser_ENGINEALWAYSONSTACK<pos:position pos:line="85" pos:column="41"/></name></cpp:ifdef>
  <expr_stmt><expr><call><name pos:line="86" pos:column="3">sqlite3ParserFinalize<pos:position pos:line="86" pos:column="24"/></name><argument_list pos:line="86" pos:column="24">(<argument><expr><name pos:line="86" pos:column="25">pEngine<pos:position pos:line="86" pos:column="32"/></name></expr></argument>)<pos:position pos:line="86" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="34"/></expr_stmt>
<cpp:else pos:line="87" pos:column="1">#<cpp:directive pos:line="87" pos:column="2">else<pos:position pos:line="87" pos:column="6"/></cpp:directive></cpp:else>
  <expr_stmt><expr><call><name pos:line="88" pos:column="3">sqlite3ParserFree<pos:position pos:line="88" pos:column="20"/></name><argument_list pos:line="88" pos:column="20">(<argument><expr><name pos:line="88" pos:column="21">pEngine<pos:position pos:line="88" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="88" pos:column="30">sqlite3_free<pos:position pos:line="88" pos:column="42"/></name></expr></argument>)<pos:position pos:line="88" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="44"/></expr_stmt>
<cpp:endif pos:line="89" pos:column="1">#<cpp:directive pos:line="89" pos:column="2">endif<pos:position pos:line="89" pos:column="7"/></cpp:directive></cpp:endif>
  <if pos:line="90" pos:column="3">if<condition pos:line="90" pos:column="5">( <expr><name><name pos:line="90" pos:column="7">db<pos:position pos:line="90" pos:column="9"/></name><operator pos:line="90" pos:column="9">-&gt;<pos:position pos:line="90" pos:column="14"/></operator><name pos:line="90" pos:column="11">mallocFailed<pos:position pos:line="90" pos:column="23"/></name></name></expr> )<pos:position pos:line="90" pos:column="25"/></condition><then><block pos:line="90" pos:column="25">{
    <expr_stmt><expr><name><name pos:line="91" pos:column="5">pParse<pos:position pos:line="91" pos:column="11"/></name><operator pos:line="91" pos:column="11">-&gt;<pos:position pos:line="91" pos:column="16"/></operator><name pos:line="91" pos:column="13">rc<pos:position pos:line="91" pos:column="15"/></name></name> <operator pos:line="91" pos:column="16">=<pos:position pos:line="91" pos:column="17"/></operator> <name pos:line="91" pos:column="18">SQLITE_NOMEM_BKPT<pos:position pos:line="91" pos:column="35"/></name></expr>;<pos:position pos:line="91" pos:column="36"/></expr_stmt>
  }<pos:position pos:line="92" pos:column="4"/></block></then></if>
  <if pos:line="93" pos:column="3">if<condition pos:line="93" pos:column="5">( <expr><name><name pos:line="93" pos:column="7">pParse<pos:position pos:line="93" pos:column="13"/></name><operator pos:line="93" pos:column="13">-&gt;<pos:position pos:line="93" pos:column="18"/></operator><name pos:line="93" pos:column="15">rc<pos:position pos:line="93" pos:column="17"/></name></name><operator pos:line="93" pos:column="17">!=<pos:position pos:line="93" pos:column="19"/></operator><name pos:line="93" pos:column="19">SQLITE_OK<pos:position pos:line="93" pos:column="28"/></name> <operator pos:line="93" pos:column="29">&amp;&amp;<pos:position pos:line="93" pos:column="39"/></operator> <name><name pos:line="93" pos:column="32">pParse<pos:position pos:line="93" pos:column="38"/></name><operator pos:line="93" pos:column="38">-&gt;<pos:position pos:line="93" pos:column="43"/></operator><name pos:line="93" pos:column="40">rc<pos:position pos:line="93" pos:column="42"/></name></name><operator pos:line="93" pos:column="42">!=<pos:position pos:line="93" pos:column="44"/></operator><name pos:line="93" pos:column="44">SQLITE_DONE<pos:position pos:line="93" pos:column="55"/></name> <operator pos:line="93" pos:column="56">&amp;&amp;<pos:position pos:line="93" pos:column="66"/></operator> <name><name pos:line="93" pos:column="59">pParse<pos:position pos:line="93" pos:column="65"/></name><operator pos:line="93" pos:column="65">-&gt;<pos:position pos:line="93" pos:column="70"/></operator><name pos:line="93" pos:column="67">zErrMsg<pos:position pos:line="93" pos:column="74"/></name></name><operator pos:line="93" pos:column="74">==<pos:position pos:line="93" pos:column="76"/></operator><literal type="number" pos:line="93" pos:column="76">0<pos:position pos:line="93" pos:column="77"/></literal></expr> )<pos:position pos:line="93" pos:column="79"/></condition><then><block pos:line="93" pos:column="79">{
    <expr_stmt><expr><name><name pos:line="94" pos:column="5">pParse<pos:position pos:line="94" pos:column="11"/></name><operator pos:line="94" pos:column="11">-&gt;<pos:position pos:line="94" pos:column="16"/></operator><name pos:line="94" pos:column="13">zErrMsg<pos:position pos:line="94" pos:column="20"/></name></name> <operator pos:line="94" pos:column="21">=<pos:position pos:line="94" pos:column="22"/></operator> <call><name pos:line="94" pos:column="23">sqlite3MPrintf<pos:position pos:line="94" pos:column="37"/></name><argument_list pos:line="94" pos:column="37">(<argument><expr><name pos:line="94" pos:column="38">db<pos:position pos:line="94" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="94" pos:column="42">"%s"<pos:position pos:line="94" pos:column="46"/></literal></expr></argument>, <argument><expr><call><name pos:line="94" pos:column="48">sqlite3ErrStr<pos:position pos:line="94" pos:column="61"/></name><argument_list pos:line="94" pos:column="61">(<argument><expr><name><name pos:line="94" pos:column="62">pParse<pos:position pos:line="94" pos:column="68"/></name><operator pos:line="94" pos:column="68">-&gt;<pos:position pos:line="94" pos:column="73"/></operator><name pos:line="94" pos:column="70">rc<pos:position pos:line="94" pos:column="72"/></name></name></expr></argument>)<pos:position pos:line="94" pos:column="73"/></argument_list></call></expr></argument>)<pos:position pos:line="94" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="94" pos:column="75"/></expr_stmt>
  }<pos:position pos:line="95" pos:column="4"/></block></then></if>
  <expr_stmt><expr><call><name pos:line="96" pos:column="3">assert<pos:position pos:line="96" pos:column="9"/></name><argument_list pos:line="96" pos:column="9">( <argument><expr><name pos:line="96" pos:column="11">pzErrMsg<pos:position pos:line="96" pos:column="19"/></name><operator pos:line="96" pos:column="19">!=<pos:position pos:line="96" pos:column="21"/></operator><literal type="number" pos:line="96" pos:column="21">0<pos:position pos:line="96" pos:column="22"/></literal></expr></argument> )<pos:position pos:line="96" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="96" pos:column="25"/></expr_stmt>
  <if pos:line="97" pos:column="3">if<condition pos:line="97" pos:column="5">( <expr><name><name pos:line="97" pos:column="7">pParse<pos:position pos:line="97" pos:column="13"/></name><operator pos:line="97" pos:column="13">-&gt;<pos:position pos:line="97" pos:column="18"/></operator><name pos:line="97" pos:column="15">zErrMsg<pos:position pos:line="97" pos:column="22"/></name></name></expr> )<pos:position pos:line="97" pos:column="24"/></condition><then><block pos:line="97" pos:column="24">{
    <expr_stmt><expr><operator pos:line="98" pos:column="5">*<pos:position pos:line="98" pos:column="6"/></operator><name pos:line="98" pos:column="6">pzErrMsg<pos:position pos:line="98" pos:column="14"/></name> <operator pos:line="98" pos:column="15">=<pos:position pos:line="98" pos:column="16"/></operator> <name><name pos:line="98" pos:column="17">pParse<pos:position pos:line="98" pos:column="23"/></name><operator pos:line="98" pos:column="23">-&gt;<pos:position pos:line="98" pos:column="28"/></operator><name pos:line="98" pos:column="25">zErrMsg<pos:position pos:line="98" pos:column="32"/></name></name></expr>;<pos:position pos:line="98" pos:column="33"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="99" pos:column="5">sqlite3_log<pos:position pos:line="99" pos:column="16"/></name><argument_list pos:line="99" pos:column="16">(<argument><expr><name><name pos:line="99" pos:column="17">pParse<pos:position pos:line="99" pos:column="23"/></name><operator pos:line="99" pos:column="23">-&gt;<pos:position pos:line="99" pos:column="28"/></operator><name pos:line="99" pos:column="25">rc<pos:position pos:line="99" pos:column="27"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="99" pos:column="29">"%s"<pos:position pos:line="99" pos:column="33"/></literal></expr></argument>, <argument><expr><operator pos:line="99" pos:column="35">*<pos:position pos:line="99" pos:column="36"/></operator><name pos:line="99" pos:column="36">pzErrMsg<pos:position pos:line="99" pos:column="44"/></name></expr></argument>)<pos:position pos:line="99" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="99" pos:column="46"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="100" pos:column="5">pParse<pos:position pos:line="100" pos:column="11"/></name><operator pos:line="100" pos:column="11">-&gt;<pos:position pos:line="100" pos:column="16"/></operator><name pos:line="100" pos:column="13">zErrMsg<pos:position pos:line="100" pos:column="20"/></name></name> <operator pos:line="100" pos:column="21">=<pos:position pos:line="100" pos:column="22"/></operator> <literal type="number" pos:line="100" pos:column="23">0<pos:position pos:line="100" pos:column="24"/></literal></expr>;<pos:position pos:line="100" pos:column="25"/></expr_stmt>
    <expr_stmt><expr><name pos:line="101" pos:column="5">nErr<pos:position pos:line="101" pos:column="9"/></name><operator pos:line="101" pos:column="9">++<pos:position pos:line="101" pos:column="11"/></operator></expr>;<pos:position pos:line="101" pos:column="12"/></expr_stmt>
  }<pos:position pos:line="102" pos:column="4"/></block></then></if>
  <if pos:line="103" pos:column="3">if<condition pos:line="103" pos:column="5">( <expr><name><name pos:line="103" pos:column="7">pParse<pos:position pos:line="103" pos:column="13"/></name><operator pos:line="103" pos:column="13">-&gt;<pos:position pos:line="103" pos:column="18"/></operator><name pos:line="103" pos:column="15">pVdbe<pos:position pos:line="103" pos:column="20"/></name></name> <operator pos:line="103" pos:column="21">&amp;&amp;<pos:position pos:line="103" pos:column="31"/></operator> <name><name pos:line="103" pos:column="24">pParse<pos:position pos:line="103" pos:column="30"/></name><operator pos:line="103" pos:column="30">-&gt;<pos:position pos:line="103" pos:column="35"/></operator><name pos:line="103" pos:column="32">nErr<pos:position pos:line="103" pos:column="36"/></name></name><operator pos:line="103" pos:column="36">&gt;<pos:position pos:line="103" pos:column="40"/></operator><literal type="number" pos:line="103" pos:column="37">0<pos:position pos:line="103" pos:column="38"/></literal> <operator pos:line="103" pos:column="39">&amp;&amp;<pos:position pos:line="103" pos:column="49"/></operator> <name><name pos:line="103" pos:column="42">pParse<pos:position pos:line="103" pos:column="48"/></name><operator pos:line="103" pos:column="48">-&gt;<pos:position pos:line="103" pos:column="53"/></operator><name pos:line="103" pos:column="50">nested<pos:position pos:line="103" pos:column="56"/></name></name><operator pos:line="103" pos:column="56">==<pos:position pos:line="103" pos:column="58"/></operator><literal type="number" pos:line="103" pos:column="58">0<pos:position pos:line="103" pos:column="59"/></literal></expr> )<pos:position pos:line="103" pos:column="61"/></condition><then><block pos:line="103" pos:column="61">{
    <expr_stmt><expr><call><name pos:line="104" pos:column="5">sqlite3VdbeDelete<pos:position pos:line="104" pos:column="22"/></name><argument_list pos:line="104" pos:column="22">(<argument><expr><name><name pos:line="104" pos:column="23">pParse<pos:position pos:line="104" pos:column="29"/></name><operator pos:line="104" pos:column="29">-&gt;<pos:position pos:line="104" pos:column="34"/></operator><name pos:line="104" pos:column="31">pVdbe<pos:position pos:line="104" pos:column="36"/></name></name></expr></argument>)<pos:position pos:line="104" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="104" pos:column="38"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="105" pos:column="5">pParse<pos:position pos:line="105" pos:column="11"/></name><operator pos:line="105" pos:column="11">-&gt;<pos:position pos:line="105" pos:column="16"/></operator><name pos:line="105" pos:column="13">pVdbe<pos:position pos:line="105" pos:column="18"/></name></name> <operator pos:line="105" pos:column="19">=<pos:position pos:line="105" pos:column="20"/></operator> <literal type="number" pos:line="105" pos:column="21">0<pos:position pos:line="105" pos:column="22"/></literal></expr>;<pos:position pos:line="105" pos:column="23"/></expr_stmt>
  }<pos:position pos:line="106" pos:column="4"/></block></then></if>
<cpp:ifndef pos:line="107" pos:column="1">#<cpp:directive pos:line="107" pos:column="2">ifndef<pos:position pos:line="107" pos:column="8"/></cpp:directive> <name pos:line="107" pos:column="9">SQLITE_OMIT_SHARED_CACHE<pos:position pos:line="107" pos:column="33"/></name></cpp:ifndef>
  <if pos:line="108" pos:column="3">if<condition pos:line="108" pos:column="5">( <expr><name><name pos:line="108" pos:column="7">pParse<pos:position pos:line="108" pos:column="13"/></name><operator pos:line="108" pos:column="13">-&gt;<pos:position pos:line="108" pos:column="18"/></operator><name pos:line="108" pos:column="15">nested<pos:position pos:line="108" pos:column="21"/></name></name><operator pos:line="108" pos:column="21">==<pos:position pos:line="108" pos:column="23"/></operator><literal type="number" pos:line="108" pos:column="23">0<pos:position pos:line="108" pos:column="24"/></literal></expr> )<pos:position pos:line="108" pos:column="26"/></condition><then><block pos:line="108" pos:column="26">{
    <expr_stmt><expr><call><name pos:line="109" pos:column="5">sqlite3DbFree<pos:position pos:line="109" pos:column="18"/></name><argument_list pos:line="109" pos:column="18">(<argument><expr><name pos:line="109" pos:column="19">db<pos:position pos:line="109" pos:column="21"/></name></expr></argument>, <argument><expr><name><name pos:line="109" pos:column="23">pParse<pos:position pos:line="109" pos:column="29"/></name><operator pos:line="109" pos:column="29">-&gt;<pos:position pos:line="109" pos:column="34"/></operator><name pos:line="109" pos:column="31">aTableLock<pos:position pos:line="109" pos:column="41"/></name></name></expr></argument>)<pos:position pos:line="109" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="109" pos:column="43"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="110" pos:column="5">pParse<pos:position pos:line="110" pos:column="11"/></name><operator pos:line="110" pos:column="11">-&gt;<pos:position pos:line="110" pos:column="16"/></operator><name pos:line="110" pos:column="13">aTableLock<pos:position pos:line="110" pos:column="23"/></name></name> <operator pos:line="110" pos:column="24">=<pos:position pos:line="110" pos:column="25"/></operator> <literal type="number" pos:line="110" pos:column="26">0<pos:position pos:line="110" pos:column="27"/></literal></expr>;<pos:position pos:line="110" pos:column="28"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="111" pos:column="5">pParse<pos:position pos:line="111" pos:column="11"/></name><operator pos:line="111" pos:column="11">-&gt;<pos:position pos:line="111" pos:column="16"/></operator><name pos:line="111" pos:column="13">nTableLock<pos:position pos:line="111" pos:column="23"/></name></name> <operator pos:line="111" pos:column="24">=<pos:position pos:line="111" pos:column="25"/></operator> <literal type="number" pos:line="111" pos:column="26">0<pos:position pos:line="111" pos:column="27"/></literal></expr>;<pos:position pos:line="111" pos:column="28"/></expr_stmt>
  }<pos:position pos:line="112" pos:column="4"/></block></then></if>
<cpp:endif pos:line="113" pos:column="1">#<cpp:directive pos:line="113" pos:column="2">endif<pos:position pos:line="113" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:ifndef pos:line="114" pos:column="1">#<cpp:directive pos:line="114" pos:column="2">ifndef<pos:position pos:line="114" pos:column="8"/></cpp:directive> <name pos:line="114" pos:column="9">SQLITE_OMIT_VIRTUALTABLE<pos:position pos:line="114" pos:column="33"/></name></cpp:ifndef>
  <expr_stmt><expr><call><name pos:line="115" pos:column="3">sqlite3_free<pos:position pos:line="115" pos:column="15"/></name><argument_list pos:line="115" pos:column="15">(<argument><expr><name><name pos:line="115" pos:column="16">pParse<pos:position pos:line="115" pos:column="22"/></name><operator pos:line="115" pos:column="22">-&gt;<pos:position pos:line="115" pos:column="27"/></operator><name pos:line="115" pos:column="24">apVtabLock<pos:position pos:line="115" pos:column="34"/></name></name></expr></argument>)<pos:position pos:line="115" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="115" pos:column="36"/></expr_stmt>
<cpp:endif pos:line="116" pos:column="1">#<cpp:directive pos:line="116" pos:column="2">endif<pos:position pos:line="116" pos:column="7"/></cpp:directive></cpp:endif>

  <if pos:line="118" pos:column="3">if<condition pos:line="118" pos:column="5">( <expr><operator pos:line="118" pos:column="7">!<pos:position pos:line="118" pos:column="8"/></operator><name pos:line="118" pos:column="8">IN_DECLARE_VTAB<pos:position pos:line="118" pos:column="23"/></name></expr> )<pos:position pos:line="118" pos:column="25"/></condition><then><block pos:line="118" pos:column="25">{
    <comment type="block" pos:line="119" pos:column="5">/* If the pParse-&gt;declareVtab flag is set, do not delete any table 
    ** structure built up in pParse-&gt;pNewTable. The calling code (see vtab.c)
    ** will take responsibility for freeing the Table structure.
    */</comment>
    <expr_stmt><expr><call><name pos:line="123" pos:column="5">sqlite3DeleteTable<pos:position pos:line="123" pos:column="23"/></name><argument_list pos:line="123" pos:column="23">(<argument><expr><name pos:line="123" pos:column="24">db<pos:position pos:line="123" pos:column="26"/></name></expr></argument>, <argument><expr><name><name pos:line="123" pos:column="28">pParse<pos:position pos:line="123" pos:column="34"/></name><operator pos:line="123" pos:column="34">-&gt;<pos:position pos:line="123" pos:column="39"/></operator><name pos:line="123" pos:column="36">pNewTable<pos:position pos:line="123" pos:column="45"/></name></name></expr></argument>)<pos:position pos:line="123" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="123" pos:column="47"/></expr_stmt>
  }<pos:position pos:line="124" pos:column="4"/></block></then></if>

  <if pos:line="126" pos:column="3">if<condition pos:line="126" pos:column="5">( <expr><name><name pos:line="126" pos:column="7">pParse<pos:position pos:line="126" pos:column="13"/></name><operator pos:line="126" pos:column="13">-&gt;<pos:position pos:line="126" pos:column="18"/></operator><name pos:line="126" pos:column="15">pWithToFree<pos:position pos:line="126" pos:column="26"/></name></name></expr> )<pos:position pos:line="126" pos:column="28"/></condition><then pos:line="126" pos:column="28"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="126" pos:column="29">sqlite3WithDelete<pos:position pos:line="126" pos:column="46"/></name><argument_list pos:line="126" pos:column="46">(<argument><expr><name pos:line="126" pos:column="47">db<pos:position pos:line="126" pos:column="49"/></name></expr></argument>, <argument><expr><name><name pos:line="126" pos:column="51">pParse<pos:position pos:line="126" pos:column="57"/></name><operator pos:line="126" pos:column="57">-&gt;<pos:position pos:line="126" pos:column="62"/></operator><name pos:line="126" pos:column="59">pWithToFree<pos:position pos:line="126" pos:column="70"/></name></name></expr></argument>)<pos:position pos:line="126" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="126" pos:column="72"/></expr_stmt></block></then></if>
  <expr_stmt><expr><call><name pos:line="127" pos:column="3">sqlite3DeleteTrigger<pos:position pos:line="127" pos:column="23"/></name><argument_list pos:line="127" pos:column="23">(<argument><expr><name pos:line="127" pos:column="24">db<pos:position pos:line="127" pos:column="26"/></name></expr></argument>, <argument><expr><name><name pos:line="127" pos:column="28">pParse<pos:position pos:line="127" pos:column="34"/></name><operator pos:line="127" pos:column="34">-&gt;<pos:position pos:line="127" pos:column="39"/></operator><name pos:line="127" pos:column="36">pNewTrigger<pos:position pos:line="127" pos:column="47"/></name></name></expr></argument>)<pos:position pos:line="127" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="127" pos:column="49"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="128" pos:column="3">sqlite3DbFree<pos:position pos:line="128" pos:column="16"/></name><argument_list pos:line="128" pos:column="16">(<argument><expr><name pos:line="128" pos:column="17">db<pos:position pos:line="128" pos:column="19"/></name></expr></argument>, <argument><expr><name><name pos:line="128" pos:column="21">pParse<pos:position pos:line="128" pos:column="27"/></name><operator pos:line="128" pos:column="27">-&gt;<pos:position pos:line="128" pos:column="32"/></operator><name pos:line="128" pos:column="29">pVList<pos:position pos:line="128" pos:column="35"/></name></name></expr></argument>)<pos:position pos:line="128" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="128" pos:column="37"/></expr_stmt>
  <while pos:line="129" pos:column="3">while<condition pos:line="129" pos:column="8">( <expr><name><name pos:line="129" pos:column="10">pParse<pos:position pos:line="129" pos:column="16"/></name><operator pos:line="129" pos:column="16">-&gt;<pos:position pos:line="129" pos:column="21"/></operator><name pos:line="129" pos:column="18">pAinc<pos:position pos:line="129" pos:column="23"/></name></name></expr> )<pos:position pos:line="129" pos:column="25"/></condition><block pos:line="129" pos:column="25">{
    <decl_stmt><decl><type><name pos:line="130" pos:column="5">AutoincInfo<pos:position pos:line="130" pos:column="16"/></name> <modifier pos:line="130" pos:column="17">*<pos:position pos:line="130" pos:column="18"/></modifier></type><name pos:line="130" pos:column="18">p<pos:position pos:line="130" pos:column="19"/></name> <init pos:line="130" pos:column="20">= <expr><name><name pos:line="130" pos:column="22">pParse<pos:position pos:line="130" pos:column="28"/></name><operator pos:line="130" pos:column="28">-&gt;<pos:position pos:line="130" pos:column="33"/></operator><name pos:line="130" pos:column="30">pAinc<pos:position pos:line="130" pos:column="35"/></name></name></expr></init></decl>;<pos:position pos:line="130" pos:column="36"/></decl_stmt>
    <expr_stmt><expr><name><name pos:line="131" pos:column="5">pParse<pos:position pos:line="131" pos:column="11"/></name><operator pos:line="131" pos:column="11">-&gt;<pos:position pos:line="131" pos:column="16"/></operator><name pos:line="131" pos:column="13">pAinc<pos:position pos:line="131" pos:column="18"/></name></name> <operator pos:line="131" pos:column="19">=<pos:position pos:line="131" pos:column="20"/></operator> <name><name pos:line="131" pos:column="21">p<pos:position pos:line="131" pos:column="22"/></name><operator pos:line="131" pos:column="22">-&gt;<pos:position pos:line="131" pos:column="27"/></operator><name pos:line="131" pos:column="24">pNext<pos:position pos:line="131" pos:column="29"/></name></name></expr>;<pos:position pos:line="131" pos:column="30"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="132" pos:column="5">sqlite3DbFreeNN<pos:position pos:line="132" pos:column="20"/></name><argument_list pos:line="132" pos:column="20">(<argument><expr><name pos:line="132" pos:column="21">db<pos:position pos:line="132" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="132" pos:column="25">p<pos:position pos:line="132" pos:column="26"/></name></expr></argument>)<pos:position pos:line="132" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="132" pos:column="28"/></expr_stmt>
  }<pos:position pos:line="133" pos:column="4"/></block></while>
  <while pos:line="134" pos:column="3">while<condition pos:line="134" pos:column="8">( <expr><name><name pos:line="134" pos:column="10">pParse<pos:position pos:line="134" pos:column="16"/></name><operator pos:line="134" pos:column="16">-&gt;<pos:position pos:line="134" pos:column="21"/></operator><name pos:line="134" pos:column="18">pZombieTab<pos:position pos:line="134" pos:column="28"/></name></name></expr> )<pos:position pos:line="134" pos:column="30"/></condition><block pos:line="134" pos:column="30">{
    <decl_stmt><decl><type><name pos:line="135" pos:column="5">Table<pos:position pos:line="135" pos:column="10"/></name> <modifier pos:line="135" pos:column="11">*<pos:position pos:line="135" pos:column="12"/></modifier></type><name pos:line="135" pos:column="12">p<pos:position pos:line="135" pos:column="13"/></name> <init pos:line="135" pos:column="14">= <expr><name><name pos:line="135" pos:column="16">pParse<pos:position pos:line="135" pos:column="22"/></name><operator pos:line="135" pos:column="22">-&gt;<pos:position pos:line="135" pos:column="27"/></operator><name pos:line="135" pos:column="24">pZombieTab<pos:position pos:line="135" pos:column="34"/></name></name></expr></init></decl>;<pos:position pos:line="135" pos:column="35"/></decl_stmt>
    <expr_stmt><expr><name><name pos:line="136" pos:column="5">pParse<pos:position pos:line="136" pos:column="11"/></name><operator pos:line="136" pos:column="11">-&gt;<pos:position pos:line="136" pos:column="16"/></operator><name pos:line="136" pos:column="13">pZombieTab<pos:position pos:line="136" pos:column="23"/></name></name> <operator pos:line="136" pos:column="24">=<pos:position pos:line="136" pos:column="25"/></operator> <name><name pos:line="136" pos:column="26">p<pos:position pos:line="136" pos:column="27"/></name><operator pos:line="136" pos:column="27">-&gt;<pos:position pos:line="136" pos:column="32"/></operator><name pos:line="136" pos:column="29">pNextZombie<pos:position pos:line="136" pos:column="40"/></name></name></expr>;<pos:position pos:line="136" pos:column="41"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="137" pos:column="5">sqlite3DeleteTable<pos:position pos:line="137" pos:column="23"/></name><argument_list pos:line="137" pos:column="23">(<argument><expr><name pos:line="137" pos:column="24">db<pos:position pos:line="137" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="137" pos:column="28">p<pos:position pos:line="137" pos:column="29"/></name></expr></argument>)<pos:position pos:line="137" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="137" pos:column="31"/></expr_stmt>
  }<pos:position pos:line="138" pos:column="4"/></block></while>
  <expr_stmt><expr><call><name pos:line="139" pos:column="3">assert<pos:position pos:line="139" pos:column="9"/></name><argument_list pos:line="139" pos:column="9">( <argument><expr><name pos:line="139" pos:column="11">nErr<pos:position pos:line="139" pos:column="15"/></name><operator pos:line="139" pos:column="15">==<pos:position pos:line="139" pos:column="17"/></operator><literal type="number" pos:line="139" pos:column="17">0<pos:position pos:line="139" pos:column="18"/></literal> <operator pos:line="139" pos:column="19">||<pos:position pos:line="139" pos:column="21"/></operator> <name><name pos:line="139" pos:column="22">pParse<pos:position pos:line="139" pos:column="28"/></name><operator pos:line="139" pos:column="28">-&gt;<pos:position pos:line="139" pos:column="33"/></operator><name pos:line="139" pos:column="30">rc<pos:position pos:line="139" pos:column="32"/></name></name><operator pos:line="139" pos:column="32">!=<pos:position pos:line="139" pos:column="34"/></operator><name pos:line="139" pos:column="34">SQLITE_OK<pos:position pos:line="139" pos:column="43"/></name></expr></argument> )<pos:position pos:line="139" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="139" pos:column="46"/></expr_stmt>
  <return pos:line="140" pos:column="3">return <expr><name pos:line="140" pos:column="10">nErr<pos:position pos:line="140" pos:column="14"/></name></expr>;<pos:position pos:line="140" pos:column="15"/></return>
}<pos:position pos:line="141" pos:column="2"/></block></function></unit>
