<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/sqlite/gumtree/sqlite_function_314.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">renameTriggerFunc<pos:position pos:line="1" pos:column="30"/></name><parameter_list pos:line="1" pos:column="30">(
  <parameter><decl><type><name pos:line="2" pos:column="3">sqlite3_context<pos:position pos:line="2" pos:column="18"/></name> <modifier pos:line="2" pos:column="19">*<pos:position pos:line="2" pos:column="20"/></modifier></type><name pos:line="2" pos:column="20">context<pos:position pos:line="2" pos:column="27"/></name></decl></parameter>,
  <parameter><decl><type><name pos:line="3" pos:column="3">int<pos:position pos:line="3" pos:column="6"/></name></type> <name pos:line="3" pos:column="7">NotUsed<pos:position pos:line="3" pos:column="14"/></name></decl></parameter>,
  <parameter><decl><type><name pos:line="4" pos:column="3">sqlite3_value<pos:position pos:line="4" pos:column="16"/></name> <modifier pos:line="4" pos:column="17">*<pos:position pos:line="4" pos:column="18"/></modifier><modifier pos:line="4" pos:column="18">*<pos:position pos:line="4" pos:column="19"/></modifier></type><name pos:line="4" pos:column="19">argv<pos:position pos:line="4" pos:column="23"/></name></decl></parameter>
)<pos:position pos:line="5" pos:column="2"/></parameter_list><block pos:line="5" pos:column="2">{
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">unsigned<pos:position pos:line="6" pos:column="11"/></name> <name pos:line="6" pos:column="12">char<pos:position pos:line="6" pos:column="16"/></name> <specifier pos:line="6" pos:column="17">const<pos:position pos:line="6" pos:column="22"/></specifier> <modifier pos:line="6" pos:column="23">*<pos:position pos:line="6" pos:column="24"/></modifier></type><name pos:line="6" pos:column="24">zSql<pos:position pos:line="6" pos:column="28"/></name> <init pos:line="6" pos:column="29">= <expr><call><name pos:line="6" pos:column="31">sqlite3_value_text<pos:position pos:line="6" pos:column="49"/></name><argument_list pos:line="6" pos:column="49">(<argument><expr><name><name pos:line="6" pos:column="50">argv<pos:position pos:line="6" pos:column="54"/></name><index pos:line="6" pos:column="54">[<expr><literal type="number" pos:line="6" pos:column="55">0<pos:position pos:line="6" pos:column="56"/></literal></expr>]<pos:position pos:line="6" pos:column="57"/></index></name></expr></argument>)<pos:position pos:line="6" pos:column="58"/></argument_list></call></expr></init></decl>;<pos:position pos:line="6" pos:column="59"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">unsigned<pos:position pos:line="7" pos:column="11"/></name> <name pos:line="7" pos:column="12">char<pos:position pos:line="7" pos:column="16"/></name> <specifier pos:line="7" pos:column="17">const<pos:position pos:line="7" pos:column="22"/></specifier> <modifier pos:line="7" pos:column="23">*<pos:position pos:line="7" pos:column="24"/></modifier></type><name pos:line="7" pos:column="24">zTableName<pos:position pos:line="7" pos:column="34"/></name> <init pos:line="7" pos:column="35">= <expr><call><name pos:line="7" pos:column="37">sqlite3_value_text<pos:position pos:line="7" pos:column="55"/></name><argument_list pos:line="7" pos:column="55">(<argument><expr><name><name pos:line="7" pos:column="56">argv<pos:position pos:line="7" pos:column="60"/></name><index pos:line="7" pos:column="60">[<expr><literal type="number" pos:line="7" pos:column="61">1<pos:position pos:line="7" pos:column="62"/></literal></expr>]<pos:position pos:line="7" pos:column="63"/></index></name></expr></argument>)<pos:position pos:line="7" pos:column="64"/></argument_list></call></expr></init></decl>;<pos:position pos:line="7" pos:column="65"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="9" pos:column="3">int<pos:position pos:line="9" pos:column="6"/></name></type> <name pos:line="9" pos:column="7">token<pos:position pos:line="9" pos:column="12"/></name></decl>;<pos:position pos:line="9" pos:column="13"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">Token<pos:position pos:line="10" pos:column="8"/></name></type> <name pos:line="10" pos:column="9">tname<pos:position pos:line="10" pos:column="14"/></name></decl>;<pos:position pos:line="10" pos:column="15"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="11" pos:column="3">int<pos:position pos:line="11" pos:column="6"/></name></type> <name pos:line="11" pos:column="7">dist<pos:position pos:line="11" pos:column="11"/></name> <init pos:line="11" pos:column="12">= <expr><literal type="number" pos:line="11" pos:column="14">3<pos:position pos:line="11" pos:column="15"/></literal></expr></init></decl>;<pos:position pos:line="11" pos:column="16"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="12" pos:column="3">unsigned<pos:position pos:line="12" pos:column="11"/></name> <name pos:line="12" pos:column="12">char<pos:position pos:line="12" pos:column="16"/></name> <specifier pos:line="12" pos:column="17">const<pos:position pos:line="12" pos:column="22"/></specifier> <modifier pos:line="12" pos:column="23">*<pos:position pos:line="12" pos:column="24"/></modifier></type><name pos:line="12" pos:column="24">zCsr<pos:position pos:line="12" pos:column="28"/></name> <init pos:line="12" pos:column="29">= <expr><name pos:line="12" pos:column="31">zSql<pos:position pos:line="12" pos:column="35"/></name></expr></init></decl>;<pos:position pos:line="12" pos:column="36"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="13" pos:column="3">int<pos:position pos:line="13" pos:column="6"/></name></type> <name pos:line="13" pos:column="7">len<pos:position pos:line="13" pos:column="10"/></name> <init pos:line="13" pos:column="11">= <expr><literal type="number" pos:line="13" pos:column="13">0<pos:position pos:line="13" pos:column="14"/></literal></expr></init></decl>;<pos:position pos:line="13" pos:column="15"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="14" pos:column="3">char<pos:position pos:line="14" pos:column="7"/></name> <modifier pos:line="14" pos:column="8">*<pos:position pos:line="14" pos:column="9"/></modifier></type><name pos:line="14" pos:column="9">zRet<pos:position pos:line="14" pos:column="13"/></name></decl>;<pos:position pos:line="14" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="15" pos:column="3">sqlite3<pos:position pos:line="15" pos:column="10"/></name> <modifier pos:line="15" pos:column="11">*<pos:position pos:line="15" pos:column="12"/></modifier></type><name pos:line="15" pos:column="12">db<pos:position pos:line="15" pos:column="14"/></name> <init pos:line="15" pos:column="15">= <expr><call><name pos:line="15" pos:column="17">sqlite3_context_db_handle<pos:position pos:line="15" pos:column="42"/></name><argument_list pos:line="15" pos:column="42">(<argument><expr><name pos:line="15" pos:column="43">context<pos:position pos:line="15" pos:column="50"/></name></expr></argument>)<pos:position pos:line="15" pos:column="51"/></argument_list></call></expr></init></decl>;<pos:position pos:line="15" pos:column="52"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="17" pos:column="3">UNUSED_PARAMETER<pos:position pos:line="17" pos:column="19"/></name><argument_list pos:line="17" pos:column="19">(<argument><expr><name pos:line="17" pos:column="20">NotUsed<pos:position pos:line="17" pos:column="27"/></name></expr></argument>)<pos:position pos:line="17" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="29"/></expr_stmt>

  <comment type="block" pos:line="19" pos:column="3">/* The principle used to locate the table name in the CREATE TRIGGER 
  ** statement is that the table name is the first token that is immediatedly
  ** preceded by either TK_ON or TK_DOT and immediatedly followed by one
  ** of TK_WHEN, TK_BEGIN or TK_FOR.
  */</comment>
  <if pos:line="24" pos:column="3">if<condition pos:line="24" pos:column="5">( <expr><name pos:line="24" pos:column="7">zSql<pos:position pos:line="24" pos:column="11"/></name></expr> )<pos:position pos:line="24" pos:column="13"/></condition><then><block pos:line="24" pos:column="13">{
    <do pos:line="25" pos:column="5">do <block pos:line="25" pos:column="8">{

      <if pos:line="27" pos:column="7">if<condition pos:line="27" pos:column="9">( <expr><operator pos:line="27" pos:column="11">!<pos:position pos:line="27" pos:column="12"/></operator><operator pos:line="27" pos:column="12">*<pos:position pos:line="27" pos:column="13"/></operator><name pos:line="27" pos:column="13">zCsr<pos:position pos:line="27" pos:column="17"/></name></expr> )<pos:position pos:line="27" pos:column="19"/></condition><then><block pos:line="27" pos:column="19">{
        <comment type="block" pos:line="28" pos:column="9">/* Ran out of input before finding the table name. Return NULL. */</comment>
        <return pos:line="29" pos:column="9">return;<pos:position pos:line="29" pos:column="16"/></return>
      }<pos:position pos:line="30" pos:column="8"/></block></then></if>

      <comment type="block" pos:line="32" pos:column="7">/* Store the token that zCsr points to in tname. */</comment>
      <expr_stmt><expr><name><name pos:line="33" pos:column="7">tname<pos:position pos:line="33" pos:column="12"/></name><operator pos:line="33" pos:column="12">.<pos:position pos:line="33" pos:column="13"/></operator><name pos:line="33" pos:column="13">z<pos:position pos:line="33" pos:column="14"/></name></name> <operator pos:line="33" pos:column="15">=<pos:position pos:line="33" pos:column="16"/></operator> <operator pos:line="33" pos:column="17">(<pos:position pos:line="33" pos:column="18"/></operator><name pos:line="33" pos:column="18">char<pos:position pos:line="33" pos:column="22"/></name><operator pos:line="33" pos:column="22">*<pos:position pos:line="33" pos:column="23"/></operator><operator pos:line="33" pos:column="23">)<pos:position pos:line="33" pos:column="24"/></operator><name pos:line="33" pos:column="24">zCsr<pos:position pos:line="33" pos:column="28"/></name></expr>;<pos:position pos:line="33" pos:column="29"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="34" pos:column="7">tname<pos:position pos:line="34" pos:column="12"/></name><operator pos:line="34" pos:column="12">.<pos:position pos:line="34" pos:column="13"/></operator><name pos:line="34" pos:column="13">n<pos:position pos:line="34" pos:column="14"/></name></name> <operator pos:line="34" pos:column="15">=<pos:position pos:line="34" pos:column="16"/></operator> <name pos:line="34" pos:column="17">len<pos:position pos:line="34" pos:column="20"/></name></expr>;<pos:position pos:line="34" pos:column="21"/></expr_stmt>

      <comment type="block" pos:line="36" pos:column="7">/* Advance zCsr to the next token. Store that token type in 'token',
      ** and its length in 'len' (to be used next iteration of this loop).
      */</comment>
      <do pos:line="39" pos:column="7">do <block pos:line="39" pos:column="10">{
        <expr_stmt><expr><name pos:line="40" pos:column="9">zCsr<pos:position pos:line="40" pos:column="13"/></name> <operator pos:line="40" pos:column="14">+=<pos:position pos:line="40" pos:column="16"/></operator> <name pos:line="40" pos:column="17">len<pos:position pos:line="40" pos:column="20"/></name></expr>;<pos:position pos:line="40" pos:column="21"/></expr_stmt>
        <expr_stmt><expr><name pos:line="41" pos:column="9">len<pos:position pos:line="41" pos:column="12"/></name> <operator pos:line="41" pos:column="13">=<pos:position pos:line="41" pos:column="14"/></operator> <call><name pos:line="41" pos:column="15">sqlite3GetToken<pos:position pos:line="41" pos:column="30"/></name><argument_list pos:line="41" pos:column="30">(<argument><expr><name pos:line="41" pos:column="31">zCsr<pos:position pos:line="41" pos:column="35"/></name></expr></argument>, <argument><expr><operator pos:line="41" pos:column="37">&amp;<pos:position pos:line="41" pos:column="42"/></operator><name pos:line="41" pos:column="38">token<pos:position pos:line="41" pos:column="43"/></name></expr></argument>)<pos:position pos:line="41" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="45"/></expr_stmt>
      }<pos:position pos:line="42" pos:column="8"/></block>while<condition pos:line="42" pos:column="13">( <expr><name pos:line="42" pos:column="15">token<pos:position pos:line="42" pos:column="20"/></name><operator pos:line="42" pos:column="20">==<pos:position pos:line="42" pos:column="22"/></operator><name pos:line="42" pos:column="22">TK_SPACE<pos:position pos:line="42" pos:column="30"/></name></expr> )<pos:position pos:line="42" pos:column="32"/></condition>;<pos:position pos:line="42" pos:column="33"/></do>
      <expr_stmt><expr><call><name pos:line="43" pos:column="7">assert<pos:position pos:line="43" pos:column="13"/></name><argument_list pos:line="43" pos:column="13">( <argument><expr><name pos:line="43" pos:column="15">len<pos:position pos:line="43" pos:column="18"/></name><operator pos:line="43" pos:column="18">&gt;<pos:position pos:line="43" pos:column="22"/></operator><literal type="number" pos:line="43" pos:column="19">0<pos:position pos:line="43" pos:column="20"/></literal></expr></argument> )<pos:position pos:line="43" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="23"/></expr_stmt>

      <comment type="block" pos:line="45" pos:column="7">/* Variable 'dist' stores the number of tokens read since the most
      ** recent TK_DOT or TK_ON. This means that when a WHEN, FOR or BEGIN 
      ** token is read and 'dist' equals 2, the condition stated above
      ** to be met.
      **
      ** Note that ON cannot be a database, table or column name, so
      ** there is no need to worry about syntax like 
      ** "CREATE TRIGGER ... ON ON.ON BEGIN ..." etc.
      */</comment>
      <expr_stmt><expr><name pos:line="54" pos:column="7">dist<pos:position pos:line="54" pos:column="11"/></name><operator pos:line="54" pos:column="11">++<pos:position pos:line="54" pos:column="13"/></operator></expr>;<pos:position pos:line="54" pos:column="14"/></expr_stmt>
      <if pos:line="55" pos:column="7">if<condition pos:line="55" pos:column="9">( <expr><name pos:line="55" pos:column="11">token<pos:position pos:line="55" pos:column="16"/></name><operator pos:line="55" pos:column="16">==<pos:position pos:line="55" pos:column="18"/></operator><name pos:line="55" pos:column="18">TK_DOT<pos:position pos:line="55" pos:column="24"/></name> <operator pos:line="55" pos:column="25">||<pos:position pos:line="55" pos:column="27"/></operator> <name pos:line="55" pos:column="28">token<pos:position pos:line="55" pos:column="33"/></name><operator pos:line="55" pos:column="33">==<pos:position pos:line="55" pos:column="35"/></operator><name pos:line="55" pos:column="35">TK_ON<pos:position pos:line="55" pos:column="40"/></name></expr> )<pos:position pos:line="55" pos:column="42"/></condition><then><block pos:line="55" pos:column="42">{
        <expr_stmt><expr><name pos:line="56" pos:column="9">dist<pos:position pos:line="56" pos:column="13"/></name> <operator pos:line="56" pos:column="14">=<pos:position pos:line="56" pos:column="15"/></operator> <literal type="number" pos:line="56" pos:column="16">0<pos:position pos:line="56" pos:column="17"/></literal></expr>;<pos:position pos:line="56" pos:column="18"/></expr_stmt>
      }<pos:position pos:line="57" pos:column="8"/></block></then></if>
    }<pos:position pos:line="58" pos:column="6"/></block> while<condition pos:line="58" pos:column="12">( <expr><name pos:line="58" pos:column="14">dist<pos:position pos:line="58" pos:column="18"/></name><operator pos:line="58" pos:column="18">!=<pos:position pos:line="58" pos:column="20"/></operator><literal type="number" pos:line="58" pos:column="20">2<pos:position pos:line="58" pos:column="21"/></literal> <operator pos:line="58" pos:column="22">||<pos:position pos:line="58" pos:column="24"/></operator> <operator pos:line="58" pos:column="25">(<pos:position pos:line="58" pos:column="26"/></operator><name pos:line="58" pos:column="26">token<pos:position pos:line="58" pos:column="31"/></name><operator pos:line="58" pos:column="31">!=<pos:position pos:line="58" pos:column="33"/></operator><name pos:line="58" pos:column="33">TK_WHEN<pos:position pos:line="58" pos:column="40"/></name> <operator pos:line="58" pos:column="41">&amp;&amp;<pos:position pos:line="58" pos:column="51"/></operator> <name pos:line="58" pos:column="44">token<pos:position pos:line="58" pos:column="49"/></name><operator pos:line="58" pos:column="49">!=<pos:position pos:line="58" pos:column="51"/></operator><name pos:line="58" pos:column="51">TK_FOR<pos:position pos:line="58" pos:column="57"/></name> <operator pos:line="58" pos:column="58">&amp;&amp;<pos:position pos:line="58" pos:column="68"/></operator> <name pos:line="58" pos:column="61">token<pos:position pos:line="58" pos:column="66"/></name><operator pos:line="58" pos:column="66">!=<pos:position pos:line="58" pos:column="68"/></operator><name pos:line="58" pos:column="68">TK_BEGIN<pos:position pos:line="58" pos:column="76"/></name><operator pos:line="58" pos:column="76">)<pos:position pos:line="58" pos:column="77"/></operator></expr> )<pos:position pos:line="58" pos:column="79"/></condition>;<pos:position pos:line="58" pos:column="80"/></do>

    <comment type="block" pos:line="60" pos:column="5">/* Variable tname now contains the token that is the old table-name
    ** in the CREATE TRIGGER statement.
    */</comment>
    <expr_stmt><expr><name pos:line="63" pos:column="5">zRet<pos:position pos:line="63" pos:column="9"/></name> <operator pos:line="63" pos:column="10">=<pos:position pos:line="63" pos:column="11"/></operator> <call><name pos:line="63" pos:column="12">sqlite3MPrintf<pos:position pos:line="63" pos:column="26"/></name><argument_list pos:line="63" pos:column="26">(<argument><expr><name pos:line="63" pos:column="27">db<pos:position pos:line="63" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="63" pos:column="31">"%.*s\"%w\"%s"<pos:position pos:line="63" pos:column="45"/></literal></expr></argument>, <argument><expr><operator pos:line="63" pos:column="47">(<pos:position pos:line="63" pos:column="48"/></operator><operator pos:line="63" pos:column="48">(<pos:position pos:line="63" pos:column="49"/></operator><name pos:line="63" pos:column="49">u8<pos:position pos:line="63" pos:column="51"/></name><operator pos:line="63" pos:column="51">*<pos:position pos:line="63" pos:column="52"/></operator><operator pos:line="63" pos:column="52">)<pos:position pos:line="63" pos:column="53"/></operator><name><name pos:line="63" pos:column="53">tname<pos:position pos:line="63" pos:column="58"/></name><operator pos:line="63" pos:column="58">.<pos:position pos:line="63" pos:column="59"/></operator><name pos:line="63" pos:column="59">z<pos:position pos:line="63" pos:column="60"/></name></name><operator pos:line="63" pos:column="60">)<pos:position pos:line="63" pos:column="61"/></operator> <operator pos:line="63" pos:column="62">-<pos:position pos:line="63" pos:column="63"/></operator> <name pos:line="63" pos:column="64">zSql<pos:position pos:line="63" pos:column="68"/></name></expr></argument>, <argument><expr><name pos:line="63" pos:column="70">zSql<pos:position pos:line="63" pos:column="74"/></name></expr></argument>, 
       <argument><expr><name pos:line="64" pos:column="8">zTableName<pos:position pos:line="64" pos:column="18"/></name></expr></argument>, <argument><expr><name><name pos:line="64" pos:column="20">tname<pos:position pos:line="64" pos:column="25"/></name><operator pos:line="64" pos:column="25">.<pos:position pos:line="64" pos:column="26"/></operator><name pos:line="64" pos:column="26">z<pos:position pos:line="64" pos:column="27"/></name></name><operator pos:line="64" pos:column="27">+<pos:position pos:line="64" pos:column="28"/></operator><name><name pos:line="64" pos:column="28">tname<pos:position pos:line="64" pos:column="33"/></name><operator pos:line="64" pos:column="33">.<pos:position pos:line="64" pos:column="34"/></operator><name pos:line="64" pos:column="34">n<pos:position pos:line="64" pos:column="35"/></name></name></expr></argument>)<pos:position pos:line="64" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="37"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="65" pos:column="5">sqlite3_result_text<pos:position pos:line="65" pos:column="24"/></name><argument_list pos:line="65" pos:column="24">(<argument><expr><name pos:line="65" pos:column="25">context<pos:position pos:line="65" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="65" pos:column="34">zRet<pos:position pos:line="65" pos:column="38"/></name></expr></argument>, <argument><expr><operator pos:line="65" pos:column="40">-<pos:position pos:line="65" pos:column="41"/></operator><literal type="number" pos:line="65" pos:column="41">1<pos:position pos:line="65" pos:column="42"/></literal></expr></argument>, <argument><expr><name pos:line="65" pos:column="44">SQLITE_DYNAMIC<pos:position pos:line="65" pos:column="58"/></name></expr></argument>)<pos:position pos:line="65" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="60"/></expr_stmt>
  }<pos:position pos:line="66" pos:column="4"/></block></then></if>
}<pos:position pos:line="67" pos:column="2"/></block></function></unit>
