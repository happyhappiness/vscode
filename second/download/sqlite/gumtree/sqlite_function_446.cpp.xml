<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/sqlite/gumtree/sqlite_function_446.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">explainSimpleCount<pos:position pos:line="1" pos:column="31"/></name><parameter_list pos:line="1" pos:column="31">(
  <parameter><decl><type><name pos:line="2" pos:column="3">Parse<pos:position pos:line="2" pos:column="8"/></name> <modifier pos:line="2" pos:column="9">*<pos:position pos:line="2" pos:column="10"/></modifier></type><name pos:line="2" pos:column="10">pParse<pos:position pos:line="2" pos:column="16"/></name></decl></parameter>,                  <comment type="block" pos:line="2" pos:column="35">/* Parse context */</comment>
  <parameter><decl><type><name pos:line="3" pos:column="3">Table<pos:position pos:line="3" pos:column="8"/></name> <modifier pos:line="3" pos:column="9">*<pos:position pos:line="3" pos:column="10"/></modifier></type><name pos:line="3" pos:column="10">pTab<pos:position pos:line="3" pos:column="14"/></name></decl></parameter>,                    <comment type="block" pos:line="3" pos:column="35">/* Table being queried */</comment>
  <parameter><decl><type><name pos:line="4" pos:column="3">Index<pos:position pos:line="4" pos:column="8"/></name> <modifier pos:line="4" pos:column="9">*<pos:position pos:line="4" pos:column="10"/></modifier></type><name pos:line="4" pos:column="10">pIdx<pos:position pos:line="4" pos:column="14"/></name></decl></parameter>                     <comment type="block" pos:line="4" pos:column="35">/* Index used to optimize scan, or NULL */</comment>
)<pos:position pos:line="5" pos:column="2"/></parameter_list><block pos:line="5" pos:column="2">{
  <if pos:line="6" pos:column="3">if<condition pos:line="6" pos:column="5">( <expr><name><name pos:line="6" pos:column="7">pParse<pos:position pos:line="6" pos:column="13"/></name><operator pos:line="6" pos:column="13">-&gt;<pos:position pos:line="6" pos:column="18"/></operator><name pos:line="6" pos:column="15">explain<pos:position pos:line="6" pos:column="22"/></name></name><operator pos:line="6" pos:column="22">==<pos:position pos:line="6" pos:column="24"/></operator><literal type="number" pos:line="6" pos:column="24">2<pos:position pos:line="6" pos:column="25"/></literal></expr> )<pos:position pos:line="6" pos:column="27"/></condition><then><block pos:line="6" pos:column="27">{
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">int<pos:position pos:line="7" pos:column="8"/></name></type> <name pos:line="7" pos:column="9">bCover<pos:position pos:line="7" pos:column="15"/></name> <init pos:line="7" pos:column="16">= <expr><operator pos:line="7" pos:column="18">(<pos:position pos:line="7" pos:column="19"/></operator><name pos:line="7" pos:column="19">pIdx<pos:position pos:line="7" pos:column="23"/></name><operator pos:line="7" pos:column="23">!=<pos:position pos:line="7" pos:column="25"/></operator><literal type="number" pos:line="7" pos:column="25">0<pos:position pos:line="7" pos:column="26"/></literal> <operator pos:line="7" pos:column="27">&amp;&amp;<pos:position pos:line="7" pos:column="37"/></operator> <operator pos:line="7" pos:column="30">(<pos:position pos:line="7" pos:column="31"/></operator><call><name pos:line="7" pos:column="31">HasRowid<pos:position pos:line="7" pos:column="39"/></name><argument_list pos:line="7" pos:column="39">(<argument><expr><name pos:line="7" pos:column="40">pTab<pos:position pos:line="7" pos:column="44"/></name></expr></argument>)<pos:position pos:line="7" pos:column="45"/></argument_list></call> <operator pos:line="7" pos:column="46">||<pos:position pos:line="7" pos:column="48"/></operator> <operator pos:line="7" pos:column="49">!<pos:position pos:line="7" pos:column="50"/></operator><call><name pos:line="7" pos:column="50">IsPrimaryKeyIndex<pos:position pos:line="7" pos:column="67"/></name><argument_list pos:line="7" pos:column="67">(<argument><expr><name pos:line="7" pos:column="68">pIdx<pos:position pos:line="7" pos:column="72"/></name></expr></argument>)<pos:position pos:line="7" pos:column="73"/></argument_list></call><operator pos:line="7" pos:column="73">)<pos:position pos:line="7" pos:column="74"/></operator><operator pos:line="7" pos:column="74">)<pos:position pos:line="7" pos:column="75"/></operator></expr></init></decl>;<pos:position pos:line="7" pos:column="76"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">char<pos:position pos:line="8" pos:column="9"/></name> <modifier pos:line="8" pos:column="10">*<pos:position pos:line="8" pos:column="11"/></modifier></type><name pos:line="8" pos:column="11">zEqp<pos:position pos:line="8" pos:column="15"/></name> <init pos:line="8" pos:column="16">= <expr><call><name pos:line="8" pos:column="18">sqlite3MPrintf<pos:position pos:line="8" pos:column="32"/></name><argument_list pos:line="8" pos:column="32">(<argument><expr><name><name pos:line="8" pos:column="33">pParse<pos:position pos:line="8" pos:column="39"/></name><operator pos:line="8" pos:column="39">-&gt;<pos:position pos:line="8" pos:column="44"/></operator><name pos:line="8" pos:column="41">db<pos:position pos:line="8" pos:column="43"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="8" pos:column="45">"SCAN TABLE %s%s%s"<pos:position pos:line="8" pos:column="64"/></literal></expr></argument>,
        <argument><expr><name><name pos:line="9" pos:column="9">pTab<pos:position pos:line="9" pos:column="13"/></name><operator pos:line="9" pos:column="13">-&gt;<pos:position pos:line="9" pos:column="18"/></operator><name pos:line="9" pos:column="15">zName<pos:position pos:line="9" pos:column="20"/></name></name></expr></argument>,
        <argument><expr><ternary><condition><expr><name pos:line="10" pos:column="9">bCover<pos:position pos:line="10" pos:column="15"/></name></expr> ?<pos:position pos:line="10" pos:column="17"/></condition><then pos:line="10" pos:column="17"> <expr><literal type="string" pos:line="10" pos:column="18">" USING COVERING INDEX "<pos:position pos:line="10" pos:column="42"/></literal></expr> <pos:position pos:line="10" pos:column="43"/></then><else pos:line="10" pos:column="43">: <expr><literal type="string" pos:line="10" pos:column="45">""<pos:position pos:line="10" pos:column="47"/></literal></expr></else></ternary></expr></argument>,
        <argument><expr><ternary><condition><expr><name pos:line="11" pos:column="9">bCover<pos:position pos:line="11" pos:column="15"/></name></expr> ?<pos:position pos:line="11" pos:column="17"/></condition><then pos:line="11" pos:column="17"> <expr><name><name pos:line="11" pos:column="18">pIdx<pos:position pos:line="11" pos:column="22"/></name><operator pos:line="11" pos:column="22">-&gt;<pos:position pos:line="11" pos:column="27"/></operator><name pos:line="11" pos:column="24">zName<pos:position pos:line="11" pos:column="29"/></name></name></expr> <pos:position pos:line="11" pos:column="30"/></then><else pos:line="11" pos:column="30">: <expr><literal type="string" pos:line="11" pos:column="32">""<pos:position pos:line="11" pos:column="34"/></literal></expr></else></ternary></expr></argument>
    )<pos:position pos:line="12" pos:column="6"/></argument_list></call></expr></init></decl>;<pos:position pos:line="12" pos:column="7"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="13" pos:column="5">sqlite3VdbeAddOp4<pos:position pos:line="13" pos:column="22"/></name><argument_list pos:line="13" pos:column="22">(
        <argument><expr><name><name pos:line="14" pos:column="9">pParse<pos:position pos:line="14" pos:column="15"/></name><operator pos:line="14" pos:column="15">-&gt;<pos:position pos:line="14" pos:column="20"/></operator><name pos:line="14" pos:column="17">pVdbe<pos:position pos:line="14" pos:column="22"/></name></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="24">OP_Explain<pos:position pos:line="14" pos:column="34"/></name></expr></argument>, <argument><expr><name><name pos:line="14" pos:column="36">pParse<pos:position pos:line="14" pos:column="42"/></name><operator pos:line="14" pos:column="42">-&gt;<pos:position pos:line="14" pos:column="47"/></operator><name pos:line="14" pos:column="44">iSelectId<pos:position pos:line="14" pos:column="53"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="14" pos:column="55">0<pos:position pos:line="14" pos:column="56"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="14" pos:column="58">0<pos:position pos:line="14" pos:column="59"/></literal></expr></argument>, <argument><expr><name pos:line="14" pos:column="61">zEqp<pos:position pos:line="14" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="67">P4_DYNAMIC<pos:position pos:line="14" pos:column="77"/></name></expr></argument>
    )<pos:position pos:line="15" pos:column="6"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="7"/></expr_stmt>
  }<pos:position pos:line="16" pos:column="4"/></block></then></if>
}<pos:position pos:line="17" pos:column="2"/></block></function></unit>
