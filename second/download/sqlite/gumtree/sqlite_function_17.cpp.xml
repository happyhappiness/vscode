<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/sqlite/gumtree/sqlite_function_17.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">parseSpec<pos:position pos:line="1" pos:column="21"/></name><parameter_list pos:line="1" pos:column="21">(<parameter><decl><type><name pos:line="1" pos:column="22">TableSpec<pos:position pos:line="1" pos:column="31"/></name> <modifier pos:line="1" pos:column="32">*<pos:position pos:line="1" pos:column="33"/></modifier></type><name pos:line="1" pos:column="33">pSpec<pos:position pos:line="1" pos:column="38"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="40">int<pos:position pos:line="1" pos:column="43"/></name></type> <name pos:line="1" pos:column="44">argc<pos:position pos:line="1" pos:column="48"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="50">const<pos:position pos:line="1" pos:column="55"/></specifier> <name pos:line="1" pos:column="56">char<pos:position pos:line="1" pos:column="60"/></name> <modifier pos:line="1" pos:column="61">*<pos:position pos:line="1" pos:column="62"/></modifier><specifier pos:line="1" pos:column="62">const<pos:position pos:line="1" pos:column="67"/></specifier><modifier pos:line="1" pos:column="67">*<pos:position pos:line="1" pos:column="68"/></modifier></type><name pos:line="1" pos:column="68">argv<pos:position pos:line="1" pos:column="72"/></name></decl></parameter>,
                     <parameter><decl><type><name pos:line="2" pos:column="22">char<pos:position pos:line="2" pos:column="26"/></name><modifier pos:line="2" pos:column="26">*<pos:position pos:line="2" pos:column="27"/></modifier><modifier pos:line="2" pos:column="27">*<pos:position pos:line="2" pos:column="28"/></modifier></type><name pos:line="2" pos:column="28">pzErr<pos:position pos:line="2" pos:column="33"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="34"/></parameter_list><block pos:line="2" pos:column="34">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">int<pos:position pos:line="3" pos:column="6"/></name></type> <name pos:line="3" pos:column="7">i<pos:position pos:line="3" pos:column="8"/></name></decl>, <decl><type ref="prev"/><name pos:line="3" pos:column="10">n<pos:position pos:line="3" pos:column="11"/></name></decl>;<pos:position pos:line="3" pos:column="12"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">char<pos:position pos:line="4" pos:column="7"/></name> <modifier pos:line="4" pos:column="8">*<pos:position pos:line="4" pos:column="9"/></modifier></type><name pos:line="4" pos:column="9">z<pos:position pos:line="4" pos:column="10"/></name></decl>, <modifier pos:line="4" pos:column="12">*<pos:position pos:line="4" pos:column="13"/></modifier><decl><type ref="prev"/><name pos:line="4" pos:column="13">zDummy<pos:position pos:line="4" pos:column="19"/></name></decl>;<pos:position pos:line="4" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">char<pos:position pos:line="5" pos:column="7"/></name> <modifier pos:line="5" pos:column="8">*<pos:position pos:line="5" pos:column="9"/></modifier><modifier pos:line="5" pos:column="9">*<pos:position pos:line="5" pos:column="10"/></modifier></type><name pos:line="5" pos:column="10">azArg<pos:position pos:line="5" pos:column="15"/></name></decl>;<pos:position pos:line="5" pos:column="16"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="6" pos:column="3">const<pos:position pos:line="6" pos:column="8"/></specifier> <name pos:line="6" pos:column="9">char<pos:position pos:line="6" pos:column="13"/></name> <modifier pos:line="6" pos:column="14">*<pos:position pos:line="6" pos:column="15"/></modifier></type><name pos:line="6" pos:column="15">zTokenizer<pos:position pos:line="6" pos:column="25"/></name> <init pos:line="6" pos:column="26">= <expr><literal type="number" pos:line="6" pos:column="28">0<pos:position pos:line="6" pos:column="29"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="30"/></decl_stmt>    <comment type="block" pos:line="6" pos:column="34">/* argv[] entry describing the tokenizer */</comment>

  <expr_stmt><expr><call><name pos:line="8" pos:column="3">assert<pos:position pos:line="8" pos:column="9"/></name><argument_list pos:line="8" pos:column="9">( <argument><expr><name pos:line="8" pos:column="11">argc<pos:position pos:line="8" pos:column="15"/></name><operator pos:line="8" pos:column="15">&gt;=<pos:position pos:line="8" pos:column="20"/></operator><literal type="number" pos:line="8" pos:column="17">3<pos:position pos:line="8" pos:column="18"/></literal></expr></argument> )<pos:position pos:line="8" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="21"/></expr_stmt>
  <comment type="block" pos:line="9" pos:column="3">/* Current interface:
  ** argv[0] - module name
  ** argv[1] - database name
  ** argv[2] - table name
  ** argv[3..] - columns, optionally followed by tokenizer specification
  **             and snippet delimiters specification.
  */</comment>

  <comment type="block" pos:line="17" pos:column="3">/* Make a copy of the complete argv[][] array in a single allocation.
  ** The argv[][] array is read-only and transient.  We can write to the
  ** copy in order to modify things and the copy is persistent.
  */</comment>
  <expr_stmt><expr><call><name pos:line="21" pos:column="3">CLEAR<pos:position pos:line="21" pos:column="8"/></name><argument_list pos:line="21" pos:column="8">(<argument><expr><name pos:line="21" pos:column="9">pSpec<pos:position pos:line="21" pos:column="14"/></name></expr></argument>)<pos:position pos:line="21" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="16"/></expr_stmt>
  <for pos:line="22" pos:column="3">for<control pos:line="22" pos:column="6">(<init><expr><name pos:line="22" pos:column="7">i<pos:position pos:line="22" pos:column="8"/></name><operator pos:line="22" pos:column="8">=<pos:position pos:line="22" pos:column="9"/></operator><name pos:line="22" pos:column="9">n<pos:position pos:line="22" pos:column="10"/></name><operator pos:line="22" pos:column="10">=<pos:position pos:line="22" pos:column="11"/></operator><literal type="number" pos:line="22" pos:column="11">0<pos:position pos:line="22" pos:column="12"/></literal></expr>;<pos:position pos:line="22" pos:column="13"/></init> <condition><expr><name pos:line="22" pos:column="14">i<pos:position pos:line="22" pos:column="15"/></name><operator pos:line="22" pos:column="15">&lt;<pos:position pos:line="22" pos:column="19"/></operator><name pos:line="22" pos:column="16">argc<pos:position pos:line="22" pos:column="20"/></name></expr>;<pos:position pos:line="22" pos:column="21"/></condition> <incr><expr><name pos:line="22" pos:column="22">i<pos:position pos:line="22" pos:column="23"/></name><operator pos:line="22" pos:column="23">++<pos:position pos:line="22" pos:column="25"/></operator></expr></incr>)<pos:position pos:line="22" pos:column="26"/></control><block pos:line="22" pos:column="26">{
    <expr_stmt><expr><name pos:line="23" pos:column="5">n<pos:position pos:line="23" pos:column="6"/></name> <operator pos:line="23" pos:column="7">+=<pos:position pos:line="23" pos:column="9"/></operator> <call><name pos:line="23" pos:column="10">strlen<pos:position pos:line="23" pos:column="16"/></name><argument_list pos:line="23" pos:column="16">(<argument><expr><name><name pos:line="23" pos:column="17">argv<pos:position pos:line="23" pos:column="21"/></name><index pos:line="23" pos:column="21">[<expr><name pos:line="23" pos:column="22">i<pos:position pos:line="23" pos:column="23"/></name></expr>]<pos:position pos:line="23" pos:column="24"/></index></name></expr></argument>)<pos:position pos:line="23" pos:column="25"/></argument_list></call> <operator pos:line="23" pos:column="26">+<pos:position pos:line="23" pos:column="27"/></operator> <literal type="number" pos:line="23" pos:column="28">1<pos:position pos:line="23" pos:column="29"/></literal></expr>;<pos:position pos:line="23" pos:column="30"/></expr_stmt>
  }<pos:position pos:line="24" pos:column="4"/></block></for>
  <expr_stmt><expr><name pos:line="25" pos:column="3">azArg<pos:position pos:line="25" pos:column="8"/></name> <operator pos:line="25" pos:column="9">=<pos:position pos:line="25" pos:column="10"/></operator> <call><name pos:line="25" pos:column="11">sqlite3_malloc<pos:position pos:line="25" pos:column="25"/></name><argument_list pos:line="25" pos:column="25">( <argument><expr><sizeof pos:line="25" pos:column="27">sizeof<argument_list pos:line="25" pos:column="33">(<argument><expr><name pos:line="25" pos:column="34">char<pos:position pos:line="25" pos:column="38"/></name><operator pos:line="25" pos:column="38">*<pos:position pos:line="25" pos:column="39"/></operator></expr></argument>)<pos:position pos:line="25" pos:column="40"/></argument_list></sizeof><operator pos:line="25" pos:column="40">*<pos:position pos:line="25" pos:column="41"/></operator><name pos:line="25" pos:column="41">argc<pos:position pos:line="25" pos:column="45"/></name> <operator pos:line="25" pos:column="46">+<pos:position pos:line="25" pos:column="47"/></operator> <name pos:line="25" pos:column="48">n<pos:position pos:line="25" pos:column="49"/></name></expr></argument> )<pos:position pos:line="25" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="52"/></expr_stmt>
  <if pos:line="26" pos:column="3">if<condition pos:line="26" pos:column="5">( <expr><name pos:line="26" pos:column="7">azArg<pos:position pos:line="26" pos:column="12"/></name><operator pos:line="26" pos:column="12">==<pos:position pos:line="26" pos:column="14"/></operator><literal type="number" pos:line="26" pos:column="14">0<pos:position pos:line="26" pos:column="15"/></literal></expr> )<pos:position pos:line="26" pos:column="17"/></condition><then><block pos:line="26" pos:column="17">{
    <return pos:line="27" pos:column="5">return <expr><name pos:line="27" pos:column="12">SQLITE_NOMEM<pos:position pos:line="27" pos:column="24"/></name></expr>;<pos:position pos:line="27" pos:column="25"/></return>
  }<pos:position pos:line="28" pos:column="4"/></block></then></if>
  <expr_stmt><expr><name pos:line="29" pos:column="3">z<pos:position pos:line="29" pos:column="4"/></name> <operator pos:line="29" pos:column="5">=<pos:position pos:line="29" pos:column="6"/></operator> <operator pos:line="29" pos:column="7">(<pos:position pos:line="29" pos:column="8"/></operator><name pos:line="29" pos:column="8">char<pos:position pos:line="29" pos:column="12"/></name><operator pos:line="29" pos:column="12">*<pos:position pos:line="29" pos:column="13"/></operator><operator pos:line="29" pos:column="13">)<pos:position pos:line="29" pos:column="14"/></operator><operator pos:line="29" pos:column="14">&amp;<pos:position pos:line="29" pos:column="19"/></operator><name><name pos:line="29" pos:column="15">azArg<pos:position pos:line="29" pos:column="20"/></name><index pos:line="29" pos:column="20">[<expr><name pos:line="29" pos:column="21">argc<pos:position pos:line="29" pos:column="25"/></name></expr>]<pos:position pos:line="29" pos:column="26"/></index></name></expr>;<pos:position pos:line="29" pos:column="27"/></expr_stmt>
  <for pos:line="30" pos:column="3">for<control pos:line="30" pos:column="6">(<init><expr><name pos:line="30" pos:column="7">i<pos:position pos:line="30" pos:column="8"/></name><operator pos:line="30" pos:column="8">=<pos:position pos:line="30" pos:column="9"/></operator><literal type="number" pos:line="30" pos:column="9">0<pos:position pos:line="30" pos:column="10"/></literal></expr>;<pos:position pos:line="30" pos:column="11"/></init> <condition><expr><name pos:line="30" pos:column="12">i<pos:position pos:line="30" pos:column="13"/></name><operator pos:line="30" pos:column="13">&lt;<pos:position pos:line="30" pos:column="17"/></operator><name pos:line="30" pos:column="14">argc<pos:position pos:line="30" pos:column="18"/></name></expr>;<pos:position pos:line="30" pos:column="19"/></condition> <incr><expr><name pos:line="30" pos:column="20">i<pos:position pos:line="30" pos:column="21"/></name><operator pos:line="30" pos:column="21">++<pos:position pos:line="30" pos:column="23"/></operator></expr></incr>)<pos:position pos:line="30" pos:column="24"/></control><block pos:line="30" pos:column="24">{
    <expr_stmt><expr><name><name pos:line="31" pos:column="5">azArg<pos:position pos:line="31" pos:column="10"/></name><index pos:line="31" pos:column="10">[<expr><name pos:line="31" pos:column="11">i<pos:position pos:line="31" pos:column="12"/></name></expr>]<pos:position pos:line="31" pos:column="13"/></index></name> <operator pos:line="31" pos:column="14">=<pos:position pos:line="31" pos:column="15"/></operator> <name pos:line="31" pos:column="16">z<pos:position pos:line="31" pos:column="17"/></name></expr>;<pos:position pos:line="31" pos:column="18"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="32" pos:column="5">strcpy<pos:position pos:line="32" pos:column="11"/></name><argument_list pos:line="32" pos:column="11">(<argument><expr><name pos:line="32" pos:column="12">z<pos:position pos:line="32" pos:column="13"/></name></expr></argument>, <argument><expr><name><name pos:line="32" pos:column="15">argv<pos:position pos:line="32" pos:column="19"/></name><index pos:line="32" pos:column="19">[<expr><name pos:line="32" pos:column="20">i<pos:position pos:line="32" pos:column="21"/></name></expr>]<pos:position pos:line="32" pos:column="22"/></index></name></expr></argument>)<pos:position pos:line="32" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="24"/></expr_stmt>
    <expr_stmt><expr><name pos:line="33" pos:column="5">z<pos:position pos:line="33" pos:column="6"/></name> <operator pos:line="33" pos:column="7">+=<pos:position pos:line="33" pos:column="9"/></operator> <call><name pos:line="33" pos:column="10">strlen<pos:position pos:line="33" pos:column="16"/></name><argument_list pos:line="33" pos:column="16">(<argument><expr><name pos:line="33" pos:column="17">z<pos:position pos:line="33" pos:column="18"/></name></expr></argument>)<pos:position pos:line="33" pos:column="19"/></argument_list></call><operator pos:line="33" pos:column="19">+<pos:position pos:line="33" pos:column="20"/></operator><literal type="number" pos:line="33" pos:column="20">1<pos:position pos:line="33" pos:column="21"/></literal></expr>;<pos:position pos:line="33" pos:column="22"/></expr_stmt>
  }<pos:position pos:line="34" pos:column="4"/></block></for>

  <comment type="block" pos:line="36" pos:column="3">/* Identify the column names and the tokenizer and delimiter arguments
  ** in the argv[][] array.
  */</comment>
  <expr_stmt><expr><name><name pos:line="39" pos:column="3">pSpec<pos:position pos:line="39" pos:column="8"/></name><operator pos:line="39" pos:column="8">-&gt;<pos:position pos:line="39" pos:column="13"/></operator><name pos:line="39" pos:column="10">zDb<pos:position pos:line="39" pos:column="13"/></name></name> <operator pos:line="39" pos:column="14">=<pos:position pos:line="39" pos:column="15"/></operator> <name><name pos:line="39" pos:column="16">azArg<pos:position pos:line="39" pos:column="21"/></name><index pos:line="39" pos:column="21">[<expr><literal type="number" pos:line="39" pos:column="22">1<pos:position pos:line="39" pos:column="23"/></literal></expr>]<pos:position pos:line="39" pos:column="24"/></index></name></expr>;<pos:position pos:line="39" pos:column="25"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="40" pos:column="3">pSpec<pos:position pos:line="40" pos:column="8"/></name><operator pos:line="40" pos:column="8">-&gt;<pos:position pos:line="40" pos:column="13"/></operator><name pos:line="40" pos:column="10">zName<pos:position pos:line="40" pos:column="15"/></name></name> <operator pos:line="40" pos:column="16">=<pos:position pos:line="40" pos:column="17"/></operator> <name><name pos:line="40" pos:column="18">azArg<pos:position pos:line="40" pos:column="23"/></name><index pos:line="40" pos:column="23">[<expr><literal type="number" pos:line="40" pos:column="24">2<pos:position pos:line="40" pos:column="25"/></literal></expr>]<pos:position pos:line="40" pos:column="26"/></index></name></expr>;<pos:position pos:line="40" pos:column="27"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="41" pos:column="3">pSpec<pos:position pos:line="41" pos:column="8"/></name><operator pos:line="41" pos:column="8">-&gt;<pos:position pos:line="41" pos:column="13"/></operator><name pos:line="41" pos:column="10">nColumn<pos:position pos:line="41" pos:column="17"/></name></name> <operator pos:line="41" pos:column="18">=<pos:position pos:line="41" pos:column="19"/></operator> <literal type="number" pos:line="41" pos:column="20">0<pos:position pos:line="41" pos:column="21"/></literal></expr>;<pos:position pos:line="41" pos:column="22"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="42" pos:column="3">pSpec<pos:position pos:line="42" pos:column="8"/></name><operator pos:line="42" pos:column="8">-&gt;<pos:position pos:line="42" pos:column="13"/></operator><name pos:line="42" pos:column="10">azColumn<pos:position pos:line="42" pos:column="18"/></name></name> <operator pos:line="42" pos:column="19">=<pos:position pos:line="42" pos:column="20"/></operator> <name pos:line="42" pos:column="21">azArg<pos:position pos:line="42" pos:column="26"/></name></expr>;<pos:position pos:line="42" pos:column="27"/></expr_stmt>
  <expr_stmt><expr><name pos:line="43" pos:column="3">zTokenizer<pos:position pos:line="43" pos:column="13"/></name> <operator pos:line="43" pos:column="14">=<pos:position pos:line="43" pos:column="15"/></operator> <literal type="string" pos:line="43" pos:column="16">"tokenize simple"<pos:position pos:line="43" pos:column="33"/></literal></expr>;<pos:position pos:line="43" pos:column="34"/></expr_stmt>
  <for pos:line="44" pos:column="3">for<control pos:line="44" pos:column="6">(<init><expr><name pos:line="44" pos:column="7">i<pos:position pos:line="44" pos:column="8"/></name><operator pos:line="44" pos:column="8">=<pos:position pos:line="44" pos:column="9"/></operator><literal type="number" pos:line="44" pos:column="9">3<pos:position pos:line="44" pos:column="10"/></literal></expr>;<pos:position pos:line="44" pos:column="11"/></init> <condition><expr><name pos:line="44" pos:column="12">i<pos:position pos:line="44" pos:column="13"/></name><operator pos:line="44" pos:column="13">&lt;<pos:position pos:line="44" pos:column="17"/></operator><name pos:line="44" pos:column="14">argc<pos:position pos:line="44" pos:column="18"/></name></expr>;<pos:position pos:line="44" pos:column="19"/></condition> <incr><expr><operator pos:line="44" pos:column="20">++<pos:position pos:line="44" pos:column="22"/></operator><name pos:line="44" pos:column="22">i<pos:position pos:line="44" pos:column="23"/></name></expr></incr>)<pos:position pos:line="44" pos:column="24"/></control><block pos:line="44" pos:column="24">{
    <if pos:line="45" pos:column="5">if<condition pos:line="45" pos:column="7">( <expr><call><name pos:line="45" pos:column="9">startsWith<pos:position pos:line="45" pos:column="19"/></name><argument_list pos:line="45" pos:column="19">(<argument><expr><name><name pos:line="45" pos:column="20">azArg<pos:position pos:line="45" pos:column="25"/></name><index pos:line="45" pos:column="25">[<expr><name pos:line="45" pos:column="26">i<pos:position pos:line="45" pos:column="27"/></name></expr>]<pos:position pos:line="45" pos:column="28"/></index></name></expr></argument>,<argument><expr><literal type="string" pos:line="45" pos:column="29">"tokenize"<pos:position pos:line="45" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="45" pos:column="40"/></argument_list></call></expr> )<pos:position pos:line="45" pos:column="42"/></condition><then><block pos:line="45" pos:column="42">{
      <expr_stmt><expr><name pos:line="46" pos:column="7">zTokenizer<pos:position pos:line="46" pos:column="17"/></name> <operator pos:line="46" pos:column="18">=<pos:position pos:line="46" pos:column="19"/></operator> <name><name pos:line="46" pos:column="20">azArg<pos:position pos:line="46" pos:column="25"/></name><index pos:line="46" pos:column="25">[<expr><name pos:line="46" pos:column="26">i<pos:position pos:line="46" pos:column="27"/></name></expr>]<pos:position pos:line="46" pos:column="28"/></index></name></expr>;<pos:position pos:line="46" pos:column="29"/></expr_stmt>
    }<pos:position pos:line="47" pos:column="6"/></block></then><else pos:line="47" pos:column="6">else<block pos:line="47" pos:column="10">{
      <expr_stmt><expr><name pos:line="48" pos:column="7">z<pos:position pos:line="48" pos:column="8"/></name> <operator pos:line="48" pos:column="9">=<pos:position pos:line="48" pos:column="10"/></operator> <name><name pos:line="48" pos:column="11">azArg<pos:position pos:line="48" pos:column="16"/></name><index pos:line="48" pos:column="16">[<expr><name><name pos:line="48" pos:column="17">pSpec<pos:position pos:line="48" pos:column="22"/></name><operator pos:line="48" pos:column="22">-&gt;<pos:position pos:line="48" pos:column="27"/></operator><name pos:line="48" pos:column="24">nColumn<pos:position pos:line="48" pos:column="31"/></name></name></expr>]<pos:position pos:line="48" pos:column="32"/></index></name> <operator pos:line="48" pos:column="33">=<pos:position pos:line="48" pos:column="34"/></operator> <call><name pos:line="48" pos:column="35">firstToken<pos:position pos:line="48" pos:column="45"/></name><argument_list pos:line="48" pos:column="45">(<argument><expr><name><name pos:line="48" pos:column="46">azArg<pos:position pos:line="48" pos:column="51"/></name><index pos:line="48" pos:column="51">[<expr><name pos:line="48" pos:column="52">i<pos:position pos:line="48" pos:column="53"/></name></expr>]<pos:position pos:line="48" pos:column="54"/></index></name></expr></argument>, <argument><expr><operator pos:line="48" pos:column="56">&amp;<pos:position pos:line="48" pos:column="61"/></operator><name pos:line="48" pos:column="57">zDummy<pos:position pos:line="48" pos:column="63"/></name></expr></argument>)<pos:position pos:line="48" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="65"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="49" pos:column="7">pSpec<pos:position pos:line="49" pos:column="12"/></name><operator pos:line="49" pos:column="12">-&gt;<pos:position pos:line="49" pos:column="17"/></operator><name pos:line="49" pos:column="14">nColumn<pos:position pos:line="49" pos:column="21"/></name></name><operator pos:line="49" pos:column="21">++<pos:position pos:line="49" pos:column="23"/></operator></expr>;<pos:position pos:line="49" pos:column="24"/></expr_stmt>
    }<pos:position pos:line="50" pos:column="6"/></block></else></if>
  }<pos:position pos:line="51" pos:column="4"/></block></for>
  <if pos:line="52" pos:column="3">if<condition pos:line="52" pos:column="5">( <expr><name><name pos:line="52" pos:column="7">pSpec<pos:position pos:line="52" pos:column="12"/></name><operator pos:line="52" pos:column="12">-&gt;<pos:position pos:line="52" pos:column="17"/></operator><name pos:line="52" pos:column="14">nColumn<pos:position pos:line="52" pos:column="21"/></name></name><operator pos:line="52" pos:column="21">==<pos:position pos:line="52" pos:column="23"/></operator><literal type="number" pos:line="52" pos:column="23">0<pos:position pos:line="52" pos:column="24"/></literal></expr> )<pos:position pos:line="52" pos:column="26"/></condition><then><block pos:line="52" pos:column="26">{
    <expr_stmt><expr><name><name pos:line="53" pos:column="5">azArg<pos:position pos:line="53" pos:column="10"/></name><index pos:line="53" pos:column="10">[<expr><literal type="number" pos:line="53" pos:column="11">0<pos:position pos:line="53" pos:column="12"/></literal></expr>]<pos:position pos:line="53" pos:column="13"/></index></name> <operator pos:line="53" pos:column="14">=<pos:position pos:line="53" pos:column="15"/></operator> <literal type="string" pos:line="53" pos:column="16">"content"<pos:position pos:line="53" pos:column="25"/></literal></expr>;<pos:position pos:line="53" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="54" pos:column="5">pSpec<pos:position pos:line="54" pos:column="10"/></name><operator pos:line="54" pos:column="10">-&gt;<pos:position pos:line="54" pos:column="15"/></operator><name pos:line="54" pos:column="12">nColumn<pos:position pos:line="54" pos:column="19"/></name></name> <operator pos:line="54" pos:column="20">=<pos:position pos:line="54" pos:column="21"/></operator> <literal type="number" pos:line="54" pos:column="22">1<pos:position pos:line="54" pos:column="23"/></literal></expr>;<pos:position pos:line="54" pos:column="24"/></expr_stmt>
  }<pos:position pos:line="55" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="57" pos:column="3">/*
  ** Construct the list of content column names.
  **
  ** Each content column name will be of the form cNNAAAA
  ** where NN is the column number and AAAA is the sanitized
  ** column name.  "sanitized" means that special characters are
  ** converted to "_".  The cNN prefix guarantees that all column
  ** names are unique.
  **
  ** The AAAA suffix is not strictly necessary.  It is included
  ** for the convenience of people who might examine the generated
  ** %_content table and wonder what the columns are used for.
  */</comment>
  <expr_stmt><expr><name><name pos:line="70" pos:column="3">pSpec<pos:position pos:line="70" pos:column="8"/></name><operator pos:line="70" pos:column="8">-&gt;<pos:position pos:line="70" pos:column="13"/></operator><name pos:line="70" pos:column="10">azContentColumn<pos:position pos:line="70" pos:column="25"/></name></name> <operator pos:line="70" pos:column="26">=<pos:position pos:line="70" pos:column="27"/></operator> <call><name pos:line="70" pos:column="28">sqlite3_malloc<pos:position pos:line="70" pos:column="42"/></name><argument_list pos:line="70" pos:column="42">( <argument><expr><name><name pos:line="70" pos:column="44">pSpec<pos:position pos:line="70" pos:column="49"/></name><operator pos:line="70" pos:column="49">-&gt;<pos:position pos:line="70" pos:column="54"/></operator><name pos:line="70" pos:column="51">nColumn<pos:position pos:line="70" pos:column="58"/></name></name> <operator pos:line="70" pos:column="59">*<pos:position pos:line="70" pos:column="60"/></operator> <sizeof pos:line="70" pos:column="61">sizeof<argument_list pos:line="70" pos:column="67">(<argument><expr><name pos:line="70" pos:column="68">char<pos:position pos:line="70" pos:column="72"/></name> <operator pos:line="70" pos:column="73">*<pos:position pos:line="70" pos:column="74"/></operator></expr></argument>)<pos:position pos:line="70" pos:column="75"/></argument_list></sizeof></expr></argument> )<pos:position pos:line="70" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="78"/></expr_stmt>
  <if pos:line="71" pos:column="3">if<condition pos:line="71" pos:column="5">( <expr><name><name pos:line="71" pos:column="7">pSpec<pos:position pos:line="71" pos:column="12"/></name><operator pos:line="71" pos:column="12">-&gt;<pos:position pos:line="71" pos:column="17"/></operator><name pos:line="71" pos:column="14">azContentColumn<pos:position pos:line="71" pos:column="29"/></name></name><operator pos:line="71" pos:column="29">==<pos:position pos:line="71" pos:column="31"/></operator><literal type="number" pos:line="71" pos:column="31">0<pos:position pos:line="71" pos:column="32"/></literal></expr> )<pos:position pos:line="71" pos:column="34"/></condition><then><block pos:line="71" pos:column="34">{
    <expr_stmt><expr><call><name pos:line="72" pos:column="5">clearTableSpec<pos:position pos:line="72" pos:column="19"/></name><argument_list pos:line="72" pos:column="19">(<argument><expr><name pos:line="72" pos:column="20">pSpec<pos:position pos:line="72" pos:column="25"/></name></expr></argument>)<pos:position pos:line="72" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="27"/></expr_stmt>
    <return pos:line="73" pos:column="5">return <expr><name pos:line="73" pos:column="12">SQLITE_NOMEM<pos:position pos:line="73" pos:column="24"/></name></expr>;<pos:position pos:line="73" pos:column="25"/></return>
  }<pos:position pos:line="74" pos:column="4"/></block></then></if>
  <for pos:line="75" pos:column="3">for<control pos:line="75" pos:column="6">(<init><expr><name pos:line="75" pos:column="7">i<pos:position pos:line="75" pos:column="8"/></name><operator pos:line="75" pos:column="8">=<pos:position pos:line="75" pos:column="9"/></operator><literal type="number" pos:line="75" pos:column="9">0<pos:position pos:line="75" pos:column="10"/></literal></expr>;<pos:position pos:line="75" pos:column="11"/></init> <condition><expr><name pos:line="75" pos:column="12">i<pos:position pos:line="75" pos:column="13"/></name><operator pos:line="75" pos:column="13">&lt;<pos:position pos:line="75" pos:column="17"/></operator><name><name pos:line="75" pos:column="14">pSpec<pos:position pos:line="75" pos:column="19"/></name><operator pos:line="75" pos:column="19">-&gt;<pos:position pos:line="75" pos:column="24"/></operator><name pos:line="75" pos:column="21">nColumn<pos:position pos:line="75" pos:column="28"/></name></name></expr>;<pos:position pos:line="75" pos:column="29"/></condition> <incr><expr><name pos:line="75" pos:column="30">i<pos:position pos:line="75" pos:column="31"/></name><operator pos:line="75" pos:column="31">++<pos:position pos:line="75" pos:column="33"/></operator></expr></incr>)<pos:position pos:line="75" pos:column="34"/></control><block pos:line="75" pos:column="34">{
    <decl_stmt><decl><type><name pos:line="76" pos:column="5">char<pos:position pos:line="76" pos:column="9"/></name> <modifier pos:line="76" pos:column="10">*<pos:position pos:line="76" pos:column="11"/></modifier></type><name pos:line="76" pos:column="11">p<pos:position pos:line="76" pos:column="12"/></name></decl>;<pos:position pos:line="76" pos:column="13"/></decl_stmt>
    <expr_stmt><expr><name><name pos:line="77" pos:column="5">pSpec<pos:position pos:line="77" pos:column="10"/></name><operator pos:line="77" pos:column="10">-&gt;<pos:position pos:line="77" pos:column="15"/></operator><name pos:line="77" pos:column="12">azContentColumn<pos:position pos:line="77" pos:column="27"/></name><index pos:line="77" pos:column="27">[<expr><name pos:line="77" pos:column="28">i<pos:position pos:line="77" pos:column="29"/></name></expr>]<pos:position pos:line="77" pos:column="30"/></index></name> <operator pos:line="77" pos:column="31">=<pos:position pos:line="77" pos:column="32"/></operator> <call><name pos:line="77" pos:column="33">sqlite3_mprintf<pos:position pos:line="77" pos:column="48"/></name><argument_list pos:line="77" pos:column="48">(<argument><expr><literal type="string" pos:line="77" pos:column="49">"c%d%s"<pos:position pos:line="77" pos:column="56"/></literal></expr></argument>, <argument><expr><name pos:line="77" pos:column="58">i<pos:position pos:line="77" pos:column="59"/></name></expr></argument>, <argument><expr><name><name pos:line="77" pos:column="61">azArg<pos:position pos:line="77" pos:column="66"/></name><index pos:line="77" pos:column="66">[<expr><name pos:line="77" pos:column="67">i<pos:position pos:line="77" pos:column="68"/></name></expr>]<pos:position pos:line="77" pos:column="69"/></index></name></expr></argument>)<pos:position pos:line="77" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="71"/></expr_stmt>
    <for pos:line="78" pos:column="5">for <control pos:line="78" pos:column="9">(<init><expr><name pos:line="78" pos:column="10">p<pos:position pos:line="78" pos:column="11"/></name> <operator pos:line="78" pos:column="12">=<pos:position pos:line="78" pos:column="13"/></operator> <name><name pos:line="78" pos:column="14">pSpec<pos:position pos:line="78" pos:column="19"/></name><operator pos:line="78" pos:column="19">-&gt;<pos:position pos:line="78" pos:column="24"/></operator><name pos:line="78" pos:column="21">azContentColumn<pos:position pos:line="78" pos:column="36"/></name><index pos:line="78" pos:column="36">[<expr><name pos:line="78" pos:column="37">i<pos:position pos:line="78" pos:column="38"/></name></expr>]<pos:position pos:line="78" pos:column="39"/></index></name></expr>;<pos:position pos:line="78" pos:column="40"/></init> <condition><expr><operator pos:line="78" pos:column="41">*<pos:position pos:line="78" pos:column="42"/></operator><name pos:line="78" pos:column="42">p<pos:position pos:line="78" pos:column="43"/></name></expr> ;<pos:position pos:line="78" pos:column="45"/></condition> <incr><expr><operator pos:line="78" pos:column="46">++<pos:position pos:line="78" pos:column="48"/></operator><name pos:line="78" pos:column="48">p<pos:position pos:line="78" pos:column="49"/></name></expr></incr>)<pos:position pos:line="78" pos:column="50"/></control> <block pos:line="78" pos:column="51">{
      <if pos:line="79" pos:column="7">if<condition pos:line="79" pos:column="9">( <expr><operator pos:line="79" pos:column="11">!<pos:position pos:line="79" pos:column="12"/></operator><call><name pos:line="79" pos:column="12">safe_isalnum<pos:position pos:line="79" pos:column="24"/></name><argument_list pos:line="79" pos:column="24">(<argument><expr><operator pos:line="79" pos:column="25">*<pos:position pos:line="79" pos:column="26"/></operator><name pos:line="79" pos:column="26">p<pos:position pos:line="79" pos:column="27"/></name></expr></argument>)<pos:position pos:line="79" pos:column="28"/></argument_list></call></expr> )<pos:position pos:line="79" pos:column="30"/></condition><then pos:line="79" pos:column="30"> <block type="pseudo"><expr_stmt><expr><operator pos:line="79" pos:column="31">*<pos:position pos:line="79" pos:column="32"/></operator><name pos:line="79" pos:column="32">p<pos:position pos:line="79" pos:column="33"/></name> <operator pos:line="79" pos:column="34">=<pos:position pos:line="79" pos:column="35"/></operator> <literal type="char" pos:line="79" pos:column="36">'_'<pos:position pos:line="79" pos:column="39"/></literal></expr>;<pos:position pos:line="79" pos:column="40"/></expr_stmt></block></then></if>
    }<pos:position pos:line="80" pos:column="6"/></block></for>
  }<pos:position pos:line="81" pos:column="4"/></block></for>

  <comment type="block" pos:line="83" pos:column="3">/*
  ** Parse the tokenizer specification string.
  */</comment>
  <expr_stmt><expr><name><name pos:line="86" pos:column="3">pSpec<pos:position pos:line="86" pos:column="8"/></name><operator pos:line="86" pos:column="8">-&gt;<pos:position pos:line="86" pos:column="13"/></operator><name pos:line="86" pos:column="10">azTokenizer<pos:position pos:line="86" pos:column="21"/></name></name> <operator pos:line="86" pos:column="22">=<pos:position pos:line="86" pos:column="23"/></operator> <call><name pos:line="86" pos:column="24">tokenizeString<pos:position pos:line="86" pos:column="38"/></name><argument_list pos:line="86" pos:column="38">(<argument><expr><name pos:line="86" pos:column="39">zTokenizer<pos:position pos:line="86" pos:column="49"/></name></expr></argument>, <argument><expr><operator pos:line="86" pos:column="51">&amp;<pos:position pos:line="86" pos:column="56"/></operator><name pos:line="86" pos:column="52">n<pos:position pos:line="86" pos:column="53"/></name></expr></argument>)<pos:position pos:line="86" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="55"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="87" pos:column="3">tokenListToIdList<pos:position pos:line="87" pos:column="20"/></name><argument_list pos:line="87" pos:column="20">(<argument><expr><name><name pos:line="87" pos:column="21">pSpec<pos:position pos:line="87" pos:column="26"/></name><operator pos:line="87" pos:column="26">-&gt;<pos:position pos:line="87" pos:column="31"/></operator><name pos:line="87" pos:column="28">azTokenizer<pos:position pos:line="87" pos:column="39"/></name></name></expr></argument>)<pos:position pos:line="87" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="41"/></expr_stmt>

  <return pos:line="89" pos:column="3">return <expr><name pos:line="89" pos:column="10">SQLITE_OK<pos:position pos:line="89" pos:column="19"/></name></expr>;<pos:position pos:line="89" pos:column="20"/></return>
}<pos:position pos:line="90" pos:column="2"/></block></function></unit>
