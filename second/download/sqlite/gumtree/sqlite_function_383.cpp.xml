<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/sqlite/gumtree/sqlite_function_383.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name> <modifier pos:line="1" pos:column="13">*<pos:position pos:line="1" pos:column="14"/></modifier></type><name pos:line="1" pos:column="14">sqlite3MemMalloc<pos:position pos:line="1" pos:column="30"/></name><parameter_list pos:line="1" pos:column="30">(<parameter><decl><type><name pos:line="1" pos:column="31">int<pos:position pos:line="1" pos:column="34"/></name></type> <name pos:line="1" pos:column="35">nByte<pos:position pos:line="1" pos:column="40"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="41"/></parameter_list><block pos:line="1" pos:column="41">{
<cpp:ifdef pos:line="2" pos:column="1">#<cpp:directive pos:line="2" pos:column="2">ifdef<pos:position pos:line="2" pos:column="7"/></cpp:directive> <name pos:line="2" pos:column="8">SQLITE_MALLOCSIZE<pos:position pos:line="2" pos:column="25"/></name></cpp:ifdef>
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">void<pos:position pos:line="3" pos:column="7"/></name> <modifier pos:line="3" pos:column="8">*<pos:position pos:line="3" pos:column="9"/></modifier></type><name pos:line="3" pos:column="9">p<pos:position pos:line="3" pos:column="10"/></name></decl>;<pos:position pos:line="3" pos:column="11"/></decl_stmt>
  <expr_stmt><expr><call><name pos:line="4" pos:column="3">testcase<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">( <argument><expr><call><name pos:line="4" pos:column="13">ROUND8<pos:position pos:line="4" pos:column="19"/></name><argument_list pos:line="4" pos:column="19">(<argument><expr><name pos:line="4" pos:column="20">nByte<pos:position pos:line="4" pos:column="25"/></name></expr></argument>)<pos:position pos:line="4" pos:column="26"/></argument_list></call><operator pos:line="4" pos:column="26">==<pos:position pos:line="4" pos:column="28"/></operator><name pos:line="4" pos:column="28">nByte<pos:position pos:line="4" pos:column="33"/></name></expr></argument> )<pos:position pos:line="4" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="36"/></expr_stmt>
  <expr_stmt><expr><name pos:line="5" pos:column="3">p<pos:position pos:line="5" pos:column="4"/></name> <operator pos:line="5" pos:column="5">=<pos:position pos:line="5" pos:column="6"/></operator> <call><name pos:line="5" pos:column="7">SQLITE_MALLOC<pos:position pos:line="5" pos:column="20"/></name><argument_list pos:line="5" pos:column="20">( <argument><expr><name pos:line="5" pos:column="22">nByte<pos:position pos:line="5" pos:column="27"/></name></expr></argument> )<pos:position pos:line="5" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="30"/></expr_stmt>
  <if pos:line="6" pos:column="3">if<condition pos:line="6" pos:column="5">( <expr><name pos:line="6" pos:column="7">p<pos:position pos:line="6" pos:column="8"/></name><operator pos:line="6" pos:column="8">==<pos:position pos:line="6" pos:column="10"/></operator><literal type="number" pos:line="6" pos:column="10">0<pos:position pos:line="6" pos:column="11"/></literal></expr> )<pos:position pos:line="6" pos:column="13"/></condition><then><block pos:line="6" pos:column="13">{
    <expr_stmt><expr><call><name pos:line="7" pos:column="5">testcase<pos:position pos:line="7" pos:column="13"/></name><argument_list pos:line="7" pos:column="13">( <argument><expr><name><name pos:line="7" pos:column="15">sqlite3GlobalConfig<pos:position pos:line="7" pos:column="34"/></name><operator pos:line="7" pos:column="34">.<pos:position pos:line="7" pos:column="35"/></operator><name pos:line="7" pos:column="35">xLog<pos:position pos:line="7" pos:column="39"/></name></name><operator pos:line="7" pos:column="39">!=<pos:position pos:line="7" pos:column="41"/></operator><literal type="number" pos:line="7" pos:column="41">0<pos:position pos:line="7" pos:column="42"/></literal></expr></argument> )<pos:position pos:line="7" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="45"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="8" pos:column="5">sqlite3_log<pos:position pos:line="8" pos:column="16"/></name><argument_list pos:line="8" pos:column="16">(<argument><expr><name pos:line="8" pos:column="17">SQLITE_NOMEM<pos:position pos:line="8" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="8" pos:column="31">"failed to allocate %u bytes of memory"<pos:position pos:line="8" pos:column="70"/></literal></expr></argument>, <argument><expr><name pos:line="8" pos:column="72">nByte<pos:position pos:line="8" pos:column="77"/></name></expr></argument>)<pos:position pos:line="8" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="79"/></expr_stmt>
  }<pos:position pos:line="9" pos:column="4"/></block></then></if>
  <return pos:line="10" pos:column="3">return <expr><name pos:line="10" pos:column="10">p<pos:position pos:line="10" pos:column="11"/></name></expr>;<pos:position pos:line="10" pos:column="12"/></return>
<cpp:else pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">else<pos:position pos:line="11" pos:column="6"/></cpp:directive></cpp:else>
  <decl_stmt><decl><type><name pos:line="12" pos:column="3">sqlite3_int64<pos:position pos:line="12" pos:column="16"/></name> <modifier pos:line="12" pos:column="17">*<pos:position pos:line="12" pos:column="18"/></modifier></type><name pos:line="12" pos:column="18">p<pos:position pos:line="12" pos:column="19"/></name></decl>;<pos:position pos:line="12" pos:column="20"/></decl_stmt>
  <expr_stmt><expr><call><name pos:line="13" pos:column="3">assert<pos:position pos:line="13" pos:column="9"/></name><argument_list pos:line="13" pos:column="9">( <argument><expr><name pos:line="13" pos:column="11">nByte<pos:position pos:line="13" pos:column="16"/></name><operator pos:line="13" pos:column="16">&gt;<pos:position pos:line="13" pos:column="20"/></operator><literal type="number" pos:line="13" pos:column="17">0<pos:position pos:line="13" pos:column="18"/></literal></expr></argument> )<pos:position pos:line="13" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="21"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="14" pos:column="3">testcase<pos:position pos:line="14" pos:column="11"/></name><argument_list pos:line="14" pos:column="11">( <argument><expr><call><name pos:line="14" pos:column="13">ROUND8<pos:position pos:line="14" pos:column="19"/></name><argument_list pos:line="14" pos:column="19">(<argument><expr><name pos:line="14" pos:column="20">nByte<pos:position pos:line="14" pos:column="25"/></name></expr></argument>)<pos:position pos:line="14" pos:column="26"/></argument_list></call><operator pos:line="14" pos:column="26">!=<pos:position pos:line="14" pos:column="28"/></operator><name pos:line="14" pos:column="28">nByte<pos:position pos:line="14" pos:column="33"/></name></expr></argument> )<pos:position pos:line="14" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="36"/></expr_stmt>
  <expr_stmt><expr><name pos:line="15" pos:column="3">p<pos:position pos:line="15" pos:column="4"/></name> <operator pos:line="15" pos:column="5">=<pos:position pos:line="15" pos:column="6"/></operator> <call><name pos:line="15" pos:column="7">SQLITE_MALLOC<pos:position pos:line="15" pos:column="20"/></name><argument_list pos:line="15" pos:column="20">( <argument><expr><name pos:line="15" pos:column="22">nByte<pos:position pos:line="15" pos:column="27"/></name><operator pos:line="15" pos:column="27">+<pos:position pos:line="15" pos:column="28"/></operator><literal type="number" pos:line="15" pos:column="28">8<pos:position pos:line="15" pos:column="29"/></literal></expr></argument> )<pos:position pos:line="15" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="32"/></expr_stmt>
  <if pos:line="16" pos:column="3">if<condition pos:line="16" pos:column="5">( <expr><name pos:line="16" pos:column="7">p<pos:position pos:line="16" pos:column="8"/></name></expr> )<pos:position pos:line="16" pos:column="10"/></condition><then><block pos:line="16" pos:column="10">{
    <expr_stmt><expr><name><name pos:line="17" pos:column="5">p<pos:position pos:line="17" pos:column="6"/></name><index pos:line="17" pos:column="6">[<expr><literal type="number" pos:line="17" pos:column="7">0<pos:position pos:line="17" pos:column="8"/></literal></expr>]<pos:position pos:line="17" pos:column="9"/></index></name> <operator pos:line="17" pos:column="10">=<pos:position pos:line="17" pos:column="11"/></operator> <name pos:line="17" pos:column="12">nByte<pos:position pos:line="17" pos:column="17"/></name></expr>;<pos:position pos:line="17" pos:column="18"/></expr_stmt>
    <expr_stmt><expr><name pos:line="18" pos:column="5">p<pos:position pos:line="18" pos:column="6"/></name><operator pos:line="18" pos:column="6">++<pos:position pos:line="18" pos:column="8"/></operator></expr>;<pos:position pos:line="18" pos:column="9"/></expr_stmt>
  }<pos:position pos:line="19" pos:column="4"/></block></then><else pos:line="19" pos:column="4">else<block pos:line="19" pos:column="8">{
    <expr_stmt><expr><call><name pos:line="20" pos:column="5">testcase<pos:position pos:line="20" pos:column="13"/></name><argument_list pos:line="20" pos:column="13">( <argument><expr><name><name pos:line="20" pos:column="15">sqlite3GlobalConfig<pos:position pos:line="20" pos:column="34"/></name><operator pos:line="20" pos:column="34">.<pos:position pos:line="20" pos:column="35"/></operator><name pos:line="20" pos:column="35">xLog<pos:position pos:line="20" pos:column="39"/></name></name><operator pos:line="20" pos:column="39">!=<pos:position pos:line="20" pos:column="41"/></operator><literal type="number" pos:line="20" pos:column="41">0<pos:position pos:line="20" pos:column="42"/></literal></expr></argument> )<pos:position pos:line="20" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="45"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="21" pos:column="5">sqlite3_log<pos:position pos:line="21" pos:column="16"/></name><argument_list pos:line="21" pos:column="16">(<argument><expr><name pos:line="21" pos:column="17">SQLITE_NOMEM<pos:position pos:line="21" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="21" pos:column="31">"failed to allocate %u bytes of memory"<pos:position pos:line="21" pos:column="70"/></literal></expr></argument>, <argument><expr><name pos:line="21" pos:column="72">nByte<pos:position pos:line="21" pos:column="77"/></name></expr></argument>)<pos:position pos:line="21" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="79"/></expr_stmt>
  }<pos:position pos:line="22" pos:column="4"/></block></else></if>
  <return pos:line="23" pos:column="3">return <expr><operator pos:line="23" pos:column="10">(<pos:position pos:line="23" pos:column="11"/></operator><name pos:line="23" pos:column="11">void<pos:position pos:line="23" pos:column="15"/></name> <operator pos:line="23" pos:column="16">*<pos:position pos:line="23" pos:column="17"/></operator><operator pos:line="23" pos:column="17">)<pos:position pos:line="23" pos:column="18"/></operator><name pos:line="23" pos:column="18">p<pos:position pos:line="23" pos:column="19"/></name></expr>;<pos:position pos:line="23" pos:column="20"/></return>
<cpp:endif pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">endif<pos:position pos:line="24" pos:column="7"/></cpp:directive></cpp:endif>
}<pos:position pos:line="25" pos:column="2"/></block></function></unit>
