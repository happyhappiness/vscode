<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/sqlite/gumtree/sqlite_function_138.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">unixLogErrorAtLine<pos:position pos:line="1" pos:column="30"/></name><parameter_list pos:line="1" pos:column="30">(
  <parameter><decl><type><name pos:line="2" pos:column="3">int<pos:position pos:line="2" pos:column="6"/></name></type> <name pos:line="2" pos:column="7">errcode<pos:position pos:line="2" pos:column="14"/></name></decl></parameter>,                    <comment type="block" pos:line="2" pos:column="35">/* SQLite error code */</comment>
  <parameter><decl><type><specifier pos:line="3" pos:column="3">const<pos:position pos:line="3" pos:column="8"/></specifier> <name pos:line="3" pos:column="9">char<pos:position pos:line="3" pos:column="13"/></name> <modifier pos:line="3" pos:column="14">*<pos:position pos:line="3" pos:column="15"/></modifier></type><name pos:line="3" pos:column="15">zFunc<pos:position pos:line="3" pos:column="20"/></name></decl></parameter>,              <comment type="block" pos:line="3" pos:column="35">/* Name of OS function that failed */</comment>
  <parameter><decl><type><specifier pos:line="4" pos:column="3">const<pos:position pos:line="4" pos:column="8"/></specifier> <name pos:line="4" pos:column="9">char<pos:position pos:line="4" pos:column="13"/></name> <modifier pos:line="4" pos:column="14">*<pos:position pos:line="4" pos:column="15"/></modifier></type><name pos:line="4" pos:column="15">zPath<pos:position pos:line="4" pos:column="20"/></name></decl></parameter>,              <comment type="block" pos:line="4" pos:column="35">/* File path associated with error */</comment>
  <parameter><decl><type><name pos:line="5" pos:column="3">int<pos:position pos:line="5" pos:column="6"/></name></type> <name pos:line="5" pos:column="7">iLine<pos:position pos:line="5" pos:column="12"/></name></decl></parameter>                       <comment type="block" pos:line="5" pos:column="35">/* Source line number where error occurred */</comment>
)<pos:position pos:line="6" pos:column="2"/></parameter_list><block pos:line="6" pos:column="2">{
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">char<pos:position pos:line="7" pos:column="7"/></name> <modifier pos:line="7" pos:column="8">*<pos:position pos:line="7" pos:column="9"/></modifier></type><name pos:line="7" pos:column="9">zErr<pos:position pos:line="7" pos:column="13"/></name></decl>;<pos:position pos:line="7" pos:column="14"/></decl_stmt>                     <comment type="block" pos:line="7" pos:column="35">/* Message from strerror() or equivalent */</comment>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">int<pos:position pos:line="8" pos:column="6"/></name></type> <name pos:line="8" pos:column="7">iErrno<pos:position pos:line="8" pos:column="13"/></name> <init pos:line="8" pos:column="14">= <expr><name pos:line="8" pos:column="16">errno<pos:position pos:line="8" pos:column="21"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="22"/></decl_stmt>             <comment type="block" pos:line="8" pos:column="35">/* Saved syscall error number */</comment>

  <comment type="block" pos:line="10" pos:column="3">/* If this is not a threadsafe build (SQLITE_THREADSAFE==0), then use
  ** the strerror() function to obtain the human-readable error message
  ** equivalent to errno. Otherwise, use strerror_r().
  */</comment> 
<cpp:if pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">if<pos:position pos:line="14" pos:column="4"/></cpp:directive> <expr><name pos:line="14" pos:column="5">SQLITE_THREADSAFE<pos:position pos:line="14" pos:column="22"/></name> <operator pos:line="14" pos:column="23">&amp;&amp;<pos:position pos:line="14" pos:column="33"/></operator> <call><name pos:line="14" pos:column="26">defined<pos:position pos:line="14" pos:column="33"/></name><argument_list pos:line="14" pos:column="33">(<argument><expr><name pos:line="14" pos:column="34">HAVE_STRERROR_R<pos:position pos:line="14" pos:column="49"/></name></expr></argument>)<pos:position pos:line="14" pos:column="50"/></argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><name pos:line="15" pos:column="3">char<pos:position pos:line="15" pos:column="7"/></name></type> <name><name pos:line="15" pos:column="8">aErr<pos:position pos:line="15" pos:column="12"/></name><index pos:line="15" pos:column="12">[<expr><literal type="number" pos:line="15" pos:column="13">80<pos:position pos:line="15" pos:column="15"/></literal></expr>]<pos:position pos:line="15" pos:column="16"/></index></name></decl>;<pos:position pos:line="15" pos:column="17"/></decl_stmt>
  <expr_stmt><expr><call><name pos:line="16" pos:column="3">memset<pos:position pos:line="16" pos:column="9"/></name><argument_list pos:line="16" pos:column="9">(<argument><expr><name pos:line="16" pos:column="10">aErr<pos:position pos:line="16" pos:column="14"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="16" pos:column="16">0<pos:position pos:line="16" pos:column="17"/></literal></expr></argument>, <argument><expr><sizeof pos:line="16" pos:column="19">sizeof<argument_list pos:line="16" pos:column="25">(<argument><expr><name pos:line="16" pos:column="26">aErr<pos:position pos:line="16" pos:column="30"/></name></expr></argument>)<pos:position pos:line="16" pos:column="31"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="16" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="33"/></expr_stmt>
  <expr_stmt><expr><name pos:line="17" pos:column="3">zErr<pos:position pos:line="17" pos:column="7"/></name> <operator pos:line="17" pos:column="8">=<pos:position pos:line="17" pos:column="9"/></operator> <name pos:line="17" pos:column="10">aErr<pos:position pos:line="17" pos:column="14"/></name></expr>;<pos:position pos:line="17" pos:column="15"/></expr_stmt>

  <comment type="block" pos:line="19" pos:column="3">/* If STRERROR_R_CHAR_P (set by autoconf scripts) or __USE_GNU is defined,
  ** assume that the system provides the GNU version of strerror_r() that
  ** returns a pointer to a buffer containing the error message. That pointer 
  ** may point to aErr[], or it may point to some static storage somewhere. 
  ** Otherwise, assume that the system provides the POSIX version of 
  ** strerror_r(), which always writes an error message into aErr[].
  **
  ** If the code incorrectly assumes that it is the POSIX version that is
  ** available, the error message will often be an empty string. Not a
  ** huge problem. Incorrectly concluding that the GNU version is available 
  ** could lead to a segfault though.
  */</comment>
<cpp:if pos:line="31" pos:column="1">#<cpp:directive pos:line="31" pos:column="2">if<pos:position pos:line="31" pos:column="4"/></cpp:directive> <expr><call><name pos:line="31" pos:column="5">defined<pos:position pos:line="31" pos:column="12"/></name><argument_list pos:line="31" pos:column="12">(<argument><expr><name pos:line="31" pos:column="13">STRERROR_R_CHAR_P<pos:position pos:line="31" pos:column="30"/></name></expr></argument>)<pos:position pos:line="31" pos:column="31"/></argument_list></call> <operator pos:line="31" pos:column="32">||<pos:position pos:line="31" pos:column="34"/></operator> <call><name pos:line="31" pos:column="35">defined<pos:position pos:line="31" pos:column="42"/></name><argument_list pos:line="31" pos:column="42">(<argument><expr><name pos:line="31" pos:column="43">__USE_GNU<pos:position pos:line="31" pos:column="52"/></name></expr></argument>)<pos:position pos:line="31" pos:column="53"/></argument_list></call></expr></cpp:if>
  <expr_stmt><expr><name pos:line="32" pos:column="3">zErr<pos:position pos:line="32" pos:column="7"/></name> <operator pos:line="32" pos:column="8">=<pos:position pos:line="32" pos:column="9"/></operator> 
<cpp:endif pos:line="33" pos:column="1"># <cpp:directive pos:line="33" pos:column="3">endif<pos:position pos:line="33" pos:column="8"/></cpp:directive></cpp:endif>
  <call><name pos:line="34" pos:column="3">strerror_r<pos:position pos:line="34" pos:column="13"/></name><argument_list pos:line="34" pos:column="13">(<argument><expr><name pos:line="34" pos:column="14">iErrno<pos:position pos:line="34" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="22">aErr<pos:position pos:line="34" pos:column="26"/></name></expr></argument>, <argument><expr><sizeof pos:line="34" pos:column="28">sizeof<argument_list pos:line="34" pos:column="34">(<argument><expr><name pos:line="34" pos:column="35">aErr<pos:position pos:line="34" pos:column="39"/></name></expr></argument>)<pos:position pos:line="34" pos:column="40"/></argument_list></sizeof><operator pos:line="34" pos:column="40">-<pos:position pos:line="34" pos:column="41"/></operator><literal type="number" pos:line="34" pos:column="41">1<pos:position pos:line="34" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="44"/></expr_stmt>

<cpp:elif pos:line="36" pos:column="1">#<cpp:directive pos:line="36" pos:column="2">elif<pos:position pos:line="36" pos:column="6"/></cpp:directive> <expr><name pos:line="36" pos:column="7">SQLITE_THREADSAFE<pos:position pos:line="36" pos:column="24"/></name></expr></cpp:elif>
  <comment type="block" pos:line="37" pos:column="3">/* This is a threadsafe build, but strerror_r() is not available. */</comment>
  <expr_stmt><expr><name pos:line="38" pos:column="3">zErr<pos:position pos:line="38" pos:column="7"/></name> <operator pos:line="38" pos:column="8">=<pos:position pos:line="38" pos:column="9"/></operator> <literal type="string" pos:line="38" pos:column="10">""<pos:position pos:line="38" pos:column="12"/></literal></expr>;<pos:position pos:line="38" pos:column="13"/></expr_stmt>
<cpp:else pos:line="39" pos:column="1">#<cpp:directive pos:line="39" pos:column="2">else<pos:position pos:line="39" pos:column="6"/></cpp:directive></cpp:else>
  <comment type="block" pos:line="40" pos:column="3">/* Non-threadsafe build, use strerror(). */</comment>
  <expr_stmt><expr><name pos:line="41" pos:column="3">zErr<pos:position pos:line="41" pos:column="7"/></name> <operator pos:line="41" pos:column="8">=<pos:position pos:line="41" pos:column="9"/></operator> <call><name pos:line="41" pos:column="10">strerror<pos:position pos:line="41" pos:column="18"/></name><argument_list pos:line="41" pos:column="18">(<argument><expr><name pos:line="41" pos:column="19">iErrno<pos:position pos:line="41" pos:column="25"/></name></expr></argument>)<pos:position pos:line="41" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="27"/></expr_stmt>
<cpp:endif pos:line="42" pos:column="1">#<cpp:directive pos:line="42" pos:column="2">endif<pos:position pos:line="42" pos:column="7"/></cpp:directive></cpp:endif>

  <if pos:line="44" pos:column="3">if<condition pos:line="44" pos:column="5">( <expr><name pos:line="44" pos:column="7">zPath<pos:position pos:line="44" pos:column="12"/></name><operator pos:line="44" pos:column="12">==<pos:position pos:line="44" pos:column="14"/></operator><literal type="number" pos:line="44" pos:column="14">0<pos:position pos:line="44" pos:column="15"/></literal></expr> )<pos:position pos:line="44" pos:column="17"/></condition><then pos:line="44" pos:column="17"> <block type="pseudo"><expr_stmt><expr><name pos:line="44" pos:column="18">zPath<pos:position pos:line="44" pos:column="23"/></name> <operator pos:line="44" pos:column="24">=<pos:position pos:line="44" pos:column="25"/></operator> <literal type="string" pos:line="44" pos:column="26">""<pos:position pos:line="44" pos:column="28"/></literal></expr>;<pos:position pos:line="44" pos:column="29"/></expr_stmt></block></then></if>
  <expr_stmt><expr><call><name pos:line="45" pos:column="3">sqlite3_log<pos:position pos:line="45" pos:column="14"/></name><argument_list pos:line="45" pos:column="14">(<argument><expr><name pos:line="45" pos:column="15">errcode<pos:position pos:line="45" pos:column="22"/></name></expr></argument>,
      <argument><expr><literal type="string" pos:line="46" pos:column="7">"os_unix.c:%d: (%d) %s(%s) - %s"<pos:position pos:line="46" pos:column="39"/></literal></expr></argument>,
      <argument><expr><name pos:line="47" pos:column="7">iLine<pos:position pos:line="47" pos:column="12"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="14">iErrno<pos:position pos:line="47" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="22">zFunc<pos:position pos:line="47" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="29">zPath<pos:position pos:line="47" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="36">zErr<pos:position pos:line="47" pos:column="40"/></name></expr></argument>
  )<pos:position pos:line="48" pos:column="4"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="5"/></expr_stmt>

  <return pos:line="50" pos:column="3">return <expr><name pos:line="50" pos:column="10">errcode<pos:position pos:line="50" pos:column="17"/></name></expr>;<pos:position pos:line="50" pos:column="18"/></return>
}<pos:position pos:line="51" pos:column="2"/></block></function></unit>
