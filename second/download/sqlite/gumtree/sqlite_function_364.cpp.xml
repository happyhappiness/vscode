<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/sqlite/gumtree/sqlite_function_364.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">sqlite3Close<pos:position pos:line="1" pos:column="24"/></name><parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><name pos:line="1" pos:column="25">sqlite3<pos:position pos:line="1" pos:column="32"/></name> <modifier pos:line="1" pos:column="33">*<pos:position pos:line="1" pos:column="34"/></modifier></type><name pos:line="1" pos:column="34">db<pos:position pos:line="1" pos:column="36"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="38">int<pos:position pos:line="1" pos:column="41"/></name></type> <name pos:line="1" pos:column="42">forceZombie<pos:position pos:line="1" pos:column="53"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="54"/></parameter_list><block pos:line="1" pos:column="54">{
  <if pos:line="2" pos:column="3">if<condition pos:line="2" pos:column="5">( <expr><operator pos:line="2" pos:column="7">!<pos:position pos:line="2" pos:column="8"/></operator><name pos:line="2" pos:column="8">db<pos:position pos:line="2" pos:column="10"/></name></expr> )<pos:position pos:line="2" pos:column="12"/></condition><then><block pos:line="2" pos:column="12">{
    <comment type="block" pos:line="3" pos:column="5">/* EVIDENCE-OF: R-63257-11740 Calling sqlite3_close() or
    ** sqlite3_close_v2() with a NULL pointer argument is a harmless no-op. */</comment>
    <return pos:line="5" pos:column="5">return <expr><name pos:line="5" pos:column="12">SQLITE_OK<pos:position pos:line="5" pos:column="21"/></name></expr>;<pos:position pos:line="5" pos:column="22"/></return>
  }<pos:position pos:line="6" pos:column="4"/></block></then></if>
  <if pos:line="7" pos:column="3">if<condition pos:line="7" pos:column="5">( <expr><operator pos:line="7" pos:column="7">!<pos:position pos:line="7" pos:column="8"/></operator><call><name pos:line="7" pos:column="8">sqlite3SafetyCheckSickOrOk<pos:position pos:line="7" pos:column="34"/></name><argument_list pos:line="7" pos:column="34">(<argument><expr><name pos:line="7" pos:column="35">db<pos:position pos:line="7" pos:column="37"/></name></expr></argument>)<pos:position pos:line="7" pos:column="38"/></argument_list></call></expr> )<pos:position pos:line="7" pos:column="40"/></condition><then><block pos:line="7" pos:column="40">{
    <return pos:line="8" pos:column="5">return <expr><name pos:line="8" pos:column="12">SQLITE_MISUSE_BKPT<pos:position pos:line="8" pos:column="30"/></name></expr>;<pos:position pos:line="8" pos:column="31"/></return>
  }<pos:position pos:line="9" pos:column="4"/></block></then></if>
  <expr_stmt><expr><call><name pos:line="10" pos:column="3">sqlite3_mutex_enter<pos:position pos:line="10" pos:column="22"/></name><argument_list pos:line="10" pos:column="22">(<argument><expr><name><name pos:line="10" pos:column="23">db<pos:position pos:line="10" pos:column="25"/></name><operator pos:line="10" pos:column="25">-&gt;<pos:position pos:line="10" pos:column="30"/></operator><name pos:line="10" pos:column="27">mutex<pos:position pos:line="10" pos:column="32"/></name></name></expr></argument>)<pos:position pos:line="10" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="34"/></expr_stmt>
  <if pos:line="11" pos:column="3">if<condition pos:line="11" pos:column="5">( <expr><name><name pos:line="11" pos:column="7">db<pos:position pos:line="11" pos:column="9"/></name><operator pos:line="11" pos:column="9">-&gt;<pos:position pos:line="11" pos:column="14"/></operator><name pos:line="11" pos:column="11">mTrace<pos:position pos:line="11" pos:column="17"/></name></name> <operator pos:line="11" pos:column="18">&amp;<pos:position pos:line="11" pos:column="23"/></operator> <name pos:line="11" pos:column="20">SQLITE_TRACE_CLOSE<pos:position pos:line="11" pos:column="38"/></name></expr> )<pos:position pos:line="11" pos:column="40"/></condition><then><block pos:line="11" pos:column="40">{
    <expr_stmt><expr><call><name><name pos:line="12" pos:column="5">db<pos:position pos:line="12" pos:column="7"/></name><operator pos:line="12" pos:column="7">-&gt;<pos:position pos:line="12" pos:column="12"/></operator><name pos:line="12" pos:column="9">xTrace<pos:position pos:line="12" pos:column="15"/></name></name><argument_list pos:line="12" pos:column="15">(<argument><expr><name pos:line="12" pos:column="16">SQLITE_TRACE_CLOSE<pos:position pos:line="12" pos:column="34"/></name></expr></argument>, <argument><expr><name><name pos:line="12" pos:column="36">db<pos:position pos:line="12" pos:column="38"/></name><operator pos:line="12" pos:column="38">-&gt;<pos:position pos:line="12" pos:column="43"/></operator><name pos:line="12" pos:column="40">pTraceArg<pos:position pos:line="12" pos:column="49"/></name></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="51">db<pos:position pos:line="12" pos:column="53"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="12" pos:column="55">0<pos:position pos:line="12" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="58"/></expr_stmt>
  }<pos:position pos:line="13" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="15" pos:column="3">/* Force xDisconnect calls on all virtual tables */</comment>
  <expr_stmt><expr><call><name pos:line="16" pos:column="3">disconnectAllVtab<pos:position pos:line="16" pos:column="20"/></name><argument_list pos:line="16" pos:column="20">(<argument><expr><name pos:line="16" pos:column="21">db<pos:position pos:line="16" pos:column="23"/></name></expr></argument>)<pos:position pos:line="16" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="25"/></expr_stmt>

  <comment type="block" pos:line="18" pos:column="3">/* If a transaction is open, the disconnectAllVtab() call above
  ** will not have called the xDisconnect() method on any virtual
  ** tables in the db-&gt;aVTrans[] array. The following sqlite3VtabRollback()
  ** call will do so. We need to do this before the check for active
  ** SQL statements below, as the v-table implementation may be storing
  ** some prepared statements internally.
  */</comment>
  <expr_stmt><expr><call><name pos:line="25" pos:column="3">sqlite3VtabRollback<pos:position pos:line="25" pos:column="22"/></name><argument_list pos:line="25" pos:column="22">(<argument><expr><name pos:line="25" pos:column="23">db<pos:position pos:line="25" pos:column="25"/></name></expr></argument>)<pos:position pos:line="25" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="27"/></expr_stmt>

  <comment type="block" pos:line="27" pos:column="3">/* Legacy behavior (sqlite3_close() behavior) is to return
  ** SQLITE_BUSY if the connection can not be closed immediately.
  */</comment>
  <if pos:line="30" pos:column="3">if<condition pos:line="30" pos:column="5">( <expr><operator pos:line="30" pos:column="7">!<pos:position pos:line="30" pos:column="8"/></operator><name pos:line="30" pos:column="8">forceZombie<pos:position pos:line="30" pos:column="19"/></name> <operator pos:line="30" pos:column="20">&amp;&amp;<pos:position pos:line="30" pos:column="30"/></operator> <call><name pos:line="30" pos:column="23">connectionIsBusy<pos:position pos:line="30" pos:column="39"/></name><argument_list pos:line="30" pos:column="39">(<argument><expr><name pos:line="30" pos:column="40">db<pos:position pos:line="30" pos:column="42"/></name></expr></argument>)<pos:position pos:line="30" pos:column="43"/></argument_list></call></expr> )<pos:position pos:line="30" pos:column="45"/></condition><then><block pos:line="30" pos:column="45">{
    <expr_stmt><expr><call><name pos:line="31" pos:column="5">sqlite3ErrorWithMsg<pos:position pos:line="31" pos:column="24"/></name><argument_list pos:line="31" pos:column="24">(<argument><expr><name pos:line="31" pos:column="25">db<pos:position pos:line="31" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="29">SQLITE_BUSY<pos:position pos:line="31" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="31" pos:column="42">"unable to close due to unfinalized "<pos:position pos:line="31" pos:column="79"/></literal>
       <literal type="string" pos:line="32" pos:column="8">"statements or unfinished backups"<pos:position pos:line="32" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="44"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="33" pos:column="5">sqlite3_mutex_leave<pos:position pos:line="33" pos:column="24"/></name><argument_list pos:line="33" pos:column="24">(<argument><expr><name><name pos:line="33" pos:column="25">db<pos:position pos:line="33" pos:column="27"/></name><operator pos:line="33" pos:column="27">-&gt;<pos:position pos:line="33" pos:column="32"/></operator><name pos:line="33" pos:column="29">mutex<pos:position pos:line="33" pos:column="34"/></name></name></expr></argument>)<pos:position pos:line="33" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="36"/></expr_stmt>
    <return pos:line="34" pos:column="5">return <expr><name pos:line="34" pos:column="12">SQLITE_BUSY<pos:position pos:line="34" pos:column="23"/></name></expr>;<pos:position pos:line="34" pos:column="24"/></return>
  }<pos:position pos:line="35" pos:column="4"/></block></then></if>

<cpp:ifdef pos:line="37" pos:column="1">#<cpp:directive pos:line="37" pos:column="2">ifdef<pos:position pos:line="37" pos:column="7"/></cpp:directive> <name pos:line="37" pos:column="8">SQLITE_ENABLE_SQLLOG<pos:position pos:line="37" pos:column="28"/></name></cpp:ifdef>
  <if pos:line="38" pos:column="3">if<condition pos:line="38" pos:column="5">( <expr><name><name pos:line="38" pos:column="7">sqlite3GlobalConfig<pos:position pos:line="38" pos:column="26"/></name><operator pos:line="38" pos:column="26">.<pos:position pos:line="38" pos:column="27"/></operator><name pos:line="38" pos:column="27">xSqllog<pos:position pos:line="38" pos:column="34"/></name></name></expr> )<pos:position pos:line="38" pos:column="36"/></condition><then><block pos:line="38" pos:column="36">{
    <comment type="block" pos:line="39" pos:column="5">/* Closing the handle. Fourth parameter is passed the value 2. */</comment>
    <expr_stmt><expr><call><name><name pos:line="40" pos:column="5">sqlite3GlobalConfig<pos:position pos:line="40" pos:column="24"/></name><operator pos:line="40" pos:column="24">.<pos:position pos:line="40" pos:column="25"/></operator><name pos:line="40" pos:column="25">xSqllog<pos:position pos:line="40" pos:column="32"/></name></name><argument_list pos:line="40" pos:column="32">(<argument><expr><name><name pos:line="40" pos:column="33">sqlite3GlobalConfig<pos:position pos:line="40" pos:column="52"/></name><operator pos:line="40" pos:column="52">.<pos:position pos:line="40" pos:column="53"/></operator><name pos:line="40" pos:column="53">pSqllogArg<pos:position pos:line="40" pos:column="63"/></name></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="65">db<pos:position pos:line="40" pos:column="67"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="40" pos:column="69">0<pos:position pos:line="40" pos:column="70"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="40" pos:column="72">2<pos:position pos:line="40" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="40" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="75"/></expr_stmt>
  }<pos:position pos:line="41" pos:column="4"/></block></then></if>
<cpp:endif pos:line="42" pos:column="1">#<cpp:directive pos:line="42" pos:column="2">endif<pos:position pos:line="42" pos:column="7"/></cpp:directive></cpp:endif>

  <comment type="block" pos:line="44" pos:column="3">/* Convert the connection into a zombie and then close it.
  */</comment>
  <expr_stmt><expr><name><name pos:line="46" pos:column="3">db<pos:position pos:line="46" pos:column="5"/></name><operator pos:line="46" pos:column="5">-&gt;<pos:position pos:line="46" pos:column="10"/></operator><name pos:line="46" pos:column="7">magic<pos:position pos:line="46" pos:column="12"/></name></name> <operator pos:line="46" pos:column="13">=<pos:position pos:line="46" pos:column="14"/></operator> <name pos:line="46" pos:column="15">SQLITE_MAGIC_ZOMBIE<pos:position pos:line="46" pos:column="34"/></name></expr>;<pos:position pos:line="46" pos:column="35"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="47" pos:column="3">sqlite3LeaveMutexAndCloseZombie<pos:position pos:line="47" pos:column="34"/></name><argument_list pos:line="47" pos:column="34">(<argument><expr><name pos:line="47" pos:column="35">db<pos:position pos:line="47" pos:column="37"/></name></expr></argument>)<pos:position pos:line="47" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="39"/></expr_stmt>
  <return pos:line="48" pos:column="3">return <expr><name pos:line="48" pos:column="10">SQLITE_OK<pos:position pos:line="48" pos:column="19"/></name></expr>;<pos:position pos:line="48" pos:column="20"/></return>
}<pos:position pos:line="49" pos:column="2"/></block></function></unit>
