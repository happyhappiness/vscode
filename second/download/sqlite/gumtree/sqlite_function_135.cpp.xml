<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/sqlite/gumtree/sqlite_function_135.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name> <modifier pos:line="1" pos:column="13">*<pos:position pos:line="1" pos:column="14"/></modifier></type><name pos:line="1" pos:column="14">memsys5MallocUnsafe<pos:position pos:line="1" pos:column="33"/></name><parameter_list pos:line="1" pos:column="33">(<parameter><decl><type><name pos:line="1" pos:column="34">int<pos:position pos:line="1" pos:column="37"/></name></type> <name pos:line="1" pos:column="38">nByte<pos:position pos:line="1" pos:column="43"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="44"/></parameter_list><block pos:line="1" pos:column="44">{
  <decl_stmt><decl><type><name pos:line="2" pos:column="3">int<pos:position pos:line="2" pos:column="6"/></name></type> <name pos:line="2" pos:column="7">i<pos:position pos:line="2" pos:column="8"/></name></decl>;<pos:position pos:line="2" pos:column="9"/></decl_stmt>           <comment type="block" pos:line="2" pos:column="20">/* Index of a mem5.aPool[] slot */</comment>
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">int<pos:position pos:line="3" pos:column="6"/></name></type> <name pos:line="3" pos:column="7">iBin<pos:position pos:line="3" pos:column="11"/></name></decl>;<pos:position pos:line="3" pos:column="12"/></decl_stmt>        <comment type="block" pos:line="3" pos:column="20">/* Index into mem5.aiFreelist[] */</comment>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">int<pos:position pos:line="4" pos:column="6"/></name></type> <name pos:line="4" pos:column="7">iFullSz<pos:position pos:line="4" pos:column="14"/></name></decl>;<pos:position pos:line="4" pos:column="15"/></decl_stmt>     <comment type="block" pos:line="4" pos:column="20">/* Size of allocation rounded up to power of 2 */</comment>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">int<pos:position pos:line="5" pos:column="6"/></name></type> <name pos:line="5" pos:column="7">iLogsize<pos:position pos:line="5" pos:column="15"/></name></decl>;<pos:position pos:line="5" pos:column="16"/></decl_stmt>    <comment type="block" pos:line="5" pos:column="20">/* Log2 of iFullSz/POW2_MIN */</comment>

  <comment type="block" pos:line="7" pos:column="3">/* nByte must be a positive */</comment>
  <expr_stmt><expr><call><name pos:line="8" pos:column="3">assert<pos:position pos:line="8" pos:column="9"/></name><argument_list pos:line="8" pos:column="9">( <argument><expr><name pos:line="8" pos:column="11">nByte<pos:position pos:line="8" pos:column="16"/></name><operator pos:line="8" pos:column="16">&gt;<pos:position pos:line="8" pos:column="20"/></operator><literal type="number" pos:line="8" pos:column="17">0<pos:position pos:line="8" pos:column="18"/></literal></expr></argument> )<pos:position pos:line="8" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="21"/></expr_stmt>

  <comment type="block" pos:line="10" pos:column="3">/* No more than 1GiB per allocation */</comment>
  <if pos:line="11" pos:column="3">if<condition pos:line="11" pos:column="5">( <expr><name pos:line="11" pos:column="7">nByte<pos:position pos:line="11" pos:column="12"/></name> <operator pos:line="11" pos:column="13">&gt;<pos:position pos:line="11" pos:column="17"/></operator> <literal type="number" pos:line="11" pos:column="15">0x40000000<pos:position pos:line="11" pos:column="25"/></literal></expr> )<pos:position pos:line="11" pos:column="27"/></condition><then pos:line="11" pos:column="27"> <block type="pseudo"><return pos:line="11" pos:column="28">return <expr><literal type="number" pos:line="11" pos:column="35">0<pos:position pos:line="11" pos:column="36"/></literal></expr>;<pos:position pos:line="11" pos:column="37"/></return></block></then></if>

<cpp:if pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">if<pos:position pos:line="13" pos:column="4"/></cpp:directive> <expr><call><name pos:line="13" pos:column="5">defined<pos:position pos:line="13" pos:column="12"/></name><argument_list pos:line="13" pos:column="12">(<argument><expr><name pos:line="13" pos:column="13">SQLITE_DEBUG<pos:position pos:line="13" pos:column="25"/></name></expr></argument>)<pos:position pos:line="13" pos:column="26"/></argument_list></call> <operator pos:line="13" pos:column="27">||<pos:position pos:line="13" pos:column="29"/></operator> <call><name pos:line="13" pos:column="30">defined<pos:position pos:line="13" pos:column="37"/></name><argument_list pos:line="13" pos:column="37">(<argument><expr><name pos:line="13" pos:column="38">SQLITE_TEST<pos:position pos:line="13" pos:column="49"/></name></expr></argument>)<pos:position pos:line="13" pos:column="50"/></argument_list></call></expr></cpp:if>
  <comment type="block" pos:line="14" pos:column="3">/* Keep track of the maximum allocation request.  Even unfulfilled
  ** requests are counted */</comment>
  <if pos:line="16" pos:column="3">if<condition pos:line="16" pos:column="5">( <expr><operator pos:line="16" pos:column="7">(<pos:position pos:line="16" pos:column="8"/></operator><name pos:line="16" pos:column="8">u32<pos:position pos:line="16" pos:column="11"/></name><operator pos:line="16" pos:column="11">)<pos:position pos:line="16" pos:column="12"/></operator><name pos:line="16" pos:column="12">nByte<pos:position pos:line="16" pos:column="17"/></name><operator pos:line="16" pos:column="17">&gt;<pos:position pos:line="16" pos:column="21"/></operator><name><name pos:line="16" pos:column="18">mem5<pos:position pos:line="16" pos:column="22"/></name><operator pos:line="16" pos:column="22">.<pos:position pos:line="16" pos:column="23"/></operator><name pos:line="16" pos:column="23">maxRequest<pos:position pos:line="16" pos:column="33"/></name></name></expr> )<pos:position pos:line="16" pos:column="35"/></condition><then><block pos:line="16" pos:column="35">{
    <expr_stmt><expr><name><name pos:line="17" pos:column="5">mem5<pos:position pos:line="17" pos:column="9"/></name><operator pos:line="17" pos:column="9">.<pos:position pos:line="17" pos:column="10"/></operator><name pos:line="17" pos:column="10">maxRequest<pos:position pos:line="17" pos:column="20"/></name></name> <operator pos:line="17" pos:column="21">=<pos:position pos:line="17" pos:column="22"/></operator> <name pos:line="17" pos:column="23">nByte<pos:position pos:line="17" pos:column="28"/></name></expr>;<pos:position pos:line="17" pos:column="29"/></expr_stmt>
  }<pos:position pos:line="18" pos:column="4"/></block></then></if>
<cpp:endif pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">endif<pos:position pos:line="19" pos:column="7"/></cpp:directive></cpp:endif>


  <comment type="block" pos:line="22" pos:column="3">/* Round nByte up to the next valid power of two */</comment>
  <for pos:line="23" pos:column="3">for<control pos:line="23" pos:column="6">(<init><expr><name pos:line="23" pos:column="7">iFullSz<pos:position pos:line="23" pos:column="14"/></name><operator pos:line="23" pos:column="14">=<pos:position pos:line="23" pos:column="15"/></operator><name><name pos:line="23" pos:column="15">mem5<pos:position pos:line="23" pos:column="19"/></name><operator pos:line="23" pos:column="19">.<pos:position pos:line="23" pos:column="20"/></operator><name pos:line="23" pos:column="20">szAtom<pos:position pos:line="23" pos:column="26"/></name></name></expr><operator pos:line="23" pos:column="26">,<pos:position pos:line="23" pos:column="27"/></operator><expr><name pos:line="23" pos:column="27">iLogsize<pos:position pos:line="23" pos:column="35"/></name><operator pos:line="23" pos:column="35">=<pos:position pos:line="23" pos:column="36"/></operator><literal type="number" pos:line="23" pos:column="36">0<pos:position pos:line="23" pos:column="37"/></literal></expr>;<pos:position pos:line="23" pos:column="38"/></init> <condition><expr><name pos:line="23" pos:column="39">iFullSz<pos:position pos:line="23" pos:column="46"/></name><operator pos:line="23" pos:column="46">&lt;<pos:position pos:line="23" pos:column="50"/></operator><name pos:line="23" pos:column="47">nByte<pos:position pos:line="23" pos:column="52"/></name></expr>;<pos:position pos:line="23" pos:column="53"/></condition> <incr><expr><name pos:line="23" pos:column="54">iFullSz<pos:position pos:line="23" pos:column="61"/></name><operator pos:line="23" pos:column="61">*=<pos:position pos:line="23" pos:column="63"/></operator><literal type="number" pos:line="23" pos:column="63">2<pos:position pos:line="23" pos:column="64"/></literal></expr><operator pos:line="23" pos:column="64">,<pos:position pos:line="23" pos:column="65"/></operator><expr><name pos:line="23" pos:column="65">iLogsize<pos:position pos:line="23" pos:column="73"/></name><operator pos:line="23" pos:column="73">++<pos:position pos:line="23" pos:column="75"/></operator></expr></incr>)<pos:position pos:line="23" pos:column="76"/></control><block pos:line="23" pos:column="76">{}<pos:position pos:line="23" pos:column="78"/></block></for>

  <comment type="block" pos:line="25" pos:column="3">/* Make sure mem5.aiFreelist[iLogsize] contains at least one free
  ** block.  If not, then split a block of the next larger power of
  ** two in order to create a new free block of size iLogsize.
  */</comment>
  <for pos:line="29" pos:column="3">for<control pos:line="29" pos:column="6">(<init><expr><name pos:line="29" pos:column="7">iBin<pos:position pos:line="29" pos:column="11"/></name><operator pos:line="29" pos:column="11">=<pos:position pos:line="29" pos:column="12"/></operator><name pos:line="29" pos:column="12">iLogsize<pos:position pos:line="29" pos:column="20"/></name></expr>;<pos:position pos:line="29" pos:column="21"/></init> <condition><expr><name pos:line="29" pos:column="22">iBin<pos:position pos:line="29" pos:column="26"/></name><operator pos:line="29" pos:column="26">&lt;=<pos:position pos:line="29" pos:column="31"/></operator><name pos:line="29" pos:column="28">LOGMAX<pos:position pos:line="29" pos:column="34"/></name> <operator pos:line="29" pos:column="35">&amp;&amp;<pos:position pos:line="29" pos:column="45"/></operator> <name><name pos:line="29" pos:column="38">mem5<pos:position pos:line="29" pos:column="42"/></name><operator pos:line="29" pos:column="42">.<pos:position pos:line="29" pos:column="43"/></operator><name pos:line="29" pos:column="43">aiFreelist<pos:position pos:line="29" pos:column="53"/></name><index pos:line="29" pos:column="53">[<expr><name pos:line="29" pos:column="54">iBin<pos:position pos:line="29" pos:column="58"/></name></expr>]<pos:position pos:line="29" pos:column="59"/></index></name><operator pos:line="29" pos:column="59">&lt;<pos:position pos:line="29" pos:column="63"/></operator><literal type="number" pos:line="29" pos:column="60">0<pos:position pos:line="29" pos:column="61"/></literal></expr>;<pos:position pos:line="29" pos:column="62"/></condition> <incr><expr><name pos:line="29" pos:column="63">iBin<pos:position pos:line="29" pos:column="67"/></name><operator pos:line="29" pos:column="67">++<pos:position pos:line="29" pos:column="69"/></operator></expr></incr>)<pos:position pos:line="29" pos:column="70"/></control><block pos:line="29" pos:column="70">{}<pos:position pos:line="29" pos:column="72"/></block></for>
  <if pos:line="30" pos:column="3">if<condition pos:line="30" pos:column="5">( <expr><name pos:line="30" pos:column="7">iBin<pos:position pos:line="30" pos:column="11"/></name><operator pos:line="30" pos:column="11">&gt;<pos:position pos:line="30" pos:column="15"/></operator><name pos:line="30" pos:column="12">LOGMAX<pos:position pos:line="30" pos:column="18"/></name></expr> )<pos:position pos:line="30" pos:column="20"/></condition><then><block pos:line="30" pos:column="20">{
    <expr_stmt><expr><call><name pos:line="31" pos:column="5">testcase<pos:position pos:line="31" pos:column="13"/></name><argument_list pos:line="31" pos:column="13">( <argument><expr><name><name pos:line="31" pos:column="15">sqlite3GlobalConfig<pos:position pos:line="31" pos:column="34"/></name><operator pos:line="31" pos:column="34">.<pos:position pos:line="31" pos:column="35"/></operator><name pos:line="31" pos:column="35">xLog<pos:position pos:line="31" pos:column="39"/></name></name><operator pos:line="31" pos:column="39">!=<pos:position pos:line="31" pos:column="41"/></operator><literal type="number" pos:line="31" pos:column="41">0<pos:position pos:line="31" pos:column="42"/></literal></expr></argument> )<pos:position pos:line="31" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="45"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="32" pos:column="5">sqlite3_log<pos:position pos:line="32" pos:column="16"/></name><argument_list pos:line="32" pos:column="16">(<argument><expr><name pos:line="32" pos:column="17">SQLITE_NOMEM<pos:position pos:line="32" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="32" pos:column="31">"failed to allocate %u bytes"<pos:position pos:line="32" pos:column="60"/></literal></expr></argument>, <argument><expr><name pos:line="32" pos:column="62">nByte<pos:position pos:line="32" pos:column="67"/></name></expr></argument>)<pos:position pos:line="32" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="69"/></expr_stmt>
    <return pos:line="33" pos:column="5">return <expr><literal type="number" pos:line="33" pos:column="12">0<pos:position pos:line="33" pos:column="13"/></literal></expr>;<pos:position pos:line="33" pos:column="14"/></return>
  }<pos:position pos:line="34" pos:column="4"/></block></then></if>
  <expr_stmt><expr><name pos:line="35" pos:column="3">i<pos:position pos:line="35" pos:column="4"/></name> <operator pos:line="35" pos:column="5">=<pos:position pos:line="35" pos:column="6"/></operator> <name><name pos:line="35" pos:column="7">mem5<pos:position pos:line="35" pos:column="11"/></name><operator pos:line="35" pos:column="11">.<pos:position pos:line="35" pos:column="12"/></operator><name pos:line="35" pos:column="12">aiFreelist<pos:position pos:line="35" pos:column="22"/></name><index pos:line="35" pos:column="22">[<expr><name pos:line="35" pos:column="23">iBin<pos:position pos:line="35" pos:column="27"/></name></expr>]<pos:position pos:line="35" pos:column="28"/></index></name></expr>;<pos:position pos:line="35" pos:column="29"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="36" pos:column="3">memsys5Unlink<pos:position pos:line="36" pos:column="16"/></name><argument_list pos:line="36" pos:column="16">(<argument><expr><name pos:line="36" pos:column="17">i<pos:position pos:line="36" pos:column="18"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="20">iBin<pos:position pos:line="36" pos:column="24"/></name></expr></argument>)<pos:position pos:line="36" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="26"/></expr_stmt>
  <while pos:line="37" pos:column="3">while<condition pos:line="37" pos:column="8">( <expr><name pos:line="37" pos:column="10">iBin<pos:position pos:line="37" pos:column="14"/></name><operator pos:line="37" pos:column="14">&gt;<pos:position pos:line="37" pos:column="18"/></operator><name pos:line="37" pos:column="15">iLogsize<pos:position pos:line="37" pos:column="23"/></name></expr> )<pos:position pos:line="37" pos:column="25"/></condition><block pos:line="37" pos:column="25">{
    <decl_stmt><decl><type><name pos:line="38" pos:column="5">int<pos:position pos:line="38" pos:column="8"/></name></type> <name pos:line="38" pos:column="9">newSize<pos:position pos:line="38" pos:column="16"/></name></decl>;<pos:position pos:line="38" pos:column="17"/></decl_stmt>

    <expr_stmt><expr><name pos:line="40" pos:column="5">iBin<pos:position pos:line="40" pos:column="9"/></name><operator pos:line="40" pos:column="9">--<pos:position pos:line="40" pos:column="11"/></operator></expr>;<pos:position pos:line="40" pos:column="12"/></expr_stmt>
    <expr_stmt><expr><name pos:line="41" pos:column="5">newSize<pos:position pos:line="41" pos:column="12"/></name> <operator pos:line="41" pos:column="13">=<pos:position pos:line="41" pos:column="14"/></operator> <literal type="number" pos:line="41" pos:column="15">1<pos:position pos:line="41" pos:column="16"/></literal> <operator pos:line="41" pos:column="17">&lt;&lt;<pos:position pos:line="41" pos:column="25"/></operator> <name pos:line="41" pos:column="20">iBin<pos:position pos:line="41" pos:column="24"/></name></expr>;<pos:position pos:line="41" pos:column="25"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="42" pos:column="5">mem5<pos:position pos:line="42" pos:column="9"/></name><operator pos:line="42" pos:column="9">.<pos:position pos:line="42" pos:column="10"/></operator><name pos:line="42" pos:column="10">aCtrl<pos:position pos:line="42" pos:column="15"/></name><index pos:line="42" pos:column="15">[<expr><name pos:line="42" pos:column="16">i<pos:position pos:line="42" pos:column="17"/></name><operator pos:line="42" pos:column="17">+<pos:position pos:line="42" pos:column="18"/></operator><name pos:line="42" pos:column="18">newSize<pos:position pos:line="42" pos:column="25"/></name></expr>]<pos:position pos:line="42" pos:column="26"/></index></name> <operator pos:line="42" pos:column="27">=<pos:position pos:line="42" pos:column="28"/></operator> <name pos:line="42" pos:column="29">CTRL_FREE<pos:position pos:line="42" pos:column="38"/></name> <operator pos:line="42" pos:column="39">|<pos:position pos:line="42" pos:column="40"/></operator> <name pos:line="42" pos:column="41">iBin<pos:position pos:line="42" pos:column="45"/></name></expr>;<pos:position pos:line="42" pos:column="46"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="43" pos:column="5">memsys5Link<pos:position pos:line="43" pos:column="16"/></name><argument_list pos:line="43" pos:column="16">(<argument><expr><name pos:line="43" pos:column="17">i<pos:position pos:line="43" pos:column="18"/></name><operator pos:line="43" pos:column="18">+<pos:position pos:line="43" pos:column="19"/></operator><name pos:line="43" pos:column="19">newSize<pos:position pos:line="43" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="28">iBin<pos:position pos:line="43" pos:column="32"/></name></expr></argument>)<pos:position pos:line="43" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="34"/></expr_stmt>
  }<pos:position pos:line="44" pos:column="4"/></block></while>
  <expr_stmt><expr><name><name pos:line="45" pos:column="3">mem5<pos:position pos:line="45" pos:column="7"/></name><operator pos:line="45" pos:column="7">.<pos:position pos:line="45" pos:column="8"/></operator><name pos:line="45" pos:column="8">aCtrl<pos:position pos:line="45" pos:column="13"/></name><index pos:line="45" pos:column="13">[<expr><name pos:line="45" pos:column="14">i<pos:position pos:line="45" pos:column="15"/></name></expr>]<pos:position pos:line="45" pos:column="16"/></index></name> <operator pos:line="45" pos:column="17">=<pos:position pos:line="45" pos:column="18"/></operator> <name pos:line="45" pos:column="19">iLogsize<pos:position pos:line="45" pos:column="27"/></name></expr>;<pos:position pos:line="45" pos:column="28"/></expr_stmt>

<cpp:if pos:line="47" pos:column="1">#<cpp:directive pos:line="47" pos:column="2">if<pos:position pos:line="47" pos:column="4"/></cpp:directive> <expr><call><name pos:line="47" pos:column="5">defined<pos:position pos:line="47" pos:column="12"/></name><argument_list pos:line="47" pos:column="12">(<argument><expr><name pos:line="47" pos:column="13">SQLITE_DEBUG<pos:position pos:line="47" pos:column="25"/></name></expr></argument>)<pos:position pos:line="47" pos:column="26"/></argument_list></call> <operator pos:line="47" pos:column="27">||<pos:position pos:line="47" pos:column="29"/></operator> <call><name pos:line="47" pos:column="30">defined<pos:position pos:line="47" pos:column="37"/></name><argument_list pos:line="47" pos:column="37">(<argument><expr><name pos:line="47" pos:column="38">SQLITE_TEST<pos:position pos:line="47" pos:column="49"/></name></expr></argument>)<pos:position pos:line="47" pos:column="50"/></argument_list></call></expr></cpp:if>
  <comment type="block" pos:line="48" pos:column="3">/* Update allocator performance statistics. */</comment>
  <expr_stmt><expr><name><name pos:line="49" pos:column="3">mem5<pos:position pos:line="49" pos:column="7"/></name><operator pos:line="49" pos:column="7">.<pos:position pos:line="49" pos:column="8"/></operator><name pos:line="49" pos:column="8">nAlloc<pos:position pos:line="49" pos:column="14"/></name></name><operator pos:line="49" pos:column="14">++<pos:position pos:line="49" pos:column="16"/></operator></expr>;<pos:position pos:line="49" pos:column="17"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="50" pos:column="3">mem5<pos:position pos:line="50" pos:column="7"/></name><operator pos:line="50" pos:column="7">.<pos:position pos:line="50" pos:column="8"/></operator><name pos:line="50" pos:column="8">totalAlloc<pos:position pos:line="50" pos:column="18"/></name></name> <operator pos:line="50" pos:column="19">+=<pos:position pos:line="50" pos:column="21"/></operator> <name pos:line="50" pos:column="22">iFullSz<pos:position pos:line="50" pos:column="29"/></name></expr>;<pos:position pos:line="50" pos:column="30"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="51" pos:column="3">mem5<pos:position pos:line="51" pos:column="7"/></name><operator pos:line="51" pos:column="7">.<pos:position pos:line="51" pos:column="8"/></operator><name pos:line="51" pos:column="8">totalExcess<pos:position pos:line="51" pos:column="19"/></name></name> <operator pos:line="51" pos:column="20">+=<pos:position pos:line="51" pos:column="22"/></operator> <name pos:line="51" pos:column="23">iFullSz<pos:position pos:line="51" pos:column="30"/></name> <operator pos:line="51" pos:column="31">-<pos:position pos:line="51" pos:column="32"/></operator> <name pos:line="51" pos:column="33">nByte<pos:position pos:line="51" pos:column="38"/></name></expr>;<pos:position pos:line="51" pos:column="39"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="52" pos:column="3">mem5<pos:position pos:line="52" pos:column="7"/></name><operator pos:line="52" pos:column="7">.<pos:position pos:line="52" pos:column="8"/></operator><name pos:line="52" pos:column="8">currentCount<pos:position pos:line="52" pos:column="20"/></name></name><operator pos:line="52" pos:column="20">++<pos:position pos:line="52" pos:column="22"/></operator></expr>;<pos:position pos:line="52" pos:column="23"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="53" pos:column="3">mem5<pos:position pos:line="53" pos:column="7"/></name><operator pos:line="53" pos:column="7">.<pos:position pos:line="53" pos:column="8"/></operator><name pos:line="53" pos:column="8">currentOut<pos:position pos:line="53" pos:column="18"/></name></name> <operator pos:line="53" pos:column="19">+=<pos:position pos:line="53" pos:column="21"/></operator> <name pos:line="53" pos:column="22">iFullSz<pos:position pos:line="53" pos:column="29"/></name></expr>;<pos:position pos:line="53" pos:column="30"/></expr_stmt>
  <if pos:line="54" pos:column="3">if<condition pos:line="54" pos:column="5">( <expr><name><name pos:line="54" pos:column="7">mem5<pos:position pos:line="54" pos:column="11"/></name><operator pos:line="54" pos:column="11">.<pos:position pos:line="54" pos:column="12"/></operator><name pos:line="54" pos:column="12">maxCount<pos:position pos:line="54" pos:column="20"/></name></name><operator pos:line="54" pos:column="20">&lt;<pos:position pos:line="54" pos:column="24"/></operator><name><name pos:line="54" pos:column="21">mem5<pos:position pos:line="54" pos:column="25"/></name><operator pos:line="54" pos:column="25">.<pos:position pos:line="54" pos:column="26"/></operator><name pos:line="54" pos:column="26">currentCount<pos:position pos:line="54" pos:column="38"/></name></name></expr> )<pos:position pos:line="54" pos:column="40"/></condition><then pos:line="54" pos:column="40"> <block type="pseudo"><expr_stmt><expr><name><name pos:line="54" pos:column="41">mem5<pos:position pos:line="54" pos:column="45"/></name><operator pos:line="54" pos:column="45">.<pos:position pos:line="54" pos:column="46"/></operator><name pos:line="54" pos:column="46">maxCount<pos:position pos:line="54" pos:column="54"/></name></name> <operator pos:line="54" pos:column="55">=<pos:position pos:line="54" pos:column="56"/></operator> <name><name pos:line="54" pos:column="57">mem5<pos:position pos:line="54" pos:column="61"/></name><operator pos:line="54" pos:column="61">.<pos:position pos:line="54" pos:column="62"/></operator><name pos:line="54" pos:column="62">currentCount<pos:position pos:line="54" pos:column="74"/></name></name></expr>;<pos:position pos:line="54" pos:column="75"/></expr_stmt></block></then></if>
  <if pos:line="55" pos:column="3">if<condition pos:line="55" pos:column="5">( <expr><name><name pos:line="55" pos:column="7">mem5<pos:position pos:line="55" pos:column="11"/></name><operator pos:line="55" pos:column="11">.<pos:position pos:line="55" pos:column="12"/></operator><name pos:line="55" pos:column="12">maxOut<pos:position pos:line="55" pos:column="18"/></name></name><operator pos:line="55" pos:column="18">&lt;<pos:position pos:line="55" pos:column="22"/></operator><name><name pos:line="55" pos:column="19">mem5<pos:position pos:line="55" pos:column="23"/></name><operator pos:line="55" pos:column="23">.<pos:position pos:line="55" pos:column="24"/></operator><name pos:line="55" pos:column="24">currentOut<pos:position pos:line="55" pos:column="34"/></name></name></expr> )<pos:position pos:line="55" pos:column="36"/></condition><then pos:line="55" pos:column="36"> <block type="pseudo"><expr_stmt><expr><name><name pos:line="55" pos:column="37">mem5<pos:position pos:line="55" pos:column="41"/></name><operator pos:line="55" pos:column="41">.<pos:position pos:line="55" pos:column="42"/></operator><name pos:line="55" pos:column="42">maxOut<pos:position pos:line="55" pos:column="48"/></name></name> <operator pos:line="55" pos:column="49">=<pos:position pos:line="55" pos:column="50"/></operator> <name><name pos:line="55" pos:column="51">mem5<pos:position pos:line="55" pos:column="55"/></name><operator pos:line="55" pos:column="55">.<pos:position pos:line="55" pos:column="56"/></operator><name pos:line="55" pos:column="56">currentOut<pos:position pos:line="55" pos:column="66"/></name></name></expr>;<pos:position pos:line="55" pos:column="67"/></expr_stmt></block></then></if>
<cpp:endif pos:line="56" pos:column="1">#<cpp:directive pos:line="56" pos:column="2">endif<pos:position pos:line="56" pos:column="7"/></cpp:directive></cpp:endif>

<cpp:ifdef pos:line="58" pos:column="1">#<cpp:directive pos:line="58" pos:column="2">ifdef<pos:position pos:line="58" pos:column="7"/></cpp:directive> <name pos:line="58" pos:column="8">SQLITE_DEBUG<pos:position pos:line="58" pos:column="20"/></name></cpp:ifdef>
  <comment type="block" pos:line="59" pos:column="3">/* Make sure the allocated memory does not assume that it is set to zero
  ** or retains a value from a previous allocation */</comment>
  <expr_stmt><expr><call><name pos:line="61" pos:column="3">memset<pos:position pos:line="61" pos:column="9"/></name><argument_list pos:line="61" pos:column="9">(<argument><expr><operator pos:line="61" pos:column="10">&amp;<pos:position pos:line="61" pos:column="15"/></operator><name><name pos:line="61" pos:column="11">mem5<pos:position pos:line="61" pos:column="15"/></name><operator pos:line="61" pos:column="15">.<pos:position pos:line="61" pos:column="16"/></operator><name pos:line="61" pos:column="16">zPool<pos:position pos:line="61" pos:column="21"/></name><index pos:line="61" pos:column="21">[<expr><name pos:line="61" pos:column="22">i<pos:position pos:line="61" pos:column="23"/></name><operator pos:line="61" pos:column="23">*<pos:position pos:line="61" pos:column="24"/></operator><name><name pos:line="61" pos:column="24">mem5<pos:position pos:line="61" pos:column="28"/></name><operator pos:line="61" pos:column="28">.<pos:position pos:line="61" pos:column="29"/></operator><name pos:line="61" pos:column="29">szAtom<pos:position pos:line="61" pos:column="35"/></name></name></expr>]<pos:position pos:line="61" pos:column="36"/></index></name></expr></argument>, <argument><expr><literal type="number" pos:line="61" pos:column="38">0xAA<pos:position pos:line="61" pos:column="42"/></literal></expr></argument>, <argument><expr><name pos:line="61" pos:column="44">iFullSz<pos:position pos:line="61" pos:column="51"/></name></expr></argument>)<pos:position pos:line="61" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="53"/></expr_stmt>
<cpp:endif pos:line="62" pos:column="1">#<cpp:directive pos:line="62" pos:column="2">endif<pos:position pos:line="62" pos:column="7"/></cpp:directive></cpp:endif>

  <comment type="block" pos:line="64" pos:column="3">/* Return a pointer to the allocated memory. */</comment>
  <return pos:line="65" pos:column="3">return <expr><operator pos:line="65" pos:column="10">(<pos:position pos:line="65" pos:column="11"/></operator><name pos:line="65" pos:column="11">void<pos:position pos:line="65" pos:column="15"/></name><operator pos:line="65" pos:column="15">*<pos:position pos:line="65" pos:column="16"/></operator><operator pos:line="65" pos:column="16">)<pos:position pos:line="65" pos:column="17"/></operator><operator pos:line="65" pos:column="17">&amp;<pos:position pos:line="65" pos:column="22"/></operator><name><name pos:line="65" pos:column="18">mem5<pos:position pos:line="65" pos:column="22"/></name><operator pos:line="65" pos:column="22">.<pos:position pos:line="65" pos:column="23"/></operator><name pos:line="65" pos:column="23">zPool<pos:position pos:line="65" pos:column="28"/></name><index pos:line="65" pos:column="28">[<expr><name pos:line="65" pos:column="29">i<pos:position pos:line="65" pos:column="30"/></name><operator pos:line="65" pos:column="30">*<pos:position pos:line="65" pos:column="31"/></operator><name><name pos:line="65" pos:column="31">mem5<pos:position pos:line="65" pos:column="35"/></name><operator pos:line="65" pos:column="35">.<pos:position pos:line="65" pos:column="36"/></operator><name pos:line="65" pos:column="36">szAtom<pos:position pos:line="65" pos:column="42"/></name></name></expr>]<pos:position pos:line="65" pos:column="43"/></index></name></expr>;<pos:position pos:line="65" pos:column="44"/></return>
}<pos:position pos:line="66" pos:column="2"/></block></function></unit>
